// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AdmKnowledgeBaseArgs, AdmKnowledgeBaseState } from "./admKnowledgeBase";
export type AdmKnowledgeBase = import("./admKnowledgeBase").AdmKnowledgeBase;
export const AdmKnowledgeBase: typeof import("./admKnowledgeBase").AdmKnowledgeBase = null as any;
utilities.lazyLoad(exports, ["AdmKnowledgeBase"], () => require("./admKnowledgeBase"));

export { AdmRemediationRecipeArgs, AdmRemediationRecipeState } from "./admRemediationRecipe";
export type AdmRemediationRecipe = import("./admRemediationRecipe").AdmRemediationRecipe;
export const AdmRemediationRecipe: typeof import("./admRemediationRecipe").AdmRemediationRecipe = null as any;
utilities.lazyLoad(exports, ["AdmRemediationRecipe"], () => require("./admRemediationRecipe"));

export { AdmRemediationRunArgs, AdmRemediationRunState } from "./admRemediationRun";
export type AdmRemediationRun = import("./admRemediationRun").AdmRemediationRun;
export const AdmRemediationRun: typeof import("./admRemediationRun").AdmRemediationRun = null as any;
utilities.lazyLoad(exports, ["AdmRemediationRun"], () => require("./admRemediationRun"));

export { AdmVulnerabilityAuditArgs, AdmVulnerabilityAuditState } from "./admVulnerabilityAudit";
export type AdmVulnerabilityAudit = import("./admVulnerabilityAudit").AdmVulnerabilityAudit;
export const AdmVulnerabilityAudit: typeof import("./admVulnerabilityAudit").AdmVulnerabilityAudit = null as any;
utilities.lazyLoad(exports, ["AdmVulnerabilityAudit"], () => require("./admVulnerabilityAudit"));

export { AiAnomalyDetectionAiPrivateEndpointArgs, AiAnomalyDetectionAiPrivateEndpointState } from "./aiAnomalyDetectionAiPrivateEndpoint";
export type AiAnomalyDetectionAiPrivateEndpoint = import("./aiAnomalyDetectionAiPrivateEndpoint").AiAnomalyDetectionAiPrivateEndpoint;
export const AiAnomalyDetectionAiPrivateEndpoint: typeof import("./aiAnomalyDetectionAiPrivateEndpoint").AiAnomalyDetectionAiPrivateEndpoint = null as any;
utilities.lazyLoad(exports, ["AiAnomalyDetectionAiPrivateEndpoint"], () => require("./aiAnomalyDetectionAiPrivateEndpoint"));

export { AiAnomalyDetectionDataAssetArgs, AiAnomalyDetectionDataAssetState } from "./aiAnomalyDetectionDataAsset";
export type AiAnomalyDetectionDataAsset = import("./aiAnomalyDetectionDataAsset").AiAnomalyDetectionDataAsset;
export const AiAnomalyDetectionDataAsset: typeof import("./aiAnomalyDetectionDataAsset").AiAnomalyDetectionDataAsset = null as any;
utilities.lazyLoad(exports, ["AiAnomalyDetectionDataAsset"], () => require("./aiAnomalyDetectionDataAsset"));

export { AiAnomalyDetectionDetectAnomalyJobArgs, AiAnomalyDetectionDetectAnomalyJobState } from "./aiAnomalyDetectionDetectAnomalyJob";
export type AiAnomalyDetectionDetectAnomalyJob = import("./aiAnomalyDetectionDetectAnomalyJob").AiAnomalyDetectionDetectAnomalyJob;
export const AiAnomalyDetectionDetectAnomalyJob: typeof import("./aiAnomalyDetectionDetectAnomalyJob").AiAnomalyDetectionDetectAnomalyJob = null as any;
utilities.lazyLoad(exports, ["AiAnomalyDetectionDetectAnomalyJob"], () => require("./aiAnomalyDetectionDetectAnomalyJob"));

export { AiAnomalyDetectionModelArgs, AiAnomalyDetectionModelState } from "./aiAnomalyDetectionModel";
export type AiAnomalyDetectionModel = import("./aiAnomalyDetectionModel").AiAnomalyDetectionModel;
export const AiAnomalyDetectionModel: typeof import("./aiAnomalyDetectionModel").AiAnomalyDetectionModel = null as any;
utilities.lazyLoad(exports, ["AiAnomalyDetectionModel"], () => require("./aiAnomalyDetectionModel"));

export { AiAnomalyDetectionProjectArgs, AiAnomalyDetectionProjectState } from "./aiAnomalyDetectionProject";
export type AiAnomalyDetectionProject = import("./aiAnomalyDetectionProject").AiAnomalyDetectionProject;
export const AiAnomalyDetectionProject: typeof import("./aiAnomalyDetectionProject").AiAnomalyDetectionProject = null as any;
utilities.lazyLoad(exports, ["AiAnomalyDetectionProject"], () => require("./aiAnomalyDetectionProject"));

export { AiDocumentModelArgs, AiDocumentModelState } from "./aiDocumentModel";
export type AiDocumentModel = import("./aiDocumentModel").AiDocumentModel;
export const AiDocumentModel: typeof import("./aiDocumentModel").AiDocumentModel = null as any;
utilities.lazyLoad(exports, ["AiDocumentModel"], () => require("./aiDocumentModel"));

export { AiDocumentProcessorJobArgs, AiDocumentProcessorJobState } from "./aiDocumentProcessorJob";
export type AiDocumentProcessorJob = import("./aiDocumentProcessorJob").AiDocumentProcessorJob;
export const AiDocumentProcessorJob: typeof import("./aiDocumentProcessorJob").AiDocumentProcessorJob = null as any;
utilities.lazyLoad(exports, ["AiDocumentProcessorJob"], () => require("./aiDocumentProcessorJob"));

export { AiDocumentProjectArgs, AiDocumentProjectState } from "./aiDocumentProject";
export type AiDocumentProject = import("./aiDocumentProject").AiDocumentProject;
export const AiDocumentProject: typeof import("./aiDocumentProject").AiDocumentProject = null as any;
utilities.lazyLoad(exports, ["AiDocumentProject"], () => require("./aiDocumentProject"));

export { AiLanguageEndpointArgs, AiLanguageEndpointState } from "./aiLanguageEndpoint";
export type AiLanguageEndpoint = import("./aiLanguageEndpoint").AiLanguageEndpoint;
export const AiLanguageEndpoint: typeof import("./aiLanguageEndpoint").AiLanguageEndpoint = null as any;
utilities.lazyLoad(exports, ["AiLanguageEndpoint"], () => require("./aiLanguageEndpoint"));

export { AiLanguageModelArgs, AiLanguageModelState } from "./aiLanguageModel";
export type AiLanguageModel = import("./aiLanguageModel").AiLanguageModel;
export const AiLanguageModel: typeof import("./aiLanguageModel").AiLanguageModel = null as any;
utilities.lazyLoad(exports, ["AiLanguageModel"], () => require("./aiLanguageModel"));

export { AiLanguageProjectArgs, AiLanguageProjectState } from "./aiLanguageProject";
export type AiLanguageProject = import("./aiLanguageProject").AiLanguageProject;
export const AiLanguageProject: typeof import("./aiLanguageProject").AiLanguageProject = null as any;
utilities.lazyLoad(exports, ["AiLanguageProject"], () => require("./aiLanguageProject"));

export { AiVisionModelArgs, AiVisionModelState } from "./aiVisionModel";
export type AiVisionModel = import("./aiVisionModel").AiVisionModel;
export const AiVisionModel: typeof import("./aiVisionModel").AiVisionModel = null as any;
utilities.lazyLoad(exports, ["AiVisionModel"], () => require("./aiVisionModel"));

export { AiVisionProjectArgs, AiVisionProjectState } from "./aiVisionProject";
export type AiVisionProject = import("./aiVisionProject").AiVisionProject;
export const AiVisionProject: typeof import("./aiVisionProject").AiVisionProject = null as any;
utilities.lazyLoad(exports, ["AiVisionProject"], () => require("./aiVisionProject"));

export { AnalyticsAnalyticsInstanceArgs, AnalyticsAnalyticsInstanceState } from "./analyticsAnalyticsInstance";
export type AnalyticsAnalyticsInstance = import("./analyticsAnalyticsInstance").AnalyticsAnalyticsInstance;
export const AnalyticsAnalyticsInstance: typeof import("./analyticsAnalyticsInstance").AnalyticsAnalyticsInstance = null as any;
utilities.lazyLoad(exports, ["AnalyticsAnalyticsInstance"], () => require("./analyticsAnalyticsInstance"));

export { AnalyticsAnalyticsInstancePrivateAccessChannelArgs, AnalyticsAnalyticsInstancePrivateAccessChannelState } from "./analyticsAnalyticsInstancePrivateAccessChannel";
export type AnalyticsAnalyticsInstancePrivateAccessChannel = import("./analyticsAnalyticsInstancePrivateAccessChannel").AnalyticsAnalyticsInstancePrivateAccessChannel;
export const AnalyticsAnalyticsInstancePrivateAccessChannel: typeof import("./analyticsAnalyticsInstancePrivateAccessChannel").AnalyticsAnalyticsInstancePrivateAccessChannel = null as any;
utilities.lazyLoad(exports, ["AnalyticsAnalyticsInstancePrivateAccessChannel"], () => require("./analyticsAnalyticsInstancePrivateAccessChannel"));

export { AnalyticsAnalyticsInstanceVanityUrlArgs, AnalyticsAnalyticsInstanceVanityUrlState } from "./analyticsAnalyticsInstanceVanityUrl";
export type AnalyticsAnalyticsInstanceVanityUrl = import("./analyticsAnalyticsInstanceVanityUrl").AnalyticsAnalyticsInstanceVanityUrl;
export const AnalyticsAnalyticsInstanceVanityUrl: typeof import("./analyticsAnalyticsInstanceVanityUrl").AnalyticsAnalyticsInstanceVanityUrl = null as any;
utilities.lazyLoad(exports, ["AnalyticsAnalyticsInstanceVanityUrl"], () => require("./analyticsAnalyticsInstanceVanityUrl"));

export { AnnouncementsServiceAnnouncementSubscriptionArgs, AnnouncementsServiceAnnouncementSubscriptionState } from "./announcementsServiceAnnouncementSubscription";
export type AnnouncementsServiceAnnouncementSubscription = import("./announcementsServiceAnnouncementSubscription").AnnouncementsServiceAnnouncementSubscription;
export const AnnouncementsServiceAnnouncementSubscription: typeof import("./announcementsServiceAnnouncementSubscription").AnnouncementsServiceAnnouncementSubscription = null as any;
utilities.lazyLoad(exports, ["AnnouncementsServiceAnnouncementSubscription"], () => require("./announcementsServiceAnnouncementSubscription"));

export { AnnouncementsServiceAnnouncementSubscriptionsActionsChangeCompartmentArgs, AnnouncementsServiceAnnouncementSubscriptionsActionsChangeCompartmentState } from "./announcementsServiceAnnouncementSubscriptionsActionsChangeCompartment";
export type AnnouncementsServiceAnnouncementSubscriptionsActionsChangeCompartment = import("./announcementsServiceAnnouncementSubscriptionsActionsChangeCompartment").AnnouncementsServiceAnnouncementSubscriptionsActionsChangeCompartment;
export const AnnouncementsServiceAnnouncementSubscriptionsActionsChangeCompartment: typeof import("./announcementsServiceAnnouncementSubscriptionsActionsChangeCompartment").AnnouncementsServiceAnnouncementSubscriptionsActionsChangeCompartment = null as any;
utilities.lazyLoad(exports, ["AnnouncementsServiceAnnouncementSubscriptionsActionsChangeCompartment"], () => require("./announcementsServiceAnnouncementSubscriptionsActionsChangeCompartment"));

export { AnnouncementsServiceAnnouncementSubscriptionsFilterGroupArgs, AnnouncementsServiceAnnouncementSubscriptionsFilterGroupState } from "./announcementsServiceAnnouncementSubscriptionsFilterGroup";
export type AnnouncementsServiceAnnouncementSubscriptionsFilterGroup = import("./announcementsServiceAnnouncementSubscriptionsFilterGroup").AnnouncementsServiceAnnouncementSubscriptionsFilterGroup;
export const AnnouncementsServiceAnnouncementSubscriptionsFilterGroup: typeof import("./announcementsServiceAnnouncementSubscriptionsFilterGroup").AnnouncementsServiceAnnouncementSubscriptionsFilterGroup = null as any;
utilities.lazyLoad(exports, ["AnnouncementsServiceAnnouncementSubscriptionsFilterGroup"], () => require("./announcementsServiceAnnouncementSubscriptionsFilterGroup"));

export { ApigatewayApiArgs, ApigatewayApiState } from "./apigatewayApi";
export type ApigatewayApi = import("./apigatewayApi").ApigatewayApi;
export const ApigatewayApi: typeof import("./apigatewayApi").ApigatewayApi = null as any;
utilities.lazyLoad(exports, ["ApigatewayApi"], () => require("./apigatewayApi"));

export { ApigatewayCertificateArgs, ApigatewayCertificateState } from "./apigatewayCertificate";
export type ApigatewayCertificate = import("./apigatewayCertificate").ApigatewayCertificate;
export const ApigatewayCertificate: typeof import("./apigatewayCertificate").ApigatewayCertificate = null as any;
utilities.lazyLoad(exports, ["ApigatewayCertificate"], () => require("./apigatewayCertificate"));

export { ApigatewayDeploymentArgs, ApigatewayDeploymentState } from "./apigatewayDeployment";
export type ApigatewayDeployment = import("./apigatewayDeployment").ApigatewayDeployment;
export const ApigatewayDeployment: typeof import("./apigatewayDeployment").ApigatewayDeployment = null as any;
utilities.lazyLoad(exports, ["ApigatewayDeployment"], () => require("./apigatewayDeployment"));

export { ApigatewayGatewayArgs, ApigatewayGatewayState } from "./apigatewayGateway";
export type ApigatewayGateway = import("./apigatewayGateway").ApigatewayGateway;
export const ApigatewayGateway: typeof import("./apigatewayGateway").ApigatewayGateway = null as any;
utilities.lazyLoad(exports, ["ApigatewayGateway"], () => require("./apigatewayGateway"));

export { ApigatewaySubscriberArgs, ApigatewaySubscriberState } from "./apigatewaySubscriber";
export type ApigatewaySubscriber = import("./apigatewaySubscriber").ApigatewaySubscriber;
export const ApigatewaySubscriber: typeof import("./apigatewaySubscriber").ApigatewaySubscriber = null as any;
utilities.lazyLoad(exports, ["ApigatewaySubscriber"], () => require("./apigatewaySubscriber"));

export { ApigatewayUsagePlanArgs, ApigatewayUsagePlanState } from "./apigatewayUsagePlan";
export type ApigatewayUsagePlan = import("./apigatewayUsagePlan").ApigatewayUsagePlan;
export const ApigatewayUsagePlan: typeof import("./apigatewayUsagePlan").ApigatewayUsagePlan = null as any;
utilities.lazyLoad(exports, ["ApigatewayUsagePlan"], () => require("./apigatewayUsagePlan"));

export { ApmApmDomainArgs, ApmApmDomainState } from "./apmApmDomain";
export type ApmApmDomain = import("./apmApmDomain").ApmApmDomain;
export const ApmApmDomain: typeof import("./apmApmDomain").ApmApmDomain = null as any;
utilities.lazyLoad(exports, ["ApmApmDomain"], () => require("./apmApmDomain"));

export { ApmConfigConfigArgs, ApmConfigConfigState } from "./apmConfigConfig";
export type ApmConfigConfig = import("./apmConfigConfig").ApmConfigConfig;
export const ApmConfigConfig: typeof import("./apmConfigConfig").ApmConfigConfig = null as any;
utilities.lazyLoad(exports, ["ApmConfigConfig"], () => require("./apmConfigConfig"));

export { ApmSyntheticsDedicatedVantagePointArgs, ApmSyntheticsDedicatedVantagePointState } from "./apmSyntheticsDedicatedVantagePoint";
export type ApmSyntheticsDedicatedVantagePoint = import("./apmSyntheticsDedicatedVantagePoint").ApmSyntheticsDedicatedVantagePoint;
export const ApmSyntheticsDedicatedVantagePoint: typeof import("./apmSyntheticsDedicatedVantagePoint").ApmSyntheticsDedicatedVantagePoint = null as any;
utilities.lazyLoad(exports, ["ApmSyntheticsDedicatedVantagePoint"], () => require("./apmSyntheticsDedicatedVantagePoint"));

export { ApmSyntheticsMonitorArgs, ApmSyntheticsMonitorState } from "./apmSyntheticsMonitor";
export type ApmSyntheticsMonitor = import("./apmSyntheticsMonitor").ApmSyntheticsMonitor;
export const ApmSyntheticsMonitor: typeof import("./apmSyntheticsMonitor").ApmSyntheticsMonitor = null as any;
utilities.lazyLoad(exports, ["ApmSyntheticsMonitor"], () => require("./apmSyntheticsMonitor"));

export { ApmSyntheticsOnPremiseVantagePointArgs, ApmSyntheticsOnPremiseVantagePointState } from "./apmSyntheticsOnPremiseVantagePoint";
export type ApmSyntheticsOnPremiseVantagePoint = import("./apmSyntheticsOnPremiseVantagePoint").ApmSyntheticsOnPremiseVantagePoint;
export const ApmSyntheticsOnPremiseVantagePoint: typeof import("./apmSyntheticsOnPremiseVantagePoint").ApmSyntheticsOnPremiseVantagePoint = null as any;
utilities.lazyLoad(exports, ["ApmSyntheticsOnPremiseVantagePoint"], () => require("./apmSyntheticsOnPremiseVantagePoint"));

export { ApmSyntheticsOnPremiseVantagePointWorkerArgs, ApmSyntheticsOnPremiseVantagePointWorkerState } from "./apmSyntheticsOnPremiseVantagePointWorker";
export type ApmSyntheticsOnPremiseVantagePointWorker = import("./apmSyntheticsOnPremiseVantagePointWorker").ApmSyntheticsOnPremiseVantagePointWorker;
export const ApmSyntheticsOnPremiseVantagePointWorker: typeof import("./apmSyntheticsOnPremiseVantagePointWorker").ApmSyntheticsOnPremiseVantagePointWorker = null as any;
utilities.lazyLoad(exports, ["ApmSyntheticsOnPremiseVantagePointWorker"], () => require("./apmSyntheticsOnPremiseVantagePointWorker"));

export { ApmSyntheticsScriptArgs, ApmSyntheticsScriptState } from "./apmSyntheticsScript";
export type ApmSyntheticsScript = import("./apmSyntheticsScript").ApmSyntheticsScript;
export const ApmSyntheticsScript: typeof import("./apmSyntheticsScript").ApmSyntheticsScript = null as any;
utilities.lazyLoad(exports, ["ApmSyntheticsScript"], () => require("./apmSyntheticsScript"));

export { AppmgmtControlMonitorPluginManagementArgs, AppmgmtControlMonitorPluginManagementState } from "./appmgmtControlMonitorPluginManagement";
export type AppmgmtControlMonitorPluginManagement = import("./appmgmtControlMonitorPluginManagement").AppmgmtControlMonitorPluginManagement;
export const AppmgmtControlMonitorPluginManagement: typeof import("./appmgmtControlMonitorPluginManagement").AppmgmtControlMonitorPluginManagement = null as any;
utilities.lazyLoad(exports, ["AppmgmtControlMonitorPluginManagement"], () => require("./appmgmtControlMonitorPluginManagement"));

export { ArtifactsContainerConfigurationArgs, ArtifactsContainerConfigurationState } from "./artifactsContainerConfiguration";
export type ArtifactsContainerConfiguration = import("./artifactsContainerConfiguration").ArtifactsContainerConfiguration;
export const ArtifactsContainerConfiguration: typeof import("./artifactsContainerConfiguration").ArtifactsContainerConfiguration = null as any;
utilities.lazyLoad(exports, ["ArtifactsContainerConfiguration"], () => require("./artifactsContainerConfiguration"));

export { ArtifactsContainerImageSignatureArgs, ArtifactsContainerImageSignatureState } from "./artifactsContainerImageSignature";
export type ArtifactsContainerImageSignature = import("./artifactsContainerImageSignature").ArtifactsContainerImageSignature;
export const ArtifactsContainerImageSignature: typeof import("./artifactsContainerImageSignature").ArtifactsContainerImageSignature = null as any;
utilities.lazyLoad(exports, ["ArtifactsContainerImageSignature"], () => require("./artifactsContainerImageSignature"));

export { ArtifactsContainerRepositoryArgs, ArtifactsContainerRepositoryState } from "./artifactsContainerRepository";
export type ArtifactsContainerRepository = import("./artifactsContainerRepository").ArtifactsContainerRepository;
export const ArtifactsContainerRepository: typeof import("./artifactsContainerRepository").ArtifactsContainerRepository = null as any;
utilities.lazyLoad(exports, ["ArtifactsContainerRepository"], () => require("./artifactsContainerRepository"));

export { ArtifactsGenericArtifactArgs, ArtifactsGenericArtifactState } from "./artifactsGenericArtifact";
export type ArtifactsGenericArtifact = import("./artifactsGenericArtifact").ArtifactsGenericArtifact;
export const ArtifactsGenericArtifact: typeof import("./artifactsGenericArtifact").ArtifactsGenericArtifact = null as any;
utilities.lazyLoad(exports, ["ArtifactsGenericArtifact"], () => require("./artifactsGenericArtifact"));

export { ArtifactsRepositoryArgs, ArtifactsRepositoryState } from "./artifactsRepository";
export type ArtifactsRepository = import("./artifactsRepository").ArtifactsRepository;
export const ArtifactsRepository: typeof import("./artifactsRepository").ArtifactsRepository = null as any;
utilities.lazyLoad(exports, ["ArtifactsRepository"], () => require("./artifactsRepository"));

export { AuditConfigurationArgs, AuditConfigurationState } from "./auditConfiguration";
export type AuditConfiguration = import("./auditConfiguration").AuditConfiguration;
export const AuditConfiguration: typeof import("./auditConfiguration").AuditConfiguration = null as any;
utilities.lazyLoad(exports, ["AuditConfiguration"], () => require("./auditConfiguration"));

export { AutoscalingAutoScalingConfigurationArgs, AutoscalingAutoScalingConfigurationState } from "./autoscalingAutoScalingConfiguration";
export type AutoscalingAutoScalingConfiguration = import("./autoscalingAutoScalingConfiguration").AutoscalingAutoScalingConfiguration;
export const AutoscalingAutoScalingConfiguration: typeof import("./autoscalingAutoScalingConfiguration").AutoscalingAutoScalingConfiguration = null as any;
utilities.lazyLoad(exports, ["AutoscalingAutoScalingConfiguration"], () => require("./autoscalingAutoScalingConfiguration"));

export { BastionBastionArgs, BastionBastionState } from "./bastionBastion";
export type BastionBastion = import("./bastionBastion").BastionBastion;
export const BastionBastion: typeof import("./bastionBastion").BastionBastion = null as any;
utilities.lazyLoad(exports, ["BastionBastion"], () => require("./bastionBastion"));

export { BastionSessionArgs, BastionSessionState } from "./bastionSession";
export type BastionSession = import("./bastionSession").BastionSession;
export const BastionSession: typeof import("./bastionSession").BastionSession = null as any;
utilities.lazyLoad(exports, ["BastionSession"], () => require("./bastionSession"));

export { BdsAutoScalingConfigurationArgs, BdsAutoScalingConfigurationState } from "./bdsAutoScalingConfiguration";
export type BdsAutoScalingConfiguration = import("./bdsAutoScalingConfiguration").BdsAutoScalingConfiguration;
export const BdsAutoScalingConfiguration: typeof import("./bdsAutoScalingConfiguration").BdsAutoScalingConfiguration = null as any;
utilities.lazyLoad(exports, ["BdsAutoScalingConfiguration"], () => require("./bdsAutoScalingConfiguration"));

export { BdsBdsInstanceArgs, BdsBdsInstanceState } from "./bdsBdsInstance";
export type BdsBdsInstance = import("./bdsBdsInstance").BdsBdsInstance;
export const BdsBdsInstance: typeof import("./bdsBdsInstance").BdsBdsInstance = null as any;
utilities.lazyLoad(exports, ["BdsBdsInstance"], () => require("./bdsBdsInstance"));

export { BdsBdsInstanceApiKeyArgs, BdsBdsInstanceApiKeyState } from "./bdsBdsInstanceApiKey";
export type BdsBdsInstanceApiKey = import("./bdsBdsInstanceApiKey").BdsBdsInstanceApiKey;
export const BdsBdsInstanceApiKey: typeof import("./bdsBdsInstanceApiKey").BdsBdsInstanceApiKey = null as any;
utilities.lazyLoad(exports, ["BdsBdsInstanceApiKey"], () => require("./bdsBdsInstanceApiKey"));

export { BdsBdsInstanceMetastoreConfigArgs, BdsBdsInstanceMetastoreConfigState } from "./bdsBdsInstanceMetastoreConfig";
export type BdsBdsInstanceMetastoreConfig = import("./bdsBdsInstanceMetastoreConfig").BdsBdsInstanceMetastoreConfig;
export const BdsBdsInstanceMetastoreConfig: typeof import("./bdsBdsInstanceMetastoreConfig").BdsBdsInstanceMetastoreConfig = null as any;
utilities.lazyLoad(exports, ["BdsBdsInstanceMetastoreConfig"], () => require("./bdsBdsInstanceMetastoreConfig"));

export { BdsBdsInstanceOperationCertificateManagementsManagementArgs, BdsBdsInstanceOperationCertificateManagementsManagementState } from "./bdsBdsInstanceOperationCertificateManagementsManagement";
export type BdsBdsInstanceOperationCertificateManagementsManagement = import("./bdsBdsInstanceOperationCertificateManagementsManagement").BdsBdsInstanceOperationCertificateManagementsManagement;
export const BdsBdsInstanceOperationCertificateManagementsManagement: typeof import("./bdsBdsInstanceOperationCertificateManagementsManagement").BdsBdsInstanceOperationCertificateManagementsManagement = null as any;
utilities.lazyLoad(exports, ["BdsBdsInstanceOperationCertificateManagementsManagement"], () => require("./bdsBdsInstanceOperationCertificateManagementsManagement"));

export { BdsBdsInstanceOsPatchActionArgs, BdsBdsInstanceOsPatchActionState } from "./bdsBdsInstanceOsPatchAction";
export type BdsBdsInstanceOsPatchAction = import("./bdsBdsInstanceOsPatchAction").BdsBdsInstanceOsPatchAction;
export const BdsBdsInstanceOsPatchAction: typeof import("./bdsBdsInstanceOsPatchAction").BdsBdsInstanceOsPatchAction = null as any;
utilities.lazyLoad(exports, ["BdsBdsInstanceOsPatchAction"], () => require("./bdsBdsInstanceOsPatchAction"));

export { BdsBdsInstancePatchActionArgs, BdsBdsInstancePatchActionState } from "./bdsBdsInstancePatchAction";
export type BdsBdsInstancePatchAction = import("./bdsBdsInstancePatchAction").BdsBdsInstancePatchAction;
export const BdsBdsInstancePatchAction: typeof import("./bdsBdsInstancePatchAction").BdsBdsInstancePatchAction = null as any;
utilities.lazyLoad(exports, ["BdsBdsInstancePatchAction"], () => require("./bdsBdsInstancePatchAction"));

export { BlockchainBlockchainPlatformArgs, BlockchainBlockchainPlatformState } from "./blockchainBlockchainPlatform";
export type BlockchainBlockchainPlatform = import("./blockchainBlockchainPlatform").BlockchainBlockchainPlatform;
export const BlockchainBlockchainPlatform: typeof import("./blockchainBlockchainPlatform").BlockchainBlockchainPlatform = null as any;
utilities.lazyLoad(exports, ["BlockchainBlockchainPlatform"], () => require("./blockchainBlockchainPlatform"));

export { BlockchainOsnArgs, BlockchainOsnState } from "./blockchainOsn";
export type BlockchainOsn = import("./blockchainOsn").BlockchainOsn;
export const BlockchainOsn: typeof import("./blockchainOsn").BlockchainOsn = null as any;
utilities.lazyLoad(exports, ["BlockchainOsn"], () => require("./blockchainOsn"));

export { BlockchainPeerArgs, BlockchainPeerState } from "./blockchainPeer";
export type BlockchainPeer = import("./blockchainPeer").BlockchainPeer;
export const BlockchainPeer: typeof import("./blockchainPeer").BlockchainPeer = null as any;
utilities.lazyLoad(exports, ["BlockchainPeer"], () => require("./blockchainPeer"));

export { BudgetAlertRuleArgs, BudgetAlertRuleState } from "./budgetAlertRule";
export type BudgetAlertRule = import("./budgetAlertRule").BudgetAlertRule;
export const BudgetAlertRule: typeof import("./budgetAlertRule").BudgetAlertRule = null as any;
utilities.lazyLoad(exports, ["BudgetAlertRule"], () => require("./budgetAlertRule"));

export { BudgetBudgetArgs, BudgetBudgetState } from "./budgetBudget";
export type BudgetBudget = import("./budgetBudget").BudgetBudget;
export const BudgetBudget: typeof import("./budgetBudget").BudgetBudget = null as any;
utilities.lazyLoad(exports, ["BudgetBudget"], () => require("./budgetBudget"));

export { CapacityManagementOccAvailabilityCatalogArgs, CapacityManagementOccAvailabilityCatalogState } from "./capacityManagementOccAvailabilityCatalog";
export type CapacityManagementOccAvailabilityCatalog = import("./capacityManagementOccAvailabilityCatalog").CapacityManagementOccAvailabilityCatalog;
export const CapacityManagementOccAvailabilityCatalog: typeof import("./capacityManagementOccAvailabilityCatalog").CapacityManagementOccAvailabilityCatalog = null as any;
utilities.lazyLoad(exports, ["CapacityManagementOccAvailabilityCatalog"], () => require("./capacityManagementOccAvailabilityCatalog"));

export { CapacityManagementOccCapacityRequestArgs, CapacityManagementOccCapacityRequestState } from "./capacityManagementOccCapacityRequest";
export type CapacityManagementOccCapacityRequest = import("./capacityManagementOccCapacityRequest").CapacityManagementOccCapacityRequest;
export const CapacityManagementOccCapacityRequest: typeof import("./capacityManagementOccCapacityRequest").CapacityManagementOccCapacityRequest = null as any;
utilities.lazyLoad(exports, ["CapacityManagementOccCapacityRequest"], () => require("./capacityManagementOccCapacityRequest"));

export { CertificatesManagementCaBundleArgs, CertificatesManagementCaBundleState } from "./certificatesManagementCaBundle";
export type CertificatesManagementCaBundle = import("./certificatesManagementCaBundle").CertificatesManagementCaBundle;
export const CertificatesManagementCaBundle: typeof import("./certificatesManagementCaBundle").CertificatesManagementCaBundle = null as any;
utilities.lazyLoad(exports, ["CertificatesManagementCaBundle"], () => require("./certificatesManagementCaBundle"));

export { CertificatesManagementCertificateArgs, CertificatesManagementCertificateState } from "./certificatesManagementCertificate";
export type CertificatesManagementCertificate = import("./certificatesManagementCertificate").CertificatesManagementCertificate;
export const CertificatesManagementCertificate: typeof import("./certificatesManagementCertificate").CertificatesManagementCertificate = null as any;
utilities.lazyLoad(exports, ["CertificatesManagementCertificate"], () => require("./certificatesManagementCertificate"));

export { CertificatesManagementCertificateAuthorityArgs, CertificatesManagementCertificateAuthorityState } from "./certificatesManagementCertificateAuthority";
export type CertificatesManagementCertificateAuthority = import("./certificatesManagementCertificateAuthority").CertificatesManagementCertificateAuthority;
export const CertificatesManagementCertificateAuthority: typeof import("./certificatesManagementCertificateAuthority").CertificatesManagementCertificateAuthority = null as any;
utilities.lazyLoad(exports, ["CertificatesManagementCertificateAuthority"], () => require("./certificatesManagementCertificateAuthority"));

export { CloudBridgeAgentArgs, CloudBridgeAgentState } from "./cloudBridgeAgent";
export type CloudBridgeAgent = import("./cloudBridgeAgent").CloudBridgeAgent;
export const CloudBridgeAgent: typeof import("./cloudBridgeAgent").CloudBridgeAgent = null as any;
utilities.lazyLoad(exports, ["CloudBridgeAgent"], () => require("./cloudBridgeAgent"));

export { CloudBridgeAgentDependencyArgs, CloudBridgeAgentDependencyState } from "./cloudBridgeAgentDependency";
export type CloudBridgeAgentDependency = import("./cloudBridgeAgentDependency").CloudBridgeAgentDependency;
export const CloudBridgeAgentDependency: typeof import("./cloudBridgeAgentDependency").CloudBridgeAgentDependency = null as any;
utilities.lazyLoad(exports, ["CloudBridgeAgentDependency"], () => require("./cloudBridgeAgentDependency"));

export { CloudBridgeAgentPluginArgs, CloudBridgeAgentPluginState } from "./cloudBridgeAgentPlugin";
export type CloudBridgeAgentPlugin = import("./cloudBridgeAgentPlugin").CloudBridgeAgentPlugin;
export const CloudBridgeAgentPlugin: typeof import("./cloudBridgeAgentPlugin").CloudBridgeAgentPlugin = null as any;
utilities.lazyLoad(exports, ["CloudBridgeAgentPlugin"], () => require("./cloudBridgeAgentPlugin"));

export { CloudBridgeAssetArgs, CloudBridgeAssetState } from "./cloudBridgeAsset";
export type CloudBridgeAsset = import("./cloudBridgeAsset").CloudBridgeAsset;
export const CloudBridgeAsset: typeof import("./cloudBridgeAsset").CloudBridgeAsset = null as any;
utilities.lazyLoad(exports, ["CloudBridgeAsset"], () => require("./cloudBridgeAsset"));

export { CloudBridgeAssetSourceArgs, CloudBridgeAssetSourceState } from "./cloudBridgeAssetSource";
export type CloudBridgeAssetSource = import("./cloudBridgeAssetSource").CloudBridgeAssetSource;
export const CloudBridgeAssetSource: typeof import("./cloudBridgeAssetSource").CloudBridgeAssetSource = null as any;
utilities.lazyLoad(exports, ["CloudBridgeAssetSource"], () => require("./cloudBridgeAssetSource"));

export { CloudBridgeDiscoveryScheduleArgs, CloudBridgeDiscoveryScheduleState } from "./cloudBridgeDiscoverySchedule";
export type CloudBridgeDiscoverySchedule = import("./cloudBridgeDiscoverySchedule").CloudBridgeDiscoverySchedule;
export const CloudBridgeDiscoverySchedule: typeof import("./cloudBridgeDiscoverySchedule").CloudBridgeDiscoverySchedule = null as any;
utilities.lazyLoad(exports, ["CloudBridgeDiscoverySchedule"], () => require("./cloudBridgeDiscoverySchedule"));

export { CloudBridgeEnvironmentArgs, CloudBridgeEnvironmentState } from "./cloudBridgeEnvironment";
export type CloudBridgeEnvironment = import("./cloudBridgeEnvironment").CloudBridgeEnvironment;
export const CloudBridgeEnvironment: typeof import("./cloudBridgeEnvironment").CloudBridgeEnvironment = null as any;
utilities.lazyLoad(exports, ["CloudBridgeEnvironment"], () => require("./cloudBridgeEnvironment"));

export { CloudBridgeInventoryArgs, CloudBridgeInventoryState } from "./cloudBridgeInventory";
export type CloudBridgeInventory = import("./cloudBridgeInventory").CloudBridgeInventory;
export const CloudBridgeInventory: typeof import("./cloudBridgeInventory").CloudBridgeInventory = null as any;
utilities.lazyLoad(exports, ["CloudBridgeInventory"], () => require("./cloudBridgeInventory"));

export { CloudGuardAdhocQueryArgs, CloudGuardAdhocQueryState } from "./cloudGuardAdhocQuery";
export type CloudGuardAdhocQuery = import("./cloudGuardAdhocQuery").CloudGuardAdhocQuery;
export const CloudGuardAdhocQuery: typeof import("./cloudGuardAdhocQuery").CloudGuardAdhocQuery = null as any;
utilities.lazyLoad(exports, ["CloudGuardAdhocQuery"], () => require("./cloudGuardAdhocQuery"));

export { CloudGuardCloudGuardConfigurationArgs, CloudGuardCloudGuardConfigurationState } from "./cloudGuardCloudGuardConfiguration";
export type CloudGuardCloudGuardConfiguration = import("./cloudGuardCloudGuardConfiguration").CloudGuardCloudGuardConfiguration;
export const CloudGuardCloudGuardConfiguration: typeof import("./cloudGuardCloudGuardConfiguration").CloudGuardCloudGuardConfiguration = null as any;
utilities.lazyLoad(exports, ["CloudGuardCloudGuardConfiguration"], () => require("./cloudGuardCloudGuardConfiguration"));

export { CloudGuardDataMaskRuleArgs, CloudGuardDataMaskRuleState } from "./cloudGuardDataMaskRule";
export type CloudGuardDataMaskRule = import("./cloudGuardDataMaskRule").CloudGuardDataMaskRule;
export const CloudGuardDataMaskRule: typeof import("./cloudGuardDataMaskRule").CloudGuardDataMaskRule = null as any;
utilities.lazyLoad(exports, ["CloudGuardDataMaskRule"], () => require("./cloudGuardDataMaskRule"));

export { CloudGuardDataSourceArgs, CloudGuardDataSourceState } from "./cloudGuardDataSource";
export type CloudGuardDataSource = import("./cloudGuardDataSource").CloudGuardDataSource;
export const CloudGuardDataSource: typeof import("./cloudGuardDataSource").CloudGuardDataSource = null as any;
utilities.lazyLoad(exports, ["CloudGuardDataSource"], () => require("./cloudGuardDataSource"));

export { CloudGuardDetectorRecipeArgs, CloudGuardDetectorRecipeState } from "./cloudGuardDetectorRecipe";
export type CloudGuardDetectorRecipe = import("./cloudGuardDetectorRecipe").CloudGuardDetectorRecipe;
export const CloudGuardDetectorRecipe: typeof import("./cloudGuardDetectorRecipe").CloudGuardDetectorRecipe = null as any;
utilities.lazyLoad(exports, ["CloudGuardDetectorRecipe"], () => require("./cloudGuardDetectorRecipe"));

export { CloudGuardManagedListArgs, CloudGuardManagedListState } from "./cloudGuardManagedList";
export type CloudGuardManagedList = import("./cloudGuardManagedList").CloudGuardManagedList;
export const CloudGuardManagedList: typeof import("./cloudGuardManagedList").CloudGuardManagedList = null as any;
utilities.lazyLoad(exports, ["CloudGuardManagedList"], () => require("./cloudGuardManagedList"));

export { CloudGuardResponderRecipeArgs, CloudGuardResponderRecipeState } from "./cloudGuardResponderRecipe";
export type CloudGuardResponderRecipe = import("./cloudGuardResponderRecipe").CloudGuardResponderRecipe;
export const CloudGuardResponderRecipe: typeof import("./cloudGuardResponderRecipe").CloudGuardResponderRecipe = null as any;
utilities.lazyLoad(exports, ["CloudGuardResponderRecipe"], () => require("./cloudGuardResponderRecipe"));

export { CloudGuardSavedQueryArgs, CloudGuardSavedQueryState } from "./cloudGuardSavedQuery";
export type CloudGuardSavedQuery = import("./cloudGuardSavedQuery").CloudGuardSavedQuery;
export const CloudGuardSavedQuery: typeof import("./cloudGuardSavedQuery").CloudGuardSavedQuery = null as any;
utilities.lazyLoad(exports, ["CloudGuardSavedQuery"], () => require("./cloudGuardSavedQuery"));

export { CloudGuardSecurityRecipeArgs, CloudGuardSecurityRecipeState } from "./cloudGuardSecurityRecipe";
export type CloudGuardSecurityRecipe = import("./cloudGuardSecurityRecipe").CloudGuardSecurityRecipe;
export const CloudGuardSecurityRecipe: typeof import("./cloudGuardSecurityRecipe").CloudGuardSecurityRecipe = null as any;
utilities.lazyLoad(exports, ["CloudGuardSecurityRecipe"], () => require("./cloudGuardSecurityRecipe"));

export { CloudGuardSecurityZoneArgs, CloudGuardSecurityZoneState } from "./cloudGuardSecurityZone";
export type CloudGuardSecurityZone = import("./cloudGuardSecurityZone").CloudGuardSecurityZone;
export const CloudGuardSecurityZone: typeof import("./cloudGuardSecurityZone").CloudGuardSecurityZone = null as any;
utilities.lazyLoad(exports, ["CloudGuardSecurityZone"], () => require("./cloudGuardSecurityZone"));

export { CloudGuardTargetArgs, CloudGuardTargetState } from "./cloudGuardTarget";
export type CloudGuardTarget = import("./cloudGuardTarget").CloudGuardTarget;
export const CloudGuardTarget: typeof import("./cloudGuardTarget").CloudGuardTarget = null as any;
utilities.lazyLoad(exports, ["CloudGuardTarget"], () => require("./cloudGuardTarget"));

export { CloudGuardWlpAgentArgs, CloudGuardWlpAgentState } from "./cloudGuardWlpAgent";
export type CloudGuardWlpAgent = import("./cloudGuardWlpAgent").CloudGuardWlpAgent;
export const CloudGuardWlpAgent: typeof import("./cloudGuardWlpAgent").CloudGuardWlpAgent = null as any;
utilities.lazyLoad(exports, ["CloudGuardWlpAgent"], () => require("./cloudGuardWlpAgent"));

export { CloudMigrationsMigrationArgs, CloudMigrationsMigrationState } from "./cloudMigrationsMigration";
export type CloudMigrationsMigration = import("./cloudMigrationsMigration").CloudMigrationsMigration;
export const CloudMigrationsMigration: typeof import("./cloudMigrationsMigration").CloudMigrationsMigration = null as any;
utilities.lazyLoad(exports, ["CloudMigrationsMigration"], () => require("./cloudMigrationsMigration"));

export { CloudMigrationsMigrationAssetArgs, CloudMigrationsMigrationAssetState } from "./cloudMigrationsMigrationAsset";
export type CloudMigrationsMigrationAsset = import("./cloudMigrationsMigrationAsset").CloudMigrationsMigrationAsset;
export const CloudMigrationsMigrationAsset: typeof import("./cloudMigrationsMigrationAsset").CloudMigrationsMigrationAsset = null as any;
utilities.lazyLoad(exports, ["CloudMigrationsMigrationAsset"], () => require("./cloudMigrationsMigrationAsset"));

export { CloudMigrationsMigrationPlanArgs, CloudMigrationsMigrationPlanState } from "./cloudMigrationsMigrationPlan";
export type CloudMigrationsMigrationPlan = import("./cloudMigrationsMigrationPlan").CloudMigrationsMigrationPlan;
export const CloudMigrationsMigrationPlan: typeof import("./cloudMigrationsMigrationPlan").CloudMigrationsMigrationPlan = null as any;
utilities.lazyLoad(exports, ["CloudMigrationsMigrationPlan"], () => require("./cloudMigrationsMigrationPlan"));

export { CloudMigrationsReplicationScheduleArgs, CloudMigrationsReplicationScheduleState } from "./cloudMigrationsReplicationSchedule";
export type CloudMigrationsReplicationSchedule = import("./cloudMigrationsReplicationSchedule").CloudMigrationsReplicationSchedule;
export const CloudMigrationsReplicationSchedule: typeof import("./cloudMigrationsReplicationSchedule").CloudMigrationsReplicationSchedule = null as any;
utilities.lazyLoad(exports, ["CloudMigrationsReplicationSchedule"], () => require("./cloudMigrationsReplicationSchedule"));

export { CloudMigrationsTargetAssetArgs, CloudMigrationsTargetAssetState } from "./cloudMigrationsTargetAsset";
export type CloudMigrationsTargetAsset = import("./cloudMigrationsTargetAsset").CloudMigrationsTargetAsset;
export const CloudMigrationsTargetAsset: typeof import("./cloudMigrationsTargetAsset").CloudMigrationsTargetAsset = null as any;
utilities.lazyLoad(exports, ["CloudMigrationsTargetAsset"], () => require("./cloudMigrationsTargetAsset"));

export { ClusterPlacementGroupsClusterPlacementGroupArgs, ClusterPlacementGroupsClusterPlacementGroupState } from "./clusterPlacementGroupsClusterPlacementGroup";
export type ClusterPlacementGroupsClusterPlacementGroup = import("./clusterPlacementGroupsClusterPlacementGroup").ClusterPlacementGroupsClusterPlacementGroup;
export const ClusterPlacementGroupsClusterPlacementGroup: typeof import("./clusterPlacementGroupsClusterPlacementGroup").ClusterPlacementGroupsClusterPlacementGroup = null as any;
utilities.lazyLoad(exports, ["ClusterPlacementGroupsClusterPlacementGroup"], () => require("./clusterPlacementGroupsClusterPlacementGroup"));

export { ComputeCloudAtCustomerCccInfrastructureArgs, ComputeCloudAtCustomerCccInfrastructureState } from "./computeCloudAtCustomerCccInfrastructure";
export type ComputeCloudAtCustomerCccInfrastructure = import("./computeCloudAtCustomerCccInfrastructure").ComputeCloudAtCustomerCccInfrastructure;
export const ComputeCloudAtCustomerCccInfrastructure: typeof import("./computeCloudAtCustomerCccInfrastructure").ComputeCloudAtCustomerCccInfrastructure = null as any;
utilities.lazyLoad(exports, ["ComputeCloudAtCustomerCccInfrastructure"], () => require("./computeCloudAtCustomerCccInfrastructure"));

export { ComputeCloudAtCustomerCccUpgradeScheduleArgs, ComputeCloudAtCustomerCccUpgradeScheduleState } from "./computeCloudAtCustomerCccUpgradeSchedule";
export type ComputeCloudAtCustomerCccUpgradeSchedule = import("./computeCloudAtCustomerCccUpgradeSchedule").ComputeCloudAtCustomerCccUpgradeSchedule;
export const ComputeCloudAtCustomerCccUpgradeSchedule: typeof import("./computeCloudAtCustomerCccUpgradeSchedule").ComputeCloudAtCustomerCccUpgradeSchedule = null as any;
utilities.lazyLoad(exports, ["ComputeCloudAtCustomerCccUpgradeSchedule"], () => require("./computeCloudAtCustomerCccUpgradeSchedule"));

export { ContainerInstancesContainerInstanceArgs, ContainerInstancesContainerInstanceState } from "./containerInstancesContainerInstance";
export type ContainerInstancesContainerInstance = import("./containerInstancesContainerInstance").ContainerInstancesContainerInstance;
export const ContainerInstancesContainerInstance: typeof import("./containerInstancesContainerInstance").ContainerInstancesContainerInstance = null as any;
utilities.lazyLoad(exports, ["ContainerInstancesContainerInstance"], () => require("./containerInstancesContainerInstance"));

export { ContainerengineAddonArgs, ContainerengineAddonState } from "./containerengineAddon";
export type ContainerengineAddon = import("./containerengineAddon").ContainerengineAddon;
export const ContainerengineAddon: typeof import("./containerengineAddon").ContainerengineAddon = null as any;
utilities.lazyLoad(exports, ["ContainerengineAddon"], () => require("./containerengineAddon"));

export { ContainerengineClusterArgs, ContainerengineClusterState } from "./containerengineCluster";
export type ContainerengineCluster = import("./containerengineCluster").ContainerengineCluster;
export const ContainerengineCluster: typeof import("./containerengineCluster").ContainerengineCluster = null as any;
utilities.lazyLoad(exports, ["ContainerengineCluster"], () => require("./containerengineCluster"));

export { ContainerengineClusterCompleteCredentialRotationManagementArgs, ContainerengineClusterCompleteCredentialRotationManagementState } from "./containerengineClusterCompleteCredentialRotationManagement";
export type ContainerengineClusterCompleteCredentialRotationManagement = import("./containerengineClusterCompleteCredentialRotationManagement").ContainerengineClusterCompleteCredentialRotationManagement;
export const ContainerengineClusterCompleteCredentialRotationManagement: typeof import("./containerengineClusterCompleteCredentialRotationManagement").ContainerengineClusterCompleteCredentialRotationManagement = null as any;
utilities.lazyLoad(exports, ["ContainerengineClusterCompleteCredentialRotationManagement"], () => require("./containerengineClusterCompleteCredentialRotationManagement"));

export { ContainerengineClusterStartCredentialRotationManagementArgs, ContainerengineClusterStartCredentialRotationManagementState } from "./containerengineClusterStartCredentialRotationManagement";
export type ContainerengineClusterStartCredentialRotationManagement = import("./containerengineClusterStartCredentialRotationManagement").ContainerengineClusterStartCredentialRotationManagement;
export const ContainerengineClusterStartCredentialRotationManagement: typeof import("./containerengineClusterStartCredentialRotationManagement").ContainerengineClusterStartCredentialRotationManagement = null as any;
utilities.lazyLoad(exports, ["ContainerengineClusterStartCredentialRotationManagement"], () => require("./containerengineClusterStartCredentialRotationManagement"));

export { ContainerengineClusterWorkloadMappingArgs, ContainerengineClusterWorkloadMappingState } from "./containerengineClusterWorkloadMapping";
export type ContainerengineClusterWorkloadMapping = import("./containerengineClusterWorkloadMapping").ContainerengineClusterWorkloadMapping;
export const ContainerengineClusterWorkloadMapping: typeof import("./containerengineClusterWorkloadMapping").ContainerengineClusterWorkloadMapping = null as any;
utilities.lazyLoad(exports, ["ContainerengineClusterWorkloadMapping"], () => require("./containerengineClusterWorkloadMapping"));

export { ContainerengineNodePoolArgs, ContainerengineNodePoolState } from "./containerengineNodePool";
export type ContainerengineNodePool = import("./containerengineNodePool").ContainerengineNodePool;
export const ContainerengineNodePool: typeof import("./containerengineNodePool").ContainerengineNodePool = null as any;
utilities.lazyLoad(exports, ["ContainerengineNodePool"], () => require("./containerengineNodePool"));

export { ContainerengineVirtualNodePoolArgs, ContainerengineVirtualNodePoolState } from "./containerengineVirtualNodePool";
export type ContainerengineVirtualNodePool = import("./containerengineVirtualNodePool").ContainerengineVirtualNodePool;
export const ContainerengineVirtualNodePool: typeof import("./containerengineVirtualNodePool").ContainerengineVirtualNodePool = null as any;
utilities.lazyLoad(exports, ["ContainerengineVirtualNodePool"], () => require("./containerengineVirtualNodePool"));

export { CoreAppCatalogListingResourceVersionAgreementArgs, CoreAppCatalogListingResourceVersionAgreementState } from "./coreAppCatalogListingResourceVersionAgreement";
export type CoreAppCatalogListingResourceVersionAgreement = import("./coreAppCatalogListingResourceVersionAgreement").CoreAppCatalogListingResourceVersionAgreement;
export const CoreAppCatalogListingResourceVersionAgreement: typeof import("./coreAppCatalogListingResourceVersionAgreement").CoreAppCatalogListingResourceVersionAgreement = null as any;
utilities.lazyLoad(exports, ["CoreAppCatalogListingResourceVersionAgreement"], () => require("./coreAppCatalogListingResourceVersionAgreement"));

export { CoreAppCatalogSubscriptionArgs, CoreAppCatalogSubscriptionState } from "./coreAppCatalogSubscription";
export type CoreAppCatalogSubscription = import("./coreAppCatalogSubscription").CoreAppCatalogSubscription;
export const CoreAppCatalogSubscription: typeof import("./coreAppCatalogSubscription").CoreAppCatalogSubscription = null as any;
utilities.lazyLoad(exports, ["CoreAppCatalogSubscription"], () => require("./coreAppCatalogSubscription"));

export { CoreBootVolumeArgs, CoreBootVolumeState } from "./coreBootVolume";
export type CoreBootVolume = import("./coreBootVolume").CoreBootVolume;
export const CoreBootVolume: typeof import("./coreBootVolume").CoreBootVolume = null as any;
utilities.lazyLoad(exports, ["CoreBootVolume"], () => require("./coreBootVolume"));

export { CoreBootVolumeBackupArgs, CoreBootVolumeBackupState } from "./coreBootVolumeBackup";
export type CoreBootVolumeBackup = import("./coreBootVolumeBackup").CoreBootVolumeBackup;
export const CoreBootVolumeBackup: typeof import("./coreBootVolumeBackup").CoreBootVolumeBackup = null as any;
utilities.lazyLoad(exports, ["CoreBootVolumeBackup"], () => require("./coreBootVolumeBackup"));

export { CoreCaptureFilterArgs, CoreCaptureFilterState } from "./coreCaptureFilter";
export type CoreCaptureFilter = import("./coreCaptureFilter").CoreCaptureFilter;
export const CoreCaptureFilter: typeof import("./coreCaptureFilter").CoreCaptureFilter = null as any;
utilities.lazyLoad(exports, ["CoreCaptureFilter"], () => require("./coreCaptureFilter"));

export { CoreClusterNetworkArgs, CoreClusterNetworkState } from "./coreClusterNetwork";
export type CoreClusterNetwork = import("./coreClusterNetwork").CoreClusterNetwork;
export const CoreClusterNetwork: typeof import("./coreClusterNetwork").CoreClusterNetwork = null as any;
utilities.lazyLoad(exports, ["CoreClusterNetwork"], () => require("./coreClusterNetwork"));

export { CoreComputeCapacityReportArgs, CoreComputeCapacityReportState } from "./coreComputeCapacityReport";
export type CoreComputeCapacityReport = import("./coreComputeCapacityReport").CoreComputeCapacityReport;
export const CoreComputeCapacityReport: typeof import("./coreComputeCapacityReport").CoreComputeCapacityReport = null as any;
utilities.lazyLoad(exports, ["CoreComputeCapacityReport"], () => require("./coreComputeCapacityReport"));

export { CoreComputeCapacityReservationArgs, CoreComputeCapacityReservationState } from "./coreComputeCapacityReservation";
export type CoreComputeCapacityReservation = import("./coreComputeCapacityReservation").CoreComputeCapacityReservation;
export const CoreComputeCapacityReservation: typeof import("./coreComputeCapacityReservation").CoreComputeCapacityReservation = null as any;
utilities.lazyLoad(exports, ["CoreComputeCapacityReservation"], () => require("./coreComputeCapacityReservation"));

export { CoreComputeCapacityTopologyArgs, CoreComputeCapacityTopologyState } from "./coreComputeCapacityTopology";
export type CoreComputeCapacityTopology = import("./coreComputeCapacityTopology").CoreComputeCapacityTopology;
export const CoreComputeCapacityTopology: typeof import("./coreComputeCapacityTopology").CoreComputeCapacityTopology = null as any;
utilities.lazyLoad(exports, ["CoreComputeCapacityTopology"], () => require("./coreComputeCapacityTopology"));

export { CoreComputeClusterArgs, CoreComputeClusterState } from "./coreComputeCluster";
export type CoreComputeCluster = import("./coreComputeCluster").CoreComputeCluster;
export const CoreComputeCluster: typeof import("./coreComputeCluster").CoreComputeCluster = null as any;
utilities.lazyLoad(exports, ["CoreComputeCluster"], () => require("./coreComputeCluster"));

export { CoreComputeImageCapabilitySchemaArgs, CoreComputeImageCapabilitySchemaState } from "./coreComputeImageCapabilitySchema";
export type CoreComputeImageCapabilitySchema = import("./coreComputeImageCapabilitySchema").CoreComputeImageCapabilitySchema;
export const CoreComputeImageCapabilitySchema: typeof import("./coreComputeImageCapabilitySchema").CoreComputeImageCapabilitySchema = null as any;
utilities.lazyLoad(exports, ["CoreComputeImageCapabilitySchema"], () => require("./coreComputeImageCapabilitySchema"));

export { CoreConsoleHistoryArgs, CoreConsoleHistoryState } from "./coreConsoleHistory";
export type CoreConsoleHistory = import("./coreConsoleHistory").CoreConsoleHistory;
export const CoreConsoleHistory: typeof import("./coreConsoleHistory").CoreConsoleHistory = null as any;
utilities.lazyLoad(exports, ["CoreConsoleHistory"], () => require("./coreConsoleHistory"));

export { CoreCpeArgs, CoreCpeState } from "./coreCpe";
export type CoreCpe = import("./coreCpe").CoreCpe;
export const CoreCpe: typeof import("./coreCpe").CoreCpe = null as any;
utilities.lazyLoad(exports, ["CoreCpe"], () => require("./coreCpe"));

export { CoreCrossConnectArgs, CoreCrossConnectState } from "./coreCrossConnect";
export type CoreCrossConnect = import("./coreCrossConnect").CoreCrossConnect;
export const CoreCrossConnect: typeof import("./coreCrossConnect").CoreCrossConnect = null as any;
utilities.lazyLoad(exports, ["CoreCrossConnect"], () => require("./coreCrossConnect"));

export { CoreCrossConnectGroupArgs, CoreCrossConnectGroupState } from "./coreCrossConnectGroup";
export type CoreCrossConnectGroup = import("./coreCrossConnectGroup").CoreCrossConnectGroup;
export const CoreCrossConnectGroup: typeof import("./coreCrossConnectGroup").CoreCrossConnectGroup = null as any;
utilities.lazyLoad(exports, ["CoreCrossConnectGroup"], () => require("./coreCrossConnectGroup"));

export { CoreDedicatedVmHostArgs, CoreDedicatedVmHostState } from "./coreDedicatedVmHost";
export type CoreDedicatedVmHost = import("./coreDedicatedVmHost").CoreDedicatedVmHost;
export const CoreDedicatedVmHost: typeof import("./coreDedicatedVmHost").CoreDedicatedVmHost = null as any;
utilities.lazyLoad(exports, ["CoreDedicatedVmHost"], () => require("./coreDedicatedVmHost"));

export { CoreDefaultDhcpOptionsArgs, CoreDefaultDhcpOptionsState } from "./coreDefaultDhcpOptions";
export type CoreDefaultDhcpOptions = import("./coreDefaultDhcpOptions").CoreDefaultDhcpOptions;
export const CoreDefaultDhcpOptions: typeof import("./coreDefaultDhcpOptions").CoreDefaultDhcpOptions = null as any;
utilities.lazyLoad(exports, ["CoreDefaultDhcpOptions"], () => require("./coreDefaultDhcpOptions"));

export { CoreDefaultRouteTableArgs, CoreDefaultRouteTableState } from "./coreDefaultRouteTable";
export type CoreDefaultRouteTable = import("./coreDefaultRouteTable").CoreDefaultRouteTable;
export const CoreDefaultRouteTable: typeof import("./coreDefaultRouteTable").CoreDefaultRouteTable = null as any;
utilities.lazyLoad(exports, ["CoreDefaultRouteTable"], () => require("./coreDefaultRouteTable"));

export { CoreDefaultSecurityListArgs, CoreDefaultSecurityListState } from "./coreDefaultSecurityList";
export type CoreDefaultSecurityList = import("./coreDefaultSecurityList").CoreDefaultSecurityList;
export const CoreDefaultSecurityList: typeof import("./coreDefaultSecurityList").CoreDefaultSecurityList = null as any;
utilities.lazyLoad(exports, ["CoreDefaultSecurityList"], () => require("./coreDefaultSecurityList"));

export { CoreDhcpOptionsArgs, CoreDhcpOptionsState } from "./coreDhcpOptions";
export type CoreDhcpOptions = import("./coreDhcpOptions").CoreDhcpOptions;
export const CoreDhcpOptions: typeof import("./coreDhcpOptions").CoreDhcpOptions = null as any;
utilities.lazyLoad(exports, ["CoreDhcpOptions"], () => require("./coreDhcpOptions"));

export { CoreDrgArgs, CoreDrgState } from "./coreDrg";
export type CoreDrg = import("./coreDrg").CoreDrg;
export const CoreDrg: typeof import("./coreDrg").CoreDrg = null as any;
utilities.lazyLoad(exports, ["CoreDrg"], () => require("./coreDrg"));

export { CoreDrgAttachmentArgs, CoreDrgAttachmentState } from "./coreDrgAttachment";
export type CoreDrgAttachment = import("./coreDrgAttachment").CoreDrgAttachment;
export const CoreDrgAttachment: typeof import("./coreDrgAttachment").CoreDrgAttachment = null as any;
utilities.lazyLoad(exports, ["CoreDrgAttachment"], () => require("./coreDrgAttachment"));

export { CoreDrgAttachmentManagementArgs, CoreDrgAttachmentManagementState } from "./coreDrgAttachmentManagement";
export type CoreDrgAttachmentManagement = import("./coreDrgAttachmentManagement").CoreDrgAttachmentManagement;
export const CoreDrgAttachmentManagement: typeof import("./coreDrgAttachmentManagement").CoreDrgAttachmentManagement = null as any;
utilities.lazyLoad(exports, ["CoreDrgAttachmentManagement"], () => require("./coreDrgAttachmentManagement"));

export { CoreDrgAttachmentsListArgs, CoreDrgAttachmentsListState } from "./coreDrgAttachmentsList";
export type CoreDrgAttachmentsList = import("./coreDrgAttachmentsList").CoreDrgAttachmentsList;
export const CoreDrgAttachmentsList: typeof import("./coreDrgAttachmentsList").CoreDrgAttachmentsList = null as any;
utilities.lazyLoad(exports, ["CoreDrgAttachmentsList"], () => require("./coreDrgAttachmentsList"));

export { CoreDrgRouteDistributionArgs, CoreDrgRouteDistributionState } from "./coreDrgRouteDistribution";
export type CoreDrgRouteDistribution = import("./coreDrgRouteDistribution").CoreDrgRouteDistribution;
export const CoreDrgRouteDistribution: typeof import("./coreDrgRouteDistribution").CoreDrgRouteDistribution = null as any;
utilities.lazyLoad(exports, ["CoreDrgRouteDistribution"], () => require("./coreDrgRouteDistribution"));

export { CoreDrgRouteDistributionStatementArgs, CoreDrgRouteDistributionStatementState } from "./coreDrgRouteDistributionStatement";
export type CoreDrgRouteDistributionStatement = import("./coreDrgRouteDistributionStatement").CoreDrgRouteDistributionStatement;
export const CoreDrgRouteDistributionStatement: typeof import("./coreDrgRouteDistributionStatement").CoreDrgRouteDistributionStatement = null as any;
utilities.lazyLoad(exports, ["CoreDrgRouteDistributionStatement"], () => require("./coreDrgRouteDistributionStatement"));

export { CoreDrgRouteTableArgs, CoreDrgRouteTableState } from "./coreDrgRouteTable";
export type CoreDrgRouteTable = import("./coreDrgRouteTable").CoreDrgRouteTable;
export const CoreDrgRouteTable: typeof import("./coreDrgRouteTable").CoreDrgRouteTable = null as any;
utilities.lazyLoad(exports, ["CoreDrgRouteTable"], () => require("./coreDrgRouteTable"));

export { CoreDrgRouteTableRouteRuleArgs, CoreDrgRouteTableRouteRuleState } from "./coreDrgRouteTableRouteRule";
export type CoreDrgRouteTableRouteRule = import("./coreDrgRouteTableRouteRule").CoreDrgRouteTableRouteRule;
export const CoreDrgRouteTableRouteRule: typeof import("./coreDrgRouteTableRouteRule").CoreDrgRouteTableRouteRule = null as any;
utilities.lazyLoad(exports, ["CoreDrgRouteTableRouteRule"], () => require("./coreDrgRouteTableRouteRule"));

export { CoreImageArgs, CoreImageState } from "./coreImage";
export type CoreImage = import("./coreImage").CoreImage;
export const CoreImage: typeof import("./coreImage").CoreImage = null as any;
utilities.lazyLoad(exports, ["CoreImage"], () => require("./coreImage"));

export { CoreInstanceArgs, CoreInstanceState } from "./coreInstance";
export type CoreInstance = import("./coreInstance").CoreInstance;
export const CoreInstance: typeof import("./coreInstance").CoreInstance = null as any;
utilities.lazyLoad(exports, ["CoreInstance"], () => require("./coreInstance"));

export { CoreInstanceConfigurationArgs, CoreInstanceConfigurationState } from "./coreInstanceConfiguration";
export type CoreInstanceConfiguration = import("./coreInstanceConfiguration").CoreInstanceConfiguration;
export const CoreInstanceConfiguration: typeof import("./coreInstanceConfiguration").CoreInstanceConfiguration = null as any;
utilities.lazyLoad(exports, ["CoreInstanceConfiguration"], () => require("./coreInstanceConfiguration"));

export { CoreInstanceConsoleConnectionArgs, CoreInstanceConsoleConnectionState } from "./coreInstanceConsoleConnection";
export type CoreInstanceConsoleConnection = import("./coreInstanceConsoleConnection").CoreInstanceConsoleConnection;
export const CoreInstanceConsoleConnection: typeof import("./coreInstanceConsoleConnection").CoreInstanceConsoleConnection = null as any;
utilities.lazyLoad(exports, ["CoreInstanceConsoleConnection"], () => require("./coreInstanceConsoleConnection"));

export { CoreInstanceMaintenanceEventArgs, CoreInstanceMaintenanceEventState } from "./coreInstanceMaintenanceEvent";
export type CoreInstanceMaintenanceEvent = import("./coreInstanceMaintenanceEvent").CoreInstanceMaintenanceEvent;
export const CoreInstanceMaintenanceEvent: typeof import("./coreInstanceMaintenanceEvent").CoreInstanceMaintenanceEvent = null as any;
utilities.lazyLoad(exports, ["CoreInstanceMaintenanceEvent"], () => require("./coreInstanceMaintenanceEvent"));

export { CoreInstancePoolArgs, CoreInstancePoolState } from "./coreInstancePool";
export type CoreInstancePool = import("./coreInstancePool").CoreInstancePool;
export const CoreInstancePool: typeof import("./coreInstancePool").CoreInstancePool = null as any;
utilities.lazyLoad(exports, ["CoreInstancePool"], () => require("./coreInstancePool"));

export { CoreInstancePoolInstanceArgs, CoreInstancePoolInstanceState } from "./coreInstancePoolInstance";
export type CoreInstancePoolInstance = import("./coreInstancePoolInstance").CoreInstancePoolInstance;
export const CoreInstancePoolInstance: typeof import("./coreInstancePoolInstance").CoreInstancePoolInstance = null as any;
utilities.lazyLoad(exports, ["CoreInstancePoolInstance"], () => require("./coreInstancePoolInstance"));

export { CoreInternetGatewayArgs, CoreInternetGatewayState } from "./coreInternetGateway";
export type CoreInternetGateway = import("./coreInternetGateway").CoreInternetGateway;
export const CoreInternetGateway: typeof import("./coreInternetGateway").CoreInternetGateway = null as any;
utilities.lazyLoad(exports, ["CoreInternetGateway"], () => require("./coreInternetGateway"));

export { CoreIpsecArgs, CoreIpsecState } from "./coreIpsec";
export type CoreIpsec = import("./coreIpsec").CoreIpsec;
export const CoreIpsec: typeof import("./coreIpsec").CoreIpsec = null as any;
utilities.lazyLoad(exports, ["CoreIpsec"], () => require("./coreIpsec"));

export { CoreIpsecConnectionTunnelManagementArgs, CoreIpsecConnectionTunnelManagementState } from "./coreIpsecConnectionTunnelManagement";
export type CoreIpsecConnectionTunnelManagement = import("./coreIpsecConnectionTunnelManagement").CoreIpsecConnectionTunnelManagement;
export const CoreIpsecConnectionTunnelManagement: typeof import("./coreIpsecConnectionTunnelManagement").CoreIpsecConnectionTunnelManagement = null as any;
utilities.lazyLoad(exports, ["CoreIpsecConnectionTunnelManagement"], () => require("./coreIpsecConnectionTunnelManagement"));

export { CoreIpv6Args, CoreIpv6State } from "./coreIpv6";
export type CoreIpv6 = import("./coreIpv6").CoreIpv6;
export const CoreIpv6: typeof import("./coreIpv6").CoreIpv6 = null as any;
utilities.lazyLoad(exports, ["CoreIpv6"], () => require("./coreIpv6"));

export { CoreListingResourceVersionAgreementArgs, CoreListingResourceVersionAgreementState } from "./coreListingResourceVersionAgreement";
export type CoreListingResourceVersionAgreement = import("./coreListingResourceVersionAgreement").CoreListingResourceVersionAgreement;
export const CoreListingResourceVersionAgreement: typeof import("./coreListingResourceVersionAgreement").CoreListingResourceVersionAgreement = null as any;
utilities.lazyLoad(exports, ["CoreListingResourceVersionAgreement"], () => require("./coreListingResourceVersionAgreement"));

export { CoreLocalPeeringGatewayArgs, CoreLocalPeeringGatewayState } from "./coreLocalPeeringGateway";
export type CoreLocalPeeringGateway = import("./coreLocalPeeringGateway").CoreLocalPeeringGateway;
export const CoreLocalPeeringGateway: typeof import("./coreLocalPeeringGateway").CoreLocalPeeringGateway = null as any;
utilities.lazyLoad(exports, ["CoreLocalPeeringGateway"], () => require("./coreLocalPeeringGateway"));

export { CoreNatGatewayArgs, CoreNatGatewayState } from "./coreNatGateway";
export type CoreNatGateway = import("./coreNatGateway").CoreNatGateway;
export const CoreNatGateway: typeof import("./coreNatGateway").CoreNatGateway = null as any;
utilities.lazyLoad(exports, ["CoreNatGateway"], () => require("./coreNatGateway"));

export { CoreNetworkSecurityGroupArgs, CoreNetworkSecurityGroupState } from "./coreNetworkSecurityGroup";
export type CoreNetworkSecurityGroup = import("./coreNetworkSecurityGroup").CoreNetworkSecurityGroup;
export const CoreNetworkSecurityGroup: typeof import("./coreNetworkSecurityGroup").CoreNetworkSecurityGroup = null as any;
utilities.lazyLoad(exports, ["CoreNetworkSecurityGroup"], () => require("./coreNetworkSecurityGroup"));

export { CoreNetworkSecurityGroupSecurityRuleArgs, CoreNetworkSecurityGroupSecurityRuleState } from "./coreNetworkSecurityGroupSecurityRule";
export type CoreNetworkSecurityGroupSecurityRule = import("./coreNetworkSecurityGroupSecurityRule").CoreNetworkSecurityGroupSecurityRule;
export const CoreNetworkSecurityGroupSecurityRule: typeof import("./coreNetworkSecurityGroupSecurityRule").CoreNetworkSecurityGroupSecurityRule = null as any;
utilities.lazyLoad(exports, ["CoreNetworkSecurityGroupSecurityRule"], () => require("./coreNetworkSecurityGroupSecurityRule"));

export { CorePrivateIpArgs, CorePrivateIpState } from "./corePrivateIp";
export type CorePrivateIp = import("./corePrivateIp").CorePrivateIp;
export const CorePrivateIp: typeof import("./corePrivateIp").CorePrivateIp = null as any;
utilities.lazyLoad(exports, ["CorePrivateIp"], () => require("./corePrivateIp"));

export { CorePublicIpArgs, CorePublicIpState } from "./corePublicIp";
export type CorePublicIp = import("./corePublicIp").CorePublicIp;
export const CorePublicIp: typeof import("./corePublicIp").CorePublicIp = null as any;
utilities.lazyLoad(exports, ["CorePublicIp"], () => require("./corePublicIp"));

export { CorePublicIpPoolArgs, CorePublicIpPoolState } from "./corePublicIpPool";
export type CorePublicIpPool = import("./corePublicIpPool").CorePublicIpPool;
export const CorePublicIpPool: typeof import("./corePublicIpPool").CorePublicIpPool = null as any;
utilities.lazyLoad(exports, ["CorePublicIpPool"], () => require("./corePublicIpPool"));

export { CorePublicIpPoolCapacityArgs, CorePublicIpPoolCapacityState } from "./corePublicIpPoolCapacity";
export type CorePublicIpPoolCapacity = import("./corePublicIpPoolCapacity").CorePublicIpPoolCapacity;
export const CorePublicIpPoolCapacity: typeof import("./corePublicIpPoolCapacity").CorePublicIpPoolCapacity = null as any;
utilities.lazyLoad(exports, ["CorePublicIpPoolCapacity"], () => require("./corePublicIpPoolCapacity"));

export { CoreRemotePeeringConnectionArgs, CoreRemotePeeringConnectionState } from "./coreRemotePeeringConnection";
export type CoreRemotePeeringConnection = import("./coreRemotePeeringConnection").CoreRemotePeeringConnection;
export const CoreRemotePeeringConnection: typeof import("./coreRemotePeeringConnection").CoreRemotePeeringConnection = null as any;
utilities.lazyLoad(exports, ["CoreRemotePeeringConnection"], () => require("./coreRemotePeeringConnection"));

export { CoreRouteTableArgs, CoreRouteTableState } from "./coreRouteTable";
export type CoreRouteTable = import("./coreRouteTable").CoreRouteTable;
export const CoreRouteTable: typeof import("./coreRouteTable").CoreRouteTable = null as any;
utilities.lazyLoad(exports, ["CoreRouteTable"], () => require("./coreRouteTable"));

export { CoreRouteTableAttachmentArgs, CoreRouteTableAttachmentState } from "./coreRouteTableAttachment";
export type CoreRouteTableAttachment = import("./coreRouteTableAttachment").CoreRouteTableAttachment;
export const CoreRouteTableAttachment: typeof import("./coreRouteTableAttachment").CoreRouteTableAttachment = null as any;
utilities.lazyLoad(exports, ["CoreRouteTableAttachment"], () => require("./coreRouteTableAttachment"));

export { CoreSecurityListArgs, CoreSecurityListState } from "./coreSecurityList";
export type CoreSecurityList = import("./coreSecurityList").CoreSecurityList;
export const CoreSecurityList: typeof import("./coreSecurityList").CoreSecurityList = null as any;
utilities.lazyLoad(exports, ["CoreSecurityList"], () => require("./coreSecurityList"));

export { CoreServiceGatewayArgs, CoreServiceGatewayState } from "./coreServiceGateway";
export type CoreServiceGateway = import("./coreServiceGateway").CoreServiceGateway;
export const CoreServiceGateway: typeof import("./coreServiceGateway").CoreServiceGateway = null as any;
utilities.lazyLoad(exports, ["CoreServiceGateway"], () => require("./coreServiceGateway"));

export { CoreShapeManagementArgs, CoreShapeManagementState } from "./coreShapeManagement";
export type CoreShapeManagement = import("./coreShapeManagement").CoreShapeManagement;
export const CoreShapeManagement: typeof import("./coreShapeManagement").CoreShapeManagement = null as any;
utilities.lazyLoad(exports, ["CoreShapeManagement"], () => require("./coreShapeManagement"));

export { CoreSubnetArgs, CoreSubnetState } from "./coreSubnet";
export type CoreSubnet = import("./coreSubnet").CoreSubnet;
export const CoreSubnet: typeof import("./coreSubnet").CoreSubnet = null as any;
utilities.lazyLoad(exports, ["CoreSubnet"], () => require("./coreSubnet"));

export { CoreVcnArgs, CoreVcnState } from "./coreVcn";
export type CoreVcn = import("./coreVcn").CoreVcn;
export const CoreVcn: typeof import("./coreVcn").CoreVcn = null as any;
utilities.lazyLoad(exports, ["CoreVcn"], () => require("./coreVcn"));

export { CoreVirtualCircuitArgs, CoreVirtualCircuitState } from "./coreVirtualCircuit";
export type CoreVirtualCircuit = import("./coreVirtualCircuit").CoreVirtualCircuit;
export const CoreVirtualCircuit: typeof import("./coreVirtualCircuit").CoreVirtualCircuit = null as any;
utilities.lazyLoad(exports, ["CoreVirtualCircuit"], () => require("./coreVirtualCircuit"));

export { CoreVirtualNetworkArgs, CoreVirtualNetworkState } from "./coreVirtualNetwork";
export type CoreVirtualNetwork = import("./coreVirtualNetwork").CoreVirtualNetwork;
export const CoreVirtualNetwork: typeof import("./coreVirtualNetwork").CoreVirtualNetwork = null as any;
utilities.lazyLoad(exports, ["CoreVirtualNetwork"], () => require("./coreVirtualNetwork"));

export { CoreVlanArgs, CoreVlanState } from "./coreVlan";
export type CoreVlan = import("./coreVlan").CoreVlan;
export const CoreVlan: typeof import("./coreVlan").CoreVlan = null as any;
utilities.lazyLoad(exports, ["CoreVlan"], () => require("./coreVlan"));

export { CoreVnicAttachmentArgs, CoreVnicAttachmentState } from "./coreVnicAttachment";
export type CoreVnicAttachment = import("./coreVnicAttachment").CoreVnicAttachment;
export const CoreVnicAttachment: typeof import("./coreVnicAttachment").CoreVnicAttachment = null as any;
utilities.lazyLoad(exports, ["CoreVnicAttachment"], () => require("./coreVnicAttachment"));

export { CoreVolumeArgs, CoreVolumeState } from "./coreVolume";
export type CoreVolume = import("./coreVolume").CoreVolume;
export const CoreVolume: typeof import("./coreVolume").CoreVolume = null as any;
utilities.lazyLoad(exports, ["CoreVolume"], () => require("./coreVolume"));

export { CoreVolumeAttachmentArgs, CoreVolumeAttachmentState } from "./coreVolumeAttachment";
export type CoreVolumeAttachment = import("./coreVolumeAttachment").CoreVolumeAttachment;
export const CoreVolumeAttachment: typeof import("./coreVolumeAttachment").CoreVolumeAttachment = null as any;
utilities.lazyLoad(exports, ["CoreVolumeAttachment"], () => require("./coreVolumeAttachment"));

export { CoreVolumeBackupArgs, CoreVolumeBackupState } from "./coreVolumeBackup";
export type CoreVolumeBackup = import("./coreVolumeBackup").CoreVolumeBackup;
export const CoreVolumeBackup: typeof import("./coreVolumeBackup").CoreVolumeBackup = null as any;
utilities.lazyLoad(exports, ["CoreVolumeBackup"], () => require("./coreVolumeBackup"));

export { CoreVolumeBackupPolicyArgs, CoreVolumeBackupPolicyState } from "./coreVolumeBackupPolicy";
export type CoreVolumeBackupPolicy = import("./coreVolumeBackupPolicy").CoreVolumeBackupPolicy;
export const CoreVolumeBackupPolicy: typeof import("./coreVolumeBackupPolicy").CoreVolumeBackupPolicy = null as any;
utilities.lazyLoad(exports, ["CoreVolumeBackupPolicy"], () => require("./coreVolumeBackupPolicy"));

export { CoreVolumeBackupPolicyAssignmentArgs, CoreVolumeBackupPolicyAssignmentState } from "./coreVolumeBackupPolicyAssignment";
export type CoreVolumeBackupPolicyAssignment = import("./coreVolumeBackupPolicyAssignment").CoreVolumeBackupPolicyAssignment;
export const CoreVolumeBackupPolicyAssignment: typeof import("./coreVolumeBackupPolicyAssignment").CoreVolumeBackupPolicyAssignment = null as any;
utilities.lazyLoad(exports, ["CoreVolumeBackupPolicyAssignment"], () => require("./coreVolumeBackupPolicyAssignment"));

export { CoreVolumeGroupArgs, CoreVolumeGroupState } from "./coreVolumeGroup";
export type CoreVolumeGroup = import("./coreVolumeGroup").CoreVolumeGroup;
export const CoreVolumeGroup: typeof import("./coreVolumeGroup").CoreVolumeGroup = null as any;
utilities.lazyLoad(exports, ["CoreVolumeGroup"], () => require("./coreVolumeGroup"));

export { CoreVolumeGroupBackupArgs, CoreVolumeGroupBackupState } from "./coreVolumeGroupBackup";
export type CoreVolumeGroupBackup = import("./coreVolumeGroupBackup").CoreVolumeGroupBackup;
export const CoreVolumeGroupBackup: typeof import("./coreVolumeGroupBackup").CoreVolumeGroupBackup = null as any;
utilities.lazyLoad(exports, ["CoreVolumeGroupBackup"], () => require("./coreVolumeGroupBackup"));

export { CoreVtapArgs, CoreVtapState } from "./coreVtap";
export type CoreVtap = import("./coreVtap").CoreVtap;
export const CoreVtap: typeof import("./coreVtap").CoreVtap = null as any;
utilities.lazyLoad(exports, ["CoreVtap"], () => require("./coreVtap"));

export { DataLabelingServiceDatasetArgs, DataLabelingServiceDatasetState } from "./dataLabelingServiceDataset";
export type DataLabelingServiceDataset = import("./dataLabelingServiceDataset").DataLabelingServiceDataset;
export const DataLabelingServiceDataset: typeof import("./dataLabelingServiceDataset").DataLabelingServiceDataset = null as any;
utilities.lazyLoad(exports, ["DataLabelingServiceDataset"], () => require("./dataLabelingServiceDataset"));

export { DataSafeAddSdmColumnsArgs, DataSafeAddSdmColumnsState } from "./dataSafeAddSdmColumns";
export type DataSafeAddSdmColumns = import("./dataSafeAddSdmColumns").DataSafeAddSdmColumns;
export const DataSafeAddSdmColumns: typeof import("./dataSafeAddSdmColumns").DataSafeAddSdmColumns = null as any;
utilities.lazyLoad(exports, ["DataSafeAddSdmColumns"], () => require("./dataSafeAddSdmColumns"));

export { DataSafeAlertArgs, DataSafeAlertState } from "./dataSafeAlert";
export type DataSafeAlert = import("./dataSafeAlert").DataSafeAlert;
export const DataSafeAlert: typeof import("./dataSafeAlert").DataSafeAlert = null as any;
utilities.lazyLoad(exports, ["DataSafeAlert"], () => require("./dataSafeAlert"));

export { DataSafeAlertPolicyArgs, DataSafeAlertPolicyState } from "./dataSafeAlertPolicy";
export type DataSafeAlertPolicy = import("./dataSafeAlertPolicy").DataSafeAlertPolicy;
export const DataSafeAlertPolicy: typeof import("./dataSafeAlertPolicy").DataSafeAlertPolicy = null as any;
utilities.lazyLoad(exports, ["DataSafeAlertPolicy"], () => require("./dataSafeAlertPolicy"));

export { DataSafeAlertPolicyRuleArgs, DataSafeAlertPolicyRuleState } from "./dataSafeAlertPolicyRule";
export type DataSafeAlertPolicyRule = import("./dataSafeAlertPolicyRule").DataSafeAlertPolicyRule;
export const DataSafeAlertPolicyRule: typeof import("./dataSafeAlertPolicyRule").DataSafeAlertPolicyRule = null as any;
utilities.lazyLoad(exports, ["DataSafeAlertPolicyRule"], () => require("./dataSafeAlertPolicyRule"));

export { DataSafeAuditArchiveRetrievalArgs, DataSafeAuditArchiveRetrievalState } from "./dataSafeAuditArchiveRetrieval";
export type DataSafeAuditArchiveRetrieval = import("./dataSafeAuditArchiveRetrieval").DataSafeAuditArchiveRetrieval;
export const DataSafeAuditArchiveRetrieval: typeof import("./dataSafeAuditArchiveRetrieval").DataSafeAuditArchiveRetrieval = null as any;
utilities.lazyLoad(exports, ["DataSafeAuditArchiveRetrieval"], () => require("./dataSafeAuditArchiveRetrieval"));

export { DataSafeAuditPolicyArgs, DataSafeAuditPolicyState } from "./dataSafeAuditPolicy";
export type DataSafeAuditPolicy = import("./dataSafeAuditPolicy").DataSafeAuditPolicy;
export const DataSafeAuditPolicy: typeof import("./dataSafeAuditPolicy").DataSafeAuditPolicy = null as any;
utilities.lazyLoad(exports, ["DataSafeAuditPolicy"], () => require("./dataSafeAuditPolicy"));

export { DataSafeAuditPolicyManagementArgs, DataSafeAuditPolicyManagementState } from "./dataSafeAuditPolicyManagement";
export type DataSafeAuditPolicyManagement = import("./dataSafeAuditPolicyManagement").DataSafeAuditPolicyManagement;
export const DataSafeAuditPolicyManagement: typeof import("./dataSafeAuditPolicyManagement").DataSafeAuditPolicyManagement = null as any;
utilities.lazyLoad(exports, ["DataSafeAuditPolicyManagement"], () => require("./dataSafeAuditPolicyManagement"));

export { DataSafeAuditProfileArgs, DataSafeAuditProfileState } from "./dataSafeAuditProfile";
export type DataSafeAuditProfile = import("./dataSafeAuditProfile").DataSafeAuditProfile;
export const DataSafeAuditProfile: typeof import("./dataSafeAuditProfile").DataSafeAuditProfile = null as any;
utilities.lazyLoad(exports, ["DataSafeAuditProfile"], () => require("./dataSafeAuditProfile"));

export { DataSafeAuditProfileManagementArgs, DataSafeAuditProfileManagementState } from "./dataSafeAuditProfileManagement";
export type DataSafeAuditProfileManagement = import("./dataSafeAuditProfileManagement").DataSafeAuditProfileManagement;
export const DataSafeAuditProfileManagement: typeof import("./dataSafeAuditProfileManagement").DataSafeAuditProfileManagement = null as any;
utilities.lazyLoad(exports, ["DataSafeAuditProfileManagement"], () => require("./dataSafeAuditProfileManagement"));

export { DataSafeAuditTrailArgs, DataSafeAuditTrailState } from "./dataSafeAuditTrail";
export type DataSafeAuditTrail = import("./dataSafeAuditTrail").DataSafeAuditTrail;
export const DataSafeAuditTrail: typeof import("./dataSafeAuditTrail").DataSafeAuditTrail = null as any;
utilities.lazyLoad(exports, ["DataSafeAuditTrail"], () => require("./dataSafeAuditTrail"));

export { DataSafeAuditTrailManagementArgs, DataSafeAuditTrailManagementState } from "./dataSafeAuditTrailManagement";
export type DataSafeAuditTrailManagement = import("./dataSafeAuditTrailManagement").DataSafeAuditTrailManagement;
export const DataSafeAuditTrailManagement: typeof import("./dataSafeAuditTrailManagement").DataSafeAuditTrailManagement = null as any;
utilities.lazyLoad(exports, ["DataSafeAuditTrailManagement"], () => require("./dataSafeAuditTrailManagement"));

export { DataSafeCalculateAuditVolumeAvailableArgs, DataSafeCalculateAuditVolumeAvailableState } from "./dataSafeCalculateAuditVolumeAvailable";
export type DataSafeCalculateAuditVolumeAvailable = import("./dataSafeCalculateAuditVolumeAvailable").DataSafeCalculateAuditVolumeAvailable;
export const DataSafeCalculateAuditVolumeAvailable: typeof import("./dataSafeCalculateAuditVolumeAvailable").DataSafeCalculateAuditVolumeAvailable = null as any;
utilities.lazyLoad(exports, ["DataSafeCalculateAuditVolumeAvailable"], () => require("./dataSafeCalculateAuditVolumeAvailable"));

export { DataSafeCalculateAuditVolumeCollectedArgs, DataSafeCalculateAuditVolumeCollectedState } from "./dataSafeCalculateAuditVolumeCollected";
export type DataSafeCalculateAuditVolumeCollected = import("./dataSafeCalculateAuditVolumeCollected").DataSafeCalculateAuditVolumeCollected;
export const DataSafeCalculateAuditVolumeCollected: typeof import("./dataSafeCalculateAuditVolumeCollected").DataSafeCalculateAuditVolumeCollected = null as any;
utilities.lazyLoad(exports, ["DataSafeCalculateAuditVolumeCollected"], () => require("./dataSafeCalculateAuditVolumeCollected"));

export { DataSafeCompareSecurityAssessmentArgs, DataSafeCompareSecurityAssessmentState } from "./dataSafeCompareSecurityAssessment";
export type DataSafeCompareSecurityAssessment = import("./dataSafeCompareSecurityAssessment").DataSafeCompareSecurityAssessment;
export const DataSafeCompareSecurityAssessment: typeof import("./dataSafeCompareSecurityAssessment").DataSafeCompareSecurityAssessment = null as any;
utilities.lazyLoad(exports, ["DataSafeCompareSecurityAssessment"], () => require("./dataSafeCompareSecurityAssessment"));

export { DataSafeCompareUserAssessmentArgs, DataSafeCompareUserAssessmentState } from "./dataSafeCompareUserAssessment";
export type DataSafeCompareUserAssessment = import("./dataSafeCompareUserAssessment").DataSafeCompareUserAssessment;
export const DataSafeCompareUserAssessment: typeof import("./dataSafeCompareUserAssessment").DataSafeCompareUserAssessment = null as any;
utilities.lazyLoad(exports, ["DataSafeCompareUserAssessment"], () => require("./dataSafeCompareUserAssessment"));

export { DataSafeDataSafeConfigurationArgs, DataSafeDataSafeConfigurationState } from "./dataSafeDataSafeConfiguration";
export type DataSafeDataSafeConfiguration = import("./dataSafeDataSafeConfiguration").DataSafeDataSafeConfiguration;
export const DataSafeDataSafeConfiguration: typeof import("./dataSafeDataSafeConfiguration").DataSafeDataSafeConfiguration = null as any;
utilities.lazyLoad(exports, ["DataSafeDataSafeConfiguration"], () => require("./dataSafeDataSafeConfiguration"));

export { DataSafeDataSafePrivateEndpointArgs, DataSafeDataSafePrivateEndpointState } from "./dataSafeDataSafePrivateEndpoint";
export type DataSafeDataSafePrivateEndpoint = import("./dataSafeDataSafePrivateEndpoint").DataSafeDataSafePrivateEndpoint;
export const DataSafeDataSafePrivateEndpoint: typeof import("./dataSafeDataSafePrivateEndpoint").DataSafeDataSafePrivateEndpoint = null as any;
utilities.lazyLoad(exports, ["DataSafeDataSafePrivateEndpoint"], () => require("./dataSafeDataSafePrivateEndpoint"));

export { DataSafeDatabaseSecurityConfigArgs, DataSafeDatabaseSecurityConfigState } from "./dataSafeDatabaseSecurityConfig";
export type DataSafeDatabaseSecurityConfig = import("./dataSafeDatabaseSecurityConfig").DataSafeDatabaseSecurityConfig;
export const DataSafeDatabaseSecurityConfig: typeof import("./dataSafeDatabaseSecurityConfig").DataSafeDatabaseSecurityConfig = null as any;
utilities.lazyLoad(exports, ["DataSafeDatabaseSecurityConfig"], () => require("./dataSafeDatabaseSecurityConfig"));

export { DataSafeDatabaseSecurityConfigManagementArgs, DataSafeDatabaseSecurityConfigManagementState } from "./dataSafeDatabaseSecurityConfigManagement";
export type DataSafeDatabaseSecurityConfigManagement = import("./dataSafeDatabaseSecurityConfigManagement").DataSafeDatabaseSecurityConfigManagement;
export const DataSafeDatabaseSecurityConfigManagement: typeof import("./dataSafeDatabaseSecurityConfigManagement").DataSafeDatabaseSecurityConfigManagement = null as any;
utilities.lazyLoad(exports, ["DataSafeDatabaseSecurityConfigManagement"], () => require("./dataSafeDatabaseSecurityConfigManagement"));

export { DataSafeDiscoveryJobArgs, DataSafeDiscoveryJobState } from "./dataSafeDiscoveryJob";
export type DataSafeDiscoveryJob = import("./dataSafeDiscoveryJob").DataSafeDiscoveryJob;
export const DataSafeDiscoveryJob: typeof import("./dataSafeDiscoveryJob").DataSafeDiscoveryJob = null as any;
utilities.lazyLoad(exports, ["DataSafeDiscoveryJob"], () => require("./dataSafeDiscoveryJob"));

export { DataSafeDiscoveryJobsResultArgs, DataSafeDiscoveryJobsResultState } from "./dataSafeDiscoveryJobsResult";
export type DataSafeDiscoveryJobsResult = import("./dataSafeDiscoveryJobsResult").DataSafeDiscoveryJobsResult;
export const DataSafeDiscoveryJobsResult: typeof import("./dataSafeDiscoveryJobsResult").DataSafeDiscoveryJobsResult = null as any;
utilities.lazyLoad(exports, ["DataSafeDiscoveryJobsResult"], () => require("./dataSafeDiscoveryJobsResult"));

export { DataSafeLibraryMaskingFormatArgs, DataSafeLibraryMaskingFormatState } from "./dataSafeLibraryMaskingFormat";
export type DataSafeLibraryMaskingFormat = import("./dataSafeLibraryMaskingFormat").DataSafeLibraryMaskingFormat;
export const DataSafeLibraryMaskingFormat: typeof import("./dataSafeLibraryMaskingFormat").DataSafeLibraryMaskingFormat = null as any;
utilities.lazyLoad(exports, ["DataSafeLibraryMaskingFormat"], () => require("./dataSafeLibraryMaskingFormat"));

export { DataSafeMaskDataArgs, DataSafeMaskDataState } from "./dataSafeMaskData";
export type DataSafeMaskData = import("./dataSafeMaskData").DataSafeMaskData;
export const DataSafeMaskData: typeof import("./dataSafeMaskData").DataSafeMaskData = null as any;
utilities.lazyLoad(exports, ["DataSafeMaskData"], () => require("./dataSafeMaskData"));

export { DataSafeMaskingPoliciesApplyDifferenceToMaskingColumnsArgs, DataSafeMaskingPoliciesApplyDifferenceToMaskingColumnsState } from "./dataSafeMaskingPoliciesApplyDifferenceToMaskingColumns";
export type DataSafeMaskingPoliciesApplyDifferenceToMaskingColumns = import("./dataSafeMaskingPoliciesApplyDifferenceToMaskingColumns").DataSafeMaskingPoliciesApplyDifferenceToMaskingColumns;
export const DataSafeMaskingPoliciesApplyDifferenceToMaskingColumns: typeof import("./dataSafeMaskingPoliciesApplyDifferenceToMaskingColumns").DataSafeMaskingPoliciesApplyDifferenceToMaskingColumns = null as any;
utilities.lazyLoad(exports, ["DataSafeMaskingPoliciesApplyDifferenceToMaskingColumns"], () => require("./dataSafeMaskingPoliciesApplyDifferenceToMaskingColumns"));

export { DataSafeMaskingPoliciesMaskingColumnArgs, DataSafeMaskingPoliciesMaskingColumnState } from "./dataSafeMaskingPoliciesMaskingColumn";
export type DataSafeMaskingPoliciesMaskingColumn = import("./dataSafeMaskingPoliciesMaskingColumn").DataSafeMaskingPoliciesMaskingColumn;
export const DataSafeMaskingPoliciesMaskingColumn: typeof import("./dataSafeMaskingPoliciesMaskingColumn").DataSafeMaskingPoliciesMaskingColumn = null as any;
utilities.lazyLoad(exports, ["DataSafeMaskingPoliciesMaskingColumn"], () => require("./dataSafeMaskingPoliciesMaskingColumn"));

export { DataSafeMaskingPolicyArgs, DataSafeMaskingPolicyState } from "./dataSafeMaskingPolicy";
export type DataSafeMaskingPolicy = import("./dataSafeMaskingPolicy").DataSafeMaskingPolicy;
export const DataSafeMaskingPolicy: typeof import("./dataSafeMaskingPolicy").DataSafeMaskingPolicy = null as any;
utilities.lazyLoad(exports, ["DataSafeMaskingPolicy"], () => require("./dataSafeMaskingPolicy"));

export { DataSafeMaskingPolicyHealthReportManagementArgs, DataSafeMaskingPolicyHealthReportManagementState } from "./dataSafeMaskingPolicyHealthReportManagement";
export type DataSafeMaskingPolicyHealthReportManagement = import("./dataSafeMaskingPolicyHealthReportManagement").DataSafeMaskingPolicyHealthReportManagement;
export const DataSafeMaskingPolicyHealthReportManagement: typeof import("./dataSafeMaskingPolicyHealthReportManagement").DataSafeMaskingPolicyHealthReportManagement = null as any;
utilities.lazyLoad(exports, ["DataSafeMaskingPolicyHealthReportManagement"], () => require("./dataSafeMaskingPolicyHealthReportManagement"));

export { DataSafeMaskingReportManagementArgs, DataSafeMaskingReportManagementState } from "./dataSafeMaskingReportManagement";
export type DataSafeMaskingReportManagement = import("./dataSafeMaskingReportManagement").DataSafeMaskingReportManagement;
export const DataSafeMaskingReportManagement: typeof import("./dataSafeMaskingReportManagement").DataSafeMaskingReportManagement = null as any;
utilities.lazyLoad(exports, ["DataSafeMaskingReportManagement"], () => require("./dataSafeMaskingReportManagement"));

export { DataSafeOnPremConnectorArgs, DataSafeOnPremConnectorState } from "./dataSafeOnPremConnector";
export type DataSafeOnPremConnector = import("./dataSafeOnPremConnector").DataSafeOnPremConnector;
export const DataSafeOnPremConnector: typeof import("./dataSafeOnPremConnector").DataSafeOnPremConnector = null as any;
utilities.lazyLoad(exports, ["DataSafeOnPremConnector"], () => require("./dataSafeOnPremConnector"));

export { DataSafeReportArgs, DataSafeReportState } from "./dataSafeReport";
export type DataSafeReport = import("./dataSafeReport").DataSafeReport;
export const DataSafeReport: typeof import("./dataSafeReport").DataSafeReport = null as any;
utilities.lazyLoad(exports, ["DataSafeReport"], () => require("./dataSafeReport"));

export { DataSafeReportDefinitionArgs, DataSafeReportDefinitionState } from "./dataSafeReportDefinition";
export type DataSafeReportDefinition = import("./dataSafeReportDefinition").DataSafeReportDefinition;
export const DataSafeReportDefinition: typeof import("./dataSafeReportDefinition").DataSafeReportDefinition = null as any;
utilities.lazyLoad(exports, ["DataSafeReportDefinition"], () => require("./dataSafeReportDefinition"));

export { DataSafeSdmMaskingPolicyDifferenceArgs, DataSafeSdmMaskingPolicyDifferenceState } from "./dataSafeSdmMaskingPolicyDifference";
export type DataSafeSdmMaskingPolicyDifference = import("./dataSafeSdmMaskingPolicyDifference").DataSafeSdmMaskingPolicyDifference;
export const DataSafeSdmMaskingPolicyDifference: typeof import("./dataSafeSdmMaskingPolicyDifference").DataSafeSdmMaskingPolicyDifference = null as any;
utilities.lazyLoad(exports, ["DataSafeSdmMaskingPolicyDifference"], () => require("./dataSafeSdmMaskingPolicyDifference"));

export { DataSafeSecurityAssessmentArgs, DataSafeSecurityAssessmentState } from "./dataSafeSecurityAssessment";
export type DataSafeSecurityAssessment = import("./dataSafeSecurityAssessment").DataSafeSecurityAssessment;
export const DataSafeSecurityAssessment: typeof import("./dataSafeSecurityAssessment").DataSafeSecurityAssessment = null as any;
utilities.lazyLoad(exports, ["DataSafeSecurityAssessment"], () => require("./dataSafeSecurityAssessment"));

export { DataSafeSecurityPolicyArgs, DataSafeSecurityPolicyState } from "./dataSafeSecurityPolicy";
export type DataSafeSecurityPolicy = import("./dataSafeSecurityPolicy").DataSafeSecurityPolicy;
export const DataSafeSecurityPolicy: typeof import("./dataSafeSecurityPolicy").DataSafeSecurityPolicy = null as any;
utilities.lazyLoad(exports, ["DataSafeSecurityPolicy"], () => require("./dataSafeSecurityPolicy"));

export { DataSafeSecurityPolicyDeploymentArgs, DataSafeSecurityPolicyDeploymentState } from "./dataSafeSecurityPolicyDeployment";
export type DataSafeSecurityPolicyDeployment = import("./dataSafeSecurityPolicyDeployment").DataSafeSecurityPolicyDeployment;
export const DataSafeSecurityPolicyDeployment: typeof import("./dataSafeSecurityPolicyDeployment").DataSafeSecurityPolicyDeployment = null as any;
utilities.lazyLoad(exports, ["DataSafeSecurityPolicyDeployment"], () => require("./dataSafeSecurityPolicyDeployment"));

export { DataSafeSecurityPolicyDeploymentManagementArgs, DataSafeSecurityPolicyDeploymentManagementState } from "./dataSafeSecurityPolicyDeploymentManagement";
export type DataSafeSecurityPolicyDeploymentManagement = import("./dataSafeSecurityPolicyDeploymentManagement").DataSafeSecurityPolicyDeploymentManagement;
export const DataSafeSecurityPolicyDeploymentManagement: typeof import("./dataSafeSecurityPolicyDeploymentManagement").DataSafeSecurityPolicyDeploymentManagement = null as any;
utilities.lazyLoad(exports, ["DataSafeSecurityPolicyDeploymentManagement"], () => require("./dataSafeSecurityPolicyDeploymentManagement"));

export { DataSafeSecurityPolicyManagementArgs, DataSafeSecurityPolicyManagementState } from "./dataSafeSecurityPolicyManagement";
export type DataSafeSecurityPolicyManagement = import("./dataSafeSecurityPolicyManagement").DataSafeSecurityPolicyManagement;
export const DataSafeSecurityPolicyManagement: typeof import("./dataSafeSecurityPolicyManagement").DataSafeSecurityPolicyManagement = null as any;
utilities.lazyLoad(exports, ["DataSafeSecurityPolicyManagement"], () => require("./dataSafeSecurityPolicyManagement"));

export { DataSafeSensitiveDataModelArgs, DataSafeSensitiveDataModelState } from "./dataSafeSensitiveDataModel";
export type DataSafeSensitiveDataModel = import("./dataSafeSensitiveDataModel").DataSafeSensitiveDataModel;
export const DataSafeSensitiveDataModel: typeof import("./dataSafeSensitiveDataModel").DataSafeSensitiveDataModel = null as any;
utilities.lazyLoad(exports, ["DataSafeSensitiveDataModel"], () => require("./dataSafeSensitiveDataModel"));

export { DataSafeSensitiveDataModelsApplyDiscoveryJobResultsArgs, DataSafeSensitiveDataModelsApplyDiscoveryJobResultsState } from "./dataSafeSensitiveDataModelsApplyDiscoveryJobResults";
export type DataSafeSensitiveDataModelsApplyDiscoveryJobResults = import("./dataSafeSensitiveDataModelsApplyDiscoveryJobResults").DataSafeSensitiveDataModelsApplyDiscoveryJobResults;
export const DataSafeSensitiveDataModelsApplyDiscoveryJobResults: typeof import("./dataSafeSensitiveDataModelsApplyDiscoveryJobResults").DataSafeSensitiveDataModelsApplyDiscoveryJobResults = null as any;
utilities.lazyLoad(exports, ["DataSafeSensitiveDataModelsApplyDiscoveryJobResults"], () => require("./dataSafeSensitiveDataModelsApplyDiscoveryJobResults"));

export { DataSafeSensitiveDataModelsSensitiveColumnArgs, DataSafeSensitiveDataModelsSensitiveColumnState } from "./dataSafeSensitiveDataModelsSensitiveColumn";
export type DataSafeSensitiveDataModelsSensitiveColumn = import("./dataSafeSensitiveDataModelsSensitiveColumn").DataSafeSensitiveDataModelsSensitiveColumn;
export const DataSafeSensitiveDataModelsSensitiveColumn: typeof import("./dataSafeSensitiveDataModelsSensitiveColumn").DataSafeSensitiveDataModelsSensitiveColumn = null as any;
utilities.lazyLoad(exports, ["DataSafeSensitiveDataModelsSensitiveColumn"], () => require("./dataSafeSensitiveDataModelsSensitiveColumn"));

export { DataSafeSensitiveTypeArgs, DataSafeSensitiveTypeState } from "./dataSafeSensitiveType";
export type DataSafeSensitiveType = import("./dataSafeSensitiveType").DataSafeSensitiveType;
export const DataSafeSensitiveType: typeof import("./dataSafeSensitiveType").DataSafeSensitiveType = null as any;
utilities.lazyLoad(exports, ["DataSafeSensitiveType"], () => require("./dataSafeSensitiveType"));

export { DataSafeSetSecurityAssessmentBaselineArgs, DataSafeSetSecurityAssessmentBaselineState } from "./dataSafeSetSecurityAssessmentBaseline";
export type DataSafeSetSecurityAssessmentBaseline = import("./dataSafeSetSecurityAssessmentBaseline").DataSafeSetSecurityAssessmentBaseline;
export const DataSafeSetSecurityAssessmentBaseline: typeof import("./dataSafeSetSecurityAssessmentBaseline").DataSafeSetSecurityAssessmentBaseline = null as any;
utilities.lazyLoad(exports, ["DataSafeSetSecurityAssessmentBaseline"], () => require("./dataSafeSetSecurityAssessmentBaseline"));

export { DataSafeSetSecurityAssessmentBaselineManagementArgs, DataSafeSetSecurityAssessmentBaselineManagementState } from "./dataSafeSetSecurityAssessmentBaselineManagement";
export type DataSafeSetSecurityAssessmentBaselineManagement = import("./dataSafeSetSecurityAssessmentBaselineManagement").DataSafeSetSecurityAssessmentBaselineManagement;
export const DataSafeSetSecurityAssessmentBaselineManagement: typeof import("./dataSafeSetSecurityAssessmentBaselineManagement").DataSafeSetSecurityAssessmentBaselineManagement = null as any;
utilities.lazyLoad(exports, ["DataSafeSetSecurityAssessmentBaselineManagement"], () => require("./dataSafeSetSecurityAssessmentBaselineManagement"));

export { DataSafeSetUserAssessmentBaselineArgs, DataSafeSetUserAssessmentBaselineState } from "./dataSafeSetUserAssessmentBaseline";
export type DataSafeSetUserAssessmentBaseline = import("./dataSafeSetUserAssessmentBaseline").DataSafeSetUserAssessmentBaseline;
export const DataSafeSetUserAssessmentBaseline: typeof import("./dataSafeSetUserAssessmentBaseline").DataSafeSetUserAssessmentBaseline = null as any;
utilities.lazyLoad(exports, ["DataSafeSetUserAssessmentBaseline"], () => require("./dataSafeSetUserAssessmentBaseline"));

export { DataSafeSetUserAssessmentBaselineManagementArgs, DataSafeSetUserAssessmentBaselineManagementState } from "./dataSafeSetUserAssessmentBaselineManagement";
export type DataSafeSetUserAssessmentBaselineManagement = import("./dataSafeSetUserAssessmentBaselineManagement").DataSafeSetUserAssessmentBaselineManagement;
export const DataSafeSetUserAssessmentBaselineManagement: typeof import("./dataSafeSetUserAssessmentBaselineManagement").DataSafeSetUserAssessmentBaselineManagement = null as any;
utilities.lazyLoad(exports, ["DataSafeSetUserAssessmentBaselineManagement"], () => require("./dataSafeSetUserAssessmentBaselineManagement"));

export { DataSafeSqlCollectionArgs, DataSafeSqlCollectionState } from "./dataSafeSqlCollection";
export type DataSafeSqlCollection = import("./dataSafeSqlCollection").DataSafeSqlCollection;
export const DataSafeSqlCollection: typeof import("./dataSafeSqlCollection").DataSafeSqlCollection = null as any;
utilities.lazyLoad(exports, ["DataSafeSqlCollection"], () => require("./dataSafeSqlCollection"));

export { DataSafeSqlFirewallPolicyArgs, DataSafeSqlFirewallPolicyState } from "./dataSafeSqlFirewallPolicy";
export type DataSafeSqlFirewallPolicy = import("./dataSafeSqlFirewallPolicy").DataSafeSqlFirewallPolicy;
export const DataSafeSqlFirewallPolicy: typeof import("./dataSafeSqlFirewallPolicy").DataSafeSqlFirewallPolicy = null as any;
utilities.lazyLoad(exports, ["DataSafeSqlFirewallPolicy"], () => require("./dataSafeSqlFirewallPolicy"));

export { DataSafeSqlFirewallPolicyManagementArgs, DataSafeSqlFirewallPolicyManagementState } from "./dataSafeSqlFirewallPolicyManagement";
export type DataSafeSqlFirewallPolicyManagement = import("./dataSafeSqlFirewallPolicyManagement").DataSafeSqlFirewallPolicyManagement;
export const DataSafeSqlFirewallPolicyManagement: typeof import("./dataSafeSqlFirewallPolicyManagement").DataSafeSqlFirewallPolicyManagement = null as any;
utilities.lazyLoad(exports, ["DataSafeSqlFirewallPolicyManagement"], () => require("./dataSafeSqlFirewallPolicyManagement"));

export { DataSafeTargetAlertPolicyAssociationArgs, DataSafeTargetAlertPolicyAssociationState } from "./dataSafeTargetAlertPolicyAssociation";
export type DataSafeTargetAlertPolicyAssociation = import("./dataSafeTargetAlertPolicyAssociation").DataSafeTargetAlertPolicyAssociation;
export const DataSafeTargetAlertPolicyAssociation: typeof import("./dataSafeTargetAlertPolicyAssociation").DataSafeTargetAlertPolicyAssociation = null as any;
utilities.lazyLoad(exports, ["DataSafeTargetAlertPolicyAssociation"], () => require("./dataSafeTargetAlertPolicyAssociation"));

export { DataSafeTargetDatabaseArgs, DataSafeTargetDatabaseState } from "./dataSafeTargetDatabase";
export type DataSafeTargetDatabase = import("./dataSafeTargetDatabase").DataSafeTargetDatabase;
export const DataSafeTargetDatabase: typeof import("./dataSafeTargetDatabase").DataSafeTargetDatabase = null as any;
utilities.lazyLoad(exports, ["DataSafeTargetDatabase"], () => require("./dataSafeTargetDatabase"));

export { DataSafeTargetDatabasePeerTargetDatabaseArgs, DataSafeTargetDatabasePeerTargetDatabaseState } from "./dataSafeTargetDatabasePeerTargetDatabase";
export type DataSafeTargetDatabasePeerTargetDatabase = import("./dataSafeTargetDatabasePeerTargetDatabase").DataSafeTargetDatabasePeerTargetDatabase;
export const DataSafeTargetDatabasePeerTargetDatabase: typeof import("./dataSafeTargetDatabasePeerTargetDatabase").DataSafeTargetDatabasePeerTargetDatabase = null as any;
utilities.lazyLoad(exports, ["DataSafeTargetDatabasePeerTargetDatabase"], () => require("./dataSafeTargetDatabasePeerTargetDatabase"));

export { DataSafeUnsetSecurityAssessmentBaselineArgs, DataSafeUnsetSecurityAssessmentBaselineState } from "./dataSafeUnsetSecurityAssessmentBaseline";
export type DataSafeUnsetSecurityAssessmentBaseline = import("./dataSafeUnsetSecurityAssessmentBaseline").DataSafeUnsetSecurityAssessmentBaseline;
export const DataSafeUnsetSecurityAssessmentBaseline: typeof import("./dataSafeUnsetSecurityAssessmentBaseline").DataSafeUnsetSecurityAssessmentBaseline = null as any;
utilities.lazyLoad(exports, ["DataSafeUnsetSecurityAssessmentBaseline"], () => require("./dataSafeUnsetSecurityAssessmentBaseline"));

export { DataSafeUnsetSecurityAssessmentBaselineManagementArgs, DataSafeUnsetSecurityAssessmentBaselineManagementState } from "./dataSafeUnsetSecurityAssessmentBaselineManagement";
export type DataSafeUnsetSecurityAssessmentBaselineManagement = import("./dataSafeUnsetSecurityAssessmentBaselineManagement").DataSafeUnsetSecurityAssessmentBaselineManagement;
export const DataSafeUnsetSecurityAssessmentBaselineManagement: typeof import("./dataSafeUnsetSecurityAssessmentBaselineManagement").DataSafeUnsetSecurityAssessmentBaselineManagement = null as any;
utilities.lazyLoad(exports, ["DataSafeUnsetSecurityAssessmentBaselineManagement"], () => require("./dataSafeUnsetSecurityAssessmentBaselineManagement"));

export { DataSafeUnsetUserAssessmentBaselineArgs, DataSafeUnsetUserAssessmentBaselineState } from "./dataSafeUnsetUserAssessmentBaseline";
export type DataSafeUnsetUserAssessmentBaseline = import("./dataSafeUnsetUserAssessmentBaseline").DataSafeUnsetUserAssessmentBaseline;
export const DataSafeUnsetUserAssessmentBaseline: typeof import("./dataSafeUnsetUserAssessmentBaseline").DataSafeUnsetUserAssessmentBaseline = null as any;
utilities.lazyLoad(exports, ["DataSafeUnsetUserAssessmentBaseline"], () => require("./dataSafeUnsetUserAssessmentBaseline"));

export { DataSafeUnsetUserAssessmentBaselineManagementArgs, DataSafeUnsetUserAssessmentBaselineManagementState } from "./dataSafeUnsetUserAssessmentBaselineManagement";
export type DataSafeUnsetUserAssessmentBaselineManagement = import("./dataSafeUnsetUserAssessmentBaselineManagement").DataSafeUnsetUserAssessmentBaselineManagement;
export const DataSafeUnsetUserAssessmentBaselineManagement: typeof import("./dataSafeUnsetUserAssessmentBaselineManagement").DataSafeUnsetUserAssessmentBaselineManagement = null as any;
utilities.lazyLoad(exports, ["DataSafeUnsetUserAssessmentBaselineManagement"], () => require("./dataSafeUnsetUserAssessmentBaselineManagement"));

export { DataSafeUserAssessmentArgs, DataSafeUserAssessmentState } from "./dataSafeUserAssessment";
export type DataSafeUserAssessment = import("./dataSafeUserAssessment").DataSafeUserAssessment;
export const DataSafeUserAssessment: typeof import("./dataSafeUserAssessment").DataSafeUserAssessment = null as any;
utilities.lazyLoad(exports, ["DataSafeUserAssessment"], () => require("./dataSafeUserAssessment"));

export { DatabaseApplicationVipArgs, DatabaseApplicationVipState } from "./databaseApplicationVip";
export type DatabaseApplicationVip = import("./databaseApplicationVip").DatabaseApplicationVip;
export const DatabaseApplicationVip: typeof import("./databaseApplicationVip").DatabaseApplicationVip = null as any;
utilities.lazyLoad(exports, ["DatabaseApplicationVip"], () => require("./databaseApplicationVip"));

export { DatabaseAutonomousContainerDatabaseArgs, DatabaseAutonomousContainerDatabaseState } from "./databaseAutonomousContainerDatabase";
export type DatabaseAutonomousContainerDatabase = import("./databaseAutonomousContainerDatabase").DatabaseAutonomousContainerDatabase;
export const DatabaseAutonomousContainerDatabase: typeof import("./databaseAutonomousContainerDatabase").DatabaseAutonomousContainerDatabase = null as any;
utilities.lazyLoad(exports, ["DatabaseAutonomousContainerDatabase"], () => require("./databaseAutonomousContainerDatabase"));

export { DatabaseAutonomousContainerDatabaseDataguardAssociationArgs, DatabaseAutonomousContainerDatabaseDataguardAssociationState } from "./databaseAutonomousContainerDatabaseDataguardAssociation";
export type DatabaseAutonomousContainerDatabaseDataguardAssociation = import("./databaseAutonomousContainerDatabaseDataguardAssociation").DatabaseAutonomousContainerDatabaseDataguardAssociation;
export const DatabaseAutonomousContainerDatabaseDataguardAssociation: typeof import("./databaseAutonomousContainerDatabaseDataguardAssociation").DatabaseAutonomousContainerDatabaseDataguardAssociation = null as any;
utilities.lazyLoad(exports, ["DatabaseAutonomousContainerDatabaseDataguardAssociation"], () => require("./databaseAutonomousContainerDatabaseDataguardAssociation"));

export { DatabaseAutonomousContainerDatabaseDataguardAssociationOperationArgs, DatabaseAutonomousContainerDatabaseDataguardAssociationOperationState } from "./databaseAutonomousContainerDatabaseDataguardAssociationOperation";
export type DatabaseAutonomousContainerDatabaseDataguardAssociationOperation = import("./databaseAutonomousContainerDatabaseDataguardAssociationOperation").DatabaseAutonomousContainerDatabaseDataguardAssociationOperation;
export const DatabaseAutonomousContainerDatabaseDataguardAssociationOperation: typeof import("./databaseAutonomousContainerDatabaseDataguardAssociationOperation").DatabaseAutonomousContainerDatabaseDataguardAssociationOperation = null as any;
utilities.lazyLoad(exports, ["DatabaseAutonomousContainerDatabaseDataguardAssociationOperation"], () => require("./databaseAutonomousContainerDatabaseDataguardAssociationOperation"));

export { DatabaseAutonomousContainerDatabaseDataguardRoleChangeArgs, DatabaseAutonomousContainerDatabaseDataguardRoleChangeState } from "./databaseAutonomousContainerDatabaseDataguardRoleChange";
export type DatabaseAutonomousContainerDatabaseDataguardRoleChange = import("./databaseAutonomousContainerDatabaseDataguardRoleChange").DatabaseAutonomousContainerDatabaseDataguardRoleChange;
export const DatabaseAutonomousContainerDatabaseDataguardRoleChange: typeof import("./databaseAutonomousContainerDatabaseDataguardRoleChange").DatabaseAutonomousContainerDatabaseDataguardRoleChange = null as any;
utilities.lazyLoad(exports, ["DatabaseAutonomousContainerDatabaseDataguardRoleChange"], () => require("./databaseAutonomousContainerDatabaseDataguardRoleChange"));

export { DatabaseAutonomousDatabaseArgs, DatabaseAutonomousDatabaseState } from "./databaseAutonomousDatabase";
export type DatabaseAutonomousDatabase = import("./databaseAutonomousDatabase").DatabaseAutonomousDatabase;
export const DatabaseAutonomousDatabase: typeof import("./databaseAutonomousDatabase").DatabaseAutonomousDatabase = null as any;
utilities.lazyLoad(exports, ["DatabaseAutonomousDatabase"], () => require("./databaseAutonomousDatabase"));

export { DatabaseAutonomousDatabaseBackupArgs, DatabaseAutonomousDatabaseBackupState } from "./databaseAutonomousDatabaseBackup";
export type DatabaseAutonomousDatabaseBackup = import("./databaseAutonomousDatabaseBackup").DatabaseAutonomousDatabaseBackup;
export const DatabaseAutonomousDatabaseBackup: typeof import("./databaseAutonomousDatabaseBackup").DatabaseAutonomousDatabaseBackup = null as any;
utilities.lazyLoad(exports, ["DatabaseAutonomousDatabaseBackup"], () => require("./databaseAutonomousDatabaseBackup"));

export { DatabaseAutonomousDatabaseInstanceWalletManagementArgs, DatabaseAutonomousDatabaseInstanceWalletManagementState } from "./databaseAutonomousDatabaseInstanceWalletManagement";
export type DatabaseAutonomousDatabaseInstanceWalletManagement = import("./databaseAutonomousDatabaseInstanceWalletManagement").DatabaseAutonomousDatabaseInstanceWalletManagement;
export const DatabaseAutonomousDatabaseInstanceWalletManagement: typeof import("./databaseAutonomousDatabaseInstanceWalletManagement").DatabaseAutonomousDatabaseInstanceWalletManagement = null as any;
utilities.lazyLoad(exports, ["DatabaseAutonomousDatabaseInstanceWalletManagement"], () => require("./databaseAutonomousDatabaseInstanceWalletManagement"));

export { DatabaseAutonomousDatabaseRegionalWalletManagementArgs, DatabaseAutonomousDatabaseRegionalWalletManagementState } from "./databaseAutonomousDatabaseRegionalWalletManagement";
export type DatabaseAutonomousDatabaseRegionalWalletManagement = import("./databaseAutonomousDatabaseRegionalWalletManagement").DatabaseAutonomousDatabaseRegionalWalletManagement;
export const DatabaseAutonomousDatabaseRegionalWalletManagement: typeof import("./databaseAutonomousDatabaseRegionalWalletManagement").DatabaseAutonomousDatabaseRegionalWalletManagement = null as any;
utilities.lazyLoad(exports, ["DatabaseAutonomousDatabaseRegionalWalletManagement"], () => require("./databaseAutonomousDatabaseRegionalWalletManagement"));

export { DatabaseAutonomousDatabaseSaasAdminUserArgs, DatabaseAutonomousDatabaseSaasAdminUserState } from "./databaseAutonomousDatabaseSaasAdminUser";
export type DatabaseAutonomousDatabaseSaasAdminUser = import("./databaseAutonomousDatabaseSaasAdminUser").DatabaseAutonomousDatabaseSaasAdminUser;
export const DatabaseAutonomousDatabaseSaasAdminUser: typeof import("./databaseAutonomousDatabaseSaasAdminUser").DatabaseAutonomousDatabaseSaasAdminUser = null as any;
utilities.lazyLoad(exports, ["DatabaseAutonomousDatabaseSaasAdminUser"], () => require("./databaseAutonomousDatabaseSaasAdminUser"));

export { DatabaseAutonomousDatabaseSoftwareImageArgs, DatabaseAutonomousDatabaseSoftwareImageState } from "./databaseAutonomousDatabaseSoftwareImage";
export type DatabaseAutonomousDatabaseSoftwareImage = import("./databaseAutonomousDatabaseSoftwareImage").DatabaseAutonomousDatabaseSoftwareImage;
export const DatabaseAutonomousDatabaseSoftwareImage: typeof import("./databaseAutonomousDatabaseSoftwareImage").DatabaseAutonomousDatabaseSoftwareImage = null as any;
utilities.lazyLoad(exports, ["DatabaseAutonomousDatabaseSoftwareImage"], () => require("./databaseAutonomousDatabaseSoftwareImage"));

export { DatabaseAutonomousDatabaseWalletArgs, DatabaseAutonomousDatabaseWalletState } from "./databaseAutonomousDatabaseWallet";
export type DatabaseAutonomousDatabaseWallet = import("./databaseAutonomousDatabaseWallet").DatabaseAutonomousDatabaseWallet;
export const DatabaseAutonomousDatabaseWallet: typeof import("./databaseAutonomousDatabaseWallet").DatabaseAutonomousDatabaseWallet = null as any;
utilities.lazyLoad(exports, ["DatabaseAutonomousDatabaseWallet"], () => require("./databaseAutonomousDatabaseWallet"));

export { DatabaseAutonomousExadataInfrastructureArgs, DatabaseAutonomousExadataInfrastructureState } from "./databaseAutonomousExadataInfrastructure";
export type DatabaseAutonomousExadataInfrastructure = import("./databaseAutonomousExadataInfrastructure").DatabaseAutonomousExadataInfrastructure;
export const DatabaseAutonomousExadataInfrastructure: typeof import("./databaseAutonomousExadataInfrastructure").DatabaseAutonomousExadataInfrastructure = null as any;
utilities.lazyLoad(exports, ["DatabaseAutonomousExadataInfrastructure"], () => require("./databaseAutonomousExadataInfrastructure"));

export { DatabaseAutonomousVmClusterArgs, DatabaseAutonomousVmClusterState } from "./databaseAutonomousVmCluster";
export type DatabaseAutonomousVmCluster = import("./databaseAutonomousVmCluster").DatabaseAutonomousVmCluster;
export const DatabaseAutonomousVmCluster: typeof import("./databaseAutonomousVmCluster").DatabaseAutonomousVmCluster = null as any;
utilities.lazyLoad(exports, ["DatabaseAutonomousVmCluster"], () => require("./databaseAutonomousVmCluster"));

export { DatabaseAutonomousVmClusterOrdsCertificateManagementArgs, DatabaseAutonomousVmClusterOrdsCertificateManagementState } from "./databaseAutonomousVmClusterOrdsCertificateManagement";
export type DatabaseAutonomousVmClusterOrdsCertificateManagement = import("./databaseAutonomousVmClusterOrdsCertificateManagement").DatabaseAutonomousVmClusterOrdsCertificateManagement;
export const DatabaseAutonomousVmClusterOrdsCertificateManagement: typeof import("./databaseAutonomousVmClusterOrdsCertificateManagement").DatabaseAutonomousVmClusterOrdsCertificateManagement = null as any;
utilities.lazyLoad(exports, ["DatabaseAutonomousVmClusterOrdsCertificateManagement"], () => require("./databaseAutonomousVmClusterOrdsCertificateManagement"));

export { DatabaseAutonomousVmClusterSslCertificateManagementArgs, DatabaseAutonomousVmClusterSslCertificateManagementState } from "./databaseAutonomousVmClusterSslCertificateManagement";
export type DatabaseAutonomousVmClusterSslCertificateManagement = import("./databaseAutonomousVmClusterSslCertificateManagement").DatabaseAutonomousVmClusterSslCertificateManagement;
export const DatabaseAutonomousVmClusterSslCertificateManagement: typeof import("./databaseAutonomousVmClusterSslCertificateManagement").DatabaseAutonomousVmClusterSslCertificateManagement = null as any;
utilities.lazyLoad(exports, ["DatabaseAutonomousVmClusterSslCertificateManagement"], () => require("./databaseAutonomousVmClusterSslCertificateManagement"));

export { DatabaseBackupArgs, DatabaseBackupState } from "./databaseBackup";
export type DatabaseBackup = import("./databaseBackup").DatabaseBackup;
export const DatabaseBackup: typeof import("./databaseBackup").DatabaseBackup = null as any;
utilities.lazyLoad(exports, ["DatabaseBackup"], () => require("./databaseBackup"));

export { DatabaseBackupCancelManagementArgs, DatabaseBackupCancelManagementState } from "./databaseBackupCancelManagement";
export type DatabaseBackupCancelManagement = import("./databaseBackupCancelManagement").DatabaseBackupCancelManagement;
export const DatabaseBackupCancelManagement: typeof import("./databaseBackupCancelManagement").DatabaseBackupCancelManagement = null as any;
utilities.lazyLoad(exports, ["DatabaseBackupCancelManagement"], () => require("./databaseBackupCancelManagement"));

export { DatabaseBackupDestinationArgs, DatabaseBackupDestinationState } from "./databaseBackupDestination";
export type DatabaseBackupDestination = import("./databaseBackupDestination").DatabaseBackupDestination;
export const DatabaseBackupDestination: typeof import("./databaseBackupDestination").DatabaseBackupDestination = null as any;
utilities.lazyLoad(exports, ["DatabaseBackupDestination"], () => require("./databaseBackupDestination"));

export { DatabaseCloudAutonomousVmClusterArgs, DatabaseCloudAutonomousVmClusterState } from "./databaseCloudAutonomousVmCluster";
export type DatabaseCloudAutonomousVmCluster = import("./databaseCloudAutonomousVmCluster").DatabaseCloudAutonomousVmCluster;
export const DatabaseCloudAutonomousVmCluster: typeof import("./databaseCloudAutonomousVmCluster").DatabaseCloudAutonomousVmCluster = null as any;
utilities.lazyLoad(exports, ["DatabaseCloudAutonomousVmCluster"], () => require("./databaseCloudAutonomousVmCluster"));

export { DatabaseCloudDatabaseManagementArgs, DatabaseCloudDatabaseManagementState } from "./databaseCloudDatabaseManagement";
export type DatabaseCloudDatabaseManagement = import("./databaseCloudDatabaseManagement").DatabaseCloudDatabaseManagement;
export const DatabaseCloudDatabaseManagement: typeof import("./databaseCloudDatabaseManagement").DatabaseCloudDatabaseManagement = null as any;
utilities.lazyLoad(exports, ["DatabaseCloudDatabaseManagement"], () => require("./databaseCloudDatabaseManagement"));

export { DatabaseCloudExadataInfrastructureArgs, DatabaseCloudExadataInfrastructureState } from "./databaseCloudExadataInfrastructure";
export type DatabaseCloudExadataInfrastructure = import("./databaseCloudExadataInfrastructure").DatabaseCloudExadataInfrastructure;
export const DatabaseCloudExadataInfrastructure: typeof import("./databaseCloudExadataInfrastructure").DatabaseCloudExadataInfrastructure = null as any;
utilities.lazyLoad(exports, ["DatabaseCloudExadataInfrastructure"], () => require("./databaseCloudExadataInfrastructure"));

export { DatabaseCloudVmClusterArgs, DatabaseCloudVmClusterState } from "./databaseCloudVmCluster";
export type DatabaseCloudVmCluster = import("./databaseCloudVmCluster").DatabaseCloudVmCluster;
export const DatabaseCloudVmCluster: typeof import("./databaseCloudVmCluster").DatabaseCloudVmCluster = null as any;
utilities.lazyLoad(exports, ["DatabaseCloudVmCluster"], () => require("./databaseCloudVmCluster"));

export { DatabaseCloudVmClusterIormConfigArgs, DatabaseCloudVmClusterIormConfigState } from "./databaseCloudVmClusterIormConfig";
export type DatabaseCloudVmClusterIormConfig = import("./databaseCloudVmClusterIormConfig").DatabaseCloudVmClusterIormConfig;
export const DatabaseCloudVmClusterIormConfig: typeof import("./databaseCloudVmClusterIormConfig").DatabaseCloudVmClusterIormConfig = null as any;
utilities.lazyLoad(exports, ["DatabaseCloudVmClusterIormConfig"], () => require("./databaseCloudVmClusterIormConfig"));

export { DatabaseDataGuardAssociationArgs, DatabaseDataGuardAssociationState } from "./databaseDataGuardAssociation";
export type DatabaseDataGuardAssociation = import("./databaseDataGuardAssociation").DatabaseDataGuardAssociation;
export const DatabaseDataGuardAssociation: typeof import("./databaseDataGuardAssociation").DatabaseDataGuardAssociation = null as any;
utilities.lazyLoad(exports, ["DatabaseDataGuardAssociation"], () => require("./databaseDataGuardAssociation"));

export { DatabaseDatabaseArgs, DatabaseDatabaseState } from "./databaseDatabase";
export type DatabaseDatabase = import("./databaseDatabase").DatabaseDatabase;
export const DatabaseDatabase: typeof import("./databaseDatabase").DatabaseDatabase = null as any;
utilities.lazyLoad(exports, ["DatabaseDatabase"], () => require("./databaseDatabase"));

export { DatabaseDatabaseSoftwareImageArgs, DatabaseDatabaseSoftwareImageState } from "./databaseDatabaseSoftwareImage";
export type DatabaseDatabaseSoftwareImage = import("./databaseDatabaseSoftwareImage").DatabaseDatabaseSoftwareImage;
export const DatabaseDatabaseSoftwareImage: typeof import("./databaseDatabaseSoftwareImage").DatabaseDatabaseSoftwareImage = null as any;
utilities.lazyLoad(exports, ["DatabaseDatabaseSoftwareImage"], () => require("./databaseDatabaseSoftwareImage"));

export { DatabaseDatabaseUpgradeArgs, DatabaseDatabaseUpgradeState } from "./databaseDatabaseUpgrade";
export type DatabaseDatabaseUpgrade = import("./databaseDatabaseUpgrade").DatabaseDatabaseUpgrade;
export const DatabaseDatabaseUpgrade: typeof import("./databaseDatabaseUpgrade").DatabaseDatabaseUpgrade = null as any;
utilities.lazyLoad(exports, ["DatabaseDatabaseUpgrade"], () => require("./databaseDatabaseUpgrade"));

export { DatabaseDbHomeArgs, DatabaseDbHomeState } from "./databaseDbHome";
export type DatabaseDbHome = import("./databaseDbHome").DatabaseDbHome;
export const DatabaseDbHome: typeof import("./databaseDbHome").DatabaseDbHome = null as any;
utilities.lazyLoad(exports, ["DatabaseDbHome"], () => require("./databaseDbHome"));

export { DatabaseDbNodeArgs, DatabaseDbNodeState } from "./databaseDbNode";
export type DatabaseDbNode = import("./databaseDbNode").DatabaseDbNode;
export const DatabaseDbNode: typeof import("./databaseDbNode").DatabaseDbNode = null as any;
utilities.lazyLoad(exports, ["DatabaseDbNode"], () => require("./databaseDbNode"));

export { DatabaseDbNodeConsoleConnectionArgs, DatabaseDbNodeConsoleConnectionState } from "./databaseDbNodeConsoleConnection";
export type DatabaseDbNodeConsoleConnection = import("./databaseDbNodeConsoleConnection").DatabaseDbNodeConsoleConnection;
export const DatabaseDbNodeConsoleConnection: typeof import("./databaseDbNodeConsoleConnection").DatabaseDbNodeConsoleConnection = null as any;
utilities.lazyLoad(exports, ["DatabaseDbNodeConsoleConnection"], () => require("./databaseDbNodeConsoleConnection"));

export { DatabaseDbNodeConsoleHistoryArgs, DatabaseDbNodeConsoleHistoryState } from "./databaseDbNodeConsoleHistory";
export type DatabaseDbNodeConsoleHistory = import("./databaseDbNodeConsoleHistory").DatabaseDbNodeConsoleHistory;
export const DatabaseDbNodeConsoleHistory: typeof import("./databaseDbNodeConsoleHistory").DatabaseDbNodeConsoleHistory = null as any;
utilities.lazyLoad(exports, ["DatabaseDbNodeConsoleHistory"], () => require("./databaseDbNodeConsoleHistory"));

export { DatabaseDbSystemArgs, DatabaseDbSystemState } from "./databaseDbSystem";
export type DatabaseDbSystem = import("./databaseDbSystem").DatabaseDbSystem;
export const DatabaseDbSystem: typeof import("./databaseDbSystem").DatabaseDbSystem = null as any;
utilities.lazyLoad(exports, ["DatabaseDbSystem"], () => require("./databaseDbSystem"));

export { DatabaseDbSystemsUpgradeArgs, DatabaseDbSystemsUpgradeState } from "./databaseDbSystemsUpgrade";
export type DatabaseDbSystemsUpgrade = import("./databaseDbSystemsUpgrade").DatabaseDbSystemsUpgrade;
export const DatabaseDbSystemsUpgrade: typeof import("./databaseDbSystemsUpgrade").DatabaseDbSystemsUpgrade = null as any;
utilities.lazyLoad(exports, ["DatabaseDbSystemsUpgrade"], () => require("./databaseDbSystemsUpgrade"));

export { DatabaseExadataInfrastructureArgs, DatabaseExadataInfrastructureState } from "./databaseExadataInfrastructure";
export type DatabaseExadataInfrastructure = import("./databaseExadataInfrastructure").DatabaseExadataInfrastructure;
export const DatabaseExadataInfrastructure: typeof import("./databaseExadataInfrastructure").DatabaseExadataInfrastructure = null as any;
utilities.lazyLoad(exports, ["DatabaseExadataInfrastructure"], () => require("./databaseExadataInfrastructure"));

export { DatabaseExadataInfrastructureComputeArgs, DatabaseExadataInfrastructureComputeState } from "./databaseExadataInfrastructureCompute";
export type DatabaseExadataInfrastructureCompute = import("./databaseExadataInfrastructureCompute").DatabaseExadataInfrastructureCompute;
export const DatabaseExadataInfrastructureCompute: typeof import("./databaseExadataInfrastructureCompute").DatabaseExadataInfrastructureCompute = null as any;
utilities.lazyLoad(exports, ["DatabaseExadataInfrastructureCompute"], () => require("./databaseExadataInfrastructureCompute"));

export { DatabaseExadataInfrastructureStorageArgs, DatabaseExadataInfrastructureStorageState } from "./databaseExadataInfrastructureStorage";
export type DatabaseExadataInfrastructureStorage = import("./databaseExadataInfrastructureStorage").DatabaseExadataInfrastructureStorage;
export const DatabaseExadataInfrastructureStorage: typeof import("./databaseExadataInfrastructureStorage").DatabaseExadataInfrastructureStorage = null as any;
utilities.lazyLoad(exports, ["DatabaseExadataInfrastructureStorage"], () => require("./databaseExadataInfrastructureStorage"));

export { DatabaseExadataIormConfigArgs, DatabaseExadataIormConfigState } from "./databaseExadataIormConfig";
export type DatabaseExadataIormConfig = import("./databaseExadataIormConfig").DatabaseExadataIormConfig;
export const DatabaseExadataIormConfig: typeof import("./databaseExadataIormConfig").DatabaseExadataIormConfig = null as any;
utilities.lazyLoad(exports, ["DatabaseExadataIormConfig"], () => require("./databaseExadataIormConfig"));

export { DatabaseExadbVmClusterArgs, DatabaseExadbVmClusterState } from "./databaseExadbVmCluster";
export type DatabaseExadbVmCluster = import("./databaseExadbVmCluster").DatabaseExadbVmCluster;
export const DatabaseExadbVmCluster: typeof import("./databaseExadbVmCluster").DatabaseExadbVmCluster = null as any;
utilities.lazyLoad(exports, ["DatabaseExadbVmCluster"], () => require("./databaseExadbVmCluster"));

export { DatabaseExascaleDbStorageVaultArgs, DatabaseExascaleDbStorageVaultState } from "./databaseExascaleDbStorageVault";
export type DatabaseExascaleDbStorageVault = import("./databaseExascaleDbStorageVault").DatabaseExascaleDbStorageVault;
export const DatabaseExascaleDbStorageVault: typeof import("./databaseExascaleDbStorageVault").DatabaseExascaleDbStorageVault = null as any;
utilities.lazyLoad(exports, ["DatabaseExascaleDbStorageVault"], () => require("./databaseExascaleDbStorageVault"));

export { DatabaseExternalContainerDatabaseArgs, DatabaseExternalContainerDatabaseState } from "./databaseExternalContainerDatabase";
export type DatabaseExternalContainerDatabase = import("./databaseExternalContainerDatabase").DatabaseExternalContainerDatabase;
export const DatabaseExternalContainerDatabase: typeof import("./databaseExternalContainerDatabase").DatabaseExternalContainerDatabase = null as any;
utilities.lazyLoad(exports, ["DatabaseExternalContainerDatabase"], () => require("./databaseExternalContainerDatabase"));

export { DatabaseExternalContainerDatabaseManagementArgs, DatabaseExternalContainerDatabaseManagementState } from "./databaseExternalContainerDatabaseManagement";
export type DatabaseExternalContainerDatabaseManagement = import("./databaseExternalContainerDatabaseManagement").DatabaseExternalContainerDatabaseManagement;
export const DatabaseExternalContainerDatabaseManagement: typeof import("./databaseExternalContainerDatabaseManagement").DatabaseExternalContainerDatabaseManagement = null as any;
utilities.lazyLoad(exports, ["DatabaseExternalContainerDatabaseManagement"], () => require("./databaseExternalContainerDatabaseManagement"));

export { DatabaseExternalDatabaseConnectorArgs, DatabaseExternalDatabaseConnectorState } from "./databaseExternalDatabaseConnector";
export type DatabaseExternalDatabaseConnector = import("./databaseExternalDatabaseConnector").DatabaseExternalDatabaseConnector;
export const DatabaseExternalDatabaseConnector: typeof import("./databaseExternalDatabaseConnector").DatabaseExternalDatabaseConnector = null as any;
utilities.lazyLoad(exports, ["DatabaseExternalDatabaseConnector"], () => require("./databaseExternalDatabaseConnector"));

export { DatabaseExternalNonContainerDatabaseArgs, DatabaseExternalNonContainerDatabaseState } from "./databaseExternalNonContainerDatabase";
export type DatabaseExternalNonContainerDatabase = import("./databaseExternalNonContainerDatabase").DatabaseExternalNonContainerDatabase;
export const DatabaseExternalNonContainerDatabase: typeof import("./databaseExternalNonContainerDatabase").DatabaseExternalNonContainerDatabase = null as any;
utilities.lazyLoad(exports, ["DatabaseExternalNonContainerDatabase"], () => require("./databaseExternalNonContainerDatabase"));

export { DatabaseExternalNonContainerDatabaseManagementArgs, DatabaseExternalNonContainerDatabaseManagementState } from "./databaseExternalNonContainerDatabaseManagement";
export type DatabaseExternalNonContainerDatabaseManagement = import("./databaseExternalNonContainerDatabaseManagement").DatabaseExternalNonContainerDatabaseManagement;
export const DatabaseExternalNonContainerDatabaseManagement: typeof import("./databaseExternalNonContainerDatabaseManagement").DatabaseExternalNonContainerDatabaseManagement = null as any;
utilities.lazyLoad(exports, ["DatabaseExternalNonContainerDatabaseManagement"], () => require("./databaseExternalNonContainerDatabaseManagement"));

export { DatabaseExternalNonContainerDatabaseOperationsInsightsManagementArgs, DatabaseExternalNonContainerDatabaseOperationsInsightsManagementState } from "./databaseExternalNonContainerDatabaseOperationsInsightsManagement";
export type DatabaseExternalNonContainerDatabaseOperationsInsightsManagement = import("./databaseExternalNonContainerDatabaseOperationsInsightsManagement").DatabaseExternalNonContainerDatabaseOperationsInsightsManagement;
export const DatabaseExternalNonContainerDatabaseOperationsInsightsManagement: typeof import("./databaseExternalNonContainerDatabaseOperationsInsightsManagement").DatabaseExternalNonContainerDatabaseOperationsInsightsManagement = null as any;
utilities.lazyLoad(exports, ["DatabaseExternalNonContainerDatabaseOperationsInsightsManagement"], () => require("./databaseExternalNonContainerDatabaseOperationsInsightsManagement"));

export { DatabaseExternalPluggableDatabaseArgs, DatabaseExternalPluggableDatabaseState } from "./databaseExternalPluggableDatabase";
export type DatabaseExternalPluggableDatabase = import("./databaseExternalPluggableDatabase").DatabaseExternalPluggableDatabase;
export const DatabaseExternalPluggableDatabase: typeof import("./databaseExternalPluggableDatabase").DatabaseExternalPluggableDatabase = null as any;
utilities.lazyLoad(exports, ["DatabaseExternalPluggableDatabase"], () => require("./databaseExternalPluggableDatabase"));

export { DatabaseExternalPluggableDatabaseManagementArgs, DatabaseExternalPluggableDatabaseManagementState } from "./databaseExternalPluggableDatabaseManagement";
export type DatabaseExternalPluggableDatabaseManagement = import("./databaseExternalPluggableDatabaseManagement").DatabaseExternalPluggableDatabaseManagement;
export const DatabaseExternalPluggableDatabaseManagement: typeof import("./databaseExternalPluggableDatabaseManagement").DatabaseExternalPluggableDatabaseManagement = null as any;
utilities.lazyLoad(exports, ["DatabaseExternalPluggableDatabaseManagement"], () => require("./databaseExternalPluggableDatabaseManagement"));

export { DatabaseExternalPluggableDatabaseOperationsInsightsManagementArgs, DatabaseExternalPluggableDatabaseOperationsInsightsManagementState } from "./databaseExternalPluggableDatabaseOperationsInsightsManagement";
export type DatabaseExternalPluggableDatabaseOperationsInsightsManagement = import("./databaseExternalPluggableDatabaseOperationsInsightsManagement").DatabaseExternalPluggableDatabaseOperationsInsightsManagement;
export const DatabaseExternalPluggableDatabaseOperationsInsightsManagement: typeof import("./databaseExternalPluggableDatabaseOperationsInsightsManagement").DatabaseExternalPluggableDatabaseOperationsInsightsManagement = null as any;
utilities.lazyLoad(exports, ["DatabaseExternalPluggableDatabaseOperationsInsightsManagement"], () => require("./databaseExternalPluggableDatabaseOperationsInsightsManagement"));

export { DatabaseExternalcontainerdatabasesStackMonitoringArgs, DatabaseExternalcontainerdatabasesStackMonitoringState } from "./databaseExternalcontainerdatabasesStackMonitoring";
export type DatabaseExternalcontainerdatabasesStackMonitoring = import("./databaseExternalcontainerdatabasesStackMonitoring").DatabaseExternalcontainerdatabasesStackMonitoring;
export const DatabaseExternalcontainerdatabasesStackMonitoring: typeof import("./databaseExternalcontainerdatabasesStackMonitoring").DatabaseExternalcontainerdatabasesStackMonitoring = null as any;
utilities.lazyLoad(exports, ["DatabaseExternalcontainerdatabasesStackMonitoring"], () => require("./databaseExternalcontainerdatabasesStackMonitoring"));

export { DatabaseExternalnoncontainerdatabasesStackMonitoringArgs, DatabaseExternalnoncontainerdatabasesStackMonitoringState } from "./databaseExternalnoncontainerdatabasesStackMonitoring";
export type DatabaseExternalnoncontainerdatabasesStackMonitoring = import("./databaseExternalnoncontainerdatabasesStackMonitoring").DatabaseExternalnoncontainerdatabasesStackMonitoring;
export const DatabaseExternalnoncontainerdatabasesStackMonitoring: typeof import("./databaseExternalnoncontainerdatabasesStackMonitoring").DatabaseExternalnoncontainerdatabasesStackMonitoring = null as any;
utilities.lazyLoad(exports, ["DatabaseExternalnoncontainerdatabasesStackMonitoring"], () => require("./databaseExternalnoncontainerdatabasesStackMonitoring"));

export { DatabaseExternalpluggabledatabasesStackMonitoringArgs, DatabaseExternalpluggabledatabasesStackMonitoringState } from "./databaseExternalpluggabledatabasesStackMonitoring";
export type DatabaseExternalpluggabledatabasesStackMonitoring = import("./databaseExternalpluggabledatabasesStackMonitoring").DatabaseExternalpluggabledatabasesStackMonitoring;
export const DatabaseExternalpluggabledatabasesStackMonitoring: typeof import("./databaseExternalpluggabledatabasesStackMonitoring").DatabaseExternalpluggabledatabasesStackMonitoring = null as any;
utilities.lazyLoad(exports, ["DatabaseExternalpluggabledatabasesStackMonitoring"], () => require("./databaseExternalpluggabledatabasesStackMonitoring"));

export { DatabaseKeyStoreArgs, DatabaseKeyStoreState } from "./databaseKeyStore";
export type DatabaseKeyStore = import("./databaseKeyStore").DatabaseKeyStore;
export const DatabaseKeyStore: typeof import("./databaseKeyStore").DatabaseKeyStore = null as any;
utilities.lazyLoad(exports, ["DatabaseKeyStore"], () => require("./databaseKeyStore"));

export { DatabaseMaintenanceRunArgs, DatabaseMaintenanceRunState } from "./databaseMaintenanceRun";
export type DatabaseMaintenanceRun = import("./databaseMaintenanceRun").DatabaseMaintenanceRun;
export const DatabaseMaintenanceRun: typeof import("./databaseMaintenanceRun").DatabaseMaintenanceRun = null as any;
utilities.lazyLoad(exports, ["DatabaseMaintenanceRun"], () => require("./databaseMaintenanceRun"));

export { DatabaseManagementAutonomousDatabaseAutonomousDatabaseDbmFeaturesManagementArgs, DatabaseManagementAutonomousDatabaseAutonomousDatabaseDbmFeaturesManagementState } from "./databaseManagementAutonomousDatabaseAutonomousDatabaseDbmFeaturesManagement";
export type DatabaseManagementAutonomousDatabaseAutonomousDatabaseDbmFeaturesManagement = import("./databaseManagementAutonomousDatabaseAutonomousDatabaseDbmFeaturesManagement").DatabaseManagementAutonomousDatabaseAutonomousDatabaseDbmFeaturesManagement;
export const DatabaseManagementAutonomousDatabaseAutonomousDatabaseDbmFeaturesManagement: typeof import("./databaseManagementAutonomousDatabaseAutonomousDatabaseDbmFeaturesManagement").DatabaseManagementAutonomousDatabaseAutonomousDatabaseDbmFeaturesManagement = null as any;
utilities.lazyLoad(exports, ["DatabaseManagementAutonomousDatabaseAutonomousDatabaseDbmFeaturesManagement"], () => require("./databaseManagementAutonomousDatabaseAutonomousDatabaseDbmFeaturesManagement"));

export { DatabaseManagementDatabaseDbmFeaturesManagementArgs, DatabaseManagementDatabaseDbmFeaturesManagementState } from "./databaseManagementDatabaseDbmFeaturesManagement";
export type DatabaseManagementDatabaseDbmFeaturesManagement = import("./databaseManagementDatabaseDbmFeaturesManagement").DatabaseManagementDatabaseDbmFeaturesManagement;
export const DatabaseManagementDatabaseDbmFeaturesManagement: typeof import("./databaseManagementDatabaseDbmFeaturesManagement").DatabaseManagementDatabaseDbmFeaturesManagement = null as any;
utilities.lazyLoad(exports, ["DatabaseManagementDatabaseDbmFeaturesManagement"], () => require("./databaseManagementDatabaseDbmFeaturesManagement"));

export { DatabaseManagementDbManagementPrivateEndpointArgs, DatabaseManagementDbManagementPrivateEndpointState } from "./databaseManagementDbManagementPrivateEndpoint";
export type DatabaseManagementDbManagementPrivateEndpoint = import("./databaseManagementDbManagementPrivateEndpoint").DatabaseManagementDbManagementPrivateEndpoint;
export const DatabaseManagementDbManagementPrivateEndpoint: typeof import("./databaseManagementDbManagementPrivateEndpoint").DatabaseManagementDbManagementPrivateEndpoint = null as any;
utilities.lazyLoad(exports, ["DatabaseManagementDbManagementPrivateEndpoint"], () => require("./databaseManagementDbManagementPrivateEndpoint"));

export { DatabaseManagementExternalAsmArgs, DatabaseManagementExternalAsmState } from "./databaseManagementExternalAsm";
export type DatabaseManagementExternalAsm = import("./databaseManagementExternalAsm").DatabaseManagementExternalAsm;
export const DatabaseManagementExternalAsm: typeof import("./databaseManagementExternalAsm").DatabaseManagementExternalAsm = null as any;
utilities.lazyLoad(exports, ["DatabaseManagementExternalAsm"], () => require("./databaseManagementExternalAsm"));

export { DatabaseManagementExternalAsmInstanceArgs, DatabaseManagementExternalAsmInstanceState } from "./databaseManagementExternalAsmInstance";
export type DatabaseManagementExternalAsmInstance = import("./databaseManagementExternalAsmInstance").DatabaseManagementExternalAsmInstance;
export const DatabaseManagementExternalAsmInstance: typeof import("./databaseManagementExternalAsmInstance").DatabaseManagementExternalAsmInstance = null as any;
utilities.lazyLoad(exports, ["DatabaseManagementExternalAsmInstance"], () => require("./databaseManagementExternalAsmInstance"));

export { DatabaseManagementExternalClusterArgs, DatabaseManagementExternalClusterState } from "./databaseManagementExternalCluster";
export type DatabaseManagementExternalCluster = import("./databaseManagementExternalCluster").DatabaseManagementExternalCluster;
export const DatabaseManagementExternalCluster: typeof import("./databaseManagementExternalCluster").DatabaseManagementExternalCluster = null as any;
utilities.lazyLoad(exports, ["DatabaseManagementExternalCluster"], () => require("./databaseManagementExternalCluster"));

export { DatabaseManagementExternalClusterInstanceArgs, DatabaseManagementExternalClusterInstanceState } from "./databaseManagementExternalClusterInstance";
export type DatabaseManagementExternalClusterInstance = import("./databaseManagementExternalClusterInstance").DatabaseManagementExternalClusterInstance;
export const DatabaseManagementExternalClusterInstance: typeof import("./databaseManagementExternalClusterInstance").DatabaseManagementExternalClusterInstance = null as any;
utilities.lazyLoad(exports, ["DatabaseManagementExternalClusterInstance"], () => require("./databaseManagementExternalClusterInstance"));

export { DatabaseManagementExternalDbHomeArgs, DatabaseManagementExternalDbHomeState } from "./databaseManagementExternalDbHome";
export type DatabaseManagementExternalDbHome = import("./databaseManagementExternalDbHome").DatabaseManagementExternalDbHome;
export const DatabaseManagementExternalDbHome: typeof import("./databaseManagementExternalDbHome").DatabaseManagementExternalDbHome = null as any;
utilities.lazyLoad(exports, ["DatabaseManagementExternalDbHome"], () => require("./databaseManagementExternalDbHome"));

export { DatabaseManagementExternalDbNodeArgs, DatabaseManagementExternalDbNodeState } from "./databaseManagementExternalDbNode";
export type DatabaseManagementExternalDbNode = import("./databaseManagementExternalDbNode").DatabaseManagementExternalDbNode;
export const DatabaseManagementExternalDbNode: typeof import("./databaseManagementExternalDbNode").DatabaseManagementExternalDbNode = null as any;
utilities.lazyLoad(exports, ["DatabaseManagementExternalDbNode"], () => require("./databaseManagementExternalDbNode"));

export { DatabaseManagementExternalDbSystemArgs, DatabaseManagementExternalDbSystemState } from "./databaseManagementExternalDbSystem";
export type DatabaseManagementExternalDbSystem = import("./databaseManagementExternalDbSystem").DatabaseManagementExternalDbSystem;
export const DatabaseManagementExternalDbSystem: typeof import("./databaseManagementExternalDbSystem").DatabaseManagementExternalDbSystem = null as any;
utilities.lazyLoad(exports, ["DatabaseManagementExternalDbSystem"], () => require("./databaseManagementExternalDbSystem"));

export { DatabaseManagementExternalDbSystemConnectorArgs, DatabaseManagementExternalDbSystemConnectorState } from "./databaseManagementExternalDbSystemConnector";
export type DatabaseManagementExternalDbSystemConnector = import("./databaseManagementExternalDbSystemConnector").DatabaseManagementExternalDbSystemConnector;
export const DatabaseManagementExternalDbSystemConnector: typeof import("./databaseManagementExternalDbSystemConnector").DatabaseManagementExternalDbSystemConnector = null as any;
utilities.lazyLoad(exports, ["DatabaseManagementExternalDbSystemConnector"], () => require("./databaseManagementExternalDbSystemConnector"));

export { DatabaseManagementExternalDbSystemDatabaseManagementsManagementArgs, DatabaseManagementExternalDbSystemDatabaseManagementsManagementState } from "./databaseManagementExternalDbSystemDatabaseManagementsManagement";
export type DatabaseManagementExternalDbSystemDatabaseManagementsManagement = import("./databaseManagementExternalDbSystemDatabaseManagementsManagement").DatabaseManagementExternalDbSystemDatabaseManagementsManagement;
export const DatabaseManagementExternalDbSystemDatabaseManagementsManagement: typeof import("./databaseManagementExternalDbSystemDatabaseManagementsManagement").DatabaseManagementExternalDbSystemDatabaseManagementsManagement = null as any;
utilities.lazyLoad(exports, ["DatabaseManagementExternalDbSystemDatabaseManagementsManagement"], () => require("./databaseManagementExternalDbSystemDatabaseManagementsManagement"));

export { DatabaseManagementExternalDbSystemDiscoveryArgs, DatabaseManagementExternalDbSystemDiscoveryState } from "./databaseManagementExternalDbSystemDiscovery";
export type DatabaseManagementExternalDbSystemDiscovery = import("./databaseManagementExternalDbSystemDiscovery").DatabaseManagementExternalDbSystemDiscovery;
export const DatabaseManagementExternalDbSystemDiscovery: typeof import("./databaseManagementExternalDbSystemDiscovery").DatabaseManagementExternalDbSystemDiscovery = null as any;
utilities.lazyLoad(exports, ["DatabaseManagementExternalDbSystemDiscovery"], () => require("./databaseManagementExternalDbSystemDiscovery"));

export { DatabaseManagementExternalDbSystemStackMonitoringsManagementArgs, DatabaseManagementExternalDbSystemStackMonitoringsManagementState } from "./databaseManagementExternalDbSystemStackMonitoringsManagement";
export type DatabaseManagementExternalDbSystemStackMonitoringsManagement = import("./databaseManagementExternalDbSystemStackMonitoringsManagement").DatabaseManagementExternalDbSystemStackMonitoringsManagement;
export const DatabaseManagementExternalDbSystemStackMonitoringsManagement: typeof import("./databaseManagementExternalDbSystemStackMonitoringsManagement").DatabaseManagementExternalDbSystemStackMonitoringsManagement = null as any;
utilities.lazyLoad(exports, ["DatabaseManagementExternalDbSystemStackMonitoringsManagement"], () => require("./databaseManagementExternalDbSystemStackMonitoringsManagement"));

export { DatabaseManagementExternalExadataInfrastructureArgs, DatabaseManagementExternalExadataInfrastructureState } from "./databaseManagementExternalExadataInfrastructure";
export type DatabaseManagementExternalExadataInfrastructure = import("./databaseManagementExternalExadataInfrastructure").DatabaseManagementExternalExadataInfrastructure;
export const DatabaseManagementExternalExadataInfrastructure: typeof import("./databaseManagementExternalExadataInfrastructure").DatabaseManagementExternalExadataInfrastructure = null as any;
utilities.lazyLoad(exports, ["DatabaseManagementExternalExadataInfrastructure"], () => require("./databaseManagementExternalExadataInfrastructure"));

export { DatabaseManagementExternalExadataInfrastructureExadataManagementArgs, DatabaseManagementExternalExadataInfrastructureExadataManagementState } from "./databaseManagementExternalExadataInfrastructureExadataManagement";
export type DatabaseManagementExternalExadataInfrastructureExadataManagement = import("./databaseManagementExternalExadataInfrastructureExadataManagement").DatabaseManagementExternalExadataInfrastructureExadataManagement;
export const DatabaseManagementExternalExadataInfrastructureExadataManagement: typeof import("./databaseManagementExternalExadataInfrastructureExadataManagement").DatabaseManagementExternalExadataInfrastructureExadataManagement = null as any;
utilities.lazyLoad(exports, ["DatabaseManagementExternalExadataInfrastructureExadataManagement"], () => require("./databaseManagementExternalExadataInfrastructureExadataManagement"));

export { DatabaseManagementExternalExadataStorageConnectorArgs, DatabaseManagementExternalExadataStorageConnectorState } from "./databaseManagementExternalExadataStorageConnector";
export type DatabaseManagementExternalExadataStorageConnector = import("./databaseManagementExternalExadataStorageConnector").DatabaseManagementExternalExadataStorageConnector;
export const DatabaseManagementExternalExadataStorageConnector: typeof import("./databaseManagementExternalExadataStorageConnector").DatabaseManagementExternalExadataStorageConnector = null as any;
utilities.lazyLoad(exports, ["DatabaseManagementExternalExadataStorageConnector"], () => require("./databaseManagementExternalExadataStorageConnector"));

export { DatabaseManagementExternalExadataStorageGridArgs, DatabaseManagementExternalExadataStorageGridState } from "./databaseManagementExternalExadataStorageGrid";
export type DatabaseManagementExternalExadataStorageGrid = import("./databaseManagementExternalExadataStorageGrid").DatabaseManagementExternalExadataStorageGrid;
export const DatabaseManagementExternalExadataStorageGrid: typeof import("./databaseManagementExternalExadataStorageGrid").DatabaseManagementExternalExadataStorageGrid = null as any;
utilities.lazyLoad(exports, ["DatabaseManagementExternalExadataStorageGrid"], () => require("./databaseManagementExternalExadataStorageGrid"));

export { DatabaseManagementExternalExadataStorageServerArgs, DatabaseManagementExternalExadataStorageServerState } from "./databaseManagementExternalExadataStorageServer";
export type DatabaseManagementExternalExadataStorageServer = import("./databaseManagementExternalExadataStorageServer").DatabaseManagementExternalExadataStorageServer;
export const DatabaseManagementExternalExadataStorageServer: typeof import("./databaseManagementExternalExadataStorageServer").DatabaseManagementExternalExadataStorageServer = null as any;
utilities.lazyLoad(exports, ["DatabaseManagementExternalExadataStorageServer"], () => require("./databaseManagementExternalExadataStorageServer"));

export { DatabaseManagementExternalListenerArgs, DatabaseManagementExternalListenerState } from "./databaseManagementExternalListener";
export type DatabaseManagementExternalListener = import("./databaseManagementExternalListener").DatabaseManagementExternalListener;
export const DatabaseManagementExternalListener: typeof import("./databaseManagementExternalListener").DatabaseManagementExternalListener = null as any;
utilities.lazyLoad(exports, ["DatabaseManagementExternalListener"], () => require("./databaseManagementExternalListener"));

export { DatabaseManagementExternalcontainerdatabaseExternalContainerDbmFeaturesManagementArgs, DatabaseManagementExternalcontainerdatabaseExternalContainerDbmFeaturesManagementState } from "./databaseManagementExternalcontainerdatabaseExternalContainerDbmFeaturesManagement";
export type DatabaseManagementExternalcontainerdatabaseExternalContainerDbmFeaturesManagement = import("./databaseManagementExternalcontainerdatabaseExternalContainerDbmFeaturesManagement").DatabaseManagementExternalcontainerdatabaseExternalContainerDbmFeaturesManagement;
export const DatabaseManagementExternalcontainerdatabaseExternalContainerDbmFeaturesManagement: typeof import("./databaseManagementExternalcontainerdatabaseExternalContainerDbmFeaturesManagement").DatabaseManagementExternalcontainerdatabaseExternalContainerDbmFeaturesManagement = null as any;
utilities.lazyLoad(exports, ["DatabaseManagementExternalcontainerdatabaseExternalContainerDbmFeaturesManagement"], () => require("./databaseManagementExternalcontainerdatabaseExternalContainerDbmFeaturesManagement"));

export { DatabaseManagementExternalnoncontainerdatabaseExternalNonContainerDbmFeaturesManagementArgs, DatabaseManagementExternalnoncontainerdatabaseExternalNonContainerDbmFeaturesManagementState } from "./databaseManagementExternalnoncontainerdatabaseExternalNonContainerDbmFeaturesManagement";
export type DatabaseManagementExternalnoncontainerdatabaseExternalNonContainerDbmFeaturesManagement = import("./databaseManagementExternalnoncontainerdatabaseExternalNonContainerDbmFeaturesManagement").DatabaseManagementExternalnoncontainerdatabaseExternalNonContainerDbmFeaturesManagement;
export const DatabaseManagementExternalnoncontainerdatabaseExternalNonContainerDbmFeaturesManagement: typeof import("./databaseManagementExternalnoncontainerdatabaseExternalNonContainerDbmFeaturesManagement").DatabaseManagementExternalnoncontainerdatabaseExternalNonContainerDbmFeaturesManagement = null as any;
utilities.lazyLoad(exports, ["DatabaseManagementExternalnoncontainerdatabaseExternalNonContainerDbmFeaturesManagement"], () => require("./databaseManagementExternalnoncontainerdatabaseExternalNonContainerDbmFeaturesManagement"));

export { DatabaseManagementExternalpluggabledatabaseExternalPluggableDbmFeaturesManagementArgs, DatabaseManagementExternalpluggabledatabaseExternalPluggableDbmFeaturesManagementState } from "./databaseManagementExternalpluggabledatabaseExternalPluggableDbmFeaturesManagement";
export type DatabaseManagementExternalpluggabledatabaseExternalPluggableDbmFeaturesManagement = import("./databaseManagementExternalpluggabledatabaseExternalPluggableDbmFeaturesManagement").DatabaseManagementExternalpluggabledatabaseExternalPluggableDbmFeaturesManagement;
export const DatabaseManagementExternalpluggabledatabaseExternalPluggableDbmFeaturesManagement: typeof import("./databaseManagementExternalpluggabledatabaseExternalPluggableDbmFeaturesManagement").DatabaseManagementExternalpluggabledatabaseExternalPluggableDbmFeaturesManagement = null as any;
utilities.lazyLoad(exports, ["DatabaseManagementExternalpluggabledatabaseExternalPluggableDbmFeaturesManagement"], () => require("./databaseManagementExternalpluggabledatabaseExternalPluggableDbmFeaturesManagement"));

export { DatabaseManagementManagedDatabaseArgs, DatabaseManagementManagedDatabaseState } from "./databaseManagementManagedDatabase";
export type DatabaseManagementManagedDatabase = import("./databaseManagementManagedDatabase").DatabaseManagementManagedDatabase;
export const DatabaseManagementManagedDatabase: typeof import("./databaseManagementManagedDatabase").DatabaseManagementManagedDatabase = null as any;
utilities.lazyLoad(exports, ["DatabaseManagementManagedDatabase"], () => require("./databaseManagementManagedDatabase"));

export { DatabaseManagementManagedDatabaseGroupArgs, DatabaseManagementManagedDatabaseGroupState } from "./databaseManagementManagedDatabaseGroup";
export type DatabaseManagementManagedDatabaseGroup = import("./databaseManagementManagedDatabaseGroup").DatabaseManagementManagedDatabaseGroup;
export const DatabaseManagementManagedDatabaseGroup: typeof import("./databaseManagementManagedDatabaseGroup").DatabaseManagementManagedDatabaseGroup = null as any;
utilities.lazyLoad(exports, ["DatabaseManagementManagedDatabaseGroup"], () => require("./databaseManagementManagedDatabaseGroup"));

export { DatabaseManagementManagedDatabasesChangeDatabaseParameterArgs, DatabaseManagementManagedDatabasesChangeDatabaseParameterState } from "./databaseManagementManagedDatabasesChangeDatabaseParameter";
export type DatabaseManagementManagedDatabasesChangeDatabaseParameter = import("./databaseManagementManagedDatabasesChangeDatabaseParameter").DatabaseManagementManagedDatabasesChangeDatabaseParameter;
export const DatabaseManagementManagedDatabasesChangeDatabaseParameter: typeof import("./databaseManagementManagedDatabasesChangeDatabaseParameter").DatabaseManagementManagedDatabasesChangeDatabaseParameter = null as any;
utilities.lazyLoad(exports, ["DatabaseManagementManagedDatabasesChangeDatabaseParameter"], () => require("./databaseManagementManagedDatabasesChangeDatabaseParameter"));

export { DatabaseManagementManagedDatabasesResetDatabaseParameterArgs, DatabaseManagementManagedDatabasesResetDatabaseParameterState } from "./databaseManagementManagedDatabasesResetDatabaseParameter";
export type DatabaseManagementManagedDatabasesResetDatabaseParameter = import("./databaseManagementManagedDatabasesResetDatabaseParameter").DatabaseManagementManagedDatabasesResetDatabaseParameter;
export const DatabaseManagementManagedDatabasesResetDatabaseParameter: typeof import("./databaseManagementManagedDatabasesResetDatabaseParameter").DatabaseManagementManagedDatabasesResetDatabaseParameter = null as any;
utilities.lazyLoad(exports, ["DatabaseManagementManagedDatabasesResetDatabaseParameter"], () => require("./databaseManagementManagedDatabasesResetDatabaseParameter"));

export { DatabaseManagementNamedCredentialArgs, DatabaseManagementNamedCredentialState } from "./databaseManagementNamedCredential";
export type DatabaseManagementNamedCredential = import("./databaseManagementNamedCredential").DatabaseManagementNamedCredential;
export const DatabaseManagementNamedCredential: typeof import("./databaseManagementNamedCredential").DatabaseManagementNamedCredential = null as any;
utilities.lazyLoad(exports, ["DatabaseManagementNamedCredential"], () => require("./databaseManagementNamedCredential"));

export { DatabaseManagementPluggabledatabasePluggableDatabaseDbmFeaturesManagementArgs, DatabaseManagementPluggabledatabasePluggableDatabaseDbmFeaturesManagementState } from "./databaseManagementPluggabledatabasePluggableDatabaseDbmFeaturesManagement";
export type DatabaseManagementPluggabledatabasePluggableDatabaseDbmFeaturesManagement = import("./databaseManagementPluggabledatabasePluggableDatabaseDbmFeaturesManagement").DatabaseManagementPluggabledatabasePluggableDatabaseDbmFeaturesManagement;
export const DatabaseManagementPluggabledatabasePluggableDatabaseDbmFeaturesManagement: typeof import("./databaseManagementPluggabledatabasePluggableDatabaseDbmFeaturesManagement").DatabaseManagementPluggabledatabasePluggableDatabaseDbmFeaturesManagement = null as any;
utilities.lazyLoad(exports, ["DatabaseManagementPluggabledatabasePluggableDatabaseDbmFeaturesManagement"], () => require("./databaseManagementPluggabledatabasePluggableDatabaseDbmFeaturesManagement"));

export { DatabaseMigrationArgs, DatabaseMigrationState } from "./databaseMigration";
export type DatabaseMigration = import("./databaseMigration").DatabaseMigration;
export const DatabaseMigration: typeof import("./databaseMigration").DatabaseMigration = null as any;
utilities.lazyLoad(exports, ["DatabaseMigration"], () => require("./databaseMigration"));

export { DatabaseMigrationConnectionArgs, DatabaseMigrationConnectionState } from "./databaseMigrationConnection";
export type DatabaseMigrationConnection = import("./databaseMigrationConnection").DatabaseMigrationConnection;
export const DatabaseMigrationConnection: typeof import("./databaseMigrationConnection").DatabaseMigrationConnection = null as any;
utilities.lazyLoad(exports, ["DatabaseMigrationConnection"], () => require("./databaseMigrationConnection"));

export { DatabaseMigrationJobArgs, DatabaseMigrationJobState } from "./databaseMigrationJob";
export type DatabaseMigrationJob = import("./databaseMigrationJob").DatabaseMigrationJob;
export const DatabaseMigrationJob: typeof import("./databaseMigrationJob").DatabaseMigrationJob = null as any;
utilities.lazyLoad(exports, ["DatabaseMigrationJob"], () => require("./databaseMigrationJob"));

export { DatabaseMigrationMigrationArgs, DatabaseMigrationMigrationState } from "./databaseMigrationMigration";
export type DatabaseMigrationMigration = import("./databaseMigrationMigration").DatabaseMigrationMigration;
export const DatabaseMigrationMigration: typeof import("./databaseMigrationMigration").DatabaseMigrationMigration = null as any;
utilities.lazyLoad(exports, ["DatabaseMigrationMigration"], () => require("./databaseMigrationMigration"));

export { DatabaseOneoffPatchArgs, DatabaseOneoffPatchState } from "./databaseOneoffPatch";
export type DatabaseOneoffPatch = import("./databaseOneoffPatch").DatabaseOneoffPatch;
export const DatabaseOneoffPatch: typeof import("./databaseOneoffPatch").DatabaseOneoffPatch = null as any;
utilities.lazyLoad(exports, ["DatabaseOneoffPatch"], () => require("./databaseOneoffPatch"));

export { DatabasePluggableDatabaseArgs, DatabasePluggableDatabaseState } from "./databasePluggableDatabase";
export type DatabasePluggableDatabase = import("./databasePluggableDatabase").DatabasePluggableDatabase;
export const DatabasePluggableDatabase: typeof import("./databasePluggableDatabase").DatabasePluggableDatabase = null as any;
utilities.lazyLoad(exports, ["DatabasePluggableDatabase"], () => require("./databasePluggableDatabase"));

export { DatabasePluggableDatabasePluggabledatabasemanagementsManagementArgs, DatabasePluggableDatabasePluggabledatabasemanagementsManagementState } from "./databasePluggableDatabasePluggabledatabasemanagementsManagement";
export type DatabasePluggableDatabasePluggabledatabasemanagementsManagement = import("./databasePluggableDatabasePluggabledatabasemanagementsManagement").DatabasePluggableDatabasePluggabledatabasemanagementsManagement;
export const DatabasePluggableDatabasePluggabledatabasemanagementsManagement: typeof import("./databasePluggableDatabasePluggabledatabasemanagementsManagement").DatabasePluggableDatabasePluggabledatabasemanagementsManagement = null as any;
utilities.lazyLoad(exports, ["DatabasePluggableDatabasePluggabledatabasemanagementsManagement"], () => require("./databasePluggableDatabasePluggabledatabasemanagementsManagement"));

export { DatabasePluggableDatabasesLocalCloneArgs, DatabasePluggableDatabasesLocalCloneState } from "./databasePluggableDatabasesLocalClone";
export type DatabasePluggableDatabasesLocalClone = import("./databasePluggableDatabasesLocalClone").DatabasePluggableDatabasesLocalClone;
export const DatabasePluggableDatabasesLocalClone: typeof import("./databasePluggableDatabasesLocalClone").DatabasePluggableDatabasesLocalClone = null as any;
utilities.lazyLoad(exports, ["DatabasePluggableDatabasesLocalClone"], () => require("./databasePluggableDatabasesLocalClone"));

export { DatabasePluggableDatabasesRemoteCloneArgs, DatabasePluggableDatabasesRemoteCloneState } from "./databasePluggableDatabasesRemoteClone";
export type DatabasePluggableDatabasesRemoteClone = import("./databasePluggableDatabasesRemoteClone").DatabasePluggableDatabasesRemoteClone;
export const DatabasePluggableDatabasesRemoteClone: typeof import("./databasePluggableDatabasesRemoteClone").DatabasePluggableDatabasesRemoteClone = null as any;
utilities.lazyLoad(exports, ["DatabasePluggableDatabasesRemoteClone"], () => require("./databasePluggableDatabasesRemoteClone"));

export { DatabaseToolsDatabaseToolsConnectionArgs, DatabaseToolsDatabaseToolsConnectionState } from "./databaseToolsDatabaseToolsConnection";
export type DatabaseToolsDatabaseToolsConnection = import("./databaseToolsDatabaseToolsConnection").DatabaseToolsDatabaseToolsConnection;
export const DatabaseToolsDatabaseToolsConnection: typeof import("./databaseToolsDatabaseToolsConnection").DatabaseToolsDatabaseToolsConnection = null as any;
utilities.lazyLoad(exports, ["DatabaseToolsDatabaseToolsConnection"], () => require("./databaseToolsDatabaseToolsConnection"));

export { DatabaseToolsDatabaseToolsPrivateEndpointArgs, DatabaseToolsDatabaseToolsPrivateEndpointState } from "./databaseToolsDatabaseToolsPrivateEndpoint";
export type DatabaseToolsDatabaseToolsPrivateEndpoint = import("./databaseToolsDatabaseToolsPrivateEndpoint").DatabaseToolsDatabaseToolsPrivateEndpoint;
export const DatabaseToolsDatabaseToolsPrivateEndpoint: typeof import("./databaseToolsDatabaseToolsPrivateEndpoint").DatabaseToolsDatabaseToolsPrivateEndpoint = null as any;
utilities.lazyLoad(exports, ["DatabaseToolsDatabaseToolsPrivateEndpoint"], () => require("./databaseToolsDatabaseToolsPrivateEndpoint"));

export { DatabaseVmClusterArgs, DatabaseVmClusterState } from "./databaseVmCluster";
export type DatabaseVmCluster = import("./databaseVmCluster").DatabaseVmCluster;
export const DatabaseVmCluster: typeof import("./databaseVmCluster").DatabaseVmCluster = null as any;
utilities.lazyLoad(exports, ["DatabaseVmCluster"], () => require("./databaseVmCluster"));

export { DatabaseVmClusterAddVirtualMachineArgs, DatabaseVmClusterAddVirtualMachineState } from "./databaseVmClusterAddVirtualMachine";
export type DatabaseVmClusterAddVirtualMachine = import("./databaseVmClusterAddVirtualMachine").DatabaseVmClusterAddVirtualMachine;
export const DatabaseVmClusterAddVirtualMachine: typeof import("./databaseVmClusterAddVirtualMachine").DatabaseVmClusterAddVirtualMachine = null as any;
utilities.lazyLoad(exports, ["DatabaseVmClusterAddVirtualMachine"], () => require("./databaseVmClusterAddVirtualMachine"));

export { DatabaseVmClusterNetworkArgs, DatabaseVmClusterNetworkState } from "./databaseVmClusterNetwork";
export type DatabaseVmClusterNetwork = import("./databaseVmClusterNetwork").DatabaseVmClusterNetwork;
export const DatabaseVmClusterNetwork: typeof import("./databaseVmClusterNetwork").DatabaseVmClusterNetwork = null as any;
utilities.lazyLoad(exports, ["DatabaseVmClusterNetwork"], () => require("./databaseVmClusterNetwork"));

export { DatabaseVmClusterRemoveVirtualMachineArgs, DatabaseVmClusterRemoveVirtualMachineState } from "./databaseVmClusterRemoveVirtualMachine";
export type DatabaseVmClusterRemoveVirtualMachine = import("./databaseVmClusterRemoveVirtualMachine").DatabaseVmClusterRemoveVirtualMachine;
export const DatabaseVmClusterRemoveVirtualMachine: typeof import("./databaseVmClusterRemoveVirtualMachine").DatabaseVmClusterRemoveVirtualMachine = null as any;
utilities.lazyLoad(exports, ["DatabaseVmClusterRemoveVirtualMachine"], () => require("./databaseVmClusterRemoveVirtualMachine"));

export { DatacatalogCatalogArgs, DatacatalogCatalogState } from "./datacatalogCatalog";
export type DatacatalogCatalog = import("./datacatalogCatalog").DatacatalogCatalog;
export const DatacatalogCatalog: typeof import("./datacatalogCatalog").DatacatalogCatalog = null as any;
utilities.lazyLoad(exports, ["DatacatalogCatalog"], () => require("./datacatalogCatalog"));

export { DatacatalogCatalogPrivateEndpointArgs, DatacatalogCatalogPrivateEndpointState } from "./datacatalogCatalogPrivateEndpoint";
export type DatacatalogCatalogPrivateEndpoint = import("./datacatalogCatalogPrivateEndpoint").DatacatalogCatalogPrivateEndpoint;
export const DatacatalogCatalogPrivateEndpoint: typeof import("./datacatalogCatalogPrivateEndpoint").DatacatalogCatalogPrivateEndpoint = null as any;
utilities.lazyLoad(exports, ["DatacatalogCatalogPrivateEndpoint"], () => require("./datacatalogCatalogPrivateEndpoint"));

export { DatacatalogConnectionArgs, DatacatalogConnectionState } from "./datacatalogConnection";
export type DatacatalogConnection = import("./datacatalogConnection").DatacatalogConnection;
export const DatacatalogConnection: typeof import("./datacatalogConnection").DatacatalogConnection = null as any;
utilities.lazyLoad(exports, ["DatacatalogConnection"], () => require("./datacatalogConnection"));

export { DatacatalogDataAssetArgs, DatacatalogDataAssetState } from "./datacatalogDataAsset";
export type DatacatalogDataAsset = import("./datacatalogDataAsset").DatacatalogDataAsset;
export const DatacatalogDataAsset: typeof import("./datacatalogDataAsset").DatacatalogDataAsset = null as any;
utilities.lazyLoad(exports, ["DatacatalogDataAsset"], () => require("./datacatalogDataAsset"));

export { DatacatalogMetastoreArgs, DatacatalogMetastoreState } from "./datacatalogMetastore";
export type DatacatalogMetastore = import("./datacatalogMetastore").DatacatalogMetastore;
export const DatacatalogMetastore: typeof import("./datacatalogMetastore").DatacatalogMetastore = null as any;
utilities.lazyLoad(exports, ["DatacatalogMetastore"], () => require("./datacatalogMetastore"));

export { DataflowApplicationArgs, DataflowApplicationState } from "./dataflowApplication";
export type DataflowApplication = import("./dataflowApplication").DataflowApplication;
export const DataflowApplication: typeof import("./dataflowApplication").DataflowApplication = null as any;
utilities.lazyLoad(exports, ["DataflowApplication"], () => require("./dataflowApplication"));

export { DataflowInvokeRunArgs, DataflowInvokeRunState } from "./dataflowInvokeRun";
export type DataflowInvokeRun = import("./dataflowInvokeRun").DataflowInvokeRun;
export const DataflowInvokeRun: typeof import("./dataflowInvokeRun").DataflowInvokeRun = null as any;
utilities.lazyLoad(exports, ["DataflowInvokeRun"], () => require("./dataflowInvokeRun"));

export { DataflowPoolArgs, DataflowPoolState } from "./dataflowPool";
export type DataflowPool = import("./dataflowPool").DataflowPool;
export const DataflowPool: typeof import("./dataflowPool").DataflowPool = null as any;
utilities.lazyLoad(exports, ["DataflowPool"], () => require("./dataflowPool"));

export { DataflowPrivateEndpointArgs, DataflowPrivateEndpointState } from "./dataflowPrivateEndpoint";
export type DataflowPrivateEndpoint = import("./dataflowPrivateEndpoint").DataflowPrivateEndpoint;
export const DataflowPrivateEndpoint: typeof import("./dataflowPrivateEndpoint").DataflowPrivateEndpoint = null as any;
utilities.lazyLoad(exports, ["DataflowPrivateEndpoint"], () => require("./dataflowPrivateEndpoint"));

export { DataflowRunStatementArgs, DataflowRunStatementState } from "./dataflowRunStatement";
export type DataflowRunStatement = import("./dataflowRunStatement").DataflowRunStatement;
export const DataflowRunStatement: typeof import("./dataflowRunStatement").DataflowRunStatement = null as any;
utilities.lazyLoad(exports, ["DataflowRunStatement"], () => require("./dataflowRunStatement"));

export { DataflowSqlEndpointArgs, DataflowSqlEndpointState } from "./dataflowSqlEndpoint";
export type DataflowSqlEndpoint = import("./dataflowSqlEndpoint").DataflowSqlEndpoint;
export const DataflowSqlEndpoint: typeof import("./dataflowSqlEndpoint").DataflowSqlEndpoint = null as any;
utilities.lazyLoad(exports, ["DataflowSqlEndpoint"], () => require("./dataflowSqlEndpoint"));

export { DataintegrationWorkspaceArgs, DataintegrationWorkspaceState } from "./dataintegrationWorkspace";
export type DataintegrationWorkspace = import("./dataintegrationWorkspace").DataintegrationWorkspace;
export const DataintegrationWorkspace: typeof import("./dataintegrationWorkspace").DataintegrationWorkspace = null as any;
utilities.lazyLoad(exports, ["DataintegrationWorkspace"], () => require("./dataintegrationWorkspace"));

export { DataintegrationWorkspaceApplicationArgs, DataintegrationWorkspaceApplicationState } from "./dataintegrationWorkspaceApplication";
export type DataintegrationWorkspaceApplication = import("./dataintegrationWorkspaceApplication").DataintegrationWorkspaceApplication;
export const DataintegrationWorkspaceApplication: typeof import("./dataintegrationWorkspaceApplication").DataintegrationWorkspaceApplication = null as any;
utilities.lazyLoad(exports, ["DataintegrationWorkspaceApplication"], () => require("./dataintegrationWorkspaceApplication"));

export { DataintegrationWorkspaceApplicationPatchArgs, DataintegrationWorkspaceApplicationPatchState } from "./dataintegrationWorkspaceApplicationPatch";
export type DataintegrationWorkspaceApplicationPatch = import("./dataintegrationWorkspaceApplicationPatch").DataintegrationWorkspaceApplicationPatch;
export const DataintegrationWorkspaceApplicationPatch: typeof import("./dataintegrationWorkspaceApplicationPatch").DataintegrationWorkspaceApplicationPatch = null as any;
utilities.lazyLoad(exports, ["DataintegrationWorkspaceApplicationPatch"], () => require("./dataintegrationWorkspaceApplicationPatch"));

export { DataintegrationWorkspaceApplicationScheduleArgs, DataintegrationWorkspaceApplicationScheduleState } from "./dataintegrationWorkspaceApplicationSchedule";
export type DataintegrationWorkspaceApplicationSchedule = import("./dataintegrationWorkspaceApplicationSchedule").DataintegrationWorkspaceApplicationSchedule;
export const DataintegrationWorkspaceApplicationSchedule: typeof import("./dataintegrationWorkspaceApplicationSchedule").DataintegrationWorkspaceApplicationSchedule = null as any;
utilities.lazyLoad(exports, ["DataintegrationWorkspaceApplicationSchedule"], () => require("./dataintegrationWorkspaceApplicationSchedule"));

export { DataintegrationWorkspaceApplicationTaskScheduleArgs, DataintegrationWorkspaceApplicationTaskScheduleState } from "./dataintegrationWorkspaceApplicationTaskSchedule";
export type DataintegrationWorkspaceApplicationTaskSchedule = import("./dataintegrationWorkspaceApplicationTaskSchedule").DataintegrationWorkspaceApplicationTaskSchedule;
export const DataintegrationWorkspaceApplicationTaskSchedule: typeof import("./dataintegrationWorkspaceApplicationTaskSchedule").DataintegrationWorkspaceApplicationTaskSchedule = null as any;
utilities.lazyLoad(exports, ["DataintegrationWorkspaceApplicationTaskSchedule"], () => require("./dataintegrationWorkspaceApplicationTaskSchedule"));

export { DataintegrationWorkspaceExportRequestArgs, DataintegrationWorkspaceExportRequestState } from "./dataintegrationWorkspaceExportRequest";
export type DataintegrationWorkspaceExportRequest = import("./dataintegrationWorkspaceExportRequest").DataintegrationWorkspaceExportRequest;
export const DataintegrationWorkspaceExportRequest: typeof import("./dataintegrationWorkspaceExportRequest").DataintegrationWorkspaceExportRequest = null as any;
utilities.lazyLoad(exports, ["DataintegrationWorkspaceExportRequest"], () => require("./dataintegrationWorkspaceExportRequest"));

export { DataintegrationWorkspaceFolderArgs, DataintegrationWorkspaceFolderState } from "./dataintegrationWorkspaceFolder";
export type DataintegrationWorkspaceFolder = import("./dataintegrationWorkspaceFolder").DataintegrationWorkspaceFolder;
export const DataintegrationWorkspaceFolder: typeof import("./dataintegrationWorkspaceFolder").DataintegrationWorkspaceFolder = null as any;
utilities.lazyLoad(exports, ["DataintegrationWorkspaceFolder"], () => require("./dataintegrationWorkspaceFolder"));

export { DataintegrationWorkspaceImportRequestArgs, DataintegrationWorkspaceImportRequestState } from "./dataintegrationWorkspaceImportRequest";
export type DataintegrationWorkspaceImportRequest = import("./dataintegrationWorkspaceImportRequest").DataintegrationWorkspaceImportRequest;
export const DataintegrationWorkspaceImportRequest: typeof import("./dataintegrationWorkspaceImportRequest").DataintegrationWorkspaceImportRequest = null as any;
utilities.lazyLoad(exports, ["DataintegrationWorkspaceImportRequest"], () => require("./dataintegrationWorkspaceImportRequest"));

export { DataintegrationWorkspaceProjectArgs, DataintegrationWorkspaceProjectState } from "./dataintegrationWorkspaceProject";
export type DataintegrationWorkspaceProject = import("./dataintegrationWorkspaceProject").DataintegrationWorkspaceProject;
export const DataintegrationWorkspaceProject: typeof import("./dataintegrationWorkspaceProject").DataintegrationWorkspaceProject = null as any;
utilities.lazyLoad(exports, ["DataintegrationWorkspaceProject"], () => require("./dataintegrationWorkspaceProject"));

export { DataintegrationWorkspaceTaskArgs, DataintegrationWorkspaceTaskState } from "./dataintegrationWorkspaceTask";
export type DataintegrationWorkspaceTask = import("./dataintegrationWorkspaceTask").DataintegrationWorkspaceTask;
export const DataintegrationWorkspaceTask: typeof import("./dataintegrationWorkspaceTask").DataintegrationWorkspaceTask = null as any;
utilities.lazyLoad(exports, ["DataintegrationWorkspaceTask"], () => require("./dataintegrationWorkspaceTask"));

export { DatascienceJobArgs, DatascienceJobState } from "./datascienceJob";
export type DatascienceJob = import("./datascienceJob").DatascienceJob;
export const DatascienceJob: typeof import("./datascienceJob").DatascienceJob = null as any;
utilities.lazyLoad(exports, ["DatascienceJob"], () => require("./datascienceJob"));

export { DatascienceJobRunArgs, DatascienceJobRunState } from "./datascienceJobRun";
export type DatascienceJobRun = import("./datascienceJobRun").DatascienceJobRun;
export const DatascienceJobRun: typeof import("./datascienceJobRun").DatascienceJobRun = null as any;
utilities.lazyLoad(exports, ["DatascienceJobRun"], () => require("./datascienceJobRun"));

export { DatascienceModelArgs, DatascienceModelState } from "./datascienceModel";
export type DatascienceModel = import("./datascienceModel").DatascienceModel;
export const DatascienceModel: typeof import("./datascienceModel").DatascienceModel = null as any;
utilities.lazyLoad(exports, ["DatascienceModel"], () => require("./datascienceModel"));

export { DatascienceModelArtifactExportArgs, DatascienceModelArtifactExportState } from "./datascienceModelArtifactExport";
export type DatascienceModelArtifactExport = import("./datascienceModelArtifactExport").DatascienceModelArtifactExport;
export const DatascienceModelArtifactExport: typeof import("./datascienceModelArtifactExport").DatascienceModelArtifactExport = null as any;
utilities.lazyLoad(exports, ["DatascienceModelArtifactExport"], () => require("./datascienceModelArtifactExport"));

export { DatascienceModelArtifactImportArgs, DatascienceModelArtifactImportState } from "./datascienceModelArtifactImport";
export type DatascienceModelArtifactImport = import("./datascienceModelArtifactImport").DatascienceModelArtifactImport;
export const DatascienceModelArtifactImport: typeof import("./datascienceModelArtifactImport").DatascienceModelArtifactImport = null as any;
utilities.lazyLoad(exports, ["DatascienceModelArtifactImport"], () => require("./datascienceModelArtifactImport"));

export { DatascienceModelDeploymentArgs, DatascienceModelDeploymentState } from "./datascienceModelDeployment";
export type DatascienceModelDeployment = import("./datascienceModelDeployment").DatascienceModelDeployment;
export const DatascienceModelDeployment: typeof import("./datascienceModelDeployment").DatascienceModelDeployment = null as any;
utilities.lazyLoad(exports, ["DatascienceModelDeployment"], () => require("./datascienceModelDeployment"));

export { DatascienceModelProvenanceArgs, DatascienceModelProvenanceState } from "./datascienceModelProvenance";
export type DatascienceModelProvenance = import("./datascienceModelProvenance").DatascienceModelProvenance;
export const DatascienceModelProvenance: typeof import("./datascienceModelProvenance").DatascienceModelProvenance = null as any;
utilities.lazyLoad(exports, ["DatascienceModelProvenance"], () => require("./datascienceModelProvenance"));

export { DatascienceModelVersionSetArgs, DatascienceModelVersionSetState } from "./datascienceModelVersionSet";
export type DatascienceModelVersionSet = import("./datascienceModelVersionSet").DatascienceModelVersionSet;
export const DatascienceModelVersionSet: typeof import("./datascienceModelVersionSet").DatascienceModelVersionSet = null as any;
utilities.lazyLoad(exports, ["DatascienceModelVersionSet"], () => require("./datascienceModelVersionSet"));

export { DatascienceNotebookSessionArgs, DatascienceNotebookSessionState } from "./datascienceNotebookSession";
export type DatascienceNotebookSession = import("./datascienceNotebookSession").DatascienceNotebookSession;
export const DatascienceNotebookSession: typeof import("./datascienceNotebookSession").DatascienceNotebookSession = null as any;
utilities.lazyLoad(exports, ["DatascienceNotebookSession"], () => require("./datascienceNotebookSession"));

export { DatasciencePipelineArgs, DatasciencePipelineState } from "./datasciencePipeline";
export type DatasciencePipeline = import("./datasciencePipeline").DatasciencePipeline;
export const DatasciencePipeline: typeof import("./datasciencePipeline").DatasciencePipeline = null as any;
utilities.lazyLoad(exports, ["DatasciencePipeline"], () => require("./datasciencePipeline"));

export { DatasciencePipelineRunArgs, DatasciencePipelineRunState } from "./datasciencePipelineRun";
export type DatasciencePipelineRun = import("./datasciencePipelineRun").DatasciencePipelineRun;
export const DatasciencePipelineRun: typeof import("./datasciencePipelineRun").DatasciencePipelineRun = null as any;
utilities.lazyLoad(exports, ["DatasciencePipelineRun"], () => require("./datasciencePipelineRun"));

export { DatasciencePrivateEndpointArgs, DatasciencePrivateEndpointState } from "./datasciencePrivateEndpoint";
export type DatasciencePrivateEndpoint = import("./datasciencePrivateEndpoint").DatasciencePrivateEndpoint;
export const DatasciencePrivateEndpoint: typeof import("./datasciencePrivateEndpoint").DatasciencePrivateEndpoint = null as any;
utilities.lazyLoad(exports, ["DatasciencePrivateEndpoint"], () => require("./datasciencePrivateEndpoint"));

export { DatascienceProjectArgs, DatascienceProjectState } from "./datascienceProject";
export type DatascienceProject = import("./datascienceProject").DatascienceProject;
export const DatascienceProject: typeof import("./datascienceProject").DatascienceProject = null as any;
utilities.lazyLoad(exports, ["DatascienceProject"], () => require("./datascienceProject"));

export { DelegateAccessControlDelegationControlArgs, DelegateAccessControlDelegationControlState } from "./delegateAccessControlDelegationControl";
export type DelegateAccessControlDelegationControl = import("./delegateAccessControlDelegationControl").DelegateAccessControlDelegationControl;
export const DelegateAccessControlDelegationControl: typeof import("./delegateAccessControlDelegationControl").DelegateAccessControlDelegationControl = null as any;
utilities.lazyLoad(exports, ["DelegateAccessControlDelegationControl"], () => require("./delegateAccessControlDelegationControl"));

export { DelegateAccessControlDelegationSubscriptionArgs, DelegateAccessControlDelegationSubscriptionState } from "./delegateAccessControlDelegationSubscription";
export type DelegateAccessControlDelegationSubscription = import("./delegateAccessControlDelegationSubscription").DelegateAccessControlDelegationSubscription;
export const DelegateAccessControlDelegationSubscription: typeof import("./delegateAccessControlDelegationSubscription").DelegateAccessControlDelegationSubscription = null as any;
utilities.lazyLoad(exports, ["DelegateAccessControlDelegationSubscription"], () => require("./delegateAccessControlDelegationSubscription"));

export { DemandSignalOccDemandSignalArgs, DemandSignalOccDemandSignalState } from "./demandSignalOccDemandSignal";
export type DemandSignalOccDemandSignal = import("./demandSignalOccDemandSignal").DemandSignalOccDemandSignal;
export const DemandSignalOccDemandSignal: typeof import("./demandSignalOccDemandSignal").DemandSignalOccDemandSignal = null as any;
utilities.lazyLoad(exports, ["DemandSignalOccDemandSignal"], () => require("./demandSignalOccDemandSignal"));

export { DesktopsDesktopPoolArgs, DesktopsDesktopPoolState } from "./desktopsDesktopPool";
export type DesktopsDesktopPool = import("./desktopsDesktopPool").DesktopsDesktopPool;
export const DesktopsDesktopPool: typeof import("./desktopsDesktopPool").DesktopsDesktopPool = null as any;
utilities.lazyLoad(exports, ["DesktopsDesktopPool"], () => require("./desktopsDesktopPool"));

export { DevopsBuildPipelineArgs, DevopsBuildPipelineState } from "./devopsBuildPipeline";
export type DevopsBuildPipeline = import("./devopsBuildPipeline").DevopsBuildPipeline;
export const DevopsBuildPipeline: typeof import("./devopsBuildPipeline").DevopsBuildPipeline = null as any;
utilities.lazyLoad(exports, ["DevopsBuildPipeline"], () => require("./devopsBuildPipeline"));

export { DevopsBuildPipelineStageArgs, DevopsBuildPipelineStageState } from "./devopsBuildPipelineStage";
export type DevopsBuildPipelineStage = import("./devopsBuildPipelineStage").DevopsBuildPipelineStage;
export const DevopsBuildPipelineStage: typeof import("./devopsBuildPipelineStage").DevopsBuildPipelineStage = null as any;
utilities.lazyLoad(exports, ["DevopsBuildPipelineStage"], () => require("./devopsBuildPipelineStage"));

export { DevopsBuildRunArgs, DevopsBuildRunState } from "./devopsBuildRun";
export type DevopsBuildRun = import("./devopsBuildRun").DevopsBuildRun;
export const DevopsBuildRun: typeof import("./devopsBuildRun").DevopsBuildRun = null as any;
utilities.lazyLoad(exports, ["DevopsBuildRun"], () => require("./devopsBuildRun"));

export { DevopsConnectionArgs, DevopsConnectionState } from "./devopsConnection";
export type DevopsConnection = import("./devopsConnection").DevopsConnection;
export const DevopsConnection: typeof import("./devopsConnection").DevopsConnection = null as any;
utilities.lazyLoad(exports, ["DevopsConnection"], () => require("./devopsConnection"));

export { DevopsDeployArtifactArgs, DevopsDeployArtifactState } from "./devopsDeployArtifact";
export type DevopsDeployArtifact = import("./devopsDeployArtifact").DevopsDeployArtifact;
export const DevopsDeployArtifact: typeof import("./devopsDeployArtifact").DevopsDeployArtifact = null as any;
utilities.lazyLoad(exports, ["DevopsDeployArtifact"], () => require("./devopsDeployArtifact"));

export { DevopsDeployEnvironmentArgs, DevopsDeployEnvironmentState } from "./devopsDeployEnvironment";
export type DevopsDeployEnvironment = import("./devopsDeployEnvironment").DevopsDeployEnvironment;
export const DevopsDeployEnvironment: typeof import("./devopsDeployEnvironment").DevopsDeployEnvironment = null as any;
utilities.lazyLoad(exports, ["DevopsDeployEnvironment"], () => require("./devopsDeployEnvironment"));

export { DevopsDeployPipelineArgs, DevopsDeployPipelineState } from "./devopsDeployPipeline";
export type DevopsDeployPipeline = import("./devopsDeployPipeline").DevopsDeployPipeline;
export const DevopsDeployPipeline: typeof import("./devopsDeployPipeline").DevopsDeployPipeline = null as any;
utilities.lazyLoad(exports, ["DevopsDeployPipeline"], () => require("./devopsDeployPipeline"));

export { DevopsDeployStageArgs, DevopsDeployStageState } from "./devopsDeployStage";
export type DevopsDeployStage = import("./devopsDeployStage").DevopsDeployStage;
export const DevopsDeployStage: typeof import("./devopsDeployStage").DevopsDeployStage = null as any;
utilities.lazyLoad(exports, ["DevopsDeployStage"], () => require("./devopsDeployStage"));

export { DevopsDeploymentArgs, DevopsDeploymentState } from "./devopsDeployment";
export type DevopsDeployment = import("./devopsDeployment").DevopsDeployment;
export const DevopsDeployment: typeof import("./devopsDeployment").DevopsDeployment = null as any;
utilities.lazyLoad(exports, ["DevopsDeployment"], () => require("./devopsDeployment"));

export { DevopsProjectArgs, DevopsProjectState } from "./devopsProject";
export type DevopsProject = import("./devopsProject").DevopsProject;
export const DevopsProject: typeof import("./devopsProject").DevopsProject = null as any;
utilities.lazyLoad(exports, ["DevopsProject"], () => require("./devopsProject"));

export { DevopsProjectRepositorySettingArgs, DevopsProjectRepositorySettingState } from "./devopsProjectRepositorySetting";
export type DevopsProjectRepositorySetting = import("./devopsProjectRepositorySetting").DevopsProjectRepositorySetting;
export const DevopsProjectRepositorySetting: typeof import("./devopsProjectRepositorySetting").DevopsProjectRepositorySetting = null as any;
utilities.lazyLoad(exports, ["DevopsProjectRepositorySetting"], () => require("./devopsProjectRepositorySetting"));

export { DevopsRepositoryArgs, DevopsRepositoryState } from "./devopsRepository";
export type DevopsRepository = import("./devopsRepository").DevopsRepository;
export const DevopsRepository: typeof import("./devopsRepository").DevopsRepository = null as any;
utilities.lazyLoad(exports, ["DevopsRepository"], () => require("./devopsRepository"));

export { DevopsRepositoryMirrorArgs, DevopsRepositoryMirrorState } from "./devopsRepositoryMirror";
export type DevopsRepositoryMirror = import("./devopsRepositoryMirror").DevopsRepositoryMirror;
export const DevopsRepositoryMirror: typeof import("./devopsRepositoryMirror").DevopsRepositoryMirror = null as any;
utilities.lazyLoad(exports, ["DevopsRepositoryMirror"], () => require("./devopsRepositoryMirror"));

export { DevopsRepositoryProtectedBranchManagementArgs, DevopsRepositoryProtectedBranchManagementState } from "./devopsRepositoryProtectedBranchManagement";
export type DevopsRepositoryProtectedBranchManagement = import("./devopsRepositoryProtectedBranchManagement").DevopsRepositoryProtectedBranchManagement;
export const DevopsRepositoryProtectedBranchManagement: typeof import("./devopsRepositoryProtectedBranchManagement").DevopsRepositoryProtectedBranchManagement = null as any;
utilities.lazyLoad(exports, ["DevopsRepositoryProtectedBranchManagement"], () => require("./devopsRepositoryProtectedBranchManagement"));

export { DevopsRepositoryRefArgs, DevopsRepositoryRefState } from "./devopsRepositoryRef";
export type DevopsRepositoryRef = import("./devopsRepositoryRef").DevopsRepositoryRef;
export const DevopsRepositoryRef: typeof import("./devopsRepositoryRef").DevopsRepositoryRef = null as any;
utilities.lazyLoad(exports, ["DevopsRepositoryRef"], () => require("./devopsRepositoryRef"));

export { DevopsRepositorySettingArgs, DevopsRepositorySettingState } from "./devopsRepositorySetting";
export type DevopsRepositorySetting = import("./devopsRepositorySetting").DevopsRepositorySetting;
export const DevopsRepositorySetting: typeof import("./devopsRepositorySetting").DevopsRepositorySetting = null as any;
utilities.lazyLoad(exports, ["DevopsRepositorySetting"], () => require("./devopsRepositorySetting"));

export { DevopsTriggerArgs, DevopsTriggerState } from "./devopsTrigger";
export type DevopsTrigger = import("./devopsTrigger").DevopsTrigger;
export const DevopsTrigger: typeof import("./devopsTrigger").DevopsTrigger = null as any;
utilities.lazyLoad(exports, ["DevopsTrigger"], () => require("./devopsTrigger"));

export { DisasterRecoveryDrPlanArgs, DisasterRecoveryDrPlanState } from "./disasterRecoveryDrPlan";
export type DisasterRecoveryDrPlan = import("./disasterRecoveryDrPlan").DisasterRecoveryDrPlan;
export const DisasterRecoveryDrPlan: typeof import("./disasterRecoveryDrPlan").DisasterRecoveryDrPlan = null as any;
utilities.lazyLoad(exports, ["DisasterRecoveryDrPlan"], () => require("./disasterRecoveryDrPlan"));

export { DisasterRecoveryDrPlanExecutionArgs, DisasterRecoveryDrPlanExecutionState } from "./disasterRecoveryDrPlanExecution";
export type DisasterRecoveryDrPlanExecution = import("./disasterRecoveryDrPlanExecution").DisasterRecoveryDrPlanExecution;
export const DisasterRecoveryDrPlanExecution: typeof import("./disasterRecoveryDrPlanExecution").DisasterRecoveryDrPlanExecution = null as any;
utilities.lazyLoad(exports, ["DisasterRecoveryDrPlanExecution"], () => require("./disasterRecoveryDrPlanExecution"));

export { DisasterRecoveryDrProtectionGroupArgs, DisasterRecoveryDrProtectionGroupState } from "./disasterRecoveryDrProtectionGroup";
export type DisasterRecoveryDrProtectionGroup = import("./disasterRecoveryDrProtectionGroup").DisasterRecoveryDrProtectionGroup;
export const DisasterRecoveryDrProtectionGroup: typeof import("./disasterRecoveryDrProtectionGroup").DisasterRecoveryDrProtectionGroup = null as any;
utilities.lazyLoad(exports, ["DisasterRecoveryDrProtectionGroup"], () => require("./disasterRecoveryDrProtectionGroup"));

export { DnsActionCreateZoneFromZoneFileArgs, DnsActionCreateZoneFromZoneFileState } from "./dnsActionCreateZoneFromZoneFile";
export type DnsActionCreateZoneFromZoneFile = import("./dnsActionCreateZoneFromZoneFile").DnsActionCreateZoneFromZoneFile;
export const DnsActionCreateZoneFromZoneFile: typeof import("./dnsActionCreateZoneFromZoneFile").DnsActionCreateZoneFromZoneFile = null as any;
utilities.lazyLoad(exports, ["DnsActionCreateZoneFromZoneFile"], () => require("./dnsActionCreateZoneFromZoneFile"));

export { DnsRecordArgs, DnsRecordState } from "./dnsRecord";
export type DnsRecord = import("./dnsRecord").DnsRecord;
export const DnsRecord: typeof import("./dnsRecord").DnsRecord = null as any;
utilities.lazyLoad(exports, ["DnsRecord"], () => require("./dnsRecord"));

export { DnsResolverArgs, DnsResolverState } from "./dnsResolver";
export type DnsResolver = import("./dnsResolver").DnsResolver;
export const DnsResolver: typeof import("./dnsResolver").DnsResolver = null as any;
utilities.lazyLoad(exports, ["DnsResolver"], () => require("./dnsResolver"));

export { DnsResolverEndpointArgs, DnsResolverEndpointState } from "./dnsResolverEndpoint";
export type DnsResolverEndpoint = import("./dnsResolverEndpoint").DnsResolverEndpoint;
export const DnsResolverEndpoint: typeof import("./dnsResolverEndpoint").DnsResolverEndpoint = null as any;
utilities.lazyLoad(exports, ["DnsResolverEndpoint"], () => require("./dnsResolverEndpoint"));

export { DnsRrsetArgs, DnsRrsetState } from "./dnsRrset";
export type DnsRrset = import("./dnsRrset").DnsRrset;
export const DnsRrset: typeof import("./dnsRrset").DnsRrset = null as any;
utilities.lazyLoad(exports, ["DnsRrset"], () => require("./dnsRrset"));

export { DnsSteeringPolicyArgs, DnsSteeringPolicyState } from "./dnsSteeringPolicy";
export type DnsSteeringPolicy = import("./dnsSteeringPolicy").DnsSteeringPolicy;
export const DnsSteeringPolicy: typeof import("./dnsSteeringPolicy").DnsSteeringPolicy = null as any;
utilities.lazyLoad(exports, ["DnsSteeringPolicy"], () => require("./dnsSteeringPolicy"));

export { DnsSteeringPolicyAttachmentArgs, DnsSteeringPolicyAttachmentState } from "./dnsSteeringPolicyAttachment";
export type DnsSteeringPolicyAttachment = import("./dnsSteeringPolicyAttachment").DnsSteeringPolicyAttachment;
export const DnsSteeringPolicyAttachment: typeof import("./dnsSteeringPolicyAttachment").DnsSteeringPolicyAttachment = null as any;
utilities.lazyLoad(exports, ["DnsSteeringPolicyAttachment"], () => require("./dnsSteeringPolicyAttachment"));

export { DnsTsigKeyArgs, DnsTsigKeyState } from "./dnsTsigKey";
export type DnsTsigKey = import("./dnsTsigKey").DnsTsigKey;
export const DnsTsigKey: typeof import("./dnsTsigKey").DnsTsigKey = null as any;
utilities.lazyLoad(exports, ["DnsTsigKey"], () => require("./dnsTsigKey"));

export { DnsViewArgs, DnsViewState } from "./dnsView";
export type DnsView = import("./dnsView").DnsView;
export const DnsView: typeof import("./dnsView").DnsView = null as any;
utilities.lazyLoad(exports, ["DnsView"], () => require("./dnsView"));

export { DnsZoneArgs, DnsZoneState } from "./dnsZone";
export type DnsZone = import("./dnsZone").DnsZone;
export const DnsZone: typeof import("./dnsZone").DnsZone = null as any;
utilities.lazyLoad(exports, ["DnsZone"], () => require("./dnsZone"));

export { EmailDkimArgs, EmailDkimState } from "./emailDkim";
export type EmailDkim = import("./emailDkim").EmailDkim;
export const EmailDkim: typeof import("./emailDkim").EmailDkim = null as any;
utilities.lazyLoad(exports, ["EmailDkim"], () => require("./emailDkim"));

export { EmailEmailDomainArgs, EmailEmailDomainState } from "./emailEmailDomain";
export type EmailEmailDomain = import("./emailEmailDomain").EmailEmailDomain;
export const EmailEmailDomain: typeof import("./emailEmailDomain").EmailEmailDomain = null as any;
utilities.lazyLoad(exports, ["EmailEmailDomain"], () => require("./emailEmailDomain"));

export { EmailEmailReturnPathArgs, EmailEmailReturnPathState } from "./emailEmailReturnPath";
export type EmailEmailReturnPath = import("./emailEmailReturnPath").EmailEmailReturnPath;
export const EmailEmailReturnPath: typeof import("./emailEmailReturnPath").EmailEmailReturnPath = null as any;
utilities.lazyLoad(exports, ["EmailEmailReturnPath"], () => require("./emailEmailReturnPath"));

export { EmailSenderArgs, EmailSenderState } from "./emailSender";
export type EmailSender = import("./emailSender").EmailSender;
export const EmailSender: typeof import("./emailSender").EmailSender = null as any;
utilities.lazyLoad(exports, ["EmailSender"], () => require("./emailSender"));

export { EmailSuppressionArgs, EmailSuppressionState } from "./emailSuppression";
export type EmailSuppression = import("./emailSuppression").EmailSuppression;
export const EmailSuppression: typeof import("./emailSuppression").EmailSuppression = null as any;
utilities.lazyLoad(exports, ["EmailSuppression"], () => require("./emailSuppression"));

export { EventsRuleArgs, EventsRuleState } from "./eventsRule";
export type EventsRule = import("./eventsRule").EventsRule;
export const EventsRule: typeof import("./eventsRule").EventsRule = null as any;
utilities.lazyLoad(exports, ["EventsRule"], () => require("./eventsRule"));

export { FileStorageExportArgs, FileStorageExportState } from "./fileStorageExport";
export type FileStorageExport = import("./fileStorageExport").FileStorageExport;
export const FileStorageExport: typeof import("./fileStorageExport").FileStorageExport = null as any;
utilities.lazyLoad(exports, ["FileStorageExport"], () => require("./fileStorageExport"));

export { FileStorageExportSetArgs, FileStorageExportSetState } from "./fileStorageExportSet";
export type FileStorageExportSet = import("./fileStorageExportSet").FileStorageExportSet;
export const FileStorageExportSet: typeof import("./fileStorageExportSet").FileStorageExportSet = null as any;
utilities.lazyLoad(exports, ["FileStorageExportSet"], () => require("./fileStorageExportSet"));

export { FileStorageFileSystemArgs, FileStorageFileSystemState } from "./fileStorageFileSystem";
export type FileStorageFileSystem = import("./fileStorageFileSystem").FileStorageFileSystem;
export const FileStorageFileSystem: typeof import("./fileStorageFileSystem").FileStorageFileSystem = null as any;
utilities.lazyLoad(exports, ["FileStorageFileSystem"], () => require("./fileStorageFileSystem"));

export { FileStorageFilesystemSnapshotPolicyArgs, FileStorageFilesystemSnapshotPolicyState } from "./fileStorageFilesystemSnapshotPolicy";
export type FileStorageFilesystemSnapshotPolicy = import("./fileStorageFilesystemSnapshotPolicy").FileStorageFilesystemSnapshotPolicy;
export const FileStorageFilesystemSnapshotPolicy: typeof import("./fileStorageFilesystemSnapshotPolicy").FileStorageFilesystemSnapshotPolicy = null as any;
utilities.lazyLoad(exports, ["FileStorageFilesystemSnapshotPolicy"], () => require("./fileStorageFilesystemSnapshotPolicy"));

export { FileStorageMountTargetArgs, FileStorageMountTargetState } from "./fileStorageMountTarget";
export type FileStorageMountTarget = import("./fileStorageMountTarget").FileStorageMountTarget;
export const FileStorageMountTarget: typeof import("./fileStorageMountTarget").FileStorageMountTarget = null as any;
utilities.lazyLoad(exports, ["FileStorageMountTarget"], () => require("./fileStorageMountTarget"));

export { FileStorageOutboundConnectorArgs, FileStorageOutboundConnectorState } from "./fileStorageOutboundConnector";
export type FileStorageOutboundConnector = import("./fileStorageOutboundConnector").FileStorageOutboundConnector;
export const FileStorageOutboundConnector: typeof import("./fileStorageOutboundConnector").FileStorageOutboundConnector = null as any;
utilities.lazyLoad(exports, ["FileStorageOutboundConnector"], () => require("./fileStorageOutboundConnector"));

export { FileStorageReplicationArgs, FileStorageReplicationState } from "./fileStorageReplication";
export type FileStorageReplication = import("./fileStorageReplication").FileStorageReplication;
export const FileStorageReplication: typeof import("./fileStorageReplication").FileStorageReplication = null as any;
utilities.lazyLoad(exports, ["FileStorageReplication"], () => require("./fileStorageReplication"));

export { FileStorageSnapshotArgs, FileStorageSnapshotState } from "./fileStorageSnapshot";
export type FileStorageSnapshot = import("./fileStorageSnapshot").FileStorageSnapshot;
export const FileStorageSnapshot: typeof import("./fileStorageSnapshot").FileStorageSnapshot = null as any;
utilities.lazyLoad(exports, ["FileStorageSnapshot"], () => require("./fileStorageSnapshot"));

export { FunctionsApplicationArgs, FunctionsApplicationState } from "./functionsApplication";
export type FunctionsApplication = import("./functionsApplication").FunctionsApplication;
export const FunctionsApplication: typeof import("./functionsApplication").FunctionsApplication = null as any;
utilities.lazyLoad(exports, ["FunctionsApplication"], () => require("./functionsApplication"));

export { FunctionsFunctionArgs, FunctionsFunctionState } from "./functionsFunction";
export type FunctionsFunction = import("./functionsFunction").FunctionsFunction;
export const FunctionsFunction: typeof import("./functionsFunction").FunctionsFunction = null as any;
utilities.lazyLoad(exports, ["FunctionsFunction"], () => require("./functionsFunction"));

export { FunctionsInvokeFunctionArgs, FunctionsInvokeFunctionState } from "./functionsInvokeFunction";
export type FunctionsInvokeFunction = import("./functionsInvokeFunction").FunctionsInvokeFunction;
export const FunctionsInvokeFunction: typeof import("./functionsInvokeFunction").FunctionsInvokeFunction = null as any;
utilities.lazyLoad(exports, ["FunctionsInvokeFunction"], () => require("./functionsInvokeFunction"));

export { FusionAppsFusionEnvironmentArgs, FusionAppsFusionEnvironmentState } from "./fusionAppsFusionEnvironment";
export type FusionAppsFusionEnvironment = import("./fusionAppsFusionEnvironment").FusionAppsFusionEnvironment;
export const FusionAppsFusionEnvironment: typeof import("./fusionAppsFusionEnvironment").FusionAppsFusionEnvironment = null as any;
utilities.lazyLoad(exports, ["FusionAppsFusionEnvironment"], () => require("./fusionAppsFusionEnvironment"));

export { FusionAppsFusionEnvironmentAdminUserArgs, FusionAppsFusionEnvironmentAdminUserState } from "./fusionAppsFusionEnvironmentAdminUser";
export type FusionAppsFusionEnvironmentAdminUser = import("./fusionAppsFusionEnvironmentAdminUser").FusionAppsFusionEnvironmentAdminUser;
export const FusionAppsFusionEnvironmentAdminUser: typeof import("./fusionAppsFusionEnvironmentAdminUser").FusionAppsFusionEnvironmentAdminUser = null as any;
utilities.lazyLoad(exports, ["FusionAppsFusionEnvironmentAdminUser"], () => require("./fusionAppsFusionEnvironmentAdminUser"));

export { FusionAppsFusionEnvironmentDataMaskingActivityArgs, FusionAppsFusionEnvironmentDataMaskingActivityState } from "./fusionAppsFusionEnvironmentDataMaskingActivity";
export type FusionAppsFusionEnvironmentDataMaskingActivity = import("./fusionAppsFusionEnvironmentDataMaskingActivity").FusionAppsFusionEnvironmentDataMaskingActivity;
export const FusionAppsFusionEnvironmentDataMaskingActivity: typeof import("./fusionAppsFusionEnvironmentDataMaskingActivity").FusionAppsFusionEnvironmentDataMaskingActivity = null as any;
utilities.lazyLoad(exports, ["FusionAppsFusionEnvironmentDataMaskingActivity"], () => require("./fusionAppsFusionEnvironmentDataMaskingActivity"));

export { FusionAppsFusionEnvironmentFamilyArgs, FusionAppsFusionEnvironmentFamilyState } from "./fusionAppsFusionEnvironmentFamily";
export type FusionAppsFusionEnvironmentFamily = import("./fusionAppsFusionEnvironmentFamily").FusionAppsFusionEnvironmentFamily;
export const FusionAppsFusionEnvironmentFamily: typeof import("./fusionAppsFusionEnvironmentFamily").FusionAppsFusionEnvironmentFamily = null as any;
utilities.lazyLoad(exports, ["FusionAppsFusionEnvironmentFamily"], () => require("./fusionAppsFusionEnvironmentFamily"));

export { FusionAppsFusionEnvironmentRefreshActivityArgs, FusionAppsFusionEnvironmentRefreshActivityState } from "./fusionAppsFusionEnvironmentRefreshActivity";
export type FusionAppsFusionEnvironmentRefreshActivity = import("./fusionAppsFusionEnvironmentRefreshActivity").FusionAppsFusionEnvironmentRefreshActivity;
export const FusionAppsFusionEnvironmentRefreshActivity: typeof import("./fusionAppsFusionEnvironmentRefreshActivity").FusionAppsFusionEnvironmentRefreshActivity = null as any;
utilities.lazyLoad(exports, ["FusionAppsFusionEnvironmentRefreshActivity"], () => require("./fusionAppsFusionEnvironmentRefreshActivity"));

export { FusionAppsFusionEnvironmentServiceAttachmentArgs, FusionAppsFusionEnvironmentServiceAttachmentState } from "./fusionAppsFusionEnvironmentServiceAttachment";
export type FusionAppsFusionEnvironmentServiceAttachment = import("./fusionAppsFusionEnvironmentServiceAttachment").FusionAppsFusionEnvironmentServiceAttachment;
export const FusionAppsFusionEnvironmentServiceAttachment: typeof import("./fusionAppsFusionEnvironmentServiceAttachment").FusionAppsFusionEnvironmentServiceAttachment = null as any;
utilities.lazyLoad(exports, ["FusionAppsFusionEnvironmentServiceAttachment"], () => require("./fusionAppsFusionEnvironmentServiceAttachment"));

export { GenerativeAiDedicatedAiClusterArgs, GenerativeAiDedicatedAiClusterState } from "./generativeAiDedicatedAiCluster";
export type GenerativeAiDedicatedAiCluster = import("./generativeAiDedicatedAiCluster").GenerativeAiDedicatedAiCluster;
export const GenerativeAiDedicatedAiCluster: typeof import("./generativeAiDedicatedAiCluster").GenerativeAiDedicatedAiCluster = null as any;
utilities.lazyLoad(exports, ["GenerativeAiDedicatedAiCluster"], () => require("./generativeAiDedicatedAiCluster"));

export { GenerativeAiEndpointArgs, GenerativeAiEndpointState } from "./generativeAiEndpoint";
export type GenerativeAiEndpoint = import("./generativeAiEndpoint").GenerativeAiEndpoint;
export const GenerativeAiEndpoint: typeof import("./generativeAiEndpoint").GenerativeAiEndpoint = null as any;
utilities.lazyLoad(exports, ["GenerativeAiEndpoint"], () => require("./generativeAiEndpoint"));

export { GenerativeAiModelArgs, GenerativeAiModelState } from "./generativeAiModel";
export type GenerativeAiModel = import("./generativeAiModel").GenerativeAiModel;
export const GenerativeAiModel: typeof import("./generativeAiModel").GenerativeAiModel = null as any;
utilities.lazyLoad(exports, ["GenerativeAiModel"], () => require("./generativeAiModel"));

export { GenericArtifactsContentArtifactByPathArgs, GenericArtifactsContentArtifactByPathState } from "./genericArtifactsContentArtifactByPath";
export type GenericArtifactsContentArtifactByPath = import("./genericArtifactsContentArtifactByPath").GenericArtifactsContentArtifactByPath;
export const GenericArtifactsContentArtifactByPath: typeof import("./genericArtifactsContentArtifactByPath").GenericArtifactsContentArtifactByPath = null as any;
utilities.lazyLoad(exports, ["GenericArtifactsContentArtifactByPath"], () => require("./genericArtifactsContentArtifactByPath"));

export { GetAdmKnowledgeBaseArgs, GetAdmKnowledgeBaseResult, GetAdmKnowledgeBaseOutputArgs } from "./getAdmKnowledgeBase";
export const getAdmKnowledgeBase: typeof import("./getAdmKnowledgeBase").getAdmKnowledgeBase = null as any;
export const getAdmKnowledgeBaseOutput: typeof import("./getAdmKnowledgeBase").getAdmKnowledgeBaseOutput = null as any;
utilities.lazyLoad(exports, ["getAdmKnowledgeBase","getAdmKnowledgeBaseOutput"], () => require("./getAdmKnowledgeBase"));

export { GetAdmKnowledgeBasesArgs, GetAdmKnowledgeBasesResult, GetAdmKnowledgeBasesOutputArgs } from "./getAdmKnowledgeBases";
export const getAdmKnowledgeBases: typeof import("./getAdmKnowledgeBases").getAdmKnowledgeBases = null as any;
export const getAdmKnowledgeBasesOutput: typeof import("./getAdmKnowledgeBases").getAdmKnowledgeBasesOutput = null as any;
utilities.lazyLoad(exports, ["getAdmKnowledgeBases","getAdmKnowledgeBasesOutput"], () => require("./getAdmKnowledgeBases"));

export { GetAdmRemediationRecipeArgs, GetAdmRemediationRecipeResult, GetAdmRemediationRecipeOutputArgs } from "./getAdmRemediationRecipe";
export const getAdmRemediationRecipe: typeof import("./getAdmRemediationRecipe").getAdmRemediationRecipe = null as any;
export const getAdmRemediationRecipeOutput: typeof import("./getAdmRemediationRecipe").getAdmRemediationRecipeOutput = null as any;
utilities.lazyLoad(exports, ["getAdmRemediationRecipe","getAdmRemediationRecipeOutput"], () => require("./getAdmRemediationRecipe"));

export { GetAdmRemediationRecipesArgs, GetAdmRemediationRecipesResult, GetAdmRemediationRecipesOutputArgs } from "./getAdmRemediationRecipes";
export const getAdmRemediationRecipes: typeof import("./getAdmRemediationRecipes").getAdmRemediationRecipes = null as any;
export const getAdmRemediationRecipesOutput: typeof import("./getAdmRemediationRecipes").getAdmRemediationRecipesOutput = null as any;
utilities.lazyLoad(exports, ["getAdmRemediationRecipes","getAdmRemediationRecipesOutput"], () => require("./getAdmRemediationRecipes"));

export { GetAdmRemediationRunArgs, GetAdmRemediationRunResult, GetAdmRemediationRunOutputArgs } from "./getAdmRemediationRun";
export const getAdmRemediationRun: typeof import("./getAdmRemediationRun").getAdmRemediationRun = null as any;
export const getAdmRemediationRunOutput: typeof import("./getAdmRemediationRun").getAdmRemediationRunOutput = null as any;
utilities.lazyLoad(exports, ["getAdmRemediationRun","getAdmRemediationRunOutput"], () => require("./getAdmRemediationRun"));

export { GetAdmRemediationRunApplicationDependencyRecommendationsArgs, GetAdmRemediationRunApplicationDependencyRecommendationsResult, GetAdmRemediationRunApplicationDependencyRecommendationsOutputArgs } from "./getAdmRemediationRunApplicationDependencyRecommendations";
export const getAdmRemediationRunApplicationDependencyRecommendations: typeof import("./getAdmRemediationRunApplicationDependencyRecommendations").getAdmRemediationRunApplicationDependencyRecommendations = null as any;
export const getAdmRemediationRunApplicationDependencyRecommendationsOutput: typeof import("./getAdmRemediationRunApplicationDependencyRecommendations").getAdmRemediationRunApplicationDependencyRecommendationsOutput = null as any;
utilities.lazyLoad(exports, ["getAdmRemediationRunApplicationDependencyRecommendations","getAdmRemediationRunApplicationDependencyRecommendationsOutput"], () => require("./getAdmRemediationRunApplicationDependencyRecommendations"));

export { GetAdmRemediationRunStageArgs, GetAdmRemediationRunStageResult, GetAdmRemediationRunStageOutputArgs } from "./getAdmRemediationRunStage";
export const getAdmRemediationRunStage: typeof import("./getAdmRemediationRunStage").getAdmRemediationRunStage = null as any;
export const getAdmRemediationRunStageOutput: typeof import("./getAdmRemediationRunStage").getAdmRemediationRunStageOutput = null as any;
utilities.lazyLoad(exports, ["getAdmRemediationRunStage","getAdmRemediationRunStageOutput"], () => require("./getAdmRemediationRunStage"));

export { GetAdmRemediationRunStagesArgs, GetAdmRemediationRunStagesResult, GetAdmRemediationRunStagesOutputArgs } from "./getAdmRemediationRunStages";
export const getAdmRemediationRunStages: typeof import("./getAdmRemediationRunStages").getAdmRemediationRunStages = null as any;
export const getAdmRemediationRunStagesOutput: typeof import("./getAdmRemediationRunStages").getAdmRemediationRunStagesOutput = null as any;
utilities.lazyLoad(exports, ["getAdmRemediationRunStages","getAdmRemediationRunStagesOutput"], () => require("./getAdmRemediationRunStages"));

export { GetAdmRemediationRunsArgs, GetAdmRemediationRunsResult, GetAdmRemediationRunsOutputArgs } from "./getAdmRemediationRuns";
export const getAdmRemediationRuns: typeof import("./getAdmRemediationRuns").getAdmRemediationRuns = null as any;
export const getAdmRemediationRunsOutput: typeof import("./getAdmRemediationRuns").getAdmRemediationRunsOutput = null as any;
utilities.lazyLoad(exports, ["getAdmRemediationRuns","getAdmRemediationRunsOutput"], () => require("./getAdmRemediationRuns"));

export { GetAdmVulnerabilityAuditArgs, GetAdmVulnerabilityAuditResult, GetAdmVulnerabilityAuditOutputArgs } from "./getAdmVulnerabilityAudit";
export const getAdmVulnerabilityAudit: typeof import("./getAdmVulnerabilityAudit").getAdmVulnerabilityAudit = null as any;
export const getAdmVulnerabilityAuditOutput: typeof import("./getAdmVulnerabilityAudit").getAdmVulnerabilityAuditOutput = null as any;
utilities.lazyLoad(exports, ["getAdmVulnerabilityAudit","getAdmVulnerabilityAuditOutput"], () => require("./getAdmVulnerabilityAudit"));

export { GetAdmVulnerabilityAuditApplicationDependencyVulnerabilitiesArgs, GetAdmVulnerabilityAuditApplicationDependencyVulnerabilitiesResult, GetAdmVulnerabilityAuditApplicationDependencyVulnerabilitiesOutputArgs } from "./getAdmVulnerabilityAuditApplicationDependencyVulnerabilities";
export const getAdmVulnerabilityAuditApplicationDependencyVulnerabilities: typeof import("./getAdmVulnerabilityAuditApplicationDependencyVulnerabilities").getAdmVulnerabilityAuditApplicationDependencyVulnerabilities = null as any;
export const getAdmVulnerabilityAuditApplicationDependencyVulnerabilitiesOutput: typeof import("./getAdmVulnerabilityAuditApplicationDependencyVulnerabilities").getAdmVulnerabilityAuditApplicationDependencyVulnerabilitiesOutput = null as any;
utilities.lazyLoad(exports, ["getAdmVulnerabilityAuditApplicationDependencyVulnerabilities","getAdmVulnerabilityAuditApplicationDependencyVulnerabilitiesOutput"], () => require("./getAdmVulnerabilityAuditApplicationDependencyVulnerabilities"));

export { GetAdmVulnerabilityAuditApplicationDependencyVulnerabilityArgs, GetAdmVulnerabilityAuditApplicationDependencyVulnerabilityResult, GetAdmVulnerabilityAuditApplicationDependencyVulnerabilityOutputArgs } from "./getAdmVulnerabilityAuditApplicationDependencyVulnerability";
export const getAdmVulnerabilityAuditApplicationDependencyVulnerability: typeof import("./getAdmVulnerabilityAuditApplicationDependencyVulnerability").getAdmVulnerabilityAuditApplicationDependencyVulnerability = null as any;
export const getAdmVulnerabilityAuditApplicationDependencyVulnerabilityOutput: typeof import("./getAdmVulnerabilityAuditApplicationDependencyVulnerability").getAdmVulnerabilityAuditApplicationDependencyVulnerabilityOutput = null as any;
utilities.lazyLoad(exports, ["getAdmVulnerabilityAuditApplicationDependencyVulnerability","getAdmVulnerabilityAuditApplicationDependencyVulnerabilityOutput"], () => require("./getAdmVulnerabilityAuditApplicationDependencyVulnerability"));

export { GetAdmVulnerabilityAuditsArgs, GetAdmVulnerabilityAuditsResult, GetAdmVulnerabilityAuditsOutputArgs } from "./getAdmVulnerabilityAudits";
export const getAdmVulnerabilityAudits: typeof import("./getAdmVulnerabilityAudits").getAdmVulnerabilityAudits = null as any;
export const getAdmVulnerabilityAuditsOutput: typeof import("./getAdmVulnerabilityAudits").getAdmVulnerabilityAuditsOutput = null as any;
utilities.lazyLoad(exports, ["getAdmVulnerabilityAudits","getAdmVulnerabilityAuditsOutput"], () => require("./getAdmVulnerabilityAudits"));

export { GetAiAnomalyDetectionAiPrivateEndpointArgs, GetAiAnomalyDetectionAiPrivateEndpointResult, GetAiAnomalyDetectionAiPrivateEndpointOutputArgs } from "./getAiAnomalyDetectionAiPrivateEndpoint";
export const getAiAnomalyDetectionAiPrivateEndpoint: typeof import("./getAiAnomalyDetectionAiPrivateEndpoint").getAiAnomalyDetectionAiPrivateEndpoint = null as any;
export const getAiAnomalyDetectionAiPrivateEndpointOutput: typeof import("./getAiAnomalyDetectionAiPrivateEndpoint").getAiAnomalyDetectionAiPrivateEndpointOutput = null as any;
utilities.lazyLoad(exports, ["getAiAnomalyDetectionAiPrivateEndpoint","getAiAnomalyDetectionAiPrivateEndpointOutput"], () => require("./getAiAnomalyDetectionAiPrivateEndpoint"));

export { GetAiAnomalyDetectionAiPrivateEndpointsArgs, GetAiAnomalyDetectionAiPrivateEndpointsResult, GetAiAnomalyDetectionAiPrivateEndpointsOutputArgs } from "./getAiAnomalyDetectionAiPrivateEndpoints";
export const getAiAnomalyDetectionAiPrivateEndpoints: typeof import("./getAiAnomalyDetectionAiPrivateEndpoints").getAiAnomalyDetectionAiPrivateEndpoints = null as any;
export const getAiAnomalyDetectionAiPrivateEndpointsOutput: typeof import("./getAiAnomalyDetectionAiPrivateEndpoints").getAiAnomalyDetectionAiPrivateEndpointsOutput = null as any;
utilities.lazyLoad(exports, ["getAiAnomalyDetectionAiPrivateEndpoints","getAiAnomalyDetectionAiPrivateEndpointsOutput"], () => require("./getAiAnomalyDetectionAiPrivateEndpoints"));

export { GetAiAnomalyDetectionDataAssetArgs, GetAiAnomalyDetectionDataAssetResult, GetAiAnomalyDetectionDataAssetOutputArgs } from "./getAiAnomalyDetectionDataAsset";
export const getAiAnomalyDetectionDataAsset: typeof import("./getAiAnomalyDetectionDataAsset").getAiAnomalyDetectionDataAsset = null as any;
export const getAiAnomalyDetectionDataAssetOutput: typeof import("./getAiAnomalyDetectionDataAsset").getAiAnomalyDetectionDataAssetOutput = null as any;
utilities.lazyLoad(exports, ["getAiAnomalyDetectionDataAsset","getAiAnomalyDetectionDataAssetOutput"], () => require("./getAiAnomalyDetectionDataAsset"));

export { GetAiAnomalyDetectionDataAssetsArgs, GetAiAnomalyDetectionDataAssetsResult, GetAiAnomalyDetectionDataAssetsOutputArgs } from "./getAiAnomalyDetectionDataAssets";
export const getAiAnomalyDetectionDataAssets: typeof import("./getAiAnomalyDetectionDataAssets").getAiAnomalyDetectionDataAssets = null as any;
export const getAiAnomalyDetectionDataAssetsOutput: typeof import("./getAiAnomalyDetectionDataAssets").getAiAnomalyDetectionDataAssetsOutput = null as any;
utilities.lazyLoad(exports, ["getAiAnomalyDetectionDataAssets","getAiAnomalyDetectionDataAssetsOutput"], () => require("./getAiAnomalyDetectionDataAssets"));

export { GetAiAnomalyDetectionDetectAnomalyJobArgs, GetAiAnomalyDetectionDetectAnomalyJobResult, GetAiAnomalyDetectionDetectAnomalyJobOutputArgs } from "./getAiAnomalyDetectionDetectAnomalyJob";
export const getAiAnomalyDetectionDetectAnomalyJob: typeof import("./getAiAnomalyDetectionDetectAnomalyJob").getAiAnomalyDetectionDetectAnomalyJob = null as any;
export const getAiAnomalyDetectionDetectAnomalyJobOutput: typeof import("./getAiAnomalyDetectionDetectAnomalyJob").getAiAnomalyDetectionDetectAnomalyJobOutput = null as any;
utilities.lazyLoad(exports, ["getAiAnomalyDetectionDetectAnomalyJob","getAiAnomalyDetectionDetectAnomalyJobOutput"], () => require("./getAiAnomalyDetectionDetectAnomalyJob"));

export { GetAiAnomalyDetectionDetectAnomalyJobsArgs, GetAiAnomalyDetectionDetectAnomalyJobsResult, GetAiAnomalyDetectionDetectAnomalyJobsOutputArgs } from "./getAiAnomalyDetectionDetectAnomalyJobs";
export const getAiAnomalyDetectionDetectAnomalyJobs: typeof import("./getAiAnomalyDetectionDetectAnomalyJobs").getAiAnomalyDetectionDetectAnomalyJobs = null as any;
export const getAiAnomalyDetectionDetectAnomalyJobsOutput: typeof import("./getAiAnomalyDetectionDetectAnomalyJobs").getAiAnomalyDetectionDetectAnomalyJobsOutput = null as any;
utilities.lazyLoad(exports, ["getAiAnomalyDetectionDetectAnomalyJobs","getAiAnomalyDetectionDetectAnomalyJobsOutput"], () => require("./getAiAnomalyDetectionDetectAnomalyJobs"));

export { GetAiAnomalyDetectionModelArgs, GetAiAnomalyDetectionModelResult, GetAiAnomalyDetectionModelOutputArgs } from "./getAiAnomalyDetectionModel";
export const getAiAnomalyDetectionModel: typeof import("./getAiAnomalyDetectionModel").getAiAnomalyDetectionModel = null as any;
export const getAiAnomalyDetectionModelOutput: typeof import("./getAiAnomalyDetectionModel").getAiAnomalyDetectionModelOutput = null as any;
utilities.lazyLoad(exports, ["getAiAnomalyDetectionModel","getAiAnomalyDetectionModelOutput"], () => require("./getAiAnomalyDetectionModel"));

export { GetAiAnomalyDetectionModelsArgs, GetAiAnomalyDetectionModelsResult, GetAiAnomalyDetectionModelsOutputArgs } from "./getAiAnomalyDetectionModels";
export const getAiAnomalyDetectionModels: typeof import("./getAiAnomalyDetectionModels").getAiAnomalyDetectionModels = null as any;
export const getAiAnomalyDetectionModelsOutput: typeof import("./getAiAnomalyDetectionModels").getAiAnomalyDetectionModelsOutput = null as any;
utilities.lazyLoad(exports, ["getAiAnomalyDetectionModels","getAiAnomalyDetectionModelsOutput"], () => require("./getAiAnomalyDetectionModels"));

export { GetAiAnomalyDetectionProjectArgs, GetAiAnomalyDetectionProjectResult, GetAiAnomalyDetectionProjectOutputArgs } from "./getAiAnomalyDetectionProject";
export const getAiAnomalyDetectionProject: typeof import("./getAiAnomalyDetectionProject").getAiAnomalyDetectionProject = null as any;
export const getAiAnomalyDetectionProjectOutput: typeof import("./getAiAnomalyDetectionProject").getAiAnomalyDetectionProjectOutput = null as any;
utilities.lazyLoad(exports, ["getAiAnomalyDetectionProject","getAiAnomalyDetectionProjectOutput"], () => require("./getAiAnomalyDetectionProject"));

export { GetAiAnomalyDetectionProjectsArgs, GetAiAnomalyDetectionProjectsResult, GetAiAnomalyDetectionProjectsOutputArgs } from "./getAiAnomalyDetectionProjects";
export const getAiAnomalyDetectionProjects: typeof import("./getAiAnomalyDetectionProjects").getAiAnomalyDetectionProjects = null as any;
export const getAiAnomalyDetectionProjectsOutput: typeof import("./getAiAnomalyDetectionProjects").getAiAnomalyDetectionProjectsOutput = null as any;
utilities.lazyLoad(exports, ["getAiAnomalyDetectionProjects","getAiAnomalyDetectionProjectsOutput"], () => require("./getAiAnomalyDetectionProjects"));

export { GetAiDocumentModelArgs, GetAiDocumentModelResult, GetAiDocumentModelOutputArgs } from "./getAiDocumentModel";
export const getAiDocumentModel: typeof import("./getAiDocumentModel").getAiDocumentModel = null as any;
export const getAiDocumentModelOutput: typeof import("./getAiDocumentModel").getAiDocumentModelOutput = null as any;
utilities.lazyLoad(exports, ["getAiDocumentModel","getAiDocumentModelOutput"], () => require("./getAiDocumentModel"));

export { GetAiDocumentModelsArgs, GetAiDocumentModelsResult, GetAiDocumentModelsOutputArgs } from "./getAiDocumentModels";
export const getAiDocumentModels: typeof import("./getAiDocumentModels").getAiDocumentModels = null as any;
export const getAiDocumentModelsOutput: typeof import("./getAiDocumentModels").getAiDocumentModelsOutput = null as any;
utilities.lazyLoad(exports, ["getAiDocumentModels","getAiDocumentModelsOutput"], () => require("./getAiDocumentModels"));

export { GetAiDocumentProcessorJobArgs, GetAiDocumentProcessorJobResult, GetAiDocumentProcessorJobOutputArgs } from "./getAiDocumentProcessorJob";
export const getAiDocumentProcessorJob: typeof import("./getAiDocumentProcessorJob").getAiDocumentProcessorJob = null as any;
export const getAiDocumentProcessorJobOutput: typeof import("./getAiDocumentProcessorJob").getAiDocumentProcessorJobOutput = null as any;
utilities.lazyLoad(exports, ["getAiDocumentProcessorJob","getAiDocumentProcessorJobOutput"], () => require("./getAiDocumentProcessorJob"));

export { GetAiDocumentProjectArgs, GetAiDocumentProjectResult, GetAiDocumentProjectOutputArgs } from "./getAiDocumentProject";
export const getAiDocumentProject: typeof import("./getAiDocumentProject").getAiDocumentProject = null as any;
export const getAiDocumentProjectOutput: typeof import("./getAiDocumentProject").getAiDocumentProjectOutput = null as any;
utilities.lazyLoad(exports, ["getAiDocumentProject","getAiDocumentProjectOutput"], () => require("./getAiDocumentProject"));

export { GetAiDocumentProjectsArgs, GetAiDocumentProjectsResult, GetAiDocumentProjectsOutputArgs } from "./getAiDocumentProjects";
export const getAiDocumentProjects: typeof import("./getAiDocumentProjects").getAiDocumentProjects = null as any;
export const getAiDocumentProjectsOutput: typeof import("./getAiDocumentProjects").getAiDocumentProjectsOutput = null as any;
utilities.lazyLoad(exports, ["getAiDocumentProjects","getAiDocumentProjectsOutput"], () => require("./getAiDocumentProjects"));

export { GetAiLanguageEndpointArgs, GetAiLanguageEndpointResult, GetAiLanguageEndpointOutputArgs } from "./getAiLanguageEndpoint";
export const getAiLanguageEndpoint: typeof import("./getAiLanguageEndpoint").getAiLanguageEndpoint = null as any;
export const getAiLanguageEndpointOutput: typeof import("./getAiLanguageEndpoint").getAiLanguageEndpointOutput = null as any;
utilities.lazyLoad(exports, ["getAiLanguageEndpoint","getAiLanguageEndpointOutput"], () => require("./getAiLanguageEndpoint"));

export { GetAiLanguageEndpointsArgs, GetAiLanguageEndpointsResult, GetAiLanguageEndpointsOutputArgs } from "./getAiLanguageEndpoints";
export const getAiLanguageEndpoints: typeof import("./getAiLanguageEndpoints").getAiLanguageEndpoints = null as any;
export const getAiLanguageEndpointsOutput: typeof import("./getAiLanguageEndpoints").getAiLanguageEndpointsOutput = null as any;
utilities.lazyLoad(exports, ["getAiLanguageEndpoints","getAiLanguageEndpointsOutput"], () => require("./getAiLanguageEndpoints"));

export { GetAiLanguageModelArgs, GetAiLanguageModelResult, GetAiLanguageModelOutputArgs } from "./getAiLanguageModel";
export const getAiLanguageModel: typeof import("./getAiLanguageModel").getAiLanguageModel = null as any;
export const getAiLanguageModelOutput: typeof import("./getAiLanguageModel").getAiLanguageModelOutput = null as any;
utilities.lazyLoad(exports, ["getAiLanguageModel","getAiLanguageModelOutput"], () => require("./getAiLanguageModel"));

export { GetAiLanguageModelEvaluationResultsArgs, GetAiLanguageModelEvaluationResultsResult, GetAiLanguageModelEvaluationResultsOutputArgs } from "./getAiLanguageModelEvaluationResults";
export const getAiLanguageModelEvaluationResults: typeof import("./getAiLanguageModelEvaluationResults").getAiLanguageModelEvaluationResults = null as any;
export const getAiLanguageModelEvaluationResultsOutput: typeof import("./getAiLanguageModelEvaluationResults").getAiLanguageModelEvaluationResultsOutput = null as any;
utilities.lazyLoad(exports, ["getAiLanguageModelEvaluationResults","getAiLanguageModelEvaluationResultsOutput"], () => require("./getAiLanguageModelEvaluationResults"));

export { GetAiLanguageModelTypeArgs, GetAiLanguageModelTypeResult, GetAiLanguageModelTypeOutputArgs } from "./getAiLanguageModelType";
export const getAiLanguageModelType: typeof import("./getAiLanguageModelType").getAiLanguageModelType = null as any;
export const getAiLanguageModelTypeOutput: typeof import("./getAiLanguageModelType").getAiLanguageModelTypeOutput = null as any;
utilities.lazyLoad(exports, ["getAiLanguageModelType","getAiLanguageModelTypeOutput"], () => require("./getAiLanguageModelType"));

export { GetAiLanguageModelsArgs, GetAiLanguageModelsResult, GetAiLanguageModelsOutputArgs } from "./getAiLanguageModels";
export const getAiLanguageModels: typeof import("./getAiLanguageModels").getAiLanguageModels = null as any;
export const getAiLanguageModelsOutput: typeof import("./getAiLanguageModels").getAiLanguageModelsOutput = null as any;
utilities.lazyLoad(exports, ["getAiLanguageModels","getAiLanguageModelsOutput"], () => require("./getAiLanguageModels"));

export { GetAiLanguageProjectArgs, GetAiLanguageProjectResult, GetAiLanguageProjectOutputArgs } from "./getAiLanguageProject";
export const getAiLanguageProject: typeof import("./getAiLanguageProject").getAiLanguageProject = null as any;
export const getAiLanguageProjectOutput: typeof import("./getAiLanguageProject").getAiLanguageProjectOutput = null as any;
utilities.lazyLoad(exports, ["getAiLanguageProject","getAiLanguageProjectOutput"], () => require("./getAiLanguageProject"));

export { GetAiLanguageProjectsArgs, GetAiLanguageProjectsResult, GetAiLanguageProjectsOutputArgs } from "./getAiLanguageProjects";
export const getAiLanguageProjects: typeof import("./getAiLanguageProjects").getAiLanguageProjects = null as any;
export const getAiLanguageProjectsOutput: typeof import("./getAiLanguageProjects").getAiLanguageProjectsOutput = null as any;
utilities.lazyLoad(exports, ["getAiLanguageProjects","getAiLanguageProjectsOutput"], () => require("./getAiLanguageProjects"));

export { GetAiVisionModelArgs, GetAiVisionModelResult, GetAiVisionModelOutputArgs } from "./getAiVisionModel";
export const getAiVisionModel: typeof import("./getAiVisionModel").getAiVisionModel = null as any;
export const getAiVisionModelOutput: typeof import("./getAiVisionModel").getAiVisionModelOutput = null as any;
utilities.lazyLoad(exports, ["getAiVisionModel","getAiVisionModelOutput"], () => require("./getAiVisionModel"));

export { GetAiVisionModelsArgs, GetAiVisionModelsResult, GetAiVisionModelsOutputArgs } from "./getAiVisionModels";
export const getAiVisionModels: typeof import("./getAiVisionModels").getAiVisionModels = null as any;
export const getAiVisionModelsOutput: typeof import("./getAiVisionModels").getAiVisionModelsOutput = null as any;
utilities.lazyLoad(exports, ["getAiVisionModels","getAiVisionModelsOutput"], () => require("./getAiVisionModels"));

export { GetAiVisionProjectArgs, GetAiVisionProjectResult, GetAiVisionProjectOutputArgs } from "./getAiVisionProject";
export const getAiVisionProject: typeof import("./getAiVisionProject").getAiVisionProject = null as any;
export const getAiVisionProjectOutput: typeof import("./getAiVisionProject").getAiVisionProjectOutput = null as any;
utilities.lazyLoad(exports, ["getAiVisionProject","getAiVisionProjectOutput"], () => require("./getAiVisionProject"));

export { GetAiVisionProjectsArgs, GetAiVisionProjectsResult, GetAiVisionProjectsOutputArgs } from "./getAiVisionProjects";
export const getAiVisionProjects: typeof import("./getAiVisionProjects").getAiVisionProjects = null as any;
export const getAiVisionProjectsOutput: typeof import("./getAiVisionProjects").getAiVisionProjectsOutput = null as any;
utilities.lazyLoad(exports, ["getAiVisionProjects","getAiVisionProjectsOutput"], () => require("./getAiVisionProjects"));

export { GetAnalyticsAnalyticsInstanceArgs, GetAnalyticsAnalyticsInstanceResult, GetAnalyticsAnalyticsInstanceOutputArgs } from "./getAnalyticsAnalyticsInstance";
export const getAnalyticsAnalyticsInstance: typeof import("./getAnalyticsAnalyticsInstance").getAnalyticsAnalyticsInstance = null as any;
export const getAnalyticsAnalyticsInstanceOutput: typeof import("./getAnalyticsAnalyticsInstance").getAnalyticsAnalyticsInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getAnalyticsAnalyticsInstance","getAnalyticsAnalyticsInstanceOutput"], () => require("./getAnalyticsAnalyticsInstance"));

export { GetAnalyticsAnalyticsInstancePrivateAccessChannelArgs, GetAnalyticsAnalyticsInstancePrivateAccessChannelResult, GetAnalyticsAnalyticsInstancePrivateAccessChannelOutputArgs } from "./getAnalyticsAnalyticsInstancePrivateAccessChannel";
export const getAnalyticsAnalyticsInstancePrivateAccessChannel: typeof import("./getAnalyticsAnalyticsInstancePrivateAccessChannel").getAnalyticsAnalyticsInstancePrivateAccessChannel = null as any;
export const getAnalyticsAnalyticsInstancePrivateAccessChannelOutput: typeof import("./getAnalyticsAnalyticsInstancePrivateAccessChannel").getAnalyticsAnalyticsInstancePrivateAccessChannelOutput = null as any;
utilities.lazyLoad(exports, ["getAnalyticsAnalyticsInstancePrivateAccessChannel","getAnalyticsAnalyticsInstancePrivateAccessChannelOutput"], () => require("./getAnalyticsAnalyticsInstancePrivateAccessChannel"));

export { GetAnalyticsAnalyticsInstancesArgs, GetAnalyticsAnalyticsInstancesResult, GetAnalyticsAnalyticsInstancesOutputArgs } from "./getAnalyticsAnalyticsInstances";
export const getAnalyticsAnalyticsInstances: typeof import("./getAnalyticsAnalyticsInstances").getAnalyticsAnalyticsInstances = null as any;
export const getAnalyticsAnalyticsInstancesOutput: typeof import("./getAnalyticsAnalyticsInstances").getAnalyticsAnalyticsInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getAnalyticsAnalyticsInstances","getAnalyticsAnalyticsInstancesOutput"], () => require("./getAnalyticsAnalyticsInstances"));

export { GetAnnouncementsServiceAnnouncementSubscriptionArgs, GetAnnouncementsServiceAnnouncementSubscriptionResult, GetAnnouncementsServiceAnnouncementSubscriptionOutputArgs } from "./getAnnouncementsServiceAnnouncementSubscription";
export const getAnnouncementsServiceAnnouncementSubscription: typeof import("./getAnnouncementsServiceAnnouncementSubscription").getAnnouncementsServiceAnnouncementSubscription = null as any;
export const getAnnouncementsServiceAnnouncementSubscriptionOutput: typeof import("./getAnnouncementsServiceAnnouncementSubscription").getAnnouncementsServiceAnnouncementSubscriptionOutput = null as any;
utilities.lazyLoad(exports, ["getAnnouncementsServiceAnnouncementSubscription","getAnnouncementsServiceAnnouncementSubscriptionOutput"], () => require("./getAnnouncementsServiceAnnouncementSubscription"));

export { GetAnnouncementsServiceAnnouncementSubscriptionsArgs, GetAnnouncementsServiceAnnouncementSubscriptionsResult, GetAnnouncementsServiceAnnouncementSubscriptionsOutputArgs } from "./getAnnouncementsServiceAnnouncementSubscriptions";
export const getAnnouncementsServiceAnnouncementSubscriptions: typeof import("./getAnnouncementsServiceAnnouncementSubscriptions").getAnnouncementsServiceAnnouncementSubscriptions = null as any;
export const getAnnouncementsServiceAnnouncementSubscriptionsOutput: typeof import("./getAnnouncementsServiceAnnouncementSubscriptions").getAnnouncementsServiceAnnouncementSubscriptionsOutput = null as any;
utilities.lazyLoad(exports, ["getAnnouncementsServiceAnnouncementSubscriptions","getAnnouncementsServiceAnnouncementSubscriptionsOutput"], () => require("./getAnnouncementsServiceAnnouncementSubscriptions"));

export { GetAnnouncementsServiceServicesArgs, GetAnnouncementsServiceServicesResult, GetAnnouncementsServiceServicesOutputArgs } from "./getAnnouncementsServiceServices";
export const getAnnouncementsServiceServices: typeof import("./getAnnouncementsServiceServices").getAnnouncementsServiceServices = null as any;
export const getAnnouncementsServiceServicesOutput: typeof import("./getAnnouncementsServiceServices").getAnnouncementsServiceServicesOutput = null as any;
utilities.lazyLoad(exports, ["getAnnouncementsServiceServices","getAnnouncementsServiceServicesOutput"], () => require("./getAnnouncementsServiceServices"));

export { GetApigatewayApiArgs, GetApigatewayApiResult, GetApigatewayApiOutputArgs } from "./getApigatewayApi";
export const getApigatewayApi: typeof import("./getApigatewayApi").getApigatewayApi = null as any;
export const getApigatewayApiOutput: typeof import("./getApigatewayApi").getApigatewayApiOutput = null as any;
utilities.lazyLoad(exports, ["getApigatewayApi","getApigatewayApiOutput"], () => require("./getApigatewayApi"));

export { GetApigatewayApiContentArgs, GetApigatewayApiContentResult, GetApigatewayApiContentOutputArgs } from "./getApigatewayApiContent";
export const getApigatewayApiContent: typeof import("./getApigatewayApiContent").getApigatewayApiContent = null as any;
export const getApigatewayApiContentOutput: typeof import("./getApigatewayApiContent").getApigatewayApiContentOutput = null as any;
utilities.lazyLoad(exports, ["getApigatewayApiContent","getApigatewayApiContentOutput"], () => require("./getApigatewayApiContent"));

export { GetApigatewayApiDeploymentSpecificationArgs, GetApigatewayApiDeploymentSpecificationResult, GetApigatewayApiDeploymentSpecificationOutputArgs } from "./getApigatewayApiDeploymentSpecification";
export const getApigatewayApiDeploymentSpecification: typeof import("./getApigatewayApiDeploymentSpecification").getApigatewayApiDeploymentSpecification = null as any;
export const getApigatewayApiDeploymentSpecificationOutput: typeof import("./getApigatewayApiDeploymentSpecification").getApigatewayApiDeploymentSpecificationOutput = null as any;
utilities.lazyLoad(exports, ["getApigatewayApiDeploymentSpecification","getApigatewayApiDeploymentSpecificationOutput"], () => require("./getApigatewayApiDeploymentSpecification"));

export { GetApigatewayApiValidationArgs, GetApigatewayApiValidationResult, GetApigatewayApiValidationOutputArgs } from "./getApigatewayApiValidation";
export const getApigatewayApiValidation: typeof import("./getApigatewayApiValidation").getApigatewayApiValidation = null as any;
export const getApigatewayApiValidationOutput: typeof import("./getApigatewayApiValidation").getApigatewayApiValidationOutput = null as any;
utilities.lazyLoad(exports, ["getApigatewayApiValidation","getApigatewayApiValidationOutput"], () => require("./getApigatewayApiValidation"));

export { GetApigatewayApisArgs, GetApigatewayApisResult, GetApigatewayApisOutputArgs } from "./getApigatewayApis";
export const getApigatewayApis: typeof import("./getApigatewayApis").getApigatewayApis = null as any;
export const getApigatewayApisOutput: typeof import("./getApigatewayApis").getApigatewayApisOutput = null as any;
utilities.lazyLoad(exports, ["getApigatewayApis","getApigatewayApisOutput"], () => require("./getApigatewayApis"));

export { GetApigatewayCertificateArgs, GetApigatewayCertificateResult, GetApigatewayCertificateOutputArgs } from "./getApigatewayCertificate";
export const getApigatewayCertificate: typeof import("./getApigatewayCertificate").getApigatewayCertificate = null as any;
export const getApigatewayCertificateOutput: typeof import("./getApigatewayCertificate").getApigatewayCertificateOutput = null as any;
utilities.lazyLoad(exports, ["getApigatewayCertificate","getApigatewayCertificateOutput"], () => require("./getApigatewayCertificate"));

export { GetApigatewayCertificatesArgs, GetApigatewayCertificatesResult, GetApigatewayCertificatesOutputArgs } from "./getApigatewayCertificates";
export const getApigatewayCertificates: typeof import("./getApigatewayCertificates").getApigatewayCertificates = null as any;
export const getApigatewayCertificatesOutput: typeof import("./getApigatewayCertificates").getApigatewayCertificatesOutput = null as any;
utilities.lazyLoad(exports, ["getApigatewayCertificates","getApigatewayCertificatesOutput"], () => require("./getApigatewayCertificates"));

export { GetApigatewayDeploymentArgs, GetApigatewayDeploymentResult, GetApigatewayDeploymentOutputArgs } from "./getApigatewayDeployment";
export const getApigatewayDeployment: typeof import("./getApigatewayDeployment").getApigatewayDeployment = null as any;
export const getApigatewayDeploymentOutput: typeof import("./getApigatewayDeployment").getApigatewayDeploymentOutput = null as any;
utilities.lazyLoad(exports, ["getApigatewayDeployment","getApigatewayDeploymentOutput"], () => require("./getApigatewayDeployment"));

export { GetApigatewayDeploymentsArgs, GetApigatewayDeploymentsResult, GetApigatewayDeploymentsOutputArgs } from "./getApigatewayDeployments";
export const getApigatewayDeployments: typeof import("./getApigatewayDeployments").getApigatewayDeployments = null as any;
export const getApigatewayDeploymentsOutput: typeof import("./getApigatewayDeployments").getApigatewayDeploymentsOutput = null as any;
utilities.lazyLoad(exports, ["getApigatewayDeployments","getApigatewayDeploymentsOutput"], () => require("./getApigatewayDeployments"));

export { GetApigatewayGatewayArgs, GetApigatewayGatewayResult, GetApigatewayGatewayOutputArgs } from "./getApigatewayGateway";
export const getApigatewayGateway: typeof import("./getApigatewayGateway").getApigatewayGateway = null as any;
export const getApigatewayGatewayOutput: typeof import("./getApigatewayGateway").getApigatewayGatewayOutput = null as any;
utilities.lazyLoad(exports, ["getApigatewayGateway","getApigatewayGatewayOutput"], () => require("./getApigatewayGateway"));

export { GetApigatewayGatewaysArgs, GetApigatewayGatewaysResult, GetApigatewayGatewaysOutputArgs } from "./getApigatewayGateways";
export const getApigatewayGateways: typeof import("./getApigatewayGateways").getApigatewayGateways = null as any;
export const getApigatewayGatewaysOutput: typeof import("./getApigatewayGateways").getApigatewayGatewaysOutput = null as any;
utilities.lazyLoad(exports, ["getApigatewayGateways","getApigatewayGatewaysOutput"], () => require("./getApigatewayGateways"));

export { GetApigatewaySubscriberArgs, GetApigatewaySubscriberResult, GetApigatewaySubscriberOutputArgs } from "./getApigatewaySubscriber";
export const getApigatewaySubscriber: typeof import("./getApigatewaySubscriber").getApigatewaySubscriber = null as any;
export const getApigatewaySubscriberOutput: typeof import("./getApigatewaySubscriber").getApigatewaySubscriberOutput = null as any;
utilities.lazyLoad(exports, ["getApigatewaySubscriber","getApigatewaySubscriberOutput"], () => require("./getApigatewaySubscriber"));

export { GetApigatewaySubscribersArgs, GetApigatewaySubscribersResult, GetApigatewaySubscribersOutputArgs } from "./getApigatewaySubscribers";
export const getApigatewaySubscribers: typeof import("./getApigatewaySubscribers").getApigatewaySubscribers = null as any;
export const getApigatewaySubscribersOutput: typeof import("./getApigatewaySubscribers").getApigatewaySubscribersOutput = null as any;
utilities.lazyLoad(exports, ["getApigatewaySubscribers","getApigatewaySubscribersOutput"], () => require("./getApigatewaySubscribers"));

export { GetApigatewayUsagePlanArgs, GetApigatewayUsagePlanResult, GetApigatewayUsagePlanOutputArgs } from "./getApigatewayUsagePlan";
export const getApigatewayUsagePlan: typeof import("./getApigatewayUsagePlan").getApigatewayUsagePlan = null as any;
export const getApigatewayUsagePlanOutput: typeof import("./getApigatewayUsagePlan").getApigatewayUsagePlanOutput = null as any;
utilities.lazyLoad(exports, ["getApigatewayUsagePlan","getApigatewayUsagePlanOutput"], () => require("./getApigatewayUsagePlan"));

export { GetApigatewayUsagePlansArgs, GetApigatewayUsagePlansResult, GetApigatewayUsagePlansOutputArgs } from "./getApigatewayUsagePlans";
export const getApigatewayUsagePlans: typeof import("./getApigatewayUsagePlans").getApigatewayUsagePlans = null as any;
export const getApigatewayUsagePlansOutput: typeof import("./getApigatewayUsagePlans").getApigatewayUsagePlansOutput = null as any;
utilities.lazyLoad(exports, ["getApigatewayUsagePlans","getApigatewayUsagePlansOutput"], () => require("./getApigatewayUsagePlans"));

export { GetApmApmDomainArgs, GetApmApmDomainResult, GetApmApmDomainOutputArgs } from "./getApmApmDomain";
export const getApmApmDomain: typeof import("./getApmApmDomain").getApmApmDomain = null as any;
export const getApmApmDomainOutput: typeof import("./getApmApmDomain").getApmApmDomainOutput = null as any;
utilities.lazyLoad(exports, ["getApmApmDomain","getApmApmDomainOutput"], () => require("./getApmApmDomain"));

export { GetApmApmDomainsArgs, GetApmApmDomainsResult, GetApmApmDomainsOutputArgs } from "./getApmApmDomains";
export const getApmApmDomains: typeof import("./getApmApmDomains").getApmApmDomains = null as any;
export const getApmApmDomainsOutput: typeof import("./getApmApmDomains").getApmApmDomainsOutput = null as any;
utilities.lazyLoad(exports, ["getApmApmDomains","getApmApmDomainsOutput"], () => require("./getApmApmDomains"));

export { GetApmConfigConfigArgs, GetApmConfigConfigResult, GetApmConfigConfigOutputArgs } from "./getApmConfigConfig";
export const getApmConfigConfig: typeof import("./getApmConfigConfig").getApmConfigConfig = null as any;
export const getApmConfigConfigOutput: typeof import("./getApmConfigConfig").getApmConfigConfigOutput = null as any;
utilities.lazyLoad(exports, ["getApmConfigConfig","getApmConfigConfigOutput"], () => require("./getApmConfigConfig"));

export { GetApmConfigConfigsArgs, GetApmConfigConfigsResult, GetApmConfigConfigsOutputArgs } from "./getApmConfigConfigs";
export const getApmConfigConfigs: typeof import("./getApmConfigConfigs").getApmConfigConfigs = null as any;
export const getApmConfigConfigsOutput: typeof import("./getApmConfigConfigs").getApmConfigConfigsOutput = null as any;
utilities.lazyLoad(exports, ["getApmConfigConfigs","getApmConfigConfigsOutput"], () => require("./getApmConfigConfigs"));

export { GetApmDataKeysArgs, GetApmDataKeysResult, GetApmDataKeysOutputArgs } from "./getApmDataKeys";
export const getApmDataKeys: typeof import("./getApmDataKeys").getApmDataKeys = null as any;
export const getApmDataKeysOutput: typeof import("./getApmDataKeys").getApmDataKeysOutput = null as any;
utilities.lazyLoad(exports, ["getApmDataKeys","getApmDataKeysOutput"], () => require("./getApmDataKeys"));

export { GetApmSyntheticsDedicatedVantagePointArgs, GetApmSyntheticsDedicatedVantagePointResult, GetApmSyntheticsDedicatedVantagePointOutputArgs } from "./getApmSyntheticsDedicatedVantagePoint";
export const getApmSyntheticsDedicatedVantagePoint: typeof import("./getApmSyntheticsDedicatedVantagePoint").getApmSyntheticsDedicatedVantagePoint = null as any;
export const getApmSyntheticsDedicatedVantagePointOutput: typeof import("./getApmSyntheticsDedicatedVantagePoint").getApmSyntheticsDedicatedVantagePointOutput = null as any;
utilities.lazyLoad(exports, ["getApmSyntheticsDedicatedVantagePoint","getApmSyntheticsDedicatedVantagePointOutput"], () => require("./getApmSyntheticsDedicatedVantagePoint"));

export { GetApmSyntheticsDedicatedVantagePointsArgs, GetApmSyntheticsDedicatedVantagePointsResult, GetApmSyntheticsDedicatedVantagePointsOutputArgs } from "./getApmSyntheticsDedicatedVantagePoints";
export const getApmSyntheticsDedicatedVantagePoints: typeof import("./getApmSyntheticsDedicatedVantagePoints").getApmSyntheticsDedicatedVantagePoints = null as any;
export const getApmSyntheticsDedicatedVantagePointsOutput: typeof import("./getApmSyntheticsDedicatedVantagePoints").getApmSyntheticsDedicatedVantagePointsOutput = null as any;
utilities.lazyLoad(exports, ["getApmSyntheticsDedicatedVantagePoints","getApmSyntheticsDedicatedVantagePointsOutput"], () => require("./getApmSyntheticsDedicatedVantagePoints"));

export { GetApmSyntheticsMonitorArgs, GetApmSyntheticsMonitorResult, GetApmSyntheticsMonitorOutputArgs } from "./getApmSyntheticsMonitor";
export const getApmSyntheticsMonitor: typeof import("./getApmSyntheticsMonitor").getApmSyntheticsMonitor = null as any;
export const getApmSyntheticsMonitorOutput: typeof import("./getApmSyntheticsMonitor").getApmSyntheticsMonitorOutput = null as any;
utilities.lazyLoad(exports, ["getApmSyntheticsMonitor","getApmSyntheticsMonitorOutput"], () => require("./getApmSyntheticsMonitor"));

export { GetApmSyntheticsMonitorsArgs, GetApmSyntheticsMonitorsResult, GetApmSyntheticsMonitorsOutputArgs } from "./getApmSyntheticsMonitors";
export const getApmSyntheticsMonitors: typeof import("./getApmSyntheticsMonitors").getApmSyntheticsMonitors = null as any;
export const getApmSyntheticsMonitorsOutput: typeof import("./getApmSyntheticsMonitors").getApmSyntheticsMonitorsOutput = null as any;
utilities.lazyLoad(exports, ["getApmSyntheticsMonitors","getApmSyntheticsMonitorsOutput"], () => require("./getApmSyntheticsMonitors"));

export { GetApmSyntheticsOnPremiseVantagePointArgs, GetApmSyntheticsOnPremiseVantagePointResult, GetApmSyntheticsOnPremiseVantagePointOutputArgs } from "./getApmSyntheticsOnPremiseVantagePoint";
export const getApmSyntheticsOnPremiseVantagePoint: typeof import("./getApmSyntheticsOnPremiseVantagePoint").getApmSyntheticsOnPremiseVantagePoint = null as any;
export const getApmSyntheticsOnPremiseVantagePointOutput: typeof import("./getApmSyntheticsOnPremiseVantagePoint").getApmSyntheticsOnPremiseVantagePointOutput = null as any;
utilities.lazyLoad(exports, ["getApmSyntheticsOnPremiseVantagePoint","getApmSyntheticsOnPremiseVantagePointOutput"], () => require("./getApmSyntheticsOnPremiseVantagePoint"));

export { GetApmSyntheticsOnPremiseVantagePointWorkerArgs, GetApmSyntheticsOnPremiseVantagePointWorkerResult, GetApmSyntheticsOnPremiseVantagePointWorkerOutputArgs } from "./getApmSyntheticsOnPremiseVantagePointWorker";
export const getApmSyntheticsOnPremiseVantagePointWorker: typeof import("./getApmSyntheticsOnPremiseVantagePointWorker").getApmSyntheticsOnPremiseVantagePointWorker = null as any;
export const getApmSyntheticsOnPremiseVantagePointWorkerOutput: typeof import("./getApmSyntheticsOnPremiseVantagePointWorker").getApmSyntheticsOnPremiseVantagePointWorkerOutput = null as any;
utilities.lazyLoad(exports, ["getApmSyntheticsOnPremiseVantagePointWorker","getApmSyntheticsOnPremiseVantagePointWorkerOutput"], () => require("./getApmSyntheticsOnPremiseVantagePointWorker"));

export { GetApmSyntheticsOnPremiseVantagePointWorkersArgs, GetApmSyntheticsOnPremiseVantagePointWorkersResult, GetApmSyntheticsOnPremiseVantagePointWorkersOutputArgs } from "./getApmSyntheticsOnPremiseVantagePointWorkers";
export const getApmSyntheticsOnPremiseVantagePointWorkers: typeof import("./getApmSyntheticsOnPremiseVantagePointWorkers").getApmSyntheticsOnPremiseVantagePointWorkers = null as any;
export const getApmSyntheticsOnPremiseVantagePointWorkersOutput: typeof import("./getApmSyntheticsOnPremiseVantagePointWorkers").getApmSyntheticsOnPremiseVantagePointWorkersOutput = null as any;
utilities.lazyLoad(exports, ["getApmSyntheticsOnPremiseVantagePointWorkers","getApmSyntheticsOnPremiseVantagePointWorkersOutput"], () => require("./getApmSyntheticsOnPremiseVantagePointWorkers"));

export { GetApmSyntheticsOnPremiseVantagePointsArgs, GetApmSyntheticsOnPremiseVantagePointsResult, GetApmSyntheticsOnPremiseVantagePointsOutputArgs } from "./getApmSyntheticsOnPremiseVantagePoints";
export const getApmSyntheticsOnPremiseVantagePoints: typeof import("./getApmSyntheticsOnPremiseVantagePoints").getApmSyntheticsOnPremiseVantagePoints = null as any;
export const getApmSyntheticsOnPremiseVantagePointsOutput: typeof import("./getApmSyntheticsOnPremiseVantagePoints").getApmSyntheticsOnPremiseVantagePointsOutput = null as any;
utilities.lazyLoad(exports, ["getApmSyntheticsOnPremiseVantagePoints","getApmSyntheticsOnPremiseVantagePointsOutput"], () => require("./getApmSyntheticsOnPremiseVantagePoints"));

export { GetApmSyntheticsPublicVantagePointArgs, GetApmSyntheticsPublicVantagePointResult, GetApmSyntheticsPublicVantagePointOutputArgs } from "./getApmSyntheticsPublicVantagePoint";
export const getApmSyntheticsPublicVantagePoint: typeof import("./getApmSyntheticsPublicVantagePoint").getApmSyntheticsPublicVantagePoint = null as any;
export const getApmSyntheticsPublicVantagePointOutput: typeof import("./getApmSyntheticsPublicVantagePoint").getApmSyntheticsPublicVantagePointOutput = null as any;
utilities.lazyLoad(exports, ["getApmSyntheticsPublicVantagePoint","getApmSyntheticsPublicVantagePointOutput"], () => require("./getApmSyntheticsPublicVantagePoint"));

export { GetApmSyntheticsPublicVantagePointsArgs, GetApmSyntheticsPublicVantagePointsResult, GetApmSyntheticsPublicVantagePointsOutputArgs } from "./getApmSyntheticsPublicVantagePoints";
export const getApmSyntheticsPublicVantagePoints: typeof import("./getApmSyntheticsPublicVantagePoints").getApmSyntheticsPublicVantagePoints = null as any;
export const getApmSyntheticsPublicVantagePointsOutput: typeof import("./getApmSyntheticsPublicVantagePoints").getApmSyntheticsPublicVantagePointsOutput = null as any;
utilities.lazyLoad(exports, ["getApmSyntheticsPublicVantagePoints","getApmSyntheticsPublicVantagePointsOutput"], () => require("./getApmSyntheticsPublicVantagePoints"));

export { GetApmSyntheticsResultArgs, GetApmSyntheticsResultResult, GetApmSyntheticsResultOutputArgs } from "./getApmSyntheticsResult";
export const getApmSyntheticsResult: typeof import("./getApmSyntheticsResult").getApmSyntheticsResult = null as any;
export const getApmSyntheticsResultOutput: typeof import("./getApmSyntheticsResult").getApmSyntheticsResultOutput = null as any;
utilities.lazyLoad(exports, ["getApmSyntheticsResult","getApmSyntheticsResultOutput"], () => require("./getApmSyntheticsResult"));

export { GetApmSyntheticsScriptArgs, GetApmSyntheticsScriptResult, GetApmSyntheticsScriptOutputArgs } from "./getApmSyntheticsScript";
export const getApmSyntheticsScript: typeof import("./getApmSyntheticsScript").getApmSyntheticsScript = null as any;
export const getApmSyntheticsScriptOutput: typeof import("./getApmSyntheticsScript").getApmSyntheticsScriptOutput = null as any;
utilities.lazyLoad(exports, ["getApmSyntheticsScript","getApmSyntheticsScriptOutput"], () => require("./getApmSyntheticsScript"));

export { GetApmSyntheticsScriptsArgs, GetApmSyntheticsScriptsResult, GetApmSyntheticsScriptsOutputArgs } from "./getApmSyntheticsScripts";
export const getApmSyntheticsScripts: typeof import("./getApmSyntheticsScripts").getApmSyntheticsScripts = null as any;
export const getApmSyntheticsScriptsOutput: typeof import("./getApmSyntheticsScripts").getApmSyntheticsScriptsOutput = null as any;
utilities.lazyLoad(exports, ["getApmSyntheticsScripts","getApmSyntheticsScriptsOutput"], () => require("./getApmSyntheticsScripts"));

export { GetApmTracesQueryQuickPicksArgs, GetApmTracesQueryQuickPicksResult, GetApmTracesQueryQuickPicksOutputArgs } from "./getApmTracesQueryQuickPicks";
export const getApmTracesQueryQuickPicks: typeof import("./getApmTracesQueryQuickPicks").getApmTracesQueryQuickPicks = null as any;
export const getApmTracesQueryQuickPicksOutput: typeof import("./getApmTracesQueryQuickPicks").getApmTracesQueryQuickPicksOutput = null as any;
utilities.lazyLoad(exports, ["getApmTracesQueryQuickPicks","getApmTracesQueryQuickPicksOutput"], () => require("./getApmTracesQueryQuickPicks"));

export { GetApmTracesTraceArgs, GetApmTracesTraceResult, GetApmTracesTraceOutputArgs } from "./getApmTracesTrace";
export const getApmTracesTrace: typeof import("./getApmTracesTrace").getApmTracesTrace = null as any;
export const getApmTracesTraceOutput: typeof import("./getApmTracesTrace").getApmTracesTraceOutput = null as any;
utilities.lazyLoad(exports, ["getApmTracesTrace","getApmTracesTraceOutput"], () => require("./getApmTracesTrace"));

export { GetApmTracesTraceAggregatedSnapshotDataArgs, GetApmTracesTraceAggregatedSnapshotDataResult, GetApmTracesTraceAggregatedSnapshotDataOutputArgs } from "./getApmTracesTraceAggregatedSnapshotData";
export const getApmTracesTraceAggregatedSnapshotData: typeof import("./getApmTracesTraceAggregatedSnapshotData").getApmTracesTraceAggregatedSnapshotData = null as any;
export const getApmTracesTraceAggregatedSnapshotDataOutput: typeof import("./getApmTracesTraceAggregatedSnapshotData").getApmTracesTraceAggregatedSnapshotDataOutput = null as any;
utilities.lazyLoad(exports, ["getApmTracesTraceAggregatedSnapshotData","getApmTracesTraceAggregatedSnapshotDataOutput"], () => require("./getApmTracesTraceAggregatedSnapshotData"));

export { GetApmTracesTraceSnapshotDataArgs, GetApmTracesTraceSnapshotDataResult, GetApmTracesTraceSnapshotDataOutputArgs } from "./getApmTracesTraceSnapshotData";
export const getApmTracesTraceSnapshotData: typeof import("./getApmTracesTraceSnapshotData").getApmTracesTraceSnapshotData = null as any;
export const getApmTracesTraceSnapshotDataOutput: typeof import("./getApmTracesTraceSnapshotData").getApmTracesTraceSnapshotDataOutput = null as any;
utilities.lazyLoad(exports, ["getApmTracesTraceSnapshotData","getApmTracesTraceSnapshotDataOutput"], () => require("./getApmTracesTraceSnapshotData"));

export { GetAppmgmtControlMonitoredInstanceArgs, GetAppmgmtControlMonitoredInstanceResult, GetAppmgmtControlMonitoredInstanceOutputArgs } from "./getAppmgmtControlMonitoredInstance";
export const getAppmgmtControlMonitoredInstance: typeof import("./getAppmgmtControlMonitoredInstance").getAppmgmtControlMonitoredInstance = null as any;
export const getAppmgmtControlMonitoredInstanceOutput: typeof import("./getAppmgmtControlMonitoredInstance").getAppmgmtControlMonitoredInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getAppmgmtControlMonitoredInstance","getAppmgmtControlMonitoredInstanceOutput"], () => require("./getAppmgmtControlMonitoredInstance"));

export { GetAppmgmtControlMonitoredInstancesArgs, GetAppmgmtControlMonitoredInstancesResult, GetAppmgmtControlMonitoredInstancesOutputArgs } from "./getAppmgmtControlMonitoredInstances";
export const getAppmgmtControlMonitoredInstances: typeof import("./getAppmgmtControlMonitoredInstances").getAppmgmtControlMonitoredInstances = null as any;
export const getAppmgmtControlMonitoredInstancesOutput: typeof import("./getAppmgmtControlMonitoredInstances").getAppmgmtControlMonitoredInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getAppmgmtControlMonitoredInstances","getAppmgmtControlMonitoredInstancesOutput"], () => require("./getAppmgmtControlMonitoredInstances"));

export { GetArtifactsContainerConfigurationArgs, GetArtifactsContainerConfigurationResult, GetArtifactsContainerConfigurationOutputArgs } from "./getArtifactsContainerConfiguration";
export const getArtifactsContainerConfiguration: typeof import("./getArtifactsContainerConfiguration").getArtifactsContainerConfiguration = null as any;
export const getArtifactsContainerConfigurationOutput: typeof import("./getArtifactsContainerConfiguration").getArtifactsContainerConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getArtifactsContainerConfiguration","getArtifactsContainerConfigurationOutput"], () => require("./getArtifactsContainerConfiguration"));

export { GetArtifactsContainerImageArgs, GetArtifactsContainerImageResult, GetArtifactsContainerImageOutputArgs } from "./getArtifactsContainerImage";
export const getArtifactsContainerImage: typeof import("./getArtifactsContainerImage").getArtifactsContainerImage = null as any;
export const getArtifactsContainerImageOutput: typeof import("./getArtifactsContainerImage").getArtifactsContainerImageOutput = null as any;
utilities.lazyLoad(exports, ["getArtifactsContainerImage","getArtifactsContainerImageOutput"], () => require("./getArtifactsContainerImage"));

export { GetArtifactsContainerImageSignatureArgs, GetArtifactsContainerImageSignatureResult, GetArtifactsContainerImageSignatureOutputArgs } from "./getArtifactsContainerImageSignature";
export const getArtifactsContainerImageSignature: typeof import("./getArtifactsContainerImageSignature").getArtifactsContainerImageSignature = null as any;
export const getArtifactsContainerImageSignatureOutput: typeof import("./getArtifactsContainerImageSignature").getArtifactsContainerImageSignatureOutput = null as any;
utilities.lazyLoad(exports, ["getArtifactsContainerImageSignature","getArtifactsContainerImageSignatureOutput"], () => require("./getArtifactsContainerImageSignature"));

export { GetArtifactsContainerImageSignaturesArgs, GetArtifactsContainerImageSignaturesResult, GetArtifactsContainerImageSignaturesOutputArgs } from "./getArtifactsContainerImageSignatures";
export const getArtifactsContainerImageSignatures: typeof import("./getArtifactsContainerImageSignatures").getArtifactsContainerImageSignatures = null as any;
export const getArtifactsContainerImageSignaturesOutput: typeof import("./getArtifactsContainerImageSignatures").getArtifactsContainerImageSignaturesOutput = null as any;
utilities.lazyLoad(exports, ["getArtifactsContainerImageSignatures","getArtifactsContainerImageSignaturesOutput"], () => require("./getArtifactsContainerImageSignatures"));

export { GetArtifactsContainerImagesArgs, GetArtifactsContainerImagesResult, GetArtifactsContainerImagesOutputArgs } from "./getArtifactsContainerImages";
export const getArtifactsContainerImages: typeof import("./getArtifactsContainerImages").getArtifactsContainerImages = null as any;
export const getArtifactsContainerImagesOutput: typeof import("./getArtifactsContainerImages").getArtifactsContainerImagesOutput = null as any;
utilities.lazyLoad(exports, ["getArtifactsContainerImages","getArtifactsContainerImagesOutput"], () => require("./getArtifactsContainerImages"));

export { GetArtifactsContainerRepositoriesArgs, GetArtifactsContainerRepositoriesResult, GetArtifactsContainerRepositoriesOutputArgs } from "./getArtifactsContainerRepositories";
export const getArtifactsContainerRepositories: typeof import("./getArtifactsContainerRepositories").getArtifactsContainerRepositories = null as any;
export const getArtifactsContainerRepositoriesOutput: typeof import("./getArtifactsContainerRepositories").getArtifactsContainerRepositoriesOutput = null as any;
utilities.lazyLoad(exports, ["getArtifactsContainerRepositories","getArtifactsContainerRepositoriesOutput"], () => require("./getArtifactsContainerRepositories"));

export { GetArtifactsContainerRepositoryArgs, GetArtifactsContainerRepositoryResult, GetArtifactsContainerRepositoryOutputArgs } from "./getArtifactsContainerRepository";
export const getArtifactsContainerRepository: typeof import("./getArtifactsContainerRepository").getArtifactsContainerRepository = null as any;
export const getArtifactsContainerRepositoryOutput: typeof import("./getArtifactsContainerRepository").getArtifactsContainerRepositoryOutput = null as any;
utilities.lazyLoad(exports, ["getArtifactsContainerRepository","getArtifactsContainerRepositoryOutput"], () => require("./getArtifactsContainerRepository"));

export { GetArtifactsGenericArtifactArgs, GetArtifactsGenericArtifactResult, GetArtifactsGenericArtifactOutputArgs } from "./getArtifactsGenericArtifact";
export const getArtifactsGenericArtifact: typeof import("./getArtifactsGenericArtifact").getArtifactsGenericArtifact = null as any;
export const getArtifactsGenericArtifactOutput: typeof import("./getArtifactsGenericArtifact").getArtifactsGenericArtifactOutput = null as any;
utilities.lazyLoad(exports, ["getArtifactsGenericArtifact","getArtifactsGenericArtifactOutput"], () => require("./getArtifactsGenericArtifact"));

export { GetArtifactsGenericArtifactsArgs, GetArtifactsGenericArtifactsResult, GetArtifactsGenericArtifactsOutputArgs } from "./getArtifactsGenericArtifacts";
export const getArtifactsGenericArtifacts: typeof import("./getArtifactsGenericArtifacts").getArtifactsGenericArtifacts = null as any;
export const getArtifactsGenericArtifactsOutput: typeof import("./getArtifactsGenericArtifacts").getArtifactsGenericArtifactsOutput = null as any;
utilities.lazyLoad(exports, ["getArtifactsGenericArtifacts","getArtifactsGenericArtifactsOutput"], () => require("./getArtifactsGenericArtifacts"));

export { GetArtifactsRepositoriesArgs, GetArtifactsRepositoriesResult, GetArtifactsRepositoriesOutputArgs } from "./getArtifactsRepositories";
export const getArtifactsRepositories: typeof import("./getArtifactsRepositories").getArtifactsRepositories = null as any;
export const getArtifactsRepositoriesOutput: typeof import("./getArtifactsRepositories").getArtifactsRepositoriesOutput = null as any;
utilities.lazyLoad(exports, ["getArtifactsRepositories","getArtifactsRepositoriesOutput"], () => require("./getArtifactsRepositories"));

export { GetArtifactsRepositoryArgs, GetArtifactsRepositoryResult, GetArtifactsRepositoryOutputArgs } from "./getArtifactsRepository";
export const getArtifactsRepository: typeof import("./getArtifactsRepository").getArtifactsRepository = null as any;
export const getArtifactsRepositoryOutput: typeof import("./getArtifactsRepository").getArtifactsRepositoryOutput = null as any;
utilities.lazyLoad(exports, ["getArtifactsRepository","getArtifactsRepositoryOutput"], () => require("./getArtifactsRepository"));

export { GetAuditConfigurationArgs, GetAuditConfigurationResult, GetAuditConfigurationOutputArgs } from "./getAuditConfiguration";
export const getAuditConfiguration: typeof import("./getAuditConfiguration").getAuditConfiguration = null as any;
export const getAuditConfigurationOutput: typeof import("./getAuditConfiguration").getAuditConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getAuditConfiguration","getAuditConfigurationOutput"], () => require("./getAuditConfiguration"));

export { GetAuditEventsArgs, GetAuditEventsResult, GetAuditEventsOutputArgs } from "./getAuditEvents";
export const getAuditEvents: typeof import("./getAuditEvents").getAuditEvents = null as any;
export const getAuditEventsOutput: typeof import("./getAuditEvents").getAuditEventsOutput = null as any;
utilities.lazyLoad(exports, ["getAuditEvents","getAuditEventsOutput"], () => require("./getAuditEvents"));

export { GetAutoscalingAutoScalingConfigurationArgs, GetAutoscalingAutoScalingConfigurationResult, GetAutoscalingAutoScalingConfigurationOutputArgs } from "./getAutoscalingAutoScalingConfiguration";
export const getAutoscalingAutoScalingConfiguration: typeof import("./getAutoscalingAutoScalingConfiguration").getAutoscalingAutoScalingConfiguration = null as any;
export const getAutoscalingAutoScalingConfigurationOutput: typeof import("./getAutoscalingAutoScalingConfiguration").getAutoscalingAutoScalingConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getAutoscalingAutoScalingConfiguration","getAutoscalingAutoScalingConfigurationOutput"], () => require("./getAutoscalingAutoScalingConfiguration"));

export { GetAutoscalingAutoScalingConfigurationsArgs, GetAutoscalingAutoScalingConfigurationsResult, GetAutoscalingAutoScalingConfigurationsOutputArgs } from "./getAutoscalingAutoScalingConfigurations";
export const getAutoscalingAutoScalingConfigurations: typeof import("./getAutoscalingAutoScalingConfigurations").getAutoscalingAutoScalingConfigurations = null as any;
export const getAutoscalingAutoScalingConfigurationsOutput: typeof import("./getAutoscalingAutoScalingConfigurations").getAutoscalingAutoScalingConfigurationsOutput = null as any;
utilities.lazyLoad(exports, ["getAutoscalingAutoScalingConfigurations","getAutoscalingAutoScalingConfigurationsOutput"], () => require("./getAutoscalingAutoScalingConfigurations"));

export { GetBastionBastionArgs, GetBastionBastionResult, GetBastionBastionOutputArgs } from "./getBastionBastion";
export const getBastionBastion: typeof import("./getBastionBastion").getBastionBastion = null as any;
export const getBastionBastionOutput: typeof import("./getBastionBastion").getBastionBastionOutput = null as any;
utilities.lazyLoad(exports, ["getBastionBastion","getBastionBastionOutput"], () => require("./getBastionBastion"));

export { GetBastionBastionsArgs, GetBastionBastionsResult, GetBastionBastionsOutputArgs } from "./getBastionBastions";
export const getBastionBastions: typeof import("./getBastionBastions").getBastionBastions = null as any;
export const getBastionBastionsOutput: typeof import("./getBastionBastions").getBastionBastionsOutput = null as any;
utilities.lazyLoad(exports, ["getBastionBastions","getBastionBastionsOutput"], () => require("./getBastionBastions"));

export { GetBastionSessionArgs, GetBastionSessionResult, GetBastionSessionOutputArgs } from "./getBastionSession";
export const getBastionSession: typeof import("./getBastionSession").getBastionSession = null as any;
export const getBastionSessionOutput: typeof import("./getBastionSession").getBastionSessionOutput = null as any;
utilities.lazyLoad(exports, ["getBastionSession","getBastionSessionOutput"], () => require("./getBastionSession"));

export { GetBastionSessionsArgs, GetBastionSessionsResult, GetBastionSessionsOutputArgs } from "./getBastionSessions";
export const getBastionSessions: typeof import("./getBastionSessions").getBastionSessions = null as any;
export const getBastionSessionsOutput: typeof import("./getBastionSessions").getBastionSessionsOutput = null as any;
utilities.lazyLoad(exports, ["getBastionSessions","getBastionSessionsOutput"], () => require("./getBastionSessions"));

export { GetBdsAutoScalingConfigurationArgs, GetBdsAutoScalingConfigurationResult, GetBdsAutoScalingConfigurationOutputArgs } from "./getBdsAutoScalingConfiguration";
export const getBdsAutoScalingConfiguration: typeof import("./getBdsAutoScalingConfiguration").getBdsAutoScalingConfiguration = null as any;
export const getBdsAutoScalingConfigurationOutput: typeof import("./getBdsAutoScalingConfiguration").getBdsAutoScalingConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getBdsAutoScalingConfiguration","getBdsAutoScalingConfigurationOutput"], () => require("./getBdsAutoScalingConfiguration"));

export { GetBdsAutoScalingConfigurationsArgs, GetBdsAutoScalingConfigurationsResult, GetBdsAutoScalingConfigurationsOutputArgs } from "./getBdsAutoScalingConfigurations";
export const getBdsAutoScalingConfigurations: typeof import("./getBdsAutoScalingConfigurations").getBdsAutoScalingConfigurations = null as any;
export const getBdsAutoScalingConfigurationsOutput: typeof import("./getBdsAutoScalingConfigurations").getBdsAutoScalingConfigurationsOutput = null as any;
utilities.lazyLoad(exports, ["getBdsAutoScalingConfigurations","getBdsAutoScalingConfigurationsOutput"], () => require("./getBdsAutoScalingConfigurations"));

export { GetBdsBdsInstanceArgs, GetBdsBdsInstanceResult, GetBdsBdsInstanceOutputArgs } from "./getBdsBdsInstance";
export const getBdsBdsInstance: typeof import("./getBdsBdsInstance").getBdsBdsInstance = null as any;
export const getBdsBdsInstanceOutput: typeof import("./getBdsBdsInstance").getBdsBdsInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getBdsBdsInstance","getBdsBdsInstanceOutput"], () => require("./getBdsBdsInstance"));

export { GetBdsBdsInstanceApiKeyArgs, GetBdsBdsInstanceApiKeyResult, GetBdsBdsInstanceApiKeyOutputArgs } from "./getBdsBdsInstanceApiKey";
export const getBdsBdsInstanceApiKey: typeof import("./getBdsBdsInstanceApiKey").getBdsBdsInstanceApiKey = null as any;
export const getBdsBdsInstanceApiKeyOutput: typeof import("./getBdsBdsInstanceApiKey").getBdsBdsInstanceApiKeyOutput = null as any;
utilities.lazyLoad(exports, ["getBdsBdsInstanceApiKey","getBdsBdsInstanceApiKeyOutput"], () => require("./getBdsBdsInstanceApiKey"));

export { GetBdsBdsInstanceApiKeysArgs, GetBdsBdsInstanceApiKeysResult, GetBdsBdsInstanceApiKeysOutputArgs } from "./getBdsBdsInstanceApiKeys";
export const getBdsBdsInstanceApiKeys: typeof import("./getBdsBdsInstanceApiKeys").getBdsBdsInstanceApiKeys = null as any;
export const getBdsBdsInstanceApiKeysOutput: typeof import("./getBdsBdsInstanceApiKeys").getBdsBdsInstanceApiKeysOutput = null as any;
utilities.lazyLoad(exports, ["getBdsBdsInstanceApiKeys","getBdsBdsInstanceApiKeysOutput"], () => require("./getBdsBdsInstanceApiKeys"));

export { GetBdsBdsInstanceGetOsPatchArgs, GetBdsBdsInstanceGetOsPatchResult, GetBdsBdsInstanceGetOsPatchOutputArgs } from "./getBdsBdsInstanceGetOsPatch";
export const getBdsBdsInstanceGetOsPatch: typeof import("./getBdsBdsInstanceGetOsPatch").getBdsBdsInstanceGetOsPatch = null as any;
export const getBdsBdsInstanceGetOsPatchOutput: typeof import("./getBdsBdsInstanceGetOsPatch").getBdsBdsInstanceGetOsPatchOutput = null as any;
utilities.lazyLoad(exports, ["getBdsBdsInstanceGetOsPatch","getBdsBdsInstanceGetOsPatchOutput"], () => require("./getBdsBdsInstanceGetOsPatch"));

export { GetBdsBdsInstanceListOsPatchesArgs, GetBdsBdsInstanceListOsPatchesResult, GetBdsBdsInstanceListOsPatchesOutputArgs } from "./getBdsBdsInstanceListOsPatches";
export const getBdsBdsInstanceListOsPatches: typeof import("./getBdsBdsInstanceListOsPatches").getBdsBdsInstanceListOsPatches = null as any;
export const getBdsBdsInstanceListOsPatchesOutput: typeof import("./getBdsBdsInstanceListOsPatches").getBdsBdsInstanceListOsPatchesOutput = null as any;
utilities.lazyLoad(exports, ["getBdsBdsInstanceListOsPatches","getBdsBdsInstanceListOsPatchesOutput"], () => require("./getBdsBdsInstanceListOsPatches"));

export { GetBdsBdsInstanceMetastoreConfigArgs, GetBdsBdsInstanceMetastoreConfigResult, GetBdsBdsInstanceMetastoreConfigOutputArgs } from "./getBdsBdsInstanceMetastoreConfig";
export const getBdsBdsInstanceMetastoreConfig: typeof import("./getBdsBdsInstanceMetastoreConfig").getBdsBdsInstanceMetastoreConfig = null as any;
export const getBdsBdsInstanceMetastoreConfigOutput: typeof import("./getBdsBdsInstanceMetastoreConfig").getBdsBdsInstanceMetastoreConfigOutput = null as any;
utilities.lazyLoad(exports, ["getBdsBdsInstanceMetastoreConfig","getBdsBdsInstanceMetastoreConfigOutput"], () => require("./getBdsBdsInstanceMetastoreConfig"));

export { GetBdsBdsInstanceMetastoreConfigsArgs, GetBdsBdsInstanceMetastoreConfigsResult, GetBdsBdsInstanceMetastoreConfigsOutputArgs } from "./getBdsBdsInstanceMetastoreConfigs";
export const getBdsBdsInstanceMetastoreConfigs: typeof import("./getBdsBdsInstanceMetastoreConfigs").getBdsBdsInstanceMetastoreConfigs = null as any;
export const getBdsBdsInstanceMetastoreConfigsOutput: typeof import("./getBdsBdsInstanceMetastoreConfigs").getBdsBdsInstanceMetastoreConfigsOutput = null as any;
utilities.lazyLoad(exports, ["getBdsBdsInstanceMetastoreConfigs","getBdsBdsInstanceMetastoreConfigsOutput"], () => require("./getBdsBdsInstanceMetastoreConfigs"));

export { GetBdsBdsInstancePatchHistoriesArgs, GetBdsBdsInstancePatchHistoriesResult, GetBdsBdsInstancePatchHistoriesOutputArgs } from "./getBdsBdsInstancePatchHistories";
export const getBdsBdsInstancePatchHistories: typeof import("./getBdsBdsInstancePatchHistories").getBdsBdsInstancePatchHistories = null as any;
export const getBdsBdsInstancePatchHistoriesOutput: typeof import("./getBdsBdsInstancePatchHistories").getBdsBdsInstancePatchHistoriesOutput = null as any;
utilities.lazyLoad(exports, ["getBdsBdsInstancePatchHistories","getBdsBdsInstancePatchHistoriesOutput"], () => require("./getBdsBdsInstancePatchHistories"));

export { GetBdsBdsInstancePatchesArgs, GetBdsBdsInstancePatchesResult, GetBdsBdsInstancePatchesOutputArgs } from "./getBdsBdsInstancePatches";
export const getBdsBdsInstancePatches: typeof import("./getBdsBdsInstancePatches").getBdsBdsInstancePatches = null as any;
export const getBdsBdsInstancePatchesOutput: typeof import("./getBdsBdsInstancePatches").getBdsBdsInstancePatchesOutput = null as any;
utilities.lazyLoad(exports, ["getBdsBdsInstancePatches","getBdsBdsInstancePatchesOutput"], () => require("./getBdsBdsInstancePatches"));

export { GetBdsBdsInstancesArgs, GetBdsBdsInstancesResult, GetBdsBdsInstancesOutputArgs } from "./getBdsBdsInstances";
export const getBdsBdsInstances: typeof import("./getBdsBdsInstances").getBdsBdsInstances = null as any;
export const getBdsBdsInstancesOutput: typeof import("./getBdsBdsInstances").getBdsBdsInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getBdsBdsInstances","getBdsBdsInstancesOutput"], () => require("./getBdsBdsInstances"));

export { GetBlockchainBlockchainPlatformArgs, GetBlockchainBlockchainPlatformResult, GetBlockchainBlockchainPlatformOutputArgs } from "./getBlockchainBlockchainPlatform";
export const getBlockchainBlockchainPlatform: typeof import("./getBlockchainBlockchainPlatform").getBlockchainBlockchainPlatform = null as any;
export const getBlockchainBlockchainPlatformOutput: typeof import("./getBlockchainBlockchainPlatform").getBlockchainBlockchainPlatformOutput = null as any;
utilities.lazyLoad(exports, ["getBlockchainBlockchainPlatform","getBlockchainBlockchainPlatformOutput"], () => require("./getBlockchainBlockchainPlatform"));

export { GetBlockchainBlockchainPlatformPatchesArgs, GetBlockchainBlockchainPlatformPatchesResult, GetBlockchainBlockchainPlatformPatchesOutputArgs } from "./getBlockchainBlockchainPlatformPatches";
export const getBlockchainBlockchainPlatformPatches: typeof import("./getBlockchainBlockchainPlatformPatches").getBlockchainBlockchainPlatformPatches = null as any;
export const getBlockchainBlockchainPlatformPatchesOutput: typeof import("./getBlockchainBlockchainPlatformPatches").getBlockchainBlockchainPlatformPatchesOutput = null as any;
utilities.lazyLoad(exports, ["getBlockchainBlockchainPlatformPatches","getBlockchainBlockchainPlatformPatchesOutput"], () => require("./getBlockchainBlockchainPlatformPatches"));

export { GetBlockchainBlockchainPlatformsArgs, GetBlockchainBlockchainPlatformsResult, GetBlockchainBlockchainPlatformsOutputArgs } from "./getBlockchainBlockchainPlatforms";
export const getBlockchainBlockchainPlatforms: typeof import("./getBlockchainBlockchainPlatforms").getBlockchainBlockchainPlatforms = null as any;
export const getBlockchainBlockchainPlatformsOutput: typeof import("./getBlockchainBlockchainPlatforms").getBlockchainBlockchainPlatformsOutput = null as any;
utilities.lazyLoad(exports, ["getBlockchainBlockchainPlatforms","getBlockchainBlockchainPlatformsOutput"], () => require("./getBlockchainBlockchainPlatforms"));

export { GetBlockchainOsnArgs, GetBlockchainOsnResult, GetBlockchainOsnOutputArgs } from "./getBlockchainOsn";
export const getBlockchainOsn: typeof import("./getBlockchainOsn").getBlockchainOsn = null as any;
export const getBlockchainOsnOutput: typeof import("./getBlockchainOsn").getBlockchainOsnOutput = null as any;
utilities.lazyLoad(exports, ["getBlockchainOsn","getBlockchainOsnOutput"], () => require("./getBlockchainOsn"));

export { GetBlockchainOsnsArgs, GetBlockchainOsnsResult, GetBlockchainOsnsOutputArgs } from "./getBlockchainOsns";
export const getBlockchainOsns: typeof import("./getBlockchainOsns").getBlockchainOsns = null as any;
export const getBlockchainOsnsOutput: typeof import("./getBlockchainOsns").getBlockchainOsnsOutput = null as any;
utilities.lazyLoad(exports, ["getBlockchainOsns","getBlockchainOsnsOutput"], () => require("./getBlockchainOsns"));

export { GetBlockchainPeerArgs, GetBlockchainPeerResult, GetBlockchainPeerOutputArgs } from "./getBlockchainPeer";
export const getBlockchainPeer: typeof import("./getBlockchainPeer").getBlockchainPeer = null as any;
export const getBlockchainPeerOutput: typeof import("./getBlockchainPeer").getBlockchainPeerOutput = null as any;
utilities.lazyLoad(exports, ["getBlockchainPeer","getBlockchainPeerOutput"], () => require("./getBlockchainPeer"));

export { GetBlockchainPeersArgs, GetBlockchainPeersResult, GetBlockchainPeersOutputArgs } from "./getBlockchainPeers";
export const getBlockchainPeers: typeof import("./getBlockchainPeers").getBlockchainPeers = null as any;
export const getBlockchainPeersOutput: typeof import("./getBlockchainPeers").getBlockchainPeersOutput = null as any;
utilities.lazyLoad(exports, ["getBlockchainPeers","getBlockchainPeersOutput"], () => require("./getBlockchainPeers"));

export { GetBudgetAlertRuleArgs, GetBudgetAlertRuleResult, GetBudgetAlertRuleOutputArgs } from "./getBudgetAlertRule";
export const getBudgetAlertRule: typeof import("./getBudgetAlertRule").getBudgetAlertRule = null as any;
export const getBudgetAlertRuleOutput: typeof import("./getBudgetAlertRule").getBudgetAlertRuleOutput = null as any;
utilities.lazyLoad(exports, ["getBudgetAlertRule","getBudgetAlertRuleOutput"], () => require("./getBudgetAlertRule"));

export { GetBudgetAlertRulesArgs, GetBudgetAlertRulesResult, GetBudgetAlertRulesOutputArgs } from "./getBudgetAlertRules";
export const getBudgetAlertRules: typeof import("./getBudgetAlertRules").getBudgetAlertRules = null as any;
export const getBudgetAlertRulesOutput: typeof import("./getBudgetAlertRules").getBudgetAlertRulesOutput = null as any;
utilities.lazyLoad(exports, ["getBudgetAlertRules","getBudgetAlertRulesOutput"], () => require("./getBudgetAlertRules"));

export { GetBudgetBudgetArgs, GetBudgetBudgetResult, GetBudgetBudgetOutputArgs } from "./getBudgetBudget";
export const getBudgetBudget: typeof import("./getBudgetBudget").getBudgetBudget = null as any;
export const getBudgetBudgetOutput: typeof import("./getBudgetBudget").getBudgetBudgetOutput = null as any;
utilities.lazyLoad(exports, ["getBudgetBudget","getBudgetBudgetOutput"], () => require("./getBudgetBudget"));

export { GetBudgetBudgetsArgs, GetBudgetBudgetsResult, GetBudgetBudgetsOutputArgs } from "./getBudgetBudgets";
export const getBudgetBudgets: typeof import("./getBudgetBudgets").getBudgetBudgets = null as any;
export const getBudgetBudgetsOutput: typeof import("./getBudgetBudgets").getBudgetBudgetsOutput = null as any;
utilities.lazyLoad(exports, ["getBudgetBudgets","getBudgetBudgetsOutput"], () => require("./getBudgetBudgets"));

export { GetCapacityManagementInternalOccAvailabilityCatalogsArgs, GetCapacityManagementInternalOccAvailabilityCatalogsResult, GetCapacityManagementInternalOccAvailabilityCatalogsOutputArgs } from "./getCapacityManagementInternalOccAvailabilityCatalogs";
export const getCapacityManagementInternalOccAvailabilityCatalogs: typeof import("./getCapacityManagementInternalOccAvailabilityCatalogs").getCapacityManagementInternalOccAvailabilityCatalogs = null as any;
export const getCapacityManagementInternalOccAvailabilityCatalogsOutput: typeof import("./getCapacityManagementInternalOccAvailabilityCatalogs").getCapacityManagementInternalOccAvailabilityCatalogsOutput = null as any;
utilities.lazyLoad(exports, ["getCapacityManagementInternalOccAvailabilityCatalogs","getCapacityManagementInternalOccAvailabilityCatalogsOutput"], () => require("./getCapacityManagementInternalOccAvailabilityCatalogs"));

export { GetCapacityManagementOccAvailabilityCatalogArgs, GetCapacityManagementOccAvailabilityCatalogResult, GetCapacityManagementOccAvailabilityCatalogOutputArgs } from "./getCapacityManagementOccAvailabilityCatalog";
export const getCapacityManagementOccAvailabilityCatalog: typeof import("./getCapacityManagementOccAvailabilityCatalog").getCapacityManagementOccAvailabilityCatalog = null as any;
export const getCapacityManagementOccAvailabilityCatalogOutput: typeof import("./getCapacityManagementOccAvailabilityCatalog").getCapacityManagementOccAvailabilityCatalogOutput = null as any;
utilities.lazyLoad(exports, ["getCapacityManagementOccAvailabilityCatalog","getCapacityManagementOccAvailabilityCatalogOutput"], () => require("./getCapacityManagementOccAvailabilityCatalog"));

export { GetCapacityManagementOccAvailabilityCatalogContentArgs, GetCapacityManagementOccAvailabilityCatalogContentResult, GetCapacityManagementOccAvailabilityCatalogContentOutputArgs } from "./getCapacityManagementOccAvailabilityCatalogContent";
export const getCapacityManagementOccAvailabilityCatalogContent: typeof import("./getCapacityManagementOccAvailabilityCatalogContent").getCapacityManagementOccAvailabilityCatalogContent = null as any;
export const getCapacityManagementOccAvailabilityCatalogContentOutput: typeof import("./getCapacityManagementOccAvailabilityCatalogContent").getCapacityManagementOccAvailabilityCatalogContentOutput = null as any;
utilities.lazyLoad(exports, ["getCapacityManagementOccAvailabilityCatalogContent","getCapacityManagementOccAvailabilityCatalogContentOutput"], () => require("./getCapacityManagementOccAvailabilityCatalogContent"));

export { GetCapacityManagementOccAvailabilityCatalogOccAvailabilitiesArgs, GetCapacityManagementOccAvailabilityCatalogOccAvailabilitiesResult, GetCapacityManagementOccAvailabilityCatalogOccAvailabilitiesOutputArgs } from "./getCapacityManagementOccAvailabilityCatalogOccAvailabilities";
export const getCapacityManagementOccAvailabilityCatalogOccAvailabilities: typeof import("./getCapacityManagementOccAvailabilityCatalogOccAvailabilities").getCapacityManagementOccAvailabilityCatalogOccAvailabilities = null as any;
export const getCapacityManagementOccAvailabilityCatalogOccAvailabilitiesOutput: typeof import("./getCapacityManagementOccAvailabilityCatalogOccAvailabilities").getCapacityManagementOccAvailabilityCatalogOccAvailabilitiesOutput = null as any;
utilities.lazyLoad(exports, ["getCapacityManagementOccAvailabilityCatalogOccAvailabilities","getCapacityManagementOccAvailabilityCatalogOccAvailabilitiesOutput"], () => require("./getCapacityManagementOccAvailabilityCatalogOccAvailabilities"));

export { GetCapacityManagementOccAvailabilityCatalogsArgs, GetCapacityManagementOccAvailabilityCatalogsResult, GetCapacityManagementOccAvailabilityCatalogsOutputArgs } from "./getCapacityManagementOccAvailabilityCatalogs";
export const getCapacityManagementOccAvailabilityCatalogs: typeof import("./getCapacityManagementOccAvailabilityCatalogs").getCapacityManagementOccAvailabilityCatalogs = null as any;
export const getCapacityManagementOccAvailabilityCatalogsOutput: typeof import("./getCapacityManagementOccAvailabilityCatalogs").getCapacityManagementOccAvailabilityCatalogsOutput = null as any;
utilities.lazyLoad(exports, ["getCapacityManagementOccAvailabilityCatalogs","getCapacityManagementOccAvailabilityCatalogsOutput"], () => require("./getCapacityManagementOccAvailabilityCatalogs"));

export { GetCapacityManagementOccCapacityRequestArgs, GetCapacityManagementOccCapacityRequestResult, GetCapacityManagementOccCapacityRequestOutputArgs } from "./getCapacityManagementOccCapacityRequest";
export const getCapacityManagementOccCapacityRequest: typeof import("./getCapacityManagementOccCapacityRequest").getCapacityManagementOccCapacityRequest = null as any;
export const getCapacityManagementOccCapacityRequestOutput: typeof import("./getCapacityManagementOccCapacityRequest").getCapacityManagementOccCapacityRequestOutput = null as any;
utilities.lazyLoad(exports, ["getCapacityManagementOccCapacityRequest","getCapacityManagementOccCapacityRequestOutput"], () => require("./getCapacityManagementOccCapacityRequest"));

export { GetCapacityManagementOccCapacityRequestsArgs, GetCapacityManagementOccCapacityRequestsResult, GetCapacityManagementOccCapacityRequestsOutputArgs } from "./getCapacityManagementOccCapacityRequests";
export const getCapacityManagementOccCapacityRequests: typeof import("./getCapacityManagementOccCapacityRequests").getCapacityManagementOccCapacityRequests = null as any;
export const getCapacityManagementOccCapacityRequestsOutput: typeof import("./getCapacityManagementOccCapacityRequests").getCapacityManagementOccCapacityRequestsOutput = null as any;
utilities.lazyLoad(exports, ["getCapacityManagementOccCapacityRequests","getCapacityManagementOccCapacityRequestsOutput"], () => require("./getCapacityManagementOccCapacityRequests"));

export { GetCapacityManagementOccCustomerGroupArgs, GetCapacityManagementOccCustomerGroupResult, GetCapacityManagementOccCustomerGroupOutputArgs } from "./getCapacityManagementOccCustomerGroup";
export const getCapacityManagementOccCustomerGroup: typeof import("./getCapacityManagementOccCustomerGroup").getCapacityManagementOccCustomerGroup = null as any;
export const getCapacityManagementOccCustomerGroupOutput: typeof import("./getCapacityManagementOccCustomerGroup").getCapacityManagementOccCustomerGroupOutput = null as any;
utilities.lazyLoad(exports, ["getCapacityManagementOccCustomerGroup","getCapacityManagementOccCustomerGroupOutput"], () => require("./getCapacityManagementOccCustomerGroup"));

export { GetCapacityManagementOccCustomerGroupsArgs, GetCapacityManagementOccCustomerGroupsResult, GetCapacityManagementOccCustomerGroupsOutputArgs } from "./getCapacityManagementOccCustomerGroups";
export const getCapacityManagementOccCustomerGroups: typeof import("./getCapacityManagementOccCustomerGroups").getCapacityManagementOccCustomerGroups = null as any;
export const getCapacityManagementOccCustomerGroupsOutput: typeof import("./getCapacityManagementOccCustomerGroups").getCapacityManagementOccCustomerGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getCapacityManagementOccCustomerGroups","getCapacityManagementOccCustomerGroupsOutput"], () => require("./getCapacityManagementOccCustomerGroups"));

export { GetCertificatesManagementAssociationArgs, GetCertificatesManagementAssociationResult, GetCertificatesManagementAssociationOutputArgs } from "./getCertificatesManagementAssociation";
export const getCertificatesManagementAssociation: typeof import("./getCertificatesManagementAssociation").getCertificatesManagementAssociation = null as any;
export const getCertificatesManagementAssociationOutput: typeof import("./getCertificatesManagementAssociation").getCertificatesManagementAssociationOutput = null as any;
utilities.lazyLoad(exports, ["getCertificatesManagementAssociation","getCertificatesManagementAssociationOutput"], () => require("./getCertificatesManagementAssociation"));

export { GetCertificatesManagementAssociationsArgs, GetCertificatesManagementAssociationsResult, GetCertificatesManagementAssociationsOutputArgs } from "./getCertificatesManagementAssociations";
export const getCertificatesManagementAssociations: typeof import("./getCertificatesManagementAssociations").getCertificatesManagementAssociations = null as any;
export const getCertificatesManagementAssociationsOutput: typeof import("./getCertificatesManagementAssociations").getCertificatesManagementAssociationsOutput = null as any;
utilities.lazyLoad(exports, ["getCertificatesManagementAssociations","getCertificatesManagementAssociationsOutput"], () => require("./getCertificatesManagementAssociations"));

export { GetCertificatesManagementCaBundleArgs, GetCertificatesManagementCaBundleResult, GetCertificatesManagementCaBundleOutputArgs } from "./getCertificatesManagementCaBundle";
export const getCertificatesManagementCaBundle: typeof import("./getCertificatesManagementCaBundle").getCertificatesManagementCaBundle = null as any;
export const getCertificatesManagementCaBundleOutput: typeof import("./getCertificatesManagementCaBundle").getCertificatesManagementCaBundleOutput = null as any;
utilities.lazyLoad(exports, ["getCertificatesManagementCaBundle","getCertificatesManagementCaBundleOutput"], () => require("./getCertificatesManagementCaBundle"));

export { GetCertificatesManagementCaBundlesArgs, GetCertificatesManagementCaBundlesResult, GetCertificatesManagementCaBundlesOutputArgs } from "./getCertificatesManagementCaBundles";
export const getCertificatesManagementCaBundles: typeof import("./getCertificatesManagementCaBundles").getCertificatesManagementCaBundles = null as any;
export const getCertificatesManagementCaBundlesOutput: typeof import("./getCertificatesManagementCaBundles").getCertificatesManagementCaBundlesOutput = null as any;
utilities.lazyLoad(exports, ["getCertificatesManagementCaBundles","getCertificatesManagementCaBundlesOutput"], () => require("./getCertificatesManagementCaBundles"));

export { GetCertificatesManagementCertificateArgs, GetCertificatesManagementCertificateResult, GetCertificatesManagementCertificateOutputArgs } from "./getCertificatesManagementCertificate";
export const getCertificatesManagementCertificate: typeof import("./getCertificatesManagementCertificate").getCertificatesManagementCertificate = null as any;
export const getCertificatesManagementCertificateOutput: typeof import("./getCertificatesManagementCertificate").getCertificatesManagementCertificateOutput = null as any;
utilities.lazyLoad(exports, ["getCertificatesManagementCertificate","getCertificatesManagementCertificateOutput"], () => require("./getCertificatesManagementCertificate"));

export { GetCertificatesManagementCertificateAuthoritiesArgs, GetCertificatesManagementCertificateAuthoritiesResult, GetCertificatesManagementCertificateAuthoritiesOutputArgs } from "./getCertificatesManagementCertificateAuthorities";
export const getCertificatesManagementCertificateAuthorities: typeof import("./getCertificatesManagementCertificateAuthorities").getCertificatesManagementCertificateAuthorities = null as any;
export const getCertificatesManagementCertificateAuthoritiesOutput: typeof import("./getCertificatesManagementCertificateAuthorities").getCertificatesManagementCertificateAuthoritiesOutput = null as any;
utilities.lazyLoad(exports, ["getCertificatesManagementCertificateAuthorities","getCertificatesManagementCertificateAuthoritiesOutput"], () => require("./getCertificatesManagementCertificateAuthorities"));

export { GetCertificatesManagementCertificateAuthorityArgs, GetCertificatesManagementCertificateAuthorityResult, GetCertificatesManagementCertificateAuthorityOutputArgs } from "./getCertificatesManagementCertificateAuthority";
export const getCertificatesManagementCertificateAuthority: typeof import("./getCertificatesManagementCertificateAuthority").getCertificatesManagementCertificateAuthority = null as any;
export const getCertificatesManagementCertificateAuthorityOutput: typeof import("./getCertificatesManagementCertificateAuthority").getCertificatesManagementCertificateAuthorityOutput = null as any;
utilities.lazyLoad(exports, ["getCertificatesManagementCertificateAuthority","getCertificatesManagementCertificateAuthorityOutput"], () => require("./getCertificatesManagementCertificateAuthority"));

export { GetCertificatesManagementCertificateAuthorityVersionArgs, GetCertificatesManagementCertificateAuthorityVersionResult, GetCertificatesManagementCertificateAuthorityVersionOutputArgs } from "./getCertificatesManagementCertificateAuthorityVersion";
export const getCertificatesManagementCertificateAuthorityVersion: typeof import("./getCertificatesManagementCertificateAuthorityVersion").getCertificatesManagementCertificateAuthorityVersion = null as any;
export const getCertificatesManagementCertificateAuthorityVersionOutput: typeof import("./getCertificatesManagementCertificateAuthorityVersion").getCertificatesManagementCertificateAuthorityVersionOutput = null as any;
utilities.lazyLoad(exports, ["getCertificatesManagementCertificateAuthorityVersion","getCertificatesManagementCertificateAuthorityVersionOutput"], () => require("./getCertificatesManagementCertificateAuthorityVersion"));

export { GetCertificatesManagementCertificateAuthorityVersionsArgs, GetCertificatesManagementCertificateAuthorityVersionsResult, GetCertificatesManagementCertificateAuthorityVersionsOutputArgs } from "./getCertificatesManagementCertificateAuthorityVersions";
export const getCertificatesManagementCertificateAuthorityVersions: typeof import("./getCertificatesManagementCertificateAuthorityVersions").getCertificatesManagementCertificateAuthorityVersions = null as any;
export const getCertificatesManagementCertificateAuthorityVersionsOutput: typeof import("./getCertificatesManagementCertificateAuthorityVersions").getCertificatesManagementCertificateAuthorityVersionsOutput = null as any;
utilities.lazyLoad(exports, ["getCertificatesManagementCertificateAuthorityVersions","getCertificatesManagementCertificateAuthorityVersionsOutput"], () => require("./getCertificatesManagementCertificateAuthorityVersions"));

export { GetCertificatesManagementCertificateVersionArgs, GetCertificatesManagementCertificateVersionResult, GetCertificatesManagementCertificateVersionOutputArgs } from "./getCertificatesManagementCertificateVersion";
export const getCertificatesManagementCertificateVersion: typeof import("./getCertificatesManagementCertificateVersion").getCertificatesManagementCertificateVersion = null as any;
export const getCertificatesManagementCertificateVersionOutput: typeof import("./getCertificatesManagementCertificateVersion").getCertificatesManagementCertificateVersionOutput = null as any;
utilities.lazyLoad(exports, ["getCertificatesManagementCertificateVersion","getCertificatesManagementCertificateVersionOutput"], () => require("./getCertificatesManagementCertificateVersion"));

export { GetCertificatesManagementCertificateVersionsArgs, GetCertificatesManagementCertificateVersionsResult, GetCertificatesManagementCertificateVersionsOutputArgs } from "./getCertificatesManagementCertificateVersions";
export const getCertificatesManagementCertificateVersions: typeof import("./getCertificatesManagementCertificateVersions").getCertificatesManagementCertificateVersions = null as any;
export const getCertificatesManagementCertificateVersionsOutput: typeof import("./getCertificatesManagementCertificateVersions").getCertificatesManagementCertificateVersionsOutput = null as any;
utilities.lazyLoad(exports, ["getCertificatesManagementCertificateVersions","getCertificatesManagementCertificateVersionsOutput"], () => require("./getCertificatesManagementCertificateVersions"));

export { GetCertificatesManagementCertificatesArgs, GetCertificatesManagementCertificatesResult, GetCertificatesManagementCertificatesOutputArgs } from "./getCertificatesManagementCertificates";
export const getCertificatesManagementCertificates: typeof import("./getCertificatesManagementCertificates").getCertificatesManagementCertificates = null as any;
export const getCertificatesManagementCertificatesOutput: typeof import("./getCertificatesManagementCertificates").getCertificatesManagementCertificatesOutput = null as any;
utilities.lazyLoad(exports, ["getCertificatesManagementCertificates","getCertificatesManagementCertificatesOutput"], () => require("./getCertificatesManagementCertificates"));

export { GetCloudBridgeAgentArgs, GetCloudBridgeAgentResult, GetCloudBridgeAgentOutputArgs } from "./getCloudBridgeAgent";
export const getCloudBridgeAgent: typeof import("./getCloudBridgeAgent").getCloudBridgeAgent = null as any;
export const getCloudBridgeAgentOutput: typeof import("./getCloudBridgeAgent").getCloudBridgeAgentOutput = null as any;
utilities.lazyLoad(exports, ["getCloudBridgeAgent","getCloudBridgeAgentOutput"], () => require("./getCloudBridgeAgent"));

export { GetCloudBridgeAgentDependenciesArgs, GetCloudBridgeAgentDependenciesResult, GetCloudBridgeAgentDependenciesOutputArgs } from "./getCloudBridgeAgentDependencies";
export const getCloudBridgeAgentDependencies: typeof import("./getCloudBridgeAgentDependencies").getCloudBridgeAgentDependencies = null as any;
export const getCloudBridgeAgentDependenciesOutput: typeof import("./getCloudBridgeAgentDependencies").getCloudBridgeAgentDependenciesOutput = null as any;
utilities.lazyLoad(exports, ["getCloudBridgeAgentDependencies","getCloudBridgeAgentDependenciesOutput"], () => require("./getCloudBridgeAgentDependencies"));

export { GetCloudBridgeAgentDependencyArgs, GetCloudBridgeAgentDependencyResult, GetCloudBridgeAgentDependencyOutputArgs } from "./getCloudBridgeAgentDependency";
export const getCloudBridgeAgentDependency: typeof import("./getCloudBridgeAgentDependency").getCloudBridgeAgentDependency = null as any;
export const getCloudBridgeAgentDependencyOutput: typeof import("./getCloudBridgeAgentDependency").getCloudBridgeAgentDependencyOutput = null as any;
utilities.lazyLoad(exports, ["getCloudBridgeAgentDependency","getCloudBridgeAgentDependencyOutput"], () => require("./getCloudBridgeAgentDependency"));

export { GetCloudBridgeAgentPluginArgs, GetCloudBridgeAgentPluginResult, GetCloudBridgeAgentPluginOutputArgs } from "./getCloudBridgeAgentPlugin";
export const getCloudBridgeAgentPlugin: typeof import("./getCloudBridgeAgentPlugin").getCloudBridgeAgentPlugin = null as any;
export const getCloudBridgeAgentPluginOutput: typeof import("./getCloudBridgeAgentPlugin").getCloudBridgeAgentPluginOutput = null as any;
utilities.lazyLoad(exports, ["getCloudBridgeAgentPlugin","getCloudBridgeAgentPluginOutput"], () => require("./getCloudBridgeAgentPlugin"));

export { GetCloudBridgeAgentsArgs, GetCloudBridgeAgentsResult, GetCloudBridgeAgentsOutputArgs } from "./getCloudBridgeAgents";
export const getCloudBridgeAgents: typeof import("./getCloudBridgeAgents").getCloudBridgeAgents = null as any;
export const getCloudBridgeAgentsOutput: typeof import("./getCloudBridgeAgents").getCloudBridgeAgentsOutput = null as any;
utilities.lazyLoad(exports, ["getCloudBridgeAgents","getCloudBridgeAgentsOutput"], () => require("./getCloudBridgeAgents"));

export { GetCloudBridgeApplianceImageArgs, GetCloudBridgeApplianceImageResult, GetCloudBridgeApplianceImageOutputArgs } from "./getCloudBridgeApplianceImage";
export const getCloudBridgeApplianceImage: typeof import("./getCloudBridgeApplianceImage").getCloudBridgeApplianceImage = null as any;
export const getCloudBridgeApplianceImageOutput: typeof import("./getCloudBridgeApplianceImage").getCloudBridgeApplianceImageOutput = null as any;
utilities.lazyLoad(exports, ["getCloudBridgeApplianceImage","getCloudBridgeApplianceImageOutput"], () => require("./getCloudBridgeApplianceImage"));

export { GetCloudBridgeApplianceImagesArgs, GetCloudBridgeApplianceImagesResult, GetCloudBridgeApplianceImagesOutputArgs } from "./getCloudBridgeApplianceImages";
export const getCloudBridgeApplianceImages: typeof import("./getCloudBridgeApplianceImages").getCloudBridgeApplianceImages = null as any;
export const getCloudBridgeApplianceImagesOutput: typeof import("./getCloudBridgeApplianceImages").getCloudBridgeApplianceImagesOutput = null as any;
utilities.lazyLoad(exports, ["getCloudBridgeApplianceImages","getCloudBridgeApplianceImagesOutput"], () => require("./getCloudBridgeApplianceImages"));

export { GetCloudBridgeAssetArgs, GetCloudBridgeAssetResult, GetCloudBridgeAssetOutputArgs } from "./getCloudBridgeAsset";
export const getCloudBridgeAsset: typeof import("./getCloudBridgeAsset").getCloudBridgeAsset = null as any;
export const getCloudBridgeAssetOutput: typeof import("./getCloudBridgeAsset").getCloudBridgeAssetOutput = null as any;
utilities.lazyLoad(exports, ["getCloudBridgeAsset","getCloudBridgeAssetOutput"], () => require("./getCloudBridgeAsset"));

export { GetCloudBridgeAssetSourceArgs, GetCloudBridgeAssetSourceResult, GetCloudBridgeAssetSourceOutputArgs } from "./getCloudBridgeAssetSource";
export const getCloudBridgeAssetSource: typeof import("./getCloudBridgeAssetSource").getCloudBridgeAssetSource = null as any;
export const getCloudBridgeAssetSourceOutput: typeof import("./getCloudBridgeAssetSource").getCloudBridgeAssetSourceOutput = null as any;
utilities.lazyLoad(exports, ["getCloudBridgeAssetSource","getCloudBridgeAssetSourceOutput"], () => require("./getCloudBridgeAssetSource"));

export { GetCloudBridgeAssetSourcesArgs, GetCloudBridgeAssetSourcesResult, GetCloudBridgeAssetSourcesOutputArgs } from "./getCloudBridgeAssetSources";
export const getCloudBridgeAssetSources: typeof import("./getCloudBridgeAssetSources").getCloudBridgeAssetSources = null as any;
export const getCloudBridgeAssetSourcesOutput: typeof import("./getCloudBridgeAssetSources").getCloudBridgeAssetSourcesOutput = null as any;
utilities.lazyLoad(exports, ["getCloudBridgeAssetSources","getCloudBridgeAssetSourcesOutput"], () => require("./getCloudBridgeAssetSources"));

export { GetCloudBridgeAssetsArgs, GetCloudBridgeAssetsResult, GetCloudBridgeAssetsOutputArgs } from "./getCloudBridgeAssets";
export const getCloudBridgeAssets: typeof import("./getCloudBridgeAssets").getCloudBridgeAssets = null as any;
export const getCloudBridgeAssetsOutput: typeof import("./getCloudBridgeAssets").getCloudBridgeAssetsOutput = null as any;
utilities.lazyLoad(exports, ["getCloudBridgeAssets","getCloudBridgeAssetsOutput"], () => require("./getCloudBridgeAssets"));

export { GetCloudBridgeDiscoveryScheduleArgs, GetCloudBridgeDiscoveryScheduleResult, GetCloudBridgeDiscoveryScheduleOutputArgs } from "./getCloudBridgeDiscoverySchedule";
export const getCloudBridgeDiscoverySchedule: typeof import("./getCloudBridgeDiscoverySchedule").getCloudBridgeDiscoverySchedule = null as any;
export const getCloudBridgeDiscoveryScheduleOutput: typeof import("./getCloudBridgeDiscoverySchedule").getCloudBridgeDiscoveryScheduleOutput = null as any;
utilities.lazyLoad(exports, ["getCloudBridgeDiscoverySchedule","getCloudBridgeDiscoveryScheduleOutput"], () => require("./getCloudBridgeDiscoverySchedule"));

export { GetCloudBridgeDiscoverySchedulesArgs, GetCloudBridgeDiscoverySchedulesResult, GetCloudBridgeDiscoverySchedulesOutputArgs } from "./getCloudBridgeDiscoverySchedules";
export const getCloudBridgeDiscoverySchedules: typeof import("./getCloudBridgeDiscoverySchedules").getCloudBridgeDiscoverySchedules = null as any;
export const getCloudBridgeDiscoverySchedulesOutput: typeof import("./getCloudBridgeDiscoverySchedules").getCloudBridgeDiscoverySchedulesOutput = null as any;
utilities.lazyLoad(exports, ["getCloudBridgeDiscoverySchedules","getCloudBridgeDiscoverySchedulesOutput"], () => require("./getCloudBridgeDiscoverySchedules"));

export { GetCloudBridgeEnvironmentArgs, GetCloudBridgeEnvironmentResult, GetCloudBridgeEnvironmentOutputArgs } from "./getCloudBridgeEnvironment";
export const getCloudBridgeEnvironment: typeof import("./getCloudBridgeEnvironment").getCloudBridgeEnvironment = null as any;
export const getCloudBridgeEnvironmentOutput: typeof import("./getCloudBridgeEnvironment").getCloudBridgeEnvironmentOutput = null as any;
utilities.lazyLoad(exports, ["getCloudBridgeEnvironment","getCloudBridgeEnvironmentOutput"], () => require("./getCloudBridgeEnvironment"));

export { GetCloudBridgeEnvironmentsArgs, GetCloudBridgeEnvironmentsResult, GetCloudBridgeEnvironmentsOutputArgs } from "./getCloudBridgeEnvironments";
export const getCloudBridgeEnvironments: typeof import("./getCloudBridgeEnvironments").getCloudBridgeEnvironments = null as any;
export const getCloudBridgeEnvironmentsOutput: typeof import("./getCloudBridgeEnvironments").getCloudBridgeEnvironmentsOutput = null as any;
utilities.lazyLoad(exports, ["getCloudBridgeEnvironments","getCloudBridgeEnvironmentsOutput"], () => require("./getCloudBridgeEnvironments"));

export { GetCloudBridgeInventoriesArgs, GetCloudBridgeInventoriesResult, GetCloudBridgeInventoriesOutputArgs } from "./getCloudBridgeInventories";
export const getCloudBridgeInventories: typeof import("./getCloudBridgeInventories").getCloudBridgeInventories = null as any;
export const getCloudBridgeInventoriesOutput: typeof import("./getCloudBridgeInventories").getCloudBridgeInventoriesOutput = null as any;
utilities.lazyLoad(exports, ["getCloudBridgeInventories","getCloudBridgeInventoriesOutput"], () => require("./getCloudBridgeInventories"));

export { GetCloudBridgeInventoryArgs, GetCloudBridgeInventoryResult, GetCloudBridgeInventoryOutputArgs } from "./getCloudBridgeInventory";
export const getCloudBridgeInventory: typeof import("./getCloudBridgeInventory").getCloudBridgeInventory = null as any;
export const getCloudBridgeInventoryOutput: typeof import("./getCloudBridgeInventory").getCloudBridgeInventoryOutput = null as any;
utilities.lazyLoad(exports, ["getCloudBridgeInventory","getCloudBridgeInventoryOutput"], () => require("./getCloudBridgeInventory"));

export { GetCloudGuardAdhocQueriesArgs, GetCloudGuardAdhocQueriesResult, GetCloudGuardAdhocQueriesOutputArgs } from "./getCloudGuardAdhocQueries";
export const getCloudGuardAdhocQueries: typeof import("./getCloudGuardAdhocQueries").getCloudGuardAdhocQueries = null as any;
export const getCloudGuardAdhocQueriesOutput: typeof import("./getCloudGuardAdhocQueries").getCloudGuardAdhocQueriesOutput = null as any;
utilities.lazyLoad(exports, ["getCloudGuardAdhocQueries","getCloudGuardAdhocQueriesOutput"], () => require("./getCloudGuardAdhocQueries"));

export { GetCloudGuardAdhocQueryArgs, GetCloudGuardAdhocQueryResult, GetCloudGuardAdhocQueryOutputArgs } from "./getCloudGuardAdhocQuery";
export const getCloudGuardAdhocQuery: typeof import("./getCloudGuardAdhocQuery").getCloudGuardAdhocQuery = null as any;
export const getCloudGuardAdhocQueryOutput: typeof import("./getCloudGuardAdhocQuery").getCloudGuardAdhocQueryOutput = null as any;
utilities.lazyLoad(exports, ["getCloudGuardAdhocQuery","getCloudGuardAdhocQueryOutput"], () => require("./getCloudGuardAdhocQuery"));

export { GetCloudGuardCloudGuardConfigurationArgs, GetCloudGuardCloudGuardConfigurationResult, GetCloudGuardCloudGuardConfigurationOutputArgs } from "./getCloudGuardCloudGuardConfiguration";
export const getCloudGuardCloudGuardConfiguration: typeof import("./getCloudGuardCloudGuardConfiguration").getCloudGuardCloudGuardConfiguration = null as any;
export const getCloudGuardCloudGuardConfigurationOutput: typeof import("./getCloudGuardCloudGuardConfiguration").getCloudGuardCloudGuardConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getCloudGuardCloudGuardConfiguration","getCloudGuardCloudGuardConfigurationOutput"], () => require("./getCloudGuardCloudGuardConfiguration"));

export { GetCloudGuardDataMaskRuleArgs, GetCloudGuardDataMaskRuleResult, GetCloudGuardDataMaskRuleOutputArgs } from "./getCloudGuardDataMaskRule";
export const getCloudGuardDataMaskRule: typeof import("./getCloudGuardDataMaskRule").getCloudGuardDataMaskRule = null as any;
export const getCloudGuardDataMaskRuleOutput: typeof import("./getCloudGuardDataMaskRule").getCloudGuardDataMaskRuleOutput = null as any;
utilities.lazyLoad(exports, ["getCloudGuardDataMaskRule","getCloudGuardDataMaskRuleOutput"], () => require("./getCloudGuardDataMaskRule"));

export { GetCloudGuardDataMaskRulesArgs, GetCloudGuardDataMaskRulesResult, GetCloudGuardDataMaskRulesOutputArgs } from "./getCloudGuardDataMaskRules";
export const getCloudGuardDataMaskRules: typeof import("./getCloudGuardDataMaskRules").getCloudGuardDataMaskRules = null as any;
export const getCloudGuardDataMaskRulesOutput: typeof import("./getCloudGuardDataMaskRules").getCloudGuardDataMaskRulesOutput = null as any;
utilities.lazyLoad(exports, ["getCloudGuardDataMaskRules","getCloudGuardDataMaskRulesOutput"], () => require("./getCloudGuardDataMaskRules"));

export { GetCloudGuardDataSourceArgs, GetCloudGuardDataSourceResult, GetCloudGuardDataSourceOutputArgs } from "./getCloudGuardDataSource";
export const getCloudGuardDataSource: typeof import("./getCloudGuardDataSource").getCloudGuardDataSource = null as any;
export const getCloudGuardDataSourceOutput: typeof import("./getCloudGuardDataSource").getCloudGuardDataSourceOutput = null as any;
utilities.lazyLoad(exports, ["getCloudGuardDataSource","getCloudGuardDataSourceOutput"], () => require("./getCloudGuardDataSource"));

export { GetCloudGuardDataSourceEventArgs, GetCloudGuardDataSourceEventResult, GetCloudGuardDataSourceEventOutputArgs } from "./getCloudGuardDataSourceEvent";
export const getCloudGuardDataSourceEvent: typeof import("./getCloudGuardDataSourceEvent").getCloudGuardDataSourceEvent = null as any;
export const getCloudGuardDataSourceEventOutput: typeof import("./getCloudGuardDataSourceEvent").getCloudGuardDataSourceEventOutput = null as any;
utilities.lazyLoad(exports, ["getCloudGuardDataSourceEvent","getCloudGuardDataSourceEventOutput"], () => require("./getCloudGuardDataSourceEvent"));

export { GetCloudGuardDataSourceEventsArgs, GetCloudGuardDataSourceEventsResult, GetCloudGuardDataSourceEventsOutputArgs } from "./getCloudGuardDataSourceEvents";
export const getCloudGuardDataSourceEvents: typeof import("./getCloudGuardDataSourceEvents").getCloudGuardDataSourceEvents = null as any;
export const getCloudGuardDataSourceEventsOutput: typeof import("./getCloudGuardDataSourceEvents").getCloudGuardDataSourceEventsOutput = null as any;
utilities.lazyLoad(exports, ["getCloudGuardDataSourceEvents","getCloudGuardDataSourceEventsOutput"], () => require("./getCloudGuardDataSourceEvents"));

export { GetCloudGuardDataSourcesArgs, GetCloudGuardDataSourcesResult, GetCloudGuardDataSourcesOutputArgs } from "./getCloudGuardDataSources";
export const getCloudGuardDataSources: typeof import("./getCloudGuardDataSources").getCloudGuardDataSources = null as any;
export const getCloudGuardDataSourcesOutput: typeof import("./getCloudGuardDataSources").getCloudGuardDataSourcesOutput = null as any;
utilities.lazyLoad(exports, ["getCloudGuardDataSources","getCloudGuardDataSourcesOutput"], () => require("./getCloudGuardDataSources"));

export { GetCloudGuardDetectorRecipeArgs, GetCloudGuardDetectorRecipeResult, GetCloudGuardDetectorRecipeOutputArgs } from "./getCloudGuardDetectorRecipe";
export const getCloudGuardDetectorRecipe: typeof import("./getCloudGuardDetectorRecipe").getCloudGuardDetectorRecipe = null as any;
export const getCloudGuardDetectorRecipeOutput: typeof import("./getCloudGuardDetectorRecipe").getCloudGuardDetectorRecipeOutput = null as any;
utilities.lazyLoad(exports, ["getCloudGuardDetectorRecipe","getCloudGuardDetectorRecipeOutput"], () => require("./getCloudGuardDetectorRecipe"));

export { GetCloudGuardDetectorRecipesArgs, GetCloudGuardDetectorRecipesResult, GetCloudGuardDetectorRecipesOutputArgs } from "./getCloudGuardDetectorRecipes";
export const getCloudGuardDetectorRecipes: typeof import("./getCloudGuardDetectorRecipes").getCloudGuardDetectorRecipes = null as any;
export const getCloudGuardDetectorRecipesOutput: typeof import("./getCloudGuardDetectorRecipes").getCloudGuardDetectorRecipesOutput = null as any;
utilities.lazyLoad(exports, ["getCloudGuardDetectorRecipes","getCloudGuardDetectorRecipesOutput"], () => require("./getCloudGuardDetectorRecipes"));

export { GetCloudGuardManagedListArgs, GetCloudGuardManagedListResult, GetCloudGuardManagedListOutputArgs } from "./getCloudGuardManagedList";
export const getCloudGuardManagedList: typeof import("./getCloudGuardManagedList").getCloudGuardManagedList = null as any;
export const getCloudGuardManagedListOutput: typeof import("./getCloudGuardManagedList").getCloudGuardManagedListOutput = null as any;
utilities.lazyLoad(exports, ["getCloudGuardManagedList","getCloudGuardManagedListOutput"], () => require("./getCloudGuardManagedList"));

export { GetCloudGuardManagedListsArgs, GetCloudGuardManagedListsResult, GetCloudGuardManagedListsOutputArgs } from "./getCloudGuardManagedLists";
export const getCloudGuardManagedLists: typeof import("./getCloudGuardManagedLists").getCloudGuardManagedLists = null as any;
export const getCloudGuardManagedListsOutput: typeof import("./getCloudGuardManagedLists").getCloudGuardManagedListsOutput = null as any;
utilities.lazyLoad(exports, ["getCloudGuardManagedLists","getCloudGuardManagedListsOutput"], () => require("./getCloudGuardManagedLists"));

export { GetCloudGuardProblemEntitiesArgs, GetCloudGuardProblemEntitiesResult, GetCloudGuardProblemEntitiesOutputArgs } from "./getCloudGuardProblemEntities";
export const getCloudGuardProblemEntities: typeof import("./getCloudGuardProblemEntities").getCloudGuardProblemEntities = null as any;
export const getCloudGuardProblemEntitiesOutput: typeof import("./getCloudGuardProblemEntities").getCloudGuardProblemEntitiesOutput = null as any;
utilities.lazyLoad(exports, ["getCloudGuardProblemEntities","getCloudGuardProblemEntitiesOutput"], () => require("./getCloudGuardProblemEntities"));

export { GetCloudGuardProblemEntityArgs, GetCloudGuardProblemEntityResult, GetCloudGuardProblemEntityOutputArgs } from "./getCloudGuardProblemEntity";
export const getCloudGuardProblemEntity: typeof import("./getCloudGuardProblemEntity").getCloudGuardProblemEntity = null as any;
export const getCloudGuardProblemEntityOutput: typeof import("./getCloudGuardProblemEntity").getCloudGuardProblemEntityOutput = null as any;
utilities.lazyLoad(exports, ["getCloudGuardProblemEntity","getCloudGuardProblemEntityOutput"], () => require("./getCloudGuardProblemEntity"));

export { GetCloudGuardResponderRecipeArgs, GetCloudGuardResponderRecipeResult, GetCloudGuardResponderRecipeOutputArgs } from "./getCloudGuardResponderRecipe";
export const getCloudGuardResponderRecipe: typeof import("./getCloudGuardResponderRecipe").getCloudGuardResponderRecipe = null as any;
export const getCloudGuardResponderRecipeOutput: typeof import("./getCloudGuardResponderRecipe").getCloudGuardResponderRecipeOutput = null as any;
utilities.lazyLoad(exports, ["getCloudGuardResponderRecipe","getCloudGuardResponderRecipeOutput"], () => require("./getCloudGuardResponderRecipe"));

export { GetCloudGuardResponderRecipesArgs, GetCloudGuardResponderRecipesResult, GetCloudGuardResponderRecipesOutputArgs } from "./getCloudGuardResponderRecipes";
export const getCloudGuardResponderRecipes: typeof import("./getCloudGuardResponderRecipes").getCloudGuardResponderRecipes = null as any;
export const getCloudGuardResponderRecipesOutput: typeof import("./getCloudGuardResponderRecipes").getCloudGuardResponderRecipesOutput = null as any;
utilities.lazyLoad(exports, ["getCloudGuardResponderRecipes","getCloudGuardResponderRecipesOutput"], () => require("./getCloudGuardResponderRecipes"));

export { GetCloudGuardSavedQueriesArgs, GetCloudGuardSavedQueriesResult, GetCloudGuardSavedQueriesOutputArgs } from "./getCloudGuardSavedQueries";
export const getCloudGuardSavedQueries: typeof import("./getCloudGuardSavedQueries").getCloudGuardSavedQueries = null as any;
export const getCloudGuardSavedQueriesOutput: typeof import("./getCloudGuardSavedQueries").getCloudGuardSavedQueriesOutput = null as any;
utilities.lazyLoad(exports, ["getCloudGuardSavedQueries","getCloudGuardSavedQueriesOutput"], () => require("./getCloudGuardSavedQueries"));

export { GetCloudGuardSavedQueryArgs, GetCloudGuardSavedQueryResult, GetCloudGuardSavedQueryOutputArgs } from "./getCloudGuardSavedQuery";
export const getCloudGuardSavedQuery: typeof import("./getCloudGuardSavedQuery").getCloudGuardSavedQuery = null as any;
export const getCloudGuardSavedQueryOutput: typeof import("./getCloudGuardSavedQuery").getCloudGuardSavedQueryOutput = null as any;
utilities.lazyLoad(exports, ["getCloudGuardSavedQuery","getCloudGuardSavedQueryOutput"], () => require("./getCloudGuardSavedQuery"));

export { GetCloudGuardSecurityPoliciesArgs, GetCloudGuardSecurityPoliciesResult, GetCloudGuardSecurityPoliciesOutputArgs } from "./getCloudGuardSecurityPolicies";
export const getCloudGuardSecurityPolicies: typeof import("./getCloudGuardSecurityPolicies").getCloudGuardSecurityPolicies = null as any;
export const getCloudGuardSecurityPoliciesOutput: typeof import("./getCloudGuardSecurityPolicies").getCloudGuardSecurityPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getCloudGuardSecurityPolicies","getCloudGuardSecurityPoliciesOutput"], () => require("./getCloudGuardSecurityPolicies"));

export { GetCloudGuardSecurityPolicyArgs, GetCloudGuardSecurityPolicyResult, GetCloudGuardSecurityPolicyOutputArgs } from "./getCloudGuardSecurityPolicy";
export const getCloudGuardSecurityPolicy: typeof import("./getCloudGuardSecurityPolicy").getCloudGuardSecurityPolicy = null as any;
export const getCloudGuardSecurityPolicyOutput: typeof import("./getCloudGuardSecurityPolicy").getCloudGuardSecurityPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getCloudGuardSecurityPolicy","getCloudGuardSecurityPolicyOutput"], () => require("./getCloudGuardSecurityPolicy"));

export { GetCloudGuardSecurityRecipeArgs, GetCloudGuardSecurityRecipeResult, GetCloudGuardSecurityRecipeOutputArgs } from "./getCloudGuardSecurityRecipe";
export const getCloudGuardSecurityRecipe: typeof import("./getCloudGuardSecurityRecipe").getCloudGuardSecurityRecipe = null as any;
export const getCloudGuardSecurityRecipeOutput: typeof import("./getCloudGuardSecurityRecipe").getCloudGuardSecurityRecipeOutput = null as any;
utilities.lazyLoad(exports, ["getCloudGuardSecurityRecipe","getCloudGuardSecurityRecipeOutput"], () => require("./getCloudGuardSecurityRecipe"));

export { GetCloudGuardSecurityRecipesArgs, GetCloudGuardSecurityRecipesResult, GetCloudGuardSecurityRecipesOutputArgs } from "./getCloudGuardSecurityRecipes";
export const getCloudGuardSecurityRecipes: typeof import("./getCloudGuardSecurityRecipes").getCloudGuardSecurityRecipes = null as any;
export const getCloudGuardSecurityRecipesOutput: typeof import("./getCloudGuardSecurityRecipes").getCloudGuardSecurityRecipesOutput = null as any;
utilities.lazyLoad(exports, ["getCloudGuardSecurityRecipes","getCloudGuardSecurityRecipesOutput"], () => require("./getCloudGuardSecurityRecipes"));

export { GetCloudGuardSecurityZoneArgs, GetCloudGuardSecurityZoneResult, GetCloudGuardSecurityZoneOutputArgs } from "./getCloudGuardSecurityZone";
export const getCloudGuardSecurityZone: typeof import("./getCloudGuardSecurityZone").getCloudGuardSecurityZone = null as any;
export const getCloudGuardSecurityZoneOutput: typeof import("./getCloudGuardSecurityZone").getCloudGuardSecurityZoneOutput = null as any;
utilities.lazyLoad(exports, ["getCloudGuardSecurityZone","getCloudGuardSecurityZoneOutput"], () => require("./getCloudGuardSecurityZone"));

export { GetCloudGuardSecurityZonesArgs, GetCloudGuardSecurityZonesResult, GetCloudGuardSecurityZonesOutputArgs } from "./getCloudGuardSecurityZones";
export const getCloudGuardSecurityZones: typeof import("./getCloudGuardSecurityZones").getCloudGuardSecurityZones = null as any;
export const getCloudGuardSecurityZonesOutput: typeof import("./getCloudGuardSecurityZones").getCloudGuardSecurityZonesOutput = null as any;
utilities.lazyLoad(exports, ["getCloudGuardSecurityZones","getCloudGuardSecurityZonesOutput"], () => require("./getCloudGuardSecurityZones"));

export { GetCloudGuardTargetArgs, GetCloudGuardTargetResult, GetCloudGuardTargetOutputArgs } from "./getCloudGuardTarget";
export const getCloudGuardTarget: typeof import("./getCloudGuardTarget").getCloudGuardTarget = null as any;
export const getCloudGuardTargetOutput: typeof import("./getCloudGuardTarget").getCloudGuardTargetOutput = null as any;
utilities.lazyLoad(exports, ["getCloudGuardTarget","getCloudGuardTargetOutput"], () => require("./getCloudGuardTarget"));

export { GetCloudGuardTargetsArgs, GetCloudGuardTargetsResult, GetCloudGuardTargetsOutputArgs } from "./getCloudGuardTargets";
export const getCloudGuardTargets: typeof import("./getCloudGuardTargets").getCloudGuardTargets = null as any;
export const getCloudGuardTargetsOutput: typeof import("./getCloudGuardTargets").getCloudGuardTargetsOutput = null as any;
utilities.lazyLoad(exports, ["getCloudGuardTargets","getCloudGuardTargetsOutput"], () => require("./getCloudGuardTargets"));

export { GetCloudGuardWlpAgentArgs, GetCloudGuardWlpAgentResult, GetCloudGuardWlpAgentOutputArgs } from "./getCloudGuardWlpAgent";
export const getCloudGuardWlpAgent: typeof import("./getCloudGuardWlpAgent").getCloudGuardWlpAgent = null as any;
export const getCloudGuardWlpAgentOutput: typeof import("./getCloudGuardWlpAgent").getCloudGuardWlpAgentOutput = null as any;
utilities.lazyLoad(exports, ["getCloudGuardWlpAgent","getCloudGuardWlpAgentOutput"], () => require("./getCloudGuardWlpAgent"));

export { GetCloudGuardWlpAgentsArgs, GetCloudGuardWlpAgentsResult, GetCloudGuardWlpAgentsOutputArgs } from "./getCloudGuardWlpAgents";
export const getCloudGuardWlpAgents: typeof import("./getCloudGuardWlpAgents").getCloudGuardWlpAgents = null as any;
export const getCloudGuardWlpAgentsOutput: typeof import("./getCloudGuardWlpAgents").getCloudGuardWlpAgentsOutput = null as any;
utilities.lazyLoad(exports, ["getCloudGuardWlpAgents","getCloudGuardWlpAgentsOutput"], () => require("./getCloudGuardWlpAgents"));

export { GetCloudMigrationsMigrationArgs, GetCloudMigrationsMigrationResult, GetCloudMigrationsMigrationOutputArgs } from "./getCloudMigrationsMigration";
export const getCloudMigrationsMigration: typeof import("./getCloudMigrationsMigration").getCloudMigrationsMigration = null as any;
export const getCloudMigrationsMigrationOutput: typeof import("./getCloudMigrationsMigration").getCloudMigrationsMigrationOutput = null as any;
utilities.lazyLoad(exports, ["getCloudMigrationsMigration","getCloudMigrationsMigrationOutput"], () => require("./getCloudMigrationsMigration"));

export { GetCloudMigrationsMigrationAssetArgs, GetCloudMigrationsMigrationAssetResult, GetCloudMigrationsMigrationAssetOutputArgs } from "./getCloudMigrationsMigrationAsset";
export const getCloudMigrationsMigrationAsset: typeof import("./getCloudMigrationsMigrationAsset").getCloudMigrationsMigrationAsset = null as any;
export const getCloudMigrationsMigrationAssetOutput: typeof import("./getCloudMigrationsMigrationAsset").getCloudMigrationsMigrationAssetOutput = null as any;
utilities.lazyLoad(exports, ["getCloudMigrationsMigrationAsset","getCloudMigrationsMigrationAssetOutput"], () => require("./getCloudMigrationsMigrationAsset"));

export { GetCloudMigrationsMigrationAssetsArgs, GetCloudMigrationsMigrationAssetsResult, GetCloudMigrationsMigrationAssetsOutputArgs } from "./getCloudMigrationsMigrationAssets";
export const getCloudMigrationsMigrationAssets: typeof import("./getCloudMigrationsMigrationAssets").getCloudMigrationsMigrationAssets = null as any;
export const getCloudMigrationsMigrationAssetsOutput: typeof import("./getCloudMigrationsMigrationAssets").getCloudMigrationsMigrationAssetsOutput = null as any;
utilities.lazyLoad(exports, ["getCloudMigrationsMigrationAssets","getCloudMigrationsMigrationAssetsOutput"], () => require("./getCloudMigrationsMigrationAssets"));

export { GetCloudMigrationsMigrationPlanArgs, GetCloudMigrationsMigrationPlanResult, GetCloudMigrationsMigrationPlanOutputArgs } from "./getCloudMigrationsMigrationPlan";
export const getCloudMigrationsMigrationPlan: typeof import("./getCloudMigrationsMigrationPlan").getCloudMigrationsMigrationPlan = null as any;
export const getCloudMigrationsMigrationPlanOutput: typeof import("./getCloudMigrationsMigrationPlan").getCloudMigrationsMigrationPlanOutput = null as any;
utilities.lazyLoad(exports, ["getCloudMigrationsMigrationPlan","getCloudMigrationsMigrationPlanOutput"], () => require("./getCloudMigrationsMigrationPlan"));

export { GetCloudMigrationsMigrationPlanAvailableShapeArgs, GetCloudMigrationsMigrationPlanAvailableShapeResult, GetCloudMigrationsMigrationPlanAvailableShapeOutputArgs } from "./getCloudMigrationsMigrationPlanAvailableShape";
export const getCloudMigrationsMigrationPlanAvailableShape: typeof import("./getCloudMigrationsMigrationPlanAvailableShape").getCloudMigrationsMigrationPlanAvailableShape = null as any;
export const getCloudMigrationsMigrationPlanAvailableShapeOutput: typeof import("./getCloudMigrationsMigrationPlanAvailableShape").getCloudMigrationsMigrationPlanAvailableShapeOutput = null as any;
utilities.lazyLoad(exports, ["getCloudMigrationsMigrationPlanAvailableShape","getCloudMigrationsMigrationPlanAvailableShapeOutput"], () => require("./getCloudMigrationsMigrationPlanAvailableShape"));

export { GetCloudMigrationsMigrationPlanAvailableShapesArgs, GetCloudMigrationsMigrationPlanAvailableShapesResult, GetCloudMigrationsMigrationPlanAvailableShapesOutputArgs } from "./getCloudMigrationsMigrationPlanAvailableShapes";
export const getCloudMigrationsMigrationPlanAvailableShapes: typeof import("./getCloudMigrationsMigrationPlanAvailableShapes").getCloudMigrationsMigrationPlanAvailableShapes = null as any;
export const getCloudMigrationsMigrationPlanAvailableShapesOutput: typeof import("./getCloudMigrationsMigrationPlanAvailableShapes").getCloudMigrationsMigrationPlanAvailableShapesOutput = null as any;
utilities.lazyLoad(exports, ["getCloudMigrationsMigrationPlanAvailableShapes","getCloudMigrationsMigrationPlanAvailableShapesOutput"], () => require("./getCloudMigrationsMigrationPlanAvailableShapes"));

export { GetCloudMigrationsMigrationPlansArgs, GetCloudMigrationsMigrationPlansResult, GetCloudMigrationsMigrationPlansOutputArgs } from "./getCloudMigrationsMigrationPlans";
export const getCloudMigrationsMigrationPlans: typeof import("./getCloudMigrationsMigrationPlans").getCloudMigrationsMigrationPlans = null as any;
export const getCloudMigrationsMigrationPlansOutput: typeof import("./getCloudMigrationsMigrationPlans").getCloudMigrationsMigrationPlansOutput = null as any;
utilities.lazyLoad(exports, ["getCloudMigrationsMigrationPlans","getCloudMigrationsMigrationPlansOutput"], () => require("./getCloudMigrationsMigrationPlans"));

export { GetCloudMigrationsMigrationsArgs, GetCloudMigrationsMigrationsResult, GetCloudMigrationsMigrationsOutputArgs } from "./getCloudMigrationsMigrations";
export const getCloudMigrationsMigrations: typeof import("./getCloudMigrationsMigrations").getCloudMigrationsMigrations = null as any;
export const getCloudMigrationsMigrationsOutput: typeof import("./getCloudMigrationsMigrations").getCloudMigrationsMigrationsOutput = null as any;
utilities.lazyLoad(exports, ["getCloudMigrationsMigrations","getCloudMigrationsMigrationsOutput"], () => require("./getCloudMigrationsMigrations"));

export { GetCloudMigrationsReplicationScheduleArgs, GetCloudMigrationsReplicationScheduleResult, GetCloudMigrationsReplicationScheduleOutputArgs } from "./getCloudMigrationsReplicationSchedule";
export const getCloudMigrationsReplicationSchedule: typeof import("./getCloudMigrationsReplicationSchedule").getCloudMigrationsReplicationSchedule = null as any;
export const getCloudMigrationsReplicationScheduleOutput: typeof import("./getCloudMigrationsReplicationSchedule").getCloudMigrationsReplicationScheduleOutput = null as any;
utilities.lazyLoad(exports, ["getCloudMigrationsReplicationSchedule","getCloudMigrationsReplicationScheduleOutput"], () => require("./getCloudMigrationsReplicationSchedule"));

export { GetCloudMigrationsReplicationSchedulesArgs, GetCloudMigrationsReplicationSchedulesResult, GetCloudMigrationsReplicationSchedulesOutputArgs } from "./getCloudMigrationsReplicationSchedules";
export const getCloudMigrationsReplicationSchedules: typeof import("./getCloudMigrationsReplicationSchedules").getCloudMigrationsReplicationSchedules = null as any;
export const getCloudMigrationsReplicationSchedulesOutput: typeof import("./getCloudMigrationsReplicationSchedules").getCloudMigrationsReplicationSchedulesOutput = null as any;
utilities.lazyLoad(exports, ["getCloudMigrationsReplicationSchedules","getCloudMigrationsReplicationSchedulesOutput"], () => require("./getCloudMigrationsReplicationSchedules"));

export { GetCloudMigrationsTargetAssetArgs, GetCloudMigrationsTargetAssetResult, GetCloudMigrationsTargetAssetOutputArgs } from "./getCloudMigrationsTargetAsset";
export const getCloudMigrationsTargetAsset: typeof import("./getCloudMigrationsTargetAsset").getCloudMigrationsTargetAsset = null as any;
export const getCloudMigrationsTargetAssetOutput: typeof import("./getCloudMigrationsTargetAsset").getCloudMigrationsTargetAssetOutput = null as any;
utilities.lazyLoad(exports, ["getCloudMigrationsTargetAsset","getCloudMigrationsTargetAssetOutput"], () => require("./getCloudMigrationsTargetAsset"));

export { GetCloudMigrationsTargetAssetsArgs, GetCloudMigrationsTargetAssetsResult, GetCloudMigrationsTargetAssetsOutputArgs } from "./getCloudMigrationsTargetAssets";
export const getCloudMigrationsTargetAssets: typeof import("./getCloudMigrationsTargetAssets").getCloudMigrationsTargetAssets = null as any;
export const getCloudMigrationsTargetAssetsOutput: typeof import("./getCloudMigrationsTargetAssets").getCloudMigrationsTargetAssetsOutput = null as any;
utilities.lazyLoad(exports, ["getCloudMigrationsTargetAssets","getCloudMigrationsTargetAssetsOutput"], () => require("./getCloudMigrationsTargetAssets"));

export { GetClusterPlacementGroupsClusterPlacementGroupArgs, GetClusterPlacementGroupsClusterPlacementGroupResult, GetClusterPlacementGroupsClusterPlacementGroupOutputArgs } from "./getClusterPlacementGroupsClusterPlacementGroup";
export const getClusterPlacementGroupsClusterPlacementGroup: typeof import("./getClusterPlacementGroupsClusterPlacementGroup").getClusterPlacementGroupsClusterPlacementGroup = null as any;
export const getClusterPlacementGroupsClusterPlacementGroupOutput: typeof import("./getClusterPlacementGroupsClusterPlacementGroup").getClusterPlacementGroupsClusterPlacementGroupOutput = null as any;
utilities.lazyLoad(exports, ["getClusterPlacementGroupsClusterPlacementGroup","getClusterPlacementGroupsClusterPlacementGroupOutput"], () => require("./getClusterPlacementGroupsClusterPlacementGroup"));

export { GetClusterPlacementGroupsClusterPlacementGroupsArgs, GetClusterPlacementGroupsClusterPlacementGroupsResult, GetClusterPlacementGroupsClusterPlacementGroupsOutputArgs } from "./getClusterPlacementGroupsClusterPlacementGroups";
export const getClusterPlacementGroupsClusterPlacementGroups: typeof import("./getClusterPlacementGroupsClusterPlacementGroups").getClusterPlacementGroupsClusterPlacementGroups = null as any;
export const getClusterPlacementGroupsClusterPlacementGroupsOutput: typeof import("./getClusterPlacementGroupsClusterPlacementGroups").getClusterPlacementGroupsClusterPlacementGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getClusterPlacementGroupsClusterPlacementGroups","getClusterPlacementGroupsClusterPlacementGroupsOutput"], () => require("./getClusterPlacementGroupsClusterPlacementGroups"));

export { GetComputeCloudAtCustomerCccInfrastructureArgs, GetComputeCloudAtCustomerCccInfrastructureResult, GetComputeCloudAtCustomerCccInfrastructureOutputArgs } from "./getComputeCloudAtCustomerCccInfrastructure";
export const getComputeCloudAtCustomerCccInfrastructure: typeof import("./getComputeCloudAtCustomerCccInfrastructure").getComputeCloudAtCustomerCccInfrastructure = null as any;
export const getComputeCloudAtCustomerCccInfrastructureOutput: typeof import("./getComputeCloudAtCustomerCccInfrastructure").getComputeCloudAtCustomerCccInfrastructureOutput = null as any;
utilities.lazyLoad(exports, ["getComputeCloudAtCustomerCccInfrastructure","getComputeCloudAtCustomerCccInfrastructureOutput"], () => require("./getComputeCloudAtCustomerCccInfrastructure"));

export { GetComputeCloudAtCustomerCccInfrastructuresArgs, GetComputeCloudAtCustomerCccInfrastructuresResult, GetComputeCloudAtCustomerCccInfrastructuresOutputArgs } from "./getComputeCloudAtCustomerCccInfrastructures";
export const getComputeCloudAtCustomerCccInfrastructures: typeof import("./getComputeCloudAtCustomerCccInfrastructures").getComputeCloudAtCustomerCccInfrastructures = null as any;
export const getComputeCloudAtCustomerCccInfrastructuresOutput: typeof import("./getComputeCloudAtCustomerCccInfrastructures").getComputeCloudAtCustomerCccInfrastructuresOutput = null as any;
utilities.lazyLoad(exports, ["getComputeCloudAtCustomerCccInfrastructures","getComputeCloudAtCustomerCccInfrastructuresOutput"], () => require("./getComputeCloudAtCustomerCccInfrastructures"));

export { GetComputeCloudAtCustomerCccUpgradeScheduleArgs, GetComputeCloudAtCustomerCccUpgradeScheduleResult, GetComputeCloudAtCustomerCccUpgradeScheduleOutputArgs } from "./getComputeCloudAtCustomerCccUpgradeSchedule";
export const getComputeCloudAtCustomerCccUpgradeSchedule: typeof import("./getComputeCloudAtCustomerCccUpgradeSchedule").getComputeCloudAtCustomerCccUpgradeSchedule = null as any;
export const getComputeCloudAtCustomerCccUpgradeScheduleOutput: typeof import("./getComputeCloudAtCustomerCccUpgradeSchedule").getComputeCloudAtCustomerCccUpgradeScheduleOutput = null as any;
utilities.lazyLoad(exports, ["getComputeCloudAtCustomerCccUpgradeSchedule","getComputeCloudAtCustomerCccUpgradeScheduleOutput"], () => require("./getComputeCloudAtCustomerCccUpgradeSchedule"));

export { GetComputeCloudAtCustomerCccUpgradeSchedulesArgs, GetComputeCloudAtCustomerCccUpgradeSchedulesResult, GetComputeCloudAtCustomerCccUpgradeSchedulesOutputArgs } from "./getComputeCloudAtCustomerCccUpgradeSchedules";
export const getComputeCloudAtCustomerCccUpgradeSchedules: typeof import("./getComputeCloudAtCustomerCccUpgradeSchedules").getComputeCloudAtCustomerCccUpgradeSchedules = null as any;
export const getComputeCloudAtCustomerCccUpgradeSchedulesOutput: typeof import("./getComputeCloudAtCustomerCccUpgradeSchedules").getComputeCloudAtCustomerCccUpgradeSchedulesOutput = null as any;
utilities.lazyLoad(exports, ["getComputeCloudAtCustomerCccUpgradeSchedules","getComputeCloudAtCustomerCccUpgradeSchedulesOutput"], () => require("./getComputeCloudAtCustomerCccUpgradeSchedules"));

export { GetComputeinstanceagentInstanceAgentPluginArgs, GetComputeinstanceagentInstanceAgentPluginResult, GetComputeinstanceagentInstanceAgentPluginOutputArgs } from "./getComputeinstanceagentInstanceAgentPlugin";
export const getComputeinstanceagentInstanceAgentPlugin: typeof import("./getComputeinstanceagentInstanceAgentPlugin").getComputeinstanceagentInstanceAgentPlugin = null as any;
export const getComputeinstanceagentInstanceAgentPluginOutput: typeof import("./getComputeinstanceagentInstanceAgentPlugin").getComputeinstanceagentInstanceAgentPluginOutput = null as any;
utilities.lazyLoad(exports, ["getComputeinstanceagentInstanceAgentPlugin","getComputeinstanceagentInstanceAgentPluginOutput"], () => require("./getComputeinstanceagentInstanceAgentPlugin"));

export { GetComputeinstanceagentInstanceAgentPluginsArgs, GetComputeinstanceagentInstanceAgentPluginsResult, GetComputeinstanceagentInstanceAgentPluginsOutputArgs } from "./getComputeinstanceagentInstanceAgentPlugins";
export const getComputeinstanceagentInstanceAgentPlugins: typeof import("./getComputeinstanceagentInstanceAgentPlugins").getComputeinstanceagentInstanceAgentPlugins = null as any;
export const getComputeinstanceagentInstanceAgentPluginsOutput: typeof import("./getComputeinstanceagentInstanceAgentPlugins").getComputeinstanceagentInstanceAgentPluginsOutput = null as any;
utilities.lazyLoad(exports, ["getComputeinstanceagentInstanceAgentPlugins","getComputeinstanceagentInstanceAgentPluginsOutput"], () => require("./getComputeinstanceagentInstanceAgentPlugins"));

export { GetComputeinstanceagentInstanceAvailablePluginsArgs, GetComputeinstanceagentInstanceAvailablePluginsResult, GetComputeinstanceagentInstanceAvailablePluginsOutputArgs } from "./getComputeinstanceagentInstanceAvailablePlugins";
export const getComputeinstanceagentInstanceAvailablePlugins: typeof import("./getComputeinstanceagentInstanceAvailablePlugins").getComputeinstanceagentInstanceAvailablePlugins = null as any;
export const getComputeinstanceagentInstanceAvailablePluginsOutput: typeof import("./getComputeinstanceagentInstanceAvailablePlugins").getComputeinstanceagentInstanceAvailablePluginsOutput = null as any;
utilities.lazyLoad(exports, ["getComputeinstanceagentInstanceAvailablePlugins","getComputeinstanceagentInstanceAvailablePluginsOutput"], () => require("./getComputeinstanceagentInstanceAvailablePlugins"));

export { GetContainerInstancesContainerInstanceArgs, GetContainerInstancesContainerInstanceResult, GetContainerInstancesContainerInstanceOutputArgs } from "./getContainerInstancesContainerInstance";
export const getContainerInstancesContainerInstance: typeof import("./getContainerInstancesContainerInstance").getContainerInstancesContainerInstance = null as any;
export const getContainerInstancesContainerInstanceOutput: typeof import("./getContainerInstancesContainerInstance").getContainerInstancesContainerInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getContainerInstancesContainerInstance","getContainerInstancesContainerInstanceOutput"], () => require("./getContainerInstancesContainerInstance"));

export { GetContainerInstancesContainerInstanceShapeArgs, GetContainerInstancesContainerInstanceShapeResult, GetContainerInstancesContainerInstanceShapeOutputArgs } from "./getContainerInstancesContainerInstanceShape";
export const getContainerInstancesContainerInstanceShape: typeof import("./getContainerInstancesContainerInstanceShape").getContainerInstancesContainerInstanceShape = null as any;
export const getContainerInstancesContainerInstanceShapeOutput: typeof import("./getContainerInstancesContainerInstanceShape").getContainerInstancesContainerInstanceShapeOutput = null as any;
utilities.lazyLoad(exports, ["getContainerInstancesContainerInstanceShape","getContainerInstancesContainerInstanceShapeOutput"], () => require("./getContainerInstancesContainerInstanceShape"));

export { GetContainerInstancesContainerInstanceShapesArgs, GetContainerInstancesContainerInstanceShapesResult, GetContainerInstancesContainerInstanceShapesOutputArgs } from "./getContainerInstancesContainerInstanceShapes";
export const getContainerInstancesContainerInstanceShapes: typeof import("./getContainerInstancesContainerInstanceShapes").getContainerInstancesContainerInstanceShapes = null as any;
export const getContainerInstancesContainerInstanceShapesOutput: typeof import("./getContainerInstancesContainerInstanceShapes").getContainerInstancesContainerInstanceShapesOutput = null as any;
utilities.lazyLoad(exports, ["getContainerInstancesContainerInstanceShapes","getContainerInstancesContainerInstanceShapesOutput"], () => require("./getContainerInstancesContainerInstanceShapes"));

export { GetContainerInstancesContainerInstancesArgs, GetContainerInstancesContainerInstancesResult, GetContainerInstancesContainerInstancesOutputArgs } from "./getContainerInstancesContainerInstances";
export const getContainerInstancesContainerInstances: typeof import("./getContainerInstancesContainerInstances").getContainerInstancesContainerInstances = null as any;
export const getContainerInstancesContainerInstancesOutput: typeof import("./getContainerInstancesContainerInstances").getContainerInstancesContainerInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getContainerInstancesContainerInstances","getContainerInstancesContainerInstancesOutput"], () => require("./getContainerInstancesContainerInstances"));

export { GetContainerengineAddonArgs, GetContainerengineAddonResult, GetContainerengineAddonOutputArgs } from "./getContainerengineAddon";
export const getContainerengineAddon: typeof import("./getContainerengineAddon").getContainerengineAddon = null as any;
export const getContainerengineAddonOutput: typeof import("./getContainerengineAddon").getContainerengineAddonOutput = null as any;
utilities.lazyLoad(exports, ["getContainerengineAddon","getContainerengineAddonOutput"], () => require("./getContainerengineAddon"));

export { GetContainerengineAddonOptionsArgs, GetContainerengineAddonOptionsResult, GetContainerengineAddonOptionsOutputArgs } from "./getContainerengineAddonOptions";
export const getContainerengineAddonOptions: typeof import("./getContainerengineAddonOptions").getContainerengineAddonOptions = null as any;
export const getContainerengineAddonOptionsOutput: typeof import("./getContainerengineAddonOptions").getContainerengineAddonOptionsOutput = null as any;
utilities.lazyLoad(exports, ["getContainerengineAddonOptions","getContainerengineAddonOptionsOutput"], () => require("./getContainerengineAddonOptions"));

export { GetContainerengineAddonsArgs, GetContainerengineAddonsResult, GetContainerengineAddonsOutputArgs } from "./getContainerengineAddons";
export const getContainerengineAddons: typeof import("./getContainerengineAddons").getContainerengineAddons = null as any;
export const getContainerengineAddonsOutput: typeof import("./getContainerengineAddons").getContainerengineAddonsOutput = null as any;
utilities.lazyLoad(exports, ["getContainerengineAddons","getContainerengineAddonsOutput"], () => require("./getContainerengineAddons"));

export { GetContainerengineClusterCredentialRotationStatusArgs, GetContainerengineClusterCredentialRotationStatusResult, GetContainerengineClusterCredentialRotationStatusOutputArgs } from "./getContainerengineClusterCredentialRotationStatus";
export const getContainerengineClusterCredentialRotationStatus: typeof import("./getContainerengineClusterCredentialRotationStatus").getContainerengineClusterCredentialRotationStatus = null as any;
export const getContainerengineClusterCredentialRotationStatusOutput: typeof import("./getContainerengineClusterCredentialRotationStatus").getContainerengineClusterCredentialRotationStatusOutput = null as any;
utilities.lazyLoad(exports, ["getContainerengineClusterCredentialRotationStatus","getContainerengineClusterCredentialRotationStatusOutput"], () => require("./getContainerengineClusterCredentialRotationStatus"));

export { GetContainerengineClusterKubeConfigArgs, GetContainerengineClusterKubeConfigResult, GetContainerengineClusterKubeConfigOutputArgs } from "./getContainerengineClusterKubeConfig";
export const getContainerengineClusterKubeConfig: typeof import("./getContainerengineClusterKubeConfig").getContainerengineClusterKubeConfig = null as any;
export const getContainerengineClusterKubeConfigOutput: typeof import("./getContainerengineClusterKubeConfig").getContainerengineClusterKubeConfigOutput = null as any;
utilities.lazyLoad(exports, ["getContainerengineClusterKubeConfig","getContainerengineClusterKubeConfigOutput"], () => require("./getContainerengineClusterKubeConfig"));

export { GetContainerengineClusterOptionArgs, GetContainerengineClusterOptionResult, GetContainerengineClusterOptionOutputArgs } from "./getContainerengineClusterOption";
export const getContainerengineClusterOption: typeof import("./getContainerengineClusterOption").getContainerengineClusterOption = null as any;
export const getContainerengineClusterOptionOutput: typeof import("./getContainerengineClusterOption").getContainerengineClusterOptionOutput = null as any;
utilities.lazyLoad(exports, ["getContainerengineClusterOption","getContainerengineClusterOptionOutput"], () => require("./getContainerengineClusterOption"));

export { GetContainerengineClusterWorkloadMappingArgs, GetContainerengineClusterWorkloadMappingResult, GetContainerengineClusterWorkloadMappingOutputArgs } from "./getContainerengineClusterWorkloadMapping";
export const getContainerengineClusterWorkloadMapping: typeof import("./getContainerengineClusterWorkloadMapping").getContainerengineClusterWorkloadMapping = null as any;
export const getContainerengineClusterWorkloadMappingOutput: typeof import("./getContainerengineClusterWorkloadMapping").getContainerengineClusterWorkloadMappingOutput = null as any;
utilities.lazyLoad(exports, ["getContainerengineClusterWorkloadMapping","getContainerengineClusterWorkloadMappingOutput"], () => require("./getContainerengineClusterWorkloadMapping"));

export { GetContainerengineClusterWorkloadMappingsArgs, GetContainerengineClusterWorkloadMappingsResult, GetContainerengineClusterWorkloadMappingsOutputArgs } from "./getContainerengineClusterWorkloadMappings";
export const getContainerengineClusterWorkloadMappings: typeof import("./getContainerengineClusterWorkloadMappings").getContainerengineClusterWorkloadMappings = null as any;
export const getContainerengineClusterWorkloadMappingsOutput: typeof import("./getContainerengineClusterWorkloadMappings").getContainerengineClusterWorkloadMappingsOutput = null as any;
utilities.lazyLoad(exports, ["getContainerengineClusterWorkloadMappings","getContainerengineClusterWorkloadMappingsOutput"], () => require("./getContainerengineClusterWorkloadMappings"));

export { GetContainerengineClustersArgs, GetContainerengineClustersResult, GetContainerengineClustersOutputArgs } from "./getContainerengineClusters";
export const getContainerengineClusters: typeof import("./getContainerengineClusters").getContainerengineClusters = null as any;
export const getContainerengineClustersOutput: typeof import("./getContainerengineClusters").getContainerengineClustersOutput = null as any;
utilities.lazyLoad(exports, ["getContainerengineClusters","getContainerengineClustersOutput"], () => require("./getContainerengineClusters"));

export { GetContainerengineMigrateToNativeVcnStatusArgs, GetContainerengineMigrateToNativeVcnStatusResult, GetContainerengineMigrateToNativeVcnStatusOutputArgs } from "./getContainerengineMigrateToNativeVcnStatus";
export const getContainerengineMigrateToNativeVcnStatus: typeof import("./getContainerengineMigrateToNativeVcnStatus").getContainerengineMigrateToNativeVcnStatus = null as any;
export const getContainerengineMigrateToNativeVcnStatusOutput: typeof import("./getContainerengineMigrateToNativeVcnStatus").getContainerengineMigrateToNativeVcnStatusOutput = null as any;
utilities.lazyLoad(exports, ["getContainerengineMigrateToNativeVcnStatus","getContainerengineMigrateToNativeVcnStatusOutput"], () => require("./getContainerengineMigrateToNativeVcnStatus"));

export { GetContainerengineNodePoolArgs, GetContainerengineNodePoolResult, GetContainerengineNodePoolOutputArgs } from "./getContainerengineNodePool";
export const getContainerengineNodePool: typeof import("./getContainerengineNodePool").getContainerengineNodePool = null as any;
export const getContainerengineNodePoolOutput: typeof import("./getContainerengineNodePool").getContainerengineNodePoolOutput = null as any;
utilities.lazyLoad(exports, ["getContainerengineNodePool","getContainerengineNodePoolOutput"], () => require("./getContainerengineNodePool"));

export { GetContainerengineNodePoolOptionArgs, GetContainerengineNodePoolOptionResult, GetContainerengineNodePoolOptionOutputArgs } from "./getContainerengineNodePoolOption";
export const getContainerengineNodePoolOption: typeof import("./getContainerengineNodePoolOption").getContainerengineNodePoolOption = null as any;
export const getContainerengineNodePoolOptionOutput: typeof import("./getContainerengineNodePoolOption").getContainerengineNodePoolOptionOutput = null as any;
utilities.lazyLoad(exports, ["getContainerengineNodePoolOption","getContainerengineNodePoolOptionOutput"], () => require("./getContainerengineNodePoolOption"));

export { GetContainerengineNodePoolsArgs, GetContainerengineNodePoolsResult, GetContainerengineNodePoolsOutputArgs } from "./getContainerengineNodePools";
export const getContainerengineNodePools: typeof import("./getContainerengineNodePools").getContainerengineNodePools = null as any;
export const getContainerengineNodePoolsOutput: typeof import("./getContainerengineNodePools").getContainerengineNodePoolsOutput = null as any;
utilities.lazyLoad(exports, ["getContainerengineNodePools","getContainerengineNodePoolsOutput"], () => require("./getContainerengineNodePools"));

export { GetContainerenginePodShapesArgs, GetContainerenginePodShapesResult, GetContainerenginePodShapesOutputArgs } from "./getContainerenginePodShapes";
export const getContainerenginePodShapes: typeof import("./getContainerenginePodShapes").getContainerenginePodShapes = null as any;
export const getContainerenginePodShapesOutput: typeof import("./getContainerenginePodShapes").getContainerenginePodShapesOutput = null as any;
utilities.lazyLoad(exports, ["getContainerenginePodShapes","getContainerenginePodShapesOutput"], () => require("./getContainerenginePodShapes"));

export { GetContainerengineVirtualNodePoolArgs, GetContainerengineVirtualNodePoolResult, GetContainerengineVirtualNodePoolOutputArgs } from "./getContainerengineVirtualNodePool";
export const getContainerengineVirtualNodePool: typeof import("./getContainerengineVirtualNodePool").getContainerengineVirtualNodePool = null as any;
export const getContainerengineVirtualNodePoolOutput: typeof import("./getContainerengineVirtualNodePool").getContainerengineVirtualNodePoolOutput = null as any;
utilities.lazyLoad(exports, ["getContainerengineVirtualNodePool","getContainerengineVirtualNodePoolOutput"], () => require("./getContainerengineVirtualNodePool"));

export { GetContainerengineVirtualNodePoolsArgs, GetContainerengineVirtualNodePoolsResult, GetContainerengineVirtualNodePoolsOutputArgs } from "./getContainerengineVirtualNodePools";
export const getContainerengineVirtualNodePools: typeof import("./getContainerengineVirtualNodePools").getContainerengineVirtualNodePools = null as any;
export const getContainerengineVirtualNodePoolsOutput: typeof import("./getContainerengineVirtualNodePools").getContainerengineVirtualNodePoolsOutput = null as any;
utilities.lazyLoad(exports, ["getContainerengineVirtualNodePools","getContainerengineVirtualNodePoolsOutput"], () => require("./getContainerengineVirtualNodePools"));

export { GetContainerengineWorkRequestErrorsArgs, GetContainerengineWorkRequestErrorsResult, GetContainerengineWorkRequestErrorsOutputArgs } from "./getContainerengineWorkRequestErrors";
export const getContainerengineWorkRequestErrors: typeof import("./getContainerengineWorkRequestErrors").getContainerengineWorkRequestErrors = null as any;
export const getContainerengineWorkRequestErrorsOutput: typeof import("./getContainerengineWorkRequestErrors").getContainerengineWorkRequestErrorsOutput = null as any;
utilities.lazyLoad(exports, ["getContainerengineWorkRequestErrors","getContainerengineWorkRequestErrorsOutput"], () => require("./getContainerengineWorkRequestErrors"));

export { GetContainerengineWorkRequestLogEntriesArgs, GetContainerengineWorkRequestLogEntriesResult, GetContainerengineWorkRequestLogEntriesOutputArgs } from "./getContainerengineWorkRequestLogEntries";
export const getContainerengineWorkRequestLogEntries: typeof import("./getContainerengineWorkRequestLogEntries").getContainerengineWorkRequestLogEntries = null as any;
export const getContainerengineWorkRequestLogEntriesOutput: typeof import("./getContainerengineWorkRequestLogEntries").getContainerengineWorkRequestLogEntriesOutput = null as any;
utilities.lazyLoad(exports, ["getContainerengineWorkRequestLogEntries","getContainerengineWorkRequestLogEntriesOutput"], () => require("./getContainerengineWorkRequestLogEntries"));

export { GetContainerengineWorkRequestsArgs, GetContainerengineWorkRequestsResult, GetContainerengineWorkRequestsOutputArgs } from "./getContainerengineWorkRequests";
export const getContainerengineWorkRequests: typeof import("./getContainerengineWorkRequests").getContainerengineWorkRequests = null as any;
export const getContainerengineWorkRequestsOutput: typeof import("./getContainerengineWorkRequests").getContainerengineWorkRequestsOutput = null as any;
utilities.lazyLoad(exports, ["getContainerengineWorkRequests","getContainerengineWorkRequestsOutput"], () => require("./getContainerengineWorkRequests"));

export { GetCoreAppCatalogListingArgs, GetCoreAppCatalogListingResult, GetCoreAppCatalogListingOutputArgs } from "./getCoreAppCatalogListing";
export const getCoreAppCatalogListing: typeof import("./getCoreAppCatalogListing").getCoreAppCatalogListing = null as any;
export const getCoreAppCatalogListingOutput: typeof import("./getCoreAppCatalogListing").getCoreAppCatalogListingOutput = null as any;
utilities.lazyLoad(exports, ["getCoreAppCatalogListing","getCoreAppCatalogListingOutput"], () => require("./getCoreAppCatalogListing"));

export { GetCoreAppCatalogListingResourceVersionArgs, GetCoreAppCatalogListingResourceVersionResult, GetCoreAppCatalogListingResourceVersionOutputArgs } from "./getCoreAppCatalogListingResourceVersion";
export const getCoreAppCatalogListingResourceVersion: typeof import("./getCoreAppCatalogListingResourceVersion").getCoreAppCatalogListingResourceVersion = null as any;
export const getCoreAppCatalogListingResourceVersionOutput: typeof import("./getCoreAppCatalogListingResourceVersion").getCoreAppCatalogListingResourceVersionOutput = null as any;
utilities.lazyLoad(exports, ["getCoreAppCatalogListingResourceVersion","getCoreAppCatalogListingResourceVersionOutput"], () => require("./getCoreAppCatalogListingResourceVersion"));

export { GetCoreAppCatalogListingResourceVersionsArgs, GetCoreAppCatalogListingResourceVersionsResult, GetCoreAppCatalogListingResourceVersionsOutputArgs } from "./getCoreAppCatalogListingResourceVersions";
export const getCoreAppCatalogListingResourceVersions: typeof import("./getCoreAppCatalogListingResourceVersions").getCoreAppCatalogListingResourceVersions = null as any;
export const getCoreAppCatalogListingResourceVersionsOutput: typeof import("./getCoreAppCatalogListingResourceVersions").getCoreAppCatalogListingResourceVersionsOutput = null as any;
utilities.lazyLoad(exports, ["getCoreAppCatalogListingResourceVersions","getCoreAppCatalogListingResourceVersionsOutput"], () => require("./getCoreAppCatalogListingResourceVersions"));

export { GetCoreAppCatalogListingsArgs, GetCoreAppCatalogListingsResult, GetCoreAppCatalogListingsOutputArgs } from "./getCoreAppCatalogListings";
export const getCoreAppCatalogListings: typeof import("./getCoreAppCatalogListings").getCoreAppCatalogListings = null as any;
export const getCoreAppCatalogListingsOutput: typeof import("./getCoreAppCatalogListings").getCoreAppCatalogListingsOutput = null as any;
utilities.lazyLoad(exports, ["getCoreAppCatalogListings","getCoreAppCatalogListingsOutput"], () => require("./getCoreAppCatalogListings"));

export { GetCoreAppCatalogSubscriptionsArgs, GetCoreAppCatalogSubscriptionsResult, GetCoreAppCatalogSubscriptionsOutputArgs } from "./getCoreAppCatalogSubscriptions";
export const getCoreAppCatalogSubscriptions: typeof import("./getCoreAppCatalogSubscriptions").getCoreAppCatalogSubscriptions = null as any;
export const getCoreAppCatalogSubscriptionsOutput: typeof import("./getCoreAppCatalogSubscriptions").getCoreAppCatalogSubscriptionsOutput = null as any;
utilities.lazyLoad(exports, ["getCoreAppCatalogSubscriptions","getCoreAppCatalogSubscriptionsOutput"], () => require("./getCoreAppCatalogSubscriptions"));

export { GetCoreBlockVolumeReplicaArgs, GetCoreBlockVolumeReplicaResult, GetCoreBlockVolumeReplicaOutputArgs } from "./getCoreBlockVolumeReplica";
export const getCoreBlockVolumeReplica: typeof import("./getCoreBlockVolumeReplica").getCoreBlockVolumeReplica = null as any;
export const getCoreBlockVolumeReplicaOutput: typeof import("./getCoreBlockVolumeReplica").getCoreBlockVolumeReplicaOutput = null as any;
utilities.lazyLoad(exports, ["getCoreBlockVolumeReplica","getCoreBlockVolumeReplicaOutput"], () => require("./getCoreBlockVolumeReplica"));

export { GetCoreBlockVolumeReplicasArgs, GetCoreBlockVolumeReplicasResult, GetCoreBlockVolumeReplicasOutputArgs } from "./getCoreBlockVolumeReplicas";
export const getCoreBlockVolumeReplicas: typeof import("./getCoreBlockVolumeReplicas").getCoreBlockVolumeReplicas = null as any;
export const getCoreBlockVolumeReplicasOutput: typeof import("./getCoreBlockVolumeReplicas").getCoreBlockVolumeReplicasOutput = null as any;
utilities.lazyLoad(exports, ["getCoreBlockVolumeReplicas","getCoreBlockVolumeReplicasOutput"], () => require("./getCoreBlockVolumeReplicas"));

export { GetCoreBootVolumeArgs, GetCoreBootVolumeResult, GetCoreBootVolumeOutputArgs } from "./getCoreBootVolume";
export const getCoreBootVolume: typeof import("./getCoreBootVolume").getCoreBootVolume = null as any;
export const getCoreBootVolumeOutput: typeof import("./getCoreBootVolume").getCoreBootVolumeOutput = null as any;
utilities.lazyLoad(exports, ["getCoreBootVolume","getCoreBootVolumeOutput"], () => require("./getCoreBootVolume"));

export { GetCoreBootVolumeAttachmentsArgs, GetCoreBootVolumeAttachmentsResult, GetCoreBootVolumeAttachmentsOutputArgs } from "./getCoreBootVolumeAttachments";
export const getCoreBootVolumeAttachments: typeof import("./getCoreBootVolumeAttachments").getCoreBootVolumeAttachments = null as any;
export const getCoreBootVolumeAttachmentsOutput: typeof import("./getCoreBootVolumeAttachments").getCoreBootVolumeAttachmentsOutput = null as any;
utilities.lazyLoad(exports, ["getCoreBootVolumeAttachments","getCoreBootVolumeAttachmentsOutput"], () => require("./getCoreBootVolumeAttachments"));

export { GetCoreBootVolumeBackupArgs, GetCoreBootVolumeBackupResult, GetCoreBootVolumeBackupOutputArgs } from "./getCoreBootVolumeBackup";
export const getCoreBootVolumeBackup: typeof import("./getCoreBootVolumeBackup").getCoreBootVolumeBackup = null as any;
export const getCoreBootVolumeBackupOutput: typeof import("./getCoreBootVolumeBackup").getCoreBootVolumeBackupOutput = null as any;
utilities.lazyLoad(exports, ["getCoreBootVolumeBackup","getCoreBootVolumeBackupOutput"], () => require("./getCoreBootVolumeBackup"));

export { GetCoreBootVolumeBackupsArgs, GetCoreBootVolumeBackupsResult, GetCoreBootVolumeBackupsOutputArgs } from "./getCoreBootVolumeBackups";
export const getCoreBootVolumeBackups: typeof import("./getCoreBootVolumeBackups").getCoreBootVolumeBackups = null as any;
export const getCoreBootVolumeBackupsOutput: typeof import("./getCoreBootVolumeBackups").getCoreBootVolumeBackupsOutput = null as any;
utilities.lazyLoad(exports, ["getCoreBootVolumeBackups","getCoreBootVolumeBackupsOutput"], () => require("./getCoreBootVolumeBackups"));

export { GetCoreBootVolumeReplicaArgs, GetCoreBootVolumeReplicaResult, GetCoreBootVolumeReplicaOutputArgs } from "./getCoreBootVolumeReplica";
export const getCoreBootVolumeReplica: typeof import("./getCoreBootVolumeReplica").getCoreBootVolumeReplica = null as any;
export const getCoreBootVolumeReplicaOutput: typeof import("./getCoreBootVolumeReplica").getCoreBootVolumeReplicaOutput = null as any;
utilities.lazyLoad(exports, ["getCoreBootVolumeReplica","getCoreBootVolumeReplicaOutput"], () => require("./getCoreBootVolumeReplica"));

export { GetCoreBootVolumeReplicasArgs, GetCoreBootVolumeReplicasResult, GetCoreBootVolumeReplicasOutputArgs } from "./getCoreBootVolumeReplicas";
export const getCoreBootVolumeReplicas: typeof import("./getCoreBootVolumeReplicas").getCoreBootVolumeReplicas = null as any;
export const getCoreBootVolumeReplicasOutput: typeof import("./getCoreBootVolumeReplicas").getCoreBootVolumeReplicasOutput = null as any;
utilities.lazyLoad(exports, ["getCoreBootVolumeReplicas","getCoreBootVolumeReplicasOutput"], () => require("./getCoreBootVolumeReplicas"));

export { GetCoreBootVolumesArgs, GetCoreBootVolumesResult, GetCoreBootVolumesOutputArgs } from "./getCoreBootVolumes";
export const getCoreBootVolumes: typeof import("./getCoreBootVolumes").getCoreBootVolumes = null as any;
export const getCoreBootVolumesOutput: typeof import("./getCoreBootVolumes").getCoreBootVolumesOutput = null as any;
utilities.lazyLoad(exports, ["getCoreBootVolumes","getCoreBootVolumesOutput"], () => require("./getCoreBootVolumes"));

export { GetCoreByoipAllocatedRangesArgs, GetCoreByoipAllocatedRangesResult, GetCoreByoipAllocatedRangesOutputArgs } from "./getCoreByoipAllocatedRanges";
export const getCoreByoipAllocatedRanges: typeof import("./getCoreByoipAllocatedRanges").getCoreByoipAllocatedRanges = null as any;
export const getCoreByoipAllocatedRangesOutput: typeof import("./getCoreByoipAllocatedRanges").getCoreByoipAllocatedRangesOutput = null as any;
utilities.lazyLoad(exports, ["getCoreByoipAllocatedRanges","getCoreByoipAllocatedRangesOutput"], () => require("./getCoreByoipAllocatedRanges"));

export { GetCoreByoipRangeArgs, GetCoreByoipRangeResult, GetCoreByoipRangeOutputArgs } from "./getCoreByoipRange";
export const getCoreByoipRange: typeof import("./getCoreByoipRange").getCoreByoipRange = null as any;
export const getCoreByoipRangeOutput: typeof import("./getCoreByoipRange").getCoreByoipRangeOutput = null as any;
utilities.lazyLoad(exports, ["getCoreByoipRange","getCoreByoipRangeOutput"], () => require("./getCoreByoipRange"));

export { GetCoreByoipRangesArgs, GetCoreByoipRangesResult, GetCoreByoipRangesOutputArgs } from "./getCoreByoipRanges";
export const getCoreByoipRanges: typeof import("./getCoreByoipRanges").getCoreByoipRanges = null as any;
export const getCoreByoipRangesOutput: typeof import("./getCoreByoipRanges").getCoreByoipRangesOutput = null as any;
utilities.lazyLoad(exports, ["getCoreByoipRanges","getCoreByoipRangesOutput"], () => require("./getCoreByoipRanges"));

export { GetCoreCaptureFilterArgs, GetCoreCaptureFilterResult, GetCoreCaptureFilterOutputArgs } from "./getCoreCaptureFilter";
export const getCoreCaptureFilter: typeof import("./getCoreCaptureFilter").getCoreCaptureFilter = null as any;
export const getCoreCaptureFilterOutput: typeof import("./getCoreCaptureFilter").getCoreCaptureFilterOutput = null as any;
utilities.lazyLoad(exports, ["getCoreCaptureFilter","getCoreCaptureFilterOutput"], () => require("./getCoreCaptureFilter"));

export { GetCoreCaptureFiltersArgs, GetCoreCaptureFiltersResult, GetCoreCaptureFiltersOutputArgs } from "./getCoreCaptureFilters";
export const getCoreCaptureFilters: typeof import("./getCoreCaptureFilters").getCoreCaptureFilters = null as any;
export const getCoreCaptureFiltersOutput: typeof import("./getCoreCaptureFilters").getCoreCaptureFiltersOutput = null as any;
utilities.lazyLoad(exports, ["getCoreCaptureFilters","getCoreCaptureFiltersOutput"], () => require("./getCoreCaptureFilters"));

export { GetCoreClusterNetworkArgs, GetCoreClusterNetworkResult, GetCoreClusterNetworkOutputArgs } from "./getCoreClusterNetwork";
export const getCoreClusterNetwork: typeof import("./getCoreClusterNetwork").getCoreClusterNetwork = null as any;
export const getCoreClusterNetworkOutput: typeof import("./getCoreClusterNetwork").getCoreClusterNetworkOutput = null as any;
utilities.lazyLoad(exports, ["getCoreClusterNetwork","getCoreClusterNetworkOutput"], () => require("./getCoreClusterNetwork"));

export { GetCoreClusterNetworkInstancesArgs, GetCoreClusterNetworkInstancesResult, GetCoreClusterNetworkInstancesOutputArgs } from "./getCoreClusterNetworkInstances";
export const getCoreClusterNetworkInstances: typeof import("./getCoreClusterNetworkInstances").getCoreClusterNetworkInstances = null as any;
export const getCoreClusterNetworkInstancesOutput: typeof import("./getCoreClusterNetworkInstances").getCoreClusterNetworkInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getCoreClusterNetworkInstances","getCoreClusterNetworkInstancesOutput"], () => require("./getCoreClusterNetworkInstances"));

export { GetCoreClusterNetworksArgs, GetCoreClusterNetworksResult, GetCoreClusterNetworksOutputArgs } from "./getCoreClusterNetworks";
export const getCoreClusterNetworks: typeof import("./getCoreClusterNetworks").getCoreClusterNetworks = null as any;
export const getCoreClusterNetworksOutput: typeof import("./getCoreClusterNetworks").getCoreClusterNetworksOutput = null as any;
utilities.lazyLoad(exports, ["getCoreClusterNetworks","getCoreClusterNetworksOutput"], () => require("./getCoreClusterNetworks"));

export { GetCoreComputeCapacityReservationArgs, GetCoreComputeCapacityReservationResult, GetCoreComputeCapacityReservationOutputArgs } from "./getCoreComputeCapacityReservation";
export const getCoreComputeCapacityReservation: typeof import("./getCoreComputeCapacityReservation").getCoreComputeCapacityReservation = null as any;
export const getCoreComputeCapacityReservationOutput: typeof import("./getCoreComputeCapacityReservation").getCoreComputeCapacityReservationOutput = null as any;
utilities.lazyLoad(exports, ["getCoreComputeCapacityReservation","getCoreComputeCapacityReservationOutput"], () => require("./getCoreComputeCapacityReservation"));

export { GetCoreComputeCapacityReservationInstanceShapesArgs, GetCoreComputeCapacityReservationInstanceShapesResult, GetCoreComputeCapacityReservationInstanceShapesOutputArgs } from "./getCoreComputeCapacityReservationInstanceShapes";
export const getCoreComputeCapacityReservationInstanceShapes: typeof import("./getCoreComputeCapacityReservationInstanceShapes").getCoreComputeCapacityReservationInstanceShapes = null as any;
export const getCoreComputeCapacityReservationInstanceShapesOutput: typeof import("./getCoreComputeCapacityReservationInstanceShapes").getCoreComputeCapacityReservationInstanceShapesOutput = null as any;
utilities.lazyLoad(exports, ["getCoreComputeCapacityReservationInstanceShapes","getCoreComputeCapacityReservationInstanceShapesOutput"], () => require("./getCoreComputeCapacityReservationInstanceShapes"));

export { GetCoreComputeCapacityReservationInstancesArgs, GetCoreComputeCapacityReservationInstancesResult, GetCoreComputeCapacityReservationInstancesOutputArgs } from "./getCoreComputeCapacityReservationInstances";
export const getCoreComputeCapacityReservationInstances: typeof import("./getCoreComputeCapacityReservationInstances").getCoreComputeCapacityReservationInstances = null as any;
export const getCoreComputeCapacityReservationInstancesOutput: typeof import("./getCoreComputeCapacityReservationInstances").getCoreComputeCapacityReservationInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getCoreComputeCapacityReservationInstances","getCoreComputeCapacityReservationInstancesOutput"], () => require("./getCoreComputeCapacityReservationInstances"));

export { GetCoreComputeCapacityReservationsArgs, GetCoreComputeCapacityReservationsResult, GetCoreComputeCapacityReservationsOutputArgs } from "./getCoreComputeCapacityReservations";
export const getCoreComputeCapacityReservations: typeof import("./getCoreComputeCapacityReservations").getCoreComputeCapacityReservations = null as any;
export const getCoreComputeCapacityReservationsOutput: typeof import("./getCoreComputeCapacityReservations").getCoreComputeCapacityReservationsOutput = null as any;
utilities.lazyLoad(exports, ["getCoreComputeCapacityReservations","getCoreComputeCapacityReservationsOutput"], () => require("./getCoreComputeCapacityReservations"));

export { GetCoreComputeCapacityTopologiesArgs, GetCoreComputeCapacityTopologiesResult, GetCoreComputeCapacityTopologiesOutputArgs } from "./getCoreComputeCapacityTopologies";
export const getCoreComputeCapacityTopologies: typeof import("./getCoreComputeCapacityTopologies").getCoreComputeCapacityTopologies = null as any;
export const getCoreComputeCapacityTopologiesOutput: typeof import("./getCoreComputeCapacityTopologies").getCoreComputeCapacityTopologiesOutput = null as any;
utilities.lazyLoad(exports, ["getCoreComputeCapacityTopologies","getCoreComputeCapacityTopologiesOutput"], () => require("./getCoreComputeCapacityTopologies"));

export { GetCoreComputeCapacityTopologyArgs, GetCoreComputeCapacityTopologyResult, GetCoreComputeCapacityTopologyOutputArgs } from "./getCoreComputeCapacityTopology";
export const getCoreComputeCapacityTopology: typeof import("./getCoreComputeCapacityTopology").getCoreComputeCapacityTopology = null as any;
export const getCoreComputeCapacityTopologyOutput: typeof import("./getCoreComputeCapacityTopology").getCoreComputeCapacityTopologyOutput = null as any;
utilities.lazyLoad(exports, ["getCoreComputeCapacityTopology","getCoreComputeCapacityTopologyOutput"], () => require("./getCoreComputeCapacityTopology"));

export { GetCoreComputeCapacityTopologyComputeBareMetalHostsArgs, GetCoreComputeCapacityTopologyComputeBareMetalHostsResult, GetCoreComputeCapacityTopologyComputeBareMetalHostsOutputArgs } from "./getCoreComputeCapacityTopologyComputeBareMetalHosts";
export const getCoreComputeCapacityTopologyComputeBareMetalHosts: typeof import("./getCoreComputeCapacityTopologyComputeBareMetalHosts").getCoreComputeCapacityTopologyComputeBareMetalHosts = null as any;
export const getCoreComputeCapacityTopologyComputeBareMetalHostsOutput: typeof import("./getCoreComputeCapacityTopologyComputeBareMetalHosts").getCoreComputeCapacityTopologyComputeBareMetalHostsOutput = null as any;
utilities.lazyLoad(exports, ["getCoreComputeCapacityTopologyComputeBareMetalHosts","getCoreComputeCapacityTopologyComputeBareMetalHostsOutput"], () => require("./getCoreComputeCapacityTopologyComputeBareMetalHosts"));

export { GetCoreComputeCapacityTopologyComputeHpcIslandsArgs, GetCoreComputeCapacityTopologyComputeHpcIslandsResult, GetCoreComputeCapacityTopologyComputeHpcIslandsOutputArgs } from "./getCoreComputeCapacityTopologyComputeHpcIslands";
export const getCoreComputeCapacityTopologyComputeHpcIslands: typeof import("./getCoreComputeCapacityTopologyComputeHpcIslands").getCoreComputeCapacityTopologyComputeHpcIslands = null as any;
export const getCoreComputeCapacityTopologyComputeHpcIslandsOutput: typeof import("./getCoreComputeCapacityTopologyComputeHpcIslands").getCoreComputeCapacityTopologyComputeHpcIslandsOutput = null as any;
utilities.lazyLoad(exports, ["getCoreComputeCapacityTopologyComputeHpcIslands","getCoreComputeCapacityTopologyComputeHpcIslandsOutput"], () => require("./getCoreComputeCapacityTopologyComputeHpcIslands"));

export { GetCoreComputeCapacityTopologyComputeNetworkBlocksArgs, GetCoreComputeCapacityTopologyComputeNetworkBlocksResult, GetCoreComputeCapacityTopologyComputeNetworkBlocksOutputArgs } from "./getCoreComputeCapacityTopologyComputeNetworkBlocks";
export const getCoreComputeCapacityTopologyComputeNetworkBlocks: typeof import("./getCoreComputeCapacityTopologyComputeNetworkBlocks").getCoreComputeCapacityTopologyComputeNetworkBlocks = null as any;
export const getCoreComputeCapacityTopologyComputeNetworkBlocksOutput: typeof import("./getCoreComputeCapacityTopologyComputeNetworkBlocks").getCoreComputeCapacityTopologyComputeNetworkBlocksOutput = null as any;
utilities.lazyLoad(exports, ["getCoreComputeCapacityTopologyComputeNetworkBlocks","getCoreComputeCapacityTopologyComputeNetworkBlocksOutput"], () => require("./getCoreComputeCapacityTopologyComputeNetworkBlocks"));

export { GetCoreComputeClusterArgs, GetCoreComputeClusterResult, GetCoreComputeClusterOutputArgs } from "./getCoreComputeCluster";
export const getCoreComputeCluster: typeof import("./getCoreComputeCluster").getCoreComputeCluster = null as any;
export const getCoreComputeClusterOutput: typeof import("./getCoreComputeCluster").getCoreComputeClusterOutput = null as any;
utilities.lazyLoad(exports, ["getCoreComputeCluster","getCoreComputeClusterOutput"], () => require("./getCoreComputeCluster"));

export { GetCoreComputeClustersArgs, GetCoreComputeClustersResult, GetCoreComputeClustersOutputArgs } from "./getCoreComputeClusters";
export const getCoreComputeClusters: typeof import("./getCoreComputeClusters").getCoreComputeClusters = null as any;
export const getCoreComputeClustersOutput: typeof import("./getCoreComputeClusters").getCoreComputeClustersOutput = null as any;
utilities.lazyLoad(exports, ["getCoreComputeClusters","getCoreComputeClustersOutput"], () => require("./getCoreComputeClusters"));

export { GetCoreComputeGlobalImageCapabilitySchemaArgs, GetCoreComputeGlobalImageCapabilitySchemaResult, GetCoreComputeGlobalImageCapabilitySchemaOutputArgs } from "./getCoreComputeGlobalImageCapabilitySchema";
export const getCoreComputeGlobalImageCapabilitySchema: typeof import("./getCoreComputeGlobalImageCapabilitySchema").getCoreComputeGlobalImageCapabilitySchema = null as any;
export const getCoreComputeGlobalImageCapabilitySchemaOutput: typeof import("./getCoreComputeGlobalImageCapabilitySchema").getCoreComputeGlobalImageCapabilitySchemaOutput = null as any;
utilities.lazyLoad(exports, ["getCoreComputeGlobalImageCapabilitySchema","getCoreComputeGlobalImageCapabilitySchemaOutput"], () => require("./getCoreComputeGlobalImageCapabilitySchema"));

export { GetCoreComputeGlobalImageCapabilitySchemasArgs, GetCoreComputeGlobalImageCapabilitySchemasResult, GetCoreComputeGlobalImageCapabilitySchemasOutputArgs } from "./getCoreComputeGlobalImageCapabilitySchemas";
export const getCoreComputeGlobalImageCapabilitySchemas: typeof import("./getCoreComputeGlobalImageCapabilitySchemas").getCoreComputeGlobalImageCapabilitySchemas = null as any;
export const getCoreComputeGlobalImageCapabilitySchemasOutput: typeof import("./getCoreComputeGlobalImageCapabilitySchemas").getCoreComputeGlobalImageCapabilitySchemasOutput = null as any;
utilities.lazyLoad(exports, ["getCoreComputeGlobalImageCapabilitySchemas","getCoreComputeGlobalImageCapabilitySchemasOutput"], () => require("./getCoreComputeGlobalImageCapabilitySchemas"));

export { GetCoreComputeGlobalImageCapabilitySchemasVersionArgs, GetCoreComputeGlobalImageCapabilitySchemasVersionResult, GetCoreComputeGlobalImageCapabilitySchemasVersionOutputArgs } from "./getCoreComputeGlobalImageCapabilitySchemasVersion";
export const getCoreComputeGlobalImageCapabilitySchemasVersion: typeof import("./getCoreComputeGlobalImageCapabilitySchemasVersion").getCoreComputeGlobalImageCapabilitySchemasVersion = null as any;
export const getCoreComputeGlobalImageCapabilitySchemasVersionOutput: typeof import("./getCoreComputeGlobalImageCapabilitySchemasVersion").getCoreComputeGlobalImageCapabilitySchemasVersionOutput = null as any;
utilities.lazyLoad(exports, ["getCoreComputeGlobalImageCapabilitySchemasVersion","getCoreComputeGlobalImageCapabilitySchemasVersionOutput"], () => require("./getCoreComputeGlobalImageCapabilitySchemasVersion"));

export { GetCoreComputeGlobalImageCapabilitySchemasVersionsArgs, GetCoreComputeGlobalImageCapabilitySchemasVersionsResult, GetCoreComputeGlobalImageCapabilitySchemasVersionsOutputArgs } from "./getCoreComputeGlobalImageCapabilitySchemasVersions";
export const getCoreComputeGlobalImageCapabilitySchemasVersions: typeof import("./getCoreComputeGlobalImageCapabilitySchemasVersions").getCoreComputeGlobalImageCapabilitySchemasVersions = null as any;
export const getCoreComputeGlobalImageCapabilitySchemasVersionsOutput: typeof import("./getCoreComputeGlobalImageCapabilitySchemasVersions").getCoreComputeGlobalImageCapabilitySchemasVersionsOutput = null as any;
utilities.lazyLoad(exports, ["getCoreComputeGlobalImageCapabilitySchemasVersions","getCoreComputeGlobalImageCapabilitySchemasVersionsOutput"], () => require("./getCoreComputeGlobalImageCapabilitySchemasVersions"));

export { GetCoreComputeImageCapabilitySchemaArgs, GetCoreComputeImageCapabilitySchemaResult, GetCoreComputeImageCapabilitySchemaOutputArgs } from "./getCoreComputeImageCapabilitySchema";
export const getCoreComputeImageCapabilitySchema: typeof import("./getCoreComputeImageCapabilitySchema").getCoreComputeImageCapabilitySchema = null as any;
export const getCoreComputeImageCapabilitySchemaOutput: typeof import("./getCoreComputeImageCapabilitySchema").getCoreComputeImageCapabilitySchemaOutput = null as any;
utilities.lazyLoad(exports, ["getCoreComputeImageCapabilitySchema","getCoreComputeImageCapabilitySchemaOutput"], () => require("./getCoreComputeImageCapabilitySchema"));

export { GetCoreComputeImageCapabilitySchemasArgs, GetCoreComputeImageCapabilitySchemasResult, GetCoreComputeImageCapabilitySchemasOutputArgs } from "./getCoreComputeImageCapabilitySchemas";
export const getCoreComputeImageCapabilitySchemas: typeof import("./getCoreComputeImageCapabilitySchemas").getCoreComputeImageCapabilitySchemas = null as any;
export const getCoreComputeImageCapabilitySchemasOutput: typeof import("./getCoreComputeImageCapabilitySchemas").getCoreComputeImageCapabilitySchemasOutput = null as any;
utilities.lazyLoad(exports, ["getCoreComputeImageCapabilitySchemas","getCoreComputeImageCapabilitySchemasOutput"], () => require("./getCoreComputeImageCapabilitySchemas"));

export { GetCoreConsoleHistoriesArgs, GetCoreConsoleHistoriesResult, GetCoreConsoleHistoriesOutputArgs } from "./getCoreConsoleHistories";
export const getCoreConsoleHistories: typeof import("./getCoreConsoleHistories").getCoreConsoleHistories = null as any;
export const getCoreConsoleHistoriesOutput: typeof import("./getCoreConsoleHistories").getCoreConsoleHistoriesOutput = null as any;
utilities.lazyLoad(exports, ["getCoreConsoleHistories","getCoreConsoleHistoriesOutput"], () => require("./getCoreConsoleHistories"));

export { GetCoreConsoleHistoryDataArgs, GetCoreConsoleHistoryDataResult, GetCoreConsoleHistoryDataOutputArgs } from "./getCoreConsoleHistoryData";
export const getCoreConsoleHistoryData: typeof import("./getCoreConsoleHistoryData").getCoreConsoleHistoryData = null as any;
export const getCoreConsoleHistoryDataOutput: typeof import("./getCoreConsoleHistoryData").getCoreConsoleHistoryDataOutput = null as any;
utilities.lazyLoad(exports, ["getCoreConsoleHistoryData","getCoreConsoleHistoryDataOutput"], () => require("./getCoreConsoleHistoryData"));

export { GetCoreCpeDeviceShapeArgs, GetCoreCpeDeviceShapeResult, GetCoreCpeDeviceShapeOutputArgs } from "./getCoreCpeDeviceShape";
export const getCoreCpeDeviceShape: typeof import("./getCoreCpeDeviceShape").getCoreCpeDeviceShape = null as any;
export const getCoreCpeDeviceShapeOutput: typeof import("./getCoreCpeDeviceShape").getCoreCpeDeviceShapeOutput = null as any;
utilities.lazyLoad(exports, ["getCoreCpeDeviceShape","getCoreCpeDeviceShapeOutput"], () => require("./getCoreCpeDeviceShape"));

export { GetCoreCpeDeviceShapesArgs, GetCoreCpeDeviceShapesResult, GetCoreCpeDeviceShapesOutputArgs } from "./getCoreCpeDeviceShapes";
export const getCoreCpeDeviceShapes: typeof import("./getCoreCpeDeviceShapes").getCoreCpeDeviceShapes = null as any;
export const getCoreCpeDeviceShapesOutput: typeof import("./getCoreCpeDeviceShapes").getCoreCpeDeviceShapesOutput = null as any;
utilities.lazyLoad(exports, ["getCoreCpeDeviceShapes","getCoreCpeDeviceShapesOutput"], () => require("./getCoreCpeDeviceShapes"));

export { GetCoreCpesArgs, GetCoreCpesResult, GetCoreCpesOutputArgs } from "./getCoreCpes";
export const getCoreCpes: typeof import("./getCoreCpes").getCoreCpes = null as any;
export const getCoreCpesOutput: typeof import("./getCoreCpes").getCoreCpesOutput = null as any;
utilities.lazyLoad(exports, ["getCoreCpes","getCoreCpesOutput"], () => require("./getCoreCpes"));

export { GetCoreCrossConnectArgs, GetCoreCrossConnectResult, GetCoreCrossConnectOutputArgs } from "./getCoreCrossConnect";
export const getCoreCrossConnect: typeof import("./getCoreCrossConnect").getCoreCrossConnect = null as any;
export const getCoreCrossConnectOutput: typeof import("./getCoreCrossConnect").getCoreCrossConnectOutput = null as any;
utilities.lazyLoad(exports, ["getCoreCrossConnect","getCoreCrossConnectOutput"], () => require("./getCoreCrossConnect"));

export { GetCoreCrossConnectGroupArgs, GetCoreCrossConnectGroupResult, GetCoreCrossConnectGroupOutputArgs } from "./getCoreCrossConnectGroup";
export const getCoreCrossConnectGroup: typeof import("./getCoreCrossConnectGroup").getCoreCrossConnectGroup = null as any;
export const getCoreCrossConnectGroupOutput: typeof import("./getCoreCrossConnectGroup").getCoreCrossConnectGroupOutput = null as any;
utilities.lazyLoad(exports, ["getCoreCrossConnectGroup","getCoreCrossConnectGroupOutput"], () => require("./getCoreCrossConnectGroup"));

export { GetCoreCrossConnectGroupsArgs, GetCoreCrossConnectGroupsResult, GetCoreCrossConnectGroupsOutputArgs } from "./getCoreCrossConnectGroups";
export const getCoreCrossConnectGroups: typeof import("./getCoreCrossConnectGroups").getCoreCrossConnectGroups = null as any;
export const getCoreCrossConnectGroupsOutput: typeof import("./getCoreCrossConnectGroups").getCoreCrossConnectGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getCoreCrossConnectGroups","getCoreCrossConnectGroupsOutput"], () => require("./getCoreCrossConnectGroups"));

export { GetCoreCrossConnectLocationsArgs, GetCoreCrossConnectLocationsResult, GetCoreCrossConnectLocationsOutputArgs } from "./getCoreCrossConnectLocations";
export const getCoreCrossConnectLocations: typeof import("./getCoreCrossConnectLocations").getCoreCrossConnectLocations = null as any;
export const getCoreCrossConnectLocationsOutput: typeof import("./getCoreCrossConnectLocations").getCoreCrossConnectLocationsOutput = null as any;
utilities.lazyLoad(exports, ["getCoreCrossConnectLocations","getCoreCrossConnectLocationsOutput"], () => require("./getCoreCrossConnectLocations"));

export { GetCoreCrossConnectPortSpeedShapesArgs, GetCoreCrossConnectPortSpeedShapesResult, GetCoreCrossConnectPortSpeedShapesOutputArgs } from "./getCoreCrossConnectPortSpeedShapes";
export const getCoreCrossConnectPortSpeedShapes: typeof import("./getCoreCrossConnectPortSpeedShapes").getCoreCrossConnectPortSpeedShapes = null as any;
export const getCoreCrossConnectPortSpeedShapesOutput: typeof import("./getCoreCrossConnectPortSpeedShapes").getCoreCrossConnectPortSpeedShapesOutput = null as any;
utilities.lazyLoad(exports, ["getCoreCrossConnectPortSpeedShapes","getCoreCrossConnectPortSpeedShapesOutput"], () => require("./getCoreCrossConnectPortSpeedShapes"));

export { GetCoreCrossConnectStatusArgs, GetCoreCrossConnectStatusResult, GetCoreCrossConnectStatusOutputArgs } from "./getCoreCrossConnectStatus";
export const getCoreCrossConnectStatus: typeof import("./getCoreCrossConnectStatus").getCoreCrossConnectStatus = null as any;
export const getCoreCrossConnectStatusOutput: typeof import("./getCoreCrossConnectStatus").getCoreCrossConnectStatusOutput = null as any;
utilities.lazyLoad(exports, ["getCoreCrossConnectStatus","getCoreCrossConnectStatusOutput"], () => require("./getCoreCrossConnectStatus"));

export { GetCoreCrossConnectsArgs, GetCoreCrossConnectsResult, GetCoreCrossConnectsOutputArgs } from "./getCoreCrossConnects";
export const getCoreCrossConnects: typeof import("./getCoreCrossConnects").getCoreCrossConnects = null as any;
export const getCoreCrossConnectsOutput: typeof import("./getCoreCrossConnects").getCoreCrossConnectsOutput = null as any;
utilities.lazyLoad(exports, ["getCoreCrossConnects","getCoreCrossConnectsOutput"], () => require("./getCoreCrossConnects"));

export { GetCoreDedicatedVmHostArgs, GetCoreDedicatedVmHostResult, GetCoreDedicatedVmHostOutputArgs } from "./getCoreDedicatedVmHost";
export const getCoreDedicatedVmHost: typeof import("./getCoreDedicatedVmHost").getCoreDedicatedVmHost = null as any;
export const getCoreDedicatedVmHostOutput: typeof import("./getCoreDedicatedVmHost").getCoreDedicatedVmHostOutput = null as any;
utilities.lazyLoad(exports, ["getCoreDedicatedVmHost","getCoreDedicatedVmHostOutput"], () => require("./getCoreDedicatedVmHost"));

export { GetCoreDedicatedVmHostInstanceShapesArgs, GetCoreDedicatedVmHostInstanceShapesResult, GetCoreDedicatedVmHostInstanceShapesOutputArgs } from "./getCoreDedicatedVmHostInstanceShapes";
export const getCoreDedicatedVmHostInstanceShapes: typeof import("./getCoreDedicatedVmHostInstanceShapes").getCoreDedicatedVmHostInstanceShapes = null as any;
export const getCoreDedicatedVmHostInstanceShapesOutput: typeof import("./getCoreDedicatedVmHostInstanceShapes").getCoreDedicatedVmHostInstanceShapesOutput = null as any;
utilities.lazyLoad(exports, ["getCoreDedicatedVmHostInstanceShapes","getCoreDedicatedVmHostInstanceShapesOutput"], () => require("./getCoreDedicatedVmHostInstanceShapes"));

export { GetCoreDedicatedVmHostShapesArgs, GetCoreDedicatedVmHostShapesResult, GetCoreDedicatedVmHostShapesOutputArgs } from "./getCoreDedicatedVmHostShapes";
export const getCoreDedicatedVmHostShapes: typeof import("./getCoreDedicatedVmHostShapes").getCoreDedicatedVmHostShapes = null as any;
export const getCoreDedicatedVmHostShapesOutput: typeof import("./getCoreDedicatedVmHostShapes").getCoreDedicatedVmHostShapesOutput = null as any;
utilities.lazyLoad(exports, ["getCoreDedicatedVmHostShapes","getCoreDedicatedVmHostShapesOutput"], () => require("./getCoreDedicatedVmHostShapes"));

export { GetCoreDedicatedVmHostsArgs, GetCoreDedicatedVmHostsResult, GetCoreDedicatedVmHostsOutputArgs } from "./getCoreDedicatedVmHosts";
export const getCoreDedicatedVmHosts: typeof import("./getCoreDedicatedVmHosts").getCoreDedicatedVmHosts = null as any;
export const getCoreDedicatedVmHostsOutput: typeof import("./getCoreDedicatedVmHosts").getCoreDedicatedVmHostsOutput = null as any;
utilities.lazyLoad(exports, ["getCoreDedicatedVmHosts","getCoreDedicatedVmHostsOutput"], () => require("./getCoreDedicatedVmHosts"));

export { GetCoreDedicatedVmHostsInstancesArgs, GetCoreDedicatedVmHostsInstancesResult, GetCoreDedicatedVmHostsInstancesOutputArgs } from "./getCoreDedicatedVmHostsInstances";
export const getCoreDedicatedVmHostsInstances: typeof import("./getCoreDedicatedVmHostsInstances").getCoreDedicatedVmHostsInstances = null as any;
export const getCoreDedicatedVmHostsInstancesOutput: typeof import("./getCoreDedicatedVmHostsInstances").getCoreDedicatedVmHostsInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getCoreDedicatedVmHostsInstances","getCoreDedicatedVmHostsInstancesOutput"], () => require("./getCoreDedicatedVmHostsInstances"));

export { GetCoreDhcpOptionsArgs, GetCoreDhcpOptionsResult, GetCoreDhcpOptionsOutputArgs } from "./getCoreDhcpOptions";
export const getCoreDhcpOptions: typeof import("./getCoreDhcpOptions").getCoreDhcpOptions = null as any;
export const getCoreDhcpOptionsOutput: typeof import("./getCoreDhcpOptions").getCoreDhcpOptionsOutput = null as any;
utilities.lazyLoad(exports, ["getCoreDhcpOptions","getCoreDhcpOptionsOutput"], () => require("./getCoreDhcpOptions"));

export { GetCoreDrgAttachmentsArgs, GetCoreDrgAttachmentsResult, GetCoreDrgAttachmentsOutputArgs } from "./getCoreDrgAttachments";
export const getCoreDrgAttachments: typeof import("./getCoreDrgAttachments").getCoreDrgAttachments = null as any;
export const getCoreDrgAttachmentsOutput: typeof import("./getCoreDrgAttachments").getCoreDrgAttachmentsOutput = null as any;
utilities.lazyLoad(exports, ["getCoreDrgAttachments","getCoreDrgAttachmentsOutput"], () => require("./getCoreDrgAttachments"));

export { GetCoreDrgRouteDistributionArgs, GetCoreDrgRouteDistributionResult, GetCoreDrgRouteDistributionOutputArgs } from "./getCoreDrgRouteDistribution";
export const getCoreDrgRouteDistribution: typeof import("./getCoreDrgRouteDistribution").getCoreDrgRouteDistribution = null as any;
export const getCoreDrgRouteDistributionOutput: typeof import("./getCoreDrgRouteDistribution").getCoreDrgRouteDistributionOutput = null as any;
utilities.lazyLoad(exports, ["getCoreDrgRouteDistribution","getCoreDrgRouteDistributionOutput"], () => require("./getCoreDrgRouteDistribution"));

export { GetCoreDrgRouteDistributionStatementsArgs, GetCoreDrgRouteDistributionStatementsResult, GetCoreDrgRouteDistributionStatementsOutputArgs } from "./getCoreDrgRouteDistributionStatements";
export const getCoreDrgRouteDistributionStatements: typeof import("./getCoreDrgRouteDistributionStatements").getCoreDrgRouteDistributionStatements = null as any;
export const getCoreDrgRouteDistributionStatementsOutput: typeof import("./getCoreDrgRouteDistributionStatements").getCoreDrgRouteDistributionStatementsOutput = null as any;
utilities.lazyLoad(exports, ["getCoreDrgRouteDistributionStatements","getCoreDrgRouteDistributionStatementsOutput"], () => require("./getCoreDrgRouteDistributionStatements"));

export { GetCoreDrgRouteDistributionsArgs, GetCoreDrgRouteDistributionsResult, GetCoreDrgRouteDistributionsOutputArgs } from "./getCoreDrgRouteDistributions";
export const getCoreDrgRouteDistributions: typeof import("./getCoreDrgRouteDistributions").getCoreDrgRouteDistributions = null as any;
export const getCoreDrgRouteDistributionsOutput: typeof import("./getCoreDrgRouteDistributions").getCoreDrgRouteDistributionsOutput = null as any;
utilities.lazyLoad(exports, ["getCoreDrgRouteDistributions","getCoreDrgRouteDistributionsOutput"], () => require("./getCoreDrgRouteDistributions"));

export { GetCoreDrgRouteTableArgs, GetCoreDrgRouteTableResult, GetCoreDrgRouteTableOutputArgs } from "./getCoreDrgRouteTable";
export const getCoreDrgRouteTable: typeof import("./getCoreDrgRouteTable").getCoreDrgRouteTable = null as any;
export const getCoreDrgRouteTableOutput: typeof import("./getCoreDrgRouteTable").getCoreDrgRouteTableOutput = null as any;
utilities.lazyLoad(exports, ["getCoreDrgRouteTable","getCoreDrgRouteTableOutput"], () => require("./getCoreDrgRouteTable"));

export { GetCoreDrgRouteTableRouteRulesArgs, GetCoreDrgRouteTableRouteRulesResult, GetCoreDrgRouteTableRouteRulesOutputArgs } from "./getCoreDrgRouteTableRouteRules";
export const getCoreDrgRouteTableRouteRules: typeof import("./getCoreDrgRouteTableRouteRules").getCoreDrgRouteTableRouteRules = null as any;
export const getCoreDrgRouteTableRouteRulesOutput: typeof import("./getCoreDrgRouteTableRouteRules").getCoreDrgRouteTableRouteRulesOutput = null as any;
utilities.lazyLoad(exports, ["getCoreDrgRouteTableRouteRules","getCoreDrgRouteTableRouteRulesOutput"], () => require("./getCoreDrgRouteTableRouteRules"));

export { GetCoreDrgRouteTablesArgs, GetCoreDrgRouteTablesResult, GetCoreDrgRouteTablesOutputArgs } from "./getCoreDrgRouteTables";
export const getCoreDrgRouteTables: typeof import("./getCoreDrgRouteTables").getCoreDrgRouteTables = null as any;
export const getCoreDrgRouteTablesOutput: typeof import("./getCoreDrgRouteTables").getCoreDrgRouteTablesOutput = null as any;
utilities.lazyLoad(exports, ["getCoreDrgRouteTables","getCoreDrgRouteTablesOutput"], () => require("./getCoreDrgRouteTables"));

export { GetCoreDrgsArgs, GetCoreDrgsResult, GetCoreDrgsOutputArgs } from "./getCoreDrgs";
export const getCoreDrgs: typeof import("./getCoreDrgs").getCoreDrgs = null as any;
export const getCoreDrgsOutput: typeof import("./getCoreDrgs").getCoreDrgsOutput = null as any;
utilities.lazyLoad(exports, ["getCoreDrgs","getCoreDrgsOutput"], () => require("./getCoreDrgs"));

export { GetCoreFastConnectProviderServiceArgs, GetCoreFastConnectProviderServiceResult, GetCoreFastConnectProviderServiceOutputArgs } from "./getCoreFastConnectProviderService";
export const getCoreFastConnectProviderService: typeof import("./getCoreFastConnectProviderService").getCoreFastConnectProviderService = null as any;
export const getCoreFastConnectProviderServiceOutput: typeof import("./getCoreFastConnectProviderService").getCoreFastConnectProviderServiceOutput = null as any;
utilities.lazyLoad(exports, ["getCoreFastConnectProviderService","getCoreFastConnectProviderServiceOutput"], () => require("./getCoreFastConnectProviderService"));

export { GetCoreFastConnectProviderServiceKeyArgs, GetCoreFastConnectProviderServiceKeyResult, GetCoreFastConnectProviderServiceKeyOutputArgs } from "./getCoreFastConnectProviderServiceKey";
export const getCoreFastConnectProviderServiceKey: typeof import("./getCoreFastConnectProviderServiceKey").getCoreFastConnectProviderServiceKey = null as any;
export const getCoreFastConnectProviderServiceKeyOutput: typeof import("./getCoreFastConnectProviderServiceKey").getCoreFastConnectProviderServiceKeyOutput = null as any;
utilities.lazyLoad(exports, ["getCoreFastConnectProviderServiceKey","getCoreFastConnectProviderServiceKeyOutput"], () => require("./getCoreFastConnectProviderServiceKey"));

export { GetCoreFastConnectProviderServicesArgs, GetCoreFastConnectProviderServicesResult, GetCoreFastConnectProviderServicesOutputArgs } from "./getCoreFastConnectProviderServices";
export const getCoreFastConnectProviderServices: typeof import("./getCoreFastConnectProviderServices").getCoreFastConnectProviderServices = null as any;
export const getCoreFastConnectProviderServicesOutput: typeof import("./getCoreFastConnectProviderServices").getCoreFastConnectProviderServicesOutput = null as any;
utilities.lazyLoad(exports, ["getCoreFastConnectProviderServices","getCoreFastConnectProviderServicesOutput"], () => require("./getCoreFastConnectProviderServices"));

export { GetCoreImageArgs, GetCoreImageResult, GetCoreImageOutputArgs } from "./getCoreImage";
export const getCoreImage: typeof import("./getCoreImage").getCoreImage = null as any;
export const getCoreImageOutput: typeof import("./getCoreImage").getCoreImageOutput = null as any;
utilities.lazyLoad(exports, ["getCoreImage","getCoreImageOutput"], () => require("./getCoreImage"));

export { GetCoreImageShapeArgs, GetCoreImageShapeResult, GetCoreImageShapeOutputArgs } from "./getCoreImageShape";
export const getCoreImageShape: typeof import("./getCoreImageShape").getCoreImageShape = null as any;
export const getCoreImageShapeOutput: typeof import("./getCoreImageShape").getCoreImageShapeOutput = null as any;
utilities.lazyLoad(exports, ["getCoreImageShape","getCoreImageShapeOutput"], () => require("./getCoreImageShape"));

export { GetCoreImageShapesArgs, GetCoreImageShapesResult, GetCoreImageShapesOutputArgs } from "./getCoreImageShapes";
export const getCoreImageShapes: typeof import("./getCoreImageShapes").getCoreImageShapes = null as any;
export const getCoreImageShapesOutput: typeof import("./getCoreImageShapes").getCoreImageShapesOutput = null as any;
utilities.lazyLoad(exports, ["getCoreImageShapes","getCoreImageShapesOutput"], () => require("./getCoreImageShapes"));

export { GetCoreImagesArgs, GetCoreImagesResult, GetCoreImagesOutputArgs } from "./getCoreImages";
export const getCoreImages: typeof import("./getCoreImages").getCoreImages = null as any;
export const getCoreImagesOutput: typeof import("./getCoreImages").getCoreImagesOutput = null as any;
utilities.lazyLoad(exports, ["getCoreImages","getCoreImagesOutput"], () => require("./getCoreImages"));

export { GetCoreInstanceArgs, GetCoreInstanceResult, GetCoreInstanceOutputArgs } from "./getCoreInstance";
export const getCoreInstance: typeof import("./getCoreInstance").getCoreInstance = null as any;
export const getCoreInstanceOutput: typeof import("./getCoreInstance").getCoreInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getCoreInstance","getCoreInstanceOutput"], () => require("./getCoreInstance"));

export { GetCoreInstanceConfigurationArgs, GetCoreInstanceConfigurationResult, GetCoreInstanceConfigurationOutputArgs } from "./getCoreInstanceConfiguration";
export const getCoreInstanceConfiguration: typeof import("./getCoreInstanceConfiguration").getCoreInstanceConfiguration = null as any;
export const getCoreInstanceConfigurationOutput: typeof import("./getCoreInstanceConfiguration").getCoreInstanceConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getCoreInstanceConfiguration","getCoreInstanceConfigurationOutput"], () => require("./getCoreInstanceConfiguration"));

export { GetCoreInstanceConfigurationsArgs, GetCoreInstanceConfigurationsResult, GetCoreInstanceConfigurationsOutputArgs } from "./getCoreInstanceConfigurations";
export const getCoreInstanceConfigurations: typeof import("./getCoreInstanceConfigurations").getCoreInstanceConfigurations = null as any;
export const getCoreInstanceConfigurationsOutput: typeof import("./getCoreInstanceConfigurations").getCoreInstanceConfigurationsOutput = null as any;
utilities.lazyLoad(exports, ["getCoreInstanceConfigurations","getCoreInstanceConfigurationsOutput"], () => require("./getCoreInstanceConfigurations"));

export { GetCoreInstanceConsoleConnectionsArgs, GetCoreInstanceConsoleConnectionsResult, GetCoreInstanceConsoleConnectionsOutputArgs } from "./getCoreInstanceConsoleConnections";
export const getCoreInstanceConsoleConnections: typeof import("./getCoreInstanceConsoleConnections").getCoreInstanceConsoleConnections = null as any;
export const getCoreInstanceConsoleConnectionsOutput: typeof import("./getCoreInstanceConsoleConnections").getCoreInstanceConsoleConnectionsOutput = null as any;
utilities.lazyLoad(exports, ["getCoreInstanceConsoleConnections","getCoreInstanceConsoleConnectionsOutput"], () => require("./getCoreInstanceConsoleConnections"));

export { GetCoreInstanceCredentialsArgs, GetCoreInstanceCredentialsResult, GetCoreInstanceCredentialsOutputArgs } from "./getCoreInstanceCredentials";
export const getCoreInstanceCredentials: typeof import("./getCoreInstanceCredentials").getCoreInstanceCredentials = null as any;
export const getCoreInstanceCredentialsOutput: typeof import("./getCoreInstanceCredentials").getCoreInstanceCredentialsOutput = null as any;
utilities.lazyLoad(exports, ["getCoreInstanceCredentials","getCoreInstanceCredentialsOutput"], () => require("./getCoreInstanceCredentials"));

export { GetCoreInstanceDevicesArgs, GetCoreInstanceDevicesResult, GetCoreInstanceDevicesOutputArgs } from "./getCoreInstanceDevices";
export const getCoreInstanceDevices: typeof import("./getCoreInstanceDevices").getCoreInstanceDevices = null as any;
export const getCoreInstanceDevicesOutput: typeof import("./getCoreInstanceDevices").getCoreInstanceDevicesOutput = null as any;
utilities.lazyLoad(exports, ["getCoreInstanceDevices","getCoreInstanceDevicesOutput"], () => require("./getCoreInstanceDevices"));

export { GetCoreInstanceMaintenanceEventArgs, GetCoreInstanceMaintenanceEventResult, GetCoreInstanceMaintenanceEventOutputArgs } from "./getCoreInstanceMaintenanceEvent";
export const getCoreInstanceMaintenanceEvent: typeof import("./getCoreInstanceMaintenanceEvent").getCoreInstanceMaintenanceEvent = null as any;
export const getCoreInstanceMaintenanceEventOutput: typeof import("./getCoreInstanceMaintenanceEvent").getCoreInstanceMaintenanceEventOutput = null as any;
utilities.lazyLoad(exports, ["getCoreInstanceMaintenanceEvent","getCoreInstanceMaintenanceEventOutput"], () => require("./getCoreInstanceMaintenanceEvent"));

export { GetCoreInstanceMaintenanceEventsArgs, GetCoreInstanceMaintenanceEventsResult, GetCoreInstanceMaintenanceEventsOutputArgs } from "./getCoreInstanceMaintenanceEvents";
export const getCoreInstanceMaintenanceEvents: typeof import("./getCoreInstanceMaintenanceEvents").getCoreInstanceMaintenanceEvents = null as any;
export const getCoreInstanceMaintenanceEventsOutput: typeof import("./getCoreInstanceMaintenanceEvents").getCoreInstanceMaintenanceEventsOutput = null as any;
utilities.lazyLoad(exports, ["getCoreInstanceMaintenanceEvents","getCoreInstanceMaintenanceEventsOutput"], () => require("./getCoreInstanceMaintenanceEvents"));

export { GetCoreInstanceMaintenanceRebootArgs, GetCoreInstanceMaintenanceRebootResult, GetCoreInstanceMaintenanceRebootOutputArgs } from "./getCoreInstanceMaintenanceReboot";
export const getCoreInstanceMaintenanceReboot: typeof import("./getCoreInstanceMaintenanceReboot").getCoreInstanceMaintenanceReboot = null as any;
export const getCoreInstanceMaintenanceRebootOutput: typeof import("./getCoreInstanceMaintenanceReboot").getCoreInstanceMaintenanceRebootOutput = null as any;
utilities.lazyLoad(exports, ["getCoreInstanceMaintenanceReboot","getCoreInstanceMaintenanceRebootOutput"], () => require("./getCoreInstanceMaintenanceReboot"));

export { GetCoreInstanceMeasuredBootReportArgs, GetCoreInstanceMeasuredBootReportResult, GetCoreInstanceMeasuredBootReportOutputArgs } from "./getCoreInstanceMeasuredBootReport";
export const getCoreInstanceMeasuredBootReport: typeof import("./getCoreInstanceMeasuredBootReport").getCoreInstanceMeasuredBootReport = null as any;
export const getCoreInstanceMeasuredBootReportOutput: typeof import("./getCoreInstanceMeasuredBootReport").getCoreInstanceMeasuredBootReportOutput = null as any;
utilities.lazyLoad(exports, ["getCoreInstanceMeasuredBootReport","getCoreInstanceMeasuredBootReportOutput"], () => require("./getCoreInstanceMeasuredBootReport"));

export { GetCoreInstancePoolArgs, GetCoreInstancePoolResult, GetCoreInstancePoolOutputArgs } from "./getCoreInstancePool";
export const getCoreInstancePool: typeof import("./getCoreInstancePool").getCoreInstancePool = null as any;
export const getCoreInstancePoolOutput: typeof import("./getCoreInstancePool").getCoreInstancePoolOutput = null as any;
utilities.lazyLoad(exports, ["getCoreInstancePool","getCoreInstancePoolOutput"], () => require("./getCoreInstancePool"));

export { GetCoreInstancePoolInstancesArgs, GetCoreInstancePoolInstancesResult, GetCoreInstancePoolInstancesOutputArgs } from "./getCoreInstancePoolInstances";
export const getCoreInstancePoolInstances: typeof import("./getCoreInstancePoolInstances").getCoreInstancePoolInstances = null as any;
export const getCoreInstancePoolInstancesOutput: typeof import("./getCoreInstancePoolInstances").getCoreInstancePoolInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getCoreInstancePoolInstances","getCoreInstancePoolInstancesOutput"], () => require("./getCoreInstancePoolInstances"));

export { GetCoreInstancePoolLoadBalancerAttachmentArgs, GetCoreInstancePoolLoadBalancerAttachmentResult, GetCoreInstancePoolLoadBalancerAttachmentOutputArgs } from "./getCoreInstancePoolLoadBalancerAttachment";
export const getCoreInstancePoolLoadBalancerAttachment: typeof import("./getCoreInstancePoolLoadBalancerAttachment").getCoreInstancePoolLoadBalancerAttachment = null as any;
export const getCoreInstancePoolLoadBalancerAttachmentOutput: typeof import("./getCoreInstancePoolLoadBalancerAttachment").getCoreInstancePoolLoadBalancerAttachmentOutput = null as any;
utilities.lazyLoad(exports, ["getCoreInstancePoolLoadBalancerAttachment","getCoreInstancePoolLoadBalancerAttachmentOutput"], () => require("./getCoreInstancePoolLoadBalancerAttachment"));

export { GetCoreInstancePoolsArgs, GetCoreInstancePoolsResult, GetCoreInstancePoolsOutputArgs } from "./getCoreInstancePools";
export const getCoreInstancePools: typeof import("./getCoreInstancePools").getCoreInstancePools = null as any;
export const getCoreInstancePoolsOutput: typeof import("./getCoreInstancePools").getCoreInstancePoolsOutput = null as any;
utilities.lazyLoad(exports, ["getCoreInstancePools","getCoreInstancePoolsOutput"], () => require("./getCoreInstancePools"));

export { GetCoreInstancesArgs, GetCoreInstancesResult, GetCoreInstancesOutputArgs } from "./getCoreInstances";
export const getCoreInstances: typeof import("./getCoreInstances").getCoreInstances = null as any;
export const getCoreInstancesOutput: typeof import("./getCoreInstances").getCoreInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getCoreInstances","getCoreInstancesOutput"], () => require("./getCoreInstances"));

export { GetCoreInternetGatewaysArgs, GetCoreInternetGatewaysResult, GetCoreInternetGatewaysOutputArgs } from "./getCoreInternetGateways";
export const getCoreInternetGateways: typeof import("./getCoreInternetGateways").getCoreInternetGateways = null as any;
export const getCoreInternetGatewaysOutput: typeof import("./getCoreInternetGateways").getCoreInternetGatewaysOutput = null as any;
utilities.lazyLoad(exports, ["getCoreInternetGateways","getCoreInternetGatewaysOutput"], () => require("./getCoreInternetGateways"));

export { GetCoreIpInventorySubnetArgs, GetCoreIpInventorySubnetResult, GetCoreIpInventorySubnetOutputArgs } from "./getCoreIpInventorySubnet";
export const getCoreIpInventorySubnet: typeof import("./getCoreIpInventorySubnet").getCoreIpInventorySubnet = null as any;
export const getCoreIpInventorySubnetOutput: typeof import("./getCoreIpInventorySubnet").getCoreIpInventorySubnetOutput = null as any;
utilities.lazyLoad(exports, ["getCoreIpInventorySubnet","getCoreIpInventorySubnetOutput"], () => require("./getCoreIpInventorySubnet"));

export { GetCoreIpInventorySubnetCidrArgs, GetCoreIpInventorySubnetCidrResult, GetCoreIpInventorySubnetCidrOutputArgs } from "./getCoreIpInventorySubnetCidr";
export const getCoreIpInventorySubnetCidr: typeof import("./getCoreIpInventorySubnetCidr").getCoreIpInventorySubnetCidr = null as any;
export const getCoreIpInventorySubnetCidrOutput: typeof import("./getCoreIpInventorySubnetCidr").getCoreIpInventorySubnetCidrOutput = null as any;
utilities.lazyLoad(exports, ["getCoreIpInventorySubnetCidr","getCoreIpInventorySubnetCidrOutput"], () => require("./getCoreIpInventorySubnetCidr"));

export { GetCoreIpInventoryVcnOverlapsArgs, GetCoreIpInventoryVcnOverlapsResult, GetCoreIpInventoryVcnOverlapsOutputArgs } from "./getCoreIpInventoryVcnOverlaps";
export const getCoreIpInventoryVcnOverlaps: typeof import("./getCoreIpInventoryVcnOverlaps").getCoreIpInventoryVcnOverlaps = null as any;
export const getCoreIpInventoryVcnOverlapsOutput: typeof import("./getCoreIpInventoryVcnOverlaps").getCoreIpInventoryVcnOverlapsOutput = null as any;
utilities.lazyLoad(exports, ["getCoreIpInventoryVcnOverlaps","getCoreIpInventoryVcnOverlapsOutput"], () => require("./getCoreIpInventoryVcnOverlaps"));

export { GetCoreIpsecAlgorithmArgs, GetCoreIpsecAlgorithmResult, GetCoreIpsecAlgorithmOutputArgs } from "./getCoreIpsecAlgorithm";
export const getCoreIpsecAlgorithm: typeof import("./getCoreIpsecAlgorithm").getCoreIpsecAlgorithm = null as any;
export const getCoreIpsecAlgorithmOutput: typeof import("./getCoreIpsecAlgorithm").getCoreIpsecAlgorithmOutput = null as any;
utilities.lazyLoad(exports, ["getCoreIpsecAlgorithm","getCoreIpsecAlgorithmOutput"], () => require("./getCoreIpsecAlgorithm"));

export { GetCoreIpsecConfigArgs, GetCoreIpsecConfigResult, GetCoreIpsecConfigOutputArgs } from "./getCoreIpsecConfig";
export const getCoreIpsecConfig: typeof import("./getCoreIpsecConfig").getCoreIpsecConfig = null as any;
export const getCoreIpsecConfigOutput: typeof import("./getCoreIpsecConfig").getCoreIpsecConfigOutput = null as any;
utilities.lazyLoad(exports, ["getCoreIpsecConfig","getCoreIpsecConfigOutput"], () => require("./getCoreIpsecConfig"));

export { GetCoreIpsecConnectionTunnelArgs, GetCoreIpsecConnectionTunnelResult, GetCoreIpsecConnectionTunnelOutputArgs } from "./getCoreIpsecConnectionTunnel";
export const getCoreIpsecConnectionTunnel: typeof import("./getCoreIpsecConnectionTunnel").getCoreIpsecConnectionTunnel = null as any;
export const getCoreIpsecConnectionTunnelOutput: typeof import("./getCoreIpsecConnectionTunnel").getCoreIpsecConnectionTunnelOutput = null as any;
utilities.lazyLoad(exports, ["getCoreIpsecConnectionTunnel","getCoreIpsecConnectionTunnelOutput"], () => require("./getCoreIpsecConnectionTunnel"));

export { GetCoreIpsecConnectionTunnelErrorArgs, GetCoreIpsecConnectionTunnelErrorResult, GetCoreIpsecConnectionTunnelErrorOutputArgs } from "./getCoreIpsecConnectionTunnelError";
export const getCoreIpsecConnectionTunnelError: typeof import("./getCoreIpsecConnectionTunnelError").getCoreIpsecConnectionTunnelError = null as any;
export const getCoreIpsecConnectionTunnelErrorOutput: typeof import("./getCoreIpsecConnectionTunnelError").getCoreIpsecConnectionTunnelErrorOutput = null as any;
utilities.lazyLoad(exports, ["getCoreIpsecConnectionTunnelError","getCoreIpsecConnectionTunnelErrorOutput"], () => require("./getCoreIpsecConnectionTunnelError"));

export { GetCoreIpsecConnectionTunnelRoutesArgs, GetCoreIpsecConnectionTunnelRoutesResult, GetCoreIpsecConnectionTunnelRoutesOutputArgs } from "./getCoreIpsecConnectionTunnelRoutes";
export const getCoreIpsecConnectionTunnelRoutes: typeof import("./getCoreIpsecConnectionTunnelRoutes").getCoreIpsecConnectionTunnelRoutes = null as any;
export const getCoreIpsecConnectionTunnelRoutesOutput: typeof import("./getCoreIpsecConnectionTunnelRoutes").getCoreIpsecConnectionTunnelRoutesOutput = null as any;
utilities.lazyLoad(exports, ["getCoreIpsecConnectionTunnelRoutes","getCoreIpsecConnectionTunnelRoutesOutput"], () => require("./getCoreIpsecConnectionTunnelRoutes"));

export { GetCoreIpsecConnectionTunnelsArgs, GetCoreIpsecConnectionTunnelsResult, GetCoreIpsecConnectionTunnelsOutputArgs } from "./getCoreIpsecConnectionTunnels";
export const getCoreIpsecConnectionTunnels: typeof import("./getCoreIpsecConnectionTunnels").getCoreIpsecConnectionTunnels = null as any;
export const getCoreIpsecConnectionTunnelsOutput: typeof import("./getCoreIpsecConnectionTunnels").getCoreIpsecConnectionTunnelsOutput = null as any;
utilities.lazyLoad(exports, ["getCoreIpsecConnectionTunnels","getCoreIpsecConnectionTunnelsOutput"], () => require("./getCoreIpsecConnectionTunnels"));

export { GetCoreIpsecConnectionsArgs, GetCoreIpsecConnectionsResult, GetCoreIpsecConnectionsOutputArgs } from "./getCoreIpsecConnections";
export const getCoreIpsecConnections: typeof import("./getCoreIpsecConnections").getCoreIpsecConnections = null as any;
export const getCoreIpsecConnectionsOutput: typeof import("./getCoreIpsecConnections").getCoreIpsecConnectionsOutput = null as any;
utilities.lazyLoad(exports, ["getCoreIpsecConnections","getCoreIpsecConnectionsOutput"], () => require("./getCoreIpsecConnections"));

export { GetCoreIpsecStatusArgs, GetCoreIpsecStatusResult, GetCoreIpsecStatusOutputArgs } from "./getCoreIpsecStatus";
export const getCoreIpsecStatus: typeof import("./getCoreIpsecStatus").getCoreIpsecStatus = null as any;
export const getCoreIpsecStatusOutput: typeof import("./getCoreIpsecStatus").getCoreIpsecStatusOutput = null as any;
utilities.lazyLoad(exports, ["getCoreIpsecStatus","getCoreIpsecStatusOutput"], () => require("./getCoreIpsecStatus"));

export { GetCoreIpv6Args, GetCoreIpv6Result, GetCoreIpv6OutputArgs } from "./getCoreIpv6";
export const getCoreIpv6: typeof import("./getCoreIpv6").getCoreIpv6 = null as any;
export const getCoreIpv6Output: typeof import("./getCoreIpv6").getCoreIpv6Output = null as any;
utilities.lazyLoad(exports, ["getCoreIpv6","getCoreIpv6Output"], () => require("./getCoreIpv6"));

export { GetCoreIpv6sArgs, GetCoreIpv6sResult, GetCoreIpv6sOutputArgs } from "./getCoreIpv6s";
export const getCoreIpv6s: typeof import("./getCoreIpv6s").getCoreIpv6s = null as any;
export const getCoreIpv6sOutput: typeof import("./getCoreIpv6s").getCoreIpv6sOutput = null as any;
utilities.lazyLoad(exports, ["getCoreIpv6s","getCoreIpv6sOutput"], () => require("./getCoreIpv6s"));

export { GetCoreLetterOfAuthorityArgs, GetCoreLetterOfAuthorityResult, GetCoreLetterOfAuthorityOutputArgs } from "./getCoreLetterOfAuthority";
export const getCoreLetterOfAuthority: typeof import("./getCoreLetterOfAuthority").getCoreLetterOfAuthority = null as any;
export const getCoreLetterOfAuthorityOutput: typeof import("./getCoreLetterOfAuthority").getCoreLetterOfAuthorityOutput = null as any;
utilities.lazyLoad(exports, ["getCoreLetterOfAuthority","getCoreLetterOfAuthorityOutput"], () => require("./getCoreLetterOfAuthority"));

export { GetCoreListingResourceVersionArgs, GetCoreListingResourceVersionResult, GetCoreListingResourceVersionOutputArgs } from "./getCoreListingResourceVersion";
export const getCoreListingResourceVersion: typeof import("./getCoreListingResourceVersion").getCoreListingResourceVersion = null as any;
export const getCoreListingResourceVersionOutput: typeof import("./getCoreListingResourceVersion").getCoreListingResourceVersionOutput = null as any;
utilities.lazyLoad(exports, ["getCoreListingResourceVersion","getCoreListingResourceVersionOutput"], () => require("./getCoreListingResourceVersion"));

export { GetCoreListingResourceVersionsArgs, GetCoreListingResourceVersionsResult, GetCoreListingResourceVersionsOutputArgs } from "./getCoreListingResourceVersions";
export const getCoreListingResourceVersions: typeof import("./getCoreListingResourceVersions").getCoreListingResourceVersions = null as any;
export const getCoreListingResourceVersionsOutput: typeof import("./getCoreListingResourceVersions").getCoreListingResourceVersionsOutput = null as any;
utilities.lazyLoad(exports, ["getCoreListingResourceVersions","getCoreListingResourceVersionsOutput"], () => require("./getCoreListingResourceVersions"));

export { GetCoreLocalPeeringGatewaysArgs, GetCoreLocalPeeringGatewaysResult, GetCoreLocalPeeringGatewaysOutputArgs } from "./getCoreLocalPeeringGateways";
export const getCoreLocalPeeringGateways: typeof import("./getCoreLocalPeeringGateways").getCoreLocalPeeringGateways = null as any;
export const getCoreLocalPeeringGatewaysOutput: typeof import("./getCoreLocalPeeringGateways").getCoreLocalPeeringGatewaysOutput = null as any;
utilities.lazyLoad(exports, ["getCoreLocalPeeringGateways","getCoreLocalPeeringGatewaysOutput"], () => require("./getCoreLocalPeeringGateways"));

export { GetCoreNatGatewayArgs, GetCoreNatGatewayResult, GetCoreNatGatewayOutputArgs } from "./getCoreNatGateway";
export const getCoreNatGateway: typeof import("./getCoreNatGateway").getCoreNatGateway = null as any;
export const getCoreNatGatewayOutput: typeof import("./getCoreNatGateway").getCoreNatGatewayOutput = null as any;
utilities.lazyLoad(exports, ["getCoreNatGateway","getCoreNatGatewayOutput"], () => require("./getCoreNatGateway"));

export { GetCoreNatGatewaysArgs, GetCoreNatGatewaysResult, GetCoreNatGatewaysOutputArgs } from "./getCoreNatGateways";
export const getCoreNatGateways: typeof import("./getCoreNatGateways").getCoreNatGateways = null as any;
export const getCoreNatGatewaysOutput: typeof import("./getCoreNatGateways").getCoreNatGatewaysOutput = null as any;
utilities.lazyLoad(exports, ["getCoreNatGateways","getCoreNatGatewaysOutput"], () => require("./getCoreNatGateways"));

export { GetCoreNetworkSecurityGroupArgs, GetCoreNetworkSecurityGroupResult, GetCoreNetworkSecurityGroupOutputArgs } from "./getCoreNetworkSecurityGroup";
export const getCoreNetworkSecurityGroup: typeof import("./getCoreNetworkSecurityGroup").getCoreNetworkSecurityGroup = null as any;
export const getCoreNetworkSecurityGroupOutput: typeof import("./getCoreNetworkSecurityGroup").getCoreNetworkSecurityGroupOutput = null as any;
utilities.lazyLoad(exports, ["getCoreNetworkSecurityGroup","getCoreNetworkSecurityGroupOutput"], () => require("./getCoreNetworkSecurityGroup"));

export { GetCoreNetworkSecurityGroupSecurityRulesArgs, GetCoreNetworkSecurityGroupSecurityRulesResult, GetCoreNetworkSecurityGroupSecurityRulesOutputArgs } from "./getCoreNetworkSecurityGroupSecurityRules";
export const getCoreNetworkSecurityGroupSecurityRules: typeof import("./getCoreNetworkSecurityGroupSecurityRules").getCoreNetworkSecurityGroupSecurityRules = null as any;
export const getCoreNetworkSecurityGroupSecurityRulesOutput: typeof import("./getCoreNetworkSecurityGroupSecurityRules").getCoreNetworkSecurityGroupSecurityRulesOutput = null as any;
utilities.lazyLoad(exports, ["getCoreNetworkSecurityGroupSecurityRules","getCoreNetworkSecurityGroupSecurityRulesOutput"], () => require("./getCoreNetworkSecurityGroupSecurityRules"));

export { GetCoreNetworkSecurityGroupVnicsArgs, GetCoreNetworkSecurityGroupVnicsResult, GetCoreNetworkSecurityGroupVnicsOutputArgs } from "./getCoreNetworkSecurityGroupVnics";
export const getCoreNetworkSecurityGroupVnics: typeof import("./getCoreNetworkSecurityGroupVnics").getCoreNetworkSecurityGroupVnics = null as any;
export const getCoreNetworkSecurityGroupVnicsOutput: typeof import("./getCoreNetworkSecurityGroupVnics").getCoreNetworkSecurityGroupVnicsOutput = null as any;
utilities.lazyLoad(exports, ["getCoreNetworkSecurityGroupVnics","getCoreNetworkSecurityGroupVnicsOutput"], () => require("./getCoreNetworkSecurityGroupVnics"));

export { GetCoreNetworkSecurityGroupsArgs, GetCoreNetworkSecurityGroupsResult, GetCoreNetworkSecurityGroupsOutputArgs } from "./getCoreNetworkSecurityGroups";
export const getCoreNetworkSecurityGroups: typeof import("./getCoreNetworkSecurityGroups").getCoreNetworkSecurityGroups = null as any;
export const getCoreNetworkSecurityGroupsOutput: typeof import("./getCoreNetworkSecurityGroups").getCoreNetworkSecurityGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getCoreNetworkSecurityGroups","getCoreNetworkSecurityGroupsOutput"], () => require("./getCoreNetworkSecurityGroups"));

export { GetCorePeerRegionForRemotePeeringsArgs, GetCorePeerRegionForRemotePeeringsResult, GetCorePeerRegionForRemotePeeringsOutputArgs } from "./getCorePeerRegionForRemotePeerings";
export const getCorePeerRegionForRemotePeerings: typeof import("./getCorePeerRegionForRemotePeerings").getCorePeerRegionForRemotePeerings = null as any;
export const getCorePeerRegionForRemotePeeringsOutput: typeof import("./getCorePeerRegionForRemotePeerings").getCorePeerRegionForRemotePeeringsOutput = null as any;
utilities.lazyLoad(exports, ["getCorePeerRegionForRemotePeerings","getCorePeerRegionForRemotePeeringsOutput"], () => require("./getCorePeerRegionForRemotePeerings"));

export { GetCorePrivateIpArgs, GetCorePrivateIpResult, GetCorePrivateIpOutputArgs } from "./getCorePrivateIp";
export const getCorePrivateIp: typeof import("./getCorePrivateIp").getCorePrivateIp = null as any;
export const getCorePrivateIpOutput: typeof import("./getCorePrivateIp").getCorePrivateIpOutput = null as any;
utilities.lazyLoad(exports, ["getCorePrivateIp","getCorePrivateIpOutput"], () => require("./getCorePrivateIp"));

export { GetCorePrivateIpsArgs, GetCorePrivateIpsResult, GetCorePrivateIpsOutputArgs } from "./getCorePrivateIps";
export const getCorePrivateIps: typeof import("./getCorePrivateIps").getCorePrivateIps = null as any;
export const getCorePrivateIpsOutput: typeof import("./getCorePrivateIps").getCorePrivateIpsOutput = null as any;
utilities.lazyLoad(exports, ["getCorePrivateIps","getCorePrivateIpsOutput"], () => require("./getCorePrivateIps"));

export { GetCorePublicIpArgs, GetCorePublicIpResult, GetCorePublicIpOutputArgs } from "./getCorePublicIp";
export const getCorePublicIp: typeof import("./getCorePublicIp").getCorePublicIp = null as any;
export const getCorePublicIpOutput: typeof import("./getCorePublicIp").getCorePublicIpOutput = null as any;
utilities.lazyLoad(exports, ["getCorePublicIp","getCorePublicIpOutput"], () => require("./getCorePublicIp"));

export { GetCorePublicIpPoolArgs, GetCorePublicIpPoolResult, GetCorePublicIpPoolOutputArgs } from "./getCorePublicIpPool";
export const getCorePublicIpPool: typeof import("./getCorePublicIpPool").getCorePublicIpPool = null as any;
export const getCorePublicIpPoolOutput: typeof import("./getCorePublicIpPool").getCorePublicIpPoolOutput = null as any;
utilities.lazyLoad(exports, ["getCorePublicIpPool","getCorePublicIpPoolOutput"], () => require("./getCorePublicIpPool"));

export { GetCorePublicIpPoolsArgs, GetCorePublicIpPoolsResult, GetCorePublicIpPoolsOutputArgs } from "./getCorePublicIpPools";
export const getCorePublicIpPools: typeof import("./getCorePublicIpPools").getCorePublicIpPools = null as any;
export const getCorePublicIpPoolsOutput: typeof import("./getCorePublicIpPools").getCorePublicIpPoolsOutput = null as any;
utilities.lazyLoad(exports, ["getCorePublicIpPools","getCorePublicIpPoolsOutput"], () => require("./getCorePublicIpPools"));

export { GetCorePublicIpsArgs, GetCorePublicIpsResult, GetCorePublicIpsOutputArgs } from "./getCorePublicIps";
export const getCorePublicIps: typeof import("./getCorePublicIps").getCorePublicIps = null as any;
export const getCorePublicIpsOutput: typeof import("./getCorePublicIps").getCorePublicIpsOutput = null as any;
utilities.lazyLoad(exports, ["getCorePublicIps","getCorePublicIpsOutput"], () => require("./getCorePublicIps"));

export { GetCoreRemotePeeringConnectionsArgs, GetCoreRemotePeeringConnectionsResult, GetCoreRemotePeeringConnectionsOutputArgs } from "./getCoreRemotePeeringConnections";
export const getCoreRemotePeeringConnections: typeof import("./getCoreRemotePeeringConnections").getCoreRemotePeeringConnections = null as any;
export const getCoreRemotePeeringConnectionsOutput: typeof import("./getCoreRemotePeeringConnections").getCoreRemotePeeringConnectionsOutput = null as any;
utilities.lazyLoad(exports, ["getCoreRemotePeeringConnections","getCoreRemotePeeringConnectionsOutput"], () => require("./getCoreRemotePeeringConnections"));

export { GetCoreRouteTablesArgs, GetCoreRouteTablesResult, GetCoreRouteTablesOutputArgs } from "./getCoreRouteTables";
export const getCoreRouteTables: typeof import("./getCoreRouteTables").getCoreRouteTables = null as any;
export const getCoreRouteTablesOutput: typeof import("./getCoreRouteTables").getCoreRouteTablesOutput = null as any;
utilities.lazyLoad(exports, ["getCoreRouteTables","getCoreRouteTablesOutput"], () => require("./getCoreRouteTables"));

export { GetCoreSecurityListsArgs, GetCoreSecurityListsResult, GetCoreSecurityListsOutputArgs } from "./getCoreSecurityLists";
export const getCoreSecurityLists: typeof import("./getCoreSecurityLists").getCoreSecurityLists = null as any;
export const getCoreSecurityListsOutput: typeof import("./getCoreSecurityLists").getCoreSecurityListsOutput = null as any;
utilities.lazyLoad(exports, ["getCoreSecurityLists","getCoreSecurityListsOutput"], () => require("./getCoreSecurityLists"));

export { GetCoreServiceGatewaysArgs, GetCoreServiceGatewaysResult, GetCoreServiceGatewaysOutputArgs } from "./getCoreServiceGateways";
export const getCoreServiceGateways: typeof import("./getCoreServiceGateways").getCoreServiceGateways = null as any;
export const getCoreServiceGatewaysOutput: typeof import("./getCoreServiceGateways").getCoreServiceGatewaysOutput = null as any;
utilities.lazyLoad(exports, ["getCoreServiceGateways","getCoreServiceGatewaysOutput"], () => require("./getCoreServiceGateways"));

export { GetCoreServicesArgs, GetCoreServicesResult, GetCoreServicesOutputArgs } from "./getCoreServices";
export const getCoreServices: typeof import("./getCoreServices").getCoreServices = null as any;
export const getCoreServicesOutput: typeof import("./getCoreServices").getCoreServicesOutput = null as any;
utilities.lazyLoad(exports, ["getCoreServices","getCoreServicesOutput"], () => require("./getCoreServices"));

export { GetCoreShapeArgs, GetCoreShapeResult, GetCoreShapeOutputArgs } from "./getCoreShape";
export const getCoreShape: typeof import("./getCoreShape").getCoreShape = null as any;
export const getCoreShapeOutput: typeof import("./getCoreShape").getCoreShapeOutput = null as any;
utilities.lazyLoad(exports, ["getCoreShape","getCoreShapeOutput"], () => require("./getCoreShape"));

export { GetCoreShapesArgs, GetCoreShapesResult, GetCoreShapesOutputArgs } from "./getCoreShapes";
export const getCoreShapes: typeof import("./getCoreShapes").getCoreShapes = null as any;
export const getCoreShapesOutput: typeof import("./getCoreShapes").getCoreShapesOutput = null as any;
utilities.lazyLoad(exports, ["getCoreShapes","getCoreShapesOutput"], () => require("./getCoreShapes"));

export { GetCoreSubnetArgs, GetCoreSubnetResult, GetCoreSubnetOutputArgs } from "./getCoreSubnet";
export const getCoreSubnet: typeof import("./getCoreSubnet").getCoreSubnet = null as any;
export const getCoreSubnetOutput: typeof import("./getCoreSubnet").getCoreSubnetOutput = null as any;
utilities.lazyLoad(exports, ["getCoreSubnet","getCoreSubnetOutput"], () => require("./getCoreSubnet"));

export { GetCoreSubnetsArgs, GetCoreSubnetsResult, GetCoreSubnetsOutputArgs } from "./getCoreSubnets";
export const getCoreSubnets: typeof import("./getCoreSubnets").getCoreSubnets = null as any;
export const getCoreSubnetsOutput: typeof import("./getCoreSubnets").getCoreSubnetsOutput = null as any;
utilities.lazyLoad(exports, ["getCoreSubnets","getCoreSubnetsOutput"], () => require("./getCoreSubnets"));

export { GetCoreTunnelSecurityAssociationsArgs, GetCoreTunnelSecurityAssociationsResult, GetCoreTunnelSecurityAssociationsOutputArgs } from "./getCoreTunnelSecurityAssociations";
export const getCoreTunnelSecurityAssociations: typeof import("./getCoreTunnelSecurityAssociations").getCoreTunnelSecurityAssociations = null as any;
export const getCoreTunnelSecurityAssociationsOutput: typeof import("./getCoreTunnelSecurityAssociations").getCoreTunnelSecurityAssociationsOutput = null as any;
utilities.lazyLoad(exports, ["getCoreTunnelSecurityAssociations","getCoreTunnelSecurityAssociationsOutput"], () => require("./getCoreTunnelSecurityAssociations"));

export { GetCoreVcnArgs, GetCoreVcnResult, GetCoreVcnOutputArgs } from "./getCoreVcn";
export const getCoreVcn: typeof import("./getCoreVcn").getCoreVcn = null as any;
export const getCoreVcnOutput: typeof import("./getCoreVcn").getCoreVcnOutput = null as any;
utilities.lazyLoad(exports, ["getCoreVcn","getCoreVcnOutput"], () => require("./getCoreVcn"));

export { GetCoreVcnDnsResolverAssociationArgs, GetCoreVcnDnsResolverAssociationResult, GetCoreVcnDnsResolverAssociationOutputArgs } from "./getCoreVcnDnsResolverAssociation";
export const getCoreVcnDnsResolverAssociation: typeof import("./getCoreVcnDnsResolverAssociation").getCoreVcnDnsResolverAssociation = null as any;
export const getCoreVcnDnsResolverAssociationOutput: typeof import("./getCoreVcnDnsResolverAssociation").getCoreVcnDnsResolverAssociationOutput = null as any;
utilities.lazyLoad(exports, ["getCoreVcnDnsResolverAssociation","getCoreVcnDnsResolverAssociationOutput"], () => require("./getCoreVcnDnsResolverAssociation"));

export { GetCoreVcnsArgs, GetCoreVcnsResult, GetCoreVcnsOutputArgs } from "./getCoreVcns";
export const getCoreVcns: typeof import("./getCoreVcns").getCoreVcns = null as any;
export const getCoreVcnsOutput: typeof import("./getCoreVcns").getCoreVcnsOutput = null as any;
utilities.lazyLoad(exports, ["getCoreVcns","getCoreVcnsOutput"], () => require("./getCoreVcns"));

export { GetCoreVirtualCircuitArgs, GetCoreVirtualCircuitResult, GetCoreVirtualCircuitOutputArgs } from "./getCoreVirtualCircuit";
export const getCoreVirtualCircuit: typeof import("./getCoreVirtualCircuit").getCoreVirtualCircuit = null as any;
export const getCoreVirtualCircuitOutput: typeof import("./getCoreVirtualCircuit").getCoreVirtualCircuitOutput = null as any;
utilities.lazyLoad(exports, ["getCoreVirtualCircuit","getCoreVirtualCircuitOutput"], () => require("./getCoreVirtualCircuit"));

export { GetCoreVirtualCircuitAssociatedTunnelsArgs, GetCoreVirtualCircuitAssociatedTunnelsResult, GetCoreVirtualCircuitAssociatedTunnelsOutputArgs } from "./getCoreVirtualCircuitAssociatedTunnels";
export const getCoreVirtualCircuitAssociatedTunnels: typeof import("./getCoreVirtualCircuitAssociatedTunnels").getCoreVirtualCircuitAssociatedTunnels = null as any;
export const getCoreVirtualCircuitAssociatedTunnelsOutput: typeof import("./getCoreVirtualCircuitAssociatedTunnels").getCoreVirtualCircuitAssociatedTunnelsOutput = null as any;
utilities.lazyLoad(exports, ["getCoreVirtualCircuitAssociatedTunnels","getCoreVirtualCircuitAssociatedTunnelsOutput"], () => require("./getCoreVirtualCircuitAssociatedTunnels"));

export { GetCoreVirtualCircuitBandwidthShapesArgs, GetCoreVirtualCircuitBandwidthShapesResult, GetCoreVirtualCircuitBandwidthShapesOutputArgs } from "./getCoreVirtualCircuitBandwidthShapes";
export const getCoreVirtualCircuitBandwidthShapes: typeof import("./getCoreVirtualCircuitBandwidthShapes").getCoreVirtualCircuitBandwidthShapes = null as any;
export const getCoreVirtualCircuitBandwidthShapesOutput: typeof import("./getCoreVirtualCircuitBandwidthShapes").getCoreVirtualCircuitBandwidthShapesOutput = null as any;
utilities.lazyLoad(exports, ["getCoreVirtualCircuitBandwidthShapes","getCoreVirtualCircuitBandwidthShapesOutput"], () => require("./getCoreVirtualCircuitBandwidthShapes"));

export { GetCoreVirtualCircuitPublicPrefixesArgs, GetCoreVirtualCircuitPublicPrefixesResult, GetCoreVirtualCircuitPublicPrefixesOutputArgs } from "./getCoreVirtualCircuitPublicPrefixes";
export const getCoreVirtualCircuitPublicPrefixes: typeof import("./getCoreVirtualCircuitPublicPrefixes").getCoreVirtualCircuitPublicPrefixes = null as any;
export const getCoreVirtualCircuitPublicPrefixesOutput: typeof import("./getCoreVirtualCircuitPublicPrefixes").getCoreVirtualCircuitPublicPrefixesOutput = null as any;
utilities.lazyLoad(exports, ["getCoreVirtualCircuitPublicPrefixes","getCoreVirtualCircuitPublicPrefixesOutput"], () => require("./getCoreVirtualCircuitPublicPrefixes"));

export { GetCoreVirtualCircuitsArgs, GetCoreVirtualCircuitsResult, GetCoreVirtualCircuitsOutputArgs } from "./getCoreVirtualCircuits";
export const getCoreVirtualCircuits: typeof import("./getCoreVirtualCircuits").getCoreVirtualCircuits = null as any;
export const getCoreVirtualCircuitsOutput: typeof import("./getCoreVirtualCircuits").getCoreVirtualCircuitsOutput = null as any;
utilities.lazyLoad(exports, ["getCoreVirtualCircuits","getCoreVirtualCircuitsOutput"], () => require("./getCoreVirtualCircuits"));

export { GetCoreVirtualNetworksArgs, GetCoreVirtualNetworksResult, GetCoreVirtualNetworksOutputArgs } from "./getCoreVirtualNetworks";
export const getCoreVirtualNetworks: typeof import("./getCoreVirtualNetworks").getCoreVirtualNetworks = null as any;
export const getCoreVirtualNetworksOutput: typeof import("./getCoreVirtualNetworks").getCoreVirtualNetworksOutput = null as any;
utilities.lazyLoad(exports, ["getCoreVirtualNetworks","getCoreVirtualNetworksOutput"], () => require("./getCoreVirtualNetworks"));

export { GetCoreVlanArgs, GetCoreVlanResult, GetCoreVlanOutputArgs } from "./getCoreVlan";
export const getCoreVlan: typeof import("./getCoreVlan").getCoreVlan = null as any;
export const getCoreVlanOutput: typeof import("./getCoreVlan").getCoreVlanOutput = null as any;
utilities.lazyLoad(exports, ["getCoreVlan","getCoreVlanOutput"], () => require("./getCoreVlan"));

export { GetCoreVlansArgs, GetCoreVlansResult, GetCoreVlansOutputArgs } from "./getCoreVlans";
export const getCoreVlans: typeof import("./getCoreVlans").getCoreVlans = null as any;
export const getCoreVlansOutput: typeof import("./getCoreVlans").getCoreVlansOutput = null as any;
utilities.lazyLoad(exports, ["getCoreVlans","getCoreVlansOutput"], () => require("./getCoreVlans"));

export { GetCoreVnicArgs, GetCoreVnicResult, GetCoreVnicOutputArgs } from "./getCoreVnic";
export const getCoreVnic: typeof import("./getCoreVnic").getCoreVnic = null as any;
export const getCoreVnicOutput: typeof import("./getCoreVnic").getCoreVnicOutput = null as any;
utilities.lazyLoad(exports, ["getCoreVnic","getCoreVnicOutput"], () => require("./getCoreVnic"));

export { GetCoreVnicAttachmentsArgs, GetCoreVnicAttachmentsResult, GetCoreVnicAttachmentsOutputArgs } from "./getCoreVnicAttachments";
export const getCoreVnicAttachments: typeof import("./getCoreVnicAttachments").getCoreVnicAttachments = null as any;
export const getCoreVnicAttachmentsOutput: typeof import("./getCoreVnicAttachments").getCoreVnicAttachmentsOutput = null as any;
utilities.lazyLoad(exports, ["getCoreVnicAttachments","getCoreVnicAttachmentsOutput"], () => require("./getCoreVnicAttachments"));

export { GetCoreVolumeArgs, GetCoreVolumeResult, GetCoreVolumeOutputArgs } from "./getCoreVolume";
export const getCoreVolume: typeof import("./getCoreVolume").getCoreVolume = null as any;
export const getCoreVolumeOutput: typeof import("./getCoreVolume").getCoreVolumeOutput = null as any;
utilities.lazyLoad(exports, ["getCoreVolume","getCoreVolumeOutput"], () => require("./getCoreVolume"));

export { GetCoreVolumeAttachmentsArgs, GetCoreVolumeAttachmentsResult, GetCoreVolumeAttachmentsOutputArgs } from "./getCoreVolumeAttachments";
export const getCoreVolumeAttachments: typeof import("./getCoreVolumeAttachments").getCoreVolumeAttachments = null as any;
export const getCoreVolumeAttachmentsOutput: typeof import("./getCoreVolumeAttachments").getCoreVolumeAttachmentsOutput = null as any;
utilities.lazyLoad(exports, ["getCoreVolumeAttachments","getCoreVolumeAttachmentsOutput"], () => require("./getCoreVolumeAttachments"));

export { GetCoreVolumeBackupPoliciesArgs, GetCoreVolumeBackupPoliciesResult, GetCoreVolumeBackupPoliciesOutputArgs } from "./getCoreVolumeBackupPolicies";
export const getCoreVolumeBackupPolicies: typeof import("./getCoreVolumeBackupPolicies").getCoreVolumeBackupPolicies = null as any;
export const getCoreVolumeBackupPoliciesOutput: typeof import("./getCoreVolumeBackupPolicies").getCoreVolumeBackupPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getCoreVolumeBackupPolicies","getCoreVolumeBackupPoliciesOutput"], () => require("./getCoreVolumeBackupPolicies"));

export { GetCoreVolumeBackupPolicyAssignmentsArgs, GetCoreVolumeBackupPolicyAssignmentsResult, GetCoreVolumeBackupPolicyAssignmentsOutputArgs } from "./getCoreVolumeBackupPolicyAssignments";
export const getCoreVolumeBackupPolicyAssignments: typeof import("./getCoreVolumeBackupPolicyAssignments").getCoreVolumeBackupPolicyAssignments = null as any;
export const getCoreVolumeBackupPolicyAssignmentsOutput: typeof import("./getCoreVolumeBackupPolicyAssignments").getCoreVolumeBackupPolicyAssignmentsOutput = null as any;
utilities.lazyLoad(exports, ["getCoreVolumeBackupPolicyAssignments","getCoreVolumeBackupPolicyAssignmentsOutput"], () => require("./getCoreVolumeBackupPolicyAssignments"));

export { GetCoreVolumeBackupsArgs, GetCoreVolumeBackupsResult, GetCoreVolumeBackupsOutputArgs } from "./getCoreVolumeBackups";
export const getCoreVolumeBackups: typeof import("./getCoreVolumeBackups").getCoreVolumeBackups = null as any;
export const getCoreVolumeBackupsOutput: typeof import("./getCoreVolumeBackups").getCoreVolumeBackupsOutput = null as any;
utilities.lazyLoad(exports, ["getCoreVolumeBackups","getCoreVolumeBackupsOutput"], () => require("./getCoreVolumeBackups"));

export { GetCoreVolumeGroupBackupsArgs, GetCoreVolumeGroupBackupsResult, GetCoreVolumeGroupBackupsOutputArgs } from "./getCoreVolumeGroupBackups";
export const getCoreVolumeGroupBackups: typeof import("./getCoreVolumeGroupBackups").getCoreVolumeGroupBackups = null as any;
export const getCoreVolumeGroupBackupsOutput: typeof import("./getCoreVolumeGroupBackups").getCoreVolumeGroupBackupsOutput = null as any;
utilities.lazyLoad(exports, ["getCoreVolumeGroupBackups","getCoreVolumeGroupBackupsOutput"], () => require("./getCoreVolumeGroupBackups"));

export { GetCoreVolumeGroupReplicaArgs, GetCoreVolumeGroupReplicaResult, GetCoreVolumeGroupReplicaOutputArgs } from "./getCoreVolumeGroupReplica";
export const getCoreVolumeGroupReplica: typeof import("./getCoreVolumeGroupReplica").getCoreVolumeGroupReplica = null as any;
export const getCoreVolumeGroupReplicaOutput: typeof import("./getCoreVolumeGroupReplica").getCoreVolumeGroupReplicaOutput = null as any;
utilities.lazyLoad(exports, ["getCoreVolumeGroupReplica","getCoreVolumeGroupReplicaOutput"], () => require("./getCoreVolumeGroupReplica"));

export { GetCoreVolumeGroupReplicasArgs, GetCoreVolumeGroupReplicasResult, GetCoreVolumeGroupReplicasOutputArgs } from "./getCoreVolumeGroupReplicas";
export const getCoreVolumeGroupReplicas: typeof import("./getCoreVolumeGroupReplicas").getCoreVolumeGroupReplicas = null as any;
export const getCoreVolumeGroupReplicasOutput: typeof import("./getCoreVolumeGroupReplicas").getCoreVolumeGroupReplicasOutput = null as any;
utilities.lazyLoad(exports, ["getCoreVolumeGroupReplicas","getCoreVolumeGroupReplicasOutput"], () => require("./getCoreVolumeGroupReplicas"));

export { GetCoreVolumeGroupsArgs, GetCoreVolumeGroupsResult, GetCoreVolumeGroupsOutputArgs } from "./getCoreVolumeGroups";
export const getCoreVolumeGroups: typeof import("./getCoreVolumeGroups").getCoreVolumeGroups = null as any;
export const getCoreVolumeGroupsOutput: typeof import("./getCoreVolumeGroups").getCoreVolumeGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getCoreVolumeGroups","getCoreVolumeGroupsOutput"], () => require("./getCoreVolumeGroups"));

export { GetCoreVolumesArgs, GetCoreVolumesResult, GetCoreVolumesOutputArgs } from "./getCoreVolumes";
export const getCoreVolumes: typeof import("./getCoreVolumes").getCoreVolumes = null as any;
export const getCoreVolumesOutput: typeof import("./getCoreVolumes").getCoreVolumesOutput = null as any;
utilities.lazyLoad(exports, ["getCoreVolumes","getCoreVolumesOutput"], () => require("./getCoreVolumes"));

export { GetCoreVtapArgs, GetCoreVtapResult, GetCoreVtapOutputArgs } from "./getCoreVtap";
export const getCoreVtap: typeof import("./getCoreVtap").getCoreVtap = null as any;
export const getCoreVtapOutput: typeof import("./getCoreVtap").getCoreVtapOutput = null as any;
utilities.lazyLoad(exports, ["getCoreVtap","getCoreVtapOutput"], () => require("./getCoreVtap"));

export { GetCoreVtapsArgs, GetCoreVtapsResult, GetCoreVtapsOutputArgs } from "./getCoreVtaps";
export const getCoreVtaps: typeof import("./getCoreVtaps").getCoreVtaps = null as any;
export const getCoreVtapsOutput: typeof import("./getCoreVtaps").getCoreVtapsOutput = null as any;
utilities.lazyLoad(exports, ["getCoreVtaps","getCoreVtapsOutput"], () => require("./getCoreVtaps"));

export { GetDataLabelingServiceAnnotationFormatArgs, GetDataLabelingServiceAnnotationFormatResult, GetDataLabelingServiceAnnotationFormatOutputArgs } from "./getDataLabelingServiceAnnotationFormat";
export const getDataLabelingServiceAnnotationFormat: typeof import("./getDataLabelingServiceAnnotationFormat").getDataLabelingServiceAnnotationFormat = null as any;
export const getDataLabelingServiceAnnotationFormatOutput: typeof import("./getDataLabelingServiceAnnotationFormat").getDataLabelingServiceAnnotationFormatOutput = null as any;
utilities.lazyLoad(exports, ["getDataLabelingServiceAnnotationFormat","getDataLabelingServiceAnnotationFormatOutput"], () => require("./getDataLabelingServiceAnnotationFormat"));

export { GetDataLabelingServiceAnnotationFormatsArgs, GetDataLabelingServiceAnnotationFormatsResult, GetDataLabelingServiceAnnotationFormatsOutputArgs } from "./getDataLabelingServiceAnnotationFormats";
export const getDataLabelingServiceAnnotationFormats: typeof import("./getDataLabelingServiceAnnotationFormats").getDataLabelingServiceAnnotationFormats = null as any;
export const getDataLabelingServiceAnnotationFormatsOutput: typeof import("./getDataLabelingServiceAnnotationFormats").getDataLabelingServiceAnnotationFormatsOutput = null as any;
utilities.lazyLoad(exports, ["getDataLabelingServiceAnnotationFormats","getDataLabelingServiceAnnotationFormatsOutput"], () => require("./getDataLabelingServiceAnnotationFormats"));

export { GetDataLabelingServiceDatasetArgs, GetDataLabelingServiceDatasetResult, GetDataLabelingServiceDatasetOutputArgs } from "./getDataLabelingServiceDataset";
export const getDataLabelingServiceDataset: typeof import("./getDataLabelingServiceDataset").getDataLabelingServiceDataset = null as any;
export const getDataLabelingServiceDatasetOutput: typeof import("./getDataLabelingServiceDataset").getDataLabelingServiceDatasetOutput = null as any;
utilities.lazyLoad(exports, ["getDataLabelingServiceDataset","getDataLabelingServiceDatasetOutput"], () => require("./getDataLabelingServiceDataset"));

export { GetDataLabelingServiceDatasetsArgs, GetDataLabelingServiceDatasetsResult, GetDataLabelingServiceDatasetsOutputArgs } from "./getDataLabelingServiceDatasets";
export const getDataLabelingServiceDatasets: typeof import("./getDataLabelingServiceDatasets").getDataLabelingServiceDatasets = null as any;
export const getDataLabelingServiceDatasetsOutput: typeof import("./getDataLabelingServiceDatasets").getDataLabelingServiceDatasetsOutput = null as any;
utilities.lazyLoad(exports, ["getDataLabelingServiceDatasets","getDataLabelingServiceDatasetsOutput"], () => require("./getDataLabelingServiceDatasets"));

export { GetDataSafeAlertArgs, GetDataSafeAlertResult, GetDataSafeAlertOutputArgs } from "./getDataSafeAlert";
export const getDataSafeAlert: typeof import("./getDataSafeAlert").getDataSafeAlert = null as any;
export const getDataSafeAlertOutput: typeof import("./getDataSafeAlert").getDataSafeAlertOutput = null as any;
utilities.lazyLoad(exports, ["getDataSafeAlert","getDataSafeAlertOutput"], () => require("./getDataSafeAlert"));

export { GetDataSafeAlertAnalyticArgs, GetDataSafeAlertAnalyticResult, GetDataSafeAlertAnalyticOutputArgs } from "./getDataSafeAlertAnalytic";
export const getDataSafeAlertAnalytic: typeof import("./getDataSafeAlertAnalytic").getDataSafeAlertAnalytic = null as any;
export const getDataSafeAlertAnalyticOutput: typeof import("./getDataSafeAlertAnalytic").getDataSafeAlertAnalyticOutput = null as any;
utilities.lazyLoad(exports, ["getDataSafeAlertAnalytic","getDataSafeAlertAnalyticOutput"], () => require("./getDataSafeAlertAnalytic"));

export { GetDataSafeAlertPoliciesArgs, GetDataSafeAlertPoliciesResult, GetDataSafeAlertPoliciesOutputArgs } from "./getDataSafeAlertPolicies";
export const getDataSafeAlertPolicies: typeof import("./getDataSafeAlertPolicies").getDataSafeAlertPolicies = null as any;
export const getDataSafeAlertPoliciesOutput: typeof import("./getDataSafeAlertPolicies").getDataSafeAlertPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getDataSafeAlertPolicies","getDataSafeAlertPoliciesOutput"], () => require("./getDataSafeAlertPolicies"));

export { GetDataSafeAlertPolicyArgs, GetDataSafeAlertPolicyResult, GetDataSafeAlertPolicyOutputArgs } from "./getDataSafeAlertPolicy";
export const getDataSafeAlertPolicy: typeof import("./getDataSafeAlertPolicy").getDataSafeAlertPolicy = null as any;
export const getDataSafeAlertPolicyOutput: typeof import("./getDataSafeAlertPolicy").getDataSafeAlertPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getDataSafeAlertPolicy","getDataSafeAlertPolicyOutput"], () => require("./getDataSafeAlertPolicy"));

export { GetDataSafeAlertPolicyRuleArgs, GetDataSafeAlertPolicyRuleResult, GetDataSafeAlertPolicyRuleOutputArgs } from "./getDataSafeAlertPolicyRule";
export const getDataSafeAlertPolicyRule: typeof import("./getDataSafeAlertPolicyRule").getDataSafeAlertPolicyRule = null as any;
export const getDataSafeAlertPolicyRuleOutput: typeof import("./getDataSafeAlertPolicyRule").getDataSafeAlertPolicyRuleOutput = null as any;
utilities.lazyLoad(exports, ["getDataSafeAlertPolicyRule","getDataSafeAlertPolicyRuleOutput"], () => require("./getDataSafeAlertPolicyRule"));

export { GetDataSafeAlertPolicyRulesArgs, GetDataSafeAlertPolicyRulesResult, GetDataSafeAlertPolicyRulesOutputArgs } from "./getDataSafeAlertPolicyRules";
export const getDataSafeAlertPolicyRules: typeof import("./getDataSafeAlertPolicyRules").getDataSafeAlertPolicyRules = null as any;
export const getDataSafeAlertPolicyRulesOutput: typeof import("./getDataSafeAlertPolicyRules").getDataSafeAlertPolicyRulesOutput = null as any;
utilities.lazyLoad(exports, ["getDataSafeAlertPolicyRules","getDataSafeAlertPolicyRulesOutput"], () => require("./getDataSafeAlertPolicyRules"));

export { GetDataSafeAlertsArgs, GetDataSafeAlertsResult, GetDataSafeAlertsOutputArgs } from "./getDataSafeAlerts";
export const getDataSafeAlerts: typeof import("./getDataSafeAlerts").getDataSafeAlerts = null as any;
export const getDataSafeAlertsOutput: typeof import("./getDataSafeAlerts").getDataSafeAlertsOutput = null as any;
utilities.lazyLoad(exports, ["getDataSafeAlerts","getDataSafeAlertsOutput"], () => require("./getDataSafeAlerts"));

export { GetDataSafeAuditArchiveRetrievalArgs, GetDataSafeAuditArchiveRetrievalResult, GetDataSafeAuditArchiveRetrievalOutputArgs } from "./getDataSafeAuditArchiveRetrieval";
export const getDataSafeAuditArchiveRetrieval: typeof import("./getDataSafeAuditArchiveRetrieval").getDataSafeAuditArchiveRetrieval = null as any;
export const getDataSafeAuditArchiveRetrievalOutput: typeof import("./getDataSafeAuditArchiveRetrieval").getDataSafeAuditArchiveRetrievalOutput = null as any;
utilities.lazyLoad(exports, ["getDataSafeAuditArchiveRetrieval","getDataSafeAuditArchiveRetrievalOutput"], () => require("./getDataSafeAuditArchiveRetrieval"));

export { GetDataSafeAuditArchiveRetrievalsArgs, GetDataSafeAuditArchiveRetrievalsResult, GetDataSafeAuditArchiveRetrievalsOutputArgs } from "./getDataSafeAuditArchiveRetrievals";
export const getDataSafeAuditArchiveRetrievals: typeof import("./getDataSafeAuditArchiveRetrievals").getDataSafeAuditArchiveRetrievals = null as any;
export const getDataSafeAuditArchiveRetrievalsOutput: typeof import("./getDataSafeAuditArchiveRetrievals").getDataSafeAuditArchiveRetrievalsOutput = null as any;
utilities.lazyLoad(exports, ["getDataSafeAuditArchiveRetrievals","getDataSafeAuditArchiveRetrievalsOutput"], () => require("./getDataSafeAuditArchiveRetrievals"));

export { GetDataSafeAuditEventArgs, GetDataSafeAuditEventResult, GetDataSafeAuditEventOutputArgs } from "./getDataSafeAuditEvent";
export const getDataSafeAuditEvent: typeof import("./getDataSafeAuditEvent").getDataSafeAuditEvent = null as any;
export const getDataSafeAuditEventOutput: typeof import("./getDataSafeAuditEvent").getDataSafeAuditEventOutput = null as any;
utilities.lazyLoad(exports, ["getDataSafeAuditEvent","getDataSafeAuditEventOutput"], () => require("./getDataSafeAuditEvent"));

export { GetDataSafeAuditEventAnalyticArgs, GetDataSafeAuditEventAnalyticResult, GetDataSafeAuditEventAnalyticOutputArgs } from "./getDataSafeAuditEventAnalytic";
export const getDataSafeAuditEventAnalytic: typeof import("./getDataSafeAuditEventAnalytic").getDataSafeAuditEventAnalytic = null as any;
export const getDataSafeAuditEventAnalyticOutput: typeof import("./getDataSafeAuditEventAnalytic").getDataSafeAuditEventAnalyticOutput = null as any;
utilities.lazyLoad(exports, ["getDataSafeAuditEventAnalytic","getDataSafeAuditEventAnalyticOutput"], () => require("./getDataSafeAuditEventAnalytic"));

export { GetDataSafeAuditEventsArgs, GetDataSafeAuditEventsResult, GetDataSafeAuditEventsOutputArgs } from "./getDataSafeAuditEvents";
export const getDataSafeAuditEvents: typeof import("./getDataSafeAuditEvents").getDataSafeAuditEvents = null as any;
export const getDataSafeAuditEventsOutput: typeof import("./getDataSafeAuditEvents").getDataSafeAuditEventsOutput = null as any;
utilities.lazyLoad(exports, ["getDataSafeAuditEvents","getDataSafeAuditEventsOutput"], () => require("./getDataSafeAuditEvents"));

export { GetDataSafeAuditPoliciesArgs, GetDataSafeAuditPoliciesResult, GetDataSafeAuditPoliciesOutputArgs } from "./getDataSafeAuditPolicies";
export const getDataSafeAuditPolicies: typeof import("./getDataSafeAuditPolicies").getDataSafeAuditPolicies = null as any;
export const getDataSafeAuditPoliciesOutput: typeof import("./getDataSafeAuditPolicies").getDataSafeAuditPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getDataSafeAuditPolicies","getDataSafeAuditPoliciesOutput"], () => require("./getDataSafeAuditPolicies"));

export { GetDataSafeAuditPolicyArgs, GetDataSafeAuditPolicyResult, GetDataSafeAuditPolicyOutputArgs } from "./getDataSafeAuditPolicy";
export const getDataSafeAuditPolicy: typeof import("./getDataSafeAuditPolicy").getDataSafeAuditPolicy = null as any;
export const getDataSafeAuditPolicyOutput: typeof import("./getDataSafeAuditPolicy").getDataSafeAuditPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getDataSafeAuditPolicy","getDataSafeAuditPolicyOutput"], () => require("./getDataSafeAuditPolicy"));

export { GetDataSafeAuditProfileArgs, GetDataSafeAuditProfileResult, GetDataSafeAuditProfileOutputArgs } from "./getDataSafeAuditProfile";
export const getDataSafeAuditProfile: typeof import("./getDataSafeAuditProfile").getDataSafeAuditProfile = null as any;
export const getDataSafeAuditProfileOutput: typeof import("./getDataSafeAuditProfile").getDataSafeAuditProfileOutput = null as any;
utilities.lazyLoad(exports, ["getDataSafeAuditProfile","getDataSafeAuditProfileOutput"], () => require("./getDataSafeAuditProfile"));

export { GetDataSafeAuditProfileAnalyticArgs, GetDataSafeAuditProfileAnalyticResult, GetDataSafeAuditProfileAnalyticOutputArgs } from "./getDataSafeAuditProfileAnalytic";
export const getDataSafeAuditProfileAnalytic: typeof import("./getDataSafeAuditProfileAnalytic").getDataSafeAuditProfileAnalytic = null as any;
export const getDataSafeAuditProfileAnalyticOutput: typeof import("./getDataSafeAuditProfileAnalytic").getDataSafeAuditProfileAnalyticOutput = null as any;
utilities.lazyLoad(exports, ["getDataSafeAuditProfileAnalytic","getDataSafeAuditProfileAnalyticOutput"], () => require("./getDataSafeAuditProfileAnalytic"));

export { GetDataSafeAuditProfileAvailableAuditVolumeArgs, GetDataSafeAuditProfileAvailableAuditVolumeResult, GetDataSafeAuditProfileAvailableAuditVolumeOutputArgs } from "./getDataSafeAuditProfileAvailableAuditVolume";
export const getDataSafeAuditProfileAvailableAuditVolume: typeof import("./getDataSafeAuditProfileAvailableAuditVolume").getDataSafeAuditProfileAvailableAuditVolume = null as any;
export const getDataSafeAuditProfileAvailableAuditVolumeOutput: typeof import("./getDataSafeAuditProfileAvailableAuditVolume").getDataSafeAuditProfileAvailableAuditVolumeOutput = null as any;
utilities.lazyLoad(exports, ["getDataSafeAuditProfileAvailableAuditVolume","getDataSafeAuditProfileAvailableAuditVolumeOutput"], () => require("./getDataSafeAuditProfileAvailableAuditVolume"));

export { GetDataSafeAuditProfileAvailableAuditVolumesArgs, GetDataSafeAuditProfileAvailableAuditVolumesResult, GetDataSafeAuditProfileAvailableAuditVolumesOutputArgs } from "./getDataSafeAuditProfileAvailableAuditVolumes";
export const getDataSafeAuditProfileAvailableAuditVolumes: typeof import("./getDataSafeAuditProfileAvailableAuditVolumes").getDataSafeAuditProfileAvailableAuditVolumes = null as any;
export const getDataSafeAuditProfileAvailableAuditVolumesOutput: typeof import("./getDataSafeAuditProfileAvailableAuditVolumes").getDataSafeAuditProfileAvailableAuditVolumesOutput = null as any;
utilities.lazyLoad(exports, ["getDataSafeAuditProfileAvailableAuditVolumes","getDataSafeAuditProfileAvailableAuditVolumesOutput"], () => require("./getDataSafeAuditProfileAvailableAuditVolumes"));

export { GetDataSafeAuditProfileCollectedAuditVolumeArgs, GetDataSafeAuditProfileCollectedAuditVolumeResult, GetDataSafeAuditProfileCollectedAuditVolumeOutputArgs } from "./getDataSafeAuditProfileCollectedAuditVolume";
export const getDataSafeAuditProfileCollectedAuditVolume: typeof import("./getDataSafeAuditProfileCollectedAuditVolume").getDataSafeAuditProfileCollectedAuditVolume = null as any;
export const getDataSafeAuditProfileCollectedAuditVolumeOutput: typeof import("./getDataSafeAuditProfileCollectedAuditVolume").getDataSafeAuditProfileCollectedAuditVolumeOutput = null as any;
utilities.lazyLoad(exports, ["getDataSafeAuditProfileCollectedAuditVolume","getDataSafeAuditProfileCollectedAuditVolumeOutput"], () => require("./getDataSafeAuditProfileCollectedAuditVolume"));

export { GetDataSafeAuditProfileCollectedAuditVolumesArgs, GetDataSafeAuditProfileCollectedAuditVolumesResult, GetDataSafeAuditProfileCollectedAuditVolumesOutputArgs } from "./getDataSafeAuditProfileCollectedAuditVolumes";
export const getDataSafeAuditProfileCollectedAuditVolumes: typeof import("./getDataSafeAuditProfileCollectedAuditVolumes").getDataSafeAuditProfileCollectedAuditVolumes = null as any;
export const getDataSafeAuditProfileCollectedAuditVolumesOutput: typeof import("./getDataSafeAuditProfileCollectedAuditVolumes").getDataSafeAuditProfileCollectedAuditVolumesOutput = null as any;
utilities.lazyLoad(exports, ["getDataSafeAuditProfileCollectedAuditVolumes","getDataSafeAuditProfileCollectedAuditVolumesOutput"], () => require("./getDataSafeAuditProfileCollectedAuditVolumes"));

export { GetDataSafeAuditProfilesArgs, GetDataSafeAuditProfilesResult, GetDataSafeAuditProfilesOutputArgs } from "./getDataSafeAuditProfiles";
export const getDataSafeAuditProfiles: typeof import("./getDataSafeAuditProfiles").getDataSafeAuditProfiles = null as any;
export const getDataSafeAuditProfilesOutput: typeof import("./getDataSafeAuditProfiles").getDataSafeAuditProfilesOutput = null as any;
utilities.lazyLoad(exports, ["getDataSafeAuditProfiles","getDataSafeAuditProfilesOutput"], () => require("./getDataSafeAuditProfiles"));

export { GetDataSafeAuditTrailArgs, GetDataSafeAuditTrailResult, GetDataSafeAuditTrailOutputArgs } from "./getDataSafeAuditTrail";
export const getDataSafeAuditTrail: typeof import("./getDataSafeAuditTrail").getDataSafeAuditTrail = null as any;
export const getDataSafeAuditTrailOutput: typeof import("./getDataSafeAuditTrail").getDataSafeAuditTrailOutput = null as any;
utilities.lazyLoad(exports, ["getDataSafeAuditTrail","getDataSafeAuditTrailOutput"], () => require("./getDataSafeAuditTrail"));

export { GetDataSafeAuditTrailAnalyticArgs, GetDataSafeAuditTrailAnalyticResult, GetDataSafeAuditTrailAnalyticOutputArgs } from "./getDataSafeAuditTrailAnalytic";
export const getDataSafeAuditTrailAnalytic: typeof import("./getDataSafeAuditTrailAnalytic").getDataSafeAuditTrailAnalytic = null as any;
export const getDataSafeAuditTrailAnalyticOutput: typeof import("./getDataSafeAuditTrailAnalytic").getDataSafeAuditTrailAnalyticOutput = null as any;
utilities.lazyLoad(exports, ["getDataSafeAuditTrailAnalytic","getDataSafeAuditTrailAnalyticOutput"], () => require("./getDataSafeAuditTrailAnalytic"));

export { GetDataSafeAuditTrailsArgs, GetDataSafeAuditTrailsResult, GetDataSafeAuditTrailsOutputArgs } from "./getDataSafeAuditTrails";
export const getDataSafeAuditTrails: typeof import("./getDataSafeAuditTrails").getDataSafeAuditTrails = null as any;
export const getDataSafeAuditTrailsOutput: typeof import("./getDataSafeAuditTrails").getDataSafeAuditTrailsOutput = null as any;
utilities.lazyLoad(exports, ["getDataSafeAuditTrails","getDataSafeAuditTrailsOutput"], () => require("./getDataSafeAuditTrails"));

export { GetDataSafeCompatibleFormatsForDataTypeArgs, GetDataSafeCompatibleFormatsForDataTypeResult, GetDataSafeCompatibleFormatsForDataTypeOutputArgs } from "./getDataSafeCompatibleFormatsForDataType";
export const getDataSafeCompatibleFormatsForDataType: typeof import("./getDataSafeCompatibleFormatsForDataType").getDataSafeCompatibleFormatsForDataType = null as any;
export const getDataSafeCompatibleFormatsForDataTypeOutput: typeof import("./getDataSafeCompatibleFormatsForDataType").getDataSafeCompatibleFormatsForDataTypeOutput = null as any;
utilities.lazyLoad(exports, ["getDataSafeCompatibleFormatsForDataType","getDataSafeCompatibleFormatsForDataTypeOutput"], () => require("./getDataSafeCompatibleFormatsForDataType"));

export { GetDataSafeCompatibleFormatsForSensitiveTypeArgs, GetDataSafeCompatibleFormatsForSensitiveTypeResult, GetDataSafeCompatibleFormatsForSensitiveTypeOutputArgs } from "./getDataSafeCompatibleFormatsForSensitiveType";
export const getDataSafeCompatibleFormatsForSensitiveType: typeof import("./getDataSafeCompatibleFormatsForSensitiveType").getDataSafeCompatibleFormatsForSensitiveType = null as any;
export const getDataSafeCompatibleFormatsForSensitiveTypeOutput: typeof import("./getDataSafeCompatibleFormatsForSensitiveType").getDataSafeCompatibleFormatsForSensitiveTypeOutput = null as any;
utilities.lazyLoad(exports, ["getDataSafeCompatibleFormatsForSensitiveType","getDataSafeCompatibleFormatsForSensitiveTypeOutput"], () => require("./getDataSafeCompatibleFormatsForSensitiveType"));

export { GetDataSafeDataSafeConfigurationArgs, GetDataSafeDataSafeConfigurationResult, GetDataSafeDataSafeConfigurationOutputArgs } from "./getDataSafeDataSafeConfiguration";
export const getDataSafeDataSafeConfiguration: typeof import("./getDataSafeDataSafeConfiguration").getDataSafeDataSafeConfiguration = null as any;
export const getDataSafeDataSafeConfigurationOutput: typeof import("./getDataSafeDataSafeConfiguration").getDataSafeDataSafeConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getDataSafeDataSafeConfiguration","getDataSafeDataSafeConfigurationOutput"], () => require("./getDataSafeDataSafeConfiguration"));

export { GetDataSafeDataSafePrivateEndpointArgs, GetDataSafeDataSafePrivateEndpointResult, GetDataSafeDataSafePrivateEndpointOutputArgs } from "./getDataSafeDataSafePrivateEndpoint";
export const getDataSafeDataSafePrivateEndpoint: typeof import("./getDataSafeDataSafePrivateEndpoint").getDataSafeDataSafePrivateEndpoint = null as any;
export const getDataSafeDataSafePrivateEndpointOutput: typeof import("./getDataSafeDataSafePrivateEndpoint").getDataSafeDataSafePrivateEndpointOutput = null as any;
utilities.lazyLoad(exports, ["getDataSafeDataSafePrivateEndpoint","getDataSafeDataSafePrivateEndpointOutput"], () => require("./getDataSafeDataSafePrivateEndpoint"));

export { GetDataSafeDataSafePrivateEndpointsArgs, GetDataSafeDataSafePrivateEndpointsResult, GetDataSafeDataSafePrivateEndpointsOutputArgs } from "./getDataSafeDataSafePrivateEndpoints";
export const getDataSafeDataSafePrivateEndpoints: typeof import("./getDataSafeDataSafePrivateEndpoints").getDataSafeDataSafePrivateEndpoints = null as any;
export const getDataSafeDataSafePrivateEndpointsOutput: typeof import("./getDataSafeDataSafePrivateEndpoints").getDataSafeDataSafePrivateEndpointsOutput = null as any;
utilities.lazyLoad(exports, ["getDataSafeDataSafePrivateEndpoints","getDataSafeDataSafePrivateEndpointsOutput"], () => require("./getDataSafeDataSafePrivateEndpoints"));

export { GetDataSafeDiscoveryAnalyticArgs, GetDataSafeDiscoveryAnalyticResult, GetDataSafeDiscoveryAnalyticOutputArgs } from "./getDataSafeDiscoveryAnalytic";
export const getDataSafeDiscoveryAnalytic: typeof import("./getDataSafeDiscoveryAnalytic").getDataSafeDiscoveryAnalytic = null as any;
export const getDataSafeDiscoveryAnalyticOutput: typeof import("./getDataSafeDiscoveryAnalytic").getDataSafeDiscoveryAnalyticOutput = null as any;
utilities.lazyLoad(exports, ["getDataSafeDiscoveryAnalytic","getDataSafeDiscoveryAnalyticOutput"], () => require("./getDataSafeDiscoveryAnalytic"));

export { GetDataSafeDiscoveryAnalyticsArgs, GetDataSafeDiscoveryAnalyticsResult, GetDataSafeDiscoveryAnalyticsOutputArgs } from "./getDataSafeDiscoveryAnalytics";
export const getDataSafeDiscoveryAnalytics: typeof import("./getDataSafeDiscoveryAnalytics").getDataSafeDiscoveryAnalytics = null as any;
export const getDataSafeDiscoveryAnalyticsOutput: typeof import("./getDataSafeDiscoveryAnalytics").getDataSafeDiscoveryAnalyticsOutput = null as any;
utilities.lazyLoad(exports, ["getDataSafeDiscoveryAnalytics","getDataSafeDiscoveryAnalyticsOutput"], () => require("./getDataSafeDiscoveryAnalytics"));

export { GetDataSafeDiscoveryJobArgs, GetDataSafeDiscoveryJobResult, GetDataSafeDiscoveryJobOutputArgs } from "./getDataSafeDiscoveryJob";
export const getDataSafeDiscoveryJob: typeof import("./getDataSafeDiscoveryJob").getDataSafeDiscoveryJob = null as any;
export const getDataSafeDiscoveryJobOutput: typeof import("./getDataSafeDiscoveryJob").getDataSafeDiscoveryJobOutput = null as any;
utilities.lazyLoad(exports, ["getDataSafeDiscoveryJob","getDataSafeDiscoveryJobOutput"], () => require("./getDataSafeDiscoveryJob"));

export { GetDataSafeDiscoveryJobsArgs, GetDataSafeDiscoveryJobsResult, GetDataSafeDiscoveryJobsOutputArgs } from "./getDataSafeDiscoveryJobs";
export const getDataSafeDiscoveryJobs: typeof import("./getDataSafeDiscoveryJobs").getDataSafeDiscoveryJobs = null as any;
export const getDataSafeDiscoveryJobsOutput: typeof import("./getDataSafeDiscoveryJobs").getDataSafeDiscoveryJobsOutput = null as any;
utilities.lazyLoad(exports, ["getDataSafeDiscoveryJobs","getDataSafeDiscoveryJobsOutput"], () => require("./getDataSafeDiscoveryJobs"));

export { GetDataSafeDiscoveryJobsResultArgs, GetDataSafeDiscoveryJobsResultResult, GetDataSafeDiscoveryJobsResultOutputArgs } from "./getDataSafeDiscoveryJobsResult";
export const getDataSafeDiscoveryJobsResult: typeof import("./getDataSafeDiscoveryJobsResult").getDataSafeDiscoveryJobsResult = null as any;
export const getDataSafeDiscoveryJobsResultOutput: typeof import("./getDataSafeDiscoveryJobsResult").getDataSafeDiscoveryJobsResultOutput = null as any;
utilities.lazyLoad(exports, ["getDataSafeDiscoveryJobsResult","getDataSafeDiscoveryJobsResultOutput"], () => require("./getDataSafeDiscoveryJobsResult"));

export { GetDataSafeDiscoveryJobsResultsArgs, GetDataSafeDiscoveryJobsResultsResult, GetDataSafeDiscoveryJobsResultsOutputArgs } from "./getDataSafeDiscoveryJobsResults";
export const getDataSafeDiscoveryJobsResults: typeof import("./getDataSafeDiscoveryJobsResults").getDataSafeDiscoveryJobsResults = null as any;
export const getDataSafeDiscoveryJobsResultsOutput: typeof import("./getDataSafeDiscoveryJobsResults").getDataSafeDiscoveryJobsResultsOutput = null as any;
utilities.lazyLoad(exports, ["getDataSafeDiscoveryJobsResults","getDataSafeDiscoveryJobsResultsOutput"], () => require("./getDataSafeDiscoveryJobsResults"));

export { GetDataSafeLibraryMaskingFormatArgs, GetDataSafeLibraryMaskingFormatResult, GetDataSafeLibraryMaskingFormatOutputArgs } from "./getDataSafeLibraryMaskingFormat";
export const getDataSafeLibraryMaskingFormat: typeof import("./getDataSafeLibraryMaskingFormat").getDataSafeLibraryMaskingFormat = null as any;
export const getDataSafeLibraryMaskingFormatOutput: typeof import("./getDataSafeLibraryMaskingFormat").getDataSafeLibraryMaskingFormatOutput = null as any;
utilities.lazyLoad(exports, ["getDataSafeLibraryMaskingFormat","getDataSafeLibraryMaskingFormatOutput"], () => require("./getDataSafeLibraryMaskingFormat"));

export { GetDataSafeLibraryMaskingFormatsArgs, GetDataSafeLibraryMaskingFormatsResult, GetDataSafeLibraryMaskingFormatsOutputArgs } from "./getDataSafeLibraryMaskingFormats";
export const getDataSafeLibraryMaskingFormats: typeof import("./getDataSafeLibraryMaskingFormats").getDataSafeLibraryMaskingFormats = null as any;
export const getDataSafeLibraryMaskingFormatsOutput: typeof import("./getDataSafeLibraryMaskingFormats").getDataSafeLibraryMaskingFormatsOutput = null as any;
utilities.lazyLoad(exports, ["getDataSafeLibraryMaskingFormats","getDataSafeLibraryMaskingFormatsOutput"], () => require("./getDataSafeLibraryMaskingFormats"));

export { GetDataSafeListUserGrantsArgs, GetDataSafeListUserGrantsResult, GetDataSafeListUserGrantsOutputArgs } from "./getDataSafeListUserGrants";
export const getDataSafeListUserGrants: typeof import("./getDataSafeListUserGrants").getDataSafeListUserGrants = null as any;
export const getDataSafeListUserGrantsOutput: typeof import("./getDataSafeListUserGrants").getDataSafeListUserGrantsOutput = null as any;
utilities.lazyLoad(exports, ["getDataSafeListUserGrants","getDataSafeListUserGrantsOutput"], () => require("./getDataSafeListUserGrants"));

export { GetDataSafeMaskingAnalyticArgs, GetDataSafeMaskingAnalyticResult, GetDataSafeMaskingAnalyticOutputArgs } from "./getDataSafeMaskingAnalytic";
export const getDataSafeMaskingAnalytic: typeof import("./getDataSafeMaskingAnalytic").getDataSafeMaskingAnalytic = null as any;
export const getDataSafeMaskingAnalyticOutput: typeof import("./getDataSafeMaskingAnalytic").getDataSafeMaskingAnalyticOutput = null as any;
utilities.lazyLoad(exports, ["getDataSafeMaskingAnalytic","getDataSafeMaskingAnalyticOutput"], () => require("./getDataSafeMaskingAnalytic"));

export { GetDataSafeMaskingAnalyticsArgs, GetDataSafeMaskingAnalyticsResult, GetDataSafeMaskingAnalyticsOutputArgs } from "./getDataSafeMaskingAnalytics";
export const getDataSafeMaskingAnalytics: typeof import("./getDataSafeMaskingAnalytics").getDataSafeMaskingAnalytics = null as any;
export const getDataSafeMaskingAnalyticsOutput: typeof import("./getDataSafeMaskingAnalytics").getDataSafeMaskingAnalyticsOutput = null as any;
utilities.lazyLoad(exports, ["getDataSafeMaskingAnalytics","getDataSafeMaskingAnalyticsOutput"], () => require("./getDataSafeMaskingAnalytics"));

export { GetDataSafeMaskingPoliciesArgs, GetDataSafeMaskingPoliciesResult, GetDataSafeMaskingPoliciesOutputArgs } from "./getDataSafeMaskingPolicies";
export const getDataSafeMaskingPolicies: typeof import("./getDataSafeMaskingPolicies").getDataSafeMaskingPolicies = null as any;
export const getDataSafeMaskingPoliciesOutput: typeof import("./getDataSafeMaskingPolicies").getDataSafeMaskingPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getDataSafeMaskingPolicies","getDataSafeMaskingPoliciesOutput"], () => require("./getDataSafeMaskingPolicies"));

export { GetDataSafeMaskingPoliciesMaskingColumnArgs, GetDataSafeMaskingPoliciesMaskingColumnResult, GetDataSafeMaskingPoliciesMaskingColumnOutputArgs } from "./getDataSafeMaskingPoliciesMaskingColumn";
export const getDataSafeMaskingPoliciesMaskingColumn: typeof import("./getDataSafeMaskingPoliciesMaskingColumn").getDataSafeMaskingPoliciesMaskingColumn = null as any;
export const getDataSafeMaskingPoliciesMaskingColumnOutput: typeof import("./getDataSafeMaskingPoliciesMaskingColumn").getDataSafeMaskingPoliciesMaskingColumnOutput = null as any;
utilities.lazyLoad(exports, ["getDataSafeMaskingPoliciesMaskingColumn","getDataSafeMaskingPoliciesMaskingColumnOutput"], () => require("./getDataSafeMaskingPoliciesMaskingColumn"));

export { GetDataSafeMaskingPoliciesMaskingColumnsArgs, GetDataSafeMaskingPoliciesMaskingColumnsResult, GetDataSafeMaskingPoliciesMaskingColumnsOutputArgs } from "./getDataSafeMaskingPoliciesMaskingColumns";
export const getDataSafeMaskingPoliciesMaskingColumns: typeof import("./getDataSafeMaskingPoliciesMaskingColumns").getDataSafeMaskingPoliciesMaskingColumns = null as any;
export const getDataSafeMaskingPoliciesMaskingColumnsOutput: typeof import("./getDataSafeMaskingPoliciesMaskingColumns").getDataSafeMaskingPoliciesMaskingColumnsOutput = null as any;
utilities.lazyLoad(exports, ["getDataSafeMaskingPoliciesMaskingColumns","getDataSafeMaskingPoliciesMaskingColumnsOutput"], () => require("./getDataSafeMaskingPoliciesMaskingColumns"));

export { GetDataSafeMaskingPolicyArgs, GetDataSafeMaskingPolicyResult, GetDataSafeMaskingPolicyOutputArgs } from "./getDataSafeMaskingPolicy";
export const getDataSafeMaskingPolicy: typeof import("./getDataSafeMaskingPolicy").getDataSafeMaskingPolicy = null as any;
export const getDataSafeMaskingPolicyOutput: typeof import("./getDataSafeMaskingPolicy").getDataSafeMaskingPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getDataSafeMaskingPolicy","getDataSafeMaskingPolicyOutput"], () => require("./getDataSafeMaskingPolicy"));

export { GetDataSafeMaskingPolicyHealthReportArgs, GetDataSafeMaskingPolicyHealthReportResult, GetDataSafeMaskingPolicyHealthReportOutputArgs } from "./getDataSafeMaskingPolicyHealthReport";
export const getDataSafeMaskingPolicyHealthReport: typeof import("./getDataSafeMaskingPolicyHealthReport").getDataSafeMaskingPolicyHealthReport = null as any;
export const getDataSafeMaskingPolicyHealthReportOutput: typeof import("./getDataSafeMaskingPolicyHealthReport").getDataSafeMaskingPolicyHealthReportOutput = null as any;
utilities.lazyLoad(exports, ["getDataSafeMaskingPolicyHealthReport","getDataSafeMaskingPolicyHealthReportOutput"], () => require("./getDataSafeMaskingPolicyHealthReport"));

export { GetDataSafeMaskingPolicyHealthReportLogsArgs, GetDataSafeMaskingPolicyHealthReportLogsResult, GetDataSafeMaskingPolicyHealthReportLogsOutputArgs } from "./getDataSafeMaskingPolicyHealthReportLogs";
export const getDataSafeMaskingPolicyHealthReportLogs: typeof import("./getDataSafeMaskingPolicyHealthReportLogs").getDataSafeMaskingPolicyHealthReportLogs = null as any;
export const getDataSafeMaskingPolicyHealthReportLogsOutput: typeof import("./getDataSafeMaskingPolicyHealthReportLogs").getDataSafeMaskingPolicyHealthReportLogsOutput = null as any;
utilities.lazyLoad(exports, ["getDataSafeMaskingPolicyHealthReportLogs","getDataSafeMaskingPolicyHealthReportLogsOutput"], () => require("./getDataSafeMaskingPolicyHealthReportLogs"));

export { GetDataSafeMaskingPolicyHealthReportsArgs, GetDataSafeMaskingPolicyHealthReportsResult, GetDataSafeMaskingPolicyHealthReportsOutputArgs } from "./getDataSafeMaskingPolicyHealthReports";
export const getDataSafeMaskingPolicyHealthReports: typeof import("./getDataSafeMaskingPolicyHealthReports").getDataSafeMaskingPolicyHealthReports = null as any;
export const getDataSafeMaskingPolicyHealthReportsOutput: typeof import("./getDataSafeMaskingPolicyHealthReports").getDataSafeMaskingPolicyHealthReportsOutput = null as any;
utilities.lazyLoad(exports, ["getDataSafeMaskingPolicyHealthReports","getDataSafeMaskingPolicyHealthReportsOutput"], () => require("./getDataSafeMaskingPolicyHealthReports"));

export { GetDataSafeMaskingPolicyMaskingObjectsArgs, GetDataSafeMaskingPolicyMaskingObjectsResult, GetDataSafeMaskingPolicyMaskingObjectsOutputArgs } from "./getDataSafeMaskingPolicyMaskingObjects";
export const getDataSafeMaskingPolicyMaskingObjects: typeof import("./getDataSafeMaskingPolicyMaskingObjects").getDataSafeMaskingPolicyMaskingObjects = null as any;
export const getDataSafeMaskingPolicyMaskingObjectsOutput: typeof import("./getDataSafeMaskingPolicyMaskingObjects").getDataSafeMaskingPolicyMaskingObjectsOutput = null as any;
utilities.lazyLoad(exports, ["getDataSafeMaskingPolicyMaskingObjects","getDataSafeMaskingPolicyMaskingObjectsOutput"], () => require("./getDataSafeMaskingPolicyMaskingObjects"));

export { GetDataSafeMaskingPolicyMaskingSchemasArgs, GetDataSafeMaskingPolicyMaskingSchemasResult, GetDataSafeMaskingPolicyMaskingSchemasOutputArgs } from "./getDataSafeMaskingPolicyMaskingSchemas";
export const getDataSafeMaskingPolicyMaskingSchemas: typeof import("./getDataSafeMaskingPolicyMaskingSchemas").getDataSafeMaskingPolicyMaskingSchemas = null as any;
export const getDataSafeMaskingPolicyMaskingSchemasOutput: typeof import("./getDataSafeMaskingPolicyMaskingSchemas").getDataSafeMaskingPolicyMaskingSchemasOutput = null as any;
utilities.lazyLoad(exports, ["getDataSafeMaskingPolicyMaskingSchemas","getDataSafeMaskingPolicyMaskingSchemasOutput"], () => require("./getDataSafeMaskingPolicyMaskingSchemas"));

export { GetDataSafeMaskingReportArgs, GetDataSafeMaskingReportResult, GetDataSafeMaskingReportOutputArgs } from "./getDataSafeMaskingReport";
export const getDataSafeMaskingReport: typeof import("./getDataSafeMaskingReport").getDataSafeMaskingReport = null as any;
export const getDataSafeMaskingReportOutput: typeof import("./getDataSafeMaskingReport").getDataSafeMaskingReportOutput = null as any;
utilities.lazyLoad(exports, ["getDataSafeMaskingReport","getDataSafeMaskingReportOutput"], () => require("./getDataSafeMaskingReport"));

export { GetDataSafeMaskingReportsArgs, GetDataSafeMaskingReportsResult, GetDataSafeMaskingReportsOutputArgs } from "./getDataSafeMaskingReports";
export const getDataSafeMaskingReports: typeof import("./getDataSafeMaskingReports").getDataSafeMaskingReports = null as any;
export const getDataSafeMaskingReportsOutput: typeof import("./getDataSafeMaskingReports").getDataSafeMaskingReportsOutput = null as any;
utilities.lazyLoad(exports, ["getDataSafeMaskingReports","getDataSafeMaskingReportsOutput"], () => require("./getDataSafeMaskingReports"));

export { GetDataSafeMaskingReportsMaskedColumnArgs, GetDataSafeMaskingReportsMaskedColumnResult, GetDataSafeMaskingReportsMaskedColumnOutputArgs } from "./getDataSafeMaskingReportsMaskedColumn";
export const getDataSafeMaskingReportsMaskedColumn: typeof import("./getDataSafeMaskingReportsMaskedColumn").getDataSafeMaskingReportsMaskedColumn = null as any;
export const getDataSafeMaskingReportsMaskedColumnOutput: typeof import("./getDataSafeMaskingReportsMaskedColumn").getDataSafeMaskingReportsMaskedColumnOutput = null as any;
utilities.lazyLoad(exports, ["getDataSafeMaskingReportsMaskedColumn","getDataSafeMaskingReportsMaskedColumnOutput"], () => require("./getDataSafeMaskingReportsMaskedColumn"));

export { GetDataSafeMaskingReportsMaskedColumnsArgs, GetDataSafeMaskingReportsMaskedColumnsResult, GetDataSafeMaskingReportsMaskedColumnsOutputArgs } from "./getDataSafeMaskingReportsMaskedColumns";
export const getDataSafeMaskingReportsMaskedColumns: typeof import("./getDataSafeMaskingReportsMaskedColumns").getDataSafeMaskingReportsMaskedColumns = null as any;
export const getDataSafeMaskingReportsMaskedColumnsOutput: typeof import("./getDataSafeMaskingReportsMaskedColumns").getDataSafeMaskingReportsMaskedColumnsOutput = null as any;
utilities.lazyLoad(exports, ["getDataSafeMaskingReportsMaskedColumns","getDataSafeMaskingReportsMaskedColumnsOutput"], () => require("./getDataSafeMaskingReportsMaskedColumns"));

export { GetDataSafeOnPremConnectorArgs, GetDataSafeOnPremConnectorResult, GetDataSafeOnPremConnectorOutputArgs } from "./getDataSafeOnPremConnector";
export const getDataSafeOnPremConnector: typeof import("./getDataSafeOnPremConnector").getDataSafeOnPremConnector = null as any;
export const getDataSafeOnPremConnectorOutput: typeof import("./getDataSafeOnPremConnector").getDataSafeOnPremConnectorOutput = null as any;
utilities.lazyLoad(exports, ["getDataSafeOnPremConnector","getDataSafeOnPremConnectorOutput"], () => require("./getDataSafeOnPremConnector"));

export { GetDataSafeOnPremConnectorsArgs, GetDataSafeOnPremConnectorsResult, GetDataSafeOnPremConnectorsOutputArgs } from "./getDataSafeOnPremConnectors";
export const getDataSafeOnPremConnectors: typeof import("./getDataSafeOnPremConnectors").getDataSafeOnPremConnectors = null as any;
export const getDataSafeOnPremConnectorsOutput: typeof import("./getDataSafeOnPremConnectors").getDataSafeOnPremConnectorsOutput = null as any;
utilities.lazyLoad(exports, ["getDataSafeOnPremConnectors","getDataSafeOnPremConnectorsOutput"], () => require("./getDataSafeOnPremConnectors"));

export { GetDataSafeReportArgs, GetDataSafeReportResult, GetDataSafeReportOutputArgs } from "./getDataSafeReport";
export const getDataSafeReport: typeof import("./getDataSafeReport").getDataSafeReport = null as any;
export const getDataSafeReportOutput: typeof import("./getDataSafeReport").getDataSafeReportOutput = null as any;
utilities.lazyLoad(exports, ["getDataSafeReport","getDataSafeReportOutput"], () => require("./getDataSafeReport"));

export { GetDataSafeReportContentArgs, GetDataSafeReportContentResult, GetDataSafeReportContentOutputArgs } from "./getDataSafeReportContent";
export const getDataSafeReportContent: typeof import("./getDataSafeReportContent").getDataSafeReportContent = null as any;
export const getDataSafeReportContentOutput: typeof import("./getDataSafeReportContent").getDataSafeReportContentOutput = null as any;
utilities.lazyLoad(exports, ["getDataSafeReportContent","getDataSafeReportContentOutput"], () => require("./getDataSafeReportContent"));

export { GetDataSafeReportDefinitionArgs, GetDataSafeReportDefinitionResult, GetDataSafeReportDefinitionOutputArgs } from "./getDataSafeReportDefinition";
export const getDataSafeReportDefinition: typeof import("./getDataSafeReportDefinition").getDataSafeReportDefinition = null as any;
export const getDataSafeReportDefinitionOutput: typeof import("./getDataSafeReportDefinition").getDataSafeReportDefinitionOutput = null as any;
utilities.lazyLoad(exports, ["getDataSafeReportDefinition","getDataSafeReportDefinitionOutput"], () => require("./getDataSafeReportDefinition"));

export { GetDataSafeReportDefinitionsArgs, GetDataSafeReportDefinitionsResult, GetDataSafeReportDefinitionsOutputArgs } from "./getDataSafeReportDefinitions";
export const getDataSafeReportDefinitions: typeof import("./getDataSafeReportDefinitions").getDataSafeReportDefinitions = null as any;
export const getDataSafeReportDefinitionsOutput: typeof import("./getDataSafeReportDefinitions").getDataSafeReportDefinitionsOutput = null as any;
utilities.lazyLoad(exports, ["getDataSafeReportDefinitions","getDataSafeReportDefinitionsOutput"], () => require("./getDataSafeReportDefinitions"));

export { GetDataSafeReportsArgs, GetDataSafeReportsResult, GetDataSafeReportsOutputArgs } from "./getDataSafeReports";
export const getDataSafeReports: typeof import("./getDataSafeReports").getDataSafeReports = null as any;
export const getDataSafeReportsOutput: typeof import("./getDataSafeReports").getDataSafeReportsOutput = null as any;
utilities.lazyLoad(exports, ["getDataSafeReports","getDataSafeReportsOutput"], () => require("./getDataSafeReports"));

export { GetDataSafeSdmMaskingPolicyDifferenceArgs, GetDataSafeSdmMaskingPolicyDifferenceResult, GetDataSafeSdmMaskingPolicyDifferenceOutputArgs } from "./getDataSafeSdmMaskingPolicyDifference";
export const getDataSafeSdmMaskingPolicyDifference: typeof import("./getDataSafeSdmMaskingPolicyDifference").getDataSafeSdmMaskingPolicyDifference = null as any;
export const getDataSafeSdmMaskingPolicyDifferenceOutput: typeof import("./getDataSafeSdmMaskingPolicyDifference").getDataSafeSdmMaskingPolicyDifferenceOutput = null as any;
utilities.lazyLoad(exports, ["getDataSafeSdmMaskingPolicyDifference","getDataSafeSdmMaskingPolicyDifferenceOutput"], () => require("./getDataSafeSdmMaskingPolicyDifference"));

export { GetDataSafeSdmMaskingPolicyDifferenceDifferenceColumnArgs, GetDataSafeSdmMaskingPolicyDifferenceDifferenceColumnResult, GetDataSafeSdmMaskingPolicyDifferenceDifferenceColumnOutputArgs } from "./getDataSafeSdmMaskingPolicyDifferenceDifferenceColumn";
export const getDataSafeSdmMaskingPolicyDifferenceDifferenceColumn: typeof import("./getDataSafeSdmMaskingPolicyDifferenceDifferenceColumn").getDataSafeSdmMaskingPolicyDifferenceDifferenceColumn = null as any;
export const getDataSafeSdmMaskingPolicyDifferenceDifferenceColumnOutput: typeof import("./getDataSafeSdmMaskingPolicyDifferenceDifferenceColumn").getDataSafeSdmMaskingPolicyDifferenceDifferenceColumnOutput = null as any;
utilities.lazyLoad(exports, ["getDataSafeSdmMaskingPolicyDifferenceDifferenceColumn","getDataSafeSdmMaskingPolicyDifferenceDifferenceColumnOutput"], () => require("./getDataSafeSdmMaskingPolicyDifferenceDifferenceColumn"));

export { GetDataSafeSdmMaskingPolicyDifferenceDifferenceColumnsArgs, GetDataSafeSdmMaskingPolicyDifferenceDifferenceColumnsResult, GetDataSafeSdmMaskingPolicyDifferenceDifferenceColumnsOutputArgs } from "./getDataSafeSdmMaskingPolicyDifferenceDifferenceColumns";
export const getDataSafeSdmMaskingPolicyDifferenceDifferenceColumns: typeof import("./getDataSafeSdmMaskingPolicyDifferenceDifferenceColumns").getDataSafeSdmMaskingPolicyDifferenceDifferenceColumns = null as any;
export const getDataSafeSdmMaskingPolicyDifferenceDifferenceColumnsOutput: typeof import("./getDataSafeSdmMaskingPolicyDifferenceDifferenceColumns").getDataSafeSdmMaskingPolicyDifferenceDifferenceColumnsOutput = null as any;
utilities.lazyLoad(exports, ["getDataSafeSdmMaskingPolicyDifferenceDifferenceColumns","getDataSafeSdmMaskingPolicyDifferenceDifferenceColumnsOutput"], () => require("./getDataSafeSdmMaskingPolicyDifferenceDifferenceColumns"));

export { GetDataSafeSdmMaskingPolicyDifferencesArgs, GetDataSafeSdmMaskingPolicyDifferencesResult, GetDataSafeSdmMaskingPolicyDifferencesOutputArgs } from "./getDataSafeSdmMaskingPolicyDifferences";
export const getDataSafeSdmMaskingPolicyDifferences: typeof import("./getDataSafeSdmMaskingPolicyDifferences").getDataSafeSdmMaskingPolicyDifferences = null as any;
export const getDataSafeSdmMaskingPolicyDifferencesOutput: typeof import("./getDataSafeSdmMaskingPolicyDifferences").getDataSafeSdmMaskingPolicyDifferencesOutput = null as any;
utilities.lazyLoad(exports, ["getDataSafeSdmMaskingPolicyDifferences","getDataSafeSdmMaskingPolicyDifferencesOutput"], () => require("./getDataSafeSdmMaskingPolicyDifferences"));

export { GetDataSafeSecurityAssessmentArgs, GetDataSafeSecurityAssessmentResult, GetDataSafeSecurityAssessmentOutputArgs } from "./getDataSafeSecurityAssessment";
export const getDataSafeSecurityAssessment: typeof import("./getDataSafeSecurityAssessment").getDataSafeSecurityAssessment = null as any;
export const getDataSafeSecurityAssessmentOutput: typeof import("./getDataSafeSecurityAssessment").getDataSafeSecurityAssessmentOutput = null as any;
utilities.lazyLoad(exports, ["getDataSafeSecurityAssessment","getDataSafeSecurityAssessmentOutput"], () => require("./getDataSafeSecurityAssessment"));

export { GetDataSafeSecurityAssessmentComparisonArgs, GetDataSafeSecurityAssessmentComparisonResult, GetDataSafeSecurityAssessmentComparisonOutputArgs } from "./getDataSafeSecurityAssessmentComparison";
export const getDataSafeSecurityAssessmentComparison: typeof import("./getDataSafeSecurityAssessmentComparison").getDataSafeSecurityAssessmentComparison = null as any;
export const getDataSafeSecurityAssessmentComparisonOutput: typeof import("./getDataSafeSecurityAssessmentComparison").getDataSafeSecurityAssessmentComparisonOutput = null as any;
utilities.lazyLoad(exports, ["getDataSafeSecurityAssessmentComparison","getDataSafeSecurityAssessmentComparisonOutput"], () => require("./getDataSafeSecurityAssessmentComparison"));

export { GetDataSafeSecurityAssessmentFindingArgs, GetDataSafeSecurityAssessmentFindingResult, GetDataSafeSecurityAssessmentFindingOutputArgs } from "./getDataSafeSecurityAssessmentFinding";
export const getDataSafeSecurityAssessmentFinding: typeof import("./getDataSafeSecurityAssessmentFinding").getDataSafeSecurityAssessmentFinding = null as any;
export const getDataSafeSecurityAssessmentFindingOutput: typeof import("./getDataSafeSecurityAssessmentFinding").getDataSafeSecurityAssessmentFindingOutput = null as any;
utilities.lazyLoad(exports, ["getDataSafeSecurityAssessmentFinding","getDataSafeSecurityAssessmentFindingOutput"], () => require("./getDataSafeSecurityAssessmentFinding"));

export { GetDataSafeSecurityAssessmentFindingAnalyticsArgs, GetDataSafeSecurityAssessmentFindingAnalyticsResult, GetDataSafeSecurityAssessmentFindingAnalyticsOutputArgs } from "./getDataSafeSecurityAssessmentFindingAnalytics";
export const getDataSafeSecurityAssessmentFindingAnalytics: typeof import("./getDataSafeSecurityAssessmentFindingAnalytics").getDataSafeSecurityAssessmentFindingAnalytics = null as any;
export const getDataSafeSecurityAssessmentFindingAnalyticsOutput: typeof import("./getDataSafeSecurityAssessmentFindingAnalytics").getDataSafeSecurityAssessmentFindingAnalyticsOutput = null as any;
utilities.lazyLoad(exports, ["getDataSafeSecurityAssessmentFindingAnalytics","getDataSafeSecurityAssessmentFindingAnalyticsOutput"], () => require("./getDataSafeSecurityAssessmentFindingAnalytics"));

export { GetDataSafeSecurityAssessmentFindingsArgs, GetDataSafeSecurityAssessmentFindingsResult, GetDataSafeSecurityAssessmentFindingsOutputArgs } from "./getDataSafeSecurityAssessmentFindings";
export const getDataSafeSecurityAssessmentFindings: typeof import("./getDataSafeSecurityAssessmentFindings").getDataSafeSecurityAssessmentFindings = null as any;
export const getDataSafeSecurityAssessmentFindingsOutput: typeof import("./getDataSafeSecurityAssessmentFindings").getDataSafeSecurityAssessmentFindingsOutput = null as any;
utilities.lazyLoad(exports, ["getDataSafeSecurityAssessmentFindings","getDataSafeSecurityAssessmentFindingsOutput"], () => require("./getDataSafeSecurityAssessmentFindings"));

export { GetDataSafeSecurityAssessmentFindingsChangeAuditLogsArgs, GetDataSafeSecurityAssessmentFindingsChangeAuditLogsResult, GetDataSafeSecurityAssessmentFindingsChangeAuditLogsOutputArgs } from "./getDataSafeSecurityAssessmentFindingsChangeAuditLogs";
export const getDataSafeSecurityAssessmentFindingsChangeAuditLogs: typeof import("./getDataSafeSecurityAssessmentFindingsChangeAuditLogs").getDataSafeSecurityAssessmentFindingsChangeAuditLogs = null as any;
export const getDataSafeSecurityAssessmentFindingsChangeAuditLogsOutput: typeof import("./getDataSafeSecurityAssessmentFindingsChangeAuditLogs").getDataSafeSecurityAssessmentFindingsChangeAuditLogsOutput = null as any;
utilities.lazyLoad(exports, ["getDataSafeSecurityAssessmentFindingsChangeAuditLogs","getDataSafeSecurityAssessmentFindingsChangeAuditLogsOutput"], () => require("./getDataSafeSecurityAssessmentFindingsChangeAuditLogs"));

export { GetDataSafeSecurityAssessmentSecurityFeatureAnalyticsArgs, GetDataSafeSecurityAssessmentSecurityFeatureAnalyticsResult, GetDataSafeSecurityAssessmentSecurityFeatureAnalyticsOutputArgs } from "./getDataSafeSecurityAssessmentSecurityFeatureAnalytics";
export const getDataSafeSecurityAssessmentSecurityFeatureAnalytics: typeof import("./getDataSafeSecurityAssessmentSecurityFeatureAnalytics").getDataSafeSecurityAssessmentSecurityFeatureAnalytics = null as any;
export const getDataSafeSecurityAssessmentSecurityFeatureAnalyticsOutput: typeof import("./getDataSafeSecurityAssessmentSecurityFeatureAnalytics").getDataSafeSecurityAssessmentSecurityFeatureAnalyticsOutput = null as any;
utilities.lazyLoad(exports, ["getDataSafeSecurityAssessmentSecurityFeatureAnalytics","getDataSafeSecurityAssessmentSecurityFeatureAnalyticsOutput"], () => require("./getDataSafeSecurityAssessmentSecurityFeatureAnalytics"));

export { GetDataSafeSecurityAssessmentSecurityFeaturesArgs, GetDataSafeSecurityAssessmentSecurityFeaturesResult, GetDataSafeSecurityAssessmentSecurityFeaturesOutputArgs } from "./getDataSafeSecurityAssessmentSecurityFeatures";
export const getDataSafeSecurityAssessmentSecurityFeatures: typeof import("./getDataSafeSecurityAssessmentSecurityFeatures").getDataSafeSecurityAssessmentSecurityFeatures = null as any;
export const getDataSafeSecurityAssessmentSecurityFeaturesOutput: typeof import("./getDataSafeSecurityAssessmentSecurityFeatures").getDataSafeSecurityAssessmentSecurityFeaturesOutput = null as any;
utilities.lazyLoad(exports, ["getDataSafeSecurityAssessmentSecurityFeatures","getDataSafeSecurityAssessmentSecurityFeaturesOutput"], () => require("./getDataSafeSecurityAssessmentSecurityFeatures"));

export { GetDataSafeSecurityAssessmentsArgs, GetDataSafeSecurityAssessmentsResult, GetDataSafeSecurityAssessmentsOutputArgs } from "./getDataSafeSecurityAssessments";
export const getDataSafeSecurityAssessments: typeof import("./getDataSafeSecurityAssessments").getDataSafeSecurityAssessments = null as any;
export const getDataSafeSecurityAssessmentsOutput: typeof import("./getDataSafeSecurityAssessments").getDataSafeSecurityAssessmentsOutput = null as any;
utilities.lazyLoad(exports, ["getDataSafeSecurityAssessments","getDataSafeSecurityAssessmentsOutput"], () => require("./getDataSafeSecurityAssessments"));

export { GetDataSafeSecurityPoliciesArgs, GetDataSafeSecurityPoliciesResult, GetDataSafeSecurityPoliciesOutputArgs } from "./getDataSafeSecurityPolicies";
export const getDataSafeSecurityPolicies: typeof import("./getDataSafeSecurityPolicies").getDataSafeSecurityPolicies = null as any;
export const getDataSafeSecurityPoliciesOutput: typeof import("./getDataSafeSecurityPolicies").getDataSafeSecurityPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getDataSafeSecurityPolicies","getDataSafeSecurityPoliciesOutput"], () => require("./getDataSafeSecurityPolicies"));

export { GetDataSafeSecurityPolicyArgs, GetDataSafeSecurityPolicyResult, GetDataSafeSecurityPolicyOutputArgs } from "./getDataSafeSecurityPolicy";
export const getDataSafeSecurityPolicy: typeof import("./getDataSafeSecurityPolicy").getDataSafeSecurityPolicy = null as any;
export const getDataSafeSecurityPolicyOutput: typeof import("./getDataSafeSecurityPolicy").getDataSafeSecurityPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getDataSafeSecurityPolicy","getDataSafeSecurityPolicyOutput"], () => require("./getDataSafeSecurityPolicy"));

export { GetDataSafeSecurityPolicyDeploymentArgs, GetDataSafeSecurityPolicyDeploymentResult, GetDataSafeSecurityPolicyDeploymentOutputArgs } from "./getDataSafeSecurityPolicyDeployment";
export const getDataSafeSecurityPolicyDeployment: typeof import("./getDataSafeSecurityPolicyDeployment").getDataSafeSecurityPolicyDeployment = null as any;
export const getDataSafeSecurityPolicyDeploymentOutput: typeof import("./getDataSafeSecurityPolicyDeployment").getDataSafeSecurityPolicyDeploymentOutput = null as any;
utilities.lazyLoad(exports, ["getDataSafeSecurityPolicyDeployment","getDataSafeSecurityPolicyDeploymentOutput"], () => require("./getDataSafeSecurityPolicyDeployment"));

export { GetDataSafeSecurityPolicyDeploymentSecurityPolicyEntryStateArgs, GetDataSafeSecurityPolicyDeploymentSecurityPolicyEntryStateResult, GetDataSafeSecurityPolicyDeploymentSecurityPolicyEntryStateOutputArgs } from "./getDataSafeSecurityPolicyDeploymentSecurityPolicyEntryState";
export const getDataSafeSecurityPolicyDeploymentSecurityPolicyEntryState: typeof import("./getDataSafeSecurityPolicyDeploymentSecurityPolicyEntryState").getDataSafeSecurityPolicyDeploymentSecurityPolicyEntryState = null as any;
export const getDataSafeSecurityPolicyDeploymentSecurityPolicyEntryStateOutput: typeof import("./getDataSafeSecurityPolicyDeploymentSecurityPolicyEntryState").getDataSafeSecurityPolicyDeploymentSecurityPolicyEntryStateOutput = null as any;
utilities.lazyLoad(exports, ["getDataSafeSecurityPolicyDeploymentSecurityPolicyEntryState","getDataSafeSecurityPolicyDeploymentSecurityPolicyEntryStateOutput"], () => require("./getDataSafeSecurityPolicyDeploymentSecurityPolicyEntryState"));

export { GetDataSafeSecurityPolicyDeploymentSecurityPolicyEntryStatesArgs, GetDataSafeSecurityPolicyDeploymentSecurityPolicyEntryStatesResult, GetDataSafeSecurityPolicyDeploymentSecurityPolicyEntryStatesOutputArgs } from "./getDataSafeSecurityPolicyDeploymentSecurityPolicyEntryStates";
export const getDataSafeSecurityPolicyDeploymentSecurityPolicyEntryStates: typeof import("./getDataSafeSecurityPolicyDeploymentSecurityPolicyEntryStates").getDataSafeSecurityPolicyDeploymentSecurityPolicyEntryStates = null as any;
export const getDataSafeSecurityPolicyDeploymentSecurityPolicyEntryStatesOutput: typeof import("./getDataSafeSecurityPolicyDeploymentSecurityPolicyEntryStates").getDataSafeSecurityPolicyDeploymentSecurityPolicyEntryStatesOutput = null as any;
utilities.lazyLoad(exports, ["getDataSafeSecurityPolicyDeploymentSecurityPolicyEntryStates","getDataSafeSecurityPolicyDeploymentSecurityPolicyEntryStatesOutput"], () => require("./getDataSafeSecurityPolicyDeploymentSecurityPolicyEntryStates"));

export { GetDataSafeSecurityPolicyDeploymentsArgs, GetDataSafeSecurityPolicyDeploymentsResult, GetDataSafeSecurityPolicyDeploymentsOutputArgs } from "./getDataSafeSecurityPolicyDeployments";
export const getDataSafeSecurityPolicyDeployments: typeof import("./getDataSafeSecurityPolicyDeployments").getDataSafeSecurityPolicyDeployments = null as any;
export const getDataSafeSecurityPolicyDeploymentsOutput: typeof import("./getDataSafeSecurityPolicyDeployments").getDataSafeSecurityPolicyDeploymentsOutput = null as any;
utilities.lazyLoad(exports, ["getDataSafeSecurityPolicyDeployments","getDataSafeSecurityPolicyDeploymentsOutput"], () => require("./getDataSafeSecurityPolicyDeployments"));

export { GetDataSafeSecurityPolicyReportArgs, GetDataSafeSecurityPolicyReportResult, GetDataSafeSecurityPolicyReportOutputArgs } from "./getDataSafeSecurityPolicyReport";
export const getDataSafeSecurityPolicyReport: typeof import("./getDataSafeSecurityPolicyReport").getDataSafeSecurityPolicyReport = null as any;
export const getDataSafeSecurityPolicyReportOutput: typeof import("./getDataSafeSecurityPolicyReport").getDataSafeSecurityPolicyReportOutput = null as any;
utilities.lazyLoad(exports, ["getDataSafeSecurityPolicyReport","getDataSafeSecurityPolicyReportOutput"], () => require("./getDataSafeSecurityPolicyReport"));

export { GetDataSafeSecurityPolicyReportDatabaseTableAccessEntriesArgs, GetDataSafeSecurityPolicyReportDatabaseTableAccessEntriesResult, GetDataSafeSecurityPolicyReportDatabaseTableAccessEntriesOutputArgs } from "./getDataSafeSecurityPolicyReportDatabaseTableAccessEntries";
export const getDataSafeSecurityPolicyReportDatabaseTableAccessEntries: typeof import("./getDataSafeSecurityPolicyReportDatabaseTableAccessEntries").getDataSafeSecurityPolicyReportDatabaseTableAccessEntries = null as any;
export const getDataSafeSecurityPolicyReportDatabaseTableAccessEntriesOutput: typeof import("./getDataSafeSecurityPolicyReportDatabaseTableAccessEntries").getDataSafeSecurityPolicyReportDatabaseTableAccessEntriesOutput = null as any;
utilities.lazyLoad(exports, ["getDataSafeSecurityPolicyReportDatabaseTableAccessEntries","getDataSafeSecurityPolicyReportDatabaseTableAccessEntriesOutput"], () => require("./getDataSafeSecurityPolicyReportDatabaseTableAccessEntries"));

export { GetDataSafeSecurityPolicyReportDatabaseTableAccessEntryArgs, GetDataSafeSecurityPolicyReportDatabaseTableAccessEntryResult, GetDataSafeSecurityPolicyReportDatabaseTableAccessEntryOutputArgs } from "./getDataSafeSecurityPolicyReportDatabaseTableAccessEntry";
export const getDataSafeSecurityPolicyReportDatabaseTableAccessEntry: typeof import("./getDataSafeSecurityPolicyReportDatabaseTableAccessEntry").getDataSafeSecurityPolicyReportDatabaseTableAccessEntry = null as any;
export const getDataSafeSecurityPolicyReportDatabaseTableAccessEntryOutput: typeof import("./getDataSafeSecurityPolicyReportDatabaseTableAccessEntry").getDataSafeSecurityPolicyReportDatabaseTableAccessEntryOutput = null as any;
utilities.lazyLoad(exports, ["getDataSafeSecurityPolicyReportDatabaseTableAccessEntry","getDataSafeSecurityPolicyReportDatabaseTableAccessEntryOutput"], () => require("./getDataSafeSecurityPolicyReportDatabaseTableAccessEntry"));

export { GetDataSafeSecurityPolicyReportDatabaseViewAccessEntriesArgs, GetDataSafeSecurityPolicyReportDatabaseViewAccessEntriesResult, GetDataSafeSecurityPolicyReportDatabaseViewAccessEntriesOutputArgs } from "./getDataSafeSecurityPolicyReportDatabaseViewAccessEntries";
export const getDataSafeSecurityPolicyReportDatabaseViewAccessEntries: typeof import("./getDataSafeSecurityPolicyReportDatabaseViewAccessEntries").getDataSafeSecurityPolicyReportDatabaseViewAccessEntries = null as any;
export const getDataSafeSecurityPolicyReportDatabaseViewAccessEntriesOutput: typeof import("./getDataSafeSecurityPolicyReportDatabaseViewAccessEntries").getDataSafeSecurityPolicyReportDatabaseViewAccessEntriesOutput = null as any;
utilities.lazyLoad(exports, ["getDataSafeSecurityPolicyReportDatabaseViewAccessEntries","getDataSafeSecurityPolicyReportDatabaseViewAccessEntriesOutput"], () => require("./getDataSafeSecurityPolicyReportDatabaseViewAccessEntries"));

export { GetDataSafeSecurityPolicyReportDatabaseViewAccessEntryArgs, GetDataSafeSecurityPolicyReportDatabaseViewAccessEntryResult, GetDataSafeSecurityPolicyReportDatabaseViewAccessEntryOutputArgs } from "./getDataSafeSecurityPolicyReportDatabaseViewAccessEntry";
export const getDataSafeSecurityPolicyReportDatabaseViewAccessEntry: typeof import("./getDataSafeSecurityPolicyReportDatabaseViewAccessEntry").getDataSafeSecurityPolicyReportDatabaseViewAccessEntry = null as any;
export const getDataSafeSecurityPolicyReportDatabaseViewAccessEntryOutput: typeof import("./getDataSafeSecurityPolicyReportDatabaseViewAccessEntry").getDataSafeSecurityPolicyReportDatabaseViewAccessEntryOutput = null as any;
utilities.lazyLoad(exports, ["getDataSafeSecurityPolicyReportDatabaseViewAccessEntry","getDataSafeSecurityPolicyReportDatabaseViewAccessEntryOutput"], () => require("./getDataSafeSecurityPolicyReportDatabaseViewAccessEntry"));

export { GetDataSafeSecurityPolicyReportRoleGrantPathsArgs, GetDataSafeSecurityPolicyReportRoleGrantPathsResult, GetDataSafeSecurityPolicyReportRoleGrantPathsOutputArgs } from "./getDataSafeSecurityPolicyReportRoleGrantPaths";
export const getDataSafeSecurityPolicyReportRoleGrantPaths: typeof import("./getDataSafeSecurityPolicyReportRoleGrantPaths").getDataSafeSecurityPolicyReportRoleGrantPaths = null as any;
export const getDataSafeSecurityPolicyReportRoleGrantPathsOutput: typeof import("./getDataSafeSecurityPolicyReportRoleGrantPaths").getDataSafeSecurityPolicyReportRoleGrantPathsOutput = null as any;
utilities.lazyLoad(exports, ["getDataSafeSecurityPolicyReportRoleGrantPaths","getDataSafeSecurityPolicyReportRoleGrantPathsOutput"], () => require("./getDataSafeSecurityPolicyReportRoleGrantPaths"));

export { GetDataSafeSecurityPolicyReportsArgs, GetDataSafeSecurityPolicyReportsResult, GetDataSafeSecurityPolicyReportsOutputArgs } from "./getDataSafeSecurityPolicyReports";
export const getDataSafeSecurityPolicyReports: typeof import("./getDataSafeSecurityPolicyReports").getDataSafeSecurityPolicyReports = null as any;
export const getDataSafeSecurityPolicyReportsOutput: typeof import("./getDataSafeSecurityPolicyReports").getDataSafeSecurityPolicyReportsOutput = null as any;
utilities.lazyLoad(exports, ["getDataSafeSecurityPolicyReports","getDataSafeSecurityPolicyReportsOutput"], () => require("./getDataSafeSecurityPolicyReports"));

export { GetDataSafeSensitiveDataModelArgs, GetDataSafeSensitiveDataModelResult, GetDataSafeSensitiveDataModelOutputArgs } from "./getDataSafeSensitiveDataModel";
export const getDataSafeSensitiveDataModel: typeof import("./getDataSafeSensitiveDataModel").getDataSafeSensitiveDataModel = null as any;
export const getDataSafeSensitiveDataModelOutput: typeof import("./getDataSafeSensitiveDataModel").getDataSafeSensitiveDataModelOutput = null as any;
utilities.lazyLoad(exports, ["getDataSafeSensitiveDataModel","getDataSafeSensitiveDataModelOutput"], () => require("./getDataSafeSensitiveDataModel"));

export { GetDataSafeSensitiveDataModelSensitiveObjectsArgs, GetDataSafeSensitiveDataModelSensitiveObjectsResult, GetDataSafeSensitiveDataModelSensitiveObjectsOutputArgs } from "./getDataSafeSensitiveDataModelSensitiveObjects";
export const getDataSafeSensitiveDataModelSensitiveObjects: typeof import("./getDataSafeSensitiveDataModelSensitiveObjects").getDataSafeSensitiveDataModelSensitiveObjects = null as any;
export const getDataSafeSensitiveDataModelSensitiveObjectsOutput: typeof import("./getDataSafeSensitiveDataModelSensitiveObjects").getDataSafeSensitiveDataModelSensitiveObjectsOutput = null as any;
utilities.lazyLoad(exports, ["getDataSafeSensitiveDataModelSensitiveObjects","getDataSafeSensitiveDataModelSensitiveObjectsOutput"], () => require("./getDataSafeSensitiveDataModelSensitiveObjects"));

export { GetDataSafeSensitiveDataModelSensitiveSchemasArgs, GetDataSafeSensitiveDataModelSensitiveSchemasResult, GetDataSafeSensitiveDataModelSensitiveSchemasOutputArgs } from "./getDataSafeSensitiveDataModelSensitiveSchemas";
export const getDataSafeSensitiveDataModelSensitiveSchemas: typeof import("./getDataSafeSensitiveDataModelSensitiveSchemas").getDataSafeSensitiveDataModelSensitiveSchemas = null as any;
export const getDataSafeSensitiveDataModelSensitiveSchemasOutput: typeof import("./getDataSafeSensitiveDataModelSensitiveSchemas").getDataSafeSensitiveDataModelSensitiveSchemasOutput = null as any;
utilities.lazyLoad(exports, ["getDataSafeSensitiveDataModelSensitiveSchemas","getDataSafeSensitiveDataModelSensitiveSchemasOutput"], () => require("./getDataSafeSensitiveDataModelSensitiveSchemas"));

export { GetDataSafeSensitiveDataModelSensitiveTypesArgs, GetDataSafeSensitiveDataModelSensitiveTypesResult, GetDataSafeSensitiveDataModelSensitiveTypesOutputArgs } from "./getDataSafeSensitiveDataModelSensitiveTypes";
export const getDataSafeSensitiveDataModelSensitiveTypes: typeof import("./getDataSafeSensitiveDataModelSensitiveTypes").getDataSafeSensitiveDataModelSensitiveTypes = null as any;
export const getDataSafeSensitiveDataModelSensitiveTypesOutput: typeof import("./getDataSafeSensitiveDataModelSensitiveTypes").getDataSafeSensitiveDataModelSensitiveTypesOutput = null as any;
utilities.lazyLoad(exports, ["getDataSafeSensitiveDataModelSensitiveTypes","getDataSafeSensitiveDataModelSensitiveTypesOutput"], () => require("./getDataSafeSensitiveDataModelSensitiveTypes"));

export { GetDataSafeSensitiveDataModelsArgs, GetDataSafeSensitiveDataModelsResult, GetDataSafeSensitiveDataModelsOutputArgs } from "./getDataSafeSensitiveDataModels";
export const getDataSafeSensitiveDataModels: typeof import("./getDataSafeSensitiveDataModels").getDataSafeSensitiveDataModels = null as any;
export const getDataSafeSensitiveDataModelsOutput: typeof import("./getDataSafeSensitiveDataModels").getDataSafeSensitiveDataModelsOutput = null as any;
utilities.lazyLoad(exports, ["getDataSafeSensitiveDataModels","getDataSafeSensitiveDataModelsOutput"], () => require("./getDataSafeSensitiveDataModels"));

export { GetDataSafeSensitiveDataModelsSensitiveColumnArgs, GetDataSafeSensitiveDataModelsSensitiveColumnResult, GetDataSafeSensitiveDataModelsSensitiveColumnOutputArgs } from "./getDataSafeSensitiveDataModelsSensitiveColumn";
export const getDataSafeSensitiveDataModelsSensitiveColumn: typeof import("./getDataSafeSensitiveDataModelsSensitiveColumn").getDataSafeSensitiveDataModelsSensitiveColumn = null as any;
export const getDataSafeSensitiveDataModelsSensitiveColumnOutput: typeof import("./getDataSafeSensitiveDataModelsSensitiveColumn").getDataSafeSensitiveDataModelsSensitiveColumnOutput = null as any;
utilities.lazyLoad(exports, ["getDataSafeSensitiveDataModelsSensitiveColumn","getDataSafeSensitiveDataModelsSensitiveColumnOutput"], () => require("./getDataSafeSensitiveDataModelsSensitiveColumn"));

export { GetDataSafeSensitiveDataModelsSensitiveColumnsArgs, GetDataSafeSensitiveDataModelsSensitiveColumnsResult, GetDataSafeSensitiveDataModelsSensitiveColumnsOutputArgs } from "./getDataSafeSensitiveDataModelsSensitiveColumns";
export const getDataSafeSensitiveDataModelsSensitiveColumns: typeof import("./getDataSafeSensitiveDataModelsSensitiveColumns").getDataSafeSensitiveDataModelsSensitiveColumns = null as any;
export const getDataSafeSensitiveDataModelsSensitiveColumnsOutput: typeof import("./getDataSafeSensitiveDataModelsSensitiveColumns").getDataSafeSensitiveDataModelsSensitiveColumnsOutput = null as any;
utilities.lazyLoad(exports, ["getDataSafeSensitiveDataModelsSensitiveColumns","getDataSafeSensitiveDataModelsSensitiveColumnsOutput"], () => require("./getDataSafeSensitiveDataModelsSensitiveColumns"));

export { GetDataSafeSensitiveTypeArgs, GetDataSafeSensitiveTypeResult, GetDataSafeSensitiveTypeOutputArgs } from "./getDataSafeSensitiveType";
export const getDataSafeSensitiveType: typeof import("./getDataSafeSensitiveType").getDataSafeSensitiveType = null as any;
export const getDataSafeSensitiveTypeOutput: typeof import("./getDataSafeSensitiveType").getDataSafeSensitiveTypeOutput = null as any;
utilities.lazyLoad(exports, ["getDataSafeSensitiveType","getDataSafeSensitiveTypeOutput"], () => require("./getDataSafeSensitiveType"));

export { GetDataSafeSensitiveTypesArgs, GetDataSafeSensitiveTypesResult, GetDataSafeSensitiveTypesOutputArgs } from "./getDataSafeSensitiveTypes";
export const getDataSafeSensitiveTypes: typeof import("./getDataSafeSensitiveTypes").getDataSafeSensitiveTypes = null as any;
export const getDataSafeSensitiveTypesOutput: typeof import("./getDataSafeSensitiveTypes").getDataSafeSensitiveTypesOutput = null as any;
utilities.lazyLoad(exports, ["getDataSafeSensitiveTypes","getDataSafeSensitiveTypesOutput"], () => require("./getDataSafeSensitiveTypes"));

export { GetDataSafeTargetAlertPolicyAssociationArgs, GetDataSafeTargetAlertPolicyAssociationResult, GetDataSafeTargetAlertPolicyAssociationOutputArgs } from "./getDataSafeTargetAlertPolicyAssociation";
export const getDataSafeTargetAlertPolicyAssociation: typeof import("./getDataSafeTargetAlertPolicyAssociation").getDataSafeTargetAlertPolicyAssociation = null as any;
export const getDataSafeTargetAlertPolicyAssociationOutput: typeof import("./getDataSafeTargetAlertPolicyAssociation").getDataSafeTargetAlertPolicyAssociationOutput = null as any;
utilities.lazyLoad(exports, ["getDataSafeTargetAlertPolicyAssociation","getDataSafeTargetAlertPolicyAssociationOutput"], () => require("./getDataSafeTargetAlertPolicyAssociation"));

export { GetDataSafeTargetAlertPolicyAssociationsArgs, GetDataSafeTargetAlertPolicyAssociationsResult, GetDataSafeTargetAlertPolicyAssociationsOutputArgs } from "./getDataSafeTargetAlertPolicyAssociations";
export const getDataSafeTargetAlertPolicyAssociations: typeof import("./getDataSafeTargetAlertPolicyAssociations").getDataSafeTargetAlertPolicyAssociations = null as any;
export const getDataSafeTargetAlertPolicyAssociationsOutput: typeof import("./getDataSafeTargetAlertPolicyAssociations").getDataSafeTargetAlertPolicyAssociationsOutput = null as any;
utilities.lazyLoad(exports, ["getDataSafeTargetAlertPolicyAssociations","getDataSafeTargetAlertPolicyAssociationsOutput"], () => require("./getDataSafeTargetAlertPolicyAssociations"));

export { GetDataSafeTargetDatabaseArgs, GetDataSafeTargetDatabaseResult, GetDataSafeTargetDatabaseOutputArgs } from "./getDataSafeTargetDatabase";
export const getDataSafeTargetDatabase: typeof import("./getDataSafeTargetDatabase").getDataSafeTargetDatabase = null as any;
export const getDataSafeTargetDatabaseOutput: typeof import("./getDataSafeTargetDatabase").getDataSafeTargetDatabaseOutput = null as any;
utilities.lazyLoad(exports, ["getDataSafeTargetDatabase","getDataSafeTargetDatabaseOutput"], () => require("./getDataSafeTargetDatabase"));

export { GetDataSafeTargetDatabasePeerTargetDatabaseArgs, GetDataSafeTargetDatabasePeerTargetDatabaseResult, GetDataSafeTargetDatabasePeerTargetDatabaseOutputArgs } from "./getDataSafeTargetDatabasePeerTargetDatabase";
export const getDataSafeTargetDatabasePeerTargetDatabase: typeof import("./getDataSafeTargetDatabasePeerTargetDatabase").getDataSafeTargetDatabasePeerTargetDatabase = null as any;
export const getDataSafeTargetDatabasePeerTargetDatabaseOutput: typeof import("./getDataSafeTargetDatabasePeerTargetDatabase").getDataSafeTargetDatabasePeerTargetDatabaseOutput = null as any;
utilities.lazyLoad(exports, ["getDataSafeTargetDatabasePeerTargetDatabase","getDataSafeTargetDatabasePeerTargetDatabaseOutput"], () => require("./getDataSafeTargetDatabasePeerTargetDatabase"));

export { GetDataSafeTargetDatabasePeerTargetDatabasesArgs, GetDataSafeTargetDatabasePeerTargetDatabasesResult, GetDataSafeTargetDatabasePeerTargetDatabasesOutputArgs } from "./getDataSafeTargetDatabasePeerTargetDatabases";
export const getDataSafeTargetDatabasePeerTargetDatabases: typeof import("./getDataSafeTargetDatabasePeerTargetDatabases").getDataSafeTargetDatabasePeerTargetDatabases = null as any;
export const getDataSafeTargetDatabasePeerTargetDatabasesOutput: typeof import("./getDataSafeTargetDatabasePeerTargetDatabases").getDataSafeTargetDatabasePeerTargetDatabasesOutput = null as any;
utilities.lazyLoad(exports, ["getDataSafeTargetDatabasePeerTargetDatabases","getDataSafeTargetDatabasePeerTargetDatabasesOutput"], () => require("./getDataSafeTargetDatabasePeerTargetDatabases"));

export { GetDataSafeTargetDatabaseRoleArgs, GetDataSafeTargetDatabaseRoleResult, GetDataSafeTargetDatabaseRoleOutputArgs } from "./getDataSafeTargetDatabaseRole";
export const getDataSafeTargetDatabaseRole: typeof import("./getDataSafeTargetDatabaseRole").getDataSafeTargetDatabaseRole = null as any;
export const getDataSafeTargetDatabaseRoleOutput: typeof import("./getDataSafeTargetDatabaseRole").getDataSafeTargetDatabaseRoleOutput = null as any;
utilities.lazyLoad(exports, ["getDataSafeTargetDatabaseRole","getDataSafeTargetDatabaseRoleOutput"], () => require("./getDataSafeTargetDatabaseRole"));

export { GetDataSafeTargetDatabaseRolesArgs, GetDataSafeTargetDatabaseRolesResult, GetDataSafeTargetDatabaseRolesOutputArgs } from "./getDataSafeTargetDatabaseRoles";
export const getDataSafeTargetDatabaseRoles: typeof import("./getDataSafeTargetDatabaseRoles").getDataSafeTargetDatabaseRoles = null as any;
export const getDataSafeTargetDatabaseRolesOutput: typeof import("./getDataSafeTargetDatabaseRoles").getDataSafeTargetDatabaseRolesOutput = null as any;
utilities.lazyLoad(exports, ["getDataSafeTargetDatabaseRoles","getDataSafeTargetDatabaseRolesOutput"], () => require("./getDataSafeTargetDatabaseRoles"));

export { GetDataSafeTargetDatabasesArgs, GetDataSafeTargetDatabasesResult, GetDataSafeTargetDatabasesOutputArgs } from "./getDataSafeTargetDatabases";
export const getDataSafeTargetDatabases: typeof import("./getDataSafeTargetDatabases").getDataSafeTargetDatabases = null as any;
export const getDataSafeTargetDatabasesOutput: typeof import("./getDataSafeTargetDatabases").getDataSafeTargetDatabasesOutput = null as any;
utilities.lazyLoad(exports, ["getDataSafeTargetDatabases","getDataSafeTargetDatabasesOutput"], () => require("./getDataSafeTargetDatabases"));

export { GetDataSafeTargetDatabasesColumnsArgs, GetDataSafeTargetDatabasesColumnsResult, GetDataSafeTargetDatabasesColumnsOutputArgs } from "./getDataSafeTargetDatabasesColumns";
export const getDataSafeTargetDatabasesColumns: typeof import("./getDataSafeTargetDatabasesColumns").getDataSafeTargetDatabasesColumns = null as any;
export const getDataSafeTargetDatabasesColumnsOutput: typeof import("./getDataSafeTargetDatabasesColumns").getDataSafeTargetDatabasesColumnsOutput = null as any;
utilities.lazyLoad(exports, ["getDataSafeTargetDatabasesColumns","getDataSafeTargetDatabasesColumnsOutput"], () => require("./getDataSafeTargetDatabasesColumns"));

export { GetDataSafeTargetDatabasesSchemasArgs, GetDataSafeTargetDatabasesSchemasResult, GetDataSafeTargetDatabasesSchemasOutputArgs } from "./getDataSafeTargetDatabasesSchemas";
export const getDataSafeTargetDatabasesSchemas: typeof import("./getDataSafeTargetDatabasesSchemas").getDataSafeTargetDatabasesSchemas = null as any;
export const getDataSafeTargetDatabasesSchemasOutput: typeof import("./getDataSafeTargetDatabasesSchemas").getDataSafeTargetDatabasesSchemasOutput = null as any;
utilities.lazyLoad(exports, ["getDataSafeTargetDatabasesSchemas","getDataSafeTargetDatabasesSchemasOutput"], () => require("./getDataSafeTargetDatabasesSchemas"));

export { GetDataSafeTargetDatabasesTablesArgs, GetDataSafeTargetDatabasesTablesResult, GetDataSafeTargetDatabasesTablesOutputArgs } from "./getDataSafeTargetDatabasesTables";
export const getDataSafeTargetDatabasesTables: typeof import("./getDataSafeTargetDatabasesTables").getDataSafeTargetDatabasesTables = null as any;
export const getDataSafeTargetDatabasesTablesOutput: typeof import("./getDataSafeTargetDatabasesTables").getDataSafeTargetDatabasesTablesOutput = null as any;
utilities.lazyLoad(exports, ["getDataSafeTargetDatabasesTables","getDataSafeTargetDatabasesTablesOutput"], () => require("./getDataSafeTargetDatabasesTables"));

export { GetDataSafeUserAssessmentArgs, GetDataSafeUserAssessmentResult, GetDataSafeUserAssessmentOutputArgs } from "./getDataSafeUserAssessment";
export const getDataSafeUserAssessment: typeof import("./getDataSafeUserAssessment").getDataSafeUserAssessment = null as any;
export const getDataSafeUserAssessmentOutput: typeof import("./getDataSafeUserAssessment").getDataSafeUserAssessmentOutput = null as any;
utilities.lazyLoad(exports, ["getDataSafeUserAssessment","getDataSafeUserAssessmentOutput"], () => require("./getDataSafeUserAssessment"));

export { GetDataSafeUserAssessmentComparisonArgs, GetDataSafeUserAssessmentComparisonResult, GetDataSafeUserAssessmentComparisonOutputArgs } from "./getDataSafeUserAssessmentComparison";
export const getDataSafeUserAssessmentComparison: typeof import("./getDataSafeUserAssessmentComparison").getDataSafeUserAssessmentComparison = null as any;
export const getDataSafeUserAssessmentComparisonOutput: typeof import("./getDataSafeUserAssessmentComparison").getDataSafeUserAssessmentComparisonOutput = null as any;
utilities.lazyLoad(exports, ["getDataSafeUserAssessmentComparison","getDataSafeUserAssessmentComparisonOutput"], () => require("./getDataSafeUserAssessmentComparison"));

export { GetDataSafeUserAssessmentProfileAnalyticsArgs, GetDataSafeUserAssessmentProfileAnalyticsResult, GetDataSafeUserAssessmentProfileAnalyticsOutputArgs } from "./getDataSafeUserAssessmentProfileAnalytics";
export const getDataSafeUserAssessmentProfileAnalytics: typeof import("./getDataSafeUserAssessmentProfileAnalytics").getDataSafeUserAssessmentProfileAnalytics = null as any;
export const getDataSafeUserAssessmentProfileAnalyticsOutput: typeof import("./getDataSafeUserAssessmentProfileAnalytics").getDataSafeUserAssessmentProfileAnalyticsOutput = null as any;
utilities.lazyLoad(exports, ["getDataSafeUserAssessmentProfileAnalytics","getDataSafeUserAssessmentProfileAnalyticsOutput"], () => require("./getDataSafeUserAssessmentProfileAnalytics"));

export { GetDataSafeUserAssessmentProfilesArgs, GetDataSafeUserAssessmentProfilesResult, GetDataSafeUserAssessmentProfilesOutputArgs } from "./getDataSafeUserAssessmentProfiles";
export const getDataSafeUserAssessmentProfiles: typeof import("./getDataSafeUserAssessmentProfiles").getDataSafeUserAssessmentProfiles = null as any;
export const getDataSafeUserAssessmentProfilesOutput: typeof import("./getDataSafeUserAssessmentProfiles").getDataSafeUserAssessmentProfilesOutput = null as any;
utilities.lazyLoad(exports, ["getDataSafeUserAssessmentProfiles","getDataSafeUserAssessmentProfilesOutput"], () => require("./getDataSafeUserAssessmentProfiles"));

export { GetDataSafeUserAssessmentUserAccessAnalyticsArgs, GetDataSafeUserAssessmentUserAccessAnalyticsResult, GetDataSafeUserAssessmentUserAccessAnalyticsOutputArgs } from "./getDataSafeUserAssessmentUserAccessAnalytics";
export const getDataSafeUserAssessmentUserAccessAnalytics: typeof import("./getDataSafeUserAssessmentUserAccessAnalytics").getDataSafeUserAssessmentUserAccessAnalytics = null as any;
export const getDataSafeUserAssessmentUserAccessAnalyticsOutput: typeof import("./getDataSafeUserAssessmentUserAccessAnalytics").getDataSafeUserAssessmentUserAccessAnalyticsOutput = null as any;
utilities.lazyLoad(exports, ["getDataSafeUserAssessmentUserAccessAnalytics","getDataSafeUserAssessmentUserAccessAnalyticsOutput"], () => require("./getDataSafeUserAssessmentUserAccessAnalytics"));

export { GetDataSafeUserAssessmentUserAnalyticsArgs, GetDataSafeUserAssessmentUserAnalyticsResult, GetDataSafeUserAssessmentUserAnalyticsOutputArgs } from "./getDataSafeUserAssessmentUserAnalytics";
export const getDataSafeUserAssessmentUserAnalytics: typeof import("./getDataSafeUserAssessmentUserAnalytics").getDataSafeUserAssessmentUserAnalytics = null as any;
export const getDataSafeUserAssessmentUserAnalyticsOutput: typeof import("./getDataSafeUserAssessmentUserAnalytics").getDataSafeUserAssessmentUserAnalyticsOutput = null as any;
utilities.lazyLoad(exports, ["getDataSafeUserAssessmentUserAnalytics","getDataSafeUserAssessmentUserAnalyticsOutput"], () => require("./getDataSafeUserAssessmentUserAnalytics"));

export { GetDataSafeUserAssessmentUsersArgs, GetDataSafeUserAssessmentUsersResult, GetDataSafeUserAssessmentUsersOutputArgs } from "./getDataSafeUserAssessmentUsers";
export const getDataSafeUserAssessmentUsers: typeof import("./getDataSafeUserAssessmentUsers").getDataSafeUserAssessmentUsers = null as any;
export const getDataSafeUserAssessmentUsersOutput: typeof import("./getDataSafeUserAssessmentUsers").getDataSafeUserAssessmentUsersOutput = null as any;
utilities.lazyLoad(exports, ["getDataSafeUserAssessmentUsers","getDataSafeUserAssessmentUsersOutput"], () => require("./getDataSafeUserAssessmentUsers"));

export { GetDataSafeUserAssessmentsArgs, GetDataSafeUserAssessmentsResult, GetDataSafeUserAssessmentsOutputArgs } from "./getDataSafeUserAssessments";
export const getDataSafeUserAssessments: typeof import("./getDataSafeUserAssessments").getDataSafeUserAssessments = null as any;
export const getDataSafeUserAssessmentsOutput: typeof import("./getDataSafeUserAssessments").getDataSafeUserAssessmentsOutput = null as any;
utilities.lazyLoad(exports, ["getDataSafeUserAssessments","getDataSafeUserAssessmentsOutput"], () => require("./getDataSafeUserAssessments"));

export { GetDatabaseApplicationVipArgs, GetDatabaseApplicationVipResult, GetDatabaseApplicationVipOutputArgs } from "./getDatabaseApplicationVip";
export const getDatabaseApplicationVip: typeof import("./getDatabaseApplicationVip").getDatabaseApplicationVip = null as any;
export const getDatabaseApplicationVipOutput: typeof import("./getDatabaseApplicationVip").getDatabaseApplicationVipOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseApplicationVip","getDatabaseApplicationVipOutput"], () => require("./getDatabaseApplicationVip"));

export { GetDatabaseApplicationVipsArgs, GetDatabaseApplicationVipsResult, GetDatabaseApplicationVipsOutputArgs } from "./getDatabaseApplicationVips";
export const getDatabaseApplicationVips: typeof import("./getDatabaseApplicationVips").getDatabaseApplicationVips = null as any;
export const getDatabaseApplicationVipsOutput: typeof import("./getDatabaseApplicationVips").getDatabaseApplicationVipsOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseApplicationVips","getDatabaseApplicationVipsOutput"], () => require("./getDatabaseApplicationVips"));

export { GetDatabaseAutonomousContainerDatabaseArgs, GetDatabaseAutonomousContainerDatabaseResult, GetDatabaseAutonomousContainerDatabaseOutputArgs } from "./getDatabaseAutonomousContainerDatabase";
export const getDatabaseAutonomousContainerDatabase: typeof import("./getDatabaseAutonomousContainerDatabase").getDatabaseAutonomousContainerDatabase = null as any;
export const getDatabaseAutonomousContainerDatabaseOutput: typeof import("./getDatabaseAutonomousContainerDatabase").getDatabaseAutonomousContainerDatabaseOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseAutonomousContainerDatabase","getDatabaseAutonomousContainerDatabaseOutput"], () => require("./getDatabaseAutonomousContainerDatabase"));

export { GetDatabaseAutonomousContainerDatabaseDataguardAssociationArgs, GetDatabaseAutonomousContainerDatabaseDataguardAssociationResult, GetDatabaseAutonomousContainerDatabaseDataguardAssociationOutputArgs } from "./getDatabaseAutonomousContainerDatabaseDataguardAssociation";
export const getDatabaseAutonomousContainerDatabaseDataguardAssociation: typeof import("./getDatabaseAutonomousContainerDatabaseDataguardAssociation").getDatabaseAutonomousContainerDatabaseDataguardAssociation = null as any;
export const getDatabaseAutonomousContainerDatabaseDataguardAssociationOutput: typeof import("./getDatabaseAutonomousContainerDatabaseDataguardAssociation").getDatabaseAutonomousContainerDatabaseDataguardAssociationOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseAutonomousContainerDatabaseDataguardAssociation","getDatabaseAutonomousContainerDatabaseDataguardAssociationOutput"], () => require("./getDatabaseAutonomousContainerDatabaseDataguardAssociation"));

export { GetDatabaseAutonomousContainerDatabaseDataguardAssociationsArgs, GetDatabaseAutonomousContainerDatabaseDataguardAssociationsResult, GetDatabaseAutonomousContainerDatabaseDataguardAssociationsOutputArgs } from "./getDatabaseAutonomousContainerDatabaseDataguardAssociations";
export const getDatabaseAutonomousContainerDatabaseDataguardAssociations: typeof import("./getDatabaseAutonomousContainerDatabaseDataguardAssociations").getDatabaseAutonomousContainerDatabaseDataguardAssociations = null as any;
export const getDatabaseAutonomousContainerDatabaseDataguardAssociationsOutput: typeof import("./getDatabaseAutonomousContainerDatabaseDataguardAssociations").getDatabaseAutonomousContainerDatabaseDataguardAssociationsOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseAutonomousContainerDatabaseDataguardAssociations","getDatabaseAutonomousContainerDatabaseDataguardAssociationsOutput"], () => require("./getDatabaseAutonomousContainerDatabaseDataguardAssociations"));

export { GetDatabaseAutonomousContainerDatabaseResourceUsageArgs, GetDatabaseAutonomousContainerDatabaseResourceUsageResult, GetDatabaseAutonomousContainerDatabaseResourceUsageOutputArgs } from "./getDatabaseAutonomousContainerDatabaseResourceUsage";
export const getDatabaseAutonomousContainerDatabaseResourceUsage: typeof import("./getDatabaseAutonomousContainerDatabaseResourceUsage").getDatabaseAutonomousContainerDatabaseResourceUsage = null as any;
export const getDatabaseAutonomousContainerDatabaseResourceUsageOutput: typeof import("./getDatabaseAutonomousContainerDatabaseResourceUsage").getDatabaseAutonomousContainerDatabaseResourceUsageOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseAutonomousContainerDatabaseResourceUsage","getDatabaseAutonomousContainerDatabaseResourceUsageOutput"], () => require("./getDatabaseAutonomousContainerDatabaseResourceUsage"));

export { GetDatabaseAutonomousContainerDatabaseVersionsArgs, GetDatabaseAutonomousContainerDatabaseVersionsResult, GetDatabaseAutonomousContainerDatabaseVersionsOutputArgs } from "./getDatabaseAutonomousContainerDatabaseVersions";
export const getDatabaseAutonomousContainerDatabaseVersions: typeof import("./getDatabaseAutonomousContainerDatabaseVersions").getDatabaseAutonomousContainerDatabaseVersions = null as any;
export const getDatabaseAutonomousContainerDatabaseVersionsOutput: typeof import("./getDatabaseAutonomousContainerDatabaseVersions").getDatabaseAutonomousContainerDatabaseVersionsOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseAutonomousContainerDatabaseVersions","getDatabaseAutonomousContainerDatabaseVersionsOutput"], () => require("./getDatabaseAutonomousContainerDatabaseVersions"));

export { GetDatabaseAutonomousContainerDatabasesArgs, GetDatabaseAutonomousContainerDatabasesResult, GetDatabaseAutonomousContainerDatabasesOutputArgs } from "./getDatabaseAutonomousContainerDatabases";
export const getDatabaseAutonomousContainerDatabases: typeof import("./getDatabaseAutonomousContainerDatabases").getDatabaseAutonomousContainerDatabases = null as any;
export const getDatabaseAutonomousContainerDatabasesOutput: typeof import("./getDatabaseAutonomousContainerDatabases").getDatabaseAutonomousContainerDatabasesOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseAutonomousContainerDatabases","getDatabaseAutonomousContainerDatabasesOutput"], () => require("./getDatabaseAutonomousContainerDatabases"));

export { GetDatabaseAutonomousContainerPatchesArgs, GetDatabaseAutonomousContainerPatchesResult, GetDatabaseAutonomousContainerPatchesOutputArgs } from "./getDatabaseAutonomousContainerPatches";
export const getDatabaseAutonomousContainerPatches: typeof import("./getDatabaseAutonomousContainerPatches").getDatabaseAutonomousContainerPatches = null as any;
export const getDatabaseAutonomousContainerPatchesOutput: typeof import("./getDatabaseAutonomousContainerPatches").getDatabaseAutonomousContainerPatchesOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseAutonomousContainerPatches","getDatabaseAutonomousContainerPatchesOutput"], () => require("./getDatabaseAutonomousContainerPatches"));

export { GetDatabaseAutonomousDatabaseArgs, GetDatabaseAutonomousDatabaseResult, GetDatabaseAutonomousDatabaseOutputArgs } from "./getDatabaseAutonomousDatabase";
export const getDatabaseAutonomousDatabase: typeof import("./getDatabaseAutonomousDatabase").getDatabaseAutonomousDatabase = null as any;
export const getDatabaseAutonomousDatabaseOutput: typeof import("./getDatabaseAutonomousDatabase").getDatabaseAutonomousDatabaseOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseAutonomousDatabase","getDatabaseAutonomousDatabaseOutput"], () => require("./getDatabaseAutonomousDatabase"));

export { GetDatabaseAutonomousDatabaseBackupArgs, GetDatabaseAutonomousDatabaseBackupResult, GetDatabaseAutonomousDatabaseBackupOutputArgs } from "./getDatabaseAutonomousDatabaseBackup";
export const getDatabaseAutonomousDatabaseBackup: typeof import("./getDatabaseAutonomousDatabaseBackup").getDatabaseAutonomousDatabaseBackup = null as any;
export const getDatabaseAutonomousDatabaseBackupOutput: typeof import("./getDatabaseAutonomousDatabaseBackup").getDatabaseAutonomousDatabaseBackupOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseAutonomousDatabaseBackup","getDatabaseAutonomousDatabaseBackupOutput"], () => require("./getDatabaseAutonomousDatabaseBackup"));

export { GetDatabaseAutonomousDatabaseBackupsArgs, GetDatabaseAutonomousDatabaseBackupsResult, GetDatabaseAutonomousDatabaseBackupsOutputArgs } from "./getDatabaseAutonomousDatabaseBackups";
export const getDatabaseAutonomousDatabaseBackups: typeof import("./getDatabaseAutonomousDatabaseBackups").getDatabaseAutonomousDatabaseBackups = null as any;
export const getDatabaseAutonomousDatabaseBackupsOutput: typeof import("./getDatabaseAutonomousDatabaseBackups").getDatabaseAutonomousDatabaseBackupsOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseAutonomousDatabaseBackups","getDatabaseAutonomousDatabaseBackupsOutput"], () => require("./getDatabaseAutonomousDatabaseBackups"));

export { GetDatabaseAutonomousDatabaseCharacterSetsArgs, GetDatabaseAutonomousDatabaseCharacterSetsResult, GetDatabaseAutonomousDatabaseCharacterSetsOutputArgs } from "./getDatabaseAutonomousDatabaseCharacterSets";
export const getDatabaseAutonomousDatabaseCharacterSets: typeof import("./getDatabaseAutonomousDatabaseCharacterSets").getDatabaseAutonomousDatabaseCharacterSets = null as any;
export const getDatabaseAutonomousDatabaseCharacterSetsOutput: typeof import("./getDatabaseAutonomousDatabaseCharacterSets").getDatabaseAutonomousDatabaseCharacterSetsOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseAutonomousDatabaseCharacterSets","getDatabaseAutonomousDatabaseCharacterSetsOutput"], () => require("./getDatabaseAutonomousDatabaseCharacterSets"));

export { GetDatabaseAutonomousDatabaseDataguardAssociationArgs, GetDatabaseAutonomousDatabaseDataguardAssociationResult, GetDatabaseAutonomousDatabaseDataguardAssociationOutputArgs } from "./getDatabaseAutonomousDatabaseDataguardAssociation";
export const getDatabaseAutonomousDatabaseDataguardAssociation: typeof import("./getDatabaseAutonomousDatabaseDataguardAssociation").getDatabaseAutonomousDatabaseDataguardAssociation = null as any;
export const getDatabaseAutonomousDatabaseDataguardAssociationOutput: typeof import("./getDatabaseAutonomousDatabaseDataguardAssociation").getDatabaseAutonomousDatabaseDataguardAssociationOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseAutonomousDatabaseDataguardAssociation","getDatabaseAutonomousDatabaseDataguardAssociationOutput"], () => require("./getDatabaseAutonomousDatabaseDataguardAssociation"));

export { GetDatabaseAutonomousDatabaseDataguardAssociationsArgs, GetDatabaseAutonomousDatabaseDataguardAssociationsResult, GetDatabaseAutonomousDatabaseDataguardAssociationsOutputArgs } from "./getDatabaseAutonomousDatabaseDataguardAssociations";
export const getDatabaseAutonomousDatabaseDataguardAssociations: typeof import("./getDatabaseAutonomousDatabaseDataguardAssociations").getDatabaseAutonomousDatabaseDataguardAssociations = null as any;
export const getDatabaseAutonomousDatabaseDataguardAssociationsOutput: typeof import("./getDatabaseAutonomousDatabaseDataguardAssociations").getDatabaseAutonomousDatabaseDataguardAssociationsOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseAutonomousDatabaseDataguardAssociations","getDatabaseAutonomousDatabaseDataguardAssociationsOutput"], () => require("./getDatabaseAutonomousDatabaseDataguardAssociations"));

export { GetDatabaseAutonomousDatabaseInstanceWalletManagementArgs, GetDatabaseAutonomousDatabaseInstanceWalletManagementResult, GetDatabaseAutonomousDatabaseInstanceWalletManagementOutputArgs } from "./getDatabaseAutonomousDatabaseInstanceWalletManagement";
export const getDatabaseAutonomousDatabaseInstanceWalletManagement: typeof import("./getDatabaseAutonomousDatabaseInstanceWalletManagement").getDatabaseAutonomousDatabaseInstanceWalletManagement = null as any;
export const getDatabaseAutonomousDatabaseInstanceWalletManagementOutput: typeof import("./getDatabaseAutonomousDatabaseInstanceWalletManagement").getDatabaseAutonomousDatabaseInstanceWalletManagementOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseAutonomousDatabaseInstanceWalletManagement","getDatabaseAutonomousDatabaseInstanceWalletManagementOutput"], () => require("./getDatabaseAutonomousDatabaseInstanceWalletManagement"));

export { GetDatabaseAutonomousDatabasePeersArgs, GetDatabaseAutonomousDatabasePeersResult, GetDatabaseAutonomousDatabasePeersOutputArgs } from "./getDatabaseAutonomousDatabasePeers";
export const getDatabaseAutonomousDatabasePeers: typeof import("./getDatabaseAutonomousDatabasePeers").getDatabaseAutonomousDatabasePeers = null as any;
export const getDatabaseAutonomousDatabasePeersOutput: typeof import("./getDatabaseAutonomousDatabasePeers").getDatabaseAutonomousDatabasePeersOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseAutonomousDatabasePeers","getDatabaseAutonomousDatabasePeersOutput"], () => require("./getDatabaseAutonomousDatabasePeers"));

export { GetDatabaseAutonomousDatabaseRefreshableClonesArgs, GetDatabaseAutonomousDatabaseRefreshableClonesResult, GetDatabaseAutonomousDatabaseRefreshableClonesOutputArgs } from "./getDatabaseAutonomousDatabaseRefreshableClones";
export const getDatabaseAutonomousDatabaseRefreshableClones: typeof import("./getDatabaseAutonomousDatabaseRefreshableClones").getDatabaseAutonomousDatabaseRefreshableClones = null as any;
export const getDatabaseAutonomousDatabaseRefreshableClonesOutput: typeof import("./getDatabaseAutonomousDatabaseRefreshableClones").getDatabaseAutonomousDatabaseRefreshableClonesOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseAutonomousDatabaseRefreshableClones","getDatabaseAutonomousDatabaseRefreshableClonesOutput"], () => require("./getDatabaseAutonomousDatabaseRefreshableClones"));

export { GetDatabaseAutonomousDatabaseRegionalWalletManagementResult } from "./getDatabaseAutonomousDatabaseRegionalWalletManagement";
export const getDatabaseAutonomousDatabaseRegionalWalletManagement: typeof import("./getDatabaseAutonomousDatabaseRegionalWalletManagement").getDatabaseAutonomousDatabaseRegionalWalletManagement = null as any;
export const getDatabaseAutonomousDatabaseRegionalWalletManagementOutput: typeof import("./getDatabaseAutonomousDatabaseRegionalWalletManagement").getDatabaseAutonomousDatabaseRegionalWalletManagementOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseAutonomousDatabaseRegionalWalletManagement","getDatabaseAutonomousDatabaseRegionalWalletManagementOutput"], () => require("./getDatabaseAutonomousDatabaseRegionalWalletManagement"));

export { GetDatabaseAutonomousDatabaseSoftwareImageArgs, GetDatabaseAutonomousDatabaseSoftwareImageResult, GetDatabaseAutonomousDatabaseSoftwareImageOutputArgs } from "./getDatabaseAutonomousDatabaseSoftwareImage";
export const getDatabaseAutonomousDatabaseSoftwareImage: typeof import("./getDatabaseAutonomousDatabaseSoftwareImage").getDatabaseAutonomousDatabaseSoftwareImage = null as any;
export const getDatabaseAutonomousDatabaseSoftwareImageOutput: typeof import("./getDatabaseAutonomousDatabaseSoftwareImage").getDatabaseAutonomousDatabaseSoftwareImageOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseAutonomousDatabaseSoftwareImage","getDatabaseAutonomousDatabaseSoftwareImageOutput"], () => require("./getDatabaseAutonomousDatabaseSoftwareImage"));

export { GetDatabaseAutonomousDatabaseSoftwareImagesArgs, GetDatabaseAutonomousDatabaseSoftwareImagesResult, GetDatabaseAutonomousDatabaseSoftwareImagesOutputArgs } from "./getDatabaseAutonomousDatabaseSoftwareImages";
export const getDatabaseAutonomousDatabaseSoftwareImages: typeof import("./getDatabaseAutonomousDatabaseSoftwareImages").getDatabaseAutonomousDatabaseSoftwareImages = null as any;
export const getDatabaseAutonomousDatabaseSoftwareImagesOutput: typeof import("./getDatabaseAutonomousDatabaseSoftwareImages").getDatabaseAutonomousDatabaseSoftwareImagesOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseAutonomousDatabaseSoftwareImages","getDatabaseAutonomousDatabaseSoftwareImagesOutput"], () => require("./getDatabaseAutonomousDatabaseSoftwareImages"));

export { GetDatabaseAutonomousDatabaseWalletArgs, GetDatabaseAutonomousDatabaseWalletResult, GetDatabaseAutonomousDatabaseWalletOutputArgs } from "./getDatabaseAutonomousDatabaseWallet";
export const getDatabaseAutonomousDatabaseWallet: typeof import("./getDatabaseAutonomousDatabaseWallet").getDatabaseAutonomousDatabaseWallet = null as any;
export const getDatabaseAutonomousDatabaseWalletOutput: typeof import("./getDatabaseAutonomousDatabaseWallet").getDatabaseAutonomousDatabaseWalletOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseAutonomousDatabaseWallet","getDatabaseAutonomousDatabaseWalletOutput"], () => require("./getDatabaseAutonomousDatabaseWallet"));

export { GetDatabaseAutonomousDatabasesArgs, GetDatabaseAutonomousDatabasesResult, GetDatabaseAutonomousDatabasesOutputArgs } from "./getDatabaseAutonomousDatabases";
export const getDatabaseAutonomousDatabases: typeof import("./getDatabaseAutonomousDatabases").getDatabaseAutonomousDatabases = null as any;
export const getDatabaseAutonomousDatabasesOutput: typeof import("./getDatabaseAutonomousDatabases").getDatabaseAutonomousDatabasesOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseAutonomousDatabases","getDatabaseAutonomousDatabasesOutput"], () => require("./getDatabaseAutonomousDatabases"));

export { GetDatabaseAutonomousDatabasesClonesArgs, GetDatabaseAutonomousDatabasesClonesResult, GetDatabaseAutonomousDatabasesClonesOutputArgs } from "./getDatabaseAutonomousDatabasesClones";
export const getDatabaseAutonomousDatabasesClones: typeof import("./getDatabaseAutonomousDatabasesClones").getDatabaseAutonomousDatabasesClones = null as any;
export const getDatabaseAutonomousDatabasesClonesOutput: typeof import("./getDatabaseAutonomousDatabasesClones").getDatabaseAutonomousDatabasesClonesOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseAutonomousDatabasesClones","getDatabaseAutonomousDatabasesClonesOutput"], () => require("./getDatabaseAutonomousDatabasesClones"));

export { GetDatabaseAutonomousDbPreviewVersionsArgs, GetDatabaseAutonomousDbPreviewVersionsResult, GetDatabaseAutonomousDbPreviewVersionsOutputArgs } from "./getDatabaseAutonomousDbPreviewVersions";
export const getDatabaseAutonomousDbPreviewVersions: typeof import("./getDatabaseAutonomousDbPreviewVersions").getDatabaseAutonomousDbPreviewVersions = null as any;
export const getDatabaseAutonomousDbPreviewVersionsOutput: typeof import("./getDatabaseAutonomousDbPreviewVersions").getDatabaseAutonomousDbPreviewVersionsOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseAutonomousDbPreviewVersions","getDatabaseAutonomousDbPreviewVersionsOutput"], () => require("./getDatabaseAutonomousDbPreviewVersions"));

export { GetDatabaseAutonomousDbVersionsArgs, GetDatabaseAutonomousDbVersionsResult, GetDatabaseAutonomousDbVersionsOutputArgs } from "./getDatabaseAutonomousDbVersions";
export const getDatabaseAutonomousDbVersions: typeof import("./getDatabaseAutonomousDbVersions").getDatabaseAutonomousDbVersions = null as any;
export const getDatabaseAutonomousDbVersionsOutput: typeof import("./getDatabaseAutonomousDbVersions").getDatabaseAutonomousDbVersionsOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseAutonomousDbVersions","getDatabaseAutonomousDbVersionsOutput"], () => require("./getDatabaseAutonomousDbVersions"));

export { GetDatabaseAutonomousExadataInfrastructureArgs, GetDatabaseAutonomousExadataInfrastructureResult, GetDatabaseAutonomousExadataInfrastructureOutputArgs } from "./getDatabaseAutonomousExadataInfrastructure";
export const getDatabaseAutonomousExadataInfrastructure: typeof import("./getDatabaseAutonomousExadataInfrastructure").getDatabaseAutonomousExadataInfrastructure = null as any;
export const getDatabaseAutonomousExadataInfrastructureOutput: typeof import("./getDatabaseAutonomousExadataInfrastructure").getDatabaseAutonomousExadataInfrastructureOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseAutonomousExadataInfrastructure","getDatabaseAutonomousExadataInfrastructureOutput"], () => require("./getDatabaseAutonomousExadataInfrastructure"));

export { GetDatabaseAutonomousExadataInfrastructureOcpuArgs, GetDatabaseAutonomousExadataInfrastructureOcpuResult, GetDatabaseAutonomousExadataInfrastructureOcpuOutputArgs } from "./getDatabaseAutonomousExadataInfrastructureOcpu";
export const getDatabaseAutonomousExadataInfrastructureOcpu: typeof import("./getDatabaseAutonomousExadataInfrastructureOcpu").getDatabaseAutonomousExadataInfrastructureOcpu = null as any;
export const getDatabaseAutonomousExadataInfrastructureOcpuOutput: typeof import("./getDatabaseAutonomousExadataInfrastructureOcpu").getDatabaseAutonomousExadataInfrastructureOcpuOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseAutonomousExadataInfrastructureOcpu","getDatabaseAutonomousExadataInfrastructureOcpuOutput"], () => require("./getDatabaseAutonomousExadataInfrastructureOcpu"));

export { GetDatabaseAutonomousExadataInfrastructureShapesArgs, GetDatabaseAutonomousExadataInfrastructureShapesResult, GetDatabaseAutonomousExadataInfrastructureShapesOutputArgs } from "./getDatabaseAutonomousExadataInfrastructureShapes";
export const getDatabaseAutonomousExadataInfrastructureShapes: typeof import("./getDatabaseAutonomousExadataInfrastructureShapes").getDatabaseAutonomousExadataInfrastructureShapes = null as any;
export const getDatabaseAutonomousExadataInfrastructureShapesOutput: typeof import("./getDatabaseAutonomousExadataInfrastructureShapes").getDatabaseAutonomousExadataInfrastructureShapesOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseAutonomousExadataInfrastructureShapes","getDatabaseAutonomousExadataInfrastructureShapesOutput"], () => require("./getDatabaseAutonomousExadataInfrastructureShapes"));

export { GetDatabaseAutonomousExadataInfrastructuresArgs, GetDatabaseAutonomousExadataInfrastructuresResult, GetDatabaseAutonomousExadataInfrastructuresOutputArgs } from "./getDatabaseAutonomousExadataInfrastructures";
export const getDatabaseAutonomousExadataInfrastructures: typeof import("./getDatabaseAutonomousExadataInfrastructures").getDatabaseAutonomousExadataInfrastructures = null as any;
export const getDatabaseAutonomousExadataInfrastructuresOutput: typeof import("./getDatabaseAutonomousExadataInfrastructures").getDatabaseAutonomousExadataInfrastructuresOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseAutonomousExadataInfrastructures","getDatabaseAutonomousExadataInfrastructuresOutput"], () => require("./getDatabaseAutonomousExadataInfrastructures"));

export { GetDatabaseAutonomousPatchArgs, GetDatabaseAutonomousPatchResult, GetDatabaseAutonomousPatchOutputArgs } from "./getDatabaseAutonomousPatch";
export const getDatabaseAutonomousPatch: typeof import("./getDatabaseAutonomousPatch").getDatabaseAutonomousPatch = null as any;
export const getDatabaseAutonomousPatchOutput: typeof import("./getDatabaseAutonomousPatch").getDatabaseAutonomousPatchOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseAutonomousPatch","getDatabaseAutonomousPatchOutput"], () => require("./getDatabaseAutonomousPatch"));

export { GetDatabaseAutonomousVirtualMachineArgs, GetDatabaseAutonomousVirtualMachineResult, GetDatabaseAutonomousVirtualMachineOutputArgs } from "./getDatabaseAutonomousVirtualMachine";
export const getDatabaseAutonomousVirtualMachine: typeof import("./getDatabaseAutonomousVirtualMachine").getDatabaseAutonomousVirtualMachine = null as any;
export const getDatabaseAutonomousVirtualMachineOutput: typeof import("./getDatabaseAutonomousVirtualMachine").getDatabaseAutonomousVirtualMachineOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseAutonomousVirtualMachine","getDatabaseAutonomousVirtualMachineOutput"], () => require("./getDatabaseAutonomousVirtualMachine"));

export { GetDatabaseAutonomousVirtualMachinesArgs, GetDatabaseAutonomousVirtualMachinesResult, GetDatabaseAutonomousVirtualMachinesOutputArgs } from "./getDatabaseAutonomousVirtualMachines";
export const getDatabaseAutonomousVirtualMachines: typeof import("./getDatabaseAutonomousVirtualMachines").getDatabaseAutonomousVirtualMachines = null as any;
export const getDatabaseAutonomousVirtualMachinesOutput: typeof import("./getDatabaseAutonomousVirtualMachines").getDatabaseAutonomousVirtualMachinesOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseAutonomousVirtualMachines","getDatabaseAutonomousVirtualMachinesOutput"], () => require("./getDatabaseAutonomousVirtualMachines"));

export { GetDatabaseAutonomousVmClusterArgs, GetDatabaseAutonomousVmClusterResult, GetDatabaseAutonomousVmClusterOutputArgs } from "./getDatabaseAutonomousVmCluster";
export const getDatabaseAutonomousVmCluster: typeof import("./getDatabaseAutonomousVmCluster").getDatabaseAutonomousVmCluster = null as any;
export const getDatabaseAutonomousVmClusterOutput: typeof import("./getDatabaseAutonomousVmCluster").getDatabaseAutonomousVmClusterOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseAutonomousVmCluster","getDatabaseAutonomousVmClusterOutput"], () => require("./getDatabaseAutonomousVmCluster"));

export { GetDatabaseAutonomousVmClusterAcdResourceUsagesArgs, GetDatabaseAutonomousVmClusterAcdResourceUsagesResult, GetDatabaseAutonomousVmClusterAcdResourceUsagesOutputArgs } from "./getDatabaseAutonomousVmClusterAcdResourceUsages";
export const getDatabaseAutonomousVmClusterAcdResourceUsages: typeof import("./getDatabaseAutonomousVmClusterAcdResourceUsages").getDatabaseAutonomousVmClusterAcdResourceUsages = null as any;
export const getDatabaseAutonomousVmClusterAcdResourceUsagesOutput: typeof import("./getDatabaseAutonomousVmClusterAcdResourceUsages").getDatabaseAutonomousVmClusterAcdResourceUsagesOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseAutonomousVmClusterAcdResourceUsages","getDatabaseAutonomousVmClusterAcdResourceUsagesOutput"], () => require("./getDatabaseAutonomousVmClusterAcdResourceUsages"));

export { GetDatabaseAutonomousVmClusterResourceUsageArgs, GetDatabaseAutonomousVmClusterResourceUsageResult, GetDatabaseAutonomousVmClusterResourceUsageOutputArgs } from "./getDatabaseAutonomousVmClusterResourceUsage";
export const getDatabaseAutonomousVmClusterResourceUsage: typeof import("./getDatabaseAutonomousVmClusterResourceUsage").getDatabaseAutonomousVmClusterResourceUsage = null as any;
export const getDatabaseAutonomousVmClusterResourceUsageOutput: typeof import("./getDatabaseAutonomousVmClusterResourceUsage").getDatabaseAutonomousVmClusterResourceUsageOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseAutonomousVmClusterResourceUsage","getDatabaseAutonomousVmClusterResourceUsageOutput"], () => require("./getDatabaseAutonomousVmClusterResourceUsage"));

export { GetDatabaseAutonomousVmClustersArgs, GetDatabaseAutonomousVmClustersResult, GetDatabaseAutonomousVmClustersOutputArgs } from "./getDatabaseAutonomousVmClusters";
export const getDatabaseAutonomousVmClusters: typeof import("./getDatabaseAutonomousVmClusters").getDatabaseAutonomousVmClusters = null as any;
export const getDatabaseAutonomousVmClustersOutput: typeof import("./getDatabaseAutonomousVmClusters").getDatabaseAutonomousVmClustersOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseAutonomousVmClusters","getDatabaseAutonomousVmClustersOutput"], () => require("./getDatabaseAutonomousVmClusters"));

export { GetDatabaseBackupDestinationArgs, GetDatabaseBackupDestinationResult, GetDatabaseBackupDestinationOutputArgs } from "./getDatabaseBackupDestination";
export const getDatabaseBackupDestination: typeof import("./getDatabaseBackupDestination").getDatabaseBackupDestination = null as any;
export const getDatabaseBackupDestinationOutput: typeof import("./getDatabaseBackupDestination").getDatabaseBackupDestinationOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseBackupDestination","getDatabaseBackupDestinationOutput"], () => require("./getDatabaseBackupDestination"));

export { GetDatabaseBackupDestinationsArgs, GetDatabaseBackupDestinationsResult, GetDatabaseBackupDestinationsOutputArgs } from "./getDatabaseBackupDestinations";
export const getDatabaseBackupDestinations: typeof import("./getDatabaseBackupDestinations").getDatabaseBackupDestinations = null as any;
export const getDatabaseBackupDestinationsOutput: typeof import("./getDatabaseBackupDestinations").getDatabaseBackupDestinationsOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseBackupDestinations","getDatabaseBackupDestinationsOutput"], () => require("./getDatabaseBackupDestinations"));

export { GetDatabaseBackupsArgs, GetDatabaseBackupsResult, GetDatabaseBackupsOutputArgs } from "./getDatabaseBackups";
export const getDatabaseBackups: typeof import("./getDatabaseBackups").getDatabaseBackups = null as any;
export const getDatabaseBackupsOutput: typeof import("./getDatabaseBackups").getDatabaseBackupsOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseBackups","getDatabaseBackupsOutput"], () => require("./getDatabaseBackups"));

export { GetDatabaseCloudAutonomousVmClusterArgs, GetDatabaseCloudAutonomousVmClusterResult, GetDatabaseCloudAutonomousVmClusterOutputArgs } from "./getDatabaseCloudAutonomousVmCluster";
export const getDatabaseCloudAutonomousVmCluster: typeof import("./getDatabaseCloudAutonomousVmCluster").getDatabaseCloudAutonomousVmCluster = null as any;
export const getDatabaseCloudAutonomousVmClusterOutput: typeof import("./getDatabaseCloudAutonomousVmCluster").getDatabaseCloudAutonomousVmClusterOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseCloudAutonomousVmCluster","getDatabaseCloudAutonomousVmClusterOutput"], () => require("./getDatabaseCloudAutonomousVmCluster"));

export { GetDatabaseCloudAutonomousVmClusterAcdResourceUsagesArgs, GetDatabaseCloudAutonomousVmClusterAcdResourceUsagesResult, GetDatabaseCloudAutonomousVmClusterAcdResourceUsagesOutputArgs } from "./getDatabaseCloudAutonomousVmClusterAcdResourceUsages";
export const getDatabaseCloudAutonomousVmClusterAcdResourceUsages: typeof import("./getDatabaseCloudAutonomousVmClusterAcdResourceUsages").getDatabaseCloudAutonomousVmClusterAcdResourceUsages = null as any;
export const getDatabaseCloudAutonomousVmClusterAcdResourceUsagesOutput: typeof import("./getDatabaseCloudAutonomousVmClusterAcdResourceUsages").getDatabaseCloudAutonomousVmClusterAcdResourceUsagesOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseCloudAutonomousVmClusterAcdResourceUsages","getDatabaseCloudAutonomousVmClusterAcdResourceUsagesOutput"], () => require("./getDatabaseCloudAutonomousVmClusterAcdResourceUsages"));

export { GetDatabaseCloudAutonomousVmClusterResourceUsageArgs, GetDatabaseCloudAutonomousVmClusterResourceUsageResult, GetDatabaseCloudAutonomousVmClusterResourceUsageOutputArgs } from "./getDatabaseCloudAutonomousVmClusterResourceUsage";
export const getDatabaseCloudAutonomousVmClusterResourceUsage: typeof import("./getDatabaseCloudAutonomousVmClusterResourceUsage").getDatabaseCloudAutonomousVmClusterResourceUsage = null as any;
export const getDatabaseCloudAutonomousVmClusterResourceUsageOutput: typeof import("./getDatabaseCloudAutonomousVmClusterResourceUsage").getDatabaseCloudAutonomousVmClusterResourceUsageOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseCloudAutonomousVmClusterResourceUsage","getDatabaseCloudAutonomousVmClusterResourceUsageOutput"], () => require("./getDatabaseCloudAutonomousVmClusterResourceUsage"));

export { GetDatabaseCloudAutonomousVmClustersArgs, GetDatabaseCloudAutonomousVmClustersResult, GetDatabaseCloudAutonomousVmClustersOutputArgs } from "./getDatabaseCloudAutonomousVmClusters";
export const getDatabaseCloudAutonomousVmClusters: typeof import("./getDatabaseCloudAutonomousVmClusters").getDatabaseCloudAutonomousVmClusters = null as any;
export const getDatabaseCloudAutonomousVmClustersOutput: typeof import("./getDatabaseCloudAutonomousVmClusters").getDatabaseCloudAutonomousVmClustersOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseCloudAutonomousVmClusters","getDatabaseCloudAutonomousVmClustersOutput"], () => require("./getDatabaseCloudAutonomousVmClusters"));

export { GetDatabaseCloudExadataInfrastructureArgs, GetDatabaseCloudExadataInfrastructureResult, GetDatabaseCloudExadataInfrastructureOutputArgs } from "./getDatabaseCloudExadataInfrastructure";
export const getDatabaseCloudExadataInfrastructure: typeof import("./getDatabaseCloudExadataInfrastructure").getDatabaseCloudExadataInfrastructure = null as any;
export const getDatabaseCloudExadataInfrastructureOutput: typeof import("./getDatabaseCloudExadataInfrastructure").getDatabaseCloudExadataInfrastructureOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseCloudExadataInfrastructure","getDatabaseCloudExadataInfrastructureOutput"], () => require("./getDatabaseCloudExadataInfrastructure"));

export { GetDatabaseCloudExadataInfrastructureUnAllocatedResourceArgs, GetDatabaseCloudExadataInfrastructureUnAllocatedResourceResult, GetDatabaseCloudExadataInfrastructureUnAllocatedResourceOutputArgs } from "./getDatabaseCloudExadataInfrastructureUnAllocatedResource";
export const getDatabaseCloudExadataInfrastructureUnAllocatedResource: typeof import("./getDatabaseCloudExadataInfrastructureUnAllocatedResource").getDatabaseCloudExadataInfrastructureUnAllocatedResource = null as any;
export const getDatabaseCloudExadataInfrastructureUnAllocatedResourceOutput: typeof import("./getDatabaseCloudExadataInfrastructureUnAllocatedResource").getDatabaseCloudExadataInfrastructureUnAllocatedResourceOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseCloudExadataInfrastructureUnAllocatedResource","getDatabaseCloudExadataInfrastructureUnAllocatedResourceOutput"], () => require("./getDatabaseCloudExadataInfrastructureUnAllocatedResource"));

export { GetDatabaseCloudExadataInfrastructuresArgs, GetDatabaseCloudExadataInfrastructuresResult, GetDatabaseCloudExadataInfrastructuresOutputArgs } from "./getDatabaseCloudExadataInfrastructures";
export const getDatabaseCloudExadataInfrastructures: typeof import("./getDatabaseCloudExadataInfrastructures").getDatabaseCloudExadataInfrastructures = null as any;
export const getDatabaseCloudExadataInfrastructuresOutput: typeof import("./getDatabaseCloudExadataInfrastructures").getDatabaseCloudExadataInfrastructuresOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseCloudExadataInfrastructures","getDatabaseCloudExadataInfrastructuresOutput"], () => require("./getDatabaseCloudExadataInfrastructures"));

export { GetDatabaseCloudVmClusterArgs, GetDatabaseCloudVmClusterResult, GetDatabaseCloudVmClusterOutputArgs } from "./getDatabaseCloudVmCluster";
export const getDatabaseCloudVmCluster: typeof import("./getDatabaseCloudVmCluster").getDatabaseCloudVmCluster = null as any;
export const getDatabaseCloudVmClusterOutput: typeof import("./getDatabaseCloudVmCluster").getDatabaseCloudVmClusterOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseCloudVmCluster","getDatabaseCloudVmClusterOutput"], () => require("./getDatabaseCloudVmCluster"));

export { GetDatabaseCloudVmClusterIormConfigArgs, GetDatabaseCloudVmClusterIormConfigResult, GetDatabaseCloudVmClusterIormConfigOutputArgs } from "./getDatabaseCloudVmClusterIormConfig";
export const getDatabaseCloudVmClusterIormConfig: typeof import("./getDatabaseCloudVmClusterIormConfig").getDatabaseCloudVmClusterIormConfig = null as any;
export const getDatabaseCloudVmClusterIormConfigOutput: typeof import("./getDatabaseCloudVmClusterIormConfig").getDatabaseCloudVmClusterIormConfigOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseCloudVmClusterIormConfig","getDatabaseCloudVmClusterIormConfigOutput"], () => require("./getDatabaseCloudVmClusterIormConfig"));

export { GetDatabaseCloudVmClustersArgs, GetDatabaseCloudVmClustersResult, GetDatabaseCloudVmClustersOutputArgs } from "./getDatabaseCloudVmClusters";
export const getDatabaseCloudVmClusters: typeof import("./getDatabaseCloudVmClusters").getDatabaseCloudVmClusters = null as any;
export const getDatabaseCloudVmClustersOutput: typeof import("./getDatabaseCloudVmClusters").getDatabaseCloudVmClustersOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseCloudVmClusters","getDatabaseCloudVmClustersOutput"], () => require("./getDatabaseCloudVmClusters"));

export { GetDatabaseDataGuardAssociationArgs, GetDatabaseDataGuardAssociationResult, GetDatabaseDataGuardAssociationOutputArgs } from "./getDatabaseDataGuardAssociation";
export const getDatabaseDataGuardAssociation: typeof import("./getDatabaseDataGuardAssociation").getDatabaseDataGuardAssociation = null as any;
export const getDatabaseDataGuardAssociationOutput: typeof import("./getDatabaseDataGuardAssociation").getDatabaseDataGuardAssociationOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseDataGuardAssociation","getDatabaseDataGuardAssociationOutput"], () => require("./getDatabaseDataGuardAssociation"));

export { GetDatabaseDataGuardAssociationsArgs, GetDatabaseDataGuardAssociationsResult, GetDatabaseDataGuardAssociationsOutputArgs } from "./getDatabaseDataGuardAssociations";
export const getDatabaseDataGuardAssociations: typeof import("./getDatabaseDataGuardAssociations").getDatabaseDataGuardAssociations = null as any;
export const getDatabaseDataGuardAssociationsOutput: typeof import("./getDatabaseDataGuardAssociations").getDatabaseDataGuardAssociationsOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseDataGuardAssociations","getDatabaseDataGuardAssociationsOutput"], () => require("./getDatabaseDataGuardAssociations"));

export { GetDatabaseDatabaseArgs, GetDatabaseDatabaseResult, GetDatabaseDatabaseOutputArgs } from "./getDatabaseDatabase";
export const getDatabaseDatabase: typeof import("./getDatabaseDatabase").getDatabaseDatabase = null as any;
export const getDatabaseDatabaseOutput: typeof import("./getDatabaseDatabase").getDatabaseDatabaseOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseDatabase","getDatabaseDatabaseOutput"], () => require("./getDatabaseDatabase"));

export { GetDatabaseDatabasePdbConversionHistoryEntriesArgs, GetDatabaseDatabasePdbConversionHistoryEntriesResult, GetDatabaseDatabasePdbConversionHistoryEntriesOutputArgs } from "./getDatabaseDatabasePdbConversionHistoryEntries";
export const getDatabaseDatabasePdbConversionHistoryEntries: typeof import("./getDatabaseDatabasePdbConversionHistoryEntries").getDatabaseDatabasePdbConversionHistoryEntries = null as any;
export const getDatabaseDatabasePdbConversionHistoryEntriesOutput: typeof import("./getDatabaseDatabasePdbConversionHistoryEntries").getDatabaseDatabasePdbConversionHistoryEntriesOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseDatabasePdbConversionHistoryEntries","getDatabaseDatabasePdbConversionHistoryEntriesOutput"], () => require("./getDatabaseDatabasePdbConversionHistoryEntries"));

export { GetDatabaseDatabasePdbConversionHistoryEntryArgs, GetDatabaseDatabasePdbConversionHistoryEntryResult, GetDatabaseDatabasePdbConversionHistoryEntryOutputArgs } from "./getDatabaseDatabasePdbConversionHistoryEntry";
export const getDatabaseDatabasePdbConversionHistoryEntry: typeof import("./getDatabaseDatabasePdbConversionHistoryEntry").getDatabaseDatabasePdbConversionHistoryEntry = null as any;
export const getDatabaseDatabasePdbConversionHistoryEntryOutput: typeof import("./getDatabaseDatabasePdbConversionHistoryEntry").getDatabaseDatabasePdbConversionHistoryEntryOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseDatabasePdbConversionHistoryEntry","getDatabaseDatabasePdbConversionHistoryEntryOutput"], () => require("./getDatabaseDatabasePdbConversionHistoryEntry"));

export { GetDatabaseDatabaseSoftwareImageArgs, GetDatabaseDatabaseSoftwareImageResult, GetDatabaseDatabaseSoftwareImageOutputArgs } from "./getDatabaseDatabaseSoftwareImage";
export const getDatabaseDatabaseSoftwareImage: typeof import("./getDatabaseDatabaseSoftwareImage").getDatabaseDatabaseSoftwareImage = null as any;
export const getDatabaseDatabaseSoftwareImageOutput: typeof import("./getDatabaseDatabaseSoftwareImage").getDatabaseDatabaseSoftwareImageOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseDatabaseSoftwareImage","getDatabaseDatabaseSoftwareImageOutput"], () => require("./getDatabaseDatabaseSoftwareImage"));

export { GetDatabaseDatabaseSoftwareImagesArgs, GetDatabaseDatabaseSoftwareImagesResult, GetDatabaseDatabaseSoftwareImagesOutputArgs } from "./getDatabaseDatabaseSoftwareImages";
export const getDatabaseDatabaseSoftwareImages: typeof import("./getDatabaseDatabaseSoftwareImages").getDatabaseDatabaseSoftwareImages = null as any;
export const getDatabaseDatabaseSoftwareImagesOutput: typeof import("./getDatabaseDatabaseSoftwareImages").getDatabaseDatabaseSoftwareImagesOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseDatabaseSoftwareImages","getDatabaseDatabaseSoftwareImagesOutput"], () => require("./getDatabaseDatabaseSoftwareImages"));

export { GetDatabaseDatabaseUpgradeHistoryEntriesArgs, GetDatabaseDatabaseUpgradeHistoryEntriesResult, GetDatabaseDatabaseUpgradeHistoryEntriesOutputArgs } from "./getDatabaseDatabaseUpgradeHistoryEntries";
export const getDatabaseDatabaseUpgradeHistoryEntries: typeof import("./getDatabaseDatabaseUpgradeHistoryEntries").getDatabaseDatabaseUpgradeHistoryEntries = null as any;
export const getDatabaseDatabaseUpgradeHistoryEntriesOutput: typeof import("./getDatabaseDatabaseUpgradeHistoryEntries").getDatabaseDatabaseUpgradeHistoryEntriesOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseDatabaseUpgradeHistoryEntries","getDatabaseDatabaseUpgradeHistoryEntriesOutput"], () => require("./getDatabaseDatabaseUpgradeHistoryEntries"));

export { GetDatabaseDatabaseUpgradeHistoryEntryArgs, GetDatabaseDatabaseUpgradeHistoryEntryResult, GetDatabaseDatabaseUpgradeHistoryEntryOutputArgs } from "./getDatabaseDatabaseUpgradeHistoryEntry";
export const getDatabaseDatabaseUpgradeHistoryEntry: typeof import("./getDatabaseDatabaseUpgradeHistoryEntry").getDatabaseDatabaseUpgradeHistoryEntry = null as any;
export const getDatabaseDatabaseUpgradeHistoryEntryOutput: typeof import("./getDatabaseDatabaseUpgradeHistoryEntry").getDatabaseDatabaseUpgradeHistoryEntryOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseDatabaseUpgradeHistoryEntry","getDatabaseDatabaseUpgradeHistoryEntryOutput"], () => require("./getDatabaseDatabaseUpgradeHistoryEntry"));

export { GetDatabaseDatabasesArgs, GetDatabaseDatabasesResult, GetDatabaseDatabasesOutputArgs } from "./getDatabaseDatabases";
export const getDatabaseDatabases: typeof import("./getDatabaseDatabases").getDatabaseDatabases = null as any;
export const getDatabaseDatabasesOutput: typeof import("./getDatabaseDatabases").getDatabaseDatabasesOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseDatabases","getDatabaseDatabasesOutput"], () => require("./getDatabaseDatabases"));

export { GetDatabaseDbHomeArgs, GetDatabaseDbHomeResult, GetDatabaseDbHomeOutputArgs } from "./getDatabaseDbHome";
export const getDatabaseDbHome: typeof import("./getDatabaseDbHome").getDatabaseDbHome = null as any;
export const getDatabaseDbHomeOutput: typeof import("./getDatabaseDbHome").getDatabaseDbHomeOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseDbHome","getDatabaseDbHomeOutput"], () => require("./getDatabaseDbHome"));

export { GetDatabaseDbHomePatchHistoryEntriesArgs, GetDatabaseDbHomePatchHistoryEntriesResult, GetDatabaseDbHomePatchHistoryEntriesOutputArgs } from "./getDatabaseDbHomePatchHistoryEntries";
export const getDatabaseDbHomePatchHistoryEntries: typeof import("./getDatabaseDbHomePatchHistoryEntries").getDatabaseDbHomePatchHistoryEntries = null as any;
export const getDatabaseDbHomePatchHistoryEntriesOutput: typeof import("./getDatabaseDbHomePatchHistoryEntries").getDatabaseDbHomePatchHistoryEntriesOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseDbHomePatchHistoryEntries","getDatabaseDbHomePatchHistoryEntriesOutput"], () => require("./getDatabaseDbHomePatchHistoryEntries"));

export { GetDatabaseDbHomePatchesArgs, GetDatabaseDbHomePatchesResult, GetDatabaseDbHomePatchesOutputArgs } from "./getDatabaseDbHomePatches";
export const getDatabaseDbHomePatches: typeof import("./getDatabaseDbHomePatches").getDatabaseDbHomePatches = null as any;
export const getDatabaseDbHomePatchesOutput: typeof import("./getDatabaseDbHomePatches").getDatabaseDbHomePatchesOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseDbHomePatches","getDatabaseDbHomePatchesOutput"], () => require("./getDatabaseDbHomePatches"));

export { GetDatabaseDbHomesArgs, GetDatabaseDbHomesResult, GetDatabaseDbHomesOutputArgs } from "./getDatabaseDbHomes";
export const getDatabaseDbHomes: typeof import("./getDatabaseDbHomes").getDatabaseDbHomes = null as any;
export const getDatabaseDbHomesOutput: typeof import("./getDatabaseDbHomes").getDatabaseDbHomesOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseDbHomes","getDatabaseDbHomesOutput"], () => require("./getDatabaseDbHomes"));

export { GetDatabaseDbNodeArgs, GetDatabaseDbNodeResult, GetDatabaseDbNodeOutputArgs } from "./getDatabaseDbNode";
export const getDatabaseDbNode: typeof import("./getDatabaseDbNode").getDatabaseDbNode = null as any;
export const getDatabaseDbNodeOutput: typeof import("./getDatabaseDbNode").getDatabaseDbNodeOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseDbNode","getDatabaseDbNodeOutput"], () => require("./getDatabaseDbNode"));

export { GetDatabaseDbNodeConsoleConnectionArgs, GetDatabaseDbNodeConsoleConnectionResult, GetDatabaseDbNodeConsoleConnectionOutputArgs } from "./getDatabaseDbNodeConsoleConnection";
export const getDatabaseDbNodeConsoleConnection: typeof import("./getDatabaseDbNodeConsoleConnection").getDatabaseDbNodeConsoleConnection = null as any;
export const getDatabaseDbNodeConsoleConnectionOutput: typeof import("./getDatabaseDbNodeConsoleConnection").getDatabaseDbNodeConsoleConnectionOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseDbNodeConsoleConnection","getDatabaseDbNodeConsoleConnectionOutput"], () => require("./getDatabaseDbNodeConsoleConnection"));

export { GetDatabaseDbNodeConsoleConnectionsArgs, GetDatabaseDbNodeConsoleConnectionsResult, GetDatabaseDbNodeConsoleConnectionsOutputArgs } from "./getDatabaseDbNodeConsoleConnections";
export const getDatabaseDbNodeConsoleConnections: typeof import("./getDatabaseDbNodeConsoleConnections").getDatabaseDbNodeConsoleConnections = null as any;
export const getDatabaseDbNodeConsoleConnectionsOutput: typeof import("./getDatabaseDbNodeConsoleConnections").getDatabaseDbNodeConsoleConnectionsOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseDbNodeConsoleConnections","getDatabaseDbNodeConsoleConnectionsOutput"], () => require("./getDatabaseDbNodeConsoleConnections"));

export { GetDatabaseDbNodeConsoleHistoriesArgs, GetDatabaseDbNodeConsoleHistoriesResult, GetDatabaseDbNodeConsoleHistoriesOutputArgs } from "./getDatabaseDbNodeConsoleHistories";
export const getDatabaseDbNodeConsoleHistories: typeof import("./getDatabaseDbNodeConsoleHistories").getDatabaseDbNodeConsoleHistories = null as any;
export const getDatabaseDbNodeConsoleHistoriesOutput: typeof import("./getDatabaseDbNodeConsoleHistories").getDatabaseDbNodeConsoleHistoriesOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseDbNodeConsoleHistories","getDatabaseDbNodeConsoleHistoriesOutput"], () => require("./getDatabaseDbNodeConsoleHistories"));

export { GetDatabaseDbNodeConsoleHistoryArgs, GetDatabaseDbNodeConsoleHistoryResult, GetDatabaseDbNodeConsoleHistoryOutputArgs } from "./getDatabaseDbNodeConsoleHistory";
export const getDatabaseDbNodeConsoleHistory: typeof import("./getDatabaseDbNodeConsoleHistory").getDatabaseDbNodeConsoleHistory = null as any;
export const getDatabaseDbNodeConsoleHistoryOutput: typeof import("./getDatabaseDbNodeConsoleHistory").getDatabaseDbNodeConsoleHistoryOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseDbNodeConsoleHistory","getDatabaseDbNodeConsoleHistoryOutput"], () => require("./getDatabaseDbNodeConsoleHistory"));

export { GetDatabaseDbNodeConsoleHistoryContentArgs, GetDatabaseDbNodeConsoleHistoryContentResult, GetDatabaseDbNodeConsoleHistoryContentOutputArgs } from "./getDatabaseDbNodeConsoleHistoryContent";
export const getDatabaseDbNodeConsoleHistoryContent: typeof import("./getDatabaseDbNodeConsoleHistoryContent").getDatabaseDbNodeConsoleHistoryContent = null as any;
export const getDatabaseDbNodeConsoleHistoryContentOutput: typeof import("./getDatabaseDbNodeConsoleHistoryContent").getDatabaseDbNodeConsoleHistoryContentOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseDbNodeConsoleHistoryContent","getDatabaseDbNodeConsoleHistoryContentOutput"], () => require("./getDatabaseDbNodeConsoleHistoryContent"));

export { GetDatabaseDbNodesArgs, GetDatabaseDbNodesResult, GetDatabaseDbNodesOutputArgs } from "./getDatabaseDbNodes";
export const getDatabaseDbNodes: typeof import("./getDatabaseDbNodes").getDatabaseDbNodes = null as any;
export const getDatabaseDbNodesOutput: typeof import("./getDatabaseDbNodes").getDatabaseDbNodesOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseDbNodes","getDatabaseDbNodesOutput"], () => require("./getDatabaseDbNodes"));

export { GetDatabaseDbServerArgs, GetDatabaseDbServerResult, GetDatabaseDbServerOutputArgs } from "./getDatabaseDbServer";
export const getDatabaseDbServer: typeof import("./getDatabaseDbServer").getDatabaseDbServer = null as any;
export const getDatabaseDbServerOutput: typeof import("./getDatabaseDbServer").getDatabaseDbServerOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseDbServer","getDatabaseDbServerOutput"], () => require("./getDatabaseDbServer"));

export { GetDatabaseDbServersArgs, GetDatabaseDbServersResult, GetDatabaseDbServersOutputArgs } from "./getDatabaseDbServers";
export const getDatabaseDbServers: typeof import("./getDatabaseDbServers").getDatabaseDbServers = null as any;
export const getDatabaseDbServersOutput: typeof import("./getDatabaseDbServers").getDatabaseDbServersOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseDbServers","getDatabaseDbServersOutput"], () => require("./getDatabaseDbServers"));

export { GetDatabaseDbSystemComputePerformancesArgs, GetDatabaseDbSystemComputePerformancesResult, GetDatabaseDbSystemComputePerformancesOutputArgs } from "./getDatabaseDbSystemComputePerformances";
export const getDatabaseDbSystemComputePerformances: typeof import("./getDatabaseDbSystemComputePerformances").getDatabaseDbSystemComputePerformances = null as any;
export const getDatabaseDbSystemComputePerformancesOutput: typeof import("./getDatabaseDbSystemComputePerformances").getDatabaseDbSystemComputePerformancesOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseDbSystemComputePerformances","getDatabaseDbSystemComputePerformancesOutput"], () => require("./getDatabaseDbSystemComputePerformances"));

export { GetDatabaseDbSystemPatchHistoryEntriesArgs, GetDatabaseDbSystemPatchHistoryEntriesResult, GetDatabaseDbSystemPatchHistoryEntriesOutputArgs } from "./getDatabaseDbSystemPatchHistoryEntries";
export const getDatabaseDbSystemPatchHistoryEntries: typeof import("./getDatabaseDbSystemPatchHistoryEntries").getDatabaseDbSystemPatchHistoryEntries = null as any;
export const getDatabaseDbSystemPatchHistoryEntriesOutput: typeof import("./getDatabaseDbSystemPatchHistoryEntries").getDatabaseDbSystemPatchHistoryEntriesOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseDbSystemPatchHistoryEntries","getDatabaseDbSystemPatchHistoryEntriesOutput"], () => require("./getDatabaseDbSystemPatchHistoryEntries"));

export { GetDatabaseDbSystemPatchesArgs, GetDatabaseDbSystemPatchesResult, GetDatabaseDbSystemPatchesOutputArgs } from "./getDatabaseDbSystemPatches";
export const getDatabaseDbSystemPatches: typeof import("./getDatabaseDbSystemPatches").getDatabaseDbSystemPatches = null as any;
export const getDatabaseDbSystemPatchesOutput: typeof import("./getDatabaseDbSystemPatches").getDatabaseDbSystemPatchesOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseDbSystemPatches","getDatabaseDbSystemPatchesOutput"], () => require("./getDatabaseDbSystemPatches"));

export { GetDatabaseDbSystemShapesArgs, GetDatabaseDbSystemShapesResult, GetDatabaseDbSystemShapesOutputArgs } from "./getDatabaseDbSystemShapes";
export const getDatabaseDbSystemShapes: typeof import("./getDatabaseDbSystemShapes").getDatabaseDbSystemShapes = null as any;
export const getDatabaseDbSystemShapesOutput: typeof import("./getDatabaseDbSystemShapes").getDatabaseDbSystemShapesOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseDbSystemShapes","getDatabaseDbSystemShapesOutput"], () => require("./getDatabaseDbSystemShapes"));

export { GetDatabaseDbSystemStoragePerformancesArgs, GetDatabaseDbSystemStoragePerformancesResult, GetDatabaseDbSystemStoragePerformancesOutputArgs } from "./getDatabaseDbSystemStoragePerformances";
export const getDatabaseDbSystemStoragePerformances: typeof import("./getDatabaseDbSystemStoragePerformances").getDatabaseDbSystemStoragePerformances = null as any;
export const getDatabaseDbSystemStoragePerformancesOutput: typeof import("./getDatabaseDbSystemStoragePerformances").getDatabaseDbSystemStoragePerformancesOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseDbSystemStoragePerformances","getDatabaseDbSystemStoragePerformancesOutput"], () => require("./getDatabaseDbSystemStoragePerformances"));

export { GetDatabaseDbSystemsArgs, GetDatabaseDbSystemsResult, GetDatabaseDbSystemsOutputArgs } from "./getDatabaseDbSystems";
export const getDatabaseDbSystems: typeof import("./getDatabaseDbSystems").getDatabaseDbSystems = null as any;
export const getDatabaseDbSystemsOutput: typeof import("./getDatabaseDbSystems").getDatabaseDbSystemsOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseDbSystems","getDatabaseDbSystemsOutput"], () => require("./getDatabaseDbSystems"));

export { GetDatabaseDbSystemsUpgradeHistoryEntriesArgs, GetDatabaseDbSystemsUpgradeHistoryEntriesResult, GetDatabaseDbSystemsUpgradeHistoryEntriesOutputArgs } from "./getDatabaseDbSystemsUpgradeHistoryEntries";
export const getDatabaseDbSystemsUpgradeHistoryEntries: typeof import("./getDatabaseDbSystemsUpgradeHistoryEntries").getDatabaseDbSystemsUpgradeHistoryEntries = null as any;
export const getDatabaseDbSystemsUpgradeHistoryEntriesOutput: typeof import("./getDatabaseDbSystemsUpgradeHistoryEntries").getDatabaseDbSystemsUpgradeHistoryEntriesOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseDbSystemsUpgradeHistoryEntries","getDatabaseDbSystemsUpgradeHistoryEntriesOutput"], () => require("./getDatabaseDbSystemsUpgradeHistoryEntries"));

export { GetDatabaseDbSystemsUpgradeHistoryEntryArgs, GetDatabaseDbSystemsUpgradeHistoryEntryResult, GetDatabaseDbSystemsUpgradeHistoryEntryOutputArgs } from "./getDatabaseDbSystemsUpgradeHistoryEntry";
export const getDatabaseDbSystemsUpgradeHistoryEntry: typeof import("./getDatabaseDbSystemsUpgradeHistoryEntry").getDatabaseDbSystemsUpgradeHistoryEntry = null as any;
export const getDatabaseDbSystemsUpgradeHistoryEntryOutput: typeof import("./getDatabaseDbSystemsUpgradeHistoryEntry").getDatabaseDbSystemsUpgradeHistoryEntryOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseDbSystemsUpgradeHistoryEntry","getDatabaseDbSystemsUpgradeHistoryEntryOutput"], () => require("./getDatabaseDbSystemsUpgradeHistoryEntry"));

export { GetDatabaseDbVersionsArgs, GetDatabaseDbVersionsResult, GetDatabaseDbVersionsOutputArgs } from "./getDatabaseDbVersions";
export const getDatabaseDbVersions: typeof import("./getDatabaseDbVersions").getDatabaseDbVersions = null as any;
export const getDatabaseDbVersionsOutput: typeof import("./getDatabaseDbVersions").getDatabaseDbVersionsOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseDbVersions","getDatabaseDbVersionsOutput"], () => require("./getDatabaseDbVersions"));

export { GetDatabaseExadataInfrastructureArgs, GetDatabaseExadataInfrastructureResult, GetDatabaseExadataInfrastructureOutputArgs } from "./getDatabaseExadataInfrastructure";
export const getDatabaseExadataInfrastructure: typeof import("./getDatabaseExadataInfrastructure").getDatabaseExadataInfrastructure = null as any;
export const getDatabaseExadataInfrastructureOutput: typeof import("./getDatabaseExadataInfrastructure").getDatabaseExadataInfrastructureOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseExadataInfrastructure","getDatabaseExadataInfrastructureOutput"], () => require("./getDatabaseExadataInfrastructure"));

export { GetDatabaseExadataInfrastructureDownloadConfigFileArgs, GetDatabaseExadataInfrastructureDownloadConfigFileResult, GetDatabaseExadataInfrastructureDownloadConfigFileOutputArgs } from "./getDatabaseExadataInfrastructureDownloadConfigFile";
export const getDatabaseExadataInfrastructureDownloadConfigFile: typeof import("./getDatabaseExadataInfrastructureDownloadConfigFile").getDatabaseExadataInfrastructureDownloadConfigFile = null as any;
export const getDatabaseExadataInfrastructureDownloadConfigFileOutput: typeof import("./getDatabaseExadataInfrastructureDownloadConfigFile").getDatabaseExadataInfrastructureDownloadConfigFileOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseExadataInfrastructureDownloadConfigFile","getDatabaseExadataInfrastructureDownloadConfigFileOutput"], () => require("./getDatabaseExadataInfrastructureDownloadConfigFile"));

export { GetDatabaseExadataInfrastructureUnAllocatedResourceArgs, GetDatabaseExadataInfrastructureUnAllocatedResourceResult, GetDatabaseExadataInfrastructureUnAllocatedResourceOutputArgs } from "./getDatabaseExadataInfrastructureUnAllocatedResource";
export const getDatabaseExadataInfrastructureUnAllocatedResource: typeof import("./getDatabaseExadataInfrastructureUnAllocatedResource").getDatabaseExadataInfrastructureUnAllocatedResource = null as any;
export const getDatabaseExadataInfrastructureUnAllocatedResourceOutput: typeof import("./getDatabaseExadataInfrastructureUnAllocatedResource").getDatabaseExadataInfrastructureUnAllocatedResourceOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseExadataInfrastructureUnAllocatedResource","getDatabaseExadataInfrastructureUnAllocatedResourceOutput"], () => require("./getDatabaseExadataInfrastructureUnAllocatedResource"));

export { GetDatabaseExadataInfrastructuresArgs, GetDatabaseExadataInfrastructuresResult, GetDatabaseExadataInfrastructuresOutputArgs } from "./getDatabaseExadataInfrastructures";
export const getDatabaseExadataInfrastructures: typeof import("./getDatabaseExadataInfrastructures").getDatabaseExadataInfrastructures = null as any;
export const getDatabaseExadataInfrastructuresOutput: typeof import("./getDatabaseExadataInfrastructures").getDatabaseExadataInfrastructuresOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseExadataInfrastructures","getDatabaseExadataInfrastructuresOutput"], () => require("./getDatabaseExadataInfrastructures"));

export { GetDatabaseExadataIormConfigArgs, GetDatabaseExadataIormConfigResult, GetDatabaseExadataIormConfigOutputArgs } from "./getDatabaseExadataIormConfig";
export const getDatabaseExadataIormConfig: typeof import("./getDatabaseExadataIormConfig").getDatabaseExadataIormConfig = null as any;
export const getDatabaseExadataIormConfigOutput: typeof import("./getDatabaseExadataIormConfig").getDatabaseExadataIormConfigOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseExadataIormConfig","getDatabaseExadataIormConfigOutput"], () => require("./getDatabaseExadataIormConfig"));

export { GetDatabaseExadbVmClusterArgs, GetDatabaseExadbVmClusterResult, GetDatabaseExadbVmClusterOutputArgs } from "./getDatabaseExadbVmCluster";
export const getDatabaseExadbVmCluster: typeof import("./getDatabaseExadbVmCluster").getDatabaseExadbVmCluster = null as any;
export const getDatabaseExadbVmClusterOutput: typeof import("./getDatabaseExadbVmCluster").getDatabaseExadbVmClusterOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseExadbVmCluster","getDatabaseExadbVmClusterOutput"], () => require("./getDatabaseExadbVmCluster"));

export { GetDatabaseExadbVmClusterUpdateArgs, GetDatabaseExadbVmClusterUpdateResult, GetDatabaseExadbVmClusterUpdateOutputArgs } from "./getDatabaseExadbVmClusterUpdate";
export const getDatabaseExadbVmClusterUpdate: typeof import("./getDatabaseExadbVmClusterUpdate").getDatabaseExadbVmClusterUpdate = null as any;
export const getDatabaseExadbVmClusterUpdateOutput: typeof import("./getDatabaseExadbVmClusterUpdate").getDatabaseExadbVmClusterUpdateOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseExadbVmClusterUpdate","getDatabaseExadbVmClusterUpdateOutput"], () => require("./getDatabaseExadbVmClusterUpdate"));

export { GetDatabaseExadbVmClusterUpdateHistoryEntriesArgs, GetDatabaseExadbVmClusterUpdateHistoryEntriesResult, GetDatabaseExadbVmClusterUpdateHistoryEntriesOutputArgs } from "./getDatabaseExadbVmClusterUpdateHistoryEntries";
export const getDatabaseExadbVmClusterUpdateHistoryEntries: typeof import("./getDatabaseExadbVmClusterUpdateHistoryEntries").getDatabaseExadbVmClusterUpdateHistoryEntries = null as any;
export const getDatabaseExadbVmClusterUpdateHistoryEntriesOutput: typeof import("./getDatabaseExadbVmClusterUpdateHistoryEntries").getDatabaseExadbVmClusterUpdateHistoryEntriesOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseExadbVmClusterUpdateHistoryEntries","getDatabaseExadbVmClusterUpdateHistoryEntriesOutput"], () => require("./getDatabaseExadbVmClusterUpdateHistoryEntries"));

export { GetDatabaseExadbVmClusterUpdateHistoryEntryArgs, GetDatabaseExadbVmClusterUpdateHistoryEntryResult, GetDatabaseExadbVmClusterUpdateHistoryEntryOutputArgs } from "./getDatabaseExadbVmClusterUpdateHistoryEntry";
export const getDatabaseExadbVmClusterUpdateHistoryEntry: typeof import("./getDatabaseExadbVmClusterUpdateHistoryEntry").getDatabaseExadbVmClusterUpdateHistoryEntry = null as any;
export const getDatabaseExadbVmClusterUpdateHistoryEntryOutput: typeof import("./getDatabaseExadbVmClusterUpdateHistoryEntry").getDatabaseExadbVmClusterUpdateHistoryEntryOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseExadbVmClusterUpdateHistoryEntry","getDatabaseExadbVmClusterUpdateHistoryEntryOutput"], () => require("./getDatabaseExadbVmClusterUpdateHistoryEntry"));

export { GetDatabaseExadbVmClusterUpdatesArgs, GetDatabaseExadbVmClusterUpdatesResult, GetDatabaseExadbVmClusterUpdatesOutputArgs } from "./getDatabaseExadbVmClusterUpdates";
export const getDatabaseExadbVmClusterUpdates: typeof import("./getDatabaseExadbVmClusterUpdates").getDatabaseExadbVmClusterUpdates = null as any;
export const getDatabaseExadbVmClusterUpdatesOutput: typeof import("./getDatabaseExadbVmClusterUpdates").getDatabaseExadbVmClusterUpdatesOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseExadbVmClusterUpdates","getDatabaseExadbVmClusterUpdatesOutput"], () => require("./getDatabaseExadbVmClusterUpdates"));

export { GetDatabaseExadbVmClustersArgs, GetDatabaseExadbVmClustersResult, GetDatabaseExadbVmClustersOutputArgs } from "./getDatabaseExadbVmClusters";
export const getDatabaseExadbVmClusters: typeof import("./getDatabaseExadbVmClusters").getDatabaseExadbVmClusters = null as any;
export const getDatabaseExadbVmClustersOutput: typeof import("./getDatabaseExadbVmClusters").getDatabaseExadbVmClustersOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseExadbVmClusters","getDatabaseExadbVmClustersOutput"], () => require("./getDatabaseExadbVmClusters"));

export { GetDatabaseExascaleDbStorageVaultArgs, GetDatabaseExascaleDbStorageVaultResult, GetDatabaseExascaleDbStorageVaultOutputArgs } from "./getDatabaseExascaleDbStorageVault";
export const getDatabaseExascaleDbStorageVault: typeof import("./getDatabaseExascaleDbStorageVault").getDatabaseExascaleDbStorageVault = null as any;
export const getDatabaseExascaleDbStorageVaultOutput: typeof import("./getDatabaseExascaleDbStorageVault").getDatabaseExascaleDbStorageVaultOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseExascaleDbStorageVault","getDatabaseExascaleDbStorageVaultOutput"], () => require("./getDatabaseExascaleDbStorageVault"));

export { GetDatabaseExascaleDbStorageVaultsArgs, GetDatabaseExascaleDbStorageVaultsResult, GetDatabaseExascaleDbStorageVaultsOutputArgs } from "./getDatabaseExascaleDbStorageVaults";
export const getDatabaseExascaleDbStorageVaults: typeof import("./getDatabaseExascaleDbStorageVaults").getDatabaseExascaleDbStorageVaults = null as any;
export const getDatabaseExascaleDbStorageVaultsOutput: typeof import("./getDatabaseExascaleDbStorageVaults").getDatabaseExascaleDbStorageVaultsOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseExascaleDbStorageVaults","getDatabaseExascaleDbStorageVaultsOutput"], () => require("./getDatabaseExascaleDbStorageVaults"));

export { GetDatabaseExternalContainerDatabaseArgs, GetDatabaseExternalContainerDatabaseResult, GetDatabaseExternalContainerDatabaseOutputArgs } from "./getDatabaseExternalContainerDatabase";
export const getDatabaseExternalContainerDatabase: typeof import("./getDatabaseExternalContainerDatabase").getDatabaseExternalContainerDatabase = null as any;
export const getDatabaseExternalContainerDatabaseOutput: typeof import("./getDatabaseExternalContainerDatabase").getDatabaseExternalContainerDatabaseOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseExternalContainerDatabase","getDatabaseExternalContainerDatabaseOutput"], () => require("./getDatabaseExternalContainerDatabase"));

export { GetDatabaseExternalContainerDatabasesArgs, GetDatabaseExternalContainerDatabasesResult, GetDatabaseExternalContainerDatabasesOutputArgs } from "./getDatabaseExternalContainerDatabases";
export const getDatabaseExternalContainerDatabases: typeof import("./getDatabaseExternalContainerDatabases").getDatabaseExternalContainerDatabases = null as any;
export const getDatabaseExternalContainerDatabasesOutput: typeof import("./getDatabaseExternalContainerDatabases").getDatabaseExternalContainerDatabasesOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseExternalContainerDatabases","getDatabaseExternalContainerDatabasesOutput"], () => require("./getDatabaseExternalContainerDatabases"));

export { GetDatabaseExternalDatabaseConnectorArgs, GetDatabaseExternalDatabaseConnectorResult, GetDatabaseExternalDatabaseConnectorOutputArgs } from "./getDatabaseExternalDatabaseConnector";
export const getDatabaseExternalDatabaseConnector: typeof import("./getDatabaseExternalDatabaseConnector").getDatabaseExternalDatabaseConnector = null as any;
export const getDatabaseExternalDatabaseConnectorOutput: typeof import("./getDatabaseExternalDatabaseConnector").getDatabaseExternalDatabaseConnectorOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseExternalDatabaseConnector","getDatabaseExternalDatabaseConnectorOutput"], () => require("./getDatabaseExternalDatabaseConnector"));

export { GetDatabaseExternalDatabaseConnectorsArgs, GetDatabaseExternalDatabaseConnectorsResult, GetDatabaseExternalDatabaseConnectorsOutputArgs } from "./getDatabaseExternalDatabaseConnectors";
export const getDatabaseExternalDatabaseConnectors: typeof import("./getDatabaseExternalDatabaseConnectors").getDatabaseExternalDatabaseConnectors = null as any;
export const getDatabaseExternalDatabaseConnectorsOutput: typeof import("./getDatabaseExternalDatabaseConnectors").getDatabaseExternalDatabaseConnectorsOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseExternalDatabaseConnectors","getDatabaseExternalDatabaseConnectorsOutput"], () => require("./getDatabaseExternalDatabaseConnectors"));

export { GetDatabaseExternalNonContainerDatabaseArgs, GetDatabaseExternalNonContainerDatabaseResult, GetDatabaseExternalNonContainerDatabaseOutputArgs } from "./getDatabaseExternalNonContainerDatabase";
export const getDatabaseExternalNonContainerDatabase: typeof import("./getDatabaseExternalNonContainerDatabase").getDatabaseExternalNonContainerDatabase = null as any;
export const getDatabaseExternalNonContainerDatabaseOutput: typeof import("./getDatabaseExternalNonContainerDatabase").getDatabaseExternalNonContainerDatabaseOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseExternalNonContainerDatabase","getDatabaseExternalNonContainerDatabaseOutput"], () => require("./getDatabaseExternalNonContainerDatabase"));

export { GetDatabaseExternalNonContainerDatabasesArgs, GetDatabaseExternalNonContainerDatabasesResult, GetDatabaseExternalNonContainerDatabasesOutputArgs } from "./getDatabaseExternalNonContainerDatabases";
export const getDatabaseExternalNonContainerDatabases: typeof import("./getDatabaseExternalNonContainerDatabases").getDatabaseExternalNonContainerDatabases = null as any;
export const getDatabaseExternalNonContainerDatabasesOutput: typeof import("./getDatabaseExternalNonContainerDatabases").getDatabaseExternalNonContainerDatabasesOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseExternalNonContainerDatabases","getDatabaseExternalNonContainerDatabasesOutput"], () => require("./getDatabaseExternalNonContainerDatabases"));

export { GetDatabaseExternalPluggableDatabaseArgs, GetDatabaseExternalPluggableDatabaseResult, GetDatabaseExternalPluggableDatabaseOutputArgs } from "./getDatabaseExternalPluggableDatabase";
export const getDatabaseExternalPluggableDatabase: typeof import("./getDatabaseExternalPluggableDatabase").getDatabaseExternalPluggableDatabase = null as any;
export const getDatabaseExternalPluggableDatabaseOutput: typeof import("./getDatabaseExternalPluggableDatabase").getDatabaseExternalPluggableDatabaseOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseExternalPluggableDatabase","getDatabaseExternalPluggableDatabaseOutput"], () => require("./getDatabaseExternalPluggableDatabase"));

export { GetDatabaseExternalPluggableDatabasesArgs, GetDatabaseExternalPluggableDatabasesResult, GetDatabaseExternalPluggableDatabasesOutputArgs } from "./getDatabaseExternalPluggableDatabases";
export const getDatabaseExternalPluggableDatabases: typeof import("./getDatabaseExternalPluggableDatabases").getDatabaseExternalPluggableDatabases = null as any;
export const getDatabaseExternalPluggableDatabasesOutput: typeof import("./getDatabaseExternalPluggableDatabases").getDatabaseExternalPluggableDatabasesOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseExternalPluggableDatabases","getDatabaseExternalPluggableDatabasesOutput"], () => require("./getDatabaseExternalPluggableDatabases"));

export { GetDatabaseFlexComponentsArgs, GetDatabaseFlexComponentsResult, GetDatabaseFlexComponentsOutputArgs } from "./getDatabaseFlexComponents";
export const getDatabaseFlexComponents: typeof import("./getDatabaseFlexComponents").getDatabaseFlexComponents = null as any;
export const getDatabaseFlexComponentsOutput: typeof import("./getDatabaseFlexComponents").getDatabaseFlexComponentsOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseFlexComponents","getDatabaseFlexComponentsOutput"], () => require("./getDatabaseFlexComponents"));

export { GetDatabaseGiVersionMinorVersionsArgs, GetDatabaseGiVersionMinorVersionsResult, GetDatabaseGiVersionMinorVersionsOutputArgs } from "./getDatabaseGiVersionMinorVersions";
export const getDatabaseGiVersionMinorVersions: typeof import("./getDatabaseGiVersionMinorVersions").getDatabaseGiVersionMinorVersions = null as any;
export const getDatabaseGiVersionMinorVersionsOutput: typeof import("./getDatabaseGiVersionMinorVersions").getDatabaseGiVersionMinorVersionsOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseGiVersionMinorVersions","getDatabaseGiVersionMinorVersionsOutput"], () => require("./getDatabaseGiVersionMinorVersions"));

export { GetDatabaseGiVersionsArgs, GetDatabaseGiVersionsResult, GetDatabaseGiVersionsOutputArgs } from "./getDatabaseGiVersions";
export const getDatabaseGiVersions: typeof import("./getDatabaseGiVersions").getDatabaseGiVersions = null as any;
export const getDatabaseGiVersionsOutput: typeof import("./getDatabaseGiVersions").getDatabaseGiVersionsOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseGiVersions","getDatabaseGiVersionsOutput"], () => require("./getDatabaseGiVersions"));

export { GetDatabaseInfrastructureTargetVersionArgs, GetDatabaseInfrastructureTargetVersionResult, GetDatabaseInfrastructureTargetVersionOutputArgs } from "./getDatabaseInfrastructureTargetVersion";
export const getDatabaseInfrastructureTargetVersion: typeof import("./getDatabaseInfrastructureTargetVersion").getDatabaseInfrastructureTargetVersion = null as any;
export const getDatabaseInfrastructureTargetVersionOutput: typeof import("./getDatabaseInfrastructureTargetVersion").getDatabaseInfrastructureTargetVersionOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseInfrastructureTargetVersion","getDatabaseInfrastructureTargetVersionOutput"], () => require("./getDatabaseInfrastructureTargetVersion"));

export { GetDatabaseKeyStoreArgs, GetDatabaseKeyStoreResult, GetDatabaseKeyStoreOutputArgs } from "./getDatabaseKeyStore";
export const getDatabaseKeyStore: typeof import("./getDatabaseKeyStore").getDatabaseKeyStore = null as any;
export const getDatabaseKeyStoreOutput: typeof import("./getDatabaseKeyStore").getDatabaseKeyStoreOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseKeyStore","getDatabaseKeyStoreOutput"], () => require("./getDatabaseKeyStore"));

export { GetDatabaseKeyStoresArgs, GetDatabaseKeyStoresResult, GetDatabaseKeyStoresOutputArgs } from "./getDatabaseKeyStores";
export const getDatabaseKeyStores: typeof import("./getDatabaseKeyStores").getDatabaseKeyStores = null as any;
export const getDatabaseKeyStoresOutput: typeof import("./getDatabaseKeyStores").getDatabaseKeyStoresOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseKeyStores","getDatabaseKeyStoresOutput"], () => require("./getDatabaseKeyStores"));

export { GetDatabaseMaintenanceRunArgs, GetDatabaseMaintenanceRunResult, GetDatabaseMaintenanceRunOutputArgs } from "./getDatabaseMaintenanceRun";
export const getDatabaseMaintenanceRun: typeof import("./getDatabaseMaintenanceRun").getDatabaseMaintenanceRun = null as any;
export const getDatabaseMaintenanceRunOutput: typeof import("./getDatabaseMaintenanceRun").getDatabaseMaintenanceRunOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseMaintenanceRun","getDatabaseMaintenanceRunOutput"], () => require("./getDatabaseMaintenanceRun"));

export { GetDatabaseMaintenanceRunHistoriesArgs, GetDatabaseMaintenanceRunHistoriesResult, GetDatabaseMaintenanceRunHistoriesOutputArgs } from "./getDatabaseMaintenanceRunHistories";
export const getDatabaseMaintenanceRunHistories: typeof import("./getDatabaseMaintenanceRunHistories").getDatabaseMaintenanceRunHistories = null as any;
export const getDatabaseMaintenanceRunHistoriesOutput: typeof import("./getDatabaseMaintenanceRunHistories").getDatabaseMaintenanceRunHistoriesOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseMaintenanceRunHistories","getDatabaseMaintenanceRunHistoriesOutput"], () => require("./getDatabaseMaintenanceRunHistories"));

export { GetDatabaseMaintenanceRunHistoryArgs, GetDatabaseMaintenanceRunHistoryResult, GetDatabaseMaintenanceRunHistoryOutputArgs } from "./getDatabaseMaintenanceRunHistory";
export const getDatabaseMaintenanceRunHistory: typeof import("./getDatabaseMaintenanceRunHistory").getDatabaseMaintenanceRunHistory = null as any;
export const getDatabaseMaintenanceRunHistoryOutput: typeof import("./getDatabaseMaintenanceRunHistory").getDatabaseMaintenanceRunHistoryOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseMaintenanceRunHistory","getDatabaseMaintenanceRunHistoryOutput"], () => require("./getDatabaseMaintenanceRunHistory"));

export { GetDatabaseMaintenanceRunsArgs, GetDatabaseMaintenanceRunsResult, GetDatabaseMaintenanceRunsOutputArgs } from "./getDatabaseMaintenanceRuns";
export const getDatabaseMaintenanceRuns: typeof import("./getDatabaseMaintenanceRuns").getDatabaseMaintenanceRuns = null as any;
export const getDatabaseMaintenanceRunsOutput: typeof import("./getDatabaseMaintenanceRuns").getDatabaseMaintenanceRunsOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseMaintenanceRuns","getDatabaseMaintenanceRunsOutput"], () => require("./getDatabaseMaintenanceRuns"));

export { GetDatabaseManagementDbManagementPrivateEndpointArgs, GetDatabaseManagementDbManagementPrivateEndpointResult, GetDatabaseManagementDbManagementPrivateEndpointOutputArgs } from "./getDatabaseManagementDbManagementPrivateEndpoint";
export const getDatabaseManagementDbManagementPrivateEndpoint: typeof import("./getDatabaseManagementDbManagementPrivateEndpoint").getDatabaseManagementDbManagementPrivateEndpoint = null as any;
export const getDatabaseManagementDbManagementPrivateEndpointOutput: typeof import("./getDatabaseManagementDbManagementPrivateEndpoint").getDatabaseManagementDbManagementPrivateEndpointOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseManagementDbManagementPrivateEndpoint","getDatabaseManagementDbManagementPrivateEndpointOutput"], () => require("./getDatabaseManagementDbManagementPrivateEndpoint"));

export { GetDatabaseManagementDbManagementPrivateEndpointAssociatedDatabaseArgs, GetDatabaseManagementDbManagementPrivateEndpointAssociatedDatabaseResult, GetDatabaseManagementDbManagementPrivateEndpointAssociatedDatabaseOutputArgs } from "./getDatabaseManagementDbManagementPrivateEndpointAssociatedDatabase";
export const getDatabaseManagementDbManagementPrivateEndpointAssociatedDatabase: typeof import("./getDatabaseManagementDbManagementPrivateEndpointAssociatedDatabase").getDatabaseManagementDbManagementPrivateEndpointAssociatedDatabase = null as any;
export const getDatabaseManagementDbManagementPrivateEndpointAssociatedDatabaseOutput: typeof import("./getDatabaseManagementDbManagementPrivateEndpointAssociatedDatabase").getDatabaseManagementDbManagementPrivateEndpointAssociatedDatabaseOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseManagementDbManagementPrivateEndpointAssociatedDatabase","getDatabaseManagementDbManagementPrivateEndpointAssociatedDatabaseOutput"], () => require("./getDatabaseManagementDbManagementPrivateEndpointAssociatedDatabase"));

export { GetDatabaseManagementDbManagementPrivateEndpointAssociatedDatabasesArgs, GetDatabaseManagementDbManagementPrivateEndpointAssociatedDatabasesResult, GetDatabaseManagementDbManagementPrivateEndpointAssociatedDatabasesOutputArgs } from "./getDatabaseManagementDbManagementPrivateEndpointAssociatedDatabases";
export const getDatabaseManagementDbManagementPrivateEndpointAssociatedDatabases: typeof import("./getDatabaseManagementDbManagementPrivateEndpointAssociatedDatabases").getDatabaseManagementDbManagementPrivateEndpointAssociatedDatabases = null as any;
export const getDatabaseManagementDbManagementPrivateEndpointAssociatedDatabasesOutput: typeof import("./getDatabaseManagementDbManagementPrivateEndpointAssociatedDatabases").getDatabaseManagementDbManagementPrivateEndpointAssociatedDatabasesOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseManagementDbManagementPrivateEndpointAssociatedDatabases","getDatabaseManagementDbManagementPrivateEndpointAssociatedDatabasesOutput"], () => require("./getDatabaseManagementDbManagementPrivateEndpointAssociatedDatabases"));

export { GetDatabaseManagementDbManagementPrivateEndpointsArgs, GetDatabaseManagementDbManagementPrivateEndpointsResult, GetDatabaseManagementDbManagementPrivateEndpointsOutputArgs } from "./getDatabaseManagementDbManagementPrivateEndpoints";
export const getDatabaseManagementDbManagementPrivateEndpoints: typeof import("./getDatabaseManagementDbManagementPrivateEndpoints").getDatabaseManagementDbManagementPrivateEndpoints = null as any;
export const getDatabaseManagementDbManagementPrivateEndpointsOutput: typeof import("./getDatabaseManagementDbManagementPrivateEndpoints").getDatabaseManagementDbManagementPrivateEndpointsOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseManagementDbManagementPrivateEndpoints","getDatabaseManagementDbManagementPrivateEndpointsOutput"], () => require("./getDatabaseManagementDbManagementPrivateEndpoints"));

export { GetDatabaseManagementExternalAsmArgs, GetDatabaseManagementExternalAsmResult, GetDatabaseManagementExternalAsmOutputArgs } from "./getDatabaseManagementExternalAsm";
export const getDatabaseManagementExternalAsm: typeof import("./getDatabaseManagementExternalAsm").getDatabaseManagementExternalAsm = null as any;
export const getDatabaseManagementExternalAsmOutput: typeof import("./getDatabaseManagementExternalAsm").getDatabaseManagementExternalAsmOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseManagementExternalAsm","getDatabaseManagementExternalAsmOutput"], () => require("./getDatabaseManagementExternalAsm"));

export { GetDatabaseManagementExternalAsmConfigurationArgs, GetDatabaseManagementExternalAsmConfigurationResult, GetDatabaseManagementExternalAsmConfigurationOutputArgs } from "./getDatabaseManagementExternalAsmConfiguration";
export const getDatabaseManagementExternalAsmConfiguration: typeof import("./getDatabaseManagementExternalAsmConfiguration").getDatabaseManagementExternalAsmConfiguration = null as any;
export const getDatabaseManagementExternalAsmConfigurationOutput: typeof import("./getDatabaseManagementExternalAsmConfiguration").getDatabaseManagementExternalAsmConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseManagementExternalAsmConfiguration","getDatabaseManagementExternalAsmConfigurationOutput"], () => require("./getDatabaseManagementExternalAsmConfiguration"));

export { GetDatabaseManagementExternalAsmDiskGroupsArgs, GetDatabaseManagementExternalAsmDiskGroupsResult, GetDatabaseManagementExternalAsmDiskGroupsOutputArgs } from "./getDatabaseManagementExternalAsmDiskGroups";
export const getDatabaseManagementExternalAsmDiskGroups: typeof import("./getDatabaseManagementExternalAsmDiskGroups").getDatabaseManagementExternalAsmDiskGroups = null as any;
export const getDatabaseManagementExternalAsmDiskGroupsOutput: typeof import("./getDatabaseManagementExternalAsmDiskGroups").getDatabaseManagementExternalAsmDiskGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseManagementExternalAsmDiskGroups","getDatabaseManagementExternalAsmDiskGroupsOutput"], () => require("./getDatabaseManagementExternalAsmDiskGroups"));

export { GetDatabaseManagementExternalAsmInstanceArgs, GetDatabaseManagementExternalAsmInstanceResult, GetDatabaseManagementExternalAsmInstanceOutputArgs } from "./getDatabaseManagementExternalAsmInstance";
export const getDatabaseManagementExternalAsmInstance: typeof import("./getDatabaseManagementExternalAsmInstance").getDatabaseManagementExternalAsmInstance = null as any;
export const getDatabaseManagementExternalAsmInstanceOutput: typeof import("./getDatabaseManagementExternalAsmInstance").getDatabaseManagementExternalAsmInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseManagementExternalAsmInstance","getDatabaseManagementExternalAsmInstanceOutput"], () => require("./getDatabaseManagementExternalAsmInstance"));

export { GetDatabaseManagementExternalAsmInstancesArgs, GetDatabaseManagementExternalAsmInstancesResult, GetDatabaseManagementExternalAsmInstancesOutputArgs } from "./getDatabaseManagementExternalAsmInstances";
export const getDatabaseManagementExternalAsmInstances: typeof import("./getDatabaseManagementExternalAsmInstances").getDatabaseManagementExternalAsmInstances = null as any;
export const getDatabaseManagementExternalAsmInstancesOutput: typeof import("./getDatabaseManagementExternalAsmInstances").getDatabaseManagementExternalAsmInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseManagementExternalAsmInstances","getDatabaseManagementExternalAsmInstancesOutput"], () => require("./getDatabaseManagementExternalAsmInstances"));

export { GetDatabaseManagementExternalAsmUsersArgs, GetDatabaseManagementExternalAsmUsersResult, GetDatabaseManagementExternalAsmUsersOutputArgs } from "./getDatabaseManagementExternalAsmUsers";
export const getDatabaseManagementExternalAsmUsers: typeof import("./getDatabaseManagementExternalAsmUsers").getDatabaseManagementExternalAsmUsers = null as any;
export const getDatabaseManagementExternalAsmUsersOutput: typeof import("./getDatabaseManagementExternalAsmUsers").getDatabaseManagementExternalAsmUsersOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseManagementExternalAsmUsers","getDatabaseManagementExternalAsmUsersOutput"], () => require("./getDatabaseManagementExternalAsmUsers"));

export { GetDatabaseManagementExternalAsmsArgs, GetDatabaseManagementExternalAsmsResult, GetDatabaseManagementExternalAsmsOutputArgs } from "./getDatabaseManagementExternalAsms";
export const getDatabaseManagementExternalAsms: typeof import("./getDatabaseManagementExternalAsms").getDatabaseManagementExternalAsms = null as any;
export const getDatabaseManagementExternalAsmsOutput: typeof import("./getDatabaseManagementExternalAsms").getDatabaseManagementExternalAsmsOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseManagementExternalAsms","getDatabaseManagementExternalAsmsOutput"], () => require("./getDatabaseManagementExternalAsms"));

export { GetDatabaseManagementExternalClusterArgs, GetDatabaseManagementExternalClusterResult, GetDatabaseManagementExternalClusterOutputArgs } from "./getDatabaseManagementExternalCluster";
export const getDatabaseManagementExternalCluster: typeof import("./getDatabaseManagementExternalCluster").getDatabaseManagementExternalCluster = null as any;
export const getDatabaseManagementExternalClusterOutput: typeof import("./getDatabaseManagementExternalCluster").getDatabaseManagementExternalClusterOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseManagementExternalCluster","getDatabaseManagementExternalClusterOutput"], () => require("./getDatabaseManagementExternalCluster"));

export { GetDatabaseManagementExternalClusterInstanceArgs, GetDatabaseManagementExternalClusterInstanceResult, GetDatabaseManagementExternalClusterInstanceOutputArgs } from "./getDatabaseManagementExternalClusterInstance";
export const getDatabaseManagementExternalClusterInstance: typeof import("./getDatabaseManagementExternalClusterInstance").getDatabaseManagementExternalClusterInstance = null as any;
export const getDatabaseManagementExternalClusterInstanceOutput: typeof import("./getDatabaseManagementExternalClusterInstance").getDatabaseManagementExternalClusterInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseManagementExternalClusterInstance","getDatabaseManagementExternalClusterInstanceOutput"], () => require("./getDatabaseManagementExternalClusterInstance"));

export { GetDatabaseManagementExternalClusterInstancesArgs, GetDatabaseManagementExternalClusterInstancesResult, GetDatabaseManagementExternalClusterInstancesOutputArgs } from "./getDatabaseManagementExternalClusterInstances";
export const getDatabaseManagementExternalClusterInstances: typeof import("./getDatabaseManagementExternalClusterInstances").getDatabaseManagementExternalClusterInstances = null as any;
export const getDatabaseManagementExternalClusterInstancesOutput: typeof import("./getDatabaseManagementExternalClusterInstances").getDatabaseManagementExternalClusterInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseManagementExternalClusterInstances","getDatabaseManagementExternalClusterInstancesOutput"], () => require("./getDatabaseManagementExternalClusterInstances"));

export { GetDatabaseManagementExternalClustersArgs, GetDatabaseManagementExternalClustersResult, GetDatabaseManagementExternalClustersOutputArgs } from "./getDatabaseManagementExternalClusters";
export const getDatabaseManagementExternalClusters: typeof import("./getDatabaseManagementExternalClusters").getDatabaseManagementExternalClusters = null as any;
export const getDatabaseManagementExternalClustersOutput: typeof import("./getDatabaseManagementExternalClusters").getDatabaseManagementExternalClustersOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseManagementExternalClusters","getDatabaseManagementExternalClustersOutput"], () => require("./getDatabaseManagementExternalClusters"));

export { GetDatabaseManagementExternalDatabasesArgs, GetDatabaseManagementExternalDatabasesResult, GetDatabaseManagementExternalDatabasesOutputArgs } from "./getDatabaseManagementExternalDatabases";
export const getDatabaseManagementExternalDatabases: typeof import("./getDatabaseManagementExternalDatabases").getDatabaseManagementExternalDatabases = null as any;
export const getDatabaseManagementExternalDatabasesOutput: typeof import("./getDatabaseManagementExternalDatabases").getDatabaseManagementExternalDatabasesOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseManagementExternalDatabases","getDatabaseManagementExternalDatabasesOutput"], () => require("./getDatabaseManagementExternalDatabases"));

export { GetDatabaseManagementExternalDbHomeArgs, GetDatabaseManagementExternalDbHomeResult, GetDatabaseManagementExternalDbHomeOutputArgs } from "./getDatabaseManagementExternalDbHome";
export const getDatabaseManagementExternalDbHome: typeof import("./getDatabaseManagementExternalDbHome").getDatabaseManagementExternalDbHome = null as any;
export const getDatabaseManagementExternalDbHomeOutput: typeof import("./getDatabaseManagementExternalDbHome").getDatabaseManagementExternalDbHomeOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseManagementExternalDbHome","getDatabaseManagementExternalDbHomeOutput"], () => require("./getDatabaseManagementExternalDbHome"));

export { GetDatabaseManagementExternalDbHomesArgs, GetDatabaseManagementExternalDbHomesResult, GetDatabaseManagementExternalDbHomesOutputArgs } from "./getDatabaseManagementExternalDbHomes";
export const getDatabaseManagementExternalDbHomes: typeof import("./getDatabaseManagementExternalDbHomes").getDatabaseManagementExternalDbHomes = null as any;
export const getDatabaseManagementExternalDbHomesOutput: typeof import("./getDatabaseManagementExternalDbHomes").getDatabaseManagementExternalDbHomesOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseManagementExternalDbHomes","getDatabaseManagementExternalDbHomesOutput"], () => require("./getDatabaseManagementExternalDbHomes"));

export { GetDatabaseManagementExternalDbNodeArgs, GetDatabaseManagementExternalDbNodeResult, GetDatabaseManagementExternalDbNodeOutputArgs } from "./getDatabaseManagementExternalDbNode";
export const getDatabaseManagementExternalDbNode: typeof import("./getDatabaseManagementExternalDbNode").getDatabaseManagementExternalDbNode = null as any;
export const getDatabaseManagementExternalDbNodeOutput: typeof import("./getDatabaseManagementExternalDbNode").getDatabaseManagementExternalDbNodeOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseManagementExternalDbNode","getDatabaseManagementExternalDbNodeOutput"], () => require("./getDatabaseManagementExternalDbNode"));

export { GetDatabaseManagementExternalDbNodesArgs, GetDatabaseManagementExternalDbNodesResult, GetDatabaseManagementExternalDbNodesOutputArgs } from "./getDatabaseManagementExternalDbNodes";
export const getDatabaseManagementExternalDbNodes: typeof import("./getDatabaseManagementExternalDbNodes").getDatabaseManagementExternalDbNodes = null as any;
export const getDatabaseManagementExternalDbNodesOutput: typeof import("./getDatabaseManagementExternalDbNodes").getDatabaseManagementExternalDbNodesOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseManagementExternalDbNodes","getDatabaseManagementExternalDbNodesOutput"], () => require("./getDatabaseManagementExternalDbNodes"));

export { GetDatabaseManagementExternalDbSystemArgs, GetDatabaseManagementExternalDbSystemResult, GetDatabaseManagementExternalDbSystemOutputArgs } from "./getDatabaseManagementExternalDbSystem";
export const getDatabaseManagementExternalDbSystem: typeof import("./getDatabaseManagementExternalDbSystem").getDatabaseManagementExternalDbSystem = null as any;
export const getDatabaseManagementExternalDbSystemOutput: typeof import("./getDatabaseManagementExternalDbSystem").getDatabaseManagementExternalDbSystemOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseManagementExternalDbSystem","getDatabaseManagementExternalDbSystemOutput"], () => require("./getDatabaseManagementExternalDbSystem"));

export { GetDatabaseManagementExternalDbSystemConnectorArgs, GetDatabaseManagementExternalDbSystemConnectorResult, GetDatabaseManagementExternalDbSystemConnectorOutputArgs } from "./getDatabaseManagementExternalDbSystemConnector";
export const getDatabaseManagementExternalDbSystemConnector: typeof import("./getDatabaseManagementExternalDbSystemConnector").getDatabaseManagementExternalDbSystemConnector = null as any;
export const getDatabaseManagementExternalDbSystemConnectorOutput: typeof import("./getDatabaseManagementExternalDbSystemConnector").getDatabaseManagementExternalDbSystemConnectorOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseManagementExternalDbSystemConnector","getDatabaseManagementExternalDbSystemConnectorOutput"], () => require("./getDatabaseManagementExternalDbSystemConnector"));

export { GetDatabaseManagementExternalDbSystemConnectorsArgs, GetDatabaseManagementExternalDbSystemConnectorsResult, GetDatabaseManagementExternalDbSystemConnectorsOutputArgs } from "./getDatabaseManagementExternalDbSystemConnectors";
export const getDatabaseManagementExternalDbSystemConnectors: typeof import("./getDatabaseManagementExternalDbSystemConnectors").getDatabaseManagementExternalDbSystemConnectors = null as any;
export const getDatabaseManagementExternalDbSystemConnectorsOutput: typeof import("./getDatabaseManagementExternalDbSystemConnectors").getDatabaseManagementExternalDbSystemConnectorsOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseManagementExternalDbSystemConnectors","getDatabaseManagementExternalDbSystemConnectorsOutput"], () => require("./getDatabaseManagementExternalDbSystemConnectors"));

export { GetDatabaseManagementExternalDbSystemDiscoveriesArgs, GetDatabaseManagementExternalDbSystemDiscoveriesResult, GetDatabaseManagementExternalDbSystemDiscoveriesOutputArgs } from "./getDatabaseManagementExternalDbSystemDiscoveries";
export const getDatabaseManagementExternalDbSystemDiscoveries: typeof import("./getDatabaseManagementExternalDbSystemDiscoveries").getDatabaseManagementExternalDbSystemDiscoveries = null as any;
export const getDatabaseManagementExternalDbSystemDiscoveriesOutput: typeof import("./getDatabaseManagementExternalDbSystemDiscoveries").getDatabaseManagementExternalDbSystemDiscoveriesOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseManagementExternalDbSystemDiscoveries","getDatabaseManagementExternalDbSystemDiscoveriesOutput"], () => require("./getDatabaseManagementExternalDbSystemDiscoveries"));

export { GetDatabaseManagementExternalDbSystemDiscoveryArgs, GetDatabaseManagementExternalDbSystemDiscoveryResult, GetDatabaseManagementExternalDbSystemDiscoveryOutputArgs } from "./getDatabaseManagementExternalDbSystemDiscovery";
export const getDatabaseManagementExternalDbSystemDiscovery: typeof import("./getDatabaseManagementExternalDbSystemDiscovery").getDatabaseManagementExternalDbSystemDiscovery = null as any;
export const getDatabaseManagementExternalDbSystemDiscoveryOutput: typeof import("./getDatabaseManagementExternalDbSystemDiscovery").getDatabaseManagementExternalDbSystemDiscoveryOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseManagementExternalDbSystemDiscovery","getDatabaseManagementExternalDbSystemDiscoveryOutput"], () => require("./getDatabaseManagementExternalDbSystemDiscovery"));

export { GetDatabaseManagementExternalDbSystemsArgs, GetDatabaseManagementExternalDbSystemsResult, GetDatabaseManagementExternalDbSystemsOutputArgs } from "./getDatabaseManagementExternalDbSystems";
export const getDatabaseManagementExternalDbSystems: typeof import("./getDatabaseManagementExternalDbSystems").getDatabaseManagementExternalDbSystems = null as any;
export const getDatabaseManagementExternalDbSystemsOutput: typeof import("./getDatabaseManagementExternalDbSystems").getDatabaseManagementExternalDbSystemsOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseManagementExternalDbSystems","getDatabaseManagementExternalDbSystemsOutput"], () => require("./getDatabaseManagementExternalDbSystems"));

export { GetDatabaseManagementExternalExadataInfrastructureArgs, GetDatabaseManagementExternalExadataInfrastructureResult, GetDatabaseManagementExternalExadataInfrastructureOutputArgs } from "./getDatabaseManagementExternalExadataInfrastructure";
export const getDatabaseManagementExternalExadataInfrastructure: typeof import("./getDatabaseManagementExternalExadataInfrastructure").getDatabaseManagementExternalExadataInfrastructure = null as any;
export const getDatabaseManagementExternalExadataInfrastructureOutput: typeof import("./getDatabaseManagementExternalExadataInfrastructure").getDatabaseManagementExternalExadataInfrastructureOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseManagementExternalExadataInfrastructure","getDatabaseManagementExternalExadataInfrastructureOutput"], () => require("./getDatabaseManagementExternalExadataInfrastructure"));

export { GetDatabaseManagementExternalExadataInfrastructuresArgs, GetDatabaseManagementExternalExadataInfrastructuresResult, GetDatabaseManagementExternalExadataInfrastructuresOutputArgs } from "./getDatabaseManagementExternalExadataInfrastructures";
export const getDatabaseManagementExternalExadataInfrastructures: typeof import("./getDatabaseManagementExternalExadataInfrastructures").getDatabaseManagementExternalExadataInfrastructures = null as any;
export const getDatabaseManagementExternalExadataInfrastructuresOutput: typeof import("./getDatabaseManagementExternalExadataInfrastructures").getDatabaseManagementExternalExadataInfrastructuresOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseManagementExternalExadataInfrastructures","getDatabaseManagementExternalExadataInfrastructuresOutput"], () => require("./getDatabaseManagementExternalExadataInfrastructures"));

export { GetDatabaseManagementExternalExadataStorageConnectorArgs, GetDatabaseManagementExternalExadataStorageConnectorResult, GetDatabaseManagementExternalExadataStorageConnectorOutputArgs } from "./getDatabaseManagementExternalExadataStorageConnector";
export const getDatabaseManagementExternalExadataStorageConnector: typeof import("./getDatabaseManagementExternalExadataStorageConnector").getDatabaseManagementExternalExadataStorageConnector = null as any;
export const getDatabaseManagementExternalExadataStorageConnectorOutput: typeof import("./getDatabaseManagementExternalExadataStorageConnector").getDatabaseManagementExternalExadataStorageConnectorOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseManagementExternalExadataStorageConnector","getDatabaseManagementExternalExadataStorageConnectorOutput"], () => require("./getDatabaseManagementExternalExadataStorageConnector"));

export { GetDatabaseManagementExternalExadataStorageConnectorsArgs, GetDatabaseManagementExternalExadataStorageConnectorsResult, GetDatabaseManagementExternalExadataStorageConnectorsOutputArgs } from "./getDatabaseManagementExternalExadataStorageConnectors";
export const getDatabaseManagementExternalExadataStorageConnectors: typeof import("./getDatabaseManagementExternalExadataStorageConnectors").getDatabaseManagementExternalExadataStorageConnectors = null as any;
export const getDatabaseManagementExternalExadataStorageConnectorsOutput: typeof import("./getDatabaseManagementExternalExadataStorageConnectors").getDatabaseManagementExternalExadataStorageConnectorsOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseManagementExternalExadataStorageConnectors","getDatabaseManagementExternalExadataStorageConnectorsOutput"], () => require("./getDatabaseManagementExternalExadataStorageConnectors"));

export { GetDatabaseManagementExternalExadataStorageGridArgs, GetDatabaseManagementExternalExadataStorageGridResult, GetDatabaseManagementExternalExadataStorageGridOutputArgs } from "./getDatabaseManagementExternalExadataStorageGrid";
export const getDatabaseManagementExternalExadataStorageGrid: typeof import("./getDatabaseManagementExternalExadataStorageGrid").getDatabaseManagementExternalExadataStorageGrid = null as any;
export const getDatabaseManagementExternalExadataStorageGridOutput: typeof import("./getDatabaseManagementExternalExadataStorageGrid").getDatabaseManagementExternalExadataStorageGridOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseManagementExternalExadataStorageGrid","getDatabaseManagementExternalExadataStorageGridOutput"], () => require("./getDatabaseManagementExternalExadataStorageGrid"));

export { GetDatabaseManagementExternalExadataStorageServerArgs, GetDatabaseManagementExternalExadataStorageServerResult, GetDatabaseManagementExternalExadataStorageServerOutputArgs } from "./getDatabaseManagementExternalExadataStorageServer";
export const getDatabaseManagementExternalExadataStorageServer: typeof import("./getDatabaseManagementExternalExadataStorageServer").getDatabaseManagementExternalExadataStorageServer = null as any;
export const getDatabaseManagementExternalExadataStorageServerOutput: typeof import("./getDatabaseManagementExternalExadataStorageServer").getDatabaseManagementExternalExadataStorageServerOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseManagementExternalExadataStorageServer","getDatabaseManagementExternalExadataStorageServerOutput"], () => require("./getDatabaseManagementExternalExadataStorageServer"));

export { GetDatabaseManagementExternalExadataStorageServerIormPlanArgs, GetDatabaseManagementExternalExadataStorageServerIormPlanResult, GetDatabaseManagementExternalExadataStorageServerIormPlanOutputArgs } from "./getDatabaseManagementExternalExadataStorageServerIormPlan";
export const getDatabaseManagementExternalExadataStorageServerIormPlan: typeof import("./getDatabaseManagementExternalExadataStorageServerIormPlan").getDatabaseManagementExternalExadataStorageServerIormPlan = null as any;
export const getDatabaseManagementExternalExadataStorageServerIormPlanOutput: typeof import("./getDatabaseManagementExternalExadataStorageServerIormPlan").getDatabaseManagementExternalExadataStorageServerIormPlanOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseManagementExternalExadataStorageServerIormPlan","getDatabaseManagementExternalExadataStorageServerIormPlanOutput"], () => require("./getDatabaseManagementExternalExadataStorageServerIormPlan"));

export { GetDatabaseManagementExternalExadataStorageServerOpenAlertHistoryArgs, GetDatabaseManagementExternalExadataStorageServerOpenAlertHistoryResult, GetDatabaseManagementExternalExadataStorageServerOpenAlertHistoryOutputArgs } from "./getDatabaseManagementExternalExadataStorageServerOpenAlertHistory";
export const getDatabaseManagementExternalExadataStorageServerOpenAlertHistory: typeof import("./getDatabaseManagementExternalExadataStorageServerOpenAlertHistory").getDatabaseManagementExternalExadataStorageServerOpenAlertHistory = null as any;
export const getDatabaseManagementExternalExadataStorageServerOpenAlertHistoryOutput: typeof import("./getDatabaseManagementExternalExadataStorageServerOpenAlertHistory").getDatabaseManagementExternalExadataStorageServerOpenAlertHistoryOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseManagementExternalExadataStorageServerOpenAlertHistory","getDatabaseManagementExternalExadataStorageServerOpenAlertHistoryOutput"], () => require("./getDatabaseManagementExternalExadataStorageServerOpenAlertHistory"));

export { GetDatabaseManagementExternalExadataStorageServerTopSqlCpuActivityArgs, GetDatabaseManagementExternalExadataStorageServerTopSqlCpuActivityResult, GetDatabaseManagementExternalExadataStorageServerTopSqlCpuActivityOutputArgs } from "./getDatabaseManagementExternalExadataStorageServerTopSqlCpuActivity";
export const getDatabaseManagementExternalExadataStorageServerTopSqlCpuActivity: typeof import("./getDatabaseManagementExternalExadataStorageServerTopSqlCpuActivity").getDatabaseManagementExternalExadataStorageServerTopSqlCpuActivity = null as any;
export const getDatabaseManagementExternalExadataStorageServerTopSqlCpuActivityOutput: typeof import("./getDatabaseManagementExternalExadataStorageServerTopSqlCpuActivity").getDatabaseManagementExternalExadataStorageServerTopSqlCpuActivityOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseManagementExternalExadataStorageServerTopSqlCpuActivity","getDatabaseManagementExternalExadataStorageServerTopSqlCpuActivityOutput"], () => require("./getDatabaseManagementExternalExadataStorageServerTopSqlCpuActivity"));

export { GetDatabaseManagementExternalExadataStorageServersArgs, GetDatabaseManagementExternalExadataStorageServersResult, GetDatabaseManagementExternalExadataStorageServersOutputArgs } from "./getDatabaseManagementExternalExadataStorageServers";
export const getDatabaseManagementExternalExadataStorageServers: typeof import("./getDatabaseManagementExternalExadataStorageServers").getDatabaseManagementExternalExadataStorageServers = null as any;
export const getDatabaseManagementExternalExadataStorageServersOutput: typeof import("./getDatabaseManagementExternalExadataStorageServers").getDatabaseManagementExternalExadataStorageServersOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseManagementExternalExadataStorageServers","getDatabaseManagementExternalExadataStorageServersOutput"], () => require("./getDatabaseManagementExternalExadataStorageServers"));

export { GetDatabaseManagementExternalListenerArgs, GetDatabaseManagementExternalListenerResult, GetDatabaseManagementExternalListenerOutputArgs } from "./getDatabaseManagementExternalListener";
export const getDatabaseManagementExternalListener: typeof import("./getDatabaseManagementExternalListener").getDatabaseManagementExternalListener = null as any;
export const getDatabaseManagementExternalListenerOutput: typeof import("./getDatabaseManagementExternalListener").getDatabaseManagementExternalListenerOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseManagementExternalListener","getDatabaseManagementExternalListenerOutput"], () => require("./getDatabaseManagementExternalListener"));

export { GetDatabaseManagementExternalListenerServicesArgs, GetDatabaseManagementExternalListenerServicesResult, GetDatabaseManagementExternalListenerServicesOutputArgs } from "./getDatabaseManagementExternalListenerServices";
export const getDatabaseManagementExternalListenerServices: typeof import("./getDatabaseManagementExternalListenerServices").getDatabaseManagementExternalListenerServices = null as any;
export const getDatabaseManagementExternalListenerServicesOutput: typeof import("./getDatabaseManagementExternalListenerServices").getDatabaseManagementExternalListenerServicesOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseManagementExternalListenerServices","getDatabaseManagementExternalListenerServicesOutput"], () => require("./getDatabaseManagementExternalListenerServices"));

export { GetDatabaseManagementExternalListenersArgs, GetDatabaseManagementExternalListenersResult, GetDatabaseManagementExternalListenersOutputArgs } from "./getDatabaseManagementExternalListeners";
export const getDatabaseManagementExternalListeners: typeof import("./getDatabaseManagementExternalListeners").getDatabaseManagementExternalListeners = null as any;
export const getDatabaseManagementExternalListenersOutput: typeof import("./getDatabaseManagementExternalListeners").getDatabaseManagementExternalListenersOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseManagementExternalListeners","getDatabaseManagementExternalListenersOutput"], () => require("./getDatabaseManagementExternalListeners"));

export { GetDatabaseManagementJobExecutionsStatusArgs, GetDatabaseManagementJobExecutionsStatusResult, GetDatabaseManagementJobExecutionsStatusOutputArgs } from "./getDatabaseManagementJobExecutionsStatus";
export const getDatabaseManagementJobExecutionsStatus: typeof import("./getDatabaseManagementJobExecutionsStatus").getDatabaseManagementJobExecutionsStatus = null as any;
export const getDatabaseManagementJobExecutionsStatusOutput: typeof import("./getDatabaseManagementJobExecutionsStatus").getDatabaseManagementJobExecutionsStatusOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseManagementJobExecutionsStatus","getDatabaseManagementJobExecutionsStatusOutput"], () => require("./getDatabaseManagementJobExecutionsStatus"));

export { GetDatabaseManagementJobExecutionsStatusesArgs, GetDatabaseManagementJobExecutionsStatusesResult, GetDatabaseManagementJobExecutionsStatusesOutputArgs } from "./getDatabaseManagementJobExecutionsStatuses";
export const getDatabaseManagementJobExecutionsStatuses: typeof import("./getDatabaseManagementJobExecutionsStatuses").getDatabaseManagementJobExecutionsStatuses = null as any;
export const getDatabaseManagementJobExecutionsStatusesOutput: typeof import("./getDatabaseManagementJobExecutionsStatuses").getDatabaseManagementJobExecutionsStatusesOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseManagementJobExecutionsStatuses","getDatabaseManagementJobExecutionsStatusesOutput"], () => require("./getDatabaseManagementJobExecutionsStatuses"));

export { GetDatabaseManagementManagedDatabaseArgs, GetDatabaseManagementManagedDatabaseResult, GetDatabaseManagementManagedDatabaseOutputArgs } from "./getDatabaseManagementManagedDatabase";
export const getDatabaseManagementManagedDatabase: typeof import("./getDatabaseManagementManagedDatabase").getDatabaseManagementManagedDatabase = null as any;
export const getDatabaseManagementManagedDatabaseOutput: typeof import("./getDatabaseManagementManagedDatabase").getDatabaseManagementManagedDatabaseOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseManagementManagedDatabase","getDatabaseManagementManagedDatabaseOutput"], () => require("./getDatabaseManagementManagedDatabase"));

export { GetDatabaseManagementManagedDatabaseAddmTaskArgs, GetDatabaseManagementManagedDatabaseAddmTaskResult, GetDatabaseManagementManagedDatabaseAddmTaskOutputArgs } from "./getDatabaseManagementManagedDatabaseAddmTask";
export const getDatabaseManagementManagedDatabaseAddmTask: typeof import("./getDatabaseManagementManagedDatabaseAddmTask").getDatabaseManagementManagedDatabaseAddmTask = null as any;
export const getDatabaseManagementManagedDatabaseAddmTaskOutput: typeof import("./getDatabaseManagementManagedDatabaseAddmTask").getDatabaseManagementManagedDatabaseAddmTaskOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseManagementManagedDatabaseAddmTask","getDatabaseManagementManagedDatabaseAddmTaskOutput"], () => require("./getDatabaseManagementManagedDatabaseAddmTask"));

export { GetDatabaseManagementManagedDatabaseAddmTasksArgs, GetDatabaseManagementManagedDatabaseAddmTasksResult, GetDatabaseManagementManagedDatabaseAddmTasksOutputArgs } from "./getDatabaseManagementManagedDatabaseAddmTasks";
export const getDatabaseManagementManagedDatabaseAddmTasks: typeof import("./getDatabaseManagementManagedDatabaseAddmTasks").getDatabaseManagementManagedDatabaseAddmTasks = null as any;
export const getDatabaseManagementManagedDatabaseAddmTasksOutput: typeof import("./getDatabaseManagementManagedDatabaseAddmTasks").getDatabaseManagementManagedDatabaseAddmTasksOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseManagementManagedDatabaseAddmTasks","getDatabaseManagementManagedDatabaseAddmTasksOutput"], () => require("./getDatabaseManagementManagedDatabaseAddmTasks"));

export { GetDatabaseManagementManagedDatabaseAlertLogCountArgs, GetDatabaseManagementManagedDatabaseAlertLogCountResult, GetDatabaseManagementManagedDatabaseAlertLogCountOutputArgs } from "./getDatabaseManagementManagedDatabaseAlertLogCount";
export const getDatabaseManagementManagedDatabaseAlertLogCount: typeof import("./getDatabaseManagementManagedDatabaseAlertLogCount").getDatabaseManagementManagedDatabaseAlertLogCount = null as any;
export const getDatabaseManagementManagedDatabaseAlertLogCountOutput: typeof import("./getDatabaseManagementManagedDatabaseAlertLogCount").getDatabaseManagementManagedDatabaseAlertLogCountOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseManagementManagedDatabaseAlertLogCount","getDatabaseManagementManagedDatabaseAlertLogCountOutput"], () => require("./getDatabaseManagementManagedDatabaseAlertLogCount"));

export { GetDatabaseManagementManagedDatabaseAlertLogCountsArgs, GetDatabaseManagementManagedDatabaseAlertLogCountsResult, GetDatabaseManagementManagedDatabaseAlertLogCountsOutputArgs } from "./getDatabaseManagementManagedDatabaseAlertLogCounts";
export const getDatabaseManagementManagedDatabaseAlertLogCounts: typeof import("./getDatabaseManagementManagedDatabaseAlertLogCounts").getDatabaseManagementManagedDatabaseAlertLogCounts = null as any;
export const getDatabaseManagementManagedDatabaseAlertLogCountsOutput: typeof import("./getDatabaseManagementManagedDatabaseAlertLogCounts").getDatabaseManagementManagedDatabaseAlertLogCountsOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseManagementManagedDatabaseAlertLogCounts","getDatabaseManagementManagedDatabaseAlertLogCountsOutput"], () => require("./getDatabaseManagementManagedDatabaseAlertLogCounts"));

export { GetDatabaseManagementManagedDatabaseAttentionLogCountArgs, GetDatabaseManagementManagedDatabaseAttentionLogCountResult, GetDatabaseManagementManagedDatabaseAttentionLogCountOutputArgs } from "./getDatabaseManagementManagedDatabaseAttentionLogCount";
export const getDatabaseManagementManagedDatabaseAttentionLogCount: typeof import("./getDatabaseManagementManagedDatabaseAttentionLogCount").getDatabaseManagementManagedDatabaseAttentionLogCount = null as any;
export const getDatabaseManagementManagedDatabaseAttentionLogCountOutput: typeof import("./getDatabaseManagementManagedDatabaseAttentionLogCount").getDatabaseManagementManagedDatabaseAttentionLogCountOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseManagementManagedDatabaseAttentionLogCount","getDatabaseManagementManagedDatabaseAttentionLogCountOutput"], () => require("./getDatabaseManagementManagedDatabaseAttentionLogCount"));

export { GetDatabaseManagementManagedDatabaseAttentionLogCountsArgs, GetDatabaseManagementManagedDatabaseAttentionLogCountsResult, GetDatabaseManagementManagedDatabaseAttentionLogCountsOutputArgs } from "./getDatabaseManagementManagedDatabaseAttentionLogCounts";
export const getDatabaseManagementManagedDatabaseAttentionLogCounts: typeof import("./getDatabaseManagementManagedDatabaseAttentionLogCounts").getDatabaseManagementManagedDatabaseAttentionLogCounts = null as any;
export const getDatabaseManagementManagedDatabaseAttentionLogCountsOutput: typeof import("./getDatabaseManagementManagedDatabaseAttentionLogCounts").getDatabaseManagementManagedDatabaseAttentionLogCountsOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseManagementManagedDatabaseAttentionLogCounts","getDatabaseManagementManagedDatabaseAttentionLogCountsOutput"], () => require("./getDatabaseManagementManagedDatabaseAttentionLogCounts"));

export { GetDatabaseManagementManagedDatabaseCursorCacheStatementsArgs, GetDatabaseManagementManagedDatabaseCursorCacheStatementsResult, GetDatabaseManagementManagedDatabaseCursorCacheStatementsOutputArgs } from "./getDatabaseManagementManagedDatabaseCursorCacheStatements";
export const getDatabaseManagementManagedDatabaseCursorCacheStatements: typeof import("./getDatabaseManagementManagedDatabaseCursorCacheStatements").getDatabaseManagementManagedDatabaseCursorCacheStatements = null as any;
export const getDatabaseManagementManagedDatabaseCursorCacheStatementsOutput: typeof import("./getDatabaseManagementManagedDatabaseCursorCacheStatements").getDatabaseManagementManagedDatabaseCursorCacheStatementsOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseManagementManagedDatabaseCursorCacheStatements","getDatabaseManagementManagedDatabaseCursorCacheStatementsOutput"], () => require("./getDatabaseManagementManagedDatabaseCursorCacheStatements"));

export { GetDatabaseManagementManagedDatabaseGroupArgs, GetDatabaseManagementManagedDatabaseGroupResult, GetDatabaseManagementManagedDatabaseGroupOutputArgs } from "./getDatabaseManagementManagedDatabaseGroup";
export const getDatabaseManagementManagedDatabaseGroup: typeof import("./getDatabaseManagementManagedDatabaseGroup").getDatabaseManagementManagedDatabaseGroup = null as any;
export const getDatabaseManagementManagedDatabaseGroupOutput: typeof import("./getDatabaseManagementManagedDatabaseGroup").getDatabaseManagementManagedDatabaseGroupOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseManagementManagedDatabaseGroup","getDatabaseManagementManagedDatabaseGroupOutput"], () => require("./getDatabaseManagementManagedDatabaseGroup"));

export { GetDatabaseManagementManagedDatabaseGroupsArgs, GetDatabaseManagementManagedDatabaseGroupsResult, GetDatabaseManagementManagedDatabaseGroupsOutputArgs } from "./getDatabaseManagementManagedDatabaseGroups";
export const getDatabaseManagementManagedDatabaseGroups: typeof import("./getDatabaseManagementManagedDatabaseGroups").getDatabaseManagementManagedDatabaseGroups = null as any;
export const getDatabaseManagementManagedDatabaseGroupsOutput: typeof import("./getDatabaseManagementManagedDatabaseGroups").getDatabaseManagementManagedDatabaseGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseManagementManagedDatabaseGroups","getDatabaseManagementManagedDatabaseGroupsOutput"], () => require("./getDatabaseManagementManagedDatabaseGroups"));

export { GetDatabaseManagementManagedDatabaseOptimizerStatisticsAdvisorExecutionArgs, GetDatabaseManagementManagedDatabaseOptimizerStatisticsAdvisorExecutionResult, GetDatabaseManagementManagedDatabaseOptimizerStatisticsAdvisorExecutionOutputArgs } from "./getDatabaseManagementManagedDatabaseOptimizerStatisticsAdvisorExecution";
export const getDatabaseManagementManagedDatabaseOptimizerStatisticsAdvisorExecution: typeof import("./getDatabaseManagementManagedDatabaseOptimizerStatisticsAdvisorExecution").getDatabaseManagementManagedDatabaseOptimizerStatisticsAdvisorExecution = null as any;
export const getDatabaseManagementManagedDatabaseOptimizerStatisticsAdvisorExecutionOutput: typeof import("./getDatabaseManagementManagedDatabaseOptimizerStatisticsAdvisorExecution").getDatabaseManagementManagedDatabaseOptimizerStatisticsAdvisorExecutionOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseManagementManagedDatabaseOptimizerStatisticsAdvisorExecution","getDatabaseManagementManagedDatabaseOptimizerStatisticsAdvisorExecutionOutput"], () => require("./getDatabaseManagementManagedDatabaseOptimizerStatisticsAdvisorExecution"));

export { GetDatabaseManagementManagedDatabaseOptimizerStatisticsAdvisorExecutionScriptArgs, GetDatabaseManagementManagedDatabaseOptimizerStatisticsAdvisorExecutionScriptResult, GetDatabaseManagementManagedDatabaseOptimizerStatisticsAdvisorExecutionScriptOutputArgs } from "./getDatabaseManagementManagedDatabaseOptimizerStatisticsAdvisorExecutionScript";
export const getDatabaseManagementManagedDatabaseOptimizerStatisticsAdvisorExecutionScript: typeof import("./getDatabaseManagementManagedDatabaseOptimizerStatisticsAdvisorExecutionScript").getDatabaseManagementManagedDatabaseOptimizerStatisticsAdvisorExecutionScript = null as any;
export const getDatabaseManagementManagedDatabaseOptimizerStatisticsAdvisorExecutionScriptOutput: typeof import("./getDatabaseManagementManagedDatabaseOptimizerStatisticsAdvisorExecutionScript").getDatabaseManagementManagedDatabaseOptimizerStatisticsAdvisorExecutionScriptOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseManagementManagedDatabaseOptimizerStatisticsAdvisorExecutionScript","getDatabaseManagementManagedDatabaseOptimizerStatisticsAdvisorExecutionScriptOutput"], () => require("./getDatabaseManagementManagedDatabaseOptimizerStatisticsAdvisorExecutionScript"));

export { GetDatabaseManagementManagedDatabaseOptimizerStatisticsAdvisorExecutionsArgs, GetDatabaseManagementManagedDatabaseOptimizerStatisticsAdvisorExecutionsResult, GetDatabaseManagementManagedDatabaseOptimizerStatisticsAdvisorExecutionsOutputArgs } from "./getDatabaseManagementManagedDatabaseOptimizerStatisticsAdvisorExecutions";
export const getDatabaseManagementManagedDatabaseOptimizerStatisticsAdvisorExecutions: typeof import("./getDatabaseManagementManagedDatabaseOptimizerStatisticsAdvisorExecutions").getDatabaseManagementManagedDatabaseOptimizerStatisticsAdvisorExecutions = null as any;
export const getDatabaseManagementManagedDatabaseOptimizerStatisticsAdvisorExecutionsOutput: typeof import("./getDatabaseManagementManagedDatabaseOptimizerStatisticsAdvisorExecutions").getDatabaseManagementManagedDatabaseOptimizerStatisticsAdvisorExecutionsOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseManagementManagedDatabaseOptimizerStatisticsAdvisorExecutions","getDatabaseManagementManagedDatabaseOptimizerStatisticsAdvisorExecutionsOutput"], () => require("./getDatabaseManagementManagedDatabaseOptimizerStatisticsAdvisorExecutions"));

export { GetDatabaseManagementManagedDatabaseOptimizerStatisticsCollectionAggregationsArgs, GetDatabaseManagementManagedDatabaseOptimizerStatisticsCollectionAggregationsResult, GetDatabaseManagementManagedDatabaseOptimizerStatisticsCollectionAggregationsOutputArgs } from "./getDatabaseManagementManagedDatabaseOptimizerStatisticsCollectionAggregations";
export const getDatabaseManagementManagedDatabaseOptimizerStatisticsCollectionAggregations: typeof import("./getDatabaseManagementManagedDatabaseOptimizerStatisticsCollectionAggregations").getDatabaseManagementManagedDatabaseOptimizerStatisticsCollectionAggregations = null as any;
export const getDatabaseManagementManagedDatabaseOptimizerStatisticsCollectionAggregationsOutput: typeof import("./getDatabaseManagementManagedDatabaseOptimizerStatisticsCollectionAggregations").getDatabaseManagementManagedDatabaseOptimizerStatisticsCollectionAggregationsOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseManagementManagedDatabaseOptimizerStatisticsCollectionAggregations","getDatabaseManagementManagedDatabaseOptimizerStatisticsCollectionAggregationsOutput"], () => require("./getDatabaseManagementManagedDatabaseOptimizerStatisticsCollectionAggregations"));

export { GetDatabaseManagementManagedDatabaseOptimizerStatisticsCollectionOperationArgs, GetDatabaseManagementManagedDatabaseOptimizerStatisticsCollectionOperationResult, GetDatabaseManagementManagedDatabaseOptimizerStatisticsCollectionOperationOutputArgs } from "./getDatabaseManagementManagedDatabaseOptimizerStatisticsCollectionOperation";
export const getDatabaseManagementManagedDatabaseOptimizerStatisticsCollectionOperation: typeof import("./getDatabaseManagementManagedDatabaseOptimizerStatisticsCollectionOperation").getDatabaseManagementManagedDatabaseOptimizerStatisticsCollectionOperation = null as any;
export const getDatabaseManagementManagedDatabaseOptimizerStatisticsCollectionOperationOutput: typeof import("./getDatabaseManagementManagedDatabaseOptimizerStatisticsCollectionOperation").getDatabaseManagementManagedDatabaseOptimizerStatisticsCollectionOperationOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseManagementManagedDatabaseOptimizerStatisticsCollectionOperation","getDatabaseManagementManagedDatabaseOptimizerStatisticsCollectionOperationOutput"], () => require("./getDatabaseManagementManagedDatabaseOptimizerStatisticsCollectionOperation"));

export { GetDatabaseManagementManagedDatabaseOptimizerStatisticsCollectionOperationsArgs, GetDatabaseManagementManagedDatabaseOptimizerStatisticsCollectionOperationsResult, GetDatabaseManagementManagedDatabaseOptimizerStatisticsCollectionOperationsOutputArgs } from "./getDatabaseManagementManagedDatabaseOptimizerStatisticsCollectionOperations";
export const getDatabaseManagementManagedDatabaseOptimizerStatisticsCollectionOperations: typeof import("./getDatabaseManagementManagedDatabaseOptimizerStatisticsCollectionOperations").getDatabaseManagementManagedDatabaseOptimizerStatisticsCollectionOperations = null as any;
export const getDatabaseManagementManagedDatabaseOptimizerStatisticsCollectionOperationsOutput: typeof import("./getDatabaseManagementManagedDatabaseOptimizerStatisticsCollectionOperations").getDatabaseManagementManagedDatabaseOptimizerStatisticsCollectionOperationsOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseManagementManagedDatabaseOptimizerStatisticsCollectionOperations","getDatabaseManagementManagedDatabaseOptimizerStatisticsCollectionOperationsOutput"], () => require("./getDatabaseManagementManagedDatabaseOptimizerStatisticsCollectionOperations"));

export { GetDatabaseManagementManagedDatabasePreferredCredentialArgs, GetDatabaseManagementManagedDatabasePreferredCredentialResult, GetDatabaseManagementManagedDatabasePreferredCredentialOutputArgs } from "./getDatabaseManagementManagedDatabasePreferredCredential";
export const getDatabaseManagementManagedDatabasePreferredCredential: typeof import("./getDatabaseManagementManagedDatabasePreferredCredential").getDatabaseManagementManagedDatabasePreferredCredential = null as any;
export const getDatabaseManagementManagedDatabasePreferredCredentialOutput: typeof import("./getDatabaseManagementManagedDatabasePreferredCredential").getDatabaseManagementManagedDatabasePreferredCredentialOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseManagementManagedDatabasePreferredCredential","getDatabaseManagementManagedDatabasePreferredCredentialOutput"], () => require("./getDatabaseManagementManagedDatabasePreferredCredential"));

export { GetDatabaseManagementManagedDatabasePreferredCredentialsArgs, GetDatabaseManagementManagedDatabasePreferredCredentialsResult, GetDatabaseManagementManagedDatabasePreferredCredentialsOutputArgs } from "./getDatabaseManagementManagedDatabasePreferredCredentials";
export const getDatabaseManagementManagedDatabasePreferredCredentials: typeof import("./getDatabaseManagementManagedDatabasePreferredCredentials").getDatabaseManagementManagedDatabasePreferredCredentials = null as any;
export const getDatabaseManagementManagedDatabasePreferredCredentialsOutput: typeof import("./getDatabaseManagementManagedDatabasePreferredCredentials").getDatabaseManagementManagedDatabasePreferredCredentialsOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseManagementManagedDatabasePreferredCredentials","getDatabaseManagementManagedDatabasePreferredCredentialsOutput"], () => require("./getDatabaseManagementManagedDatabasePreferredCredentials"));

export { GetDatabaseManagementManagedDatabaseSqlPlanBaselineArgs, GetDatabaseManagementManagedDatabaseSqlPlanBaselineResult, GetDatabaseManagementManagedDatabaseSqlPlanBaselineOutputArgs } from "./getDatabaseManagementManagedDatabaseSqlPlanBaseline";
export const getDatabaseManagementManagedDatabaseSqlPlanBaseline: typeof import("./getDatabaseManagementManagedDatabaseSqlPlanBaseline").getDatabaseManagementManagedDatabaseSqlPlanBaseline = null as any;
export const getDatabaseManagementManagedDatabaseSqlPlanBaselineOutput: typeof import("./getDatabaseManagementManagedDatabaseSqlPlanBaseline").getDatabaseManagementManagedDatabaseSqlPlanBaselineOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseManagementManagedDatabaseSqlPlanBaseline","getDatabaseManagementManagedDatabaseSqlPlanBaselineOutput"], () => require("./getDatabaseManagementManagedDatabaseSqlPlanBaseline"));

export { GetDatabaseManagementManagedDatabaseSqlPlanBaselineConfigurationArgs, GetDatabaseManagementManagedDatabaseSqlPlanBaselineConfigurationResult, GetDatabaseManagementManagedDatabaseSqlPlanBaselineConfigurationOutputArgs } from "./getDatabaseManagementManagedDatabaseSqlPlanBaselineConfiguration";
export const getDatabaseManagementManagedDatabaseSqlPlanBaselineConfiguration: typeof import("./getDatabaseManagementManagedDatabaseSqlPlanBaselineConfiguration").getDatabaseManagementManagedDatabaseSqlPlanBaselineConfiguration = null as any;
export const getDatabaseManagementManagedDatabaseSqlPlanBaselineConfigurationOutput: typeof import("./getDatabaseManagementManagedDatabaseSqlPlanBaselineConfiguration").getDatabaseManagementManagedDatabaseSqlPlanBaselineConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseManagementManagedDatabaseSqlPlanBaselineConfiguration","getDatabaseManagementManagedDatabaseSqlPlanBaselineConfigurationOutput"], () => require("./getDatabaseManagementManagedDatabaseSqlPlanBaselineConfiguration"));

export { GetDatabaseManagementManagedDatabaseSqlPlanBaselineJobsArgs, GetDatabaseManagementManagedDatabaseSqlPlanBaselineJobsResult, GetDatabaseManagementManagedDatabaseSqlPlanBaselineJobsOutputArgs } from "./getDatabaseManagementManagedDatabaseSqlPlanBaselineJobs";
export const getDatabaseManagementManagedDatabaseSqlPlanBaselineJobs: typeof import("./getDatabaseManagementManagedDatabaseSqlPlanBaselineJobs").getDatabaseManagementManagedDatabaseSqlPlanBaselineJobs = null as any;
export const getDatabaseManagementManagedDatabaseSqlPlanBaselineJobsOutput: typeof import("./getDatabaseManagementManagedDatabaseSqlPlanBaselineJobs").getDatabaseManagementManagedDatabaseSqlPlanBaselineJobsOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseManagementManagedDatabaseSqlPlanBaselineJobs","getDatabaseManagementManagedDatabaseSqlPlanBaselineJobsOutput"], () => require("./getDatabaseManagementManagedDatabaseSqlPlanBaselineJobs"));

export { GetDatabaseManagementManagedDatabaseSqlPlanBaselinesArgs, GetDatabaseManagementManagedDatabaseSqlPlanBaselinesResult, GetDatabaseManagementManagedDatabaseSqlPlanBaselinesOutputArgs } from "./getDatabaseManagementManagedDatabaseSqlPlanBaselines";
export const getDatabaseManagementManagedDatabaseSqlPlanBaselines: typeof import("./getDatabaseManagementManagedDatabaseSqlPlanBaselines").getDatabaseManagementManagedDatabaseSqlPlanBaselines = null as any;
export const getDatabaseManagementManagedDatabaseSqlPlanBaselinesOutput: typeof import("./getDatabaseManagementManagedDatabaseSqlPlanBaselines").getDatabaseManagementManagedDatabaseSqlPlanBaselinesOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseManagementManagedDatabaseSqlPlanBaselines","getDatabaseManagementManagedDatabaseSqlPlanBaselinesOutput"], () => require("./getDatabaseManagementManagedDatabaseSqlPlanBaselines"));

export { GetDatabaseManagementManagedDatabaseSqlTuningAdvisorTaskArgs, GetDatabaseManagementManagedDatabaseSqlTuningAdvisorTaskResult, GetDatabaseManagementManagedDatabaseSqlTuningAdvisorTaskOutputArgs } from "./getDatabaseManagementManagedDatabaseSqlTuningAdvisorTask";
export const getDatabaseManagementManagedDatabaseSqlTuningAdvisorTask: typeof import("./getDatabaseManagementManagedDatabaseSqlTuningAdvisorTask").getDatabaseManagementManagedDatabaseSqlTuningAdvisorTask = null as any;
export const getDatabaseManagementManagedDatabaseSqlTuningAdvisorTaskOutput: typeof import("./getDatabaseManagementManagedDatabaseSqlTuningAdvisorTask").getDatabaseManagementManagedDatabaseSqlTuningAdvisorTaskOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseManagementManagedDatabaseSqlTuningAdvisorTask","getDatabaseManagementManagedDatabaseSqlTuningAdvisorTaskOutput"], () => require("./getDatabaseManagementManagedDatabaseSqlTuningAdvisorTask"));

export { GetDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksArgs, GetDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksResult, GetDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksOutputArgs } from "./getDatabaseManagementManagedDatabaseSqlTuningAdvisorTasks";
export const getDatabaseManagementManagedDatabaseSqlTuningAdvisorTasks: typeof import("./getDatabaseManagementManagedDatabaseSqlTuningAdvisorTasks").getDatabaseManagementManagedDatabaseSqlTuningAdvisorTasks = null as any;
export const getDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksOutput: typeof import("./getDatabaseManagementManagedDatabaseSqlTuningAdvisorTasks").getDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseManagementManagedDatabaseSqlTuningAdvisorTasks","getDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksOutput"], () => require("./getDatabaseManagementManagedDatabaseSqlTuningAdvisorTasks"));

export { GetDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksExecutionPlanStatsComparisionArgs, GetDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksExecutionPlanStatsComparisionResult, GetDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksExecutionPlanStatsComparisionOutputArgs } from "./getDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksExecutionPlanStatsComparision";
export const getDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksExecutionPlanStatsComparision: typeof import("./getDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksExecutionPlanStatsComparision").getDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksExecutionPlanStatsComparision = null as any;
export const getDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksExecutionPlanStatsComparisionOutput: typeof import("./getDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksExecutionPlanStatsComparision").getDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksExecutionPlanStatsComparisionOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksExecutionPlanStatsComparision","getDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksExecutionPlanStatsComparisionOutput"], () => require("./getDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksExecutionPlanStatsComparision"));

export { GetDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksFindingArgs, GetDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksFindingResult, GetDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksFindingOutputArgs } from "./getDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksFinding";
export const getDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksFinding: typeof import("./getDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksFinding").getDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksFinding = null as any;
export const getDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksFindingOutput: typeof import("./getDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksFinding").getDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksFindingOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksFinding","getDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksFindingOutput"], () => require("./getDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksFinding"));

export { GetDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksFindingsArgs, GetDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksFindingsResult, GetDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksFindingsOutputArgs } from "./getDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksFindings";
export const getDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksFindings: typeof import("./getDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksFindings").getDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksFindings = null as any;
export const getDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksFindingsOutput: typeof import("./getDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksFindings").getDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksFindingsOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksFindings","getDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksFindingsOutput"], () => require("./getDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksFindings"));

export { GetDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksRecommendationArgs, GetDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksRecommendationResult, GetDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksRecommendationOutputArgs } from "./getDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksRecommendation";
export const getDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksRecommendation: typeof import("./getDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksRecommendation").getDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksRecommendation = null as any;
export const getDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksRecommendationOutput: typeof import("./getDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksRecommendation").getDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksRecommendationOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksRecommendation","getDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksRecommendationOutput"], () => require("./getDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksRecommendation"));

export { GetDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksRecommendationsArgs, GetDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksRecommendationsResult, GetDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksRecommendationsOutputArgs } from "./getDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksRecommendations";
export const getDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksRecommendations: typeof import("./getDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksRecommendations").getDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksRecommendations = null as any;
export const getDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksRecommendationsOutput: typeof import("./getDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksRecommendations").getDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksRecommendationsOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksRecommendations","getDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksRecommendationsOutput"], () => require("./getDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksRecommendations"));

export { GetDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksSqlExecutionPlanArgs, GetDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksSqlExecutionPlanResult, GetDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksSqlExecutionPlanOutputArgs } from "./getDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksSqlExecutionPlan";
export const getDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksSqlExecutionPlan: typeof import("./getDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksSqlExecutionPlan").getDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksSqlExecutionPlan = null as any;
export const getDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksSqlExecutionPlanOutput: typeof import("./getDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksSqlExecutionPlan").getDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksSqlExecutionPlanOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksSqlExecutionPlan","getDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksSqlExecutionPlanOutput"], () => require("./getDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksSqlExecutionPlan"));

export { GetDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksSummaryReportArgs, GetDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksSummaryReportResult, GetDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksSummaryReportOutputArgs } from "./getDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksSummaryReport";
export const getDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksSummaryReport: typeof import("./getDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksSummaryReport").getDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksSummaryReport = null as any;
export const getDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksSummaryReportOutput: typeof import("./getDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksSummaryReport").getDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksSummaryReportOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksSummaryReport","getDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksSummaryReportOutput"], () => require("./getDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksSummaryReport"));

export { GetDatabaseManagementManagedDatabaseSqlTuningSetArgs, GetDatabaseManagementManagedDatabaseSqlTuningSetResult, GetDatabaseManagementManagedDatabaseSqlTuningSetOutputArgs } from "./getDatabaseManagementManagedDatabaseSqlTuningSet";
export const getDatabaseManagementManagedDatabaseSqlTuningSet: typeof import("./getDatabaseManagementManagedDatabaseSqlTuningSet").getDatabaseManagementManagedDatabaseSqlTuningSet = null as any;
export const getDatabaseManagementManagedDatabaseSqlTuningSetOutput: typeof import("./getDatabaseManagementManagedDatabaseSqlTuningSet").getDatabaseManagementManagedDatabaseSqlTuningSetOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseManagementManagedDatabaseSqlTuningSet","getDatabaseManagementManagedDatabaseSqlTuningSetOutput"], () => require("./getDatabaseManagementManagedDatabaseSqlTuningSet"));

export { GetDatabaseManagementManagedDatabaseSqlTuningSetsArgs, GetDatabaseManagementManagedDatabaseSqlTuningSetsResult, GetDatabaseManagementManagedDatabaseSqlTuningSetsOutputArgs } from "./getDatabaseManagementManagedDatabaseSqlTuningSets";
export const getDatabaseManagementManagedDatabaseSqlTuningSets: typeof import("./getDatabaseManagementManagedDatabaseSqlTuningSets").getDatabaseManagementManagedDatabaseSqlTuningSets = null as any;
export const getDatabaseManagementManagedDatabaseSqlTuningSetsOutput: typeof import("./getDatabaseManagementManagedDatabaseSqlTuningSets").getDatabaseManagementManagedDatabaseSqlTuningSetsOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseManagementManagedDatabaseSqlTuningSets","getDatabaseManagementManagedDatabaseSqlTuningSetsOutput"], () => require("./getDatabaseManagementManagedDatabaseSqlTuningSets"));

export { GetDatabaseManagementManagedDatabaseTableStatisticsArgs, GetDatabaseManagementManagedDatabaseTableStatisticsResult, GetDatabaseManagementManagedDatabaseTableStatisticsOutputArgs } from "./getDatabaseManagementManagedDatabaseTableStatistics";
export const getDatabaseManagementManagedDatabaseTableStatistics: typeof import("./getDatabaseManagementManagedDatabaseTableStatistics").getDatabaseManagementManagedDatabaseTableStatistics = null as any;
export const getDatabaseManagementManagedDatabaseTableStatisticsOutput: typeof import("./getDatabaseManagementManagedDatabaseTableStatistics").getDatabaseManagementManagedDatabaseTableStatisticsOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseManagementManagedDatabaseTableStatistics","getDatabaseManagementManagedDatabaseTableStatisticsOutput"], () => require("./getDatabaseManagementManagedDatabaseTableStatistics"));

export { GetDatabaseManagementManagedDatabaseUserArgs, GetDatabaseManagementManagedDatabaseUserResult, GetDatabaseManagementManagedDatabaseUserOutputArgs } from "./getDatabaseManagementManagedDatabaseUser";
export const getDatabaseManagementManagedDatabaseUser: typeof import("./getDatabaseManagementManagedDatabaseUser").getDatabaseManagementManagedDatabaseUser = null as any;
export const getDatabaseManagementManagedDatabaseUserOutput: typeof import("./getDatabaseManagementManagedDatabaseUser").getDatabaseManagementManagedDatabaseUserOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseManagementManagedDatabaseUser","getDatabaseManagementManagedDatabaseUserOutput"], () => require("./getDatabaseManagementManagedDatabaseUser"));

export { GetDatabaseManagementManagedDatabaseUserConsumerGroupPrivilegeArgs, GetDatabaseManagementManagedDatabaseUserConsumerGroupPrivilegeResult, GetDatabaseManagementManagedDatabaseUserConsumerGroupPrivilegeOutputArgs } from "./getDatabaseManagementManagedDatabaseUserConsumerGroupPrivilege";
export const getDatabaseManagementManagedDatabaseUserConsumerGroupPrivilege: typeof import("./getDatabaseManagementManagedDatabaseUserConsumerGroupPrivilege").getDatabaseManagementManagedDatabaseUserConsumerGroupPrivilege = null as any;
export const getDatabaseManagementManagedDatabaseUserConsumerGroupPrivilegeOutput: typeof import("./getDatabaseManagementManagedDatabaseUserConsumerGroupPrivilege").getDatabaseManagementManagedDatabaseUserConsumerGroupPrivilegeOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseManagementManagedDatabaseUserConsumerGroupPrivilege","getDatabaseManagementManagedDatabaseUserConsumerGroupPrivilegeOutput"], () => require("./getDatabaseManagementManagedDatabaseUserConsumerGroupPrivilege"));

export { GetDatabaseManagementManagedDatabaseUserConsumerGroupPrivilegesArgs, GetDatabaseManagementManagedDatabaseUserConsumerGroupPrivilegesResult, GetDatabaseManagementManagedDatabaseUserConsumerGroupPrivilegesOutputArgs } from "./getDatabaseManagementManagedDatabaseUserConsumerGroupPrivileges";
export const getDatabaseManagementManagedDatabaseUserConsumerGroupPrivileges: typeof import("./getDatabaseManagementManagedDatabaseUserConsumerGroupPrivileges").getDatabaseManagementManagedDatabaseUserConsumerGroupPrivileges = null as any;
export const getDatabaseManagementManagedDatabaseUserConsumerGroupPrivilegesOutput: typeof import("./getDatabaseManagementManagedDatabaseUserConsumerGroupPrivileges").getDatabaseManagementManagedDatabaseUserConsumerGroupPrivilegesOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseManagementManagedDatabaseUserConsumerGroupPrivileges","getDatabaseManagementManagedDatabaseUserConsumerGroupPrivilegesOutput"], () => require("./getDatabaseManagementManagedDatabaseUserConsumerGroupPrivileges"));

export { GetDatabaseManagementManagedDatabaseUserDataAccessContainerArgs, GetDatabaseManagementManagedDatabaseUserDataAccessContainerResult, GetDatabaseManagementManagedDatabaseUserDataAccessContainerOutputArgs } from "./getDatabaseManagementManagedDatabaseUserDataAccessContainer";
export const getDatabaseManagementManagedDatabaseUserDataAccessContainer: typeof import("./getDatabaseManagementManagedDatabaseUserDataAccessContainer").getDatabaseManagementManagedDatabaseUserDataAccessContainer = null as any;
export const getDatabaseManagementManagedDatabaseUserDataAccessContainerOutput: typeof import("./getDatabaseManagementManagedDatabaseUserDataAccessContainer").getDatabaseManagementManagedDatabaseUserDataAccessContainerOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseManagementManagedDatabaseUserDataAccessContainer","getDatabaseManagementManagedDatabaseUserDataAccessContainerOutput"], () => require("./getDatabaseManagementManagedDatabaseUserDataAccessContainer"));

export { GetDatabaseManagementManagedDatabaseUserDataAccessContainersArgs, GetDatabaseManagementManagedDatabaseUserDataAccessContainersResult, GetDatabaseManagementManagedDatabaseUserDataAccessContainersOutputArgs } from "./getDatabaseManagementManagedDatabaseUserDataAccessContainers";
export const getDatabaseManagementManagedDatabaseUserDataAccessContainers: typeof import("./getDatabaseManagementManagedDatabaseUserDataAccessContainers").getDatabaseManagementManagedDatabaseUserDataAccessContainers = null as any;
export const getDatabaseManagementManagedDatabaseUserDataAccessContainersOutput: typeof import("./getDatabaseManagementManagedDatabaseUserDataAccessContainers").getDatabaseManagementManagedDatabaseUserDataAccessContainersOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseManagementManagedDatabaseUserDataAccessContainers","getDatabaseManagementManagedDatabaseUserDataAccessContainersOutput"], () => require("./getDatabaseManagementManagedDatabaseUserDataAccessContainers"));

export { GetDatabaseManagementManagedDatabaseUserObjectPrivilegeArgs, GetDatabaseManagementManagedDatabaseUserObjectPrivilegeResult, GetDatabaseManagementManagedDatabaseUserObjectPrivilegeOutputArgs } from "./getDatabaseManagementManagedDatabaseUserObjectPrivilege";
export const getDatabaseManagementManagedDatabaseUserObjectPrivilege: typeof import("./getDatabaseManagementManagedDatabaseUserObjectPrivilege").getDatabaseManagementManagedDatabaseUserObjectPrivilege = null as any;
export const getDatabaseManagementManagedDatabaseUserObjectPrivilegeOutput: typeof import("./getDatabaseManagementManagedDatabaseUserObjectPrivilege").getDatabaseManagementManagedDatabaseUserObjectPrivilegeOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseManagementManagedDatabaseUserObjectPrivilege","getDatabaseManagementManagedDatabaseUserObjectPrivilegeOutput"], () => require("./getDatabaseManagementManagedDatabaseUserObjectPrivilege"));

export { GetDatabaseManagementManagedDatabaseUserObjectPrivilegesArgs, GetDatabaseManagementManagedDatabaseUserObjectPrivilegesResult, GetDatabaseManagementManagedDatabaseUserObjectPrivilegesOutputArgs } from "./getDatabaseManagementManagedDatabaseUserObjectPrivileges";
export const getDatabaseManagementManagedDatabaseUserObjectPrivileges: typeof import("./getDatabaseManagementManagedDatabaseUserObjectPrivileges").getDatabaseManagementManagedDatabaseUserObjectPrivileges = null as any;
export const getDatabaseManagementManagedDatabaseUserObjectPrivilegesOutput: typeof import("./getDatabaseManagementManagedDatabaseUserObjectPrivileges").getDatabaseManagementManagedDatabaseUserObjectPrivilegesOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseManagementManagedDatabaseUserObjectPrivileges","getDatabaseManagementManagedDatabaseUserObjectPrivilegesOutput"], () => require("./getDatabaseManagementManagedDatabaseUserObjectPrivileges"));

export { GetDatabaseManagementManagedDatabaseUserProxiedForUserArgs, GetDatabaseManagementManagedDatabaseUserProxiedForUserResult, GetDatabaseManagementManagedDatabaseUserProxiedForUserOutputArgs } from "./getDatabaseManagementManagedDatabaseUserProxiedForUser";
export const getDatabaseManagementManagedDatabaseUserProxiedForUser: typeof import("./getDatabaseManagementManagedDatabaseUserProxiedForUser").getDatabaseManagementManagedDatabaseUserProxiedForUser = null as any;
export const getDatabaseManagementManagedDatabaseUserProxiedForUserOutput: typeof import("./getDatabaseManagementManagedDatabaseUserProxiedForUser").getDatabaseManagementManagedDatabaseUserProxiedForUserOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseManagementManagedDatabaseUserProxiedForUser","getDatabaseManagementManagedDatabaseUserProxiedForUserOutput"], () => require("./getDatabaseManagementManagedDatabaseUserProxiedForUser"));

export { GetDatabaseManagementManagedDatabaseUserProxiedForUsersArgs, GetDatabaseManagementManagedDatabaseUserProxiedForUsersResult, GetDatabaseManagementManagedDatabaseUserProxiedForUsersOutputArgs } from "./getDatabaseManagementManagedDatabaseUserProxiedForUsers";
export const getDatabaseManagementManagedDatabaseUserProxiedForUsers: typeof import("./getDatabaseManagementManagedDatabaseUserProxiedForUsers").getDatabaseManagementManagedDatabaseUserProxiedForUsers = null as any;
export const getDatabaseManagementManagedDatabaseUserProxiedForUsersOutput: typeof import("./getDatabaseManagementManagedDatabaseUserProxiedForUsers").getDatabaseManagementManagedDatabaseUserProxiedForUsersOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseManagementManagedDatabaseUserProxiedForUsers","getDatabaseManagementManagedDatabaseUserProxiedForUsersOutput"], () => require("./getDatabaseManagementManagedDatabaseUserProxiedForUsers"));

export { GetDatabaseManagementManagedDatabaseUserRoleArgs, GetDatabaseManagementManagedDatabaseUserRoleResult, GetDatabaseManagementManagedDatabaseUserRoleOutputArgs } from "./getDatabaseManagementManagedDatabaseUserRole";
export const getDatabaseManagementManagedDatabaseUserRole: typeof import("./getDatabaseManagementManagedDatabaseUserRole").getDatabaseManagementManagedDatabaseUserRole = null as any;
export const getDatabaseManagementManagedDatabaseUserRoleOutput: typeof import("./getDatabaseManagementManagedDatabaseUserRole").getDatabaseManagementManagedDatabaseUserRoleOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseManagementManagedDatabaseUserRole","getDatabaseManagementManagedDatabaseUserRoleOutput"], () => require("./getDatabaseManagementManagedDatabaseUserRole"));

export { GetDatabaseManagementManagedDatabaseUserRolesArgs, GetDatabaseManagementManagedDatabaseUserRolesResult, GetDatabaseManagementManagedDatabaseUserRolesOutputArgs } from "./getDatabaseManagementManagedDatabaseUserRoles";
export const getDatabaseManagementManagedDatabaseUserRoles: typeof import("./getDatabaseManagementManagedDatabaseUserRoles").getDatabaseManagementManagedDatabaseUserRoles = null as any;
export const getDatabaseManagementManagedDatabaseUserRolesOutput: typeof import("./getDatabaseManagementManagedDatabaseUserRoles").getDatabaseManagementManagedDatabaseUserRolesOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseManagementManagedDatabaseUserRoles","getDatabaseManagementManagedDatabaseUserRolesOutput"], () => require("./getDatabaseManagementManagedDatabaseUserRoles"));

export { GetDatabaseManagementManagedDatabaseUsersArgs, GetDatabaseManagementManagedDatabaseUsersResult, GetDatabaseManagementManagedDatabaseUsersOutputArgs } from "./getDatabaseManagementManagedDatabaseUsers";
export const getDatabaseManagementManagedDatabaseUsers: typeof import("./getDatabaseManagementManagedDatabaseUsers").getDatabaseManagementManagedDatabaseUsers = null as any;
export const getDatabaseManagementManagedDatabaseUsersOutput: typeof import("./getDatabaseManagementManagedDatabaseUsers").getDatabaseManagementManagedDatabaseUsersOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseManagementManagedDatabaseUsers","getDatabaseManagementManagedDatabaseUsersOutput"], () => require("./getDatabaseManagementManagedDatabaseUsers"));

export { GetDatabaseManagementManagedDatabasesArgs, GetDatabaseManagementManagedDatabasesResult, GetDatabaseManagementManagedDatabasesOutputArgs } from "./getDatabaseManagementManagedDatabases";
export const getDatabaseManagementManagedDatabases: typeof import("./getDatabaseManagementManagedDatabases").getDatabaseManagementManagedDatabases = null as any;
export const getDatabaseManagementManagedDatabasesOutput: typeof import("./getDatabaseManagementManagedDatabases").getDatabaseManagementManagedDatabasesOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseManagementManagedDatabases","getDatabaseManagementManagedDatabasesOutput"], () => require("./getDatabaseManagementManagedDatabases"));

export { GetDatabaseManagementManagedDatabasesAsmPropertiesArgs, GetDatabaseManagementManagedDatabasesAsmPropertiesResult, GetDatabaseManagementManagedDatabasesAsmPropertiesOutputArgs } from "./getDatabaseManagementManagedDatabasesAsmProperties";
export const getDatabaseManagementManagedDatabasesAsmProperties: typeof import("./getDatabaseManagementManagedDatabasesAsmProperties").getDatabaseManagementManagedDatabasesAsmProperties = null as any;
export const getDatabaseManagementManagedDatabasesAsmPropertiesOutput: typeof import("./getDatabaseManagementManagedDatabasesAsmProperties").getDatabaseManagementManagedDatabasesAsmPropertiesOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseManagementManagedDatabasesAsmProperties","getDatabaseManagementManagedDatabasesAsmPropertiesOutput"], () => require("./getDatabaseManagementManagedDatabasesAsmProperties"));

export { GetDatabaseManagementManagedDatabasesAsmPropertyArgs, GetDatabaseManagementManagedDatabasesAsmPropertyResult, GetDatabaseManagementManagedDatabasesAsmPropertyOutputArgs } from "./getDatabaseManagementManagedDatabasesAsmProperty";
export const getDatabaseManagementManagedDatabasesAsmProperty: typeof import("./getDatabaseManagementManagedDatabasesAsmProperty").getDatabaseManagementManagedDatabasesAsmProperty = null as any;
export const getDatabaseManagementManagedDatabasesAsmPropertyOutput: typeof import("./getDatabaseManagementManagedDatabasesAsmProperty").getDatabaseManagementManagedDatabasesAsmPropertyOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseManagementManagedDatabasesAsmProperty","getDatabaseManagementManagedDatabasesAsmPropertyOutput"], () => require("./getDatabaseManagementManagedDatabasesAsmProperty"));

export { GetDatabaseManagementManagedDatabasesDatabaseParameterArgs, GetDatabaseManagementManagedDatabasesDatabaseParameterResult, GetDatabaseManagementManagedDatabasesDatabaseParameterOutputArgs } from "./getDatabaseManagementManagedDatabasesDatabaseParameter";
export const getDatabaseManagementManagedDatabasesDatabaseParameter: typeof import("./getDatabaseManagementManagedDatabasesDatabaseParameter").getDatabaseManagementManagedDatabasesDatabaseParameter = null as any;
export const getDatabaseManagementManagedDatabasesDatabaseParameterOutput: typeof import("./getDatabaseManagementManagedDatabasesDatabaseParameter").getDatabaseManagementManagedDatabasesDatabaseParameterOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseManagementManagedDatabasesDatabaseParameter","getDatabaseManagementManagedDatabasesDatabaseParameterOutput"], () => require("./getDatabaseManagementManagedDatabasesDatabaseParameter"));

export { GetDatabaseManagementManagedDatabasesDatabaseParametersArgs, GetDatabaseManagementManagedDatabasesDatabaseParametersResult, GetDatabaseManagementManagedDatabasesDatabaseParametersOutputArgs } from "./getDatabaseManagementManagedDatabasesDatabaseParameters";
export const getDatabaseManagementManagedDatabasesDatabaseParameters: typeof import("./getDatabaseManagementManagedDatabasesDatabaseParameters").getDatabaseManagementManagedDatabasesDatabaseParameters = null as any;
export const getDatabaseManagementManagedDatabasesDatabaseParametersOutput: typeof import("./getDatabaseManagementManagedDatabasesDatabaseParameters").getDatabaseManagementManagedDatabasesDatabaseParametersOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseManagementManagedDatabasesDatabaseParameters","getDatabaseManagementManagedDatabasesDatabaseParametersOutput"], () => require("./getDatabaseManagementManagedDatabasesDatabaseParameters"));

export { GetDatabaseManagementManagedDatabasesUserProxyUserArgs, GetDatabaseManagementManagedDatabasesUserProxyUserResult, GetDatabaseManagementManagedDatabasesUserProxyUserOutputArgs } from "./getDatabaseManagementManagedDatabasesUserProxyUser";
export const getDatabaseManagementManagedDatabasesUserProxyUser: typeof import("./getDatabaseManagementManagedDatabasesUserProxyUser").getDatabaseManagementManagedDatabasesUserProxyUser = null as any;
export const getDatabaseManagementManagedDatabasesUserProxyUserOutput: typeof import("./getDatabaseManagementManagedDatabasesUserProxyUser").getDatabaseManagementManagedDatabasesUserProxyUserOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseManagementManagedDatabasesUserProxyUser","getDatabaseManagementManagedDatabasesUserProxyUserOutput"], () => require("./getDatabaseManagementManagedDatabasesUserProxyUser"));

export { GetDatabaseManagementManagedDatabasesUserProxyUsersArgs, GetDatabaseManagementManagedDatabasesUserProxyUsersResult, GetDatabaseManagementManagedDatabasesUserProxyUsersOutputArgs } from "./getDatabaseManagementManagedDatabasesUserProxyUsers";
export const getDatabaseManagementManagedDatabasesUserProxyUsers: typeof import("./getDatabaseManagementManagedDatabasesUserProxyUsers").getDatabaseManagementManagedDatabasesUserProxyUsers = null as any;
export const getDatabaseManagementManagedDatabasesUserProxyUsersOutput: typeof import("./getDatabaseManagementManagedDatabasesUserProxyUsers").getDatabaseManagementManagedDatabasesUserProxyUsersOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseManagementManagedDatabasesUserProxyUsers","getDatabaseManagementManagedDatabasesUserProxyUsersOutput"], () => require("./getDatabaseManagementManagedDatabasesUserProxyUsers"));

export { GetDatabaseManagementManagedDatabasesUserSystemPrivilegeArgs, GetDatabaseManagementManagedDatabasesUserSystemPrivilegeResult, GetDatabaseManagementManagedDatabasesUserSystemPrivilegeOutputArgs } from "./getDatabaseManagementManagedDatabasesUserSystemPrivilege";
export const getDatabaseManagementManagedDatabasesUserSystemPrivilege: typeof import("./getDatabaseManagementManagedDatabasesUserSystemPrivilege").getDatabaseManagementManagedDatabasesUserSystemPrivilege = null as any;
export const getDatabaseManagementManagedDatabasesUserSystemPrivilegeOutput: typeof import("./getDatabaseManagementManagedDatabasesUserSystemPrivilege").getDatabaseManagementManagedDatabasesUserSystemPrivilegeOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseManagementManagedDatabasesUserSystemPrivilege","getDatabaseManagementManagedDatabasesUserSystemPrivilegeOutput"], () => require("./getDatabaseManagementManagedDatabasesUserSystemPrivilege"));

export { GetDatabaseManagementManagedDatabasesUserSystemPrivilegesArgs, GetDatabaseManagementManagedDatabasesUserSystemPrivilegesResult, GetDatabaseManagementManagedDatabasesUserSystemPrivilegesOutputArgs } from "./getDatabaseManagementManagedDatabasesUserSystemPrivileges";
export const getDatabaseManagementManagedDatabasesUserSystemPrivileges: typeof import("./getDatabaseManagementManagedDatabasesUserSystemPrivileges").getDatabaseManagementManagedDatabasesUserSystemPrivileges = null as any;
export const getDatabaseManagementManagedDatabasesUserSystemPrivilegesOutput: typeof import("./getDatabaseManagementManagedDatabasesUserSystemPrivileges").getDatabaseManagementManagedDatabasesUserSystemPrivilegesOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseManagementManagedDatabasesUserSystemPrivileges","getDatabaseManagementManagedDatabasesUserSystemPrivilegesOutput"], () => require("./getDatabaseManagementManagedDatabasesUserSystemPrivileges"));

export { GetDatabaseManagementManagedMySqlDatabaseArgs, GetDatabaseManagementManagedMySqlDatabaseResult, GetDatabaseManagementManagedMySqlDatabaseOutputArgs } from "./getDatabaseManagementManagedMySqlDatabase";
export const getDatabaseManagementManagedMySqlDatabase: typeof import("./getDatabaseManagementManagedMySqlDatabase").getDatabaseManagementManagedMySqlDatabase = null as any;
export const getDatabaseManagementManagedMySqlDatabaseOutput: typeof import("./getDatabaseManagementManagedMySqlDatabase").getDatabaseManagementManagedMySqlDatabaseOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseManagementManagedMySqlDatabase","getDatabaseManagementManagedMySqlDatabaseOutput"], () => require("./getDatabaseManagementManagedMySqlDatabase"));

export { GetDatabaseManagementManagedMySqlDatabaseConfigurationDataArgs, GetDatabaseManagementManagedMySqlDatabaseConfigurationDataResult, GetDatabaseManagementManagedMySqlDatabaseConfigurationDataOutputArgs } from "./getDatabaseManagementManagedMySqlDatabaseConfigurationData";
export const getDatabaseManagementManagedMySqlDatabaseConfigurationData: typeof import("./getDatabaseManagementManagedMySqlDatabaseConfigurationData").getDatabaseManagementManagedMySqlDatabaseConfigurationData = null as any;
export const getDatabaseManagementManagedMySqlDatabaseConfigurationDataOutput: typeof import("./getDatabaseManagementManagedMySqlDatabaseConfigurationData").getDatabaseManagementManagedMySqlDatabaseConfigurationDataOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseManagementManagedMySqlDatabaseConfigurationData","getDatabaseManagementManagedMySqlDatabaseConfigurationDataOutput"], () => require("./getDatabaseManagementManagedMySqlDatabaseConfigurationData"));

export { GetDatabaseManagementManagedMySqlDatabaseSqlDataArgs, GetDatabaseManagementManagedMySqlDatabaseSqlDataResult, GetDatabaseManagementManagedMySqlDatabaseSqlDataOutputArgs } from "./getDatabaseManagementManagedMySqlDatabaseSqlData";
export const getDatabaseManagementManagedMySqlDatabaseSqlData: typeof import("./getDatabaseManagementManagedMySqlDatabaseSqlData").getDatabaseManagementManagedMySqlDatabaseSqlData = null as any;
export const getDatabaseManagementManagedMySqlDatabaseSqlDataOutput: typeof import("./getDatabaseManagementManagedMySqlDatabaseSqlData").getDatabaseManagementManagedMySqlDatabaseSqlDataOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseManagementManagedMySqlDatabaseSqlData","getDatabaseManagementManagedMySqlDatabaseSqlDataOutput"], () => require("./getDatabaseManagementManagedMySqlDatabaseSqlData"));

export { GetDatabaseManagementManagedMySqlDatabasesArgs, GetDatabaseManagementManagedMySqlDatabasesResult, GetDatabaseManagementManagedMySqlDatabasesOutputArgs } from "./getDatabaseManagementManagedMySqlDatabases";
export const getDatabaseManagementManagedMySqlDatabases: typeof import("./getDatabaseManagementManagedMySqlDatabases").getDatabaseManagementManagedMySqlDatabases = null as any;
export const getDatabaseManagementManagedMySqlDatabasesOutput: typeof import("./getDatabaseManagementManagedMySqlDatabases").getDatabaseManagementManagedMySqlDatabasesOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseManagementManagedMySqlDatabases","getDatabaseManagementManagedMySqlDatabasesOutput"], () => require("./getDatabaseManagementManagedMySqlDatabases"));

export { GetDatabaseManagementNamedCredentialArgs, GetDatabaseManagementNamedCredentialResult, GetDatabaseManagementNamedCredentialOutputArgs } from "./getDatabaseManagementNamedCredential";
export const getDatabaseManagementNamedCredential: typeof import("./getDatabaseManagementNamedCredential").getDatabaseManagementNamedCredential = null as any;
export const getDatabaseManagementNamedCredentialOutput: typeof import("./getDatabaseManagementNamedCredential").getDatabaseManagementNamedCredentialOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseManagementNamedCredential","getDatabaseManagementNamedCredentialOutput"], () => require("./getDatabaseManagementNamedCredential"));

export { GetDatabaseManagementNamedCredentialsArgs, GetDatabaseManagementNamedCredentialsResult, GetDatabaseManagementNamedCredentialsOutputArgs } from "./getDatabaseManagementNamedCredentials";
export const getDatabaseManagementNamedCredentials: typeof import("./getDatabaseManagementNamedCredentials").getDatabaseManagementNamedCredentials = null as any;
export const getDatabaseManagementNamedCredentialsOutput: typeof import("./getDatabaseManagementNamedCredentials").getDatabaseManagementNamedCredentialsOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseManagementNamedCredentials","getDatabaseManagementNamedCredentialsOutput"], () => require("./getDatabaseManagementNamedCredentials"));

export { GetDatabaseMigrationConnectionArgs, GetDatabaseMigrationConnectionResult, GetDatabaseMigrationConnectionOutputArgs } from "./getDatabaseMigrationConnection";
export const getDatabaseMigrationConnection: typeof import("./getDatabaseMigrationConnection").getDatabaseMigrationConnection = null as any;
export const getDatabaseMigrationConnectionOutput: typeof import("./getDatabaseMigrationConnection").getDatabaseMigrationConnectionOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseMigrationConnection","getDatabaseMigrationConnectionOutput"], () => require("./getDatabaseMigrationConnection"));

export { GetDatabaseMigrationConnectionsArgs, GetDatabaseMigrationConnectionsResult, GetDatabaseMigrationConnectionsOutputArgs } from "./getDatabaseMigrationConnections";
export const getDatabaseMigrationConnections: typeof import("./getDatabaseMigrationConnections").getDatabaseMigrationConnections = null as any;
export const getDatabaseMigrationConnectionsOutput: typeof import("./getDatabaseMigrationConnections").getDatabaseMigrationConnectionsOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseMigrationConnections","getDatabaseMigrationConnectionsOutput"], () => require("./getDatabaseMigrationConnections"));

export { GetDatabaseMigrationJobArgs, GetDatabaseMigrationJobResult, GetDatabaseMigrationJobOutputArgs } from "./getDatabaseMigrationJob";
export const getDatabaseMigrationJob: typeof import("./getDatabaseMigrationJob").getDatabaseMigrationJob = null as any;
export const getDatabaseMigrationJobOutput: typeof import("./getDatabaseMigrationJob").getDatabaseMigrationJobOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseMigrationJob","getDatabaseMigrationJobOutput"], () => require("./getDatabaseMigrationJob"));

export { GetDatabaseMigrationJobAdvisorReportArgs, GetDatabaseMigrationJobAdvisorReportResult, GetDatabaseMigrationJobAdvisorReportOutputArgs } from "./getDatabaseMigrationJobAdvisorReport";
export const getDatabaseMigrationJobAdvisorReport: typeof import("./getDatabaseMigrationJobAdvisorReport").getDatabaseMigrationJobAdvisorReport = null as any;
export const getDatabaseMigrationJobAdvisorReportOutput: typeof import("./getDatabaseMigrationJobAdvisorReport").getDatabaseMigrationJobAdvisorReportOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseMigrationJobAdvisorReport","getDatabaseMigrationJobAdvisorReportOutput"], () => require("./getDatabaseMigrationJobAdvisorReport"));

export { GetDatabaseMigrationJobOutputArgs, GetDatabaseMigrationJobOutputResult, GetDatabaseMigrationJobOutputOutputArgs } from "./getDatabaseMigrationJobOutput";
export const getDatabaseMigrationJobOutput: typeof import("./getDatabaseMigrationJobOutput").getDatabaseMigrationJobOutput = null as any;
export const getDatabaseMigrationJobOutputOutput: typeof import("./getDatabaseMigrationJobOutput").getDatabaseMigrationJobOutputOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseMigrationJobOutput","getDatabaseMigrationJobOutputOutput"], () => require("./getDatabaseMigrationJobOutput"));

export { GetDatabaseMigrationJobsArgs, GetDatabaseMigrationJobsResult, GetDatabaseMigrationJobsOutputArgs } from "./getDatabaseMigrationJobs";
export const getDatabaseMigrationJobs: typeof import("./getDatabaseMigrationJobs").getDatabaseMigrationJobs = null as any;
export const getDatabaseMigrationJobsOutput: typeof import("./getDatabaseMigrationJobs").getDatabaseMigrationJobsOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseMigrationJobs","getDatabaseMigrationJobsOutput"], () => require("./getDatabaseMigrationJobs"));

export { GetDatabaseMigrationMigrationArgs, GetDatabaseMigrationMigrationResult, GetDatabaseMigrationMigrationOutputArgs } from "./getDatabaseMigrationMigration";
export const getDatabaseMigrationMigration: typeof import("./getDatabaseMigrationMigration").getDatabaseMigrationMigration = null as any;
export const getDatabaseMigrationMigrationOutput: typeof import("./getDatabaseMigrationMigration").getDatabaseMigrationMigrationOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseMigrationMigration","getDatabaseMigrationMigrationOutput"], () => require("./getDatabaseMigrationMigration"));

export { GetDatabaseMigrationMigrationObjectTypesArgs, GetDatabaseMigrationMigrationObjectTypesResult, GetDatabaseMigrationMigrationObjectTypesOutputArgs } from "./getDatabaseMigrationMigrationObjectTypes";
export const getDatabaseMigrationMigrationObjectTypes: typeof import("./getDatabaseMigrationMigrationObjectTypes").getDatabaseMigrationMigrationObjectTypes = null as any;
export const getDatabaseMigrationMigrationObjectTypesOutput: typeof import("./getDatabaseMigrationMigrationObjectTypes").getDatabaseMigrationMigrationObjectTypesOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseMigrationMigrationObjectTypes","getDatabaseMigrationMigrationObjectTypesOutput"], () => require("./getDatabaseMigrationMigrationObjectTypes"));

export { GetDatabaseMigrationMigrationsArgs, GetDatabaseMigrationMigrationsResult, GetDatabaseMigrationMigrationsOutputArgs } from "./getDatabaseMigrationMigrations";
export const getDatabaseMigrationMigrations: typeof import("./getDatabaseMigrationMigrations").getDatabaseMigrationMigrations = null as any;
export const getDatabaseMigrationMigrationsOutput: typeof import("./getDatabaseMigrationMigrations").getDatabaseMigrationMigrationsOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseMigrationMigrations","getDatabaseMigrationMigrationsOutput"], () => require("./getDatabaseMigrationMigrations"));

export { GetDatabaseOneoffPatchArgs, GetDatabaseOneoffPatchResult, GetDatabaseOneoffPatchOutputArgs } from "./getDatabaseOneoffPatch";
export const getDatabaseOneoffPatch: typeof import("./getDatabaseOneoffPatch").getDatabaseOneoffPatch = null as any;
export const getDatabaseOneoffPatchOutput: typeof import("./getDatabaseOneoffPatch").getDatabaseOneoffPatchOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseOneoffPatch","getDatabaseOneoffPatchOutput"], () => require("./getDatabaseOneoffPatch"));

export { GetDatabaseOneoffPatchesArgs, GetDatabaseOneoffPatchesResult, GetDatabaseOneoffPatchesOutputArgs } from "./getDatabaseOneoffPatches";
export const getDatabaseOneoffPatches: typeof import("./getDatabaseOneoffPatches").getDatabaseOneoffPatches = null as any;
export const getDatabaseOneoffPatchesOutput: typeof import("./getDatabaseOneoffPatches").getDatabaseOneoffPatchesOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseOneoffPatches","getDatabaseOneoffPatchesOutput"], () => require("./getDatabaseOneoffPatches"));

export { GetDatabasePluggableDatabaseArgs, GetDatabasePluggableDatabaseResult, GetDatabasePluggableDatabaseOutputArgs } from "./getDatabasePluggableDatabase";
export const getDatabasePluggableDatabase: typeof import("./getDatabasePluggableDatabase").getDatabasePluggableDatabase = null as any;
export const getDatabasePluggableDatabaseOutput: typeof import("./getDatabasePluggableDatabase").getDatabasePluggableDatabaseOutput = null as any;
utilities.lazyLoad(exports, ["getDatabasePluggableDatabase","getDatabasePluggableDatabaseOutput"], () => require("./getDatabasePluggableDatabase"));

export { GetDatabasePluggableDatabasesArgs, GetDatabasePluggableDatabasesResult, GetDatabasePluggableDatabasesOutputArgs } from "./getDatabasePluggableDatabases";
export const getDatabasePluggableDatabases: typeof import("./getDatabasePluggableDatabases").getDatabasePluggableDatabases = null as any;
export const getDatabasePluggableDatabasesOutput: typeof import("./getDatabasePluggableDatabases").getDatabasePluggableDatabasesOutput = null as any;
utilities.lazyLoad(exports, ["getDatabasePluggableDatabases","getDatabasePluggableDatabasesOutput"], () => require("./getDatabasePluggableDatabases"));

export { GetDatabaseSystemVersionsArgs, GetDatabaseSystemVersionsResult, GetDatabaseSystemVersionsOutputArgs } from "./getDatabaseSystemVersions";
export const getDatabaseSystemVersions: typeof import("./getDatabaseSystemVersions").getDatabaseSystemVersions = null as any;
export const getDatabaseSystemVersionsOutput: typeof import("./getDatabaseSystemVersions").getDatabaseSystemVersionsOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseSystemVersions","getDatabaseSystemVersionsOutput"], () => require("./getDatabaseSystemVersions"));

export { GetDatabaseToolsDatabaseToolsConnectionArgs, GetDatabaseToolsDatabaseToolsConnectionResult, GetDatabaseToolsDatabaseToolsConnectionOutputArgs } from "./getDatabaseToolsDatabaseToolsConnection";
export const getDatabaseToolsDatabaseToolsConnection: typeof import("./getDatabaseToolsDatabaseToolsConnection").getDatabaseToolsDatabaseToolsConnection = null as any;
export const getDatabaseToolsDatabaseToolsConnectionOutput: typeof import("./getDatabaseToolsDatabaseToolsConnection").getDatabaseToolsDatabaseToolsConnectionOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseToolsDatabaseToolsConnection","getDatabaseToolsDatabaseToolsConnectionOutput"], () => require("./getDatabaseToolsDatabaseToolsConnection"));

export { GetDatabaseToolsDatabaseToolsConnectionsArgs, GetDatabaseToolsDatabaseToolsConnectionsResult, GetDatabaseToolsDatabaseToolsConnectionsOutputArgs } from "./getDatabaseToolsDatabaseToolsConnections";
export const getDatabaseToolsDatabaseToolsConnections: typeof import("./getDatabaseToolsDatabaseToolsConnections").getDatabaseToolsDatabaseToolsConnections = null as any;
export const getDatabaseToolsDatabaseToolsConnectionsOutput: typeof import("./getDatabaseToolsDatabaseToolsConnections").getDatabaseToolsDatabaseToolsConnectionsOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseToolsDatabaseToolsConnections","getDatabaseToolsDatabaseToolsConnectionsOutput"], () => require("./getDatabaseToolsDatabaseToolsConnections"));

export { GetDatabaseToolsDatabaseToolsEndpointServiceArgs, GetDatabaseToolsDatabaseToolsEndpointServiceResult, GetDatabaseToolsDatabaseToolsEndpointServiceOutputArgs } from "./getDatabaseToolsDatabaseToolsEndpointService";
export const getDatabaseToolsDatabaseToolsEndpointService: typeof import("./getDatabaseToolsDatabaseToolsEndpointService").getDatabaseToolsDatabaseToolsEndpointService = null as any;
export const getDatabaseToolsDatabaseToolsEndpointServiceOutput: typeof import("./getDatabaseToolsDatabaseToolsEndpointService").getDatabaseToolsDatabaseToolsEndpointServiceOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseToolsDatabaseToolsEndpointService","getDatabaseToolsDatabaseToolsEndpointServiceOutput"], () => require("./getDatabaseToolsDatabaseToolsEndpointService"));

export { GetDatabaseToolsDatabaseToolsEndpointServicesArgs, GetDatabaseToolsDatabaseToolsEndpointServicesResult, GetDatabaseToolsDatabaseToolsEndpointServicesOutputArgs } from "./getDatabaseToolsDatabaseToolsEndpointServices";
export const getDatabaseToolsDatabaseToolsEndpointServices: typeof import("./getDatabaseToolsDatabaseToolsEndpointServices").getDatabaseToolsDatabaseToolsEndpointServices = null as any;
export const getDatabaseToolsDatabaseToolsEndpointServicesOutput: typeof import("./getDatabaseToolsDatabaseToolsEndpointServices").getDatabaseToolsDatabaseToolsEndpointServicesOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseToolsDatabaseToolsEndpointServices","getDatabaseToolsDatabaseToolsEndpointServicesOutput"], () => require("./getDatabaseToolsDatabaseToolsEndpointServices"));

export { GetDatabaseToolsDatabaseToolsPrivateEndpointArgs, GetDatabaseToolsDatabaseToolsPrivateEndpointResult, GetDatabaseToolsDatabaseToolsPrivateEndpointOutputArgs } from "./getDatabaseToolsDatabaseToolsPrivateEndpoint";
export const getDatabaseToolsDatabaseToolsPrivateEndpoint: typeof import("./getDatabaseToolsDatabaseToolsPrivateEndpoint").getDatabaseToolsDatabaseToolsPrivateEndpoint = null as any;
export const getDatabaseToolsDatabaseToolsPrivateEndpointOutput: typeof import("./getDatabaseToolsDatabaseToolsPrivateEndpoint").getDatabaseToolsDatabaseToolsPrivateEndpointOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseToolsDatabaseToolsPrivateEndpoint","getDatabaseToolsDatabaseToolsPrivateEndpointOutput"], () => require("./getDatabaseToolsDatabaseToolsPrivateEndpoint"));

export { GetDatabaseToolsDatabaseToolsPrivateEndpointsArgs, GetDatabaseToolsDatabaseToolsPrivateEndpointsResult, GetDatabaseToolsDatabaseToolsPrivateEndpointsOutputArgs } from "./getDatabaseToolsDatabaseToolsPrivateEndpoints";
export const getDatabaseToolsDatabaseToolsPrivateEndpoints: typeof import("./getDatabaseToolsDatabaseToolsPrivateEndpoints").getDatabaseToolsDatabaseToolsPrivateEndpoints = null as any;
export const getDatabaseToolsDatabaseToolsPrivateEndpointsOutput: typeof import("./getDatabaseToolsDatabaseToolsPrivateEndpoints").getDatabaseToolsDatabaseToolsPrivateEndpointsOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseToolsDatabaseToolsPrivateEndpoints","getDatabaseToolsDatabaseToolsPrivateEndpointsOutput"], () => require("./getDatabaseToolsDatabaseToolsPrivateEndpoints"));

export { GetDatabaseVmClusterArgs, GetDatabaseVmClusterResult, GetDatabaseVmClusterOutputArgs } from "./getDatabaseVmCluster";
export const getDatabaseVmCluster: typeof import("./getDatabaseVmCluster").getDatabaseVmCluster = null as any;
export const getDatabaseVmClusterOutput: typeof import("./getDatabaseVmCluster").getDatabaseVmClusterOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseVmCluster","getDatabaseVmClusterOutput"], () => require("./getDatabaseVmCluster"));

export { GetDatabaseVmClusterNetworkArgs, GetDatabaseVmClusterNetworkResult, GetDatabaseVmClusterNetworkOutputArgs } from "./getDatabaseVmClusterNetwork";
export const getDatabaseVmClusterNetwork: typeof import("./getDatabaseVmClusterNetwork").getDatabaseVmClusterNetwork = null as any;
export const getDatabaseVmClusterNetworkOutput: typeof import("./getDatabaseVmClusterNetwork").getDatabaseVmClusterNetworkOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseVmClusterNetwork","getDatabaseVmClusterNetworkOutput"], () => require("./getDatabaseVmClusterNetwork"));

export { GetDatabaseVmClusterNetworkDownloadConfigFileArgs, GetDatabaseVmClusterNetworkDownloadConfigFileResult, GetDatabaseVmClusterNetworkDownloadConfigFileOutputArgs } from "./getDatabaseVmClusterNetworkDownloadConfigFile";
export const getDatabaseVmClusterNetworkDownloadConfigFile: typeof import("./getDatabaseVmClusterNetworkDownloadConfigFile").getDatabaseVmClusterNetworkDownloadConfigFile = null as any;
export const getDatabaseVmClusterNetworkDownloadConfigFileOutput: typeof import("./getDatabaseVmClusterNetworkDownloadConfigFile").getDatabaseVmClusterNetworkDownloadConfigFileOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseVmClusterNetworkDownloadConfigFile","getDatabaseVmClusterNetworkDownloadConfigFileOutput"], () => require("./getDatabaseVmClusterNetworkDownloadConfigFile"));

export { GetDatabaseVmClusterNetworksArgs, GetDatabaseVmClusterNetworksResult, GetDatabaseVmClusterNetworksOutputArgs } from "./getDatabaseVmClusterNetworks";
export const getDatabaseVmClusterNetworks: typeof import("./getDatabaseVmClusterNetworks").getDatabaseVmClusterNetworks = null as any;
export const getDatabaseVmClusterNetworksOutput: typeof import("./getDatabaseVmClusterNetworks").getDatabaseVmClusterNetworksOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseVmClusterNetworks","getDatabaseVmClusterNetworksOutput"], () => require("./getDatabaseVmClusterNetworks"));

export { GetDatabaseVmClusterPatchArgs, GetDatabaseVmClusterPatchResult, GetDatabaseVmClusterPatchOutputArgs } from "./getDatabaseVmClusterPatch";
export const getDatabaseVmClusterPatch: typeof import("./getDatabaseVmClusterPatch").getDatabaseVmClusterPatch = null as any;
export const getDatabaseVmClusterPatchOutput: typeof import("./getDatabaseVmClusterPatch").getDatabaseVmClusterPatchOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseVmClusterPatch","getDatabaseVmClusterPatchOutput"], () => require("./getDatabaseVmClusterPatch"));

export { GetDatabaseVmClusterPatchHistoryEntriesArgs, GetDatabaseVmClusterPatchHistoryEntriesResult, GetDatabaseVmClusterPatchHistoryEntriesOutputArgs } from "./getDatabaseVmClusterPatchHistoryEntries";
export const getDatabaseVmClusterPatchHistoryEntries: typeof import("./getDatabaseVmClusterPatchHistoryEntries").getDatabaseVmClusterPatchHistoryEntries = null as any;
export const getDatabaseVmClusterPatchHistoryEntriesOutput: typeof import("./getDatabaseVmClusterPatchHistoryEntries").getDatabaseVmClusterPatchHistoryEntriesOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseVmClusterPatchHistoryEntries","getDatabaseVmClusterPatchHistoryEntriesOutput"], () => require("./getDatabaseVmClusterPatchHistoryEntries"));

export { GetDatabaseVmClusterPatchHistoryEntryArgs, GetDatabaseVmClusterPatchHistoryEntryResult, GetDatabaseVmClusterPatchHistoryEntryOutputArgs } from "./getDatabaseVmClusterPatchHistoryEntry";
export const getDatabaseVmClusterPatchHistoryEntry: typeof import("./getDatabaseVmClusterPatchHistoryEntry").getDatabaseVmClusterPatchHistoryEntry = null as any;
export const getDatabaseVmClusterPatchHistoryEntryOutput: typeof import("./getDatabaseVmClusterPatchHistoryEntry").getDatabaseVmClusterPatchHistoryEntryOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseVmClusterPatchHistoryEntry","getDatabaseVmClusterPatchHistoryEntryOutput"], () => require("./getDatabaseVmClusterPatchHistoryEntry"));

export { GetDatabaseVmClusterPatchesArgs, GetDatabaseVmClusterPatchesResult, GetDatabaseVmClusterPatchesOutputArgs } from "./getDatabaseVmClusterPatches";
export const getDatabaseVmClusterPatches: typeof import("./getDatabaseVmClusterPatches").getDatabaseVmClusterPatches = null as any;
export const getDatabaseVmClusterPatchesOutput: typeof import("./getDatabaseVmClusterPatches").getDatabaseVmClusterPatchesOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseVmClusterPatches","getDatabaseVmClusterPatchesOutput"], () => require("./getDatabaseVmClusterPatches"));

export { GetDatabaseVmClusterRecommendedNetworkArgs, GetDatabaseVmClusterRecommendedNetworkResult, GetDatabaseVmClusterRecommendedNetworkOutputArgs } from "./getDatabaseVmClusterRecommendedNetwork";
export const getDatabaseVmClusterRecommendedNetwork: typeof import("./getDatabaseVmClusterRecommendedNetwork").getDatabaseVmClusterRecommendedNetwork = null as any;
export const getDatabaseVmClusterRecommendedNetworkOutput: typeof import("./getDatabaseVmClusterRecommendedNetwork").getDatabaseVmClusterRecommendedNetworkOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseVmClusterRecommendedNetwork","getDatabaseVmClusterRecommendedNetworkOutput"], () => require("./getDatabaseVmClusterRecommendedNetwork"));

export { GetDatabaseVmClusterUpdateArgs, GetDatabaseVmClusterUpdateResult, GetDatabaseVmClusterUpdateOutputArgs } from "./getDatabaseVmClusterUpdate";
export const getDatabaseVmClusterUpdate: typeof import("./getDatabaseVmClusterUpdate").getDatabaseVmClusterUpdate = null as any;
export const getDatabaseVmClusterUpdateOutput: typeof import("./getDatabaseVmClusterUpdate").getDatabaseVmClusterUpdateOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseVmClusterUpdate","getDatabaseVmClusterUpdateOutput"], () => require("./getDatabaseVmClusterUpdate"));

export { GetDatabaseVmClusterUpdateHistoryEntriesArgs, GetDatabaseVmClusterUpdateHistoryEntriesResult, GetDatabaseVmClusterUpdateHistoryEntriesOutputArgs } from "./getDatabaseVmClusterUpdateHistoryEntries";
export const getDatabaseVmClusterUpdateHistoryEntries: typeof import("./getDatabaseVmClusterUpdateHistoryEntries").getDatabaseVmClusterUpdateHistoryEntries = null as any;
export const getDatabaseVmClusterUpdateHistoryEntriesOutput: typeof import("./getDatabaseVmClusterUpdateHistoryEntries").getDatabaseVmClusterUpdateHistoryEntriesOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseVmClusterUpdateHistoryEntries","getDatabaseVmClusterUpdateHistoryEntriesOutput"], () => require("./getDatabaseVmClusterUpdateHistoryEntries"));

export { GetDatabaseVmClusterUpdateHistoryEntryArgs, GetDatabaseVmClusterUpdateHistoryEntryResult, GetDatabaseVmClusterUpdateHistoryEntryOutputArgs } from "./getDatabaseVmClusterUpdateHistoryEntry";
export const getDatabaseVmClusterUpdateHistoryEntry: typeof import("./getDatabaseVmClusterUpdateHistoryEntry").getDatabaseVmClusterUpdateHistoryEntry = null as any;
export const getDatabaseVmClusterUpdateHistoryEntryOutput: typeof import("./getDatabaseVmClusterUpdateHistoryEntry").getDatabaseVmClusterUpdateHistoryEntryOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseVmClusterUpdateHistoryEntry","getDatabaseVmClusterUpdateHistoryEntryOutput"], () => require("./getDatabaseVmClusterUpdateHistoryEntry"));

export { GetDatabaseVmClusterUpdatesArgs, GetDatabaseVmClusterUpdatesResult, GetDatabaseVmClusterUpdatesOutputArgs } from "./getDatabaseVmClusterUpdates";
export const getDatabaseVmClusterUpdates: typeof import("./getDatabaseVmClusterUpdates").getDatabaseVmClusterUpdates = null as any;
export const getDatabaseVmClusterUpdatesOutput: typeof import("./getDatabaseVmClusterUpdates").getDatabaseVmClusterUpdatesOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseVmClusterUpdates","getDatabaseVmClusterUpdatesOutput"], () => require("./getDatabaseVmClusterUpdates"));

export { GetDatabaseVmClustersArgs, GetDatabaseVmClustersResult, GetDatabaseVmClustersOutputArgs } from "./getDatabaseVmClusters";
export const getDatabaseVmClusters: typeof import("./getDatabaseVmClusters").getDatabaseVmClusters = null as any;
export const getDatabaseVmClustersOutput: typeof import("./getDatabaseVmClusters").getDatabaseVmClustersOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseVmClusters","getDatabaseVmClustersOutput"], () => require("./getDatabaseVmClusters"));

export { GetDatacatalogCatalogArgs, GetDatacatalogCatalogResult, GetDatacatalogCatalogOutputArgs } from "./getDatacatalogCatalog";
export const getDatacatalogCatalog: typeof import("./getDatacatalogCatalog").getDatacatalogCatalog = null as any;
export const getDatacatalogCatalogOutput: typeof import("./getDatacatalogCatalog").getDatacatalogCatalogOutput = null as any;
utilities.lazyLoad(exports, ["getDatacatalogCatalog","getDatacatalogCatalogOutput"], () => require("./getDatacatalogCatalog"));

export { GetDatacatalogCatalogPrivateEndpointArgs, GetDatacatalogCatalogPrivateEndpointResult, GetDatacatalogCatalogPrivateEndpointOutputArgs } from "./getDatacatalogCatalogPrivateEndpoint";
export const getDatacatalogCatalogPrivateEndpoint: typeof import("./getDatacatalogCatalogPrivateEndpoint").getDatacatalogCatalogPrivateEndpoint = null as any;
export const getDatacatalogCatalogPrivateEndpointOutput: typeof import("./getDatacatalogCatalogPrivateEndpoint").getDatacatalogCatalogPrivateEndpointOutput = null as any;
utilities.lazyLoad(exports, ["getDatacatalogCatalogPrivateEndpoint","getDatacatalogCatalogPrivateEndpointOutput"], () => require("./getDatacatalogCatalogPrivateEndpoint"));

export { GetDatacatalogCatalogPrivateEndpointsArgs, GetDatacatalogCatalogPrivateEndpointsResult, GetDatacatalogCatalogPrivateEndpointsOutputArgs } from "./getDatacatalogCatalogPrivateEndpoints";
export const getDatacatalogCatalogPrivateEndpoints: typeof import("./getDatacatalogCatalogPrivateEndpoints").getDatacatalogCatalogPrivateEndpoints = null as any;
export const getDatacatalogCatalogPrivateEndpointsOutput: typeof import("./getDatacatalogCatalogPrivateEndpoints").getDatacatalogCatalogPrivateEndpointsOutput = null as any;
utilities.lazyLoad(exports, ["getDatacatalogCatalogPrivateEndpoints","getDatacatalogCatalogPrivateEndpointsOutput"], () => require("./getDatacatalogCatalogPrivateEndpoints"));

export { GetDatacatalogCatalogTypeArgs, GetDatacatalogCatalogTypeResult, GetDatacatalogCatalogTypeOutputArgs } from "./getDatacatalogCatalogType";
export const getDatacatalogCatalogType: typeof import("./getDatacatalogCatalogType").getDatacatalogCatalogType = null as any;
export const getDatacatalogCatalogTypeOutput: typeof import("./getDatacatalogCatalogType").getDatacatalogCatalogTypeOutput = null as any;
utilities.lazyLoad(exports, ["getDatacatalogCatalogType","getDatacatalogCatalogTypeOutput"], () => require("./getDatacatalogCatalogType"));

export { GetDatacatalogCatalogTypesArgs, GetDatacatalogCatalogTypesResult, GetDatacatalogCatalogTypesOutputArgs } from "./getDatacatalogCatalogTypes";
export const getDatacatalogCatalogTypes: typeof import("./getDatacatalogCatalogTypes").getDatacatalogCatalogTypes = null as any;
export const getDatacatalogCatalogTypesOutput: typeof import("./getDatacatalogCatalogTypes").getDatacatalogCatalogTypesOutput = null as any;
utilities.lazyLoad(exports, ["getDatacatalogCatalogTypes","getDatacatalogCatalogTypesOutput"], () => require("./getDatacatalogCatalogTypes"));

export { GetDatacatalogCatalogsArgs, GetDatacatalogCatalogsResult, GetDatacatalogCatalogsOutputArgs } from "./getDatacatalogCatalogs";
export const getDatacatalogCatalogs: typeof import("./getDatacatalogCatalogs").getDatacatalogCatalogs = null as any;
export const getDatacatalogCatalogsOutput: typeof import("./getDatacatalogCatalogs").getDatacatalogCatalogsOutput = null as any;
utilities.lazyLoad(exports, ["getDatacatalogCatalogs","getDatacatalogCatalogsOutput"], () => require("./getDatacatalogCatalogs"));

export { GetDatacatalogConnectionArgs, GetDatacatalogConnectionResult, GetDatacatalogConnectionOutputArgs } from "./getDatacatalogConnection";
export const getDatacatalogConnection: typeof import("./getDatacatalogConnection").getDatacatalogConnection = null as any;
export const getDatacatalogConnectionOutput: typeof import("./getDatacatalogConnection").getDatacatalogConnectionOutput = null as any;
utilities.lazyLoad(exports, ["getDatacatalogConnection","getDatacatalogConnectionOutput"], () => require("./getDatacatalogConnection"));

export { GetDatacatalogConnectionsArgs, GetDatacatalogConnectionsResult, GetDatacatalogConnectionsOutputArgs } from "./getDatacatalogConnections";
export const getDatacatalogConnections: typeof import("./getDatacatalogConnections").getDatacatalogConnections = null as any;
export const getDatacatalogConnectionsOutput: typeof import("./getDatacatalogConnections").getDatacatalogConnectionsOutput = null as any;
utilities.lazyLoad(exports, ["getDatacatalogConnections","getDatacatalogConnectionsOutput"], () => require("./getDatacatalogConnections"));

export { GetDatacatalogDataAssetArgs, GetDatacatalogDataAssetResult, GetDatacatalogDataAssetOutputArgs } from "./getDatacatalogDataAsset";
export const getDatacatalogDataAsset: typeof import("./getDatacatalogDataAsset").getDatacatalogDataAsset = null as any;
export const getDatacatalogDataAssetOutput: typeof import("./getDatacatalogDataAsset").getDatacatalogDataAssetOutput = null as any;
utilities.lazyLoad(exports, ["getDatacatalogDataAsset","getDatacatalogDataAssetOutput"], () => require("./getDatacatalogDataAsset"));

export { GetDatacatalogDataAssetsArgs, GetDatacatalogDataAssetsResult, GetDatacatalogDataAssetsOutputArgs } from "./getDatacatalogDataAssets";
export const getDatacatalogDataAssets: typeof import("./getDatacatalogDataAssets").getDatacatalogDataAssets = null as any;
export const getDatacatalogDataAssetsOutput: typeof import("./getDatacatalogDataAssets").getDatacatalogDataAssetsOutput = null as any;
utilities.lazyLoad(exports, ["getDatacatalogDataAssets","getDatacatalogDataAssetsOutput"], () => require("./getDatacatalogDataAssets"));

export { GetDatacatalogMetastoreArgs, GetDatacatalogMetastoreResult, GetDatacatalogMetastoreOutputArgs } from "./getDatacatalogMetastore";
export const getDatacatalogMetastore: typeof import("./getDatacatalogMetastore").getDatacatalogMetastore = null as any;
export const getDatacatalogMetastoreOutput: typeof import("./getDatacatalogMetastore").getDatacatalogMetastoreOutput = null as any;
utilities.lazyLoad(exports, ["getDatacatalogMetastore","getDatacatalogMetastoreOutput"], () => require("./getDatacatalogMetastore"));

export { GetDatacatalogMetastoresArgs, GetDatacatalogMetastoresResult, GetDatacatalogMetastoresOutputArgs } from "./getDatacatalogMetastores";
export const getDatacatalogMetastores: typeof import("./getDatacatalogMetastores").getDatacatalogMetastores = null as any;
export const getDatacatalogMetastoresOutput: typeof import("./getDatacatalogMetastores").getDatacatalogMetastoresOutput = null as any;
utilities.lazyLoad(exports, ["getDatacatalogMetastores","getDatacatalogMetastoresOutput"], () => require("./getDatacatalogMetastores"));

export { GetDataflowApplicationArgs, GetDataflowApplicationResult, GetDataflowApplicationOutputArgs } from "./getDataflowApplication";
export const getDataflowApplication: typeof import("./getDataflowApplication").getDataflowApplication = null as any;
export const getDataflowApplicationOutput: typeof import("./getDataflowApplication").getDataflowApplicationOutput = null as any;
utilities.lazyLoad(exports, ["getDataflowApplication","getDataflowApplicationOutput"], () => require("./getDataflowApplication"));

export { GetDataflowApplicationsArgs, GetDataflowApplicationsResult, GetDataflowApplicationsOutputArgs } from "./getDataflowApplications";
export const getDataflowApplications: typeof import("./getDataflowApplications").getDataflowApplications = null as any;
export const getDataflowApplicationsOutput: typeof import("./getDataflowApplications").getDataflowApplicationsOutput = null as any;
utilities.lazyLoad(exports, ["getDataflowApplications","getDataflowApplicationsOutput"], () => require("./getDataflowApplications"));

export { GetDataflowInvokeRunArgs, GetDataflowInvokeRunResult, GetDataflowInvokeRunOutputArgs } from "./getDataflowInvokeRun";
export const getDataflowInvokeRun: typeof import("./getDataflowInvokeRun").getDataflowInvokeRun = null as any;
export const getDataflowInvokeRunOutput: typeof import("./getDataflowInvokeRun").getDataflowInvokeRunOutput = null as any;
utilities.lazyLoad(exports, ["getDataflowInvokeRun","getDataflowInvokeRunOutput"], () => require("./getDataflowInvokeRun"));

export { GetDataflowInvokeRunsArgs, GetDataflowInvokeRunsResult, GetDataflowInvokeRunsOutputArgs } from "./getDataflowInvokeRuns";
export const getDataflowInvokeRuns: typeof import("./getDataflowInvokeRuns").getDataflowInvokeRuns = null as any;
export const getDataflowInvokeRunsOutput: typeof import("./getDataflowInvokeRuns").getDataflowInvokeRunsOutput = null as any;
utilities.lazyLoad(exports, ["getDataflowInvokeRuns","getDataflowInvokeRunsOutput"], () => require("./getDataflowInvokeRuns"));

export { GetDataflowPoolArgs, GetDataflowPoolResult, GetDataflowPoolOutputArgs } from "./getDataflowPool";
export const getDataflowPool: typeof import("./getDataflowPool").getDataflowPool = null as any;
export const getDataflowPoolOutput: typeof import("./getDataflowPool").getDataflowPoolOutput = null as any;
utilities.lazyLoad(exports, ["getDataflowPool","getDataflowPoolOutput"], () => require("./getDataflowPool"));

export { GetDataflowPoolsArgs, GetDataflowPoolsResult, GetDataflowPoolsOutputArgs } from "./getDataflowPools";
export const getDataflowPools: typeof import("./getDataflowPools").getDataflowPools = null as any;
export const getDataflowPoolsOutput: typeof import("./getDataflowPools").getDataflowPoolsOutput = null as any;
utilities.lazyLoad(exports, ["getDataflowPools","getDataflowPoolsOutput"], () => require("./getDataflowPools"));

export { GetDataflowPrivateEndpointArgs, GetDataflowPrivateEndpointResult, GetDataflowPrivateEndpointOutputArgs } from "./getDataflowPrivateEndpoint";
export const getDataflowPrivateEndpoint: typeof import("./getDataflowPrivateEndpoint").getDataflowPrivateEndpoint = null as any;
export const getDataflowPrivateEndpointOutput: typeof import("./getDataflowPrivateEndpoint").getDataflowPrivateEndpointOutput = null as any;
utilities.lazyLoad(exports, ["getDataflowPrivateEndpoint","getDataflowPrivateEndpointOutput"], () => require("./getDataflowPrivateEndpoint"));

export { GetDataflowPrivateEndpointsArgs, GetDataflowPrivateEndpointsResult, GetDataflowPrivateEndpointsOutputArgs } from "./getDataflowPrivateEndpoints";
export const getDataflowPrivateEndpoints: typeof import("./getDataflowPrivateEndpoints").getDataflowPrivateEndpoints = null as any;
export const getDataflowPrivateEndpointsOutput: typeof import("./getDataflowPrivateEndpoints").getDataflowPrivateEndpointsOutput = null as any;
utilities.lazyLoad(exports, ["getDataflowPrivateEndpoints","getDataflowPrivateEndpointsOutput"], () => require("./getDataflowPrivateEndpoints"));

export { GetDataflowRunLogArgs, GetDataflowRunLogResult, GetDataflowRunLogOutputArgs } from "./getDataflowRunLog";
export const getDataflowRunLog: typeof import("./getDataflowRunLog").getDataflowRunLog = null as any;
export const getDataflowRunLogOutput: typeof import("./getDataflowRunLog").getDataflowRunLogOutput = null as any;
utilities.lazyLoad(exports, ["getDataflowRunLog","getDataflowRunLogOutput"], () => require("./getDataflowRunLog"));

export { GetDataflowRunLogsArgs, GetDataflowRunLogsResult, GetDataflowRunLogsOutputArgs } from "./getDataflowRunLogs";
export const getDataflowRunLogs: typeof import("./getDataflowRunLogs").getDataflowRunLogs = null as any;
export const getDataflowRunLogsOutput: typeof import("./getDataflowRunLogs").getDataflowRunLogsOutput = null as any;
utilities.lazyLoad(exports, ["getDataflowRunLogs","getDataflowRunLogsOutput"], () => require("./getDataflowRunLogs"));

export { GetDataflowRunStatementArgs, GetDataflowRunStatementResult, GetDataflowRunStatementOutputArgs } from "./getDataflowRunStatement";
export const getDataflowRunStatement: typeof import("./getDataflowRunStatement").getDataflowRunStatement = null as any;
export const getDataflowRunStatementOutput: typeof import("./getDataflowRunStatement").getDataflowRunStatementOutput = null as any;
utilities.lazyLoad(exports, ["getDataflowRunStatement","getDataflowRunStatementOutput"], () => require("./getDataflowRunStatement"));

export { GetDataflowRunStatementsArgs, GetDataflowRunStatementsResult, GetDataflowRunStatementsOutputArgs } from "./getDataflowRunStatements";
export const getDataflowRunStatements: typeof import("./getDataflowRunStatements").getDataflowRunStatements = null as any;
export const getDataflowRunStatementsOutput: typeof import("./getDataflowRunStatements").getDataflowRunStatementsOutput = null as any;
utilities.lazyLoad(exports, ["getDataflowRunStatements","getDataflowRunStatementsOutput"], () => require("./getDataflowRunStatements"));

export { GetDataflowSqlEndpointArgs, GetDataflowSqlEndpointResult, GetDataflowSqlEndpointOutputArgs } from "./getDataflowSqlEndpoint";
export const getDataflowSqlEndpoint: typeof import("./getDataflowSqlEndpoint").getDataflowSqlEndpoint = null as any;
export const getDataflowSqlEndpointOutput: typeof import("./getDataflowSqlEndpoint").getDataflowSqlEndpointOutput = null as any;
utilities.lazyLoad(exports, ["getDataflowSqlEndpoint","getDataflowSqlEndpointOutput"], () => require("./getDataflowSqlEndpoint"));

export { GetDataflowSqlEndpointsArgs, GetDataflowSqlEndpointsResult, GetDataflowSqlEndpointsOutputArgs } from "./getDataflowSqlEndpoints";
export const getDataflowSqlEndpoints: typeof import("./getDataflowSqlEndpoints").getDataflowSqlEndpoints = null as any;
export const getDataflowSqlEndpointsOutput: typeof import("./getDataflowSqlEndpoints").getDataflowSqlEndpointsOutput = null as any;
utilities.lazyLoad(exports, ["getDataflowSqlEndpoints","getDataflowSqlEndpointsOutput"], () => require("./getDataflowSqlEndpoints"));

export { GetDataintegrationWorkspaceArgs, GetDataintegrationWorkspaceResult, GetDataintegrationWorkspaceOutputArgs } from "./getDataintegrationWorkspace";
export const getDataintegrationWorkspace: typeof import("./getDataintegrationWorkspace").getDataintegrationWorkspace = null as any;
export const getDataintegrationWorkspaceOutput: typeof import("./getDataintegrationWorkspace").getDataintegrationWorkspaceOutput = null as any;
utilities.lazyLoad(exports, ["getDataintegrationWorkspace","getDataintegrationWorkspaceOutput"], () => require("./getDataintegrationWorkspace"));

export { GetDataintegrationWorkspaceApplicationArgs, GetDataintegrationWorkspaceApplicationResult, GetDataintegrationWorkspaceApplicationOutputArgs } from "./getDataintegrationWorkspaceApplication";
export const getDataintegrationWorkspaceApplication: typeof import("./getDataintegrationWorkspaceApplication").getDataintegrationWorkspaceApplication = null as any;
export const getDataintegrationWorkspaceApplicationOutput: typeof import("./getDataintegrationWorkspaceApplication").getDataintegrationWorkspaceApplicationOutput = null as any;
utilities.lazyLoad(exports, ["getDataintegrationWorkspaceApplication","getDataintegrationWorkspaceApplicationOutput"], () => require("./getDataintegrationWorkspaceApplication"));

export { GetDataintegrationWorkspaceApplicationPatchArgs, GetDataintegrationWorkspaceApplicationPatchResult, GetDataintegrationWorkspaceApplicationPatchOutputArgs } from "./getDataintegrationWorkspaceApplicationPatch";
export const getDataintegrationWorkspaceApplicationPatch: typeof import("./getDataintegrationWorkspaceApplicationPatch").getDataintegrationWorkspaceApplicationPatch = null as any;
export const getDataintegrationWorkspaceApplicationPatchOutput: typeof import("./getDataintegrationWorkspaceApplicationPatch").getDataintegrationWorkspaceApplicationPatchOutput = null as any;
utilities.lazyLoad(exports, ["getDataintegrationWorkspaceApplicationPatch","getDataintegrationWorkspaceApplicationPatchOutput"], () => require("./getDataintegrationWorkspaceApplicationPatch"));

export { GetDataintegrationWorkspaceApplicationPatchesArgs, GetDataintegrationWorkspaceApplicationPatchesResult, GetDataintegrationWorkspaceApplicationPatchesOutputArgs } from "./getDataintegrationWorkspaceApplicationPatches";
export const getDataintegrationWorkspaceApplicationPatches: typeof import("./getDataintegrationWorkspaceApplicationPatches").getDataintegrationWorkspaceApplicationPatches = null as any;
export const getDataintegrationWorkspaceApplicationPatchesOutput: typeof import("./getDataintegrationWorkspaceApplicationPatches").getDataintegrationWorkspaceApplicationPatchesOutput = null as any;
utilities.lazyLoad(exports, ["getDataintegrationWorkspaceApplicationPatches","getDataintegrationWorkspaceApplicationPatchesOutput"], () => require("./getDataintegrationWorkspaceApplicationPatches"));

export { GetDataintegrationWorkspaceApplicationScheduleArgs, GetDataintegrationWorkspaceApplicationScheduleResult, GetDataintegrationWorkspaceApplicationScheduleOutputArgs } from "./getDataintegrationWorkspaceApplicationSchedule";
export const getDataintegrationWorkspaceApplicationSchedule: typeof import("./getDataintegrationWorkspaceApplicationSchedule").getDataintegrationWorkspaceApplicationSchedule = null as any;
export const getDataintegrationWorkspaceApplicationScheduleOutput: typeof import("./getDataintegrationWorkspaceApplicationSchedule").getDataintegrationWorkspaceApplicationScheduleOutput = null as any;
utilities.lazyLoad(exports, ["getDataintegrationWorkspaceApplicationSchedule","getDataintegrationWorkspaceApplicationScheduleOutput"], () => require("./getDataintegrationWorkspaceApplicationSchedule"));

export { GetDataintegrationWorkspaceApplicationSchedulesArgs, GetDataintegrationWorkspaceApplicationSchedulesResult, GetDataintegrationWorkspaceApplicationSchedulesOutputArgs } from "./getDataintegrationWorkspaceApplicationSchedules";
export const getDataintegrationWorkspaceApplicationSchedules: typeof import("./getDataintegrationWorkspaceApplicationSchedules").getDataintegrationWorkspaceApplicationSchedules = null as any;
export const getDataintegrationWorkspaceApplicationSchedulesOutput: typeof import("./getDataintegrationWorkspaceApplicationSchedules").getDataintegrationWorkspaceApplicationSchedulesOutput = null as any;
utilities.lazyLoad(exports, ["getDataintegrationWorkspaceApplicationSchedules","getDataintegrationWorkspaceApplicationSchedulesOutput"], () => require("./getDataintegrationWorkspaceApplicationSchedules"));

export { GetDataintegrationWorkspaceApplicationTaskScheduleArgs, GetDataintegrationWorkspaceApplicationTaskScheduleResult, GetDataintegrationWorkspaceApplicationTaskScheduleOutputArgs } from "./getDataintegrationWorkspaceApplicationTaskSchedule";
export const getDataintegrationWorkspaceApplicationTaskSchedule: typeof import("./getDataintegrationWorkspaceApplicationTaskSchedule").getDataintegrationWorkspaceApplicationTaskSchedule = null as any;
export const getDataintegrationWorkspaceApplicationTaskScheduleOutput: typeof import("./getDataintegrationWorkspaceApplicationTaskSchedule").getDataintegrationWorkspaceApplicationTaskScheduleOutput = null as any;
utilities.lazyLoad(exports, ["getDataintegrationWorkspaceApplicationTaskSchedule","getDataintegrationWorkspaceApplicationTaskScheduleOutput"], () => require("./getDataintegrationWorkspaceApplicationTaskSchedule"));

export { GetDataintegrationWorkspaceApplicationTaskSchedulesArgs, GetDataintegrationWorkspaceApplicationTaskSchedulesResult, GetDataintegrationWorkspaceApplicationTaskSchedulesOutputArgs } from "./getDataintegrationWorkspaceApplicationTaskSchedules";
export const getDataintegrationWorkspaceApplicationTaskSchedules: typeof import("./getDataintegrationWorkspaceApplicationTaskSchedules").getDataintegrationWorkspaceApplicationTaskSchedules = null as any;
export const getDataintegrationWorkspaceApplicationTaskSchedulesOutput: typeof import("./getDataintegrationWorkspaceApplicationTaskSchedules").getDataintegrationWorkspaceApplicationTaskSchedulesOutput = null as any;
utilities.lazyLoad(exports, ["getDataintegrationWorkspaceApplicationTaskSchedules","getDataintegrationWorkspaceApplicationTaskSchedulesOutput"], () => require("./getDataintegrationWorkspaceApplicationTaskSchedules"));

export { GetDataintegrationWorkspaceApplicationsArgs, GetDataintegrationWorkspaceApplicationsResult, GetDataintegrationWorkspaceApplicationsOutputArgs } from "./getDataintegrationWorkspaceApplications";
export const getDataintegrationWorkspaceApplications: typeof import("./getDataintegrationWorkspaceApplications").getDataintegrationWorkspaceApplications = null as any;
export const getDataintegrationWorkspaceApplicationsOutput: typeof import("./getDataintegrationWorkspaceApplications").getDataintegrationWorkspaceApplicationsOutput = null as any;
utilities.lazyLoad(exports, ["getDataintegrationWorkspaceApplications","getDataintegrationWorkspaceApplicationsOutput"], () => require("./getDataintegrationWorkspaceApplications"));

export { GetDataintegrationWorkspaceExportRequestArgs, GetDataintegrationWorkspaceExportRequestResult, GetDataintegrationWorkspaceExportRequestOutputArgs } from "./getDataintegrationWorkspaceExportRequest";
export const getDataintegrationWorkspaceExportRequest: typeof import("./getDataintegrationWorkspaceExportRequest").getDataintegrationWorkspaceExportRequest = null as any;
export const getDataintegrationWorkspaceExportRequestOutput: typeof import("./getDataintegrationWorkspaceExportRequest").getDataintegrationWorkspaceExportRequestOutput = null as any;
utilities.lazyLoad(exports, ["getDataintegrationWorkspaceExportRequest","getDataintegrationWorkspaceExportRequestOutput"], () => require("./getDataintegrationWorkspaceExportRequest"));

export { GetDataintegrationWorkspaceExportRequestsArgs, GetDataintegrationWorkspaceExportRequestsResult, GetDataintegrationWorkspaceExportRequestsOutputArgs } from "./getDataintegrationWorkspaceExportRequests";
export const getDataintegrationWorkspaceExportRequests: typeof import("./getDataintegrationWorkspaceExportRequests").getDataintegrationWorkspaceExportRequests = null as any;
export const getDataintegrationWorkspaceExportRequestsOutput: typeof import("./getDataintegrationWorkspaceExportRequests").getDataintegrationWorkspaceExportRequestsOutput = null as any;
utilities.lazyLoad(exports, ["getDataintegrationWorkspaceExportRequests","getDataintegrationWorkspaceExportRequestsOutput"], () => require("./getDataintegrationWorkspaceExportRequests"));

export { GetDataintegrationWorkspaceFolderArgs, GetDataintegrationWorkspaceFolderResult, GetDataintegrationWorkspaceFolderOutputArgs } from "./getDataintegrationWorkspaceFolder";
export const getDataintegrationWorkspaceFolder: typeof import("./getDataintegrationWorkspaceFolder").getDataintegrationWorkspaceFolder = null as any;
export const getDataintegrationWorkspaceFolderOutput: typeof import("./getDataintegrationWorkspaceFolder").getDataintegrationWorkspaceFolderOutput = null as any;
utilities.lazyLoad(exports, ["getDataintegrationWorkspaceFolder","getDataintegrationWorkspaceFolderOutput"], () => require("./getDataintegrationWorkspaceFolder"));

export { GetDataintegrationWorkspaceFoldersArgs, GetDataintegrationWorkspaceFoldersResult, GetDataintegrationWorkspaceFoldersOutputArgs } from "./getDataintegrationWorkspaceFolders";
export const getDataintegrationWorkspaceFolders: typeof import("./getDataintegrationWorkspaceFolders").getDataintegrationWorkspaceFolders = null as any;
export const getDataintegrationWorkspaceFoldersOutput: typeof import("./getDataintegrationWorkspaceFolders").getDataintegrationWorkspaceFoldersOutput = null as any;
utilities.lazyLoad(exports, ["getDataintegrationWorkspaceFolders","getDataintegrationWorkspaceFoldersOutput"], () => require("./getDataintegrationWorkspaceFolders"));

export { GetDataintegrationWorkspaceImportRequestArgs, GetDataintegrationWorkspaceImportRequestResult, GetDataintegrationWorkspaceImportRequestOutputArgs } from "./getDataintegrationWorkspaceImportRequest";
export const getDataintegrationWorkspaceImportRequest: typeof import("./getDataintegrationWorkspaceImportRequest").getDataintegrationWorkspaceImportRequest = null as any;
export const getDataintegrationWorkspaceImportRequestOutput: typeof import("./getDataintegrationWorkspaceImportRequest").getDataintegrationWorkspaceImportRequestOutput = null as any;
utilities.lazyLoad(exports, ["getDataintegrationWorkspaceImportRequest","getDataintegrationWorkspaceImportRequestOutput"], () => require("./getDataintegrationWorkspaceImportRequest"));

export { GetDataintegrationWorkspaceImportRequestsArgs, GetDataintegrationWorkspaceImportRequestsResult, GetDataintegrationWorkspaceImportRequestsOutputArgs } from "./getDataintegrationWorkspaceImportRequests";
export const getDataintegrationWorkspaceImportRequests: typeof import("./getDataintegrationWorkspaceImportRequests").getDataintegrationWorkspaceImportRequests = null as any;
export const getDataintegrationWorkspaceImportRequestsOutput: typeof import("./getDataintegrationWorkspaceImportRequests").getDataintegrationWorkspaceImportRequestsOutput = null as any;
utilities.lazyLoad(exports, ["getDataintegrationWorkspaceImportRequests","getDataintegrationWorkspaceImportRequestsOutput"], () => require("./getDataintegrationWorkspaceImportRequests"));

export { GetDataintegrationWorkspaceProjectArgs, GetDataintegrationWorkspaceProjectResult, GetDataintegrationWorkspaceProjectOutputArgs } from "./getDataintegrationWorkspaceProject";
export const getDataintegrationWorkspaceProject: typeof import("./getDataintegrationWorkspaceProject").getDataintegrationWorkspaceProject = null as any;
export const getDataintegrationWorkspaceProjectOutput: typeof import("./getDataintegrationWorkspaceProject").getDataintegrationWorkspaceProjectOutput = null as any;
utilities.lazyLoad(exports, ["getDataintegrationWorkspaceProject","getDataintegrationWorkspaceProjectOutput"], () => require("./getDataintegrationWorkspaceProject"));

export { GetDataintegrationWorkspaceProjectsArgs, GetDataintegrationWorkspaceProjectsResult, GetDataintegrationWorkspaceProjectsOutputArgs } from "./getDataintegrationWorkspaceProjects";
export const getDataintegrationWorkspaceProjects: typeof import("./getDataintegrationWorkspaceProjects").getDataintegrationWorkspaceProjects = null as any;
export const getDataintegrationWorkspaceProjectsOutput: typeof import("./getDataintegrationWorkspaceProjects").getDataintegrationWorkspaceProjectsOutput = null as any;
utilities.lazyLoad(exports, ["getDataintegrationWorkspaceProjects","getDataintegrationWorkspaceProjectsOutput"], () => require("./getDataintegrationWorkspaceProjects"));

export { GetDataintegrationWorkspaceTaskArgs, GetDataintegrationWorkspaceTaskResult, GetDataintegrationWorkspaceTaskOutputArgs } from "./getDataintegrationWorkspaceTask";
export const getDataintegrationWorkspaceTask: typeof import("./getDataintegrationWorkspaceTask").getDataintegrationWorkspaceTask = null as any;
export const getDataintegrationWorkspaceTaskOutput: typeof import("./getDataintegrationWorkspaceTask").getDataintegrationWorkspaceTaskOutput = null as any;
utilities.lazyLoad(exports, ["getDataintegrationWorkspaceTask","getDataintegrationWorkspaceTaskOutput"], () => require("./getDataintegrationWorkspaceTask"));

export { GetDataintegrationWorkspaceTasksArgs, GetDataintegrationWorkspaceTasksResult, GetDataintegrationWorkspaceTasksOutputArgs } from "./getDataintegrationWorkspaceTasks";
export const getDataintegrationWorkspaceTasks: typeof import("./getDataintegrationWorkspaceTasks").getDataintegrationWorkspaceTasks = null as any;
export const getDataintegrationWorkspaceTasksOutput: typeof import("./getDataintegrationWorkspaceTasks").getDataintegrationWorkspaceTasksOutput = null as any;
utilities.lazyLoad(exports, ["getDataintegrationWorkspaceTasks","getDataintegrationWorkspaceTasksOutput"], () => require("./getDataintegrationWorkspaceTasks"));

export { GetDataintegrationWorkspacesArgs, GetDataintegrationWorkspacesResult, GetDataintegrationWorkspacesOutputArgs } from "./getDataintegrationWorkspaces";
export const getDataintegrationWorkspaces: typeof import("./getDataintegrationWorkspaces").getDataintegrationWorkspaces = null as any;
export const getDataintegrationWorkspacesOutput: typeof import("./getDataintegrationWorkspaces").getDataintegrationWorkspacesOutput = null as any;
utilities.lazyLoad(exports, ["getDataintegrationWorkspaces","getDataintegrationWorkspacesOutput"], () => require("./getDataintegrationWorkspaces"));

export { GetDatascienceFastLaunchJobConfigsArgs, GetDatascienceFastLaunchJobConfigsResult, GetDatascienceFastLaunchJobConfigsOutputArgs } from "./getDatascienceFastLaunchJobConfigs";
export const getDatascienceFastLaunchJobConfigs: typeof import("./getDatascienceFastLaunchJobConfigs").getDatascienceFastLaunchJobConfigs = null as any;
export const getDatascienceFastLaunchJobConfigsOutput: typeof import("./getDatascienceFastLaunchJobConfigs").getDatascienceFastLaunchJobConfigsOutput = null as any;
utilities.lazyLoad(exports, ["getDatascienceFastLaunchJobConfigs","getDatascienceFastLaunchJobConfigsOutput"], () => require("./getDatascienceFastLaunchJobConfigs"));

export { GetDatascienceJobArgs, GetDatascienceJobResult, GetDatascienceJobOutputArgs } from "./getDatascienceJob";
export const getDatascienceJob: typeof import("./getDatascienceJob").getDatascienceJob = null as any;
export const getDatascienceJobOutput: typeof import("./getDatascienceJob").getDatascienceJobOutput = null as any;
utilities.lazyLoad(exports, ["getDatascienceJob","getDatascienceJobOutput"], () => require("./getDatascienceJob"));

export { GetDatascienceJobRunArgs, GetDatascienceJobRunResult, GetDatascienceJobRunOutputArgs } from "./getDatascienceJobRun";
export const getDatascienceJobRun: typeof import("./getDatascienceJobRun").getDatascienceJobRun = null as any;
export const getDatascienceJobRunOutput: typeof import("./getDatascienceJobRun").getDatascienceJobRunOutput = null as any;
utilities.lazyLoad(exports, ["getDatascienceJobRun","getDatascienceJobRunOutput"], () => require("./getDatascienceJobRun"));

export { GetDatascienceJobRunsArgs, GetDatascienceJobRunsResult, GetDatascienceJobRunsOutputArgs } from "./getDatascienceJobRuns";
export const getDatascienceJobRuns: typeof import("./getDatascienceJobRuns").getDatascienceJobRuns = null as any;
export const getDatascienceJobRunsOutput: typeof import("./getDatascienceJobRuns").getDatascienceJobRunsOutput = null as any;
utilities.lazyLoad(exports, ["getDatascienceJobRuns","getDatascienceJobRunsOutput"], () => require("./getDatascienceJobRuns"));

export { GetDatascienceJobShapesArgs, GetDatascienceJobShapesResult, GetDatascienceJobShapesOutputArgs } from "./getDatascienceJobShapes";
export const getDatascienceJobShapes: typeof import("./getDatascienceJobShapes").getDatascienceJobShapes = null as any;
export const getDatascienceJobShapesOutput: typeof import("./getDatascienceJobShapes").getDatascienceJobShapesOutput = null as any;
utilities.lazyLoad(exports, ["getDatascienceJobShapes","getDatascienceJobShapesOutput"], () => require("./getDatascienceJobShapes"));

export { GetDatascienceJobsArgs, GetDatascienceJobsResult, GetDatascienceJobsOutputArgs } from "./getDatascienceJobs";
export const getDatascienceJobs: typeof import("./getDatascienceJobs").getDatascienceJobs = null as any;
export const getDatascienceJobsOutput: typeof import("./getDatascienceJobs").getDatascienceJobsOutput = null as any;
utilities.lazyLoad(exports, ["getDatascienceJobs","getDatascienceJobsOutput"], () => require("./getDatascienceJobs"));

export { GetDatascienceModelArgs, GetDatascienceModelResult, GetDatascienceModelOutputArgs } from "./getDatascienceModel";
export const getDatascienceModel: typeof import("./getDatascienceModel").getDatascienceModel = null as any;
export const getDatascienceModelOutput: typeof import("./getDatascienceModel").getDatascienceModelOutput = null as any;
utilities.lazyLoad(exports, ["getDatascienceModel","getDatascienceModelOutput"], () => require("./getDatascienceModel"));

export { GetDatascienceModelDeploymentArgs, GetDatascienceModelDeploymentResult, GetDatascienceModelDeploymentOutputArgs } from "./getDatascienceModelDeployment";
export const getDatascienceModelDeployment: typeof import("./getDatascienceModelDeployment").getDatascienceModelDeployment = null as any;
export const getDatascienceModelDeploymentOutput: typeof import("./getDatascienceModelDeployment").getDatascienceModelDeploymentOutput = null as any;
utilities.lazyLoad(exports, ["getDatascienceModelDeployment","getDatascienceModelDeploymentOutput"], () => require("./getDatascienceModelDeployment"));

export { GetDatascienceModelDeploymentShapesArgs, GetDatascienceModelDeploymentShapesResult, GetDatascienceModelDeploymentShapesOutputArgs } from "./getDatascienceModelDeploymentShapes";
export const getDatascienceModelDeploymentShapes: typeof import("./getDatascienceModelDeploymentShapes").getDatascienceModelDeploymentShapes = null as any;
export const getDatascienceModelDeploymentShapesOutput: typeof import("./getDatascienceModelDeploymentShapes").getDatascienceModelDeploymentShapesOutput = null as any;
utilities.lazyLoad(exports, ["getDatascienceModelDeploymentShapes","getDatascienceModelDeploymentShapesOutput"], () => require("./getDatascienceModelDeploymentShapes"));

export { GetDatascienceModelDeploymentsArgs, GetDatascienceModelDeploymentsResult, GetDatascienceModelDeploymentsOutputArgs } from "./getDatascienceModelDeployments";
export const getDatascienceModelDeployments: typeof import("./getDatascienceModelDeployments").getDatascienceModelDeployments = null as any;
export const getDatascienceModelDeploymentsOutput: typeof import("./getDatascienceModelDeployments").getDatascienceModelDeploymentsOutput = null as any;
utilities.lazyLoad(exports, ["getDatascienceModelDeployments","getDatascienceModelDeploymentsOutput"], () => require("./getDatascienceModelDeployments"));

export { GetDatascienceModelProvenanceArgs, GetDatascienceModelProvenanceResult, GetDatascienceModelProvenanceOutputArgs } from "./getDatascienceModelProvenance";
export const getDatascienceModelProvenance: typeof import("./getDatascienceModelProvenance").getDatascienceModelProvenance = null as any;
export const getDatascienceModelProvenanceOutput: typeof import("./getDatascienceModelProvenance").getDatascienceModelProvenanceOutput = null as any;
utilities.lazyLoad(exports, ["getDatascienceModelProvenance","getDatascienceModelProvenanceOutput"], () => require("./getDatascienceModelProvenance"));

export { GetDatascienceModelVersionSetArgs, GetDatascienceModelVersionSetResult, GetDatascienceModelVersionSetOutputArgs } from "./getDatascienceModelVersionSet";
export const getDatascienceModelVersionSet: typeof import("./getDatascienceModelVersionSet").getDatascienceModelVersionSet = null as any;
export const getDatascienceModelVersionSetOutput: typeof import("./getDatascienceModelVersionSet").getDatascienceModelVersionSetOutput = null as any;
utilities.lazyLoad(exports, ["getDatascienceModelVersionSet","getDatascienceModelVersionSetOutput"], () => require("./getDatascienceModelVersionSet"));

export { GetDatascienceModelVersionSetsArgs, GetDatascienceModelVersionSetsResult, GetDatascienceModelVersionSetsOutputArgs } from "./getDatascienceModelVersionSets";
export const getDatascienceModelVersionSets: typeof import("./getDatascienceModelVersionSets").getDatascienceModelVersionSets = null as any;
export const getDatascienceModelVersionSetsOutput: typeof import("./getDatascienceModelVersionSets").getDatascienceModelVersionSetsOutput = null as any;
utilities.lazyLoad(exports, ["getDatascienceModelVersionSets","getDatascienceModelVersionSetsOutput"], () => require("./getDatascienceModelVersionSets"));

export { GetDatascienceModelsArgs, GetDatascienceModelsResult, GetDatascienceModelsOutputArgs } from "./getDatascienceModels";
export const getDatascienceModels: typeof import("./getDatascienceModels").getDatascienceModels = null as any;
export const getDatascienceModelsOutput: typeof import("./getDatascienceModels").getDatascienceModelsOutput = null as any;
utilities.lazyLoad(exports, ["getDatascienceModels","getDatascienceModelsOutput"], () => require("./getDatascienceModels"));

export { GetDatascienceNotebookSessionArgs, GetDatascienceNotebookSessionResult, GetDatascienceNotebookSessionOutputArgs } from "./getDatascienceNotebookSession";
export const getDatascienceNotebookSession: typeof import("./getDatascienceNotebookSession").getDatascienceNotebookSession = null as any;
export const getDatascienceNotebookSessionOutput: typeof import("./getDatascienceNotebookSession").getDatascienceNotebookSessionOutput = null as any;
utilities.lazyLoad(exports, ["getDatascienceNotebookSession","getDatascienceNotebookSessionOutput"], () => require("./getDatascienceNotebookSession"));

export { GetDatascienceNotebookSessionShapesArgs, GetDatascienceNotebookSessionShapesResult, GetDatascienceNotebookSessionShapesOutputArgs } from "./getDatascienceNotebookSessionShapes";
export const getDatascienceNotebookSessionShapes: typeof import("./getDatascienceNotebookSessionShapes").getDatascienceNotebookSessionShapes = null as any;
export const getDatascienceNotebookSessionShapesOutput: typeof import("./getDatascienceNotebookSessionShapes").getDatascienceNotebookSessionShapesOutput = null as any;
utilities.lazyLoad(exports, ["getDatascienceNotebookSessionShapes","getDatascienceNotebookSessionShapesOutput"], () => require("./getDatascienceNotebookSessionShapes"));

export { GetDatascienceNotebookSessionsArgs, GetDatascienceNotebookSessionsResult, GetDatascienceNotebookSessionsOutputArgs } from "./getDatascienceNotebookSessions";
export const getDatascienceNotebookSessions: typeof import("./getDatascienceNotebookSessions").getDatascienceNotebookSessions = null as any;
export const getDatascienceNotebookSessionsOutput: typeof import("./getDatascienceNotebookSessions").getDatascienceNotebookSessionsOutput = null as any;
utilities.lazyLoad(exports, ["getDatascienceNotebookSessions","getDatascienceNotebookSessionsOutput"], () => require("./getDatascienceNotebookSessions"));

export { GetDatasciencePipelineArgs, GetDatasciencePipelineResult, GetDatasciencePipelineOutputArgs } from "./getDatasciencePipeline";
export const getDatasciencePipeline: typeof import("./getDatasciencePipeline").getDatasciencePipeline = null as any;
export const getDatasciencePipelineOutput: typeof import("./getDatasciencePipeline").getDatasciencePipelineOutput = null as any;
utilities.lazyLoad(exports, ["getDatasciencePipeline","getDatasciencePipelineOutput"], () => require("./getDatasciencePipeline"));

export { GetDatasciencePipelineRunArgs, GetDatasciencePipelineRunResult, GetDatasciencePipelineRunOutputArgs } from "./getDatasciencePipelineRun";
export const getDatasciencePipelineRun: typeof import("./getDatasciencePipelineRun").getDatasciencePipelineRun = null as any;
export const getDatasciencePipelineRunOutput: typeof import("./getDatasciencePipelineRun").getDatasciencePipelineRunOutput = null as any;
utilities.lazyLoad(exports, ["getDatasciencePipelineRun","getDatasciencePipelineRunOutput"], () => require("./getDatasciencePipelineRun"));

export { GetDatasciencePipelineRunsArgs, GetDatasciencePipelineRunsResult, GetDatasciencePipelineRunsOutputArgs } from "./getDatasciencePipelineRuns";
export const getDatasciencePipelineRuns: typeof import("./getDatasciencePipelineRuns").getDatasciencePipelineRuns = null as any;
export const getDatasciencePipelineRunsOutput: typeof import("./getDatasciencePipelineRuns").getDatasciencePipelineRunsOutput = null as any;
utilities.lazyLoad(exports, ["getDatasciencePipelineRuns","getDatasciencePipelineRunsOutput"], () => require("./getDatasciencePipelineRuns"));

export { GetDatasciencePipelinesArgs, GetDatasciencePipelinesResult, GetDatasciencePipelinesOutputArgs } from "./getDatasciencePipelines";
export const getDatasciencePipelines: typeof import("./getDatasciencePipelines").getDatasciencePipelines = null as any;
export const getDatasciencePipelinesOutput: typeof import("./getDatasciencePipelines").getDatasciencePipelinesOutput = null as any;
utilities.lazyLoad(exports, ["getDatasciencePipelines","getDatasciencePipelinesOutput"], () => require("./getDatasciencePipelines"));

export { GetDatasciencePrivateEndpointArgs, GetDatasciencePrivateEndpointResult, GetDatasciencePrivateEndpointOutputArgs } from "./getDatasciencePrivateEndpoint";
export const getDatasciencePrivateEndpoint: typeof import("./getDatasciencePrivateEndpoint").getDatasciencePrivateEndpoint = null as any;
export const getDatasciencePrivateEndpointOutput: typeof import("./getDatasciencePrivateEndpoint").getDatasciencePrivateEndpointOutput = null as any;
utilities.lazyLoad(exports, ["getDatasciencePrivateEndpoint","getDatasciencePrivateEndpointOutput"], () => require("./getDatasciencePrivateEndpoint"));

export { GetDatasciencePrivateEndpointsArgs, GetDatasciencePrivateEndpointsResult, GetDatasciencePrivateEndpointsOutputArgs } from "./getDatasciencePrivateEndpoints";
export const getDatasciencePrivateEndpoints: typeof import("./getDatasciencePrivateEndpoints").getDatasciencePrivateEndpoints = null as any;
export const getDatasciencePrivateEndpointsOutput: typeof import("./getDatasciencePrivateEndpoints").getDatasciencePrivateEndpointsOutput = null as any;
utilities.lazyLoad(exports, ["getDatasciencePrivateEndpoints","getDatasciencePrivateEndpointsOutput"], () => require("./getDatasciencePrivateEndpoints"));

export { GetDatascienceProjectArgs, GetDatascienceProjectResult, GetDatascienceProjectOutputArgs } from "./getDatascienceProject";
export const getDatascienceProject: typeof import("./getDatascienceProject").getDatascienceProject = null as any;
export const getDatascienceProjectOutput: typeof import("./getDatascienceProject").getDatascienceProjectOutput = null as any;
utilities.lazyLoad(exports, ["getDatascienceProject","getDatascienceProjectOutput"], () => require("./getDatascienceProject"));

export { GetDatascienceProjectsArgs, GetDatascienceProjectsResult, GetDatascienceProjectsOutputArgs } from "./getDatascienceProjects";
export const getDatascienceProjects: typeof import("./getDatascienceProjects").getDatascienceProjects = null as any;
export const getDatascienceProjectsOutput: typeof import("./getDatascienceProjects").getDatascienceProjectsOutput = null as any;
utilities.lazyLoad(exports, ["getDatascienceProjects","getDatascienceProjectsOutput"], () => require("./getDatascienceProjects"));

export { GetDelegateAccessControlDelegatedResourceAccessRequestArgs, GetDelegateAccessControlDelegatedResourceAccessRequestResult, GetDelegateAccessControlDelegatedResourceAccessRequestOutputArgs } from "./getDelegateAccessControlDelegatedResourceAccessRequest";
export const getDelegateAccessControlDelegatedResourceAccessRequest: typeof import("./getDelegateAccessControlDelegatedResourceAccessRequest").getDelegateAccessControlDelegatedResourceAccessRequest = null as any;
export const getDelegateAccessControlDelegatedResourceAccessRequestOutput: typeof import("./getDelegateAccessControlDelegatedResourceAccessRequest").getDelegateAccessControlDelegatedResourceAccessRequestOutput = null as any;
utilities.lazyLoad(exports, ["getDelegateAccessControlDelegatedResourceAccessRequest","getDelegateAccessControlDelegatedResourceAccessRequestOutput"], () => require("./getDelegateAccessControlDelegatedResourceAccessRequest"));

export { GetDelegateAccessControlDelegatedResourceAccessRequestAuditLogReportArgs, GetDelegateAccessControlDelegatedResourceAccessRequestAuditLogReportResult, GetDelegateAccessControlDelegatedResourceAccessRequestAuditLogReportOutputArgs } from "./getDelegateAccessControlDelegatedResourceAccessRequestAuditLogReport";
export const getDelegateAccessControlDelegatedResourceAccessRequestAuditLogReport: typeof import("./getDelegateAccessControlDelegatedResourceAccessRequestAuditLogReport").getDelegateAccessControlDelegatedResourceAccessRequestAuditLogReport = null as any;
export const getDelegateAccessControlDelegatedResourceAccessRequestAuditLogReportOutput: typeof import("./getDelegateAccessControlDelegatedResourceAccessRequestAuditLogReport").getDelegateAccessControlDelegatedResourceAccessRequestAuditLogReportOutput = null as any;
utilities.lazyLoad(exports, ["getDelegateAccessControlDelegatedResourceAccessRequestAuditLogReport","getDelegateAccessControlDelegatedResourceAccessRequestAuditLogReportOutput"], () => require("./getDelegateAccessControlDelegatedResourceAccessRequestAuditLogReport"));

export { GetDelegateAccessControlDelegatedResourceAccessRequestHistoriesArgs, GetDelegateAccessControlDelegatedResourceAccessRequestHistoriesResult, GetDelegateAccessControlDelegatedResourceAccessRequestHistoriesOutputArgs } from "./getDelegateAccessControlDelegatedResourceAccessRequestHistories";
export const getDelegateAccessControlDelegatedResourceAccessRequestHistories: typeof import("./getDelegateAccessControlDelegatedResourceAccessRequestHistories").getDelegateAccessControlDelegatedResourceAccessRequestHistories = null as any;
export const getDelegateAccessControlDelegatedResourceAccessRequestHistoriesOutput: typeof import("./getDelegateAccessControlDelegatedResourceAccessRequestHistories").getDelegateAccessControlDelegatedResourceAccessRequestHistoriesOutput = null as any;
utilities.lazyLoad(exports, ["getDelegateAccessControlDelegatedResourceAccessRequestHistories","getDelegateAccessControlDelegatedResourceAccessRequestHistoriesOutput"], () => require("./getDelegateAccessControlDelegatedResourceAccessRequestHistories"));

export { GetDelegateAccessControlDelegatedResourceAccessRequestsArgs, GetDelegateAccessControlDelegatedResourceAccessRequestsResult, GetDelegateAccessControlDelegatedResourceAccessRequestsOutputArgs } from "./getDelegateAccessControlDelegatedResourceAccessRequests";
export const getDelegateAccessControlDelegatedResourceAccessRequests: typeof import("./getDelegateAccessControlDelegatedResourceAccessRequests").getDelegateAccessControlDelegatedResourceAccessRequests = null as any;
export const getDelegateAccessControlDelegatedResourceAccessRequestsOutput: typeof import("./getDelegateAccessControlDelegatedResourceAccessRequests").getDelegateAccessControlDelegatedResourceAccessRequestsOutput = null as any;
utilities.lazyLoad(exports, ["getDelegateAccessControlDelegatedResourceAccessRequests","getDelegateAccessControlDelegatedResourceAccessRequestsOutput"], () => require("./getDelegateAccessControlDelegatedResourceAccessRequests"));

export { GetDelegateAccessControlDelegationControlArgs, GetDelegateAccessControlDelegationControlResult, GetDelegateAccessControlDelegationControlOutputArgs } from "./getDelegateAccessControlDelegationControl";
export const getDelegateAccessControlDelegationControl: typeof import("./getDelegateAccessControlDelegationControl").getDelegateAccessControlDelegationControl = null as any;
export const getDelegateAccessControlDelegationControlOutput: typeof import("./getDelegateAccessControlDelegationControl").getDelegateAccessControlDelegationControlOutput = null as any;
utilities.lazyLoad(exports, ["getDelegateAccessControlDelegationControl","getDelegateAccessControlDelegationControlOutput"], () => require("./getDelegateAccessControlDelegationControl"));

export { GetDelegateAccessControlDelegationControlResourcesArgs, GetDelegateAccessControlDelegationControlResourcesResult, GetDelegateAccessControlDelegationControlResourcesOutputArgs } from "./getDelegateAccessControlDelegationControlResources";
export const getDelegateAccessControlDelegationControlResources: typeof import("./getDelegateAccessControlDelegationControlResources").getDelegateAccessControlDelegationControlResources = null as any;
export const getDelegateAccessControlDelegationControlResourcesOutput: typeof import("./getDelegateAccessControlDelegationControlResources").getDelegateAccessControlDelegationControlResourcesOutput = null as any;
utilities.lazyLoad(exports, ["getDelegateAccessControlDelegationControlResources","getDelegateAccessControlDelegationControlResourcesOutput"], () => require("./getDelegateAccessControlDelegationControlResources"));

export { GetDelegateAccessControlDelegationControlsArgs, GetDelegateAccessControlDelegationControlsResult, GetDelegateAccessControlDelegationControlsOutputArgs } from "./getDelegateAccessControlDelegationControls";
export const getDelegateAccessControlDelegationControls: typeof import("./getDelegateAccessControlDelegationControls").getDelegateAccessControlDelegationControls = null as any;
export const getDelegateAccessControlDelegationControlsOutput: typeof import("./getDelegateAccessControlDelegationControls").getDelegateAccessControlDelegationControlsOutput = null as any;
utilities.lazyLoad(exports, ["getDelegateAccessControlDelegationControls","getDelegateAccessControlDelegationControlsOutput"], () => require("./getDelegateAccessControlDelegationControls"));

export { GetDelegateAccessControlDelegationSubscriptionArgs, GetDelegateAccessControlDelegationSubscriptionResult, GetDelegateAccessControlDelegationSubscriptionOutputArgs } from "./getDelegateAccessControlDelegationSubscription";
export const getDelegateAccessControlDelegationSubscription: typeof import("./getDelegateAccessControlDelegationSubscription").getDelegateAccessControlDelegationSubscription = null as any;
export const getDelegateAccessControlDelegationSubscriptionOutput: typeof import("./getDelegateAccessControlDelegationSubscription").getDelegateAccessControlDelegationSubscriptionOutput = null as any;
utilities.lazyLoad(exports, ["getDelegateAccessControlDelegationSubscription","getDelegateAccessControlDelegationSubscriptionOutput"], () => require("./getDelegateAccessControlDelegationSubscription"));

export { GetDelegateAccessControlDelegationSubscriptionsArgs, GetDelegateAccessControlDelegationSubscriptionsResult, GetDelegateAccessControlDelegationSubscriptionsOutputArgs } from "./getDelegateAccessControlDelegationSubscriptions";
export const getDelegateAccessControlDelegationSubscriptions: typeof import("./getDelegateAccessControlDelegationSubscriptions").getDelegateAccessControlDelegationSubscriptions = null as any;
export const getDelegateAccessControlDelegationSubscriptionsOutput: typeof import("./getDelegateAccessControlDelegationSubscriptions").getDelegateAccessControlDelegationSubscriptionsOutput = null as any;
utilities.lazyLoad(exports, ["getDelegateAccessControlDelegationSubscriptions","getDelegateAccessControlDelegationSubscriptionsOutput"], () => require("./getDelegateAccessControlDelegationSubscriptions"));

export { GetDelegateAccessControlServiceProviderArgs, GetDelegateAccessControlServiceProviderResult, GetDelegateAccessControlServiceProviderOutputArgs } from "./getDelegateAccessControlServiceProvider";
export const getDelegateAccessControlServiceProvider: typeof import("./getDelegateAccessControlServiceProvider").getDelegateAccessControlServiceProvider = null as any;
export const getDelegateAccessControlServiceProviderOutput: typeof import("./getDelegateAccessControlServiceProvider").getDelegateAccessControlServiceProviderOutput = null as any;
utilities.lazyLoad(exports, ["getDelegateAccessControlServiceProvider","getDelegateAccessControlServiceProviderOutput"], () => require("./getDelegateAccessControlServiceProvider"));

export { GetDelegateAccessControlServiceProviderActionArgs, GetDelegateAccessControlServiceProviderActionResult, GetDelegateAccessControlServiceProviderActionOutputArgs } from "./getDelegateAccessControlServiceProviderAction";
export const getDelegateAccessControlServiceProviderAction: typeof import("./getDelegateAccessControlServiceProviderAction").getDelegateAccessControlServiceProviderAction = null as any;
export const getDelegateAccessControlServiceProviderActionOutput: typeof import("./getDelegateAccessControlServiceProviderAction").getDelegateAccessControlServiceProviderActionOutput = null as any;
utilities.lazyLoad(exports, ["getDelegateAccessControlServiceProviderAction","getDelegateAccessControlServiceProviderActionOutput"], () => require("./getDelegateAccessControlServiceProviderAction"));

export { GetDelegateAccessControlServiceProviderActionsArgs, GetDelegateAccessControlServiceProviderActionsResult, GetDelegateAccessControlServiceProviderActionsOutputArgs } from "./getDelegateAccessControlServiceProviderActions";
export const getDelegateAccessControlServiceProviderActions: typeof import("./getDelegateAccessControlServiceProviderActions").getDelegateAccessControlServiceProviderActions = null as any;
export const getDelegateAccessControlServiceProviderActionsOutput: typeof import("./getDelegateAccessControlServiceProviderActions").getDelegateAccessControlServiceProviderActionsOutput = null as any;
utilities.lazyLoad(exports, ["getDelegateAccessControlServiceProviderActions","getDelegateAccessControlServiceProviderActionsOutput"], () => require("./getDelegateAccessControlServiceProviderActions"));

export { GetDelegateAccessControlServiceProvidersArgs, GetDelegateAccessControlServiceProvidersResult, GetDelegateAccessControlServiceProvidersOutputArgs } from "./getDelegateAccessControlServiceProviders";
export const getDelegateAccessControlServiceProviders: typeof import("./getDelegateAccessControlServiceProviders").getDelegateAccessControlServiceProviders = null as any;
export const getDelegateAccessControlServiceProvidersOutput: typeof import("./getDelegateAccessControlServiceProviders").getDelegateAccessControlServiceProvidersOutput = null as any;
utilities.lazyLoad(exports, ["getDelegateAccessControlServiceProviders","getDelegateAccessControlServiceProvidersOutput"], () => require("./getDelegateAccessControlServiceProviders"));

export { GetDemandSignalOccDemandSignalArgs, GetDemandSignalOccDemandSignalResult, GetDemandSignalOccDemandSignalOutputArgs } from "./getDemandSignalOccDemandSignal";
export const getDemandSignalOccDemandSignal: typeof import("./getDemandSignalOccDemandSignal").getDemandSignalOccDemandSignal = null as any;
export const getDemandSignalOccDemandSignalOutput: typeof import("./getDemandSignalOccDemandSignal").getDemandSignalOccDemandSignalOutput = null as any;
utilities.lazyLoad(exports, ["getDemandSignalOccDemandSignal","getDemandSignalOccDemandSignalOutput"], () => require("./getDemandSignalOccDemandSignal"));

export { GetDemandSignalOccDemandSignalsArgs, GetDemandSignalOccDemandSignalsResult, GetDemandSignalOccDemandSignalsOutputArgs } from "./getDemandSignalOccDemandSignals";
export const getDemandSignalOccDemandSignals: typeof import("./getDemandSignalOccDemandSignals").getDemandSignalOccDemandSignals = null as any;
export const getDemandSignalOccDemandSignalsOutput: typeof import("./getDemandSignalOccDemandSignals").getDemandSignalOccDemandSignalsOutput = null as any;
utilities.lazyLoad(exports, ["getDemandSignalOccDemandSignals","getDemandSignalOccDemandSignalsOutput"], () => require("./getDemandSignalOccDemandSignals"));

export { GetDesktopsDesktopArgs, GetDesktopsDesktopResult, GetDesktopsDesktopOutputArgs } from "./getDesktopsDesktop";
export const getDesktopsDesktop: typeof import("./getDesktopsDesktop").getDesktopsDesktop = null as any;
export const getDesktopsDesktopOutput: typeof import("./getDesktopsDesktop").getDesktopsDesktopOutput = null as any;
utilities.lazyLoad(exports, ["getDesktopsDesktop","getDesktopsDesktopOutput"], () => require("./getDesktopsDesktop"));

export { GetDesktopsDesktopPoolArgs, GetDesktopsDesktopPoolResult, GetDesktopsDesktopPoolOutputArgs } from "./getDesktopsDesktopPool";
export const getDesktopsDesktopPool: typeof import("./getDesktopsDesktopPool").getDesktopsDesktopPool = null as any;
export const getDesktopsDesktopPoolOutput: typeof import("./getDesktopsDesktopPool").getDesktopsDesktopPoolOutput = null as any;
utilities.lazyLoad(exports, ["getDesktopsDesktopPool","getDesktopsDesktopPoolOutput"], () => require("./getDesktopsDesktopPool"));

export { GetDesktopsDesktopPoolDesktopsArgs, GetDesktopsDesktopPoolDesktopsResult, GetDesktopsDesktopPoolDesktopsOutputArgs } from "./getDesktopsDesktopPoolDesktops";
export const getDesktopsDesktopPoolDesktops: typeof import("./getDesktopsDesktopPoolDesktops").getDesktopsDesktopPoolDesktops = null as any;
export const getDesktopsDesktopPoolDesktopsOutput: typeof import("./getDesktopsDesktopPoolDesktops").getDesktopsDesktopPoolDesktopsOutput = null as any;
utilities.lazyLoad(exports, ["getDesktopsDesktopPoolDesktops","getDesktopsDesktopPoolDesktopsOutput"], () => require("./getDesktopsDesktopPoolDesktops"));

export { GetDesktopsDesktopPoolVolumesArgs, GetDesktopsDesktopPoolVolumesResult, GetDesktopsDesktopPoolVolumesOutputArgs } from "./getDesktopsDesktopPoolVolumes";
export const getDesktopsDesktopPoolVolumes: typeof import("./getDesktopsDesktopPoolVolumes").getDesktopsDesktopPoolVolumes = null as any;
export const getDesktopsDesktopPoolVolumesOutput: typeof import("./getDesktopsDesktopPoolVolumes").getDesktopsDesktopPoolVolumesOutput = null as any;
utilities.lazyLoad(exports, ["getDesktopsDesktopPoolVolumes","getDesktopsDesktopPoolVolumesOutput"], () => require("./getDesktopsDesktopPoolVolumes"));

export { GetDesktopsDesktopPoolsArgs, GetDesktopsDesktopPoolsResult, GetDesktopsDesktopPoolsOutputArgs } from "./getDesktopsDesktopPools";
export const getDesktopsDesktopPools: typeof import("./getDesktopsDesktopPools").getDesktopsDesktopPools = null as any;
export const getDesktopsDesktopPoolsOutput: typeof import("./getDesktopsDesktopPools").getDesktopsDesktopPoolsOutput = null as any;
utilities.lazyLoad(exports, ["getDesktopsDesktopPools","getDesktopsDesktopPoolsOutput"], () => require("./getDesktopsDesktopPools"));

export { GetDesktopsDesktopsArgs, GetDesktopsDesktopsResult, GetDesktopsDesktopsOutputArgs } from "./getDesktopsDesktops";
export const getDesktopsDesktops: typeof import("./getDesktopsDesktops").getDesktopsDesktops = null as any;
export const getDesktopsDesktopsOutput: typeof import("./getDesktopsDesktops").getDesktopsDesktopsOutput = null as any;
utilities.lazyLoad(exports, ["getDesktopsDesktops","getDesktopsDesktopsOutput"], () => require("./getDesktopsDesktops"));

export { GetDevopsBuildPipelineArgs, GetDevopsBuildPipelineResult, GetDevopsBuildPipelineOutputArgs } from "./getDevopsBuildPipeline";
export const getDevopsBuildPipeline: typeof import("./getDevopsBuildPipeline").getDevopsBuildPipeline = null as any;
export const getDevopsBuildPipelineOutput: typeof import("./getDevopsBuildPipeline").getDevopsBuildPipelineOutput = null as any;
utilities.lazyLoad(exports, ["getDevopsBuildPipeline","getDevopsBuildPipelineOutput"], () => require("./getDevopsBuildPipeline"));

export { GetDevopsBuildPipelineStageArgs, GetDevopsBuildPipelineStageResult, GetDevopsBuildPipelineStageOutputArgs } from "./getDevopsBuildPipelineStage";
export const getDevopsBuildPipelineStage: typeof import("./getDevopsBuildPipelineStage").getDevopsBuildPipelineStage = null as any;
export const getDevopsBuildPipelineStageOutput: typeof import("./getDevopsBuildPipelineStage").getDevopsBuildPipelineStageOutput = null as any;
utilities.lazyLoad(exports, ["getDevopsBuildPipelineStage","getDevopsBuildPipelineStageOutput"], () => require("./getDevopsBuildPipelineStage"));

export { GetDevopsBuildPipelineStagesArgs, GetDevopsBuildPipelineStagesResult, GetDevopsBuildPipelineStagesOutputArgs } from "./getDevopsBuildPipelineStages";
export const getDevopsBuildPipelineStages: typeof import("./getDevopsBuildPipelineStages").getDevopsBuildPipelineStages = null as any;
export const getDevopsBuildPipelineStagesOutput: typeof import("./getDevopsBuildPipelineStages").getDevopsBuildPipelineStagesOutput = null as any;
utilities.lazyLoad(exports, ["getDevopsBuildPipelineStages","getDevopsBuildPipelineStagesOutput"], () => require("./getDevopsBuildPipelineStages"));

export { GetDevopsBuildPipelinesArgs, GetDevopsBuildPipelinesResult, GetDevopsBuildPipelinesOutputArgs } from "./getDevopsBuildPipelines";
export const getDevopsBuildPipelines: typeof import("./getDevopsBuildPipelines").getDevopsBuildPipelines = null as any;
export const getDevopsBuildPipelinesOutput: typeof import("./getDevopsBuildPipelines").getDevopsBuildPipelinesOutput = null as any;
utilities.lazyLoad(exports, ["getDevopsBuildPipelines","getDevopsBuildPipelinesOutput"], () => require("./getDevopsBuildPipelines"));

export { GetDevopsBuildRunArgs, GetDevopsBuildRunResult, GetDevopsBuildRunOutputArgs } from "./getDevopsBuildRun";
export const getDevopsBuildRun: typeof import("./getDevopsBuildRun").getDevopsBuildRun = null as any;
export const getDevopsBuildRunOutput: typeof import("./getDevopsBuildRun").getDevopsBuildRunOutput = null as any;
utilities.lazyLoad(exports, ["getDevopsBuildRun","getDevopsBuildRunOutput"], () => require("./getDevopsBuildRun"));

export { GetDevopsBuildRunsArgs, GetDevopsBuildRunsResult, GetDevopsBuildRunsOutputArgs } from "./getDevopsBuildRuns";
export const getDevopsBuildRuns: typeof import("./getDevopsBuildRuns").getDevopsBuildRuns = null as any;
export const getDevopsBuildRunsOutput: typeof import("./getDevopsBuildRuns").getDevopsBuildRunsOutput = null as any;
utilities.lazyLoad(exports, ["getDevopsBuildRuns","getDevopsBuildRunsOutput"], () => require("./getDevopsBuildRuns"));

export { GetDevopsConnectionArgs, GetDevopsConnectionResult, GetDevopsConnectionOutputArgs } from "./getDevopsConnection";
export const getDevopsConnection: typeof import("./getDevopsConnection").getDevopsConnection = null as any;
export const getDevopsConnectionOutput: typeof import("./getDevopsConnection").getDevopsConnectionOutput = null as any;
utilities.lazyLoad(exports, ["getDevopsConnection","getDevopsConnectionOutput"], () => require("./getDevopsConnection"));

export { GetDevopsConnectionsArgs, GetDevopsConnectionsResult, GetDevopsConnectionsOutputArgs } from "./getDevopsConnections";
export const getDevopsConnections: typeof import("./getDevopsConnections").getDevopsConnections = null as any;
export const getDevopsConnectionsOutput: typeof import("./getDevopsConnections").getDevopsConnectionsOutput = null as any;
utilities.lazyLoad(exports, ["getDevopsConnections","getDevopsConnectionsOutput"], () => require("./getDevopsConnections"));

export { GetDevopsDeployArtifactArgs, GetDevopsDeployArtifactResult, GetDevopsDeployArtifactOutputArgs } from "./getDevopsDeployArtifact";
export const getDevopsDeployArtifact: typeof import("./getDevopsDeployArtifact").getDevopsDeployArtifact = null as any;
export const getDevopsDeployArtifactOutput: typeof import("./getDevopsDeployArtifact").getDevopsDeployArtifactOutput = null as any;
utilities.lazyLoad(exports, ["getDevopsDeployArtifact","getDevopsDeployArtifactOutput"], () => require("./getDevopsDeployArtifact"));

export { GetDevopsDeployArtifactsArgs, GetDevopsDeployArtifactsResult, GetDevopsDeployArtifactsOutputArgs } from "./getDevopsDeployArtifacts";
export const getDevopsDeployArtifacts: typeof import("./getDevopsDeployArtifacts").getDevopsDeployArtifacts = null as any;
export const getDevopsDeployArtifactsOutput: typeof import("./getDevopsDeployArtifacts").getDevopsDeployArtifactsOutput = null as any;
utilities.lazyLoad(exports, ["getDevopsDeployArtifacts","getDevopsDeployArtifactsOutput"], () => require("./getDevopsDeployArtifacts"));

export { GetDevopsDeployEnvironmentArgs, GetDevopsDeployEnvironmentResult, GetDevopsDeployEnvironmentOutputArgs } from "./getDevopsDeployEnvironment";
export const getDevopsDeployEnvironment: typeof import("./getDevopsDeployEnvironment").getDevopsDeployEnvironment = null as any;
export const getDevopsDeployEnvironmentOutput: typeof import("./getDevopsDeployEnvironment").getDevopsDeployEnvironmentOutput = null as any;
utilities.lazyLoad(exports, ["getDevopsDeployEnvironment","getDevopsDeployEnvironmentOutput"], () => require("./getDevopsDeployEnvironment"));

export { GetDevopsDeployEnvironmentsArgs, GetDevopsDeployEnvironmentsResult, GetDevopsDeployEnvironmentsOutputArgs } from "./getDevopsDeployEnvironments";
export const getDevopsDeployEnvironments: typeof import("./getDevopsDeployEnvironments").getDevopsDeployEnvironments = null as any;
export const getDevopsDeployEnvironmentsOutput: typeof import("./getDevopsDeployEnvironments").getDevopsDeployEnvironmentsOutput = null as any;
utilities.lazyLoad(exports, ["getDevopsDeployEnvironments","getDevopsDeployEnvironmentsOutput"], () => require("./getDevopsDeployEnvironments"));

export { GetDevopsDeployPipelineArgs, GetDevopsDeployPipelineResult, GetDevopsDeployPipelineOutputArgs } from "./getDevopsDeployPipeline";
export const getDevopsDeployPipeline: typeof import("./getDevopsDeployPipeline").getDevopsDeployPipeline = null as any;
export const getDevopsDeployPipelineOutput: typeof import("./getDevopsDeployPipeline").getDevopsDeployPipelineOutput = null as any;
utilities.lazyLoad(exports, ["getDevopsDeployPipeline","getDevopsDeployPipelineOutput"], () => require("./getDevopsDeployPipeline"));

export { GetDevopsDeployPipelinesArgs, GetDevopsDeployPipelinesResult, GetDevopsDeployPipelinesOutputArgs } from "./getDevopsDeployPipelines";
export const getDevopsDeployPipelines: typeof import("./getDevopsDeployPipelines").getDevopsDeployPipelines = null as any;
export const getDevopsDeployPipelinesOutput: typeof import("./getDevopsDeployPipelines").getDevopsDeployPipelinesOutput = null as any;
utilities.lazyLoad(exports, ["getDevopsDeployPipelines","getDevopsDeployPipelinesOutput"], () => require("./getDevopsDeployPipelines"));

export { GetDevopsDeployStageArgs, GetDevopsDeployStageResult, GetDevopsDeployStageOutputArgs } from "./getDevopsDeployStage";
export const getDevopsDeployStage: typeof import("./getDevopsDeployStage").getDevopsDeployStage = null as any;
export const getDevopsDeployStageOutput: typeof import("./getDevopsDeployStage").getDevopsDeployStageOutput = null as any;
utilities.lazyLoad(exports, ["getDevopsDeployStage","getDevopsDeployStageOutput"], () => require("./getDevopsDeployStage"));

export { GetDevopsDeployStagesArgs, GetDevopsDeployStagesResult, GetDevopsDeployStagesOutputArgs } from "./getDevopsDeployStages";
export const getDevopsDeployStages: typeof import("./getDevopsDeployStages").getDevopsDeployStages = null as any;
export const getDevopsDeployStagesOutput: typeof import("./getDevopsDeployStages").getDevopsDeployStagesOutput = null as any;
utilities.lazyLoad(exports, ["getDevopsDeployStages","getDevopsDeployStagesOutput"], () => require("./getDevopsDeployStages"));

export { GetDevopsDeploymentArgs, GetDevopsDeploymentResult, GetDevopsDeploymentOutputArgs } from "./getDevopsDeployment";
export const getDevopsDeployment: typeof import("./getDevopsDeployment").getDevopsDeployment = null as any;
export const getDevopsDeploymentOutput: typeof import("./getDevopsDeployment").getDevopsDeploymentOutput = null as any;
utilities.lazyLoad(exports, ["getDevopsDeployment","getDevopsDeploymentOutput"], () => require("./getDevopsDeployment"));

export { GetDevopsDeploymentsArgs, GetDevopsDeploymentsResult, GetDevopsDeploymentsOutputArgs } from "./getDevopsDeployments";
export const getDevopsDeployments: typeof import("./getDevopsDeployments").getDevopsDeployments = null as any;
export const getDevopsDeploymentsOutput: typeof import("./getDevopsDeployments").getDevopsDeploymentsOutput = null as any;
utilities.lazyLoad(exports, ["getDevopsDeployments","getDevopsDeploymentsOutput"], () => require("./getDevopsDeployments"));

export { GetDevopsProjectArgs, GetDevopsProjectResult, GetDevopsProjectOutputArgs } from "./getDevopsProject";
export const getDevopsProject: typeof import("./getDevopsProject").getDevopsProject = null as any;
export const getDevopsProjectOutput: typeof import("./getDevopsProject").getDevopsProjectOutput = null as any;
utilities.lazyLoad(exports, ["getDevopsProject","getDevopsProjectOutput"], () => require("./getDevopsProject"));

export { GetDevopsProjectRepositorySettingArgs, GetDevopsProjectRepositorySettingResult, GetDevopsProjectRepositorySettingOutputArgs } from "./getDevopsProjectRepositorySetting";
export const getDevopsProjectRepositorySetting: typeof import("./getDevopsProjectRepositorySetting").getDevopsProjectRepositorySetting = null as any;
export const getDevopsProjectRepositorySettingOutput: typeof import("./getDevopsProjectRepositorySetting").getDevopsProjectRepositorySettingOutput = null as any;
utilities.lazyLoad(exports, ["getDevopsProjectRepositorySetting","getDevopsProjectRepositorySettingOutput"], () => require("./getDevopsProjectRepositorySetting"));

export { GetDevopsProjectsArgs, GetDevopsProjectsResult, GetDevopsProjectsOutputArgs } from "./getDevopsProjects";
export const getDevopsProjects: typeof import("./getDevopsProjects").getDevopsProjects = null as any;
export const getDevopsProjectsOutput: typeof import("./getDevopsProjects").getDevopsProjectsOutput = null as any;
utilities.lazyLoad(exports, ["getDevopsProjects","getDevopsProjectsOutput"], () => require("./getDevopsProjects"));

export { GetDevopsRepoFileLineArgs, GetDevopsRepoFileLineResult, GetDevopsRepoFileLineOutputArgs } from "./getDevopsRepoFileLine";
export const getDevopsRepoFileLine: typeof import("./getDevopsRepoFileLine").getDevopsRepoFileLine = null as any;
export const getDevopsRepoFileLineOutput: typeof import("./getDevopsRepoFileLine").getDevopsRepoFileLineOutput = null as any;
utilities.lazyLoad(exports, ["getDevopsRepoFileLine","getDevopsRepoFileLineOutput"], () => require("./getDevopsRepoFileLine"));

export { GetDevopsRepositoriesArgs, GetDevopsRepositoriesResult, GetDevopsRepositoriesOutputArgs } from "./getDevopsRepositories";
export const getDevopsRepositories: typeof import("./getDevopsRepositories").getDevopsRepositories = null as any;
export const getDevopsRepositoriesOutput: typeof import("./getDevopsRepositories").getDevopsRepositoriesOutput = null as any;
utilities.lazyLoad(exports, ["getDevopsRepositories","getDevopsRepositoriesOutput"], () => require("./getDevopsRepositories"));

export { GetDevopsRepositoryArgs, GetDevopsRepositoryResult, GetDevopsRepositoryOutputArgs } from "./getDevopsRepository";
export const getDevopsRepository: typeof import("./getDevopsRepository").getDevopsRepository = null as any;
export const getDevopsRepositoryOutput: typeof import("./getDevopsRepository").getDevopsRepositoryOutput = null as any;
utilities.lazyLoad(exports, ["getDevopsRepository","getDevopsRepositoryOutput"], () => require("./getDevopsRepository"));

export { GetDevopsRepositoryArchiveContentArgs, GetDevopsRepositoryArchiveContentResult, GetDevopsRepositoryArchiveContentOutputArgs } from "./getDevopsRepositoryArchiveContent";
export const getDevopsRepositoryArchiveContent: typeof import("./getDevopsRepositoryArchiveContent").getDevopsRepositoryArchiveContent = null as any;
export const getDevopsRepositoryArchiveContentOutput: typeof import("./getDevopsRepositoryArchiveContent").getDevopsRepositoryArchiveContentOutput = null as any;
utilities.lazyLoad(exports, ["getDevopsRepositoryArchiveContent","getDevopsRepositoryArchiveContentOutput"], () => require("./getDevopsRepositoryArchiveContent"));

export { GetDevopsRepositoryAuthorArgs, GetDevopsRepositoryAuthorResult, GetDevopsRepositoryAuthorOutputArgs } from "./getDevopsRepositoryAuthor";
export const getDevopsRepositoryAuthor: typeof import("./getDevopsRepositoryAuthor").getDevopsRepositoryAuthor = null as any;
export const getDevopsRepositoryAuthorOutput: typeof import("./getDevopsRepositoryAuthor").getDevopsRepositoryAuthorOutput = null as any;
utilities.lazyLoad(exports, ["getDevopsRepositoryAuthor","getDevopsRepositoryAuthorOutput"], () => require("./getDevopsRepositoryAuthor"));

export { GetDevopsRepositoryAuthorsArgs, GetDevopsRepositoryAuthorsResult, GetDevopsRepositoryAuthorsOutputArgs } from "./getDevopsRepositoryAuthors";
export const getDevopsRepositoryAuthors: typeof import("./getDevopsRepositoryAuthors").getDevopsRepositoryAuthors = null as any;
export const getDevopsRepositoryAuthorsOutput: typeof import("./getDevopsRepositoryAuthors").getDevopsRepositoryAuthorsOutput = null as any;
utilities.lazyLoad(exports, ["getDevopsRepositoryAuthors","getDevopsRepositoryAuthorsOutput"], () => require("./getDevopsRepositoryAuthors"));

export { GetDevopsRepositoryCommitArgs, GetDevopsRepositoryCommitResult, GetDevopsRepositoryCommitOutputArgs } from "./getDevopsRepositoryCommit";
export const getDevopsRepositoryCommit: typeof import("./getDevopsRepositoryCommit").getDevopsRepositoryCommit = null as any;
export const getDevopsRepositoryCommitOutput: typeof import("./getDevopsRepositoryCommit").getDevopsRepositoryCommitOutput = null as any;
utilities.lazyLoad(exports, ["getDevopsRepositoryCommit","getDevopsRepositoryCommitOutput"], () => require("./getDevopsRepositoryCommit"));

export { GetDevopsRepositoryCommitsArgs, GetDevopsRepositoryCommitsResult, GetDevopsRepositoryCommitsOutputArgs } from "./getDevopsRepositoryCommits";
export const getDevopsRepositoryCommits: typeof import("./getDevopsRepositoryCommits").getDevopsRepositoryCommits = null as any;
export const getDevopsRepositoryCommitsOutput: typeof import("./getDevopsRepositoryCommits").getDevopsRepositoryCommitsOutput = null as any;
utilities.lazyLoad(exports, ["getDevopsRepositoryCommits","getDevopsRepositoryCommitsOutput"], () => require("./getDevopsRepositoryCommits"));

export { GetDevopsRepositoryDiffArgs, GetDevopsRepositoryDiffResult, GetDevopsRepositoryDiffOutputArgs } from "./getDevopsRepositoryDiff";
export const getDevopsRepositoryDiff: typeof import("./getDevopsRepositoryDiff").getDevopsRepositoryDiff = null as any;
export const getDevopsRepositoryDiffOutput: typeof import("./getDevopsRepositoryDiff").getDevopsRepositoryDiffOutput = null as any;
utilities.lazyLoad(exports, ["getDevopsRepositoryDiff","getDevopsRepositoryDiffOutput"], () => require("./getDevopsRepositoryDiff"));

export { GetDevopsRepositoryDiffsArgs, GetDevopsRepositoryDiffsResult, GetDevopsRepositoryDiffsOutputArgs } from "./getDevopsRepositoryDiffs";
export const getDevopsRepositoryDiffs: typeof import("./getDevopsRepositoryDiffs").getDevopsRepositoryDiffs = null as any;
export const getDevopsRepositoryDiffsOutput: typeof import("./getDevopsRepositoryDiffs").getDevopsRepositoryDiffsOutput = null as any;
utilities.lazyLoad(exports, ["getDevopsRepositoryDiffs","getDevopsRepositoryDiffsOutput"], () => require("./getDevopsRepositoryDiffs"));

export { GetDevopsRepositoryFileDiffArgs, GetDevopsRepositoryFileDiffResult, GetDevopsRepositoryFileDiffOutputArgs } from "./getDevopsRepositoryFileDiff";
export const getDevopsRepositoryFileDiff: typeof import("./getDevopsRepositoryFileDiff").getDevopsRepositoryFileDiff = null as any;
export const getDevopsRepositoryFileDiffOutput: typeof import("./getDevopsRepositoryFileDiff").getDevopsRepositoryFileDiffOutput = null as any;
utilities.lazyLoad(exports, ["getDevopsRepositoryFileDiff","getDevopsRepositoryFileDiffOutput"], () => require("./getDevopsRepositoryFileDiff"));

export { GetDevopsRepositoryFileLineArgs, GetDevopsRepositoryFileLineResult, GetDevopsRepositoryFileLineOutputArgs } from "./getDevopsRepositoryFileLine";
export const getDevopsRepositoryFileLine: typeof import("./getDevopsRepositoryFileLine").getDevopsRepositoryFileLine = null as any;
export const getDevopsRepositoryFileLineOutput: typeof import("./getDevopsRepositoryFileLine").getDevopsRepositoryFileLineOutput = null as any;
utilities.lazyLoad(exports, ["getDevopsRepositoryFileLine","getDevopsRepositoryFileLineOutput"], () => require("./getDevopsRepositoryFileLine"));

export { GetDevopsRepositoryMirrorRecordArgs, GetDevopsRepositoryMirrorRecordResult, GetDevopsRepositoryMirrorRecordOutputArgs } from "./getDevopsRepositoryMirrorRecord";
export const getDevopsRepositoryMirrorRecord: typeof import("./getDevopsRepositoryMirrorRecord").getDevopsRepositoryMirrorRecord = null as any;
export const getDevopsRepositoryMirrorRecordOutput: typeof import("./getDevopsRepositoryMirrorRecord").getDevopsRepositoryMirrorRecordOutput = null as any;
utilities.lazyLoad(exports, ["getDevopsRepositoryMirrorRecord","getDevopsRepositoryMirrorRecordOutput"], () => require("./getDevopsRepositoryMirrorRecord"));

export { GetDevopsRepositoryMirrorRecordsArgs, GetDevopsRepositoryMirrorRecordsResult, GetDevopsRepositoryMirrorRecordsOutputArgs } from "./getDevopsRepositoryMirrorRecords";
export const getDevopsRepositoryMirrorRecords: typeof import("./getDevopsRepositoryMirrorRecords").getDevopsRepositoryMirrorRecords = null as any;
export const getDevopsRepositoryMirrorRecordsOutput: typeof import("./getDevopsRepositoryMirrorRecords").getDevopsRepositoryMirrorRecordsOutput = null as any;
utilities.lazyLoad(exports, ["getDevopsRepositoryMirrorRecords","getDevopsRepositoryMirrorRecordsOutput"], () => require("./getDevopsRepositoryMirrorRecords"));

export { GetDevopsRepositoryMirrorrecordArgs, GetDevopsRepositoryMirrorrecordResult, GetDevopsRepositoryMirrorrecordOutputArgs } from "./getDevopsRepositoryMirrorrecord";
export const getDevopsRepositoryMirrorrecord: typeof import("./getDevopsRepositoryMirrorrecord").getDevopsRepositoryMirrorrecord = null as any;
export const getDevopsRepositoryMirrorrecordOutput: typeof import("./getDevopsRepositoryMirrorrecord").getDevopsRepositoryMirrorrecordOutput = null as any;
utilities.lazyLoad(exports, ["getDevopsRepositoryMirrorrecord","getDevopsRepositoryMirrorrecordOutput"], () => require("./getDevopsRepositoryMirrorrecord"));

export { GetDevopsRepositoryObjectArgs, GetDevopsRepositoryObjectResult, GetDevopsRepositoryObjectOutputArgs } from "./getDevopsRepositoryObject";
export const getDevopsRepositoryObject: typeof import("./getDevopsRepositoryObject").getDevopsRepositoryObject = null as any;
export const getDevopsRepositoryObjectOutput: typeof import("./getDevopsRepositoryObject").getDevopsRepositoryObjectOutput = null as any;
utilities.lazyLoad(exports, ["getDevopsRepositoryObject","getDevopsRepositoryObjectOutput"], () => require("./getDevopsRepositoryObject"));

export { GetDevopsRepositoryObjectContentArgs, GetDevopsRepositoryObjectContentResult, GetDevopsRepositoryObjectContentOutputArgs } from "./getDevopsRepositoryObjectContent";
export const getDevopsRepositoryObjectContent: typeof import("./getDevopsRepositoryObjectContent").getDevopsRepositoryObjectContent = null as any;
export const getDevopsRepositoryObjectContentOutput: typeof import("./getDevopsRepositoryObjectContent").getDevopsRepositoryObjectContentOutput = null as any;
utilities.lazyLoad(exports, ["getDevopsRepositoryObjectContent","getDevopsRepositoryObjectContentOutput"], () => require("./getDevopsRepositoryObjectContent"));

export { GetDevopsRepositoryPathArgs, GetDevopsRepositoryPathResult, GetDevopsRepositoryPathOutputArgs } from "./getDevopsRepositoryPath";
export const getDevopsRepositoryPath: typeof import("./getDevopsRepositoryPath").getDevopsRepositoryPath = null as any;
export const getDevopsRepositoryPathOutput: typeof import("./getDevopsRepositoryPath").getDevopsRepositoryPathOutput = null as any;
utilities.lazyLoad(exports, ["getDevopsRepositoryPath","getDevopsRepositoryPathOutput"], () => require("./getDevopsRepositoryPath"));

export { GetDevopsRepositoryPathsArgs, GetDevopsRepositoryPathsResult, GetDevopsRepositoryPathsOutputArgs } from "./getDevopsRepositoryPaths";
export const getDevopsRepositoryPaths: typeof import("./getDevopsRepositoryPaths").getDevopsRepositoryPaths = null as any;
export const getDevopsRepositoryPathsOutput: typeof import("./getDevopsRepositoryPaths").getDevopsRepositoryPathsOutput = null as any;
utilities.lazyLoad(exports, ["getDevopsRepositoryPaths","getDevopsRepositoryPathsOutput"], () => require("./getDevopsRepositoryPaths"));

export { GetDevopsRepositoryProtectedBranchesArgs, GetDevopsRepositoryProtectedBranchesResult, GetDevopsRepositoryProtectedBranchesOutputArgs } from "./getDevopsRepositoryProtectedBranches";
export const getDevopsRepositoryProtectedBranches: typeof import("./getDevopsRepositoryProtectedBranches").getDevopsRepositoryProtectedBranches = null as any;
export const getDevopsRepositoryProtectedBranchesOutput: typeof import("./getDevopsRepositoryProtectedBranches").getDevopsRepositoryProtectedBranchesOutput = null as any;
utilities.lazyLoad(exports, ["getDevopsRepositoryProtectedBranches","getDevopsRepositoryProtectedBranchesOutput"], () => require("./getDevopsRepositoryProtectedBranches"));

export { GetDevopsRepositoryRefArgs, GetDevopsRepositoryRefResult, GetDevopsRepositoryRefOutputArgs } from "./getDevopsRepositoryRef";
export const getDevopsRepositoryRef: typeof import("./getDevopsRepositoryRef").getDevopsRepositoryRef = null as any;
export const getDevopsRepositoryRefOutput: typeof import("./getDevopsRepositoryRef").getDevopsRepositoryRefOutput = null as any;
utilities.lazyLoad(exports, ["getDevopsRepositoryRef","getDevopsRepositoryRefOutput"], () => require("./getDevopsRepositoryRef"));

export { GetDevopsRepositoryRefsArgs, GetDevopsRepositoryRefsResult, GetDevopsRepositoryRefsOutputArgs } from "./getDevopsRepositoryRefs";
export const getDevopsRepositoryRefs: typeof import("./getDevopsRepositoryRefs").getDevopsRepositoryRefs = null as any;
export const getDevopsRepositoryRefsOutput: typeof import("./getDevopsRepositoryRefs").getDevopsRepositoryRefsOutput = null as any;
utilities.lazyLoad(exports, ["getDevopsRepositoryRefs","getDevopsRepositoryRefsOutput"], () => require("./getDevopsRepositoryRefs"));

export { GetDevopsRepositorySettingArgs, GetDevopsRepositorySettingResult, GetDevopsRepositorySettingOutputArgs } from "./getDevopsRepositorySetting";
export const getDevopsRepositorySetting: typeof import("./getDevopsRepositorySetting").getDevopsRepositorySetting = null as any;
export const getDevopsRepositorySettingOutput: typeof import("./getDevopsRepositorySetting").getDevopsRepositorySettingOutput = null as any;
utilities.lazyLoad(exports, ["getDevopsRepositorySetting","getDevopsRepositorySettingOutput"], () => require("./getDevopsRepositorySetting"));

export { GetDevopsTriggerArgs, GetDevopsTriggerResult, GetDevopsTriggerOutputArgs } from "./getDevopsTrigger";
export const getDevopsTrigger: typeof import("./getDevopsTrigger").getDevopsTrigger = null as any;
export const getDevopsTriggerOutput: typeof import("./getDevopsTrigger").getDevopsTriggerOutput = null as any;
utilities.lazyLoad(exports, ["getDevopsTrigger","getDevopsTriggerOutput"], () => require("./getDevopsTrigger"));

export { GetDevopsTriggersArgs, GetDevopsTriggersResult, GetDevopsTriggersOutputArgs } from "./getDevopsTriggers";
export const getDevopsTriggers: typeof import("./getDevopsTriggers").getDevopsTriggers = null as any;
export const getDevopsTriggersOutput: typeof import("./getDevopsTriggers").getDevopsTriggersOutput = null as any;
utilities.lazyLoad(exports, ["getDevopsTriggers","getDevopsTriggersOutput"], () => require("./getDevopsTriggers"));

export { GetDisasterRecoveryDrPlanArgs, GetDisasterRecoveryDrPlanResult, GetDisasterRecoveryDrPlanOutputArgs } from "./getDisasterRecoveryDrPlan";
export const getDisasterRecoveryDrPlan: typeof import("./getDisasterRecoveryDrPlan").getDisasterRecoveryDrPlan = null as any;
export const getDisasterRecoveryDrPlanOutput: typeof import("./getDisasterRecoveryDrPlan").getDisasterRecoveryDrPlanOutput = null as any;
utilities.lazyLoad(exports, ["getDisasterRecoveryDrPlan","getDisasterRecoveryDrPlanOutput"], () => require("./getDisasterRecoveryDrPlan"));

export { GetDisasterRecoveryDrPlanExecutionArgs, GetDisasterRecoveryDrPlanExecutionResult, GetDisasterRecoveryDrPlanExecutionOutputArgs } from "./getDisasterRecoveryDrPlanExecution";
export const getDisasterRecoveryDrPlanExecution: typeof import("./getDisasterRecoveryDrPlanExecution").getDisasterRecoveryDrPlanExecution = null as any;
export const getDisasterRecoveryDrPlanExecutionOutput: typeof import("./getDisasterRecoveryDrPlanExecution").getDisasterRecoveryDrPlanExecutionOutput = null as any;
utilities.lazyLoad(exports, ["getDisasterRecoveryDrPlanExecution","getDisasterRecoveryDrPlanExecutionOutput"], () => require("./getDisasterRecoveryDrPlanExecution"));

export { GetDisasterRecoveryDrPlanExecutionsArgs, GetDisasterRecoveryDrPlanExecutionsResult, GetDisasterRecoveryDrPlanExecutionsOutputArgs } from "./getDisasterRecoveryDrPlanExecutions";
export const getDisasterRecoveryDrPlanExecutions: typeof import("./getDisasterRecoveryDrPlanExecutions").getDisasterRecoveryDrPlanExecutions = null as any;
export const getDisasterRecoveryDrPlanExecutionsOutput: typeof import("./getDisasterRecoveryDrPlanExecutions").getDisasterRecoveryDrPlanExecutionsOutput = null as any;
utilities.lazyLoad(exports, ["getDisasterRecoveryDrPlanExecutions","getDisasterRecoveryDrPlanExecutionsOutput"], () => require("./getDisasterRecoveryDrPlanExecutions"));

export { GetDisasterRecoveryDrPlansArgs, GetDisasterRecoveryDrPlansResult, GetDisasterRecoveryDrPlansOutputArgs } from "./getDisasterRecoveryDrPlans";
export const getDisasterRecoveryDrPlans: typeof import("./getDisasterRecoveryDrPlans").getDisasterRecoveryDrPlans = null as any;
export const getDisasterRecoveryDrPlansOutput: typeof import("./getDisasterRecoveryDrPlans").getDisasterRecoveryDrPlansOutput = null as any;
utilities.lazyLoad(exports, ["getDisasterRecoveryDrPlans","getDisasterRecoveryDrPlansOutput"], () => require("./getDisasterRecoveryDrPlans"));

export { GetDisasterRecoveryDrProtectionGroupArgs, GetDisasterRecoveryDrProtectionGroupResult, GetDisasterRecoveryDrProtectionGroupOutputArgs } from "./getDisasterRecoveryDrProtectionGroup";
export const getDisasterRecoveryDrProtectionGroup: typeof import("./getDisasterRecoveryDrProtectionGroup").getDisasterRecoveryDrProtectionGroup = null as any;
export const getDisasterRecoveryDrProtectionGroupOutput: typeof import("./getDisasterRecoveryDrProtectionGroup").getDisasterRecoveryDrProtectionGroupOutput = null as any;
utilities.lazyLoad(exports, ["getDisasterRecoveryDrProtectionGroup","getDisasterRecoveryDrProtectionGroupOutput"], () => require("./getDisasterRecoveryDrProtectionGroup"));

export { GetDisasterRecoveryDrProtectionGroupsArgs, GetDisasterRecoveryDrProtectionGroupsResult, GetDisasterRecoveryDrProtectionGroupsOutputArgs } from "./getDisasterRecoveryDrProtectionGroups";
export const getDisasterRecoveryDrProtectionGroups: typeof import("./getDisasterRecoveryDrProtectionGroups").getDisasterRecoveryDrProtectionGroups = null as any;
export const getDisasterRecoveryDrProtectionGroupsOutput: typeof import("./getDisasterRecoveryDrProtectionGroups").getDisasterRecoveryDrProtectionGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getDisasterRecoveryDrProtectionGroups","getDisasterRecoveryDrProtectionGroupsOutput"], () => require("./getDisasterRecoveryDrProtectionGroups"));

export { GetDnsRecordsArgs, GetDnsRecordsResult, GetDnsRecordsOutputArgs } from "./getDnsRecords";
export const getDnsRecords: typeof import("./getDnsRecords").getDnsRecords = null as any;
export const getDnsRecordsOutput: typeof import("./getDnsRecords").getDnsRecordsOutput = null as any;
utilities.lazyLoad(exports, ["getDnsRecords","getDnsRecordsOutput"], () => require("./getDnsRecords"));

export { GetDnsResolverArgs, GetDnsResolverResult, GetDnsResolverOutputArgs } from "./getDnsResolver";
export const getDnsResolver: typeof import("./getDnsResolver").getDnsResolver = null as any;
export const getDnsResolverOutput: typeof import("./getDnsResolver").getDnsResolverOutput = null as any;
utilities.lazyLoad(exports, ["getDnsResolver","getDnsResolverOutput"], () => require("./getDnsResolver"));

export { GetDnsResolverEndpointArgs, GetDnsResolverEndpointResult, GetDnsResolverEndpointOutputArgs } from "./getDnsResolverEndpoint";
export const getDnsResolverEndpoint: typeof import("./getDnsResolverEndpoint").getDnsResolverEndpoint = null as any;
export const getDnsResolverEndpointOutput: typeof import("./getDnsResolverEndpoint").getDnsResolverEndpointOutput = null as any;
utilities.lazyLoad(exports, ["getDnsResolverEndpoint","getDnsResolverEndpointOutput"], () => require("./getDnsResolverEndpoint"));

export { GetDnsResolverEndpointsArgs, GetDnsResolverEndpointsResult, GetDnsResolverEndpointsOutputArgs } from "./getDnsResolverEndpoints";
export const getDnsResolverEndpoints: typeof import("./getDnsResolverEndpoints").getDnsResolverEndpoints = null as any;
export const getDnsResolverEndpointsOutput: typeof import("./getDnsResolverEndpoints").getDnsResolverEndpointsOutput = null as any;
utilities.lazyLoad(exports, ["getDnsResolverEndpoints","getDnsResolverEndpointsOutput"], () => require("./getDnsResolverEndpoints"));

export { GetDnsResolversArgs, GetDnsResolversResult, GetDnsResolversOutputArgs } from "./getDnsResolvers";
export const getDnsResolvers: typeof import("./getDnsResolvers").getDnsResolvers = null as any;
export const getDnsResolversOutput: typeof import("./getDnsResolvers").getDnsResolversOutput = null as any;
utilities.lazyLoad(exports, ["getDnsResolvers","getDnsResolversOutput"], () => require("./getDnsResolvers"));

export { GetDnsRrsetArgs, GetDnsRrsetResult, GetDnsRrsetOutputArgs } from "./getDnsRrset";
export const getDnsRrset: typeof import("./getDnsRrset").getDnsRrset = null as any;
export const getDnsRrsetOutput: typeof import("./getDnsRrset").getDnsRrsetOutput = null as any;
utilities.lazyLoad(exports, ["getDnsRrset","getDnsRrsetOutput"], () => require("./getDnsRrset"));

export { GetDnsRrsetsArgs, GetDnsRrsetsResult, GetDnsRrsetsOutputArgs } from "./getDnsRrsets";
export const getDnsRrsets: typeof import("./getDnsRrsets").getDnsRrsets = null as any;
export const getDnsRrsetsOutput: typeof import("./getDnsRrsets").getDnsRrsetsOutput = null as any;
utilities.lazyLoad(exports, ["getDnsRrsets","getDnsRrsetsOutput"], () => require("./getDnsRrsets"));

export { GetDnsSteeringPoliciesArgs, GetDnsSteeringPoliciesResult, GetDnsSteeringPoliciesOutputArgs } from "./getDnsSteeringPolicies";
export const getDnsSteeringPolicies: typeof import("./getDnsSteeringPolicies").getDnsSteeringPolicies = null as any;
export const getDnsSteeringPoliciesOutput: typeof import("./getDnsSteeringPolicies").getDnsSteeringPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getDnsSteeringPolicies","getDnsSteeringPoliciesOutput"], () => require("./getDnsSteeringPolicies"));

export { GetDnsSteeringPolicyArgs, GetDnsSteeringPolicyResult, GetDnsSteeringPolicyOutputArgs } from "./getDnsSteeringPolicy";
export const getDnsSteeringPolicy: typeof import("./getDnsSteeringPolicy").getDnsSteeringPolicy = null as any;
export const getDnsSteeringPolicyOutput: typeof import("./getDnsSteeringPolicy").getDnsSteeringPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getDnsSteeringPolicy","getDnsSteeringPolicyOutput"], () => require("./getDnsSteeringPolicy"));

export { GetDnsSteeringPolicyAttachmentArgs, GetDnsSteeringPolicyAttachmentResult, GetDnsSteeringPolicyAttachmentOutputArgs } from "./getDnsSteeringPolicyAttachment";
export const getDnsSteeringPolicyAttachment: typeof import("./getDnsSteeringPolicyAttachment").getDnsSteeringPolicyAttachment = null as any;
export const getDnsSteeringPolicyAttachmentOutput: typeof import("./getDnsSteeringPolicyAttachment").getDnsSteeringPolicyAttachmentOutput = null as any;
utilities.lazyLoad(exports, ["getDnsSteeringPolicyAttachment","getDnsSteeringPolicyAttachmentOutput"], () => require("./getDnsSteeringPolicyAttachment"));

export { GetDnsSteeringPolicyAttachmentsArgs, GetDnsSteeringPolicyAttachmentsResult, GetDnsSteeringPolicyAttachmentsOutputArgs } from "./getDnsSteeringPolicyAttachments";
export const getDnsSteeringPolicyAttachments: typeof import("./getDnsSteeringPolicyAttachments").getDnsSteeringPolicyAttachments = null as any;
export const getDnsSteeringPolicyAttachmentsOutput: typeof import("./getDnsSteeringPolicyAttachments").getDnsSteeringPolicyAttachmentsOutput = null as any;
utilities.lazyLoad(exports, ["getDnsSteeringPolicyAttachments","getDnsSteeringPolicyAttachmentsOutput"], () => require("./getDnsSteeringPolicyAttachments"));

export { GetDnsTsigKeyArgs, GetDnsTsigKeyResult, GetDnsTsigKeyOutputArgs } from "./getDnsTsigKey";
export const getDnsTsigKey: typeof import("./getDnsTsigKey").getDnsTsigKey = null as any;
export const getDnsTsigKeyOutput: typeof import("./getDnsTsigKey").getDnsTsigKeyOutput = null as any;
utilities.lazyLoad(exports, ["getDnsTsigKey","getDnsTsigKeyOutput"], () => require("./getDnsTsigKey"));

export { GetDnsTsigKeysArgs, GetDnsTsigKeysResult, GetDnsTsigKeysOutputArgs } from "./getDnsTsigKeys";
export const getDnsTsigKeys: typeof import("./getDnsTsigKeys").getDnsTsigKeys = null as any;
export const getDnsTsigKeysOutput: typeof import("./getDnsTsigKeys").getDnsTsigKeysOutput = null as any;
utilities.lazyLoad(exports, ["getDnsTsigKeys","getDnsTsigKeysOutput"], () => require("./getDnsTsigKeys"));

export { GetDnsViewArgs, GetDnsViewResult, GetDnsViewOutputArgs } from "./getDnsView";
export const getDnsView: typeof import("./getDnsView").getDnsView = null as any;
export const getDnsViewOutput: typeof import("./getDnsView").getDnsViewOutput = null as any;
utilities.lazyLoad(exports, ["getDnsView","getDnsViewOutput"], () => require("./getDnsView"));

export { GetDnsViewsArgs, GetDnsViewsResult, GetDnsViewsOutputArgs } from "./getDnsViews";
export const getDnsViews: typeof import("./getDnsViews").getDnsViews = null as any;
export const getDnsViewsOutput: typeof import("./getDnsViews").getDnsViewsOutput = null as any;
utilities.lazyLoad(exports, ["getDnsViews","getDnsViewsOutput"], () => require("./getDnsViews"));

export { GetDnsZonesArgs, GetDnsZonesResult, GetDnsZonesOutputArgs } from "./getDnsZones";
export const getDnsZones: typeof import("./getDnsZones").getDnsZones = null as any;
export const getDnsZonesOutput: typeof import("./getDnsZones").getDnsZonesOutput = null as any;
utilities.lazyLoad(exports, ["getDnsZones","getDnsZonesOutput"], () => require("./getDnsZones"));

export { GetEmailConfigurationArgs, GetEmailConfigurationResult, GetEmailConfigurationOutputArgs } from "./getEmailConfiguration";
export const getEmailConfiguration: typeof import("./getEmailConfiguration").getEmailConfiguration = null as any;
export const getEmailConfigurationOutput: typeof import("./getEmailConfiguration").getEmailConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getEmailConfiguration","getEmailConfigurationOutput"], () => require("./getEmailConfiguration"));

export { GetEmailDkimArgs, GetEmailDkimResult, GetEmailDkimOutputArgs } from "./getEmailDkim";
export const getEmailDkim: typeof import("./getEmailDkim").getEmailDkim = null as any;
export const getEmailDkimOutput: typeof import("./getEmailDkim").getEmailDkimOutput = null as any;
utilities.lazyLoad(exports, ["getEmailDkim","getEmailDkimOutput"], () => require("./getEmailDkim"));

export { GetEmailDkimsArgs, GetEmailDkimsResult, GetEmailDkimsOutputArgs } from "./getEmailDkims";
export const getEmailDkims: typeof import("./getEmailDkims").getEmailDkims = null as any;
export const getEmailDkimsOutput: typeof import("./getEmailDkims").getEmailDkimsOutput = null as any;
utilities.lazyLoad(exports, ["getEmailDkims","getEmailDkimsOutput"], () => require("./getEmailDkims"));

export { GetEmailEmailDomainArgs, GetEmailEmailDomainResult, GetEmailEmailDomainOutputArgs } from "./getEmailEmailDomain";
export const getEmailEmailDomain: typeof import("./getEmailEmailDomain").getEmailEmailDomain = null as any;
export const getEmailEmailDomainOutput: typeof import("./getEmailEmailDomain").getEmailEmailDomainOutput = null as any;
utilities.lazyLoad(exports, ["getEmailEmailDomain","getEmailEmailDomainOutput"], () => require("./getEmailEmailDomain"));

export { GetEmailEmailDomainsArgs, GetEmailEmailDomainsResult, GetEmailEmailDomainsOutputArgs } from "./getEmailEmailDomains";
export const getEmailEmailDomains: typeof import("./getEmailEmailDomains").getEmailEmailDomains = null as any;
export const getEmailEmailDomainsOutput: typeof import("./getEmailEmailDomains").getEmailEmailDomainsOutput = null as any;
utilities.lazyLoad(exports, ["getEmailEmailDomains","getEmailEmailDomainsOutput"], () => require("./getEmailEmailDomains"));

export { GetEmailEmailReturnPathArgs, GetEmailEmailReturnPathResult, GetEmailEmailReturnPathOutputArgs } from "./getEmailEmailReturnPath";
export const getEmailEmailReturnPath: typeof import("./getEmailEmailReturnPath").getEmailEmailReturnPath = null as any;
export const getEmailEmailReturnPathOutput: typeof import("./getEmailEmailReturnPath").getEmailEmailReturnPathOutput = null as any;
utilities.lazyLoad(exports, ["getEmailEmailReturnPath","getEmailEmailReturnPathOutput"], () => require("./getEmailEmailReturnPath"));

export { GetEmailEmailReturnPathsArgs, GetEmailEmailReturnPathsResult, GetEmailEmailReturnPathsOutputArgs } from "./getEmailEmailReturnPaths";
export const getEmailEmailReturnPaths: typeof import("./getEmailEmailReturnPaths").getEmailEmailReturnPaths = null as any;
export const getEmailEmailReturnPathsOutput: typeof import("./getEmailEmailReturnPaths").getEmailEmailReturnPathsOutput = null as any;
utilities.lazyLoad(exports, ["getEmailEmailReturnPaths","getEmailEmailReturnPathsOutput"], () => require("./getEmailEmailReturnPaths"));

export { GetEmailSenderArgs, GetEmailSenderResult, GetEmailSenderOutputArgs } from "./getEmailSender";
export const getEmailSender: typeof import("./getEmailSender").getEmailSender = null as any;
export const getEmailSenderOutput: typeof import("./getEmailSender").getEmailSenderOutput = null as any;
utilities.lazyLoad(exports, ["getEmailSender","getEmailSenderOutput"], () => require("./getEmailSender"));

export { GetEmailSendersArgs, GetEmailSendersResult, GetEmailSendersOutputArgs } from "./getEmailSenders";
export const getEmailSenders: typeof import("./getEmailSenders").getEmailSenders = null as any;
export const getEmailSendersOutput: typeof import("./getEmailSenders").getEmailSendersOutput = null as any;
utilities.lazyLoad(exports, ["getEmailSenders","getEmailSendersOutput"], () => require("./getEmailSenders"));

export { GetEmailSuppressionArgs, GetEmailSuppressionResult, GetEmailSuppressionOutputArgs } from "./getEmailSuppression";
export const getEmailSuppression: typeof import("./getEmailSuppression").getEmailSuppression = null as any;
export const getEmailSuppressionOutput: typeof import("./getEmailSuppression").getEmailSuppressionOutput = null as any;
utilities.lazyLoad(exports, ["getEmailSuppression","getEmailSuppressionOutput"], () => require("./getEmailSuppression"));

export { GetEmailSuppressionsArgs, GetEmailSuppressionsResult, GetEmailSuppressionsOutputArgs } from "./getEmailSuppressions";
export const getEmailSuppressions: typeof import("./getEmailSuppressions").getEmailSuppressions = null as any;
export const getEmailSuppressionsOutput: typeof import("./getEmailSuppressions").getEmailSuppressionsOutput = null as any;
utilities.lazyLoad(exports, ["getEmailSuppressions","getEmailSuppressionsOutput"], () => require("./getEmailSuppressions"));

export { GetEventsRuleArgs, GetEventsRuleResult, GetEventsRuleOutputArgs } from "./getEventsRule";
export const getEventsRule: typeof import("./getEventsRule").getEventsRule = null as any;
export const getEventsRuleOutput: typeof import("./getEventsRule").getEventsRuleOutput = null as any;
utilities.lazyLoad(exports, ["getEventsRule","getEventsRuleOutput"], () => require("./getEventsRule"));

export { GetEventsRulesArgs, GetEventsRulesResult, GetEventsRulesOutputArgs } from "./getEventsRules";
export const getEventsRules: typeof import("./getEventsRules").getEventsRules = null as any;
export const getEventsRulesOutput: typeof import("./getEventsRules").getEventsRulesOutput = null as any;
utilities.lazyLoad(exports, ["getEventsRules","getEventsRulesOutput"], () => require("./getEventsRules"));

export { GetFileStorageExportSetsArgs, GetFileStorageExportSetsResult, GetFileStorageExportSetsOutputArgs } from "./getFileStorageExportSets";
export const getFileStorageExportSets: typeof import("./getFileStorageExportSets").getFileStorageExportSets = null as any;
export const getFileStorageExportSetsOutput: typeof import("./getFileStorageExportSets").getFileStorageExportSetsOutput = null as any;
utilities.lazyLoad(exports, ["getFileStorageExportSets","getFileStorageExportSetsOutput"], () => require("./getFileStorageExportSets"));

export { GetFileStorageExportsArgs, GetFileStorageExportsResult, GetFileStorageExportsOutputArgs } from "./getFileStorageExports";
export const getFileStorageExports: typeof import("./getFileStorageExports").getFileStorageExports = null as any;
export const getFileStorageExportsOutput: typeof import("./getFileStorageExports").getFileStorageExportsOutput = null as any;
utilities.lazyLoad(exports, ["getFileStorageExports","getFileStorageExportsOutput"], () => require("./getFileStorageExports"));

export { GetFileStorageFileSystemsArgs, GetFileStorageFileSystemsResult, GetFileStorageFileSystemsOutputArgs } from "./getFileStorageFileSystems";
export const getFileStorageFileSystems: typeof import("./getFileStorageFileSystems").getFileStorageFileSystems = null as any;
export const getFileStorageFileSystemsOutput: typeof import("./getFileStorageFileSystems").getFileStorageFileSystemsOutput = null as any;
utilities.lazyLoad(exports, ["getFileStorageFileSystems","getFileStorageFileSystemsOutput"], () => require("./getFileStorageFileSystems"));

export { GetFileStorageFilesystemSnapshotPoliciesArgs, GetFileStorageFilesystemSnapshotPoliciesResult, GetFileStorageFilesystemSnapshotPoliciesOutputArgs } from "./getFileStorageFilesystemSnapshotPolicies";
export const getFileStorageFilesystemSnapshotPolicies: typeof import("./getFileStorageFilesystemSnapshotPolicies").getFileStorageFilesystemSnapshotPolicies = null as any;
export const getFileStorageFilesystemSnapshotPoliciesOutput: typeof import("./getFileStorageFilesystemSnapshotPolicies").getFileStorageFilesystemSnapshotPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getFileStorageFilesystemSnapshotPolicies","getFileStorageFilesystemSnapshotPoliciesOutput"], () => require("./getFileStorageFilesystemSnapshotPolicies"));

export { GetFileStorageFilesystemSnapshotPolicyArgs, GetFileStorageFilesystemSnapshotPolicyResult, GetFileStorageFilesystemSnapshotPolicyOutputArgs } from "./getFileStorageFilesystemSnapshotPolicy";
export const getFileStorageFilesystemSnapshotPolicy: typeof import("./getFileStorageFilesystemSnapshotPolicy").getFileStorageFilesystemSnapshotPolicy = null as any;
export const getFileStorageFilesystemSnapshotPolicyOutput: typeof import("./getFileStorageFilesystemSnapshotPolicy").getFileStorageFilesystemSnapshotPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getFileStorageFilesystemSnapshotPolicy","getFileStorageFilesystemSnapshotPolicyOutput"], () => require("./getFileStorageFilesystemSnapshotPolicy"));

export { GetFileStorageMountTargetsArgs, GetFileStorageMountTargetsResult, GetFileStorageMountTargetsOutputArgs } from "./getFileStorageMountTargets";
export const getFileStorageMountTargets: typeof import("./getFileStorageMountTargets").getFileStorageMountTargets = null as any;
export const getFileStorageMountTargetsOutput: typeof import("./getFileStorageMountTargets").getFileStorageMountTargetsOutput = null as any;
utilities.lazyLoad(exports, ["getFileStorageMountTargets","getFileStorageMountTargetsOutput"], () => require("./getFileStorageMountTargets"));

export { GetFileStorageOutboundConnectorArgs, GetFileStorageOutboundConnectorResult, GetFileStorageOutboundConnectorOutputArgs } from "./getFileStorageOutboundConnector";
export const getFileStorageOutboundConnector: typeof import("./getFileStorageOutboundConnector").getFileStorageOutboundConnector = null as any;
export const getFileStorageOutboundConnectorOutput: typeof import("./getFileStorageOutboundConnector").getFileStorageOutboundConnectorOutput = null as any;
utilities.lazyLoad(exports, ["getFileStorageOutboundConnector","getFileStorageOutboundConnectorOutput"], () => require("./getFileStorageOutboundConnector"));

export { GetFileStorageOutboundConnectorsArgs, GetFileStorageOutboundConnectorsResult, GetFileStorageOutboundConnectorsOutputArgs } from "./getFileStorageOutboundConnectors";
export const getFileStorageOutboundConnectors: typeof import("./getFileStorageOutboundConnectors").getFileStorageOutboundConnectors = null as any;
export const getFileStorageOutboundConnectorsOutput: typeof import("./getFileStorageOutboundConnectors").getFileStorageOutboundConnectorsOutput = null as any;
utilities.lazyLoad(exports, ["getFileStorageOutboundConnectors","getFileStorageOutboundConnectorsOutput"], () => require("./getFileStorageOutboundConnectors"));

export { GetFileStorageReplicationArgs, GetFileStorageReplicationResult, GetFileStorageReplicationOutputArgs } from "./getFileStorageReplication";
export const getFileStorageReplication: typeof import("./getFileStorageReplication").getFileStorageReplication = null as any;
export const getFileStorageReplicationOutput: typeof import("./getFileStorageReplication").getFileStorageReplicationOutput = null as any;
utilities.lazyLoad(exports, ["getFileStorageReplication","getFileStorageReplicationOutput"], () => require("./getFileStorageReplication"));

export { GetFileStorageReplicationTargetArgs, GetFileStorageReplicationTargetResult, GetFileStorageReplicationTargetOutputArgs } from "./getFileStorageReplicationTarget";
export const getFileStorageReplicationTarget: typeof import("./getFileStorageReplicationTarget").getFileStorageReplicationTarget = null as any;
export const getFileStorageReplicationTargetOutput: typeof import("./getFileStorageReplicationTarget").getFileStorageReplicationTargetOutput = null as any;
utilities.lazyLoad(exports, ["getFileStorageReplicationTarget","getFileStorageReplicationTargetOutput"], () => require("./getFileStorageReplicationTarget"));

export { GetFileStorageReplicationTargetsArgs, GetFileStorageReplicationTargetsResult, GetFileStorageReplicationTargetsOutputArgs } from "./getFileStorageReplicationTargets";
export const getFileStorageReplicationTargets: typeof import("./getFileStorageReplicationTargets").getFileStorageReplicationTargets = null as any;
export const getFileStorageReplicationTargetsOutput: typeof import("./getFileStorageReplicationTargets").getFileStorageReplicationTargetsOutput = null as any;
utilities.lazyLoad(exports, ["getFileStorageReplicationTargets","getFileStorageReplicationTargetsOutput"], () => require("./getFileStorageReplicationTargets"));

export { GetFileStorageReplicationsArgs, GetFileStorageReplicationsResult, GetFileStorageReplicationsOutputArgs } from "./getFileStorageReplications";
export const getFileStorageReplications: typeof import("./getFileStorageReplications").getFileStorageReplications = null as any;
export const getFileStorageReplicationsOutput: typeof import("./getFileStorageReplications").getFileStorageReplicationsOutput = null as any;
utilities.lazyLoad(exports, ["getFileStorageReplications","getFileStorageReplicationsOutput"], () => require("./getFileStorageReplications"));

export { GetFileStorageSnapshotArgs, GetFileStorageSnapshotResult, GetFileStorageSnapshotOutputArgs } from "./getFileStorageSnapshot";
export const getFileStorageSnapshot: typeof import("./getFileStorageSnapshot").getFileStorageSnapshot = null as any;
export const getFileStorageSnapshotOutput: typeof import("./getFileStorageSnapshot").getFileStorageSnapshotOutput = null as any;
utilities.lazyLoad(exports, ["getFileStorageSnapshot","getFileStorageSnapshotOutput"], () => require("./getFileStorageSnapshot"));

export { GetFileStorageSnapshotsArgs, GetFileStorageSnapshotsResult, GetFileStorageSnapshotsOutputArgs } from "./getFileStorageSnapshots";
export const getFileStorageSnapshots: typeof import("./getFileStorageSnapshots").getFileStorageSnapshots = null as any;
export const getFileStorageSnapshotsOutput: typeof import("./getFileStorageSnapshots").getFileStorageSnapshotsOutput = null as any;
utilities.lazyLoad(exports, ["getFileStorageSnapshots","getFileStorageSnapshotsOutput"], () => require("./getFileStorageSnapshots"));

export { GetFunctionsApplicationArgs, GetFunctionsApplicationResult, GetFunctionsApplicationOutputArgs } from "./getFunctionsApplication";
export const getFunctionsApplication: typeof import("./getFunctionsApplication").getFunctionsApplication = null as any;
export const getFunctionsApplicationOutput: typeof import("./getFunctionsApplication").getFunctionsApplicationOutput = null as any;
utilities.lazyLoad(exports, ["getFunctionsApplication","getFunctionsApplicationOutput"], () => require("./getFunctionsApplication"));

export { GetFunctionsApplicationsArgs, GetFunctionsApplicationsResult, GetFunctionsApplicationsOutputArgs } from "./getFunctionsApplications";
export const getFunctionsApplications: typeof import("./getFunctionsApplications").getFunctionsApplications = null as any;
export const getFunctionsApplicationsOutput: typeof import("./getFunctionsApplications").getFunctionsApplicationsOutput = null as any;
utilities.lazyLoad(exports, ["getFunctionsApplications","getFunctionsApplicationsOutput"], () => require("./getFunctionsApplications"));

export { GetFunctionsFunctionArgs, GetFunctionsFunctionResult, GetFunctionsFunctionOutputArgs } from "./getFunctionsFunction";
export const getFunctionsFunction: typeof import("./getFunctionsFunction").getFunctionsFunction = null as any;
export const getFunctionsFunctionOutput: typeof import("./getFunctionsFunction").getFunctionsFunctionOutput = null as any;
utilities.lazyLoad(exports, ["getFunctionsFunction","getFunctionsFunctionOutput"], () => require("./getFunctionsFunction"));

export { GetFunctionsFunctionsArgs, GetFunctionsFunctionsResult, GetFunctionsFunctionsOutputArgs } from "./getFunctionsFunctions";
export const getFunctionsFunctions: typeof import("./getFunctionsFunctions").getFunctionsFunctions = null as any;
export const getFunctionsFunctionsOutput: typeof import("./getFunctionsFunctions").getFunctionsFunctionsOutput = null as any;
utilities.lazyLoad(exports, ["getFunctionsFunctions","getFunctionsFunctionsOutput"], () => require("./getFunctionsFunctions"));

export { GetFunctionsPbfListingArgs, GetFunctionsPbfListingResult, GetFunctionsPbfListingOutputArgs } from "./getFunctionsPbfListing";
export const getFunctionsPbfListing: typeof import("./getFunctionsPbfListing").getFunctionsPbfListing = null as any;
export const getFunctionsPbfListingOutput: typeof import("./getFunctionsPbfListing").getFunctionsPbfListingOutput = null as any;
utilities.lazyLoad(exports, ["getFunctionsPbfListing","getFunctionsPbfListingOutput"], () => require("./getFunctionsPbfListing"));

export { GetFunctionsPbfListingTriggersArgs, GetFunctionsPbfListingTriggersResult, GetFunctionsPbfListingTriggersOutputArgs } from "./getFunctionsPbfListingTriggers";
export const getFunctionsPbfListingTriggers: typeof import("./getFunctionsPbfListingTriggers").getFunctionsPbfListingTriggers = null as any;
export const getFunctionsPbfListingTriggersOutput: typeof import("./getFunctionsPbfListingTriggers").getFunctionsPbfListingTriggersOutput = null as any;
utilities.lazyLoad(exports, ["getFunctionsPbfListingTriggers","getFunctionsPbfListingTriggersOutput"], () => require("./getFunctionsPbfListingTriggers"));

export { GetFunctionsPbfListingVersionArgs, GetFunctionsPbfListingVersionResult, GetFunctionsPbfListingVersionOutputArgs } from "./getFunctionsPbfListingVersion";
export const getFunctionsPbfListingVersion: typeof import("./getFunctionsPbfListingVersion").getFunctionsPbfListingVersion = null as any;
export const getFunctionsPbfListingVersionOutput: typeof import("./getFunctionsPbfListingVersion").getFunctionsPbfListingVersionOutput = null as any;
utilities.lazyLoad(exports, ["getFunctionsPbfListingVersion","getFunctionsPbfListingVersionOutput"], () => require("./getFunctionsPbfListingVersion"));

export { GetFunctionsPbfListingVersionsArgs, GetFunctionsPbfListingVersionsResult, GetFunctionsPbfListingVersionsOutputArgs } from "./getFunctionsPbfListingVersions";
export const getFunctionsPbfListingVersions: typeof import("./getFunctionsPbfListingVersions").getFunctionsPbfListingVersions = null as any;
export const getFunctionsPbfListingVersionsOutput: typeof import("./getFunctionsPbfListingVersions").getFunctionsPbfListingVersionsOutput = null as any;
utilities.lazyLoad(exports, ["getFunctionsPbfListingVersions","getFunctionsPbfListingVersionsOutput"], () => require("./getFunctionsPbfListingVersions"));

export { GetFunctionsPbfListingsArgs, GetFunctionsPbfListingsResult, GetFunctionsPbfListingsOutputArgs } from "./getFunctionsPbfListings";
export const getFunctionsPbfListings: typeof import("./getFunctionsPbfListings").getFunctionsPbfListings = null as any;
export const getFunctionsPbfListingsOutput: typeof import("./getFunctionsPbfListings").getFunctionsPbfListingsOutput = null as any;
utilities.lazyLoad(exports, ["getFunctionsPbfListings","getFunctionsPbfListingsOutput"], () => require("./getFunctionsPbfListings"));

export { GetFusionAppsFusionEnvironmentArgs, GetFusionAppsFusionEnvironmentResult, GetFusionAppsFusionEnvironmentOutputArgs } from "./getFusionAppsFusionEnvironment";
export const getFusionAppsFusionEnvironment: typeof import("./getFusionAppsFusionEnvironment").getFusionAppsFusionEnvironment = null as any;
export const getFusionAppsFusionEnvironmentOutput: typeof import("./getFusionAppsFusionEnvironment").getFusionAppsFusionEnvironmentOutput = null as any;
utilities.lazyLoad(exports, ["getFusionAppsFusionEnvironment","getFusionAppsFusionEnvironmentOutput"], () => require("./getFusionAppsFusionEnvironment"));

export { GetFusionAppsFusionEnvironmentAdminUserArgs, GetFusionAppsFusionEnvironmentAdminUserResult, GetFusionAppsFusionEnvironmentAdminUserOutputArgs } from "./getFusionAppsFusionEnvironmentAdminUser";
export const getFusionAppsFusionEnvironmentAdminUser: typeof import("./getFusionAppsFusionEnvironmentAdminUser").getFusionAppsFusionEnvironmentAdminUser = null as any;
export const getFusionAppsFusionEnvironmentAdminUserOutput: typeof import("./getFusionAppsFusionEnvironmentAdminUser").getFusionAppsFusionEnvironmentAdminUserOutput = null as any;
utilities.lazyLoad(exports, ["getFusionAppsFusionEnvironmentAdminUser","getFusionAppsFusionEnvironmentAdminUserOutput"], () => require("./getFusionAppsFusionEnvironmentAdminUser"));

export { GetFusionAppsFusionEnvironmentAdminUsersArgs, GetFusionAppsFusionEnvironmentAdminUsersResult, GetFusionAppsFusionEnvironmentAdminUsersOutputArgs } from "./getFusionAppsFusionEnvironmentAdminUsers";
export const getFusionAppsFusionEnvironmentAdminUsers: typeof import("./getFusionAppsFusionEnvironmentAdminUsers").getFusionAppsFusionEnvironmentAdminUsers = null as any;
export const getFusionAppsFusionEnvironmentAdminUsersOutput: typeof import("./getFusionAppsFusionEnvironmentAdminUsers").getFusionAppsFusionEnvironmentAdminUsersOutput = null as any;
utilities.lazyLoad(exports, ["getFusionAppsFusionEnvironmentAdminUsers","getFusionAppsFusionEnvironmentAdminUsersOutput"], () => require("./getFusionAppsFusionEnvironmentAdminUsers"));

export { GetFusionAppsFusionEnvironmentDataMaskingActivitiesArgs, GetFusionAppsFusionEnvironmentDataMaskingActivitiesResult, GetFusionAppsFusionEnvironmentDataMaskingActivitiesOutputArgs } from "./getFusionAppsFusionEnvironmentDataMaskingActivities";
export const getFusionAppsFusionEnvironmentDataMaskingActivities: typeof import("./getFusionAppsFusionEnvironmentDataMaskingActivities").getFusionAppsFusionEnvironmentDataMaskingActivities = null as any;
export const getFusionAppsFusionEnvironmentDataMaskingActivitiesOutput: typeof import("./getFusionAppsFusionEnvironmentDataMaskingActivities").getFusionAppsFusionEnvironmentDataMaskingActivitiesOutput = null as any;
utilities.lazyLoad(exports, ["getFusionAppsFusionEnvironmentDataMaskingActivities","getFusionAppsFusionEnvironmentDataMaskingActivitiesOutput"], () => require("./getFusionAppsFusionEnvironmentDataMaskingActivities"));

export { GetFusionAppsFusionEnvironmentDataMaskingActivityArgs, GetFusionAppsFusionEnvironmentDataMaskingActivityResult, GetFusionAppsFusionEnvironmentDataMaskingActivityOutputArgs } from "./getFusionAppsFusionEnvironmentDataMaskingActivity";
export const getFusionAppsFusionEnvironmentDataMaskingActivity: typeof import("./getFusionAppsFusionEnvironmentDataMaskingActivity").getFusionAppsFusionEnvironmentDataMaskingActivity = null as any;
export const getFusionAppsFusionEnvironmentDataMaskingActivityOutput: typeof import("./getFusionAppsFusionEnvironmentDataMaskingActivity").getFusionAppsFusionEnvironmentDataMaskingActivityOutput = null as any;
utilities.lazyLoad(exports, ["getFusionAppsFusionEnvironmentDataMaskingActivity","getFusionAppsFusionEnvironmentDataMaskingActivityOutput"], () => require("./getFusionAppsFusionEnvironmentDataMaskingActivity"));

export { GetFusionAppsFusionEnvironmentFamiliesArgs, GetFusionAppsFusionEnvironmentFamiliesResult, GetFusionAppsFusionEnvironmentFamiliesOutputArgs } from "./getFusionAppsFusionEnvironmentFamilies";
export const getFusionAppsFusionEnvironmentFamilies: typeof import("./getFusionAppsFusionEnvironmentFamilies").getFusionAppsFusionEnvironmentFamilies = null as any;
export const getFusionAppsFusionEnvironmentFamiliesOutput: typeof import("./getFusionAppsFusionEnvironmentFamilies").getFusionAppsFusionEnvironmentFamiliesOutput = null as any;
utilities.lazyLoad(exports, ["getFusionAppsFusionEnvironmentFamilies","getFusionAppsFusionEnvironmentFamiliesOutput"], () => require("./getFusionAppsFusionEnvironmentFamilies"));

export { GetFusionAppsFusionEnvironmentFamilyArgs, GetFusionAppsFusionEnvironmentFamilyResult, GetFusionAppsFusionEnvironmentFamilyOutputArgs } from "./getFusionAppsFusionEnvironmentFamily";
export const getFusionAppsFusionEnvironmentFamily: typeof import("./getFusionAppsFusionEnvironmentFamily").getFusionAppsFusionEnvironmentFamily = null as any;
export const getFusionAppsFusionEnvironmentFamilyOutput: typeof import("./getFusionAppsFusionEnvironmentFamily").getFusionAppsFusionEnvironmentFamilyOutput = null as any;
utilities.lazyLoad(exports, ["getFusionAppsFusionEnvironmentFamily","getFusionAppsFusionEnvironmentFamilyOutput"], () => require("./getFusionAppsFusionEnvironmentFamily"));

export { GetFusionAppsFusionEnvironmentFamilyLimitsAndUsageArgs, GetFusionAppsFusionEnvironmentFamilyLimitsAndUsageResult, GetFusionAppsFusionEnvironmentFamilyLimitsAndUsageOutputArgs } from "./getFusionAppsFusionEnvironmentFamilyLimitsAndUsage";
export const getFusionAppsFusionEnvironmentFamilyLimitsAndUsage: typeof import("./getFusionAppsFusionEnvironmentFamilyLimitsAndUsage").getFusionAppsFusionEnvironmentFamilyLimitsAndUsage = null as any;
export const getFusionAppsFusionEnvironmentFamilyLimitsAndUsageOutput: typeof import("./getFusionAppsFusionEnvironmentFamilyLimitsAndUsage").getFusionAppsFusionEnvironmentFamilyLimitsAndUsageOutput = null as any;
utilities.lazyLoad(exports, ["getFusionAppsFusionEnvironmentFamilyLimitsAndUsage","getFusionAppsFusionEnvironmentFamilyLimitsAndUsageOutput"], () => require("./getFusionAppsFusionEnvironmentFamilyLimitsAndUsage"));

export { GetFusionAppsFusionEnvironmentFamilySubscriptionDetailArgs, GetFusionAppsFusionEnvironmentFamilySubscriptionDetailResult, GetFusionAppsFusionEnvironmentFamilySubscriptionDetailOutputArgs } from "./getFusionAppsFusionEnvironmentFamilySubscriptionDetail";
export const getFusionAppsFusionEnvironmentFamilySubscriptionDetail: typeof import("./getFusionAppsFusionEnvironmentFamilySubscriptionDetail").getFusionAppsFusionEnvironmentFamilySubscriptionDetail = null as any;
export const getFusionAppsFusionEnvironmentFamilySubscriptionDetailOutput: typeof import("./getFusionAppsFusionEnvironmentFamilySubscriptionDetail").getFusionAppsFusionEnvironmentFamilySubscriptionDetailOutput = null as any;
utilities.lazyLoad(exports, ["getFusionAppsFusionEnvironmentFamilySubscriptionDetail","getFusionAppsFusionEnvironmentFamilySubscriptionDetailOutput"], () => require("./getFusionAppsFusionEnvironmentFamilySubscriptionDetail"));

export { GetFusionAppsFusionEnvironmentRefreshActivitiesArgs, GetFusionAppsFusionEnvironmentRefreshActivitiesResult, GetFusionAppsFusionEnvironmentRefreshActivitiesOutputArgs } from "./getFusionAppsFusionEnvironmentRefreshActivities";
export const getFusionAppsFusionEnvironmentRefreshActivities: typeof import("./getFusionAppsFusionEnvironmentRefreshActivities").getFusionAppsFusionEnvironmentRefreshActivities = null as any;
export const getFusionAppsFusionEnvironmentRefreshActivitiesOutput: typeof import("./getFusionAppsFusionEnvironmentRefreshActivities").getFusionAppsFusionEnvironmentRefreshActivitiesOutput = null as any;
utilities.lazyLoad(exports, ["getFusionAppsFusionEnvironmentRefreshActivities","getFusionAppsFusionEnvironmentRefreshActivitiesOutput"], () => require("./getFusionAppsFusionEnvironmentRefreshActivities"));

export { GetFusionAppsFusionEnvironmentRefreshActivityArgs, GetFusionAppsFusionEnvironmentRefreshActivityResult, GetFusionAppsFusionEnvironmentRefreshActivityOutputArgs } from "./getFusionAppsFusionEnvironmentRefreshActivity";
export const getFusionAppsFusionEnvironmentRefreshActivity: typeof import("./getFusionAppsFusionEnvironmentRefreshActivity").getFusionAppsFusionEnvironmentRefreshActivity = null as any;
export const getFusionAppsFusionEnvironmentRefreshActivityOutput: typeof import("./getFusionAppsFusionEnvironmentRefreshActivity").getFusionAppsFusionEnvironmentRefreshActivityOutput = null as any;
utilities.lazyLoad(exports, ["getFusionAppsFusionEnvironmentRefreshActivity","getFusionAppsFusionEnvironmentRefreshActivityOutput"], () => require("./getFusionAppsFusionEnvironmentRefreshActivity"));

export { GetFusionAppsFusionEnvironmentScheduledActivitiesArgs, GetFusionAppsFusionEnvironmentScheduledActivitiesResult, GetFusionAppsFusionEnvironmentScheduledActivitiesOutputArgs } from "./getFusionAppsFusionEnvironmentScheduledActivities";
export const getFusionAppsFusionEnvironmentScheduledActivities: typeof import("./getFusionAppsFusionEnvironmentScheduledActivities").getFusionAppsFusionEnvironmentScheduledActivities = null as any;
export const getFusionAppsFusionEnvironmentScheduledActivitiesOutput: typeof import("./getFusionAppsFusionEnvironmentScheduledActivities").getFusionAppsFusionEnvironmentScheduledActivitiesOutput = null as any;
utilities.lazyLoad(exports, ["getFusionAppsFusionEnvironmentScheduledActivities","getFusionAppsFusionEnvironmentScheduledActivitiesOutput"], () => require("./getFusionAppsFusionEnvironmentScheduledActivities"));

export { GetFusionAppsFusionEnvironmentScheduledActivityArgs, GetFusionAppsFusionEnvironmentScheduledActivityResult, GetFusionAppsFusionEnvironmentScheduledActivityOutputArgs } from "./getFusionAppsFusionEnvironmentScheduledActivity";
export const getFusionAppsFusionEnvironmentScheduledActivity: typeof import("./getFusionAppsFusionEnvironmentScheduledActivity").getFusionAppsFusionEnvironmentScheduledActivity = null as any;
export const getFusionAppsFusionEnvironmentScheduledActivityOutput: typeof import("./getFusionAppsFusionEnvironmentScheduledActivity").getFusionAppsFusionEnvironmentScheduledActivityOutput = null as any;
utilities.lazyLoad(exports, ["getFusionAppsFusionEnvironmentScheduledActivity","getFusionAppsFusionEnvironmentScheduledActivityOutput"], () => require("./getFusionAppsFusionEnvironmentScheduledActivity"));

export { GetFusionAppsFusionEnvironmentServiceAttachmentArgs, GetFusionAppsFusionEnvironmentServiceAttachmentResult, GetFusionAppsFusionEnvironmentServiceAttachmentOutputArgs } from "./getFusionAppsFusionEnvironmentServiceAttachment";
export const getFusionAppsFusionEnvironmentServiceAttachment: typeof import("./getFusionAppsFusionEnvironmentServiceAttachment").getFusionAppsFusionEnvironmentServiceAttachment = null as any;
export const getFusionAppsFusionEnvironmentServiceAttachmentOutput: typeof import("./getFusionAppsFusionEnvironmentServiceAttachment").getFusionAppsFusionEnvironmentServiceAttachmentOutput = null as any;
utilities.lazyLoad(exports, ["getFusionAppsFusionEnvironmentServiceAttachment","getFusionAppsFusionEnvironmentServiceAttachmentOutput"], () => require("./getFusionAppsFusionEnvironmentServiceAttachment"));

export { GetFusionAppsFusionEnvironmentServiceAttachmentsArgs, GetFusionAppsFusionEnvironmentServiceAttachmentsResult, GetFusionAppsFusionEnvironmentServiceAttachmentsOutputArgs } from "./getFusionAppsFusionEnvironmentServiceAttachments";
export const getFusionAppsFusionEnvironmentServiceAttachments: typeof import("./getFusionAppsFusionEnvironmentServiceAttachments").getFusionAppsFusionEnvironmentServiceAttachments = null as any;
export const getFusionAppsFusionEnvironmentServiceAttachmentsOutput: typeof import("./getFusionAppsFusionEnvironmentServiceAttachments").getFusionAppsFusionEnvironmentServiceAttachmentsOutput = null as any;
utilities.lazyLoad(exports, ["getFusionAppsFusionEnvironmentServiceAttachments","getFusionAppsFusionEnvironmentServiceAttachmentsOutput"], () => require("./getFusionAppsFusionEnvironmentServiceAttachments"));

export { GetFusionAppsFusionEnvironmentStatusArgs, GetFusionAppsFusionEnvironmentStatusResult, GetFusionAppsFusionEnvironmentStatusOutputArgs } from "./getFusionAppsFusionEnvironmentStatus";
export const getFusionAppsFusionEnvironmentStatus: typeof import("./getFusionAppsFusionEnvironmentStatus").getFusionAppsFusionEnvironmentStatus = null as any;
export const getFusionAppsFusionEnvironmentStatusOutput: typeof import("./getFusionAppsFusionEnvironmentStatus").getFusionAppsFusionEnvironmentStatusOutput = null as any;
utilities.lazyLoad(exports, ["getFusionAppsFusionEnvironmentStatus","getFusionAppsFusionEnvironmentStatusOutput"], () => require("./getFusionAppsFusionEnvironmentStatus"));

export { GetFusionAppsFusionEnvironmentTimeAvailableForRefreshArgs, GetFusionAppsFusionEnvironmentTimeAvailableForRefreshResult, GetFusionAppsFusionEnvironmentTimeAvailableForRefreshOutputArgs } from "./getFusionAppsFusionEnvironmentTimeAvailableForRefresh";
export const getFusionAppsFusionEnvironmentTimeAvailableForRefresh: typeof import("./getFusionAppsFusionEnvironmentTimeAvailableForRefresh").getFusionAppsFusionEnvironmentTimeAvailableForRefresh = null as any;
export const getFusionAppsFusionEnvironmentTimeAvailableForRefreshOutput: typeof import("./getFusionAppsFusionEnvironmentTimeAvailableForRefresh").getFusionAppsFusionEnvironmentTimeAvailableForRefreshOutput = null as any;
utilities.lazyLoad(exports, ["getFusionAppsFusionEnvironmentTimeAvailableForRefresh","getFusionAppsFusionEnvironmentTimeAvailableForRefreshOutput"], () => require("./getFusionAppsFusionEnvironmentTimeAvailableForRefresh"));

export { GetFusionAppsFusionEnvironmentTimeAvailableForRefreshsArgs, GetFusionAppsFusionEnvironmentTimeAvailableForRefreshsResult, GetFusionAppsFusionEnvironmentTimeAvailableForRefreshsOutputArgs } from "./getFusionAppsFusionEnvironmentTimeAvailableForRefreshs";
export const getFusionAppsFusionEnvironmentTimeAvailableForRefreshs: typeof import("./getFusionAppsFusionEnvironmentTimeAvailableForRefreshs").getFusionAppsFusionEnvironmentTimeAvailableForRefreshs = null as any;
export const getFusionAppsFusionEnvironmentTimeAvailableForRefreshsOutput: typeof import("./getFusionAppsFusionEnvironmentTimeAvailableForRefreshs").getFusionAppsFusionEnvironmentTimeAvailableForRefreshsOutput = null as any;
utilities.lazyLoad(exports, ["getFusionAppsFusionEnvironmentTimeAvailableForRefreshs","getFusionAppsFusionEnvironmentTimeAvailableForRefreshsOutput"], () => require("./getFusionAppsFusionEnvironmentTimeAvailableForRefreshs"));

export { GetFusionAppsFusionEnvironmentsArgs, GetFusionAppsFusionEnvironmentsResult, GetFusionAppsFusionEnvironmentsOutputArgs } from "./getFusionAppsFusionEnvironments";
export const getFusionAppsFusionEnvironments: typeof import("./getFusionAppsFusionEnvironments").getFusionAppsFusionEnvironments = null as any;
export const getFusionAppsFusionEnvironmentsOutput: typeof import("./getFusionAppsFusionEnvironments").getFusionAppsFusionEnvironmentsOutput = null as any;
utilities.lazyLoad(exports, ["getFusionAppsFusionEnvironments","getFusionAppsFusionEnvironmentsOutput"], () => require("./getFusionAppsFusionEnvironments"));

export { GetGenerativeAiDedicatedAiClusterArgs, GetGenerativeAiDedicatedAiClusterResult, GetGenerativeAiDedicatedAiClusterOutputArgs } from "./getGenerativeAiDedicatedAiCluster";
export const getGenerativeAiDedicatedAiCluster: typeof import("./getGenerativeAiDedicatedAiCluster").getGenerativeAiDedicatedAiCluster = null as any;
export const getGenerativeAiDedicatedAiClusterOutput: typeof import("./getGenerativeAiDedicatedAiCluster").getGenerativeAiDedicatedAiClusterOutput = null as any;
utilities.lazyLoad(exports, ["getGenerativeAiDedicatedAiCluster","getGenerativeAiDedicatedAiClusterOutput"], () => require("./getGenerativeAiDedicatedAiCluster"));

export { GetGenerativeAiDedicatedAiClustersArgs, GetGenerativeAiDedicatedAiClustersResult, GetGenerativeAiDedicatedAiClustersOutputArgs } from "./getGenerativeAiDedicatedAiClusters";
export const getGenerativeAiDedicatedAiClusters: typeof import("./getGenerativeAiDedicatedAiClusters").getGenerativeAiDedicatedAiClusters = null as any;
export const getGenerativeAiDedicatedAiClustersOutput: typeof import("./getGenerativeAiDedicatedAiClusters").getGenerativeAiDedicatedAiClustersOutput = null as any;
utilities.lazyLoad(exports, ["getGenerativeAiDedicatedAiClusters","getGenerativeAiDedicatedAiClustersOutput"], () => require("./getGenerativeAiDedicatedAiClusters"));

export { GetGenerativeAiEndpointArgs, GetGenerativeAiEndpointResult, GetGenerativeAiEndpointOutputArgs } from "./getGenerativeAiEndpoint";
export const getGenerativeAiEndpoint: typeof import("./getGenerativeAiEndpoint").getGenerativeAiEndpoint = null as any;
export const getGenerativeAiEndpointOutput: typeof import("./getGenerativeAiEndpoint").getGenerativeAiEndpointOutput = null as any;
utilities.lazyLoad(exports, ["getGenerativeAiEndpoint","getGenerativeAiEndpointOutput"], () => require("./getGenerativeAiEndpoint"));

export { GetGenerativeAiEndpointsArgs, GetGenerativeAiEndpointsResult, GetGenerativeAiEndpointsOutputArgs } from "./getGenerativeAiEndpoints";
export const getGenerativeAiEndpoints: typeof import("./getGenerativeAiEndpoints").getGenerativeAiEndpoints = null as any;
export const getGenerativeAiEndpointsOutput: typeof import("./getGenerativeAiEndpoints").getGenerativeAiEndpointsOutput = null as any;
utilities.lazyLoad(exports, ["getGenerativeAiEndpoints","getGenerativeAiEndpointsOutput"], () => require("./getGenerativeAiEndpoints"));

export { GetGenerativeAiModelArgs, GetGenerativeAiModelResult, GetGenerativeAiModelOutputArgs } from "./getGenerativeAiModel";
export const getGenerativeAiModel: typeof import("./getGenerativeAiModel").getGenerativeAiModel = null as any;
export const getGenerativeAiModelOutput: typeof import("./getGenerativeAiModel").getGenerativeAiModelOutput = null as any;
utilities.lazyLoad(exports, ["getGenerativeAiModel","getGenerativeAiModelOutput"], () => require("./getGenerativeAiModel"));

export { GetGenerativeAiModelsArgs, GetGenerativeAiModelsResult, GetGenerativeAiModelsOutputArgs } from "./getGenerativeAiModels";
export const getGenerativeAiModels: typeof import("./getGenerativeAiModels").getGenerativeAiModels = null as any;
export const getGenerativeAiModelsOutput: typeof import("./getGenerativeAiModels").getGenerativeAiModelsOutput = null as any;
utilities.lazyLoad(exports, ["getGenerativeAiModels","getGenerativeAiModelsOutput"], () => require("./getGenerativeAiModels"));

export { GetGenericArtifactsContentArtifactByPathArgs, GetGenericArtifactsContentArtifactByPathResult, GetGenericArtifactsContentArtifactByPathOutputArgs } from "./getGenericArtifactsContentArtifactByPath";
export const getGenericArtifactsContentArtifactByPath: typeof import("./getGenericArtifactsContentArtifactByPath").getGenericArtifactsContentArtifactByPath = null as any;
export const getGenericArtifactsContentArtifactByPathOutput: typeof import("./getGenericArtifactsContentArtifactByPath").getGenericArtifactsContentArtifactByPathOutput = null as any;
utilities.lazyLoad(exports, ["getGenericArtifactsContentArtifactByPath","getGenericArtifactsContentArtifactByPathOutput"], () => require("./getGenericArtifactsContentArtifactByPath"));

export { GetGenericArtifactsContentGenericArtifactsContentArgs, GetGenericArtifactsContentGenericArtifactsContentResult, GetGenericArtifactsContentGenericArtifactsContentOutputArgs } from "./getGenericArtifactsContentGenericArtifactsContent";
export const getGenericArtifactsContentGenericArtifactsContent: typeof import("./getGenericArtifactsContentGenericArtifactsContent").getGenericArtifactsContentGenericArtifactsContent = null as any;
export const getGenericArtifactsContentGenericArtifactsContentOutput: typeof import("./getGenericArtifactsContentGenericArtifactsContent").getGenericArtifactsContentGenericArtifactsContentOutput = null as any;
utilities.lazyLoad(exports, ["getGenericArtifactsContentGenericArtifactsContent","getGenericArtifactsContentGenericArtifactsContentOutput"], () => require("./getGenericArtifactsContentGenericArtifactsContent"));

export { GetGoldenGateConnectionArgs, GetGoldenGateConnectionResult, GetGoldenGateConnectionOutputArgs } from "./getGoldenGateConnection";
export const getGoldenGateConnection: typeof import("./getGoldenGateConnection").getGoldenGateConnection = null as any;
export const getGoldenGateConnectionOutput: typeof import("./getGoldenGateConnection").getGoldenGateConnectionOutput = null as any;
utilities.lazyLoad(exports, ["getGoldenGateConnection","getGoldenGateConnectionOutput"], () => require("./getGoldenGateConnection"));

export { GetGoldenGateConnectionAssignmentArgs, GetGoldenGateConnectionAssignmentResult, GetGoldenGateConnectionAssignmentOutputArgs } from "./getGoldenGateConnectionAssignment";
export const getGoldenGateConnectionAssignment: typeof import("./getGoldenGateConnectionAssignment").getGoldenGateConnectionAssignment = null as any;
export const getGoldenGateConnectionAssignmentOutput: typeof import("./getGoldenGateConnectionAssignment").getGoldenGateConnectionAssignmentOutput = null as any;
utilities.lazyLoad(exports, ["getGoldenGateConnectionAssignment","getGoldenGateConnectionAssignmentOutput"], () => require("./getGoldenGateConnectionAssignment"));

export { GetGoldenGateConnectionAssignmentsArgs, GetGoldenGateConnectionAssignmentsResult, GetGoldenGateConnectionAssignmentsOutputArgs } from "./getGoldenGateConnectionAssignments";
export const getGoldenGateConnectionAssignments: typeof import("./getGoldenGateConnectionAssignments").getGoldenGateConnectionAssignments = null as any;
export const getGoldenGateConnectionAssignmentsOutput: typeof import("./getGoldenGateConnectionAssignments").getGoldenGateConnectionAssignmentsOutput = null as any;
utilities.lazyLoad(exports, ["getGoldenGateConnectionAssignments","getGoldenGateConnectionAssignmentsOutput"], () => require("./getGoldenGateConnectionAssignments"));

export { GetGoldenGateConnectionsArgs, GetGoldenGateConnectionsResult, GetGoldenGateConnectionsOutputArgs } from "./getGoldenGateConnections";
export const getGoldenGateConnections: typeof import("./getGoldenGateConnections").getGoldenGateConnections = null as any;
export const getGoldenGateConnectionsOutput: typeof import("./getGoldenGateConnections").getGoldenGateConnectionsOutput = null as any;
utilities.lazyLoad(exports, ["getGoldenGateConnections","getGoldenGateConnectionsOutput"], () => require("./getGoldenGateConnections"));

export { GetGoldenGateDatabaseRegistrationArgs, GetGoldenGateDatabaseRegistrationResult, GetGoldenGateDatabaseRegistrationOutputArgs } from "./getGoldenGateDatabaseRegistration";
export const getGoldenGateDatabaseRegistration: typeof import("./getGoldenGateDatabaseRegistration").getGoldenGateDatabaseRegistration = null as any;
export const getGoldenGateDatabaseRegistrationOutput: typeof import("./getGoldenGateDatabaseRegistration").getGoldenGateDatabaseRegistrationOutput = null as any;
utilities.lazyLoad(exports, ["getGoldenGateDatabaseRegistration","getGoldenGateDatabaseRegistrationOutput"], () => require("./getGoldenGateDatabaseRegistration"));

export { GetGoldenGateDatabaseRegistrationsArgs, GetGoldenGateDatabaseRegistrationsResult, GetGoldenGateDatabaseRegistrationsOutputArgs } from "./getGoldenGateDatabaseRegistrations";
export const getGoldenGateDatabaseRegistrations: typeof import("./getGoldenGateDatabaseRegistrations").getGoldenGateDatabaseRegistrations = null as any;
export const getGoldenGateDatabaseRegistrationsOutput: typeof import("./getGoldenGateDatabaseRegistrations").getGoldenGateDatabaseRegistrationsOutput = null as any;
utilities.lazyLoad(exports, ["getGoldenGateDatabaseRegistrations","getGoldenGateDatabaseRegistrationsOutput"], () => require("./getGoldenGateDatabaseRegistrations"));

export { GetGoldenGateDeploymentArgs, GetGoldenGateDeploymentResult, GetGoldenGateDeploymentOutputArgs } from "./getGoldenGateDeployment";
export const getGoldenGateDeployment: typeof import("./getGoldenGateDeployment").getGoldenGateDeployment = null as any;
export const getGoldenGateDeploymentOutput: typeof import("./getGoldenGateDeployment").getGoldenGateDeploymentOutput = null as any;
utilities.lazyLoad(exports, ["getGoldenGateDeployment","getGoldenGateDeploymentOutput"], () => require("./getGoldenGateDeployment"));

export { GetGoldenGateDeploymentBackupArgs, GetGoldenGateDeploymentBackupResult, GetGoldenGateDeploymentBackupOutputArgs } from "./getGoldenGateDeploymentBackup";
export const getGoldenGateDeploymentBackup: typeof import("./getGoldenGateDeploymentBackup").getGoldenGateDeploymentBackup = null as any;
export const getGoldenGateDeploymentBackupOutput: typeof import("./getGoldenGateDeploymentBackup").getGoldenGateDeploymentBackupOutput = null as any;
utilities.lazyLoad(exports, ["getGoldenGateDeploymentBackup","getGoldenGateDeploymentBackupOutput"], () => require("./getGoldenGateDeploymentBackup"));

export { GetGoldenGateDeploymentBackupsArgs, GetGoldenGateDeploymentBackupsResult, GetGoldenGateDeploymentBackupsOutputArgs } from "./getGoldenGateDeploymentBackups";
export const getGoldenGateDeploymentBackups: typeof import("./getGoldenGateDeploymentBackups").getGoldenGateDeploymentBackups = null as any;
export const getGoldenGateDeploymentBackupsOutput: typeof import("./getGoldenGateDeploymentBackups").getGoldenGateDeploymentBackupsOutput = null as any;
utilities.lazyLoad(exports, ["getGoldenGateDeploymentBackups","getGoldenGateDeploymentBackupsOutput"], () => require("./getGoldenGateDeploymentBackups"));

export { GetGoldenGateDeploymentCertificateArgs, GetGoldenGateDeploymentCertificateResult, GetGoldenGateDeploymentCertificateOutputArgs } from "./getGoldenGateDeploymentCertificate";
export const getGoldenGateDeploymentCertificate: typeof import("./getGoldenGateDeploymentCertificate").getGoldenGateDeploymentCertificate = null as any;
export const getGoldenGateDeploymentCertificateOutput: typeof import("./getGoldenGateDeploymentCertificate").getGoldenGateDeploymentCertificateOutput = null as any;
utilities.lazyLoad(exports, ["getGoldenGateDeploymentCertificate","getGoldenGateDeploymentCertificateOutput"], () => require("./getGoldenGateDeploymentCertificate"));

export { GetGoldenGateDeploymentCertificatesArgs, GetGoldenGateDeploymentCertificatesResult, GetGoldenGateDeploymentCertificatesOutputArgs } from "./getGoldenGateDeploymentCertificates";
export const getGoldenGateDeploymentCertificates: typeof import("./getGoldenGateDeploymentCertificates").getGoldenGateDeploymentCertificates = null as any;
export const getGoldenGateDeploymentCertificatesOutput: typeof import("./getGoldenGateDeploymentCertificates").getGoldenGateDeploymentCertificatesOutput = null as any;
utilities.lazyLoad(exports, ["getGoldenGateDeploymentCertificates","getGoldenGateDeploymentCertificatesOutput"], () => require("./getGoldenGateDeploymentCertificates"));

export { GetGoldenGateDeploymentTypeArgs, GetGoldenGateDeploymentTypeResult, GetGoldenGateDeploymentTypeOutputArgs } from "./getGoldenGateDeploymentType";
export const getGoldenGateDeploymentType: typeof import("./getGoldenGateDeploymentType").getGoldenGateDeploymentType = null as any;
export const getGoldenGateDeploymentTypeOutput: typeof import("./getGoldenGateDeploymentType").getGoldenGateDeploymentTypeOutput = null as any;
utilities.lazyLoad(exports, ["getGoldenGateDeploymentType","getGoldenGateDeploymentTypeOutput"], () => require("./getGoldenGateDeploymentType"));

export { GetGoldenGateDeploymentTypesArgs, GetGoldenGateDeploymentTypesResult, GetGoldenGateDeploymentTypesOutputArgs } from "./getGoldenGateDeploymentTypes";
export const getGoldenGateDeploymentTypes: typeof import("./getGoldenGateDeploymentTypes").getGoldenGateDeploymentTypes = null as any;
export const getGoldenGateDeploymentTypesOutput: typeof import("./getGoldenGateDeploymentTypes").getGoldenGateDeploymentTypesOutput = null as any;
utilities.lazyLoad(exports, ["getGoldenGateDeploymentTypes","getGoldenGateDeploymentTypesOutput"], () => require("./getGoldenGateDeploymentTypes"));

export { GetGoldenGateDeploymentUpgradeArgs, GetGoldenGateDeploymentUpgradeResult, GetGoldenGateDeploymentUpgradeOutputArgs } from "./getGoldenGateDeploymentUpgrade";
export const getGoldenGateDeploymentUpgrade: typeof import("./getGoldenGateDeploymentUpgrade").getGoldenGateDeploymentUpgrade = null as any;
export const getGoldenGateDeploymentUpgradeOutput: typeof import("./getGoldenGateDeploymentUpgrade").getGoldenGateDeploymentUpgradeOutput = null as any;
utilities.lazyLoad(exports, ["getGoldenGateDeploymentUpgrade","getGoldenGateDeploymentUpgradeOutput"], () => require("./getGoldenGateDeploymentUpgrade"));

export { GetGoldenGateDeploymentUpgradesArgs, GetGoldenGateDeploymentUpgradesResult, GetGoldenGateDeploymentUpgradesOutputArgs } from "./getGoldenGateDeploymentUpgrades";
export const getGoldenGateDeploymentUpgrades: typeof import("./getGoldenGateDeploymentUpgrades").getGoldenGateDeploymentUpgrades = null as any;
export const getGoldenGateDeploymentUpgradesOutput: typeof import("./getGoldenGateDeploymentUpgrades").getGoldenGateDeploymentUpgradesOutput = null as any;
utilities.lazyLoad(exports, ["getGoldenGateDeploymentUpgrades","getGoldenGateDeploymentUpgradesOutput"], () => require("./getGoldenGateDeploymentUpgrades"));

export { GetGoldenGateDeploymentVersionsArgs, GetGoldenGateDeploymentVersionsResult, GetGoldenGateDeploymentVersionsOutputArgs } from "./getGoldenGateDeploymentVersions";
export const getGoldenGateDeploymentVersions: typeof import("./getGoldenGateDeploymentVersions").getGoldenGateDeploymentVersions = null as any;
export const getGoldenGateDeploymentVersionsOutput: typeof import("./getGoldenGateDeploymentVersions").getGoldenGateDeploymentVersionsOutput = null as any;
utilities.lazyLoad(exports, ["getGoldenGateDeploymentVersions","getGoldenGateDeploymentVersionsOutput"], () => require("./getGoldenGateDeploymentVersions"));

export { GetGoldenGateDeploymentsArgs, GetGoldenGateDeploymentsResult, GetGoldenGateDeploymentsOutputArgs } from "./getGoldenGateDeployments";
export const getGoldenGateDeployments: typeof import("./getGoldenGateDeployments").getGoldenGateDeployments = null as any;
export const getGoldenGateDeploymentsOutput: typeof import("./getGoldenGateDeployments").getGoldenGateDeploymentsOutput = null as any;
utilities.lazyLoad(exports, ["getGoldenGateDeployments","getGoldenGateDeploymentsOutput"], () => require("./getGoldenGateDeployments"));

export { GetGoldenGateMessageArgs, GetGoldenGateMessageResult, GetGoldenGateMessageOutputArgs } from "./getGoldenGateMessage";
export const getGoldenGateMessage: typeof import("./getGoldenGateMessage").getGoldenGateMessage = null as any;
export const getGoldenGateMessageOutput: typeof import("./getGoldenGateMessage").getGoldenGateMessageOutput = null as any;
utilities.lazyLoad(exports, ["getGoldenGateMessage","getGoldenGateMessageOutput"], () => require("./getGoldenGateMessage"));

export { GetGoldenGateMessagesArgs, GetGoldenGateMessagesResult, GetGoldenGateMessagesOutputArgs } from "./getGoldenGateMessages";
export const getGoldenGateMessages: typeof import("./getGoldenGateMessages").getGoldenGateMessages = null as any;
export const getGoldenGateMessagesOutput: typeof import("./getGoldenGateMessages").getGoldenGateMessagesOutput = null as any;
utilities.lazyLoad(exports, ["getGoldenGateMessages","getGoldenGateMessagesOutput"], () => require("./getGoldenGateMessages"));

export { GetGoldenGateTrailFileArgs, GetGoldenGateTrailFileResult, GetGoldenGateTrailFileOutputArgs } from "./getGoldenGateTrailFile";
export const getGoldenGateTrailFile: typeof import("./getGoldenGateTrailFile").getGoldenGateTrailFile = null as any;
export const getGoldenGateTrailFileOutput: typeof import("./getGoldenGateTrailFile").getGoldenGateTrailFileOutput = null as any;
utilities.lazyLoad(exports, ["getGoldenGateTrailFile","getGoldenGateTrailFileOutput"], () => require("./getGoldenGateTrailFile"));

export { GetGoldenGateTrailFilesArgs, GetGoldenGateTrailFilesResult, GetGoldenGateTrailFilesOutputArgs } from "./getGoldenGateTrailFiles";
export const getGoldenGateTrailFiles: typeof import("./getGoldenGateTrailFiles").getGoldenGateTrailFiles = null as any;
export const getGoldenGateTrailFilesOutput: typeof import("./getGoldenGateTrailFiles").getGoldenGateTrailFilesOutput = null as any;
utilities.lazyLoad(exports, ["getGoldenGateTrailFiles","getGoldenGateTrailFilesOutput"], () => require("./getGoldenGateTrailFiles"));

export { GetGoldenGateTrailSequenceArgs, GetGoldenGateTrailSequenceResult, GetGoldenGateTrailSequenceOutputArgs } from "./getGoldenGateTrailSequence";
export const getGoldenGateTrailSequence: typeof import("./getGoldenGateTrailSequence").getGoldenGateTrailSequence = null as any;
export const getGoldenGateTrailSequenceOutput: typeof import("./getGoldenGateTrailSequence").getGoldenGateTrailSequenceOutput = null as any;
utilities.lazyLoad(exports, ["getGoldenGateTrailSequence","getGoldenGateTrailSequenceOutput"], () => require("./getGoldenGateTrailSequence"));

export { GetGoldenGateTrailSequencesArgs, GetGoldenGateTrailSequencesResult, GetGoldenGateTrailSequencesOutputArgs } from "./getGoldenGateTrailSequences";
export const getGoldenGateTrailSequences: typeof import("./getGoldenGateTrailSequences").getGoldenGateTrailSequences = null as any;
export const getGoldenGateTrailSequencesOutput: typeof import("./getGoldenGateTrailSequences").getGoldenGateTrailSequencesOutput = null as any;
utilities.lazyLoad(exports, ["getGoldenGateTrailSequences","getGoldenGateTrailSequencesOutput"], () => require("./getGoldenGateTrailSequences"));

export { GetHealthChecksHttpMonitorArgs, GetHealthChecksHttpMonitorResult, GetHealthChecksHttpMonitorOutputArgs } from "./getHealthChecksHttpMonitor";
export const getHealthChecksHttpMonitor: typeof import("./getHealthChecksHttpMonitor").getHealthChecksHttpMonitor = null as any;
export const getHealthChecksHttpMonitorOutput: typeof import("./getHealthChecksHttpMonitor").getHealthChecksHttpMonitorOutput = null as any;
utilities.lazyLoad(exports, ["getHealthChecksHttpMonitor","getHealthChecksHttpMonitorOutput"], () => require("./getHealthChecksHttpMonitor"));

export { GetHealthChecksHttpMonitorsArgs, GetHealthChecksHttpMonitorsResult, GetHealthChecksHttpMonitorsOutputArgs } from "./getHealthChecksHttpMonitors";
export const getHealthChecksHttpMonitors: typeof import("./getHealthChecksHttpMonitors").getHealthChecksHttpMonitors = null as any;
export const getHealthChecksHttpMonitorsOutput: typeof import("./getHealthChecksHttpMonitors").getHealthChecksHttpMonitorsOutput = null as any;
utilities.lazyLoad(exports, ["getHealthChecksHttpMonitors","getHealthChecksHttpMonitorsOutput"], () => require("./getHealthChecksHttpMonitors"));

export { GetHealthChecksHttpProbeResultsArgs, GetHealthChecksHttpProbeResultsResult, GetHealthChecksHttpProbeResultsOutputArgs } from "./getHealthChecksHttpProbeResults";
export const getHealthChecksHttpProbeResults: typeof import("./getHealthChecksHttpProbeResults").getHealthChecksHttpProbeResults = null as any;
export const getHealthChecksHttpProbeResultsOutput: typeof import("./getHealthChecksHttpProbeResults").getHealthChecksHttpProbeResultsOutput = null as any;
utilities.lazyLoad(exports, ["getHealthChecksHttpProbeResults","getHealthChecksHttpProbeResultsOutput"], () => require("./getHealthChecksHttpProbeResults"));

export { GetHealthChecksPingMonitorArgs, GetHealthChecksPingMonitorResult, GetHealthChecksPingMonitorOutputArgs } from "./getHealthChecksPingMonitor";
export const getHealthChecksPingMonitor: typeof import("./getHealthChecksPingMonitor").getHealthChecksPingMonitor = null as any;
export const getHealthChecksPingMonitorOutput: typeof import("./getHealthChecksPingMonitor").getHealthChecksPingMonitorOutput = null as any;
utilities.lazyLoad(exports, ["getHealthChecksPingMonitor","getHealthChecksPingMonitorOutput"], () => require("./getHealthChecksPingMonitor"));

export { GetHealthChecksPingMonitorsArgs, GetHealthChecksPingMonitorsResult, GetHealthChecksPingMonitorsOutputArgs } from "./getHealthChecksPingMonitors";
export const getHealthChecksPingMonitors: typeof import("./getHealthChecksPingMonitors").getHealthChecksPingMonitors = null as any;
export const getHealthChecksPingMonitorsOutput: typeof import("./getHealthChecksPingMonitors").getHealthChecksPingMonitorsOutput = null as any;
utilities.lazyLoad(exports, ["getHealthChecksPingMonitors","getHealthChecksPingMonitorsOutput"], () => require("./getHealthChecksPingMonitors"));

export { GetHealthChecksPingProbeResultsArgs, GetHealthChecksPingProbeResultsResult, GetHealthChecksPingProbeResultsOutputArgs } from "./getHealthChecksPingProbeResults";
export const getHealthChecksPingProbeResults: typeof import("./getHealthChecksPingProbeResults").getHealthChecksPingProbeResults = null as any;
export const getHealthChecksPingProbeResultsOutput: typeof import("./getHealthChecksPingProbeResults").getHealthChecksPingProbeResultsOutput = null as any;
utilities.lazyLoad(exports, ["getHealthChecksPingProbeResults","getHealthChecksPingProbeResultsOutput"], () => require("./getHealthChecksPingProbeResults"));

export { GetHealthChecksVantagePointsArgs, GetHealthChecksVantagePointsResult, GetHealthChecksVantagePointsOutputArgs } from "./getHealthChecksVantagePoints";
export const getHealthChecksVantagePoints: typeof import("./getHealthChecksVantagePoints").getHealthChecksVantagePoints = null as any;
export const getHealthChecksVantagePointsOutput: typeof import("./getHealthChecksVantagePoints").getHealthChecksVantagePointsOutput = null as any;
utilities.lazyLoad(exports, ["getHealthChecksVantagePoints","getHealthChecksVantagePointsOutput"], () => require("./getHealthChecksVantagePoints"));

export { GetIdentityAllowedDomainLicenseTypesArgs, GetIdentityAllowedDomainLicenseTypesResult, GetIdentityAllowedDomainLicenseTypesOutputArgs } from "./getIdentityAllowedDomainLicenseTypes";
export const getIdentityAllowedDomainLicenseTypes: typeof import("./getIdentityAllowedDomainLicenseTypes").getIdentityAllowedDomainLicenseTypes = null as any;
export const getIdentityAllowedDomainLicenseTypesOutput: typeof import("./getIdentityAllowedDomainLicenseTypes").getIdentityAllowedDomainLicenseTypesOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityAllowedDomainLicenseTypes","getIdentityAllowedDomainLicenseTypesOutput"], () => require("./getIdentityAllowedDomainLicenseTypes"));

export { GetIdentityApiKeysArgs, GetIdentityApiKeysResult, GetIdentityApiKeysOutputArgs } from "./getIdentityApiKeys";
export const getIdentityApiKeys: typeof import("./getIdentityApiKeys").getIdentityApiKeys = null as any;
export const getIdentityApiKeysOutput: typeof import("./getIdentityApiKeys").getIdentityApiKeysOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityApiKeys","getIdentityApiKeysOutput"], () => require("./getIdentityApiKeys"));

export { GetIdentityAuthTokensArgs, GetIdentityAuthTokensResult, GetIdentityAuthTokensOutputArgs } from "./getIdentityAuthTokens";
export const getIdentityAuthTokens: typeof import("./getIdentityAuthTokens").getIdentityAuthTokens = null as any;
export const getIdentityAuthTokensOutput: typeof import("./getIdentityAuthTokens").getIdentityAuthTokensOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityAuthTokens","getIdentityAuthTokensOutput"], () => require("./getIdentityAuthTokens"));

export { GetIdentityAuthenticationPolicyArgs, GetIdentityAuthenticationPolicyResult, GetIdentityAuthenticationPolicyOutputArgs } from "./getIdentityAuthenticationPolicy";
export const getIdentityAuthenticationPolicy: typeof import("./getIdentityAuthenticationPolicy").getIdentityAuthenticationPolicy = null as any;
export const getIdentityAuthenticationPolicyOutput: typeof import("./getIdentityAuthenticationPolicy").getIdentityAuthenticationPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityAuthenticationPolicy","getIdentityAuthenticationPolicyOutput"], () => require("./getIdentityAuthenticationPolicy"));

export { GetIdentityAvailabilityDomainArgs, GetIdentityAvailabilityDomainResult, GetIdentityAvailabilityDomainOutputArgs } from "./getIdentityAvailabilityDomain";
export const getIdentityAvailabilityDomain: typeof import("./getIdentityAvailabilityDomain").getIdentityAvailabilityDomain = null as any;
export const getIdentityAvailabilityDomainOutput: typeof import("./getIdentityAvailabilityDomain").getIdentityAvailabilityDomainOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityAvailabilityDomain","getIdentityAvailabilityDomainOutput"], () => require("./getIdentityAvailabilityDomain"));

export { GetIdentityAvailabilityDomainsArgs, GetIdentityAvailabilityDomainsResult, GetIdentityAvailabilityDomainsOutputArgs } from "./getIdentityAvailabilityDomains";
export const getIdentityAvailabilityDomains: typeof import("./getIdentityAvailabilityDomains").getIdentityAvailabilityDomains = null as any;
export const getIdentityAvailabilityDomainsOutput: typeof import("./getIdentityAvailabilityDomains").getIdentityAvailabilityDomainsOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityAvailabilityDomains","getIdentityAvailabilityDomainsOutput"], () => require("./getIdentityAvailabilityDomains"));

export { GetIdentityCompartmentArgs, GetIdentityCompartmentResult, GetIdentityCompartmentOutputArgs } from "./getIdentityCompartment";
export const getIdentityCompartment: typeof import("./getIdentityCompartment").getIdentityCompartment = null as any;
export const getIdentityCompartmentOutput: typeof import("./getIdentityCompartment").getIdentityCompartmentOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityCompartment","getIdentityCompartmentOutput"], () => require("./getIdentityCompartment"));

export { GetIdentityCompartmentsArgs, GetIdentityCompartmentsResult, GetIdentityCompartmentsOutputArgs } from "./getIdentityCompartments";
export const getIdentityCompartments: typeof import("./getIdentityCompartments").getIdentityCompartments = null as any;
export const getIdentityCompartmentsOutput: typeof import("./getIdentityCompartments").getIdentityCompartmentsOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityCompartments","getIdentityCompartmentsOutput"], () => require("./getIdentityCompartments"));

export { GetIdentityCostTrackingTagsArgs, GetIdentityCostTrackingTagsResult, GetIdentityCostTrackingTagsOutputArgs } from "./getIdentityCostTrackingTags";
export const getIdentityCostTrackingTags: typeof import("./getIdentityCostTrackingTags").getIdentityCostTrackingTags = null as any;
export const getIdentityCostTrackingTagsOutput: typeof import("./getIdentityCostTrackingTags").getIdentityCostTrackingTagsOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityCostTrackingTags","getIdentityCostTrackingTagsOutput"], () => require("./getIdentityCostTrackingTags"));

export { GetIdentityCustomerSecretKeysArgs, GetIdentityCustomerSecretKeysResult, GetIdentityCustomerSecretKeysOutputArgs } from "./getIdentityCustomerSecretKeys";
export const getIdentityCustomerSecretKeys: typeof import("./getIdentityCustomerSecretKeys").getIdentityCustomerSecretKeys = null as any;
export const getIdentityCustomerSecretKeysOutput: typeof import("./getIdentityCustomerSecretKeys").getIdentityCustomerSecretKeysOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityCustomerSecretKeys","getIdentityCustomerSecretKeysOutput"], () => require("./getIdentityCustomerSecretKeys"));

export { GetIdentityDbCredentialsArgs, GetIdentityDbCredentialsResult, GetIdentityDbCredentialsOutputArgs } from "./getIdentityDbCredentials";
export const getIdentityDbCredentials: typeof import("./getIdentityDbCredentials").getIdentityDbCredentials = null as any;
export const getIdentityDbCredentialsOutput: typeof import("./getIdentityDbCredentials").getIdentityDbCredentialsOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityDbCredentials","getIdentityDbCredentialsOutput"], () => require("./getIdentityDbCredentials"));

export { GetIdentityDomainArgs, GetIdentityDomainResult, GetIdentityDomainOutputArgs } from "./getIdentityDomain";
export const getIdentityDomain: typeof import("./getIdentityDomain").getIdentityDomain = null as any;
export const getIdentityDomainOutput: typeof import("./getIdentityDomain").getIdentityDomainOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityDomain","getIdentityDomainOutput"], () => require("./getIdentityDomain"));

export { GetIdentityDomainsArgs, GetIdentityDomainsResult, GetIdentityDomainsOutputArgs } from "./getIdentityDomains";
export const getIdentityDomains: typeof import("./getIdentityDomains").getIdentityDomains = null as any;
export const getIdentityDomainsOutput: typeof import("./getIdentityDomains").getIdentityDomainsOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityDomains","getIdentityDomainsOutput"], () => require("./getIdentityDomains"));

export { GetIdentityDomainsAccountMgmtInfoArgs, GetIdentityDomainsAccountMgmtInfoResult, GetIdentityDomainsAccountMgmtInfoOutputArgs } from "./getIdentityDomainsAccountMgmtInfo";
export const getIdentityDomainsAccountMgmtInfo: typeof import("./getIdentityDomainsAccountMgmtInfo").getIdentityDomainsAccountMgmtInfo = null as any;
export const getIdentityDomainsAccountMgmtInfoOutput: typeof import("./getIdentityDomainsAccountMgmtInfo").getIdentityDomainsAccountMgmtInfoOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityDomainsAccountMgmtInfo","getIdentityDomainsAccountMgmtInfoOutput"], () => require("./getIdentityDomainsAccountMgmtInfo"));

export { GetIdentityDomainsAccountMgmtInfosArgs, GetIdentityDomainsAccountMgmtInfosResult, GetIdentityDomainsAccountMgmtInfosOutputArgs } from "./getIdentityDomainsAccountMgmtInfos";
export const getIdentityDomainsAccountMgmtInfos: typeof import("./getIdentityDomainsAccountMgmtInfos").getIdentityDomainsAccountMgmtInfos = null as any;
export const getIdentityDomainsAccountMgmtInfosOutput: typeof import("./getIdentityDomainsAccountMgmtInfos").getIdentityDomainsAccountMgmtInfosOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityDomainsAccountMgmtInfos","getIdentityDomainsAccountMgmtInfosOutput"], () => require("./getIdentityDomainsAccountMgmtInfos"));

export { GetIdentityDomainsAccountRecoverySettingArgs, GetIdentityDomainsAccountRecoverySettingResult, GetIdentityDomainsAccountRecoverySettingOutputArgs } from "./getIdentityDomainsAccountRecoverySetting";
export const getIdentityDomainsAccountRecoverySetting: typeof import("./getIdentityDomainsAccountRecoverySetting").getIdentityDomainsAccountRecoverySetting = null as any;
export const getIdentityDomainsAccountRecoverySettingOutput: typeof import("./getIdentityDomainsAccountRecoverySetting").getIdentityDomainsAccountRecoverySettingOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityDomainsAccountRecoverySetting","getIdentityDomainsAccountRecoverySettingOutput"], () => require("./getIdentityDomainsAccountRecoverySetting"));

export { GetIdentityDomainsAccountRecoverySettingsArgs, GetIdentityDomainsAccountRecoverySettingsResult, GetIdentityDomainsAccountRecoverySettingsOutputArgs } from "./getIdentityDomainsAccountRecoverySettings";
export const getIdentityDomainsAccountRecoverySettings: typeof import("./getIdentityDomainsAccountRecoverySettings").getIdentityDomainsAccountRecoverySettings = null as any;
export const getIdentityDomainsAccountRecoverySettingsOutput: typeof import("./getIdentityDomainsAccountRecoverySettings").getIdentityDomainsAccountRecoverySettingsOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityDomainsAccountRecoverySettings","getIdentityDomainsAccountRecoverySettingsOutput"], () => require("./getIdentityDomainsAccountRecoverySettings"));

export { GetIdentityDomainsApiKeyArgs, GetIdentityDomainsApiKeyResult, GetIdentityDomainsApiKeyOutputArgs } from "./getIdentityDomainsApiKey";
export const getIdentityDomainsApiKey: typeof import("./getIdentityDomainsApiKey").getIdentityDomainsApiKey = null as any;
export const getIdentityDomainsApiKeyOutput: typeof import("./getIdentityDomainsApiKey").getIdentityDomainsApiKeyOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityDomainsApiKey","getIdentityDomainsApiKeyOutput"], () => require("./getIdentityDomainsApiKey"));

export { GetIdentityDomainsApiKeysArgs, GetIdentityDomainsApiKeysResult, GetIdentityDomainsApiKeysOutputArgs } from "./getIdentityDomainsApiKeys";
export const getIdentityDomainsApiKeys: typeof import("./getIdentityDomainsApiKeys").getIdentityDomainsApiKeys = null as any;
export const getIdentityDomainsApiKeysOutput: typeof import("./getIdentityDomainsApiKeys").getIdentityDomainsApiKeysOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityDomainsApiKeys","getIdentityDomainsApiKeysOutput"], () => require("./getIdentityDomainsApiKeys"));

export { GetIdentityDomainsAppArgs, GetIdentityDomainsAppResult, GetIdentityDomainsAppOutputArgs } from "./getIdentityDomainsApp";
export const getIdentityDomainsApp: typeof import("./getIdentityDomainsApp").getIdentityDomainsApp = null as any;
export const getIdentityDomainsAppOutput: typeof import("./getIdentityDomainsApp").getIdentityDomainsAppOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityDomainsApp","getIdentityDomainsAppOutput"], () => require("./getIdentityDomainsApp"));

export { GetIdentityDomainsAppRoleArgs, GetIdentityDomainsAppRoleResult, GetIdentityDomainsAppRoleOutputArgs } from "./getIdentityDomainsAppRole";
export const getIdentityDomainsAppRole: typeof import("./getIdentityDomainsAppRole").getIdentityDomainsAppRole = null as any;
export const getIdentityDomainsAppRoleOutput: typeof import("./getIdentityDomainsAppRole").getIdentityDomainsAppRoleOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityDomainsAppRole","getIdentityDomainsAppRoleOutput"], () => require("./getIdentityDomainsAppRole"));

export { GetIdentityDomainsAppRolesArgs, GetIdentityDomainsAppRolesResult, GetIdentityDomainsAppRolesOutputArgs } from "./getIdentityDomainsAppRoles";
export const getIdentityDomainsAppRoles: typeof import("./getIdentityDomainsAppRoles").getIdentityDomainsAppRoles = null as any;
export const getIdentityDomainsAppRolesOutput: typeof import("./getIdentityDomainsAppRoles").getIdentityDomainsAppRolesOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityDomainsAppRoles","getIdentityDomainsAppRolesOutput"], () => require("./getIdentityDomainsAppRoles"));

export { GetIdentityDomainsApprovalWorkflowArgs, GetIdentityDomainsApprovalWorkflowResult, GetIdentityDomainsApprovalWorkflowOutputArgs } from "./getIdentityDomainsApprovalWorkflow";
export const getIdentityDomainsApprovalWorkflow: typeof import("./getIdentityDomainsApprovalWorkflow").getIdentityDomainsApprovalWorkflow = null as any;
export const getIdentityDomainsApprovalWorkflowOutput: typeof import("./getIdentityDomainsApprovalWorkflow").getIdentityDomainsApprovalWorkflowOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityDomainsApprovalWorkflow","getIdentityDomainsApprovalWorkflowOutput"], () => require("./getIdentityDomainsApprovalWorkflow"));

export { GetIdentityDomainsApprovalWorkflowAssignmentArgs, GetIdentityDomainsApprovalWorkflowAssignmentResult, GetIdentityDomainsApprovalWorkflowAssignmentOutputArgs } from "./getIdentityDomainsApprovalWorkflowAssignment";
export const getIdentityDomainsApprovalWorkflowAssignment: typeof import("./getIdentityDomainsApprovalWorkflowAssignment").getIdentityDomainsApprovalWorkflowAssignment = null as any;
export const getIdentityDomainsApprovalWorkflowAssignmentOutput: typeof import("./getIdentityDomainsApprovalWorkflowAssignment").getIdentityDomainsApprovalWorkflowAssignmentOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityDomainsApprovalWorkflowAssignment","getIdentityDomainsApprovalWorkflowAssignmentOutput"], () => require("./getIdentityDomainsApprovalWorkflowAssignment"));

export { GetIdentityDomainsApprovalWorkflowAssignmentsArgs, GetIdentityDomainsApprovalWorkflowAssignmentsResult, GetIdentityDomainsApprovalWorkflowAssignmentsOutputArgs } from "./getIdentityDomainsApprovalWorkflowAssignments";
export const getIdentityDomainsApprovalWorkflowAssignments: typeof import("./getIdentityDomainsApprovalWorkflowAssignments").getIdentityDomainsApprovalWorkflowAssignments = null as any;
export const getIdentityDomainsApprovalWorkflowAssignmentsOutput: typeof import("./getIdentityDomainsApprovalWorkflowAssignments").getIdentityDomainsApprovalWorkflowAssignmentsOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityDomainsApprovalWorkflowAssignments","getIdentityDomainsApprovalWorkflowAssignmentsOutput"], () => require("./getIdentityDomainsApprovalWorkflowAssignments"));

export { GetIdentityDomainsApprovalWorkflowStepArgs, GetIdentityDomainsApprovalWorkflowStepResult, GetIdentityDomainsApprovalWorkflowStepOutputArgs } from "./getIdentityDomainsApprovalWorkflowStep";
export const getIdentityDomainsApprovalWorkflowStep: typeof import("./getIdentityDomainsApprovalWorkflowStep").getIdentityDomainsApprovalWorkflowStep = null as any;
export const getIdentityDomainsApprovalWorkflowStepOutput: typeof import("./getIdentityDomainsApprovalWorkflowStep").getIdentityDomainsApprovalWorkflowStepOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityDomainsApprovalWorkflowStep","getIdentityDomainsApprovalWorkflowStepOutput"], () => require("./getIdentityDomainsApprovalWorkflowStep"));

export { GetIdentityDomainsApprovalWorkflowStepsArgs, GetIdentityDomainsApprovalWorkflowStepsResult, GetIdentityDomainsApprovalWorkflowStepsOutputArgs } from "./getIdentityDomainsApprovalWorkflowSteps";
export const getIdentityDomainsApprovalWorkflowSteps: typeof import("./getIdentityDomainsApprovalWorkflowSteps").getIdentityDomainsApprovalWorkflowSteps = null as any;
export const getIdentityDomainsApprovalWorkflowStepsOutput: typeof import("./getIdentityDomainsApprovalWorkflowSteps").getIdentityDomainsApprovalWorkflowStepsOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityDomainsApprovalWorkflowSteps","getIdentityDomainsApprovalWorkflowStepsOutput"], () => require("./getIdentityDomainsApprovalWorkflowSteps"));

export { GetIdentityDomainsApprovalWorkflowsArgs, GetIdentityDomainsApprovalWorkflowsResult, GetIdentityDomainsApprovalWorkflowsOutputArgs } from "./getIdentityDomainsApprovalWorkflows";
export const getIdentityDomainsApprovalWorkflows: typeof import("./getIdentityDomainsApprovalWorkflows").getIdentityDomainsApprovalWorkflows = null as any;
export const getIdentityDomainsApprovalWorkflowsOutput: typeof import("./getIdentityDomainsApprovalWorkflows").getIdentityDomainsApprovalWorkflowsOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityDomainsApprovalWorkflows","getIdentityDomainsApprovalWorkflowsOutput"], () => require("./getIdentityDomainsApprovalWorkflows"));

export { GetIdentityDomainsAppsArgs, GetIdentityDomainsAppsResult, GetIdentityDomainsAppsOutputArgs } from "./getIdentityDomainsApps";
export const getIdentityDomainsApps: typeof import("./getIdentityDomainsApps").getIdentityDomainsApps = null as any;
export const getIdentityDomainsAppsOutput: typeof import("./getIdentityDomainsApps").getIdentityDomainsAppsOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityDomainsApps","getIdentityDomainsAppsOutput"], () => require("./getIdentityDomainsApps"));

export { GetIdentityDomainsAuthTokenArgs, GetIdentityDomainsAuthTokenResult, GetIdentityDomainsAuthTokenOutputArgs } from "./getIdentityDomainsAuthToken";
export const getIdentityDomainsAuthToken: typeof import("./getIdentityDomainsAuthToken").getIdentityDomainsAuthToken = null as any;
export const getIdentityDomainsAuthTokenOutput: typeof import("./getIdentityDomainsAuthToken").getIdentityDomainsAuthTokenOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityDomainsAuthToken","getIdentityDomainsAuthTokenOutput"], () => require("./getIdentityDomainsAuthToken"));

export { GetIdentityDomainsAuthTokensArgs, GetIdentityDomainsAuthTokensResult, GetIdentityDomainsAuthTokensOutputArgs } from "./getIdentityDomainsAuthTokens";
export const getIdentityDomainsAuthTokens: typeof import("./getIdentityDomainsAuthTokens").getIdentityDomainsAuthTokens = null as any;
export const getIdentityDomainsAuthTokensOutput: typeof import("./getIdentityDomainsAuthTokens").getIdentityDomainsAuthTokensOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityDomainsAuthTokens","getIdentityDomainsAuthTokensOutput"], () => require("./getIdentityDomainsAuthTokens"));

export { GetIdentityDomainsAuthenticationFactorSettingArgs, GetIdentityDomainsAuthenticationFactorSettingResult, GetIdentityDomainsAuthenticationFactorSettingOutputArgs } from "./getIdentityDomainsAuthenticationFactorSetting";
export const getIdentityDomainsAuthenticationFactorSetting: typeof import("./getIdentityDomainsAuthenticationFactorSetting").getIdentityDomainsAuthenticationFactorSetting = null as any;
export const getIdentityDomainsAuthenticationFactorSettingOutput: typeof import("./getIdentityDomainsAuthenticationFactorSetting").getIdentityDomainsAuthenticationFactorSettingOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityDomainsAuthenticationFactorSetting","getIdentityDomainsAuthenticationFactorSettingOutput"], () => require("./getIdentityDomainsAuthenticationFactorSetting"));

export { GetIdentityDomainsAuthenticationFactorSettingsArgs, GetIdentityDomainsAuthenticationFactorSettingsResult, GetIdentityDomainsAuthenticationFactorSettingsOutputArgs } from "./getIdentityDomainsAuthenticationFactorSettings";
export const getIdentityDomainsAuthenticationFactorSettings: typeof import("./getIdentityDomainsAuthenticationFactorSettings").getIdentityDomainsAuthenticationFactorSettings = null as any;
export const getIdentityDomainsAuthenticationFactorSettingsOutput: typeof import("./getIdentityDomainsAuthenticationFactorSettings").getIdentityDomainsAuthenticationFactorSettingsOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityDomainsAuthenticationFactorSettings","getIdentityDomainsAuthenticationFactorSettingsOutput"], () => require("./getIdentityDomainsAuthenticationFactorSettings"));

export { GetIdentityDomainsBrandingSettingArgs, GetIdentityDomainsBrandingSettingResult, GetIdentityDomainsBrandingSettingOutputArgs } from "./getIdentityDomainsBrandingSetting";
export const getIdentityDomainsBrandingSetting: typeof import("./getIdentityDomainsBrandingSetting").getIdentityDomainsBrandingSetting = null as any;
export const getIdentityDomainsBrandingSettingOutput: typeof import("./getIdentityDomainsBrandingSetting").getIdentityDomainsBrandingSettingOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityDomainsBrandingSetting","getIdentityDomainsBrandingSettingOutput"], () => require("./getIdentityDomainsBrandingSetting"));

export { GetIdentityDomainsBrandingSettingsArgs, GetIdentityDomainsBrandingSettingsResult, GetIdentityDomainsBrandingSettingsOutputArgs } from "./getIdentityDomainsBrandingSettings";
export const getIdentityDomainsBrandingSettings: typeof import("./getIdentityDomainsBrandingSettings").getIdentityDomainsBrandingSettings = null as any;
export const getIdentityDomainsBrandingSettingsOutput: typeof import("./getIdentityDomainsBrandingSettings").getIdentityDomainsBrandingSettingsOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityDomainsBrandingSettings","getIdentityDomainsBrandingSettingsOutput"], () => require("./getIdentityDomainsBrandingSettings"));

export { GetIdentityDomainsCloudGateArgs, GetIdentityDomainsCloudGateResult, GetIdentityDomainsCloudGateOutputArgs } from "./getIdentityDomainsCloudGate";
export const getIdentityDomainsCloudGate: typeof import("./getIdentityDomainsCloudGate").getIdentityDomainsCloudGate = null as any;
export const getIdentityDomainsCloudGateOutput: typeof import("./getIdentityDomainsCloudGate").getIdentityDomainsCloudGateOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityDomainsCloudGate","getIdentityDomainsCloudGateOutput"], () => require("./getIdentityDomainsCloudGate"));

export { GetIdentityDomainsCloudGateMappingArgs, GetIdentityDomainsCloudGateMappingResult, GetIdentityDomainsCloudGateMappingOutputArgs } from "./getIdentityDomainsCloudGateMapping";
export const getIdentityDomainsCloudGateMapping: typeof import("./getIdentityDomainsCloudGateMapping").getIdentityDomainsCloudGateMapping = null as any;
export const getIdentityDomainsCloudGateMappingOutput: typeof import("./getIdentityDomainsCloudGateMapping").getIdentityDomainsCloudGateMappingOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityDomainsCloudGateMapping","getIdentityDomainsCloudGateMappingOutput"], () => require("./getIdentityDomainsCloudGateMapping"));

export { GetIdentityDomainsCloudGateMappingsArgs, GetIdentityDomainsCloudGateMappingsResult, GetIdentityDomainsCloudGateMappingsOutputArgs } from "./getIdentityDomainsCloudGateMappings";
export const getIdentityDomainsCloudGateMappings: typeof import("./getIdentityDomainsCloudGateMappings").getIdentityDomainsCloudGateMappings = null as any;
export const getIdentityDomainsCloudGateMappingsOutput: typeof import("./getIdentityDomainsCloudGateMappings").getIdentityDomainsCloudGateMappingsOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityDomainsCloudGateMappings","getIdentityDomainsCloudGateMappingsOutput"], () => require("./getIdentityDomainsCloudGateMappings"));

export { GetIdentityDomainsCloudGateServerArgs, GetIdentityDomainsCloudGateServerResult, GetIdentityDomainsCloudGateServerOutputArgs } from "./getIdentityDomainsCloudGateServer";
export const getIdentityDomainsCloudGateServer: typeof import("./getIdentityDomainsCloudGateServer").getIdentityDomainsCloudGateServer = null as any;
export const getIdentityDomainsCloudGateServerOutput: typeof import("./getIdentityDomainsCloudGateServer").getIdentityDomainsCloudGateServerOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityDomainsCloudGateServer","getIdentityDomainsCloudGateServerOutput"], () => require("./getIdentityDomainsCloudGateServer"));

export { GetIdentityDomainsCloudGateServersArgs, GetIdentityDomainsCloudGateServersResult, GetIdentityDomainsCloudGateServersOutputArgs } from "./getIdentityDomainsCloudGateServers";
export const getIdentityDomainsCloudGateServers: typeof import("./getIdentityDomainsCloudGateServers").getIdentityDomainsCloudGateServers = null as any;
export const getIdentityDomainsCloudGateServersOutput: typeof import("./getIdentityDomainsCloudGateServers").getIdentityDomainsCloudGateServersOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityDomainsCloudGateServers","getIdentityDomainsCloudGateServersOutput"], () => require("./getIdentityDomainsCloudGateServers"));

export { GetIdentityDomainsCloudGatesArgs, GetIdentityDomainsCloudGatesResult, GetIdentityDomainsCloudGatesOutputArgs } from "./getIdentityDomainsCloudGates";
export const getIdentityDomainsCloudGates: typeof import("./getIdentityDomainsCloudGates").getIdentityDomainsCloudGates = null as any;
export const getIdentityDomainsCloudGatesOutput: typeof import("./getIdentityDomainsCloudGates").getIdentityDomainsCloudGatesOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityDomainsCloudGates","getIdentityDomainsCloudGatesOutput"], () => require("./getIdentityDomainsCloudGates"));

export { GetIdentityDomainsConditionArgs, GetIdentityDomainsConditionResult, GetIdentityDomainsConditionOutputArgs } from "./getIdentityDomainsCondition";
export const getIdentityDomainsCondition: typeof import("./getIdentityDomainsCondition").getIdentityDomainsCondition = null as any;
export const getIdentityDomainsConditionOutput: typeof import("./getIdentityDomainsCondition").getIdentityDomainsConditionOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityDomainsCondition","getIdentityDomainsConditionOutput"], () => require("./getIdentityDomainsCondition"));

export { GetIdentityDomainsConditionsArgs, GetIdentityDomainsConditionsResult, GetIdentityDomainsConditionsOutputArgs } from "./getIdentityDomainsConditions";
export const getIdentityDomainsConditions: typeof import("./getIdentityDomainsConditions").getIdentityDomainsConditions = null as any;
export const getIdentityDomainsConditionsOutput: typeof import("./getIdentityDomainsConditions").getIdentityDomainsConditionsOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityDomainsConditions","getIdentityDomainsConditionsOutput"], () => require("./getIdentityDomainsConditions"));

export { GetIdentityDomainsCustomerSecretKeyArgs, GetIdentityDomainsCustomerSecretKeyResult, GetIdentityDomainsCustomerSecretKeyOutputArgs } from "./getIdentityDomainsCustomerSecretKey";
export const getIdentityDomainsCustomerSecretKey: typeof import("./getIdentityDomainsCustomerSecretKey").getIdentityDomainsCustomerSecretKey = null as any;
export const getIdentityDomainsCustomerSecretKeyOutput: typeof import("./getIdentityDomainsCustomerSecretKey").getIdentityDomainsCustomerSecretKeyOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityDomainsCustomerSecretKey","getIdentityDomainsCustomerSecretKeyOutput"], () => require("./getIdentityDomainsCustomerSecretKey"));

export { GetIdentityDomainsCustomerSecretKeysArgs, GetIdentityDomainsCustomerSecretKeysResult, GetIdentityDomainsCustomerSecretKeysOutputArgs } from "./getIdentityDomainsCustomerSecretKeys";
export const getIdentityDomainsCustomerSecretKeys: typeof import("./getIdentityDomainsCustomerSecretKeys").getIdentityDomainsCustomerSecretKeys = null as any;
export const getIdentityDomainsCustomerSecretKeysOutput: typeof import("./getIdentityDomainsCustomerSecretKeys").getIdentityDomainsCustomerSecretKeysOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityDomainsCustomerSecretKeys","getIdentityDomainsCustomerSecretKeysOutput"], () => require("./getIdentityDomainsCustomerSecretKeys"));

export { GetIdentityDomainsDynamicResourceGroupArgs, GetIdentityDomainsDynamicResourceGroupResult, GetIdentityDomainsDynamicResourceGroupOutputArgs } from "./getIdentityDomainsDynamicResourceGroup";
export const getIdentityDomainsDynamicResourceGroup: typeof import("./getIdentityDomainsDynamicResourceGroup").getIdentityDomainsDynamicResourceGroup = null as any;
export const getIdentityDomainsDynamicResourceGroupOutput: typeof import("./getIdentityDomainsDynamicResourceGroup").getIdentityDomainsDynamicResourceGroupOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityDomainsDynamicResourceGroup","getIdentityDomainsDynamicResourceGroupOutput"], () => require("./getIdentityDomainsDynamicResourceGroup"));

export { GetIdentityDomainsDynamicResourceGroupsArgs, GetIdentityDomainsDynamicResourceGroupsResult, GetIdentityDomainsDynamicResourceGroupsOutputArgs } from "./getIdentityDomainsDynamicResourceGroups";
export const getIdentityDomainsDynamicResourceGroups: typeof import("./getIdentityDomainsDynamicResourceGroups").getIdentityDomainsDynamicResourceGroups = null as any;
export const getIdentityDomainsDynamicResourceGroupsOutput: typeof import("./getIdentityDomainsDynamicResourceGroups").getIdentityDomainsDynamicResourceGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityDomainsDynamicResourceGroups","getIdentityDomainsDynamicResourceGroupsOutput"], () => require("./getIdentityDomainsDynamicResourceGroups"));

export { GetIdentityDomainsGrantArgs, GetIdentityDomainsGrantResult, GetIdentityDomainsGrantOutputArgs } from "./getIdentityDomainsGrant";
export const getIdentityDomainsGrant: typeof import("./getIdentityDomainsGrant").getIdentityDomainsGrant = null as any;
export const getIdentityDomainsGrantOutput: typeof import("./getIdentityDomainsGrant").getIdentityDomainsGrantOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityDomainsGrant","getIdentityDomainsGrantOutput"], () => require("./getIdentityDomainsGrant"));

export { GetIdentityDomainsGrantsArgs, GetIdentityDomainsGrantsResult, GetIdentityDomainsGrantsOutputArgs } from "./getIdentityDomainsGrants";
export const getIdentityDomainsGrants: typeof import("./getIdentityDomainsGrants").getIdentityDomainsGrants = null as any;
export const getIdentityDomainsGrantsOutput: typeof import("./getIdentityDomainsGrants").getIdentityDomainsGrantsOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityDomainsGrants","getIdentityDomainsGrantsOutput"], () => require("./getIdentityDomainsGrants"));

export { GetIdentityDomainsGroupArgs, GetIdentityDomainsGroupResult, GetIdentityDomainsGroupOutputArgs } from "./getIdentityDomainsGroup";
export const getIdentityDomainsGroup: typeof import("./getIdentityDomainsGroup").getIdentityDomainsGroup = null as any;
export const getIdentityDomainsGroupOutput: typeof import("./getIdentityDomainsGroup").getIdentityDomainsGroupOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityDomainsGroup","getIdentityDomainsGroupOutput"], () => require("./getIdentityDomainsGroup"));

export { GetIdentityDomainsGroupsArgs, GetIdentityDomainsGroupsResult, GetIdentityDomainsGroupsOutputArgs } from "./getIdentityDomainsGroups";
export const getIdentityDomainsGroups: typeof import("./getIdentityDomainsGroups").getIdentityDomainsGroups = null as any;
export const getIdentityDomainsGroupsOutput: typeof import("./getIdentityDomainsGroups").getIdentityDomainsGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityDomainsGroups","getIdentityDomainsGroupsOutput"], () => require("./getIdentityDomainsGroups"));

export { GetIdentityDomainsIdentityPropagationTrustArgs, GetIdentityDomainsIdentityPropagationTrustResult, GetIdentityDomainsIdentityPropagationTrustOutputArgs } from "./getIdentityDomainsIdentityPropagationTrust";
export const getIdentityDomainsIdentityPropagationTrust: typeof import("./getIdentityDomainsIdentityPropagationTrust").getIdentityDomainsIdentityPropagationTrust = null as any;
export const getIdentityDomainsIdentityPropagationTrustOutput: typeof import("./getIdentityDomainsIdentityPropagationTrust").getIdentityDomainsIdentityPropagationTrustOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityDomainsIdentityPropagationTrust","getIdentityDomainsIdentityPropagationTrustOutput"], () => require("./getIdentityDomainsIdentityPropagationTrust"));

export { GetIdentityDomainsIdentityPropagationTrustsArgs, GetIdentityDomainsIdentityPropagationTrustsResult, GetIdentityDomainsIdentityPropagationTrustsOutputArgs } from "./getIdentityDomainsIdentityPropagationTrusts";
export const getIdentityDomainsIdentityPropagationTrusts: typeof import("./getIdentityDomainsIdentityPropagationTrusts").getIdentityDomainsIdentityPropagationTrusts = null as any;
export const getIdentityDomainsIdentityPropagationTrustsOutput: typeof import("./getIdentityDomainsIdentityPropagationTrusts").getIdentityDomainsIdentityPropagationTrustsOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityDomainsIdentityPropagationTrusts","getIdentityDomainsIdentityPropagationTrustsOutput"], () => require("./getIdentityDomainsIdentityPropagationTrusts"));

export { GetIdentityDomainsIdentityProviderArgs, GetIdentityDomainsIdentityProviderResult, GetIdentityDomainsIdentityProviderOutputArgs } from "./getIdentityDomainsIdentityProvider";
export const getIdentityDomainsIdentityProvider: typeof import("./getIdentityDomainsIdentityProvider").getIdentityDomainsIdentityProvider = null as any;
export const getIdentityDomainsIdentityProviderOutput: typeof import("./getIdentityDomainsIdentityProvider").getIdentityDomainsIdentityProviderOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityDomainsIdentityProvider","getIdentityDomainsIdentityProviderOutput"], () => require("./getIdentityDomainsIdentityProvider"));

export { GetIdentityDomainsIdentityProvidersArgs, GetIdentityDomainsIdentityProvidersResult, GetIdentityDomainsIdentityProvidersOutputArgs } from "./getIdentityDomainsIdentityProviders";
export const getIdentityDomainsIdentityProviders: typeof import("./getIdentityDomainsIdentityProviders").getIdentityDomainsIdentityProviders = null as any;
export const getIdentityDomainsIdentityProvidersOutput: typeof import("./getIdentityDomainsIdentityProviders").getIdentityDomainsIdentityProvidersOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityDomainsIdentityProviders","getIdentityDomainsIdentityProvidersOutput"], () => require("./getIdentityDomainsIdentityProviders"));

export { GetIdentityDomainsIdentitySettingArgs, GetIdentityDomainsIdentitySettingResult, GetIdentityDomainsIdentitySettingOutputArgs } from "./getIdentityDomainsIdentitySetting";
export const getIdentityDomainsIdentitySetting: typeof import("./getIdentityDomainsIdentitySetting").getIdentityDomainsIdentitySetting = null as any;
export const getIdentityDomainsIdentitySettingOutput: typeof import("./getIdentityDomainsIdentitySetting").getIdentityDomainsIdentitySettingOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityDomainsIdentitySetting","getIdentityDomainsIdentitySettingOutput"], () => require("./getIdentityDomainsIdentitySetting"));

export { GetIdentityDomainsIdentitySettingsArgs, GetIdentityDomainsIdentitySettingsResult, GetIdentityDomainsIdentitySettingsOutputArgs } from "./getIdentityDomainsIdentitySettings";
export const getIdentityDomainsIdentitySettings: typeof import("./getIdentityDomainsIdentitySettings").getIdentityDomainsIdentitySettings = null as any;
export const getIdentityDomainsIdentitySettingsOutput: typeof import("./getIdentityDomainsIdentitySettings").getIdentityDomainsIdentitySettingsOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityDomainsIdentitySettings","getIdentityDomainsIdentitySettingsOutput"], () => require("./getIdentityDomainsIdentitySettings"));

export { GetIdentityDomainsKmsiSettingArgs, GetIdentityDomainsKmsiSettingResult, GetIdentityDomainsKmsiSettingOutputArgs } from "./getIdentityDomainsKmsiSetting";
export const getIdentityDomainsKmsiSetting: typeof import("./getIdentityDomainsKmsiSetting").getIdentityDomainsKmsiSetting = null as any;
export const getIdentityDomainsKmsiSettingOutput: typeof import("./getIdentityDomainsKmsiSetting").getIdentityDomainsKmsiSettingOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityDomainsKmsiSetting","getIdentityDomainsKmsiSettingOutput"], () => require("./getIdentityDomainsKmsiSetting"));

export { GetIdentityDomainsKmsiSettingsArgs, GetIdentityDomainsKmsiSettingsResult, GetIdentityDomainsKmsiSettingsOutputArgs } from "./getIdentityDomainsKmsiSettings";
export const getIdentityDomainsKmsiSettings: typeof import("./getIdentityDomainsKmsiSettings").getIdentityDomainsKmsiSettings = null as any;
export const getIdentityDomainsKmsiSettingsOutput: typeof import("./getIdentityDomainsKmsiSettings").getIdentityDomainsKmsiSettingsOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityDomainsKmsiSettings","getIdentityDomainsKmsiSettingsOutput"], () => require("./getIdentityDomainsKmsiSettings"));

export { GetIdentityDomainsMyApiKeyArgs, GetIdentityDomainsMyApiKeyResult, GetIdentityDomainsMyApiKeyOutputArgs } from "./getIdentityDomainsMyApiKey";
export const getIdentityDomainsMyApiKey: typeof import("./getIdentityDomainsMyApiKey").getIdentityDomainsMyApiKey = null as any;
export const getIdentityDomainsMyApiKeyOutput: typeof import("./getIdentityDomainsMyApiKey").getIdentityDomainsMyApiKeyOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityDomainsMyApiKey","getIdentityDomainsMyApiKeyOutput"], () => require("./getIdentityDomainsMyApiKey"));

export { GetIdentityDomainsMyApiKeysArgs, GetIdentityDomainsMyApiKeysResult, GetIdentityDomainsMyApiKeysOutputArgs } from "./getIdentityDomainsMyApiKeys";
export const getIdentityDomainsMyApiKeys: typeof import("./getIdentityDomainsMyApiKeys").getIdentityDomainsMyApiKeys = null as any;
export const getIdentityDomainsMyApiKeysOutput: typeof import("./getIdentityDomainsMyApiKeys").getIdentityDomainsMyApiKeysOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityDomainsMyApiKeys","getIdentityDomainsMyApiKeysOutput"], () => require("./getIdentityDomainsMyApiKeys"));

export { GetIdentityDomainsMyAppsArgs, GetIdentityDomainsMyAppsResult, GetIdentityDomainsMyAppsOutputArgs } from "./getIdentityDomainsMyApps";
export const getIdentityDomainsMyApps: typeof import("./getIdentityDomainsMyApps").getIdentityDomainsMyApps = null as any;
export const getIdentityDomainsMyAppsOutput: typeof import("./getIdentityDomainsMyApps").getIdentityDomainsMyAppsOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityDomainsMyApps","getIdentityDomainsMyAppsOutput"], () => require("./getIdentityDomainsMyApps"));

export { GetIdentityDomainsMyAuthTokenArgs, GetIdentityDomainsMyAuthTokenResult, GetIdentityDomainsMyAuthTokenOutputArgs } from "./getIdentityDomainsMyAuthToken";
export const getIdentityDomainsMyAuthToken: typeof import("./getIdentityDomainsMyAuthToken").getIdentityDomainsMyAuthToken = null as any;
export const getIdentityDomainsMyAuthTokenOutput: typeof import("./getIdentityDomainsMyAuthToken").getIdentityDomainsMyAuthTokenOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityDomainsMyAuthToken","getIdentityDomainsMyAuthTokenOutput"], () => require("./getIdentityDomainsMyAuthToken"));

export { GetIdentityDomainsMyAuthTokensArgs, GetIdentityDomainsMyAuthTokensResult, GetIdentityDomainsMyAuthTokensOutputArgs } from "./getIdentityDomainsMyAuthTokens";
export const getIdentityDomainsMyAuthTokens: typeof import("./getIdentityDomainsMyAuthTokens").getIdentityDomainsMyAuthTokens = null as any;
export const getIdentityDomainsMyAuthTokensOutput: typeof import("./getIdentityDomainsMyAuthTokens").getIdentityDomainsMyAuthTokensOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityDomainsMyAuthTokens","getIdentityDomainsMyAuthTokensOutput"], () => require("./getIdentityDomainsMyAuthTokens"));

export { GetIdentityDomainsMyCompletedApprovalArgs, GetIdentityDomainsMyCompletedApprovalResult, GetIdentityDomainsMyCompletedApprovalOutputArgs } from "./getIdentityDomainsMyCompletedApproval";
export const getIdentityDomainsMyCompletedApproval: typeof import("./getIdentityDomainsMyCompletedApproval").getIdentityDomainsMyCompletedApproval = null as any;
export const getIdentityDomainsMyCompletedApprovalOutput: typeof import("./getIdentityDomainsMyCompletedApproval").getIdentityDomainsMyCompletedApprovalOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityDomainsMyCompletedApproval","getIdentityDomainsMyCompletedApprovalOutput"], () => require("./getIdentityDomainsMyCompletedApproval"));

export { GetIdentityDomainsMyCompletedApprovalsArgs, GetIdentityDomainsMyCompletedApprovalsResult, GetIdentityDomainsMyCompletedApprovalsOutputArgs } from "./getIdentityDomainsMyCompletedApprovals";
export const getIdentityDomainsMyCompletedApprovals: typeof import("./getIdentityDomainsMyCompletedApprovals").getIdentityDomainsMyCompletedApprovals = null as any;
export const getIdentityDomainsMyCompletedApprovalsOutput: typeof import("./getIdentityDomainsMyCompletedApprovals").getIdentityDomainsMyCompletedApprovalsOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityDomainsMyCompletedApprovals","getIdentityDomainsMyCompletedApprovalsOutput"], () => require("./getIdentityDomainsMyCompletedApprovals"));

export { GetIdentityDomainsMyCustomerSecretKeyArgs, GetIdentityDomainsMyCustomerSecretKeyResult, GetIdentityDomainsMyCustomerSecretKeyOutputArgs } from "./getIdentityDomainsMyCustomerSecretKey";
export const getIdentityDomainsMyCustomerSecretKey: typeof import("./getIdentityDomainsMyCustomerSecretKey").getIdentityDomainsMyCustomerSecretKey = null as any;
export const getIdentityDomainsMyCustomerSecretKeyOutput: typeof import("./getIdentityDomainsMyCustomerSecretKey").getIdentityDomainsMyCustomerSecretKeyOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityDomainsMyCustomerSecretKey","getIdentityDomainsMyCustomerSecretKeyOutput"], () => require("./getIdentityDomainsMyCustomerSecretKey"));

export { GetIdentityDomainsMyCustomerSecretKeysArgs, GetIdentityDomainsMyCustomerSecretKeysResult, GetIdentityDomainsMyCustomerSecretKeysOutputArgs } from "./getIdentityDomainsMyCustomerSecretKeys";
export const getIdentityDomainsMyCustomerSecretKeys: typeof import("./getIdentityDomainsMyCustomerSecretKeys").getIdentityDomainsMyCustomerSecretKeys = null as any;
export const getIdentityDomainsMyCustomerSecretKeysOutput: typeof import("./getIdentityDomainsMyCustomerSecretKeys").getIdentityDomainsMyCustomerSecretKeysOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityDomainsMyCustomerSecretKeys","getIdentityDomainsMyCustomerSecretKeysOutput"], () => require("./getIdentityDomainsMyCustomerSecretKeys"));

export { GetIdentityDomainsMyDeviceArgs, GetIdentityDomainsMyDeviceResult, GetIdentityDomainsMyDeviceOutputArgs } from "./getIdentityDomainsMyDevice";
export const getIdentityDomainsMyDevice: typeof import("./getIdentityDomainsMyDevice").getIdentityDomainsMyDevice = null as any;
export const getIdentityDomainsMyDeviceOutput: typeof import("./getIdentityDomainsMyDevice").getIdentityDomainsMyDeviceOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityDomainsMyDevice","getIdentityDomainsMyDeviceOutput"], () => require("./getIdentityDomainsMyDevice"));

export { GetIdentityDomainsMyDevicesArgs, GetIdentityDomainsMyDevicesResult, GetIdentityDomainsMyDevicesOutputArgs } from "./getIdentityDomainsMyDevices";
export const getIdentityDomainsMyDevices: typeof import("./getIdentityDomainsMyDevices").getIdentityDomainsMyDevices = null as any;
export const getIdentityDomainsMyDevicesOutput: typeof import("./getIdentityDomainsMyDevices").getIdentityDomainsMyDevicesOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityDomainsMyDevices","getIdentityDomainsMyDevicesOutput"], () => require("./getIdentityDomainsMyDevices"));

export { GetIdentityDomainsMyGroupsArgs, GetIdentityDomainsMyGroupsResult, GetIdentityDomainsMyGroupsOutputArgs } from "./getIdentityDomainsMyGroups";
export const getIdentityDomainsMyGroups: typeof import("./getIdentityDomainsMyGroups").getIdentityDomainsMyGroups = null as any;
export const getIdentityDomainsMyGroupsOutput: typeof import("./getIdentityDomainsMyGroups").getIdentityDomainsMyGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityDomainsMyGroups","getIdentityDomainsMyGroupsOutput"], () => require("./getIdentityDomainsMyGroups"));

export { GetIdentityDomainsMyOauth2clientCredentialArgs, GetIdentityDomainsMyOauth2clientCredentialResult, GetIdentityDomainsMyOauth2clientCredentialOutputArgs } from "./getIdentityDomainsMyOauth2clientCredential";
export const getIdentityDomainsMyOauth2clientCredential: typeof import("./getIdentityDomainsMyOauth2clientCredential").getIdentityDomainsMyOauth2clientCredential = null as any;
export const getIdentityDomainsMyOauth2clientCredentialOutput: typeof import("./getIdentityDomainsMyOauth2clientCredential").getIdentityDomainsMyOauth2clientCredentialOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityDomainsMyOauth2clientCredential","getIdentityDomainsMyOauth2clientCredentialOutput"], () => require("./getIdentityDomainsMyOauth2clientCredential"));

export { GetIdentityDomainsMyOauth2clientCredentialsArgs, GetIdentityDomainsMyOauth2clientCredentialsResult, GetIdentityDomainsMyOauth2clientCredentialsOutputArgs } from "./getIdentityDomainsMyOauth2clientCredentials";
export const getIdentityDomainsMyOauth2clientCredentials: typeof import("./getIdentityDomainsMyOauth2clientCredentials").getIdentityDomainsMyOauth2clientCredentials = null as any;
export const getIdentityDomainsMyOauth2clientCredentialsOutput: typeof import("./getIdentityDomainsMyOauth2clientCredentials").getIdentityDomainsMyOauth2clientCredentialsOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityDomainsMyOauth2clientCredentials","getIdentityDomainsMyOauth2clientCredentialsOutput"], () => require("./getIdentityDomainsMyOauth2clientCredentials"));

export { GetIdentityDomainsMyPendingApprovalArgs, GetIdentityDomainsMyPendingApprovalResult, GetIdentityDomainsMyPendingApprovalOutputArgs } from "./getIdentityDomainsMyPendingApproval";
export const getIdentityDomainsMyPendingApproval: typeof import("./getIdentityDomainsMyPendingApproval").getIdentityDomainsMyPendingApproval = null as any;
export const getIdentityDomainsMyPendingApprovalOutput: typeof import("./getIdentityDomainsMyPendingApproval").getIdentityDomainsMyPendingApprovalOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityDomainsMyPendingApproval","getIdentityDomainsMyPendingApprovalOutput"], () => require("./getIdentityDomainsMyPendingApproval"));

export { GetIdentityDomainsMyPendingApprovalsArgs, GetIdentityDomainsMyPendingApprovalsResult, GetIdentityDomainsMyPendingApprovalsOutputArgs } from "./getIdentityDomainsMyPendingApprovals";
export const getIdentityDomainsMyPendingApprovals: typeof import("./getIdentityDomainsMyPendingApprovals").getIdentityDomainsMyPendingApprovals = null as any;
export const getIdentityDomainsMyPendingApprovalsOutput: typeof import("./getIdentityDomainsMyPendingApprovals").getIdentityDomainsMyPendingApprovalsOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityDomainsMyPendingApprovals","getIdentityDomainsMyPendingApprovalsOutput"], () => require("./getIdentityDomainsMyPendingApprovals"));

export { GetIdentityDomainsMyRequestableGroupsArgs, GetIdentityDomainsMyRequestableGroupsResult, GetIdentityDomainsMyRequestableGroupsOutputArgs } from "./getIdentityDomainsMyRequestableGroups";
export const getIdentityDomainsMyRequestableGroups: typeof import("./getIdentityDomainsMyRequestableGroups").getIdentityDomainsMyRequestableGroups = null as any;
export const getIdentityDomainsMyRequestableGroupsOutput: typeof import("./getIdentityDomainsMyRequestableGroups").getIdentityDomainsMyRequestableGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityDomainsMyRequestableGroups","getIdentityDomainsMyRequestableGroupsOutput"], () => require("./getIdentityDomainsMyRequestableGroups"));

export { GetIdentityDomainsMyRequestsArgs, GetIdentityDomainsMyRequestsResult, GetIdentityDomainsMyRequestsOutputArgs } from "./getIdentityDomainsMyRequests";
export const getIdentityDomainsMyRequests: typeof import("./getIdentityDomainsMyRequests").getIdentityDomainsMyRequests = null as any;
export const getIdentityDomainsMyRequestsOutput: typeof import("./getIdentityDomainsMyRequests").getIdentityDomainsMyRequestsOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityDomainsMyRequests","getIdentityDomainsMyRequestsOutput"], () => require("./getIdentityDomainsMyRequests"));

export { GetIdentityDomainsMySmtpCredentialArgs, GetIdentityDomainsMySmtpCredentialResult, GetIdentityDomainsMySmtpCredentialOutputArgs } from "./getIdentityDomainsMySmtpCredential";
export const getIdentityDomainsMySmtpCredential: typeof import("./getIdentityDomainsMySmtpCredential").getIdentityDomainsMySmtpCredential = null as any;
export const getIdentityDomainsMySmtpCredentialOutput: typeof import("./getIdentityDomainsMySmtpCredential").getIdentityDomainsMySmtpCredentialOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityDomainsMySmtpCredential","getIdentityDomainsMySmtpCredentialOutput"], () => require("./getIdentityDomainsMySmtpCredential"));

export { GetIdentityDomainsMySmtpCredentialsArgs, GetIdentityDomainsMySmtpCredentialsResult, GetIdentityDomainsMySmtpCredentialsOutputArgs } from "./getIdentityDomainsMySmtpCredentials";
export const getIdentityDomainsMySmtpCredentials: typeof import("./getIdentityDomainsMySmtpCredentials").getIdentityDomainsMySmtpCredentials = null as any;
export const getIdentityDomainsMySmtpCredentialsOutput: typeof import("./getIdentityDomainsMySmtpCredentials").getIdentityDomainsMySmtpCredentialsOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityDomainsMySmtpCredentials","getIdentityDomainsMySmtpCredentialsOutput"], () => require("./getIdentityDomainsMySmtpCredentials"));

export { GetIdentityDomainsMySupportAccountArgs, GetIdentityDomainsMySupportAccountResult, GetIdentityDomainsMySupportAccountOutputArgs } from "./getIdentityDomainsMySupportAccount";
export const getIdentityDomainsMySupportAccount: typeof import("./getIdentityDomainsMySupportAccount").getIdentityDomainsMySupportAccount = null as any;
export const getIdentityDomainsMySupportAccountOutput: typeof import("./getIdentityDomainsMySupportAccount").getIdentityDomainsMySupportAccountOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityDomainsMySupportAccount","getIdentityDomainsMySupportAccountOutput"], () => require("./getIdentityDomainsMySupportAccount"));

export { GetIdentityDomainsMySupportAccountsArgs, GetIdentityDomainsMySupportAccountsResult, GetIdentityDomainsMySupportAccountsOutputArgs } from "./getIdentityDomainsMySupportAccounts";
export const getIdentityDomainsMySupportAccounts: typeof import("./getIdentityDomainsMySupportAccounts").getIdentityDomainsMySupportAccounts = null as any;
export const getIdentityDomainsMySupportAccountsOutput: typeof import("./getIdentityDomainsMySupportAccounts").getIdentityDomainsMySupportAccountsOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityDomainsMySupportAccounts","getIdentityDomainsMySupportAccountsOutput"], () => require("./getIdentityDomainsMySupportAccounts"));

export { GetIdentityDomainsMyTrustedUserAgentArgs, GetIdentityDomainsMyTrustedUserAgentResult, GetIdentityDomainsMyTrustedUserAgentOutputArgs } from "./getIdentityDomainsMyTrustedUserAgent";
export const getIdentityDomainsMyTrustedUserAgent: typeof import("./getIdentityDomainsMyTrustedUserAgent").getIdentityDomainsMyTrustedUserAgent = null as any;
export const getIdentityDomainsMyTrustedUserAgentOutput: typeof import("./getIdentityDomainsMyTrustedUserAgent").getIdentityDomainsMyTrustedUserAgentOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityDomainsMyTrustedUserAgent","getIdentityDomainsMyTrustedUserAgentOutput"], () => require("./getIdentityDomainsMyTrustedUserAgent"));

export { GetIdentityDomainsMyTrustedUserAgentsArgs, GetIdentityDomainsMyTrustedUserAgentsResult, GetIdentityDomainsMyTrustedUserAgentsOutputArgs } from "./getIdentityDomainsMyTrustedUserAgents";
export const getIdentityDomainsMyTrustedUserAgents: typeof import("./getIdentityDomainsMyTrustedUserAgents").getIdentityDomainsMyTrustedUserAgents = null as any;
export const getIdentityDomainsMyTrustedUserAgentsOutput: typeof import("./getIdentityDomainsMyTrustedUserAgents").getIdentityDomainsMyTrustedUserAgentsOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityDomainsMyTrustedUserAgents","getIdentityDomainsMyTrustedUserAgentsOutput"], () => require("./getIdentityDomainsMyTrustedUserAgents"));

export { GetIdentityDomainsMyUserDbCredentialArgs, GetIdentityDomainsMyUserDbCredentialResult, GetIdentityDomainsMyUserDbCredentialOutputArgs } from "./getIdentityDomainsMyUserDbCredential";
export const getIdentityDomainsMyUserDbCredential: typeof import("./getIdentityDomainsMyUserDbCredential").getIdentityDomainsMyUserDbCredential = null as any;
export const getIdentityDomainsMyUserDbCredentialOutput: typeof import("./getIdentityDomainsMyUserDbCredential").getIdentityDomainsMyUserDbCredentialOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityDomainsMyUserDbCredential","getIdentityDomainsMyUserDbCredentialOutput"], () => require("./getIdentityDomainsMyUserDbCredential"));

export { GetIdentityDomainsMyUserDbCredentialsArgs, GetIdentityDomainsMyUserDbCredentialsResult, GetIdentityDomainsMyUserDbCredentialsOutputArgs } from "./getIdentityDomainsMyUserDbCredentials";
export const getIdentityDomainsMyUserDbCredentials: typeof import("./getIdentityDomainsMyUserDbCredentials").getIdentityDomainsMyUserDbCredentials = null as any;
export const getIdentityDomainsMyUserDbCredentialsOutput: typeof import("./getIdentityDomainsMyUserDbCredentials").getIdentityDomainsMyUserDbCredentialsOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityDomainsMyUserDbCredentials","getIdentityDomainsMyUserDbCredentialsOutput"], () => require("./getIdentityDomainsMyUserDbCredentials"));

export { GetIdentityDomainsNetworkPerimeterArgs, GetIdentityDomainsNetworkPerimeterResult, GetIdentityDomainsNetworkPerimeterOutputArgs } from "./getIdentityDomainsNetworkPerimeter";
export const getIdentityDomainsNetworkPerimeter: typeof import("./getIdentityDomainsNetworkPerimeter").getIdentityDomainsNetworkPerimeter = null as any;
export const getIdentityDomainsNetworkPerimeterOutput: typeof import("./getIdentityDomainsNetworkPerimeter").getIdentityDomainsNetworkPerimeterOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityDomainsNetworkPerimeter","getIdentityDomainsNetworkPerimeterOutput"], () => require("./getIdentityDomainsNetworkPerimeter"));

export { GetIdentityDomainsNetworkPerimetersArgs, GetIdentityDomainsNetworkPerimetersResult, GetIdentityDomainsNetworkPerimetersOutputArgs } from "./getIdentityDomainsNetworkPerimeters";
export const getIdentityDomainsNetworkPerimeters: typeof import("./getIdentityDomainsNetworkPerimeters").getIdentityDomainsNetworkPerimeters = null as any;
export const getIdentityDomainsNetworkPerimetersOutput: typeof import("./getIdentityDomainsNetworkPerimeters").getIdentityDomainsNetworkPerimetersOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityDomainsNetworkPerimeters","getIdentityDomainsNetworkPerimetersOutput"], () => require("./getIdentityDomainsNetworkPerimeters"));

export { GetIdentityDomainsNotificationSettingArgs, GetIdentityDomainsNotificationSettingResult, GetIdentityDomainsNotificationSettingOutputArgs } from "./getIdentityDomainsNotificationSetting";
export const getIdentityDomainsNotificationSetting: typeof import("./getIdentityDomainsNotificationSetting").getIdentityDomainsNotificationSetting = null as any;
export const getIdentityDomainsNotificationSettingOutput: typeof import("./getIdentityDomainsNotificationSetting").getIdentityDomainsNotificationSettingOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityDomainsNotificationSetting","getIdentityDomainsNotificationSettingOutput"], () => require("./getIdentityDomainsNotificationSetting"));

export { GetIdentityDomainsNotificationSettingsArgs, GetIdentityDomainsNotificationSettingsResult, GetIdentityDomainsNotificationSettingsOutputArgs } from "./getIdentityDomainsNotificationSettings";
export const getIdentityDomainsNotificationSettings: typeof import("./getIdentityDomainsNotificationSettings").getIdentityDomainsNotificationSettings = null as any;
export const getIdentityDomainsNotificationSettingsOutput: typeof import("./getIdentityDomainsNotificationSettings").getIdentityDomainsNotificationSettingsOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityDomainsNotificationSettings","getIdentityDomainsNotificationSettingsOutput"], () => require("./getIdentityDomainsNotificationSettings"));

export { GetIdentityDomainsOauth2clientCredentialArgs, GetIdentityDomainsOauth2clientCredentialResult, GetIdentityDomainsOauth2clientCredentialOutputArgs } from "./getIdentityDomainsOauth2clientCredential";
export const getIdentityDomainsOauth2clientCredential: typeof import("./getIdentityDomainsOauth2clientCredential").getIdentityDomainsOauth2clientCredential = null as any;
export const getIdentityDomainsOauth2clientCredentialOutput: typeof import("./getIdentityDomainsOauth2clientCredential").getIdentityDomainsOauth2clientCredentialOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityDomainsOauth2clientCredential","getIdentityDomainsOauth2clientCredentialOutput"], () => require("./getIdentityDomainsOauth2clientCredential"));

export { GetIdentityDomainsOauth2clientCredentialsArgs, GetIdentityDomainsOauth2clientCredentialsResult, GetIdentityDomainsOauth2clientCredentialsOutputArgs } from "./getIdentityDomainsOauth2clientCredentials";
export const getIdentityDomainsOauth2clientCredentials: typeof import("./getIdentityDomainsOauth2clientCredentials").getIdentityDomainsOauth2clientCredentials = null as any;
export const getIdentityDomainsOauth2clientCredentialsOutput: typeof import("./getIdentityDomainsOauth2clientCredentials").getIdentityDomainsOauth2clientCredentialsOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityDomainsOauth2clientCredentials","getIdentityDomainsOauth2clientCredentialsOutput"], () => require("./getIdentityDomainsOauth2clientCredentials"));

export { GetIdentityDomainsOauthClientCertificateArgs, GetIdentityDomainsOauthClientCertificateResult, GetIdentityDomainsOauthClientCertificateOutputArgs } from "./getIdentityDomainsOauthClientCertificate";
export const getIdentityDomainsOauthClientCertificate: typeof import("./getIdentityDomainsOauthClientCertificate").getIdentityDomainsOauthClientCertificate = null as any;
export const getIdentityDomainsOauthClientCertificateOutput: typeof import("./getIdentityDomainsOauthClientCertificate").getIdentityDomainsOauthClientCertificateOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityDomainsOauthClientCertificate","getIdentityDomainsOauthClientCertificateOutput"], () => require("./getIdentityDomainsOauthClientCertificate"));

export { GetIdentityDomainsOauthClientCertificatesArgs, GetIdentityDomainsOauthClientCertificatesResult, GetIdentityDomainsOauthClientCertificatesOutputArgs } from "./getIdentityDomainsOauthClientCertificates";
export const getIdentityDomainsOauthClientCertificates: typeof import("./getIdentityDomainsOauthClientCertificates").getIdentityDomainsOauthClientCertificates = null as any;
export const getIdentityDomainsOauthClientCertificatesOutput: typeof import("./getIdentityDomainsOauthClientCertificates").getIdentityDomainsOauthClientCertificatesOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityDomainsOauthClientCertificates","getIdentityDomainsOauthClientCertificatesOutput"], () => require("./getIdentityDomainsOauthClientCertificates"));

export { GetIdentityDomainsOauthPartnerCertificateArgs, GetIdentityDomainsOauthPartnerCertificateResult, GetIdentityDomainsOauthPartnerCertificateOutputArgs } from "./getIdentityDomainsOauthPartnerCertificate";
export const getIdentityDomainsOauthPartnerCertificate: typeof import("./getIdentityDomainsOauthPartnerCertificate").getIdentityDomainsOauthPartnerCertificate = null as any;
export const getIdentityDomainsOauthPartnerCertificateOutput: typeof import("./getIdentityDomainsOauthPartnerCertificate").getIdentityDomainsOauthPartnerCertificateOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityDomainsOauthPartnerCertificate","getIdentityDomainsOauthPartnerCertificateOutput"], () => require("./getIdentityDomainsOauthPartnerCertificate"));

export { GetIdentityDomainsOauthPartnerCertificatesArgs, GetIdentityDomainsOauthPartnerCertificatesResult, GetIdentityDomainsOauthPartnerCertificatesOutputArgs } from "./getIdentityDomainsOauthPartnerCertificates";
export const getIdentityDomainsOauthPartnerCertificates: typeof import("./getIdentityDomainsOauthPartnerCertificates").getIdentityDomainsOauthPartnerCertificates = null as any;
export const getIdentityDomainsOauthPartnerCertificatesOutput: typeof import("./getIdentityDomainsOauthPartnerCertificates").getIdentityDomainsOauthPartnerCertificatesOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityDomainsOauthPartnerCertificates","getIdentityDomainsOauthPartnerCertificatesOutput"], () => require("./getIdentityDomainsOauthPartnerCertificates"));

export { GetIdentityDomainsPasswordPoliciesArgs, GetIdentityDomainsPasswordPoliciesResult, GetIdentityDomainsPasswordPoliciesOutputArgs } from "./getIdentityDomainsPasswordPolicies";
export const getIdentityDomainsPasswordPolicies: typeof import("./getIdentityDomainsPasswordPolicies").getIdentityDomainsPasswordPolicies = null as any;
export const getIdentityDomainsPasswordPoliciesOutput: typeof import("./getIdentityDomainsPasswordPolicies").getIdentityDomainsPasswordPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityDomainsPasswordPolicies","getIdentityDomainsPasswordPoliciesOutput"], () => require("./getIdentityDomainsPasswordPolicies"));

export { GetIdentityDomainsPasswordPolicyArgs, GetIdentityDomainsPasswordPolicyResult, GetIdentityDomainsPasswordPolicyOutputArgs } from "./getIdentityDomainsPasswordPolicy";
export const getIdentityDomainsPasswordPolicy: typeof import("./getIdentityDomainsPasswordPolicy").getIdentityDomainsPasswordPolicy = null as any;
export const getIdentityDomainsPasswordPolicyOutput: typeof import("./getIdentityDomainsPasswordPolicy").getIdentityDomainsPasswordPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityDomainsPasswordPolicy","getIdentityDomainsPasswordPolicyOutput"], () => require("./getIdentityDomainsPasswordPolicy"));

export { GetIdentityDomainsPoliciesArgs, GetIdentityDomainsPoliciesResult, GetIdentityDomainsPoliciesOutputArgs } from "./getIdentityDomainsPolicies";
export const getIdentityDomainsPolicies: typeof import("./getIdentityDomainsPolicies").getIdentityDomainsPolicies = null as any;
export const getIdentityDomainsPoliciesOutput: typeof import("./getIdentityDomainsPolicies").getIdentityDomainsPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityDomainsPolicies","getIdentityDomainsPoliciesOutput"], () => require("./getIdentityDomainsPolicies"));

export { GetIdentityDomainsPolicyArgs, GetIdentityDomainsPolicyResult, GetIdentityDomainsPolicyOutputArgs } from "./getIdentityDomainsPolicy";
export const getIdentityDomainsPolicy: typeof import("./getIdentityDomainsPolicy").getIdentityDomainsPolicy = null as any;
export const getIdentityDomainsPolicyOutput: typeof import("./getIdentityDomainsPolicy").getIdentityDomainsPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityDomainsPolicy","getIdentityDomainsPolicyOutput"], () => require("./getIdentityDomainsPolicy"));

export { GetIdentityDomainsResourceTypeSchemaAttributesArgs, GetIdentityDomainsResourceTypeSchemaAttributesResult, GetIdentityDomainsResourceTypeSchemaAttributesOutputArgs } from "./getIdentityDomainsResourceTypeSchemaAttributes";
export const getIdentityDomainsResourceTypeSchemaAttributes: typeof import("./getIdentityDomainsResourceTypeSchemaAttributes").getIdentityDomainsResourceTypeSchemaAttributes = null as any;
export const getIdentityDomainsResourceTypeSchemaAttributesOutput: typeof import("./getIdentityDomainsResourceTypeSchemaAttributes").getIdentityDomainsResourceTypeSchemaAttributesOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityDomainsResourceTypeSchemaAttributes","getIdentityDomainsResourceTypeSchemaAttributesOutput"], () => require("./getIdentityDomainsResourceTypeSchemaAttributes"));

export { GetIdentityDomainsRuleArgs, GetIdentityDomainsRuleResult, GetIdentityDomainsRuleOutputArgs } from "./getIdentityDomainsRule";
export const getIdentityDomainsRule: typeof import("./getIdentityDomainsRule").getIdentityDomainsRule = null as any;
export const getIdentityDomainsRuleOutput: typeof import("./getIdentityDomainsRule").getIdentityDomainsRuleOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityDomainsRule","getIdentityDomainsRuleOutput"], () => require("./getIdentityDomainsRule"));

export { GetIdentityDomainsRulesArgs, GetIdentityDomainsRulesResult, GetIdentityDomainsRulesOutputArgs } from "./getIdentityDomainsRules";
export const getIdentityDomainsRules: typeof import("./getIdentityDomainsRules").getIdentityDomainsRules = null as any;
export const getIdentityDomainsRulesOutput: typeof import("./getIdentityDomainsRules").getIdentityDomainsRulesOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityDomainsRules","getIdentityDomainsRulesOutput"], () => require("./getIdentityDomainsRules"));

export { GetIdentityDomainsSecurityQuestionArgs, GetIdentityDomainsSecurityQuestionResult, GetIdentityDomainsSecurityQuestionOutputArgs } from "./getIdentityDomainsSecurityQuestion";
export const getIdentityDomainsSecurityQuestion: typeof import("./getIdentityDomainsSecurityQuestion").getIdentityDomainsSecurityQuestion = null as any;
export const getIdentityDomainsSecurityQuestionOutput: typeof import("./getIdentityDomainsSecurityQuestion").getIdentityDomainsSecurityQuestionOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityDomainsSecurityQuestion","getIdentityDomainsSecurityQuestionOutput"], () => require("./getIdentityDomainsSecurityQuestion"));

export { GetIdentityDomainsSecurityQuestionSettingArgs, GetIdentityDomainsSecurityQuestionSettingResult, GetIdentityDomainsSecurityQuestionSettingOutputArgs } from "./getIdentityDomainsSecurityQuestionSetting";
export const getIdentityDomainsSecurityQuestionSetting: typeof import("./getIdentityDomainsSecurityQuestionSetting").getIdentityDomainsSecurityQuestionSetting = null as any;
export const getIdentityDomainsSecurityQuestionSettingOutput: typeof import("./getIdentityDomainsSecurityQuestionSetting").getIdentityDomainsSecurityQuestionSettingOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityDomainsSecurityQuestionSetting","getIdentityDomainsSecurityQuestionSettingOutput"], () => require("./getIdentityDomainsSecurityQuestionSetting"));

export { GetIdentityDomainsSecurityQuestionSettingsArgs, GetIdentityDomainsSecurityQuestionSettingsResult, GetIdentityDomainsSecurityQuestionSettingsOutputArgs } from "./getIdentityDomainsSecurityQuestionSettings";
export const getIdentityDomainsSecurityQuestionSettings: typeof import("./getIdentityDomainsSecurityQuestionSettings").getIdentityDomainsSecurityQuestionSettings = null as any;
export const getIdentityDomainsSecurityQuestionSettingsOutput: typeof import("./getIdentityDomainsSecurityQuestionSettings").getIdentityDomainsSecurityQuestionSettingsOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityDomainsSecurityQuestionSettings","getIdentityDomainsSecurityQuestionSettingsOutput"], () => require("./getIdentityDomainsSecurityQuestionSettings"));

export { GetIdentityDomainsSecurityQuestionsArgs, GetIdentityDomainsSecurityQuestionsResult, GetIdentityDomainsSecurityQuestionsOutputArgs } from "./getIdentityDomainsSecurityQuestions";
export const getIdentityDomainsSecurityQuestions: typeof import("./getIdentityDomainsSecurityQuestions").getIdentityDomainsSecurityQuestions = null as any;
export const getIdentityDomainsSecurityQuestionsOutput: typeof import("./getIdentityDomainsSecurityQuestions").getIdentityDomainsSecurityQuestionsOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityDomainsSecurityQuestions","getIdentityDomainsSecurityQuestionsOutput"], () => require("./getIdentityDomainsSecurityQuestions"));

export { GetIdentityDomainsSelfRegistrationProfileArgs, GetIdentityDomainsSelfRegistrationProfileResult, GetIdentityDomainsSelfRegistrationProfileOutputArgs } from "./getIdentityDomainsSelfRegistrationProfile";
export const getIdentityDomainsSelfRegistrationProfile: typeof import("./getIdentityDomainsSelfRegistrationProfile").getIdentityDomainsSelfRegistrationProfile = null as any;
export const getIdentityDomainsSelfRegistrationProfileOutput: typeof import("./getIdentityDomainsSelfRegistrationProfile").getIdentityDomainsSelfRegistrationProfileOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityDomainsSelfRegistrationProfile","getIdentityDomainsSelfRegistrationProfileOutput"], () => require("./getIdentityDomainsSelfRegistrationProfile"));

export { GetIdentityDomainsSelfRegistrationProfilesArgs, GetIdentityDomainsSelfRegistrationProfilesResult, GetIdentityDomainsSelfRegistrationProfilesOutputArgs } from "./getIdentityDomainsSelfRegistrationProfiles";
export const getIdentityDomainsSelfRegistrationProfiles: typeof import("./getIdentityDomainsSelfRegistrationProfiles").getIdentityDomainsSelfRegistrationProfiles = null as any;
export const getIdentityDomainsSelfRegistrationProfilesOutput: typeof import("./getIdentityDomainsSelfRegistrationProfiles").getIdentityDomainsSelfRegistrationProfilesOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityDomainsSelfRegistrationProfiles","getIdentityDomainsSelfRegistrationProfilesOutput"], () => require("./getIdentityDomainsSelfRegistrationProfiles"));

export { GetIdentityDomainsSettingArgs, GetIdentityDomainsSettingResult, GetIdentityDomainsSettingOutputArgs } from "./getIdentityDomainsSetting";
export const getIdentityDomainsSetting: typeof import("./getIdentityDomainsSetting").getIdentityDomainsSetting = null as any;
export const getIdentityDomainsSettingOutput: typeof import("./getIdentityDomainsSetting").getIdentityDomainsSettingOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityDomainsSetting","getIdentityDomainsSettingOutput"], () => require("./getIdentityDomainsSetting"));

export { GetIdentityDomainsSettingsArgs, GetIdentityDomainsSettingsResult, GetIdentityDomainsSettingsOutputArgs } from "./getIdentityDomainsSettings";
export const getIdentityDomainsSettings: typeof import("./getIdentityDomainsSettings").getIdentityDomainsSettings = null as any;
export const getIdentityDomainsSettingsOutput: typeof import("./getIdentityDomainsSettings").getIdentityDomainsSettingsOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityDomainsSettings","getIdentityDomainsSettingsOutput"], () => require("./getIdentityDomainsSettings"));

export { GetIdentityDomainsSmtpCredentialArgs, GetIdentityDomainsSmtpCredentialResult, GetIdentityDomainsSmtpCredentialOutputArgs } from "./getIdentityDomainsSmtpCredential";
export const getIdentityDomainsSmtpCredential: typeof import("./getIdentityDomainsSmtpCredential").getIdentityDomainsSmtpCredential = null as any;
export const getIdentityDomainsSmtpCredentialOutput: typeof import("./getIdentityDomainsSmtpCredential").getIdentityDomainsSmtpCredentialOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityDomainsSmtpCredential","getIdentityDomainsSmtpCredentialOutput"], () => require("./getIdentityDomainsSmtpCredential"));

export { GetIdentityDomainsSmtpCredentialsArgs, GetIdentityDomainsSmtpCredentialsResult, GetIdentityDomainsSmtpCredentialsOutputArgs } from "./getIdentityDomainsSmtpCredentials";
export const getIdentityDomainsSmtpCredentials: typeof import("./getIdentityDomainsSmtpCredentials").getIdentityDomainsSmtpCredentials = null as any;
export const getIdentityDomainsSmtpCredentialsOutput: typeof import("./getIdentityDomainsSmtpCredentials").getIdentityDomainsSmtpCredentialsOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityDomainsSmtpCredentials","getIdentityDomainsSmtpCredentialsOutput"], () => require("./getIdentityDomainsSmtpCredentials"));

export { GetIdentityDomainsSocialIdentityProviderArgs, GetIdentityDomainsSocialIdentityProviderResult, GetIdentityDomainsSocialIdentityProviderOutputArgs } from "./getIdentityDomainsSocialIdentityProvider";
export const getIdentityDomainsSocialIdentityProvider: typeof import("./getIdentityDomainsSocialIdentityProvider").getIdentityDomainsSocialIdentityProvider = null as any;
export const getIdentityDomainsSocialIdentityProviderOutput: typeof import("./getIdentityDomainsSocialIdentityProvider").getIdentityDomainsSocialIdentityProviderOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityDomainsSocialIdentityProvider","getIdentityDomainsSocialIdentityProviderOutput"], () => require("./getIdentityDomainsSocialIdentityProvider"));

export { GetIdentityDomainsSocialIdentityProvidersArgs, GetIdentityDomainsSocialIdentityProvidersResult, GetIdentityDomainsSocialIdentityProvidersOutputArgs } from "./getIdentityDomainsSocialIdentityProviders";
export const getIdentityDomainsSocialIdentityProviders: typeof import("./getIdentityDomainsSocialIdentityProviders").getIdentityDomainsSocialIdentityProviders = null as any;
export const getIdentityDomainsSocialIdentityProvidersOutput: typeof import("./getIdentityDomainsSocialIdentityProviders").getIdentityDomainsSocialIdentityProvidersOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityDomainsSocialIdentityProviders","getIdentityDomainsSocialIdentityProvidersOutput"], () => require("./getIdentityDomainsSocialIdentityProviders"));

export { GetIdentityDomainsUserArgs, GetIdentityDomainsUserResult, GetIdentityDomainsUserOutputArgs } from "./getIdentityDomainsUser";
export const getIdentityDomainsUser: typeof import("./getIdentityDomainsUser").getIdentityDomainsUser = null as any;
export const getIdentityDomainsUserOutput: typeof import("./getIdentityDomainsUser").getIdentityDomainsUserOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityDomainsUser","getIdentityDomainsUserOutput"], () => require("./getIdentityDomainsUser"));

export { GetIdentityDomainsUserAttributesSettingArgs, GetIdentityDomainsUserAttributesSettingResult, GetIdentityDomainsUserAttributesSettingOutputArgs } from "./getIdentityDomainsUserAttributesSetting";
export const getIdentityDomainsUserAttributesSetting: typeof import("./getIdentityDomainsUserAttributesSetting").getIdentityDomainsUserAttributesSetting = null as any;
export const getIdentityDomainsUserAttributesSettingOutput: typeof import("./getIdentityDomainsUserAttributesSetting").getIdentityDomainsUserAttributesSettingOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityDomainsUserAttributesSetting","getIdentityDomainsUserAttributesSettingOutput"], () => require("./getIdentityDomainsUserAttributesSetting"));

export { GetIdentityDomainsUserAttributesSettingsArgs, GetIdentityDomainsUserAttributesSettingsResult, GetIdentityDomainsUserAttributesSettingsOutputArgs } from "./getIdentityDomainsUserAttributesSettings";
export const getIdentityDomainsUserAttributesSettings: typeof import("./getIdentityDomainsUserAttributesSettings").getIdentityDomainsUserAttributesSettings = null as any;
export const getIdentityDomainsUserAttributesSettingsOutput: typeof import("./getIdentityDomainsUserAttributesSettings").getIdentityDomainsUserAttributesSettingsOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityDomainsUserAttributesSettings","getIdentityDomainsUserAttributesSettingsOutput"], () => require("./getIdentityDomainsUserAttributesSettings"));

export { GetIdentityDomainsUserDbCredentialArgs, GetIdentityDomainsUserDbCredentialResult, GetIdentityDomainsUserDbCredentialOutputArgs } from "./getIdentityDomainsUserDbCredential";
export const getIdentityDomainsUserDbCredential: typeof import("./getIdentityDomainsUserDbCredential").getIdentityDomainsUserDbCredential = null as any;
export const getIdentityDomainsUserDbCredentialOutput: typeof import("./getIdentityDomainsUserDbCredential").getIdentityDomainsUserDbCredentialOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityDomainsUserDbCredential","getIdentityDomainsUserDbCredentialOutput"], () => require("./getIdentityDomainsUserDbCredential"));

export { GetIdentityDomainsUserDbCredentialsArgs, GetIdentityDomainsUserDbCredentialsResult, GetIdentityDomainsUserDbCredentialsOutputArgs } from "./getIdentityDomainsUserDbCredentials";
export const getIdentityDomainsUserDbCredentials: typeof import("./getIdentityDomainsUserDbCredentials").getIdentityDomainsUserDbCredentials = null as any;
export const getIdentityDomainsUserDbCredentialsOutput: typeof import("./getIdentityDomainsUserDbCredentials").getIdentityDomainsUserDbCredentialsOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityDomainsUserDbCredentials","getIdentityDomainsUserDbCredentialsOutput"], () => require("./getIdentityDomainsUserDbCredentials"));

export { GetIdentityDomainsUsersArgs, GetIdentityDomainsUsersResult, GetIdentityDomainsUsersOutputArgs } from "./getIdentityDomainsUsers";
export const getIdentityDomainsUsers: typeof import("./getIdentityDomainsUsers").getIdentityDomainsUsers = null as any;
export const getIdentityDomainsUsersOutput: typeof import("./getIdentityDomainsUsers").getIdentityDomainsUsersOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityDomainsUsers","getIdentityDomainsUsersOutput"], () => require("./getIdentityDomainsUsers"));

export { GetIdentityDynamicGroupsArgs, GetIdentityDynamicGroupsResult, GetIdentityDynamicGroupsOutputArgs } from "./getIdentityDynamicGroups";
export const getIdentityDynamicGroups: typeof import("./getIdentityDynamicGroups").getIdentityDynamicGroups = null as any;
export const getIdentityDynamicGroupsOutput: typeof import("./getIdentityDynamicGroups").getIdentityDynamicGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityDynamicGroups","getIdentityDynamicGroupsOutput"], () => require("./getIdentityDynamicGroups"));

export { GetIdentityFaultDomainsArgs, GetIdentityFaultDomainsResult, GetIdentityFaultDomainsOutputArgs } from "./getIdentityFaultDomains";
export const getIdentityFaultDomains: typeof import("./getIdentityFaultDomains").getIdentityFaultDomains = null as any;
export const getIdentityFaultDomainsOutput: typeof import("./getIdentityFaultDomains").getIdentityFaultDomainsOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityFaultDomains","getIdentityFaultDomainsOutput"], () => require("./getIdentityFaultDomains"));

export { GetIdentityGroupArgs, GetIdentityGroupResult, GetIdentityGroupOutputArgs } from "./getIdentityGroup";
export const getIdentityGroup: typeof import("./getIdentityGroup").getIdentityGroup = null as any;
export const getIdentityGroupOutput: typeof import("./getIdentityGroup").getIdentityGroupOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityGroup","getIdentityGroupOutput"], () => require("./getIdentityGroup"));

export { GetIdentityGroupsArgs, GetIdentityGroupsResult, GetIdentityGroupsOutputArgs } from "./getIdentityGroups";
export const getIdentityGroups: typeof import("./getIdentityGroups").getIdentityGroups = null as any;
export const getIdentityGroupsOutput: typeof import("./getIdentityGroups").getIdentityGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityGroups","getIdentityGroupsOutput"], () => require("./getIdentityGroups"));

export { GetIdentityIamWorkRequestArgs, GetIdentityIamWorkRequestResult, GetIdentityIamWorkRequestOutputArgs } from "./getIdentityIamWorkRequest";
export const getIdentityIamWorkRequest: typeof import("./getIdentityIamWorkRequest").getIdentityIamWorkRequest = null as any;
export const getIdentityIamWorkRequestOutput: typeof import("./getIdentityIamWorkRequest").getIdentityIamWorkRequestOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityIamWorkRequest","getIdentityIamWorkRequestOutput"], () => require("./getIdentityIamWorkRequest"));

export { GetIdentityIamWorkRequestErrorsArgs, GetIdentityIamWorkRequestErrorsResult, GetIdentityIamWorkRequestErrorsOutputArgs } from "./getIdentityIamWorkRequestErrors";
export const getIdentityIamWorkRequestErrors: typeof import("./getIdentityIamWorkRequestErrors").getIdentityIamWorkRequestErrors = null as any;
export const getIdentityIamWorkRequestErrorsOutput: typeof import("./getIdentityIamWorkRequestErrors").getIdentityIamWorkRequestErrorsOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityIamWorkRequestErrors","getIdentityIamWorkRequestErrorsOutput"], () => require("./getIdentityIamWorkRequestErrors"));

export { GetIdentityIamWorkRequestLogsArgs, GetIdentityIamWorkRequestLogsResult, GetIdentityIamWorkRequestLogsOutputArgs } from "./getIdentityIamWorkRequestLogs";
export const getIdentityIamWorkRequestLogs: typeof import("./getIdentityIamWorkRequestLogs").getIdentityIamWorkRequestLogs = null as any;
export const getIdentityIamWorkRequestLogsOutput: typeof import("./getIdentityIamWorkRequestLogs").getIdentityIamWorkRequestLogsOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityIamWorkRequestLogs","getIdentityIamWorkRequestLogsOutput"], () => require("./getIdentityIamWorkRequestLogs"));

export { GetIdentityIamWorkRequestsArgs, GetIdentityIamWorkRequestsResult, GetIdentityIamWorkRequestsOutputArgs } from "./getIdentityIamWorkRequests";
export const getIdentityIamWorkRequests: typeof import("./getIdentityIamWorkRequests").getIdentityIamWorkRequests = null as any;
export const getIdentityIamWorkRequestsOutput: typeof import("./getIdentityIamWorkRequests").getIdentityIamWorkRequestsOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityIamWorkRequests","getIdentityIamWorkRequestsOutput"], () => require("./getIdentityIamWorkRequests"));

export { GetIdentityIdentityProviderGroupsArgs, GetIdentityIdentityProviderGroupsResult, GetIdentityIdentityProviderGroupsOutputArgs } from "./getIdentityIdentityProviderGroups";
export const getIdentityIdentityProviderGroups: typeof import("./getIdentityIdentityProviderGroups").getIdentityIdentityProviderGroups = null as any;
export const getIdentityIdentityProviderGroupsOutput: typeof import("./getIdentityIdentityProviderGroups").getIdentityIdentityProviderGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityIdentityProviderGroups","getIdentityIdentityProviderGroupsOutput"], () => require("./getIdentityIdentityProviderGroups"));

export { GetIdentityIdentityProvidersArgs, GetIdentityIdentityProvidersResult, GetIdentityIdentityProvidersOutputArgs } from "./getIdentityIdentityProviders";
export const getIdentityIdentityProviders: typeof import("./getIdentityIdentityProviders").getIdentityIdentityProviders = null as any;
export const getIdentityIdentityProvidersOutput: typeof import("./getIdentityIdentityProviders").getIdentityIdentityProvidersOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityIdentityProviders","getIdentityIdentityProvidersOutput"], () => require("./getIdentityIdentityProviders"));

export { GetIdentityIdpGroupMappingsArgs, GetIdentityIdpGroupMappingsResult, GetIdentityIdpGroupMappingsOutputArgs } from "./getIdentityIdpGroupMappings";
export const getIdentityIdpGroupMappings: typeof import("./getIdentityIdpGroupMappings").getIdentityIdpGroupMappings = null as any;
export const getIdentityIdpGroupMappingsOutput: typeof import("./getIdentityIdpGroupMappings").getIdentityIdpGroupMappingsOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityIdpGroupMappings","getIdentityIdpGroupMappingsOutput"], () => require("./getIdentityIdpGroupMappings"));

export { GetIdentityNetworkSourceArgs, GetIdentityNetworkSourceResult, GetIdentityNetworkSourceOutputArgs } from "./getIdentityNetworkSource";
export const getIdentityNetworkSource: typeof import("./getIdentityNetworkSource").getIdentityNetworkSource = null as any;
export const getIdentityNetworkSourceOutput: typeof import("./getIdentityNetworkSource").getIdentityNetworkSourceOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityNetworkSource","getIdentityNetworkSourceOutput"], () => require("./getIdentityNetworkSource"));

export { GetIdentityNetworkSourcesArgs, GetIdentityNetworkSourcesResult, GetIdentityNetworkSourcesOutputArgs } from "./getIdentityNetworkSources";
export const getIdentityNetworkSources: typeof import("./getIdentityNetworkSources").getIdentityNetworkSources = null as any;
export const getIdentityNetworkSourcesOutput: typeof import("./getIdentityNetworkSources").getIdentityNetworkSourcesOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityNetworkSources","getIdentityNetworkSourcesOutput"], () => require("./getIdentityNetworkSources"));

export { GetIdentityPoliciesArgs, GetIdentityPoliciesResult, GetIdentityPoliciesOutputArgs } from "./getIdentityPolicies";
export const getIdentityPolicies: typeof import("./getIdentityPolicies").getIdentityPolicies = null as any;
export const getIdentityPoliciesOutput: typeof import("./getIdentityPolicies").getIdentityPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityPolicies","getIdentityPoliciesOutput"], () => require("./getIdentityPolicies"));

export { GetIdentityRegionSubscriptionsArgs, GetIdentityRegionSubscriptionsResult, GetIdentityRegionSubscriptionsOutputArgs } from "./getIdentityRegionSubscriptions";
export const getIdentityRegionSubscriptions: typeof import("./getIdentityRegionSubscriptions").getIdentityRegionSubscriptions = null as any;
export const getIdentityRegionSubscriptionsOutput: typeof import("./getIdentityRegionSubscriptions").getIdentityRegionSubscriptionsOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityRegionSubscriptions","getIdentityRegionSubscriptionsOutput"], () => require("./getIdentityRegionSubscriptions"));

export { GetIdentityRegionsArgs, GetIdentityRegionsResult, GetIdentityRegionsOutputArgs } from "./getIdentityRegions";
export const getIdentityRegions: typeof import("./getIdentityRegions").getIdentityRegions = null as any;
export const getIdentityRegionsOutput: typeof import("./getIdentityRegions").getIdentityRegionsOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityRegions","getIdentityRegionsOutput"], () => require("./getIdentityRegions"));

export { GetIdentitySmtpCredentialsArgs, GetIdentitySmtpCredentialsResult, GetIdentitySmtpCredentialsOutputArgs } from "./getIdentitySmtpCredentials";
export const getIdentitySmtpCredentials: typeof import("./getIdentitySmtpCredentials").getIdentitySmtpCredentials = null as any;
export const getIdentitySmtpCredentialsOutput: typeof import("./getIdentitySmtpCredentials").getIdentitySmtpCredentialsOutput = null as any;
utilities.lazyLoad(exports, ["getIdentitySmtpCredentials","getIdentitySmtpCredentialsOutput"], () => require("./getIdentitySmtpCredentials"));

export { GetIdentityTagArgs, GetIdentityTagResult, GetIdentityTagOutputArgs } from "./getIdentityTag";
export const getIdentityTag: typeof import("./getIdentityTag").getIdentityTag = null as any;
export const getIdentityTagOutput: typeof import("./getIdentityTag").getIdentityTagOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityTag","getIdentityTagOutput"], () => require("./getIdentityTag"));

export { GetIdentityTagDefaultArgs, GetIdentityTagDefaultResult, GetIdentityTagDefaultOutputArgs } from "./getIdentityTagDefault";
export const getIdentityTagDefault: typeof import("./getIdentityTagDefault").getIdentityTagDefault = null as any;
export const getIdentityTagDefaultOutput: typeof import("./getIdentityTagDefault").getIdentityTagDefaultOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityTagDefault","getIdentityTagDefaultOutput"], () => require("./getIdentityTagDefault"));

export { GetIdentityTagDefaultsArgs, GetIdentityTagDefaultsResult, GetIdentityTagDefaultsOutputArgs } from "./getIdentityTagDefaults";
export const getIdentityTagDefaults: typeof import("./getIdentityTagDefaults").getIdentityTagDefaults = null as any;
export const getIdentityTagDefaultsOutput: typeof import("./getIdentityTagDefaults").getIdentityTagDefaultsOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityTagDefaults","getIdentityTagDefaultsOutput"], () => require("./getIdentityTagDefaults"));

export { GetIdentityTagNamespacesArgs, GetIdentityTagNamespacesResult, GetIdentityTagNamespacesOutputArgs } from "./getIdentityTagNamespaces";
export const getIdentityTagNamespaces: typeof import("./getIdentityTagNamespaces").getIdentityTagNamespaces = null as any;
export const getIdentityTagNamespacesOutput: typeof import("./getIdentityTagNamespaces").getIdentityTagNamespacesOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityTagNamespaces","getIdentityTagNamespacesOutput"], () => require("./getIdentityTagNamespaces"));

export { GetIdentityTagStandardTagNamespaceTemplateArgs, GetIdentityTagStandardTagNamespaceTemplateResult, GetIdentityTagStandardTagNamespaceTemplateOutputArgs } from "./getIdentityTagStandardTagNamespaceTemplate";
export const getIdentityTagStandardTagNamespaceTemplate: typeof import("./getIdentityTagStandardTagNamespaceTemplate").getIdentityTagStandardTagNamespaceTemplate = null as any;
export const getIdentityTagStandardTagNamespaceTemplateOutput: typeof import("./getIdentityTagStandardTagNamespaceTemplate").getIdentityTagStandardTagNamespaceTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityTagStandardTagNamespaceTemplate","getIdentityTagStandardTagNamespaceTemplateOutput"], () => require("./getIdentityTagStandardTagNamespaceTemplate"));

export { GetIdentityTagStandardTagNamespaceTemplatesArgs, GetIdentityTagStandardTagNamespaceTemplatesResult, GetIdentityTagStandardTagNamespaceTemplatesOutputArgs } from "./getIdentityTagStandardTagNamespaceTemplates";
export const getIdentityTagStandardTagNamespaceTemplates: typeof import("./getIdentityTagStandardTagNamespaceTemplates").getIdentityTagStandardTagNamespaceTemplates = null as any;
export const getIdentityTagStandardTagNamespaceTemplatesOutput: typeof import("./getIdentityTagStandardTagNamespaceTemplates").getIdentityTagStandardTagNamespaceTemplatesOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityTagStandardTagNamespaceTemplates","getIdentityTagStandardTagNamespaceTemplatesOutput"], () => require("./getIdentityTagStandardTagNamespaceTemplates"));

export { GetIdentityTagsArgs, GetIdentityTagsResult, GetIdentityTagsOutputArgs } from "./getIdentityTags";
export const getIdentityTags: typeof import("./getIdentityTags").getIdentityTags = null as any;
export const getIdentityTagsOutput: typeof import("./getIdentityTags").getIdentityTagsOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityTags","getIdentityTagsOutput"], () => require("./getIdentityTags"));

export { GetIdentityTenancyArgs, GetIdentityTenancyResult, GetIdentityTenancyOutputArgs } from "./getIdentityTenancy";
export const getIdentityTenancy: typeof import("./getIdentityTenancy").getIdentityTenancy = null as any;
export const getIdentityTenancyOutput: typeof import("./getIdentityTenancy").getIdentityTenancyOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityTenancy","getIdentityTenancyOutput"], () => require("./getIdentityTenancy"));

export { GetIdentityUiPasswordArgs, GetIdentityUiPasswordResult, GetIdentityUiPasswordOutputArgs } from "./getIdentityUiPassword";
export const getIdentityUiPassword: typeof import("./getIdentityUiPassword").getIdentityUiPassword = null as any;
export const getIdentityUiPasswordOutput: typeof import("./getIdentityUiPassword").getIdentityUiPasswordOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityUiPassword","getIdentityUiPasswordOutput"], () => require("./getIdentityUiPassword"));

export { GetIdentityUserArgs, GetIdentityUserResult, GetIdentityUserOutputArgs } from "./getIdentityUser";
export const getIdentityUser: typeof import("./getIdentityUser").getIdentityUser = null as any;
export const getIdentityUserOutput: typeof import("./getIdentityUser").getIdentityUserOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityUser","getIdentityUserOutput"], () => require("./getIdentityUser"));

export { GetIdentityUserGroupMembershipsArgs, GetIdentityUserGroupMembershipsResult, GetIdentityUserGroupMembershipsOutputArgs } from "./getIdentityUserGroupMemberships";
export const getIdentityUserGroupMemberships: typeof import("./getIdentityUserGroupMemberships").getIdentityUserGroupMemberships = null as any;
export const getIdentityUserGroupMembershipsOutput: typeof import("./getIdentityUserGroupMemberships").getIdentityUserGroupMembershipsOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityUserGroupMemberships","getIdentityUserGroupMembershipsOutput"], () => require("./getIdentityUserGroupMemberships"));

export { GetIdentityUsersArgs, GetIdentityUsersResult, GetIdentityUsersOutputArgs } from "./getIdentityUsers";
export const getIdentityUsers: typeof import("./getIdentityUsers").getIdentityUsers = null as any;
export const getIdentityUsersOutput: typeof import("./getIdentityUsers").getIdentityUsersOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityUsers","getIdentityUsersOutput"], () => require("./getIdentityUsers"));

export { GetIntegrationIntegrationInstanceArgs, GetIntegrationIntegrationInstanceResult, GetIntegrationIntegrationInstanceOutputArgs } from "./getIntegrationIntegrationInstance";
export const getIntegrationIntegrationInstance: typeof import("./getIntegrationIntegrationInstance").getIntegrationIntegrationInstance = null as any;
export const getIntegrationIntegrationInstanceOutput: typeof import("./getIntegrationIntegrationInstance").getIntegrationIntegrationInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getIntegrationIntegrationInstance","getIntegrationIntegrationInstanceOutput"], () => require("./getIntegrationIntegrationInstance"));

export { GetIntegrationIntegrationInstancesArgs, GetIntegrationIntegrationInstancesResult, GetIntegrationIntegrationInstancesOutputArgs } from "./getIntegrationIntegrationInstances";
export const getIntegrationIntegrationInstances: typeof import("./getIntegrationIntegrationInstances").getIntegrationIntegrationInstances = null as any;
export const getIntegrationIntegrationInstancesOutput: typeof import("./getIntegrationIntegrationInstances").getIntegrationIntegrationInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getIntegrationIntegrationInstances","getIntegrationIntegrationInstancesOutput"], () => require("./getIntegrationIntegrationInstances"));

export { GetJmsAgentInstallersArgs, GetJmsAgentInstallersResult, GetJmsAgentInstallersOutputArgs } from "./getJmsAgentInstallers";
export const getJmsAgentInstallers: typeof import("./getJmsAgentInstallers").getJmsAgentInstallers = null as any;
export const getJmsAgentInstallersOutput: typeof import("./getJmsAgentInstallers").getJmsAgentInstallersOutput = null as any;
utilities.lazyLoad(exports, ["getJmsAgentInstallers","getJmsAgentInstallersOutput"], () => require("./getJmsAgentInstallers"));

export { GetJmsAnnouncementsArgs, GetJmsAnnouncementsResult, GetJmsAnnouncementsOutputArgs } from "./getJmsAnnouncements";
export const getJmsAnnouncements: typeof import("./getJmsAnnouncements").getJmsAnnouncements = null as any;
export const getJmsAnnouncementsOutput: typeof import("./getJmsAnnouncements").getJmsAnnouncementsOutput = null as any;
utilities.lazyLoad(exports, ["getJmsAnnouncements","getJmsAnnouncementsOutput"], () => require("./getJmsAnnouncements"));

export { GetJmsFleetArgs, GetJmsFleetResult, GetJmsFleetOutputArgs } from "./getJmsFleet";
export const getJmsFleet: typeof import("./getJmsFleet").getJmsFleet = null as any;
export const getJmsFleetOutput: typeof import("./getJmsFleet").getJmsFleetOutput = null as any;
utilities.lazyLoad(exports, ["getJmsFleet","getJmsFleetOutput"], () => require("./getJmsFleet"));

export { GetJmsFleetAdvancedFeatureConfigurationArgs, GetJmsFleetAdvancedFeatureConfigurationResult, GetJmsFleetAdvancedFeatureConfigurationOutputArgs } from "./getJmsFleetAdvancedFeatureConfiguration";
export const getJmsFleetAdvancedFeatureConfiguration: typeof import("./getJmsFleetAdvancedFeatureConfiguration").getJmsFleetAdvancedFeatureConfiguration = null as any;
export const getJmsFleetAdvancedFeatureConfigurationOutput: typeof import("./getJmsFleetAdvancedFeatureConfiguration").getJmsFleetAdvancedFeatureConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getJmsFleetAdvancedFeatureConfiguration","getJmsFleetAdvancedFeatureConfigurationOutput"], () => require("./getJmsFleetAdvancedFeatureConfiguration"));

export { GetJmsFleetBlocklistsArgs, GetJmsFleetBlocklistsResult, GetJmsFleetBlocklistsOutputArgs } from "./getJmsFleetBlocklists";
export const getJmsFleetBlocklists: typeof import("./getJmsFleetBlocklists").getJmsFleetBlocklists = null as any;
export const getJmsFleetBlocklistsOutput: typeof import("./getJmsFleetBlocklists").getJmsFleetBlocklistsOutput = null as any;
utilities.lazyLoad(exports, ["getJmsFleetBlocklists","getJmsFleetBlocklistsOutput"], () => require("./getJmsFleetBlocklists"));

export { GetJmsFleetCryptoAnalysisResultArgs, GetJmsFleetCryptoAnalysisResultResult, GetJmsFleetCryptoAnalysisResultOutputArgs } from "./getJmsFleetCryptoAnalysisResult";
export const getJmsFleetCryptoAnalysisResult: typeof import("./getJmsFleetCryptoAnalysisResult").getJmsFleetCryptoAnalysisResult = null as any;
export const getJmsFleetCryptoAnalysisResultOutput: typeof import("./getJmsFleetCryptoAnalysisResult").getJmsFleetCryptoAnalysisResultOutput = null as any;
utilities.lazyLoad(exports, ["getJmsFleetCryptoAnalysisResult","getJmsFleetCryptoAnalysisResultOutput"], () => require("./getJmsFleetCryptoAnalysisResult"));

export { GetJmsFleetCryptoAnalysisResultsArgs, GetJmsFleetCryptoAnalysisResultsResult, GetJmsFleetCryptoAnalysisResultsOutputArgs } from "./getJmsFleetCryptoAnalysisResults";
export const getJmsFleetCryptoAnalysisResults: typeof import("./getJmsFleetCryptoAnalysisResults").getJmsFleetCryptoAnalysisResults = null as any;
export const getJmsFleetCryptoAnalysisResultsOutput: typeof import("./getJmsFleetCryptoAnalysisResults").getJmsFleetCryptoAnalysisResultsOutput = null as any;
utilities.lazyLoad(exports, ["getJmsFleetCryptoAnalysisResults","getJmsFleetCryptoAnalysisResultsOutput"], () => require("./getJmsFleetCryptoAnalysisResults"));

export { GetJmsFleetDiagnosesArgs, GetJmsFleetDiagnosesResult, GetJmsFleetDiagnosesOutputArgs } from "./getJmsFleetDiagnoses";
export const getJmsFleetDiagnoses: typeof import("./getJmsFleetDiagnoses").getJmsFleetDiagnoses = null as any;
export const getJmsFleetDiagnosesOutput: typeof import("./getJmsFleetDiagnoses").getJmsFleetDiagnosesOutput = null as any;
utilities.lazyLoad(exports, ["getJmsFleetDiagnoses","getJmsFleetDiagnosesOutput"], () => require("./getJmsFleetDiagnoses"));

export { GetJmsFleetDrsFileArgs, GetJmsFleetDrsFileResult, GetJmsFleetDrsFileOutputArgs } from "./getJmsFleetDrsFile";
export const getJmsFleetDrsFile: typeof import("./getJmsFleetDrsFile").getJmsFleetDrsFile = null as any;
export const getJmsFleetDrsFileOutput: typeof import("./getJmsFleetDrsFile").getJmsFleetDrsFileOutput = null as any;
utilities.lazyLoad(exports, ["getJmsFleetDrsFile","getJmsFleetDrsFileOutput"], () => require("./getJmsFleetDrsFile"));

export { GetJmsFleetDrsFilesArgs, GetJmsFleetDrsFilesResult, GetJmsFleetDrsFilesOutputArgs } from "./getJmsFleetDrsFiles";
export const getJmsFleetDrsFiles: typeof import("./getJmsFleetDrsFiles").getJmsFleetDrsFiles = null as any;
export const getJmsFleetDrsFilesOutput: typeof import("./getJmsFleetDrsFiles").getJmsFleetDrsFilesOutput = null as any;
utilities.lazyLoad(exports, ["getJmsFleetDrsFiles","getJmsFleetDrsFilesOutput"], () => require("./getJmsFleetDrsFiles"));

export { GetJmsFleetExportSettingArgs, GetJmsFleetExportSettingResult, GetJmsFleetExportSettingOutputArgs } from "./getJmsFleetExportSetting";
export const getJmsFleetExportSetting: typeof import("./getJmsFleetExportSetting").getJmsFleetExportSetting = null as any;
export const getJmsFleetExportSettingOutput: typeof import("./getJmsFleetExportSetting").getJmsFleetExportSettingOutput = null as any;
utilities.lazyLoad(exports, ["getJmsFleetExportSetting","getJmsFleetExportSettingOutput"], () => require("./getJmsFleetExportSetting"));

export { GetJmsFleetExportStatusArgs, GetJmsFleetExportStatusResult, GetJmsFleetExportStatusOutputArgs } from "./getJmsFleetExportStatus";
export const getJmsFleetExportStatus: typeof import("./getJmsFleetExportStatus").getJmsFleetExportStatus = null as any;
export const getJmsFleetExportStatusOutput: typeof import("./getJmsFleetExportStatus").getJmsFleetExportStatusOutput = null as any;
utilities.lazyLoad(exports, ["getJmsFleetExportStatus","getJmsFleetExportStatusOutput"], () => require("./getJmsFleetExportStatus"));

export { GetJmsFleetInstallationSiteArgs, GetJmsFleetInstallationSiteResult, GetJmsFleetInstallationSiteOutputArgs } from "./getJmsFleetInstallationSite";
export const getJmsFleetInstallationSite: typeof import("./getJmsFleetInstallationSite").getJmsFleetInstallationSite = null as any;
export const getJmsFleetInstallationSiteOutput: typeof import("./getJmsFleetInstallationSite").getJmsFleetInstallationSiteOutput = null as any;
utilities.lazyLoad(exports, ["getJmsFleetInstallationSite","getJmsFleetInstallationSiteOutput"], () => require("./getJmsFleetInstallationSite"));

export { GetJmsFleetInstallationSitesArgs, GetJmsFleetInstallationSitesResult, GetJmsFleetInstallationSitesOutputArgs } from "./getJmsFleetInstallationSites";
export const getJmsFleetInstallationSites: typeof import("./getJmsFleetInstallationSites").getJmsFleetInstallationSites = null as any;
export const getJmsFleetInstallationSitesOutput: typeof import("./getJmsFleetInstallationSites").getJmsFleetInstallationSitesOutput = null as any;
utilities.lazyLoad(exports, ["getJmsFleetInstallationSites","getJmsFleetInstallationSitesOutput"], () => require("./getJmsFleetInstallationSites"));

export { GetJmsFleetJavaMigrationAnalysisResultArgs, GetJmsFleetJavaMigrationAnalysisResultResult, GetJmsFleetJavaMigrationAnalysisResultOutputArgs } from "./getJmsFleetJavaMigrationAnalysisResult";
export const getJmsFleetJavaMigrationAnalysisResult: typeof import("./getJmsFleetJavaMigrationAnalysisResult").getJmsFleetJavaMigrationAnalysisResult = null as any;
export const getJmsFleetJavaMigrationAnalysisResultOutput: typeof import("./getJmsFleetJavaMigrationAnalysisResult").getJmsFleetJavaMigrationAnalysisResultOutput = null as any;
utilities.lazyLoad(exports, ["getJmsFleetJavaMigrationAnalysisResult","getJmsFleetJavaMigrationAnalysisResultOutput"], () => require("./getJmsFleetJavaMigrationAnalysisResult"));

export { GetJmsFleetJavaMigrationAnalysisResultsArgs, GetJmsFleetJavaMigrationAnalysisResultsResult, GetJmsFleetJavaMigrationAnalysisResultsOutputArgs } from "./getJmsFleetJavaMigrationAnalysisResults";
export const getJmsFleetJavaMigrationAnalysisResults: typeof import("./getJmsFleetJavaMigrationAnalysisResults").getJmsFleetJavaMigrationAnalysisResults = null as any;
export const getJmsFleetJavaMigrationAnalysisResultsOutput: typeof import("./getJmsFleetJavaMigrationAnalysisResults").getJmsFleetJavaMigrationAnalysisResultsOutput = null as any;
utilities.lazyLoad(exports, ["getJmsFleetJavaMigrationAnalysisResults","getJmsFleetJavaMigrationAnalysisResultsOutput"], () => require("./getJmsFleetJavaMigrationAnalysisResults"));

export { GetJmsFleetPerformanceTuningAnalysisResultArgs, GetJmsFleetPerformanceTuningAnalysisResultResult, GetJmsFleetPerformanceTuningAnalysisResultOutputArgs } from "./getJmsFleetPerformanceTuningAnalysisResult";
export const getJmsFleetPerformanceTuningAnalysisResult: typeof import("./getJmsFleetPerformanceTuningAnalysisResult").getJmsFleetPerformanceTuningAnalysisResult = null as any;
export const getJmsFleetPerformanceTuningAnalysisResultOutput: typeof import("./getJmsFleetPerformanceTuningAnalysisResult").getJmsFleetPerformanceTuningAnalysisResultOutput = null as any;
utilities.lazyLoad(exports, ["getJmsFleetPerformanceTuningAnalysisResult","getJmsFleetPerformanceTuningAnalysisResultOutput"], () => require("./getJmsFleetPerformanceTuningAnalysisResult"));

export { GetJmsFleetPerformanceTuningAnalysisResultsArgs, GetJmsFleetPerformanceTuningAnalysisResultsResult, GetJmsFleetPerformanceTuningAnalysisResultsOutputArgs } from "./getJmsFleetPerformanceTuningAnalysisResults";
export const getJmsFleetPerformanceTuningAnalysisResults: typeof import("./getJmsFleetPerformanceTuningAnalysisResults").getJmsFleetPerformanceTuningAnalysisResults = null as any;
export const getJmsFleetPerformanceTuningAnalysisResultsOutput: typeof import("./getJmsFleetPerformanceTuningAnalysisResults").getJmsFleetPerformanceTuningAnalysisResultsOutput = null as any;
utilities.lazyLoad(exports, ["getJmsFleetPerformanceTuningAnalysisResults","getJmsFleetPerformanceTuningAnalysisResultsOutput"], () => require("./getJmsFleetPerformanceTuningAnalysisResults"));

export { GetJmsFleetsArgs, GetJmsFleetsResult, GetJmsFleetsOutputArgs } from "./getJmsFleets";
export const getJmsFleets: typeof import("./getJmsFleets").getJmsFleets = null as any;
export const getJmsFleetsOutput: typeof import("./getJmsFleets").getJmsFleetsOutput = null as any;
utilities.lazyLoad(exports, ["getJmsFleets","getJmsFleetsOutput"], () => require("./getJmsFleets"));

export { GetJmsJavaDownloadsJavaDownloadRecordsArgs, GetJmsJavaDownloadsJavaDownloadRecordsResult, GetJmsJavaDownloadsJavaDownloadRecordsOutputArgs } from "./getJmsJavaDownloadsJavaDownloadRecords";
export const getJmsJavaDownloadsJavaDownloadRecords: typeof import("./getJmsJavaDownloadsJavaDownloadRecords").getJmsJavaDownloadsJavaDownloadRecords = null as any;
export const getJmsJavaDownloadsJavaDownloadRecordsOutput: typeof import("./getJmsJavaDownloadsJavaDownloadRecords").getJmsJavaDownloadsJavaDownloadRecordsOutput = null as any;
utilities.lazyLoad(exports, ["getJmsJavaDownloadsJavaDownloadRecords","getJmsJavaDownloadsJavaDownloadRecordsOutput"], () => require("./getJmsJavaDownloadsJavaDownloadRecords"));

export { GetJmsJavaDownloadsJavaDownloadReportArgs, GetJmsJavaDownloadsJavaDownloadReportResult, GetJmsJavaDownloadsJavaDownloadReportOutputArgs } from "./getJmsJavaDownloadsJavaDownloadReport";
export const getJmsJavaDownloadsJavaDownloadReport: typeof import("./getJmsJavaDownloadsJavaDownloadReport").getJmsJavaDownloadsJavaDownloadReport = null as any;
export const getJmsJavaDownloadsJavaDownloadReportOutput: typeof import("./getJmsJavaDownloadsJavaDownloadReport").getJmsJavaDownloadsJavaDownloadReportOutput = null as any;
utilities.lazyLoad(exports, ["getJmsJavaDownloadsJavaDownloadReport","getJmsJavaDownloadsJavaDownloadReportOutput"], () => require("./getJmsJavaDownloadsJavaDownloadReport"));

export { GetJmsJavaDownloadsJavaDownloadReportContentArgs, GetJmsJavaDownloadsJavaDownloadReportContentResult, GetJmsJavaDownloadsJavaDownloadReportContentOutputArgs } from "./getJmsJavaDownloadsJavaDownloadReportContent";
export const getJmsJavaDownloadsJavaDownloadReportContent: typeof import("./getJmsJavaDownloadsJavaDownloadReportContent").getJmsJavaDownloadsJavaDownloadReportContent = null as any;
export const getJmsJavaDownloadsJavaDownloadReportContentOutput: typeof import("./getJmsJavaDownloadsJavaDownloadReportContent").getJmsJavaDownloadsJavaDownloadReportContentOutput = null as any;
utilities.lazyLoad(exports, ["getJmsJavaDownloadsJavaDownloadReportContent","getJmsJavaDownloadsJavaDownloadReportContentOutput"], () => require("./getJmsJavaDownloadsJavaDownloadReportContent"));

export { GetJmsJavaDownloadsJavaDownloadReportsArgs, GetJmsJavaDownloadsJavaDownloadReportsResult, GetJmsJavaDownloadsJavaDownloadReportsOutputArgs } from "./getJmsJavaDownloadsJavaDownloadReports";
export const getJmsJavaDownloadsJavaDownloadReports: typeof import("./getJmsJavaDownloadsJavaDownloadReports").getJmsJavaDownloadsJavaDownloadReports = null as any;
export const getJmsJavaDownloadsJavaDownloadReportsOutput: typeof import("./getJmsJavaDownloadsJavaDownloadReports").getJmsJavaDownloadsJavaDownloadReportsOutput = null as any;
utilities.lazyLoad(exports, ["getJmsJavaDownloadsJavaDownloadReports","getJmsJavaDownloadsJavaDownloadReportsOutput"], () => require("./getJmsJavaDownloadsJavaDownloadReports"));

export { GetJmsJavaDownloadsJavaDownloadTokenArgs, GetJmsJavaDownloadsJavaDownloadTokenResult, GetJmsJavaDownloadsJavaDownloadTokenOutputArgs } from "./getJmsJavaDownloadsJavaDownloadToken";
export const getJmsJavaDownloadsJavaDownloadToken: typeof import("./getJmsJavaDownloadsJavaDownloadToken").getJmsJavaDownloadsJavaDownloadToken = null as any;
export const getJmsJavaDownloadsJavaDownloadTokenOutput: typeof import("./getJmsJavaDownloadsJavaDownloadToken").getJmsJavaDownloadsJavaDownloadTokenOutput = null as any;
utilities.lazyLoad(exports, ["getJmsJavaDownloadsJavaDownloadToken","getJmsJavaDownloadsJavaDownloadTokenOutput"], () => require("./getJmsJavaDownloadsJavaDownloadToken"));

export { GetJmsJavaDownloadsJavaDownloadTokensArgs, GetJmsJavaDownloadsJavaDownloadTokensResult, GetJmsJavaDownloadsJavaDownloadTokensOutputArgs } from "./getJmsJavaDownloadsJavaDownloadTokens";
export const getJmsJavaDownloadsJavaDownloadTokens: typeof import("./getJmsJavaDownloadsJavaDownloadTokens").getJmsJavaDownloadsJavaDownloadTokens = null as any;
export const getJmsJavaDownloadsJavaDownloadTokensOutput: typeof import("./getJmsJavaDownloadsJavaDownloadTokens").getJmsJavaDownloadsJavaDownloadTokensOutput = null as any;
utilities.lazyLoad(exports, ["getJmsJavaDownloadsJavaDownloadTokens","getJmsJavaDownloadsJavaDownloadTokensOutput"], () => require("./getJmsJavaDownloadsJavaDownloadTokens"));

export { GetJmsJavaDownloadsJavaLicenseArgs, GetJmsJavaDownloadsJavaLicenseResult, GetJmsJavaDownloadsJavaLicenseOutputArgs } from "./getJmsJavaDownloadsJavaLicense";
export const getJmsJavaDownloadsJavaLicense: typeof import("./getJmsJavaDownloadsJavaLicense").getJmsJavaDownloadsJavaLicense = null as any;
export const getJmsJavaDownloadsJavaLicenseOutput: typeof import("./getJmsJavaDownloadsJavaLicense").getJmsJavaDownloadsJavaLicenseOutput = null as any;
utilities.lazyLoad(exports, ["getJmsJavaDownloadsJavaLicense","getJmsJavaDownloadsJavaLicenseOutput"], () => require("./getJmsJavaDownloadsJavaLicense"));

export { GetJmsJavaDownloadsJavaLicenseAcceptanceRecordArgs, GetJmsJavaDownloadsJavaLicenseAcceptanceRecordResult, GetJmsJavaDownloadsJavaLicenseAcceptanceRecordOutputArgs } from "./getJmsJavaDownloadsJavaLicenseAcceptanceRecord";
export const getJmsJavaDownloadsJavaLicenseAcceptanceRecord: typeof import("./getJmsJavaDownloadsJavaLicenseAcceptanceRecord").getJmsJavaDownloadsJavaLicenseAcceptanceRecord = null as any;
export const getJmsJavaDownloadsJavaLicenseAcceptanceRecordOutput: typeof import("./getJmsJavaDownloadsJavaLicenseAcceptanceRecord").getJmsJavaDownloadsJavaLicenseAcceptanceRecordOutput = null as any;
utilities.lazyLoad(exports, ["getJmsJavaDownloadsJavaLicenseAcceptanceRecord","getJmsJavaDownloadsJavaLicenseAcceptanceRecordOutput"], () => require("./getJmsJavaDownloadsJavaLicenseAcceptanceRecord"));

export { GetJmsJavaDownloadsJavaLicenseAcceptanceRecordsArgs, GetJmsJavaDownloadsJavaLicenseAcceptanceRecordsResult, GetJmsJavaDownloadsJavaLicenseAcceptanceRecordsOutputArgs } from "./getJmsJavaDownloadsJavaLicenseAcceptanceRecords";
export const getJmsJavaDownloadsJavaLicenseAcceptanceRecords: typeof import("./getJmsJavaDownloadsJavaLicenseAcceptanceRecords").getJmsJavaDownloadsJavaLicenseAcceptanceRecords = null as any;
export const getJmsJavaDownloadsJavaLicenseAcceptanceRecordsOutput: typeof import("./getJmsJavaDownloadsJavaLicenseAcceptanceRecords").getJmsJavaDownloadsJavaLicenseAcceptanceRecordsOutput = null as any;
utilities.lazyLoad(exports, ["getJmsJavaDownloadsJavaLicenseAcceptanceRecords","getJmsJavaDownloadsJavaLicenseAcceptanceRecordsOutput"], () => require("./getJmsJavaDownloadsJavaLicenseAcceptanceRecords"));

export { GetJmsJavaDownloadsJavaLicensesArgs, GetJmsJavaDownloadsJavaLicensesResult, GetJmsJavaDownloadsJavaLicensesOutputArgs } from "./getJmsJavaDownloadsJavaLicenses";
export const getJmsJavaDownloadsJavaLicenses: typeof import("./getJmsJavaDownloadsJavaLicenses").getJmsJavaDownloadsJavaLicenses = null as any;
export const getJmsJavaDownloadsJavaLicensesOutput: typeof import("./getJmsJavaDownloadsJavaLicenses").getJmsJavaDownloadsJavaLicensesOutput = null as any;
utilities.lazyLoad(exports, ["getJmsJavaDownloadsJavaLicenses","getJmsJavaDownloadsJavaLicensesOutput"], () => require("./getJmsJavaDownloadsJavaLicenses"));

export { GetJmsJavaFamiliesArgs, GetJmsJavaFamiliesResult, GetJmsJavaFamiliesOutputArgs } from "./getJmsJavaFamilies";
export const getJmsJavaFamilies: typeof import("./getJmsJavaFamilies").getJmsJavaFamilies = null as any;
export const getJmsJavaFamiliesOutput: typeof import("./getJmsJavaFamilies").getJmsJavaFamiliesOutput = null as any;
utilities.lazyLoad(exports, ["getJmsJavaFamilies","getJmsJavaFamiliesOutput"], () => require("./getJmsJavaFamilies"));

export { GetJmsJavaFamilyArgs, GetJmsJavaFamilyResult, GetJmsJavaFamilyOutputArgs } from "./getJmsJavaFamily";
export const getJmsJavaFamily: typeof import("./getJmsJavaFamily").getJmsJavaFamily = null as any;
export const getJmsJavaFamilyOutput: typeof import("./getJmsJavaFamily").getJmsJavaFamilyOutput = null as any;
utilities.lazyLoad(exports, ["getJmsJavaFamily","getJmsJavaFamilyOutput"], () => require("./getJmsJavaFamily"));

export { GetJmsJavaReleaseArgs, GetJmsJavaReleaseResult, GetJmsJavaReleaseOutputArgs } from "./getJmsJavaRelease";
export const getJmsJavaRelease: typeof import("./getJmsJavaRelease").getJmsJavaRelease = null as any;
export const getJmsJavaReleaseOutput: typeof import("./getJmsJavaRelease").getJmsJavaReleaseOutput = null as any;
utilities.lazyLoad(exports, ["getJmsJavaRelease","getJmsJavaReleaseOutput"], () => require("./getJmsJavaRelease"));

export { GetJmsJavaReleasesArgs, GetJmsJavaReleasesResult, GetJmsJavaReleasesOutputArgs } from "./getJmsJavaReleases";
export const getJmsJavaReleases: typeof import("./getJmsJavaReleases").getJmsJavaReleases = null as any;
export const getJmsJavaReleasesOutput: typeof import("./getJmsJavaReleases").getJmsJavaReleasesOutput = null as any;
utilities.lazyLoad(exports, ["getJmsJavaReleases","getJmsJavaReleasesOutput"], () => require("./getJmsJavaReleases"));

export { GetJmsJmsPluginArgs, GetJmsJmsPluginResult, GetJmsJmsPluginOutputArgs } from "./getJmsJmsPlugin";
export const getJmsJmsPlugin: typeof import("./getJmsJmsPlugin").getJmsJmsPlugin = null as any;
export const getJmsJmsPluginOutput: typeof import("./getJmsJmsPlugin").getJmsJmsPluginOutput = null as any;
utilities.lazyLoad(exports, ["getJmsJmsPlugin","getJmsJmsPluginOutput"], () => require("./getJmsJmsPlugin"));

export { GetJmsJmsPluginsArgs, GetJmsJmsPluginsResult, GetJmsJmsPluginsOutputArgs } from "./getJmsJmsPlugins";
export const getJmsJmsPlugins: typeof import("./getJmsJmsPlugins").getJmsJmsPlugins = null as any;
export const getJmsJmsPluginsOutput: typeof import("./getJmsJmsPlugins").getJmsJmsPluginsOutput = null as any;
utilities.lazyLoad(exports, ["getJmsJmsPlugins","getJmsJmsPluginsOutput"], () => require("./getJmsJmsPlugins"));

export { GetJmsListJreUsageArgs, GetJmsListJreUsageResult, GetJmsListJreUsageOutputArgs } from "./getJmsListJreUsage";
export const getJmsListJreUsage: typeof import("./getJmsListJreUsage").getJmsListJreUsage = null as any;
export const getJmsListJreUsageOutput: typeof import("./getJmsListJreUsage").getJmsListJreUsageOutput = null as any;
utilities.lazyLoad(exports, ["getJmsListJreUsage","getJmsListJreUsageOutput"], () => require("./getJmsListJreUsage"));

export { GetJmsSummarizeResourceInventoryArgs, GetJmsSummarizeResourceInventoryResult, GetJmsSummarizeResourceInventoryOutputArgs } from "./getJmsSummarizeResourceInventory";
export const getJmsSummarizeResourceInventory: typeof import("./getJmsSummarizeResourceInventory").getJmsSummarizeResourceInventory = null as any;
export const getJmsSummarizeResourceInventoryOutput: typeof import("./getJmsSummarizeResourceInventory").getJmsSummarizeResourceInventoryOutput = null as any;
utilities.lazyLoad(exports, ["getJmsSummarizeResourceInventory","getJmsSummarizeResourceInventoryOutput"], () => require("./getJmsSummarizeResourceInventory"));

export { GetKmsDecryptedDataArgs, GetKmsDecryptedDataResult, GetKmsDecryptedDataOutputArgs } from "./getKmsDecryptedData";
export const getKmsDecryptedData: typeof import("./getKmsDecryptedData").getKmsDecryptedData = null as any;
export const getKmsDecryptedDataOutput: typeof import("./getKmsDecryptedData").getKmsDecryptedDataOutput = null as any;
utilities.lazyLoad(exports, ["getKmsDecryptedData","getKmsDecryptedDataOutput"], () => require("./getKmsDecryptedData"));

export { GetKmsEkmsPrivateEndpointArgs, GetKmsEkmsPrivateEndpointResult, GetKmsEkmsPrivateEndpointOutputArgs } from "./getKmsEkmsPrivateEndpoint";
export const getKmsEkmsPrivateEndpoint: typeof import("./getKmsEkmsPrivateEndpoint").getKmsEkmsPrivateEndpoint = null as any;
export const getKmsEkmsPrivateEndpointOutput: typeof import("./getKmsEkmsPrivateEndpoint").getKmsEkmsPrivateEndpointOutput = null as any;
utilities.lazyLoad(exports, ["getKmsEkmsPrivateEndpoint","getKmsEkmsPrivateEndpointOutput"], () => require("./getKmsEkmsPrivateEndpoint"));

export { GetKmsEkmsPrivateEndpointsArgs, GetKmsEkmsPrivateEndpointsResult, GetKmsEkmsPrivateEndpointsOutputArgs } from "./getKmsEkmsPrivateEndpoints";
export const getKmsEkmsPrivateEndpoints: typeof import("./getKmsEkmsPrivateEndpoints").getKmsEkmsPrivateEndpoints = null as any;
export const getKmsEkmsPrivateEndpointsOutput: typeof import("./getKmsEkmsPrivateEndpoints").getKmsEkmsPrivateEndpointsOutput = null as any;
utilities.lazyLoad(exports, ["getKmsEkmsPrivateEndpoints","getKmsEkmsPrivateEndpointsOutput"], () => require("./getKmsEkmsPrivateEndpoints"));

export { GetKmsEncryptedDataArgs, GetKmsEncryptedDataResult, GetKmsEncryptedDataOutputArgs } from "./getKmsEncryptedData";
export const getKmsEncryptedData: typeof import("./getKmsEncryptedData").getKmsEncryptedData = null as any;
export const getKmsEncryptedDataOutput: typeof import("./getKmsEncryptedData").getKmsEncryptedDataOutput = null as any;
utilities.lazyLoad(exports, ["getKmsEncryptedData","getKmsEncryptedDataOutput"], () => require("./getKmsEncryptedData"));

export { GetKmsKeyArgs, GetKmsKeyResult, GetKmsKeyOutputArgs } from "./getKmsKey";
export const getKmsKey: typeof import("./getKmsKey").getKmsKey = null as any;
export const getKmsKeyOutput: typeof import("./getKmsKey").getKmsKeyOutput = null as any;
utilities.lazyLoad(exports, ["getKmsKey","getKmsKeyOutput"], () => require("./getKmsKey"));

export { GetKmsKeyVersionArgs, GetKmsKeyVersionResult, GetKmsKeyVersionOutputArgs } from "./getKmsKeyVersion";
export const getKmsKeyVersion: typeof import("./getKmsKeyVersion").getKmsKeyVersion = null as any;
export const getKmsKeyVersionOutput: typeof import("./getKmsKeyVersion").getKmsKeyVersionOutput = null as any;
utilities.lazyLoad(exports, ["getKmsKeyVersion","getKmsKeyVersionOutput"], () => require("./getKmsKeyVersion"));

export { GetKmsKeyVersionsArgs, GetKmsKeyVersionsResult, GetKmsKeyVersionsOutputArgs } from "./getKmsKeyVersions";
export const getKmsKeyVersions: typeof import("./getKmsKeyVersions").getKmsKeyVersions = null as any;
export const getKmsKeyVersionsOutput: typeof import("./getKmsKeyVersions").getKmsKeyVersionsOutput = null as any;
utilities.lazyLoad(exports, ["getKmsKeyVersions","getKmsKeyVersionsOutput"], () => require("./getKmsKeyVersions"));

export { GetKmsKeysArgs, GetKmsKeysResult, GetKmsKeysOutputArgs } from "./getKmsKeys";
export const getKmsKeys: typeof import("./getKmsKeys").getKmsKeys = null as any;
export const getKmsKeysOutput: typeof import("./getKmsKeys").getKmsKeysOutput = null as any;
utilities.lazyLoad(exports, ["getKmsKeys","getKmsKeysOutput"], () => require("./getKmsKeys"));

export { GetKmsReplicationStatusArgs, GetKmsReplicationStatusResult, GetKmsReplicationStatusOutputArgs } from "./getKmsReplicationStatus";
export const getKmsReplicationStatus: typeof import("./getKmsReplicationStatus").getKmsReplicationStatus = null as any;
export const getKmsReplicationStatusOutput: typeof import("./getKmsReplicationStatus").getKmsReplicationStatusOutput = null as any;
utilities.lazyLoad(exports, ["getKmsReplicationStatus","getKmsReplicationStatusOutput"], () => require("./getKmsReplicationStatus"));

export { GetKmsVaultArgs, GetKmsVaultResult, GetKmsVaultOutputArgs } from "./getKmsVault";
export const getKmsVault: typeof import("./getKmsVault").getKmsVault = null as any;
export const getKmsVaultOutput: typeof import("./getKmsVault").getKmsVaultOutput = null as any;
utilities.lazyLoad(exports, ["getKmsVault","getKmsVaultOutput"], () => require("./getKmsVault"));

export { GetKmsVaultReplicasArgs, GetKmsVaultReplicasResult, GetKmsVaultReplicasOutputArgs } from "./getKmsVaultReplicas";
export const getKmsVaultReplicas: typeof import("./getKmsVaultReplicas").getKmsVaultReplicas = null as any;
export const getKmsVaultReplicasOutput: typeof import("./getKmsVaultReplicas").getKmsVaultReplicasOutput = null as any;
utilities.lazyLoad(exports, ["getKmsVaultReplicas","getKmsVaultReplicasOutput"], () => require("./getKmsVaultReplicas"));

export { GetKmsVaultUsageArgs, GetKmsVaultUsageResult, GetKmsVaultUsageOutputArgs } from "./getKmsVaultUsage";
export const getKmsVaultUsage: typeof import("./getKmsVaultUsage").getKmsVaultUsage = null as any;
export const getKmsVaultUsageOutput: typeof import("./getKmsVaultUsage").getKmsVaultUsageOutput = null as any;
utilities.lazyLoad(exports, ["getKmsVaultUsage","getKmsVaultUsageOutput"], () => require("./getKmsVaultUsage"));

export { GetKmsVaultsArgs, GetKmsVaultsResult, GetKmsVaultsOutputArgs } from "./getKmsVaults";
export const getKmsVaults: typeof import("./getKmsVaults").getKmsVaults = null as any;
export const getKmsVaultsOutput: typeof import("./getKmsVaults").getKmsVaultsOutput = null as any;
utilities.lazyLoad(exports, ["getKmsVaults","getKmsVaultsOutput"], () => require("./getKmsVaults"));

export { GetLicenseManagerConfigurationArgs, GetLicenseManagerConfigurationResult, GetLicenseManagerConfigurationOutputArgs } from "./getLicenseManagerConfiguration";
export const getLicenseManagerConfiguration: typeof import("./getLicenseManagerConfiguration").getLicenseManagerConfiguration = null as any;
export const getLicenseManagerConfigurationOutput: typeof import("./getLicenseManagerConfiguration").getLicenseManagerConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getLicenseManagerConfiguration","getLicenseManagerConfigurationOutput"], () => require("./getLicenseManagerConfiguration"));

export { GetLicenseManagerLicenseMetricArgs, GetLicenseManagerLicenseMetricResult, GetLicenseManagerLicenseMetricOutputArgs } from "./getLicenseManagerLicenseMetric";
export const getLicenseManagerLicenseMetric: typeof import("./getLicenseManagerLicenseMetric").getLicenseManagerLicenseMetric = null as any;
export const getLicenseManagerLicenseMetricOutput: typeof import("./getLicenseManagerLicenseMetric").getLicenseManagerLicenseMetricOutput = null as any;
utilities.lazyLoad(exports, ["getLicenseManagerLicenseMetric","getLicenseManagerLicenseMetricOutput"], () => require("./getLicenseManagerLicenseMetric"));

export { GetLicenseManagerLicenseRecordArgs, GetLicenseManagerLicenseRecordResult, GetLicenseManagerLicenseRecordOutputArgs } from "./getLicenseManagerLicenseRecord";
export const getLicenseManagerLicenseRecord: typeof import("./getLicenseManagerLicenseRecord").getLicenseManagerLicenseRecord = null as any;
export const getLicenseManagerLicenseRecordOutput: typeof import("./getLicenseManagerLicenseRecord").getLicenseManagerLicenseRecordOutput = null as any;
utilities.lazyLoad(exports, ["getLicenseManagerLicenseRecord","getLicenseManagerLicenseRecordOutput"], () => require("./getLicenseManagerLicenseRecord"));

export { GetLicenseManagerLicenseRecordsArgs, GetLicenseManagerLicenseRecordsResult, GetLicenseManagerLicenseRecordsOutputArgs } from "./getLicenseManagerLicenseRecords";
export const getLicenseManagerLicenseRecords: typeof import("./getLicenseManagerLicenseRecords").getLicenseManagerLicenseRecords = null as any;
export const getLicenseManagerLicenseRecordsOutput: typeof import("./getLicenseManagerLicenseRecords").getLicenseManagerLicenseRecordsOutput = null as any;
utilities.lazyLoad(exports, ["getLicenseManagerLicenseRecords","getLicenseManagerLicenseRecordsOutput"], () => require("./getLicenseManagerLicenseRecords"));

export { GetLicenseManagerProductLicenseArgs, GetLicenseManagerProductLicenseResult, GetLicenseManagerProductLicenseOutputArgs } from "./getLicenseManagerProductLicense";
export const getLicenseManagerProductLicense: typeof import("./getLicenseManagerProductLicense").getLicenseManagerProductLicense = null as any;
export const getLicenseManagerProductLicenseOutput: typeof import("./getLicenseManagerProductLicense").getLicenseManagerProductLicenseOutput = null as any;
utilities.lazyLoad(exports, ["getLicenseManagerProductLicense","getLicenseManagerProductLicenseOutput"], () => require("./getLicenseManagerProductLicense"));

export { GetLicenseManagerProductLicenseConsumersArgs, GetLicenseManagerProductLicenseConsumersResult, GetLicenseManagerProductLicenseConsumersOutputArgs } from "./getLicenseManagerProductLicenseConsumers";
export const getLicenseManagerProductLicenseConsumers: typeof import("./getLicenseManagerProductLicenseConsumers").getLicenseManagerProductLicenseConsumers = null as any;
export const getLicenseManagerProductLicenseConsumersOutput: typeof import("./getLicenseManagerProductLicenseConsumers").getLicenseManagerProductLicenseConsumersOutput = null as any;
utilities.lazyLoad(exports, ["getLicenseManagerProductLicenseConsumers","getLicenseManagerProductLicenseConsumersOutput"], () => require("./getLicenseManagerProductLicenseConsumers"));

export { GetLicenseManagerProductLicensesArgs, GetLicenseManagerProductLicensesResult, GetLicenseManagerProductLicensesOutputArgs } from "./getLicenseManagerProductLicenses";
export const getLicenseManagerProductLicenses: typeof import("./getLicenseManagerProductLicenses").getLicenseManagerProductLicenses = null as any;
export const getLicenseManagerProductLicensesOutput: typeof import("./getLicenseManagerProductLicenses").getLicenseManagerProductLicensesOutput = null as any;
utilities.lazyLoad(exports, ["getLicenseManagerProductLicenses","getLicenseManagerProductLicensesOutput"], () => require("./getLicenseManagerProductLicenses"));

export { GetLicenseManagerTopUtilizedProductLicensesArgs, GetLicenseManagerTopUtilizedProductLicensesResult, GetLicenseManagerTopUtilizedProductLicensesOutputArgs } from "./getLicenseManagerTopUtilizedProductLicenses";
export const getLicenseManagerTopUtilizedProductLicenses: typeof import("./getLicenseManagerTopUtilizedProductLicenses").getLicenseManagerTopUtilizedProductLicenses = null as any;
export const getLicenseManagerTopUtilizedProductLicensesOutput: typeof import("./getLicenseManagerTopUtilizedProductLicenses").getLicenseManagerTopUtilizedProductLicensesOutput = null as any;
utilities.lazyLoad(exports, ["getLicenseManagerTopUtilizedProductLicenses","getLicenseManagerTopUtilizedProductLicensesOutput"], () => require("./getLicenseManagerTopUtilizedProductLicenses"));

export { GetLicenseManagerTopUtilizedResourcesArgs, GetLicenseManagerTopUtilizedResourcesResult, GetLicenseManagerTopUtilizedResourcesOutputArgs } from "./getLicenseManagerTopUtilizedResources";
export const getLicenseManagerTopUtilizedResources: typeof import("./getLicenseManagerTopUtilizedResources").getLicenseManagerTopUtilizedResources = null as any;
export const getLicenseManagerTopUtilizedResourcesOutput: typeof import("./getLicenseManagerTopUtilizedResources").getLicenseManagerTopUtilizedResourcesOutput = null as any;
utilities.lazyLoad(exports, ["getLicenseManagerTopUtilizedResources","getLicenseManagerTopUtilizedResourcesOutput"], () => require("./getLicenseManagerTopUtilizedResources"));

export { GetLimitsLimitDefinitionsArgs, GetLimitsLimitDefinitionsResult, GetLimitsLimitDefinitionsOutputArgs } from "./getLimitsLimitDefinitions";
export const getLimitsLimitDefinitions: typeof import("./getLimitsLimitDefinitions").getLimitsLimitDefinitions = null as any;
export const getLimitsLimitDefinitionsOutput: typeof import("./getLimitsLimitDefinitions").getLimitsLimitDefinitionsOutput = null as any;
utilities.lazyLoad(exports, ["getLimitsLimitDefinitions","getLimitsLimitDefinitionsOutput"], () => require("./getLimitsLimitDefinitions"));

export { GetLimitsLimitValuesArgs, GetLimitsLimitValuesResult, GetLimitsLimitValuesOutputArgs } from "./getLimitsLimitValues";
export const getLimitsLimitValues: typeof import("./getLimitsLimitValues").getLimitsLimitValues = null as any;
export const getLimitsLimitValuesOutput: typeof import("./getLimitsLimitValues").getLimitsLimitValuesOutput = null as any;
utilities.lazyLoad(exports, ["getLimitsLimitValues","getLimitsLimitValuesOutput"], () => require("./getLimitsLimitValues"));

export { GetLimitsQuotaArgs, GetLimitsQuotaResult, GetLimitsQuotaOutputArgs } from "./getLimitsQuota";
export const getLimitsQuota: typeof import("./getLimitsQuota").getLimitsQuota = null as any;
export const getLimitsQuotaOutput: typeof import("./getLimitsQuota").getLimitsQuotaOutput = null as any;
utilities.lazyLoad(exports, ["getLimitsQuota","getLimitsQuotaOutput"], () => require("./getLimitsQuota"));

export { GetLimitsQuotasArgs, GetLimitsQuotasResult, GetLimitsQuotasOutputArgs } from "./getLimitsQuotas";
export const getLimitsQuotas: typeof import("./getLimitsQuotas").getLimitsQuotas = null as any;
export const getLimitsQuotasOutput: typeof import("./getLimitsQuotas").getLimitsQuotasOutput = null as any;
utilities.lazyLoad(exports, ["getLimitsQuotas","getLimitsQuotasOutput"], () => require("./getLimitsQuotas"));

export { GetLimitsResourceAvailabilityArgs, GetLimitsResourceAvailabilityResult, GetLimitsResourceAvailabilityOutputArgs } from "./getLimitsResourceAvailability";
export const getLimitsResourceAvailability: typeof import("./getLimitsResourceAvailability").getLimitsResourceAvailability = null as any;
export const getLimitsResourceAvailabilityOutput: typeof import("./getLimitsResourceAvailability").getLimitsResourceAvailabilityOutput = null as any;
utilities.lazyLoad(exports, ["getLimitsResourceAvailability","getLimitsResourceAvailabilityOutput"], () => require("./getLimitsResourceAvailability"));

export { GetLimitsServicesArgs, GetLimitsServicesResult, GetLimitsServicesOutputArgs } from "./getLimitsServices";
export const getLimitsServices: typeof import("./getLimitsServices").getLimitsServices = null as any;
export const getLimitsServicesOutput: typeof import("./getLimitsServices").getLimitsServicesOutput = null as any;
utilities.lazyLoad(exports, ["getLimitsServices","getLimitsServicesOutput"], () => require("./getLimitsServices"));

export { GetLoadBalancerBackendHealthArgs, GetLoadBalancerBackendHealthResult, GetLoadBalancerBackendHealthOutputArgs } from "./getLoadBalancerBackendHealth";
export const getLoadBalancerBackendHealth: typeof import("./getLoadBalancerBackendHealth").getLoadBalancerBackendHealth = null as any;
export const getLoadBalancerBackendHealthOutput: typeof import("./getLoadBalancerBackendHealth").getLoadBalancerBackendHealthOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalancerBackendHealth","getLoadBalancerBackendHealthOutput"], () => require("./getLoadBalancerBackendHealth"));

export { GetLoadBalancerBackendSetHealthArgs, GetLoadBalancerBackendSetHealthResult, GetLoadBalancerBackendSetHealthOutputArgs } from "./getLoadBalancerBackendSetHealth";
export const getLoadBalancerBackendSetHealth: typeof import("./getLoadBalancerBackendSetHealth").getLoadBalancerBackendSetHealth = null as any;
export const getLoadBalancerBackendSetHealthOutput: typeof import("./getLoadBalancerBackendSetHealth").getLoadBalancerBackendSetHealthOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalancerBackendSetHealth","getLoadBalancerBackendSetHealthOutput"], () => require("./getLoadBalancerBackendSetHealth"));

export { GetLoadBalancerBackendSetsArgs, GetLoadBalancerBackendSetsResult, GetLoadBalancerBackendSetsOutputArgs } from "./getLoadBalancerBackendSets";
export const getLoadBalancerBackendSets: typeof import("./getLoadBalancerBackendSets").getLoadBalancerBackendSets = null as any;
export const getLoadBalancerBackendSetsOutput: typeof import("./getLoadBalancerBackendSets").getLoadBalancerBackendSetsOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalancerBackendSets","getLoadBalancerBackendSetsOutput"], () => require("./getLoadBalancerBackendSets"));

export { GetLoadBalancerBackendsArgs, GetLoadBalancerBackendsResult, GetLoadBalancerBackendsOutputArgs } from "./getLoadBalancerBackends";
export const getLoadBalancerBackends: typeof import("./getLoadBalancerBackends").getLoadBalancerBackends = null as any;
export const getLoadBalancerBackendsOutput: typeof import("./getLoadBalancerBackends").getLoadBalancerBackendsOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalancerBackends","getLoadBalancerBackendsOutput"], () => require("./getLoadBalancerBackends"));

export { GetLoadBalancerBackendsetsArgs, GetLoadBalancerBackendsetsResult, GetLoadBalancerBackendsetsOutputArgs } from "./getLoadBalancerBackendsets";
export const getLoadBalancerBackendsets: typeof import("./getLoadBalancerBackendsets").getLoadBalancerBackendsets = null as any;
export const getLoadBalancerBackendsetsOutput: typeof import("./getLoadBalancerBackendsets").getLoadBalancerBackendsetsOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalancerBackendsets","getLoadBalancerBackendsetsOutput"], () => require("./getLoadBalancerBackendsets"));

export { GetLoadBalancerCertificatesArgs, GetLoadBalancerCertificatesResult, GetLoadBalancerCertificatesOutputArgs } from "./getLoadBalancerCertificates";
export const getLoadBalancerCertificates: typeof import("./getLoadBalancerCertificates").getLoadBalancerCertificates = null as any;
export const getLoadBalancerCertificatesOutput: typeof import("./getLoadBalancerCertificates").getLoadBalancerCertificatesOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalancerCertificates","getLoadBalancerCertificatesOutput"], () => require("./getLoadBalancerCertificates"));

export { GetLoadBalancerHealthArgs, GetLoadBalancerHealthResult, GetLoadBalancerHealthOutputArgs } from "./getLoadBalancerHealth";
export const getLoadBalancerHealth: typeof import("./getLoadBalancerHealth").getLoadBalancerHealth = null as any;
export const getLoadBalancerHealthOutput: typeof import("./getLoadBalancerHealth").getLoadBalancerHealthOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalancerHealth","getLoadBalancerHealthOutput"], () => require("./getLoadBalancerHealth"));

export { GetLoadBalancerHostnamesArgs, GetLoadBalancerHostnamesResult, GetLoadBalancerHostnamesOutputArgs } from "./getLoadBalancerHostnames";
export const getLoadBalancerHostnames: typeof import("./getLoadBalancerHostnames").getLoadBalancerHostnames = null as any;
export const getLoadBalancerHostnamesOutput: typeof import("./getLoadBalancerHostnames").getLoadBalancerHostnamesOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalancerHostnames","getLoadBalancerHostnamesOutput"], () => require("./getLoadBalancerHostnames"));

export { GetLoadBalancerListenerRulesArgs, GetLoadBalancerListenerRulesResult, GetLoadBalancerListenerRulesOutputArgs } from "./getLoadBalancerListenerRules";
export const getLoadBalancerListenerRules: typeof import("./getLoadBalancerListenerRules").getLoadBalancerListenerRules = null as any;
export const getLoadBalancerListenerRulesOutput: typeof import("./getLoadBalancerListenerRules").getLoadBalancerListenerRulesOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalancerListenerRules","getLoadBalancerListenerRulesOutput"], () => require("./getLoadBalancerListenerRules"));

export { GetLoadBalancerLoadBalancerRoutingPoliciesArgs, GetLoadBalancerLoadBalancerRoutingPoliciesResult, GetLoadBalancerLoadBalancerRoutingPoliciesOutputArgs } from "./getLoadBalancerLoadBalancerRoutingPolicies";
export const getLoadBalancerLoadBalancerRoutingPolicies: typeof import("./getLoadBalancerLoadBalancerRoutingPolicies").getLoadBalancerLoadBalancerRoutingPolicies = null as any;
export const getLoadBalancerLoadBalancerRoutingPoliciesOutput: typeof import("./getLoadBalancerLoadBalancerRoutingPolicies").getLoadBalancerLoadBalancerRoutingPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalancerLoadBalancerRoutingPolicies","getLoadBalancerLoadBalancerRoutingPoliciesOutput"], () => require("./getLoadBalancerLoadBalancerRoutingPolicies"));

export { GetLoadBalancerLoadBalancerRoutingPolicyArgs, GetLoadBalancerLoadBalancerRoutingPolicyResult, GetLoadBalancerLoadBalancerRoutingPolicyOutputArgs } from "./getLoadBalancerLoadBalancerRoutingPolicy";
export const getLoadBalancerLoadBalancerRoutingPolicy: typeof import("./getLoadBalancerLoadBalancerRoutingPolicy").getLoadBalancerLoadBalancerRoutingPolicy = null as any;
export const getLoadBalancerLoadBalancerRoutingPolicyOutput: typeof import("./getLoadBalancerLoadBalancerRoutingPolicy").getLoadBalancerLoadBalancerRoutingPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalancerLoadBalancerRoutingPolicy","getLoadBalancerLoadBalancerRoutingPolicyOutput"], () => require("./getLoadBalancerLoadBalancerRoutingPolicy"));

export { GetLoadBalancerLoadBalancersArgs, GetLoadBalancerLoadBalancersResult, GetLoadBalancerLoadBalancersOutputArgs } from "./getLoadBalancerLoadBalancers";
export const getLoadBalancerLoadBalancers: typeof import("./getLoadBalancerLoadBalancers").getLoadBalancerLoadBalancers = null as any;
export const getLoadBalancerLoadBalancersOutput: typeof import("./getLoadBalancerLoadBalancers").getLoadBalancerLoadBalancersOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalancerLoadBalancers","getLoadBalancerLoadBalancersOutput"], () => require("./getLoadBalancerLoadBalancers"));

export { GetLoadBalancerPathRouteSetsArgs, GetLoadBalancerPathRouteSetsResult, GetLoadBalancerPathRouteSetsOutputArgs } from "./getLoadBalancerPathRouteSets";
export const getLoadBalancerPathRouteSets: typeof import("./getLoadBalancerPathRouteSets").getLoadBalancerPathRouteSets = null as any;
export const getLoadBalancerPathRouteSetsOutput: typeof import("./getLoadBalancerPathRouteSets").getLoadBalancerPathRouteSetsOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalancerPathRouteSets","getLoadBalancerPathRouteSetsOutput"], () => require("./getLoadBalancerPathRouteSets"));

export { GetLoadBalancerPoliciesArgs, GetLoadBalancerPoliciesResult, GetLoadBalancerPoliciesOutputArgs } from "./getLoadBalancerPolicies";
export const getLoadBalancerPolicies: typeof import("./getLoadBalancerPolicies").getLoadBalancerPolicies = null as any;
export const getLoadBalancerPoliciesOutput: typeof import("./getLoadBalancerPolicies").getLoadBalancerPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalancerPolicies","getLoadBalancerPoliciesOutput"], () => require("./getLoadBalancerPolicies"));

export { GetLoadBalancerProtocolsArgs, GetLoadBalancerProtocolsResult, GetLoadBalancerProtocolsOutputArgs } from "./getLoadBalancerProtocols";
export const getLoadBalancerProtocols: typeof import("./getLoadBalancerProtocols").getLoadBalancerProtocols = null as any;
export const getLoadBalancerProtocolsOutput: typeof import("./getLoadBalancerProtocols").getLoadBalancerProtocolsOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalancerProtocols","getLoadBalancerProtocolsOutput"], () => require("./getLoadBalancerProtocols"));

export { GetLoadBalancerRuleSetArgs, GetLoadBalancerRuleSetResult, GetLoadBalancerRuleSetOutputArgs } from "./getLoadBalancerRuleSet";
export const getLoadBalancerRuleSet: typeof import("./getLoadBalancerRuleSet").getLoadBalancerRuleSet = null as any;
export const getLoadBalancerRuleSetOutput: typeof import("./getLoadBalancerRuleSet").getLoadBalancerRuleSetOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalancerRuleSet","getLoadBalancerRuleSetOutput"], () => require("./getLoadBalancerRuleSet"));

export { GetLoadBalancerRuleSetsArgs, GetLoadBalancerRuleSetsResult, GetLoadBalancerRuleSetsOutputArgs } from "./getLoadBalancerRuleSets";
export const getLoadBalancerRuleSets: typeof import("./getLoadBalancerRuleSets").getLoadBalancerRuleSets = null as any;
export const getLoadBalancerRuleSetsOutput: typeof import("./getLoadBalancerRuleSets").getLoadBalancerRuleSetsOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalancerRuleSets","getLoadBalancerRuleSetsOutput"], () => require("./getLoadBalancerRuleSets"));

export { GetLoadBalancerShapesArgs, GetLoadBalancerShapesResult, GetLoadBalancerShapesOutputArgs } from "./getLoadBalancerShapes";
export const getLoadBalancerShapes: typeof import("./getLoadBalancerShapes").getLoadBalancerShapes = null as any;
export const getLoadBalancerShapesOutput: typeof import("./getLoadBalancerShapes").getLoadBalancerShapesOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalancerShapes","getLoadBalancerShapesOutput"], () => require("./getLoadBalancerShapes"));

export { GetLoadBalancerSslCipherSuiteArgs, GetLoadBalancerSslCipherSuiteResult, GetLoadBalancerSslCipherSuiteOutputArgs } from "./getLoadBalancerSslCipherSuite";
export const getLoadBalancerSslCipherSuite: typeof import("./getLoadBalancerSslCipherSuite").getLoadBalancerSslCipherSuite = null as any;
export const getLoadBalancerSslCipherSuiteOutput: typeof import("./getLoadBalancerSslCipherSuite").getLoadBalancerSslCipherSuiteOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalancerSslCipherSuite","getLoadBalancerSslCipherSuiteOutput"], () => require("./getLoadBalancerSslCipherSuite"));

export { GetLoadBalancerSslCipherSuitesArgs, GetLoadBalancerSslCipherSuitesResult, GetLoadBalancerSslCipherSuitesOutputArgs } from "./getLoadBalancerSslCipherSuites";
export const getLoadBalancerSslCipherSuites: typeof import("./getLoadBalancerSslCipherSuites").getLoadBalancerSslCipherSuites = null as any;
export const getLoadBalancerSslCipherSuitesOutput: typeof import("./getLoadBalancerSslCipherSuites").getLoadBalancerSslCipherSuitesOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalancerSslCipherSuites","getLoadBalancerSslCipherSuitesOutput"], () => require("./getLoadBalancerSslCipherSuites"));

export { GetLoadBalancersArgs, GetLoadBalancersResult, GetLoadBalancersOutputArgs } from "./getLoadBalancers";
export const getLoadBalancers: typeof import("./getLoadBalancers").getLoadBalancers = null as any;
export const getLoadBalancersOutput: typeof import("./getLoadBalancers").getLoadBalancersOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalancers","getLoadBalancersOutput"], () => require("./getLoadBalancers"));

export { GetLogAnalyticsLogAnalyticsCategoriesListArgs, GetLogAnalyticsLogAnalyticsCategoriesListResult, GetLogAnalyticsLogAnalyticsCategoriesListOutputArgs } from "./getLogAnalyticsLogAnalyticsCategoriesList";
export const getLogAnalyticsLogAnalyticsCategoriesList: typeof import("./getLogAnalyticsLogAnalyticsCategoriesList").getLogAnalyticsLogAnalyticsCategoriesList = null as any;
export const getLogAnalyticsLogAnalyticsCategoriesListOutput: typeof import("./getLogAnalyticsLogAnalyticsCategoriesList").getLogAnalyticsLogAnalyticsCategoriesListOutput = null as any;
utilities.lazyLoad(exports, ["getLogAnalyticsLogAnalyticsCategoriesList","getLogAnalyticsLogAnalyticsCategoriesListOutput"], () => require("./getLogAnalyticsLogAnalyticsCategoriesList"));

export { GetLogAnalyticsLogAnalyticsCategoryArgs, GetLogAnalyticsLogAnalyticsCategoryResult, GetLogAnalyticsLogAnalyticsCategoryOutputArgs } from "./getLogAnalyticsLogAnalyticsCategory";
export const getLogAnalyticsLogAnalyticsCategory: typeof import("./getLogAnalyticsLogAnalyticsCategory").getLogAnalyticsLogAnalyticsCategory = null as any;
export const getLogAnalyticsLogAnalyticsCategoryOutput: typeof import("./getLogAnalyticsLogAnalyticsCategory").getLogAnalyticsLogAnalyticsCategoryOutput = null as any;
utilities.lazyLoad(exports, ["getLogAnalyticsLogAnalyticsCategory","getLogAnalyticsLogAnalyticsCategoryOutput"], () => require("./getLogAnalyticsLogAnalyticsCategory"));

export { GetLogAnalyticsLogAnalyticsEntitiesArgs, GetLogAnalyticsLogAnalyticsEntitiesResult, GetLogAnalyticsLogAnalyticsEntitiesOutputArgs } from "./getLogAnalyticsLogAnalyticsEntities";
export const getLogAnalyticsLogAnalyticsEntities: typeof import("./getLogAnalyticsLogAnalyticsEntities").getLogAnalyticsLogAnalyticsEntities = null as any;
export const getLogAnalyticsLogAnalyticsEntitiesOutput: typeof import("./getLogAnalyticsLogAnalyticsEntities").getLogAnalyticsLogAnalyticsEntitiesOutput = null as any;
utilities.lazyLoad(exports, ["getLogAnalyticsLogAnalyticsEntities","getLogAnalyticsLogAnalyticsEntitiesOutput"], () => require("./getLogAnalyticsLogAnalyticsEntities"));

export { GetLogAnalyticsLogAnalyticsEntitiesSummaryArgs, GetLogAnalyticsLogAnalyticsEntitiesSummaryResult, GetLogAnalyticsLogAnalyticsEntitiesSummaryOutputArgs } from "./getLogAnalyticsLogAnalyticsEntitiesSummary";
export const getLogAnalyticsLogAnalyticsEntitiesSummary: typeof import("./getLogAnalyticsLogAnalyticsEntitiesSummary").getLogAnalyticsLogAnalyticsEntitiesSummary = null as any;
export const getLogAnalyticsLogAnalyticsEntitiesSummaryOutput: typeof import("./getLogAnalyticsLogAnalyticsEntitiesSummary").getLogAnalyticsLogAnalyticsEntitiesSummaryOutput = null as any;
utilities.lazyLoad(exports, ["getLogAnalyticsLogAnalyticsEntitiesSummary","getLogAnalyticsLogAnalyticsEntitiesSummaryOutput"], () => require("./getLogAnalyticsLogAnalyticsEntitiesSummary"));

export { GetLogAnalyticsLogAnalyticsEntityArgs, GetLogAnalyticsLogAnalyticsEntityResult, GetLogAnalyticsLogAnalyticsEntityOutputArgs } from "./getLogAnalyticsLogAnalyticsEntity";
export const getLogAnalyticsLogAnalyticsEntity: typeof import("./getLogAnalyticsLogAnalyticsEntity").getLogAnalyticsLogAnalyticsEntity = null as any;
export const getLogAnalyticsLogAnalyticsEntityOutput: typeof import("./getLogAnalyticsLogAnalyticsEntity").getLogAnalyticsLogAnalyticsEntityOutput = null as any;
utilities.lazyLoad(exports, ["getLogAnalyticsLogAnalyticsEntity","getLogAnalyticsLogAnalyticsEntityOutput"], () => require("./getLogAnalyticsLogAnalyticsEntity"));

export { GetLogAnalyticsLogAnalyticsEntityTopologyArgs, GetLogAnalyticsLogAnalyticsEntityTopologyResult, GetLogAnalyticsLogAnalyticsEntityTopologyOutputArgs } from "./getLogAnalyticsLogAnalyticsEntityTopology";
export const getLogAnalyticsLogAnalyticsEntityTopology: typeof import("./getLogAnalyticsLogAnalyticsEntityTopology").getLogAnalyticsLogAnalyticsEntityTopology = null as any;
export const getLogAnalyticsLogAnalyticsEntityTopologyOutput: typeof import("./getLogAnalyticsLogAnalyticsEntityTopology").getLogAnalyticsLogAnalyticsEntityTopologyOutput = null as any;
utilities.lazyLoad(exports, ["getLogAnalyticsLogAnalyticsEntityTopology","getLogAnalyticsLogAnalyticsEntityTopologyOutput"], () => require("./getLogAnalyticsLogAnalyticsEntityTopology"));

export { GetLogAnalyticsLogAnalyticsLogGroupArgs, GetLogAnalyticsLogAnalyticsLogGroupResult, GetLogAnalyticsLogAnalyticsLogGroupOutputArgs } from "./getLogAnalyticsLogAnalyticsLogGroup";
export const getLogAnalyticsLogAnalyticsLogGroup: typeof import("./getLogAnalyticsLogAnalyticsLogGroup").getLogAnalyticsLogAnalyticsLogGroup = null as any;
export const getLogAnalyticsLogAnalyticsLogGroupOutput: typeof import("./getLogAnalyticsLogAnalyticsLogGroup").getLogAnalyticsLogAnalyticsLogGroupOutput = null as any;
utilities.lazyLoad(exports, ["getLogAnalyticsLogAnalyticsLogGroup","getLogAnalyticsLogAnalyticsLogGroupOutput"], () => require("./getLogAnalyticsLogAnalyticsLogGroup"));

export { GetLogAnalyticsLogAnalyticsLogGroupsArgs, GetLogAnalyticsLogAnalyticsLogGroupsResult, GetLogAnalyticsLogAnalyticsLogGroupsOutputArgs } from "./getLogAnalyticsLogAnalyticsLogGroups";
export const getLogAnalyticsLogAnalyticsLogGroups: typeof import("./getLogAnalyticsLogAnalyticsLogGroups").getLogAnalyticsLogAnalyticsLogGroups = null as any;
export const getLogAnalyticsLogAnalyticsLogGroupsOutput: typeof import("./getLogAnalyticsLogAnalyticsLogGroups").getLogAnalyticsLogAnalyticsLogGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getLogAnalyticsLogAnalyticsLogGroups","getLogAnalyticsLogAnalyticsLogGroupsOutput"], () => require("./getLogAnalyticsLogAnalyticsLogGroups"));

export { GetLogAnalyticsLogAnalyticsLogGroupsSummaryArgs, GetLogAnalyticsLogAnalyticsLogGroupsSummaryResult, GetLogAnalyticsLogAnalyticsLogGroupsSummaryOutputArgs } from "./getLogAnalyticsLogAnalyticsLogGroupsSummary";
export const getLogAnalyticsLogAnalyticsLogGroupsSummary: typeof import("./getLogAnalyticsLogAnalyticsLogGroupsSummary").getLogAnalyticsLogAnalyticsLogGroupsSummary = null as any;
export const getLogAnalyticsLogAnalyticsLogGroupsSummaryOutput: typeof import("./getLogAnalyticsLogAnalyticsLogGroupsSummary").getLogAnalyticsLogAnalyticsLogGroupsSummaryOutput = null as any;
utilities.lazyLoad(exports, ["getLogAnalyticsLogAnalyticsLogGroupsSummary","getLogAnalyticsLogAnalyticsLogGroupsSummaryOutput"], () => require("./getLogAnalyticsLogAnalyticsLogGroupsSummary"));

export { GetLogAnalyticsLogAnalyticsObjectCollectionRuleArgs, GetLogAnalyticsLogAnalyticsObjectCollectionRuleResult, GetLogAnalyticsLogAnalyticsObjectCollectionRuleOutputArgs } from "./getLogAnalyticsLogAnalyticsObjectCollectionRule";
export const getLogAnalyticsLogAnalyticsObjectCollectionRule: typeof import("./getLogAnalyticsLogAnalyticsObjectCollectionRule").getLogAnalyticsLogAnalyticsObjectCollectionRule = null as any;
export const getLogAnalyticsLogAnalyticsObjectCollectionRuleOutput: typeof import("./getLogAnalyticsLogAnalyticsObjectCollectionRule").getLogAnalyticsLogAnalyticsObjectCollectionRuleOutput = null as any;
utilities.lazyLoad(exports, ["getLogAnalyticsLogAnalyticsObjectCollectionRule","getLogAnalyticsLogAnalyticsObjectCollectionRuleOutput"], () => require("./getLogAnalyticsLogAnalyticsObjectCollectionRule"));

export { GetLogAnalyticsLogAnalyticsObjectCollectionRulesArgs, GetLogAnalyticsLogAnalyticsObjectCollectionRulesResult, GetLogAnalyticsLogAnalyticsObjectCollectionRulesOutputArgs } from "./getLogAnalyticsLogAnalyticsObjectCollectionRules";
export const getLogAnalyticsLogAnalyticsObjectCollectionRules: typeof import("./getLogAnalyticsLogAnalyticsObjectCollectionRules").getLogAnalyticsLogAnalyticsObjectCollectionRules = null as any;
export const getLogAnalyticsLogAnalyticsObjectCollectionRulesOutput: typeof import("./getLogAnalyticsLogAnalyticsObjectCollectionRules").getLogAnalyticsLogAnalyticsObjectCollectionRulesOutput = null as any;
utilities.lazyLoad(exports, ["getLogAnalyticsLogAnalyticsObjectCollectionRules","getLogAnalyticsLogAnalyticsObjectCollectionRulesOutput"], () => require("./getLogAnalyticsLogAnalyticsObjectCollectionRules"));

export { GetLogAnalyticsLogAnalyticsPreferenceArgs, GetLogAnalyticsLogAnalyticsPreferenceResult, GetLogAnalyticsLogAnalyticsPreferenceOutputArgs } from "./getLogAnalyticsLogAnalyticsPreference";
export const getLogAnalyticsLogAnalyticsPreference: typeof import("./getLogAnalyticsLogAnalyticsPreference").getLogAnalyticsLogAnalyticsPreference = null as any;
export const getLogAnalyticsLogAnalyticsPreferenceOutput: typeof import("./getLogAnalyticsLogAnalyticsPreference").getLogAnalyticsLogAnalyticsPreferenceOutput = null as any;
utilities.lazyLoad(exports, ["getLogAnalyticsLogAnalyticsPreference","getLogAnalyticsLogAnalyticsPreferenceOutput"], () => require("./getLogAnalyticsLogAnalyticsPreference"));

export { GetLogAnalyticsLogAnalyticsResourceCategoriesListArgs, GetLogAnalyticsLogAnalyticsResourceCategoriesListResult, GetLogAnalyticsLogAnalyticsResourceCategoriesListOutputArgs } from "./getLogAnalyticsLogAnalyticsResourceCategoriesList";
export const getLogAnalyticsLogAnalyticsResourceCategoriesList: typeof import("./getLogAnalyticsLogAnalyticsResourceCategoriesList").getLogAnalyticsLogAnalyticsResourceCategoriesList = null as any;
export const getLogAnalyticsLogAnalyticsResourceCategoriesListOutput: typeof import("./getLogAnalyticsLogAnalyticsResourceCategoriesList").getLogAnalyticsLogAnalyticsResourceCategoriesListOutput = null as any;
utilities.lazyLoad(exports, ["getLogAnalyticsLogAnalyticsResourceCategoriesList","getLogAnalyticsLogAnalyticsResourceCategoriesListOutput"], () => require("./getLogAnalyticsLogAnalyticsResourceCategoriesList"));

export { GetLogAnalyticsLogAnalyticsUnprocessedDataBucketArgs, GetLogAnalyticsLogAnalyticsUnprocessedDataBucketResult, GetLogAnalyticsLogAnalyticsUnprocessedDataBucketOutputArgs } from "./getLogAnalyticsLogAnalyticsUnprocessedDataBucket";
export const getLogAnalyticsLogAnalyticsUnprocessedDataBucket: typeof import("./getLogAnalyticsLogAnalyticsUnprocessedDataBucket").getLogAnalyticsLogAnalyticsUnprocessedDataBucket = null as any;
export const getLogAnalyticsLogAnalyticsUnprocessedDataBucketOutput: typeof import("./getLogAnalyticsLogAnalyticsUnprocessedDataBucket").getLogAnalyticsLogAnalyticsUnprocessedDataBucketOutput = null as any;
utilities.lazyLoad(exports, ["getLogAnalyticsLogAnalyticsUnprocessedDataBucket","getLogAnalyticsLogAnalyticsUnprocessedDataBucketOutput"], () => require("./getLogAnalyticsLogAnalyticsUnprocessedDataBucket"));

export { GetLogAnalyticsLogSetsCountArgs, GetLogAnalyticsLogSetsCountResult, GetLogAnalyticsLogSetsCountOutputArgs } from "./getLogAnalyticsLogSetsCount";
export const getLogAnalyticsLogSetsCount: typeof import("./getLogAnalyticsLogSetsCount").getLogAnalyticsLogSetsCount = null as any;
export const getLogAnalyticsLogSetsCountOutput: typeof import("./getLogAnalyticsLogSetsCount").getLogAnalyticsLogSetsCountOutput = null as any;
utilities.lazyLoad(exports, ["getLogAnalyticsLogSetsCount","getLogAnalyticsLogSetsCountOutput"], () => require("./getLogAnalyticsLogSetsCount"));

export { GetLogAnalyticsNamespaceArgs, GetLogAnalyticsNamespaceResult, GetLogAnalyticsNamespaceOutputArgs } from "./getLogAnalyticsNamespace";
export const getLogAnalyticsNamespace: typeof import("./getLogAnalyticsNamespace").getLogAnalyticsNamespace = null as any;
export const getLogAnalyticsNamespaceOutput: typeof import("./getLogAnalyticsNamespace").getLogAnalyticsNamespaceOutput = null as any;
utilities.lazyLoad(exports, ["getLogAnalyticsNamespace","getLogAnalyticsNamespaceOutput"], () => require("./getLogAnalyticsNamespace"));

export { GetLogAnalyticsNamespaceEffectivePropertiesArgs, GetLogAnalyticsNamespaceEffectivePropertiesResult, GetLogAnalyticsNamespaceEffectivePropertiesOutputArgs } from "./getLogAnalyticsNamespaceEffectiveProperties";
export const getLogAnalyticsNamespaceEffectiveProperties: typeof import("./getLogAnalyticsNamespaceEffectiveProperties").getLogAnalyticsNamespaceEffectiveProperties = null as any;
export const getLogAnalyticsNamespaceEffectivePropertiesOutput: typeof import("./getLogAnalyticsNamespaceEffectiveProperties").getLogAnalyticsNamespaceEffectivePropertiesOutput = null as any;
utilities.lazyLoad(exports, ["getLogAnalyticsNamespaceEffectiveProperties","getLogAnalyticsNamespaceEffectivePropertiesOutput"], () => require("./getLogAnalyticsNamespaceEffectiveProperties"));

export { GetLogAnalyticsNamespaceIngestTimeRuleArgs, GetLogAnalyticsNamespaceIngestTimeRuleResult, GetLogAnalyticsNamespaceIngestTimeRuleOutputArgs } from "./getLogAnalyticsNamespaceIngestTimeRule";
export const getLogAnalyticsNamespaceIngestTimeRule: typeof import("./getLogAnalyticsNamespaceIngestTimeRule").getLogAnalyticsNamespaceIngestTimeRule = null as any;
export const getLogAnalyticsNamespaceIngestTimeRuleOutput: typeof import("./getLogAnalyticsNamespaceIngestTimeRule").getLogAnalyticsNamespaceIngestTimeRuleOutput = null as any;
utilities.lazyLoad(exports, ["getLogAnalyticsNamespaceIngestTimeRule","getLogAnalyticsNamespaceIngestTimeRuleOutput"], () => require("./getLogAnalyticsNamespaceIngestTimeRule"));

export { GetLogAnalyticsNamespaceIngestTimeRulesArgs, GetLogAnalyticsNamespaceIngestTimeRulesResult, GetLogAnalyticsNamespaceIngestTimeRulesOutputArgs } from "./getLogAnalyticsNamespaceIngestTimeRules";
export const getLogAnalyticsNamespaceIngestTimeRules: typeof import("./getLogAnalyticsNamespaceIngestTimeRules").getLogAnalyticsNamespaceIngestTimeRules = null as any;
export const getLogAnalyticsNamespaceIngestTimeRulesOutput: typeof import("./getLogAnalyticsNamespaceIngestTimeRules").getLogAnalyticsNamespaceIngestTimeRulesOutput = null as any;
utilities.lazyLoad(exports, ["getLogAnalyticsNamespaceIngestTimeRules","getLogAnalyticsNamespaceIngestTimeRulesOutput"], () => require("./getLogAnalyticsNamespaceIngestTimeRules"));

export { GetLogAnalyticsNamespacePropertiesMetadataArgs, GetLogAnalyticsNamespacePropertiesMetadataResult, GetLogAnalyticsNamespacePropertiesMetadataOutputArgs } from "./getLogAnalyticsNamespacePropertiesMetadata";
export const getLogAnalyticsNamespacePropertiesMetadata: typeof import("./getLogAnalyticsNamespacePropertiesMetadata").getLogAnalyticsNamespacePropertiesMetadata = null as any;
export const getLogAnalyticsNamespacePropertiesMetadataOutput: typeof import("./getLogAnalyticsNamespacePropertiesMetadata").getLogAnalyticsNamespacePropertiesMetadataOutput = null as any;
utilities.lazyLoad(exports, ["getLogAnalyticsNamespacePropertiesMetadata","getLogAnalyticsNamespacePropertiesMetadataOutput"], () => require("./getLogAnalyticsNamespacePropertiesMetadata"));

export { GetLogAnalyticsNamespaceRulesArgs, GetLogAnalyticsNamespaceRulesResult, GetLogAnalyticsNamespaceRulesOutputArgs } from "./getLogAnalyticsNamespaceRules";
export const getLogAnalyticsNamespaceRules: typeof import("./getLogAnalyticsNamespaceRules").getLogAnalyticsNamespaceRules = null as any;
export const getLogAnalyticsNamespaceRulesOutput: typeof import("./getLogAnalyticsNamespaceRules").getLogAnalyticsNamespaceRulesOutput = null as any;
utilities.lazyLoad(exports, ["getLogAnalyticsNamespaceRules","getLogAnalyticsNamespaceRulesOutput"], () => require("./getLogAnalyticsNamespaceRules"));

export { GetLogAnalyticsNamespaceRulesSummaryArgs, GetLogAnalyticsNamespaceRulesSummaryResult, GetLogAnalyticsNamespaceRulesSummaryOutputArgs } from "./getLogAnalyticsNamespaceRulesSummary";
export const getLogAnalyticsNamespaceRulesSummary: typeof import("./getLogAnalyticsNamespaceRulesSummary").getLogAnalyticsNamespaceRulesSummary = null as any;
export const getLogAnalyticsNamespaceRulesSummaryOutput: typeof import("./getLogAnalyticsNamespaceRulesSummary").getLogAnalyticsNamespaceRulesSummaryOutput = null as any;
utilities.lazyLoad(exports, ["getLogAnalyticsNamespaceRulesSummary","getLogAnalyticsNamespaceRulesSummaryOutput"], () => require("./getLogAnalyticsNamespaceRulesSummary"));

export { GetLogAnalyticsNamespaceScheduledTaskArgs, GetLogAnalyticsNamespaceScheduledTaskResult, GetLogAnalyticsNamespaceScheduledTaskOutputArgs } from "./getLogAnalyticsNamespaceScheduledTask";
export const getLogAnalyticsNamespaceScheduledTask: typeof import("./getLogAnalyticsNamespaceScheduledTask").getLogAnalyticsNamespaceScheduledTask = null as any;
export const getLogAnalyticsNamespaceScheduledTaskOutput: typeof import("./getLogAnalyticsNamespaceScheduledTask").getLogAnalyticsNamespaceScheduledTaskOutput = null as any;
utilities.lazyLoad(exports, ["getLogAnalyticsNamespaceScheduledTask","getLogAnalyticsNamespaceScheduledTaskOutput"], () => require("./getLogAnalyticsNamespaceScheduledTask"));

export { GetLogAnalyticsNamespaceScheduledTasksArgs, GetLogAnalyticsNamespaceScheduledTasksResult, GetLogAnalyticsNamespaceScheduledTasksOutputArgs } from "./getLogAnalyticsNamespaceScheduledTasks";
export const getLogAnalyticsNamespaceScheduledTasks: typeof import("./getLogAnalyticsNamespaceScheduledTasks").getLogAnalyticsNamespaceScheduledTasks = null as any;
export const getLogAnalyticsNamespaceScheduledTasksOutput: typeof import("./getLogAnalyticsNamespaceScheduledTasks").getLogAnalyticsNamespaceScheduledTasksOutput = null as any;
utilities.lazyLoad(exports, ["getLogAnalyticsNamespaceScheduledTasks","getLogAnalyticsNamespaceScheduledTasksOutput"], () => require("./getLogAnalyticsNamespaceScheduledTasks"));

export { GetLogAnalyticsNamespaceStorageEncryptionKeyInfoArgs, GetLogAnalyticsNamespaceStorageEncryptionKeyInfoResult, GetLogAnalyticsNamespaceStorageEncryptionKeyInfoOutputArgs } from "./getLogAnalyticsNamespaceStorageEncryptionKeyInfo";
export const getLogAnalyticsNamespaceStorageEncryptionKeyInfo: typeof import("./getLogAnalyticsNamespaceStorageEncryptionKeyInfo").getLogAnalyticsNamespaceStorageEncryptionKeyInfo = null as any;
export const getLogAnalyticsNamespaceStorageEncryptionKeyInfoOutput: typeof import("./getLogAnalyticsNamespaceStorageEncryptionKeyInfo").getLogAnalyticsNamespaceStorageEncryptionKeyInfoOutput = null as any;
utilities.lazyLoad(exports, ["getLogAnalyticsNamespaceStorageEncryptionKeyInfo","getLogAnalyticsNamespaceStorageEncryptionKeyInfoOutput"], () => require("./getLogAnalyticsNamespaceStorageEncryptionKeyInfo"));

export { GetLogAnalyticsNamespaceStorageOverlappingRecallsArgs, GetLogAnalyticsNamespaceStorageOverlappingRecallsResult, GetLogAnalyticsNamespaceStorageOverlappingRecallsOutputArgs } from "./getLogAnalyticsNamespaceStorageOverlappingRecalls";
export const getLogAnalyticsNamespaceStorageOverlappingRecalls: typeof import("./getLogAnalyticsNamespaceStorageOverlappingRecalls").getLogAnalyticsNamespaceStorageOverlappingRecalls = null as any;
export const getLogAnalyticsNamespaceStorageOverlappingRecallsOutput: typeof import("./getLogAnalyticsNamespaceStorageOverlappingRecalls").getLogAnalyticsNamespaceStorageOverlappingRecallsOutput = null as any;
utilities.lazyLoad(exports, ["getLogAnalyticsNamespaceStorageOverlappingRecalls","getLogAnalyticsNamespaceStorageOverlappingRecallsOutput"], () => require("./getLogAnalyticsNamespaceStorageOverlappingRecalls"));

export { GetLogAnalyticsNamespaceStorageRecallCountArgs, GetLogAnalyticsNamespaceStorageRecallCountResult, GetLogAnalyticsNamespaceStorageRecallCountOutputArgs } from "./getLogAnalyticsNamespaceStorageRecallCount";
export const getLogAnalyticsNamespaceStorageRecallCount: typeof import("./getLogAnalyticsNamespaceStorageRecallCount").getLogAnalyticsNamespaceStorageRecallCount = null as any;
export const getLogAnalyticsNamespaceStorageRecallCountOutput: typeof import("./getLogAnalyticsNamespaceStorageRecallCount").getLogAnalyticsNamespaceStorageRecallCountOutput = null as any;
utilities.lazyLoad(exports, ["getLogAnalyticsNamespaceStorageRecallCount","getLogAnalyticsNamespaceStorageRecallCountOutput"], () => require("./getLogAnalyticsNamespaceStorageRecallCount"));

export { GetLogAnalyticsNamespaceStorageRecalledDataSizeArgs, GetLogAnalyticsNamespaceStorageRecalledDataSizeResult, GetLogAnalyticsNamespaceStorageRecalledDataSizeOutputArgs } from "./getLogAnalyticsNamespaceStorageRecalledDataSize";
export const getLogAnalyticsNamespaceStorageRecalledDataSize: typeof import("./getLogAnalyticsNamespaceStorageRecalledDataSize").getLogAnalyticsNamespaceStorageRecalledDataSize = null as any;
export const getLogAnalyticsNamespaceStorageRecalledDataSizeOutput: typeof import("./getLogAnalyticsNamespaceStorageRecalledDataSize").getLogAnalyticsNamespaceStorageRecalledDataSizeOutput = null as any;
utilities.lazyLoad(exports, ["getLogAnalyticsNamespaceStorageRecalledDataSize","getLogAnalyticsNamespaceStorageRecalledDataSizeOutput"], () => require("./getLogAnalyticsNamespaceStorageRecalledDataSize"));

export { GetLogAnalyticsNamespacesArgs, GetLogAnalyticsNamespacesResult, GetLogAnalyticsNamespacesOutputArgs } from "./getLogAnalyticsNamespaces";
export const getLogAnalyticsNamespaces: typeof import("./getLogAnalyticsNamespaces").getLogAnalyticsNamespaces = null as any;
export const getLogAnalyticsNamespacesOutput: typeof import("./getLogAnalyticsNamespaces").getLogAnalyticsNamespacesOutput = null as any;
utilities.lazyLoad(exports, ["getLogAnalyticsNamespaces","getLogAnalyticsNamespacesOutput"], () => require("./getLogAnalyticsNamespaces"));

export { GetLoggingLogArgs, GetLoggingLogResult, GetLoggingLogOutputArgs } from "./getLoggingLog";
export const getLoggingLog: typeof import("./getLoggingLog").getLoggingLog = null as any;
export const getLoggingLogOutput: typeof import("./getLoggingLog").getLoggingLogOutput = null as any;
utilities.lazyLoad(exports, ["getLoggingLog","getLoggingLogOutput"], () => require("./getLoggingLog"));

export { GetLoggingLogGroupArgs, GetLoggingLogGroupResult, GetLoggingLogGroupOutputArgs } from "./getLoggingLogGroup";
export const getLoggingLogGroup: typeof import("./getLoggingLogGroup").getLoggingLogGroup = null as any;
export const getLoggingLogGroupOutput: typeof import("./getLoggingLogGroup").getLoggingLogGroupOutput = null as any;
utilities.lazyLoad(exports, ["getLoggingLogGroup","getLoggingLogGroupOutput"], () => require("./getLoggingLogGroup"));

export { GetLoggingLogGroupsArgs, GetLoggingLogGroupsResult, GetLoggingLogGroupsOutputArgs } from "./getLoggingLogGroups";
export const getLoggingLogGroups: typeof import("./getLoggingLogGroups").getLoggingLogGroups = null as any;
export const getLoggingLogGroupsOutput: typeof import("./getLoggingLogGroups").getLoggingLogGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getLoggingLogGroups","getLoggingLogGroupsOutput"], () => require("./getLoggingLogGroups"));

export { GetLoggingLogSavedSearchArgs, GetLoggingLogSavedSearchResult, GetLoggingLogSavedSearchOutputArgs } from "./getLoggingLogSavedSearch";
export const getLoggingLogSavedSearch: typeof import("./getLoggingLogSavedSearch").getLoggingLogSavedSearch = null as any;
export const getLoggingLogSavedSearchOutput: typeof import("./getLoggingLogSavedSearch").getLoggingLogSavedSearchOutput = null as any;
utilities.lazyLoad(exports, ["getLoggingLogSavedSearch","getLoggingLogSavedSearchOutput"], () => require("./getLoggingLogSavedSearch"));

export { GetLoggingLogSavedSearchesArgs, GetLoggingLogSavedSearchesResult, GetLoggingLogSavedSearchesOutputArgs } from "./getLoggingLogSavedSearches";
export const getLoggingLogSavedSearches: typeof import("./getLoggingLogSavedSearches").getLoggingLogSavedSearches = null as any;
export const getLoggingLogSavedSearchesOutput: typeof import("./getLoggingLogSavedSearches").getLoggingLogSavedSearchesOutput = null as any;
utilities.lazyLoad(exports, ["getLoggingLogSavedSearches","getLoggingLogSavedSearchesOutput"], () => require("./getLoggingLogSavedSearches"));

export { GetLoggingLogsArgs, GetLoggingLogsResult, GetLoggingLogsOutputArgs } from "./getLoggingLogs";
export const getLoggingLogs: typeof import("./getLoggingLogs").getLoggingLogs = null as any;
export const getLoggingLogsOutput: typeof import("./getLoggingLogs").getLoggingLogsOutput = null as any;
utilities.lazyLoad(exports, ["getLoggingLogs","getLoggingLogsOutput"], () => require("./getLoggingLogs"));

export { GetLoggingUnifiedAgentConfigurationArgs, GetLoggingUnifiedAgentConfigurationResult, GetLoggingUnifiedAgentConfigurationOutputArgs } from "./getLoggingUnifiedAgentConfiguration";
export const getLoggingUnifiedAgentConfiguration: typeof import("./getLoggingUnifiedAgentConfiguration").getLoggingUnifiedAgentConfiguration = null as any;
export const getLoggingUnifiedAgentConfigurationOutput: typeof import("./getLoggingUnifiedAgentConfiguration").getLoggingUnifiedAgentConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getLoggingUnifiedAgentConfiguration","getLoggingUnifiedAgentConfigurationOutput"], () => require("./getLoggingUnifiedAgentConfiguration"));

export { GetLoggingUnifiedAgentConfigurationsArgs, GetLoggingUnifiedAgentConfigurationsResult, GetLoggingUnifiedAgentConfigurationsOutputArgs } from "./getLoggingUnifiedAgentConfigurations";
export const getLoggingUnifiedAgentConfigurations: typeof import("./getLoggingUnifiedAgentConfigurations").getLoggingUnifiedAgentConfigurations = null as any;
export const getLoggingUnifiedAgentConfigurationsOutput: typeof import("./getLoggingUnifiedAgentConfigurations").getLoggingUnifiedAgentConfigurationsOutput = null as any;
utilities.lazyLoad(exports, ["getLoggingUnifiedAgentConfigurations","getLoggingUnifiedAgentConfigurationsOutput"], () => require("./getLoggingUnifiedAgentConfigurations"));

export { GetManagementAgentManagementAgentArgs, GetManagementAgentManagementAgentResult, GetManagementAgentManagementAgentOutputArgs } from "./getManagementAgentManagementAgent";
export const getManagementAgentManagementAgent: typeof import("./getManagementAgentManagementAgent").getManagementAgentManagementAgent = null as any;
export const getManagementAgentManagementAgentOutput: typeof import("./getManagementAgentManagementAgent").getManagementAgentManagementAgentOutput = null as any;
utilities.lazyLoad(exports, ["getManagementAgentManagementAgent","getManagementAgentManagementAgentOutput"], () => require("./getManagementAgentManagementAgent"));

export { GetManagementAgentManagementAgentAvailableHistoriesArgs, GetManagementAgentManagementAgentAvailableHistoriesResult, GetManagementAgentManagementAgentAvailableHistoriesOutputArgs } from "./getManagementAgentManagementAgentAvailableHistories";
export const getManagementAgentManagementAgentAvailableHistories: typeof import("./getManagementAgentManagementAgentAvailableHistories").getManagementAgentManagementAgentAvailableHistories = null as any;
export const getManagementAgentManagementAgentAvailableHistoriesOutput: typeof import("./getManagementAgentManagementAgentAvailableHistories").getManagementAgentManagementAgentAvailableHistoriesOutput = null as any;
utilities.lazyLoad(exports, ["getManagementAgentManagementAgentAvailableHistories","getManagementAgentManagementAgentAvailableHistoriesOutput"], () => require("./getManagementAgentManagementAgentAvailableHistories"));

export { GetManagementAgentManagementAgentCountArgs, GetManagementAgentManagementAgentCountResult, GetManagementAgentManagementAgentCountOutputArgs } from "./getManagementAgentManagementAgentCount";
export const getManagementAgentManagementAgentCount: typeof import("./getManagementAgentManagementAgentCount").getManagementAgentManagementAgentCount = null as any;
export const getManagementAgentManagementAgentCountOutput: typeof import("./getManagementAgentManagementAgentCount").getManagementAgentManagementAgentCountOutput = null as any;
utilities.lazyLoad(exports, ["getManagementAgentManagementAgentCount","getManagementAgentManagementAgentCountOutput"], () => require("./getManagementAgentManagementAgentCount"));

export { GetManagementAgentManagementAgentDataSourceArgs, GetManagementAgentManagementAgentDataSourceResult, GetManagementAgentManagementAgentDataSourceOutputArgs } from "./getManagementAgentManagementAgentDataSource";
export const getManagementAgentManagementAgentDataSource: typeof import("./getManagementAgentManagementAgentDataSource").getManagementAgentManagementAgentDataSource = null as any;
export const getManagementAgentManagementAgentDataSourceOutput: typeof import("./getManagementAgentManagementAgentDataSource").getManagementAgentManagementAgentDataSourceOutput = null as any;
utilities.lazyLoad(exports, ["getManagementAgentManagementAgentDataSource","getManagementAgentManagementAgentDataSourceOutput"], () => require("./getManagementAgentManagementAgentDataSource"));

export { GetManagementAgentManagementAgentDataSourcesArgs, GetManagementAgentManagementAgentDataSourcesResult, GetManagementAgentManagementAgentDataSourcesOutputArgs } from "./getManagementAgentManagementAgentDataSources";
export const getManagementAgentManagementAgentDataSources: typeof import("./getManagementAgentManagementAgentDataSources").getManagementAgentManagementAgentDataSources = null as any;
export const getManagementAgentManagementAgentDataSourcesOutput: typeof import("./getManagementAgentManagementAgentDataSources").getManagementAgentManagementAgentDataSourcesOutput = null as any;
utilities.lazyLoad(exports, ["getManagementAgentManagementAgentDataSources","getManagementAgentManagementAgentDataSourcesOutput"], () => require("./getManagementAgentManagementAgentDataSources"));

export { GetManagementAgentManagementAgentGetAutoUpgradableConfigArgs, GetManagementAgentManagementAgentGetAutoUpgradableConfigResult, GetManagementAgentManagementAgentGetAutoUpgradableConfigOutputArgs } from "./getManagementAgentManagementAgentGetAutoUpgradableConfig";
export const getManagementAgentManagementAgentGetAutoUpgradableConfig: typeof import("./getManagementAgentManagementAgentGetAutoUpgradableConfig").getManagementAgentManagementAgentGetAutoUpgradableConfig = null as any;
export const getManagementAgentManagementAgentGetAutoUpgradableConfigOutput: typeof import("./getManagementAgentManagementAgentGetAutoUpgradableConfig").getManagementAgentManagementAgentGetAutoUpgradableConfigOutput = null as any;
utilities.lazyLoad(exports, ["getManagementAgentManagementAgentGetAutoUpgradableConfig","getManagementAgentManagementAgentGetAutoUpgradableConfigOutput"], () => require("./getManagementAgentManagementAgentGetAutoUpgradableConfig"));

export { GetManagementAgentManagementAgentImagesArgs, GetManagementAgentManagementAgentImagesResult, GetManagementAgentManagementAgentImagesOutputArgs } from "./getManagementAgentManagementAgentImages";
export const getManagementAgentManagementAgentImages: typeof import("./getManagementAgentManagementAgentImages").getManagementAgentManagementAgentImages = null as any;
export const getManagementAgentManagementAgentImagesOutput: typeof import("./getManagementAgentManagementAgentImages").getManagementAgentManagementAgentImagesOutput = null as any;
utilities.lazyLoad(exports, ["getManagementAgentManagementAgentImages","getManagementAgentManagementAgentImagesOutput"], () => require("./getManagementAgentManagementAgentImages"));

export { GetManagementAgentManagementAgentInstallKeyArgs, GetManagementAgentManagementAgentInstallKeyResult, GetManagementAgentManagementAgentInstallKeyOutputArgs } from "./getManagementAgentManagementAgentInstallKey";
export const getManagementAgentManagementAgentInstallKey: typeof import("./getManagementAgentManagementAgentInstallKey").getManagementAgentManagementAgentInstallKey = null as any;
export const getManagementAgentManagementAgentInstallKeyOutput: typeof import("./getManagementAgentManagementAgentInstallKey").getManagementAgentManagementAgentInstallKeyOutput = null as any;
utilities.lazyLoad(exports, ["getManagementAgentManagementAgentInstallKey","getManagementAgentManagementAgentInstallKeyOutput"], () => require("./getManagementAgentManagementAgentInstallKey"));

export { GetManagementAgentManagementAgentInstallKeysArgs, GetManagementAgentManagementAgentInstallKeysResult, GetManagementAgentManagementAgentInstallKeysOutputArgs } from "./getManagementAgentManagementAgentInstallKeys";
export const getManagementAgentManagementAgentInstallKeys: typeof import("./getManagementAgentManagementAgentInstallKeys").getManagementAgentManagementAgentInstallKeys = null as any;
export const getManagementAgentManagementAgentInstallKeysOutput: typeof import("./getManagementAgentManagementAgentInstallKeys").getManagementAgentManagementAgentInstallKeysOutput = null as any;
utilities.lazyLoad(exports, ["getManagementAgentManagementAgentInstallKeys","getManagementAgentManagementAgentInstallKeysOutput"], () => require("./getManagementAgentManagementAgentInstallKeys"));

export { GetManagementAgentManagementAgentPluginCountArgs, GetManagementAgentManagementAgentPluginCountResult, GetManagementAgentManagementAgentPluginCountOutputArgs } from "./getManagementAgentManagementAgentPluginCount";
export const getManagementAgentManagementAgentPluginCount: typeof import("./getManagementAgentManagementAgentPluginCount").getManagementAgentManagementAgentPluginCount = null as any;
export const getManagementAgentManagementAgentPluginCountOutput: typeof import("./getManagementAgentManagementAgentPluginCount").getManagementAgentManagementAgentPluginCountOutput = null as any;
utilities.lazyLoad(exports, ["getManagementAgentManagementAgentPluginCount","getManagementAgentManagementAgentPluginCountOutput"], () => require("./getManagementAgentManagementAgentPluginCount"));

export { GetManagementAgentManagementAgentPluginsArgs, GetManagementAgentManagementAgentPluginsResult, GetManagementAgentManagementAgentPluginsOutputArgs } from "./getManagementAgentManagementAgentPlugins";
export const getManagementAgentManagementAgentPlugins: typeof import("./getManagementAgentManagementAgentPlugins").getManagementAgentManagementAgentPlugins = null as any;
export const getManagementAgentManagementAgentPluginsOutput: typeof import("./getManagementAgentManagementAgentPlugins").getManagementAgentManagementAgentPluginsOutput = null as any;
utilities.lazyLoad(exports, ["getManagementAgentManagementAgentPlugins","getManagementAgentManagementAgentPluginsOutput"], () => require("./getManagementAgentManagementAgentPlugins"));

export { GetManagementAgentManagementAgentsArgs, GetManagementAgentManagementAgentsResult, GetManagementAgentManagementAgentsOutputArgs } from "./getManagementAgentManagementAgents";
export const getManagementAgentManagementAgents: typeof import("./getManagementAgentManagementAgents").getManagementAgentManagementAgents = null as any;
export const getManagementAgentManagementAgentsOutput: typeof import("./getManagementAgentManagementAgents").getManagementAgentManagementAgentsOutput = null as any;
utilities.lazyLoad(exports, ["getManagementAgentManagementAgents","getManagementAgentManagementAgentsOutput"], () => require("./getManagementAgentManagementAgents"));

export { GetManagementDashboardManagementDashboardsExportArgs, GetManagementDashboardManagementDashboardsExportResult, GetManagementDashboardManagementDashboardsExportOutputArgs } from "./getManagementDashboardManagementDashboardsExport";
export const getManagementDashboardManagementDashboardsExport: typeof import("./getManagementDashboardManagementDashboardsExport").getManagementDashboardManagementDashboardsExport = null as any;
export const getManagementDashboardManagementDashboardsExportOutput: typeof import("./getManagementDashboardManagementDashboardsExport").getManagementDashboardManagementDashboardsExportOutput = null as any;
utilities.lazyLoad(exports, ["getManagementDashboardManagementDashboardsExport","getManagementDashboardManagementDashboardsExportOutput"], () => require("./getManagementDashboardManagementDashboardsExport"));

export { GetMarketplaceAcceptedAgreementArgs, GetMarketplaceAcceptedAgreementResult, GetMarketplaceAcceptedAgreementOutputArgs } from "./getMarketplaceAcceptedAgreement";
export const getMarketplaceAcceptedAgreement: typeof import("./getMarketplaceAcceptedAgreement").getMarketplaceAcceptedAgreement = null as any;
export const getMarketplaceAcceptedAgreementOutput: typeof import("./getMarketplaceAcceptedAgreement").getMarketplaceAcceptedAgreementOutput = null as any;
utilities.lazyLoad(exports, ["getMarketplaceAcceptedAgreement","getMarketplaceAcceptedAgreementOutput"], () => require("./getMarketplaceAcceptedAgreement"));

export { GetMarketplaceAcceptedAgreementsArgs, GetMarketplaceAcceptedAgreementsResult, GetMarketplaceAcceptedAgreementsOutputArgs } from "./getMarketplaceAcceptedAgreements";
export const getMarketplaceAcceptedAgreements: typeof import("./getMarketplaceAcceptedAgreements").getMarketplaceAcceptedAgreements = null as any;
export const getMarketplaceAcceptedAgreementsOutput: typeof import("./getMarketplaceAcceptedAgreements").getMarketplaceAcceptedAgreementsOutput = null as any;
utilities.lazyLoad(exports, ["getMarketplaceAcceptedAgreements","getMarketplaceAcceptedAgreementsOutput"], () => require("./getMarketplaceAcceptedAgreements"));

export { GetMarketplaceCategoriesArgs, GetMarketplaceCategoriesResult, GetMarketplaceCategoriesOutputArgs } from "./getMarketplaceCategories";
export const getMarketplaceCategories: typeof import("./getMarketplaceCategories").getMarketplaceCategories = null as any;
export const getMarketplaceCategoriesOutput: typeof import("./getMarketplaceCategories").getMarketplaceCategoriesOutput = null as any;
utilities.lazyLoad(exports, ["getMarketplaceCategories","getMarketplaceCategoriesOutput"], () => require("./getMarketplaceCategories"));

export { GetMarketplaceListingArgs, GetMarketplaceListingResult, GetMarketplaceListingOutputArgs } from "./getMarketplaceListing";
export const getMarketplaceListing: typeof import("./getMarketplaceListing").getMarketplaceListing = null as any;
export const getMarketplaceListingOutput: typeof import("./getMarketplaceListing").getMarketplaceListingOutput = null as any;
utilities.lazyLoad(exports, ["getMarketplaceListing","getMarketplaceListingOutput"], () => require("./getMarketplaceListing"));

export { GetMarketplaceListingPackageArgs, GetMarketplaceListingPackageResult, GetMarketplaceListingPackageOutputArgs } from "./getMarketplaceListingPackage";
export const getMarketplaceListingPackage: typeof import("./getMarketplaceListingPackage").getMarketplaceListingPackage = null as any;
export const getMarketplaceListingPackageOutput: typeof import("./getMarketplaceListingPackage").getMarketplaceListingPackageOutput = null as any;
utilities.lazyLoad(exports, ["getMarketplaceListingPackage","getMarketplaceListingPackageOutput"], () => require("./getMarketplaceListingPackage"));

export { GetMarketplaceListingPackageAgreementsArgs, GetMarketplaceListingPackageAgreementsResult, GetMarketplaceListingPackageAgreementsOutputArgs } from "./getMarketplaceListingPackageAgreements";
export const getMarketplaceListingPackageAgreements: typeof import("./getMarketplaceListingPackageAgreements").getMarketplaceListingPackageAgreements = null as any;
export const getMarketplaceListingPackageAgreementsOutput: typeof import("./getMarketplaceListingPackageAgreements").getMarketplaceListingPackageAgreementsOutput = null as any;
utilities.lazyLoad(exports, ["getMarketplaceListingPackageAgreements","getMarketplaceListingPackageAgreementsOutput"], () => require("./getMarketplaceListingPackageAgreements"));

export { GetMarketplaceListingPackagesArgs, GetMarketplaceListingPackagesResult, GetMarketplaceListingPackagesOutputArgs } from "./getMarketplaceListingPackages";
export const getMarketplaceListingPackages: typeof import("./getMarketplaceListingPackages").getMarketplaceListingPackages = null as any;
export const getMarketplaceListingPackagesOutput: typeof import("./getMarketplaceListingPackages").getMarketplaceListingPackagesOutput = null as any;
utilities.lazyLoad(exports, ["getMarketplaceListingPackages","getMarketplaceListingPackagesOutput"], () => require("./getMarketplaceListingPackages"));

export { GetMarketplaceListingTaxesArgs, GetMarketplaceListingTaxesResult, GetMarketplaceListingTaxesOutputArgs } from "./getMarketplaceListingTaxes";
export const getMarketplaceListingTaxes: typeof import("./getMarketplaceListingTaxes").getMarketplaceListingTaxes = null as any;
export const getMarketplaceListingTaxesOutput: typeof import("./getMarketplaceListingTaxes").getMarketplaceListingTaxesOutput = null as any;
utilities.lazyLoad(exports, ["getMarketplaceListingTaxes","getMarketplaceListingTaxesOutput"], () => require("./getMarketplaceListingTaxes"));

export { GetMarketplaceListingsArgs, GetMarketplaceListingsResult, GetMarketplaceListingsOutputArgs } from "./getMarketplaceListings";
export const getMarketplaceListings: typeof import("./getMarketplaceListings").getMarketplaceListings = null as any;
export const getMarketplaceListingsOutput: typeof import("./getMarketplaceListings").getMarketplaceListingsOutput = null as any;
utilities.lazyLoad(exports, ["getMarketplaceListings","getMarketplaceListingsOutput"], () => require("./getMarketplaceListings"));

export { GetMarketplacePublicationArgs, GetMarketplacePublicationResult, GetMarketplacePublicationOutputArgs } from "./getMarketplacePublication";
export const getMarketplacePublication: typeof import("./getMarketplacePublication").getMarketplacePublication = null as any;
export const getMarketplacePublicationOutput: typeof import("./getMarketplacePublication").getMarketplacePublicationOutput = null as any;
utilities.lazyLoad(exports, ["getMarketplacePublication","getMarketplacePublicationOutput"], () => require("./getMarketplacePublication"));

export { GetMarketplacePublicationPackageArgs, GetMarketplacePublicationPackageResult, GetMarketplacePublicationPackageOutputArgs } from "./getMarketplacePublicationPackage";
export const getMarketplacePublicationPackage: typeof import("./getMarketplacePublicationPackage").getMarketplacePublicationPackage = null as any;
export const getMarketplacePublicationPackageOutput: typeof import("./getMarketplacePublicationPackage").getMarketplacePublicationPackageOutput = null as any;
utilities.lazyLoad(exports, ["getMarketplacePublicationPackage","getMarketplacePublicationPackageOutput"], () => require("./getMarketplacePublicationPackage"));

export { GetMarketplacePublicationPackagesArgs, GetMarketplacePublicationPackagesResult, GetMarketplacePublicationPackagesOutputArgs } from "./getMarketplacePublicationPackages";
export const getMarketplacePublicationPackages: typeof import("./getMarketplacePublicationPackages").getMarketplacePublicationPackages = null as any;
export const getMarketplacePublicationPackagesOutput: typeof import("./getMarketplacePublicationPackages").getMarketplacePublicationPackagesOutput = null as any;
utilities.lazyLoad(exports, ["getMarketplacePublicationPackages","getMarketplacePublicationPackagesOutput"], () => require("./getMarketplacePublicationPackages"));

export { GetMarketplacePublicationsArgs, GetMarketplacePublicationsResult, GetMarketplacePublicationsOutputArgs } from "./getMarketplacePublications";
export const getMarketplacePublications: typeof import("./getMarketplacePublications").getMarketplacePublications = null as any;
export const getMarketplacePublicationsOutput: typeof import("./getMarketplacePublications").getMarketplacePublicationsOutput = null as any;
utilities.lazyLoad(exports, ["getMarketplacePublications","getMarketplacePublicationsOutput"], () => require("./getMarketplacePublications"));

export { GetMarketplacePublishersArgs, GetMarketplacePublishersResult, GetMarketplacePublishersOutputArgs } from "./getMarketplacePublishers";
export const getMarketplacePublishers: typeof import("./getMarketplacePublishers").getMarketplacePublishers = null as any;
export const getMarketplacePublishersOutput: typeof import("./getMarketplacePublishers").getMarketplacePublishersOutput = null as any;
utilities.lazyLoad(exports, ["getMarketplacePublishers","getMarketplacePublishersOutput"], () => require("./getMarketplacePublishers"));

export { GetMediaServicesMediaAssetArgs, GetMediaServicesMediaAssetResult, GetMediaServicesMediaAssetOutputArgs } from "./getMediaServicesMediaAsset";
export const getMediaServicesMediaAsset: typeof import("./getMediaServicesMediaAsset").getMediaServicesMediaAsset = null as any;
export const getMediaServicesMediaAssetOutput: typeof import("./getMediaServicesMediaAsset").getMediaServicesMediaAssetOutput = null as any;
utilities.lazyLoad(exports, ["getMediaServicesMediaAsset","getMediaServicesMediaAssetOutput"], () => require("./getMediaServicesMediaAsset"));

export { GetMediaServicesMediaAssetDistributionChannelAttachmentArgs, GetMediaServicesMediaAssetDistributionChannelAttachmentResult, GetMediaServicesMediaAssetDistributionChannelAttachmentOutputArgs } from "./getMediaServicesMediaAssetDistributionChannelAttachment";
export const getMediaServicesMediaAssetDistributionChannelAttachment: typeof import("./getMediaServicesMediaAssetDistributionChannelAttachment").getMediaServicesMediaAssetDistributionChannelAttachment = null as any;
export const getMediaServicesMediaAssetDistributionChannelAttachmentOutput: typeof import("./getMediaServicesMediaAssetDistributionChannelAttachment").getMediaServicesMediaAssetDistributionChannelAttachmentOutput = null as any;
utilities.lazyLoad(exports, ["getMediaServicesMediaAssetDistributionChannelAttachment","getMediaServicesMediaAssetDistributionChannelAttachmentOutput"], () => require("./getMediaServicesMediaAssetDistributionChannelAttachment"));

export { GetMediaServicesMediaAssetsArgs, GetMediaServicesMediaAssetsResult, GetMediaServicesMediaAssetsOutputArgs } from "./getMediaServicesMediaAssets";
export const getMediaServicesMediaAssets: typeof import("./getMediaServicesMediaAssets").getMediaServicesMediaAssets = null as any;
export const getMediaServicesMediaAssetsOutput: typeof import("./getMediaServicesMediaAssets").getMediaServicesMediaAssetsOutput = null as any;
utilities.lazyLoad(exports, ["getMediaServicesMediaAssets","getMediaServicesMediaAssetsOutput"], () => require("./getMediaServicesMediaAssets"));

export { GetMediaServicesMediaWorkflowArgs, GetMediaServicesMediaWorkflowResult, GetMediaServicesMediaWorkflowOutputArgs } from "./getMediaServicesMediaWorkflow";
export const getMediaServicesMediaWorkflow: typeof import("./getMediaServicesMediaWorkflow").getMediaServicesMediaWorkflow = null as any;
export const getMediaServicesMediaWorkflowOutput: typeof import("./getMediaServicesMediaWorkflow").getMediaServicesMediaWorkflowOutput = null as any;
utilities.lazyLoad(exports, ["getMediaServicesMediaWorkflow","getMediaServicesMediaWorkflowOutput"], () => require("./getMediaServicesMediaWorkflow"));

export { GetMediaServicesMediaWorkflowConfigurationArgs, GetMediaServicesMediaWorkflowConfigurationResult, GetMediaServicesMediaWorkflowConfigurationOutputArgs } from "./getMediaServicesMediaWorkflowConfiguration";
export const getMediaServicesMediaWorkflowConfiguration: typeof import("./getMediaServicesMediaWorkflowConfiguration").getMediaServicesMediaWorkflowConfiguration = null as any;
export const getMediaServicesMediaWorkflowConfigurationOutput: typeof import("./getMediaServicesMediaWorkflowConfiguration").getMediaServicesMediaWorkflowConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getMediaServicesMediaWorkflowConfiguration","getMediaServicesMediaWorkflowConfigurationOutput"], () => require("./getMediaServicesMediaWorkflowConfiguration"));

export { GetMediaServicesMediaWorkflowConfigurationsArgs, GetMediaServicesMediaWorkflowConfigurationsResult, GetMediaServicesMediaWorkflowConfigurationsOutputArgs } from "./getMediaServicesMediaWorkflowConfigurations";
export const getMediaServicesMediaWorkflowConfigurations: typeof import("./getMediaServicesMediaWorkflowConfigurations").getMediaServicesMediaWorkflowConfigurations = null as any;
export const getMediaServicesMediaWorkflowConfigurationsOutput: typeof import("./getMediaServicesMediaWorkflowConfigurations").getMediaServicesMediaWorkflowConfigurationsOutput = null as any;
utilities.lazyLoad(exports, ["getMediaServicesMediaWorkflowConfigurations","getMediaServicesMediaWorkflowConfigurationsOutput"], () => require("./getMediaServicesMediaWorkflowConfigurations"));

export { GetMediaServicesMediaWorkflowJobArgs, GetMediaServicesMediaWorkflowJobResult, GetMediaServicesMediaWorkflowJobOutputArgs } from "./getMediaServicesMediaWorkflowJob";
export const getMediaServicesMediaWorkflowJob: typeof import("./getMediaServicesMediaWorkflowJob").getMediaServicesMediaWorkflowJob = null as any;
export const getMediaServicesMediaWorkflowJobOutput: typeof import("./getMediaServicesMediaWorkflowJob").getMediaServicesMediaWorkflowJobOutput = null as any;
utilities.lazyLoad(exports, ["getMediaServicesMediaWorkflowJob","getMediaServicesMediaWorkflowJobOutput"], () => require("./getMediaServicesMediaWorkflowJob"));

export { GetMediaServicesMediaWorkflowJobFactArgs, GetMediaServicesMediaWorkflowJobFactResult, GetMediaServicesMediaWorkflowJobFactOutputArgs } from "./getMediaServicesMediaWorkflowJobFact";
export const getMediaServicesMediaWorkflowJobFact: typeof import("./getMediaServicesMediaWorkflowJobFact").getMediaServicesMediaWorkflowJobFact = null as any;
export const getMediaServicesMediaWorkflowJobFactOutput: typeof import("./getMediaServicesMediaWorkflowJobFact").getMediaServicesMediaWorkflowJobFactOutput = null as any;
utilities.lazyLoad(exports, ["getMediaServicesMediaWorkflowJobFact","getMediaServicesMediaWorkflowJobFactOutput"], () => require("./getMediaServicesMediaWorkflowJobFact"));

export { GetMediaServicesMediaWorkflowJobFactsArgs, GetMediaServicesMediaWorkflowJobFactsResult, GetMediaServicesMediaWorkflowJobFactsOutputArgs } from "./getMediaServicesMediaWorkflowJobFacts";
export const getMediaServicesMediaWorkflowJobFacts: typeof import("./getMediaServicesMediaWorkflowJobFacts").getMediaServicesMediaWorkflowJobFacts = null as any;
export const getMediaServicesMediaWorkflowJobFactsOutput: typeof import("./getMediaServicesMediaWorkflowJobFacts").getMediaServicesMediaWorkflowJobFactsOutput = null as any;
utilities.lazyLoad(exports, ["getMediaServicesMediaWorkflowJobFacts","getMediaServicesMediaWorkflowJobFactsOutput"], () => require("./getMediaServicesMediaWorkflowJobFacts"));

export { GetMediaServicesMediaWorkflowJobsArgs, GetMediaServicesMediaWorkflowJobsResult, GetMediaServicesMediaWorkflowJobsOutputArgs } from "./getMediaServicesMediaWorkflowJobs";
export const getMediaServicesMediaWorkflowJobs: typeof import("./getMediaServicesMediaWorkflowJobs").getMediaServicesMediaWorkflowJobs = null as any;
export const getMediaServicesMediaWorkflowJobsOutput: typeof import("./getMediaServicesMediaWorkflowJobs").getMediaServicesMediaWorkflowJobsOutput = null as any;
utilities.lazyLoad(exports, ["getMediaServicesMediaWorkflowJobs","getMediaServicesMediaWorkflowJobsOutput"], () => require("./getMediaServicesMediaWorkflowJobs"));

export { GetMediaServicesMediaWorkflowTaskDeclarationArgs, GetMediaServicesMediaWorkflowTaskDeclarationResult, GetMediaServicesMediaWorkflowTaskDeclarationOutputArgs } from "./getMediaServicesMediaWorkflowTaskDeclaration";
export const getMediaServicesMediaWorkflowTaskDeclaration: typeof import("./getMediaServicesMediaWorkflowTaskDeclaration").getMediaServicesMediaWorkflowTaskDeclaration = null as any;
export const getMediaServicesMediaWorkflowTaskDeclarationOutput: typeof import("./getMediaServicesMediaWorkflowTaskDeclaration").getMediaServicesMediaWorkflowTaskDeclarationOutput = null as any;
utilities.lazyLoad(exports, ["getMediaServicesMediaWorkflowTaskDeclaration","getMediaServicesMediaWorkflowTaskDeclarationOutput"], () => require("./getMediaServicesMediaWorkflowTaskDeclaration"));

export { GetMediaServicesMediaWorkflowsArgs, GetMediaServicesMediaWorkflowsResult, GetMediaServicesMediaWorkflowsOutputArgs } from "./getMediaServicesMediaWorkflows";
export const getMediaServicesMediaWorkflows: typeof import("./getMediaServicesMediaWorkflows").getMediaServicesMediaWorkflows = null as any;
export const getMediaServicesMediaWorkflowsOutput: typeof import("./getMediaServicesMediaWorkflows").getMediaServicesMediaWorkflowsOutput = null as any;
utilities.lazyLoad(exports, ["getMediaServicesMediaWorkflows","getMediaServicesMediaWorkflowsOutput"], () => require("./getMediaServicesMediaWorkflows"));

export { GetMediaServicesStreamCdnConfigArgs, GetMediaServicesStreamCdnConfigResult, GetMediaServicesStreamCdnConfigOutputArgs } from "./getMediaServicesStreamCdnConfig";
export const getMediaServicesStreamCdnConfig: typeof import("./getMediaServicesStreamCdnConfig").getMediaServicesStreamCdnConfig = null as any;
export const getMediaServicesStreamCdnConfigOutput: typeof import("./getMediaServicesStreamCdnConfig").getMediaServicesStreamCdnConfigOutput = null as any;
utilities.lazyLoad(exports, ["getMediaServicesStreamCdnConfig","getMediaServicesStreamCdnConfigOutput"], () => require("./getMediaServicesStreamCdnConfig"));

export { GetMediaServicesStreamCdnConfigsArgs, GetMediaServicesStreamCdnConfigsResult, GetMediaServicesStreamCdnConfigsOutputArgs } from "./getMediaServicesStreamCdnConfigs";
export const getMediaServicesStreamCdnConfigs: typeof import("./getMediaServicesStreamCdnConfigs").getMediaServicesStreamCdnConfigs = null as any;
export const getMediaServicesStreamCdnConfigsOutput: typeof import("./getMediaServicesStreamCdnConfigs").getMediaServicesStreamCdnConfigsOutput = null as any;
utilities.lazyLoad(exports, ["getMediaServicesStreamCdnConfigs","getMediaServicesStreamCdnConfigsOutput"], () => require("./getMediaServicesStreamCdnConfigs"));

export { GetMediaServicesStreamDistributionChannelArgs, GetMediaServicesStreamDistributionChannelResult, GetMediaServicesStreamDistributionChannelOutputArgs } from "./getMediaServicesStreamDistributionChannel";
export const getMediaServicesStreamDistributionChannel: typeof import("./getMediaServicesStreamDistributionChannel").getMediaServicesStreamDistributionChannel = null as any;
export const getMediaServicesStreamDistributionChannelOutput: typeof import("./getMediaServicesStreamDistributionChannel").getMediaServicesStreamDistributionChannelOutput = null as any;
utilities.lazyLoad(exports, ["getMediaServicesStreamDistributionChannel","getMediaServicesStreamDistributionChannelOutput"], () => require("./getMediaServicesStreamDistributionChannel"));

export { GetMediaServicesStreamDistributionChannelsArgs, GetMediaServicesStreamDistributionChannelsResult, GetMediaServicesStreamDistributionChannelsOutputArgs } from "./getMediaServicesStreamDistributionChannels";
export const getMediaServicesStreamDistributionChannels: typeof import("./getMediaServicesStreamDistributionChannels").getMediaServicesStreamDistributionChannels = null as any;
export const getMediaServicesStreamDistributionChannelsOutput: typeof import("./getMediaServicesStreamDistributionChannels").getMediaServicesStreamDistributionChannelsOutput = null as any;
utilities.lazyLoad(exports, ["getMediaServicesStreamDistributionChannels","getMediaServicesStreamDistributionChannelsOutput"], () => require("./getMediaServicesStreamDistributionChannels"));

export { GetMediaServicesStreamPackagingConfigArgs, GetMediaServicesStreamPackagingConfigResult, GetMediaServicesStreamPackagingConfigOutputArgs } from "./getMediaServicesStreamPackagingConfig";
export const getMediaServicesStreamPackagingConfig: typeof import("./getMediaServicesStreamPackagingConfig").getMediaServicesStreamPackagingConfig = null as any;
export const getMediaServicesStreamPackagingConfigOutput: typeof import("./getMediaServicesStreamPackagingConfig").getMediaServicesStreamPackagingConfigOutput = null as any;
utilities.lazyLoad(exports, ["getMediaServicesStreamPackagingConfig","getMediaServicesStreamPackagingConfigOutput"], () => require("./getMediaServicesStreamPackagingConfig"));

export { GetMediaServicesStreamPackagingConfigsArgs, GetMediaServicesStreamPackagingConfigsResult, GetMediaServicesStreamPackagingConfigsOutputArgs } from "./getMediaServicesStreamPackagingConfigs";
export const getMediaServicesStreamPackagingConfigs: typeof import("./getMediaServicesStreamPackagingConfigs").getMediaServicesStreamPackagingConfigs = null as any;
export const getMediaServicesStreamPackagingConfigsOutput: typeof import("./getMediaServicesStreamPackagingConfigs").getMediaServicesStreamPackagingConfigsOutput = null as any;
utilities.lazyLoad(exports, ["getMediaServicesStreamPackagingConfigs","getMediaServicesStreamPackagingConfigsOutput"], () => require("./getMediaServicesStreamPackagingConfigs"));

export { GetMediaServicesSystemMediaWorkflowArgs, GetMediaServicesSystemMediaWorkflowResult, GetMediaServicesSystemMediaWorkflowOutputArgs } from "./getMediaServicesSystemMediaWorkflow";
export const getMediaServicesSystemMediaWorkflow: typeof import("./getMediaServicesSystemMediaWorkflow").getMediaServicesSystemMediaWorkflow = null as any;
export const getMediaServicesSystemMediaWorkflowOutput: typeof import("./getMediaServicesSystemMediaWorkflow").getMediaServicesSystemMediaWorkflowOutput = null as any;
utilities.lazyLoad(exports, ["getMediaServicesSystemMediaWorkflow","getMediaServicesSystemMediaWorkflowOutput"], () => require("./getMediaServicesSystemMediaWorkflow"));

export { GetMeteringComputationAverageCarbonEmissionArgs, GetMeteringComputationAverageCarbonEmissionResult, GetMeteringComputationAverageCarbonEmissionOutputArgs } from "./getMeteringComputationAverageCarbonEmission";
export const getMeteringComputationAverageCarbonEmission: typeof import("./getMeteringComputationAverageCarbonEmission").getMeteringComputationAverageCarbonEmission = null as any;
export const getMeteringComputationAverageCarbonEmissionOutput: typeof import("./getMeteringComputationAverageCarbonEmission").getMeteringComputationAverageCarbonEmissionOutput = null as any;
utilities.lazyLoad(exports, ["getMeteringComputationAverageCarbonEmission","getMeteringComputationAverageCarbonEmissionOutput"], () => require("./getMeteringComputationAverageCarbonEmission"));

export { GetMeteringComputationCleanEnergyUsageArgs, GetMeteringComputationCleanEnergyUsageResult, GetMeteringComputationCleanEnergyUsageOutputArgs } from "./getMeteringComputationCleanEnergyUsage";
export const getMeteringComputationCleanEnergyUsage: typeof import("./getMeteringComputationCleanEnergyUsage").getMeteringComputationCleanEnergyUsage = null as any;
export const getMeteringComputationCleanEnergyUsageOutput: typeof import("./getMeteringComputationCleanEnergyUsage").getMeteringComputationCleanEnergyUsageOutput = null as any;
utilities.lazyLoad(exports, ["getMeteringComputationCleanEnergyUsage","getMeteringComputationCleanEnergyUsageOutput"], () => require("./getMeteringComputationCleanEnergyUsage"));

export { GetMeteringComputationConfigurationArgs, GetMeteringComputationConfigurationResult, GetMeteringComputationConfigurationOutputArgs } from "./getMeteringComputationConfiguration";
export const getMeteringComputationConfiguration: typeof import("./getMeteringComputationConfiguration").getMeteringComputationConfiguration = null as any;
export const getMeteringComputationConfigurationOutput: typeof import("./getMeteringComputationConfiguration").getMeteringComputationConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getMeteringComputationConfiguration","getMeteringComputationConfigurationOutput"], () => require("./getMeteringComputationConfiguration"));

export { GetMeteringComputationCustomTableArgs, GetMeteringComputationCustomTableResult, GetMeteringComputationCustomTableOutputArgs } from "./getMeteringComputationCustomTable";
export const getMeteringComputationCustomTable: typeof import("./getMeteringComputationCustomTable").getMeteringComputationCustomTable = null as any;
export const getMeteringComputationCustomTableOutput: typeof import("./getMeteringComputationCustomTable").getMeteringComputationCustomTableOutput = null as any;
utilities.lazyLoad(exports, ["getMeteringComputationCustomTable","getMeteringComputationCustomTableOutput"], () => require("./getMeteringComputationCustomTable"));

export { GetMeteringComputationCustomTablesArgs, GetMeteringComputationCustomTablesResult, GetMeteringComputationCustomTablesOutputArgs } from "./getMeteringComputationCustomTables";
export const getMeteringComputationCustomTables: typeof import("./getMeteringComputationCustomTables").getMeteringComputationCustomTables = null as any;
export const getMeteringComputationCustomTablesOutput: typeof import("./getMeteringComputationCustomTables").getMeteringComputationCustomTablesOutput = null as any;
utilities.lazyLoad(exports, ["getMeteringComputationCustomTables","getMeteringComputationCustomTablesOutput"], () => require("./getMeteringComputationCustomTables"));

export { GetMeteringComputationQueriesArgs, GetMeteringComputationQueriesResult, GetMeteringComputationQueriesOutputArgs } from "./getMeteringComputationQueries";
export const getMeteringComputationQueries: typeof import("./getMeteringComputationQueries").getMeteringComputationQueries = null as any;
export const getMeteringComputationQueriesOutput: typeof import("./getMeteringComputationQueries").getMeteringComputationQueriesOutput = null as any;
utilities.lazyLoad(exports, ["getMeteringComputationQueries","getMeteringComputationQueriesOutput"], () => require("./getMeteringComputationQueries"));

export { GetMeteringComputationQueryArgs, GetMeteringComputationQueryResult, GetMeteringComputationQueryOutputArgs } from "./getMeteringComputationQuery";
export const getMeteringComputationQuery: typeof import("./getMeteringComputationQuery").getMeteringComputationQuery = null as any;
export const getMeteringComputationQueryOutput: typeof import("./getMeteringComputationQuery").getMeteringComputationQueryOutput = null as any;
utilities.lazyLoad(exports, ["getMeteringComputationQuery","getMeteringComputationQueryOutput"], () => require("./getMeteringComputationQuery"));

export { GetMeteringComputationScheduleArgs, GetMeteringComputationScheduleResult, GetMeteringComputationScheduleOutputArgs } from "./getMeteringComputationSchedule";
export const getMeteringComputationSchedule: typeof import("./getMeteringComputationSchedule").getMeteringComputationSchedule = null as any;
export const getMeteringComputationScheduleOutput: typeof import("./getMeteringComputationSchedule").getMeteringComputationScheduleOutput = null as any;
utilities.lazyLoad(exports, ["getMeteringComputationSchedule","getMeteringComputationScheduleOutput"], () => require("./getMeteringComputationSchedule"));

export { GetMeteringComputationScheduledRunArgs, GetMeteringComputationScheduledRunResult, GetMeteringComputationScheduledRunOutputArgs } from "./getMeteringComputationScheduledRun";
export const getMeteringComputationScheduledRun: typeof import("./getMeteringComputationScheduledRun").getMeteringComputationScheduledRun = null as any;
export const getMeteringComputationScheduledRunOutput: typeof import("./getMeteringComputationScheduledRun").getMeteringComputationScheduledRunOutput = null as any;
utilities.lazyLoad(exports, ["getMeteringComputationScheduledRun","getMeteringComputationScheduledRunOutput"], () => require("./getMeteringComputationScheduledRun"));

export { GetMeteringComputationScheduledRunsArgs, GetMeteringComputationScheduledRunsResult, GetMeteringComputationScheduledRunsOutputArgs } from "./getMeteringComputationScheduledRuns";
export const getMeteringComputationScheduledRuns: typeof import("./getMeteringComputationScheduledRuns").getMeteringComputationScheduledRuns = null as any;
export const getMeteringComputationScheduledRunsOutput: typeof import("./getMeteringComputationScheduledRuns").getMeteringComputationScheduledRunsOutput = null as any;
utilities.lazyLoad(exports, ["getMeteringComputationScheduledRuns","getMeteringComputationScheduledRunsOutput"], () => require("./getMeteringComputationScheduledRuns"));

export { GetMeteringComputationSchedulesArgs, GetMeteringComputationSchedulesResult, GetMeteringComputationSchedulesOutputArgs } from "./getMeteringComputationSchedules";
export const getMeteringComputationSchedules: typeof import("./getMeteringComputationSchedules").getMeteringComputationSchedules = null as any;
export const getMeteringComputationSchedulesOutput: typeof import("./getMeteringComputationSchedules").getMeteringComputationSchedulesOutput = null as any;
utilities.lazyLoad(exports, ["getMeteringComputationSchedules","getMeteringComputationSchedulesOutput"], () => require("./getMeteringComputationSchedules"));

export { GetMeteringComputationUsageCarbonEmissionsConfigArgs, GetMeteringComputationUsageCarbonEmissionsConfigResult, GetMeteringComputationUsageCarbonEmissionsConfigOutputArgs } from "./getMeteringComputationUsageCarbonEmissionsConfig";
export const getMeteringComputationUsageCarbonEmissionsConfig: typeof import("./getMeteringComputationUsageCarbonEmissionsConfig").getMeteringComputationUsageCarbonEmissionsConfig = null as any;
export const getMeteringComputationUsageCarbonEmissionsConfigOutput: typeof import("./getMeteringComputationUsageCarbonEmissionsConfig").getMeteringComputationUsageCarbonEmissionsConfigOutput = null as any;
utilities.lazyLoad(exports, ["getMeteringComputationUsageCarbonEmissionsConfig","getMeteringComputationUsageCarbonEmissionsConfigOutput"], () => require("./getMeteringComputationUsageCarbonEmissionsConfig"));

export { GetMeteringComputationUsageCarbonEmissionsQueriesArgs, GetMeteringComputationUsageCarbonEmissionsQueriesResult, GetMeteringComputationUsageCarbonEmissionsQueriesOutputArgs } from "./getMeteringComputationUsageCarbonEmissionsQueries";
export const getMeteringComputationUsageCarbonEmissionsQueries: typeof import("./getMeteringComputationUsageCarbonEmissionsQueries").getMeteringComputationUsageCarbonEmissionsQueries = null as any;
export const getMeteringComputationUsageCarbonEmissionsQueriesOutput: typeof import("./getMeteringComputationUsageCarbonEmissionsQueries").getMeteringComputationUsageCarbonEmissionsQueriesOutput = null as any;
utilities.lazyLoad(exports, ["getMeteringComputationUsageCarbonEmissionsQueries","getMeteringComputationUsageCarbonEmissionsQueriesOutput"], () => require("./getMeteringComputationUsageCarbonEmissionsQueries"));

export { GetMeteringComputationUsageCarbonEmissionsQueryArgs, GetMeteringComputationUsageCarbonEmissionsQueryResult, GetMeteringComputationUsageCarbonEmissionsQueryOutputArgs } from "./getMeteringComputationUsageCarbonEmissionsQuery";
export const getMeteringComputationUsageCarbonEmissionsQuery: typeof import("./getMeteringComputationUsageCarbonEmissionsQuery").getMeteringComputationUsageCarbonEmissionsQuery = null as any;
export const getMeteringComputationUsageCarbonEmissionsQueryOutput: typeof import("./getMeteringComputationUsageCarbonEmissionsQuery").getMeteringComputationUsageCarbonEmissionsQueryOutput = null as any;
utilities.lazyLoad(exports, ["getMeteringComputationUsageCarbonEmissionsQuery","getMeteringComputationUsageCarbonEmissionsQueryOutput"], () => require("./getMeteringComputationUsageCarbonEmissionsQuery"));

export { GetMeteringComputationUsageStatementEmailRecipientsGroupArgs, GetMeteringComputationUsageStatementEmailRecipientsGroupResult, GetMeteringComputationUsageStatementEmailRecipientsGroupOutputArgs } from "./getMeteringComputationUsageStatementEmailRecipientsGroup";
export const getMeteringComputationUsageStatementEmailRecipientsGroup: typeof import("./getMeteringComputationUsageStatementEmailRecipientsGroup").getMeteringComputationUsageStatementEmailRecipientsGroup = null as any;
export const getMeteringComputationUsageStatementEmailRecipientsGroupOutput: typeof import("./getMeteringComputationUsageStatementEmailRecipientsGroup").getMeteringComputationUsageStatementEmailRecipientsGroupOutput = null as any;
utilities.lazyLoad(exports, ["getMeteringComputationUsageStatementEmailRecipientsGroup","getMeteringComputationUsageStatementEmailRecipientsGroupOutput"], () => require("./getMeteringComputationUsageStatementEmailRecipientsGroup"));

export { GetMeteringComputationUsageStatementEmailRecipientsGroupsArgs, GetMeteringComputationUsageStatementEmailRecipientsGroupsResult, GetMeteringComputationUsageStatementEmailRecipientsGroupsOutputArgs } from "./getMeteringComputationUsageStatementEmailRecipientsGroups";
export const getMeteringComputationUsageStatementEmailRecipientsGroups: typeof import("./getMeteringComputationUsageStatementEmailRecipientsGroups").getMeteringComputationUsageStatementEmailRecipientsGroups = null as any;
export const getMeteringComputationUsageStatementEmailRecipientsGroupsOutput: typeof import("./getMeteringComputationUsageStatementEmailRecipientsGroups").getMeteringComputationUsageStatementEmailRecipientsGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getMeteringComputationUsageStatementEmailRecipientsGroups","getMeteringComputationUsageStatementEmailRecipientsGroupsOutput"], () => require("./getMeteringComputationUsageStatementEmailRecipientsGroups"));

export { GetMonitoringAlarmArgs, GetMonitoringAlarmResult, GetMonitoringAlarmOutputArgs } from "./getMonitoringAlarm";
export const getMonitoringAlarm: typeof import("./getMonitoringAlarm").getMonitoringAlarm = null as any;
export const getMonitoringAlarmOutput: typeof import("./getMonitoringAlarm").getMonitoringAlarmOutput = null as any;
utilities.lazyLoad(exports, ["getMonitoringAlarm","getMonitoringAlarmOutput"], () => require("./getMonitoringAlarm"));

export { GetMonitoringAlarmHistoryCollectionArgs, GetMonitoringAlarmHistoryCollectionResult, GetMonitoringAlarmHistoryCollectionOutputArgs } from "./getMonitoringAlarmHistoryCollection";
export const getMonitoringAlarmHistoryCollection: typeof import("./getMonitoringAlarmHistoryCollection").getMonitoringAlarmHistoryCollection = null as any;
export const getMonitoringAlarmHistoryCollectionOutput: typeof import("./getMonitoringAlarmHistoryCollection").getMonitoringAlarmHistoryCollectionOutput = null as any;
utilities.lazyLoad(exports, ["getMonitoringAlarmHistoryCollection","getMonitoringAlarmHistoryCollectionOutput"], () => require("./getMonitoringAlarmHistoryCollection"));

export { GetMonitoringAlarmStatusesArgs, GetMonitoringAlarmStatusesResult, GetMonitoringAlarmStatusesOutputArgs } from "./getMonitoringAlarmStatuses";
export const getMonitoringAlarmStatuses: typeof import("./getMonitoringAlarmStatuses").getMonitoringAlarmStatuses = null as any;
export const getMonitoringAlarmStatusesOutput: typeof import("./getMonitoringAlarmStatuses").getMonitoringAlarmStatusesOutput = null as any;
utilities.lazyLoad(exports, ["getMonitoringAlarmStatuses","getMonitoringAlarmStatusesOutput"], () => require("./getMonitoringAlarmStatuses"));

export { GetMonitoringAlarmSuppressionArgs, GetMonitoringAlarmSuppressionResult, GetMonitoringAlarmSuppressionOutputArgs } from "./getMonitoringAlarmSuppression";
export const getMonitoringAlarmSuppression: typeof import("./getMonitoringAlarmSuppression").getMonitoringAlarmSuppression = null as any;
export const getMonitoringAlarmSuppressionOutput: typeof import("./getMonitoringAlarmSuppression").getMonitoringAlarmSuppressionOutput = null as any;
utilities.lazyLoad(exports, ["getMonitoringAlarmSuppression","getMonitoringAlarmSuppressionOutput"], () => require("./getMonitoringAlarmSuppression"));

export { GetMonitoringAlarmSuppressionsArgs, GetMonitoringAlarmSuppressionsResult, GetMonitoringAlarmSuppressionsOutputArgs } from "./getMonitoringAlarmSuppressions";
export const getMonitoringAlarmSuppressions: typeof import("./getMonitoringAlarmSuppressions").getMonitoringAlarmSuppressions = null as any;
export const getMonitoringAlarmSuppressionsOutput: typeof import("./getMonitoringAlarmSuppressions").getMonitoringAlarmSuppressionsOutput = null as any;
utilities.lazyLoad(exports, ["getMonitoringAlarmSuppressions","getMonitoringAlarmSuppressionsOutput"], () => require("./getMonitoringAlarmSuppressions"));

export { GetMonitoringAlarmsArgs, GetMonitoringAlarmsResult, GetMonitoringAlarmsOutputArgs } from "./getMonitoringAlarms";
export const getMonitoringAlarms: typeof import("./getMonitoringAlarms").getMonitoringAlarms = null as any;
export const getMonitoringAlarmsOutput: typeof import("./getMonitoringAlarms").getMonitoringAlarmsOutput = null as any;
utilities.lazyLoad(exports, ["getMonitoringAlarms","getMonitoringAlarmsOutput"], () => require("./getMonitoringAlarms"));

export { GetMonitoringMetricDataArgs, GetMonitoringMetricDataResult, GetMonitoringMetricDataOutputArgs } from "./getMonitoringMetricData";
export const getMonitoringMetricData: typeof import("./getMonitoringMetricData").getMonitoringMetricData = null as any;
export const getMonitoringMetricDataOutput: typeof import("./getMonitoringMetricData").getMonitoringMetricDataOutput = null as any;
utilities.lazyLoad(exports, ["getMonitoringMetricData","getMonitoringMetricDataOutput"], () => require("./getMonitoringMetricData"));

export { GetMonitoringMetricsArgs, GetMonitoringMetricsResult, GetMonitoringMetricsOutputArgs } from "./getMonitoringMetrics";
export const getMonitoringMetrics: typeof import("./getMonitoringMetrics").getMonitoringMetrics = null as any;
export const getMonitoringMetricsOutput: typeof import("./getMonitoringMetrics").getMonitoringMetricsOutput = null as any;
utilities.lazyLoad(exports, ["getMonitoringMetrics","getMonitoringMetricsOutput"], () => require("./getMonitoringMetrics"));

export { GetMysqlChannelArgs, GetMysqlChannelResult, GetMysqlChannelOutputArgs } from "./getMysqlChannel";
export const getMysqlChannel: typeof import("./getMysqlChannel").getMysqlChannel = null as any;
export const getMysqlChannelOutput: typeof import("./getMysqlChannel").getMysqlChannelOutput = null as any;
utilities.lazyLoad(exports, ["getMysqlChannel","getMysqlChannelOutput"], () => require("./getMysqlChannel"));

export { GetMysqlChannelsArgs, GetMysqlChannelsResult, GetMysqlChannelsOutputArgs } from "./getMysqlChannels";
export const getMysqlChannels: typeof import("./getMysqlChannels").getMysqlChannels = null as any;
export const getMysqlChannelsOutput: typeof import("./getMysqlChannels").getMysqlChannelsOutput = null as any;
utilities.lazyLoad(exports, ["getMysqlChannels","getMysqlChannelsOutput"], () => require("./getMysqlChannels"));

export { GetMysqlHeatWaveClusterArgs, GetMysqlHeatWaveClusterResult, GetMysqlHeatWaveClusterOutputArgs } from "./getMysqlHeatWaveCluster";
export const getMysqlHeatWaveCluster: typeof import("./getMysqlHeatWaveCluster").getMysqlHeatWaveCluster = null as any;
export const getMysqlHeatWaveClusterOutput: typeof import("./getMysqlHeatWaveCluster").getMysqlHeatWaveClusterOutput = null as any;
utilities.lazyLoad(exports, ["getMysqlHeatWaveCluster","getMysqlHeatWaveClusterOutput"], () => require("./getMysqlHeatWaveCluster"));

export { GetMysqlMysqlBackupArgs, GetMysqlMysqlBackupResult, GetMysqlMysqlBackupOutputArgs } from "./getMysqlMysqlBackup";
export const getMysqlMysqlBackup: typeof import("./getMysqlMysqlBackup").getMysqlMysqlBackup = null as any;
export const getMysqlMysqlBackupOutput: typeof import("./getMysqlMysqlBackup").getMysqlMysqlBackupOutput = null as any;
utilities.lazyLoad(exports, ["getMysqlMysqlBackup","getMysqlMysqlBackupOutput"], () => require("./getMysqlMysqlBackup"));

export { GetMysqlMysqlBackupsArgs, GetMysqlMysqlBackupsResult, GetMysqlMysqlBackupsOutputArgs } from "./getMysqlMysqlBackups";
export const getMysqlMysqlBackups: typeof import("./getMysqlMysqlBackups").getMysqlMysqlBackups = null as any;
export const getMysqlMysqlBackupsOutput: typeof import("./getMysqlMysqlBackups").getMysqlMysqlBackupsOutput = null as any;
utilities.lazyLoad(exports, ["getMysqlMysqlBackups","getMysqlMysqlBackupsOutput"], () => require("./getMysqlMysqlBackups"));

export { GetMysqlMysqlConfigurationArgs, GetMysqlMysqlConfigurationResult, GetMysqlMysqlConfigurationOutputArgs } from "./getMysqlMysqlConfiguration";
export const getMysqlMysqlConfiguration: typeof import("./getMysqlMysqlConfiguration").getMysqlMysqlConfiguration = null as any;
export const getMysqlMysqlConfigurationOutput: typeof import("./getMysqlMysqlConfiguration").getMysqlMysqlConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getMysqlMysqlConfiguration","getMysqlMysqlConfigurationOutput"], () => require("./getMysqlMysqlConfiguration"));

export { GetMysqlMysqlConfigurationsArgs, GetMysqlMysqlConfigurationsResult, GetMysqlMysqlConfigurationsOutputArgs } from "./getMysqlMysqlConfigurations";
export const getMysqlMysqlConfigurations: typeof import("./getMysqlMysqlConfigurations").getMysqlMysqlConfigurations = null as any;
export const getMysqlMysqlConfigurationsOutput: typeof import("./getMysqlMysqlConfigurations").getMysqlMysqlConfigurationsOutput = null as any;
utilities.lazyLoad(exports, ["getMysqlMysqlConfigurations","getMysqlMysqlConfigurationsOutput"], () => require("./getMysqlMysqlConfigurations"));

export { GetMysqlMysqlDbSystemArgs, GetMysqlMysqlDbSystemResult, GetMysqlMysqlDbSystemOutputArgs } from "./getMysqlMysqlDbSystem";
export const getMysqlMysqlDbSystem: typeof import("./getMysqlMysqlDbSystem").getMysqlMysqlDbSystem = null as any;
export const getMysqlMysqlDbSystemOutput: typeof import("./getMysqlMysqlDbSystem").getMysqlMysqlDbSystemOutput = null as any;
utilities.lazyLoad(exports, ["getMysqlMysqlDbSystem","getMysqlMysqlDbSystemOutput"], () => require("./getMysqlMysqlDbSystem"));

export { GetMysqlMysqlDbSystemsArgs, GetMysqlMysqlDbSystemsResult, GetMysqlMysqlDbSystemsOutputArgs } from "./getMysqlMysqlDbSystems";
export const getMysqlMysqlDbSystems: typeof import("./getMysqlMysqlDbSystems").getMysqlMysqlDbSystems = null as any;
export const getMysqlMysqlDbSystemsOutput: typeof import("./getMysqlMysqlDbSystems").getMysqlMysqlDbSystemsOutput = null as any;
utilities.lazyLoad(exports, ["getMysqlMysqlDbSystems","getMysqlMysqlDbSystemsOutput"], () => require("./getMysqlMysqlDbSystems"));

export { GetMysqlMysqlVersionsArgs, GetMysqlMysqlVersionsResult, GetMysqlMysqlVersionsOutputArgs } from "./getMysqlMysqlVersions";
export const getMysqlMysqlVersions: typeof import("./getMysqlMysqlVersions").getMysqlMysqlVersions = null as any;
export const getMysqlMysqlVersionsOutput: typeof import("./getMysqlMysqlVersions").getMysqlMysqlVersionsOutput = null as any;
utilities.lazyLoad(exports, ["getMysqlMysqlVersions","getMysqlMysqlVersionsOutput"], () => require("./getMysqlMysqlVersions"));

export { GetMysqlReplicaArgs, GetMysqlReplicaResult, GetMysqlReplicaOutputArgs } from "./getMysqlReplica";
export const getMysqlReplica: typeof import("./getMysqlReplica").getMysqlReplica = null as any;
export const getMysqlReplicaOutput: typeof import("./getMysqlReplica").getMysqlReplicaOutput = null as any;
utilities.lazyLoad(exports, ["getMysqlReplica","getMysqlReplicaOutput"], () => require("./getMysqlReplica"));

export { GetMysqlReplicasArgs, GetMysqlReplicasResult, GetMysqlReplicasOutputArgs } from "./getMysqlReplicas";
export const getMysqlReplicas: typeof import("./getMysqlReplicas").getMysqlReplicas = null as any;
export const getMysqlReplicasOutput: typeof import("./getMysqlReplicas").getMysqlReplicasOutput = null as any;
utilities.lazyLoad(exports, ["getMysqlReplicas","getMysqlReplicasOutput"], () => require("./getMysqlReplicas"));

export { GetMysqlShapesArgs, GetMysqlShapesResult, GetMysqlShapesOutputArgs } from "./getMysqlShapes";
export const getMysqlShapes: typeof import("./getMysqlShapes").getMysqlShapes = null as any;
export const getMysqlShapesOutput: typeof import("./getMysqlShapes").getMysqlShapesOutput = null as any;
utilities.lazyLoad(exports, ["getMysqlShapes","getMysqlShapesOutput"], () => require("./getMysqlShapes"));

export { GetNetworkFirewallNetworkFirewallArgs, GetNetworkFirewallNetworkFirewallResult, GetNetworkFirewallNetworkFirewallOutputArgs } from "./getNetworkFirewallNetworkFirewall";
export const getNetworkFirewallNetworkFirewall: typeof import("./getNetworkFirewallNetworkFirewall").getNetworkFirewallNetworkFirewall = null as any;
export const getNetworkFirewallNetworkFirewallOutput: typeof import("./getNetworkFirewallNetworkFirewall").getNetworkFirewallNetworkFirewallOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkFirewallNetworkFirewall","getNetworkFirewallNetworkFirewallOutput"], () => require("./getNetworkFirewallNetworkFirewall"));

export { GetNetworkFirewallNetworkFirewallPoliciesArgs, GetNetworkFirewallNetworkFirewallPoliciesResult, GetNetworkFirewallNetworkFirewallPoliciesOutputArgs } from "./getNetworkFirewallNetworkFirewallPolicies";
export const getNetworkFirewallNetworkFirewallPolicies: typeof import("./getNetworkFirewallNetworkFirewallPolicies").getNetworkFirewallNetworkFirewallPolicies = null as any;
export const getNetworkFirewallNetworkFirewallPoliciesOutput: typeof import("./getNetworkFirewallNetworkFirewallPolicies").getNetworkFirewallNetworkFirewallPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkFirewallNetworkFirewallPolicies","getNetworkFirewallNetworkFirewallPoliciesOutput"], () => require("./getNetworkFirewallNetworkFirewallPolicies"));

export { GetNetworkFirewallNetworkFirewallPolicyArgs, GetNetworkFirewallNetworkFirewallPolicyResult, GetNetworkFirewallNetworkFirewallPolicyOutputArgs } from "./getNetworkFirewallNetworkFirewallPolicy";
export const getNetworkFirewallNetworkFirewallPolicy: typeof import("./getNetworkFirewallNetworkFirewallPolicy").getNetworkFirewallNetworkFirewallPolicy = null as any;
export const getNetworkFirewallNetworkFirewallPolicyOutput: typeof import("./getNetworkFirewallNetworkFirewallPolicy").getNetworkFirewallNetworkFirewallPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkFirewallNetworkFirewallPolicy","getNetworkFirewallNetworkFirewallPolicyOutput"], () => require("./getNetworkFirewallNetworkFirewallPolicy"));

export { GetNetworkFirewallNetworkFirewallPolicyAddressListArgs, GetNetworkFirewallNetworkFirewallPolicyAddressListResult, GetNetworkFirewallNetworkFirewallPolicyAddressListOutputArgs } from "./getNetworkFirewallNetworkFirewallPolicyAddressList";
export const getNetworkFirewallNetworkFirewallPolicyAddressList: typeof import("./getNetworkFirewallNetworkFirewallPolicyAddressList").getNetworkFirewallNetworkFirewallPolicyAddressList = null as any;
export const getNetworkFirewallNetworkFirewallPolicyAddressListOutput: typeof import("./getNetworkFirewallNetworkFirewallPolicyAddressList").getNetworkFirewallNetworkFirewallPolicyAddressListOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkFirewallNetworkFirewallPolicyAddressList","getNetworkFirewallNetworkFirewallPolicyAddressListOutput"], () => require("./getNetworkFirewallNetworkFirewallPolicyAddressList"));

export { GetNetworkFirewallNetworkFirewallPolicyAddressListsArgs, GetNetworkFirewallNetworkFirewallPolicyAddressListsResult, GetNetworkFirewallNetworkFirewallPolicyAddressListsOutputArgs } from "./getNetworkFirewallNetworkFirewallPolicyAddressLists";
export const getNetworkFirewallNetworkFirewallPolicyAddressLists: typeof import("./getNetworkFirewallNetworkFirewallPolicyAddressLists").getNetworkFirewallNetworkFirewallPolicyAddressLists = null as any;
export const getNetworkFirewallNetworkFirewallPolicyAddressListsOutput: typeof import("./getNetworkFirewallNetworkFirewallPolicyAddressLists").getNetworkFirewallNetworkFirewallPolicyAddressListsOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkFirewallNetworkFirewallPolicyAddressLists","getNetworkFirewallNetworkFirewallPolicyAddressListsOutput"], () => require("./getNetworkFirewallNetworkFirewallPolicyAddressLists"));

export { GetNetworkFirewallNetworkFirewallPolicyApplicationArgs, GetNetworkFirewallNetworkFirewallPolicyApplicationResult, GetNetworkFirewallNetworkFirewallPolicyApplicationOutputArgs } from "./getNetworkFirewallNetworkFirewallPolicyApplication";
export const getNetworkFirewallNetworkFirewallPolicyApplication: typeof import("./getNetworkFirewallNetworkFirewallPolicyApplication").getNetworkFirewallNetworkFirewallPolicyApplication = null as any;
export const getNetworkFirewallNetworkFirewallPolicyApplicationOutput: typeof import("./getNetworkFirewallNetworkFirewallPolicyApplication").getNetworkFirewallNetworkFirewallPolicyApplicationOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkFirewallNetworkFirewallPolicyApplication","getNetworkFirewallNetworkFirewallPolicyApplicationOutput"], () => require("./getNetworkFirewallNetworkFirewallPolicyApplication"));

export { GetNetworkFirewallNetworkFirewallPolicyApplicationGroupArgs, GetNetworkFirewallNetworkFirewallPolicyApplicationGroupResult, GetNetworkFirewallNetworkFirewallPolicyApplicationGroupOutputArgs } from "./getNetworkFirewallNetworkFirewallPolicyApplicationGroup";
export const getNetworkFirewallNetworkFirewallPolicyApplicationGroup: typeof import("./getNetworkFirewallNetworkFirewallPolicyApplicationGroup").getNetworkFirewallNetworkFirewallPolicyApplicationGroup = null as any;
export const getNetworkFirewallNetworkFirewallPolicyApplicationGroupOutput: typeof import("./getNetworkFirewallNetworkFirewallPolicyApplicationGroup").getNetworkFirewallNetworkFirewallPolicyApplicationGroupOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkFirewallNetworkFirewallPolicyApplicationGroup","getNetworkFirewallNetworkFirewallPolicyApplicationGroupOutput"], () => require("./getNetworkFirewallNetworkFirewallPolicyApplicationGroup"));

export { GetNetworkFirewallNetworkFirewallPolicyApplicationGroupsArgs, GetNetworkFirewallNetworkFirewallPolicyApplicationGroupsResult, GetNetworkFirewallNetworkFirewallPolicyApplicationGroupsOutputArgs } from "./getNetworkFirewallNetworkFirewallPolicyApplicationGroups";
export const getNetworkFirewallNetworkFirewallPolicyApplicationGroups: typeof import("./getNetworkFirewallNetworkFirewallPolicyApplicationGroups").getNetworkFirewallNetworkFirewallPolicyApplicationGroups = null as any;
export const getNetworkFirewallNetworkFirewallPolicyApplicationGroupsOutput: typeof import("./getNetworkFirewallNetworkFirewallPolicyApplicationGroups").getNetworkFirewallNetworkFirewallPolicyApplicationGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkFirewallNetworkFirewallPolicyApplicationGroups","getNetworkFirewallNetworkFirewallPolicyApplicationGroupsOutput"], () => require("./getNetworkFirewallNetworkFirewallPolicyApplicationGroups"));

export { GetNetworkFirewallNetworkFirewallPolicyApplicationsArgs, GetNetworkFirewallNetworkFirewallPolicyApplicationsResult, GetNetworkFirewallNetworkFirewallPolicyApplicationsOutputArgs } from "./getNetworkFirewallNetworkFirewallPolicyApplications";
export const getNetworkFirewallNetworkFirewallPolicyApplications: typeof import("./getNetworkFirewallNetworkFirewallPolicyApplications").getNetworkFirewallNetworkFirewallPolicyApplications = null as any;
export const getNetworkFirewallNetworkFirewallPolicyApplicationsOutput: typeof import("./getNetworkFirewallNetworkFirewallPolicyApplications").getNetworkFirewallNetworkFirewallPolicyApplicationsOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkFirewallNetworkFirewallPolicyApplications","getNetworkFirewallNetworkFirewallPolicyApplicationsOutput"], () => require("./getNetworkFirewallNetworkFirewallPolicyApplications"));

export { GetNetworkFirewallNetworkFirewallPolicyDecryptionProfileArgs, GetNetworkFirewallNetworkFirewallPolicyDecryptionProfileResult, GetNetworkFirewallNetworkFirewallPolicyDecryptionProfileOutputArgs } from "./getNetworkFirewallNetworkFirewallPolicyDecryptionProfile";
export const getNetworkFirewallNetworkFirewallPolicyDecryptionProfile: typeof import("./getNetworkFirewallNetworkFirewallPolicyDecryptionProfile").getNetworkFirewallNetworkFirewallPolicyDecryptionProfile = null as any;
export const getNetworkFirewallNetworkFirewallPolicyDecryptionProfileOutput: typeof import("./getNetworkFirewallNetworkFirewallPolicyDecryptionProfile").getNetworkFirewallNetworkFirewallPolicyDecryptionProfileOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkFirewallNetworkFirewallPolicyDecryptionProfile","getNetworkFirewallNetworkFirewallPolicyDecryptionProfileOutput"], () => require("./getNetworkFirewallNetworkFirewallPolicyDecryptionProfile"));

export { GetNetworkFirewallNetworkFirewallPolicyDecryptionProfilesArgs, GetNetworkFirewallNetworkFirewallPolicyDecryptionProfilesResult, GetNetworkFirewallNetworkFirewallPolicyDecryptionProfilesOutputArgs } from "./getNetworkFirewallNetworkFirewallPolicyDecryptionProfiles";
export const getNetworkFirewallNetworkFirewallPolicyDecryptionProfiles: typeof import("./getNetworkFirewallNetworkFirewallPolicyDecryptionProfiles").getNetworkFirewallNetworkFirewallPolicyDecryptionProfiles = null as any;
export const getNetworkFirewallNetworkFirewallPolicyDecryptionProfilesOutput: typeof import("./getNetworkFirewallNetworkFirewallPolicyDecryptionProfiles").getNetworkFirewallNetworkFirewallPolicyDecryptionProfilesOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkFirewallNetworkFirewallPolicyDecryptionProfiles","getNetworkFirewallNetworkFirewallPolicyDecryptionProfilesOutput"], () => require("./getNetworkFirewallNetworkFirewallPolicyDecryptionProfiles"));

export { GetNetworkFirewallNetworkFirewallPolicyDecryptionRuleArgs, GetNetworkFirewallNetworkFirewallPolicyDecryptionRuleResult, GetNetworkFirewallNetworkFirewallPolicyDecryptionRuleOutputArgs } from "./getNetworkFirewallNetworkFirewallPolicyDecryptionRule";
export const getNetworkFirewallNetworkFirewallPolicyDecryptionRule: typeof import("./getNetworkFirewallNetworkFirewallPolicyDecryptionRule").getNetworkFirewallNetworkFirewallPolicyDecryptionRule = null as any;
export const getNetworkFirewallNetworkFirewallPolicyDecryptionRuleOutput: typeof import("./getNetworkFirewallNetworkFirewallPolicyDecryptionRule").getNetworkFirewallNetworkFirewallPolicyDecryptionRuleOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkFirewallNetworkFirewallPolicyDecryptionRule","getNetworkFirewallNetworkFirewallPolicyDecryptionRuleOutput"], () => require("./getNetworkFirewallNetworkFirewallPolicyDecryptionRule"));

export { GetNetworkFirewallNetworkFirewallPolicyDecryptionRulesArgs, GetNetworkFirewallNetworkFirewallPolicyDecryptionRulesResult, GetNetworkFirewallNetworkFirewallPolicyDecryptionRulesOutputArgs } from "./getNetworkFirewallNetworkFirewallPolicyDecryptionRules";
export const getNetworkFirewallNetworkFirewallPolicyDecryptionRules: typeof import("./getNetworkFirewallNetworkFirewallPolicyDecryptionRules").getNetworkFirewallNetworkFirewallPolicyDecryptionRules = null as any;
export const getNetworkFirewallNetworkFirewallPolicyDecryptionRulesOutput: typeof import("./getNetworkFirewallNetworkFirewallPolicyDecryptionRules").getNetworkFirewallNetworkFirewallPolicyDecryptionRulesOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkFirewallNetworkFirewallPolicyDecryptionRules","getNetworkFirewallNetworkFirewallPolicyDecryptionRulesOutput"], () => require("./getNetworkFirewallNetworkFirewallPolicyDecryptionRules"));

export { GetNetworkFirewallNetworkFirewallPolicyMappedSecretArgs, GetNetworkFirewallNetworkFirewallPolicyMappedSecretResult, GetNetworkFirewallNetworkFirewallPolicyMappedSecretOutputArgs } from "./getNetworkFirewallNetworkFirewallPolicyMappedSecret";
export const getNetworkFirewallNetworkFirewallPolicyMappedSecret: typeof import("./getNetworkFirewallNetworkFirewallPolicyMappedSecret").getNetworkFirewallNetworkFirewallPolicyMappedSecret = null as any;
export const getNetworkFirewallNetworkFirewallPolicyMappedSecretOutput: typeof import("./getNetworkFirewallNetworkFirewallPolicyMappedSecret").getNetworkFirewallNetworkFirewallPolicyMappedSecretOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkFirewallNetworkFirewallPolicyMappedSecret","getNetworkFirewallNetworkFirewallPolicyMappedSecretOutput"], () => require("./getNetworkFirewallNetworkFirewallPolicyMappedSecret"));

export { GetNetworkFirewallNetworkFirewallPolicyMappedSecretsArgs, GetNetworkFirewallNetworkFirewallPolicyMappedSecretsResult, GetNetworkFirewallNetworkFirewallPolicyMappedSecretsOutputArgs } from "./getNetworkFirewallNetworkFirewallPolicyMappedSecrets";
export const getNetworkFirewallNetworkFirewallPolicyMappedSecrets: typeof import("./getNetworkFirewallNetworkFirewallPolicyMappedSecrets").getNetworkFirewallNetworkFirewallPolicyMappedSecrets = null as any;
export const getNetworkFirewallNetworkFirewallPolicyMappedSecretsOutput: typeof import("./getNetworkFirewallNetworkFirewallPolicyMappedSecrets").getNetworkFirewallNetworkFirewallPolicyMappedSecretsOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkFirewallNetworkFirewallPolicyMappedSecrets","getNetworkFirewallNetworkFirewallPolicyMappedSecretsOutput"], () => require("./getNetworkFirewallNetworkFirewallPolicyMappedSecrets"));

export { GetNetworkFirewallNetworkFirewallPolicySecurityRuleArgs, GetNetworkFirewallNetworkFirewallPolicySecurityRuleResult, GetNetworkFirewallNetworkFirewallPolicySecurityRuleOutputArgs } from "./getNetworkFirewallNetworkFirewallPolicySecurityRule";
export const getNetworkFirewallNetworkFirewallPolicySecurityRule: typeof import("./getNetworkFirewallNetworkFirewallPolicySecurityRule").getNetworkFirewallNetworkFirewallPolicySecurityRule = null as any;
export const getNetworkFirewallNetworkFirewallPolicySecurityRuleOutput: typeof import("./getNetworkFirewallNetworkFirewallPolicySecurityRule").getNetworkFirewallNetworkFirewallPolicySecurityRuleOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkFirewallNetworkFirewallPolicySecurityRule","getNetworkFirewallNetworkFirewallPolicySecurityRuleOutput"], () => require("./getNetworkFirewallNetworkFirewallPolicySecurityRule"));

export { GetNetworkFirewallNetworkFirewallPolicySecurityRulesArgs, GetNetworkFirewallNetworkFirewallPolicySecurityRulesResult, GetNetworkFirewallNetworkFirewallPolicySecurityRulesOutputArgs } from "./getNetworkFirewallNetworkFirewallPolicySecurityRules";
export const getNetworkFirewallNetworkFirewallPolicySecurityRules: typeof import("./getNetworkFirewallNetworkFirewallPolicySecurityRules").getNetworkFirewallNetworkFirewallPolicySecurityRules = null as any;
export const getNetworkFirewallNetworkFirewallPolicySecurityRulesOutput: typeof import("./getNetworkFirewallNetworkFirewallPolicySecurityRules").getNetworkFirewallNetworkFirewallPolicySecurityRulesOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkFirewallNetworkFirewallPolicySecurityRules","getNetworkFirewallNetworkFirewallPolicySecurityRulesOutput"], () => require("./getNetworkFirewallNetworkFirewallPolicySecurityRules"));

export { GetNetworkFirewallNetworkFirewallPolicyServiceArgs, GetNetworkFirewallNetworkFirewallPolicyServiceResult, GetNetworkFirewallNetworkFirewallPolicyServiceOutputArgs } from "./getNetworkFirewallNetworkFirewallPolicyService";
export const getNetworkFirewallNetworkFirewallPolicyService: typeof import("./getNetworkFirewallNetworkFirewallPolicyService").getNetworkFirewallNetworkFirewallPolicyService = null as any;
export const getNetworkFirewallNetworkFirewallPolicyServiceOutput: typeof import("./getNetworkFirewallNetworkFirewallPolicyService").getNetworkFirewallNetworkFirewallPolicyServiceOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkFirewallNetworkFirewallPolicyService","getNetworkFirewallNetworkFirewallPolicyServiceOutput"], () => require("./getNetworkFirewallNetworkFirewallPolicyService"));

export { GetNetworkFirewallNetworkFirewallPolicyServiceListArgs, GetNetworkFirewallNetworkFirewallPolicyServiceListResult, GetNetworkFirewallNetworkFirewallPolicyServiceListOutputArgs } from "./getNetworkFirewallNetworkFirewallPolicyServiceList";
export const getNetworkFirewallNetworkFirewallPolicyServiceList: typeof import("./getNetworkFirewallNetworkFirewallPolicyServiceList").getNetworkFirewallNetworkFirewallPolicyServiceList = null as any;
export const getNetworkFirewallNetworkFirewallPolicyServiceListOutput: typeof import("./getNetworkFirewallNetworkFirewallPolicyServiceList").getNetworkFirewallNetworkFirewallPolicyServiceListOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkFirewallNetworkFirewallPolicyServiceList","getNetworkFirewallNetworkFirewallPolicyServiceListOutput"], () => require("./getNetworkFirewallNetworkFirewallPolicyServiceList"));

export { GetNetworkFirewallNetworkFirewallPolicyServiceListsArgs, GetNetworkFirewallNetworkFirewallPolicyServiceListsResult, GetNetworkFirewallNetworkFirewallPolicyServiceListsOutputArgs } from "./getNetworkFirewallNetworkFirewallPolicyServiceLists";
export const getNetworkFirewallNetworkFirewallPolicyServiceLists: typeof import("./getNetworkFirewallNetworkFirewallPolicyServiceLists").getNetworkFirewallNetworkFirewallPolicyServiceLists = null as any;
export const getNetworkFirewallNetworkFirewallPolicyServiceListsOutput: typeof import("./getNetworkFirewallNetworkFirewallPolicyServiceLists").getNetworkFirewallNetworkFirewallPolicyServiceListsOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkFirewallNetworkFirewallPolicyServiceLists","getNetworkFirewallNetworkFirewallPolicyServiceListsOutput"], () => require("./getNetworkFirewallNetworkFirewallPolicyServiceLists"));

export { GetNetworkFirewallNetworkFirewallPolicyServicesArgs, GetNetworkFirewallNetworkFirewallPolicyServicesResult, GetNetworkFirewallNetworkFirewallPolicyServicesOutputArgs } from "./getNetworkFirewallNetworkFirewallPolicyServices";
export const getNetworkFirewallNetworkFirewallPolicyServices: typeof import("./getNetworkFirewallNetworkFirewallPolicyServices").getNetworkFirewallNetworkFirewallPolicyServices = null as any;
export const getNetworkFirewallNetworkFirewallPolicyServicesOutput: typeof import("./getNetworkFirewallNetworkFirewallPolicyServices").getNetworkFirewallNetworkFirewallPolicyServicesOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkFirewallNetworkFirewallPolicyServices","getNetworkFirewallNetworkFirewallPolicyServicesOutput"], () => require("./getNetworkFirewallNetworkFirewallPolicyServices"));

export { GetNetworkFirewallNetworkFirewallPolicyTunnelInspectionRuleArgs, GetNetworkFirewallNetworkFirewallPolicyTunnelInspectionRuleResult, GetNetworkFirewallNetworkFirewallPolicyTunnelInspectionRuleOutputArgs } from "./getNetworkFirewallNetworkFirewallPolicyTunnelInspectionRule";
export const getNetworkFirewallNetworkFirewallPolicyTunnelInspectionRule: typeof import("./getNetworkFirewallNetworkFirewallPolicyTunnelInspectionRule").getNetworkFirewallNetworkFirewallPolicyTunnelInspectionRule = null as any;
export const getNetworkFirewallNetworkFirewallPolicyTunnelInspectionRuleOutput: typeof import("./getNetworkFirewallNetworkFirewallPolicyTunnelInspectionRule").getNetworkFirewallNetworkFirewallPolicyTunnelInspectionRuleOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkFirewallNetworkFirewallPolicyTunnelInspectionRule","getNetworkFirewallNetworkFirewallPolicyTunnelInspectionRuleOutput"], () => require("./getNetworkFirewallNetworkFirewallPolicyTunnelInspectionRule"));

export { GetNetworkFirewallNetworkFirewallPolicyTunnelInspectionRulesArgs, GetNetworkFirewallNetworkFirewallPolicyTunnelInspectionRulesResult, GetNetworkFirewallNetworkFirewallPolicyTunnelInspectionRulesOutputArgs } from "./getNetworkFirewallNetworkFirewallPolicyTunnelInspectionRules";
export const getNetworkFirewallNetworkFirewallPolicyTunnelInspectionRules: typeof import("./getNetworkFirewallNetworkFirewallPolicyTunnelInspectionRules").getNetworkFirewallNetworkFirewallPolicyTunnelInspectionRules = null as any;
export const getNetworkFirewallNetworkFirewallPolicyTunnelInspectionRulesOutput: typeof import("./getNetworkFirewallNetworkFirewallPolicyTunnelInspectionRules").getNetworkFirewallNetworkFirewallPolicyTunnelInspectionRulesOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkFirewallNetworkFirewallPolicyTunnelInspectionRules","getNetworkFirewallNetworkFirewallPolicyTunnelInspectionRulesOutput"], () => require("./getNetworkFirewallNetworkFirewallPolicyTunnelInspectionRules"));

export { GetNetworkFirewallNetworkFirewallPolicyUrlListArgs, GetNetworkFirewallNetworkFirewallPolicyUrlListResult, GetNetworkFirewallNetworkFirewallPolicyUrlListOutputArgs } from "./getNetworkFirewallNetworkFirewallPolicyUrlList";
export const getNetworkFirewallNetworkFirewallPolicyUrlList: typeof import("./getNetworkFirewallNetworkFirewallPolicyUrlList").getNetworkFirewallNetworkFirewallPolicyUrlList = null as any;
export const getNetworkFirewallNetworkFirewallPolicyUrlListOutput: typeof import("./getNetworkFirewallNetworkFirewallPolicyUrlList").getNetworkFirewallNetworkFirewallPolicyUrlListOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkFirewallNetworkFirewallPolicyUrlList","getNetworkFirewallNetworkFirewallPolicyUrlListOutput"], () => require("./getNetworkFirewallNetworkFirewallPolicyUrlList"));

export { GetNetworkFirewallNetworkFirewallPolicyUrlListsArgs, GetNetworkFirewallNetworkFirewallPolicyUrlListsResult, GetNetworkFirewallNetworkFirewallPolicyUrlListsOutputArgs } from "./getNetworkFirewallNetworkFirewallPolicyUrlLists";
export const getNetworkFirewallNetworkFirewallPolicyUrlLists: typeof import("./getNetworkFirewallNetworkFirewallPolicyUrlLists").getNetworkFirewallNetworkFirewallPolicyUrlLists = null as any;
export const getNetworkFirewallNetworkFirewallPolicyUrlListsOutput: typeof import("./getNetworkFirewallNetworkFirewallPolicyUrlLists").getNetworkFirewallNetworkFirewallPolicyUrlListsOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkFirewallNetworkFirewallPolicyUrlLists","getNetworkFirewallNetworkFirewallPolicyUrlListsOutput"], () => require("./getNetworkFirewallNetworkFirewallPolicyUrlLists"));

export { GetNetworkFirewallNetworkFirewallsArgs, GetNetworkFirewallNetworkFirewallsResult, GetNetworkFirewallNetworkFirewallsOutputArgs } from "./getNetworkFirewallNetworkFirewalls";
export const getNetworkFirewallNetworkFirewalls: typeof import("./getNetworkFirewallNetworkFirewalls").getNetworkFirewallNetworkFirewalls = null as any;
export const getNetworkFirewallNetworkFirewallsOutput: typeof import("./getNetworkFirewallNetworkFirewalls").getNetworkFirewallNetworkFirewallsOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkFirewallNetworkFirewalls","getNetworkFirewallNetworkFirewallsOutput"], () => require("./getNetworkFirewallNetworkFirewalls"));

export { GetNetworkLoadBalancerBackendHealthArgs, GetNetworkLoadBalancerBackendHealthResult, GetNetworkLoadBalancerBackendHealthOutputArgs } from "./getNetworkLoadBalancerBackendHealth";
export const getNetworkLoadBalancerBackendHealth: typeof import("./getNetworkLoadBalancerBackendHealth").getNetworkLoadBalancerBackendHealth = null as any;
export const getNetworkLoadBalancerBackendHealthOutput: typeof import("./getNetworkLoadBalancerBackendHealth").getNetworkLoadBalancerBackendHealthOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkLoadBalancerBackendHealth","getNetworkLoadBalancerBackendHealthOutput"], () => require("./getNetworkLoadBalancerBackendHealth"));

export { GetNetworkLoadBalancerBackendSetArgs, GetNetworkLoadBalancerBackendSetResult, GetNetworkLoadBalancerBackendSetOutputArgs } from "./getNetworkLoadBalancerBackendSet";
export const getNetworkLoadBalancerBackendSet: typeof import("./getNetworkLoadBalancerBackendSet").getNetworkLoadBalancerBackendSet = null as any;
export const getNetworkLoadBalancerBackendSetOutput: typeof import("./getNetworkLoadBalancerBackendSet").getNetworkLoadBalancerBackendSetOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkLoadBalancerBackendSet","getNetworkLoadBalancerBackendSetOutput"], () => require("./getNetworkLoadBalancerBackendSet"));

export { GetNetworkLoadBalancerBackendSetHealthArgs, GetNetworkLoadBalancerBackendSetHealthResult, GetNetworkLoadBalancerBackendSetHealthOutputArgs } from "./getNetworkLoadBalancerBackendSetHealth";
export const getNetworkLoadBalancerBackendSetHealth: typeof import("./getNetworkLoadBalancerBackendSetHealth").getNetworkLoadBalancerBackendSetHealth = null as any;
export const getNetworkLoadBalancerBackendSetHealthOutput: typeof import("./getNetworkLoadBalancerBackendSetHealth").getNetworkLoadBalancerBackendSetHealthOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkLoadBalancerBackendSetHealth","getNetworkLoadBalancerBackendSetHealthOutput"], () => require("./getNetworkLoadBalancerBackendSetHealth"));

export { GetNetworkLoadBalancerBackendSetsArgs, GetNetworkLoadBalancerBackendSetsResult, GetNetworkLoadBalancerBackendSetsOutputArgs } from "./getNetworkLoadBalancerBackendSets";
export const getNetworkLoadBalancerBackendSets: typeof import("./getNetworkLoadBalancerBackendSets").getNetworkLoadBalancerBackendSets = null as any;
export const getNetworkLoadBalancerBackendSetsOutput: typeof import("./getNetworkLoadBalancerBackendSets").getNetworkLoadBalancerBackendSetsOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkLoadBalancerBackendSets","getNetworkLoadBalancerBackendSetsOutput"], () => require("./getNetworkLoadBalancerBackendSets"));

export { GetNetworkLoadBalancerBackendsArgs, GetNetworkLoadBalancerBackendsResult, GetNetworkLoadBalancerBackendsOutputArgs } from "./getNetworkLoadBalancerBackends";
export const getNetworkLoadBalancerBackends: typeof import("./getNetworkLoadBalancerBackends").getNetworkLoadBalancerBackends = null as any;
export const getNetworkLoadBalancerBackendsOutput: typeof import("./getNetworkLoadBalancerBackends").getNetworkLoadBalancerBackendsOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkLoadBalancerBackends","getNetworkLoadBalancerBackendsOutput"], () => require("./getNetworkLoadBalancerBackends"));

export { GetNetworkLoadBalancerListenerArgs, GetNetworkLoadBalancerListenerResult, GetNetworkLoadBalancerListenerOutputArgs } from "./getNetworkLoadBalancerListener";
export const getNetworkLoadBalancerListener: typeof import("./getNetworkLoadBalancerListener").getNetworkLoadBalancerListener = null as any;
export const getNetworkLoadBalancerListenerOutput: typeof import("./getNetworkLoadBalancerListener").getNetworkLoadBalancerListenerOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkLoadBalancerListener","getNetworkLoadBalancerListenerOutput"], () => require("./getNetworkLoadBalancerListener"));

export { GetNetworkLoadBalancerListenersArgs, GetNetworkLoadBalancerListenersResult, GetNetworkLoadBalancerListenersOutputArgs } from "./getNetworkLoadBalancerListeners";
export const getNetworkLoadBalancerListeners: typeof import("./getNetworkLoadBalancerListeners").getNetworkLoadBalancerListeners = null as any;
export const getNetworkLoadBalancerListenersOutput: typeof import("./getNetworkLoadBalancerListeners").getNetworkLoadBalancerListenersOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkLoadBalancerListeners","getNetworkLoadBalancerListenersOutput"], () => require("./getNetworkLoadBalancerListeners"));

export { GetNetworkLoadBalancerNetworkLoadBalancerArgs, GetNetworkLoadBalancerNetworkLoadBalancerResult, GetNetworkLoadBalancerNetworkLoadBalancerOutputArgs } from "./getNetworkLoadBalancerNetworkLoadBalancer";
export const getNetworkLoadBalancerNetworkLoadBalancer: typeof import("./getNetworkLoadBalancerNetworkLoadBalancer").getNetworkLoadBalancerNetworkLoadBalancer = null as any;
export const getNetworkLoadBalancerNetworkLoadBalancerOutput: typeof import("./getNetworkLoadBalancerNetworkLoadBalancer").getNetworkLoadBalancerNetworkLoadBalancerOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkLoadBalancerNetworkLoadBalancer","getNetworkLoadBalancerNetworkLoadBalancerOutput"], () => require("./getNetworkLoadBalancerNetworkLoadBalancer"));

export { GetNetworkLoadBalancerNetworkLoadBalancerHealthArgs, GetNetworkLoadBalancerNetworkLoadBalancerHealthResult, GetNetworkLoadBalancerNetworkLoadBalancerHealthOutputArgs } from "./getNetworkLoadBalancerNetworkLoadBalancerHealth";
export const getNetworkLoadBalancerNetworkLoadBalancerHealth: typeof import("./getNetworkLoadBalancerNetworkLoadBalancerHealth").getNetworkLoadBalancerNetworkLoadBalancerHealth = null as any;
export const getNetworkLoadBalancerNetworkLoadBalancerHealthOutput: typeof import("./getNetworkLoadBalancerNetworkLoadBalancerHealth").getNetworkLoadBalancerNetworkLoadBalancerHealthOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkLoadBalancerNetworkLoadBalancerHealth","getNetworkLoadBalancerNetworkLoadBalancerHealthOutput"], () => require("./getNetworkLoadBalancerNetworkLoadBalancerHealth"));

export { GetNetworkLoadBalancerNetworkLoadBalancersArgs, GetNetworkLoadBalancerNetworkLoadBalancersResult, GetNetworkLoadBalancerNetworkLoadBalancersOutputArgs } from "./getNetworkLoadBalancerNetworkLoadBalancers";
export const getNetworkLoadBalancerNetworkLoadBalancers: typeof import("./getNetworkLoadBalancerNetworkLoadBalancers").getNetworkLoadBalancerNetworkLoadBalancers = null as any;
export const getNetworkLoadBalancerNetworkLoadBalancersOutput: typeof import("./getNetworkLoadBalancerNetworkLoadBalancers").getNetworkLoadBalancerNetworkLoadBalancersOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkLoadBalancerNetworkLoadBalancers","getNetworkLoadBalancerNetworkLoadBalancersOutput"], () => require("./getNetworkLoadBalancerNetworkLoadBalancers"));

export { GetNetworkLoadBalancerNetworkLoadBalancersPoliciesArgs, GetNetworkLoadBalancerNetworkLoadBalancersPoliciesResult, GetNetworkLoadBalancerNetworkLoadBalancersPoliciesOutputArgs } from "./getNetworkLoadBalancerNetworkLoadBalancersPolicies";
export const getNetworkLoadBalancerNetworkLoadBalancersPolicies: typeof import("./getNetworkLoadBalancerNetworkLoadBalancersPolicies").getNetworkLoadBalancerNetworkLoadBalancersPolicies = null as any;
export const getNetworkLoadBalancerNetworkLoadBalancersPoliciesOutput: typeof import("./getNetworkLoadBalancerNetworkLoadBalancersPolicies").getNetworkLoadBalancerNetworkLoadBalancersPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkLoadBalancerNetworkLoadBalancersPolicies","getNetworkLoadBalancerNetworkLoadBalancersPoliciesOutput"], () => require("./getNetworkLoadBalancerNetworkLoadBalancersPolicies"));

export { GetNetworkLoadBalancerNetworkLoadBalancersProtocolsArgs, GetNetworkLoadBalancerNetworkLoadBalancersProtocolsResult, GetNetworkLoadBalancerNetworkLoadBalancersProtocolsOutputArgs } from "./getNetworkLoadBalancerNetworkLoadBalancersProtocols";
export const getNetworkLoadBalancerNetworkLoadBalancersProtocols: typeof import("./getNetworkLoadBalancerNetworkLoadBalancersProtocols").getNetworkLoadBalancerNetworkLoadBalancersProtocols = null as any;
export const getNetworkLoadBalancerNetworkLoadBalancersProtocolsOutput: typeof import("./getNetworkLoadBalancerNetworkLoadBalancersProtocols").getNetworkLoadBalancerNetworkLoadBalancersProtocolsOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkLoadBalancerNetworkLoadBalancersProtocols","getNetworkLoadBalancerNetworkLoadBalancersProtocolsOutput"], () => require("./getNetworkLoadBalancerNetworkLoadBalancersProtocols"));

export { GetNosqlIndexArgs, GetNosqlIndexResult, GetNosqlIndexOutputArgs } from "./getNosqlIndex";
export const getNosqlIndex: typeof import("./getNosqlIndex").getNosqlIndex = null as any;
export const getNosqlIndexOutput: typeof import("./getNosqlIndex").getNosqlIndexOutput = null as any;
utilities.lazyLoad(exports, ["getNosqlIndex","getNosqlIndexOutput"], () => require("./getNosqlIndex"));

export { GetNosqlIndexesArgs, GetNosqlIndexesResult, GetNosqlIndexesOutputArgs } from "./getNosqlIndexes";
export const getNosqlIndexes: typeof import("./getNosqlIndexes").getNosqlIndexes = null as any;
export const getNosqlIndexesOutput: typeof import("./getNosqlIndexes").getNosqlIndexesOutput = null as any;
utilities.lazyLoad(exports, ["getNosqlIndexes","getNosqlIndexesOutput"], () => require("./getNosqlIndexes"));

export { GetNosqlTableArgs, GetNosqlTableResult, GetNosqlTableOutputArgs } from "./getNosqlTable";
export const getNosqlTable: typeof import("./getNosqlTable").getNosqlTable = null as any;
export const getNosqlTableOutput: typeof import("./getNosqlTable").getNosqlTableOutput = null as any;
utilities.lazyLoad(exports, ["getNosqlTable","getNosqlTableOutput"], () => require("./getNosqlTable"));

export { GetNosqlTablesArgs, GetNosqlTablesResult, GetNosqlTablesOutputArgs } from "./getNosqlTables";
export const getNosqlTables: typeof import("./getNosqlTables").getNosqlTables = null as any;
export const getNosqlTablesOutput: typeof import("./getNosqlTables").getNosqlTablesOutput = null as any;
utilities.lazyLoad(exports, ["getNosqlTables","getNosqlTablesOutput"], () => require("./getNosqlTables"));

export { GetObjectstorageBucketArgs, GetObjectstorageBucketResult, GetObjectstorageBucketOutputArgs } from "./getObjectstorageBucket";
export const getObjectstorageBucket: typeof import("./getObjectstorageBucket").getObjectstorageBucket = null as any;
export const getObjectstorageBucketOutput: typeof import("./getObjectstorageBucket").getObjectstorageBucketOutput = null as any;
utilities.lazyLoad(exports, ["getObjectstorageBucket","getObjectstorageBucketOutput"], () => require("./getObjectstorageBucket"));

export { GetObjectstorageBucketSummariesArgs, GetObjectstorageBucketSummariesResult, GetObjectstorageBucketSummariesOutputArgs } from "./getObjectstorageBucketSummaries";
export const getObjectstorageBucketSummaries: typeof import("./getObjectstorageBucketSummaries").getObjectstorageBucketSummaries = null as any;
export const getObjectstorageBucketSummariesOutput: typeof import("./getObjectstorageBucketSummaries").getObjectstorageBucketSummariesOutput = null as any;
utilities.lazyLoad(exports, ["getObjectstorageBucketSummaries","getObjectstorageBucketSummariesOutput"], () => require("./getObjectstorageBucketSummaries"));

export { GetObjectstorageNamespaceArgs, GetObjectstorageNamespaceResult, GetObjectstorageNamespaceOutputArgs } from "./getObjectstorageNamespace";
export const getObjectstorageNamespace: typeof import("./getObjectstorageNamespace").getObjectstorageNamespace = null as any;
export const getObjectstorageNamespaceOutput: typeof import("./getObjectstorageNamespace").getObjectstorageNamespaceOutput = null as any;
utilities.lazyLoad(exports, ["getObjectstorageNamespace","getObjectstorageNamespaceOutput"], () => require("./getObjectstorageNamespace"));

export { GetObjectstorageNamespaceMetadataArgs, GetObjectstorageNamespaceMetadataResult, GetObjectstorageNamespaceMetadataOutputArgs } from "./getObjectstorageNamespaceMetadata";
export const getObjectstorageNamespaceMetadata: typeof import("./getObjectstorageNamespaceMetadata").getObjectstorageNamespaceMetadata = null as any;
export const getObjectstorageNamespaceMetadataOutput: typeof import("./getObjectstorageNamespaceMetadata").getObjectstorageNamespaceMetadataOutput = null as any;
utilities.lazyLoad(exports, ["getObjectstorageNamespaceMetadata","getObjectstorageNamespaceMetadataOutput"], () => require("./getObjectstorageNamespaceMetadata"));

export { GetObjectstorageObjectArgs, GetObjectstorageObjectResult, GetObjectstorageObjectOutputArgs } from "./getObjectstorageObject";
export const getObjectstorageObject: typeof import("./getObjectstorageObject").getObjectstorageObject = null as any;
export const getObjectstorageObjectOutput: typeof import("./getObjectstorageObject").getObjectstorageObjectOutput = null as any;
utilities.lazyLoad(exports, ["getObjectstorageObject","getObjectstorageObjectOutput"], () => require("./getObjectstorageObject"));

export { GetObjectstorageObjectHeadArgs, GetObjectstorageObjectHeadResult, GetObjectstorageObjectHeadOutputArgs } from "./getObjectstorageObjectHead";
export const getObjectstorageObjectHead: typeof import("./getObjectstorageObjectHead").getObjectstorageObjectHead = null as any;
export const getObjectstorageObjectHeadOutput: typeof import("./getObjectstorageObjectHead").getObjectstorageObjectHeadOutput = null as any;
utilities.lazyLoad(exports, ["getObjectstorageObjectHead","getObjectstorageObjectHeadOutput"], () => require("./getObjectstorageObjectHead"));

export { GetObjectstorageObjectLifecyclePolicyArgs, GetObjectstorageObjectLifecyclePolicyResult, GetObjectstorageObjectLifecyclePolicyOutputArgs } from "./getObjectstorageObjectLifecyclePolicy";
export const getObjectstorageObjectLifecyclePolicy: typeof import("./getObjectstorageObjectLifecyclePolicy").getObjectstorageObjectLifecyclePolicy = null as any;
export const getObjectstorageObjectLifecyclePolicyOutput: typeof import("./getObjectstorageObjectLifecyclePolicy").getObjectstorageObjectLifecyclePolicyOutput = null as any;
utilities.lazyLoad(exports, ["getObjectstorageObjectLifecyclePolicy","getObjectstorageObjectLifecyclePolicyOutput"], () => require("./getObjectstorageObjectLifecyclePolicy"));

export { GetObjectstorageObjectVersionsArgs, GetObjectstorageObjectVersionsResult, GetObjectstorageObjectVersionsOutputArgs } from "./getObjectstorageObjectVersions";
export const getObjectstorageObjectVersions: typeof import("./getObjectstorageObjectVersions").getObjectstorageObjectVersions = null as any;
export const getObjectstorageObjectVersionsOutput: typeof import("./getObjectstorageObjectVersions").getObjectstorageObjectVersionsOutput = null as any;
utilities.lazyLoad(exports, ["getObjectstorageObjectVersions","getObjectstorageObjectVersionsOutput"], () => require("./getObjectstorageObjectVersions"));

export { GetObjectstorageObjectsArgs, GetObjectstorageObjectsResult, GetObjectstorageObjectsOutputArgs } from "./getObjectstorageObjects";
export const getObjectstorageObjects: typeof import("./getObjectstorageObjects").getObjectstorageObjects = null as any;
export const getObjectstorageObjectsOutput: typeof import("./getObjectstorageObjects").getObjectstorageObjectsOutput = null as any;
utilities.lazyLoad(exports, ["getObjectstorageObjects","getObjectstorageObjectsOutput"], () => require("./getObjectstorageObjects"));

export { GetObjectstoragePreauthrequestArgs, GetObjectstoragePreauthrequestResult, GetObjectstoragePreauthrequestOutputArgs } from "./getObjectstoragePreauthrequest";
export const getObjectstoragePreauthrequest: typeof import("./getObjectstoragePreauthrequest").getObjectstoragePreauthrequest = null as any;
export const getObjectstoragePreauthrequestOutput: typeof import("./getObjectstoragePreauthrequest").getObjectstoragePreauthrequestOutput = null as any;
utilities.lazyLoad(exports, ["getObjectstoragePreauthrequest","getObjectstoragePreauthrequestOutput"], () => require("./getObjectstoragePreauthrequest"));

export { GetObjectstoragePreauthrequestsArgs, GetObjectstoragePreauthrequestsResult, GetObjectstoragePreauthrequestsOutputArgs } from "./getObjectstoragePreauthrequests";
export const getObjectstoragePreauthrequests: typeof import("./getObjectstoragePreauthrequests").getObjectstoragePreauthrequests = null as any;
export const getObjectstoragePreauthrequestsOutput: typeof import("./getObjectstoragePreauthrequests").getObjectstoragePreauthrequestsOutput = null as any;
utilities.lazyLoad(exports, ["getObjectstoragePreauthrequests","getObjectstoragePreauthrequestsOutput"], () => require("./getObjectstoragePreauthrequests"));

export { GetObjectstorageReplicationPoliciesArgs, GetObjectstorageReplicationPoliciesResult, GetObjectstorageReplicationPoliciesOutputArgs } from "./getObjectstorageReplicationPolicies";
export const getObjectstorageReplicationPolicies: typeof import("./getObjectstorageReplicationPolicies").getObjectstorageReplicationPolicies = null as any;
export const getObjectstorageReplicationPoliciesOutput: typeof import("./getObjectstorageReplicationPolicies").getObjectstorageReplicationPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getObjectstorageReplicationPolicies","getObjectstorageReplicationPoliciesOutput"], () => require("./getObjectstorageReplicationPolicies"));

export { GetObjectstorageReplicationPolicyArgs, GetObjectstorageReplicationPolicyResult, GetObjectstorageReplicationPolicyOutputArgs } from "./getObjectstorageReplicationPolicy";
export const getObjectstorageReplicationPolicy: typeof import("./getObjectstorageReplicationPolicy").getObjectstorageReplicationPolicy = null as any;
export const getObjectstorageReplicationPolicyOutput: typeof import("./getObjectstorageReplicationPolicy").getObjectstorageReplicationPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getObjectstorageReplicationPolicy","getObjectstorageReplicationPolicyOutput"], () => require("./getObjectstorageReplicationPolicy"));

export { GetObjectstorageReplicationSourcesArgs, GetObjectstorageReplicationSourcesResult, GetObjectstorageReplicationSourcesOutputArgs } from "./getObjectstorageReplicationSources";
export const getObjectstorageReplicationSources: typeof import("./getObjectstorageReplicationSources").getObjectstorageReplicationSources = null as any;
export const getObjectstorageReplicationSourcesOutput: typeof import("./getObjectstorageReplicationSources").getObjectstorageReplicationSourcesOutput = null as any;
utilities.lazyLoad(exports, ["getObjectstorageReplicationSources","getObjectstorageReplicationSourcesOutput"], () => require("./getObjectstorageReplicationSources"));

export { GetOceOceInstanceArgs, GetOceOceInstanceResult, GetOceOceInstanceOutputArgs } from "./getOceOceInstance";
export const getOceOceInstance: typeof import("./getOceOceInstance").getOceOceInstance = null as any;
export const getOceOceInstanceOutput: typeof import("./getOceOceInstance").getOceOceInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getOceOceInstance","getOceOceInstanceOutput"], () => require("./getOceOceInstance"));

export { GetOceOceInstancesArgs, GetOceOceInstancesResult, GetOceOceInstancesOutputArgs } from "./getOceOceInstances";
export const getOceOceInstances: typeof import("./getOceOceInstances").getOceOceInstances = null as any;
export const getOceOceInstancesOutput: typeof import("./getOceOceInstances").getOceOceInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getOceOceInstances","getOceOceInstancesOutput"], () => require("./getOceOceInstances"));

export { GetOcvpClusterArgs, GetOcvpClusterResult, GetOcvpClusterOutputArgs } from "./getOcvpCluster";
export const getOcvpCluster: typeof import("./getOcvpCluster").getOcvpCluster = null as any;
export const getOcvpClusterOutput: typeof import("./getOcvpCluster").getOcvpClusterOutput = null as any;
utilities.lazyLoad(exports, ["getOcvpCluster","getOcvpClusterOutput"], () => require("./getOcvpCluster"));

export { GetOcvpClustersArgs, GetOcvpClustersResult, GetOcvpClustersOutputArgs } from "./getOcvpClusters";
export const getOcvpClusters: typeof import("./getOcvpClusters").getOcvpClusters = null as any;
export const getOcvpClustersOutput: typeof import("./getOcvpClusters").getOcvpClustersOutput = null as any;
utilities.lazyLoad(exports, ["getOcvpClusters","getOcvpClustersOutput"], () => require("./getOcvpClusters"));

export { GetOcvpEsxiHostArgs, GetOcvpEsxiHostResult, GetOcvpEsxiHostOutputArgs } from "./getOcvpEsxiHost";
export const getOcvpEsxiHost: typeof import("./getOcvpEsxiHost").getOcvpEsxiHost = null as any;
export const getOcvpEsxiHostOutput: typeof import("./getOcvpEsxiHost").getOcvpEsxiHostOutput = null as any;
utilities.lazyLoad(exports, ["getOcvpEsxiHost","getOcvpEsxiHostOutput"], () => require("./getOcvpEsxiHost"));

export { GetOcvpEsxiHostsArgs, GetOcvpEsxiHostsResult, GetOcvpEsxiHostsOutputArgs } from "./getOcvpEsxiHosts";
export const getOcvpEsxiHosts: typeof import("./getOcvpEsxiHosts").getOcvpEsxiHosts = null as any;
export const getOcvpEsxiHostsOutput: typeof import("./getOcvpEsxiHosts").getOcvpEsxiHostsOutput = null as any;
utilities.lazyLoad(exports, ["getOcvpEsxiHosts","getOcvpEsxiHostsOutput"], () => require("./getOcvpEsxiHosts"));

export { GetOcvpRetrievePasswordArgs, GetOcvpRetrievePasswordResult, GetOcvpRetrievePasswordOutputArgs } from "./getOcvpRetrievePassword";
export const getOcvpRetrievePassword: typeof import("./getOcvpRetrievePassword").getOcvpRetrievePassword = null as any;
export const getOcvpRetrievePasswordOutput: typeof import("./getOcvpRetrievePassword").getOcvpRetrievePasswordOutput = null as any;
utilities.lazyLoad(exports, ["getOcvpRetrievePassword","getOcvpRetrievePasswordOutput"], () => require("./getOcvpRetrievePassword"));

export { GetOcvpSddcArgs, GetOcvpSddcResult, GetOcvpSddcOutputArgs } from "./getOcvpSddc";
export const getOcvpSddc: typeof import("./getOcvpSddc").getOcvpSddc = null as any;
export const getOcvpSddcOutput: typeof import("./getOcvpSddc").getOcvpSddcOutput = null as any;
utilities.lazyLoad(exports, ["getOcvpSddc","getOcvpSddcOutput"], () => require("./getOcvpSddc"));

export { GetOcvpSddcsArgs, GetOcvpSddcsResult, GetOcvpSddcsOutputArgs } from "./getOcvpSddcs";
export const getOcvpSddcs: typeof import("./getOcvpSddcs").getOcvpSddcs = null as any;
export const getOcvpSddcsOutput: typeof import("./getOcvpSddcs").getOcvpSddcsOutput = null as any;
utilities.lazyLoad(exports, ["getOcvpSddcs","getOcvpSddcsOutput"], () => require("./getOcvpSddcs"));

export { GetOcvpSupportedCommitmentsArgs, GetOcvpSupportedCommitmentsResult, GetOcvpSupportedCommitmentsOutputArgs } from "./getOcvpSupportedCommitments";
export const getOcvpSupportedCommitments: typeof import("./getOcvpSupportedCommitments").getOcvpSupportedCommitments = null as any;
export const getOcvpSupportedCommitmentsOutput: typeof import("./getOcvpSupportedCommitments").getOcvpSupportedCommitmentsOutput = null as any;
utilities.lazyLoad(exports, ["getOcvpSupportedCommitments","getOcvpSupportedCommitmentsOutput"], () => require("./getOcvpSupportedCommitments"));

export { GetOcvpSupportedHostShapesArgs, GetOcvpSupportedHostShapesResult, GetOcvpSupportedHostShapesOutputArgs } from "./getOcvpSupportedHostShapes";
export const getOcvpSupportedHostShapes: typeof import("./getOcvpSupportedHostShapes").getOcvpSupportedHostShapes = null as any;
export const getOcvpSupportedHostShapesOutput: typeof import("./getOcvpSupportedHostShapes").getOcvpSupportedHostShapesOutput = null as any;
utilities.lazyLoad(exports, ["getOcvpSupportedHostShapes","getOcvpSupportedHostShapesOutput"], () => require("./getOcvpSupportedHostShapes"));

export { GetOcvpSupportedSkusArgs, GetOcvpSupportedSkusResult, GetOcvpSupportedSkusOutputArgs } from "./getOcvpSupportedSkus";
export const getOcvpSupportedSkus: typeof import("./getOcvpSupportedSkus").getOcvpSupportedSkus = null as any;
export const getOcvpSupportedSkusOutput: typeof import("./getOcvpSupportedSkus").getOcvpSupportedSkusOutput = null as any;
utilities.lazyLoad(exports, ["getOcvpSupportedSkus","getOcvpSupportedSkusOutput"], () => require("./getOcvpSupportedSkus"));

export { GetOcvpSupportedVmwareSoftwareVersionsArgs, GetOcvpSupportedVmwareSoftwareVersionsResult, GetOcvpSupportedVmwareSoftwareVersionsOutputArgs } from "./getOcvpSupportedVmwareSoftwareVersions";
export const getOcvpSupportedVmwareSoftwareVersions: typeof import("./getOcvpSupportedVmwareSoftwareVersions").getOcvpSupportedVmwareSoftwareVersions = null as any;
export const getOcvpSupportedVmwareSoftwareVersionsOutput: typeof import("./getOcvpSupportedVmwareSoftwareVersions").getOcvpSupportedVmwareSoftwareVersionsOutput = null as any;
utilities.lazyLoad(exports, ["getOcvpSupportedVmwareSoftwareVersions","getOcvpSupportedVmwareSoftwareVersionsOutput"], () => require("./getOcvpSupportedVmwareSoftwareVersions"));

export { GetOdaOdaInstanceArgs, GetOdaOdaInstanceResult, GetOdaOdaInstanceOutputArgs } from "./getOdaOdaInstance";
export const getOdaOdaInstance: typeof import("./getOdaOdaInstance").getOdaOdaInstance = null as any;
export const getOdaOdaInstanceOutput: typeof import("./getOdaOdaInstance").getOdaOdaInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getOdaOdaInstance","getOdaOdaInstanceOutput"], () => require("./getOdaOdaInstance"));

export { GetOdaOdaInstancesArgs, GetOdaOdaInstancesResult, GetOdaOdaInstancesOutputArgs } from "./getOdaOdaInstances";
export const getOdaOdaInstances: typeof import("./getOdaOdaInstances").getOdaOdaInstances = null as any;
export const getOdaOdaInstancesOutput: typeof import("./getOdaOdaInstances").getOdaOdaInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getOdaOdaInstances","getOdaOdaInstancesOutput"], () => require("./getOdaOdaInstances"));

export { GetOdaOdaPrivateEndpointArgs, GetOdaOdaPrivateEndpointResult, GetOdaOdaPrivateEndpointOutputArgs } from "./getOdaOdaPrivateEndpoint";
export const getOdaOdaPrivateEndpoint: typeof import("./getOdaOdaPrivateEndpoint").getOdaOdaPrivateEndpoint = null as any;
export const getOdaOdaPrivateEndpointOutput: typeof import("./getOdaOdaPrivateEndpoint").getOdaOdaPrivateEndpointOutput = null as any;
utilities.lazyLoad(exports, ["getOdaOdaPrivateEndpoint","getOdaOdaPrivateEndpointOutput"], () => require("./getOdaOdaPrivateEndpoint"));

export { GetOdaOdaPrivateEndpointAttachmentArgs, GetOdaOdaPrivateEndpointAttachmentResult, GetOdaOdaPrivateEndpointAttachmentOutputArgs } from "./getOdaOdaPrivateEndpointAttachment";
export const getOdaOdaPrivateEndpointAttachment: typeof import("./getOdaOdaPrivateEndpointAttachment").getOdaOdaPrivateEndpointAttachment = null as any;
export const getOdaOdaPrivateEndpointAttachmentOutput: typeof import("./getOdaOdaPrivateEndpointAttachment").getOdaOdaPrivateEndpointAttachmentOutput = null as any;
utilities.lazyLoad(exports, ["getOdaOdaPrivateEndpointAttachment","getOdaOdaPrivateEndpointAttachmentOutput"], () => require("./getOdaOdaPrivateEndpointAttachment"));

export { GetOdaOdaPrivateEndpointAttachmentsArgs, GetOdaOdaPrivateEndpointAttachmentsResult, GetOdaOdaPrivateEndpointAttachmentsOutputArgs } from "./getOdaOdaPrivateEndpointAttachments";
export const getOdaOdaPrivateEndpointAttachments: typeof import("./getOdaOdaPrivateEndpointAttachments").getOdaOdaPrivateEndpointAttachments = null as any;
export const getOdaOdaPrivateEndpointAttachmentsOutput: typeof import("./getOdaOdaPrivateEndpointAttachments").getOdaOdaPrivateEndpointAttachmentsOutput = null as any;
utilities.lazyLoad(exports, ["getOdaOdaPrivateEndpointAttachments","getOdaOdaPrivateEndpointAttachmentsOutput"], () => require("./getOdaOdaPrivateEndpointAttachments"));

export { GetOdaOdaPrivateEndpointScanProxiesArgs, GetOdaOdaPrivateEndpointScanProxiesResult, GetOdaOdaPrivateEndpointScanProxiesOutputArgs } from "./getOdaOdaPrivateEndpointScanProxies";
export const getOdaOdaPrivateEndpointScanProxies: typeof import("./getOdaOdaPrivateEndpointScanProxies").getOdaOdaPrivateEndpointScanProxies = null as any;
export const getOdaOdaPrivateEndpointScanProxiesOutput: typeof import("./getOdaOdaPrivateEndpointScanProxies").getOdaOdaPrivateEndpointScanProxiesOutput = null as any;
utilities.lazyLoad(exports, ["getOdaOdaPrivateEndpointScanProxies","getOdaOdaPrivateEndpointScanProxiesOutput"], () => require("./getOdaOdaPrivateEndpointScanProxies"));

export { GetOdaOdaPrivateEndpointScanProxyArgs, GetOdaOdaPrivateEndpointScanProxyResult, GetOdaOdaPrivateEndpointScanProxyOutputArgs } from "./getOdaOdaPrivateEndpointScanProxy";
export const getOdaOdaPrivateEndpointScanProxy: typeof import("./getOdaOdaPrivateEndpointScanProxy").getOdaOdaPrivateEndpointScanProxy = null as any;
export const getOdaOdaPrivateEndpointScanProxyOutput: typeof import("./getOdaOdaPrivateEndpointScanProxy").getOdaOdaPrivateEndpointScanProxyOutput = null as any;
utilities.lazyLoad(exports, ["getOdaOdaPrivateEndpointScanProxy","getOdaOdaPrivateEndpointScanProxyOutput"], () => require("./getOdaOdaPrivateEndpointScanProxy"));

export { GetOdaOdaPrivateEndpointsArgs, GetOdaOdaPrivateEndpointsResult, GetOdaOdaPrivateEndpointsOutputArgs } from "./getOdaOdaPrivateEndpoints";
export const getOdaOdaPrivateEndpoints: typeof import("./getOdaOdaPrivateEndpoints").getOdaOdaPrivateEndpoints = null as any;
export const getOdaOdaPrivateEndpointsOutput: typeof import("./getOdaOdaPrivateEndpoints").getOdaOdaPrivateEndpointsOutput = null as any;
utilities.lazyLoad(exports, ["getOdaOdaPrivateEndpoints","getOdaOdaPrivateEndpointsOutput"], () => require("./getOdaOdaPrivateEndpoints"));

export { GetOnesubscriptionAggregatedComputedUsagesArgs, GetOnesubscriptionAggregatedComputedUsagesResult, GetOnesubscriptionAggregatedComputedUsagesOutputArgs } from "./getOnesubscriptionAggregatedComputedUsages";
export const getOnesubscriptionAggregatedComputedUsages: typeof import("./getOnesubscriptionAggregatedComputedUsages").getOnesubscriptionAggregatedComputedUsages = null as any;
export const getOnesubscriptionAggregatedComputedUsagesOutput: typeof import("./getOnesubscriptionAggregatedComputedUsages").getOnesubscriptionAggregatedComputedUsagesOutput = null as any;
utilities.lazyLoad(exports, ["getOnesubscriptionAggregatedComputedUsages","getOnesubscriptionAggregatedComputedUsagesOutput"], () => require("./getOnesubscriptionAggregatedComputedUsages"));

export { GetOnesubscriptionBillingSchedulesArgs, GetOnesubscriptionBillingSchedulesResult, GetOnesubscriptionBillingSchedulesOutputArgs } from "./getOnesubscriptionBillingSchedules";
export const getOnesubscriptionBillingSchedules: typeof import("./getOnesubscriptionBillingSchedules").getOnesubscriptionBillingSchedules = null as any;
export const getOnesubscriptionBillingSchedulesOutput: typeof import("./getOnesubscriptionBillingSchedules").getOnesubscriptionBillingSchedulesOutput = null as any;
utilities.lazyLoad(exports, ["getOnesubscriptionBillingSchedules","getOnesubscriptionBillingSchedulesOutput"], () => require("./getOnesubscriptionBillingSchedules"));

export { GetOnesubscriptionCommitmentArgs, GetOnesubscriptionCommitmentResult, GetOnesubscriptionCommitmentOutputArgs } from "./getOnesubscriptionCommitment";
export const getOnesubscriptionCommitment: typeof import("./getOnesubscriptionCommitment").getOnesubscriptionCommitment = null as any;
export const getOnesubscriptionCommitmentOutput: typeof import("./getOnesubscriptionCommitment").getOnesubscriptionCommitmentOutput = null as any;
utilities.lazyLoad(exports, ["getOnesubscriptionCommitment","getOnesubscriptionCommitmentOutput"], () => require("./getOnesubscriptionCommitment"));

export { GetOnesubscriptionCommitmentsArgs, GetOnesubscriptionCommitmentsResult, GetOnesubscriptionCommitmentsOutputArgs } from "./getOnesubscriptionCommitments";
export const getOnesubscriptionCommitments: typeof import("./getOnesubscriptionCommitments").getOnesubscriptionCommitments = null as any;
export const getOnesubscriptionCommitmentsOutput: typeof import("./getOnesubscriptionCommitments").getOnesubscriptionCommitmentsOutput = null as any;
utilities.lazyLoad(exports, ["getOnesubscriptionCommitments","getOnesubscriptionCommitmentsOutput"], () => require("./getOnesubscriptionCommitments"));

export { GetOnesubscriptionComputedUsageArgs, GetOnesubscriptionComputedUsageResult, GetOnesubscriptionComputedUsageOutputArgs } from "./getOnesubscriptionComputedUsage";
export const getOnesubscriptionComputedUsage: typeof import("./getOnesubscriptionComputedUsage").getOnesubscriptionComputedUsage = null as any;
export const getOnesubscriptionComputedUsageOutput: typeof import("./getOnesubscriptionComputedUsage").getOnesubscriptionComputedUsageOutput = null as any;
utilities.lazyLoad(exports, ["getOnesubscriptionComputedUsage","getOnesubscriptionComputedUsageOutput"], () => require("./getOnesubscriptionComputedUsage"));

export { GetOnesubscriptionComputedUsagesArgs, GetOnesubscriptionComputedUsagesResult, GetOnesubscriptionComputedUsagesOutputArgs } from "./getOnesubscriptionComputedUsages";
export const getOnesubscriptionComputedUsages: typeof import("./getOnesubscriptionComputedUsages").getOnesubscriptionComputedUsages = null as any;
export const getOnesubscriptionComputedUsagesOutput: typeof import("./getOnesubscriptionComputedUsages").getOnesubscriptionComputedUsagesOutput = null as any;
utilities.lazyLoad(exports, ["getOnesubscriptionComputedUsages","getOnesubscriptionComputedUsagesOutput"], () => require("./getOnesubscriptionComputedUsages"));

export { GetOnesubscriptionInvoiceLineComputedUsagesArgs, GetOnesubscriptionInvoiceLineComputedUsagesResult, GetOnesubscriptionInvoiceLineComputedUsagesOutputArgs } from "./getOnesubscriptionInvoiceLineComputedUsages";
export const getOnesubscriptionInvoiceLineComputedUsages: typeof import("./getOnesubscriptionInvoiceLineComputedUsages").getOnesubscriptionInvoiceLineComputedUsages = null as any;
export const getOnesubscriptionInvoiceLineComputedUsagesOutput: typeof import("./getOnesubscriptionInvoiceLineComputedUsages").getOnesubscriptionInvoiceLineComputedUsagesOutput = null as any;
utilities.lazyLoad(exports, ["getOnesubscriptionInvoiceLineComputedUsages","getOnesubscriptionInvoiceLineComputedUsagesOutput"], () => require("./getOnesubscriptionInvoiceLineComputedUsages"));

export { GetOnesubscriptionInvoicesArgs, GetOnesubscriptionInvoicesResult, GetOnesubscriptionInvoicesOutputArgs } from "./getOnesubscriptionInvoices";
export const getOnesubscriptionInvoices: typeof import("./getOnesubscriptionInvoices").getOnesubscriptionInvoices = null as any;
export const getOnesubscriptionInvoicesOutput: typeof import("./getOnesubscriptionInvoices").getOnesubscriptionInvoicesOutput = null as any;
utilities.lazyLoad(exports, ["getOnesubscriptionInvoices","getOnesubscriptionInvoicesOutput"], () => require("./getOnesubscriptionInvoices"));

export { GetOnesubscriptionOrganizationSubscriptionsArgs, GetOnesubscriptionOrganizationSubscriptionsResult, GetOnesubscriptionOrganizationSubscriptionsOutputArgs } from "./getOnesubscriptionOrganizationSubscriptions";
export const getOnesubscriptionOrganizationSubscriptions: typeof import("./getOnesubscriptionOrganizationSubscriptions").getOnesubscriptionOrganizationSubscriptions = null as any;
export const getOnesubscriptionOrganizationSubscriptionsOutput: typeof import("./getOnesubscriptionOrganizationSubscriptions").getOnesubscriptionOrganizationSubscriptionsOutput = null as any;
utilities.lazyLoad(exports, ["getOnesubscriptionOrganizationSubscriptions","getOnesubscriptionOrganizationSubscriptionsOutput"], () => require("./getOnesubscriptionOrganizationSubscriptions"));

export { GetOnesubscriptionRatecardsArgs, GetOnesubscriptionRatecardsResult, GetOnesubscriptionRatecardsOutputArgs } from "./getOnesubscriptionRatecards";
export const getOnesubscriptionRatecards: typeof import("./getOnesubscriptionRatecards").getOnesubscriptionRatecards = null as any;
export const getOnesubscriptionRatecardsOutput: typeof import("./getOnesubscriptionRatecards").getOnesubscriptionRatecardsOutput = null as any;
utilities.lazyLoad(exports, ["getOnesubscriptionRatecards","getOnesubscriptionRatecardsOutput"], () => require("./getOnesubscriptionRatecards"));

export { GetOnesubscriptionSubscribedServiceArgs, GetOnesubscriptionSubscribedServiceResult, GetOnesubscriptionSubscribedServiceOutputArgs } from "./getOnesubscriptionSubscribedService";
export const getOnesubscriptionSubscribedService: typeof import("./getOnesubscriptionSubscribedService").getOnesubscriptionSubscribedService = null as any;
export const getOnesubscriptionSubscribedServiceOutput: typeof import("./getOnesubscriptionSubscribedService").getOnesubscriptionSubscribedServiceOutput = null as any;
utilities.lazyLoad(exports, ["getOnesubscriptionSubscribedService","getOnesubscriptionSubscribedServiceOutput"], () => require("./getOnesubscriptionSubscribedService"));

export { GetOnesubscriptionSubscribedServicesArgs, GetOnesubscriptionSubscribedServicesResult, GetOnesubscriptionSubscribedServicesOutputArgs } from "./getOnesubscriptionSubscribedServices";
export const getOnesubscriptionSubscribedServices: typeof import("./getOnesubscriptionSubscribedServices").getOnesubscriptionSubscribedServices = null as any;
export const getOnesubscriptionSubscribedServicesOutput: typeof import("./getOnesubscriptionSubscribedServices").getOnesubscriptionSubscribedServicesOutput = null as any;
utilities.lazyLoad(exports, ["getOnesubscriptionSubscribedServices","getOnesubscriptionSubscribedServicesOutput"], () => require("./getOnesubscriptionSubscribedServices"));

export { GetOnesubscriptionSubscriptionsArgs, GetOnesubscriptionSubscriptionsResult, GetOnesubscriptionSubscriptionsOutputArgs } from "./getOnesubscriptionSubscriptions";
export const getOnesubscriptionSubscriptions: typeof import("./getOnesubscriptionSubscriptions").getOnesubscriptionSubscriptions = null as any;
export const getOnesubscriptionSubscriptionsOutput: typeof import("./getOnesubscriptionSubscriptions").getOnesubscriptionSubscriptionsOutput = null as any;
utilities.lazyLoad(exports, ["getOnesubscriptionSubscriptions","getOnesubscriptionSubscriptionsOutput"], () => require("./getOnesubscriptionSubscriptions"));

export { GetOnsNotificationTopicArgs, GetOnsNotificationTopicResult, GetOnsNotificationTopicOutputArgs } from "./getOnsNotificationTopic";
export const getOnsNotificationTopic: typeof import("./getOnsNotificationTopic").getOnsNotificationTopic = null as any;
export const getOnsNotificationTopicOutput: typeof import("./getOnsNotificationTopic").getOnsNotificationTopicOutput = null as any;
utilities.lazyLoad(exports, ["getOnsNotificationTopic","getOnsNotificationTopicOutput"], () => require("./getOnsNotificationTopic"));

export { GetOnsNotificationTopicsArgs, GetOnsNotificationTopicsResult, GetOnsNotificationTopicsOutputArgs } from "./getOnsNotificationTopics";
export const getOnsNotificationTopics: typeof import("./getOnsNotificationTopics").getOnsNotificationTopics = null as any;
export const getOnsNotificationTopicsOutput: typeof import("./getOnsNotificationTopics").getOnsNotificationTopicsOutput = null as any;
utilities.lazyLoad(exports, ["getOnsNotificationTopics","getOnsNotificationTopicsOutput"], () => require("./getOnsNotificationTopics"));

export { GetOnsSubscriptionArgs, GetOnsSubscriptionResult, GetOnsSubscriptionOutputArgs } from "./getOnsSubscription";
export const getOnsSubscription: typeof import("./getOnsSubscription").getOnsSubscription = null as any;
export const getOnsSubscriptionOutput: typeof import("./getOnsSubscription").getOnsSubscriptionOutput = null as any;
utilities.lazyLoad(exports, ["getOnsSubscription","getOnsSubscriptionOutput"], () => require("./getOnsSubscription"));

export { GetOnsSubscriptionsArgs, GetOnsSubscriptionsResult, GetOnsSubscriptionsOutputArgs } from "./getOnsSubscriptions";
export const getOnsSubscriptions: typeof import("./getOnsSubscriptions").getOnsSubscriptions = null as any;
export const getOnsSubscriptionsOutput: typeof import("./getOnsSubscriptions").getOnsSubscriptionsOutput = null as any;
utilities.lazyLoad(exports, ["getOnsSubscriptions","getOnsSubscriptionsOutput"], () => require("./getOnsSubscriptions"));

export { GetOpaOpaInstanceArgs, GetOpaOpaInstanceResult, GetOpaOpaInstanceOutputArgs } from "./getOpaOpaInstance";
export const getOpaOpaInstance: typeof import("./getOpaOpaInstance").getOpaOpaInstance = null as any;
export const getOpaOpaInstanceOutput: typeof import("./getOpaOpaInstance").getOpaOpaInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getOpaOpaInstance","getOpaOpaInstanceOutput"], () => require("./getOpaOpaInstance"));

export { GetOpaOpaInstancesArgs, GetOpaOpaInstancesResult, GetOpaOpaInstancesOutputArgs } from "./getOpaOpaInstances";
export const getOpaOpaInstances: typeof import("./getOpaOpaInstances").getOpaOpaInstances = null as any;
export const getOpaOpaInstancesOutput: typeof import("./getOpaOpaInstances").getOpaOpaInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getOpaOpaInstances","getOpaOpaInstancesOutput"], () => require("./getOpaOpaInstances"));

export { GetOpensearchOpensearchClusterArgs, GetOpensearchOpensearchClusterResult, GetOpensearchOpensearchClusterOutputArgs } from "./getOpensearchOpensearchCluster";
export const getOpensearchOpensearchCluster: typeof import("./getOpensearchOpensearchCluster").getOpensearchOpensearchCluster = null as any;
export const getOpensearchOpensearchClusterOutput: typeof import("./getOpensearchOpensearchCluster").getOpensearchOpensearchClusterOutput = null as any;
utilities.lazyLoad(exports, ["getOpensearchOpensearchCluster","getOpensearchOpensearchClusterOutput"], () => require("./getOpensearchOpensearchCluster"));

export { GetOpensearchOpensearchClustersArgs, GetOpensearchOpensearchClustersResult, GetOpensearchOpensearchClustersOutputArgs } from "./getOpensearchOpensearchClusters";
export const getOpensearchOpensearchClusters: typeof import("./getOpensearchOpensearchClusters").getOpensearchOpensearchClusters = null as any;
export const getOpensearchOpensearchClustersOutput: typeof import("./getOpensearchOpensearchClusters").getOpensearchOpensearchClustersOutput = null as any;
utilities.lazyLoad(exports, ["getOpensearchOpensearchClusters","getOpensearchOpensearchClustersOutput"], () => require("./getOpensearchOpensearchClusters"));

export { GetOpensearchOpensearchVersionArgs, GetOpensearchOpensearchVersionResult, GetOpensearchOpensearchVersionOutputArgs } from "./getOpensearchOpensearchVersion";
export const getOpensearchOpensearchVersion: typeof import("./getOpensearchOpensearchVersion").getOpensearchOpensearchVersion = null as any;
export const getOpensearchOpensearchVersionOutput: typeof import("./getOpensearchOpensearchVersion").getOpensearchOpensearchVersionOutput = null as any;
utilities.lazyLoad(exports, ["getOpensearchOpensearchVersion","getOpensearchOpensearchVersionOutput"], () => require("./getOpensearchOpensearchVersion"));

export { GetOpensearchOpensearchVersionsArgs, GetOpensearchOpensearchVersionsResult, GetOpensearchOpensearchVersionsOutputArgs } from "./getOpensearchOpensearchVersions";
export const getOpensearchOpensearchVersions: typeof import("./getOpensearchOpensearchVersions").getOpensearchOpensearchVersions = null as any;
export const getOpensearchOpensearchVersionsOutput: typeof import("./getOpensearchOpensearchVersions").getOpensearchOpensearchVersionsOutput = null as any;
utilities.lazyLoad(exports, ["getOpensearchOpensearchVersions","getOpensearchOpensearchVersionsOutput"], () => require("./getOpensearchOpensearchVersions"));

export { GetOperatorAccessControlAccessRequestArgs, GetOperatorAccessControlAccessRequestResult, GetOperatorAccessControlAccessRequestOutputArgs } from "./getOperatorAccessControlAccessRequest";
export const getOperatorAccessControlAccessRequest: typeof import("./getOperatorAccessControlAccessRequest").getOperatorAccessControlAccessRequest = null as any;
export const getOperatorAccessControlAccessRequestOutput: typeof import("./getOperatorAccessControlAccessRequest").getOperatorAccessControlAccessRequestOutput = null as any;
utilities.lazyLoad(exports, ["getOperatorAccessControlAccessRequest","getOperatorAccessControlAccessRequestOutput"], () => require("./getOperatorAccessControlAccessRequest"));

export { GetOperatorAccessControlAccessRequestAuditLogReportArgs, GetOperatorAccessControlAccessRequestAuditLogReportResult, GetOperatorAccessControlAccessRequestAuditLogReportOutputArgs } from "./getOperatorAccessControlAccessRequestAuditLogReport";
export const getOperatorAccessControlAccessRequestAuditLogReport: typeof import("./getOperatorAccessControlAccessRequestAuditLogReport").getOperatorAccessControlAccessRequestAuditLogReport = null as any;
export const getOperatorAccessControlAccessRequestAuditLogReportOutput: typeof import("./getOperatorAccessControlAccessRequestAuditLogReport").getOperatorAccessControlAccessRequestAuditLogReportOutput = null as any;
utilities.lazyLoad(exports, ["getOperatorAccessControlAccessRequestAuditLogReport","getOperatorAccessControlAccessRequestAuditLogReportOutput"], () => require("./getOperatorAccessControlAccessRequestAuditLogReport"));

export { GetOperatorAccessControlAccessRequestHistoryArgs, GetOperatorAccessControlAccessRequestHistoryResult, GetOperatorAccessControlAccessRequestHistoryOutputArgs } from "./getOperatorAccessControlAccessRequestHistory";
export const getOperatorAccessControlAccessRequestHistory: typeof import("./getOperatorAccessControlAccessRequestHistory").getOperatorAccessControlAccessRequestHistory = null as any;
export const getOperatorAccessControlAccessRequestHistoryOutput: typeof import("./getOperatorAccessControlAccessRequestHistory").getOperatorAccessControlAccessRequestHistoryOutput = null as any;
utilities.lazyLoad(exports, ["getOperatorAccessControlAccessRequestHistory","getOperatorAccessControlAccessRequestHistoryOutput"], () => require("./getOperatorAccessControlAccessRequestHistory"));

export { GetOperatorAccessControlAccessRequestsArgs, GetOperatorAccessControlAccessRequestsResult, GetOperatorAccessControlAccessRequestsOutputArgs } from "./getOperatorAccessControlAccessRequests";
export const getOperatorAccessControlAccessRequests: typeof import("./getOperatorAccessControlAccessRequests").getOperatorAccessControlAccessRequests = null as any;
export const getOperatorAccessControlAccessRequestsOutput: typeof import("./getOperatorAccessControlAccessRequests").getOperatorAccessControlAccessRequestsOutput = null as any;
utilities.lazyLoad(exports, ["getOperatorAccessControlAccessRequests","getOperatorAccessControlAccessRequestsOutput"], () => require("./getOperatorAccessControlAccessRequests"));

export { GetOperatorAccessControlOperatorActionArgs, GetOperatorAccessControlOperatorActionResult, GetOperatorAccessControlOperatorActionOutputArgs } from "./getOperatorAccessControlOperatorAction";
export const getOperatorAccessControlOperatorAction: typeof import("./getOperatorAccessControlOperatorAction").getOperatorAccessControlOperatorAction = null as any;
export const getOperatorAccessControlOperatorActionOutput: typeof import("./getOperatorAccessControlOperatorAction").getOperatorAccessControlOperatorActionOutput = null as any;
utilities.lazyLoad(exports, ["getOperatorAccessControlOperatorAction","getOperatorAccessControlOperatorActionOutput"], () => require("./getOperatorAccessControlOperatorAction"));

export { GetOperatorAccessControlOperatorActionsArgs, GetOperatorAccessControlOperatorActionsResult, GetOperatorAccessControlOperatorActionsOutputArgs } from "./getOperatorAccessControlOperatorActions";
export const getOperatorAccessControlOperatorActions: typeof import("./getOperatorAccessControlOperatorActions").getOperatorAccessControlOperatorActions = null as any;
export const getOperatorAccessControlOperatorActionsOutput: typeof import("./getOperatorAccessControlOperatorActions").getOperatorAccessControlOperatorActionsOutput = null as any;
utilities.lazyLoad(exports, ["getOperatorAccessControlOperatorActions","getOperatorAccessControlOperatorActionsOutput"], () => require("./getOperatorAccessControlOperatorActions"));

export { GetOperatorAccessControlOperatorControlArgs, GetOperatorAccessControlOperatorControlResult, GetOperatorAccessControlOperatorControlOutputArgs } from "./getOperatorAccessControlOperatorControl";
export const getOperatorAccessControlOperatorControl: typeof import("./getOperatorAccessControlOperatorControl").getOperatorAccessControlOperatorControl = null as any;
export const getOperatorAccessControlOperatorControlOutput: typeof import("./getOperatorAccessControlOperatorControl").getOperatorAccessControlOperatorControlOutput = null as any;
utilities.lazyLoad(exports, ["getOperatorAccessControlOperatorControl","getOperatorAccessControlOperatorControlOutput"], () => require("./getOperatorAccessControlOperatorControl"));

export { GetOperatorAccessControlOperatorControlAssignmentArgs, GetOperatorAccessControlOperatorControlAssignmentResult, GetOperatorAccessControlOperatorControlAssignmentOutputArgs } from "./getOperatorAccessControlOperatorControlAssignment";
export const getOperatorAccessControlOperatorControlAssignment: typeof import("./getOperatorAccessControlOperatorControlAssignment").getOperatorAccessControlOperatorControlAssignment = null as any;
export const getOperatorAccessControlOperatorControlAssignmentOutput: typeof import("./getOperatorAccessControlOperatorControlAssignment").getOperatorAccessControlOperatorControlAssignmentOutput = null as any;
utilities.lazyLoad(exports, ["getOperatorAccessControlOperatorControlAssignment","getOperatorAccessControlOperatorControlAssignmentOutput"], () => require("./getOperatorAccessControlOperatorControlAssignment"));

export { GetOperatorAccessControlOperatorControlAssignmentsArgs, GetOperatorAccessControlOperatorControlAssignmentsResult, GetOperatorAccessControlOperatorControlAssignmentsOutputArgs } from "./getOperatorAccessControlOperatorControlAssignments";
export const getOperatorAccessControlOperatorControlAssignments: typeof import("./getOperatorAccessControlOperatorControlAssignments").getOperatorAccessControlOperatorControlAssignments = null as any;
export const getOperatorAccessControlOperatorControlAssignmentsOutput: typeof import("./getOperatorAccessControlOperatorControlAssignments").getOperatorAccessControlOperatorControlAssignmentsOutput = null as any;
utilities.lazyLoad(exports, ["getOperatorAccessControlOperatorControlAssignments","getOperatorAccessControlOperatorControlAssignmentsOutput"], () => require("./getOperatorAccessControlOperatorControlAssignments"));

export { GetOperatorAccessControlOperatorControlsArgs, GetOperatorAccessControlOperatorControlsResult, GetOperatorAccessControlOperatorControlsOutputArgs } from "./getOperatorAccessControlOperatorControls";
export const getOperatorAccessControlOperatorControls: typeof import("./getOperatorAccessControlOperatorControls").getOperatorAccessControlOperatorControls = null as any;
export const getOperatorAccessControlOperatorControlsOutput: typeof import("./getOperatorAccessControlOperatorControls").getOperatorAccessControlOperatorControlsOutput = null as any;
utilities.lazyLoad(exports, ["getOperatorAccessControlOperatorControls","getOperatorAccessControlOperatorControlsOutput"], () => require("./getOperatorAccessControlOperatorControls"));

export { GetOpsiAwrHubArgs, GetOpsiAwrHubResult, GetOpsiAwrHubOutputArgs } from "./getOpsiAwrHub";
export const getOpsiAwrHub: typeof import("./getOpsiAwrHub").getOpsiAwrHub = null as any;
export const getOpsiAwrHubOutput: typeof import("./getOpsiAwrHub").getOpsiAwrHubOutput = null as any;
utilities.lazyLoad(exports, ["getOpsiAwrHub","getOpsiAwrHubOutput"], () => require("./getOpsiAwrHub"));

export { GetOpsiAwrHubAwrSnapshotArgs, GetOpsiAwrHubAwrSnapshotResult, GetOpsiAwrHubAwrSnapshotOutputArgs } from "./getOpsiAwrHubAwrSnapshot";
export const getOpsiAwrHubAwrSnapshot: typeof import("./getOpsiAwrHubAwrSnapshot").getOpsiAwrHubAwrSnapshot = null as any;
export const getOpsiAwrHubAwrSnapshotOutput: typeof import("./getOpsiAwrHubAwrSnapshot").getOpsiAwrHubAwrSnapshotOutput = null as any;
utilities.lazyLoad(exports, ["getOpsiAwrHubAwrSnapshot","getOpsiAwrHubAwrSnapshotOutput"], () => require("./getOpsiAwrHubAwrSnapshot"));

export { GetOpsiAwrHubAwrSnapshotsArgs, GetOpsiAwrHubAwrSnapshotsResult, GetOpsiAwrHubAwrSnapshotsOutputArgs } from "./getOpsiAwrHubAwrSnapshots";
export const getOpsiAwrHubAwrSnapshots: typeof import("./getOpsiAwrHubAwrSnapshots").getOpsiAwrHubAwrSnapshots = null as any;
export const getOpsiAwrHubAwrSnapshotsOutput: typeof import("./getOpsiAwrHubAwrSnapshots").getOpsiAwrHubAwrSnapshotsOutput = null as any;
utilities.lazyLoad(exports, ["getOpsiAwrHubAwrSnapshots","getOpsiAwrHubAwrSnapshotsOutput"], () => require("./getOpsiAwrHubAwrSnapshots"));

export { GetOpsiAwrHubAwrSourcesSummaryArgs, GetOpsiAwrHubAwrSourcesSummaryResult, GetOpsiAwrHubAwrSourcesSummaryOutputArgs } from "./getOpsiAwrHubAwrSourcesSummary";
export const getOpsiAwrHubAwrSourcesSummary: typeof import("./getOpsiAwrHubAwrSourcesSummary").getOpsiAwrHubAwrSourcesSummary = null as any;
export const getOpsiAwrHubAwrSourcesSummaryOutput: typeof import("./getOpsiAwrHubAwrSourcesSummary").getOpsiAwrHubAwrSourcesSummaryOutput = null as any;
utilities.lazyLoad(exports, ["getOpsiAwrHubAwrSourcesSummary","getOpsiAwrHubAwrSourcesSummaryOutput"], () => require("./getOpsiAwrHubAwrSourcesSummary"));

export { GetOpsiAwrHubSourceArgs, GetOpsiAwrHubSourceResult, GetOpsiAwrHubSourceOutputArgs } from "./getOpsiAwrHubSource";
export const getOpsiAwrHubSource: typeof import("./getOpsiAwrHubSource").getOpsiAwrHubSource = null as any;
export const getOpsiAwrHubSourceOutput: typeof import("./getOpsiAwrHubSource").getOpsiAwrHubSourceOutput = null as any;
utilities.lazyLoad(exports, ["getOpsiAwrHubSource","getOpsiAwrHubSourceOutput"], () => require("./getOpsiAwrHubSource"));

export { GetOpsiAwrHubSourcesArgs, GetOpsiAwrHubSourcesResult, GetOpsiAwrHubSourcesOutputArgs } from "./getOpsiAwrHubSources";
export const getOpsiAwrHubSources: typeof import("./getOpsiAwrHubSources").getOpsiAwrHubSources = null as any;
export const getOpsiAwrHubSourcesOutput: typeof import("./getOpsiAwrHubSources").getOpsiAwrHubSourcesOutput = null as any;
utilities.lazyLoad(exports, ["getOpsiAwrHubSources","getOpsiAwrHubSourcesOutput"], () => require("./getOpsiAwrHubSources"));

export { GetOpsiAwrHubsArgs, GetOpsiAwrHubsResult, GetOpsiAwrHubsOutputArgs } from "./getOpsiAwrHubs";
export const getOpsiAwrHubs: typeof import("./getOpsiAwrHubs").getOpsiAwrHubs = null as any;
export const getOpsiAwrHubsOutput: typeof import("./getOpsiAwrHubs").getOpsiAwrHubsOutput = null as any;
utilities.lazyLoad(exports, ["getOpsiAwrHubs","getOpsiAwrHubsOutput"], () => require("./getOpsiAwrHubs"));

export { GetOpsiDatabaseInsightArgs, GetOpsiDatabaseInsightResult, GetOpsiDatabaseInsightOutputArgs } from "./getOpsiDatabaseInsight";
export const getOpsiDatabaseInsight: typeof import("./getOpsiDatabaseInsight").getOpsiDatabaseInsight = null as any;
export const getOpsiDatabaseInsightOutput: typeof import("./getOpsiDatabaseInsight").getOpsiDatabaseInsightOutput = null as any;
utilities.lazyLoad(exports, ["getOpsiDatabaseInsight","getOpsiDatabaseInsightOutput"], () => require("./getOpsiDatabaseInsight"));

export { GetOpsiDatabaseInsightsArgs, GetOpsiDatabaseInsightsResult, GetOpsiDatabaseInsightsOutputArgs } from "./getOpsiDatabaseInsights";
export const getOpsiDatabaseInsights: typeof import("./getOpsiDatabaseInsights").getOpsiDatabaseInsights = null as any;
export const getOpsiDatabaseInsightsOutput: typeof import("./getOpsiDatabaseInsights").getOpsiDatabaseInsightsOutput = null as any;
utilities.lazyLoad(exports, ["getOpsiDatabaseInsights","getOpsiDatabaseInsightsOutput"], () => require("./getOpsiDatabaseInsights"));

export { GetOpsiEnterpriseManagerBridgeArgs, GetOpsiEnterpriseManagerBridgeResult, GetOpsiEnterpriseManagerBridgeOutputArgs } from "./getOpsiEnterpriseManagerBridge";
export const getOpsiEnterpriseManagerBridge: typeof import("./getOpsiEnterpriseManagerBridge").getOpsiEnterpriseManagerBridge = null as any;
export const getOpsiEnterpriseManagerBridgeOutput: typeof import("./getOpsiEnterpriseManagerBridge").getOpsiEnterpriseManagerBridgeOutput = null as any;
utilities.lazyLoad(exports, ["getOpsiEnterpriseManagerBridge","getOpsiEnterpriseManagerBridgeOutput"], () => require("./getOpsiEnterpriseManagerBridge"));

export { GetOpsiEnterpriseManagerBridgesArgs, GetOpsiEnterpriseManagerBridgesResult, GetOpsiEnterpriseManagerBridgesOutputArgs } from "./getOpsiEnterpriseManagerBridges";
export const getOpsiEnterpriseManagerBridges: typeof import("./getOpsiEnterpriseManagerBridges").getOpsiEnterpriseManagerBridges = null as any;
export const getOpsiEnterpriseManagerBridgesOutput: typeof import("./getOpsiEnterpriseManagerBridges").getOpsiEnterpriseManagerBridgesOutput = null as any;
utilities.lazyLoad(exports, ["getOpsiEnterpriseManagerBridges","getOpsiEnterpriseManagerBridgesOutput"], () => require("./getOpsiEnterpriseManagerBridges"));

export { GetOpsiExadataInsightArgs, GetOpsiExadataInsightResult, GetOpsiExadataInsightOutputArgs } from "./getOpsiExadataInsight";
export const getOpsiExadataInsight: typeof import("./getOpsiExadataInsight").getOpsiExadataInsight = null as any;
export const getOpsiExadataInsightOutput: typeof import("./getOpsiExadataInsight").getOpsiExadataInsightOutput = null as any;
utilities.lazyLoad(exports, ["getOpsiExadataInsight","getOpsiExadataInsightOutput"], () => require("./getOpsiExadataInsight"));

export { GetOpsiExadataInsightsArgs, GetOpsiExadataInsightsResult, GetOpsiExadataInsightsOutputArgs } from "./getOpsiExadataInsights";
export const getOpsiExadataInsights: typeof import("./getOpsiExadataInsights").getOpsiExadataInsights = null as any;
export const getOpsiExadataInsightsOutput: typeof import("./getOpsiExadataInsights").getOpsiExadataInsightsOutput = null as any;
utilities.lazyLoad(exports, ["getOpsiExadataInsights","getOpsiExadataInsightsOutput"], () => require("./getOpsiExadataInsights"));

export { GetOpsiHostInsightArgs, GetOpsiHostInsightResult, GetOpsiHostInsightOutputArgs } from "./getOpsiHostInsight";
export const getOpsiHostInsight: typeof import("./getOpsiHostInsight").getOpsiHostInsight = null as any;
export const getOpsiHostInsightOutput: typeof import("./getOpsiHostInsight").getOpsiHostInsightOutput = null as any;
utilities.lazyLoad(exports, ["getOpsiHostInsight","getOpsiHostInsightOutput"], () => require("./getOpsiHostInsight"));

export { GetOpsiHostInsightsArgs, GetOpsiHostInsightsResult, GetOpsiHostInsightsOutputArgs } from "./getOpsiHostInsights";
export const getOpsiHostInsights: typeof import("./getOpsiHostInsights").getOpsiHostInsights = null as any;
export const getOpsiHostInsightsOutput: typeof import("./getOpsiHostInsights").getOpsiHostInsightsOutput = null as any;
utilities.lazyLoad(exports, ["getOpsiHostInsights","getOpsiHostInsightsOutput"], () => require("./getOpsiHostInsights"));

export { GetOpsiImportableAgentEntitiesArgs, GetOpsiImportableAgentEntitiesResult, GetOpsiImportableAgentEntitiesOutputArgs } from "./getOpsiImportableAgentEntities";
export const getOpsiImportableAgentEntities: typeof import("./getOpsiImportableAgentEntities").getOpsiImportableAgentEntities = null as any;
export const getOpsiImportableAgentEntitiesOutput: typeof import("./getOpsiImportableAgentEntities").getOpsiImportableAgentEntitiesOutput = null as any;
utilities.lazyLoad(exports, ["getOpsiImportableAgentEntities","getOpsiImportableAgentEntitiesOutput"], () => require("./getOpsiImportableAgentEntities"));

export { GetOpsiImportableAgentEntityArgs, GetOpsiImportableAgentEntityResult, GetOpsiImportableAgentEntityOutputArgs } from "./getOpsiImportableAgentEntity";
export const getOpsiImportableAgentEntity: typeof import("./getOpsiImportableAgentEntity").getOpsiImportableAgentEntity = null as any;
export const getOpsiImportableAgentEntityOutput: typeof import("./getOpsiImportableAgentEntity").getOpsiImportableAgentEntityOutput = null as any;
utilities.lazyLoad(exports, ["getOpsiImportableAgentEntity","getOpsiImportableAgentEntityOutput"], () => require("./getOpsiImportableAgentEntity"));

export { GetOpsiImportableComputeEntitiesArgs, GetOpsiImportableComputeEntitiesResult, GetOpsiImportableComputeEntitiesOutputArgs } from "./getOpsiImportableComputeEntities";
export const getOpsiImportableComputeEntities: typeof import("./getOpsiImportableComputeEntities").getOpsiImportableComputeEntities = null as any;
export const getOpsiImportableComputeEntitiesOutput: typeof import("./getOpsiImportableComputeEntities").getOpsiImportableComputeEntitiesOutput = null as any;
utilities.lazyLoad(exports, ["getOpsiImportableComputeEntities","getOpsiImportableComputeEntitiesOutput"], () => require("./getOpsiImportableComputeEntities"));

export { GetOpsiImportableComputeEntityArgs, GetOpsiImportableComputeEntityResult, GetOpsiImportableComputeEntityOutputArgs } from "./getOpsiImportableComputeEntity";
export const getOpsiImportableComputeEntity: typeof import("./getOpsiImportableComputeEntity").getOpsiImportableComputeEntity = null as any;
export const getOpsiImportableComputeEntityOutput: typeof import("./getOpsiImportableComputeEntity").getOpsiImportableComputeEntityOutput = null as any;
utilities.lazyLoad(exports, ["getOpsiImportableComputeEntity","getOpsiImportableComputeEntityOutput"], () => require("./getOpsiImportableComputeEntity"));

export { GetOpsiNewsReportArgs, GetOpsiNewsReportResult, GetOpsiNewsReportOutputArgs } from "./getOpsiNewsReport";
export const getOpsiNewsReport: typeof import("./getOpsiNewsReport").getOpsiNewsReport = null as any;
export const getOpsiNewsReportOutput: typeof import("./getOpsiNewsReport").getOpsiNewsReportOutput = null as any;
utilities.lazyLoad(exports, ["getOpsiNewsReport","getOpsiNewsReportOutput"], () => require("./getOpsiNewsReport"));

export { GetOpsiNewsReportsArgs, GetOpsiNewsReportsResult, GetOpsiNewsReportsOutputArgs } from "./getOpsiNewsReports";
export const getOpsiNewsReports: typeof import("./getOpsiNewsReports").getOpsiNewsReports = null as any;
export const getOpsiNewsReportsOutput: typeof import("./getOpsiNewsReports").getOpsiNewsReportsOutput = null as any;
utilities.lazyLoad(exports, ["getOpsiNewsReports","getOpsiNewsReportsOutput"], () => require("./getOpsiNewsReports"));

export { GetOpsiOperationsInsightsPrivateEndpointArgs, GetOpsiOperationsInsightsPrivateEndpointResult, GetOpsiOperationsInsightsPrivateEndpointOutputArgs } from "./getOpsiOperationsInsightsPrivateEndpoint";
export const getOpsiOperationsInsightsPrivateEndpoint: typeof import("./getOpsiOperationsInsightsPrivateEndpoint").getOpsiOperationsInsightsPrivateEndpoint = null as any;
export const getOpsiOperationsInsightsPrivateEndpointOutput: typeof import("./getOpsiOperationsInsightsPrivateEndpoint").getOpsiOperationsInsightsPrivateEndpointOutput = null as any;
utilities.lazyLoad(exports, ["getOpsiOperationsInsightsPrivateEndpoint","getOpsiOperationsInsightsPrivateEndpointOutput"], () => require("./getOpsiOperationsInsightsPrivateEndpoint"));

export { GetOpsiOperationsInsightsPrivateEndpointsArgs, GetOpsiOperationsInsightsPrivateEndpointsResult, GetOpsiOperationsInsightsPrivateEndpointsOutputArgs } from "./getOpsiOperationsInsightsPrivateEndpoints";
export const getOpsiOperationsInsightsPrivateEndpoints: typeof import("./getOpsiOperationsInsightsPrivateEndpoints").getOpsiOperationsInsightsPrivateEndpoints = null as any;
export const getOpsiOperationsInsightsPrivateEndpointsOutput: typeof import("./getOpsiOperationsInsightsPrivateEndpoints").getOpsiOperationsInsightsPrivateEndpointsOutput = null as any;
utilities.lazyLoad(exports, ["getOpsiOperationsInsightsPrivateEndpoints","getOpsiOperationsInsightsPrivateEndpointsOutput"], () => require("./getOpsiOperationsInsightsPrivateEndpoints"));

export { GetOpsiOperationsInsightsWarehouseArgs, GetOpsiOperationsInsightsWarehouseResult, GetOpsiOperationsInsightsWarehouseOutputArgs } from "./getOpsiOperationsInsightsWarehouse";
export const getOpsiOperationsInsightsWarehouse: typeof import("./getOpsiOperationsInsightsWarehouse").getOpsiOperationsInsightsWarehouse = null as any;
export const getOpsiOperationsInsightsWarehouseOutput: typeof import("./getOpsiOperationsInsightsWarehouse").getOpsiOperationsInsightsWarehouseOutput = null as any;
utilities.lazyLoad(exports, ["getOpsiOperationsInsightsWarehouse","getOpsiOperationsInsightsWarehouseOutput"], () => require("./getOpsiOperationsInsightsWarehouse"));

export { GetOpsiOperationsInsightsWarehouseResourceUsageSummaryArgs, GetOpsiOperationsInsightsWarehouseResourceUsageSummaryResult, GetOpsiOperationsInsightsWarehouseResourceUsageSummaryOutputArgs } from "./getOpsiOperationsInsightsWarehouseResourceUsageSummary";
export const getOpsiOperationsInsightsWarehouseResourceUsageSummary: typeof import("./getOpsiOperationsInsightsWarehouseResourceUsageSummary").getOpsiOperationsInsightsWarehouseResourceUsageSummary = null as any;
export const getOpsiOperationsInsightsWarehouseResourceUsageSummaryOutput: typeof import("./getOpsiOperationsInsightsWarehouseResourceUsageSummary").getOpsiOperationsInsightsWarehouseResourceUsageSummaryOutput = null as any;
utilities.lazyLoad(exports, ["getOpsiOperationsInsightsWarehouseResourceUsageSummary","getOpsiOperationsInsightsWarehouseResourceUsageSummaryOutput"], () => require("./getOpsiOperationsInsightsWarehouseResourceUsageSummary"));

export { GetOpsiOperationsInsightsWarehouseUserArgs, GetOpsiOperationsInsightsWarehouseUserResult, GetOpsiOperationsInsightsWarehouseUserOutputArgs } from "./getOpsiOperationsInsightsWarehouseUser";
export const getOpsiOperationsInsightsWarehouseUser: typeof import("./getOpsiOperationsInsightsWarehouseUser").getOpsiOperationsInsightsWarehouseUser = null as any;
export const getOpsiOperationsInsightsWarehouseUserOutput: typeof import("./getOpsiOperationsInsightsWarehouseUser").getOpsiOperationsInsightsWarehouseUserOutput = null as any;
utilities.lazyLoad(exports, ["getOpsiOperationsInsightsWarehouseUser","getOpsiOperationsInsightsWarehouseUserOutput"], () => require("./getOpsiOperationsInsightsWarehouseUser"));

export { GetOpsiOperationsInsightsWarehouseUsersArgs, GetOpsiOperationsInsightsWarehouseUsersResult, GetOpsiOperationsInsightsWarehouseUsersOutputArgs } from "./getOpsiOperationsInsightsWarehouseUsers";
export const getOpsiOperationsInsightsWarehouseUsers: typeof import("./getOpsiOperationsInsightsWarehouseUsers").getOpsiOperationsInsightsWarehouseUsers = null as any;
export const getOpsiOperationsInsightsWarehouseUsersOutput: typeof import("./getOpsiOperationsInsightsWarehouseUsers").getOpsiOperationsInsightsWarehouseUsersOutput = null as any;
utilities.lazyLoad(exports, ["getOpsiOperationsInsightsWarehouseUsers","getOpsiOperationsInsightsWarehouseUsersOutput"], () => require("./getOpsiOperationsInsightsWarehouseUsers"));

export { GetOpsiOperationsInsightsWarehousesArgs, GetOpsiOperationsInsightsWarehousesResult, GetOpsiOperationsInsightsWarehousesOutputArgs } from "./getOpsiOperationsInsightsWarehouses";
export const getOpsiOperationsInsightsWarehouses: typeof import("./getOpsiOperationsInsightsWarehouses").getOpsiOperationsInsightsWarehouses = null as any;
export const getOpsiOperationsInsightsWarehousesOutput: typeof import("./getOpsiOperationsInsightsWarehouses").getOpsiOperationsInsightsWarehousesOutput = null as any;
utilities.lazyLoad(exports, ["getOpsiOperationsInsightsWarehouses","getOpsiOperationsInsightsWarehousesOutput"], () => require("./getOpsiOperationsInsightsWarehouses"));

export { GetOpsiOpsiConfigurationArgs, GetOpsiOpsiConfigurationResult, GetOpsiOpsiConfigurationOutputArgs } from "./getOpsiOpsiConfiguration";
export const getOpsiOpsiConfiguration: typeof import("./getOpsiOpsiConfiguration").getOpsiOpsiConfiguration = null as any;
export const getOpsiOpsiConfigurationOutput: typeof import("./getOpsiOpsiConfiguration").getOpsiOpsiConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getOpsiOpsiConfiguration","getOpsiOpsiConfigurationOutput"], () => require("./getOpsiOpsiConfiguration"));

export { GetOpsiOpsiConfigurationConfigurationItemArgs, GetOpsiOpsiConfigurationConfigurationItemResult, GetOpsiOpsiConfigurationConfigurationItemOutputArgs } from "./getOpsiOpsiConfigurationConfigurationItem";
export const getOpsiOpsiConfigurationConfigurationItem: typeof import("./getOpsiOpsiConfigurationConfigurationItem").getOpsiOpsiConfigurationConfigurationItem = null as any;
export const getOpsiOpsiConfigurationConfigurationItemOutput: typeof import("./getOpsiOpsiConfigurationConfigurationItem").getOpsiOpsiConfigurationConfigurationItemOutput = null as any;
utilities.lazyLoad(exports, ["getOpsiOpsiConfigurationConfigurationItem","getOpsiOpsiConfigurationConfigurationItemOutput"], () => require("./getOpsiOpsiConfigurationConfigurationItem"));

export { GetOpsiOpsiConfigurationsArgs, GetOpsiOpsiConfigurationsResult, GetOpsiOpsiConfigurationsOutputArgs } from "./getOpsiOpsiConfigurations";
export const getOpsiOpsiConfigurations: typeof import("./getOpsiOpsiConfigurations").getOpsiOpsiConfigurations = null as any;
export const getOpsiOpsiConfigurationsOutput: typeof import("./getOpsiOpsiConfigurations").getOpsiOpsiConfigurationsOutput = null as any;
utilities.lazyLoad(exports, ["getOpsiOpsiConfigurations","getOpsiOpsiConfigurationsOutput"], () => require("./getOpsiOpsiConfigurations"));

export { GetOptimizerCategoriesArgs, GetOptimizerCategoriesResult, GetOptimizerCategoriesOutputArgs } from "./getOptimizerCategories";
export const getOptimizerCategories: typeof import("./getOptimizerCategories").getOptimizerCategories = null as any;
export const getOptimizerCategoriesOutput: typeof import("./getOptimizerCategories").getOptimizerCategoriesOutput = null as any;
utilities.lazyLoad(exports, ["getOptimizerCategories","getOptimizerCategoriesOutput"], () => require("./getOptimizerCategories"));

export { GetOptimizerCategoryArgs, GetOptimizerCategoryResult, GetOptimizerCategoryOutputArgs } from "./getOptimizerCategory";
export const getOptimizerCategory: typeof import("./getOptimizerCategory").getOptimizerCategory = null as any;
export const getOptimizerCategoryOutput: typeof import("./getOptimizerCategory").getOptimizerCategoryOutput = null as any;
utilities.lazyLoad(exports, ["getOptimizerCategory","getOptimizerCategoryOutput"], () => require("./getOptimizerCategory"));

export { GetOptimizerEnrollmentStatusArgs, GetOptimizerEnrollmentStatusResult, GetOptimizerEnrollmentStatusOutputArgs } from "./getOptimizerEnrollmentStatus";
export const getOptimizerEnrollmentStatus: typeof import("./getOptimizerEnrollmentStatus").getOptimizerEnrollmentStatus = null as any;
export const getOptimizerEnrollmentStatusOutput: typeof import("./getOptimizerEnrollmentStatus").getOptimizerEnrollmentStatusOutput = null as any;
utilities.lazyLoad(exports, ["getOptimizerEnrollmentStatus","getOptimizerEnrollmentStatusOutput"], () => require("./getOptimizerEnrollmentStatus"));

export { GetOptimizerEnrollmentStatusesArgs, GetOptimizerEnrollmentStatusesResult, GetOptimizerEnrollmentStatusesOutputArgs } from "./getOptimizerEnrollmentStatuses";
export const getOptimizerEnrollmentStatuses: typeof import("./getOptimizerEnrollmentStatuses").getOptimizerEnrollmentStatuses = null as any;
export const getOptimizerEnrollmentStatusesOutput: typeof import("./getOptimizerEnrollmentStatuses").getOptimizerEnrollmentStatusesOutput = null as any;
utilities.lazyLoad(exports, ["getOptimizerEnrollmentStatuses","getOptimizerEnrollmentStatusesOutput"], () => require("./getOptimizerEnrollmentStatuses"));

export { GetOptimizerHistoriesArgs, GetOptimizerHistoriesResult, GetOptimizerHistoriesOutputArgs } from "./getOptimizerHistories";
export const getOptimizerHistories: typeof import("./getOptimizerHistories").getOptimizerHistories = null as any;
export const getOptimizerHistoriesOutput: typeof import("./getOptimizerHistories").getOptimizerHistoriesOutput = null as any;
utilities.lazyLoad(exports, ["getOptimizerHistories","getOptimizerHistoriesOutput"], () => require("./getOptimizerHistories"));

export { GetOptimizerProfileArgs, GetOptimizerProfileResult, GetOptimizerProfileOutputArgs } from "./getOptimizerProfile";
export const getOptimizerProfile: typeof import("./getOptimizerProfile").getOptimizerProfile = null as any;
export const getOptimizerProfileOutput: typeof import("./getOptimizerProfile").getOptimizerProfileOutput = null as any;
utilities.lazyLoad(exports, ["getOptimizerProfile","getOptimizerProfileOutput"], () => require("./getOptimizerProfile"));

export { GetOptimizerProfileLevelArgs, GetOptimizerProfileLevelResult, GetOptimizerProfileLevelOutputArgs } from "./getOptimizerProfileLevel";
export const getOptimizerProfileLevel: typeof import("./getOptimizerProfileLevel").getOptimizerProfileLevel = null as any;
export const getOptimizerProfileLevelOutput: typeof import("./getOptimizerProfileLevel").getOptimizerProfileLevelOutput = null as any;
utilities.lazyLoad(exports, ["getOptimizerProfileLevel","getOptimizerProfileLevelOutput"], () => require("./getOptimizerProfileLevel"));

export { GetOptimizerProfileLevelsArgs, GetOptimizerProfileLevelsResult, GetOptimizerProfileLevelsOutputArgs } from "./getOptimizerProfileLevels";
export const getOptimizerProfileLevels: typeof import("./getOptimizerProfileLevels").getOptimizerProfileLevels = null as any;
export const getOptimizerProfileLevelsOutput: typeof import("./getOptimizerProfileLevels").getOptimizerProfileLevelsOutput = null as any;
utilities.lazyLoad(exports, ["getOptimizerProfileLevels","getOptimizerProfileLevelsOutput"], () => require("./getOptimizerProfileLevels"));

export { GetOptimizerProfilesArgs, GetOptimizerProfilesResult, GetOptimizerProfilesOutputArgs } from "./getOptimizerProfiles";
export const getOptimizerProfiles: typeof import("./getOptimizerProfiles").getOptimizerProfiles = null as any;
export const getOptimizerProfilesOutput: typeof import("./getOptimizerProfiles").getOptimizerProfilesOutput = null as any;
utilities.lazyLoad(exports, ["getOptimizerProfiles","getOptimizerProfilesOutput"], () => require("./getOptimizerProfiles"));

export { GetOptimizerRecommendationArgs, GetOptimizerRecommendationResult, GetOptimizerRecommendationOutputArgs } from "./getOptimizerRecommendation";
export const getOptimizerRecommendation: typeof import("./getOptimizerRecommendation").getOptimizerRecommendation = null as any;
export const getOptimizerRecommendationOutput: typeof import("./getOptimizerRecommendation").getOptimizerRecommendationOutput = null as any;
utilities.lazyLoad(exports, ["getOptimizerRecommendation","getOptimizerRecommendationOutput"], () => require("./getOptimizerRecommendation"));

export { GetOptimizerRecommendationStrategiesArgs, GetOptimizerRecommendationStrategiesResult, GetOptimizerRecommendationStrategiesOutputArgs } from "./getOptimizerRecommendationStrategies";
export const getOptimizerRecommendationStrategies: typeof import("./getOptimizerRecommendationStrategies").getOptimizerRecommendationStrategies = null as any;
export const getOptimizerRecommendationStrategiesOutput: typeof import("./getOptimizerRecommendationStrategies").getOptimizerRecommendationStrategiesOutput = null as any;
utilities.lazyLoad(exports, ["getOptimizerRecommendationStrategies","getOptimizerRecommendationStrategiesOutput"], () => require("./getOptimizerRecommendationStrategies"));

export { GetOptimizerRecommendationStrategyArgs, GetOptimizerRecommendationStrategyResult, GetOptimizerRecommendationStrategyOutputArgs } from "./getOptimizerRecommendationStrategy";
export const getOptimizerRecommendationStrategy: typeof import("./getOptimizerRecommendationStrategy").getOptimizerRecommendationStrategy = null as any;
export const getOptimizerRecommendationStrategyOutput: typeof import("./getOptimizerRecommendationStrategy").getOptimizerRecommendationStrategyOutput = null as any;
utilities.lazyLoad(exports, ["getOptimizerRecommendationStrategy","getOptimizerRecommendationStrategyOutput"], () => require("./getOptimizerRecommendationStrategy"));

export { GetOptimizerRecommendationsArgs, GetOptimizerRecommendationsResult, GetOptimizerRecommendationsOutputArgs } from "./getOptimizerRecommendations";
export const getOptimizerRecommendations: typeof import("./getOptimizerRecommendations").getOptimizerRecommendations = null as any;
export const getOptimizerRecommendationsOutput: typeof import("./getOptimizerRecommendations").getOptimizerRecommendationsOutput = null as any;
utilities.lazyLoad(exports, ["getOptimizerRecommendations","getOptimizerRecommendationsOutput"], () => require("./getOptimizerRecommendations"));

export { GetOptimizerResourceActionArgs, GetOptimizerResourceActionResult, GetOptimizerResourceActionOutputArgs } from "./getOptimizerResourceAction";
export const getOptimizerResourceAction: typeof import("./getOptimizerResourceAction").getOptimizerResourceAction = null as any;
export const getOptimizerResourceActionOutput: typeof import("./getOptimizerResourceAction").getOptimizerResourceActionOutput = null as any;
utilities.lazyLoad(exports, ["getOptimizerResourceAction","getOptimizerResourceActionOutput"], () => require("./getOptimizerResourceAction"));

export { GetOptimizerResourceActionsArgs, GetOptimizerResourceActionsResult, GetOptimizerResourceActionsOutputArgs } from "./getOptimizerResourceActions";
export const getOptimizerResourceActions: typeof import("./getOptimizerResourceActions").getOptimizerResourceActions = null as any;
export const getOptimizerResourceActionsOutput: typeof import("./getOptimizerResourceActions").getOptimizerResourceActionsOutput = null as any;
utilities.lazyLoad(exports, ["getOptimizerResourceActions","getOptimizerResourceActionsOutput"], () => require("./getOptimizerResourceActions"));

export { GetOsManagementHubEntitlementsArgs, GetOsManagementHubEntitlementsResult, GetOsManagementHubEntitlementsOutputArgs } from "./getOsManagementHubEntitlements";
export const getOsManagementHubEntitlements: typeof import("./getOsManagementHubEntitlements").getOsManagementHubEntitlements = null as any;
export const getOsManagementHubEntitlementsOutput: typeof import("./getOsManagementHubEntitlements").getOsManagementHubEntitlementsOutput = null as any;
utilities.lazyLoad(exports, ["getOsManagementHubEntitlements","getOsManagementHubEntitlementsOutput"], () => require("./getOsManagementHubEntitlements"));

export { GetOsManagementHubErrataArgs, GetOsManagementHubErrataResult, GetOsManagementHubErrataOutputArgs } from "./getOsManagementHubErrata";
export const getOsManagementHubErrata: typeof import("./getOsManagementHubErrata").getOsManagementHubErrata = null as any;
export const getOsManagementHubErrataOutput: typeof import("./getOsManagementHubErrata").getOsManagementHubErrataOutput = null as any;
utilities.lazyLoad(exports, ["getOsManagementHubErrata","getOsManagementHubErrataOutput"], () => require("./getOsManagementHubErrata"));

export { GetOsManagementHubErratumArgs, GetOsManagementHubErratumResult, GetOsManagementHubErratumOutputArgs } from "./getOsManagementHubErratum";
export const getOsManagementHubErratum: typeof import("./getOsManagementHubErratum").getOsManagementHubErratum = null as any;
export const getOsManagementHubErratumOutput: typeof import("./getOsManagementHubErratum").getOsManagementHubErratumOutput = null as any;
utilities.lazyLoad(exports, ["getOsManagementHubErratum","getOsManagementHubErratumOutput"], () => require("./getOsManagementHubErratum"));

export { GetOsManagementHubEventArgs, GetOsManagementHubEventResult, GetOsManagementHubEventOutputArgs } from "./getOsManagementHubEvent";
export const getOsManagementHubEvent: typeof import("./getOsManagementHubEvent").getOsManagementHubEvent = null as any;
export const getOsManagementHubEventOutput: typeof import("./getOsManagementHubEvent").getOsManagementHubEventOutput = null as any;
utilities.lazyLoad(exports, ["getOsManagementHubEvent","getOsManagementHubEventOutput"], () => require("./getOsManagementHubEvent"));

export { GetOsManagementHubEventsArgs, GetOsManagementHubEventsResult, GetOsManagementHubEventsOutputArgs } from "./getOsManagementHubEvents";
export const getOsManagementHubEvents: typeof import("./getOsManagementHubEvents").getOsManagementHubEvents = null as any;
export const getOsManagementHubEventsOutput: typeof import("./getOsManagementHubEvents").getOsManagementHubEventsOutput = null as any;
utilities.lazyLoad(exports, ["getOsManagementHubEvents","getOsManagementHubEventsOutput"], () => require("./getOsManagementHubEvents"));

export { GetOsManagementHubLifecycleEnvironmentArgs, GetOsManagementHubLifecycleEnvironmentResult, GetOsManagementHubLifecycleEnvironmentOutputArgs } from "./getOsManagementHubLifecycleEnvironment";
export const getOsManagementHubLifecycleEnvironment: typeof import("./getOsManagementHubLifecycleEnvironment").getOsManagementHubLifecycleEnvironment = null as any;
export const getOsManagementHubLifecycleEnvironmentOutput: typeof import("./getOsManagementHubLifecycleEnvironment").getOsManagementHubLifecycleEnvironmentOutput = null as any;
utilities.lazyLoad(exports, ["getOsManagementHubLifecycleEnvironment","getOsManagementHubLifecycleEnvironmentOutput"], () => require("./getOsManagementHubLifecycleEnvironment"));

export { GetOsManagementHubLifecycleEnvironmentsArgs, GetOsManagementHubLifecycleEnvironmentsResult, GetOsManagementHubLifecycleEnvironmentsOutputArgs } from "./getOsManagementHubLifecycleEnvironments";
export const getOsManagementHubLifecycleEnvironments: typeof import("./getOsManagementHubLifecycleEnvironments").getOsManagementHubLifecycleEnvironments = null as any;
export const getOsManagementHubLifecycleEnvironmentsOutput: typeof import("./getOsManagementHubLifecycleEnvironments").getOsManagementHubLifecycleEnvironmentsOutput = null as any;
utilities.lazyLoad(exports, ["getOsManagementHubLifecycleEnvironments","getOsManagementHubLifecycleEnvironmentsOutput"], () => require("./getOsManagementHubLifecycleEnvironments"));

export { GetOsManagementHubLifecycleStageArgs, GetOsManagementHubLifecycleStageResult, GetOsManagementHubLifecycleStageOutputArgs } from "./getOsManagementHubLifecycleStage";
export const getOsManagementHubLifecycleStage: typeof import("./getOsManagementHubLifecycleStage").getOsManagementHubLifecycleStage = null as any;
export const getOsManagementHubLifecycleStageOutput: typeof import("./getOsManagementHubLifecycleStage").getOsManagementHubLifecycleStageOutput = null as any;
utilities.lazyLoad(exports, ["getOsManagementHubLifecycleStage","getOsManagementHubLifecycleStageOutput"], () => require("./getOsManagementHubLifecycleStage"));

export { GetOsManagementHubLifecycleStagesArgs, GetOsManagementHubLifecycleStagesResult, GetOsManagementHubLifecycleStagesOutputArgs } from "./getOsManagementHubLifecycleStages";
export const getOsManagementHubLifecycleStages: typeof import("./getOsManagementHubLifecycleStages").getOsManagementHubLifecycleStages = null as any;
export const getOsManagementHubLifecycleStagesOutput: typeof import("./getOsManagementHubLifecycleStages").getOsManagementHubLifecycleStagesOutput = null as any;
utilities.lazyLoad(exports, ["getOsManagementHubLifecycleStages","getOsManagementHubLifecycleStagesOutput"], () => require("./getOsManagementHubLifecycleStages"));

export { GetOsManagementHubManagedInstanceArgs, GetOsManagementHubManagedInstanceResult, GetOsManagementHubManagedInstanceOutputArgs } from "./getOsManagementHubManagedInstance";
export const getOsManagementHubManagedInstance: typeof import("./getOsManagementHubManagedInstance").getOsManagementHubManagedInstance = null as any;
export const getOsManagementHubManagedInstanceOutput: typeof import("./getOsManagementHubManagedInstance").getOsManagementHubManagedInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getOsManagementHubManagedInstance","getOsManagementHubManagedInstanceOutput"], () => require("./getOsManagementHubManagedInstance"));

export { GetOsManagementHubManagedInstanceAvailablePackagesArgs, GetOsManagementHubManagedInstanceAvailablePackagesResult, GetOsManagementHubManagedInstanceAvailablePackagesOutputArgs } from "./getOsManagementHubManagedInstanceAvailablePackages";
export const getOsManagementHubManagedInstanceAvailablePackages: typeof import("./getOsManagementHubManagedInstanceAvailablePackages").getOsManagementHubManagedInstanceAvailablePackages = null as any;
export const getOsManagementHubManagedInstanceAvailablePackagesOutput: typeof import("./getOsManagementHubManagedInstanceAvailablePackages").getOsManagementHubManagedInstanceAvailablePackagesOutput = null as any;
utilities.lazyLoad(exports, ["getOsManagementHubManagedInstanceAvailablePackages","getOsManagementHubManagedInstanceAvailablePackagesOutput"], () => require("./getOsManagementHubManagedInstanceAvailablePackages"));

export { GetOsManagementHubManagedInstanceAvailableSoftwareSourcesArgs, GetOsManagementHubManagedInstanceAvailableSoftwareSourcesResult, GetOsManagementHubManagedInstanceAvailableSoftwareSourcesOutputArgs } from "./getOsManagementHubManagedInstanceAvailableSoftwareSources";
export const getOsManagementHubManagedInstanceAvailableSoftwareSources: typeof import("./getOsManagementHubManagedInstanceAvailableSoftwareSources").getOsManagementHubManagedInstanceAvailableSoftwareSources = null as any;
export const getOsManagementHubManagedInstanceAvailableSoftwareSourcesOutput: typeof import("./getOsManagementHubManagedInstanceAvailableSoftwareSources").getOsManagementHubManagedInstanceAvailableSoftwareSourcesOutput = null as any;
utilities.lazyLoad(exports, ["getOsManagementHubManagedInstanceAvailableSoftwareSources","getOsManagementHubManagedInstanceAvailableSoftwareSourcesOutput"], () => require("./getOsManagementHubManagedInstanceAvailableSoftwareSources"));

export { GetOsManagementHubManagedInstanceAvailableWindowsUpdatesArgs, GetOsManagementHubManagedInstanceAvailableWindowsUpdatesResult, GetOsManagementHubManagedInstanceAvailableWindowsUpdatesOutputArgs } from "./getOsManagementHubManagedInstanceAvailableWindowsUpdates";
export const getOsManagementHubManagedInstanceAvailableWindowsUpdates: typeof import("./getOsManagementHubManagedInstanceAvailableWindowsUpdates").getOsManagementHubManagedInstanceAvailableWindowsUpdates = null as any;
export const getOsManagementHubManagedInstanceAvailableWindowsUpdatesOutput: typeof import("./getOsManagementHubManagedInstanceAvailableWindowsUpdates").getOsManagementHubManagedInstanceAvailableWindowsUpdatesOutput = null as any;
utilities.lazyLoad(exports, ["getOsManagementHubManagedInstanceAvailableWindowsUpdates","getOsManagementHubManagedInstanceAvailableWindowsUpdatesOutput"], () => require("./getOsManagementHubManagedInstanceAvailableWindowsUpdates"));

export { GetOsManagementHubManagedInstanceErrataArgs, GetOsManagementHubManagedInstanceErrataResult, GetOsManagementHubManagedInstanceErrataOutputArgs } from "./getOsManagementHubManagedInstanceErrata";
export const getOsManagementHubManagedInstanceErrata: typeof import("./getOsManagementHubManagedInstanceErrata").getOsManagementHubManagedInstanceErrata = null as any;
export const getOsManagementHubManagedInstanceErrataOutput: typeof import("./getOsManagementHubManagedInstanceErrata").getOsManagementHubManagedInstanceErrataOutput = null as any;
utilities.lazyLoad(exports, ["getOsManagementHubManagedInstanceErrata","getOsManagementHubManagedInstanceErrataOutput"], () => require("./getOsManagementHubManagedInstanceErrata"));

export { GetOsManagementHubManagedInstanceGroupArgs, GetOsManagementHubManagedInstanceGroupResult, GetOsManagementHubManagedInstanceGroupOutputArgs } from "./getOsManagementHubManagedInstanceGroup";
export const getOsManagementHubManagedInstanceGroup: typeof import("./getOsManagementHubManagedInstanceGroup").getOsManagementHubManagedInstanceGroup = null as any;
export const getOsManagementHubManagedInstanceGroupOutput: typeof import("./getOsManagementHubManagedInstanceGroup").getOsManagementHubManagedInstanceGroupOutput = null as any;
utilities.lazyLoad(exports, ["getOsManagementHubManagedInstanceGroup","getOsManagementHubManagedInstanceGroupOutput"], () => require("./getOsManagementHubManagedInstanceGroup"));

export { GetOsManagementHubManagedInstanceGroupAvailableModulesArgs, GetOsManagementHubManagedInstanceGroupAvailableModulesResult, GetOsManagementHubManagedInstanceGroupAvailableModulesOutputArgs } from "./getOsManagementHubManagedInstanceGroupAvailableModules";
export const getOsManagementHubManagedInstanceGroupAvailableModules: typeof import("./getOsManagementHubManagedInstanceGroupAvailableModules").getOsManagementHubManagedInstanceGroupAvailableModules = null as any;
export const getOsManagementHubManagedInstanceGroupAvailableModulesOutput: typeof import("./getOsManagementHubManagedInstanceGroupAvailableModules").getOsManagementHubManagedInstanceGroupAvailableModulesOutput = null as any;
utilities.lazyLoad(exports, ["getOsManagementHubManagedInstanceGroupAvailableModules","getOsManagementHubManagedInstanceGroupAvailableModulesOutput"], () => require("./getOsManagementHubManagedInstanceGroupAvailableModules"));

export { GetOsManagementHubManagedInstanceGroupAvailablePackagesArgs, GetOsManagementHubManagedInstanceGroupAvailablePackagesResult, GetOsManagementHubManagedInstanceGroupAvailablePackagesOutputArgs } from "./getOsManagementHubManagedInstanceGroupAvailablePackages";
export const getOsManagementHubManagedInstanceGroupAvailablePackages: typeof import("./getOsManagementHubManagedInstanceGroupAvailablePackages").getOsManagementHubManagedInstanceGroupAvailablePackages = null as any;
export const getOsManagementHubManagedInstanceGroupAvailablePackagesOutput: typeof import("./getOsManagementHubManagedInstanceGroupAvailablePackages").getOsManagementHubManagedInstanceGroupAvailablePackagesOutput = null as any;
utilities.lazyLoad(exports, ["getOsManagementHubManagedInstanceGroupAvailablePackages","getOsManagementHubManagedInstanceGroupAvailablePackagesOutput"], () => require("./getOsManagementHubManagedInstanceGroupAvailablePackages"));

export { GetOsManagementHubManagedInstanceGroupAvailableSoftwareSourcesArgs, GetOsManagementHubManagedInstanceGroupAvailableSoftwareSourcesResult, GetOsManagementHubManagedInstanceGroupAvailableSoftwareSourcesOutputArgs } from "./getOsManagementHubManagedInstanceGroupAvailableSoftwareSources";
export const getOsManagementHubManagedInstanceGroupAvailableSoftwareSources: typeof import("./getOsManagementHubManagedInstanceGroupAvailableSoftwareSources").getOsManagementHubManagedInstanceGroupAvailableSoftwareSources = null as any;
export const getOsManagementHubManagedInstanceGroupAvailableSoftwareSourcesOutput: typeof import("./getOsManagementHubManagedInstanceGroupAvailableSoftwareSources").getOsManagementHubManagedInstanceGroupAvailableSoftwareSourcesOutput = null as any;
utilities.lazyLoad(exports, ["getOsManagementHubManagedInstanceGroupAvailableSoftwareSources","getOsManagementHubManagedInstanceGroupAvailableSoftwareSourcesOutput"], () => require("./getOsManagementHubManagedInstanceGroupAvailableSoftwareSources"));

export { GetOsManagementHubManagedInstanceGroupInstalledPackagesArgs, GetOsManagementHubManagedInstanceGroupInstalledPackagesResult, GetOsManagementHubManagedInstanceGroupInstalledPackagesOutputArgs } from "./getOsManagementHubManagedInstanceGroupInstalledPackages";
export const getOsManagementHubManagedInstanceGroupInstalledPackages: typeof import("./getOsManagementHubManagedInstanceGroupInstalledPackages").getOsManagementHubManagedInstanceGroupInstalledPackages = null as any;
export const getOsManagementHubManagedInstanceGroupInstalledPackagesOutput: typeof import("./getOsManagementHubManagedInstanceGroupInstalledPackages").getOsManagementHubManagedInstanceGroupInstalledPackagesOutput = null as any;
utilities.lazyLoad(exports, ["getOsManagementHubManagedInstanceGroupInstalledPackages","getOsManagementHubManagedInstanceGroupInstalledPackagesOutput"], () => require("./getOsManagementHubManagedInstanceGroupInstalledPackages"));

export { GetOsManagementHubManagedInstanceGroupModulesArgs, GetOsManagementHubManagedInstanceGroupModulesResult, GetOsManagementHubManagedInstanceGroupModulesOutputArgs } from "./getOsManagementHubManagedInstanceGroupModules";
export const getOsManagementHubManagedInstanceGroupModules: typeof import("./getOsManagementHubManagedInstanceGroupModules").getOsManagementHubManagedInstanceGroupModules = null as any;
export const getOsManagementHubManagedInstanceGroupModulesOutput: typeof import("./getOsManagementHubManagedInstanceGroupModules").getOsManagementHubManagedInstanceGroupModulesOutput = null as any;
utilities.lazyLoad(exports, ["getOsManagementHubManagedInstanceGroupModules","getOsManagementHubManagedInstanceGroupModulesOutput"], () => require("./getOsManagementHubManagedInstanceGroupModules"));

export { GetOsManagementHubManagedInstanceGroupsArgs, GetOsManagementHubManagedInstanceGroupsResult, GetOsManagementHubManagedInstanceGroupsOutputArgs } from "./getOsManagementHubManagedInstanceGroups";
export const getOsManagementHubManagedInstanceGroups: typeof import("./getOsManagementHubManagedInstanceGroups").getOsManagementHubManagedInstanceGroups = null as any;
export const getOsManagementHubManagedInstanceGroupsOutput: typeof import("./getOsManagementHubManagedInstanceGroups").getOsManagementHubManagedInstanceGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getOsManagementHubManagedInstanceGroups","getOsManagementHubManagedInstanceGroupsOutput"], () => require("./getOsManagementHubManagedInstanceGroups"));

export { GetOsManagementHubManagedInstanceInstalledPackagesArgs, GetOsManagementHubManagedInstanceInstalledPackagesResult, GetOsManagementHubManagedInstanceInstalledPackagesOutputArgs } from "./getOsManagementHubManagedInstanceInstalledPackages";
export const getOsManagementHubManagedInstanceInstalledPackages: typeof import("./getOsManagementHubManagedInstanceInstalledPackages").getOsManagementHubManagedInstanceInstalledPackages = null as any;
export const getOsManagementHubManagedInstanceInstalledPackagesOutput: typeof import("./getOsManagementHubManagedInstanceInstalledPackages").getOsManagementHubManagedInstanceInstalledPackagesOutput = null as any;
utilities.lazyLoad(exports, ["getOsManagementHubManagedInstanceInstalledPackages","getOsManagementHubManagedInstanceInstalledPackagesOutput"], () => require("./getOsManagementHubManagedInstanceInstalledPackages"));

export { GetOsManagementHubManagedInstanceInstalledWindowsUpdatesArgs, GetOsManagementHubManagedInstanceInstalledWindowsUpdatesResult, GetOsManagementHubManagedInstanceInstalledWindowsUpdatesOutputArgs } from "./getOsManagementHubManagedInstanceInstalledWindowsUpdates";
export const getOsManagementHubManagedInstanceInstalledWindowsUpdates: typeof import("./getOsManagementHubManagedInstanceInstalledWindowsUpdates").getOsManagementHubManagedInstanceInstalledWindowsUpdates = null as any;
export const getOsManagementHubManagedInstanceInstalledWindowsUpdatesOutput: typeof import("./getOsManagementHubManagedInstanceInstalledWindowsUpdates").getOsManagementHubManagedInstanceInstalledWindowsUpdatesOutput = null as any;
utilities.lazyLoad(exports, ["getOsManagementHubManagedInstanceInstalledWindowsUpdates","getOsManagementHubManagedInstanceInstalledWindowsUpdatesOutput"], () => require("./getOsManagementHubManagedInstanceInstalledWindowsUpdates"));

export { GetOsManagementHubManagedInstanceModulesArgs, GetOsManagementHubManagedInstanceModulesResult, GetOsManagementHubManagedInstanceModulesOutputArgs } from "./getOsManagementHubManagedInstanceModules";
export const getOsManagementHubManagedInstanceModules: typeof import("./getOsManagementHubManagedInstanceModules").getOsManagementHubManagedInstanceModules = null as any;
export const getOsManagementHubManagedInstanceModulesOutput: typeof import("./getOsManagementHubManagedInstanceModules").getOsManagementHubManagedInstanceModulesOutput = null as any;
utilities.lazyLoad(exports, ["getOsManagementHubManagedInstanceModules","getOsManagementHubManagedInstanceModulesOutput"], () => require("./getOsManagementHubManagedInstanceModules"));

export { GetOsManagementHubManagedInstanceUpdatablePackagesArgs, GetOsManagementHubManagedInstanceUpdatablePackagesResult, GetOsManagementHubManagedInstanceUpdatablePackagesOutputArgs } from "./getOsManagementHubManagedInstanceUpdatablePackages";
export const getOsManagementHubManagedInstanceUpdatablePackages: typeof import("./getOsManagementHubManagedInstanceUpdatablePackages").getOsManagementHubManagedInstanceUpdatablePackages = null as any;
export const getOsManagementHubManagedInstanceUpdatablePackagesOutput: typeof import("./getOsManagementHubManagedInstanceUpdatablePackages").getOsManagementHubManagedInstanceUpdatablePackagesOutput = null as any;
utilities.lazyLoad(exports, ["getOsManagementHubManagedInstanceUpdatablePackages","getOsManagementHubManagedInstanceUpdatablePackagesOutput"], () => require("./getOsManagementHubManagedInstanceUpdatablePackages"));

export { GetOsManagementHubManagedInstancesArgs, GetOsManagementHubManagedInstancesResult, GetOsManagementHubManagedInstancesOutputArgs } from "./getOsManagementHubManagedInstances";
export const getOsManagementHubManagedInstances: typeof import("./getOsManagementHubManagedInstances").getOsManagementHubManagedInstances = null as any;
export const getOsManagementHubManagedInstancesOutput: typeof import("./getOsManagementHubManagedInstances").getOsManagementHubManagedInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getOsManagementHubManagedInstances","getOsManagementHubManagedInstancesOutput"], () => require("./getOsManagementHubManagedInstances"));

export { GetOsManagementHubManagementStationArgs, GetOsManagementHubManagementStationResult, GetOsManagementHubManagementStationOutputArgs } from "./getOsManagementHubManagementStation";
export const getOsManagementHubManagementStation: typeof import("./getOsManagementHubManagementStation").getOsManagementHubManagementStation = null as any;
export const getOsManagementHubManagementStationOutput: typeof import("./getOsManagementHubManagementStation").getOsManagementHubManagementStationOutput = null as any;
utilities.lazyLoad(exports, ["getOsManagementHubManagementStation","getOsManagementHubManagementStationOutput"], () => require("./getOsManagementHubManagementStation"));

export { GetOsManagementHubManagementStationMirrorsArgs, GetOsManagementHubManagementStationMirrorsResult, GetOsManagementHubManagementStationMirrorsOutputArgs } from "./getOsManagementHubManagementStationMirrors";
export const getOsManagementHubManagementStationMirrors: typeof import("./getOsManagementHubManagementStationMirrors").getOsManagementHubManagementStationMirrors = null as any;
export const getOsManagementHubManagementStationMirrorsOutput: typeof import("./getOsManagementHubManagementStationMirrors").getOsManagementHubManagementStationMirrorsOutput = null as any;
utilities.lazyLoad(exports, ["getOsManagementHubManagementStationMirrors","getOsManagementHubManagementStationMirrorsOutput"], () => require("./getOsManagementHubManagementStationMirrors"));

export { GetOsManagementHubManagementStationsArgs, GetOsManagementHubManagementStationsResult, GetOsManagementHubManagementStationsOutputArgs } from "./getOsManagementHubManagementStations";
export const getOsManagementHubManagementStations: typeof import("./getOsManagementHubManagementStations").getOsManagementHubManagementStations = null as any;
export const getOsManagementHubManagementStationsOutput: typeof import("./getOsManagementHubManagementStations").getOsManagementHubManagementStationsOutput = null as any;
utilities.lazyLoad(exports, ["getOsManagementHubManagementStations","getOsManagementHubManagementStationsOutput"], () => require("./getOsManagementHubManagementStations"));

export { GetOsManagementHubProfileArgs, GetOsManagementHubProfileResult, GetOsManagementHubProfileOutputArgs } from "./getOsManagementHubProfile";
export const getOsManagementHubProfile: typeof import("./getOsManagementHubProfile").getOsManagementHubProfile = null as any;
export const getOsManagementHubProfileOutput: typeof import("./getOsManagementHubProfile").getOsManagementHubProfileOutput = null as any;
utilities.lazyLoad(exports, ["getOsManagementHubProfile","getOsManagementHubProfileOutput"], () => require("./getOsManagementHubProfile"));

export { GetOsManagementHubProfilesArgs, GetOsManagementHubProfilesResult, GetOsManagementHubProfilesOutputArgs } from "./getOsManagementHubProfiles";
export const getOsManagementHubProfiles: typeof import("./getOsManagementHubProfiles").getOsManagementHubProfiles = null as any;
export const getOsManagementHubProfilesOutput: typeof import("./getOsManagementHubProfiles").getOsManagementHubProfilesOutput = null as any;
utilities.lazyLoad(exports, ["getOsManagementHubProfiles","getOsManagementHubProfilesOutput"], () => require("./getOsManagementHubProfiles"));

export { GetOsManagementHubScheduledJobArgs, GetOsManagementHubScheduledJobResult, GetOsManagementHubScheduledJobOutputArgs } from "./getOsManagementHubScheduledJob";
export const getOsManagementHubScheduledJob: typeof import("./getOsManagementHubScheduledJob").getOsManagementHubScheduledJob = null as any;
export const getOsManagementHubScheduledJobOutput: typeof import("./getOsManagementHubScheduledJob").getOsManagementHubScheduledJobOutput = null as any;
utilities.lazyLoad(exports, ["getOsManagementHubScheduledJob","getOsManagementHubScheduledJobOutput"], () => require("./getOsManagementHubScheduledJob"));

export { GetOsManagementHubScheduledJobsArgs, GetOsManagementHubScheduledJobsResult, GetOsManagementHubScheduledJobsOutputArgs } from "./getOsManagementHubScheduledJobs";
export const getOsManagementHubScheduledJobs: typeof import("./getOsManagementHubScheduledJobs").getOsManagementHubScheduledJobs = null as any;
export const getOsManagementHubScheduledJobsOutput: typeof import("./getOsManagementHubScheduledJobs").getOsManagementHubScheduledJobsOutput = null as any;
utilities.lazyLoad(exports, ["getOsManagementHubScheduledJobs","getOsManagementHubScheduledJobsOutput"], () => require("./getOsManagementHubScheduledJobs"));

export { GetOsManagementHubSoftwarePackageArgs, GetOsManagementHubSoftwarePackageResult, GetOsManagementHubSoftwarePackageOutputArgs } from "./getOsManagementHubSoftwarePackage";
export const getOsManagementHubSoftwarePackage: typeof import("./getOsManagementHubSoftwarePackage").getOsManagementHubSoftwarePackage = null as any;
export const getOsManagementHubSoftwarePackageOutput: typeof import("./getOsManagementHubSoftwarePackage").getOsManagementHubSoftwarePackageOutput = null as any;
utilities.lazyLoad(exports, ["getOsManagementHubSoftwarePackage","getOsManagementHubSoftwarePackageOutput"], () => require("./getOsManagementHubSoftwarePackage"));

export { GetOsManagementHubSoftwarePackageSoftwareSourceArgs, GetOsManagementHubSoftwarePackageSoftwareSourceResult, GetOsManagementHubSoftwarePackageSoftwareSourceOutputArgs } from "./getOsManagementHubSoftwarePackageSoftwareSource";
export const getOsManagementHubSoftwarePackageSoftwareSource: typeof import("./getOsManagementHubSoftwarePackageSoftwareSource").getOsManagementHubSoftwarePackageSoftwareSource = null as any;
export const getOsManagementHubSoftwarePackageSoftwareSourceOutput: typeof import("./getOsManagementHubSoftwarePackageSoftwareSource").getOsManagementHubSoftwarePackageSoftwareSourceOutput = null as any;
utilities.lazyLoad(exports, ["getOsManagementHubSoftwarePackageSoftwareSource","getOsManagementHubSoftwarePackageSoftwareSourceOutput"], () => require("./getOsManagementHubSoftwarePackageSoftwareSource"));

export { GetOsManagementHubSoftwarePackagesArgs, GetOsManagementHubSoftwarePackagesResult, GetOsManagementHubSoftwarePackagesOutputArgs } from "./getOsManagementHubSoftwarePackages";
export const getOsManagementHubSoftwarePackages: typeof import("./getOsManagementHubSoftwarePackages").getOsManagementHubSoftwarePackages = null as any;
export const getOsManagementHubSoftwarePackagesOutput: typeof import("./getOsManagementHubSoftwarePackages").getOsManagementHubSoftwarePackagesOutput = null as any;
utilities.lazyLoad(exports, ["getOsManagementHubSoftwarePackages","getOsManagementHubSoftwarePackagesOutput"], () => require("./getOsManagementHubSoftwarePackages"));

export { GetOsManagementHubSoftwareSourceArgs, GetOsManagementHubSoftwareSourceResult, GetOsManagementHubSoftwareSourceOutputArgs } from "./getOsManagementHubSoftwareSource";
export const getOsManagementHubSoftwareSource: typeof import("./getOsManagementHubSoftwareSource").getOsManagementHubSoftwareSource = null as any;
export const getOsManagementHubSoftwareSourceOutput: typeof import("./getOsManagementHubSoftwareSource").getOsManagementHubSoftwareSourceOutput = null as any;
utilities.lazyLoad(exports, ["getOsManagementHubSoftwareSource","getOsManagementHubSoftwareSourceOutput"], () => require("./getOsManagementHubSoftwareSource"));

export { GetOsManagementHubSoftwareSourceModuleStreamArgs, GetOsManagementHubSoftwareSourceModuleStreamResult, GetOsManagementHubSoftwareSourceModuleStreamOutputArgs } from "./getOsManagementHubSoftwareSourceModuleStream";
export const getOsManagementHubSoftwareSourceModuleStream: typeof import("./getOsManagementHubSoftwareSourceModuleStream").getOsManagementHubSoftwareSourceModuleStream = null as any;
export const getOsManagementHubSoftwareSourceModuleStreamOutput: typeof import("./getOsManagementHubSoftwareSourceModuleStream").getOsManagementHubSoftwareSourceModuleStreamOutput = null as any;
utilities.lazyLoad(exports, ["getOsManagementHubSoftwareSourceModuleStream","getOsManagementHubSoftwareSourceModuleStreamOutput"], () => require("./getOsManagementHubSoftwareSourceModuleStream"));

export { GetOsManagementHubSoftwareSourceModuleStreamProfileArgs, GetOsManagementHubSoftwareSourceModuleStreamProfileResult, GetOsManagementHubSoftwareSourceModuleStreamProfileOutputArgs } from "./getOsManagementHubSoftwareSourceModuleStreamProfile";
export const getOsManagementHubSoftwareSourceModuleStreamProfile: typeof import("./getOsManagementHubSoftwareSourceModuleStreamProfile").getOsManagementHubSoftwareSourceModuleStreamProfile = null as any;
export const getOsManagementHubSoftwareSourceModuleStreamProfileOutput: typeof import("./getOsManagementHubSoftwareSourceModuleStreamProfile").getOsManagementHubSoftwareSourceModuleStreamProfileOutput = null as any;
utilities.lazyLoad(exports, ["getOsManagementHubSoftwareSourceModuleStreamProfile","getOsManagementHubSoftwareSourceModuleStreamProfileOutput"], () => require("./getOsManagementHubSoftwareSourceModuleStreamProfile"));

export { GetOsManagementHubSoftwareSourceModuleStreamProfilesArgs, GetOsManagementHubSoftwareSourceModuleStreamProfilesResult, GetOsManagementHubSoftwareSourceModuleStreamProfilesOutputArgs } from "./getOsManagementHubSoftwareSourceModuleStreamProfiles";
export const getOsManagementHubSoftwareSourceModuleStreamProfiles: typeof import("./getOsManagementHubSoftwareSourceModuleStreamProfiles").getOsManagementHubSoftwareSourceModuleStreamProfiles = null as any;
export const getOsManagementHubSoftwareSourceModuleStreamProfilesOutput: typeof import("./getOsManagementHubSoftwareSourceModuleStreamProfiles").getOsManagementHubSoftwareSourceModuleStreamProfilesOutput = null as any;
utilities.lazyLoad(exports, ["getOsManagementHubSoftwareSourceModuleStreamProfiles","getOsManagementHubSoftwareSourceModuleStreamProfilesOutput"], () => require("./getOsManagementHubSoftwareSourceModuleStreamProfiles"));

export { GetOsManagementHubSoftwareSourceModuleStreamsArgs, GetOsManagementHubSoftwareSourceModuleStreamsResult, GetOsManagementHubSoftwareSourceModuleStreamsOutputArgs } from "./getOsManagementHubSoftwareSourceModuleStreams";
export const getOsManagementHubSoftwareSourceModuleStreams: typeof import("./getOsManagementHubSoftwareSourceModuleStreams").getOsManagementHubSoftwareSourceModuleStreams = null as any;
export const getOsManagementHubSoftwareSourceModuleStreamsOutput: typeof import("./getOsManagementHubSoftwareSourceModuleStreams").getOsManagementHubSoftwareSourceModuleStreamsOutput = null as any;
utilities.lazyLoad(exports, ["getOsManagementHubSoftwareSourceModuleStreams","getOsManagementHubSoftwareSourceModuleStreamsOutput"], () => require("./getOsManagementHubSoftwareSourceModuleStreams"));

export { GetOsManagementHubSoftwareSourcePackageGroupArgs, GetOsManagementHubSoftwareSourcePackageGroupResult, GetOsManagementHubSoftwareSourcePackageGroupOutputArgs } from "./getOsManagementHubSoftwareSourcePackageGroup";
export const getOsManagementHubSoftwareSourcePackageGroup: typeof import("./getOsManagementHubSoftwareSourcePackageGroup").getOsManagementHubSoftwareSourcePackageGroup = null as any;
export const getOsManagementHubSoftwareSourcePackageGroupOutput: typeof import("./getOsManagementHubSoftwareSourcePackageGroup").getOsManagementHubSoftwareSourcePackageGroupOutput = null as any;
utilities.lazyLoad(exports, ["getOsManagementHubSoftwareSourcePackageGroup","getOsManagementHubSoftwareSourcePackageGroupOutput"], () => require("./getOsManagementHubSoftwareSourcePackageGroup"));

export { GetOsManagementHubSoftwareSourcePackageGroupsArgs, GetOsManagementHubSoftwareSourcePackageGroupsResult, GetOsManagementHubSoftwareSourcePackageGroupsOutputArgs } from "./getOsManagementHubSoftwareSourcePackageGroups";
export const getOsManagementHubSoftwareSourcePackageGroups: typeof import("./getOsManagementHubSoftwareSourcePackageGroups").getOsManagementHubSoftwareSourcePackageGroups = null as any;
export const getOsManagementHubSoftwareSourcePackageGroupsOutput: typeof import("./getOsManagementHubSoftwareSourcePackageGroups").getOsManagementHubSoftwareSourcePackageGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getOsManagementHubSoftwareSourcePackageGroups","getOsManagementHubSoftwareSourcePackageGroupsOutput"], () => require("./getOsManagementHubSoftwareSourcePackageGroups"));

export { GetOsManagementHubSoftwareSourceSoftwarePackageArgs, GetOsManagementHubSoftwareSourceSoftwarePackageResult, GetOsManagementHubSoftwareSourceSoftwarePackageOutputArgs } from "./getOsManagementHubSoftwareSourceSoftwarePackage";
export const getOsManagementHubSoftwareSourceSoftwarePackage: typeof import("./getOsManagementHubSoftwareSourceSoftwarePackage").getOsManagementHubSoftwareSourceSoftwarePackage = null as any;
export const getOsManagementHubSoftwareSourceSoftwarePackageOutput: typeof import("./getOsManagementHubSoftwareSourceSoftwarePackage").getOsManagementHubSoftwareSourceSoftwarePackageOutput = null as any;
utilities.lazyLoad(exports, ["getOsManagementHubSoftwareSourceSoftwarePackage","getOsManagementHubSoftwareSourceSoftwarePackageOutput"], () => require("./getOsManagementHubSoftwareSourceSoftwarePackage"));

export { GetOsManagementHubSoftwareSourceSoftwarePackagesArgs, GetOsManagementHubSoftwareSourceSoftwarePackagesResult, GetOsManagementHubSoftwareSourceSoftwarePackagesOutputArgs } from "./getOsManagementHubSoftwareSourceSoftwarePackages";
export const getOsManagementHubSoftwareSourceSoftwarePackages: typeof import("./getOsManagementHubSoftwareSourceSoftwarePackages").getOsManagementHubSoftwareSourceSoftwarePackages = null as any;
export const getOsManagementHubSoftwareSourceSoftwarePackagesOutput: typeof import("./getOsManagementHubSoftwareSourceSoftwarePackages").getOsManagementHubSoftwareSourceSoftwarePackagesOutput = null as any;
utilities.lazyLoad(exports, ["getOsManagementHubSoftwareSourceSoftwarePackages","getOsManagementHubSoftwareSourceSoftwarePackagesOutput"], () => require("./getOsManagementHubSoftwareSourceSoftwarePackages"));

export { GetOsManagementHubSoftwareSourceVendorsArgs, GetOsManagementHubSoftwareSourceVendorsResult, GetOsManagementHubSoftwareSourceVendorsOutputArgs } from "./getOsManagementHubSoftwareSourceVendors";
export const getOsManagementHubSoftwareSourceVendors: typeof import("./getOsManagementHubSoftwareSourceVendors").getOsManagementHubSoftwareSourceVendors = null as any;
export const getOsManagementHubSoftwareSourceVendorsOutput: typeof import("./getOsManagementHubSoftwareSourceVendors").getOsManagementHubSoftwareSourceVendorsOutput = null as any;
utilities.lazyLoad(exports, ["getOsManagementHubSoftwareSourceVendors","getOsManagementHubSoftwareSourceVendorsOutput"], () => require("./getOsManagementHubSoftwareSourceVendors"));

export { GetOsManagementHubSoftwareSourcesArgs, GetOsManagementHubSoftwareSourcesResult, GetOsManagementHubSoftwareSourcesOutputArgs } from "./getOsManagementHubSoftwareSources";
export const getOsManagementHubSoftwareSources: typeof import("./getOsManagementHubSoftwareSources").getOsManagementHubSoftwareSources = null as any;
export const getOsManagementHubSoftwareSourcesOutput: typeof import("./getOsManagementHubSoftwareSources").getOsManagementHubSoftwareSourcesOutput = null as any;
utilities.lazyLoad(exports, ["getOsManagementHubSoftwareSources","getOsManagementHubSoftwareSourcesOutput"], () => require("./getOsManagementHubSoftwareSources"));

export { GetOsManagementHubWindowsUpdateArgs, GetOsManagementHubWindowsUpdateResult, GetOsManagementHubWindowsUpdateOutputArgs } from "./getOsManagementHubWindowsUpdate";
export const getOsManagementHubWindowsUpdate: typeof import("./getOsManagementHubWindowsUpdate").getOsManagementHubWindowsUpdate = null as any;
export const getOsManagementHubWindowsUpdateOutput: typeof import("./getOsManagementHubWindowsUpdate").getOsManagementHubWindowsUpdateOutput = null as any;
utilities.lazyLoad(exports, ["getOsManagementHubWindowsUpdate","getOsManagementHubWindowsUpdateOutput"], () => require("./getOsManagementHubWindowsUpdate"));

export { GetOsManagementHubWindowsUpdatesArgs, GetOsManagementHubWindowsUpdatesResult, GetOsManagementHubWindowsUpdatesOutputArgs } from "./getOsManagementHubWindowsUpdates";
export const getOsManagementHubWindowsUpdates: typeof import("./getOsManagementHubWindowsUpdates").getOsManagementHubWindowsUpdates = null as any;
export const getOsManagementHubWindowsUpdatesOutput: typeof import("./getOsManagementHubWindowsUpdates").getOsManagementHubWindowsUpdatesOutput = null as any;
utilities.lazyLoad(exports, ["getOsManagementHubWindowsUpdates","getOsManagementHubWindowsUpdatesOutput"], () => require("./getOsManagementHubWindowsUpdates"));

export { GetOsmanagementManagedInstanceArgs, GetOsmanagementManagedInstanceResult, GetOsmanagementManagedInstanceOutputArgs } from "./getOsmanagementManagedInstance";
export const getOsmanagementManagedInstance: typeof import("./getOsmanagementManagedInstance").getOsmanagementManagedInstance = null as any;
export const getOsmanagementManagedInstanceOutput: typeof import("./getOsmanagementManagedInstance").getOsmanagementManagedInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getOsmanagementManagedInstance","getOsmanagementManagedInstanceOutput"], () => require("./getOsmanagementManagedInstance"));

export { GetOsmanagementManagedInstanceEventReportArgs, GetOsmanagementManagedInstanceEventReportResult, GetOsmanagementManagedInstanceEventReportOutputArgs } from "./getOsmanagementManagedInstanceEventReport";
export const getOsmanagementManagedInstanceEventReport: typeof import("./getOsmanagementManagedInstanceEventReport").getOsmanagementManagedInstanceEventReport = null as any;
export const getOsmanagementManagedInstanceEventReportOutput: typeof import("./getOsmanagementManagedInstanceEventReport").getOsmanagementManagedInstanceEventReportOutput = null as any;
utilities.lazyLoad(exports, ["getOsmanagementManagedInstanceEventReport","getOsmanagementManagedInstanceEventReportOutput"], () => require("./getOsmanagementManagedInstanceEventReport"));

export { GetOsmanagementManagedInstanceGroupArgs, GetOsmanagementManagedInstanceGroupResult, GetOsmanagementManagedInstanceGroupOutputArgs } from "./getOsmanagementManagedInstanceGroup";
export const getOsmanagementManagedInstanceGroup: typeof import("./getOsmanagementManagedInstanceGroup").getOsmanagementManagedInstanceGroup = null as any;
export const getOsmanagementManagedInstanceGroupOutput: typeof import("./getOsmanagementManagedInstanceGroup").getOsmanagementManagedInstanceGroupOutput = null as any;
utilities.lazyLoad(exports, ["getOsmanagementManagedInstanceGroup","getOsmanagementManagedInstanceGroupOutput"], () => require("./getOsmanagementManagedInstanceGroup"));

export { GetOsmanagementManagedInstanceGroupsArgs, GetOsmanagementManagedInstanceGroupsResult, GetOsmanagementManagedInstanceGroupsOutputArgs } from "./getOsmanagementManagedInstanceGroups";
export const getOsmanagementManagedInstanceGroups: typeof import("./getOsmanagementManagedInstanceGroups").getOsmanagementManagedInstanceGroups = null as any;
export const getOsmanagementManagedInstanceGroupsOutput: typeof import("./getOsmanagementManagedInstanceGroups").getOsmanagementManagedInstanceGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getOsmanagementManagedInstanceGroups","getOsmanagementManagedInstanceGroupsOutput"], () => require("./getOsmanagementManagedInstanceGroups"));

export { GetOsmanagementManagedInstanceModuleStreamsArgs, GetOsmanagementManagedInstanceModuleStreamsResult, GetOsmanagementManagedInstanceModuleStreamsOutputArgs } from "./getOsmanagementManagedInstanceModuleStreams";
export const getOsmanagementManagedInstanceModuleStreams: typeof import("./getOsmanagementManagedInstanceModuleStreams").getOsmanagementManagedInstanceModuleStreams = null as any;
export const getOsmanagementManagedInstanceModuleStreamsOutput: typeof import("./getOsmanagementManagedInstanceModuleStreams").getOsmanagementManagedInstanceModuleStreamsOutput = null as any;
utilities.lazyLoad(exports, ["getOsmanagementManagedInstanceModuleStreams","getOsmanagementManagedInstanceModuleStreamsOutput"], () => require("./getOsmanagementManagedInstanceModuleStreams"));

export { GetOsmanagementManagedInstanceStreamProfilesArgs, GetOsmanagementManagedInstanceStreamProfilesResult, GetOsmanagementManagedInstanceStreamProfilesOutputArgs } from "./getOsmanagementManagedInstanceStreamProfiles";
export const getOsmanagementManagedInstanceStreamProfiles: typeof import("./getOsmanagementManagedInstanceStreamProfiles").getOsmanagementManagedInstanceStreamProfiles = null as any;
export const getOsmanagementManagedInstanceStreamProfilesOutput: typeof import("./getOsmanagementManagedInstanceStreamProfiles").getOsmanagementManagedInstanceStreamProfilesOutput = null as any;
utilities.lazyLoad(exports, ["getOsmanagementManagedInstanceStreamProfiles","getOsmanagementManagedInstanceStreamProfilesOutput"], () => require("./getOsmanagementManagedInstanceStreamProfiles"));

export { GetOsmanagementManagedInstancesArgs, GetOsmanagementManagedInstancesResult, GetOsmanagementManagedInstancesOutputArgs } from "./getOsmanagementManagedInstances";
export const getOsmanagementManagedInstances: typeof import("./getOsmanagementManagedInstances").getOsmanagementManagedInstances = null as any;
export const getOsmanagementManagedInstancesOutput: typeof import("./getOsmanagementManagedInstances").getOsmanagementManagedInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getOsmanagementManagedInstances","getOsmanagementManagedInstancesOutput"], () => require("./getOsmanagementManagedInstances"));

export { GetOsmanagementSoftwareSourceArgs, GetOsmanagementSoftwareSourceResult, GetOsmanagementSoftwareSourceOutputArgs } from "./getOsmanagementSoftwareSource";
export const getOsmanagementSoftwareSource: typeof import("./getOsmanagementSoftwareSource").getOsmanagementSoftwareSource = null as any;
export const getOsmanagementSoftwareSourceOutput: typeof import("./getOsmanagementSoftwareSource").getOsmanagementSoftwareSourceOutput = null as any;
utilities.lazyLoad(exports, ["getOsmanagementSoftwareSource","getOsmanagementSoftwareSourceOutput"], () => require("./getOsmanagementSoftwareSource"));

export { GetOsmanagementSoftwareSourceModuleStreamArgs, GetOsmanagementSoftwareSourceModuleStreamResult, GetOsmanagementSoftwareSourceModuleStreamOutputArgs } from "./getOsmanagementSoftwareSourceModuleStream";
export const getOsmanagementSoftwareSourceModuleStream: typeof import("./getOsmanagementSoftwareSourceModuleStream").getOsmanagementSoftwareSourceModuleStream = null as any;
export const getOsmanagementSoftwareSourceModuleStreamOutput: typeof import("./getOsmanagementSoftwareSourceModuleStream").getOsmanagementSoftwareSourceModuleStreamOutput = null as any;
utilities.lazyLoad(exports, ["getOsmanagementSoftwareSourceModuleStream","getOsmanagementSoftwareSourceModuleStreamOutput"], () => require("./getOsmanagementSoftwareSourceModuleStream"));

export { GetOsmanagementSoftwareSourceModuleStreamProfileArgs, GetOsmanagementSoftwareSourceModuleStreamProfileResult, GetOsmanagementSoftwareSourceModuleStreamProfileOutputArgs } from "./getOsmanagementSoftwareSourceModuleStreamProfile";
export const getOsmanagementSoftwareSourceModuleStreamProfile: typeof import("./getOsmanagementSoftwareSourceModuleStreamProfile").getOsmanagementSoftwareSourceModuleStreamProfile = null as any;
export const getOsmanagementSoftwareSourceModuleStreamProfileOutput: typeof import("./getOsmanagementSoftwareSourceModuleStreamProfile").getOsmanagementSoftwareSourceModuleStreamProfileOutput = null as any;
utilities.lazyLoad(exports, ["getOsmanagementSoftwareSourceModuleStreamProfile","getOsmanagementSoftwareSourceModuleStreamProfileOutput"], () => require("./getOsmanagementSoftwareSourceModuleStreamProfile"));

export { GetOsmanagementSoftwareSourceStreamProfilesArgs, GetOsmanagementSoftwareSourceStreamProfilesResult, GetOsmanagementSoftwareSourceStreamProfilesOutputArgs } from "./getOsmanagementSoftwareSourceStreamProfiles";
export const getOsmanagementSoftwareSourceStreamProfiles: typeof import("./getOsmanagementSoftwareSourceStreamProfiles").getOsmanagementSoftwareSourceStreamProfiles = null as any;
export const getOsmanagementSoftwareSourceStreamProfilesOutput: typeof import("./getOsmanagementSoftwareSourceStreamProfiles").getOsmanagementSoftwareSourceStreamProfilesOutput = null as any;
utilities.lazyLoad(exports, ["getOsmanagementSoftwareSourceStreamProfiles","getOsmanagementSoftwareSourceStreamProfilesOutput"], () => require("./getOsmanagementSoftwareSourceStreamProfiles"));

export { GetOsmanagementSoftwareSourcesArgs, GetOsmanagementSoftwareSourcesResult, GetOsmanagementSoftwareSourcesOutputArgs } from "./getOsmanagementSoftwareSources";
export const getOsmanagementSoftwareSources: typeof import("./getOsmanagementSoftwareSources").getOsmanagementSoftwareSources = null as any;
export const getOsmanagementSoftwareSourcesOutput: typeof import("./getOsmanagementSoftwareSources").getOsmanagementSoftwareSourcesOutput = null as any;
utilities.lazyLoad(exports, ["getOsmanagementSoftwareSources","getOsmanagementSoftwareSourcesOutput"], () => require("./getOsmanagementSoftwareSources"));

export { GetOspGatewayAddressArgs, GetOspGatewayAddressResult, GetOspGatewayAddressOutputArgs } from "./getOspGatewayAddress";
export const getOspGatewayAddress: typeof import("./getOspGatewayAddress").getOspGatewayAddress = null as any;
export const getOspGatewayAddressOutput: typeof import("./getOspGatewayAddress").getOspGatewayAddressOutput = null as any;
utilities.lazyLoad(exports, ["getOspGatewayAddress","getOspGatewayAddressOutput"], () => require("./getOspGatewayAddress"));

export { GetOspGatewayAddressRuleArgs, GetOspGatewayAddressRuleResult, GetOspGatewayAddressRuleOutputArgs } from "./getOspGatewayAddressRule";
export const getOspGatewayAddressRule: typeof import("./getOspGatewayAddressRule").getOspGatewayAddressRule = null as any;
export const getOspGatewayAddressRuleOutput: typeof import("./getOspGatewayAddressRule").getOspGatewayAddressRuleOutput = null as any;
utilities.lazyLoad(exports, ["getOspGatewayAddressRule","getOspGatewayAddressRuleOutput"], () => require("./getOspGatewayAddressRule"));

export { GetOspGatewayInvoiceArgs, GetOspGatewayInvoiceResult, GetOspGatewayInvoiceOutputArgs } from "./getOspGatewayInvoice";
export const getOspGatewayInvoice: typeof import("./getOspGatewayInvoice").getOspGatewayInvoice = null as any;
export const getOspGatewayInvoiceOutput: typeof import("./getOspGatewayInvoice").getOspGatewayInvoiceOutput = null as any;
utilities.lazyLoad(exports, ["getOspGatewayInvoice","getOspGatewayInvoiceOutput"], () => require("./getOspGatewayInvoice"));

export { GetOspGatewayInvoicesArgs, GetOspGatewayInvoicesResult, GetOspGatewayInvoicesOutputArgs } from "./getOspGatewayInvoices";
export const getOspGatewayInvoices: typeof import("./getOspGatewayInvoices").getOspGatewayInvoices = null as any;
export const getOspGatewayInvoicesOutput: typeof import("./getOspGatewayInvoices").getOspGatewayInvoicesOutput = null as any;
utilities.lazyLoad(exports, ["getOspGatewayInvoices","getOspGatewayInvoicesOutput"], () => require("./getOspGatewayInvoices"));

export { GetOspGatewayInvoicesInvoiceLineArgs, GetOspGatewayInvoicesInvoiceLineResult, GetOspGatewayInvoicesInvoiceLineOutputArgs } from "./getOspGatewayInvoicesInvoiceLine";
export const getOspGatewayInvoicesInvoiceLine: typeof import("./getOspGatewayInvoicesInvoiceLine").getOspGatewayInvoicesInvoiceLine = null as any;
export const getOspGatewayInvoicesInvoiceLineOutput: typeof import("./getOspGatewayInvoicesInvoiceLine").getOspGatewayInvoicesInvoiceLineOutput = null as any;
utilities.lazyLoad(exports, ["getOspGatewayInvoicesInvoiceLine","getOspGatewayInvoicesInvoiceLineOutput"], () => require("./getOspGatewayInvoicesInvoiceLine"));

export { GetOspGatewayInvoicesInvoiceLinesArgs, GetOspGatewayInvoicesInvoiceLinesResult, GetOspGatewayInvoicesInvoiceLinesOutputArgs } from "./getOspGatewayInvoicesInvoiceLines";
export const getOspGatewayInvoicesInvoiceLines: typeof import("./getOspGatewayInvoicesInvoiceLines").getOspGatewayInvoicesInvoiceLines = null as any;
export const getOspGatewayInvoicesInvoiceLinesOutput: typeof import("./getOspGatewayInvoicesInvoiceLines").getOspGatewayInvoicesInvoiceLinesOutput = null as any;
utilities.lazyLoad(exports, ["getOspGatewayInvoicesInvoiceLines","getOspGatewayInvoicesInvoiceLinesOutput"], () => require("./getOspGatewayInvoicesInvoiceLines"));

export { GetOspGatewaySubscriptionArgs, GetOspGatewaySubscriptionResult, GetOspGatewaySubscriptionOutputArgs } from "./getOspGatewaySubscription";
export const getOspGatewaySubscription: typeof import("./getOspGatewaySubscription").getOspGatewaySubscription = null as any;
export const getOspGatewaySubscriptionOutput: typeof import("./getOspGatewaySubscription").getOspGatewaySubscriptionOutput = null as any;
utilities.lazyLoad(exports, ["getOspGatewaySubscription","getOspGatewaySubscriptionOutput"], () => require("./getOspGatewaySubscription"));

export { GetOspGatewaySubscriptionsArgs, GetOspGatewaySubscriptionsResult, GetOspGatewaySubscriptionsOutputArgs } from "./getOspGatewaySubscriptions";
export const getOspGatewaySubscriptions: typeof import("./getOspGatewaySubscriptions").getOspGatewaySubscriptions = null as any;
export const getOspGatewaySubscriptionsOutput: typeof import("./getOspGatewaySubscriptions").getOspGatewaySubscriptionsOutput = null as any;
utilities.lazyLoad(exports, ["getOspGatewaySubscriptions","getOspGatewaySubscriptionsOutput"], () => require("./getOspGatewaySubscriptions"));

export { GetOsubBillingScheduleBillingSchedulesArgs, GetOsubBillingScheduleBillingSchedulesResult, GetOsubBillingScheduleBillingSchedulesOutputArgs } from "./getOsubBillingScheduleBillingSchedules";
export const getOsubBillingScheduleBillingSchedules: typeof import("./getOsubBillingScheduleBillingSchedules").getOsubBillingScheduleBillingSchedules = null as any;
export const getOsubBillingScheduleBillingSchedulesOutput: typeof import("./getOsubBillingScheduleBillingSchedules").getOsubBillingScheduleBillingSchedulesOutput = null as any;
utilities.lazyLoad(exports, ["getOsubBillingScheduleBillingSchedules","getOsubBillingScheduleBillingSchedulesOutput"], () => require("./getOsubBillingScheduleBillingSchedules"));

export { GetOsubOrganizationSubscriptionOrganizationSubscriptionsArgs, GetOsubOrganizationSubscriptionOrganizationSubscriptionsResult, GetOsubOrganizationSubscriptionOrganizationSubscriptionsOutputArgs } from "./getOsubOrganizationSubscriptionOrganizationSubscriptions";
export const getOsubOrganizationSubscriptionOrganizationSubscriptions: typeof import("./getOsubOrganizationSubscriptionOrganizationSubscriptions").getOsubOrganizationSubscriptionOrganizationSubscriptions = null as any;
export const getOsubOrganizationSubscriptionOrganizationSubscriptionsOutput: typeof import("./getOsubOrganizationSubscriptionOrganizationSubscriptions").getOsubOrganizationSubscriptionOrganizationSubscriptionsOutput = null as any;
utilities.lazyLoad(exports, ["getOsubOrganizationSubscriptionOrganizationSubscriptions","getOsubOrganizationSubscriptionOrganizationSubscriptionsOutput"], () => require("./getOsubOrganizationSubscriptionOrganizationSubscriptions"));

export { GetOsubSubscriptionCommitmentArgs, GetOsubSubscriptionCommitmentResult, GetOsubSubscriptionCommitmentOutputArgs } from "./getOsubSubscriptionCommitment";
export const getOsubSubscriptionCommitment: typeof import("./getOsubSubscriptionCommitment").getOsubSubscriptionCommitment = null as any;
export const getOsubSubscriptionCommitmentOutput: typeof import("./getOsubSubscriptionCommitment").getOsubSubscriptionCommitmentOutput = null as any;
utilities.lazyLoad(exports, ["getOsubSubscriptionCommitment","getOsubSubscriptionCommitmentOutput"], () => require("./getOsubSubscriptionCommitment"));

export { GetOsubSubscriptionCommitmentsArgs, GetOsubSubscriptionCommitmentsResult, GetOsubSubscriptionCommitmentsOutputArgs } from "./getOsubSubscriptionCommitments";
export const getOsubSubscriptionCommitments: typeof import("./getOsubSubscriptionCommitments").getOsubSubscriptionCommitments = null as any;
export const getOsubSubscriptionCommitmentsOutput: typeof import("./getOsubSubscriptionCommitments").getOsubSubscriptionCommitmentsOutput = null as any;
utilities.lazyLoad(exports, ["getOsubSubscriptionCommitments","getOsubSubscriptionCommitmentsOutput"], () => require("./getOsubSubscriptionCommitments"));

export { GetOsubSubscriptionRatecardsArgs, GetOsubSubscriptionRatecardsResult, GetOsubSubscriptionRatecardsOutputArgs } from "./getOsubSubscriptionRatecards";
export const getOsubSubscriptionRatecards: typeof import("./getOsubSubscriptionRatecards").getOsubSubscriptionRatecards = null as any;
export const getOsubSubscriptionRatecardsOutput: typeof import("./getOsubSubscriptionRatecards").getOsubSubscriptionRatecardsOutput = null as any;
utilities.lazyLoad(exports, ["getOsubSubscriptionRatecards","getOsubSubscriptionRatecardsOutput"], () => require("./getOsubSubscriptionRatecards"));

export { GetOsubSubscriptionSubscriptionsArgs, GetOsubSubscriptionSubscriptionsResult, GetOsubSubscriptionSubscriptionsOutputArgs } from "./getOsubSubscriptionSubscriptions";
export const getOsubSubscriptionSubscriptions: typeof import("./getOsubSubscriptionSubscriptions").getOsubSubscriptionSubscriptions = null as any;
export const getOsubSubscriptionSubscriptionsOutput: typeof import("./getOsubSubscriptionSubscriptions").getOsubSubscriptionSubscriptionsOutput = null as any;
utilities.lazyLoad(exports, ["getOsubSubscriptionSubscriptions","getOsubSubscriptionSubscriptionsOutput"], () => require("./getOsubSubscriptionSubscriptions"));

export { GetOsubUsageComputedUsageArgs, GetOsubUsageComputedUsageResult, GetOsubUsageComputedUsageOutputArgs } from "./getOsubUsageComputedUsage";
export const getOsubUsageComputedUsage: typeof import("./getOsubUsageComputedUsage").getOsubUsageComputedUsage = null as any;
export const getOsubUsageComputedUsageOutput: typeof import("./getOsubUsageComputedUsage").getOsubUsageComputedUsageOutput = null as any;
utilities.lazyLoad(exports, ["getOsubUsageComputedUsage","getOsubUsageComputedUsageOutput"], () => require("./getOsubUsageComputedUsage"));

export { GetOsubUsageComputedUsageAggregatedsArgs, GetOsubUsageComputedUsageAggregatedsResult, GetOsubUsageComputedUsageAggregatedsOutputArgs } from "./getOsubUsageComputedUsageAggregateds";
export const getOsubUsageComputedUsageAggregateds: typeof import("./getOsubUsageComputedUsageAggregateds").getOsubUsageComputedUsageAggregateds = null as any;
export const getOsubUsageComputedUsageAggregatedsOutput: typeof import("./getOsubUsageComputedUsageAggregateds").getOsubUsageComputedUsageAggregatedsOutput = null as any;
utilities.lazyLoad(exports, ["getOsubUsageComputedUsageAggregateds","getOsubUsageComputedUsageAggregatedsOutput"], () => require("./getOsubUsageComputedUsageAggregateds"));

export { GetOsubUsageComputedUsagesArgs, GetOsubUsageComputedUsagesResult, GetOsubUsageComputedUsagesOutputArgs } from "./getOsubUsageComputedUsages";
export const getOsubUsageComputedUsages: typeof import("./getOsubUsageComputedUsages").getOsubUsageComputedUsages = null as any;
export const getOsubUsageComputedUsagesOutput: typeof import("./getOsubUsageComputedUsages").getOsubUsageComputedUsagesOutput = null as any;
utilities.lazyLoad(exports, ["getOsubUsageComputedUsages","getOsubUsageComputedUsagesOutput"], () => require("./getOsubUsageComputedUsages"));

export { GetPsqlBackupArgs, GetPsqlBackupResult, GetPsqlBackupOutputArgs } from "./getPsqlBackup";
export const getPsqlBackup: typeof import("./getPsqlBackup").getPsqlBackup = null as any;
export const getPsqlBackupOutput: typeof import("./getPsqlBackup").getPsqlBackupOutput = null as any;
utilities.lazyLoad(exports, ["getPsqlBackup","getPsqlBackupOutput"], () => require("./getPsqlBackup"));

export { GetPsqlBackupsArgs, GetPsqlBackupsResult, GetPsqlBackupsOutputArgs } from "./getPsqlBackups";
export const getPsqlBackups: typeof import("./getPsqlBackups").getPsqlBackups = null as any;
export const getPsqlBackupsOutput: typeof import("./getPsqlBackups").getPsqlBackupsOutput = null as any;
utilities.lazyLoad(exports, ["getPsqlBackups","getPsqlBackupsOutput"], () => require("./getPsqlBackups"));

export { GetPsqlConfigurationArgs, GetPsqlConfigurationResult, GetPsqlConfigurationOutputArgs } from "./getPsqlConfiguration";
export const getPsqlConfiguration: typeof import("./getPsqlConfiguration").getPsqlConfiguration = null as any;
export const getPsqlConfigurationOutput: typeof import("./getPsqlConfiguration").getPsqlConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getPsqlConfiguration","getPsqlConfigurationOutput"], () => require("./getPsqlConfiguration"));

export { GetPsqlConfigurationsArgs, GetPsqlConfigurationsResult, GetPsqlConfigurationsOutputArgs } from "./getPsqlConfigurations";
export const getPsqlConfigurations: typeof import("./getPsqlConfigurations").getPsqlConfigurations = null as any;
export const getPsqlConfigurationsOutput: typeof import("./getPsqlConfigurations").getPsqlConfigurationsOutput = null as any;
utilities.lazyLoad(exports, ["getPsqlConfigurations","getPsqlConfigurationsOutput"], () => require("./getPsqlConfigurations"));

export { GetPsqlDbSystemArgs, GetPsqlDbSystemResult, GetPsqlDbSystemOutputArgs } from "./getPsqlDbSystem";
export const getPsqlDbSystem: typeof import("./getPsqlDbSystem").getPsqlDbSystem = null as any;
export const getPsqlDbSystemOutput: typeof import("./getPsqlDbSystem").getPsqlDbSystemOutput = null as any;
utilities.lazyLoad(exports, ["getPsqlDbSystem","getPsqlDbSystemOutput"], () => require("./getPsqlDbSystem"));

export { GetPsqlDbSystemConnectionDetailArgs, GetPsqlDbSystemConnectionDetailResult, GetPsqlDbSystemConnectionDetailOutputArgs } from "./getPsqlDbSystemConnectionDetail";
export const getPsqlDbSystemConnectionDetail: typeof import("./getPsqlDbSystemConnectionDetail").getPsqlDbSystemConnectionDetail = null as any;
export const getPsqlDbSystemConnectionDetailOutput: typeof import("./getPsqlDbSystemConnectionDetail").getPsqlDbSystemConnectionDetailOutput = null as any;
utilities.lazyLoad(exports, ["getPsqlDbSystemConnectionDetail","getPsqlDbSystemConnectionDetailOutput"], () => require("./getPsqlDbSystemConnectionDetail"));

export { GetPsqlDbSystemPrimaryDbInstanceArgs, GetPsqlDbSystemPrimaryDbInstanceResult, GetPsqlDbSystemPrimaryDbInstanceOutputArgs } from "./getPsqlDbSystemPrimaryDbInstance";
export const getPsqlDbSystemPrimaryDbInstance: typeof import("./getPsqlDbSystemPrimaryDbInstance").getPsqlDbSystemPrimaryDbInstance = null as any;
export const getPsqlDbSystemPrimaryDbInstanceOutput: typeof import("./getPsqlDbSystemPrimaryDbInstance").getPsqlDbSystemPrimaryDbInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getPsqlDbSystemPrimaryDbInstance","getPsqlDbSystemPrimaryDbInstanceOutput"], () => require("./getPsqlDbSystemPrimaryDbInstance"));

export { GetPsqlDbSystemsArgs, GetPsqlDbSystemsResult, GetPsqlDbSystemsOutputArgs } from "./getPsqlDbSystems";
export const getPsqlDbSystems: typeof import("./getPsqlDbSystems").getPsqlDbSystems = null as any;
export const getPsqlDbSystemsOutput: typeof import("./getPsqlDbSystems").getPsqlDbSystemsOutput = null as any;
utilities.lazyLoad(exports, ["getPsqlDbSystems","getPsqlDbSystemsOutput"], () => require("./getPsqlDbSystems"));

export { GetPsqlDefaultConfigurationArgs, GetPsqlDefaultConfigurationResult, GetPsqlDefaultConfigurationOutputArgs } from "./getPsqlDefaultConfiguration";
export const getPsqlDefaultConfiguration: typeof import("./getPsqlDefaultConfiguration").getPsqlDefaultConfiguration = null as any;
export const getPsqlDefaultConfigurationOutput: typeof import("./getPsqlDefaultConfiguration").getPsqlDefaultConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getPsqlDefaultConfiguration","getPsqlDefaultConfigurationOutput"], () => require("./getPsqlDefaultConfiguration"));

export { GetPsqlDefaultConfigurationsArgs, GetPsqlDefaultConfigurationsResult, GetPsqlDefaultConfigurationsOutputArgs } from "./getPsqlDefaultConfigurations";
export const getPsqlDefaultConfigurations: typeof import("./getPsqlDefaultConfigurations").getPsqlDefaultConfigurations = null as any;
export const getPsqlDefaultConfigurationsOutput: typeof import("./getPsqlDefaultConfigurations").getPsqlDefaultConfigurationsOutput = null as any;
utilities.lazyLoad(exports, ["getPsqlDefaultConfigurations","getPsqlDefaultConfigurationsOutput"], () => require("./getPsqlDefaultConfigurations"));

export { GetPsqlShapesArgs, GetPsqlShapesResult, GetPsqlShapesOutputArgs } from "./getPsqlShapes";
export const getPsqlShapes: typeof import("./getPsqlShapes").getPsqlShapes = null as any;
export const getPsqlShapesOutput: typeof import("./getPsqlShapes").getPsqlShapesOutput = null as any;
utilities.lazyLoad(exports, ["getPsqlShapes","getPsqlShapesOutput"], () => require("./getPsqlShapes"));

export { GetQueueQueueArgs, GetQueueQueueResult, GetQueueQueueOutputArgs } from "./getQueueQueue";
export const getQueueQueue: typeof import("./getQueueQueue").getQueueQueue = null as any;
export const getQueueQueueOutput: typeof import("./getQueueQueue").getQueueQueueOutput = null as any;
utilities.lazyLoad(exports, ["getQueueQueue","getQueueQueueOutput"], () => require("./getQueueQueue"));

export { GetQueueQueuesArgs, GetQueueQueuesResult, GetQueueQueuesOutputArgs } from "./getQueueQueues";
export const getQueueQueues: typeof import("./getQueueQueues").getQueueQueues = null as any;
export const getQueueQueuesOutput: typeof import("./getQueueQueues").getQueueQueuesOutput = null as any;
utilities.lazyLoad(exports, ["getQueueQueues","getQueueQueuesOutput"], () => require("./getQueueQueues"));

export { GetRecoveryProtectedDatabaseArgs, GetRecoveryProtectedDatabaseResult, GetRecoveryProtectedDatabaseOutputArgs } from "./getRecoveryProtectedDatabase";
export const getRecoveryProtectedDatabase: typeof import("./getRecoveryProtectedDatabase").getRecoveryProtectedDatabase = null as any;
export const getRecoveryProtectedDatabaseOutput: typeof import("./getRecoveryProtectedDatabase").getRecoveryProtectedDatabaseOutput = null as any;
utilities.lazyLoad(exports, ["getRecoveryProtectedDatabase","getRecoveryProtectedDatabaseOutput"], () => require("./getRecoveryProtectedDatabase"));

export { GetRecoveryProtectedDatabaseFetchConfigurationArgs, GetRecoveryProtectedDatabaseFetchConfigurationResult, GetRecoveryProtectedDatabaseFetchConfigurationOutputArgs } from "./getRecoveryProtectedDatabaseFetchConfiguration";
export const getRecoveryProtectedDatabaseFetchConfiguration: typeof import("./getRecoveryProtectedDatabaseFetchConfiguration").getRecoveryProtectedDatabaseFetchConfiguration = null as any;
export const getRecoveryProtectedDatabaseFetchConfigurationOutput: typeof import("./getRecoveryProtectedDatabaseFetchConfiguration").getRecoveryProtectedDatabaseFetchConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getRecoveryProtectedDatabaseFetchConfiguration","getRecoveryProtectedDatabaseFetchConfigurationOutput"], () => require("./getRecoveryProtectedDatabaseFetchConfiguration"));

export { GetRecoveryProtectedDatabasesArgs, GetRecoveryProtectedDatabasesResult, GetRecoveryProtectedDatabasesOutputArgs } from "./getRecoveryProtectedDatabases";
export const getRecoveryProtectedDatabases: typeof import("./getRecoveryProtectedDatabases").getRecoveryProtectedDatabases = null as any;
export const getRecoveryProtectedDatabasesOutput: typeof import("./getRecoveryProtectedDatabases").getRecoveryProtectedDatabasesOutput = null as any;
utilities.lazyLoad(exports, ["getRecoveryProtectedDatabases","getRecoveryProtectedDatabasesOutput"], () => require("./getRecoveryProtectedDatabases"));

export { GetRecoveryProtectionPoliciesArgs, GetRecoveryProtectionPoliciesResult, GetRecoveryProtectionPoliciesOutputArgs } from "./getRecoveryProtectionPolicies";
export const getRecoveryProtectionPolicies: typeof import("./getRecoveryProtectionPolicies").getRecoveryProtectionPolicies = null as any;
export const getRecoveryProtectionPoliciesOutput: typeof import("./getRecoveryProtectionPolicies").getRecoveryProtectionPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getRecoveryProtectionPolicies","getRecoveryProtectionPoliciesOutput"], () => require("./getRecoveryProtectionPolicies"));

export { GetRecoveryProtectionPolicyArgs, GetRecoveryProtectionPolicyResult, GetRecoveryProtectionPolicyOutputArgs } from "./getRecoveryProtectionPolicy";
export const getRecoveryProtectionPolicy: typeof import("./getRecoveryProtectionPolicy").getRecoveryProtectionPolicy = null as any;
export const getRecoveryProtectionPolicyOutput: typeof import("./getRecoveryProtectionPolicy").getRecoveryProtectionPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getRecoveryProtectionPolicy","getRecoveryProtectionPolicyOutput"], () => require("./getRecoveryProtectionPolicy"));

export { GetRecoveryRecoveryServiceSubnetArgs, GetRecoveryRecoveryServiceSubnetResult, GetRecoveryRecoveryServiceSubnetOutputArgs } from "./getRecoveryRecoveryServiceSubnet";
export const getRecoveryRecoveryServiceSubnet: typeof import("./getRecoveryRecoveryServiceSubnet").getRecoveryRecoveryServiceSubnet = null as any;
export const getRecoveryRecoveryServiceSubnetOutput: typeof import("./getRecoveryRecoveryServiceSubnet").getRecoveryRecoveryServiceSubnetOutput = null as any;
utilities.lazyLoad(exports, ["getRecoveryRecoveryServiceSubnet","getRecoveryRecoveryServiceSubnetOutput"], () => require("./getRecoveryRecoveryServiceSubnet"));

export { GetRecoveryRecoveryServiceSubnetsArgs, GetRecoveryRecoveryServiceSubnetsResult, GetRecoveryRecoveryServiceSubnetsOutputArgs } from "./getRecoveryRecoveryServiceSubnets";
export const getRecoveryRecoveryServiceSubnets: typeof import("./getRecoveryRecoveryServiceSubnets").getRecoveryRecoveryServiceSubnets = null as any;
export const getRecoveryRecoveryServiceSubnetsOutput: typeof import("./getRecoveryRecoveryServiceSubnets").getRecoveryRecoveryServiceSubnetsOutput = null as any;
utilities.lazyLoad(exports, ["getRecoveryRecoveryServiceSubnets","getRecoveryRecoveryServiceSubnetsOutput"], () => require("./getRecoveryRecoveryServiceSubnets"));

export { GetRedisRedisClusterArgs, GetRedisRedisClusterResult, GetRedisRedisClusterOutputArgs } from "./getRedisRedisCluster";
export const getRedisRedisCluster: typeof import("./getRedisRedisCluster").getRedisRedisCluster = null as any;
export const getRedisRedisClusterOutput: typeof import("./getRedisRedisCluster").getRedisRedisClusterOutput = null as any;
utilities.lazyLoad(exports, ["getRedisRedisCluster","getRedisRedisClusterOutput"], () => require("./getRedisRedisCluster"));

export { GetRedisRedisClusterNodesArgs, GetRedisRedisClusterNodesResult, GetRedisRedisClusterNodesOutputArgs } from "./getRedisRedisClusterNodes";
export const getRedisRedisClusterNodes: typeof import("./getRedisRedisClusterNodes").getRedisRedisClusterNodes = null as any;
export const getRedisRedisClusterNodesOutput: typeof import("./getRedisRedisClusterNodes").getRedisRedisClusterNodesOutput = null as any;
utilities.lazyLoad(exports, ["getRedisRedisClusterNodes","getRedisRedisClusterNodesOutput"], () => require("./getRedisRedisClusterNodes"));

export { GetRedisRedisClustersArgs, GetRedisRedisClustersResult, GetRedisRedisClustersOutputArgs } from "./getRedisRedisClusters";
export const getRedisRedisClusters: typeof import("./getRedisRedisClusters").getRedisRedisClusters = null as any;
export const getRedisRedisClustersOutput: typeof import("./getRedisRedisClusters").getRedisRedisClustersOutput = null as any;
utilities.lazyLoad(exports, ["getRedisRedisClusters","getRedisRedisClustersOutput"], () => require("./getRedisRedisClusters"));

export { GetResourceSchedulerScheduleArgs, GetResourceSchedulerScheduleResult, GetResourceSchedulerScheduleOutputArgs } from "./getResourceSchedulerSchedule";
export const getResourceSchedulerSchedule: typeof import("./getResourceSchedulerSchedule").getResourceSchedulerSchedule = null as any;
export const getResourceSchedulerScheduleOutput: typeof import("./getResourceSchedulerSchedule").getResourceSchedulerScheduleOutput = null as any;
utilities.lazyLoad(exports, ["getResourceSchedulerSchedule","getResourceSchedulerScheduleOutput"], () => require("./getResourceSchedulerSchedule"));

export { GetResourceSchedulerSchedulesArgs, GetResourceSchedulerSchedulesResult, GetResourceSchedulerSchedulesOutputArgs } from "./getResourceSchedulerSchedules";
export const getResourceSchedulerSchedules: typeof import("./getResourceSchedulerSchedules").getResourceSchedulerSchedules = null as any;
export const getResourceSchedulerSchedulesOutput: typeof import("./getResourceSchedulerSchedules").getResourceSchedulerSchedulesOutput = null as any;
utilities.lazyLoad(exports, ["getResourceSchedulerSchedules","getResourceSchedulerSchedulesOutput"], () => require("./getResourceSchedulerSchedules"));

export { GetResourcemanagerPrivateEndpointArgs, GetResourcemanagerPrivateEndpointResult, GetResourcemanagerPrivateEndpointOutputArgs } from "./getResourcemanagerPrivateEndpoint";
export const getResourcemanagerPrivateEndpoint: typeof import("./getResourcemanagerPrivateEndpoint").getResourcemanagerPrivateEndpoint = null as any;
export const getResourcemanagerPrivateEndpointOutput: typeof import("./getResourcemanagerPrivateEndpoint").getResourcemanagerPrivateEndpointOutput = null as any;
utilities.lazyLoad(exports, ["getResourcemanagerPrivateEndpoint","getResourcemanagerPrivateEndpointOutput"], () => require("./getResourcemanagerPrivateEndpoint"));

export { GetResourcemanagerPrivateEndpointReachableIpArgs, GetResourcemanagerPrivateEndpointReachableIpResult, GetResourcemanagerPrivateEndpointReachableIpOutputArgs } from "./getResourcemanagerPrivateEndpointReachableIp";
export const getResourcemanagerPrivateEndpointReachableIp: typeof import("./getResourcemanagerPrivateEndpointReachableIp").getResourcemanagerPrivateEndpointReachableIp = null as any;
export const getResourcemanagerPrivateEndpointReachableIpOutput: typeof import("./getResourcemanagerPrivateEndpointReachableIp").getResourcemanagerPrivateEndpointReachableIpOutput = null as any;
utilities.lazyLoad(exports, ["getResourcemanagerPrivateEndpointReachableIp","getResourcemanagerPrivateEndpointReachableIpOutput"], () => require("./getResourcemanagerPrivateEndpointReachableIp"));

export { GetResourcemanagerPrivateEndpointsArgs, GetResourcemanagerPrivateEndpointsResult, GetResourcemanagerPrivateEndpointsOutputArgs } from "./getResourcemanagerPrivateEndpoints";
export const getResourcemanagerPrivateEndpoints: typeof import("./getResourcemanagerPrivateEndpoints").getResourcemanagerPrivateEndpoints = null as any;
export const getResourcemanagerPrivateEndpointsOutput: typeof import("./getResourcemanagerPrivateEndpoints").getResourcemanagerPrivateEndpointsOutput = null as any;
utilities.lazyLoad(exports, ["getResourcemanagerPrivateEndpoints","getResourcemanagerPrivateEndpointsOutput"], () => require("./getResourcemanagerPrivateEndpoints"));

export { GetResourcemanagerStackArgs, GetResourcemanagerStackResult, GetResourcemanagerStackOutputArgs } from "./getResourcemanagerStack";
export const getResourcemanagerStack: typeof import("./getResourcemanagerStack").getResourcemanagerStack = null as any;
export const getResourcemanagerStackOutput: typeof import("./getResourcemanagerStack").getResourcemanagerStackOutput = null as any;
utilities.lazyLoad(exports, ["getResourcemanagerStack","getResourcemanagerStackOutput"], () => require("./getResourcemanagerStack"));

export { GetResourcemanagerStackTfStateArgs, GetResourcemanagerStackTfStateResult, GetResourcemanagerStackTfStateOutputArgs } from "./getResourcemanagerStackTfState";
export const getResourcemanagerStackTfState: typeof import("./getResourcemanagerStackTfState").getResourcemanagerStackTfState = null as any;
export const getResourcemanagerStackTfStateOutput: typeof import("./getResourcemanagerStackTfState").getResourcemanagerStackTfStateOutput = null as any;
utilities.lazyLoad(exports, ["getResourcemanagerStackTfState","getResourcemanagerStackTfStateOutput"], () => require("./getResourcemanagerStackTfState"));

export { GetResourcemanagerStacksArgs, GetResourcemanagerStacksResult, GetResourcemanagerStacksOutputArgs } from "./getResourcemanagerStacks";
export const getResourcemanagerStacks: typeof import("./getResourcemanagerStacks").getResourcemanagerStacks = null as any;
export const getResourcemanagerStacksOutput: typeof import("./getResourcemanagerStacks").getResourcemanagerStacksOutput = null as any;
utilities.lazyLoad(exports, ["getResourcemanagerStacks","getResourcemanagerStacksOutput"], () => require("./getResourcemanagerStacks"));

export { GetSchConnectorPluginArgs, GetSchConnectorPluginResult, GetSchConnectorPluginOutputArgs } from "./getSchConnectorPlugin";
export const getSchConnectorPlugin: typeof import("./getSchConnectorPlugin").getSchConnectorPlugin = null as any;
export const getSchConnectorPluginOutput: typeof import("./getSchConnectorPlugin").getSchConnectorPluginOutput = null as any;
utilities.lazyLoad(exports, ["getSchConnectorPlugin","getSchConnectorPluginOutput"], () => require("./getSchConnectorPlugin"));

export { GetSchConnectorPluginsArgs, GetSchConnectorPluginsResult, GetSchConnectorPluginsOutputArgs } from "./getSchConnectorPlugins";
export const getSchConnectorPlugins: typeof import("./getSchConnectorPlugins").getSchConnectorPlugins = null as any;
export const getSchConnectorPluginsOutput: typeof import("./getSchConnectorPlugins").getSchConnectorPluginsOutput = null as any;
utilities.lazyLoad(exports, ["getSchConnectorPlugins","getSchConnectorPluginsOutput"], () => require("./getSchConnectorPlugins"));

export { GetSchServiceConnectorArgs, GetSchServiceConnectorResult, GetSchServiceConnectorOutputArgs } from "./getSchServiceConnector";
export const getSchServiceConnector: typeof import("./getSchServiceConnector").getSchServiceConnector = null as any;
export const getSchServiceConnectorOutput: typeof import("./getSchServiceConnector").getSchServiceConnectorOutput = null as any;
utilities.lazyLoad(exports, ["getSchServiceConnector","getSchServiceConnectorOutput"], () => require("./getSchServiceConnector"));

export { GetSchServiceConnectorsArgs, GetSchServiceConnectorsResult, GetSchServiceConnectorsOutputArgs } from "./getSchServiceConnectors";
export const getSchServiceConnectors: typeof import("./getSchServiceConnectors").getSchServiceConnectors = null as any;
export const getSchServiceConnectorsOutput: typeof import("./getSchServiceConnectors").getSchServiceConnectorsOutput = null as any;
utilities.lazyLoad(exports, ["getSchServiceConnectors","getSchServiceConnectorsOutput"], () => require("./getSchServiceConnectors"));

export { GetSecretsSecretbundleArgs, GetSecretsSecretbundleResult, GetSecretsSecretbundleOutputArgs } from "./getSecretsSecretbundle";
export const getSecretsSecretbundle: typeof import("./getSecretsSecretbundle").getSecretsSecretbundle = null as any;
export const getSecretsSecretbundleOutput: typeof import("./getSecretsSecretbundle").getSecretsSecretbundleOutput = null as any;
utilities.lazyLoad(exports, ["getSecretsSecretbundle","getSecretsSecretbundleOutput"], () => require("./getSecretsSecretbundle"));

export { GetSecretsSecretbundleVersionsArgs, GetSecretsSecretbundleVersionsResult, GetSecretsSecretbundleVersionsOutputArgs } from "./getSecretsSecretbundleVersions";
export const getSecretsSecretbundleVersions: typeof import("./getSecretsSecretbundleVersions").getSecretsSecretbundleVersions = null as any;
export const getSecretsSecretbundleVersionsOutput: typeof import("./getSecretsSecretbundleVersions").getSecretsSecretbundleVersionsOutput = null as any;
utilities.lazyLoad(exports, ["getSecretsSecretbundleVersions","getSecretsSecretbundleVersionsOutput"], () => require("./getSecretsSecretbundleVersions"));

export { GetServiceCatalogPrivateApplicationArgs, GetServiceCatalogPrivateApplicationResult, GetServiceCatalogPrivateApplicationOutputArgs } from "./getServiceCatalogPrivateApplication";
export const getServiceCatalogPrivateApplication: typeof import("./getServiceCatalogPrivateApplication").getServiceCatalogPrivateApplication = null as any;
export const getServiceCatalogPrivateApplicationOutput: typeof import("./getServiceCatalogPrivateApplication").getServiceCatalogPrivateApplicationOutput = null as any;
utilities.lazyLoad(exports, ["getServiceCatalogPrivateApplication","getServiceCatalogPrivateApplicationOutput"], () => require("./getServiceCatalogPrivateApplication"));

export { GetServiceCatalogPrivateApplicationPackageArgs, GetServiceCatalogPrivateApplicationPackageResult, GetServiceCatalogPrivateApplicationPackageOutputArgs } from "./getServiceCatalogPrivateApplicationPackage";
export const getServiceCatalogPrivateApplicationPackage: typeof import("./getServiceCatalogPrivateApplicationPackage").getServiceCatalogPrivateApplicationPackage = null as any;
export const getServiceCatalogPrivateApplicationPackageOutput: typeof import("./getServiceCatalogPrivateApplicationPackage").getServiceCatalogPrivateApplicationPackageOutput = null as any;
utilities.lazyLoad(exports, ["getServiceCatalogPrivateApplicationPackage","getServiceCatalogPrivateApplicationPackageOutput"], () => require("./getServiceCatalogPrivateApplicationPackage"));

export { GetServiceCatalogPrivateApplicationPackagesArgs, GetServiceCatalogPrivateApplicationPackagesResult, GetServiceCatalogPrivateApplicationPackagesOutputArgs } from "./getServiceCatalogPrivateApplicationPackages";
export const getServiceCatalogPrivateApplicationPackages: typeof import("./getServiceCatalogPrivateApplicationPackages").getServiceCatalogPrivateApplicationPackages = null as any;
export const getServiceCatalogPrivateApplicationPackagesOutput: typeof import("./getServiceCatalogPrivateApplicationPackages").getServiceCatalogPrivateApplicationPackagesOutput = null as any;
utilities.lazyLoad(exports, ["getServiceCatalogPrivateApplicationPackages","getServiceCatalogPrivateApplicationPackagesOutput"], () => require("./getServiceCatalogPrivateApplicationPackages"));

export { GetServiceCatalogPrivateApplicationsArgs, GetServiceCatalogPrivateApplicationsResult, GetServiceCatalogPrivateApplicationsOutputArgs } from "./getServiceCatalogPrivateApplications";
export const getServiceCatalogPrivateApplications: typeof import("./getServiceCatalogPrivateApplications").getServiceCatalogPrivateApplications = null as any;
export const getServiceCatalogPrivateApplicationsOutput: typeof import("./getServiceCatalogPrivateApplications").getServiceCatalogPrivateApplicationsOutput = null as any;
utilities.lazyLoad(exports, ["getServiceCatalogPrivateApplications","getServiceCatalogPrivateApplicationsOutput"], () => require("./getServiceCatalogPrivateApplications"));

export { GetServiceCatalogServiceCatalogArgs, GetServiceCatalogServiceCatalogResult, GetServiceCatalogServiceCatalogOutputArgs } from "./getServiceCatalogServiceCatalog";
export const getServiceCatalogServiceCatalog: typeof import("./getServiceCatalogServiceCatalog").getServiceCatalogServiceCatalog = null as any;
export const getServiceCatalogServiceCatalogOutput: typeof import("./getServiceCatalogServiceCatalog").getServiceCatalogServiceCatalogOutput = null as any;
utilities.lazyLoad(exports, ["getServiceCatalogServiceCatalog","getServiceCatalogServiceCatalogOutput"], () => require("./getServiceCatalogServiceCatalog"));

export { GetServiceCatalogServiceCatalogAssociationArgs, GetServiceCatalogServiceCatalogAssociationResult, GetServiceCatalogServiceCatalogAssociationOutputArgs } from "./getServiceCatalogServiceCatalogAssociation";
export const getServiceCatalogServiceCatalogAssociation: typeof import("./getServiceCatalogServiceCatalogAssociation").getServiceCatalogServiceCatalogAssociation = null as any;
export const getServiceCatalogServiceCatalogAssociationOutput: typeof import("./getServiceCatalogServiceCatalogAssociation").getServiceCatalogServiceCatalogAssociationOutput = null as any;
utilities.lazyLoad(exports, ["getServiceCatalogServiceCatalogAssociation","getServiceCatalogServiceCatalogAssociationOutput"], () => require("./getServiceCatalogServiceCatalogAssociation"));

export { GetServiceCatalogServiceCatalogAssociationsArgs, GetServiceCatalogServiceCatalogAssociationsResult, GetServiceCatalogServiceCatalogAssociationsOutputArgs } from "./getServiceCatalogServiceCatalogAssociations";
export const getServiceCatalogServiceCatalogAssociations: typeof import("./getServiceCatalogServiceCatalogAssociations").getServiceCatalogServiceCatalogAssociations = null as any;
export const getServiceCatalogServiceCatalogAssociationsOutput: typeof import("./getServiceCatalogServiceCatalogAssociations").getServiceCatalogServiceCatalogAssociationsOutput = null as any;
utilities.lazyLoad(exports, ["getServiceCatalogServiceCatalogAssociations","getServiceCatalogServiceCatalogAssociationsOutput"], () => require("./getServiceCatalogServiceCatalogAssociations"));

export { GetServiceCatalogServiceCatalogsArgs, GetServiceCatalogServiceCatalogsResult, GetServiceCatalogServiceCatalogsOutputArgs } from "./getServiceCatalogServiceCatalogs";
export const getServiceCatalogServiceCatalogs: typeof import("./getServiceCatalogServiceCatalogs").getServiceCatalogServiceCatalogs = null as any;
export const getServiceCatalogServiceCatalogsOutput: typeof import("./getServiceCatalogServiceCatalogs").getServiceCatalogServiceCatalogsOutput = null as any;
utilities.lazyLoad(exports, ["getServiceCatalogServiceCatalogs","getServiceCatalogServiceCatalogsOutput"], () => require("./getServiceCatalogServiceCatalogs"));

export { GetServiceManagerProxyServiceEnvironmentArgs, GetServiceManagerProxyServiceEnvironmentResult, GetServiceManagerProxyServiceEnvironmentOutputArgs } from "./getServiceManagerProxyServiceEnvironment";
export const getServiceManagerProxyServiceEnvironment: typeof import("./getServiceManagerProxyServiceEnvironment").getServiceManagerProxyServiceEnvironment = null as any;
export const getServiceManagerProxyServiceEnvironmentOutput: typeof import("./getServiceManagerProxyServiceEnvironment").getServiceManagerProxyServiceEnvironmentOutput = null as any;
utilities.lazyLoad(exports, ["getServiceManagerProxyServiceEnvironment","getServiceManagerProxyServiceEnvironmentOutput"], () => require("./getServiceManagerProxyServiceEnvironment"));

export { GetServiceManagerProxyServiceEnvironmentsArgs, GetServiceManagerProxyServiceEnvironmentsResult, GetServiceManagerProxyServiceEnvironmentsOutputArgs } from "./getServiceManagerProxyServiceEnvironments";
export const getServiceManagerProxyServiceEnvironments: typeof import("./getServiceManagerProxyServiceEnvironments").getServiceManagerProxyServiceEnvironments = null as any;
export const getServiceManagerProxyServiceEnvironmentsOutput: typeof import("./getServiceManagerProxyServiceEnvironments").getServiceManagerProxyServiceEnvironmentsOutput = null as any;
utilities.lazyLoad(exports, ["getServiceManagerProxyServiceEnvironments","getServiceManagerProxyServiceEnvironmentsOutput"], () => require("./getServiceManagerProxyServiceEnvironments"));

export { GetServiceMeshAccessPoliciesArgs, GetServiceMeshAccessPoliciesResult, GetServiceMeshAccessPoliciesOutputArgs } from "./getServiceMeshAccessPolicies";
export const getServiceMeshAccessPolicies: typeof import("./getServiceMeshAccessPolicies").getServiceMeshAccessPolicies = null as any;
export const getServiceMeshAccessPoliciesOutput: typeof import("./getServiceMeshAccessPolicies").getServiceMeshAccessPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getServiceMeshAccessPolicies","getServiceMeshAccessPoliciesOutput"], () => require("./getServiceMeshAccessPolicies"));

export { GetServiceMeshAccessPolicyArgs, GetServiceMeshAccessPolicyResult, GetServiceMeshAccessPolicyOutputArgs } from "./getServiceMeshAccessPolicy";
export const getServiceMeshAccessPolicy: typeof import("./getServiceMeshAccessPolicy").getServiceMeshAccessPolicy = null as any;
export const getServiceMeshAccessPolicyOutput: typeof import("./getServiceMeshAccessPolicy").getServiceMeshAccessPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getServiceMeshAccessPolicy","getServiceMeshAccessPolicyOutput"], () => require("./getServiceMeshAccessPolicy"));

export { GetServiceMeshIngressGatewayArgs, GetServiceMeshIngressGatewayResult, GetServiceMeshIngressGatewayOutputArgs } from "./getServiceMeshIngressGateway";
export const getServiceMeshIngressGateway: typeof import("./getServiceMeshIngressGateway").getServiceMeshIngressGateway = null as any;
export const getServiceMeshIngressGatewayOutput: typeof import("./getServiceMeshIngressGateway").getServiceMeshIngressGatewayOutput = null as any;
utilities.lazyLoad(exports, ["getServiceMeshIngressGateway","getServiceMeshIngressGatewayOutput"], () => require("./getServiceMeshIngressGateway"));

export { GetServiceMeshIngressGatewayRouteTableArgs, GetServiceMeshIngressGatewayRouteTableResult, GetServiceMeshIngressGatewayRouteTableOutputArgs } from "./getServiceMeshIngressGatewayRouteTable";
export const getServiceMeshIngressGatewayRouteTable: typeof import("./getServiceMeshIngressGatewayRouteTable").getServiceMeshIngressGatewayRouteTable = null as any;
export const getServiceMeshIngressGatewayRouteTableOutput: typeof import("./getServiceMeshIngressGatewayRouteTable").getServiceMeshIngressGatewayRouteTableOutput = null as any;
utilities.lazyLoad(exports, ["getServiceMeshIngressGatewayRouteTable","getServiceMeshIngressGatewayRouteTableOutput"], () => require("./getServiceMeshIngressGatewayRouteTable"));

export { GetServiceMeshIngressGatewayRouteTablesArgs, GetServiceMeshIngressGatewayRouteTablesResult, GetServiceMeshIngressGatewayRouteTablesOutputArgs } from "./getServiceMeshIngressGatewayRouteTables";
export const getServiceMeshIngressGatewayRouteTables: typeof import("./getServiceMeshIngressGatewayRouteTables").getServiceMeshIngressGatewayRouteTables = null as any;
export const getServiceMeshIngressGatewayRouteTablesOutput: typeof import("./getServiceMeshIngressGatewayRouteTables").getServiceMeshIngressGatewayRouteTablesOutput = null as any;
utilities.lazyLoad(exports, ["getServiceMeshIngressGatewayRouteTables","getServiceMeshIngressGatewayRouteTablesOutput"], () => require("./getServiceMeshIngressGatewayRouteTables"));

export { GetServiceMeshIngressGatewaysArgs, GetServiceMeshIngressGatewaysResult, GetServiceMeshIngressGatewaysOutputArgs } from "./getServiceMeshIngressGateways";
export const getServiceMeshIngressGateways: typeof import("./getServiceMeshIngressGateways").getServiceMeshIngressGateways = null as any;
export const getServiceMeshIngressGatewaysOutput: typeof import("./getServiceMeshIngressGateways").getServiceMeshIngressGatewaysOutput = null as any;
utilities.lazyLoad(exports, ["getServiceMeshIngressGateways","getServiceMeshIngressGatewaysOutput"], () => require("./getServiceMeshIngressGateways"));

export { GetServiceMeshMeshArgs, GetServiceMeshMeshResult, GetServiceMeshMeshOutputArgs } from "./getServiceMeshMesh";
export const getServiceMeshMesh: typeof import("./getServiceMeshMesh").getServiceMeshMesh = null as any;
export const getServiceMeshMeshOutput: typeof import("./getServiceMeshMesh").getServiceMeshMeshOutput = null as any;
utilities.lazyLoad(exports, ["getServiceMeshMesh","getServiceMeshMeshOutput"], () => require("./getServiceMeshMesh"));

export { GetServiceMeshMeshesArgs, GetServiceMeshMeshesResult, GetServiceMeshMeshesOutputArgs } from "./getServiceMeshMeshes";
export const getServiceMeshMeshes: typeof import("./getServiceMeshMeshes").getServiceMeshMeshes = null as any;
export const getServiceMeshMeshesOutput: typeof import("./getServiceMeshMeshes").getServiceMeshMeshesOutput = null as any;
utilities.lazyLoad(exports, ["getServiceMeshMeshes","getServiceMeshMeshesOutput"], () => require("./getServiceMeshMeshes"));

export { GetServiceMeshProxyDetailArgs, GetServiceMeshProxyDetailResult, GetServiceMeshProxyDetailOutputArgs } from "./getServiceMeshProxyDetail";
export const getServiceMeshProxyDetail: typeof import("./getServiceMeshProxyDetail").getServiceMeshProxyDetail = null as any;
export const getServiceMeshProxyDetailOutput: typeof import("./getServiceMeshProxyDetail").getServiceMeshProxyDetailOutput = null as any;
utilities.lazyLoad(exports, ["getServiceMeshProxyDetail","getServiceMeshProxyDetailOutput"], () => require("./getServiceMeshProxyDetail"));

export { GetServiceMeshVirtualDeploymentArgs, GetServiceMeshVirtualDeploymentResult, GetServiceMeshVirtualDeploymentOutputArgs } from "./getServiceMeshVirtualDeployment";
export const getServiceMeshVirtualDeployment: typeof import("./getServiceMeshVirtualDeployment").getServiceMeshVirtualDeployment = null as any;
export const getServiceMeshVirtualDeploymentOutput: typeof import("./getServiceMeshVirtualDeployment").getServiceMeshVirtualDeploymentOutput = null as any;
utilities.lazyLoad(exports, ["getServiceMeshVirtualDeployment","getServiceMeshVirtualDeploymentOutput"], () => require("./getServiceMeshVirtualDeployment"));

export { GetServiceMeshVirtualDeploymentsArgs, GetServiceMeshVirtualDeploymentsResult, GetServiceMeshVirtualDeploymentsOutputArgs } from "./getServiceMeshVirtualDeployments";
export const getServiceMeshVirtualDeployments: typeof import("./getServiceMeshVirtualDeployments").getServiceMeshVirtualDeployments = null as any;
export const getServiceMeshVirtualDeploymentsOutput: typeof import("./getServiceMeshVirtualDeployments").getServiceMeshVirtualDeploymentsOutput = null as any;
utilities.lazyLoad(exports, ["getServiceMeshVirtualDeployments","getServiceMeshVirtualDeploymentsOutput"], () => require("./getServiceMeshVirtualDeployments"));

export { GetServiceMeshVirtualServiceArgs, GetServiceMeshVirtualServiceResult, GetServiceMeshVirtualServiceOutputArgs } from "./getServiceMeshVirtualService";
export const getServiceMeshVirtualService: typeof import("./getServiceMeshVirtualService").getServiceMeshVirtualService = null as any;
export const getServiceMeshVirtualServiceOutput: typeof import("./getServiceMeshVirtualService").getServiceMeshVirtualServiceOutput = null as any;
utilities.lazyLoad(exports, ["getServiceMeshVirtualService","getServiceMeshVirtualServiceOutput"], () => require("./getServiceMeshVirtualService"));

export { GetServiceMeshVirtualServiceRouteTableArgs, GetServiceMeshVirtualServiceRouteTableResult, GetServiceMeshVirtualServiceRouteTableOutputArgs } from "./getServiceMeshVirtualServiceRouteTable";
export const getServiceMeshVirtualServiceRouteTable: typeof import("./getServiceMeshVirtualServiceRouteTable").getServiceMeshVirtualServiceRouteTable = null as any;
export const getServiceMeshVirtualServiceRouteTableOutput: typeof import("./getServiceMeshVirtualServiceRouteTable").getServiceMeshVirtualServiceRouteTableOutput = null as any;
utilities.lazyLoad(exports, ["getServiceMeshVirtualServiceRouteTable","getServiceMeshVirtualServiceRouteTableOutput"], () => require("./getServiceMeshVirtualServiceRouteTable"));

export { GetServiceMeshVirtualServiceRouteTablesArgs, GetServiceMeshVirtualServiceRouteTablesResult, GetServiceMeshVirtualServiceRouteTablesOutputArgs } from "./getServiceMeshVirtualServiceRouteTables";
export const getServiceMeshVirtualServiceRouteTables: typeof import("./getServiceMeshVirtualServiceRouteTables").getServiceMeshVirtualServiceRouteTables = null as any;
export const getServiceMeshVirtualServiceRouteTablesOutput: typeof import("./getServiceMeshVirtualServiceRouteTables").getServiceMeshVirtualServiceRouteTablesOutput = null as any;
utilities.lazyLoad(exports, ["getServiceMeshVirtualServiceRouteTables","getServiceMeshVirtualServiceRouteTablesOutput"], () => require("./getServiceMeshVirtualServiceRouteTables"));

export { GetServiceMeshVirtualServicesArgs, GetServiceMeshVirtualServicesResult, GetServiceMeshVirtualServicesOutputArgs } from "./getServiceMeshVirtualServices";
export const getServiceMeshVirtualServices: typeof import("./getServiceMeshVirtualServices").getServiceMeshVirtualServices = null as any;
export const getServiceMeshVirtualServicesOutput: typeof import("./getServiceMeshVirtualServices").getServiceMeshVirtualServicesOutput = null as any;
utilities.lazyLoad(exports, ["getServiceMeshVirtualServices","getServiceMeshVirtualServicesOutput"], () => require("./getServiceMeshVirtualServices"));

export { GetStackMonitoringBaselineableMetricArgs, GetStackMonitoringBaselineableMetricResult, GetStackMonitoringBaselineableMetricOutputArgs } from "./getStackMonitoringBaselineableMetric";
export const getStackMonitoringBaselineableMetric: typeof import("./getStackMonitoringBaselineableMetric").getStackMonitoringBaselineableMetric = null as any;
export const getStackMonitoringBaselineableMetricOutput: typeof import("./getStackMonitoringBaselineableMetric").getStackMonitoringBaselineableMetricOutput = null as any;
utilities.lazyLoad(exports, ["getStackMonitoringBaselineableMetric","getStackMonitoringBaselineableMetricOutput"], () => require("./getStackMonitoringBaselineableMetric"));

export { GetStackMonitoringBaselineableMetricsArgs, GetStackMonitoringBaselineableMetricsResult, GetStackMonitoringBaselineableMetricsOutputArgs } from "./getStackMonitoringBaselineableMetrics";
export const getStackMonitoringBaselineableMetrics: typeof import("./getStackMonitoringBaselineableMetrics").getStackMonitoringBaselineableMetrics = null as any;
export const getStackMonitoringBaselineableMetricsOutput: typeof import("./getStackMonitoringBaselineableMetrics").getStackMonitoringBaselineableMetricsOutput = null as any;
utilities.lazyLoad(exports, ["getStackMonitoringBaselineableMetrics","getStackMonitoringBaselineableMetricsOutput"], () => require("./getStackMonitoringBaselineableMetrics"));

export { GetStackMonitoringBaselineableMetricsEvaluateArgs, GetStackMonitoringBaselineableMetricsEvaluateResult, GetStackMonitoringBaselineableMetricsEvaluateOutputArgs } from "./getStackMonitoringBaselineableMetricsEvaluate";
export const getStackMonitoringBaselineableMetricsEvaluate: typeof import("./getStackMonitoringBaselineableMetricsEvaluate").getStackMonitoringBaselineableMetricsEvaluate = null as any;
export const getStackMonitoringBaselineableMetricsEvaluateOutput: typeof import("./getStackMonitoringBaselineableMetricsEvaluate").getStackMonitoringBaselineableMetricsEvaluateOutput = null as any;
utilities.lazyLoad(exports, ["getStackMonitoringBaselineableMetricsEvaluate","getStackMonitoringBaselineableMetricsEvaluateOutput"], () => require("./getStackMonitoringBaselineableMetricsEvaluate"));

export { GetStackMonitoringConfigArgs, GetStackMonitoringConfigResult, GetStackMonitoringConfigOutputArgs } from "./getStackMonitoringConfig";
export const getStackMonitoringConfig: typeof import("./getStackMonitoringConfig").getStackMonitoringConfig = null as any;
export const getStackMonitoringConfigOutput: typeof import("./getStackMonitoringConfig").getStackMonitoringConfigOutput = null as any;
utilities.lazyLoad(exports, ["getStackMonitoringConfig","getStackMonitoringConfigOutput"], () => require("./getStackMonitoringConfig"));

export { GetStackMonitoringConfigsArgs, GetStackMonitoringConfigsResult, GetStackMonitoringConfigsOutputArgs } from "./getStackMonitoringConfigs";
export const getStackMonitoringConfigs: typeof import("./getStackMonitoringConfigs").getStackMonitoringConfigs = null as any;
export const getStackMonitoringConfigsOutput: typeof import("./getStackMonitoringConfigs").getStackMonitoringConfigsOutput = null as any;
utilities.lazyLoad(exports, ["getStackMonitoringConfigs","getStackMonitoringConfigsOutput"], () => require("./getStackMonitoringConfigs"));

export { GetStackMonitoringDiscoveryJobArgs, GetStackMonitoringDiscoveryJobResult, GetStackMonitoringDiscoveryJobOutputArgs } from "./getStackMonitoringDiscoveryJob";
export const getStackMonitoringDiscoveryJob: typeof import("./getStackMonitoringDiscoveryJob").getStackMonitoringDiscoveryJob = null as any;
export const getStackMonitoringDiscoveryJobOutput: typeof import("./getStackMonitoringDiscoveryJob").getStackMonitoringDiscoveryJobOutput = null as any;
utilities.lazyLoad(exports, ["getStackMonitoringDiscoveryJob","getStackMonitoringDiscoveryJobOutput"], () => require("./getStackMonitoringDiscoveryJob"));

export { GetStackMonitoringDiscoveryJobLogsArgs, GetStackMonitoringDiscoveryJobLogsResult, GetStackMonitoringDiscoveryJobLogsOutputArgs } from "./getStackMonitoringDiscoveryJobLogs";
export const getStackMonitoringDiscoveryJobLogs: typeof import("./getStackMonitoringDiscoveryJobLogs").getStackMonitoringDiscoveryJobLogs = null as any;
export const getStackMonitoringDiscoveryJobLogsOutput: typeof import("./getStackMonitoringDiscoveryJobLogs").getStackMonitoringDiscoveryJobLogsOutput = null as any;
utilities.lazyLoad(exports, ["getStackMonitoringDiscoveryJobLogs","getStackMonitoringDiscoveryJobLogsOutput"], () => require("./getStackMonitoringDiscoveryJobLogs"));

export { GetStackMonitoringDiscoveryJobsArgs, GetStackMonitoringDiscoveryJobsResult, GetStackMonitoringDiscoveryJobsOutputArgs } from "./getStackMonitoringDiscoveryJobs";
export const getStackMonitoringDiscoveryJobs: typeof import("./getStackMonitoringDiscoveryJobs").getStackMonitoringDiscoveryJobs = null as any;
export const getStackMonitoringDiscoveryJobsOutput: typeof import("./getStackMonitoringDiscoveryJobs").getStackMonitoringDiscoveryJobsOutput = null as any;
utilities.lazyLoad(exports, ["getStackMonitoringDiscoveryJobs","getStackMonitoringDiscoveryJobsOutput"], () => require("./getStackMonitoringDiscoveryJobs"));

export { GetStackMonitoringMetricExtensionArgs, GetStackMonitoringMetricExtensionResult, GetStackMonitoringMetricExtensionOutputArgs } from "./getStackMonitoringMetricExtension";
export const getStackMonitoringMetricExtension: typeof import("./getStackMonitoringMetricExtension").getStackMonitoringMetricExtension = null as any;
export const getStackMonitoringMetricExtensionOutput: typeof import("./getStackMonitoringMetricExtension").getStackMonitoringMetricExtensionOutput = null as any;
utilities.lazyLoad(exports, ["getStackMonitoringMetricExtension","getStackMonitoringMetricExtensionOutput"], () => require("./getStackMonitoringMetricExtension"));

export { GetStackMonitoringMetricExtensionsArgs, GetStackMonitoringMetricExtensionsResult, GetStackMonitoringMetricExtensionsOutputArgs } from "./getStackMonitoringMetricExtensions";
export const getStackMonitoringMetricExtensions: typeof import("./getStackMonitoringMetricExtensions").getStackMonitoringMetricExtensions = null as any;
export const getStackMonitoringMetricExtensionsOutput: typeof import("./getStackMonitoringMetricExtensions").getStackMonitoringMetricExtensionsOutput = null as any;
utilities.lazyLoad(exports, ["getStackMonitoringMetricExtensions","getStackMonitoringMetricExtensionsOutput"], () => require("./getStackMonitoringMetricExtensions"));

export { GetStackMonitoringMonitoredResourceArgs, GetStackMonitoringMonitoredResourceResult, GetStackMonitoringMonitoredResourceOutputArgs } from "./getStackMonitoringMonitoredResource";
export const getStackMonitoringMonitoredResource: typeof import("./getStackMonitoringMonitoredResource").getStackMonitoringMonitoredResource = null as any;
export const getStackMonitoringMonitoredResourceOutput: typeof import("./getStackMonitoringMonitoredResource").getStackMonitoringMonitoredResourceOutput = null as any;
utilities.lazyLoad(exports, ["getStackMonitoringMonitoredResource","getStackMonitoringMonitoredResourceOutput"], () => require("./getStackMonitoringMonitoredResource"));

export { GetStackMonitoringMonitoredResourceTaskArgs, GetStackMonitoringMonitoredResourceTaskResult, GetStackMonitoringMonitoredResourceTaskOutputArgs } from "./getStackMonitoringMonitoredResourceTask";
export const getStackMonitoringMonitoredResourceTask: typeof import("./getStackMonitoringMonitoredResourceTask").getStackMonitoringMonitoredResourceTask = null as any;
export const getStackMonitoringMonitoredResourceTaskOutput: typeof import("./getStackMonitoringMonitoredResourceTask").getStackMonitoringMonitoredResourceTaskOutput = null as any;
utilities.lazyLoad(exports, ["getStackMonitoringMonitoredResourceTask","getStackMonitoringMonitoredResourceTaskOutput"], () => require("./getStackMonitoringMonitoredResourceTask"));

export { GetStackMonitoringMonitoredResourceTasksArgs, GetStackMonitoringMonitoredResourceTasksResult, GetStackMonitoringMonitoredResourceTasksOutputArgs } from "./getStackMonitoringMonitoredResourceTasks";
export const getStackMonitoringMonitoredResourceTasks: typeof import("./getStackMonitoringMonitoredResourceTasks").getStackMonitoringMonitoredResourceTasks = null as any;
export const getStackMonitoringMonitoredResourceTasksOutput: typeof import("./getStackMonitoringMonitoredResourceTasks").getStackMonitoringMonitoredResourceTasksOutput = null as any;
utilities.lazyLoad(exports, ["getStackMonitoringMonitoredResourceTasks","getStackMonitoringMonitoredResourceTasksOutput"], () => require("./getStackMonitoringMonitoredResourceTasks"));

export { GetStackMonitoringMonitoredResourceTypeArgs, GetStackMonitoringMonitoredResourceTypeResult, GetStackMonitoringMonitoredResourceTypeOutputArgs } from "./getStackMonitoringMonitoredResourceType";
export const getStackMonitoringMonitoredResourceType: typeof import("./getStackMonitoringMonitoredResourceType").getStackMonitoringMonitoredResourceType = null as any;
export const getStackMonitoringMonitoredResourceTypeOutput: typeof import("./getStackMonitoringMonitoredResourceType").getStackMonitoringMonitoredResourceTypeOutput = null as any;
utilities.lazyLoad(exports, ["getStackMonitoringMonitoredResourceType","getStackMonitoringMonitoredResourceTypeOutput"], () => require("./getStackMonitoringMonitoredResourceType"));

export { GetStackMonitoringMonitoredResourceTypesArgs, GetStackMonitoringMonitoredResourceTypesResult, GetStackMonitoringMonitoredResourceTypesOutputArgs } from "./getStackMonitoringMonitoredResourceTypes";
export const getStackMonitoringMonitoredResourceTypes: typeof import("./getStackMonitoringMonitoredResourceTypes").getStackMonitoringMonitoredResourceTypes = null as any;
export const getStackMonitoringMonitoredResourceTypesOutput: typeof import("./getStackMonitoringMonitoredResourceTypes").getStackMonitoringMonitoredResourceTypesOutput = null as any;
utilities.lazyLoad(exports, ["getStackMonitoringMonitoredResourceTypes","getStackMonitoringMonitoredResourceTypesOutput"], () => require("./getStackMonitoringMonitoredResourceTypes"));

export { GetStackMonitoringMonitoredResourcesArgs, GetStackMonitoringMonitoredResourcesResult, GetStackMonitoringMonitoredResourcesOutputArgs } from "./getStackMonitoringMonitoredResources";
export const getStackMonitoringMonitoredResources: typeof import("./getStackMonitoringMonitoredResources").getStackMonitoringMonitoredResources = null as any;
export const getStackMonitoringMonitoredResourcesOutput: typeof import("./getStackMonitoringMonitoredResources").getStackMonitoringMonitoredResourcesOutput = null as any;
utilities.lazyLoad(exports, ["getStackMonitoringMonitoredResources","getStackMonitoringMonitoredResourcesOutput"], () => require("./getStackMonitoringMonitoredResources"));

export { GetStackMonitoringProcessSetArgs, GetStackMonitoringProcessSetResult, GetStackMonitoringProcessSetOutputArgs } from "./getStackMonitoringProcessSet";
export const getStackMonitoringProcessSet: typeof import("./getStackMonitoringProcessSet").getStackMonitoringProcessSet = null as any;
export const getStackMonitoringProcessSetOutput: typeof import("./getStackMonitoringProcessSet").getStackMonitoringProcessSetOutput = null as any;
utilities.lazyLoad(exports, ["getStackMonitoringProcessSet","getStackMonitoringProcessSetOutput"], () => require("./getStackMonitoringProcessSet"));

export { GetStackMonitoringProcessSetsArgs, GetStackMonitoringProcessSetsResult, GetStackMonitoringProcessSetsOutputArgs } from "./getStackMonitoringProcessSets";
export const getStackMonitoringProcessSets: typeof import("./getStackMonitoringProcessSets").getStackMonitoringProcessSets = null as any;
export const getStackMonitoringProcessSetsOutput: typeof import("./getStackMonitoringProcessSets").getStackMonitoringProcessSetsOutput = null as any;
utilities.lazyLoad(exports, ["getStackMonitoringProcessSets","getStackMonitoringProcessSetsOutput"], () => require("./getStackMonitoringProcessSets"));

export { GetStreamingConnectHarnessArgs, GetStreamingConnectHarnessResult, GetStreamingConnectHarnessOutputArgs } from "./getStreamingConnectHarness";
export const getStreamingConnectHarness: typeof import("./getStreamingConnectHarness").getStreamingConnectHarness = null as any;
export const getStreamingConnectHarnessOutput: typeof import("./getStreamingConnectHarness").getStreamingConnectHarnessOutput = null as any;
utilities.lazyLoad(exports, ["getStreamingConnectHarness","getStreamingConnectHarnessOutput"], () => require("./getStreamingConnectHarness"));

export { GetStreamingConnectHarnessesArgs, GetStreamingConnectHarnessesResult, GetStreamingConnectHarnessesOutputArgs } from "./getStreamingConnectHarnesses";
export const getStreamingConnectHarnesses: typeof import("./getStreamingConnectHarnesses").getStreamingConnectHarnesses = null as any;
export const getStreamingConnectHarnessesOutput: typeof import("./getStreamingConnectHarnesses").getStreamingConnectHarnessesOutput = null as any;
utilities.lazyLoad(exports, ["getStreamingConnectHarnesses","getStreamingConnectHarnessesOutput"], () => require("./getStreamingConnectHarnesses"));

export { GetStreamingStreamArgs, GetStreamingStreamResult, GetStreamingStreamOutputArgs } from "./getStreamingStream";
export const getStreamingStream: typeof import("./getStreamingStream").getStreamingStream = null as any;
export const getStreamingStreamOutput: typeof import("./getStreamingStream").getStreamingStreamOutput = null as any;
utilities.lazyLoad(exports, ["getStreamingStream","getStreamingStreamOutput"], () => require("./getStreamingStream"));

export { GetStreamingStreamPoolArgs, GetStreamingStreamPoolResult, GetStreamingStreamPoolOutputArgs } from "./getStreamingStreamPool";
export const getStreamingStreamPool: typeof import("./getStreamingStreamPool").getStreamingStreamPool = null as any;
export const getStreamingStreamPoolOutput: typeof import("./getStreamingStreamPool").getStreamingStreamPoolOutput = null as any;
utilities.lazyLoad(exports, ["getStreamingStreamPool","getStreamingStreamPoolOutput"], () => require("./getStreamingStreamPool"));

export { GetStreamingStreamPoolsArgs, GetStreamingStreamPoolsResult, GetStreamingStreamPoolsOutputArgs } from "./getStreamingStreamPools";
export const getStreamingStreamPools: typeof import("./getStreamingStreamPools").getStreamingStreamPools = null as any;
export const getStreamingStreamPoolsOutput: typeof import("./getStreamingStreamPools").getStreamingStreamPoolsOutput = null as any;
utilities.lazyLoad(exports, ["getStreamingStreamPools","getStreamingStreamPoolsOutput"], () => require("./getStreamingStreamPools"));

export { GetStreamingStreamsArgs, GetStreamingStreamsResult, GetStreamingStreamsOutputArgs } from "./getStreamingStreams";
export const getStreamingStreams: typeof import("./getStreamingStreams").getStreamingStreams = null as any;
export const getStreamingStreamsOutput: typeof import("./getStreamingStreams").getStreamingStreamsOutput = null as any;
utilities.lazyLoad(exports, ["getStreamingStreams","getStreamingStreamsOutput"], () => require("./getStreamingStreams"));

export { GetUsageProxyResourceQuotasArgs, GetUsageProxyResourceQuotasResult, GetUsageProxyResourceQuotasOutputArgs } from "./getUsageProxyResourceQuotas";
export const getUsageProxyResourceQuotas: typeof import("./getUsageProxyResourceQuotas").getUsageProxyResourceQuotas = null as any;
export const getUsageProxyResourceQuotasOutput: typeof import("./getUsageProxyResourceQuotas").getUsageProxyResourceQuotasOutput = null as any;
utilities.lazyLoad(exports, ["getUsageProxyResourceQuotas","getUsageProxyResourceQuotasOutput"], () => require("./getUsageProxyResourceQuotas"));

export { GetUsageProxyResourcesArgs, GetUsageProxyResourcesResult, GetUsageProxyResourcesOutputArgs } from "./getUsageProxyResources";
export const getUsageProxyResources: typeof import("./getUsageProxyResources").getUsageProxyResources = null as any;
export const getUsageProxyResourcesOutput: typeof import("./getUsageProxyResources").getUsageProxyResourcesOutput = null as any;
utilities.lazyLoad(exports, ["getUsageProxyResources","getUsageProxyResourcesOutput"], () => require("./getUsageProxyResources"));

export { GetUsageProxySubscriptionProductArgs, GetUsageProxySubscriptionProductResult, GetUsageProxySubscriptionProductOutputArgs } from "./getUsageProxySubscriptionProduct";
export const getUsageProxySubscriptionProduct: typeof import("./getUsageProxySubscriptionProduct").getUsageProxySubscriptionProduct = null as any;
export const getUsageProxySubscriptionProductOutput: typeof import("./getUsageProxySubscriptionProduct").getUsageProxySubscriptionProductOutput = null as any;
utilities.lazyLoad(exports, ["getUsageProxySubscriptionProduct","getUsageProxySubscriptionProductOutput"], () => require("./getUsageProxySubscriptionProduct"));

export { GetUsageProxySubscriptionProductsArgs, GetUsageProxySubscriptionProductsResult, GetUsageProxySubscriptionProductsOutputArgs } from "./getUsageProxySubscriptionProducts";
export const getUsageProxySubscriptionProducts: typeof import("./getUsageProxySubscriptionProducts").getUsageProxySubscriptionProducts = null as any;
export const getUsageProxySubscriptionProductsOutput: typeof import("./getUsageProxySubscriptionProducts").getUsageProxySubscriptionProductsOutput = null as any;
utilities.lazyLoad(exports, ["getUsageProxySubscriptionProducts","getUsageProxySubscriptionProductsOutput"], () => require("./getUsageProxySubscriptionProducts"));

export { GetUsageProxySubscriptionRedeemableUserArgs, GetUsageProxySubscriptionRedeemableUserResult, GetUsageProxySubscriptionRedeemableUserOutputArgs } from "./getUsageProxySubscriptionRedeemableUser";
export const getUsageProxySubscriptionRedeemableUser: typeof import("./getUsageProxySubscriptionRedeemableUser").getUsageProxySubscriptionRedeemableUser = null as any;
export const getUsageProxySubscriptionRedeemableUserOutput: typeof import("./getUsageProxySubscriptionRedeemableUser").getUsageProxySubscriptionRedeemableUserOutput = null as any;
utilities.lazyLoad(exports, ["getUsageProxySubscriptionRedeemableUser","getUsageProxySubscriptionRedeemableUserOutput"], () => require("./getUsageProxySubscriptionRedeemableUser"));

export { GetUsageProxySubscriptionRedeemableUsersArgs, GetUsageProxySubscriptionRedeemableUsersResult, GetUsageProxySubscriptionRedeemableUsersOutputArgs } from "./getUsageProxySubscriptionRedeemableUsers";
export const getUsageProxySubscriptionRedeemableUsers: typeof import("./getUsageProxySubscriptionRedeemableUsers").getUsageProxySubscriptionRedeemableUsers = null as any;
export const getUsageProxySubscriptionRedeemableUsersOutput: typeof import("./getUsageProxySubscriptionRedeemableUsers").getUsageProxySubscriptionRedeemableUsersOutput = null as any;
utilities.lazyLoad(exports, ["getUsageProxySubscriptionRedeemableUsers","getUsageProxySubscriptionRedeemableUsersOutput"], () => require("./getUsageProxySubscriptionRedeemableUsers"));

export { GetUsageProxySubscriptionRedemptionArgs, GetUsageProxySubscriptionRedemptionResult, GetUsageProxySubscriptionRedemptionOutputArgs } from "./getUsageProxySubscriptionRedemption";
export const getUsageProxySubscriptionRedemption: typeof import("./getUsageProxySubscriptionRedemption").getUsageProxySubscriptionRedemption = null as any;
export const getUsageProxySubscriptionRedemptionOutput: typeof import("./getUsageProxySubscriptionRedemption").getUsageProxySubscriptionRedemptionOutput = null as any;
utilities.lazyLoad(exports, ["getUsageProxySubscriptionRedemption","getUsageProxySubscriptionRedemptionOutput"], () => require("./getUsageProxySubscriptionRedemption"));

export { GetUsageProxySubscriptionRedemptionsArgs, GetUsageProxySubscriptionRedemptionsResult, GetUsageProxySubscriptionRedemptionsOutputArgs } from "./getUsageProxySubscriptionRedemptions";
export const getUsageProxySubscriptionRedemptions: typeof import("./getUsageProxySubscriptionRedemptions").getUsageProxySubscriptionRedemptions = null as any;
export const getUsageProxySubscriptionRedemptionsOutput: typeof import("./getUsageProxySubscriptionRedemptions").getUsageProxySubscriptionRedemptionsOutput = null as any;
utilities.lazyLoad(exports, ["getUsageProxySubscriptionRedemptions","getUsageProxySubscriptionRedemptionsOutput"], () => require("./getUsageProxySubscriptionRedemptions"));

export { GetUsageProxySubscriptionRewardArgs, GetUsageProxySubscriptionRewardResult, GetUsageProxySubscriptionRewardOutputArgs } from "./getUsageProxySubscriptionReward";
export const getUsageProxySubscriptionReward: typeof import("./getUsageProxySubscriptionReward").getUsageProxySubscriptionReward = null as any;
export const getUsageProxySubscriptionRewardOutput: typeof import("./getUsageProxySubscriptionReward").getUsageProxySubscriptionRewardOutput = null as any;
utilities.lazyLoad(exports, ["getUsageProxySubscriptionReward","getUsageProxySubscriptionRewardOutput"], () => require("./getUsageProxySubscriptionReward"));

export { GetUsageProxySubscriptionRewardsArgs, GetUsageProxySubscriptionRewardsResult, GetUsageProxySubscriptionRewardsOutputArgs } from "./getUsageProxySubscriptionRewards";
export const getUsageProxySubscriptionRewards: typeof import("./getUsageProxySubscriptionRewards").getUsageProxySubscriptionRewards = null as any;
export const getUsageProxySubscriptionRewardsOutput: typeof import("./getUsageProxySubscriptionRewards").getUsageProxySubscriptionRewardsOutput = null as any;
utilities.lazyLoad(exports, ["getUsageProxySubscriptionRewards","getUsageProxySubscriptionRewardsOutput"], () => require("./getUsageProxySubscriptionRewards"));

export { GetUsageProxyUsagelimitsArgs, GetUsageProxyUsagelimitsResult, GetUsageProxyUsagelimitsOutputArgs } from "./getUsageProxyUsagelimits";
export const getUsageProxyUsagelimits: typeof import("./getUsageProxyUsagelimits").getUsageProxyUsagelimits = null as any;
export const getUsageProxyUsagelimitsOutput: typeof import("./getUsageProxyUsagelimits").getUsageProxyUsagelimitsOutput = null as any;
utilities.lazyLoad(exports, ["getUsageProxyUsagelimits","getUsageProxyUsagelimitsOutput"], () => require("./getUsageProxyUsagelimits"));

export { GetVaultSecretArgs, GetVaultSecretResult, GetVaultSecretOutputArgs } from "./getVaultSecret";
export const getVaultSecret: typeof import("./getVaultSecret").getVaultSecret = null as any;
export const getVaultSecretOutput: typeof import("./getVaultSecret").getVaultSecretOutput = null as any;
utilities.lazyLoad(exports, ["getVaultSecret","getVaultSecretOutput"], () => require("./getVaultSecret"));

export { GetVaultSecretVersionArgs, GetVaultSecretVersionResult, GetVaultSecretVersionOutputArgs } from "./getVaultSecretVersion";
export const getVaultSecretVersion: typeof import("./getVaultSecretVersion").getVaultSecretVersion = null as any;
export const getVaultSecretVersionOutput: typeof import("./getVaultSecretVersion").getVaultSecretVersionOutput = null as any;
utilities.lazyLoad(exports, ["getVaultSecretVersion","getVaultSecretVersionOutput"], () => require("./getVaultSecretVersion"));

export { GetVaultSecretsArgs, GetVaultSecretsResult, GetVaultSecretsOutputArgs } from "./getVaultSecrets";
export const getVaultSecrets: typeof import("./getVaultSecrets").getVaultSecrets = null as any;
export const getVaultSecretsOutput: typeof import("./getVaultSecrets").getVaultSecretsOutput = null as any;
utilities.lazyLoad(exports, ["getVaultSecrets","getVaultSecretsOutput"], () => require("./getVaultSecrets"));

export { GetVbsInstVbsInstanceArgs, GetVbsInstVbsInstanceResult, GetVbsInstVbsInstanceOutputArgs } from "./getVbsInstVbsInstance";
export const getVbsInstVbsInstance: typeof import("./getVbsInstVbsInstance").getVbsInstVbsInstance = null as any;
export const getVbsInstVbsInstanceOutput: typeof import("./getVbsInstVbsInstance").getVbsInstVbsInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getVbsInstVbsInstance","getVbsInstVbsInstanceOutput"], () => require("./getVbsInstVbsInstance"));

export { GetVbsInstVbsInstancesArgs, GetVbsInstVbsInstancesResult, GetVbsInstVbsInstancesOutputArgs } from "./getVbsInstVbsInstances";
export const getVbsInstVbsInstances: typeof import("./getVbsInstVbsInstances").getVbsInstVbsInstances = null as any;
export const getVbsInstVbsInstancesOutput: typeof import("./getVbsInstVbsInstances").getVbsInstVbsInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getVbsInstVbsInstances","getVbsInstVbsInstancesOutput"], () => require("./getVbsInstVbsInstances"));

export { GetVisualBuilderVbInstanceArgs, GetVisualBuilderVbInstanceResult, GetVisualBuilderVbInstanceOutputArgs } from "./getVisualBuilderVbInstance";
export const getVisualBuilderVbInstance: typeof import("./getVisualBuilderVbInstance").getVisualBuilderVbInstance = null as any;
export const getVisualBuilderVbInstanceOutput: typeof import("./getVisualBuilderVbInstance").getVisualBuilderVbInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getVisualBuilderVbInstance","getVisualBuilderVbInstanceOutput"], () => require("./getVisualBuilderVbInstance"));

export { GetVisualBuilderVbInstanceApplicationsArgs, GetVisualBuilderVbInstanceApplicationsResult, GetVisualBuilderVbInstanceApplicationsOutputArgs } from "./getVisualBuilderVbInstanceApplications";
export const getVisualBuilderVbInstanceApplications: typeof import("./getVisualBuilderVbInstanceApplications").getVisualBuilderVbInstanceApplications = null as any;
export const getVisualBuilderVbInstanceApplicationsOutput: typeof import("./getVisualBuilderVbInstanceApplications").getVisualBuilderVbInstanceApplicationsOutput = null as any;
utilities.lazyLoad(exports, ["getVisualBuilderVbInstanceApplications","getVisualBuilderVbInstanceApplicationsOutput"], () => require("./getVisualBuilderVbInstanceApplications"));

export { GetVisualBuilderVbInstancesArgs, GetVisualBuilderVbInstancesResult, GetVisualBuilderVbInstancesOutputArgs } from "./getVisualBuilderVbInstances";
export const getVisualBuilderVbInstances: typeof import("./getVisualBuilderVbInstances").getVisualBuilderVbInstances = null as any;
export const getVisualBuilderVbInstancesOutput: typeof import("./getVisualBuilderVbInstances").getVisualBuilderVbInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getVisualBuilderVbInstances","getVisualBuilderVbInstancesOutput"], () => require("./getVisualBuilderVbInstances"));

export { GetVnMonitoringPathAnalyzerTestArgs, GetVnMonitoringPathAnalyzerTestResult, GetVnMonitoringPathAnalyzerTestOutputArgs } from "./getVnMonitoringPathAnalyzerTest";
export const getVnMonitoringPathAnalyzerTest: typeof import("./getVnMonitoringPathAnalyzerTest").getVnMonitoringPathAnalyzerTest = null as any;
export const getVnMonitoringPathAnalyzerTestOutput: typeof import("./getVnMonitoringPathAnalyzerTest").getVnMonitoringPathAnalyzerTestOutput = null as any;
utilities.lazyLoad(exports, ["getVnMonitoringPathAnalyzerTest","getVnMonitoringPathAnalyzerTestOutput"], () => require("./getVnMonitoringPathAnalyzerTest"));

export { GetVnMonitoringPathAnalyzerTestsArgs, GetVnMonitoringPathAnalyzerTestsResult, GetVnMonitoringPathAnalyzerTestsOutputArgs } from "./getVnMonitoringPathAnalyzerTests";
export const getVnMonitoringPathAnalyzerTests: typeof import("./getVnMonitoringPathAnalyzerTests").getVnMonitoringPathAnalyzerTests = null as any;
export const getVnMonitoringPathAnalyzerTestsOutput: typeof import("./getVnMonitoringPathAnalyzerTests").getVnMonitoringPathAnalyzerTestsOutput = null as any;
utilities.lazyLoad(exports, ["getVnMonitoringPathAnalyzerTests","getVnMonitoringPathAnalyzerTestsOutput"], () => require("./getVnMonitoringPathAnalyzerTests"));

export { GetVulnerabilityScanningContainerScanRecipeArgs, GetVulnerabilityScanningContainerScanRecipeResult, GetVulnerabilityScanningContainerScanRecipeOutputArgs } from "./getVulnerabilityScanningContainerScanRecipe";
export const getVulnerabilityScanningContainerScanRecipe: typeof import("./getVulnerabilityScanningContainerScanRecipe").getVulnerabilityScanningContainerScanRecipe = null as any;
export const getVulnerabilityScanningContainerScanRecipeOutput: typeof import("./getVulnerabilityScanningContainerScanRecipe").getVulnerabilityScanningContainerScanRecipeOutput = null as any;
utilities.lazyLoad(exports, ["getVulnerabilityScanningContainerScanRecipe","getVulnerabilityScanningContainerScanRecipeOutput"], () => require("./getVulnerabilityScanningContainerScanRecipe"));

export { GetVulnerabilityScanningContainerScanRecipesArgs, GetVulnerabilityScanningContainerScanRecipesResult, GetVulnerabilityScanningContainerScanRecipesOutputArgs } from "./getVulnerabilityScanningContainerScanRecipes";
export const getVulnerabilityScanningContainerScanRecipes: typeof import("./getVulnerabilityScanningContainerScanRecipes").getVulnerabilityScanningContainerScanRecipes = null as any;
export const getVulnerabilityScanningContainerScanRecipesOutput: typeof import("./getVulnerabilityScanningContainerScanRecipes").getVulnerabilityScanningContainerScanRecipesOutput = null as any;
utilities.lazyLoad(exports, ["getVulnerabilityScanningContainerScanRecipes","getVulnerabilityScanningContainerScanRecipesOutput"], () => require("./getVulnerabilityScanningContainerScanRecipes"));

export { GetVulnerabilityScanningContainerScanTargetArgs, GetVulnerabilityScanningContainerScanTargetResult, GetVulnerabilityScanningContainerScanTargetOutputArgs } from "./getVulnerabilityScanningContainerScanTarget";
export const getVulnerabilityScanningContainerScanTarget: typeof import("./getVulnerabilityScanningContainerScanTarget").getVulnerabilityScanningContainerScanTarget = null as any;
export const getVulnerabilityScanningContainerScanTargetOutput: typeof import("./getVulnerabilityScanningContainerScanTarget").getVulnerabilityScanningContainerScanTargetOutput = null as any;
utilities.lazyLoad(exports, ["getVulnerabilityScanningContainerScanTarget","getVulnerabilityScanningContainerScanTargetOutput"], () => require("./getVulnerabilityScanningContainerScanTarget"));

export { GetVulnerabilityScanningContainerScanTargetsArgs, GetVulnerabilityScanningContainerScanTargetsResult, GetVulnerabilityScanningContainerScanTargetsOutputArgs } from "./getVulnerabilityScanningContainerScanTargets";
export const getVulnerabilityScanningContainerScanTargets: typeof import("./getVulnerabilityScanningContainerScanTargets").getVulnerabilityScanningContainerScanTargets = null as any;
export const getVulnerabilityScanningContainerScanTargetsOutput: typeof import("./getVulnerabilityScanningContainerScanTargets").getVulnerabilityScanningContainerScanTargetsOutput = null as any;
utilities.lazyLoad(exports, ["getVulnerabilityScanningContainerScanTargets","getVulnerabilityScanningContainerScanTargetsOutput"], () => require("./getVulnerabilityScanningContainerScanTargets"));

export { GetVulnerabilityScanningHostScanRecipeArgs, GetVulnerabilityScanningHostScanRecipeResult, GetVulnerabilityScanningHostScanRecipeOutputArgs } from "./getVulnerabilityScanningHostScanRecipe";
export const getVulnerabilityScanningHostScanRecipe: typeof import("./getVulnerabilityScanningHostScanRecipe").getVulnerabilityScanningHostScanRecipe = null as any;
export const getVulnerabilityScanningHostScanRecipeOutput: typeof import("./getVulnerabilityScanningHostScanRecipe").getVulnerabilityScanningHostScanRecipeOutput = null as any;
utilities.lazyLoad(exports, ["getVulnerabilityScanningHostScanRecipe","getVulnerabilityScanningHostScanRecipeOutput"], () => require("./getVulnerabilityScanningHostScanRecipe"));

export { GetVulnerabilityScanningHostScanRecipesArgs, GetVulnerabilityScanningHostScanRecipesResult, GetVulnerabilityScanningHostScanRecipesOutputArgs } from "./getVulnerabilityScanningHostScanRecipes";
export const getVulnerabilityScanningHostScanRecipes: typeof import("./getVulnerabilityScanningHostScanRecipes").getVulnerabilityScanningHostScanRecipes = null as any;
export const getVulnerabilityScanningHostScanRecipesOutput: typeof import("./getVulnerabilityScanningHostScanRecipes").getVulnerabilityScanningHostScanRecipesOutput = null as any;
utilities.lazyLoad(exports, ["getVulnerabilityScanningHostScanRecipes","getVulnerabilityScanningHostScanRecipesOutput"], () => require("./getVulnerabilityScanningHostScanRecipes"));

export { GetVulnerabilityScanningHostScanTargetArgs, GetVulnerabilityScanningHostScanTargetResult, GetVulnerabilityScanningHostScanTargetOutputArgs } from "./getVulnerabilityScanningHostScanTarget";
export const getVulnerabilityScanningHostScanTarget: typeof import("./getVulnerabilityScanningHostScanTarget").getVulnerabilityScanningHostScanTarget = null as any;
export const getVulnerabilityScanningHostScanTargetOutput: typeof import("./getVulnerabilityScanningHostScanTarget").getVulnerabilityScanningHostScanTargetOutput = null as any;
utilities.lazyLoad(exports, ["getVulnerabilityScanningHostScanTarget","getVulnerabilityScanningHostScanTargetOutput"], () => require("./getVulnerabilityScanningHostScanTarget"));

export { GetVulnerabilityScanningHostScanTargetErrorsArgs, GetVulnerabilityScanningHostScanTargetErrorsResult, GetVulnerabilityScanningHostScanTargetErrorsOutputArgs } from "./getVulnerabilityScanningHostScanTargetErrors";
export const getVulnerabilityScanningHostScanTargetErrors: typeof import("./getVulnerabilityScanningHostScanTargetErrors").getVulnerabilityScanningHostScanTargetErrors = null as any;
export const getVulnerabilityScanningHostScanTargetErrorsOutput: typeof import("./getVulnerabilityScanningHostScanTargetErrors").getVulnerabilityScanningHostScanTargetErrorsOutput = null as any;
utilities.lazyLoad(exports, ["getVulnerabilityScanningHostScanTargetErrors","getVulnerabilityScanningHostScanTargetErrorsOutput"], () => require("./getVulnerabilityScanningHostScanTargetErrors"));

export { GetVulnerabilityScanningHostScanTargetsArgs, GetVulnerabilityScanningHostScanTargetsResult, GetVulnerabilityScanningHostScanTargetsOutputArgs } from "./getVulnerabilityScanningHostScanTargets";
export const getVulnerabilityScanningHostScanTargets: typeof import("./getVulnerabilityScanningHostScanTargets").getVulnerabilityScanningHostScanTargets = null as any;
export const getVulnerabilityScanningHostScanTargetsOutput: typeof import("./getVulnerabilityScanningHostScanTargets").getVulnerabilityScanningHostScanTargetsOutput = null as any;
utilities.lazyLoad(exports, ["getVulnerabilityScanningHostScanTargets","getVulnerabilityScanningHostScanTargetsOutput"], () => require("./getVulnerabilityScanningHostScanTargets"));

export { GetWaaWebAppAccelerationArgs, GetWaaWebAppAccelerationResult, GetWaaWebAppAccelerationOutputArgs } from "./getWaaWebAppAcceleration";
export const getWaaWebAppAcceleration: typeof import("./getWaaWebAppAcceleration").getWaaWebAppAcceleration = null as any;
export const getWaaWebAppAccelerationOutput: typeof import("./getWaaWebAppAcceleration").getWaaWebAppAccelerationOutput = null as any;
utilities.lazyLoad(exports, ["getWaaWebAppAcceleration","getWaaWebAppAccelerationOutput"], () => require("./getWaaWebAppAcceleration"));

export { GetWaaWebAppAccelerationPoliciesArgs, GetWaaWebAppAccelerationPoliciesResult, GetWaaWebAppAccelerationPoliciesOutputArgs } from "./getWaaWebAppAccelerationPolicies";
export const getWaaWebAppAccelerationPolicies: typeof import("./getWaaWebAppAccelerationPolicies").getWaaWebAppAccelerationPolicies = null as any;
export const getWaaWebAppAccelerationPoliciesOutput: typeof import("./getWaaWebAppAccelerationPolicies").getWaaWebAppAccelerationPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getWaaWebAppAccelerationPolicies","getWaaWebAppAccelerationPoliciesOutput"], () => require("./getWaaWebAppAccelerationPolicies"));

export { GetWaaWebAppAccelerationPolicyArgs, GetWaaWebAppAccelerationPolicyResult, GetWaaWebAppAccelerationPolicyOutputArgs } from "./getWaaWebAppAccelerationPolicy";
export const getWaaWebAppAccelerationPolicy: typeof import("./getWaaWebAppAccelerationPolicy").getWaaWebAppAccelerationPolicy = null as any;
export const getWaaWebAppAccelerationPolicyOutput: typeof import("./getWaaWebAppAccelerationPolicy").getWaaWebAppAccelerationPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getWaaWebAppAccelerationPolicy","getWaaWebAppAccelerationPolicyOutput"], () => require("./getWaaWebAppAccelerationPolicy"));

export { GetWaaWebAppAccelerationsArgs, GetWaaWebAppAccelerationsResult, GetWaaWebAppAccelerationsOutputArgs } from "./getWaaWebAppAccelerations";
export const getWaaWebAppAccelerations: typeof import("./getWaaWebAppAccelerations").getWaaWebAppAccelerations = null as any;
export const getWaaWebAppAccelerationsOutput: typeof import("./getWaaWebAppAccelerations").getWaaWebAppAccelerationsOutput = null as any;
utilities.lazyLoad(exports, ["getWaaWebAppAccelerations","getWaaWebAppAccelerationsOutput"], () => require("./getWaaWebAppAccelerations"));

export { GetWaasAddressListArgs, GetWaasAddressListResult, GetWaasAddressListOutputArgs } from "./getWaasAddressList";
export const getWaasAddressList: typeof import("./getWaasAddressList").getWaasAddressList = null as any;
export const getWaasAddressListOutput: typeof import("./getWaasAddressList").getWaasAddressListOutput = null as any;
utilities.lazyLoad(exports, ["getWaasAddressList","getWaasAddressListOutput"], () => require("./getWaasAddressList"));

export { GetWaasAddressListsArgs, GetWaasAddressListsResult, GetWaasAddressListsOutputArgs } from "./getWaasAddressLists";
export const getWaasAddressLists: typeof import("./getWaasAddressLists").getWaasAddressLists = null as any;
export const getWaasAddressListsOutput: typeof import("./getWaasAddressLists").getWaasAddressListsOutput = null as any;
utilities.lazyLoad(exports, ["getWaasAddressLists","getWaasAddressListsOutput"], () => require("./getWaasAddressLists"));

export { GetWaasCertificateArgs, GetWaasCertificateResult, GetWaasCertificateOutputArgs } from "./getWaasCertificate";
export const getWaasCertificate: typeof import("./getWaasCertificate").getWaasCertificate = null as any;
export const getWaasCertificateOutput: typeof import("./getWaasCertificate").getWaasCertificateOutput = null as any;
utilities.lazyLoad(exports, ["getWaasCertificate","getWaasCertificateOutput"], () => require("./getWaasCertificate"));

export { GetWaasCertificatesArgs, GetWaasCertificatesResult, GetWaasCertificatesOutputArgs } from "./getWaasCertificates";
export const getWaasCertificates: typeof import("./getWaasCertificates").getWaasCertificates = null as any;
export const getWaasCertificatesOutput: typeof import("./getWaasCertificates").getWaasCertificatesOutput = null as any;
utilities.lazyLoad(exports, ["getWaasCertificates","getWaasCertificatesOutput"], () => require("./getWaasCertificates"));

export { GetWaasCustomProtectionRuleArgs, GetWaasCustomProtectionRuleResult, GetWaasCustomProtectionRuleOutputArgs } from "./getWaasCustomProtectionRule";
export const getWaasCustomProtectionRule: typeof import("./getWaasCustomProtectionRule").getWaasCustomProtectionRule = null as any;
export const getWaasCustomProtectionRuleOutput: typeof import("./getWaasCustomProtectionRule").getWaasCustomProtectionRuleOutput = null as any;
utilities.lazyLoad(exports, ["getWaasCustomProtectionRule","getWaasCustomProtectionRuleOutput"], () => require("./getWaasCustomProtectionRule"));

export { GetWaasCustomProtectionRulesArgs, GetWaasCustomProtectionRulesResult, GetWaasCustomProtectionRulesOutputArgs } from "./getWaasCustomProtectionRules";
export const getWaasCustomProtectionRules: typeof import("./getWaasCustomProtectionRules").getWaasCustomProtectionRules = null as any;
export const getWaasCustomProtectionRulesOutput: typeof import("./getWaasCustomProtectionRules").getWaasCustomProtectionRulesOutput = null as any;
utilities.lazyLoad(exports, ["getWaasCustomProtectionRules","getWaasCustomProtectionRulesOutput"], () => require("./getWaasCustomProtectionRules"));

export { GetWaasEdgeSubnetsArgs, GetWaasEdgeSubnetsResult, GetWaasEdgeSubnetsOutputArgs } from "./getWaasEdgeSubnets";
export const getWaasEdgeSubnets: typeof import("./getWaasEdgeSubnets").getWaasEdgeSubnets = null as any;
export const getWaasEdgeSubnetsOutput: typeof import("./getWaasEdgeSubnets").getWaasEdgeSubnetsOutput = null as any;
utilities.lazyLoad(exports, ["getWaasEdgeSubnets","getWaasEdgeSubnetsOutput"], () => require("./getWaasEdgeSubnets"));

export { GetWaasHttpRedirectArgs, GetWaasHttpRedirectResult, GetWaasHttpRedirectOutputArgs } from "./getWaasHttpRedirect";
export const getWaasHttpRedirect: typeof import("./getWaasHttpRedirect").getWaasHttpRedirect = null as any;
export const getWaasHttpRedirectOutput: typeof import("./getWaasHttpRedirect").getWaasHttpRedirectOutput = null as any;
utilities.lazyLoad(exports, ["getWaasHttpRedirect","getWaasHttpRedirectOutput"], () => require("./getWaasHttpRedirect"));

export { GetWaasHttpRedirectsArgs, GetWaasHttpRedirectsResult, GetWaasHttpRedirectsOutputArgs } from "./getWaasHttpRedirects";
export const getWaasHttpRedirects: typeof import("./getWaasHttpRedirects").getWaasHttpRedirects = null as any;
export const getWaasHttpRedirectsOutput: typeof import("./getWaasHttpRedirects").getWaasHttpRedirectsOutput = null as any;
utilities.lazyLoad(exports, ["getWaasHttpRedirects","getWaasHttpRedirectsOutput"], () => require("./getWaasHttpRedirects"));

export { GetWaasProtectionRuleArgs, GetWaasProtectionRuleResult, GetWaasProtectionRuleOutputArgs } from "./getWaasProtectionRule";
export const getWaasProtectionRule: typeof import("./getWaasProtectionRule").getWaasProtectionRule = null as any;
export const getWaasProtectionRuleOutput: typeof import("./getWaasProtectionRule").getWaasProtectionRuleOutput = null as any;
utilities.lazyLoad(exports, ["getWaasProtectionRule","getWaasProtectionRuleOutput"], () => require("./getWaasProtectionRule"));

export { GetWaasProtectionRulesArgs, GetWaasProtectionRulesResult, GetWaasProtectionRulesOutputArgs } from "./getWaasProtectionRules";
export const getWaasProtectionRules: typeof import("./getWaasProtectionRules").getWaasProtectionRules = null as any;
export const getWaasProtectionRulesOutput: typeof import("./getWaasProtectionRules").getWaasProtectionRulesOutput = null as any;
utilities.lazyLoad(exports, ["getWaasProtectionRules","getWaasProtectionRulesOutput"], () => require("./getWaasProtectionRules"));

export { GetWaasWaasPoliciesArgs, GetWaasWaasPoliciesResult, GetWaasWaasPoliciesOutputArgs } from "./getWaasWaasPolicies";
export const getWaasWaasPolicies: typeof import("./getWaasWaasPolicies").getWaasWaasPolicies = null as any;
export const getWaasWaasPoliciesOutput: typeof import("./getWaasWaasPolicies").getWaasWaasPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getWaasWaasPolicies","getWaasWaasPoliciesOutput"], () => require("./getWaasWaasPolicies"));

export { GetWaasWaasPolicyArgs, GetWaasWaasPolicyResult, GetWaasWaasPolicyOutputArgs } from "./getWaasWaasPolicy";
export const getWaasWaasPolicy: typeof import("./getWaasWaasPolicy").getWaasWaasPolicy = null as any;
export const getWaasWaasPolicyOutput: typeof import("./getWaasWaasPolicy").getWaasWaasPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getWaasWaasPolicy","getWaasWaasPolicyOutput"], () => require("./getWaasWaasPolicy"));

export { GetWafNetworkAddressListArgs, GetWafNetworkAddressListResult, GetWafNetworkAddressListOutputArgs } from "./getWafNetworkAddressList";
export const getWafNetworkAddressList: typeof import("./getWafNetworkAddressList").getWafNetworkAddressList = null as any;
export const getWafNetworkAddressListOutput: typeof import("./getWafNetworkAddressList").getWafNetworkAddressListOutput = null as any;
utilities.lazyLoad(exports, ["getWafNetworkAddressList","getWafNetworkAddressListOutput"], () => require("./getWafNetworkAddressList"));

export { GetWafNetworkAddressListsArgs, GetWafNetworkAddressListsResult, GetWafNetworkAddressListsOutputArgs } from "./getWafNetworkAddressLists";
export const getWafNetworkAddressLists: typeof import("./getWafNetworkAddressLists").getWafNetworkAddressLists = null as any;
export const getWafNetworkAddressListsOutput: typeof import("./getWafNetworkAddressLists").getWafNetworkAddressListsOutput = null as any;
utilities.lazyLoad(exports, ["getWafNetworkAddressLists","getWafNetworkAddressListsOutput"], () => require("./getWafNetworkAddressLists"));

export { GetWafProtectionCapabilitiesArgs, GetWafProtectionCapabilitiesResult, GetWafProtectionCapabilitiesOutputArgs } from "./getWafProtectionCapabilities";
export const getWafProtectionCapabilities: typeof import("./getWafProtectionCapabilities").getWafProtectionCapabilities = null as any;
export const getWafProtectionCapabilitiesOutput: typeof import("./getWafProtectionCapabilities").getWafProtectionCapabilitiesOutput = null as any;
utilities.lazyLoad(exports, ["getWafProtectionCapabilities","getWafProtectionCapabilitiesOutput"], () => require("./getWafProtectionCapabilities"));

export { GetWafProtectionCapabilityGroupTagsArgs, GetWafProtectionCapabilityGroupTagsResult, GetWafProtectionCapabilityGroupTagsOutputArgs } from "./getWafProtectionCapabilityGroupTags";
export const getWafProtectionCapabilityGroupTags: typeof import("./getWafProtectionCapabilityGroupTags").getWafProtectionCapabilityGroupTags = null as any;
export const getWafProtectionCapabilityGroupTagsOutput: typeof import("./getWafProtectionCapabilityGroupTags").getWafProtectionCapabilityGroupTagsOutput = null as any;
utilities.lazyLoad(exports, ["getWafProtectionCapabilityGroupTags","getWafProtectionCapabilityGroupTagsOutput"], () => require("./getWafProtectionCapabilityGroupTags"));

export { GetWafWebAppFirewallArgs, GetWafWebAppFirewallResult, GetWafWebAppFirewallOutputArgs } from "./getWafWebAppFirewall";
export const getWafWebAppFirewall: typeof import("./getWafWebAppFirewall").getWafWebAppFirewall = null as any;
export const getWafWebAppFirewallOutput: typeof import("./getWafWebAppFirewall").getWafWebAppFirewallOutput = null as any;
utilities.lazyLoad(exports, ["getWafWebAppFirewall","getWafWebAppFirewallOutput"], () => require("./getWafWebAppFirewall"));

export { GetWafWebAppFirewallPoliciesArgs, GetWafWebAppFirewallPoliciesResult, GetWafWebAppFirewallPoliciesOutputArgs } from "./getWafWebAppFirewallPolicies";
export const getWafWebAppFirewallPolicies: typeof import("./getWafWebAppFirewallPolicies").getWafWebAppFirewallPolicies = null as any;
export const getWafWebAppFirewallPoliciesOutput: typeof import("./getWafWebAppFirewallPolicies").getWafWebAppFirewallPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getWafWebAppFirewallPolicies","getWafWebAppFirewallPoliciesOutput"], () => require("./getWafWebAppFirewallPolicies"));

export { GetWafWebAppFirewallPolicyArgs, GetWafWebAppFirewallPolicyResult, GetWafWebAppFirewallPolicyOutputArgs } from "./getWafWebAppFirewallPolicy";
export const getWafWebAppFirewallPolicy: typeof import("./getWafWebAppFirewallPolicy").getWafWebAppFirewallPolicy = null as any;
export const getWafWebAppFirewallPolicyOutput: typeof import("./getWafWebAppFirewallPolicy").getWafWebAppFirewallPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getWafWebAppFirewallPolicy","getWafWebAppFirewallPolicyOutput"], () => require("./getWafWebAppFirewallPolicy"));

export { GetWafWebAppFirewallsArgs, GetWafWebAppFirewallsResult, GetWafWebAppFirewallsOutputArgs } from "./getWafWebAppFirewalls";
export const getWafWebAppFirewalls: typeof import("./getWafWebAppFirewalls").getWafWebAppFirewalls = null as any;
export const getWafWebAppFirewallsOutput: typeof import("./getWafWebAppFirewalls").getWafWebAppFirewallsOutput = null as any;
utilities.lazyLoad(exports, ["getWafWebAppFirewalls","getWafWebAppFirewallsOutput"], () => require("./getWafWebAppFirewalls"));

export { GoldenGateConnectionArgs, GoldenGateConnectionState } from "./goldenGateConnection";
export type GoldenGateConnection = import("./goldenGateConnection").GoldenGateConnection;
export const GoldenGateConnection: typeof import("./goldenGateConnection").GoldenGateConnection = null as any;
utilities.lazyLoad(exports, ["GoldenGateConnection"], () => require("./goldenGateConnection"));

export { GoldenGateConnectionAssignmentArgs, GoldenGateConnectionAssignmentState } from "./goldenGateConnectionAssignment";
export type GoldenGateConnectionAssignment = import("./goldenGateConnectionAssignment").GoldenGateConnectionAssignment;
export const GoldenGateConnectionAssignment: typeof import("./goldenGateConnectionAssignment").GoldenGateConnectionAssignment = null as any;
utilities.lazyLoad(exports, ["GoldenGateConnectionAssignment"], () => require("./goldenGateConnectionAssignment"));

export { GoldenGateDatabaseRegistrationArgs, GoldenGateDatabaseRegistrationState } from "./goldenGateDatabaseRegistration";
export type GoldenGateDatabaseRegistration = import("./goldenGateDatabaseRegistration").GoldenGateDatabaseRegistration;
export const GoldenGateDatabaseRegistration: typeof import("./goldenGateDatabaseRegistration").GoldenGateDatabaseRegistration = null as any;
utilities.lazyLoad(exports, ["GoldenGateDatabaseRegistration"], () => require("./goldenGateDatabaseRegistration"));

export { GoldenGateDeploymentArgs, GoldenGateDeploymentState } from "./goldenGateDeployment";
export type GoldenGateDeployment = import("./goldenGateDeployment").GoldenGateDeployment;
export const GoldenGateDeployment: typeof import("./goldenGateDeployment").GoldenGateDeployment = null as any;
utilities.lazyLoad(exports, ["GoldenGateDeployment"], () => require("./goldenGateDeployment"));

export { GoldenGateDeploymentBackupArgs, GoldenGateDeploymentBackupState } from "./goldenGateDeploymentBackup";
export type GoldenGateDeploymentBackup = import("./goldenGateDeploymentBackup").GoldenGateDeploymentBackup;
export const GoldenGateDeploymentBackup: typeof import("./goldenGateDeploymentBackup").GoldenGateDeploymentBackup = null as any;
utilities.lazyLoad(exports, ["GoldenGateDeploymentBackup"], () => require("./goldenGateDeploymentBackup"));

export { GoldenGateDeploymentCertificateArgs, GoldenGateDeploymentCertificateState } from "./goldenGateDeploymentCertificate";
export type GoldenGateDeploymentCertificate = import("./goldenGateDeploymentCertificate").GoldenGateDeploymentCertificate;
export const GoldenGateDeploymentCertificate: typeof import("./goldenGateDeploymentCertificate").GoldenGateDeploymentCertificate = null as any;
utilities.lazyLoad(exports, ["GoldenGateDeploymentCertificate"], () => require("./goldenGateDeploymentCertificate"));

export { HealthChecksHttpMonitorArgs, HealthChecksHttpMonitorState } from "./healthChecksHttpMonitor";
export type HealthChecksHttpMonitor = import("./healthChecksHttpMonitor").HealthChecksHttpMonitor;
export const HealthChecksHttpMonitor: typeof import("./healthChecksHttpMonitor").HealthChecksHttpMonitor = null as any;
utilities.lazyLoad(exports, ["HealthChecksHttpMonitor"], () => require("./healthChecksHttpMonitor"));

export { HealthChecksHttpProbeArgs, HealthChecksHttpProbeState } from "./healthChecksHttpProbe";
export type HealthChecksHttpProbe = import("./healthChecksHttpProbe").HealthChecksHttpProbe;
export const HealthChecksHttpProbe: typeof import("./healthChecksHttpProbe").HealthChecksHttpProbe = null as any;
utilities.lazyLoad(exports, ["HealthChecksHttpProbe"], () => require("./healthChecksHttpProbe"));

export { HealthChecksPingMonitorArgs, HealthChecksPingMonitorState } from "./healthChecksPingMonitor";
export type HealthChecksPingMonitor = import("./healthChecksPingMonitor").HealthChecksPingMonitor;
export const HealthChecksPingMonitor: typeof import("./healthChecksPingMonitor").HealthChecksPingMonitor = null as any;
utilities.lazyLoad(exports, ["HealthChecksPingMonitor"], () => require("./healthChecksPingMonitor"));

export { HealthChecksPingProbeArgs, HealthChecksPingProbeState } from "./healthChecksPingProbe";
export type HealthChecksPingProbe = import("./healthChecksPingProbe").HealthChecksPingProbe;
export const HealthChecksPingProbe: typeof import("./healthChecksPingProbe").HealthChecksPingProbe = null as any;
utilities.lazyLoad(exports, ["HealthChecksPingProbe"], () => require("./healthChecksPingProbe"));

export { IdentityApiKeyArgs, IdentityApiKeyState } from "./identityApiKey";
export type IdentityApiKey = import("./identityApiKey").IdentityApiKey;
export const IdentityApiKey: typeof import("./identityApiKey").IdentityApiKey = null as any;
utilities.lazyLoad(exports, ["IdentityApiKey"], () => require("./identityApiKey"));

export { IdentityAuthTokenArgs, IdentityAuthTokenState } from "./identityAuthToken";
export type IdentityAuthToken = import("./identityAuthToken").IdentityAuthToken;
export const IdentityAuthToken: typeof import("./identityAuthToken").IdentityAuthToken = null as any;
utilities.lazyLoad(exports, ["IdentityAuthToken"], () => require("./identityAuthToken"));

export { IdentityAuthenticationPolicyArgs, IdentityAuthenticationPolicyState } from "./identityAuthenticationPolicy";
export type IdentityAuthenticationPolicy = import("./identityAuthenticationPolicy").IdentityAuthenticationPolicy;
export const IdentityAuthenticationPolicy: typeof import("./identityAuthenticationPolicy").IdentityAuthenticationPolicy = null as any;
utilities.lazyLoad(exports, ["IdentityAuthenticationPolicy"], () => require("./identityAuthenticationPolicy"));

export { IdentityCompartmentArgs, IdentityCompartmentState } from "./identityCompartment";
export type IdentityCompartment = import("./identityCompartment").IdentityCompartment;
export const IdentityCompartment: typeof import("./identityCompartment").IdentityCompartment = null as any;
utilities.lazyLoad(exports, ["IdentityCompartment"], () => require("./identityCompartment"));

export { IdentityCustomerSecretKeyArgs, IdentityCustomerSecretKeyState } from "./identityCustomerSecretKey";
export type IdentityCustomerSecretKey = import("./identityCustomerSecretKey").IdentityCustomerSecretKey;
export const IdentityCustomerSecretKey: typeof import("./identityCustomerSecretKey").IdentityCustomerSecretKey = null as any;
utilities.lazyLoad(exports, ["IdentityCustomerSecretKey"], () => require("./identityCustomerSecretKey"));

export { IdentityDataPlaneGenerateScopedAccessTokenArgs, IdentityDataPlaneGenerateScopedAccessTokenState } from "./identityDataPlaneGenerateScopedAccessToken";
export type IdentityDataPlaneGenerateScopedAccessToken = import("./identityDataPlaneGenerateScopedAccessToken").IdentityDataPlaneGenerateScopedAccessToken;
export const IdentityDataPlaneGenerateScopedAccessToken: typeof import("./identityDataPlaneGenerateScopedAccessToken").IdentityDataPlaneGenerateScopedAccessToken = null as any;
utilities.lazyLoad(exports, ["IdentityDataPlaneGenerateScopedAccessToken"], () => require("./identityDataPlaneGenerateScopedAccessToken"));

export { IdentityDbCredentialArgs, IdentityDbCredentialState } from "./identityDbCredential";
export type IdentityDbCredential = import("./identityDbCredential").IdentityDbCredential;
export const IdentityDbCredential: typeof import("./identityDbCredential").IdentityDbCredential = null as any;
utilities.lazyLoad(exports, ["IdentityDbCredential"], () => require("./identityDbCredential"));

export { IdentityDomainArgs, IdentityDomainState } from "./identityDomain";
export type IdentityDomain = import("./identityDomain").IdentityDomain;
export const IdentityDomain: typeof import("./identityDomain").IdentityDomain = null as any;
utilities.lazyLoad(exports, ["IdentityDomain"], () => require("./identityDomain"));

export { IdentityDomainReplicationToRegionArgs, IdentityDomainReplicationToRegionState } from "./identityDomainReplicationToRegion";
export type IdentityDomainReplicationToRegion = import("./identityDomainReplicationToRegion").IdentityDomainReplicationToRegion;
export const IdentityDomainReplicationToRegion: typeof import("./identityDomainReplicationToRegion").IdentityDomainReplicationToRegion = null as any;
utilities.lazyLoad(exports, ["IdentityDomainReplicationToRegion"], () => require("./identityDomainReplicationToRegion"));

export { IdentityDomainsAccountRecoverySettingArgs, IdentityDomainsAccountRecoverySettingState } from "./identityDomainsAccountRecoverySetting";
export type IdentityDomainsAccountRecoverySetting = import("./identityDomainsAccountRecoverySetting").IdentityDomainsAccountRecoverySetting;
export const IdentityDomainsAccountRecoverySetting: typeof import("./identityDomainsAccountRecoverySetting").IdentityDomainsAccountRecoverySetting = null as any;
utilities.lazyLoad(exports, ["IdentityDomainsAccountRecoverySetting"], () => require("./identityDomainsAccountRecoverySetting"));

export { IdentityDomainsApiKeyArgs, IdentityDomainsApiKeyState } from "./identityDomainsApiKey";
export type IdentityDomainsApiKey = import("./identityDomainsApiKey").IdentityDomainsApiKey;
export const IdentityDomainsApiKey: typeof import("./identityDomainsApiKey").IdentityDomainsApiKey = null as any;
utilities.lazyLoad(exports, ["IdentityDomainsApiKey"], () => require("./identityDomainsApiKey"));

export { IdentityDomainsAppArgs, IdentityDomainsAppState } from "./identityDomainsApp";
export type IdentityDomainsApp = import("./identityDomainsApp").IdentityDomainsApp;
export const IdentityDomainsApp: typeof import("./identityDomainsApp").IdentityDomainsApp = null as any;
utilities.lazyLoad(exports, ["IdentityDomainsApp"], () => require("./identityDomainsApp"));

export { IdentityDomainsAppRoleArgs, IdentityDomainsAppRoleState } from "./identityDomainsAppRole";
export type IdentityDomainsAppRole = import("./identityDomainsAppRole").IdentityDomainsAppRole;
export const IdentityDomainsAppRole: typeof import("./identityDomainsAppRole").IdentityDomainsAppRole = null as any;
utilities.lazyLoad(exports, ["IdentityDomainsAppRole"], () => require("./identityDomainsAppRole"));

export { IdentityDomainsApprovalWorkflowArgs, IdentityDomainsApprovalWorkflowState } from "./identityDomainsApprovalWorkflow";
export type IdentityDomainsApprovalWorkflow = import("./identityDomainsApprovalWorkflow").IdentityDomainsApprovalWorkflow;
export const IdentityDomainsApprovalWorkflow: typeof import("./identityDomainsApprovalWorkflow").IdentityDomainsApprovalWorkflow = null as any;
utilities.lazyLoad(exports, ["IdentityDomainsApprovalWorkflow"], () => require("./identityDomainsApprovalWorkflow"));

export { IdentityDomainsApprovalWorkflowAssignmentArgs, IdentityDomainsApprovalWorkflowAssignmentState } from "./identityDomainsApprovalWorkflowAssignment";
export type IdentityDomainsApprovalWorkflowAssignment = import("./identityDomainsApprovalWorkflowAssignment").IdentityDomainsApprovalWorkflowAssignment;
export const IdentityDomainsApprovalWorkflowAssignment: typeof import("./identityDomainsApprovalWorkflowAssignment").IdentityDomainsApprovalWorkflowAssignment = null as any;
utilities.lazyLoad(exports, ["IdentityDomainsApprovalWorkflowAssignment"], () => require("./identityDomainsApprovalWorkflowAssignment"));

export { IdentityDomainsApprovalWorkflowStepArgs, IdentityDomainsApprovalWorkflowStepState } from "./identityDomainsApprovalWorkflowStep";
export type IdentityDomainsApprovalWorkflowStep = import("./identityDomainsApprovalWorkflowStep").IdentityDomainsApprovalWorkflowStep;
export const IdentityDomainsApprovalWorkflowStep: typeof import("./identityDomainsApprovalWorkflowStep").IdentityDomainsApprovalWorkflowStep = null as any;
utilities.lazyLoad(exports, ["IdentityDomainsApprovalWorkflowStep"], () => require("./identityDomainsApprovalWorkflowStep"));

export { IdentityDomainsAuthTokenArgs, IdentityDomainsAuthTokenState } from "./identityDomainsAuthToken";
export type IdentityDomainsAuthToken = import("./identityDomainsAuthToken").IdentityDomainsAuthToken;
export const IdentityDomainsAuthToken: typeof import("./identityDomainsAuthToken").IdentityDomainsAuthToken = null as any;
utilities.lazyLoad(exports, ["IdentityDomainsAuthToken"], () => require("./identityDomainsAuthToken"));

export { IdentityDomainsAuthenticationFactorSettingArgs, IdentityDomainsAuthenticationFactorSettingState } from "./identityDomainsAuthenticationFactorSetting";
export type IdentityDomainsAuthenticationFactorSetting = import("./identityDomainsAuthenticationFactorSetting").IdentityDomainsAuthenticationFactorSetting;
export const IdentityDomainsAuthenticationFactorSetting: typeof import("./identityDomainsAuthenticationFactorSetting").IdentityDomainsAuthenticationFactorSetting = null as any;
utilities.lazyLoad(exports, ["IdentityDomainsAuthenticationFactorSetting"], () => require("./identityDomainsAuthenticationFactorSetting"));

export { IdentityDomainsCloudGateArgs, IdentityDomainsCloudGateState } from "./identityDomainsCloudGate";
export type IdentityDomainsCloudGate = import("./identityDomainsCloudGate").IdentityDomainsCloudGate;
export const IdentityDomainsCloudGate: typeof import("./identityDomainsCloudGate").IdentityDomainsCloudGate = null as any;
utilities.lazyLoad(exports, ["IdentityDomainsCloudGate"], () => require("./identityDomainsCloudGate"));

export { IdentityDomainsCloudGateMappingArgs, IdentityDomainsCloudGateMappingState } from "./identityDomainsCloudGateMapping";
export type IdentityDomainsCloudGateMapping = import("./identityDomainsCloudGateMapping").IdentityDomainsCloudGateMapping;
export const IdentityDomainsCloudGateMapping: typeof import("./identityDomainsCloudGateMapping").IdentityDomainsCloudGateMapping = null as any;
utilities.lazyLoad(exports, ["IdentityDomainsCloudGateMapping"], () => require("./identityDomainsCloudGateMapping"));

export { IdentityDomainsCloudGateServerArgs, IdentityDomainsCloudGateServerState } from "./identityDomainsCloudGateServer";
export type IdentityDomainsCloudGateServer = import("./identityDomainsCloudGateServer").IdentityDomainsCloudGateServer;
export const IdentityDomainsCloudGateServer: typeof import("./identityDomainsCloudGateServer").IdentityDomainsCloudGateServer = null as any;
utilities.lazyLoad(exports, ["IdentityDomainsCloudGateServer"], () => require("./identityDomainsCloudGateServer"));

export { IdentityDomainsConditionArgs, IdentityDomainsConditionState } from "./identityDomainsCondition";
export type IdentityDomainsCondition = import("./identityDomainsCondition").IdentityDomainsCondition;
export const IdentityDomainsCondition: typeof import("./identityDomainsCondition").IdentityDomainsCondition = null as any;
utilities.lazyLoad(exports, ["IdentityDomainsCondition"], () => require("./identityDomainsCondition"));

export { IdentityDomainsCustomerSecretKeyArgs, IdentityDomainsCustomerSecretKeyState } from "./identityDomainsCustomerSecretKey";
export type IdentityDomainsCustomerSecretKey = import("./identityDomainsCustomerSecretKey").IdentityDomainsCustomerSecretKey;
export const IdentityDomainsCustomerSecretKey: typeof import("./identityDomainsCustomerSecretKey").IdentityDomainsCustomerSecretKey = null as any;
utilities.lazyLoad(exports, ["IdentityDomainsCustomerSecretKey"], () => require("./identityDomainsCustomerSecretKey"));

export { IdentityDomainsDynamicResourceGroupArgs, IdentityDomainsDynamicResourceGroupState } from "./identityDomainsDynamicResourceGroup";
export type IdentityDomainsDynamicResourceGroup = import("./identityDomainsDynamicResourceGroup").IdentityDomainsDynamicResourceGroup;
export const IdentityDomainsDynamicResourceGroup: typeof import("./identityDomainsDynamicResourceGroup").IdentityDomainsDynamicResourceGroup = null as any;
utilities.lazyLoad(exports, ["IdentityDomainsDynamicResourceGroup"], () => require("./identityDomainsDynamicResourceGroup"));

export { IdentityDomainsGrantArgs, IdentityDomainsGrantState } from "./identityDomainsGrant";
export type IdentityDomainsGrant = import("./identityDomainsGrant").IdentityDomainsGrant;
export const IdentityDomainsGrant: typeof import("./identityDomainsGrant").IdentityDomainsGrant = null as any;
utilities.lazyLoad(exports, ["IdentityDomainsGrant"], () => require("./identityDomainsGrant"));

export { IdentityDomainsGroupArgs, IdentityDomainsGroupState } from "./identityDomainsGroup";
export type IdentityDomainsGroup = import("./identityDomainsGroup").IdentityDomainsGroup;
export const IdentityDomainsGroup: typeof import("./identityDomainsGroup").IdentityDomainsGroup = null as any;
utilities.lazyLoad(exports, ["IdentityDomainsGroup"], () => require("./identityDomainsGroup"));

export { IdentityDomainsIdentityPropagationTrustArgs, IdentityDomainsIdentityPropagationTrustState } from "./identityDomainsIdentityPropagationTrust";
export type IdentityDomainsIdentityPropagationTrust = import("./identityDomainsIdentityPropagationTrust").IdentityDomainsIdentityPropagationTrust;
export const IdentityDomainsIdentityPropagationTrust: typeof import("./identityDomainsIdentityPropagationTrust").IdentityDomainsIdentityPropagationTrust = null as any;
utilities.lazyLoad(exports, ["IdentityDomainsIdentityPropagationTrust"], () => require("./identityDomainsIdentityPropagationTrust"));

export { IdentityDomainsIdentityProviderArgs, IdentityDomainsIdentityProviderState } from "./identityDomainsIdentityProvider";
export type IdentityDomainsIdentityProvider = import("./identityDomainsIdentityProvider").IdentityDomainsIdentityProvider;
export const IdentityDomainsIdentityProvider: typeof import("./identityDomainsIdentityProvider").IdentityDomainsIdentityProvider = null as any;
utilities.lazyLoad(exports, ["IdentityDomainsIdentityProvider"], () => require("./identityDomainsIdentityProvider"));

export { IdentityDomainsIdentitySettingArgs, IdentityDomainsIdentitySettingState } from "./identityDomainsIdentitySetting";
export type IdentityDomainsIdentitySetting = import("./identityDomainsIdentitySetting").IdentityDomainsIdentitySetting;
export const IdentityDomainsIdentitySetting: typeof import("./identityDomainsIdentitySetting").IdentityDomainsIdentitySetting = null as any;
utilities.lazyLoad(exports, ["IdentityDomainsIdentitySetting"], () => require("./identityDomainsIdentitySetting"));

export { IdentityDomainsKmsiSettingArgs, IdentityDomainsKmsiSettingState } from "./identityDomainsKmsiSetting";
export type IdentityDomainsKmsiSetting = import("./identityDomainsKmsiSetting").IdentityDomainsKmsiSetting;
export const IdentityDomainsKmsiSetting: typeof import("./identityDomainsKmsiSetting").IdentityDomainsKmsiSetting = null as any;
utilities.lazyLoad(exports, ["IdentityDomainsKmsiSetting"], () => require("./identityDomainsKmsiSetting"));

export { IdentityDomainsMyApiKeyArgs, IdentityDomainsMyApiKeyState } from "./identityDomainsMyApiKey";
export type IdentityDomainsMyApiKey = import("./identityDomainsMyApiKey").IdentityDomainsMyApiKey;
export const IdentityDomainsMyApiKey: typeof import("./identityDomainsMyApiKey").IdentityDomainsMyApiKey = null as any;
utilities.lazyLoad(exports, ["IdentityDomainsMyApiKey"], () => require("./identityDomainsMyApiKey"));

export { IdentityDomainsMyAuthTokenArgs, IdentityDomainsMyAuthTokenState } from "./identityDomainsMyAuthToken";
export type IdentityDomainsMyAuthToken = import("./identityDomainsMyAuthToken").IdentityDomainsMyAuthToken;
export const IdentityDomainsMyAuthToken: typeof import("./identityDomainsMyAuthToken").IdentityDomainsMyAuthToken = null as any;
utilities.lazyLoad(exports, ["IdentityDomainsMyAuthToken"], () => require("./identityDomainsMyAuthToken"));

export { IdentityDomainsMyCustomerSecretKeyArgs, IdentityDomainsMyCustomerSecretKeyState } from "./identityDomainsMyCustomerSecretKey";
export type IdentityDomainsMyCustomerSecretKey = import("./identityDomainsMyCustomerSecretKey").IdentityDomainsMyCustomerSecretKey;
export const IdentityDomainsMyCustomerSecretKey: typeof import("./identityDomainsMyCustomerSecretKey").IdentityDomainsMyCustomerSecretKey = null as any;
utilities.lazyLoad(exports, ["IdentityDomainsMyCustomerSecretKey"], () => require("./identityDomainsMyCustomerSecretKey"));

export { IdentityDomainsMyOauth2clientCredentialArgs, IdentityDomainsMyOauth2clientCredentialState } from "./identityDomainsMyOauth2clientCredential";
export type IdentityDomainsMyOauth2clientCredential = import("./identityDomainsMyOauth2clientCredential").IdentityDomainsMyOauth2clientCredential;
export const IdentityDomainsMyOauth2clientCredential: typeof import("./identityDomainsMyOauth2clientCredential").IdentityDomainsMyOauth2clientCredential = null as any;
utilities.lazyLoad(exports, ["IdentityDomainsMyOauth2clientCredential"], () => require("./identityDomainsMyOauth2clientCredential"));

export { IdentityDomainsMyRequestArgs, IdentityDomainsMyRequestState } from "./identityDomainsMyRequest";
export type IdentityDomainsMyRequest = import("./identityDomainsMyRequest").IdentityDomainsMyRequest;
export const IdentityDomainsMyRequest: typeof import("./identityDomainsMyRequest").IdentityDomainsMyRequest = null as any;
utilities.lazyLoad(exports, ["IdentityDomainsMyRequest"], () => require("./identityDomainsMyRequest"));

export { IdentityDomainsMySmtpCredentialArgs, IdentityDomainsMySmtpCredentialState } from "./identityDomainsMySmtpCredential";
export type IdentityDomainsMySmtpCredential = import("./identityDomainsMySmtpCredential").IdentityDomainsMySmtpCredential;
export const IdentityDomainsMySmtpCredential: typeof import("./identityDomainsMySmtpCredential").IdentityDomainsMySmtpCredential = null as any;
utilities.lazyLoad(exports, ["IdentityDomainsMySmtpCredential"], () => require("./identityDomainsMySmtpCredential"));

export { IdentityDomainsMySupportAccountArgs, IdentityDomainsMySupportAccountState } from "./identityDomainsMySupportAccount";
export type IdentityDomainsMySupportAccount = import("./identityDomainsMySupportAccount").IdentityDomainsMySupportAccount;
export const IdentityDomainsMySupportAccount: typeof import("./identityDomainsMySupportAccount").IdentityDomainsMySupportAccount = null as any;
utilities.lazyLoad(exports, ["IdentityDomainsMySupportAccount"], () => require("./identityDomainsMySupportAccount"));

export { IdentityDomainsMyUserDbCredentialArgs, IdentityDomainsMyUserDbCredentialState } from "./identityDomainsMyUserDbCredential";
export type IdentityDomainsMyUserDbCredential = import("./identityDomainsMyUserDbCredential").IdentityDomainsMyUserDbCredential;
export const IdentityDomainsMyUserDbCredential: typeof import("./identityDomainsMyUserDbCredential").IdentityDomainsMyUserDbCredential = null as any;
utilities.lazyLoad(exports, ["IdentityDomainsMyUserDbCredential"], () => require("./identityDomainsMyUserDbCredential"));

export { IdentityDomainsNetworkPerimeterArgs, IdentityDomainsNetworkPerimeterState } from "./identityDomainsNetworkPerimeter";
export type IdentityDomainsNetworkPerimeter = import("./identityDomainsNetworkPerimeter").IdentityDomainsNetworkPerimeter;
export const IdentityDomainsNetworkPerimeter: typeof import("./identityDomainsNetworkPerimeter").IdentityDomainsNetworkPerimeter = null as any;
utilities.lazyLoad(exports, ["IdentityDomainsNetworkPerimeter"], () => require("./identityDomainsNetworkPerimeter"));

export { IdentityDomainsNotificationSettingArgs, IdentityDomainsNotificationSettingState } from "./identityDomainsNotificationSetting";
export type IdentityDomainsNotificationSetting = import("./identityDomainsNotificationSetting").IdentityDomainsNotificationSetting;
export const IdentityDomainsNotificationSetting: typeof import("./identityDomainsNotificationSetting").IdentityDomainsNotificationSetting = null as any;
utilities.lazyLoad(exports, ["IdentityDomainsNotificationSetting"], () => require("./identityDomainsNotificationSetting"));

export { IdentityDomainsOauth2clientCredentialArgs, IdentityDomainsOauth2clientCredentialState } from "./identityDomainsOauth2clientCredential";
export type IdentityDomainsOauth2clientCredential = import("./identityDomainsOauth2clientCredential").IdentityDomainsOauth2clientCredential;
export const IdentityDomainsOauth2clientCredential: typeof import("./identityDomainsOauth2clientCredential").IdentityDomainsOauth2clientCredential = null as any;
utilities.lazyLoad(exports, ["IdentityDomainsOauth2clientCredential"], () => require("./identityDomainsOauth2clientCredential"));

export { IdentityDomainsOauthClientCertificateArgs, IdentityDomainsOauthClientCertificateState } from "./identityDomainsOauthClientCertificate";
export type IdentityDomainsOauthClientCertificate = import("./identityDomainsOauthClientCertificate").IdentityDomainsOauthClientCertificate;
export const IdentityDomainsOauthClientCertificate: typeof import("./identityDomainsOauthClientCertificate").IdentityDomainsOauthClientCertificate = null as any;
utilities.lazyLoad(exports, ["IdentityDomainsOauthClientCertificate"], () => require("./identityDomainsOauthClientCertificate"));

export { IdentityDomainsOauthPartnerCertificateArgs, IdentityDomainsOauthPartnerCertificateState } from "./identityDomainsOauthPartnerCertificate";
export type IdentityDomainsOauthPartnerCertificate = import("./identityDomainsOauthPartnerCertificate").IdentityDomainsOauthPartnerCertificate;
export const IdentityDomainsOauthPartnerCertificate: typeof import("./identityDomainsOauthPartnerCertificate").IdentityDomainsOauthPartnerCertificate = null as any;
utilities.lazyLoad(exports, ["IdentityDomainsOauthPartnerCertificate"], () => require("./identityDomainsOauthPartnerCertificate"));

export { IdentityDomainsPasswordPolicyArgs, IdentityDomainsPasswordPolicyState } from "./identityDomainsPasswordPolicy";
export type IdentityDomainsPasswordPolicy = import("./identityDomainsPasswordPolicy").IdentityDomainsPasswordPolicy;
export const IdentityDomainsPasswordPolicy: typeof import("./identityDomainsPasswordPolicy").IdentityDomainsPasswordPolicy = null as any;
utilities.lazyLoad(exports, ["IdentityDomainsPasswordPolicy"], () => require("./identityDomainsPasswordPolicy"));

export { IdentityDomainsPolicyArgs, IdentityDomainsPolicyState } from "./identityDomainsPolicy";
export type IdentityDomainsPolicy = import("./identityDomainsPolicy").IdentityDomainsPolicy;
export const IdentityDomainsPolicy: typeof import("./identityDomainsPolicy").IdentityDomainsPolicy = null as any;
utilities.lazyLoad(exports, ["IdentityDomainsPolicy"], () => require("./identityDomainsPolicy"));

export { IdentityDomainsRuleArgs, IdentityDomainsRuleState } from "./identityDomainsRule";
export type IdentityDomainsRule = import("./identityDomainsRule").IdentityDomainsRule;
export const IdentityDomainsRule: typeof import("./identityDomainsRule").IdentityDomainsRule = null as any;
utilities.lazyLoad(exports, ["IdentityDomainsRule"], () => require("./identityDomainsRule"));

export { IdentityDomainsSecurityQuestionArgs, IdentityDomainsSecurityQuestionState } from "./identityDomainsSecurityQuestion";
export type IdentityDomainsSecurityQuestion = import("./identityDomainsSecurityQuestion").IdentityDomainsSecurityQuestion;
export const IdentityDomainsSecurityQuestion: typeof import("./identityDomainsSecurityQuestion").IdentityDomainsSecurityQuestion = null as any;
utilities.lazyLoad(exports, ["IdentityDomainsSecurityQuestion"], () => require("./identityDomainsSecurityQuestion"));

export { IdentityDomainsSecurityQuestionSettingArgs, IdentityDomainsSecurityQuestionSettingState } from "./identityDomainsSecurityQuestionSetting";
export type IdentityDomainsSecurityQuestionSetting = import("./identityDomainsSecurityQuestionSetting").IdentityDomainsSecurityQuestionSetting;
export const IdentityDomainsSecurityQuestionSetting: typeof import("./identityDomainsSecurityQuestionSetting").IdentityDomainsSecurityQuestionSetting = null as any;
utilities.lazyLoad(exports, ["IdentityDomainsSecurityQuestionSetting"], () => require("./identityDomainsSecurityQuestionSetting"));

export { IdentityDomainsSelfRegistrationProfileArgs, IdentityDomainsSelfRegistrationProfileState } from "./identityDomainsSelfRegistrationProfile";
export type IdentityDomainsSelfRegistrationProfile = import("./identityDomainsSelfRegistrationProfile").IdentityDomainsSelfRegistrationProfile;
export const IdentityDomainsSelfRegistrationProfile: typeof import("./identityDomainsSelfRegistrationProfile").IdentityDomainsSelfRegistrationProfile = null as any;
utilities.lazyLoad(exports, ["IdentityDomainsSelfRegistrationProfile"], () => require("./identityDomainsSelfRegistrationProfile"));

export { IdentityDomainsSettingArgs, IdentityDomainsSettingState } from "./identityDomainsSetting";
export type IdentityDomainsSetting = import("./identityDomainsSetting").IdentityDomainsSetting;
export const IdentityDomainsSetting: typeof import("./identityDomainsSetting").IdentityDomainsSetting = null as any;
utilities.lazyLoad(exports, ["IdentityDomainsSetting"], () => require("./identityDomainsSetting"));

export { IdentityDomainsSmtpCredentialArgs, IdentityDomainsSmtpCredentialState } from "./identityDomainsSmtpCredential";
export type IdentityDomainsSmtpCredential = import("./identityDomainsSmtpCredential").IdentityDomainsSmtpCredential;
export const IdentityDomainsSmtpCredential: typeof import("./identityDomainsSmtpCredential").IdentityDomainsSmtpCredential = null as any;
utilities.lazyLoad(exports, ["IdentityDomainsSmtpCredential"], () => require("./identityDomainsSmtpCredential"));

export { IdentityDomainsSocialIdentityProviderArgs, IdentityDomainsSocialIdentityProviderState } from "./identityDomainsSocialIdentityProvider";
export type IdentityDomainsSocialIdentityProvider = import("./identityDomainsSocialIdentityProvider").IdentityDomainsSocialIdentityProvider;
export const IdentityDomainsSocialIdentityProvider: typeof import("./identityDomainsSocialIdentityProvider").IdentityDomainsSocialIdentityProvider = null as any;
utilities.lazyLoad(exports, ["IdentityDomainsSocialIdentityProvider"], () => require("./identityDomainsSocialIdentityProvider"));

export { IdentityDomainsUserArgs, IdentityDomainsUserState } from "./identityDomainsUser";
export type IdentityDomainsUser = import("./identityDomainsUser").IdentityDomainsUser;
export const IdentityDomainsUser: typeof import("./identityDomainsUser").IdentityDomainsUser = null as any;
utilities.lazyLoad(exports, ["IdentityDomainsUser"], () => require("./identityDomainsUser"));

export { IdentityDomainsUserDbCredentialArgs, IdentityDomainsUserDbCredentialState } from "./identityDomainsUserDbCredential";
export type IdentityDomainsUserDbCredential = import("./identityDomainsUserDbCredential").IdentityDomainsUserDbCredential;
export const IdentityDomainsUserDbCredential: typeof import("./identityDomainsUserDbCredential").IdentityDomainsUserDbCredential = null as any;
utilities.lazyLoad(exports, ["IdentityDomainsUserDbCredential"], () => require("./identityDomainsUserDbCredential"));

export { IdentityDynamicGroupArgs, IdentityDynamicGroupState } from "./identityDynamicGroup";
export type IdentityDynamicGroup = import("./identityDynamicGroup").IdentityDynamicGroup;
export const IdentityDynamicGroup: typeof import("./identityDynamicGroup").IdentityDynamicGroup = null as any;
utilities.lazyLoad(exports, ["IdentityDynamicGroup"], () => require("./identityDynamicGroup"));

export { IdentityGroupArgs, IdentityGroupState } from "./identityGroup";
export type IdentityGroup = import("./identityGroup").IdentityGroup;
export const IdentityGroup: typeof import("./identityGroup").IdentityGroup = null as any;
utilities.lazyLoad(exports, ["IdentityGroup"], () => require("./identityGroup"));

export { IdentityIdentityProviderArgs, IdentityIdentityProviderState } from "./identityIdentityProvider";
export type IdentityIdentityProvider = import("./identityIdentityProvider").IdentityIdentityProvider;
export const IdentityIdentityProvider: typeof import("./identityIdentityProvider").IdentityIdentityProvider = null as any;
utilities.lazyLoad(exports, ["IdentityIdentityProvider"], () => require("./identityIdentityProvider"));

export { IdentityIdpGroupMappingArgs, IdentityIdpGroupMappingState } from "./identityIdpGroupMapping";
export type IdentityIdpGroupMapping = import("./identityIdpGroupMapping").IdentityIdpGroupMapping;
export const IdentityIdpGroupMapping: typeof import("./identityIdpGroupMapping").IdentityIdpGroupMapping = null as any;
utilities.lazyLoad(exports, ["IdentityIdpGroupMapping"], () => require("./identityIdpGroupMapping"));

export { IdentityImportStandardTagsManagementArgs, IdentityImportStandardTagsManagementState } from "./identityImportStandardTagsManagement";
export type IdentityImportStandardTagsManagement = import("./identityImportStandardTagsManagement").IdentityImportStandardTagsManagement;
export const IdentityImportStandardTagsManagement: typeof import("./identityImportStandardTagsManagement").IdentityImportStandardTagsManagement = null as any;
utilities.lazyLoad(exports, ["IdentityImportStandardTagsManagement"], () => require("./identityImportStandardTagsManagement"));

export { IdentityNetworkSourceArgs, IdentityNetworkSourceState } from "./identityNetworkSource";
export type IdentityNetworkSource = import("./identityNetworkSource").IdentityNetworkSource;
export const IdentityNetworkSource: typeof import("./identityNetworkSource").IdentityNetworkSource = null as any;
utilities.lazyLoad(exports, ["IdentityNetworkSource"], () => require("./identityNetworkSource"));

export { IdentityPolicyArgs, IdentityPolicyState } from "./identityPolicy";
export type IdentityPolicy = import("./identityPolicy").IdentityPolicy;
export const IdentityPolicy: typeof import("./identityPolicy").IdentityPolicy = null as any;
utilities.lazyLoad(exports, ["IdentityPolicy"], () => require("./identityPolicy"));

export { IdentitySmtpCredentialArgs, IdentitySmtpCredentialState } from "./identitySmtpCredential";
export type IdentitySmtpCredential = import("./identitySmtpCredential").IdentitySmtpCredential;
export const IdentitySmtpCredential: typeof import("./identitySmtpCredential").IdentitySmtpCredential = null as any;
utilities.lazyLoad(exports, ["IdentitySmtpCredential"], () => require("./identitySmtpCredential"));

export { IdentityTagArgs, IdentityTagState } from "./identityTag";
export type IdentityTag = import("./identityTag").IdentityTag;
export const IdentityTag: typeof import("./identityTag").IdentityTag = null as any;
utilities.lazyLoad(exports, ["IdentityTag"], () => require("./identityTag"));

export { IdentityTagDefaultArgs, IdentityTagDefaultState } from "./identityTagDefault";
export type IdentityTagDefault = import("./identityTagDefault").IdentityTagDefault;
export const IdentityTagDefault: typeof import("./identityTagDefault").IdentityTagDefault = null as any;
utilities.lazyLoad(exports, ["IdentityTagDefault"], () => require("./identityTagDefault"));

export { IdentityTagNamespaceArgs, IdentityTagNamespaceState } from "./identityTagNamespace";
export type IdentityTagNamespace = import("./identityTagNamespace").IdentityTagNamespace;
export const IdentityTagNamespace: typeof import("./identityTagNamespace").IdentityTagNamespace = null as any;
utilities.lazyLoad(exports, ["IdentityTagNamespace"], () => require("./identityTagNamespace"));

export { IdentityUiPasswordArgs, IdentityUiPasswordState } from "./identityUiPassword";
export type IdentityUiPassword = import("./identityUiPassword").IdentityUiPassword;
export const IdentityUiPassword: typeof import("./identityUiPassword").IdentityUiPassword = null as any;
utilities.lazyLoad(exports, ["IdentityUiPassword"], () => require("./identityUiPassword"));

export { IdentityUserArgs, IdentityUserState } from "./identityUser";
export type IdentityUser = import("./identityUser").IdentityUser;
export const IdentityUser: typeof import("./identityUser").IdentityUser = null as any;
utilities.lazyLoad(exports, ["IdentityUser"], () => require("./identityUser"));

export { IdentityUserCapabilitiesManagementArgs, IdentityUserCapabilitiesManagementState } from "./identityUserCapabilitiesManagement";
export type IdentityUserCapabilitiesManagement = import("./identityUserCapabilitiesManagement").IdentityUserCapabilitiesManagement;
export const IdentityUserCapabilitiesManagement: typeof import("./identityUserCapabilitiesManagement").IdentityUserCapabilitiesManagement = null as any;
utilities.lazyLoad(exports, ["IdentityUserCapabilitiesManagement"], () => require("./identityUserCapabilitiesManagement"));

export { IdentityUserGroupMembershipArgs, IdentityUserGroupMembershipState } from "./identityUserGroupMembership";
export type IdentityUserGroupMembership = import("./identityUserGroupMembership").IdentityUserGroupMembership;
export const IdentityUserGroupMembership: typeof import("./identityUserGroupMembership").IdentityUserGroupMembership = null as any;
utilities.lazyLoad(exports, ["IdentityUserGroupMembership"], () => require("./identityUserGroupMembership"));

export { IntegrationIntegrationInstanceArgs, IntegrationIntegrationInstanceState } from "./integrationIntegrationInstance";
export type IntegrationIntegrationInstance = import("./integrationIntegrationInstance").IntegrationIntegrationInstance;
export const IntegrationIntegrationInstance: typeof import("./integrationIntegrationInstance").IntegrationIntegrationInstance = null as any;
utilities.lazyLoad(exports, ["IntegrationIntegrationInstance"], () => require("./integrationIntegrationInstance"));

export { IntegrationPrivateEndpointOutboundConnectionArgs, IntegrationPrivateEndpointOutboundConnectionState } from "./integrationPrivateEndpointOutboundConnection";
export type IntegrationPrivateEndpointOutboundConnection = import("./integrationPrivateEndpointOutboundConnection").IntegrationPrivateEndpointOutboundConnection;
export const IntegrationPrivateEndpointOutboundConnection: typeof import("./integrationPrivateEndpointOutboundConnection").IntegrationPrivateEndpointOutboundConnection = null as any;
utilities.lazyLoad(exports, ["IntegrationPrivateEndpointOutboundConnection"], () => require("./integrationPrivateEndpointOutboundConnection"));

export { JmsFleetArgs, JmsFleetState } from "./jmsFleet";
export type JmsFleet = import("./jmsFleet").JmsFleet;
export const JmsFleet: typeof import("./jmsFleet").JmsFleet = null as any;
utilities.lazyLoad(exports, ["JmsFleet"], () => require("./jmsFleet"));

export { JmsFleetAdvancedFeatureConfigurationArgs, JmsFleetAdvancedFeatureConfigurationState } from "./jmsFleetAdvancedFeatureConfiguration";
export type JmsFleetAdvancedFeatureConfiguration = import("./jmsFleetAdvancedFeatureConfiguration").JmsFleetAdvancedFeatureConfiguration;
export const JmsFleetAdvancedFeatureConfiguration: typeof import("./jmsFleetAdvancedFeatureConfiguration").JmsFleetAdvancedFeatureConfiguration = null as any;
utilities.lazyLoad(exports, ["JmsFleetAdvancedFeatureConfiguration"], () => require("./jmsFleetAdvancedFeatureConfiguration"));

export { JmsJavaDownloadsJavaDownloadReportArgs, JmsJavaDownloadsJavaDownloadReportState } from "./jmsJavaDownloadsJavaDownloadReport";
export type JmsJavaDownloadsJavaDownloadReport = import("./jmsJavaDownloadsJavaDownloadReport").JmsJavaDownloadsJavaDownloadReport;
export const JmsJavaDownloadsJavaDownloadReport: typeof import("./jmsJavaDownloadsJavaDownloadReport").JmsJavaDownloadsJavaDownloadReport = null as any;
utilities.lazyLoad(exports, ["JmsJavaDownloadsJavaDownloadReport"], () => require("./jmsJavaDownloadsJavaDownloadReport"));

export { JmsJavaDownloadsJavaDownloadTokenArgs, JmsJavaDownloadsJavaDownloadTokenState } from "./jmsJavaDownloadsJavaDownloadToken";
export type JmsJavaDownloadsJavaDownloadToken = import("./jmsJavaDownloadsJavaDownloadToken").JmsJavaDownloadsJavaDownloadToken;
export const JmsJavaDownloadsJavaDownloadToken: typeof import("./jmsJavaDownloadsJavaDownloadToken").JmsJavaDownloadsJavaDownloadToken = null as any;
utilities.lazyLoad(exports, ["JmsJavaDownloadsJavaDownloadToken"], () => require("./jmsJavaDownloadsJavaDownloadToken"));

export { JmsJavaDownloadsJavaLicenseAcceptanceRecordArgs, JmsJavaDownloadsJavaLicenseAcceptanceRecordState } from "./jmsJavaDownloadsJavaLicenseAcceptanceRecord";
export type JmsJavaDownloadsJavaLicenseAcceptanceRecord = import("./jmsJavaDownloadsJavaLicenseAcceptanceRecord").JmsJavaDownloadsJavaLicenseAcceptanceRecord;
export const JmsJavaDownloadsJavaLicenseAcceptanceRecord: typeof import("./jmsJavaDownloadsJavaLicenseAcceptanceRecord").JmsJavaDownloadsJavaLicenseAcceptanceRecord = null as any;
utilities.lazyLoad(exports, ["JmsJavaDownloadsJavaLicenseAcceptanceRecord"], () => require("./jmsJavaDownloadsJavaLicenseAcceptanceRecord"));

export { JmsJmsPluginArgs, JmsJmsPluginState } from "./jmsJmsPlugin";
export type JmsJmsPlugin = import("./jmsJmsPlugin").JmsJmsPlugin;
export const JmsJmsPlugin: typeof import("./jmsJmsPlugin").JmsJmsPlugin = null as any;
utilities.lazyLoad(exports, ["JmsJmsPlugin"], () => require("./jmsJmsPlugin"));

export { KmsEkmsPrivateEndpointArgs, KmsEkmsPrivateEndpointState } from "./kmsEkmsPrivateEndpoint";
export type KmsEkmsPrivateEndpoint = import("./kmsEkmsPrivateEndpoint").KmsEkmsPrivateEndpoint;
export const KmsEkmsPrivateEndpoint: typeof import("./kmsEkmsPrivateEndpoint").KmsEkmsPrivateEndpoint = null as any;
utilities.lazyLoad(exports, ["KmsEkmsPrivateEndpoint"], () => require("./kmsEkmsPrivateEndpoint"));

export { KmsEncryptedDataArgs, KmsEncryptedDataState } from "./kmsEncryptedData";
export type KmsEncryptedData = import("./kmsEncryptedData").KmsEncryptedData;
export const KmsEncryptedData: typeof import("./kmsEncryptedData").KmsEncryptedData = null as any;
utilities.lazyLoad(exports, ["KmsEncryptedData"], () => require("./kmsEncryptedData"));

export { KmsGeneratedKeyArgs, KmsGeneratedKeyState } from "./kmsGeneratedKey";
export type KmsGeneratedKey = import("./kmsGeneratedKey").KmsGeneratedKey;
export const KmsGeneratedKey: typeof import("./kmsGeneratedKey").KmsGeneratedKey = null as any;
utilities.lazyLoad(exports, ["KmsGeneratedKey"], () => require("./kmsGeneratedKey"));

export { KmsKeyArgs, KmsKeyState } from "./kmsKey";
export type KmsKey = import("./kmsKey").KmsKey;
export const KmsKey: typeof import("./kmsKey").KmsKey = null as any;
utilities.lazyLoad(exports, ["KmsKey"], () => require("./kmsKey"));

export { KmsKeyVersionArgs, KmsKeyVersionState } from "./kmsKeyVersion";
export type KmsKeyVersion = import("./kmsKeyVersion").KmsKeyVersion;
export const KmsKeyVersion: typeof import("./kmsKeyVersion").KmsKeyVersion = null as any;
utilities.lazyLoad(exports, ["KmsKeyVersion"], () => require("./kmsKeyVersion"));

export { KmsSignArgs, KmsSignState } from "./kmsSign";
export type KmsSign = import("./kmsSign").KmsSign;
export const KmsSign: typeof import("./kmsSign").KmsSign = null as any;
utilities.lazyLoad(exports, ["KmsSign"], () => require("./kmsSign"));

export { KmsVaultArgs, KmsVaultState } from "./kmsVault";
export type KmsVault = import("./kmsVault").KmsVault;
export const KmsVault: typeof import("./kmsVault").KmsVault = null as any;
utilities.lazyLoad(exports, ["KmsVault"], () => require("./kmsVault"));

export { KmsVaultReplicationArgs, KmsVaultReplicationState } from "./kmsVaultReplication";
export type KmsVaultReplication = import("./kmsVaultReplication").KmsVaultReplication;
export const KmsVaultReplication: typeof import("./kmsVaultReplication").KmsVaultReplication = null as any;
utilities.lazyLoad(exports, ["KmsVaultReplication"], () => require("./kmsVaultReplication"));

export { KmsVerifyArgs, KmsVerifyState } from "./kmsVerify";
export type KmsVerify = import("./kmsVerify").KmsVerify;
export const KmsVerify: typeof import("./kmsVerify").KmsVerify = null as any;
utilities.lazyLoad(exports, ["KmsVerify"], () => require("./kmsVerify"));

export { LicenseManagerConfigurationArgs, LicenseManagerConfigurationState } from "./licenseManagerConfiguration";
export type LicenseManagerConfiguration = import("./licenseManagerConfiguration").LicenseManagerConfiguration;
export const LicenseManagerConfiguration: typeof import("./licenseManagerConfiguration").LicenseManagerConfiguration = null as any;
utilities.lazyLoad(exports, ["LicenseManagerConfiguration"], () => require("./licenseManagerConfiguration"));

export { LicenseManagerLicenseRecordArgs, LicenseManagerLicenseRecordState } from "./licenseManagerLicenseRecord";
export type LicenseManagerLicenseRecord = import("./licenseManagerLicenseRecord").LicenseManagerLicenseRecord;
export const LicenseManagerLicenseRecord: typeof import("./licenseManagerLicenseRecord").LicenseManagerLicenseRecord = null as any;
utilities.lazyLoad(exports, ["LicenseManagerLicenseRecord"], () => require("./licenseManagerLicenseRecord"));

export { LicenseManagerProductLicenseArgs, LicenseManagerProductLicenseState } from "./licenseManagerProductLicense";
export type LicenseManagerProductLicense = import("./licenseManagerProductLicense").LicenseManagerProductLicense;
export const LicenseManagerProductLicense: typeof import("./licenseManagerProductLicense").LicenseManagerProductLicense = null as any;
utilities.lazyLoad(exports, ["LicenseManagerProductLicense"], () => require("./licenseManagerProductLicense"));

export { LimitsQuotaArgs, LimitsQuotaState } from "./limitsQuota";
export type LimitsQuota = import("./limitsQuota").LimitsQuota;
export const LimitsQuota: typeof import("./limitsQuota").LimitsQuota = null as any;
utilities.lazyLoad(exports, ["LimitsQuota"], () => require("./limitsQuota"));

export { LoadBalancerArgs, LoadBalancerState } from "./loadBalancer";
export type LoadBalancer = import("./loadBalancer").LoadBalancer;
export const LoadBalancer: typeof import("./loadBalancer").LoadBalancer = null as any;
utilities.lazyLoad(exports, ["LoadBalancer"], () => require("./loadBalancer"));

export { LoadBalancerBackendArgs, LoadBalancerBackendState } from "./loadBalancerBackend";
export type LoadBalancerBackend = import("./loadBalancerBackend").LoadBalancerBackend;
export const LoadBalancerBackend: typeof import("./loadBalancerBackend").LoadBalancerBackend = null as any;
utilities.lazyLoad(exports, ["LoadBalancerBackend"], () => require("./loadBalancerBackend"));

export { LoadBalancerBackendSetArgs, LoadBalancerBackendSetState } from "./loadBalancerBackendSet";
export type LoadBalancerBackendSet = import("./loadBalancerBackendSet").LoadBalancerBackendSet;
export const LoadBalancerBackendSet: typeof import("./loadBalancerBackendSet").LoadBalancerBackendSet = null as any;
utilities.lazyLoad(exports, ["LoadBalancerBackendSet"], () => require("./loadBalancerBackendSet"));

export { LoadBalancerBackendsetArgs, LoadBalancerBackendsetState } from "./loadBalancerBackendset";
export type LoadBalancerBackendset = import("./loadBalancerBackendset").LoadBalancerBackendset;
export const LoadBalancerBackendset: typeof import("./loadBalancerBackendset").LoadBalancerBackendset = null as any;
utilities.lazyLoad(exports, ["LoadBalancerBackendset"], () => require("./loadBalancerBackendset"));

export { LoadBalancerCertificateArgs, LoadBalancerCertificateState } from "./loadBalancerCertificate";
export type LoadBalancerCertificate = import("./loadBalancerCertificate").LoadBalancerCertificate;
export const LoadBalancerCertificate: typeof import("./loadBalancerCertificate").LoadBalancerCertificate = null as any;
utilities.lazyLoad(exports, ["LoadBalancerCertificate"], () => require("./loadBalancerCertificate"));

export { LoadBalancerHostnameArgs, LoadBalancerHostnameState } from "./loadBalancerHostname";
export type LoadBalancerHostname = import("./loadBalancerHostname").LoadBalancerHostname;
export const LoadBalancerHostname: typeof import("./loadBalancerHostname").LoadBalancerHostname = null as any;
utilities.lazyLoad(exports, ["LoadBalancerHostname"], () => require("./loadBalancerHostname"));

export { LoadBalancerListenerArgs, LoadBalancerListenerState } from "./loadBalancerListener";
export type LoadBalancerListener = import("./loadBalancerListener").LoadBalancerListener;
export const LoadBalancerListener: typeof import("./loadBalancerListener").LoadBalancerListener = null as any;
utilities.lazyLoad(exports, ["LoadBalancerListener"], () => require("./loadBalancerListener"));

export { LoadBalancerLoadBalancerArgs, LoadBalancerLoadBalancerState } from "./loadBalancerLoadBalancer";
export type LoadBalancerLoadBalancer = import("./loadBalancerLoadBalancer").LoadBalancerLoadBalancer;
export const LoadBalancerLoadBalancer: typeof import("./loadBalancerLoadBalancer").LoadBalancerLoadBalancer = null as any;
utilities.lazyLoad(exports, ["LoadBalancerLoadBalancer"], () => require("./loadBalancerLoadBalancer"));

export { LoadBalancerLoadBalancerRoutingPolicyArgs, LoadBalancerLoadBalancerRoutingPolicyState } from "./loadBalancerLoadBalancerRoutingPolicy";
export type LoadBalancerLoadBalancerRoutingPolicy = import("./loadBalancerLoadBalancerRoutingPolicy").LoadBalancerLoadBalancerRoutingPolicy;
export const LoadBalancerLoadBalancerRoutingPolicy: typeof import("./loadBalancerLoadBalancerRoutingPolicy").LoadBalancerLoadBalancerRoutingPolicy = null as any;
utilities.lazyLoad(exports, ["LoadBalancerLoadBalancerRoutingPolicy"], () => require("./loadBalancerLoadBalancerRoutingPolicy"));

export { LoadBalancerPathRouteSetArgs, LoadBalancerPathRouteSetState } from "./loadBalancerPathRouteSet";
export type LoadBalancerPathRouteSet = import("./loadBalancerPathRouteSet").LoadBalancerPathRouteSet;
export const LoadBalancerPathRouteSet: typeof import("./loadBalancerPathRouteSet").LoadBalancerPathRouteSet = null as any;
utilities.lazyLoad(exports, ["LoadBalancerPathRouteSet"], () => require("./loadBalancerPathRouteSet"));

export { LoadBalancerRuleSetArgs, LoadBalancerRuleSetState } from "./loadBalancerRuleSet";
export type LoadBalancerRuleSet = import("./loadBalancerRuleSet").LoadBalancerRuleSet;
export const LoadBalancerRuleSet: typeof import("./loadBalancerRuleSet").LoadBalancerRuleSet = null as any;
utilities.lazyLoad(exports, ["LoadBalancerRuleSet"], () => require("./loadBalancerRuleSet"));

export { LoadBalancerSslCipherSuiteArgs, LoadBalancerSslCipherSuiteState } from "./loadBalancerSslCipherSuite";
export type LoadBalancerSslCipherSuite = import("./loadBalancerSslCipherSuite").LoadBalancerSslCipherSuite;
export const LoadBalancerSslCipherSuite: typeof import("./loadBalancerSslCipherSuite").LoadBalancerSslCipherSuite = null as any;
utilities.lazyLoad(exports, ["LoadBalancerSslCipherSuite"], () => require("./loadBalancerSslCipherSuite"));

export { LogAnalyticsLogAnalyticsEntityArgs, LogAnalyticsLogAnalyticsEntityState } from "./logAnalyticsLogAnalyticsEntity";
export type LogAnalyticsLogAnalyticsEntity = import("./logAnalyticsLogAnalyticsEntity").LogAnalyticsLogAnalyticsEntity;
export const LogAnalyticsLogAnalyticsEntity: typeof import("./logAnalyticsLogAnalyticsEntity").LogAnalyticsLogAnalyticsEntity = null as any;
utilities.lazyLoad(exports, ["LogAnalyticsLogAnalyticsEntity"], () => require("./logAnalyticsLogAnalyticsEntity"));

export { LogAnalyticsLogAnalyticsImportCustomContentArgs, LogAnalyticsLogAnalyticsImportCustomContentState } from "./logAnalyticsLogAnalyticsImportCustomContent";
export type LogAnalyticsLogAnalyticsImportCustomContent = import("./logAnalyticsLogAnalyticsImportCustomContent").LogAnalyticsLogAnalyticsImportCustomContent;
export const LogAnalyticsLogAnalyticsImportCustomContent: typeof import("./logAnalyticsLogAnalyticsImportCustomContent").LogAnalyticsLogAnalyticsImportCustomContent = null as any;
utilities.lazyLoad(exports, ["LogAnalyticsLogAnalyticsImportCustomContent"], () => require("./logAnalyticsLogAnalyticsImportCustomContent"));

export { LogAnalyticsLogAnalyticsLogGroupArgs, LogAnalyticsLogAnalyticsLogGroupState } from "./logAnalyticsLogAnalyticsLogGroup";
export type LogAnalyticsLogAnalyticsLogGroup = import("./logAnalyticsLogAnalyticsLogGroup").LogAnalyticsLogAnalyticsLogGroup;
export const LogAnalyticsLogAnalyticsLogGroup: typeof import("./logAnalyticsLogAnalyticsLogGroup").LogAnalyticsLogAnalyticsLogGroup = null as any;
utilities.lazyLoad(exports, ["LogAnalyticsLogAnalyticsLogGroup"], () => require("./logAnalyticsLogAnalyticsLogGroup"));

export { LogAnalyticsLogAnalyticsObjectCollectionRuleArgs, LogAnalyticsLogAnalyticsObjectCollectionRuleState } from "./logAnalyticsLogAnalyticsObjectCollectionRule";
export type LogAnalyticsLogAnalyticsObjectCollectionRule = import("./logAnalyticsLogAnalyticsObjectCollectionRule").LogAnalyticsLogAnalyticsObjectCollectionRule;
export const LogAnalyticsLogAnalyticsObjectCollectionRule: typeof import("./logAnalyticsLogAnalyticsObjectCollectionRule").LogAnalyticsLogAnalyticsObjectCollectionRule = null as any;
utilities.lazyLoad(exports, ["LogAnalyticsLogAnalyticsObjectCollectionRule"], () => require("./logAnalyticsLogAnalyticsObjectCollectionRule"));

export { LogAnalyticsLogAnalyticsPreferencesManagementArgs, LogAnalyticsLogAnalyticsPreferencesManagementState } from "./logAnalyticsLogAnalyticsPreferencesManagement";
export type LogAnalyticsLogAnalyticsPreferencesManagement = import("./logAnalyticsLogAnalyticsPreferencesManagement").LogAnalyticsLogAnalyticsPreferencesManagement;
export const LogAnalyticsLogAnalyticsPreferencesManagement: typeof import("./logAnalyticsLogAnalyticsPreferencesManagement").LogAnalyticsLogAnalyticsPreferencesManagement = null as any;
utilities.lazyLoad(exports, ["LogAnalyticsLogAnalyticsPreferencesManagement"], () => require("./logAnalyticsLogAnalyticsPreferencesManagement"));

export { LogAnalyticsLogAnalyticsResourceCategoriesManagementArgs, LogAnalyticsLogAnalyticsResourceCategoriesManagementState } from "./logAnalyticsLogAnalyticsResourceCategoriesManagement";
export type LogAnalyticsLogAnalyticsResourceCategoriesManagement = import("./logAnalyticsLogAnalyticsResourceCategoriesManagement").LogAnalyticsLogAnalyticsResourceCategoriesManagement;
export const LogAnalyticsLogAnalyticsResourceCategoriesManagement: typeof import("./logAnalyticsLogAnalyticsResourceCategoriesManagement").LogAnalyticsLogAnalyticsResourceCategoriesManagement = null as any;
utilities.lazyLoad(exports, ["LogAnalyticsLogAnalyticsResourceCategoriesManagement"], () => require("./logAnalyticsLogAnalyticsResourceCategoriesManagement"));

export { LogAnalyticsLogAnalyticsUnprocessedDataBucketManagementArgs, LogAnalyticsLogAnalyticsUnprocessedDataBucketManagementState } from "./logAnalyticsLogAnalyticsUnprocessedDataBucketManagement";
export type LogAnalyticsLogAnalyticsUnprocessedDataBucketManagement = import("./logAnalyticsLogAnalyticsUnprocessedDataBucketManagement").LogAnalyticsLogAnalyticsUnprocessedDataBucketManagement;
export const LogAnalyticsLogAnalyticsUnprocessedDataBucketManagement: typeof import("./logAnalyticsLogAnalyticsUnprocessedDataBucketManagement").LogAnalyticsLogAnalyticsUnprocessedDataBucketManagement = null as any;
utilities.lazyLoad(exports, ["LogAnalyticsLogAnalyticsUnprocessedDataBucketManagement"], () => require("./logAnalyticsLogAnalyticsUnprocessedDataBucketManagement"));

export { LogAnalyticsNamespaceArgs, LogAnalyticsNamespaceState } from "./logAnalyticsNamespace";
export type LogAnalyticsNamespace = import("./logAnalyticsNamespace").LogAnalyticsNamespace;
export const LogAnalyticsNamespace: typeof import("./logAnalyticsNamespace").LogAnalyticsNamespace = null as any;
utilities.lazyLoad(exports, ["LogAnalyticsNamespace"], () => require("./logAnalyticsNamespace"));

export { LogAnalyticsNamespaceIngestTimeRuleArgs, LogAnalyticsNamespaceIngestTimeRuleState } from "./logAnalyticsNamespaceIngestTimeRule";
export type LogAnalyticsNamespaceIngestTimeRule = import("./logAnalyticsNamespaceIngestTimeRule").LogAnalyticsNamespaceIngestTimeRule;
export const LogAnalyticsNamespaceIngestTimeRule: typeof import("./logAnalyticsNamespaceIngestTimeRule").LogAnalyticsNamespaceIngestTimeRule = null as any;
utilities.lazyLoad(exports, ["LogAnalyticsNamespaceIngestTimeRule"], () => require("./logAnalyticsNamespaceIngestTimeRule"));

export { LogAnalyticsNamespaceIngestTimeRulesManagementArgs, LogAnalyticsNamespaceIngestTimeRulesManagementState } from "./logAnalyticsNamespaceIngestTimeRulesManagement";
export type LogAnalyticsNamespaceIngestTimeRulesManagement = import("./logAnalyticsNamespaceIngestTimeRulesManagement").LogAnalyticsNamespaceIngestTimeRulesManagement;
export const LogAnalyticsNamespaceIngestTimeRulesManagement: typeof import("./logAnalyticsNamespaceIngestTimeRulesManagement").LogAnalyticsNamespaceIngestTimeRulesManagement = null as any;
utilities.lazyLoad(exports, ["LogAnalyticsNamespaceIngestTimeRulesManagement"], () => require("./logAnalyticsNamespaceIngestTimeRulesManagement"));

export { LogAnalyticsNamespaceScheduledTaskArgs, LogAnalyticsNamespaceScheduledTaskState } from "./logAnalyticsNamespaceScheduledTask";
export type LogAnalyticsNamespaceScheduledTask = import("./logAnalyticsNamespaceScheduledTask").LogAnalyticsNamespaceScheduledTask;
export const LogAnalyticsNamespaceScheduledTask: typeof import("./logAnalyticsNamespaceScheduledTask").LogAnalyticsNamespaceScheduledTask = null as any;
utilities.lazyLoad(exports, ["LogAnalyticsNamespaceScheduledTask"], () => require("./logAnalyticsNamespaceScheduledTask"));

export { LoggingLogArgs, LoggingLogState } from "./loggingLog";
export type LoggingLog = import("./loggingLog").LoggingLog;
export const LoggingLog: typeof import("./loggingLog").LoggingLog = null as any;
utilities.lazyLoad(exports, ["LoggingLog"], () => require("./loggingLog"));

export { LoggingLogGroupArgs, LoggingLogGroupState } from "./loggingLogGroup";
export type LoggingLogGroup = import("./loggingLogGroup").LoggingLogGroup;
export const LoggingLogGroup: typeof import("./loggingLogGroup").LoggingLogGroup = null as any;
utilities.lazyLoad(exports, ["LoggingLogGroup"], () => require("./loggingLogGroup"));

export { LoggingLogSavedSearchArgs, LoggingLogSavedSearchState } from "./loggingLogSavedSearch";
export type LoggingLogSavedSearch = import("./loggingLogSavedSearch").LoggingLogSavedSearch;
export const LoggingLogSavedSearch: typeof import("./loggingLogSavedSearch").LoggingLogSavedSearch = null as any;
utilities.lazyLoad(exports, ["LoggingLogSavedSearch"], () => require("./loggingLogSavedSearch"));

export { LoggingUnifiedAgentConfigurationArgs, LoggingUnifiedAgentConfigurationState } from "./loggingUnifiedAgentConfiguration";
export type LoggingUnifiedAgentConfiguration = import("./loggingUnifiedAgentConfiguration").LoggingUnifiedAgentConfiguration;
export const LoggingUnifiedAgentConfiguration: typeof import("./loggingUnifiedAgentConfiguration").LoggingUnifiedAgentConfiguration = null as any;
utilities.lazyLoad(exports, ["LoggingUnifiedAgentConfiguration"], () => require("./loggingUnifiedAgentConfiguration"));

export { ManagementAgentManagementAgentArgs, ManagementAgentManagementAgentState } from "./managementAgentManagementAgent";
export type ManagementAgentManagementAgent = import("./managementAgentManagementAgent").ManagementAgentManagementAgent;
export const ManagementAgentManagementAgent: typeof import("./managementAgentManagementAgent").ManagementAgentManagementAgent = null as any;
utilities.lazyLoad(exports, ["ManagementAgentManagementAgent"], () => require("./managementAgentManagementAgent"));

export { ManagementAgentManagementAgentDataSourceArgs, ManagementAgentManagementAgentDataSourceState } from "./managementAgentManagementAgentDataSource";
export type ManagementAgentManagementAgentDataSource = import("./managementAgentManagementAgentDataSource").ManagementAgentManagementAgentDataSource;
export const ManagementAgentManagementAgentDataSource: typeof import("./managementAgentManagementAgentDataSource").ManagementAgentManagementAgentDataSource = null as any;
utilities.lazyLoad(exports, ["ManagementAgentManagementAgentDataSource"], () => require("./managementAgentManagementAgentDataSource"));

export { ManagementAgentManagementAgentInstallKeyArgs, ManagementAgentManagementAgentInstallKeyState } from "./managementAgentManagementAgentInstallKey";
export type ManagementAgentManagementAgentInstallKey = import("./managementAgentManagementAgentInstallKey").ManagementAgentManagementAgentInstallKey;
export const ManagementAgentManagementAgentInstallKey: typeof import("./managementAgentManagementAgentInstallKey").ManagementAgentManagementAgentInstallKey = null as any;
utilities.lazyLoad(exports, ["ManagementAgentManagementAgentInstallKey"], () => require("./managementAgentManagementAgentInstallKey"));

export { ManagementDashboardManagementDashboardsImportArgs, ManagementDashboardManagementDashboardsImportState } from "./managementDashboardManagementDashboardsImport";
export type ManagementDashboardManagementDashboardsImport = import("./managementDashboardManagementDashboardsImport").ManagementDashboardManagementDashboardsImport;
export const ManagementDashboardManagementDashboardsImport: typeof import("./managementDashboardManagementDashboardsImport").ManagementDashboardManagementDashboardsImport = null as any;
utilities.lazyLoad(exports, ["ManagementDashboardManagementDashboardsImport"], () => require("./managementDashboardManagementDashboardsImport"));

export { MarketplaceAcceptedAgreementArgs, MarketplaceAcceptedAgreementState } from "./marketplaceAcceptedAgreement";
export type MarketplaceAcceptedAgreement = import("./marketplaceAcceptedAgreement").MarketplaceAcceptedAgreement;
export const MarketplaceAcceptedAgreement: typeof import("./marketplaceAcceptedAgreement").MarketplaceAcceptedAgreement = null as any;
utilities.lazyLoad(exports, ["MarketplaceAcceptedAgreement"], () => require("./marketplaceAcceptedAgreement"));

export { MarketplaceListingPackageAgreementArgs, MarketplaceListingPackageAgreementState } from "./marketplaceListingPackageAgreement";
export type MarketplaceListingPackageAgreement = import("./marketplaceListingPackageAgreement").MarketplaceListingPackageAgreement;
export const MarketplaceListingPackageAgreement: typeof import("./marketplaceListingPackageAgreement").MarketplaceListingPackageAgreement = null as any;
utilities.lazyLoad(exports, ["MarketplaceListingPackageAgreement"], () => require("./marketplaceListingPackageAgreement"));

export { MarketplacePublicationArgs, MarketplacePublicationState } from "./marketplacePublication";
export type MarketplacePublication = import("./marketplacePublication").MarketplacePublication;
export const MarketplacePublication: typeof import("./marketplacePublication").MarketplacePublication = null as any;
utilities.lazyLoad(exports, ["MarketplacePublication"], () => require("./marketplacePublication"));

export { MediaServicesMediaAssetArgs, MediaServicesMediaAssetState } from "./mediaServicesMediaAsset";
export type MediaServicesMediaAsset = import("./mediaServicesMediaAsset").MediaServicesMediaAsset;
export const MediaServicesMediaAsset: typeof import("./mediaServicesMediaAsset").MediaServicesMediaAsset = null as any;
utilities.lazyLoad(exports, ["MediaServicesMediaAsset"], () => require("./mediaServicesMediaAsset"));

export { MediaServicesMediaWorkflowArgs, MediaServicesMediaWorkflowState } from "./mediaServicesMediaWorkflow";
export type MediaServicesMediaWorkflow = import("./mediaServicesMediaWorkflow").MediaServicesMediaWorkflow;
export const MediaServicesMediaWorkflow: typeof import("./mediaServicesMediaWorkflow").MediaServicesMediaWorkflow = null as any;
utilities.lazyLoad(exports, ["MediaServicesMediaWorkflow"], () => require("./mediaServicesMediaWorkflow"));

export { MediaServicesMediaWorkflowConfigurationArgs, MediaServicesMediaWorkflowConfigurationState } from "./mediaServicesMediaWorkflowConfiguration";
export type MediaServicesMediaWorkflowConfiguration = import("./mediaServicesMediaWorkflowConfiguration").MediaServicesMediaWorkflowConfiguration;
export const MediaServicesMediaWorkflowConfiguration: typeof import("./mediaServicesMediaWorkflowConfiguration").MediaServicesMediaWorkflowConfiguration = null as any;
utilities.lazyLoad(exports, ["MediaServicesMediaWorkflowConfiguration"], () => require("./mediaServicesMediaWorkflowConfiguration"));

export { MediaServicesMediaWorkflowJobArgs, MediaServicesMediaWorkflowJobState } from "./mediaServicesMediaWorkflowJob";
export type MediaServicesMediaWorkflowJob = import("./mediaServicesMediaWorkflowJob").MediaServicesMediaWorkflowJob;
export const MediaServicesMediaWorkflowJob: typeof import("./mediaServicesMediaWorkflowJob").MediaServicesMediaWorkflowJob = null as any;
utilities.lazyLoad(exports, ["MediaServicesMediaWorkflowJob"], () => require("./mediaServicesMediaWorkflowJob"));

export { MediaServicesStreamCdnConfigArgs, MediaServicesStreamCdnConfigState } from "./mediaServicesStreamCdnConfig";
export type MediaServicesStreamCdnConfig = import("./mediaServicesStreamCdnConfig").MediaServicesStreamCdnConfig;
export const MediaServicesStreamCdnConfig: typeof import("./mediaServicesStreamCdnConfig").MediaServicesStreamCdnConfig = null as any;
utilities.lazyLoad(exports, ["MediaServicesStreamCdnConfig"], () => require("./mediaServicesStreamCdnConfig"));

export { MediaServicesStreamDistributionChannelArgs, MediaServicesStreamDistributionChannelState } from "./mediaServicesStreamDistributionChannel";
export type MediaServicesStreamDistributionChannel = import("./mediaServicesStreamDistributionChannel").MediaServicesStreamDistributionChannel;
export const MediaServicesStreamDistributionChannel: typeof import("./mediaServicesStreamDistributionChannel").MediaServicesStreamDistributionChannel = null as any;
utilities.lazyLoad(exports, ["MediaServicesStreamDistributionChannel"], () => require("./mediaServicesStreamDistributionChannel"));

export { MediaServicesStreamPackagingConfigArgs, MediaServicesStreamPackagingConfigState } from "./mediaServicesStreamPackagingConfig";
export type MediaServicesStreamPackagingConfig = import("./mediaServicesStreamPackagingConfig").MediaServicesStreamPackagingConfig;
export const MediaServicesStreamPackagingConfig: typeof import("./mediaServicesStreamPackagingConfig").MediaServicesStreamPackagingConfig = null as any;
utilities.lazyLoad(exports, ["MediaServicesStreamPackagingConfig"], () => require("./mediaServicesStreamPackagingConfig"));

export { MeteringComputationCustomTableArgs, MeteringComputationCustomTableState } from "./meteringComputationCustomTable";
export type MeteringComputationCustomTable = import("./meteringComputationCustomTable").MeteringComputationCustomTable;
export const MeteringComputationCustomTable: typeof import("./meteringComputationCustomTable").MeteringComputationCustomTable = null as any;
utilities.lazyLoad(exports, ["MeteringComputationCustomTable"], () => require("./meteringComputationCustomTable"));

export { MeteringComputationQueryArgs, MeteringComputationQueryState } from "./meteringComputationQuery";
export type MeteringComputationQuery = import("./meteringComputationQuery").MeteringComputationQuery;
export const MeteringComputationQuery: typeof import("./meteringComputationQuery").MeteringComputationQuery = null as any;
utilities.lazyLoad(exports, ["MeteringComputationQuery"], () => require("./meteringComputationQuery"));

export { MeteringComputationScheduleArgs, MeteringComputationScheduleState } from "./meteringComputationSchedule";
export type MeteringComputationSchedule = import("./meteringComputationSchedule").MeteringComputationSchedule;
export const MeteringComputationSchedule: typeof import("./meteringComputationSchedule").MeteringComputationSchedule = null as any;
utilities.lazyLoad(exports, ["MeteringComputationSchedule"], () => require("./meteringComputationSchedule"));

export { MeteringComputationUsageArgs, MeteringComputationUsageState } from "./meteringComputationUsage";
export type MeteringComputationUsage = import("./meteringComputationUsage").MeteringComputationUsage;
export const MeteringComputationUsage: typeof import("./meteringComputationUsage").MeteringComputationUsage = null as any;
utilities.lazyLoad(exports, ["MeteringComputationUsage"], () => require("./meteringComputationUsage"));

export { MeteringComputationUsageCarbonEmissionArgs, MeteringComputationUsageCarbonEmissionState } from "./meteringComputationUsageCarbonEmission";
export type MeteringComputationUsageCarbonEmission = import("./meteringComputationUsageCarbonEmission").MeteringComputationUsageCarbonEmission;
export const MeteringComputationUsageCarbonEmission: typeof import("./meteringComputationUsageCarbonEmission").MeteringComputationUsageCarbonEmission = null as any;
utilities.lazyLoad(exports, ["MeteringComputationUsageCarbonEmission"], () => require("./meteringComputationUsageCarbonEmission"));

export { MeteringComputationUsageCarbonEmissionsQueryArgs, MeteringComputationUsageCarbonEmissionsQueryState } from "./meteringComputationUsageCarbonEmissionsQuery";
export type MeteringComputationUsageCarbonEmissionsQuery = import("./meteringComputationUsageCarbonEmissionsQuery").MeteringComputationUsageCarbonEmissionsQuery;
export const MeteringComputationUsageCarbonEmissionsQuery: typeof import("./meteringComputationUsageCarbonEmissionsQuery").MeteringComputationUsageCarbonEmissionsQuery = null as any;
utilities.lazyLoad(exports, ["MeteringComputationUsageCarbonEmissionsQuery"], () => require("./meteringComputationUsageCarbonEmissionsQuery"));

export { MeteringComputationUsageStatementEmailRecipientsGroupArgs, MeteringComputationUsageStatementEmailRecipientsGroupState } from "./meteringComputationUsageStatementEmailRecipientsGroup";
export type MeteringComputationUsageStatementEmailRecipientsGroup = import("./meteringComputationUsageStatementEmailRecipientsGroup").MeteringComputationUsageStatementEmailRecipientsGroup;
export const MeteringComputationUsageStatementEmailRecipientsGroup: typeof import("./meteringComputationUsageStatementEmailRecipientsGroup").MeteringComputationUsageStatementEmailRecipientsGroup = null as any;
utilities.lazyLoad(exports, ["MeteringComputationUsageStatementEmailRecipientsGroup"], () => require("./meteringComputationUsageStatementEmailRecipientsGroup"));

export { MonitoringAlarmArgs, MonitoringAlarmState } from "./monitoringAlarm";
export type MonitoringAlarm = import("./monitoringAlarm").MonitoringAlarm;
export const MonitoringAlarm: typeof import("./monitoringAlarm").MonitoringAlarm = null as any;
utilities.lazyLoad(exports, ["MonitoringAlarm"], () => require("./monitoringAlarm"));

export { MonitoringAlarmSuppressionArgs, MonitoringAlarmSuppressionState } from "./monitoringAlarmSuppression";
export type MonitoringAlarmSuppression = import("./monitoringAlarmSuppression").MonitoringAlarmSuppression;
export const MonitoringAlarmSuppression: typeof import("./monitoringAlarmSuppression").MonitoringAlarmSuppression = null as any;
utilities.lazyLoad(exports, ["MonitoringAlarmSuppression"], () => require("./monitoringAlarmSuppression"));

export { MysqlChannelArgs, MysqlChannelState } from "./mysqlChannel";
export type MysqlChannel = import("./mysqlChannel").MysqlChannel;
export const MysqlChannel: typeof import("./mysqlChannel").MysqlChannel = null as any;
utilities.lazyLoad(exports, ["MysqlChannel"], () => require("./mysqlChannel"));

export { MysqlHeatWaveClusterArgs, MysqlHeatWaveClusterState } from "./mysqlHeatWaveCluster";
export type MysqlHeatWaveCluster = import("./mysqlHeatWaveCluster").MysqlHeatWaveCluster;
export const MysqlHeatWaveCluster: typeof import("./mysqlHeatWaveCluster").MysqlHeatWaveCluster = null as any;
utilities.lazyLoad(exports, ["MysqlHeatWaveCluster"], () => require("./mysqlHeatWaveCluster"));

export { MysqlMysqlBackupArgs, MysqlMysqlBackupState } from "./mysqlMysqlBackup";
export type MysqlMysqlBackup = import("./mysqlMysqlBackup").MysqlMysqlBackup;
export const MysqlMysqlBackup: typeof import("./mysqlMysqlBackup").MysqlMysqlBackup = null as any;
utilities.lazyLoad(exports, ["MysqlMysqlBackup"], () => require("./mysqlMysqlBackup"));

export { MysqlMysqlConfigurationArgs, MysqlMysqlConfigurationState } from "./mysqlMysqlConfiguration";
export type MysqlMysqlConfiguration = import("./mysqlMysqlConfiguration").MysqlMysqlConfiguration;
export const MysqlMysqlConfiguration: typeof import("./mysqlMysqlConfiguration").MysqlMysqlConfiguration = null as any;
utilities.lazyLoad(exports, ["MysqlMysqlConfiguration"], () => require("./mysqlMysqlConfiguration"));

export { MysqlMysqlDbSystemArgs, MysqlMysqlDbSystemState } from "./mysqlMysqlDbSystem";
export type MysqlMysqlDbSystem = import("./mysqlMysqlDbSystem").MysqlMysqlDbSystem;
export const MysqlMysqlDbSystem: typeof import("./mysqlMysqlDbSystem").MysqlMysqlDbSystem = null as any;
utilities.lazyLoad(exports, ["MysqlMysqlDbSystem"], () => require("./mysqlMysqlDbSystem"));

export { MysqlReplicaArgs, MysqlReplicaState } from "./mysqlReplica";
export type MysqlReplica = import("./mysqlReplica").MysqlReplica;
export const MysqlReplica: typeof import("./mysqlReplica").MysqlReplica = null as any;
utilities.lazyLoad(exports, ["MysqlReplica"], () => require("./mysqlReplica"));

export { NetworkFirewallNetworkFirewallArgs, NetworkFirewallNetworkFirewallState } from "./networkFirewallNetworkFirewall";
export type NetworkFirewallNetworkFirewall = import("./networkFirewallNetworkFirewall").NetworkFirewallNetworkFirewall;
export const NetworkFirewallNetworkFirewall: typeof import("./networkFirewallNetworkFirewall").NetworkFirewallNetworkFirewall = null as any;
utilities.lazyLoad(exports, ["NetworkFirewallNetworkFirewall"], () => require("./networkFirewallNetworkFirewall"));

export { NetworkFirewallNetworkFirewallPolicyArgs, NetworkFirewallNetworkFirewallPolicyState } from "./networkFirewallNetworkFirewallPolicy";
export type NetworkFirewallNetworkFirewallPolicy = import("./networkFirewallNetworkFirewallPolicy").NetworkFirewallNetworkFirewallPolicy;
export const NetworkFirewallNetworkFirewallPolicy: typeof import("./networkFirewallNetworkFirewallPolicy").NetworkFirewallNetworkFirewallPolicy = null as any;
utilities.lazyLoad(exports, ["NetworkFirewallNetworkFirewallPolicy"], () => require("./networkFirewallNetworkFirewallPolicy"));

export { NetworkFirewallNetworkFirewallPolicyAddressListArgs, NetworkFirewallNetworkFirewallPolicyAddressListState } from "./networkFirewallNetworkFirewallPolicyAddressList";
export type NetworkFirewallNetworkFirewallPolicyAddressList = import("./networkFirewallNetworkFirewallPolicyAddressList").NetworkFirewallNetworkFirewallPolicyAddressList;
export const NetworkFirewallNetworkFirewallPolicyAddressList: typeof import("./networkFirewallNetworkFirewallPolicyAddressList").NetworkFirewallNetworkFirewallPolicyAddressList = null as any;
utilities.lazyLoad(exports, ["NetworkFirewallNetworkFirewallPolicyAddressList"], () => require("./networkFirewallNetworkFirewallPolicyAddressList"));

export { NetworkFirewallNetworkFirewallPolicyApplicationArgs, NetworkFirewallNetworkFirewallPolicyApplicationState } from "./networkFirewallNetworkFirewallPolicyApplication";
export type NetworkFirewallNetworkFirewallPolicyApplication = import("./networkFirewallNetworkFirewallPolicyApplication").NetworkFirewallNetworkFirewallPolicyApplication;
export const NetworkFirewallNetworkFirewallPolicyApplication: typeof import("./networkFirewallNetworkFirewallPolicyApplication").NetworkFirewallNetworkFirewallPolicyApplication = null as any;
utilities.lazyLoad(exports, ["NetworkFirewallNetworkFirewallPolicyApplication"], () => require("./networkFirewallNetworkFirewallPolicyApplication"));

export { NetworkFirewallNetworkFirewallPolicyApplicationGroupArgs, NetworkFirewallNetworkFirewallPolicyApplicationGroupState } from "./networkFirewallNetworkFirewallPolicyApplicationGroup";
export type NetworkFirewallNetworkFirewallPolicyApplicationGroup = import("./networkFirewallNetworkFirewallPolicyApplicationGroup").NetworkFirewallNetworkFirewallPolicyApplicationGroup;
export const NetworkFirewallNetworkFirewallPolicyApplicationGroup: typeof import("./networkFirewallNetworkFirewallPolicyApplicationGroup").NetworkFirewallNetworkFirewallPolicyApplicationGroup = null as any;
utilities.lazyLoad(exports, ["NetworkFirewallNetworkFirewallPolicyApplicationGroup"], () => require("./networkFirewallNetworkFirewallPolicyApplicationGroup"));

export { NetworkFirewallNetworkFirewallPolicyDecryptionProfileArgs, NetworkFirewallNetworkFirewallPolicyDecryptionProfileState } from "./networkFirewallNetworkFirewallPolicyDecryptionProfile";
export type NetworkFirewallNetworkFirewallPolicyDecryptionProfile = import("./networkFirewallNetworkFirewallPolicyDecryptionProfile").NetworkFirewallNetworkFirewallPolicyDecryptionProfile;
export const NetworkFirewallNetworkFirewallPolicyDecryptionProfile: typeof import("./networkFirewallNetworkFirewallPolicyDecryptionProfile").NetworkFirewallNetworkFirewallPolicyDecryptionProfile = null as any;
utilities.lazyLoad(exports, ["NetworkFirewallNetworkFirewallPolicyDecryptionProfile"], () => require("./networkFirewallNetworkFirewallPolicyDecryptionProfile"));

export { NetworkFirewallNetworkFirewallPolicyDecryptionRuleArgs, NetworkFirewallNetworkFirewallPolicyDecryptionRuleState } from "./networkFirewallNetworkFirewallPolicyDecryptionRule";
export type NetworkFirewallNetworkFirewallPolicyDecryptionRule = import("./networkFirewallNetworkFirewallPolicyDecryptionRule").NetworkFirewallNetworkFirewallPolicyDecryptionRule;
export const NetworkFirewallNetworkFirewallPolicyDecryptionRule: typeof import("./networkFirewallNetworkFirewallPolicyDecryptionRule").NetworkFirewallNetworkFirewallPolicyDecryptionRule = null as any;
utilities.lazyLoad(exports, ["NetworkFirewallNetworkFirewallPolicyDecryptionRule"], () => require("./networkFirewallNetworkFirewallPolicyDecryptionRule"));

export { NetworkFirewallNetworkFirewallPolicyMappedSecretArgs, NetworkFirewallNetworkFirewallPolicyMappedSecretState } from "./networkFirewallNetworkFirewallPolicyMappedSecret";
export type NetworkFirewallNetworkFirewallPolicyMappedSecret = import("./networkFirewallNetworkFirewallPolicyMappedSecret").NetworkFirewallNetworkFirewallPolicyMappedSecret;
export const NetworkFirewallNetworkFirewallPolicyMappedSecret: typeof import("./networkFirewallNetworkFirewallPolicyMappedSecret").NetworkFirewallNetworkFirewallPolicyMappedSecret = null as any;
utilities.lazyLoad(exports, ["NetworkFirewallNetworkFirewallPolicyMappedSecret"], () => require("./networkFirewallNetworkFirewallPolicyMappedSecret"));

export { NetworkFirewallNetworkFirewallPolicySecurityRuleArgs, NetworkFirewallNetworkFirewallPolicySecurityRuleState } from "./networkFirewallNetworkFirewallPolicySecurityRule";
export type NetworkFirewallNetworkFirewallPolicySecurityRule = import("./networkFirewallNetworkFirewallPolicySecurityRule").NetworkFirewallNetworkFirewallPolicySecurityRule;
export const NetworkFirewallNetworkFirewallPolicySecurityRule: typeof import("./networkFirewallNetworkFirewallPolicySecurityRule").NetworkFirewallNetworkFirewallPolicySecurityRule = null as any;
utilities.lazyLoad(exports, ["NetworkFirewallNetworkFirewallPolicySecurityRule"], () => require("./networkFirewallNetworkFirewallPolicySecurityRule"));

export { NetworkFirewallNetworkFirewallPolicyServiceArgs, NetworkFirewallNetworkFirewallPolicyServiceState } from "./networkFirewallNetworkFirewallPolicyService";
export type NetworkFirewallNetworkFirewallPolicyService = import("./networkFirewallNetworkFirewallPolicyService").NetworkFirewallNetworkFirewallPolicyService;
export const NetworkFirewallNetworkFirewallPolicyService: typeof import("./networkFirewallNetworkFirewallPolicyService").NetworkFirewallNetworkFirewallPolicyService = null as any;
utilities.lazyLoad(exports, ["NetworkFirewallNetworkFirewallPolicyService"], () => require("./networkFirewallNetworkFirewallPolicyService"));

export { NetworkFirewallNetworkFirewallPolicyServiceListArgs, NetworkFirewallNetworkFirewallPolicyServiceListState } from "./networkFirewallNetworkFirewallPolicyServiceList";
export type NetworkFirewallNetworkFirewallPolicyServiceList = import("./networkFirewallNetworkFirewallPolicyServiceList").NetworkFirewallNetworkFirewallPolicyServiceList;
export const NetworkFirewallNetworkFirewallPolicyServiceList: typeof import("./networkFirewallNetworkFirewallPolicyServiceList").NetworkFirewallNetworkFirewallPolicyServiceList = null as any;
utilities.lazyLoad(exports, ["NetworkFirewallNetworkFirewallPolicyServiceList"], () => require("./networkFirewallNetworkFirewallPolicyServiceList"));

export { NetworkFirewallNetworkFirewallPolicyTunnelInspectionRuleArgs, NetworkFirewallNetworkFirewallPolicyTunnelInspectionRuleState } from "./networkFirewallNetworkFirewallPolicyTunnelInspectionRule";
export type NetworkFirewallNetworkFirewallPolicyTunnelInspectionRule = import("./networkFirewallNetworkFirewallPolicyTunnelInspectionRule").NetworkFirewallNetworkFirewallPolicyTunnelInspectionRule;
export const NetworkFirewallNetworkFirewallPolicyTunnelInspectionRule: typeof import("./networkFirewallNetworkFirewallPolicyTunnelInspectionRule").NetworkFirewallNetworkFirewallPolicyTunnelInspectionRule = null as any;
utilities.lazyLoad(exports, ["NetworkFirewallNetworkFirewallPolicyTunnelInspectionRule"], () => require("./networkFirewallNetworkFirewallPolicyTunnelInspectionRule"));

export { NetworkFirewallNetworkFirewallPolicyUrlListArgs, NetworkFirewallNetworkFirewallPolicyUrlListState } from "./networkFirewallNetworkFirewallPolicyUrlList";
export type NetworkFirewallNetworkFirewallPolicyUrlList = import("./networkFirewallNetworkFirewallPolicyUrlList").NetworkFirewallNetworkFirewallPolicyUrlList;
export const NetworkFirewallNetworkFirewallPolicyUrlList: typeof import("./networkFirewallNetworkFirewallPolicyUrlList").NetworkFirewallNetworkFirewallPolicyUrlList = null as any;
utilities.lazyLoad(exports, ["NetworkFirewallNetworkFirewallPolicyUrlList"], () => require("./networkFirewallNetworkFirewallPolicyUrlList"));

export { NetworkLoadBalancerBackendArgs, NetworkLoadBalancerBackendState } from "./networkLoadBalancerBackend";
export type NetworkLoadBalancerBackend = import("./networkLoadBalancerBackend").NetworkLoadBalancerBackend;
export const NetworkLoadBalancerBackend: typeof import("./networkLoadBalancerBackend").NetworkLoadBalancerBackend = null as any;
utilities.lazyLoad(exports, ["NetworkLoadBalancerBackend"], () => require("./networkLoadBalancerBackend"));

export { NetworkLoadBalancerBackendSetArgs, NetworkLoadBalancerBackendSetState } from "./networkLoadBalancerBackendSet";
export type NetworkLoadBalancerBackendSet = import("./networkLoadBalancerBackendSet").NetworkLoadBalancerBackendSet;
export const NetworkLoadBalancerBackendSet: typeof import("./networkLoadBalancerBackendSet").NetworkLoadBalancerBackendSet = null as any;
utilities.lazyLoad(exports, ["NetworkLoadBalancerBackendSet"], () => require("./networkLoadBalancerBackendSet"));

export { NetworkLoadBalancerListenerArgs, NetworkLoadBalancerListenerState } from "./networkLoadBalancerListener";
export type NetworkLoadBalancerListener = import("./networkLoadBalancerListener").NetworkLoadBalancerListener;
export const NetworkLoadBalancerListener: typeof import("./networkLoadBalancerListener").NetworkLoadBalancerListener = null as any;
utilities.lazyLoad(exports, ["NetworkLoadBalancerListener"], () => require("./networkLoadBalancerListener"));

export { NetworkLoadBalancerNetworkLoadBalancerArgs, NetworkLoadBalancerNetworkLoadBalancerState } from "./networkLoadBalancerNetworkLoadBalancer";
export type NetworkLoadBalancerNetworkLoadBalancer = import("./networkLoadBalancerNetworkLoadBalancer").NetworkLoadBalancerNetworkLoadBalancer;
export const NetworkLoadBalancerNetworkLoadBalancer: typeof import("./networkLoadBalancerNetworkLoadBalancer").NetworkLoadBalancerNetworkLoadBalancer = null as any;
utilities.lazyLoad(exports, ["NetworkLoadBalancerNetworkLoadBalancer"], () => require("./networkLoadBalancerNetworkLoadBalancer"));

export { NetworkLoadBalancerNetworkLoadBalancersBackendSetsUnifiedArgs, NetworkLoadBalancerNetworkLoadBalancersBackendSetsUnifiedState } from "./networkLoadBalancerNetworkLoadBalancersBackendSetsUnified";
export type NetworkLoadBalancerNetworkLoadBalancersBackendSetsUnified = import("./networkLoadBalancerNetworkLoadBalancersBackendSetsUnified").NetworkLoadBalancerNetworkLoadBalancersBackendSetsUnified;
export const NetworkLoadBalancerNetworkLoadBalancersBackendSetsUnified: typeof import("./networkLoadBalancerNetworkLoadBalancersBackendSetsUnified").NetworkLoadBalancerNetworkLoadBalancersBackendSetsUnified = null as any;
utilities.lazyLoad(exports, ["NetworkLoadBalancerNetworkLoadBalancersBackendSetsUnified"], () => require("./networkLoadBalancerNetworkLoadBalancersBackendSetsUnified"));

export { NosqlIndexArgs, NosqlIndexState } from "./nosqlIndex";
export type NosqlIndex = import("./nosqlIndex").NosqlIndex;
export const NosqlIndex: typeof import("./nosqlIndex").NosqlIndex = null as any;
utilities.lazyLoad(exports, ["NosqlIndex"], () => require("./nosqlIndex"));

export { NosqlTableArgs, NosqlTableState } from "./nosqlTable";
export type NosqlTable = import("./nosqlTable").NosqlTable;
export const NosqlTable: typeof import("./nosqlTable").NosqlTable = null as any;
utilities.lazyLoad(exports, ["NosqlTable"], () => require("./nosqlTable"));

export { NosqlTableReplicaArgs, NosqlTableReplicaState } from "./nosqlTableReplica";
export type NosqlTableReplica = import("./nosqlTableReplica").NosqlTableReplica;
export const NosqlTableReplica: typeof import("./nosqlTableReplica").NosqlTableReplica = null as any;
utilities.lazyLoad(exports, ["NosqlTableReplica"], () => require("./nosqlTableReplica"));

export { ObjectstorageBucketArgs, ObjectstorageBucketState } from "./objectstorageBucket";
export type ObjectstorageBucket = import("./objectstorageBucket").ObjectstorageBucket;
export const ObjectstorageBucket: typeof import("./objectstorageBucket").ObjectstorageBucket = null as any;
utilities.lazyLoad(exports, ["ObjectstorageBucket"], () => require("./objectstorageBucket"));

export { ObjectstorageNamespaceMetadataArgs, ObjectstorageNamespaceMetadataState } from "./objectstorageNamespaceMetadata";
export type ObjectstorageNamespaceMetadata = import("./objectstorageNamespaceMetadata").ObjectstorageNamespaceMetadata;
export const ObjectstorageNamespaceMetadata: typeof import("./objectstorageNamespaceMetadata").ObjectstorageNamespaceMetadata = null as any;
utilities.lazyLoad(exports, ["ObjectstorageNamespaceMetadata"], () => require("./objectstorageNamespaceMetadata"));

export { ObjectstorageObjectArgs, ObjectstorageObjectState } from "./objectstorageObject";
export type ObjectstorageObject = import("./objectstorageObject").ObjectstorageObject;
export const ObjectstorageObject: typeof import("./objectstorageObject").ObjectstorageObject = null as any;
utilities.lazyLoad(exports, ["ObjectstorageObject"], () => require("./objectstorageObject"));

export { ObjectstorageObjectLifecyclePolicyArgs, ObjectstorageObjectLifecyclePolicyState } from "./objectstorageObjectLifecyclePolicy";
export type ObjectstorageObjectLifecyclePolicy = import("./objectstorageObjectLifecyclePolicy").ObjectstorageObjectLifecyclePolicy;
export const ObjectstorageObjectLifecyclePolicy: typeof import("./objectstorageObjectLifecyclePolicy").ObjectstorageObjectLifecyclePolicy = null as any;
utilities.lazyLoad(exports, ["ObjectstorageObjectLifecyclePolicy"], () => require("./objectstorageObjectLifecyclePolicy"));

export { ObjectstoragePreauthrequestArgs, ObjectstoragePreauthrequestState } from "./objectstoragePreauthrequest";
export type ObjectstoragePreauthrequest = import("./objectstoragePreauthrequest").ObjectstoragePreauthrequest;
export const ObjectstoragePreauthrequest: typeof import("./objectstoragePreauthrequest").ObjectstoragePreauthrequest = null as any;
utilities.lazyLoad(exports, ["ObjectstoragePreauthrequest"], () => require("./objectstoragePreauthrequest"));

export { ObjectstorageReplicationPolicyArgs, ObjectstorageReplicationPolicyState } from "./objectstorageReplicationPolicy";
export type ObjectstorageReplicationPolicy = import("./objectstorageReplicationPolicy").ObjectstorageReplicationPolicy;
export const ObjectstorageReplicationPolicy: typeof import("./objectstorageReplicationPolicy").ObjectstorageReplicationPolicy = null as any;
utilities.lazyLoad(exports, ["ObjectstorageReplicationPolicy"], () => require("./objectstorageReplicationPolicy"));

export { OceOceInstanceArgs, OceOceInstanceState } from "./oceOceInstance";
export type OceOceInstance = import("./oceOceInstance").OceOceInstance;
export const OceOceInstance: typeof import("./oceOceInstance").OceOceInstance = null as any;
utilities.lazyLoad(exports, ["OceOceInstance"], () => require("./oceOceInstance"));

export { OcvpClusterArgs, OcvpClusterState } from "./ocvpCluster";
export type OcvpCluster = import("./ocvpCluster").OcvpCluster;
export const OcvpCluster: typeof import("./ocvpCluster").OcvpCluster = null as any;
utilities.lazyLoad(exports, ["OcvpCluster"], () => require("./ocvpCluster"));

export { OcvpEsxiHostArgs, OcvpEsxiHostState } from "./ocvpEsxiHost";
export type OcvpEsxiHost = import("./ocvpEsxiHost").OcvpEsxiHost;
export const OcvpEsxiHost: typeof import("./ocvpEsxiHost").OcvpEsxiHost = null as any;
utilities.lazyLoad(exports, ["OcvpEsxiHost"], () => require("./ocvpEsxiHost"));

export { OcvpSddcArgs, OcvpSddcState } from "./ocvpSddc";
export type OcvpSddc = import("./ocvpSddc").OcvpSddc;
export const OcvpSddc: typeof import("./ocvpSddc").OcvpSddc = null as any;
utilities.lazyLoad(exports, ["OcvpSddc"], () => require("./ocvpSddc"));

export { OdaOdaInstanceArgs, OdaOdaInstanceState } from "./odaOdaInstance";
export type OdaOdaInstance = import("./odaOdaInstance").OdaOdaInstance;
export const OdaOdaInstance: typeof import("./odaOdaInstance").OdaOdaInstance = null as any;
utilities.lazyLoad(exports, ["OdaOdaInstance"], () => require("./odaOdaInstance"));

export { OdaOdaPrivateEndpointArgs, OdaOdaPrivateEndpointState } from "./odaOdaPrivateEndpoint";
export type OdaOdaPrivateEndpoint = import("./odaOdaPrivateEndpoint").OdaOdaPrivateEndpoint;
export const OdaOdaPrivateEndpoint: typeof import("./odaOdaPrivateEndpoint").OdaOdaPrivateEndpoint = null as any;
utilities.lazyLoad(exports, ["OdaOdaPrivateEndpoint"], () => require("./odaOdaPrivateEndpoint"));

export { OdaOdaPrivateEndpointAttachmentArgs, OdaOdaPrivateEndpointAttachmentState } from "./odaOdaPrivateEndpointAttachment";
export type OdaOdaPrivateEndpointAttachment = import("./odaOdaPrivateEndpointAttachment").OdaOdaPrivateEndpointAttachment;
export const OdaOdaPrivateEndpointAttachment: typeof import("./odaOdaPrivateEndpointAttachment").OdaOdaPrivateEndpointAttachment = null as any;
utilities.lazyLoad(exports, ["OdaOdaPrivateEndpointAttachment"], () => require("./odaOdaPrivateEndpointAttachment"));

export { OdaOdaPrivateEndpointScanProxyArgs, OdaOdaPrivateEndpointScanProxyState } from "./odaOdaPrivateEndpointScanProxy";
export type OdaOdaPrivateEndpointScanProxy = import("./odaOdaPrivateEndpointScanProxy").OdaOdaPrivateEndpointScanProxy;
export const OdaOdaPrivateEndpointScanProxy: typeof import("./odaOdaPrivateEndpointScanProxy").OdaOdaPrivateEndpointScanProxy = null as any;
utilities.lazyLoad(exports, ["OdaOdaPrivateEndpointScanProxy"], () => require("./odaOdaPrivateEndpointScanProxy"));

export { OnsNotificationTopicArgs, OnsNotificationTopicState } from "./onsNotificationTopic";
export type OnsNotificationTopic = import("./onsNotificationTopic").OnsNotificationTopic;
export const OnsNotificationTopic: typeof import("./onsNotificationTopic").OnsNotificationTopic = null as any;
utilities.lazyLoad(exports, ["OnsNotificationTopic"], () => require("./onsNotificationTopic"));

export { OnsSubscriptionArgs, OnsSubscriptionState } from "./onsSubscription";
export type OnsSubscription = import("./onsSubscription").OnsSubscription;
export const OnsSubscription: typeof import("./onsSubscription").OnsSubscription = null as any;
utilities.lazyLoad(exports, ["OnsSubscription"], () => require("./onsSubscription"));

export { OpaOpaInstanceArgs, OpaOpaInstanceState } from "./opaOpaInstance";
export type OpaOpaInstance = import("./opaOpaInstance").OpaOpaInstance;
export const OpaOpaInstance: typeof import("./opaOpaInstance").OpaOpaInstance = null as any;
utilities.lazyLoad(exports, ["OpaOpaInstance"], () => require("./opaOpaInstance"));

export { OpensearchOpensearchClusterArgs, OpensearchOpensearchClusterState } from "./opensearchOpensearchCluster";
export type OpensearchOpensearchCluster = import("./opensearchOpensearchCluster").OpensearchOpensearchCluster;
export const OpensearchOpensearchCluster: typeof import("./opensearchOpensearchCluster").OpensearchOpensearchCluster = null as any;
utilities.lazyLoad(exports, ["OpensearchOpensearchCluster"], () => require("./opensearchOpensearchCluster"));

export { OperatorAccessControlOperatorControlArgs, OperatorAccessControlOperatorControlState } from "./operatorAccessControlOperatorControl";
export type OperatorAccessControlOperatorControl = import("./operatorAccessControlOperatorControl").OperatorAccessControlOperatorControl;
export const OperatorAccessControlOperatorControl: typeof import("./operatorAccessControlOperatorControl").OperatorAccessControlOperatorControl = null as any;
utilities.lazyLoad(exports, ["OperatorAccessControlOperatorControl"], () => require("./operatorAccessControlOperatorControl"));

export { OperatorAccessControlOperatorControlAssignmentArgs, OperatorAccessControlOperatorControlAssignmentState } from "./operatorAccessControlOperatorControlAssignment";
export type OperatorAccessControlOperatorControlAssignment = import("./operatorAccessControlOperatorControlAssignment").OperatorAccessControlOperatorControlAssignment;
export const OperatorAccessControlOperatorControlAssignment: typeof import("./operatorAccessControlOperatorControlAssignment").OperatorAccessControlOperatorControlAssignment = null as any;
utilities.lazyLoad(exports, ["OperatorAccessControlOperatorControlAssignment"], () => require("./operatorAccessControlOperatorControlAssignment"));

export { OpsiAwrHubArgs, OpsiAwrHubState } from "./opsiAwrHub";
export type OpsiAwrHub = import("./opsiAwrHub").OpsiAwrHub;
export const OpsiAwrHub: typeof import("./opsiAwrHub").OpsiAwrHub = null as any;
utilities.lazyLoad(exports, ["OpsiAwrHub"], () => require("./opsiAwrHub"));

export { OpsiAwrHubSourceArgs, OpsiAwrHubSourceState } from "./opsiAwrHubSource";
export type OpsiAwrHubSource = import("./opsiAwrHubSource").OpsiAwrHubSource;
export const OpsiAwrHubSource: typeof import("./opsiAwrHubSource").OpsiAwrHubSource = null as any;
utilities.lazyLoad(exports, ["OpsiAwrHubSource"], () => require("./opsiAwrHubSource"));

export { OpsiAwrHubSourceAwrhubsourcesManagementArgs, OpsiAwrHubSourceAwrhubsourcesManagementState } from "./opsiAwrHubSourceAwrhubsourcesManagement";
export type OpsiAwrHubSourceAwrhubsourcesManagement = import("./opsiAwrHubSourceAwrhubsourcesManagement").OpsiAwrHubSourceAwrhubsourcesManagement;
export const OpsiAwrHubSourceAwrhubsourcesManagement: typeof import("./opsiAwrHubSourceAwrhubsourcesManagement").OpsiAwrHubSourceAwrhubsourcesManagement = null as any;
utilities.lazyLoad(exports, ["OpsiAwrHubSourceAwrhubsourcesManagement"], () => require("./opsiAwrHubSourceAwrhubsourcesManagement"));

export { OpsiDatabaseInsightArgs, OpsiDatabaseInsightState } from "./opsiDatabaseInsight";
export type OpsiDatabaseInsight = import("./opsiDatabaseInsight").OpsiDatabaseInsight;
export const OpsiDatabaseInsight: typeof import("./opsiDatabaseInsight").OpsiDatabaseInsight = null as any;
utilities.lazyLoad(exports, ["OpsiDatabaseInsight"], () => require("./opsiDatabaseInsight"));

export { OpsiEnterpriseManagerBridgeArgs, OpsiEnterpriseManagerBridgeState } from "./opsiEnterpriseManagerBridge";
export type OpsiEnterpriseManagerBridge = import("./opsiEnterpriseManagerBridge").OpsiEnterpriseManagerBridge;
export const OpsiEnterpriseManagerBridge: typeof import("./opsiEnterpriseManagerBridge").OpsiEnterpriseManagerBridge = null as any;
utilities.lazyLoad(exports, ["OpsiEnterpriseManagerBridge"], () => require("./opsiEnterpriseManagerBridge"));

export { OpsiExadataInsightArgs, OpsiExadataInsightState } from "./opsiExadataInsight";
export type OpsiExadataInsight = import("./opsiExadataInsight").OpsiExadataInsight;
export const OpsiExadataInsight: typeof import("./opsiExadataInsight").OpsiExadataInsight = null as any;
utilities.lazyLoad(exports, ["OpsiExadataInsight"], () => require("./opsiExadataInsight"));

export { OpsiHostInsightArgs, OpsiHostInsightState } from "./opsiHostInsight";
export type OpsiHostInsight = import("./opsiHostInsight").OpsiHostInsight;
export const OpsiHostInsight: typeof import("./opsiHostInsight").OpsiHostInsight = null as any;
utilities.lazyLoad(exports, ["OpsiHostInsight"], () => require("./opsiHostInsight"));

export { OpsiNewsReportArgs, OpsiNewsReportState } from "./opsiNewsReport";
export type OpsiNewsReport = import("./opsiNewsReport").OpsiNewsReport;
export const OpsiNewsReport: typeof import("./opsiNewsReport").OpsiNewsReport = null as any;
utilities.lazyLoad(exports, ["OpsiNewsReport"], () => require("./opsiNewsReport"));

export { OpsiOperationsInsightsPrivateEndpointArgs, OpsiOperationsInsightsPrivateEndpointState } from "./opsiOperationsInsightsPrivateEndpoint";
export type OpsiOperationsInsightsPrivateEndpoint = import("./opsiOperationsInsightsPrivateEndpoint").OpsiOperationsInsightsPrivateEndpoint;
export const OpsiOperationsInsightsPrivateEndpoint: typeof import("./opsiOperationsInsightsPrivateEndpoint").OpsiOperationsInsightsPrivateEndpoint = null as any;
utilities.lazyLoad(exports, ["OpsiOperationsInsightsPrivateEndpoint"], () => require("./opsiOperationsInsightsPrivateEndpoint"));

export { OpsiOperationsInsightsWarehouseArgs, OpsiOperationsInsightsWarehouseState } from "./opsiOperationsInsightsWarehouse";
export type OpsiOperationsInsightsWarehouse = import("./opsiOperationsInsightsWarehouse").OpsiOperationsInsightsWarehouse;
export const OpsiOperationsInsightsWarehouse: typeof import("./opsiOperationsInsightsWarehouse").OpsiOperationsInsightsWarehouse = null as any;
utilities.lazyLoad(exports, ["OpsiOperationsInsightsWarehouse"], () => require("./opsiOperationsInsightsWarehouse"));

export { OpsiOperationsInsightsWarehouseDownloadWarehouseWalletArgs, OpsiOperationsInsightsWarehouseDownloadWarehouseWalletState } from "./opsiOperationsInsightsWarehouseDownloadWarehouseWallet";
export type OpsiOperationsInsightsWarehouseDownloadWarehouseWallet = import("./opsiOperationsInsightsWarehouseDownloadWarehouseWallet").OpsiOperationsInsightsWarehouseDownloadWarehouseWallet;
export const OpsiOperationsInsightsWarehouseDownloadWarehouseWallet: typeof import("./opsiOperationsInsightsWarehouseDownloadWarehouseWallet").OpsiOperationsInsightsWarehouseDownloadWarehouseWallet = null as any;
utilities.lazyLoad(exports, ["OpsiOperationsInsightsWarehouseDownloadWarehouseWallet"], () => require("./opsiOperationsInsightsWarehouseDownloadWarehouseWallet"));

export { OpsiOperationsInsightsWarehouseRotateWarehouseWalletArgs, OpsiOperationsInsightsWarehouseRotateWarehouseWalletState } from "./opsiOperationsInsightsWarehouseRotateWarehouseWallet";
export type OpsiOperationsInsightsWarehouseRotateWarehouseWallet = import("./opsiOperationsInsightsWarehouseRotateWarehouseWallet").OpsiOperationsInsightsWarehouseRotateWarehouseWallet;
export const OpsiOperationsInsightsWarehouseRotateWarehouseWallet: typeof import("./opsiOperationsInsightsWarehouseRotateWarehouseWallet").OpsiOperationsInsightsWarehouseRotateWarehouseWallet = null as any;
utilities.lazyLoad(exports, ["OpsiOperationsInsightsWarehouseRotateWarehouseWallet"], () => require("./opsiOperationsInsightsWarehouseRotateWarehouseWallet"));

export { OpsiOperationsInsightsWarehouseUserArgs, OpsiOperationsInsightsWarehouseUserState } from "./opsiOperationsInsightsWarehouseUser";
export type OpsiOperationsInsightsWarehouseUser = import("./opsiOperationsInsightsWarehouseUser").OpsiOperationsInsightsWarehouseUser;
export const OpsiOperationsInsightsWarehouseUser: typeof import("./opsiOperationsInsightsWarehouseUser").OpsiOperationsInsightsWarehouseUser = null as any;
utilities.lazyLoad(exports, ["OpsiOperationsInsightsWarehouseUser"], () => require("./opsiOperationsInsightsWarehouseUser"));

export { OpsiOpsiConfigurationArgs, OpsiOpsiConfigurationState } from "./opsiOpsiConfiguration";
export type OpsiOpsiConfiguration = import("./opsiOpsiConfiguration").OpsiOpsiConfiguration;
export const OpsiOpsiConfiguration: typeof import("./opsiOpsiConfiguration").OpsiOpsiConfiguration = null as any;
utilities.lazyLoad(exports, ["OpsiOpsiConfiguration"], () => require("./opsiOpsiConfiguration"));

export { OptimizerEnrollmentStatusArgs, OptimizerEnrollmentStatusState } from "./optimizerEnrollmentStatus";
export type OptimizerEnrollmentStatus = import("./optimizerEnrollmentStatus").OptimizerEnrollmentStatus;
export const OptimizerEnrollmentStatus: typeof import("./optimizerEnrollmentStatus").OptimizerEnrollmentStatus = null as any;
utilities.lazyLoad(exports, ["OptimizerEnrollmentStatus"], () => require("./optimizerEnrollmentStatus"));

export { OptimizerProfileArgs, OptimizerProfileState } from "./optimizerProfile";
export type OptimizerProfile = import("./optimizerProfile").OptimizerProfile;
export const OptimizerProfile: typeof import("./optimizerProfile").OptimizerProfile = null as any;
utilities.lazyLoad(exports, ["OptimizerProfile"], () => require("./optimizerProfile"));

export { OptimizerRecommendationArgs, OptimizerRecommendationState } from "./optimizerRecommendation";
export type OptimizerRecommendation = import("./optimizerRecommendation").OptimizerRecommendation;
export const OptimizerRecommendation: typeof import("./optimizerRecommendation").OptimizerRecommendation = null as any;
utilities.lazyLoad(exports, ["OptimizerRecommendation"], () => require("./optimizerRecommendation"));

export { OptimizerResourceActionArgs, OptimizerResourceActionState } from "./optimizerResourceAction";
export type OptimizerResourceAction = import("./optimizerResourceAction").OptimizerResourceAction;
export const OptimizerResourceAction: typeof import("./optimizerResourceAction").OptimizerResourceAction = null as any;
utilities.lazyLoad(exports, ["OptimizerResourceAction"], () => require("./optimizerResourceAction"));

export { OsManagementHubEventArgs, OsManagementHubEventState } from "./osManagementHubEvent";
export type OsManagementHubEvent = import("./osManagementHubEvent").OsManagementHubEvent;
export const OsManagementHubEvent: typeof import("./osManagementHubEvent").OsManagementHubEvent = null as any;
utilities.lazyLoad(exports, ["OsManagementHubEvent"], () => require("./osManagementHubEvent"));

export { OsManagementHubLifecycleEnvironmentArgs, OsManagementHubLifecycleEnvironmentState } from "./osManagementHubLifecycleEnvironment";
export type OsManagementHubLifecycleEnvironment = import("./osManagementHubLifecycleEnvironment").OsManagementHubLifecycleEnvironment;
export const OsManagementHubLifecycleEnvironment: typeof import("./osManagementHubLifecycleEnvironment").OsManagementHubLifecycleEnvironment = null as any;
utilities.lazyLoad(exports, ["OsManagementHubLifecycleEnvironment"], () => require("./osManagementHubLifecycleEnvironment"));

export { OsManagementHubLifecycleStageAttachManagedInstancesManagementArgs, OsManagementHubLifecycleStageAttachManagedInstancesManagementState } from "./osManagementHubLifecycleStageAttachManagedInstancesManagement";
export type OsManagementHubLifecycleStageAttachManagedInstancesManagement = import("./osManagementHubLifecycleStageAttachManagedInstancesManagement").OsManagementHubLifecycleStageAttachManagedInstancesManagement;
export const OsManagementHubLifecycleStageAttachManagedInstancesManagement: typeof import("./osManagementHubLifecycleStageAttachManagedInstancesManagement").OsManagementHubLifecycleStageAttachManagedInstancesManagement = null as any;
utilities.lazyLoad(exports, ["OsManagementHubLifecycleStageAttachManagedInstancesManagement"], () => require("./osManagementHubLifecycleStageAttachManagedInstancesManagement"));

export { OsManagementHubLifecycleStageDetachManagedInstancesManagementArgs, OsManagementHubLifecycleStageDetachManagedInstancesManagementState } from "./osManagementHubLifecycleStageDetachManagedInstancesManagement";
export type OsManagementHubLifecycleStageDetachManagedInstancesManagement = import("./osManagementHubLifecycleStageDetachManagedInstancesManagement").OsManagementHubLifecycleStageDetachManagedInstancesManagement;
export const OsManagementHubLifecycleStageDetachManagedInstancesManagement: typeof import("./osManagementHubLifecycleStageDetachManagedInstancesManagement").OsManagementHubLifecycleStageDetachManagedInstancesManagement = null as any;
utilities.lazyLoad(exports, ["OsManagementHubLifecycleStageDetachManagedInstancesManagement"], () => require("./osManagementHubLifecycleStageDetachManagedInstancesManagement"));

export { OsManagementHubLifecycleStagePromoteSoftwareSourceManagementArgs, OsManagementHubLifecycleStagePromoteSoftwareSourceManagementState } from "./osManagementHubLifecycleStagePromoteSoftwareSourceManagement";
export type OsManagementHubLifecycleStagePromoteSoftwareSourceManagement = import("./osManagementHubLifecycleStagePromoteSoftwareSourceManagement").OsManagementHubLifecycleStagePromoteSoftwareSourceManagement;
export const OsManagementHubLifecycleStagePromoteSoftwareSourceManagement: typeof import("./osManagementHubLifecycleStagePromoteSoftwareSourceManagement").OsManagementHubLifecycleStagePromoteSoftwareSourceManagement = null as any;
utilities.lazyLoad(exports, ["OsManagementHubLifecycleStagePromoteSoftwareSourceManagement"], () => require("./osManagementHubLifecycleStagePromoteSoftwareSourceManagement"));

export { OsManagementHubManagedInstanceArgs, OsManagementHubManagedInstanceState } from "./osManagementHubManagedInstance";
export type OsManagementHubManagedInstance = import("./osManagementHubManagedInstance").OsManagementHubManagedInstance;
export const OsManagementHubManagedInstance: typeof import("./osManagementHubManagedInstance").OsManagementHubManagedInstance = null as any;
utilities.lazyLoad(exports, ["OsManagementHubManagedInstance"], () => require("./osManagementHubManagedInstance"));

export { OsManagementHubManagedInstanceAttachProfileManagementArgs, OsManagementHubManagedInstanceAttachProfileManagementState } from "./osManagementHubManagedInstanceAttachProfileManagement";
export type OsManagementHubManagedInstanceAttachProfileManagement = import("./osManagementHubManagedInstanceAttachProfileManagement").OsManagementHubManagedInstanceAttachProfileManagement;
export const OsManagementHubManagedInstanceAttachProfileManagement: typeof import("./osManagementHubManagedInstanceAttachProfileManagement").OsManagementHubManagedInstanceAttachProfileManagement = null as any;
utilities.lazyLoad(exports, ["OsManagementHubManagedInstanceAttachProfileManagement"], () => require("./osManagementHubManagedInstanceAttachProfileManagement"));

export { OsManagementHubManagedInstanceDetachProfileManagementArgs, OsManagementHubManagedInstanceDetachProfileManagementState } from "./osManagementHubManagedInstanceDetachProfileManagement";
export type OsManagementHubManagedInstanceDetachProfileManagement = import("./osManagementHubManagedInstanceDetachProfileManagement").OsManagementHubManagedInstanceDetachProfileManagement;
export const OsManagementHubManagedInstanceDetachProfileManagement: typeof import("./osManagementHubManagedInstanceDetachProfileManagement").OsManagementHubManagedInstanceDetachProfileManagement = null as any;
utilities.lazyLoad(exports, ["OsManagementHubManagedInstanceDetachProfileManagement"], () => require("./osManagementHubManagedInstanceDetachProfileManagement"));

export { OsManagementHubManagedInstanceGroupArgs, OsManagementHubManagedInstanceGroupState } from "./osManagementHubManagedInstanceGroup";
export type OsManagementHubManagedInstanceGroup = import("./osManagementHubManagedInstanceGroup").OsManagementHubManagedInstanceGroup;
export const OsManagementHubManagedInstanceGroup: typeof import("./osManagementHubManagedInstanceGroup").OsManagementHubManagedInstanceGroup = null as any;
utilities.lazyLoad(exports, ["OsManagementHubManagedInstanceGroup"], () => require("./osManagementHubManagedInstanceGroup"));

export { OsManagementHubManagedInstanceGroupAttachManagedInstancesManagementArgs, OsManagementHubManagedInstanceGroupAttachManagedInstancesManagementState } from "./osManagementHubManagedInstanceGroupAttachManagedInstancesManagement";
export type OsManagementHubManagedInstanceGroupAttachManagedInstancesManagement = import("./osManagementHubManagedInstanceGroupAttachManagedInstancesManagement").OsManagementHubManagedInstanceGroupAttachManagedInstancesManagement;
export const OsManagementHubManagedInstanceGroupAttachManagedInstancesManagement: typeof import("./osManagementHubManagedInstanceGroupAttachManagedInstancesManagement").OsManagementHubManagedInstanceGroupAttachManagedInstancesManagement = null as any;
utilities.lazyLoad(exports, ["OsManagementHubManagedInstanceGroupAttachManagedInstancesManagement"], () => require("./osManagementHubManagedInstanceGroupAttachManagedInstancesManagement"));

export { OsManagementHubManagedInstanceGroupAttachSoftwareSourcesManagementArgs, OsManagementHubManagedInstanceGroupAttachSoftwareSourcesManagementState } from "./osManagementHubManagedInstanceGroupAttachSoftwareSourcesManagement";
export type OsManagementHubManagedInstanceGroupAttachSoftwareSourcesManagement = import("./osManagementHubManagedInstanceGroupAttachSoftwareSourcesManagement").OsManagementHubManagedInstanceGroupAttachSoftwareSourcesManagement;
export const OsManagementHubManagedInstanceGroupAttachSoftwareSourcesManagement: typeof import("./osManagementHubManagedInstanceGroupAttachSoftwareSourcesManagement").OsManagementHubManagedInstanceGroupAttachSoftwareSourcesManagement = null as any;
utilities.lazyLoad(exports, ["OsManagementHubManagedInstanceGroupAttachSoftwareSourcesManagement"], () => require("./osManagementHubManagedInstanceGroupAttachSoftwareSourcesManagement"));

export { OsManagementHubManagedInstanceGroupDetachManagedInstancesManagementArgs, OsManagementHubManagedInstanceGroupDetachManagedInstancesManagementState } from "./osManagementHubManagedInstanceGroupDetachManagedInstancesManagement";
export type OsManagementHubManagedInstanceGroupDetachManagedInstancesManagement = import("./osManagementHubManagedInstanceGroupDetachManagedInstancesManagement").OsManagementHubManagedInstanceGroupDetachManagedInstancesManagement;
export const OsManagementHubManagedInstanceGroupDetachManagedInstancesManagement: typeof import("./osManagementHubManagedInstanceGroupDetachManagedInstancesManagement").OsManagementHubManagedInstanceGroupDetachManagedInstancesManagement = null as any;
utilities.lazyLoad(exports, ["OsManagementHubManagedInstanceGroupDetachManagedInstancesManagement"], () => require("./osManagementHubManagedInstanceGroupDetachManagedInstancesManagement"));

export { OsManagementHubManagedInstanceGroupDetachSoftwareSourcesManagementArgs, OsManagementHubManagedInstanceGroupDetachSoftwareSourcesManagementState } from "./osManagementHubManagedInstanceGroupDetachSoftwareSourcesManagement";
export type OsManagementHubManagedInstanceGroupDetachSoftwareSourcesManagement = import("./osManagementHubManagedInstanceGroupDetachSoftwareSourcesManagement").OsManagementHubManagedInstanceGroupDetachSoftwareSourcesManagement;
export const OsManagementHubManagedInstanceGroupDetachSoftwareSourcesManagement: typeof import("./osManagementHubManagedInstanceGroupDetachSoftwareSourcesManagement").OsManagementHubManagedInstanceGroupDetachSoftwareSourcesManagement = null as any;
utilities.lazyLoad(exports, ["OsManagementHubManagedInstanceGroupDetachSoftwareSourcesManagement"], () => require("./osManagementHubManagedInstanceGroupDetachSoftwareSourcesManagement"));

export { OsManagementHubManagedInstanceGroupInstallPackagesManagementArgs, OsManagementHubManagedInstanceGroupInstallPackagesManagementState } from "./osManagementHubManagedInstanceGroupInstallPackagesManagement";
export type OsManagementHubManagedInstanceGroupInstallPackagesManagement = import("./osManagementHubManagedInstanceGroupInstallPackagesManagement").OsManagementHubManagedInstanceGroupInstallPackagesManagement;
export const OsManagementHubManagedInstanceGroupInstallPackagesManagement: typeof import("./osManagementHubManagedInstanceGroupInstallPackagesManagement").OsManagementHubManagedInstanceGroupInstallPackagesManagement = null as any;
utilities.lazyLoad(exports, ["OsManagementHubManagedInstanceGroupInstallPackagesManagement"], () => require("./osManagementHubManagedInstanceGroupInstallPackagesManagement"));

export { OsManagementHubManagedInstanceGroupInstallWindowsUpdatesManagementArgs, OsManagementHubManagedInstanceGroupInstallWindowsUpdatesManagementState } from "./osManagementHubManagedInstanceGroupInstallWindowsUpdatesManagement";
export type OsManagementHubManagedInstanceGroupInstallWindowsUpdatesManagement = import("./osManagementHubManagedInstanceGroupInstallWindowsUpdatesManagement").OsManagementHubManagedInstanceGroupInstallWindowsUpdatesManagement;
export const OsManagementHubManagedInstanceGroupInstallWindowsUpdatesManagement: typeof import("./osManagementHubManagedInstanceGroupInstallWindowsUpdatesManagement").OsManagementHubManagedInstanceGroupInstallWindowsUpdatesManagement = null as any;
utilities.lazyLoad(exports, ["OsManagementHubManagedInstanceGroupInstallWindowsUpdatesManagement"], () => require("./osManagementHubManagedInstanceGroupInstallWindowsUpdatesManagement"));

export { OsManagementHubManagedInstanceGroupManageModuleStreamsManagementArgs, OsManagementHubManagedInstanceGroupManageModuleStreamsManagementState } from "./osManagementHubManagedInstanceGroupManageModuleStreamsManagement";
export type OsManagementHubManagedInstanceGroupManageModuleStreamsManagement = import("./osManagementHubManagedInstanceGroupManageModuleStreamsManagement").OsManagementHubManagedInstanceGroupManageModuleStreamsManagement;
export const OsManagementHubManagedInstanceGroupManageModuleStreamsManagement: typeof import("./osManagementHubManagedInstanceGroupManageModuleStreamsManagement").OsManagementHubManagedInstanceGroupManageModuleStreamsManagement = null as any;
utilities.lazyLoad(exports, ["OsManagementHubManagedInstanceGroupManageModuleStreamsManagement"], () => require("./osManagementHubManagedInstanceGroupManageModuleStreamsManagement"));

export { OsManagementHubManagedInstanceGroupRemovePackagesManagementArgs, OsManagementHubManagedInstanceGroupRemovePackagesManagementState } from "./osManagementHubManagedInstanceGroupRemovePackagesManagement";
export type OsManagementHubManagedInstanceGroupRemovePackagesManagement = import("./osManagementHubManagedInstanceGroupRemovePackagesManagement").OsManagementHubManagedInstanceGroupRemovePackagesManagement;
export const OsManagementHubManagedInstanceGroupRemovePackagesManagement: typeof import("./osManagementHubManagedInstanceGroupRemovePackagesManagement").OsManagementHubManagedInstanceGroupRemovePackagesManagement = null as any;
utilities.lazyLoad(exports, ["OsManagementHubManagedInstanceGroupRemovePackagesManagement"], () => require("./osManagementHubManagedInstanceGroupRemovePackagesManagement"));

export { OsManagementHubManagedInstanceGroupUpdateAllPackagesManagementArgs, OsManagementHubManagedInstanceGroupUpdateAllPackagesManagementState } from "./osManagementHubManagedInstanceGroupUpdateAllPackagesManagement";
export type OsManagementHubManagedInstanceGroupUpdateAllPackagesManagement = import("./osManagementHubManagedInstanceGroupUpdateAllPackagesManagement").OsManagementHubManagedInstanceGroupUpdateAllPackagesManagement;
export const OsManagementHubManagedInstanceGroupUpdateAllPackagesManagement: typeof import("./osManagementHubManagedInstanceGroupUpdateAllPackagesManagement").OsManagementHubManagedInstanceGroupUpdateAllPackagesManagement = null as any;
utilities.lazyLoad(exports, ["OsManagementHubManagedInstanceGroupUpdateAllPackagesManagement"], () => require("./osManagementHubManagedInstanceGroupUpdateAllPackagesManagement"));

export { OsManagementHubManagedInstanceInstallWindowsUpdatesManagementArgs, OsManagementHubManagedInstanceInstallWindowsUpdatesManagementState } from "./osManagementHubManagedInstanceInstallWindowsUpdatesManagement";
export type OsManagementHubManagedInstanceInstallWindowsUpdatesManagement = import("./osManagementHubManagedInstanceInstallWindowsUpdatesManagement").OsManagementHubManagedInstanceInstallWindowsUpdatesManagement;
export const OsManagementHubManagedInstanceInstallWindowsUpdatesManagement: typeof import("./osManagementHubManagedInstanceInstallWindowsUpdatesManagement").OsManagementHubManagedInstanceInstallWindowsUpdatesManagement = null as any;
utilities.lazyLoad(exports, ["OsManagementHubManagedInstanceInstallWindowsUpdatesManagement"], () => require("./osManagementHubManagedInstanceInstallWindowsUpdatesManagement"));

export { OsManagementHubManagedInstanceUpdatePackagesManagementArgs, OsManagementHubManagedInstanceUpdatePackagesManagementState } from "./osManagementHubManagedInstanceUpdatePackagesManagement";
export type OsManagementHubManagedInstanceUpdatePackagesManagement = import("./osManagementHubManagedInstanceUpdatePackagesManagement").OsManagementHubManagedInstanceUpdatePackagesManagement;
export const OsManagementHubManagedInstanceUpdatePackagesManagement: typeof import("./osManagementHubManagedInstanceUpdatePackagesManagement").OsManagementHubManagedInstanceUpdatePackagesManagement = null as any;
utilities.lazyLoad(exports, ["OsManagementHubManagedInstanceUpdatePackagesManagement"], () => require("./osManagementHubManagedInstanceUpdatePackagesManagement"));

export { OsManagementHubManagementStationArgs, OsManagementHubManagementStationState } from "./osManagementHubManagementStation";
export type OsManagementHubManagementStation = import("./osManagementHubManagementStation").OsManagementHubManagementStation;
export const OsManagementHubManagementStation: typeof import("./osManagementHubManagementStation").OsManagementHubManagementStation = null as any;
utilities.lazyLoad(exports, ["OsManagementHubManagementStation"], () => require("./osManagementHubManagementStation"));

export { OsManagementHubManagementStationMirrorSynchronizeManagementArgs, OsManagementHubManagementStationMirrorSynchronizeManagementState } from "./osManagementHubManagementStationMirrorSynchronizeManagement";
export type OsManagementHubManagementStationMirrorSynchronizeManagement = import("./osManagementHubManagementStationMirrorSynchronizeManagement").OsManagementHubManagementStationMirrorSynchronizeManagement;
export const OsManagementHubManagementStationMirrorSynchronizeManagement: typeof import("./osManagementHubManagementStationMirrorSynchronizeManagement").OsManagementHubManagementStationMirrorSynchronizeManagement = null as any;
utilities.lazyLoad(exports, ["OsManagementHubManagementStationMirrorSynchronizeManagement"], () => require("./osManagementHubManagementStationMirrorSynchronizeManagement"));

export { OsManagementHubManagementStationRefreshManagementArgs, OsManagementHubManagementStationRefreshManagementState } from "./osManagementHubManagementStationRefreshManagement";
export type OsManagementHubManagementStationRefreshManagement = import("./osManagementHubManagementStationRefreshManagement").OsManagementHubManagementStationRefreshManagement;
export const OsManagementHubManagementStationRefreshManagement: typeof import("./osManagementHubManagementStationRefreshManagement").OsManagementHubManagementStationRefreshManagement = null as any;
utilities.lazyLoad(exports, ["OsManagementHubManagementStationRefreshManagement"], () => require("./osManagementHubManagementStationRefreshManagement"));

export { OsManagementHubManagementStationSynchronizeMirrorsManagementArgs, OsManagementHubManagementStationSynchronizeMirrorsManagementState } from "./osManagementHubManagementStationSynchronizeMirrorsManagement";
export type OsManagementHubManagementStationSynchronizeMirrorsManagement = import("./osManagementHubManagementStationSynchronizeMirrorsManagement").OsManagementHubManagementStationSynchronizeMirrorsManagement;
export const OsManagementHubManagementStationSynchronizeMirrorsManagement: typeof import("./osManagementHubManagementStationSynchronizeMirrorsManagement").OsManagementHubManagementStationSynchronizeMirrorsManagement = null as any;
utilities.lazyLoad(exports, ["OsManagementHubManagementStationSynchronizeMirrorsManagement"], () => require("./osManagementHubManagementStationSynchronizeMirrorsManagement"));

export { OsManagementHubProfileArgs, OsManagementHubProfileState } from "./osManagementHubProfile";
export type OsManagementHubProfile = import("./osManagementHubProfile").OsManagementHubProfile;
export const OsManagementHubProfile: typeof import("./osManagementHubProfile").OsManagementHubProfile = null as any;
utilities.lazyLoad(exports, ["OsManagementHubProfile"], () => require("./osManagementHubProfile"));

export { OsManagementHubScheduledJobArgs, OsManagementHubScheduledJobState } from "./osManagementHubScheduledJob";
export type OsManagementHubScheduledJob = import("./osManagementHubScheduledJob").OsManagementHubScheduledJob;
export const OsManagementHubScheduledJob: typeof import("./osManagementHubScheduledJob").OsManagementHubScheduledJob = null as any;
utilities.lazyLoad(exports, ["OsManagementHubScheduledJob"], () => require("./osManagementHubScheduledJob"));

export { OsManagementHubSoftwareSourceArgs, OsManagementHubSoftwareSourceState } from "./osManagementHubSoftwareSource";
export type OsManagementHubSoftwareSource = import("./osManagementHubSoftwareSource").OsManagementHubSoftwareSource;
export const OsManagementHubSoftwareSource: typeof import("./osManagementHubSoftwareSource").OsManagementHubSoftwareSource = null as any;
utilities.lazyLoad(exports, ["OsManagementHubSoftwareSource"], () => require("./osManagementHubSoftwareSource"));

export { OsManagementHubSoftwareSourceAddPackagesManagementArgs, OsManagementHubSoftwareSourceAddPackagesManagementState } from "./osManagementHubSoftwareSourceAddPackagesManagement";
export type OsManagementHubSoftwareSourceAddPackagesManagement = import("./osManagementHubSoftwareSourceAddPackagesManagement").OsManagementHubSoftwareSourceAddPackagesManagement;
export const OsManagementHubSoftwareSourceAddPackagesManagement: typeof import("./osManagementHubSoftwareSourceAddPackagesManagement").OsManagementHubSoftwareSourceAddPackagesManagement = null as any;
utilities.lazyLoad(exports, ["OsManagementHubSoftwareSourceAddPackagesManagement"], () => require("./osManagementHubSoftwareSourceAddPackagesManagement"));

export { OsManagementHubSoftwareSourceChangeAvailabilityManagementArgs, OsManagementHubSoftwareSourceChangeAvailabilityManagementState } from "./osManagementHubSoftwareSourceChangeAvailabilityManagement";
export type OsManagementHubSoftwareSourceChangeAvailabilityManagement = import("./osManagementHubSoftwareSourceChangeAvailabilityManagement").OsManagementHubSoftwareSourceChangeAvailabilityManagement;
export const OsManagementHubSoftwareSourceChangeAvailabilityManagement: typeof import("./osManagementHubSoftwareSourceChangeAvailabilityManagement").OsManagementHubSoftwareSourceChangeAvailabilityManagement = null as any;
utilities.lazyLoad(exports, ["OsManagementHubSoftwareSourceChangeAvailabilityManagement"], () => require("./osManagementHubSoftwareSourceChangeAvailabilityManagement"));

export { OsmanagementManagedInstanceArgs, OsmanagementManagedInstanceState } from "./osmanagementManagedInstance";
export type OsmanagementManagedInstance = import("./osmanagementManagedInstance").OsmanagementManagedInstance;
export const OsmanagementManagedInstance: typeof import("./osmanagementManagedInstance").OsmanagementManagedInstance = null as any;
utilities.lazyLoad(exports, ["OsmanagementManagedInstance"], () => require("./osmanagementManagedInstance"));

export { OsmanagementManagedInstanceGroupArgs, OsmanagementManagedInstanceGroupState } from "./osmanagementManagedInstanceGroup";
export type OsmanagementManagedInstanceGroup = import("./osmanagementManagedInstanceGroup").OsmanagementManagedInstanceGroup;
export const OsmanagementManagedInstanceGroup: typeof import("./osmanagementManagedInstanceGroup").OsmanagementManagedInstanceGroup = null as any;
utilities.lazyLoad(exports, ["OsmanagementManagedInstanceGroup"], () => require("./osmanagementManagedInstanceGroup"));

export { OsmanagementManagedInstanceManagementArgs, OsmanagementManagedInstanceManagementState } from "./osmanagementManagedInstanceManagement";
export type OsmanagementManagedInstanceManagement = import("./osmanagementManagedInstanceManagement").OsmanagementManagedInstanceManagement;
export const OsmanagementManagedInstanceManagement: typeof import("./osmanagementManagedInstanceManagement").OsmanagementManagedInstanceManagement = null as any;
utilities.lazyLoad(exports, ["OsmanagementManagedInstanceManagement"], () => require("./osmanagementManagedInstanceManagement"));

export { OsmanagementSoftwareSourceArgs, OsmanagementSoftwareSourceState } from "./osmanagementSoftwareSource";
export type OsmanagementSoftwareSource = import("./osmanagementSoftwareSource").OsmanagementSoftwareSource;
export const OsmanagementSoftwareSource: typeof import("./osmanagementSoftwareSource").OsmanagementSoftwareSource = null as any;
utilities.lazyLoad(exports, ["OsmanagementSoftwareSource"], () => require("./osmanagementSoftwareSource"));

export { OspGatewayAddressActionVerificationArgs, OspGatewayAddressActionVerificationState } from "./ospGatewayAddressActionVerification";
export type OspGatewayAddressActionVerification = import("./ospGatewayAddressActionVerification").OspGatewayAddressActionVerification;
export const OspGatewayAddressActionVerification: typeof import("./ospGatewayAddressActionVerification").OspGatewayAddressActionVerification = null as any;
utilities.lazyLoad(exports, ["OspGatewayAddressActionVerification"], () => require("./ospGatewayAddressActionVerification"));

export { OspGatewaySubscriptionArgs, OspGatewaySubscriptionState } from "./ospGatewaySubscription";
export type OspGatewaySubscription = import("./ospGatewaySubscription").OspGatewaySubscription;
export const OspGatewaySubscription: typeof import("./ospGatewaySubscription").OspGatewaySubscription = null as any;
utilities.lazyLoad(exports, ["OspGatewaySubscription"], () => require("./ospGatewaySubscription"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { PsqlBackupArgs, PsqlBackupState } from "./psqlBackup";
export type PsqlBackup = import("./psqlBackup").PsqlBackup;
export const PsqlBackup: typeof import("./psqlBackup").PsqlBackup = null as any;
utilities.lazyLoad(exports, ["PsqlBackup"], () => require("./psqlBackup"));

export { PsqlConfigurationArgs, PsqlConfigurationState } from "./psqlConfiguration";
export type PsqlConfiguration = import("./psqlConfiguration").PsqlConfiguration;
export const PsqlConfiguration: typeof import("./psqlConfiguration").PsqlConfiguration = null as any;
utilities.lazyLoad(exports, ["PsqlConfiguration"], () => require("./psqlConfiguration"));

export { PsqlDbSystemArgs, PsqlDbSystemState } from "./psqlDbSystem";
export type PsqlDbSystem = import("./psqlDbSystem").PsqlDbSystem;
export const PsqlDbSystem: typeof import("./psqlDbSystem").PsqlDbSystem = null as any;
utilities.lazyLoad(exports, ["PsqlDbSystem"], () => require("./psqlDbSystem"));

export { QueueQueueArgs, QueueQueueState } from "./queueQueue";
export type QueueQueue = import("./queueQueue").QueueQueue;
export const QueueQueue: typeof import("./queueQueue").QueueQueue = null as any;
utilities.lazyLoad(exports, ["QueueQueue"], () => require("./queueQueue"));

export { RecoveryProtectedDatabaseArgs, RecoveryProtectedDatabaseState } from "./recoveryProtectedDatabase";
export type RecoveryProtectedDatabase = import("./recoveryProtectedDatabase").RecoveryProtectedDatabase;
export const RecoveryProtectedDatabase: typeof import("./recoveryProtectedDatabase").RecoveryProtectedDatabase = null as any;
utilities.lazyLoad(exports, ["RecoveryProtectedDatabase"], () => require("./recoveryProtectedDatabase"));

export { RecoveryProtectionPolicyArgs, RecoveryProtectionPolicyState } from "./recoveryProtectionPolicy";
export type RecoveryProtectionPolicy = import("./recoveryProtectionPolicy").RecoveryProtectionPolicy;
export const RecoveryProtectionPolicy: typeof import("./recoveryProtectionPolicy").RecoveryProtectionPolicy = null as any;
utilities.lazyLoad(exports, ["RecoveryProtectionPolicy"], () => require("./recoveryProtectionPolicy"));

export { RecoveryRecoveryServiceSubnetArgs, RecoveryRecoveryServiceSubnetState } from "./recoveryRecoveryServiceSubnet";
export type RecoveryRecoveryServiceSubnet = import("./recoveryRecoveryServiceSubnet").RecoveryRecoveryServiceSubnet;
export const RecoveryRecoveryServiceSubnet: typeof import("./recoveryRecoveryServiceSubnet").RecoveryRecoveryServiceSubnet = null as any;
utilities.lazyLoad(exports, ["RecoveryRecoveryServiceSubnet"], () => require("./recoveryRecoveryServiceSubnet"));

export { RedisRedisClusterArgs, RedisRedisClusterState } from "./redisRedisCluster";
export type RedisRedisCluster = import("./redisRedisCluster").RedisRedisCluster;
export const RedisRedisCluster: typeof import("./redisRedisCluster").RedisRedisCluster = null as any;
utilities.lazyLoad(exports, ["RedisRedisCluster"], () => require("./redisRedisCluster"));

export { ResourceSchedulerScheduleArgs, ResourceSchedulerScheduleState } from "./resourceSchedulerSchedule";
export type ResourceSchedulerSchedule = import("./resourceSchedulerSchedule").ResourceSchedulerSchedule;
export const ResourceSchedulerSchedule: typeof import("./resourceSchedulerSchedule").ResourceSchedulerSchedule = null as any;
utilities.lazyLoad(exports, ["ResourceSchedulerSchedule"], () => require("./resourceSchedulerSchedule"));

export { ResourcemanagerPrivateEndpointArgs, ResourcemanagerPrivateEndpointState } from "./resourcemanagerPrivateEndpoint";
export type ResourcemanagerPrivateEndpoint = import("./resourcemanagerPrivateEndpoint").ResourcemanagerPrivateEndpoint;
export const ResourcemanagerPrivateEndpoint: typeof import("./resourcemanagerPrivateEndpoint").ResourcemanagerPrivateEndpoint = null as any;
utilities.lazyLoad(exports, ["ResourcemanagerPrivateEndpoint"], () => require("./resourcemanagerPrivateEndpoint"));

export { SchServiceConnectorArgs, SchServiceConnectorState } from "./schServiceConnector";
export type SchServiceConnector = import("./schServiceConnector").SchServiceConnector;
export const SchServiceConnector: typeof import("./schServiceConnector").SchServiceConnector = null as any;
utilities.lazyLoad(exports, ["SchServiceConnector"], () => require("./schServiceConnector"));

export { ServiceCatalogPrivateApplicationArgs, ServiceCatalogPrivateApplicationState } from "./serviceCatalogPrivateApplication";
export type ServiceCatalogPrivateApplication = import("./serviceCatalogPrivateApplication").ServiceCatalogPrivateApplication;
export const ServiceCatalogPrivateApplication: typeof import("./serviceCatalogPrivateApplication").ServiceCatalogPrivateApplication = null as any;
utilities.lazyLoad(exports, ["ServiceCatalogPrivateApplication"], () => require("./serviceCatalogPrivateApplication"));

export { ServiceCatalogServiceCatalogArgs, ServiceCatalogServiceCatalogState } from "./serviceCatalogServiceCatalog";
export type ServiceCatalogServiceCatalog = import("./serviceCatalogServiceCatalog").ServiceCatalogServiceCatalog;
export const ServiceCatalogServiceCatalog: typeof import("./serviceCatalogServiceCatalog").ServiceCatalogServiceCatalog = null as any;
utilities.lazyLoad(exports, ["ServiceCatalogServiceCatalog"], () => require("./serviceCatalogServiceCatalog"));

export { ServiceCatalogServiceCatalogAssociationArgs, ServiceCatalogServiceCatalogAssociationState } from "./serviceCatalogServiceCatalogAssociation";
export type ServiceCatalogServiceCatalogAssociation = import("./serviceCatalogServiceCatalogAssociation").ServiceCatalogServiceCatalogAssociation;
export const ServiceCatalogServiceCatalogAssociation: typeof import("./serviceCatalogServiceCatalogAssociation").ServiceCatalogServiceCatalogAssociation = null as any;
utilities.lazyLoad(exports, ["ServiceCatalogServiceCatalogAssociation"], () => require("./serviceCatalogServiceCatalogAssociation"));

export { ServiceMeshAccessPolicyArgs, ServiceMeshAccessPolicyState } from "./serviceMeshAccessPolicy";
export type ServiceMeshAccessPolicy = import("./serviceMeshAccessPolicy").ServiceMeshAccessPolicy;
export const ServiceMeshAccessPolicy: typeof import("./serviceMeshAccessPolicy").ServiceMeshAccessPolicy = null as any;
utilities.lazyLoad(exports, ["ServiceMeshAccessPolicy"], () => require("./serviceMeshAccessPolicy"));

export { ServiceMeshIngressGatewayArgs, ServiceMeshIngressGatewayState } from "./serviceMeshIngressGateway";
export type ServiceMeshIngressGateway = import("./serviceMeshIngressGateway").ServiceMeshIngressGateway;
export const ServiceMeshIngressGateway: typeof import("./serviceMeshIngressGateway").ServiceMeshIngressGateway = null as any;
utilities.lazyLoad(exports, ["ServiceMeshIngressGateway"], () => require("./serviceMeshIngressGateway"));

export { ServiceMeshIngressGatewayRouteTableArgs, ServiceMeshIngressGatewayRouteTableState } from "./serviceMeshIngressGatewayRouteTable";
export type ServiceMeshIngressGatewayRouteTable = import("./serviceMeshIngressGatewayRouteTable").ServiceMeshIngressGatewayRouteTable;
export const ServiceMeshIngressGatewayRouteTable: typeof import("./serviceMeshIngressGatewayRouteTable").ServiceMeshIngressGatewayRouteTable = null as any;
utilities.lazyLoad(exports, ["ServiceMeshIngressGatewayRouteTable"], () => require("./serviceMeshIngressGatewayRouteTable"));

export { ServiceMeshMeshArgs, ServiceMeshMeshState } from "./serviceMeshMesh";
export type ServiceMeshMesh = import("./serviceMeshMesh").ServiceMeshMesh;
export const ServiceMeshMesh: typeof import("./serviceMeshMesh").ServiceMeshMesh = null as any;
utilities.lazyLoad(exports, ["ServiceMeshMesh"], () => require("./serviceMeshMesh"));

export { ServiceMeshVirtualDeploymentArgs, ServiceMeshVirtualDeploymentState } from "./serviceMeshVirtualDeployment";
export type ServiceMeshVirtualDeployment = import("./serviceMeshVirtualDeployment").ServiceMeshVirtualDeployment;
export const ServiceMeshVirtualDeployment: typeof import("./serviceMeshVirtualDeployment").ServiceMeshVirtualDeployment = null as any;
utilities.lazyLoad(exports, ["ServiceMeshVirtualDeployment"], () => require("./serviceMeshVirtualDeployment"));

export { ServiceMeshVirtualServiceArgs, ServiceMeshVirtualServiceState } from "./serviceMeshVirtualService";
export type ServiceMeshVirtualService = import("./serviceMeshVirtualService").ServiceMeshVirtualService;
export const ServiceMeshVirtualService: typeof import("./serviceMeshVirtualService").ServiceMeshVirtualService = null as any;
utilities.lazyLoad(exports, ["ServiceMeshVirtualService"], () => require("./serviceMeshVirtualService"));

export { ServiceMeshVirtualServiceRouteTableArgs, ServiceMeshVirtualServiceRouteTableState } from "./serviceMeshVirtualServiceRouteTable";
export type ServiceMeshVirtualServiceRouteTable = import("./serviceMeshVirtualServiceRouteTable").ServiceMeshVirtualServiceRouteTable;
export const ServiceMeshVirtualServiceRouteTable: typeof import("./serviceMeshVirtualServiceRouteTable").ServiceMeshVirtualServiceRouteTable = null as any;
utilities.lazyLoad(exports, ["ServiceMeshVirtualServiceRouteTable"], () => require("./serviceMeshVirtualServiceRouteTable"));

export { StackMonitoringBaselineableMetricArgs, StackMonitoringBaselineableMetricState } from "./stackMonitoringBaselineableMetric";
export type StackMonitoringBaselineableMetric = import("./stackMonitoringBaselineableMetric").StackMonitoringBaselineableMetric;
export const StackMonitoringBaselineableMetric: typeof import("./stackMonitoringBaselineableMetric").StackMonitoringBaselineableMetric = null as any;
utilities.lazyLoad(exports, ["StackMonitoringBaselineableMetric"], () => require("./stackMonitoringBaselineableMetric"));

export { StackMonitoringConfigArgs, StackMonitoringConfigState } from "./stackMonitoringConfig";
export type StackMonitoringConfig = import("./stackMonitoringConfig").StackMonitoringConfig;
export const StackMonitoringConfig: typeof import("./stackMonitoringConfig").StackMonitoringConfig = null as any;
utilities.lazyLoad(exports, ["StackMonitoringConfig"], () => require("./stackMonitoringConfig"));

export { StackMonitoringDiscoveryJobArgs, StackMonitoringDiscoveryJobState } from "./stackMonitoringDiscoveryJob";
export type StackMonitoringDiscoveryJob = import("./stackMonitoringDiscoveryJob").StackMonitoringDiscoveryJob;
export const StackMonitoringDiscoveryJob: typeof import("./stackMonitoringDiscoveryJob").StackMonitoringDiscoveryJob = null as any;
utilities.lazyLoad(exports, ["StackMonitoringDiscoveryJob"], () => require("./stackMonitoringDiscoveryJob"));

export { StackMonitoringMetricExtensionArgs, StackMonitoringMetricExtensionState } from "./stackMonitoringMetricExtension";
export type StackMonitoringMetricExtension = import("./stackMonitoringMetricExtension").StackMonitoringMetricExtension;
export const StackMonitoringMetricExtension: typeof import("./stackMonitoringMetricExtension").StackMonitoringMetricExtension = null as any;
utilities.lazyLoad(exports, ["StackMonitoringMetricExtension"], () => require("./stackMonitoringMetricExtension"));

export { StackMonitoringMetricExtensionMetricExtensionOnGivenResourcesManagementArgs, StackMonitoringMetricExtensionMetricExtensionOnGivenResourcesManagementState } from "./stackMonitoringMetricExtensionMetricExtensionOnGivenResourcesManagement";
export type StackMonitoringMetricExtensionMetricExtensionOnGivenResourcesManagement = import("./stackMonitoringMetricExtensionMetricExtensionOnGivenResourcesManagement").StackMonitoringMetricExtensionMetricExtensionOnGivenResourcesManagement;
export const StackMonitoringMetricExtensionMetricExtensionOnGivenResourcesManagement: typeof import("./stackMonitoringMetricExtensionMetricExtensionOnGivenResourcesManagement").StackMonitoringMetricExtensionMetricExtensionOnGivenResourcesManagement = null as any;
utilities.lazyLoad(exports, ["StackMonitoringMetricExtensionMetricExtensionOnGivenResourcesManagement"], () => require("./stackMonitoringMetricExtensionMetricExtensionOnGivenResourcesManagement"));

export { StackMonitoringMetricExtensionsTestManagementArgs, StackMonitoringMetricExtensionsTestManagementState } from "./stackMonitoringMetricExtensionsTestManagement";
export type StackMonitoringMetricExtensionsTestManagement = import("./stackMonitoringMetricExtensionsTestManagement").StackMonitoringMetricExtensionsTestManagement;
export const StackMonitoringMetricExtensionsTestManagement: typeof import("./stackMonitoringMetricExtensionsTestManagement").StackMonitoringMetricExtensionsTestManagement = null as any;
utilities.lazyLoad(exports, ["StackMonitoringMetricExtensionsTestManagement"], () => require("./stackMonitoringMetricExtensionsTestManagement"));

export { StackMonitoringMonitoredResourceArgs, StackMonitoringMonitoredResourceState } from "./stackMonitoringMonitoredResource";
export type StackMonitoringMonitoredResource = import("./stackMonitoringMonitoredResource").StackMonitoringMonitoredResource;
export const StackMonitoringMonitoredResource: typeof import("./stackMonitoringMonitoredResource").StackMonitoringMonitoredResource = null as any;
utilities.lazyLoad(exports, ["StackMonitoringMonitoredResource"], () => require("./stackMonitoringMonitoredResource"));

export { StackMonitoringMonitoredResourceTaskArgs, StackMonitoringMonitoredResourceTaskState } from "./stackMonitoringMonitoredResourceTask";
export type StackMonitoringMonitoredResourceTask = import("./stackMonitoringMonitoredResourceTask").StackMonitoringMonitoredResourceTask;
export const StackMonitoringMonitoredResourceTask: typeof import("./stackMonitoringMonitoredResourceTask").StackMonitoringMonitoredResourceTask = null as any;
utilities.lazyLoad(exports, ["StackMonitoringMonitoredResourceTask"], () => require("./stackMonitoringMonitoredResourceTask"));

export { StackMonitoringMonitoredResourceTypeArgs, StackMonitoringMonitoredResourceTypeState } from "./stackMonitoringMonitoredResourceType";
export type StackMonitoringMonitoredResourceType = import("./stackMonitoringMonitoredResourceType").StackMonitoringMonitoredResourceType;
export const StackMonitoringMonitoredResourceType: typeof import("./stackMonitoringMonitoredResourceType").StackMonitoringMonitoredResourceType = null as any;
utilities.lazyLoad(exports, ["StackMonitoringMonitoredResourceType"], () => require("./stackMonitoringMonitoredResourceType"));

export { StackMonitoringMonitoredResourcesAssociateMonitoredResourceArgs, StackMonitoringMonitoredResourcesAssociateMonitoredResourceState } from "./stackMonitoringMonitoredResourcesAssociateMonitoredResource";
export type StackMonitoringMonitoredResourcesAssociateMonitoredResource = import("./stackMonitoringMonitoredResourcesAssociateMonitoredResource").StackMonitoringMonitoredResourcesAssociateMonitoredResource;
export const StackMonitoringMonitoredResourcesAssociateMonitoredResource: typeof import("./stackMonitoringMonitoredResourcesAssociateMonitoredResource").StackMonitoringMonitoredResourcesAssociateMonitoredResource = null as any;
utilities.lazyLoad(exports, ["StackMonitoringMonitoredResourcesAssociateMonitoredResource"], () => require("./stackMonitoringMonitoredResourcesAssociateMonitoredResource"));

export { StackMonitoringMonitoredResourcesListMemberArgs, StackMonitoringMonitoredResourcesListMemberState } from "./stackMonitoringMonitoredResourcesListMember";
export type StackMonitoringMonitoredResourcesListMember = import("./stackMonitoringMonitoredResourcesListMember").StackMonitoringMonitoredResourcesListMember;
export const StackMonitoringMonitoredResourcesListMember: typeof import("./stackMonitoringMonitoredResourcesListMember").StackMonitoringMonitoredResourcesListMember = null as any;
utilities.lazyLoad(exports, ["StackMonitoringMonitoredResourcesListMember"], () => require("./stackMonitoringMonitoredResourcesListMember"));

export { StackMonitoringMonitoredResourcesSearchArgs, StackMonitoringMonitoredResourcesSearchState } from "./stackMonitoringMonitoredResourcesSearch";
export type StackMonitoringMonitoredResourcesSearch = import("./stackMonitoringMonitoredResourcesSearch").StackMonitoringMonitoredResourcesSearch;
export const StackMonitoringMonitoredResourcesSearch: typeof import("./stackMonitoringMonitoredResourcesSearch").StackMonitoringMonitoredResourcesSearch = null as any;
utilities.lazyLoad(exports, ["StackMonitoringMonitoredResourcesSearch"], () => require("./stackMonitoringMonitoredResourcesSearch"));

export { StackMonitoringMonitoredResourcesSearchAssociationArgs, StackMonitoringMonitoredResourcesSearchAssociationState } from "./stackMonitoringMonitoredResourcesSearchAssociation";
export type StackMonitoringMonitoredResourcesSearchAssociation = import("./stackMonitoringMonitoredResourcesSearchAssociation").StackMonitoringMonitoredResourcesSearchAssociation;
export const StackMonitoringMonitoredResourcesSearchAssociation: typeof import("./stackMonitoringMonitoredResourcesSearchAssociation").StackMonitoringMonitoredResourcesSearchAssociation = null as any;
utilities.lazyLoad(exports, ["StackMonitoringMonitoredResourcesSearchAssociation"], () => require("./stackMonitoringMonitoredResourcesSearchAssociation"));

export { StackMonitoringProcessSetArgs, StackMonitoringProcessSetState } from "./stackMonitoringProcessSet";
export type StackMonitoringProcessSet = import("./stackMonitoringProcessSet").StackMonitoringProcessSet;
export const StackMonitoringProcessSet: typeof import("./stackMonitoringProcessSet").StackMonitoringProcessSet = null as any;
utilities.lazyLoad(exports, ["StackMonitoringProcessSet"], () => require("./stackMonitoringProcessSet"));

export { StreamingConnectHarnessArgs, StreamingConnectHarnessState } from "./streamingConnectHarness";
export type StreamingConnectHarness = import("./streamingConnectHarness").StreamingConnectHarness;
export const StreamingConnectHarness: typeof import("./streamingConnectHarness").StreamingConnectHarness = null as any;
utilities.lazyLoad(exports, ["StreamingConnectHarness"], () => require("./streamingConnectHarness"));

export { StreamingStreamArgs, StreamingStreamState } from "./streamingStream";
export type StreamingStream = import("./streamingStream").StreamingStream;
export const StreamingStream: typeof import("./streamingStream").StreamingStream = null as any;
utilities.lazyLoad(exports, ["StreamingStream"], () => require("./streamingStream"));

export { StreamingStreamPoolArgs, StreamingStreamPoolState } from "./streamingStreamPool";
export type StreamingStreamPool = import("./streamingStreamPool").StreamingStreamPool;
export const StreamingStreamPool: typeof import("./streamingStreamPool").StreamingStreamPool = null as any;
utilities.lazyLoad(exports, ["StreamingStreamPool"], () => require("./streamingStreamPool"));

export { UsageProxySubscriptionRedeemableUserArgs, UsageProxySubscriptionRedeemableUserState } from "./usageProxySubscriptionRedeemableUser";
export type UsageProxySubscriptionRedeemableUser = import("./usageProxySubscriptionRedeemableUser").UsageProxySubscriptionRedeemableUser;
export const UsageProxySubscriptionRedeemableUser: typeof import("./usageProxySubscriptionRedeemableUser").UsageProxySubscriptionRedeemableUser = null as any;
utilities.lazyLoad(exports, ["UsageProxySubscriptionRedeemableUser"], () => require("./usageProxySubscriptionRedeemableUser"));

export { VaultSecretArgs, VaultSecretState } from "./vaultSecret";
export type VaultSecret = import("./vaultSecret").VaultSecret;
export const VaultSecret: typeof import("./vaultSecret").VaultSecret = null as any;
utilities.lazyLoad(exports, ["VaultSecret"], () => require("./vaultSecret"));

export { VbsInstVbsInstanceArgs, VbsInstVbsInstanceState } from "./vbsInstVbsInstance";
export type VbsInstVbsInstance = import("./vbsInstVbsInstance").VbsInstVbsInstance;
export const VbsInstVbsInstance: typeof import("./vbsInstVbsInstance").VbsInstVbsInstance = null as any;
utilities.lazyLoad(exports, ["VbsInstVbsInstance"], () => require("./vbsInstVbsInstance"));

export { VisualBuilderVbInstanceArgs, VisualBuilderVbInstanceState } from "./visualBuilderVbInstance";
export type VisualBuilderVbInstance = import("./visualBuilderVbInstance").VisualBuilderVbInstance;
export const VisualBuilderVbInstance: typeof import("./visualBuilderVbInstance").VisualBuilderVbInstance = null as any;
utilities.lazyLoad(exports, ["VisualBuilderVbInstance"], () => require("./visualBuilderVbInstance"));

export { VnMonitoringPathAnalysiArgs, VnMonitoringPathAnalysiState } from "./vnMonitoringPathAnalysi";
export type VnMonitoringPathAnalysi = import("./vnMonitoringPathAnalysi").VnMonitoringPathAnalysi;
export const VnMonitoringPathAnalysi: typeof import("./vnMonitoringPathAnalysi").VnMonitoringPathAnalysi = null as any;
utilities.lazyLoad(exports, ["VnMonitoringPathAnalysi"], () => require("./vnMonitoringPathAnalysi"));

export { VnMonitoringPathAnalyzerTestArgs, VnMonitoringPathAnalyzerTestState } from "./vnMonitoringPathAnalyzerTest";
export type VnMonitoringPathAnalyzerTest = import("./vnMonitoringPathAnalyzerTest").VnMonitoringPathAnalyzerTest;
export const VnMonitoringPathAnalyzerTest: typeof import("./vnMonitoringPathAnalyzerTest").VnMonitoringPathAnalyzerTest = null as any;
utilities.lazyLoad(exports, ["VnMonitoringPathAnalyzerTest"], () => require("./vnMonitoringPathAnalyzerTest"));

export { VulnerabilityScanningContainerScanRecipeArgs, VulnerabilityScanningContainerScanRecipeState } from "./vulnerabilityScanningContainerScanRecipe";
export type VulnerabilityScanningContainerScanRecipe = import("./vulnerabilityScanningContainerScanRecipe").VulnerabilityScanningContainerScanRecipe;
export const VulnerabilityScanningContainerScanRecipe: typeof import("./vulnerabilityScanningContainerScanRecipe").VulnerabilityScanningContainerScanRecipe = null as any;
utilities.lazyLoad(exports, ["VulnerabilityScanningContainerScanRecipe"], () => require("./vulnerabilityScanningContainerScanRecipe"));

export { VulnerabilityScanningContainerScanTargetArgs, VulnerabilityScanningContainerScanTargetState } from "./vulnerabilityScanningContainerScanTarget";
export type VulnerabilityScanningContainerScanTarget = import("./vulnerabilityScanningContainerScanTarget").VulnerabilityScanningContainerScanTarget;
export const VulnerabilityScanningContainerScanTarget: typeof import("./vulnerabilityScanningContainerScanTarget").VulnerabilityScanningContainerScanTarget = null as any;
utilities.lazyLoad(exports, ["VulnerabilityScanningContainerScanTarget"], () => require("./vulnerabilityScanningContainerScanTarget"));

export { VulnerabilityScanningHostScanRecipeArgs, VulnerabilityScanningHostScanRecipeState } from "./vulnerabilityScanningHostScanRecipe";
export type VulnerabilityScanningHostScanRecipe = import("./vulnerabilityScanningHostScanRecipe").VulnerabilityScanningHostScanRecipe;
export const VulnerabilityScanningHostScanRecipe: typeof import("./vulnerabilityScanningHostScanRecipe").VulnerabilityScanningHostScanRecipe = null as any;
utilities.lazyLoad(exports, ["VulnerabilityScanningHostScanRecipe"], () => require("./vulnerabilityScanningHostScanRecipe"));

export { VulnerabilityScanningHostScanTargetArgs, VulnerabilityScanningHostScanTargetState } from "./vulnerabilityScanningHostScanTarget";
export type VulnerabilityScanningHostScanTarget = import("./vulnerabilityScanningHostScanTarget").VulnerabilityScanningHostScanTarget;
export const VulnerabilityScanningHostScanTarget: typeof import("./vulnerabilityScanningHostScanTarget").VulnerabilityScanningHostScanTarget = null as any;
utilities.lazyLoad(exports, ["VulnerabilityScanningHostScanTarget"], () => require("./vulnerabilityScanningHostScanTarget"));

export { WaaWebAppAccelerationArgs, WaaWebAppAccelerationState } from "./waaWebAppAcceleration";
export type WaaWebAppAcceleration = import("./waaWebAppAcceleration").WaaWebAppAcceleration;
export const WaaWebAppAcceleration: typeof import("./waaWebAppAcceleration").WaaWebAppAcceleration = null as any;
utilities.lazyLoad(exports, ["WaaWebAppAcceleration"], () => require("./waaWebAppAcceleration"));

export { WaaWebAppAccelerationPolicyArgs, WaaWebAppAccelerationPolicyState } from "./waaWebAppAccelerationPolicy";
export type WaaWebAppAccelerationPolicy = import("./waaWebAppAccelerationPolicy").WaaWebAppAccelerationPolicy;
export const WaaWebAppAccelerationPolicy: typeof import("./waaWebAppAccelerationPolicy").WaaWebAppAccelerationPolicy = null as any;
utilities.lazyLoad(exports, ["WaaWebAppAccelerationPolicy"], () => require("./waaWebAppAccelerationPolicy"));

export { WaasAddressListArgs, WaasAddressListState } from "./waasAddressList";
export type WaasAddressList = import("./waasAddressList").WaasAddressList;
export const WaasAddressList: typeof import("./waasAddressList").WaasAddressList = null as any;
utilities.lazyLoad(exports, ["WaasAddressList"], () => require("./waasAddressList"));

export { WaasCertificateArgs, WaasCertificateState } from "./waasCertificate";
export type WaasCertificate = import("./waasCertificate").WaasCertificate;
export const WaasCertificate: typeof import("./waasCertificate").WaasCertificate = null as any;
utilities.lazyLoad(exports, ["WaasCertificate"], () => require("./waasCertificate"));

export { WaasCustomProtectionRuleArgs, WaasCustomProtectionRuleState } from "./waasCustomProtectionRule";
export type WaasCustomProtectionRule = import("./waasCustomProtectionRule").WaasCustomProtectionRule;
export const WaasCustomProtectionRule: typeof import("./waasCustomProtectionRule").WaasCustomProtectionRule = null as any;
utilities.lazyLoad(exports, ["WaasCustomProtectionRule"], () => require("./waasCustomProtectionRule"));

export { WaasHttpRedirectArgs, WaasHttpRedirectState } from "./waasHttpRedirect";
export type WaasHttpRedirect = import("./waasHttpRedirect").WaasHttpRedirect;
export const WaasHttpRedirect: typeof import("./waasHttpRedirect").WaasHttpRedirect = null as any;
utilities.lazyLoad(exports, ["WaasHttpRedirect"], () => require("./waasHttpRedirect"));

export { WaasProtectionRuleArgs, WaasProtectionRuleState } from "./waasProtectionRule";
export type WaasProtectionRule = import("./waasProtectionRule").WaasProtectionRule;
export const WaasProtectionRule: typeof import("./waasProtectionRule").WaasProtectionRule = null as any;
utilities.lazyLoad(exports, ["WaasProtectionRule"], () => require("./waasProtectionRule"));

export { WaasPurgeCacheArgs, WaasPurgeCacheState } from "./waasPurgeCache";
export type WaasPurgeCache = import("./waasPurgeCache").WaasPurgeCache;
export const WaasPurgeCache: typeof import("./waasPurgeCache").WaasPurgeCache = null as any;
utilities.lazyLoad(exports, ["WaasPurgeCache"], () => require("./waasPurgeCache"));

export { WaasWaasPolicyArgs, WaasWaasPolicyState } from "./waasWaasPolicy";
export type WaasWaasPolicy = import("./waasWaasPolicy").WaasWaasPolicy;
export const WaasWaasPolicy: typeof import("./waasWaasPolicy").WaasWaasPolicy = null as any;
utilities.lazyLoad(exports, ["WaasWaasPolicy"], () => require("./waasWaasPolicy"));

export { WafNetworkAddressListArgs, WafNetworkAddressListState } from "./wafNetworkAddressList";
export type WafNetworkAddressList = import("./wafNetworkAddressList").WafNetworkAddressList;
export const WafNetworkAddressList: typeof import("./wafNetworkAddressList").WafNetworkAddressList = null as any;
utilities.lazyLoad(exports, ["WafNetworkAddressList"], () => require("./wafNetworkAddressList"));

export { WafWebAppFirewallArgs, WafWebAppFirewallState } from "./wafWebAppFirewall";
export type WafWebAppFirewall = import("./wafWebAppFirewall").WafWebAppFirewall;
export const WafWebAppFirewall: typeof import("./wafWebAppFirewall").WafWebAppFirewall = null as any;
utilities.lazyLoad(exports, ["WafWebAppFirewall"], () => require("./wafWebAppFirewall"));

export { WafWebAppFirewallPolicyArgs, WafWebAppFirewallPolicyState } from "./wafWebAppFirewallPolicy";
export type WafWebAppFirewallPolicy = import("./wafWebAppFirewallPolicy").WafWebAppFirewallPolicy;
export const WafWebAppFirewallPolicy: typeof import("./wafWebAppFirewallPolicy").WafWebAppFirewallPolicy = null as any;
utilities.lazyLoad(exports, ["WafWebAppFirewallPolicy"], () => require("./wafWebAppFirewallPolicy"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "oci:index/admKnowledgeBase:AdmKnowledgeBase":
                return new AdmKnowledgeBase(name, <any>undefined, { urn })
            case "oci:index/admRemediationRecipe:AdmRemediationRecipe":
                return new AdmRemediationRecipe(name, <any>undefined, { urn })
            case "oci:index/admRemediationRun:AdmRemediationRun":
                return new AdmRemediationRun(name, <any>undefined, { urn })
            case "oci:index/admVulnerabilityAudit:AdmVulnerabilityAudit":
                return new AdmVulnerabilityAudit(name, <any>undefined, { urn })
            case "oci:index/aiAnomalyDetectionAiPrivateEndpoint:AiAnomalyDetectionAiPrivateEndpoint":
                return new AiAnomalyDetectionAiPrivateEndpoint(name, <any>undefined, { urn })
            case "oci:index/aiAnomalyDetectionDataAsset:AiAnomalyDetectionDataAsset":
                return new AiAnomalyDetectionDataAsset(name, <any>undefined, { urn })
            case "oci:index/aiAnomalyDetectionDetectAnomalyJob:AiAnomalyDetectionDetectAnomalyJob":
                return new AiAnomalyDetectionDetectAnomalyJob(name, <any>undefined, { urn })
            case "oci:index/aiAnomalyDetectionModel:AiAnomalyDetectionModel":
                return new AiAnomalyDetectionModel(name, <any>undefined, { urn })
            case "oci:index/aiAnomalyDetectionProject:AiAnomalyDetectionProject":
                return new AiAnomalyDetectionProject(name, <any>undefined, { urn })
            case "oci:index/aiDocumentModel:AiDocumentModel":
                return new AiDocumentModel(name, <any>undefined, { urn })
            case "oci:index/aiDocumentProcessorJob:AiDocumentProcessorJob":
                return new AiDocumentProcessorJob(name, <any>undefined, { urn })
            case "oci:index/aiDocumentProject:AiDocumentProject":
                return new AiDocumentProject(name, <any>undefined, { urn })
            case "oci:index/aiLanguageEndpoint:AiLanguageEndpoint":
                return new AiLanguageEndpoint(name, <any>undefined, { urn })
            case "oci:index/aiLanguageModel:AiLanguageModel":
                return new AiLanguageModel(name, <any>undefined, { urn })
            case "oci:index/aiLanguageProject:AiLanguageProject":
                return new AiLanguageProject(name, <any>undefined, { urn })
            case "oci:index/aiVisionModel:AiVisionModel":
                return new AiVisionModel(name, <any>undefined, { urn })
            case "oci:index/aiVisionProject:AiVisionProject":
                return new AiVisionProject(name, <any>undefined, { urn })
            case "oci:index/analyticsAnalyticsInstance:AnalyticsAnalyticsInstance":
                return new AnalyticsAnalyticsInstance(name, <any>undefined, { urn })
            case "oci:index/analyticsAnalyticsInstancePrivateAccessChannel:AnalyticsAnalyticsInstancePrivateAccessChannel":
                return new AnalyticsAnalyticsInstancePrivateAccessChannel(name, <any>undefined, { urn })
            case "oci:index/analyticsAnalyticsInstanceVanityUrl:AnalyticsAnalyticsInstanceVanityUrl":
                return new AnalyticsAnalyticsInstanceVanityUrl(name, <any>undefined, { urn })
            case "oci:index/announcementsServiceAnnouncementSubscription:AnnouncementsServiceAnnouncementSubscription":
                return new AnnouncementsServiceAnnouncementSubscription(name, <any>undefined, { urn })
            case "oci:index/announcementsServiceAnnouncementSubscriptionsActionsChangeCompartment:AnnouncementsServiceAnnouncementSubscriptionsActionsChangeCompartment":
                return new AnnouncementsServiceAnnouncementSubscriptionsActionsChangeCompartment(name, <any>undefined, { urn })
            case "oci:index/announcementsServiceAnnouncementSubscriptionsFilterGroup:AnnouncementsServiceAnnouncementSubscriptionsFilterGroup":
                return new AnnouncementsServiceAnnouncementSubscriptionsFilterGroup(name, <any>undefined, { urn })
            case "oci:index/apigatewayApi:ApigatewayApi":
                return new ApigatewayApi(name, <any>undefined, { urn })
            case "oci:index/apigatewayCertificate:ApigatewayCertificate":
                return new ApigatewayCertificate(name, <any>undefined, { urn })
            case "oci:index/apigatewayDeployment:ApigatewayDeployment":
                return new ApigatewayDeployment(name, <any>undefined, { urn })
            case "oci:index/apigatewayGateway:ApigatewayGateway":
                return new ApigatewayGateway(name, <any>undefined, { urn })
            case "oci:index/apigatewaySubscriber:ApigatewaySubscriber":
                return new ApigatewaySubscriber(name, <any>undefined, { urn })
            case "oci:index/apigatewayUsagePlan:ApigatewayUsagePlan":
                return new ApigatewayUsagePlan(name, <any>undefined, { urn })
            case "oci:index/apmApmDomain:ApmApmDomain":
                return new ApmApmDomain(name, <any>undefined, { urn })
            case "oci:index/apmConfigConfig:ApmConfigConfig":
                return new ApmConfigConfig(name, <any>undefined, { urn })
            case "oci:index/apmSyntheticsDedicatedVantagePoint:ApmSyntheticsDedicatedVantagePoint":
                return new ApmSyntheticsDedicatedVantagePoint(name, <any>undefined, { urn })
            case "oci:index/apmSyntheticsMonitor:ApmSyntheticsMonitor":
                return new ApmSyntheticsMonitor(name, <any>undefined, { urn })
            case "oci:index/apmSyntheticsOnPremiseVantagePoint:ApmSyntheticsOnPremiseVantagePoint":
                return new ApmSyntheticsOnPremiseVantagePoint(name, <any>undefined, { urn })
            case "oci:index/apmSyntheticsOnPremiseVantagePointWorker:ApmSyntheticsOnPremiseVantagePointWorker":
                return new ApmSyntheticsOnPremiseVantagePointWorker(name, <any>undefined, { urn })
            case "oci:index/apmSyntheticsScript:ApmSyntheticsScript":
                return new ApmSyntheticsScript(name, <any>undefined, { urn })
            case "oci:index/appmgmtControlMonitorPluginManagement:AppmgmtControlMonitorPluginManagement":
                return new AppmgmtControlMonitorPluginManagement(name, <any>undefined, { urn })
            case "oci:index/artifactsContainerConfiguration:ArtifactsContainerConfiguration":
                return new ArtifactsContainerConfiguration(name, <any>undefined, { urn })
            case "oci:index/artifactsContainerImageSignature:ArtifactsContainerImageSignature":
                return new ArtifactsContainerImageSignature(name, <any>undefined, { urn })
            case "oci:index/artifactsContainerRepository:ArtifactsContainerRepository":
                return new ArtifactsContainerRepository(name, <any>undefined, { urn })
            case "oci:index/artifactsGenericArtifact:ArtifactsGenericArtifact":
                return new ArtifactsGenericArtifact(name, <any>undefined, { urn })
            case "oci:index/artifactsRepository:ArtifactsRepository":
                return new ArtifactsRepository(name, <any>undefined, { urn })
            case "oci:index/auditConfiguration:AuditConfiguration":
                return new AuditConfiguration(name, <any>undefined, { urn })
            case "oci:index/autoscalingAutoScalingConfiguration:AutoscalingAutoScalingConfiguration":
                return new AutoscalingAutoScalingConfiguration(name, <any>undefined, { urn })
            case "oci:index/bastionBastion:BastionBastion":
                return new BastionBastion(name, <any>undefined, { urn })
            case "oci:index/bastionSession:BastionSession":
                return new BastionSession(name, <any>undefined, { urn })
            case "oci:index/bdsAutoScalingConfiguration:BdsAutoScalingConfiguration":
                return new BdsAutoScalingConfiguration(name, <any>undefined, { urn })
            case "oci:index/bdsBdsInstance:BdsBdsInstance":
                return new BdsBdsInstance(name, <any>undefined, { urn })
            case "oci:index/bdsBdsInstanceApiKey:BdsBdsInstanceApiKey":
                return new BdsBdsInstanceApiKey(name, <any>undefined, { urn })
            case "oci:index/bdsBdsInstanceMetastoreConfig:BdsBdsInstanceMetastoreConfig":
                return new BdsBdsInstanceMetastoreConfig(name, <any>undefined, { urn })
            case "oci:index/bdsBdsInstanceOperationCertificateManagementsManagement:BdsBdsInstanceOperationCertificateManagementsManagement":
                return new BdsBdsInstanceOperationCertificateManagementsManagement(name, <any>undefined, { urn })
            case "oci:index/bdsBdsInstanceOsPatchAction:BdsBdsInstanceOsPatchAction":
                return new BdsBdsInstanceOsPatchAction(name, <any>undefined, { urn })
            case "oci:index/bdsBdsInstancePatchAction:BdsBdsInstancePatchAction":
                return new BdsBdsInstancePatchAction(name, <any>undefined, { urn })
            case "oci:index/blockchainBlockchainPlatform:BlockchainBlockchainPlatform":
                return new BlockchainBlockchainPlatform(name, <any>undefined, { urn })
            case "oci:index/blockchainOsn:BlockchainOsn":
                return new BlockchainOsn(name, <any>undefined, { urn })
            case "oci:index/blockchainPeer:BlockchainPeer":
                return new BlockchainPeer(name, <any>undefined, { urn })
            case "oci:index/budgetAlertRule:BudgetAlertRule":
                return new BudgetAlertRule(name, <any>undefined, { urn })
            case "oci:index/budgetBudget:BudgetBudget":
                return new BudgetBudget(name, <any>undefined, { urn })
            case "oci:index/capacityManagementOccAvailabilityCatalog:CapacityManagementOccAvailabilityCatalog":
                return new CapacityManagementOccAvailabilityCatalog(name, <any>undefined, { urn })
            case "oci:index/capacityManagementOccCapacityRequest:CapacityManagementOccCapacityRequest":
                return new CapacityManagementOccCapacityRequest(name, <any>undefined, { urn })
            case "oci:index/certificatesManagementCaBundle:CertificatesManagementCaBundle":
                return new CertificatesManagementCaBundle(name, <any>undefined, { urn })
            case "oci:index/certificatesManagementCertificate:CertificatesManagementCertificate":
                return new CertificatesManagementCertificate(name, <any>undefined, { urn })
            case "oci:index/certificatesManagementCertificateAuthority:CertificatesManagementCertificateAuthority":
                return new CertificatesManagementCertificateAuthority(name, <any>undefined, { urn })
            case "oci:index/cloudBridgeAgent:CloudBridgeAgent":
                return new CloudBridgeAgent(name, <any>undefined, { urn })
            case "oci:index/cloudBridgeAgentDependency:CloudBridgeAgentDependency":
                return new CloudBridgeAgentDependency(name, <any>undefined, { urn })
            case "oci:index/cloudBridgeAgentPlugin:CloudBridgeAgentPlugin":
                return new CloudBridgeAgentPlugin(name, <any>undefined, { urn })
            case "oci:index/cloudBridgeAsset:CloudBridgeAsset":
                return new CloudBridgeAsset(name, <any>undefined, { urn })
            case "oci:index/cloudBridgeAssetSource:CloudBridgeAssetSource":
                return new CloudBridgeAssetSource(name, <any>undefined, { urn })
            case "oci:index/cloudBridgeDiscoverySchedule:CloudBridgeDiscoverySchedule":
                return new CloudBridgeDiscoverySchedule(name, <any>undefined, { urn })
            case "oci:index/cloudBridgeEnvironment:CloudBridgeEnvironment":
                return new CloudBridgeEnvironment(name, <any>undefined, { urn })
            case "oci:index/cloudBridgeInventory:CloudBridgeInventory":
                return new CloudBridgeInventory(name, <any>undefined, { urn })
            case "oci:index/cloudGuardAdhocQuery:CloudGuardAdhocQuery":
                return new CloudGuardAdhocQuery(name, <any>undefined, { urn })
            case "oci:index/cloudGuardCloudGuardConfiguration:CloudGuardCloudGuardConfiguration":
                return new CloudGuardCloudGuardConfiguration(name, <any>undefined, { urn })
            case "oci:index/cloudGuardDataMaskRule:CloudGuardDataMaskRule":
                return new CloudGuardDataMaskRule(name, <any>undefined, { urn })
            case "oci:index/cloudGuardDataSource:CloudGuardDataSource":
                return new CloudGuardDataSource(name, <any>undefined, { urn })
            case "oci:index/cloudGuardDetectorRecipe:CloudGuardDetectorRecipe":
                return new CloudGuardDetectorRecipe(name, <any>undefined, { urn })
            case "oci:index/cloudGuardManagedList:CloudGuardManagedList":
                return new CloudGuardManagedList(name, <any>undefined, { urn })
            case "oci:index/cloudGuardResponderRecipe:CloudGuardResponderRecipe":
                return new CloudGuardResponderRecipe(name, <any>undefined, { urn })
            case "oci:index/cloudGuardSavedQuery:CloudGuardSavedQuery":
                return new CloudGuardSavedQuery(name, <any>undefined, { urn })
            case "oci:index/cloudGuardSecurityRecipe:CloudGuardSecurityRecipe":
                return new CloudGuardSecurityRecipe(name, <any>undefined, { urn })
            case "oci:index/cloudGuardSecurityZone:CloudGuardSecurityZone":
                return new CloudGuardSecurityZone(name, <any>undefined, { urn })
            case "oci:index/cloudGuardTarget:CloudGuardTarget":
                return new CloudGuardTarget(name, <any>undefined, { urn })
            case "oci:index/cloudGuardWlpAgent:CloudGuardWlpAgent":
                return new CloudGuardWlpAgent(name, <any>undefined, { urn })
            case "oci:index/cloudMigrationsMigration:CloudMigrationsMigration":
                return new CloudMigrationsMigration(name, <any>undefined, { urn })
            case "oci:index/cloudMigrationsMigrationAsset:CloudMigrationsMigrationAsset":
                return new CloudMigrationsMigrationAsset(name, <any>undefined, { urn })
            case "oci:index/cloudMigrationsMigrationPlan:CloudMigrationsMigrationPlan":
                return new CloudMigrationsMigrationPlan(name, <any>undefined, { urn })
            case "oci:index/cloudMigrationsReplicationSchedule:CloudMigrationsReplicationSchedule":
                return new CloudMigrationsReplicationSchedule(name, <any>undefined, { urn })
            case "oci:index/cloudMigrationsTargetAsset:CloudMigrationsTargetAsset":
                return new CloudMigrationsTargetAsset(name, <any>undefined, { urn })
            case "oci:index/clusterPlacementGroupsClusterPlacementGroup:ClusterPlacementGroupsClusterPlacementGroup":
                return new ClusterPlacementGroupsClusterPlacementGroup(name, <any>undefined, { urn })
            case "oci:index/computeCloudAtCustomerCccInfrastructure:ComputeCloudAtCustomerCccInfrastructure":
                return new ComputeCloudAtCustomerCccInfrastructure(name, <any>undefined, { urn })
            case "oci:index/computeCloudAtCustomerCccUpgradeSchedule:ComputeCloudAtCustomerCccUpgradeSchedule":
                return new ComputeCloudAtCustomerCccUpgradeSchedule(name, <any>undefined, { urn })
            case "oci:index/containerInstancesContainerInstance:ContainerInstancesContainerInstance":
                return new ContainerInstancesContainerInstance(name, <any>undefined, { urn })
            case "oci:index/containerengineAddon:ContainerengineAddon":
                return new ContainerengineAddon(name, <any>undefined, { urn })
            case "oci:index/containerengineCluster:ContainerengineCluster":
                return new ContainerengineCluster(name, <any>undefined, { urn })
            case "oci:index/containerengineClusterCompleteCredentialRotationManagement:ContainerengineClusterCompleteCredentialRotationManagement":
                return new ContainerengineClusterCompleteCredentialRotationManagement(name, <any>undefined, { urn })
            case "oci:index/containerengineClusterStartCredentialRotationManagement:ContainerengineClusterStartCredentialRotationManagement":
                return new ContainerengineClusterStartCredentialRotationManagement(name, <any>undefined, { urn })
            case "oci:index/containerengineClusterWorkloadMapping:ContainerengineClusterWorkloadMapping":
                return new ContainerengineClusterWorkloadMapping(name, <any>undefined, { urn })
            case "oci:index/containerengineNodePool:ContainerengineNodePool":
                return new ContainerengineNodePool(name, <any>undefined, { urn })
            case "oci:index/containerengineVirtualNodePool:ContainerengineVirtualNodePool":
                return new ContainerengineVirtualNodePool(name, <any>undefined, { urn })
            case "oci:index/coreAppCatalogListingResourceVersionAgreement:CoreAppCatalogListingResourceVersionAgreement":
                return new CoreAppCatalogListingResourceVersionAgreement(name, <any>undefined, { urn })
            case "oci:index/coreAppCatalogSubscription:CoreAppCatalogSubscription":
                return new CoreAppCatalogSubscription(name, <any>undefined, { urn })
            case "oci:index/coreBootVolume:CoreBootVolume":
                return new CoreBootVolume(name, <any>undefined, { urn })
            case "oci:index/coreBootVolumeBackup:CoreBootVolumeBackup":
                return new CoreBootVolumeBackup(name, <any>undefined, { urn })
            case "oci:index/coreCaptureFilter:CoreCaptureFilter":
                return new CoreCaptureFilter(name, <any>undefined, { urn })
            case "oci:index/coreClusterNetwork:CoreClusterNetwork":
                return new CoreClusterNetwork(name, <any>undefined, { urn })
            case "oci:index/coreComputeCapacityReport:CoreComputeCapacityReport":
                return new CoreComputeCapacityReport(name, <any>undefined, { urn })
            case "oci:index/coreComputeCapacityReservation:CoreComputeCapacityReservation":
                return new CoreComputeCapacityReservation(name, <any>undefined, { urn })
            case "oci:index/coreComputeCapacityTopology:CoreComputeCapacityTopology":
                return new CoreComputeCapacityTopology(name, <any>undefined, { urn })
            case "oci:index/coreComputeCluster:CoreComputeCluster":
                return new CoreComputeCluster(name, <any>undefined, { urn })
            case "oci:index/coreComputeImageCapabilitySchema:CoreComputeImageCapabilitySchema":
                return new CoreComputeImageCapabilitySchema(name, <any>undefined, { urn })
            case "oci:index/coreConsoleHistory:CoreConsoleHistory":
                return new CoreConsoleHistory(name, <any>undefined, { urn })
            case "oci:index/coreCpe:CoreCpe":
                return new CoreCpe(name, <any>undefined, { urn })
            case "oci:index/coreCrossConnect:CoreCrossConnect":
                return new CoreCrossConnect(name, <any>undefined, { urn })
            case "oci:index/coreCrossConnectGroup:CoreCrossConnectGroup":
                return new CoreCrossConnectGroup(name, <any>undefined, { urn })
            case "oci:index/coreDedicatedVmHost:CoreDedicatedVmHost":
                return new CoreDedicatedVmHost(name, <any>undefined, { urn })
            case "oci:index/coreDefaultDhcpOptions:CoreDefaultDhcpOptions":
                return new CoreDefaultDhcpOptions(name, <any>undefined, { urn })
            case "oci:index/coreDefaultRouteTable:CoreDefaultRouteTable":
                return new CoreDefaultRouteTable(name, <any>undefined, { urn })
            case "oci:index/coreDefaultSecurityList:CoreDefaultSecurityList":
                return new CoreDefaultSecurityList(name, <any>undefined, { urn })
            case "oci:index/coreDhcpOptions:CoreDhcpOptions":
                return new CoreDhcpOptions(name, <any>undefined, { urn })
            case "oci:index/coreDrg:CoreDrg":
                return new CoreDrg(name, <any>undefined, { urn })
            case "oci:index/coreDrgAttachment:CoreDrgAttachment":
                return new CoreDrgAttachment(name, <any>undefined, { urn })
            case "oci:index/coreDrgAttachmentManagement:CoreDrgAttachmentManagement":
                return new CoreDrgAttachmentManagement(name, <any>undefined, { urn })
            case "oci:index/coreDrgAttachmentsList:CoreDrgAttachmentsList":
                return new CoreDrgAttachmentsList(name, <any>undefined, { urn })
            case "oci:index/coreDrgRouteDistribution:CoreDrgRouteDistribution":
                return new CoreDrgRouteDistribution(name, <any>undefined, { urn })
            case "oci:index/coreDrgRouteDistributionStatement:CoreDrgRouteDistributionStatement":
                return new CoreDrgRouteDistributionStatement(name, <any>undefined, { urn })
            case "oci:index/coreDrgRouteTable:CoreDrgRouteTable":
                return new CoreDrgRouteTable(name, <any>undefined, { urn })
            case "oci:index/coreDrgRouteTableRouteRule:CoreDrgRouteTableRouteRule":
                return new CoreDrgRouteTableRouteRule(name, <any>undefined, { urn })
            case "oci:index/coreImage:CoreImage":
                return new CoreImage(name, <any>undefined, { urn })
            case "oci:index/coreInstance:CoreInstance":
                return new CoreInstance(name, <any>undefined, { urn })
            case "oci:index/coreInstanceConfiguration:CoreInstanceConfiguration":
                return new CoreInstanceConfiguration(name, <any>undefined, { urn })
            case "oci:index/coreInstanceConsoleConnection:CoreInstanceConsoleConnection":
                return new CoreInstanceConsoleConnection(name, <any>undefined, { urn })
            case "oci:index/coreInstanceMaintenanceEvent:CoreInstanceMaintenanceEvent":
                return new CoreInstanceMaintenanceEvent(name, <any>undefined, { urn })
            case "oci:index/coreInstancePool:CoreInstancePool":
                return new CoreInstancePool(name, <any>undefined, { urn })
            case "oci:index/coreInstancePoolInstance:CoreInstancePoolInstance":
                return new CoreInstancePoolInstance(name, <any>undefined, { urn })
            case "oci:index/coreInternetGateway:CoreInternetGateway":
                return new CoreInternetGateway(name, <any>undefined, { urn })
            case "oci:index/coreIpsec:CoreIpsec":
                return new CoreIpsec(name, <any>undefined, { urn })
            case "oci:index/coreIpsecConnectionTunnelManagement:CoreIpsecConnectionTunnelManagement":
                return new CoreIpsecConnectionTunnelManagement(name, <any>undefined, { urn })
            case "oci:index/coreIpv6:CoreIpv6":
                return new CoreIpv6(name, <any>undefined, { urn })
            case "oci:index/coreListingResourceVersionAgreement:CoreListingResourceVersionAgreement":
                return new CoreListingResourceVersionAgreement(name, <any>undefined, { urn })
            case "oci:index/coreLocalPeeringGateway:CoreLocalPeeringGateway":
                return new CoreLocalPeeringGateway(name, <any>undefined, { urn })
            case "oci:index/coreNatGateway:CoreNatGateway":
                return new CoreNatGateway(name, <any>undefined, { urn })
            case "oci:index/coreNetworkSecurityGroup:CoreNetworkSecurityGroup":
                return new CoreNetworkSecurityGroup(name, <any>undefined, { urn })
            case "oci:index/coreNetworkSecurityGroupSecurityRule:CoreNetworkSecurityGroupSecurityRule":
                return new CoreNetworkSecurityGroupSecurityRule(name, <any>undefined, { urn })
            case "oci:index/corePrivateIp:CorePrivateIp":
                return new CorePrivateIp(name, <any>undefined, { urn })
            case "oci:index/corePublicIp:CorePublicIp":
                return new CorePublicIp(name, <any>undefined, { urn })
            case "oci:index/corePublicIpPool:CorePublicIpPool":
                return new CorePublicIpPool(name, <any>undefined, { urn })
            case "oci:index/corePublicIpPoolCapacity:CorePublicIpPoolCapacity":
                return new CorePublicIpPoolCapacity(name, <any>undefined, { urn })
            case "oci:index/coreRemotePeeringConnection:CoreRemotePeeringConnection":
                return new CoreRemotePeeringConnection(name, <any>undefined, { urn })
            case "oci:index/coreRouteTable:CoreRouteTable":
                return new CoreRouteTable(name, <any>undefined, { urn })
            case "oci:index/coreRouteTableAttachment:CoreRouteTableAttachment":
                return new CoreRouteTableAttachment(name, <any>undefined, { urn })
            case "oci:index/coreSecurityList:CoreSecurityList":
                return new CoreSecurityList(name, <any>undefined, { urn })
            case "oci:index/coreServiceGateway:CoreServiceGateway":
                return new CoreServiceGateway(name, <any>undefined, { urn })
            case "oci:index/coreShapeManagement:CoreShapeManagement":
                return new CoreShapeManagement(name, <any>undefined, { urn })
            case "oci:index/coreSubnet:CoreSubnet":
                return new CoreSubnet(name, <any>undefined, { urn })
            case "oci:index/coreVcn:CoreVcn":
                return new CoreVcn(name, <any>undefined, { urn })
            case "oci:index/coreVirtualCircuit:CoreVirtualCircuit":
                return new CoreVirtualCircuit(name, <any>undefined, { urn })
            case "oci:index/coreVirtualNetwork:CoreVirtualNetwork":
                return new CoreVirtualNetwork(name, <any>undefined, { urn })
            case "oci:index/coreVlan:CoreVlan":
                return new CoreVlan(name, <any>undefined, { urn })
            case "oci:index/coreVnicAttachment:CoreVnicAttachment":
                return new CoreVnicAttachment(name, <any>undefined, { urn })
            case "oci:index/coreVolume:CoreVolume":
                return new CoreVolume(name, <any>undefined, { urn })
            case "oci:index/coreVolumeAttachment:CoreVolumeAttachment":
                return new CoreVolumeAttachment(name, <any>undefined, { urn })
            case "oci:index/coreVolumeBackup:CoreVolumeBackup":
                return new CoreVolumeBackup(name, <any>undefined, { urn })
            case "oci:index/coreVolumeBackupPolicy:CoreVolumeBackupPolicy":
                return new CoreVolumeBackupPolicy(name, <any>undefined, { urn })
            case "oci:index/coreVolumeBackupPolicyAssignment:CoreVolumeBackupPolicyAssignment":
                return new CoreVolumeBackupPolicyAssignment(name, <any>undefined, { urn })
            case "oci:index/coreVolumeGroup:CoreVolumeGroup":
                return new CoreVolumeGroup(name, <any>undefined, { urn })
            case "oci:index/coreVolumeGroupBackup:CoreVolumeGroupBackup":
                return new CoreVolumeGroupBackup(name, <any>undefined, { urn })
            case "oci:index/coreVtap:CoreVtap":
                return new CoreVtap(name, <any>undefined, { urn })
            case "oci:index/dataLabelingServiceDataset:DataLabelingServiceDataset":
                return new DataLabelingServiceDataset(name, <any>undefined, { urn })
            case "oci:index/dataSafeAddSdmColumns:DataSafeAddSdmColumns":
                return new DataSafeAddSdmColumns(name, <any>undefined, { urn })
            case "oci:index/dataSafeAlert:DataSafeAlert":
                return new DataSafeAlert(name, <any>undefined, { urn })
            case "oci:index/dataSafeAlertPolicy:DataSafeAlertPolicy":
                return new DataSafeAlertPolicy(name, <any>undefined, { urn })
            case "oci:index/dataSafeAlertPolicyRule:DataSafeAlertPolicyRule":
                return new DataSafeAlertPolicyRule(name, <any>undefined, { urn })
            case "oci:index/dataSafeAuditArchiveRetrieval:DataSafeAuditArchiveRetrieval":
                return new DataSafeAuditArchiveRetrieval(name, <any>undefined, { urn })
            case "oci:index/dataSafeAuditPolicy:DataSafeAuditPolicy":
                return new DataSafeAuditPolicy(name, <any>undefined, { urn })
            case "oci:index/dataSafeAuditPolicyManagement:DataSafeAuditPolicyManagement":
                return new DataSafeAuditPolicyManagement(name, <any>undefined, { urn })
            case "oci:index/dataSafeAuditProfile:DataSafeAuditProfile":
                return new DataSafeAuditProfile(name, <any>undefined, { urn })
            case "oci:index/dataSafeAuditProfileManagement:DataSafeAuditProfileManagement":
                return new DataSafeAuditProfileManagement(name, <any>undefined, { urn })
            case "oci:index/dataSafeAuditTrail:DataSafeAuditTrail":
                return new DataSafeAuditTrail(name, <any>undefined, { urn })
            case "oci:index/dataSafeAuditTrailManagement:DataSafeAuditTrailManagement":
                return new DataSafeAuditTrailManagement(name, <any>undefined, { urn })
            case "oci:index/dataSafeCalculateAuditVolumeAvailable:DataSafeCalculateAuditVolumeAvailable":
                return new DataSafeCalculateAuditVolumeAvailable(name, <any>undefined, { urn })
            case "oci:index/dataSafeCalculateAuditVolumeCollected:DataSafeCalculateAuditVolumeCollected":
                return new DataSafeCalculateAuditVolumeCollected(name, <any>undefined, { urn })
            case "oci:index/dataSafeCompareSecurityAssessment:DataSafeCompareSecurityAssessment":
                return new DataSafeCompareSecurityAssessment(name, <any>undefined, { urn })
            case "oci:index/dataSafeCompareUserAssessment:DataSafeCompareUserAssessment":
                return new DataSafeCompareUserAssessment(name, <any>undefined, { urn })
            case "oci:index/dataSafeDataSafeConfiguration:DataSafeDataSafeConfiguration":
                return new DataSafeDataSafeConfiguration(name, <any>undefined, { urn })
            case "oci:index/dataSafeDataSafePrivateEndpoint:DataSafeDataSafePrivateEndpoint":
                return new DataSafeDataSafePrivateEndpoint(name, <any>undefined, { urn })
            case "oci:index/dataSafeDatabaseSecurityConfig:DataSafeDatabaseSecurityConfig":
                return new DataSafeDatabaseSecurityConfig(name, <any>undefined, { urn })
            case "oci:index/dataSafeDatabaseSecurityConfigManagement:DataSafeDatabaseSecurityConfigManagement":
                return new DataSafeDatabaseSecurityConfigManagement(name, <any>undefined, { urn })
            case "oci:index/dataSafeDiscoveryJob:DataSafeDiscoveryJob":
                return new DataSafeDiscoveryJob(name, <any>undefined, { urn })
            case "oci:index/dataSafeDiscoveryJobsResult:DataSafeDiscoveryJobsResult":
                return new DataSafeDiscoveryJobsResult(name, <any>undefined, { urn })
            case "oci:index/dataSafeLibraryMaskingFormat:DataSafeLibraryMaskingFormat":
                return new DataSafeLibraryMaskingFormat(name, <any>undefined, { urn })
            case "oci:index/dataSafeMaskData:DataSafeMaskData":
                return new DataSafeMaskData(name, <any>undefined, { urn })
            case "oci:index/dataSafeMaskingPoliciesApplyDifferenceToMaskingColumns:DataSafeMaskingPoliciesApplyDifferenceToMaskingColumns":
                return new DataSafeMaskingPoliciesApplyDifferenceToMaskingColumns(name, <any>undefined, { urn })
            case "oci:index/dataSafeMaskingPoliciesMaskingColumn:DataSafeMaskingPoliciesMaskingColumn":
                return new DataSafeMaskingPoliciesMaskingColumn(name, <any>undefined, { urn })
            case "oci:index/dataSafeMaskingPolicy:DataSafeMaskingPolicy":
                return new DataSafeMaskingPolicy(name, <any>undefined, { urn })
            case "oci:index/dataSafeMaskingPolicyHealthReportManagement:DataSafeMaskingPolicyHealthReportManagement":
                return new DataSafeMaskingPolicyHealthReportManagement(name, <any>undefined, { urn })
            case "oci:index/dataSafeMaskingReportManagement:DataSafeMaskingReportManagement":
                return new DataSafeMaskingReportManagement(name, <any>undefined, { urn })
            case "oci:index/dataSafeOnPremConnector:DataSafeOnPremConnector":
                return new DataSafeOnPremConnector(name, <any>undefined, { urn })
            case "oci:index/dataSafeReport:DataSafeReport":
                return new DataSafeReport(name, <any>undefined, { urn })
            case "oci:index/dataSafeReportDefinition:DataSafeReportDefinition":
                return new DataSafeReportDefinition(name, <any>undefined, { urn })
            case "oci:index/dataSafeSdmMaskingPolicyDifference:DataSafeSdmMaskingPolicyDifference":
                return new DataSafeSdmMaskingPolicyDifference(name, <any>undefined, { urn })
            case "oci:index/dataSafeSecurityAssessment:DataSafeSecurityAssessment":
                return new DataSafeSecurityAssessment(name, <any>undefined, { urn })
            case "oci:index/dataSafeSecurityPolicy:DataSafeSecurityPolicy":
                return new DataSafeSecurityPolicy(name, <any>undefined, { urn })
            case "oci:index/dataSafeSecurityPolicyDeployment:DataSafeSecurityPolicyDeployment":
                return new DataSafeSecurityPolicyDeployment(name, <any>undefined, { urn })
            case "oci:index/dataSafeSecurityPolicyDeploymentManagement:DataSafeSecurityPolicyDeploymentManagement":
                return new DataSafeSecurityPolicyDeploymentManagement(name, <any>undefined, { urn })
            case "oci:index/dataSafeSecurityPolicyManagement:DataSafeSecurityPolicyManagement":
                return new DataSafeSecurityPolicyManagement(name, <any>undefined, { urn })
            case "oci:index/dataSafeSensitiveDataModel:DataSafeSensitiveDataModel":
                return new DataSafeSensitiveDataModel(name, <any>undefined, { urn })
            case "oci:index/dataSafeSensitiveDataModelsApplyDiscoveryJobResults:DataSafeSensitiveDataModelsApplyDiscoveryJobResults":
                return new DataSafeSensitiveDataModelsApplyDiscoveryJobResults(name, <any>undefined, { urn })
            case "oci:index/dataSafeSensitiveDataModelsSensitiveColumn:DataSafeSensitiveDataModelsSensitiveColumn":
                return new DataSafeSensitiveDataModelsSensitiveColumn(name, <any>undefined, { urn })
            case "oci:index/dataSafeSensitiveType:DataSafeSensitiveType":
                return new DataSafeSensitiveType(name, <any>undefined, { urn })
            case "oci:index/dataSafeSetSecurityAssessmentBaseline:DataSafeSetSecurityAssessmentBaseline":
                return new DataSafeSetSecurityAssessmentBaseline(name, <any>undefined, { urn })
            case "oci:index/dataSafeSetSecurityAssessmentBaselineManagement:DataSafeSetSecurityAssessmentBaselineManagement":
                return new DataSafeSetSecurityAssessmentBaselineManagement(name, <any>undefined, { urn })
            case "oci:index/dataSafeSetUserAssessmentBaseline:DataSafeSetUserAssessmentBaseline":
                return new DataSafeSetUserAssessmentBaseline(name, <any>undefined, { urn })
            case "oci:index/dataSafeSetUserAssessmentBaselineManagement:DataSafeSetUserAssessmentBaselineManagement":
                return new DataSafeSetUserAssessmentBaselineManagement(name, <any>undefined, { urn })
            case "oci:index/dataSafeSqlCollection:DataSafeSqlCollection":
                return new DataSafeSqlCollection(name, <any>undefined, { urn })
            case "oci:index/dataSafeSqlFirewallPolicy:DataSafeSqlFirewallPolicy":
                return new DataSafeSqlFirewallPolicy(name, <any>undefined, { urn })
            case "oci:index/dataSafeSqlFirewallPolicyManagement:DataSafeSqlFirewallPolicyManagement":
                return new DataSafeSqlFirewallPolicyManagement(name, <any>undefined, { urn })
            case "oci:index/dataSafeTargetAlertPolicyAssociation:DataSafeTargetAlertPolicyAssociation":
                return new DataSafeTargetAlertPolicyAssociation(name, <any>undefined, { urn })
            case "oci:index/dataSafeTargetDatabase:DataSafeTargetDatabase":
                return new DataSafeTargetDatabase(name, <any>undefined, { urn })
            case "oci:index/dataSafeTargetDatabasePeerTargetDatabase:DataSafeTargetDatabasePeerTargetDatabase":
                return new DataSafeTargetDatabasePeerTargetDatabase(name, <any>undefined, { urn })
            case "oci:index/dataSafeUnsetSecurityAssessmentBaseline:DataSafeUnsetSecurityAssessmentBaseline":
                return new DataSafeUnsetSecurityAssessmentBaseline(name, <any>undefined, { urn })
            case "oci:index/dataSafeUnsetSecurityAssessmentBaselineManagement:DataSafeUnsetSecurityAssessmentBaselineManagement":
                return new DataSafeUnsetSecurityAssessmentBaselineManagement(name, <any>undefined, { urn })
            case "oci:index/dataSafeUnsetUserAssessmentBaseline:DataSafeUnsetUserAssessmentBaseline":
                return new DataSafeUnsetUserAssessmentBaseline(name, <any>undefined, { urn })
            case "oci:index/dataSafeUnsetUserAssessmentBaselineManagement:DataSafeUnsetUserAssessmentBaselineManagement":
                return new DataSafeUnsetUserAssessmentBaselineManagement(name, <any>undefined, { urn })
            case "oci:index/dataSafeUserAssessment:DataSafeUserAssessment":
                return new DataSafeUserAssessment(name, <any>undefined, { urn })
            case "oci:index/databaseApplicationVip:DatabaseApplicationVip":
                return new DatabaseApplicationVip(name, <any>undefined, { urn })
            case "oci:index/databaseAutonomousContainerDatabase:DatabaseAutonomousContainerDatabase":
                return new DatabaseAutonomousContainerDatabase(name, <any>undefined, { urn })
            case "oci:index/databaseAutonomousContainerDatabaseDataguardAssociation:DatabaseAutonomousContainerDatabaseDataguardAssociation":
                return new DatabaseAutonomousContainerDatabaseDataguardAssociation(name, <any>undefined, { urn })
            case "oci:index/databaseAutonomousContainerDatabaseDataguardAssociationOperation:DatabaseAutonomousContainerDatabaseDataguardAssociationOperation":
                return new DatabaseAutonomousContainerDatabaseDataguardAssociationOperation(name, <any>undefined, { urn })
            case "oci:index/databaseAutonomousContainerDatabaseDataguardRoleChange:DatabaseAutonomousContainerDatabaseDataguardRoleChange":
                return new DatabaseAutonomousContainerDatabaseDataguardRoleChange(name, <any>undefined, { urn })
            case "oci:index/databaseAutonomousDatabase:DatabaseAutonomousDatabase":
                return new DatabaseAutonomousDatabase(name, <any>undefined, { urn })
            case "oci:index/databaseAutonomousDatabaseBackup:DatabaseAutonomousDatabaseBackup":
                return new DatabaseAutonomousDatabaseBackup(name, <any>undefined, { urn })
            case "oci:index/databaseAutonomousDatabaseInstanceWalletManagement:DatabaseAutonomousDatabaseInstanceWalletManagement":
                return new DatabaseAutonomousDatabaseInstanceWalletManagement(name, <any>undefined, { urn })
            case "oci:index/databaseAutonomousDatabaseRegionalWalletManagement:DatabaseAutonomousDatabaseRegionalWalletManagement":
                return new DatabaseAutonomousDatabaseRegionalWalletManagement(name, <any>undefined, { urn })
            case "oci:index/databaseAutonomousDatabaseSaasAdminUser:DatabaseAutonomousDatabaseSaasAdminUser":
                return new DatabaseAutonomousDatabaseSaasAdminUser(name, <any>undefined, { urn })
            case "oci:index/databaseAutonomousDatabaseSoftwareImage:DatabaseAutonomousDatabaseSoftwareImage":
                return new DatabaseAutonomousDatabaseSoftwareImage(name, <any>undefined, { urn })
            case "oci:index/databaseAutonomousDatabaseWallet:DatabaseAutonomousDatabaseWallet":
                return new DatabaseAutonomousDatabaseWallet(name, <any>undefined, { urn })
            case "oci:index/databaseAutonomousExadataInfrastructure:DatabaseAutonomousExadataInfrastructure":
                return new DatabaseAutonomousExadataInfrastructure(name, <any>undefined, { urn })
            case "oci:index/databaseAutonomousVmCluster:DatabaseAutonomousVmCluster":
                return new DatabaseAutonomousVmCluster(name, <any>undefined, { urn })
            case "oci:index/databaseAutonomousVmClusterOrdsCertificateManagement:DatabaseAutonomousVmClusterOrdsCertificateManagement":
                return new DatabaseAutonomousVmClusterOrdsCertificateManagement(name, <any>undefined, { urn })
            case "oci:index/databaseAutonomousVmClusterSslCertificateManagement:DatabaseAutonomousVmClusterSslCertificateManagement":
                return new DatabaseAutonomousVmClusterSslCertificateManagement(name, <any>undefined, { urn })
            case "oci:index/databaseBackup:DatabaseBackup":
                return new DatabaseBackup(name, <any>undefined, { urn })
            case "oci:index/databaseBackupCancelManagement:DatabaseBackupCancelManagement":
                return new DatabaseBackupCancelManagement(name, <any>undefined, { urn })
            case "oci:index/databaseBackupDestination:DatabaseBackupDestination":
                return new DatabaseBackupDestination(name, <any>undefined, { urn })
            case "oci:index/databaseCloudAutonomousVmCluster:DatabaseCloudAutonomousVmCluster":
                return new DatabaseCloudAutonomousVmCluster(name, <any>undefined, { urn })
            case "oci:index/databaseCloudDatabaseManagement:DatabaseCloudDatabaseManagement":
                return new DatabaseCloudDatabaseManagement(name, <any>undefined, { urn })
            case "oci:index/databaseCloudExadataInfrastructure:DatabaseCloudExadataInfrastructure":
                return new DatabaseCloudExadataInfrastructure(name, <any>undefined, { urn })
            case "oci:index/databaseCloudVmCluster:DatabaseCloudVmCluster":
                return new DatabaseCloudVmCluster(name, <any>undefined, { urn })
            case "oci:index/databaseCloudVmClusterIormConfig:DatabaseCloudVmClusterIormConfig":
                return new DatabaseCloudVmClusterIormConfig(name, <any>undefined, { urn })
            case "oci:index/databaseDataGuardAssociation:DatabaseDataGuardAssociation":
                return new DatabaseDataGuardAssociation(name, <any>undefined, { urn })
            case "oci:index/databaseDatabase:DatabaseDatabase":
                return new DatabaseDatabase(name, <any>undefined, { urn })
            case "oci:index/databaseDatabaseSoftwareImage:DatabaseDatabaseSoftwareImage":
                return new DatabaseDatabaseSoftwareImage(name, <any>undefined, { urn })
            case "oci:index/databaseDatabaseUpgrade:DatabaseDatabaseUpgrade":
                return new DatabaseDatabaseUpgrade(name, <any>undefined, { urn })
            case "oci:index/databaseDbHome:DatabaseDbHome":
                return new DatabaseDbHome(name, <any>undefined, { urn })
            case "oci:index/databaseDbNode:DatabaseDbNode":
                return new DatabaseDbNode(name, <any>undefined, { urn })
            case "oci:index/databaseDbNodeConsoleConnection:DatabaseDbNodeConsoleConnection":
                return new DatabaseDbNodeConsoleConnection(name, <any>undefined, { urn })
            case "oci:index/databaseDbNodeConsoleHistory:DatabaseDbNodeConsoleHistory":
                return new DatabaseDbNodeConsoleHistory(name, <any>undefined, { urn })
            case "oci:index/databaseDbSystem:DatabaseDbSystem":
                return new DatabaseDbSystem(name, <any>undefined, { urn })
            case "oci:index/databaseDbSystemsUpgrade:DatabaseDbSystemsUpgrade":
                return new DatabaseDbSystemsUpgrade(name, <any>undefined, { urn })
            case "oci:index/databaseExadataInfrastructure:DatabaseExadataInfrastructure":
                return new DatabaseExadataInfrastructure(name, <any>undefined, { urn })
            case "oci:index/databaseExadataInfrastructureCompute:DatabaseExadataInfrastructureCompute":
                return new DatabaseExadataInfrastructureCompute(name, <any>undefined, { urn })
            case "oci:index/databaseExadataInfrastructureStorage:DatabaseExadataInfrastructureStorage":
                return new DatabaseExadataInfrastructureStorage(name, <any>undefined, { urn })
            case "oci:index/databaseExadataIormConfig:DatabaseExadataIormConfig":
                return new DatabaseExadataIormConfig(name, <any>undefined, { urn })
            case "oci:index/databaseExadbVmCluster:DatabaseExadbVmCluster":
                return new DatabaseExadbVmCluster(name, <any>undefined, { urn })
            case "oci:index/databaseExascaleDbStorageVault:DatabaseExascaleDbStorageVault":
                return new DatabaseExascaleDbStorageVault(name, <any>undefined, { urn })
            case "oci:index/databaseExternalContainerDatabase:DatabaseExternalContainerDatabase":
                return new DatabaseExternalContainerDatabase(name, <any>undefined, { urn })
            case "oci:index/databaseExternalContainerDatabaseManagement:DatabaseExternalContainerDatabaseManagement":
                return new DatabaseExternalContainerDatabaseManagement(name, <any>undefined, { urn })
            case "oci:index/databaseExternalDatabaseConnector:DatabaseExternalDatabaseConnector":
                return new DatabaseExternalDatabaseConnector(name, <any>undefined, { urn })
            case "oci:index/databaseExternalNonContainerDatabase:DatabaseExternalNonContainerDatabase":
                return new DatabaseExternalNonContainerDatabase(name, <any>undefined, { urn })
            case "oci:index/databaseExternalNonContainerDatabaseManagement:DatabaseExternalNonContainerDatabaseManagement":
                return new DatabaseExternalNonContainerDatabaseManagement(name, <any>undefined, { urn })
            case "oci:index/databaseExternalNonContainerDatabaseOperationsInsightsManagement:DatabaseExternalNonContainerDatabaseOperationsInsightsManagement":
                return new DatabaseExternalNonContainerDatabaseOperationsInsightsManagement(name, <any>undefined, { urn })
            case "oci:index/databaseExternalPluggableDatabase:DatabaseExternalPluggableDatabase":
                return new DatabaseExternalPluggableDatabase(name, <any>undefined, { urn })
            case "oci:index/databaseExternalPluggableDatabaseManagement:DatabaseExternalPluggableDatabaseManagement":
                return new DatabaseExternalPluggableDatabaseManagement(name, <any>undefined, { urn })
            case "oci:index/databaseExternalPluggableDatabaseOperationsInsightsManagement:DatabaseExternalPluggableDatabaseOperationsInsightsManagement":
                return new DatabaseExternalPluggableDatabaseOperationsInsightsManagement(name, <any>undefined, { urn })
            case "oci:index/databaseExternalcontainerdatabasesStackMonitoring:DatabaseExternalcontainerdatabasesStackMonitoring":
                return new DatabaseExternalcontainerdatabasesStackMonitoring(name, <any>undefined, { urn })
            case "oci:index/databaseExternalnoncontainerdatabasesStackMonitoring:DatabaseExternalnoncontainerdatabasesStackMonitoring":
                return new DatabaseExternalnoncontainerdatabasesStackMonitoring(name, <any>undefined, { urn })
            case "oci:index/databaseExternalpluggabledatabasesStackMonitoring:DatabaseExternalpluggabledatabasesStackMonitoring":
                return new DatabaseExternalpluggabledatabasesStackMonitoring(name, <any>undefined, { urn })
            case "oci:index/databaseKeyStore:DatabaseKeyStore":
                return new DatabaseKeyStore(name, <any>undefined, { urn })
            case "oci:index/databaseMaintenanceRun:DatabaseMaintenanceRun":
                return new DatabaseMaintenanceRun(name, <any>undefined, { urn })
            case "oci:index/databaseManagementAutonomousDatabaseAutonomousDatabaseDbmFeaturesManagement:DatabaseManagementAutonomousDatabaseAutonomousDatabaseDbmFeaturesManagement":
                return new DatabaseManagementAutonomousDatabaseAutonomousDatabaseDbmFeaturesManagement(name, <any>undefined, { urn })
            case "oci:index/databaseManagementDatabaseDbmFeaturesManagement:DatabaseManagementDatabaseDbmFeaturesManagement":
                return new DatabaseManagementDatabaseDbmFeaturesManagement(name, <any>undefined, { urn })
            case "oci:index/databaseManagementDbManagementPrivateEndpoint:DatabaseManagementDbManagementPrivateEndpoint":
                return new DatabaseManagementDbManagementPrivateEndpoint(name, <any>undefined, { urn })
            case "oci:index/databaseManagementExternalAsm:DatabaseManagementExternalAsm":
                return new DatabaseManagementExternalAsm(name, <any>undefined, { urn })
            case "oci:index/databaseManagementExternalAsmInstance:DatabaseManagementExternalAsmInstance":
                return new DatabaseManagementExternalAsmInstance(name, <any>undefined, { urn })
            case "oci:index/databaseManagementExternalCluster:DatabaseManagementExternalCluster":
                return new DatabaseManagementExternalCluster(name, <any>undefined, { urn })
            case "oci:index/databaseManagementExternalClusterInstance:DatabaseManagementExternalClusterInstance":
                return new DatabaseManagementExternalClusterInstance(name, <any>undefined, { urn })
            case "oci:index/databaseManagementExternalDbHome:DatabaseManagementExternalDbHome":
                return new DatabaseManagementExternalDbHome(name, <any>undefined, { urn })
            case "oci:index/databaseManagementExternalDbNode:DatabaseManagementExternalDbNode":
                return new DatabaseManagementExternalDbNode(name, <any>undefined, { urn })
            case "oci:index/databaseManagementExternalDbSystem:DatabaseManagementExternalDbSystem":
                return new DatabaseManagementExternalDbSystem(name, <any>undefined, { urn })
            case "oci:index/databaseManagementExternalDbSystemConnector:DatabaseManagementExternalDbSystemConnector":
                return new DatabaseManagementExternalDbSystemConnector(name, <any>undefined, { urn })
            case "oci:index/databaseManagementExternalDbSystemDatabaseManagementsManagement:DatabaseManagementExternalDbSystemDatabaseManagementsManagement":
                return new DatabaseManagementExternalDbSystemDatabaseManagementsManagement(name, <any>undefined, { urn })
            case "oci:index/databaseManagementExternalDbSystemDiscovery:DatabaseManagementExternalDbSystemDiscovery":
                return new DatabaseManagementExternalDbSystemDiscovery(name, <any>undefined, { urn })
            case "oci:index/databaseManagementExternalDbSystemStackMonitoringsManagement:DatabaseManagementExternalDbSystemStackMonitoringsManagement":
                return new DatabaseManagementExternalDbSystemStackMonitoringsManagement(name, <any>undefined, { urn })
            case "oci:index/databaseManagementExternalExadataInfrastructure:DatabaseManagementExternalExadataInfrastructure":
                return new DatabaseManagementExternalExadataInfrastructure(name, <any>undefined, { urn })
            case "oci:index/databaseManagementExternalExadataInfrastructureExadataManagement:DatabaseManagementExternalExadataInfrastructureExadataManagement":
                return new DatabaseManagementExternalExadataInfrastructureExadataManagement(name, <any>undefined, { urn })
            case "oci:index/databaseManagementExternalExadataStorageConnector:DatabaseManagementExternalExadataStorageConnector":
                return new DatabaseManagementExternalExadataStorageConnector(name, <any>undefined, { urn })
            case "oci:index/databaseManagementExternalExadataStorageGrid:DatabaseManagementExternalExadataStorageGrid":
                return new DatabaseManagementExternalExadataStorageGrid(name, <any>undefined, { urn })
            case "oci:index/databaseManagementExternalExadataStorageServer:DatabaseManagementExternalExadataStorageServer":
                return new DatabaseManagementExternalExadataStorageServer(name, <any>undefined, { urn })
            case "oci:index/databaseManagementExternalListener:DatabaseManagementExternalListener":
                return new DatabaseManagementExternalListener(name, <any>undefined, { urn })
            case "oci:index/databaseManagementExternalcontainerdatabaseExternalContainerDbmFeaturesManagement:DatabaseManagementExternalcontainerdatabaseExternalContainerDbmFeaturesManagement":
                return new DatabaseManagementExternalcontainerdatabaseExternalContainerDbmFeaturesManagement(name, <any>undefined, { urn })
            case "oci:index/databaseManagementExternalnoncontainerdatabaseExternalNonContainerDbmFeaturesManagement:DatabaseManagementExternalnoncontainerdatabaseExternalNonContainerDbmFeaturesManagement":
                return new DatabaseManagementExternalnoncontainerdatabaseExternalNonContainerDbmFeaturesManagement(name, <any>undefined, { urn })
            case "oci:index/databaseManagementExternalpluggabledatabaseExternalPluggableDbmFeaturesManagement:DatabaseManagementExternalpluggabledatabaseExternalPluggableDbmFeaturesManagement":
                return new DatabaseManagementExternalpluggabledatabaseExternalPluggableDbmFeaturesManagement(name, <any>undefined, { urn })
            case "oci:index/databaseManagementManagedDatabase:DatabaseManagementManagedDatabase":
                return new DatabaseManagementManagedDatabase(name, <any>undefined, { urn })
            case "oci:index/databaseManagementManagedDatabaseGroup:DatabaseManagementManagedDatabaseGroup":
                return new DatabaseManagementManagedDatabaseGroup(name, <any>undefined, { urn })
            case "oci:index/databaseManagementManagedDatabasesChangeDatabaseParameter:DatabaseManagementManagedDatabasesChangeDatabaseParameter":
                return new DatabaseManagementManagedDatabasesChangeDatabaseParameter(name, <any>undefined, { urn })
            case "oci:index/databaseManagementManagedDatabasesResetDatabaseParameter:DatabaseManagementManagedDatabasesResetDatabaseParameter":
                return new DatabaseManagementManagedDatabasesResetDatabaseParameter(name, <any>undefined, { urn })
            case "oci:index/databaseManagementNamedCredential:DatabaseManagementNamedCredential":
                return new DatabaseManagementNamedCredential(name, <any>undefined, { urn })
            case "oci:index/databaseManagementPluggabledatabasePluggableDatabaseDbmFeaturesManagement:DatabaseManagementPluggabledatabasePluggableDatabaseDbmFeaturesManagement":
                return new DatabaseManagementPluggabledatabasePluggableDatabaseDbmFeaturesManagement(name, <any>undefined, { urn })
            case "oci:index/databaseMigration:DatabaseMigration":
                return new DatabaseMigration(name, <any>undefined, { urn })
            case "oci:index/databaseMigrationConnection:DatabaseMigrationConnection":
                return new DatabaseMigrationConnection(name, <any>undefined, { urn })
            case "oci:index/databaseMigrationJob:DatabaseMigrationJob":
                return new DatabaseMigrationJob(name, <any>undefined, { urn })
            case "oci:index/databaseMigrationMigration:DatabaseMigrationMigration":
                return new DatabaseMigrationMigration(name, <any>undefined, { urn })
            case "oci:index/databaseOneoffPatch:DatabaseOneoffPatch":
                return new DatabaseOneoffPatch(name, <any>undefined, { urn })
            case "oci:index/databasePluggableDatabase:DatabasePluggableDatabase":
                return new DatabasePluggableDatabase(name, <any>undefined, { urn })
            case "oci:index/databasePluggableDatabasePluggabledatabasemanagementsManagement:DatabasePluggableDatabasePluggabledatabasemanagementsManagement":
                return new DatabasePluggableDatabasePluggabledatabasemanagementsManagement(name, <any>undefined, { urn })
            case "oci:index/databasePluggableDatabasesLocalClone:DatabasePluggableDatabasesLocalClone":
                return new DatabasePluggableDatabasesLocalClone(name, <any>undefined, { urn })
            case "oci:index/databasePluggableDatabasesRemoteClone:DatabasePluggableDatabasesRemoteClone":
                return new DatabasePluggableDatabasesRemoteClone(name, <any>undefined, { urn })
            case "oci:index/databaseToolsDatabaseToolsConnection:DatabaseToolsDatabaseToolsConnection":
                return new DatabaseToolsDatabaseToolsConnection(name, <any>undefined, { urn })
            case "oci:index/databaseToolsDatabaseToolsPrivateEndpoint:DatabaseToolsDatabaseToolsPrivateEndpoint":
                return new DatabaseToolsDatabaseToolsPrivateEndpoint(name, <any>undefined, { urn })
            case "oci:index/databaseVmCluster:DatabaseVmCluster":
                return new DatabaseVmCluster(name, <any>undefined, { urn })
            case "oci:index/databaseVmClusterAddVirtualMachine:DatabaseVmClusterAddVirtualMachine":
                return new DatabaseVmClusterAddVirtualMachine(name, <any>undefined, { urn })
            case "oci:index/databaseVmClusterNetwork:DatabaseVmClusterNetwork":
                return new DatabaseVmClusterNetwork(name, <any>undefined, { urn })
            case "oci:index/databaseVmClusterRemoveVirtualMachine:DatabaseVmClusterRemoveVirtualMachine":
                return new DatabaseVmClusterRemoveVirtualMachine(name, <any>undefined, { urn })
            case "oci:index/datacatalogCatalog:DatacatalogCatalog":
                return new DatacatalogCatalog(name, <any>undefined, { urn })
            case "oci:index/datacatalogCatalogPrivateEndpoint:DatacatalogCatalogPrivateEndpoint":
                return new DatacatalogCatalogPrivateEndpoint(name, <any>undefined, { urn })
            case "oci:index/datacatalogConnection:DatacatalogConnection":
                return new DatacatalogConnection(name, <any>undefined, { urn })
            case "oci:index/datacatalogDataAsset:DatacatalogDataAsset":
                return new DatacatalogDataAsset(name, <any>undefined, { urn })
            case "oci:index/datacatalogMetastore:DatacatalogMetastore":
                return new DatacatalogMetastore(name, <any>undefined, { urn })
            case "oci:index/dataflowApplication:DataflowApplication":
                return new DataflowApplication(name, <any>undefined, { urn })
            case "oci:index/dataflowInvokeRun:DataflowInvokeRun":
                return new DataflowInvokeRun(name, <any>undefined, { urn })
            case "oci:index/dataflowPool:DataflowPool":
                return new DataflowPool(name, <any>undefined, { urn })
            case "oci:index/dataflowPrivateEndpoint:DataflowPrivateEndpoint":
                return new DataflowPrivateEndpoint(name, <any>undefined, { urn })
            case "oci:index/dataflowRunStatement:DataflowRunStatement":
                return new DataflowRunStatement(name, <any>undefined, { urn })
            case "oci:index/dataflowSqlEndpoint:DataflowSqlEndpoint":
                return new DataflowSqlEndpoint(name, <any>undefined, { urn })
            case "oci:index/dataintegrationWorkspace:DataintegrationWorkspace":
                return new DataintegrationWorkspace(name, <any>undefined, { urn })
            case "oci:index/dataintegrationWorkspaceApplication:DataintegrationWorkspaceApplication":
                return new DataintegrationWorkspaceApplication(name, <any>undefined, { urn })
            case "oci:index/dataintegrationWorkspaceApplicationPatch:DataintegrationWorkspaceApplicationPatch":
                return new DataintegrationWorkspaceApplicationPatch(name, <any>undefined, { urn })
            case "oci:index/dataintegrationWorkspaceApplicationSchedule:DataintegrationWorkspaceApplicationSchedule":
                return new DataintegrationWorkspaceApplicationSchedule(name, <any>undefined, { urn })
            case "oci:index/dataintegrationWorkspaceApplicationTaskSchedule:DataintegrationWorkspaceApplicationTaskSchedule":
                return new DataintegrationWorkspaceApplicationTaskSchedule(name, <any>undefined, { urn })
            case "oci:index/dataintegrationWorkspaceExportRequest:DataintegrationWorkspaceExportRequest":
                return new DataintegrationWorkspaceExportRequest(name, <any>undefined, { urn })
            case "oci:index/dataintegrationWorkspaceFolder:DataintegrationWorkspaceFolder":
                return new DataintegrationWorkspaceFolder(name, <any>undefined, { urn })
            case "oci:index/dataintegrationWorkspaceImportRequest:DataintegrationWorkspaceImportRequest":
                return new DataintegrationWorkspaceImportRequest(name, <any>undefined, { urn })
            case "oci:index/dataintegrationWorkspaceProject:DataintegrationWorkspaceProject":
                return new DataintegrationWorkspaceProject(name, <any>undefined, { urn })
            case "oci:index/dataintegrationWorkspaceTask:DataintegrationWorkspaceTask":
                return new DataintegrationWorkspaceTask(name, <any>undefined, { urn })
            case "oci:index/datascienceJob:DatascienceJob":
                return new DatascienceJob(name, <any>undefined, { urn })
            case "oci:index/datascienceJobRun:DatascienceJobRun":
                return new DatascienceJobRun(name, <any>undefined, { urn })
            case "oci:index/datascienceModel:DatascienceModel":
                return new DatascienceModel(name, <any>undefined, { urn })
            case "oci:index/datascienceModelArtifactExport:DatascienceModelArtifactExport":
                return new DatascienceModelArtifactExport(name, <any>undefined, { urn })
            case "oci:index/datascienceModelArtifactImport:DatascienceModelArtifactImport":
                return new DatascienceModelArtifactImport(name, <any>undefined, { urn })
            case "oci:index/datascienceModelDeployment:DatascienceModelDeployment":
                return new DatascienceModelDeployment(name, <any>undefined, { urn })
            case "oci:index/datascienceModelProvenance:DatascienceModelProvenance":
                return new DatascienceModelProvenance(name, <any>undefined, { urn })
            case "oci:index/datascienceModelVersionSet:DatascienceModelVersionSet":
                return new DatascienceModelVersionSet(name, <any>undefined, { urn })
            case "oci:index/datascienceNotebookSession:DatascienceNotebookSession":
                return new DatascienceNotebookSession(name, <any>undefined, { urn })
            case "oci:index/datasciencePipeline:DatasciencePipeline":
                return new DatasciencePipeline(name, <any>undefined, { urn })
            case "oci:index/datasciencePipelineRun:DatasciencePipelineRun":
                return new DatasciencePipelineRun(name, <any>undefined, { urn })
            case "oci:index/datasciencePrivateEndpoint:DatasciencePrivateEndpoint":
                return new DatasciencePrivateEndpoint(name, <any>undefined, { urn })
            case "oci:index/datascienceProject:DatascienceProject":
                return new DatascienceProject(name, <any>undefined, { urn })
            case "oci:index/delegateAccessControlDelegationControl:DelegateAccessControlDelegationControl":
                return new DelegateAccessControlDelegationControl(name, <any>undefined, { urn })
            case "oci:index/delegateAccessControlDelegationSubscription:DelegateAccessControlDelegationSubscription":
                return new DelegateAccessControlDelegationSubscription(name, <any>undefined, { urn })
            case "oci:index/demandSignalOccDemandSignal:DemandSignalOccDemandSignal":
                return new DemandSignalOccDemandSignal(name, <any>undefined, { urn })
            case "oci:index/desktopsDesktopPool:DesktopsDesktopPool":
                return new DesktopsDesktopPool(name, <any>undefined, { urn })
            case "oci:index/devopsBuildPipeline:DevopsBuildPipeline":
                return new DevopsBuildPipeline(name, <any>undefined, { urn })
            case "oci:index/devopsBuildPipelineStage:DevopsBuildPipelineStage":
                return new DevopsBuildPipelineStage(name, <any>undefined, { urn })
            case "oci:index/devopsBuildRun:DevopsBuildRun":
                return new DevopsBuildRun(name, <any>undefined, { urn })
            case "oci:index/devopsConnection:DevopsConnection":
                return new DevopsConnection(name, <any>undefined, { urn })
            case "oci:index/devopsDeployArtifact:DevopsDeployArtifact":
                return new DevopsDeployArtifact(name, <any>undefined, { urn })
            case "oci:index/devopsDeployEnvironment:DevopsDeployEnvironment":
                return new DevopsDeployEnvironment(name, <any>undefined, { urn })
            case "oci:index/devopsDeployPipeline:DevopsDeployPipeline":
                return new DevopsDeployPipeline(name, <any>undefined, { urn })
            case "oci:index/devopsDeployStage:DevopsDeployStage":
                return new DevopsDeployStage(name, <any>undefined, { urn })
            case "oci:index/devopsDeployment:DevopsDeployment":
                return new DevopsDeployment(name, <any>undefined, { urn })
            case "oci:index/devopsProject:DevopsProject":
                return new DevopsProject(name, <any>undefined, { urn })
            case "oci:index/devopsProjectRepositorySetting:DevopsProjectRepositorySetting":
                return new DevopsProjectRepositorySetting(name, <any>undefined, { urn })
            case "oci:index/devopsRepository:DevopsRepository":
                return new DevopsRepository(name, <any>undefined, { urn })
            case "oci:index/devopsRepositoryMirror:DevopsRepositoryMirror":
                return new DevopsRepositoryMirror(name, <any>undefined, { urn })
            case "oci:index/devopsRepositoryProtectedBranchManagement:DevopsRepositoryProtectedBranchManagement":
                return new DevopsRepositoryProtectedBranchManagement(name, <any>undefined, { urn })
            case "oci:index/devopsRepositoryRef:DevopsRepositoryRef":
                return new DevopsRepositoryRef(name, <any>undefined, { urn })
            case "oci:index/devopsRepositorySetting:DevopsRepositorySetting":
                return new DevopsRepositorySetting(name, <any>undefined, { urn })
            case "oci:index/devopsTrigger:DevopsTrigger":
                return new DevopsTrigger(name, <any>undefined, { urn })
            case "oci:index/disasterRecoveryDrPlan:DisasterRecoveryDrPlan":
                return new DisasterRecoveryDrPlan(name, <any>undefined, { urn })
            case "oci:index/disasterRecoveryDrPlanExecution:DisasterRecoveryDrPlanExecution":
                return new DisasterRecoveryDrPlanExecution(name, <any>undefined, { urn })
            case "oci:index/disasterRecoveryDrProtectionGroup:DisasterRecoveryDrProtectionGroup":
                return new DisasterRecoveryDrProtectionGroup(name, <any>undefined, { urn })
            case "oci:index/dnsActionCreateZoneFromZoneFile:DnsActionCreateZoneFromZoneFile":
                return new DnsActionCreateZoneFromZoneFile(name, <any>undefined, { urn })
            case "oci:index/dnsRecord:DnsRecord":
                return new DnsRecord(name, <any>undefined, { urn })
            case "oci:index/dnsResolver:DnsResolver":
                return new DnsResolver(name, <any>undefined, { urn })
            case "oci:index/dnsResolverEndpoint:DnsResolverEndpoint":
                return new DnsResolverEndpoint(name, <any>undefined, { urn })
            case "oci:index/dnsRrset:DnsRrset":
                return new DnsRrset(name, <any>undefined, { urn })
            case "oci:index/dnsSteeringPolicy:DnsSteeringPolicy":
                return new DnsSteeringPolicy(name, <any>undefined, { urn })
            case "oci:index/dnsSteeringPolicyAttachment:DnsSteeringPolicyAttachment":
                return new DnsSteeringPolicyAttachment(name, <any>undefined, { urn })
            case "oci:index/dnsTsigKey:DnsTsigKey":
                return new DnsTsigKey(name, <any>undefined, { urn })
            case "oci:index/dnsView:DnsView":
                return new DnsView(name, <any>undefined, { urn })
            case "oci:index/dnsZone:DnsZone":
                return new DnsZone(name, <any>undefined, { urn })
            case "oci:index/emailDkim:EmailDkim":
                return new EmailDkim(name, <any>undefined, { urn })
            case "oci:index/emailEmailDomain:EmailEmailDomain":
                return new EmailEmailDomain(name, <any>undefined, { urn })
            case "oci:index/emailEmailReturnPath:EmailEmailReturnPath":
                return new EmailEmailReturnPath(name, <any>undefined, { urn })
            case "oci:index/emailSender:EmailSender":
                return new EmailSender(name, <any>undefined, { urn })
            case "oci:index/emailSuppression:EmailSuppression":
                return new EmailSuppression(name, <any>undefined, { urn })
            case "oci:index/eventsRule:EventsRule":
                return new EventsRule(name, <any>undefined, { urn })
            case "oci:index/fileStorageExport:FileStorageExport":
                return new FileStorageExport(name, <any>undefined, { urn })
            case "oci:index/fileStorageExportSet:FileStorageExportSet":
                return new FileStorageExportSet(name, <any>undefined, { urn })
            case "oci:index/fileStorageFileSystem:FileStorageFileSystem":
                return new FileStorageFileSystem(name, <any>undefined, { urn })
            case "oci:index/fileStorageFilesystemSnapshotPolicy:FileStorageFilesystemSnapshotPolicy":
                return new FileStorageFilesystemSnapshotPolicy(name, <any>undefined, { urn })
            case "oci:index/fileStorageMountTarget:FileStorageMountTarget":
                return new FileStorageMountTarget(name, <any>undefined, { urn })
            case "oci:index/fileStorageOutboundConnector:FileStorageOutboundConnector":
                return new FileStorageOutboundConnector(name, <any>undefined, { urn })
            case "oci:index/fileStorageReplication:FileStorageReplication":
                return new FileStorageReplication(name, <any>undefined, { urn })
            case "oci:index/fileStorageSnapshot:FileStorageSnapshot":
                return new FileStorageSnapshot(name, <any>undefined, { urn })
            case "oci:index/functionsApplication:FunctionsApplication":
                return new FunctionsApplication(name, <any>undefined, { urn })
            case "oci:index/functionsFunction:FunctionsFunction":
                return new FunctionsFunction(name, <any>undefined, { urn })
            case "oci:index/functionsInvokeFunction:FunctionsInvokeFunction":
                return new FunctionsInvokeFunction(name, <any>undefined, { urn })
            case "oci:index/fusionAppsFusionEnvironment:FusionAppsFusionEnvironment":
                return new FusionAppsFusionEnvironment(name, <any>undefined, { urn })
            case "oci:index/fusionAppsFusionEnvironmentAdminUser:FusionAppsFusionEnvironmentAdminUser":
                return new FusionAppsFusionEnvironmentAdminUser(name, <any>undefined, { urn })
            case "oci:index/fusionAppsFusionEnvironmentDataMaskingActivity:FusionAppsFusionEnvironmentDataMaskingActivity":
                return new FusionAppsFusionEnvironmentDataMaskingActivity(name, <any>undefined, { urn })
            case "oci:index/fusionAppsFusionEnvironmentFamily:FusionAppsFusionEnvironmentFamily":
                return new FusionAppsFusionEnvironmentFamily(name, <any>undefined, { urn })
            case "oci:index/fusionAppsFusionEnvironmentRefreshActivity:FusionAppsFusionEnvironmentRefreshActivity":
                return new FusionAppsFusionEnvironmentRefreshActivity(name, <any>undefined, { urn })
            case "oci:index/fusionAppsFusionEnvironmentServiceAttachment:FusionAppsFusionEnvironmentServiceAttachment":
                return new FusionAppsFusionEnvironmentServiceAttachment(name, <any>undefined, { urn })
            case "oci:index/generativeAiDedicatedAiCluster:GenerativeAiDedicatedAiCluster":
                return new GenerativeAiDedicatedAiCluster(name, <any>undefined, { urn })
            case "oci:index/generativeAiEndpoint:GenerativeAiEndpoint":
                return new GenerativeAiEndpoint(name, <any>undefined, { urn })
            case "oci:index/generativeAiModel:GenerativeAiModel":
                return new GenerativeAiModel(name, <any>undefined, { urn })
            case "oci:index/genericArtifactsContentArtifactByPath:GenericArtifactsContentArtifactByPath":
                return new GenericArtifactsContentArtifactByPath(name, <any>undefined, { urn })
            case "oci:index/goldenGateConnection:GoldenGateConnection":
                return new GoldenGateConnection(name, <any>undefined, { urn })
            case "oci:index/goldenGateConnectionAssignment:GoldenGateConnectionAssignment":
                return new GoldenGateConnectionAssignment(name, <any>undefined, { urn })
            case "oci:index/goldenGateDatabaseRegistration:GoldenGateDatabaseRegistration":
                return new GoldenGateDatabaseRegistration(name, <any>undefined, { urn })
            case "oci:index/goldenGateDeployment:GoldenGateDeployment":
                return new GoldenGateDeployment(name, <any>undefined, { urn })
            case "oci:index/goldenGateDeploymentBackup:GoldenGateDeploymentBackup":
                return new GoldenGateDeploymentBackup(name, <any>undefined, { urn })
            case "oci:index/goldenGateDeploymentCertificate:GoldenGateDeploymentCertificate":
                return new GoldenGateDeploymentCertificate(name, <any>undefined, { urn })
            case "oci:index/healthChecksHttpMonitor:HealthChecksHttpMonitor":
                return new HealthChecksHttpMonitor(name, <any>undefined, { urn })
            case "oci:index/healthChecksHttpProbe:HealthChecksHttpProbe":
                return new HealthChecksHttpProbe(name, <any>undefined, { urn })
            case "oci:index/healthChecksPingMonitor:HealthChecksPingMonitor":
                return new HealthChecksPingMonitor(name, <any>undefined, { urn })
            case "oci:index/healthChecksPingProbe:HealthChecksPingProbe":
                return new HealthChecksPingProbe(name, <any>undefined, { urn })
            case "oci:index/identityApiKey:IdentityApiKey":
                return new IdentityApiKey(name, <any>undefined, { urn })
            case "oci:index/identityAuthToken:IdentityAuthToken":
                return new IdentityAuthToken(name, <any>undefined, { urn })
            case "oci:index/identityAuthenticationPolicy:IdentityAuthenticationPolicy":
                return new IdentityAuthenticationPolicy(name, <any>undefined, { urn })
            case "oci:index/identityCompartment:IdentityCompartment":
                return new IdentityCompartment(name, <any>undefined, { urn })
            case "oci:index/identityCustomerSecretKey:IdentityCustomerSecretKey":
                return new IdentityCustomerSecretKey(name, <any>undefined, { urn })
            case "oci:index/identityDataPlaneGenerateScopedAccessToken:IdentityDataPlaneGenerateScopedAccessToken":
                return new IdentityDataPlaneGenerateScopedAccessToken(name, <any>undefined, { urn })
            case "oci:index/identityDbCredential:IdentityDbCredential":
                return new IdentityDbCredential(name, <any>undefined, { urn })
            case "oci:index/identityDomain:IdentityDomain":
                return new IdentityDomain(name, <any>undefined, { urn })
            case "oci:index/identityDomainReplicationToRegion:IdentityDomainReplicationToRegion":
                return new IdentityDomainReplicationToRegion(name, <any>undefined, { urn })
            case "oci:index/identityDomainsAccountRecoverySetting:IdentityDomainsAccountRecoverySetting":
                return new IdentityDomainsAccountRecoverySetting(name, <any>undefined, { urn })
            case "oci:index/identityDomainsApiKey:IdentityDomainsApiKey":
                return new IdentityDomainsApiKey(name, <any>undefined, { urn })
            case "oci:index/identityDomainsApp:IdentityDomainsApp":
                return new IdentityDomainsApp(name, <any>undefined, { urn })
            case "oci:index/identityDomainsAppRole:IdentityDomainsAppRole":
                return new IdentityDomainsAppRole(name, <any>undefined, { urn })
            case "oci:index/identityDomainsApprovalWorkflow:IdentityDomainsApprovalWorkflow":
                return new IdentityDomainsApprovalWorkflow(name, <any>undefined, { urn })
            case "oci:index/identityDomainsApprovalWorkflowAssignment:IdentityDomainsApprovalWorkflowAssignment":
                return new IdentityDomainsApprovalWorkflowAssignment(name, <any>undefined, { urn })
            case "oci:index/identityDomainsApprovalWorkflowStep:IdentityDomainsApprovalWorkflowStep":
                return new IdentityDomainsApprovalWorkflowStep(name, <any>undefined, { urn })
            case "oci:index/identityDomainsAuthToken:IdentityDomainsAuthToken":
                return new IdentityDomainsAuthToken(name, <any>undefined, { urn })
            case "oci:index/identityDomainsAuthenticationFactorSetting:IdentityDomainsAuthenticationFactorSetting":
                return new IdentityDomainsAuthenticationFactorSetting(name, <any>undefined, { urn })
            case "oci:index/identityDomainsCloudGate:IdentityDomainsCloudGate":
                return new IdentityDomainsCloudGate(name, <any>undefined, { urn })
            case "oci:index/identityDomainsCloudGateMapping:IdentityDomainsCloudGateMapping":
                return new IdentityDomainsCloudGateMapping(name, <any>undefined, { urn })
            case "oci:index/identityDomainsCloudGateServer:IdentityDomainsCloudGateServer":
                return new IdentityDomainsCloudGateServer(name, <any>undefined, { urn })
            case "oci:index/identityDomainsCondition:IdentityDomainsCondition":
                return new IdentityDomainsCondition(name, <any>undefined, { urn })
            case "oci:index/identityDomainsCustomerSecretKey:IdentityDomainsCustomerSecretKey":
                return new IdentityDomainsCustomerSecretKey(name, <any>undefined, { urn })
            case "oci:index/identityDomainsDynamicResourceGroup:IdentityDomainsDynamicResourceGroup":
                return new IdentityDomainsDynamicResourceGroup(name, <any>undefined, { urn })
            case "oci:index/identityDomainsGrant:IdentityDomainsGrant":
                return new IdentityDomainsGrant(name, <any>undefined, { urn })
            case "oci:index/identityDomainsGroup:IdentityDomainsGroup":
                return new IdentityDomainsGroup(name, <any>undefined, { urn })
            case "oci:index/identityDomainsIdentityPropagationTrust:IdentityDomainsIdentityPropagationTrust":
                return new IdentityDomainsIdentityPropagationTrust(name, <any>undefined, { urn })
            case "oci:index/identityDomainsIdentityProvider:IdentityDomainsIdentityProvider":
                return new IdentityDomainsIdentityProvider(name, <any>undefined, { urn })
            case "oci:index/identityDomainsIdentitySetting:IdentityDomainsIdentitySetting":
                return new IdentityDomainsIdentitySetting(name, <any>undefined, { urn })
            case "oci:index/identityDomainsKmsiSetting:IdentityDomainsKmsiSetting":
                return new IdentityDomainsKmsiSetting(name, <any>undefined, { urn })
            case "oci:index/identityDomainsMyApiKey:IdentityDomainsMyApiKey":
                return new IdentityDomainsMyApiKey(name, <any>undefined, { urn })
            case "oci:index/identityDomainsMyAuthToken:IdentityDomainsMyAuthToken":
                return new IdentityDomainsMyAuthToken(name, <any>undefined, { urn })
            case "oci:index/identityDomainsMyCustomerSecretKey:IdentityDomainsMyCustomerSecretKey":
                return new IdentityDomainsMyCustomerSecretKey(name, <any>undefined, { urn })
            case "oci:index/identityDomainsMyOauth2clientCredential:IdentityDomainsMyOauth2clientCredential":
                return new IdentityDomainsMyOauth2clientCredential(name, <any>undefined, { urn })
            case "oci:index/identityDomainsMyRequest:IdentityDomainsMyRequest":
                return new IdentityDomainsMyRequest(name, <any>undefined, { urn })
            case "oci:index/identityDomainsMySmtpCredential:IdentityDomainsMySmtpCredential":
                return new IdentityDomainsMySmtpCredential(name, <any>undefined, { urn })
            case "oci:index/identityDomainsMySupportAccount:IdentityDomainsMySupportAccount":
                return new IdentityDomainsMySupportAccount(name, <any>undefined, { urn })
            case "oci:index/identityDomainsMyUserDbCredential:IdentityDomainsMyUserDbCredential":
                return new IdentityDomainsMyUserDbCredential(name, <any>undefined, { urn })
            case "oci:index/identityDomainsNetworkPerimeter:IdentityDomainsNetworkPerimeter":
                return new IdentityDomainsNetworkPerimeter(name, <any>undefined, { urn })
            case "oci:index/identityDomainsNotificationSetting:IdentityDomainsNotificationSetting":
                return new IdentityDomainsNotificationSetting(name, <any>undefined, { urn })
            case "oci:index/identityDomainsOauth2clientCredential:IdentityDomainsOauth2clientCredential":
                return new IdentityDomainsOauth2clientCredential(name, <any>undefined, { urn })
            case "oci:index/identityDomainsOauthClientCertificate:IdentityDomainsOauthClientCertificate":
                return new IdentityDomainsOauthClientCertificate(name, <any>undefined, { urn })
            case "oci:index/identityDomainsOauthPartnerCertificate:IdentityDomainsOauthPartnerCertificate":
                return new IdentityDomainsOauthPartnerCertificate(name, <any>undefined, { urn })
            case "oci:index/identityDomainsPasswordPolicy:IdentityDomainsPasswordPolicy":
                return new IdentityDomainsPasswordPolicy(name, <any>undefined, { urn })
            case "oci:index/identityDomainsPolicy:IdentityDomainsPolicy":
                return new IdentityDomainsPolicy(name, <any>undefined, { urn })
            case "oci:index/identityDomainsRule:IdentityDomainsRule":
                return new IdentityDomainsRule(name, <any>undefined, { urn })
            case "oci:index/identityDomainsSecurityQuestion:IdentityDomainsSecurityQuestion":
                return new IdentityDomainsSecurityQuestion(name, <any>undefined, { urn })
            case "oci:index/identityDomainsSecurityQuestionSetting:IdentityDomainsSecurityQuestionSetting":
                return new IdentityDomainsSecurityQuestionSetting(name, <any>undefined, { urn })
            case "oci:index/identityDomainsSelfRegistrationProfile:IdentityDomainsSelfRegistrationProfile":
                return new IdentityDomainsSelfRegistrationProfile(name, <any>undefined, { urn })
            case "oci:index/identityDomainsSetting:IdentityDomainsSetting":
                return new IdentityDomainsSetting(name, <any>undefined, { urn })
            case "oci:index/identityDomainsSmtpCredential:IdentityDomainsSmtpCredential":
                return new IdentityDomainsSmtpCredential(name, <any>undefined, { urn })
            case "oci:index/identityDomainsSocialIdentityProvider:IdentityDomainsSocialIdentityProvider":
                return new IdentityDomainsSocialIdentityProvider(name, <any>undefined, { urn })
            case "oci:index/identityDomainsUser:IdentityDomainsUser":
                return new IdentityDomainsUser(name, <any>undefined, { urn })
            case "oci:index/identityDomainsUserDbCredential:IdentityDomainsUserDbCredential":
                return new IdentityDomainsUserDbCredential(name, <any>undefined, { urn })
            case "oci:index/identityDynamicGroup:IdentityDynamicGroup":
                return new IdentityDynamicGroup(name, <any>undefined, { urn })
            case "oci:index/identityGroup:IdentityGroup":
                return new IdentityGroup(name, <any>undefined, { urn })
            case "oci:index/identityIdentityProvider:IdentityIdentityProvider":
                return new IdentityIdentityProvider(name, <any>undefined, { urn })
            case "oci:index/identityIdpGroupMapping:IdentityIdpGroupMapping":
                return new IdentityIdpGroupMapping(name, <any>undefined, { urn })
            case "oci:index/identityImportStandardTagsManagement:IdentityImportStandardTagsManagement":
                return new IdentityImportStandardTagsManagement(name, <any>undefined, { urn })
            case "oci:index/identityNetworkSource:IdentityNetworkSource":
                return new IdentityNetworkSource(name, <any>undefined, { urn })
            case "oci:index/identityPolicy:IdentityPolicy":
                return new IdentityPolicy(name, <any>undefined, { urn })
            case "oci:index/identitySmtpCredential:IdentitySmtpCredential":
                return new IdentitySmtpCredential(name, <any>undefined, { urn })
            case "oci:index/identityTag:IdentityTag":
                return new IdentityTag(name, <any>undefined, { urn })
            case "oci:index/identityTagDefault:IdentityTagDefault":
                return new IdentityTagDefault(name, <any>undefined, { urn })
            case "oci:index/identityTagNamespace:IdentityTagNamespace":
                return new IdentityTagNamespace(name, <any>undefined, { urn })
            case "oci:index/identityUiPassword:IdentityUiPassword":
                return new IdentityUiPassword(name, <any>undefined, { urn })
            case "oci:index/identityUser:IdentityUser":
                return new IdentityUser(name, <any>undefined, { urn })
            case "oci:index/identityUserCapabilitiesManagement:IdentityUserCapabilitiesManagement":
                return new IdentityUserCapabilitiesManagement(name, <any>undefined, { urn })
            case "oci:index/identityUserGroupMembership:IdentityUserGroupMembership":
                return new IdentityUserGroupMembership(name, <any>undefined, { urn })
            case "oci:index/integrationIntegrationInstance:IntegrationIntegrationInstance":
                return new IntegrationIntegrationInstance(name, <any>undefined, { urn })
            case "oci:index/integrationPrivateEndpointOutboundConnection:IntegrationPrivateEndpointOutboundConnection":
                return new IntegrationPrivateEndpointOutboundConnection(name, <any>undefined, { urn })
            case "oci:index/jmsFleet:JmsFleet":
                return new JmsFleet(name, <any>undefined, { urn })
            case "oci:index/jmsFleetAdvancedFeatureConfiguration:JmsFleetAdvancedFeatureConfiguration":
                return new JmsFleetAdvancedFeatureConfiguration(name, <any>undefined, { urn })
            case "oci:index/jmsJavaDownloadsJavaDownloadReport:JmsJavaDownloadsJavaDownloadReport":
                return new JmsJavaDownloadsJavaDownloadReport(name, <any>undefined, { urn })
            case "oci:index/jmsJavaDownloadsJavaDownloadToken:JmsJavaDownloadsJavaDownloadToken":
                return new JmsJavaDownloadsJavaDownloadToken(name, <any>undefined, { urn })
            case "oci:index/jmsJavaDownloadsJavaLicenseAcceptanceRecord:JmsJavaDownloadsJavaLicenseAcceptanceRecord":
                return new JmsJavaDownloadsJavaLicenseAcceptanceRecord(name, <any>undefined, { urn })
            case "oci:index/jmsJmsPlugin:JmsJmsPlugin":
                return new JmsJmsPlugin(name, <any>undefined, { urn })
            case "oci:index/kmsEkmsPrivateEndpoint:KmsEkmsPrivateEndpoint":
                return new KmsEkmsPrivateEndpoint(name, <any>undefined, { urn })
            case "oci:index/kmsEncryptedData:KmsEncryptedData":
                return new KmsEncryptedData(name, <any>undefined, { urn })
            case "oci:index/kmsGeneratedKey:KmsGeneratedKey":
                return new KmsGeneratedKey(name, <any>undefined, { urn })
            case "oci:index/kmsKey:KmsKey":
                return new KmsKey(name, <any>undefined, { urn })
            case "oci:index/kmsKeyVersion:KmsKeyVersion":
                return new KmsKeyVersion(name, <any>undefined, { urn })
            case "oci:index/kmsSign:KmsSign":
                return new KmsSign(name, <any>undefined, { urn })
            case "oci:index/kmsVault:KmsVault":
                return new KmsVault(name, <any>undefined, { urn })
            case "oci:index/kmsVaultReplication:KmsVaultReplication":
                return new KmsVaultReplication(name, <any>undefined, { urn })
            case "oci:index/kmsVerify:KmsVerify":
                return new KmsVerify(name, <any>undefined, { urn })
            case "oci:index/licenseManagerConfiguration:LicenseManagerConfiguration":
                return new LicenseManagerConfiguration(name, <any>undefined, { urn })
            case "oci:index/licenseManagerLicenseRecord:LicenseManagerLicenseRecord":
                return new LicenseManagerLicenseRecord(name, <any>undefined, { urn })
            case "oci:index/licenseManagerProductLicense:LicenseManagerProductLicense":
                return new LicenseManagerProductLicense(name, <any>undefined, { urn })
            case "oci:index/limitsQuota:LimitsQuota":
                return new LimitsQuota(name, <any>undefined, { urn })
            case "oci:index/loadBalancer:LoadBalancer":
                return new LoadBalancer(name, <any>undefined, { urn })
            case "oci:index/loadBalancerBackend:LoadBalancerBackend":
                return new LoadBalancerBackend(name, <any>undefined, { urn })
            case "oci:index/loadBalancerBackendSet:LoadBalancerBackendSet":
                return new LoadBalancerBackendSet(name, <any>undefined, { urn })
            case "oci:index/loadBalancerBackendset:LoadBalancerBackendset":
                return new LoadBalancerBackendset(name, <any>undefined, { urn })
            case "oci:index/loadBalancerCertificate:LoadBalancerCertificate":
                return new LoadBalancerCertificate(name, <any>undefined, { urn })
            case "oci:index/loadBalancerHostname:LoadBalancerHostname":
                return new LoadBalancerHostname(name, <any>undefined, { urn })
            case "oci:index/loadBalancerListener:LoadBalancerListener":
                return new LoadBalancerListener(name, <any>undefined, { urn })
            case "oci:index/loadBalancerLoadBalancer:LoadBalancerLoadBalancer":
                return new LoadBalancerLoadBalancer(name, <any>undefined, { urn })
            case "oci:index/loadBalancerLoadBalancerRoutingPolicy:LoadBalancerLoadBalancerRoutingPolicy":
                return new LoadBalancerLoadBalancerRoutingPolicy(name, <any>undefined, { urn })
            case "oci:index/loadBalancerPathRouteSet:LoadBalancerPathRouteSet":
                return new LoadBalancerPathRouteSet(name, <any>undefined, { urn })
            case "oci:index/loadBalancerRuleSet:LoadBalancerRuleSet":
                return new LoadBalancerRuleSet(name, <any>undefined, { urn })
            case "oci:index/loadBalancerSslCipherSuite:LoadBalancerSslCipherSuite":
                return new LoadBalancerSslCipherSuite(name, <any>undefined, { urn })
            case "oci:index/logAnalyticsLogAnalyticsEntity:LogAnalyticsLogAnalyticsEntity":
                return new LogAnalyticsLogAnalyticsEntity(name, <any>undefined, { urn })
            case "oci:index/logAnalyticsLogAnalyticsImportCustomContent:LogAnalyticsLogAnalyticsImportCustomContent":
                return new LogAnalyticsLogAnalyticsImportCustomContent(name, <any>undefined, { urn })
            case "oci:index/logAnalyticsLogAnalyticsLogGroup:LogAnalyticsLogAnalyticsLogGroup":
                return new LogAnalyticsLogAnalyticsLogGroup(name, <any>undefined, { urn })
            case "oci:index/logAnalyticsLogAnalyticsObjectCollectionRule:LogAnalyticsLogAnalyticsObjectCollectionRule":
                return new LogAnalyticsLogAnalyticsObjectCollectionRule(name, <any>undefined, { urn })
            case "oci:index/logAnalyticsLogAnalyticsPreferencesManagement:LogAnalyticsLogAnalyticsPreferencesManagement":
                return new LogAnalyticsLogAnalyticsPreferencesManagement(name, <any>undefined, { urn })
            case "oci:index/logAnalyticsLogAnalyticsResourceCategoriesManagement:LogAnalyticsLogAnalyticsResourceCategoriesManagement":
                return new LogAnalyticsLogAnalyticsResourceCategoriesManagement(name, <any>undefined, { urn })
            case "oci:index/logAnalyticsLogAnalyticsUnprocessedDataBucketManagement:LogAnalyticsLogAnalyticsUnprocessedDataBucketManagement":
                return new LogAnalyticsLogAnalyticsUnprocessedDataBucketManagement(name, <any>undefined, { urn })
            case "oci:index/logAnalyticsNamespace:LogAnalyticsNamespace":
                return new LogAnalyticsNamespace(name, <any>undefined, { urn })
            case "oci:index/logAnalyticsNamespaceIngestTimeRule:LogAnalyticsNamespaceIngestTimeRule":
                return new LogAnalyticsNamespaceIngestTimeRule(name, <any>undefined, { urn })
            case "oci:index/logAnalyticsNamespaceIngestTimeRulesManagement:LogAnalyticsNamespaceIngestTimeRulesManagement":
                return new LogAnalyticsNamespaceIngestTimeRulesManagement(name, <any>undefined, { urn })
            case "oci:index/logAnalyticsNamespaceScheduledTask:LogAnalyticsNamespaceScheduledTask":
                return new LogAnalyticsNamespaceScheduledTask(name, <any>undefined, { urn })
            case "oci:index/loggingLog:LoggingLog":
                return new LoggingLog(name, <any>undefined, { urn })
            case "oci:index/loggingLogGroup:LoggingLogGroup":
                return new LoggingLogGroup(name, <any>undefined, { urn })
            case "oci:index/loggingLogSavedSearch:LoggingLogSavedSearch":
                return new LoggingLogSavedSearch(name, <any>undefined, { urn })
            case "oci:index/loggingUnifiedAgentConfiguration:LoggingUnifiedAgentConfiguration":
                return new LoggingUnifiedAgentConfiguration(name, <any>undefined, { urn })
            case "oci:index/managementAgentManagementAgent:ManagementAgentManagementAgent":
                return new ManagementAgentManagementAgent(name, <any>undefined, { urn })
            case "oci:index/managementAgentManagementAgentDataSource:ManagementAgentManagementAgentDataSource":
                return new ManagementAgentManagementAgentDataSource(name, <any>undefined, { urn })
            case "oci:index/managementAgentManagementAgentInstallKey:ManagementAgentManagementAgentInstallKey":
                return new ManagementAgentManagementAgentInstallKey(name, <any>undefined, { urn })
            case "oci:index/managementDashboardManagementDashboardsImport:ManagementDashboardManagementDashboardsImport":
                return new ManagementDashboardManagementDashboardsImport(name, <any>undefined, { urn })
            case "oci:index/marketplaceAcceptedAgreement:MarketplaceAcceptedAgreement":
                return new MarketplaceAcceptedAgreement(name, <any>undefined, { urn })
            case "oci:index/marketplaceListingPackageAgreement:MarketplaceListingPackageAgreement":
                return new MarketplaceListingPackageAgreement(name, <any>undefined, { urn })
            case "oci:index/marketplacePublication:MarketplacePublication":
                return new MarketplacePublication(name, <any>undefined, { urn })
            case "oci:index/mediaServicesMediaAsset:MediaServicesMediaAsset":
                return new MediaServicesMediaAsset(name, <any>undefined, { urn })
            case "oci:index/mediaServicesMediaWorkflow:MediaServicesMediaWorkflow":
                return new MediaServicesMediaWorkflow(name, <any>undefined, { urn })
            case "oci:index/mediaServicesMediaWorkflowConfiguration:MediaServicesMediaWorkflowConfiguration":
                return new MediaServicesMediaWorkflowConfiguration(name, <any>undefined, { urn })
            case "oci:index/mediaServicesMediaWorkflowJob:MediaServicesMediaWorkflowJob":
                return new MediaServicesMediaWorkflowJob(name, <any>undefined, { urn })
            case "oci:index/mediaServicesStreamCdnConfig:MediaServicesStreamCdnConfig":
                return new MediaServicesStreamCdnConfig(name, <any>undefined, { urn })
            case "oci:index/mediaServicesStreamDistributionChannel:MediaServicesStreamDistributionChannel":
                return new MediaServicesStreamDistributionChannel(name, <any>undefined, { urn })
            case "oci:index/mediaServicesStreamPackagingConfig:MediaServicesStreamPackagingConfig":
                return new MediaServicesStreamPackagingConfig(name, <any>undefined, { urn })
            case "oci:index/meteringComputationCustomTable:MeteringComputationCustomTable":
                return new MeteringComputationCustomTable(name, <any>undefined, { urn })
            case "oci:index/meteringComputationQuery:MeteringComputationQuery":
                return new MeteringComputationQuery(name, <any>undefined, { urn })
            case "oci:index/meteringComputationSchedule:MeteringComputationSchedule":
                return new MeteringComputationSchedule(name, <any>undefined, { urn })
            case "oci:index/meteringComputationUsage:MeteringComputationUsage":
                return new MeteringComputationUsage(name, <any>undefined, { urn })
            case "oci:index/meteringComputationUsageCarbonEmission:MeteringComputationUsageCarbonEmission":
                return new MeteringComputationUsageCarbonEmission(name, <any>undefined, { urn })
            case "oci:index/meteringComputationUsageCarbonEmissionsQuery:MeteringComputationUsageCarbonEmissionsQuery":
                return new MeteringComputationUsageCarbonEmissionsQuery(name, <any>undefined, { urn })
            case "oci:index/meteringComputationUsageStatementEmailRecipientsGroup:MeteringComputationUsageStatementEmailRecipientsGroup":
                return new MeteringComputationUsageStatementEmailRecipientsGroup(name, <any>undefined, { urn })
            case "oci:index/monitoringAlarm:MonitoringAlarm":
                return new MonitoringAlarm(name, <any>undefined, { urn })
            case "oci:index/monitoringAlarmSuppression:MonitoringAlarmSuppression":
                return new MonitoringAlarmSuppression(name, <any>undefined, { urn })
            case "oci:index/mysqlChannel:MysqlChannel":
                return new MysqlChannel(name, <any>undefined, { urn })
            case "oci:index/mysqlHeatWaveCluster:MysqlHeatWaveCluster":
                return new MysqlHeatWaveCluster(name, <any>undefined, { urn })
            case "oci:index/mysqlMysqlBackup:MysqlMysqlBackup":
                return new MysqlMysqlBackup(name, <any>undefined, { urn })
            case "oci:index/mysqlMysqlConfiguration:MysqlMysqlConfiguration":
                return new MysqlMysqlConfiguration(name, <any>undefined, { urn })
            case "oci:index/mysqlMysqlDbSystem:MysqlMysqlDbSystem":
                return new MysqlMysqlDbSystem(name, <any>undefined, { urn })
            case "oci:index/mysqlReplica:MysqlReplica":
                return new MysqlReplica(name, <any>undefined, { urn })
            case "oci:index/networkFirewallNetworkFirewall:NetworkFirewallNetworkFirewall":
                return new NetworkFirewallNetworkFirewall(name, <any>undefined, { urn })
            case "oci:index/networkFirewallNetworkFirewallPolicy:NetworkFirewallNetworkFirewallPolicy":
                return new NetworkFirewallNetworkFirewallPolicy(name, <any>undefined, { urn })
            case "oci:index/networkFirewallNetworkFirewallPolicyAddressList:NetworkFirewallNetworkFirewallPolicyAddressList":
                return new NetworkFirewallNetworkFirewallPolicyAddressList(name, <any>undefined, { urn })
            case "oci:index/networkFirewallNetworkFirewallPolicyApplication:NetworkFirewallNetworkFirewallPolicyApplication":
                return new NetworkFirewallNetworkFirewallPolicyApplication(name, <any>undefined, { urn })
            case "oci:index/networkFirewallNetworkFirewallPolicyApplicationGroup:NetworkFirewallNetworkFirewallPolicyApplicationGroup":
                return new NetworkFirewallNetworkFirewallPolicyApplicationGroup(name, <any>undefined, { urn })
            case "oci:index/networkFirewallNetworkFirewallPolicyDecryptionProfile:NetworkFirewallNetworkFirewallPolicyDecryptionProfile":
                return new NetworkFirewallNetworkFirewallPolicyDecryptionProfile(name, <any>undefined, { urn })
            case "oci:index/networkFirewallNetworkFirewallPolicyDecryptionRule:NetworkFirewallNetworkFirewallPolicyDecryptionRule":
                return new NetworkFirewallNetworkFirewallPolicyDecryptionRule(name, <any>undefined, { urn })
            case "oci:index/networkFirewallNetworkFirewallPolicyMappedSecret:NetworkFirewallNetworkFirewallPolicyMappedSecret":
                return new NetworkFirewallNetworkFirewallPolicyMappedSecret(name, <any>undefined, { urn })
            case "oci:index/networkFirewallNetworkFirewallPolicySecurityRule:NetworkFirewallNetworkFirewallPolicySecurityRule":
                return new NetworkFirewallNetworkFirewallPolicySecurityRule(name, <any>undefined, { urn })
            case "oci:index/networkFirewallNetworkFirewallPolicyService:NetworkFirewallNetworkFirewallPolicyService":
                return new NetworkFirewallNetworkFirewallPolicyService(name, <any>undefined, { urn })
            case "oci:index/networkFirewallNetworkFirewallPolicyServiceList:NetworkFirewallNetworkFirewallPolicyServiceList":
                return new NetworkFirewallNetworkFirewallPolicyServiceList(name, <any>undefined, { urn })
            case "oci:index/networkFirewallNetworkFirewallPolicyTunnelInspectionRule:NetworkFirewallNetworkFirewallPolicyTunnelInspectionRule":
                return new NetworkFirewallNetworkFirewallPolicyTunnelInspectionRule(name, <any>undefined, { urn })
            case "oci:index/networkFirewallNetworkFirewallPolicyUrlList:NetworkFirewallNetworkFirewallPolicyUrlList":
                return new NetworkFirewallNetworkFirewallPolicyUrlList(name, <any>undefined, { urn })
            case "oci:index/networkLoadBalancerBackend:NetworkLoadBalancerBackend":
                return new NetworkLoadBalancerBackend(name, <any>undefined, { urn })
            case "oci:index/networkLoadBalancerBackendSet:NetworkLoadBalancerBackendSet":
                return new NetworkLoadBalancerBackendSet(name, <any>undefined, { urn })
            case "oci:index/networkLoadBalancerListener:NetworkLoadBalancerListener":
                return new NetworkLoadBalancerListener(name, <any>undefined, { urn })
            case "oci:index/networkLoadBalancerNetworkLoadBalancer:NetworkLoadBalancerNetworkLoadBalancer":
                return new NetworkLoadBalancerNetworkLoadBalancer(name, <any>undefined, { urn })
            case "oci:index/networkLoadBalancerNetworkLoadBalancersBackendSetsUnified:NetworkLoadBalancerNetworkLoadBalancersBackendSetsUnified":
                return new NetworkLoadBalancerNetworkLoadBalancersBackendSetsUnified(name, <any>undefined, { urn })
            case "oci:index/nosqlIndex:NosqlIndex":
                return new NosqlIndex(name, <any>undefined, { urn })
            case "oci:index/nosqlTable:NosqlTable":
                return new NosqlTable(name, <any>undefined, { urn })
            case "oci:index/nosqlTableReplica:NosqlTableReplica":
                return new NosqlTableReplica(name, <any>undefined, { urn })
            case "oci:index/objectstorageBucket:ObjectstorageBucket":
                return new ObjectstorageBucket(name, <any>undefined, { urn })
            case "oci:index/objectstorageNamespaceMetadata:ObjectstorageNamespaceMetadata":
                return new ObjectstorageNamespaceMetadata(name, <any>undefined, { urn })
            case "oci:index/objectstorageObject:ObjectstorageObject":
                return new ObjectstorageObject(name, <any>undefined, { urn })
            case "oci:index/objectstorageObjectLifecyclePolicy:ObjectstorageObjectLifecyclePolicy":
                return new ObjectstorageObjectLifecyclePolicy(name, <any>undefined, { urn })
            case "oci:index/objectstoragePreauthrequest:ObjectstoragePreauthrequest":
                return new ObjectstoragePreauthrequest(name, <any>undefined, { urn })
            case "oci:index/objectstorageReplicationPolicy:ObjectstorageReplicationPolicy":
                return new ObjectstorageReplicationPolicy(name, <any>undefined, { urn })
            case "oci:index/oceOceInstance:OceOceInstance":
                return new OceOceInstance(name, <any>undefined, { urn })
            case "oci:index/ocvpCluster:OcvpCluster":
                return new OcvpCluster(name, <any>undefined, { urn })
            case "oci:index/ocvpEsxiHost:OcvpEsxiHost":
                return new OcvpEsxiHost(name, <any>undefined, { urn })
            case "oci:index/ocvpSddc:OcvpSddc":
                return new OcvpSddc(name, <any>undefined, { urn })
            case "oci:index/odaOdaInstance:OdaOdaInstance":
                return new OdaOdaInstance(name, <any>undefined, { urn })
            case "oci:index/odaOdaPrivateEndpoint:OdaOdaPrivateEndpoint":
                return new OdaOdaPrivateEndpoint(name, <any>undefined, { urn })
            case "oci:index/odaOdaPrivateEndpointAttachment:OdaOdaPrivateEndpointAttachment":
                return new OdaOdaPrivateEndpointAttachment(name, <any>undefined, { urn })
            case "oci:index/odaOdaPrivateEndpointScanProxy:OdaOdaPrivateEndpointScanProxy":
                return new OdaOdaPrivateEndpointScanProxy(name, <any>undefined, { urn })
            case "oci:index/onsNotificationTopic:OnsNotificationTopic":
                return new OnsNotificationTopic(name, <any>undefined, { urn })
            case "oci:index/onsSubscription:OnsSubscription":
                return new OnsSubscription(name, <any>undefined, { urn })
            case "oci:index/opaOpaInstance:OpaOpaInstance":
                return new OpaOpaInstance(name, <any>undefined, { urn })
            case "oci:index/opensearchOpensearchCluster:OpensearchOpensearchCluster":
                return new OpensearchOpensearchCluster(name, <any>undefined, { urn })
            case "oci:index/operatorAccessControlOperatorControl:OperatorAccessControlOperatorControl":
                return new OperatorAccessControlOperatorControl(name, <any>undefined, { urn })
            case "oci:index/operatorAccessControlOperatorControlAssignment:OperatorAccessControlOperatorControlAssignment":
                return new OperatorAccessControlOperatorControlAssignment(name, <any>undefined, { urn })
            case "oci:index/opsiAwrHub:OpsiAwrHub":
                return new OpsiAwrHub(name, <any>undefined, { urn })
            case "oci:index/opsiAwrHubSource:OpsiAwrHubSource":
                return new OpsiAwrHubSource(name, <any>undefined, { urn })
            case "oci:index/opsiAwrHubSourceAwrhubsourcesManagement:OpsiAwrHubSourceAwrhubsourcesManagement":
                return new OpsiAwrHubSourceAwrhubsourcesManagement(name, <any>undefined, { urn })
            case "oci:index/opsiDatabaseInsight:OpsiDatabaseInsight":
                return new OpsiDatabaseInsight(name, <any>undefined, { urn })
            case "oci:index/opsiEnterpriseManagerBridge:OpsiEnterpriseManagerBridge":
                return new OpsiEnterpriseManagerBridge(name, <any>undefined, { urn })
            case "oci:index/opsiExadataInsight:OpsiExadataInsight":
                return new OpsiExadataInsight(name, <any>undefined, { urn })
            case "oci:index/opsiHostInsight:OpsiHostInsight":
                return new OpsiHostInsight(name, <any>undefined, { urn })
            case "oci:index/opsiNewsReport:OpsiNewsReport":
                return new OpsiNewsReport(name, <any>undefined, { urn })
            case "oci:index/opsiOperationsInsightsPrivateEndpoint:OpsiOperationsInsightsPrivateEndpoint":
                return new OpsiOperationsInsightsPrivateEndpoint(name, <any>undefined, { urn })
            case "oci:index/opsiOperationsInsightsWarehouse:OpsiOperationsInsightsWarehouse":
                return new OpsiOperationsInsightsWarehouse(name, <any>undefined, { urn })
            case "oci:index/opsiOperationsInsightsWarehouseDownloadWarehouseWallet:OpsiOperationsInsightsWarehouseDownloadWarehouseWallet":
                return new OpsiOperationsInsightsWarehouseDownloadWarehouseWallet(name, <any>undefined, { urn })
            case "oci:index/opsiOperationsInsightsWarehouseRotateWarehouseWallet:OpsiOperationsInsightsWarehouseRotateWarehouseWallet":
                return new OpsiOperationsInsightsWarehouseRotateWarehouseWallet(name, <any>undefined, { urn })
            case "oci:index/opsiOperationsInsightsWarehouseUser:OpsiOperationsInsightsWarehouseUser":
                return new OpsiOperationsInsightsWarehouseUser(name, <any>undefined, { urn })
            case "oci:index/opsiOpsiConfiguration:OpsiOpsiConfiguration":
                return new OpsiOpsiConfiguration(name, <any>undefined, { urn })
            case "oci:index/optimizerEnrollmentStatus:OptimizerEnrollmentStatus":
                return new OptimizerEnrollmentStatus(name, <any>undefined, { urn })
            case "oci:index/optimizerProfile:OptimizerProfile":
                return new OptimizerProfile(name, <any>undefined, { urn })
            case "oci:index/optimizerRecommendation:OptimizerRecommendation":
                return new OptimizerRecommendation(name, <any>undefined, { urn })
            case "oci:index/optimizerResourceAction:OptimizerResourceAction":
                return new OptimizerResourceAction(name, <any>undefined, { urn })
            case "oci:index/osManagementHubEvent:OsManagementHubEvent":
                return new OsManagementHubEvent(name, <any>undefined, { urn })
            case "oci:index/osManagementHubLifecycleEnvironment:OsManagementHubLifecycleEnvironment":
                return new OsManagementHubLifecycleEnvironment(name, <any>undefined, { urn })
            case "oci:index/osManagementHubLifecycleStageAttachManagedInstancesManagement:OsManagementHubLifecycleStageAttachManagedInstancesManagement":
                return new OsManagementHubLifecycleStageAttachManagedInstancesManagement(name, <any>undefined, { urn })
            case "oci:index/osManagementHubLifecycleStageDetachManagedInstancesManagement:OsManagementHubLifecycleStageDetachManagedInstancesManagement":
                return new OsManagementHubLifecycleStageDetachManagedInstancesManagement(name, <any>undefined, { urn })
            case "oci:index/osManagementHubLifecycleStagePromoteSoftwareSourceManagement:OsManagementHubLifecycleStagePromoteSoftwareSourceManagement":
                return new OsManagementHubLifecycleStagePromoteSoftwareSourceManagement(name, <any>undefined, { urn })
            case "oci:index/osManagementHubManagedInstance:OsManagementHubManagedInstance":
                return new OsManagementHubManagedInstance(name, <any>undefined, { urn })
            case "oci:index/osManagementHubManagedInstanceAttachProfileManagement:OsManagementHubManagedInstanceAttachProfileManagement":
                return new OsManagementHubManagedInstanceAttachProfileManagement(name, <any>undefined, { urn })
            case "oci:index/osManagementHubManagedInstanceDetachProfileManagement:OsManagementHubManagedInstanceDetachProfileManagement":
                return new OsManagementHubManagedInstanceDetachProfileManagement(name, <any>undefined, { urn })
            case "oci:index/osManagementHubManagedInstanceGroup:OsManagementHubManagedInstanceGroup":
                return new OsManagementHubManagedInstanceGroup(name, <any>undefined, { urn })
            case "oci:index/osManagementHubManagedInstanceGroupAttachManagedInstancesManagement:OsManagementHubManagedInstanceGroupAttachManagedInstancesManagement":
                return new OsManagementHubManagedInstanceGroupAttachManagedInstancesManagement(name, <any>undefined, { urn })
            case "oci:index/osManagementHubManagedInstanceGroupAttachSoftwareSourcesManagement:OsManagementHubManagedInstanceGroupAttachSoftwareSourcesManagement":
                return new OsManagementHubManagedInstanceGroupAttachSoftwareSourcesManagement(name, <any>undefined, { urn })
            case "oci:index/osManagementHubManagedInstanceGroupDetachManagedInstancesManagement:OsManagementHubManagedInstanceGroupDetachManagedInstancesManagement":
                return new OsManagementHubManagedInstanceGroupDetachManagedInstancesManagement(name, <any>undefined, { urn })
            case "oci:index/osManagementHubManagedInstanceGroupDetachSoftwareSourcesManagement:OsManagementHubManagedInstanceGroupDetachSoftwareSourcesManagement":
                return new OsManagementHubManagedInstanceGroupDetachSoftwareSourcesManagement(name, <any>undefined, { urn })
            case "oci:index/osManagementHubManagedInstanceGroupInstallPackagesManagement:OsManagementHubManagedInstanceGroupInstallPackagesManagement":
                return new OsManagementHubManagedInstanceGroupInstallPackagesManagement(name, <any>undefined, { urn })
            case "oci:index/osManagementHubManagedInstanceGroupInstallWindowsUpdatesManagement:OsManagementHubManagedInstanceGroupInstallWindowsUpdatesManagement":
                return new OsManagementHubManagedInstanceGroupInstallWindowsUpdatesManagement(name, <any>undefined, { urn })
            case "oci:index/osManagementHubManagedInstanceGroupManageModuleStreamsManagement:OsManagementHubManagedInstanceGroupManageModuleStreamsManagement":
                return new OsManagementHubManagedInstanceGroupManageModuleStreamsManagement(name, <any>undefined, { urn })
            case "oci:index/osManagementHubManagedInstanceGroupRemovePackagesManagement:OsManagementHubManagedInstanceGroupRemovePackagesManagement":
                return new OsManagementHubManagedInstanceGroupRemovePackagesManagement(name, <any>undefined, { urn })
            case "oci:index/osManagementHubManagedInstanceGroupUpdateAllPackagesManagement:OsManagementHubManagedInstanceGroupUpdateAllPackagesManagement":
                return new OsManagementHubManagedInstanceGroupUpdateAllPackagesManagement(name, <any>undefined, { urn })
            case "oci:index/osManagementHubManagedInstanceInstallWindowsUpdatesManagement:OsManagementHubManagedInstanceInstallWindowsUpdatesManagement":
                return new OsManagementHubManagedInstanceInstallWindowsUpdatesManagement(name, <any>undefined, { urn })
            case "oci:index/osManagementHubManagedInstanceUpdatePackagesManagement:OsManagementHubManagedInstanceUpdatePackagesManagement":
                return new OsManagementHubManagedInstanceUpdatePackagesManagement(name, <any>undefined, { urn })
            case "oci:index/osManagementHubManagementStation:OsManagementHubManagementStation":
                return new OsManagementHubManagementStation(name, <any>undefined, { urn })
            case "oci:index/osManagementHubManagementStationMirrorSynchronizeManagement:OsManagementHubManagementStationMirrorSynchronizeManagement":
                return new OsManagementHubManagementStationMirrorSynchronizeManagement(name, <any>undefined, { urn })
            case "oci:index/osManagementHubManagementStationRefreshManagement:OsManagementHubManagementStationRefreshManagement":
                return new OsManagementHubManagementStationRefreshManagement(name, <any>undefined, { urn })
            case "oci:index/osManagementHubManagementStationSynchronizeMirrorsManagement:OsManagementHubManagementStationSynchronizeMirrorsManagement":
                return new OsManagementHubManagementStationSynchronizeMirrorsManagement(name, <any>undefined, { urn })
            case "oci:index/osManagementHubProfile:OsManagementHubProfile":
                return new OsManagementHubProfile(name, <any>undefined, { urn })
            case "oci:index/osManagementHubScheduledJob:OsManagementHubScheduledJob":
                return new OsManagementHubScheduledJob(name, <any>undefined, { urn })
            case "oci:index/osManagementHubSoftwareSource:OsManagementHubSoftwareSource":
                return new OsManagementHubSoftwareSource(name, <any>undefined, { urn })
            case "oci:index/osManagementHubSoftwareSourceAddPackagesManagement:OsManagementHubSoftwareSourceAddPackagesManagement":
                return new OsManagementHubSoftwareSourceAddPackagesManagement(name, <any>undefined, { urn })
            case "oci:index/osManagementHubSoftwareSourceChangeAvailabilityManagement:OsManagementHubSoftwareSourceChangeAvailabilityManagement":
                return new OsManagementHubSoftwareSourceChangeAvailabilityManagement(name, <any>undefined, { urn })
            case "oci:index/osmanagementManagedInstance:OsmanagementManagedInstance":
                return new OsmanagementManagedInstance(name, <any>undefined, { urn })
            case "oci:index/osmanagementManagedInstanceGroup:OsmanagementManagedInstanceGroup":
                return new OsmanagementManagedInstanceGroup(name, <any>undefined, { urn })
            case "oci:index/osmanagementManagedInstanceManagement:OsmanagementManagedInstanceManagement":
                return new OsmanagementManagedInstanceManagement(name, <any>undefined, { urn })
            case "oci:index/osmanagementSoftwareSource:OsmanagementSoftwareSource":
                return new OsmanagementSoftwareSource(name, <any>undefined, { urn })
            case "oci:index/ospGatewayAddressActionVerification:OspGatewayAddressActionVerification":
                return new OspGatewayAddressActionVerification(name, <any>undefined, { urn })
            case "oci:index/ospGatewaySubscription:OspGatewaySubscription":
                return new OspGatewaySubscription(name, <any>undefined, { urn })
            case "oci:index/psqlBackup:PsqlBackup":
                return new PsqlBackup(name, <any>undefined, { urn })
            case "oci:index/psqlConfiguration:PsqlConfiguration":
                return new PsqlConfiguration(name, <any>undefined, { urn })
            case "oci:index/psqlDbSystem:PsqlDbSystem":
                return new PsqlDbSystem(name, <any>undefined, { urn })
            case "oci:index/queueQueue:QueueQueue":
                return new QueueQueue(name, <any>undefined, { urn })
            case "oci:index/recoveryProtectedDatabase:RecoveryProtectedDatabase":
                return new RecoveryProtectedDatabase(name, <any>undefined, { urn })
            case "oci:index/recoveryProtectionPolicy:RecoveryProtectionPolicy":
                return new RecoveryProtectionPolicy(name, <any>undefined, { urn })
            case "oci:index/recoveryRecoveryServiceSubnet:RecoveryRecoveryServiceSubnet":
                return new RecoveryRecoveryServiceSubnet(name, <any>undefined, { urn })
            case "oci:index/redisRedisCluster:RedisRedisCluster":
                return new RedisRedisCluster(name, <any>undefined, { urn })
            case "oci:index/resourceSchedulerSchedule:ResourceSchedulerSchedule":
                return new ResourceSchedulerSchedule(name, <any>undefined, { urn })
            case "oci:index/resourcemanagerPrivateEndpoint:ResourcemanagerPrivateEndpoint":
                return new ResourcemanagerPrivateEndpoint(name, <any>undefined, { urn })
            case "oci:index/schServiceConnector:SchServiceConnector":
                return new SchServiceConnector(name, <any>undefined, { urn })
            case "oci:index/serviceCatalogPrivateApplication:ServiceCatalogPrivateApplication":
                return new ServiceCatalogPrivateApplication(name, <any>undefined, { urn })
            case "oci:index/serviceCatalogServiceCatalog:ServiceCatalogServiceCatalog":
                return new ServiceCatalogServiceCatalog(name, <any>undefined, { urn })
            case "oci:index/serviceCatalogServiceCatalogAssociation:ServiceCatalogServiceCatalogAssociation":
                return new ServiceCatalogServiceCatalogAssociation(name, <any>undefined, { urn })
            case "oci:index/serviceMeshAccessPolicy:ServiceMeshAccessPolicy":
                return new ServiceMeshAccessPolicy(name, <any>undefined, { urn })
            case "oci:index/serviceMeshIngressGateway:ServiceMeshIngressGateway":
                return new ServiceMeshIngressGateway(name, <any>undefined, { urn })
            case "oci:index/serviceMeshIngressGatewayRouteTable:ServiceMeshIngressGatewayRouteTable":
                return new ServiceMeshIngressGatewayRouteTable(name, <any>undefined, { urn })
            case "oci:index/serviceMeshMesh:ServiceMeshMesh":
                return new ServiceMeshMesh(name, <any>undefined, { urn })
            case "oci:index/serviceMeshVirtualDeployment:ServiceMeshVirtualDeployment":
                return new ServiceMeshVirtualDeployment(name, <any>undefined, { urn })
            case "oci:index/serviceMeshVirtualService:ServiceMeshVirtualService":
                return new ServiceMeshVirtualService(name, <any>undefined, { urn })
            case "oci:index/serviceMeshVirtualServiceRouteTable:ServiceMeshVirtualServiceRouteTable":
                return new ServiceMeshVirtualServiceRouteTable(name, <any>undefined, { urn })
            case "oci:index/stackMonitoringBaselineableMetric:StackMonitoringBaselineableMetric":
                return new StackMonitoringBaselineableMetric(name, <any>undefined, { urn })
            case "oci:index/stackMonitoringConfig:StackMonitoringConfig":
                return new StackMonitoringConfig(name, <any>undefined, { urn })
            case "oci:index/stackMonitoringDiscoveryJob:StackMonitoringDiscoveryJob":
                return new StackMonitoringDiscoveryJob(name, <any>undefined, { urn })
            case "oci:index/stackMonitoringMetricExtension:StackMonitoringMetricExtension":
                return new StackMonitoringMetricExtension(name, <any>undefined, { urn })
            case "oci:index/stackMonitoringMetricExtensionMetricExtensionOnGivenResourcesManagement:StackMonitoringMetricExtensionMetricExtensionOnGivenResourcesManagement":
                return new StackMonitoringMetricExtensionMetricExtensionOnGivenResourcesManagement(name, <any>undefined, { urn })
            case "oci:index/stackMonitoringMetricExtensionsTestManagement:StackMonitoringMetricExtensionsTestManagement":
                return new StackMonitoringMetricExtensionsTestManagement(name, <any>undefined, { urn })
            case "oci:index/stackMonitoringMonitoredResource:StackMonitoringMonitoredResource":
                return new StackMonitoringMonitoredResource(name, <any>undefined, { urn })
            case "oci:index/stackMonitoringMonitoredResourceTask:StackMonitoringMonitoredResourceTask":
                return new StackMonitoringMonitoredResourceTask(name, <any>undefined, { urn })
            case "oci:index/stackMonitoringMonitoredResourceType:StackMonitoringMonitoredResourceType":
                return new StackMonitoringMonitoredResourceType(name, <any>undefined, { urn })
            case "oci:index/stackMonitoringMonitoredResourcesAssociateMonitoredResource:StackMonitoringMonitoredResourcesAssociateMonitoredResource":
                return new StackMonitoringMonitoredResourcesAssociateMonitoredResource(name, <any>undefined, { urn })
            case "oci:index/stackMonitoringMonitoredResourcesListMember:StackMonitoringMonitoredResourcesListMember":
                return new StackMonitoringMonitoredResourcesListMember(name, <any>undefined, { urn })
            case "oci:index/stackMonitoringMonitoredResourcesSearch:StackMonitoringMonitoredResourcesSearch":
                return new StackMonitoringMonitoredResourcesSearch(name, <any>undefined, { urn })
            case "oci:index/stackMonitoringMonitoredResourcesSearchAssociation:StackMonitoringMonitoredResourcesSearchAssociation":
                return new StackMonitoringMonitoredResourcesSearchAssociation(name, <any>undefined, { urn })
            case "oci:index/stackMonitoringProcessSet:StackMonitoringProcessSet":
                return new StackMonitoringProcessSet(name, <any>undefined, { urn })
            case "oci:index/streamingConnectHarness:StreamingConnectHarness":
                return new StreamingConnectHarness(name, <any>undefined, { urn })
            case "oci:index/streamingStream:StreamingStream":
                return new StreamingStream(name, <any>undefined, { urn })
            case "oci:index/streamingStreamPool:StreamingStreamPool":
                return new StreamingStreamPool(name, <any>undefined, { urn })
            case "oci:index/usageProxySubscriptionRedeemableUser:UsageProxySubscriptionRedeemableUser":
                return new UsageProxySubscriptionRedeemableUser(name, <any>undefined, { urn })
            case "oci:index/vaultSecret:VaultSecret":
                return new VaultSecret(name, <any>undefined, { urn })
            case "oci:index/vbsInstVbsInstance:VbsInstVbsInstance":
                return new VbsInstVbsInstance(name, <any>undefined, { urn })
            case "oci:index/visualBuilderVbInstance:VisualBuilderVbInstance":
                return new VisualBuilderVbInstance(name, <any>undefined, { urn })
            case "oci:index/vnMonitoringPathAnalysi:VnMonitoringPathAnalysi":
                return new VnMonitoringPathAnalysi(name, <any>undefined, { urn })
            case "oci:index/vnMonitoringPathAnalyzerTest:VnMonitoringPathAnalyzerTest":
                return new VnMonitoringPathAnalyzerTest(name, <any>undefined, { urn })
            case "oci:index/vulnerabilityScanningContainerScanRecipe:VulnerabilityScanningContainerScanRecipe":
                return new VulnerabilityScanningContainerScanRecipe(name, <any>undefined, { urn })
            case "oci:index/vulnerabilityScanningContainerScanTarget:VulnerabilityScanningContainerScanTarget":
                return new VulnerabilityScanningContainerScanTarget(name, <any>undefined, { urn })
            case "oci:index/vulnerabilityScanningHostScanRecipe:VulnerabilityScanningHostScanRecipe":
                return new VulnerabilityScanningHostScanRecipe(name, <any>undefined, { urn })
            case "oci:index/vulnerabilityScanningHostScanTarget:VulnerabilityScanningHostScanTarget":
                return new VulnerabilityScanningHostScanTarget(name, <any>undefined, { urn })
            case "oci:index/waaWebAppAcceleration:WaaWebAppAcceleration":
                return new WaaWebAppAcceleration(name, <any>undefined, { urn })
            case "oci:index/waaWebAppAccelerationPolicy:WaaWebAppAccelerationPolicy":
                return new WaaWebAppAccelerationPolicy(name, <any>undefined, { urn })
            case "oci:index/waasAddressList:WaasAddressList":
                return new WaasAddressList(name, <any>undefined, { urn })
            case "oci:index/waasCertificate:WaasCertificate":
                return new WaasCertificate(name, <any>undefined, { urn })
            case "oci:index/waasCustomProtectionRule:WaasCustomProtectionRule":
                return new WaasCustomProtectionRule(name, <any>undefined, { urn })
            case "oci:index/waasHttpRedirect:WaasHttpRedirect":
                return new WaasHttpRedirect(name, <any>undefined, { urn })
            case "oci:index/waasProtectionRule:WaasProtectionRule":
                return new WaasProtectionRule(name, <any>undefined, { urn })
            case "oci:index/waasPurgeCache:WaasPurgeCache":
                return new WaasPurgeCache(name, <any>undefined, { urn })
            case "oci:index/waasWaasPolicy:WaasWaasPolicy":
                return new WaasWaasPolicy(name, <any>undefined, { urn })
            case "oci:index/wafNetworkAddressList:WafNetworkAddressList":
                return new WafNetworkAddressList(name, <any>undefined, { urn })
            case "oci:index/wafWebAppFirewall:WafWebAppFirewall":
                return new WafWebAppFirewall(name, <any>undefined, { urn })
            case "oci:index/wafWebAppFirewallPolicy:WafWebAppFirewallPolicy":
                return new WafWebAppFirewallPolicy(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("oci", "index/admKnowledgeBase", _module)
pulumi.runtime.registerResourceModule("oci", "index/admRemediationRecipe", _module)
pulumi.runtime.registerResourceModule("oci", "index/admRemediationRun", _module)
pulumi.runtime.registerResourceModule("oci", "index/admVulnerabilityAudit", _module)
pulumi.runtime.registerResourceModule("oci", "index/aiAnomalyDetectionAiPrivateEndpoint", _module)
pulumi.runtime.registerResourceModule("oci", "index/aiAnomalyDetectionDataAsset", _module)
pulumi.runtime.registerResourceModule("oci", "index/aiAnomalyDetectionDetectAnomalyJob", _module)
pulumi.runtime.registerResourceModule("oci", "index/aiAnomalyDetectionModel", _module)
pulumi.runtime.registerResourceModule("oci", "index/aiAnomalyDetectionProject", _module)
pulumi.runtime.registerResourceModule("oci", "index/aiDocumentModel", _module)
pulumi.runtime.registerResourceModule("oci", "index/aiDocumentProcessorJob", _module)
pulumi.runtime.registerResourceModule("oci", "index/aiDocumentProject", _module)
pulumi.runtime.registerResourceModule("oci", "index/aiLanguageEndpoint", _module)
pulumi.runtime.registerResourceModule("oci", "index/aiLanguageModel", _module)
pulumi.runtime.registerResourceModule("oci", "index/aiLanguageProject", _module)
pulumi.runtime.registerResourceModule("oci", "index/aiVisionModel", _module)
pulumi.runtime.registerResourceModule("oci", "index/aiVisionProject", _module)
pulumi.runtime.registerResourceModule("oci", "index/analyticsAnalyticsInstance", _module)
pulumi.runtime.registerResourceModule("oci", "index/analyticsAnalyticsInstancePrivateAccessChannel", _module)
pulumi.runtime.registerResourceModule("oci", "index/analyticsAnalyticsInstanceVanityUrl", _module)
pulumi.runtime.registerResourceModule("oci", "index/announcementsServiceAnnouncementSubscription", _module)
pulumi.runtime.registerResourceModule("oci", "index/announcementsServiceAnnouncementSubscriptionsActionsChangeCompartment", _module)
pulumi.runtime.registerResourceModule("oci", "index/announcementsServiceAnnouncementSubscriptionsFilterGroup", _module)
pulumi.runtime.registerResourceModule("oci", "index/apigatewayApi", _module)
pulumi.runtime.registerResourceModule("oci", "index/apigatewayCertificate", _module)
pulumi.runtime.registerResourceModule("oci", "index/apigatewayDeployment", _module)
pulumi.runtime.registerResourceModule("oci", "index/apigatewayGateway", _module)
pulumi.runtime.registerResourceModule("oci", "index/apigatewaySubscriber", _module)
pulumi.runtime.registerResourceModule("oci", "index/apigatewayUsagePlan", _module)
pulumi.runtime.registerResourceModule("oci", "index/apmApmDomain", _module)
pulumi.runtime.registerResourceModule("oci", "index/apmConfigConfig", _module)
pulumi.runtime.registerResourceModule("oci", "index/apmSyntheticsDedicatedVantagePoint", _module)
pulumi.runtime.registerResourceModule("oci", "index/apmSyntheticsMonitor", _module)
pulumi.runtime.registerResourceModule("oci", "index/apmSyntheticsOnPremiseVantagePoint", _module)
pulumi.runtime.registerResourceModule("oci", "index/apmSyntheticsOnPremiseVantagePointWorker", _module)
pulumi.runtime.registerResourceModule("oci", "index/apmSyntheticsScript", _module)
pulumi.runtime.registerResourceModule("oci", "index/appmgmtControlMonitorPluginManagement", _module)
pulumi.runtime.registerResourceModule("oci", "index/artifactsContainerConfiguration", _module)
pulumi.runtime.registerResourceModule("oci", "index/artifactsContainerImageSignature", _module)
pulumi.runtime.registerResourceModule("oci", "index/artifactsContainerRepository", _module)
pulumi.runtime.registerResourceModule("oci", "index/artifactsGenericArtifact", _module)
pulumi.runtime.registerResourceModule("oci", "index/artifactsRepository", _module)
pulumi.runtime.registerResourceModule("oci", "index/auditConfiguration", _module)
pulumi.runtime.registerResourceModule("oci", "index/autoscalingAutoScalingConfiguration", _module)
pulumi.runtime.registerResourceModule("oci", "index/bastionBastion", _module)
pulumi.runtime.registerResourceModule("oci", "index/bastionSession", _module)
pulumi.runtime.registerResourceModule("oci", "index/bdsAutoScalingConfiguration", _module)
pulumi.runtime.registerResourceModule("oci", "index/bdsBdsInstance", _module)
pulumi.runtime.registerResourceModule("oci", "index/bdsBdsInstanceApiKey", _module)
pulumi.runtime.registerResourceModule("oci", "index/bdsBdsInstanceMetastoreConfig", _module)
pulumi.runtime.registerResourceModule("oci", "index/bdsBdsInstanceOperationCertificateManagementsManagement", _module)
pulumi.runtime.registerResourceModule("oci", "index/bdsBdsInstanceOsPatchAction", _module)
pulumi.runtime.registerResourceModule("oci", "index/bdsBdsInstancePatchAction", _module)
pulumi.runtime.registerResourceModule("oci", "index/blockchainBlockchainPlatform", _module)
pulumi.runtime.registerResourceModule("oci", "index/blockchainOsn", _module)
pulumi.runtime.registerResourceModule("oci", "index/blockchainPeer", _module)
pulumi.runtime.registerResourceModule("oci", "index/budgetAlertRule", _module)
pulumi.runtime.registerResourceModule("oci", "index/budgetBudget", _module)
pulumi.runtime.registerResourceModule("oci", "index/capacityManagementOccAvailabilityCatalog", _module)
pulumi.runtime.registerResourceModule("oci", "index/capacityManagementOccCapacityRequest", _module)
pulumi.runtime.registerResourceModule("oci", "index/certificatesManagementCaBundle", _module)
pulumi.runtime.registerResourceModule("oci", "index/certificatesManagementCertificate", _module)
pulumi.runtime.registerResourceModule("oci", "index/certificatesManagementCertificateAuthority", _module)
pulumi.runtime.registerResourceModule("oci", "index/cloudBridgeAgent", _module)
pulumi.runtime.registerResourceModule("oci", "index/cloudBridgeAgentDependency", _module)
pulumi.runtime.registerResourceModule("oci", "index/cloudBridgeAgentPlugin", _module)
pulumi.runtime.registerResourceModule("oci", "index/cloudBridgeAsset", _module)
pulumi.runtime.registerResourceModule("oci", "index/cloudBridgeAssetSource", _module)
pulumi.runtime.registerResourceModule("oci", "index/cloudBridgeDiscoverySchedule", _module)
pulumi.runtime.registerResourceModule("oci", "index/cloudBridgeEnvironment", _module)
pulumi.runtime.registerResourceModule("oci", "index/cloudBridgeInventory", _module)
pulumi.runtime.registerResourceModule("oci", "index/cloudGuardAdhocQuery", _module)
pulumi.runtime.registerResourceModule("oci", "index/cloudGuardCloudGuardConfiguration", _module)
pulumi.runtime.registerResourceModule("oci", "index/cloudGuardDataMaskRule", _module)
pulumi.runtime.registerResourceModule("oci", "index/cloudGuardDataSource", _module)
pulumi.runtime.registerResourceModule("oci", "index/cloudGuardDetectorRecipe", _module)
pulumi.runtime.registerResourceModule("oci", "index/cloudGuardManagedList", _module)
pulumi.runtime.registerResourceModule("oci", "index/cloudGuardResponderRecipe", _module)
pulumi.runtime.registerResourceModule("oci", "index/cloudGuardSavedQuery", _module)
pulumi.runtime.registerResourceModule("oci", "index/cloudGuardSecurityRecipe", _module)
pulumi.runtime.registerResourceModule("oci", "index/cloudGuardSecurityZone", _module)
pulumi.runtime.registerResourceModule("oci", "index/cloudGuardTarget", _module)
pulumi.runtime.registerResourceModule("oci", "index/cloudGuardWlpAgent", _module)
pulumi.runtime.registerResourceModule("oci", "index/cloudMigrationsMigration", _module)
pulumi.runtime.registerResourceModule("oci", "index/cloudMigrationsMigrationAsset", _module)
pulumi.runtime.registerResourceModule("oci", "index/cloudMigrationsMigrationPlan", _module)
pulumi.runtime.registerResourceModule("oci", "index/cloudMigrationsReplicationSchedule", _module)
pulumi.runtime.registerResourceModule("oci", "index/cloudMigrationsTargetAsset", _module)
pulumi.runtime.registerResourceModule("oci", "index/clusterPlacementGroupsClusterPlacementGroup", _module)
pulumi.runtime.registerResourceModule("oci", "index/computeCloudAtCustomerCccInfrastructure", _module)
pulumi.runtime.registerResourceModule("oci", "index/computeCloudAtCustomerCccUpgradeSchedule", _module)
pulumi.runtime.registerResourceModule("oci", "index/containerInstancesContainerInstance", _module)
pulumi.runtime.registerResourceModule("oci", "index/containerengineAddon", _module)
pulumi.runtime.registerResourceModule("oci", "index/containerengineCluster", _module)
pulumi.runtime.registerResourceModule("oci", "index/containerengineClusterCompleteCredentialRotationManagement", _module)
pulumi.runtime.registerResourceModule("oci", "index/containerengineClusterStartCredentialRotationManagement", _module)
pulumi.runtime.registerResourceModule("oci", "index/containerengineClusterWorkloadMapping", _module)
pulumi.runtime.registerResourceModule("oci", "index/containerengineNodePool", _module)
pulumi.runtime.registerResourceModule("oci", "index/containerengineVirtualNodePool", _module)
pulumi.runtime.registerResourceModule("oci", "index/coreAppCatalogListingResourceVersionAgreement", _module)
pulumi.runtime.registerResourceModule("oci", "index/coreAppCatalogSubscription", _module)
pulumi.runtime.registerResourceModule("oci", "index/coreBootVolume", _module)
pulumi.runtime.registerResourceModule("oci", "index/coreBootVolumeBackup", _module)
pulumi.runtime.registerResourceModule("oci", "index/coreCaptureFilter", _module)
pulumi.runtime.registerResourceModule("oci", "index/coreClusterNetwork", _module)
pulumi.runtime.registerResourceModule("oci", "index/coreComputeCapacityReport", _module)
pulumi.runtime.registerResourceModule("oci", "index/coreComputeCapacityReservation", _module)
pulumi.runtime.registerResourceModule("oci", "index/coreComputeCapacityTopology", _module)
pulumi.runtime.registerResourceModule("oci", "index/coreComputeCluster", _module)
pulumi.runtime.registerResourceModule("oci", "index/coreComputeImageCapabilitySchema", _module)
pulumi.runtime.registerResourceModule("oci", "index/coreConsoleHistory", _module)
pulumi.runtime.registerResourceModule("oci", "index/coreCpe", _module)
pulumi.runtime.registerResourceModule("oci", "index/coreCrossConnect", _module)
pulumi.runtime.registerResourceModule("oci", "index/coreCrossConnectGroup", _module)
pulumi.runtime.registerResourceModule("oci", "index/coreDedicatedVmHost", _module)
pulumi.runtime.registerResourceModule("oci", "index/coreDefaultDhcpOptions", _module)
pulumi.runtime.registerResourceModule("oci", "index/coreDefaultRouteTable", _module)
pulumi.runtime.registerResourceModule("oci", "index/coreDefaultSecurityList", _module)
pulumi.runtime.registerResourceModule("oci", "index/coreDhcpOptions", _module)
pulumi.runtime.registerResourceModule("oci", "index/coreDrg", _module)
pulumi.runtime.registerResourceModule("oci", "index/coreDrgAttachment", _module)
pulumi.runtime.registerResourceModule("oci", "index/coreDrgAttachmentManagement", _module)
pulumi.runtime.registerResourceModule("oci", "index/coreDrgAttachmentsList", _module)
pulumi.runtime.registerResourceModule("oci", "index/coreDrgRouteDistribution", _module)
pulumi.runtime.registerResourceModule("oci", "index/coreDrgRouteDistributionStatement", _module)
pulumi.runtime.registerResourceModule("oci", "index/coreDrgRouteTable", _module)
pulumi.runtime.registerResourceModule("oci", "index/coreDrgRouteTableRouteRule", _module)
pulumi.runtime.registerResourceModule("oci", "index/coreImage", _module)
pulumi.runtime.registerResourceModule("oci", "index/coreInstance", _module)
pulumi.runtime.registerResourceModule("oci", "index/coreInstanceConfiguration", _module)
pulumi.runtime.registerResourceModule("oci", "index/coreInstanceConsoleConnection", _module)
pulumi.runtime.registerResourceModule("oci", "index/coreInstanceMaintenanceEvent", _module)
pulumi.runtime.registerResourceModule("oci", "index/coreInstancePool", _module)
pulumi.runtime.registerResourceModule("oci", "index/coreInstancePoolInstance", _module)
pulumi.runtime.registerResourceModule("oci", "index/coreInternetGateway", _module)
pulumi.runtime.registerResourceModule("oci", "index/coreIpsec", _module)
pulumi.runtime.registerResourceModule("oci", "index/coreIpsecConnectionTunnelManagement", _module)
pulumi.runtime.registerResourceModule("oci", "index/coreIpv6", _module)
pulumi.runtime.registerResourceModule("oci", "index/coreListingResourceVersionAgreement", _module)
pulumi.runtime.registerResourceModule("oci", "index/coreLocalPeeringGateway", _module)
pulumi.runtime.registerResourceModule("oci", "index/coreNatGateway", _module)
pulumi.runtime.registerResourceModule("oci", "index/coreNetworkSecurityGroup", _module)
pulumi.runtime.registerResourceModule("oci", "index/coreNetworkSecurityGroupSecurityRule", _module)
pulumi.runtime.registerResourceModule("oci", "index/corePrivateIp", _module)
pulumi.runtime.registerResourceModule("oci", "index/corePublicIp", _module)
pulumi.runtime.registerResourceModule("oci", "index/corePublicIpPool", _module)
pulumi.runtime.registerResourceModule("oci", "index/corePublicIpPoolCapacity", _module)
pulumi.runtime.registerResourceModule("oci", "index/coreRemotePeeringConnection", _module)
pulumi.runtime.registerResourceModule("oci", "index/coreRouteTable", _module)
pulumi.runtime.registerResourceModule("oci", "index/coreRouteTableAttachment", _module)
pulumi.runtime.registerResourceModule("oci", "index/coreSecurityList", _module)
pulumi.runtime.registerResourceModule("oci", "index/coreServiceGateway", _module)
pulumi.runtime.registerResourceModule("oci", "index/coreShapeManagement", _module)
pulumi.runtime.registerResourceModule("oci", "index/coreSubnet", _module)
pulumi.runtime.registerResourceModule("oci", "index/coreVcn", _module)
pulumi.runtime.registerResourceModule("oci", "index/coreVirtualCircuit", _module)
pulumi.runtime.registerResourceModule("oci", "index/coreVirtualNetwork", _module)
pulumi.runtime.registerResourceModule("oci", "index/coreVlan", _module)
pulumi.runtime.registerResourceModule("oci", "index/coreVnicAttachment", _module)
pulumi.runtime.registerResourceModule("oci", "index/coreVolume", _module)
pulumi.runtime.registerResourceModule("oci", "index/coreVolumeAttachment", _module)
pulumi.runtime.registerResourceModule("oci", "index/coreVolumeBackup", _module)
pulumi.runtime.registerResourceModule("oci", "index/coreVolumeBackupPolicy", _module)
pulumi.runtime.registerResourceModule("oci", "index/coreVolumeBackupPolicyAssignment", _module)
pulumi.runtime.registerResourceModule("oci", "index/coreVolumeGroup", _module)
pulumi.runtime.registerResourceModule("oci", "index/coreVolumeGroupBackup", _module)
pulumi.runtime.registerResourceModule("oci", "index/coreVtap", _module)
pulumi.runtime.registerResourceModule("oci", "index/dataLabelingServiceDataset", _module)
pulumi.runtime.registerResourceModule("oci", "index/dataSafeAddSdmColumns", _module)
pulumi.runtime.registerResourceModule("oci", "index/dataSafeAlert", _module)
pulumi.runtime.registerResourceModule("oci", "index/dataSafeAlertPolicy", _module)
pulumi.runtime.registerResourceModule("oci", "index/dataSafeAlertPolicyRule", _module)
pulumi.runtime.registerResourceModule("oci", "index/dataSafeAuditArchiveRetrieval", _module)
pulumi.runtime.registerResourceModule("oci", "index/dataSafeAuditPolicy", _module)
pulumi.runtime.registerResourceModule("oci", "index/dataSafeAuditPolicyManagement", _module)
pulumi.runtime.registerResourceModule("oci", "index/dataSafeAuditProfile", _module)
pulumi.runtime.registerResourceModule("oci", "index/dataSafeAuditProfileManagement", _module)
pulumi.runtime.registerResourceModule("oci", "index/dataSafeAuditTrail", _module)
pulumi.runtime.registerResourceModule("oci", "index/dataSafeAuditTrailManagement", _module)
pulumi.runtime.registerResourceModule("oci", "index/dataSafeCalculateAuditVolumeAvailable", _module)
pulumi.runtime.registerResourceModule("oci", "index/dataSafeCalculateAuditVolumeCollected", _module)
pulumi.runtime.registerResourceModule("oci", "index/dataSafeCompareSecurityAssessment", _module)
pulumi.runtime.registerResourceModule("oci", "index/dataSafeCompareUserAssessment", _module)
pulumi.runtime.registerResourceModule("oci", "index/dataSafeDataSafeConfiguration", _module)
pulumi.runtime.registerResourceModule("oci", "index/dataSafeDataSafePrivateEndpoint", _module)
pulumi.runtime.registerResourceModule("oci", "index/dataSafeDatabaseSecurityConfig", _module)
pulumi.runtime.registerResourceModule("oci", "index/dataSafeDatabaseSecurityConfigManagement", _module)
pulumi.runtime.registerResourceModule("oci", "index/dataSafeDiscoveryJob", _module)
pulumi.runtime.registerResourceModule("oci", "index/dataSafeDiscoveryJobsResult", _module)
pulumi.runtime.registerResourceModule("oci", "index/dataSafeLibraryMaskingFormat", _module)
pulumi.runtime.registerResourceModule("oci", "index/dataSafeMaskData", _module)
pulumi.runtime.registerResourceModule("oci", "index/dataSafeMaskingPoliciesApplyDifferenceToMaskingColumns", _module)
pulumi.runtime.registerResourceModule("oci", "index/dataSafeMaskingPoliciesMaskingColumn", _module)
pulumi.runtime.registerResourceModule("oci", "index/dataSafeMaskingPolicy", _module)
pulumi.runtime.registerResourceModule("oci", "index/dataSafeMaskingPolicyHealthReportManagement", _module)
pulumi.runtime.registerResourceModule("oci", "index/dataSafeMaskingReportManagement", _module)
pulumi.runtime.registerResourceModule("oci", "index/dataSafeOnPremConnector", _module)
pulumi.runtime.registerResourceModule("oci", "index/dataSafeReport", _module)
pulumi.runtime.registerResourceModule("oci", "index/dataSafeReportDefinition", _module)
pulumi.runtime.registerResourceModule("oci", "index/dataSafeSdmMaskingPolicyDifference", _module)
pulumi.runtime.registerResourceModule("oci", "index/dataSafeSecurityAssessment", _module)
pulumi.runtime.registerResourceModule("oci", "index/dataSafeSecurityPolicy", _module)
pulumi.runtime.registerResourceModule("oci", "index/dataSafeSecurityPolicyDeployment", _module)
pulumi.runtime.registerResourceModule("oci", "index/dataSafeSecurityPolicyDeploymentManagement", _module)
pulumi.runtime.registerResourceModule("oci", "index/dataSafeSecurityPolicyManagement", _module)
pulumi.runtime.registerResourceModule("oci", "index/dataSafeSensitiveDataModel", _module)
pulumi.runtime.registerResourceModule("oci", "index/dataSafeSensitiveDataModelsApplyDiscoveryJobResults", _module)
pulumi.runtime.registerResourceModule("oci", "index/dataSafeSensitiveDataModelsSensitiveColumn", _module)
pulumi.runtime.registerResourceModule("oci", "index/dataSafeSensitiveType", _module)
pulumi.runtime.registerResourceModule("oci", "index/dataSafeSetSecurityAssessmentBaseline", _module)
pulumi.runtime.registerResourceModule("oci", "index/dataSafeSetSecurityAssessmentBaselineManagement", _module)
pulumi.runtime.registerResourceModule("oci", "index/dataSafeSetUserAssessmentBaseline", _module)
pulumi.runtime.registerResourceModule("oci", "index/dataSafeSetUserAssessmentBaselineManagement", _module)
pulumi.runtime.registerResourceModule("oci", "index/dataSafeSqlCollection", _module)
pulumi.runtime.registerResourceModule("oci", "index/dataSafeSqlFirewallPolicy", _module)
pulumi.runtime.registerResourceModule("oci", "index/dataSafeSqlFirewallPolicyManagement", _module)
pulumi.runtime.registerResourceModule("oci", "index/dataSafeTargetAlertPolicyAssociation", _module)
pulumi.runtime.registerResourceModule("oci", "index/dataSafeTargetDatabase", _module)
pulumi.runtime.registerResourceModule("oci", "index/dataSafeTargetDatabasePeerTargetDatabase", _module)
pulumi.runtime.registerResourceModule("oci", "index/dataSafeUnsetSecurityAssessmentBaseline", _module)
pulumi.runtime.registerResourceModule("oci", "index/dataSafeUnsetSecurityAssessmentBaselineManagement", _module)
pulumi.runtime.registerResourceModule("oci", "index/dataSafeUnsetUserAssessmentBaseline", _module)
pulumi.runtime.registerResourceModule("oci", "index/dataSafeUnsetUserAssessmentBaselineManagement", _module)
pulumi.runtime.registerResourceModule("oci", "index/dataSafeUserAssessment", _module)
pulumi.runtime.registerResourceModule("oci", "index/databaseApplicationVip", _module)
pulumi.runtime.registerResourceModule("oci", "index/databaseAutonomousContainerDatabase", _module)
pulumi.runtime.registerResourceModule("oci", "index/databaseAutonomousContainerDatabaseDataguardAssociation", _module)
pulumi.runtime.registerResourceModule("oci", "index/databaseAutonomousContainerDatabaseDataguardAssociationOperation", _module)
pulumi.runtime.registerResourceModule("oci", "index/databaseAutonomousContainerDatabaseDataguardRoleChange", _module)
pulumi.runtime.registerResourceModule("oci", "index/databaseAutonomousDatabase", _module)
pulumi.runtime.registerResourceModule("oci", "index/databaseAutonomousDatabaseBackup", _module)
pulumi.runtime.registerResourceModule("oci", "index/databaseAutonomousDatabaseInstanceWalletManagement", _module)
pulumi.runtime.registerResourceModule("oci", "index/databaseAutonomousDatabaseRegionalWalletManagement", _module)
pulumi.runtime.registerResourceModule("oci", "index/databaseAutonomousDatabaseSaasAdminUser", _module)
pulumi.runtime.registerResourceModule("oci", "index/databaseAutonomousDatabaseSoftwareImage", _module)
pulumi.runtime.registerResourceModule("oci", "index/databaseAutonomousDatabaseWallet", _module)
pulumi.runtime.registerResourceModule("oci", "index/databaseAutonomousExadataInfrastructure", _module)
pulumi.runtime.registerResourceModule("oci", "index/databaseAutonomousVmCluster", _module)
pulumi.runtime.registerResourceModule("oci", "index/databaseAutonomousVmClusterOrdsCertificateManagement", _module)
pulumi.runtime.registerResourceModule("oci", "index/databaseAutonomousVmClusterSslCertificateManagement", _module)
pulumi.runtime.registerResourceModule("oci", "index/databaseBackup", _module)
pulumi.runtime.registerResourceModule("oci", "index/databaseBackupCancelManagement", _module)
pulumi.runtime.registerResourceModule("oci", "index/databaseBackupDestination", _module)
pulumi.runtime.registerResourceModule("oci", "index/databaseCloudAutonomousVmCluster", _module)
pulumi.runtime.registerResourceModule("oci", "index/databaseCloudDatabaseManagement", _module)
pulumi.runtime.registerResourceModule("oci", "index/databaseCloudExadataInfrastructure", _module)
pulumi.runtime.registerResourceModule("oci", "index/databaseCloudVmCluster", _module)
pulumi.runtime.registerResourceModule("oci", "index/databaseCloudVmClusterIormConfig", _module)
pulumi.runtime.registerResourceModule("oci", "index/databaseDataGuardAssociation", _module)
pulumi.runtime.registerResourceModule("oci", "index/databaseDatabase", _module)
pulumi.runtime.registerResourceModule("oci", "index/databaseDatabaseSoftwareImage", _module)
pulumi.runtime.registerResourceModule("oci", "index/databaseDatabaseUpgrade", _module)
pulumi.runtime.registerResourceModule("oci", "index/databaseDbHome", _module)
pulumi.runtime.registerResourceModule("oci", "index/databaseDbNode", _module)
pulumi.runtime.registerResourceModule("oci", "index/databaseDbNodeConsoleConnection", _module)
pulumi.runtime.registerResourceModule("oci", "index/databaseDbNodeConsoleHistory", _module)
pulumi.runtime.registerResourceModule("oci", "index/databaseDbSystem", _module)
pulumi.runtime.registerResourceModule("oci", "index/databaseDbSystemsUpgrade", _module)
pulumi.runtime.registerResourceModule("oci", "index/databaseExadataInfrastructure", _module)
pulumi.runtime.registerResourceModule("oci", "index/databaseExadataInfrastructureCompute", _module)
pulumi.runtime.registerResourceModule("oci", "index/databaseExadataInfrastructureStorage", _module)
pulumi.runtime.registerResourceModule("oci", "index/databaseExadataIormConfig", _module)
pulumi.runtime.registerResourceModule("oci", "index/databaseExadbVmCluster", _module)
pulumi.runtime.registerResourceModule("oci", "index/databaseExascaleDbStorageVault", _module)
pulumi.runtime.registerResourceModule("oci", "index/databaseExternalContainerDatabase", _module)
pulumi.runtime.registerResourceModule("oci", "index/databaseExternalContainerDatabaseManagement", _module)
pulumi.runtime.registerResourceModule("oci", "index/databaseExternalDatabaseConnector", _module)
pulumi.runtime.registerResourceModule("oci", "index/databaseExternalNonContainerDatabase", _module)
pulumi.runtime.registerResourceModule("oci", "index/databaseExternalNonContainerDatabaseManagement", _module)
pulumi.runtime.registerResourceModule("oci", "index/databaseExternalNonContainerDatabaseOperationsInsightsManagement", _module)
pulumi.runtime.registerResourceModule("oci", "index/databaseExternalPluggableDatabase", _module)
pulumi.runtime.registerResourceModule("oci", "index/databaseExternalPluggableDatabaseManagement", _module)
pulumi.runtime.registerResourceModule("oci", "index/databaseExternalPluggableDatabaseOperationsInsightsManagement", _module)
pulumi.runtime.registerResourceModule("oci", "index/databaseExternalcontainerdatabasesStackMonitoring", _module)
pulumi.runtime.registerResourceModule("oci", "index/databaseExternalnoncontainerdatabasesStackMonitoring", _module)
pulumi.runtime.registerResourceModule("oci", "index/databaseExternalpluggabledatabasesStackMonitoring", _module)
pulumi.runtime.registerResourceModule("oci", "index/databaseKeyStore", _module)
pulumi.runtime.registerResourceModule("oci", "index/databaseMaintenanceRun", _module)
pulumi.runtime.registerResourceModule("oci", "index/databaseManagementAutonomousDatabaseAutonomousDatabaseDbmFeaturesManagement", _module)
pulumi.runtime.registerResourceModule("oci", "index/databaseManagementDatabaseDbmFeaturesManagement", _module)
pulumi.runtime.registerResourceModule("oci", "index/databaseManagementDbManagementPrivateEndpoint", _module)
pulumi.runtime.registerResourceModule("oci", "index/databaseManagementExternalAsm", _module)
pulumi.runtime.registerResourceModule("oci", "index/databaseManagementExternalAsmInstance", _module)
pulumi.runtime.registerResourceModule("oci", "index/databaseManagementExternalCluster", _module)
pulumi.runtime.registerResourceModule("oci", "index/databaseManagementExternalClusterInstance", _module)
pulumi.runtime.registerResourceModule("oci", "index/databaseManagementExternalDbHome", _module)
pulumi.runtime.registerResourceModule("oci", "index/databaseManagementExternalDbNode", _module)
pulumi.runtime.registerResourceModule("oci", "index/databaseManagementExternalDbSystem", _module)
pulumi.runtime.registerResourceModule("oci", "index/databaseManagementExternalDbSystemConnector", _module)
pulumi.runtime.registerResourceModule("oci", "index/databaseManagementExternalDbSystemDatabaseManagementsManagement", _module)
pulumi.runtime.registerResourceModule("oci", "index/databaseManagementExternalDbSystemDiscovery", _module)
pulumi.runtime.registerResourceModule("oci", "index/databaseManagementExternalDbSystemStackMonitoringsManagement", _module)
pulumi.runtime.registerResourceModule("oci", "index/databaseManagementExternalExadataInfrastructure", _module)
pulumi.runtime.registerResourceModule("oci", "index/databaseManagementExternalExadataInfrastructureExadataManagement", _module)
pulumi.runtime.registerResourceModule("oci", "index/databaseManagementExternalExadataStorageConnector", _module)
pulumi.runtime.registerResourceModule("oci", "index/databaseManagementExternalExadataStorageGrid", _module)
pulumi.runtime.registerResourceModule("oci", "index/databaseManagementExternalExadataStorageServer", _module)
pulumi.runtime.registerResourceModule("oci", "index/databaseManagementExternalListener", _module)
pulumi.runtime.registerResourceModule("oci", "index/databaseManagementExternalcontainerdatabaseExternalContainerDbmFeaturesManagement", _module)
pulumi.runtime.registerResourceModule("oci", "index/databaseManagementExternalnoncontainerdatabaseExternalNonContainerDbmFeaturesManagement", _module)
pulumi.runtime.registerResourceModule("oci", "index/databaseManagementExternalpluggabledatabaseExternalPluggableDbmFeaturesManagement", _module)
pulumi.runtime.registerResourceModule("oci", "index/databaseManagementManagedDatabase", _module)
pulumi.runtime.registerResourceModule("oci", "index/databaseManagementManagedDatabaseGroup", _module)
pulumi.runtime.registerResourceModule("oci", "index/databaseManagementManagedDatabasesChangeDatabaseParameter", _module)
pulumi.runtime.registerResourceModule("oci", "index/databaseManagementManagedDatabasesResetDatabaseParameter", _module)
pulumi.runtime.registerResourceModule("oci", "index/databaseManagementNamedCredential", _module)
pulumi.runtime.registerResourceModule("oci", "index/databaseManagementPluggabledatabasePluggableDatabaseDbmFeaturesManagement", _module)
pulumi.runtime.registerResourceModule("oci", "index/databaseMigration", _module)
pulumi.runtime.registerResourceModule("oci", "index/databaseMigrationConnection", _module)
pulumi.runtime.registerResourceModule("oci", "index/databaseMigrationJob", _module)
pulumi.runtime.registerResourceModule("oci", "index/databaseMigrationMigration", _module)
pulumi.runtime.registerResourceModule("oci", "index/databaseOneoffPatch", _module)
pulumi.runtime.registerResourceModule("oci", "index/databasePluggableDatabase", _module)
pulumi.runtime.registerResourceModule("oci", "index/databasePluggableDatabasePluggabledatabasemanagementsManagement", _module)
pulumi.runtime.registerResourceModule("oci", "index/databasePluggableDatabasesLocalClone", _module)
pulumi.runtime.registerResourceModule("oci", "index/databasePluggableDatabasesRemoteClone", _module)
pulumi.runtime.registerResourceModule("oci", "index/databaseToolsDatabaseToolsConnection", _module)
pulumi.runtime.registerResourceModule("oci", "index/databaseToolsDatabaseToolsPrivateEndpoint", _module)
pulumi.runtime.registerResourceModule("oci", "index/databaseVmCluster", _module)
pulumi.runtime.registerResourceModule("oci", "index/databaseVmClusterAddVirtualMachine", _module)
pulumi.runtime.registerResourceModule("oci", "index/databaseVmClusterNetwork", _module)
pulumi.runtime.registerResourceModule("oci", "index/databaseVmClusterRemoveVirtualMachine", _module)
pulumi.runtime.registerResourceModule("oci", "index/datacatalogCatalog", _module)
pulumi.runtime.registerResourceModule("oci", "index/datacatalogCatalogPrivateEndpoint", _module)
pulumi.runtime.registerResourceModule("oci", "index/datacatalogConnection", _module)
pulumi.runtime.registerResourceModule("oci", "index/datacatalogDataAsset", _module)
pulumi.runtime.registerResourceModule("oci", "index/datacatalogMetastore", _module)
pulumi.runtime.registerResourceModule("oci", "index/dataflowApplication", _module)
pulumi.runtime.registerResourceModule("oci", "index/dataflowInvokeRun", _module)
pulumi.runtime.registerResourceModule("oci", "index/dataflowPool", _module)
pulumi.runtime.registerResourceModule("oci", "index/dataflowPrivateEndpoint", _module)
pulumi.runtime.registerResourceModule("oci", "index/dataflowRunStatement", _module)
pulumi.runtime.registerResourceModule("oci", "index/dataflowSqlEndpoint", _module)
pulumi.runtime.registerResourceModule("oci", "index/dataintegrationWorkspace", _module)
pulumi.runtime.registerResourceModule("oci", "index/dataintegrationWorkspaceApplication", _module)
pulumi.runtime.registerResourceModule("oci", "index/dataintegrationWorkspaceApplicationPatch", _module)
pulumi.runtime.registerResourceModule("oci", "index/dataintegrationWorkspaceApplicationSchedule", _module)
pulumi.runtime.registerResourceModule("oci", "index/dataintegrationWorkspaceApplicationTaskSchedule", _module)
pulumi.runtime.registerResourceModule("oci", "index/dataintegrationWorkspaceExportRequest", _module)
pulumi.runtime.registerResourceModule("oci", "index/dataintegrationWorkspaceFolder", _module)
pulumi.runtime.registerResourceModule("oci", "index/dataintegrationWorkspaceImportRequest", _module)
pulumi.runtime.registerResourceModule("oci", "index/dataintegrationWorkspaceProject", _module)
pulumi.runtime.registerResourceModule("oci", "index/dataintegrationWorkspaceTask", _module)
pulumi.runtime.registerResourceModule("oci", "index/datascienceJob", _module)
pulumi.runtime.registerResourceModule("oci", "index/datascienceJobRun", _module)
pulumi.runtime.registerResourceModule("oci", "index/datascienceModel", _module)
pulumi.runtime.registerResourceModule("oci", "index/datascienceModelArtifactExport", _module)
pulumi.runtime.registerResourceModule("oci", "index/datascienceModelArtifactImport", _module)
pulumi.runtime.registerResourceModule("oci", "index/datascienceModelDeployment", _module)
pulumi.runtime.registerResourceModule("oci", "index/datascienceModelProvenance", _module)
pulumi.runtime.registerResourceModule("oci", "index/datascienceModelVersionSet", _module)
pulumi.runtime.registerResourceModule("oci", "index/datascienceNotebookSession", _module)
pulumi.runtime.registerResourceModule("oci", "index/datasciencePipeline", _module)
pulumi.runtime.registerResourceModule("oci", "index/datasciencePipelineRun", _module)
pulumi.runtime.registerResourceModule("oci", "index/datasciencePrivateEndpoint", _module)
pulumi.runtime.registerResourceModule("oci", "index/datascienceProject", _module)
pulumi.runtime.registerResourceModule("oci", "index/delegateAccessControlDelegationControl", _module)
pulumi.runtime.registerResourceModule("oci", "index/delegateAccessControlDelegationSubscription", _module)
pulumi.runtime.registerResourceModule("oci", "index/demandSignalOccDemandSignal", _module)
pulumi.runtime.registerResourceModule("oci", "index/desktopsDesktopPool", _module)
pulumi.runtime.registerResourceModule("oci", "index/devopsBuildPipeline", _module)
pulumi.runtime.registerResourceModule("oci", "index/devopsBuildPipelineStage", _module)
pulumi.runtime.registerResourceModule("oci", "index/devopsBuildRun", _module)
pulumi.runtime.registerResourceModule("oci", "index/devopsConnection", _module)
pulumi.runtime.registerResourceModule("oci", "index/devopsDeployArtifact", _module)
pulumi.runtime.registerResourceModule("oci", "index/devopsDeployEnvironment", _module)
pulumi.runtime.registerResourceModule("oci", "index/devopsDeployPipeline", _module)
pulumi.runtime.registerResourceModule("oci", "index/devopsDeployStage", _module)
pulumi.runtime.registerResourceModule("oci", "index/devopsDeployment", _module)
pulumi.runtime.registerResourceModule("oci", "index/devopsProject", _module)
pulumi.runtime.registerResourceModule("oci", "index/devopsProjectRepositorySetting", _module)
pulumi.runtime.registerResourceModule("oci", "index/devopsRepository", _module)
pulumi.runtime.registerResourceModule("oci", "index/devopsRepositoryMirror", _module)
pulumi.runtime.registerResourceModule("oci", "index/devopsRepositoryProtectedBranchManagement", _module)
pulumi.runtime.registerResourceModule("oci", "index/devopsRepositoryRef", _module)
pulumi.runtime.registerResourceModule("oci", "index/devopsRepositorySetting", _module)
pulumi.runtime.registerResourceModule("oci", "index/devopsTrigger", _module)
pulumi.runtime.registerResourceModule("oci", "index/disasterRecoveryDrPlan", _module)
pulumi.runtime.registerResourceModule("oci", "index/disasterRecoveryDrPlanExecution", _module)
pulumi.runtime.registerResourceModule("oci", "index/disasterRecoveryDrProtectionGroup", _module)
pulumi.runtime.registerResourceModule("oci", "index/dnsActionCreateZoneFromZoneFile", _module)
pulumi.runtime.registerResourceModule("oci", "index/dnsRecord", _module)
pulumi.runtime.registerResourceModule("oci", "index/dnsResolver", _module)
pulumi.runtime.registerResourceModule("oci", "index/dnsResolverEndpoint", _module)
pulumi.runtime.registerResourceModule("oci", "index/dnsRrset", _module)
pulumi.runtime.registerResourceModule("oci", "index/dnsSteeringPolicy", _module)
pulumi.runtime.registerResourceModule("oci", "index/dnsSteeringPolicyAttachment", _module)
pulumi.runtime.registerResourceModule("oci", "index/dnsTsigKey", _module)
pulumi.runtime.registerResourceModule("oci", "index/dnsView", _module)
pulumi.runtime.registerResourceModule("oci", "index/dnsZone", _module)
pulumi.runtime.registerResourceModule("oci", "index/emailDkim", _module)
pulumi.runtime.registerResourceModule("oci", "index/emailEmailDomain", _module)
pulumi.runtime.registerResourceModule("oci", "index/emailEmailReturnPath", _module)
pulumi.runtime.registerResourceModule("oci", "index/emailSender", _module)
pulumi.runtime.registerResourceModule("oci", "index/emailSuppression", _module)
pulumi.runtime.registerResourceModule("oci", "index/eventsRule", _module)
pulumi.runtime.registerResourceModule("oci", "index/fileStorageExport", _module)
pulumi.runtime.registerResourceModule("oci", "index/fileStorageExportSet", _module)
pulumi.runtime.registerResourceModule("oci", "index/fileStorageFileSystem", _module)
pulumi.runtime.registerResourceModule("oci", "index/fileStorageFilesystemSnapshotPolicy", _module)
pulumi.runtime.registerResourceModule("oci", "index/fileStorageMountTarget", _module)
pulumi.runtime.registerResourceModule("oci", "index/fileStorageOutboundConnector", _module)
pulumi.runtime.registerResourceModule("oci", "index/fileStorageReplication", _module)
pulumi.runtime.registerResourceModule("oci", "index/fileStorageSnapshot", _module)
pulumi.runtime.registerResourceModule("oci", "index/functionsApplication", _module)
pulumi.runtime.registerResourceModule("oci", "index/functionsFunction", _module)
pulumi.runtime.registerResourceModule("oci", "index/functionsInvokeFunction", _module)
pulumi.runtime.registerResourceModule("oci", "index/fusionAppsFusionEnvironment", _module)
pulumi.runtime.registerResourceModule("oci", "index/fusionAppsFusionEnvironmentAdminUser", _module)
pulumi.runtime.registerResourceModule("oci", "index/fusionAppsFusionEnvironmentDataMaskingActivity", _module)
pulumi.runtime.registerResourceModule("oci", "index/fusionAppsFusionEnvironmentFamily", _module)
pulumi.runtime.registerResourceModule("oci", "index/fusionAppsFusionEnvironmentRefreshActivity", _module)
pulumi.runtime.registerResourceModule("oci", "index/fusionAppsFusionEnvironmentServiceAttachment", _module)
pulumi.runtime.registerResourceModule("oci", "index/generativeAiDedicatedAiCluster", _module)
pulumi.runtime.registerResourceModule("oci", "index/generativeAiEndpoint", _module)
pulumi.runtime.registerResourceModule("oci", "index/generativeAiModel", _module)
pulumi.runtime.registerResourceModule("oci", "index/genericArtifactsContentArtifactByPath", _module)
pulumi.runtime.registerResourceModule("oci", "index/goldenGateConnection", _module)
pulumi.runtime.registerResourceModule("oci", "index/goldenGateConnectionAssignment", _module)
pulumi.runtime.registerResourceModule("oci", "index/goldenGateDatabaseRegistration", _module)
pulumi.runtime.registerResourceModule("oci", "index/goldenGateDeployment", _module)
pulumi.runtime.registerResourceModule("oci", "index/goldenGateDeploymentBackup", _module)
pulumi.runtime.registerResourceModule("oci", "index/goldenGateDeploymentCertificate", _module)
pulumi.runtime.registerResourceModule("oci", "index/healthChecksHttpMonitor", _module)
pulumi.runtime.registerResourceModule("oci", "index/healthChecksHttpProbe", _module)
pulumi.runtime.registerResourceModule("oci", "index/healthChecksPingMonitor", _module)
pulumi.runtime.registerResourceModule("oci", "index/healthChecksPingProbe", _module)
pulumi.runtime.registerResourceModule("oci", "index/identityApiKey", _module)
pulumi.runtime.registerResourceModule("oci", "index/identityAuthToken", _module)
pulumi.runtime.registerResourceModule("oci", "index/identityAuthenticationPolicy", _module)
pulumi.runtime.registerResourceModule("oci", "index/identityCompartment", _module)
pulumi.runtime.registerResourceModule("oci", "index/identityCustomerSecretKey", _module)
pulumi.runtime.registerResourceModule("oci", "index/identityDataPlaneGenerateScopedAccessToken", _module)
pulumi.runtime.registerResourceModule("oci", "index/identityDbCredential", _module)
pulumi.runtime.registerResourceModule("oci", "index/identityDomain", _module)
pulumi.runtime.registerResourceModule("oci", "index/identityDomainReplicationToRegion", _module)
pulumi.runtime.registerResourceModule("oci", "index/identityDomainsAccountRecoverySetting", _module)
pulumi.runtime.registerResourceModule("oci", "index/identityDomainsApiKey", _module)
pulumi.runtime.registerResourceModule("oci", "index/identityDomainsApp", _module)
pulumi.runtime.registerResourceModule("oci", "index/identityDomainsAppRole", _module)
pulumi.runtime.registerResourceModule("oci", "index/identityDomainsApprovalWorkflow", _module)
pulumi.runtime.registerResourceModule("oci", "index/identityDomainsApprovalWorkflowAssignment", _module)
pulumi.runtime.registerResourceModule("oci", "index/identityDomainsApprovalWorkflowStep", _module)
pulumi.runtime.registerResourceModule("oci", "index/identityDomainsAuthToken", _module)
pulumi.runtime.registerResourceModule("oci", "index/identityDomainsAuthenticationFactorSetting", _module)
pulumi.runtime.registerResourceModule("oci", "index/identityDomainsCloudGate", _module)
pulumi.runtime.registerResourceModule("oci", "index/identityDomainsCloudGateMapping", _module)
pulumi.runtime.registerResourceModule("oci", "index/identityDomainsCloudGateServer", _module)
pulumi.runtime.registerResourceModule("oci", "index/identityDomainsCondition", _module)
pulumi.runtime.registerResourceModule("oci", "index/identityDomainsCustomerSecretKey", _module)
pulumi.runtime.registerResourceModule("oci", "index/identityDomainsDynamicResourceGroup", _module)
pulumi.runtime.registerResourceModule("oci", "index/identityDomainsGrant", _module)
pulumi.runtime.registerResourceModule("oci", "index/identityDomainsGroup", _module)
pulumi.runtime.registerResourceModule("oci", "index/identityDomainsIdentityPropagationTrust", _module)
pulumi.runtime.registerResourceModule("oci", "index/identityDomainsIdentityProvider", _module)
pulumi.runtime.registerResourceModule("oci", "index/identityDomainsIdentitySetting", _module)
pulumi.runtime.registerResourceModule("oci", "index/identityDomainsKmsiSetting", _module)
pulumi.runtime.registerResourceModule("oci", "index/identityDomainsMyApiKey", _module)
pulumi.runtime.registerResourceModule("oci", "index/identityDomainsMyAuthToken", _module)
pulumi.runtime.registerResourceModule("oci", "index/identityDomainsMyCustomerSecretKey", _module)
pulumi.runtime.registerResourceModule("oci", "index/identityDomainsMyOauth2clientCredential", _module)
pulumi.runtime.registerResourceModule("oci", "index/identityDomainsMyRequest", _module)
pulumi.runtime.registerResourceModule("oci", "index/identityDomainsMySmtpCredential", _module)
pulumi.runtime.registerResourceModule("oci", "index/identityDomainsMySupportAccount", _module)
pulumi.runtime.registerResourceModule("oci", "index/identityDomainsMyUserDbCredential", _module)
pulumi.runtime.registerResourceModule("oci", "index/identityDomainsNetworkPerimeter", _module)
pulumi.runtime.registerResourceModule("oci", "index/identityDomainsNotificationSetting", _module)
pulumi.runtime.registerResourceModule("oci", "index/identityDomainsOauth2clientCredential", _module)
pulumi.runtime.registerResourceModule("oci", "index/identityDomainsOauthClientCertificate", _module)
pulumi.runtime.registerResourceModule("oci", "index/identityDomainsOauthPartnerCertificate", _module)
pulumi.runtime.registerResourceModule("oci", "index/identityDomainsPasswordPolicy", _module)
pulumi.runtime.registerResourceModule("oci", "index/identityDomainsPolicy", _module)
pulumi.runtime.registerResourceModule("oci", "index/identityDomainsRule", _module)
pulumi.runtime.registerResourceModule("oci", "index/identityDomainsSecurityQuestion", _module)
pulumi.runtime.registerResourceModule("oci", "index/identityDomainsSecurityQuestionSetting", _module)
pulumi.runtime.registerResourceModule("oci", "index/identityDomainsSelfRegistrationProfile", _module)
pulumi.runtime.registerResourceModule("oci", "index/identityDomainsSetting", _module)
pulumi.runtime.registerResourceModule("oci", "index/identityDomainsSmtpCredential", _module)
pulumi.runtime.registerResourceModule("oci", "index/identityDomainsSocialIdentityProvider", _module)
pulumi.runtime.registerResourceModule("oci", "index/identityDomainsUser", _module)
pulumi.runtime.registerResourceModule("oci", "index/identityDomainsUserDbCredential", _module)
pulumi.runtime.registerResourceModule("oci", "index/identityDynamicGroup", _module)
pulumi.runtime.registerResourceModule("oci", "index/identityGroup", _module)
pulumi.runtime.registerResourceModule("oci", "index/identityIdentityProvider", _module)
pulumi.runtime.registerResourceModule("oci", "index/identityIdpGroupMapping", _module)
pulumi.runtime.registerResourceModule("oci", "index/identityImportStandardTagsManagement", _module)
pulumi.runtime.registerResourceModule("oci", "index/identityNetworkSource", _module)
pulumi.runtime.registerResourceModule("oci", "index/identityPolicy", _module)
pulumi.runtime.registerResourceModule("oci", "index/identitySmtpCredential", _module)
pulumi.runtime.registerResourceModule("oci", "index/identityTag", _module)
pulumi.runtime.registerResourceModule("oci", "index/identityTagDefault", _module)
pulumi.runtime.registerResourceModule("oci", "index/identityTagNamespace", _module)
pulumi.runtime.registerResourceModule("oci", "index/identityUiPassword", _module)
pulumi.runtime.registerResourceModule("oci", "index/identityUser", _module)
pulumi.runtime.registerResourceModule("oci", "index/identityUserCapabilitiesManagement", _module)
pulumi.runtime.registerResourceModule("oci", "index/identityUserGroupMembership", _module)
pulumi.runtime.registerResourceModule("oci", "index/integrationIntegrationInstance", _module)
pulumi.runtime.registerResourceModule("oci", "index/integrationPrivateEndpointOutboundConnection", _module)
pulumi.runtime.registerResourceModule("oci", "index/jmsFleet", _module)
pulumi.runtime.registerResourceModule("oci", "index/jmsFleetAdvancedFeatureConfiguration", _module)
pulumi.runtime.registerResourceModule("oci", "index/jmsJavaDownloadsJavaDownloadReport", _module)
pulumi.runtime.registerResourceModule("oci", "index/jmsJavaDownloadsJavaDownloadToken", _module)
pulumi.runtime.registerResourceModule("oci", "index/jmsJavaDownloadsJavaLicenseAcceptanceRecord", _module)
pulumi.runtime.registerResourceModule("oci", "index/jmsJmsPlugin", _module)
pulumi.runtime.registerResourceModule("oci", "index/kmsEkmsPrivateEndpoint", _module)
pulumi.runtime.registerResourceModule("oci", "index/kmsEncryptedData", _module)
pulumi.runtime.registerResourceModule("oci", "index/kmsGeneratedKey", _module)
pulumi.runtime.registerResourceModule("oci", "index/kmsKey", _module)
pulumi.runtime.registerResourceModule("oci", "index/kmsKeyVersion", _module)
pulumi.runtime.registerResourceModule("oci", "index/kmsSign", _module)
pulumi.runtime.registerResourceModule("oci", "index/kmsVault", _module)
pulumi.runtime.registerResourceModule("oci", "index/kmsVaultReplication", _module)
pulumi.runtime.registerResourceModule("oci", "index/kmsVerify", _module)
pulumi.runtime.registerResourceModule("oci", "index/licenseManagerConfiguration", _module)
pulumi.runtime.registerResourceModule("oci", "index/licenseManagerLicenseRecord", _module)
pulumi.runtime.registerResourceModule("oci", "index/licenseManagerProductLicense", _module)
pulumi.runtime.registerResourceModule("oci", "index/limitsQuota", _module)
pulumi.runtime.registerResourceModule("oci", "index/loadBalancer", _module)
pulumi.runtime.registerResourceModule("oci", "index/loadBalancerBackend", _module)
pulumi.runtime.registerResourceModule("oci", "index/loadBalancerBackendSet", _module)
pulumi.runtime.registerResourceModule("oci", "index/loadBalancerBackendset", _module)
pulumi.runtime.registerResourceModule("oci", "index/loadBalancerCertificate", _module)
pulumi.runtime.registerResourceModule("oci", "index/loadBalancerHostname", _module)
pulumi.runtime.registerResourceModule("oci", "index/loadBalancerListener", _module)
pulumi.runtime.registerResourceModule("oci", "index/loadBalancerLoadBalancer", _module)
pulumi.runtime.registerResourceModule("oci", "index/loadBalancerLoadBalancerRoutingPolicy", _module)
pulumi.runtime.registerResourceModule("oci", "index/loadBalancerPathRouteSet", _module)
pulumi.runtime.registerResourceModule("oci", "index/loadBalancerRuleSet", _module)
pulumi.runtime.registerResourceModule("oci", "index/loadBalancerSslCipherSuite", _module)
pulumi.runtime.registerResourceModule("oci", "index/logAnalyticsLogAnalyticsEntity", _module)
pulumi.runtime.registerResourceModule("oci", "index/logAnalyticsLogAnalyticsImportCustomContent", _module)
pulumi.runtime.registerResourceModule("oci", "index/logAnalyticsLogAnalyticsLogGroup", _module)
pulumi.runtime.registerResourceModule("oci", "index/logAnalyticsLogAnalyticsObjectCollectionRule", _module)
pulumi.runtime.registerResourceModule("oci", "index/logAnalyticsLogAnalyticsPreferencesManagement", _module)
pulumi.runtime.registerResourceModule("oci", "index/logAnalyticsLogAnalyticsResourceCategoriesManagement", _module)
pulumi.runtime.registerResourceModule("oci", "index/logAnalyticsLogAnalyticsUnprocessedDataBucketManagement", _module)
pulumi.runtime.registerResourceModule("oci", "index/logAnalyticsNamespace", _module)
pulumi.runtime.registerResourceModule("oci", "index/logAnalyticsNamespaceIngestTimeRule", _module)
pulumi.runtime.registerResourceModule("oci", "index/logAnalyticsNamespaceIngestTimeRulesManagement", _module)
pulumi.runtime.registerResourceModule("oci", "index/logAnalyticsNamespaceScheduledTask", _module)
pulumi.runtime.registerResourceModule("oci", "index/loggingLog", _module)
pulumi.runtime.registerResourceModule("oci", "index/loggingLogGroup", _module)
pulumi.runtime.registerResourceModule("oci", "index/loggingLogSavedSearch", _module)
pulumi.runtime.registerResourceModule("oci", "index/loggingUnifiedAgentConfiguration", _module)
pulumi.runtime.registerResourceModule("oci", "index/managementAgentManagementAgent", _module)
pulumi.runtime.registerResourceModule("oci", "index/managementAgentManagementAgentDataSource", _module)
pulumi.runtime.registerResourceModule("oci", "index/managementAgentManagementAgentInstallKey", _module)
pulumi.runtime.registerResourceModule("oci", "index/managementDashboardManagementDashboardsImport", _module)
pulumi.runtime.registerResourceModule("oci", "index/marketplaceAcceptedAgreement", _module)
pulumi.runtime.registerResourceModule("oci", "index/marketplaceListingPackageAgreement", _module)
pulumi.runtime.registerResourceModule("oci", "index/marketplacePublication", _module)
pulumi.runtime.registerResourceModule("oci", "index/mediaServicesMediaAsset", _module)
pulumi.runtime.registerResourceModule("oci", "index/mediaServicesMediaWorkflow", _module)
pulumi.runtime.registerResourceModule("oci", "index/mediaServicesMediaWorkflowConfiguration", _module)
pulumi.runtime.registerResourceModule("oci", "index/mediaServicesMediaWorkflowJob", _module)
pulumi.runtime.registerResourceModule("oci", "index/mediaServicesStreamCdnConfig", _module)
pulumi.runtime.registerResourceModule("oci", "index/mediaServicesStreamDistributionChannel", _module)
pulumi.runtime.registerResourceModule("oci", "index/mediaServicesStreamPackagingConfig", _module)
pulumi.runtime.registerResourceModule("oci", "index/meteringComputationCustomTable", _module)
pulumi.runtime.registerResourceModule("oci", "index/meteringComputationQuery", _module)
pulumi.runtime.registerResourceModule("oci", "index/meteringComputationSchedule", _module)
pulumi.runtime.registerResourceModule("oci", "index/meteringComputationUsage", _module)
pulumi.runtime.registerResourceModule("oci", "index/meteringComputationUsageCarbonEmission", _module)
pulumi.runtime.registerResourceModule("oci", "index/meteringComputationUsageCarbonEmissionsQuery", _module)
pulumi.runtime.registerResourceModule("oci", "index/meteringComputationUsageStatementEmailRecipientsGroup", _module)
pulumi.runtime.registerResourceModule("oci", "index/monitoringAlarm", _module)
pulumi.runtime.registerResourceModule("oci", "index/monitoringAlarmSuppression", _module)
pulumi.runtime.registerResourceModule("oci", "index/mysqlChannel", _module)
pulumi.runtime.registerResourceModule("oci", "index/mysqlHeatWaveCluster", _module)
pulumi.runtime.registerResourceModule("oci", "index/mysqlMysqlBackup", _module)
pulumi.runtime.registerResourceModule("oci", "index/mysqlMysqlConfiguration", _module)
pulumi.runtime.registerResourceModule("oci", "index/mysqlMysqlDbSystem", _module)
pulumi.runtime.registerResourceModule("oci", "index/mysqlReplica", _module)
pulumi.runtime.registerResourceModule("oci", "index/networkFirewallNetworkFirewall", _module)
pulumi.runtime.registerResourceModule("oci", "index/networkFirewallNetworkFirewallPolicy", _module)
pulumi.runtime.registerResourceModule("oci", "index/networkFirewallNetworkFirewallPolicyAddressList", _module)
pulumi.runtime.registerResourceModule("oci", "index/networkFirewallNetworkFirewallPolicyApplication", _module)
pulumi.runtime.registerResourceModule("oci", "index/networkFirewallNetworkFirewallPolicyApplicationGroup", _module)
pulumi.runtime.registerResourceModule("oci", "index/networkFirewallNetworkFirewallPolicyDecryptionProfile", _module)
pulumi.runtime.registerResourceModule("oci", "index/networkFirewallNetworkFirewallPolicyDecryptionRule", _module)
pulumi.runtime.registerResourceModule("oci", "index/networkFirewallNetworkFirewallPolicyMappedSecret", _module)
pulumi.runtime.registerResourceModule("oci", "index/networkFirewallNetworkFirewallPolicySecurityRule", _module)
pulumi.runtime.registerResourceModule("oci", "index/networkFirewallNetworkFirewallPolicyService", _module)
pulumi.runtime.registerResourceModule("oci", "index/networkFirewallNetworkFirewallPolicyServiceList", _module)
pulumi.runtime.registerResourceModule("oci", "index/networkFirewallNetworkFirewallPolicyTunnelInspectionRule", _module)
pulumi.runtime.registerResourceModule("oci", "index/networkFirewallNetworkFirewallPolicyUrlList", _module)
pulumi.runtime.registerResourceModule("oci", "index/networkLoadBalancerBackend", _module)
pulumi.runtime.registerResourceModule("oci", "index/networkLoadBalancerBackendSet", _module)
pulumi.runtime.registerResourceModule("oci", "index/networkLoadBalancerListener", _module)
pulumi.runtime.registerResourceModule("oci", "index/networkLoadBalancerNetworkLoadBalancer", _module)
pulumi.runtime.registerResourceModule("oci", "index/networkLoadBalancerNetworkLoadBalancersBackendSetsUnified", _module)
pulumi.runtime.registerResourceModule("oci", "index/nosqlIndex", _module)
pulumi.runtime.registerResourceModule("oci", "index/nosqlTable", _module)
pulumi.runtime.registerResourceModule("oci", "index/nosqlTableReplica", _module)
pulumi.runtime.registerResourceModule("oci", "index/objectstorageBucket", _module)
pulumi.runtime.registerResourceModule("oci", "index/objectstorageNamespaceMetadata", _module)
pulumi.runtime.registerResourceModule("oci", "index/objectstorageObject", _module)
pulumi.runtime.registerResourceModule("oci", "index/objectstorageObjectLifecyclePolicy", _module)
pulumi.runtime.registerResourceModule("oci", "index/objectstoragePreauthrequest", _module)
pulumi.runtime.registerResourceModule("oci", "index/objectstorageReplicationPolicy", _module)
pulumi.runtime.registerResourceModule("oci", "index/oceOceInstance", _module)
pulumi.runtime.registerResourceModule("oci", "index/ocvpCluster", _module)
pulumi.runtime.registerResourceModule("oci", "index/ocvpEsxiHost", _module)
pulumi.runtime.registerResourceModule("oci", "index/ocvpSddc", _module)
pulumi.runtime.registerResourceModule("oci", "index/odaOdaInstance", _module)
pulumi.runtime.registerResourceModule("oci", "index/odaOdaPrivateEndpoint", _module)
pulumi.runtime.registerResourceModule("oci", "index/odaOdaPrivateEndpointAttachment", _module)
pulumi.runtime.registerResourceModule("oci", "index/odaOdaPrivateEndpointScanProxy", _module)
pulumi.runtime.registerResourceModule("oci", "index/onsNotificationTopic", _module)
pulumi.runtime.registerResourceModule("oci", "index/onsSubscription", _module)
pulumi.runtime.registerResourceModule("oci", "index/opaOpaInstance", _module)
pulumi.runtime.registerResourceModule("oci", "index/opensearchOpensearchCluster", _module)
pulumi.runtime.registerResourceModule("oci", "index/operatorAccessControlOperatorControl", _module)
pulumi.runtime.registerResourceModule("oci", "index/operatorAccessControlOperatorControlAssignment", _module)
pulumi.runtime.registerResourceModule("oci", "index/opsiAwrHub", _module)
pulumi.runtime.registerResourceModule("oci", "index/opsiAwrHubSource", _module)
pulumi.runtime.registerResourceModule("oci", "index/opsiAwrHubSourceAwrhubsourcesManagement", _module)
pulumi.runtime.registerResourceModule("oci", "index/opsiDatabaseInsight", _module)
pulumi.runtime.registerResourceModule("oci", "index/opsiEnterpriseManagerBridge", _module)
pulumi.runtime.registerResourceModule("oci", "index/opsiExadataInsight", _module)
pulumi.runtime.registerResourceModule("oci", "index/opsiHostInsight", _module)
pulumi.runtime.registerResourceModule("oci", "index/opsiNewsReport", _module)
pulumi.runtime.registerResourceModule("oci", "index/opsiOperationsInsightsPrivateEndpoint", _module)
pulumi.runtime.registerResourceModule("oci", "index/opsiOperationsInsightsWarehouse", _module)
pulumi.runtime.registerResourceModule("oci", "index/opsiOperationsInsightsWarehouseDownloadWarehouseWallet", _module)
pulumi.runtime.registerResourceModule("oci", "index/opsiOperationsInsightsWarehouseRotateWarehouseWallet", _module)
pulumi.runtime.registerResourceModule("oci", "index/opsiOperationsInsightsWarehouseUser", _module)
pulumi.runtime.registerResourceModule("oci", "index/opsiOpsiConfiguration", _module)
pulumi.runtime.registerResourceModule("oci", "index/optimizerEnrollmentStatus", _module)
pulumi.runtime.registerResourceModule("oci", "index/optimizerProfile", _module)
pulumi.runtime.registerResourceModule("oci", "index/optimizerRecommendation", _module)
pulumi.runtime.registerResourceModule("oci", "index/optimizerResourceAction", _module)
pulumi.runtime.registerResourceModule("oci", "index/osManagementHubEvent", _module)
pulumi.runtime.registerResourceModule("oci", "index/osManagementHubLifecycleEnvironment", _module)
pulumi.runtime.registerResourceModule("oci", "index/osManagementHubLifecycleStageAttachManagedInstancesManagement", _module)
pulumi.runtime.registerResourceModule("oci", "index/osManagementHubLifecycleStageDetachManagedInstancesManagement", _module)
pulumi.runtime.registerResourceModule("oci", "index/osManagementHubLifecycleStagePromoteSoftwareSourceManagement", _module)
pulumi.runtime.registerResourceModule("oci", "index/osManagementHubManagedInstance", _module)
pulumi.runtime.registerResourceModule("oci", "index/osManagementHubManagedInstanceAttachProfileManagement", _module)
pulumi.runtime.registerResourceModule("oci", "index/osManagementHubManagedInstanceDetachProfileManagement", _module)
pulumi.runtime.registerResourceModule("oci", "index/osManagementHubManagedInstanceGroup", _module)
pulumi.runtime.registerResourceModule("oci", "index/osManagementHubManagedInstanceGroupAttachManagedInstancesManagement", _module)
pulumi.runtime.registerResourceModule("oci", "index/osManagementHubManagedInstanceGroupAttachSoftwareSourcesManagement", _module)
pulumi.runtime.registerResourceModule("oci", "index/osManagementHubManagedInstanceGroupDetachManagedInstancesManagement", _module)
pulumi.runtime.registerResourceModule("oci", "index/osManagementHubManagedInstanceGroupDetachSoftwareSourcesManagement", _module)
pulumi.runtime.registerResourceModule("oci", "index/osManagementHubManagedInstanceGroupInstallPackagesManagement", _module)
pulumi.runtime.registerResourceModule("oci", "index/osManagementHubManagedInstanceGroupInstallWindowsUpdatesManagement", _module)
pulumi.runtime.registerResourceModule("oci", "index/osManagementHubManagedInstanceGroupManageModuleStreamsManagement", _module)
pulumi.runtime.registerResourceModule("oci", "index/osManagementHubManagedInstanceGroupRemovePackagesManagement", _module)
pulumi.runtime.registerResourceModule("oci", "index/osManagementHubManagedInstanceGroupUpdateAllPackagesManagement", _module)
pulumi.runtime.registerResourceModule("oci", "index/osManagementHubManagedInstanceInstallWindowsUpdatesManagement", _module)
pulumi.runtime.registerResourceModule("oci", "index/osManagementHubManagedInstanceUpdatePackagesManagement", _module)
pulumi.runtime.registerResourceModule("oci", "index/osManagementHubManagementStation", _module)
pulumi.runtime.registerResourceModule("oci", "index/osManagementHubManagementStationMirrorSynchronizeManagement", _module)
pulumi.runtime.registerResourceModule("oci", "index/osManagementHubManagementStationRefreshManagement", _module)
pulumi.runtime.registerResourceModule("oci", "index/osManagementHubManagementStationSynchronizeMirrorsManagement", _module)
pulumi.runtime.registerResourceModule("oci", "index/osManagementHubProfile", _module)
pulumi.runtime.registerResourceModule("oci", "index/osManagementHubScheduledJob", _module)
pulumi.runtime.registerResourceModule("oci", "index/osManagementHubSoftwareSource", _module)
pulumi.runtime.registerResourceModule("oci", "index/osManagementHubSoftwareSourceAddPackagesManagement", _module)
pulumi.runtime.registerResourceModule("oci", "index/osManagementHubSoftwareSourceChangeAvailabilityManagement", _module)
pulumi.runtime.registerResourceModule("oci", "index/osmanagementManagedInstance", _module)
pulumi.runtime.registerResourceModule("oci", "index/osmanagementManagedInstanceGroup", _module)
pulumi.runtime.registerResourceModule("oci", "index/osmanagementManagedInstanceManagement", _module)
pulumi.runtime.registerResourceModule("oci", "index/osmanagementSoftwareSource", _module)
pulumi.runtime.registerResourceModule("oci", "index/ospGatewayAddressActionVerification", _module)
pulumi.runtime.registerResourceModule("oci", "index/ospGatewaySubscription", _module)
pulumi.runtime.registerResourceModule("oci", "index/psqlBackup", _module)
pulumi.runtime.registerResourceModule("oci", "index/psqlConfiguration", _module)
pulumi.runtime.registerResourceModule("oci", "index/psqlDbSystem", _module)
pulumi.runtime.registerResourceModule("oci", "index/queueQueue", _module)
pulumi.runtime.registerResourceModule("oci", "index/recoveryProtectedDatabase", _module)
pulumi.runtime.registerResourceModule("oci", "index/recoveryProtectionPolicy", _module)
pulumi.runtime.registerResourceModule("oci", "index/recoveryRecoveryServiceSubnet", _module)
pulumi.runtime.registerResourceModule("oci", "index/redisRedisCluster", _module)
pulumi.runtime.registerResourceModule("oci", "index/resourceSchedulerSchedule", _module)
pulumi.runtime.registerResourceModule("oci", "index/resourcemanagerPrivateEndpoint", _module)
pulumi.runtime.registerResourceModule("oci", "index/schServiceConnector", _module)
pulumi.runtime.registerResourceModule("oci", "index/serviceCatalogPrivateApplication", _module)
pulumi.runtime.registerResourceModule("oci", "index/serviceCatalogServiceCatalog", _module)
pulumi.runtime.registerResourceModule("oci", "index/serviceCatalogServiceCatalogAssociation", _module)
pulumi.runtime.registerResourceModule("oci", "index/serviceMeshAccessPolicy", _module)
pulumi.runtime.registerResourceModule("oci", "index/serviceMeshIngressGateway", _module)
pulumi.runtime.registerResourceModule("oci", "index/serviceMeshIngressGatewayRouteTable", _module)
pulumi.runtime.registerResourceModule("oci", "index/serviceMeshMesh", _module)
pulumi.runtime.registerResourceModule("oci", "index/serviceMeshVirtualDeployment", _module)
pulumi.runtime.registerResourceModule("oci", "index/serviceMeshVirtualService", _module)
pulumi.runtime.registerResourceModule("oci", "index/serviceMeshVirtualServiceRouteTable", _module)
pulumi.runtime.registerResourceModule("oci", "index/stackMonitoringBaselineableMetric", _module)
pulumi.runtime.registerResourceModule("oci", "index/stackMonitoringConfig", _module)
pulumi.runtime.registerResourceModule("oci", "index/stackMonitoringDiscoveryJob", _module)
pulumi.runtime.registerResourceModule("oci", "index/stackMonitoringMetricExtension", _module)
pulumi.runtime.registerResourceModule("oci", "index/stackMonitoringMetricExtensionMetricExtensionOnGivenResourcesManagement", _module)
pulumi.runtime.registerResourceModule("oci", "index/stackMonitoringMetricExtensionsTestManagement", _module)
pulumi.runtime.registerResourceModule("oci", "index/stackMonitoringMonitoredResource", _module)
pulumi.runtime.registerResourceModule("oci", "index/stackMonitoringMonitoredResourceTask", _module)
pulumi.runtime.registerResourceModule("oci", "index/stackMonitoringMonitoredResourceType", _module)
pulumi.runtime.registerResourceModule("oci", "index/stackMonitoringMonitoredResourcesAssociateMonitoredResource", _module)
pulumi.runtime.registerResourceModule("oci", "index/stackMonitoringMonitoredResourcesListMember", _module)
pulumi.runtime.registerResourceModule("oci", "index/stackMonitoringMonitoredResourcesSearch", _module)
pulumi.runtime.registerResourceModule("oci", "index/stackMonitoringMonitoredResourcesSearchAssociation", _module)
pulumi.runtime.registerResourceModule("oci", "index/stackMonitoringProcessSet", _module)
pulumi.runtime.registerResourceModule("oci", "index/streamingConnectHarness", _module)
pulumi.runtime.registerResourceModule("oci", "index/streamingStream", _module)
pulumi.runtime.registerResourceModule("oci", "index/streamingStreamPool", _module)
pulumi.runtime.registerResourceModule("oci", "index/usageProxySubscriptionRedeemableUser", _module)
pulumi.runtime.registerResourceModule("oci", "index/vaultSecret", _module)
pulumi.runtime.registerResourceModule("oci", "index/vbsInstVbsInstance", _module)
pulumi.runtime.registerResourceModule("oci", "index/visualBuilderVbInstance", _module)
pulumi.runtime.registerResourceModule("oci", "index/vnMonitoringPathAnalysi", _module)
pulumi.runtime.registerResourceModule("oci", "index/vnMonitoringPathAnalyzerTest", _module)
pulumi.runtime.registerResourceModule("oci", "index/vulnerabilityScanningContainerScanRecipe", _module)
pulumi.runtime.registerResourceModule("oci", "index/vulnerabilityScanningContainerScanTarget", _module)
pulumi.runtime.registerResourceModule("oci", "index/vulnerabilityScanningHostScanRecipe", _module)
pulumi.runtime.registerResourceModule("oci", "index/vulnerabilityScanningHostScanTarget", _module)
pulumi.runtime.registerResourceModule("oci", "index/waaWebAppAcceleration", _module)
pulumi.runtime.registerResourceModule("oci", "index/waaWebAppAccelerationPolicy", _module)
pulumi.runtime.registerResourceModule("oci", "index/waasAddressList", _module)
pulumi.runtime.registerResourceModule("oci", "index/waasCertificate", _module)
pulumi.runtime.registerResourceModule("oci", "index/waasCustomProtectionRule", _module)
pulumi.runtime.registerResourceModule("oci", "index/waasHttpRedirect", _module)
pulumi.runtime.registerResourceModule("oci", "index/waasProtectionRule", _module)
pulumi.runtime.registerResourceModule("oci", "index/waasPurgeCache", _module)
pulumi.runtime.registerResourceModule("oci", "index/waasWaasPolicy", _module)
pulumi.runtime.registerResourceModule("oci", "index/wafNetworkAddressList", _module)
pulumi.runtime.registerResourceModule("oci", "index/wafWebAppFirewall", _module)
pulumi.runtime.registerResourceModule("oci", "index/wafWebAppFirewallPolicy", _module)
pulumi.runtime.registerResourcePackage("oci", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:oci") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
