// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getDnsResolverEndpoints(args: GetDnsResolverEndpointsArgs, opts?: pulumi.InvokeOptions): Promise<GetDnsResolverEndpointsResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getDnsResolverEndpoints:getDnsResolverEndpoints", {
        "filters": args.filters,
        "id": args.id,
        "name": args.name,
        "resolverId": args.resolverId,
        "scope": args.scope,
        "state": args.state,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getDnsResolverEndpoints.
 */
export interface GetDnsResolverEndpointsArgs {
    filters?: inputs.GetDnsResolverEndpointsFilter[];
    id?: string;
    name?: string;
    resolverId: string;
    scope: string;
    state?: string;
}

/**
 * A collection of values returned by getDnsResolverEndpoints.
 */
export interface GetDnsResolverEndpointsResult {
    readonly filters?: outputs.GetDnsResolverEndpointsFilter[];
    readonly id: string;
    readonly name?: string;
    readonly resolverEndpoints: outputs.GetDnsResolverEndpointsResolverEndpoint[];
    readonly resolverId: string;
    readonly scope: string;
    readonly state?: string;
}
export function getDnsResolverEndpointsOutput(args: GetDnsResolverEndpointsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDnsResolverEndpointsResult> {
    return pulumi.output(args).apply((a: any) => getDnsResolverEndpoints(a, opts))
}

/**
 * A collection of arguments for invoking getDnsResolverEndpoints.
 */
export interface GetDnsResolverEndpointsOutputArgs {
    filters?: pulumi.Input<pulumi.Input<inputs.GetDnsResolverEndpointsFilterArgs>[]>;
    id?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    resolverId: pulumi.Input<string>;
    scope: pulumi.Input<string>;
    state?: pulumi.Input<string>;
}
