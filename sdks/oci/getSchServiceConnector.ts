// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getSchServiceConnector(args: GetSchServiceConnectorArgs, opts?: pulumi.InvokeOptions): Promise<GetSchServiceConnectorResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getSchServiceConnector:getSchServiceConnector", {
        "serviceConnectorId": args.serviceConnectorId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getSchServiceConnector.
 */
export interface GetSchServiceConnectorArgs {
    serviceConnectorId: string;
}

/**
 * A collection of values returned by getSchServiceConnector.
 */
export interface GetSchServiceConnectorResult {
    readonly compartmentId: string;
    readonly definedTags: {[key: string]: string};
    readonly description: string;
    readonly displayName: string;
    readonly freeformTags: {[key: string]: string};
    readonly id: string;
    readonly lifecyleDetails: string;
    readonly serviceConnectorId: string;
    readonly sources: outputs.GetSchServiceConnectorSource[];
    readonly state: string;
    readonly systemTags: {[key: string]: string};
    readonly targets: outputs.GetSchServiceConnectorTarget[];
    readonly tasks: outputs.GetSchServiceConnectorTask[];
    readonly timeCreated: string;
    readonly timeUpdated: string;
}
export function getSchServiceConnectorOutput(args: GetSchServiceConnectorOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetSchServiceConnectorResult> {
    return pulumi.output(args).apply((a: any) => getSchServiceConnector(a, opts))
}

/**
 * A collection of arguments for invoking getSchServiceConnector.
 */
export interface GetSchServiceConnectorOutputArgs {
    serviceConnectorId: pulumi.Input<string>;
}
