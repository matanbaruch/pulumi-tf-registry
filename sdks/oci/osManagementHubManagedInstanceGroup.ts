// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class OsManagementHubManagedInstanceGroup extends pulumi.CustomResource {
    /**
     * Get an existing OsManagementHubManagedInstanceGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OsManagementHubManagedInstanceGroupState, opts?: pulumi.CustomResourceOptions): OsManagementHubManagedInstanceGroup {
        return new OsManagementHubManagedInstanceGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/osManagementHubManagedInstanceGroup:OsManagementHubManagedInstanceGroup';

    /**
     * Returns true if the given object is an instance of OsManagementHubManagedInstanceGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OsManagementHubManagedInstanceGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OsManagementHubManagedInstanceGroup.__pulumiType;
    }

    public readonly archType!: pulumi.Output<string>;
    public readonly autonomousSettings!: pulumi.Output<outputs.OsManagementHubManagedInstanceGroupAutonomousSettings | undefined>;
    public readonly compartmentId!: pulumi.Output<string>;
    public readonly definedTags!: pulumi.Output<{[key: string]: string}>;
    public readonly description!: pulumi.Output<string>;
    public readonly displayName!: pulumi.Output<string>;
    public readonly freeformTags!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly isManagedByAutonomousLinux!: pulumi.Output<boolean>;
    public readonly location!: pulumi.Output<string>;
    public /*out*/ readonly managedInstanceCount!: pulumi.Output<number>;
    public readonly managedInstanceIds!: pulumi.Output<string[]>;
    public readonly notificationTopicId!: pulumi.Output<string>;
    public readonly osFamily!: pulumi.Output<string>;
    public /*out*/ readonly pendingJobCount!: pulumi.Output<number>;
    public readonly softwareSourceIds!: pulumi.Output<string[]>;
    public /*out*/ readonly softwareSources!: pulumi.Output<outputs.OsManagementHubManagedInstanceGroupSoftwareSource[]>;
    public /*out*/ readonly state!: pulumi.Output<string>;
    public /*out*/ readonly systemTags!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly timeCreated!: pulumi.Output<string>;
    public /*out*/ readonly timeModified!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.OsManagementHubManagedInstanceGroupTimeouts | undefined>;
    public readonly vendorName!: pulumi.Output<string>;

    /**
     * Create a OsManagementHubManagedInstanceGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OsManagementHubManagedInstanceGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OsManagementHubManagedInstanceGroupArgs | OsManagementHubManagedInstanceGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OsManagementHubManagedInstanceGroupState | undefined;
            resourceInputs["archType"] = state ? state.archType : undefined;
            resourceInputs["autonomousSettings"] = state ? state.autonomousSettings : undefined;
            resourceInputs["compartmentId"] = state ? state.compartmentId : undefined;
            resourceInputs["definedTags"] = state ? state.definedTags : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["freeformTags"] = state ? state.freeformTags : undefined;
            resourceInputs["isManagedByAutonomousLinux"] = state ? state.isManagedByAutonomousLinux : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["managedInstanceCount"] = state ? state.managedInstanceCount : undefined;
            resourceInputs["managedInstanceIds"] = state ? state.managedInstanceIds : undefined;
            resourceInputs["notificationTopicId"] = state ? state.notificationTopicId : undefined;
            resourceInputs["osFamily"] = state ? state.osFamily : undefined;
            resourceInputs["pendingJobCount"] = state ? state.pendingJobCount : undefined;
            resourceInputs["softwareSourceIds"] = state ? state.softwareSourceIds : undefined;
            resourceInputs["softwareSources"] = state ? state.softwareSources : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["systemTags"] = state ? state.systemTags : undefined;
            resourceInputs["timeCreated"] = state ? state.timeCreated : undefined;
            resourceInputs["timeModified"] = state ? state.timeModified : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["vendorName"] = state ? state.vendorName : undefined;
        } else {
            const args = argsOrState as OsManagementHubManagedInstanceGroupArgs | undefined;
            if ((!args || args.archType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'archType'");
            }
            if ((!args || args.compartmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'compartmentId'");
            }
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if ((!args || args.osFamily === undefined) && !opts.urn) {
                throw new Error("Missing required property 'osFamily'");
            }
            if ((!args || args.vendorName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vendorName'");
            }
            resourceInputs["archType"] = args ? args.archType : undefined;
            resourceInputs["autonomousSettings"] = args ? args.autonomousSettings : undefined;
            resourceInputs["compartmentId"] = args ? args.compartmentId : undefined;
            resourceInputs["definedTags"] = args ? args.definedTags : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["freeformTags"] = args ? args.freeformTags : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["managedInstanceIds"] = args ? args.managedInstanceIds : undefined;
            resourceInputs["notificationTopicId"] = args ? args.notificationTopicId : undefined;
            resourceInputs["osFamily"] = args ? args.osFamily : undefined;
            resourceInputs["softwareSourceIds"] = args ? args.softwareSourceIds : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["vendorName"] = args ? args.vendorName : undefined;
            resourceInputs["isManagedByAutonomousLinux"] = undefined /*out*/;
            resourceInputs["managedInstanceCount"] = undefined /*out*/;
            resourceInputs["pendingJobCount"] = undefined /*out*/;
            resourceInputs["softwareSources"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["systemTags"] = undefined /*out*/;
            resourceInputs["timeCreated"] = undefined /*out*/;
            resourceInputs["timeModified"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OsManagementHubManagedInstanceGroup.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering OsManagementHubManagedInstanceGroup resources.
 */
export interface OsManagementHubManagedInstanceGroupState {
    archType?: pulumi.Input<string>;
    autonomousSettings?: pulumi.Input<inputs.OsManagementHubManagedInstanceGroupAutonomousSettings>;
    compartmentId?: pulumi.Input<string>;
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    description?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    isManagedByAutonomousLinux?: pulumi.Input<boolean>;
    location?: pulumi.Input<string>;
    managedInstanceCount?: pulumi.Input<number>;
    managedInstanceIds?: pulumi.Input<pulumi.Input<string>[]>;
    notificationTopicId?: pulumi.Input<string>;
    osFamily?: pulumi.Input<string>;
    pendingJobCount?: pulumi.Input<number>;
    softwareSourceIds?: pulumi.Input<pulumi.Input<string>[]>;
    softwareSources?: pulumi.Input<pulumi.Input<inputs.OsManagementHubManagedInstanceGroupSoftwareSource>[]>;
    state?: pulumi.Input<string>;
    systemTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeCreated?: pulumi.Input<string>;
    timeModified?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.OsManagementHubManagedInstanceGroupTimeouts>;
    vendorName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a OsManagementHubManagedInstanceGroup resource.
 */
export interface OsManagementHubManagedInstanceGroupArgs {
    archType: pulumi.Input<string>;
    autonomousSettings?: pulumi.Input<inputs.OsManagementHubManagedInstanceGroupAutonomousSettings>;
    compartmentId: pulumi.Input<string>;
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    description?: pulumi.Input<string>;
    displayName: pulumi.Input<string>;
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    location?: pulumi.Input<string>;
    managedInstanceIds?: pulumi.Input<pulumi.Input<string>[]>;
    notificationTopicId?: pulumi.Input<string>;
    osFamily: pulumi.Input<string>;
    softwareSourceIds?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.OsManagementHubManagedInstanceGroupTimeouts>;
    vendorName: pulumi.Input<string>;
}
