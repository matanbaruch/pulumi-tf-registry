// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getApmSyntheticsMonitors(args: GetApmSyntheticsMonitorsArgs, opts?: pulumi.InvokeOptions): Promise<GetApmSyntheticsMonitorsResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getApmSyntheticsMonitors:getApmSyntheticsMonitors", {
        "apmDomainId": args.apmDomainId,
        "displayName": args.displayName,
        "filters": args.filters,
        "id": args.id,
        "isMaintenanceWindowActive": args.isMaintenanceWindowActive,
        "isMaintenanceWindowSet": args.isMaintenanceWindowSet,
        "monitorType": args.monitorType,
        "scriptId": args.scriptId,
        "status": args.status,
        "vantagePoint": args.vantagePoint,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getApmSyntheticsMonitors.
 */
export interface GetApmSyntheticsMonitorsArgs {
    apmDomainId: string;
    displayName?: string;
    filters?: inputs.GetApmSyntheticsMonitorsFilter[];
    id?: string;
    isMaintenanceWindowActive?: boolean;
    isMaintenanceWindowSet?: boolean;
    monitorType?: string;
    scriptId?: string;
    status?: string;
    vantagePoint?: string;
}

/**
 * A collection of values returned by getApmSyntheticsMonitors.
 */
export interface GetApmSyntheticsMonitorsResult {
    readonly apmDomainId: string;
    readonly displayName?: string;
    readonly filters?: outputs.GetApmSyntheticsMonitorsFilter[];
    readonly id: string;
    readonly isMaintenanceWindowActive?: boolean;
    readonly isMaintenanceWindowSet?: boolean;
    readonly monitorCollections: outputs.GetApmSyntheticsMonitorsMonitorCollection[];
    readonly monitorType?: string;
    readonly scriptId?: string;
    readonly status?: string;
    readonly vantagePoint?: string;
}
export function getApmSyntheticsMonitorsOutput(args: GetApmSyntheticsMonitorsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetApmSyntheticsMonitorsResult> {
    return pulumi.output(args).apply((a: any) => getApmSyntheticsMonitors(a, opts))
}

/**
 * A collection of arguments for invoking getApmSyntheticsMonitors.
 */
export interface GetApmSyntheticsMonitorsOutputArgs {
    apmDomainId: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.GetApmSyntheticsMonitorsFilterArgs>[]>;
    id?: pulumi.Input<string>;
    isMaintenanceWindowActive?: pulumi.Input<boolean>;
    isMaintenanceWindowSet?: pulumi.Input<boolean>;
    monitorType?: pulumi.Input<string>;
    scriptId?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    vantagePoint?: pulumi.Input<string>;
}
