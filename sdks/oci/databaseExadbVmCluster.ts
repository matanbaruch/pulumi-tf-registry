// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DatabaseExadbVmCluster extends pulumi.CustomResource {
    /**
     * Get an existing DatabaseExadbVmCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DatabaseExadbVmClusterState, opts?: pulumi.CustomResourceOptions): DatabaseExadbVmCluster {
        return new DatabaseExadbVmCluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/databaseExadbVmCluster:DatabaseExadbVmCluster';

    /**
     * Returns true if the given object is an instance of DatabaseExadbVmCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DatabaseExadbVmCluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DatabaseExadbVmCluster.__pulumiType;
    }

    public readonly availabilityDomain!: pulumi.Output<string>;
    public readonly backupNetworkNsgIds!: pulumi.Output<string[]>;
    public readonly backupSubnetId!: pulumi.Output<string>;
    public readonly clusterName!: pulumi.Output<string>;
    public readonly compartmentId!: pulumi.Output<string>;
    public readonly dataCollectionOptions!: pulumi.Output<outputs.DatabaseExadbVmClusterDataCollectionOptions | undefined>;
    public readonly definedTags!: pulumi.Output<{[key: string]: string}>;
    public readonly displayName!: pulumi.Output<string>;
    public readonly domain!: pulumi.Output<string>;
    public readonly exascaleDbStorageVaultId!: pulumi.Output<string>;
    public readonly freeformTags!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly giVersion!: pulumi.Output<string>;
    public readonly gridImageId!: pulumi.Output<string>;
    public /*out*/ readonly gridImageType!: pulumi.Output<string>;
    public readonly hostname!: pulumi.Output<string>;
    public /*out*/ readonly iormConfigCaches!: pulumi.Output<outputs.DatabaseExadbVmClusterIormConfigCach[]>;
    public /*out*/ readonly lastUpdateHistoryEntryId!: pulumi.Output<string>;
    public readonly licenseModel!: pulumi.Output<string>;
    public /*out*/ readonly lifecycleDetails!: pulumi.Output<string>;
    public /*out*/ readonly listenerPort!: pulumi.Output<string>;
    public readonly nodeConfig!: pulumi.Output<outputs.DatabaseExadbVmClusterNodeConfig>;
    public readonly nodeResources!: pulumi.Output<outputs.DatabaseExadbVmClusterNodeResource[] | undefined>;
    public readonly nsgIds!: pulumi.Output<string[]>;
    public readonly privateZoneId!: pulumi.Output<string>;
    public /*out*/ readonly scanDnsName!: pulumi.Output<string>;
    public /*out*/ readonly scanDnsRecordId!: pulumi.Output<string>;
    public /*out*/ readonly scanIpIds!: pulumi.Output<string[]>;
    public readonly scanListenerPortTcp!: pulumi.Output<number>;
    public readonly scanListenerPortTcpSsl!: pulumi.Output<number>;
    public readonly shape!: pulumi.Output<string>;
    public readonly sshPublicKeys!: pulumi.Output<string[]>;
    public /*out*/ readonly state!: pulumi.Output<string>;
    public readonly subnetId!: pulumi.Output<string>;
    public /*out*/ readonly systemTags!: pulumi.Output<{[key: string]: string}>;
    public readonly systemVersion!: pulumi.Output<string>;
    public /*out*/ readonly timeCreated!: pulumi.Output<string>;
    public readonly timeZone!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.DatabaseExadbVmClusterTimeouts | undefined>;
    public /*out*/ readonly vipIds!: pulumi.Output<string[]>;
    public /*out*/ readonly zoneId!: pulumi.Output<string>;

    /**
     * Create a DatabaseExadbVmCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatabaseExadbVmClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DatabaseExadbVmClusterArgs | DatabaseExadbVmClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DatabaseExadbVmClusterState | undefined;
            resourceInputs["availabilityDomain"] = state ? state.availabilityDomain : undefined;
            resourceInputs["backupNetworkNsgIds"] = state ? state.backupNetworkNsgIds : undefined;
            resourceInputs["backupSubnetId"] = state ? state.backupSubnetId : undefined;
            resourceInputs["clusterName"] = state ? state.clusterName : undefined;
            resourceInputs["compartmentId"] = state ? state.compartmentId : undefined;
            resourceInputs["dataCollectionOptions"] = state ? state.dataCollectionOptions : undefined;
            resourceInputs["definedTags"] = state ? state.definedTags : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["domain"] = state ? state.domain : undefined;
            resourceInputs["exascaleDbStorageVaultId"] = state ? state.exascaleDbStorageVaultId : undefined;
            resourceInputs["freeformTags"] = state ? state.freeformTags : undefined;
            resourceInputs["giVersion"] = state ? state.giVersion : undefined;
            resourceInputs["gridImageId"] = state ? state.gridImageId : undefined;
            resourceInputs["gridImageType"] = state ? state.gridImageType : undefined;
            resourceInputs["hostname"] = state ? state.hostname : undefined;
            resourceInputs["iormConfigCaches"] = state ? state.iormConfigCaches : undefined;
            resourceInputs["lastUpdateHistoryEntryId"] = state ? state.lastUpdateHistoryEntryId : undefined;
            resourceInputs["licenseModel"] = state ? state.licenseModel : undefined;
            resourceInputs["lifecycleDetails"] = state ? state.lifecycleDetails : undefined;
            resourceInputs["listenerPort"] = state ? state.listenerPort : undefined;
            resourceInputs["nodeConfig"] = state ? state.nodeConfig : undefined;
            resourceInputs["nodeResources"] = state ? state.nodeResources : undefined;
            resourceInputs["nsgIds"] = state ? state.nsgIds : undefined;
            resourceInputs["privateZoneId"] = state ? state.privateZoneId : undefined;
            resourceInputs["scanDnsName"] = state ? state.scanDnsName : undefined;
            resourceInputs["scanDnsRecordId"] = state ? state.scanDnsRecordId : undefined;
            resourceInputs["scanIpIds"] = state ? state.scanIpIds : undefined;
            resourceInputs["scanListenerPortTcp"] = state ? state.scanListenerPortTcp : undefined;
            resourceInputs["scanListenerPortTcpSsl"] = state ? state.scanListenerPortTcpSsl : undefined;
            resourceInputs["shape"] = state ? state.shape : undefined;
            resourceInputs["sshPublicKeys"] = state ? state.sshPublicKeys : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["subnetId"] = state ? state.subnetId : undefined;
            resourceInputs["systemTags"] = state ? state.systemTags : undefined;
            resourceInputs["systemVersion"] = state ? state.systemVersion : undefined;
            resourceInputs["timeCreated"] = state ? state.timeCreated : undefined;
            resourceInputs["timeZone"] = state ? state.timeZone : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["vipIds"] = state ? state.vipIds : undefined;
            resourceInputs["zoneId"] = state ? state.zoneId : undefined;
        } else {
            const args = argsOrState as DatabaseExadbVmClusterArgs | undefined;
            if ((!args || args.availabilityDomain === undefined) && !opts.urn) {
                throw new Error("Missing required property 'availabilityDomain'");
            }
            if ((!args || args.backupSubnetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'backupSubnetId'");
            }
            if ((!args || args.compartmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'compartmentId'");
            }
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if ((!args || args.exascaleDbStorageVaultId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'exascaleDbStorageVaultId'");
            }
            if ((!args || args.gridImageId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'gridImageId'");
            }
            if ((!args || args.hostname === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hostname'");
            }
            if ((!args || args.nodeConfig === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nodeConfig'");
            }
            if ((!args || args.shape === undefined) && !opts.urn) {
                throw new Error("Missing required property 'shape'");
            }
            if ((!args || args.sshPublicKeys === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sshPublicKeys'");
            }
            if ((!args || args.subnetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnetId'");
            }
            resourceInputs["availabilityDomain"] = args ? args.availabilityDomain : undefined;
            resourceInputs["backupNetworkNsgIds"] = args ? args.backupNetworkNsgIds : undefined;
            resourceInputs["backupSubnetId"] = args ? args.backupSubnetId : undefined;
            resourceInputs["clusterName"] = args ? args.clusterName : undefined;
            resourceInputs["compartmentId"] = args ? args.compartmentId : undefined;
            resourceInputs["dataCollectionOptions"] = args ? args.dataCollectionOptions : undefined;
            resourceInputs["definedTags"] = args ? args.definedTags : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["domain"] = args ? args.domain : undefined;
            resourceInputs["exascaleDbStorageVaultId"] = args ? args.exascaleDbStorageVaultId : undefined;
            resourceInputs["freeformTags"] = args ? args.freeformTags : undefined;
            resourceInputs["gridImageId"] = args ? args.gridImageId : undefined;
            resourceInputs["hostname"] = args ? args.hostname : undefined;
            resourceInputs["licenseModel"] = args ? args.licenseModel : undefined;
            resourceInputs["nodeConfig"] = args ? args.nodeConfig : undefined;
            resourceInputs["nodeResources"] = args ? args.nodeResources : undefined;
            resourceInputs["nsgIds"] = args ? args.nsgIds : undefined;
            resourceInputs["privateZoneId"] = args ? args.privateZoneId : undefined;
            resourceInputs["scanListenerPortTcp"] = args ? args.scanListenerPortTcp : undefined;
            resourceInputs["scanListenerPortTcpSsl"] = args ? args.scanListenerPortTcpSsl : undefined;
            resourceInputs["shape"] = args ? args.shape : undefined;
            resourceInputs["sshPublicKeys"] = args ? args.sshPublicKeys : undefined;
            resourceInputs["subnetId"] = args ? args.subnetId : undefined;
            resourceInputs["systemVersion"] = args ? args.systemVersion : undefined;
            resourceInputs["timeZone"] = args ? args.timeZone : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["giVersion"] = undefined /*out*/;
            resourceInputs["gridImageType"] = undefined /*out*/;
            resourceInputs["iormConfigCaches"] = undefined /*out*/;
            resourceInputs["lastUpdateHistoryEntryId"] = undefined /*out*/;
            resourceInputs["lifecycleDetails"] = undefined /*out*/;
            resourceInputs["listenerPort"] = undefined /*out*/;
            resourceInputs["scanDnsName"] = undefined /*out*/;
            resourceInputs["scanDnsRecordId"] = undefined /*out*/;
            resourceInputs["scanIpIds"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["systemTags"] = undefined /*out*/;
            resourceInputs["timeCreated"] = undefined /*out*/;
            resourceInputs["vipIds"] = undefined /*out*/;
            resourceInputs["zoneId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DatabaseExadbVmCluster.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DatabaseExadbVmCluster resources.
 */
export interface DatabaseExadbVmClusterState {
    availabilityDomain?: pulumi.Input<string>;
    backupNetworkNsgIds?: pulumi.Input<pulumi.Input<string>[]>;
    backupSubnetId?: pulumi.Input<string>;
    clusterName?: pulumi.Input<string>;
    compartmentId?: pulumi.Input<string>;
    dataCollectionOptions?: pulumi.Input<inputs.DatabaseExadbVmClusterDataCollectionOptions>;
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    displayName?: pulumi.Input<string>;
    domain?: pulumi.Input<string>;
    exascaleDbStorageVaultId?: pulumi.Input<string>;
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    giVersion?: pulumi.Input<string>;
    gridImageId?: pulumi.Input<string>;
    gridImageType?: pulumi.Input<string>;
    hostname?: pulumi.Input<string>;
    iormConfigCaches?: pulumi.Input<pulumi.Input<inputs.DatabaseExadbVmClusterIormConfigCach>[]>;
    lastUpdateHistoryEntryId?: pulumi.Input<string>;
    licenseModel?: pulumi.Input<string>;
    lifecycleDetails?: pulumi.Input<string>;
    listenerPort?: pulumi.Input<string>;
    nodeConfig?: pulumi.Input<inputs.DatabaseExadbVmClusterNodeConfig>;
    nodeResources?: pulumi.Input<pulumi.Input<inputs.DatabaseExadbVmClusterNodeResource>[]>;
    nsgIds?: pulumi.Input<pulumi.Input<string>[]>;
    privateZoneId?: pulumi.Input<string>;
    scanDnsName?: pulumi.Input<string>;
    scanDnsRecordId?: pulumi.Input<string>;
    scanIpIds?: pulumi.Input<pulumi.Input<string>[]>;
    scanListenerPortTcp?: pulumi.Input<number>;
    scanListenerPortTcpSsl?: pulumi.Input<number>;
    shape?: pulumi.Input<string>;
    sshPublicKeys?: pulumi.Input<pulumi.Input<string>[]>;
    state?: pulumi.Input<string>;
    subnetId?: pulumi.Input<string>;
    systemTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    systemVersion?: pulumi.Input<string>;
    timeCreated?: pulumi.Input<string>;
    timeZone?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.DatabaseExadbVmClusterTimeouts>;
    vipIds?: pulumi.Input<pulumi.Input<string>[]>;
    zoneId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DatabaseExadbVmCluster resource.
 */
export interface DatabaseExadbVmClusterArgs {
    availabilityDomain: pulumi.Input<string>;
    backupNetworkNsgIds?: pulumi.Input<pulumi.Input<string>[]>;
    backupSubnetId: pulumi.Input<string>;
    clusterName?: pulumi.Input<string>;
    compartmentId: pulumi.Input<string>;
    dataCollectionOptions?: pulumi.Input<inputs.DatabaseExadbVmClusterDataCollectionOptions>;
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    displayName: pulumi.Input<string>;
    domain?: pulumi.Input<string>;
    exascaleDbStorageVaultId: pulumi.Input<string>;
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    gridImageId: pulumi.Input<string>;
    hostname: pulumi.Input<string>;
    licenseModel?: pulumi.Input<string>;
    nodeConfig: pulumi.Input<inputs.DatabaseExadbVmClusterNodeConfig>;
    nodeResources?: pulumi.Input<pulumi.Input<inputs.DatabaseExadbVmClusterNodeResource>[]>;
    nsgIds?: pulumi.Input<pulumi.Input<string>[]>;
    privateZoneId?: pulumi.Input<string>;
    scanListenerPortTcp?: pulumi.Input<number>;
    scanListenerPortTcpSsl?: pulumi.Input<number>;
    shape: pulumi.Input<string>;
    sshPublicKeys: pulumi.Input<pulumi.Input<string>[]>;
    subnetId: pulumi.Input<string>;
    systemVersion?: pulumi.Input<string>;
    timeZone?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.DatabaseExadbVmClusterTimeouts>;
}
