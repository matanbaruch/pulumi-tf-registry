// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class NosqlTable extends pulumi.CustomResource {
    /**
     * Get an existing NosqlTable resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NosqlTableState, opts?: pulumi.CustomResourceOptions): NosqlTable {
        return new NosqlTable(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/nosqlTable:NosqlTable';

    /**
     * Returns true if the given object is an instance of NosqlTable.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NosqlTable {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NosqlTable.__pulumiType;
    }

    public readonly compartmentId!: pulumi.Output<string>;
    public readonly ddlStatement!: pulumi.Output<string>;
    public readonly definedTags!: pulumi.Output<{[key: string]: string}>;
    public readonly freeformTags!: pulumi.Output<{[key: string]: string}>;
    public readonly isAutoReclaimable!: pulumi.Output<boolean>;
    public /*out*/ readonly isMultiRegion!: pulumi.Output<boolean>;
    public /*out*/ readonly lifecycleDetails!: pulumi.Output<string>;
    public /*out*/ readonly localReplicaInitializationInPercent!: pulumi.Output<number>;
    public readonly name!: pulumi.Output<string>;
    public /*out*/ readonly replicas!: pulumi.Output<outputs.NosqlTableReplica[]>;
    public /*out*/ readonly schemaState!: pulumi.Output<string>;
    public /*out*/ readonly schemas!: pulumi.Output<outputs.NosqlTableSchema[]>;
    public /*out*/ readonly state!: pulumi.Output<string>;
    public /*out*/ readonly systemTags!: pulumi.Output<{[key: string]: string}>;
    public readonly tableLimits!: pulumi.Output<outputs.NosqlTableTableLimits | undefined>;
    public /*out*/ readonly timeCreated!: pulumi.Output<string>;
    public /*out*/ readonly timeOfExpiration!: pulumi.Output<string>;
    public /*out*/ readonly timeUpdated!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.NosqlTableTimeouts | undefined>;

    /**
     * Create a NosqlTable resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NosqlTableArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NosqlTableArgs | NosqlTableState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NosqlTableState | undefined;
            resourceInputs["compartmentId"] = state ? state.compartmentId : undefined;
            resourceInputs["ddlStatement"] = state ? state.ddlStatement : undefined;
            resourceInputs["definedTags"] = state ? state.definedTags : undefined;
            resourceInputs["freeformTags"] = state ? state.freeformTags : undefined;
            resourceInputs["isAutoReclaimable"] = state ? state.isAutoReclaimable : undefined;
            resourceInputs["isMultiRegion"] = state ? state.isMultiRegion : undefined;
            resourceInputs["lifecycleDetails"] = state ? state.lifecycleDetails : undefined;
            resourceInputs["localReplicaInitializationInPercent"] = state ? state.localReplicaInitializationInPercent : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["replicas"] = state ? state.replicas : undefined;
            resourceInputs["schemaState"] = state ? state.schemaState : undefined;
            resourceInputs["schemas"] = state ? state.schemas : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["systemTags"] = state ? state.systemTags : undefined;
            resourceInputs["tableLimits"] = state ? state.tableLimits : undefined;
            resourceInputs["timeCreated"] = state ? state.timeCreated : undefined;
            resourceInputs["timeOfExpiration"] = state ? state.timeOfExpiration : undefined;
            resourceInputs["timeUpdated"] = state ? state.timeUpdated : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as NosqlTableArgs | undefined;
            if ((!args || args.compartmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'compartmentId'");
            }
            if ((!args || args.ddlStatement === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ddlStatement'");
            }
            resourceInputs["compartmentId"] = args ? args.compartmentId : undefined;
            resourceInputs["ddlStatement"] = args ? args.ddlStatement : undefined;
            resourceInputs["definedTags"] = args ? args.definedTags : undefined;
            resourceInputs["freeformTags"] = args ? args.freeformTags : undefined;
            resourceInputs["isAutoReclaimable"] = args ? args.isAutoReclaimable : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["tableLimits"] = args ? args.tableLimits : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["isMultiRegion"] = undefined /*out*/;
            resourceInputs["lifecycleDetails"] = undefined /*out*/;
            resourceInputs["localReplicaInitializationInPercent"] = undefined /*out*/;
            resourceInputs["replicas"] = undefined /*out*/;
            resourceInputs["schemaState"] = undefined /*out*/;
            resourceInputs["schemas"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["systemTags"] = undefined /*out*/;
            resourceInputs["timeCreated"] = undefined /*out*/;
            resourceInputs["timeOfExpiration"] = undefined /*out*/;
            resourceInputs["timeUpdated"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NosqlTable.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering NosqlTable resources.
 */
export interface NosqlTableState {
    compartmentId?: pulumi.Input<string>;
    ddlStatement?: pulumi.Input<string>;
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    isAutoReclaimable?: pulumi.Input<boolean>;
    isMultiRegion?: pulumi.Input<boolean>;
    lifecycleDetails?: pulumi.Input<string>;
    localReplicaInitializationInPercent?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    replicas?: pulumi.Input<pulumi.Input<inputs.NosqlTableReplica>[]>;
    schemaState?: pulumi.Input<string>;
    schemas?: pulumi.Input<pulumi.Input<inputs.NosqlTableSchema>[]>;
    state?: pulumi.Input<string>;
    systemTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tableLimits?: pulumi.Input<inputs.NosqlTableTableLimits>;
    timeCreated?: pulumi.Input<string>;
    timeOfExpiration?: pulumi.Input<string>;
    timeUpdated?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.NosqlTableTimeouts>;
}

/**
 * The set of arguments for constructing a NosqlTable resource.
 */
export interface NosqlTableArgs {
    compartmentId: pulumi.Input<string>;
    ddlStatement: pulumi.Input<string>;
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    isAutoReclaimable?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    tableLimits?: pulumi.Input<inputs.NosqlTableTableLimits>;
    timeouts?: pulumi.Input<inputs.NosqlTableTimeouts>;
}
