// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getMonitoringAlarm(args: GetMonitoringAlarmArgs, opts?: pulumi.InvokeOptions): Promise<GetMonitoringAlarmResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getMonitoringAlarm:getMonitoringAlarm", {
        "alarmId": args.alarmId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getMonitoringAlarm.
 */
export interface GetMonitoringAlarmArgs {
    alarmId: string;
}

/**
 * A collection of values returned by getMonitoringAlarm.
 */
export interface GetMonitoringAlarmResult {
    readonly alarmId: string;
    readonly alarmSummary: string;
    readonly body: string;
    readonly compartmentId: string;
    readonly definedTags: {[key: string]: string};
    readonly destinations: string[];
    readonly displayName: string;
    readonly evaluationSlackDuration: string;
    readonly freeformTags: {[key: string]: string};
    readonly id: string;
    readonly isEnabled: boolean;
    readonly isNotificationsPerMetricDimensionEnabled: boolean;
    readonly messageFormat: string;
    readonly metricCompartmentId: string;
    readonly metricCompartmentIdInSubtree: boolean;
    readonly namespace: string;
    readonly notificationTitle: string;
    readonly notificationVersion: string;
    readonly overrides: outputs.GetMonitoringAlarmOverride[];
    readonly pendingDuration: string;
    readonly query: string;
    readonly repeatNotificationDuration: string;
    readonly resolution: string;
    readonly resourceGroup: string;
    readonly ruleName: string;
    readonly severity: string;
    readonly state: string;
    readonly suppressions: outputs.GetMonitoringAlarmSuppression[];
    readonly timeCreated: string;
    readonly timeUpdated: string;
}
export function getMonitoringAlarmOutput(args: GetMonitoringAlarmOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetMonitoringAlarmResult> {
    return pulumi.output(args).apply((a: any) => getMonitoringAlarm(a, opts))
}

/**
 * A collection of arguments for invoking getMonitoringAlarm.
 */
export interface GetMonitoringAlarmOutputArgs {
    alarmId: pulumi.Input<string>;
}
