// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getMeteringComputationUsageCarbonEmissionsQuery(args: GetMeteringComputationUsageCarbonEmissionsQueryArgs, opts?: pulumi.InvokeOptions): Promise<GetMeteringComputationUsageCarbonEmissionsQueryResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getMeteringComputationUsageCarbonEmissionsQuery:getMeteringComputationUsageCarbonEmissionsQuery", {
        "usageCarbonEmissionsQueryId": args.usageCarbonEmissionsQueryId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getMeteringComputationUsageCarbonEmissionsQuery.
 */
export interface GetMeteringComputationUsageCarbonEmissionsQueryArgs {
    usageCarbonEmissionsQueryId: string;
}

/**
 * A collection of values returned by getMeteringComputationUsageCarbonEmissionsQuery.
 */
export interface GetMeteringComputationUsageCarbonEmissionsQueryResult {
    readonly compartmentId: string;
    readonly id: string;
    readonly queryDefinitions: outputs.GetMeteringComputationUsageCarbonEmissionsQueryQueryDefinition[];
    readonly usageCarbonEmissionsQueryId: string;
}
export function getMeteringComputationUsageCarbonEmissionsQueryOutput(args: GetMeteringComputationUsageCarbonEmissionsQueryOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetMeteringComputationUsageCarbonEmissionsQueryResult> {
    return pulumi.output(args).apply((a: any) => getMeteringComputationUsageCarbonEmissionsQuery(a, opts))
}

/**
 * A collection of arguments for invoking getMeteringComputationUsageCarbonEmissionsQuery.
 */
export interface GetMeteringComputationUsageCarbonEmissionsQueryOutputArgs {
    usageCarbonEmissionsQueryId: pulumi.Input<string>;
}
