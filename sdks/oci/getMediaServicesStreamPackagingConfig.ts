// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getMediaServicesStreamPackagingConfig(args: GetMediaServicesStreamPackagingConfigArgs, opts?: pulumi.InvokeOptions): Promise<GetMediaServicesStreamPackagingConfigResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getMediaServicesStreamPackagingConfig:getMediaServicesStreamPackagingConfig", {
        "streamPackagingConfigId": args.streamPackagingConfigId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getMediaServicesStreamPackagingConfig.
 */
export interface GetMediaServicesStreamPackagingConfigArgs {
    streamPackagingConfigId: string;
}

/**
 * A collection of values returned by getMediaServicesStreamPackagingConfig.
 */
export interface GetMediaServicesStreamPackagingConfigResult {
    readonly compartmentId: string;
    readonly definedTags: {[key: string]: string};
    readonly displayName: string;
    readonly distributionChannelId: string;
    readonly encryptions: outputs.GetMediaServicesStreamPackagingConfigEncryption[];
    readonly freeformTags: {[key: string]: string};
    readonly id: string;
    readonly isLockOverride: boolean;
    readonly locks: outputs.GetMediaServicesStreamPackagingConfigLock[];
    readonly segmentTimeInSeconds: number;
    readonly state: string;
    readonly streamPackagingConfigId: string;
    readonly streamPackagingFormat: string;
    readonly systemTags: {[key: string]: string};
    readonly timeCreated: string;
    readonly timeUpdated: string;
}
export function getMediaServicesStreamPackagingConfigOutput(args: GetMediaServicesStreamPackagingConfigOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetMediaServicesStreamPackagingConfigResult> {
    return pulumi.output(args).apply((a: any) => getMediaServicesStreamPackagingConfig(a, opts))
}

/**
 * A collection of arguments for invoking getMediaServicesStreamPackagingConfig.
 */
export interface GetMediaServicesStreamPackagingConfigOutputArgs {
    streamPackagingConfigId: pulumi.Input<string>;
}
