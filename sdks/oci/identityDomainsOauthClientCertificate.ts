// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class IdentityDomainsOauthClientCertificate extends pulumi.CustomResource {
    /**
     * Get an existing IdentityDomainsOauthClientCertificate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IdentityDomainsOauthClientCertificateState, opts?: pulumi.CustomResourceOptions): IdentityDomainsOauthClientCertificate {
        return new IdentityDomainsOauthClientCertificate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/identityDomainsOauthClientCertificate:IdentityDomainsOauthClientCertificate';

    /**
     * Returns true if the given object is an instance of IdentityDomainsOauthClientCertificate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IdentityDomainsOauthClientCertificate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IdentityDomainsOauthClientCertificate.__pulumiType;
    }

    public readonly authorization!: pulumi.Output<string | undefined>;
    public /*out*/ readonly certEndDate!: pulumi.Output<string>;
    public /*out*/ readonly certStartDate!: pulumi.Output<string>;
    public readonly certificateAlias!: pulumi.Output<string>;
    public /*out*/ readonly compartmentOcid!: pulumi.Output<string>;
    public /*out*/ readonly deleteInProgress!: pulumi.Output<boolean>;
    public /*out*/ readonly domainOcid!: pulumi.Output<string>;
    public readonly externalId!: pulumi.Output<string>;
    public /*out*/ readonly idcsCreatedBies!: pulumi.Output<outputs.IdentityDomainsOauthClientCertificateIdcsCreatedBy[]>;
    public readonly idcsEndpoint!: pulumi.Output<string>;
    public /*out*/ readonly idcsLastModifiedBies!: pulumi.Output<outputs.IdentityDomainsOauthClientCertificateIdcsLastModifiedBy[]>;
    public /*out*/ readonly idcsLastUpgradedInRelease!: pulumi.Output<string>;
    public /*out*/ readonly idcsPreventedOperations!: pulumi.Output<string[]>;
    public readonly keyStoreId!: pulumi.Output<string>;
    public readonly keyStoreName!: pulumi.Output<string>;
    public readonly keyStorePassword!: pulumi.Output<string>;
    public readonly map!: pulumi.Output<string>;
    public /*out*/ readonly metas!: pulumi.Output<outputs.IdentityDomainsOauthClientCertificateMeta[]>;
    public readonly ocid!: pulumi.Output<string>;
    public readonly resourceTypeSchemaVersion!: pulumi.Output<string | undefined>;
    public readonly schemas!: pulumi.Output<string[]>;
    public /*out*/ readonly sha1thumbprint!: pulumi.Output<string>;
    public /*out*/ readonly sha256thumbprint!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<outputs.IdentityDomainsOauthClientCertificateTag[] | undefined>;
    public /*out*/ readonly tenancyOcid!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.IdentityDomainsOauthClientCertificateTimeouts | undefined>;
    public readonly x509base64certificate!: pulumi.Output<string>;

    /**
     * Create a IdentityDomainsOauthClientCertificate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IdentityDomainsOauthClientCertificateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IdentityDomainsOauthClientCertificateArgs | IdentityDomainsOauthClientCertificateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IdentityDomainsOauthClientCertificateState | undefined;
            resourceInputs["authorization"] = state ? state.authorization : undefined;
            resourceInputs["certEndDate"] = state ? state.certEndDate : undefined;
            resourceInputs["certStartDate"] = state ? state.certStartDate : undefined;
            resourceInputs["certificateAlias"] = state ? state.certificateAlias : undefined;
            resourceInputs["compartmentOcid"] = state ? state.compartmentOcid : undefined;
            resourceInputs["deleteInProgress"] = state ? state.deleteInProgress : undefined;
            resourceInputs["domainOcid"] = state ? state.domainOcid : undefined;
            resourceInputs["externalId"] = state ? state.externalId : undefined;
            resourceInputs["idcsCreatedBies"] = state ? state.idcsCreatedBies : undefined;
            resourceInputs["idcsEndpoint"] = state ? state.idcsEndpoint : undefined;
            resourceInputs["idcsLastModifiedBies"] = state ? state.idcsLastModifiedBies : undefined;
            resourceInputs["idcsLastUpgradedInRelease"] = state ? state.idcsLastUpgradedInRelease : undefined;
            resourceInputs["idcsPreventedOperations"] = state ? state.idcsPreventedOperations : undefined;
            resourceInputs["keyStoreId"] = state ? state.keyStoreId : undefined;
            resourceInputs["keyStoreName"] = state ? state.keyStoreName : undefined;
            resourceInputs["keyStorePassword"] = state ? state.keyStorePassword : undefined;
            resourceInputs["map"] = state ? state.map : undefined;
            resourceInputs["metas"] = state ? state.metas : undefined;
            resourceInputs["ocid"] = state ? state.ocid : undefined;
            resourceInputs["resourceTypeSchemaVersion"] = state ? state.resourceTypeSchemaVersion : undefined;
            resourceInputs["schemas"] = state ? state.schemas : undefined;
            resourceInputs["sha1thumbprint"] = state ? state.sha1thumbprint : undefined;
            resourceInputs["sha256thumbprint"] = state ? state.sha256thumbprint : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tenancyOcid"] = state ? state.tenancyOcid : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["x509base64certificate"] = state ? state.x509base64certificate : undefined;
        } else {
            const args = argsOrState as IdentityDomainsOauthClientCertificateArgs | undefined;
            if ((!args || args.certificateAlias === undefined) && !opts.urn) {
                throw new Error("Missing required property 'certificateAlias'");
            }
            if ((!args || args.idcsEndpoint === undefined) && !opts.urn) {
                throw new Error("Missing required property 'idcsEndpoint'");
            }
            if ((!args || args.schemas === undefined) && !opts.urn) {
                throw new Error("Missing required property 'schemas'");
            }
            if ((!args || args.x509base64certificate === undefined) && !opts.urn) {
                throw new Error("Missing required property 'x509base64certificate'");
            }
            resourceInputs["authorization"] = args ? args.authorization : undefined;
            resourceInputs["certificateAlias"] = args ? args.certificateAlias : undefined;
            resourceInputs["externalId"] = args ? args.externalId : undefined;
            resourceInputs["idcsEndpoint"] = args ? args.idcsEndpoint : undefined;
            resourceInputs["keyStoreId"] = args ? args.keyStoreId : undefined;
            resourceInputs["keyStoreName"] = args ? args.keyStoreName : undefined;
            resourceInputs["keyStorePassword"] = args?.keyStorePassword ? pulumi.secret(args.keyStorePassword) : undefined;
            resourceInputs["map"] = args ? args.map : undefined;
            resourceInputs["ocid"] = args ? args.ocid : undefined;
            resourceInputs["resourceTypeSchemaVersion"] = args ? args.resourceTypeSchemaVersion : undefined;
            resourceInputs["schemas"] = args ? args.schemas : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["x509base64certificate"] = args ? args.x509base64certificate : undefined;
            resourceInputs["certEndDate"] = undefined /*out*/;
            resourceInputs["certStartDate"] = undefined /*out*/;
            resourceInputs["compartmentOcid"] = undefined /*out*/;
            resourceInputs["deleteInProgress"] = undefined /*out*/;
            resourceInputs["domainOcid"] = undefined /*out*/;
            resourceInputs["idcsCreatedBies"] = undefined /*out*/;
            resourceInputs["idcsLastModifiedBies"] = undefined /*out*/;
            resourceInputs["idcsLastUpgradedInRelease"] = undefined /*out*/;
            resourceInputs["idcsPreventedOperations"] = undefined /*out*/;
            resourceInputs["metas"] = undefined /*out*/;
            resourceInputs["sha1thumbprint"] = undefined /*out*/;
            resourceInputs["sha256thumbprint"] = undefined /*out*/;
            resourceInputs["tenancyOcid"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["keyStorePassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(IdentityDomainsOauthClientCertificate.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering IdentityDomainsOauthClientCertificate resources.
 */
export interface IdentityDomainsOauthClientCertificateState {
    authorization?: pulumi.Input<string>;
    certEndDate?: pulumi.Input<string>;
    certStartDate?: pulumi.Input<string>;
    certificateAlias?: pulumi.Input<string>;
    compartmentOcid?: pulumi.Input<string>;
    deleteInProgress?: pulumi.Input<boolean>;
    domainOcid?: pulumi.Input<string>;
    externalId?: pulumi.Input<string>;
    idcsCreatedBies?: pulumi.Input<pulumi.Input<inputs.IdentityDomainsOauthClientCertificateIdcsCreatedBy>[]>;
    idcsEndpoint?: pulumi.Input<string>;
    idcsLastModifiedBies?: pulumi.Input<pulumi.Input<inputs.IdentityDomainsOauthClientCertificateIdcsLastModifiedBy>[]>;
    idcsLastUpgradedInRelease?: pulumi.Input<string>;
    idcsPreventedOperations?: pulumi.Input<pulumi.Input<string>[]>;
    keyStoreId?: pulumi.Input<string>;
    keyStoreName?: pulumi.Input<string>;
    keyStorePassword?: pulumi.Input<string>;
    map?: pulumi.Input<string>;
    metas?: pulumi.Input<pulumi.Input<inputs.IdentityDomainsOauthClientCertificateMeta>[]>;
    ocid?: pulumi.Input<string>;
    resourceTypeSchemaVersion?: pulumi.Input<string>;
    schemas?: pulumi.Input<pulumi.Input<string>[]>;
    sha1thumbprint?: pulumi.Input<string>;
    sha256thumbprint?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.IdentityDomainsOauthClientCertificateTag>[]>;
    tenancyOcid?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.IdentityDomainsOauthClientCertificateTimeouts>;
    x509base64certificate?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a IdentityDomainsOauthClientCertificate resource.
 */
export interface IdentityDomainsOauthClientCertificateArgs {
    authorization?: pulumi.Input<string>;
    certificateAlias: pulumi.Input<string>;
    externalId?: pulumi.Input<string>;
    idcsEndpoint: pulumi.Input<string>;
    keyStoreId?: pulumi.Input<string>;
    keyStoreName?: pulumi.Input<string>;
    keyStorePassword?: pulumi.Input<string>;
    map?: pulumi.Input<string>;
    ocid?: pulumi.Input<string>;
    resourceTypeSchemaVersion?: pulumi.Input<string>;
    schemas: pulumi.Input<pulumi.Input<string>[]>;
    tags?: pulumi.Input<pulumi.Input<inputs.IdentityDomainsOauthClientCertificateTag>[]>;
    timeouts?: pulumi.Input<inputs.IdentityDomainsOauthClientCertificateTimeouts>;
    x509base64certificate: pulumi.Input<string>;
}
