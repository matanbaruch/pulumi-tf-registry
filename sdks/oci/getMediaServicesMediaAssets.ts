// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getMediaServicesMediaAssets(args?: GetMediaServicesMediaAssetsArgs, opts?: pulumi.InvokeOptions): Promise<GetMediaServicesMediaAssetsResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getMediaServicesMediaAssets:getMediaServicesMediaAssets", {
        "bucket": args.bucket,
        "compartmentId": args.compartmentId,
        "displayName": args.displayName,
        "distributionChannelId": args.distributionChannelId,
        "filters": args.filters,
        "id": args.id,
        "masterMediaAssetId": args.masterMediaAssetId,
        "mediaWorkflowJobId": args.mediaWorkflowJobId,
        "object": args.object,
        "parentMediaAssetId": args.parentMediaAssetId,
        "sourceMediaWorkflowId": args.sourceMediaWorkflowId,
        "sourceMediaWorkflowVersion": args.sourceMediaWorkflowVersion,
        "state": args.state,
        "type": args.type,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getMediaServicesMediaAssets.
 */
export interface GetMediaServicesMediaAssetsArgs {
    bucket?: string;
    compartmentId?: string;
    displayName?: string;
    distributionChannelId?: string;
    filters?: inputs.GetMediaServicesMediaAssetsFilter[];
    id?: string;
    masterMediaAssetId?: string;
    mediaWorkflowJobId?: string;
    object?: string;
    parentMediaAssetId?: string;
    sourceMediaWorkflowId?: string;
    sourceMediaWorkflowVersion?: string;
    state?: string;
    type?: string;
}

/**
 * A collection of values returned by getMediaServicesMediaAssets.
 */
export interface GetMediaServicesMediaAssetsResult {
    readonly bucket?: string;
    readonly compartmentId?: string;
    readonly displayName?: string;
    readonly distributionChannelId?: string;
    readonly filters?: outputs.GetMediaServicesMediaAssetsFilter[];
    readonly id: string;
    readonly masterMediaAssetId?: string;
    readonly mediaAssetCollections: outputs.GetMediaServicesMediaAssetsMediaAssetCollection[];
    readonly mediaWorkflowJobId?: string;
    readonly object?: string;
    readonly parentMediaAssetId?: string;
    readonly sourceMediaWorkflowId?: string;
    readonly sourceMediaWorkflowVersion?: string;
    readonly state?: string;
    readonly type?: string;
}
export function getMediaServicesMediaAssetsOutput(args?: GetMediaServicesMediaAssetsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetMediaServicesMediaAssetsResult> {
    return pulumi.output(args).apply((a: any) => getMediaServicesMediaAssets(a, opts))
}

/**
 * A collection of arguments for invoking getMediaServicesMediaAssets.
 */
export interface GetMediaServicesMediaAssetsOutputArgs {
    bucket?: pulumi.Input<string>;
    compartmentId?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    distributionChannelId?: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.GetMediaServicesMediaAssetsFilterArgs>[]>;
    id?: pulumi.Input<string>;
    masterMediaAssetId?: pulumi.Input<string>;
    mediaWorkflowJobId?: pulumi.Input<string>;
    object?: pulumi.Input<string>;
    parentMediaAssetId?: pulumi.Input<string>;
    sourceMediaWorkflowId?: pulumi.Input<string>;
    sourceMediaWorkflowVersion?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}
