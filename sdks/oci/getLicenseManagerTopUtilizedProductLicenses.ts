// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getLicenseManagerTopUtilizedProductLicenses(args: GetLicenseManagerTopUtilizedProductLicensesArgs, opts?: pulumi.InvokeOptions): Promise<GetLicenseManagerTopUtilizedProductLicensesResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getLicenseManagerTopUtilizedProductLicenses:getLicenseManagerTopUtilizedProductLicenses", {
        "compartmentId": args.compartmentId,
        "id": args.id,
        "isCompartmentIdInSubtree": args.isCompartmentIdInSubtree,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getLicenseManagerTopUtilizedProductLicenses.
 */
export interface GetLicenseManagerTopUtilizedProductLicensesArgs {
    compartmentId: string;
    id?: string;
    isCompartmentIdInSubtree?: boolean;
}

/**
 * A collection of values returned by getLicenseManagerTopUtilizedProductLicenses.
 */
export interface GetLicenseManagerTopUtilizedProductLicensesResult {
    readonly compartmentId: string;
    readonly id: string;
    readonly isCompartmentIdInSubtree?: boolean;
    readonly items: outputs.GetLicenseManagerTopUtilizedProductLicensesItem[];
}
export function getLicenseManagerTopUtilizedProductLicensesOutput(args: GetLicenseManagerTopUtilizedProductLicensesOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetLicenseManagerTopUtilizedProductLicensesResult> {
    return pulumi.output(args).apply((a: any) => getLicenseManagerTopUtilizedProductLicenses(a, opts))
}

/**
 * A collection of arguments for invoking getLicenseManagerTopUtilizedProductLicenses.
 */
export interface GetLicenseManagerTopUtilizedProductLicensesOutputArgs {
    compartmentId: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    isCompartmentIdInSubtree?: pulumi.Input<boolean>;
}
