// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getDataSafeTargetDatabasesColumns(args: GetDataSafeTargetDatabasesColumnsArgs, opts?: pulumi.InvokeOptions): Promise<GetDataSafeTargetDatabasesColumnsResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getDataSafeTargetDatabasesColumns:getDataSafeTargetDatabasesColumns", {
        "columnNameContains": args.columnNameContains,
        "columnNames": args.columnNames,
        "datatypes": args.datatypes,
        "filters": args.filters,
        "id": args.id,
        "schemaNameContains": args.schemaNameContains,
        "schemaNames": args.schemaNames,
        "tableNameContains": args.tableNameContains,
        "tableNames": args.tableNames,
        "targetDatabaseId": args.targetDatabaseId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getDataSafeTargetDatabasesColumns.
 */
export interface GetDataSafeTargetDatabasesColumnsArgs {
    columnNameContains?: string;
    columnNames?: string[];
    datatypes?: string[];
    filters?: inputs.GetDataSafeTargetDatabasesColumnsFilter[];
    id?: string;
    schemaNameContains?: string;
    schemaNames?: string[];
    tableNameContains?: string;
    tableNames?: string[];
    targetDatabaseId: string;
}

/**
 * A collection of values returned by getDataSafeTargetDatabasesColumns.
 */
export interface GetDataSafeTargetDatabasesColumnsResult {
    readonly columnNameContains?: string;
    readonly columnNames?: string[];
    readonly columns: outputs.GetDataSafeTargetDatabasesColumnsColumn[];
    readonly datatypes?: string[];
    readonly filters?: outputs.GetDataSafeTargetDatabasesColumnsFilter[];
    readonly id: string;
    readonly schemaNameContains?: string;
    readonly schemaNames?: string[];
    readonly tableNameContains?: string;
    readonly tableNames?: string[];
    readonly targetDatabaseId: string;
}
export function getDataSafeTargetDatabasesColumnsOutput(args: GetDataSafeTargetDatabasesColumnsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDataSafeTargetDatabasesColumnsResult> {
    return pulumi.output(args).apply((a: any) => getDataSafeTargetDatabasesColumns(a, opts))
}

/**
 * A collection of arguments for invoking getDataSafeTargetDatabasesColumns.
 */
export interface GetDataSafeTargetDatabasesColumnsOutputArgs {
    columnNameContains?: pulumi.Input<string>;
    columnNames?: pulumi.Input<pulumi.Input<string>[]>;
    datatypes?: pulumi.Input<pulumi.Input<string>[]>;
    filters?: pulumi.Input<pulumi.Input<inputs.GetDataSafeTargetDatabasesColumnsFilterArgs>[]>;
    id?: pulumi.Input<string>;
    schemaNameContains?: pulumi.Input<string>;
    schemaNames?: pulumi.Input<pulumi.Input<string>[]>;
    tableNameContains?: pulumi.Input<string>;
    tableNames?: pulumi.Input<pulumi.Input<string>[]>;
    targetDatabaseId: pulumi.Input<string>;
}
