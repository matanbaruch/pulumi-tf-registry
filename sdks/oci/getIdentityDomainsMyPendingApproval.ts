// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getIdentityDomainsMyPendingApproval(args: GetIdentityDomainsMyPendingApprovalArgs, opts?: pulumi.InvokeOptions): Promise<GetIdentityDomainsMyPendingApprovalResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getIdentityDomainsMyPendingApproval:getIdentityDomainsMyPendingApproval", {
        "authorization": args.authorization,
        "id": args.id,
        "idcsEndpoint": args.idcsEndpoint,
        "myPendingApprovalId": args.myPendingApprovalId,
        "resourceTypeSchemaVersion": args.resourceTypeSchemaVersion,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getIdentityDomainsMyPendingApproval.
 */
export interface GetIdentityDomainsMyPendingApprovalArgs {
    authorization?: string;
    id?: string;
    idcsEndpoint: string;
    myPendingApprovalId: string;
    resourceTypeSchemaVersion?: string;
}

/**
 * A collection of values returned by getIdentityDomainsMyPendingApproval.
 */
export interface GetIdentityDomainsMyPendingApprovalResult {
    readonly authorization?: string;
    readonly compartmentOcid: string;
    readonly deleteInProgress: boolean;
    readonly domainOcid: string;
    readonly expires: string;
    readonly id: string;
    readonly idcsCreatedBies: outputs.GetIdentityDomainsMyPendingApprovalIdcsCreatedBy[];
    readonly idcsEndpoint: string;
    readonly idcsLastModifiedBies: outputs.GetIdentityDomainsMyPendingApprovalIdcsLastModifiedBy[];
    readonly idcsLastUpgradedInRelease: string;
    readonly idcsPreventedOperations: string[];
    readonly justification: string;
    readonly metas: outputs.GetIdentityDomainsMyPendingApprovalMeta[];
    readonly myPendingApprovalId: string;
    readonly ocid: string;
    readonly requestCreatedTime: string;
    readonly requestDetails: string;
    readonly requestId: string;
    readonly requestOcid: string;
    readonly resourceDisplayName: string;
    readonly resourceType: string;
    readonly resourceTypeSchemaVersion?: string;
    readonly responseTime: string;
    readonly schemas: string[];
    readonly status: string;
    readonly tags: outputs.GetIdentityDomainsMyPendingApprovalTag[];
    readonly tenancyOcid: string;
}
export function getIdentityDomainsMyPendingApprovalOutput(args: GetIdentityDomainsMyPendingApprovalOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetIdentityDomainsMyPendingApprovalResult> {
    return pulumi.output(args).apply((a: any) => getIdentityDomainsMyPendingApproval(a, opts))
}

/**
 * A collection of arguments for invoking getIdentityDomainsMyPendingApproval.
 */
export interface GetIdentityDomainsMyPendingApprovalOutputArgs {
    authorization?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    idcsEndpoint: pulumi.Input<string>;
    myPendingApprovalId: pulumi.Input<string>;
    resourceTypeSchemaVersion?: pulumi.Input<string>;
}
