// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getAdmVulnerabilityAudit(args: GetAdmVulnerabilityAuditArgs, opts?: pulumi.InvokeOptions): Promise<GetAdmVulnerabilityAuditResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getAdmVulnerabilityAudit:getAdmVulnerabilityAudit", {
        "vulnerabilityAuditId": args.vulnerabilityAuditId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getAdmVulnerabilityAudit.
 */
export interface GetAdmVulnerabilityAuditArgs {
    vulnerabilityAuditId: string;
}

/**
 * A collection of values returned by getAdmVulnerabilityAudit.
 */
export interface GetAdmVulnerabilityAuditResult {
    readonly applicationDependencies: outputs.GetAdmVulnerabilityAuditApplicationDependency[];
    readonly buildType: string;
    readonly compartmentId: string;
    readonly configurations: outputs.GetAdmVulnerabilityAuditConfiguration[];
    readonly definedTags: {[key: string]: string};
    readonly displayName: string;
    readonly freeformTags: {[key: string]: string};
    readonly id: string;
    readonly isSuccess: boolean;
    readonly knowledgeBaseId: string;
    readonly lifecycleDetails: string;
    readonly maxObservedCvssV2score: number;
    readonly maxObservedCvssV2scoreWithIgnored: number;
    readonly maxObservedCvssV3score: number;
    readonly maxObservedCvssV3scoreWithIgnored: number;
    readonly maxObservedSeverity: string;
    readonly maxObservedSeverityWithIgnored: string;
    readonly sources: outputs.GetAdmVulnerabilityAuditSource[];
    readonly state: string;
    readonly systemTags: {[key: string]: string};
    readonly timeCreated: string;
    readonly timeUpdated: string;
    readonly usageDatas: outputs.GetAdmVulnerabilityAuditUsageData[];
    readonly vulnerabilities: outputs.GetAdmVulnerabilityAuditVulnerability[];
    readonly vulnerabilityAuditId: string;
    readonly vulnerableArtifactsCount: number;
    readonly vulnerableArtifactsCountWithIgnored: number;
}
export function getAdmVulnerabilityAuditOutput(args: GetAdmVulnerabilityAuditOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetAdmVulnerabilityAuditResult> {
    return pulumi.output(args).apply((a: any) => getAdmVulnerabilityAudit(a, opts))
}

/**
 * A collection of arguments for invoking getAdmVulnerabilityAudit.
 */
export interface GetAdmVulnerabilityAuditOutputArgs {
    vulnerabilityAuditId: pulumi.Input<string>;
}
