// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class FileStorageMountTarget extends pulumi.CustomResource {
    /**
     * Get an existing FileStorageMountTarget resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FileStorageMountTargetState, opts?: pulumi.CustomResourceOptions): FileStorageMountTarget {
        return new FileStorageMountTarget(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/fileStorageMountTarget:FileStorageMountTarget';

    /**
     * Returns true if the given object is an instance of FileStorageMountTarget.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FileStorageMountTarget {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FileStorageMountTarget.__pulumiType;
    }

    public readonly availabilityDomain!: pulumi.Output<string>;
    public readonly compartmentId!: pulumi.Output<string>;
    public readonly definedTags!: pulumi.Output<{[key: string]: string}>;
    public readonly displayName!: pulumi.Output<string>;
    public /*out*/ readonly exportSetId!: pulumi.Output<string>;
    public readonly freeformTags!: pulumi.Output<{[key: string]: string}>;
    public readonly hostnameLabel!: pulumi.Output<string>;
    public readonly idmapType!: pulumi.Output<string>;
    public readonly ipAddress!: pulumi.Output<string>;
    public readonly kerberos!: pulumi.Output<outputs.FileStorageMountTargetKerberos | undefined>;
    public readonly ldapIdmap!: pulumi.Output<outputs.FileStorageMountTargetLdapIdmap | undefined>;
    public /*out*/ readonly lifecycleDetails!: pulumi.Output<string>;
    public readonly nsgIds!: pulumi.Output<string[]>;
    public /*out*/ readonly observedThroughput!: pulumi.Output<string>;
    public /*out*/ readonly privateIpIds!: pulumi.Output<string[]>;
    public readonly requestedThroughput!: pulumi.Output<string>;
    public /*out*/ readonly reservedStorageCapacity!: pulumi.Output<string>;
    public /*out*/ readonly state!: pulumi.Output<string>;
    public readonly subnetId!: pulumi.Output<string>;
    public /*out*/ readonly timeBillingCycleEnd!: pulumi.Output<string>;
    public /*out*/ readonly timeCreated!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.FileStorageMountTargetTimeouts | undefined>;

    /**
     * Create a FileStorageMountTarget resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FileStorageMountTargetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FileStorageMountTargetArgs | FileStorageMountTargetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FileStorageMountTargetState | undefined;
            resourceInputs["availabilityDomain"] = state ? state.availabilityDomain : undefined;
            resourceInputs["compartmentId"] = state ? state.compartmentId : undefined;
            resourceInputs["definedTags"] = state ? state.definedTags : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["exportSetId"] = state ? state.exportSetId : undefined;
            resourceInputs["freeformTags"] = state ? state.freeformTags : undefined;
            resourceInputs["hostnameLabel"] = state ? state.hostnameLabel : undefined;
            resourceInputs["idmapType"] = state ? state.idmapType : undefined;
            resourceInputs["ipAddress"] = state ? state.ipAddress : undefined;
            resourceInputs["kerberos"] = state ? state.kerberos : undefined;
            resourceInputs["ldapIdmap"] = state ? state.ldapIdmap : undefined;
            resourceInputs["lifecycleDetails"] = state ? state.lifecycleDetails : undefined;
            resourceInputs["nsgIds"] = state ? state.nsgIds : undefined;
            resourceInputs["observedThroughput"] = state ? state.observedThroughput : undefined;
            resourceInputs["privateIpIds"] = state ? state.privateIpIds : undefined;
            resourceInputs["requestedThroughput"] = state ? state.requestedThroughput : undefined;
            resourceInputs["reservedStorageCapacity"] = state ? state.reservedStorageCapacity : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["subnetId"] = state ? state.subnetId : undefined;
            resourceInputs["timeBillingCycleEnd"] = state ? state.timeBillingCycleEnd : undefined;
            resourceInputs["timeCreated"] = state ? state.timeCreated : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as FileStorageMountTargetArgs | undefined;
            if ((!args || args.availabilityDomain === undefined) && !opts.urn) {
                throw new Error("Missing required property 'availabilityDomain'");
            }
            if ((!args || args.compartmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'compartmentId'");
            }
            if ((!args || args.subnetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnetId'");
            }
            resourceInputs["availabilityDomain"] = args ? args.availabilityDomain : undefined;
            resourceInputs["compartmentId"] = args ? args.compartmentId : undefined;
            resourceInputs["definedTags"] = args ? args.definedTags : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["freeformTags"] = args ? args.freeformTags : undefined;
            resourceInputs["hostnameLabel"] = args ? args.hostnameLabel : undefined;
            resourceInputs["idmapType"] = args ? args.idmapType : undefined;
            resourceInputs["ipAddress"] = args ? args.ipAddress : undefined;
            resourceInputs["kerberos"] = args ? args.kerberos : undefined;
            resourceInputs["ldapIdmap"] = args ? args.ldapIdmap : undefined;
            resourceInputs["nsgIds"] = args ? args.nsgIds : undefined;
            resourceInputs["requestedThroughput"] = args ? args.requestedThroughput : undefined;
            resourceInputs["subnetId"] = args ? args.subnetId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["exportSetId"] = undefined /*out*/;
            resourceInputs["lifecycleDetails"] = undefined /*out*/;
            resourceInputs["observedThroughput"] = undefined /*out*/;
            resourceInputs["privateIpIds"] = undefined /*out*/;
            resourceInputs["reservedStorageCapacity"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["timeBillingCycleEnd"] = undefined /*out*/;
            resourceInputs["timeCreated"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FileStorageMountTarget.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering FileStorageMountTarget resources.
 */
export interface FileStorageMountTargetState {
    availabilityDomain?: pulumi.Input<string>;
    compartmentId?: pulumi.Input<string>;
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    displayName?: pulumi.Input<string>;
    exportSetId?: pulumi.Input<string>;
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    hostnameLabel?: pulumi.Input<string>;
    idmapType?: pulumi.Input<string>;
    ipAddress?: pulumi.Input<string>;
    kerberos?: pulumi.Input<inputs.FileStorageMountTargetKerberos>;
    ldapIdmap?: pulumi.Input<inputs.FileStorageMountTargetLdapIdmap>;
    lifecycleDetails?: pulumi.Input<string>;
    nsgIds?: pulumi.Input<pulumi.Input<string>[]>;
    observedThroughput?: pulumi.Input<string>;
    privateIpIds?: pulumi.Input<pulumi.Input<string>[]>;
    requestedThroughput?: pulumi.Input<string>;
    reservedStorageCapacity?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    subnetId?: pulumi.Input<string>;
    timeBillingCycleEnd?: pulumi.Input<string>;
    timeCreated?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.FileStorageMountTargetTimeouts>;
}

/**
 * The set of arguments for constructing a FileStorageMountTarget resource.
 */
export interface FileStorageMountTargetArgs {
    availabilityDomain: pulumi.Input<string>;
    compartmentId: pulumi.Input<string>;
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    displayName?: pulumi.Input<string>;
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    hostnameLabel?: pulumi.Input<string>;
    idmapType?: pulumi.Input<string>;
    ipAddress?: pulumi.Input<string>;
    kerberos?: pulumi.Input<inputs.FileStorageMountTargetKerberos>;
    ldapIdmap?: pulumi.Input<inputs.FileStorageMountTargetLdapIdmap>;
    nsgIds?: pulumi.Input<pulumi.Input<string>[]>;
    requestedThroughput?: pulumi.Input<string>;
    subnetId: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.FileStorageMountTargetTimeouts>;
}
