// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getDatabaseBackups(args?: GetDatabaseBackupsArgs, opts?: pulumi.InvokeOptions): Promise<GetDatabaseBackupsResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getDatabaseBackups:getDatabaseBackups", {
        "compartmentId": args.compartmentId,
        "databaseId": args.databaseId,
        "filters": args.filters,
        "id": args.id,
        "shapeFamily": args.shapeFamily,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getDatabaseBackups.
 */
export interface GetDatabaseBackupsArgs {
    compartmentId?: string;
    databaseId?: string;
    filters?: inputs.GetDatabaseBackupsFilter[];
    id?: string;
    shapeFamily?: string;
}

/**
 * A collection of values returned by getDatabaseBackups.
 */
export interface GetDatabaseBackupsResult {
    readonly backups: outputs.GetDatabaseBackupsBackup[];
    readonly compartmentId?: string;
    readonly databaseId?: string;
    readonly filters?: outputs.GetDatabaseBackupsFilter[];
    readonly id: string;
    readonly shapeFamily?: string;
}
export function getDatabaseBackupsOutput(args?: GetDatabaseBackupsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDatabaseBackupsResult> {
    return pulumi.output(args).apply((a: any) => getDatabaseBackups(a, opts))
}

/**
 * A collection of arguments for invoking getDatabaseBackups.
 */
export interface GetDatabaseBackupsOutputArgs {
    compartmentId?: pulumi.Input<string>;
    databaseId?: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.GetDatabaseBackupsFilterArgs>[]>;
    id?: pulumi.Input<string>;
    shapeFamily?: pulumi.Input<string>;
}
