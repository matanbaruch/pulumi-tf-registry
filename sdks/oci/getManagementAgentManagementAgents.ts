// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getManagementAgentManagementAgents(args: GetManagementAgentManagementAgentsArgs, opts?: pulumi.InvokeOptions): Promise<GetManagementAgentManagementAgentsResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getManagementAgentManagementAgents:getManagementAgentManagementAgents", {
        "accessLevel": args.accessLevel,
        "availabilityStatus": args.availabilityStatus,
        "compartmentId": args.compartmentId,
        "compartmentIdInSubtree": args.compartmentIdInSubtree,
        "dataSourceNames": args.dataSourceNames,
        "dataSourceType": args.dataSourceType,
        "displayName": args.displayName,
        "filters": args.filters,
        "gatewayIds": args.gatewayIds,
        "hostId": args.hostId,
        "id": args.id,
        "installType": args.installType,
        "isCustomerDeployed": args.isCustomerDeployed,
        "platformTypes": args.platformTypes,
        "pluginNames": args.pluginNames,
        "state": args.state,
        "versions": args.versions,
        "waitForHostId": args.waitForHostId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getManagementAgentManagementAgents.
 */
export interface GetManagementAgentManagementAgentsArgs {
    accessLevel?: string;
    availabilityStatus?: string;
    compartmentId: string;
    compartmentIdInSubtree?: boolean;
    dataSourceNames?: string[];
    dataSourceType?: string;
    displayName?: string;
    filters?: inputs.GetManagementAgentManagementAgentsFilter[];
    gatewayIds?: string[];
    hostId?: string;
    id?: string;
    installType?: string;
    isCustomerDeployed?: boolean;
    platformTypes?: string[];
    pluginNames?: string[];
    state?: string;
    versions?: string[];
    waitForHostId?: number;
}

/**
 * A collection of values returned by getManagementAgentManagementAgents.
 */
export interface GetManagementAgentManagementAgentsResult {
    readonly accessLevel?: string;
    readonly availabilityStatus?: string;
    readonly compartmentId: string;
    readonly compartmentIdInSubtree?: boolean;
    readonly dataSourceNames?: string[];
    readonly dataSourceType?: string;
    readonly displayName?: string;
    readonly filters?: outputs.GetManagementAgentManagementAgentsFilter[];
    readonly gatewayIds?: string[];
    readonly hostId?: string;
    readonly id: string;
    readonly installType?: string;
    readonly isCustomerDeployed?: boolean;
    readonly managementAgents: outputs.GetManagementAgentManagementAgentsManagementAgent[];
    readonly platformTypes?: string[];
    readonly pluginNames?: string[];
    readonly state?: string;
    readonly versions?: string[];
    readonly waitForHostId?: number;
}
export function getManagementAgentManagementAgentsOutput(args: GetManagementAgentManagementAgentsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetManagementAgentManagementAgentsResult> {
    return pulumi.output(args).apply((a: any) => getManagementAgentManagementAgents(a, opts))
}

/**
 * A collection of arguments for invoking getManagementAgentManagementAgents.
 */
export interface GetManagementAgentManagementAgentsOutputArgs {
    accessLevel?: pulumi.Input<string>;
    availabilityStatus?: pulumi.Input<string>;
    compartmentId: pulumi.Input<string>;
    compartmentIdInSubtree?: pulumi.Input<boolean>;
    dataSourceNames?: pulumi.Input<pulumi.Input<string>[]>;
    dataSourceType?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.GetManagementAgentManagementAgentsFilterArgs>[]>;
    gatewayIds?: pulumi.Input<pulumi.Input<string>[]>;
    hostId?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    installType?: pulumi.Input<string>;
    isCustomerDeployed?: pulumi.Input<boolean>;
    platformTypes?: pulumi.Input<pulumi.Input<string>[]>;
    pluginNames?: pulumi.Input<pulumi.Input<string>[]>;
    state?: pulumi.Input<string>;
    versions?: pulumi.Input<pulumi.Input<string>[]>;
    waitForHostId?: pulumi.Input<number>;
}
