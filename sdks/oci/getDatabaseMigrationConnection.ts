// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getDatabaseMigrationConnection(args: GetDatabaseMigrationConnectionArgs, opts?: pulumi.InvokeOptions): Promise<GetDatabaseMigrationConnectionResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getDatabaseMigrationConnection:getDatabaseMigrationConnection", {
        "connectionId": args.connectionId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getDatabaseMigrationConnection.
 */
export interface GetDatabaseMigrationConnectionArgs {
    connectionId: string;
}

/**
 * A collection of values returned by getDatabaseMigrationConnection.
 */
export interface GetDatabaseMigrationConnectionResult {
    readonly additionalAttributes: outputs.GetDatabaseMigrationConnectionAdditionalAttribute[];
    readonly compartmentId: string;
    readonly connectionId: string;
    readonly connectionString: string;
    readonly connectionType: string;
    readonly databaseId: string;
    readonly databaseName: string;
    readonly dbSystemId: string;
    readonly definedTags: {[key: string]: string};
    readonly description: string;
    readonly displayName: string;
    readonly freeformTags: {[key: string]: string};
    readonly host: string;
    readonly id: string;
    readonly ingressIps: outputs.GetDatabaseMigrationConnectionIngressIp[];
    readonly keyId: string;
    readonly lifecycleDetails: string;
    readonly nsgIds: string[];
    readonly password: string;
    readonly port: number;
    readonly privateEndpointId: string;
    readonly replicationPassword: string;
    readonly replicationUsername: string;
    readonly secretId: string;
    readonly securityProtocol: string;
    readonly sshHost: string;
    readonly sshKey: string;
    readonly sshSudoLocation: string;
    readonly sshUser: string;
    readonly sslCa: string;
    readonly sslCert: string;
    readonly sslCrl: string;
    readonly sslKey: string;
    readonly sslMode: string;
    readonly state: string;
    readonly subnetId: string;
    readonly systemTags: {[key: string]: string};
    readonly technologyType: string;
    readonly timeCreated: string;
    readonly timeUpdated: string;
    readonly username: string;
    readonly vaultId: string;
    readonly wallet: string;
}
export function getDatabaseMigrationConnectionOutput(args: GetDatabaseMigrationConnectionOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDatabaseMigrationConnectionResult> {
    return pulumi.output(args).apply((a: any) => getDatabaseMigrationConnection(a, opts))
}

/**
 * A collection of arguments for invoking getDatabaseMigrationConnection.
 */
export interface GetDatabaseMigrationConnectionOutputArgs {
    connectionId: pulumi.Input<string>;
}
