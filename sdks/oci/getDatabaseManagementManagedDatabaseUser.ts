// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getDatabaseManagementManagedDatabaseUser(args: GetDatabaseManagementManagedDatabaseUserArgs, opts?: pulumi.InvokeOptions): Promise<GetDatabaseManagementManagedDatabaseUserResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getDatabaseManagementManagedDatabaseUser:getDatabaseManagementManagedDatabaseUser", {
        "id": args.id,
        "managedDatabaseId": args.managedDatabaseId,
        "opcNamedCredentialId": args.opcNamedCredentialId,
        "userName": args.userName,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getDatabaseManagementManagedDatabaseUser.
 */
export interface GetDatabaseManagementManagedDatabaseUserArgs {
    id?: string;
    managedDatabaseId: string;
    opcNamedCredentialId?: string;
    userName: string;
}

/**
 * A collection of values returned by getDatabaseManagementManagedDatabaseUser.
 */
export interface GetDatabaseManagementManagedDatabaseUserResult {
    readonly allShared: string;
    readonly authentication: string;
    readonly common: string;
    readonly consumerGroup: string;
    readonly defaultCollation: string;
    readonly defaultTablespace: string;
    readonly editionsEnabled: string;
    readonly externalName: string;
    readonly externalShared: string;
    readonly id: string;
    readonly implicit: string;
    readonly inherited: string;
    readonly localTempTablespace: string;
    readonly managedDatabaseId: string;
    readonly name: string;
    readonly opcNamedCredentialId?: string;
    readonly oracleMaintained: string;
    readonly passwordVersions: string;
    readonly profile: string;
    readonly proxyConnect: string;
    readonly status: string;
    readonly tempTablespace: string;
    readonly timeCreated: string;
    readonly timeExpiring: string;
    readonly timeLastLogin: string;
    readonly timeLocked: string;
    readonly timePasswordChanged: string;
    readonly userName: string;
}
export function getDatabaseManagementManagedDatabaseUserOutput(args: GetDatabaseManagementManagedDatabaseUserOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDatabaseManagementManagedDatabaseUserResult> {
    return pulumi.output(args).apply((a: any) => getDatabaseManagementManagedDatabaseUser(a, opts))
}

/**
 * A collection of arguments for invoking getDatabaseManagementManagedDatabaseUser.
 */
export interface GetDatabaseManagementManagedDatabaseUserOutputArgs {
    id?: pulumi.Input<string>;
    managedDatabaseId: pulumi.Input<string>;
    opcNamedCredentialId?: pulumi.Input<string>;
    userName: pulumi.Input<string>;
}
