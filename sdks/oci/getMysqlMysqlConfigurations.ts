// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getMysqlMysqlConfigurations(args: GetMysqlMysqlConfigurationsArgs, opts?: pulumi.InvokeOptions): Promise<GetMysqlMysqlConfigurationsResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getMysqlMysqlConfigurations:getMysqlMysqlConfigurations", {
        "compartmentId": args.compartmentId,
        "configurationId": args.configurationId,
        "displayName": args.displayName,
        "filters": args.filters,
        "id": args.id,
        "shapeName": args.shapeName,
        "state": args.state,
        "types": args.types,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getMysqlMysqlConfigurations.
 */
export interface GetMysqlMysqlConfigurationsArgs {
    compartmentId: string;
    configurationId?: string;
    displayName?: string;
    filters?: inputs.GetMysqlMysqlConfigurationsFilter[];
    id?: string;
    shapeName?: string;
    state?: string;
    types?: string[];
}

/**
 * A collection of values returned by getMysqlMysqlConfigurations.
 */
export interface GetMysqlMysqlConfigurationsResult {
    readonly compartmentId: string;
    readonly configurationId?: string;
    readonly configurations: outputs.GetMysqlMysqlConfigurationsConfiguration[];
    readonly displayName?: string;
    readonly filters?: outputs.GetMysqlMysqlConfigurationsFilter[];
    readonly id: string;
    readonly shapeName?: string;
    readonly state?: string;
    readonly types?: string[];
}
export function getMysqlMysqlConfigurationsOutput(args: GetMysqlMysqlConfigurationsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetMysqlMysqlConfigurationsResult> {
    return pulumi.output(args).apply((a: any) => getMysqlMysqlConfigurations(a, opts))
}

/**
 * A collection of arguments for invoking getMysqlMysqlConfigurations.
 */
export interface GetMysqlMysqlConfigurationsOutputArgs {
    compartmentId: pulumi.Input<string>;
    configurationId?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.GetMysqlMysqlConfigurationsFilterArgs>[]>;
    id?: pulumi.Input<string>;
    shapeName?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    types?: pulumi.Input<pulumi.Input<string>[]>;
}
