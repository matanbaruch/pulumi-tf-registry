// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DevopsRepositoryRef extends pulumi.CustomResource {
    /**
     * Get an existing DevopsRepositoryRef resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DevopsRepositoryRefState, opts?: pulumi.CustomResourceOptions): DevopsRepositoryRef {
        return new DevopsRepositoryRef(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/devopsRepositoryRef:DevopsRepositoryRef';

    /**
     * Returns true if the given object is an instance of DevopsRepositoryRef.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DevopsRepositoryRef {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DevopsRepositoryRef.__pulumiType;
    }

    public readonly commitId!: pulumi.Output<string>;
    public /*out*/ readonly definedTags!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly freeformTags!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly fullRefName!: pulumi.Output<string>;
    public readonly objectId!: pulumi.Output<string>;
    public readonly refName!: pulumi.Output<string>;
    public readonly refType!: pulumi.Output<string>;
    public readonly repositoryId!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.DevopsRepositoryRefTimeouts | undefined>;

    /**
     * Create a DevopsRepositoryRef resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DevopsRepositoryRefArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DevopsRepositoryRefArgs | DevopsRepositoryRefState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DevopsRepositoryRefState | undefined;
            resourceInputs["commitId"] = state ? state.commitId : undefined;
            resourceInputs["definedTags"] = state ? state.definedTags : undefined;
            resourceInputs["freeformTags"] = state ? state.freeformTags : undefined;
            resourceInputs["fullRefName"] = state ? state.fullRefName : undefined;
            resourceInputs["objectId"] = state ? state.objectId : undefined;
            resourceInputs["refName"] = state ? state.refName : undefined;
            resourceInputs["refType"] = state ? state.refType : undefined;
            resourceInputs["repositoryId"] = state ? state.repositoryId : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as DevopsRepositoryRefArgs | undefined;
            if ((!args || args.refName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'refName'");
            }
            if ((!args || args.refType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'refType'");
            }
            if ((!args || args.repositoryId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'repositoryId'");
            }
            resourceInputs["commitId"] = args ? args.commitId : undefined;
            resourceInputs["objectId"] = args ? args.objectId : undefined;
            resourceInputs["refName"] = args ? args.refName : undefined;
            resourceInputs["refType"] = args ? args.refType : undefined;
            resourceInputs["repositoryId"] = args ? args.repositoryId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["definedTags"] = undefined /*out*/;
            resourceInputs["freeformTags"] = undefined /*out*/;
            resourceInputs["fullRefName"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DevopsRepositoryRef.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DevopsRepositoryRef resources.
 */
export interface DevopsRepositoryRefState {
    commitId?: pulumi.Input<string>;
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    fullRefName?: pulumi.Input<string>;
    objectId?: pulumi.Input<string>;
    refName?: pulumi.Input<string>;
    refType?: pulumi.Input<string>;
    repositoryId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.DevopsRepositoryRefTimeouts>;
}

/**
 * The set of arguments for constructing a DevopsRepositoryRef resource.
 */
export interface DevopsRepositoryRefArgs {
    commitId?: pulumi.Input<string>;
    objectId?: pulumi.Input<string>;
    refName: pulumi.Input<string>;
    refType: pulumi.Input<string>;
    repositoryId: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.DevopsRepositoryRefTimeouts>;
}
