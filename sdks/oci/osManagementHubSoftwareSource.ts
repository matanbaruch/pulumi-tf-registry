// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class OsManagementHubSoftwareSource extends pulumi.CustomResource {
    /**
     * Get an existing OsManagementHubSoftwareSource resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OsManagementHubSoftwareSourceState, opts?: pulumi.CustomResourceOptions): OsManagementHubSoftwareSource {
        return new OsManagementHubSoftwareSource(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/osManagementHubSoftwareSource:OsManagementHubSoftwareSource';

    /**
     * Returns true if the given object is an instance of OsManagementHubSoftwareSource.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OsManagementHubSoftwareSource {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OsManagementHubSoftwareSource.__pulumiType;
    }

    public /*out*/ readonly archType!: pulumi.Output<string>;
    public /*out*/ readonly availability!: pulumi.Output<string>;
    public /*out*/ readonly availabilityAtOci!: pulumi.Output<string>;
    public /*out*/ readonly checksumType!: pulumi.Output<string>;
    public readonly compartmentId!: pulumi.Output<string>;
    public readonly customSoftwareSourceFilter!: pulumi.Output<outputs.OsManagementHubSoftwareSourceCustomSoftwareSourceFilter | undefined>;
    public readonly definedTags!: pulumi.Output<{[key: string]: string}>;
    public readonly description!: pulumi.Output<string>;
    public readonly displayName!: pulumi.Output<string>;
    public readonly freeformTags!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly gpgKeyFingerprint!: pulumi.Output<string>;
    public /*out*/ readonly gpgKeyId!: pulumi.Output<string>;
    public /*out*/ readonly gpgKeyUrl!: pulumi.Output<string>;
    public readonly isAutoResolveDependencies!: pulumi.Output<boolean>;
    public readonly isAutomaticallyUpdated!: pulumi.Output<boolean>;
    public readonly isCreatedFromPackageList!: pulumi.Output<boolean>;
    public readonly isLatestContentOnly!: pulumi.Output<boolean>;
    public /*out*/ readonly isMandatoryForAutonomousLinux!: pulumi.Output<boolean>;
    public readonly originSoftwareSourceId!: pulumi.Output<string>;
    public /*out*/ readonly osFamily!: pulumi.Output<string>;
    public /*out*/ readonly packageCount!: pulumi.Output<string>;
    public readonly packages!: pulumi.Output<string[]>;
    public /*out*/ readonly repoId!: pulumi.Output<string>;
    public /*out*/ readonly size!: pulumi.Output<number>;
    public readonly softwareSourceType!: pulumi.Output<string>;
    public readonly softwareSourceVersion!: pulumi.Output<string>;
    public /*out*/ readonly state!: pulumi.Output<string>;
    public /*out*/ readonly systemTags!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly timeCreated!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.OsManagementHubSoftwareSourceTimeouts | undefined>;
    public /*out*/ readonly url!: pulumi.Output<string>;
    public /*out*/ readonly vendorName!: pulumi.Output<string>;
    public readonly vendorSoftwareSources!: pulumi.Output<outputs.OsManagementHubSoftwareSourceVendorSoftwareSource[] | undefined>;

    /**
     * Create a OsManagementHubSoftwareSource resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OsManagementHubSoftwareSourceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OsManagementHubSoftwareSourceArgs | OsManagementHubSoftwareSourceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OsManagementHubSoftwareSourceState | undefined;
            resourceInputs["archType"] = state ? state.archType : undefined;
            resourceInputs["availability"] = state ? state.availability : undefined;
            resourceInputs["availabilityAtOci"] = state ? state.availabilityAtOci : undefined;
            resourceInputs["checksumType"] = state ? state.checksumType : undefined;
            resourceInputs["compartmentId"] = state ? state.compartmentId : undefined;
            resourceInputs["customSoftwareSourceFilter"] = state ? state.customSoftwareSourceFilter : undefined;
            resourceInputs["definedTags"] = state ? state.definedTags : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["freeformTags"] = state ? state.freeformTags : undefined;
            resourceInputs["gpgKeyFingerprint"] = state ? state.gpgKeyFingerprint : undefined;
            resourceInputs["gpgKeyId"] = state ? state.gpgKeyId : undefined;
            resourceInputs["gpgKeyUrl"] = state ? state.gpgKeyUrl : undefined;
            resourceInputs["isAutoResolveDependencies"] = state ? state.isAutoResolveDependencies : undefined;
            resourceInputs["isAutomaticallyUpdated"] = state ? state.isAutomaticallyUpdated : undefined;
            resourceInputs["isCreatedFromPackageList"] = state ? state.isCreatedFromPackageList : undefined;
            resourceInputs["isLatestContentOnly"] = state ? state.isLatestContentOnly : undefined;
            resourceInputs["isMandatoryForAutonomousLinux"] = state ? state.isMandatoryForAutonomousLinux : undefined;
            resourceInputs["originSoftwareSourceId"] = state ? state.originSoftwareSourceId : undefined;
            resourceInputs["osFamily"] = state ? state.osFamily : undefined;
            resourceInputs["packageCount"] = state ? state.packageCount : undefined;
            resourceInputs["packages"] = state ? state.packages : undefined;
            resourceInputs["repoId"] = state ? state.repoId : undefined;
            resourceInputs["size"] = state ? state.size : undefined;
            resourceInputs["softwareSourceType"] = state ? state.softwareSourceType : undefined;
            resourceInputs["softwareSourceVersion"] = state ? state.softwareSourceVersion : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["systemTags"] = state ? state.systemTags : undefined;
            resourceInputs["timeCreated"] = state ? state.timeCreated : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["url"] = state ? state.url : undefined;
            resourceInputs["vendorName"] = state ? state.vendorName : undefined;
            resourceInputs["vendorSoftwareSources"] = state ? state.vendorSoftwareSources : undefined;
        } else {
            const args = argsOrState as OsManagementHubSoftwareSourceArgs | undefined;
            if ((!args || args.compartmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'compartmentId'");
            }
            if ((!args || args.softwareSourceType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'softwareSourceType'");
            }
            resourceInputs["compartmentId"] = args ? args.compartmentId : undefined;
            resourceInputs["customSoftwareSourceFilter"] = args ? args.customSoftwareSourceFilter : undefined;
            resourceInputs["definedTags"] = args ? args.definedTags : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["freeformTags"] = args ? args.freeformTags : undefined;
            resourceInputs["isAutoResolveDependencies"] = args ? args.isAutoResolveDependencies : undefined;
            resourceInputs["isAutomaticallyUpdated"] = args ? args.isAutomaticallyUpdated : undefined;
            resourceInputs["isCreatedFromPackageList"] = args ? args.isCreatedFromPackageList : undefined;
            resourceInputs["isLatestContentOnly"] = args ? args.isLatestContentOnly : undefined;
            resourceInputs["originSoftwareSourceId"] = args ? args.originSoftwareSourceId : undefined;
            resourceInputs["packages"] = args ? args.packages : undefined;
            resourceInputs["softwareSourceType"] = args ? args.softwareSourceType : undefined;
            resourceInputs["softwareSourceVersion"] = args ? args.softwareSourceVersion : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["vendorSoftwareSources"] = args ? args.vendorSoftwareSources : undefined;
            resourceInputs["archType"] = undefined /*out*/;
            resourceInputs["availability"] = undefined /*out*/;
            resourceInputs["availabilityAtOci"] = undefined /*out*/;
            resourceInputs["checksumType"] = undefined /*out*/;
            resourceInputs["gpgKeyFingerprint"] = undefined /*out*/;
            resourceInputs["gpgKeyId"] = undefined /*out*/;
            resourceInputs["gpgKeyUrl"] = undefined /*out*/;
            resourceInputs["isMandatoryForAutonomousLinux"] = undefined /*out*/;
            resourceInputs["osFamily"] = undefined /*out*/;
            resourceInputs["packageCount"] = undefined /*out*/;
            resourceInputs["repoId"] = undefined /*out*/;
            resourceInputs["size"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["systemTags"] = undefined /*out*/;
            resourceInputs["timeCreated"] = undefined /*out*/;
            resourceInputs["url"] = undefined /*out*/;
            resourceInputs["vendorName"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OsManagementHubSoftwareSource.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering OsManagementHubSoftwareSource resources.
 */
export interface OsManagementHubSoftwareSourceState {
    archType?: pulumi.Input<string>;
    availability?: pulumi.Input<string>;
    availabilityAtOci?: pulumi.Input<string>;
    checksumType?: pulumi.Input<string>;
    compartmentId?: pulumi.Input<string>;
    customSoftwareSourceFilter?: pulumi.Input<inputs.OsManagementHubSoftwareSourceCustomSoftwareSourceFilter>;
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    description?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    gpgKeyFingerprint?: pulumi.Input<string>;
    gpgKeyId?: pulumi.Input<string>;
    gpgKeyUrl?: pulumi.Input<string>;
    isAutoResolveDependencies?: pulumi.Input<boolean>;
    isAutomaticallyUpdated?: pulumi.Input<boolean>;
    isCreatedFromPackageList?: pulumi.Input<boolean>;
    isLatestContentOnly?: pulumi.Input<boolean>;
    isMandatoryForAutonomousLinux?: pulumi.Input<boolean>;
    originSoftwareSourceId?: pulumi.Input<string>;
    osFamily?: pulumi.Input<string>;
    packageCount?: pulumi.Input<string>;
    packages?: pulumi.Input<pulumi.Input<string>[]>;
    repoId?: pulumi.Input<string>;
    size?: pulumi.Input<number>;
    softwareSourceType?: pulumi.Input<string>;
    softwareSourceVersion?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    systemTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeCreated?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.OsManagementHubSoftwareSourceTimeouts>;
    url?: pulumi.Input<string>;
    vendorName?: pulumi.Input<string>;
    vendorSoftwareSources?: pulumi.Input<pulumi.Input<inputs.OsManagementHubSoftwareSourceVendorSoftwareSource>[]>;
}

/**
 * The set of arguments for constructing a OsManagementHubSoftwareSource resource.
 */
export interface OsManagementHubSoftwareSourceArgs {
    compartmentId: pulumi.Input<string>;
    customSoftwareSourceFilter?: pulumi.Input<inputs.OsManagementHubSoftwareSourceCustomSoftwareSourceFilter>;
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    description?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    isAutoResolveDependencies?: pulumi.Input<boolean>;
    isAutomaticallyUpdated?: pulumi.Input<boolean>;
    isCreatedFromPackageList?: pulumi.Input<boolean>;
    isLatestContentOnly?: pulumi.Input<boolean>;
    originSoftwareSourceId?: pulumi.Input<string>;
    packages?: pulumi.Input<pulumi.Input<string>[]>;
    softwareSourceType: pulumi.Input<string>;
    softwareSourceVersion?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.OsManagementHubSoftwareSourceTimeouts>;
    vendorSoftwareSources?: pulumi.Input<pulumi.Input<inputs.OsManagementHubSoftwareSourceVendorSoftwareSource>[]>;
}
