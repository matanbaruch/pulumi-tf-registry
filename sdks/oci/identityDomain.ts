// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class IdentityDomain extends pulumi.CustomResource {
    /**
     * Get an existing IdentityDomain resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IdentityDomainState, opts?: pulumi.CustomResourceOptions): IdentityDomain {
        return new IdentityDomain(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/identityDomain:IdentityDomain';

    /**
     * Returns true if the given object is an instance of IdentityDomain.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IdentityDomain {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IdentityDomain.__pulumiType;
    }

    public readonly adminEmail!: pulumi.Output<string>;
    public readonly adminFirstName!: pulumi.Output<string>;
    public readonly adminLastName!: pulumi.Output<string>;
    public readonly adminUserName!: pulumi.Output<string>;
    public readonly compartmentId!: pulumi.Output<string>;
    public readonly definedTags!: pulumi.Output<{[key: string]: string}>;
    public readonly description!: pulumi.Output<string>;
    public readonly displayName!: pulumi.Output<string>;
    public readonly freeformTags!: pulumi.Output<{[key: string]: string}>;
    public readonly homeRegion!: pulumi.Output<string>;
    public /*out*/ readonly homeRegionUrl!: pulumi.Output<string>;
    public readonly isHiddenOnLogin!: pulumi.Output<boolean>;
    public readonly isNotificationBypassed!: pulumi.Output<boolean>;
    public readonly isPrimaryEmailRequired!: pulumi.Output<boolean>;
    public readonly licenseType!: pulumi.Output<string>;
    public /*out*/ readonly lifecycleDetails!: pulumi.Output<string>;
    public /*out*/ readonly replicaRegions!: pulumi.Output<outputs.IdentityDomainReplicaRegion[]>;
    public readonly state!: pulumi.Output<string>;
    public /*out*/ readonly timeCreated!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.IdentityDomainTimeouts | undefined>;
    public /*out*/ readonly type!: pulumi.Output<string>;
    public /*out*/ readonly url!: pulumi.Output<string>;

    /**
     * Create a IdentityDomain resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IdentityDomainArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IdentityDomainArgs | IdentityDomainState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IdentityDomainState | undefined;
            resourceInputs["adminEmail"] = state ? state.adminEmail : undefined;
            resourceInputs["adminFirstName"] = state ? state.adminFirstName : undefined;
            resourceInputs["adminLastName"] = state ? state.adminLastName : undefined;
            resourceInputs["adminUserName"] = state ? state.adminUserName : undefined;
            resourceInputs["compartmentId"] = state ? state.compartmentId : undefined;
            resourceInputs["definedTags"] = state ? state.definedTags : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["freeformTags"] = state ? state.freeformTags : undefined;
            resourceInputs["homeRegion"] = state ? state.homeRegion : undefined;
            resourceInputs["homeRegionUrl"] = state ? state.homeRegionUrl : undefined;
            resourceInputs["isHiddenOnLogin"] = state ? state.isHiddenOnLogin : undefined;
            resourceInputs["isNotificationBypassed"] = state ? state.isNotificationBypassed : undefined;
            resourceInputs["isPrimaryEmailRequired"] = state ? state.isPrimaryEmailRequired : undefined;
            resourceInputs["licenseType"] = state ? state.licenseType : undefined;
            resourceInputs["lifecycleDetails"] = state ? state.lifecycleDetails : undefined;
            resourceInputs["replicaRegions"] = state ? state.replicaRegions : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["timeCreated"] = state ? state.timeCreated : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["url"] = state ? state.url : undefined;
        } else {
            const args = argsOrState as IdentityDomainArgs | undefined;
            if ((!args || args.compartmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'compartmentId'");
            }
            if ((!args || args.description === undefined) && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if ((!args || args.homeRegion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'homeRegion'");
            }
            if ((!args || args.licenseType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'licenseType'");
            }
            resourceInputs["adminEmail"] = args ? args.adminEmail : undefined;
            resourceInputs["adminFirstName"] = args ? args.adminFirstName : undefined;
            resourceInputs["adminLastName"] = args ? args.adminLastName : undefined;
            resourceInputs["adminUserName"] = args ? args.adminUserName : undefined;
            resourceInputs["compartmentId"] = args ? args.compartmentId : undefined;
            resourceInputs["definedTags"] = args ? args.definedTags : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["freeformTags"] = args ? args.freeformTags : undefined;
            resourceInputs["homeRegion"] = args ? args.homeRegion : undefined;
            resourceInputs["isHiddenOnLogin"] = args ? args.isHiddenOnLogin : undefined;
            resourceInputs["isNotificationBypassed"] = args ? args.isNotificationBypassed : undefined;
            resourceInputs["isPrimaryEmailRequired"] = args ? args.isPrimaryEmailRequired : undefined;
            resourceInputs["licenseType"] = args ? args.licenseType : undefined;
            resourceInputs["state"] = args ? args.state : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["homeRegionUrl"] = undefined /*out*/;
            resourceInputs["lifecycleDetails"] = undefined /*out*/;
            resourceInputs["replicaRegions"] = undefined /*out*/;
            resourceInputs["timeCreated"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
            resourceInputs["url"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IdentityDomain.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering IdentityDomain resources.
 */
export interface IdentityDomainState {
    adminEmail?: pulumi.Input<string>;
    adminFirstName?: pulumi.Input<string>;
    adminLastName?: pulumi.Input<string>;
    adminUserName?: pulumi.Input<string>;
    compartmentId?: pulumi.Input<string>;
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    description?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    homeRegion?: pulumi.Input<string>;
    homeRegionUrl?: pulumi.Input<string>;
    isHiddenOnLogin?: pulumi.Input<boolean>;
    isNotificationBypassed?: pulumi.Input<boolean>;
    isPrimaryEmailRequired?: pulumi.Input<boolean>;
    licenseType?: pulumi.Input<string>;
    lifecycleDetails?: pulumi.Input<string>;
    replicaRegions?: pulumi.Input<pulumi.Input<inputs.IdentityDomainReplicaRegion>[]>;
    state?: pulumi.Input<string>;
    timeCreated?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.IdentityDomainTimeouts>;
    type?: pulumi.Input<string>;
    url?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a IdentityDomain resource.
 */
export interface IdentityDomainArgs {
    adminEmail?: pulumi.Input<string>;
    adminFirstName?: pulumi.Input<string>;
    adminLastName?: pulumi.Input<string>;
    adminUserName?: pulumi.Input<string>;
    compartmentId: pulumi.Input<string>;
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    description: pulumi.Input<string>;
    displayName: pulumi.Input<string>;
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    homeRegion: pulumi.Input<string>;
    isHiddenOnLogin?: pulumi.Input<boolean>;
    isNotificationBypassed?: pulumi.Input<boolean>;
    isPrimaryEmailRequired?: pulumi.Input<boolean>;
    licenseType: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.IdentityDomainTimeouts>;
}
