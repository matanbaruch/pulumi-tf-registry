// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getIdentityDynamicGroups(args: GetIdentityDynamicGroupsArgs, opts?: pulumi.InvokeOptions): Promise<GetIdentityDynamicGroupsResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getIdentityDynamicGroups:getIdentityDynamicGroups", {
        "compartmentId": args.compartmentId,
        "filters": args.filters,
        "id": args.id,
        "name": args.name,
        "state": args.state,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getIdentityDynamicGroups.
 */
export interface GetIdentityDynamicGroupsArgs {
    compartmentId: string;
    filters?: inputs.GetIdentityDynamicGroupsFilter[];
    id?: string;
    name?: string;
    state?: string;
}

/**
 * A collection of values returned by getIdentityDynamicGroups.
 */
export interface GetIdentityDynamicGroupsResult {
    readonly compartmentId: string;
    readonly dynamicGroups: outputs.GetIdentityDynamicGroupsDynamicGroup[];
    readonly filters?: outputs.GetIdentityDynamicGroupsFilter[];
    readonly id: string;
    readonly name?: string;
    readonly state?: string;
}
export function getIdentityDynamicGroupsOutput(args: GetIdentityDynamicGroupsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetIdentityDynamicGroupsResult> {
    return pulumi.output(args).apply((a: any) => getIdentityDynamicGroups(a, opts))
}

/**
 * A collection of arguments for invoking getIdentityDynamicGroups.
 */
export interface GetIdentityDynamicGroupsOutputArgs {
    compartmentId: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.GetIdentityDynamicGroupsFilterArgs>[]>;
    id?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
}
