// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DatabaseDatabase extends pulumi.CustomResource {
    /**
     * Get an existing DatabaseDatabase resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DatabaseDatabaseState, opts?: pulumi.CustomResourceOptions): DatabaseDatabase {
        return new DatabaseDatabase(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/databaseDatabase:DatabaseDatabase';

    /**
     * Returns true if the given object is an instance of DatabaseDatabase.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DatabaseDatabase {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DatabaseDatabase.__pulumiType;
    }

    public /*out*/ readonly characterSet!: pulumi.Output<string>;
    public /*out*/ readonly compartmentId!: pulumi.Output<string>;
    public /*out*/ readonly connectionStrings!: pulumi.Output<outputs.DatabaseDatabaseConnectionString[]>;
    public readonly database!: pulumi.Output<outputs.DatabaseDatabaseDatabase>;
    public /*out*/ readonly databaseManagementConfigs!: pulumi.Output<outputs.DatabaseDatabaseDatabaseManagementConfig[]>;
    public /*out*/ readonly databaseSoftwareImageId!: pulumi.Output<string>;
    public /*out*/ readonly dbBackupConfigs!: pulumi.Output<outputs.DatabaseDatabaseDbBackupConfig[]>;
    public readonly dbHomeId!: pulumi.Output<string>;
    public /*out*/ readonly dbName!: pulumi.Output<string>;
    public /*out*/ readonly dbSystemId!: pulumi.Output<string>;
    public /*out*/ readonly dbUniqueName!: pulumi.Output<string>;
    public readonly dbVersion!: pulumi.Output<string>;
    public /*out*/ readonly dbWorkload!: pulumi.Output<string>;
    public /*out*/ readonly definedTags!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly freeformTags!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly isCdb!: pulumi.Output<boolean>;
    public readonly keyStoreId!: pulumi.Output<string>;
    public /*out*/ readonly keyStoreWalletName!: pulumi.Output<string>;
    public readonly kmsKeyId!: pulumi.Output<string>;
    public readonly kmsKeyMigration!: pulumi.Output<boolean | undefined>;
    public readonly kmsKeyRotation!: pulumi.Output<number | undefined>;
    public readonly kmsKeyVersionId!: pulumi.Output<string>;
    public /*out*/ readonly lastBackupDurationInSeconds!: pulumi.Output<number>;
    public /*out*/ readonly lastBackupTimestamp!: pulumi.Output<string>;
    public /*out*/ readonly lastFailedBackupTimestamp!: pulumi.Output<string>;
    public /*out*/ readonly lifecycleDetails!: pulumi.Output<string>;
    public /*out*/ readonly ncharacterSet!: pulumi.Output<string>;
    public /*out*/ readonly pdbName!: pulumi.Output<string>;
    public /*out*/ readonly sidPrefix!: pulumi.Output<string>;
    public readonly source!: pulumi.Output<string>;
    public /*out*/ readonly sourceDatabasePointInTimeRecoveryTimestamp!: pulumi.Output<string>;
    public /*out*/ readonly state!: pulumi.Output<string>;
    public /*out*/ readonly timeCreated!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.DatabaseDatabaseTimeouts | undefined>;
    public readonly vaultId!: pulumi.Output<string>;
    public /*out*/ readonly vmClusterId!: pulumi.Output<string>;

    /**
     * Create a DatabaseDatabase resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatabaseDatabaseArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DatabaseDatabaseArgs | DatabaseDatabaseState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DatabaseDatabaseState | undefined;
            resourceInputs["characterSet"] = state ? state.characterSet : undefined;
            resourceInputs["compartmentId"] = state ? state.compartmentId : undefined;
            resourceInputs["connectionStrings"] = state ? state.connectionStrings : undefined;
            resourceInputs["database"] = state ? state.database : undefined;
            resourceInputs["databaseManagementConfigs"] = state ? state.databaseManagementConfigs : undefined;
            resourceInputs["databaseSoftwareImageId"] = state ? state.databaseSoftwareImageId : undefined;
            resourceInputs["dbBackupConfigs"] = state ? state.dbBackupConfigs : undefined;
            resourceInputs["dbHomeId"] = state ? state.dbHomeId : undefined;
            resourceInputs["dbName"] = state ? state.dbName : undefined;
            resourceInputs["dbSystemId"] = state ? state.dbSystemId : undefined;
            resourceInputs["dbUniqueName"] = state ? state.dbUniqueName : undefined;
            resourceInputs["dbVersion"] = state ? state.dbVersion : undefined;
            resourceInputs["dbWorkload"] = state ? state.dbWorkload : undefined;
            resourceInputs["definedTags"] = state ? state.definedTags : undefined;
            resourceInputs["freeformTags"] = state ? state.freeformTags : undefined;
            resourceInputs["isCdb"] = state ? state.isCdb : undefined;
            resourceInputs["keyStoreId"] = state ? state.keyStoreId : undefined;
            resourceInputs["keyStoreWalletName"] = state ? state.keyStoreWalletName : undefined;
            resourceInputs["kmsKeyId"] = state ? state.kmsKeyId : undefined;
            resourceInputs["kmsKeyMigration"] = state ? state.kmsKeyMigration : undefined;
            resourceInputs["kmsKeyRotation"] = state ? state.kmsKeyRotation : undefined;
            resourceInputs["kmsKeyVersionId"] = state ? state.kmsKeyVersionId : undefined;
            resourceInputs["lastBackupDurationInSeconds"] = state ? state.lastBackupDurationInSeconds : undefined;
            resourceInputs["lastBackupTimestamp"] = state ? state.lastBackupTimestamp : undefined;
            resourceInputs["lastFailedBackupTimestamp"] = state ? state.lastFailedBackupTimestamp : undefined;
            resourceInputs["lifecycleDetails"] = state ? state.lifecycleDetails : undefined;
            resourceInputs["ncharacterSet"] = state ? state.ncharacterSet : undefined;
            resourceInputs["pdbName"] = state ? state.pdbName : undefined;
            resourceInputs["sidPrefix"] = state ? state.sidPrefix : undefined;
            resourceInputs["source"] = state ? state.source : undefined;
            resourceInputs["sourceDatabasePointInTimeRecoveryTimestamp"] = state ? state.sourceDatabasePointInTimeRecoveryTimestamp : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["timeCreated"] = state ? state.timeCreated : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["vaultId"] = state ? state.vaultId : undefined;
            resourceInputs["vmClusterId"] = state ? state.vmClusterId : undefined;
        } else {
            const args = argsOrState as DatabaseDatabaseArgs | undefined;
            if ((!args || args.database === undefined) && !opts.urn) {
                throw new Error("Missing required property 'database'");
            }
            if ((!args || args.dbHomeId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dbHomeId'");
            }
            if ((!args || args.source === undefined) && !opts.urn) {
                throw new Error("Missing required property 'source'");
            }
            resourceInputs["database"] = args ? args.database : undefined;
            resourceInputs["dbHomeId"] = args ? args.dbHomeId : undefined;
            resourceInputs["dbVersion"] = args ? args.dbVersion : undefined;
            resourceInputs["keyStoreId"] = args ? args.keyStoreId : undefined;
            resourceInputs["kmsKeyId"] = args ? args.kmsKeyId : undefined;
            resourceInputs["kmsKeyMigration"] = args ? args.kmsKeyMigration : undefined;
            resourceInputs["kmsKeyRotation"] = args ? args.kmsKeyRotation : undefined;
            resourceInputs["kmsKeyVersionId"] = args ? args.kmsKeyVersionId : undefined;
            resourceInputs["source"] = args ? args.source : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["vaultId"] = args ? args.vaultId : undefined;
            resourceInputs["characterSet"] = undefined /*out*/;
            resourceInputs["compartmentId"] = undefined /*out*/;
            resourceInputs["connectionStrings"] = undefined /*out*/;
            resourceInputs["databaseManagementConfigs"] = undefined /*out*/;
            resourceInputs["databaseSoftwareImageId"] = undefined /*out*/;
            resourceInputs["dbBackupConfigs"] = undefined /*out*/;
            resourceInputs["dbName"] = undefined /*out*/;
            resourceInputs["dbSystemId"] = undefined /*out*/;
            resourceInputs["dbUniqueName"] = undefined /*out*/;
            resourceInputs["dbWorkload"] = undefined /*out*/;
            resourceInputs["definedTags"] = undefined /*out*/;
            resourceInputs["freeformTags"] = undefined /*out*/;
            resourceInputs["isCdb"] = undefined /*out*/;
            resourceInputs["keyStoreWalletName"] = undefined /*out*/;
            resourceInputs["lastBackupDurationInSeconds"] = undefined /*out*/;
            resourceInputs["lastBackupTimestamp"] = undefined /*out*/;
            resourceInputs["lastFailedBackupTimestamp"] = undefined /*out*/;
            resourceInputs["lifecycleDetails"] = undefined /*out*/;
            resourceInputs["ncharacterSet"] = undefined /*out*/;
            resourceInputs["pdbName"] = undefined /*out*/;
            resourceInputs["sidPrefix"] = undefined /*out*/;
            resourceInputs["sourceDatabasePointInTimeRecoveryTimestamp"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["timeCreated"] = undefined /*out*/;
            resourceInputs["vmClusterId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DatabaseDatabase.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DatabaseDatabase resources.
 */
export interface DatabaseDatabaseState {
    characterSet?: pulumi.Input<string>;
    compartmentId?: pulumi.Input<string>;
    connectionStrings?: pulumi.Input<pulumi.Input<inputs.DatabaseDatabaseConnectionString>[]>;
    database?: pulumi.Input<inputs.DatabaseDatabaseDatabase>;
    databaseManagementConfigs?: pulumi.Input<pulumi.Input<inputs.DatabaseDatabaseDatabaseManagementConfig>[]>;
    databaseSoftwareImageId?: pulumi.Input<string>;
    dbBackupConfigs?: pulumi.Input<pulumi.Input<inputs.DatabaseDatabaseDbBackupConfig>[]>;
    dbHomeId?: pulumi.Input<string>;
    dbName?: pulumi.Input<string>;
    dbSystemId?: pulumi.Input<string>;
    dbUniqueName?: pulumi.Input<string>;
    dbVersion?: pulumi.Input<string>;
    dbWorkload?: pulumi.Input<string>;
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    isCdb?: pulumi.Input<boolean>;
    keyStoreId?: pulumi.Input<string>;
    keyStoreWalletName?: pulumi.Input<string>;
    kmsKeyId?: pulumi.Input<string>;
    kmsKeyMigration?: pulumi.Input<boolean>;
    kmsKeyRotation?: pulumi.Input<number>;
    kmsKeyVersionId?: pulumi.Input<string>;
    lastBackupDurationInSeconds?: pulumi.Input<number>;
    lastBackupTimestamp?: pulumi.Input<string>;
    lastFailedBackupTimestamp?: pulumi.Input<string>;
    lifecycleDetails?: pulumi.Input<string>;
    ncharacterSet?: pulumi.Input<string>;
    pdbName?: pulumi.Input<string>;
    sidPrefix?: pulumi.Input<string>;
    source?: pulumi.Input<string>;
    sourceDatabasePointInTimeRecoveryTimestamp?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    timeCreated?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.DatabaseDatabaseTimeouts>;
    vaultId?: pulumi.Input<string>;
    vmClusterId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DatabaseDatabase resource.
 */
export interface DatabaseDatabaseArgs {
    database: pulumi.Input<inputs.DatabaseDatabaseDatabase>;
    dbHomeId: pulumi.Input<string>;
    dbVersion?: pulumi.Input<string>;
    keyStoreId?: pulumi.Input<string>;
    kmsKeyId?: pulumi.Input<string>;
    kmsKeyMigration?: pulumi.Input<boolean>;
    kmsKeyRotation?: pulumi.Input<number>;
    kmsKeyVersionId?: pulumi.Input<string>;
    source: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.DatabaseDatabaseTimeouts>;
    vaultId?: pulumi.Input<string>;
}
