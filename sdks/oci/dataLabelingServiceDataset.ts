// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DataLabelingServiceDataset extends pulumi.CustomResource {
    /**
     * Get an existing DataLabelingServiceDataset resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DataLabelingServiceDatasetState, opts?: pulumi.CustomResourceOptions): DataLabelingServiceDataset {
        return new DataLabelingServiceDataset(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/dataLabelingServiceDataset:DataLabelingServiceDataset';

    /**
     * Returns true if the given object is an instance of DataLabelingServiceDataset.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DataLabelingServiceDataset {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DataLabelingServiceDataset.__pulumiType;
    }

    public /*out*/ readonly additionalProperties!: pulumi.Output<{[key: string]: string}>;
    public readonly annotationFormat!: pulumi.Output<string>;
    public readonly compartmentId!: pulumi.Output<string>;
    public readonly datasetFormatDetails!: pulumi.Output<outputs.DataLabelingServiceDatasetDatasetFormatDetails>;
    public readonly datasetSourceDetails!: pulumi.Output<outputs.DataLabelingServiceDatasetDatasetSourceDetails>;
    public readonly definedTags!: pulumi.Output<{[key: string]: string}>;
    public readonly description!: pulumi.Output<string>;
    public readonly displayName!: pulumi.Output<string>;
    public readonly freeformTags!: pulumi.Output<{[key: string]: string}>;
    public readonly initialImportDatasetConfiguration!: pulumi.Output<outputs.DataLabelingServiceDatasetInitialImportDatasetConfiguration | undefined>;
    public readonly initialRecordGenerationConfiguration!: pulumi.Output<outputs.DataLabelingServiceDatasetInitialRecordGenerationConfiguration | undefined>;
    public readonly labelSet!: pulumi.Output<outputs.DataLabelingServiceDatasetLabelSet>;
    public readonly labelingInstructions!: pulumi.Output<string>;
    public /*out*/ readonly lifecycleDetails!: pulumi.Output<string>;
    public /*out*/ readonly lifecycleSubstate!: pulumi.Output<string>;
    public /*out*/ readonly state!: pulumi.Output<string>;
    public /*out*/ readonly timeCreated!: pulumi.Output<string>;
    public /*out*/ readonly timeUpdated!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.DataLabelingServiceDatasetTimeouts | undefined>;

    /**
     * Create a DataLabelingServiceDataset resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DataLabelingServiceDatasetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DataLabelingServiceDatasetArgs | DataLabelingServiceDatasetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DataLabelingServiceDatasetState | undefined;
            resourceInputs["additionalProperties"] = state ? state.additionalProperties : undefined;
            resourceInputs["annotationFormat"] = state ? state.annotationFormat : undefined;
            resourceInputs["compartmentId"] = state ? state.compartmentId : undefined;
            resourceInputs["datasetFormatDetails"] = state ? state.datasetFormatDetails : undefined;
            resourceInputs["datasetSourceDetails"] = state ? state.datasetSourceDetails : undefined;
            resourceInputs["definedTags"] = state ? state.definedTags : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["freeformTags"] = state ? state.freeformTags : undefined;
            resourceInputs["initialImportDatasetConfiguration"] = state ? state.initialImportDatasetConfiguration : undefined;
            resourceInputs["initialRecordGenerationConfiguration"] = state ? state.initialRecordGenerationConfiguration : undefined;
            resourceInputs["labelSet"] = state ? state.labelSet : undefined;
            resourceInputs["labelingInstructions"] = state ? state.labelingInstructions : undefined;
            resourceInputs["lifecycleDetails"] = state ? state.lifecycleDetails : undefined;
            resourceInputs["lifecycleSubstate"] = state ? state.lifecycleSubstate : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["timeCreated"] = state ? state.timeCreated : undefined;
            resourceInputs["timeUpdated"] = state ? state.timeUpdated : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as DataLabelingServiceDatasetArgs | undefined;
            if ((!args || args.annotationFormat === undefined) && !opts.urn) {
                throw new Error("Missing required property 'annotationFormat'");
            }
            if ((!args || args.compartmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'compartmentId'");
            }
            if ((!args || args.datasetFormatDetails === undefined) && !opts.urn) {
                throw new Error("Missing required property 'datasetFormatDetails'");
            }
            if ((!args || args.datasetSourceDetails === undefined) && !opts.urn) {
                throw new Error("Missing required property 'datasetSourceDetails'");
            }
            if ((!args || args.labelSet === undefined) && !opts.urn) {
                throw new Error("Missing required property 'labelSet'");
            }
            resourceInputs["annotationFormat"] = args ? args.annotationFormat : undefined;
            resourceInputs["compartmentId"] = args ? args.compartmentId : undefined;
            resourceInputs["datasetFormatDetails"] = args ? args.datasetFormatDetails : undefined;
            resourceInputs["datasetSourceDetails"] = args ? args.datasetSourceDetails : undefined;
            resourceInputs["definedTags"] = args ? args.definedTags : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["freeformTags"] = args ? args.freeformTags : undefined;
            resourceInputs["initialImportDatasetConfiguration"] = args ? args.initialImportDatasetConfiguration : undefined;
            resourceInputs["initialRecordGenerationConfiguration"] = args ? args.initialRecordGenerationConfiguration : undefined;
            resourceInputs["labelSet"] = args ? args.labelSet : undefined;
            resourceInputs["labelingInstructions"] = args ? args.labelingInstructions : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["additionalProperties"] = undefined /*out*/;
            resourceInputs["lifecycleDetails"] = undefined /*out*/;
            resourceInputs["lifecycleSubstate"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["timeCreated"] = undefined /*out*/;
            resourceInputs["timeUpdated"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DataLabelingServiceDataset.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DataLabelingServiceDataset resources.
 */
export interface DataLabelingServiceDatasetState {
    additionalProperties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    annotationFormat?: pulumi.Input<string>;
    compartmentId?: pulumi.Input<string>;
    datasetFormatDetails?: pulumi.Input<inputs.DataLabelingServiceDatasetDatasetFormatDetails>;
    datasetSourceDetails?: pulumi.Input<inputs.DataLabelingServiceDatasetDatasetSourceDetails>;
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    description?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    initialImportDatasetConfiguration?: pulumi.Input<inputs.DataLabelingServiceDatasetInitialImportDatasetConfiguration>;
    initialRecordGenerationConfiguration?: pulumi.Input<inputs.DataLabelingServiceDatasetInitialRecordGenerationConfiguration>;
    labelSet?: pulumi.Input<inputs.DataLabelingServiceDatasetLabelSet>;
    labelingInstructions?: pulumi.Input<string>;
    lifecycleDetails?: pulumi.Input<string>;
    lifecycleSubstate?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    timeCreated?: pulumi.Input<string>;
    timeUpdated?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.DataLabelingServiceDatasetTimeouts>;
}

/**
 * The set of arguments for constructing a DataLabelingServiceDataset resource.
 */
export interface DataLabelingServiceDatasetArgs {
    annotationFormat: pulumi.Input<string>;
    compartmentId: pulumi.Input<string>;
    datasetFormatDetails: pulumi.Input<inputs.DataLabelingServiceDatasetDatasetFormatDetails>;
    datasetSourceDetails: pulumi.Input<inputs.DataLabelingServiceDatasetDatasetSourceDetails>;
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    description?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    initialImportDatasetConfiguration?: pulumi.Input<inputs.DataLabelingServiceDatasetInitialImportDatasetConfiguration>;
    initialRecordGenerationConfiguration?: pulumi.Input<inputs.DataLabelingServiceDatasetInitialRecordGenerationConfiguration>;
    labelSet: pulumi.Input<inputs.DataLabelingServiceDatasetLabelSet>;
    labelingInstructions?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.DataLabelingServiceDatasetTimeouts>;
}
