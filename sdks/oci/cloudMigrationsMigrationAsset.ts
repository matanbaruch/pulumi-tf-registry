// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CloudMigrationsMigrationAsset extends pulumi.CustomResource {
    /**
     * Get an existing CloudMigrationsMigrationAsset resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CloudMigrationsMigrationAssetState, opts?: pulumi.CustomResourceOptions): CloudMigrationsMigrationAsset {
        return new CloudMigrationsMigrationAsset(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/cloudMigrationsMigrationAsset:CloudMigrationsMigrationAsset';

    /**
     * Returns true if the given object is an instance of CloudMigrationsMigrationAsset.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CloudMigrationsMigrationAsset {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CloudMigrationsMigrationAsset.__pulumiType;
    }

    public readonly availabilityDomain!: pulumi.Output<string>;
    public /*out*/ readonly compartmentId!: pulumi.Output<string>;
    public /*out*/ readonly dependedOnBies!: pulumi.Output<string[]>;
    public readonly displayName!: pulumi.Output<string>;
    public readonly inventoryAssetId!: pulumi.Output<string>;
    public /*out*/ readonly lifecycleDetails!: pulumi.Output<string>;
    public readonly migrationAssetDependsOns!: pulumi.Output<string[]>;
    public readonly migrationId!: pulumi.Output<string>;
    public /*out*/ readonly notifications!: pulumi.Output<string[]>;
    public /*out*/ readonly parentSnapshot!: pulumi.Output<string>;
    public readonly replicationCompartmentId!: pulumi.Output<string>;
    public readonly replicationScheduleId!: pulumi.Output<string>;
    public readonly snapShotBucketName!: pulumi.Output<string>;
    public /*out*/ readonly snapshots!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly sourceAssetId!: pulumi.Output<string>;
    public /*out*/ readonly state!: pulumi.Output<string>;
    public /*out*/ readonly tenancyId!: pulumi.Output<string>;
    public /*out*/ readonly timeCreated!: pulumi.Output<string>;
    public /*out*/ readonly timeUpdated!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.CloudMigrationsMigrationAssetTimeouts | undefined>;
    public /*out*/ readonly type!: pulumi.Output<string>;

    /**
     * Create a CloudMigrationsMigrationAsset resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CloudMigrationsMigrationAssetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CloudMigrationsMigrationAssetArgs | CloudMigrationsMigrationAssetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CloudMigrationsMigrationAssetState | undefined;
            resourceInputs["availabilityDomain"] = state ? state.availabilityDomain : undefined;
            resourceInputs["compartmentId"] = state ? state.compartmentId : undefined;
            resourceInputs["dependedOnBies"] = state ? state.dependedOnBies : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["inventoryAssetId"] = state ? state.inventoryAssetId : undefined;
            resourceInputs["lifecycleDetails"] = state ? state.lifecycleDetails : undefined;
            resourceInputs["migrationAssetDependsOns"] = state ? state.migrationAssetDependsOns : undefined;
            resourceInputs["migrationId"] = state ? state.migrationId : undefined;
            resourceInputs["notifications"] = state ? state.notifications : undefined;
            resourceInputs["parentSnapshot"] = state ? state.parentSnapshot : undefined;
            resourceInputs["replicationCompartmentId"] = state ? state.replicationCompartmentId : undefined;
            resourceInputs["replicationScheduleId"] = state ? state.replicationScheduleId : undefined;
            resourceInputs["snapShotBucketName"] = state ? state.snapShotBucketName : undefined;
            resourceInputs["snapshots"] = state ? state.snapshots : undefined;
            resourceInputs["sourceAssetId"] = state ? state.sourceAssetId : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["tenancyId"] = state ? state.tenancyId : undefined;
            resourceInputs["timeCreated"] = state ? state.timeCreated : undefined;
            resourceInputs["timeUpdated"] = state ? state.timeUpdated : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as CloudMigrationsMigrationAssetArgs | undefined;
            if ((!args || args.availabilityDomain === undefined) && !opts.urn) {
                throw new Error("Missing required property 'availabilityDomain'");
            }
            if ((!args || args.inventoryAssetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'inventoryAssetId'");
            }
            if ((!args || args.migrationId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'migrationId'");
            }
            if ((!args || args.replicationCompartmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'replicationCompartmentId'");
            }
            if ((!args || args.snapShotBucketName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'snapShotBucketName'");
            }
            resourceInputs["availabilityDomain"] = args ? args.availabilityDomain : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["inventoryAssetId"] = args ? args.inventoryAssetId : undefined;
            resourceInputs["migrationAssetDependsOns"] = args ? args.migrationAssetDependsOns : undefined;
            resourceInputs["migrationId"] = args ? args.migrationId : undefined;
            resourceInputs["replicationCompartmentId"] = args ? args.replicationCompartmentId : undefined;
            resourceInputs["replicationScheduleId"] = args ? args.replicationScheduleId : undefined;
            resourceInputs["snapShotBucketName"] = args ? args.snapShotBucketName : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["compartmentId"] = undefined /*out*/;
            resourceInputs["dependedOnBies"] = undefined /*out*/;
            resourceInputs["lifecycleDetails"] = undefined /*out*/;
            resourceInputs["notifications"] = undefined /*out*/;
            resourceInputs["parentSnapshot"] = undefined /*out*/;
            resourceInputs["snapshots"] = undefined /*out*/;
            resourceInputs["sourceAssetId"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["tenancyId"] = undefined /*out*/;
            resourceInputs["timeCreated"] = undefined /*out*/;
            resourceInputs["timeUpdated"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CloudMigrationsMigrationAsset.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CloudMigrationsMigrationAsset resources.
 */
export interface CloudMigrationsMigrationAssetState {
    availabilityDomain?: pulumi.Input<string>;
    compartmentId?: pulumi.Input<string>;
    dependedOnBies?: pulumi.Input<pulumi.Input<string>[]>;
    displayName?: pulumi.Input<string>;
    inventoryAssetId?: pulumi.Input<string>;
    lifecycleDetails?: pulumi.Input<string>;
    migrationAssetDependsOns?: pulumi.Input<pulumi.Input<string>[]>;
    migrationId?: pulumi.Input<string>;
    notifications?: pulumi.Input<pulumi.Input<string>[]>;
    parentSnapshot?: pulumi.Input<string>;
    replicationCompartmentId?: pulumi.Input<string>;
    replicationScheduleId?: pulumi.Input<string>;
    snapShotBucketName?: pulumi.Input<string>;
    snapshots?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    sourceAssetId?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    tenancyId?: pulumi.Input<string>;
    timeCreated?: pulumi.Input<string>;
    timeUpdated?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.CloudMigrationsMigrationAssetTimeouts>;
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CloudMigrationsMigrationAsset resource.
 */
export interface CloudMigrationsMigrationAssetArgs {
    availabilityDomain: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    inventoryAssetId: pulumi.Input<string>;
    migrationAssetDependsOns?: pulumi.Input<pulumi.Input<string>[]>;
    migrationId: pulumi.Input<string>;
    replicationCompartmentId: pulumi.Input<string>;
    replicationScheduleId?: pulumi.Input<string>;
    snapShotBucketName: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.CloudMigrationsMigrationAssetTimeouts>;
}
