// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DatabaseDbNode extends pulumi.CustomResource {
    /**
     * Get an existing DatabaseDbNode resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DatabaseDbNodeState, opts?: pulumi.CustomResourceOptions): DatabaseDbNode {
        return new DatabaseDbNode(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/databaseDbNode:DatabaseDbNode';

    /**
     * Returns true if the given object is an instance of DatabaseDbNode.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DatabaseDbNode {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DatabaseDbNode.__pulumiType;
    }

    public /*out*/ readonly additionalDetails!: pulumi.Output<string>;
    public /*out*/ readonly backupIpId!: pulumi.Output<string>;
    public /*out*/ readonly backupVnic2id!: pulumi.Output<string>;
    public /*out*/ readonly backupVnicId!: pulumi.Output<string>;
    public /*out*/ readonly cpuCoreCount!: pulumi.Output<number>;
    public readonly dbNodeId!: pulumi.Output<string>;
    public /*out*/ readonly dbNodeStorageSizeInGbs!: pulumi.Output<number>;
    public /*out*/ readonly dbServerId!: pulumi.Output<string>;
    public /*out*/ readonly dbSystemId!: pulumi.Output<string>;
    public readonly definedTags!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly faultDomain!: pulumi.Output<string>;
    public readonly freeformTags!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly hostIpId!: pulumi.Output<string>;
    public /*out*/ readonly hostname!: pulumi.Output<string>;
    public /*out*/ readonly lifecycleDetails!: pulumi.Output<string>;
    public /*out*/ readonly maintenanceType!: pulumi.Output<string>;
    public /*out*/ readonly memorySizeInGbs!: pulumi.Output<number>;
    public /*out*/ readonly softwareStorageSizeInGb!: pulumi.Output<number>;
    public /*out*/ readonly state!: pulumi.Output<string>;
    public /*out*/ readonly timeCreated!: pulumi.Output<string>;
    public /*out*/ readonly timeMaintenanceWindowEnd!: pulumi.Output<string>;
    public /*out*/ readonly timeMaintenanceWindowStart!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.DatabaseDbNodeTimeouts | undefined>;
    public /*out*/ readonly totalCpuCoreCount!: pulumi.Output<number>;
    public /*out*/ readonly vnic2id!: pulumi.Output<string>;
    public /*out*/ readonly vnicId!: pulumi.Output<string>;

    /**
     * Create a DatabaseDbNode resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatabaseDbNodeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DatabaseDbNodeArgs | DatabaseDbNodeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DatabaseDbNodeState | undefined;
            resourceInputs["additionalDetails"] = state ? state.additionalDetails : undefined;
            resourceInputs["backupIpId"] = state ? state.backupIpId : undefined;
            resourceInputs["backupVnic2id"] = state ? state.backupVnic2id : undefined;
            resourceInputs["backupVnicId"] = state ? state.backupVnicId : undefined;
            resourceInputs["cpuCoreCount"] = state ? state.cpuCoreCount : undefined;
            resourceInputs["dbNodeId"] = state ? state.dbNodeId : undefined;
            resourceInputs["dbNodeStorageSizeInGbs"] = state ? state.dbNodeStorageSizeInGbs : undefined;
            resourceInputs["dbServerId"] = state ? state.dbServerId : undefined;
            resourceInputs["dbSystemId"] = state ? state.dbSystemId : undefined;
            resourceInputs["definedTags"] = state ? state.definedTags : undefined;
            resourceInputs["faultDomain"] = state ? state.faultDomain : undefined;
            resourceInputs["freeformTags"] = state ? state.freeformTags : undefined;
            resourceInputs["hostIpId"] = state ? state.hostIpId : undefined;
            resourceInputs["hostname"] = state ? state.hostname : undefined;
            resourceInputs["lifecycleDetails"] = state ? state.lifecycleDetails : undefined;
            resourceInputs["maintenanceType"] = state ? state.maintenanceType : undefined;
            resourceInputs["memorySizeInGbs"] = state ? state.memorySizeInGbs : undefined;
            resourceInputs["softwareStorageSizeInGb"] = state ? state.softwareStorageSizeInGb : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["timeCreated"] = state ? state.timeCreated : undefined;
            resourceInputs["timeMaintenanceWindowEnd"] = state ? state.timeMaintenanceWindowEnd : undefined;
            resourceInputs["timeMaintenanceWindowStart"] = state ? state.timeMaintenanceWindowStart : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["totalCpuCoreCount"] = state ? state.totalCpuCoreCount : undefined;
            resourceInputs["vnic2id"] = state ? state.vnic2id : undefined;
            resourceInputs["vnicId"] = state ? state.vnicId : undefined;
        } else {
            const args = argsOrState as DatabaseDbNodeArgs | undefined;
            if ((!args || args.dbNodeId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dbNodeId'");
            }
            resourceInputs["dbNodeId"] = args ? args.dbNodeId : undefined;
            resourceInputs["definedTags"] = args ? args.definedTags : undefined;
            resourceInputs["freeformTags"] = args ? args.freeformTags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["additionalDetails"] = undefined /*out*/;
            resourceInputs["backupIpId"] = undefined /*out*/;
            resourceInputs["backupVnic2id"] = undefined /*out*/;
            resourceInputs["backupVnicId"] = undefined /*out*/;
            resourceInputs["cpuCoreCount"] = undefined /*out*/;
            resourceInputs["dbNodeStorageSizeInGbs"] = undefined /*out*/;
            resourceInputs["dbServerId"] = undefined /*out*/;
            resourceInputs["dbSystemId"] = undefined /*out*/;
            resourceInputs["faultDomain"] = undefined /*out*/;
            resourceInputs["hostIpId"] = undefined /*out*/;
            resourceInputs["hostname"] = undefined /*out*/;
            resourceInputs["lifecycleDetails"] = undefined /*out*/;
            resourceInputs["maintenanceType"] = undefined /*out*/;
            resourceInputs["memorySizeInGbs"] = undefined /*out*/;
            resourceInputs["softwareStorageSizeInGb"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["timeCreated"] = undefined /*out*/;
            resourceInputs["timeMaintenanceWindowEnd"] = undefined /*out*/;
            resourceInputs["timeMaintenanceWindowStart"] = undefined /*out*/;
            resourceInputs["totalCpuCoreCount"] = undefined /*out*/;
            resourceInputs["vnic2id"] = undefined /*out*/;
            resourceInputs["vnicId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DatabaseDbNode.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DatabaseDbNode resources.
 */
export interface DatabaseDbNodeState {
    additionalDetails?: pulumi.Input<string>;
    backupIpId?: pulumi.Input<string>;
    backupVnic2id?: pulumi.Input<string>;
    backupVnicId?: pulumi.Input<string>;
    cpuCoreCount?: pulumi.Input<number>;
    dbNodeId?: pulumi.Input<string>;
    dbNodeStorageSizeInGbs?: pulumi.Input<number>;
    dbServerId?: pulumi.Input<string>;
    dbSystemId?: pulumi.Input<string>;
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    faultDomain?: pulumi.Input<string>;
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    hostIpId?: pulumi.Input<string>;
    hostname?: pulumi.Input<string>;
    lifecycleDetails?: pulumi.Input<string>;
    maintenanceType?: pulumi.Input<string>;
    memorySizeInGbs?: pulumi.Input<number>;
    softwareStorageSizeInGb?: pulumi.Input<number>;
    state?: pulumi.Input<string>;
    timeCreated?: pulumi.Input<string>;
    timeMaintenanceWindowEnd?: pulumi.Input<string>;
    timeMaintenanceWindowStart?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.DatabaseDbNodeTimeouts>;
    totalCpuCoreCount?: pulumi.Input<number>;
    vnic2id?: pulumi.Input<string>;
    vnicId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DatabaseDbNode resource.
 */
export interface DatabaseDbNodeArgs {
    dbNodeId: pulumi.Input<string>;
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.DatabaseDbNodeTimeouts>;
}
