// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getIdentityDomainsMyOauth2clientCredential(args: GetIdentityDomainsMyOauth2clientCredentialArgs, opts?: pulumi.InvokeOptions): Promise<GetIdentityDomainsMyOauth2clientCredentialResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getIdentityDomainsMyOauth2clientCredential:getIdentityDomainsMyOauth2clientCredential", {
        "authorization": args.authorization,
        "idcsEndpoint": args.idcsEndpoint,
        "myOauth2clientCredentialId": args.myOauth2clientCredentialId,
        "resourceTypeSchemaVersion": args.resourceTypeSchemaVersion,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getIdentityDomainsMyOauth2clientCredential.
 */
export interface GetIdentityDomainsMyOauth2clientCredentialArgs {
    authorization?: string;
    idcsEndpoint: string;
    myOauth2clientCredentialId: string;
    resourceTypeSchemaVersion?: string;
}

/**
 * A collection of values returned by getIdentityDomainsMyOauth2clientCredential.
 */
export interface GetIdentityDomainsMyOauth2clientCredentialResult {
    readonly authorization?: string;
    readonly compartmentOcid: string;
    readonly deleteInProgress: boolean;
    readonly description: string;
    readonly domainOcid: string;
    readonly expiresOn: string;
    readonly id: string;
    readonly idcsCreatedBies: outputs.GetIdentityDomainsMyOauth2clientCredentialIdcsCreatedBy[];
    readonly idcsEndpoint: string;
    readonly idcsLastModifiedBies: outputs.GetIdentityDomainsMyOauth2clientCredentialIdcsLastModifiedBy[];
    readonly idcsLastUpgradedInRelease: string;
    readonly idcsPreventedOperations: string[];
    readonly isResetSecret: boolean;
    readonly metas: outputs.GetIdentityDomainsMyOauth2clientCredentialMeta[];
    readonly myOauth2clientCredentialId: string;
    readonly name: string;
    readonly ocid: string;
    readonly resourceTypeSchemaVersion?: string;
    readonly schemas: string[];
    readonly scopes: outputs.GetIdentityDomainsMyOauth2clientCredentialScope[];
    readonly status: string;
    readonly tags: outputs.GetIdentityDomainsMyOauth2clientCredentialTag[];
    readonly tenancyOcid: string;
    readonly users: outputs.GetIdentityDomainsMyOauth2clientCredentialUser[];
}
export function getIdentityDomainsMyOauth2clientCredentialOutput(args: GetIdentityDomainsMyOauth2clientCredentialOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetIdentityDomainsMyOauth2clientCredentialResult> {
    return pulumi.output(args).apply((a: any) => getIdentityDomainsMyOauth2clientCredential(a, opts))
}

/**
 * A collection of arguments for invoking getIdentityDomainsMyOauth2clientCredential.
 */
export interface GetIdentityDomainsMyOauth2clientCredentialOutputArgs {
    authorization?: pulumi.Input<string>;
    idcsEndpoint: pulumi.Input<string>;
    myOauth2clientCredentialId: pulumi.Input<string>;
    resourceTypeSchemaVersion?: pulumi.Input<string>;
}
