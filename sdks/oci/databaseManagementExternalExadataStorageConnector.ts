// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DatabaseManagementExternalExadataStorageConnector extends pulumi.CustomResource {
    /**
     * Get an existing DatabaseManagementExternalExadataStorageConnector resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DatabaseManagementExternalExadataStorageConnectorState, opts?: pulumi.CustomResourceOptions): DatabaseManagementExternalExadataStorageConnector {
        return new DatabaseManagementExternalExadataStorageConnector(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/databaseManagementExternalExadataStorageConnector:DatabaseManagementExternalExadataStorageConnector';

    /**
     * Returns true if the given object is an instance of DatabaseManagementExternalExadataStorageConnector.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DatabaseManagementExternalExadataStorageConnector {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DatabaseManagementExternalExadataStorageConnector.__pulumiType;
    }

    public /*out*/ readonly additionalDetails!: pulumi.Output<{[key: string]: string}>;
    public readonly agentId!: pulumi.Output<string>;
    public readonly connectionUri!: pulumi.Output<string>;
    public readonly connectorName!: pulumi.Output<string>;
    public readonly credentialInfo!: pulumi.Output<outputs.DatabaseManagementExternalExadataStorageConnectorCredentialInfo>;
    public readonly definedTags!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly displayName!: pulumi.Output<string>;
    public /*out*/ readonly exadataInfrastructureId!: pulumi.Output<string>;
    public readonly freeformTags!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly internalId!: pulumi.Output<string>;
    public /*out*/ readonly lifecycleDetails!: pulumi.Output<string>;
    public /*out*/ readonly state!: pulumi.Output<string>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly storageServerId!: pulumi.Output<string>;
    public /*out*/ readonly systemTags!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly timeCreated!: pulumi.Output<string>;
    public /*out*/ readonly timeUpdated!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.DatabaseManagementExternalExadataStorageConnectorTimeouts | undefined>;
    public /*out*/ readonly version!: pulumi.Output<string>;

    /**
     * Create a DatabaseManagementExternalExadataStorageConnector resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatabaseManagementExternalExadataStorageConnectorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DatabaseManagementExternalExadataStorageConnectorArgs | DatabaseManagementExternalExadataStorageConnectorState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DatabaseManagementExternalExadataStorageConnectorState | undefined;
            resourceInputs["additionalDetails"] = state ? state.additionalDetails : undefined;
            resourceInputs["agentId"] = state ? state.agentId : undefined;
            resourceInputs["connectionUri"] = state ? state.connectionUri : undefined;
            resourceInputs["connectorName"] = state ? state.connectorName : undefined;
            resourceInputs["credentialInfo"] = state ? state.credentialInfo : undefined;
            resourceInputs["definedTags"] = state ? state.definedTags : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["exadataInfrastructureId"] = state ? state.exadataInfrastructureId : undefined;
            resourceInputs["freeformTags"] = state ? state.freeformTags : undefined;
            resourceInputs["internalId"] = state ? state.internalId : undefined;
            resourceInputs["lifecycleDetails"] = state ? state.lifecycleDetails : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["storageServerId"] = state ? state.storageServerId : undefined;
            resourceInputs["systemTags"] = state ? state.systemTags : undefined;
            resourceInputs["timeCreated"] = state ? state.timeCreated : undefined;
            resourceInputs["timeUpdated"] = state ? state.timeUpdated : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as DatabaseManagementExternalExadataStorageConnectorArgs | undefined;
            if ((!args || args.agentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'agentId'");
            }
            if ((!args || args.connectionUri === undefined) && !opts.urn) {
                throw new Error("Missing required property 'connectionUri'");
            }
            if ((!args || args.connectorName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'connectorName'");
            }
            if ((!args || args.credentialInfo === undefined) && !opts.urn) {
                throw new Error("Missing required property 'credentialInfo'");
            }
            if ((!args || args.storageServerId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'storageServerId'");
            }
            resourceInputs["agentId"] = args ? args.agentId : undefined;
            resourceInputs["connectionUri"] = args ? args.connectionUri : undefined;
            resourceInputs["connectorName"] = args ? args.connectorName : undefined;
            resourceInputs["credentialInfo"] = args ? args.credentialInfo : undefined;
            resourceInputs["definedTags"] = args ? args.definedTags : undefined;
            resourceInputs["freeformTags"] = args ? args.freeformTags : undefined;
            resourceInputs["storageServerId"] = args ? args.storageServerId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["additionalDetails"] = undefined /*out*/;
            resourceInputs["displayName"] = undefined /*out*/;
            resourceInputs["exadataInfrastructureId"] = undefined /*out*/;
            resourceInputs["internalId"] = undefined /*out*/;
            resourceInputs["lifecycleDetails"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["systemTags"] = undefined /*out*/;
            resourceInputs["timeCreated"] = undefined /*out*/;
            resourceInputs["timeUpdated"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DatabaseManagementExternalExadataStorageConnector.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DatabaseManagementExternalExadataStorageConnector resources.
 */
export interface DatabaseManagementExternalExadataStorageConnectorState {
    additionalDetails?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    agentId?: pulumi.Input<string>;
    connectionUri?: pulumi.Input<string>;
    connectorName?: pulumi.Input<string>;
    credentialInfo?: pulumi.Input<inputs.DatabaseManagementExternalExadataStorageConnectorCredentialInfo>;
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    displayName?: pulumi.Input<string>;
    exadataInfrastructureId?: pulumi.Input<string>;
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    internalId?: pulumi.Input<string>;
    lifecycleDetails?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    storageServerId?: pulumi.Input<string>;
    systemTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeCreated?: pulumi.Input<string>;
    timeUpdated?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.DatabaseManagementExternalExadataStorageConnectorTimeouts>;
    version?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DatabaseManagementExternalExadataStorageConnector resource.
 */
export interface DatabaseManagementExternalExadataStorageConnectorArgs {
    agentId: pulumi.Input<string>;
    connectionUri: pulumi.Input<string>;
    connectorName: pulumi.Input<string>;
    credentialInfo: pulumi.Input<inputs.DatabaseManagementExternalExadataStorageConnectorCredentialInfo>;
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    storageServerId: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.DatabaseManagementExternalExadataStorageConnectorTimeouts>;
}
