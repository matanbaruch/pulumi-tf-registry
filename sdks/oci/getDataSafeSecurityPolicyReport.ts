// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getDataSafeSecurityPolicyReport(args: GetDataSafeSecurityPolicyReportArgs, opts?: pulumi.InvokeOptions): Promise<GetDataSafeSecurityPolicyReportResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getDataSafeSecurityPolicyReport:getDataSafeSecurityPolicyReport", {
        "id": args.id,
        "securityPolicyReportId": args.securityPolicyReportId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getDataSafeSecurityPolicyReport.
 */
export interface GetDataSafeSecurityPolicyReportArgs {
    id?: string;
    securityPolicyReportId: string;
}

/**
 * A collection of values returned by getDataSafeSecurityPolicyReport.
 */
export interface GetDataSafeSecurityPolicyReportResult {
    readonly compartmentId: string;
    readonly definedTags: {[key: string]: string};
    readonly description: string;
    readonly displayName: string;
    readonly freeformTags: {[key: string]: string};
    readonly id: string;
    readonly lifecycleDetails: string;
    readonly securityPolicyReportId: string;
    readonly state: string;
    readonly systemTags: {[key: string]: string};
    readonly targetId: string;
    readonly timeCreated: string;
    readonly timeUpdated: string;
}
export function getDataSafeSecurityPolicyReportOutput(args: GetDataSafeSecurityPolicyReportOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDataSafeSecurityPolicyReportResult> {
    return pulumi.output(args).apply((a: any) => getDataSafeSecurityPolicyReport(a, opts))
}

/**
 * A collection of arguments for invoking getDataSafeSecurityPolicyReport.
 */
export interface GetDataSafeSecurityPolicyReportOutputArgs {
    id?: pulumi.Input<string>;
    securityPolicyReportId: pulumi.Input<string>;
}
