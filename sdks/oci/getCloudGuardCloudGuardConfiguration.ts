// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getCloudGuardCloudGuardConfiguration(args: GetCloudGuardCloudGuardConfigurationArgs, opts?: pulumi.InvokeOptions): Promise<GetCloudGuardCloudGuardConfigurationResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getCloudGuardCloudGuardConfiguration:getCloudGuardCloudGuardConfiguration", {
        "compartmentId": args.compartmentId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getCloudGuardCloudGuardConfiguration.
 */
export interface GetCloudGuardCloudGuardConfigurationArgs {
    compartmentId: string;
}

/**
 * A collection of values returned by getCloudGuardCloudGuardConfiguration.
 */
export interface GetCloudGuardCloudGuardConfigurationResult {
    readonly compartmentId: string;
    readonly id: string;
    readonly reportingRegion: string;
    readonly selfManageResources: boolean;
    readonly status: string;
}
export function getCloudGuardCloudGuardConfigurationOutput(args: GetCloudGuardCloudGuardConfigurationOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetCloudGuardCloudGuardConfigurationResult> {
    return pulumi.output(args).apply((a: any) => getCloudGuardCloudGuardConfiguration(a, opts))
}

/**
 * A collection of arguments for invoking getCloudGuardCloudGuardConfiguration.
 */
export interface GetCloudGuardCloudGuardConfigurationOutputArgs {
    compartmentId: pulumi.Input<string>;
}
