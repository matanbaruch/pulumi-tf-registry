// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getDatabaseManagementManagedDatabaseSqlPlanBaselines(args: GetDatabaseManagementManagedDatabaseSqlPlanBaselinesArgs, opts?: pulumi.InvokeOptions): Promise<GetDatabaseManagementManagedDatabaseSqlPlanBaselinesResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getDatabaseManagementManagedDatabaseSqlPlanBaselines:getDatabaseManagementManagedDatabaseSqlPlanBaselines", {
        "filters": args.filters,
        "id": args.id,
        "isAccepted": args.isAccepted,
        "isAdaptive": args.isAdaptive,
        "isAutoPurged": args.isAutoPurged,
        "isEnabled": args.isEnabled,
        "isFixed": args.isFixed,
        "isNeverExecuted": args.isNeverExecuted,
        "isReproduced": args.isReproduced,
        "limit": args.limit,
        "managedDatabaseId": args.managedDatabaseId,
        "opcNamedCredentialId": args.opcNamedCredentialId,
        "origin": args.origin,
        "planName": args.planName,
        "sqlHandle": args.sqlHandle,
        "sqlText": args.sqlText,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getDatabaseManagementManagedDatabaseSqlPlanBaselines.
 */
export interface GetDatabaseManagementManagedDatabaseSqlPlanBaselinesArgs {
    filters?: inputs.GetDatabaseManagementManagedDatabaseSqlPlanBaselinesFilter[];
    id?: string;
    isAccepted?: boolean;
    isAdaptive?: boolean;
    isAutoPurged?: boolean;
    isEnabled?: boolean;
    isFixed?: boolean;
    isNeverExecuted?: boolean;
    isReproduced?: boolean;
    limit?: number;
    managedDatabaseId: string;
    opcNamedCredentialId?: string;
    origin?: string;
    planName?: string;
    sqlHandle?: string;
    sqlText?: string;
}

/**
 * A collection of values returned by getDatabaseManagementManagedDatabaseSqlPlanBaselines.
 */
export interface GetDatabaseManagementManagedDatabaseSqlPlanBaselinesResult {
    readonly filters?: outputs.GetDatabaseManagementManagedDatabaseSqlPlanBaselinesFilter[];
    readonly id: string;
    readonly isAccepted?: boolean;
    readonly isAdaptive?: boolean;
    readonly isAutoPurged?: boolean;
    readonly isEnabled?: boolean;
    readonly isFixed?: boolean;
    readonly isNeverExecuted?: boolean;
    readonly isReproduced?: boolean;
    readonly limit?: number;
    readonly managedDatabaseId: string;
    readonly opcNamedCredentialId?: string;
    readonly origin?: string;
    readonly planName?: string;
    readonly sqlHandle?: string;
    readonly sqlPlanBaselineCollections: outputs.GetDatabaseManagementManagedDatabaseSqlPlanBaselinesSqlPlanBaselineCollection[];
    readonly sqlText?: string;
}
export function getDatabaseManagementManagedDatabaseSqlPlanBaselinesOutput(args: GetDatabaseManagementManagedDatabaseSqlPlanBaselinesOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDatabaseManagementManagedDatabaseSqlPlanBaselinesResult> {
    return pulumi.output(args).apply((a: any) => getDatabaseManagementManagedDatabaseSqlPlanBaselines(a, opts))
}

/**
 * A collection of arguments for invoking getDatabaseManagementManagedDatabaseSqlPlanBaselines.
 */
export interface GetDatabaseManagementManagedDatabaseSqlPlanBaselinesOutputArgs {
    filters?: pulumi.Input<pulumi.Input<inputs.GetDatabaseManagementManagedDatabaseSqlPlanBaselinesFilterArgs>[]>;
    id?: pulumi.Input<string>;
    isAccepted?: pulumi.Input<boolean>;
    isAdaptive?: pulumi.Input<boolean>;
    isAutoPurged?: pulumi.Input<boolean>;
    isEnabled?: pulumi.Input<boolean>;
    isFixed?: pulumi.Input<boolean>;
    isNeverExecuted?: pulumi.Input<boolean>;
    isReproduced?: pulumi.Input<boolean>;
    limit?: pulumi.Input<number>;
    managedDatabaseId: pulumi.Input<string>;
    opcNamedCredentialId?: pulumi.Input<string>;
    origin?: pulumi.Input<string>;
    planName?: pulumi.Input<string>;
    sqlHandle?: pulumi.Input<string>;
    sqlText?: pulumi.Input<string>;
}
