// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getDnsResolver(args: GetDnsResolverArgs, opts?: pulumi.InvokeOptions): Promise<GetDnsResolverResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getDnsResolver:getDnsResolver", {
        "resolverId": args.resolverId,
        "scope": args.scope,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getDnsResolver.
 */
export interface GetDnsResolverArgs {
    resolverId: string;
    scope?: string;
}

/**
 * A collection of values returned by getDnsResolver.
 */
export interface GetDnsResolverResult {
    readonly attachedVcnId: string;
    readonly attachedViews: outputs.GetDnsResolverAttachedView[];
    readonly compartmentId: string;
    readonly defaultViewId: string;
    readonly definedTags: {[key: string]: string};
    readonly displayName: string;
    readonly endpoints: outputs.GetDnsResolverEndpoint[];
    readonly freeformTags: {[key: string]: string};
    readonly id: string;
    readonly isProtected: boolean;
    readonly resolverId: string;
    readonly rules: outputs.GetDnsResolverRule[];
    readonly scope?: string;
    readonly self: string;
    readonly state: string;
    readonly timeCreated: string;
    readonly timeUpdated: string;
}
export function getDnsResolverOutput(args: GetDnsResolverOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDnsResolverResult> {
    return pulumi.output(args).apply((a: any) => getDnsResolver(a, opts))
}

/**
 * A collection of arguments for invoking getDnsResolver.
 */
export interface GetDnsResolverOutputArgs {
    resolverId: pulumi.Input<string>;
    scope?: pulumi.Input<string>;
}
