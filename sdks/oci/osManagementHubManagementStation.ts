// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class OsManagementHubManagementStation extends pulumi.CustomResource {
    /**
     * Get an existing OsManagementHubManagementStation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OsManagementHubManagementStationState, opts?: pulumi.CustomResourceOptions): OsManagementHubManagementStation {
        return new OsManagementHubManagementStation(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/osManagementHubManagementStation:OsManagementHubManagementStation';

    /**
     * Returns true if the given object is an instance of OsManagementHubManagementStation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OsManagementHubManagementStation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OsManagementHubManagementStation.__pulumiType;
    }

    public readonly compartmentId!: pulumi.Output<string>;
    public readonly definedTags!: pulumi.Output<{[key: string]: string}>;
    public readonly description!: pulumi.Output<string>;
    public readonly displayName!: pulumi.Output<string>;
    public readonly freeformTags!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly healths!: pulumi.Output<outputs.OsManagementHubManagementStationHealth[]>;
    public readonly hostname!: pulumi.Output<string>;
    public /*out*/ readonly managedInstanceId!: pulumi.Output<string>;
    public readonly mirror!: pulumi.Output<outputs.OsManagementHubManagementStationMirror>;
    public /*out*/ readonly mirrorCapacity!: pulumi.Output<number>;
    public /*out*/ readonly mirrorSyncStatuses!: pulumi.Output<outputs.OsManagementHubManagementStationMirrorSyncStatus[]>;
    public /*out*/ readonly overallPercentage!: pulumi.Output<number>;
    public /*out*/ readonly overallState!: pulumi.Output<string>;
    public /*out*/ readonly profileId!: pulumi.Output<string>;
    public readonly proxy!: pulumi.Output<outputs.OsManagementHubManagementStationProxy>;
    public readonly refreshTrigger!: pulumi.Output<number | undefined>;
    public /*out*/ readonly scheduledJobId!: pulumi.Output<string>;
    public /*out*/ readonly state!: pulumi.Output<string>;
    public /*out*/ readonly systemTags!: pulumi.Output<{[key: string]: string}>;
    public readonly timeouts!: pulumi.Output<outputs.OsManagementHubManagementStationTimeouts | undefined>;
    public /*out*/ readonly totalMirrors!: pulumi.Output<number>;

    /**
     * Create a OsManagementHubManagementStation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OsManagementHubManagementStationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OsManagementHubManagementStationArgs | OsManagementHubManagementStationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OsManagementHubManagementStationState | undefined;
            resourceInputs["compartmentId"] = state ? state.compartmentId : undefined;
            resourceInputs["definedTags"] = state ? state.definedTags : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["freeformTags"] = state ? state.freeformTags : undefined;
            resourceInputs["healths"] = state ? state.healths : undefined;
            resourceInputs["hostname"] = state ? state.hostname : undefined;
            resourceInputs["managedInstanceId"] = state ? state.managedInstanceId : undefined;
            resourceInputs["mirror"] = state ? state.mirror : undefined;
            resourceInputs["mirrorCapacity"] = state ? state.mirrorCapacity : undefined;
            resourceInputs["mirrorSyncStatuses"] = state ? state.mirrorSyncStatuses : undefined;
            resourceInputs["overallPercentage"] = state ? state.overallPercentage : undefined;
            resourceInputs["overallState"] = state ? state.overallState : undefined;
            resourceInputs["profileId"] = state ? state.profileId : undefined;
            resourceInputs["proxy"] = state ? state.proxy : undefined;
            resourceInputs["refreshTrigger"] = state ? state.refreshTrigger : undefined;
            resourceInputs["scheduledJobId"] = state ? state.scheduledJobId : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["systemTags"] = state ? state.systemTags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["totalMirrors"] = state ? state.totalMirrors : undefined;
        } else {
            const args = argsOrState as OsManagementHubManagementStationArgs | undefined;
            if ((!args || args.compartmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'compartmentId'");
            }
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if ((!args || args.hostname === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hostname'");
            }
            if ((!args || args.mirror === undefined) && !opts.urn) {
                throw new Error("Missing required property 'mirror'");
            }
            if ((!args || args.proxy === undefined) && !opts.urn) {
                throw new Error("Missing required property 'proxy'");
            }
            resourceInputs["compartmentId"] = args ? args.compartmentId : undefined;
            resourceInputs["definedTags"] = args ? args.definedTags : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["freeformTags"] = args ? args.freeformTags : undefined;
            resourceInputs["hostname"] = args ? args.hostname : undefined;
            resourceInputs["mirror"] = args ? args.mirror : undefined;
            resourceInputs["proxy"] = args ? args.proxy : undefined;
            resourceInputs["refreshTrigger"] = args ? args.refreshTrigger : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["healths"] = undefined /*out*/;
            resourceInputs["managedInstanceId"] = undefined /*out*/;
            resourceInputs["mirrorCapacity"] = undefined /*out*/;
            resourceInputs["mirrorSyncStatuses"] = undefined /*out*/;
            resourceInputs["overallPercentage"] = undefined /*out*/;
            resourceInputs["overallState"] = undefined /*out*/;
            resourceInputs["profileId"] = undefined /*out*/;
            resourceInputs["scheduledJobId"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["systemTags"] = undefined /*out*/;
            resourceInputs["totalMirrors"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OsManagementHubManagementStation.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering OsManagementHubManagementStation resources.
 */
export interface OsManagementHubManagementStationState {
    compartmentId?: pulumi.Input<string>;
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    description?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    healths?: pulumi.Input<pulumi.Input<inputs.OsManagementHubManagementStationHealth>[]>;
    hostname?: pulumi.Input<string>;
    managedInstanceId?: pulumi.Input<string>;
    mirror?: pulumi.Input<inputs.OsManagementHubManagementStationMirror>;
    mirrorCapacity?: pulumi.Input<number>;
    mirrorSyncStatuses?: pulumi.Input<pulumi.Input<inputs.OsManagementHubManagementStationMirrorSyncStatus>[]>;
    overallPercentage?: pulumi.Input<number>;
    overallState?: pulumi.Input<string>;
    profileId?: pulumi.Input<string>;
    proxy?: pulumi.Input<inputs.OsManagementHubManagementStationProxy>;
    refreshTrigger?: pulumi.Input<number>;
    scheduledJobId?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    systemTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.OsManagementHubManagementStationTimeouts>;
    totalMirrors?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a OsManagementHubManagementStation resource.
 */
export interface OsManagementHubManagementStationArgs {
    compartmentId: pulumi.Input<string>;
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    description?: pulumi.Input<string>;
    displayName: pulumi.Input<string>;
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    hostname: pulumi.Input<string>;
    mirror: pulumi.Input<inputs.OsManagementHubManagementStationMirror>;
    proxy: pulumi.Input<inputs.OsManagementHubManagementStationProxy>;
    refreshTrigger?: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.OsManagementHubManagementStationTimeouts>;
}
