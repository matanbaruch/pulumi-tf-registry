// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getDnsResolverEndpoint(args: GetDnsResolverEndpointArgs, opts?: pulumi.InvokeOptions): Promise<GetDnsResolverEndpointResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getDnsResolverEndpoint:getDnsResolverEndpoint", {
        "resolverEndpointName": args.resolverEndpointName,
        "resolverId": args.resolverId,
        "scope": args.scope,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getDnsResolverEndpoint.
 */
export interface GetDnsResolverEndpointArgs {
    resolverEndpointName: string;
    resolverId: string;
    scope?: string;
}

/**
 * A collection of values returned by getDnsResolverEndpoint.
 */
export interface GetDnsResolverEndpointResult {
    readonly compartmentId: string;
    readonly endpointType: string;
    readonly forwardingAddress: string;
    readonly id: string;
    readonly isForwarding: boolean;
    readonly isListening: boolean;
    readonly listeningAddress: string;
    readonly name: string;
    readonly nsgIds: string[];
    readonly resolverEndpointName: string;
    readonly resolverId: string;
    readonly scope?: string;
    readonly self: string;
    readonly state: string;
    readonly subnetId: string;
    readonly timeCreated: string;
    readonly timeUpdated: string;
}
export function getDnsResolverEndpointOutput(args: GetDnsResolverEndpointOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDnsResolverEndpointResult> {
    return pulumi.output(args).apply((a: any) => getDnsResolverEndpoint(a, opts))
}

/**
 * A collection of arguments for invoking getDnsResolverEndpoint.
 */
export interface GetDnsResolverEndpointOutputArgs {
    resolverEndpointName: pulumi.Input<string>;
    resolverId: pulumi.Input<string>;
    scope?: pulumi.Input<string>;
}
