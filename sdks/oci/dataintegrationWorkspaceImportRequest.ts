// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DataintegrationWorkspaceImportRequest extends pulumi.CustomResource {
    /**
     * Get an existing DataintegrationWorkspaceImportRequest resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DataintegrationWorkspaceImportRequestState, opts?: pulumi.CustomResourceOptions): DataintegrationWorkspaceImportRequest {
        return new DataintegrationWorkspaceImportRequest(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/dataintegrationWorkspaceImportRequest:DataintegrationWorkspaceImportRequest';

    /**
     * Returns true if the given object is an instance of DataintegrationWorkspaceImportRequest.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DataintegrationWorkspaceImportRequest {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DataintegrationWorkspaceImportRequest.__pulumiType;
    }

    public readonly areDataAssetReferencesIncluded!: pulumi.Output<boolean>;
    public readonly bucket!: pulumi.Output<string>;
    public /*out*/ readonly createdBy!: pulumi.Output<string>;
    public /*out*/ readonly errorMessages!: pulumi.Output<{[key: string]: string}>;
    public readonly fileName!: pulumi.Output<string>;
    public readonly importConflictResolution!: pulumi.Output<outputs.DataintegrationWorkspaceImportRequestImportConflictResolution | undefined>;
    public /*out*/ readonly importedObjects!: pulumi.Output<outputs.DataintegrationWorkspaceImportRequestImportedObject[]>;
    public /*out*/ readonly key!: pulumi.Output<string>;
    public /*out*/ readonly name!: pulumi.Output<string>;
    public readonly objectKeyForImport!: pulumi.Output<string>;
    public readonly objectStorageRegion!: pulumi.Output<string>;
    public readonly objectStorageTenancyId!: pulumi.Output<string>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public /*out*/ readonly timeEndedInMillis!: pulumi.Output<string>;
    public /*out*/ readonly timeStartedInMillis!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.DataintegrationWorkspaceImportRequestTimeouts | undefined>;
    public /*out*/ readonly totalImportedObjectCount!: pulumi.Output<number>;
    public readonly workspaceId!: pulumi.Output<string>;

    /**
     * Create a DataintegrationWorkspaceImportRequest resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DataintegrationWorkspaceImportRequestArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DataintegrationWorkspaceImportRequestArgs | DataintegrationWorkspaceImportRequestState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DataintegrationWorkspaceImportRequestState | undefined;
            resourceInputs["areDataAssetReferencesIncluded"] = state ? state.areDataAssetReferencesIncluded : undefined;
            resourceInputs["bucket"] = state ? state.bucket : undefined;
            resourceInputs["createdBy"] = state ? state.createdBy : undefined;
            resourceInputs["errorMessages"] = state ? state.errorMessages : undefined;
            resourceInputs["fileName"] = state ? state.fileName : undefined;
            resourceInputs["importConflictResolution"] = state ? state.importConflictResolution : undefined;
            resourceInputs["importedObjects"] = state ? state.importedObjects : undefined;
            resourceInputs["key"] = state ? state.key : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["objectKeyForImport"] = state ? state.objectKeyForImport : undefined;
            resourceInputs["objectStorageRegion"] = state ? state.objectStorageRegion : undefined;
            resourceInputs["objectStorageTenancyId"] = state ? state.objectStorageTenancyId : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["timeEndedInMillis"] = state ? state.timeEndedInMillis : undefined;
            resourceInputs["timeStartedInMillis"] = state ? state.timeStartedInMillis : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["totalImportedObjectCount"] = state ? state.totalImportedObjectCount : undefined;
            resourceInputs["workspaceId"] = state ? state.workspaceId : undefined;
        } else {
            const args = argsOrState as DataintegrationWorkspaceImportRequestArgs | undefined;
            if ((!args || args.bucket === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bucket'");
            }
            if ((!args || args.fileName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'fileName'");
            }
            if ((!args || args.workspaceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'workspaceId'");
            }
            resourceInputs["areDataAssetReferencesIncluded"] = args ? args.areDataAssetReferencesIncluded : undefined;
            resourceInputs["bucket"] = args ? args.bucket : undefined;
            resourceInputs["fileName"] = args ? args.fileName : undefined;
            resourceInputs["importConflictResolution"] = args ? args.importConflictResolution : undefined;
            resourceInputs["objectKeyForImport"] = args ? args.objectKeyForImport : undefined;
            resourceInputs["objectStorageRegion"] = args ? args.objectStorageRegion : undefined;
            resourceInputs["objectStorageTenancyId"] = args ? args.objectStorageTenancyId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["workspaceId"] = args ? args.workspaceId : undefined;
            resourceInputs["createdBy"] = undefined /*out*/;
            resourceInputs["errorMessages"] = undefined /*out*/;
            resourceInputs["importedObjects"] = undefined /*out*/;
            resourceInputs["key"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["timeEndedInMillis"] = undefined /*out*/;
            resourceInputs["timeStartedInMillis"] = undefined /*out*/;
            resourceInputs["totalImportedObjectCount"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DataintegrationWorkspaceImportRequest.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DataintegrationWorkspaceImportRequest resources.
 */
export interface DataintegrationWorkspaceImportRequestState {
    areDataAssetReferencesIncluded?: pulumi.Input<boolean>;
    bucket?: pulumi.Input<string>;
    createdBy?: pulumi.Input<string>;
    errorMessages?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    fileName?: pulumi.Input<string>;
    importConflictResolution?: pulumi.Input<inputs.DataintegrationWorkspaceImportRequestImportConflictResolution>;
    importedObjects?: pulumi.Input<pulumi.Input<inputs.DataintegrationWorkspaceImportRequestImportedObject>[]>;
    key?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    objectKeyForImport?: pulumi.Input<string>;
    objectStorageRegion?: pulumi.Input<string>;
    objectStorageTenancyId?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    timeEndedInMillis?: pulumi.Input<string>;
    timeStartedInMillis?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.DataintegrationWorkspaceImportRequestTimeouts>;
    totalImportedObjectCount?: pulumi.Input<number>;
    workspaceId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DataintegrationWorkspaceImportRequest resource.
 */
export interface DataintegrationWorkspaceImportRequestArgs {
    areDataAssetReferencesIncluded?: pulumi.Input<boolean>;
    bucket: pulumi.Input<string>;
    fileName: pulumi.Input<string>;
    importConflictResolution?: pulumi.Input<inputs.DataintegrationWorkspaceImportRequestImportConflictResolution>;
    objectKeyForImport?: pulumi.Input<string>;
    objectStorageRegion?: pulumi.Input<string>;
    objectStorageTenancyId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.DataintegrationWorkspaceImportRequestTimeouts>;
    workspaceId: pulumi.Input<string>;
}
