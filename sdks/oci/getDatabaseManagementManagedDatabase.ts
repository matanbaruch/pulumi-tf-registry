// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getDatabaseManagementManagedDatabase(args: GetDatabaseManagementManagedDatabaseArgs, opts?: pulumi.InvokeOptions): Promise<GetDatabaseManagementManagedDatabaseResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getDatabaseManagementManagedDatabase:getDatabaseManagementManagedDatabase", {
        "databasePlatformName": args.databasePlatformName,
        "id": args.id,
        "managedDatabaseId": args.managedDatabaseId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getDatabaseManagementManagedDatabase.
 */
export interface GetDatabaseManagementManagedDatabaseArgs {
    databasePlatformName?: string;
    id?: string;
    managedDatabaseId: string;
}

/**
 * A collection of values returned by getDatabaseManagementManagedDatabase.
 */
export interface GetDatabaseManagementManagedDatabaseResult {
    readonly additionalDetails: {[key: string]: string};
    readonly compartmentId: string;
    readonly databasePlatformName?: string;
    readonly databaseStatus: string;
    readonly databaseSubType: string;
    readonly databaseType: string;
    readonly databaseVersion: string;
    readonly dbSystemId: string;
    readonly dbmgmtFeatureConfigs: outputs.GetDatabaseManagementManagedDatabaseDbmgmtFeatureConfig[];
    readonly definedTags: {[key: string]: string};
    readonly deploymentType: string;
    readonly freeformTags: {[key: string]: string};
    readonly id: string;
    readonly isCluster: boolean;
    readonly managedDatabaseGroups: outputs.GetDatabaseManagementManagedDatabaseManagedDatabaseGroup[];
    readonly managedDatabaseId: string;
    readonly managementOption: string;
    readonly name: string;
    readonly parentContainerId: string;
    readonly storageSystemId: string;
    readonly systemTags: {[key: string]: string};
    readonly timeCreated: string;
    readonly workloadType: string;
}
export function getDatabaseManagementManagedDatabaseOutput(args: GetDatabaseManagementManagedDatabaseOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDatabaseManagementManagedDatabaseResult> {
    return pulumi.output(args).apply((a: any) => getDatabaseManagementManagedDatabase(a, opts))
}

/**
 * A collection of arguments for invoking getDatabaseManagementManagedDatabase.
 */
export interface GetDatabaseManagementManagedDatabaseOutputArgs {
    databasePlatformName?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    managedDatabaseId: pulumi.Input<string>;
}
