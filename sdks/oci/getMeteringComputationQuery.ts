// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getMeteringComputationQuery(args: GetMeteringComputationQueryArgs, opts?: pulumi.InvokeOptions): Promise<GetMeteringComputationQueryResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getMeteringComputationQuery:getMeteringComputationQuery", {
        "queryId": args.queryId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getMeteringComputationQuery.
 */
export interface GetMeteringComputationQueryArgs {
    queryId: string;
}

/**
 * A collection of values returned by getMeteringComputationQuery.
 */
export interface GetMeteringComputationQueryResult {
    readonly compartmentId: string;
    readonly id: string;
    readonly queryDefinitions: outputs.GetMeteringComputationQueryQueryDefinition[];
    readonly queryId: string;
}
export function getMeteringComputationQueryOutput(args: GetMeteringComputationQueryOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetMeteringComputationQueryResult> {
    return pulumi.output(args).apply((a: any) => getMeteringComputationQuery(a, opts))
}

/**
 * A collection of arguments for invoking getMeteringComputationQuery.
 */
export interface GetMeteringComputationQueryOutputArgs {
    queryId: pulumi.Input<string>;
}
