// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DatabaseDbHome extends pulumi.CustomResource {
    /**
     * Get an existing DatabaseDbHome resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DatabaseDbHomeState, opts?: pulumi.CustomResourceOptions): DatabaseDbHome {
        return new DatabaseDbHome(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/databaseDbHome:DatabaseDbHome';

    /**
     * Returns true if the given object is an instance of DatabaseDbHome.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DatabaseDbHome {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DatabaseDbHome.__pulumiType;
    }

    public /*out*/ readonly compartmentId!: pulumi.Output<string>;
    public readonly database!: pulumi.Output<outputs.DatabaseDbHomeDatabase | undefined>;
    public readonly databaseSoftwareImageId!: pulumi.Output<string>;
    public /*out*/ readonly dbHomeLocation!: pulumi.Output<string>;
    public readonly dbSystemId!: pulumi.Output<string>;
    public readonly dbVersion!: pulumi.Output<string>;
    public readonly definedTags!: pulumi.Output<{[key: string]: string}>;
    public readonly displayName!: pulumi.Output<string>;
    public readonly enableDatabaseDelete!: pulumi.Output<boolean | undefined>;
    public readonly freeformTags!: pulumi.Output<{[key: string]: string}>;
    public readonly isDesupportedVersion!: pulumi.Output<boolean>;
    public readonly isUnifiedAuditingEnabled!: pulumi.Output<boolean>;
    public readonly kmsKeyId!: pulumi.Output<string>;
    public readonly kmsKeyVersionId!: pulumi.Output<string>;
    public /*out*/ readonly lastPatchHistoryEntryId!: pulumi.Output<string>;
    public /*out*/ readonly lifecycleDetails!: pulumi.Output<string>;
    public readonly source!: pulumi.Output<string>;
    public /*out*/ readonly state!: pulumi.Output<string>;
    public /*out*/ readonly timeCreated!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.DatabaseDbHomeTimeouts | undefined>;
    public readonly vmClusterId!: pulumi.Output<string>;

    /**
     * Create a DatabaseDbHome resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: DatabaseDbHomeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DatabaseDbHomeArgs | DatabaseDbHomeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DatabaseDbHomeState | undefined;
            resourceInputs["compartmentId"] = state ? state.compartmentId : undefined;
            resourceInputs["database"] = state ? state.database : undefined;
            resourceInputs["databaseSoftwareImageId"] = state ? state.databaseSoftwareImageId : undefined;
            resourceInputs["dbHomeLocation"] = state ? state.dbHomeLocation : undefined;
            resourceInputs["dbSystemId"] = state ? state.dbSystemId : undefined;
            resourceInputs["dbVersion"] = state ? state.dbVersion : undefined;
            resourceInputs["definedTags"] = state ? state.definedTags : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["enableDatabaseDelete"] = state ? state.enableDatabaseDelete : undefined;
            resourceInputs["freeformTags"] = state ? state.freeformTags : undefined;
            resourceInputs["isDesupportedVersion"] = state ? state.isDesupportedVersion : undefined;
            resourceInputs["isUnifiedAuditingEnabled"] = state ? state.isUnifiedAuditingEnabled : undefined;
            resourceInputs["kmsKeyId"] = state ? state.kmsKeyId : undefined;
            resourceInputs["kmsKeyVersionId"] = state ? state.kmsKeyVersionId : undefined;
            resourceInputs["lastPatchHistoryEntryId"] = state ? state.lastPatchHistoryEntryId : undefined;
            resourceInputs["lifecycleDetails"] = state ? state.lifecycleDetails : undefined;
            resourceInputs["source"] = state ? state.source : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["timeCreated"] = state ? state.timeCreated : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["vmClusterId"] = state ? state.vmClusterId : undefined;
        } else {
            const args = argsOrState as DatabaseDbHomeArgs | undefined;
            resourceInputs["database"] = args ? args.database : undefined;
            resourceInputs["databaseSoftwareImageId"] = args ? args.databaseSoftwareImageId : undefined;
            resourceInputs["dbSystemId"] = args ? args.dbSystemId : undefined;
            resourceInputs["dbVersion"] = args ? args.dbVersion : undefined;
            resourceInputs["definedTags"] = args ? args.definedTags : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["enableDatabaseDelete"] = args ? args.enableDatabaseDelete : undefined;
            resourceInputs["freeformTags"] = args ? args.freeformTags : undefined;
            resourceInputs["isDesupportedVersion"] = args ? args.isDesupportedVersion : undefined;
            resourceInputs["isUnifiedAuditingEnabled"] = args ? args.isUnifiedAuditingEnabled : undefined;
            resourceInputs["kmsKeyId"] = args ? args.kmsKeyId : undefined;
            resourceInputs["kmsKeyVersionId"] = args ? args.kmsKeyVersionId : undefined;
            resourceInputs["source"] = args ? args.source : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["vmClusterId"] = args ? args.vmClusterId : undefined;
            resourceInputs["compartmentId"] = undefined /*out*/;
            resourceInputs["dbHomeLocation"] = undefined /*out*/;
            resourceInputs["lastPatchHistoryEntryId"] = undefined /*out*/;
            resourceInputs["lifecycleDetails"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["timeCreated"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DatabaseDbHome.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DatabaseDbHome resources.
 */
export interface DatabaseDbHomeState {
    compartmentId?: pulumi.Input<string>;
    database?: pulumi.Input<inputs.DatabaseDbHomeDatabase>;
    databaseSoftwareImageId?: pulumi.Input<string>;
    dbHomeLocation?: pulumi.Input<string>;
    dbSystemId?: pulumi.Input<string>;
    dbVersion?: pulumi.Input<string>;
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    displayName?: pulumi.Input<string>;
    enableDatabaseDelete?: pulumi.Input<boolean>;
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    isDesupportedVersion?: pulumi.Input<boolean>;
    isUnifiedAuditingEnabled?: pulumi.Input<boolean>;
    kmsKeyId?: pulumi.Input<string>;
    kmsKeyVersionId?: pulumi.Input<string>;
    lastPatchHistoryEntryId?: pulumi.Input<string>;
    lifecycleDetails?: pulumi.Input<string>;
    source?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    timeCreated?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.DatabaseDbHomeTimeouts>;
    vmClusterId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DatabaseDbHome resource.
 */
export interface DatabaseDbHomeArgs {
    database?: pulumi.Input<inputs.DatabaseDbHomeDatabase>;
    databaseSoftwareImageId?: pulumi.Input<string>;
    dbSystemId?: pulumi.Input<string>;
    dbVersion?: pulumi.Input<string>;
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    displayName?: pulumi.Input<string>;
    enableDatabaseDelete?: pulumi.Input<boolean>;
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    isDesupportedVersion?: pulumi.Input<boolean>;
    isUnifiedAuditingEnabled?: pulumi.Input<boolean>;
    kmsKeyId?: pulumi.Input<string>;
    kmsKeyVersionId?: pulumi.Input<string>;
    source?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.DatabaseDbHomeTimeouts>;
    vmClusterId?: pulumi.Input<string>;
}
