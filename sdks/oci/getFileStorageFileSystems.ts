// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getFileStorageFileSystems(args: GetFileStorageFileSystemsArgs, opts?: pulumi.InvokeOptions): Promise<GetFileStorageFileSystemsResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getFileStorageFileSystems:getFileStorageFileSystems", {
        "availabilityDomain": args.availabilityDomain,
        "compartmentId": args.compartmentId,
        "displayName": args.displayName,
        "filesystemSnapshotPolicyId": args.filesystemSnapshotPolicyId,
        "filters": args.filters,
        "id": args.id,
        "parentFileSystemId": args.parentFileSystemId,
        "sourceSnapshotId": args.sourceSnapshotId,
        "state": args.state,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getFileStorageFileSystems.
 */
export interface GetFileStorageFileSystemsArgs {
    availabilityDomain: string;
    compartmentId: string;
    displayName?: string;
    filesystemSnapshotPolicyId?: string;
    filters?: inputs.GetFileStorageFileSystemsFilter[];
    id?: string;
    parentFileSystemId?: string;
    sourceSnapshotId?: string;
    state?: string;
}

/**
 * A collection of values returned by getFileStorageFileSystems.
 */
export interface GetFileStorageFileSystemsResult {
    readonly availabilityDomain: string;
    readonly compartmentId: string;
    readonly displayName?: string;
    readonly fileSystems: outputs.GetFileStorageFileSystemsFileSystem[];
    readonly filesystemSnapshotPolicyId?: string;
    readonly filters?: outputs.GetFileStorageFileSystemsFilter[];
    readonly id?: string;
    readonly parentFileSystemId?: string;
    readonly sourceSnapshotId?: string;
    readonly state?: string;
}
export function getFileStorageFileSystemsOutput(args: GetFileStorageFileSystemsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetFileStorageFileSystemsResult> {
    return pulumi.output(args).apply((a: any) => getFileStorageFileSystems(a, opts))
}

/**
 * A collection of arguments for invoking getFileStorageFileSystems.
 */
export interface GetFileStorageFileSystemsOutputArgs {
    availabilityDomain: pulumi.Input<string>;
    compartmentId: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    filesystemSnapshotPolicyId?: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.GetFileStorageFileSystemsFilterArgs>[]>;
    id?: pulumi.Input<string>;
    parentFileSystemId?: pulumi.Input<string>;
    sourceSnapshotId?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
}
