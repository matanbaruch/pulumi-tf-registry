// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getIdentityDomainsIdentityPropagationTrust(args: GetIdentityDomainsIdentityPropagationTrustArgs, opts?: pulumi.InvokeOptions): Promise<GetIdentityDomainsIdentityPropagationTrustResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getIdentityDomainsIdentityPropagationTrust:getIdentityDomainsIdentityPropagationTrust", {
        "attributeSets": args.attributeSets,
        "attributes": args.attributes,
        "authorization": args.authorization,
        "idcsEndpoint": args.idcsEndpoint,
        "identityPropagationTrustId": args.identityPropagationTrustId,
        "resourceTypeSchemaVersion": args.resourceTypeSchemaVersion,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getIdentityDomainsIdentityPropagationTrust.
 */
export interface GetIdentityDomainsIdentityPropagationTrustArgs {
    attributeSets?: string[];
    attributes?: string;
    authorization?: string;
    idcsEndpoint: string;
    identityPropagationTrustId: string;
    resourceTypeSchemaVersion?: string;
}

/**
 * A collection of values returned by getIdentityDomainsIdentityPropagationTrust.
 */
export interface GetIdentityDomainsIdentityPropagationTrustResult {
    readonly accountId: string;
    readonly active: boolean;
    readonly allowImpersonation: boolean;
    readonly attributeSets?: string[];
    readonly attributes?: string;
    readonly authorization?: string;
    readonly clientClaimName: string;
    readonly clientClaimValues: string[];
    readonly clockSkewSeconds: number;
    readonly compartmentOcid: string;
    readonly deleteInProgress: boolean;
    readonly description: string;
    readonly domainOcid: string;
    readonly id: string;
    readonly idcsCreatedBies: outputs.GetIdentityDomainsIdentityPropagationTrustIdcsCreatedBy[];
    readonly idcsEndpoint: string;
    readonly idcsLastModifiedBies: outputs.GetIdentityDomainsIdentityPropagationTrustIdcsLastModifiedBy[];
    readonly idcsLastUpgradedInRelease: string;
    readonly idcsPreventedOperations: string[];
    readonly identityPropagationTrustId: string;
    readonly impersonationServiceUsers: outputs.GetIdentityDomainsIdentityPropagationTrustImpersonationServiceUser[];
    readonly issuer: string;
    readonly keytabs: outputs.GetIdentityDomainsIdentityPropagationTrustKeytab[];
    readonly metas: outputs.GetIdentityDomainsIdentityPropagationTrustMeta[];
    readonly name: string;
    readonly oauthClients: string[];
    readonly ocid: string;
    readonly publicCertificate: string;
    readonly publicKeyEndpoint: string;
    readonly resourceTypeSchemaVersion?: string;
    readonly schemas: string[];
    readonly subjectClaimName: string;
    readonly subjectMappingAttribute: string;
    readonly subjectType: string;
    readonly tags: outputs.GetIdentityDomainsIdentityPropagationTrustTag[];
    readonly tenancyOcid: string;
    readonly type: string;
}
export function getIdentityDomainsIdentityPropagationTrustOutput(args: GetIdentityDomainsIdentityPropagationTrustOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetIdentityDomainsIdentityPropagationTrustResult> {
    return pulumi.output(args).apply((a: any) => getIdentityDomainsIdentityPropagationTrust(a, opts))
}

/**
 * A collection of arguments for invoking getIdentityDomainsIdentityPropagationTrust.
 */
export interface GetIdentityDomainsIdentityPropagationTrustOutputArgs {
    attributeSets?: pulumi.Input<pulumi.Input<string>[]>;
    attributes?: pulumi.Input<string>;
    authorization?: pulumi.Input<string>;
    idcsEndpoint: pulumi.Input<string>;
    identityPropagationTrustId: pulumi.Input<string>;
    resourceTypeSchemaVersion?: pulumi.Input<string>;
}
