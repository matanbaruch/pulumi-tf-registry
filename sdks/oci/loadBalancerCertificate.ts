// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class LoadBalancerCertificate extends pulumi.CustomResource {
    /**
     * Get an existing LoadBalancerCertificate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LoadBalancerCertificateState, opts?: pulumi.CustomResourceOptions): LoadBalancerCertificate {
        return new LoadBalancerCertificate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/loadBalancerCertificate:LoadBalancerCertificate';

    /**
     * Returns true if the given object is an instance of LoadBalancerCertificate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LoadBalancerCertificate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LoadBalancerCertificate.__pulumiType;
    }

    public readonly caCertificate!: pulumi.Output<string>;
    public readonly certificateName!: pulumi.Output<string>;
    public readonly loadBalancerId!: pulumi.Output<string>;
    public readonly passphrase!: pulumi.Output<string | undefined>;
    public readonly privateKey!: pulumi.Output<string>;
    public readonly publicCertificate!: pulumi.Output<string>;
    public /*out*/ readonly state!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.LoadBalancerCertificateTimeouts | undefined>;

    /**
     * Create a LoadBalancerCertificate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LoadBalancerCertificateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LoadBalancerCertificateArgs | LoadBalancerCertificateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LoadBalancerCertificateState | undefined;
            resourceInputs["caCertificate"] = state ? state.caCertificate : undefined;
            resourceInputs["certificateName"] = state ? state.certificateName : undefined;
            resourceInputs["loadBalancerId"] = state ? state.loadBalancerId : undefined;
            resourceInputs["passphrase"] = state ? state.passphrase : undefined;
            resourceInputs["privateKey"] = state ? state.privateKey : undefined;
            resourceInputs["publicCertificate"] = state ? state.publicCertificate : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as LoadBalancerCertificateArgs | undefined;
            if ((!args || args.certificateName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'certificateName'");
            }
            if ((!args || args.loadBalancerId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'loadBalancerId'");
            }
            resourceInputs["caCertificate"] = args ? args.caCertificate : undefined;
            resourceInputs["certificateName"] = args ? args.certificateName : undefined;
            resourceInputs["loadBalancerId"] = args ? args.loadBalancerId : undefined;
            resourceInputs["passphrase"] = args?.passphrase ? pulumi.secret(args.passphrase) : undefined;
            resourceInputs["privateKey"] = args?.privateKey ? pulumi.secret(args.privateKey) : undefined;
            resourceInputs["publicCertificate"] = args ? args.publicCertificate : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["state"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["passphrase", "privateKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(LoadBalancerCertificate.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LoadBalancerCertificate resources.
 */
export interface LoadBalancerCertificateState {
    caCertificate?: pulumi.Input<string>;
    certificateName?: pulumi.Input<string>;
    loadBalancerId?: pulumi.Input<string>;
    passphrase?: pulumi.Input<string>;
    privateKey?: pulumi.Input<string>;
    publicCertificate?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.LoadBalancerCertificateTimeouts>;
}

/**
 * The set of arguments for constructing a LoadBalancerCertificate resource.
 */
export interface LoadBalancerCertificateArgs {
    caCertificate?: pulumi.Input<string>;
    certificateName: pulumi.Input<string>;
    loadBalancerId: pulumi.Input<string>;
    passphrase?: pulumi.Input<string>;
    privateKey?: pulumi.Input<string>;
    publicCertificate?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.LoadBalancerCertificateTimeouts>;
}
