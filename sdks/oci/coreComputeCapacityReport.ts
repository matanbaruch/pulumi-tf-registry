// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CoreComputeCapacityReport extends pulumi.CustomResource {
    /**
     * Get an existing CoreComputeCapacityReport resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CoreComputeCapacityReportState, opts?: pulumi.CustomResourceOptions): CoreComputeCapacityReport {
        return new CoreComputeCapacityReport(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/coreComputeCapacityReport:CoreComputeCapacityReport';

    /**
     * Returns true if the given object is an instance of CoreComputeCapacityReport.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CoreComputeCapacityReport {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CoreComputeCapacityReport.__pulumiType;
    }

    public readonly availabilityDomain!: pulumi.Output<string>;
    public readonly compartmentId!: pulumi.Output<string>;
    public readonly shapeAvailabilities!: pulumi.Output<outputs.CoreComputeCapacityReportShapeAvailability[]>;
    public /*out*/ readonly timeCreated!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.CoreComputeCapacityReportTimeouts | undefined>;

    /**
     * Create a CoreComputeCapacityReport resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CoreComputeCapacityReportArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CoreComputeCapacityReportArgs | CoreComputeCapacityReportState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CoreComputeCapacityReportState | undefined;
            resourceInputs["availabilityDomain"] = state ? state.availabilityDomain : undefined;
            resourceInputs["compartmentId"] = state ? state.compartmentId : undefined;
            resourceInputs["shapeAvailabilities"] = state ? state.shapeAvailabilities : undefined;
            resourceInputs["timeCreated"] = state ? state.timeCreated : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as CoreComputeCapacityReportArgs | undefined;
            if ((!args || args.availabilityDomain === undefined) && !opts.urn) {
                throw new Error("Missing required property 'availabilityDomain'");
            }
            if ((!args || args.compartmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'compartmentId'");
            }
            if ((!args || args.shapeAvailabilities === undefined) && !opts.urn) {
                throw new Error("Missing required property 'shapeAvailabilities'");
            }
            resourceInputs["availabilityDomain"] = args ? args.availabilityDomain : undefined;
            resourceInputs["compartmentId"] = args ? args.compartmentId : undefined;
            resourceInputs["shapeAvailabilities"] = args ? args.shapeAvailabilities : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["timeCreated"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CoreComputeCapacityReport.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CoreComputeCapacityReport resources.
 */
export interface CoreComputeCapacityReportState {
    availabilityDomain?: pulumi.Input<string>;
    compartmentId?: pulumi.Input<string>;
    shapeAvailabilities?: pulumi.Input<pulumi.Input<inputs.CoreComputeCapacityReportShapeAvailability>[]>;
    timeCreated?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.CoreComputeCapacityReportTimeouts>;
}

/**
 * The set of arguments for constructing a CoreComputeCapacityReport resource.
 */
export interface CoreComputeCapacityReportArgs {
    availabilityDomain: pulumi.Input<string>;
    compartmentId: pulumi.Input<string>;
    shapeAvailabilities: pulumi.Input<pulumi.Input<inputs.CoreComputeCapacityReportShapeAvailability>[]>;
    timeouts?: pulumi.Input<inputs.CoreComputeCapacityReportTimeouts>;
}
