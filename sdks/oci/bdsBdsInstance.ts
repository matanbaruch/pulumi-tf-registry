// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class BdsBdsInstance extends pulumi.CustomResource {
    /**
     * Get an existing BdsBdsInstance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BdsBdsInstanceState, opts?: pulumi.CustomResourceOptions): BdsBdsInstance {
        return new BdsBdsInstance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/bdsBdsInstance:BdsBdsInstance';

    /**
     * Returns true if the given object is an instance of BdsBdsInstance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BdsBdsInstance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BdsBdsInstance.__pulumiType;
    }

    public readonly bootstrapScriptUrl!: pulumi.Output<string>;
    public readonly cloudSqlDetails!: pulumi.Output<outputs.BdsBdsInstanceCloudSqlDetail[] | undefined>;
    public readonly clusterAdminPassword!: pulumi.Output<string>;
    public /*out*/ readonly clusterDetails!: pulumi.Output<outputs.BdsBdsInstanceClusterDetail[]>;
    public readonly clusterProfile!: pulumi.Output<string>;
    public readonly clusterPublicKey!: pulumi.Output<string>;
    public readonly clusterVersion!: pulumi.Output<string>;
    public readonly compartmentId!: pulumi.Output<string>;
    public readonly computeOnlyWorkerNode!: pulumi.Output<outputs.BdsBdsInstanceComputeOnlyWorkerNode | undefined>;
    public /*out*/ readonly createdBy!: pulumi.Output<string>;
    public readonly definedTags!: pulumi.Output<{[key: string]: string}>;
    public readonly displayName!: pulumi.Output<string>;
    public readonly edgeNode!: pulumi.Output<outputs.BdsBdsInstanceEdgeNode | undefined>;
    public readonly freeformTags!: pulumi.Output<{[key: string]: string}>;
    public readonly ignoreExistingNodesShapes!: pulumi.Output<string[] | undefined>;
    public readonly isCloudSqlConfigured!: pulumi.Output<boolean>;
    public readonly isForceStopJobs!: pulumi.Output<boolean | undefined>;
    public readonly isHighAvailability!: pulumi.Output<boolean>;
    public readonly isKafkaConfigured!: pulumi.Output<boolean | undefined>;
    public readonly isSecure!: pulumi.Output<boolean>;
    public readonly kafkaBrokerNode!: pulumi.Output<outputs.BdsBdsInstanceKafkaBrokerNode | undefined>;
    public readonly kerberosRealmName!: pulumi.Output<string>;
    public readonly kmsKeyId!: pulumi.Output<string>;
    public readonly masterNode!: pulumi.Output<outputs.BdsBdsInstanceMasterNode>;
    public readonly networkConfig!: pulumi.Output<outputs.BdsBdsInstanceNetworkConfig | undefined>;
    public /*out*/ readonly nodes!: pulumi.Output<outputs.BdsBdsInstanceNode[]>;
    public /*out*/ readonly numberOfNodes!: pulumi.Output<number>;
    public /*out*/ readonly numberOfNodesRequiringMaintenanceReboot!: pulumi.Output<number>;
    public readonly osPatchVersion!: pulumi.Output<string | undefined>;
    public readonly state!: pulumi.Output<string>;
    public /*out*/ readonly timeCreated!: pulumi.Output<string>;
    public /*out*/ readonly timeUpdated!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.BdsBdsInstanceTimeouts | undefined>;
    public readonly utilNode!: pulumi.Output<outputs.BdsBdsInstanceUtilNode>;
    public readonly workerNode!: pulumi.Output<outputs.BdsBdsInstanceWorkerNode>;

    /**
     * Create a BdsBdsInstance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BdsBdsInstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BdsBdsInstanceArgs | BdsBdsInstanceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BdsBdsInstanceState | undefined;
            resourceInputs["bootstrapScriptUrl"] = state ? state.bootstrapScriptUrl : undefined;
            resourceInputs["cloudSqlDetails"] = state ? state.cloudSqlDetails : undefined;
            resourceInputs["clusterAdminPassword"] = state ? state.clusterAdminPassword : undefined;
            resourceInputs["clusterDetails"] = state ? state.clusterDetails : undefined;
            resourceInputs["clusterProfile"] = state ? state.clusterProfile : undefined;
            resourceInputs["clusterPublicKey"] = state ? state.clusterPublicKey : undefined;
            resourceInputs["clusterVersion"] = state ? state.clusterVersion : undefined;
            resourceInputs["compartmentId"] = state ? state.compartmentId : undefined;
            resourceInputs["computeOnlyWorkerNode"] = state ? state.computeOnlyWorkerNode : undefined;
            resourceInputs["createdBy"] = state ? state.createdBy : undefined;
            resourceInputs["definedTags"] = state ? state.definedTags : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["edgeNode"] = state ? state.edgeNode : undefined;
            resourceInputs["freeformTags"] = state ? state.freeformTags : undefined;
            resourceInputs["ignoreExistingNodesShapes"] = state ? state.ignoreExistingNodesShapes : undefined;
            resourceInputs["isCloudSqlConfigured"] = state ? state.isCloudSqlConfigured : undefined;
            resourceInputs["isForceStopJobs"] = state ? state.isForceStopJobs : undefined;
            resourceInputs["isHighAvailability"] = state ? state.isHighAvailability : undefined;
            resourceInputs["isKafkaConfigured"] = state ? state.isKafkaConfigured : undefined;
            resourceInputs["isSecure"] = state ? state.isSecure : undefined;
            resourceInputs["kafkaBrokerNode"] = state ? state.kafkaBrokerNode : undefined;
            resourceInputs["kerberosRealmName"] = state ? state.kerberosRealmName : undefined;
            resourceInputs["kmsKeyId"] = state ? state.kmsKeyId : undefined;
            resourceInputs["masterNode"] = state ? state.masterNode : undefined;
            resourceInputs["networkConfig"] = state ? state.networkConfig : undefined;
            resourceInputs["nodes"] = state ? state.nodes : undefined;
            resourceInputs["numberOfNodes"] = state ? state.numberOfNodes : undefined;
            resourceInputs["numberOfNodesRequiringMaintenanceReboot"] = state ? state.numberOfNodesRequiringMaintenanceReboot : undefined;
            resourceInputs["osPatchVersion"] = state ? state.osPatchVersion : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["timeCreated"] = state ? state.timeCreated : undefined;
            resourceInputs["timeUpdated"] = state ? state.timeUpdated : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["utilNode"] = state ? state.utilNode : undefined;
            resourceInputs["workerNode"] = state ? state.workerNode : undefined;
        } else {
            const args = argsOrState as BdsBdsInstanceArgs | undefined;
            if ((!args || args.clusterAdminPassword === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterAdminPassword'");
            }
            if ((!args || args.clusterPublicKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterPublicKey'");
            }
            if ((!args || args.clusterVersion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterVersion'");
            }
            if ((!args || args.compartmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'compartmentId'");
            }
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if ((!args || args.isHighAvailability === undefined) && !opts.urn) {
                throw new Error("Missing required property 'isHighAvailability'");
            }
            if ((!args || args.isSecure === undefined) && !opts.urn) {
                throw new Error("Missing required property 'isSecure'");
            }
            if ((!args || args.masterNode === undefined) && !opts.urn) {
                throw new Error("Missing required property 'masterNode'");
            }
            if ((!args || args.utilNode === undefined) && !opts.urn) {
                throw new Error("Missing required property 'utilNode'");
            }
            if ((!args || args.workerNode === undefined) && !opts.urn) {
                throw new Error("Missing required property 'workerNode'");
            }
            resourceInputs["bootstrapScriptUrl"] = args ? args.bootstrapScriptUrl : undefined;
            resourceInputs["cloudSqlDetails"] = args ? args.cloudSqlDetails : undefined;
            resourceInputs["clusterAdminPassword"] = args?.clusterAdminPassword ? pulumi.secret(args.clusterAdminPassword) : undefined;
            resourceInputs["clusterProfile"] = args ? args.clusterProfile : undefined;
            resourceInputs["clusterPublicKey"] = args ? args.clusterPublicKey : undefined;
            resourceInputs["clusterVersion"] = args ? args.clusterVersion : undefined;
            resourceInputs["compartmentId"] = args ? args.compartmentId : undefined;
            resourceInputs["computeOnlyWorkerNode"] = args ? args.computeOnlyWorkerNode : undefined;
            resourceInputs["definedTags"] = args ? args.definedTags : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["edgeNode"] = args ? args.edgeNode : undefined;
            resourceInputs["freeformTags"] = args ? args.freeformTags : undefined;
            resourceInputs["ignoreExistingNodesShapes"] = args ? args.ignoreExistingNodesShapes : undefined;
            resourceInputs["isCloudSqlConfigured"] = args ? args.isCloudSqlConfigured : undefined;
            resourceInputs["isForceStopJobs"] = args ? args.isForceStopJobs : undefined;
            resourceInputs["isHighAvailability"] = args ? args.isHighAvailability : undefined;
            resourceInputs["isKafkaConfigured"] = args ? args.isKafkaConfigured : undefined;
            resourceInputs["isSecure"] = args ? args.isSecure : undefined;
            resourceInputs["kafkaBrokerNode"] = args ? args.kafkaBrokerNode : undefined;
            resourceInputs["kerberosRealmName"] = args ? args.kerberosRealmName : undefined;
            resourceInputs["kmsKeyId"] = args ? args.kmsKeyId : undefined;
            resourceInputs["masterNode"] = args ? args.masterNode : undefined;
            resourceInputs["networkConfig"] = args ? args.networkConfig : undefined;
            resourceInputs["osPatchVersion"] = args ? args.osPatchVersion : undefined;
            resourceInputs["state"] = args ? args.state : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["utilNode"] = args ? args.utilNode : undefined;
            resourceInputs["workerNode"] = args ? args.workerNode : undefined;
            resourceInputs["clusterDetails"] = undefined /*out*/;
            resourceInputs["createdBy"] = undefined /*out*/;
            resourceInputs["nodes"] = undefined /*out*/;
            resourceInputs["numberOfNodes"] = undefined /*out*/;
            resourceInputs["numberOfNodesRequiringMaintenanceReboot"] = undefined /*out*/;
            resourceInputs["timeCreated"] = undefined /*out*/;
            resourceInputs["timeUpdated"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["clusterAdminPassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(BdsBdsInstance.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering BdsBdsInstance resources.
 */
export interface BdsBdsInstanceState {
    bootstrapScriptUrl?: pulumi.Input<string>;
    cloudSqlDetails?: pulumi.Input<pulumi.Input<inputs.BdsBdsInstanceCloudSqlDetail>[]>;
    clusterAdminPassword?: pulumi.Input<string>;
    clusterDetails?: pulumi.Input<pulumi.Input<inputs.BdsBdsInstanceClusterDetail>[]>;
    clusterProfile?: pulumi.Input<string>;
    clusterPublicKey?: pulumi.Input<string>;
    clusterVersion?: pulumi.Input<string>;
    compartmentId?: pulumi.Input<string>;
    computeOnlyWorkerNode?: pulumi.Input<inputs.BdsBdsInstanceComputeOnlyWorkerNode>;
    createdBy?: pulumi.Input<string>;
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    displayName?: pulumi.Input<string>;
    edgeNode?: pulumi.Input<inputs.BdsBdsInstanceEdgeNode>;
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    ignoreExistingNodesShapes?: pulumi.Input<pulumi.Input<string>[]>;
    isCloudSqlConfigured?: pulumi.Input<boolean>;
    isForceStopJobs?: pulumi.Input<boolean>;
    isHighAvailability?: pulumi.Input<boolean>;
    isKafkaConfigured?: pulumi.Input<boolean>;
    isSecure?: pulumi.Input<boolean>;
    kafkaBrokerNode?: pulumi.Input<inputs.BdsBdsInstanceKafkaBrokerNode>;
    kerberosRealmName?: pulumi.Input<string>;
    kmsKeyId?: pulumi.Input<string>;
    masterNode?: pulumi.Input<inputs.BdsBdsInstanceMasterNode>;
    networkConfig?: pulumi.Input<inputs.BdsBdsInstanceNetworkConfig>;
    nodes?: pulumi.Input<pulumi.Input<inputs.BdsBdsInstanceNode>[]>;
    numberOfNodes?: pulumi.Input<number>;
    numberOfNodesRequiringMaintenanceReboot?: pulumi.Input<number>;
    osPatchVersion?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    timeCreated?: pulumi.Input<string>;
    timeUpdated?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.BdsBdsInstanceTimeouts>;
    utilNode?: pulumi.Input<inputs.BdsBdsInstanceUtilNode>;
    workerNode?: pulumi.Input<inputs.BdsBdsInstanceWorkerNode>;
}

/**
 * The set of arguments for constructing a BdsBdsInstance resource.
 */
export interface BdsBdsInstanceArgs {
    bootstrapScriptUrl?: pulumi.Input<string>;
    cloudSqlDetails?: pulumi.Input<pulumi.Input<inputs.BdsBdsInstanceCloudSqlDetail>[]>;
    clusterAdminPassword: pulumi.Input<string>;
    clusterProfile?: pulumi.Input<string>;
    clusterPublicKey: pulumi.Input<string>;
    clusterVersion: pulumi.Input<string>;
    compartmentId: pulumi.Input<string>;
    computeOnlyWorkerNode?: pulumi.Input<inputs.BdsBdsInstanceComputeOnlyWorkerNode>;
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    displayName: pulumi.Input<string>;
    edgeNode?: pulumi.Input<inputs.BdsBdsInstanceEdgeNode>;
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    ignoreExistingNodesShapes?: pulumi.Input<pulumi.Input<string>[]>;
    isCloudSqlConfigured?: pulumi.Input<boolean>;
    isForceStopJobs?: pulumi.Input<boolean>;
    isHighAvailability: pulumi.Input<boolean>;
    isKafkaConfigured?: pulumi.Input<boolean>;
    isSecure: pulumi.Input<boolean>;
    kafkaBrokerNode?: pulumi.Input<inputs.BdsBdsInstanceKafkaBrokerNode>;
    kerberosRealmName?: pulumi.Input<string>;
    kmsKeyId?: pulumi.Input<string>;
    masterNode: pulumi.Input<inputs.BdsBdsInstanceMasterNode>;
    networkConfig?: pulumi.Input<inputs.BdsBdsInstanceNetworkConfig>;
    osPatchVersion?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.BdsBdsInstanceTimeouts>;
    utilNode: pulumi.Input<inputs.BdsBdsInstanceUtilNode>;
    workerNode: pulumi.Input<inputs.BdsBdsInstanceWorkerNode>;
}
