// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getDatabaseVmClusterRecommendedNetwork(args: GetDatabaseVmClusterRecommendedNetworkArgs, opts?: pulumi.InvokeOptions): Promise<GetDatabaseVmClusterRecommendedNetworkResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getDatabaseVmClusterRecommendedNetwork:getDatabaseVmClusterRecommendedNetwork", {
        "compartmentId": args.compartmentId,
        "dbServers": args.dbServers,
        "definedTags": args.definedTags,
        "displayName": args.displayName,
        "dns": args.dns,
        "drScanListenerPortTcp": args.drScanListenerPortTcp,
        "exadataInfrastructureId": args.exadataInfrastructureId,
        "freeformTags": args.freeformTags,
        "id": args.id,
        "networks": args.networks,
        "ntps": args.ntps,
        "scanListenerPortTcp": args.scanListenerPortTcp,
        "scanListenerPortTcpSsl": args.scanListenerPortTcpSsl,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getDatabaseVmClusterRecommendedNetwork.
 */
export interface GetDatabaseVmClusterRecommendedNetworkArgs {
    compartmentId: string;
    dbServers?: string[];
    definedTags?: {[key: string]: string};
    displayName: string;
    dns?: string[];
    drScanListenerPortTcp?: number;
    exadataInfrastructureId: string;
    freeformTags?: {[key: string]: string};
    id?: string;
    networks: inputs.GetDatabaseVmClusterRecommendedNetworkNetwork[];
    ntps?: string[];
    scanListenerPortTcp?: number;
    scanListenerPortTcpSsl?: number;
}

/**
 * A collection of values returned by getDatabaseVmClusterRecommendedNetwork.
 */
export interface GetDatabaseVmClusterRecommendedNetworkResult {
    readonly compartmentId: string;
    readonly dbServers?: string[];
    readonly definedTags: {[key: string]: string};
    readonly displayName: string;
    readonly dns: string[];
    readonly drScanListenerPortTcp?: number;
    readonly drScans: outputs.GetDatabaseVmClusterRecommendedNetworkDrScan[];
    readonly exadataInfrastructureId: string;
    readonly freeformTags: {[key: string]: string};
    readonly id: string;
    readonly networks: outputs.GetDatabaseVmClusterRecommendedNetworkNetwork[];
    readonly ntps: string[];
    readonly scanListenerPortTcp?: number;
    readonly scanListenerPortTcpSsl?: number;
    readonly scans: outputs.GetDatabaseVmClusterRecommendedNetworkScan[];
    readonly vmNetworks: outputs.GetDatabaseVmClusterRecommendedNetworkVmNetwork[];
}
export function getDatabaseVmClusterRecommendedNetworkOutput(args: GetDatabaseVmClusterRecommendedNetworkOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDatabaseVmClusterRecommendedNetworkResult> {
    return pulumi.output(args).apply((a: any) => getDatabaseVmClusterRecommendedNetwork(a, opts))
}

/**
 * A collection of arguments for invoking getDatabaseVmClusterRecommendedNetwork.
 */
export interface GetDatabaseVmClusterRecommendedNetworkOutputArgs {
    compartmentId: pulumi.Input<string>;
    dbServers?: pulumi.Input<pulumi.Input<string>[]>;
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    displayName: pulumi.Input<string>;
    dns?: pulumi.Input<pulumi.Input<string>[]>;
    drScanListenerPortTcp?: pulumi.Input<number>;
    exadataInfrastructureId: pulumi.Input<string>;
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    id?: pulumi.Input<string>;
    networks: pulumi.Input<pulumi.Input<inputs.GetDatabaseVmClusterRecommendedNetworkNetworkArgs>[]>;
    ntps?: pulumi.Input<pulumi.Input<string>[]>;
    scanListenerPortTcp?: pulumi.Input<number>;
    scanListenerPortTcpSsl?: pulumi.Input<number>;
}
