// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getApmConfigConfig(args: GetApmConfigConfigArgs, opts?: pulumi.InvokeOptions): Promise<GetApmConfigConfigResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getApmConfigConfig:getApmConfigConfig", {
        "apmDomainId": args.apmDomainId,
        "configId": args.configId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getApmConfigConfig.
 */
export interface GetApmConfigConfigArgs {
    apmDomainId: string;
    configId: string;
}

/**
 * A collection of values returned by getApmConfigConfig.
 */
export interface GetApmConfigConfigResult {
    readonly apmDomainId: string;
    readonly configId: string;
    readonly configType: string;
    readonly createdBy: string;
    readonly definedTags: {[key: string]: string};
    readonly description: string;
    readonly dimensions: outputs.GetApmConfigConfigDimension[];
    readonly displayName: string;
    readonly etag: string;
    readonly filterId: string;
    readonly filterText: string;
    readonly freeformTags: {[key: string]: string};
    readonly group: string;
    readonly id: string;
    readonly inUseBies: outputs.GetApmConfigConfigInUseBy[];
    readonly metrics: outputs.GetApmConfigConfigMetric[];
    readonly namespace: string;
    readonly opcDryRun: string;
    readonly options: string;
    readonly rules: outputs.GetApmConfigConfigRule[];
    readonly timeCreated: string;
    readonly timeUpdated: string;
    readonly updatedBy: string;
}
export function getApmConfigConfigOutput(args: GetApmConfigConfigOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetApmConfigConfigResult> {
    return pulumi.output(args).apply((a: any) => getApmConfigConfig(a, opts))
}

/**
 * A collection of arguments for invoking getApmConfigConfig.
 */
export interface GetApmConfigConfigOutputArgs {
    apmDomainId: pulumi.Input<string>;
    configId: pulumi.Input<string>;
}
