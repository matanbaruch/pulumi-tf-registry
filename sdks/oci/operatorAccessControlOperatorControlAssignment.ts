// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class OperatorAccessControlOperatorControlAssignment extends pulumi.CustomResource {
    /**
     * Get an existing OperatorAccessControlOperatorControlAssignment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OperatorAccessControlOperatorControlAssignmentState, opts?: pulumi.CustomResourceOptions): OperatorAccessControlOperatorControlAssignment {
        return new OperatorAccessControlOperatorControlAssignment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/operatorAccessControlOperatorControlAssignment:OperatorAccessControlOperatorControlAssignment';

    /**
     * Returns true if the given object is an instance of OperatorAccessControlOperatorControlAssignment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OperatorAccessControlOperatorControlAssignment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OperatorAccessControlOperatorControlAssignment.__pulumiType;
    }

    public /*out*/ readonly assignerId!: pulumi.Output<string>;
    public readonly comment!: pulumi.Output<string>;
    public readonly compartmentId!: pulumi.Output<string>;
    public readonly definedTags!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly detachmentDescription!: pulumi.Output<string>;
    public /*out*/ readonly errorCode!: pulumi.Output<number>;
    public /*out*/ readonly errorMessage!: pulumi.Output<string>;
    public readonly freeformTags!: pulumi.Output<{[key: string]: string}>;
    public readonly isAutoApproveDuringMaintenance!: pulumi.Output<boolean>;
    public /*out*/ readonly isDefaultAssignment!: pulumi.Output<boolean>;
    public readonly isEnforcedAlways!: pulumi.Output<boolean>;
    public readonly isHypervisorLogForwarded!: pulumi.Output<boolean>;
    public readonly isLogForwarded!: pulumi.Output<boolean>;
    public /*out*/ readonly lifecycleDetails!: pulumi.Output<string>;
    public /*out*/ readonly opControlName!: pulumi.Output<string>;
    public readonly operatorControlId!: pulumi.Output<string>;
    public readonly remoteSyslogServerAddress!: pulumi.Output<string>;
    public readonly remoteSyslogServerCaCert!: pulumi.Output<string>;
    public readonly remoteSyslogServerPort!: pulumi.Output<number>;
    public readonly resourceCompartmentId!: pulumi.Output<string>;
    public readonly resourceId!: pulumi.Output<string>;
    public readonly resourceName!: pulumi.Output<string>;
    public readonly resourceType!: pulumi.Output<string>;
    public /*out*/ readonly state!: pulumi.Output<string>;
    public readonly timeAssignmentFrom!: pulumi.Output<string>;
    public readonly timeAssignmentTo!: pulumi.Output<string>;
    public /*out*/ readonly timeOfAssignment!: pulumi.Output<string>;
    public /*out*/ readonly timeOfDeletion!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.OperatorAccessControlOperatorControlAssignmentTimeouts | undefined>;
    public /*out*/ readonly unassignerId!: pulumi.Output<string>;
    public readonly validateAssignmentTrigger!: pulumi.Output<number | undefined>;

    /**
     * Create a OperatorAccessControlOperatorControlAssignment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OperatorAccessControlOperatorControlAssignmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OperatorAccessControlOperatorControlAssignmentArgs | OperatorAccessControlOperatorControlAssignmentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OperatorAccessControlOperatorControlAssignmentState | undefined;
            resourceInputs["assignerId"] = state ? state.assignerId : undefined;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["compartmentId"] = state ? state.compartmentId : undefined;
            resourceInputs["definedTags"] = state ? state.definedTags : undefined;
            resourceInputs["detachmentDescription"] = state ? state.detachmentDescription : undefined;
            resourceInputs["errorCode"] = state ? state.errorCode : undefined;
            resourceInputs["errorMessage"] = state ? state.errorMessage : undefined;
            resourceInputs["freeformTags"] = state ? state.freeformTags : undefined;
            resourceInputs["isAutoApproveDuringMaintenance"] = state ? state.isAutoApproveDuringMaintenance : undefined;
            resourceInputs["isDefaultAssignment"] = state ? state.isDefaultAssignment : undefined;
            resourceInputs["isEnforcedAlways"] = state ? state.isEnforcedAlways : undefined;
            resourceInputs["isHypervisorLogForwarded"] = state ? state.isHypervisorLogForwarded : undefined;
            resourceInputs["isLogForwarded"] = state ? state.isLogForwarded : undefined;
            resourceInputs["lifecycleDetails"] = state ? state.lifecycleDetails : undefined;
            resourceInputs["opControlName"] = state ? state.opControlName : undefined;
            resourceInputs["operatorControlId"] = state ? state.operatorControlId : undefined;
            resourceInputs["remoteSyslogServerAddress"] = state ? state.remoteSyslogServerAddress : undefined;
            resourceInputs["remoteSyslogServerCaCert"] = state ? state.remoteSyslogServerCaCert : undefined;
            resourceInputs["remoteSyslogServerPort"] = state ? state.remoteSyslogServerPort : undefined;
            resourceInputs["resourceCompartmentId"] = state ? state.resourceCompartmentId : undefined;
            resourceInputs["resourceId"] = state ? state.resourceId : undefined;
            resourceInputs["resourceName"] = state ? state.resourceName : undefined;
            resourceInputs["resourceType"] = state ? state.resourceType : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["timeAssignmentFrom"] = state ? state.timeAssignmentFrom : undefined;
            resourceInputs["timeAssignmentTo"] = state ? state.timeAssignmentTo : undefined;
            resourceInputs["timeOfAssignment"] = state ? state.timeOfAssignment : undefined;
            resourceInputs["timeOfDeletion"] = state ? state.timeOfDeletion : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["unassignerId"] = state ? state.unassignerId : undefined;
            resourceInputs["validateAssignmentTrigger"] = state ? state.validateAssignmentTrigger : undefined;
        } else {
            const args = argsOrState as OperatorAccessControlOperatorControlAssignmentArgs | undefined;
            if ((!args || args.compartmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'compartmentId'");
            }
            if ((!args || args.isEnforcedAlways === undefined) && !opts.urn) {
                throw new Error("Missing required property 'isEnforcedAlways'");
            }
            if ((!args || args.operatorControlId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'operatorControlId'");
            }
            if ((!args || args.resourceCompartmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceCompartmentId'");
            }
            if ((!args || args.resourceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceId'");
            }
            if ((!args || args.resourceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceName'");
            }
            if ((!args || args.resourceType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceType'");
            }
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["compartmentId"] = args ? args.compartmentId : undefined;
            resourceInputs["definedTags"] = args ? args.definedTags : undefined;
            resourceInputs["freeformTags"] = args ? args.freeformTags : undefined;
            resourceInputs["isAutoApproveDuringMaintenance"] = args ? args.isAutoApproveDuringMaintenance : undefined;
            resourceInputs["isEnforcedAlways"] = args ? args.isEnforcedAlways : undefined;
            resourceInputs["isHypervisorLogForwarded"] = args ? args.isHypervisorLogForwarded : undefined;
            resourceInputs["isLogForwarded"] = args ? args.isLogForwarded : undefined;
            resourceInputs["operatorControlId"] = args ? args.operatorControlId : undefined;
            resourceInputs["remoteSyslogServerAddress"] = args ? args.remoteSyslogServerAddress : undefined;
            resourceInputs["remoteSyslogServerCaCert"] = args ? args.remoteSyslogServerCaCert : undefined;
            resourceInputs["remoteSyslogServerPort"] = args ? args.remoteSyslogServerPort : undefined;
            resourceInputs["resourceCompartmentId"] = args ? args.resourceCompartmentId : undefined;
            resourceInputs["resourceId"] = args ? args.resourceId : undefined;
            resourceInputs["resourceName"] = args ? args.resourceName : undefined;
            resourceInputs["resourceType"] = args ? args.resourceType : undefined;
            resourceInputs["timeAssignmentFrom"] = args ? args.timeAssignmentFrom : undefined;
            resourceInputs["timeAssignmentTo"] = args ? args.timeAssignmentTo : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["validateAssignmentTrigger"] = args ? args.validateAssignmentTrigger : undefined;
            resourceInputs["assignerId"] = undefined /*out*/;
            resourceInputs["detachmentDescription"] = undefined /*out*/;
            resourceInputs["errorCode"] = undefined /*out*/;
            resourceInputs["errorMessage"] = undefined /*out*/;
            resourceInputs["isDefaultAssignment"] = undefined /*out*/;
            resourceInputs["lifecycleDetails"] = undefined /*out*/;
            resourceInputs["opControlName"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["timeOfAssignment"] = undefined /*out*/;
            resourceInputs["timeOfDeletion"] = undefined /*out*/;
            resourceInputs["unassignerId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OperatorAccessControlOperatorControlAssignment.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering OperatorAccessControlOperatorControlAssignment resources.
 */
export interface OperatorAccessControlOperatorControlAssignmentState {
    assignerId?: pulumi.Input<string>;
    comment?: pulumi.Input<string>;
    compartmentId?: pulumi.Input<string>;
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    detachmentDescription?: pulumi.Input<string>;
    errorCode?: pulumi.Input<number>;
    errorMessage?: pulumi.Input<string>;
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    isAutoApproveDuringMaintenance?: pulumi.Input<boolean>;
    isDefaultAssignment?: pulumi.Input<boolean>;
    isEnforcedAlways?: pulumi.Input<boolean>;
    isHypervisorLogForwarded?: pulumi.Input<boolean>;
    isLogForwarded?: pulumi.Input<boolean>;
    lifecycleDetails?: pulumi.Input<string>;
    opControlName?: pulumi.Input<string>;
    operatorControlId?: pulumi.Input<string>;
    remoteSyslogServerAddress?: pulumi.Input<string>;
    remoteSyslogServerCaCert?: pulumi.Input<string>;
    remoteSyslogServerPort?: pulumi.Input<number>;
    resourceCompartmentId?: pulumi.Input<string>;
    resourceId?: pulumi.Input<string>;
    resourceName?: pulumi.Input<string>;
    resourceType?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    timeAssignmentFrom?: pulumi.Input<string>;
    timeAssignmentTo?: pulumi.Input<string>;
    timeOfAssignment?: pulumi.Input<string>;
    timeOfDeletion?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.OperatorAccessControlOperatorControlAssignmentTimeouts>;
    unassignerId?: pulumi.Input<string>;
    validateAssignmentTrigger?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a OperatorAccessControlOperatorControlAssignment resource.
 */
export interface OperatorAccessControlOperatorControlAssignmentArgs {
    comment?: pulumi.Input<string>;
    compartmentId: pulumi.Input<string>;
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    isAutoApproveDuringMaintenance?: pulumi.Input<boolean>;
    isEnforcedAlways: pulumi.Input<boolean>;
    isHypervisorLogForwarded?: pulumi.Input<boolean>;
    isLogForwarded?: pulumi.Input<boolean>;
    operatorControlId: pulumi.Input<string>;
    remoteSyslogServerAddress?: pulumi.Input<string>;
    remoteSyslogServerCaCert?: pulumi.Input<string>;
    remoteSyslogServerPort?: pulumi.Input<number>;
    resourceCompartmentId: pulumi.Input<string>;
    resourceId: pulumi.Input<string>;
    resourceName: pulumi.Input<string>;
    resourceType: pulumi.Input<string>;
    timeAssignmentFrom?: pulumi.Input<string>;
    timeAssignmentTo?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.OperatorAccessControlOperatorControlAssignmentTimeouts>;
    validateAssignmentTrigger?: pulumi.Input<number>;
}
