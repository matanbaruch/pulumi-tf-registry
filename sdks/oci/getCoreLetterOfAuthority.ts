// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getCoreLetterOfAuthority(args: GetCoreLetterOfAuthorityArgs, opts?: pulumi.InvokeOptions): Promise<GetCoreLetterOfAuthorityResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getCoreLetterOfAuthority:getCoreLetterOfAuthority", {
        "crossConnectId": args.crossConnectId,
        "id": args.id,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getCoreLetterOfAuthority.
 */
export interface GetCoreLetterOfAuthorityArgs {
    crossConnectId: string;
    id?: string;
}

/**
 * A collection of values returned by getCoreLetterOfAuthority.
 */
export interface GetCoreLetterOfAuthorityResult {
    readonly authorizedEntityName: string;
    readonly circuitType: string;
    readonly crossConnectId: string;
    readonly facilityLocation: string;
    readonly id: string;
    readonly portName: string;
    readonly timeExpires: string;
    readonly timeIssued: string;
}
export function getCoreLetterOfAuthorityOutput(args: GetCoreLetterOfAuthorityOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetCoreLetterOfAuthorityResult> {
    return pulumi.output(args).apply((a: any) => getCoreLetterOfAuthority(a, opts))
}

/**
 * A collection of arguments for invoking getCoreLetterOfAuthority.
 */
export interface GetCoreLetterOfAuthorityOutputArgs {
    crossConnectId: pulumi.Input<string>;
    id?: pulumi.Input<string>;
}
