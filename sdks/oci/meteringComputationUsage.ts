// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class MeteringComputationUsage extends pulumi.CustomResource {
    /**
     * Get an existing MeteringComputationUsage resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MeteringComputationUsageState, opts?: pulumi.CustomResourceOptions): MeteringComputationUsage {
        return new MeteringComputationUsage(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/meteringComputationUsage:MeteringComputationUsage';

    /**
     * Returns true if the given object is an instance of MeteringComputationUsage.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MeteringComputationUsage {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MeteringComputationUsage.__pulumiType;
    }

    public readonly compartmentDepth!: pulumi.Output<number>;
    public readonly filter!: pulumi.Output<string | undefined>;
    public readonly forecast!: pulumi.Output<outputs.MeteringComputationUsageForecast | undefined>;
    public readonly granularity!: pulumi.Output<string>;
    public readonly groupBies!: pulumi.Output<string[]>;
    public readonly groupByTags!: pulumi.Output<outputs.MeteringComputationUsageGroupByTag[] | undefined>;
    public readonly isAggregateByTime!: pulumi.Output<boolean>;
    public /*out*/ readonly items!: pulumi.Output<outputs.MeteringComputationUsageItem[]>;
    public readonly queryType!: pulumi.Output<string>;
    public readonly tenantId!: pulumi.Output<string>;
    public readonly timeUsageEnded!: pulumi.Output<string>;
    public readonly timeUsageStarted!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.MeteringComputationUsageTimeouts | undefined>;

    /**
     * Create a MeteringComputationUsage resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MeteringComputationUsageArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MeteringComputationUsageArgs | MeteringComputationUsageState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MeteringComputationUsageState | undefined;
            resourceInputs["compartmentDepth"] = state ? state.compartmentDepth : undefined;
            resourceInputs["filter"] = state ? state.filter : undefined;
            resourceInputs["forecast"] = state ? state.forecast : undefined;
            resourceInputs["granularity"] = state ? state.granularity : undefined;
            resourceInputs["groupBies"] = state ? state.groupBies : undefined;
            resourceInputs["groupByTags"] = state ? state.groupByTags : undefined;
            resourceInputs["isAggregateByTime"] = state ? state.isAggregateByTime : undefined;
            resourceInputs["items"] = state ? state.items : undefined;
            resourceInputs["queryType"] = state ? state.queryType : undefined;
            resourceInputs["tenantId"] = state ? state.tenantId : undefined;
            resourceInputs["timeUsageEnded"] = state ? state.timeUsageEnded : undefined;
            resourceInputs["timeUsageStarted"] = state ? state.timeUsageStarted : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as MeteringComputationUsageArgs | undefined;
            if ((!args || args.granularity === undefined) && !opts.urn) {
                throw new Error("Missing required property 'granularity'");
            }
            if ((!args || args.tenantId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tenantId'");
            }
            if ((!args || args.timeUsageEnded === undefined) && !opts.urn) {
                throw new Error("Missing required property 'timeUsageEnded'");
            }
            if ((!args || args.timeUsageStarted === undefined) && !opts.urn) {
                throw new Error("Missing required property 'timeUsageStarted'");
            }
            resourceInputs["compartmentDepth"] = args ? args.compartmentDepth : undefined;
            resourceInputs["filter"] = args ? args.filter : undefined;
            resourceInputs["forecast"] = args ? args.forecast : undefined;
            resourceInputs["granularity"] = args ? args.granularity : undefined;
            resourceInputs["groupBies"] = args ? args.groupBies : undefined;
            resourceInputs["groupByTags"] = args ? args.groupByTags : undefined;
            resourceInputs["isAggregateByTime"] = args ? args.isAggregateByTime : undefined;
            resourceInputs["queryType"] = args ? args.queryType : undefined;
            resourceInputs["tenantId"] = args ? args.tenantId : undefined;
            resourceInputs["timeUsageEnded"] = args ? args.timeUsageEnded : undefined;
            resourceInputs["timeUsageStarted"] = args ? args.timeUsageStarted : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["items"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MeteringComputationUsage.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering MeteringComputationUsage resources.
 */
export interface MeteringComputationUsageState {
    compartmentDepth?: pulumi.Input<number>;
    filter?: pulumi.Input<string>;
    forecast?: pulumi.Input<inputs.MeteringComputationUsageForecast>;
    granularity?: pulumi.Input<string>;
    groupBies?: pulumi.Input<pulumi.Input<string>[]>;
    groupByTags?: pulumi.Input<pulumi.Input<inputs.MeteringComputationUsageGroupByTag>[]>;
    isAggregateByTime?: pulumi.Input<boolean>;
    items?: pulumi.Input<pulumi.Input<inputs.MeteringComputationUsageItem>[]>;
    queryType?: pulumi.Input<string>;
    tenantId?: pulumi.Input<string>;
    timeUsageEnded?: pulumi.Input<string>;
    timeUsageStarted?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.MeteringComputationUsageTimeouts>;
}

/**
 * The set of arguments for constructing a MeteringComputationUsage resource.
 */
export interface MeteringComputationUsageArgs {
    compartmentDepth?: pulumi.Input<number>;
    filter?: pulumi.Input<string>;
    forecast?: pulumi.Input<inputs.MeteringComputationUsageForecast>;
    granularity: pulumi.Input<string>;
    groupBies?: pulumi.Input<pulumi.Input<string>[]>;
    groupByTags?: pulumi.Input<pulumi.Input<inputs.MeteringComputationUsageGroupByTag>[]>;
    isAggregateByTime?: pulumi.Input<boolean>;
    queryType?: pulumi.Input<string>;
    tenantId: pulumi.Input<string>;
    timeUsageEnded: pulumi.Input<string>;
    timeUsageStarted: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.MeteringComputationUsageTimeouts>;
}
