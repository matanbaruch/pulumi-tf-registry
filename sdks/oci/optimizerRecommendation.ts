// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class OptimizerRecommendation extends pulumi.CustomResource {
    /**
     * Get an existing OptimizerRecommendation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OptimizerRecommendationState, opts?: pulumi.CustomResourceOptions): OptimizerRecommendation {
        return new OptimizerRecommendation(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/optimizerRecommendation:OptimizerRecommendation';

    /**
     * Returns true if the given object is an instance of OptimizerRecommendation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OptimizerRecommendation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OptimizerRecommendation.__pulumiType;
    }

    public /*out*/ readonly categoryId!: pulumi.Output<string>;
    public /*out*/ readonly compartmentId!: pulumi.Output<string>;
    public /*out*/ readonly description!: pulumi.Output<string>;
    public /*out*/ readonly estimatedCostSaving!: pulumi.Output<number>;
    public /*out*/ readonly extendedMetadata!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly importance!: pulumi.Output<string>;
    public /*out*/ readonly name!: pulumi.Output<string>;
    public readonly recommendationId!: pulumi.Output<string>;
    public /*out*/ readonly resourceCounts!: pulumi.Output<outputs.OptimizerRecommendationResourceCount[]>;
    public /*out*/ readonly state!: pulumi.Output<string>;
    public readonly status!: pulumi.Output<string>;
    public /*out*/ readonly supportedLevels!: pulumi.Output<outputs.OptimizerRecommendationSupportedLevel[]>;
    public /*out*/ readonly timeCreated!: pulumi.Output<string>;
    public /*out*/ readonly timeStatusBegin!: pulumi.Output<string>;
    public readonly timeStatusEnd!: pulumi.Output<string>;
    public /*out*/ readonly timeUpdated!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.OptimizerRecommendationTimeouts | undefined>;

    /**
     * Create a OptimizerRecommendation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OptimizerRecommendationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OptimizerRecommendationArgs | OptimizerRecommendationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OptimizerRecommendationState | undefined;
            resourceInputs["categoryId"] = state ? state.categoryId : undefined;
            resourceInputs["compartmentId"] = state ? state.compartmentId : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["estimatedCostSaving"] = state ? state.estimatedCostSaving : undefined;
            resourceInputs["extendedMetadata"] = state ? state.extendedMetadata : undefined;
            resourceInputs["importance"] = state ? state.importance : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["recommendationId"] = state ? state.recommendationId : undefined;
            resourceInputs["resourceCounts"] = state ? state.resourceCounts : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["supportedLevels"] = state ? state.supportedLevels : undefined;
            resourceInputs["timeCreated"] = state ? state.timeCreated : undefined;
            resourceInputs["timeStatusBegin"] = state ? state.timeStatusBegin : undefined;
            resourceInputs["timeStatusEnd"] = state ? state.timeStatusEnd : undefined;
            resourceInputs["timeUpdated"] = state ? state.timeUpdated : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as OptimizerRecommendationArgs | undefined;
            if ((!args || args.recommendationId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'recommendationId'");
            }
            if ((!args || args.status === undefined) && !opts.urn) {
                throw new Error("Missing required property 'status'");
            }
            resourceInputs["recommendationId"] = args ? args.recommendationId : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["timeStatusEnd"] = args ? args.timeStatusEnd : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["categoryId"] = undefined /*out*/;
            resourceInputs["compartmentId"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["estimatedCostSaving"] = undefined /*out*/;
            resourceInputs["extendedMetadata"] = undefined /*out*/;
            resourceInputs["importance"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["resourceCounts"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["supportedLevels"] = undefined /*out*/;
            resourceInputs["timeCreated"] = undefined /*out*/;
            resourceInputs["timeStatusBegin"] = undefined /*out*/;
            resourceInputs["timeUpdated"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OptimizerRecommendation.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering OptimizerRecommendation resources.
 */
export interface OptimizerRecommendationState {
    categoryId?: pulumi.Input<string>;
    compartmentId?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    estimatedCostSaving?: pulumi.Input<number>;
    extendedMetadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    importance?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    recommendationId?: pulumi.Input<string>;
    resourceCounts?: pulumi.Input<pulumi.Input<inputs.OptimizerRecommendationResourceCount>[]>;
    state?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    supportedLevels?: pulumi.Input<pulumi.Input<inputs.OptimizerRecommendationSupportedLevel>[]>;
    timeCreated?: pulumi.Input<string>;
    timeStatusBegin?: pulumi.Input<string>;
    timeStatusEnd?: pulumi.Input<string>;
    timeUpdated?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.OptimizerRecommendationTimeouts>;
}

/**
 * The set of arguments for constructing a OptimizerRecommendation resource.
 */
export interface OptimizerRecommendationArgs {
    recommendationId: pulumi.Input<string>;
    status: pulumi.Input<string>;
    timeStatusEnd?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.OptimizerRecommendationTimeouts>;
}
