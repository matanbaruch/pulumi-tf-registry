// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getMonitoringAlarmStatuses(args: GetMonitoringAlarmStatusesArgs, opts?: pulumi.InvokeOptions): Promise<GetMonitoringAlarmStatusesResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getMonitoringAlarmStatuses:getMonitoringAlarmStatuses", {
        "compartmentId": args.compartmentId,
        "compartmentIdInSubtree": args.compartmentIdInSubtree,
        "displayName": args.displayName,
        "entityId": args.entityId,
        "filters": args.filters,
        "id": args.id,
        "resourceId": args.resourceId,
        "serviceName": args.serviceName,
        "status": args.status,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getMonitoringAlarmStatuses.
 */
export interface GetMonitoringAlarmStatusesArgs {
    compartmentId: string;
    compartmentIdInSubtree?: boolean;
    displayName?: string;
    entityId?: string;
    filters?: inputs.GetMonitoringAlarmStatusesFilter[];
    id?: string;
    resourceId?: string;
    serviceName?: string;
    status?: string;
}

/**
 * A collection of values returned by getMonitoringAlarmStatuses.
 */
export interface GetMonitoringAlarmStatusesResult {
    readonly alarmStatuses: outputs.GetMonitoringAlarmStatusesAlarmStatus[];
    readonly compartmentId: string;
    readonly compartmentIdInSubtree?: boolean;
    readonly displayName?: string;
    readonly entityId?: string;
    readonly filters?: outputs.GetMonitoringAlarmStatusesFilter[];
    readonly id: string;
    readonly resourceId?: string;
    readonly serviceName?: string;
    readonly status?: string;
}
export function getMonitoringAlarmStatusesOutput(args: GetMonitoringAlarmStatusesOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetMonitoringAlarmStatusesResult> {
    return pulumi.output(args).apply((a: any) => getMonitoringAlarmStatuses(a, opts))
}

/**
 * A collection of arguments for invoking getMonitoringAlarmStatuses.
 */
export interface GetMonitoringAlarmStatusesOutputArgs {
    compartmentId: pulumi.Input<string>;
    compartmentIdInSubtree?: pulumi.Input<boolean>;
    displayName?: pulumi.Input<string>;
    entityId?: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.GetMonitoringAlarmStatusesFilterArgs>[]>;
    id?: pulumi.Input<string>;
    resourceId?: pulumi.Input<string>;
    serviceName?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}
