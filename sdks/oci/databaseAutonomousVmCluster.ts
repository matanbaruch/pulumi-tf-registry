// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DatabaseAutonomousVmCluster extends pulumi.CustomResource {
    /**
     * Get an existing DatabaseAutonomousVmCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DatabaseAutonomousVmClusterState, opts?: pulumi.CustomResourceOptions): DatabaseAutonomousVmCluster {
        return new DatabaseAutonomousVmCluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/databaseAutonomousVmCluster:DatabaseAutonomousVmCluster';

    /**
     * Returns true if the given object is an instance of DatabaseAutonomousVmCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DatabaseAutonomousVmCluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DatabaseAutonomousVmCluster.__pulumiType;
    }

    public /*out*/ readonly autonomousDataStoragePercentage!: pulumi.Output<number>;
    public readonly autonomousDataStorageSizeInTbs!: pulumi.Output<number>;
    public /*out*/ readonly availableAutonomousDataStorageSizeInTbs!: pulumi.Output<number>;
    public /*out*/ readonly availableContainerDatabases!: pulumi.Output<number>;
    public /*out*/ readonly availableCpus!: pulumi.Output<number>;
    public /*out*/ readonly availableDataStorageSizeInTbs!: pulumi.Output<number>;
    public readonly compartmentId!: pulumi.Output<string>;
    public readonly computeModel!: pulumi.Output<string>;
    public readonly cpuCoreCountPerNode!: pulumi.Output<number>;
    public /*out*/ readonly cpuPercentage!: pulumi.Output<number>;
    public /*out*/ readonly cpusEnabled!: pulumi.Output<number>;
    public /*out*/ readonly cpusLowestScaledValue!: pulumi.Output<number>;
    public /*out*/ readonly dataStorageSizeInGb!: pulumi.Output<number>;
    public /*out*/ readonly dataStorageSizeInTbs!: pulumi.Output<number>;
    public /*out*/ readonly dbNodeStorageSizeInGbs!: pulumi.Output<number>;
    public readonly dbServers!: pulumi.Output<string[]>;
    public readonly definedTags!: pulumi.Output<{[key: string]: string}>;
    public readonly displayName!: pulumi.Output<string>;
    public readonly exadataInfrastructureId!: pulumi.Output<string>;
    public /*out*/ readonly exadataStorageInTbsLowestScaledValue!: pulumi.Output<number>;
    public readonly freeformTags!: pulumi.Output<{[key: string]: string}>;
    public readonly isLocalBackupEnabled!: pulumi.Output<boolean>;
    public readonly isMtlsEnabled!: pulumi.Output<boolean>;
    public /*out*/ readonly lastMaintenanceRunId!: pulumi.Output<string>;
    public readonly licenseModel!: pulumi.Output<string>;
    public /*out*/ readonly lifecycleDetails!: pulumi.Output<string>;
    public readonly maintenanceWindowDetails!: pulumi.Output<outputs.DatabaseAutonomousVmClusterMaintenanceWindowDetail[] | undefined>;
    public /*out*/ readonly maintenanceWindows!: pulumi.Output<outputs.DatabaseAutonomousVmClusterMaintenanceWindow[]>;
    public /*out*/ readonly maxAcdsLowestScaledValue!: pulumi.Output<number>;
    public readonly memoryPerOracleComputeUnitInGbs!: pulumi.Output<number>;
    public /*out*/ readonly memorySizeInGbs!: pulumi.Output<number>;
    public /*out*/ readonly nextMaintenanceRunId!: pulumi.Output<string>;
    public /*out*/ readonly nodeCount!: pulumi.Output<number>;
    public /*out*/ readonly nonProvisionableAutonomousContainerDatabases!: pulumi.Output<number>;
    public /*out*/ readonly ocpusEnabled!: pulumi.Output<number>;
    public /*out*/ readonly provisionableAutonomousContainerDatabases!: pulumi.Output<number>;
    public /*out*/ readonly provisionedAutonomousContainerDatabases!: pulumi.Output<number>;
    public /*out*/ readonly provisionedCpus!: pulumi.Output<number>;
    public /*out*/ readonly reclaimableCpus!: pulumi.Output<number>;
    public /*out*/ readonly reservedCpus!: pulumi.Output<number>;
    public readonly scanListenerPortNonTls!: pulumi.Output<number>;
    public readonly scanListenerPortTls!: pulumi.Output<number>;
    public /*out*/ readonly state!: pulumi.Output<string>;
    public /*out*/ readonly timeCreated!: pulumi.Output<string>;
    public /*out*/ readonly timeDatabaseSslCertificateExpires!: pulumi.Output<string>;
    public /*out*/ readonly timeOrdsCertificateExpires!: pulumi.Output<string>;
    public readonly timeZone!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.DatabaseAutonomousVmClusterTimeouts | undefined>;
    public /*out*/ readonly totalAutonomousDataStorageInTbs!: pulumi.Output<number>;
    public readonly totalContainerDatabases!: pulumi.Output<number>;
    public readonly vmClusterNetworkId!: pulumi.Output<string>;

    /**
     * Create a DatabaseAutonomousVmCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatabaseAutonomousVmClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DatabaseAutonomousVmClusterArgs | DatabaseAutonomousVmClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DatabaseAutonomousVmClusterState | undefined;
            resourceInputs["autonomousDataStoragePercentage"] = state ? state.autonomousDataStoragePercentage : undefined;
            resourceInputs["autonomousDataStorageSizeInTbs"] = state ? state.autonomousDataStorageSizeInTbs : undefined;
            resourceInputs["availableAutonomousDataStorageSizeInTbs"] = state ? state.availableAutonomousDataStorageSizeInTbs : undefined;
            resourceInputs["availableContainerDatabases"] = state ? state.availableContainerDatabases : undefined;
            resourceInputs["availableCpus"] = state ? state.availableCpus : undefined;
            resourceInputs["availableDataStorageSizeInTbs"] = state ? state.availableDataStorageSizeInTbs : undefined;
            resourceInputs["compartmentId"] = state ? state.compartmentId : undefined;
            resourceInputs["computeModel"] = state ? state.computeModel : undefined;
            resourceInputs["cpuCoreCountPerNode"] = state ? state.cpuCoreCountPerNode : undefined;
            resourceInputs["cpuPercentage"] = state ? state.cpuPercentage : undefined;
            resourceInputs["cpusEnabled"] = state ? state.cpusEnabled : undefined;
            resourceInputs["cpusLowestScaledValue"] = state ? state.cpusLowestScaledValue : undefined;
            resourceInputs["dataStorageSizeInGb"] = state ? state.dataStorageSizeInGb : undefined;
            resourceInputs["dataStorageSizeInTbs"] = state ? state.dataStorageSizeInTbs : undefined;
            resourceInputs["dbNodeStorageSizeInGbs"] = state ? state.dbNodeStorageSizeInGbs : undefined;
            resourceInputs["dbServers"] = state ? state.dbServers : undefined;
            resourceInputs["definedTags"] = state ? state.definedTags : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["exadataInfrastructureId"] = state ? state.exadataInfrastructureId : undefined;
            resourceInputs["exadataStorageInTbsLowestScaledValue"] = state ? state.exadataStorageInTbsLowestScaledValue : undefined;
            resourceInputs["freeformTags"] = state ? state.freeformTags : undefined;
            resourceInputs["isLocalBackupEnabled"] = state ? state.isLocalBackupEnabled : undefined;
            resourceInputs["isMtlsEnabled"] = state ? state.isMtlsEnabled : undefined;
            resourceInputs["lastMaintenanceRunId"] = state ? state.lastMaintenanceRunId : undefined;
            resourceInputs["licenseModel"] = state ? state.licenseModel : undefined;
            resourceInputs["lifecycleDetails"] = state ? state.lifecycleDetails : undefined;
            resourceInputs["maintenanceWindowDetails"] = state ? state.maintenanceWindowDetails : undefined;
            resourceInputs["maintenanceWindows"] = state ? state.maintenanceWindows : undefined;
            resourceInputs["maxAcdsLowestScaledValue"] = state ? state.maxAcdsLowestScaledValue : undefined;
            resourceInputs["memoryPerOracleComputeUnitInGbs"] = state ? state.memoryPerOracleComputeUnitInGbs : undefined;
            resourceInputs["memorySizeInGbs"] = state ? state.memorySizeInGbs : undefined;
            resourceInputs["nextMaintenanceRunId"] = state ? state.nextMaintenanceRunId : undefined;
            resourceInputs["nodeCount"] = state ? state.nodeCount : undefined;
            resourceInputs["nonProvisionableAutonomousContainerDatabases"] = state ? state.nonProvisionableAutonomousContainerDatabases : undefined;
            resourceInputs["ocpusEnabled"] = state ? state.ocpusEnabled : undefined;
            resourceInputs["provisionableAutonomousContainerDatabases"] = state ? state.provisionableAutonomousContainerDatabases : undefined;
            resourceInputs["provisionedAutonomousContainerDatabases"] = state ? state.provisionedAutonomousContainerDatabases : undefined;
            resourceInputs["provisionedCpus"] = state ? state.provisionedCpus : undefined;
            resourceInputs["reclaimableCpus"] = state ? state.reclaimableCpus : undefined;
            resourceInputs["reservedCpus"] = state ? state.reservedCpus : undefined;
            resourceInputs["scanListenerPortNonTls"] = state ? state.scanListenerPortNonTls : undefined;
            resourceInputs["scanListenerPortTls"] = state ? state.scanListenerPortTls : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["timeCreated"] = state ? state.timeCreated : undefined;
            resourceInputs["timeDatabaseSslCertificateExpires"] = state ? state.timeDatabaseSslCertificateExpires : undefined;
            resourceInputs["timeOrdsCertificateExpires"] = state ? state.timeOrdsCertificateExpires : undefined;
            resourceInputs["timeZone"] = state ? state.timeZone : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["totalAutonomousDataStorageInTbs"] = state ? state.totalAutonomousDataStorageInTbs : undefined;
            resourceInputs["totalContainerDatabases"] = state ? state.totalContainerDatabases : undefined;
            resourceInputs["vmClusterNetworkId"] = state ? state.vmClusterNetworkId : undefined;
        } else {
            const args = argsOrState as DatabaseAutonomousVmClusterArgs | undefined;
            if ((!args || args.compartmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'compartmentId'");
            }
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if ((!args || args.exadataInfrastructureId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'exadataInfrastructureId'");
            }
            if ((!args || args.vmClusterNetworkId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vmClusterNetworkId'");
            }
            resourceInputs["autonomousDataStorageSizeInTbs"] = args ? args.autonomousDataStorageSizeInTbs : undefined;
            resourceInputs["compartmentId"] = args ? args.compartmentId : undefined;
            resourceInputs["computeModel"] = args ? args.computeModel : undefined;
            resourceInputs["cpuCoreCountPerNode"] = args ? args.cpuCoreCountPerNode : undefined;
            resourceInputs["dbServers"] = args ? args.dbServers : undefined;
            resourceInputs["definedTags"] = args ? args.definedTags : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["exadataInfrastructureId"] = args ? args.exadataInfrastructureId : undefined;
            resourceInputs["freeformTags"] = args ? args.freeformTags : undefined;
            resourceInputs["isLocalBackupEnabled"] = args ? args.isLocalBackupEnabled : undefined;
            resourceInputs["isMtlsEnabled"] = args ? args.isMtlsEnabled : undefined;
            resourceInputs["licenseModel"] = args ? args.licenseModel : undefined;
            resourceInputs["maintenanceWindowDetails"] = args ? args.maintenanceWindowDetails : undefined;
            resourceInputs["memoryPerOracleComputeUnitInGbs"] = args ? args.memoryPerOracleComputeUnitInGbs : undefined;
            resourceInputs["scanListenerPortNonTls"] = args ? args.scanListenerPortNonTls : undefined;
            resourceInputs["scanListenerPortTls"] = args ? args.scanListenerPortTls : undefined;
            resourceInputs["timeZone"] = args ? args.timeZone : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["totalContainerDatabases"] = args ? args.totalContainerDatabases : undefined;
            resourceInputs["vmClusterNetworkId"] = args ? args.vmClusterNetworkId : undefined;
            resourceInputs["autonomousDataStoragePercentage"] = undefined /*out*/;
            resourceInputs["availableAutonomousDataStorageSizeInTbs"] = undefined /*out*/;
            resourceInputs["availableContainerDatabases"] = undefined /*out*/;
            resourceInputs["availableCpus"] = undefined /*out*/;
            resourceInputs["availableDataStorageSizeInTbs"] = undefined /*out*/;
            resourceInputs["cpuPercentage"] = undefined /*out*/;
            resourceInputs["cpusEnabled"] = undefined /*out*/;
            resourceInputs["cpusLowestScaledValue"] = undefined /*out*/;
            resourceInputs["dataStorageSizeInGb"] = undefined /*out*/;
            resourceInputs["dataStorageSizeInTbs"] = undefined /*out*/;
            resourceInputs["dbNodeStorageSizeInGbs"] = undefined /*out*/;
            resourceInputs["exadataStorageInTbsLowestScaledValue"] = undefined /*out*/;
            resourceInputs["lastMaintenanceRunId"] = undefined /*out*/;
            resourceInputs["lifecycleDetails"] = undefined /*out*/;
            resourceInputs["maintenanceWindows"] = undefined /*out*/;
            resourceInputs["maxAcdsLowestScaledValue"] = undefined /*out*/;
            resourceInputs["memorySizeInGbs"] = undefined /*out*/;
            resourceInputs["nextMaintenanceRunId"] = undefined /*out*/;
            resourceInputs["nodeCount"] = undefined /*out*/;
            resourceInputs["nonProvisionableAutonomousContainerDatabases"] = undefined /*out*/;
            resourceInputs["ocpusEnabled"] = undefined /*out*/;
            resourceInputs["provisionableAutonomousContainerDatabases"] = undefined /*out*/;
            resourceInputs["provisionedAutonomousContainerDatabases"] = undefined /*out*/;
            resourceInputs["provisionedCpus"] = undefined /*out*/;
            resourceInputs["reclaimableCpus"] = undefined /*out*/;
            resourceInputs["reservedCpus"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["timeCreated"] = undefined /*out*/;
            resourceInputs["timeDatabaseSslCertificateExpires"] = undefined /*out*/;
            resourceInputs["timeOrdsCertificateExpires"] = undefined /*out*/;
            resourceInputs["totalAutonomousDataStorageInTbs"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DatabaseAutonomousVmCluster.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DatabaseAutonomousVmCluster resources.
 */
export interface DatabaseAutonomousVmClusterState {
    autonomousDataStoragePercentage?: pulumi.Input<number>;
    autonomousDataStorageSizeInTbs?: pulumi.Input<number>;
    availableAutonomousDataStorageSizeInTbs?: pulumi.Input<number>;
    availableContainerDatabases?: pulumi.Input<number>;
    availableCpus?: pulumi.Input<number>;
    availableDataStorageSizeInTbs?: pulumi.Input<number>;
    compartmentId?: pulumi.Input<string>;
    computeModel?: pulumi.Input<string>;
    cpuCoreCountPerNode?: pulumi.Input<number>;
    cpuPercentage?: pulumi.Input<number>;
    cpusEnabled?: pulumi.Input<number>;
    cpusLowestScaledValue?: pulumi.Input<number>;
    dataStorageSizeInGb?: pulumi.Input<number>;
    dataStorageSizeInTbs?: pulumi.Input<number>;
    dbNodeStorageSizeInGbs?: pulumi.Input<number>;
    dbServers?: pulumi.Input<pulumi.Input<string>[]>;
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    displayName?: pulumi.Input<string>;
    exadataInfrastructureId?: pulumi.Input<string>;
    exadataStorageInTbsLowestScaledValue?: pulumi.Input<number>;
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    isLocalBackupEnabled?: pulumi.Input<boolean>;
    isMtlsEnabled?: pulumi.Input<boolean>;
    lastMaintenanceRunId?: pulumi.Input<string>;
    licenseModel?: pulumi.Input<string>;
    lifecycleDetails?: pulumi.Input<string>;
    maintenanceWindowDetails?: pulumi.Input<pulumi.Input<inputs.DatabaseAutonomousVmClusterMaintenanceWindowDetail>[]>;
    maintenanceWindows?: pulumi.Input<pulumi.Input<inputs.DatabaseAutonomousVmClusterMaintenanceWindow>[]>;
    maxAcdsLowestScaledValue?: pulumi.Input<number>;
    memoryPerOracleComputeUnitInGbs?: pulumi.Input<number>;
    memorySizeInGbs?: pulumi.Input<number>;
    nextMaintenanceRunId?: pulumi.Input<string>;
    nodeCount?: pulumi.Input<number>;
    nonProvisionableAutonomousContainerDatabases?: pulumi.Input<number>;
    ocpusEnabled?: pulumi.Input<number>;
    provisionableAutonomousContainerDatabases?: pulumi.Input<number>;
    provisionedAutonomousContainerDatabases?: pulumi.Input<number>;
    provisionedCpus?: pulumi.Input<number>;
    reclaimableCpus?: pulumi.Input<number>;
    reservedCpus?: pulumi.Input<number>;
    scanListenerPortNonTls?: pulumi.Input<number>;
    scanListenerPortTls?: pulumi.Input<number>;
    state?: pulumi.Input<string>;
    timeCreated?: pulumi.Input<string>;
    timeDatabaseSslCertificateExpires?: pulumi.Input<string>;
    timeOrdsCertificateExpires?: pulumi.Input<string>;
    timeZone?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.DatabaseAutonomousVmClusterTimeouts>;
    totalAutonomousDataStorageInTbs?: pulumi.Input<number>;
    totalContainerDatabases?: pulumi.Input<number>;
    vmClusterNetworkId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DatabaseAutonomousVmCluster resource.
 */
export interface DatabaseAutonomousVmClusterArgs {
    autonomousDataStorageSizeInTbs?: pulumi.Input<number>;
    compartmentId: pulumi.Input<string>;
    computeModel?: pulumi.Input<string>;
    cpuCoreCountPerNode?: pulumi.Input<number>;
    dbServers?: pulumi.Input<pulumi.Input<string>[]>;
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    displayName: pulumi.Input<string>;
    exadataInfrastructureId: pulumi.Input<string>;
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    isLocalBackupEnabled?: pulumi.Input<boolean>;
    isMtlsEnabled?: pulumi.Input<boolean>;
    licenseModel?: pulumi.Input<string>;
    maintenanceWindowDetails?: pulumi.Input<pulumi.Input<inputs.DatabaseAutonomousVmClusterMaintenanceWindowDetail>[]>;
    memoryPerOracleComputeUnitInGbs?: pulumi.Input<number>;
    scanListenerPortNonTls?: pulumi.Input<number>;
    scanListenerPortTls?: pulumi.Input<number>;
    timeZone?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.DatabaseAutonomousVmClusterTimeouts>;
    totalContainerDatabases?: pulumi.Input<number>;
    vmClusterNetworkId: pulumi.Input<string>;
}
