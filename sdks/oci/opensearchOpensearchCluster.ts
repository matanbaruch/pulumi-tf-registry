// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class OpensearchOpensearchCluster extends pulumi.CustomResource {
    /**
     * Get an existing OpensearchOpensearchCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OpensearchOpensearchClusterState, opts?: pulumi.CustomResourceOptions): OpensearchOpensearchCluster {
        return new OpensearchOpensearchCluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/opensearchOpensearchCluster:OpensearchOpensearchCluster';

    /**
     * Returns true if the given object is an instance of OpensearchOpensearchCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OpensearchOpensearchCluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OpensearchOpensearchCluster.__pulumiType;
    }

    public /*out*/ readonly availabilityDomains!: pulumi.Output<string[]>;
    public readonly compartmentId!: pulumi.Output<string>;
    public readonly dataNodeCount!: pulumi.Output<number>;
    public readonly dataNodeHostBareMetalShape!: pulumi.Output<string>;
    public readonly dataNodeHostMemoryGb!: pulumi.Output<number>;
    public readonly dataNodeHostOcpuCount!: pulumi.Output<number>;
    public readonly dataNodeHostType!: pulumi.Output<string>;
    public readonly dataNodeStorageGb!: pulumi.Output<number>;
    public readonly definedTags!: pulumi.Output<{[key: string]: string}>;
    public readonly displayName!: pulumi.Output<string>;
    public /*out*/ readonly fqdn!: pulumi.Output<string>;
    public readonly freeformTags!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly lifecycleDetails!: pulumi.Output<string>;
    public readonly masterNodeCount!: pulumi.Output<number>;
    public readonly masterNodeHostBareMetalShape!: pulumi.Output<string>;
    public readonly masterNodeHostMemoryGb!: pulumi.Output<number>;
    public readonly masterNodeHostOcpuCount!: pulumi.Output<number>;
    public readonly masterNodeHostType!: pulumi.Output<string>;
    public /*out*/ readonly opendashboardFqdn!: pulumi.Output<string>;
    public readonly opendashboardNodeCount!: pulumi.Output<number>;
    public readonly opendashboardNodeHostMemoryGb!: pulumi.Output<number>;
    public readonly opendashboardNodeHostOcpuCount!: pulumi.Output<number>;
    public /*out*/ readonly opendashboardPrivateIp!: pulumi.Output<string>;
    public /*out*/ readonly opensearchFqdn!: pulumi.Output<string>;
    public /*out*/ readonly opensearchPrivateIp!: pulumi.Output<string>;
    public readonly securityMasterUserName!: pulumi.Output<string>;
    public readonly securityMasterUserPasswordHash!: pulumi.Output<string>;
    public readonly securityMode!: pulumi.Output<string>;
    public readonly softwareVersion!: pulumi.Output<string>;
    public /*out*/ readonly state!: pulumi.Output<string>;
    public readonly subnetCompartmentId!: pulumi.Output<string>;
    public readonly subnetId!: pulumi.Output<string>;
    public readonly systemTags!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly timeCreated!: pulumi.Output<string>;
    public /*out*/ readonly timeDeleted!: pulumi.Output<string>;
    public /*out*/ readonly timeUpdated!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.OpensearchOpensearchClusterTimeouts | undefined>;
    public /*out*/ readonly totalStorageGb!: pulumi.Output<number>;
    public readonly vcnCompartmentId!: pulumi.Output<string>;
    public readonly vcnId!: pulumi.Output<string>;

    /**
     * Create a OpensearchOpensearchCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OpensearchOpensearchClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OpensearchOpensearchClusterArgs | OpensearchOpensearchClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OpensearchOpensearchClusterState | undefined;
            resourceInputs["availabilityDomains"] = state ? state.availabilityDomains : undefined;
            resourceInputs["compartmentId"] = state ? state.compartmentId : undefined;
            resourceInputs["dataNodeCount"] = state ? state.dataNodeCount : undefined;
            resourceInputs["dataNodeHostBareMetalShape"] = state ? state.dataNodeHostBareMetalShape : undefined;
            resourceInputs["dataNodeHostMemoryGb"] = state ? state.dataNodeHostMemoryGb : undefined;
            resourceInputs["dataNodeHostOcpuCount"] = state ? state.dataNodeHostOcpuCount : undefined;
            resourceInputs["dataNodeHostType"] = state ? state.dataNodeHostType : undefined;
            resourceInputs["dataNodeStorageGb"] = state ? state.dataNodeStorageGb : undefined;
            resourceInputs["definedTags"] = state ? state.definedTags : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["fqdn"] = state ? state.fqdn : undefined;
            resourceInputs["freeformTags"] = state ? state.freeformTags : undefined;
            resourceInputs["lifecycleDetails"] = state ? state.lifecycleDetails : undefined;
            resourceInputs["masterNodeCount"] = state ? state.masterNodeCount : undefined;
            resourceInputs["masterNodeHostBareMetalShape"] = state ? state.masterNodeHostBareMetalShape : undefined;
            resourceInputs["masterNodeHostMemoryGb"] = state ? state.masterNodeHostMemoryGb : undefined;
            resourceInputs["masterNodeHostOcpuCount"] = state ? state.masterNodeHostOcpuCount : undefined;
            resourceInputs["masterNodeHostType"] = state ? state.masterNodeHostType : undefined;
            resourceInputs["opendashboardFqdn"] = state ? state.opendashboardFqdn : undefined;
            resourceInputs["opendashboardNodeCount"] = state ? state.opendashboardNodeCount : undefined;
            resourceInputs["opendashboardNodeHostMemoryGb"] = state ? state.opendashboardNodeHostMemoryGb : undefined;
            resourceInputs["opendashboardNodeHostOcpuCount"] = state ? state.opendashboardNodeHostOcpuCount : undefined;
            resourceInputs["opendashboardPrivateIp"] = state ? state.opendashboardPrivateIp : undefined;
            resourceInputs["opensearchFqdn"] = state ? state.opensearchFqdn : undefined;
            resourceInputs["opensearchPrivateIp"] = state ? state.opensearchPrivateIp : undefined;
            resourceInputs["securityMasterUserName"] = state ? state.securityMasterUserName : undefined;
            resourceInputs["securityMasterUserPasswordHash"] = state ? state.securityMasterUserPasswordHash : undefined;
            resourceInputs["securityMode"] = state ? state.securityMode : undefined;
            resourceInputs["softwareVersion"] = state ? state.softwareVersion : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["subnetCompartmentId"] = state ? state.subnetCompartmentId : undefined;
            resourceInputs["subnetId"] = state ? state.subnetId : undefined;
            resourceInputs["systemTags"] = state ? state.systemTags : undefined;
            resourceInputs["timeCreated"] = state ? state.timeCreated : undefined;
            resourceInputs["timeDeleted"] = state ? state.timeDeleted : undefined;
            resourceInputs["timeUpdated"] = state ? state.timeUpdated : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["totalStorageGb"] = state ? state.totalStorageGb : undefined;
            resourceInputs["vcnCompartmentId"] = state ? state.vcnCompartmentId : undefined;
            resourceInputs["vcnId"] = state ? state.vcnId : undefined;
        } else {
            const args = argsOrState as OpensearchOpensearchClusterArgs | undefined;
            if ((!args || args.compartmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'compartmentId'");
            }
            if ((!args || args.dataNodeCount === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dataNodeCount'");
            }
            if ((!args || args.dataNodeHostMemoryGb === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dataNodeHostMemoryGb'");
            }
            if ((!args || args.dataNodeHostOcpuCount === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dataNodeHostOcpuCount'");
            }
            if ((!args || args.dataNodeHostType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dataNodeHostType'");
            }
            if ((!args || args.dataNodeStorageGb === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dataNodeStorageGb'");
            }
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if ((!args || args.masterNodeCount === undefined) && !opts.urn) {
                throw new Error("Missing required property 'masterNodeCount'");
            }
            if ((!args || args.masterNodeHostMemoryGb === undefined) && !opts.urn) {
                throw new Error("Missing required property 'masterNodeHostMemoryGb'");
            }
            if ((!args || args.masterNodeHostOcpuCount === undefined) && !opts.urn) {
                throw new Error("Missing required property 'masterNodeHostOcpuCount'");
            }
            if ((!args || args.masterNodeHostType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'masterNodeHostType'");
            }
            if ((!args || args.opendashboardNodeCount === undefined) && !opts.urn) {
                throw new Error("Missing required property 'opendashboardNodeCount'");
            }
            if ((!args || args.opendashboardNodeHostMemoryGb === undefined) && !opts.urn) {
                throw new Error("Missing required property 'opendashboardNodeHostMemoryGb'");
            }
            if ((!args || args.opendashboardNodeHostOcpuCount === undefined) && !opts.urn) {
                throw new Error("Missing required property 'opendashboardNodeHostOcpuCount'");
            }
            if ((!args || args.softwareVersion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'softwareVersion'");
            }
            if ((!args || args.subnetCompartmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnetCompartmentId'");
            }
            if ((!args || args.subnetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnetId'");
            }
            if ((!args || args.vcnCompartmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vcnCompartmentId'");
            }
            if ((!args || args.vcnId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vcnId'");
            }
            resourceInputs["compartmentId"] = args ? args.compartmentId : undefined;
            resourceInputs["dataNodeCount"] = args ? args.dataNodeCount : undefined;
            resourceInputs["dataNodeHostBareMetalShape"] = args ? args.dataNodeHostBareMetalShape : undefined;
            resourceInputs["dataNodeHostMemoryGb"] = args ? args.dataNodeHostMemoryGb : undefined;
            resourceInputs["dataNodeHostOcpuCount"] = args ? args.dataNodeHostOcpuCount : undefined;
            resourceInputs["dataNodeHostType"] = args ? args.dataNodeHostType : undefined;
            resourceInputs["dataNodeStorageGb"] = args ? args.dataNodeStorageGb : undefined;
            resourceInputs["definedTags"] = args ? args.definedTags : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["freeformTags"] = args ? args.freeformTags : undefined;
            resourceInputs["masterNodeCount"] = args ? args.masterNodeCount : undefined;
            resourceInputs["masterNodeHostBareMetalShape"] = args ? args.masterNodeHostBareMetalShape : undefined;
            resourceInputs["masterNodeHostMemoryGb"] = args ? args.masterNodeHostMemoryGb : undefined;
            resourceInputs["masterNodeHostOcpuCount"] = args ? args.masterNodeHostOcpuCount : undefined;
            resourceInputs["masterNodeHostType"] = args ? args.masterNodeHostType : undefined;
            resourceInputs["opendashboardNodeCount"] = args ? args.opendashboardNodeCount : undefined;
            resourceInputs["opendashboardNodeHostMemoryGb"] = args ? args.opendashboardNodeHostMemoryGb : undefined;
            resourceInputs["opendashboardNodeHostOcpuCount"] = args ? args.opendashboardNodeHostOcpuCount : undefined;
            resourceInputs["securityMasterUserName"] = args ? args.securityMasterUserName : undefined;
            resourceInputs["securityMasterUserPasswordHash"] = args?.securityMasterUserPasswordHash ? pulumi.secret(args.securityMasterUserPasswordHash) : undefined;
            resourceInputs["securityMode"] = args ? args.securityMode : undefined;
            resourceInputs["softwareVersion"] = args ? args.softwareVersion : undefined;
            resourceInputs["subnetCompartmentId"] = args ? args.subnetCompartmentId : undefined;
            resourceInputs["subnetId"] = args ? args.subnetId : undefined;
            resourceInputs["systemTags"] = args ? args.systemTags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["vcnCompartmentId"] = args ? args.vcnCompartmentId : undefined;
            resourceInputs["vcnId"] = args ? args.vcnId : undefined;
            resourceInputs["availabilityDomains"] = undefined /*out*/;
            resourceInputs["fqdn"] = undefined /*out*/;
            resourceInputs["lifecycleDetails"] = undefined /*out*/;
            resourceInputs["opendashboardFqdn"] = undefined /*out*/;
            resourceInputs["opendashboardPrivateIp"] = undefined /*out*/;
            resourceInputs["opensearchFqdn"] = undefined /*out*/;
            resourceInputs["opensearchPrivateIp"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["timeCreated"] = undefined /*out*/;
            resourceInputs["timeDeleted"] = undefined /*out*/;
            resourceInputs["timeUpdated"] = undefined /*out*/;
            resourceInputs["totalStorageGb"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["securityMasterUserPasswordHash"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(OpensearchOpensearchCluster.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering OpensearchOpensearchCluster resources.
 */
export interface OpensearchOpensearchClusterState {
    availabilityDomains?: pulumi.Input<pulumi.Input<string>[]>;
    compartmentId?: pulumi.Input<string>;
    dataNodeCount?: pulumi.Input<number>;
    dataNodeHostBareMetalShape?: pulumi.Input<string>;
    dataNodeHostMemoryGb?: pulumi.Input<number>;
    dataNodeHostOcpuCount?: pulumi.Input<number>;
    dataNodeHostType?: pulumi.Input<string>;
    dataNodeStorageGb?: pulumi.Input<number>;
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    displayName?: pulumi.Input<string>;
    fqdn?: pulumi.Input<string>;
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    lifecycleDetails?: pulumi.Input<string>;
    masterNodeCount?: pulumi.Input<number>;
    masterNodeHostBareMetalShape?: pulumi.Input<string>;
    masterNodeHostMemoryGb?: pulumi.Input<number>;
    masterNodeHostOcpuCount?: pulumi.Input<number>;
    masterNodeHostType?: pulumi.Input<string>;
    opendashboardFqdn?: pulumi.Input<string>;
    opendashboardNodeCount?: pulumi.Input<number>;
    opendashboardNodeHostMemoryGb?: pulumi.Input<number>;
    opendashboardNodeHostOcpuCount?: pulumi.Input<number>;
    opendashboardPrivateIp?: pulumi.Input<string>;
    opensearchFqdn?: pulumi.Input<string>;
    opensearchPrivateIp?: pulumi.Input<string>;
    securityMasterUserName?: pulumi.Input<string>;
    securityMasterUserPasswordHash?: pulumi.Input<string>;
    securityMode?: pulumi.Input<string>;
    softwareVersion?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    subnetCompartmentId?: pulumi.Input<string>;
    subnetId?: pulumi.Input<string>;
    systemTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeCreated?: pulumi.Input<string>;
    timeDeleted?: pulumi.Input<string>;
    timeUpdated?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.OpensearchOpensearchClusterTimeouts>;
    totalStorageGb?: pulumi.Input<number>;
    vcnCompartmentId?: pulumi.Input<string>;
    vcnId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a OpensearchOpensearchCluster resource.
 */
export interface OpensearchOpensearchClusterArgs {
    compartmentId: pulumi.Input<string>;
    dataNodeCount: pulumi.Input<number>;
    dataNodeHostBareMetalShape?: pulumi.Input<string>;
    dataNodeHostMemoryGb: pulumi.Input<number>;
    dataNodeHostOcpuCount: pulumi.Input<number>;
    dataNodeHostType: pulumi.Input<string>;
    dataNodeStorageGb: pulumi.Input<number>;
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    displayName: pulumi.Input<string>;
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    masterNodeCount: pulumi.Input<number>;
    masterNodeHostBareMetalShape?: pulumi.Input<string>;
    masterNodeHostMemoryGb: pulumi.Input<number>;
    masterNodeHostOcpuCount: pulumi.Input<number>;
    masterNodeHostType: pulumi.Input<string>;
    opendashboardNodeCount: pulumi.Input<number>;
    opendashboardNodeHostMemoryGb: pulumi.Input<number>;
    opendashboardNodeHostOcpuCount: pulumi.Input<number>;
    securityMasterUserName?: pulumi.Input<string>;
    securityMasterUserPasswordHash?: pulumi.Input<string>;
    securityMode?: pulumi.Input<string>;
    softwareVersion: pulumi.Input<string>;
    subnetCompartmentId: pulumi.Input<string>;
    subnetId: pulumi.Input<string>;
    systemTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.OpensearchOpensearchClusterTimeouts>;
    vcnCompartmentId: pulumi.Input<string>;
    vcnId: pulumi.Input<string>;
}
