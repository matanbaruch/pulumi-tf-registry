// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class GoldenGateConnection extends pulumi.CustomResource {
    /**
     * Get an existing GoldenGateConnection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GoldenGateConnectionState, opts?: pulumi.CustomResourceOptions): GoldenGateConnection {
        return new GoldenGateConnection(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/goldenGateConnection:GoldenGateConnection';

    /**
     * Returns true if the given object is an instance of GoldenGateConnection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GoldenGateConnection {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GoldenGateConnection.__pulumiType;
    }

    public readonly accessKeyId!: pulumi.Output<string>;
    public readonly accountKey!: pulumi.Output<string>;
    public readonly accountName!: pulumi.Output<string>;
    public readonly additionalAttributes!: pulumi.Output<outputs.GoldenGateConnectionAdditionalAttribute[] | undefined>;
    public readonly authenticationMode!: pulumi.Output<string>;
    public readonly authenticationType!: pulumi.Output<string>;
    public readonly azureTenantId!: pulumi.Output<string>;
    public readonly bootstrapServers!: pulumi.Output<outputs.GoldenGateConnectionBootstrapServer[] | undefined>;
    public readonly clientId!: pulumi.Output<string>;
    public readonly clientSecret!: pulumi.Output<string>;
    public readonly compartmentId!: pulumi.Output<string>;
    public readonly connectionFactory!: pulumi.Output<string>;
    public readonly connectionString!: pulumi.Output<string>;
    public readonly connectionType!: pulumi.Output<string>;
    public readonly connectionUrl!: pulumi.Output<string>;
    public readonly consumerProperties!: pulumi.Output<string>;
    public readonly coreSiteXml!: pulumi.Output<string>;
    public readonly databaseId!: pulumi.Output<string>;
    public readonly databaseName!: pulumi.Output<string>;
    public readonly dbSystemId!: pulumi.Output<string>;
    public readonly definedTags!: pulumi.Output<{[key: string]: string}>;
    public readonly deploymentId!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string>;
    public readonly displayName!: pulumi.Output<string>;
    public readonly endpoint!: pulumi.Output<string>;
    public readonly fingerprint!: pulumi.Output<string>;
    public readonly freeformTags!: pulumi.Output<{[key: string]: string}>;
    public readonly host!: pulumi.Output<string>;
    public /*out*/ readonly ingressIps!: pulumi.Output<outputs.GoldenGateConnectionIngressIp[]>;
    public readonly isLockOverride!: pulumi.Output<boolean>;
    public readonly jndiConnectionFactory!: pulumi.Output<string>;
    public readonly jndiInitialContextFactory!: pulumi.Output<string>;
    public readonly jndiProviderUrl!: pulumi.Output<string>;
    public readonly jndiSecurityCredentials!: pulumi.Output<string>;
    public readonly jndiSecurityPrincipal!: pulumi.Output<string>;
    public readonly keyId!: pulumi.Output<string>;
    public readonly keyStore!: pulumi.Output<string>;
    public readonly keyStorePassword!: pulumi.Output<string>;
    public /*out*/ readonly lifecycleDetails!: pulumi.Output<string>;
    public readonly locks!: pulumi.Output<outputs.GoldenGateConnectionLock[] | undefined>;
    public readonly nsgIds!: pulumi.Output<string[]>;
    public readonly password!: pulumi.Output<string>;
    public readonly port!: pulumi.Output<number>;
    public readonly privateIp!: pulumi.Output<string>;
    public readonly privateKeyFile!: pulumi.Output<string>;
    public readonly privateKeyPassphrase!: pulumi.Output<string>;
    public readonly producerProperties!: pulumi.Output<string>;
    public readonly publicKeyFingerprint!: pulumi.Output<string>;
    public readonly redisClusterId!: pulumi.Output<string>;
    public readonly region!: pulumi.Output<string>;
    public readonly routingMethod!: pulumi.Output<string>;
    public readonly sasToken!: pulumi.Output<string>;
    public readonly secretAccessKey!: pulumi.Output<string>;
    public readonly securityProtocol!: pulumi.Output<string>;
    public readonly servers!: pulumi.Output<string>;
    public readonly serviceAccountKeyFile!: pulumi.Output<string>;
    public readonly sessionMode!: pulumi.Output<string>;
    public readonly shouldUseJndi!: pulumi.Output<boolean>;
    public readonly shouldValidateServerCertificate!: pulumi.Output<boolean>;
    public readonly sslCa!: pulumi.Output<string>;
    public readonly sslCert!: pulumi.Output<string>;
    public readonly sslClientKeystash!: pulumi.Output<string>;
    public readonly sslClientKeystoredb!: pulumi.Output<string>;
    public readonly sslCrl!: pulumi.Output<string>;
    public readonly sslKey!: pulumi.Output<string>;
    public readonly sslKeyPassword!: pulumi.Output<string>;
    public readonly sslMode!: pulumi.Output<string>;
    public readonly sslServerCertificate!: pulumi.Output<string>;
    public /*out*/ readonly state!: pulumi.Output<string>;
    public readonly streamPoolId!: pulumi.Output<string>;
    public readonly subnetId!: pulumi.Output<string>;
    public /*out*/ readonly systemTags!: pulumi.Output<{[key: string]: string}>;
    public readonly technologyType!: pulumi.Output<string>;
    public readonly tenancyId!: pulumi.Output<string>;
    public /*out*/ readonly timeCreated!: pulumi.Output<string>;
    public /*out*/ readonly timeUpdated!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.GoldenGateConnectionTimeouts | undefined>;
    public readonly trustStore!: pulumi.Output<string>;
    public readonly trustStorePassword!: pulumi.Output<string>;
    public readonly url!: pulumi.Output<string>;
    public readonly userId!: pulumi.Output<string>;
    public readonly username!: pulumi.Output<string>;
    public readonly vaultId!: pulumi.Output<string>;
    public readonly wallet!: pulumi.Output<string>;

    /**
     * Create a GoldenGateConnection resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GoldenGateConnectionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GoldenGateConnectionArgs | GoldenGateConnectionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GoldenGateConnectionState | undefined;
            resourceInputs["accessKeyId"] = state ? state.accessKeyId : undefined;
            resourceInputs["accountKey"] = state ? state.accountKey : undefined;
            resourceInputs["accountName"] = state ? state.accountName : undefined;
            resourceInputs["additionalAttributes"] = state ? state.additionalAttributes : undefined;
            resourceInputs["authenticationMode"] = state ? state.authenticationMode : undefined;
            resourceInputs["authenticationType"] = state ? state.authenticationType : undefined;
            resourceInputs["azureTenantId"] = state ? state.azureTenantId : undefined;
            resourceInputs["bootstrapServers"] = state ? state.bootstrapServers : undefined;
            resourceInputs["clientId"] = state ? state.clientId : undefined;
            resourceInputs["clientSecret"] = state ? state.clientSecret : undefined;
            resourceInputs["compartmentId"] = state ? state.compartmentId : undefined;
            resourceInputs["connectionFactory"] = state ? state.connectionFactory : undefined;
            resourceInputs["connectionString"] = state ? state.connectionString : undefined;
            resourceInputs["connectionType"] = state ? state.connectionType : undefined;
            resourceInputs["connectionUrl"] = state ? state.connectionUrl : undefined;
            resourceInputs["consumerProperties"] = state ? state.consumerProperties : undefined;
            resourceInputs["coreSiteXml"] = state ? state.coreSiteXml : undefined;
            resourceInputs["databaseId"] = state ? state.databaseId : undefined;
            resourceInputs["databaseName"] = state ? state.databaseName : undefined;
            resourceInputs["dbSystemId"] = state ? state.dbSystemId : undefined;
            resourceInputs["definedTags"] = state ? state.definedTags : undefined;
            resourceInputs["deploymentId"] = state ? state.deploymentId : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["endpoint"] = state ? state.endpoint : undefined;
            resourceInputs["fingerprint"] = state ? state.fingerprint : undefined;
            resourceInputs["freeformTags"] = state ? state.freeformTags : undefined;
            resourceInputs["host"] = state ? state.host : undefined;
            resourceInputs["ingressIps"] = state ? state.ingressIps : undefined;
            resourceInputs["isLockOverride"] = state ? state.isLockOverride : undefined;
            resourceInputs["jndiConnectionFactory"] = state ? state.jndiConnectionFactory : undefined;
            resourceInputs["jndiInitialContextFactory"] = state ? state.jndiInitialContextFactory : undefined;
            resourceInputs["jndiProviderUrl"] = state ? state.jndiProviderUrl : undefined;
            resourceInputs["jndiSecurityCredentials"] = state ? state.jndiSecurityCredentials : undefined;
            resourceInputs["jndiSecurityPrincipal"] = state ? state.jndiSecurityPrincipal : undefined;
            resourceInputs["keyId"] = state ? state.keyId : undefined;
            resourceInputs["keyStore"] = state ? state.keyStore : undefined;
            resourceInputs["keyStorePassword"] = state ? state.keyStorePassword : undefined;
            resourceInputs["lifecycleDetails"] = state ? state.lifecycleDetails : undefined;
            resourceInputs["locks"] = state ? state.locks : undefined;
            resourceInputs["nsgIds"] = state ? state.nsgIds : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["privateIp"] = state ? state.privateIp : undefined;
            resourceInputs["privateKeyFile"] = state ? state.privateKeyFile : undefined;
            resourceInputs["privateKeyPassphrase"] = state ? state.privateKeyPassphrase : undefined;
            resourceInputs["producerProperties"] = state ? state.producerProperties : undefined;
            resourceInputs["publicKeyFingerprint"] = state ? state.publicKeyFingerprint : undefined;
            resourceInputs["redisClusterId"] = state ? state.redisClusterId : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["routingMethod"] = state ? state.routingMethod : undefined;
            resourceInputs["sasToken"] = state ? state.sasToken : undefined;
            resourceInputs["secretAccessKey"] = state ? state.secretAccessKey : undefined;
            resourceInputs["securityProtocol"] = state ? state.securityProtocol : undefined;
            resourceInputs["servers"] = state ? state.servers : undefined;
            resourceInputs["serviceAccountKeyFile"] = state ? state.serviceAccountKeyFile : undefined;
            resourceInputs["sessionMode"] = state ? state.sessionMode : undefined;
            resourceInputs["shouldUseJndi"] = state ? state.shouldUseJndi : undefined;
            resourceInputs["shouldValidateServerCertificate"] = state ? state.shouldValidateServerCertificate : undefined;
            resourceInputs["sslCa"] = state ? state.sslCa : undefined;
            resourceInputs["sslCert"] = state ? state.sslCert : undefined;
            resourceInputs["sslClientKeystash"] = state ? state.sslClientKeystash : undefined;
            resourceInputs["sslClientKeystoredb"] = state ? state.sslClientKeystoredb : undefined;
            resourceInputs["sslCrl"] = state ? state.sslCrl : undefined;
            resourceInputs["sslKey"] = state ? state.sslKey : undefined;
            resourceInputs["sslKeyPassword"] = state ? state.sslKeyPassword : undefined;
            resourceInputs["sslMode"] = state ? state.sslMode : undefined;
            resourceInputs["sslServerCertificate"] = state ? state.sslServerCertificate : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["streamPoolId"] = state ? state.streamPoolId : undefined;
            resourceInputs["subnetId"] = state ? state.subnetId : undefined;
            resourceInputs["systemTags"] = state ? state.systemTags : undefined;
            resourceInputs["technologyType"] = state ? state.technologyType : undefined;
            resourceInputs["tenancyId"] = state ? state.tenancyId : undefined;
            resourceInputs["timeCreated"] = state ? state.timeCreated : undefined;
            resourceInputs["timeUpdated"] = state ? state.timeUpdated : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["trustStore"] = state ? state.trustStore : undefined;
            resourceInputs["trustStorePassword"] = state ? state.trustStorePassword : undefined;
            resourceInputs["url"] = state ? state.url : undefined;
            resourceInputs["userId"] = state ? state.userId : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
            resourceInputs["vaultId"] = state ? state.vaultId : undefined;
            resourceInputs["wallet"] = state ? state.wallet : undefined;
        } else {
            const args = argsOrState as GoldenGateConnectionArgs | undefined;
            if ((!args || args.compartmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'compartmentId'");
            }
            if ((!args || args.connectionType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'connectionType'");
            }
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if ((!args || args.technologyType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'technologyType'");
            }
            resourceInputs["accessKeyId"] = args ? args.accessKeyId : undefined;
            resourceInputs["accountKey"] = args ? args.accountKey : undefined;
            resourceInputs["accountName"] = args ? args.accountName : undefined;
            resourceInputs["additionalAttributes"] = args ? args.additionalAttributes : undefined;
            resourceInputs["authenticationMode"] = args ? args.authenticationMode : undefined;
            resourceInputs["authenticationType"] = args ? args.authenticationType : undefined;
            resourceInputs["azureTenantId"] = args ? args.azureTenantId : undefined;
            resourceInputs["bootstrapServers"] = args ? args.bootstrapServers : undefined;
            resourceInputs["clientId"] = args ? args.clientId : undefined;
            resourceInputs["clientSecret"] = args ? args.clientSecret : undefined;
            resourceInputs["compartmentId"] = args ? args.compartmentId : undefined;
            resourceInputs["connectionFactory"] = args ? args.connectionFactory : undefined;
            resourceInputs["connectionString"] = args ? args.connectionString : undefined;
            resourceInputs["connectionType"] = args ? args.connectionType : undefined;
            resourceInputs["connectionUrl"] = args ? args.connectionUrl : undefined;
            resourceInputs["consumerProperties"] = args ? args.consumerProperties : undefined;
            resourceInputs["coreSiteXml"] = args ? args.coreSiteXml : undefined;
            resourceInputs["databaseId"] = args ? args.databaseId : undefined;
            resourceInputs["databaseName"] = args ? args.databaseName : undefined;
            resourceInputs["dbSystemId"] = args ? args.dbSystemId : undefined;
            resourceInputs["definedTags"] = args ? args.definedTags : undefined;
            resourceInputs["deploymentId"] = args ? args.deploymentId : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["endpoint"] = args ? args.endpoint : undefined;
            resourceInputs["fingerprint"] = args ? args.fingerprint : undefined;
            resourceInputs["freeformTags"] = args ? args.freeformTags : undefined;
            resourceInputs["host"] = args ? args.host : undefined;
            resourceInputs["isLockOverride"] = args ? args.isLockOverride : undefined;
            resourceInputs["jndiConnectionFactory"] = args ? args.jndiConnectionFactory : undefined;
            resourceInputs["jndiInitialContextFactory"] = args ? args.jndiInitialContextFactory : undefined;
            resourceInputs["jndiProviderUrl"] = args ? args.jndiProviderUrl : undefined;
            resourceInputs["jndiSecurityCredentials"] = args ? args.jndiSecurityCredentials : undefined;
            resourceInputs["jndiSecurityPrincipal"] = args ? args.jndiSecurityPrincipal : undefined;
            resourceInputs["keyId"] = args ? args.keyId : undefined;
            resourceInputs["keyStore"] = args ? args.keyStore : undefined;
            resourceInputs["keyStorePassword"] = args?.keyStorePassword ? pulumi.secret(args.keyStorePassword) : undefined;
            resourceInputs["locks"] = args ? args.locks : undefined;
            resourceInputs["nsgIds"] = args ? args.nsgIds : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["privateIp"] = args ? args.privateIp : undefined;
            resourceInputs["privateKeyFile"] = args?.privateKeyFile ? pulumi.secret(args.privateKeyFile) : undefined;
            resourceInputs["privateKeyPassphrase"] = args?.privateKeyPassphrase ? pulumi.secret(args.privateKeyPassphrase) : undefined;
            resourceInputs["producerProperties"] = args ? args.producerProperties : undefined;
            resourceInputs["publicKeyFingerprint"] = args ? args.publicKeyFingerprint : undefined;
            resourceInputs["redisClusterId"] = args ? args.redisClusterId : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["routingMethod"] = args ? args.routingMethod : undefined;
            resourceInputs["sasToken"] = args ? args.sasToken : undefined;
            resourceInputs["secretAccessKey"] = args ? args.secretAccessKey : undefined;
            resourceInputs["securityProtocol"] = args ? args.securityProtocol : undefined;
            resourceInputs["servers"] = args ? args.servers : undefined;
            resourceInputs["serviceAccountKeyFile"] = args ? args.serviceAccountKeyFile : undefined;
            resourceInputs["sessionMode"] = args ? args.sessionMode : undefined;
            resourceInputs["shouldUseJndi"] = args ? args.shouldUseJndi : undefined;
            resourceInputs["shouldValidateServerCertificate"] = args ? args.shouldValidateServerCertificate : undefined;
            resourceInputs["sslCa"] = args ? args.sslCa : undefined;
            resourceInputs["sslCert"] = args ? args.sslCert : undefined;
            resourceInputs["sslClientKeystash"] = args ? args.sslClientKeystash : undefined;
            resourceInputs["sslClientKeystoredb"] = args ? args.sslClientKeystoredb : undefined;
            resourceInputs["sslCrl"] = args ? args.sslCrl : undefined;
            resourceInputs["sslKey"] = args ? args.sslKey : undefined;
            resourceInputs["sslKeyPassword"] = args?.sslKeyPassword ? pulumi.secret(args.sslKeyPassword) : undefined;
            resourceInputs["sslMode"] = args ? args.sslMode : undefined;
            resourceInputs["sslServerCertificate"] = args ? args.sslServerCertificate : undefined;
            resourceInputs["streamPoolId"] = args ? args.streamPoolId : undefined;
            resourceInputs["subnetId"] = args ? args.subnetId : undefined;
            resourceInputs["technologyType"] = args ? args.technologyType : undefined;
            resourceInputs["tenancyId"] = args ? args.tenancyId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["trustStore"] = args ? args.trustStore : undefined;
            resourceInputs["trustStorePassword"] = args?.trustStorePassword ? pulumi.secret(args.trustStorePassword) : undefined;
            resourceInputs["url"] = args ? args.url : undefined;
            resourceInputs["userId"] = args ? args.userId : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
            resourceInputs["vaultId"] = args ? args.vaultId : undefined;
            resourceInputs["wallet"] = args ? args.wallet : undefined;
            resourceInputs["ingressIps"] = undefined /*out*/;
            resourceInputs["lifecycleDetails"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["systemTags"] = undefined /*out*/;
            resourceInputs["timeCreated"] = undefined /*out*/;
            resourceInputs["timeUpdated"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["keyStorePassword", "password", "privateKeyFile", "privateKeyPassphrase", "sslKeyPassword", "trustStorePassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(GoldenGateConnection.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering GoldenGateConnection resources.
 */
export interface GoldenGateConnectionState {
    accessKeyId?: pulumi.Input<string>;
    accountKey?: pulumi.Input<string>;
    accountName?: pulumi.Input<string>;
    additionalAttributes?: pulumi.Input<pulumi.Input<inputs.GoldenGateConnectionAdditionalAttribute>[]>;
    authenticationMode?: pulumi.Input<string>;
    authenticationType?: pulumi.Input<string>;
    azureTenantId?: pulumi.Input<string>;
    bootstrapServers?: pulumi.Input<pulumi.Input<inputs.GoldenGateConnectionBootstrapServer>[]>;
    clientId?: pulumi.Input<string>;
    clientSecret?: pulumi.Input<string>;
    compartmentId?: pulumi.Input<string>;
    connectionFactory?: pulumi.Input<string>;
    connectionString?: pulumi.Input<string>;
    connectionType?: pulumi.Input<string>;
    connectionUrl?: pulumi.Input<string>;
    consumerProperties?: pulumi.Input<string>;
    coreSiteXml?: pulumi.Input<string>;
    databaseId?: pulumi.Input<string>;
    databaseName?: pulumi.Input<string>;
    dbSystemId?: pulumi.Input<string>;
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    deploymentId?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    endpoint?: pulumi.Input<string>;
    fingerprint?: pulumi.Input<string>;
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    host?: pulumi.Input<string>;
    ingressIps?: pulumi.Input<pulumi.Input<inputs.GoldenGateConnectionIngressIp>[]>;
    isLockOverride?: pulumi.Input<boolean>;
    jndiConnectionFactory?: pulumi.Input<string>;
    jndiInitialContextFactory?: pulumi.Input<string>;
    jndiProviderUrl?: pulumi.Input<string>;
    jndiSecurityCredentials?: pulumi.Input<string>;
    jndiSecurityPrincipal?: pulumi.Input<string>;
    keyId?: pulumi.Input<string>;
    keyStore?: pulumi.Input<string>;
    keyStorePassword?: pulumi.Input<string>;
    lifecycleDetails?: pulumi.Input<string>;
    locks?: pulumi.Input<pulumi.Input<inputs.GoldenGateConnectionLock>[]>;
    nsgIds?: pulumi.Input<pulumi.Input<string>[]>;
    password?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    privateIp?: pulumi.Input<string>;
    privateKeyFile?: pulumi.Input<string>;
    privateKeyPassphrase?: pulumi.Input<string>;
    producerProperties?: pulumi.Input<string>;
    publicKeyFingerprint?: pulumi.Input<string>;
    redisClusterId?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    routingMethod?: pulumi.Input<string>;
    sasToken?: pulumi.Input<string>;
    secretAccessKey?: pulumi.Input<string>;
    securityProtocol?: pulumi.Input<string>;
    servers?: pulumi.Input<string>;
    serviceAccountKeyFile?: pulumi.Input<string>;
    sessionMode?: pulumi.Input<string>;
    shouldUseJndi?: pulumi.Input<boolean>;
    shouldValidateServerCertificate?: pulumi.Input<boolean>;
    sslCa?: pulumi.Input<string>;
    sslCert?: pulumi.Input<string>;
    sslClientKeystash?: pulumi.Input<string>;
    sslClientKeystoredb?: pulumi.Input<string>;
    sslCrl?: pulumi.Input<string>;
    sslKey?: pulumi.Input<string>;
    sslKeyPassword?: pulumi.Input<string>;
    sslMode?: pulumi.Input<string>;
    sslServerCertificate?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    streamPoolId?: pulumi.Input<string>;
    subnetId?: pulumi.Input<string>;
    systemTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    technologyType?: pulumi.Input<string>;
    tenancyId?: pulumi.Input<string>;
    timeCreated?: pulumi.Input<string>;
    timeUpdated?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.GoldenGateConnectionTimeouts>;
    trustStore?: pulumi.Input<string>;
    trustStorePassword?: pulumi.Input<string>;
    url?: pulumi.Input<string>;
    userId?: pulumi.Input<string>;
    username?: pulumi.Input<string>;
    vaultId?: pulumi.Input<string>;
    wallet?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a GoldenGateConnection resource.
 */
export interface GoldenGateConnectionArgs {
    accessKeyId?: pulumi.Input<string>;
    accountKey?: pulumi.Input<string>;
    accountName?: pulumi.Input<string>;
    additionalAttributes?: pulumi.Input<pulumi.Input<inputs.GoldenGateConnectionAdditionalAttribute>[]>;
    authenticationMode?: pulumi.Input<string>;
    authenticationType?: pulumi.Input<string>;
    azureTenantId?: pulumi.Input<string>;
    bootstrapServers?: pulumi.Input<pulumi.Input<inputs.GoldenGateConnectionBootstrapServer>[]>;
    clientId?: pulumi.Input<string>;
    clientSecret?: pulumi.Input<string>;
    compartmentId: pulumi.Input<string>;
    connectionFactory?: pulumi.Input<string>;
    connectionString?: pulumi.Input<string>;
    connectionType: pulumi.Input<string>;
    connectionUrl?: pulumi.Input<string>;
    consumerProperties?: pulumi.Input<string>;
    coreSiteXml?: pulumi.Input<string>;
    databaseId?: pulumi.Input<string>;
    databaseName?: pulumi.Input<string>;
    dbSystemId?: pulumi.Input<string>;
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    deploymentId?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    displayName: pulumi.Input<string>;
    endpoint?: pulumi.Input<string>;
    fingerprint?: pulumi.Input<string>;
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    host?: pulumi.Input<string>;
    isLockOverride?: pulumi.Input<boolean>;
    jndiConnectionFactory?: pulumi.Input<string>;
    jndiInitialContextFactory?: pulumi.Input<string>;
    jndiProviderUrl?: pulumi.Input<string>;
    jndiSecurityCredentials?: pulumi.Input<string>;
    jndiSecurityPrincipal?: pulumi.Input<string>;
    keyId?: pulumi.Input<string>;
    keyStore?: pulumi.Input<string>;
    keyStorePassword?: pulumi.Input<string>;
    locks?: pulumi.Input<pulumi.Input<inputs.GoldenGateConnectionLock>[]>;
    nsgIds?: pulumi.Input<pulumi.Input<string>[]>;
    password?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    privateIp?: pulumi.Input<string>;
    privateKeyFile?: pulumi.Input<string>;
    privateKeyPassphrase?: pulumi.Input<string>;
    producerProperties?: pulumi.Input<string>;
    publicKeyFingerprint?: pulumi.Input<string>;
    redisClusterId?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    routingMethod?: pulumi.Input<string>;
    sasToken?: pulumi.Input<string>;
    secretAccessKey?: pulumi.Input<string>;
    securityProtocol?: pulumi.Input<string>;
    servers?: pulumi.Input<string>;
    serviceAccountKeyFile?: pulumi.Input<string>;
    sessionMode?: pulumi.Input<string>;
    shouldUseJndi?: pulumi.Input<boolean>;
    shouldValidateServerCertificate?: pulumi.Input<boolean>;
    sslCa?: pulumi.Input<string>;
    sslCert?: pulumi.Input<string>;
    sslClientKeystash?: pulumi.Input<string>;
    sslClientKeystoredb?: pulumi.Input<string>;
    sslCrl?: pulumi.Input<string>;
    sslKey?: pulumi.Input<string>;
    sslKeyPassword?: pulumi.Input<string>;
    sslMode?: pulumi.Input<string>;
    sslServerCertificate?: pulumi.Input<string>;
    streamPoolId?: pulumi.Input<string>;
    subnetId?: pulumi.Input<string>;
    technologyType: pulumi.Input<string>;
    tenancyId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.GoldenGateConnectionTimeouts>;
    trustStore?: pulumi.Input<string>;
    trustStorePassword?: pulumi.Input<string>;
    url?: pulumi.Input<string>;
    userId?: pulumi.Input<string>;
    username?: pulumi.Input<string>;
    vaultId?: pulumi.Input<string>;
    wallet?: pulumi.Input<string>;
}
