// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DesktopsDesktopPool extends pulumi.CustomResource {
    /**
     * Get an existing DesktopsDesktopPool resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DesktopsDesktopPoolState, opts?: pulumi.CustomResourceOptions): DesktopsDesktopPool {
        return new DesktopsDesktopPool(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/desktopsDesktopPool:DesktopsDesktopPool';

    /**
     * Returns true if the given object is an instance of DesktopsDesktopPool.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DesktopsDesktopPool {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DesktopsDesktopPool.__pulumiType;
    }

    public /*out*/ readonly activeDesktops!: pulumi.Output<number>;
    public readonly arePrivilegedUsers!: pulumi.Output<boolean>;
    public readonly availabilityDomain!: pulumi.Output<string>;
    public readonly availabilityPolicy!: pulumi.Output<outputs.DesktopsDesktopPoolAvailabilityPolicy>;
    public readonly compartmentId!: pulumi.Output<string>;
    public readonly contactDetails!: pulumi.Output<string>;
    public readonly definedTags!: pulumi.Output<{[key: string]: string}>;
    public readonly description!: pulumi.Output<string>;
    public readonly devicePolicy!: pulumi.Output<outputs.DesktopsDesktopPoolDevicePolicy>;
    public readonly displayName!: pulumi.Output<string>;
    public readonly freeformTags!: pulumi.Output<{[key: string]: string}>;
    public readonly image!: pulumi.Output<outputs.DesktopsDesktopPoolImage>;
    public readonly isStorageEnabled!: pulumi.Output<boolean>;
    public readonly maximumSize!: pulumi.Output<number>;
    public readonly networkConfiguration!: pulumi.Output<outputs.DesktopsDesktopPoolNetworkConfiguration>;
    public readonly nsgIds!: pulumi.Output<string[] | undefined>;
    public readonly shapeName!: pulumi.Output<string>;
    public readonly standbySize!: pulumi.Output<number>;
    public /*out*/ readonly state!: pulumi.Output<string>;
    public readonly storageBackupPolicyId!: pulumi.Output<string>;
    public readonly storageSizeInGbs!: pulumi.Output<number>;
    public /*out*/ readonly timeCreated!: pulumi.Output<string>;
    public readonly timeStartScheduled!: pulumi.Output<string | undefined>;
    public readonly timeStopScheduled!: pulumi.Output<string | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.DesktopsDesktopPoolTimeouts | undefined>;

    /**
     * Create a DesktopsDesktopPool resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DesktopsDesktopPoolArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DesktopsDesktopPoolArgs | DesktopsDesktopPoolState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DesktopsDesktopPoolState | undefined;
            resourceInputs["activeDesktops"] = state ? state.activeDesktops : undefined;
            resourceInputs["arePrivilegedUsers"] = state ? state.arePrivilegedUsers : undefined;
            resourceInputs["availabilityDomain"] = state ? state.availabilityDomain : undefined;
            resourceInputs["availabilityPolicy"] = state ? state.availabilityPolicy : undefined;
            resourceInputs["compartmentId"] = state ? state.compartmentId : undefined;
            resourceInputs["contactDetails"] = state ? state.contactDetails : undefined;
            resourceInputs["definedTags"] = state ? state.definedTags : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["devicePolicy"] = state ? state.devicePolicy : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["freeformTags"] = state ? state.freeformTags : undefined;
            resourceInputs["image"] = state ? state.image : undefined;
            resourceInputs["isStorageEnabled"] = state ? state.isStorageEnabled : undefined;
            resourceInputs["maximumSize"] = state ? state.maximumSize : undefined;
            resourceInputs["networkConfiguration"] = state ? state.networkConfiguration : undefined;
            resourceInputs["nsgIds"] = state ? state.nsgIds : undefined;
            resourceInputs["shapeName"] = state ? state.shapeName : undefined;
            resourceInputs["standbySize"] = state ? state.standbySize : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["storageBackupPolicyId"] = state ? state.storageBackupPolicyId : undefined;
            resourceInputs["storageSizeInGbs"] = state ? state.storageSizeInGbs : undefined;
            resourceInputs["timeCreated"] = state ? state.timeCreated : undefined;
            resourceInputs["timeStartScheduled"] = state ? state.timeStartScheduled : undefined;
            resourceInputs["timeStopScheduled"] = state ? state.timeStopScheduled : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as DesktopsDesktopPoolArgs | undefined;
            if ((!args || args.arePrivilegedUsers === undefined) && !opts.urn) {
                throw new Error("Missing required property 'arePrivilegedUsers'");
            }
            if ((!args || args.availabilityDomain === undefined) && !opts.urn) {
                throw new Error("Missing required property 'availabilityDomain'");
            }
            if ((!args || args.availabilityPolicy === undefined) && !opts.urn) {
                throw new Error("Missing required property 'availabilityPolicy'");
            }
            if ((!args || args.compartmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'compartmentId'");
            }
            if ((!args || args.contactDetails === undefined) && !opts.urn) {
                throw new Error("Missing required property 'contactDetails'");
            }
            if ((!args || args.devicePolicy === undefined) && !opts.urn) {
                throw new Error("Missing required property 'devicePolicy'");
            }
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if ((!args || args.image === undefined) && !opts.urn) {
                throw new Error("Missing required property 'image'");
            }
            if ((!args || args.isStorageEnabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'isStorageEnabled'");
            }
            if ((!args || args.maximumSize === undefined) && !opts.urn) {
                throw new Error("Missing required property 'maximumSize'");
            }
            if ((!args || args.networkConfiguration === undefined) && !opts.urn) {
                throw new Error("Missing required property 'networkConfiguration'");
            }
            if ((!args || args.shapeName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'shapeName'");
            }
            if ((!args || args.standbySize === undefined) && !opts.urn) {
                throw new Error("Missing required property 'standbySize'");
            }
            if ((!args || args.storageBackupPolicyId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'storageBackupPolicyId'");
            }
            if ((!args || args.storageSizeInGbs === undefined) && !opts.urn) {
                throw new Error("Missing required property 'storageSizeInGbs'");
            }
            resourceInputs["arePrivilegedUsers"] = args ? args.arePrivilegedUsers : undefined;
            resourceInputs["availabilityDomain"] = args ? args.availabilityDomain : undefined;
            resourceInputs["availabilityPolicy"] = args ? args.availabilityPolicy : undefined;
            resourceInputs["compartmentId"] = args ? args.compartmentId : undefined;
            resourceInputs["contactDetails"] = args ? args.contactDetails : undefined;
            resourceInputs["definedTags"] = args ? args.definedTags : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["devicePolicy"] = args ? args.devicePolicy : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["freeformTags"] = args ? args.freeformTags : undefined;
            resourceInputs["image"] = args ? args.image : undefined;
            resourceInputs["isStorageEnabled"] = args ? args.isStorageEnabled : undefined;
            resourceInputs["maximumSize"] = args ? args.maximumSize : undefined;
            resourceInputs["networkConfiguration"] = args ? args.networkConfiguration : undefined;
            resourceInputs["nsgIds"] = args ? args.nsgIds : undefined;
            resourceInputs["shapeName"] = args ? args.shapeName : undefined;
            resourceInputs["standbySize"] = args ? args.standbySize : undefined;
            resourceInputs["storageBackupPolicyId"] = args ? args.storageBackupPolicyId : undefined;
            resourceInputs["storageSizeInGbs"] = args ? args.storageSizeInGbs : undefined;
            resourceInputs["timeStartScheduled"] = args ? args.timeStartScheduled : undefined;
            resourceInputs["timeStopScheduled"] = args ? args.timeStopScheduled : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["activeDesktops"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["timeCreated"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DesktopsDesktopPool.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DesktopsDesktopPool resources.
 */
export interface DesktopsDesktopPoolState {
    activeDesktops?: pulumi.Input<number>;
    arePrivilegedUsers?: pulumi.Input<boolean>;
    availabilityDomain?: pulumi.Input<string>;
    availabilityPolicy?: pulumi.Input<inputs.DesktopsDesktopPoolAvailabilityPolicy>;
    compartmentId?: pulumi.Input<string>;
    contactDetails?: pulumi.Input<string>;
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    description?: pulumi.Input<string>;
    devicePolicy?: pulumi.Input<inputs.DesktopsDesktopPoolDevicePolicy>;
    displayName?: pulumi.Input<string>;
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    image?: pulumi.Input<inputs.DesktopsDesktopPoolImage>;
    isStorageEnabled?: pulumi.Input<boolean>;
    maximumSize?: pulumi.Input<number>;
    networkConfiguration?: pulumi.Input<inputs.DesktopsDesktopPoolNetworkConfiguration>;
    nsgIds?: pulumi.Input<pulumi.Input<string>[]>;
    shapeName?: pulumi.Input<string>;
    standbySize?: pulumi.Input<number>;
    state?: pulumi.Input<string>;
    storageBackupPolicyId?: pulumi.Input<string>;
    storageSizeInGbs?: pulumi.Input<number>;
    timeCreated?: pulumi.Input<string>;
    timeStartScheduled?: pulumi.Input<string>;
    timeStopScheduled?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.DesktopsDesktopPoolTimeouts>;
}

/**
 * The set of arguments for constructing a DesktopsDesktopPool resource.
 */
export interface DesktopsDesktopPoolArgs {
    arePrivilegedUsers: pulumi.Input<boolean>;
    availabilityDomain: pulumi.Input<string>;
    availabilityPolicy: pulumi.Input<inputs.DesktopsDesktopPoolAvailabilityPolicy>;
    compartmentId: pulumi.Input<string>;
    contactDetails: pulumi.Input<string>;
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    description?: pulumi.Input<string>;
    devicePolicy: pulumi.Input<inputs.DesktopsDesktopPoolDevicePolicy>;
    displayName: pulumi.Input<string>;
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    image: pulumi.Input<inputs.DesktopsDesktopPoolImage>;
    isStorageEnabled: pulumi.Input<boolean>;
    maximumSize: pulumi.Input<number>;
    networkConfiguration: pulumi.Input<inputs.DesktopsDesktopPoolNetworkConfiguration>;
    nsgIds?: pulumi.Input<pulumi.Input<string>[]>;
    shapeName: pulumi.Input<string>;
    standbySize: pulumi.Input<number>;
    storageBackupPolicyId: pulumi.Input<string>;
    storageSizeInGbs: pulumi.Input<number>;
    timeStartScheduled?: pulumi.Input<string>;
    timeStopScheduled?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.DesktopsDesktopPoolTimeouts>;
}
