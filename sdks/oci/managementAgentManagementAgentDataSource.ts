// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ManagementAgentManagementAgentDataSource extends pulumi.CustomResource {
    /**
     * Get an existing ManagementAgentManagementAgentDataSource resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ManagementAgentManagementAgentDataSourceState, opts?: pulumi.CustomResourceOptions): ManagementAgentManagementAgentDataSource {
        return new ManagementAgentManagementAgentDataSource(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/managementAgentManagementAgentDataSource:ManagementAgentManagementAgentDataSource';

    /**
     * Returns true if the given object is an instance of ManagementAgentManagementAgentDataSource.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ManagementAgentManagementAgentDataSource {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ManagementAgentManagementAgentDataSource.__pulumiType;
    }

    public readonly allowMetrics!: pulumi.Output<string>;
    public readonly compartmentId!: pulumi.Output<string>;
    public readonly connectionTimeout!: pulumi.Output<number>;
    public /*out*/ readonly dataSourceKey!: pulumi.Output<string>;
    public /*out*/ readonly isDaemonSet!: pulumi.Output<boolean>;
    public readonly managementAgentId!: pulumi.Output<string>;
    public readonly metricDimensions!: pulumi.Output<outputs.ManagementAgentManagementAgentDataSourceMetricDimension[] | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly namespace!: pulumi.Output<string>;
    public readonly proxyUrl!: pulumi.Output<string>;
    public /*out*/ readonly readDataLimit!: pulumi.Output<number>;
    public readonly readDataLimitInKilobytes!: pulumi.Output<number>;
    public readonly readTimeout!: pulumi.Output<number>;
    public readonly resourceGroup!: pulumi.Output<string>;
    public readonly scheduleMins!: pulumi.Output<number>;
    public /*out*/ readonly state!: pulumi.Output<string>;
    public /*out*/ readonly timeCreated!: pulumi.Output<string>;
    public /*out*/ readonly timeUpdated!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.ManagementAgentManagementAgentDataSourceTimeouts | undefined>;
    public readonly type!: pulumi.Output<string>;
    public readonly url!: pulumi.Output<string>;

    /**
     * Create a ManagementAgentManagementAgentDataSource resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ManagementAgentManagementAgentDataSourceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ManagementAgentManagementAgentDataSourceArgs | ManagementAgentManagementAgentDataSourceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ManagementAgentManagementAgentDataSourceState | undefined;
            resourceInputs["allowMetrics"] = state ? state.allowMetrics : undefined;
            resourceInputs["compartmentId"] = state ? state.compartmentId : undefined;
            resourceInputs["connectionTimeout"] = state ? state.connectionTimeout : undefined;
            resourceInputs["dataSourceKey"] = state ? state.dataSourceKey : undefined;
            resourceInputs["isDaemonSet"] = state ? state.isDaemonSet : undefined;
            resourceInputs["managementAgentId"] = state ? state.managementAgentId : undefined;
            resourceInputs["metricDimensions"] = state ? state.metricDimensions : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["proxyUrl"] = state ? state.proxyUrl : undefined;
            resourceInputs["readDataLimit"] = state ? state.readDataLimit : undefined;
            resourceInputs["readDataLimitInKilobytes"] = state ? state.readDataLimitInKilobytes : undefined;
            resourceInputs["readTimeout"] = state ? state.readTimeout : undefined;
            resourceInputs["resourceGroup"] = state ? state.resourceGroup : undefined;
            resourceInputs["scheduleMins"] = state ? state.scheduleMins : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["timeCreated"] = state ? state.timeCreated : undefined;
            resourceInputs["timeUpdated"] = state ? state.timeUpdated : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["url"] = state ? state.url : undefined;
        } else {
            const args = argsOrState as ManagementAgentManagementAgentDataSourceArgs | undefined;
            if ((!args || args.compartmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'compartmentId'");
            }
            if ((!args || args.managementAgentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'managementAgentId'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            if ((!args || args.url === undefined) && !opts.urn) {
                throw new Error("Missing required property 'url'");
            }
            resourceInputs["allowMetrics"] = args ? args.allowMetrics : undefined;
            resourceInputs["compartmentId"] = args ? args.compartmentId : undefined;
            resourceInputs["connectionTimeout"] = args ? args.connectionTimeout : undefined;
            resourceInputs["managementAgentId"] = args ? args.managementAgentId : undefined;
            resourceInputs["metricDimensions"] = args ? args.metricDimensions : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["proxyUrl"] = args ? args.proxyUrl : undefined;
            resourceInputs["readDataLimitInKilobytes"] = args ? args.readDataLimitInKilobytes : undefined;
            resourceInputs["readTimeout"] = args ? args.readTimeout : undefined;
            resourceInputs["resourceGroup"] = args ? args.resourceGroup : undefined;
            resourceInputs["scheduleMins"] = args ? args.scheduleMins : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["url"] = args ? args.url : undefined;
            resourceInputs["dataSourceKey"] = undefined /*out*/;
            resourceInputs["isDaemonSet"] = undefined /*out*/;
            resourceInputs["readDataLimit"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["timeCreated"] = undefined /*out*/;
            resourceInputs["timeUpdated"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ManagementAgentManagementAgentDataSource.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ManagementAgentManagementAgentDataSource resources.
 */
export interface ManagementAgentManagementAgentDataSourceState {
    allowMetrics?: pulumi.Input<string>;
    compartmentId?: pulumi.Input<string>;
    connectionTimeout?: pulumi.Input<number>;
    dataSourceKey?: pulumi.Input<string>;
    isDaemonSet?: pulumi.Input<boolean>;
    managementAgentId?: pulumi.Input<string>;
    metricDimensions?: pulumi.Input<pulumi.Input<inputs.ManagementAgentManagementAgentDataSourceMetricDimension>[]>;
    name?: pulumi.Input<string>;
    namespace?: pulumi.Input<string>;
    proxyUrl?: pulumi.Input<string>;
    readDataLimit?: pulumi.Input<number>;
    readDataLimitInKilobytes?: pulumi.Input<number>;
    readTimeout?: pulumi.Input<number>;
    resourceGroup?: pulumi.Input<string>;
    scheduleMins?: pulumi.Input<number>;
    state?: pulumi.Input<string>;
    timeCreated?: pulumi.Input<string>;
    timeUpdated?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ManagementAgentManagementAgentDataSourceTimeouts>;
    type?: pulumi.Input<string>;
    url?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ManagementAgentManagementAgentDataSource resource.
 */
export interface ManagementAgentManagementAgentDataSourceArgs {
    allowMetrics?: pulumi.Input<string>;
    compartmentId: pulumi.Input<string>;
    connectionTimeout?: pulumi.Input<number>;
    managementAgentId: pulumi.Input<string>;
    metricDimensions?: pulumi.Input<pulumi.Input<inputs.ManagementAgentManagementAgentDataSourceMetricDimension>[]>;
    name?: pulumi.Input<string>;
    namespace?: pulumi.Input<string>;
    proxyUrl?: pulumi.Input<string>;
    readDataLimitInKilobytes?: pulumi.Input<number>;
    readTimeout?: pulumi.Input<number>;
    resourceGroup?: pulumi.Input<string>;
    scheduleMins?: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.ManagementAgentManagementAgentDataSourceTimeouts>;
    type: pulumi.Input<string>;
    url: pulumi.Input<string>;
}
