// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class MonitoringAlarm extends pulumi.CustomResource {
    /**
     * Get an existing MonitoringAlarm resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MonitoringAlarmState, opts?: pulumi.CustomResourceOptions): MonitoringAlarm {
        return new MonitoringAlarm(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/monitoringAlarm:MonitoringAlarm';

    /**
     * Returns true if the given object is an instance of MonitoringAlarm.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MonitoringAlarm {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MonitoringAlarm.__pulumiType;
    }

    public readonly alarmSummary!: pulumi.Output<string>;
    public readonly body!: pulumi.Output<string>;
    public readonly compartmentId!: pulumi.Output<string>;
    public readonly definedTags!: pulumi.Output<{[key: string]: string}>;
    public readonly destinations!: pulumi.Output<string[]>;
    public readonly displayName!: pulumi.Output<string>;
    public readonly evaluationSlackDuration!: pulumi.Output<string>;
    public readonly freeformTags!: pulumi.Output<{[key: string]: string}>;
    public readonly isEnabled!: pulumi.Output<boolean>;
    public readonly isNotificationsPerMetricDimensionEnabled!: pulumi.Output<boolean>;
    public readonly messageFormat!: pulumi.Output<string>;
    public readonly metricCompartmentId!: pulumi.Output<string>;
    public readonly metricCompartmentIdInSubtree!: pulumi.Output<boolean>;
    public readonly namespace!: pulumi.Output<string>;
    public readonly notificationTitle!: pulumi.Output<string>;
    public readonly notificationVersion!: pulumi.Output<string>;
    public readonly overrides!: pulumi.Output<outputs.MonitoringAlarmOverride[] | undefined>;
    public readonly pendingDuration!: pulumi.Output<string>;
    public readonly query!: pulumi.Output<string>;
    public readonly repeatNotificationDuration!: pulumi.Output<string>;
    public readonly resolution!: pulumi.Output<string>;
    public readonly resourceGroup!: pulumi.Output<string>;
    public readonly ruleName!: pulumi.Output<string>;
    public readonly severity!: pulumi.Output<string>;
    public /*out*/ readonly state!: pulumi.Output<string>;
    public readonly suppression!: pulumi.Output<outputs.MonitoringAlarmSuppression | undefined>;
    public /*out*/ readonly timeCreated!: pulumi.Output<string>;
    public /*out*/ readonly timeUpdated!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.MonitoringAlarmTimeouts | undefined>;

    /**
     * Create a MonitoringAlarm resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MonitoringAlarmArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MonitoringAlarmArgs | MonitoringAlarmState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MonitoringAlarmState | undefined;
            resourceInputs["alarmSummary"] = state ? state.alarmSummary : undefined;
            resourceInputs["body"] = state ? state.body : undefined;
            resourceInputs["compartmentId"] = state ? state.compartmentId : undefined;
            resourceInputs["definedTags"] = state ? state.definedTags : undefined;
            resourceInputs["destinations"] = state ? state.destinations : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["evaluationSlackDuration"] = state ? state.evaluationSlackDuration : undefined;
            resourceInputs["freeformTags"] = state ? state.freeformTags : undefined;
            resourceInputs["isEnabled"] = state ? state.isEnabled : undefined;
            resourceInputs["isNotificationsPerMetricDimensionEnabled"] = state ? state.isNotificationsPerMetricDimensionEnabled : undefined;
            resourceInputs["messageFormat"] = state ? state.messageFormat : undefined;
            resourceInputs["metricCompartmentId"] = state ? state.metricCompartmentId : undefined;
            resourceInputs["metricCompartmentIdInSubtree"] = state ? state.metricCompartmentIdInSubtree : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["notificationTitle"] = state ? state.notificationTitle : undefined;
            resourceInputs["notificationVersion"] = state ? state.notificationVersion : undefined;
            resourceInputs["overrides"] = state ? state.overrides : undefined;
            resourceInputs["pendingDuration"] = state ? state.pendingDuration : undefined;
            resourceInputs["query"] = state ? state.query : undefined;
            resourceInputs["repeatNotificationDuration"] = state ? state.repeatNotificationDuration : undefined;
            resourceInputs["resolution"] = state ? state.resolution : undefined;
            resourceInputs["resourceGroup"] = state ? state.resourceGroup : undefined;
            resourceInputs["ruleName"] = state ? state.ruleName : undefined;
            resourceInputs["severity"] = state ? state.severity : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["suppression"] = state ? state.suppression : undefined;
            resourceInputs["timeCreated"] = state ? state.timeCreated : undefined;
            resourceInputs["timeUpdated"] = state ? state.timeUpdated : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as MonitoringAlarmArgs | undefined;
            if ((!args || args.compartmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'compartmentId'");
            }
            if ((!args || args.destinations === undefined) && !opts.urn) {
                throw new Error("Missing required property 'destinations'");
            }
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if ((!args || args.isEnabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'isEnabled'");
            }
            if ((!args || args.metricCompartmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'metricCompartmentId'");
            }
            if ((!args || args.namespace === undefined) && !opts.urn) {
                throw new Error("Missing required property 'namespace'");
            }
            if ((!args || args.query === undefined) && !opts.urn) {
                throw new Error("Missing required property 'query'");
            }
            if ((!args || args.severity === undefined) && !opts.urn) {
                throw new Error("Missing required property 'severity'");
            }
            resourceInputs["alarmSummary"] = args ? args.alarmSummary : undefined;
            resourceInputs["body"] = args ? args.body : undefined;
            resourceInputs["compartmentId"] = args ? args.compartmentId : undefined;
            resourceInputs["definedTags"] = args ? args.definedTags : undefined;
            resourceInputs["destinations"] = args ? args.destinations : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["evaluationSlackDuration"] = args ? args.evaluationSlackDuration : undefined;
            resourceInputs["freeformTags"] = args ? args.freeformTags : undefined;
            resourceInputs["isEnabled"] = args ? args.isEnabled : undefined;
            resourceInputs["isNotificationsPerMetricDimensionEnabled"] = args ? args.isNotificationsPerMetricDimensionEnabled : undefined;
            resourceInputs["messageFormat"] = args ? args.messageFormat : undefined;
            resourceInputs["metricCompartmentId"] = args ? args.metricCompartmentId : undefined;
            resourceInputs["metricCompartmentIdInSubtree"] = args ? args.metricCompartmentIdInSubtree : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["notificationTitle"] = args ? args.notificationTitle : undefined;
            resourceInputs["notificationVersion"] = args ? args.notificationVersion : undefined;
            resourceInputs["overrides"] = args ? args.overrides : undefined;
            resourceInputs["pendingDuration"] = args ? args.pendingDuration : undefined;
            resourceInputs["query"] = args ? args.query : undefined;
            resourceInputs["repeatNotificationDuration"] = args ? args.repeatNotificationDuration : undefined;
            resourceInputs["resolution"] = args ? args.resolution : undefined;
            resourceInputs["resourceGroup"] = args ? args.resourceGroup : undefined;
            resourceInputs["ruleName"] = args ? args.ruleName : undefined;
            resourceInputs["severity"] = args ? args.severity : undefined;
            resourceInputs["suppression"] = args ? args.suppression : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["timeCreated"] = undefined /*out*/;
            resourceInputs["timeUpdated"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MonitoringAlarm.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering MonitoringAlarm resources.
 */
export interface MonitoringAlarmState {
    alarmSummary?: pulumi.Input<string>;
    body?: pulumi.Input<string>;
    compartmentId?: pulumi.Input<string>;
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    destinations?: pulumi.Input<pulumi.Input<string>[]>;
    displayName?: pulumi.Input<string>;
    evaluationSlackDuration?: pulumi.Input<string>;
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    isEnabled?: pulumi.Input<boolean>;
    isNotificationsPerMetricDimensionEnabled?: pulumi.Input<boolean>;
    messageFormat?: pulumi.Input<string>;
    metricCompartmentId?: pulumi.Input<string>;
    metricCompartmentIdInSubtree?: pulumi.Input<boolean>;
    namespace?: pulumi.Input<string>;
    notificationTitle?: pulumi.Input<string>;
    notificationVersion?: pulumi.Input<string>;
    overrides?: pulumi.Input<pulumi.Input<inputs.MonitoringAlarmOverride>[]>;
    pendingDuration?: pulumi.Input<string>;
    query?: pulumi.Input<string>;
    repeatNotificationDuration?: pulumi.Input<string>;
    resolution?: pulumi.Input<string>;
    resourceGroup?: pulumi.Input<string>;
    ruleName?: pulumi.Input<string>;
    severity?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    suppression?: pulumi.Input<inputs.MonitoringAlarmSuppression>;
    timeCreated?: pulumi.Input<string>;
    timeUpdated?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.MonitoringAlarmTimeouts>;
}

/**
 * The set of arguments for constructing a MonitoringAlarm resource.
 */
export interface MonitoringAlarmArgs {
    alarmSummary?: pulumi.Input<string>;
    body?: pulumi.Input<string>;
    compartmentId: pulumi.Input<string>;
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    destinations: pulumi.Input<pulumi.Input<string>[]>;
    displayName: pulumi.Input<string>;
    evaluationSlackDuration?: pulumi.Input<string>;
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    isEnabled: pulumi.Input<boolean>;
    isNotificationsPerMetricDimensionEnabled?: pulumi.Input<boolean>;
    messageFormat?: pulumi.Input<string>;
    metricCompartmentId: pulumi.Input<string>;
    metricCompartmentIdInSubtree?: pulumi.Input<boolean>;
    namespace: pulumi.Input<string>;
    notificationTitle?: pulumi.Input<string>;
    notificationVersion?: pulumi.Input<string>;
    overrides?: pulumi.Input<pulumi.Input<inputs.MonitoringAlarmOverride>[]>;
    pendingDuration?: pulumi.Input<string>;
    query: pulumi.Input<string>;
    repeatNotificationDuration?: pulumi.Input<string>;
    resolution?: pulumi.Input<string>;
    resourceGroup?: pulumi.Input<string>;
    ruleName?: pulumi.Input<string>;
    severity: pulumi.Input<string>;
    suppression?: pulumi.Input<inputs.MonitoringAlarmSuppression>;
    timeouts?: pulumi.Input<inputs.MonitoringAlarmTimeouts>;
}
