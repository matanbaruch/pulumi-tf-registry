// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getStackMonitoringConfig(args: GetStackMonitoringConfigArgs, opts?: pulumi.InvokeOptions): Promise<GetStackMonitoringConfigResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getStackMonitoringConfig:getStackMonitoringConfig", {
        "configId": args.configId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getStackMonitoringConfig.
 */
export interface GetStackMonitoringConfigArgs {
    configId: string;
}

/**
 * A collection of values returned by getStackMonitoringConfig.
 */
export interface GetStackMonitoringConfigResult {
    readonly compartmentId: string;
    readonly configId: string;
    readonly configType: string;
    readonly definedTags: {[key: string]: string};
    readonly displayName: string;
    readonly freeformTags: {[key: string]: string};
    readonly id: string;
    readonly isEnabled: boolean;
    readonly license: string;
    readonly resourceType: string;
    readonly state: string;
    readonly systemTags: {[key: string]: string};
    readonly timeCreated: string;
    readonly timeUpdated: string;
}
export function getStackMonitoringConfigOutput(args: GetStackMonitoringConfigOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetStackMonitoringConfigResult> {
    return pulumi.output(args).apply((a: any) => getStackMonitoringConfig(a, opts))
}

/**
 * A collection of arguments for invoking getStackMonitoringConfig.
 */
export interface GetStackMonitoringConfigOutputArgs {
    configId: pulumi.Input<string>;
}
