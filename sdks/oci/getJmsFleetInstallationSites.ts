// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getJmsFleetInstallationSites(args: GetJmsFleetInstallationSitesArgs, opts?: pulumi.InvokeOptions): Promise<GetJmsFleetInstallationSitesResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getJmsFleetInstallationSites:getJmsFleetInstallationSites", {
        "applicationId": args.applicationId,
        "filters": args.filters,
        "fleetId": args.fleetId,
        "id": args.id,
        "installationPath": args.installationPath,
        "jreDistribution": args.jreDistribution,
        "jreSecurityStatus": args.jreSecurityStatus,
        "jreVendor": args.jreVendor,
        "jreVersion": args.jreVersion,
        "managedInstanceId": args.managedInstanceId,
        "osFamilies": args.osFamilies,
        "pathContains": args.pathContains,
        "timeEnd": args.timeEnd,
        "timeStart": args.timeStart,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getJmsFleetInstallationSites.
 */
export interface GetJmsFleetInstallationSitesArgs {
    applicationId?: string;
    filters?: inputs.GetJmsFleetInstallationSitesFilter[];
    fleetId: string;
    id?: string;
    installationPath?: string;
    jreDistribution?: string;
    jreSecurityStatus?: string;
    jreVendor?: string;
    jreVersion?: string;
    managedInstanceId?: string;
    osFamilies?: string[];
    pathContains?: string;
    timeEnd?: string;
    timeStart?: string;
}

/**
 * A collection of values returned by getJmsFleetInstallationSites.
 */
export interface GetJmsFleetInstallationSitesResult {
    readonly applicationId?: string;
    readonly filters?: outputs.GetJmsFleetInstallationSitesFilter[];
    readonly fleetId: string;
    readonly id: string;
    readonly installationPath?: string;
    readonly installationSiteCollections: outputs.GetJmsFleetInstallationSitesInstallationSiteCollection[];
    readonly jreDistribution?: string;
    readonly jreSecurityStatus?: string;
    readonly jreVendor?: string;
    readonly jreVersion?: string;
    readonly managedInstanceId?: string;
    readonly osFamilies?: string[];
    readonly pathContains?: string;
    readonly timeEnd?: string;
    readonly timeStart?: string;
}
export function getJmsFleetInstallationSitesOutput(args: GetJmsFleetInstallationSitesOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetJmsFleetInstallationSitesResult> {
    return pulumi.output(args).apply((a: any) => getJmsFleetInstallationSites(a, opts))
}

/**
 * A collection of arguments for invoking getJmsFleetInstallationSites.
 */
export interface GetJmsFleetInstallationSitesOutputArgs {
    applicationId?: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.GetJmsFleetInstallationSitesFilterArgs>[]>;
    fleetId: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    installationPath?: pulumi.Input<string>;
    jreDistribution?: pulumi.Input<string>;
    jreSecurityStatus?: pulumi.Input<string>;
    jreVendor?: pulumi.Input<string>;
    jreVersion?: pulumi.Input<string>;
    managedInstanceId?: pulumi.Input<string>;
    osFamilies?: pulumi.Input<pulumi.Input<string>[]>;
    pathContains?: pulumi.Input<string>;
    timeEnd?: pulumi.Input<string>;
    timeStart?: pulumi.Input<string>;
}
