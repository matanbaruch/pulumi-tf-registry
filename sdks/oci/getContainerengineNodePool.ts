// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getContainerengineNodePool(args: GetContainerengineNodePoolArgs, opts?: pulumi.InvokeOptions): Promise<GetContainerengineNodePoolResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getContainerengineNodePool:getContainerengineNodePool", {
        "nodePoolId": args.nodePoolId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getContainerengineNodePool.
 */
export interface GetContainerengineNodePoolArgs {
    nodePoolId: string;
}

/**
 * A collection of values returned by getContainerengineNodePool.
 */
export interface GetContainerengineNodePoolResult {
    readonly clusterId: string;
    readonly compartmentId: string;
    readonly definedTags: {[key: string]: string};
    readonly freeformTags: {[key: string]: string};
    readonly id: string;
    readonly initialNodeLabels: outputs.GetContainerengineNodePoolInitialNodeLabel[];
    readonly kubernetesVersion: string;
    readonly lifecycleDetails: string;
    readonly name: string;
    readonly nodeConfigDetails: outputs.GetContainerengineNodePoolNodeConfigDetail[];
    readonly nodeEvictionNodePoolSettings: outputs.GetContainerengineNodePoolNodeEvictionNodePoolSetting[];
    /**
     * @deprecated Deprecated
     */
    readonly nodeImageId: string;
    /**
     * @deprecated Deprecated
     */
    readonly nodeImageName: string;
    readonly nodeMetadata: {[key: string]: string};
    readonly nodePoolCyclingDetails: outputs.GetContainerengineNodePoolNodePoolCyclingDetail[];
    readonly nodePoolId: string;
    readonly nodeShape: string;
    readonly nodeShapeConfigs: outputs.GetContainerengineNodePoolNodeShapeConfig[];
    readonly nodeSourceDetails: outputs.GetContainerengineNodePoolNodeSourceDetail[];
    readonly nodeSources: outputs.GetContainerengineNodePoolNodeSource[];
    readonly nodes: outputs.GetContainerengineNodePoolNode[];
    readonly quantityPerSubnet: number;
    readonly sshPublicKey: string;
    readonly state: string;
    readonly subnetIds: string[];
}
export function getContainerengineNodePoolOutput(args: GetContainerengineNodePoolOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetContainerengineNodePoolResult> {
    return pulumi.output(args).apply((a: any) => getContainerengineNodePool(a, opts))
}

/**
 * A collection of arguments for invoking getContainerengineNodePool.
 */
export interface GetContainerengineNodePoolOutputArgs {
    nodePoolId: pulumi.Input<string>;
}
