// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class MeteringComputationUsageCarbonEmission extends pulumi.CustomResource {
    /**
     * Get an existing MeteringComputationUsageCarbonEmission resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MeteringComputationUsageCarbonEmissionState, opts?: pulumi.CustomResourceOptions): MeteringComputationUsageCarbonEmission {
        return new MeteringComputationUsageCarbonEmission(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/meteringComputationUsageCarbonEmission:MeteringComputationUsageCarbonEmission';

    /**
     * Returns true if the given object is an instance of MeteringComputationUsageCarbonEmission.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MeteringComputationUsageCarbonEmission {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MeteringComputationUsageCarbonEmission.__pulumiType;
    }

    public readonly compartmentDepth!: pulumi.Output<number>;
    public readonly groupBies!: pulumi.Output<string[]>;
    public readonly groupByTags!: pulumi.Output<outputs.MeteringComputationUsageCarbonEmissionGroupByTag[] | undefined>;
    public readonly isAggregateByTime!: pulumi.Output<boolean>;
    public /*out*/ readonly items!: pulumi.Output<outputs.MeteringComputationUsageCarbonEmissionItem[]>;
    public readonly tenantId!: pulumi.Output<string>;
    public readonly timeUsageEnded!: pulumi.Output<string>;
    public readonly timeUsageStarted!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.MeteringComputationUsageCarbonEmissionTimeouts | undefined>;
    public readonly usageCarbonEmissionFilter!: pulumi.Output<string>;

    /**
     * Create a MeteringComputationUsageCarbonEmission resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MeteringComputationUsageCarbonEmissionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MeteringComputationUsageCarbonEmissionArgs | MeteringComputationUsageCarbonEmissionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MeteringComputationUsageCarbonEmissionState | undefined;
            resourceInputs["compartmentDepth"] = state ? state.compartmentDepth : undefined;
            resourceInputs["groupBies"] = state ? state.groupBies : undefined;
            resourceInputs["groupByTags"] = state ? state.groupByTags : undefined;
            resourceInputs["isAggregateByTime"] = state ? state.isAggregateByTime : undefined;
            resourceInputs["items"] = state ? state.items : undefined;
            resourceInputs["tenantId"] = state ? state.tenantId : undefined;
            resourceInputs["timeUsageEnded"] = state ? state.timeUsageEnded : undefined;
            resourceInputs["timeUsageStarted"] = state ? state.timeUsageStarted : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["usageCarbonEmissionFilter"] = state ? state.usageCarbonEmissionFilter : undefined;
        } else {
            const args = argsOrState as MeteringComputationUsageCarbonEmissionArgs | undefined;
            if ((!args || args.tenantId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tenantId'");
            }
            if ((!args || args.timeUsageEnded === undefined) && !opts.urn) {
                throw new Error("Missing required property 'timeUsageEnded'");
            }
            if ((!args || args.timeUsageStarted === undefined) && !opts.urn) {
                throw new Error("Missing required property 'timeUsageStarted'");
            }
            resourceInputs["compartmentDepth"] = args ? args.compartmentDepth : undefined;
            resourceInputs["groupBies"] = args ? args.groupBies : undefined;
            resourceInputs["groupByTags"] = args ? args.groupByTags : undefined;
            resourceInputs["isAggregateByTime"] = args ? args.isAggregateByTime : undefined;
            resourceInputs["tenantId"] = args ? args.tenantId : undefined;
            resourceInputs["timeUsageEnded"] = args ? args.timeUsageEnded : undefined;
            resourceInputs["timeUsageStarted"] = args ? args.timeUsageStarted : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["usageCarbonEmissionFilter"] = args ? args.usageCarbonEmissionFilter : undefined;
            resourceInputs["items"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MeteringComputationUsageCarbonEmission.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering MeteringComputationUsageCarbonEmission resources.
 */
export interface MeteringComputationUsageCarbonEmissionState {
    compartmentDepth?: pulumi.Input<number>;
    groupBies?: pulumi.Input<pulumi.Input<string>[]>;
    groupByTags?: pulumi.Input<pulumi.Input<inputs.MeteringComputationUsageCarbonEmissionGroupByTag>[]>;
    isAggregateByTime?: pulumi.Input<boolean>;
    items?: pulumi.Input<pulumi.Input<inputs.MeteringComputationUsageCarbonEmissionItem>[]>;
    tenantId?: pulumi.Input<string>;
    timeUsageEnded?: pulumi.Input<string>;
    timeUsageStarted?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.MeteringComputationUsageCarbonEmissionTimeouts>;
    usageCarbonEmissionFilter?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a MeteringComputationUsageCarbonEmission resource.
 */
export interface MeteringComputationUsageCarbonEmissionArgs {
    compartmentDepth?: pulumi.Input<number>;
    groupBies?: pulumi.Input<pulumi.Input<string>[]>;
    groupByTags?: pulumi.Input<pulumi.Input<inputs.MeteringComputationUsageCarbonEmissionGroupByTag>[]>;
    isAggregateByTime?: pulumi.Input<boolean>;
    tenantId: pulumi.Input<string>;
    timeUsageEnded: pulumi.Input<string>;
    timeUsageStarted: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.MeteringComputationUsageCarbonEmissionTimeouts>;
    usageCarbonEmissionFilter?: pulumi.Input<string>;
}
