// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DevopsDeployment extends pulumi.CustomResource {
    /**
     * Get an existing DevopsDeployment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DevopsDeploymentState, opts?: pulumi.CustomResourceOptions): DevopsDeployment {
        return new DevopsDeployment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/devopsDeployment:DevopsDeployment';

    /**
     * Returns true if the given object is an instance of DevopsDeployment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DevopsDeployment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DevopsDeployment.__pulumiType;
    }

    public /*out*/ readonly compartmentId!: pulumi.Output<string>;
    public readonly definedTags!: pulumi.Output<{[key: string]: string}>;
    public readonly deployArtifactOverrideArguments!: pulumi.Output<outputs.DevopsDeploymentDeployArtifactOverrideArguments | undefined>;
    public /*out*/ readonly deployPipelineArtifacts!: pulumi.Output<outputs.DevopsDeploymentDeployPipelineArtifact[]>;
    public /*out*/ readonly deployPipelineEnvironments!: pulumi.Output<outputs.DevopsDeploymentDeployPipelineEnvironment[]>;
    public readonly deployPipelineId!: pulumi.Output<string>;
    public readonly deployStageId!: pulumi.Output<string>;
    public readonly deployStageOverrideArguments!: pulumi.Output<outputs.DevopsDeploymentDeployStageOverrideArguments | undefined>;
    public readonly deploymentArguments!: pulumi.Output<outputs.DevopsDeploymentDeploymentArguments | undefined>;
    public /*out*/ readonly deploymentExecutionProgresses!: pulumi.Output<outputs.DevopsDeploymentDeploymentExecutionProgress[]>;
    public readonly deploymentType!: pulumi.Output<string>;
    public readonly displayName!: pulumi.Output<string>;
    public readonly freeformTags!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly lifecycleDetails!: pulumi.Output<string>;
    public readonly previousDeploymentId!: pulumi.Output<string>;
    public /*out*/ readonly projectId!: pulumi.Output<string>;
    public /*out*/ readonly state!: pulumi.Output<string>;
    public /*out*/ readonly systemTags!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly timeCreated!: pulumi.Output<string>;
    public /*out*/ readonly timeUpdated!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.DevopsDeploymentTimeouts | undefined>;
    public readonly triggerNewDevopsDeployment!: pulumi.Output<boolean | undefined>;

    /**
     * Create a DevopsDeployment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DevopsDeploymentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DevopsDeploymentArgs | DevopsDeploymentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DevopsDeploymentState | undefined;
            resourceInputs["compartmentId"] = state ? state.compartmentId : undefined;
            resourceInputs["definedTags"] = state ? state.definedTags : undefined;
            resourceInputs["deployArtifactOverrideArguments"] = state ? state.deployArtifactOverrideArguments : undefined;
            resourceInputs["deployPipelineArtifacts"] = state ? state.deployPipelineArtifacts : undefined;
            resourceInputs["deployPipelineEnvironments"] = state ? state.deployPipelineEnvironments : undefined;
            resourceInputs["deployPipelineId"] = state ? state.deployPipelineId : undefined;
            resourceInputs["deployStageId"] = state ? state.deployStageId : undefined;
            resourceInputs["deployStageOverrideArguments"] = state ? state.deployStageOverrideArguments : undefined;
            resourceInputs["deploymentArguments"] = state ? state.deploymentArguments : undefined;
            resourceInputs["deploymentExecutionProgresses"] = state ? state.deploymentExecutionProgresses : undefined;
            resourceInputs["deploymentType"] = state ? state.deploymentType : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["freeformTags"] = state ? state.freeformTags : undefined;
            resourceInputs["lifecycleDetails"] = state ? state.lifecycleDetails : undefined;
            resourceInputs["previousDeploymentId"] = state ? state.previousDeploymentId : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["systemTags"] = state ? state.systemTags : undefined;
            resourceInputs["timeCreated"] = state ? state.timeCreated : undefined;
            resourceInputs["timeUpdated"] = state ? state.timeUpdated : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["triggerNewDevopsDeployment"] = state ? state.triggerNewDevopsDeployment : undefined;
        } else {
            const args = argsOrState as DevopsDeploymentArgs | undefined;
            if ((!args || args.deployPipelineId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'deployPipelineId'");
            }
            if ((!args || args.deploymentType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'deploymentType'");
            }
            resourceInputs["definedTags"] = args ? args.definedTags : undefined;
            resourceInputs["deployArtifactOverrideArguments"] = args ? args.deployArtifactOverrideArguments : undefined;
            resourceInputs["deployPipelineId"] = args ? args.deployPipelineId : undefined;
            resourceInputs["deployStageId"] = args ? args.deployStageId : undefined;
            resourceInputs["deployStageOverrideArguments"] = args ? args.deployStageOverrideArguments : undefined;
            resourceInputs["deploymentArguments"] = args ? args.deploymentArguments : undefined;
            resourceInputs["deploymentType"] = args ? args.deploymentType : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["freeformTags"] = args ? args.freeformTags : undefined;
            resourceInputs["previousDeploymentId"] = args ? args.previousDeploymentId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["triggerNewDevopsDeployment"] = args ? args.triggerNewDevopsDeployment : undefined;
            resourceInputs["compartmentId"] = undefined /*out*/;
            resourceInputs["deployPipelineArtifacts"] = undefined /*out*/;
            resourceInputs["deployPipelineEnvironments"] = undefined /*out*/;
            resourceInputs["deploymentExecutionProgresses"] = undefined /*out*/;
            resourceInputs["lifecycleDetails"] = undefined /*out*/;
            resourceInputs["projectId"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["systemTags"] = undefined /*out*/;
            resourceInputs["timeCreated"] = undefined /*out*/;
            resourceInputs["timeUpdated"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DevopsDeployment.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DevopsDeployment resources.
 */
export interface DevopsDeploymentState {
    compartmentId?: pulumi.Input<string>;
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    deployArtifactOverrideArguments?: pulumi.Input<inputs.DevopsDeploymentDeployArtifactOverrideArguments>;
    deployPipelineArtifacts?: pulumi.Input<pulumi.Input<inputs.DevopsDeploymentDeployPipelineArtifact>[]>;
    deployPipelineEnvironments?: pulumi.Input<pulumi.Input<inputs.DevopsDeploymentDeployPipelineEnvironment>[]>;
    deployPipelineId?: pulumi.Input<string>;
    deployStageId?: pulumi.Input<string>;
    deployStageOverrideArguments?: pulumi.Input<inputs.DevopsDeploymentDeployStageOverrideArguments>;
    deploymentArguments?: pulumi.Input<inputs.DevopsDeploymentDeploymentArguments>;
    deploymentExecutionProgresses?: pulumi.Input<pulumi.Input<inputs.DevopsDeploymentDeploymentExecutionProgress>[]>;
    deploymentType?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    lifecycleDetails?: pulumi.Input<string>;
    previousDeploymentId?: pulumi.Input<string>;
    projectId?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    systemTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeCreated?: pulumi.Input<string>;
    timeUpdated?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.DevopsDeploymentTimeouts>;
    triggerNewDevopsDeployment?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a DevopsDeployment resource.
 */
export interface DevopsDeploymentArgs {
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    deployArtifactOverrideArguments?: pulumi.Input<inputs.DevopsDeploymentDeployArtifactOverrideArguments>;
    deployPipelineId: pulumi.Input<string>;
    deployStageId?: pulumi.Input<string>;
    deployStageOverrideArguments?: pulumi.Input<inputs.DevopsDeploymentDeployStageOverrideArguments>;
    deploymentArguments?: pulumi.Input<inputs.DevopsDeploymentDeploymentArguments>;
    deploymentType: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    previousDeploymentId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.DevopsDeploymentTimeouts>;
    triggerNewDevopsDeployment?: pulumi.Input<boolean>;
}
