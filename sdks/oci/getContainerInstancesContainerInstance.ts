// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getContainerInstancesContainerInstance(args: GetContainerInstancesContainerInstanceArgs, opts?: pulumi.InvokeOptions): Promise<GetContainerInstancesContainerInstanceResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getContainerInstancesContainerInstance:getContainerInstancesContainerInstance", {
        "containerInstanceId": args.containerInstanceId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getContainerInstancesContainerInstance.
 */
export interface GetContainerInstancesContainerInstanceArgs {
    containerInstanceId: string;
}

/**
 * A collection of values returned by getContainerInstancesContainerInstance.
 */
export interface GetContainerInstancesContainerInstanceResult {
    readonly availabilityDomain: string;
    readonly compartmentId: string;
    readonly containerCount: number;
    readonly containerInstanceId: string;
    readonly containerRestartPolicy: string;
    readonly containers: outputs.GetContainerInstancesContainerInstanceContainer[];
    readonly definedTags: {[key: string]: string};
    readonly displayName: string;
    readonly dnsConfigs: outputs.GetContainerInstancesContainerInstanceDnsConfig[];
    readonly faultDomain: string;
    readonly freeformTags: {[key: string]: string};
    readonly gracefulShutdownTimeoutInSeconds: string;
    readonly id: string;
    readonly imagePullSecrets: outputs.GetContainerInstancesContainerInstanceImagePullSecret[];
    readonly lifecycleDetails: string;
    readonly shape: string;
    readonly shapeConfigs: outputs.GetContainerInstancesContainerInstanceShapeConfig[];
    readonly state: string;
    readonly systemTags: {[key: string]: string};
    readonly timeCreated: string;
    readonly timeUpdated: string;
    readonly vnics: outputs.GetContainerInstancesContainerInstanceVnic[];
    readonly volumeCount: number;
    readonly volumes: outputs.GetContainerInstancesContainerInstanceVolume[];
}
export function getContainerInstancesContainerInstanceOutput(args: GetContainerInstancesContainerInstanceOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetContainerInstancesContainerInstanceResult> {
    return pulumi.output(args).apply((a: any) => getContainerInstancesContainerInstance(a, opts))
}

/**
 * A collection of arguments for invoking getContainerInstancesContainerInstance.
 */
export interface GetContainerInstancesContainerInstanceOutputArgs {
    containerInstanceId: pulumi.Input<string>;
}
