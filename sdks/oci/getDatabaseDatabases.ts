// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getDatabaseDatabases(args: GetDatabaseDatabasesArgs, opts?: pulumi.InvokeOptions): Promise<GetDatabaseDatabasesResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getDatabaseDatabases:getDatabaseDatabases", {
        "compartmentId": args.compartmentId,
        "dbHomeId": args.dbHomeId,
        "dbName": args.dbName,
        "filters": args.filters,
        "id": args.id,
        "state": args.state,
        "systemId": args.systemId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getDatabaseDatabases.
 */
export interface GetDatabaseDatabasesArgs {
    compartmentId: string;
    dbHomeId?: string;
    dbName?: string;
    filters?: inputs.GetDatabaseDatabasesFilter[];
    id?: string;
    state?: string;
    systemId?: string;
}

/**
 * A collection of values returned by getDatabaseDatabases.
 */
export interface GetDatabaseDatabasesResult {
    readonly compartmentId: string;
    readonly databases: outputs.GetDatabaseDatabasesDatabase[];
    readonly dbHomeId?: string;
    readonly dbName?: string;
    readonly filters?: outputs.GetDatabaseDatabasesFilter[];
    readonly id: string;
    readonly state?: string;
    readonly systemId?: string;
}
export function getDatabaseDatabasesOutput(args: GetDatabaseDatabasesOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDatabaseDatabasesResult> {
    return pulumi.output(args).apply((a: any) => getDatabaseDatabases(a, opts))
}

/**
 * A collection of arguments for invoking getDatabaseDatabases.
 */
export interface GetDatabaseDatabasesOutputArgs {
    compartmentId: pulumi.Input<string>;
    dbHomeId?: pulumi.Input<string>;
    dbName?: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.GetDatabaseDatabasesFilterArgs>[]>;
    id?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    systemId?: pulumi.Input<string>;
}
