// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getMediaServicesMediaAsset(args: GetMediaServicesMediaAssetArgs, opts?: pulumi.InvokeOptions): Promise<GetMediaServicesMediaAssetResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getMediaServicesMediaAsset:getMediaServicesMediaAsset", {
        "mediaAssetId": args.mediaAssetId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getMediaServicesMediaAsset.
 */
export interface GetMediaServicesMediaAssetArgs {
    mediaAssetId: string;
}

/**
 * A collection of values returned by getMediaServicesMediaAsset.
 */
export interface GetMediaServicesMediaAssetResult {
    readonly bucket: string;
    readonly compartmentId: string;
    readonly definedTags: {[key: string]: string};
    readonly displayName: string;
    readonly freeformTags: {[key: string]: string};
    readonly id: string;
    readonly isLockOverride: boolean;
    readonly locks: outputs.GetMediaServicesMediaAssetLock[];
    readonly masterMediaAssetId: string;
    readonly mediaAssetId: string;
    readonly mediaAssetTags: outputs.GetMediaServicesMediaAssetMediaAssetTag[];
    readonly mediaWorkflowJobId: string;
    readonly metadatas: outputs.GetMediaServicesMediaAssetMetadata[];
    readonly namespace: string;
    readonly object: string;
    readonly objectEtag: string;
    readonly parentMediaAssetId: string;
    readonly segmentRangeEndIndex: string;
    readonly segmentRangeStartIndex: string;
    readonly sourceMediaWorkflowId: string;
    readonly sourceMediaWorkflowVersion: string;
    readonly state: string;
    readonly systemTags: {[key: string]: string};
    readonly timeCreated: string;
    readonly timeUpdated: string;
    readonly type: string;
}
export function getMediaServicesMediaAssetOutput(args: GetMediaServicesMediaAssetOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetMediaServicesMediaAssetResult> {
    return pulumi.output(args).apply((a: any) => getMediaServicesMediaAsset(a, opts))
}

/**
 * A collection of arguments for invoking getMediaServicesMediaAsset.
 */
export interface GetMediaServicesMediaAssetOutputArgs {
    mediaAssetId: pulumi.Input<string>;
}
