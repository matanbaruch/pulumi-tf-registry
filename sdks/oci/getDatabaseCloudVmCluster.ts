// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getDatabaseCloudVmCluster(args: GetDatabaseCloudVmClusterArgs, opts?: pulumi.InvokeOptions): Promise<GetDatabaseCloudVmClusterResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getDatabaseCloudVmCluster:getDatabaseCloudVmCluster", {
        "cloudVmClusterId": args.cloudVmClusterId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getDatabaseCloudVmCluster.
 */
export interface GetDatabaseCloudVmClusterArgs {
    cloudVmClusterId: string;
}

/**
 * A collection of values returned by getDatabaseCloudVmCluster.
 */
export interface GetDatabaseCloudVmClusterResult {
    readonly availabilityDomain: string;
    readonly backupNetworkNsgIds: string[];
    readonly backupSubnetId: string;
    readonly cloudExadataInfrastructureId: string;
    readonly cloudVmClusterId: string;
    readonly clusterName: string;
    readonly compartmentId: string;
    readonly cpuCoreCount: number;
    readonly createAsync: boolean;
    readonly dataCollectionOptions: outputs.GetDatabaseCloudVmClusterDataCollectionOption[];
    readonly dataStoragePercentage: number;
    readonly dataStorageSizeInTbs: number;
    readonly dbNodeStorageSizeInGbs: number;
    readonly dbServers: string[];
    readonly definedTags: {[key: string]: string};
    readonly diskRedundancy: string;
    readonly displayName: string;
    readonly domain: string;
    readonly fileSystemConfigurationDetails: outputs.GetDatabaseCloudVmClusterFileSystemConfigurationDetail[];
    readonly freeformTags: {[key: string]: string};
    readonly giVersion: string;
    readonly hostname: string;
    readonly id: string;
    readonly iormConfigCaches: outputs.GetDatabaseCloudVmClusterIormConfigCach[];
    readonly isLocalBackupEnabled: boolean;
    readonly isSparseDiskgroupEnabled: boolean;
    readonly lastUpdateHistoryEntryId: string;
    readonly licenseModel: string;
    readonly lifecycleDetails: string;
    readonly listenerPort: string;
    readonly memorySizeInGbs: number;
    readonly nodeCount: number;
    readonly nsgIds: string[];
    readonly ocpuCount: number;
    readonly privateZoneId: string;
    readonly scanDnsName: string;
    readonly scanDnsRecordId: string;
    readonly scanIpIds: string[];
    readonly scanListenerPortTcp: number;
    readonly scanListenerPortTcpSsl: number;
    readonly shape: string;
    readonly sshPublicKeys: string[];
    readonly state: string;
    readonly storageSizeInGbs: number;
    readonly subnetId: string;
    readonly subscriptionId: string;
    readonly systemTags: {[key: string]: string};
    readonly systemVersion: string;
    readonly timeCreated: string;
    readonly timeZone: string;
    readonly vipIds: string[];
    readonly zoneId: string;
}
export function getDatabaseCloudVmClusterOutput(args: GetDatabaseCloudVmClusterOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDatabaseCloudVmClusterResult> {
    return pulumi.output(args).apply((a: any) => getDatabaseCloudVmCluster(a, opts))
}

/**
 * A collection of arguments for invoking getDatabaseCloudVmCluster.
 */
export interface GetDatabaseCloudVmClusterOutputArgs {
    cloudVmClusterId: pulumi.Input<string>;
}
