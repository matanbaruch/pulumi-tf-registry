// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getDatabaseExternalNonContainerDatabase(args: GetDatabaseExternalNonContainerDatabaseArgs, opts?: pulumi.InvokeOptions): Promise<GetDatabaseExternalNonContainerDatabaseResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getDatabaseExternalNonContainerDatabase:getDatabaseExternalNonContainerDatabase", {
        "externalNonContainerDatabaseId": args.externalNonContainerDatabaseId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getDatabaseExternalNonContainerDatabase.
 */
export interface GetDatabaseExternalNonContainerDatabaseArgs {
    externalNonContainerDatabaseId: string;
}

/**
 * A collection of values returned by getDatabaseExternalNonContainerDatabase.
 */
export interface GetDatabaseExternalNonContainerDatabaseResult {
    readonly characterSet: string;
    readonly compartmentId: string;
    readonly databaseConfiguration: string;
    readonly databaseEdition: string;
    readonly databaseManagementConfigs: outputs.GetDatabaseExternalNonContainerDatabaseDatabaseManagementConfig[];
    readonly databaseVersion: string;
    readonly dbId: string;
    readonly dbPacks: string;
    readonly dbUniqueName: string;
    readonly definedTags: {[key: string]: string};
    readonly displayName: string;
    readonly externalNonContainerDatabaseId: string;
    readonly freeformTags: {[key: string]: string};
    readonly id: string;
    readonly lifecycleDetails: string;
    readonly ncharacterSet: string;
    readonly operationsInsightsConfigs: outputs.GetDatabaseExternalNonContainerDatabaseOperationsInsightsConfig[];
    readonly stackMonitoringConfigs: outputs.GetDatabaseExternalNonContainerDatabaseStackMonitoringConfig[];
    readonly state: string;
    readonly timeCreated: string;
    readonly timeZone: string;
}
export function getDatabaseExternalNonContainerDatabaseOutput(args: GetDatabaseExternalNonContainerDatabaseOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDatabaseExternalNonContainerDatabaseResult> {
    return pulumi.output(args).apply((a: any) => getDatabaseExternalNonContainerDatabase(a, opts))
}

/**
 * A collection of arguments for invoking getDatabaseExternalNonContainerDatabase.
 */
export interface GetDatabaseExternalNonContainerDatabaseOutputArgs {
    externalNonContainerDatabaseId: pulumi.Input<string>;
}
