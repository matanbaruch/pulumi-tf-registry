// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class StackMonitoringMetricExtension extends pulumi.CustomResource {
    /**
     * Get an existing StackMonitoringMetricExtension resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StackMonitoringMetricExtensionState, opts?: pulumi.CustomResourceOptions): StackMonitoringMetricExtension {
        return new StackMonitoringMetricExtension(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/stackMonitoringMetricExtension:StackMonitoringMetricExtension';

    /**
     * Returns true if the given object is an instance of StackMonitoringMetricExtension.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is StackMonitoringMetricExtension {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StackMonitoringMetricExtension.__pulumiType;
    }

    public /*out*/ readonly collectionMethod!: pulumi.Output<string>;
    public readonly collectionRecurrences!: pulumi.Output<string>;
    public readonly compartmentId!: pulumi.Output<string>;
    public /*out*/ readonly createdBy!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string>;
    public readonly displayName!: pulumi.Output<string>;
    public /*out*/ readonly enabledOnResources!: pulumi.Output<outputs.StackMonitoringMetricExtensionEnabledOnResource[]>;
    public /*out*/ readonly enabledOnResourcesCount!: pulumi.Output<number>;
    public /*out*/ readonly lastUpdatedBy!: pulumi.Output<string>;
    public readonly metricLists!: pulumi.Output<outputs.StackMonitoringMetricExtensionMetricList[]>;
    public readonly name!: pulumi.Output<string>;
    public readonly publishTrigger!: pulumi.Output<boolean | undefined>;
    public readonly queryProperties!: pulumi.Output<outputs.StackMonitoringMetricExtensionQueryProperties>;
    public readonly resourceType!: pulumi.Output<string>;
    public /*out*/ readonly resourceUri!: pulumi.Output<string>;
    public /*out*/ readonly state!: pulumi.Output<string>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public /*out*/ readonly tenantId!: pulumi.Output<string>;
    public /*out*/ readonly timeCreated!: pulumi.Output<string>;
    public /*out*/ readonly timeUpdated!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.StackMonitoringMetricExtensionTimeouts | undefined>;

    /**
     * Create a StackMonitoringMetricExtension resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StackMonitoringMetricExtensionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: StackMonitoringMetricExtensionArgs | StackMonitoringMetricExtensionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as StackMonitoringMetricExtensionState | undefined;
            resourceInputs["collectionMethod"] = state ? state.collectionMethod : undefined;
            resourceInputs["collectionRecurrences"] = state ? state.collectionRecurrences : undefined;
            resourceInputs["compartmentId"] = state ? state.compartmentId : undefined;
            resourceInputs["createdBy"] = state ? state.createdBy : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["enabledOnResources"] = state ? state.enabledOnResources : undefined;
            resourceInputs["enabledOnResourcesCount"] = state ? state.enabledOnResourcesCount : undefined;
            resourceInputs["lastUpdatedBy"] = state ? state.lastUpdatedBy : undefined;
            resourceInputs["metricLists"] = state ? state.metricLists : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["publishTrigger"] = state ? state.publishTrigger : undefined;
            resourceInputs["queryProperties"] = state ? state.queryProperties : undefined;
            resourceInputs["resourceType"] = state ? state.resourceType : undefined;
            resourceInputs["resourceUri"] = state ? state.resourceUri : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tenantId"] = state ? state.tenantId : undefined;
            resourceInputs["timeCreated"] = state ? state.timeCreated : undefined;
            resourceInputs["timeUpdated"] = state ? state.timeUpdated : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as StackMonitoringMetricExtensionArgs | undefined;
            if ((!args || args.collectionRecurrences === undefined) && !opts.urn) {
                throw new Error("Missing required property 'collectionRecurrences'");
            }
            if ((!args || args.compartmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'compartmentId'");
            }
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if ((!args || args.metricLists === undefined) && !opts.urn) {
                throw new Error("Missing required property 'metricLists'");
            }
            if ((!args || args.queryProperties === undefined) && !opts.urn) {
                throw new Error("Missing required property 'queryProperties'");
            }
            if ((!args || args.resourceType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceType'");
            }
            resourceInputs["collectionRecurrences"] = args ? args.collectionRecurrences : undefined;
            resourceInputs["compartmentId"] = args ? args.compartmentId : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["metricLists"] = args ? args.metricLists : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["publishTrigger"] = args ? args.publishTrigger : undefined;
            resourceInputs["queryProperties"] = args ? args.queryProperties : undefined;
            resourceInputs["resourceType"] = args ? args.resourceType : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["collectionMethod"] = undefined /*out*/;
            resourceInputs["createdBy"] = undefined /*out*/;
            resourceInputs["enabledOnResources"] = undefined /*out*/;
            resourceInputs["enabledOnResourcesCount"] = undefined /*out*/;
            resourceInputs["lastUpdatedBy"] = undefined /*out*/;
            resourceInputs["resourceUri"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["tenantId"] = undefined /*out*/;
            resourceInputs["timeCreated"] = undefined /*out*/;
            resourceInputs["timeUpdated"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(StackMonitoringMetricExtension.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering StackMonitoringMetricExtension resources.
 */
export interface StackMonitoringMetricExtensionState {
    collectionMethod?: pulumi.Input<string>;
    collectionRecurrences?: pulumi.Input<string>;
    compartmentId?: pulumi.Input<string>;
    createdBy?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    enabledOnResources?: pulumi.Input<pulumi.Input<inputs.StackMonitoringMetricExtensionEnabledOnResource>[]>;
    enabledOnResourcesCount?: pulumi.Input<number>;
    lastUpdatedBy?: pulumi.Input<string>;
    metricLists?: pulumi.Input<pulumi.Input<inputs.StackMonitoringMetricExtensionMetricList>[]>;
    name?: pulumi.Input<string>;
    publishTrigger?: pulumi.Input<boolean>;
    queryProperties?: pulumi.Input<inputs.StackMonitoringMetricExtensionQueryProperties>;
    resourceType?: pulumi.Input<string>;
    resourceUri?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    tenantId?: pulumi.Input<string>;
    timeCreated?: pulumi.Input<string>;
    timeUpdated?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.StackMonitoringMetricExtensionTimeouts>;
}

/**
 * The set of arguments for constructing a StackMonitoringMetricExtension resource.
 */
export interface StackMonitoringMetricExtensionArgs {
    collectionRecurrences: pulumi.Input<string>;
    compartmentId: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    displayName: pulumi.Input<string>;
    metricLists: pulumi.Input<pulumi.Input<inputs.StackMonitoringMetricExtensionMetricList>[]>;
    name?: pulumi.Input<string>;
    publishTrigger?: pulumi.Input<boolean>;
    queryProperties: pulumi.Input<inputs.StackMonitoringMetricExtensionQueryProperties>;
    resourceType: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.StackMonitoringMetricExtensionTimeouts>;
}
