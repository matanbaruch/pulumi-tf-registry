// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface AdmKnowledgeBaseTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface AdmRemediationRecipeDetectConfiguration {
    exclusions: string[];
    maxPermissibleCvssV2score: number;
    maxPermissibleCvssV3score: number;
    maxPermissibleSeverity: string;
    upgradePolicy: string;
}

export interface AdmRemediationRecipeNetworkConfiguration {
    nsgIds: string[];
    subnetId: string;
}

export interface AdmRemediationRecipeScmConfiguration {
    branch: string;
    buildFileLocation: string;
    externalScmType: string;
    isAutomergeEnabled: boolean;
    ociCodeRepositoryId: string;
    patSecretId: string;
    repositoryUrl: string;
    scmType: string;
    username: string;
}

export interface AdmRemediationRecipeTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface AdmRemediationRecipeVerifyConfiguration {
    additionalParameters: {[key: string]: string};
    buildServiceType: string;
    jenkinsUrl: string;
    jobName: string;
    patSecretId: string;
    pipelineId: string;
    repositoryUrl: string;
    triggerSecretId: string;
    username: string;
    workflowName: string;
}

export interface AdmRemediationRunStage {
    summary: string;
    timeCreated: string;
    timeFinished: string;
    timeStarted: string;
    type: string;
}

export interface AdmRemediationRunTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface AdmVulnerabilityAuditApplicationDependency {
    applicationDependencyNodeIds: string[];
    gav: string;
    nodeId: string;
    purl: string;
}

export interface AdmVulnerabilityAuditConfiguration {
    exclusions: string[];
    maxPermissibleCvssV2score: number;
    maxPermissibleCvssV3score: number;
    maxPermissibleSeverity: string;
}

export interface AdmVulnerabilityAuditSource {
    description: string;
    ociResourceId: string;
    type: string;
}

export interface AdmVulnerabilityAuditTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface AdmVulnerabilityAuditUsageData {
    bucket: string;
    namespace: string;
    object: string;
    sourceType: string;
}

export interface AdmVulnerabilityAuditVulnerability {
    cvssV2score: number;
    cvssV3score: number;
    id: string;
    isFalsePositive: boolean;
    isIgnored: boolean;
    severity: string;
    source: string;
}

export interface AiAnomalyDetectionAiPrivateEndpointTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface AiAnomalyDetectionDataAssetDataSourceDetails {
    atpPasswordSecretId: string;
    atpUserName: string;
    bucket: string;
    cwalletFileSecretId: string;
    dataSourceType: string;
    databaseName: string;
    ewalletFileSecretId: string;
    keyStoreFileSecretId: string;
    measurementName: string;
    namespace: string;
    object: string;
    ojdbcFileSecretId: string;
    passwordSecretId: string;
    tableName: string;
    tnsnamesFileSecretId: string;
    truststoreFileSecretId: string;
    url: string;
    userName: string;
    versionSpecificDetails?: outputs.AiAnomalyDetectionDataAssetDataSourceDetailsVersionSpecificDetails;
    walletPasswordSecretId: string;
}

export interface AiAnomalyDetectionDataAssetDataSourceDetailsVersionSpecificDetails {
    bucket: string;
    databaseName: string;
    influxVersion: string;
    organizationName: string;
    retentionPolicyName: string;
}

export interface AiAnomalyDetectionDataAssetTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface AiAnomalyDetectionDetectAnomalyJobInputDetails {
    content: string;
    contentType: string;
    datas?: outputs.AiAnomalyDetectionDetectAnomalyJobInputDetailsData[];
    inputType: string;
    message: string;
    objectLocations?: outputs.AiAnomalyDetectionDetectAnomalyJobInputDetailsObjectLocation[];
    signalNames: string[];
}

export interface AiAnomalyDetectionDetectAnomalyJobInputDetailsData {
    timestamp: string;
    values: number[];
}

export interface AiAnomalyDetectionDetectAnomalyJobInputDetailsObjectLocation {
    bucket: string;
    namespace: string;
    object: string;
}

export interface AiAnomalyDetectionDetectAnomalyJobOutputDetails {
    bucket: string;
    namespace: string;
    outputType: string;
    prefix: string;
}

export interface AiAnomalyDetectionDetectAnomalyJobTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface AiAnomalyDetectionModelModelTrainingDetails {
    algorithmHint: string;
    dataAssetIds: string[];
    targetFap: number;
    trainingFraction: number;
    windowSize: number;
}

export interface AiAnomalyDetectionModelModelTrainingResult {
    fap: number;
    isTrainingGoalAchieved: boolean;
    mae: number;
    maxInferenceSyncRows: number;
    multivariateFap: number;
    rmse: number;
    rowReductionDetails: outputs.AiAnomalyDetectionModelModelTrainingResultRowReductionDetail[];
    signalDetails: outputs.AiAnomalyDetectionModelModelTrainingResultSignalDetail[];
    warning: string;
    windowSize: number;
}

export interface AiAnomalyDetectionModelModelTrainingResultRowReductionDetail {
    isReductionEnabled: boolean;
    reductionMethod: string;
    reductionPercentage: number;
}

export interface AiAnomalyDetectionModelModelTrainingResultSignalDetail {
    details: string;
    fap: number;
    isQuantized: boolean;
    max: number;
    min: number;
    mviRatio: number;
    signalName: string;
    status: string;
    std: number;
}

export interface AiAnomalyDetectionModelTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface AiAnomalyDetectionProjectTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface AiDocumentModelComponentModel {
    modelId: string;
}

export interface AiDocumentModelMetric {
    datasetSummaries: outputs.AiDocumentModelMetricDatasetSummary[];
    labelMetricsReports: outputs.AiDocumentModelMetricLabelMetricsReport[];
    modelType: string;
    overallMetricsReports: outputs.AiDocumentModelMetricOverallMetricsReport[];
}

export interface AiDocumentModelMetricDatasetSummary {
    testSampleCount: number;
    trainingSampleCount: number;
    validationSampleCount: number;
}

export interface AiDocumentModelMetricLabelMetricsReport {
    confidenceEntries: outputs.AiDocumentModelMetricLabelMetricsReportConfidenceEntry[];
    documentCount: number;
    label: string;
    meanAveragePrecision: number;
}

export interface AiDocumentModelMetricLabelMetricsReportConfidenceEntry {
    accuracy: number;
    f1score: number;
    precision: number;
    recall: number;
    threshold: number;
}

export interface AiDocumentModelMetricOverallMetricsReport {
    confidenceEntries: outputs.AiDocumentModelMetricOverallMetricsReportConfidenceEntry[];
    documentCount: number;
    meanAveragePrecision: number;
}

export interface AiDocumentModelMetricOverallMetricsReportConfidenceEntry {
    accuracy: number;
    f1score: number;
    precision: number;
    recall: number;
    threshold: number;
}

export interface AiDocumentModelTestingDataset {
    bucket: string;
    datasetId: string;
    datasetType: string;
    namespace: string;
    object: string;
}

export interface AiDocumentModelTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface AiDocumentModelTrainingDataset {
    bucket: string;
    datasetId: string;
    datasetType: string;
    namespace: string;
    object: string;
}

export interface AiDocumentModelValidationDataset {
    bucket: string;
    datasetId: string;
    datasetType: string;
    namespace: string;
    object: string;
}

export interface AiDocumentProcessorJobInputLocation {
    data: string;
    objectLocations?: outputs.AiDocumentProcessorJobInputLocationObjectLocation[];
    sourceType: string;
}

export interface AiDocumentProcessorJobInputLocationObjectLocation {
    bucket: string;
    namespace: string;
    object: string;
}

export interface AiDocumentProcessorJobOutputLocation {
    bucket: string;
    namespace: string;
    prefix: string;
}

export interface AiDocumentProcessorJobProcessorConfig {
    documentType: string;
    features: outputs.AiDocumentProcessorJobProcessorConfigFeature[];
    isZipOutputEnabled: boolean;
    language: string;
    processorType: string;
}

export interface AiDocumentProcessorJobProcessorConfigFeature {
    featureType: string;
    generateSearchablePdf: boolean;
    maxResults: number;
    modelId: string;
    tenancyId: string;
}

export interface AiDocumentProcessorJobTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface AiDocumentProjectTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface AiLanguageEndpointTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface AiLanguageModelEvaluationResult {
    classMetrics: outputs.AiLanguageModelEvaluationResultClassMetric[];
    confusionMatrix: string;
    entityMetrics: outputs.AiLanguageModelEvaluationResultEntityMetric[];
    labels: string[];
    metrics: outputs.AiLanguageModelEvaluationResultMetric[];
    modelType: string;
}

export interface AiLanguageModelEvaluationResultClassMetric {
    f1: number;
    label: string;
    precision: number;
    recall: number;
    support: number;
}

export interface AiLanguageModelEvaluationResultEntityMetric {
    f1: number;
    label: string;
    precision: number;
    recall: number;
}

export interface AiLanguageModelEvaluationResultMetric {
    accuracy: number;
    macroF1: number;
    macroPrecision: number;
    macroRecall: number;
    microF1: number;
    microPrecision: number;
    microRecall: number;
    weightedF1: number;
    weightedPrecision: number;
    weightedRecall: number;
}

export interface AiLanguageModelModelDetails {
    classificationMode?: outputs.AiLanguageModelModelDetailsClassificationMode;
    languageCode: string;
    modelType: string;
    version: string;
}

export interface AiLanguageModelModelDetailsClassificationMode {
    classificationMode: string;
    version: string;
}

export interface AiLanguageModelTestStrategy {
    strategyType: string;
    testingDataset: outputs.AiLanguageModelTestStrategyTestingDataset;
    validationDataset?: outputs.AiLanguageModelTestStrategyValidationDataset;
}

export interface AiLanguageModelTestStrategyTestingDataset {
    datasetId: string;
    datasetType: string;
    locationDetails?: outputs.AiLanguageModelTestStrategyTestingDatasetLocationDetails;
}

export interface AiLanguageModelTestStrategyTestingDatasetLocationDetails {
    bucket: string;
    locationType: string;
    namespace: string;
    objectNames: string[];
}

export interface AiLanguageModelTestStrategyValidationDataset {
    datasetId: string;
    datasetType: string;
    locationDetails?: outputs.AiLanguageModelTestStrategyValidationDatasetLocationDetails;
}

export interface AiLanguageModelTestStrategyValidationDatasetLocationDetails {
    bucket: string;
    locationType: string;
    namespace: string;
    objectNames: string[];
}

export interface AiLanguageModelTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface AiLanguageModelTrainingDataset {
    datasetId: string;
    datasetType: string;
    locationDetails?: outputs.AiLanguageModelTrainingDatasetLocationDetails;
}

export interface AiLanguageModelTrainingDatasetLocationDetails {
    bucket: string;
    locationType: string;
    namespace: string;
    objectNames: string[];
}

export interface AiLanguageProjectTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface AiVisionModelTestingDataset {
    bucket: string;
    datasetId: string;
    datasetType: string;
    namespaceName: string;
    object: string;
}

export interface AiVisionModelTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface AiVisionModelTrainingDataset {
    bucket: string;
    datasetId: string;
    datasetType: string;
    namespaceName: string;
    object: string;
}

export interface AiVisionModelValidationDataset {
    bucket: string;
    datasetId: string;
    datasetType: string;
    namespaceName: string;
    object: string;
}

export interface AiVisionProjectTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface AnalyticsAnalyticsInstanceCapacity {
    capacityType: string;
    capacityValue: number;
}

export interface AnalyticsAnalyticsInstanceNetworkEndpointDetails {
    networkEndpointType: string;
    networkSecurityGroupIds: string[];
    subnetId: string;
    vcnId: string;
    whitelistedIps: string[];
    whitelistedServices: string[];
    whitelistedVcns?: outputs.AnalyticsAnalyticsInstanceNetworkEndpointDetailsWhitelistedVcn[];
}

export interface AnalyticsAnalyticsInstanceNetworkEndpointDetailsWhitelistedVcn {
    id: string;
    whitelistedIps: string[];
}

export interface AnalyticsAnalyticsInstancePrivateAccessChannelPrivateSourceDnsZone {
    description: string;
    dnsZone: string;
}

export interface AnalyticsAnalyticsInstancePrivateAccessChannelPrivateSourceScanHost {
    description: string;
    scanHostname: string;
    scanPort: number;
}

export interface AnalyticsAnalyticsInstancePrivateAccessChannelTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface AnalyticsAnalyticsInstanceTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface AnalyticsAnalyticsInstanceVanityUrlTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface AnnouncementsServiceAnnouncementSubscriptionFilterGroups {
    filters: outputs.AnnouncementsServiceAnnouncementSubscriptionFilterGroupsFilter[];
    name: string;
}

export interface AnnouncementsServiceAnnouncementSubscriptionFilterGroupsFilter {
    type: string;
    value: string;
}

export interface AnnouncementsServiceAnnouncementSubscriptionTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface AnnouncementsServiceAnnouncementSubscriptionsActionsChangeCompartmentTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface AnnouncementsServiceAnnouncementSubscriptionsFilterGroupFilter {
    type: string;
    value: string;
}

export interface AnnouncementsServiceAnnouncementSubscriptionsFilterGroupTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface ApigatewayApiTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface ApigatewayApiValidationResult {
    name: string;
    result: string;
}

export interface ApigatewayCertificateTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface ApigatewayDeploymentSpecification {
    loggingPolicies?: outputs.ApigatewayDeploymentSpecificationLoggingPolicies;
    requestPolicies?: outputs.ApigatewayDeploymentSpecificationRequestPolicies;
    routes: outputs.ApigatewayDeploymentSpecificationRoute[];
}

export interface ApigatewayDeploymentSpecificationLoggingPolicies {
    accessLog?: outputs.ApigatewayDeploymentSpecificationLoggingPoliciesAccessLog;
    executionLog?: outputs.ApigatewayDeploymentSpecificationLoggingPoliciesExecutionLog;
}

export interface ApigatewayDeploymentSpecificationLoggingPoliciesAccessLog {
    isEnabled: boolean;
}

export interface ApigatewayDeploymentSpecificationLoggingPoliciesExecutionLog {
    isEnabled: boolean;
    logLevel: string;
}

export interface ApigatewayDeploymentSpecificationRequestPolicies {
    authentication?: outputs.ApigatewayDeploymentSpecificationRequestPoliciesAuthentication;
    cors?: outputs.ApigatewayDeploymentSpecificationRequestPoliciesCors;
    dynamicAuthentication?: outputs.ApigatewayDeploymentSpecificationRequestPoliciesDynamicAuthentication;
    mutualTls?: outputs.ApigatewayDeploymentSpecificationRequestPoliciesMutualTls;
    rateLimiting?: outputs.ApigatewayDeploymentSpecificationRequestPoliciesRateLimiting;
    usagePlans?: outputs.ApigatewayDeploymentSpecificationRequestPoliciesUsagePlans;
}

export interface ApigatewayDeploymentSpecificationRequestPoliciesAuthentication {
    audiences: string[];
    cacheKeys: string[];
    functionId: string;
    isAnonymousAccessAllowed: boolean;
    issuers: string[];
    maxClockSkewInSeconds: number;
    parameters: {[key: string]: string};
    publicKeys?: outputs.ApigatewayDeploymentSpecificationRequestPoliciesAuthenticationPublicKeys;
    tokenAuthScheme: string;
    tokenHeader: string;
    tokenQueryParam: string;
    type: string;
    validationFailurePolicy?: outputs.ApigatewayDeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicy;
    validationPolicy?: outputs.ApigatewayDeploymentSpecificationRequestPoliciesAuthenticationValidationPolicy;
    verifyClaims?: outputs.ApigatewayDeploymentSpecificationRequestPoliciesAuthenticationVerifyClaim[];
}

export interface ApigatewayDeploymentSpecificationRequestPoliciesAuthenticationPublicKeys {
    isSslVerifyDisabled: boolean;
    keys?: outputs.ApigatewayDeploymentSpecificationRequestPoliciesAuthenticationPublicKeysKey[];
    maxCacheDurationInHours: number;
    type: string;
    uri: string;
}

export interface ApigatewayDeploymentSpecificationRequestPoliciesAuthenticationPublicKeysKey {
    alg: string;
    e: string;
    format: string;
    key: string;
    keyOps: string[];
    kid: string;
    kty: string;
    n: string;
    use: string;
}

export interface ApigatewayDeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicy {
    clientDetails?: outputs.ApigatewayDeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyClientDetails;
    fallbackRedirectPath: string;
    logoutPath: string;
    maxExpiryDurationInHours: number;
    responseCode: string;
    responseHeaderTransformations?: outputs.ApigatewayDeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyResponseHeaderTransformations;
    responseMessage: string;
    responseType: string;
    scopes: string[];
    sourceUriDetails?: outputs.ApigatewayDeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicySourceUriDetails;
    type: string;
    useCookiesForIntermediateSteps: boolean;
    useCookiesForSession: boolean;
    usePkce: boolean;
}

export interface ApigatewayDeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyClientDetails {
    clientId: string;
    clientSecretId: string;
    clientSecretVersionNumber: string;
    type: string;
}

export interface ApigatewayDeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyResponseHeaderTransformations {
    filterHeaders?: outputs.ApigatewayDeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyResponseHeaderTransformationsFilterHeaders;
    renameHeaders?: outputs.ApigatewayDeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyResponseHeaderTransformationsRenameHeaders;
    setHeaders?: outputs.ApigatewayDeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyResponseHeaderTransformationsSetHeaders;
}

export interface ApigatewayDeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyResponseHeaderTransformationsFilterHeaders {
    items?: outputs.ApigatewayDeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyResponseHeaderTransformationsFilterHeadersItem[];
    type: string;
}

export interface ApigatewayDeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyResponseHeaderTransformationsFilterHeadersItem {
    name: string;
}

export interface ApigatewayDeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyResponseHeaderTransformationsRenameHeaders {
    items?: outputs.ApigatewayDeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyResponseHeaderTransformationsRenameHeadersItem[];
}

export interface ApigatewayDeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyResponseHeaderTransformationsRenameHeadersItem {
    from: string;
    to: string;
}

export interface ApigatewayDeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyResponseHeaderTransformationsSetHeaders {
    items?: outputs.ApigatewayDeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyResponseHeaderTransformationsSetHeadersItem[];
}

export interface ApigatewayDeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyResponseHeaderTransformationsSetHeadersItem {
    ifExists: string;
    name: string;
    values: string[];
}

export interface ApigatewayDeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicySourceUriDetails {
    type: string;
    uri: string;
}

export interface ApigatewayDeploymentSpecificationRequestPoliciesAuthenticationValidationPolicy {
    additionalValidationPolicy?: outputs.ApigatewayDeploymentSpecificationRequestPoliciesAuthenticationValidationPolicyAdditionalValidationPolicy;
    clientDetails?: outputs.ApigatewayDeploymentSpecificationRequestPoliciesAuthenticationValidationPolicyClientDetails;
    isSslVerifyDisabled: boolean;
    keys?: outputs.ApigatewayDeploymentSpecificationRequestPoliciesAuthenticationValidationPolicyKey[];
    maxCacheDurationInHours: number;
    sourceUriDetails?: outputs.ApigatewayDeploymentSpecificationRequestPoliciesAuthenticationValidationPolicySourceUriDetails;
    type: string;
    uri: string;
}

export interface ApigatewayDeploymentSpecificationRequestPoliciesAuthenticationValidationPolicyAdditionalValidationPolicy {
    audiences: string[];
    issuers: string[];
    verifyClaims?: outputs.ApigatewayDeploymentSpecificationRequestPoliciesAuthenticationValidationPolicyAdditionalValidationPolicyVerifyClaim[];
}

export interface ApigatewayDeploymentSpecificationRequestPoliciesAuthenticationValidationPolicyAdditionalValidationPolicyVerifyClaim {
    isRequired: boolean;
    key: string;
    values: string[];
}

export interface ApigatewayDeploymentSpecificationRequestPoliciesAuthenticationValidationPolicyClientDetails {
    clientId: string;
    clientSecretId: string;
    clientSecretVersionNumber: string;
    type: string;
}

export interface ApigatewayDeploymentSpecificationRequestPoliciesAuthenticationValidationPolicyKey {
    alg: string;
    e: string;
    format: string;
    key: string;
    keyOps: string[];
    kid: string;
    kty: string;
    n: string;
    use: string;
}

export interface ApigatewayDeploymentSpecificationRequestPoliciesAuthenticationValidationPolicySourceUriDetails {
    type: string;
    uri: string;
}

export interface ApigatewayDeploymentSpecificationRequestPoliciesAuthenticationVerifyClaim {
    isRequired: boolean;
    key: string;
    values: string[];
}

export interface ApigatewayDeploymentSpecificationRequestPoliciesCors {
    allowedHeaders: string[];
    allowedMethods: string[];
    allowedOrigins: string[];
    exposedHeaders: string[];
    isAllowCredentialsEnabled: boolean;
    maxAgeInSeconds: number;
}

export interface ApigatewayDeploymentSpecificationRequestPoliciesDynamicAuthentication {
    authenticationServers: outputs.ApigatewayDeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServer[];
    selectionSource: outputs.ApigatewayDeploymentSpecificationRequestPoliciesDynamicAuthenticationSelectionSource;
}

export interface ApigatewayDeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServer {
    authenticationServerDetail: outputs.ApigatewayDeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetail;
    key: outputs.ApigatewayDeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerKey;
}

export interface ApigatewayDeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetail {
    audiences: string[];
    cacheKeys: string[];
    functionId: string;
    isAnonymousAccessAllowed: boolean;
    issuers: string[];
    maxClockSkewInSeconds: number;
    parameters: {[key: string]: string};
    publicKeys?: outputs.ApigatewayDeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailPublicKeys;
    tokenAuthScheme: string;
    tokenHeader: string;
    tokenQueryParam: string;
    type: string;
    validationFailurePolicy?: outputs.ApigatewayDeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicy;
    validationPolicy?: outputs.ApigatewayDeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicy;
    verifyClaims?: outputs.ApigatewayDeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailVerifyClaim[];
}

export interface ApigatewayDeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailPublicKeys {
    isSslVerifyDisabled: boolean;
    keys?: outputs.ApigatewayDeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailPublicKeysKey[];
    maxCacheDurationInHours: number;
    type: string;
    uri: string;
}

export interface ApigatewayDeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailPublicKeysKey {
    alg: string;
    e: string;
    format: string;
    key: string;
    keyOps: string[];
    kid: string;
    kty: string;
    n: string;
    use: string;
}

export interface ApigatewayDeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicy {
    clientDetails?: outputs.ApigatewayDeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyClientDetails;
    fallbackRedirectPath: string;
    logoutPath: string;
    maxExpiryDurationInHours: number;
    responseCode: string;
    responseHeaderTransformations?: outputs.ApigatewayDeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformations;
    responseMessage: string;
    responseType: string;
    scopes: string[];
    sourceUriDetails?: outputs.ApigatewayDeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicySourceUriDetails;
    type: string;
    useCookiesForIntermediateSteps: boolean;
    useCookiesForSession: boolean;
    usePkce: boolean;
}

export interface ApigatewayDeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyClientDetails {
    clientId: string;
    clientSecretId: string;
    clientSecretVersionNumber: string;
    type: string;
}

export interface ApigatewayDeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformations {
    filterHeaders?: outputs.ApigatewayDeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationsFilterHeaders;
    renameHeaders?: outputs.ApigatewayDeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationsRenameHeaders;
    setHeaders?: outputs.ApigatewayDeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationsSetHeaders;
}

export interface ApigatewayDeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationsFilterHeaders {
    items?: outputs.ApigatewayDeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationsFilterHeadersItem[];
    type: string;
}

export interface ApigatewayDeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationsFilterHeadersItem {
    name: string;
}

export interface ApigatewayDeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationsRenameHeaders {
    items?: outputs.ApigatewayDeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationsRenameHeadersItem[];
}

export interface ApigatewayDeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationsRenameHeadersItem {
    from: string;
    to: string;
}

export interface ApigatewayDeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationsSetHeaders {
    items?: outputs.ApigatewayDeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationsSetHeadersItem[];
}

export interface ApigatewayDeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationsSetHeadersItem {
    ifExists: string;
    name: string;
    values: string[];
}

export interface ApigatewayDeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicySourceUriDetails {
    type: string;
    uri: string;
}

export interface ApigatewayDeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicy {
    additionalValidationPolicy?: outputs.ApigatewayDeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyAdditionalValidationPolicy;
    clientDetails?: outputs.ApigatewayDeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyClientDetails;
    isSslVerifyDisabled: boolean;
    keys?: outputs.ApigatewayDeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyKey[];
    maxCacheDurationInHours: number;
    sourceUriDetails?: outputs.ApigatewayDeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicySourceUriDetails;
    type: string;
    uri: string;
}

export interface ApigatewayDeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyAdditionalValidationPolicy {
    audiences: string[];
    issuers: string[];
    verifyClaims?: outputs.ApigatewayDeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyAdditionalValidationPolicyVerifyClaim[];
}

export interface ApigatewayDeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyAdditionalValidationPolicyVerifyClaim {
    isRequired: boolean;
    key: string;
    values: string[];
}

export interface ApigatewayDeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyClientDetails {
    clientId: string;
    clientSecretId: string;
    clientSecretVersionNumber: string;
    type: string;
}

export interface ApigatewayDeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyKey {
    alg: string;
    e: string;
    format: string;
    key: string;
    keyOps: string[];
    kid: string;
    kty: string;
    n: string;
    use: string;
}

export interface ApigatewayDeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicySourceUriDetails {
    type: string;
    uri: string;
}

export interface ApigatewayDeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailVerifyClaim {
    isRequired: boolean;
    key: string;
    values: string[];
}

export interface ApigatewayDeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerKey {
    expression: string;
    isDefault: boolean;
    name: string;
    type: string;
    values: string[];
}

export interface ApigatewayDeploymentSpecificationRequestPoliciesDynamicAuthenticationSelectionSource {
    selector: string;
    type: string;
}

export interface ApigatewayDeploymentSpecificationRequestPoliciesMutualTls {
    allowedSans: string[];
    isVerifiedCertificateRequired: boolean;
}

export interface ApigatewayDeploymentSpecificationRequestPoliciesRateLimiting {
    rateInRequestsPerSecond: number;
    rateKey: string;
}

export interface ApigatewayDeploymentSpecificationRequestPoliciesUsagePlans {
    tokenLocations: string[];
}

export interface ApigatewayDeploymentSpecificationRoute {
    backend: outputs.ApigatewayDeploymentSpecificationRouteBackend;
    loggingPolicies?: outputs.ApigatewayDeploymentSpecificationRouteLoggingPolicies;
    methods: string[];
    path: string;
    requestPolicies?: outputs.ApigatewayDeploymentSpecificationRouteRequestPolicies;
    responsePolicies?: outputs.ApigatewayDeploymentSpecificationRouteResponsePolicies;
}

export interface ApigatewayDeploymentSpecificationRouteBackend {
    allowedPostLogoutUris: string[];
    body: string;
    connectTimeoutInSeconds: number;
    functionId: string;
    headers?: outputs.ApigatewayDeploymentSpecificationRouteBackendHeader[];
    isSslVerifyDisabled: boolean;
    postLogoutState: string;
    readTimeoutInSeconds: number;
    routingBackends?: outputs.ApigatewayDeploymentSpecificationRouteBackendRoutingBackend[];
    selectionSource?: outputs.ApigatewayDeploymentSpecificationRouteBackendSelectionSource;
    sendTimeoutInSeconds: number;
    status: number;
    type: string;
    url: string;
}

export interface ApigatewayDeploymentSpecificationRouteBackendHeader {
    name: string;
    value: string;
}

export interface ApigatewayDeploymentSpecificationRouteBackendRoutingBackend {
    backend?: outputs.ApigatewayDeploymentSpecificationRouteBackendRoutingBackendBackend;
    key?: outputs.ApigatewayDeploymentSpecificationRouteBackendRoutingBackendKey;
}

export interface ApigatewayDeploymentSpecificationRouteBackendRoutingBackendBackend {
    body: string;
    connectTimeoutInSeconds: number;
    functionId: string;
    headers: outputs.ApigatewayDeploymentSpecificationRouteBackendRoutingBackendBackendHeader[];
    isSslVerifyDisabled: boolean;
    readTimeoutInSeconds: number;
    sendTimeoutInSeconds: number;
    status: number;
    type: string;
    url: string;
}

export interface ApigatewayDeploymentSpecificationRouteBackendRoutingBackendBackendHeader {
    name: string;
    value: string;
}

export interface ApigatewayDeploymentSpecificationRouteBackendRoutingBackendKey {
    expression: string;
    isDefault: boolean;
    name: string;
    type: string;
    values: string[];
}

export interface ApigatewayDeploymentSpecificationRouteBackendSelectionSource {
    selector: string;
    type: string;
}

export interface ApigatewayDeploymentSpecificationRouteLoggingPolicies {
    accessLog?: outputs.ApigatewayDeploymentSpecificationRouteLoggingPoliciesAccessLog;
    executionLog?: outputs.ApigatewayDeploymentSpecificationRouteLoggingPoliciesExecutionLog;
}

export interface ApigatewayDeploymentSpecificationRouteLoggingPoliciesAccessLog {
    isEnabled: boolean;
}

export interface ApigatewayDeploymentSpecificationRouteLoggingPoliciesExecutionLog {
    isEnabled: boolean;
    logLevel: string;
}

export interface ApigatewayDeploymentSpecificationRouteRequestPolicies {
    authorization?: outputs.ApigatewayDeploymentSpecificationRouteRequestPoliciesAuthorization;
    bodyValidation?: outputs.ApigatewayDeploymentSpecificationRouteRequestPoliciesBodyValidation;
    cors?: outputs.ApigatewayDeploymentSpecificationRouteRequestPoliciesCors;
    headerTransformations?: outputs.ApigatewayDeploymentSpecificationRouteRequestPoliciesHeaderTransformations;
    headerValidations?: outputs.ApigatewayDeploymentSpecificationRouteRequestPoliciesHeaderValidations;
    queryParameterTransformations?: outputs.ApigatewayDeploymentSpecificationRouteRequestPoliciesQueryParameterTransformations;
    queryParameterValidations?: outputs.ApigatewayDeploymentSpecificationRouteRequestPoliciesQueryParameterValidations;
    responseCacheLookup?: outputs.ApigatewayDeploymentSpecificationRouteRequestPoliciesResponseCacheLookup;
}

export interface ApigatewayDeploymentSpecificationRouteRequestPoliciesAuthorization {
    allowedScopes: string[];
    type: string;
}

export interface ApigatewayDeploymentSpecificationRouteRequestPoliciesBodyValidation {
    contents?: outputs.ApigatewayDeploymentSpecificationRouteRequestPoliciesBodyValidationContent[];
    required: boolean;
    validationMode: string;
}

export interface ApigatewayDeploymentSpecificationRouteRequestPoliciesBodyValidationContent {
    mediaType: string;
    validationType: string;
}

export interface ApigatewayDeploymentSpecificationRouteRequestPoliciesCors {
    allowedHeaders: string[];
    allowedMethods: string[];
    allowedOrigins: string[];
    exposedHeaders: string[];
    isAllowCredentialsEnabled: boolean;
    maxAgeInSeconds: number;
}

export interface ApigatewayDeploymentSpecificationRouteRequestPoliciesHeaderTransformations {
    filterHeaders?: outputs.ApigatewayDeploymentSpecificationRouteRequestPoliciesHeaderTransformationsFilterHeaders;
    renameHeaders?: outputs.ApigatewayDeploymentSpecificationRouteRequestPoliciesHeaderTransformationsRenameHeaders;
    setHeaders?: outputs.ApigatewayDeploymentSpecificationRouteRequestPoliciesHeaderTransformationsSetHeaders;
}

export interface ApigatewayDeploymentSpecificationRouteRequestPoliciesHeaderTransformationsFilterHeaders {
    items: outputs.ApigatewayDeploymentSpecificationRouteRequestPoliciesHeaderTransformationsFilterHeadersItem[];
    type: string;
}

export interface ApigatewayDeploymentSpecificationRouteRequestPoliciesHeaderTransformationsFilterHeadersItem {
    name: string;
}

export interface ApigatewayDeploymentSpecificationRouteRequestPoliciesHeaderTransformationsRenameHeaders {
    items: outputs.ApigatewayDeploymentSpecificationRouteRequestPoliciesHeaderTransformationsRenameHeadersItem[];
}

export interface ApigatewayDeploymentSpecificationRouteRequestPoliciesHeaderTransformationsRenameHeadersItem {
    from: string;
    to: string;
}

export interface ApigatewayDeploymentSpecificationRouteRequestPoliciesHeaderTransformationsSetHeaders {
    items: outputs.ApigatewayDeploymentSpecificationRouteRequestPoliciesHeaderTransformationsSetHeadersItem[];
}

export interface ApigatewayDeploymentSpecificationRouteRequestPoliciesHeaderTransformationsSetHeadersItem {
    ifExists: string;
    name: string;
    values: string[];
}

export interface ApigatewayDeploymentSpecificationRouteRequestPoliciesHeaderValidations {
    headers?: outputs.ApigatewayDeploymentSpecificationRouteRequestPoliciesHeaderValidationsHeader[];
    validationMode: string;
}

export interface ApigatewayDeploymentSpecificationRouteRequestPoliciesHeaderValidationsHeader {
    name: string;
    required: boolean;
}

export interface ApigatewayDeploymentSpecificationRouteRequestPoliciesQueryParameterTransformations {
    filterQueryParameters?: outputs.ApigatewayDeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsFilterQueryParameters;
    renameQueryParameters?: outputs.ApigatewayDeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsRenameQueryParameters;
    setQueryParameters?: outputs.ApigatewayDeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsSetQueryParameters;
}

export interface ApigatewayDeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsFilterQueryParameters {
    items: outputs.ApigatewayDeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsFilterQueryParametersItem[];
    type: string;
}

export interface ApigatewayDeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsFilterQueryParametersItem {
    name: string;
}

export interface ApigatewayDeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsRenameQueryParameters {
    items: outputs.ApigatewayDeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsRenameQueryParametersItem[];
}

export interface ApigatewayDeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsRenameQueryParametersItem {
    from: string;
    to: string;
}

export interface ApigatewayDeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsSetQueryParameters {
    items: outputs.ApigatewayDeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsSetQueryParametersItem[];
}

export interface ApigatewayDeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsSetQueryParametersItem {
    ifExists: string;
    name: string;
    values: string[];
}

export interface ApigatewayDeploymentSpecificationRouteRequestPoliciesQueryParameterValidations {
    parameters?: outputs.ApigatewayDeploymentSpecificationRouteRequestPoliciesQueryParameterValidationsParameter[];
    validationMode: string;
}

export interface ApigatewayDeploymentSpecificationRouteRequestPoliciesQueryParameterValidationsParameter {
    name: string;
    required: boolean;
}

export interface ApigatewayDeploymentSpecificationRouteRequestPoliciesResponseCacheLookup {
    cacheKeyAdditions: string[];
    isEnabled: boolean;
    isPrivateCachingEnabled: boolean;
    type: string;
}

export interface ApigatewayDeploymentSpecificationRouteResponsePolicies {
    headerTransformations?: outputs.ApigatewayDeploymentSpecificationRouteResponsePoliciesHeaderTransformations;
    responseCacheStore?: outputs.ApigatewayDeploymentSpecificationRouteResponsePoliciesResponseCacheStore;
}

export interface ApigatewayDeploymentSpecificationRouteResponsePoliciesHeaderTransformations {
    filterHeaders?: outputs.ApigatewayDeploymentSpecificationRouteResponsePoliciesHeaderTransformationsFilterHeaders;
    renameHeaders?: outputs.ApigatewayDeploymentSpecificationRouteResponsePoliciesHeaderTransformationsRenameHeaders;
    setHeaders?: outputs.ApigatewayDeploymentSpecificationRouteResponsePoliciesHeaderTransformationsSetHeaders;
}

export interface ApigatewayDeploymentSpecificationRouteResponsePoliciesHeaderTransformationsFilterHeaders {
    items: outputs.ApigatewayDeploymentSpecificationRouteResponsePoliciesHeaderTransformationsFilterHeadersItem[];
    type: string;
}

export interface ApigatewayDeploymentSpecificationRouteResponsePoliciesHeaderTransformationsFilterHeadersItem {
    name: string;
}

export interface ApigatewayDeploymentSpecificationRouteResponsePoliciesHeaderTransformationsRenameHeaders {
    items: outputs.ApigatewayDeploymentSpecificationRouteResponsePoliciesHeaderTransformationsRenameHeadersItem[];
}

export interface ApigatewayDeploymentSpecificationRouteResponsePoliciesHeaderTransformationsRenameHeadersItem {
    from: string;
    to: string;
}

export interface ApigatewayDeploymentSpecificationRouteResponsePoliciesHeaderTransformationsSetHeaders {
    items: outputs.ApigatewayDeploymentSpecificationRouteResponsePoliciesHeaderTransformationsSetHeadersItem[];
}

export interface ApigatewayDeploymentSpecificationRouteResponsePoliciesHeaderTransformationsSetHeadersItem {
    ifExists: string;
    name: string;
    values: string[];
}

export interface ApigatewayDeploymentSpecificationRouteResponsePoliciesResponseCacheStore {
    timeToLiveInSeconds: number;
    type: string;
}

export interface ApigatewayDeploymentTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface ApigatewayGatewayCaBundle {
    caBundleId: string;
    certificateAuthorityId: string;
    type: string;
}

export interface ApigatewayGatewayIpAddress {
    ipAddress: string;
}

export interface ApigatewayGatewayResponseCacheDetails {
    authenticationSecretId: string;
    authenticationSecretVersionNumber: string;
    connectTimeoutInMs: number;
    isSslEnabled: boolean;
    isSslVerifyDisabled: boolean;
    readTimeoutInMs: number;
    sendTimeoutInMs: number;
    servers?: outputs.ApigatewayGatewayResponseCacheDetailsServer[];
    type: string;
}

export interface ApigatewayGatewayResponseCacheDetailsServer {
    host: string;
    port: number;
}

export interface ApigatewayGatewayTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface ApigatewaySubscriberClient {
    name: string;
    token: string;
}

export interface ApigatewaySubscriberTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface ApigatewayUsagePlanEntitlement {
    description: string;
    name: string;
    quota?: outputs.ApigatewayUsagePlanEntitlementQuota;
    rateLimit?: outputs.ApigatewayUsagePlanEntitlementRateLimit;
    targets?: outputs.ApigatewayUsagePlanEntitlementTarget[];
}

export interface ApigatewayUsagePlanEntitlementQuota {
    operationOnBreach: string;
    resetPolicy: string;
    unit: string;
    value: number;
}

export interface ApigatewayUsagePlanEntitlementRateLimit {
    unit: string;
    value: number;
}

export interface ApigatewayUsagePlanEntitlementTarget {
    deploymentId: string;
}

export interface ApigatewayUsagePlanTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface ApmApmDomainTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface ApmConfigConfigDimension {
    name: string;
    valueSource: string;
}

export interface ApmConfigConfigInUseBy {
    configType: string;
    displayName: string;
    id: string;
    optionsGroup: string;
}

export interface ApmConfigConfigMetric {
    description: string;
    name: string;
    unit: string;
    valueSource: string;
}

export interface ApmConfigConfigRule {
    displayName: string;
    filterText: string;
    isApplyToErrorSpans: boolean;
    isEnabled: boolean;
    priority: number;
    satisfiedResponseTime: number;
    toleratingResponseTime: number;
}

export interface ApmConfigConfigTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface ApmSyntheticsDedicatedVantagePointDvpStackDetails {
    dvpStackId: string;
    dvpStackType: string;
    dvpStreamId: string;
    dvpVersion: string;
}

export interface ApmSyntheticsDedicatedVantagePointMonitorStatusCountMap {
    disabled: number;
    enabled: number;
    invalid: number;
    total: number;
}

export interface ApmSyntheticsDedicatedVantagePointTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface ApmSyntheticsMonitorAvailabilityConfiguration {
    maxAllowedFailuresPerInterval: number;
    minAllowedRunsPerInterval: number;
}

export interface ApmSyntheticsMonitorConfiguration {
    clientCertificateDetails?: outputs.ApmSyntheticsMonitorConfigurationClientCertificateDetails;
    configType: string;
    connectionString: string;
    databaseAuthenticationDetails?: outputs.ApmSyntheticsMonitorConfigurationDatabaseAuthenticationDetails;
    databaseConnectionType: string;
    databaseRole: string;
    databaseType: string;
    databaseWalletDetails?: outputs.ApmSyntheticsMonitorConfigurationDatabaseWalletDetails;
    dnsConfiguration?: outputs.ApmSyntheticsMonitorConfigurationDnsConfiguration;
    downloadSizeLimitInBytes: number;
    ftpBasicAuthenticationDetails?: outputs.ApmSyntheticsMonitorConfigurationFtpBasicAuthenticationDetails;
    ftpProtocol: string;
    ftpRequestType: string;
    isActiveMode: boolean;
    isCertificateValidationEnabled: boolean;
    isDefaultSnapshotEnabled: boolean;
    isFailureRetried: boolean;
    isQueryRecursive: boolean;
    isRedirectionEnabled: boolean;
    nameServer: string;
    networkConfiguration?: outputs.ApmSyntheticsMonitorConfigurationNetworkConfiguration;
    protocol: string;
    query: string;
    recordType: string;
    reqAuthenticationDetails?: outputs.ApmSyntheticsMonitorConfigurationReqAuthenticationDetails;
    reqAuthenticationScheme: string;
    requestHeaders?: outputs.ApmSyntheticsMonitorConfigurationRequestHeader[];
    requestMethod: string;
    requestPostBody: string;
    requestQueryParams?: outputs.ApmSyntheticsMonitorConfigurationRequestQueryParam[];
    uploadFileSizeInBytes: number;
    verifyResponseCodes: string[];
    verifyResponseContent: string;
    verifyTexts?: outputs.ApmSyntheticsMonitorConfigurationVerifyText[];
}

export interface ApmSyntheticsMonitorConfigurationClientCertificateDetails {
    clientCertificate?: outputs.ApmSyntheticsMonitorConfigurationClientCertificateDetailsClientCertificate;
    privateKey?: outputs.ApmSyntheticsMonitorConfigurationClientCertificateDetailsPrivateKey;
}

export interface ApmSyntheticsMonitorConfigurationClientCertificateDetailsClientCertificate {
    content: string;
    fileName: string;
}

export interface ApmSyntheticsMonitorConfigurationClientCertificateDetailsPrivateKey {
    content: string;
    fileName: string;
}

export interface ApmSyntheticsMonitorConfigurationDatabaseAuthenticationDetails {
    password?: outputs.ApmSyntheticsMonitorConfigurationDatabaseAuthenticationDetailsPassword;
    username: string;
}

export interface ApmSyntheticsMonitorConfigurationDatabaseAuthenticationDetailsPassword {
    password: string;
    passwordType: string;
    vaultSecretId: string;
}

export interface ApmSyntheticsMonitorConfigurationDatabaseWalletDetails {
    databaseWallet: string;
    serviceName: string;
}

export interface ApmSyntheticsMonitorConfigurationDnsConfiguration {
    isOverrideDns: boolean;
    overrideDnsIp: string;
}

export interface ApmSyntheticsMonitorConfigurationFtpBasicAuthenticationDetails {
    password?: outputs.ApmSyntheticsMonitorConfigurationFtpBasicAuthenticationDetailsPassword;
    username: string;
}

export interface ApmSyntheticsMonitorConfigurationFtpBasicAuthenticationDetailsPassword {
    password: string;
    passwordType: string;
    vaultSecretId: string;
}

export interface ApmSyntheticsMonitorConfigurationNetworkConfiguration {
    numberOfHops: number;
    probeMode: string;
    probePerHop: number;
    protocol: string;
    transmissionRate: number;
}

export interface ApmSyntheticsMonitorConfigurationReqAuthenticationDetails {
    authHeaders?: outputs.ApmSyntheticsMonitorConfigurationReqAuthenticationDetailsAuthHeader[];
    authRequestMethod: string;
    authRequestPostBody: string;
    authToken: string;
    authUrl: string;
    authUserName: string;
    authUserPassword: string;
    oauthScheme: string;
}

export interface ApmSyntheticsMonitorConfigurationReqAuthenticationDetailsAuthHeader {
    headerName: string;
    headerValue: string;
}

export interface ApmSyntheticsMonitorConfigurationRequestHeader {
    headerName: string;
    headerValue: string;
}

export interface ApmSyntheticsMonitorConfigurationRequestQueryParam {
    paramName: string;
    paramValue: string;
}

export interface ApmSyntheticsMonitorConfigurationVerifyText {
    text: string;
}

export interface ApmSyntheticsMonitorMaintenanceWindowSchedule {
    timeEnded: string;
    timeStarted: string;
}

export interface ApmSyntheticsMonitorScriptParameter {
    isOverwritten: boolean;
    isSecret: boolean;
    monitorScriptParameters: outputs.ApmSyntheticsMonitorScriptParameterMonitorScriptParameter[];
    paramName: string;
    paramValue: string;
}

export interface ApmSyntheticsMonitorScriptParameterMonitorScriptParameter {
    paramName: string;
    paramValue: string;
}

export interface ApmSyntheticsMonitorTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface ApmSyntheticsMonitorVantagePoint {
    displayName: string;
    name: string;
    workerLists: string[];
}

export interface ApmSyntheticsOnPremiseVantagePointTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface ApmSyntheticsOnPremiseVantagePointWorkerIdentityInfo {
    apmShortId: string;
    collectorEndPoint: string;
    regionName: string;
}

export interface ApmSyntheticsOnPremiseVantagePointWorkerMonitorList {
    displayName: string;
    id: string;
    isRunNow: boolean;
    monitorType: string;
    timeAssigned: string;
}

export interface ApmSyntheticsOnPremiseVantagePointWorkerTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface ApmSyntheticsOnPremiseVantagePointWorkerVersionDetail {
    latestVersion: string;
    minSupportedVersion: string;
    version: string;
}

export interface ApmSyntheticsOnPremiseVantagePointWorkersSummary {
    available: number;
    availableCapabilities: outputs.ApmSyntheticsOnPremiseVantagePointWorkersSummaryAvailableCapability[];
    disabled: number;
    minVersion: string;
    total: number;
    used: number;
}

export interface ApmSyntheticsOnPremiseVantagePointWorkersSummaryAvailableCapability {
    capability: string;
    onPremiseVantagePointCount: number;
}

export interface ApmSyntheticsScriptMonitorStatusCountMap {
    disabled: number;
    enabled: number;
    invalid: number;
    total: number;
}

export interface ApmSyntheticsScriptParameter {
    isOverwritten: boolean;
    isSecret: boolean;
    paramName: string;
    paramValue: string;
    scriptParameters: outputs.ApmSyntheticsScriptParameterScriptParameter[];
}

export interface ApmSyntheticsScriptParameterScriptParameter {
    isSecret: boolean;
    paramName: string;
    paramValue: string;
}

export interface ApmSyntheticsScriptTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface AppmgmtControlMonitorPluginManagementTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface ArtifactsContainerConfigurationTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface ArtifactsContainerImageSignatureTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface ArtifactsContainerRepositoryReadme {
    content: string;
    format: string;
}

export interface ArtifactsContainerRepositoryTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface ArtifactsGenericArtifactTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface ArtifactsRepositoryTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface AuditConfigurationTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface AutoscalingAutoScalingConfigurationAutoScalingResources {
    id: string;
    type: string;
}

export interface AutoscalingAutoScalingConfigurationPolicy {
    capacity?: outputs.AutoscalingAutoScalingConfigurationPolicyCapacity;
    displayName: string;
    executionSchedule?: outputs.AutoscalingAutoScalingConfigurationPolicyExecutionSchedule;
    id: string;
    isEnabled: boolean;
    policyType: string;
    resourceAction?: outputs.AutoscalingAutoScalingConfigurationPolicyResourceAction;
    rules?: outputs.AutoscalingAutoScalingConfigurationPolicyRule[];
    timeCreated: string;
}

export interface AutoscalingAutoScalingConfigurationPolicyCapacity {
    initial: number;
    max: number;
    min: number;
}

export interface AutoscalingAutoScalingConfigurationPolicyExecutionSchedule {
    expression: string;
    timezone: string;
    type: string;
}

export interface AutoscalingAutoScalingConfigurationPolicyResourceAction {
    action: string;
    actionType: string;
}

export interface AutoscalingAutoScalingConfigurationPolicyRule {
    action?: outputs.AutoscalingAutoScalingConfigurationPolicyRuleAction;
    displayName: string;
    id: string;
    metric?: outputs.AutoscalingAutoScalingConfigurationPolicyRuleMetric;
}

export interface AutoscalingAutoScalingConfigurationPolicyRuleAction {
    type: string;
    value: number;
}

export interface AutoscalingAutoScalingConfigurationPolicyRuleMetric {
    metricType: string;
    threshold?: outputs.AutoscalingAutoScalingConfigurationPolicyRuleMetricThreshold;
}

export interface AutoscalingAutoScalingConfigurationPolicyRuleMetricThreshold {
    operator: string;
    value: number;
}

export interface AutoscalingAutoScalingConfigurationTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface BastionBastionTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface BastionSessionKeyDetails {
    publicKeyContent: string;
}

export interface BastionSessionTargetResourceDetails {
    sessionType: string;
    targetResourceDisplayName: string;
    targetResourceFqdn: string;
    targetResourceId: string;
    targetResourceOperatingSystemUserName: string;
    targetResourcePort: number;
    targetResourcePrivateIpAddress: string;
}

export interface BastionSessionTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface BdsAutoScalingConfigurationPolicy {
    policyType: string;
    rules: outputs.BdsAutoScalingConfigurationPolicyRule[];
}

export interface BdsAutoScalingConfigurationPolicyDetails {
    actionType: string;
    policyType: string;
    scaleDownConfig?: outputs.BdsAutoScalingConfigurationPolicyDetailsScaleDownConfig;
    scaleInConfig?: outputs.BdsAutoScalingConfigurationPolicyDetailsScaleInConfig;
    scaleOutConfig?: outputs.BdsAutoScalingConfigurationPolicyDetailsScaleOutConfig;
    scaleUpConfig?: outputs.BdsAutoScalingConfigurationPolicyDetailsScaleUpConfig;
    scheduleDetails?: outputs.BdsAutoScalingConfigurationPolicyDetailsScheduleDetail[];
    timezone: string;
    triggerType: string;
}

export interface BdsAutoScalingConfigurationPolicyDetailsScaleDownConfig {
    memoryStepSize: number;
    metric?: outputs.BdsAutoScalingConfigurationPolicyDetailsScaleDownConfigMetric;
    minMemoryPerNode: number;
    minOcpusPerNode: number;
    ocpuStepSize: number;
}

export interface BdsAutoScalingConfigurationPolicyDetailsScaleDownConfigMetric {
    metricType: string;
    threshold?: outputs.BdsAutoScalingConfigurationPolicyDetailsScaleDownConfigMetricThreshold;
}

export interface BdsAutoScalingConfigurationPolicyDetailsScaleDownConfigMetricThreshold {
    durationInMinutes: number;
    operator: string;
    value: number;
}

export interface BdsAutoScalingConfigurationPolicyDetailsScaleInConfig {
    metric?: outputs.BdsAutoScalingConfigurationPolicyDetailsScaleInConfigMetric;
    minNodeCount: number;
    stepSize: number;
}

export interface BdsAutoScalingConfigurationPolicyDetailsScaleInConfigMetric {
    metricType: string;
    threshold?: outputs.BdsAutoScalingConfigurationPolicyDetailsScaleInConfigMetricThreshold;
}

export interface BdsAutoScalingConfigurationPolicyDetailsScaleInConfigMetricThreshold {
    durationInMinutes: number;
    operator: string;
    value: number;
}

export interface BdsAutoScalingConfigurationPolicyDetailsScaleOutConfig {
    maxNodeCount: number;
    metric?: outputs.BdsAutoScalingConfigurationPolicyDetailsScaleOutConfigMetric;
    stepSize: number;
}

export interface BdsAutoScalingConfigurationPolicyDetailsScaleOutConfigMetric {
    metricType: string;
    threshold?: outputs.BdsAutoScalingConfigurationPolicyDetailsScaleOutConfigMetricThreshold;
}

export interface BdsAutoScalingConfigurationPolicyDetailsScaleOutConfigMetricThreshold {
    durationInMinutes: number;
    operator: string;
    value: number;
}

export interface BdsAutoScalingConfigurationPolicyDetailsScaleUpConfig {
    maxMemoryPerNode: number;
    maxOcpusPerNode: number;
    memoryStepSize: number;
    metric?: outputs.BdsAutoScalingConfigurationPolicyDetailsScaleUpConfigMetric;
    ocpuStepSize: number;
}

export interface BdsAutoScalingConfigurationPolicyDetailsScaleUpConfigMetric {
    metricType: string;
    threshold?: outputs.BdsAutoScalingConfigurationPolicyDetailsScaleUpConfigMetricThreshold;
}

export interface BdsAutoScalingConfigurationPolicyDetailsScaleUpConfigMetricThreshold {
    durationInMinutes: number;
    operator: string;
    value: number;
}

export interface BdsAutoScalingConfigurationPolicyDetailsScheduleDetail {
    scheduleType: string;
    timeAndHorizontalScalingConfigs?: outputs.BdsAutoScalingConfigurationPolicyDetailsScheduleDetailTimeAndHorizontalScalingConfig[];
    timeAndVerticalScalingConfigs?: outputs.BdsAutoScalingConfigurationPolicyDetailsScheduleDetailTimeAndVerticalScalingConfig[];
}

export interface BdsAutoScalingConfigurationPolicyDetailsScheduleDetailTimeAndHorizontalScalingConfig {
    targetNodeCount: number;
    timeRecurrence: string;
}

export interface BdsAutoScalingConfigurationPolicyDetailsScheduleDetailTimeAndVerticalScalingConfig {
    targetMemoryPerNode: number;
    targetOcpusPerNode: number;
    targetShape: string;
    timeRecurrence: string;
}

export interface BdsAutoScalingConfigurationPolicyRule {
    action: string;
    metric: outputs.BdsAutoScalingConfigurationPolicyRuleMetric;
}

export interface BdsAutoScalingConfigurationPolicyRuleMetric {
    metricType: string;
    threshold: outputs.BdsAutoScalingConfigurationPolicyRuleMetricThreshold;
}

export interface BdsAutoScalingConfigurationPolicyRuleMetricThreshold {
    durationInMinutes: number;
    operator: string;
    value: number;
}

export interface BdsAutoScalingConfigurationTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface BdsBdsInstanceApiKeyTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface BdsBdsInstanceCloudSqlDetail {
    blockVolumeSizeInGbs: string;
    ipAddress: string;
    isKerberosMappedToDatabaseUsers: boolean;
    kerberosDetails: outputs.BdsBdsInstanceCloudSqlDetailKerberosDetail[];
    memoryInGbs: number;
    nvmes: number;
    ocpus: number;
    shape: string;
}

export interface BdsBdsInstanceCloudSqlDetailKerberosDetail {
    keytabFile: string;
    principalName: string;
}

export interface BdsBdsInstanceClusterDetail {
    ambariUrl: string;
    bdCellVersion: string;
    bdaVersion: string;
    bdmVersion: string;
    bdsVersion: string;
    bigDataManagerUrl: string;
    clouderaManagerUrl: string;
    csqlCellVersion: string;
    dbVersion: string;
    hueServerUrl: string;
    jupyterHubUrl: string;
    odhVersion: string;
    osVersion: string;
    timeCreated: string;
    timeRefreshed: string;
}

export interface BdsBdsInstanceComputeOnlyWorkerNode {
    blockVolumeSizeInGbs?: string;
    numberOfNodes: number;
    shape: string;
    shapeConfig?: outputs.BdsBdsInstanceComputeOnlyWorkerNodeShapeConfig;
    subnetId: string;
}

export interface BdsBdsInstanceComputeOnlyWorkerNodeShapeConfig {
    memoryInGbs?: number;
    nvmes: number;
    ocpus?: number;
}

export interface BdsBdsInstanceEdgeNode {
    blockVolumeSizeInGbs?: string;
    numberOfNodes: number;
    shape: string;
    shapeConfig?: outputs.BdsBdsInstanceEdgeNodeShapeConfig;
    subnetId: string;
}

export interface BdsBdsInstanceEdgeNodeShapeConfig {
    memoryInGbs?: number;
    nvmes: number;
    ocpus?: number;
}

export interface BdsBdsInstanceKafkaBrokerNode {
    blockVolumeSizeInGbs?: string;
    numberOfKafkaNodes: number;
    shape: string;
    shapeConfig?: outputs.BdsBdsInstanceKafkaBrokerNodeShapeConfig;
    subnetId: string;
}

export interface BdsBdsInstanceKafkaBrokerNodeShapeConfig {
    memoryInGbs?: number;
    nvmes: number;
    ocpus?: number;
}

export interface BdsBdsInstanceMasterNode {
    blockVolumeSizeInGbs?: string;
    numberOfNodes: number;
    shape: string;
    shapeConfig?: outputs.BdsBdsInstanceMasterNodeShapeConfig;
    subnetId: string;
}

export interface BdsBdsInstanceMasterNodeShapeConfig {
    memoryInGbs?: number;
    nvmes: number;
    ocpus?: number;
}

export interface BdsBdsInstanceMetastoreConfigTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface BdsBdsInstanceNetworkConfig {
    cidrBlock: string;
    isNatGatewayRequired: boolean;
}

export interface BdsBdsInstanceNode {
    attachedBlockVolumes: outputs.BdsBdsInstanceNodeAttachedBlockVolume[];
    availabilityDomain: string;
    displayName: string;
    faultDomain: string;
    hostname: string;
    imageId: string;
    instanceId: string;
    ipAddress: string;
    isRebootRequired: boolean;
    localDisksTotalSizeInGbs: number;
    memoryInGbs: number;
    nodeType: string;
    nvmes: number;
    ocpus: number;
    osVersion: string;
    shape: string;
    sshFingerprint: string;
    state: string;
    subnetId: string;
    timeCreated: string;
    timeMaintenanceRebootDue: string;
}

export interface BdsBdsInstanceNodeAttachedBlockVolume {
    volumeAttachmentId: string;
    volumeSizeInGbs: string;
}

export interface BdsBdsInstanceOperationCertificateManagementsManagementHostCertDetail {
    certificate: string;
    hostName: string;
    privateKey: string;
}

export interface BdsBdsInstanceOperationCertificateManagementsManagementTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface BdsBdsInstanceOsPatchActionPatchingConfigs {
    batchSize: number;
    patchingConfigStrategy: string;
    toleranceThresholdPerBatch: number;
    toleranceThresholdPerDomain: number;
    waitTimeBetweenBatchInSeconds: number;
    waitTimeBetweenDomainInSeconds: number;
}

export interface BdsBdsInstanceOsPatchActionTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface BdsBdsInstancePatchActionPatchingConfig {
    batchSize: number;
    patchingConfigStrategy: string;
    waitTimeBetweenBatchInSeconds: number;
    waitTimeBetweenDomainInSeconds: number;
}

export interface BdsBdsInstancePatchActionTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface BdsBdsInstanceTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface BdsBdsInstanceUtilNode {
    blockVolumeSizeInGbs?: string;
    numberOfNodes: number;
    shape: string;
    shapeConfig?: outputs.BdsBdsInstanceUtilNodeShapeConfig;
    subnetId: string;
}

export interface BdsBdsInstanceUtilNodeShapeConfig {
    memoryInGbs?: number;
    nvmes: number;
    ocpus?: number;
}

export interface BdsBdsInstanceWorkerNode {
    blockVolumeSizeInGbs?: string;
    numberOfNodes: number;
    shape: string;
    shapeConfig?: outputs.BdsBdsInstanceWorkerNodeShapeConfig;
    subnetId: string;
}

export interface BdsBdsInstanceWorkerNodeShapeConfig {
    memoryInGbs?: number;
    nvmes: number;
    ocpus?: number;
}

export interface BlockchainBlockchainPlatformComponentDetail {
    osns: outputs.BlockchainBlockchainPlatformComponentDetailOsn[];
    peers: outputs.BlockchainBlockchainPlatformComponentDetailPeer[];
}

export interface BlockchainBlockchainPlatformComponentDetailOsn {
    ad: string;
    ocpuAllocationParams: outputs.BlockchainBlockchainPlatformComponentDetailOsnOcpuAllocationParam[];
    osnKey: string;
    state: string;
}

export interface BlockchainBlockchainPlatformComponentDetailOsnOcpuAllocationParam {
    ocpuAllocationNumber: number;
}

export interface BlockchainBlockchainPlatformComponentDetailPeer {
    ad: string;
    alias: string;
    host: string;
    ocpuAllocationParams: outputs.BlockchainBlockchainPlatformComponentDetailPeerOcpuAllocationParam[];
    peerKey: string;
    role: string;
    state: string;
}

export interface BlockchainBlockchainPlatformComponentDetailPeerOcpuAllocationParam {
    ocpuAllocationNumber: number;
}

export interface BlockchainBlockchainPlatformHostOcpuUtilizationInfo {
    host: string;
    ocpuCapacityNumber: number;
    ocpuUtilizationNumber: number;
}

export interface BlockchainBlockchainPlatformReplicas {
    caCount: number;
    consoleCount: number;
    proxyCount: number;
}

export interface BlockchainBlockchainPlatformTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface BlockchainOsnOcpuAllocationParam {
    ocpuAllocationNumber: number;
}

export interface BlockchainOsnTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface BlockchainPeerOcpuAllocationParam {
    ocpuAllocationNumber: number;
}

export interface BlockchainPeerTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface BudgetAlertRuleTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface BudgetBudgetTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface CapacityManagementOccAvailabilityCatalogDetail {
    availableQuantity: string;
    catalogId: string;
    dateExpectedCapacityHandover: string;
    dateFinalCustomerOrder: string;
    namespace: string;
    resourceName: string;
    resourceType: string;
    unit: string;
    workloadType: string;
}

export interface CapacityManagementOccAvailabilityCatalogMetadataDetails {
    formatVersion: string;
}

export interface CapacityManagementOccAvailabilityCatalogTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface CapacityManagementOccCapacityRequestDetail {
    actualHandoverQuantity: string;
    dateActualHandover: string;
    dateExpectedHandover: string;
    demandQuantity: string;
    expectedHandoverQuantity: string;
    resourceName: string;
    resourceType: string;
    workloadType: string;
}

export interface CapacityManagementOccCapacityRequestPatchOperation {
    from: string;
    operation: string;
    position?: string;
    selectedItem?: string;
    selection: string;
    value: {[key: string]: string};
}

export interface CapacityManagementOccCapacityRequestTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface CertificatesManagementCaBundleTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface CertificatesManagementCertificateAuthorityCertificateAuthorityConfig {
    configType: string;
    issuerCertificateAuthorityId?: string;
    signingAlgorithm?: string;
    subject: outputs.CertificatesManagementCertificateAuthorityCertificateAuthorityConfigSubject;
    validity?: outputs.CertificatesManagementCertificateAuthorityCertificateAuthorityConfigValidity;
    versionName?: string;
}

export interface CertificatesManagementCertificateAuthorityCertificateAuthorityConfigSubject {
    commonName: string;
    country?: string;
    distinguishedNameQualifier?: string;
    domainComponent?: string;
    generationQualifier?: string;
    givenName?: string;
    initials?: string;
    localityName?: string;
    organization?: string;
    organizationalUnit?: string;
    pseudonym?: string;
    serialNumber?: string;
    stateOrProvinceName?: string;
    street?: string;
    surname?: string;
    title?: string;
    userId?: string;
}

export interface CertificatesManagementCertificateAuthorityCertificateAuthorityConfigValidity {
    timeOfValidityNotAfter: string;
    timeOfValidityNotBefore?: string;
}

export interface CertificatesManagementCertificateAuthorityCertificateAuthorityRule {
    certificateAuthorityMaxValidityDuration?: string;
    leafCertificateMaxValidityDuration?: string;
    ruleType: string;
}

export interface CertificatesManagementCertificateAuthorityCertificateRevocationListDetails {
    customFormattedUrls: string[];
    objectStorageConfig: outputs.CertificatesManagementCertificateAuthorityCertificateRevocationListDetailsObjectStorageConfig;
}

export interface CertificatesManagementCertificateAuthorityCertificateRevocationListDetailsObjectStorageConfig {
    objectStorageBucketName: string;
    objectStorageNamespace: string;
    objectStorageObjectNameFormat: string;
}

export interface CertificatesManagementCertificateAuthorityCurrentVersion {
    certificateAuthorityId: string;
    issuerCaVersionNumber: string;
    revocationStatuses: outputs.CertificatesManagementCertificateAuthorityCurrentVersionRevocationStatus[];
    serialNumber: string;
    stages: string[];
    timeCreated: string;
    timeOfDeletion: string;
    validities: outputs.CertificatesManagementCertificateAuthorityCurrentVersionValidity[];
    versionName: string;
    versionNumber: string;
}

export interface CertificatesManagementCertificateAuthorityCurrentVersionRevocationStatus {
    revocationReason: string;
    timeOfRevocation: string;
}

export interface CertificatesManagementCertificateAuthorityCurrentVersionValidity {
    timeOfValidityNotAfter: string;
    timeOfValidityNotBefore: string;
}

export interface CertificatesManagementCertificateAuthoritySubject {
    commonName: string;
    country: string;
    distinguishedNameQualifier: string;
    domainComponent: string;
    generationQualifier: string;
    givenName: string;
    initials: string;
    localityName: string;
    organization: string;
    organizationalUnit: string;
    pseudonym: string;
    serialNumber: string;
    stateOrProvinceName: string;
    street: string;
    surname: string;
    title: string;
    userId: string;
}

export interface CertificatesManagementCertificateAuthorityTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface CertificatesManagementCertificateCertificateConfig {
    certificateProfileType?: string;
    configType: string;
    csrPem?: string;
    issuerCertificateAuthorityId?: string;
    keyAlgorithm: string;
    signatureAlgorithm: string;
    subject?: outputs.CertificatesManagementCertificateCertificateConfigSubject;
    subjectAlternativeNames?: outputs.CertificatesManagementCertificateCertificateConfigSubjectAlternativeName[];
    validity?: outputs.CertificatesManagementCertificateCertificateConfigValidity;
    versionName?: string;
}

export interface CertificatesManagementCertificateCertificateConfigSubject {
    commonName: string;
    country?: string;
    distinguishedNameQualifier?: string;
    domainComponent?: string;
    generationQualifier?: string;
    givenName?: string;
    initials?: string;
    localityName?: string;
    organization?: string;
    organizationalUnit?: string;
    pseudonym?: string;
    serialNumber?: string;
    stateOrProvinceName?: string;
    street?: string;
    surname?: string;
    title?: string;
    userId?: string;
}

export interface CertificatesManagementCertificateCertificateConfigSubjectAlternativeName {
    type: string;
    value: string;
}

export interface CertificatesManagementCertificateCertificateConfigValidity {
    timeOfValidityNotAfter: string;
    timeOfValidityNotBefore?: string;
}

export interface CertificatesManagementCertificateCertificateRevocationListDetail {
    customFormattedUrls: string[];
    objectStorageConfigs: outputs.CertificatesManagementCertificateCertificateRevocationListDetailObjectStorageConfig[];
}

export interface CertificatesManagementCertificateCertificateRevocationListDetailObjectStorageConfig {
    objectStorageBucketName: string;
    objectStorageNamespace: string;
    objectStorageObjectNameFormat: string;
}

export interface CertificatesManagementCertificateCertificateRule {
    advanceRenewalPeriod: string;
    renewalInterval: string;
    ruleType: string;
}

export interface CertificatesManagementCertificateCurrentVersion {
    certificateId: string;
    issuerCaVersionNumber: string;
    revocationStatuses: outputs.CertificatesManagementCertificateCurrentVersionRevocationStatus[];
    serialNumber: string;
    stages: string[];
    subjectAlternativeNames: outputs.CertificatesManagementCertificateCurrentVersionSubjectAlternativeName[];
    timeCreated: string;
    timeOfDeletion: string;
    validities: outputs.CertificatesManagementCertificateCurrentVersionValidity[];
    versionName: string;
    versionNumber: string;
}

export interface CertificatesManagementCertificateCurrentVersionRevocationStatus {
    revocationReason: string;
    timeOfRevocation: string;
}

export interface CertificatesManagementCertificateCurrentVersionSubjectAlternativeName {
    type: string;
    value: string;
}

export interface CertificatesManagementCertificateCurrentVersionValidity {
    timeOfValidityNotAfter: string;
    timeOfValidityNotBefore: string;
}

export interface CertificatesManagementCertificateSubject {
    commonName: string;
    country: string;
    distinguishedNameQualifier: string;
    domainComponent: string;
    generationQualifier: string;
    givenName: string;
    initials: string;
    localityName: string;
    organization: string;
    organizationalUnit: string;
    pseudonym: string;
    serialNumber: string;
    stateOrProvinceName: string;
    street: string;
    surname: string;
    title: string;
    userId: string;
}

export interface CertificatesManagementCertificateTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface CloudBridgeAgentDependencyTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface CloudBridgeAgentPluginList {
    agentId: string;
    definedTags: {[key: string]: string};
    freeformTags: {[key: string]: string};
    lifecycleDetails: string;
    name: string;
    pluginVersion: string;
    state: string;
    timeCreated: string;
    timeUpdated: string;
}

export interface CloudBridgeAgentPluginTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface CloudBridgeAgentTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface CloudBridgeAssetCompute {
    connectedNetworks: number;
    coresCount: number;
    cpuModel: string;
    description: string;
    disks?: outputs.CloudBridgeAssetComputeDisk[];
    disksCount: number;
    dnsName: string;
    firmware: string;
    gpuDevices?: outputs.CloudBridgeAssetComputeGpuDevice[];
    gpuDevicesCount: number;
    guestState: string;
    hardwareVersion: string;
    hostName: string;
    isPmemEnabled: boolean;
    isTpmEnabled: boolean;
    latencySensitivity: string;
    memoryInMbs: string;
    nics?: outputs.CloudBridgeAssetComputeNic[];
    nicsCount: number;
    nvdimmController?: outputs.CloudBridgeAssetComputeNvdimmController;
    nvdimms?: outputs.CloudBridgeAssetComputeNvdimm[];
    operatingSystem: string;
    operatingSystemVersion: string;
    pmemInMbs: string;
    powerState: string;
    primaryIp: string;
    scsiController?: outputs.CloudBridgeAssetComputeScsiController;
    storageProvisionedInMbs: string;
    threadsPerCoreCount: number;
}

export interface CloudBridgeAssetComputeDisk {
    bootOrder: number;
    location: string;
    name: string;
    persistentMode: string;
    sizeInMbs: string;
    uuid: string;
    uuidLun: string;
}

export interface CloudBridgeAssetComputeGpuDevice {
    coresCount: number;
    description: string;
    manufacturer: string;
    memoryInMbs: string;
    name: string;
}

export interface CloudBridgeAssetComputeNic {
    ipAddresses: string[];
    label: string;
    macAddress: string;
    macAddressType: string;
    networkName: string;
    switchName: string;
}

export interface CloudBridgeAssetComputeNvdimm {
    controllerKey: number;
    label: string;
    unitNumber: number;
}

export interface CloudBridgeAssetComputeNvdimmController {
    busNumber: number;
    label: string;
}

export interface CloudBridgeAssetComputeScsiController {
    label: string;
    sharedBus: string;
    unitNumber: number;
}

export interface CloudBridgeAssetSourceDiscoveryCredentials {
    secretId: string;
    type: string;
}

export interface CloudBridgeAssetSourceReplicationCredentials {
    secretId: string;
    type: string;
}

export interface CloudBridgeAssetSourceTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface CloudBridgeAssetTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface CloudBridgeAssetVm {
    hypervisorHost: string;
    hypervisorVendor: string;
    hypervisorVersion: string;
}

export interface CloudBridgeAssetVmwareVcenter {
    dataCenter: string;
    vcenterKey: string;
    vcenterVersion: string;
}

export interface CloudBridgeAssetVmwareVm {
    cluster: string;
    customerFields: string[];
    customerTags?: outputs.CloudBridgeAssetVmwareVmCustomerTag[];
    faultToleranceBandwidth: number;
    faultToleranceSecondaryLatency: number;
    faultToleranceState: string;
    instanceUuid: string;
    isDisksCbtEnabled: boolean;
    isDisksUuidEnabled: boolean;
    path: string;
    vmwareToolsStatus: string;
}

export interface CloudBridgeAssetVmwareVmCustomerTag {
    description: string;
    name: string;
}

export interface CloudBridgeDiscoveryScheduleTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface CloudBridgeEnvironmentTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface CloudBridgeInventoryTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface CloudGuardAdhocQueryAdhocQueryDetails {
    adhocQueryResources: outputs.CloudGuardAdhocQueryAdhocQueryDetailsAdhocQueryResource[];
    query: string;
}

export interface CloudGuardAdhocQueryAdhocQueryDetailsAdhocQueryResource {
    region: string;
    resourceIds: string[];
    resourceType: string;
}

export interface CloudGuardAdhocQueryAdhocQueryRegionalDetail {
    expectedCount: string;
    expiredCount: string;
    failedCount: string;
    region: string;
    regionalError: string;
    regionalStatus: string;
    succeededCount: string;
}

export interface CloudGuardAdhocQueryTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface CloudGuardCloudGuardConfigurationTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface CloudGuardDataMaskRuleTargetSelected {
    kind: string;
    values: string[];
}

export interface CloudGuardDataMaskRuleTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface CloudGuardDataSourceDataSourceDetails {
    additionalEntitiesCount: number;
    dataSourceFeedProvider: string;
    description: string;
    intervalInMinutes: number;
    intervalInSeconds: number;
    loggingQueryDetails?: outputs.CloudGuardDataSourceDataSourceDetailsLoggingQueryDetails;
    loggingQueryType: string;
    operator: string;
    query: string;
    queryStartTime?: outputs.CloudGuardDataSourceDataSourceDetailsQueryStartTime;
    regions: string[];
    scheduledQueryScopeDetails?: outputs.CloudGuardDataSourceDataSourceDetailsScheduledQueryScopeDetail[];
    threshold: number;
}

export interface CloudGuardDataSourceDataSourceDetailsLoggingQueryDetails {
    keyEntitiesCount: number;
    loggingQueryType: string;
}

export interface CloudGuardDataSourceDataSourceDetailsQueryStartTime {
    queryStartTime: string;
    startPolicyType: string;
}

export interface CloudGuardDataSourceDataSourceDetailsScheduledQueryScopeDetail {
    region: string;
    resourceIds: string[];
    resourceType: string;
}

export interface CloudGuardDataSourceDataSourceDetectorMappingInfo {
    detectorRecipeId: string;
    detectorRuleId: string;
}

export interface CloudGuardDataSourceRegionStatusDetail {
    region: string;
    status: string;
}

export interface CloudGuardDataSourceTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface CloudGuardDetectorRecipeDetectorRule {
    candidateResponderRules: outputs.CloudGuardDetectorRecipeDetectorRuleCandidateResponderRule[];
    dataSourceId: string;
    description: string;
    details: outputs.CloudGuardDetectorRecipeDetectorRuleDetails;
    detector: string;
    detectorRuleId: string;
    displayName: string;
    entitiesMappings: outputs.CloudGuardDetectorRecipeDetectorRuleEntitiesMapping[];
    lifecycleDetails: string;
    managedListTypes: string[];
    recommendation: string;
    resourceType: string;
    serviceType: string;
    state: string;
    timeCreated: string;
    timeUpdated: string;
}

export interface CloudGuardDetectorRecipeDetectorRuleCandidateResponderRule {
    displayName: string;
    id: string;
    isPreferred: boolean;
}

export interface CloudGuardDetectorRecipeDetectorRuleDetails {
    condition: string;
    configurations?: outputs.CloudGuardDetectorRecipeDetectorRuleDetailsConfiguration[];
    dataSourceId: string;
    description: string;
    entitiesMappings?: outputs.CloudGuardDetectorRecipeDetectorRuleDetailsEntitiesMapping[];
    isConfigurationAllowed: boolean;
    isEnabled: boolean;
    labels: string[];
    recommendation: string;
    riskLevel: string;
}

export interface CloudGuardDetectorRecipeDetectorRuleDetailsConfiguration {
    configKey: string;
    dataType: string;
    name: string;
    value: string;
    values?: outputs.CloudGuardDetectorRecipeDetectorRuleDetailsConfigurationValue[];
}

export interface CloudGuardDetectorRecipeDetectorRuleDetailsConfigurationValue {
    listType: string;
    managedListType: string;
    value: string;
}

export interface CloudGuardDetectorRecipeDetectorRuleDetailsEntitiesMapping {
    displayName: string;
    entityType: string;
    queryField: string;
}

export interface CloudGuardDetectorRecipeDetectorRuleEntitiesMapping {
    displayName: string;
    entityType: string;
    queryField: string;
}

export interface CloudGuardDetectorRecipeEffectiveDetectorRule {
    candidateResponderRules: outputs.CloudGuardDetectorRecipeEffectiveDetectorRuleCandidateResponderRule[];
    dataSourceId: string;
    description: string;
    details: outputs.CloudGuardDetectorRecipeEffectiveDetectorRuleDetail[];
    detector: string;
    detectorRuleId: string;
    displayName: string;
    entitiesMappings: outputs.CloudGuardDetectorRecipeEffectiveDetectorRuleEntitiesMapping[];
    lifecycleDetails: string;
    managedListTypes: string[];
    recommendation: string;
    resourceType: string;
    serviceType: string;
    state: string;
    timeCreated: string;
    timeUpdated: string;
}

export interface CloudGuardDetectorRecipeEffectiveDetectorRuleCandidateResponderRule {
    displayName: string;
    id: string;
    isPreferred: boolean;
}

export interface CloudGuardDetectorRecipeEffectiveDetectorRuleDetail {
    condition: string;
    configurations: outputs.CloudGuardDetectorRecipeEffectiveDetectorRuleDetailConfiguration[];
    dataSourceId: string;
    description: string;
    entitiesMappings: outputs.CloudGuardDetectorRecipeEffectiveDetectorRuleDetailEntitiesMapping[];
    isConfigurationAllowed: boolean;
    isEnabled: boolean;
    labels: string[];
    recommendation: string;
    riskLevel: string;
}

export interface CloudGuardDetectorRecipeEffectiveDetectorRuleDetailConfiguration {
    configKey: string;
    dataType: string;
    name: string;
    value: string;
    values: outputs.CloudGuardDetectorRecipeEffectiveDetectorRuleDetailConfigurationValue[];
}

export interface CloudGuardDetectorRecipeEffectiveDetectorRuleDetailConfigurationValue {
    listType: string;
    managedListType: string;
    value: string;
}

export interface CloudGuardDetectorRecipeEffectiveDetectorRuleDetailEntitiesMapping {
    displayName: string;
    entityType: string;
    queryField: string;
}

export interface CloudGuardDetectorRecipeEffectiveDetectorRuleEntitiesMapping {
    displayName: string;
    entityType: string;
    queryField: string;
}

export interface CloudGuardDetectorRecipeTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface CloudGuardManagedListTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface CloudGuardResponderRecipeEffectiveResponderRule {
    compartmentId: string;
    description: string;
    details: outputs.CloudGuardResponderRecipeEffectiveResponderRuleDetail[];
    displayName: string;
    lifecycleDetails: string;
    policies: string[];
    responderRuleId: string;
    state: string;
    supportedModes: string[];
    timeCreated: string;
    timeUpdated: string;
    type: string;
}

export interface CloudGuardResponderRecipeEffectiveResponderRuleDetail {
    condition: string;
    configurations: outputs.CloudGuardResponderRecipeEffectiveResponderRuleDetailConfiguration[];
    isEnabled: boolean;
    mode: string;
}

export interface CloudGuardResponderRecipeEffectiveResponderRuleDetailConfiguration {
    configKey: string;
    name: string;
    value: string;
}

export interface CloudGuardResponderRecipeResponderRule {
    compartmentId: string;
    description: string;
    details: outputs.CloudGuardResponderRecipeResponderRuleDetails;
    displayName: string;
    lifecycleDetails: string;
    policies: string[];
    responderRuleId: string;
    state: string;
    supportedModes: string[];
    timeCreated: string;
    timeUpdated: string;
    type: string;
}

export interface CloudGuardResponderRecipeResponderRuleDetails {
    condition: string;
    configurations: outputs.CloudGuardResponderRecipeResponderRuleDetailsConfiguration[];
    isEnabled: boolean;
    mode: string;
}

export interface CloudGuardResponderRecipeResponderRuleDetailsConfiguration {
    configKey: string;
    name: string;
    value: string;
}

export interface CloudGuardResponderRecipeTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface CloudGuardSavedQueryTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface CloudGuardSecurityRecipeTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface CloudGuardSecurityZoneTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface CloudGuardTargetTargetDetail {
    securityZoneDisplayName: string;
    securityZoneId: string;
    targetResourceType: string;
    targetSecurityZoneRecipes: outputs.CloudGuardTargetTargetDetailTargetSecurityZoneRecipe[];
}

export interface CloudGuardTargetTargetDetailTargetSecurityZoneRecipe {
    compartmentId: string;
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    lifecycleDetails: string;
    owner: string;
    securityPolicies: string[];
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
}

export interface CloudGuardTargetTargetDetectorRecipe {
    compartmentId: string;
    description: string;
    detector: string;
    detectorRecipeId: string;
    detectorRecipeType: string;
    detectorRules?: outputs.CloudGuardTargetTargetDetectorRecipeDetectorRule[];
    displayName: string;
    effectiveDetectorRules: outputs.CloudGuardTargetTargetDetectorRecipeEffectiveDetectorRule[];
    id: string;
    owner: string;
    state: string;
    timeCreated: string;
    timeUpdated: string;
}

export interface CloudGuardTargetTargetDetectorRecipeDetectorRule {
    dataSourceId: string;
    description: string;
    details: outputs.CloudGuardTargetTargetDetectorRecipeDetectorRuleDetails;
    detector: string;
    detectorRuleId: string;
    displayName: string;
    entitiesMappings: outputs.CloudGuardTargetTargetDetectorRecipeDetectorRuleEntitiesMapping[];
    lifecycleDetails: string;
    managedListTypes: string[];
    recommendation: string;
    resourceType: string;
    serviceType: string;
    state: string;
    timeCreated: string;
    timeUpdated: string;
}

export interface CloudGuardTargetTargetDetectorRecipeDetectorRuleDetails {
    conditionGroups?: outputs.CloudGuardTargetTargetDetectorRecipeDetectorRuleDetailsConditionGroup[];
    configurations: outputs.CloudGuardTargetTargetDetectorRecipeDetectorRuleDetailsConfiguration[];
    isConfigurationAllowed: boolean;
    isEnabled: boolean;
    labels: string[];
    riskLevel: string;
}

export interface CloudGuardTargetTargetDetectorRecipeDetectorRuleDetailsConditionGroup {
    compartmentId: string;
    condition: string;
}

export interface CloudGuardTargetTargetDetectorRecipeDetectorRuleDetailsConfiguration {
    configKey: string;
    dataType: string;
    name: string;
    value: string;
    values: outputs.CloudGuardTargetTargetDetectorRecipeDetectorRuleDetailsConfigurationValue[];
}

export interface CloudGuardTargetTargetDetectorRecipeDetectorRuleDetailsConfigurationValue {
    listType: string;
    managedListType: string;
    value: string;
}

export interface CloudGuardTargetTargetDetectorRecipeDetectorRuleEntitiesMapping {
    displayName: string;
    entityType: string;
    queryField: string;
}

export interface CloudGuardTargetTargetDetectorRecipeEffectiveDetectorRule {
    dataSourceId: string;
    description: string;
    details: outputs.CloudGuardTargetTargetDetectorRecipeEffectiveDetectorRuleDetail[];
    detector: string;
    detectorRuleId: string;
    displayName: string;
    entitiesMappings: outputs.CloudGuardTargetTargetDetectorRecipeEffectiveDetectorRuleEntitiesMapping[];
    lifecycleDetails: string;
    managedListTypes: string[];
    recommendation: string;
    resourceType: string;
    serviceType: string;
    state: string;
    timeCreated: string;
    timeUpdated: string;
}

export interface CloudGuardTargetTargetDetectorRecipeEffectiveDetectorRuleDetail {
    conditionGroups: outputs.CloudGuardTargetTargetDetectorRecipeEffectiveDetectorRuleDetailConditionGroup[];
    configurations: outputs.CloudGuardTargetTargetDetectorRecipeEffectiveDetectorRuleDetailConfiguration[];
    isConfigurationAllowed: boolean;
    isEnabled: boolean;
    labels: string[];
    riskLevel: string;
}

export interface CloudGuardTargetTargetDetectorRecipeEffectiveDetectorRuleDetailConditionGroup {
    compartmentId: string;
    condition: string;
}

export interface CloudGuardTargetTargetDetectorRecipeEffectiveDetectorRuleDetailConfiguration {
    configKey: string;
    dataType: string;
    name: string;
    value: string;
    values: outputs.CloudGuardTargetTargetDetectorRecipeEffectiveDetectorRuleDetailConfigurationValue[];
}

export interface CloudGuardTargetTargetDetectorRecipeEffectiveDetectorRuleDetailConfigurationValue {
    listType: string;
    managedListType: string;
    value: string;
}

export interface CloudGuardTargetTargetDetectorRecipeEffectiveDetectorRuleEntitiesMapping {
    displayName: string;
    entityType: string;
    queryField: string;
}

export interface CloudGuardTargetTargetResponderRecipe {
    compartmentId: string;
    description: string;
    displayName: string;
    effectiveResponderRules: outputs.CloudGuardTargetTargetResponderRecipeEffectiveResponderRule[];
    id: string;
    owner: string;
    responderRecipeId: string;
    responderRules?: outputs.CloudGuardTargetTargetResponderRecipeResponderRule[];
    timeCreated: string;
    timeUpdated: string;
}

export interface CloudGuardTargetTargetResponderRecipeEffectiveResponderRule {
    compartmentId: string;
    description: string;
    details: outputs.CloudGuardTargetTargetResponderRecipeEffectiveResponderRuleDetail[];
    displayName: string;
    lifecycleDetails: string;
    policies: string[];
    responderRuleId: string;
    state: string;
    supportedModes: string[];
    timeCreated: string;
    timeUpdated: string;
    type: string;
}

export interface CloudGuardTargetTargetResponderRecipeEffectiveResponderRuleDetail {
    condition: string;
    configurations: outputs.CloudGuardTargetTargetResponderRecipeEffectiveResponderRuleDetailConfiguration[];
    isEnabled: boolean;
    mode: string;
}

export interface CloudGuardTargetTargetResponderRecipeEffectiveResponderRuleDetailConfiguration {
    configKey: string;
    name: string;
    value: string;
}

export interface CloudGuardTargetTargetResponderRecipeResponderRule {
    compartmentId: string;
    description: string;
    details: outputs.CloudGuardTargetTargetResponderRecipeResponderRuleDetails;
    displayName: string;
    lifecycleDetails: string;
    policies: string[];
    responderRuleId: string;
    state: string;
    supportedModes: string[];
    timeCreated: string;
    timeUpdated: string;
    type: string;
}

export interface CloudGuardTargetTargetResponderRecipeResponderRuleDetails {
    condition: string;
    configurations?: outputs.CloudGuardTargetTargetResponderRecipeResponderRuleDetailsConfiguration[];
    isEnabled: boolean;
    mode: string;
}

export interface CloudGuardTargetTargetResponderRecipeResponderRuleDetailsConfiguration {
    configKey: string;
    name: string;
    value: string;
}

export interface CloudGuardTargetTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface CloudGuardWlpAgentTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface CloudMigrationsMigrationAssetTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface CloudMigrationsMigrationPlanMigrationPlanStat {
    timeUpdated: string;
    totalEstimatedCosts: outputs.CloudMigrationsMigrationPlanMigrationPlanStatTotalEstimatedCost[];
    vmCount: number;
}

export interface CloudMigrationsMigrationPlanMigrationPlanStatTotalEstimatedCost {
    computes: outputs.CloudMigrationsMigrationPlanMigrationPlanStatTotalEstimatedCostCompute[];
    currencyCode: string;
    osImages: outputs.CloudMigrationsMigrationPlanMigrationPlanStatTotalEstimatedCostOsImage[];
    storages: outputs.CloudMigrationsMigrationPlanMigrationPlanStatTotalEstimatedCostStorage[];
    subscriptionId: string;
    totalEstimationPerMonth: number;
    totalEstimationPerMonthBySubscription: number;
}

export interface CloudMigrationsMigrationPlanMigrationPlanStatTotalEstimatedCostCompute {
    gpuCount: number;
    gpuPerHour: number;
    gpuPerHourBySubscription: number;
    memoryAmountGb: number;
    memoryGbPerHour: number;
    memoryGbPerHourBySubscription: number;
    ocpuCount: number;
    ocpuPerHour: number;
    ocpuPerHourBySubscription: number;
    totalPerHour: number;
    totalPerHourBySubscription: number;
}

export interface CloudMigrationsMigrationPlanMigrationPlanStatTotalEstimatedCostOsImage {
    totalPerHour: number;
    totalPerHourBySubscription: number;
}

export interface CloudMigrationsMigrationPlanMigrationPlanStatTotalEstimatedCostStorage {
    totalGbPerMonth: number;
    totalGbPerMonthBySubscription: number;
    volumes: outputs.CloudMigrationsMigrationPlanMigrationPlanStatTotalEstimatedCostStorageVolume[];
}

export interface CloudMigrationsMigrationPlanMigrationPlanStatTotalEstimatedCostStorageVolume {
    capacityGb: number;
    description: string;
    totalGbPerMonth: number;
    totalGbPerMonthBySubscription: number;
}

export interface CloudMigrationsMigrationPlanStrategy {
    adjustmentMultiplier: number;
    metricTimeWindow: string;
    metricType: string;
    percentile: string;
    resourceType: string;
    strategyType: string;
}

export interface CloudMigrationsMigrationPlanTargetEnvironment {
    availabilityDomain: string;
    dedicatedVmHost: string;
    faultDomain: string;
    msLicense: string;
    preferredShapeType: string;
    subnet: string;
    targetCompartmentId: string;
    targetEnvironmentType: string;
    vcn: string;
}

export interface CloudMigrationsMigrationPlanTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface CloudMigrationsMigrationTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface CloudMigrationsReplicationScheduleTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface CloudMigrationsTargetAssetCompatibilityMessage {
    message: string;
    name: string;
    severity: string;
}

export interface CloudMigrationsTargetAssetEstimatedCost {
    computes: outputs.CloudMigrationsTargetAssetEstimatedCostCompute[];
    currencyCode: string;
    osImages: outputs.CloudMigrationsTargetAssetEstimatedCostOsImage[];
    storages: outputs.CloudMigrationsTargetAssetEstimatedCostStorage[];
    subscriptionId: string;
    totalEstimationPerMonth: number;
    totalEstimationPerMonthBySubscription: number;
}

export interface CloudMigrationsTargetAssetEstimatedCostCompute {
    gpuCount: number;
    gpuPerHour: number;
    gpuPerHourBySubscription: number;
    memoryAmountGb: number;
    memoryGbPerHour: number;
    memoryGbPerHourBySubscription: number;
    ocpuCount: number;
    ocpuPerHour: number;
    ocpuPerHourBySubscription: number;
    totalPerHour: number;
    totalPerHourBySubscription: number;
}

export interface CloudMigrationsTargetAssetEstimatedCostOsImage {
    totalPerHour: number;
    totalPerHourBySubscription: number;
}

export interface CloudMigrationsTargetAssetEstimatedCostStorage {
    totalGbPerMonth: number;
    totalGbPerMonthBySubscription: number;
    volumes: outputs.CloudMigrationsTargetAssetEstimatedCostStorageVolume[];
}

export interface CloudMigrationsTargetAssetEstimatedCostStorageVolume {
    capacityGb: number;
    description: string;
    totalGbPerMonth: number;
    totalGbPerMonthBySubscription: number;
}

export interface CloudMigrationsTargetAssetMigrationAsset {
    availabilityDomain: string;
    compartmentId: string;
    dependedOnBies: string[];
    dependsOns: string[];
    displayName: string;
    id: string;
    lifecycleDetails: string;
    migrationId: string;
    notifications: string[];
    parentSnapshot: string;
    replicationCompartmentId: string;
    replicationScheduleId: string;
    snapShotBucketName: string;
    snapshots: {[key: string]: string};
    sourceAssetData: {[key: string]: string};
    sourceAssetId: string;
    state: string;
    tenancyId: string;
    timeCreated: string;
    timeUpdated: string;
    type: string;
}

export interface CloudMigrationsTargetAssetRecommendedSpec {
    agentConfigs: outputs.CloudMigrationsTargetAssetRecommendedSpecAgentConfig[];
    availabilityDomain: string;
    capacityReservationId: string;
    compartmentId: string;
    createVnicDetails: outputs.CloudMigrationsTargetAssetRecommendedSpecCreateVnicDetail[];
    dedicatedVmHostId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    faultDomain: string;
    freeformTags: {[key: string]: string};
    hostnameLabel: string;
    instanceOptions: outputs.CloudMigrationsTargetAssetRecommendedSpecInstanceOption[];
    ipxeScript: string;
    isPvEncryptionInTransitEnabled: boolean;
    preemptibleInstanceConfigs: outputs.CloudMigrationsTargetAssetRecommendedSpecPreemptibleInstanceConfig[];
    shape: string;
    shapeConfigs: outputs.CloudMigrationsTargetAssetRecommendedSpecShapeConfig[];
    sourceDetails: outputs.CloudMigrationsTargetAssetRecommendedSpecSourceDetail[];
}

export interface CloudMigrationsTargetAssetRecommendedSpecAgentConfig {
    areAllPluginsDisabled: boolean;
    isManagementDisabled: boolean;
    isMonitoringDisabled: boolean;
    pluginsConfigs: outputs.CloudMigrationsTargetAssetRecommendedSpecAgentConfigPluginsConfig[];
}

export interface CloudMigrationsTargetAssetRecommendedSpecAgentConfigPluginsConfig {
    desiredState: string;
    name: string;
}

export interface CloudMigrationsTargetAssetRecommendedSpecCreateVnicDetail {
    assignPrivateDnsRecord: boolean;
    assignPublicIp: boolean;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    hostnameLabel: string;
    nsgIds: string[];
    privateIp: string;
    skipSourceDestCheck: boolean;
    subnetId: string;
    vlanId: string;
}

export interface CloudMigrationsTargetAssetRecommendedSpecInstanceOption {
    areLegacyImdsEndpointsDisabled: boolean;
}

export interface CloudMigrationsTargetAssetRecommendedSpecPreemptibleInstanceConfig {
    preemptionActions: outputs.CloudMigrationsTargetAssetRecommendedSpecPreemptibleInstanceConfigPreemptionAction[];
}

export interface CloudMigrationsTargetAssetRecommendedSpecPreemptibleInstanceConfigPreemptionAction {
    preserveBootVolume: boolean;
    type: string;
}

export interface CloudMigrationsTargetAssetRecommendedSpecShapeConfig {
    baselineOcpuUtilization: string;
    memoryInGbs: number;
    ocpus: number;
}

export interface CloudMigrationsTargetAssetRecommendedSpecSourceDetail {
    bootVolumeId: string;
    bootVolumeSizeInGbs: string;
    bootVolumeVpusPerGb: string;
    imageId: string;
    kmsKeyId: string;
    sourceType: string;
}

export interface CloudMigrationsTargetAssetTestSpec {
    agentConfigs: outputs.CloudMigrationsTargetAssetTestSpecAgentConfig[];
    availabilityDomain: string;
    capacityReservationId: string;
    compartmentId: string;
    createVnicDetails: outputs.CloudMigrationsTargetAssetTestSpecCreateVnicDetail[];
    dedicatedVmHostId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    faultDomain: string;
    freeformTags: {[key: string]: string};
    hostnameLabel: string;
    instanceOptions: outputs.CloudMigrationsTargetAssetTestSpecInstanceOption[];
    ipxeScript: string;
    isPvEncryptionInTransitEnabled: boolean;
    preemptibleInstanceConfigs: outputs.CloudMigrationsTargetAssetTestSpecPreemptibleInstanceConfig[];
    shape: string;
    shapeConfigs: outputs.CloudMigrationsTargetAssetTestSpecShapeConfig[];
    sourceDetails: outputs.CloudMigrationsTargetAssetTestSpecSourceDetail[];
}

export interface CloudMigrationsTargetAssetTestSpecAgentConfig {
    areAllPluginsDisabled: boolean;
    isManagementDisabled: boolean;
    isMonitoringDisabled: boolean;
    pluginsConfigs: outputs.CloudMigrationsTargetAssetTestSpecAgentConfigPluginsConfig[];
}

export interface CloudMigrationsTargetAssetTestSpecAgentConfigPluginsConfig {
    desiredState: string;
    name: string;
}

export interface CloudMigrationsTargetAssetTestSpecCreateVnicDetail {
    assignPrivateDnsRecord: boolean;
    assignPublicIp: boolean;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    hostnameLabel: string;
    nsgIds: string[];
    privateIp: string;
    skipSourceDestCheck: boolean;
    subnetId: string;
    vlanId: string;
}

export interface CloudMigrationsTargetAssetTestSpecInstanceOption {
    areLegacyImdsEndpointsDisabled: boolean;
}

export interface CloudMigrationsTargetAssetTestSpecPreemptibleInstanceConfig {
    preemptionActions: outputs.CloudMigrationsTargetAssetTestSpecPreemptibleInstanceConfigPreemptionAction[];
}

export interface CloudMigrationsTargetAssetTestSpecPreemptibleInstanceConfigPreemptionAction {
    preserveBootVolume: boolean;
    type: string;
}

export interface CloudMigrationsTargetAssetTestSpecShapeConfig {
    baselineOcpuUtilization: string;
    memoryInGbs: number;
    ocpus: number;
}

export interface CloudMigrationsTargetAssetTestSpecSourceDetail {
    bootVolumeId: string;
    bootVolumeSizeInGbs: string;
    bootVolumeVpusPerGb: string;
    imageId: string;
    kmsKeyId: string;
    sourceType: string;
}

export interface CloudMigrationsTargetAssetTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface CloudMigrationsTargetAssetUserSpec {
    agentConfig?: outputs.CloudMigrationsTargetAssetUserSpecAgentConfig;
    availabilityDomain: string;
    capacityReservationId: string;
    compartmentId: string;
    createVnicDetails?: outputs.CloudMigrationsTargetAssetUserSpecCreateVnicDetails;
    dedicatedVmHostId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    faultDomain: string;
    freeformTags: {[key: string]: string};
    hostnameLabel: string;
    instanceOptions?: outputs.CloudMigrationsTargetAssetUserSpecInstanceOptions;
    ipxeScript: string;
    isPvEncryptionInTransitEnabled: boolean;
    preemptibleInstanceConfig?: outputs.CloudMigrationsTargetAssetUserSpecPreemptibleInstanceConfig;
    shape: string;
    shapeConfig?: outputs.CloudMigrationsTargetAssetUserSpecShapeConfig;
    sourceDetails?: outputs.CloudMigrationsTargetAssetUserSpecSourceDetails;
}

export interface CloudMigrationsTargetAssetUserSpecAgentConfig {
    areAllPluginsDisabled: boolean;
    isManagementDisabled: boolean;
    isMonitoringDisabled: boolean;
    pluginsConfigs?: outputs.CloudMigrationsTargetAssetUserSpecAgentConfigPluginsConfig[];
}

export interface CloudMigrationsTargetAssetUserSpecAgentConfigPluginsConfig {
    desiredState: string;
    name: string;
}

export interface CloudMigrationsTargetAssetUserSpecCreateVnicDetails {
    assignPrivateDnsRecord: boolean;
    assignPublicIp: boolean;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    hostnameLabel: string;
    nsgIds: string[];
    privateIp: string;
    skipSourceDestCheck: boolean;
    subnetId: string;
    vlanId: string;
}

export interface CloudMigrationsTargetAssetUserSpecInstanceOptions {
    areLegacyImdsEndpointsDisabled: boolean;
}

export interface CloudMigrationsTargetAssetUserSpecPreemptibleInstanceConfig {
    preemptionAction: outputs.CloudMigrationsTargetAssetUserSpecPreemptibleInstanceConfigPreemptionAction;
}

export interface CloudMigrationsTargetAssetUserSpecPreemptibleInstanceConfigPreemptionAction {
    preserveBootVolume: boolean;
    type: string;
}

export interface CloudMigrationsTargetAssetUserSpecShapeConfig {
    baselineOcpuUtilization: string;
    memoryInGbs: number;
    ocpus: number;
}

export interface CloudMigrationsTargetAssetUserSpecSourceDetails {
    bootVolumeId: string;
    bootVolumeSizeInGbs: string;
    bootVolumeVpusPerGb: string;
    imageId: string;
    kmsKeyId: string;
    sourceType: string;
}

export interface ClusterPlacementGroupsClusterPlacementGroupCapabilities {
    items: outputs.ClusterPlacementGroupsClusterPlacementGroupCapabilitiesItem[];
}

export interface ClusterPlacementGroupsClusterPlacementGroupCapabilitiesItem {
    name: string;
    service: string;
}

export interface ClusterPlacementGroupsClusterPlacementGroupPlacementInstruction {
    type: string;
    value: string;
}

export interface ClusterPlacementGroupsClusterPlacementGroupTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface ComputeCloudAtCustomerCccInfrastructureInfrastructureInventory {
    capacityStorageTrayCount: number;
    computeNodeCount: number;
    managementNodeCount: number;
    performanceStorageTrayCount: number;
    serialNumber: string;
}

export interface ComputeCloudAtCustomerCccInfrastructureInfrastructureNetworkConfiguration {
    dnsIps: string[];
    infrastructureRoutingDynamics: outputs.ComputeCloudAtCustomerCccInfrastructureInfrastructureNetworkConfigurationInfrastructureRoutingDynamic[];
    infrastructureRoutingStatics: outputs.ComputeCloudAtCustomerCccInfrastructureInfrastructureNetworkConfigurationInfrastructureRoutingStatic[];
    managementNodes: outputs.ComputeCloudAtCustomerCccInfrastructureInfrastructureNetworkConfigurationManagementNode[];
    mgmtVipHostname: string;
    mgmtVipIp: string;
    spineIps: string[];
    spineVip: string;
    uplinkDomain: string;
    uplinkGatewayIp: string;
    uplinkNetmask: string;
    uplinkPortCount: number;
    uplinkPortForwardErrorCorrection: string;
    uplinkPortSpeedInGbps: number;
    uplinkVlanMtu: number;
}

export interface ComputeCloudAtCustomerCccInfrastructureInfrastructureNetworkConfigurationInfrastructureRoutingDynamic {
    bgpTopology: string;
    oracleAsn: number;
    peerInformations: outputs.ComputeCloudAtCustomerCccInfrastructureInfrastructureNetworkConfigurationInfrastructureRoutingDynamicPeerInformation[];
}

export interface ComputeCloudAtCustomerCccInfrastructureInfrastructureNetworkConfigurationInfrastructureRoutingDynamicPeerInformation {
    asn: number;
    ip: string;
}

export interface ComputeCloudAtCustomerCccInfrastructureInfrastructureNetworkConfigurationInfrastructureRoutingStatic {
    uplinkHsrpGroup: number;
    uplinkVlan: number;
}

export interface ComputeCloudAtCustomerCccInfrastructureInfrastructureNetworkConfigurationManagementNode {
    hostname: string;
    ip: string;
}

export interface ComputeCloudAtCustomerCccInfrastructureTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface ComputeCloudAtCustomerCccInfrastructureUpgradeInformation {
    currentVersion: string;
    isActive: boolean;
    scheduledUpgradeDuration: string;
    timeOfScheduledUpgrade: string;
}

export interface ComputeCloudAtCustomerCccUpgradeScheduleEvent {
    description: string;
    name: string;
    scheduleEventDuration: string;
    scheduleEventRecurrences: string;
    timeStart: string;
}

export interface ComputeCloudAtCustomerCccUpgradeScheduleTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface ContainerInstancesContainerInstanceContainer {
    arguments: string[];
    availabilityDomain: string;
    commands: string[];
    compartmentId: string;
    containerId: string;
    containerInstanceId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    environmentVariables: {[key: string]: string};
    exitCode: number;
    faultDomain: string;
    freeformTags: {[key: string]: string};
    healthChecks?: outputs.ContainerInstancesContainerInstanceContainerHealthCheck[];
    imageUrl: string;
    isResourcePrincipalDisabled: boolean;
    lifecycleDetails: string;
    resourceConfig?: outputs.ContainerInstancesContainerInstanceContainerResourceConfig;
    securityContext?: outputs.ContainerInstancesContainerInstanceContainerSecurityContext;
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeTerminated: string;
    timeUpdated: string;
    volumeMounts?: outputs.ContainerInstancesContainerInstanceContainerVolumeMount[];
    workingDirectory: string;
}

export interface ContainerInstancesContainerInstanceContainerHealthCheck {
    commands: string[];
    failureAction: string;
    failureThreshold: number;
    headers?: outputs.ContainerInstancesContainerInstanceContainerHealthCheckHeader[];
    healthCheckType: string;
    initialDelayInSeconds: number;
    intervalInSeconds: number;
    name: string;
    path: string;
    port: number;
    status: string;
    statusDetails: string;
    successThreshold: number;
    timeoutInSeconds: number;
}

export interface ContainerInstancesContainerInstanceContainerHealthCheckHeader {
    name: string;
    value: string;
}

export interface ContainerInstancesContainerInstanceContainerResourceConfig {
    memoryLimitInGbs: number;
    vcpusLimit: number;
}

export interface ContainerInstancesContainerInstanceContainerSecurityContext {
    capabilities?: outputs.ContainerInstancesContainerInstanceContainerSecurityContextCapabilities;
    isNonRootUserCheckEnabled: boolean;
    isRootFileSystemReadonly: boolean;
    runAsGroup: number;
    runAsUser: number;
    securityContextType: string;
}

export interface ContainerInstancesContainerInstanceContainerSecurityContextCapabilities {
    addCapabilities: string[];
    dropCapabilities: string[];
}

export interface ContainerInstancesContainerInstanceContainerVolumeMount {
    isReadOnly: boolean;
    mountPath: string;
    partition: number;
    subPath: string;
    volumeName: string;
}

export interface ContainerInstancesContainerInstanceDnsConfig {
    nameservers: string[];
    options: string[];
    searches: string[];
}

export interface ContainerInstancesContainerInstanceImagePullSecret {
    password: string;
    registryEndpoint: string;
    secretId: string;
    secretType: string;
    username: string;
}

export interface ContainerInstancesContainerInstanceShapeConfig {
    memoryInGbs: number;
    networkingBandwidthInGbps: number;
    ocpus: number;
    processorDescription: string;
}

export interface ContainerInstancesContainerInstanceTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface ContainerInstancesContainerInstanceVnic {
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    hostnameLabel: string;
    isPublicIpAssigned: boolean;
    nsgIds: string[];
    privateIp: string;
    skipSourceDestCheck: boolean;
    subnetId: string;
    vnicId: string;
}

export interface ContainerInstancesContainerInstanceVolume {
    backingStore: string;
    configs?: outputs.ContainerInstancesContainerInstanceVolumeConfig[];
    name: string;
    volumeType: string;
}

export interface ContainerInstancesContainerInstanceVolumeConfig {
    data: string;
    fileName: string;
    path: string;
}

export interface ContainerengineAddonAddonError {
    code: string;
    message: string;
    status: string;
}

export interface ContainerengineAddonConfiguration {
    key: string;
    value: string;
}

export interface ContainerengineAddonTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface ContainerengineClusterClusterPodNetworkOption {
    cniType: string;
}

export interface ContainerengineClusterCompleteCredentialRotationManagementTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface ContainerengineClusterEndpoint {
    kubernetes: string;
    privateEndpoint: string;
    publicEndpoint: string;
    vcnHostnameEndpoint: string;
}

export interface ContainerengineClusterEndpointConfig {
    isPublicIpEnabled: boolean;
    nsgIds?: string[];
    subnetId: string;
}

export interface ContainerengineClusterImagePolicyConfig {
    isPolicyEnabled: boolean;
    keyDetails?: outputs.ContainerengineClusterImagePolicyConfigKeyDetail[];
}

export interface ContainerengineClusterImagePolicyConfigKeyDetail {
    kmsKeyId: string;
}

export interface ContainerengineClusterMetadata {
    createdByUserId: string;
    createdByWorkRequestId: string;
    deletedByUserId: string;
    deletedByWorkRequestId: string;
    timeCreated: string;
    timeCredentialExpiration: string;
    timeDeleted: string;
    timeUpdated: string;
    updatedByUserId: string;
    updatedByWorkRequestId: string;
}

export interface ContainerengineClusterOptions {
    addOns?: outputs.ContainerengineClusterOptionsAddOns;
    admissionControllerOptions?: outputs.ContainerengineClusterOptionsAdmissionControllerOptions;
    kubernetesNetworkConfig?: outputs.ContainerengineClusterOptionsKubernetesNetworkConfig;
    persistentVolumeConfig?: outputs.ContainerengineClusterOptionsPersistentVolumeConfig;
    serviceLbConfig?: outputs.ContainerengineClusterOptionsServiceLbConfig;
    serviceLbSubnetIds: string[];
}

export interface ContainerengineClusterOptionsAddOns {
    isKubernetesDashboardEnabled: boolean;
    isTillerEnabled: boolean;
}

export interface ContainerengineClusterOptionsAdmissionControllerOptions {
    isPodSecurityPolicyEnabled: boolean;
}

export interface ContainerengineClusterOptionsKubernetesNetworkConfig {
    podsCidr: string;
    servicesCidr: string;
}

export interface ContainerengineClusterOptionsPersistentVolumeConfig {
    definedTags: {[key: string]: string};
    freeformTags: {[key: string]: string};
}

export interface ContainerengineClusterOptionsServiceLbConfig {
    definedTags: {[key: string]: string};
    freeformTags: {[key: string]: string};
}

export interface ContainerengineClusterStartCredentialRotationManagementTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface ContainerengineClusterTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface ContainerengineClusterWorkloadMappingTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface ContainerengineNodePoolInitialNodeLabel {
    key: string;
    value: string;
}

export interface ContainerengineNodePoolNode {
    availabilityDomain: string;
    definedTags: {[key: string]: string};
    errors: outputs.ContainerengineNodePoolNodeError[];
    faultDomain: string;
    freeformTags: {[key: string]: string};
    id: string;
    kubernetesVersion: string;
    lifecycleDetails: string;
    name: string;
    nodePoolId: string;
    privateIp: string;
    publicIp: string;
    state: string;
    subnetId: string;
}

export interface ContainerengineNodePoolNodeConfigDetails {
    definedTags: {[key: string]: string};
    freeformTags: {[key: string]: string};
    isPvEncryptionInTransitEnabled: boolean;
    kmsKeyId: string;
    nodePoolPodNetworkOptionDetails?: outputs.ContainerengineNodePoolNodeConfigDetailsNodePoolPodNetworkOptionDetails;
    nsgIds: string[];
    placementConfigs: outputs.ContainerengineNodePoolNodeConfigDetailsPlacementConfig[];
    size: number;
}

export interface ContainerengineNodePoolNodeConfigDetailsNodePoolPodNetworkOptionDetails {
    cniType: string;
    maxPodsPerNode: number;
    podNsgIds: string[];
    podSubnetIds: string[];
}

export interface ContainerengineNodePoolNodeConfigDetailsPlacementConfig {
    availabilityDomain: string;
    capacityReservationId: string;
    faultDomains: string[];
    preemptibleNodeConfig?: outputs.ContainerengineNodePoolNodeConfigDetailsPlacementConfigPreemptibleNodeConfig;
    subnetId: string;
}

export interface ContainerengineNodePoolNodeConfigDetailsPlacementConfigPreemptibleNodeConfig {
    preemptionAction: outputs.ContainerengineNodePoolNodeConfigDetailsPlacementConfigPreemptibleNodeConfigPreemptionAction;
}

export interface ContainerengineNodePoolNodeConfigDetailsPlacementConfigPreemptibleNodeConfigPreemptionAction {
    isPreserveBootVolume: boolean;
    type: string;
}

export interface ContainerengineNodePoolNodeError {
    code: string;
    message: string;
    status: string;
}

export interface ContainerengineNodePoolNodeEvictionNodePoolSettings {
    evictionGraceDuration: string;
    isForceDeleteAfterGraceDuration: boolean;
}

export interface ContainerengineNodePoolNodePoolCyclingDetails {
    isNodeCyclingEnabled: boolean;
    maximumSurge: string;
    maximumUnavailable: string;
}

export interface ContainerengineNodePoolNodeShapeConfig {
    memoryInGbs: number;
    ocpus: number;
}

export interface ContainerengineNodePoolNodeSource {
    imageId: string;
    sourceName: string;
    sourceType: string;
}

export interface ContainerengineNodePoolNodeSourceDetails {
    bootVolumeSizeInGbs: string;
    imageId: string;
    sourceType: string;
}

export interface ContainerengineNodePoolTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface ContainerengineVirtualNodePoolInitialVirtualNodeLabel {
    key: string;
    value: string;
}

export interface ContainerengineVirtualNodePoolPlacementConfiguration {
    availabilityDomain: string;
    faultDomains: string[];
    subnetId: string;
}

export interface ContainerengineVirtualNodePoolPodConfiguration {
    nsgIds: string[];
    shape: string;
    subnetId: string;
}

export interface ContainerengineVirtualNodePoolTaint {
    effect: string;
    key: string;
    value: string;
}

export interface ContainerengineVirtualNodePoolTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface ContainerengineVirtualNodePoolVirtualNodeTags {
    definedTags: {[key: string]: string};
    freeformTags: {[key: string]: string};
}

export interface CoreAppCatalogListingResourceVersionAgreementTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface CoreAppCatalogSubscriptionTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface CoreBootVolumeAutotunePolicy {
    autotuneType: string;
    maxVpusPerGb: string;
}

export interface CoreBootVolumeBackupSourceDetails {
    bootVolumeBackupId: string;
    kmsKeyId?: string;
    region: string;
}

export interface CoreBootVolumeBackupTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface CoreBootVolumeBootVolumeReplica {
    availabilityDomain: string;
    bootVolumeReplicaId: string;
    displayName: string;
}

export interface CoreBootVolumeSourceDetails {
    id: string;
    type: string;
}

export interface CoreBootVolumeTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface CoreCaptureFilterFlowLogCaptureFilterRule {
    destinationCidr: string;
    flowLogType: string;
    icmpOptions?: outputs.CoreCaptureFilterFlowLogCaptureFilterRuleIcmpOptions;
    isEnabled: boolean;
    priority: number;
    protocol: string;
    ruleAction: string;
    samplingRate: number;
    sourceCidr: string;
    tcpOptions?: outputs.CoreCaptureFilterFlowLogCaptureFilterRuleTcpOptions;
    udpOptions?: outputs.CoreCaptureFilterFlowLogCaptureFilterRuleUdpOptions;
}

export interface CoreCaptureFilterFlowLogCaptureFilterRuleIcmpOptions {
    code: number;
    type: number;
}

export interface CoreCaptureFilterFlowLogCaptureFilterRuleTcpOptions {
    destinationPortRange?: outputs.CoreCaptureFilterFlowLogCaptureFilterRuleTcpOptionsDestinationPortRange;
    sourcePortRange?: outputs.CoreCaptureFilterFlowLogCaptureFilterRuleTcpOptionsSourcePortRange;
}

export interface CoreCaptureFilterFlowLogCaptureFilterRuleTcpOptionsDestinationPortRange {
    max: number;
    min: number;
}

export interface CoreCaptureFilterFlowLogCaptureFilterRuleTcpOptionsSourcePortRange {
    max: number;
    min: number;
}

export interface CoreCaptureFilterFlowLogCaptureFilterRuleUdpOptions {
    destinationPortRange?: outputs.CoreCaptureFilterFlowLogCaptureFilterRuleUdpOptionsDestinationPortRange;
    sourcePortRange?: outputs.CoreCaptureFilterFlowLogCaptureFilterRuleUdpOptionsSourcePortRange;
}

export interface CoreCaptureFilterFlowLogCaptureFilterRuleUdpOptionsDestinationPortRange {
    max: number;
    min: number;
}

export interface CoreCaptureFilterFlowLogCaptureFilterRuleUdpOptionsSourcePortRange {
    max: number;
    min: number;
}

export interface CoreCaptureFilterTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface CoreCaptureFilterVtapCaptureFilterRule {
    destinationCidr: string;
    icmpOptions?: outputs.CoreCaptureFilterVtapCaptureFilterRuleIcmpOptions;
    protocol: string;
    ruleAction: string;
    sourceCidr: string;
    tcpOptions?: outputs.CoreCaptureFilterVtapCaptureFilterRuleTcpOptions;
    trafficDirection: string;
    udpOptions?: outputs.CoreCaptureFilterVtapCaptureFilterRuleUdpOptions;
}

export interface CoreCaptureFilterVtapCaptureFilterRuleIcmpOptions {
    code: number;
    type: number;
}

export interface CoreCaptureFilterVtapCaptureFilterRuleTcpOptions {
    destinationPortRange?: outputs.CoreCaptureFilterVtapCaptureFilterRuleTcpOptionsDestinationPortRange;
    sourcePortRange?: outputs.CoreCaptureFilterVtapCaptureFilterRuleTcpOptionsSourcePortRange;
}

export interface CoreCaptureFilterVtapCaptureFilterRuleTcpOptionsDestinationPortRange {
    max: number;
    min: number;
}

export interface CoreCaptureFilterVtapCaptureFilterRuleTcpOptionsSourcePortRange {
    max: number;
    min: number;
}

export interface CoreCaptureFilterVtapCaptureFilterRuleUdpOptions {
    destinationPortRange?: outputs.CoreCaptureFilterVtapCaptureFilterRuleUdpOptionsDestinationPortRange;
    sourcePortRange?: outputs.CoreCaptureFilterVtapCaptureFilterRuleUdpOptionsSourcePortRange;
}

export interface CoreCaptureFilterVtapCaptureFilterRuleUdpOptionsDestinationPortRange {
    max: number;
    min: number;
}

export interface CoreCaptureFilterVtapCaptureFilterRuleUdpOptionsSourcePortRange {
    max: number;
    min: number;
}

export interface CoreClusterNetworkClusterConfiguration {
    hpcIslandId: string;
    networkBlockIds: string[];
}

export interface CoreClusterNetworkInstancePool {
    compartmentId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    instanceConfigurationId: string;
    instanceDisplayNameFormatter: string;
    instanceHostnameFormatter: string;
    loadBalancers: outputs.CoreClusterNetworkInstancePoolLoadBalancer[];
    placementConfigurations: outputs.CoreClusterNetworkInstancePoolPlacementConfiguration[];
    size: number;
    state: string;
    timeCreated: string;
}

export interface CoreClusterNetworkInstancePoolLoadBalancer {
    backendSetName: string;
    id: string;
    instancePoolId: string;
    loadBalancerId: string;
    port: number;
    state: string;
    vnicSelection: string;
}

export interface CoreClusterNetworkInstancePoolPlacementConfiguration {
    availabilityDomain: string;
    faultDomains: string[];
    primarySubnetId: string;
    primaryVnicSubnets: outputs.CoreClusterNetworkInstancePoolPlacementConfigurationPrimaryVnicSubnet[];
    secondaryVnicSubnets: outputs.CoreClusterNetworkInstancePoolPlacementConfigurationSecondaryVnicSubnet[];
}

export interface CoreClusterNetworkInstancePoolPlacementConfigurationPrimaryVnicSubnet {
    ipv6addressIpv6subnetCidrPairDetails: outputs.CoreClusterNetworkInstancePoolPlacementConfigurationPrimaryVnicSubnetIpv6addressIpv6subnetCidrPairDetail[];
    isAssignIpv6ip: boolean;
    subnetId: string;
}

export interface CoreClusterNetworkInstancePoolPlacementConfigurationPrimaryVnicSubnetIpv6addressIpv6subnetCidrPairDetail {
    ipv6subnetCidr: string;
}

export interface CoreClusterNetworkInstancePoolPlacementConfigurationSecondaryVnicSubnet {
    displayName: string;
    ipv6addressIpv6subnetCidrPairDetails: outputs.CoreClusterNetworkInstancePoolPlacementConfigurationSecondaryVnicSubnetIpv6addressIpv6subnetCidrPairDetail[];
    isAssignIpv6ip: boolean;
    subnetId: string;
}

export interface CoreClusterNetworkInstancePoolPlacementConfigurationSecondaryVnicSubnetIpv6addressIpv6subnetCidrPairDetail {
    ipv6subnetCidr: string;
}

export interface CoreClusterNetworkPlacementConfiguration {
    availabilityDomain: string;
    placementConstraint: string;
    primarySubnetId: string;
    primaryVnicSubnets?: outputs.CoreClusterNetworkPlacementConfigurationPrimaryVnicSubnets;
    secondaryVnicSubnets?: outputs.CoreClusterNetworkPlacementConfigurationSecondaryVnicSubnet[];
}

export interface CoreClusterNetworkPlacementConfigurationPrimaryVnicSubnets {
    ipv6addressIpv6subnetCidrPairDetails?: outputs.CoreClusterNetworkPlacementConfigurationPrimaryVnicSubnetsIpv6addressIpv6subnetCidrPairDetail[];
    isAssignIpv6ip: boolean;
    subnetId: string;
}

export interface CoreClusterNetworkPlacementConfigurationPrimaryVnicSubnetsIpv6addressIpv6subnetCidrPairDetail {
    ipv6subnetCidr: string;
}

export interface CoreClusterNetworkPlacementConfigurationSecondaryVnicSubnet {
    displayName: string;
    ipv6addressIpv6subnetCidrPairDetails?: outputs.CoreClusterNetworkPlacementConfigurationSecondaryVnicSubnetIpv6addressIpv6subnetCidrPairDetail[];
    isAssignIpv6ip: boolean;
    subnetId: string;
}

export interface CoreClusterNetworkPlacementConfigurationSecondaryVnicSubnetIpv6addressIpv6subnetCidrPairDetail {
    ipv6subnetCidr: string;
}

export interface CoreClusterNetworkTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface CoreComputeCapacityReportShapeAvailability {
    availabilityStatus: string;
    availableCount: string;
    faultDomain: string;
    instanceShape: string;
    instanceShapeConfig?: outputs.CoreComputeCapacityReportShapeAvailabilityInstanceShapeConfig;
}

export interface CoreComputeCapacityReportShapeAvailabilityInstanceShapeConfig {
    memoryInGbs: number;
    nvmes: number;
    ocpus: number;
}

export interface CoreComputeCapacityReportTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface CoreComputeCapacityReservationInstanceReservationConfig {
    clusterConfig?: outputs.CoreComputeCapacityReservationInstanceReservationConfigClusterConfig;
    clusterPlacementGroupId?: string;
    faultDomain?: string;
    instanceShape: string;
    instanceShapeConfig?: outputs.CoreComputeCapacityReservationInstanceReservationConfigInstanceShapeConfig;
    reservedCount: string;
    usedCount: string;
}

export interface CoreComputeCapacityReservationInstanceReservationConfigClusterConfig {
    hpcIslandId: string;
    networkBlockIds: string[];
}

export interface CoreComputeCapacityReservationInstanceReservationConfigInstanceShapeConfig {
    memoryInGbs: number;
    ocpus: number;
}

export interface CoreComputeCapacityReservationTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface CoreComputeCapacityTopologyCapacitySource {
    capacityType: string;
    compartmentId: string;
}

export interface CoreComputeCapacityTopologyTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface CoreComputeClusterTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface CoreComputeImageCapabilitySchemaTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface CoreConsoleHistoryTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface CoreCpeTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface CoreCrossConnectGroupMacsecProperties {
    encryptionCipher: string;
    isUnprotectedTrafficAllowed: boolean;
    primaryKey?: outputs.CoreCrossConnectGroupMacsecPropertiesPrimaryKey;
    state: string;
}

export interface CoreCrossConnectGroupMacsecPropertiesPrimaryKey {
    connectivityAssociationKeySecretId: string;
    connectivityAssociationKeySecretVersion: string;
    connectivityAssociationNameSecretId: string;
    connectivityAssociationNameSecretVersion: string;
}

export interface CoreCrossConnectGroupTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface CoreCrossConnectMacsecProperties {
    encryptionCipher: string;
    isUnprotectedTrafficAllowed: boolean;
    primaryKey?: outputs.CoreCrossConnectMacsecPropertiesPrimaryKey;
    state: string;
}

export interface CoreCrossConnectMacsecPropertiesPrimaryKey {
    connectivityAssociationKeySecretId: string;
    connectivityAssociationKeySecretVersion: string;
    connectivityAssociationNameSecretId: string;
    connectivityAssociationNameSecretVersion: string;
}

export interface CoreCrossConnectTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface CoreDedicatedVmHostTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface CoreDefaultDhcpOptionsOption {
    customDnsServers?: string[];
    searchDomainNames: string[];
    serverType: string;
    type: string;
}

export interface CoreDefaultDhcpOptionsTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface CoreDefaultRouteTableRouteRule {
    /**
     * @deprecated Deprecated
     */
    cidrBlock: string;
    description: string;
    destination: string;
    destinationType: string;
    networkEntityId: string;
    routeType: string;
}

export interface CoreDefaultRouteTableTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface CoreDefaultSecurityListEgressSecurityRule {
    description: string;
    destination: string;
    destinationType: string;
    icmpOptions?: outputs.CoreDefaultSecurityListEgressSecurityRuleIcmpOptions;
    protocol: string;
    stateless: boolean;
    tcpOptions?: outputs.CoreDefaultSecurityListEgressSecurityRuleTcpOptions;
    udpOptions?: outputs.CoreDefaultSecurityListEgressSecurityRuleUdpOptions;
}

export interface CoreDefaultSecurityListEgressSecurityRuleIcmpOptions {
    code?: number;
    type: number;
}

export interface CoreDefaultSecurityListEgressSecurityRuleTcpOptions {
    max?: number;
    min?: number;
    sourcePortRange?: outputs.CoreDefaultSecurityListEgressSecurityRuleTcpOptionsSourcePortRange;
}

export interface CoreDefaultSecurityListEgressSecurityRuleTcpOptionsSourcePortRange {
    max: number;
    min: number;
}

export interface CoreDefaultSecurityListEgressSecurityRuleUdpOptions {
    max?: number;
    min?: number;
    sourcePortRange?: outputs.CoreDefaultSecurityListEgressSecurityRuleUdpOptionsSourcePortRange;
}

export interface CoreDefaultSecurityListEgressSecurityRuleUdpOptionsSourcePortRange {
    max: number;
    min: number;
}

export interface CoreDefaultSecurityListIngressSecurityRule {
    description: string;
    icmpOptions?: outputs.CoreDefaultSecurityListIngressSecurityRuleIcmpOptions;
    protocol: string;
    source: string;
    sourceType: string;
    stateless?: boolean;
    tcpOptions?: outputs.CoreDefaultSecurityListIngressSecurityRuleTcpOptions;
    udpOptions?: outputs.CoreDefaultSecurityListIngressSecurityRuleUdpOptions;
}

export interface CoreDefaultSecurityListIngressSecurityRuleIcmpOptions {
    code?: number;
    type: number;
}

export interface CoreDefaultSecurityListIngressSecurityRuleTcpOptions {
    max?: number;
    min?: number;
    sourcePortRange?: outputs.CoreDefaultSecurityListIngressSecurityRuleTcpOptionsSourcePortRange;
}

export interface CoreDefaultSecurityListIngressSecurityRuleTcpOptionsSourcePortRange {
    max: number;
    min: number;
}

export interface CoreDefaultSecurityListIngressSecurityRuleUdpOptions {
    max?: number;
    min?: number;
    sourcePortRange?: outputs.CoreDefaultSecurityListIngressSecurityRuleUdpOptionsSourcePortRange;
}

export interface CoreDefaultSecurityListIngressSecurityRuleUdpOptionsSourcePortRange {
    max: number;
    min: number;
}

export interface CoreDefaultSecurityListTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface CoreDhcpOptionsOption {
    customDnsServers?: string[];
    searchDomainNames: string[];
    serverType: string;
    type: string;
}

export interface CoreDhcpOptionsTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface CoreDrgAttachmentManagementNetworkDetails {
    id: string;
    ipsecConnectionId: string;
    routeTableId: string;
    type: string;
}

export interface CoreDrgAttachmentManagementTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface CoreDrgAttachmentNetworkDetails {
    id: string;
    ids: string[];
    ipsecConnectionId: string;
    routeTableId: string;
    transportAttachmentId: string;
    transportOnlyMode: boolean;
    type: string;
    vcnRouteType: string;
}

export interface CoreDrgAttachmentTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface CoreDrgAttachmentsListDrgAllAttachment {
    id: string;
}

export interface CoreDrgAttachmentsListTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface CoreDrgDefaultDrgRouteTable {
    ipsecTunnel: string;
    remotePeeringConnection: string;
    vcn: string;
    virtualCircuit: string;
}

export interface CoreDrgRouteDistributionStatementMatchCriteria {
    attachmentType?: string;
    drgAttachmentId?: string;
    matchType?: string;
}

export interface CoreDrgRouteDistributionStatementTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface CoreDrgRouteDistributionTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface CoreDrgRouteTableRouteRuleTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface CoreDrgRouteTableTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface CoreDrgTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface CoreImageAgentFeature {
    isManagementSupported: boolean;
    isMonitoringSupported: boolean;
}

export interface CoreImageImageSourceDetails {
    bucketName?: string;
    namespaceName?: string;
    objectName?: string;
    operatingSystem?: string;
    operatingSystemVersion?: string;
    sourceImageType?: string;
    sourceType: string;
    sourceUri?: string;
}

export interface CoreImageLaunchOption {
    bootVolumeType: string;
    firmware: string;
    isConsistentVolumeNamingEnabled: boolean;
    isPvEncryptionInTransitEnabled: boolean;
    networkType: string;
    remoteDataVolumeType: string;
}

export interface CoreImageTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface CoreInstanceAgentConfig {
    areAllPluginsDisabled: boolean;
    isManagementDisabled: boolean;
    isMonitoringDisabled: boolean;
    pluginsConfigs?: outputs.CoreInstanceAgentConfigPluginsConfig[];
}

export interface CoreInstanceAgentConfigPluginsConfig {
    desiredState: string;
    name: string;
}

export interface CoreInstanceAvailabilityConfig {
    isLiveMigrationPreferred: boolean;
    recoveryAction: string;
}

export interface CoreInstanceConfigurationInstanceDetails {
    blockVolumes?: outputs.CoreInstanceConfigurationInstanceDetailsBlockVolume[];
    instanceType: string;
    launchDetails?: outputs.CoreInstanceConfigurationInstanceDetailsLaunchDetails;
    options?: outputs.CoreInstanceConfigurationInstanceDetailsOption[];
    secondaryVnics?: outputs.CoreInstanceConfigurationInstanceDetailsSecondaryVnic[];
}

export interface CoreInstanceConfigurationInstanceDetailsBlockVolume {
    attachDetails?: outputs.CoreInstanceConfigurationInstanceDetailsBlockVolumeAttachDetails;
    createDetails?: outputs.CoreInstanceConfigurationInstanceDetailsBlockVolumeCreateDetails;
    volumeId: string;
}

export interface CoreInstanceConfigurationInstanceDetailsBlockVolumeAttachDetails {
    device: string;
    displayName: string;
    isPvEncryptionInTransitEnabled: boolean;
    isReadOnly: boolean;
    isShareable: boolean;
    type: string;
    useChap: boolean;
}

export interface CoreInstanceConfigurationInstanceDetailsBlockVolumeCreateDetails {
    autotunePolicies?: outputs.CoreInstanceConfigurationInstanceDetailsBlockVolumeCreateDetailsAutotunePolicy[];
    availabilityDomain: string;
    backupPolicyId: string;
    blockVolumeReplicas?: outputs.CoreInstanceConfigurationInstanceDetailsBlockVolumeCreateDetailsBlockVolumeReplicas;
    clusterPlacementGroupId: string;
    compartmentId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    isAutoTuneEnabled: boolean;
    kmsKeyId: string;
    sizeInGbs: string;
    sourceDetails?: outputs.CoreInstanceConfigurationInstanceDetailsBlockVolumeCreateDetailsSourceDetails;
    vpusPerGb: string;
}

export interface CoreInstanceConfigurationInstanceDetailsBlockVolumeCreateDetailsAutotunePolicy {
    autotuneType: string;
    maxVpusPerGb: string;
}

export interface CoreInstanceConfigurationInstanceDetailsBlockVolumeCreateDetailsBlockVolumeReplicas {
    availabilityDomain: string;
    displayName: string;
}

export interface CoreInstanceConfigurationInstanceDetailsBlockVolumeCreateDetailsSourceDetails {
    id: string;
    type: string;
}

export interface CoreInstanceConfigurationInstanceDetailsLaunchDetails {
    agentConfig?: outputs.CoreInstanceConfigurationInstanceDetailsLaunchDetailsAgentConfig;
    availabilityConfig?: outputs.CoreInstanceConfigurationInstanceDetailsLaunchDetailsAvailabilityConfig;
    availabilityDomain: string;
    capacityReservationId: string;
    clusterPlacementGroupId: string;
    compartmentId: string;
    createVnicDetails?: outputs.CoreInstanceConfigurationInstanceDetailsLaunchDetailsCreateVnicDetails;
    dedicatedVmHostId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    extendedMetadata: {[key: string]: string};
    faultDomain: string;
    freeformTags: {[key: string]: string};
    instanceOptions?: outputs.CoreInstanceConfigurationInstanceDetailsLaunchDetailsInstanceOptions;
    ipxeScript: string;
    isPvEncryptionInTransitEnabled: boolean;
    launchMode: string;
    launchOptions?: outputs.CoreInstanceConfigurationInstanceDetailsLaunchDetailsLaunchOptions;
    metadata: {[key: string]: string};
    platformConfig?: outputs.CoreInstanceConfigurationInstanceDetailsLaunchDetailsPlatformConfig;
    preemptibleInstanceConfig?: outputs.CoreInstanceConfigurationInstanceDetailsLaunchDetailsPreemptibleInstanceConfig;
    preferredMaintenanceAction: string;
    shape: string;
    shapeConfig?: outputs.CoreInstanceConfigurationInstanceDetailsLaunchDetailsShapeConfig;
    sourceDetails?: outputs.CoreInstanceConfigurationInstanceDetailsLaunchDetailsSourceDetails;
}

export interface CoreInstanceConfigurationInstanceDetailsLaunchDetailsAgentConfig {
    areAllPluginsDisabled: boolean;
    isManagementDisabled: boolean;
    isMonitoringDisabled: boolean;
    pluginsConfigs?: outputs.CoreInstanceConfigurationInstanceDetailsLaunchDetailsAgentConfigPluginsConfig[];
}

export interface CoreInstanceConfigurationInstanceDetailsLaunchDetailsAgentConfigPluginsConfig {
    desiredState: string;
    name: string;
}

export interface CoreInstanceConfigurationInstanceDetailsLaunchDetailsAvailabilityConfig {
    isLiveMigrationPreferred: boolean;
    recoveryAction: string;
}

export interface CoreInstanceConfigurationInstanceDetailsLaunchDetailsCreateVnicDetails {
    assignIpv6ip: boolean;
    assignPrivateDnsRecord?: boolean;
    assignPublicIp: boolean;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    hostnameLabel: string;
    ipv6addressIpv6subnetCidrPairDetails?: outputs.CoreInstanceConfigurationInstanceDetailsLaunchDetailsCreateVnicDetailsIpv6addressIpv6subnetCidrPairDetail[];
    nsgIds?: string[];
    privateIp: string;
    skipSourceDestCheck: boolean;
    subnetId: string;
}

export interface CoreInstanceConfigurationInstanceDetailsLaunchDetailsCreateVnicDetailsIpv6addressIpv6subnetCidrPairDetail {
    ipv6address: string;
    ipv6subnetCidr: string;
}

export interface CoreInstanceConfigurationInstanceDetailsLaunchDetailsInstanceOptions {
    areLegacyImdsEndpointsDisabled: boolean;
}

export interface CoreInstanceConfigurationInstanceDetailsLaunchDetailsLaunchOptions {
    bootVolumeType: string;
    firmware: string;
    isConsistentVolumeNamingEnabled: boolean;
    isPvEncryptionInTransitEnabled: boolean;
    networkType: string;
    remoteDataVolumeType: string;
}

export interface CoreInstanceConfigurationInstanceDetailsLaunchDetailsPlatformConfig {
    areVirtualInstructionsEnabled: boolean;
    configMap: {[key: string]: string};
    isAccessControlServiceEnabled: boolean;
    isInputOutputMemoryManagementUnitEnabled: boolean;
    isMeasuredBootEnabled: boolean;
    isMemoryEncryptionEnabled: boolean;
    isSecureBootEnabled: boolean;
    isSymmetricMultiThreadingEnabled: boolean;
    isTrustedPlatformModuleEnabled: boolean;
    numaNodesPerSocket: string;
    percentageOfCoresEnabled: number;
    type: string;
}

export interface CoreInstanceConfigurationInstanceDetailsLaunchDetailsPreemptibleInstanceConfig {
    preemptionAction?: outputs.CoreInstanceConfigurationInstanceDetailsLaunchDetailsPreemptibleInstanceConfigPreemptionAction;
}

export interface CoreInstanceConfigurationInstanceDetailsLaunchDetailsPreemptibleInstanceConfigPreemptionAction {
    preserveBootVolume: boolean;
    type: string;
}

export interface CoreInstanceConfigurationInstanceDetailsLaunchDetailsShapeConfig {
    baselineOcpuUtilization: string;
    memoryInGbs: number;
    nvmes: number;
    ocpus: number;
    vcpus: number;
}

export interface CoreInstanceConfigurationInstanceDetailsLaunchDetailsSourceDetails {
    bootVolumeId: string;
    bootVolumeSizeInGbs: string;
    bootVolumeVpusPerGb: string;
    imageId: string;
    instanceSourceImageFilterDetails?: outputs.CoreInstanceConfigurationInstanceDetailsLaunchDetailsSourceDetailsInstanceSourceImageFilterDetails;
    kmsKeyId: string;
    sourceType: string;
}

export interface CoreInstanceConfigurationInstanceDetailsLaunchDetailsSourceDetailsInstanceSourceImageFilterDetails {
    compartmentId: string;
    definedTagsFilter: {[key: string]: string};
    operatingSystem: string;
    operatingSystemVersion: string;
}

export interface CoreInstanceConfigurationInstanceDetailsOption {
    blockVolumes?: outputs.CoreInstanceConfigurationInstanceDetailsOptionBlockVolume[];
    launchDetails?: outputs.CoreInstanceConfigurationInstanceDetailsOptionLaunchDetails;
    secondaryVnics?: outputs.CoreInstanceConfigurationInstanceDetailsOptionSecondaryVnic[];
}

export interface CoreInstanceConfigurationInstanceDetailsOptionBlockVolume {
    attachDetails?: outputs.CoreInstanceConfigurationInstanceDetailsOptionBlockVolumeAttachDetails;
    createDetails?: outputs.CoreInstanceConfigurationInstanceDetailsOptionBlockVolumeCreateDetails;
    volumeId: string;
}

export interface CoreInstanceConfigurationInstanceDetailsOptionBlockVolumeAttachDetails {
    device: string;
    displayName: string;
    isPvEncryptionInTransitEnabled: boolean;
    isReadOnly: boolean;
    isShareable: boolean;
    type: string;
    useChap: boolean;
}

export interface CoreInstanceConfigurationInstanceDetailsOptionBlockVolumeCreateDetails {
    autotunePolicies?: outputs.CoreInstanceConfigurationInstanceDetailsOptionBlockVolumeCreateDetailsAutotunePolicy[];
    availabilityDomain: string;
    backupPolicyId: string;
    blockVolumeReplicas?: outputs.CoreInstanceConfigurationInstanceDetailsOptionBlockVolumeCreateDetailsBlockVolumeReplicas;
    clusterPlacementGroupId: string;
    compartmentId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    isAutoTuneEnabled: boolean;
    kmsKeyId: string;
    sizeInGbs: string;
    sourceDetails?: outputs.CoreInstanceConfigurationInstanceDetailsOptionBlockVolumeCreateDetailsSourceDetails;
    vpusPerGb: string;
}

export interface CoreInstanceConfigurationInstanceDetailsOptionBlockVolumeCreateDetailsAutotunePolicy {
    autotuneType: string;
    maxVpusPerGb: string;
}

export interface CoreInstanceConfigurationInstanceDetailsOptionBlockVolumeCreateDetailsBlockVolumeReplicas {
    availabilityDomain: string;
    displayName: string;
}

export interface CoreInstanceConfigurationInstanceDetailsOptionBlockVolumeCreateDetailsSourceDetails {
    id: string;
    type: string;
}

export interface CoreInstanceConfigurationInstanceDetailsOptionLaunchDetails {
    agentConfig?: outputs.CoreInstanceConfigurationInstanceDetailsOptionLaunchDetailsAgentConfig;
    availabilityConfig?: outputs.CoreInstanceConfigurationInstanceDetailsOptionLaunchDetailsAvailabilityConfig;
    availabilityDomain: string;
    capacityReservationId: string;
    clusterPlacementGroupId: string;
    compartmentId: string;
    createVnicDetails?: outputs.CoreInstanceConfigurationInstanceDetailsOptionLaunchDetailsCreateVnicDetails;
    dedicatedVmHostId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    extendedMetadata: {[key: string]: string};
    faultDomain: string;
    freeformTags: {[key: string]: string};
    instanceOptions?: outputs.CoreInstanceConfigurationInstanceDetailsOptionLaunchDetailsInstanceOptions;
    ipxeScript: string;
    isPvEncryptionInTransitEnabled: boolean;
    launchMode: string;
    launchOptions?: outputs.CoreInstanceConfigurationInstanceDetailsOptionLaunchDetailsLaunchOptions;
    metadata: {[key: string]: string};
    platformConfig?: outputs.CoreInstanceConfigurationInstanceDetailsOptionLaunchDetailsPlatformConfig;
    preemptibleInstanceConfig?: outputs.CoreInstanceConfigurationInstanceDetailsOptionLaunchDetailsPreemptibleInstanceConfig;
    preferredMaintenanceAction: string;
    shape: string;
    shapeConfig?: outputs.CoreInstanceConfigurationInstanceDetailsOptionLaunchDetailsShapeConfig;
    sourceDetails?: outputs.CoreInstanceConfigurationInstanceDetailsOptionLaunchDetailsSourceDetails;
}

export interface CoreInstanceConfigurationInstanceDetailsOptionLaunchDetailsAgentConfig {
    areAllPluginsDisabled: boolean;
    isManagementDisabled: boolean;
    isMonitoringDisabled: boolean;
    pluginsConfigs?: outputs.CoreInstanceConfigurationInstanceDetailsOptionLaunchDetailsAgentConfigPluginsConfig[];
}

export interface CoreInstanceConfigurationInstanceDetailsOptionLaunchDetailsAgentConfigPluginsConfig {
    desiredState: string;
    name: string;
}

export interface CoreInstanceConfigurationInstanceDetailsOptionLaunchDetailsAvailabilityConfig {
    isLiveMigrationPreferred: boolean;
    recoveryAction: string;
}

export interface CoreInstanceConfigurationInstanceDetailsOptionLaunchDetailsCreateVnicDetails {
    assignIpv6ip: boolean;
    assignPrivateDnsRecord: boolean;
    assignPublicIp: boolean;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    hostnameLabel: string;
    ipv6addressIpv6subnetCidrPairDetails?: outputs.CoreInstanceConfigurationInstanceDetailsOptionLaunchDetailsCreateVnicDetailsIpv6addressIpv6subnetCidrPairDetail[];
    nsgIds: string[];
    privateIp: string;
    skipSourceDestCheck: boolean;
    subnetId: string;
}

export interface CoreInstanceConfigurationInstanceDetailsOptionLaunchDetailsCreateVnicDetailsIpv6addressIpv6subnetCidrPairDetail {
    ipv6address: string;
    ipv6subnetCidr: string;
}

export interface CoreInstanceConfigurationInstanceDetailsOptionLaunchDetailsInstanceOptions {
    areLegacyImdsEndpointsDisabled: boolean;
}

export interface CoreInstanceConfigurationInstanceDetailsOptionLaunchDetailsLaunchOptions {
    bootVolumeType: string;
    firmware: string;
    isConsistentVolumeNamingEnabled: boolean;
    isPvEncryptionInTransitEnabled: boolean;
    networkType: string;
    remoteDataVolumeType: string;
}

export interface CoreInstanceConfigurationInstanceDetailsOptionLaunchDetailsPlatformConfig {
    areVirtualInstructionsEnabled: boolean;
    isAccessControlServiceEnabled: boolean;
    isInputOutputMemoryManagementUnitEnabled: boolean;
    isMeasuredBootEnabled: boolean;
    isMemoryEncryptionEnabled: boolean;
    isSecureBootEnabled: boolean;
    isSymmetricMultiThreadingEnabled: boolean;
    isTrustedPlatformModuleEnabled: boolean;
    numaNodesPerSocket: string;
    percentageOfCoresEnabled: number;
    type: string;
}

export interface CoreInstanceConfigurationInstanceDetailsOptionLaunchDetailsPreemptibleInstanceConfig {
    preemptionAction?: outputs.CoreInstanceConfigurationInstanceDetailsOptionLaunchDetailsPreemptibleInstanceConfigPreemptionAction;
}

export interface CoreInstanceConfigurationInstanceDetailsOptionLaunchDetailsPreemptibleInstanceConfigPreemptionAction {
    preserveBootVolume: boolean;
    type: string;
}

export interface CoreInstanceConfigurationInstanceDetailsOptionLaunchDetailsShapeConfig {
    baselineOcpuUtilization: string;
    memoryInGbs: number;
    nvmes: number;
    ocpus: number;
    vcpus: number;
}

export interface CoreInstanceConfigurationInstanceDetailsOptionLaunchDetailsSourceDetails {
    bootVolumeId: string;
    bootVolumeSizeInGbs: string;
    bootVolumeVpusPerGb: string;
    imageId: string;
    instanceSourceImageFilterDetails?: outputs.CoreInstanceConfigurationInstanceDetailsOptionLaunchDetailsSourceDetailsInstanceSourceImageFilterDetails;
    kmsKeyId: string;
    sourceType: string;
}

export interface CoreInstanceConfigurationInstanceDetailsOptionLaunchDetailsSourceDetailsInstanceSourceImageFilterDetails {
    compartmentId: string;
    definedTagsFilter: {[key: string]: string};
    operatingSystem: string;
    operatingSystemVersion: string;
}

export interface CoreInstanceConfigurationInstanceDetailsOptionSecondaryVnic {
    createVnicDetails?: outputs.CoreInstanceConfigurationInstanceDetailsOptionSecondaryVnicCreateVnicDetails;
    displayName: string;
    nicIndex: number;
}

export interface CoreInstanceConfigurationInstanceDetailsOptionSecondaryVnicCreateVnicDetails {
    assignIpv6ip: boolean;
    assignPrivateDnsRecord: boolean;
    assignPublicIp: boolean;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    hostnameLabel: string;
    ipv6addressIpv6subnetCidrPairDetails?: outputs.CoreInstanceConfigurationInstanceDetailsOptionSecondaryVnicCreateVnicDetailsIpv6addressIpv6subnetCidrPairDetail[];
    nsgIds: string[];
    privateIp: string;
    skipSourceDestCheck: boolean;
    subnetId: string;
}

export interface CoreInstanceConfigurationInstanceDetailsOptionSecondaryVnicCreateVnicDetailsIpv6addressIpv6subnetCidrPairDetail {
    ipv6address: string;
    ipv6subnetCidr: string;
}

export interface CoreInstanceConfigurationInstanceDetailsSecondaryVnic {
    createVnicDetails?: outputs.CoreInstanceConfigurationInstanceDetailsSecondaryVnicCreateVnicDetails;
    displayName: string;
    nicIndex: number;
}

export interface CoreInstanceConfigurationInstanceDetailsSecondaryVnicCreateVnicDetails {
    assignIpv6ip: boolean;
    assignPrivateDnsRecord?: boolean;
    assignPublicIp: boolean;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    hostnameLabel: string;
    ipv6addressIpv6subnetCidrPairDetails?: outputs.CoreInstanceConfigurationInstanceDetailsSecondaryVnicCreateVnicDetailsIpv6addressIpv6subnetCidrPairDetail[];
    nsgIds?: string[];
    privateIp: string;
    skipSourceDestCheck: boolean;
    subnetId: string;
}

export interface CoreInstanceConfigurationInstanceDetailsSecondaryVnicCreateVnicDetailsIpv6addressIpv6subnetCidrPairDetail {
    ipv6address: string;
    ipv6subnetCidr: string;
}

export interface CoreInstanceConfigurationTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface CoreInstanceConsoleConnectionTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface CoreInstanceCreateVnicDetails {
    assignIpv6ip: boolean;
    assignPrivateDnsRecord?: boolean;
    assignPublicIp?: string;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    hostnameLabel: string;
    ipv6addressIpv6subnetCidrPairDetails?: outputs.CoreInstanceCreateVnicDetailsIpv6addressIpv6subnetCidrPairDetail[];
    nsgIds: string[];
    privateIp: string;
    skipSourceDestCheck: boolean;
    subnetId: string;
    vlanId: string;
}

export interface CoreInstanceCreateVnicDetailsIpv6addressIpv6subnetCidrPairDetail {
    ipv6address: string;
    ipv6subnetCidr: string;
}

export interface CoreInstanceInstanceOptions {
    areLegacyImdsEndpointsDisabled: boolean;
}

export interface CoreInstanceLaunchOptions {
    bootVolumeType: string;
    firmware: string;
    isConsistentVolumeNamingEnabled: boolean;
    isPvEncryptionInTransitEnabled: boolean;
    networkType: string;
    remoteDataVolumeType: string;
}

export interface CoreInstanceLaunchVolumeAttachment {
    device: string;
    displayName: string;
    encryptionInTransitType: string;
    isAgentAutoIscsiLoginEnabled: boolean;
    isReadOnly: boolean;
    isShareable: boolean;
    launchCreateVolumeDetails?: outputs.CoreInstanceLaunchVolumeAttachmentLaunchCreateVolumeDetails;
    type: string;
    useChap: boolean;
    volumeId: string;
}

export interface CoreInstanceLaunchVolumeAttachmentLaunchCreateVolumeDetails {
    compartmentId: string;
    displayName: string;
    kmsKeyId: string;
    sizeInGbs: string;
    volumeCreationType: string;
    vpusPerGb: string;
}

export interface CoreInstanceMaintenanceEventTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface CoreInstancePlatformConfig {
    areVirtualInstructionsEnabled: boolean;
    configMap: {[key: string]: string};
    isAccessControlServiceEnabled: boolean;
    isInputOutputMemoryManagementUnitEnabled: boolean;
    isMeasuredBootEnabled: boolean;
    isMemoryEncryptionEnabled: boolean;
    isSecureBootEnabled: boolean;
    isSymmetricMultiThreadingEnabled: boolean;
    isTrustedPlatformModuleEnabled: boolean;
    numaNodesPerSocket: string;
    percentageOfCoresEnabled: number;
    type: string;
}

export interface CoreInstancePoolInstanceLoadBalancerBackend {
    backendHealthStatus: string;
    backendName: string;
    backendSetName: string;
    loadBalancerId: string;
    state: string;
}

export interface CoreInstancePoolInstanceTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface CoreInstancePoolLoadBalancer {
    backendSetName: string;
    id: string;
    instancePoolId: string;
    loadBalancerId: string;
    port: number;
    state: string;
    vnicSelection: string;
}

export interface CoreInstancePoolPlacementConfiguration {
    availabilityDomain: string;
    faultDomains: string[];
    primarySubnetId: string;
    primaryVnicSubnets?: outputs.CoreInstancePoolPlacementConfigurationPrimaryVnicSubnets;
    secondaryVnicSubnets?: outputs.CoreInstancePoolPlacementConfigurationSecondaryVnicSubnet[];
}

export interface CoreInstancePoolPlacementConfigurationPrimaryVnicSubnets {
    ipv6addressIpv6subnetCidrPairDetails?: outputs.CoreInstancePoolPlacementConfigurationPrimaryVnicSubnetsIpv6addressIpv6subnetCidrPairDetail[];
    isAssignIpv6ip: boolean;
    subnetId: string;
}

export interface CoreInstancePoolPlacementConfigurationPrimaryVnicSubnetsIpv6addressIpv6subnetCidrPairDetail {
    ipv6subnetCidr: string;
}

export interface CoreInstancePoolPlacementConfigurationSecondaryVnicSubnet {
    displayName: string;
    ipv6addressIpv6subnetCidrPairDetails?: outputs.CoreInstancePoolPlacementConfigurationSecondaryVnicSubnetIpv6addressIpv6subnetCidrPairDetail[];
    isAssignIpv6ip: boolean;
    subnetId: string;
}

export interface CoreInstancePoolPlacementConfigurationSecondaryVnicSubnetIpv6addressIpv6subnetCidrPairDetail {
    ipv6subnetCidr: string;
}

export interface CoreInstancePoolTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface CoreInstancePreemptibleInstanceConfig {
    preemptionAction: outputs.CoreInstancePreemptibleInstanceConfigPreemptionAction;
}

export interface CoreInstancePreemptibleInstanceConfigPreemptionAction {
    preserveBootVolume: boolean;
    type: string;
}

export interface CoreInstanceShapeConfig {
    baselineOcpuUtilization: string;
    gpuDescription: string;
    gpus: number;
    localDiskDescription: string;
    localDisks: number;
    localDisksTotalSizeInGbs: number;
    maxVnicAttachments: number;
    memoryInGbs: number;
    networkingBandwidthInGbps: number;
    nvmes: number;
    ocpus: number;
    processorDescription: string;
    vcpus: number;
}

export interface CoreInstanceSourceDetails {
    bootVolumeSizeInGbs: string;
    bootVolumeVpusPerGb: string;
    instanceSourceImageFilterDetails?: outputs.CoreInstanceSourceDetailsInstanceSourceImageFilterDetails;
    isPreserveBootVolumeEnabled?: boolean;
    kmsKeyId?: string;
    sourceId: string;
    sourceType: string;
}

export interface CoreInstanceSourceDetailsInstanceSourceImageFilterDetails {
    compartmentId: string;
    definedTagsFilter: {[key: string]: string};
    operatingSystem: string;
    operatingSystemVersion: string;
}

export interface CoreInstanceTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface CoreInternetGatewayTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface CoreIpsecConnectionTunnelManagementBgpSessionInfo {
    bgpIpv6State: string;
    /**
     * @deprecated Deprecated
     */
    bgpIpv6state: string;
    bgpState: string;
    customerBgpAsn: string;
    customerInterfaceIp: string;
    customerInterfaceIpv6: string;
    oracleBgpAsn: string;
    oracleInterfaceIp: string;
    oracleInterfaceIpv6: string;
}

export interface CoreIpsecConnectionTunnelManagementDpdConfig {
    dpdMode?: string;
    dpdTimeoutInSec?: number;
}

export interface CoreIpsecConnectionTunnelManagementEncryptionDomainConfig {
    cpeTrafficSelectors: string[];
    oracleTrafficSelectors: string[];
}

export interface CoreIpsecConnectionTunnelManagementPhaseOneDetails {
    customAuthenticationAlgorithm: string;
    customDhGroup: string;
    customEncryptionAlgorithm: string;
    isCustomPhaseOneConfig: boolean;
    isIkeEstablished: boolean;
    lifetime: number;
    negotiatedAuthenticationAlgorithm: string;
    negotiatedDhGroup: string;
    negotiatedEncryptionAlgorithm: string;
    /**
     * @deprecated Deprecated
     */
    remainingLifetime: string;
    remainingLifetimeInt: number;
    remainingLifetimeLastRetrieved: string;
}

export interface CoreIpsecConnectionTunnelManagementPhaseTwoDetails {
    customAuthenticationAlgorithm: string;
    customEncryptionAlgorithm: string;
    dhGroup: string;
    isCustomPhaseTwoConfig: boolean;
    isEspEstablished: boolean;
    isPfsEnabled: boolean;
    lifetime: number;
    negotiatedAuthenticationAlgorithm: string;
    negotiatedDhGroup: string;
    negotiatedEncryptionAlgorithm: string;
    /**
     * @deprecated Deprecated
     */
    remainingLifetime: string;
    remainingLifetimeInt: number;
    remainingLifetimeLastRetrieved: string;
}

export interface CoreIpsecConnectionTunnelManagementTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface CoreIpsecTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface CoreIpv6Timeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface CoreListingResourceVersionAgreementTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface CoreLocalPeeringGatewayTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface CoreNatGatewayTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface CoreNetworkSecurityGroupSecurityRuleIcmpOptions {
    code?: number;
    type: number;
}

export interface CoreNetworkSecurityGroupSecurityRuleTcpOptions {
    destinationPortRange?: outputs.CoreNetworkSecurityGroupSecurityRuleTcpOptionsDestinationPortRange;
    sourcePortRange?: outputs.CoreNetworkSecurityGroupSecurityRuleTcpOptionsSourcePortRange;
}

export interface CoreNetworkSecurityGroupSecurityRuleTcpOptionsDestinationPortRange {
    max: number;
    min: number;
}

export interface CoreNetworkSecurityGroupSecurityRuleTcpOptionsSourcePortRange {
    max: number;
    min: number;
}

export interface CoreNetworkSecurityGroupSecurityRuleTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface CoreNetworkSecurityGroupSecurityRuleUdpOptions {
    destinationPortRange?: outputs.CoreNetworkSecurityGroupSecurityRuleUdpOptionsDestinationPortRange;
    sourcePortRange?: outputs.CoreNetworkSecurityGroupSecurityRuleUdpOptionsSourcePortRange;
}

export interface CoreNetworkSecurityGroupSecurityRuleUdpOptionsDestinationPortRange {
    max: number;
    min: number;
}

export interface CoreNetworkSecurityGroupSecurityRuleUdpOptionsSourcePortRange {
    max: number;
    min: number;
}

export interface CoreNetworkSecurityGroupTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface CorePrivateIpTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface CorePublicIpPoolCapacityTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface CorePublicIpPoolTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface CorePublicIpTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface CoreRemotePeeringConnectionTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface CoreRouteTableAttachmentTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface CoreRouteTableRouteRule {
    /**
     * @deprecated Deprecated
     */
    cidrBlock: string;
    description: string;
    destination: string;
    destinationType: string;
    networkEntityId: string;
    routeType: string;
}

export interface CoreRouteTableTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface CoreSecurityListEgressSecurityRule {
    description: string;
    destination: string;
    destinationType: string;
    icmpOptions?: outputs.CoreSecurityListEgressSecurityRuleIcmpOptions;
    protocol: string;
    stateless: boolean;
    tcpOptions?: outputs.CoreSecurityListEgressSecurityRuleTcpOptions;
    udpOptions?: outputs.CoreSecurityListEgressSecurityRuleUdpOptions;
}

export interface CoreSecurityListEgressSecurityRuleIcmpOptions {
    code?: number;
    type: number;
}

export interface CoreSecurityListEgressSecurityRuleTcpOptions {
    max?: number;
    min?: number;
    sourcePortRange?: outputs.CoreSecurityListEgressSecurityRuleTcpOptionsSourcePortRange;
}

export interface CoreSecurityListEgressSecurityRuleTcpOptionsSourcePortRange {
    max: number;
    min: number;
}

export interface CoreSecurityListEgressSecurityRuleUdpOptions {
    max?: number;
    min?: number;
    sourcePortRange?: outputs.CoreSecurityListEgressSecurityRuleUdpOptionsSourcePortRange;
}

export interface CoreSecurityListEgressSecurityRuleUdpOptionsSourcePortRange {
    max: number;
    min: number;
}

export interface CoreSecurityListIngressSecurityRule {
    description: string;
    icmpOptions?: outputs.CoreSecurityListIngressSecurityRuleIcmpOptions;
    protocol: string;
    source: string;
    sourceType: string;
    stateless?: boolean;
    tcpOptions?: outputs.CoreSecurityListIngressSecurityRuleTcpOptions;
    udpOptions?: outputs.CoreSecurityListIngressSecurityRuleUdpOptions;
}

export interface CoreSecurityListIngressSecurityRuleIcmpOptions {
    code?: number;
    type: number;
}

export interface CoreSecurityListIngressSecurityRuleTcpOptions {
    max?: number;
    min?: number;
    sourcePortRange?: outputs.CoreSecurityListIngressSecurityRuleTcpOptionsSourcePortRange;
}

export interface CoreSecurityListIngressSecurityRuleTcpOptionsSourcePortRange {
    max: number;
    min: number;
}

export interface CoreSecurityListIngressSecurityRuleUdpOptions {
    max?: number;
    min?: number;
    sourcePortRange?: outputs.CoreSecurityListIngressSecurityRuleUdpOptionsSourcePortRange;
}

export interface CoreSecurityListIngressSecurityRuleUdpOptionsSourcePortRange {
    max: number;
    min: number;
}

export interface CoreSecurityListTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface CoreServiceGatewayService {
    serviceId: string;
    serviceName: string;
}

export interface CoreServiceGatewayTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface CoreShapeManagementTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface CoreSubnetTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface CoreVcnByoipv6cidrDetail {
    byoipv6rangeId: string;
    ipv6cidrBlock: string;
}

export interface CoreVcnTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface CoreVirtualCircuitCrossConnectMapping {
    bgpMd5authKey: string;
    crossConnectOrCrossConnectGroupId: string;
    customerBgpPeeringIp: string;
    customerBgpPeeringIpv6: string;
    oracleBgpPeeringIp: string;
    oracleBgpPeeringIpv6: string;
    vlan: number;
}

export interface CoreVirtualCircuitPublicPrefix {
    cidrBlock: string;
}

export interface CoreVirtualCircuitTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface CoreVirtualNetworkByoipv6cidrDetail {
    byoipv6rangeId: string;
    ipv6cidrBlock: string;
}

export interface CoreVirtualNetworkTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface CoreVlanTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface CoreVnicAttachmentCreateVnicDetails {
    assignIpv6ip: boolean;
    assignPrivateDnsRecord?: boolean;
    assignPublicIp?: string;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    hostnameLabel: string;
    ipv6addressIpv6subnetCidrPairDetails?: outputs.CoreVnicAttachmentCreateVnicDetailsIpv6addressIpv6subnetCidrPairDetail[];
    nsgIds?: string[];
    privateIp: string;
    skipSourceDestCheck: boolean;
    subnetId: string;
    vlanId: string;
}

export interface CoreVnicAttachmentCreateVnicDetailsIpv6addressIpv6subnetCidrPairDetail {
    ipv6Address?: string;
    ipv6SubnetCidr?: string;
}

export interface CoreVnicAttachmentTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface CoreVolumeAttachmentMultipathDevice {
    ipv4: string;
    iqn: string;
    port: number;
}

export interface CoreVolumeAttachmentTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface CoreVolumeAutotunePolicy {
    autotuneType: string;
    maxVpusPerGb: string;
}

export interface CoreVolumeBackupPolicyAssignmentTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface CoreVolumeBackupPolicySchedule {
    backupType: string;
    dayOfMonth?: number;
    dayOfWeek?: string;
    hourOfDay?: number;
    month?: string;
    offsetSeconds?: number;
    offsetType?: string;
    period: string;
    retentionSeconds: number;
    timeZone: string;
}

export interface CoreVolumeBackupPolicyTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface CoreVolumeBackupSourceDetails {
    kmsKeyId?: string;
    region: string;
    volumeBackupId: string;
}

export interface CoreVolumeBackupTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface CoreVolumeBlockVolumeReplica {
    availabilityDomain: string;
    blockVolumeReplicaId: string;
    displayName: string;
}

export interface CoreVolumeGroupBackupSourceDetails {
    kmsKeyId?: string;
    region: string;
    volumeGroupBackupId: string;
}

export interface CoreVolumeGroupBackupTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface CoreVolumeGroupSourceDetails {
    type: string;
    volumeGroupBackupId?: string;
    volumeGroupId?: string;
    volumeGroupReplicaId?: string;
    volumeIds?: string[];
}

export interface CoreVolumeGroupTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface CoreVolumeGroupVolumeGroupReplica {
    availabilityDomain: string;
    displayName: string;
    volumeGroupReplicaId: string;
}

export interface CoreVolumeSourceDetails {
    id: string;
    type: string;
}

export interface CoreVolumeTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface CoreVtapTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DataLabelingServiceDatasetDatasetFormatDetails {
    formatType: string;
    textFileTypeMetadata?: outputs.DataLabelingServiceDatasetDatasetFormatDetailsTextFileTypeMetadata;
}

export interface DataLabelingServiceDatasetDatasetFormatDetailsTextFileTypeMetadata {
    columnDelimiter: string;
    columnIndex: number;
    columnName: string;
    escapeCharacter: string;
    formatType: string;
    lineDelimiter: string;
}

export interface DataLabelingServiceDatasetDatasetSourceDetails {
    bucket: string;
    namespace: string;
    prefix: string;
    sourceType: string;
}

export interface DataLabelingServiceDatasetInitialImportDatasetConfiguration {
    importFormat: outputs.DataLabelingServiceDatasetInitialImportDatasetConfigurationImportFormat;
    importMetadataPath: outputs.DataLabelingServiceDatasetInitialImportDatasetConfigurationImportMetadataPath;
}

export interface DataLabelingServiceDatasetInitialImportDatasetConfigurationImportFormat {
    name: string;
    version: string;
}

export interface DataLabelingServiceDatasetInitialImportDatasetConfigurationImportMetadataPath {
    bucket: string;
    namespace: string;
    path: string;
    sourceType: string;
}

export interface DataLabelingServiceDatasetInitialRecordGenerationConfiguration {
}

export interface DataLabelingServiceDatasetLabelSet {
    items: outputs.DataLabelingServiceDatasetLabelSetItem[];
}

export interface DataLabelingServiceDatasetLabelSetItem {
    name: string;
}

export interface DataLabelingServiceDatasetTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DataSafeAddSdmColumnsTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DataSafeAlertPolicyAlertPolicyRuleDetail {
    description: string;
    displayName: string;
    expression: string;
}

export interface DataSafeAlertPolicyRuleTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DataSafeAlertPolicyTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DataSafeAlertTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DataSafeAuditArchiveRetrievalTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DataSafeAuditPolicyAuditCondition {
    auditPolicyName: string;
    enableConditions: outputs.DataSafeAuditPolicyAuditConditionEnableCondition[];
    isDataSafeServiceAccountAudited: boolean;
    isPrivUsersManagedByDataSafe: boolean;
}

export interface DataSafeAuditPolicyAuditConditionEnableCondition {
    entityNames: string[];
    entitySelection: string;
    entityType: string;
    operationStatus: string;
}

export interface DataSafeAuditPolicyAuditSpecification {
    auditPolicyCategory: string;
    auditPolicyName: string;
    databasePolicyNames: string[];
    enableStatus: string;
    enabledEntities: string;
    isCreated: boolean;
    isEnabledForAllUsers: boolean;
    isSeededInDataSafe: boolean;
    isSeededInTarget: boolean;
    isViewOnly: boolean;
    partiallyEnabledMsg: string;
}

export interface DataSafeAuditPolicyManagementAuditCondition {
    auditPolicyName: string;
    enableConditions?: outputs.DataSafeAuditPolicyManagementAuditConditionEnableCondition[];
    isDataSafeServiceAccountAudited: boolean;
    isEnabled: boolean;
    isPrivUsersManagedByDataSafe: boolean;
}

export interface DataSafeAuditPolicyManagementAuditConditionEnableCondition {
    entityNames: string[];
    entitySelection: string;
    entityType: string;
    operationStatus: string;
}

export interface DataSafeAuditPolicyManagementAuditSpecification {
    auditPolicyCategory: string;
    auditPolicyName: string;
    databasePolicyNames: string[];
    enableStatus: string;
    enabledEntities: string;
    isCreated: boolean;
    isEnabledForAllUsers: boolean;
    isSeededInDataSafe: boolean;
    isSeededInTarget: boolean;
    isViewOnly: boolean;
    partiallyEnabledMsg: string;
}

export interface DataSafeAuditPolicyManagementTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DataSafeAuditPolicyTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DataSafeAuditProfileAuditTrail {
    auditCollectionStartTime: string;
    auditProfileId: string;
    compartmentId: string;
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    isAutoPurgeEnabled: boolean;
    lifecycleDetails: string;
    peerTargetDatabaseKey: number;
    purgeJobDetails: string;
    purgeJobStatus: string;
    purgeJobTime: string;
    state: string;
    status: string;
    systemTags: {[key: string]: string};
    targetId: string;
    timeCreated: string;
    timeLastCollected: string;
    timeUpdated: string;
    trailLocation: string;
    trailSource: string;
    workRequestId: string;
}

export interface DataSafeAuditProfileManagementTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DataSafeAuditProfileTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DataSafeAuditTrailManagementTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DataSafeAuditTrailTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DataSafeCalculateAuditVolumeAvailableAvailableAuditVolume {
    auditProfileId: string;
    monthInConsideration: string;
    trailLocation: string;
    volume: string;
}

export interface DataSafeCalculateAuditVolumeAvailableTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DataSafeCalculateAuditVolumeCollectedCollectedAuditVolume {
    archivedVolume: string;
    auditProfileId: string;
    monthInConsideration: string;
    onlineVolume: string;
}

export interface DataSafeCalculateAuditVolumeCollectedTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DataSafeCompareSecurityAssessmentTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DataSafeCompareUserAssessmentTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DataSafeDataSafeConfigurationGlobalSetting {
    isPaidUsage: boolean;
    offlineRetentionPeriod: number;
    onlineRetentionPeriod: number;
}

export interface DataSafeDataSafeConfigurationTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DataSafeDataSafePrivateEndpointTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DataSafeDatabaseSecurityConfigManagementSqlFirewallConfig {
    excludeJob: string;
    status: string;
    timeStatusUpdated: string;
    violationLogAutoPurge: string;
}

export interface DataSafeDatabaseSecurityConfigManagementTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DataSafeDatabaseSecurityConfigSqlFirewallConfig {
    excludeJob: string;
    status: string;
    timeStatusUpdated: string;
    violationLogAutoPurge: string;
}

export interface DataSafeDatabaseSecurityConfigTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DataSafeDiscoveryJobTablesForDiscovery {
    schemaName: string;
    tableNames: string[];
}

export interface DataSafeDiscoveryJobTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DataSafeDiscoveryJobsResultModifiedAttribute {
    appDefinedChildColumnKeys: string[];
    dbDefinedChildColumnKeys: string[];
}

export interface DataSafeDiscoveryJobsResultTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DataSafeLibraryMaskingFormatFormatEntry {
    columnName: string;
    description: string;
    endDate: string;
    endLength: number;
    endValue: number;
    fixedNumber: number;
    fixedString: string;
    groupingColumns: string[];
    length: number;
    libraryMaskingFormatId: string;
    pattern: string;
    postProcessingFunction: string;
    randomLists: string[];
    regularExpression: string;
    replaceWith: string;
    schemaName: string;
    sqlExpression: string;
    startDate: string;
    startLength: number;
    startPosition: number;
    startValue: number;
    tableName: string;
    type: string;
    userDefinedFunction: string;
}

export interface DataSafeLibraryMaskingFormatTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DataSafeMaskDataTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DataSafeMaskingPoliciesApplyDifferenceToMaskingColumnsTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DataSafeMaskingPoliciesMaskingColumnMaskingFormat {
    condition: string;
    description: string;
    formatEntries: outputs.DataSafeMaskingPoliciesMaskingColumnMaskingFormatFormatEntry[];
}

export interface DataSafeMaskingPoliciesMaskingColumnMaskingFormatFormatEntry {
    columnName: string;
    description: string;
    endDate: string;
    endLength: number;
    endValue: number;
    fixedNumber: number;
    fixedString: string;
    groupingColumns: string[];
    length: number;
    libraryMaskingFormatId: string;
    pattern: string;
    postProcessingFunction: string;
    randomLists: string[];
    regularExpression: string;
    replaceWith: string;
    schemaName: string;
    sqlExpression: string;
    startDate: string;
    startLength: number;
    startPosition: number;
    startValue: number;
    tableName: string;
    type: string;
    userDefinedFunction: string;
}

export interface DataSafeMaskingPoliciesMaskingColumnTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DataSafeMaskingPolicyColumnSource {
    columnSource: string;
    sensitiveDataModelId: string;
    targetId: string;
}

export interface DataSafeMaskingPolicyHealthReportManagementTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DataSafeMaskingPolicyTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DataSafeMaskingReportManagementTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DataSafeOnPremConnectorTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DataSafeReportDefinitionColumnFilter {
    expressions: string[];
    fieldName: string;
    isEnabled: boolean;
    isHidden: boolean;
    operator: string;
}

export interface DataSafeReportDefinitionColumnInfo {
    dataType: string;
    displayName: string;
    displayOrder: number;
    fieldName: string;
    isHidden: boolean;
}

export interface DataSafeReportDefinitionColumnSorting {
    fieldName: string;
    isAscending: boolean;
    sortingOrder: number;
}

export interface DataSafeReportDefinitionSummary {
    countOf: string;
    displayOrder: number;
    groupByFieldName: string;
    isHidden: boolean;
    name: string;
    scimFilter: string;
}

export interface DataSafeReportDefinitionTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DataSafeReportTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DataSafeSdmMaskingPolicyDifferenceTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DataSafeSecurityAssessmentStatistic {
    advisories: outputs.DataSafeSecurityAssessmentStatisticAdvisory[];
    deferreds: outputs.DataSafeSecurityAssessmentStatisticDeferred[];
    evaluates: outputs.DataSafeSecurityAssessmentStatisticEvaluate[];
    highRisks: outputs.DataSafeSecurityAssessmentStatisticHighRisk[];
    lowRisks: outputs.DataSafeSecurityAssessmentStatisticLowRisk[];
    mediumRisks: outputs.DataSafeSecurityAssessmentStatisticMediumRisk[];
    passes: outputs.DataSafeSecurityAssessmentStatisticPass[];
    targetsCount: number;
}

export interface DataSafeSecurityAssessmentStatisticAdvisory {
    auditingFindingsCount: number;
    authorizationControlFindingsCount: number;
    dataEncryptionFindingsCount: number;
    dbConfigurationFindingsCount: number;
    fineGrainedAccessControlFindingsCount: number;
    privilegesAndRolesFindingsCount: number;
    targetsCount: number;
    userAccountsFindingsCount: number;
}

export interface DataSafeSecurityAssessmentStatisticDeferred {
    auditingFindingsCount: number;
    authorizationControlFindingsCount: number;
    dataEncryptionFindingsCount: number;
    dbConfigurationFindingsCount: number;
    fineGrainedAccessControlFindingsCount: number;
    privilegesAndRolesFindingsCount: number;
    targetsCount: number;
    userAccountsFindingsCount: number;
}

export interface DataSafeSecurityAssessmentStatisticEvaluate {
    auditingFindingsCount: number;
    authorizationControlFindingsCount: number;
    dataEncryptionFindingsCount: number;
    dbConfigurationFindingsCount: number;
    fineGrainedAccessControlFindingsCount: number;
    privilegesAndRolesFindingsCount: number;
    targetsCount: number;
    userAccountsFindingsCount: number;
}

export interface DataSafeSecurityAssessmentStatisticHighRisk {
    auditingFindingsCount: number;
    authorizationControlFindingsCount: number;
    dataEncryptionFindingsCount: number;
    dbConfigurationFindingsCount: number;
    fineGrainedAccessControlFindingsCount: number;
    privilegesAndRolesFindingsCount: number;
    targetsCount: number;
    userAccountsFindingsCount: number;
}

export interface DataSafeSecurityAssessmentStatisticLowRisk {
    auditingFindingsCount: number;
    authorizationControlFindingsCount: number;
    dataEncryptionFindingsCount: number;
    dbConfigurationFindingsCount: number;
    fineGrainedAccessControlFindingsCount: number;
    privilegesAndRolesFindingsCount: number;
    targetsCount: number;
    userAccountsFindingsCount: number;
}

export interface DataSafeSecurityAssessmentStatisticMediumRisk {
    auditingFindingsCount: number;
    authorizationControlFindingsCount: number;
    dataEncryptionFindingsCount: number;
    dbConfigurationFindingsCount: number;
    fineGrainedAccessControlFindingsCount: number;
    privilegesAndRolesFindingsCount: number;
    targetsCount: number;
    userAccountsFindingsCount: number;
}

export interface DataSafeSecurityAssessmentStatisticPass {
    auditingFindingsCount: number;
    authorizationControlFindingsCount: number;
    dataEncryptionFindingsCount: number;
    dbConfigurationFindingsCount: number;
    fineGrainedAccessControlFindingsCount: number;
    privilegesAndRolesFindingsCount: number;
    targetsCount: number;
    userAccountsFindingsCount: number;
}

export interface DataSafeSecurityAssessmentTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DataSafeSecurityPolicyDeploymentManagementTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DataSafeSecurityPolicyDeploymentTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DataSafeSecurityPolicyManagementTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DataSafeSecurityPolicyTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DataSafeSensitiveDataModelTablesForDiscovery {
    schemaName: string;
    tableNames: string[];
}

export interface DataSafeSensitiveDataModelTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DataSafeSensitiveDataModelsApplyDiscoveryJobResultsTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DataSafeSensitiveDataModelsSensitiveColumnTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DataSafeSensitiveTypeTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DataSafeSetSecurityAssessmentBaselineManagementTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DataSafeSetSecurityAssessmentBaselineTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DataSafeSetUserAssessmentBaselineManagementTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DataSafeSetUserAssessmentBaselineTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DataSafeSqlCollectionTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DataSafeSqlFirewallPolicyManagementTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DataSafeSqlFirewallPolicyTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DataSafeTargetAlertPolicyAssociationTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DataSafeTargetDatabaseConnectionOption {
    connectionType: string;
    datasafePrivateEndpointId: string;
    onPremConnectorId: string;
}

export interface DataSafeTargetDatabaseCredentials {
    password: string;
    userName: string;
}

export interface DataSafeTargetDatabaseDatabaseDetails {
    autonomousDatabaseId: string;
    databaseType: string;
    dbSystemId: string;
    infrastructureType: string;
    instanceId: string;
    ipAddresses: string[];
    listenerPort: number;
    serviceName: string;
    vmClusterId: string;
}

export interface DataSafeTargetDatabasePeerTargetDatabase {
    databaseDetails: outputs.DataSafeTargetDatabasePeerTargetDatabaseDatabaseDetail[];
    databaseUniqueName: string;
    dataguardAssociationId: string;
    description: string;
    displayName: string;
    key: number;
    lifecycleDetails: string;
    role: string;
    state: string;
    timeCreated: string;
    tlsConfigs: outputs.DataSafeTargetDatabasePeerTargetDatabaseTlsConfig[];
}

export interface DataSafeTargetDatabasePeerTargetDatabaseDatabaseDetail {
    autonomousDatabaseId: string;
    databaseType: string;
    dbSystemId: string;
    infrastructureType: string;
    instanceId: string;
    ipAddresses: string[];
    listenerPort: number;
    serviceName: string;
    vmClusterId: string;
}

export interface DataSafeTargetDatabasePeerTargetDatabaseDatabaseDetails {
    autonomousDatabaseId: string;
    databaseType: string;
    dbSystemId: string;
    infrastructureType: string;
    instanceId: string;
    ipAddresses: string[];
    listenerPort: number;
    serviceName: string;
    vmClusterId: string;
}

export interface DataSafeTargetDatabasePeerTargetDatabaseDetail {
    databaseDetails: outputs.DataSafeTargetDatabasePeerTargetDatabaseDetailDatabaseDetails;
    dataguardAssociationId: string;
    description: string;
    displayName: string;
    tlsConfig?: outputs.DataSafeTargetDatabasePeerTargetDatabaseDetailTlsConfig;
}

export interface DataSafeTargetDatabasePeerTargetDatabaseDetailDatabaseDetails {
    autonomousDatabaseId: string;
    databaseType: string;
    dbSystemId: string;
    infrastructureType: string;
    instanceId: string;
    ipAddresses: string[];
    listenerPort: number;
    serviceName: string;
    vmClusterId: string;
}

export interface DataSafeTargetDatabasePeerTargetDatabaseDetailTlsConfig {
    certificateStoreType: string;
    keyStoreContent: string;
    status: string;
    storePassword: string;
    trustStoreContent: string;
}

export interface DataSafeTargetDatabasePeerTargetDatabaseTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DataSafeTargetDatabasePeerTargetDatabaseTlsConfig {
    certificateStoreType: string;
    keyStoreContent: string;
    status: string;
    storePassword: string;
    trustStoreContent: string;
}

export interface DataSafeTargetDatabaseTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DataSafeTargetDatabaseTlsConfig {
    certificateStoreType: string;
    keyStoreContent: string;
    status: string;
    storePassword: string;
    trustStoreContent: string;
}

export interface DataSafeUnsetSecurityAssessmentBaselineManagementTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DataSafeUnsetSecurityAssessmentBaselineTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DataSafeUnsetUserAssessmentBaselineManagementTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DataSafeUnsetUserAssessmentBaselineTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DataSafeUserAssessmentIgnoredTarget {
    lifecycleState: string;
    targetId: string;
    userAssessmentId: string;
}

export interface DataSafeUserAssessmentTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DatabaseApplicationVipTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DatabaseAutonomousContainerDatabaseBackupConfig {
    backupDestinationDetails?: outputs.DatabaseAutonomousContainerDatabaseBackupConfigBackupDestinationDetails;
    recoveryWindowInDays: number;
}

export interface DatabaseAutonomousContainerDatabaseBackupConfigBackupDestinationDetails {
    id: string;
    internetProxy: string;
    type: string;
    vpcPassword?: string;
    vpcUser: string;
}

export interface DatabaseAutonomousContainerDatabaseDataguardAssociationOperationTimeouts {
    create?: string;
    delete?: string;
}

export interface DatabaseAutonomousContainerDatabaseDataguardAssociationPeerAutonomousContainerDatabaseBackupConfig {
    backupDestinationDetails?: outputs.DatabaseAutonomousContainerDatabaseDataguardAssociationPeerAutonomousContainerDatabaseBackupConfigBackupDestinationDetail[];
    recoveryWindowInDays: number;
}

export interface DatabaseAutonomousContainerDatabaseDataguardAssociationPeerAutonomousContainerDatabaseBackupConfigBackupDestinationDetail {
    dbrsPolicyId: string;
    id: string;
    internetProxy: string;
    type: string;
    vpcPassword: string;
    vpcUser: string;
}

export interface DatabaseAutonomousContainerDatabaseDataguardAssociationTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DatabaseAutonomousContainerDatabaseDataguardRoleChangeTimeouts {
    create?: string;
    delete?: string;
}

export interface DatabaseAutonomousContainerDatabaseKeyHistoryEntry {
    id: string;
    kmsKeyVersionId: string;
    timeActivated: string;
    vaultId: string;
}

export interface DatabaseAutonomousContainerDatabaseMaintenanceWindow {
    customActionTimeoutInMins: number;
    daysOfWeeks: outputs.DatabaseAutonomousContainerDatabaseMaintenanceWindowDaysOfWeek[];
    hoursOfDays: number[];
    isCustomActionTimeoutEnabled: boolean;
    isMonthlyPatchingEnabled: boolean;
    leadTimeInWeeks: number;
    months: outputs.DatabaseAutonomousContainerDatabaseMaintenanceWindowMonth[];
    patchingMode: string;
    preference: string;
    skipRus: boolean[];
    weeksOfMonths: number[];
}

export interface DatabaseAutonomousContainerDatabaseMaintenanceWindowDaysOfWeek {
    name: string;
}

export interface DatabaseAutonomousContainerDatabaseMaintenanceWindowDetails {
    customActionTimeoutInMins: number;
    daysOfWeeks?: outputs.DatabaseAutonomousContainerDatabaseMaintenanceWindowDetailsDaysOfWeek[];
    hoursOfDays: number[];
    isCustomActionTimeoutEnabled: boolean;
    isMonthlyPatchingEnabled: boolean;
    leadTimeInWeeks: number;
    months?: outputs.DatabaseAutonomousContainerDatabaseMaintenanceWindowDetailsMonth[];
    patchingMode: string;
    preference: string;
    skipRus: boolean[];
    weeksOfMonths: number[];
}

export interface DatabaseAutonomousContainerDatabaseMaintenanceWindowDetailsDaysOfWeek {
    name: string;
}

export interface DatabaseAutonomousContainerDatabaseMaintenanceWindowDetailsMonth {
    name: string;
}

export interface DatabaseAutonomousContainerDatabaseMaintenanceWindowMonth {
    name: string;
}

export interface DatabaseAutonomousContainerDatabasePeerAutonomousContainerDatabaseBackupConfig {
    backupDestinationDetails?: outputs.DatabaseAutonomousContainerDatabasePeerAutonomousContainerDatabaseBackupConfigBackupDestinationDetail[];
    recoveryWindowInDays: number;
}

export interface DatabaseAutonomousContainerDatabasePeerAutonomousContainerDatabaseBackupConfigBackupDestinationDetail {
    id: string;
    internetProxy: string;
    type: string;
    vpcPassword: string;
    vpcUser: string;
}

export interface DatabaseAutonomousContainerDatabaseTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DatabaseAutonomousDatabaseApexDetail {
    apexVersion: string;
    ordsVersion: string;
}

export interface DatabaseAutonomousDatabaseBackupBackupDestinationDetails {
    id: string;
    internetProxy: string;
    type: string;
    vpcPassword: string;
    vpcUser: string;
}

export interface DatabaseAutonomousDatabaseBackupConfig {
    manualBackupBucketName: string;
    manualBackupType: string;
}

export interface DatabaseAutonomousDatabaseBackupTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DatabaseAutonomousDatabaseConnectionString {
    allConnectionStrings: {[key: string]: string};
    dedicated: string;
    high: string;
    low: string;
    medium: string;
    profiles: outputs.DatabaseAutonomousDatabaseConnectionStringProfile[];
}

export interface DatabaseAutonomousDatabaseConnectionStringProfile {
    consumerGroup: string;
    displayName: string;
    hostFormat: string;
    isRegional: boolean;
    protocol: string;
    sessionMode: string;
    syntaxFormat: string;
    tlsAuthentication: string;
    value: string;
}

export interface DatabaseAutonomousDatabaseConnectionUrl {
    apexUrl: string;
    databaseTransformsUrl: string;
    graphStudioUrl: string;
    machineLearningNotebookUrl: string;
    machineLearningUserManagementUrl: string;
    mongoDbUrl: string;
    ordsUrl: string;
    sqlDevWebUrl: string;
}

export interface DatabaseAutonomousDatabaseCustomerContact {
    email: string;
}

export interface DatabaseAutonomousDatabaseDbToolsDetail {
    computeCount: number;
    isEnabled: boolean;
    maxIdleTimeInMinutes: number;
    name: string;
}

export interface DatabaseAutonomousDatabaseInstanceWalletManagementTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DatabaseAutonomousDatabaseKeyHistoryEntry {
    id: string;
    kmsKeyVersionId: string;
    timeActivated: string;
    vaultId: string;
}

export interface DatabaseAutonomousDatabaseLocalStandbyDb {
    availabilityDomain: string;
    lagTimeInSeconds: number;
    lifecycleDetails: string;
    state: string;
    timeDataGuardRoleChanged: string;
    timeDisasterRecoveryRoleChanged: string;
}

export interface DatabaseAutonomousDatabaseLongTermBackupSchedule {
    isDisabled: boolean;
    repeatCadence: string;
    retentionPeriodInDays: number;
    timeOfBackup: string;
}

export interface DatabaseAutonomousDatabasePublicConnectionUrl {
    apexUrl: string;
    databaseTransformsUrl: string;
    graphStudioUrl: string;
    machineLearningNotebookUrl: string;
    machineLearningUserManagementUrl: string;
    mongoDbUrl: string;
    ordsUrl: string;
    sqlDevWebUrl: string;
}

export interface DatabaseAutonomousDatabaseRegionalWalletManagementTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DatabaseAutonomousDatabaseRemoteDisasterRecoveryConfiguration {
    disasterRecoveryType: string;
    isReplicateAutomaticBackups: boolean;
    isSnapshotStandby: boolean;
    timeSnapshotStandbyEnabledTill: string;
}

export interface DatabaseAutonomousDatabaseResourcePoolSummary {
    isDisabled: boolean;
    poolSize: number;
}

export interface DatabaseAutonomousDatabaseSaasAdminUserTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DatabaseAutonomousDatabaseScheduledOperation {
    dayOfWeek: outputs.DatabaseAutonomousDatabaseScheduledOperationDayOfWeek;
    scheduledStartTime: string;
    scheduledStopTime: string;
}

export interface DatabaseAutonomousDatabaseScheduledOperationDayOfWeek {
    name: string;
}

export interface DatabaseAutonomousDatabaseSoftwareImageTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DatabaseAutonomousDatabaseStandbyDb {
    availabilityDomain: string;
    lagTimeInSeconds: number;
    lifecycleDetails: string;
    state: string;
    timeDataGuardRoleChanged: string;
    timeDisasterRecoveryRoleChanged: string;
}

export interface DatabaseAutonomousDatabaseTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DatabaseAutonomousDatabaseWalletTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DatabaseAutonomousExadataInfrastructureMaintenanceWindow {
    customActionTimeoutInMins: number;
    daysOfWeeks: outputs.DatabaseAutonomousExadataInfrastructureMaintenanceWindowDaysOfWeek[];
    hoursOfDays: number[];
    isCustomActionTimeoutEnabled: boolean;
    isMonthlyPatchingEnabled: boolean;
    leadTimeInWeeks: number;
    months: outputs.DatabaseAutonomousExadataInfrastructureMaintenanceWindowMonth[];
    patchingMode: string;
    preference: string;
    skipRus: boolean[];
    weeksOfMonths: number[];
}

export interface DatabaseAutonomousExadataInfrastructureMaintenanceWindowDaysOfWeek {
    name: string;
}

export interface DatabaseAutonomousExadataInfrastructureMaintenanceWindowDetails {
    customActionTimeoutInMins: number;
    daysOfWeeks?: outputs.DatabaseAutonomousExadataInfrastructureMaintenanceWindowDetailsDaysOfWeek[];
    hoursOfDays: number[];
    isCustomActionTimeoutEnabled: boolean;
    isMonthlyPatchingEnabled: boolean;
    leadTimeInWeeks: number;
    months?: outputs.DatabaseAutonomousExadataInfrastructureMaintenanceWindowDetailsMonth[];
    patchingMode: string;
    preference: string;
    skipRus: boolean[];
    weeksOfMonths: number[];
}

export interface DatabaseAutonomousExadataInfrastructureMaintenanceWindowDetailsDaysOfWeek {
    name: string;
}

export interface DatabaseAutonomousExadataInfrastructureMaintenanceWindowDetailsMonth {
    name: string;
}

export interface DatabaseAutonomousExadataInfrastructureMaintenanceWindowMonth {
    name: string;
}

export interface DatabaseAutonomousExadataInfrastructureTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DatabaseAutonomousVmClusterMaintenanceWindow {
    customActionTimeoutInMins: number;
    daysOfWeeks: outputs.DatabaseAutonomousVmClusterMaintenanceWindowDaysOfWeek[];
    hoursOfDays: number[];
    isCustomActionTimeoutEnabled: boolean;
    isMonthlyPatchingEnabled: boolean;
    leadTimeInWeeks: number;
    months: outputs.DatabaseAutonomousVmClusterMaintenanceWindowMonth[];
    patchingMode: string;
    preference: string;
    skipRus: boolean[];
    weeksOfMonths: number[];
}

export interface DatabaseAutonomousVmClusterMaintenanceWindowDaysOfWeek {
    name: string;
}

export interface DatabaseAutonomousVmClusterMaintenanceWindowDetail {
    customActionTimeoutInMins: number;
    daysOfWeeks?: outputs.DatabaseAutonomousVmClusterMaintenanceWindowDetailDaysOfWeek[];
    hoursOfDays: number[];
    isCustomActionTimeoutEnabled: boolean;
    isMonthlyPatchingEnabled: boolean;
    leadTimeInWeeks: number;
    months?: outputs.DatabaseAutonomousVmClusterMaintenanceWindowDetailMonth[];
    patchingMode: string;
    preference: string;
    skipRus: boolean[];
    weeksOfMonths: number[];
}

export interface DatabaseAutonomousVmClusterMaintenanceWindowDetailDaysOfWeek {
    name: string;
}

export interface DatabaseAutonomousVmClusterMaintenanceWindowDetailMonth {
    name: string;
}

export interface DatabaseAutonomousVmClusterMaintenanceWindowMonth {
    name: string;
}

export interface DatabaseAutonomousVmClusterOrdsCertificateManagementTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DatabaseAutonomousVmClusterSslCertificateManagementTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DatabaseAutonomousVmClusterTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DatabaseBackupCancelManagementTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DatabaseBackupDestinationAssociatedDatabase {
    dbName: string;
    id: string;
}

export interface DatabaseBackupDestinationMountTypeDetails {
    localMountPointPath: string;
    mountType: string;
    nfsServerExport: string;
    nfsServers: string[];
}

export interface DatabaseBackupDestinationTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DatabaseBackupTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DatabaseCloudAutonomousVmClusterMaintenanceWindow {
    customActionTimeoutInMins: number;
    daysOfWeeks: outputs.DatabaseCloudAutonomousVmClusterMaintenanceWindowDaysOfWeek[];
    hoursOfDays: number[];
    isCustomActionTimeoutEnabled: boolean;
    isMonthlyPatchingEnabled: boolean;
    leadTimeInWeeks: number;
    months: outputs.DatabaseCloudAutonomousVmClusterMaintenanceWindowMonth[];
    patchingMode: string;
    preference: string;
    skipRus: boolean[];
    weeksOfMonths: number[];
}

export interface DatabaseCloudAutonomousVmClusterMaintenanceWindowDaysOfWeek {
    name: string;
}

export interface DatabaseCloudAutonomousVmClusterMaintenanceWindowDetails {
    customActionTimeoutInMins: number;
    daysOfWeeks?: outputs.DatabaseCloudAutonomousVmClusterMaintenanceWindowDetailsDaysOfWeek[];
    hoursOfDays: number[];
    isCustomActionTimeoutEnabled: boolean;
    isMonthlyPatchingEnabled: boolean;
    leadTimeInWeeks: number;
    months?: outputs.DatabaseCloudAutonomousVmClusterMaintenanceWindowDetailsMonth[];
    patchingMode: string;
    preference: string;
    skipRus: boolean[];
    weeksOfMonths: number[];
}

export interface DatabaseCloudAutonomousVmClusterMaintenanceWindowDetailsDaysOfWeek {
    name: string;
}

export interface DatabaseCloudAutonomousVmClusterMaintenanceWindowDetailsMonth {
    name: string;
}

export interface DatabaseCloudAutonomousVmClusterMaintenanceWindowMonth {
    name: string;
}

export interface DatabaseCloudAutonomousVmClusterTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DatabaseCloudDatabaseManagementCredentialdetails {
    passwordSecretId: string;
    userName: string;
}

export interface DatabaseCloudDatabaseManagementTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DatabaseCloudExadataInfrastructureCustomerContact {
    email: string;
}

export interface DatabaseCloudExadataInfrastructureDefinedFileSystemConfiguration {
    isBackupPartition: boolean;
    isResizable: boolean;
    minSizeGb: number;
    mountPoint: string;
}

export interface DatabaseCloudExadataInfrastructureMaintenanceWindow {
    customActionTimeoutInMins: number;
    daysOfWeeks?: outputs.DatabaseCloudExadataInfrastructureMaintenanceWindowDaysOfWeek[];
    hoursOfDays: number[];
    isCustomActionTimeoutEnabled: boolean;
    isMonthlyPatchingEnabled: boolean;
    leadTimeInWeeks: number;
    months?: outputs.DatabaseCloudExadataInfrastructureMaintenanceWindowMonth[];
    patchingMode: string;
    preference: string;
    skipRus: boolean[];
    weeksOfMonths: number[];
}

export interface DatabaseCloudExadataInfrastructureMaintenanceWindowDaysOfWeek {
    name: string;
}

export interface DatabaseCloudExadataInfrastructureMaintenanceWindowMonth {
    name: string;
}

export interface DatabaseCloudExadataInfrastructureTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DatabaseCloudVmClusterDataCollectionOptions {
    isDiagnosticsEventsEnabled: boolean;
    isHealthMonitoringEnabled: boolean;
    isIncidentLogsEnabled: boolean;
}

export interface DatabaseCloudVmClusterFileSystemConfigurationDetail {
    fileSystemSizeGb: number;
    mountPoint: string;
}

export interface DatabaseCloudVmClusterIormConfigCach {
    dbPlans: outputs.DatabaseCloudVmClusterIormConfigCachDbPlan[];
    lifecycleDetails: string;
    objective: string;
    state: string;
}

export interface DatabaseCloudVmClusterIormConfigCachDbPlan {
    dbName: string;
    flashCacheLimit: string;
    share: number;
}

export interface DatabaseCloudVmClusterIormConfigDbPlan {
    dbName: string;
    flashCacheLimit: string;
    share: number;
}

export interface DatabaseCloudVmClusterIormConfigTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DatabaseCloudVmClusterTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DatabaseDataGuardAssociationDataCollectionOptions {
    isDiagnosticsEventsEnabled: boolean;
    isHealthMonitoringEnabled: boolean;
    isIncidentLogsEnabled: boolean;
}

export interface DatabaseDataGuardAssociationTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DatabaseDatabaseConnectionString {
    allConnectionStrings: {[key: string]: string};
    cdbDefault: string;
    cdbIpDefault: string;
}

export interface DatabaseDatabaseDatabase {
    adminPassword: string;
    backupId?: string;
    backupTdePassword?: string;
    characterSet: string;
    databaseSoftwareImageId: string;
    dbBackupConfig?: outputs.DatabaseDatabaseDatabaseDbBackupConfig;
    dbName: string;
    dbUniqueName: string;
    dbWorkload: string;
    definedTags: {[key: string]: string};
    freeformTags: {[key: string]: string};
    kmsKeyId: string;
    kmsKeyVersionId: string;
    ncharacterSet: string;
    pdbName: string;
    pluggableDatabases: string[];
    sidPrefix: string;
    tdeWalletPassword: string;
    vaultId: string;
}

export interface DatabaseDatabaseDatabaseDbBackupConfig {
    autoBackupEnabled: boolean;
    autoBackupWindow: string;
    autoFullBackupDay?: string;
    autoFullBackupWindow: string;
    backupDeletionPolicy: string;
    backupDestinationDetails?: outputs.DatabaseDatabaseDatabaseDbBackupConfigBackupDestinationDetail[];
    recoveryWindowInDays: number;
    runImmediateFullBackup: boolean;
}

export interface DatabaseDatabaseDatabaseDbBackupConfigBackupDestinationDetail {
    dbrsPolicyId: string;
    id: string;
    type?: string;
    vpcUser?: string;
}

export interface DatabaseDatabaseDatabaseManagementConfig {
    managementStatus: string;
    managementType: string;
}

export interface DatabaseDatabaseDbBackupConfig {
    autoBackupEnabled: boolean;
    autoBackupWindow: string;
    autoFullBackupDay: string;
    autoFullBackupWindow: string;
    backupDeletionPolicy: string;
    backupDestinationDetails: outputs.DatabaseDatabaseDbBackupConfigBackupDestinationDetail[];
    recoveryWindowInDays: number;
    runImmediateFullBackup: boolean;
}

export interface DatabaseDatabaseDbBackupConfigBackupDestinationDetail {
    dbrsPolicyId: string;
    id: string;
    type: string;
    vpcUser: string;
}

export interface DatabaseDatabaseSoftwareImageTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DatabaseDatabaseTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DatabaseDatabaseUpgradeConnectionString {
    allConnectionStrings: {[key: string]: string};
    cdbDefault: string;
    cdbIpDefault: string;
}

export interface DatabaseDatabaseUpgradeDatabaseUpgradeSourceDetails {
    databaseSoftwareImageId: string;
    dbVersion: string;
    options: string;
    source: string;
}

export interface DatabaseDatabaseUpgradeDbBackupConfig {
    autoBackupEnabled: boolean;
    autoBackupWindow: string;
    autoFullBackupDay: string;
    autoFullBackupWindow: string;
    backupDeletionPolicy: string;
    backupDestinationDetails: outputs.DatabaseDatabaseUpgradeDbBackupConfigBackupDestinationDetail[];
    recoveryWindowInDays: number;
    runImmediateFullBackup: boolean;
}

export interface DatabaseDatabaseUpgradeDbBackupConfigBackupDestinationDetail {
    dbrsPolicyId: string;
    id: string;
    internetProxy: string;
    type: string;
    vpcPassword: string;
    vpcUser: string;
}

export interface DatabaseDatabaseUpgradeTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DatabaseDbHomeDatabase {
    adminPassword: string;
    backupId: string;
    backupTdePassword: string;
    characterSet: string;
    connectionStrings: outputs.DatabaseDbHomeDatabaseConnectionString[];
    databaseId: string;
    databaseSoftwareImageId: string;
    dbBackupConfig?: outputs.DatabaseDbHomeDatabaseDbBackupConfig;
    dbName: string;
    dbUniqueName: string;
    dbWorkload: string;
    definedTags: {[key: string]: string};
    freeformTags: {[key: string]: string};
    id: string;
    keyStoreId: string;
    kmsKeyId: string;
    kmsKeyVersionId: string;
    lifecycleDetails: string;
    ncharacterSet: string;
    oneOffPatches: string[];
    pdbName: string;
    pluggableDatabases: string[];
    sidPrefix: string;
    state: string;
    tdeWalletPassword: string;
    timeCreated: string;
    timeStampForPointInTimeRecovery: string;
    vaultId: string;
}

export interface DatabaseDbHomeDatabaseConnectionString {
    allConnectionStrings: {[key: string]: string};
    cdbDefault: string;
    cdbIpDefault: string;
}

export interface DatabaseDbHomeDatabaseDbBackupConfig {
    autoBackupEnabled: boolean;
    autoBackupWindow: string;
    autoFullBackupDay?: string;
    autoFullBackupWindow: string;
    backupDeletionPolicy: string;
    backupDestinationDetails?: outputs.DatabaseDbHomeDatabaseDbBackupConfigBackupDestinationDetail[];
    recoveryWindowInDays: number;
    runImmediateFullBackup: boolean;
}

export interface DatabaseDbHomeDatabaseDbBackupConfigBackupDestinationDetail {
    dbrsPolicyId: string;
    id: string;
    type: string;
}

export interface DatabaseDbHomeTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DatabaseDbNodeConsoleConnectionTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DatabaseDbNodeConsoleHistoryTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DatabaseDbNodeTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DatabaseDbSystemDataCollectionOptions {
    isDiagnosticsEventsEnabled: boolean;
    isHealthMonitoringEnabled: boolean;
    isIncidentLogsEnabled: boolean;
}

export interface DatabaseDbSystemDbHome {
    createAsync?: boolean;
    database: outputs.DatabaseDbSystemDbHomeDatabase;
    databaseSoftwareImageId: string;
    dbHomeLocation: string;
    dbVersion: string;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    lastPatchHistoryEntryId: string;
    lifecycleDetails: string;
    state: string;
    timeCreated: string;
}

export interface DatabaseDbSystemDbHomeDatabase {
    adminPassword: string;
    backupId: string;
    backupTdePassword: string;
    characterSet: string;
    connectionStrings: outputs.DatabaseDbSystemDbHomeDatabaseConnectionString[];
    databaseId: string;
    databaseSoftwareImageId: string;
    dbBackupConfig?: outputs.DatabaseDbSystemDbHomeDatabaseDbBackupConfig;
    dbDomain: string;
    dbName: string;
    dbUniqueName: string;
    dbWorkload: string;
    definedTags: {[key: string]: string};
    freeformTags: {[key: string]: string};
    id: string;
    kmsKeyId: string;
    kmsKeyVersionId: string;
    lifecycleDetails: string;
    ncharacterSet: string;
    pdbName: string;
    pluggableDatabases: string[];
    state: string;
    tdeWalletPassword: string;
    timeCreated: string;
    timeStampForPointInTimeRecovery: string;
    vaultId: string;
}

export interface DatabaseDbSystemDbHomeDatabaseConnectionString {
    allConnectionStrings: {[key: string]: string};
    cdbDefault: string;
    cdbIpDefault: string;
}

export interface DatabaseDbSystemDbHomeDatabaseDbBackupConfig {
    autoBackupEnabled: boolean;
    autoBackupWindow: string;
    autoFullBackupDay?: string;
    autoFullBackupWindow: string;
    backupDeletionPolicy: string;
    backupDestinationDetails?: outputs.DatabaseDbSystemDbHomeDatabaseDbBackupConfigBackupDestinationDetail[];
    recoveryWindowInDays: number;
    runImmediateFullBackup: boolean;
}

export interface DatabaseDbSystemDbHomeDatabaseDbBackupConfigBackupDestinationDetail {
    dbrsPolicyId: string;
    id: string;
    type: string;
}

export interface DatabaseDbSystemDbSystemOptions {
    storageManagement: string;
}

export interface DatabaseDbSystemIormConfigCach {
    dbPlans: outputs.DatabaseDbSystemIormConfigCachDbPlan[];
    dbSystemId: string;
    lifecycleDetails: string;
    objective: string;
    state: string;
}

export interface DatabaseDbSystemIormConfigCachDbPlan {
    dbName: string;
    flashCacheLimit: string;
    share: number;
}

export interface DatabaseDbSystemMaintenanceWindow {
    customActionTimeoutInMins: number;
    daysOfWeeks: outputs.DatabaseDbSystemMaintenanceWindowDaysOfWeek[];
    hoursOfDays: number[];
    isCustomActionTimeoutEnabled: boolean;
    isMonthlyPatchingEnabled: boolean;
    leadTimeInWeeks: number;
    months: outputs.DatabaseDbSystemMaintenanceWindowMonth[];
    patchingMode: string;
    preference: string;
    skipRus: boolean[];
    weeksOfMonths: number[];
}

export interface DatabaseDbSystemMaintenanceWindowDaysOfWeek {
    name: string;
}

export interface DatabaseDbSystemMaintenanceWindowDetails {
    customActionTimeoutInMins: number;
    daysOfWeeks?: outputs.DatabaseDbSystemMaintenanceWindowDetailsDaysOfWeek[];
    hoursOfDays: number[];
    isCustomActionTimeoutEnabled: boolean;
    isMonthlyPatchingEnabled: boolean;
    leadTimeInWeeks: number;
    months?: outputs.DatabaseDbSystemMaintenanceWindowDetailsMonth[];
    patchingMode: string;
    preference: string;
    skipRus: boolean[];
    weeksOfMonths: number[];
}

export interface DatabaseDbSystemMaintenanceWindowDetailsDaysOfWeek {
    name: string;
}

export interface DatabaseDbSystemMaintenanceWindowDetailsMonth {
    name: string;
}

export interface DatabaseDbSystemMaintenanceWindowMonth {
    name: string;
}

export interface DatabaseDbSystemTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DatabaseDbSystemsUpgradeDbSystemOption {
    storageManagement: string;
}

export interface DatabaseDbSystemsUpgradeIormConfigCach {
    dbPlans: outputs.DatabaseDbSystemsUpgradeIormConfigCachDbPlan[];
    lifecycleDetails: string;
    objective: string;
    state: string;
}

export interface DatabaseDbSystemsUpgradeIormConfigCachDbPlan {
    dbName: string;
    flashCacheLimit: string;
    share: number;
}

export interface DatabaseDbSystemsUpgradeMaintenanceWindow {
    daysOfWeeks: outputs.DatabaseDbSystemsUpgradeMaintenanceWindowDaysOfWeek[];
    hoursOfDays: number[];
    leadTimeInWeeks: number;
    months: outputs.DatabaseDbSystemsUpgradeMaintenanceWindowMonth[];
    preference: string;
    weeksOfMonths: number[];
}

export interface DatabaseDbSystemsUpgradeMaintenanceWindowDaysOfWeek {
    name: string;
}

export interface DatabaseDbSystemsUpgradeMaintenanceWindowMonth {
    name: string;
}

export interface DatabaseDbSystemsUpgradeTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DatabaseExadataInfrastructureComputeContact {
    email: string;
    isContactMosValidated: boolean;
    isPrimary: boolean;
    name: string;
    phoneNumber: string;
}

export interface DatabaseExadataInfrastructureComputeMaintenanceWindow {
    customActionTimeoutInMins: number;
    daysOfWeeks: outputs.DatabaseExadataInfrastructureComputeMaintenanceWindowDaysOfWeek[];
    hoursOfDays: number[];
    isCustomActionTimeoutEnabled: boolean;
    isMonthlyPatchingEnabled: boolean;
    leadTimeInWeeks: number;
    months: outputs.DatabaseExadataInfrastructureComputeMaintenanceWindowMonth[];
    patchingMode: string;
    preference: string;
    weeksOfMonths: number[];
}

export interface DatabaseExadataInfrastructureComputeMaintenanceWindowDaysOfWeek {
    name: string;
}

export interface DatabaseExadataInfrastructureComputeMaintenanceWindowMonth {
    name: string;
}

export interface DatabaseExadataInfrastructureComputeTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DatabaseExadataInfrastructureContact {
    email: string;
    isContactMosValidated: boolean;
    isPrimary: boolean;
    name: string;
    phoneNumber?: string;
}

export interface DatabaseExadataInfrastructureDefinedFileSystemConfiguration {
    isBackupPartition: boolean;
    isResizable: boolean;
    minSizeGb: number;
    mountPoint: string;
}

export interface DatabaseExadataInfrastructureMaintenanceWindow {
    customActionTimeoutInMins: number;
    daysOfWeeks?: outputs.DatabaseExadataInfrastructureMaintenanceWindowDaysOfWeek[];
    hoursOfDays: number[];
    isCustomActionTimeoutEnabled: boolean;
    isMonthlyPatchingEnabled: boolean;
    leadTimeInWeeks: number;
    months?: outputs.DatabaseExadataInfrastructureMaintenanceWindowMonth[];
    patchingMode: string;
    preference: string;
    skipRus: boolean[];
    weeksOfMonths: number[];
}

export interface DatabaseExadataInfrastructureMaintenanceWindowDaysOfWeek {
    name: string;
}

export interface DatabaseExadataInfrastructureMaintenanceWindowMonth {
    name: string;
}

export interface DatabaseExadataInfrastructureNetworkBondingModeDetails {
    backupNetworkBondingMode: string;
    clientNetworkBondingMode: string;
    drNetworkBondingMode: string;
}

export interface DatabaseExadataInfrastructureStorageContact {
    email: string;
    isContactMosValidated: boolean;
    isPrimary: boolean;
    name: string;
    phoneNumber?: string;
}

export interface DatabaseExadataInfrastructureStorageMaintenanceWindow {
    daysOfWeeks?: outputs.DatabaseExadataInfrastructureStorageMaintenanceWindowDaysOfWeek[];
    hoursOfDays: number[];
    leadTimeInWeeks: number;
    months?: outputs.DatabaseExadataInfrastructureStorageMaintenanceWindowMonth[];
    preference: string;
    weeksOfMonths: number[];
}

export interface DatabaseExadataInfrastructureStorageMaintenanceWindowDaysOfWeek {
    name: string;
}

export interface DatabaseExadataInfrastructureStorageMaintenanceWindowMonth {
    name: string;
}

export interface DatabaseExadataInfrastructureStorageTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DatabaseExadataInfrastructureTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DatabaseExadataIormConfigDbPlan {
    dbName: string;
    flashCacheLimit: string;
    share: number;
}

export interface DatabaseExadataIormConfigTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DatabaseExadbVmClusterDataCollectionOptions {
    isDiagnosticsEventsEnabled: boolean;
    isHealthMonitoringEnabled: boolean;
    isIncidentLogsEnabled: boolean;
}

export interface DatabaseExadbVmClusterIormConfigCach {
    dbPlans: outputs.DatabaseExadbVmClusterIormConfigCachDbPlan[];
    lifecycleDetails: string;
    objective: string;
    state: string;
}

export interface DatabaseExadbVmClusterIormConfigCachDbPlan {
    dbName: string;
    flashCacheLimit: string;
    share: number;
}

export interface DatabaseExadbVmClusterNodeConfig {
    enabledEcpuCountPerNode: number;
    memorySizeInGbsPerNode: number;
    snapshotFileSystemStorageSizeGbsPerNode: number;
    totalEcpuCountPerNode: number;
    totalFileSystemStorageSizeGbsPerNode: number;
    vmFileSystemStorageSizeGbsPerNode: number;
}

export interface DatabaseExadbVmClusterNodeResource {
    nodeHostname: string;
    nodeId: string;
    nodeName: string;
    state: string;
}

export interface DatabaseExadbVmClusterTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DatabaseExascaleDbStorageVaultHighCapacityDatabaseStorage {
    availableSizeInGbs: number;
    totalSizeInGbs: number;
}

export interface DatabaseExascaleDbStorageVaultTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DatabaseExternalContainerDatabaseDatabaseManagementConfig {
    databaseManagementConnectionId: string;
    databaseManagementStatus: string;
    licenseModel: string;
}

export interface DatabaseExternalContainerDatabaseManagementTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DatabaseExternalContainerDatabaseStackMonitoringConfig {
    stackMonitoringConnectorId: string;
    stackMonitoringStatus: string;
}

export interface DatabaseExternalContainerDatabaseTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DatabaseExternalDatabaseConnectorConnectionCredentials {
    credentialName: string;
    credentialType: string;
    password?: string;
    role: string;
    sslSecretId: string;
    username?: string;
}

export interface DatabaseExternalDatabaseConnectorConnectionString {
    hostname: string;
    port: number;
    protocol: string;
    service: string;
}

export interface DatabaseExternalDatabaseConnectorTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DatabaseExternalNonContainerDatabaseDatabaseManagementConfig {
    databaseManagementConnectionId: string;
    databaseManagementStatus: string;
    licenseModel: string;
}

export interface DatabaseExternalNonContainerDatabaseManagementTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DatabaseExternalNonContainerDatabaseOperationsInsightsConfig {
    operationsInsightsConnectorId: string;
    operationsInsightsStatus: string;
}

export interface DatabaseExternalNonContainerDatabaseOperationsInsightsManagementTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DatabaseExternalNonContainerDatabaseStackMonitoringConfig {
    stackMonitoringConnectorId: string;
    stackMonitoringStatus: string;
}

export interface DatabaseExternalNonContainerDatabaseTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DatabaseExternalPluggableDatabaseDatabaseManagementConfig {
    databaseManagementConnectionId: string;
    databaseManagementStatus: string;
    licenseModel: string;
}

export interface DatabaseExternalPluggableDatabaseManagementTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DatabaseExternalPluggableDatabaseOperationsInsightsConfig {
    operationsInsightsConnectorId: string;
    operationsInsightsStatus: string;
}

export interface DatabaseExternalPluggableDatabaseOperationsInsightsManagementTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DatabaseExternalPluggableDatabaseStackMonitoringConfig {
    stackMonitoringConnectorId: string;
    stackMonitoringStatus: string;
}

export interface DatabaseExternalPluggableDatabaseTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DatabaseExternalcontainerdatabasesStackMonitoringTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DatabaseExternalnoncontainerdatabasesStackMonitoringTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DatabaseExternalpluggabledatabasesStackMonitoringTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DatabaseKeyStoreAssociatedDatabase {
    dbName: string;
    id: string;
}

export interface DatabaseKeyStoreTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DatabaseKeyStoreTypeDetails {
    adminUsername: string;
    connectionIps: string[];
    secretId: string;
    type: string;
    vaultId: string;
}

export interface DatabaseMaintenanceRunEstimatedPatchingTime {
    estimatedDbServerPatchingTime: number;
    estimatedNetworkSwitchesPatchingTime: number;
    estimatedStorageServerPatchingTime: number;
    totalEstimatedPatchingTime: number;
}

export interface DatabaseMaintenanceRunTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DatabaseManagementAutonomousDatabaseAutonomousDatabaseDbmFeaturesManagementFeatureDetails {
    connectorDetails?: outputs.DatabaseManagementAutonomousDatabaseAutonomousDatabaseDbmFeaturesManagementFeatureDetailsConnectorDetails;
    databaseConnectionDetails?: outputs.DatabaseManagementAutonomousDatabaseAutonomousDatabaseDbmFeaturesManagementFeatureDetailsDatabaseConnectionDetails;
    feature: string;
}

export interface DatabaseManagementAutonomousDatabaseAutonomousDatabaseDbmFeaturesManagementFeatureDetailsConnectorDetails {
    connectorType?: string;
    databaseConnectorId?: string;
    managementAgentId?: string;
    privateEndPointId?: string;
}

export interface DatabaseManagementAutonomousDatabaseAutonomousDatabaseDbmFeaturesManagementFeatureDetailsDatabaseConnectionDetails {
    connectionCredentials?: outputs.DatabaseManagementAutonomousDatabaseAutonomousDatabaseDbmFeaturesManagementFeatureDetailsDatabaseConnectionDetailsConnectionCredentials;
    connectionString?: outputs.DatabaseManagementAutonomousDatabaseAutonomousDatabaseDbmFeaturesManagementFeatureDetailsDatabaseConnectionDetailsConnectionString;
}

export interface DatabaseManagementAutonomousDatabaseAutonomousDatabaseDbmFeaturesManagementFeatureDetailsDatabaseConnectionDetailsConnectionCredentials {
    credentialName?: string;
    credentialType?: string;
    passwordSecretId?: string;
    role?: string;
    sslSecretId?: string;
    userName?: string;
}

export interface DatabaseManagementAutonomousDatabaseAutonomousDatabaseDbmFeaturesManagementFeatureDetailsDatabaseConnectionDetailsConnectionString {
    connectionType?: string;
    port?: number;
    protocol?: string;
    service?: string;
}

export interface DatabaseManagementAutonomousDatabaseAutonomousDatabaseDbmFeaturesManagementTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DatabaseManagementDatabaseDbmFeaturesManagementFeatureDetails {
    connectorDetails?: outputs.DatabaseManagementDatabaseDbmFeaturesManagementFeatureDetailsConnectorDetails;
    databaseConnectionDetails?: outputs.DatabaseManagementDatabaseDbmFeaturesManagementFeatureDetailsDatabaseConnectionDetails;
    feature: string;
    isAutoEnablePluggableDatabase?: boolean;
    managementType?: string;
}

export interface DatabaseManagementDatabaseDbmFeaturesManagementFeatureDetailsConnectorDetails {
    connectorType?: string;
    databaseConnectorId?: string;
    managementAgentId?: string;
    privateEndPointId?: string;
}

export interface DatabaseManagementDatabaseDbmFeaturesManagementFeatureDetailsDatabaseConnectionDetails {
    connectionCredentials?: outputs.DatabaseManagementDatabaseDbmFeaturesManagementFeatureDetailsDatabaseConnectionDetailsConnectionCredentials;
    connectionString?: outputs.DatabaseManagementDatabaseDbmFeaturesManagementFeatureDetailsDatabaseConnectionDetailsConnectionString;
}

export interface DatabaseManagementDatabaseDbmFeaturesManagementFeatureDetailsDatabaseConnectionDetailsConnectionCredentials {
    credentialName?: string;
    credentialType?: string;
    namedCredentialId: string;
    passwordSecretId?: string;
    role?: string;
    sslSecretId?: string;
    userName?: string;
}

export interface DatabaseManagementDatabaseDbmFeaturesManagementFeatureDetailsDatabaseConnectionDetailsConnectionString {
    connectionType?: string;
    port?: number;
    protocol?: string;
    service?: string;
}

export interface DatabaseManagementDatabaseDbmFeaturesManagementTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DatabaseManagementDbManagementPrivateEndpointTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DatabaseManagementExternalAsmInstanceTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DatabaseManagementExternalAsmServicedDatabase {
    compartmentId: string;
    databaseSubType: string;
    databaseType: string;
    dbUniqueName: string;
    diskGroups: string[];
    displayName: string;
    id: string;
    isManaged: boolean;
}

export interface DatabaseManagementExternalAsmTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DatabaseManagementExternalClusterInstanceTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DatabaseManagementExternalClusterNetworkConfiguration {
    networkNumber: number;
    networkType: string;
    subnet: string;
}

export interface DatabaseManagementExternalClusterScanConfiguration {
    networkNumber: number;
    scanName: string;
    scanPort: number;
    scanProtocol: string;
}

export interface DatabaseManagementExternalClusterTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DatabaseManagementExternalClusterVipConfiguration {
    address: string;
    networkNumber: number;
    nodeName: string;
}

export interface DatabaseManagementExternalDbHomeTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DatabaseManagementExternalDbNodeTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DatabaseManagementExternalDbSystemConnectorConnectionInfo {
    componentType: string;
    connectionCredentials?: outputs.DatabaseManagementExternalDbSystemConnectorConnectionInfoConnectionCredential[];
    connectionStrings?: outputs.DatabaseManagementExternalDbSystemConnectorConnectionInfoConnectionString[];
    databaseCredentials: outputs.DatabaseManagementExternalDbSystemConnectorConnectionInfoDatabaseCredential[];
}

export interface DatabaseManagementExternalDbSystemConnectorConnectionInfoConnectionCredential {
    credentialName: string;
    credentialType: string;
    namedCredentialId: string;
    passwordSecretId: string;
    role: string;
    sslSecretId: string;
    userName: string;
}

export interface DatabaseManagementExternalDbSystemConnectorConnectionInfoConnectionString {
    hostName: string;
    hosts: string[];
    port: number;
    protocol: string;
    service: string;
}

export interface DatabaseManagementExternalDbSystemConnectorConnectionInfoDatabaseCredential {
    credentialType: string;
    namedCredentialId: string;
    password: string;
    passwordSecretId: string;
    role: string;
    username: string;
}

export interface DatabaseManagementExternalDbSystemConnectorTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DatabaseManagementExternalDbSystemDatabaseManagementConfig {
    licenseModel: string;
}

export interface DatabaseManagementExternalDbSystemDatabaseManagementsManagementTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DatabaseManagementExternalDbSystemDiscoveryDiscoveredComponent {
    adrHomeDirectory: string;
    asmInstances: outputs.DatabaseManagementExternalDbSystemDiscoveryDiscoveredComponentAsmInstance[];
    associatedComponents: outputs.DatabaseManagementExternalDbSystemDiscoveryDiscoveredComponentAssociatedComponent[];
    clusterId: string;
    clusterInstances: outputs.DatabaseManagementExternalDbSystemDiscoveryDiscoveredComponentClusterInstance[];
    compartmentId: string;
    componentId: string;
    componentName: string;
    componentType: string;
    connectors: outputs.DatabaseManagementExternalDbSystemDiscoveryDiscoveredComponentConnector[];
    containerDatabaseId: string;
    cpuCoreCount: number;
    crsBaseDirectory: string;
    dbEdition: string;
    dbId: string;
    dbNodeName: string;
    dbPacks: string;
    dbRole: string;
    dbType: string;
    dbUniqueName: string;
    dbVersion: string;
    displayName: string;
    endpoints: outputs.DatabaseManagementExternalDbSystemDiscoveryDiscoveredComponentEndpoint[];
    gridHome: string;
    guid: string;
    homeDirectory: string;
    hostName: string;
    instanceName: string;
    isCluster: boolean;
    isFlexCluster: boolean;
    isFlexEnabled: boolean;
    isSelectedForMonitoring: boolean;
    listenerAlias: string;
    listenerType: string;
    logDirectory: string;
    memorySizeInGbs: number;
    networkConfigurations: outputs.DatabaseManagementExternalDbSystemDiscoveryDiscoveredComponentNetworkConfiguration[];
    nodeRole: string;
    ocrFileLocation: string;
    oracleHome: string;
    pluggableDatabases: outputs.DatabaseManagementExternalDbSystemDiscoveryDiscoveredComponentPluggableDatabase[];
    resourceId: string;
    scanConfigurations: outputs.DatabaseManagementExternalDbSystemDiscoveryDiscoveredComponentScanConfiguration[];
    status: string;
    traceDirectory: string;
    version: string;
    vipConfigurations: outputs.DatabaseManagementExternalDbSystemDiscoveryDiscoveredComponentVipConfiguration[];
}

export interface DatabaseManagementExternalDbSystemDiscoveryDiscoveredComponentAsmInstance {
    adrHomeDirectory: string;
    hostName: string;
    instanceName: string;
}

export interface DatabaseManagementExternalDbSystemDiscoveryDiscoveredComponentAssociatedComponent {
    associationType: string;
    componentId: string;
    componentType: string;
}

export interface DatabaseManagementExternalDbSystemDiscoveryDiscoveredComponentClusterInstance {
    adrHomeDirectory: string;
    clusterId: string;
    connectors: outputs.DatabaseManagementExternalDbSystemDiscoveryDiscoveredComponentClusterInstanceConnector[];
    crsBaseDirectory: string;
    hostName: string;
    nodeRole: string;
}

export interface DatabaseManagementExternalDbSystemDiscoveryDiscoveredComponentClusterInstanceConnector {
    agentId: string;
    connectionFailureMessage: string;
    connectionInfos: outputs.DatabaseManagementExternalDbSystemDiscoveryDiscoveredComponentClusterInstanceConnectorConnectionInfo[];
    connectionStatus: string;
    connectorType: string;
    displayName: string;
    timeConnectionStatusLastUpdated: string;
}

export interface DatabaseManagementExternalDbSystemDiscoveryDiscoveredComponentClusterInstanceConnectorConnectionInfo {
    componentType: string;
    connectionCredentials: outputs.DatabaseManagementExternalDbSystemDiscoveryDiscoveredComponentClusterInstanceConnectorConnectionInfoConnectionCredential[];
    connectionStrings: outputs.DatabaseManagementExternalDbSystemDiscoveryDiscoveredComponentClusterInstanceConnectorConnectionInfoConnectionString[];
    databaseCredentials: outputs.DatabaseManagementExternalDbSystemDiscoveryDiscoveredComponentClusterInstanceConnectorConnectionInfoDatabaseCredential[];
}

export interface DatabaseManagementExternalDbSystemDiscoveryDiscoveredComponentClusterInstanceConnectorConnectionInfoConnectionCredential {
    credentialName: string;
    credentialType: string;
    namedCredentialId: string;
    passwordSecretId: string;
    role: string;
    sslSecretId: string;
    userName: string;
}

export interface DatabaseManagementExternalDbSystemDiscoveryDiscoveredComponentClusterInstanceConnectorConnectionInfoConnectionString {
    hostName: string;
    hosts: string[];
    port: number;
    protocol: string;
    service: string;
}

export interface DatabaseManagementExternalDbSystemDiscoveryDiscoveredComponentClusterInstanceConnectorConnectionInfoDatabaseCredential {
    credentialType: string;
    namedCredentialId: string;
    password: string;
    passwordSecretId: string;
    role: string;
    username: string;
}

export interface DatabaseManagementExternalDbSystemDiscoveryDiscoveredComponentConnector {
    agentId: string;
    connectionFailureMessage: string;
    connectionInfos: outputs.DatabaseManagementExternalDbSystemDiscoveryDiscoveredComponentConnectorConnectionInfo[];
    connectionStatus: string;
    connectorType: string;
    displayName: string;
    timeConnectionStatusLastUpdated: string;
}

export interface DatabaseManagementExternalDbSystemDiscoveryDiscoveredComponentConnectorConnectionInfo {
    componentType: string;
    connectionCredentials: outputs.DatabaseManagementExternalDbSystemDiscoveryDiscoveredComponentConnectorConnectionInfoConnectionCredential[];
    connectionStrings: outputs.DatabaseManagementExternalDbSystemDiscoveryDiscoveredComponentConnectorConnectionInfoConnectionString[];
    databaseCredentials: outputs.DatabaseManagementExternalDbSystemDiscoveryDiscoveredComponentConnectorConnectionInfoDatabaseCredential[];
}

export interface DatabaseManagementExternalDbSystemDiscoveryDiscoveredComponentConnectorConnectionInfoConnectionCredential {
    credentialName: string;
    credentialType: string;
    namedCredentialId: string;
    passwordSecretId: string;
    role: string;
    sslSecretId: string;
    userName: string;
}

export interface DatabaseManagementExternalDbSystemDiscoveryDiscoveredComponentConnectorConnectionInfoConnectionString {
    hostName: string;
    hosts: string[];
    port: number;
    protocol: string;
    service: string;
}

export interface DatabaseManagementExternalDbSystemDiscoveryDiscoveredComponentConnectorConnectionInfoDatabaseCredential {
    credentialType: string;
    namedCredentialId: string;
    password: string;
    passwordSecretId: string;
    role: string;
    username: string;
}

export interface DatabaseManagementExternalDbSystemDiscoveryDiscoveredComponentEndpoint {
    host: string;
    key: string;
    port: number;
    protocol: string;
    services: string[];
}

export interface DatabaseManagementExternalDbSystemDiscoveryDiscoveredComponentNetworkConfiguration {
    networkNumber: number;
    networkType: string;
    subnet: string;
}

export interface DatabaseManagementExternalDbSystemDiscoveryDiscoveredComponentPluggableDatabase {
    compartmentId: string;
    connectors: outputs.DatabaseManagementExternalDbSystemDiscoveryDiscoveredComponentPluggableDatabaseConnector[];
    containerDatabaseId: string;
    guid: string;
}

export interface DatabaseManagementExternalDbSystemDiscoveryDiscoveredComponentPluggableDatabaseConnector {
    agentId: string;
    connectionFailureMessage: string;
    connectionInfos: outputs.DatabaseManagementExternalDbSystemDiscoveryDiscoveredComponentPluggableDatabaseConnectorConnectionInfo[];
    connectionStatus: string;
    connectorType: string;
    displayName: string;
    timeConnectionStatusLastUpdated: string;
}

export interface DatabaseManagementExternalDbSystemDiscoveryDiscoveredComponentPluggableDatabaseConnectorConnectionInfo {
    componentType: string;
    connectionCredentials: outputs.DatabaseManagementExternalDbSystemDiscoveryDiscoveredComponentPluggableDatabaseConnectorConnectionInfoConnectionCredential[];
    connectionStrings: outputs.DatabaseManagementExternalDbSystemDiscoveryDiscoveredComponentPluggableDatabaseConnectorConnectionInfoConnectionString[];
    databaseCredentials: outputs.DatabaseManagementExternalDbSystemDiscoveryDiscoveredComponentPluggableDatabaseConnectorConnectionInfoDatabaseCredential[];
}

export interface DatabaseManagementExternalDbSystemDiscoveryDiscoveredComponentPluggableDatabaseConnectorConnectionInfoConnectionCredential {
    credentialName: string;
    credentialType: string;
    namedCredentialId: string;
    passwordSecretId: string;
    role: string;
    sslSecretId: string;
    userName: string;
}

export interface DatabaseManagementExternalDbSystemDiscoveryDiscoveredComponentPluggableDatabaseConnectorConnectionInfoConnectionString {
    hostName: string;
    hosts: string[];
    port: number;
    protocol: string;
    service: string;
}

export interface DatabaseManagementExternalDbSystemDiscoveryDiscoveredComponentPluggableDatabaseConnectorConnectionInfoDatabaseCredential {
    credentialType: string;
    namedCredentialId: string;
    password: string;
    passwordSecretId: string;
    role: string;
    username: string;
}

export interface DatabaseManagementExternalDbSystemDiscoveryDiscoveredComponentScanConfiguration {
    networkNumber: number;
    scanName: string;
    scanPort: number;
    scanProtocol: string;
}

export interface DatabaseManagementExternalDbSystemDiscoveryDiscoveredComponentVipConfiguration {
    address: string;
    networkNumber: number;
    nodeName: string;
}

export interface DatabaseManagementExternalDbSystemDiscoveryPatchOperation {
    operation: string;
    selection: string;
    value?: outputs.DatabaseManagementExternalDbSystemDiscoveryPatchOperationValue;
}

export interface DatabaseManagementExternalDbSystemDiscoveryPatchOperationValue {
    compartmentId?: string;
    connector?: outputs.DatabaseManagementExternalDbSystemDiscoveryPatchOperationValueConnector;
    displayName?: string;
    isSelectedForMonitoring?: boolean;
}

export interface DatabaseManagementExternalDbSystemDiscoveryPatchOperationValueConnector {
    agentId?: string;
    connectionInfo?: outputs.DatabaseManagementExternalDbSystemDiscoveryPatchOperationValueConnectorConnectionInfo;
    connectorType: string;
    displayName: string;
}

export interface DatabaseManagementExternalDbSystemDiscoveryPatchOperationValueConnectorConnectionInfo {
    componentType: string;
    connectionCredentials?: outputs.DatabaseManagementExternalDbSystemDiscoveryPatchOperationValueConnectorConnectionInfoConnectionCredentials;
    connectionString?: outputs.DatabaseManagementExternalDbSystemDiscoveryPatchOperationValueConnectorConnectionInfoConnectionString;
}

export interface DatabaseManagementExternalDbSystemDiscoveryPatchOperationValueConnectorConnectionInfoConnectionCredentials {
    credentialName?: string;
    credentialType: string;
    passwordSecretId?: string;
    role?: string;
    sslSecretId?: string;
    userName?: string;
}

export interface DatabaseManagementExternalDbSystemDiscoveryPatchOperationValueConnectorConnectionInfoConnectionString {
    hostName?: string;
    hosts?: string[];
    port?: number;
    protocol?: string;
    service?: string;
}

export interface DatabaseManagementExternalDbSystemDiscoveryTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DatabaseManagementExternalDbSystemStackMonitoringConfig {
    isEnabled: boolean;
    metadata: string;
}

export interface DatabaseManagementExternalDbSystemStackMonitoringsManagementTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DatabaseManagementExternalDbSystemTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DatabaseManagementExternalExadataInfrastructureDatabaseSystem {
    additionalDetails: {[key: string]: string};
    compartmentId: string;
    displayName: string;
    id: string;
    internalId: string;
    licenseModel: string;
    lifecycleDetails: string;
    state: string;
    status: string;
    timeCreated: string;
    timeUpdated: string;
    version: string;
}

export interface DatabaseManagementExternalExadataInfrastructureExadataManagementTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DatabaseManagementExternalExadataInfrastructureStorageGrid {
    additionalDetails: {[key: string]: string};
    displayName: string;
    id: string;
    internalId: string;
    lifecycleDetails: string;
    serverCount: number;
    state: string;
    status: string;
    timeCreated: string;
    timeUpdated: string;
    version: string;
}

export interface DatabaseManagementExternalExadataInfrastructureTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DatabaseManagementExternalExadataStorageConnectorCredentialInfo {
    password: string;
    sslTrustStoreLocation: string;
    sslTrustStorePassword: string;
    sslTrustStoreType: string;
    username: string;
}

export interface DatabaseManagementExternalExadataStorageConnectorTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DatabaseManagementExternalExadataStorageGridStorageServer {
    additionalDetails: {[key: string]: string};
    connectorId: string;
    cpuCount: number;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    internalId: string;
    ipAddress: string;
    lifecycleDetails: string;
    makeModel: string;
    maxFlashDiskIops: number;
    maxFlashDiskThroughput: number;
    maxHardDiskIops: number;
    maxHardDiskThroughput: number;
    memoryGb: number;
    resourceType: string;
    state: string;
    status: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
    version: string;
}

export interface DatabaseManagementExternalExadataStorageGridTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DatabaseManagementExternalExadataStorageServerConnector {
    additionalDetails: {[key: string]: string};
    agentId: string;
    connectionUri: string;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    internalId: string;
    lifecycleDetails: string;
    resourceType: string;
    state: string;
    status: string;
    storageServerId: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
    version: string;
}

export interface DatabaseManagementExternalExadataStorageServerTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DatabaseManagementExternalListenerEndpoint {
    host: string;
    key: string;
    port: number;
    protocol: string;
    services: string[];
}

export interface DatabaseManagementExternalListenerServicedAsm {
    compartmentId: string;
    displayName: string;
    id: string;
}

export interface DatabaseManagementExternalListenerServicedDatabase {
    compartmentId: string;
    databaseSubType: string;
    databaseType: string;
    dbUniqueName: string;
    displayName: string;
    id: string;
    isManaged: boolean;
}

export interface DatabaseManagementExternalListenerTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DatabaseManagementExternalcontainerdatabaseExternalContainerDbmFeaturesManagementFeatureDetails {
    connectorDetails?: outputs.DatabaseManagementExternalcontainerdatabaseExternalContainerDbmFeaturesManagementFeatureDetailsConnectorDetails;
    feature: string;
    licenseModel: string;
}

export interface DatabaseManagementExternalcontainerdatabaseExternalContainerDbmFeaturesManagementFeatureDetailsConnectorDetails {
    connectorType: string;
    databaseConnectorId: string;
    managementAgentId: string;
    privateEndPointId: string;
}

export interface DatabaseManagementExternalcontainerdatabaseExternalContainerDbmFeaturesManagementTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DatabaseManagementExternalnoncontainerdatabaseExternalNonContainerDbmFeaturesManagementFeatureDetails {
    connectorDetails?: outputs.DatabaseManagementExternalnoncontainerdatabaseExternalNonContainerDbmFeaturesManagementFeatureDetailsConnectorDetails;
    feature: string;
    licenseModel: string;
}

export interface DatabaseManagementExternalnoncontainerdatabaseExternalNonContainerDbmFeaturesManagementFeatureDetailsConnectorDetails {
    connectorType: string;
    databaseConnectorId: string;
    managementAgentId: string;
    privateEndPointId: string;
}

export interface DatabaseManagementExternalnoncontainerdatabaseExternalNonContainerDbmFeaturesManagementTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DatabaseManagementExternalpluggabledatabaseExternalPluggableDbmFeaturesManagementFeatureDetails {
    connectorDetails?: outputs.DatabaseManagementExternalpluggabledatabaseExternalPluggableDbmFeaturesManagementFeatureDetailsConnectorDetails;
    feature: string;
}

export interface DatabaseManagementExternalpluggabledatabaseExternalPluggableDbmFeaturesManagementFeatureDetailsConnectorDetails {
    connectorType: string;
    databaseConnectorId: string;
    managementAgentId: string;
    privateEndPointId: string;
}

export interface DatabaseManagementExternalpluggabledatabaseExternalPluggableDbmFeaturesManagementTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DatabaseManagementManagedDatabaseDbmgmtFeatureConfig {
    connectorDetails: outputs.DatabaseManagementManagedDatabaseDbmgmtFeatureConfigConnectorDetail[];
    databaseConnectionDetails: outputs.DatabaseManagementManagedDatabaseDbmgmtFeatureConfigDatabaseConnectionDetail[];
    feature: string;
    featureStatus: string;
    licenseModel: string;
}

export interface DatabaseManagementManagedDatabaseDbmgmtFeatureConfigConnectorDetail {
    connectorType: string;
    databaseConnectorId: string;
    managementAgentId: string;
    privateEndPointId: string;
}

export interface DatabaseManagementManagedDatabaseDbmgmtFeatureConfigDatabaseConnectionDetail {
    connectionCredentials: outputs.DatabaseManagementManagedDatabaseDbmgmtFeatureConfigDatabaseConnectionDetailConnectionCredential[];
    connectionStrings: outputs.DatabaseManagementManagedDatabaseDbmgmtFeatureConfigDatabaseConnectionDetailConnectionString[];
}

export interface DatabaseManagementManagedDatabaseDbmgmtFeatureConfigDatabaseConnectionDetailConnectionCredential {
    credentialName: string;
    credentialType: string;
    namedCredentialId: string;
    passwordSecretId: string;
    role: string;
    sslSecretId: string;
    userName: string;
}

export interface DatabaseManagementManagedDatabaseDbmgmtFeatureConfigDatabaseConnectionDetailConnectionString {
    connectionType: string;
    port: number;
    protocol: string;
    service: string;
}

export interface DatabaseManagementManagedDatabaseGroupManagedDatabase {
    compartmentId: string;
    databaseSubType: string;
    databaseType: string;
    definedTags: {[key: string]: string};
    deploymentType: string;
    freeformTags: {[key: string]: string};
    id: string;
    name: string;
    systemTags: {[key: string]: string};
    timeAdded: string;
    workloadType: string;
}

export interface DatabaseManagementManagedDatabaseGroupTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DatabaseManagementManagedDatabaseManagedDatabaseGroup {
    compartmentId: string;
    id: string;
    name: string;
}

export interface DatabaseManagementManagedDatabaseTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DatabaseManagementManagedDatabasesChangeDatabaseParameterCredentials {
    password: string;
    role: string;
    secretId: string;
    userName: string;
}

export interface DatabaseManagementManagedDatabasesChangeDatabaseParameterDatabaseCredential {
    credentialType: string;
    namedCredentialId: string;
    password: string;
    passwordSecretId: string;
    role: string;
    username: string;
}

export interface DatabaseManagementManagedDatabasesChangeDatabaseParameterParameter {
    name: string;
    updateComment: string;
    value: string;
}

export interface DatabaseManagementManagedDatabasesChangeDatabaseParameterTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DatabaseManagementManagedDatabasesResetDatabaseParameterCredentials {
    password: string;
    role: string;
    secretId: string;
    userName: string;
}

export interface DatabaseManagementManagedDatabasesResetDatabaseParameterDatabaseCredential {
    credentialType: string;
    namedCredentialId: string;
    password: string;
    passwordSecretId: string;
    role: string;
    username: string;
}

export interface DatabaseManagementManagedDatabasesResetDatabaseParameterTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DatabaseManagementNamedCredentialContent {
    credentialType: string;
    passwordSecretAccessMode: string;
    passwordSecretId: string;
    role: string;
    userName: string;
}

export interface DatabaseManagementNamedCredentialTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DatabaseManagementPluggabledatabasePluggableDatabaseDbmFeaturesManagementFeatureDetails {
    connectorDetails?: outputs.DatabaseManagementPluggabledatabasePluggableDatabaseDbmFeaturesManagementFeatureDetailsConnectorDetails;
    databaseConnectionDetails?: outputs.DatabaseManagementPluggabledatabasePluggableDatabaseDbmFeaturesManagementFeatureDetailsDatabaseConnectionDetails;
    feature: string;
    isAutoEnablePluggableDatabase?: boolean;
    managementType?: string;
}

export interface DatabaseManagementPluggabledatabasePluggableDatabaseDbmFeaturesManagementFeatureDetailsConnectorDetails {
    connectorType?: string;
    databaseConnectorId?: string;
    managementAgentId?: string;
    privateEndPointId?: string;
}

export interface DatabaseManagementPluggabledatabasePluggableDatabaseDbmFeaturesManagementFeatureDetailsDatabaseConnectionDetails {
    connectionCredentials?: outputs.DatabaseManagementPluggabledatabasePluggableDatabaseDbmFeaturesManagementFeatureDetailsDatabaseConnectionDetailsConnectionCredentials;
    connectionString?: outputs.DatabaseManagementPluggabledatabasePluggableDatabaseDbmFeaturesManagementFeatureDetailsDatabaseConnectionDetailsConnectionString;
}

export interface DatabaseManagementPluggabledatabasePluggableDatabaseDbmFeaturesManagementFeatureDetailsDatabaseConnectionDetailsConnectionCredentials {
    credentialName?: string;
    credentialType?: string;
    namedCredentialId: string;
    passwordSecretId?: string;
    role?: string;
    sslSecretId?: string;
    userName?: string;
}

export interface DatabaseManagementPluggabledatabasePluggableDatabaseDbmFeaturesManagementFeatureDetailsDatabaseConnectionDetailsConnectionString {
    connectionType?: string;
    port?: number;
    protocol?: string;
    service?: string;
}

export interface DatabaseManagementPluggabledatabasePluggableDatabaseDbmFeaturesManagementTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DatabaseMigrationAdditionalMigration {
    cloudExadataInfrastructureId: string;
    cloudVmClusterId: string;
    dbSystemId: string;
}

export interface DatabaseMigrationConnectionAdditionalAttribute {
    name: string;
    value: string;
}

export interface DatabaseMigrationConnectionIngressIp {
    ingressIp: string;
}

export interface DatabaseMigrationConnectionTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DatabaseMigrationJobParameterFileVersion {
    definedTags: {[key: string]: string};
    description: string;
    freeformTags: {[key: string]: string};
    isCurrent: boolean;
    isFactory: boolean;
    kind: string;
    name: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
}

export interface DatabaseMigrationJobProgress {
    currentPhase: string;
    currentStatus: string;
    phases: outputs.DatabaseMigrationJobProgressPhase[];
}

export interface DatabaseMigrationJobProgressPhase {
    action: string;
    durationInMs: number;
    editableParameterFiles: string[];
    extracts: outputs.DatabaseMigrationJobProgressPhaseExtract[];
    isAdvisorReportAvailable: boolean;
    isSuspendAvailable: boolean;
    issue: string;
    logLocations: outputs.DatabaseMigrationJobProgressPhaseLogLocation[];
    name: string;
    progress: number;
    status: string;
}

export interface DatabaseMigrationJobProgressPhaseExtract {
    message: string;
    type: string;
}

export interface DatabaseMigrationJobProgressPhaseLogLocation {
    bucket: string;
    namespace: string;
    object: string;
}

export interface DatabaseMigrationJobTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DatabaseMigrationJobUnsupportedObject {
    object: string;
    owner: string;
    type: string;
}

export interface DatabaseMigrationMigrationAdvancedParameter {
    dataType: string;
    name: string;
    value: string;
}

export interface DatabaseMigrationMigrationAdvisorSettings {
    isIgnoreErrors: boolean;
    isSkipAdvisor: boolean;
}

export interface DatabaseMigrationMigrationDataTransferMediumDetails {
    accessKeyId: string;
    name: string;
    objectStorageBucket?: outputs.DatabaseMigrationMigrationDataTransferMediumDetailsObjectStorageBucket;
    region: string;
    secretAccessKey: string;
    sharedStorageMountTargetId: string;
    source?: outputs.DatabaseMigrationMigrationDataTransferMediumDetailsSource;
    target?: outputs.DatabaseMigrationMigrationDataTransferMediumDetailsTarget;
    type: string;
}

export interface DatabaseMigrationMigrationDataTransferMediumDetailsObjectStorageBucket {
    bucket: string;
    namespace: string;
}

export interface DatabaseMigrationMigrationDataTransferMediumDetailsSource {
    kind: string;
    ociHome: string;
    walletLocation: string;
}

export interface DatabaseMigrationMigrationDataTransferMediumDetailsTarget {
    kind: string;
    ociHome: string;
    walletLocation: string;
}

export interface DatabaseMigrationMigrationExcludeObject {
    isOmitExcludedTableFromReplication: boolean;
    object: string;
    owner: string;
    schema: string;
    type: string;
}

export interface DatabaseMigrationMigrationGgsDetails {
    acceptableLag: number;
    extract?: outputs.DatabaseMigrationMigrationGgsDetailsExtract;
    ggsDeployments: outputs.DatabaseMigrationMigrationGgsDetailsGgsDeployment[];
    replicat?: outputs.DatabaseMigrationMigrationGgsDetailsReplicat;
}

export interface DatabaseMigrationMigrationGgsDetailsExtract {
    longTransDuration: number;
    performanceProfile: string;
}

export interface DatabaseMigrationMigrationGgsDetailsGgsDeployment {
    deploymentId: string;
    ggsAdminCredentialsSecretId: string;
}

export interface DatabaseMigrationMigrationGgsDetailsReplicat {
    performanceProfile: string;
}

export interface DatabaseMigrationMigrationHubDetails {
    acceptableLag: number;
    computeId: string;
    extract?: outputs.DatabaseMigrationMigrationHubDetailsExtract;
    keyId: string;
    replicat?: outputs.DatabaseMigrationMigrationHubDetailsReplicat;
    restAdminCredentials: outputs.DatabaseMigrationMigrationHubDetailsRestAdminCredentials;
    url: string;
    vaultId: string;
}

export interface DatabaseMigrationMigrationHubDetailsExtract {
    longTransDuration: number;
    performanceProfile: string;
}

export interface DatabaseMigrationMigrationHubDetailsReplicat {
    performanceProfile: string;
}

export interface DatabaseMigrationMigrationHubDetailsRestAdminCredentials {
    password: string;
    username: string;
}

export interface DatabaseMigrationMigrationIncludeObject {
    isOmitExcludedTableFromReplication: boolean;
    object: string;
    owner: string;
    schema: string;
    type: string;
}

export interface DatabaseMigrationMigrationInitialLoadSettings {
    compatibilities: string[];
    dataPumpParameters?: outputs.DatabaseMigrationMigrationInitialLoadSettingsDataPumpParameters;
    exportDirectoryObject?: outputs.DatabaseMigrationMigrationInitialLoadSettingsExportDirectoryObject;
    handleGrantErrors: string;
    importDirectoryObject?: outputs.DatabaseMigrationMigrationInitialLoadSettingsImportDirectoryObject;
    isConsistent: boolean;
    isIgnoreExistingObjects: boolean;
    isTzUtc: boolean;
    jobMode: string;
    metadataRemaps?: outputs.DatabaseMigrationMigrationInitialLoadSettingsMetadataRemap[];
    primaryKeyCompatibility: string;
    tablespaceDetails?: outputs.DatabaseMigrationMigrationInitialLoadSettingsTablespaceDetails;
}

export interface DatabaseMigrationMigrationInitialLoadSettingsDataPumpParameters {
    estimate: string;
    excludeParameters: string[];
    exportParallelismDegree: number;
    importParallelismDegree: number;
    isCluster: boolean;
    tableExistsAction: string;
}

export interface DatabaseMigrationMigrationInitialLoadSettingsExportDirectoryObject {
    name: string;
    path: string;
}

export interface DatabaseMigrationMigrationInitialLoadSettingsImportDirectoryObject {
    name: string;
    path: string;
}

export interface DatabaseMigrationMigrationInitialLoadSettingsMetadataRemap {
    newValue: string;
    oldValue: string;
    type: string;
}

export interface DatabaseMigrationMigrationInitialLoadSettingsTablespaceDetails {
    blockSizeInKbs: string;
    extendSizeInMbs: number;
    isAutoCreate: boolean;
    isBigFile: boolean;
    remapTarget: string;
    targetType: string;
}

export interface DatabaseMigrationMigrationTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DatabaseMigrationTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DatabaseOneoffPatchTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DatabasePluggableDatabaseConnectionString {
    allConnectionStrings: {[key: string]: string};
    pdbDefault: string;
    pdbIpDefault: string;
}

export interface DatabasePluggableDatabasePdbCreationTypeDetails {
    creationType: string;
    dblinkUserPassword: string;
    dblinkUsername: string;
    isThinClone: boolean;
    refreshableCloneDetails?: outputs.DatabasePluggableDatabasePdbCreationTypeDetailsRefreshableCloneDetails;
    sourceContainerDatabaseAdminPassword: string;
    sourcePluggableDatabaseId: string;
}

export interface DatabasePluggableDatabasePdbCreationTypeDetailsRefreshableCloneDetails {
    isRefreshableClone: boolean;
}

export interface DatabasePluggableDatabasePdbNodeLevelDetail {
    nodeName: string;
    openMode: string;
}

export interface DatabasePluggableDatabasePluggableDatabaseManagementConfig {
    managementStatus: string;
}

export interface DatabasePluggableDatabasePluggabledatabasemanagementsManagementConnectionString {
    allConnectionStrings: {[key: string]: string};
    enablePluggabledatabasemanagement: boolean;
    pdbDefault: string;
    pdbIpDefault: string;
}

export interface DatabasePluggableDatabasePluggabledatabasemanagementsManagementCredentialDetails {
    passwordSecretId: string;
    userName: string;
}

export interface DatabasePluggableDatabasePluggabledatabasemanagementsManagementPluggableDatabaseManagementConfig {
    enablePluggabledatabasemanagement: boolean;
    managementStatus: string;
}

export interface DatabasePluggableDatabasePluggabledatabasemanagementsManagementTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DatabasePluggableDatabaseRefreshableCloneConfig {
    isRefreshableClone: boolean;
}

export interface DatabasePluggableDatabaseTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DatabasePluggableDatabasesLocalCloneConnectionString {
    allConnectionStrings: {[key: string]: string};
    pdbDefault: string;
    pdbIpDefault: string;
}

export interface DatabasePluggableDatabasesLocalClonePdbNodeLevelDetail {
    nodeName: string;
    openMode: string;
}

export interface DatabasePluggableDatabasesLocalClonePluggableDatabaseManagementConfig {
    managementStatus: string;
}

export interface DatabasePluggableDatabasesLocalCloneRefreshableCloneConfig {
    isRefreshableClone: boolean;
}

export interface DatabasePluggableDatabasesLocalCloneTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DatabasePluggableDatabasesRemoteCloneConnectionString {
    allConnectionStrings: {[key: string]: string};
    pdbDefault: string;
    pdbIpDefault: string;
}

export interface DatabasePluggableDatabasesRemoteClonePdbNodeLevelDetail {
    nodeName: string;
    openMode: string;
}

export interface DatabasePluggableDatabasesRemoteClonePluggableDatabaseManagementConfig {
    managementStatus: string;
}

export interface DatabasePluggableDatabasesRemoteCloneRefreshableCloneConfig {
    isRefreshableClone: boolean;
}

export interface DatabasePluggableDatabasesRemoteCloneTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DatabaseToolsDatabaseToolsConnectionKeyStore {
    keyStoreContent?: outputs.DatabaseToolsDatabaseToolsConnectionKeyStoreKeyStoreContent;
    keyStorePassword?: outputs.DatabaseToolsDatabaseToolsConnectionKeyStoreKeyStorePassword;
    keyStoreType: string;
}

export interface DatabaseToolsDatabaseToolsConnectionKeyStoreKeyStoreContent {
    secretId: string;
    valueType: string;
}

export interface DatabaseToolsDatabaseToolsConnectionKeyStoreKeyStorePassword {
    secretId: string;
    valueType: string;
}

export interface DatabaseToolsDatabaseToolsConnectionLock {
    message: string;
    relatedResourceId: string;
    timeCreated: string;
    type: string;
}

export interface DatabaseToolsDatabaseToolsConnectionProxyClient {
    proxyAuthenticationType: string;
    roles: string[];
    userName: string;
    userPassword?: outputs.DatabaseToolsDatabaseToolsConnectionProxyClientUserPassword;
}

export interface DatabaseToolsDatabaseToolsConnectionProxyClientUserPassword {
    secretId: string;
    valueType: string;
}

export interface DatabaseToolsDatabaseToolsConnectionRelatedResource {
    entityType: string;
    identifier: string;
}

export interface DatabaseToolsDatabaseToolsConnectionTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DatabaseToolsDatabaseToolsConnectionUserPassword {
    secretId: string;
    valueType: string;
}

export interface DatabaseToolsDatabaseToolsPrivateEndpointLock {
    message: string;
    relatedResourceId: string;
    timeCreated: string;
    type: string;
}

export interface DatabaseToolsDatabaseToolsPrivateEndpointReverseConnectionConfiguration {
    reverseConnectionsSourceIps: outputs.DatabaseToolsDatabaseToolsPrivateEndpointReverseConnectionConfigurationReverseConnectionsSourceIp[];
}

export interface DatabaseToolsDatabaseToolsPrivateEndpointReverseConnectionConfigurationReverseConnectionsSourceIp {
    sourceIp: string;
}

export interface DatabaseToolsDatabaseToolsPrivateEndpointTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DatabaseVmClusterAddVirtualMachineDataCollectionOption {
    isDiagnosticsEventsEnabled: boolean;
    isHealthMonitoringEnabled: boolean;
    isIncidentLogsEnabled: boolean;
}

export interface DatabaseVmClusterAddVirtualMachineDbServer {
    dbServerId: string;
}

export interface DatabaseVmClusterAddVirtualMachineFileSystemConfigurationDetail {
    fileSystemSizeGb: number;
    mountPoint: string;
}

export interface DatabaseVmClusterAddVirtualMachineTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DatabaseVmClusterDataCollectionOptions {
    isDiagnosticsEventsEnabled: boolean;
    isHealthMonitoringEnabled: boolean;
    isIncidentLogsEnabled: boolean;
}

export interface DatabaseVmClusterFileSystemConfigurationDetail {
    fileSystemSizeGb: number;
    mountPoint: string;
}

export interface DatabaseVmClusterNetworkDrScan {
    hostname: string;
    ips: string[];
    scanListenerPortTcp: number;
}

export interface DatabaseVmClusterNetworkScan {
    hostname: string;
    ips: string[];
    port: number;
    scanListenerPortTcp: number;
    scanListenerPortTcpSsl: number;
}

export interface DatabaseVmClusterNetworkTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DatabaseVmClusterNetworkVmNetwork {
    domainName: string;
    gateway: string;
    netmask: string;
    networkType: string;
    nodes: outputs.DatabaseVmClusterNetworkVmNetworkNode[];
    vlanId: string;
}

export interface DatabaseVmClusterNetworkVmNetworkNode {
    dbServerId: string;
    hostname: string;
    ip: string;
    state: string;
    vip: string;
    vipHostname: string;
}

export interface DatabaseVmClusterRemoveVirtualMachineDataCollectionOption {
    isDiagnosticsEventsEnabled: boolean;
    isHealthMonitoringEnabled: boolean;
    isIncidentLogsEnabled: boolean;
}

export interface DatabaseVmClusterRemoveVirtualMachineDbServer {
    dbServerId: string;
}

export interface DatabaseVmClusterRemoveVirtualMachineFileSystemConfigurationDetail {
    fileSystemSizeGb: number;
    mountPoint: string;
}

export interface DatabaseVmClusterRemoveVirtualMachineTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DatabaseVmClusterTimeouts {
    create?: string;
}

export interface DatacatalogCatalogLock {
    message: string;
    relatedResourceId: string;
    timeCreated: string;
    type: string;
}

export interface DatacatalogCatalogPrivateEndpointLock {
    message: string;
    relatedResourceId: string;
    timeCreated: string;
    type: string;
}

export interface DatacatalogCatalogPrivateEndpointTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DatacatalogCatalogTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DatacatalogConnectionTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DatacatalogDataAssetTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DatacatalogMetastoreLock {
    message: string;
    relatedResourceId: string;
    timeCreated: string;
    type: string;
}

export interface DatacatalogMetastoreTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DataflowApplicationApplicationLogConfig {
    logGroupId: string;
    logId: string;
}

export interface DataflowApplicationDriverShapeConfig {
    memoryInGbs: number;
    ocpus: number;
}

export interface DataflowApplicationExecutorShapeConfig {
    memoryInGbs: number;
    ocpus: number;
}

export interface DataflowApplicationParameter {
    name: string;
    value: string;
}

export interface DataflowApplicationTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DataflowInvokeRunApplicationLogConfig {
    logGroupId: string;
    logId: string;
}

export interface DataflowInvokeRunDriverShapeConfig {
    memoryInGbs: number;
    ocpus: number;
}

export interface DataflowInvokeRunExecutorShapeConfig {
    memoryInGbs: number;
    ocpus: number;
}

export interface DataflowInvokeRunParameter {
    name: string;
    value: string;
}

export interface DataflowInvokeRunTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DataflowPoolConfiguration {
    max: number;
    min: number;
    shape: string;
    shapeConfig?: outputs.DataflowPoolConfigurationShapeConfig;
}

export interface DataflowPoolConfigurationShapeConfig {
    memoryInGbs: number;
    ocpus: number;
}

export interface DataflowPoolPoolMetric {
    activeRunsCount: string;
    activelyUsedNodeCounts: outputs.DataflowPoolPoolMetricActivelyUsedNodeCount[];
    timeLastMetricsUpdated: string;
    timeLastStarted: string;
    timeLastStopped: string;
    timeLastUsed: string;
}

export interface DataflowPoolPoolMetricActivelyUsedNodeCount {
    logicalShape: string;
    poolCount: number;
}

export interface DataflowPoolSchedule {
    dayOfWeek: string;
    startTime: number;
    stopTime: number;
}

export interface DataflowPoolTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DataflowPrivateEndpointScanDetail {
    fqdn: string;
    port: string;
}

export interface DataflowPrivateEndpointTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DataflowRunStatementOutput {
    datas: outputs.DataflowRunStatementOutputData[];
    errorName: string;
    errorValue: string;
    status: string;
    tracebacks: string[];
}

export interface DataflowRunStatementOutputData {
    type: string;
    value: string;
}

export interface DataflowRunStatementTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DataflowSqlEndpointDriverShapeConfig {
    memoryInGbs: number;
    ocpus: number;
}

export interface DataflowSqlEndpointExecutorShapeConfig {
    memoryInGbs: number;
    ocpus: number;
}

export interface DataflowSqlEndpointNetworkConfiguration {
    accessControlRules?: outputs.DataflowSqlEndpointNetworkConfigurationAccessControlRule[];
    hostNamePrefix: string;
    networkType: string;
    privateEndpointIp: string;
    publicEndpointIp: string;
    subnetId: string;
    vcnId: string;
}

export interface DataflowSqlEndpointNetworkConfigurationAccessControlRule {
    ipNotation: string;
    value: string;
    vcnIps: string;
}

export interface DataflowSqlEndpointTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DataintegrationWorkspaceApplicationDependentObjectMetadata {
    action: string;
    identifier: string;
    key: string;
    name: string;
    namePath: string;
    objectVersion: number;
    type: string;
}

export interface DataintegrationWorkspaceApplicationMetadata {
    aggregatorKey: string;
    aggregators: outputs.DataintegrationWorkspaceApplicationMetadataAggregator[];
    countStatistics: outputs.DataintegrationWorkspaceApplicationMetadataCountStatistic[];
    createdBy: string;
    createdByName: string;
    identifierPath: string;
    infoFields: {[key: string]: string};
    isFavorite: boolean;
    labels: string[];
    registryVersion: number;
    timeCreated: string;
    timeUpdated: string;
    updatedBy: string;
    updatedByName: string;
}

export interface DataintegrationWorkspaceApplicationMetadataAggregator {
    description: string;
    identifier: string;
    key: string;
    name: string;
    type: string;
}

export interface DataintegrationWorkspaceApplicationMetadataCountStatistic {
    objectTypeCountLists: outputs.DataintegrationWorkspaceApplicationMetadataCountStatisticObjectTypeCountList[];
}

export interface DataintegrationWorkspaceApplicationMetadataCountStatisticObjectTypeCountList {
    objectCount: string;
    objectType: string;
}

export interface DataintegrationWorkspaceApplicationParentRef {
    parent: string;
    rootDocId: string;
}

export interface DataintegrationWorkspaceApplicationPatchDependentObjectMetadata {
    action: string;
    identifier: string;
    key: string;
    name: string;
    namePath: string;
    objectVersion: number;
    type: string;
}

export interface DataintegrationWorkspaceApplicationPatchMetadata {
    aggregatorKey: string;
    aggregators: outputs.DataintegrationWorkspaceApplicationPatchMetadataAggregator[];
    countStatistics: outputs.DataintegrationWorkspaceApplicationPatchMetadataCountStatistic[];
    createdBy: string;
    createdByName: string;
    identifierPath: string;
    infoFields: {[key: string]: string};
    isFavorite: boolean;
    labels: string[];
    registryVersion: number;
    timeCreated: string;
    timeUpdated: string;
    updatedBy: string;
    updatedByName: string;
}

export interface DataintegrationWorkspaceApplicationPatchMetadataAggregator {
    description: string;
    identifier: string;
    key: string;
    name: string;
    type: string;
}

export interface DataintegrationWorkspaceApplicationPatchMetadataCountStatistic {
    objectTypeCountLists: outputs.DataintegrationWorkspaceApplicationPatchMetadataCountStatisticObjectTypeCountList[];
}

export interface DataintegrationWorkspaceApplicationPatchMetadataCountStatisticObjectTypeCountList {
    objectCount: string;
    objectType: string;
}

export interface DataintegrationWorkspaceApplicationPatchParentRef {
    parent: string;
    rootDocId: string;
}

export interface DataintegrationWorkspaceApplicationPatchPatchObjectMetadata {
    action: string;
    identifier: string;
    key: string;
    name: string;
    namePath: string;
    objectVersion: number;
    type: string;
}

export interface DataintegrationWorkspaceApplicationPatchRegistryMetadata {
    aggregatorKey: string;
    isFavorite: boolean;
    key: string;
    labels: string[];
    registryVersion: number;
}

export interface DataintegrationWorkspaceApplicationPatchTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DataintegrationWorkspaceApplicationPublishedObjectMetadata {
    action: string;
    identifier: string;
    key: string;
    name: string;
    namePath: string;
    objectVersion: number;
    type: string;
}

export interface DataintegrationWorkspaceApplicationRegistryMetadata {
    aggregatorKey: string;
    isFavorite: boolean;
    key: string;
    labels: string[];
    registryVersion: number;
}

export interface DataintegrationWorkspaceApplicationScheduleFrequencyDetails {
    customExpression: string;
    dayOfWeek: string;
    days: number[];
    frequency: string;
    interval: number;
    modelType: string;
    time?: outputs.DataintegrationWorkspaceApplicationScheduleFrequencyDetailsTime;
    weekOfMonth: string;
}

export interface DataintegrationWorkspaceApplicationScheduleFrequencyDetailsTime {
    hour: number;
    minute: number;
    second: number;
}

export interface DataintegrationWorkspaceApplicationScheduleMetadata {
    aggregatorKey: string;
    aggregators: outputs.DataintegrationWorkspaceApplicationScheduleMetadataAggregator[];
    countStatistics: outputs.DataintegrationWorkspaceApplicationScheduleMetadataCountStatistic[];
    createdBy: string;
    createdByName: string;
    identifierPath: string;
    infoFields: {[key: string]: string};
    isFavorite: boolean;
    labels: string[];
    registryVersion: number;
    timeCreated: string;
    timeUpdated: string;
    updatedBy: string;
    updatedByName: string;
}

export interface DataintegrationWorkspaceApplicationScheduleMetadataAggregator {
    description: string;
    identifier: string;
    key: string;
    name: string;
    type: string;
}

export interface DataintegrationWorkspaceApplicationScheduleMetadataCountStatistic {
    objectTypeCountLists: outputs.DataintegrationWorkspaceApplicationScheduleMetadataCountStatisticObjectTypeCountList[];
}

export interface DataintegrationWorkspaceApplicationScheduleMetadataCountStatisticObjectTypeCountList {
    objectCount: string;
    objectType: string;
}

export interface DataintegrationWorkspaceApplicationScheduleParentRef {
    parent: string;
    rootDocId: string;
}

export interface DataintegrationWorkspaceApplicationScheduleRegistryMetadata {
    aggregatorKey: string;
    isFavorite: boolean;
    key: string;
    labels: string[];
    registryVersion: number;
}

export interface DataintegrationWorkspaceApplicationScheduleTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DataintegrationWorkspaceApplicationSourceApplicationInfo {
    applicationKey: string;
    applicationVersion: string;
    copyType: string;
    lastPatchKey: string;
    workspaceId: string;
}

export interface DataintegrationWorkspaceApplicationTaskScheduleLastRunDetail {
    description: string;
    identifier: string;
    key: string;
    lastRunTimeMillis: string;
    modelType: string;
    modelVersion: string;
    name: string;
    objectStatus: number;
    objectVersion: number;
    parentReves: outputs.DataintegrationWorkspaceApplicationTaskScheduleLastRunDetailParentRef[];
}

export interface DataintegrationWorkspaceApplicationTaskScheduleLastRunDetailParentRef {
    parent: string;
    rootDocId: string;
}

export interface DataintegrationWorkspaceApplicationTaskScheduleMetadata {
    aggregatorKey: string;
    aggregators: outputs.DataintegrationWorkspaceApplicationTaskScheduleMetadataAggregator[];
    countStatistics: outputs.DataintegrationWorkspaceApplicationTaskScheduleMetadataCountStatistic[];
    createdBy: string;
    createdByName: string;
    identifierPath: string;
    infoFields: {[key: string]: string};
    isFavorite: boolean;
    labels: string[];
    registryVersion: number;
    timeCreated: string;
    timeUpdated: string;
    updatedBy: string;
    updatedByName: string;
}

export interface DataintegrationWorkspaceApplicationTaskScheduleMetadataAggregator {
    description: string;
    identifier: string;
    key: string;
    name: string;
    type: string;
}

export interface DataintegrationWorkspaceApplicationTaskScheduleMetadataCountStatistic {
    objectTypeCountLists: outputs.DataintegrationWorkspaceApplicationTaskScheduleMetadataCountStatisticObjectTypeCountList[];
}

export interface DataintegrationWorkspaceApplicationTaskScheduleMetadataCountStatisticObjectTypeCountList {
    objectCount: string;
    objectType: string;
}

export interface DataintegrationWorkspaceApplicationTaskScheduleParentRef {
    parent: string;
    rootDocId: string;
}

export interface DataintegrationWorkspaceApplicationTaskScheduleRegistryMetadata {
    aggregatorKey: string;
    isFavorite: boolean;
    key: string;
    labels: string[];
    registryVersion: number;
}

export interface DataintegrationWorkspaceApplicationTaskScheduleScheduleRef {
    description: string;
    frequencyDetails?: outputs.DataintegrationWorkspaceApplicationTaskScheduleScheduleRefFrequencyDetails;
    identifier: string;
    isDaylightAdjustmentEnabled: boolean;
    key: string;
    metadata?: outputs.DataintegrationWorkspaceApplicationTaskScheduleScheduleRefMetadata;
    modelType: string;
    modelVersion: string;
    name: string;
    objectStatus: number;
    objectVersion: number;
    parentRef?: outputs.DataintegrationWorkspaceApplicationTaskScheduleScheduleRefParentRef;
    timezone: string;
}

export interface DataintegrationWorkspaceApplicationTaskScheduleScheduleRefFrequencyDetails {
    customExpression: string;
    dayOfWeek: string;
    days: number[];
    frequency: string;
    interval: number;
    modelType: string;
    time?: outputs.DataintegrationWorkspaceApplicationTaskScheduleScheduleRefFrequencyDetailsTime;
    weekOfMonth: string;
}

export interface DataintegrationWorkspaceApplicationTaskScheduleScheduleRefFrequencyDetailsTime {
    hour: number;
    minute: number;
    second: number;
}

export interface DataintegrationWorkspaceApplicationTaskScheduleScheduleRefMetadata {
    aggregator?: outputs.DataintegrationWorkspaceApplicationTaskScheduleScheduleRefMetadataAggregator;
    aggregatorKey: string;
    countStatistics?: outputs.DataintegrationWorkspaceApplicationTaskScheduleScheduleRefMetadataCountStatistics;
    createdBy: string;
    createdByName: string;
    identifierPath: string;
    infoFields: {[key: string]: string};
    isFavorite: boolean;
    labels: string[];
    registryVersion: number;
    timeCreated: string;
    timeUpdated: string;
    updatedBy: string;
    updatedByName: string;
}

export interface DataintegrationWorkspaceApplicationTaskScheduleScheduleRefMetadataAggregator {
    description: string;
    identifier: string;
    key: string;
    name: string;
    type: string;
}

export interface DataintegrationWorkspaceApplicationTaskScheduleScheduleRefMetadataCountStatistics {
    objectTypeCountLists: outputs.DataintegrationWorkspaceApplicationTaskScheduleScheduleRefMetadataCountStatisticsObjectTypeCountList[];
}

export interface DataintegrationWorkspaceApplicationTaskScheduleScheduleRefMetadataCountStatisticsObjectTypeCountList {
    objectCount: string;
    objectType: string;
}

export interface DataintegrationWorkspaceApplicationTaskScheduleScheduleRefParentRef {
    parent: string;
    rootDocId: string;
}

export interface DataintegrationWorkspaceApplicationTaskScheduleTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DataintegrationWorkspaceApplicationTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DataintegrationWorkspaceExportRequestExportedItem {
    aggregatorKey: string;
    identifier: string;
    key: string;
    name: string;
    namePath: string;
    objectType: string;
    objectVersion: string;
    timeUpdatedInMillis: string;
}

export interface DataintegrationWorkspaceExportRequestTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DataintegrationWorkspaceFolderMetadata {
    aggregatorKey: string;
    aggregators: outputs.DataintegrationWorkspaceFolderMetadataAggregator[];
    countStatistics: outputs.DataintegrationWorkspaceFolderMetadataCountStatistic[];
    createdBy: string;
    createdByName: string;
    identifierPath: string;
    infoFields: {[key: string]: string};
    isFavorite: boolean;
    labels: string[];
    registryVersion: number;
    timeCreated: string;
    timeUpdated: string;
    updatedBy: string;
    updatedByName: string;
}

export interface DataintegrationWorkspaceFolderMetadataAggregator {
    description: string;
    identifier: string;
    key: string;
    name: string;
    type: string;
}

export interface DataintegrationWorkspaceFolderMetadataCountStatistic {
    objectTypeCountLists: outputs.DataintegrationWorkspaceFolderMetadataCountStatisticObjectTypeCountList[];
}

export interface DataintegrationWorkspaceFolderMetadataCountStatisticObjectTypeCountList {
    objectCount: string;
    objectType: string;
}

export interface DataintegrationWorkspaceFolderParentRef {
    parent: string;
    rootDocId: string;
}

export interface DataintegrationWorkspaceFolderRegistryMetadata {
    aggregatorKey: string;
    isFavorite: boolean;
    key: string;
    labels: string[];
    registryVersion: number;
}

export interface DataintegrationWorkspaceFolderTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DataintegrationWorkspaceImportRequestImportConflictResolution {
    duplicatePrefix: string;
    duplicateSuffix: string;
    importConflictResolutionType: string;
}

export interface DataintegrationWorkspaceImportRequestImportedObject {
    aggregatorKey: string;
    identifier: string;
    name: string;
    namePath: string;
    newKey: string;
    objectType: string;
    objectVersion: string;
    oldKey: string;
    resolutionAction: string;
    timeUpdatedInMillis: string;
}

export interface DataintegrationWorkspaceImportRequestTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DataintegrationWorkspaceProjectMetadata {
    aggregatorKey: string;
    aggregators: outputs.DataintegrationWorkspaceProjectMetadataAggregator[];
    countStatistics: outputs.DataintegrationWorkspaceProjectMetadataCountStatistic[];
    createdBy: string;
    createdByName: string;
    identifierPath: string;
    infoFields: {[key: string]: string};
    isFavorite: boolean;
    labels: string[];
    registryVersion: number;
    timeCreated: string;
    timeUpdated: string;
    updatedBy: string;
    updatedByName: string;
}

export interface DataintegrationWorkspaceProjectMetadataAggregator {
    description: string;
    identifier: string;
    key: string;
    name: string;
    type: string;
}

export interface DataintegrationWorkspaceProjectMetadataCountStatistic {
    objectTypeCountLists: outputs.DataintegrationWorkspaceProjectMetadataCountStatisticObjectTypeCountList[];
}

export interface DataintegrationWorkspaceProjectMetadataCountStatisticObjectTypeCountList {
    objectCount: string;
    objectType: string;
}

export interface DataintegrationWorkspaceProjectParentRef {
    parent: string;
    rootDocId: string;
}

export interface DataintegrationWorkspaceProjectRegistryMetadata {
    aggregatorKey: string;
    isFavorite: boolean;
    key: string;
    labels: string[];
    registryVersion: number;
}

export interface DataintegrationWorkspaceProjectTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DataintegrationWorkspaceTaskAuthConfig {
    key: string;
    modelType: string;
    modelVersion: string;
    parentRef?: outputs.DataintegrationWorkspaceTaskAuthConfigParentRef;
    resourcePrincipalSource: string;
}

export interface DataintegrationWorkspaceTaskAuthConfigParentRef {
    parent: string;
    rootDocId: string;
}

export interface DataintegrationWorkspaceTaskCancelRestCallConfig {
    configValues?: outputs.DataintegrationWorkspaceTaskCancelRestCallConfigConfigValues;
    key: string;
    methodType: string;
    modelType: string;
    requestHeaders: {[key: string]: string};
}

export interface DataintegrationWorkspaceTaskCancelRestCallConfigConfigValues {
    configParamValues?: outputs.DataintegrationWorkspaceTaskCancelRestCallConfigConfigValuesConfigParamValues;
    parentRef?: outputs.DataintegrationWorkspaceTaskCancelRestCallConfigConfigValuesParentRef;
}

export interface DataintegrationWorkspaceTaskCancelRestCallConfigConfigValuesConfigParamValues {
    requestPayload?: outputs.DataintegrationWorkspaceTaskCancelRestCallConfigConfigValuesConfigParamValuesRequestPayload;
    requestUrl?: outputs.DataintegrationWorkspaceTaskCancelRestCallConfigConfigValuesConfigParamValuesRequestUrl;
}

export interface DataintegrationWorkspaceTaskCancelRestCallConfigConfigValuesConfigParamValuesRequestPayload {
    parameterValue: string;
    refValue?: outputs.DataintegrationWorkspaceTaskCancelRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValue;
}

export interface DataintegrationWorkspaceTaskCancelRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValue {
    configValues?: outputs.DataintegrationWorkspaceTaskCancelRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValues;
    key: string;
    modelType: string;
}

export interface DataintegrationWorkspaceTaskCancelRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValues {
    configParamValues?: outputs.DataintegrationWorkspaceTaskCancelRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesConfigParamValues;
}

export interface DataintegrationWorkspaceTaskCancelRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesConfigParamValues {
    dataParam?: outputs.DataintegrationWorkspaceTaskCancelRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesConfigParamValuesDataParam;
}

export interface DataintegrationWorkspaceTaskCancelRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesConfigParamValuesDataParam {
    stringValue: string;
}

export interface DataintegrationWorkspaceTaskCancelRestCallConfigConfigValuesConfigParamValuesRequestUrl {
    stringValue: string;
}

export interface DataintegrationWorkspaceTaskCancelRestCallConfigConfigValuesParentRef {
    parent: string;
    rootDocId: string;
}

export interface DataintegrationWorkspaceTaskConfigProviderDelegate {
    bindings?: outputs.DataintegrationWorkspaceTaskConfigProviderDelegateBinding[];
}

export interface DataintegrationWorkspaceTaskConfigProviderDelegateBinding {
    key: string;
    parameterValues?: outputs.DataintegrationWorkspaceTaskConfigProviderDelegateBindingParameterValues;
}

export interface DataintegrationWorkspaceTaskConfigProviderDelegateBindingParameterValues {
    rootObjectValue?: outputs.DataintegrationWorkspaceTaskConfigProviderDelegateBindingParameterValuesRootObjectValue;
    simpleValue: string;
}

export interface DataintegrationWorkspaceTaskConfigProviderDelegateBindingParameterValuesRootObjectValue {
    key: string;
    modelType: string;
    modelVersion: string;
    objectStatus: number;
}

export interface DataintegrationWorkspaceTaskExecuteRestCallConfig {
    configValues?: outputs.DataintegrationWorkspaceTaskExecuteRestCallConfigConfigValues;
    key: string;
    methodType: string;
    modelType: string;
    requestHeaders: {[key: string]: string};
}

export interface DataintegrationWorkspaceTaskExecuteRestCallConfigConfigValues {
    configParamValues?: outputs.DataintegrationWorkspaceTaskExecuteRestCallConfigConfigValuesConfigParamValues;
    parentRef?: outputs.DataintegrationWorkspaceTaskExecuteRestCallConfigConfigValuesParentRef;
}

export interface DataintegrationWorkspaceTaskExecuteRestCallConfigConfigValuesConfigParamValues {
    requestPayload?: outputs.DataintegrationWorkspaceTaskExecuteRestCallConfigConfigValuesConfigParamValuesRequestPayload;
    requestUrl?: outputs.DataintegrationWorkspaceTaskExecuteRestCallConfigConfigValuesConfigParamValuesRequestUrl;
}

export interface DataintegrationWorkspaceTaskExecuteRestCallConfigConfigValuesConfigParamValuesRequestPayload {
    parameterValue: string;
    refValue?: outputs.DataintegrationWorkspaceTaskExecuteRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValue;
}

export interface DataintegrationWorkspaceTaskExecuteRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValue {
    configValues?: outputs.DataintegrationWorkspaceTaskExecuteRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValues;
    key: string;
    modelType: string;
}

export interface DataintegrationWorkspaceTaskExecuteRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValues {
    configParamValues?: outputs.DataintegrationWorkspaceTaskExecuteRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesConfigParamValues;
}

export interface DataintegrationWorkspaceTaskExecuteRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesConfigParamValues {
    dataParam?: outputs.DataintegrationWorkspaceTaskExecuteRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesConfigParamValuesDataParam;
}

export interface DataintegrationWorkspaceTaskExecuteRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesConfigParamValuesDataParam {
    stringValue: string;
}

export interface DataintegrationWorkspaceTaskExecuteRestCallConfigConfigValuesConfigParamValuesRequestUrl {
    stringValue: string;
}

export interface DataintegrationWorkspaceTaskExecuteRestCallConfigConfigValuesParentRef {
    parent: string;
    rootDocId: string;
}

export interface DataintegrationWorkspaceTaskInputPort {
    configValues?: outputs.DataintegrationWorkspaceTaskInputPortConfigValues;
    description: string;
    fields: string[];
    key: string;
    modelType: string;
    modelVersion: string;
    name: string;
    objectStatus: number;
    parentRef?: outputs.DataintegrationWorkspaceTaskInputPortParentRef;
    portType: string;
}

export interface DataintegrationWorkspaceTaskInputPortConfigValues {
    configParamValues?: outputs.DataintegrationWorkspaceTaskInputPortConfigValuesConfigParamValues;
    parentRef?: outputs.DataintegrationWorkspaceTaskInputPortConfigValuesParentRef;
}

export interface DataintegrationWorkspaceTaskInputPortConfigValuesConfigParamValues {
    intValue: number;
    objectValue: string;
    parameterValue: string;
    refValue: string;
    rootObjectValue: string;
    stringValue: string;
}

export interface DataintegrationWorkspaceTaskInputPortConfigValuesParentRef {
    parent: string;
    rootDocId: string;
}

export interface DataintegrationWorkspaceTaskInputPortParentRef {
    parent: string;
    rootDocId: string;
}

export interface DataintegrationWorkspaceTaskMetadata {
    aggregatorKey: string;
    aggregators: outputs.DataintegrationWorkspaceTaskMetadataAggregator[];
    countStatistics: outputs.DataintegrationWorkspaceTaskMetadataCountStatistic[];
    createdBy: string;
    createdByName: string;
    identifierPath: string;
    infoFields: {[key: string]: string};
    isFavorite: boolean;
    labels: string[];
    registryVersion: number;
    timeCreated: string;
    timeUpdated: string;
    updatedBy: string;
    updatedByName: string;
}

export interface DataintegrationWorkspaceTaskMetadataAggregator {
    description: string;
    identifier: string;
    key: string;
    name: string;
    type: string;
}

export interface DataintegrationWorkspaceTaskMetadataCountStatistic {
    objectTypeCountLists: outputs.DataintegrationWorkspaceTaskMetadataCountStatisticObjectTypeCountList[];
}

export interface DataintegrationWorkspaceTaskMetadataCountStatisticObjectTypeCountList {
    objectCount: string;
    objectType: string;
}

export interface DataintegrationWorkspaceTaskOpConfigValues {
    configParamValues?: outputs.DataintegrationWorkspaceTaskOpConfigValuesConfigParamValues;
    parentRef?: outputs.DataintegrationWorkspaceTaskOpConfigValuesParentRef;
}

export interface DataintegrationWorkspaceTaskOpConfigValuesConfigParamValues {
    configParamValue?: outputs.DataintegrationWorkspaceTaskOpConfigValuesConfigParamValuesConfigParamValue;
    key: string;
}

export interface DataintegrationWorkspaceTaskOpConfigValuesConfigParamValuesConfigParamValue {
    intValue: number;
    objectValue: string;
    parameterValue: string;
    refValue?: outputs.DataintegrationWorkspaceTaskOpConfigValuesConfigParamValuesConfigParamValueRefValue;
    rootObjectValue?: outputs.DataintegrationWorkspaceTaskOpConfigValuesConfigParamValuesConfigParamValueRootObjectValue;
    stringValue: string;
}

export interface DataintegrationWorkspaceTaskOpConfigValuesConfigParamValuesConfigParamValueRefValue {
    key: string;
    modelType: string;
    modelVersion: string;
    name: string;
    objectStatus: number;
}

export interface DataintegrationWorkspaceTaskOpConfigValuesConfigParamValuesConfigParamValueRootObjectValue {
    key: string;
    modelType: string;
    modelVersion: string;
    objectStatus: number;
}

export interface DataintegrationWorkspaceTaskOpConfigValuesParentRef {
    parent: string;
    rootDocId: string;
}

export interface DataintegrationWorkspaceTaskOutputPort {
    configValues?: outputs.DataintegrationWorkspaceTaskOutputPortConfigValues;
    description: string;
    fields: string[];
    key: string;
    modelType: string;
    modelVersion: string;
    name: string;
    objectStatus: number;
    parentRef?: outputs.DataintegrationWorkspaceTaskOutputPortParentRef;
    portType: string;
}

export interface DataintegrationWorkspaceTaskOutputPortConfigValues {
    configParamValues?: outputs.DataintegrationWorkspaceTaskOutputPortConfigValuesConfigParamValues;
    parentRef?: outputs.DataintegrationWorkspaceTaskOutputPortConfigValuesParentRef;
}

export interface DataintegrationWorkspaceTaskOutputPortConfigValuesConfigParamValues {
    intValue: number;
    objectValue: string;
    parameterValue: string;
    refValue: string;
    rootObjectValue: string;
    stringValue: string;
}

export interface DataintegrationWorkspaceTaskOutputPortConfigValuesParentRef {
    parent: string;
    rootDocId: string;
}

export interface DataintegrationWorkspaceTaskOutputPortParentRef {
    parent: string;
    rootDocId: string;
}

export interface DataintegrationWorkspaceTaskParameter {
    configValues?: outputs.DataintegrationWorkspaceTaskParameterConfigValues;
    defaultValue: string;
    description: string;
    isInput: boolean;
    isOutput: boolean;
    key: string;
    modelType: string;
    modelVersion: string;
    name: string;
    objectStatus: number;
    outputAggregationType: string;
    parentRef?: outputs.DataintegrationWorkspaceTaskParameterParentRef;
    rootObjectDefaultValue: string;
    type: string;
    typeName: string;
    usedFor: string;
}

export interface DataintegrationWorkspaceTaskParameterConfigValues {
    configParamValues?: outputs.DataintegrationWorkspaceTaskParameterConfigValuesConfigParamValues;
    parentRef?: outputs.DataintegrationWorkspaceTaskParameterConfigValuesParentRef;
}

export interface DataintegrationWorkspaceTaskParameterConfigValuesConfigParamValues {
    configParamValue?: outputs.DataintegrationWorkspaceTaskParameterConfigValuesConfigParamValuesConfigParamValue;
    key: string;
}

export interface DataintegrationWorkspaceTaskParameterConfigValuesConfigParamValuesConfigParamValue {
    intValue: number;
    objectValue: string;
    parameterValue: string;
    refValue?: outputs.DataintegrationWorkspaceTaskParameterConfigValuesConfigParamValuesConfigParamValueRefValue;
    rootObjectValue?: outputs.DataintegrationWorkspaceTaskParameterConfigValuesConfigParamValuesConfigParamValueRootObjectValue;
    stringValue: string;
}

export interface DataintegrationWorkspaceTaskParameterConfigValuesConfigParamValuesConfigParamValueRefValue {
    key: string;
    modelType: string;
    modelVersion: string;
    name: string;
    objectStatus: number;
}

export interface DataintegrationWorkspaceTaskParameterConfigValuesConfigParamValuesConfigParamValueRootObjectValue {
    key: string;
    modelType: string;
    modelVersion: string;
    objectStatus: number;
}

export interface DataintegrationWorkspaceTaskParameterConfigValuesParentRef {
    parent: string;
    rootDocId: string;
}

export interface DataintegrationWorkspaceTaskParameterParentRef {
    parent: string;
    rootDocId: string;
}

export interface DataintegrationWorkspaceTaskParentRef {
    parent: string;
    rootDocId: string;
}

export interface DataintegrationWorkspaceTaskPollRestCallConfig {
    configValues?: outputs.DataintegrationWorkspaceTaskPollRestCallConfigConfigValues;
    key: string;
    methodType: string;
    modelType: string;
    requestHeaders: {[key: string]: string};
}

export interface DataintegrationWorkspaceTaskPollRestCallConfigConfigValues {
    configParamValues?: outputs.DataintegrationWorkspaceTaskPollRestCallConfigConfigValuesConfigParamValues;
    parentRef?: outputs.DataintegrationWorkspaceTaskPollRestCallConfigConfigValuesParentRef;
}

export interface DataintegrationWorkspaceTaskPollRestCallConfigConfigValuesConfigParamValues {
    pollCondition?: outputs.DataintegrationWorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesPollCondition;
    pollInterval?: outputs.DataintegrationWorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesPollInterval;
    pollIntervalUnit?: outputs.DataintegrationWorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesPollIntervalUnit;
    pollMaxDuration?: outputs.DataintegrationWorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesPollMaxDuration;
    pollMaxDurationUnit?: outputs.DataintegrationWorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesPollMaxDurationUnit;
    requestPayload?: outputs.DataintegrationWorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesRequestPayload;
    requestUrl?: outputs.DataintegrationWorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesRequestUrl;
}

export interface DataintegrationWorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesPollCondition {
    parameterValue: string;
    refValue?: outputs.DataintegrationWorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesPollConditionRefValue;
}

export interface DataintegrationWorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesPollConditionRefValue {
    exprString: string;
    key: string;
    modelType: string;
    name: string;
}

export interface DataintegrationWorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesPollInterval {
    objectValue: number;
}

export interface DataintegrationWorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesPollIntervalUnit {
    stringValue: string;
}

export interface DataintegrationWorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesPollMaxDuration {
    objectValue: number;
}

export interface DataintegrationWorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesPollMaxDurationUnit {
    stringValue: string;
}

export interface DataintegrationWorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesRequestPayload {
    parameterValue: string;
    refValue?: outputs.DataintegrationWorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValue;
}

export interface DataintegrationWorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValue {
    configValues?: outputs.DataintegrationWorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValues;
    key: string;
    modelType: string;
    name: string;
}

export interface DataintegrationWorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValues {
    configParamValues?: outputs.DataintegrationWorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesConfigParamValues;
}

export interface DataintegrationWorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesConfigParamValues {
    dataParam?: outputs.DataintegrationWorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesConfigParamValuesDataParam;
}

export interface DataintegrationWorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesConfigParamValuesDataParam {
    stringValue: string;
}

export interface DataintegrationWorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesRequestUrl {
    stringValue: string;
}

export interface DataintegrationWorkspaceTaskPollRestCallConfigConfigValuesParentRef {
    parent: string;
    rootDocId: string;
}

export interface DataintegrationWorkspaceTaskRegistryMetadata {
    aggregatorKey: string;
    isFavorite: boolean;
    key: string;
    labels: string[];
    registryVersion: number;
}

export interface DataintegrationWorkspaceTaskTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DataintegrationWorkspaceTaskTypedExpression {
    configValues?: outputs.DataintegrationWorkspaceTaskTypedExpressionConfigValues;
    description: string;
    expression: string;
    key: string;
    modelType: string;
    modelVersion: string;
    name: string;
    objectStatus: number;
    parentRef?: outputs.DataintegrationWorkspaceTaskTypedExpressionParentRef;
    type: string;
}

export interface DataintegrationWorkspaceTaskTypedExpressionConfigValues {
    configParamValues?: outputs.DataintegrationWorkspaceTaskTypedExpressionConfigValuesConfigParamValues;
    parentRef?: outputs.DataintegrationWorkspaceTaskTypedExpressionConfigValuesParentRef;
}

export interface DataintegrationWorkspaceTaskTypedExpressionConfigValuesConfigParamValues {
    length?: outputs.DataintegrationWorkspaceTaskTypedExpressionConfigValuesConfigParamValuesLength;
    scale?: outputs.DataintegrationWorkspaceTaskTypedExpressionConfigValuesConfigParamValuesScale;
}

export interface DataintegrationWorkspaceTaskTypedExpressionConfigValuesConfigParamValuesLength {
    intValue: number;
}

export interface DataintegrationWorkspaceTaskTypedExpressionConfigValuesConfigParamValuesScale {
    intValue: number;
}

export interface DataintegrationWorkspaceTaskTypedExpressionConfigValuesParentRef {
    parent: string;
    rootDocId: string;
}

export interface DataintegrationWorkspaceTaskTypedExpressionParentRef {
    parent: string;
    rootDocId: string;
}

export interface DataintegrationWorkspaceTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DatascienceJobJobConfigurationDetails {
    commandLineArguments: string;
    environmentVariables: {[key: string]: string};
    jobType: string;
    maximumRuntimeInMinutes: string;
}

export interface DatascienceJobJobEnvironmentConfigurationDetails {
    cmds: string[];
    entrypoints: string[];
    image: string;
    imageDigest: string;
    imageSignatureId: string;
    jobEnvironmentType: string;
}

export interface DatascienceJobJobInfrastructureConfigurationDetails {
    blockStorageSizeInGbs: number;
    jobInfrastructureType: string;
    jobShapeConfigDetails?: outputs.DatascienceJobJobInfrastructureConfigurationDetailsJobShapeConfigDetails;
    shapeName: string;
    subnetId: string;
}

export interface DatascienceJobJobInfrastructureConfigurationDetailsJobShapeConfigDetails {
    memoryInGbs: number;
    ocpus: number;
}

export interface DatascienceJobJobLogConfigurationDetails {
    enableAutoLogCreation: boolean;
    enableLogging: boolean;
    logGroupId: string;
    logId: string;
}

export interface DatascienceJobJobStorageMountConfigurationDetailsList {
    bucket: string;
    destinationDirectoryName: string;
    destinationPath: string;
    exportId: string;
    mountTargetId: string;
    namespace: string;
    prefix: string;
    storageType: string;
}

export interface DatascienceJobRunJobConfigurationOverrideDetails {
    commandLineArguments: string;
    environmentVariables: {[key: string]: string};
    jobType: string;
    maximumRuntimeInMinutes: string;
}

export interface DatascienceJobRunJobEnvironmentConfigurationOverrideDetails {
    cmds: string[];
    entrypoints: string[];
    image: string;
    imageDigest: string;
    imageSignatureId: string;
    jobEnvironmentType: string;
}

export interface DatascienceJobRunJobInfrastructureConfigurationDetail {
    blockStorageSizeInGbs: number;
    jobInfrastructureType: string;
    jobShapeConfigDetails: outputs.DatascienceJobRunJobInfrastructureConfigurationDetailJobShapeConfigDetail[];
    shapeName: string;
    subnetId: string;
}

export interface DatascienceJobRunJobInfrastructureConfigurationDetailJobShapeConfigDetail {
    memoryInGbs: number;
    ocpus: number;
}

export interface DatascienceJobRunJobLogConfigurationOverrideDetails {
    enableAutoLogCreation: boolean;
    enableLogging: boolean;
    logGroupId: string;
    logId: string;
}

export interface DatascienceJobRunJobStorageMountConfigurationDetailsList {
    bucket: string;
    destinationDirectoryName: string;
    destinationPath: string;
    exportId: string;
    mountTargetId: string;
    namespace: string;
    prefix: string;
    storageType: string;
}

export interface DatascienceJobRunLogDetail {
    logGroupId: string;
    logId: string;
}

export interface DatascienceJobRunTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DatascienceJobTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DatascienceModelArtifactExportTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DatascienceModelArtifactImportTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DatascienceModelCustomMetadataList {
    category: string;
    description: string;
    key: string;
    value: string;
}

export interface DatascienceModelDefinedMetadataList {
    category: string;
    description: string;
    key: string;
    value: string;
}

export interface DatascienceModelDeploymentCategoryLogDetails {
    access?: outputs.DatascienceModelDeploymentCategoryLogDetailsAccess;
    predict?: outputs.DatascienceModelDeploymentCategoryLogDetailsPredict;
}

export interface DatascienceModelDeploymentCategoryLogDetailsAccess {
    logGroupId: string;
    logId: string;
}

export interface DatascienceModelDeploymentCategoryLogDetailsPredict {
    logGroupId: string;
    logId: string;
}

export interface DatascienceModelDeploymentModelDeploymentConfigurationDetails {
    deploymentType: string;
    environmentConfigurationDetails?: outputs.DatascienceModelDeploymentModelDeploymentConfigurationDetailsEnvironmentConfigurationDetails;
    modelConfigurationDetails: outputs.DatascienceModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetails;
}

export interface DatascienceModelDeploymentModelDeploymentConfigurationDetailsEnvironmentConfigurationDetails {
    cmds: string[];
    entrypoints: string[];
    environmentConfigurationType: string;
    environmentVariables: {[key: string]: string};
    healthCheckPort: number;
    image: string;
    imageDigest: string;
    serverPort: number;
}

export interface DatascienceModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetails {
    bandwidthMbps: number;
    instanceConfiguration: outputs.DatascienceModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsInstanceConfiguration;
    maximumBandwidthMbps: number;
    modelId: string;
    scalingPolicy?: outputs.DatascienceModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsScalingPolicy;
}

export interface DatascienceModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsInstanceConfiguration {
    instanceShapeName: string;
    modelDeploymentInstanceShapeConfigDetails?: outputs.DatascienceModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsInstanceConfigurationModelDeploymentInstanceShapeConfigDetails;
    subnetId: string;
}

export interface DatascienceModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsInstanceConfigurationModelDeploymentInstanceShapeConfigDetails {
    cpuBaseline: string;
    memoryInGbs: number;
    ocpus: number;
}

export interface DatascienceModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsScalingPolicy {
    autoScalingPolicies?: outputs.DatascienceModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsScalingPolicyAutoScalingPolicy[];
    coolDownInSeconds: number;
    instanceCount: number;
    isEnabled: boolean;
    policyType: string;
}

export interface DatascienceModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsScalingPolicyAutoScalingPolicy {
    autoScalingPolicyType: string;
    initialInstanceCount: number;
    maximumInstanceCount: number;
    minimumInstanceCount: number;
    rules: outputs.DatascienceModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsScalingPolicyAutoScalingPolicyRule[];
}

export interface DatascienceModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsScalingPolicyAutoScalingPolicyRule {
    metricExpressionRuleType: string;
    metricType: string;
    scaleInConfiguration: outputs.DatascienceModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsScalingPolicyAutoScalingPolicyRuleScaleInConfiguration;
    scaleOutConfiguration: outputs.DatascienceModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsScalingPolicyAutoScalingPolicyRuleScaleOutConfiguration;
}

export interface DatascienceModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsScalingPolicyAutoScalingPolicyRuleScaleInConfiguration {
    instanceCountAdjustment: number;
    pendingDuration: string;
    query: string;
    scalingConfigurationType: string;
    threshold: number;
}

export interface DatascienceModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsScalingPolicyAutoScalingPolicyRuleScaleOutConfiguration {
    instanceCountAdjustment: number;
    pendingDuration: string;
    query: string;
    scalingConfigurationType: string;
    threshold: number;
}

export interface DatascienceModelDeploymentModelDeploymentSystemData {
    currentInstanceCount: number;
    systemInfraType: string;
}

export interface DatascienceModelDeploymentTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DatascienceModelProvenanceTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DatascienceModelTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DatascienceModelVersionSetTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DatascienceNotebookSessionNotebookSessionConfigDetails {
    blockStorageSizeInGbs: number;
    notebookSessionShapeConfigDetails?: outputs.DatascienceNotebookSessionNotebookSessionConfigDetailsNotebookSessionShapeConfigDetails;
    privateEndpointId: string;
    shape: string;
    subnetId: string;
}

export interface DatascienceNotebookSessionNotebookSessionConfigDetailsNotebookSessionShapeConfigDetails {
    memoryInGbs: number;
    ocpus: number;
}

export interface DatascienceNotebookSessionNotebookSessionConfigurationDetails {
    blockStorageSizeInGbs: number;
    notebookSessionShapeConfigDetails?: outputs.DatascienceNotebookSessionNotebookSessionConfigurationDetailsNotebookSessionShapeConfigDetails;
    privateEndpointId: string;
    shape: string;
    subnetId: string;
}

export interface DatascienceNotebookSessionNotebookSessionConfigurationDetailsNotebookSessionShapeConfigDetails {
    memoryInGbs: number;
    ocpus: number;
}

export interface DatascienceNotebookSessionNotebookSessionRuntimeConfigDetails {
    customEnvironmentVariables: {[key: string]: string};
    notebookSessionGitConfigDetails?: outputs.DatascienceNotebookSessionNotebookSessionRuntimeConfigDetailsNotebookSessionGitConfigDetails;
}

export interface DatascienceNotebookSessionNotebookSessionRuntimeConfigDetailsNotebookSessionGitConfigDetails {
    notebookSessionGitRepoConfigCollections?: outputs.DatascienceNotebookSessionNotebookSessionRuntimeConfigDetailsNotebookSessionGitConfigDetailsNotebookSessionGitRepoConfigCollection[];
}

export interface DatascienceNotebookSessionNotebookSessionRuntimeConfigDetailsNotebookSessionGitConfigDetailsNotebookSessionGitRepoConfigCollection {
    url: string;
}

export interface DatascienceNotebookSessionNotebookSessionStorageMountConfigurationDetailsList {
    bucket: string;
    destinationDirectoryName: string;
    destinationPath: string;
    exportId: string;
    mountTargetId: string;
    namespace: string;
    prefix: string;
    storageType: string;
}

export interface DatascienceNotebookSessionTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DatasciencePipelineConfigurationDetails {
    commandLineArguments: string;
    environmentVariables: {[key: string]: string};
    maximumRuntimeInMinutes: string;
    type: string;
}

export interface DatasciencePipelineInfrastructureConfigurationDetails {
    blockStorageSizeInGbs: number;
    shapeConfigDetails?: outputs.DatasciencePipelineInfrastructureConfigurationDetailsShapeConfigDetails;
    shapeName: string;
    subnetId?: string;
}

export interface DatasciencePipelineInfrastructureConfigurationDetailsShapeConfigDetails {
    memoryInGbs: number;
    ocpus: number;
}

export interface DatasciencePipelineLogConfigurationDetails {
    enableAutoLogCreation: boolean;
    enableLogging: boolean;
    logGroupId: string;
    logId: string;
}

export interface DatasciencePipelineRunConfigurationDetail {
    commandLineArguments: string;
    environmentVariables: {[key: string]: string};
    maximumRuntimeInMinutes: string;
    type: string;
}

export interface DatasciencePipelineRunConfigurationOverrideDetails {
    commandLineArguments: string;
    environmentVariables: {[key: string]: string};
    maximumRuntimeInMinutes: string;
    type: string;
}

export interface DatasciencePipelineRunLogConfigurationOverrideDetails {
    enableAutoLogCreation: boolean;
    enableLogging: boolean;
    logGroupId: string;
    logId: string;
}

export interface DatasciencePipelineRunLogDetail {
    logGroupId: string;
    logId: string;
}

export interface DatasciencePipelineRunStepOverrideDetail {
    stepConfigurationDetails: outputs.DatasciencePipelineRunStepOverrideDetailStepConfigurationDetails;
    stepContainerConfigurationDetails?: outputs.DatasciencePipelineRunStepOverrideDetailStepContainerConfigurationDetails;
    stepName: string;
}

export interface DatasciencePipelineRunStepOverrideDetailStepConfigurationDetails {
    commandLineArguments: string;
    environmentVariables: {[key: string]: string};
    maximumRuntimeInMinutes: string;
}

export interface DatasciencePipelineRunStepOverrideDetailStepContainerConfigurationDetails {
    cmds: string[];
    containerType: string;
    entrypoints: string[];
    image: string;
    imageDigest: string;
    imageSignatureId: string;
}

export interface DatasciencePipelineRunStepRun {
    jobRunId: string;
    lifecycleDetails: string;
    state: string;
    stepName: string;
    stepType: string;
    timeFinished: string;
    timeStarted: string;
}

export interface DatasciencePipelineRunTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DatasciencePipelineStepArtifact {
    artifactContentDisposition?: string;
    artifactContentLength: string;
    artifactContentMd5: string;
    artifactLastModified: string;
    pipelineStepArtifact: string;
    stepName: string;
}

export interface DatasciencePipelineStepDetail {
    dependsOns?: string[];
    description: string;
    isArtifactUploaded: boolean;
    jobId: string;
    stepConfigurationDetails?: outputs.DatasciencePipelineStepDetailStepConfigurationDetails;
    stepContainerConfigurationDetails?: outputs.DatasciencePipelineStepDetailStepContainerConfigurationDetails;
    stepInfrastructureConfigurationDetails?: outputs.DatasciencePipelineStepDetailStepInfrastructureConfigurationDetails;
    stepName: string;
    stepType: string;
}

export interface DatasciencePipelineStepDetailStepConfigurationDetails {
    commandLineArguments: string;
    environmentVariables: {[key: string]: string};
    maximumRuntimeInMinutes: string;
}

export interface DatasciencePipelineStepDetailStepContainerConfigurationDetails {
    cmds: string[];
    containerType: string;
    entrypoints: string[];
    image: string;
    imageDigest: string;
    imageSignatureId: string;
}

export interface DatasciencePipelineStepDetailStepInfrastructureConfigurationDetails {
    blockStorageSizeInGbs: number;
    shapeConfigDetails?: outputs.DatasciencePipelineStepDetailStepInfrastructureConfigurationDetailsShapeConfigDetails;
    shapeName: string;
    subnetId: string;
}

export interface DatasciencePipelineStepDetailStepInfrastructureConfigurationDetailsShapeConfigDetails {
    memoryInGbs: number;
    ocpus: number;
}

export interface DatasciencePipelineTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DatasciencePrivateEndpointTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DatascienceProjectTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DelegateAccessControlDelegationControlTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DelegateAccessControlDelegationSubscriptionTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DemandSignalOccDemandSignalOccDemandSignal {
    resourceType: string;
    units: string;
    values: outputs.DemandSignalOccDemandSignalOccDemandSignalValue[];
}

export interface DemandSignalOccDemandSignalOccDemandSignalValue {
    comments: string;
    timeExpected: string;
    value: number;
}

export interface DemandSignalOccDemandSignalPatchOperation {
    from: string;
    operation: string;
    position?: string;
    selectedItem?: string;
    selection: string;
    value: {[key: string]: string};
}

export interface DemandSignalOccDemandSignalTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DesktopsDesktopPoolAvailabilityPolicy {
    startSchedule: outputs.DesktopsDesktopPoolAvailabilityPolicyStartSchedule;
    stopSchedule: outputs.DesktopsDesktopPoolAvailabilityPolicyStopSchedule;
}

export interface DesktopsDesktopPoolAvailabilityPolicyStartSchedule {
    cronExpression: string;
    timezone: string;
}

export interface DesktopsDesktopPoolAvailabilityPolicyStopSchedule {
    cronExpression: string;
    timezone: string;
}

export interface DesktopsDesktopPoolDevicePolicy {
    audioMode: string;
    cdmMode: string;
    clipboardMode: string;
    isDisplayEnabled: boolean;
    isKeyboardEnabled: boolean;
    isPointerEnabled: boolean;
    isPrintingEnabled: boolean;
}

export interface DesktopsDesktopPoolImage {
    imageId: string;
    imageName: string;
}

export interface DesktopsDesktopPoolNetworkConfiguration {
    subnetId: string;
    vcnId: string;
}

export interface DesktopsDesktopPoolTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DevopsBuildPipelineBuildPipelineParameters {
    items: outputs.DevopsBuildPipelineBuildPipelineParametersItem[];
}

export interface DevopsBuildPipelineBuildPipelineParametersItem {
    defaultValue: string;
    description: string;
    name: string;
}

export interface DevopsBuildPipelineStageBuildPipelineStagePredecessorCollection {
    items: outputs.DevopsBuildPipelineStageBuildPipelineStagePredecessorCollectionItem[];
}

export interface DevopsBuildPipelineStageBuildPipelineStagePredecessorCollectionItem {
    id: string;
}

export interface DevopsBuildPipelineStageBuildRunnerShapeConfig {
    buildRunnerType: string;
    memoryInGbs: number;
    ocpus: number;
}

export interface DevopsBuildPipelineStageBuildSourceCollection {
    items?: outputs.DevopsBuildPipelineStageBuildSourceCollectionItem[];
}

export interface DevopsBuildPipelineStageBuildSourceCollectionItem {
    branch: string;
    connectionId: string;
    connectionType: string;
    name: string;
    repositoryId: string;
    repositoryUrl: string;
}

export interface DevopsBuildPipelineStageDeliverArtifactCollection {
    items?: outputs.DevopsBuildPipelineStageDeliverArtifactCollectionItem[];
}

export interface DevopsBuildPipelineStageDeliverArtifactCollectionItem {
    artifactId: string;
    artifactName: string;
}

export interface DevopsBuildPipelineStagePrivateAccessConfig {
    networkChannelType: string;
    nsgIds: string[];
    subnetId: string;
}

export interface DevopsBuildPipelineStageTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DevopsBuildPipelineStageWaitCriteria {
    waitDuration: string;
    waitType: string;
}

export interface DevopsBuildPipelineTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DevopsBuildRunBuildOutput {
    artifactOverrideParameters: outputs.DevopsBuildRunBuildOutputArtifactOverrideParameter[];
    deliveredArtifacts: outputs.DevopsBuildRunBuildOutputDeliveredArtifact[];
    exportedVariables: outputs.DevopsBuildRunBuildOutputExportedVariable[];
    vulnerabilityAuditSummaryCollections: outputs.DevopsBuildRunBuildOutputVulnerabilityAuditSummaryCollection[];
}

export interface DevopsBuildRunBuildOutputArtifactOverrideParameter {
    items: outputs.DevopsBuildRunBuildOutputArtifactOverrideParameterItem[];
}

export interface DevopsBuildRunBuildOutputArtifactOverrideParameterItem {
    deployArtifactId: string;
    name: string;
    value: string;
}

export interface DevopsBuildRunBuildOutputDeliveredArtifact {
    items: outputs.DevopsBuildRunBuildOutputDeliveredArtifactItem[];
}

export interface DevopsBuildRunBuildOutputDeliveredArtifactItem {
    artifactRepositoryId: string;
    artifactType: string;
    deliveredArtifactHash: string;
    deliveredArtifactId: string;
    deployArtifactId: string;
    imageUri: string;
    outputArtifactName: string;
    path: string;
    version: string;
}

export interface DevopsBuildRunBuildOutputExportedVariable {
    items: outputs.DevopsBuildRunBuildOutputExportedVariableItem[];
}

export interface DevopsBuildRunBuildOutputExportedVariableItem {
    name: string;
    value: string;
}

export interface DevopsBuildRunBuildOutputVulnerabilityAuditSummaryCollection {
    items: outputs.DevopsBuildRunBuildOutputVulnerabilityAuditSummaryCollectionItem[];
}

export interface DevopsBuildRunBuildOutputVulnerabilityAuditSummaryCollectionItem {
    buildStageId: string;
    commitHash: string;
    vulnerabilityAuditId: string;
}

export interface DevopsBuildRunBuildRunArguments {
    items: outputs.DevopsBuildRunBuildRunArgumentsItem[];
}

export interface DevopsBuildRunBuildRunArgumentsItem {
    name: string;
    value: string;
}

export interface DevopsBuildRunBuildRunProgress {
    buildPipelineStageRunProgress: {[key: string]: string};
    timeFinished: string;
    timeStarted: string;
}

export interface DevopsBuildRunBuildRunSource {
    repositoryId: string;
    sourceType: string;
    triggerId: string;
    triggerInfos: outputs.DevopsBuildRunBuildRunSourceTriggerInfo[];
}

export interface DevopsBuildRunBuildRunSourceTriggerInfo {
    actions: outputs.DevopsBuildRunBuildRunSourceTriggerInfoAction[];
    displayName: string;
}

export interface DevopsBuildRunBuildRunSourceTriggerInfoAction {
    buildPipelineId: string;
    filters: outputs.DevopsBuildRunBuildRunSourceTriggerInfoActionFilter[];
    type: string;
}

export interface DevopsBuildRunBuildRunSourceTriggerInfoActionFilter {
    events: string[];
    excludes: outputs.DevopsBuildRunBuildRunSourceTriggerInfoActionFilterExclude[];
    includes: outputs.DevopsBuildRunBuildRunSourceTriggerInfoActionFilterInclude[];
    triggerSource: string;
}

export interface DevopsBuildRunBuildRunSourceTriggerInfoActionFilterExclude {
    fileFilters: outputs.DevopsBuildRunBuildRunSourceTriggerInfoActionFilterExcludeFileFilter[];
}

export interface DevopsBuildRunBuildRunSourceTriggerInfoActionFilterExcludeFileFilter {
    filePaths: string[];
}

export interface DevopsBuildRunBuildRunSourceTriggerInfoActionFilterInclude {
    baseRef: string;
    fileFilters: outputs.DevopsBuildRunBuildRunSourceTriggerInfoActionFilterIncludeFileFilter[];
    headRef: string;
    repositoryName: string;
}

export interface DevopsBuildRunBuildRunSourceTriggerInfoActionFilterIncludeFileFilter {
    filePaths: string[];
}

export interface DevopsBuildRunCommitInfo {
    commitHash: string;
    repositoryBranch: string;
    repositoryUrl: string;
}

export interface DevopsBuildRunTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DevopsConnectionLastConnectionValidationResult {
    message: string;
    result: string;
    timeValidated: string;
}

export interface DevopsConnectionTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DevopsConnectionTlsVerifyConfig {
    caCertificateBundleId: string;
    tlsVerifyMode: string;
}

export interface DevopsDeployArtifactDeployArtifactSource {
    base64encodedContent: string;
    chartUrl: string;
    deployArtifactPath: string;
    deployArtifactSourceType: string;
    deployArtifactVersion: string;
    helmArtifactSourceType: string;
    helmVerificationKeySource?: outputs.DevopsDeployArtifactDeployArtifactSourceHelmVerificationKeySource;
    imageDigest: string;
    imageUri: string;
    repositoryId: string;
}

export interface DevopsDeployArtifactDeployArtifactSourceHelmVerificationKeySource {
    currentPublicKey?: string;
    previousPublicKey?: string;
    vaultSecretId?: string;
    verificationKeySourceType: string;
}

export interface DevopsDeployArtifactTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DevopsDeployEnvironmentComputeInstanceGroupSelectors {
    items?: outputs.DevopsDeployEnvironmentComputeInstanceGroupSelectorsItem[];
}

export interface DevopsDeployEnvironmentComputeInstanceGroupSelectorsItem {
    computeInstanceIds: string[];
    query: string;
    region: string;
    selectorType: string;
}

export interface DevopsDeployEnvironmentNetworkChannel {
    networkChannelType: string;
    nsgIds: string[];
    subnetId: string;
}

export interface DevopsDeployEnvironmentTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DevopsDeployPipelineDeployPipelineArtifact {
    items: outputs.DevopsDeployPipelineDeployPipelineArtifactItem[];
}

export interface DevopsDeployPipelineDeployPipelineArtifactItem {
    deployArtifactId: string;
    deployPipelineStages: outputs.DevopsDeployPipelineDeployPipelineArtifactItemDeployPipelineStage[];
    displayName: string;
}

export interface DevopsDeployPipelineDeployPipelineArtifactItemDeployPipelineStage {
    items: outputs.DevopsDeployPipelineDeployPipelineArtifactItemDeployPipelineStageItem[];
}

export interface DevopsDeployPipelineDeployPipelineArtifactItemDeployPipelineStageItem {
    deployStageId: string;
    displayName: string;
}

export interface DevopsDeployPipelineDeployPipelineEnvironment {
    items: outputs.DevopsDeployPipelineDeployPipelineEnvironmentItem[];
}

export interface DevopsDeployPipelineDeployPipelineEnvironmentItem {
    deployEnvironmentId: string;
    deployPipelineStages: outputs.DevopsDeployPipelineDeployPipelineEnvironmentItemDeployPipelineStage[];
    displayName: string;
}

export interface DevopsDeployPipelineDeployPipelineEnvironmentItemDeployPipelineStage {
    items: outputs.DevopsDeployPipelineDeployPipelineEnvironmentItemDeployPipelineStageItem[];
}

export interface DevopsDeployPipelineDeployPipelineEnvironmentItemDeployPipelineStageItem {
    deployStageId: string;
    displayName: string;
}

export interface DevopsDeployPipelineDeployPipelineParameters {
    items: outputs.DevopsDeployPipelineDeployPipelineParametersItem[];
}

export interface DevopsDeployPipelineDeployPipelineParametersItem {
    defaultValue: string;
    description: string;
    name: string;
}

export interface DevopsDeployPipelineTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DevopsDeployStageApprovalPolicy {
    approvalPolicyType: string;
    numberOfApprovalsRequired: number;
}

export interface DevopsDeployStageBlueBackendIps {
    items: string[];
}

export interface DevopsDeployStageBlueGreenStrategy {
    ingressName: string;
    namespaceA: string;
    namespaceB: string;
    strategyType: string;
}

export interface DevopsDeployStageCanaryStrategy {
    ingressName: string;
    namespace: string;
    strategyType: string;
}

export interface DevopsDeployStageContainerConfig {
    availabilityDomain: string;
    compartmentId: string;
    containerConfigType: string;
    networkChannel: outputs.DevopsDeployStageContainerConfigNetworkChannel;
    shapeConfig: outputs.DevopsDeployStageContainerConfigShapeConfig;
    shapeName: string;
}

export interface DevopsDeployStageContainerConfigNetworkChannel {
    networkChannelType: string;
    nsgIds: string[];
    subnetId: string;
}

export interface DevopsDeployStageContainerConfigShapeConfig {
    memoryInGbs: number;
    ocpus: number;
}

export interface DevopsDeployStageDeployStagePredecessorCollection {
    items: outputs.DevopsDeployStageDeployStagePredecessorCollectionItem[];
}

export interface DevopsDeployStageDeployStagePredecessorCollectionItem {
    id: string;
}

export interface DevopsDeployStageFailurePolicy {
    failureCount: number;
    failurePercentage: number;
    policyType: string;
}

export interface DevopsDeployStageGreenBackendIps {
    items: string[];
}

export interface DevopsDeployStageLoadBalancerConfig {
    backendPort: number;
    listenerName: string;
    loadBalancerId: string;
    state: string;
}

export interface DevopsDeployStageProductionLoadBalancerConfig {
    backendPort: number;
    listenerName: string;
    loadBalancerId: string;
    state: string;
}

export interface DevopsDeployStageRollbackPolicy {
    policyType: string;
}

export interface DevopsDeployStageRolloutPolicy {
    batchCount: number;
    batchDelayInSeconds: number;
    batchPercentage: number;
    policyType?: string;
    rampLimitPercent: number;
}

export interface DevopsDeployStageSetString {
    items?: outputs.DevopsDeployStageSetStringItem[];
}

export interface DevopsDeployStageSetStringItem {
    name: string;
    value: string;
}

export interface DevopsDeployStageSetValues {
    items?: outputs.DevopsDeployStageSetValuesItem[];
}

export interface DevopsDeployStageSetValuesItem {
    name: string;
    value: string;
}

export interface DevopsDeployStageTestLoadBalancerConfig {
    backendPort: number;
    listenerName: string;
    loadBalancerId: string;
    state: string;
}

export interface DevopsDeployStageTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DevopsDeployStageWaitCriteria {
    waitDuration: string;
    waitType: string;
}

export interface DevopsDeploymentDeployArtifactOverrideArguments {
    items?: outputs.DevopsDeploymentDeployArtifactOverrideArgumentsItem[];
}

export interface DevopsDeploymentDeployArtifactOverrideArgumentsItem {
    deployArtifactId: string;
    name: string;
    value: string;
}

export interface DevopsDeploymentDeployPipelineArtifact {
    items: outputs.DevopsDeploymentDeployPipelineArtifactItem[];
}

export interface DevopsDeploymentDeployPipelineArtifactItem {
    deployArtifactId: string;
    deployPipelineStages: outputs.DevopsDeploymentDeployPipelineArtifactItemDeployPipelineStage[];
    displayName: string;
}

export interface DevopsDeploymentDeployPipelineArtifactItemDeployPipelineStage {
    items: outputs.DevopsDeploymentDeployPipelineArtifactItemDeployPipelineStageItem[];
}

export interface DevopsDeploymentDeployPipelineArtifactItemDeployPipelineStageItem {
    deployStageId: string;
    displayName: string;
}

export interface DevopsDeploymentDeployPipelineEnvironment {
    items: outputs.DevopsDeploymentDeployPipelineEnvironmentItem[];
}

export interface DevopsDeploymentDeployPipelineEnvironmentItem {
    deployEnvironmentId: string;
    deployPipelineStages: outputs.DevopsDeploymentDeployPipelineEnvironmentItemDeployPipelineStage[];
    displayName: string;
}

export interface DevopsDeploymentDeployPipelineEnvironmentItemDeployPipelineStage {
    items: outputs.DevopsDeploymentDeployPipelineEnvironmentItemDeployPipelineStageItem[];
}

export interface DevopsDeploymentDeployPipelineEnvironmentItemDeployPipelineStageItem {
    deployStageId: string;
    displayName: string;
}

export interface DevopsDeploymentDeployStageOverrideArguments {
    items?: outputs.DevopsDeploymentDeployStageOverrideArgumentsItem[];
}

export interface DevopsDeploymentDeployStageOverrideArgumentsItem {
    deployStageId: string;
    name: string;
    value: string;
}

export interface DevopsDeploymentDeploymentArguments {
    items?: outputs.DevopsDeploymentDeploymentArgumentsItem[];
}

export interface DevopsDeploymentDeploymentArgumentsItem {
    name: string;
    value: string;
}

export interface DevopsDeploymentDeploymentExecutionProgress {
    deployStageExecutionProgress: {[key: string]: string};
    timeFinished: string;
    timeStarted: string;
}

export interface DevopsDeploymentTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DevopsProjectNotificationConfig {
    topicId: string;
}

export interface DevopsProjectRepositorySettingApprovalRules {
    items: outputs.DevopsProjectRepositorySettingApprovalRulesItem[];
}

export interface DevopsProjectRepositorySettingApprovalRulesItem {
    destinationBranch: string;
    minApprovalsCount: number;
    name: string;
    reviewers?: outputs.DevopsProjectRepositorySettingApprovalRulesItemReviewer[];
}

export interface DevopsProjectRepositorySettingApprovalRulesItemReviewer {
    principalId: string;
    principalName: string;
    principalState: string;
    principalType: string;
}

export interface DevopsProjectRepositorySettingMergeSettings {
    allowedMergeStrategies: string[];
    defaultMergeStrategy: string;
}

export interface DevopsProjectRepositorySettingTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DevopsProjectTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DevopsRepositoryMirrorRepositoryConfig {
    connectorId: string;
    repositoryUrl: string;
    triggerSchedule?: outputs.DevopsRepositoryMirrorRepositoryConfigTriggerSchedule;
}

export interface DevopsRepositoryMirrorRepositoryConfigTriggerSchedule {
    customSchedule: string;
    scheduleType: string;
}

export interface DevopsRepositoryMirrorTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DevopsRepositoryProtectedBranchManagementTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DevopsRepositoryRefTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DevopsRepositorySettingApprovalRules {
    items: outputs.DevopsRepositorySettingApprovalRulesItem[];
}

export interface DevopsRepositorySettingApprovalRulesItem {
    destinationBranch: string;
    minApprovalsCount: number;
    name: string;
    reviewers?: outputs.DevopsRepositorySettingApprovalRulesItemReviewer[];
}

export interface DevopsRepositorySettingApprovalRulesItemReviewer {
    principalId: string;
    principalName: string;
    principalState: string;
    principalType: string;
}

export interface DevopsRepositorySettingMergeChecks {
    lastBuildSucceeded: string;
}

export interface DevopsRepositorySettingMergeSettings {
    allowedMergeStrategies: string[];
    defaultMergeStrategy: string;
}

export interface DevopsRepositorySettingTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DevopsRepositoryTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DevopsTriggerAction {
    buildPipelineId: string;
    filter?: outputs.DevopsTriggerActionFilter;
    type: string;
}

export interface DevopsTriggerActionFilter {
    events: string[];
    exclude?: outputs.DevopsTriggerActionFilterExclude;
    include?: outputs.DevopsTriggerActionFilterInclude;
    triggerSource: string;
}

export interface DevopsTriggerActionFilterExclude {
    fileFilter?: outputs.DevopsTriggerActionFilterExcludeFileFilter;
}

export interface DevopsTriggerActionFilterExcludeFileFilter {
    filePaths: string[];
}

export interface DevopsTriggerActionFilterInclude {
    baseRef: string;
    fileFilter?: outputs.DevopsTriggerActionFilterIncludeFileFilter;
    headRef: string;
    repositoryName: string;
}

export interface DevopsTriggerActionFilterIncludeFileFilter {
    filePaths: string[];
}

export interface DevopsTriggerTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DisasterRecoveryDrPlanExecutionExecutionOptions {
    arePrechecksEnabled: boolean;
    areWarningsIgnored: boolean;
    planExecutionType: string;
}

export interface DisasterRecoveryDrPlanExecutionGroupExecution {
    displayName: string;
    executionDurationInSec: number;
    groupId: string;
    status: string;
    statusDetails: string;
    stepExecutions: outputs.DisasterRecoveryDrPlanExecutionGroupExecutionStepExecution[];
    timeEnded: string;
    timeStarted: string;
    type: string;
}

export interface DisasterRecoveryDrPlanExecutionGroupExecutionStepExecution {
    displayName: string;
    executionDurationInSec: number;
    groupId: string;
    logLocations: outputs.DisasterRecoveryDrPlanExecutionGroupExecutionStepExecutionLogLocation[];
    status: string;
    statusDetails: string;
    stepId: string;
    timeEnded: string;
    timeStarted: string;
    type: string;
}

export interface DisasterRecoveryDrPlanExecutionGroupExecutionStepExecutionLogLocation {
    bucket: string;
    namespace: string;
    object: string;
}

export interface DisasterRecoveryDrPlanExecutionLogLocation {
    bucket: string;
    namespace: string;
    object: string;
}

export interface DisasterRecoveryDrPlanExecutionTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DisasterRecoveryDrPlanPlanGroup {
    displayName: string;
    id: string;
    isPauseEnabled: boolean;
    steps: outputs.DisasterRecoveryDrPlanPlanGroupStep[];
    type: string;
}

export interface DisasterRecoveryDrPlanPlanGroupStep {
    displayName: string;
    errorMode: string;
    groupId: string;
    id: string;
    isEnabled: boolean;
    memberId: string;
    timeout: number;
    type: string;
    userDefinedSteps: outputs.DisasterRecoveryDrPlanPlanGroupStepUserDefinedStep[];
}

export interface DisasterRecoveryDrPlanPlanGroupStepUserDefinedStep {
    functionId: string;
    functionRegion: string;
    objectStorageScriptLocations: outputs.DisasterRecoveryDrPlanPlanGroupStepUserDefinedStepObjectStorageScriptLocation[];
    requestBody: string;
    runAsUser: string;
    runOnInstanceId: string;
    runOnInstanceRegion: string;
    scriptCommand: string;
    stepType: string;
}

export interface DisasterRecoveryDrPlanPlanGroupStepUserDefinedStepObjectStorageScriptLocation {
    bucket: string;
    namespace: string;
    object: string;
}

export interface DisasterRecoveryDrPlanTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DisasterRecoveryDrProtectionGroupAssociation {
    peerId: string;
    peerRegion: string;
    role: string;
}

export interface DisasterRecoveryDrProtectionGroupLogLocation {
    bucket: string;
    namespace: string;
    object: string;
}

export interface DisasterRecoveryDrProtectionGroupMember {
    autonomousDatabaseStandbyTypeForDrDrills: string;
    backendSetMappings?: outputs.DisasterRecoveryDrProtectionGroupMemberBackendSetMapping[];
    blockVolumeOperations?: outputs.DisasterRecoveryDrProtectionGroupMemberBlockVolumeOperation[];
    bucket: string;
    connectionStringType: string;
    destinationAvailabilityDomain: string;
    destinationCapacityReservationId: string;
    destinationCompartmentId: string;
    destinationDedicatedVmHostId: string;
    destinationLoadBalancerId: string;
    destinationNetworkLoadBalancerId: string;
    exportMappings?: outputs.DisasterRecoveryDrProtectionGroupMemberExportMapping[];
    fileSystemOperations?: outputs.DisasterRecoveryDrProtectionGroupMemberFileSystemOperation[];
    isMovable: boolean;
    isRetainFaultDomain: boolean;
    isStartStopEnabled: boolean;
    memberId: string;
    memberType: string;
    namespace: string;
    passwordVaultSecretId: string;
    vnicMapping?: outputs.DisasterRecoveryDrProtectionGroupMemberVnicMapping[];
    vnicMappings?: outputs.DisasterRecoveryDrProtectionGroupMemberVnicMapping[];
}

export interface DisasterRecoveryDrProtectionGroupMemberBackendSetMapping {
    destinationBackendSetName: string;
    isBackendSetForNonMovable: boolean;
    sourceBackendSetName: string;
}

export interface DisasterRecoveryDrProtectionGroupMemberBlockVolumeOperation {
    attachmentDetails?: outputs.DisasterRecoveryDrProtectionGroupMemberBlockVolumeOperationAttachmentDetails;
    blockVolumeId: string;
    mountDetails?: outputs.DisasterRecoveryDrProtectionGroupMemberBlockVolumeOperationMountDetails;
}

export interface DisasterRecoveryDrProtectionGroupMemberBlockVolumeOperationAttachmentDetails {
    volumeAttachmentReferenceInstanceId: string;
}

export interface DisasterRecoveryDrProtectionGroupMemberBlockVolumeOperationMountDetails {
    mountPoint: string;
}

export interface DisasterRecoveryDrProtectionGroupMemberExportMapping {
    destinationMountTargetId: string;
    exportId: string;
}

export interface DisasterRecoveryDrProtectionGroupMemberFileSystemOperation {
    exportPath: string;
    mountDetails?: outputs.DisasterRecoveryDrProtectionGroupMemberFileSystemOperationMountDetails;
    mountPoint: string;
    mountTargetId: string;
    unmountDetails?: outputs.DisasterRecoveryDrProtectionGroupMemberFileSystemOperationUnmountDetails;
}

export interface DisasterRecoveryDrProtectionGroupMemberFileSystemOperationMountDetails {
    mountTargetId: string;
}

export interface DisasterRecoveryDrProtectionGroupMemberFileSystemOperationUnmountDetails {
    mountTargetId: string;
}

export interface DisasterRecoveryDrProtectionGroupMemberVnicMapping {
    destinationNsgIdLists: string[];
    destinationPrimaryPrivateIpAddress: string;
    destinationPrimaryPrivateIpHostnameLabel: string;
    destinationSubnetId: string;
    sourceVnicId: string;
}

export interface DisasterRecoveryDrProtectionGroupTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DnsActionCreateZoneFromZoneFileExternalDownstream {
    address: string;
    port: number;
    tsigKeyId: string;
}

export interface DnsActionCreateZoneFromZoneFileExternalMaster {
    address: string;
    port: number;
    tsigKeyId: string;
}

export interface DnsActionCreateZoneFromZoneFileNameserver {
    hostname: string;
}

export interface DnsActionCreateZoneFromZoneFileTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DnsActionCreateZoneFromZoneFileZoneTransferServer {
    address: string;
    isTransferDestination: boolean;
    isTransferSource: boolean;
    port: number;
}

export interface DnsRecordTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DnsResolverAttachedView {
    viewId: string;
}

export interface DnsResolverEndpoint {
    compartmentId: string;
    endpointType: string;
    forwardingAddress: string;
    isForwarding: boolean;
    isListening: boolean;
    listeningAddress: string;
    name: string;
    self: string;
    state: string;
    subnetId: string;
    timeCreated: string;
    timeUpdated: string;
}

export interface DnsResolverEndpointTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DnsResolverRule {
    action: string;
    clientAddressConditions: string[];
    destinationAddresses: string[];
    qnameCoverConditions: string[];
    sourceEndpointName: string;
}

export interface DnsResolverTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DnsRrsetItem {
    domain: string;
    isProtected: boolean;
    rdata: string;
    recordHash: string;
    rrsetVersion: string;
    rtype: string;
    ttl: number;
}

export interface DnsRrsetTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DnsSteeringPolicyAnswer {
    isDisabled: boolean;
    name: string;
    pool: string;
    rdata: string;
    rtype: string;
}

export interface DnsSteeringPolicyAttachmentTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DnsSteeringPolicyRule {
    cases?: outputs.DnsSteeringPolicyRuleCase[];
    defaultAnswerDatas?: outputs.DnsSteeringPolicyRuleDefaultAnswerData[];
    defaultCount: number;
    description: string;
    ruleType: string;
}

export interface DnsSteeringPolicyRuleCase {
    answerDatas?: outputs.DnsSteeringPolicyRuleCaseAnswerData[];
    caseCondition: string;
    count: number;
}

export interface DnsSteeringPolicyRuleCaseAnswerData {
    answerCondition: string;
    shouldKeep: boolean;
    value: number;
}

export interface DnsSteeringPolicyRuleDefaultAnswerData {
    answerCondition: string;
    shouldKeep: boolean;
    value: number;
}

export interface DnsSteeringPolicyTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DnsTsigKeyTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DnsViewTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DnsZoneExternalDownstream {
    address: string;
    port: number;
    tsigKeyId: string;
}

export interface DnsZoneExternalMaster {
    address: string;
    port: number;
    tsigKeyId: string;
}

export interface DnsZoneNameserver {
    hostname: string;
}

export interface DnsZoneTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DnsZoneZoneTransferServer {
    address: string;
    isTransferDestination: boolean;
    isTransferSource: boolean;
    port: number;
}

export interface EmailDkimTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface EmailEmailDomainTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface EmailEmailReturnPathTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface EmailSenderTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface EmailSuppressionTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface EventsRuleActions {
    actions: outputs.EventsRuleActionsAction[];
}

export interface EventsRuleActionsAction {
    actionType: string;
    description: string;
    functionId: string;
    id: string;
    isEnabled: boolean;
    lifecycleMessage: string;
    state: string;
    streamId: string;
    topicId: string;
}

export interface EventsRuleTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface FileStorageExportExportOption {
    access: string;
    allowedAuths: string[];
    anonymousGid: string;
    anonymousUid: string;
    identitySquash: string;
    isAnonymousAccessAllowed: boolean;
    requirePrivilegedSourcePort: boolean;
    source: string;
}

export interface FileStorageExportSetTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface FileStorageExportTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface FileStorageFileSystemSourceDetail {
    parentFileSystemId: string;
    sourceSnapshotId: string;
}

export interface FileStorageFileSystemTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface FileStorageFilesystemSnapshotPolicySchedule {
    dayOfMonth: number;
    dayOfWeek?: string;
    hourOfDay: number;
    month?: string;
    period: string;
    retentionDurationInSeconds: string;
    schedulePrefix: string;
    timeScheduleStart: string;
    timeZone: string;
}

export interface FileStorageFilesystemSnapshotPolicyTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface FileStorageMountTargetKerberos {
    backupKeyTabSecretVersion: number;
    currentKeyTabSecretVersion: number;
    isKerberosEnabled: boolean;
    kerberosRealm: string;
    keyTabSecretId?: string;
}

export interface FileStorageMountTargetLdapIdmap {
    cacheLifetimeSeconds: number;
    cacheRefreshIntervalSeconds: number;
    groupSearchBase: string;
    negativeCacheLifetimeSeconds: number;
    outboundConnector1id?: string;
    outboundConnector2id?: string;
    schemaType: string;
    userSearchBase: string;
}

export interface FileStorageMountTargetTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface FileStorageOutboundConnectorEndpoint {
    hostname: string;
    port: string;
}

export interface FileStorageOutboundConnectorTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface FileStorageReplicationTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface FileStorageSnapshotTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface FunctionsApplicationImagePolicyConfig {
    isPolicyEnabled: boolean;
    keyDetails?: outputs.FunctionsApplicationImagePolicyConfigKeyDetail[];
}

export interface FunctionsApplicationImagePolicyConfigKeyDetail {
    kmsKeyId: string;
}

export interface FunctionsApplicationTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface FunctionsApplicationTraceConfig {
    domainId: string;
    isEnabled: boolean;
}

export interface FunctionsFunctionProvisionedConcurrencyConfig {
    count: number;
    strategy: string;
}

export interface FunctionsFunctionSourceDetails {
    pbfListingId: string;
    sourceType: string;
}

export interface FunctionsFunctionTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface FunctionsFunctionTraceConfig {
    isEnabled: boolean;
}

export interface FunctionsInvokeFunctionTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface FusionAppsFusionEnvironmentAdminUserItem {
    emailAddress: string;
    firstName: string;
    lastName: string;
    username: string;
}

export interface FusionAppsFusionEnvironmentAdminUserTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface FusionAppsFusionEnvironmentCreateFusionEnvironmentAdminUserDetails {
    emailAddress: string;
    firstName: string;
    lastName: string;
    password: string;
    username: string;
}

export interface FusionAppsFusionEnvironmentDataMaskingActivityTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface FusionAppsFusionEnvironmentFamilyFamilyMaintenancePolicy {
    concurrentMaintenance: string;
    isMonthlyPatchingEnabled: boolean;
    quarterlyUpgradeBeginTimes: string;
}

export interface FusionAppsFusionEnvironmentFamilyTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface FusionAppsFusionEnvironmentKmsKeyInfo {
    activeKeyId: string;
    activeKeyVersion: string;
    currentKeyLifecycleState: string;
    scheduledKeyId: string;
    scheduledKeyStatus: string;
    scheduledKeyVersion: string;
    scheduledLifecycleState: string;
}

export interface FusionAppsFusionEnvironmentMaintenancePolicy {
    environmentMaintenanceOverride: string;
    monthlyPatchingOverride: string;
    quarterlyUpgradeBeginTimes: outputs.FusionAppsFusionEnvironmentMaintenancePolicyQuarterlyUpgradeBeginTime[];
}

export interface FusionAppsFusionEnvironmentMaintenancePolicyQuarterlyUpgradeBeginTime {
    beginTimesValue: string;
    overrideType: string;
}

export interface FusionAppsFusionEnvironmentRefresh {
    sourceFusionEnvironmentId: string;
    timeFinished: string;
    timeOfRestorationPoint: string;
}

export interface FusionAppsFusionEnvironmentRefreshActivityRefreshIssueDetailsList {
    refreshIssues: string;
}

export interface FusionAppsFusionEnvironmentRefreshActivityTimeouts {
    create?: string;
}

export interface FusionAppsFusionEnvironmentRule {
    action: string;
    conditions: outputs.FusionAppsFusionEnvironmentRuleCondition[];
    description: string;
}

export interface FusionAppsFusionEnvironmentRuleCondition {
    attributeName: string;
    attributeValue: string;
}

export interface FusionAppsFusionEnvironmentServiceAttachmentTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface FusionAppsFusionEnvironmentTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface GenerativeAiDedicatedAiClusterCapacity {
    capacityType: string;
    totalEndpointCapacity: number;
    usedEndpointCapacity: number;
}

export interface GenerativeAiDedicatedAiClusterTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface GenerativeAiEndpointContentModerationConfig {
    isEnabled: boolean;
}

export interface GenerativeAiEndpointTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface GenerativeAiModelFineTuneDetails {
    dedicatedAiClusterId: string;
    trainingConfig?: outputs.GenerativeAiModelFineTuneDetailsTrainingConfig;
    trainingDataset: outputs.GenerativeAiModelFineTuneDetailsTrainingDataset;
}

export interface GenerativeAiModelFineTuneDetailsTrainingConfig {
    earlyStoppingPatience: number;
    earlyStoppingThreshold: number;
    learningRate: number;
    logModelMetricsIntervalInSteps: number;
    loraAlpha: number;
    loraDropout: number;
    loraR: number;
    numOfLastLayers: number;
    totalTrainingEpochs: number;
    trainingBatchSize: number;
    trainingConfigType: string;
}

export interface GenerativeAiModelFineTuneDetailsTrainingDataset {
    bucket: string;
    datasetType: string;
    namespace: string;
    object: string;
}

export interface GenerativeAiModelModelMetric {
    finalAccuracy: number;
    finalLoss: number;
    modelMetricsType: string;
}

export interface GenerativeAiModelTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface GenericArtifactsContentArtifactByPathTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface GetAdmKnowledgeBasesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetAdmKnowledgeBasesKnowledgeBaseCollection {
    items: outputs.GetAdmKnowledgeBasesKnowledgeBaseCollectionItem[];
}

export interface GetAdmKnowledgeBasesKnowledgeBaseCollectionItem {
    compartmentId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
}

export interface GetAdmRemediationRecipeDetectConfiguration {
    exclusions: string[];
    maxPermissibleCvssV2score: number;
    maxPermissibleCvssV3score: number;
    maxPermissibleSeverity: string;
    upgradePolicy: string;
}

export interface GetAdmRemediationRecipeNetworkConfiguration {
    nsgIds: string[];
    subnetId: string;
}

export interface GetAdmRemediationRecipeScmConfiguration {
    branch: string;
    buildFileLocation: string;
    externalScmType: string;
    isAutomergeEnabled: boolean;
    ociCodeRepositoryId: string;
    patSecretId: string;
    repositoryUrl: string;
    scmType: string;
    username: string;
}

export interface GetAdmRemediationRecipeVerifyConfiguration {
    additionalParameters: {[key: string]: string};
    buildServiceType: string;
    jenkinsUrl: string;
    jobName: string;
    patSecretId: string;
    pipelineId: string;
    repositoryUrl: string;
    triggerSecretId: string;
    username: string;
    workflowName: string;
}

export interface GetAdmRemediationRecipesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetAdmRemediationRecipesRemediationRecipeCollection {
    items: outputs.GetAdmRemediationRecipesRemediationRecipeCollectionItem[];
}

export interface GetAdmRemediationRecipesRemediationRecipeCollectionItem {
    compartmentId: string;
    definedTags: {[key: string]: string};
    detectConfigurations: outputs.GetAdmRemediationRecipesRemediationRecipeCollectionItemDetectConfiguration[];
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    isRunTriggeredOnKbChange: boolean;
    knowledgeBaseId: string;
    networkConfigurations: outputs.GetAdmRemediationRecipesRemediationRecipeCollectionItemNetworkConfiguration[];
    scmConfigurations: outputs.GetAdmRemediationRecipesRemediationRecipeCollectionItemScmConfiguration[];
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
    verifyConfigurations: outputs.GetAdmRemediationRecipesRemediationRecipeCollectionItemVerifyConfiguration[];
}

export interface GetAdmRemediationRecipesRemediationRecipeCollectionItemDetectConfiguration {
    exclusions: string[];
    maxPermissibleCvssV2score: number;
    maxPermissibleCvssV3score: number;
    maxPermissibleSeverity: string;
    upgradePolicy: string;
}

export interface GetAdmRemediationRecipesRemediationRecipeCollectionItemNetworkConfiguration {
    nsgIds: string[];
    subnetId: string;
}

export interface GetAdmRemediationRecipesRemediationRecipeCollectionItemScmConfiguration {
    branch: string;
    buildFileLocation: string;
    externalScmType: string;
    isAutomergeEnabled: boolean;
    ociCodeRepositoryId: string;
    patSecretId: string;
    repositoryUrl: string;
    scmType: string;
    username: string;
}

export interface GetAdmRemediationRecipesRemediationRecipeCollectionItemVerifyConfiguration {
    additionalParameters: {[key: string]: string};
    buildServiceType: string;
    jenkinsUrl: string;
    jobName: string;
    patSecretId: string;
    pipelineId: string;
    repositoryUrl: string;
    triggerSecretId: string;
    username: string;
    workflowName: string;
}

export interface GetAdmRemediationRunApplicationDependencyRecommendationsApplicationDependencyRecommendationCollection {
    items: outputs.GetAdmRemediationRunApplicationDependencyRecommendationsApplicationDependencyRecommendationCollectionItem[];
}

export interface GetAdmRemediationRunApplicationDependencyRecommendationsApplicationDependencyRecommendationCollectionItem {
    applicationDependencyNodeIds: string[];
    gav: string;
    nodeId: string;
    purl: string;
    recommendedGav: string;
    recommendedPurl: string;
}

export interface GetAdmRemediationRunApplicationDependencyRecommendationsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetAdmRemediationRunStage {
    summary: string;
    timeCreated: string;
    timeFinished: string;
    timeStarted: string;
    type: string;
}

export interface GetAdmRemediationRunStagePipelineProperty {
    pipelineIdentifier: string;
    pipelineUrl: string;
}

export interface GetAdmRemediationRunStagePullRequestProperty {
    pullRequestIdentifier: string;
    pullRequestUrl: string;
}

export interface GetAdmRemediationRunStagesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetAdmRemediationRunStagesRemediationRunStageCollection {
    items: outputs.GetAdmRemediationRunStagesRemediationRunStageCollectionItem[];
}

export interface GetAdmRemediationRunStagesRemediationRunStageCollectionItem {
    auditId: string;
    nextStageType: string;
    pipelineProperties: outputs.GetAdmRemediationRunStagesRemediationRunStageCollectionItemPipelineProperty[];
    previousStageType: string;
    pullRequestProperties: outputs.GetAdmRemediationRunStagesRemediationRunStageCollectionItemPullRequestProperty[];
    recommendedUpdatesCount: number;
    remediationRunId: string;
    status: string;
    summary: string;
    timeCreated: string;
    timeFinished: string;
    timeStarted: string;
    type: string;
}

export interface GetAdmRemediationRunStagesRemediationRunStageCollectionItemPipelineProperty {
    pipelineIdentifier: string;
    pipelineUrl: string;
}

export interface GetAdmRemediationRunStagesRemediationRunStageCollectionItemPullRequestProperty {
    pullRequestIdentifier: string;
    pullRequestUrl: string;
}

export interface GetAdmRemediationRunsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetAdmRemediationRunsRemediationRunCollection {
    items: outputs.GetAdmRemediationRunsRemediationRunCollectionItem[];
}

export interface GetAdmRemediationRunsRemediationRunCollectionItem {
    compartmentId: string;
    currentStageType: string;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    remediationRecipeId: string;
    remediationRunSource: string;
    stages: outputs.GetAdmRemediationRunsRemediationRunCollectionItemStage[];
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeFinished: string;
    timeStarted: string;
    timeUpdated: string;
}

export interface GetAdmRemediationRunsRemediationRunCollectionItemStage {
    summary: string;
    timeCreated: string;
    timeFinished: string;
    timeStarted: string;
    type: string;
}

export interface GetAdmVulnerabilityAuditApplicationDependency {
    applicationDependencyNodeIds: string[];
    gav: string;
    nodeId: string;
    purl: string;
}

export interface GetAdmVulnerabilityAuditApplicationDependencyVulnerabilitiesApplicationDependencyVulnerabilityCollection {
    items: outputs.GetAdmVulnerabilityAuditApplicationDependencyVulnerabilitiesApplicationDependencyVulnerabilityCollectionItem[];
}

export interface GetAdmVulnerabilityAuditApplicationDependencyVulnerabilitiesApplicationDependencyVulnerabilityCollectionItem {
    applicationDependencyNodeIds: string[];
    gav: string;
    isFoundInKnowledgeBase: boolean;
    nodeId: string;
    purl: string;
    vulnerabilities: outputs.GetAdmVulnerabilityAuditApplicationDependencyVulnerabilitiesApplicationDependencyVulnerabilityCollectionItemVulnerability[];
}

export interface GetAdmVulnerabilityAuditApplicationDependencyVulnerabilitiesApplicationDependencyVulnerabilityCollectionItemVulnerability {
    cvssV2score: number;
    cvssV3score: number;
    id: string;
    isFalsePositive: boolean;
    isIgnored: boolean;
    severity: string;
    source: string;
}

export interface GetAdmVulnerabilityAuditApplicationDependencyVulnerabilitiesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetAdmVulnerabilityAuditApplicationDependencyVulnerabilityItem {
    applicationDependencyNodeIds: string[];
    gav: string;
    isFoundInKnowledgeBase: boolean;
    nodeId: string;
    purl: string;
    vulnerabilities: outputs.GetAdmVulnerabilityAuditApplicationDependencyVulnerabilityItemVulnerability[];
}

export interface GetAdmVulnerabilityAuditApplicationDependencyVulnerabilityItemVulnerability {
    cvssV2score: number;
    cvssV3score: number;
    id: string;
    isFalsePositive: boolean;
    isIgnored: boolean;
    severity: string;
    source: string;
}

export interface GetAdmVulnerabilityAuditConfiguration {
    exclusions: string[];
    maxPermissibleCvssV2score: number;
    maxPermissibleCvssV3score: number;
    maxPermissibleSeverity: string;
}

export interface GetAdmVulnerabilityAuditSource {
    description: string;
    ociResourceId: string;
    type: string;
}

export interface GetAdmVulnerabilityAuditUsageData {
    bucket: string;
    namespace: string;
    object: string;
    sourceType: string;
}

export interface GetAdmVulnerabilityAuditVulnerability {
    cvssV2score: number;
    cvssV3score: number;
    id: string;
    isFalsePositive: boolean;
    isIgnored: boolean;
    severity: string;
    source: string;
}

export interface GetAdmVulnerabilityAuditsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetAdmVulnerabilityAuditsVulnerabilityAuditCollection {
    items: outputs.GetAdmVulnerabilityAuditsVulnerabilityAuditCollectionItem[];
}

export interface GetAdmVulnerabilityAuditsVulnerabilityAuditCollectionItem {
    applicationDependencies: outputs.GetAdmVulnerabilityAuditsVulnerabilityAuditCollectionItemApplicationDependency[];
    buildType: string;
    compartmentId: string;
    configurations: outputs.GetAdmVulnerabilityAuditsVulnerabilityAuditCollectionItemConfiguration[];
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    isSuccess: boolean;
    knowledgeBaseId: string;
    lifecycleDetails: string;
    maxObservedCvssV2score: number;
    maxObservedCvssV2scoreWithIgnored: number;
    maxObservedCvssV3score: number;
    maxObservedCvssV3scoreWithIgnored: number;
    maxObservedSeverity: string;
    maxObservedSeverityWithIgnored: string;
    sources: outputs.GetAdmVulnerabilityAuditsVulnerabilityAuditCollectionItemSource[];
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
    usageDatas: outputs.GetAdmVulnerabilityAuditsVulnerabilityAuditCollectionItemUsageData[];
    vulnerabilities: outputs.GetAdmVulnerabilityAuditsVulnerabilityAuditCollectionItemVulnerability[];
    vulnerableArtifactsCount: number;
    vulnerableArtifactsCountWithIgnored: number;
}

export interface GetAdmVulnerabilityAuditsVulnerabilityAuditCollectionItemApplicationDependency {
    applicationDependencyNodeIds: string[];
    gav: string;
    nodeId: string;
    purl: string;
}

export interface GetAdmVulnerabilityAuditsVulnerabilityAuditCollectionItemConfiguration {
    exclusions: string[];
    maxPermissibleCvssV2score: number;
    maxPermissibleCvssV3score: number;
    maxPermissibleSeverity: string;
}

export interface GetAdmVulnerabilityAuditsVulnerabilityAuditCollectionItemSource {
    description: string;
    ociResourceId: string;
    type: string;
}

export interface GetAdmVulnerabilityAuditsVulnerabilityAuditCollectionItemUsageData {
    bucket: string;
    namespace: string;
    object: string;
    sourceType: string;
}

export interface GetAdmVulnerabilityAuditsVulnerabilityAuditCollectionItemVulnerability {
    cvssV2score: number;
    cvssV3score: number;
    id: string;
    isFalsePositive: boolean;
    isIgnored: boolean;
    severity: string;
    source: string;
}

export interface GetAiAnomalyDetectionAiPrivateEndpointsAiPrivateEndpointCollection {
    items: outputs.GetAiAnomalyDetectionAiPrivateEndpointsAiPrivateEndpointCollectionItem[];
}

export interface GetAiAnomalyDetectionAiPrivateEndpointsAiPrivateEndpointCollectionItem {
    attachedDataAssets: string[];
    compartmentId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    dnsZones: string[];
    freeformTags: {[key: string]: string};
    id: string;
    lifecycleDetails: string;
    state: string;
    subnetId: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
}

export interface GetAiAnomalyDetectionAiPrivateEndpointsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetAiAnomalyDetectionDataAssetDataSourceDetail {
    atpPasswordSecretId: string;
    atpUserName: string;
    bucket: string;
    cwalletFileSecretId: string;
    dataSourceType: string;
    databaseName: string;
    ewalletFileSecretId: string;
    keyStoreFileSecretId: string;
    measurementName: string;
    namespace: string;
    object: string;
    ojdbcFileSecretId: string;
    passwordSecretId: string;
    tableName: string;
    tnsnamesFileSecretId: string;
    truststoreFileSecretId: string;
    url: string;
    userName: string;
    versionSpecificDetails: outputs.GetAiAnomalyDetectionDataAssetDataSourceDetailVersionSpecificDetail[];
    walletPasswordSecretId: string;
}

export interface GetAiAnomalyDetectionDataAssetDataSourceDetailVersionSpecificDetail {
    bucket: string;
    databaseName: string;
    influxVersion: string;
    organizationName: string;
    retentionPolicyName: string;
}

export interface GetAiAnomalyDetectionDataAssetsDataAssetCollection {
    items: outputs.GetAiAnomalyDetectionDataAssetsDataAssetCollectionItem[];
}

export interface GetAiAnomalyDetectionDataAssetsDataAssetCollectionItem {
    compartmentId: string;
    dataSourceDetails: outputs.GetAiAnomalyDetectionDataAssetsDataAssetCollectionItemDataSourceDetail[];
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    privateEndpointId: string;
    projectId: string;
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
}

export interface GetAiAnomalyDetectionDataAssetsDataAssetCollectionItemDataSourceDetail {
    atpPasswordSecretId: string;
    atpUserName: string;
    bucket: string;
    cwalletFileSecretId: string;
    dataSourceType: string;
    databaseName: string;
    ewalletFileSecretId: string;
    keyStoreFileSecretId: string;
    measurementName: string;
    namespace: string;
    object: string;
    ojdbcFileSecretId: string;
    passwordSecretId: string;
    tableName: string;
    tnsnamesFileSecretId: string;
    truststoreFileSecretId: string;
    url: string;
    userName: string;
    versionSpecificDetails: outputs.GetAiAnomalyDetectionDataAssetsDataAssetCollectionItemDataSourceDetailVersionSpecificDetail[];
    walletPasswordSecretId: string;
}

export interface GetAiAnomalyDetectionDataAssetsDataAssetCollectionItemDataSourceDetailVersionSpecificDetail {
    bucket: string;
    databaseName: string;
    influxVersion: string;
    organizationName: string;
    retentionPolicyName: string;
}

export interface GetAiAnomalyDetectionDataAssetsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetAiAnomalyDetectionDetectAnomalyJobInputDetail {
    content: string;
    contentType: string;
    datas: outputs.GetAiAnomalyDetectionDetectAnomalyJobInputDetailData[];
    inputType: string;
    message: string;
    objectLocations: outputs.GetAiAnomalyDetectionDetectAnomalyJobInputDetailObjectLocation[];
    signalNames: string[];
}

export interface GetAiAnomalyDetectionDetectAnomalyJobInputDetailData {
    timestamp: string;
    values: number[];
}

export interface GetAiAnomalyDetectionDetectAnomalyJobInputDetailObjectLocation {
    bucket: string;
    namespace: string;
    object: string;
}

export interface GetAiAnomalyDetectionDetectAnomalyJobOutputDetail {
    bucket: string;
    namespace: string;
    outputType: string;
    prefix: string;
}

export interface GetAiAnomalyDetectionDetectAnomalyJobsDetectAnomalyJobCollection {
    items: outputs.GetAiAnomalyDetectionDetectAnomalyJobsDetectAnomalyJobCollectionItem[];
}

export interface GetAiAnomalyDetectionDetectAnomalyJobsDetectAnomalyJobCollectionItem {
    compartmentId: string;
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    inputDetails: outputs.GetAiAnomalyDetectionDetectAnomalyJobsDetectAnomalyJobCollectionItemInputDetail[];
    lifecycleStateDetails: string;
    modelId: string;
    outputDetails: outputs.GetAiAnomalyDetectionDetectAnomalyJobsDetectAnomalyJobCollectionItemOutputDetail[];
    projectId: string;
    sensitivity: number;
    state: string;
    systemTags: {[key: string]: string};
    timeAccepted: string;
    timeFinished: string;
    timeStarted: string;
}

export interface GetAiAnomalyDetectionDetectAnomalyJobsDetectAnomalyJobCollectionItemInputDetail {
    content: string;
    contentType: string;
    datas: outputs.GetAiAnomalyDetectionDetectAnomalyJobsDetectAnomalyJobCollectionItemInputDetailData[];
    inputType: string;
    message: string;
    objectLocations: outputs.GetAiAnomalyDetectionDetectAnomalyJobsDetectAnomalyJobCollectionItemInputDetailObjectLocation[];
    signalNames: string[];
}

export interface GetAiAnomalyDetectionDetectAnomalyJobsDetectAnomalyJobCollectionItemInputDetailData {
    timestamp: string;
    values: number[];
}

export interface GetAiAnomalyDetectionDetectAnomalyJobsDetectAnomalyJobCollectionItemInputDetailObjectLocation {
    bucket: string;
    namespace: string;
    object: string;
}

export interface GetAiAnomalyDetectionDetectAnomalyJobsDetectAnomalyJobCollectionItemOutputDetail {
    bucket: string;
    namespace: string;
    outputType: string;
    prefix: string;
}

export interface GetAiAnomalyDetectionDetectAnomalyJobsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetAiAnomalyDetectionModelModelTrainingDetail {
    algorithmHint: string;
    dataAssetIds: string[];
    targetFap: number;
    trainingFraction: number;
    windowSize: number;
}

export interface GetAiAnomalyDetectionModelModelTrainingResult {
    fap: number;
    isTrainingGoalAchieved: boolean;
    mae: number;
    maxInferenceSyncRows: number;
    multivariateFap: number;
    rmse: number;
    rowReductionDetails: outputs.GetAiAnomalyDetectionModelModelTrainingResultRowReductionDetail[];
    signalDetails: outputs.GetAiAnomalyDetectionModelModelTrainingResultSignalDetail[];
    warning: string;
    windowSize: number;
}

export interface GetAiAnomalyDetectionModelModelTrainingResultRowReductionDetail {
    isReductionEnabled: boolean;
    reductionMethod: string;
    reductionPercentage: number;
}

export interface GetAiAnomalyDetectionModelModelTrainingResultSignalDetail {
    details: string;
    fap: number;
    isQuantized: boolean;
    max: number;
    min: number;
    mviRatio: number;
    signalName: string;
    status: string;
    std: number;
}

export interface GetAiAnomalyDetectionModelsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetAiAnomalyDetectionModelsModelCollection {
    items: outputs.GetAiAnomalyDetectionModelsModelCollectionItem[];
}

export interface GetAiAnomalyDetectionModelsModelCollectionItem {
    compartmentId: string;
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    lifecycleDetails: string;
    modelTrainingDetails: outputs.GetAiAnomalyDetectionModelsModelCollectionItemModelTrainingDetail[];
    modelTrainingResults: outputs.GetAiAnomalyDetectionModelsModelCollectionItemModelTrainingResult[];
    projectId: string;
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
}

export interface GetAiAnomalyDetectionModelsModelCollectionItemModelTrainingDetail {
    algorithmHint: string;
    dataAssetIds: string[];
    targetFap: number;
    trainingFraction: number;
    windowSize: number;
}

export interface GetAiAnomalyDetectionModelsModelCollectionItemModelTrainingResult {
    fap: number;
    isTrainingGoalAchieved: boolean;
    mae: number;
    maxInferenceSyncRows: number;
    multivariateFap: number;
    rmse: number;
    rowReductionDetails: outputs.GetAiAnomalyDetectionModelsModelCollectionItemModelTrainingResultRowReductionDetail[];
    signalDetails: outputs.GetAiAnomalyDetectionModelsModelCollectionItemModelTrainingResultSignalDetail[];
    warning: string;
    windowSize: number;
}

export interface GetAiAnomalyDetectionModelsModelCollectionItemModelTrainingResultRowReductionDetail {
    isReductionEnabled: boolean;
    reductionMethod: string;
    reductionPercentage: number;
}

export interface GetAiAnomalyDetectionModelsModelCollectionItemModelTrainingResultSignalDetail {
    details: string;
    fap: number;
    isQuantized: boolean;
    max: number;
    min: number;
    mviRatio: number;
    signalName: string;
    status: string;
    std: number;
}

export interface GetAiAnomalyDetectionProjectsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetAiAnomalyDetectionProjectsProjectCollection {
    items: outputs.GetAiAnomalyDetectionProjectsProjectCollectionItem[];
}

export interface GetAiAnomalyDetectionProjectsProjectCollectionItem {
    compartmentId: string;
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
}

export interface GetAiDocumentModelComponentModel {
    modelId: string;
}

export interface GetAiDocumentModelMetric {
    datasetSummaries: outputs.GetAiDocumentModelMetricDatasetSummary[];
    labelMetricsReports: outputs.GetAiDocumentModelMetricLabelMetricsReport[];
    modelType: string;
    overallMetricsReports: outputs.GetAiDocumentModelMetricOverallMetricsReport[];
}

export interface GetAiDocumentModelMetricDatasetSummary {
    testSampleCount: number;
    trainingSampleCount: number;
    validationSampleCount: number;
}

export interface GetAiDocumentModelMetricLabelMetricsReport {
    confidenceEntries: outputs.GetAiDocumentModelMetricLabelMetricsReportConfidenceEntry[];
    documentCount: number;
    label: string;
    meanAveragePrecision: number;
}

export interface GetAiDocumentModelMetricLabelMetricsReportConfidenceEntry {
    accuracy: number;
    f1score: number;
    precision: number;
    recall: number;
    threshold: number;
}

export interface GetAiDocumentModelMetricOverallMetricsReport {
    confidenceEntries: outputs.GetAiDocumentModelMetricOverallMetricsReportConfidenceEntry[];
    documentCount: number;
    meanAveragePrecision: number;
}

export interface GetAiDocumentModelMetricOverallMetricsReportConfidenceEntry {
    accuracy: number;
    f1score: number;
    precision: number;
    recall: number;
    threshold: number;
}

export interface GetAiDocumentModelTestingDataset {
    bucket: string;
    datasetId: string;
    datasetType: string;
    namespace: string;
    object: string;
}

export interface GetAiDocumentModelTrainingDataset {
    bucket: string;
    datasetId: string;
    datasetType: string;
    namespace: string;
    object: string;
}

export interface GetAiDocumentModelValidationDataset {
    bucket: string;
    datasetId: string;
    datasetType: string;
    namespace: string;
    object: string;
}

export interface GetAiDocumentModelsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetAiDocumentModelsModelCollection {
    items: outputs.GetAiDocumentModelsModelCollectionItem[];
}

export interface GetAiDocumentModelsModelCollectionItem {
    compartmentId: string;
    componentModels: outputs.GetAiDocumentModelsModelCollectionItemComponentModel[];
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    isComposedModel: boolean;
    isQuickMode: boolean;
    labels: string[];
    lifecycleDetails: string;
    maxTrainingTimeInHours: number;
    metrics: outputs.GetAiDocumentModelsModelCollectionItemMetric[];
    modelId: string;
    modelType: string;
    modelVersion: string;
    projectId: string;
    state: string;
    systemTags: {[key: string]: string};
    tenancyId: string;
    testingDatasets: outputs.GetAiDocumentModelsModelCollectionItemTestingDataset[];
    timeCreated: string;
    timeUpdated: string;
    trainedTimeInHours: number;
    trainingDatasets: outputs.GetAiDocumentModelsModelCollectionItemTrainingDataset[];
    validationDatasets: outputs.GetAiDocumentModelsModelCollectionItemValidationDataset[];
}

export interface GetAiDocumentModelsModelCollectionItemComponentModel {
    modelId: string;
}

export interface GetAiDocumentModelsModelCollectionItemMetric {
    datasetSummaries: outputs.GetAiDocumentModelsModelCollectionItemMetricDatasetSummary[];
    labelMetricsReports: outputs.GetAiDocumentModelsModelCollectionItemMetricLabelMetricsReport[];
    modelType: string;
    overallMetricsReports: outputs.GetAiDocumentModelsModelCollectionItemMetricOverallMetricsReport[];
}

export interface GetAiDocumentModelsModelCollectionItemMetricDatasetSummary {
    testSampleCount: number;
    trainingSampleCount: number;
    validationSampleCount: number;
}

export interface GetAiDocumentModelsModelCollectionItemMetricLabelMetricsReport {
    confidenceEntries: outputs.GetAiDocumentModelsModelCollectionItemMetricLabelMetricsReportConfidenceEntry[];
    documentCount: number;
    label: string;
    meanAveragePrecision: number;
}

export interface GetAiDocumentModelsModelCollectionItemMetricLabelMetricsReportConfidenceEntry {
    accuracy: number;
    f1score: number;
    precision: number;
    recall: number;
    threshold: number;
}

export interface GetAiDocumentModelsModelCollectionItemMetricOverallMetricsReport {
    confidenceEntries: outputs.GetAiDocumentModelsModelCollectionItemMetricOverallMetricsReportConfidenceEntry[];
    documentCount: number;
    meanAveragePrecision: number;
}

export interface GetAiDocumentModelsModelCollectionItemMetricOverallMetricsReportConfidenceEntry {
    accuracy: number;
    f1score: number;
    precision: number;
    recall: number;
    threshold: number;
}

export interface GetAiDocumentModelsModelCollectionItemTestingDataset {
    bucket: string;
    datasetId: string;
    datasetType: string;
    namespace: string;
    object: string;
}

export interface GetAiDocumentModelsModelCollectionItemTrainingDataset {
    bucket: string;
    datasetId: string;
    datasetType: string;
    namespace: string;
    object: string;
}

export interface GetAiDocumentModelsModelCollectionItemValidationDataset {
    bucket: string;
    datasetId: string;
    datasetType: string;
    namespace: string;
    object: string;
}

export interface GetAiDocumentProcessorJobInputLocation {
    data: string;
    objectLocations: outputs.GetAiDocumentProcessorJobInputLocationObjectLocation[];
    sourceType: string;
}

export interface GetAiDocumentProcessorJobInputLocationObjectLocation {
    bucket: string;
    namespace: string;
    object: string;
}

export interface GetAiDocumentProcessorJobOutputLocation {
    bucket: string;
    namespace: string;
    prefix: string;
}

export interface GetAiDocumentProcessorJobProcessorConfig {
    documentType: string;
    features: outputs.GetAiDocumentProcessorJobProcessorConfigFeature[];
    isZipOutputEnabled: boolean;
    language: string;
    processorType: string;
}

export interface GetAiDocumentProcessorJobProcessorConfigFeature {
    featureType: string;
    generateSearchablePdf: boolean;
    maxResults: number;
    modelId: string;
    tenancyId: string;
}

export interface GetAiDocumentProjectsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetAiDocumentProjectsProjectCollection {
    items: outputs.GetAiDocumentProjectsProjectCollectionItem[];
}

export interface GetAiDocumentProjectsProjectCollectionItem {
    compartmentId: string;
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    lifecycleDetails: string;
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
}

export interface GetAiLanguageEndpointsEndpointCollection {
    items: outputs.GetAiLanguageEndpointsEndpointCollectionItem[];
}

export interface GetAiLanguageEndpointsEndpointCollectionItem {
    compartmentId: string;
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    inferenceUnits: number;
    lifecycleDetails: string;
    modelId: string;
    projectId: string;
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
}

export interface GetAiLanguageEndpointsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetAiLanguageModelEvaluationResult {
    classMetrics: outputs.GetAiLanguageModelEvaluationResultClassMetric[];
    confusionMatrix: string;
    entityMetrics: outputs.GetAiLanguageModelEvaluationResultEntityMetric[];
    labels: string[];
    metrics: outputs.GetAiLanguageModelEvaluationResultMetric[];
    modelType: string;
}

export interface GetAiLanguageModelEvaluationResultClassMetric {
    f1: number;
    label: string;
    precision: number;
    recall: number;
    support: number;
}

export interface GetAiLanguageModelEvaluationResultEntityMetric {
    f1: number;
    label: string;
    precision: number;
    recall: number;
}

export interface GetAiLanguageModelEvaluationResultMetric {
    accuracy: number;
    macroF1: number;
    macroPrecision: number;
    macroRecall: number;
    microF1: number;
    microPrecision: number;
    microRecall: number;
    weightedF1: number;
    weightedPrecision: number;
    weightedRecall: number;
}

export interface GetAiLanguageModelEvaluationResultsEvaluationResultCollection {
    items: outputs.GetAiLanguageModelEvaluationResultsEvaluationResultCollectionItem[];
}

export interface GetAiLanguageModelEvaluationResultsEvaluationResultCollectionItem {
    definedTags: {[key: string]: string};
    freeformTags: {[key: string]: string};
    location: string;
    modelType: string;
    predictedEntities: outputs.GetAiLanguageModelEvaluationResultsEvaluationResultCollectionItemPredictedEntity[];
    predictedLabels: string[];
    record: string;
    trueEntities: outputs.GetAiLanguageModelEvaluationResultsEvaluationResultCollectionItemTrueEntity[];
    trueLabels: string[];
}

export interface GetAiLanguageModelEvaluationResultsEvaluationResultCollectionItemPredictedEntity {
    length: number;
    offset: number;
    type: string;
}

export interface GetAiLanguageModelEvaluationResultsEvaluationResultCollectionItemTrueEntity {
    length: number;
    offset: number;
    type: string;
}

export interface GetAiLanguageModelEvaluationResultsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetAiLanguageModelModelDetail {
    classificationModes: outputs.GetAiLanguageModelModelDetailClassificationMode[];
    languageCode: string;
    modelType: string;
    version: string;
}

export interface GetAiLanguageModelModelDetailClassificationMode {
    classificationMode: string;
    version: string;
}

export interface GetAiLanguageModelTestStrategy {
    strategyType: string;
    testingDatasets: outputs.GetAiLanguageModelTestStrategyTestingDataset[];
    validationDatasets: outputs.GetAiLanguageModelTestStrategyValidationDataset[];
}

export interface GetAiLanguageModelTestStrategyTestingDataset {
    datasetId: string;
    datasetType: string;
    locationDetails: outputs.GetAiLanguageModelTestStrategyTestingDatasetLocationDetail[];
}

export interface GetAiLanguageModelTestStrategyTestingDatasetLocationDetail {
    bucket: string;
    locationType: string;
    namespace: string;
    objectNames: string[];
}

export interface GetAiLanguageModelTestStrategyValidationDataset {
    datasetId: string;
    datasetType: string;
    locationDetails: outputs.GetAiLanguageModelTestStrategyValidationDatasetLocationDetail[];
}

export interface GetAiLanguageModelTestStrategyValidationDatasetLocationDetail {
    bucket: string;
    locationType: string;
    namespace: string;
    objectNames: string[];
}

export interface GetAiLanguageModelTrainingDataset {
    datasetId: string;
    datasetType: string;
    locationDetails: outputs.GetAiLanguageModelTrainingDatasetLocationDetail[];
}

export interface GetAiLanguageModelTrainingDatasetLocationDetail {
    bucket: string;
    locationType: string;
    namespace: string;
    objectNames: string[];
}

export interface GetAiLanguageModelsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetAiLanguageModelsModelCollection {
    items: outputs.GetAiLanguageModelsModelCollectionItem[];
}

export interface GetAiLanguageModelsModelCollectionItem {
    compartmentId: string;
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    evaluationResults: outputs.GetAiLanguageModelsModelCollectionItemEvaluationResult[];
    freeformTags: {[key: string]: string};
    id: string;
    lifecycleDetails: string;
    modelDetails: outputs.GetAiLanguageModelsModelCollectionItemModelDetail[];
    projectId: string;
    state: string;
    systemTags: {[key: string]: string};
    testStrategies: outputs.GetAiLanguageModelsModelCollectionItemTestStrategy[];
    timeCreated: string;
    timeUpdated: string;
    trainingDatasets: outputs.GetAiLanguageModelsModelCollectionItemTrainingDataset[];
    version: string;
}

export interface GetAiLanguageModelsModelCollectionItemEvaluationResult {
    classMetrics: outputs.GetAiLanguageModelsModelCollectionItemEvaluationResultClassMetric[];
    confusionMatrix: string;
    entityMetrics: outputs.GetAiLanguageModelsModelCollectionItemEvaluationResultEntityMetric[];
    labels: string[];
    metrics: outputs.GetAiLanguageModelsModelCollectionItemEvaluationResultMetric[];
    modelType: string;
}

export interface GetAiLanguageModelsModelCollectionItemEvaluationResultClassMetric {
    f1: number;
    label: string;
    precision: number;
    recall: number;
    support: number;
}

export interface GetAiLanguageModelsModelCollectionItemEvaluationResultEntityMetric {
    f1: number;
    label: string;
    precision: number;
    recall: number;
}

export interface GetAiLanguageModelsModelCollectionItemEvaluationResultMetric {
    accuracy: number;
    macroF1: number;
    macroPrecision: number;
    macroRecall: number;
    microF1: number;
    microPrecision: number;
    microRecall: number;
    weightedF1: number;
    weightedPrecision: number;
    weightedRecall: number;
}

export interface GetAiLanguageModelsModelCollectionItemModelDetail {
    classificationModes: outputs.GetAiLanguageModelsModelCollectionItemModelDetailClassificationMode[];
    languageCode: string;
    modelType: string;
    version: string;
}

export interface GetAiLanguageModelsModelCollectionItemModelDetailClassificationMode {
    classificationMode: string;
    version: string;
}

export interface GetAiLanguageModelsModelCollectionItemTestStrategy {
    strategyType: string;
    testingDatasets: outputs.GetAiLanguageModelsModelCollectionItemTestStrategyTestingDataset[];
    validationDatasets: outputs.GetAiLanguageModelsModelCollectionItemTestStrategyValidationDataset[];
}

export interface GetAiLanguageModelsModelCollectionItemTestStrategyTestingDataset {
    datasetId: string;
    datasetType: string;
    locationDetails: outputs.GetAiLanguageModelsModelCollectionItemTestStrategyTestingDatasetLocationDetail[];
}

export interface GetAiLanguageModelsModelCollectionItemTestStrategyTestingDatasetLocationDetail {
    bucket: string;
    locationType: string;
    namespace: string;
    objectNames: string[];
}

export interface GetAiLanguageModelsModelCollectionItemTestStrategyValidationDataset {
    datasetId: string;
    datasetType: string;
    locationDetails: outputs.GetAiLanguageModelsModelCollectionItemTestStrategyValidationDatasetLocationDetail[];
}

export interface GetAiLanguageModelsModelCollectionItemTestStrategyValidationDatasetLocationDetail {
    bucket: string;
    locationType: string;
    namespace: string;
    objectNames: string[];
}

export interface GetAiLanguageModelsModelCollectionItemTrainingDataset {
    datasetId: string;
    datasetType: string;
    locationDetails: outputs.GetAiLanguageModelsModelCollectionItemTrainingDatasetLocationDetail[];
}

export interface GetAiLanguageModelsModelCollectionItemTrainingDatasetLocationDetail {
    bucket: string;
    locationType: string;
    namespace: string;
    objectNames: string[];
}

export interface GetAiLanguageProjectsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetAiLanguageProjectsProjectCollection {
    items: outputs.GetAiLanguageProjectsProjectCollectionItem[];
}

export interface GetAiLanguageProjectsProjectCollectionItem {
    compartmentId: string;
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    lifecycleDetails: string;
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
}

export interface GetAiVisionModelTestingDataset {
    bucket: string;
    datasetId: string;
    datasetType: string;
    namespaceName: string;
    object: string;
}

export interface GetAiVisionModelTrainingDataset {
    bucket: string;
    datasetId: string;
    datasetType: string;
    namespaceName: string;
    object: string;
}

export interface GetAiVisionModelValidationDataset {
    bucket: string;
    datasetId: string;
    datasetType: string;
    namespaceName: string;
    object: string;
}

export interface GetAiVisionModelsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetAiVisionModelsModelCollection {
    items: outputs.GetAiVisionModelsModelCollectionItem[];
}

export interface GetAiVisionModelsModelCollectionItem {
    averagePrecision: number;
    compartmentId: string;
    confidenceThreshold: number;
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    isQuickMode: boolean;
    lifecycleDetails: string;
    maxTrainingDurationInHours: number;
    metrics: string;
    modelType: string;
    modelVersion: string;
    precision: number;
    projectId: string;
    recall: number;
    state: string;
    systemTags: {[key: string]: string};
    testImageCount: number;
    testingDatasets: outputs.GetAiVisionModelsModelCollectionItemTestingDataset[];
    timeCreated: string;
    timeUpdated: string;
    totalImageCount: number;
    trainedDurationInHours: number;
    trainingDatasets: outputs.GetAiVisionModelsModelCollectionItemTrainingDataset[];
    validationDatasets: outputs.GetAiVisionModelsModelCollectionItemValidationDataset[];
}

export interface GetAiVisionModelsModelCollectionItemTestingDataset {
    bucket: string;
    datasetId: string;
    datasetType: string;
    namespaceName: string;
    object: string;
}

export interface GetAiVisionModelsModelCollectionItemTrainingDataset {
    bucket: string;
    datasetId: string;
    datasetType: string;
    namespaceName: string;
    object: string;
}

export interface GetAiVisionModelsModelCollectionItemValidationDataset {
    bucket: string;
    datasetId: string;
    datasetType: string;
    namespaceName: string;
    object: string;
}

export interface GetAiVisionProjectsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetAiVisionProjectsProjectCollection {
    items: outputs.GetAiVisionProjectsProjectCollectionItem[];
}

export interface GetAiVisionProjectsProjectCollectionItem {
    compartmentId: string;
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    lifecycleDetails: string;
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
}

export interface GetAnalyticsAnalyticsInstanceCapacity {
    capacityType: string;
    capacityValue: number;
}

export interface GetAnalyticsAnalyticsInstanceNetworkEndpointDetail {
    networkEndpointType: string;
    networkSecurityGroupIds: string[];
    subnetId: string;
    vcnId: string;
    whitelistedIps: string[];
    whitelistedServices: string[];
    whitelistedVcns: outputs.GetAnalyticsAnalyticsInstanceNetworkEndpointDetailWhitelistedVcn[];
}

export interface GetAnalyticsAnalyticsInstanceNetworkEndpointDetailWhitelistedVcn {
    id: string;
    whitelistedIps: string[];
}

export interface GetAnalyticsAnalyticsInstancePrivateAccessChannelPrivateSourceDnsZone {
    description: string;
    dnsZone: string;
}

export interface GetAnalyticsAnalyticsInstancePrivateAccessChannelPrivateSourceScanHost {
    description: string;
    scanHostname: string;
    scanPort: number;
}

export interface GetAnalyticsAnalyticsInstancesAnalyticsInstance {
    adminUser: string;
    capacities: outputs.GetAnalyticsAnalyticsInstancesAnalyticsInstanceCapacity[];
    compartmentId: string;
    definedTags: {[key: string]: string};
    description: string;
    domainId: string;
    emailNotification: string;
    featureBundle: string;
    featureSet: string;
    freeformTags: {[key: string]: string};
    id: string;
    idcsAccessToken: string;
    kmsKeyId: string;
    licenseType: string;
    name: string;
    networkEndpointDetails: outputs.GetAnalyticsAnalyticsInstancesAnalyticsInstanceNetworkEndpointDetail[];
    serviceUrl: string;
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
}

export interface GetAnalyticsAnalyticsInstancesAnalyticsInstanceCapacity {
    capacityType: string;
    capacityValue: number;
}

export interface GetAnalyticsAnalyticsInstancesAnalyticsInstanceNetworkEndpointDetail {
    networkEndpointType: string;
    networkSecurityGroupIds: string[];
    subnetId: string;
    vcnId: string;
    whitelistedIps: string[];
    whitelistedServices: string[];
    whitelistedVcns: outputs.GetAnalyticsAnalyticsInstancesAnalyticsInstanceNetworkEndpointDetailWhitelistedVcn[];
}

export interface GetAnalyticsAnalyticsInstancesAnalyticsInstanceNetworkEndpointDetailWhitelistedVcn {
    id: string;
    whitelistedIps: string[];
}

export interface GetAnalyticsAnalyticsInstancesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetAnnouncementsServiceAnnouncementSubscriptionFilterGroup {
    filters: outputs.GetAnnouncementsServiceAnnouncementSubscriptionFilterGroupFilter[];
    name: string;
}

export interface GetAnnouncementsServiceAnnouncementSubscriptionFilterGroupFilter {
    type: string;
    value: string;
}

export interface GetAnnouncementsServiceAnnouncementSubscriptionsAnnouncementSubscriptionCollection {
    items: outputs.GetAnnouncementsServiceAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItem[];
}

export interface GetAnnouncementsServiceAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItem {
    compartmentId: string;
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    filterGroups: outputs.GetAnnouncementsServiceAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroup[];
    freeformTags: {[key: string]: string};
    id: string;
    lifecycleDetails: string;
    onsTopicId: string;
    preferredLanguage: string;
    preferredTimeZone: string;
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
}

export interface GetAnnouncementsServiceAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroup {
    filters: outputs.GetAnnouncementsServiceAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupFilter[];
    name: string;
}

export interface GetAnnouncementsServiceAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupFilter {
    type: string;
    value: string;
}

export interface GetAnnouncementsServiceAnnouncementSubscriptionsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetAnnouncementsServiceServicesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetAnnouncementsServiceServicesServicesCollection {
    items: outputs.GetAnnouncementsServiceServicesServicesCollectionItem[];
}

export interface GetAnnouncementsServiceServicesServicesCollectionItem {
    commsManagerName: string;
    excludedRealms: string[];
    id: string;
    platformType: string;
    previousServiceNames: string[];
    serviceName: string;
    shortName: string;
    state: string;
    teamName: string;
    timeCreated: string;
    timeUpdated: string;
    type: string;
}

export interface GetApigatewayApiDeploymentSpecificationLoggingPolicy {
    accessLogs: outputs.GetApigatewayApiDeploymentSpecificationLoggingPolicyAccessLog[];
    executionLogs: outputs.GetApigatewayApiDeploymentSpecificationLoggingPolicyExecutionLog[];
}

export interface GetApigatewayApiDeploymentSpecificationLoggingPolicyAccessLog {
    isEnabled: boolean;
}

export interface GetApigatewayApiDeploymentSpecificationLoggingPolicyExecutionLog {
    isEnabled: boolean;
    logLevel: string;
}

export interface GetApigatewayApiDeploymentSpecificationRequestPolicy {
    authentications: outputs.GetApigatewayApiDeploymentSpecificationRequestPolicyAuthentication[];
    cors: outputs.GetApigatewayApiDeploymentSpecificationRequestPolicyCor[];
    dynamicAuthentications: outputs.GetApigatewayApiDeploymentSpecificationRequestPolicyDynamicAuthentication[];
    mutualTls: outputs.GetApigatewayApiDeploymentSpecificationRequestPolicyMutualTl[];
    rateLimitings: outputs.GetApigatewayApiDeploymentSpecificationRequestPolicyRateLimiting[];
    usagePlans: outputs.GetApigatewayApiDeploymentSpecificationRequestPolicyUsagePlan[];
}

export interface GetApigatewayApiDeploymentSpecificationRequestPolicyAuthentication {
    audiences: string[];
    cacheKeys: string[];
    functionId: string;
    isAnonymousAccessAllowed: boolean;
    issuers: string[];
    maxClockSkewInSeconds: number;
    parameters: {[key: string]: string};
    publicKeys: outputs.GetApigatewayApiDeploymentSpecificationRequestPolicyAuthenticationPublicKey[];
    tokenAuthScheme: string;
    tokenHeader: string;
    tokenQueryParam: string;
    type: string;
    validationFailurePolicies: outputs.GetApigatewayApiDeploymentSpecificationRequestPolicyAuthenticationValidationFailurePolicy[];
    validationPolicies: outputs.GetApigatewayApiDeploymentSpecificationRequestPolicyAuthenticationValidationPolicy[];
    verifyClaims: outputs.GetApigatewayApiDeploymentSpecificationRequestPolicyAuthenticationVerifyClaim[];
}

export interface GetApigatewayApiDeploymentSpecificationRequestPolicyAuthenticationPublicKey {
    isSslVerifyDisabled: boolean;
    keys: outputs.GetApigatewayApiDeploymentSpecificationRequestPolicyAuthenticationPublicKeyKey[];
    maxCacheDurationInHours: number;
    type: string;
    uri: string;
}

export interface GetApigatewayApiDeploymentSpecificationRequestPolicyAuthenticationPublicKeyKey {
    alg: string;
    e: string;
    format: string;
    key: string;
    keyOps: string[];
    kid: string;
    kty: string;
    n: string;
    use: string;
}

export interface GetApigatewayApiDeploymentSpecificationRequestPolicyAuthenticationValidationFailurePolicy {
    clientDetails: outputs.GetApigatewayApiDeploymentSpecificationRequestPolicyAuthenticationValidationFailurePolicyClientDetail[];
    fallbackRedirectPath: string;
    logoutPath: string;
    maxExpiryDurationInHours: number;
    responseCode: string;
    responseHeaderTransformations: outputs.GetApigatewayApiDeploymentSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformation[];
    responseMessage: string;
    responseType: string;
    scopes: string[];
    sourceUriDetails: outputs.GetApigatewayApiDeploymentSpecificationRequestPolicyAuthenticationValidationFailurePolicySourceUriDetail[];
    type: string;
    useCookiesForIntermediateSteps: boolean;
    useCookiesForSession: boolean;
    usePkce: boolean;
}

export interface GetApigatewayApiDeploymentSpecificationRequestPolicyAuthenticationValidationFailurePolicyClientDetail {
    clientId: string;
    clientSecretId: string;
    clientSecretVersionNumber: string;
    type: string;
}

export interface GetApigatewayApiDeploymentSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformation {
    filterHeaders: outputs.GetApigatewayApiDeploymentSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformationFilterHeader[];
    renameHeaders: outputs.GetApigatewayApiDeploymentSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformationRenameHeader[];
    setHeaders: outputs.GetApigatewayApiDeploymentSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformationSetHeader[];
}

export interface GetApigatewayApiDeploymentSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformationFilterHeader {
    items: outputs.GetApigatewayApiDeploymentSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformationFilterHeaderItem[];
    type: string;
}

export interface GetApigatewayApiDeploymentSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformationFilterHeaderItem {
    name: string;
}

export interface GetApigatewayApiDeploymentSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformationRenameHeader {
    items: outputs.GetApigatewayApiDeploymentSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformationRenameHeaderItem[];
}

export interface GetApigatewayApiDeploymentSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformationRenameHeaderItem {
    from: string;
    to: string;
}

export interface GetApigatewayApiDeploymentSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformationSetHeader {
    items: outputs.GetApigatewayApiDeploymentSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformationSetHeaderItem[];
}

export interface GetApigatewayApiDeploymentSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformationSetHeaderItem {
    ifExists: string;
    name: string;
    values: string[];
}

export interface GetApigatewayApiDeploymentSpecificationRequestPolicyAuthenticationValidationFailurePolicySourceUriDetail {
    type: string;
    uri: string;
}

export interface GetApigatewayApiDeploymentSpecificationRequestPolicyAuthenticationValidationPolicy {
    additionalValidationPolicies: outputs.GetApigatewayApiDeploymentSpecificationRequestPolicyAuthenticationValidationPolicyAdditionalValidationPolicy[];
    clientDetails: outputs.GetApigatewayApiDeploymentSpecificationRequestPolicyAuthenticationValidationPolicyClientDetail[];
    isSslVerifyDisabled: boolean;
    keys: outputs.GetApigatewayApiDeploymentSpecificationRequestPolicyAuthenticationValidationPolicyKey[];
    maxCacheDurationInHours: number;
    sourceUriDetails: outputs.GetApigatewayApiDeploymentSpecificationRequestPolicyAuthenticationValidationPolicySourceUriDetail[];
    type: string;
    uri: string;
}

export interface GetApigatewayApiDeploymentSpecificationRequestPolicyAuthenticationValidationPolicyAdditionalValidationPolicy {
    audiences: string[];
    issuers: string[];
    verifyClaims: outputs.GetApigatewayApiDeploymentSpecificationRequestPolicyAuthenticationValidationPolicyAdditionalValidationPolicyVerifyClaim[];
}

export interface GetApigatewayApiDeploymentSpecificationRequestPolicyAuthenticationValidationPolicyAdditionalValidationPolicyVerifyClaim {
    isRequired: boolean;
    key: string;
    values: string[];
}

export interface GetApigatewayApiDeploymentSpecificationRequestPolicyAuthenticationValidationPolicyClientDetail {
    clientId: string;
    clientSecretId: string;
    clientSecretVersionNumber: string;
    type: string;
}

export interface GetApigatewayApiDeploymentSpecificationRequestPolicyAuthenticationValidationPolicyKey {
    alg: string;
    e: string;
    format: string;
    key: string;
    keyOps: string[];
    kid: string;
    kty: string;
    n: string;
    use: string;
}

export interface GetApigatewayApiDeploymentSpecificationRequestPolicyAuthenticationValidationPolicySourceUriDetail {
    type: string;
    uri: string;
}

export interface GetApigatewayApiDeploymentSpecificationRequestPolicyAuthenticationVerifyClaim {
    isRequired: boolean;
    key: string;
    values: string[];
}

export interface GetApigatewayApiDeploymentSpecificationRequestPolicyCor {
    allowedHeaders: string[];
    allowedMethods: string[];
    allowedOrigins: string[];
    exposedHeaders: string[];
    isAllowCredentialsEnabled: boolean;
    maxAgeInSeconds: number;
}

export interface GetApigatewayApiDeploymentSpecificationRequestPolicyDynamicAuthentication {
    authenticationServers: outputs.GetApigatewayApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServer[];
    selectionSources: outputs.GetApigatewayApiDeploymentSpecificationRequestPolicyDynamicAuthenticationSelectionSource[];
}

export interface GetApigatewayApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServer {
    authenticationServerDetails: outputs.GetApigatewayApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetail[];
    keys: outputs.GetApigatewayApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerKey[];
}

export interface GetApigatewayApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetail {
    audiences: string[];
    cacheKeys: string[];
    functionId: string;
    isAnonymousAccessAllowed: boolean;
    issuers: string[];
    maxClockSkewInSeconds: number;
    parameters: {[key: string]: string};
    publicKeys: outputs.GetApigatewayApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailPublicKey[];
    tokenAuthScheme: string;
    tokenHeader: string;
    tokenQueryParam: string;
    type: string;
    validationFailurePolicies: outputs.GetApigatewayApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicy[];
    validationPolicies: outputs.GetApigatewayApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicy[];
    verifyClaims: outputs.GetApigatewayApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailVerifyClaim[];
}

export interface GetApigatewayApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailPublicKey {
    isSslVerifyDisabled: boolean;
    keys: outputs.GetApigatewayApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailPublicKeyKey[];
    maxCacheDurationInHours: number;
    type: string;
    uri: string;
}

export interface GetApigatewayApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailPublicKeyKey {
    alg: string;
    e: string;
    format: string;
    key: string;
    keyOps: string[];
    kid: string;
    kty: string;
    n: string;
    use: string;
}

export interface GetApigatewayApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicy {
    clientDetails: outputs.GetApigatewayApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyClientDetail[];
    fallbackRedirectPath: string;
    logoutPath: string;
    maxExpiryDurationInHours: number;
    responseCode: string;
    responseHeaderTransformations: outputs.GetApigatewayApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformation[];
    responseMessage: string;
    responseType: string;
    scopes: string[];
    sourceUriDetails: outputs.GetApigatewayApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicySourceUriDetail[];
    type: string;
    useCookiesForIntermediateSteps: boolean;
    useCookiesForSession: boolean;
    usePkce: boolean;
}

export interface GetApigatewayApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyClientDetail {
    clientId: string;
    clientSecretId: string;
    clientSecretVersionNumber: string;
    type: string;
}

export interface GetApigatewayApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformation {
    filterHeaders: outputs.GetApigatewayApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationFilterHeader[];
    renameHeaders: outputs.GetApigatewayApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationRenameHeader[];
    setHeaders: outputs.GetApigatewayApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationSetHeader[];
}

export interface GetApigatewayApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationFilterHeader {
    items: outputs.GetApigatewayApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationFilterHeaderItem[];
    type: string;
}

export interface GetApigatewayApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationFilterHeaderItem {
    name: string;
}

export interface GetApigatewayApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationRenameHeader {
    items: outputs.GetApigatewayApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationRenameHeaderItem[];
}

export interface GetApigatewayApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationRenameHeaderItem {
    from: string;
    to: string;
}

export interface GetApigatewayApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationSetHeader {
    items: outputs.GetApigatewayApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationSetHeaderItem[];
}

export interface GetApigatewayApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationSetHeaderItem {
    ifExists: string;
    name: string;
    values: string[];
}

export interface GetApigatewayApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicySourceUriDetail {
    type: string;
    uri: string;
}

export interface GetApigatewayApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicy {
    additionalValidationPolicies: outputs.GetApigatewayApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyAdditionalValidationPolicy[];
    clientDetails: outputs.GetApigatewayApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyClientDetail[];
    isSslVerifyDisabled: boolean;
    keys: outputs.GetApigatewayApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyKey[];
    maxCacheDurationInHours: number;
    sourceUriDetails: outputs.GetApigatewayApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicySourceUriDetail[];
    type: string;
    uri: string;
}

export interface GetApigatewayApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyAdditionalValidationPolicy {
    audiences: string[];
    issuers: string[];
    verifyClaims: outputs.GetApigatewayApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyAdditionalValidationPolicyVerifyClaim[];
}

export interface GetApigatewayApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyAdditionalValidationPolicyVerifyClaim {
    isRequired: boolean;
    key: string;
    values: string[];
}

export interface GetApigatewayApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyClientDetail {
    clientId: string;
    clientSecretId: string;
    clientSecretVersionNumber: string;
    type: string;
}

export interface GetApigatewayApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyKey {
    alg: string;
    e: string;
    format: string;
    key: string;
    keyOps: string[];
    kid: string;
    kty: string;
    n: string;
    use: string;
}

export interface GetApigatewayApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicySourceUriDetail {
    type: string;
    uri: string;
}

export interface GetApigatewayApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailVerifyClaim {
    isRequired: boolean;
    key: string;
    values: string[];
}

export interface GetApigatewayApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerKey {
    expression: string;
    isDefault: boolean;
    name: string;
    type: string;
    values: string[];
}

export interface GetApigatewayApiDeploymentSpecificationRequestPolicyDynamicAuthenticationSelectionSource {
    selector: string;
    type: string;
}

export interface GetApigatewayApiDeploymentSpecificationRequestPolicyMutualTl {
    allowedSans: string[];
    isVerifiedCertificateRequired: boolean;
}

export interface GetApigatewayApiDeploymentSpecificationRequestPolicyRateLimiting {
    rateInRequestsPerSecond: number;
    rateKey: string;
}

export interface GetApigatewayApiDeploymentSpecificationRequestPolicyUsagePlan {
    tokenLocations: string[];
}

export interface GetApigatewayApiDeploymentSpecificationRoute {
    backends: outputs.GetApigatewayApiDeploymentSpecificationRouteBackend[];
    loggingPolicies: outputs.GetApigatewayApiDeploymentSpecificationRouteLoggingPolicy[];
    methods: string[];
    path: string;
    requestPolicies: outputs.GetApigatewayApiDeploymentSpecificationRouteRequestPolicy[];
    responsePolicies: outputs.GetApigatewayApiDeploymentSpecificationRouteResponsePolicy[];
}

export interface GetApigatewayApiDeploymentSpecificationRouteBackend {
    allowedPostLogoutUris: string[];
    body: string;
    connectTimeoutInSeconds: number;
    functionId: string;
    headers: outputs.GetApigatewayApiDeploymentSpecificationRouteBackendHeader[];
    isSslVerifyDisabled: boolean;
    postLogoutState: string;
    readTimeoutInSeconds: number;
    routingBackends: outputs.GetApigatewayApiDeploymentSpecificationRouteBackendRoutingBackend[];
    selectionSources: outputs.GetApigatewayApiDeploymentSpecificationRouteBackendSelectionSource[];
    sendTimeoutInSeconds: number;
    status: number;
    type: string;
    url: string;
}

export interface GetApigatewayApiDeploymentSpecificationRouteBackendHeader {
    name: string;
    value: string;
}

export interface GetApigatewayApiDeploymentSpecificationRouteBackendRoutingBackend {
    backends: outputs.GetApigatewayApiDeploymentSpecificationRouteBackendRoutingBackendBackend[];
    keys: outputs.GetApigatewayApiDeploymentSpecificationRouteBackendRoutingBackendKey[];
}

export interface GetApigatewayApiDeploymentSpecificationRouteBackendRoutingBackendBackend {
    body: string;
    connectTimeoutInSeconds: number;
    functionId: string;
    headers: outputs.GetApigatewayApiDeploymentSpecificationRouteBackendRoutingBackendBackendHeader[];
    isSslVerifyDisabled: boolean;
    readTimeoutInSeconds: number;
    sendTimeoutInSeconds: number;
    status: number;
    type: string;
    url: string;
}

export interface GetApigatewayApiDeploymentSpecificationRouteBackendRoutingBackendBackendHeader {
    name: string;
    value: string;
}

export interface GetApigatewayApiDeploymentSpecificationRouteBackendRoutingBackendKey {
    expression: string;
    isDefault: boolean;
    name: string;
    type: string;
    values: string[];
}

export interface GetApigatewayApiDeploymentSpecificationRouteBackendSelectionSource {
    selector: string;
    type: string;
}

export interface GetApigatewayApiDeploymentSpecificationRouteLoggingPolicy {
    accessLogs: outputs.GetApigatewayApiDeploymentSpecificationRouteLoggingPolicyAccessLog[];
    executionLogs: outputs.GetApigatewayApiDeploymentSpecificationRouteLoggingPolicyExecutionLog[];
}

export interface GetApigatewayApiDeploymentSpecificationRouteLoggingPolicyAccessLog {
    isEnabled: boolean;
}

export interface GetApigatewayApiDeploymentSpecificationRouteLoggingPolicyExecutionLog {
    isEnabled: boolean;
    logLevel: string;
}

export interface GetApigatewayApiDeploymentSpecificationRouteRequestPolicy {
    authorizations: outputs.GetApigatewayApiDeploymentSpecificationRouteRequestPolicyAuthorization[];
    bodyValidations: outputs.GetApigatewayApiDeploymentSpecificationRouteRequestPolicyBodyValidation[];
    cors: outputs.GetApigatewayApiDeploymentSpecificationRouteRequestPolicyCor[];
    headerTransformations: outputs.GetApigatewayApiDeploymentSpecificationRouteRequestPolicyHeaderTransformation[];
    headerValidations: outputs.GetApigatewayApiDeploymentSpecificationRouteRequestPolicyHeaderValidation[];
    queryParameterTransformations: outputs.GetApigatewayApiDeploymentSpecificationRouteRequestPolicyQueryParameterTransformation[];
    queryParameterValidations: outputs.GetApigatewayApiDeploymentSpecificationRouteRequestPolicyQueryParameterValidation[];
    responseCacheLookups: outputs.GetApigatewayApiDeploymentSpecificationRouteRequestPolicyResponseCacheLookup[];
}

export interface GetApigatewayApiDeploymentSpecificationRouteRequestPolicyAuthorization {
    allowedScopes: string[];
    type: string;
}

export interface GetApigatewayApiDeploymentSpecificationRouteRequestPolicyBodyValidation {
    contents: outputs.GetApigatewayApiDeploymentSpecificationRouteRequestPolicyBodyValidationContent[];
    required: boolean;
    validationMode: string;
}

export interface GetApigatewayApiDeploymentSpecificationRouteRequestPolicyBodyValidationContent {
    mediaType: string;
    validationType: string;
}

export interface GetApigatewayApiDeploymentSpecificationRouteRequestPolicyCor {
    allowedHeaders: string[];
    allowedMethods: string[];
    allowedOrigins: string[];
    exposedHeaders: string[];
    isAllowCredentialsEnabled: boolean;
    maxAgeInSeconds: number;
}

export interface GetApigatewayApiDeploymentSpecificationRouteRequestPolicyHeaderTransformation {
    filterHeaders: outputs.GetApigatewayApiDeploymentSpecificationRouteRequestPolicyHeaderTransformationFilterHeader[];
    renameHeaders: outputs.GetApigatewayApiDeploymentSpecificationRouteRequestPolicyHeaderTransformationRenameHeader[];
    setHeaders: outputs.GetApigatewayApiDeploymentSpecificationRouteRequestPolicyHeaderTransformationSetHeader[];
}

export interface GetApigatewayApiDeploymentSpecificationRouteRequestPolicyHeaderTransformationFilterHeader {
    items: outputs.GetApigatewayApiDeploymentSpecificationRouteRequestPolicyHeaderTransformationFilterHeaderItem[];
    type: string;
}

export interface GetApigatewayApiDeploymentSpecificationRouteRequestPolicyHeaderTransformationFilterHeaderItem {
    name: string;
}

export interface GetApigatewayApiDeploymentSpecificationRouteRequestPolicyHeaderTransformationRenameHeader {
    items: outputs.GetApigatewayApiDeploymentSpecificationRouteRequestPolicyHeaderTransformationRenameHeaderItem[];
}

export interface GetApigatewayApiDeploymentSpecificationRouteRequestPolicyHeaderTransformationRenameHeaderItem {
    from: string;
    to: string;
}

export interface GetApigatewayApiDeploymentSpecificationRouteRequestPolicyHeaderTransformationSetHeader {
    items: outputs.GetApigatewayApiDeploymentSpecificationRouteRequestPolicyHeaderTransformationSetHeaderItem[];
}

export interface GetApigatewayApiDeploymentSpecificationRouteRequestPolicyHeaderTransformationSetHeaderItem {
    ifExists: string;
    name: string;
    values: string[];
}

export interface GetApigatewayApiDeploymentSpecificationRouteRequestPolicyHeaderValidation {
    headers: outputs.GetApigatewayApiDeploymentSpecificationRouteRequestPolicyHeaderValidationHeader[];
    validationMode: string;
}

export interface GetApigatewayApiDeploymentSpecificationRouteRequestPolicyHeaderValidationHeader {
    name: string;
    required: boolean;
}

export interface GetApigatewayApiDeploymentSpecificationRouteRequestPolicyQueryParameterTransformation {
    filterQueryParameters: outputs.GetApigatewayApiDeploymentSpecificationRouteRequestPolicyQueryParameterTransformationFilterQueryParameter[];
    renameQueryParameters: outputs.GetApigatewayApiDeploymentSpecificationRouteRequestPolicyQueryParameterTransformationRenameQueryParameter[];
    setQueryParameters: outputs.GetApigatewayApiDeploymentSpecificationRouteRequestPolicyQueryParameterTransformationSetQueryParameter[];
}

export interface GetApigatewayApiDeploymentSpecificationRouteRequestPolicyQueryParameterTransformationFilterQueryParameter {
    items: outputs.GetApigatewayApiDeploymentSpecificationRouteRequestPolicyQueryParameterTransformationFilterQueryParameterItem[];
    type: string;
}

export interface GetApigatewayApiDeploymentSpecificationRouteRequestPolicyQueryParameterTransformationFilterQueryParameterItem {
    name: string;
}

export interface GetApigatewayApiDeploymentSpecificationRouteRequestPolicyQueryParameterTransformationRenameQueryParameter {
    items: outputs.GetApigatewayApiDeploymentSpecificationRouteRequestPolicyQueryParameterTransformationRenameQueryParameterItem[];
}

export interface GetApigatewayApiDeploymentSpecificationRouteRequestPolicyQueryParameterTransformationRenameQueryParameterItem {
    from: string;
    to: string;
}

export interface GetApigatewayApiDeploymentSpecificationRouteRequestPolicyQueryParameterTransformationSetQueryParameter {
    items: outputs.GetApigatewayApiDeploymentSpecificationRouteRequestPolicyQueryParameterTransformationSetQueryParameterItem[];
}

export interface GetApigatewayApiDeploymentSpecificationRouteRequestPolicyQueryParameterTransformationSetQueryParameterItem {
    ifExists: string;
    name: string;
    values: string[];
}

export interface GetApigatewayApiDeploymentSpecificationRouteRequestPolicyQueryParameterValidation {
    parameters: outputs.GetApigatewayApiDeploymentSpecificationRouteRequestPolicyQueryParameterValidationParameter[];
    validationMode: string;
}

export interface GetApigatewayApiDeploymentSpecificationRouteRequestPolicyQueryParameterValidationParameter {
    name: string;
    required: boolean;
}

export interface GetApigatewayApiDeploymentSpecificationRouteRequestPolicyResponseCacheLookup {
    cacheKeyAdditions: string[];
    isEnabled: boolean;
    isPrivateCachingEnabled: boolean;
    type: string;
}

export interface GetApigatewayApiDeploymentSpecificationRouteResponsePolicy {
    headerTransformations: outputs.GetApigatewayApiDeploymentSpecificationRouteResponsePolicyHeaderTransformation[];
    responseCacheStores: outputs.GetApigatewayApiDeploymentSpecificationRouteResponsePolicyResponseCacheStore[];
}

export interface GetApigatewayApiDeploymentSpecificationRouteResponsePolicyHeaderTransformation {
    filterHeaders: outputs.GetApigatewayApiDeploymentSpecificationRouteResponsePolicyHeaderTransformationFilterHeader[];
    renameHeaders: outputs.GetApigatewayApiDeploymentSpecificationRouteResponsePolicyHeaderTransformationRenameHeader[];
    setHeaders: outputs.GetApigatewayApiDeploymentSpecificationRouteResponsePolicyHeaderTransformationSetHeader[];
}

export interface GetApigatewayApiDeploymentSpecificationRouteResponsePolicyHeaderTransformationFilterHeader {
    items: outputs.GetApigatewayApiDeploymentSpecificationRouteResponsePolicyHeaderTransformationFilterHeaderItem[];
    type: string;
}

export interface GetApigatewayApiDeploymentSpecificationRouteResponsePolicyHeaderTransformationFilterHeaderItem {
    name: string;
}

export interface GetApigatewayApiDeploymentSpecificationRouteResponsePolicyHeaderTransformationRenameHeader {
    items: outputs.GetApigatewayApiDeploymentSpecificationRouteResponsePolicyHeaderTransformationRenameHeaderItem[];
}

export interface GetApigatewayApiDeploymentSpecificationRouteResponsePolicyHeaderTransformationRenameHeaderItem {
    from: string;
    to: string;
}

export interface GetApigatewayApiDeploymentSpecificationRouteResponsePolicyHeaderTransformationSetHeader {
    items: outputs.GetApigatewayApiDeploymentSpecificationRouteResponsePolicyHeaderTransformationSetHeaderItem[];
}

export interface GetApigatewayApiDeploymentSpecificationRouteResponsePolicyHeaderTransformationSetHeaderItem {
    ifExists: string;
    name: string;
    values: string[];
}

export interface GetApigatewayApiDeploymentSpecificationRouteResponsePolicyResponseCacheStore {
    timeToLiveInSeconds: number;
    type: string;
}

export interface GetApigatewayApiValidationResult {
    name: string;
    result: string;
}

export interface GetApigatewayApiValidationValidation {
    details: outputs.GetApigatewayApiValidationValidationDetail[];
    name: string;
    result: string;
}

export interface GetApigatewayApiValidationValidationDetail {
    msg: string;
    severity: string;
    srcs: outputs.GetApigatewayApiValidationValidationDetailSrc[];
}

export interface GetApigatewayApiValidationValidationDetailSrc {
    items: number[];
}

export interface GetApigatewayApisApiCollection {
    items: outputs.GetApigatewayApisApiCollectionItem[];
}

export interface GetApigatewayApisApiCollectionItem {
    compartmentId: string;
    content: string;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    lifecycleDetails: string;
    specificationType: string;
    state: string;
    timeCreated: string;
    timeUpdated: string;
    validationResults: outputs.GetApigatewayApisApiCollectionItemValidationResult[];
}

export interface GetApigatewayApisApiCollectionItemValidationResult {
    name: string;
    result: string;
}

export interface GetApigatewayApisFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetApigatewayCertificatesCertificateCollection {
    items: outputs.GetApigatewayCertificatesCertificateCollectionItem[];
}

export interface GetApigatewayCertificatesCertificateCollectionItem {
    certificate: string;
    compartmentId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    intermediateCertificates: string;
    lifecycleDetails: string;
    privateKey: string;
    state: string;
    subjectNames: string[];
    timeCreated: string;
    timeNotValidAfter: string;
    timeUpdated: string;
}

export interface GetApigatewayCertificatesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetApigatewayDeploymentSpecification {
    loggingPolicies: outputs.GetApigatewayDeploymentSpecificationLoggingPolicy[];
    requestPolicies: outputs.GetApigatewayDeploymentSpecificationRequestPolicy[];
    routes: outputs.GetApigatewayDeploymentSpecificationRoute[];
}

export interface GetApigatewayDeploymentSpecificationLoggingPolicy {
    accessLogs: outputs.GetApigatewayDeploymentSpecificationLoggingPolicyAccessLog[];
    executionLogs: outputs.GetApigatewayDeploymentSpecificationLoggingPolicyExecutionLog[];
}

export interface GetApigatewayDeploymentSpecificationLoggingPolicyAccessLog {
    isEnabled: boolean;
}

export interface GetApigatewayDeploymentSpecificationLoggingPolicyExecutionLog {
    isEnabled: boolean;
    logLevel: string;
}

export interface GetApigatewayDeploymentSpecificationRequestPolicy {
    authentications: outputs.GetApigatewayDeploymentSpecificationRequestPolicyAuthentication[];
    cors: outputs.GetApigatewayDeploymentSpecificationRequestPolicyCor[];
    dynamicAuthentications: outputs.GetApigatewayDeploymentSpecificationRequestPolicyDynamicAuthentication[];
    mutualTls: outputs.GetApigatewayDeploymentSpecificationRequestPolicyMutualTl[];
    rateLimitings: outputs.GetApigatewayDeploymentSpecificationRequestPolicyRateLimiting[];
    usagePlans: outputs.GetApigatewayDeploymentSpecificationRequestPolicyUsagePlan[];
}

export interface GetApigatewayDeploymentSpecificationRequestPolicyAuthentication {
    audiences: string[];
    cacheKeys: string[];
    functionId: string;
    isAnonymousAccessAllowed: boolean;
    issuers: string[];
    maxClockSkewInSeconds: number;
    parameters: {[key: string]: string};
    publicKeys: outputs.GetApigatewayDeploymentSpecificationRequestPolicyAuthenticationPublicKey[];
    tokenAuthScheme: string;
    tokenHeader: string;
    tokenQueryParam: string;
    type: string;
    validationFailurePolicies: outputs.GetApigatewayDeploymentSpecificationRequestPolicyAuthenticationValidationFailurePolicy[];
    validationPolicies: outputs.GetApigatewayDeploymentSpecificationRequestPolicyAuthenticationValidationPolicy[];
    verifyClaims: outputs.GetApigatewayDeploymentSpecificationRequestPolicyAuthenticationVerifyClaim[];
}

export interface GetApigatewayDeploymentSpecificationRequestPolicyAuthenticationPublicKey {
    isSslVerifyDisabled: boolean;
    keys: outputs.GetApigatewayDeploymentSpecificationRequestPolicyAuthenticationPublicKeyKey[];
    maxCacheDurationInHours: number;
    type: string;
    uri: string;
}

export interface GetApigatewayDeploymentSpecificationRequestPolicyAuthenticationPublicKeyKey {
    alg: string;
    e: string;
    format: string;
    key: string;
    keyOps: string[];
    kid: string;
    kty: string;
    n: string;
    use: string;
}

export interface GetApigatewayDeploymentSpecificationRequestPolicyAuthenticationValidationFailurePolicy {
    clientDetails: outputs.GetApigatewayDeploymentSpecificationRequestPolicyAuthenticationValidationFailurePolicyClientDetail[];
    fallbackRedirectPath: string;
    logoutPath: string;
    maxExpiryDurationInHours: number;
    responseCode: string;
    responseHeaderTransformations: outputs.GetApigatewayDeploymentSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformation[];
    responseMessage: string;
    responseType: string;
    scopes: string[];
    sourceUriDetails: outputs.GetApigatewayDeploymentSpecificationRequestPolicyAuthenticationValidationFailurePolicySourceUriDetail[];
    type: string;
    useCookiesForIntermediateSteps: boolean;
    useCookiesForSession: boolean;
    usePkce: boolean;
}

export interface GetApigatewayDeploymentSpecificationRequestPolicyAuthenticationValidationFailurePolicyClientDetail {
    clientId: string;
    clientSecretId: string;
    clientSecretVersionNumber: string;
    type: string;
}

export interface GetApigatewayDeploymentSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformation {
    filterHeaders: outputs.GetApigatewayDeploymentSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformationFilterHeader[];
    renameHeaders: outputs.GetApigatewayDeploymentSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformationRenameHeader[];
    setHeaders: outputs.GetApigatewayDeploymentSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformationSetHeader[];
}

export interface GetApigatewayDeploymentSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformationFilterHeader {
    items: outputs.GetApigatewayDeploymentSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformationFilterHeaderItem[];
    type: string;
}

export interface GetApigatewayDeploymentSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformationFilterHeaderItem {
    name: string;
}

export interface GetApigatewayDeploymentSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformationRenameHeader {
    items: outputs.GetApigatewayDeploymentSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformationRenameHeaderItem[];
}

export interface GetApigatewayDeploymentSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformationRenameHeaderItem {
    from: string;
    to: string;
}

export interface GetApigatewayDeploymentSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformationSetHeader {
    items: outputs.GetApigatewayDeploymentSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformationSetHeaderItem[];
}

export interface GetApigatewayDeploymentSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformationSetHeaderItem {
    ifExists: string;
    name: string;
    values: string[];
}

export interface GetApigatewayDeploymentSpecificationRequestPolicyAuthenticationValidationFailurePolicySourceUriDetail {
    type: string;
    uri: string;
}

export interface GetApigatewayDeploymentSpecificationRequestPolicyAuthenticationValidationPolicy {
    additionalValidationPolicies: outputs.GetApigatewayDeploymentSpecificationRequestPolicyAuthenticationValidationPolicyAdditionalValidationPolicy[];
    clientDetails: outputs.GetApigatewayDeploymentSpecificationRequestPolicyAuthenticationValidationPolicyClientDetail[];
    isSslVerifyDisabled: boolean;
    keys: outputs.GetApigatewayDeploymentSpecificationRequestPolicyAuthenticationValidationPolicyKey[];
    maxCacheDurationInHours: number;
    sourceUriDetails: outputs.GetApigatewayDeploymentSpecificationRequestPolicyAuthenticationValidationPolicySourceUriDetail[];
    type: string;
    uri: string;
}

export interface GetApigatewayDeploymentSpecificationRequestPolicyAuthenticationValidationPolicyAdditionalValidationPolicy {
    audiences: string[];
    issuers: string[];
    verifyClaims: outputs.GetApigatewayDeploymentSpecificationRequestPolicyAuthenticationValidationPolicyAdditionalValidationPolicyVerifyClaim[];
}

export interface GetApigatewayDeploymentSpecificationRequestPolicyAuthenticationValidationPolicyAdditionalValidationPolicyVerifyClaim {
    isRequired: boolean;
    key: string;
    values: string[];
}

export interface GetApigatewayDeploymentSpecificationRequestPolicyAuthenticationValidationPolicyClientDetail {
    clientId: string;
    clientSecretId: string;
    clientSecretVersionNumber: string;
    type: string;
}

export interface GetApigatewayDeploymentSpecificationRequestPolicyAuthenticationValidationPolicyKey {
    alg: string;
    e: string;
    format: string;
    key: string;
    keyOps: string[];
    kid: string;
    kty: string;
    n: string;
    use: string;
}

export interface GetApigatewayDeploymentSpecificationRequestPolicyAuthenticationValidationPolicySourceUriDetail {
    type: string;
    uri: string;
}

export interface GetApigatewayDeploymentSpecificationRequestPolicyAuthenticationVerifyClaim {
    isRequired: boolean;
    key: string;
    values: string[];
}

export interface GetApigatewayDeploymentSpecificationRequestPolicyCor {
    allowedHeaders: string[];
    allowedMethods: string[];
    allowedOrigins: string[];
    exposedHeaders: string[];
    isAllowCredentialsEnabled: boolean;
    maxAgeInSeconds: number;
}

export interface GetApigatewayDeploymentSpecificationRequestPolicyDynamicAuthentication {
    authenticationServers: outputs.GetApigatewayDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServer[];
    selectionSources: outputs.GetApigatewayDeploymentSpecificationRequestPolicyDynamicAuthenticationSelectionSource[];
}

export interface GetApigatewayDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServer {
    authenticationServerDetails: outputs.GetApigatewayDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetail[];
    keys: outputs.GetApigatewayDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerKey[];
}

export interface GetApigatewayDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetail {
    audiences: string[];
    cacheKeys: string[];
    functionId: string;
    isAnonymousAccessAllowed: boolean;
    issuers: string[];
    maxClockSkewInSeconds: number;
    parameters: {[key: string]: string};
    publicKeys: outputs.GetApigatewayDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailPublicKey[];
    tokenAuthScheme: string;
    tokenHeader: string;
    tokenQueryParam: string;
    type: string;
    validationFailurePolicies: outputs.GetApigatewayDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicy[];
    validationPolicies: outputs.GetApigatewayDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicy[];
    verifyClaims: outputs.GetApigatewayDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailVerifyClaim[];
}

export interface GetApigatewayDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailPublicKey {
    isSslVerifyDisabled: boolean;
    keys: outputs.GetApigatewayDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailPublicKeyKey[];
    maxCacheDurationInHours: number;
    type: string;
    uri: string;
}

export interface GetApigatewayDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailPublicKeyKey {
    alg: string;
    e: string;
    format: string;
    key: string;
    keyOps: string[];
    kid: string;
    kty: string;
    n: string;
    use: string;
}

export interface GetApigatewayDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicy {
    clientDetails: outputs.GetApigatewayDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyClientDetail[];
    fallbackRedirectPath: string;
    logoutPath: string;
    maxExpiryDurationInHours: number;
    responseCode: string;
    responseHeaderTransformations: outputs.GetApigatewayDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformation[];
    responseMessage: string;
    responseType: string;
    scopes: string[];
    sourceUriDetails: outputs.GetApigatewayDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicySourceUriDetail[];
    type: string;
    useCookiesForIntermediateSteps: boolean;
    useCookiesForSession: boolean;
    usePkce: boolean;
}

export interface GetApigatewayDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyClientDetail {
    clientId: string;
    clientSecretId: string;
    clientSecretVersionNumber: string;
    type: string;
}

export interface GetApigatewayDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformation {
    filterHeaders: outputs.GetApigatewayDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationFilterHeader[];
    renameHeaders: outputs.GetApigatewayDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationRenameHeader[];
    setHeaders: outputs.GetApigatewayDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationSetHeader[];
}

export interface GetApigatewayDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationFilterHeader {
    items: outputs.GetApigatewayDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationFilterHeaderItem[];
    type: string;
}

export interface GetApigatewayDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationFilterHeaderItem {
    name: string;
}

export interface GetApigatewayDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationRenameHeader {
    items: outputs.GetApigatewayDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationRenameHeaderItem[];
}

export interface GetApigatewayDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationRenameHeaderItem {
    from: string;
    to: string;
}

export interface GetApigatewayDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationSetHeader {
    items: outputs.GetApigatewayDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationSetHeaderItem[];
}

export interface GetApigatewayDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationSetHeaderItem {
    ifExists: string;
    name: string;
    values: string[];
}

export interface GetApigatewayDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicySourceUriDetail {
    type: string;
    uri: string;
}

export interface GetApigatewayDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicy {
    additionalValidationPolicies: outputs.GetApigatewayDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyAdditionalValidationPolicy[];
    clientDetails: outputs.GetApigatewayDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyClientDetail[];
    isSslVerifyDisabled: boolean;
    keys: outputs.GetApigatewayDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyKey[];
    maxCacheDurationInHours: number;
    sourceUriDetails: outputs.GetApigatewayDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicySourceUriDetail[];
    type: string;
    uri: string;
}

export interface GetApigatewayDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyAdditionalValidationPolicy {
    audiences: string[];
    issuers: string[];
    verifyClaims: outputs.GetApigatewayDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyAdditionalValidationPolicyVerifyClaim[];
}

export interface GetApigatewayDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyAdditionalValidationPolicyVerifyClaim {
    isRequired: boolean;
    key: string;
    values: string[];
}

export interface GetApigatewayDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyClientDetail {
    clientId: string;
    clientSecretId: string;
    clientSecretVersionNumber: string;
    type: string;
}

export interface GetApigatewayDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyKey {
    alg: string;
    e: string;
    format: string;
    key: string;
    keyOps: string[];
    kid: string;
    kty: string;
    n: string;
    use: string;
}

export interface GetApigatewayDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicySourceUriDetail {
    type: string;
    uri: string;
}

export interface GetApigatewayDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailVerifyClaim {
    isRequired: boolean;
    key: string;
    values: string[];
}

export interface GetApigatewayDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerKey {
    expression: string;
    isDefault: boolean;
    name: string;
    type: string;
    values: string[];
}

export interface GetApigatewayDeploymentSpecificationRequestPolicyDynamicAuthenticationSelectionSource {
    selector: string;
    type: string;
}

export interface GetApigatewayDeploymentSpecificationRequestPolicyMutualTl {
    allowedSans: string[];
    isVerifiedCertificateRequired: boolean;
}

export interface GetApigatewayDeploymentSpecificationRequestPolicyRateLimiting {
    rateInRequestsPerSecond: number;
    rateKey: string;
}

export interface GetApigatewayDeploymentSpecificationRequestPolicyUsagePlan {
    tokenLocations: string[];
}

export interface GetApigatewayDeploymentSpecificationRoute {
    backends: outputs.GetApigatewayDeploymentSpecificationRouteBackend[];
    loggingPolicies: outputs.GetApigatewayDeploymentSpecificationRouteLoggingPolicy[];
    methods: string[];
    path: string;
    requestPolicies: outputs.GetApigatewayDeploymentSpecificationRouteRequestPolicy[];
    responsePolicies: outputs.GetApigatewayDeploymentSpecificationRouteResponsePolicy[];
}

export interface GetApigatewayDeploymentSpecificationRouteBackend {
    allowedPostLogoutUris: string[];
    body: string;
    connectTimeoutInSeconds: number;
    functionId: string;
    headers: outputs.GetApigatewayDeploymentSpecificationRouteBackendHeader[];
    isSslVerifyDisabled: boolean;
    postLogoutState: string;
    readTimeoutInSeconds: number;
    routingBackends: outputs.GetApigatewayDeploymentSpecificationRouteBackendRoutingBackend[];
    selectionSources: outputs.GetApigatewayDeploymentSpecificationRouteBackendSelectionSource[];
    sendTimeoutInSeconds: number;
    status: number;
    type: string;
    url: string;
}

export interface GetApigatewayDeploymentSpecificationRouteBackendHeader {
    name: string;
    value: string;
}

export interface GetApigatewayDeploymentSpecificationRouteBackendRoutingBackend {
    backends: outputs.GetApigatewayDeploymentSpecificationRouteBackendRoutingBackendBackend[];
    keys: outputs.GetApigatewayDeploymentSpecificationRouteBackendRoutingBackendKey[];
}

export interface GetApigatewayDeploymentSpecificationRouteBackendRoutingBackendBackend {
    body: string;
    connectTimeoutInSeconds: number;
    functionId: string;
    headers: outputs.GetApigatewayDeploymentSpecificationRouteBackendRoutingBackendBackendHeader[];
    isSslVerifyDisabled: boolean;
    readTimeoutInSeconds: number;
    sendTimeoutInSeconds: number;
    status: number;
    type: string;
    url: string;
}

export interface GetApigatewayDeploymentSpecificationRouteBackendRoutingBackendBackendHeader {
    name: string;
    value: string;
}

export interface GetApigatewayDeploymentSpecificationRouteBackendRoutingBackendKey {
    expression: string;
    isDefault: boolean;
    name: string;
    type: string;
    values: string[];
}

export interface GetApigatewayDeploymentSpecificationRouteBackendSelectionSource {
    selector: string;
    type: string;
}

export interface GetApigatewayDeploymentSpecificationRouteLoggingPolicy {
    accessLogs: outputs.GetApigatewayDeploymentSpecificationRouteLoggingPolicyAccessLog[];
    executionLogs: outputs.GetApigatewayDeploymentSpecificationRouteLoggingPolicyExecutionLog[];
}

export interface GetApigatewayDeploymentSpecificationRouteLoggingPolicyAccessLog {
    isEnabled: boolean;
}

export interface GetApigatewayDeploymentSpecificationRouteLoggingPolicyExecutionLog {
    isEnabled: boolean;
    logLevel: string;
}

export interface GetApigatewayDeploymentSpecificationRouteRequestPolicy {
    authorizations: outputs.GetApigatewayDeploymentSpecificationRouteRequestPolicyAuthorization[];
    bodyValidations: outputs.GetApigatewayDeploymentSpecificationRouteRequestPolicyBodyValidation[];
    cors: outputs.GetApigatewayDeploymentSpecificationRouteRequestPolicyCor[];
    headerTransformations: outputs.GetApigatewayDeploymentSpecificationRouteRequestPolicyHeaderTransformation[];
    headerValidations: outputs.GetApigatewayDeploymentSpecificationRouteRequestPolicyHeaderValidation[];
    queryParameterTransformations: outputs.GetApigatewayDeploymentSpecificationRouteRequestPolicyQueryParameterTransformation[];
    queryParameterValidations: outputs.GetApigatewayDeploymentSpecificationRouteRequestPolicyQueryParameterValidation[];
    responseCacheLookups: outputs.GetApigatewayDeploymentSpecificationRouteRequestPolicyResponseCacheLookup[];
}

export interface GetApigatewayDeploymentSpecificationRouteRequestPolicyAuthorization {
    allowedScopes: string[];
    type: string;
}

export interface GetApigatewayDeploymentSpecificationRouteRequestPolicyBodyValidation {
    contents: outputs.GetApigatewayDeploymentSpecificationRouteRequestPolicyBodyValidationContent[];
    required: boolean;
    validationMode: string;
}

export interface GetApigatewayDeploymentSpecificationRouteRequestPolicyBodyValidationContent {
    mediaType: string;
    validationType: string;
}

export interface GetApigatewayDeploymentSpecificationRouteRequestPolicyCor {
    allowedHeaders: string[];
    allowedMethods: string[];
    allowedOrigins: string[];
    exposedHeaders: string[];
    isAllowCredentialsEnabled: boolean;
    maxAgeInSeconds: number;
}

export interface GetApigatewayDeploymentSpecificationRouteRequestPolicyHeaderTransformation {
    filterHeaders: outputs.GetApigatewayDeploymentSpecificationRouteRequestPolicyHeaderTransformationFilterHeader[];
    renameHeaders: outputs.GetApigatewayDeploymentSpecificationRouteRequestPolicyHeaderTransformationRenameHeader[];
    setHeaders: outputs.GetApigatewayDeploymentSpecificationRouteRequestPolicyHeaderTransformationSetHeader[];
}

export interface GetApigatewayDeploymentSpecificationRouteRequestPolicyHeaderTransformationFilterHeader {
    items: outputs.GetApigatewayDeploymentSpecificationRouteRequestPolicyHeaderTransformationFilterHeaderItem[];
    type: string;
}

export interface GetApigatewayDeploymentSpecificationRouteRequestPolicyHeaderTransformationFilterHeaderItem {
    name: string;
}

export interface GetApigatewayDeploymentSpecificationRouteRequestPolicyHeaderTransformationRenameHeader {
    items: outputs.GetApigatewayDeploymentSpecificationRouteRequestPolicyHeaderTransformationRenameHeaderItem[];
}

export interface GetApigatewayDeploymentSpecificationRouteRequestPolicyHeaderTransformationRenameHeaderItem {
    from: string;
    to: string;
}

export interface GetApigatewayDeploymentSpecificationRouteRequestPolicyHeaderTransformationSetHeader {
    items: outputs.GetApigatewayDeploymentSpecificationRouteRequestPolicyHeaderTransformationSetHeaderItem[];
}

export interface GetApigatewayDeploymentSpecificationRouteRequestPolicyHeaderTransformationSetHeaderItem {
    ifExists: string;
    name: string;
    values: string[];
}

export interface GetApigatewayDeploymentSpecificationRouteRequestPolicyHeaderValidation {
    headers: outputs.GetApigatewayDeploymentSpecificationRouteRequestPolicyHeaderValidationHeader[];
    validationMode: string;
}

export interface GetApigatewayDeploymentSpecificationRouteRequestPolicyHeaderValidationHeader {
    name: string;
    required: boolean;
}

export interface GetApigatewayDeploymentSpecificationRouteRequestPolicyQueryParameterTransformation {
    filterQueryParameters: outputs.GetApigatewayDeploymentSpecificationRouteRequestPolicyQueryParameterTransformationFilterQueryParameter[];
    renameQueryParameters: outputs.GetApigatewayDeploymentSpecificationRouteRequestPolicyQueryParameterTransformationRenameQueryParameter[];
    setQueryParameters: outputs.GetApigatewayDeploymentSpecificationRouteRequestPolicyQueryParameterTransformationSetQueryParameter[];
}

export interface GetApigatewayDeploymentSpecificationRouteRequestPolicyQueryParameterTransformationFilterQueryParameter {
    items: outputs.GetApigatewayDeploymentSpecificationRouteRequestPolicyQueryParameterTransformationFilterQueryParameterItem[];
    type: string;
}

export interface GetApigatewayDeploymentSpecificationRouteRequestPolicyQueryParameterTransformationFilterQueryParameterItem {
    name: string;
}

export interface GetApigatewayDeploymentSpecificationRouteRequestPolicyQueryParameterTransformationRenameQueryParameter {
    items: outputs.GetApigatewayDeploymentSpecificationRouteRequestPolicyQueryParameterTransformationRenameQueryParameterItem[];
}

export interface GetApigatewayDeploymentSpecificationRouteRequestPolicyQueryParameterTransformationRenameQueryParameterItem {
    from: string;
    to: string;
}

export interface GetApigatewayDeploymentSpecificationRouteRequestPolicyQueryParameterTransformationSetQueryParameter {
    items: outputs.GetApigatewayDeploymentSpecificationRouteRequestPolicyQueryParameterTransformationSetQueryParameterItem[];
}

export interface GetApigatewayDeploymentSpecificationRouteRequestPolicyQueryParameterTransformationSetQueryParameterItem {
    ifExists: string;
    name: string;
    values: string[];
}

export interface GetApigatewayDeploymentSpecificationRouteRequestPolicyQueryParameterValidation {
    parameters: outputs.GetApigatewayDeploymentSpecificationRouteRequestPolicyQueryParameterValidationParameter[];
    validationMode: string;
}

export interface GetApigatewayDeploymentSpecificationRouteRequestPolicyQueryParameterValidationParameter {
    name: string;
    required: boolean;
}

export interface GetApigatewayDeploymentSpecificationRouteRequestPolicyResponseCacheLookup {
    cacheKeyAdditions: string[];
    isEnabled: boolean;
    isPrivateCachingEnabled: boolean;
    type: string;
}

export interface GetApigatewayDeploymentSpecificationRouteResponsePolicy {
    headerTransformations: outputs.GetApigatewayDeploymentSpecificationRouteResponsePolicyHeaderTransformation[];
    responseCacheStores: outputs.GetApigatewayDeploymentSpecificationRouteResponsePolicyResponseCacheStore[];
}

export interface GetApigatewayDeploymentSpecificationRouteResponsePolicyHeaderTransformation {
    filterHeaders: outputs.GetApigatewayDeploymentSpecificationRouteResponsePolicyHeaderTransformationFilterHeader[];
    renameHeaders: outputs.GetApigatewayDeploymentSpecificationRouteResponsePolicyHeaderTransformationRenameHeader[];
    setHeaders: outputs.GetApigatewayDeploymentSpecificationRouteResponsePolicyHeaderTransformationSetHeader[];
}

export interface GetApigatewayDeploymentSpecificationRouteResponsePolicyHeaderTransformationFilterHeader {
    items: outputs.GetApigatewayDeploymentSpecificationRouteResponsePolicyHeaderTransformationFilterHeaderItem[];
    type: string;
}

export interface GetApigatewayDeploymentSpecificationRouteResponsePolicyHeaderTransformationFilterHeaderItem {
    name: string;
}

export interface GetApigatewayDeploymentSpecificationRouteResponsePolicyHeaderTransformationRenameHeader {
    items: outputs.GetApigatewayDeploymentSpecificationRouteResponsePolicyHeaderTransformationRenameHeaderItem[];
}

export interface GetApigatewayDeploymentSpecificationRouteResponsePolicyHeaderTransformationRenameHeaderItem {
    from: string;
    to: string;
}

export interface GetApigatewayDeploymentSpecificationRouteResponsePolicyHeaderTransformationSetHeader {
    items: outputs.GetApigatewayDeploymentSpecificationRouteResponsePolicyHeaderTransformationSetHeaderItem[];
}

export interface GetApigatewayDeploymentSpecificationRouteResponsePolicyHeaderTransformationSetHeaderItem {
    ifExists: string;
    name: string;
    values: string[];
}

export interface GetApigatewayDeploymentSpecificationRouteResponsePolicyResponseCacheStore {
    timeToLiveInSeconds: number;
    type: string;
}

export interface GetApigatewayDeploymentsDeploymentCollection {
    compartmentId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    endpoint: string;
    freeformTags: {[key: string]: string};
    gatewayId: string;
    id: string;
    lifecycleDetails: string;
    pathPrefix: string;
    specifications: outputs.GetApigatewayDeploymentsDeploymentCollectionSpecification[];
    state: string;
    timeCreated: string;
    timeUpdated: string;
}

export interface GetApigatewayDeploymentsDeploymentCollectionSpecification {
    loggingPolicies: outputs.GetApigatewayDeploymentsDeploymentCollectionSpecificationLoggingPolicy[];
    requestPolicies: outputs.GetApigatewayDeploymentsDeploymentCollectionSpecificationRequestPolicy[];
    routes: outputs.GetApigatewayDeploymentsDeploymentCollectionSpecificationRoute[];
}

export interface GetApigatewayDeploymentsDeploymentCollectionSpecificationLoggingPolicy {
    accessLogs: outputs.GetApigatewayDeploymentsDeploymentCollectionSpecificationLoggingPolicyAccessLog[];
    executionLogs: outputs.GetApigatewayDeploymentsDeploymentCollectionSpecificationLoggingPolicyExecutionLog[];
}

export interface GetApigatewayDeploymentsDeploymentCollectionSpecificationLoggingPolicyAccessLog {
    isEnabled: boolean;
}

export interface GetApigatewayDeploymentsDeploymentCollectionSpecificationLoggingPolicyExecutionLog {
    isEnabled: boolean;
    logLevel: string;
}

export interface GetApigatewayDeploymentsDeploymentCollectionSpecificationRequestPolicy {
    authentications: outputs.GetApigatewayDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthentication[];
    cors: outputs.GetApigatewayDeploymentsDeploymentCollectionSpecificationRequestPolicyCor[];
    dynamicAuthentications: outputs.GetApigatewayDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthentication[];
    mutualTls: outputs.GetApigatewayDeploymentsDeploymentCollectionSpecificationRequestPolicyMutualTl[];
    rateLimitings: outputs.GetApigatewayDeploymentsDeploymentCollectionSpecificationRequestPolicyRateLimiting[];
    usagePlans: outputs.GetApigatewayDeploymentsDeploymentCollectionSpecificationRequestPolicyUsagePlan[];
}

export interface GetApigatewayDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthentication {
    audiences: string[];
    cacheKeys: string[];
    functionId: string;
    isAnonymousAccessAllowed: boolean;
    issuers: string[];
    maxClockSkewInSeconds: number;
    parameters: {[key: string]: string};
    publicKeys: outputs.GetApigatewayDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationPublicKey[];
    tokenAuthScheme: string;
    tokenHeader: string;
    tokenQueryParam: string;
    type: string;
    validationFailurePolicies: outputs.GetApigatewayDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationValidationFailurePolicy[];
    validationPolicies: outputs.GetApigatewayDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationValidationPolicy[];
    verifyClaims: outputs.GetApigatewayDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationVerifyClaim[];
}

export interface GetApigatewayDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationPublicKey {
    isSslVerifyDisabled: boolean;
    keys: outputs.GetApigatewayDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationPublicKeyKey[];
    maxCacheDurationInHours: number;
    type: string;
    uri: string;
}

export interface GetApigatewayDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationPublicKeyKey {
    alg: string;
    e: string;
    format: string;
    key: string;
    keyOps: string[];
    kid: string;
    kty: string;
    n: string;
    use: string;
}

export interface GetApigatewayDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationValidationFailurePolicy {
    clientDetails: outputs.GetApigatewayDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationValidationFailurePolicyClientDetail[];
    fallbackRedirectPath: string;
    logoutPath: string;
    maxExpiryDurationInHours: number;
    responseCode: string;
    responseHeaderTransformations: outputs.GetApigatewayDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformation[];
    responseMessage: string;
    responseType: string;
    scopes: string[];
    sourceUriDetails: outputs.GetApigatewayDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationValidationFailurePolicySourceUriDetail[];
    type: string;
    useCookiesForIntermediateSteps: boolean;
    useCookiesForSession: boolean;
    usePkce: boolean;
}

export interface GetApigatewayDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationValidationFailurePolicyClientDetail {
    clientId: string;
    clientSecretId: string;
    clientSecretVersionNumber: string;
    type: string;
}

export interface GetApigatewayDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformation {
    filterHeaders: outputs.GetApigatewayDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformationFilterHeader[];
    renameHeaders: outputs.GetApigatewayDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformationRenameHeader[];
    setHeaders: outputs.GetApigatewayDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformationSetHeader[];
}

export interface GetApigatewayDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformationFilterHeader {
    items: outputs.GetApigatewayDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformationFilterHeaderItem[];
    type: string;
}

export interface GetApigatewayDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformationFilterHeaderItem {
    name: string;
}

export interface GetApigatewayDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformationRenameHeader {
    items: outputs.GetApigatewayDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformationRenameHeaderItem[];
}

export interface GetApigatewayDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformationRenameHeaderItem {
    from: string;
    to: string;
}

export interface GetApigatewayDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformationSetHeader {
    items: outputs.GetApigatewayDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformationSetHeaderItem[];
}

export interface GetApigatewayDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformationSetHeaderItem {
    ifExists: string;
    name: string;
    values: string[];
}

export interface GetApigatewayDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationValidationFailurePolicySourceUriDetail {
    type: string;
    uri: string;
}

export interface GetApigatewayDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationValidationPolicy {
    additionalValidationPolicies: outputs.GetApigatewayDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationValidationPolicyAdditionalValidationPolicy[];
    clientDetails: outputs.GetApigatewayDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationValidationPolicyClientDetail[];
    isSslVerifyDisabled: boolean;
    keys: outputs.GetApigatewayDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationValidationPolicyKey[];
    maxCacheDurationInHours: number;
    sourceUriDetails: outputs.GetApigatewayDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationValidationPolicySourceUriDetail[];
    type: string;
    uri: string;
}

export interface GetApigatewayDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationValidationPolicyAdditionalValidationPolicy {
    audiences: string[];
    issuers: string[];
    verifyClaims: outputs.GetApigatewayDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationValidationPolicyAdditionalValidationPolicyVerifyClaim[];
}

export interface GetApigatewayDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationValidationPolicyAdditionalValidationPolicyVerifyClaim {
    isRequired: boolean;
    key: string;
    values: string[];
}

export interface GetApigatewayDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationValidationPolicyClientDetail {
    clientId: string;
    clientSecretId: string;
    clientSecretVersionNumber: string;
    type: string;
}

export interface GetApigatewayDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationValidationPolicyKey {
    alg: string;
    e: string;
    format: string;
    key: string;
    keyOps: string[];
    kid: string;
    kty: string;
    n: string;
    use: string;
}

export interface GetApigatewayDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationValidationPolicySourceUriDetail {
    type: string;
    uri: string;
}

export interface GetApigatewayDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationVerifyClaim {
    isRequired: boolean;
    key: string;
    values: string[];
}

export interface GetApigatewayDeploymentsDeploymentCollectionSpecificationRequestPolicyCor {
    allowedHeaders: string[];
    allowedMethods: string[];
    allowedOrigins: string[];
    exposedHeaders: string[];
    isAllowCredentialsEnabled: boolean;
    maxAgeInSeconds: number;
}

export interface GetApigatewayDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthentication {
    authenticationServers: outputs.GetApigatewayDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServer[];
    selectionSources: outputs.GetApigatewayDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationSelectionSource[];
}

export interface GetApigatewayDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServer {
    authenticationServerDetails: outputs.GetApigatewayDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetail[];
    keys: outputs.GetApigatewayDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerKey[];
}

export interface GetApigatewayDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetail {
    audiences: string[];
    cacheKeys: string[];
    functionId: string;
    isAnonymousAccessAllowed: boolean;
    issuers: string[];
    maxClockSkewInSeconds: number;
    parameters: {[key: string]: string};
    publicKeys: outputs.GetApigatewayDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailPublicKey[];
    tokenAuthScheme: string;
    tokenHeader: string;
    tokenQueryParam: string;
    type: string;
    validationFailurePolicies: outputs.GetApigatewayDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicy[];
    validationPolicies: outputs.GetApigatewayDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicy[];
    verifyClaims: outputs.GetApigatewayDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailVerifyClaim[];
}

export interface GetApigatewayDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailPublicKey {
    isSslVerifyDisabled: boolean;
    keys: outputs.GetApigatewayDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailPublicKeyKey[];
    maxCacheDurationInHours: number;
    type: string;
    uri: string;
}

export interface GetApigatewayDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailPublicKeyKey {
    alg: string;
    e: string;
    format: string;
    key: string;
    keyOps: string[];
    kid: string;
    kty: string;
    n: string;
    use: string;
}

export interface GetApigatewayDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicy {
    clientDetails: outputs.GetApigatewayDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyClientDetail[];
    fallbackRedirectPath: string;
    logoutPath: string;
    maxExpiryDurationInHours: number;
    responseCode: string;
    responseHeaderTransformations: outputs.GetApigatewayDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformation[];
    responseMessage: string;
    responseType: string;
    scopes: string[];
    sourceUriDetails: outputs.GetApigatewayDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicySourceUriDetail[];
    type: string;
    useCookiesForIntermediateSteps: boolean;
    useCookiesForSession: boolean;
    usePkce: boolean;
}

export interface GetApigatewayDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyClientDetail {
    clientId: string;
    clientSecretId: string;
    clientSecretVersionNumber: string;
    type: string;
}

export interface GetApigatewayDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformation {
    filterHeaders: outputs.GetApigatewayDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationFilterHeader[];
    renameHeaders: outputs.GetApigatewayDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationRenameHeader[];
    setHeaders: outputs.GetApigatewayDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationSetHeader[];
}

export interface GetApigatewayDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationFilterHeader {
    items: outputs.GetApigatewayDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationFilterHeaderItem[];
    type: string;
}

export interface GetApigatewayDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationFilterHeaderItem {
    name: string;
}

export interface GetApigatewayDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationRenameHeader {
    items: outputs.GetApigatewayDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationRenameHeaderItem[];
}

export interface GetApigatewayDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationRenameHeaderItem {
    from: string;
    to: string;
}

export interface GetApigatewayDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationSetHeader {
    items: outputs.GetApigatewayDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationSetHeaderItem[];
}

export interface GetApigatewayDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationSetHeaderItem {
    ifExists: string;
    name: string;
    values: string[];
}

export interface GetApigatewayDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicySourceUriDetail {
    type: string;
    uri: string;
}

export interface GetApigatewayDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicy {
    additionalValidationPolicies: outputs.GetApigatewayDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyAdditionalValidationPolicy[];
    clientDetails: outputs.GetApigatewayDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyClientDetail[];
    isSslVerifyDisabled: boolean;
    keys: outputs.GetApigatewayDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyKey[];
    maxCacheDurationInHours: number;
    sourceUriDetails: outputs.GetApigatewayDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicySourceUriDetail[];
    type: string;
    uri: string;
}

export interface GetApigatewayDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyAdditionalValidationPolicy {
    audiences: string[];
    issuers: string[];
    verifyClaims: outputs.GetApigatewayDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyAdditionalValidationPolicyVerifyClaim[];
}

export interface GetApigatewayDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyAdditionalValidationPolicyVerifyClaim {
    isRequired: boolean;
    key: string;
    values: string[];
}

export interface GetApigatewayDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyClientDetail {
    clientId: string;
    clientSecretId: string;
    clientSecretVersionNumber: string;
    type: string;
}

export interface GetApigatewayDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyKey {
    alg: string;
    e: string;
    format: string;
    key: string;
    keyOps: string[];
    kid: string;
    kty: string;
    n: string;
    use: string;
}

export interface GetApigatewayDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicySourceUriDetail {
    type: string;
    uri: string;
}

export interface GetApigatewayDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailVerifyClaim {
    isRequired: boolean;
    key: string;
    values: string[];
}

export interface GetApigatewayDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerKey {
    expression: string;
    isDefault: boolean;
    name: string;
    type: string;
    values: string[];
}

export interface GetApigatewayDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationSelectionSource {
    selector: string;
    type: string;
}

export interface GetApigatewayDeploymentsDeploymentCollectionSpecificationRequestPolicyMutualTl {
    allowedSans: string[];
    isVerifiedCertificateRequired: boolean;
}

export interface GetApigatewayDeploymentsDeploymentCollectionSpecificationRequestPolicyRateLimiting {
    rateInRequestsPerSecond: number;
    rateKey: string;
}

export interface GetApigatewayDeploymentsDeploymentCollectionSpecificationRequestPolicyUsagePlan {
    tokenLocations: string[];
}

export interface GetApigatewayDeploymentsDeploymentCollectionSpecificationRoute {
    backends: outputs.GetApigatewayDeploymentsDeploymentCollectionSpecificationRouteBackend[];
    loggingPolicies: outputs.GetApigatewayDeploymentsDeploymentCollectionSpecificationRouteLoggingPolicy[];
    methods: string[];
    path: string;
    requestPolicies: outputs.GetApigatewayDeploymentsDeploymentCollectionSpecificationRouteRequestPolicy[];
    responsePolicies: outputs.GetApigatewayDeploymentsDeploymentCollectionSpecificationRouteResponsePolicy[];
}

export interface GetApigatewayDeploymentsDeploymentCollectionSpecificationRouteBackend {
    allowedPostLogoutUris: string[];
    body: string;
    connectTimeoutInSeconds: number;
    functionId: string;
    headers: outputs.GetApigatewayDeploymentsDeploymentCollectionSpecificationRouteBackendHeader[];
    isSslVerifyDisabled: boolean;
    postLogoutState: string;
    readTimeoutInSeconds: number;
    routingBackends: outputs.GetApigatewayDeploymentsDeploymentCollectionSpecificationRouteBackendRoutingBackend[];
    selectionSources: outputs.GetApigatewayDeploymentsDeploymentCollectionSpecificationRouteBackendSelectionSource[];
    sendTimeoutInSeconds: number;
    status: number;
    type: string;
    url: string;
}

export interface GetApigatewayDeploymentsDeploymentCollectionSpecificationRouteBackendHeader {
    name: string;
    value: string;
}

export interface GetApigatewayDeploymentsDeploymentCollectionSpecificationRouteBackendRoutingBackend {
    backends: outputs.GetApigatewayDeploymentsDeploymentCollectionSpecificationRouteBackendRoutingBackendBackend[];
    keys: outputs.GetApigatewayDeploymentsDeploymentCollectionSpecificationRouteBackendRoutingBackendKey[];
}

export interface GetApigatewayDeploymentsDeploymentCollectionSpecificationRouteBackendRoutingBackendBackend {
    body: string;
    connectTimeoutInSeconds: number;
    functionId: string;
    headers: outputs.GetApigatewayDeploymentsDeploymentCollectionSpecificationRouteBackendRoutingBackendBackendHeader[];
    isSslVerifyDisabled: boolean;
    readTimeoutInSeconds: number;
    sendTimeoutInSeconds: number;
    status: number;
    type: string;
    url: string;
}

export interface GetApigatewayDeploymentsDeploymentCollectionSpecificationRouteBackendRoutingBackendBackendHeader {
    name: string;
    value: string;
}

export interface GetApigatewayDeploymentsDeploymentCollectionSpecificationRouteBackendRoutingBackendKey {
    expression: string;
    isDefault: boolean;
    name: string;
    type: string;
    values: string[];
}

export interface GetApigatewayDeploymentsDeploymentCollectionSpecificationRouteBackendSelectionSource {
    selector: string;
    type: string;
}

export interface GetApigatewayDeploymentsDeploymentCollectionSpecificationRouteLoggingPolicy {
    accessLogs: outputs.GetApigatewayDeploymentsDeploymentCollectionSpecificationRouteLoggingPolicyAccessLog[];
    executionLogs: outputs.GetApigatewayDeploymentsDeploymentCollectionSpecificationRouteLoggingPolicyExecutionLog[];
}

export interface GetApigatewayDeploymentsDeploymentCollectionSpecificationRouteLoggingPolicyAccessLog {
    isEnabled: boolean;
}

export interface GetApigatewayDeploymentsDeploymentCollectionSpecificationRouteLoggingPolicyExecutionLog {
    isEnabled: boolean;
    logLevel: string;
}

export interface GetApigatewayDeploymentsDeploymentCollectionSpecificationRouteRequestPolicy {
    authorizations: outputs.GetApigatewayDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyAuthorization[];
    bodyValidations: outputs.GetApigatewayDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyBodyValidation[];
    cors: outputs.GetApigatewayDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyCor[];
    headerTransformations: outputs.GetApigatewayDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyHeaderTransformation[];
    headerValidations: outputs.GetApigatewayDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyHeaderValidation[];
    queryParameterTransformations: outputs.GetApigatewayDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyQueryParameterTransformation[];
    queryParameterValidations: outputs.GetApigatewayDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyQueryParameterValidation[];
    responseCacheLookups: outputs.GetApigatewayDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyResponseCacheLookup[];
}

export interface GetApigatewayDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyAuthorization {
    allowedScopes: string[];
    type: string;
}

export interface GetApigatewayDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyBodyValidation {
    contents: outputs.GetApigatewayDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyBodyValidationContent[];
    required: boolean;
    validationMode: string;
}

export interface GetApigatewayDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyBodyValidationContent {
    mediaType: string;
    validationType: string;
}

export interface GetApigatewayDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyCor {
    allowedHeaders: string[];
    allowedMethods: string[];
    allowedOrigins: string[];
    exposedHeaders: string[];
    isAllowCredentialsEnabled: boolean;
    maxAgeInSeconds: number;
}

export interface GetApigatewayDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyHeaderTransformation {
    filterHeaders: outputs.GetApigatewayDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyHeaderTransformationFilterHeader[];
    renameHeaders: outputs.GetApigatewayDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyHeaderTransformationRenameHeader[];
    setHeaders: outputs.GetApigatewayDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyHeaderTransformationSetHeader[];
}

export interface GetApigatewayDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyHeaderTransformationFilterHeader {
    items: outputs.GetApigatewayDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyHeaderTransformationFilterHeaderItem[];
    type: string;
}

export interface GetApigatewayDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyHeaderTransformationFilterHeaderItem {
    name: string;
}

export interface GetApigatewayDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyHeaderTransformationRenameHeader {
    items: outputs.GetApigatewayDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyHeaderTransformationRenameHeaderItem[];
}

export interface GetApigatewayDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyHeaderTransformationRenameHeaderItem {
    from: string;
    to: string;
}

export interface GetApigatewayDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyHeaderTransformationSetHeader {
    items: outputs.GetApigatewayDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyHeaderTransformationSetHeaderItem[];
}

export interface GetApigatewayDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyHeaderTransformationSetHeaderItem {
    ifExists: string;
    name: string;
    values: string[];
}

export interface GetApigatewayDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyHeaderValidation {
    headers: outputs.GetApigatewayDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyHeaderValidationHeader[];
    validationMode: string;
}

export interface GetApigatewayDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyHeaderValidationHeader {
    name: string;
    required: boolean;
}

export interface GetApigatewayDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyQueryParameterTransformation {
    filterQueryParameters: outputs.GetApigatewayDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyQueryParameterTransformationFilterQueryParameter[];
    renameQueryParameters: outputs.GetApigatewayDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyQueryParameterTransformationRenameQueryParameter[];
    setQueryParameters: outputs.GetApigatewayDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyQueryParameterTransformationSetQueryParameter[];
}

export interface GetApigatewayDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyQueryParameterTransformationFilterQueryParameter {
    items: outputs.GetApigatewayDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyQueryParameterTransformationFilterQueryParameterItem[];
    type: string;
}

export interface GetApigatewayDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyQueryParameterTransformationFilterQueryParameterItem {
    name: string;
}

export interface GetApigatewayDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyQueryParameterTransformationRenameQueryParameter {
    items: outputs.GetApigatewayDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyQueryParameterTransformationRenameQueryParameterItem[];
}

export interface GetApigatewayDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyQueryParameterTransformationRenameQueryParameterItem {
    from: string;
    to: string;
}

export interface GetApigatewayDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyQueryParameterTransformationSetQueryParameter {
    items: outputs.GetApigatewayDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyQueryParameterTransformationSetQueryParameterItem[];
}

export interface GetApigatewayDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyQueryParameterTransformationSetQueryParameterItem {
    ifExists: string;
    name: string;
    values: string[];
}

export interface GetApigatewayDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyQueryParameterValidation {
    parameters: outputs.GetApigatewayDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyQueryParameterValidationParameter[];
    validationMode: string;
}

export interface GetApigatewayDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyQueryParameterValidationParameter {
    name: string;
    required: boolean;
}

export interface GetApigatewayDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyResponseCacheLookup {
    cacheKeyAdditions: string[];
    isEnabled: boolean;
    isPrivateCachingEnabled: boolean;
    type: string;
}

export interface GetApigatewayDeploymentsDeploymentCollectionSpecificationRouteResponsePolicy {
    headerTransformations: outputs.GetApigatewayDeploymentsDeploymentCollectionSpecificationRouteResponsePolicyHeaderTransformation[];
    responseCacheStores: outputs.GetApigatewayDeploymentsDeploymentCollectionSpecificationRouteResponsePolicyResponseCacheStore[];
}

export interface GetApigatewayDeploymentsDeploymentCollectionSpecificationRouteResponsePolicyHeaderTransformation {
    filterHeaders: outputs.GetApigatewayDeploymentsDeploymentCollectionSpecificationRouteResponsePolicyHeaderTransformationFilterHeader[];
    renameHeaders: outputs.GetApigatewayDeploymentsDeploymentCollectionSpecificationRouteResponsePolicyHeaderTransformationRenameHeader[];
    setHeaders: outputs.GetApigatewayDeploymentsDeploymentCollectionSpecificationRouteResponsePolicyHeaderTransformationSetHeader[];
}

export interface GetApigatewayDeploymentsDeploymentCollectionSpecificationRouteResponsePolicyHeaderTransformationFilterHeader {
    items: outputs.GetApigatewayDeploymentsDeploymentCollectionSpecificationRouteResponsePolicyHeaderTransformationFilterHeaderItem[];
    type: string;
}

export interface GetApigatewayDeploymentsDeploymentCollectionSpecificationRouteResponsePolicyHeaderTransformationFilterHeaderItem {
    name: string;
}

export interface GetApigatewayDeploymentsDeploymentCollectionSpecificationRouteResponsePolicyHeaderTransformationRenameHeader {
    items: outputs.GetApigatewayDeploymentsDeploymentCollectionSpecificationRouteResponsePolicyHeaderTransformationRenameHeaderItem[];
}

export interface GetApigatewayDeploymentsDeploymentCollectionSpecificationRouteResponsePolicyHeaderTransformationRenameHeaderItem {
    from: string;
    to: string;
}

export interface GetApigatewayDeploymentsDeploymentCollectionSpecificationRouteResponsePolicyHeaderTransformationSetHeader {
    items: outputs.GetApigatewayDeploymentsDeploymentCollectionSpecificationRouteResponsePolicyHeaderTransformationSetHeaderItem[];
}

export interface GetApigatewayDeploymentsDeploymentCollectionSpecificationRouteResponsePolicyHeaderTransformationSetHeaderItem {
    ifExists: string;
    name: string;
    values: string[];
}

export interface GetApigatewayDeploymentsDeploymentCollectionSpecificationRouteResponsePolicyResponseCacheStore {
    timeToLiveInSeconds: number;
    type: string;
}

export interface GetApigatewayDeploymentsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetApigatewayGatewayCaBundle {
    caBundleId: string;
    certificateAuthorityId: string;
    type: string;
}

export interface GetApigatewayGatewayIpAddress {
    ipAddress: string;
}

export interface GetApigatewayGatewayResponseCacheDetail {
    authenticationSecretId: string;
    authenticationSecretVersionNumber: string;
    connectTimeoutInMs: number;
    isSslEnabled: boolean;
    isSslVerifyDisabled: boolean;
    readTimeoutInMs: number;
    sendTimeoutInMs: number;
    servers: outputs.GetApigatewayGatewayResponseCacheDetailServer[];
    type: string;
}

export interface GetApigatewayGatewayResponseCacheDetailServer {
    host: string;
    port: number;
}

export interface GetApigatewayGatewaysFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetApigatewayGatewaysGatewayCollection {
    caBundles: outputs.GetApigatewayGatewaysGatewayCollectionCaBundle[];
    certificateId: string;
    compartmentId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    endpointType: string;
    freeformTags: {[key: string]: string};
    hostname: string;
    id: string;
    ipAddresses: outputs.GetApigatewayGatewaysGatewayCollectionIpAddress[];
    lifecycleDetails: string;
    networkSecurityGroupIds: string[];
    responseCacheDetails: outputs.GetApigatewayGatewaysGatewayCollectionResponseCacheDetail[];
    state: string;
    subnetId: string;
    timeCreated: string;
    timeUpdated: string;
}

export interface GetApigatewayGatewaysGatewayCollectionCaBundle {
    caBundleId: string;
    certificateAuthorityId: string;
    type: string;
}

export interface GetApigatewayGatewaysGatewayCollectionIpAddress {
    ipAddress: string;
}

export interface GetApigatewayGatewaysGatewayCollectionResponseCacheDetail {
    authenticationSecretId: string;
    authenticationSecretVersionNumber: string;
    connectTimeoutInMs: number;
    isSslEnabled: boolean;
    isSslVerifyDisabled: boolean;
    readTimeoutInMs: number;
    sendTimeoutInMs: number;
    servers: outputs.GetApigatewayGatewaysGatewayCollectionResponseCacheDetailServer[];
    type: string;
}

export interface GetApigatewayGatewaysGatewayCollectionResponseCacheDetailServer {
    host: string;
    port: number;
}

export interface GetApigatewaySubscriberClient {
    name: string;
    token: string;
}

export interface GetApigatewaySubscribersFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetApigatewaySubscribersSubscriberCollection {
    items: outputs.GetApigatewaySubscribersSubscriberCollectionItem[];
}

export interface GetApigatewaySubscribersSubscriberCollectionItem {
    clients: outputs.GetApigatewaySubscribersSubscriberCollectionItemClient[];
    compartmentId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    lifecycleDetails: string;
    state: string;
    timeCreated: string;
    timeUpdated: string;
    usagePlans: string[];
}

export interface GetApigatewaySubscribersSubscriberCollectionItemClient {
    name: string;
    token: string;
}

export interface GetApigatewayUsagePlanEntitlement {
    description: string;
    name: string;
    quotas: outputs.GetApigatewayUsagePlanEntitlementQuota[];
    rateLimits: outputs.GetApigatewayUsagePlanEntitlementRateLimit[];
    targets: outputs.GetApigatewayUsagePlanEntitlementTarget[];
}

export interface GetApigatewayUsagePlanEntitlementQuota {
    operationOnBreach: string;
    resetPolicy: string;
    unit: string;
    value: number;
}

export interface GetApigatewayUsagePlanEntitlementRateLimit {
    unit: string;
    value: number;
}

export interface GetApigatewayUsagePlanEntitlementTarget {
    deploymentId: string;
}

export interface GetApigatewayUsagePlansFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetApigatewayUsagePlansUsagePlanCollection {
    items: outputs.GetApigatewayUsagePlansUsagePlanCollectionItem[];
}

export interface GetApigatewayUsagePlansUsagePlanCollectionItem {
    compartmentId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    entitlements: outputs.GetApigatewayUsagePlansUsagePlanCollectionItemEntitlement[];
    freeformTags: {[key: string]: string};
    id: string;
    lifecycleDetails: string;
    state: string;
    timeCreated: string;
    timeUpdated: string;
}

export interface GetApigatewayUsagePlansUsagePlanCollectionItemEntitlement {
    description: string;
    name: string;
    quotas: outputs.GetApigatewayUsagePlansUsagePlanCollectionItemEntitlementQuota[];
    rateLimits: outputs.GetApigatewayUsagePlansUsagePlanCollectionItemEntitlementRateLimit[];
    targets: outputs.GetApigatewayUsagePlansUsagePlanCollectionItemEntitlementTarget[];
}

export interface GetApigatewayUsagePlansUsagePlanCollectionItemEntitlementQuota {
    operationOnBreach: string;
    resetPolicy: string;
    unit: string;
    value: number;
}

export interface GetApigatewayUsagePlansUsagePlanCollectionItemEntitlementRateLimit {
    unit: string;
    value: number;
}

export interface GetApigatewayUsagePlansUsagePlanCollectionItemEntitlementTarget {
    deploymentId: string;
}

export interface GetApmApmDomainsApmDomain {
    compartmentId: string;
    dataUploadEndpoint: string;
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    isFreeTier: boolean;
    state: string;
    timeCreated: string;
    timeUpdated: string;
}

export interface GetApmApmDomainsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetApmConfigConfigDimension {
    name: string;
    valueSource: string;
}

export interface GetApmConfigConfigInUseBy {
    configType: string;
    displayName: string;
    id: string;
    optionsGroup: string;
}

export interface GetApmConfigConfigMetric {
    description: string;
    name: string;
    unit: string;
    valueSource: string;
}

export interface GetApmConfigConfigRule {
    displayName: string;
    filterText: string;
    isApplyToErrorSpans: boolean;
    isEnabled: boolean;
    priority: number;
    satisfiedResponseTime: number;
    toleratingResponseTime: number;
}

export interface GetApmConfigConfigsConfigCollection {
    items: outputs.GetApmConfigConfigsConfigCollectionItem[];
}

export interface GetApmConfigConfigsConfigCollectionItem {
    apmDomainId: string;
    configType: string;
    createdBy: string;
    definedTags: {[key: string]: string};
    description: string;
    dimensions: outputs.GetApmConfigConfigsConfigCollectionItemDimension[];
    displayName: string;
    etag: string;
    filterId: string;
    filterText: string;
    freeformTags: {[key: string]: string};
    group: string;
    id: string;
    inUseBies: outputs.GetApmConfigConfigsConfigCollectionItemInUseBy[];
    metrics: outputs.GetApmConfigConfigsConfigCollectionItemMetric[];
    namespace: string;
    opcDryRun: string;
    options: string;
    rules: outputs.GetApmConfigConfigsConfigCollectionItemRule[];
    timeCreated: string;
    timeUpdated: string;
    updatedBy: string;
}

export interface GetApmConfigConfigsConfigCollectionItemDimension {
    name: string;
    valueSource: string;
}

export interface GetApmConfigConfigsConfigCollectionItemInUseBy {
    configType: string;
    displayName: string;
    id: string;
    optionsGroup: string;
}

export interface GetApmConfigConfigsConfigCollectionItemMetric {
    description: string;
    name: string;
    unit: string;
    valueSource: string;
}

export interface GetApmConfigConfigsConfigCollectionItemRule {
    displayName: string;
    filterText: string;
    isApplyToErrorSpans: boolean;
    isEnabled: boolean;
    priority: number;
    satisfiedResponseTime: number;
    toleratingResponseTime: number;
}

export interface GetApmConfigConfigsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetApmDataKeysDataKey {
    name: string;
    type: string;
    value: string;
}

export interface GetApmDataKeysFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetApmSyntheticsDedicatedVantagePointDvpStackDetail {
    dvpStackId: string;
    dvpStackType: string;
    dvpStreamId: string;
    dvpVersion: string;
}

export interface GetApmSyntheticsDedicatedVantagePointMonitorStatusCountMap {
    disabled: number;
    enabled: number;
    invalid: number;
    total: number;
}

export interface GetApmSyntheticsDedicatedVantagePointsDedicatedVantagePointCollection {
    items: outputs.GetApmSyntheticsDedicatedVantagePointsDedicatedVantagePointCollectionItem[];
}

export interface GetApmSyntheticsDedicatedVantagePointsDedicatedVantagePointCollectionItem {
    apmDomainId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    dvpStackDetails: outputs.GetApmSyntheticsDedicatedVantagePointsDedicatedVantagePointCollectionItemDvpStackDetail[];
    freeformTags: {[key: string]: string};
    id: string;
    monitorStatusCountMaps: outputs.GetApmSyntheticsDedicatedVantagePointsDedicatedVantagePointCollectionItemMonitorStatusCountMap[];
    name: string;
    region: string;
    status: string;
    timeCreated: string;
    timeUpdated: string;
}

export interface GetApmSyntheticsDedicatedVantagePointsDedicatedVantagePointCollectionItemDvpStackDetail {
    dvpStackId: string;
    dvpStackType: string;
    dvpStreamId: string;
    dvpVersion: string;
}

export interface GetApmSyntheticsDedicatedVantagePointsDedicatedVantagePointCollectionItemMonitorStatusCountMap {
    disabled: number;
    enabled: number;
    invalid: number;
    total: number;
}

export interface GetApmSyntheticsDedicatedVantagePointsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetApmSyntheticsMonitorAvailabilityConfiguration {
    maxAllowedFailuresPerInterval: number;
    minAllowedRunsPerInterval: number;
}

export interface GetApmSyntheticsMonitorConfiguration {
    clientCertificateDetails: outputs.GetApmSyntheticsMonitorConfigurationClientCertificateDetail[];
    configType: string;
    connectionString: string;
    databaseAuthenticationDetails: outputs.GetApmSyntheticsMonitorConfigurationDatabaseAuthenticationDetail[];
    databaseConnectionType: string;
    databaseRole: string;
    databaseType: string;
    databaseWalletDetails: outputs.GetApmSyntheticsMonitorConfigurationDatabaseWalletDetail[];
    dnsConfigurations: outputs.GetApmSyntheticsMonitorConfigurationDnsConfiguration[];
    downloadSizeLimitInBytes: number;
    ftpBasicAuthenticationDetails: outputs.GetApmSyntheticsMonitorConfigurationFtpBasicAuthenticationDetail[];
    ftpProtocol: string;
    ftpRequestType: string;
    isActiveMode: boolean;
    isCertificateValidationEnabled: boolean;
    isDefaultSnapshotEnabled: boolean;
    isFailureRetried: boolean;
    isQueryRecursive: boolean;
    isRedirectionEnabled: boolean;
    nameServer: string;
    networkConfigurations: outputs.GetApmSyntheticsMonitorConfigurationNetworkConfiguration[];
    protocol: string;
    query: string;
    recordType: string;
    reqAuthenticationDetails: outputs.GetApmSyntheticsMonitorConfigurationReqAuthenticationDetail[];
    reqAuthenticationScheme: string;
    requestHeaders: outputs.GetApmSyntheticsMonitorConfigurationRequestHeader[];
    requestMethod: string;
    requestPostBody: string;
    requestQueryParams: outputs.GetApmSyntheticsMonitorConfigurationRequestQueryParam[];
    uploadFileSizeInBytes: number;
    verifyResponseCodes: string[];
    verifyResponseContent: string;
    verifyTexts: outputs.GetApmSyntheticsMonitorConfigurationVerifyText[];
}

export interface GetApmSyntheticsMonitorConfigurationClientCertificateDetail {
    clientCertificates: outputs.GetApmSyntheticsMonitorConfigurationClientCertificateDetailClientCertificate[];
    privateKeys: outputs.GetApmSyntheticsMonitorConfigurationClientCertificateDetailPrivateKey[];
}

export interface GetApmSyntheticsMonitorConfigurationClientCertificateDetailClientCertificate {
    content: string;
    fileName: string;
}

export interface GetApmSyntheticsMonitorConfigurationClientCertificateDetailPrivateKey {
    content: string;
    fileName: string;
}

export interface GetApmSyntheticsMonitorConfigurationDatabaseAuthenticationDetail {
    passwords: outputs.GetApmSyntheticsMonitorConfigurationDatabaseAuthenticationDetailPassword[];
    username: string;
}

export interface GetApmSyntheticsMonitorConfigurationDatabaseAuthenticationDetailPassword {
    password: string;
    passwordType: string;
    vaultSecretId: string;
}

export interface GetApmSyntheticsMonitorConfigurationDatabaseWalletDetail {
    databaseWallet: string;
    serviceName: string;
}

export interface GetApmSyntheticsMonitorConfigurationDnsConfiguration {
    isOverrideDns: boolean;
    overrideDnsIp: string;
}

export interface GetApmSyntheticsMonitorConfigurationFtpBasicAuthenticationDetail {
    passwords: outputs.GetApmSyntheticsMonitorConfigurationFtpBasicAuthenticationDetailPassword[];
    username: string;
}

export interface GetApmSyntheticsMonitorConfigurationFtpBasicAuthenticationDetailPassword {
    password: string;
    passwordType: string;
    vaultSecretId: string;
}

export interface GetApmSyntheticsMonitorConfigurationNetworkConfiguration {
    numberOfHops: number;
    probeMode: string;
    probePerHop: number;
    protocol: string;
    transmissionRate: number;
}

export interface GetApmSyntheticsMonitorConfigurationReqAuthenticationDetail {
    authHeaders: outputs.GetApmSyntheticsMonitorConfigurationReqAuthenticationDetailAuthHeader[];
    authRequestMethod: string;
    authRequestPostBody: string;
    authToken: string;
    authUrl: string;
    authUserName: string;
    authUserPassword: string;
    oauthScheme: string;
}

export interface GetApmSyntheticsMonitorConfigurationReqAuthenticationDetailAuthHeader {
    headerName: string;
    headerValue: string;
}

export interface GetApmSyntheticsMonitorConfigurationRequestHeader {
    headerName: string;
    headerValue: string;
}

export interface GetApmSyntheticsMonitorConfigurationRequestQueryParam {
    paramName: string;
    paramValue: string;
}

export interface GetApmSyntheticsMonitorConfigurationVerifyText {
    text: string;
}

export interface GetApmSyntheticsMonitorMaintenanceWindowSchedule {
    timeEnded: string;
    timeStarted: string;
}

export interface GetApmSyntheticsMonitorScriptParameter {
    isOverwritten: boolean;
    isSecret: boolean;
    monitorScriptParameters: outputs.GetApmSyntheticsMonitorScriptParameterMonitorScriptParameter[];
    paramName: string;
    paramValue: string;
}

export interface GetApmSyntheticsMonitorScriptParameterMonitorScriptParameter {
    paramName: string;
    paramValue: string;
}

export interface GetApmSyntheticsMonitorVantagePoint {
    displayName: string;
    name: string;
    workerLists: string[];
}

export interface GetApmSyntheticsMonitorsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetApmSyntheticsMonitorsMonitorCollection {
    items: outputs.GetApmSyntheticsMonitorsMonitorCollectionItem[];
}

export interface GetApmSyntheticsMonitorsMonitorCollectionItem {
    apmDomainId: string;
    availabilityConfigurations: outputs.GetApmSyntheticsMonitorsMonitorCollectionItemAvailabilityConfiguration[];
    batchIntervalInSeconds: number;
    configurations: outputs.GetApmSyntheticsMonitorsMonitorCollectionItemConfiguration[];
    createdBy: string;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    isIpv6: boolean;
    isRunNow: boolean;
    isRunOnce: boolean;
    lastUpdatedBy: string;
    maintenanceWindowSchedules: outputs.GetApmSyntheticsMonitorsMonitorCollectionItemMaintenanceWindowSchedule[];
    monitorType: string;
    repeatIntervalInSeconds: number;
    schedulingPolicy: string;
    scriptId: string;
    scriptName: string;
    scriptParameters: outputs.GetApmSyntheticsMonitorsMonitorCollectionItemScriptParameter[];
    status: string;
    target: string;
    timeCreated: string;
    timeUpdated: string;
    timeoutInSeconds: number;
    vantagePointCount: number;
    vantagePoints: outputs.GetApmSyntheticsMonitorsMonitorCollectionItemVantagePoint[];
}

export interface GetApmSyntheticsMonitorsMonitorCollectionItemAvailabilityConfiguration {
    maxAllowedFailuresPerInterval: number;
    minAllowedRunsPerInterval: number;
}

export interface GetApmSyntheticsMonitorsMonitorCollectionItemConfiguration {
    clientCertificateDetails: outputs.GetApmSyntheticsMonitorsMonitorCollectionItemConfigurationClientCertificateDetail[];
    configType: string;
    connectionString: string;
    databaseAuthenticationDetails: outputs.GetApmSyntheticsMonitorsMonitorCollectionItemConfigurationDatabaseAuthenticationDetail[];
    databaseConnectionType: string;
    databaseRole: string;
    databaseType: string;
    databaseWalletDetails: outputs.GetApmSyntheticsMonitorsMonitorCollectionItemConfigurationDatabaseWalletDetail[];
    dnsConfigurations: outputs.GetApmSyntheticsMonitorsMonitorCollectionItemConfigurationDnsConfiguration[];
    downloadSizeLimitInBytes: number;
    ftpBasicAuthenticationDetails: outputs.GetApmSyntheticsMonitorsMonitorCollectionItemConfigurationFtpBasicAuthenticationDetail[];
    ftpProtocol: string;
    ftpRequestType: string;
    isActiveMode: boolean;
    isCertificateValidationEnabled: boolean;
    isDefaultSnapshotEnabled: boolean;
    isFailureRetried: boolean;
    isQueryRecursive: boolean;
    isRedirectionEnabled: boolean;
    nameServer: string;
    networkConfigurations: outputs.GetApmSyntheticsMonitorsMonitorCollectionItemConfigurationNetworkConfiguration[];
    protocol: string;
    query: string;
    recordType: string;
    reqAuthenticationDetails: outputs.GetApmSyntheticsMonitorsMonitorCollectionItemConfigurationReqAuthenticationDetail[];
    reqAuthenticationScheme: string;
    requestHeaders: outputs.GetApmSyntheticsMonitorsMonitorCollectionItemConfigurationRequestHeader[];
    requestMethod: string;
    requestPostBody: string;
    requestQueryParams: outputs.GetApmSyntheticsMonitorsMonitorCollectionItemConfigurationRequestQueryParam[];
    uploadFileSizeInBytes: number;
    verifyResponseCodes: string[];
    verifyResponseContent: string;
    verifyTexts: outputs.GetApmSyntheticsMonitorsMonitorCollectionItemConfigurationVerifyText[];
}

export interface GetApmSyntheticsMonitorsMonitorCollectionItemConfigurationClientCertificateDetail {
    clientCertificates: outputs.GetApmSyntheticsMonitorsMonitorCollectionItemConfigurationClientCertificateDetailClientCertificate[];
    privateKeys: outputs.GetApmSyntheticsMonitorsMonitorCollectionItemConfigurationClientCertificateDetailPrivateKey[];
}

export interface GetApmSyntheticsMonitorsMonitorCollectionItemConfigurationClientCertificateDetailClientCertificate {
    content: string;
    fileName: string;
}

export interface GetApmSyntheticsMonitorsMonitorCollectionItemConfigurationClientCertificateDetailPrivateKey {
    content: string;
    fileName: string;
}

export interface GetApmSyntheticsMonitorsMonitorCollectionItemConfigurationDatabaseAuthenticationDetail {
    passwords: outputs.GetApmSyntheticsMonitorsMonitorCollectionItemConfigurationDatabaseAuthenticationDetailPassword[];
    username: string;
}

export interface GetApmSyntheticsMonitorsMonitorCollectionItemConfigurationDatabaseAuthenticationDetailPassword {
    password: string;
    passwordType: string;
    vaultSecretId: string;
}

export interface GetApmSyntheticsMonitorsMonitorCollectionItemConfigurationDatabaseWalletDetail {
    databaseWallet: string;
    serviceName: string;
}

export interface GetApmSyntheticsMonitorsMonitorCollectionItemConfigurationDnsConfiguration {
    isOverrideDns: boolean;
    overrideDnsIp: string;
}

export interface GetApmSyntheticsMonitorsMonitorCollectionItemConfigurationFtpBasicAuthenticationDetail {
    passwords: outputs.GetApmSyntheticsMonitorsMonitorCollectionItemConfigurationFtpBasicAuthenticationDetailPassword[];
    username: string;
}

export interface GetApmSyntheticsMonitorsMonitorCollectionItemConfigurationFtpBasicAuthenticationDetailPassword {
    password: string;
    passwordType: string;
    vaultSecretId: string;
}

export interface GetApmSyntheticsMonitorsMonitorCollectionItemConfigurationNetworkConfiguration {
    numberOfHops: number;
    probeMode: string;
    probePerHop: number;
    protocol: string;
    transmissionRate: number;
}

export interface GetApmSyntheticsMonitorsMonitorCollectionItemConfigurationReqAuthenticationDetail {
    authHeaders: outputs.GetApmSyntheticsMonitorsMonitorCollectionItemConfigurationReqAuthenticationDetailAuthHeader[];
    authRequestMethod: string;
    authRequestPostBody: string;
    authToken: string;
    authUrl: string;
    authUserName: string;
    authUserPassword: string;
    oauthScheme: string;
}

export interface GetApmSyntheticsMonitorsMonitorCollectionItemConfigurationReqAuthenticationDetailAuthHeader {
    headerName: string;
    headerValue: string;
}

export interface GetApmSyntheticsMonitorsMonitorCollectionItemConfigurationRequestHeader {
    headerName: string;
    headerValue: string;
}

export interface GetApmSyntheticsMonitorsMonitorCollectionItemConfigurationRequestQueryParam {
    paramName: string;
    paramValue: string;
}

export interface GetApmSyntheticsMonitorsMonitorCollectionItemConfigurationVerifyText {
    text: string;
}

export interface GetApmSyntheticsMonitorsMonitorCollectionItemMaintenanceWindowSchedule {
    timeEnded: string;
    timeStarted: string;
}

export interface GetApmSyntheticsMonitorsMonitorCollectionItemScriptParameter {
    isOverwritten: boolean;
    isSecret: boolean;
    monitorScriptParameters: outputs.GetApmSyntheticsMonitorsMonitorCollectionItemScriptParameterMonitorScriptParameter[];
    paramName: string;
    paramValue: string;
}

export interface GetApmSyntheticsMonitorsMonitorCollectionItemScriptParameterMonitorScriptParameter {
    paramName: string;
    paramValue: string;
}

export interface GetApmSyntheticsMonitorsMonitorCollectionItemVantagePoint {
    displayName: string;
    name: string;
    workerLists: string[];
}

export interface GetApmSyntheticsOnPremiseVantagePointWorkerIdentityInfo {
    apmShortId: string;
    collectorEndPoint: string;
    regionName: string;
}

export interface GetApmSyntheticsOnPremiseVantagePointWorkerMonitorList {
    displayName: string;
    id: string;
    isRunNow: boolean;
    monitorType: string;
    timeAssigned: string;
}

export interface GetApmSyntheticsOnPremiseVantagePointWorkerVersionDetail {
    latestVersion: string;
    minSupportedVersion: string;
    version: string;
}

export interface GetApmSyntheticsOnPremiseVantagePointWorkersFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetApmSyntheticsOnPremiseVantagePointWorkersSummary {
    available: number;
    availableCapabilities: outputs.GetApmSyntheticsOnPremiseVantagePointWorkersSummaryAvailableCapability[];
    disabled: number;
    minVersion: string;
    total: number;
    used: number;
}

export interface GetApmSyntheticsOnPremiseVantagePointWorkersSummaryAvailableCapability {
    capability: string;
    onPremiseVantagePointCount: number;
}

export interface GetApmSyntheticsOnPremiseVantagePointWorkersWorkerCollection {
    items: outputs.GetApmSyntheticsOnPremiseVantagePointWorkersWorkerCollectionItem[];
}

export interface GetApmSyntheticsOnPremiseVantagePointWorkersWorkerCollectionItem {
    apmDomainId: string;
    configurationDetails: string;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    geoInfo: string;
    id: string;
    identityInfos: outputs.GetApmSyntheticsOnPremiseVantagePointWorkersWorkerCollectionItemIdentityInfo[];
    monitorLists: outputs.GetApmSyntheticsOnPremiseVantagePointWorkersWorkerCollectionItemMonitorList[];
    name: string;
    onPremiseVantagePointId: string;
    opvpId: string;
    opvpName: string;
    priority: number;
    resourcePrincipalTokenPublicKey: string;
    runtimeId: string;
    status: string;
    timeCreated: string;
    timeLastSyncUp: string;
    timeUpdated: string;
    version: string;
    versionDetails: outputs.GetApmSyntheticsOnPremiseVantagePointWorkersWorkerCollectionItemVersionDetail[];
    workerType: string;
}

export interface GetApmSyntheticsOnPremiseVantagePointWorkersWorkerCollectionItemIdentityInfo {
    apmShortId: string;
    collectorEndPoint: string;
    regionName: string;
}

export interface GetApmSyntheticsOnPremiseVantagePointWorkersWorkerCollectionItemMonitorList {
    displayName: string;
    id: string;
    isRunNow: boolean;
    monitorType: string;
    timeAssigned: string;
}

export interface GetApmSyntheticsOnPremiseVantagePointWorkersWorkerCollectionItemVersionDetail {
    latestVersion: string;
    minSupportedVersion: string;
    version: string;
}

export interface GetApmSyntheticsOnPremiseVantagePointsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetApmSyntheticsOnPremiseVantagePointsOnPremiseVantagePointCollection {
    items: outputs.GetApmSyntheticsOnPremiseVantagePointsOnPremiseVantagePointCollectionItem[];
}

export interface GetApmSyntheticsOnPremiseVantagePointsOnPremiseVantagePointCollectionItem {
    apmDomainId: string;
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    name: string;
    timeCreated: string;
    timeUpdated: string;
    type: string;
    workersSummaries: outputs.GetApmSyntheticsOnPremiseVantagePointsOnPremiseVantagePointCollectionItemWorkersSummary[];
}

export interface GetApmSyntheticsOnPremiseVantagePointsOnPremiseVantagePointCollectionItemWorkersSummary {
    available: number;
    availableCapabilities: outputs.GetApmSyntheticsOnPremiseVantagePointsOnPremiseVantagePointCollectionItemWorkersSummaryAvailableCapability[];
    disabled: number;
    minVersion: string;
    total: number;
    used: number;
}

export interface GetApmSyntheticsOnPremiseVantagePointsOnPremiseVantagePointCollectionItemWorkersSummaryAvailableCapability {
    capability: string;
    onPremiseVantagePointCount: number;
}

export interface GetApmSyntheticsPublicVantagePointItem {
    displayName: string;
    geos: outputs.GetApmSyntheticsPublicVantagePointItemGeo[];
    name: string;
}

export interface GetApmSyntheticsPublicVantagePointItemGeo {
    adminDivCode: string;
    cityName: string;
    countryCode: string;
    countryName: string;
    latitude: number;
    longitude: number;
}

export interface GetApmSyntheticsPublicVantagePointsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetApmSyntheticsPublicVantagePointsPublicVantagePointCollection {
    items: outputs.GetApmSyntheticsPublicVantagePointsPublicVantagePointCollectionItem[];
}

export interface GetApmSyntheticsPublicVantagePointsPublicVantagePointCollectionItem {
    displayName: string;
    geos: outputs.GetApmSyntheticsPublicVantagePointsPublicVantagePointCollectionItemGeo[];
    name: string;
}

export interface GetApmSyntheticsPublicVantagePointsPublicVantagePointCollectionItemGeo {
    adminDivCode: string;
    cityName: string;
    countryCode: string;
    countryName: string;
    latitude: number;
    longitude: number;
}

export interface GetApmSyntheticsResultResultDataSet {
    byteContent: string;
    name: string;
    stringContent: string;
    timestamp: string;
}

export interface GetApmSyntheticsScriptMonitorStatusCountMap {
    disabled: number;
    enabled: number;
    invalid: number;
    total: number;
}

export interface GetApmSyntheticsScriptParameter {
    isOverwritten: boolean;
    isSecret: boolean;
    paramName: string;
    paramValue: string;
    scriptParameters: outputs.GetApmSyntheticsScriptParameterScriptParameter[];
}

export interface GetApmSyntheticsScriptParameterScriptParameter {
    isSecret: boolean;
    paramName: string;
    paramValue: string;
}

export interface GetApmSyntheticsScriptsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetApmSyntheticsScriptsScriptCollection {
    items: outputs.GetApmSyntheticsScriptsScriptCollectionItem[];
}

export interface GetApmSyntheticsScriptsScriptCollectionItem {
    apmDomainId: string;
    content: string;
    contentFileName: string;
    contentSizeInBytes: number;
    contentType: string;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    monitorStatusCountMaps: outputs.GetApmSyntheticsScriptsScriptCollectionItemMonitorStatusCountMap[];
    parameters: outputs.GetApmSyntheticsScriptsScriptCollectionItemParameter[];
    timeCreated: string;
    timeUpdated: string;
    timeUploaded: string;
}

export interface GetApmSyntheticsScriptsScriptCollectionItemMonitorStatusCountMap {
    disabled: number;
    enabled: number;
    invalid: number;
    total: number;
}

export interface GetApmSyntheticsScriptsScriptCollectionItemParameter {
    isOverwritten: boolean;
    isSecret: boolean;
    paramName: string;
    paramValue: string;
    scriptParameters: outputs.GetApmSyntheticsScriptsScriptCollectionItemParameterScriptParameter[];
}

export interface GetApmSyntheticsScriptsScriptCollectionItemParameterScriptParameter {
    isSecret: boolean;
    paramName: string;
    paramValue: string;
}

export interface GetApmTracesQueryQuickPicksFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetApmTracesQueryQuickPicksQuickPick {
    quickPickName: string;
    quickPickQuery: string;
}

export interface GetApmTracesTraceAggregatedSnapshotDataDetail {
    key: string;
    value: string;
}

export interface GetApmTracesTraceServiceSummary {
    errorSpans: string;
    spanServiceName: string;
    totalSpans: string;
}

export interface GetApmTracesTraceSnapshotDataTraceSnapshotDetail {
    key: string;
    value: string;
}

export interface GetApmTracesTraceSpan {
    durationInMs: string;
    isError: boolean;
    key: string;
    kind: string;
    logs: outputs.GetApmTracesTraceSpanLog[];
    operationName: string;
    parentSpanKey: string;
    serviceName: string;
    sourceName: string;
    tags: outputs.GetApmTracesTraceSpanTag[];
    timeEnded: string;
    timeStarted: string;
    traceKey: string;
}

export interface GetApmTracesTraceSpanLog {
    eventName: string;
    spanLogs: outputs.GetApmTracesTraceSpanLogSpanLog[];
    timeCreated: string;
}

export interface GetApmTracesTraceSpanLogSpanLog {
    logKey: string;
    logValue: string;
}

export interface GetApmTracesTraceSpanSummary {
    errorSpanCount: number;
    isFault: boolean;
    key: string;
    rootSpanDurationInMs: number;
    rootSpanOperationName: string;
    rootSpanServiceName: string;
    serviceSummaries: outputs.GetApmTracesTraceSpanSummaryServiceSummary[];
    spanCount: number;
    timeEarliestSpanStarted: string;
    timeLatestSpanEnded: string;
    timeRootSpanEnded: string;
    timeRootSpanStarted: string;
    traceDurationInMs: number;
    traceErrorCode: string;
    traceErrorType: string;
    traceStatus: string;
}

export interface GetApmTracesTraceSpanSummaryServiceSummary {
    errorSpans: string;
    spanServiceName: string;
    totalSpans: string;
}

export interface GetApmTracesTraceSpanTag {
    tagName: string;
    tagValue: string;
}

export interface GetAppmgmtControlMonitoredInstancesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetAppmgmtControlMonitoredInstancesMonitoredInstanceCollection {
    items: outputs.GetAppmgmtControlMonitoredInstancesMonitoredInstanceCollectionItem[];
}

export interface GetAppmgmtControlMonitoredInstancesMonitoredInstanceCollectionItem {
    compartmentId: string;
    displayName: string;
    instanceId: string;
    lifecycleDetails: string;
    managementAgentId: string;
    monitoringState: string;
    state: string;
    timeCreated: string;
    timeUpdated: string;
}

export interface GetArtifactsContainerImageLayer {
    digest: string;
    sizeInBytes: string;
    timeCreated: string;
}

export interface GetArtifactsContainerImageSignaturesContainerImageSignatureCollection {
    items: outputs.GetArtifactsContainerImageSignaturesContainerImageSignatureCollectionItem[];
    remainingItemsCount: number;
}

export interface GetArtifactsContainerImageSignaturesContainerImageSignatureCollectionItem {
    compartmentId: string;
    createdBy: string;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    imageId: string;
    kmsKeyId: string;
    kmsKeyVersionId: string;
    message: string;
    signature: string;
    signingAlgorithm: string;
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
}

export interface GetArtifactsContainerImageSignaturesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetArtifactsContainerImageVersion {
    createdBy: string;
    timeCreated: string;
    version: string;
}

export interface GetArtifactsContainerImagesContainerImageCollection {
    items: outputs.GetArtifactsContainerImagesContainerImageCollectionItem[];
    remainingItemsCount: number;
}

export interface GetArtifactsContainerImagesContainerImageCollectionItem {
    compartmentId: string;
    createdBy: string;
    definedTags: {[key: string]: string};
    digest: string;
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    layers: outputs.GetArtifactsContainerImagesContainerImageCollectionItemLayer[];
    layersSizeInBytes: string;
    manifestSizeInBytes: number;
    pullCount: string;
    repositoryId: string;
    repositoryName: string;
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeLastPulled: string;
    version: string;
    versions: outputs.GetArtifactsContainerImagesContainerImageCollectionItemVersion[];
}

export interface GetArtifactsContainerImagesContainerImageCollectionItemLayer {
    digest: string;
    sizeInBytes: string;
    timeCreated: string;
}

export interface GetArtifactsContainerImagesContainerImageCollectionItemVersion {
    createdBy: string;
    timeCreated: string;
    version: string;
}

export interface GetArtifactsContainerImagesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetArtifactsContainerRepositoriesContainerRepositoryCollection {
    imageCount: number;
    items: outputs.GetArtifactsContainerRepositoriesContainerRepositoryCollectionItem[];
    layerCount: number;
    layersSizeInBytes: string;
    remainingItemsCount: number;
    repositoryCount: number;
}

export interface GetArtifactsContainerRepositoriesContainerRepositoryCollectionItem {
    billableSizeInGbs: string;
    compartmentId: string;
    createdBy: string;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    imageCount: number;
    isImmutable: boolean;
    isPublic: boolean;
    layerCount: number;
    layersSizeInBytes: string;
    namespace: string;
    readmes: outputs.GetArtifactsContainerRepositoriesContainerRepositoryCollectionItemReadme[];
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeLastPushed: string;
}

export interface GetArtifactsContainerRepositoriesContainerRepositoryCollectionItemReadme {
    content: string;
    format: string;
}

export interface GetArtifactsContainerRepositoriesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetArtifactsContainerRepositoryReadme {
    content: string;
    format: string;
}

export interface GetArtifactsGenericArtifactsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetArtifactsGenericArtifactsGenericArtifactCollection {
    items: outputs.GetArtifactsGenericArtifactsGenericArtifactCollectionItem[];
}

export interface GetArtifactsGenericArtifactsGenericArtifactCollectionItem {
    artifactId: string;
    artifactPath: string;
    compartmentId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    repositoryId: string;
    sha256: string;
    sizeInBytes: string;
    state: string;
    timeCreated: string;
    version: string;
}

export interface GetArtifactsRepositoriesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetArtifactsRepositoriesRepositoryCollection {
    items: outputs.GetArtifactsRepositoriesRepositoryCollectionItem[];
}

export interface GetArtifactsRepositoriesRepositoryCollectionItem {
    compartmentId: string;
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    isImmutable: boolean;
    repositoryType: string;
    state: string;
    timeCreated: string;
}

export interface GetAuditEventsAuditEvent {
    cloudEventsVersion: string;
    contentType: string;
    datas: outputs.GetAuditEventsAuditEventData[];
    eventId: string;
    eventTime: string;
    eventType: string;
    eventTypeVersion: string;
    source: string;
}

export interface GetAuditEventsAuditEventData {
    additionalDetails: {[key: string]: string};
    availabilityDomain: string;
    compartmentId: string;
    compartmentName: string;
    definedTags: {[key: string]: string};
    eventGroupingId: string;
    eventName: string;
    freeformTags: {[key: string]: string};
    identities: outputs.GetAuditEventsAuditEventDataIdentity[];
    requests: outputs.GetAuditEventsAuditEventDataRequest[];
    resourceId: string;
    resourceName: string;
    responses: outputs.GetAuditEventsAuditEventDataResponse[];
    stateChanges: outputs.GetAuditEventsAuditEventDataStateChange[];
}

export interface GetAuditEventsAuditEventDataIdentity {
    authType: string;
    callerId: string;
    callerName: string;
    consoleSessionId: string;
    credentials: string;
    ipAddress: string;
    principalId: string;
    principalName: string;
    tenantId: string;
    userAgent: string;
}

export interface GetAuditEventsAuditEventDataRequest {
    action: string;
    headers: {[key: string]: string};
    id: string;
    parameters: {[key: string]: string};
    path: string;
}

export interface GetAuditEventsAuditEventDataResponse {
    headers: {[key: string]: string};
    message: string;
    payload: {[key: string]: string};
    responseTime: string;
    status: string;
}

export interface GetAuditEventsAuditEventDataStateChange {
    current: {[key: string]: string};
    previous: {[key: string]: string};
}

export interface GetAuditEventsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetAutoscalingAutoScalingConfigurationAutoScalingResource {
    id: string;
    type: string;
}

export interface GetAutoscalingAutoScalingConfigurationPolicy {
    capacities: outputs.GetAutoscalingAutoScalingConfigurationPolicyCapacity[];
    displayName: string;
    executionSchedules: outputs.GetAutoscalingAutoScalingConfigurationPolicyExecutionSchedule[];
    id: string;
    isEnabled: boolean;
    policyType: string;
    resourceActions: outputs.GetAutoscalingAutoScalingConfigurationPolicyResourceAction[];
    rules: outputs.GetAutoscalingAutoScalingConfigurationPolicyRule[];
    timeCreated: string;
}

export interface GetAutoscalingAutoScalingConfigurationPolicyCapacity {
    initial: number;
    max: number;
    min: number;
}

export interface GetAutoscalingAutoScalingConfigurationPolicyExecutionSchedule {
    expression: string;
    timezone: string;
    type: string;
}

export interface GetAutoscalingAutoScalingConfigurationPolicyResourceAction {
    action: string;
    actionType: string;
}

export interface GetAutoscalingAutoScalingConfigurationPolicyRule {
    actions: outputs.GetAutoscalingAutoScalingConfigurationPolicyRuleAction[];
    displayName: string;
    id: string;
    metrics: outputs.GetAutoscalingAutoScalingConfigurationPolicyRuleMetric[];
}

export interface GetAutoscalingAutoScalingConfigurationPolicyRuleAction {
    type: string;
    value: number;
}

export interface GetAutoscalingAutoScalingConfigurationPolicyRuleMetric {
    metricType: string;
    thresholds: outputs.GetAutoscalingAutoScalingConfigurationPolicyRuleMetricThreshold[];
}

export interface GetAutoscalingAutoScalingConfigurationPolicyRuleMetricThreshold {
    operator: string;
    value: number;
}

export interface GetAutoscalingAutoScalingConfigurationsAutoScalingConfiguration {
    autoScalingResources: outputs.GetAutoscalingAutoScalingConfigurationsAutoScalingConfigurationAutoScalingResource[];
    compartmentId: string;
    coolDownInSeconds: number;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    isEnabled: boolean;
    maxResourceCount: number;
    minResourceCount: number;
    policies: outputs.GetAutoscalingAutoScalingConfigurationsAutoScalingConfigurationPolicy[];
    timeCreated: string;
}

export interface GetAutoscalingAutoScalingConfigurationsAutoScalingConfigurationAutoScalingResource {
    id: string;
    type: string;
}

export interface GetAutoscalingAutoScalingConfigurationsAutoScalingConfigurationPolicy {
    capacities: outputs.GetAutoscalingAutoScalingConfigurationsAutoScalingConfigurationPolicyCapacity[];
    displayName: string;
    executionSchedules: outputs.GetAutoscalingAutoScalingConfigurationsAutoScalingConfigurationPolicyExecutionSchedule[];
    id: string;
    isEnabled: boolean;
    policyType: string;
    resourceActions: outputs.GetAutoscalingAutoScalingConfigurationsAutoScalingConfigurationPolicyResourceAction[];
    rules: outputs.GetAutoscalingAutoScalingConfigurationsAutoScalingConfigurationPolicyRule[];
    timeCreated: string;
}

export interface GetAutoscalingAutoScalingConfigurationsAutoScalingConfigurationPolicyCapacity {
    initial: number;
    max: number;
    min: number;
}

export interface GetAutoscalingAutoScalingConfigurationsAutoScalingConfigurationPolicyExecutionSchedule {
    expression: string;
    timezone: string;
    type: string;
}

export interface GetAutoscalingAutoScalingConfigurationsAutoScalingConfigurationPolicyResourceAction {
    action: string;
    actionType: string;
}

export interface GetAutoscalingAutoScalingConfigurationsAutoScalingConfigurationPolicyRule {
    actions: outputs.GetAutoscalingAutoScalingConfigurationsAutoScalingConfigurationPolicyRuleAction[];
    displayName: string;
    id: string;
    metrics: outputs.GetAutoscalingAutoScalingConfigurationsAutoScalingConfigurationPolicyRuleMetric[];
}

export interface GetAutoscalingAutoScalingConfigurationsAutoScalingConfigurationPolicyRuleAction {
    type: string;
    value: number;
}

export interface GetAutoscalingAutoScalingConfigurationsAutoScalingConfigurationPolicyRuleMetric {
    metricType: string;
    thresholds: outputs.GetAutoscalingAutoScalingConfigurationsAutoScalingConfigurationPolicyRuleMetricThreshold[];
}

export interface GetAutoscalingAutoScalingConfigurationsAutoScalingConfigurationPolicyRuleMetricThreshold {
    operator: string;
    value: number;
}

export interface GetAutoscalingAutoScalingConfigurationsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetBastionBastionsBastion {
    bastionType: string;
    clientCidrBlockAllowLists: string[];
    compartmentId: string;
    definedTags: {[key: string]: string};
    dnsProxyStatus: string;
    freeformTags: {[key: string]: string};
    id: string;
    lifecycleDetails: string;
    maxSessionTtlInSeconds: number;
    maxSessionsAllowed: number;
    name: string;
    phoneBookEntry: string;
    privateEndpointIpAddress: string;
    state: string;
    staticJumpHostIpAddresses: string[];
    systemTags: {[key: string]: string};
    targetSubnetId: string;
    targetVcnId: string;
    timeCreated: string;
    timeUpdated: string;
}

export interface GetBastionBastionsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetBastionSessionKeyDetail {
    publicKeyContent: string;
}

export interface GetBastionSessionTargetResourceDetail {
    sessionType: string;
    targetResourceDisplayName: string;
    targetResourceFqdn: string;
    targetResourceId: string;
    targetResourceOperatingSystemUserName: string;
    targetResourcePort: number;
    targetResourcePrivateIpAddress: string;
}

export interface GetBastionSessionsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetBastionSessionsSession {
    bastionId: string;
    bastionName: string;
    bastionPublicHostKeyInfo: string;
    bastionUserName: string;
    displayName: string;
    id: string;
    keyDetails: outputs.GetBastionSessionsSessionKeyDetail[];
    keyType: string;
    lifecycleDetails: string;
    sessionTtlInSeconds: number;
    sshMetadata: {[key: string]: string};
    state: string;
    targetResourceDetails: outputs.GetBastionSessionsSessionTargetResourceDetail[];
    timeCreated: string;
    timeUpdated: string;
}

export interface GetBastionSessionsSessionKeyDetail {
    publicKeyContent: string;
}

export interface GetBastionSessionsSessionTargetResourceDetail {
    sessionType: string;
    targetResourceDisplayName: string;
    targetResourceFqdn: string;
    targetResourceId: string;
    targetResourceOperatingSystemUserName: string;
    targetResourcePort: number;
    targetResourcePrivateIpAddress: string;
}

export interface GetBdsAutoScalingConfigurationPolicy {
    policyType: string;
    rules: outputs.GetBdsAutoScalingConfigurationPolicyRule[];
}

export interface GetBdsAutoScalingConfigurationPolicyDetail {
    actionType: string;
    policyType: string;
    scaleDownConfigs: outputs.GetBdsAutoScalingConfigurationPolicyDetailScaleDownConfig[];
    scaleInConfigs: outputs.GetBdsAutoScalingConfigurationPolicyDetailScaleInConfig[];
    scaleOutConfigs: outputs.GetBdsAutoScalingConfigurationPolicyDetailScaleOutConfig[];
    scaleUpConfigs: outputs.GetBdsAutoScalingConfigurationPolicyDetailScaleUpConfig[];
    scheduleDetails: outputs.GetBdsAutoScalingConfigurationPolicyDetailScheduleDetail[];
    timezone: string;
    triggerType: string;
}

export interface GetBdsAutoScalingConfigurationPolicyDetailScaleDownConfig {
    memoryStepSize: number;
    metrics: outputs.GetBdsAutoScalingConfigurationPolicyDetailScaleDownConfigMetric[];
    minMemoryPerNode: number;
    minOcpusPerNode: number;
    ocpuStepSize: number;
}

export interface GetBdsAutoScalingConfigurationPolicyDetailScaleDownConfigMetric {
    metricType: string;
    thresholds: outputs.GetBdsAutoScalingConfigurationPolicyDetailScaleDownConfigMetricThreshold[];
}

export interface GetBdsAutoScalingConfigurationPolicyDetailScaleDownConfigMetricThreshold {
    durationInMinutes: number;
    operator: string;
    value: number;
}

export interface GetBdsAutoScalingConfigurationPolicyDetailScaleInConfig {
    metrics: outputs.GetBdsAutoScalingConfigurationPolicyDetailScaleInConfigMetric[];
    minNodeCount: number;
    stepSize: number;
}

export interface GetBdsAutoScalingConfigurationPolicyDetailScaleInConfigMetric {
    metricType: string;
    thresholds: outputs.GetBdsAutoScalingConfigurationPolicyDetailScaleInConfigMetricThreshold[];
}

export interface GetBdsAutoScalingConfigurationPolicyDetailScaleInConfigMetricThreshold {
    durationInMinutes: number;
    operator: string;
    value: number;
}

export interface GetBdsAutoScalingConfigurationPolicyDetailScaleOutConfig {
    maxNodeCount: number;
    metrics: outputs.GetBdsAutoScalingConfigurationPolicyDetailScaleOutConfigMetric[];
    stepSize: number;
}

export interface GetBdsAutoScalingConfigurationPolicyDetailScaleOutConfigMetric {
    metricType: string;
    thresholds: outputs.GetBdsAutoScalingConfigurationPolicyDetailScaleOutConfigMetricThreshold[];
}

export interface GetBdsAutoScalingConfigurationPolicyDetailScaleOutConfigMetricThreshold {
    durationInMinutes: number;
    operator: string;
    value: number;
}

export interface GetBdsAutoScalingConfigurationPolicyDetailScaleUpConfig {
    maxMemoryPerNode: number;
    maxOcpusPerNode: number;
    memoryStepSize: number;
    metrics: outputs.GetBdsAutoScalingConfigurationPolicyDetailScaleUpConfigMetric[];
    ocpuStepSize: number;
}

export interface GetBdsAutoScalingConfigurationPolicyDetailScaleUpConfigMetric {
    metricType: string;
    thresholds: outputs.GetBdsAutoScalingConfigurationPolicyDetailScaleUpConfigMetricThreshold[];
}

export interface GetBdsAutoScalingConfigurationPolicyDetailScaleUpConfigMetricThreshold {
    durationInMinutes: number;
    operator: string;
    value: number;
}

export interface GetBdsAutoScalingConfigurationPolicyDetailScheduleDetail {
    scheduleType: string;
    timeAndHorizontalScalingConfigs: outputs.GetBdsAutoScalingConfigurationPolicyDetailScheduleDetailTimeAndHorizontalScalingConfig[];
    timeAndVerticalScalingConfigs: outputs.GetBdsAutoScalingConfigurationPolicyDetailScheduleDetailTimeAndVerticalScalingConfig[];
}

export interface GetBdsAutoScalingConfigurationPolicyDetailScheduleDetailTimeAndHorizontalScalingConfig {
    targetNodeCount: number;
    timeRecurrence: string;
}

export interface GetBdsAutoScalingConfigurationPolicyDetailScheduleDetailTimeAndVerticalScalingConfig {
    targetMemoryPerNode: number;
    targetOcpusPerNode: number;
    targetShape: string;
    timeRecurrence: string;
}

export interface GetBdsAutoScalingConfigurationPolicyRule {
    action: string;
    metrics: outputs.GetBdsAutoScalingConfigurationPolicyRuleMetric[];
}

export interface GetBdsAutoScalingConfigurationPolicyRuleMetric {
    metricType: string;
    thresholds: outputs.GetBdsAutoScalingConfigurationPolicyRuleMetricThreshold[];
}

export interface GetBdsAutoScalingConfigurationPolicyRuleMetricThreshold {
    durationInMinutes: number;
    operator: string;
    value: number;
}

export interface GetBdsAutoScalingConfigurationsAutoScalingConfiguration {
    bdsInstanceId: string;
    clusterAdminPassword: string;
    displayName: string;
    id: string;
    isEnabled: boolean;
    nodeType: string;
    policies: outputs.GetBdsAutoScalingConfigurationsAutoScalingConfigurationPolicy[];
    policyDetails: outputs.GetBdsAutoScalingConfigurationsAutoScalingConfigurationPolicyDetail[];
    state: string;
    timeCreated: string;
    timeUpdated: string;
}

export interface GetBdsAutoScalingConfigurationsAutoScalingConfigurationPolicy {
    policyType: string;
    rules: outputs.GetBdsAutoScalingConfigurationsAutoScalingConfigurationPolicyRule[];
}

export interface GetBdsAutoScalingConfigurationsAutoScalingConfigurationPolicyDetail {
    actionType: string;
    policyType: string;
    scaleDownConfigs: outputs.GetBdsAutoScalingConfigurationsAutoScalingConfigurationPolicyDetailScaleDownConfig[];
    scaleInConfigs: outputs.GetBdsAutoScalingConfigurationsAutoScalingConfigurationPolicyDetailScaleInConfig[];
    scaleOutConfigs: outputs.GetBdsAutoScalingConfigurationsAutoScalingConfigurationPolicyDetailScaleOutConfig[];
    scaleUpConfigs: outputs.GetBdsAutoScalingConfigurationsAutoScalingConfigurationPolicyDetailScaleUpConfig[];
    scheduleDetails: outputs.GetBdsAutoScalingConfigurationsAutoScalingConfigurationPolicyDetailScheduleDetail[];
    timezone: string;
    triggerType: string;
}

export interface GetBdsAutoScalingConfigurationsAutoScalingConfigurationPolicyDetailScaleDownConfig {
    memoryStepSize: number;
    metrics: outputs.GetBdsAutoScalingConfigurationsAutoScalingConfigurationPolicyDetailScaleDownConfigMetric[];
    minMemoryPerNode: number;
    minOcpusPerNode: number;
    ocpuStepSize: number;
}

export interface GetBdsAutoScalingConfigurationsAutoScalingConfigurationPolicyDetailScaleDownConfigMetric {
    metricType: string;
    thresholds: outputs.GetBdsAutoScalingConfigurationsAutoScalingConfigurationPolicyDetailScaleDownConfigMetricThreshold[];
}

export interface GetBdsAutoScalingConfigurationsAutoScalingConfigurationPolicyDetailScaleDownConfigMetricThreshold {
    durationInMinutes: number;
    operator: string;
    value: number;
}

export interface GetBdsAutoScalingConfigurationsAutoScalingConfigurationPolicyDetailScaleInConfig {
    metrics: outputs.GetBdsAutoScalingConfigurationsAutoScalingConfigurationPolicyDetailScaleInConfigMetric[];
    minNodeCount: number;
    stepSize: number;
}

export interface GetBdsAutoScalingConfigurationsAutoScalingConfigurationPolicyDetailScaleInConfigMetric {
    metricType: string;
    thresholds: outputs.GetBdsAutoScalingConfigurationsAutoScalingConfigurationPolicyDetailScaleInConfigMetricThreshold[];
}

export interface GetBdsAutoScalingConfigurationsAutoScalingConfigurationPolicyDetailScaleInConfigMetricThreshold {
    durationInMinutes: number;
    operator: string;
    value: number;
}

export interface GetBdsAutoScalingConfigurationsAutoScalingConfigurationPolicyDetailScaleOutConfig {
    maxNodeCount: number;
    metrics: outputs.GetBdsAutoScalingConfigurationsAutoScalingConfigurationPolicyDetailScaleOutConfigMetric[];
    stepSize: number;
}

export interface GetBdsAutoScalingConfigurationsAutoScalingConfigurationPolicyDetailScaleOutConfigMetric {
    metricType: string;
    thresholds: outputs.GetBdsAutoScalingConfigurationsAutoScalingConfigurationPolicyDetailScaleOutConfigMetricThreshold[];
}

export interface GetBdsAutoScalingConfigurationsAutoScalingConfigurationPolicyDetailScaleOutConfigMetricThreshold {
    durationInMinutes: number;
    operator: string;
    value: number;
}

export interface GetBdsAutoScalingConfigurationsAutoScalingConfigurationPolicyDetailScaleUpConfig {
    maxMemoryPerNode: number;
    maxOcpusPerNode: number;
    memoryStepSize: number;
    metrics: outputs.GetBdsAutoScalingConfigurationsAutoScalingConfigurationPolicyDetailScaleUpConfigMetric[];
    ocpuStepSize: number;
}

export interface GetBdsAutoScalingConfigurationsAutoScalingConfigurationPolicyDetailScaleUpConfigMetric {
    metricType: string;
    thresholds: outputs.GetBdsAutoScalingConfigurationsAutoScalingConfigurationPolicyDetailScaleUpConfigMetricThreshold[];
}

export interface GetBdsAutoScalingConfigurationsAutoScalingConfigurationPolicyDetailScaleUpConfigMetricThreshold {
    durationInMinutes: number;
    operator: string;
    value: number;
}

export interface GetBdsAutoScalingConfigurationsAutoScalingConfigurationPolicyDetailScheduleDetail {
    scheduleType: string;
    timeAndHorizontalScalingConfigs: outputs.GetBdsAutoScalingConfigurationsAutoScalingConfigurationPolicyDetailScheduleDetailTimeAndHorizontalScalingConfig[];
    timeAndVerticalScalingConfigs: outputs.GetBdsAutoScalingConfigurationsAutoScalingConfigurationPolicyDetailScheduleDetailTimeAndVerticalScalingConfig[];
}

export interface GetBdsAutoScalingConfigurationsAutoScalingConfigurationPolicyDetailScheduleDetailTimeAndHorizontalScalingConfig {
    targetNodeCount: number;
    timeRecurrence: string;
}

export interface GetBdsAutoScalingConfigurationsAutoScalingConfigurationPolicyDetailScheduleDetailTimeAndVerticalScalingConfig {
    targetMemoryPerNode: number;
    targetOcpusPerNode: number;
    targetShape: string;
    timeRecurrence: string;
}

export interface GetBdsAutoScalingConfigurationsAutoScalingConfigurationPolicyRule {
    action: string;
    metrics: outputs.GetBdsAutoScalingConfigurationsAutoScalingConfigurationPolicyRuleMetric[];
}

export interface GetBdsAutoScalingConfigurationsAutoScalingConfigurationPolicyRuleMetric {
    metricType: string;
    thresholds: outputs.GetBdsAutoScalingConfigurationsAutoScalingConfigurationPolicyRuleMetricThreshold[];
}

export interface GetBdsAutoScalingConfigurationsAutoScalingConfigurationPolicyRuleMetricThreshold {
    durationInMinutes: number;
    operator: string;
    value: number;
}

export interface GetBdsAutoScalingConfigurationsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetBdsBdsInstanceApiKeysBdsApiKey {
    bdsInstanceId: string;
    defaultRegion: string;
    fingerprint: string;
    id: string;
    keyAlias: string;
    passphrase: string;
    pemfilepath: string;
    state: string;
    tenantId: string;
    timeCreated: string;
    userId: string;
}

export interface GetBdsBdsInstanceApiKeysFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetBdsBdsInstanceCloudSqlDetail {
    blockVolumeSizeInGbs: string;
    ipAddress: string;
    isKerberosMappedToDatabaseUsers: boolean;
    kerberosDetails: outputs.GetBdsBdsInstanceCloudSqlDetailKerberosDetail[];
    memoryInGbs: number;
    nvmes: number;
    ocpus: number;
    shape: string;
}

export interface GetBdsBdsInstanceCloudSqlDetailKerberosDetail {
    keytabFile: string;
    principalName: string;
}

export interface GetBdsBdsInstanceClusterDetail {
    ambariUrl: string;
    bdCellVersion: string;
    bdaVersion: string;
    bdmVersion: string;
    bdsVersion: string;
    bigDataManagerUrl: string;
    clouderaManagerUrl: string;
    csqlCellVersion: string;
    dbVersion: string;
    hueServerUrl: string;
    jupyterHubUrl: string;
    odhVersion: string;
    osVersion: string;
    timeCreated: string;
    timeRefreshed: string;
}

export interface GetBdsBdsInstanceComputeOnlyWorkerNode {
    blockVolumeSizeInGbs: string;
    numberOfNodes: number;
    shape: string;
    shapeConfigs: outputs.GetBdsBdsInstanceComputeOnlyWorkerNodeShapeConfig[];
    subnetId: string;
}

export interface GetBdsBdsInstanceComputeOnlyWorkerNodeShapeConfig {
    memoryInGbs: number;
    nvmes: number;
    ocpus: number;
}

export interface GetBdsBdsInstanceEdgeNode {
    blockVolumeSizeInGbs: string;
    numberOfNodes: number;
    shape: string;
    shapeConfigs: outputs.GetBdsBdsInstanceEdgeNodeShapeConfig[];
    subnetId: string;
}

export interface GetBdsBdsInstanceEdgeNodeShapeConfig {
    memoryInGbs: number;
    nvmes: number;
    ocpus: number;
}

export interface GetBdsBdsInstanceGetOsPatchFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetBdsBdsInstanceGetOsPatchTargetPackage {
    packageName: string;
    relatedCvEs: string[];
    targetVersion: string;
    updateType: string;
}

export interface GetBdsBdsInstanceKafkaBrokerNode {
    blockVolumeSizeInGbs: string;
    numberOfKafkaNodes: number;
    shape: string;
    shapeConfigs: outputs.GetBdsBdsInstanceKafkaBrokerNodeShapeConfig[];
    subnetId: string;
}

export interface GetBdsBdsInstanceKafkaBrokerNodeShapeConfig {
    memoryInGbs: number;
    nvmes: number;
    ocpus: number;
}

export interface GetBdsBdsInstanceListOsPatchesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetBdsBdsInstanceListOsPatchesOsPatch {
    bdsInstanceId: string;
    osPatchVersion: string;
    releaseDate: string;
}

export interface GetBdsBdsInstanceMasterNode {
    blockVolumeSizeInGbs: string;
    numberOfNodes: number;
    shape: string;
    shapeConfigs: outputs.GetBdsBdsInstanceMasterNodeShapeConfig[];
    subnetId: string;
}

export interface GetBdsBdsInstanceMasterNodeShapeConfig {
    memoryInGbs: number;
    nvmes: number;
    ocpus: number;
}

export interface GetBdsBdsInstanceMetastoreConfigsBdsMetastoreConfiguration {
    activateTrigger: number;
    bdsApiKeyId: string;
    bdsApiKeyPassphrase: string;
    bdsInstanceId: string;
    clusterAdminPassword: string;
    displayName: string;
    id: string;
    metastoreId: string;
    metastoreType: string;
    state: string;
    timeCreated: string;
    timeUpdated: string;
}

export interface GetBdsBdsInstanceMetastoreConfigsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetBdsBdsInstanceNetworkConfig {
    cidrBlock: string;
    isNatGatewayRequired: boolean;
}

export interface GetBdsBdsInstanceNode {
    attachedBlockVolumes: outputs.GetBdsBdsInstanceNodeAttachedBlockVolume[];
    availabilityDomain: string;
    displayName: string;
    faultDomain: string;
    hostname: string;
    imageId: string;
    instanceId: string;
    ipAddress: string;
    isRebootRequired: boolean;
    localDisksTotalSizeInGbs: number;
    memoryInGbs: number;
    nodeType: string;
    nvmes: number;
    ocpus: number;
    osVersion: string;
    shape: string;
    sshFingerprint: string;
    state: string;
    subnetId: string;
    timeCreated: string;
    timeMaintenanceRebootDue: string;
}

export interface GetBdsBdsInstanceNodeAttachedBlockVolume {
    volumeAttachmentId: string;
    volumeSizeInGbs: string;
}

export interface GetBdsBdsInstancePatchHistoriesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetBdsBdsInstancePatchHistoriesPatchHistory {
    patchType: string;
    state: string;
    timeUpdated: string;
    version: string;
}

export interface GetBdsBdsInstancePatchesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetBdsBdsInstancePatchesPatch {
    timeReleased: string;
    version: string;
}

export interface GetBdsBdsInstanceUtilNode {
    blockVolumeSizeInGbs: string;
    numberOfNodes: number;
    shape: string;
    shapeConfigs: outputs.GetBdsBdsInstanceUtilNodeShapeConfig[];
    subnetId: string;
}

export interface GetBdsBdsInstanceUtilNodeShapeConfig {
    memoryInGbs: number;
    nvmes: number;
    ocpus: number;
}

export interface GetBdsBdsInstanceWorkerNode {
    blockVolumeSizeInGbs: string;
    numberOfNodes: number;
    shape: string;
    shapeConfigs: outputs.GetBdsBdsInstanceWorkerNodeShapeConfig[];
    subnetId: string;
}

export interface GetBdsBdsInstanceWorkerNodeShapeConfig {
    memoryInGbs: number;
    nvmes: number;
    ocpus: number;
}

export interface GetBdsBdsInstancesBdsInstance {
    bootstrapScriptUrl: string;
    cloudSqlDetails: outputs.GetBdsBdsInstancesBdsInstanceCloudSqlDetail[];
    clusterAdminPassword: string;
    clusterDetails: outputs.GetBdsBdsInstancesBdsInstanceClusterDetail[];
    clusterProfile: string;
    clusterPublicKey: string;
    clusterVersion: string;
    compartmentId: string;
    computeOnlyWorkerNodes: outputs.GetBdsBdsInstancesBdsInstanceComputeOnlyWorkerNode[];
    createdBy: string;
    definedTags: {[key: string]: string};
    displayName: string;
    edgeNodes: outputs.GetBdsBdsInstancesBdsInstanceEdgeNode[];
    freeformTags: {[key: string]: string};
    id: string;
    ignoreExistingNodesShapes: string[];
    isCloudSqlConfigured: boolean;
    isForceStopJobs: boolean;
    isHighAvailability: boolean;
    isKafkaConfigured: boolean;
    isSecure: boolean;
    kafkaBrokerNodes: outputs.GetBdsBdsInstancesBdsInstanceKafkaBrokerNode[];
    kerberosRealmName: string;
    kmsKeyId: string;
    masterNodes: outputs.GetBdsBdsInstancesBdsInstanceMasterNode[];
    networkConfigs: outputs.GetBdsBdsInstancesBdsInstanceNetworkConfig[];
    nodes: outputs.GetBdsBdsInstancesBdsInstanceNode[];
    numberOfNodes: number;
    numberOfNodesRequiringMaintenanceReboot: number;
    osPatchVersion: string;
    state: string;
    timeCreated: string;
    timeUpdated: string;
    utilNodes: outputs.GetBdsBdsInstancesBdsInstanceUtilNode[];
    workerNodes: outputs.GetBdsBdsInstancesBdsInstanceWorkerNode[];
}

export interface GetBdsBdsInstancesBdsInstanceCloudSqlDetail {
    blockVolumeSizeInGbs: string;
    ipAddress: string;
    isKerberosMappedToDatabaseUsers: boolean;
    kerberosDetails: outputs.GetBdsBdsInstancesBdsInstanceCloudSqlDetailKerberosDetail[];
    memoryInGbs: number;
    nvmes: number;
    ocpus: number;
    shape: string;
}

export interface GetBdsBdsInstancesBdsInstanceCloudSqlDetailKerberosDetail {
    keytabFile: string;
    principalName: string;
}

export interface GetBdsBdsInstancesBdsInstanceClusterDetail {
    ambariUrl: string;
    bdCellVersion: string;
    bdaVersion: string;
    bdmVersion: string;
    bdsVersion: string;
    bigDataManagerUrl: string;
    clouderaManagerUrl: string;
    csqlCellVersion: string;
    dbVersion: string;
    hueServerUrl: string;
    jupyterHubUrl: string;
    odhVersion: string;
    osVersion: string;
    timeCreated: string;
    timeRefreshed: string;
}

export interface GetBdsBdsInstancesBdsInstanceComputeOnlyWorkerNode {
    blockVolumeSizeInGbs: string;
    numberOfNodes: number;
    shape: string;
    shapeConfigs: outputs.GetBdsBdsInstancesBdsInstanceComputeOnlyWorkerNodeShapeConfig[];
    subnetId: string;
}

export interface GetBdsBdsInstancesBdsInstanceComputeOnlyWorkerNodeShapeConfig {
    memoryInGbs: number;
    nvmes: number;
    ocpus: number;
}

export interface GetBdsBdsInstancesBdsInstanceEdgeNode {
    blockVolumeSizeInGbs: string;
    numberOfNodes: number;
    shape: string;
    shapeConfigs: outputs.GetBdsBdsInstancesBdsInstanceEdgeNodeShapeConfig[];
    subnetId: string;
}

export interface GetBdsBdsInstancesBdsInstanceEdgeNodeShapeConfig {
    memoryInGbs: number;
    nvmes: number;
    ocpus: number;
}

export interface GetBdsBdsInstancesBdsInstanceKafkaBrokerNode {
    blockVolumeSizeInGbs: string;
    numberOfKafkaNodes: number;
    shape: string;
    shapeConfigs: outputs.GetBdsBdsInstancesBdsInstanceKafkaBrokerNodeShapeConfig[];
    subnetId: string;
}

export interface GetBdsBdsInstancesBdsInstanceKafkaBrokerNodeShapeConfig {
    memoryInGbs: number;
    nvmes: number;
    ocpus: number;
}

export interface GetBdsBdsInstancesBdsInstanceMasterNode {
    blockVolumeSizeInGbs: string;
    numberOfNodes: number;
    shape: string;
    shapeConfigs: outputs.GetBdsBdsInstancesBdsInstanceMasterNodeShapeConfig[];
    subnetId: string;
}

export interface GetBdsBdsInstancesBdsInstanceMasterNodeShapeConfig {
    memoryInGbs: number;
    nvmes: number;
    ocpus: number;
}

export interface GetBdsBdsInstancesBdsInstanceNetworkConfig {
    cidrBlock: string;
    isNatGatewayRequired: boolean;
}

export interface GetBdsBdsInstancesBdsInstanceNode {
    attachedBlockVolumes: outputs.GetBdsBdsInstancesBdsInstanceNodeAttachedBlockVolume[];
    availabilityDomain: string;
    displayName: string;
    faultDomain: string;
    hostname: string;
    imageId: string;
    instanceId: string;
    ipAddress: string;
    isRebootRequired: boolean;
    localDisksTotalSizeInGbs: number;
    memoryInGbs: number;
    nodeType: string;
    nvmes: number;
    ocpus: number;
    osVersion: string;
    shape: string;
    sshFingerprint: string;
    state: string;
    subnetId: string;
    timeCreated: string;
    timeMaintenanceRebootDue: string;
}

export interface GetBdsBdsInstancesBdsInstanceNodeAttachedBlockVolume {
    volumeAttachmentId: string;
    volumeSizeInGbs: string;
}

export interface GetBdsBdsInstancesBdsInstanceUtilNode {
    blockVolumeSizeInGbs: string;
    numberOfNodes: number;
    shape: string;
    shapeConfigs: outputs.GetBdsBdsInstancesBdsInstanceUtilNodeShapeConfig[];
    subnetId: string;
}

export interface GetBdsBdsInstancesBdsInstanceUtilNodeShapeConfig {
    memoryInGbs: number;
    nvmes: number;
    ocpus: number;
}

export interface GetBdsBdsInstancesBdsInstanceWorkerNode {
    blockVolumeSizeInGbs: string;
    numberOfNodes: number;
    shape: string;
    shapeConfigs: outputs.GetBdsBdsInstancesBdsInstanceWorkerNodeShapeConfig[];
    subnetId: string;
}

export interface GetBdsBdsInstancesBdsInstanceWorkerNodeShapeConfig {
    memoryInGbs: number;
    nvmes: number;
    ocpus: number;
}

export interface GetBdsBdsInstancesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetBlockchainBlockchainPlatformComponentDetail {
    osns: outputs.GetBlockchainBlockchainPlatformComponentDetailOsn[];
    peers: outputs.GetBlockchainBlockchainPlatformComponentDetailPeer[];
}

export interface GetBlockchainBlockchainPlatformComponentDetailOsn {
    ad: string;
    ocpuAllocationParams: outputs.GetBlockchainBlockchainPlatformComponentDetailOsnOcpuAllocationParam[];
    osnKey: string;
    state: string;
}

export interface GetBlockchainBlockchainPlatformComponentDetailOsnOcpuAllocationParam {
    ocpuAllocationNumber: number;
}

export interface GetBlockchainBlockchainPlatformComponentDetailPeer {
    ad: string;
    alias: string;
    host: string;
    ocpuAllocationParams: outputs.GetBlockchainBlockchainPlatformComponentDetailPeerOcpuAllocationParam[];
    peerKey: string;
    role: string;
    state: string;
}

export interface GetBlockchainBlockchainPlatformComponentDetailPeerOcpuAllocationParam {
    ocpuAllocationNumber: number;
}

export interface GetBlockchainBlockchainPlatformHostOcpuUtilizationInfo {
    host: string;
    ocpuCapacityNumber: number;
    ocpuUtilizationNumber: number;
}

export interface GetBlockchainBlockchainPlatformPatchesBlockchainPlatformPatchCollection {
    items: outputs.GetBlockchainBlockchainPlatformPatchesBlockchainPlatformPatchCollectionItem[];
}

export interface GetBlockchainBlockchainPlatformPatchesBlockchainPlatformPatchCollectionItem {
    items: outputs.GetBlockchainBlockchainPlatformPatchesBlockchainPlatformPatchCollectionItemItem[];
}

export interface GetBlockchainBlockchainPlatformPatchesBlockchainPlatformPatchCollectionItemItem {
    id: string;
    patchInfoUrl: string;
    serviceVersion: string;
    timePatchDue: string;
}

export interface GetBlockchainBlockchainPlatformPatchesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetBlockchainBlockchainPlatformReplica {
    caCount: number;
    consoleCount: number;
    proxyCount: number;
}

export interface GetBlockchainBlockchainPlatformsBlockchainPlatformCollection {
    items: outputs.GetBlockchainBlockchainPlatformsBlockchainPlatformCollectionItem[];
}

export interface GetBlockchainBlockchainPlatformsBlockchainPlatformCollectionItem {
    caCertArchiveText: string;
    compartmentId: string;
    componentDetails: outputs.GetBlockchainBlockchainPlatformsBlockchainPlatformCollectionItemComponentDetail[];
    computeShape: string;
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    federatedUserId: string;
    freeformTags: {[key: string]: string};
    hostOcpuUtilizationInfos: outputs.GetBlockchainBlockchainPlatformsBlockchainPlatformCollectionItemHostOcpuUtilizationInfo[];
    id: string;
    idcsAccessToken: string;
    isByol: boolean;
    isMultiAd: boolean;
    lifecycleDetails: string;
    loadBalancerShape: string;
    platformRole: string;
    platformShapeType: string;
    platformVersion: string;
    replicas: outputs.GetBlockchainBlockchainPlatformsBlockchainPlatformCollectionItemReplica[];
    serviceEndpoint: string;
    serviceVersion: string;
    state: string;
    storageSizeInTbs: number;
    storageUsedInTbs: number;
    timeCreated: string;
    timeUpdated: string;
    totalOcpuCapacity: number;
}

export interface GetBlockchainBlockchainPlatformsBlockchainPlatformCollectionItemComponentDetail {
    osns: outputs.GetBlockchainBlockchainPlatformsBlockchainPlatformCollectionItemComponentDetailOsn[];
    peers: outputs.GetBlockchainBlockchainPlatformsBlockchainPlatformCollectionItemComponentDetailPeer[];
}

export interface GetBlockchainBlockchainPlatformsBlockchainPlatformCollectionItemComponentDetailOsn {
    ad: string;
    ocpuAllocationParams: outputs.GetBlockchainBlockchainPlatformsBlockchainPlatformCollectionItemComponentDetailOsnOcpuAllocationParam[];
    osnKey: string;
    state: string;
}

export interface GetBlockchainBlockchainPlatformsBlockchainPlatformCollectionItemComponentDetailOsnOcpuAllocationParam {
    ocpuAllocationNumber: number;
}

export interface GetBlockchainBlockchainPlatformsBlockchainPlatformCollectionItemComponentDetailPeer {
    ad: string;
    alias: string;
    host: string;
    ocpuAllocationParams: outputs.GetBlockchainBlockchainPlatformsBlockchainPlatformCollectionItemComponentDetailPeerOcpuAllocationParam[];
    peerKey: string;
    role: string;
    state: string;
}

export interface GetBlockchainBlockchainPlatformsBlockchainPlatformCollectionItemComponentDetailPeerOcpuAllocationParam {
    ocpuAllocationNumber: number;
}

export interface GetBlockchainBlockchainPlatformsBlockchainPlatformCollectionItemHostOcpuUtilizationInfo {
    host: string;
    ocpuCapacityNumber: number;
    ocpuUtilizationNumber: number;
}

export interface GetBlockchainBlockchainPlatformsBlockchainPlatformCollectionItemReplica {
    caCount: number;
    consoleCount: number;
    proxyCount: number;
}

export interface GetBlockchainBlockchainPlatformsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetBlockchainOsnOcpuAllocationParam {
    ocpuAllocationNumber: number;
}

export interface GetBlockchainOsnsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetBlockchainOsnsOsnCollection {
    items: outputs.GetBlockchainOsnsOsnCollectionItem[];
}

export interface GetBlockchainOsnsOsnCollectionItem {
    ad: string;
    blockchainPlatformId: string;
    ocpuAllocationParams: outputs.GetBlockchainOsnsOsnCollectionItemOcpuAllocationParam[];
    osnKey: string;
    state: string;
}

export interface GetBlockchainOsnsOsnCollectionItemOcpuAllocationParam {
    ocpuAllocationNumber: number;
}

export interface GetBlockchainPeerOcpuAllocationParam {
    ocpuAllocationNumber: number;
}

export interface GetBlockchainPeersFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetBlockchainPeersPeerCollection {
    items: outputs.GetBlockchainPeersPeerCollectionItem[];
}

export interface GetBlockchainPeersPeerCollectionItem {
    ad: string;
    alias: string;
    blockchainPlatformId: string;
    host: string;
    ocpuAllocationParams: outputs.GetBlockchainPeersPeerCollectionItemOcpuAllocationParam[];
    peerKey: string;
    role: string;
    state: string;
}

export interface GetBlockchainPeersPeerCollectionItemOcpuAllocationParam {
    ocpuAllocationNumber: number;
}

export interface GetBudgetAlertRulesAlertRule {
    budgetId: string;
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    message: string;
    recipients: string;
    state: string;
    threshold: number;
    thresholdType: string;
    timeCreated: string;
    timeUpdated: string;
    type: string;
    version: number;
}

export interface GetBudgetAlertRulesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetBudgetBudgetsBudget {
    actualSpend: number;
    alertRuleCount: number;
    amount: number;
    budgetProcessingPeriodStartOffset: number;
    compartmentId: string;
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    endDate: string;
    forecastedSpend: number;
    freeformTags: {[key: string]: string};
    id: string;
    processingPeriodType: string;
    resetPeriod: string;
    startDate: string;
    state: string;
    targetCompartmentId: string;
    targetType: string;
    targets: string[];
    timeCreated: string;
    timeSpendComputed: string;
    timeUpdated: string;
    version: number;
}

export interface GetBudgetBudgetsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCapacityManagementInternalOccAvailabilityCatalogsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCapacityManagementInternalOccAvailabilityCatalogsOccAvailabilityCatalogCollection {
    items: outputs.GetCapacityManagementInternalOccAvailabilityCatalogsOccAvailabilityCatalogCollectionItem[];
}

export interface GetCapacityManagementInternalOccAvailabilityCatalogsOccAvailabilityCatalogCollectionItem {
    catalogState: string;
    compartmentId: string;
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    lifecycleDetails: string;
    metadataDetails: outputs.GetCapacityManagementInternalOccAvailabilityCatalogsOccAvailabilityCatalogCollectionItemMetadataDetail[];
    namespace: string;
    occCustomerGroupId: string;
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
}

export interface GetCapacityManagementInternalOccAvailabilityCatalogsOccAvailabilityCatalogCollectionItemMetadataDetail {
    formatVersion: string;
}

export interface GetCapacityManagementOccAvailabilityCatalogDetail {
    availableQuantity: string;
    catalogId: string;
    dateExpectedCapacityHandover: string;
    dateFinalCustomerOrder: string;
    namespace: string;
    resourceName: string;
    resourceType: string;
    unit: string;
    workloadType: string;
}

export interface GetCapacityManagementOccAvailabilityCatalogMetadataDetail {
    formatVersion: string;
}

export interface GetCapacityManagementOccAvailabilityCatalogOccAvailabilitiesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCapacityManagementOccAvailabilityCatalogOccAvailabilitiesOccAvailabilityCollection {
    items: outputs.GetCapacityManagementOccAvailabilityCatalogOccAvailabilitiesOccAvailabilityCollectionItem[];
}

export interface GetCapacityManagementOccAvailabilityCatalogOccAvailabilitiesOccAvailabilityCollectionItem {
    availableQuantity: string;
    catalogId: string;
    dateExpectedCapacityHandover: string;
    dateFinalCustomerOrder: string;
    namespace: string;
    resourceName: string;
    resourceType: string;
    unit: string;
    workloadType: string;
}

export interface GetCapacityManagementOccAvailabilityCatalogsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCapacityManagementOccAvailabilityCatalogsOccAvailabilityCatalogCollection {
    items: outputs.GetCapacityManagementOccAvailabilityCatalogsOccAvailabilityCatalogCollectionItem[];
}

export interface GetCapacityManagementOccAvailabilityCatalogsOccAvailabilityCatalogCollectionItem {
    base64encodedCatalogDetails: string;
    catalogState: string;
    compartmentId: string;
    definedTags: {[key: string]: string};
    description: string;
    details: outputs.GetCapacityManagementOccAvailabilityCatalogsOccAvailabilityCatalogCollectionItemDetail[];
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    lifecycleDetails: string;
    metadataDetails: outputs.GetCapacityManagementOccAvailabilityCatalogsOccAvailabilityCatalogCollectionItemMetadataDetail[];
    namespace: string;
    occCustomerGroupId: string;
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
}

export interface GetCapacityManagementOccAvailabilityCatalogsOccAvailabilityCatalogCollectionItemDetail {
    availableQuantity: string;
    catalogId: string;
    dateExpectedCapacityHandover: string;
    dateFinalCustomerOrder: string;
    namespace: string;
    resourceName: string;
    resourceType: string;
    unit: string;
    workloadType: string;
}

export interface GetCapacityManagementOccAvailabilityCatalogsOccAvailabilityCatalogCollectionItemMetadataDetail {
    formatVersion: string;
}

export interface GetCapacityManagementOccCapacityRequestDetail {
    actualHandoverQuantity: string;
    dateActualHandover: string;
    dateExpectedHandover: string;
    demandQuantity: string;
    expectedHandoverQuantity: string;
    resourceName: string;
    resourceType: string;
    workloadType: string;
}

export interface GetCapacityManagementOccCapacityRequestPatchOperation {
    from: string;
    operation: string;
    position: string;
    selectedItem: string;
    selection: string;
    value: {[key: string]: string};
}

export interface GetCapacityManagementOccCapacityRequestsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCapacityManagementOccCapacityRequestsOccCapacityRequestCollection {
    items: outputs.GetCapacityManagementOccCapacityRequestsOccCapacityRequestCollectionItem[];
}

export interface GetCapacityManagementOccCapacityRequestsOccCapacityRequestCollectionItem {
    availabilityDomain: string;
    compartmentId: string;
    dateExpectedCapacityHandover: string;
    definedTags: {[key: string]: string};
    description: string;
    details: outputs.GetCapacityManagementOccCapacityRequestsOccCapacityRequestCollectionItemDetail[];
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    lifecycleDetails: string;
    namespace: string;
    occAvailabilityCatalogId: string;
    occCustomerGroupId: string;
    patchOperations: outputs.GetCapacityManagementOccCapacityRequestsOccCapacityRequestCollectionItemPatchOperation[];
    region: string;
    requestState: string;
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
}

export interface GetCapacityManagementOccCapacityRequestsOccCapacityRequestCollectionItemDetail {
    actualHandoverQuantity: string;
    dateActualHandover: string;
    dateExpectedHandover: string;
    demandQuantity: string;
    expectedHandoverQuantity: string;
    resourceName: string;
    resourceType: string;
    workloadType: string;
}

export interface GetCapacityManagementOccCapacityRequestsOccCapacityRequestCollectionItemPatchOperation {
    from: string;
    operation: string;
    position: string;
    selectedItem: string;
    selection: string;
    value: {[key: string]: string};
}

export interface GetCapacityManagementOccCustomerGroupCustomersList {
    description: string;
    displayName: string;
    occCustomerGroupId: string;
    status: string;
    tenancyId: string;
}

export interface GetCapacityManagementOccCustomerGroupsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCapacityManagementOccCustomerGroupsOccCustomerGroupCollection {
    items: outputs.GetCapacityManagementOccCustomerGroupsOccCustomerGroupCollectionItem[];
}

export interface GetCapacityManagementOccCustomerGroupsOccCustomerGroupCollectionItem {
    compartmentId: string;
    customersLists: outputs.GetCapacityManagementOccCustomerGroupsOccCustomerGroupCollectionItemCustomersList[];
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    lifecycleDetails: string;
    state: string;
    status: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
}

export interface GetCapacityManagementOccCustomerGroupsOccCustomerGroupCollectionItemCustomersList {
    description: string;
    displayName: string;
    occCustomerGroupId: string;
    status: string;
    tenancyId: string;
}

export interface GetCertificatesManagementAssociationsAssociationCollection {
    items: outputs.GetCertificatesManagementAssociationsAssociationCollectionItem[];
}

export interface GetCertificatesManagementAssociationsAssociationCollectionItem {
    associatedResourceId: string;
    associationType: string;
    certificatesResourceId: string;
    compartmentId: string;
    id: string;
    name: string;
    state: string;
    timeCreated: string;
}

export interface GetCertificatesManagementAssociationsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCertificatesManagementCaBundlesCaBundleCollection {
    items: outputs.GetCertificatesManagementCaBundlesCaBundleCollectionItem[];
}

export interface GetCertificatesManagementCaBundlesCaBundleCollectionItem {
    caBundlePem: string;
    compartmentId: string;
    definedTags: {[key: string]: string};
    description: string;
    freeformTags: {[key: string]: string};
    id: string;
    lifecycleDetails: string;
    name: string;
    state: string;
    timeCreated: string;
}

export interface GetCertificatesManagementCaBundlesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCertificatesManagementCertificateAuthoritiesCertificateAuthorityCollection {
    items: outputs.GetCertificatesManagementCertificateAuthoritiesCertificateAuthorityCollectionItem[];
}

export interface GetCertificatesManagementCertificateAuthoritiesCertificateAuthorityCollectionItem {
    certificateAuthorityConfigs: outputs.GetCertificatesManagementCertificateAuthoritiesCertificateAuthorityCollectionItemCertificateAuthorityConfig[];
    certificateAuthorityRules: outputs.GetCertificatesManagementCertificateAuthoritiesCertificateAuthorityCollectionItemCertificateAuthorityRule[];
    certificateRevocationListDetails: outputs.GetCertificatesManagementCertificateAuthoritiesCertificateAuthorityCollectionItemCertificateRevocationListDetail[];
    compartmentId: string;
    configType: string;
    currentVersions: outputs.GetCertificatesManagementCertificateAuthoritiesCertificateAuthorityCollectionItemCurrentVersion[];
    definedTags: {[key: string]: string};
    description: string;
    freeformTags: {[key: string]: string};
    id: string;
    issuerCertificateAuthorityId: string;
    kmsKeyId: string;
    lifecycleDetails: string;
    name: string;
    signingAlgorithm: string;
    state: string;
    subjects: outputs.GetCertificatesManagementCertificateAuthoritiesCertificateAuthorityCollectionItemSubject[];
    timeCreated: string;
    timeOfDeletion: string;
}

export interface GetCertificatesManagementCertificateAuthoritiesCertificateAuthorityCollectionItemCertificateAuthorityConfig {
    configType: string;
    issuerCertificateAuthorityId: string;
    signingAlgorithm: string;
    subjects: outputs.GetCertificatesManagementCertificateAuthoritiesCertificateAuthorityCollectionItemCertificateAuthorityConfigSubject[];
    validities: outputs.GetCertificatesManagementCertificateAuthoritiesCertificateAuthorityCollectionItemCertificateAuthorityConfigValidity[];
    versionName: string;
}

export interface GetCertificatesManagementCertificateAuthoritiesCertificateAuthorityCollectionItemCertificateAuthorityConfigSubject {
    commonName: string;
    country: string;
    distinguishedNameQualifier: string;
    domainComponent: string;
    generationQualifier: string;
    givenName: string;
    initials: string;
    localityName: string;
    organization: string;
    organizationalUnit: string;
    pseudonym: string;
    serialNumber: string;
    stateOrProvinceName: string;
    street: string;
    surname: string;
    title: string;
    userId: string;
}

export interface GetCertificatesManagementCertificateAuthoritiesCertificateAuthorityCollectionItemCertificateAuthorityConfigValidity {
    timeOfValidityNotAfter: string;
    timeOfValidityNotBefore: string;
}

export interface GetCertificatesManagementCertificateAuthoritiesCertificateAuthorityCollectionItemCertificateAuthorityRule {
    certificateAuthorityMaxValidityDuration: string;
    leafCertificateMaxValidityDuration: string;
    ruleType: string;
}

export interface GetCertificatesManagementCertificateAuthoritiesCertificateAuthorityCollectionItemCertificateRevocationListDetail {
    customFormattedUrls: string[];
    objectStorageConfigs: outputs.GetCertificatesManagementCertificateAuthoritiesCertificateAuthorityCollectionItemCertificateRevocationListDetailObjectStorageConfig[];
}

export interface GetCertificatesManagementCertificateAuthoritiesCertificateAuthorityCollectionItemCertificateRevocationListDetailObjectStorageConfig {
    objectStorageBucketName: string;
    objectStorageNamespace: string;
    objectStorageObjectNameFormat: string;
}

export interface GetCertificatesManagementCertificateAuthoritiesCertificateAuthorityCollectionItemCurrentVersion {
    certificateAuthorityId: string;
    issuerCaVersionNumber: string;
    revocationStatuses: outputs.GetCertificatesManagementCertificateAuthoritiesCertificateAuthorityCollectionItemCurrentVersionRevocationStatus[];
    serialNumber: string;
    stages: string[];
    timeCreated: string;
    timeOfDeletion: string;
    validities: outputs.GetCertificatesManagementCertificateAuthoritiesCertificateAuthorityCollectionItemCurrentVersionValidity[];
    versionName: string;
    versionNumber: string;
}

export interface GetCertificatesManagementCertificateAuthoritiesCertificateAuthorityCollectionItemCurrentVersionRevocationStatus {
    revocationReason: string;
    timeOfRevocation: string;
}

export interface GetCertificatesManagementCertificateAuthoritiesCertificateAuthorityCollectionItemCurrentVersionValidity {
    timeOfValidityNotAfter: string;
    timeOfValidityNotBefore: string;
}

export interface GetCertificatesManagementCertificateAuthoritiesCertificateAuthorityCollectionItemSubject {
    commonName: string;
    country: string;
    distinguishedNameQualifier: string;
    domainComponent: string;
    generationQualifier: string;
    givenName: string;
    initials: string;
    localityName: string;
    organization: string;
    organizationalUnit: string;
    pseudonym: string;
    serialNumber: string;
    stateOrProvinceName: string;
    street: string;
    surname: string;
    title: string;
    userId: string;
}

export interface GetCertificatesManagementCertificateAuthoritiesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCertificatesManagementCertificateAuthorityCertificateAuthorityConfig {
    configType: string;
    issuerCertificateAuthorityId: string;
    signingAlgorithm: string;
    subjects: outputs.GetCertificatesManagementCertificateAuthorityCertificateAuthorityConfigSubject[];
    validities: outputs.GetCertificatesManagementCertificateAuthorityCertificateAuthorityConfigValidity[];
    versionName: string;
}

export interface GetCertificatesManagementCertificateAuthorityCertificateAuthorityConfigSubject {
    commonName: string;
    country: string;
    distinguishedNameQualifier: string;
    domainComponent: string;
    generationQualifier: string;
    givenName: string;
    initials: string;
    localityName: string;
    organization: string;
    organizationalUnit: string;
    pseudonym: string;
    serialNumber: string;
    stateOrProvinceName: string;
    street: string;
    surname: string;
    title: string;
    userId: string;
}

export interface GetCertificatesManagementCertificateAuthorityCertificateAuthorityConfigValidity {
    timeOfValidityNotAfter: string;
    timeOfValidityNotBefore: string;
}

export interface GetCertificatesManagementCertificateAuthorityCertificateAuthorityRule {
    certificateAuthorityMaxValidityDuration: string;
    leafCertificateMaxValidityDuration: string;
    ruleType: string;
}

export interface GetCertificatesManagementCertificateAuthorityCertificateRevocationListDetail {
    customFormattedUrls: string[];
    objectStorageConfigs: outputs.GetCertificatesManagementCertificateAuthorityCertificateRevocationListDetailObjectStorageConfig[];
}

export interface GetCertificatesManagementCertificateAuthorityCertificateRevocationListDetailObjectStorageConfig {
    objectStorageBucketName: string;
    objectStorageNamespace: string;
    objectStorageObjectNameFormat: string;
}

export interface GetCertificatesManagementCertificateAuthorityCurrentVersion {
    certificateAuthorityId: string;
    issuerCaVersionNumber: string;
    revocationStatuses: outputs.GetCertificatesManagementCertificateAuthorityCurrentVersionRevocationStatus[];
    serialNumber: string;
    stages: string[];
    timeCreated: string;
    timeOfDeletion: string;
    validities: outputs.GetCertificatesManagementCertificateAuthorityCurrentVersionValidity[];
    versionName: string;
    versionNumber: string;
}

export interface GetCertificatesManagementCertificateAuthorityCurrentVersionRevocationStatus {
    revocationReason: string;
    timeOfRevocation: string;
}

export interface GetCertificatesManagementCertificateAuthorityCurrentVersionValidity {
    timeOfValidityNotAfter: string;
    timeOfValidityNotBefore: string;
}

export interface GetCertificatesManagementCertificateAuthoritySubject {
    commonName: string;
    country: string;
    distinguishedNameQualifier: string;
    domainComponent: string;
    generationQualifier: string;
    givenName: string;
    initials: string;
    localityName: string;
    organization: string;
    organizationalUnit: string;
    pseudonym: string;
    serialNumber: string;
    stateOrProvinceName: string;
    street: string;
    surname: string;
    title: string;
    userId: string;
}

export interface GetCertificatesManagementCertificateAuthorityVersionRevocationStatus {
    revocationReason: string;
    timeOfRevocation: string;
}

export interface GetCertificatesManagementCertificateAuthorityVersionSubjectAlternativeName {
    type: string;
    value: string;
}

export interface GetCertificatesManagementCertificateAuthorityVersionValidity {
    timeOfValidityNotAfter: string;
    timeOfValidityNotBefore: string;
}

export interface GetCertificatesManagementCertificateAuthorityVersionsCertificateAuthorityVersionCollection {
    items: outputs.GetCertificatesManagementCertificateAuthorityVersionsCertificateAuthorityVersionCollectionItem[];
}

export interface GetCertificatesManagementCertificateAuthorityVersionsCertificateAuthorityVersionCollectionItem {
    certificateAuthorityId: string;
    issuerCaVersionNumber: string;
    revocationStatuses: outputs.GetCertificatesManagementCertificateAuthorityVersionsCertificateAuthorityVersionCollectionItemRevocationStatus[];
    serialNumber: string;
    stages: string[];
    timeCreated: string;
    timeOfDeletion: string;
    validities: outputs.GetCertificatesManagementCertificateAuthorityVersionsCertificateAuthorityVersionCollectionItemValidity[];
    versionName: string;
    versionNumber: string;
}

export interface GetCertificatesManagementCertificateAuthorityVersionsCertificateAuthorityVersionCollectionItemRevocationStatus {
    revocationReason: string;
    timeOfRevocation: string;
}

export interface GetCertificatesManagementCertificateAuthorityVersionsCertificateAuthorityVersionCollectionItemValidity {
    timeOfValidityNotAfter: string;
    timeOfValidityNotBefore: string;
}

export interface GetCertificatesManagementCertificateAuthorityVersionsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCertificatesManagementCertificateCertificateConfig {
    certificateProfileType: string;
    configType: string;
    csrPem: string;
    issuerCertificateAuthorityId: string;
    keyAlgorithm: string;
    signatureAlgorithm: string;
    subjectAlternativeNames: outputs.GetCertificatesManagementCertificateCertificateConfigSubjectAlternativeName[];
    subjects: outputs.GetCertificatesManagementCertificateCertificateConfigSubject[];
    validities: outputs.GetCertificatesManagementCertificateCertificateConfigValidity[];
    versionName: string;
}

export interface GetCertificatesManagementCertificateCertificateConfigSubject {
    commonName: string;
    country: string;
    distinguishedNameQualifier: string;
    domainComponent: string;
    generationQualifier: string;
    givenName: string;
    initials: string;
    localityName: string;
    organization: string;
    organizationalUnit: string;
    pseudonym: string;
    serialNumber: string;
    stateOrProvinceName: string;
    street: string;
    surname: string;
    title: string;
    userId: string;
}

export interface GetCertificatesManagementCertificateCertificateConfigSubjectAlternativeName {
    type: string;
    value: string;
}

export interface GetCertificatesManagementCertificateCertificateConfigValidity {
    timeOfValidityNotAfter: string;
    timeOfValidityNotBefore: string;
}

export interface GetCertificatesManagementCertificateCertificateRevocationListDetail {
    customFormattedUrls: string[];
    objectStorageConfigs: outputs.GetCertificatesManagementCertificateCertificateRevocationListDetailObjectStorageConfig[];
}

export interface GetCertificatesManagementCertificateCertificateRevocationListDetailObjectStorageConfig {
    objectStorageBucketName: string;
    objectStorageNamespace: string;
    objectStorageObjectNameFormat: string;
}

export interface GetCertificatesManagementCertificateCertificateRule {
    advanceRenewalPeriod: string;
    renewalInterval: string;
    ruleType: string;
}

export interface GetCertificatesManagementCertificateCurrentVersion {
    certificateId: string;
    issuerCaVersionNumber: string;
    revocationStatuses: outputs.GetCertificatesManagementCertificateCurrentVersionRevocationStatus[];
    serialNumber: string;
    stages: string[];
    subjectAlternativeNames: outputs.GetCertificatesManagementCertificateCurrentVersionSubjectAlternativeName[];
    timeCreated: string;
    timeOfDeletion: string;
    validities: outputs.GetCertificatesManagementCertificateCurrentVersionValidity[];
    versionName: string;
    versionNumber: string;
}

export interface GetCertificatesManagementCertificateCurrentVersionRevocationStatus {
    revocationReason: string;
    timeOfRevocation: string;
}

export interface GetCertificatesManagementCertificateCurrentVersionSubjectAlternativeName {
    type: string;
    value: string;
}

export interface GetCertificatesManagementCertificateCurrentVersionValidity {
    timeOfValidityNotAfter: string;
    timeOfValidityNotBefore: string;
}

export interface GetCertificatesManagementCertificateSubject {
    commonName: string;
    country: string;
    distinguishedNameQualifier: string;
    domainComponent: string;
    generationQualifier: string;
    givenName: string;
    initials: string;
    localityName: string;
    organization: string;
    organizationalUnit: string;
    pseudonym: string;
    serialNumber: string;
    stateOrProvinceName: string;
    street: string;
    surname: string;
    title: string;
    userId: string;
}

export interface GetCertificatesManagementCertificateVersionRevocationStatus {
    revocationReason: string;
    timeOfRevocation: string;
}

export interface GetCertificatesManagementCertificateVersionSubjectAlternativeName {
    type: string;
    value: string;
}

export interface GetCertificatesManagementCertificateVersionValidity {
    timeOfValidityNotAfter: string;
    timeOfValidityNotBefore: string;
}

export interface GetCertificatesManagementCertificateVersionsCertificateVersionCollection {
    items: outputs.GetCertificatesManagementCertificateVersionsCertificateVersionCollectionItem[];
}

export interface GetCertificatesManagementCertificateVersionsCertificateVersionCollectionItem {
    certificateId: string;
    issuerCaVersionNumber: string;
    revocationStatuses: outputs.GetCertificatesManagementCertificateVersionsCertificateVersionCollectionItemRevocationStatus[];
    serialNumber: string;
    stages: string[];
    subjectAlternativeNames: outputs.GetCertificatesManagementCertificateVersionsCertificateVersionCollectionItemSubjectAlternativeName[];
    timeCreated: string;
    timeOfDeletion: string;
    validities: outputs.GetCertificatesManagementCertificateVersionsCertificateVersionCollectionItemValidity[];
    versionName: string;
    versionNumber: string;
}

export interface GetCertificatesManagementCertificateVersionsCertificateVersionCollectionItemRevocationStatus {
    revocationReason: string;
    timeOfRevocation: string;
}

export interface GetCertificatesManagementCertificateVersionsCertificateVersionCollectionItemSubjectAlternativeName {
    type: string;
    value: string;
}

export interface GetCertificatesManagementCertificateVersionsCertificateVersionCollectionItemValidity {
    timeOfValidityNotAfter: string;
    timeOfValidityNotBefore: string;
}

export interface GetCertificatesManagementCertificateVersionsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCertificatesManagementCertificatesCertificateCollection {
    items: outputs.GetCertificatesManagementCertificatesCertificateCollectionItem[];
}

export interface GetCertificatesManagementCertificatesCertificateCollectionItem {
    certificateConfigs: outputs.GetCertificatesManagementCertificatesCertificateCollectionItemCertificateConfig[];
    certificateProfileType: string;
    certificateRevocationListDetails: outputs.GetCertificatesManagementCertificatesCertificateCollectionItemCertificateRevocationListDetail[];
    certificateRules: outputs.GetCertificatesManagementCertificatesCertificateCollectionItemCertificateRule[];
    compartmentId: string;
    configType: string;
    currentVersions: outputs.GetCertificatesManagementCertificatesCertificateCollectionItemCurrentVersion[];
    definedTags: {[key: string]: string};
    description: string;
    freeformTags: {[key: string]: string};
    id: string;
    issuerCertificateAuthorityId: string;
    keyAlgorithm: string;
    lifecycleDetails: string;
    name: string;
    signatureAlgorithm: string;
    state: string;
    subjects: outputs.GetCertificatesManagementCertificatesCertificateCollectionItemSubject[];
    timeCreated: string;
    timeOfDeletion: string;
}

export interface GetCertificatesManagementCertificatesCertificateCollectionItemCertificateConfig {
    certificateProfileType: string;
    configType: string;
    csrPem: string;
    issuerCertificateAuthorityId: string;
    keyAlgorithm: string;
    signatureAlgorithm: string;
    subjectAlternativeNames: outputs.GetCertificatesManagementCertificatesCertificateCollectionItemCertificateConfigSubjectAlternativeName[];
    subjects: outputs.GetCertificatesManagementCertificatesCertificateCollectionItemCertificateConfigSubject[];
    validities: outputs.GetCertificatesManagementCertificatesCertificateCollectionItemCertificateConfigValidity[];
    versionName: string;
}

export interface GetCertificatesManagementCertificatesCertificateCollectionItemCertificateConfigSubject {
    commonName: string;
    country: string;
    distinguishedNameQualifier: string;
    domainComponent: string;
    generationQualifier: string;
    givenName: string;
    initials: string;
    localityName: string;
    organization: string;
    organizationalUnit: string;
    pseudonym: string;
    serialNumber: string;
    stateOrProvinceName: string;
    street: string;
    surname: string;
    title: string;
    userId: string;
}

export interface GetCertificatesManagementCertificatesCertificateCollectionItemCertificateConfigSubjectAlternativeName {
    type: string;
    value: string;
}

export interface GetCertificatesManagementCertificatesCertificateCollectionItemCertificateConfigValidity {
    timeOfValidityNotAfter: string;
    timeOfValidityNotBefore: string;
}

export interface GetCertificatesManagementCertificatesCertificateCollectionItemCertificateRevocationListDetail {
    customFormattedUrls: string[];
    objectStorageConfigs: outputs.GetCertificatesManagementCertificatesCertificateCollectionItemCertificateRevocationListDetailObjectStorageConfig[];
}

export interface GetCertificatesManagementCertificatesCertificateCollectionItemCertificateRevocationListDetailObjectStorageConfig {
    objectStorageBucketName: string;
    objectStorageNamespace: string;
    objectStorageObjectNameFormat: string;
}

export interface GetCertificatesManagementCertificatesCertificateCollectionItemCertificateRule {
    advanceRenewalPeriod: string;
    renewalInterval: string;
    ruleType: string;
}

export interface GetCertificatesManagementCertificatesCertificateCollectionItemCurrentVersion {
    certificateId: string;
    issuerCaVersionNumber: string;
    revocationStatuses: outputs.GetCertificatesManagementCertificatesCertificateCollectionItemCurrentVersionRevocationStatus[];
    serialNumber: string;
    stages: string[];
    subjectAlternativeNames: outputs.GetCertificatesManagementCertificatesCertificateCollectionItemCurrentVersionSubjectAlternativeName[];
    timeCreated: string;
    timeOfDeletion: string;
    validities: outputs.GetCertificatesManagementCertificatesCertificateCollectionItemCurrentVersionValidity[];
    versionName: string;
    versionNumber: string;
}

export interface GetCertificatesManagementCertificatesCertificateCollectionItemCurrentVersionRevocationStatus {
    revocationReason: string;
    timeOfRevocation: string;
}

export interface GetCertificatesManagementCertificatesCertificateCollectionItemCurrentVersionSubjectAlternativeName {
    type: string;
    value: string;
}

export interface GetCertificatesManagementCertificatesCertificateCollectionItemCurrentVersionValidity {
    timeOfValidityNotAfter: string;
    timeOfValidityNotBefore: string;
}

export interface GetCertificatesManagementCertificatesCertificateCollectionItemSubject {
    commonName: string;
    country: string;
    distinguishedNameQualifier: string;
    domainComponent: string;
    generationQualifier: string;
    givenName: string;
    initials: string;
    localityName: string;
    organization: string;
    organizationalUnit: string;
    pseudonym: string;
    serialNumber: string;
    stateOrProvinceName: string;
    street: string;
    surname: string;
    title: string;
    userId: string;
}

export interface GetCertificatesManagementCertificatesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCloudBridgeAgentDependenciesAgentDependencyCollection {
    items: outputs.GetCloudBridgeAgentDependenciesAgentDependencyCollectionItem[];
}

export interface GetCloudBridgeAgentDependenciesAgentDependencyCollectionItem {
    bucket: string;
    checksum: string;
    compartmentId: string;
    definedTags: {[key: string]: string};
    dependencyName: string;
    dependencyVersion: string;
    description: string;
    displayName: string;
    eTag: string;
    freeformTags: {[key: string]: string};
    id: string;
    lifecycleDetails: string;
    namespace: string;
    object: string;
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
}

export interface GetCloudBridgeAgentDependenciesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCloudBridgeAgentPluginList {
    agentId: string;
    definedTags: {[key: string]: string};
    freeformTags: {[key: string]: string};
    lifecycleDetails: string;
    name: string;
    pluginVersion: string;
    state: string;
    timeCreated: string;
    timeUpdated: string;
}

export interface GetCloudBridgeAgentsAgentCollection {
    items: outputs.GetCloudBridgeAgentsAgentCollectionItem[];
}

export interface GetCloudBridgeAgentsAgentCollectionItem {
    agentPubKey: string;
    agentType: string;
    agentVersion: string;
    compartmentId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    environmentId: string;
    freeformTags: {[key: string]: string};
    heartBeatStatus: string;
    id: string;
    lifecycleDetails: string;
    osVersion: string;
    pluginLists: outputs.GetCloudBridgeAgentsAgentCollectionItemPluginList[];
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeExpireAgentKeyInMs: string;
    timeLastSyncReceived: string;
    timeUpdated: string;
}

export interface GetCloudBridgeAgentsAgentCollectionItemPluginList {
    agentId: string;
    definedTags: {[key: string]: string};
    freeformTags: {[key: string]: string};
    lifecycleDetails: string;
    name: string;
    pluginVersion: string;
    state: string;
    timeCreated: string;
    timeUpdated: string;
}

export interface GetCloudBridgeAgentsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCloudBridgeApplianceImageItem {
    checksum: string;
    definedTags: {[key: string]: string};
    displayName: string;
    downloadUrl: string;
    fileName: string;
    format: string;
    freeformTags: {[key: string]: string};
    id: string;
    platform: string;
    sizeInMbs: string;
    state: string;
    timeCreated: string;
    timeUpdated: string;
    version: string;
}

export interface GetCloudBridgeApplianceImagesApplianceImageCollection {
    items: outputs.GetCloudBridgeApplianceImagesApplianceImageCollectionItem[];
}

export interface GetCloudBridgeApplianceImagesApplianceImageCollectionItem {
    checksum: string;
    definedTags: {[key: string]: string};
    displayName: string;
    downloadUrl: string;
    fileName: string;
    format: string;
    freeformTags: {[key: string]: string};
    id: string;
    platform: string;
    sizeInMbs: string;
    state: string;
    timeCreated: string;
    timeUpdated: string;
    version: string;
}

export interface GetCloudBridgeApplianceImagesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCloudBridgeAssetCompute {
    connectedNetworks: number;
    coresCount: number;
    cpuModel: string;
    description: string;
    disks: outputs.GetCloudBridgeAssetComputeDisk[];
    disksCount: number;
    dnsName: string;
    firmware: string;
    gpuDevices: outputs.GetCloudBridgeAssetComputeGpuDevice[];
    gpuDevicesCount: number;
    guestState: string;
    hardwareVersion: string;
    hostName: string;
    isPmemEnabled: boolean;
    isTpmEnabled: boolean;
    latencySensitivity: string;
    memoryInMbs: string;
    nics: outputs.GetCloudBridgeAssetComputeNic[];
    nicsCount: number;
    nvdimmControllers: outputs.GetCloudBridgeAssetComputeNvdimmController[];
    nvdimms: outputs.GetCloudBridgeAssetComputeNvdimm[];
    operatingSystem: string;
    operatingSystemVersion: string;
    pmemInMbs: string;
    powerState: string;
    primaryIp: string;
    scsiControllers: outputs.GetCloudBridgeAssetComputeScsiController[];
    storageProvisionedInMbs: string;
    threadsPerCoreCount: number;
}

export interface GetCloudBridgeAssetComputeDisk {
    bootOrder: number;
    location: string;
    name: string;
    persistentMode: string;
    sizeInMbs: string;
    uuid: string;
    uuidLun: string;
}

export interface GetCloudBridgeAssetComputeGpuDevice {
    coresCount: number;
    description: string;
    manufacturer: string;
    memoryInMbs: string;
    name: string;
}

export interface GetCloudBridgeAssetComputeNic {
    ipAddresses: string[];
    label: string;
    macAddress: string;
    macAddressType: string;
    networkName: string;
    switchName: string;
}

export interface GetCloudBridgeAssetComputeNvdimm {
    controllerKey: number;
    label: string;
    unitNumber: number;
}

export interface GetCloudBridgeAssetComputeNvdimmController {
    busNumber: number;
    label: string;
}

export interface GetCloudBridgeAssetComputeScsiController {
    label: string;
    sharedBus: string;
    unitNumber: number;
}

export interface GetCloudBridgeAssetSourceDiscoveryCredential {
    secretId: string;
    type: string;
}

export interface GetCloudBridgeAssetSourceReplicationCredential {
    secretId: string;
    type: string;
}

export interface GetCloudBridgeAssetSourcesAssetSourceCollection {
    items: outputs.GetCloudBridgeAssetSourcesAssetSourceCollectionItem[];
}

export interface GetCloudBridgeAssetSourcesAssetSourceCollectionItem {
    areHistoricalMetricsCollected: boolean;
    areRealtimeMetricsCollected: boolean;
    assetsCompartmentId: string;
    compartmentId: string;
    definedTags: {[key: string]: string};
    discoveryCredentials: outputs.GetCloudBridgeAssetSourcesAssetSourceCollectionItemDiscoveryCredential[];
    discoveryScheduleId: string;
    displayName: string;
    environmentId: string;
    freeformTags: {[key: string]: string};
    id: string;
    inventoryId: string;
    lifecycleDetails: string;
    replicationCredentials: outputs.GetCloudBridgeAssetSourcesAssetSourceCollectionItemReplicationCredential[];
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
    type: string;
    vcenterEndpoint: string;
}

export interface GetCloudBridgeAssetSourcesAssetSourceCollectionItemDiscoveryCredential {
    secretId: string;
    type: string;
}

export interface GetCloudBridgeAssetSourcesAssetSourceCollectionItemReplicationCredential {
    secretId: string;
    type: string;
}

export interface GetCloudBridgeAssetSourcesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCloudBridgeAssetVm {
    hypervisorHost: string;
    hypervisorVendor: string;
    hypervisorVersion: string;
}

export interface GetCloudBridgeAssetVmwareVcenter {
    dataCenter: string;
    vcenterKey: string;
    vcenterVersion: string;
}

export interface GetCloudBridgeAssetVmwareVm {
    cluster: string;
    customerFields: string[];
    customerTags: outputs.GetCloudBridgeAssetVmwareVmCustomerTag[];
    faultToleranceBandwidth: number;
    faultToleranceSecondaryLatency: number;
    faultToleranceState: string;
    instanceUuid: string;
    isDisksCbtEnabled: boolean;
    isDisksUuidEnabled: boolean;
    path: string;
    vmwareToolsStatus: string;
}

export interface GetCloudBridgeAssetVmwareVmCustomerTag {
    description: string;
    name: string;
}

export interface GetCloudBridgeAssetsAssetCollection {
    items: outputs.GetCloudBridgeAssetsAssetCollectionItem[];
}

export interface GetCloudBridgeAssetsAssetCollectionItem {
    assetSourceIds: string[];
    assetType: string;
    compartmentId: string;
    computes: outputs.GetCloudBridgeAssetsAssetCollectionItemCompute[];
    definedTags: {[key: string]: string};
    displayName: string;
    externalAssetKey: string;
    freeformTags: {[key: string]: string};
    id: string;
    inventoryId: string;
    sourceKey: string;
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
    vms: outputs.GetCloudBridgeAssetsAssetCollectionItemVm[];
    vmwareVcenters: outputs.GetCloudBridgeAssetsAssetCollectionItemVmwareVcenter[];
    vmwareVms: outputs.GetCloudBridgeAssetsAssetCollectionItemVmwareVm[];
}

export interface GetCloudBridgeAssetsAssetCollectionItemCompute {
    connectedNetworks: number;
    coresCount: number;
    cpuModel: string;
    description: string;
    disks: outputs.GetCloudBridgeAssetsAssetCollectionItemComputeDisk[];
    disksCount: number;
    dnsName: string;
    firmware: string;
    gpuDevices: outputs.GetCloudBridgeAssetsAssetCollectionItemComputeGpuDevice[];
    gpuDevicesCount: number;
    guestState: string;
    hardwareVersion: string;
    hostName: string;
    isPmemEnabled: boolean;
    isTpmEnabled: boolean;
    latencySensitivity: string;
    memoryInMbs: string;
    nics: outputs.GetCloudBridgeAssetsAssetCollectionItemComputeNic[];
    nicsCount: number;
    nvdimmControllers: outputs.GetCloudBridgeAssetsAssetCollectionItemComputeNvdimmController[];
    nvdimms: outputs.GetCloudBridgeAssetsAssetCollectionItemComputeNvdimm[];
    operatingSystem: string;
    operatingSystemVersion: string;
    pmemInMbs: string;
    powerState: string;
    primaryIp: string;
    scsiControllers: outputs.GetCloudBridgeAssetsAssetCollectionItemComputeScsiController[];
    storageProvisionedInMbs: string;
    threadsPerCoreCount: number;
}

export interface GetCloudBridgeAssetsAssetCollectionItemComputeDisk {
    bootOrder: number;
    location: string;
    name: string;
    persistentMode: string;
    sizeInMbs: string;
    uuid: string;
    uuidLun: string;
}

export interface GetCloudBridgeAssetsAssetCollectionItemComputeGpuDevice {
    coresCount: number;
    description: string;
    manufacturer: string;
    memoryInMbs: string;
    name: string;
}

export interface GetCloudBridgeAssetsAssetCollectionItemComputeNic {
    ipAddresses: string[];
    label: string;
    macAddress: string;
    macAddressType: string;
    networkName: string;
    switchName: string;
}

export interface GetCloudBridgeAssetsAssetCollectionItemComputeNvdimm {
    controllerKey: number;
    label: string;
    unitNumber: number;
}

export interface GetCloudBridgeAssetsAssetCollectionItemComputeNvdimmController {
    busNumber: number;
    label: string;
}

export interface GetCloudBridgeAssetsAssetCollectionItemComputeScsiController {
    label: string;
    sharedBus: string;
    unitNumber: number;
}

export interface GetCloudBridgeAssetsAssetCollectionItemVm {
    hypervisorHost: string;
    hypervisorVendor: string;
    hypervisorVersion: string;
}

export interface GetCloudBridgeAssetsAssetCollectionItemVmwareVcenter {
    dataCenter: string;
    vcenterKey: string;
    vcenterVersion: string;
}

export interface GetCloudBridgeAssetsAssetCollectionItemVmwareVm {
    cluster: string;
    customerFields: string[];
    customerTags: outputs.GetCloudBridgeAssetsAssetCollectionItemVmwareVmCustomerTag[];
    faultToleranceBandwidth: number;
    faultToleranceSecondaryLatency: number;
    faultToleranceState: string;
    instanceUuid: string;
    isDisksCbtEnabled: boolean;
    isDisksUuidEnabled: boolean;
    path: string;
    vmwareToolsStatus: string;
}

export interface GetCloudBridgeAssetsAssetCollectionItemVmwareVmCustomerTag {
    description: string;
    name: string;
}

export interface GetCloudBridgeAssetsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCloudBridgeDiscoverySchedulesDiscoveryScheduleCollection {
    items: outputs.GetCloudBridgeDiscoverySchedulesDiscoveryScheduleCollectionItem[];
}

export interface GetCloudBridgeDiscoverySchedulesDiscoveryScheduleCollectionItem {
    compartmentId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    executionRecurrences: string;
    freeformTags: {[key: string]: string};
    id: string;
    lifecycleDetails: string;
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
}

export interface GetCloudBridgeDiscoverySchedulesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCloudBridgeEnvironmentsEnvironmentCollection {
    items: outputs.GetCloudBridgeEnvironmentsEnvironmentCollectionItem[];
}

export interface GetCloudBridgeEnvironmentsEnvironmentCollectionItem {
    compartmentId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    lifecycleDetails: string;
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
}

export interface GetCloudBridgeEnvironmentsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCloudBridgeInventoriesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCloudBridgeInventoriesInventoryCollection {
    items: outputs.GetCloudBridgeInventoriesInventoryCollectionItem[];
}

export interface GetCloudBridgeInventoriesInventoryCollectionItem {
    compartmentId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    lifecycleDetails: string;
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
}

export interface GetCloudGuardAdhocQueriesAdhocQueryCollection {
    items: outputs.GetCloudGuardAdhocQueriesAdhocQueryCollectionItem[];
}

export interface GetCloudGuardAdhocQueriesAdhocQueryCollectionItem {
    adhocQueryDetails: outputs.GetCloudGuardAdhocQueriesAdhocQueryCollectionItemAdhocQueryDetail[];
    adhocQueryRegionalDetails: outputs.GetCloudGuardAdhocQueriesAdhocQueryCollectionItemAdhocQueryRegionalDetail[];
    compartmentId: string;
    definedTags: {[key: string]: string};
    errorMessage: string;
    freeformTags: {[key: string]: string};
    id: string;
    state: string;
    status: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
}

export interface GetCloudGuardAdhocQueriesAdhocQueryCollectionItemAdhocQueryDetail {
    adhocQueryResources: outputs.GetCloudGuardAdhocQueriesAdhocQueryCollectionItemAdhocQueryDetailAdhocQueryResource[];
    query: string;
}

export interface GetCloudGuardAdhocQueriesAdhocQueryCollectionItemAdhocQueryDetailAdhocQueryResource {
    region: string;
    resourceIds: string[];
    resourceType: string;
}

export interface GetCloudGuardAdhocQueriesAdhocQueryCollectionItemAdhocQueryRegionalDetail {
    expectedCount: string;
    expiredCount: string;
    failedCount: string;
    region: string;
    regionalError: string;
    regionalStatus: string;
    succeededCount: string;
}

export interface GetCloudGuardAdhocQueriesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCloudGuardAdhocQueryAdhocQueryDetail {
    adhocQueryResources: outputs.GetCloudGuardAdhocQueryAdhocQueryDetailAdhocQueryResource[];
    query: string;
}

export interface GetCloudGuardAdhocQueryAdhocQueryDetailAdhocQueryResource {
    region: string;
    resourceIds: string[];
    resourceType: string;
}

export interface GetCloudGuardAdhocQueryAdhocQueryRegionalDetail {
    expectedCount: string;
    expiredCount: string;
    failedCount: string;
    region: string;
    regionalError: string;
    regionalStatus: string;
    succeededCount: string;
}

export interface GetCloudGuardDataMaskRuleTargetSelected {
    kind: string;
    values: string[];
}

export interface GetCloudGuardDataMaskRulesDataMaskRuleCollection {
    items: outputs.GetCloudGuardDataMaskRulesDataMaskRuleCollectionItem[];
}

export interface GetCloudGuardDataMaskRulesDataMaskRuleCollectionItem {
    compartmentId: string;
    dataMaskCategories: string[];
    dataMaskRuleStatus: string;
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    freeformTags: {[key: string]: string};
    iamGroupId: string;
    id: string;
    lifecyleDetails: string;
    state: string;
    systemTags: {[key: string]: string};
    targetSelecteds: outputs.GetCloudGuardDataMaskRulesDataMaskRuleCollectionItemTargetSelected[];
    timeCreated: string;
    timeUpdated: string;
}

export interface GetCloudGuardDataMaskRulesDataMaskRuleCollectionItemTargetSelected {
    kind: string;
    values: string[];
}

export interface GetCloudGuardDataMaskRulesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCloudGuardDataSourceDataSourceDetail {
    additionalEntitiesCount: number;
    dataSourceFeedProvider: string;
    description: string;
    intervalInMinutes: number;
    intervalInSeconds: number;
    loggingQueryDetails: outputs.GetCloudGuardDataSourceDataSourceDetailLoggingQueryDetail[];
    loggingQueryType: string;
    operator: string;
    query: string;
    queryStartTimes: outputs.GetCloudGuardDataSourceDataSourceDetailQueryStartTime[];
    regions: string[];
    scheduledQueryScopeDetails: outputs.GetCloudGuardDataSourceDataSourceDetailScheduledQueryScopeDetail[];
    threshold: number;
}

export interface GetCloudGuardDataSourceDataSourceDetailLoggingQueryDetail {
    keyEntitiesCount: number;
    loggingQueryType: string;
}

export interface GetCloudGuardDataSourceDataSourceDetailQueryStartTime {
    queryStartTime: string;
    startPolicyType: string;
}

export interface GetCloudGuardDataSourceDataSourceDetailScheduledQueryScopeDetail {
    region: string;
    resourceIds: string[];
    resourceType: string;
}

export interface GetCloudGuardDataSourceDataSourceDetectorMappingInfo {
    detectorRecipeId: string;
    detectorRuleId: string;
}

export interface GetCloudGuardDataSourceEventItem {
    comments: string;
    dataSourceId: string;
    eventDate: string;
    eventInfos: outputs.GetCloudGuardDataSourceEventItemEventInfo[];
    region: string;
    status: string;
    timeCreated: string;
}

export interface GetCloudGuardDataSourceEventItemEventInfo {
    dataSourceFeedProvider: string;
    logResult: string;
    observedValue: string;
    operator: string;
    triggerValue: string;
}

export interface GetCloudGuardDataSourceEventsDataSourceEventCollection {
    items: outputs.GetCloudGuardDataSourceEventsDataSourceEventCollectionItem[];
}

export interface GetCloudGuardDataSourceEventsDataSourceEventCollectionItem {
    comments: string;
    dataSourceId: string;
    eventDate: string;
    eventInfos: outputs.GetCloudGuardDataSourceEventsDataSourceEventCollectionItemEventInfo[];
    region: string;
    status: string;
    timeCreated: string;
}

export interface GetCloudGuardDataSourceEventsDataSourceEventCollectionItemEventInfo {
    dataSourceFeedProvider: string;
    logResult: string;
    observedValue: string;
    operator: string;
    triggerValue: string;
}

export interface GetCloudGuardDataSourceEventsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCloudGuardDataSourceRegionStatusDetail {
    region: string;
    status: string;
}

export interface GetCloudGuardDataSourcesDataSourceCollection {
    items: outputs.GetCloudGuardDataSourcesDataSourceCollectionItem[];
}

export interface GetCloudGuardDataSourcesDataSourceCollectionItem {
    compartmentId: string;
    dataSourceDetails: outputs.GetCloudGuardDataSourcesDataSourceCollectionItemDataSourceDetail[];
    dataSourceDetectorMappingInfos: outputs.GetCloudGuardDataSourcesDataSourceCollectionItemDataSourceDetectorMappingInfo[];
    dataSourceFeedProvider: string;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    regionStatusDetails: outputs.GetCloudGuardDataSourcesDataSourceCollectionItemRegionStatusDetail[];
    state: string;
    status: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
}

export interface GetCloudGuardDataSourcesDataSourceCollectionItemDataSourceDetail {
    additionalEntitiesCount: number;
    dataSourceFeedProvider: string;
    description: string;
    intervalInMinutes: number;
    intervalInSeconds: number;
    loggingQueryDetails: outputs.GetCloudGuardDataSourcesDataSourceCollectionItemDataSourceDetailLoggingQueryDetail[];
    loggingQueryType: string;
    operator: string;
    query: string;
    queryStartTimes: outputs.GetCloudGuardDataSourcesDataSourceCollectionItemDataSourceDetailQueryStartTime[];
    regions: string[];
    scheduledQueryScopeDetails: outputs.GetCloudGuardDataSourcesDataSourceCollectionItemDataSourceDetailScheduledQueryScopeDetail[];
    threshold: number;
}

export interface GetCloudGuardDataSourcesDataSourceCollectionItemDataSourceDetailLoggingQueryDetail {
    keyEntitiesCount: number;
    loggingQueryType: string;
}

export interface GetCloudGuardDataSourcesDataSourceCollectionItemDataSourceDetailQueryStartTime {
    queryStartTime: string;
    startPolicyType: string;
}

export interface GetCloudGuardDataSourcesDataSourceCollectionItemDataSourceDetailScheduledQueryScopeDetail {
    region: string;
    resourceIds: string[];
    resourceType: string;
}

export interface GetCloudGuardDataSourcesDataSourceCollectionItemDataSourceDetectorMappingInfo {
    detectorRecipeId: string;
    detectorRuleId: string;
}

export interface GetCloudGuardDataSourcesDataSourceCollectionItemRegionStatusDetail {
    region: string;
    status: string;
}

export interface GetCloudGuardDataSourcesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCloudGuardDetectorRecipeDetectorRule {
    candidateResponderRules: outputs.GetCloudGuardDetectorRecipeDetectorRuleCandidateResponderRule[];
    dataSourceId: string;
    description: string;
    details: outputs.GetCloudGuardDetectorRecipeDetectorRuleDetail[];
    detector: string;
    detectorRuleId: string;
    displayName: string;
    entitiesMappings: outputs.GetCloudGuardDetectorRecipeDetectorRuleEntitiesMapping[];
    lifecycleDetails: string;
    managedListTypes: string[];
    recommendation: string;
    resourceType: string;
    serviceType: string;
    state: string;
    timeCreated: string;
    timeUpdated: string;
}

export interface GetCloudGuardDetectorRecipeDetectorRuleCandidateResponderRule {
    displayName: string;
    id: string;
    isPreferred: boolean;
}

export interface GetCloudGuardDetectorRecipeDetectorRuleDetail {
    condition: string;
    configurations: outputs.GetCloudGuardDetectorRecipeDetectorRuleDetailConfiguration[];
    dataSourceId: string;
    description: string;
    entitiesMappings: outputs.GetCloudGuardDetectorRecipeDetectorRuleDetailEntitiesMapping[];
    isConfigurationAllowed: boolean;
    isEnabled: boolean;
    labels: string[];
    recommendation: string;
    riskLevel: string;
}

export interface GetCloudGuardDetectorRecipeDetectorRuleDetailConfiguration {
    configKey: string;
    dataType: string;
    name: string;
    value: string;
    values: outputs.GetCloudGuardDetectorRecipeDetectorRuleDetailConfigurationValue[];
}

export interface GetCloudGuardDetectorRecipeDetectorRuleDetailConfigurationValue {
    listType: string;
    managedListType: string;
    value: string;
}

export interface GetCloudGuardDetectorRecipeDetectorRuleDetailEntitiesMapping {
    displayName: string;
    entityType: string;
    queryField: string;
}

export interface GetCloudGuardDetectorRecipeDetectorRuleEntitiesMapping {
    displayName: string;
    entityType: string;
    queryField: string;
}

export interface GetCloudGuardDetectorRecipeEffectiveDetectorRule {
    candidateResponderRules: outputs.GetCloudGuardDetectorRecipeEffectiveDetectorRuleCandidateResponderRule[];
    dataSourceId: string;
    description: string;
    details: outputs.GetCloudGuardDetectorRecipeEffectiveDetectorRuleDetail[];
    detector: string;
    detectorRuleId: string;
    displayName: string;
    entitiesMappings: outputs.GetCloudGuardDetectorRecipeEffectiveDetectorRuleEntitiesMapping[];
    lifecycleDetails: string;
    managedListTypes: string[];
    recommendation: string;
    resourceType: string;
    serviceType: string;
    state: string;
    timeCreated: string;
    timeUpdated: string;
}

export interface GetCloudGuardDetectorRecipeEffectiveDetectorRuleCandidateResponderRule {
    displayName: string;
    id: string;
    isPreferred: boolean;
}

export interface GetCloudGuardDetectorRecipeEffectiveDetectorRuleDetail {
    condition: string;
    configurations: outputs.GetCloudGuardDetectorRecipeEffectiveDetectorRuleDetailConfiguration[];
    dataSourceId: string;
    description: string;
    entitiesMappings: outputs.GetCloudGuardDetectorRecipeEffectiveDetectorRuleDetailEntitiesMapping[];
    isConfigurationAllowed: boolean;
    isEnabled: boolean;
    labels: string[];
    recommendation: string;
    riskLevel: string;
}

export interface GetCloudGuardDetectorRecipeEffectiveDetectorRuleDetailConfiguration {
    configKey: string;
    dataType: string;
    name: string;
    value: string;
    values: outputs.GetCloudGuardDetectorRecipeEffectiveDetectorRuleDetailConfigurationValue[];
}

export interface GetCloudGuardDetectorRecipeEffectiveDetectorRuleDetailConfigurationValue {
    listType: string;
    managedListType: string;
    value: string;
}

export interface GetCloudGuardDetectorRecipeEffectiveDetectorRuleDetailEntitiesMapping {
    displayName: string;
    entityType: string;
    queryField: string;
}

export interface GetCloudGuardDetectorRecipeEffectiveDetectorRuleEntitiesMapping {
    displayName: string;
    entityType: string;
    queryField: string;
}

export interface GetCloudGuardDetectorRecipesDetectorRecipeCollection {
    items: outputs.GetCloudGuardDetectorRecipesDetectorRecipeCollectionItem[];
}

export interface GetCloudGuardDetectorRecipesDetectorRecipeCollectionItem {
    compartmentId: string;
    definedTags: {[key: string]: string};
    description: string;
    detector: string;
    detectorRecipeType: string;
    detectorRules: outputs.GetCloudGuardDetectorRecipesDetectorRecipeCollectionItemDetectorRule[];
    displayName: string;
    effectiveDetectorRules: outputs.GetCloudGuardDetectorRecipesDetectorRecipeCollectionItemEffectiveDetectorRule[];
    freeformTags: {[key: string]: string};
    id: string;
    owner: string;
    sourceDetectorRecipeId: string;
    state: string;
    systemTags: {[key: string]: string};
    targetIds: string[];
    timeCreated: string;
    timeUpdated: string;
}

export interface GetCloudGuardDetectorRecipesDetectorRecipeCollectionItemDetectorRule {
    candidateResponderRules: outputs.GetCloudGuardDetectorRecipesDetectorRecipeCollectionItemDetectorRuleCandidateResponderRule[];
    dataSourceId: string;
    description: string;
    details: outputs.GetCloudGuardDetectorRecipesDetectorRecipeCollectionItemDetectorRuleDetail[];
    detector: string;
    detectorRuleId: string;
    displayName: string;
    entitiesMappings: outputs.GetCloudGuardDetectorRecipesDetectorRecipeCollectionItemDetectorRuleEntitiesMapping[];
    lifecycleDetails: string;
    managedListTypes: string[];
    recommendation: string;
    resourceType: string;
    serviceType: string;
    state: string;
    timeCreated: string;
    timeUpdated: string;
}

export interface GetCloudGuardDetectorRecipesDetectorRecipeCollectionItemDetectorRuleCandidateResponderRule {
    displayName: string;
    id: string;
    isPreferred: boolean;
}

export interface GetCloudGuardDetectorRecipesDetectorRecipeCollectionItemDetectorRuleDetail {
    condition: string;
    configurations: outputs.GetCloudGuardDetectorRecipesDetectorRecipeCollectionItemDetectorRuleDetailConfiguration[];
    dataSourceId: string;
    description: string;
    entitiesMappings: outputs.GetCloudGuardDetectorRecipesDetectorRecipeCollectionItemDetectorRuleDetailEntitiesMapping[];
    isConfigurationAllowed: boolean;
    isEnabled: boolean;
    labels: string[];
    recommendation: string;
    riskLevel: string;
}

export interface GetCloudGuardDetectorRecipesDetectorRecipeCollectionItemDetectorRuleDetailConfiguration {
    configKey: string;
    dataType: string;
    name: string;
    value: string;
    values: outputs.GetCloudGuardDetectorRecipesDetectorRecipeCollectionItemDetectorRuleDetailConfigurationValue[];
}

export interface GetCloudGuardDetectorRecipesDetectorRecipeCollectionItemDetectorRuleDetailConfigurationValue {
    listType: string;
    managedListType: string;
    value: string;
}

export interface GetCloudGuardDetectorRecipesDetectorRecipeCollectionItemDetectorRuleDetailEntitiesMapping {
    displayName: string;
    entityType: string;
    queryField: string;
}

export interface GetCloudGuardDetectorRecipesDetectorRecipeCollectionItemDetectorRuleEntitiesMapping {
    displayName: string;
    entityType: string;
    queryField: string;
}

export interface GetCloudGuardDetectorRecipesDetectorRecipeCollectionItemEffectiveDetectorRule {
    candidateResponderRules: outputs.GetCloudGuardDetectorRecipesDetectorRecipeCollectionItemEffectiveDetectorRuleCandidateResponderRule[];
    dataSourceId: string;
    description: string;
    details: outputs.GetCloudGuardDetectorRecipesDetectorRecipeCollectionItemEffectiveDetectorRuleDetail[];
    detector: string;
    detectorRuleId: string;
    displayName: string;
    entitiesMappings: outputs.GetCloudGuardDetectorRecipesDetectorRecipeCollectionItemEffectiveDetectorRuleEntitiesMapping[];
    lifecycleDetails: string;
    managedListTypes: string[];
    recommendation: string;
    resourceType: string;
    serviceType: string;
    state: string;
    timeCreated: string;
    timeUpdated: string;
}

export interface GetCloudGuardDetectorRecipesDetectorRecipeCollectionItemEffectiveDetectorRuleCandidateResponderRule {
    displayName: string;
    id: string;
    isPreferred: boolean;
}

export interface GetCloudGuardDetectorRecipesDetectorRecipeCollectionItemEffectiveDetectorRuleDetail {
    condition: string;
    configurations: outputs.GetCloudGuardDetectorRecipesDetectorRecipeCollectionItemEffectiveDetectorRuleDetailConfiguration[];
    dataSourceId: string;
    description: string;
    entitiesMappings: outputs.GetCloudGuardDetectorRecipesDetectorRecipeCollectionItemEffectiveDetectorRuleDetailEntitiesMapping[];
    isConfigurationAllowed: boolean;
    isEnabled: boolean;
    labels: string[];
    recommendation: string;
    riskLevel: string;
}

export interface GetCloudGuardDetectorRecipesDetectorRecipeCollectionItemEffectiveDetectorRuleDetailConfiguration {
    configKey: string;
    dataType: string;
    name: string;
    value: string;
    values: outputs.GetCloudGuardDetectorRecipesDetectorRecipeCollectionItemEffectiveDetectorRuleDetailConfigurationValue[];
}

export interface GetCloudGuardDetectorRecipesDetectorRecipeCollectionItemEffectiveDetectorRuleDetailConfigurationValue {
    listType: string;
    managedListType: string;
    value: string;
}

export interface GetCloudGuardDetectorRecipesDetectorRecipeCollectionItemEffectiveDetectorRuleDetailEntitiesMapping {
    displayName: string;
    entityType: string;
    queryField: string;
}

export interface GetCloudGuardDetectorRecipesDetectorRecipeCollectionItemEffectiveDetectorRuleEntitiesMapping {
    displayName: string;
    entityType: string;
    queryField: string;
}

export interface GetCloudGuardDetectorRecipesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCloudGuardManagedListsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCloudGuardManagedListsManagedListCollection {
    items: outputs.GetCloudGuardManagedListsManagedListCollectionItem[];
}

export interface GetCloudGuardManagedListsManagedListCollectionItem {
    compartmentId: string;
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    feedProvider: string;
    freeformTags: {[key: string]: string};
    id: string;
    isEditable: boolean;
    lifecyleDetails: string;
    listItems: string[];
    listType: string;
    sourceManagedListId: string;
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
}

export interface GetCloudGuardProblemEntitiesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCloudGuardProblemEntitiesProblemEntityCollection {
    items: outputs.GetCloudGuardProblemEntitiesProblemEntityCollectionItem[];
}

export interface GetCloudGuardProblemEntitiesProblemEntityCollectionItem {
    entityDetails: outputs.GetCloudGuardProblemEntitiesProblemEntityCollectionItemEntityDetail[];
    problemId: string;
    regions: string[];
    resultUrl: string;
    timeFirstDetected: string;
    timeLastDetected: string;
}

export interface GetCloudGuardProblemEntitiesProblemEntityCollectionItemEntityDetail {
    displayName: string;
    type: string;
    value: string;
}

export interface GetCloudGuardProblemEntityItem {
    entityDetails: outputs.GetCloudGuardProblemEntityItemEntityDetail[];
    problemId: string;
    regions: string[];
    resultUrl: string;
    timeFirstDetected: string;
    timeLastDetected: string;
}

export interface GetCloudGuardProblemEntityItemEntityDetail {
    displayName: string;
    type: string;
    value: string;
}

export interface GetCloudGuardResponderRecipeEffectiveResponderRule {
    compartmentId: string;
    description: string;
    details: outputs.GetCloudGuardResponderRecipeEffectiveResponderRuleDetail[];
    displayName: string;
    lifecycleDetails: string;
    policies: string[];
    responderRuleId: string;
    state: string;
    supportedModes: string[];
    timeCreated: string;
    timeUpdated: string;
    type: string;
}

export interface GetCloudGuardResponderRecipeEffectiveResponderRuleDetail {
    condition: string;
    configurations: outputs.GetCloudGuardResponderRecipeEffectiveResponderRuleDetailConfiguration[];
    isEnabled: boolean;
    mode: string;
}

export interface GetCloudGuardResponderRecipeEffectiveResponderRuleDetailConfiguration {
    configKey: string;
    name: string;
    value: string;
}

export interface GetCloudGuardResponderRecipeResponderRule {
    compartmentId: string;
    description: string;
    details: outputs.GetCloudGuardResponderRecipeResponderRuleDetail[];
    displayName: string;
    lifecycleDetails: string;
    policies: string[];
    responderRuleId: string;
    state: string;
    supportedModes: string[];
    timeCreated: string;
    timeUpdated: string;
    type: string;
}

export interface GetCloudGuardResponderRecipeResponderRuleDetail {
    condition: string;
    configurations: outputs.GetCloudGuardResponderRecipeResponderRuleDetailConfiguration[];
    isEnabled: boolean;
    mode: string;
}

export interface GetCloudGuardResponderRecipeResponderRuleDetailConfiguration {
    configKey: string;
    name: string;
    value: string;
}

export interface GetCloudGuardResponderRecipesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCloudGuardResponderRecipesResponderRecipeCollection {
    items: outputs.GetCloudGuardResponderRecipesResponderRecipeCollectionItem[];
}

export interface GetCloudGuardResponderRecipesResponderRecipeCollectionItem {
    compartmentId: string;
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    effectiveResponderRules: outputs.GetCloudGuardResponderRecipesResponderRecipeCollectionItemEffectiveResponderRule[];
    freeformTags: {[key: string]: string};
    id: string;
    lifecycleDetails: string;
    owner: string;
    responderRules: outputs.GetCloudGuardResponderRecipesResponderRecipeCollectionItemResponderRule[];
    sourceResponderRecipeId: string;
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
}

export interface GetCloudGuardResponderRecipesResponderRecipeCollectionItemEffectiveResponderRule {
    compartmentId: string;
    description: string;
    details: outputs.GetCloudGuardResponderRecipesResponderRecipeCollectionItemEffectiveResponderRuleDetail[];
    displayName: string;
    lifecycleDetails: string;
    policies: string[];
    responderRuleId: string;
    state: string;
    supportedModes: string[];
    timeCreated: string;
    timeUpdated: string;
    type: string;
}

export interface GetCloudGuardResponderRecipesResponderRecipeCollectionItemEffectiveResponderRuleDetail {
    condition: string;
    configurations: outputs.GetCloudGuardResponderRecipesResponderRecipeCollectionItemEffectiveResponderRuleDetailConfiguration[];
    isEnabled: boolean;
    mode: string;
}

export interface GetCloudGuardResponderRecipesResponderRecipeCollectionItemEffectiveResponderRuleDetailConfiguration {
    configKey: string;
    name: string;
    value: string;
}

export interface GetCloudGuardResponderRecipesResponderRecipeCollectionItemResponderRule {
    compartmentId: string;
    description: string;
    details: outputs.GetCloudGuardResponderRecipesResponderRecipeCollectionItemResponderRuleDetail[];
    displayName: string;
    lifecycleDetails: string;
    policies: string[];
    responderRuleId: string;
    state: string;
    supportedModes: string[];
    timeCreated: string;
    timeUpdated: string;
    type: string;
}

export interface GetCloudGuardResponderRecipesResponderRecipeCollectionItemResponderRuleDetail {
    condition: string;
    configurations: outputs.GetCloudGuardResponderRecipesResponderRecipeCollectionItemResponderRuleDetailConfiguration[];
    isEnabled: boolean;
    mode: string;
}

export interface GetCloudGuardResponderRecipesResponderRecipeCollectionItemResponderRuleDetailConfiguration {
    configKey: string;
    name: string;
    value: string;
}

export interface GetCloudGuardSavedQueriesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCloudGuardSavedQueriesSavedQueryCollection {
    items: outputs.GetCloudGuardSavedQueriesSavedQueryCollectionItem[];
}

export interface GetCloudGuardSavedQueriesSavedQueryCollectionItem {
    compartmentId: string;
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    query: string;
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
}

export interface GetCloudGuardSecurityPoliciesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCloudGuardSecurityPoliciesSecurityPolicyCollection {
    items: outputs.GetCloudGuardSecurityPoliciesSecurityPolicyCollectionItem[];
}

export interface GetCloudGuardSecurityPoliciesSecurityPolicyCollectionItem {
    category: string;
    compartmentId: string;
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    freeformTags: {[key: string]: string};
    friendlyName: string;
    id: string;
    lifecycleDetails: string;
    owner: string;
    services: string[];
    state: string;
    timeCreated: string;
    timeUpdated: string;
}

export interface GetCloudGuardSecurityRecipesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCloudGuardSecurityRecipesSecurityRecipeCollection {
    items: outputs.GetCloudGuardSecurityRecipesSecurityRecipeCollectionItem[];
}

export interface GetCloudGuardSecurityRecipesSecurityRecipeCollectionItem {
    compartmentId: string;
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    lifecycleDetails: string;
    owner: string;
    securityPolicies: string[];
    state: string;
    timeCreated: string;
    timeUpdated: string;
}

export interface GetCloudGuardSecurityZonesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCloudGuardSecurityZonesSecurityZoneCollection {
    items: outputs.GetCloudGuardSecurityZonesSecurityZoneCollectionItem[];
}

export interface GetCloudGuardSecurityZonesSecurityZoneCollectionItem {
    compartmentId: string;
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    inheritedByCompartments: string[];
    lifecycleDetails: string;
    securityZoneRecipeId: string;
    securityZoneTargetId: string;
    state: string;
    timeCreated: string;
    timeUpdated: string;
}

export interface GetCloudGuardTargetTargetDetail {
    securityZoneDisplayName: string;
    securityZoneId: string;
    targetResourceType: string;
    targetSecurityZoneRecipes: outputs.GetCloudGuardTargetTargetDetailTargetSecurityZoneRecipe[];
}

export interface GetCloudGuardTargetTargetDetailTargetSecurityZoneRecipe {
    compartmentId: string;
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    lifecycleDetails: string;
    owner: string;
    securityPolicies: string[];
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
}

export interface GetCloudGuardTargetTargetDetectorRecipe {
    compartmentId: string;
    description: string;
    detector: string;
    detectorRecipeId: string;
    detectorRecipeType: string;
    detectorRules: outputs.GetCloudGuardTargetTargetDetectorRecipeDetectorRule[];
    displayName: string;
    effectiveDetectorRules: outputs.GetCloudGuardTargetTargetDetectorRecipeEffectiveDetectorRule[];
    id: string;
    owner: string;
    state: string;
    timeCreated: string;
    timeUpdated: string;
}

export interface GetCloudGuardTargetTargetDetectorRecipeDetectorRule {
    dataSourceId: string;
    description: string;
    details: outputs.GetCloudGuardTargetTargetDetectorRecipeDetectorRuleDetail[];
    detector: string;
    detectorRuleId: string;
    displayName: string;
    entitiesMappings: outputs.GetCloudGuardTargetTargetDetectorRecipeDetectorRuleEntitiesMapping[];
    lifecycleDetails: string;
    managedListTypes: string[];
    recommendation: string;
    resourceType: string;
    serviceType: string;
    state: string;
    timeCreated: string;
    timeUpdated: string;
}

export interface GetCloudGuardTargetTargetDetectorRecipeDetectorRuleDetail {
    conditionGroups: outputs.GetCloudGuardTargetTargetDetectorRecipeDetectorRuleDetailConditionGroup[];
    configurations: outputs.GetCloudGuardTargetTargetDetectorRecipeDetectorRuleDetailConfiguration[];
    isConfigurationAllowed: boolean;
    isEnabled: boolean;
    labels: string[];
    riskLevel: string;
}

export interface GetCloudGuardTargetTargetDetectorRecipeDetectorRuleDetailConditionGroup {
    compartmentId: string;
    condition: string;
}

export interface GetCloudGuardTargetTargetDetectorRecipeDetectorRuleDetailConfiguration {
    configKey: string;
    dataType: string;
    name: string;
    value: string;
    values: outputs.GetCloudGuardTargetTargetDetectorRecipeDetectorRuleDetailConfigurationValue[];
}

export interface GetCloudGuardTargetTargetDetectorRecipeDetectorRuleDetailConfigurationValue {
    listType: string;
    managedListType: string;
    value: string;
}

export interface GetCloudGuardTargetTargetDetectorRecipeDetectorRuleEntitiesMapping {
    displayName: string;
    entityType: string;
    queryField: string;
}

export interface GetCloudGuardTargetTargetDetectorRecipeEffectiveDetectorRule {
    dataSourceId: string;
    description: string;
    details: outputs.GetCloudGuardTargetTargetDetectorRecipeEffectiveDetectorRuleDetail[];
    detector: string;
    detectorRuleId: string;
    displayName: string;
    entitiesMappings: outputs.GetCloudGuardTargetTargetDetectorRecipeEffectiveDetectorRuleEntitiesMapping[];
    lifecycleDetails: string;
    managedListTypes: string[];
    recommendation: string;
    resourceType: string;
    serviceType: string;
    state: string;
    timeCreated: string;
    timeUpdated: string;
}

export interface GetCloudGuardTargetTargetDetectorRecipeEffectiveDetectorRuleDetail {
    conditionGroups: outputs.GetCloudGuardTargetTargetDetectorRecipeEffectiveDetectorRuleDetailConditionGroup[];
    configurations: outputs.GetCloudGuardTargetTargetDetectorRecipeEffectiveDetectorRuleDetailConfiguration[];
    isConfigurationAllowed: boolean;
    isEnabled: boolean;
    labels: string[];
    riskLevel: string;
}

export interface GetCloudGuardTargetTargetDetectorRecipeEffectiveDetectorRuleDetailConditionGroup {
    compartmentId: string;
    condition: string;
}

export interface GetCloudGuardTargetTargetDetectorRecipeEffectiveDetectorRuleDetailConfiguration {
    configKey: string;
    dataType: string;
    name: string;
    value: string;
    values: outputs.GetCloudGuardTargetTargetDetectorRecipeEffectiveDetectorRuleDetailConfigurationValue[];
}

export interface GetCloudGuardTargetTargetDetectorRecipeEffectiveDetectorRuleDetailConfigurationValue {
    listType: string;
    managedListType: string;
    value: string;
}

export interface GetCloudGuardTargetTargetDetectorRecipeEffectiveDetectorRuleEntitiesMapping {
    displayName: string;
    entityType: string;
    queryField: string;
}

export interface GetCloudGuardTargetTargetResponderRecipe {
    compartmentId: string;
    description: string;
    displayName: string;
    effectiveResponderRules: outputs.GetCloudGuardTargetTargetResponderRecipeEffectiveResponderRule[];
    id: string;
    owner: string;
    responderRecipeId: string;
    responderRules: outputs.GetCloudGuardTargetTargetResponderRecipeResponderRule[];
    timeCreated: string;
    timeUpdated: string;
}

export interface GetCloudGuardTargetTargetResponderRecipeEffectiveResponderRule {
    compartmentId: string;
    description: string;
    details: outputs.GetCloudGuardTargetTargetResponderRecipeEffectiveResponderRuleDetail[];
    displayName: string;
    lifecycleDetails: string;
    policies: string[];
    responderRuleId: string;
    state: string;
    supportedModes: string[];
    timeCreated: string;
    timeUpdated: string;
    type: string;
}

export interface GetCloudGuardTargetTargetResponderRecipeEffectiveResponderRuleDetail {
    condition: string;
    configurations: outputs.GetCloudGuardTargetTargetResponderRecipeEffectiveResponderRuleDetailConfiguration[];
    isEnabled: boolean;
    mode: string;
}

export interface GetCloudGuardTargetTargetResponderRecipeEffectiveResponderRuleDetailConfiguration {
    configKey: string;
    name: string;
    value: string;
}

export interface GetCloudGuardTargetTargetResponderRecipeResponderRule {
    compartmentId: string;
    description: string;
    details: outputs.GetCloudGuardTargetTargetResponderRecipeResponderRuleDetail[];
    displayName: string;
    lifecycleDetails: string;
    policies: string[];
    responderRuleId: string;
    state: string;
    supportedModes: string[];
    timeCreated: string;
    timeUpdated: string;
    type: string;
}

export interface GetCloudGuardTargetTargetResponderRecipeResponderRuleDetail {
    condition: string;
    configurations: outputs.GetCloudGuardTargetTargetResponderRecipeResponderRuleDetailConfiguration[];
    isEnabled: boolean;
    mode: string;
}

export interface GetCloudGuardTargetTargetResponderRecipeResponderRuleDetailConfiguration {
    configKey: string;
    name: string;
    value: string;
}

export interface GetCloudGuardTargetsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCloudGuardTargetsTargetCollection {
    items: outputs.GetCloudGuardTargetsTargetCollectionItem[];
}

export interface GetCloudGuardTargetsTargetCollectionItem {
    compartmentId: string;
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    inheritedByCompartments: string[];
    lifecyleDetails: string;
    recipeCount: number;
    state: string;
    systemTags: {[key: string]: string};
    targetDetails: outputs.GetCloudGuardTargetsTargetCollectionItemTargetDetail[];
    targetDetectorRecipes: outputs.GetCloudGuardTargetsTargetCollectionItemTargetDetectorRecipe[];
    targetResourceId: string;
    targetResourceType: string;
    targetResponderRecipes: outputs.GetCloudGuardTargetsTargetCollectionItemTargetResponderRecipe[];
    timeCreated: string;
    timeUpdated: string;
}

export interface GetCloudGuardTargetsTargetCollectionItemTargetDetail {
    securityZoneDisplayName: string;
    securityZoneId: string;
    targetResourceType: string;
    targetSecurityZoneRecipes: outputs.GetCloudGuardTargetsTargetCollectionItemTargetDetailTargetSecurityZoneRecipe[];
}

export interface GetCloudGuardTargetsTargetCollectionItemTargetDetailTargetSecurityZoneRecipe {
    compartmentId: string;
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    lifecycleDetails: string;
    owner: string;
    securityPolicies: string[];
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
}

export interface GetCloudGuardTargetsTargetCollectionItemTargetDetectorRecipe {
    compartmentId: string;
    description: string;
    detector: string;
    detectorRecipeId: string;
    detectorRecipeType: string;
    detectorRules: outputs.GetCloudGuardTargetsTargetCollectionItemTargetDetectorRecipeDetectorRule[];
    displayName: string;
    effectiveDetectorRules: outputs.GetCloudGuardTargetsTargetCollectionItemTargetDetectorRecipeEffectiveDetectorRule[];
    id: string;
    owner: string;
    state: string;
    timeCreated: string;
    timeUpdated: string;
}

export interface GetCloudGuardTargetsTargetCollectionItemTargetDetectorRecipeDetectorRule {
    dataSourceId: string;
    description: string;
    details: outputs.GetCloudGuardTargetsTargetCollectionItemTargetDetectorRecipeDetectorRuleDetail[];
    detector: string;
    detectorRuleId: string;
    displayName: string;
    entitiesMappings: outputs.GetCloudGuardTargetsTargetCollectionItemTargetDetectorRecipeDetectorRuleEntitiesMapping[];
    lifecycleDetails: string;
    managedListTypes: string[];
    recommendation: string;
    resourceType: string;
    serviceType: string;
    state: string;
    timeCreated: string;
    timeUpdated: string;
}

export interface GetCloudGuardTargetsTargetCollectionItemTargetDetectorRecipeDetectorRuleDetail {
    conditionGroups: outputs.GetCloudGuardTargetsTargetCollectionItemTargetDetectorRecipeDetectorRuleDetailConditionGroup[];
    configurations: outputs.GetCloudGuardTargetsTargetCollectionItemTargetDetectorRecipeDetectorRuleDetailConfiguration[];
    isConfigurationAllowed: boolean;
    isEnabled: boolean;
    labels: string[];
    riskLevel: string;
}

export interface GetCloudGuardTargetsTargetCollectionItemTargetDetectorRecipeDetectorRuleDetailConditionGroup {
    compartmentId: string;
    condition: string;
}

export interface GetCloudGuardTargetsTargetCollectionItemTargetDetectorRecipeDetectorRuleDetailConfiguration {
    configKey: string;
    dataType: string;
    name: string;
    value: string;
    values: outputs.GetCloudGuardTargetsTargetCollectionItemTargetDetectorRecipeDetectorRuleDetailConfigurationValue[];
}

export interface GetCloudGuardTargetsTargetCollectionItemTargetDetectorRecipeDetectorRuleDetailConfigurationValue {
    listType: string;
    managedListType: string;
    value: string;
}

export interface GetCloudGuardTargetsTargetCollectionItemTargetDetectorRecipeDetectorRuleEntitiesMapping {
    displayName: string;
    entityType: string;
    queryField: string;
}

export interface GetCloudGuardTargetsTargetCollectionItemTargetDetectorRecipeEffectiveDetectorRule {
    dataSourceId: string;
    description: string;
    details: outputs.GetCloudGuardTargetsTargetCollectionItemTargetDetectorRecipeEffectiveDetectorRuleDetail[];
    detector: string;
    detectorRuleId: string;
    displayName: string;
    entitiesMappings: outputs.GetCloudGuardTargetsTargetCollectionItemTargetDetectorRecipeEffectiveDetectorRuleEntitiesMapping[];
    lifecycleDetails: string;
    managedListTypes: string[];
    recommendation: string;
    resourceType: string;
    serviceType: string;
    state: string;
    timeCreated: string;
    timeUpdated: string;
}

export interface GetCloudGuardTargetsTargetCollectionItemTargetDetectorRecipeEffectiveDetectorRuleDetail {
    conditionGroups: outputs.GetCloudGuardTargetsTargetCollectionItemTargetDetectorRecipeEffectiveDetectorRuleDetailConditionGroup[];
    configurations: outputs.GetCloudGuardTargetsTargetCollectionItemTargetDetectorRecipeEffectiveDetectorRuleDetailConfiguration[];
    isConfigurationAllowed: boolean;
    isEnabled: boolean;
    labels: string[];
    riskLevel: string;
}

export interface GetCloudGuardTargetsTargetCollectionItemTargetDetectorRecipeEffectiveDetectorRuleDetailConditionGroup {
    compartmentId: string;
    condition: string;
}

export interface GetCloudGuardTargetsTargetCollectionItemTargetDetectorRecipeEffectiveDetectorRuleDetailConfiguration {
    configKey: string;
    dataType: string;
    name: string;
    value: string;
    values: outputs.GetCloudGuardTargetsTargetCollectionItemTargetDetectorRecipeEffectiveDetectorRuleDetailConfigurationValue[];
}

export interface GetCloudGuardTargetsTargetCollectionItemTargetDetectorRecipeEffectiveDetectorRuleDetailConfigurationValue {
    listType: string;
    managedListType: string;
    value: string;
}

export interface GetCloudGuardTargetsTargetCollectionItemTargetDetectorRecipeEffectiveDetectorRuleEntitiesMapping {
    displayName: string;
    entityType: string;
    queryField: string;
}

export interface GetCloudGuardTargetsTargetCollectionItemTargetResponderRecipe {
    compartmentId: string;
    description: string;
    displayName: string;
    effectiveResponderRules: outputs.GetCloudGuardTargetsTargetCollectionItemTargetResponderRecipeEffectiveResponderRule[];
    id: string;
    owner: string;
    responderRecipeId: string;
    responderRules: outputs.GetCloudGuardTargetsTargetCollectionItemTargetResponderRecipeResponderRule[];
    timeCreated: string;
    timeUpdated: string;
}

export interface GetCloudGuardTargetsTargetCollectionItemTargetResponderRecipeEffectiveResponderRule {
    compartmentId: string;
    description: string;
    details: outputs.GetCloudGuardTargetsTargetCollectionItemTargetResponderRecipeEffectiveResponderRuleDetail[];
    displayName: string;
    lifecycleDetails: string;
    policies: string[];
    responderRuleId: string;
    state: string;
    supportedModes: string[];
    timeCreated: string;
    timeUpdated: string;
    type: string;
}

export interface GetCloudGuardTargetsTargetCollectionItemTargetResponderRecipeEffectiveResponderRuleDetail {
    condition: string;
    configurations: outputs.GetCloudGuardTargetsTargetCollectionItemTargetResponderRecipeEffectiveResponderRuleDetailConfiguration[];
    isEnabled: boolean;
    mode: string;
}

export interface GetCloudGuardTargetsTargetCollectionItemTargetResponderRecipeEffectiveResponderRuleDetailConfiguration {
    configKey: string;
    name: string;
    value: string;
}

export interface GetCloudGuardTargetsTargetCollectionItemTargetResponderRecipeResponderRule {
    compartmentId: string;
    description: string;
    details: outputs.GetCloudGuardTargetsTargetCollectionItemTargetResponderRecipeResponderRuleDetail[];
    displayName: string;
    lifecycleDetails: string;
    policies: string[];
    responderRuleId: string;
    state: string;
    supportedModes: string[];
    timeCreated: string;
    timeUpdated: string;
    type: string;
}

export interface GetCloudGuardTargetsTargetCollectionItemTargetResponderRecipeResponderRuleDetail {
    condition: string;
    configurations: outputs.GetCloudGuardTargetsTargetCollectionItemTargetResponderRecipeResponderRuleDetailConfiguration[];
    isEnabled: boolean;
    mode: string;
}

export interface GetCloudGuardTargetsTargetCollectionItemTargetResponderRecipeResponderRuleDetailConfiguration {
    configKey: string;
    name: string;
    value: string;
}

export interface GetCloudGuardWlpAgentsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCloudGuardWlpAgentsWlpAgentCollection {
    items: outputs.GetCloudGuardWlpAgentsWlpAgentCollectionItem[];
}

export interface GetCloudGuardWlpAgentsWlpAgentCollectionItem {
    agentVersion: string;
    certificateId: string;
    certificateSignedRequest: string;
    compartmentId: string;
    definedTags: {[key: string]: string};
    freeformTags: {[key: string]: string};
    hostId: string;
    id: string;
    osInfo: string;
    systemTags: {[key: string]: string};
    tenantId: string;
    timeCreated: string;
    timeUpdated: string;
}

export interface GetCloudMigrationsMigrationAssetsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCloudMigrationsMigrationAssetsMigrationAssetCollection {
    items: outputs.GetCloudMigrationsMigrationAssetsMigrationAssetCollectionItem[];
}

export interface GetCloudMigrationsMigrationAssetsMigrationAssetCollectionItem {
    availabilityDomain: string;
    compartmentId: string;
    dependedOnBies: string[];
    displayName: string;
    id: string;
    inventoryAssetId: string;
    lifecycleDetails: string;
    migrationAssetDependsOns: string[];
    migrationId: string;
    notifications: string[];
    parentSnapshot: string;
    replicationCompartmentId: string;
    replicationScheduleId: string;
    snapShotBucketName: string;
    snapshots: {[key: string]: string};
    sourceAssetId: string;
    state: string;
    tenancyId: string;
    timeCreated: string;
    timeUpdated: string;
    type: string;
}

export interface GetCloudMigrationsMigrationPlanAvailableShapeItem {
    availabilityDomain: string;
    definedTags: {[key: string]: string};
    freeformTags: {[key: string]: string};
    gpuDescription: string;
    gpus: number;
    localDiskDescription: string;
    localDisks: number;
    localDisksTotalSizeInGbs: number;
    maxVnicAttachments: number;
    memoryInGbs: number;
    minTotalBaselineOcpusRequired: number;
    networkingBandwidthInGbps: number;
    ocpus: number;
    paginationToken: string;
    processorDescription: string;
    shape: string;
    systemTags: {[key: string]: string};
}

export interface GetCloudMigrationsMigrationPlanAvailableShapesAvailableShapesCollection {
    items: outputs.GetCloudMigrationsMigrationPlanAvailableShapesAvailableShapesCollectionItem[];
}

export interface GetCloudMigrationsMigrationPlanAvailableShapesAvailableShapesCollectionItem {
    availabilityDomain: string;
    definedTags: {[key: string]: string};
    freeformTags: {[key: string]: string};
    gpuDescription: string;
    gpus: number;
    localDiskDescription: string;
    localDisks: number;
    localDisksTotalSizeInGbs: number;
    maxVnicAttachments: number;
    memoryInGbs: number;
    minTotalBaselineOcpusRequired: number;
    networkingBandwidthInGbps: number;
    ocpus: number;
    paginationToken: string;
    processorDescription: string;
    shape: string;
    systemTags: {[key: string]: string};
}

export interface GetCloudMigrationsMigrationPlanAvailableShapesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCloudMigrationsMigrationPlanMigrationPlanStat {
    timeUpdated: string;
    totalEstimatedCosts: outputs.GetCloudMigrationsMigrationPlanMigrationPlanStatTotalEstimatedCost[];
    vmCount: number;
}

export interface GetCloudMigrationsMigrationPlanMigrationPlanStatTotalEstimatedCost {
    computes: outputs.GetCloudMigrationsMigrationPlanMigrationPlanStatTotalEstimatedCostCompute[];
    currencyCode: string;
    osImages: outputs.GetCloudMigrationsMigrationPlanMigrationPlanStatTotalEstimatedCostOsImage[];
    storages: outputs.GetCloudMigrationsMigrationPlanMigrationPlanStatTotalEstimatedCostStorage[];
    subscriptionId: string;
    totalEstimationPerMonth: number;
    totalEstimationPerMonthBySubscription: number;
}

export interface GetCloudMigrationsMigrationPlanMigrationPlanStatTotalEstimatedCostCompute {
    gpuCount: number;
    gpuPerHour: number;
    gpuPerHourBySubscription: number;
    memoryAmountGb: number;
    memoryGbPerHour: number;
    memoryGbPerHourBySubscription: number;
    ocpuCount: number;
    ocpuPerHour: number;
    ocpuPerHourBySubscription: number;
    totalPerHour: number;
    totalPerHourBySubscription: number;
}

export interface GetCloudMigrationsMigrationPlanMigrationPlanStatTotalEstimatedCostOsImage {
    totalPerHour: number;
    totalPerHourBySubscription: number;
}

export interface GetCloudMigrationsMigrationPlanMigrationPlanStatTotalEstimatedCostStorage {
    totalGbPerMonth: number;
    totalGbPerMonthBySubscription: number;
    volumes: outputs.GetCloudMigrationsMigrationPlanMigrationPlanStatTotalEstimatedCostStorageVolume[];
}

export interface GetCloudMigrationsMigrationPlanMigrationPlanStatTotalEstimatedCostStorageVolume {
    capacityGb: number;
    description: string;
    totalGbPerMonth: number;
    totalGbPerMonthBySubscription: number;
}

export interface GetCloudMigrationsMigrationPlanStrategy {
    adjustmentMultiplier: number;
    metricTimeWindow: string;
    metricType: string;
    percentile: string;
    resourceType: string;
    strategyType: string;
}

export interface GetCloudMigrationsMigrationPlanTargetEnvironment {
    availabilityDomain: string;
    dedicatedVmHost: string;
    faultDomain: string;
    msLicense: string;
    preferredShapeType: string;
    subnet: string;
    targetCompartmentId: string;
    targetEnvironmentType: string;
    vcn: string;
}

export interface GetCloudMigrationsMigrationPlansFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCloudMigrationsMigrationPlansMigrationPlanCollection {
    items: outputs.GetCloudMigrationsMigrationPlansMigrationPlanCollectionItem[];
}

export interface GetCloudMigrationsMigrationPlansMigrationPlanCollectionItem {
    calculatedLimits: {[key: string]: string};
    compartmentId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    lifecycleDetails: string;
    migrationId: string;
    migrationPlanStats: outputs.GetCloudMigrationsMigrationPlansMigrationPlanCollectionItemMigrationPlanStat[];
    referenceToRmsStack: string;
    sourceMigrationPlanId: string;
    state: string;
    strategies: outputs.GetCloudMigrationsMigrationPlansMigrationPlanCollectionItemStrategy[];
    systemTags: {[key: string]: string};
    targetEnvironments: outputs.GetCloudMigrationsMigrationPlansMigrationPlanCollectionItemTargetEnvironment[];
    timeCreated: string;
    timeUpdated: string;
}

export interface GetCloudMigrationsMigrationPlansMigrationPlanCollectionItemMigrationPlanStat {
    timeUpdated: string;
    totalEstimatedCosts: outputs.GetCloudMigrationsMigrationPlansMigrationPlanCollectionItemMigrationPlanStatTotalEstimatedCost[];
    vmCount: number;
}

export interface GetCloudMigrationsMigrationPlansMigrationPlanCollectionItemMigrationPlanStatTotalEstimatedCost {
    computes: outputs.GetCloudMigrationsMigrationPlansMigrationPlanCollectionItemMigrationPlanStatTotalEstimatedCostCompute[];
    currencyCode: string;
    osImages: outputs.GetCloudMigrationsMigrationPlansMigrationPlanCollectionItemMigrationPlanStatTotalEstimatedCostOsImage[];
    storages: outputs.GetCloudMigrationsMigrationPlansMigrationPlanCollectionItemMigrationPlanStatTotalEstimatedCostStorage[];
    subscriptionId: string;
    totalEstimationPerMonth: number;
    totalEstimationPerMonthBySubscription: number;
}

export interface GetCloudMigrationsMigrationPlansMigrationPlanCollectionItemMigrationPlanStatTotalEstimatedCostCompute {
    gpuCount: number;
    gpuPerHour: number;
    gpuPerHourBySubscription: number;
    memoryAmountGb: number;
    memoryGbPerHour: number;
    memoryGbPerHourBySubscription: number;
    ocpuCount: number;
    ocpuPerHour: number;
    ocpuPerHourBySubscription: number;
    totalPerHour: number;
    totalPerHourBySubscription: number;
}

export interface GetCloudMigrationsMigrationPlansMigrationPlanCollectionItemMigrationPlanStatTotalEstimatedCostOsImage {
    totalPerHour: number;
    totalPerHourBySubscription: number;
}

export interface GetCloudMigrationsMigrationPlansMigrationPlanCollectionItemMigrationPlanStatTotalEstimatedCostStorage {
    totalGbPerMonth: number;
    totalGbPerMonthBySubscription: number;
    volumes: outputs.GetCloudMigrationsMigrationPlansMigrationPlanCollectionItemMigrationPlanStatTotalEstimatedCostStorageVolume[];
}

export interface GetCloudMigrationsMigrationPlansMigrationPlanCollectionItemMigrationPlanStatTotalEstimatedCostStorageVolume {
    capacityGb: number;
    description: string;
    totalGbPerMonth: number;
    totalGbPerMonthBySubscription: number;
}

export interface GetCloudMigrationsMigrationPlansMigrationPlanCollectionItemStrategy {
    adjustmentMultiplier: number;
    metricTimeWindow: string;
    metricType: string;
    percentile: string;
    resourceType: string;
    strategyType: string;
}

export interface GetCloudMigrationsMigrationPlansMigrationPlanCollectionItemTargetEnvironment {
    availabilityDomain: string;
    dedicatedVmHost: string;
    faultDomain: string;
    msLicense: string;
    preferredShapeType: string;
    subnet: string;
    targetCompartmentId: string;
    targetEnvironmentType: string;
    vcn: string;
}

export interface GetCloudMigrationsMigrationsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCloudMigrationsMigrationsMigrationCollection {
    items: outputs.GetCloudMigrationsMigrationsMigrationCollectionItem[];
}

export interface GetCloudMigrationsMigrationsMigrationCollectionItem {
    compartmentId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    isCompleted: boolean;
    lifecycleDetails: string;
    replicationScheduleId: string;
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
}

export interface GetCloudMigrationsReplicationSchedulesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCloudMigrationsReplicationSchedulesReplicationScheduleCollection {
    items: outputs.GetCloudMigrationsReplicationSchedulesReplicationScheduleCollectionItem[];
}

export interface GetCloudMigrationsReplicationSchedulesReplicationScheduleCollectionItem {
    compartmentId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    executionRecurrences: string;
    freeformTags: {[key: string]: string};
    id: string;
    lifecycleDetails: string;
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
}

export interface GetCloudMigrationsTargetAssetCompatibilityMessage {
    message: string;
    name: string;
    severity: string;
}

export interface GetCloudMigrationsTargetAssetEstimatedCost {
    computes: outputs.GetCloudMigrationsTargetAssetEstimatedCostCompute[];
    currencyCode: string;
    osImages: outputs.GetCloudMigrationsTargetAssetEstimatedCostOsImage[];
    storages: outputs.GetCloudMigrationsTargetAssetEstimatedCostStorage[];
    subscriptionId: string;
    totalEstimationPerMonth: number;
    totalEstimationPerMonthBySubscription: number;
}

export interface GetCloudMigrationsTargetAssetEstimatedCostCompute {
    gpuCount: number;
    gpuPerHour: number;
    gpuPerHourBySubscription: number;
    memoryAmountGb: number;
    memoryGbPerHour: number;
    memoryGbPerHourBySubscription: number;
    ocpuCount: number;
    ocpuPerHour: number;
    ocpuPerHourBySubscription: number;
    totalPerHour: number;
    totalPerHourBySubscription: number;
}

export interface GetCloudMigrationsTargetAssetEstimatedCostOsImage {
    totalPerHour: number;
    totalPerHourBySubscription: number;
}

export interface GetCloudMigrationsTargetAssetEstimatedCostStorage {
    totalGbPerMonth: number;
    totalGbPerMonthBySubscription: number;
    volumes: outputs.GetCloudMigrationsTargetAssetEstimatedCostStorageVolume[];
}

export interface GetCloudMigrationsTargetAssetEstimatedCostStorageVolume {
    capacityGb: number;
    description: string;
    totalGbPerMonth: number;
    totalGbPerMonthBySubscription: number;
}

export interface GetCloudMigrationsTargetAssetMigrationAsset {
    availabilityDomain: string;
    compartmentId: string;
    dependedOnBies: string[];
    dependsOns: string[];
    displayName: string;
    id: string;
    lifecycleDetails: string;
    migrationId: string;
    notifications: string[];
    parentSnapshot: string;
    replicationCompartmentId: string;
    replicationScheduleId: string;
    snapShotBucketName: string;
    snapshots: {[key: string]: string};
    sourceAssetData: {[key: string]: string};
    sourceAssetId: string;
    state: string;
    tenancyId: string;
    timeCreated: string;
    timeUpdated: string;
    type: string;
}

export interface GetCloudMigrationsTargetAssetRecommendedSpec {
    agentConfigs: outputs.GetCloudMigrationsTargetAssetRecommendedSpecAgentConfig[];
    availabilityDomain: string;
    capacityReservationId: string;
    compartmentId: string;
    createVnicDetails: outputs.GetCloudMigrationsTargetAssetRecommendedSpecCreateVnicDetail[];
    dedicatedVmHostId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    faultDomain: string;
    freeformTags: {[key: string]: string};
    hostnameLabel: string;
    instanceOptions: outputs.GetCloudMigrationsTargetAssetRecommendedSpecInstanceOption[];
    ipxeScript: string;
    isPvEncryptionInTransitEnabled: boolean;
    preemptibleInstanceConfigs: outputs.GetCloudMigrationsTargetAssetRecommendedSpecPreemptibleInstanceConfig[];
    shape: string;
    shapeConfigs: outputs.GetCloudMigrationsTargetAssetRecommendedSpecShapeConfig[];
    sourceDetails: outputs.GetCloudMigrationsTargetAssetRecommendedSpecSourceDetail[];
}

export interface GetCloudMigrationsTargetAssetRecommendedSpecAgentConfig {
    areAllPluginsDisabled: boolean;
    isManagementDisabled: boolean;
    isMonitoringDisabled: boolean;
    pluginsConfigs: outputs.GetCloudMigrationsTargetAssetRecommendedSpecAgentConfigPluginsConfig[];
}

export interface GetCloudMigrationsTargetAssetRecommendedSpecAgentConfigPluginsConfig {
    desiredState: string;
    name: string;
}

export interface GetCloudMigrationsTargetAssetRecommendedSpecCreateVnicDetail {
    assignPrivateDnsRecord: boolean;
    assignPublicIp: boolean;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    hostnameLabel: string;
    nsgIds: string[];
    privateIp: string;
    skipSourceDestCheck: boolean;
    subnetId: string;
    vlanId: string;
}

export interface GetCloudMigrationsTargetAssetRecommendedSpecInstanceOption {
    areLegacyImdsEndpointsDisabled: boolean;
}

export interface GetCloudMigrationsTargetAssetRecommendedSpecPreemptibleInstanceConfig {
    preemptionActions: outputs.GetCloudMigrationsTargetAssetRecommendedSpecPreemptibleInstanceConfigPreemptionAction[];
}

export interface GetCloudMigrationsTargetAssetRecommendedSpecPreemptibleInstanceConfigPreemptionAction {
    preserveBootVolume: boolean;
    type: string;
}

export interface GetCloudMigrationsTargetAssetRecommendedSpecShapeConfig {
    baselineOcpuUtilization: string;
    memoryInGbs: number;
    ocpus: number;
}

export interface GetCloudMigrationsTargetAssetRecommendedSpecSourceDetail {
    bootVolumeId: string;
    bootVolumeSizeInGbs: string;
    bootVolumeVpusPerGb: string;
    imageId: string;
    kmsKeyId: string;
    sourceType: string;
}

export interface GetCloudMigrationsTargetAssetTestSpec {
    agentConfigs: outputs.GetCloudMigrationsTargetAssetTestSpecAgentConfig[];
    availabilityDomain: string;
    capacityReservationId: string;
    compartmentId: string;
    createVnicDetails: outputs.GetCloudMigrationsTargetAssetTestSpecCreateVnicDetail[];
    dedicatedVmHostId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    faultDomain: string;
    freeformTags: {[key: string]: string};
    hostnameLabel: string;
    instanceOptions: outputs.GetCloudMigrationsTargetAssetTestSpecInstanceOption[];
    ipxeScript: string;
    isPvEncryptionInTransitEnabled: boolean;
    preemptibleInstanceConfigs: outputs.GetCloudMigrationsTargetAssetTestSpecPreemptibleInstanceConfig[];
    shape: string;
    shapeConfigs: outputs.GetCloudMigrationsTargetAssetTestSpecShapeConfig[];
    sourceDetails: outputs.GetCloudMigrationsTargetAssetTestSpecSourceDetail[];
}

export interface GetCloudMigrationsTargetAssetTestSpecAgentConfig {
    areAllPluginsDisabled: boolean;
    isManagementDisabled: boolean;
    isMonitoringDisabled: boolean;
    pluginsConfigs: outputs.GetCloudMigrationsTargetAssetTestSpecAgentConfigPluginsConfig[];
}

export interface GetCloudMigrationsTargetAssetTestSpecAgentConfigPluginsConfig {
    desiredState: string;
    name: string;
}

export interface GetCloudMigrationsTargetAssetTestSpecCreateVnicDetail {
    assignPrivateDnsRecord: boolean;
    assignPublicIp: boolean;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    hostnameLabel: string;
    nsgIds: string[];
    privateIp: string;
    skipSourceDestCheck: boolean;
    subnetId: string;
    vlanId: string;
}

export interface GetCloudMigrationsTargetAssetTestSpecInstanceOption {
    areLegacyImdsEndpointsDisabled: boolean;
}

export interface GetCloudMigrationsTargetAssetTestSpecPreemptibleInstanceConfig {
    preemptionActions: outputs.GetCloudMigrationsTargetAssetTestSpecPreemptibleInstanceConfigPreemptionAction[];
}

export interface GetCloudMigrationsTargetAssetTestSpecPreemptibleInstanceConfigPreemptionAction {
    preserveBootVolume: boolean;
    type: string;
}

export interface GetCloudMigrationsTargetAssetTestSpecShapeConfig {
    baselineOcpuUtilization: string;
    memoryInGbs: number;
    ocpus: number;
}

export interface GetCloudMigrationsTargetAssetTestSpecSourceDetail {
    bootVolumeId: string;
    bootVolumeSizeInGbs: string;
    bootVolumeVpusPerGb: string;
    imageId: string;
    kmsKeyId: string;
    sourceType: string;
}

export interface GetCloudMigrationsTargetAssetUserSpec {
    agentConfigs: outputs.GetCloudMigrationsTargetAssetUserSpecAgentConfig[];
    availabilityDomain: string;
    capacityReservationId: string;
    compartmentId: string;
    createVnicDetails: outputs.GetCloudMigrationsTargetAssetUserSpecCreateVnicDetail[];
    dedicatedVmHostId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    faultDomain: string;
    freeformTags: {[key: string]: string};
    hostnameLabel: string;
    instanceOptions: outputs.GetCloudMigrationsTargetAssetUserSpecInstanceOption[];
    ipxeScript: string;
    isPvEncryptionInTransitEnabled: boolean;
    preemptibleInstanceConfigs: outputs.GetCloudMigrationsTargetAssetUserSpecPreemptibleInstanceConfig[];
    shape: string;
    shapeConfigs: outputs.GetCloudMigrationsTargetAssetUserSpecShapeConfig[];
    sourceDetails: outputs.GetCloudMigrationsTargetAssetUserSpecSourceDetail[];
}

export interface GetCloudMigrationsTargetAssetUserSpecAgentConfig {
    areAllPluginsDisabled: boolean;
    isManagementDisabled: boolean;
    isMonitoringDisabled: boolean;
    pluginsConfigs: outputs.GetCloudMigrationsTargetAssetUserSpecAgentConfigPluginsConfig[];
}

export interface GetCloudMigrationsTargetAssetUserSpecAgentConfigPluginsConfig {
    desiredState: string;
    name: string;
}

export interface GetCloudMigrationsTargetAssetUserSpecCreateVnicDetail {
    assignPrivateDnsRecord: boolean;
    assignPublicIp: boolean;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    hostnameLabel: string;
    nsgIds: string[];
    privateIp: string;
    skipSourceDestCheck: boolean;
    subnetId: string;
    vlanId: string;
}

export interface GetCloudMigrationsTargetAssetUserSpecInstanceOption {
    areLegacyImdsEndpointsDisabled: boolean;
}

export interface GetCloudMigrationsTargetAssetUserSpecPreemptibleInstanceConfig {
    preemptionActions: outputs.GetCloudMigrationsTargetAssetUserSpecPreemptibleInstanceConfigPreemptionAction[];
}

export interface GetCloudMigrationsTargetAssetUserSpecPreemptibleInstanceConfigPreemptionAction {
    preserveBootVolume: boolean;
    type: string;
}

export interface GetCloudMigrationsTargetAssetUserSpecShapeConfig {
    baselineOcpuUtilization: string;
    memoryInGbs: number;
    ocpus: number;
}

export interface GetCloudMigrationsTargetAssetUserSpecSourceDetail {
    bootVolumeId: string;
    bootVolumeSizeInGbs: string;
    bootVolumeVpusPerGb: string;
    imageId: string;
    kmsKeyId: string;
    sourceType: string;
}

export interface GetCloudMigrationsTargetAssetsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCloudMigrationsTargetAssetsTargetAssetCollection {
    items: outputs.GetCloudMigrationsTargetAssetsTargetAssetCollectionItem[];
}

export interface GetCloudMigrationsTargetAssetsTargetAssetCollectionItem {
    blockVolumesPerformance: number;
    compartmentId: string;
    compatibilityMessages: outputs.GetCloudMigrationsTargetAssetsTargetAssetCollectionItemCompatibilityMessage[];
    createdResourceId: string;
    displayName: string;
    estimatedCosts: outputs.GetCloudMigrationsTargetAssetsTargetAssetCollectionItemEstimatedCost[];
    id: string;
    isExcludedFromExecution: boolean;
    lifecycleDetails: string;
    migrationAssets: outputs.GetCloudMigrationsTargetAssetsTargetAssetCollectionItemMigrationAsset[];
    migrationPlanId: string;
    msLicense: string;
    preferredShapeType: string;
    recommendedSpecs: outputs.GetCloudMigrationsTargetAssetsTargetAssetCollectionItemRecommendedSpec[];
    state: string;
    testSpecs: outputs.GetCloudMigrationsTargetAssetsTargetAssetCollectionItemTestSpec[];
    timeAssessed: string;
    timeCreated: string;
    timeUpdated: string;
    type: string;
    userSpecs: outputs.GetCloudMigrationsTargetAssetsTargetAssetCollectionItemUserSpec[];
}

export interface GetCloudMigrationsTargetAssetsTargetAssetCollectionItemCompatibilityMessage {
    message: string;
    name: string;
    severity: string;
}

export interface GetCloudMigrationsTargetAssetsTargetAssetCollectionItemEstimatedCost {
    computes: outputs.GetCloudMigrationsTargetAssetsTargetAssetCollectionItemEstimatedCostCompute[];
    currencyCode: string;
    osImages: outputs.GetCloudMigrationsTargetAssetsTargetAssetCollectionItemEstimatedCostOsImage[];
    storages: outputs.GetCloudMigrationsTargetAssetsTargetAssetCollectionItemEstimatedCostStorage[];
    subscriptionId: string;
    totalEstimationPerMonth: number;
    totalEstimationPerMonthBySubscription: number;
}

export interface GetCloudMigrationsTargetAssetsTargetAssetCollectionItemEstimatedCostCompute {
    gpuCount: number;
    gpuPerHour: number;
    gpuPerHourBySubscription: number;
    memoryAmountGb: number;
    memoryGbPerHour: number;
    memoryGbPerHourBySubscription: number;
    ocpuCount: number;
    ocpuPerHour: number;
    ocpuPerHourBySubscription: number;
    totalPerHour: number;
    totalPerHourBySubscription: number;
}

export interface GetCloudMigrationsTargetAssetsTargetAssetCollectionItemEstimatedCostOsImage {
    totalPerHour: number;
    totalPerHourBySubscription: number;
}

export interface GetCloudMigrationsTargetAssetsTargetAssetCollectionItemEstimatedCostStorage {
    totalGbPerMonth: number;
    totalGbPerMonthBySubscription: number;
    volumes: outputs.GetCloudMigrationsTargetAssetsTargetAssetCollectionItemEstimatedCostStorageVolume[];
}

export interface GetCloudMigrationsTargetAssetsTargetAssetCollectionItemEstimatedCostStorageVolume {
    capacityGb: number;
    description: string;
    totalGbPerMonth: number;
    totalGbPerMonthBySubscription: number;
}

export interface GetCloudMigrationsTargetAssetsTargetAssetCollectionItemMigrationAsset {
    availabilityDomain: string;
    compartmentId: string;
    dependedOnBies: string[];
    dependsOns: string[];
    displayName: string;
    id: string;
    lifecycleDetails: string;
    migrationId: string;
    notifications: string[];
    parentSnapshot: string;
    replicationCompartmentId: string;
    replicationScheduleId: string;
    snapShotBucketName: string;
    snapshots: {[key: string]: string};
    sourceAssetData: {[key: string]: string};
    sourceAssetId: string;
    state: string;
    tenancyId: string;
    timeCreated: string;
    timeUpdated: string;
    type: string;
}

export interface GetCloudMigrationsTargetAssetsTargetAssetCollectionItemRecommendedSpec {
    agentConfigs: outputs.GetCloudMigrationsTargetAssetsTargetAssetCollectionItemRecommendedSpecAgentConfig[];
    availabilityDomain: string;
    capacityReservationId: string;
    compartmentId: string;
    createVnicDetails: outputs.GetCloudMigrationsTargetAssetsTargetAssetCollectionItemRecommendedSpecCreateVnicDetail[];
    dedicatedVmHostId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    faultDomain: string;
    freeformTags: {[key: string]: string};
    hostnameLabel: string;
    instanceOptions: outputs.GetCloudMigrationsTargetAssetsTargetAssetCollectionItemRecommendedSpecInstanceOption[];
    ipxeScript: string;
    isPvEncryptionInTransitEnabled: boolean;
    preemptibleInstanceConfigs: outputs.GetCloudMigrationsTargetAssetsTargetAssetCollectionItemRecommendedSpecPreemptibleInstanceConfig[];
    shape: string;
    shapeConfigs: outputs.GetCloudMigrationsTargetAssetsTargetAssetCollectionItemRecommendedSpecShapeConfig[];
    sourceDetails: outputs.GetCloudMigrationsTargetAssetsTargetAssetCollectionItemRecommendedSpecSourceDetail[];
}

export interface GetCloudMigrationsTargetAssetsTargetAssetCollectionItemRecommendedSpecAgentConfig {
    areAllPluginsDisabled: boolean;
    isManagementDisabled: boolean;
    isMonitoringDisabled: boolean;
    pluginsConfigs: outputs.GetCloudMigrationsTargetAssetsTargetAssetCollectionItemRecommendedSpecAgentConfigPluginsConfig[];
}

export interface GetCloudMigrationsTargetAssetsTargetAssetCollectionItemRecommendedSpecAgentConfigPluginsConfig {
    desiredState: string;
    name: string;
}

export interface GetCloudMigrationsTargetAssetsTargetAssetCollectionItemRecommendedSpecCreateVnicDetail {
    assignPrivateDnsRecord: boolean;
    assignPublicIp: boolean;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    hostnameLabel: string;
    nsgIds: string[];
    privateIp: string;
    skipSourceDestCheck: boolean;
    subnetId: string;
    vlanId: string;
}

export interface GetCloudMigrationsTargetAssetsTargetAssetCollectionItemRecommendedSpecInstanceOption {
    areLegacyImdsEndpointsDisabled: boolean;
}

export interface GetCloudMigrationsTargetAssetsTargetAssetCollectionItemRecommendedSpecPreemptibleInstanceConfig {
    preemptionActions: outputs.GetCloudMigrationsTargetAssetsTargetAssetCollectionItemRecommendedSpecPreemptibleInstanceConfigPreemptionAction[];
}

export interface GetCloudMigrationsTargetAssetsTargetAssetCollectionItemRecommendedSpecPreemptibleInstanceConfigPreemptionAction {
    preserveBootVolume: boolean;
    type: string;
}

export interface GetCloudMigrationsTargetAssetsTargetAssetCollectionItemRecommendedSpecShapeConfig {
    baselineOcpuUtilization: string;
    memoryInGbs: number;
    ocpus: number;
}

export interface GetCloudMigrationsTargetAssetsTargetAssetCollectionItemRecommendedSpecSourceDetail {
    bootVolumeId: string;
    bootVolumeSizeInGbs: string;
    bootVolumeVpusPerGb: string;
    imageId: string;
    kmsKeyId: string;
    sourceType: string;
}

export interface GetCloudMigrationsTargetAssetsTargetAssetCollectionItemTestSpec {
    agentConfigs: outputs.GetCloudMigrationsTargetAssetsTargetAssetCollectionItemTestSpecAgentConfig[];
    availabilityDomain: string;
    capacityReservationId: string;
    compartmentId: string;
    createVnicDetails: outputs.GetCloudMigrationsTargetAssetsTargetAssetCollectionItemTestSpecCreateVnicDetail[];
    dedicatedVmHostId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    faultDomain: string;
    freeformTags: {[key: string]: string};
    hostnameLabel: string;
    instanceOptions: outputs.GetCloudMigrationsTargetAssetsTargetAssetCollectionItemTestSpecInstanceOption[];
    ipxeScript: string;
    isPvEncryptionInTransitEnabled: boolean;
    preemptibleInstanceConfigs: outputs.GetCloudMigrationsTargetAssetsTargetAssetCollectionItemTestSpecPreemptibleInstanceConfig[];
    shape: string;
    shapeConfigs: outputs.GetCloudMigrationsTargetAssetsTargetAssetCollectionItemTestSpecShapeConfig[];
    sourceDetails: outputs.GetCloudMigrationsTargetAssetsTargetAssetCollectionItemTestSpecSourceDetail[];
}

export interface GetCloudMigrationsTargetAssetsTargetAssetCollectionItemTestSpecAgentConfig {
    areAllPluginsDisabled: boolean;
    isManagementDisabled: boolean;
    isMonitoringDisabled: boolean;
    pluginsConfigs: outputs.GetCloudMigrationsTargetAssetsTargetAssetCollectionItemTestSpecAgentConfigPluginsConfig[];
}

export interface GetCloudMigrationsTargetAssetsTargetAssetCollectionItemTestSpecAgentConfigPluginsConfig {
    desiredState: string;
    name: string;
}

export interface GetCloudMigrationsTargetAssetsTargetAssetCollectionItemTestSpecCreateVnicDetail {
    assignPrivateDnsRecord: boolean;
    assignPublicIp: boolean;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    hostnameLabel: string;
    nsgIds: string[];
    privateIp: string;
    skipSourceDestCheck: boolean;
    subnetId: string;
    vlanId: string;
}

export interface GetCloudMigrationsTargetAssetsTargetAssetCollectionItemTestSpecInstanceOption {
    areLegacyImdsEndpointsDisabled: boolean;
}

export interface GetCloudMigrationsTargetAssetsTargetAssetCollectionItemTestSpecPreemptibleInstanceConfig {
    preemptionActions: outputs.GetCloudMigrationsTargetAssetsTargetAssetCollectionItemTestSpecPreemptibleInstanceConfigPreemptionAction[];
}

export interface GetCloudMigrationsTargetAssetsTargetAssetCollectionItemTestSpecPreemptibleInstanceConfigPreemptionAction {
    preserveBootVolume: boolean;
    type: string;
}

export interface GetCloudMigrationsTargetAssetsTargetAssetCollectionItemTestSpecShapeConfig {
    baselineOcpuUtilization: string;
    memoryInGbs: number;
    ocpus: number;
}

export interface GetCloudMigrationsTargetAssetsTargetAssetCollectionItemTestSpecSourceDetail {
    bootVolumeId: string;
    bootVolumeSizeInGbs: string;
    bootVolumeVpusPerGb: string;
    imageId: string;
    kmsKeyId: string;
    sourceType: string;
}

export interface GetCloudMigrationsTargetAssetsTargetAssetCollectionItemUserSpec {
    agentConfigs: outputs.GetCloudMigrationsTargetAssetsTargetAssetCollectionItemUserSpecAgentConfig[];
    availabilityDomain: string;
    capacityReservationId: string;
    compartmentId: string;
    createVnicDetails: outputs.GetCloudMigrationsTargetAssetsTargetAssetCollectionItemUserSpecCreateVnicDetail[];
    dedicatedVmHostId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    faultDomain: string;
    freeformTags: {[key: string]: string};
    hostnameLabel: string;
    instanceOptions: outputs.GetCloudMigrationsTargetAssetsTargetAssetCollectionItemUserSpecInstanceOption[];
    ipxeScript: string;
    isPvEncryptionInTransitEnabled: boolean;
    preemptibleInstanceConfigs: outputs.GetCloudMigrationsTargetAssetsTargetAssetCollectionItemUserSpecPreemptibleInstanceConfig[];
    shape: string;
    shapeConfigs: outputs.GetCloudMigrationsTargetAssetsTargetAssetCollectionItemUserSpecShapeConfig[];
    sourceDetails: outputs.GetCloudMigrationsTargetAssetsTargetAssetCollectionItemUserSpecSourceDetail[];
}

export interface GetCloudMigrationsTargetAssetsTargetAssetCollectionItemUserSpecAgentConfig {
    areAllPluginsDisabled: boolean;
    isManagementDisabled: boolean;
    isMonitoringDisabled: boolean;
    pluginsConfigs: outputs.GetCloudMigrationsTargetAssetsTargetAssetCollectionItemUserSpecAgentConfigPluginsConfig[];
}

export interface GetCloudMigrationsTargetAssetsTargetAssetCollectionItemUserSpecAgentConfigPluginsConfig {
    desiredState: string;
    name: string;
}

export interface GetCloudMigrationsTargetAssetsTargetAssetCollectionItemUserSpecCreateVnicDetail {
    assignPrivateDnsRecord: boolean;
    assignPublicIp: boolean;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    hostnameLabel: string;
    nsgIds: string[];
    privateIp: string;
    skipSourceDestCheck: boolean;
    subnetId: string;
    vlanId: string;
}

export interface GetCloudMigrationsTargetAssetsTargetAssetCollectionItemUserSpecInstanceOption {
    areLegacyImdsEndpointsDisabled: boolean;
}

export interface GetCloudMigrationsTargetAssetsTargetAssetCollectionItemUserSpecPreemptibleInstanceConfig {
    preemptionActions: outputs.GetCloudMigrationsTargetAssetsTargetAssetCollectionItemUserSpecPreemptibleInstanceConfigPreemptionAction[];
}

export interface GetCloudMigrationsTargetAssetsTargetAssetCollectionItemUserSpecPreemptibleInstanceConfigPreemptionAction {
    preserveBootVolume: boolean;
    type: string;
}

export interface GetCloudMigrationsTargetAssetsTargetAssetCollectionItemUserSpecShapeConfig {
    baselineOcpuUtilization: string;
    memoryInGbs: number;
    ocpus: number;
}

export interface GetCloudMigrationsTargetAssetsTargetAssetCollectionItemUserSpecSourceDetail {
    bootVolumeId: string;
    bootVolumeSizeInGbs: string;
    bootVolumeVpusPerGb: string;
    imageId: string;
    kmsKeyId: string;
    sourceType: string;
}

export interface GetClusterPlacementGroupsClusterPlacementGroupCapability {
    items: outputs.GetClusterPlacementGroupsClusterPlacementGroupCapabilityItem[];
}

export interface GetClusterPlacementGroupsClusterPlacementGroupCapabilityItem {
    name: string;
    service: string;
}

export interface GetClusterPlacementGroupsClusterPlacementGroupPlacementInstruction {
    type: string;
    value: string;
}

export interface GetClusterPlacementGroupsClusterPlacementGroupsClusterPlacementGroupCollection {
    items: outputs.GetClusterPlacementGroupsClusterPlacementGroupsClusterPlacementGroupCollectionItem[];
}

export interface GetClusterPlacementGroupsClusterPlacementGroupsClusterPlacementGroupCollectionItem {
    availabilityDomain: string;
    capabilities: outputs.GetClusterPlacementGroupsClusterPlacementGroupsClusterPlacementGroupCollectionItemCapability[];
    clusterPlacementGroupType: string;
    compartmentId: string;
    definedTags: {[key: string]: string};
    description: string;
    freeformTags: {[key: string]: string};
    id: string;
    lifecycleDetails: string;
    name: string;
    opcDryRun: boolean;
    placementInstructions: outputs.GetClusterPlacementGroupsClusterPlacementGroupsClusterPlacementGroupCollectionItemPlacementInstruction[];
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
}

export interface GetClusterPlacementGroupsClusterPlacementGroupsClusterPlacementGroupCollectionItemCapability {
    items: outputs.GetClusterPlacementGroupsClusterPlacementGroupsClusterPlacementGroupCollectionItemCapabilityItem[];
}

export interface GetClusterPlacementGroupsClusterPlacementGroupsClusterPlacementGroupCollectionItemCapabilityItem {
    name: string;
    service: string;
}

export interface GetClusterPlacementGroupsClusterPlacementGroupsClusterPlacementGroupCollectionItemPlacementInstruction {
    type: string;
    value: string;
}

export interface GetClusterPlacementGroupsClusterPlacementGroupsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetComputeCloudAtCustomerCccInfrastructureInfrastructureInventory {
    capacityStorageTrayCount: number;
    computeNodeCount: number;
    managementNodeCount: number;
    performanceStorageTrayCount: number;
    serialNumber: string;
}

export interface GetComputeCloudAtCustomerCccInfrastructureInfrastructureNetworkConfiguration {
    dnsIps: string[];
    infrastructureRoutingDynamics: outputs.GetComputeCloudAtCustomerCccInfrastructureInfrastructureNetworkConfigurationInfrastructureRoutingDynamic[];
    infrastructureRoutingStatics: outputs.GetComputeCloudAtCustomerCccInfrastructureInfrastructureNetworkConfigurationInfrastructureRoutingStatic[];
    managementNodes: outputs.GetComputeCloudAtCustomerCccInfrastructureInfrastructureNetworkConfigurationManagementNode[];
    mgmtVipHostname: string;
    mgmtVipIp: string;
    spineIps: string[];
    spineVip: string;
    uplinkDomain: string;
    uplinkGatewayIp: string;
    uplinkNetmask: string;
    uplinkPortCount: number;
    uplinkPortForwardErrorCorrection: string;
    uplinkPortSpeedInGbps: number;
    uplinkVlanMtu: number;
}

export interface GetComputeCloudAtCustomerCccInfrastructureInfrastructureNetworkConfigurationInfrastructureRoutingDynamic {
    bgpTopology: string;
    oracleAsn: number;
    peerInformations: outputs.GetComputeCloudAtCustomerCccInfrastructureInfrastructureNetworkConfigurationInfrastructureRoutingDynamicPeerInformation[];
}

export interface GetComputeCloudAtCustomerCccInfrastructureInfrastructureNetworkConfigurationInfrastructureRoutingDynamicPeerInformation {
    asn: number;
    ip: string;
}

export interface GetComputeCloudAtCustomerCccInfrastructureInfrastructureNetworkConfigurationInfrastructureRoutingStatic {
    uplinkHsrpGroup: number;
    uplinkVlan: number;
}

export interface GetComputeCloudAtCustomerCccInfrastructureInfrastructureNetworkConfigurationManagementNode {
    hostname: string;
    ip: string;
}

export interface GetComputeCloudAtCustomerCccInfrastructureUpgradeInformation {
    currentVersion: string;
    isActive: boolean;
    scheduledUpgradeDuration: string;
    timeOfScheduledUpgrade: string;
}

export interface GetComputeCloudAtCustomerCccInfrastructuresCccInfrastructureCollection {
    items: outputs.GetComputeCloudAtCustomerCccInfrastructuresCccInfrastructureCollectionItem[];
}

export interface GetComputeCloudAtCustomerCccInfrastructuresCccInfrastructureCollectionItem {
    cccUpgradeScheduleId: string;
    compartmentId: string;
    connectionDetails: string;
    connectionState: string;
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    infrastructureInventories: outputs.GetComputeCloudAtCustomerCccInfrastructuresCccInfrastructureCollectionItemInfrastructureInventory[];
    infrastructureNetworkConfigurations: outputs.GetComputeCloudAtCustomerCccInfrastructuresCccInfrastructureCollectionItemInfrastructureNetworkConfiguration[];
    lifecycleDetails: string;
    provisioningFingerprint: string;
    provisioningPin: string;
    shortName: string;
    state: string;
    subnetId: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
    upgradeInformations: outputs.GetComputeCloudAtCustomerCccInfrastructuresCccInfrastructureCollectionItemUpgradeInformation[];
}

export interface GetComputeCloudAtCustomerCccInfrastructuresCccInfrastructureCollectionItemInfrastructureInventory {
    capacityStorageTrayCount: number;
    computeNodeCount: number;
    managementNodeCount: number;
    performanceStorageTrayCount: number;
    serialNumber: string;
}

export interface GetComputeCloudAtCustomerCccInfrastructuresCccInfrastructureCollectionItemInfrastructureNetworkConfiguration {
    dnsIps: string[];
    infrastructureRoutingDynamics: outputs.GetComputeCloudAtCustomerCccInfrastructuresCccInfrastructureCollectionItemInfrastructureNetworkConfigurationInfrastructureRoutingDynamic[];
    infrastructureRoutingStatics: outputs.GetComputeCloudAtCustomerCccInfrastructuresCccInfrastructureCollectionItemInfrastructureNetworkConfigurationInfrastructureRoutingStatic[];
    managementNodes: outputs.GetComputeCloudAtCustomerCccInfrastructuresCccInfrastructureCollectionItemInfrastructureNetworkConfigurationManagementNode[];
    mgmtVipHostname: string;
    mgmtVipIp: string;
    spineIps: string[];
    spineVip: string;
    uplinkDomain: string;
    uplinkGatewayIp: string;
    uplinkNetmask: string;
    uplinkPortCount: number;
    uplinkPortForwardErrorCorrection: string;
    uplinkPortSpeedInGbps: number;
    uplinkVlanMtu: number;
}

export interface GetComputeCloudAtCustomerCccInfrastructuresCccInfrastructureCollectionItemInfrastructureNetworkConfigurationInfrastructureRoutingDynamic {
    bgpTopology: string;
    oracleAsn: number;
    peerInformations: outputs.GetComputeCloudAtCustomerCccInfrastructuresCccInfrastructureCollectionItemInfrastructureNetworkConfigurationInfrastructureRoutingDynamicPeerInformation[];
}

export interface GetComputeCloudAtCustomerCccInfrastructuresCccInfrastructureCollectionItemInfrastructureNetworkConfigurationInfrastructureRoutingDynamicPeerInformation {
    asn: number;
    ip: string;
}

export interface GetComputeCloudAtCustomerCccInfrastructuresCccInfrastructureCollectionItemInfrastructureNetworkConfigurationInfrastructureRoutingStatic {
    uplinkHsrpGroup: number;
    uplinkVlan: number;
}

export interface GetComputeCloudAtCustomerCccInfrastructuresCccInfrastructureCollectionItemInfrastructureNetworkConfigurationManagementNode {
    hostname: string;
    ip: string;
}

export interface GetComputeCloudAtCustomerCccInfrastructuresCccInfrastructureCollectionItemUpgradeInformation {
    currentVersion: string;
    isActive: boolean;
    scheduledUpgradeDuration: string;
    timeOfScheduledUpgrade: string;
}

export interface GetComputeCloudAtCustomerCccInfrastructuresFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetComputeCloudAtCustomerCccUpgradeScheduleEvent {
    description: string;
    name: string;
    scheduleEventDuration: string;
    scheduleEventRecurrences: string;
    timeStart: string;
}

export interface GetComputeCloudAtCustomerCccUpgradeSchedulesCccUpgradeScheduleCollection {
    items: outputs.GetComputeCloudAtCustomerCccUpgradeSchedulesCccUpgradeScheduleCollectionItem[];
}

export interface GetComputeCloudAtCustomerCccUpgradeSchedulesCccUpgradeScheduleCollectionItem {
    compartmentId: string;
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    events: outputs.GetComputeCloudAtCustomerCccUpgradeSchedulesCccUpgradeScheduleCollectionItemEvent[];
    freeformTags: {[key: string]: string};
    id: string;
    infrastructureIds: string[];
    lifecycleDetails: string;
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
}

export interface GetComputeCloudAtCustomerCccUpgradeSchedulesCccUpgradeScheduleCollectionItemEvent {
    description: string;
    name: string;
    scheduleEventDuration: string;
    scheduleEventRecurrences: string;
    timeStart: string;
}

export interface GetComputeCloudAtCustomerCccUpgradeSchedulesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetComputeinstanceagentInstanceAgentPluginsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetComputeinstanceagentInstanceAgentPluginsInstanceAgentPlugin {
    message: string;
    name: string;
    status: string;
    timeLastUpdatedUtc: string;
}

export interface GetComputeinstanceagentInstanceAvailablePluginsAvailablePlugin {
    isEnabledByDefault: boolean;
    isSupported: boolean;
    name: string;
    summary: string;
}

export interface GetComputeinstanceagentInstanceAvailablePluginsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetContainerInstancesContainerInstanceContainer {
    arguments: string[];
    availabilityDomain: string;
    commands: string[];
    compartmentId: string;
    containerId: string;
    containerInstanceId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    environmentVariables: {[key: string]: string};
    exitCode: number;
    faultDomain: string;
    freeformTags: {[key: string]: string};
    healthChecks: outputs.GetContainerInstancesContainerInstanceContainerHealthCheck[];
    imageUrl: string;
    isResourcePrincipalDisabled: boolean;
    lifecycleDetails: string;
    resourceConfigs: outputs.GetContainerInstancesContainerInstanceContainerResourceConfig[];
    securityContexts: outputs.GetContainerInstancesContainerInstanceContainerSecurityContext[];
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeTerminated: string;
    timeUpdated: string;
    volumeMounts: outputs.GetContainerInstancesContainerInstanceContainerVolumeMount[];
    workingDirectory: string;
}

export interface GetContainerInstancesContainerInstanceContainerHealthCheck {
    commands: string[];
    failureAction: string;
    failureThreshold: number;
    headers: outputs.GetContainerInstancesContainerInstanceContainerHealthCheckHeader[];
    healthCheckType: string;
    initialDelayInSeconds: number;
    intervalInSeconds: number;
    name: string;
    path: string;
    port: number;
    status: string;
    statusDetails: string;
    successThreshold: number;
    timeoutInSeconds: number;
}

export interface GetContainerInstancesContainerInstanceContainerHealthCheckHeader {
    name: string;
    value: string;
}

export interface GetContainerInstancesContainerInstanceContainerResourceConfig {
    memoryLimitInGbs: number;
    vcpusLimit: number;
}

export interface GetContainerInstancesContainerInstanceContainerSecurityContext {
    capabilities: outputs.GetContainerInstancesContainerInstanceContainerSecurityContextCapability[];
    isNonRootUserCheckEnabled: boolean;
    isRootFileSystemReadonly: boolean;
    runAsGroup: number;
    runAsUser: number;
    securityContextType: string;
}

export interface GetContainerInstancesContainerInstanceContainerSecurityContextCapability {
    addCapabilities: string[];
    dropCapabilities: string[];
}

export interface GetContainerInstancesContainerInstanceContainerVolumeMount {
    isReadOnly: boolean;
    mountPath: string;
    partition: number;
    subPath: string;
    volumeName: string;
}

export interface GetContainerInstancesContainerInstanceDnsConfig {
    nameservers: string[];
    options: string[];
    searches: string[];
}

export interface GetContainerInstancesContainerInstanceImagePullSecret {
    password: string;
    registryEndpoint: string;
    secretId: string;
    secretType: string;
    username: string;
}

export interface GetContainerInstancesContainerInstanceShapeConfig {
    memoryInGbs: number;
    networkingBandwidthInGbps: number;
    ocpus: number;
    processorDescription: string;
}

export interface GetContainerInstancesContainerInstanceShapeItem {
    memoryOptions: outputs.GetContainerInstancesContainerInstanceShapeItemMemoryOption[];
    name: string;
    networkingBandwidthOptions: outputs.GetContainerInstancesContainerInstanceShapeItemNetworkingBandwidthOption[];
    ocpuOptions: outputs.GetContainerInstancesContainerInstanceShapeItemOcpuOption[];
    processorDescription: string;
}

export interface GetContainerInstancesContainerInstanceShapeItemMemoryOption {
    defaultPerOcpuInGbs: number;
    maxInGbs: number;
    maxPerOcpuInGbs: number;
    minInGbs: number;
    minPerOcpuInGbs: number;
}

export interface GetContainerInstancesContainerInstanceShapeItemNetworkingBandwidthOption {
    defaultPerOcpuInGbps: number;
    maxInGbps: number;
    minInGbps: number;
}

export interface GetContainerInstancesContainerInstanceShapeItemOcpuOption {
    max: number;
    min: number;
}

export interface GetContainerInstancesContainerInstanceShapesContainerInstanceShapeCollection {
    items: outputs.GetContainerInstancesContainerInstanceShapesContainerInstanceShapeCollectionItem[];
}

export interface GetContainerInstancesContainerInstanceShapesContainerInstanceShapeCollectionItem {
    memoryOptions: outputs.GetContainerInstancesContainerInstanceShapesContainerInstanceShapeCollectionItemMemoryOption[];
    name: string;
    networkingBandwidthOptions: outputs.GetContainerInstancesContainerInstanceShapesContainerInstanceShapeCollectionItemNetworkingBandwidthOption[];
    ocpuOptions: outputs.GetContainerInstancesContainerInstanceShapesContainerInstanceShapeCollectionItemOcpuOption[];
    processorDescription: string;
}

export interface GetContainerInstancesContainerInstanceShapesContainerInstanceShapeCollectionItemMemoryOption {
    defaultPerOcpuInGbs: number;
    maxInGbs: number;
    maxPerOcpuInGbs: number;
    minInGbs: number;
    minPerOcpuInGbs: number;
}

export interface GetContainerInstancesContainerInstanceShapesContainerInstanceShapeCollectionItemNetworkingBandwidthOption {
    defaultPerOcpuInGbps: number;
    maxInGbps: number;
    minInGbps: number;
}

export interface GetContainerInstancesContainerInstanceShapesContainerInstanceShapeCollectionItemOcpuOption {
    max: number;
    min: number;
}

export interface GetContainerInstancesContainerInstanceShapesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetContainerInstancesContainerInstanceVnic {
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    hostnameLabel: string;
    isPublicIpAssigned: boolean;
    nsgIds: string[];
    privateIp: string;
    skipSourceDestCheck: boolean;
    subnetId: string;
    vnicId: string;
}

export interface GetContainerInstancesContainerInstanceVolume {
    backingStore: string;
    configs: outputs.GetContainerInstancesContainerInstanceVolumeConfig[];
    name: string;
    volumeType: string;
}

export interface GetContainerInstancesContainerInstanceVolumeConfig {
    data: string;
    fileName: string;
    path: string;
}

export interface GetContainerInstancesContainerInstancesContainerInstanceCollection {
    items: outputs.GetContainerInstancesContainerInstancesContainerInstanceCollectionItem[];
}

export interface GetContainerInstancesContainerInstancesContainerInstanceCollectionItem {
    availabilityDomain: string;
    compartmentId: string;
    containerCount: number;
    containerRestartPolicy: string;
    containers: outputs.GetContainerInstancesContainerInstancesContainerInstanceCollectionItemContainer[];
    definedTags: {[key: string]: string};
    displayName: string;
    dnsConfigs: outputs.GetContainerInstancesContainerInstancesContainerInstanceCollectionItemDnsConfig[];
    faultDomain: string;
    freeformTags: {[key: string]: string};
    gracefulShutdownTimeoutInSeconds: string;
    id: string;
    imagePullSecrets: outputs.GetContainerInstancesContainerInstancesContainerInstanceCollectionItemImagePullSecret[];
    lifecycleDetails: string;
    shape: string;
    shapeConfigs: outputs.GetContainerInstancesContainerInstancesContainerInstanceCollectionItemShapeConfig[];
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
    vnics: outputs.GetContainerInstancesContainerInstancesContainerInstanceCollectionItemVnic[];
    volumeCount: number;
    volumes: outputs.GetContainerInstancesContainerInstancesContainerInstanceCollectionItemVolume[];
}

export interface GetContainerInstancesContainerInstancesContainerInstanceCollectionItemContainer {
    arguments: string[];
    availabilityDomain: string;
    commands: string[];
    compartmentId: string;
    containerId: string;
    containerInstanceId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    environmentVariables: {[key: string]: string};
    exitCode: number;
    faultDomain: string;
    freeformTags: {[key: string]: string};
    healthChecks: outputs.GetContainerInstancesContainerInstancesContainerInstanceCollectionItemContainerHealthCheck[];
    imageUrl: string;
    isResourcePrincipalDisabled: boolean;
    lifecycleDetails: string;
    resourceConfigs: outputs.GetContainerInstancesContainerInstancesContainerInstanceCollectionItemContainerResourceConfig[];
    securityContexts: outputs.GetContainerInstancesContainerInstancesContainerInstanceCollectionItemContainerSecurityContext[];
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeTerminated: string;
    timeUpdated: string;
    volumeMounts: outputs.GetContainerInstancesContainerInstancesContainerInstanceCollectionItemContainerVolumeMount[];
    workingDirectory: string;
}

export interface GetContainerInstancesContainerInstancesContainerInstanceCollectionItemContainerHealthCheck {
    commands: string[];
    failureAction: string;
    failureThreshold: number;
    headers: outputs.GetContainerInstancesContainerInstancesContainerInstanceCollectionItemContainerHealthCheckHeader[];
    healthCheckType: string;
    initialDelayInSeconds: number;
    intervalInSeconds: number;
    name: string;
    path: string;
    port: number;
    status: string;
    statusDetails: string;
    successThreshold: number;
    timeoutInSeconds: number;
}

export interface GetContainerInstancesContainerInstancesContainerInstanceCollectionItemContainerHealthCheckHeader {
    name: string;
    value: string;
}

export interface GetContainerInstancesContainerInstancesContainerInstanceCollectionItemContainerResourceConfig {
    memoryLimitInGbs: number;
    vcpusLimit: number;
}

export interface GetContainerInstancesContainerInstancesContainerInstanceCollectionItemContainerSecurityContext {
    capabilities: outputs.GetContainerInstancesContainerInstancesContainerInstanceCollectionItemContainerSecurityContextCapability[];
    isNonRootUserCheckEnabled: boolean;
    isRootFileSystemReadonly: boolean;
    runAsGroup: number;
    runAsUser: number;
    securityContextType: string;
}

export interface GetContainerInstancesContainerInstancesContainerInstanceCollectionItemContainerSecurityContextCapability {
    addCapabilities: string[];
    dropCapabilities: string[];
}

export interface GetContainerInstancesContainerInstancesContainerInstanceCollectionItemContainerVolumeMount {
    isReadOnly: boolean;
    mountPath: string;
    partition: number;
    subPath: string;
    volumeName: string;
}

export interface GetContainerInstancesContainerInstancesContainerInstanceCollectionItemDnsConfig {
    nameservers: string[];
    options: string[];
    searches: string[];
}

export interface GetContainerInstancesContainerInstancesContainerInstanceCollectionItemImagePullSecret {
    password: string;
    registryEndpoint: string;
    secretId: string;
    secretType: string;
    username: string;
}

export interface GetContainerInstancesContainerInstancesContainerInstanceCollectionItemShapeConfig {
    memoryInGbs: number;
    networkingBandwidthInGbps: number;
    ocpus: number;
    processorDescription: string;
}

export interface GetContainerInstancesContainerInstancesContainerInstanceCollectionItemVnic {
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    hostnameLabel: string;
    isPublicIpAssigned: boolean;
    nsgIds: string[];
    privateIp: string;
    skipSourceDestCheck: boolean;
    subnetId: string;
    vnicId: string;
}

export interface GetContainerInstancesContainerInstancesContainerInstanceCollectionItemVolume {
    backingStore: string;
    configs: outputs.GetContainerInstancesContainerInstancesContainerInstanceCollectionItemVolumeConfig[];
    name: string;
    volumeType: string;
}

export interface GetContainerInstancesContainerInstancesContainerInstanceCollectionItemVolumeConfig {
    data: string;
    fileName: string;
    path: string;
}

export interface GetContainerInstancesContainerInstancesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetContainerengineAddonAddonError {
    code: string;
    message: string;
    status: string;
}

export interface GetContainerengineAddonConfiguration {
    key: string;
    value: string;
}

export interface GetContainerengineAddonOptionsAddonOption {
    addonGroup: string;
    addonSchemaVersion: string;
    definedTags: {[key: string]: string};
    description: string;
    freeformTags: {[key: string]: string};
    isEssential: boolean;
    name: string;
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    versions: outputs.GetContainerengineAddonOptionsAddonOptionVersion[];
}

export interface GetContainerengineAddonOptionsAddonOptionVersion {
    configurations: outputs.GetContainerengineAddonOptionsAddonOptionVersionConfiguration[];
    description: string;
    kubernetesVersionFilters: outputs.GetContainerengineAddonOptionsAddonOptionVersionKubernetesVersionFilter[];
    status: string;
    versionNumber: string;
}

export interface GetContainerengineAddonOptionsAddonOptionVersionConfiguration {
    description: string;
    displayName: string;
    isRequired: boolean;
    key: string;
    value: string;
}

export interface GetContainerengineAddonOptionsAddonOptionVersionKubernetesVersionFilter {
    exactKubernetesVersions: string[];
    maximumVersion: string;
    minimalVersion: string;
}

export interface GetContainerengineAddonOptionsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetContainerengineAddonsAddon {
    addonErrors: outputs.GetContainerengineAddonsAddonAddonError[];
    addonName: string;
    clusterId: string;
    configurations: outputs.GetContainerengineAddonsAddonConfiguration[];
    currentInstalledVersion: string;
    removeAddonResourcesOnDelete: boolean;
    state: string;
    timeCreated: string;
    version: string;
}

export interface GetContainerengineAddonsAddonAddonError {
    code: string;
    message: string;
    status: string;
}

export interface GetContainerengineAddonsAddonConfiguration {
    key: string;
    value: string;
}

export interface GetContainerengineAddonsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetContainerengineClusterOptionClusterPodNetworkOption {
    cniType: string;
}

export interface GetContainerengineClusterWorkloadMappingsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetContainerengineClusterWorkloadMappingsWorkloadMapping {
    clusterId: string;
    definedTags: {[key: string]: string};
    freeformTags: {[key: string]: string};
    id: string;
    mappedCompartmentId: string;
    mappedTenancyId: string;
    namespace: string;
    state: string;
    timeCreated: string;
}

export interface GetContainerengineClustersCluster {
    availableKubernetesUpgrades: string[];
    clusterPodNetworkOptions: outputs.GetContainerengineClustersClusterClusterPodNetworkOption[];
    compartmentId: string;
    definedTags: {[key: string]: string};
    endpointConfigs: outputs.GetContainerengineClustersClusterEndpointConfig[];
    endpoints: outputs.GetContainerengineClustersClusterEndpoint[];
    freeformTags: {[key: string]: string};
    id: string;
    imagePolicyConfigs: outputs.GetContainerengineClustersClusterImagePolicyConfig[];
    kmsKeyId: string;
    kubernetesVersion: string;
    lifecycleDetails: string;
    metadatas: outputs.GetContainerengineClustersClusterMetadata[];
    name: string;
    options: outputs.GetContainerengineClustersClusterOption[];
    state: string;
    type: string;
    vcnId: string;
}

export interface GetContainerengineClustersClusterClusterPodNetworkOption {
    cniType: string;
}

export interface GetContainerengineClustersClusterEndpoint {
    kubernetes: string;
    privateEndpoint: string;
    publicEndpoint: string;
    vcnHostnameEndpoint: string;
}

export interface GetContainerengineClustersClusterEndpointConfig {
    isPublicIpEnabled: boolean;
    nsgIds: string[];
    subnetId: string;
}

export interface GetContainerengineClustersClusterImagePolicyConfig {
    isPolicyEnabled: boolean;
    keyDetails: outputs.GetContainerengineClustersClusterImagePolicyConfigKeyDetail[];
}

export interface GetContainerengineClustersClusterImagePolicyConfigKeyDetail {
    kmsKeyId: string;
}

export interface GetContainerengineClustersClusterMetadata {
    createdByUserId: string;
    createdByWorkRequestId: string;
    deletedByUserId: string;
    deletedByWorkRequestId: string;
    timeCreated: string;
    timeCredentialExpiration: string;
    timeDeleted: string;
    timeUpdated: string;
    updatedByUserId: string;
    updatedByWorkRequestId: string;
}

export interface GetContainerengineClustersClusterOption {
    addOns: outputs.GetContainerengineClustersClusterOptionAddOn[];
    admissionControllerOptions: outputs.GetContainerengineClustersClusterOptionAdmissionControllerOption[];
    kubernetesNetworkConfigs: outputs.GetContainerengineClustersClusterOptionKubernetesNetworkConfig[];
    persistentVolumeConfigs: outputs.GetContainerengineClustersClusterOptionPersistentVolumeConfig[];
    serviceLbConfigs: outputs.GetContainerengineClustersClusterOptionServiceLbConfig[];
    serviceLbSubnetIds: string[];
}

export interface GetContainerengineClustersClusterOptionAddOn {
    isKubernetesDashboardEnabled: boolean;
    isTillerEnabled: boolean;
}

export interface GetContainerengineClustersClusterOptionAdmissionControllerOption {
    isPodSecurityPolicyEnabled: boolean;
}

export interface GetContainerengineClustersClusterOptionKubernetesNetworkConfig {
    podsCidr: string;
    servicesCidr: string;
}

export interface GetContainerengineClustersClusterOptionPersistentVolumeConfig {
    definedTags: {[key: string]: string};
    freeformTags: {[key: string]: string};
}

export interface GetContainerengineClustersClusterOptionServiceLbConfig {
    definedTags: {[key: string]: string};
    freeformTags: {[key: string]: string};
}

export interface GetContainerengineClustersFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetContainerengineNodePoolInitialNodeLabel {
    key: string;
    value: string;
}

export interface GetContainerengineNodePoolNode {
    availabilityDomain: string;
    definedTags: {[key: string]: string};
    errors: outputs.GetContainerengineNodePoolNodeError[];
    faultDomain: string;
    freeformTags: {[key: string]: string};
    id: string;
    kubernetesVersion: string;
    lifecycleDetails: string;
    name: string;
    nodePoolId: string;
    privateIp: string;
    publicIp: string;
    state: string;
    subnetId: string;
}

export interface GetContainerengineNodePoolNodeConfigDetail {
    definedTags: {[key: string]: string};
    freeformTags: {[key: string]: string};
    isPvEncryptionInTransitEnabled: boolean;
    kmsKeyId: string;
    nodePoolPodNetworkOptionDetails: outputs.GetContainerengineNodePoolNodeConfigDetailNodePoolPodNetworkOptionDetail[];
    nsgIds: string[];
    placementConfigs: outputs.GetContainerengineNodePoolNodeConfigDetailPlacementConfig[];
    size: number;
}

export interface GetContainerengineNodePoolNodeConfigDetailNodePoolPodNetworkOptionDetail {
    cniType: string;
    maxPodsPerNode: number;
    podNsgIds: string[];
    podSubnetIds: string[];
}

export interface GetContainerengineNodePoolNodeConfigDetailPlacementConfig {
    availabilityDomain: string;
    capacityReservationId: string;
    faultDomains: string[];
    preemptibleNodeConfigs: outputs.GetContainerengineNodePoolNodeConfigDetailPlacementConfigPreemptibleNodeConfig[];
    subnetId: string;
}

export interface GetContainerengineNodePoolNodeConfigDetailPlacementConfigPreemptibleNodeConfig {
    preemptionActions: outputs.GetContainerengineNodePoolNodeConfigDetailPlacementConfigPreemptibleNodeConfigPreemptionAction[];
}

export interface GetContainerengineNodePoolNodeConfigDetailPlacementConfigPreemptibleNodeConfigPreemptionAction {
    isPreserveBootVolume: boolean;
    type: string;
}

export interface GetContainerengineNodePoolNodeError {
    code: string;
    message: string;
    status: string;
}

export interface GetContainerengineNodePoolNodeEvictionNodePoolSetting {
    evictionGraceDuration: string;
    isForceDeleteAfterGraceDuration: boolean;
}

export interface GetContainerengineNodePoolNodePoolCyclingDetail {
    isNodeCyclingEnabled: boolean;
    maximumSurge: string;
    maximumUnavailable: string;
}

export interface GetContainerengineNodePoolNodeShapeConfig {
    memoryInGbs: number;
    ocpus: number;
}

export interface GetContainerengineNodePoolNodeSource {
    imageId: string;
    sourceName: string;
    sourceType: string;
}

export interface GetContainerengineNodePoolNodeSourceDetail {
    bootVolumeSizeInGbs: string;
    imageId: string;
    sourceType: string;
}

export interface GetContainerengineNodePoolOptionSource {
    imageId: string;
    sourceName: string;
    sourceType: string;
}

export interface GetContainerengineNodePoolsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetContainerengineNodePoolsNodePool {
    clusterId: string;
    compartmentId: string;
    definedTags: {[key: string]: string};
    freeformTags: {[key: string]: string};
    id: string;
    initialNodeLabels: outputs.GetContainerengineNodePoolsNodePoolInitialNodeLabel[];
    kubernetesVersion: string;
    lifecycleDetails: string;
    name: string;
    nodeConfigDetails: outputs.GetContainerengineNodePoolsNodePoolNodeConfigDetail[];
    nodeEvictionNodePoolSettings: outputs.GetContainerengineNodePoolsNodePoolNodeEvictionNodePoolSetting[];
    nodeImageId: string;
    nodeImageName: string;
    nodeMetadata: {[key: string]: string};
    nodePoolCyclingDetails: outputs.GetContainerengineNodePoolsNodePoolNodePoolCyclingDetail[];
    nodePoolId: string;
    nodeShape: string;
    nodeShapeConfigs: outputs.GetContainerengineNodePoolsNodePoolNodeShapeConfig[];
    nodeSourceDetails: outputs.GetContainerengineNodePoolsNodePoolNodeSourceDetail[];
    nodeSources: outputs.GetContainerengineNodePoolsNodePoolNodeSource[];
    nodes: outputs.GetContainerengineNodePoolsNodePoolNode[];
    quantityPerSubnet: number;
    sshPublicKey: string;
    state: string;
    subnetIds: string[];
}

export interface GetContainerengineNodePoolsNodePoolInitialNodeLabel {
    key: string;
    value: string;
}

export interface GetContainerengineNodePoolsNodePoolNode {
    availabilityDomain: string;
    definedTags: {[key: string]: string};
    errors: outputs.GetContainerengineNodePoolsNodePoolNodeError[];
    faultDomain: string;
    freeformTags: {[key: string]: string};
    id: string;
    kubernetesVersion: string;
    lifecycleDetails: string;
    name: string;
    nodePoolId: string;
    privateIp: string;
    publicIp: string;
    state: string;
    subnetId: string;
}

export interface GetContainerengineNodePoolsNodePoolNodeConfigDetail {
    definedTags: {[key: string]: string};
    freeformTags: {[key: string]: string};
    isPvEncryptionInTransitEnabled: boolean;
    kmsKeyId: string;
    nodePoolPodNetworkOptionDetails: outputs.GetContainerengineNodePoolsNodePoolNodeConfigDetailNodePoolPodNetworkOptionDetail[];
    nsgIds: string[];
    placementConfigs: outputs.GetContainerengineNodePoolsNodePoolNodeConfigDetailPlacementConfig[];
    size: number;
}

export interface GetContainerengineNodePoolsNodePoolNodeConfigDetailNodePoolPodNetworkOptionDetail {
    cniType: string;
    maxPodsPerNode: number;
    podNsgIds: string[];
    podSubnetIds: string[];
}

export interface GetContainerengineNodePoolsNodePoolNodeConfigDetailPlacementConfig {
    availabilityDomain: string;
    capacityReservationId: string;
    faultDomains: string[];
    preemptibleNodeConfigs: outputs.GetContainerengineNodePoolsNodePoolNodeConfigDetailPlacementConfigPreemptibleNodeConfig[];
    subnetId: string;
}

export interface GetContainerengineNodePoolsNodePoolNodeConfigDetailPlacementConfigPreemptibleNodeConfig {
    preemptionActions: outputs.GetContainerengineNodePoolsNodePoolNodeConfigDetailPlacementConfigPreemptibleNodeConfigPreemptionAction[];
}

export interface GetContainerengineNodePoolsNodePoolNodeConfigDetailPlacementConfigPreemptibleNodeConfigPreemptionAction {
    isPreserveBootVolume: boolean;
    type: string;
}

export interface GetContainerengineNodePoolsNodePoolNodeError {
    code: string;
    message: string;
    status: string;
}

export interface GetContainerengineNodePoolsNodePoolNodeEvictionNodePoolSetting {
    evictionGraceDuration: string;
    isForceDeleteAfterGraceDuration: boolean;
}

export interface GetContainerengineNodePoolsNodePoolNodePoolCyclingDetail {
    isNodeCyclingEnabled: boolean;
    maximumSurge: string;
    maximumUnavailable: string;
}

export interface GetContainerengineNodePoolsNodePoolNodeShapeConfig {
    memoryInGbs: number;
    ocpus: number;
}

export interface GetContainerengineNodePoolsNodePoolNodeSource {
    imageId: string;
    sourceName: string;
    sourceType: string;
}

export interface GetContainerengineNodePoolsNodePoolNodeSourceDetail {
    bootVolumeSizeInGbs: string;
    imageId: string;
    sourceType: string;
}

export interface GetContainerenginePodShapesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetContainerenginePodShapesPodShape {
    memoryOptions: outputs.GetContainerenginePodShapesPodShapeMemoryOption[];
    name: string;
    networkBandwidthOptions: outputs.GetContainerenginePodShapesPodShapeNetworkBandwidthOption[];
    ocpuOptions: outputs.GetContainerenginePodShapesPodShapeOcpuOption[];
    processorDescription: string;
}

export interface GetContainerenginePodShapesPodShapeMemoryOption {
    defaultPerOcpuInGbs: number;
    maxInGbs: number;
    maxPerOcpuInGbs: number;
    minInGbs: number;
    minPerOcpuInGbs: number;
}

export interface GetContainerenginePodShapesPodShapeNetworkBandwidthOption {
    defaultPerOcpuInGbps: number;
    maxInGbps: number;
    minInGbps: number;
}

export interface GetContainerenginePodShapesPodShapeOcpuOption {
    max: number;
    min: number;
}

export interface GetContainerengineVirtualNodePoolInitialVirtualNodeLabel {
    key: string;
    value: string;
}

export interface GetContainerengineVirtualNodePoolPlacementConfiguration {
    availabilityDomain: string;
    faultDomains: string[];
    subnetId: string;
}

export interface GetContainerengineVirtualNodePoolPodConfiguration {
    nsgIds: string[];
    shape: string;
    subnetId: string;
}

export interface GetContainerengineVirtualNodePoolTaint {
    effect: string;
    key: string;
    value: string;
}

export interface GetContainerengineVirtualNodePoolVirtualNodeTag {
    definedTags: {[key: string]: string};
    freeformTags: {[key: string]: string};
}

export interface GetContainerengineVirtualNodePoolsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetContainerengineVirtualNodePoolsVirtualNodePool {
    clusterId: string;
    compartmentId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    initialVirtualNodeLabels: outputs.GetContainerengineVirtualNodePoolsVirtualNodePoolInitialVirtualNodeLabel[];
    kubernetesVersion: string;
    lifecycleDetails: string;
    nsgIds: string[];
    placementConfigurations: outputs.GetContainerengineVirtualNodePoolsVirtualNodePoolPlacementConfiguration[];
    podConfigurations: outputs.GetContainerengineVirtualNodePoolsVirtualNodePoolPodConfiguration[];
    size: number;
    state: string;
    systemTags: {[key: string]: string};
    taints: outputs.GetContainerengineVirtualNodePoolsVirtualNodePoolTaint[];
    timeCreated: string;
    timeUpdated: string;
    virtualNodePoolId: string;
    virtualNodeTags: outputs.GetContainerengineVirtualNodePoolsVirtualNodePoolVirtualNodeTag[];
}

export interface GetContainerengineVirtualNodePoolsVirtualNodePoolInitialVirtualNodeLabel {
    key: string;
    value: string;
}

export interface GetContainerengineVirtualNodePoolsVirtualNodePoolPlacementConfiguration {
    availabilityDomain: string;
    faultDomains: string[];
    subnetId: string;
}

export interface GetContainerengineVirtualNodePoolsVirtualNodePoolPodConfiguration {
    nsgIds: string[];
    shape: string;
    subnetId: string;
}

export interface GetContainerengineVirtualNodePoolsVirtualNodePoolTaint {
    effect: string;
    key: string;
    value: string;
}

export interface GetContainerengineVirtualNodePoolsVirtualNodePoolVirtualNodeTag {
    definedTags: {[key: string]: string};
    freeformTags: {[key: string]: string};
}

export interface GetContainerengineWorkRequestErrorsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetContainerengineWorkRequestErrorsWorkRequestError {
    code: string;
    message: string;
    timestamp: string;
}

export interface GetContainerengineWorkRequestLogEntriesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetContainerengineWorkRequestLogEntriesWorkRequestLogEntry {
    message: string;
    timestamp: string;
}

export interface GetContainerengineWorkRequestsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetContainerengineWorkRequestsWorkRequest {
    compartmentId: string;
    id: string;
    operationType: string;
    resources: outputs.GetContainerengineWorkRequestsWorkRequestResource[];
    status: string;
    timeAccepted: string;
    timeFinished: string;
    timeStarted: string;
}

export interface GetContainerengineWorkRequestsWorkRequestResource {
    actionType: string;
    entityType: string;
    entityUri: string;
    identifier: string;
}

export interface GetCoreAppCatalogListingResourceVersionsAppCatalogListingResourceVersion {
    accessiblePorts: number[];
    allowedActions: string[];
    availableRegions: string[];
    compatibleShapes: string[];
    listingId: string;
    listingResourceId: string;
    listingResourceVersion: string;
    timePublished: string;
}

export interface GetCoreAppCatalogListingResourceVersionsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCoreAppCatalogListingsAppCatalogListing {
    contactUrl: string;
    description: string;
    displayName: string;
    listingId: string;
    publisherLogoUrl: string;
    publisherName: string;
    summary: string;
    timePublished: string;
}

export interface GetCoreAppCatalogListingsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCoreAppCatalogSubscriptionsAppCatalogSubscription {
    compartmentId: string;
    displayName: string;
    eulaLink: string;
    listingId: string;
    listingResourceId: string;
    listingResourceVersion: string;
    oracleTermsOfUseLink: string;
    publisherName: string;
    signature: string;
    summary: string;
    timeCreated: string;
    timeRetrieved: string;
}

export interface GetCoreAppCatalogSubscriptionsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCoreBlockVolumeReplicasBlockVolumeReplica {
    availabilityDomain: string;
    blockVolumeId: string;
    compartmentId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    sizeInGbs: string;
    state: string;
    timeCreated: string;
    timeLastSynced: string;
    volumeGroupReplicaId: string;
}

export interface GetCoreBlockVolumeReplicasFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCoreBootVolumeAttachmentsBootVolumeAttachment {
    availabilityDomain: string;
    bootVolumeId: string;
    compartmentId: string;
    displayName: string;
    encryptionInTransitType: string;
    id: string;
    instanceId: string;
    isPvEncryptionInTransitEnabled: boolean;
    state: string;
    timeCreated: string;
    timeUpdated: string;
}

export interface GetCoreBootVolumeAttachmentsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCoreBootVolumeAutotunePolicy {
    autotuneType: string;
    maxVpusPerGb: string;
}

export interface GetCoreBootVolumeBackupSourceDetail {
    bootVolumeBackupId: string;
    kmsKeyId: string;
    region: string;
}

export interface GetCoreBootVolumeBackupsBootVolumeBackup {
    bootVolumeId: string;
    compartmentId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    expirationTime: string;
    freeformTags: {[key: string]: string};
    id: string;
    imageId: string;
    kmsKeyId: string;
    sizeInGbs: string;
    sourceBootVolumeBackupId: string;
    sourceDetails: outputs.GetCoreBootVolumeBackupsBootVolumeBackupSourceDetail[];
    sourceType: string;
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeRequestReceived: string;
    type: string;
    uniqueSizeInGbs: string;
}

export interface GetCoreBootVolumeBackupsBootVolumeBackupSourceDetail {
    bootVolumeBackupId: string;
    kmsKeyId: string;
    region: string;
}

export interface GetCoreBootVolumeBackupsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCoreBootVolumeBootVolumeReplica {
    availabilityDomain: string;
    bootVolumeReplicaId: string;
    displayName: string;
}

export interface GetCoreBootVolumeReplicasBootVolumeReplica {
    availabilityDomain: string;
    bootVolumeId: string;
    compartmentId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    imageId: string;
    sizeInGbs: string;
    state: string;
    timeCreated: string;
    timeLastSynced: string;
    volumeGroupReplicaId: string;
}

export interface GetCoreBootVolumeReplicasFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCoreBootVolumeSourceDetail {
    id: string;
    type: string;
}

export interface GetCoreBootVolumesBootVolume {
    autoTunedVpusPerGb: string;
    autotunePolicies: outputs.GetCoreBootVolumesBootVolumeAutotunePolicy[];
    availabilityDomain: string;
    backupPolicyId: string;
    bootVolumeReplicas: outputs.GetCoreBootVolumesBootVolumeBootVolumeReplica[];
    bootVolumeReplicasDeletion: boolean;
    clusterPlacementGroupId: string;
    compartmentId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    imageId: string;
    isAutoTuneEnabled: boolean;
    isHydrated: boolean;
    kmsKeyId: string;
    sizeInGbs: string;
    sizeInMbs: string;
    sourceDetails: outputs.GetCoreBootVolumesBootVolumeSourceDetail[];
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    volumeGroupId: string;
    vpusPerGb: string;
}

export interface GetCoreBootVolumesBootVolumeAutotunePolicy {
    autotuneType: string;
    maxVpusPerGb: string;
}

export interface GetCoreBootVolumesBootVolumeBootVolumeReplica {
    availabilityDomain: string;
    bootVolumeReplicaId: string;
    displayName: string;
}

export interface GetCoreBootVolumesBootVolumeSourceDetail {
    id: string;
    type: string;
}

export interface GetCoreBootVolumesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCoreByoipAllocatedRangesByoipAllocatedRangeCollection {
    items: outputs.GetCoreByoipAllocatedRangesByoipAllocatedRangeCollectionItem[];
}

export interface GetCoreByoipAllocatedRangesByoipAllocatedRangeCollectionItem {
    cidrBlock: string;
    publicIpPoolId: string;
}

export interface GetCoreByoipAllocatedRangesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCoreByoipRangeByoipRangeVcnIpv6allocation {
    byoipRangeId: string;
    compartmentId: string;
    ipv6cidrBlock: string;
    vcnId: string;
}

export interface GetCoreByoipRangesByoipRangeCollection {
    items: outputs.GetCoreByoipRangesByoipRangeCollectionItem[];
}

export interface GetCoreByoipRangesByoipRangeCollectionItem {
    byoipRangeVcnIpv6allocations: outputs.GetCoreByoipRangesByoipRangeCollectionItemByoipRangeVcnIpv6allocation[];
    cidrBlock: string;
    compartmentId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    ipv6cidrBlock: string;
    lifecycleDetails: string;
    state: string;
    timeAdvertised: string;
    timeCreated: string;
    timeValidated: string;
    timeWithdrawn: string;
    validationToken: string;
}

export interface GetCoreByoipRangesByoipRangeCollectionItemByoipRangeVcnIpv6allocation {
    byoipRangeId: string;
    compartmentId: string;
    ipv6cidrBlock: string;
    vcnId: string;
}

export interface GetCoreByoipRangesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCoreCaptureFilterFlowLogCaptureFilterRule {
    destinationCidr: string;
    flowLogType: string;
    icmpOptions: outputs.GetCoreCaptureFilterFlowLogCaptureFilterRuleIcmpOption[];
    isEnabled: boolean;
    priority: number;
    protocol: string;
    ruleAction: string;
    samplingRate: number;
    sourceCidr: string;
    tcpOptions: outputs.GetCoreCaptureFilterFlowLogCaptureFilterRuleTcpOption[];
    udpOptions: outputs.GetCoreCaptureFilterFlowLogCaptureFilterRuleUdpOption[];
}

export interface GetCoreCaptureFilterFlowLogCaptureFilterRuleIcmpOption {
    code: number;
    type: number;
}

export interface GetCoreCaptureFilterFlowLogCaptureFilterRuleTcpOption {
    destinationPortRanges: outputs.GetCoreCaptureFilterFlowLogCaptureFilterRuleTcpOptionDestinationPortRange[];
    sourcePortRanges: outputs.GetCoreCaptureFilterFlowLogCaptureFilterRuleTcpOptionSourcePortRange[];
}

export interface GetCoreCaptureFilterFlowLogCaptureFilterRuleTcpOptionDestinationPortRange {
    max: number;
    min: number;
}

export interface GetCoreCaptureFilterFlowLogCaptureFilterRuleTcpOptionSourcePortRange {
    max: number;
    min: number;
}

export interface GetCoreCaptureFilterFlowLogCaptureFilterRuleUdpOption {
    destinationPortRanges: outputs.GetCoreCaptureFilterFlowLogCaptureFilterRuleUdpOptionDestinationPortRange[];
    sourcePortRanges: outputs.GetCoreCaptureFilterFlowLogCaptureFilterRuleUdpOptionSourcePortRange[];
}

export interface GetCoreCaptureFilterFlowLogCaptureFilterRuleUdpOptionDestinationPortRange {
    max: number;
    min: number;
}

export interface GetCoreCaptureFilterFlowLogCaptureFilterRuleUdpOptionSourcePortRange {
    max: number;
    min: number;
}

export interface GetCoreCaptureFilterVtapCaptureFilterRule {
    destinationCidr: string;
    icmpOptions: outputs.GetCoreCaptureFilterVtapCaptureFilterRuleIcmpOption[];
    protocol: string;
    ruleAction: string;
    sourceCidr: string;
    tcpOptions: outputs.GetCoreCaptureFilterVtapCaptureFilterRuleTcpOption[];
    trafficDirection: string;
    udpOptions: outputs.GetCoreCaptureFilterVtapCaptureFilterRuleUdpOption[];
}

export interface GetCoreCaptureFilterVtapCaptureFilterRuleIcmpOption {
    code: number;
    type: number;
}

export interface GetCoreCaptureFilterVtapCaptureFilterRuleTcpOption {
    destinationPortRanges: outputs.GetCoreCaptureFilterVtapCaptureFilterRuleTcpOptionDestinationPortRange[];
    sourcePortRanges: outputs.GetCoreCaptureFilterVtapCaptureFilterRuleTcpOptionSourcePortRange[];
}

export interface GetCoreCaptureFilterVtapCaptureFilterRuleTcpOptionDestinationPortRange {
    max: number;
    min: number;
}

export interface GetCoreCaptureFilterVtapCaptureFilterRuleTcpOptionSourcePortRange {
    max: number;
    min: number;
}

export interface GetCoreCaptureFilterVtapCaptureFilterRuleUdpOption {
    destinationPortRanges: outputs.GetCoreCaptureFilterVtapCaptureFilterRuleUdpOptionDestinationPortRange[];
    sourcePortRanges: outputs.GetCoreCaptureFilterVtapCaptureFilterRuleUdpOptionSourcePortRange[];
}

export interface GetCoreCaptureFilterVtapCaptureFilterRuleUdpOptionDestinationPortRange {
    max: number;
    min: number;
}

export interface GetCoreCaptureFilterVtapCaptureFilterRuleUdpOptionSourcePortRange {
    max: number;
    min: number;
}

export interface GetCoreCaptureFiltersCaptureFilter {
    compartmentId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    filterType: string;
    flowLogCaptureFilterRules: outputs.GetCoreCaptureFiltersCaptureFilterFlowLogCaptureFilterRule[];
    freeformTags: {[key: string]: string};
    id: string;
    state: string;
    timeCreated: string;
    vtapCaptureFilterRules: outputs.GetCoreCaptureFiltersCaptureFilterVtapCaptureFilterRule[];
}

export interface GetCoreCaptureFiltersCaptureFilterFlowLogCaptureFilterRule {
    destinationCidr: string;
    flowLogType: string;
    icmpOptions: outputs.GetCoreCaptureFiltersCaptureFilterFlowLogCaptureFilterRuleIcmpOption[];
    isEnabled: boolean;
    priority: number;
    protocol: string;
    ruleAction: string;
    samplingRate: number;
    sourceCidr: string;
    tcpOptions: outputs.GetCoreCaptureFiltersCaptureFilterFlowLogCaptureFilterRuleTcpOption[];
    udpOptions: outputs.GetCoreCaptureFiltersCaptureFilterFlowLogCaptureFilterRuleUdpOption[];
}

export interface GetCoreCaptureFiltersCaptureFilterFlowLogCaptureFilterRuleIcmpOption {
    code: number;
    type: number;
}

export interface GetCoreCaptureFiltersCaptureFilterFlowLogCaptureFilterRuleTcpOption {
    destinationPortRanges: outputs.GetCoreCaptureFiltersCaptureFilterFlowLogCaptureFilterRuleTcpOptionDestinationPortRange[];
    sourcePortRanges: outputs.GetCoreCaptureFiltersCaptureFilterFlowLogCaptureFilterRuleTcpOptionSourcePortRange[];
}

export interface GetCoreCaptureFiltersCaptureFilterFlowLogCaptureFilterRuleTcpOptionDestinationPortRange {
    max: number;
    min: number;
}

export interface GetCoreCaptureFiltersCaptureFilterFlowLogCaptureFilterRuleTcpOptionSourcePortRange {
    max: number;
    min: number;
}

export interface GetCoreCaptureFiltersCaptureFilterFlowLogCaptureFilterRuleUdpOption {
    destinationPortRanges: outputs.GetCoreCaptureFiltersCaptureFilterFlowLogCaptureFilterRuleUdpOptionDestinationPortRange[];
    sourcePortRanges: outputs.GetCoreCaptureFiltersCaptureFilterFlowLogCaptureFilterRuleUdpOptionSourcePortRange[];
}

export interface GetCoreCaptureFiltersCaptureFilterFlowLogCaptureFilterRuleUdpOptionDestinationPortRange {
    max: number;
    min: number;
}

export interface GetCoreCaptureFiltersCaptureFilterFlowLogCaptureFilterRuleUdpOptionSourcePortRange {
    max: number;
    min: number;
}

export interface GetCoreCaptureFiltersCaptureFilterVtapCaptureFilterRule {
    destinationCidr: string;
    icmpOptions: outputs.GetCoreCaptureFiltersCaptureFilterVtapCaptureFilterRuleIcmpOption[];
    protocol: string;
    ruleAction: string;
    sourceCidr: string;
    tcpOptions: outputs.GetCoreCaptureFiltersCaptureFilterVtapCaptureFilterRuleTcpOption[];
    trafficDirection: string;
    udpOptions: outputs.GetCoreCaptureFiltersCaptureFilterVtapCaptureFilterRuleUdpOption[];
}

export interface GetCoreCaptureFiltersCaptureFilterVtapCaptureFilterRuleIcmpOption {
    code: number;
    type: number;
}

export interface GetCoreCaptureFiltersCaptureFilterVtapCaptureFilterRuleTcpOption {
    destinationPortRanges: outputs.GetCoreCaptureFiltersCaptureFilterVtapCaptureFilterRuleTcpOptionDestinationPortRange[];
    sourcePortRanges: outputs.GetCoreCaptureFiltersCaptureFilterVtapCaptureFilterRuleTcpOptionSourcePortRange[];
}

export interface GetCoreCaptureFiltersCaptureFilterVtapCaptureFilterRuleTcpOptionDestinationPortRange {
    max: number;
    min: number;
}

export interface GetCoreCaptureFiltersCaptureFilterVtapCaptureFilterRuleTcpOptionSourcePortRange {
    max: number;
    min: number;
}

export interface GetCoreCaptureFiltersCaptureFilterVtapCaptureFilterRuleUdpOption {
    destinationPortRanges: outputs.GetCoreCaptureFiltersCaptureFilterVtapCaptureFilterRuleUdpOptionDestinationPortRange[];
    sourcePortRanges: outputs.GetCoreCaptureFiltersCaptureFilterVtapCaptureFilterRuleUdpOptionSourcePortRange[];
}

export interface GetCoreCaptureFiltersCaptureFilterVtapCaptureFilterRuleUdpOptionDestinationPortRange {
    max: number;
    min: number;
}

export interface GetCoreCaptureFiltersCaptureFilterVtapCaptureFilterRuleUdpOptionSourcePortRange {
    max: number;
    min: number;
}

export interface GetCoreCaptureFiltersFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCoreClusterNetworkClusterConfiguration {
    hpcIslandId: string;
    networkBlockIds: string[];
}

export interface GetCoreClusterNetworkInstancePool {
    compartmentId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    instanceConfigurationId: string;
    instanceDisplayNameFormatter: string;
    instanceHostnameFormatter: string;
    loadBalancers: outputs.GetCoreClusterNetworkInstancePoolLoadBalancer[];
    placementConfigurations: outputs.GetCoreClusterNetworkInstancePoolPlacementConfiguration[];
    size: number;
    state: string;
    timeCreated: string;
}

export interface GetCoreClusterNetworkInstancePoolLoadBalancer {
    backendSetName: string;
    id: string;
    instancePoolId: string;
    loadBalancerId: string;
    port: number;
    state: string;
    vnicSelection: string;
}

export interface GetCoreClusterNetworkInstancePoolPlacementConfiguration {
    availabilityDomain: string;
    faultDomains: string[];
    primarySubnetId: string;
    primaryVnicSubnets: outputs.GetCoreClusterNetworkInstancePoolPlacementConfigurationPrimaryVnicSubnet[];
    secondaryVnicSubnets: outputs.GetCoreClusterNetworkInstancePoolPlacementConfigurationSecondaryVnicSubnet[];
}

export interface GetCoreClusterNetworkInstancePoolPlacementConfigurationPrimaryVnicSubnet {
    ipv6addressIpv6subnetCidrPairDetails: outputs.GetCoreClusterNetworkInstancePoolPlacementConfigurationPrimaryVnicSubnetIpv6addressIpv6subnetCidrPairDetail[];
    isAssignIpv6ip: boolean;
    subnetId: string;
}

export interface GetCoreClusterNetworkInstancePoolPlacementConfigurationPrimaryVnicSubnetIpv6addressIpv6subnetCidrPairDetail {
    ipv6subnetCidr: string;
}

export interface GetCoreClusterNetworkInstancePoolPlacementConfigurationSecondaryVnicSubnet {
    displayName: string;
    ipv6addressIpv6subnetCidrPairDetails: outputs.GetCoreClusterNetworkInstancePoolPlacementConfigurationSecondaryVnicSubnetIpv6addressIpv6subnetCidrPairDetail[];
    isAssignIpv6ip: boolean;
    subnetId: string;
}

export interface GetCoreClusterNetworkInstancePoolPlacementConfigurationSecondaryVnicSubnetIpv6addressIpv6subnetCidrPairDetail {
    ipv6subnetCidr: string;
}

export interface GetCoreClusterNetworkInstancesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCoreClusterNetworkInstancesInstance {
    availabilityDomain: string;
    compartmentId: string;
    displayName: string;
    faultDomain: string;
    id: string;
    instanceConfigurationId: string;
    loadBalancerBackends: outputs.GetCoreClusterNetworkInstancesInstanceLoadBalancerBackend[];
    region: string;
    shape: string;
    state: string;
    timeCreated: string;
}

export interface GetCoreClusterNetworkInstancesInstanceLoadBalancerBackend {
    backendHealthStatus: string;
    backendName: string;
    backendSetName: string;
    loadBalancerId: string;
    state: string;
}

export interface GetCoreClusterNetworkPlacementConfiguration {
    availabilityDomain: string;
    placementConstraint: string;
    primarySubnetId: string;
    primaryVnicSubnets: outputs.GetCoreClusterNetworkPlacementConfigurationPrimaryVnicSubnet[];
    secondaryVnicSubnets: outputs.GetCoreClusterNetworkPlacementConfigurationSecondaryVnicSubnet[];
}

export interface GetCoreClusterNetworkPlacementConfigurationPrimaryVnicSubnet {
    ipv6addressIpv6subnetCidrPairDetails: outputs.GetCoreClusterNetworkPlacementConfigurationPrimaryVnicSubnetIpv6addressIpv6subnetCidrPairDetail[];
    isAssignIpv6ip: boolean;
    subnetId: string;
}

export interface GetCoreClusterNetworkPlacementConfigurationPrimaryVnicSubnetIpv6addressIpv6subnetCidrPairDetail {
    ipv6subnetCidr: string;
}

export interface GetCoreClusterNetworkPlacementConfigurationSecondaryVnicSubnet {
    displayName: string;
    ipv6addressIpv6subnetCidrPairDetails: outputs.GetCoreClusterNetworkPlacementConfigurationSecondaryVnicSubnetIpv6addressIpv6subnetCidrPairDetail[];
    isAssignIpv6ip: boolean;
    subnetId: string;
}

export interface GetCoreClusterNetworkPlacementConfigurationSecondaryVnicSubnetIpv6addressIpv6subnetCidrPairDetail {
    ipv6subnetCidr: string;
}

export interface GetCoreClusterNetworksClusterNetwork {
    clusterConfigurations: outputs.GetCoreClusterNetworksClusterNetworkClusterConfiguration[];
    compartmentId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    hpcIslandId: string;
    id: string;
    instancePools: outputs.GetCoreClusterNetworksClusterNetworkInstancePool[];
    networkBlockIds: string[];
    placementConfigurations: outputs.GetCoreClusterNetworksClusterNetworkPlacementConfiguration[];
    state: string;
    timeCreated: string;
    timeUpdated: string;
}

export interface GetCoreClusterNetworksClusterNetworkClusterConfiguration {
    hpcIslandId: string;
    networkBlockIds: string[];
}

export interface GetCoreClusterNetworksClusterNetworkInstancePool {
    compartmentId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    instanceConfigurationId: string;
    instanceDisplayNameFormatter: string;
    instanceHostnameFormatter: string;
    loadBalancers: outputs.GetCoreClusterNetworksClusterNetworkInstancePoolLoadBalancer[];
    placementConfigurations: outputs.GetCoreClusterNetworksClusterNetworkInstancePoolPlacementConfiguration[];
    size: number;
    state: string;
    timeCreated: string;
}

export interface GetCoreClusterNetworksClusterNetworkInstancePoolLoadBalancer {
    backendSetName: string;
    id: string;
    instancePoolId: string;
    loadBalancerId: string;
    port: number;
    state: string;
    vnicSelection: string;
}

export interface GetCoreClusterNetworksClusterNetworkInstancePoolPlacementConfiguration {
    availabilityDomain: string;
    faultDomains: string[];
    primarySubnetId: string;
    primaryVnicSubnets: outputs.GetCoreClusterNetworksClusterNetworkInstancePoolPlacementConfigurationPrimaryVnicSubnet[];
    secondaryVnicSubnets: outputs.GetCoreClusterNetworksClusterNetworkInstancePoolPlacementConfigurationSecondaryVnicSubnet[];
}

export interface GetCoreClusterNetworksClusterNetworkInstancePoolPlacementConfigurationPrimaryVnicSubnet {
    ipv6addressIpv6subnetCidrPairDetails: outputs.GetCoreClusterNetworksClusterNetworkInstancePoolPlacementConfigurationPrimaryVnicSubnetIpv6addressIpv6subnetCidrPairDetail[];
    isAssignIpv6ip: boolean;
    subnetId: string;
}

export interface GetCoreClusterNetworksClusterNetworkInstancePoolPlacementConfigurationPrimaryVnicSubnetIpv6addressIpv6subnetCidrPairDetail {
    ipv6subnetCidr: string;
}

export interface GetCoreClusterNetworksClusterNetworkInstancePoolPlacementConfigurationSecondaryVnicSubnet {
    displayName: string;
    ipv6addressIpv6subnetCidrPairDetails: outputs.GetCoreClusterNetworksClusterNetworkInstancePoolPlacementConfigurationSecondaryVnicSubnetIpv6addressIpv6subnetCidrPairDetail[];
    isAssignIpv6ip: boolean;
    subnetId: string;
}

export interface GetCoreClusterNetworksClusterNetworkInstancePoolPlacementConfigurationSecondaryVnicSubnetIpv6addressIpv6subnetCidrPairDetail {
    ipv6subnetCidr: string;
}

export interface GetCoreClusterNetworksClusterNetworkPlacementConfiguration {
    availabilityDomain: string;
    placementConstraint: string;
    primarySubnetId: string;
    primaryVnicSubnets: outputs.GetCoreClusterNetworksClusterNetworkPlacementConfigurationPrimaryVnicSubnet[];
    secondaryVnicSubnets: outputs.GetCoreClusterNetworksClusterNetworkPlacementConfigurationSecondaryVnicSubnet[];
}

export interface GetCoreClusterNetworksClusterNetworkPlacementConfigurationPrimaryVnicSubnet {
    ipv6addressIpv6subnetCidrPairDetails: outputs.GetCoreClusterNetworksClusterNetworkPlacementConfigurationPrimaryVnicSubnetIpv6addressIpv6subnetCidrPairDetail[];
    isAssignIpv6ip: boolean;
    subnetId: string;
}

export interface GetCoreClusterNetworksClusterNetworkPlacementConfigurationPrimaryVnicSubnetIpv6addressIpv6subnetCidrPairDetail {
    ipv6subnetCidr: string;
}

export interface GetCoreClusterNetworksClusterNetworkPlacementConfigurationSecondaryVnicSubnet {
    displayName: string;
    ipv6addressIpv6subnetCidrPairDetails: outputs.GetCoreClusterNetworksClusterNetworkPlacementConfigurationSecondaryVnicSubnetIpv6addressIpv6subnetCidrPairDetail[];
    isAssignIpv6ip: boolean;
    subnetId: string;
}

export interface GetCoreClusterNetworksClusterNetworkPlacementConfigurationSecondaryVnicSubnetIpv6addressIpv6subnetCidrPairDetail {
    ipv6subnetCidr: string;
}

export interface GetCoreClusterNetworksFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCoreComputeCapacityReservationInstanceReservationConfig {
    clusterConfigs: outputs.GetCoreComputeCapacityReservationInstanceReservationConfigClusterConfig[];
    clusterPlacementGroupId: string;
    faultDomain: string;
    instanceShape: string;
    instanceShapeConfigs: outputs.GetCoreComputeCapacityReservationInstanceReservationConfigInstanceShapeConfig[];
    reservedCount: string;
    usedCount: string;
}

export interface GetCoreComputeCapacityReservationInstanceReservationConfigClusterConfig {
    hpcIslandId: string;
    networkBlockIds: string[];
}

export interface GetCoreComputeCapacityReservationInstanceReservationConfigInstanceShapeConfig {
    memoryInGbs: number;
    ocpus: number;
}

export interface GetCoreComputeCapacityReservationInstanceShapesComputeCapacityReservationInstanceShape {
    availabilityDomain: string;
    instanceShape: string;
}

export interface GetCoreComputeCapacityReservationInstanceShapesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCoreComputeCapacityReservationInstancesCapacityReservationInstance {
    availabilityDomain: string;
    clusterPlacementGroupId: string;
    compartmentId: string;
    faultDomain: string;
    id: string;
    shape: string;
    shapeConfigs: outputs.GetCoreComputeCapacityReservationInstancesCapacityReservationInstanceShapeConfig[];
}

export interface GetCoreComputeCapacityReservationInstancesCapacityReservationInstanceShapeConfig {
    memoryInGbs: number;
    ocpus: number;
}

export interface GetCoreComputeCapacityReservationInstancesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCoreComputeCapacityReservationsComputeCapacityReservation {
    availabilityDomain: string;
    compartmentId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    instanceReservationConfigs: outputs.GetCoreComputeCapacityReservationsComputeCapacityReservationInstanceReservationConfig[];
    isDefaultReservation: boolean;
    reservedInstanceCount: string;
    state: string;
    timeCreated: string;
    timeUpdated: string;
    usedInstanceCount: string;
}

export interface GetCoreComputeCapacityReservationsComputeCapacityReservationInstanceReservationConfig {
    clusterConfigs: outputs.GetCoreComputeCapacityReservationsComputeCapacityReservationInstanceReservationConfigClusterConfig[];
    clusterPlacementGroupId: string;
    faultDomain: string;
    instanceShape: string;
    instanceShapeConfigs: outputs.GetCoreComputeCapacityReservationsComputeCapacityReservationInstanceReservationConfigInstanceShapeConfig[];
    reservedCount: string;
    usedCount: string;
}

export interface GetCoreComputeCapacityReservationsComputeCapacityReservationInstanceReservationConfigClusterConfig {
    hpcIslandId: string;
    networkBlockIds: string[];
}

export interface GetCoreComputeCapacityReservationsComputeCapacityReservationInstanceReservationConfigInstanceShapeConfig {
    memoryInGbs: number;
    ocpus: number;
}

export interface GetCoreComputeCapacityReservationsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCoreComputeCapacityTopologiesComputeCapacityTopologyCollection {
    items: outputs.GetCoreComputeCapacityTopologiesComputeCapacityTopologyCollectionItem[];
}

export interface GetCoreComputeCapacityTopologiesComputeCapacityTopologyCollectionItem {
    availabilityDomain: string;
    capacitySources: outputs.GetCoreComputeCapacityTopologiesComputeCapacityTopologyCollectionItemCapacitySource[];
    compartmentId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    state: string;
    timeCreated: string;
    timeUpdated: string;
}

export interface GetCoreComputeCapacityTopologiesComputeCapacityTopologyCollectionItemCapacitySource {
    capacityType: string;
    compartmentId: string;
}

export interface GetCoreComputeCapacityTopologiesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCoreComputeCapacityTopologyCapacitySource {
    capacityType: string;
    compartmentId: string;
}

export interface GetCoreComputeCapacityTopologyComputeBareMetalHostsComputeBareMetalHostCollection {
    items: outputs.GetCoreComputeCapacityTopologyComputeBareMetalHostsComputeBareMetalHostCollectionItem[];
}

export interface GetCoreComputeCapacityTopologyComputeBareMetalHostsComputeBareMetalHostCollectionItem {
    computeCapacityTopologyId: string;
    computeHpcIslandId: string;
    computeLocalBlockId: string;
    computeNetworkBlockId: string;
    id: string;
    instanceId: string;
    instanceShape: string;
    lifecycleDetails: string;
    state: string;
    timeCreated: string;
    timeUpdated: string;
}

export interface GetCoreComputeCapacityTopologyComputeBareMetalHostsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCoreComputeCapacityTopologyComputeHpcIslandsComputeHpcIslandCollection {
    items: outputs.GetCoreComputeCapacityTopologyComputeHpcIslandsComputeHpcIslandCollectionItem[];
}

export interface GetCoreComputeCapacityTopologyComputeHpcIslandsComputeHpcIslandCollectionItem {
    computeCapacityTopologyId: string;
    id: string;
    state: string;
    timeCreated: string;
    timeUpdated: string;
    totalComputeBareMetalHostCount: string;
}

export interface GetCoreComputeCapacityTopologyComputeHpcIslandsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCoreComputeCapacityTopologyComputeNetworkBlocksComputeNetworkBlockCollection {
    items: outputs.GetCoreComputeCapacityTopologyComputeNetworkBlocksComputeNetworkBlockCollectionItem[];
}

export interface GetCoreComputeCapacityTopologyComputeNetworkBlocksComputeNetworkBlockCollectionItem {
    computeCapacityTopologyId: string;
    computeHpcIslandId: string;
    id: string;
    state: string;
    timeCreated: string;
    timeUpdated: string;
    totalComputeBareMetalHostCount: string;
}

export interface GetCoreComputeCapacityTopologyComputeNetworkBlocksFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCoreComputeClustersComputeClusterCollection {
    items: outputs.GetCoreComputeClustersComputeClusterCollectionItem[];
}

export interface GetCoreComputeClustersComputeClusterCollectionItem {
    availabilityDomain: string;
    compartmentId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    state: string;
    timeCreated: string;
}

export interface GetCoreComputeClustersFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCoreComputeGlobalImageCapabilitySchemasComputeGlobalImageCapabilitySchema {
    compartmentId: string;
    currentVersionName: string;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    timeCreated: string;
}

export interface GetCoreComputeGlobalImageCapabilitySchemasFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCoreComputeGlobalImageCapabilitySchemasVersionsComputeGlobalImageCapabilitySchemaVersion {
    computeGlobalImageCapabilitySchemaId: string;
    displayName: string;
    name: string;
    schemaData: {[key: string]: string};
    timeCreated: string;
}

export interface GetCoreComputeGlobalImageCapabilitySchemasVersionsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCoreComputeImageCapabilitySchemasComputeImageCapabilitySchema {
    compartmentId: string;
    computeGlobalImageCapabilitySchemaId: string;
    computeGlobalImageCapabilitySchemaVersionName: string;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    imageId: string;
    schemaData: {[key: string]: string};
    timeCreated: string;
}

export interface GetCoreComputeImageCapabilitySchemasFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCoreConsoleHistoriesConsoleHistory {
    availabilityDomain: string;
    compartmentId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    instanceId: string;
    state: string;
    timeCreated: string;
}

export interface GetCoreConsoleHistoriesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCoreCpeDeviceShapeCpeDeviceInfo {
    platformSoftwareVersion: string;
    vendor: string;
}

export interface GetCoreCpeDeviceShapeParameter {
    displayName: string;
    explanation: string;
    key: string;
}

export interface GetCoreCpeDeviceShapesCpeDeviceShape {
    cpeDeviceInfos: outputs.GetCoreCpeDeviceShapesCpeDeviceShapeCpeDeviceInfo[];
    cpeDeviceShapeId: string;
    template: string;
}

export interface GetCoreCpeDeviceShapesCpeDeviceShapeCpeDeviceInfo {
    platformSoftwareVersion: string;
    vendor: string;
}

export interface GetCoreCpeDeviceShapesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCoreCpesCpe {
    compartmentId: string;
    cpeDeviceShapeId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    ipAddress: string;
    isPrivate: boolean;
    timeCreated: string;
}

export interface GetCoreCpesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCoreCrossConnectGroupMacsecProperty {
    encryptionCipher: string;
    isUnprotectedTrafficAllowed: boolean;
    primaryKeys: outputs.GetCoreCrossConnectGroupMacsecPropertyPrimaryKey[];
    state: string;
}

export interface GetCoreCrossConnectGroupMacsecPropertyPrimaryKey {
    connectivityAssociationKeySecretId: string;
    connectivityAssociationKeySecretVersion: string;
    connectivityAssociationNameSecretId: string;
    connectivityAssociationNameSecretVersion: string;
}

export interface GetCoreCrossConnectGroupsCrossConnectGroup {
    compartmentId: string;
    customerReferenceName: string;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    macsecProperties: outputs.GetCoreCrossConnectGroupsCrossConnectGroupMacsecProperty[];
    ociLogicalDeviceName: string;
    ociPhysicalDeviceName: string;
    state: string;
    timeCreated: string;
}

export interface GetCoreCrossConnectGroupsCrossConnectGroupMacsecProperty {
    encryptionCipher: string;
    isUnprotectedTrafficAllowed: boolean;
    primaryKeys: outputs.GetCoreCrossConnectGroupsCrossConnectGroupMacsecPropertyPrimaryKey[];
    state: string;
}

export interface GetCoreCrossConnectGroupsCrossConnectGroupMacsecPropertyPrimaryKey {
    connectivityAssociationKeySecretId: string;
    connectivityAssociationKeySecretVersion: string;
    connectivityAssociationNameSecretId: string;
    connectivityAssociationNameSecretVersion: string;
}

export interface GetCoreCrossConnectGroupsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCoreCrossConnectLocationsCrossConnectLocation {
    description: string;
    name: string;
}

export interface GetCoreCrossConnectLocationsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCoreCrossConnectMacsecProperty {
    encryptionCipher: string;
    isUnprotectedTrafficAllowed: boolean;
    primaryKeys: outputs.GetCoreCrossConnectMacsecPropertyPrimaryKey[];
    state: string;
}

export interface GetCoreCrossConnectMacsecPropertyPrimaryKey {
    connectivityAssociationKeySecretId: string;
    connectivityAssociationKeySecretVersion: string;
    connectivityAssociationNameSecretId: string;
    connectivityAssociationNameSecretVersion: string;
}

export interface GetCoreCrossConnectPortSpeedShapesCrossConnectPortSpeedShape {
    name: string;
    portSpeedInGbps: number;
}

export interface GetCoreCrossConnectPortSpeedShapesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCoreCrossConnectsCrossConnect {
    compartmentId: string;
    crossConnectGroupId: string;
    customerReferenceName: string;
    definedTags: {[key: string]: string};
    displayName: string;
    farCrossConnectOrCrossConnectGroupId: string;
    freeformTags: {[key: string]: string};
    id: string;
    isActive: boolean;
    locationName: string;
    macsecProperties: outputs.GetCoreCrossConnectsCrossConnectMacsecProperty[];
    nearCrossConnectOrCrossConnectGroupId: string;
    ociLogicalDeviceName: string;
    ociPhysicalDeviceName: string;
    portName: string;
    portSpeedShapeName: string;
    state: string;
    timeCreated: string;
}

export interface GetCoreCrossConnectsCrossConnectMacsecProperty {
    encryptionCipher: string;
    isUnprotectedTrafficAllowed: boolean;
    primaryKeys: outputs.GetCoreCrossConnectsCrossConnectMacsecPropertyPrimaryKey[];
    state: string;
}

export interface GetCoreCrossConnectsCrossConnectMacsecPropertyPrimaryKey {
    connectivityAssociationKeySecretId: string;
    connectivityAssociationKeySecretVersion: string;
    connectivityAssociationNameSecretId: string;
    connectivityAssociationNameSecretVersion: string;
}

export interface GetCoreCrossConnectsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCoreDedicatedVmHostInstanceShapesDedicatedVmHostInstanceShape {
    availabilityDomain: string;
    instanceShapeName: string;
}

export interface GetCoreDedicatedVmHostInstanceShapesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCoreDedicatedVmHostShapesDedicatedVmHostShape {
    availabilityDomain: string;
    dedicatedVmHostShape: string;
}

export interface GetCoreDedicatedVmHostShapesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCoreDedicatedVmHostsDedicatedVmHost {
    availabilityDomain: string;
    compartmentId: string;
    dedicatedVmHostShape: string;
    definedTags: {[key: string]: string};
    displayName: string;
    faultDomain: string;
    freeformTags: {[key: string]: string};
    id: string;
    remainingMemoryInGbs: number;
    remainingOcpus: number;
    state: string;
    timeCreated: string;
    totalMemoryInGbs: number;
    totalOcpus: number;
}

export interface GetCoreDedicatedVmHostsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCoreDedicatedVmHostsInstancesDedicatedVmHostInstance {
    availabilityDomain: string;
    compartmentId: string;
    instanceId: string;
    shape: string;
    timeCreated: string;
}

export interface GetCoreDedicatedVmHostsInstancesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCoreDhcpOptionsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCoreDhcpOptionsOption {
    compartmentId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    domainNameType: string;
    freeformTags: {[key: string]: string};
    id: string;
    options: outputs.GetCoreDhcpOptionsOptionOption[];
    state: string;
    timeCreated: string;
    vcnId: string;
}

export interface GetCoreDhcpOptionsOptionOption {
    customDnsServers: string[];
    searchDomainNames: string[];
    serverType: string;
    type: string;
}

export interface GetCoreDrgAttachmentsDrgAttachment {
    compartmentId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    drgId: string;
    drgRouteTableId: string;
    exportDrgRouteDistributionId: string;
    freeformTags: {[key: string]: string};
    id: string;
    isCrossTenancy: boolean;
    networkDetails: outputs.GetCoreDrgAttachmentsDrgAttachmentNetworkDetail[];
    removeExportDrgRouteDistributionTrigger: boolean;
    routeTableId: string;
    state: string;
    timeCreated: string;
    vcnId: string;
}

export interface GetCoreDrgAttachmentsDrgAttachmentNetworkDetail {
    id: string;
    ids: string[];
    ipsecConnectionId: string;
    routeTableId: string;
    transportAttachmentId: string;
    transportOnlyMode: boolean;
    type: string;
    vcnRouteType: string;
}

export interface GetCoreDrgAttachmentsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCoreDrgRouteDistributionStatementsDrgRouteDistributionStatement {
    action: string;
    id: string;
    matchCriterias: outputs.GetCoreDrgRouteDistributionStatementsDrgRouteDistributionStatementMatchCriteria[];
    priority: number;
}

export interface GetCoreDrgRouteDistributionStatementsDrgRouteDistributionStatementMatchCriteria {
    attachmentType: string;
    drgAttachmentId: string;
    matchType: string;
}

export interface GetCoreDrgRouteDistributionStatementsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCoreDrgRouteDistributionsDrgRouteDistribution {
    compartmentId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    distributionType: string;
    drgId: string;
    freeformTags: {[key: string]: string};
    id: string;
    state: string;
    timeCreated: string;
}

export interface GetCoreDrgRouteDistributionsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCoreDrgRouteTableRouteRulesDrgRouteRule {
    attributes: {[key: string]: string};
    destination: string;
    destinationType: string;
    id: string;
    isBlackhole: boolean;
    isConflict: boolean;
    nextHopDrgAttachmentId: string;
    routeProvenance: string;
    routeType: string;
}

export interface GetCoreDrgRouteTableRouteRulesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCoreDrgRouteTablesDrgRouteTable {
    compartmentId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    drgId: string;
    freeformTags: {[key: string]: string};
    id: string;
    importDrgRouteDistributionId: string;
    isEcmpEnabled: boolean;
    removeImportTrigger: boolean;
    state: string;
    timeCreated: string;
}

export interface GetCoreDrgRouteTablesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCoreDrgsDrg {
    compartmentId: string;
    defaultDrgRouteTables: outputs.GetCoreDrgsDrgDefaultDrgRouteTable[];
    defaultExportDrgRouteDistributionId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    redundancyStatus: string;
    state: string;
    timeCreated: string;
}

export interface GetCoreDrgsDrgDefaultDrgRouteTable {
    ipsecTunnel: string;
    remotePeeringConnection: string;
    vcn: string;
    virtualCircuit: string;
}

export interface GetCoreDrgsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCoreFastConnectProviderServicesFastConnectProviderService {
    bandwithShapeManagement: string;
    customerAsnManagement: string;
    description: string;
    id: string;
    privatePeeringBgpManagement: string;
    providerName: string;
    providerServiceKeyManagement: string;
    providerServiceName: string;
    publicPeeringBgpManagement: string;
    requiredTotalCrossConnects: number;
    supportedVirtualCircuitTypes: string[];
    type: string;
}

export interface GetCoreFastConnectProviderServicesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCoreImageAgentFeature {
    isManagementSupported: boolean;
    isMonitoringSupported: boolean;
}

export interface GetCoreImageImageSourceDetail {
    bucketName: string;
    namespaceName: string;
    objectName: string;
    operatingSystem: string;
    operatingSystemVersion: string;
    sourceImageType: string;
    sourceType: string;
    sourceUri: string;
}

export interface GetCoreImageLaunchOption {
    bootVolumeType: string;
    firmware: string;
    isConsistentVolumeNamingEnabled: boolean;
    isPvEncryptionInTransitEnabled: boolean;
    networkType: string;
    remoteDataVolumeType: string;
}

export interface GetCoreImageShapeMemoryConstraint {
    maxInGbs: number;
    minInGbs: number;
}

export interface GetCoreImageShapeOcpuConstraint {
    max: number;
    min: number;
}

export interface GetCoreImageShapesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCoreImageShapesImageShapeCompatibility {
    imageId: string;
    memoryConstraints: outputs.GetCoreImageShapesImageShapeCompatibilityMemoryConstraint[];
    ocpuConstraints: outputs.GetCoreImageShapesImageShapeCompatibilityOcpuConstraint[];
    shape: string;
}

export interface GetCoreImageShapesImageShapeCompatibilityMemoryConstraint {
    maxInGbs: number;
    minInGbs: number;
}

export interface GetCoreImageShapesImageShapeCompatibilityOcpuConstraint {
    max: number;
    min: number;
}

export interface GetCoreImagesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCoreImagesImage {
    agentFeatures: outputs.GetCoreImagesImageAgentFeature[];
    baseImageId: string;
    billableSizeInGbs: string;
    compartmentId: string;
    createImageAllowed: boolean;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    imageSourceDetails: outputs.GetCoreImagesImageImageSourceDetail[];
    instanceId: string;
    launchMode: string;
    launchOptions: outputs.GetCoreImagesImageLaunchOption[];
    listingType: string;
    operatingSystem: string;
    operatingSystemVersion: string;
    sizeInMbs: string;
    state: string;
    timeCreated: string;
}

export interface GetCoreImagesImageAgentFeature {
    isManagementSupported: boolean;
    isMonitoringSupported: boolean;
}

export interface GetCoreImagesImageImageSourceDetail {
    bucketName: string;
    namespaceName: string;
    objectName: string;
    operatingSystem: string;
    operatingSystemVersion: string;
    sourceImageType: string;
    sourceType: string;
    sourceUri: string;
}

export interface GetCoreImagesImageLaunchOption {
    bootVolumeType: string;
    firmware: string;
    isConsistentVolumeNamingEnabled: boolean;
    isPvEncryptionInTransitEnabled: boolean;
    networkType: string;
    remoteDataVolumeType: string;
}

export interface GetCoreInstanceAgentConfig {
    areAllPluginsDisabled: boolean;
    isManagementDisabled: boolean;
    isMonitoringDisabled: boolean;
    pluginsConfigs: outputs.GetCoreInstanceAgentConfigPluginsConfig[];
}

export interface GetCoreInstanceAgentConfigPluginsConfig {
    desiredState: string;
    name: string;
}

export interface GetCoreInstanceAvailabilityConfig {
    isLiveMigrationPreferred: boolean;
    recoveryAction: string;
}

export interface GetCoreInstanceConfigurationInstanceDetail {
    blockVolumes: outputs.GetCoreInstanceConfigurationInstanceDetailBlockVolume[];
    instanceType: string;
    launchDetails: outputs.GetCoreInstanceConfigurationInstanceDetailLaunchDetail[];
    options: outputs.GetCoreInstanceConfigurationInstanceDetailOption[];
    secondaryVnics: outputs.GetCoreInstanceConfigurationInstanceDetailSecondaryVnic[];
}

export interface GetCoreInstanceConfigurationInstanceDetailBlockVolume {
    attachDetails: outputs.GetCoreInstanceConfigurationInstanceDetailBlockVolumeAttachDetail[];
    createDetails: outputs.GetCoreInstanceConfigurationInstanceDetailBlockVolumeCreateDetail[];
    volumeId: string;
}

export interface GetCoreInstanceConfigurationInstanceDetailBlockVolumeAttachDetail {
    device: string;
    displayName: string;
    isPvEncryptionInTransitEnabled: boolean;
    isReadOnly: boolean;
    isShareable: boolean;
    type: string;
    useChap: boolean;
}

export interface GetCoreInstanceConfigurationInstanceDetailBlockVolumeCreateDetail {
    autotunePolicies: outputs.GetCoreInstanceConfigurationInstanceDetailBlockVolumeCreateDetailAutotunePolicy[];
    availabilityDomain: string;
    backupPolicyId: string;
    blockVolumeReplicas: outputs.GetCoreInstanceConfigurationInstanceDetailBlockVolumeCreateDetailBlockVolumeReplica[];
    clusterPlacementGroupId: string;
    compartmentId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    isAutoTuneEnabled: boolean;
    kmsKeyId: string;
    sizeInGbs: string;
    sourceDetails: outputs.GetCoreInstanceConfigurationInstanceDetailBlockVolumeCreateDetailSourceDetail[];
    vpusPerGb: string;
}

export interface GetCoreInstanceConfigurationInstanceDetailBlockVolumeCreateDetailAutotunePolicy {
    autotuneType: string;
    maxVpusPerGb: string;
}

export interface GetCoreInstanceConfigurationInstanceDetailBlockVolumeCreateDetailBlockVolumeReplica {
    availabilityDomain: string;
    displayName: string;
}

export interface GetCoreInstanceConfigurationInstanceDetailBlockVolumeCreateDetailSourceDetail {
    id: string;
    type: string;
}

export interface GetCoreInstanceConfigurationInstanceDetailLaunchDetail {
    agentConfigs: outputs.GetCoreInstanceConfigurationInstanceDetailLaunchDetailAgentConfig[];
    availabilityConfigs: outputs.GetCoreInstanceConfigurationInstanceDetailLaunchDetailAvailabilityConfig[];
    availabilityDomain: string;
    capacityReservationId: string;
    clusterPlacementGroupId: string;
    compartmentId: string;
    createVnicDetails: outputs.GetCoreInstanceConfigurationInstanceDetailLaunchDetailCreateVnicDetail[];
    dedicatedVmHostId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    extendedMetadata: {[key: string]: string};
    faultDomain: string;
    freeformTags: {[key: string]: string};
    instanceOptions: outputs.GetCoreInstanceConfigurationInstanceDetailLaunchDetailInstanceOption[];
    ipxeScript: string;
    isPvEncryptionInTransitEnabled: boolean;
    launchMode: string;
    launchOptions: outputs.GetCoreInstanceConfigurationInstanceDetailLaunchDetailLaunchOption[];
    metadata: {[key: string]: string};
    platformConfigs: outputs.GetCoreInstanceConfigurationInstanceDetailLaunchDetailPlatformConfig[];
    preemptibleInstanceConfigs: outputs.GetCoreInstanceConfigurationInstanceDetailLaunchDetailPreemptibleInstanceConfig[];
    preferredMaintenanceAction: string;
    shape: string;
    shapeConfigs: outputs.GetCoreInstanceConfigurationInstanceDetailLaunchDetailShapeConfig[];
    sourceDetails: outputs.GetCoreInstanceConfigurationInstanceDetailLaunchDetailSourceDetail[];
}

export interface GetCoreInstanceConfigurationInstanceDetailLaunchDetailAgentConfig {
    areAllPluginsDisabled: boolean;
    isManagementDisabled: boolean;
    isMonitoringDisabled: boolean;
    pluginsConfigs: outputs.GetCoreInstanceConfigurationInstanceDetailLaunchDetailAgentConfigPluginsConfig[];
}

export interface GetCoreInstanceConfigurationInstanceDetailLaunchDetailAgentConfigPluginsConfig {
    desiredState: string;
    name: string;
}

export interface GetCoreInstanceConfigurationInstanceDetailLaunchDetailAvailabilityConfig {
    isLiveMigrationPreferred: boolean;
    recoveryAction: string;
}

export interface GetCoreInstanceConfigurationInstanceDetailLaunchDetailCreateVnicDetail {
    assignIpv6ip: boolean;
    assignPrivateDnsRecord: boolean;
    assignPublicIp: boolean;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    hostnameLabel: string;
    ipv6addressIpv6subnetCidrPairDetails: outputs.GetCoreInstanceConfigurationInstanceDetailLaunchDetailCreateVnicDetailIpv6addressIpv6subnetCidrPairDetail[];
    nsgIds: string[];
    privateIp: string;
    skipSourceDestCheck: boolean;
    subnetId: string;
}

export interface GetCoreInstanceConfigurationInstanceDetailLaunchDetailCreateVnicDetailIpv6addressIpv6subnetCidrPairDetail {
    ipv6address: string;
    ipv6subnetCidr: string;
}

export interface GetCoreInstanceConfigurationInstanceDetailLaunchDetailInstanceOption {
    areLegacyImdsEndpointsDisabled: boolean;
}

export interface GetCoreInstanceConfigurationInstanceDetailLaunchDetailLaunchOption {
    bootVolumeType: string;
    firmware: string;
    isConsistentVolumeNamingEnabled: boolean;
    isPvEncryptionInTransitEnabled: boolean;
    networkType: string;
    remoteDataVolumeType: string;
}

export interface GetCoreInstanceConfigurationInstanceDetailLaunchDetailPlatformConfig {
    areVirtualInstructionsEnabled: boolean;
    configMap: {[key: string]: string};
    isAccessControlServiceEnabled: boolean;
    isInputOutputMemoryManagementUnitEnabled: boolean;
    isMeasuredBootEnabled: boolean;
    isMemoryEncryptionEnabled: boolean;
    isSecureBootEnabled: boolean;
    isSymmetricMultiThreadingEnabled: boolean;
    isTrustedPlatformModuleEnabled: boolean;
    numaNodesPerSocket: string;
    percentageOfCoresEnabled: number;
    type: string;
}

export interface GetCoreInstanceConfigurationInstanceDetailLaunchDetailPreemptibleInstanceConfig {
    preemptionActions: outputs.GetCoreInstanceConfigurationInstanceDetailLaunchDetailPreemptibleInstanceConfigPreemptionAction[];
}

export interface GetCoreInstanceConfigurationInstanceDetailLaunchDetailPreemptibleInstanceConfigPreemptionAction {
    preserveBootVolume: boolean;
    type: string;
}

export interface GetCoreInstanceConfigurationInstanceDetailLaunchDetailShapeConfig {
    baselineOcpuUtilization: string;
    memoryInGbs: number;
    nvmes: number;
    ocpus: number;
    vcpus: number;
}

export interface GetCoreInstanceConfigurationInstanceDetailLaunchDetailSourceDetail {
    bootVolumeId: string;
    bootVolumeSizeInGbs: string;
    bootVolumeVpusPerGb: string;
    imageId: string;
    instanceSourceImageFilterDetails: outputs.GetCoreInstanceConfigurationInstanceDetailLaunchDetailSourceDetailInstanceSourceImageFilterDetail[];
    kmsKeyId: string;
    sourceType: string;
}

export interface GetCoreInstanceConfigurationInstanceDetailLaunchDetailSourceDetailInstanceSourceImageFilterDetail {
    compartmentId: string;
    definedTagsFilter: {[key: string]: string};
    operatingSystem: string;
    operatingSystemVersion: string;
}

export interface GetCoreInstanceConfigurationInstanceDetailOption {
    blockVolumes: outputs.GetCoreInstanceConfigurationInstanceDetailOptionBlockVolume[];
    launchDetails: outputs.GetCoreInstanceConfigurationInstanceDetailOptionLaunchDetail[];
    secondaryVnics: outputs.GetCoreInstanceConfigurationInstanceDetailOptionSecondaryVnic[];
}

export interface GetCoreInstanceConfigurationInstanceDetailOptionBlockVolume {
    attachDetails: outputs.GetCoreInstanceConfigurationInstanceDetailOptionBlockVolumeAttachDetail[];
    createDetails: outputs.GetCoreInstanceConfigurationInstanceDetailOptionBlockVolumeCreateDetail[];
    volumeId: string;
}

export interface GetCoreInstanceConfigurationInstanceDetailOptionBlockVolumeAttachDetail {
    device: string;
    displayName: string;
    isPvEncryptionInTransitEnabled: boolean;
    isReadOnly: boolean;
    isShareable: boolean;
    type: string;
    useChap: boolean;
}

export interface GetCoreInstanceConfigurationInstanceDetailOptionBlockVolumeCreateDetail {
    autotunePolicies: outputs.GetCoreInstanceConfigurationInstanceDetailOptionBlockVolumeCreateDetailAutotunePolicy[];
    availabilityDomain: string;
    backupPolicyId: string;
    blockVolumeReplicas: outputs.GetCoreInstanceConfigurationInstanceDetailOptionBlockVolumeCreateDetailBlockVolumeReplica[];
    clusterPlacementGroupId: string;
    compartmentId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    isAutoTuneEnabled: boolean;
    kmsKeyId: string;
    sizeInGbs: string;
    sourceDetails: outputs.GetCoreInstanceConfigurationInstanceDetailOptionBlockVolumeCreateDetailSourceDetail[];
    vpusPerGb: string;
}

export interface GetCoreInstanceConfigurationInstanceDetailOptionBlockVolumeCreateDetailAutotunePolicy {
    autotuneType: string;
    maxVpusPerGb: string;
}

export interface GetCoreInstanceConfigurationInstanceDetailOptionBlockVolumeCreateDetailBlockVolumeReplica {
    availabilityDomain: string;
    displayName: string;
}

export interface GetCoreInstanceConfigurationInstanceDetailOptionBlockVolumeCreateDetailSourceDetail {
    id: string;
    type: string;
}

export interface GetCoreInstanceConfigurationInstanceDetailOptionLaunchDetail {
    agentConfigs: outputs.GetCoreInstanceConfigurationInstanceDetailOptionLaunchDetailAgentConfig[];
    availabilityConfigs: outputs.GetCoreInstanceConfigurationInstanceDetailOptionLaunchDetailAvailabilityConfig[];
    availabilityDomain: string;
    capacityReservationId: string;
    clusterPlacementGroupId: string;
    compartmentId: string;
    createVnicDetails: outputs.GetCoreInstanceConfigurationInstanceDetailOptionLaunchDetailCreateVnicDetail[];
    dedicatedVmHostId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    extendedMetadata: {[key: string]: string};
    faultDomain: string;
    freeformTags: {[key: string]: string};
    instanceOptions: outputs.GetCoreInstanceConfigurationInstanceDetailOptionLaunchDetailInstanceOption[];
    ipxeScript: string;
    isPvEncryptionInTransitEnabled: boolean;
    launchMode: string;
    launchOptions: outputs.GetCoreInstanceConfigurationInstanceDetailOptionLaunchDetailLaunchOption[];
    metadata: {[key: string]: string};
    platformConfigs: outputs.GetCoreInstanceConfigurationInstanceDetailOptionLaunchDetailPlatformConfig[];
    preemptibleInstanceConfigs: outputs.GetCoreInstanceConfigurationInstanceDetailOptionLaunchDetailPreemptibleInstanceConfig[];
    preferredMaintenanceAction: string;
    shape: string;
    shapeConfigs: outputs.GetCoreInstanceConfigurationInstanceDetailOptionLaunchDetailShapeConfig[];
    sourceDetails: outputs.GetCoreInstanceConfigurationInstanceDetailOptionLaunchDetailSourceDetail[];
}

export interface GetCoreInstanceConfigurationInstanceDetailOptionLaunchDetailAgentConfig {
    areAllPluginsDisabled: boolean;
    isManagementDisabled: boolean;
    isMonitoringDisabled: boolean;
    pluginsConfigs: outputs.GetCoreInstanceConfigurationInstanceDetailOptionLaunchDetailAgentConfigPluginsConfig[];
}

export interface GetCoreInstanceConfigurationInstanceDetailOptionLaunchDetailAgentConfigPluginsConfig {
    desiredState: string;
    name: string;
}

export interface GetCoreInstanceConfigurationInstanceDetailOptionLaunchDetailAvailabilityConfig {
    isLiveMigrationPreferred: boolean;
    recoveryAction: string;
}

export interface GetCoreInstanceConfigurationInstanceDetailOptionLaunchDetailCreateVnicDetail {
    assignIpv6ip: boolean;
    assignPrivateDnsRecord: boolean;
    assignPublicIp: boolean;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    hostnameLabel: string;
    ipv6addressIpv6subnetCidrPairDetails: outputs.GetCoreInstanceConfigurationInstanceDetailOptionLaunchDetailCreateVnicDetailIpv6addressIpv6subnetCidrPairDetail[];
    nsgIds: string[];
    privateIp: string;
    skipSourceDestCheck: boolean;
    subnetId: string;
}

export interface GetCoreInstanceConfigurationInstanceDetailOptionLaunchDetailCreateVnicDetailIpv6addressIpv6subnetCidrPairDetail {
    ipv6address: string;
    ipv6subnetCidr: string;
}

export interface GetCoreInstanceConfigurationInstanceDetailOptionLaunchDetailInstanceOption {
    areLegacyImdsEndpointsDisabled: boolean;
}

export interface GetCoreInstanceConfigurationInstanceDetailOptionLaunchDetailLaunchOption {
    bootVolumeType: string;
    firmware: string;
    isConsistentVolumeNamingEnabled: boolean;
    isPvEncryptionInTransitEnabled: boolean;
    networkType: string;
    remoteDataVolumeType: string;
}

export interface GetCoreInstanceConfigurationInstanceDetailOptionLaunchDetailPlatformConfig {
    areVirtualInstructionsEnabled: boolean;
    isAccessControlServiceEnabled: boolean;
    isInputOutputMemoryManagementUnitEnabled: boolean;
    isMeasuredBootEnabled: boolean;
    isMemoryEncryptionEnabled: boolean;
    isSecureBootEnabled: boolean;
    isSymmetricMultiThreadingEnabled: boolean;
    isTrustedPlatformModuleEnabled: boolean;
    numaNodesPerSocket: string;
    percentageOfCoresEnabled: number;
    type: string;
}

export interface GetCoreInstanceConfigurationInstanceDetailOptionLaunchDetailPreemptibleInstanceConfig {
    preemptionActions: outputs.GetCoreInstanceConfigurationInstanceDetailOptionLaunchDetailPreemptibleInstanceConfigPreemptionAction[];
}

export interface GetCoreInstanceConfigurationInstanceDetailOptionLaunchDetailPreemptibleInstanceConfigPreemptionAction {
    preserveBootVolume: boolean;
    type: string;
}

export interface GetCoreInstanceConfigurationInstanceDetailOptionLaunchDetailShapeConfig {
    baselineOcpuUtilization: string;
    memoryInGbs: number;
    nvmes: number;
    ocpus: number;
    vcpus: number;
}

export interface GetCoreInstanceConfigurationInstanceDetailOptionLaunchDetailSourceDetail {
    bootVolumeId: string;
    bootVolumeSizeInGbs: string;
    bootVolumeVpusPerGb: string;
    imageId: string;
    instanceSourceImageFilterDetails: outputs.GetCoreInstanceConfigurationInstanceDetailOptionLaunchDetailSourceDetailInstanceSourceImageFilterDetail[];
    kmsKeyId: string;
    sourceType: string;
}

export interface GetCoreInstanceConfigurationInstanceDetailOptionLaunchDetailSourceDetailInstanceSourceImageFilterDetail {
    compartmentId: string;
    definedTagsFilter: {[key: string]: string};
    operatingSystem: string;
    operatingSystemVersion: string;
}

export interface GetCoreInstanceConfigurationInstanceDetailOptionSecondaryVnic {
    createVnicDetails: outputs.GetCoreInstanceConfigurationInstanceDetailOptionSecondaryVnicCreateVnicDetail[];
    displayName: string;
    nicIndex: number;
}

export interface GetCoreInstanceConfigurationInstanceDetailOptionSecondaryVnicCreateVnicDetail {
    assignIpv6ip: boolean;
    assignPrivateDnsRecord: boolean;
    assignPublicIp: boolean;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    hostnameLabel: string;
    ipv6addressIpv6subnetCidrPairDetails: outputs.GetCoreInstanceConfigurationInstanceDetailOptionSecondaryVnicCreateVnicDetailIpv6addressIpv6subnetCidrPairDetail[];
    nsgIds: string[];
    privateIp: string;
    skipSourceDestCheck: boolean;
    subnetId: string;
}

export interface GetCoreInstanceConfigurationInstanceDetailOptionSecondaryVnicCreateVnicDetailIpv6addressIpv6subnetCidrPairDetail {
    ipv6address: string;
    ipv6subnetCidr: string;
}

export interface GetCoreInstanceConfigurationInstanceDetailSecondaryVnic {
    createVnicDetails: outputs.GetCoreInstanceConfigurationInstanceDetailSecondaryVnicCreateVnicDetail[];
    displayName: string;
    nicIndex: number;
}

export interface GetCoreInstanceConfigurationInstanceDetailSecondaryVnicCreateVnicDetail {
    assignIpv6ip: boolean;
    assignPrivateDnsRecord: boolean;
    assignPublicIp: boolean;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    hostnameLabel: string;
    ipv6addressIpv6subnetCidrPairDetails: outputs.GetCoreInstanceConfigurationInstanceDetailSecondaryVnicCreateVnicDetailIpv6addressIpv6subnetCidrPairDetail[];
    nsgIds: string[];
    privateIp: string;
    skipSourceDestCheck: boolean;
    subnetId: string;
}

export interface GetCoreInstanceConfigurationInstanceDetailSecondaryVnicCreateVnicDetailIpv6addressIpv6subnetCidrPairDetail {
    ipv6address: string;
    ipv6subnetCidr: string;
}

export interface GetCoreInstanceConfigurationsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCoreInstanceConfigurationsInstanceConfiguration {
    compartmentId: string;
    deferredFields: string[];
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    instanceDetails: outputs.GetCoreInstanceConfigurationsInstanceConfigurationInstanceDetail[];
    instanceId: string;
    source: string;
    timeCreated: string;
}

export interface GetCoreInstanceConfigurationsInstanceConfigurationInstanceDetail {
    blockVolumes: outputs.GetCoreInstanceConfigurationsInstanceConfigurationInstanceDetailBlockVolume[];
    instanceType: string;
    launchDetails: outputs.GetCoreInstanceConfigurationsInstanceConfigurationInstanceDetailLaunchDetail[];
    options: outputs.GetCoreInstanceConfigurationsInstanceConfigurationInstanceDetailOption[];
    secondaryVnics: outputs.GetCoreInstanceConfigurationsInstanceConfigurationInstanceDetailSecondaryVnic[];
}

export interface GetCoreInstanceConfigurationsInstanceConfigurationInstanceDetailBlockVolume {
    attachDetails: outputs.GetCoreInstanceConfigurationsInstanceConfigurationInstanceDetailBlockVolumeAttachDetail[];
    createDetails: outputs.GetCoreInstanceConfigurationsInstanceConfigurationInstanceDetailBlockVolumeCreateDetail[];
    volumeId: string;
}

export interface GetCoreInstanceConfigurationsInstanceConfigurationInstanceDetailBlockVolumeAttachDetail {
    device: string;
    displayName: string;
    isPvEncryptionInTransitEnabled: boolean;
    isReadOnly: boolean;
    isShareable: boolean;
    type: string;
    useChap: boolean;
}

export interface GetCoreInstanceConfigurationsInstanceConfigurationInstanceDetailBlockVolumeCreateDetail {
    autotunePolicies: outputs.GetCoreInstanceConfigurationsInstanceConfigurationInstanceDetailBlockVolumeCreateDetailAutotunePolicy[];
    availabilityDomain: string;
    backupPolicyId: string;
    blockVolumeReplicas: outputs.GetCoreInstanceConfigurationsInstanceConfigurationInstanceDetailBlockVolumeCreateDetailBlockVolumeReplica[];
    clusterPlacementGroupId: string;
    compartmentId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    isAutoTuneEnabled: boolean;
    kmsKeyId: string;
    sizeInGbs: string;
    sourceDetails: outputs.GetCoreInstanceConfigurationsInstanceConfigurationInstanceDetailBlockVolumeCreateDetailSourceDetail[];
    vpusPerGb: string;
}

export interface GetCoreInstanceConfigurationsInstanceConfigurationInstanceDetailBlockVolumeCreateDetailAutotunePolicy {
    autotuneType: string;
    maxVpusPerGb: string;
}

export interface GetCoreInstanceConfigurationsInstanceConfigurationInstanceDetailBlockVolumeCreateDetailBlockVolumeReplica {
    availabilityDomain: string;
    displayName: string;
}

export interface GetCoreInstanceConfigurationsInstanceConfigurationInstanceDetailBlockVolumeCreateDetailSourceDetail {
    id: string;
    type: string;
}

export interface GetCoreInstanceConfigurationsInstanceConfigurationInstanceDetailLaunchDetail {
    agentConfigs: outputs.GetCoreInstanceConfigurationsInstanceConfigurationInstanceDetailLaunchDetailAgentConfig[];
    availabilityConfigs: outputs.GetCoreInstanceConfigurationsInstanceConfigurationInstanceDetailLaunchDetailAvailabilityConfig[];
    availabilityDomain: string;
    capacityReservationId: string;
    clusterPlacementGroupId: string;
    compartmentId: string;
    createVnicDetails: outputs.GetCoreInstanceConfigurationsInstanceConfigurationInstanceDetailLaunchDetailCreateVnicDetail[];
    dedicatedVmHostId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    extendedMetadata: {[key: string]: string};
    faultDomain: string;
    freeformTags: {[key: string]: string};
    instanceOptions: outputs.GetCoreInstanceConfigurationsInstanceConfigurationInstanceDetailLaunchDetailInstanceOption[];
    ipxeScript: string;
    isPvEncryptionInTransitEnabled: boolean;
    launchMode: string;
    launchOptions: outputs.GetCoreInstanceConfigurationsInstanceConfigurationInstanceDetailLaunchDetailLaunchOption[];
    metadata: {[key: string]: string};
    platformConfigs: outputs.GetCoreInstanceConfigurationsInstanceConfigurationInstanceDetailLaunchDetailPlatformConfig[];
    preemptibleInstanceConfigs: outputs.GetCoreInstanceConfigurationsInstanceConfigurationInstanceDetailLaunchDetailPreemptibleInstanceConfig[];
    preferredMaintenanceAction: string;
    shape: string;
    shapeConfigs: outputs.GetCoreInstanceConfigurationsInstanceConfigurationInstanceDetailLaunchDetailShapeConfig[];
    sourceDetails: outputs.GetCoreInstanceConfigurationsInstanceConfigurationInstanceDetailLaunchDetailSourceDetail[];
}

export interface GetCoreInstanceConfigurationsInstanceConfigurationInstanceDetailLaunchDetailAgentConfig {
    areAllPluginsDisabled: boolean;
    isManagementDisabled: boolean;
    isMonitoringDisabled: boolean;
    pluginsConfigs: outputs.GetCoreInstanceConfigurationsInstanceConfigurationInstanceDetailLaunchDetailAgentConfigPluginsConfig[];
}

export interface GetCoreInstanceConfigurationsInstanceConfigurationInstanceDetailLaunchDetailAgentConfigPluginsConfig {
    desiredState: string;
    name: string;
}

export interface GetCoreInstanceConfigurationsInstanceConfigurationInstanceDetailLaunchDetailAvailabilityConfig {
    isLiveMigrationPreferred: boolean;
    recoveryAction: string;
}

export interface GetCoreInstanceConfigurationsInstanceConfigurationInstanceDetailLaunchDetailCreateVnicDetail {
    assignIpv6ip: boolean;
    assignPrivateDnsRecord: boolean;
    assignPublicIp: boolean;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    hostnameLabel: string;
    ipv6addressIpv6subnetCidrPairDetails: outputs.GetCoreInstanceConfigurationsInstanceConfigurationInstanceDetailLaunchDetailCreateVnicDetailIpv6addressIpv6subnetCidrPairDetail[];
    nsgIds: string[];
    privateIp: string;
    skipSourceDestCheck: boolean;
    subnetId: string;
}

export interface GetCoreInstanceConfigurationsInstanceConfigurationInstanceDetailLaunchDetailCreateVnicDetailIpv6addressIpv6subnetCidrPairDetail {
    ipv6address: string;
    ipv6subnetCidr: string;
}

export interface GetCoreInstanceConfigurationsInstanceConfigurationInstanceDetailLaunchDetailInstanceOption {
    areLegacyImdsEndpointsDisabled: boolean;
}

export interface GetCoreInstanceConfigurationsInstanceConfigurationInstanceDetailLaunchDetailLaunchOption {
    bootVolumeType: string;
    firmware: string;
    isConsistentVolumeNamingEnabled: boolean;
    isPvEncryptionInTransitEnabled: boolean;
    networkType: string;
    remoteDataVolumeType: string;
}

export interface GetCoreInstanceConfigurationsInstanceConfigurationInstanceDetailLaunchDetailPlatformConfig {
    areVirtualInstructionsEnabled: boolean;
    configMap: {[key: string]: string};
    isAccessControlServiceEnabled: boolean;
    isInputOutputMemoryManagementUnitEnabled: boolean;
    isMeasuredBootEnabled: boolean;
    isMemoryEncryptionEnabled: boolean;
    isSecureBootEnabled: boolean;
    isSymmetricMultiThreadingEnabled: boolean;
    isTrustedPlatformModuleEnabled: boolean;
    numaNodesPerSocket: string;
    percentageOfCoresEnabled: number;
    type: string;
}

export interface GetCoreInstanceConfigurationsInstanceConfigurationInstanceDetailLaunchDetailPreemptibleInstanceConfig {
    preemptionActions: outputs.GetCoreInstanceConfigurationsInstanceConfigurationInstanceDetailLaunchDetailPreemptibleInstanceConfigPreemptionAction[];
}

export interface GetCoreInstanceConfigurationsInstanceConfigurationInstanceDetailLaunchDetailPreemptibleInstanceConfigPreemptionAction {
    preserveBootVolume: boolean;
    type: string;
}

export interface GetCoreInstanceConfigurationsInstanceConfigurationInstanceDetailLaunchDetailShapeConfig {
    baselineOcpuUtilization: string;
    memoryInGbs: number;
    nvmes: number;
    ocpus: number;
    vcpus: number;
}

export interface GetCoreInstanceConfigurationsInstanceConfigurationInstanceDetailLaunchDetailSourceDetail {
    bootVolumeId: string;
    bootVolumeSizeInGbs: string;
    bootVolumeVpusPerGb: string;
    imageId: string;
    instanceSourceImageFilterDetails: outputs.GetCoreInstanceConfigurationsInstanceConfigurationInstanceDetailLaunchDetailSourceDetailInstanceSourceImageFilterDetail[];
    kmsKeyId: string;
    sourceType: string;
}

export interface GetCoreInstanceConfigurationsInstanceConfigurationInstanceDetailLaunchDetailSourceDetailInstanceSourceImageFilterDetail {
    compartmentId: string;
    definedTagsFilter: {[key: string]: string};
    operatingSystem: string;
    operatingSystemVersion: string;
}

export interface GetCoreInstanceConfigurationsInstanceConfigurationInstanceDetailOption {
    blockVolumes: outputs.GetCoreInstanceConfigurationsInstanceConfigurationInstanceDetailOptionBlockVolume[];
    launchDetails: outputs.GetCoreInstanceConfigurationsInstanceConfigurationInstanceDetailOptionLaunchDetail[];
    secondaryVnics: outputs.GetCoreInstanceConfigurationsInstanceConfigurationInstanceDetailOptionSecondaryVnic[];
}

export interface GetCoreInstanceConfigurationsInstanceConfigurationInstanceDetailOptionBlockVolume {
    attachDetails: outputs.GetCoreInstanceConfigurationsInstanceConfigurationInstanceDetailOptionBlockVolumeAttachDetail[];
    createDetails: outputs.GetCoreInstanceConfigurationsInstanceConfigurationInstanceDetailOptionBlockVolumeCreateDetail[];
    volumeId: string;
}

export interface GetCoreInstanceConfigurationsInstanceConfigurationInstanceDetailOptionBlockVolumeAttachDetail {
    device: string;
    displayName: string;
    isPvEncryptionInTransitEnabled: boolean;
    isReadOnly: boolean;
    isShareable: boolean;
    type: string;
    useChap: boolean;
}

export interface GetCoreInstanceConfigurationsInstanceConfigurationInstanceDetailOptionBlockVolumeCreateDetail {
    autotunePolicies: outputs.GetCoreInstanceConfigurationsInstanceConfigurationInstanceDetailOptionBlockVolumeCreateDetailAutotunePolicy[];
    availabilityDomain: string;
    backupPolicyId: string;
    blockVolumeReplicas: outputs.GetCoreInstanceConfigurationsInstanceConfigurationInstanceDetailOptionBlockVolumeCreateDetailBlockVolumeReplica[];
    clusterPlacementGroupId: string;
    compartmentId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    isAutoTuneEnabled: boolean;
    kmsKeyId: string;
    sizeInGbs: string;
    sourceDetails: outputs.GetCoreInstanceConfigurationsInstanceConfigurationInstanceDetailOptionBlockVolumeCreateDetailSourceDetail[];
    vpusPerGb: string;
}

export interface GetCoreInstanceConfigurationsInstanceConfigurationInstanceDetailOptionBlockVolumeCreateDetailAutotunePolicy {
    autotuneType: string;
    maxVpusPerGb: string;
}

export interface GetCoreInstanceConfigurationsInstanceConfigurationInstanceDetailOptionBlockVolumeCreateDetailBlockVolumeReplica {
    availabilityDomain: string;
    displayName: string;
}

export interface GetCoreInstanceConfigurationsInstanceConfigurationInstanceDetailOptionBlockVolumeCreateDetailSourceDetail {
    id: string;
    type: string;
}

export interface GetCoreInstanceConfigurationsInstanceConfigurationInstanceDetailOptionLaunchDetail {
    agentConfigs: outputs.GetCoreInstanceConfigurationsInstanceConfigurationInstanceDetailOptionLaunchDetailAgentConfig[];
    availabilityConfigs: outputs.GetCoreInstanceConfigurationsInstanceConfigurationInstanceDetailOptionLaunchDetailAvailabilityConfig[];
    availabilityDomain: string;
    capacityReservationId: string;
    clusterPlacementGroupId: string;
    compartmentId: string;
    createVnicDetails: outputs.GetCoreInstanceConfigurationsInstanceConfigurationInstanceDetailOptionLaunchDetailCreateVnicDetail[];
    dedicatedVmHostId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    extendedMetadata: {[key: string]: string};
    faultDomain: string;
    freeformTags: {[key: string]: string};
    instanceOptions: outputs.GetCoreInstanceConfigurationsInstanceConfigurationInstanceDetailOptionLaunchDetailInstanceOption[];
    ipxeScript: string;
    isPvEncryptionInTransitEnabled: boolean;
    launchMode: string;
    launchOptions: outputs.GetCoreInstanceConfigurationsInstanceConfigurationInstanceDetailOptionLaunchDetailLaunchOption[];
    metadata: {[key: string]: string};
    platformConfigs: outputs.GetCoreInstanceConfigurationsInstanceConfigurationInstanceDetailOptionLaunchDetailPlatformConfig[];
    preemptibleInstanceConfigs: outputs.GetCoreInstanceConfigurationsInstanceConfigurationInstanceDetailOptionLaunchDetailPreemptibleInstanceConfig[];
    preferredMaintenanceAction: string;
    shape: string;
    shapeConfigs: outputs.GetCoreInstanceConfigurationsInstanceConfigurationInstanceDetailOptionLaunchDetailShapeConfig[];
    sourceDetails: outputs.GetCoreInstanceConfigurationsInstanceConfigurationInstanceDetailOptionLaunchDetailSourceDetail[];
}

export interface GetCoreInstanceConfigurationsInstanceConfigurationInstanceDetailOptionLaunchDetailAgentConfig {
    areAllPluginsDisabled: boolean;
    isManagementDisabled: boolean;
    isMonitoringDisabled: boolean;
    pluginsConfigs: outputs.GetCoreInstanceConfigurationsInstanceConfigurationInstanceDetailOptionLaunchDetailAgentConfigPluginsConfig[];
}

export interface GetCoreInstanceConfigurationsInstanceConfigurationInstanceDetailOptionLaunchDetailAgentConfigPluginsConfig {
    desiredState: string;
    name: string;
}

export interface GetCoreInstanceConfigurationsInstanceConfigurationInstanceDetailOptionLaunchDetailAvailabilityConfig {
    isLiveMigrationPreferred: boolean;
    recoveryAction: string;
}

export interface GetCoreInstanceConfigurationsInstanceConfigurationInstanceDetailOptionLaunchDetailCreateVnicDetail {
    assignIpv6ip: boolean;
    assignPrivateDnsRecord: boolean;
    assignPublicIp: boolean;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    hostnameLabel: string;
    ipv6addressIpv6subnetCidrPairDetails: outputs.GetCoreInstanceConfigurationsInstanceConfigurationInstanceDetailOptionLaunchDetailCreateVnicDetailIpv6addressIpv6subnetCidrPairDetail[];
    nsgIds: string[];
    privateIp: string;
    skipSourceDestCheck: boolean;
    subnetId: string;
}

export interface GetCoreInstanceConfigurationsInstanceConfigurationInstanceDetailOptionLaunchDetailCreateVnicDetailIpv6addressIpv6subnetCidrPairDetail {
    ipv6address: string;
    ipv6subnetCidr: string;
}

export interface GetCoreInstanceConfigurationsInstanceConfigurationInstanceDetailOptionLaunchDetailInstanceOption {
    areLegacyImdsEndpointsDisabled: boolean;
}

export interface GetCoreInstanceConfigurationsInstanceConfigurationInstanceDetailOptionLaunchDetailLaunchOption {
    bootVolumeType: string;
    firmware: string;
    isConsistentVolumeNamingEnabled: boolean;
    isPvEncryptionInTransitEnabled: boolean;
    networkType: string;
    remoteDataVolumeType: string;
}

export interface GetCoreInstanceConfigurationsInstanceConfigurationInstanceDetailOptionLaunchDetailPlatformConfig {
    areVirtualInstructionsEnabled: boolean;
    isAccessControlServiceEnabled: boolean;
    isInputOutputMemoryManagementUnitEnabled: boolean;
    isMeasuredBootEnabled: boolean;
    isMemoryEncryptionEnabled: boolean;
    isSecureBootEnabled: boolean;
    isSymmetricMultiThreadingEnabled: boolean;
    isTrustedPlatformModuleEnabled: boolean;
    numaNodesPerSocket: string;
    percentageOfCoresEnabled: number;
    type: string;
}

export interface GetCoreInstanceConfigurationsInstanceConfigurationInstanceDetailOptionLaunchDetailPreemptibleInstanceConfig {
    preemptionActions: outputs.GetCoreInstanceConfigurationsInstanceConfigurationInstanceDetailOptionLaunchDetailPreemptibleInstanceConfigPreemptionAction[];
}

export interface GetCoreInstanceConfigurationsInstanceConfigurationInstanceDetailOptionLaunchDetailPreemptibleInstanceConfigPreemptionAction {
    preserveBootVolume: boolean;
    type: string;
}

export interface GetCoreInstanceConfigurationsInstanceConfigurationInstanceDetailOptionLaunchDetailShapeConfig {
    baselineOcpuUtilization: string;
    memoryInGbs: number;
    nvmes: number;
    ocpus: number;
    vcpus: number;
}

export interface GetCoreInstanceConfigurationsInstanceConfigurationInstanceDetailOptionLaunchDetailSourceDetail {
    bootVolumeId: string;
    bootVolumeSizeInGbs: string;
    bootVolumeVpusPerGb: string;
    imageId: string;
    instanceSourceImageFilterDetails: outputs.GetCoreInstanceConfigurationsInstanceConfigurationInstanceDetailOptionLaunchDetailSourceDetailInstanceSourceImageFilterDetail[];
    kmsKeyId: string;
    sourceType: string;
}

export interface GetCoreInstanceConfigurationsInstanceConfigurationInstanceDetailOptionLaunchDetailSourceDetailInstanceSourceImageFilterDetail {
    compartmentId: string;
    definedTagsFilter: {[key: string]: string};
    operatingSystem: string;
    operatingSystemVersion: string;
}

export interface GetCoreInstanceConfigurationsInstanceConfigurationInstanceDetailOptionSecondaryVnic {
    createVnicDetails: outputs.GetCoreInstanceConfigurationsInstanceConfigurationInstanceDetailOptionSecondaryVnicCreateVnicDetail[];
    displayName: string;
    nicIndex: number;
}

export interface GetCoreInstanceConfigurationsInstanceConfigurationInstanceDetailOptionSecondaryVnicCreateVnicDetail {
    assignIpv6ip: boolean;
    assignPrivateDnsRecord: boolean;
    assignPublicIp: boolean;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    hostnameLabel: string;
    ipv6addressIpv6subnetCidrPairDetails: outputs.GetCoreInstanceConfigurationsInstanceConfigurationInstanceDetailOptionSecondaryVnicCreateVnicDetailIpv6addressIpv6subnetCidrPairDetail[];
    nsgIds: string[];
    privateIp: string;
    skipSourceDestCheck: boolean;
    subnetId: string;
}

export interface GetCoreInstanceConfigurationsInstanceConfigurationInstanceDetailOptionSecondaryVnicCreateVnicDetailIpv6addressIpv6subnetCidrPairDetail {
    ipv6address: string;
    ipv6subnetCidr: string;
}

export interface GetCoreInstanceConfigurationsInstanceConfigurationInstanceDetailSecondaryVnic {
    createVnicDetails: outputs.GetCoreInstanceConfigurationsInstanceConfigurationInstanceDetailSecondaryVnicCreateVnicDetail[];
    displayName: string;
    nicIndex: number;
}

export interface GetCoreInstanceConfigurationsInstanceConfigurationInstanceDetailSecondaryVnicCreateVnicDetail {
    assignIpv6ip: boolean;
    assignPrivateDnsRecord: boolean;
    assignPublicIp: boolean;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    hostnameLabel: string;
    ipv6addressIpv6subnetCidrPairDetails: outputs.GetCoreInstanceConfigurationsInstanceConfigurationInstanceDetailSecondaryVnicCreateVnicDetailIpv6addressIpv6subnetCidrPairDetail[];
    nsgIds: string[];
    privateIp: string;
    skipSourceDestCheck: boolean;
    subnetId: string;
}

export interface GetCoreInstanceConfigurationsInstanceConfigurationInstanceDetailSecondaryVnicCreateVnicDetailIpv6addressIpv6subnetCidrPairDetail {
    ipv6address: string;
    ipv6subnetCidr: string;
}

export interface GetCoreInstanceConsoleConnectionsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCoreInstanceConsoleConnectionsInstanceConsoleConnection {
    compartmentId: string;
    connectionString: string;
    definedTags: {[key: string]: string};
    fingerprint: string;
    freeformTags: {[key: string]: string};
    id: string;
    instanceId: string;
    publicKey: string;
    serviceHostKeyFingerprint: string;
    state: string;
    vncConnectionString: string;
}

export interface GetCoreInstanceCreateVnicDetail {
    assignIpv6ip: boolean;
    assignPrivateDnsRecord: boolean;
    assignPublicIp: string;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    hostnameLabel: string;
    ipv6addressIpv6subnetCidrPairDetails: outputs.GetCoreInstanceCreateVnicDetailIpv6addressIpv6subnetCidrPairDetail[];
    nsgIds: string[];
    privateIp: string;
    skipSourceDestCheck: boolean;
    subnetId: string;
    vlanId: string;
}

export interface GetCoreInstanceCreateVnicDetailIpv6addressIpv6subnetCidrPairDetail {
    ipv6address: string;
    ipv6subnetCidr: string;
}

export interface GetCoreInstanceDevicesDevice {
    isAvailable: boolean;
    name: string;
}

export interface GetCoreInstanceDevicesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCoreInstanceInstanceOption {
    areLegacyImdsEndpointsDisabled: boolean;
}

export interface GetCoreInstanceLaunchOption {
    bootVolumeType: string;
    firmware: string;
    isConsistentVolumeNamingEnabled: boolean;
    isPvEncryptionInTransitEnabled: boolean;
    networkType: string;
    remoteDataVolumeType: string;
}

export interface GetCoreInstanceLaunchVolumeAttachment {
    device: string;
    displayName: string;
    encryptionInTransitType: string;
    isAgentAutoIscsiLoginEnabled: boolean;
    isReadOnly: boolean;
    isShareable: boolean;
    launchCreateVolumeDetails: outputs.GetCoreInstanceLaunchVolumeAttachmentLaunchCreateVolumeDetail[];
    type: string;
    useChap: boolean;
    volumeId: string;
}

export interface GetCoreInstanceLaunchVolumeAttachmentLaunchCreateVolumeDetail {
    compartmentId: string;
    displayName: string;
    kmsKeyId: string;
    sizeInGbs: string;
    volumeCreationType: string;
    vpusPerGb: string;
}

export interface GetCoreInstanceMaintenanceEventsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCoreInstanceMaintenanceEventsInstanceMaintenanceEvent {
    additionalDetails: {[key: string]: string};
    alternativeResolutionAction: string;
    alternativeResolutionActions: string[];
    canDeleteLocalStorage: boolean;
    canReschedule: boolean;
    compartmentId: string;
    correlationToken: string;
    createdBy: string;
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    estimatedDuration: string;
    freeformTags: {[key: string]: string};
    id: string;
    instanceAction: string;
    instanceId: string;
    instanceMaintenanceEventId: string;
    maintenanceCategory: string;
    maintenanceReason: string;
    startWindowDuration: string;
    state: string;
    timeCreated: string;
    timeFinished: string;
    timeHardDueDate: string;
    timeStarted: string;
    timeWindowStart: string;
}

export interface GetCoreInstanceMeasuredBootReportMeasurement {
    actuals: outputs.GetCoreInstanceMeasuredBootReportMeasurementActual[];
    policies: outputs.GetCoreInstanceMeasuredBootReportMeasurementPolicy[];
}

export interface GetCoreInstanceMeasuredBootReportMeasurementActual {
    hashAlgorithm: string;
    pcrIndex: string;
    value: string;
}

export interface GetCoreInstanceMeasuredBootReportMeasurementPolicy {
    hashAlgorithm: string;
    pcrIndex: string;
    value: string;
}

export interface GetCoreInstancePlatformConfig {
    areVirtualInstructionsEnabled: boolean;
    configMap: {[key: string]: string};
    isAccessControlServiceEnabled: boolean;
    isInputOutputMemoryManagementUnitEnabled: boolean;
    isMeasuredBootEnabled: boolean;
    isMemoryEncryptionEnabled: boolean;
    isSecureBootEnabled: boolean;
    isSymmetricMultiThreadingEnabled: boolean;
    isTrustedPlatformModuleEnabled: boolean;
    numaNodesPerSocket: string;
    percentageOfCoresEnabled: number;
    type: string;
}

export interface GetCoreInstancePoolInstancesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCoreInstancePoolInstancesInstance {
    autoTerminateInstanceOnDelete: boolean;
    availabilityDomain: string;
    compartmentId: string;
    decrementSizeOnDelete: boolean;
    displayName: string;
    faultDomain: string;
    id: string;
    instanceConfigurationId: string;
    instanceId: string;
    instancePoolId: string;
    loadBalancerBackends: outputs.GetCoreInstancePoolInstancesInstanceLoadBalancerBackend[];
    region: string;
    shape: string;
    state: string;
    timeCreated: string;
}

export interface GetCoreInstancePoolInstancesInstanceLoadBalancerBackend {
    backendHealthStatus: string;
    backendName: string;
    backendSetName: string;
    loadBalancerId: string;
    state: string;
}

export interface GetCoreInstancePoolLoadBalancer {
    backendSetName: string;
    id: string;
    instancePoolId: string;
    loadBalancerId: string;
    port: number;
    state: string;
    vnicSelection: string;
}

export interface GetCoreInstancePoolPlacementConfiguration {
    availabilityDomain: string;
    faultDomains: string[];
    primarySubnetId: string;
    primaryVnicSubnets: outputs.GetCoreInstancePoolPlacementConfigurationPrimaryVnicSubnet[];
    secondaryVnicSubnets: outputs.GetCoreInstancePoolPlacementConfigurationSecondaryVnicSubnet[];
}

export interface GetCoreInstancePoolPlacementConfigurationPrimaryVnicSubnet {
    ipv6addressIpv6subnetCidrPairDetails: outputs.GetCoreInstancePoolPlacementConfigurationPrimaryVnicSubnetIpv6addressIpv6subnetCidrPairDetail[];
    isAssignIpv6ip: boolean;
    subnetId: string;
}

export interface GetCoreInstancePoolPlacementConfigurationPrimaryVnicSubnetIpv6addressIpv6subnetCidrPairDetail {
    ipv6subnetCidr: string;
}

export interface GetCoreInstancePoolPlacementConfigurationSecondaryVnicSubnet {
    displayName: string;
    ipv6addressIpv6subnetCidrPairDetails: outputs.GetCoreInstancePoolPlacementConfigurationSecondaryVnicSubnetIpv6addressIpv6subnetCidrPairDetail[];
    isAssignIpv6ip: boolean;
    subnetId: string;
}

export interface GetCoreInstancePoolPlacementConfigurationSecondaryVnicSubnetIpv6addressIpv6subnetCidrPairDetail {
    ipv6subnetCidr: string;
}

export interface GetCoreInstancePoolsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCoreInstancePoolsInstancePool {
    actualSize: number;
    compartmentId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    instanceConfigurationId: string;
    instanceDisplayNameFormatter: string;
    instanceHostnameFormatter: string;
    loadBalancers: outputs.GetCoreInstancePoolsInstancePoolLoadBalancer[];
    placementConfigurations: outputs.GetCoreInstancePoolsInstancePoolPlacementConfiguration[];
    size: number;
    state: string;
    timeCreated: string;
}

export interface GetCoreInstancePoolsInstancePoolLoadBalancer {
    backendSetName: string;
    id: string;
    instancePoolId: string;
    loadBalancerId: string;
    port: number;
    state: string;
    vnicSelection: string;
}

export interface GetCoreInstancePoolsInstancePoolPlacementConfiguration {
    availabilityDomain: string;
    faultDomains: string[];
    primarySubnetId: string;
    primaryVnicSubnets: outputs.GetCoreInstancePoolsInstancePoolPlacementConfigurationPrimaryVnicSubnet[];
    secondaryVnicSubnets: outputs.GetCoreInstancePoolsInstancePoolPlacementConfigurationSecondaryVnicSubnet[];
}

export interface GetCoreInstancePoolsInstancePoolPlacementConfigurationPrimaryVnicSubnet {
    ipv6addressIpv6subnetCidrPairDetails: outputs.GetCoreInstancePoolsInstancePoolPlacementConfigurationPrimaryVnicSubnetIpv6addressIpv6subnetCidrPairDetail[];
    isAssignIpv6ip: boolean;
    subnetId: string;
}

export interface GetCoreInstancePoolsInstancePoolPlacementConfigurationPrimaryVnicSubnetIpv6addressIpv6subnetCidrPairDetail {
    ipv6subnetCidr: string;
}

export interface GetCoreInstancePoolsInstancePoolPlacementConfigurationSecondaryVnicSubnet {
    displayName: string;
    ipv6addressIpv6subnetCidrPairDetails: outputs.GetCoreInstancePoolsInstancePoolPlacementConfigurationSecondaryVnicSubnetIpv6addressIpv6subnetCidrPairDetail[];
    isAssignIpv6ip: boolean;
    subnetId: string;
}

export interface GetCoreInstancePoolsInstancePoolPlacementConfigurationSecondaryVnicSubnetIpv6addressIpv6subnetCidrPairDetail {
    ipv6subnetCidr: string;
}

export interface GetCoreInstancePreemptibleInstanceConfig {
    preemptionActions: outputs.GetCoreInstancePreemptibleInstanceConfigPreemptionAction[];
}

export interface GetCoreInstancePreemptibleInstanceConfigPreemptionAction {
    preserveBootVolume: boolean;
    type: string;
}

export interface GetCoreInstanceShapeConfig {
    baselineOcpuUtilization: string;
    gpuDescription: string;
    gpus: number;
    localDiskDescription: string;
    localDisks: number;
    localDisksTotalSizeInGbs: number;
    maxVnicAttachments: number;
    memoryInGbs: number;
    networkingBandwidthInGbps: number;
    nvmes: number;
    ocpus: number;
    processorDescription: string;
    vcpus: number;
}

export interface GetCoreInstanceSourceDetail {
    bootVolumeSizeInGbs: string;
    bootVolumeVpusPerGb: string;
    instanceSourceImageFilterDetails: outputs.GetCoreInstanceSourceDetailInstanceSourceImageFilterDetail[];
    isPreserveBootVolumeEnabled: boolean;
    kmsKeyId: string;
    sourceId: string;
    sourceType: string;
}

export interface GetCoreInstanceSourceDetailInstanceSourceImageFilterDetail {
    compartmentId: string;
    definedTagsFilter: {[key: string]: string};
    operatingSystem: string;
    operatingSystemVersion: string;
}

export interface GetCoreInstancesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCoreInstancesInstance {
    agentConfigs: outputs.GetCoreInstancesInstanceAgentConfig[];
    async: boolean;
    availabilityConfigs: outputs.GetCoreInstancesInstanceAvailabilityConfig[];
    availabilityDomain: string;
    bootVolumeId: string;
    capacityReservationId: string;
    clusterPlacementGroupId: string;
    compartmentId: string;
    computeClusterId: string;
    createVnicDetails: outputs.GetCoreInstancesInstanceCreateVnicDetail[];
    dedicatedVmHostId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    extendedMetadata: {[key: string]: string};
    faultDomain: string;
    freeformTags: {[key: string]: string};
    hostnameLabel: string;
    id: string;
    image: string;
    instanceConfigurationId: string;
    instanceOptions: outputs.GetCoreInstancesInstanceInstanceOption[];
    ipxeScript: string;
    isCrossNumaNode: boolean;
    isPvEncryptionInTransitEnabled: boolean;
    launchMode: string;
    launchOptions: outputs.GetCoreInstancesInstanceLaunchOption[];
    launchVolumeAttachments: outputs.GetCoreInstancesInstanceLaunchVolumeAttachment[];
    metadata: {[key: string]: string};
    platformConfigs: outputs.GetCoreInstancesInstancePlatformConfig[];
    preemptibleInstanceConfigs: outputs.GetCoreInstancesInstancePreemptibleInstanceConfig[];
    preserveBootVolume: boolean;
    preserveDataVolumesCreatedAtLaunch: boolean;
    privateIp: string;
    publicIp: string;
    region: string;
    shape: string;
    shapeConfigs: outputs.GetCoreInstancesInstanceShapeConfig[];
    sourceDetails: outputs.GetCoreInstancesInstanceSourceDetail[];
    state: string;
    subnetId: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeMaintenanceRebootDue: string;
    updateOperationConstraint: string;
}

export interface GetCoreInstancesInstanceAgentConfig {
    areAllPluginsDisabled: boolean;
    isManagementDisabled: boolean;
    isMonitoringDisabled: boolean;
    pluginsConfigs: outputs.GetCoreInstancesInstanceAgentConfigPluginsConfig[];
}

export interface GetCoreInstancesInstanceAgentConfigPluginsConfig {
    desiredState: string;
    name: string;
}

export interface GetCoreInstancesInstanceAvailabilityConfig {
    isLiveMigrationPreferred: boolean;
    recoveryAction: string;
}

export interface GetCoreInstancesInstanceCreateVnicDetail {
    assignIpv6ip: boolean;
    assignPrivateDnsRecord: boolean;
    assignPublicIp: string;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    hostnameLabel: string;
    ipv6addressIpv6subnetCidrPairDetails: outputs.GetCoreInstancesInstanceCreateVnicDetailIpv6addressIpv6subnetCidrPairDetail[];
    nsgIds: string[];
    privateIp: string;
    skipSourceDestCheck: boolean;
    subnetId: string;
    vlanId: string;
}

export interface GetCoreInstancesInstanceCreateVnicDetailIpv6addressIpv6subnetCidrPairDetail {
    ipv6address: string;
    ipv6subnetCidr: string;
}

export interface GetCoreInstancesInstanceInstanceOption {
    areLegacyImdsEndpointsDisabled: boolean;
}

export interface GetCoreInstancesInstanceLaunchOption {
    bootVolumeType: string;
    firmware: string;
    isConsistentVolumeNamingEnabled: boolean;
    isPvEncryptionInTransitEnabled: boolean;
    networkType: string;
    remoteDataVolumeType: string;
}

export interface GetCoreInstancesInstanceLaunchVolumeAttachment {
    device: string;
    displayName: string;
    encryptionInTransitType: string;
    isAgentAutoIscsiLoginEnabled: boolean;
    isReadOnly: boolean;
    isShareable: boolean;
    launchCreateVolumeDetails: outputs.GetCoreInstancesInstanceLaunchVolumeAttachmentLaunchCreateVolumeDetail[];
    type: string;
    useChap: boolean;
    volumeId: string;
}

export interface GetCoreInstancesInstanceLaunchVolumeAttachmentLaunchCreateVolumeDetail {
    compartmentId: string;
    displayName: string;
    kmsKeyId: string;
    sizeInGbs: string;
    volumeCreationType: string;
    vpusPerGb: string;
}

export interface GetCoreInstancesInstancePlatformConfig {
    areVirtualInstructionsEnabled: boolean;
    configMap: {[key: string]: string};
    isAccessControlServiceEnabled: boolean;
    isInputOutputMemoryManagementUnitEnabled: boolean;
    isMeasuredBootEnabled: boolean;
    isMemoryEncryptionEnabled: boolean;
    isSecureBootEnabled: boolean;
    isSymmetricMultiThreadingEnabled: boolean;
    isTrustedPlatformModuleEnabled: boolean;
    numaNodesPerSocket: string;
    percentageOfCoresEnabled: number;
    type: string;
}

export interface GetCoreInstancesInstancePreemptibleInstanceConfig {
    preemptionActions: outputs.GetCoreInstancesInstancePreemptibleInstanceConfigPreemptionAction[];
}

export interface GetCoreInstancesInstancePreemptibleInstanceConfigPreemptionAction {
    preserveBootVolume: boolean;
    type: string;
}

export interface GetCoreInstancesInstanceShapeConfig {
    baselineOcpuUtilization: string;
    gpuDescription: string;
    gpus: number;
    localDiskDescription: string;
    localDisks: number;
    localDisksTotalSizeInGbs: number;
    maxVnicAttachments: number;
    memoryInGbs: number;
    networkingBandwidthInGbps: number;
    nvmes: number;
    ocpus: number;
    processorDescription: string;
    vcpus: number;
}

export interface GetCoreInstancesInstanceSourceDetail {
    bootVolumeSizeInGbs: string;
    bootVolumeVpusPerGb: string;
    instanceSourceImageFilterDetails: outputs.GetCoreInstancesInstanceSourceDetailInstanceSourceImageFilterDetail[];
    isPreserveBootVolumeEnabled: boolean;
    kmsKeyId: string;
    sourceId: string;
    sourceType: string;
}

export interface GetCoreInstancesInstanceSourceDetailInstanceSourceImageFilterDetail {
    compartmentId: string;
    definedTagsFilter: {[key: string]: string};
    operatingSystem: string;
    operatingSystemVersion: string;
}

export interface GetCoreInternetGatewaysFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCoreInternetGatewaysGateway {
    compartmentId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    enabled: boolean;
    freeformTags: {[key: string]: string};
    id: string;
    routeTableId: string;
    state: string;
    timeCreated: string;
    vcnId: string;
}

export interface GetCoreIpInventorySubnetCidrIpInventoryCidrUtilizationSummary {
    addressType: string;
    cidr: string;
    utilization: number;
}

export interface GetCoreIpInventorySubnetIpInventorySubnetResourceSummary {
    addressType: string;
    assignedResourceName: string;
    assignedResourceType: string;
    assignedTime: string;
    associatedPublicIp: string;
    associatedPublicIpPool: string;
    dnsHostName: string;
    ipAddress: string;
    ipAddressLifetime: string;
    ipId: string;
    parentCidr: string;
    publicIpLifetime: string;
}

export interface GetCoreIpInventoryVcnOverlapsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCoreIpInventoryVcnOverlapsIpInventoryVcnOverlapSummary {
    cidr: string;
    overlappingCidr: string;
    overlappingVcnId: string;
    overlappingVcnName: string;
}

export interface GetCoreIpsecAlgorithmAllowedPhaseOneParameter {
    authenticationAlgorithms: string[];
    dhGroups: string[];
    encryptionAlgorithms: string[];
}

export interface GetCoreIpsecAlgorithmAllowedPhaseTwoParameter {
    authenticationAlgorithms: string[];
    encryptionAlgorithms: string[];
    pfsDhGroups: string[];
}

export interface GetCoreIpsecAlgorithmDefaultPhaseOneParameter {
    defaultAuthenticationAlgorithms: string[];
    defaultDhGroups: string[];
    defaultEncryptionAlgorithms: string[];
}

export interface GetCoreIpsecAlgorithmDefaultPhaseTwoParameter {
    defaultAuthenticationAlgorithms: string[];
    defaultEncryptionAlgorithms: string[];
    defaultPfsDhGroup: string;
}

export interface GetCoreIpsecConfigFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCoreIpsecConfigTunnel {
    ipAddress: string;
    sharedSecret: string;
    timeCreated: string;
}

export interface GetCoreIpsecConnectionTunnelBgpSessionInfo {
    bgpIpv6State: string;
    bgpIpv6state: string;
    bgpState: string;
    customerBgpAsn: string;
    customerInterfaceIp: string;
    customerInterfaceIpv6: string;
    oracleBgpAsn: string;
    oracleInterfaceIp: string;
    oracleInterfaceIpv6: string;
}

export interface GetCoreIpsecConnectionTunnelDpdConfig {
    dpdMode: string;
    dpdTimeoutInSec: number;
}

export interface GetCoreIpsecConnectionTunnelEncryptionDomainConfig {
    cpeTrafficSelectors: string[];
    oracleTrafficSelectors: string[];
}

export interface GetCoreIpsecConnectionTunnelPhaseOneDetail {
    customAuthenticationAlgorithm: string;
    customDhGroup: string;
    customEncryptionAlgorithm: string;
    isCustomPhaseOneConfig: boolean;
    isIkeEstablished: boolean;
    lifetime: number;
    negotiatedAuthenticationAlgorithm: string;
    negotiatedDhGroup: string;
    negotiatedEncryptionAlgorithm: string;
    remainingLifetime: string;
    remainingLifetimeInt: number;
    remainingLifetimeLastRetrieved: string;
}

export interface GetCoreIpsecConnectionTunnelPhaseTwoDetail {
    customAuthenticationAlgorithm: string;
    customEncryptionAlgorithm: string;
    dhGroup: string;
    isCustomPhaseTwoConfig: boolean;
    isEspEstablished: boolean;
    isPfsEnabled: boolean;
    lifetime: number;
    negotiatedAuthenticationAlgorithm: string;
    negotiatedDhGroup: string;
    negotiatedEncryptionAlgorithm: string;
    remainingLifetime: string;
    remainingLifetimeInt: number;
    remainingLifetimeLastRetrieved: string;
}

export interface GetCoreIpsecConnectionTunnelRoutesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCoreIpsecConnectionTunnelRoutesTunnelRoute {
    advertiser: string;
    age: string;
    asPaths: number[];
    isBestPath: boolean;
    prefix: string;
}

export interface GetCoreIpsecConnectionTunnelsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCoreIpsecConnectionTunnelsIpSecConnectionTunnel {
    associatedVirtualCircuits: string[];
    bgpSessionInfos: outputs.GetCoreIpsecConnectionTunnelsIpSecConnectionTunnelBgpSessionInfo[];
    compartmentId: string;
    cpeIp: string;
    displayName: string;
    dpdConfigs: outputs.GetCoreIpsecConnectionTunnelsIpSecConnectionTunnelDpdConfig[];
    dpdMode: string;
    dpdTimeoutInSec: number;
    encryptionDomainConfigs: outputs.GetCoreIpsecConnectionTunnelsIpSecConnectionTunnelEncryptionDomainConfig[];
    id: string;
    ikeVersion: string;
    ipsecId: string;
    natTranslationEnabled: string;
    oracleCanInitiate: string;
    phaseOneDetails: outputs.GetCoreIpsecConnectionTunnelsIpSecConnectionTunnelPhaseOneDetail[];
    phaseTwoDetails: outputs.GetCoreIpsecConnectionTunnelsIpSecConnectionTunnelPhaseTwoDetail[];
    routing: string;
    sharedSecret: string;
    state: string;
    status: string;
    timeCreated: string;
    timeStatusUpdated: string;
    tunnelId: string;
    vpnIp: string;
}

export interface GetCoreIpsecConnectionTunnelsIpSecConnectionTunnelBgpSessionInfo {
    bgpIpv6State: string;
    bgpIpv6state: string;
    bgpState: string;
    customerBgpAsn: string;
    customerInterfaceIp: string;
    customerInterfaceIpv6: string;
    oracleBgpAsn: string;
    oracleInterfaceIp: string;
    oracleInterfaceIpv6: string;
}

export interface GetCoreIpsecConnectionTunnelsIpSecConnectionTunnelDpdConfig {
    dpdMode: string;
    dpdTimeoutInSec: number;
}

export interface GetCoreIpsecConnectionTunnelsIpSecConnectionTunnelEncryptionDomainConfig {
    cpeTrafficSelectors: string[];
    oracleTrafficSelectors: string[];
}

export interface GetCoreIpsecConnectionTunnelsIpSecConnectionTunnelPhaseOneDetail {
    customAuthenticationAlgorithm: string;
    customDhGroup: string;
    customEncryptionAlgorithm: string;
    isCustomPhaseOneConfig: boolean;
    isIkeEstablished: boolean;
    lifetime: number;
    negotiatedAuthenticationAlgorithm: string;
    negotiatedDhGroup: string;
    negotiatedEncryptionAlgorithm: string;
    remainingLifetime: string;
    remainingLifetimeInt: number;
    remainingLifetimeLastRetrieved: string;
}

export interface GetCoreIpsecConnectionTunnelsIpSecConnectionTunnelPhaseTwoDetail {
    customAuthenticationAlgorithm: string;
    customEncryptionAlgorithm: string;
    dhGroup: string;
    isCustomPhaseTwoConfig: boolean;
    isEspEstablished: boolean;
    isPfsEnabled: boolean;
    lifetime: number;
    negotiatedAuthenticationAlgorithm: string;
    negotiatedDhGroup: string;
    negotiatedEncryptionAlgorithm: string;
    remainingLifetime: string;
    remainingLifetimeInt: number;
    remainingLifetimeLastRetrieved: string;
}

export interface GetCoreIpsecConnectionsConnection {
    compartmentId: string;
    cpeId: string;
    cpeLocalIdentifier: string;
    cpeLocalIdentifierType: string;
    definedTags: {[key: string]: string};
    displayName: string;
    drgId: string;
    freeformTags: {[key: string]: string};
    id: string;
    state: string;
    staticRoutes: string[];
    timeCreated: string;
    transportType: string;
}

export interface GetCoreIpsecConnectionsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCoreIpsecStatusFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCoreIpsecStatusTunnel {
    ipAddress: string;
    state: string;
    timeCreated: string;
    timeStateModified: string;
}

export interface GetCoreIpv6sFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCoreIpv6sIpv6 {
    compartmentId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    ipAddress: string;
    ipv6subnetCidr: string;
    state: string;
    subnetId: string;
    timeCreated: string;
    vnicId: string;
}

export interface GetCoreListingResourceVersionsAppCatalogListingResourceVersion {
    accessiblePorts: number[];
    allowedActions: string[];
    availableRegions: string[];
    compatibleShapes: string[];
    listingId: string;
    listingResourceId: string;
    listingResourceVersion: string;
    timePublished: string;
}

export interface GetCoreListingResourceVersionsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCoreLocalPeeringGatewaysFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCoreLocalPeeringGatewaysLocalPeeringGateway {
    compartmentId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    isCrossTenancyPeering: boolean;
    peerAdvertisedCidr: string;
    peerAdvertisedCidrDetails: string[];
    peerId: string;
    peeringStatus: string;
    peeringStatusDetails: string;
    routeTableId: string;
    state: string;
    timeCreated: string;
    vcnId: string;
}

export interface GetCoreNatGatewaysFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCoreNatGatewaysNatGateway {
    blockTraffic: boolean;
    compartmentId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    natIp: string;
    publicIpId: string;
    routeTableId: string;
    state: string;
    timeCreated: string;
    vcnId: string;
}

export interface GetCoreNetworkSecurityGroupSecurityRulesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCoreNetworkSecurityGroupSecurityRulesSecurityRule {
    description: string;
    destination: string;
    destinationType: string;
    direction: string;
    icmpOptions: outputs.GetCoreNetworkSecurityGroupSecurityRulesSecurityRuleIcmpOption[];
    id: string;
    isValid: boolean;
    protocol: string;
    source: string;
    sourceType: string;
    stateless: boolean;
    tcpOptions: outputs.GetCoreNetworkSecurityGroupSecurityRulesSecurityRuleTcpOption[];
    timeCreated: string;
    udpOptions: outputs.GetCoreNetworkSecurityGroupSecurityRulesSecurityRuleUdpOption[];
}

export interface GetCoreNetworkSecurityGroupSecurityRulesSecurityRuleIcmpOption {
    code: number;
    type: number;
}

export interface GetCoreNetworkSecurityGroupSecurityRulesSecurityRuleTcpOption {
    destinationPortRanges: outputs.GetCoreNetworkSecurityGroupSecurityRulesSecurityRuleTcpOptionDestinationPortRange[];
    sourcePortRanges: outputs.GetCoreNetworkSecurityGroupSecurityRulesSecurityRuleTcpOptionSourcePortRange[];
}

export interface GetCoreNetworkSecurityGroupSecurityRulesSecurityRuleTcpOptionDestinationPortRange {
    max: number;
    min: number;
}

export interface GetCoreNetworkSecurityGroupSecurityRulesSecurityRuleTcpOptionSourcePortRange {
    max: number;
    min: number;
}

export interface GetCoreNetworkSecurityGroupSecurityRulesSecurityRuleUdpOption {
    destinationPortRanges: outputs.GetCoreNetworkSecurityGroupSecurityRulesSecurityRuleUdpOptionDestinationPortRange[];
    sourcePortRanges: outputs.GetCoreNetworkSecurityGroupSecurityRulesSecurityRuleUdpOptionSourcePortRange[];
}

export interface GetCoreNetworkSecurityGroupSecurityRulesSecurityRuleUdpOptionDestinationPortRange {
    max: number;
    min: number;
}

export interface GetCoreNetworkSecurityGroupSecurityRulesSecurityRuleUdpOptionSourcePortRange {
    max: number;
    min: number;
}

export interface GetCoreNetworkSecurityGroupVnicsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCoreNetworkSecurityGroupVnicsNetworkSecurityGroupVnic {
    resourceId: string;
    timeAssociated: string;
    vnicId: string;
}

export interface GetCoreNetworkSecurityGroupsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCoreNetworkSecurityGroupsNetworkSecurityGroup {
    compartmentId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    state: string;
    timeCreated: string;
    vcnId: string;
}

export interface GetCorePeerRegionForRemotePeeringsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCorePeerRegionForRemotePeeringsPeerRegionForRemotePeering {
    name: string;
}

export interface GetCorePrivateIpsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCorePrivateIpsPrivateIp {
    availabilityDomain: string;
    compartmentId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    hostnameLabel: string;
    id: string;
    ipAddress: string;
    isPrimary: boolean;
    isReserved: boolean;
    subnetId: string;
    timeCreated: string;
    vlanId: string;
    vnicId: string;
}

export interface GetCorePublicIpPoolsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCorePublicIpPoolsPublicIpPoolCollection {
    items: outputs.GetCorePublicIpPoolsPublicIpPoolCollectionItem[];
}

export interface GetCorePublicIpPoolsPublicIpPoolCollectionItem {
    cidrBlocks: string[];
    compartmentId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    state: string;
    timeCreated: string;
}

export interface GetCorePublicIpTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface GetCorePublicIpsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCorePublicIpsPublicIp {
    assignedEntityId: string;
    assignedEntityType: string;
    availabilityDomain: string;
    compartmentId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    ipAddress: string;
    lifetime: string;
    privateIpId: string;
    publicIpPoolId: string;
    scope: string;
    state: string;
    timeCreated: string;
}

export interface GetCoreRemotePeeringConnectionsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCoreRemotePeeringConnectionsRemotePeeringConnection {
    compartmentId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    drgId: string;
    freeformTags: {[key: string]: string};
    id: string;
    isCrossTenancyPeering: boolean;
    peerId: string;
    peerRegionName: string;
    peerTenancyId: string;
    peeringStatus: string;
    state: string;
    timeCreated: string;
}

export interface GetCoreRouteTablesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCoreRouteTablesRouteTable {
    compartmentId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    routeRules: outputs.GetCoreRouteTablesRouteTableRouteRule[];
    state: string;
    timeCreated: string;
    vcnId: string;
}

export interface GetCoreRouteTablesRouteTableRouteRule {
    cidrBlock: string;
    description: string;
    destination: string;
    destinationType: string;
    networkEntityId: string;
    routeType: string;
}

export interface GetCoreSecurityListsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCoreSecurityListsSecurityList {
    compartmentId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    egressSecurityRules: outputs.GetCoreSecurityListsSecurityListEgressSecurityRule[];
    freeformTags: {[key: string]: string};
    id: string;
    ingressSecurityRules: outputs.GetCoreSecurityListsSecurityListIngressSecurityRule[];
    state: string;
    timeCreated: string;
    vcnId: string;
}

export interface GetCoreSecurityListsSecurityListEgressSecurityRule {
    description: string;
    destination: string;
    destinationType: string;
    icmpOptions: outputs.GetCoreSecurityListsSecurityListEgressSecurityRuleIcmpOption[];
    protocol: string;
    stateless: boolean;
    tcpOptions: outputs.GetCoreSecurityListsSecurityListEgressSecurityRuleTcpOption[];
    udpOptions: outputs.GetCoreSecurityListsSecurityListEgressSecurityRuleUdpOption[];
}

export interface GetCoreSecurityListsSecurityListEgressSecurityRuleIcmpOption {
    code: number;
    type: number;
}

export interface GetCoreSecurityListsSecurityListEgressSecurityRuleTcpOption {
    max: number;
    min: number;
    sourcePortRanges: outputs.GetCoreSecurityListsSecurityListEgressSecurityRuleTcpOptionSourcePortRange[];
}

export interface GetCoreSecurityListsSecurityListEgressSecurityRuleTcpOptionSourcePortRange {
    max: number;
    min: number;
}

export interface GetCoreSecurityListsSecurityListEgressSecurityRuleUdpOption {
    max: number;
    min: number;
    sourcePortRanges: outputs.GetCoreSecurityListsSecurityListEgressSecurityRuleUdpOptionSourcePortRange[];
}

export interface GetCoreSecurityListsSecurityListEgressSecurityRuleUdpOptionSourcePortRange {
    max: number;
    min: number;
}

export interface GetCoreSecurityListsSecurityListIngressSecurityRule {
    description: string;
    icmpOptions: outputs.GetCoreSecurityListsSecurityListIngressSecurityRuleIcmpOption[];
    protocol: string;
    source: string;
    sourceType: string;
    stateless: boolean;
    tcpOptions: outputs.GetCoreSecurityListsSecurityListIngressSecurityRuleTcpOption[];
    udpOptions: outputs.GetCoreSecurityListsSecurityListIngressSecurityRuleUdpOption[];
}

export interface GetCoreSecurityListsSecurityListIngressSecurityRuleIcmpOption {
    code: number;
    type: number;
}

export interface GetCoreSecurityListsSecurityListIngressSecurityRuleTcpOption {
    max: number;
    min: number;
    sourcePortRanges: outputs.GetCoreSecurityListsSecurityListIngressSecurityRuleTcpOptionSourcePortRange[];
}

export interface GetCoreSecurityListsSecurityListIngressSecurityRuleTcpOptionSourcePortRange {
    max: number;
    min: number;
}

export interface GetCoreSecurityListsSecurityListIngressSecurityRuleUdpOption {
    max: number;
    min: number;
    sourcePortRanges: outputs.GetCoreSecurityListsSecurityListIngressSecurityRuleUdpOptionSourcePortRange[];
}

export interface GetCoreSecurityListsSecurityListIngressSecurityRuleUdpOptionSourcePortRange {
    max: number;
    min: number;
}

export interface GetCoreServiceGatewaysFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCoreServiceGatewaysServiceGateway {
    blockTraffic: boolean;
    compartmentId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    routeTableId: string;
    services: outputs.GetCoreServiceGatewaysServiceGatewayService[];
    state: string;
    timeCreated: string;
    vcnId: string;
}

export interface GetCoreServiceGatewaysServiceGatewayService {
    serviceId: string;
    serviceName: string;
}

export interface GetCoreServicesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCoreServicesService {
    cidrBlock: string;
    description: string;
    id: string;
    name: string;
}

export interface GetCoreShapeFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCoreShapeShape {
    baselineOcpuUtilizations: string[];
    billingType: string;
    gpuDescription: string;
    gpus: number;
    isBilledForStoppedInstance: boolean;
    isFlexible: boolean;
    isLiveMigrationSupported: boolean;
    isSubcore: boolean;
    localDiskDescription: string;
    localDisks: number;
    localDisksTotalSizeInGbs: number;
    maxVnicAttachmentOptions: outputs.GetCoreShapeShapeMaxVnicAttachmentOption[];
    maxVnicAttachments: number;
    memoryInGbs: number;
    memoryOptions: outputs.GetCoreShapeShapeMemoryOption[];
    minTotalBaselineOcpusRequired: number;
    name: string;
    networkPorts: number;
    networkingBandwidthInGbps: number;
    networkingBandwidthOptions: outputs.GetCoreShapeShapeNetworkingBandwidthOption[];
    ocpuOptions: outputs.GetCoreShapeShapeOcpuOption[];
    ocpus: number;
    platformConfigOptions: outputs.GetCoreShapeShapePlatformConfigOption[];
    processorDescription: string;
    quotaNames: string[];
    rdmaBandwidthInGbps: number;
    rdmaPorts: number;
    recommendedAlternatives: outputs.GetCoreShapeShapeRecommendedAlternative[];
    resizeCompatibleShapes: string[];
}

export interface GetCoreShapeShapeMaxVnicAttachmentOption {
    defaultPerOcpu: number;
    max: number;
    min: number;
}

export interface GetCoreShapeShapeMemoryOption {
    defaultPerOcpuInGbs: number;
    maxInGbs: number;
    maxPerNumaNodeInGbs: number;
    maxPerOcpuInGbs: number;
    minInGbs: number;
    minPerOcpuInGbs: number;
}

export interface GetCoreShapeShapeNetworkingBandwidthOption {
    defaultPerOcpuInGbps: number;
    maxInGbps: number;
    minInGbps: number;
}

export interface GetCoreShapeShapeOcpuOption {
    max: number;
    maxPerNumaNode: number;
    min: number;
}

export interface GetCoreShapeShapePlatformConfigOption {
    accessControlServiceOptions: outputs.GetCoreShapeShapePlatformConfigOptionAccessControlServiceOption[];
    inputOutputMemoryManagementUnitOptions: outputs.GetCoreShapeShapePlatformConfigOptionInputOutputMemoryManagementUnitOption[];
    measuredBootOptions: outputs.GetCoreShapeShapePlatformConfigOptionMeasuredBootOption[];
    memoryEncryptionOptions: outputs.GetCoreShapeShapePlatformConfigOptionMemoryEncryptionOption[];
    numaNodesPerSocketPlatformOptions: outputs.GetCoreShapeShapePlatformConfigOptionNumaNodesPerSocketPlatformOption[];
    percentageOfCoresEnabledOptions: outputs.GetCoreShapeShapePlatformConfigOptionPercentageOfCoresEnabledOption[];
    secureBootOptions: outputs.GetCoreShapeShapePlatformConfigOptionSecureBootOption[];
    symmetricMultiThreadingOptions: outputs.GetCoreShapeShapePlatformConfigOptionSymmetricMultiThreadingOption[];
    trustedPlatformModuleOptions: outputs.GetCoreShapeShapePlatformConfigOptionTrustedPlatformModuleOption[];
    type: string;
    virtualInstructionsOptions: outputs.GetCoreShapeShapePlatformConfigOptionVirtualInstructionsOption[];
}

export interface GetCoreShapeShapePlatformConfigOptionAccessControlServiceOption {
    allowedValues: boolean[];
    isDefaultEnabled: boolean;
}

export interface GetCoreShapeShapePlatformConfigOptionInputOutputMemoryManagementUnitOption {
    allowedValues: boolean[];
    isDefaultEnabled: boolean;
}

export interface GetCoreShapeShapePlatformConfigOptionMeasuredBootOption {
    allowedValues: boolean[];
    isDefaultEnabled: boolean;
}

export interface GetCoreShapeShapePlatformConfigOptionMemoryEncryptionOption {
    allowedValues: boolean[];
    isDefaultEnabled: boolean;
}

export interface GetCoreShapeShapePlatformConfigOptionNumaNodesPerSocketPlatformOption {
    allowedValues: string[];
    defaultValue: string;
}

export interface GetCoreShapeShapePlatformConfigOptionPercentageOfCoresEnabledOption {
    defaultValue: number;
    max: number;
    min: number;
}

export interface GetCoreShapeShapePlatformConfigOptionSecureBootOption {
    allowedValues: boolean[];
    isDefaultEnabled: boolean;
}

export interface GetCoreShapeShapePlatformConfigOptionSymmetricMultiThreadingOption {
    allowedValues: boolean[];
    isDefaultEnabled: boolean;
}

export interface GetCoreShapeShapePlatformConfigOptionTrustedPlatformModuleOption {
    allowedValues: boolean[];
    isDefaultEnabled: boolean;
}

export interface GetCoreShapeShapePlatformConfigOptionVirtualInstructionsOption {
    allowedValues: boolean[];
    isDefaultEnabled: boolean;
}

export interface GetCoreShapeShapeRecommendedAlternative {
    shapeName: string;
}

export interface GetCoreShapesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCoreShapesShape {
    baselineOcpuUtilizations: string[];
    billingType: string;
    gpuDescription: string;
    gpus: number;
    isBilledForStoppedInstance: boolean;
    isFlexible: boolean;
    isLiveMigrationSupported: boolean;
    isSubcore: boolean;
    localDiskDescription: string;
    localDisks: number;
    localDisksTotalSizeInGbs: number;
    maxVnicAttachmentOptions: outputs.GetCoreShapesShapeMaxVnicAttachmentOption[];
    maxVnicAttachments: number;
    memoryInGbs: number;
    memoryOptions: outputs.GetCoreShapesShapeMemoryOption[];
    minTotalBaselineOcpusRequired: number;
    name: string;
    networkPorts: number;
    networkingBandwidthInGbps: number;
    networkingBandwidthOptions: outputs.GetCoreShapesShapeNetworkingBandwidthOption[];
    ocpuOptions: outputs.GetCoreShapesShapeOcpuOption[];
    ocpus: number;
    platformConfigOptions: outputs.GetCoreShapesShapePlatformConfigOption[];
    processorDescription: string;
    quotaNames: string[];
    rdmaBandwidthInGbps: number;
    rdmaPorts: number;
    recommendedAlternatives: outputs.GetCoreShapesShapeRecommendedAlternative[];
    resizeCompatibleShapes: string[];
}

export interface GetCoreShapesShapeMaxVnicAttachmentOption {
    defaultPerOcpu: number;
    max: number;
    min: number;
}

export interface GetCoreShapesShapeMemoryOption {
    defaultPerOcpuInGbs: number;
    maxInGbs: number;
    maxPerNumaNodeInGbs: number;
    maxPerOcpuInGbs: number;
    minInGbs: number;
    minPerOcpuInGbs: number;
}

export interface GetCoreShapesShapeNetworkingBandwidthOption {
    defaultPerOcpuInGbps: number;
    maxInGbps: number;
    minInGbps: number;
}

export interface GetCoreShapesShapeOcpuOption {
    max: number;
    maxPerNumaNode: number;
    min: number;
}

export interface GetCoreShapesShapePlatformConfigOption {
    accessControlServiceOptions: outputs.GetCoreShapesShapePlatformConfigOptionAccessControlServiceOption[];
    inputOutputMemoryManagementUnitOptions: outputs.GetCoreShapesShapePlatformConfigOptionInputOutputMemoryManagementUnitOption[];
    measuredBootOptions: outputs.GetCoreShapesShapePlatformConfigOptionMeasuredBootOption[];
    memoryEncryptionOptions: outputs.GetCoreShapesShapePlatformConfigOptionMemoryEncryptionOption[];
    numaNodesPerSocketPlatformOptions: outputs.GetCoreShapesShapePlatformConfigOptionNumaNodesPerSocketPlatformOption[];
    percentageOfCoresEnabledOptions: outputs.GetCoreShapesShapePlatformConfigOptionPercentageOfCoresEnabledOption[];
    secureBootOptions: outputs.GetCoreShapesShapePlatformConfigOptionSecureBootOption[];
    symmetricMultiThreadingOptions: outputs.GetCoreShapesShapePlatformConfigOptionSymmetricMultiThreadingOption[];
    trustedPlatformModuleOptions: outputs.GetCoreShapesShapePlatformConfigOptionTrustedPlatformModuleOption[];
    type: string;
    virtualInstructionsOptions: outputs.GetCoreShapesShapePlatformConfigOptionVirtualInstructionsOption[];
}

export interface GetCoreShapesShapePlatformConfigOptionAccessControlServiceOption {
    allowedValues: boolean[];
    isDefaultEnabled: boolean;
}

export interface GetCoreShapesShapePlatformConfigOptionInputOutputMemoryManagementUnitOption {
    allowedValues: boolean[];
    isDefaultEnabled: boolean;
}

export interface GetCoreShapesShapePlatformConfigOptionMeasuredBootOption {
    allowedValues: boolean[];
    isDefaultEnabled: boolean;
}

export interface GetCoreShapesShapePlatformConfigOptionMemoryEncryptionOption {
    allowedValues: boolean[];
    isDefaultEnabled: boolean;
}

export interface GetCoreShapesShapePlatformConfigOptionNumaNodesPerSocketPlatformOption {
    allowedValues: string[];
    defaultValue: string;
}

export interface GetCoreShapesShapePlatformConfigOptionPercentageOfCoresEnabledOption {
    defaultValue: number;
    max: number;
    min: number;
}

export interface GetCoreShapesShapePlatformConfigOptionSecureBootOption {
    allowedValues: boolean[];
    isDefaultEnabled: boolean;
}

export interface GetCoreShapesShapePlatformConfigOptionSymmetricMultiThreadingOption {
    allowedValues: boolean[];
    isDefaultEnabled: boolean;
}

export interface GetCoreShapesShapePlatformConfigOptionTrustedPlatformModuleOption {
    allowedValues: boolean[];
    isDefaultEnabled: boolean;
}

export interface GetCoreShapesShapePlatformConfigOptionVirtualInstructionsOption {
    allowedValues: boolean[];
    isDefaultEnabled: boolean;
}

export interface GetCoreShapesShapeRecommendedAlternative {
    shapeName: string;
}

export interface GetCoreSubnetsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCoreSubnetsSubnet {
    availabilityDomain: string;
    cidrBlock: string;
    compartmentId: string;
    definedTags: {[key: string]: string};
    dhcpOptionsId: string;
    displayName: string;
    dnsLabel: string;
    freeformTags: {[key: string]: string};
    id: string;
    ipv6cidrBlock: string;
    ipv6cidrBlocks: string[];
    ipv6virtualRouterIp: string;
    prohibitInternetIngress: boolean;
    prohibitPublicIpOnVnic: boolean;
    routeTableId: string;
    securityListIds: string[];
    state: string;
    subnetDomainName: string;
    timeCreated: string;
    vcnId: string;
    virtualRouterIp: string;
    virtualRouterMac: string;
}

export interface GetCoreTunnelSecurityAssociationsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCoreTunnelSecurityAssociationsTunnelSecurityAssociation {
    cpeSubnet: string;
    oracleSubnet: string;
    time: string;
    tunnelSaErrorInfo: string;
    tunnelSaStatus: string;
}

export interface GetCoreVcnByoipv6cidrDetail {
    byoipv6rangeId: string;
    ipv6cidrBlock: string;
}

export interface GetCoreVcnsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCoreVcnsVirtualNetwork {
    byoipv6cidrBlocks: string[];
    byoipv6cidrDetails: outputs.GetCoreVcnsVirtualNetworkByoipv6cidrDetail[];
    cidrBlock: string;
    cidrBlocks: string[];
    compartmentId: string;
    defaultDhcpOptionsId: string;
    defaultRouteTableId: string;
    defaultSecurityListId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    dnsLabel: string;
    freeformTags: {[key: string]: string};
    id: string;
    ipv6cidrBlocks: string[];
    ipv6privateCidrBlocks: string[];
    isIpv6enabled: boolean;
    isOracleGuaAllocationEnabled: boolean;
    state: string;
    timeCreated: string;
    vcnDomainName: string;
}

export interface GetCoreVcnsVirtualNetworkByoipv6cidrDetail {
    byoipv6rangeId: string;
    ipv6cidrBlock: string;
}

export interface GetCoreVirtualCircuitAssociatedTunnelsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCoreVirtualCircuitAssociatedTunnelsVirtualCircuitAssociatedTunnelDetail {
    ipsecConnectionId: string;
    tunnelId: string;
    tunnelType: string;
}

export interface GetCoreVirtualCircuitBandwidthShapesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCoreVirtualCircuitBandwidthShapesVirtualCircuitBandwidthShape {
    bandwidthInMbps: number;
    name: string;
}

export interface GetCoreVirtualCircuitCrossConnectMapping {
    bgpMd5authKey: string;
    crossConnectOrCrossConnectGroupId: string;
    customerBgpPeeringIp: string;
    customerBgpPeeringIpv6: string;
    oracleBgpPeeringIp: string;
    oracleBgpPeeringIpv6: string;
    vlan: number;
}

export interface GetCoreVirtualCircuitPublicPrefix {
    cidrBlock: string;
}

export interface GetCoreVirtualCircuitPublicPrefixesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCoreVirtualCircuitPublicPrefixesVirtualCircuitPublicPrefix {
    cidrBlock: string;
    verificationState: string;
}

export interface GetCoreVirtualCircuitsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCoreVirtualCircuitsVirtualCircuit {
    bandwidthShapeName: string;
    bgpAdminState: string;
    bgpIpv6sessionState: string;
    bgpManagement: string;
    bgpSessionState: string;
    compartmentId: string;
    crossConnectMappings: outputs.GetCoreVirtualCircuitsVirtualCircuitCrossConnectMapping[];
    customerAsn: string;
    customerBgpAsn: number;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    gatewayId: string;
    id: string;
    ipMtu: string;
    isBfdEnabled: boolean;
    isTransportMode: boolean;
    oracleBgpAsn: number;
    providerServiceId: string;
    providerServiceKeyName: string;
    providerState: string;
    publicPrefixes: outputs.GetCoreVirtualCircuitsVirtualCircuitPublicPrefix[];
    referenceComment: string;
    region: string;
    routingPolicies: string[];
    serviceType: string;
    state: string;
    timeCreated: string;
    type: string;
    virtualCircuitId: string;
}

export interface GetCoreVirtualCircuitsVirtualCircuitCrossConnectMapping {
    bgpMd5authKey: string;
    crossConnectOrCrossConnectGroupId: string;
    customerBgpPeeringIp: string;
    customerBgpPeeringIpv6: string;
    oracleBgpPeeringIp: string;
    oracleBgpPeeringIpv6: string;
    vlan: number;
}

export interface GetCoreVirtualCircuitsVirtualCircuitPublicPrefix {
    cidrBlock: string;
}

export interface GetCoreVirtualNetworksFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCoreVirtualNetworksVirtualNetwork {
    byoipv6cidrBlocks: string[];
    byoipv6cidrDetails: outputs.GetCoreVirtualNetworksVirtualNetworkByoipv6cidrDetail[];
    cidrBlock: string;
    cidrBlocks: string[];
    compartmentId: string;
    defaultDhcpOptionsId: string;
    defaultRouteTableId: string;
    defaultSecurityListId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    dnsLabel: string;
    freeformTags: {[key: string]: string};
    id: string;
    ipv6cidrBlocks: string[];
    ipv6privateCidrBlocks: string[];
    isIpv6enabled: boolean;
    isOracleGuaAllocationEnabled: boolean;
    state: string;
    timeCreated: string;
    vcnDomainName: string;
}

export interface GetCoreVirtualNetworksVirtualNetworkByoipv6cidrDetail {
    byoipv6rangeId: string;
    ipv6cidrBlock: string;
}

export interface GetCoreVlansFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCoreVlansVlan {
    availabilityDomain: string;
    cidrBlock: string;
    compartmentId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    nsgIds: string[];
    routeTableId: string;
    state: string;
    timeCreated: string;
    vcnId: string;
    vlanTag: number;
}

export interface GetCoreVnicAttachmentsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCoreVnicAttachmentsVnicAttachment {
    availabilityDomain: string;
    compartmentId: string;
    createVnicDetails: outputs.GetCoreVnicAttachmentsVnicAttachmentCreateVnicDetail[];
    displayName: string;
    id: string;
    instanceId: string;
    nicIndex: number;
    state: string;
    subnetId: string;
    timeCreated: string;
    vlanId: string;
    vlanTag: number;
    vnicId: string;
}

export interface GetCoreVnicAttachmentsVnicAttachmentCreateVnicDetail {
    assignIpv6ip: boolean;
    assignPrivateDnsRecord: boolean;
    assignPublicIp: string;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    hostnameLabel: string;
    ipv6addressIpv6subnetCidrPairDetails: outputs.GetCoreVnicAttachmentsVnicAttachmentCreateVnicDetailIpv6addressIpv6subnetCidrPairDetail[];
    nsgIds: string[];
    privateIp: string;
    skipSourceDestCheck: boolean;
    subnetId: string;
    vlanId: string;
}

export interface GetCoreVnicAttachmentsVnicAttachmentCreateVnicDetailIpv6addressIpv6subnetCidrPairDetail {
    ipv6Address: string;
    ipv6SubnetCidr: string;
}

export interface GetCoreVolumeAttachmentsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCoreVolumeAttachmentsVolumeAttachment {
    attachmentType: string;
    availabilityDomain: string;
    chapSecret: string;
    chapUsername: string;
    compartmentId: string;
    device: string;
    displayName: string;
    encryptionInTransitType: string;
    id: string;
    instanceId: string;
    ipv4: string;
    iqn: string;
    isAgentAutoIscsiLoginEnabled: boolean;
    isMultipath: boolean;
    isPvEncryptionInTransitEnabled: boolean;
    isReadOnly: boolean;
    isShareable: boolean;
    isVolumeCreatedDuringLaunch: boolean;
    iscsiLoginState: string;
    multipathDevices: outputs.GetCoreVolumeAttachmentsVolumeAttachmentMultipathDevice[];
    port: number;
    state: string;
    timeCreated: string;
    useChap: boolean;
    volumeId: string;
}

export interface GetCoreVolumeAttachmentsVolumeAttachmentMultipathDevice {
    ipv4: string;
    iqn: string;
    port: number;
}

export interface GetCoreVolumeAutotunePolicy {
    autotuneType: string;
    maxVpusPerGb: string;
}

export interface GetCoreVolumeBackupPoliciesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCoreVolumeBackupPoliciesVolumeBackupPolicy {
    compartmentId: string;
    definedTags: {[key: string]: string};
    destinationRegion: string;
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    schedules: outputs.GetCoreVolumeBackupPoliciesVolumeBackupPolicySchedule[];
    timeCreated: string;
}

export interface GetCoreVolumeBackupPoliciesVolumeBackupPolicySchedule {
    backupType: string;
    dayOfMonth: number;
    dayOfWeek: string;
    hourOfDay: number;
    month: string;
    offsetSeconds: number;
    offsetType: string;
    period: string;
    retentionSeconds: number;
    timeZone: string;
}

export interface GetCoreVolumeBackupPolicyAssignmentsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCoreVolumeBackupPolicyAssignmentsVolumeBackupPolicyAssignment {
    assetId: string;
    id: string;
    policyId: string;
    timeCreated: string;
}

export interface GetCoreVolumeBackupsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCoreVolumeBackupsVolumeBackup {
    compartmentId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    expirationTime: string;
    freeformTags: {[key: string]: string};
    id: string;
    kmsKeyId: string;
    sizeInGbs: string;
    sizeInMbs: string;
    sourceDetails: outputs.GetCoreVolumeBackupsVolumeBackupSourceDetail[];
    sourceType: string;
    sourceVolumeBackupId: string;
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeRequestReceived: string;
    type: string;
    uniqueSizeInGbs: string;
    uniqueSizeInMbs: string;
    volumeId: string;
}

export interface GetCoreVolumeBackupsVolumeBackupSourceDetail {
    kmsKeyId: string;
    region: string;
    volumeBackupId: string;
}

export interface GetCoreVolumeBlockVolumeReplica {
    availabilityDomain: string;
    blockVolumeReplicaId: string;
    displayName: string;
}

export interface GetCoreVolumeGroupBackupsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCoreVolumeGroupBackupsVolumeGroupBackup {
    compartmentId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    expirationTime: string;
    freeformTags: {[key: string]: string};
    id: string;
    sizeInGbs: string;
    sizeInMbs: string;
    sourceDetails: outputs.GetCoreVolumeGroupBackupsVolumeGroupBackupSourceDetail[];
    sourceType: string;
    sourceVolumeGroupBackupId: string;
    state: string;
    timeCreated: string;
    timeRequestReceived: string;
    type: string;
    uniqueSizeInGbs: string;
    uniqueSizeInMbs: string;
    volumeBackupIds: string[];
    volumeGroupId: string;
}

export interface GetCoreVolumeGroupBackupsVolumeGroupBackupSourceDetail {
    kmsKeyId: string;
    region: string;
    volumeGroupBackupId: string;
}

export interface GetCoreVolumeGroupReplicaMemberReplica {
    membershipState: string;
    volumeReplicaId: string;
}

export interface GetCoreVolumeGroupReplicasFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCoreVolumeGroupReplicasVolumeGroupReplica {
    availabilityDomain: string;
    compartmentId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    memberReplicas: outputs.GetCoreVolumeGroupReplicasVolumeGroupReplicaMemberReplica[];
    sizeInGbs: string;
    state: string;
    timeCreated: string;
    timeLastSynced: string;
    volumeGroupId: string;
}

export interface GetCoreVolumeGroupReplicasVolumeGroupReplicaMemberReplica {
    membershipState: string;
    volumeReplicaId: string;
}

export interface GetCoreVolumeGroupsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCoreVolumeGroupsVolumeGroup {
    availabilityDomain: string;
    backupPolicyId: string;
    clusterPlacementGroupId: string;
    compartmentId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    isHydrated: boolean;
    preserveVolumeReplica: boolean;
    sizeInGbs: string;
    sizeInMbs: string;
    sourceDetails: outputs.GetCoreVolumeGroupsVolumeGroupSourceDetail[];
    state: string;
    timeCreated: string;
    volumeGroupReplicas: outputs.GetCoreVolumeGroupsVolumeGroupVolumeGroupReplica[];
    volumeGroupReplicasDeletion: boolean;
    volumeIds: string[];
}

export interface GetCoreVolumeGroupsVolumeGroupSourceDetail {
    type: string;
    volumeGroupBackupId: string;
    volumeGroupId: string;
    volumeGroupReplicaId: string;
    volumeIds: string[];
}

export interface GetCoreVolumeGroupsVolumeGroupVolumeGroupReplica {
    availabilityDomain: string;
    displayName: string;
    volumeGroupReplicaId: string;
}

export interface GetCoreVolumeSourceDetail {
    id: string;
    type: string;
}

export interface GetCoreVolumesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCoreVolumesVolume {
    autoTunedVpusPerGb: string;
    autotunePolicies: outputs.GetCoreVolumesVolumeAutotunePolicy[];
    availabilityDomain: string;
    backupPolicyId: string;
    blockVolumeReplicas: outputs.GetCoreVolumesVolumeBlockVolumeReplica[];
    blockVolumeReplicasDeletion: boolean;
    clusterPlacementGroupId: string;
    compartmentId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    isAutoTuneEnabled: boolean;
    isHydrated: boolean;
    kmsKeyId: string;
    sizeInGbs: string;
    sizeInMbs: string;
    sourceDetails: outputs.GetCoreVolumesVolumeSourceDetail[];
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    volumeBackupId: string;
    volumeGroupId: string;
    vpusPerGb: string;
}

export interface GetCoreVolumesVolumeAutotunePolicy {
    autotuneType: string;
    maxVpusPerGb: string;
}

export interface GetCoreVolumesVolumeBlockVolumeReplica {
    availabilityDomain: string;
    blockVolumeReplicaId: string;
    displayName: string;
}

export interface GetCoreVolumesVolumeSourceDetail {
    id: string;
    type: string;
}

export interface GetCoreVtapsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCoreVtapsVtap {
    captureFilterId: string;
    compartmentId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    encapsulationProtocol: string;
    freeformTags: {[key: string]: string};
    id: string;
    isVtapEnabled: boolean;
    lifecycleStateDetails: string;
    maxPacketSize: number;
    sourceId: string;
    sourcePrivateEndpointIp: string;
    sourcePrivateEndpointSubnetId: string;
    sourceType: string;
    state: string;
    targetId: string;
    targetIp: string;
    targetType: string;
    timeCreated: string;
    trafficMode: string;
    vcnId: string;
    vxlanNetworkIdentifier: string;
}

export interface GetDataLabelingServiceAnnotationFormatItem {
    name: string;
}

export interface GetDataLabelingServiceAnnotationFormatsAnnotationFormatCollection {
    items: outputs.GetDataLabelingServiceAnnotationFormatsAnnotationFormatCollectionItem[];
}

export interface GetDataLabelingServiceAnnotationFormatsAnnotationFormatCollectionItem {
    name: string;
}

export interface GetDataLabelingServiceAnnotationFormatsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDataLabelingServiceDatasetDatasetFormatDetail {
    formatType: string;
    textFileTypeMetadatas: outputs.GetDataLabelingServiceDatasetDatasetFormatDetailTextFileTypeMetadata[];
}

export interface GetDataLabelingServiceDatasetDatasetFormatDetailTextFileTypeMetadata {
    columnDelimiter: string;
    columnIndex: number;
    columnName: string;
    escapeCharacter: string;
    formatType: string;
    lineDelimiter: string;
}

export interface GetDataLabelingServiceDatasetDatasetSourceDetail {
    bucket: string;
    namespace: string;
    prefix: string;
    sourceType: string;
}

export interface GetDataLabelingServiceDatasetInitialImportDatasetConfiguration {
    importFormats: outputs.GetDataLabelingServiceDatasetInitialImportDatasetConfigurationImportFormat[];
    importMetadataPaths: outputs.GetDataLabelingServiceDatasetInitialImportDatasetConfigurationImportMetadataPath[];
}

export interface GetDataLabelingServiceDatasetInitialImportDatasetConfigurationImportFormat {
    name: string;
    version: string;
}

export interface GetDataLabelingServiceDatasetInitialImportDatasetConfigurationImportMetadataPath {
    bucket: string;
    namespace: string;
    path: string;
    sourceType: string;
}

export interface GetDataLabelingServiceDatasetInitialRecordGenerationConfiguration {
}

export interface GetDataLabelingServiceDatasetLabelSet {
    items: outputs.GetDataLabelingServiceDatasetLabelSetItem[];
}

export interface GetDataLabelingServiceDatasetLabelSetItem {
    name: string;
}

export interface GetDataLabelingServiceDatasetsDatasetCollection {
    items: outputs.GetDataLabelingServiceDatasetsDatasetCollectionItem[];
}

export interface GetDataLabelingServiceDatasetsDatasetCollectionItem {
    additionalProperties: {[key: string]: string};
    annotationFormat: string;
    compartmentId: string;
    datasetFormatDetails: outputs.GetDataLabelingServiceDatasetsDatasetCollectionItemDatasetFormatDetail[];
    datasetSourceDetails: outputs.GetDataLabelingServiceDatasetsDatasetCollectionItemDatasetSourceDetail[];
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    initialImportDatasetConfigurations: outputs.GetDataLabelingServiceDatasetsDatasetCollectionItemInitialImportDatasetConfiguration[];
    initialRecordGenerationConfigurations: outputs.GetDataLabelingServiceDatasetsDatasetCollectionItemInitialRecordGenerationConfiguration[];
    labelSets: outputs.GetDataLabelingServiceDatasetsDatasetCollectionItemLabelSet[];
    labelingInstructions: string;
    lifecycleDetails: string;
    lifecycleSubstate: string;
    state: string;
    timeCreated: string;
    timeUpdated: string;
}

export interface GetDataLabelingServiceDatasetsDatasetCollectionItemDatasetFormatDetail {
    formatType: string;
    textFileTypeMetadatas: outputs.GetDataLabelingServiceDatasetsDatasetCollectionItemDatasetFormatDetailTextFileTypeMetadata[];
}

export interface GetDataLabelingServiceDatasetsDatasetCollectionItemDatasetFormatDetailTextFileTypeMetadata {
    columnDelimiter: string;
    columnIndex: number;
    columnName: string;
    escapeCharacter: string;
    formatType: string;
    lineDelimiter: string;
}

export interface GetDataLabelingServiceDatasetsDatasetCollectionItemDatasetSourceDetail {
    bucket: string;
    namespace: string;
    prefix: string;
    sourceType: string;
}

export interface GetDataLabelingServiceDatasetsDatasetCollectionItemInitialImportDatasetConfiguration {
    importFormats: outputs.GetDataLabelingServiceDatasetsDatasetCollectionItemInitialImportDatasetConfigurationImportFormat[];
    importMetadataPaths: outputs.GetDataLabelingServiceDatasetsDatasetCollectionItemInitialImportDatasetConfigurationImportMetadataPath[];
}

export interface GetDataLabelingServiceDatasetsDatasetCollectionItemInitialImportDatasetConfigurationImportFormat {
    name: string;
    version: string;
}

export interface GetDataLabelingServiceDatasetsDatasetCollectionItemInitialImportDatasetConfigurationImportMetadataPath {
    bucket: string;
    namespace: string;
    path: string;
    sourceType: string;
}

export interface GetDataLabelingServiceDatasetsDatasetCollectionItemInitialRecordGenerationConfiguration {
}

export interface GetDataLabelingServiceDatasetsDatasetCollectionItemLabelSet {
    items: outputs.GetDataLabelingServiceDatasetsDatasetCollectionItemLabelSetItem[];
}

export interface GetDataLabelingServiceDatasetsDatasetCollectionItemLabelSetItem {
    name: string;
}

export interface GetDataLabelingServiceDatasetsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDataSafeAlertAnalyticItem {
    count: string;
    dimensions: outputs.GetDataSafeAlertAnalyticItemDimension[];
    metricName: string;
    timeEnded: string;
    timeStarted: string;
}

export interface GetDataSafeAlertAnalyticItemDimension {
    groupBy: {[key: string]: string};
}

export interface GetDataSafeAlertPoliciesAlertPolicyCollection {
    items: outputs.GetDataSafeAlertPoliciesAlertPolicyCollectionItem[];
}

export interface GetDataSafeAlertPoliciesAlertPolicyCollectionItem {
    alertPolicyRuleDetails: outputs.GetDataSafeAlertPoliciesAlertPolicyCollectionItemAlertPolicyRuleDetail[];
    alertPolicyType: string;
    compartmentId: string;
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    isUserDefined: boolean;
    lifecycleDetails: string;
    severity: string;
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
}

export interface GetDataSafeAlertPoliciesAlertPolicyCollectionItemAlertPolicyRuleDetail {
    description: string;
    displayName: string;
    expression: string;
}

export interface GetDataSafeAlertPoliciesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDataSafeAlertPolicyAlertPolicyRuleDetail {
    description: string;
    displayName: string;
    expression: string;
}

export interface GetDataSafeAlertPolicyRulesAlertPolicyRuleCollection {
    items: outputs.GetDataSafeAlertPolicyRulesAlertPolicyRuleCollectionItem[];
}

export interface GetDataSafeAlertPolicyRulesAlertPolicyRuleCollectionItem {
    alertPolicyId: string;
    description: string;
    displayName: string;
    expression: string;
    key: string;
    state: string;
    timeCreated: string;
}

export interface GetDataSafeAlertPolicyRulesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDataSafeAlertsAlertCollection {
    items: outputs.GetDataSafeAlertsAlertCollectionItem[];
}

export interface GetDataSafeAlertsAlertCollectionItem {
    alertId: string;
    alertPolicyRuleKey: string;
    alertPolicyRuleName: string;
    alertType: string;
    comment: string;
    compartmentId: string;
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    featureDetails: {[key: string]: string};
    freeformTags: {[key: string]: string};
    id: string;
    operation: string;
    operationStatus: string;
    operationTime: string;
    policyId: string;
    resourceName: string;
    severity: string;
    state: string;
    status: string;
    systemTags: {[key: string]: string};
    targetIds: string[];
    targetNames: string[];
    timeCreated: string;
    timeUpdated: string;
}

export interface GetDataSafeAlertsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDataSafeAuditArchiveRetrievalsAuditArchiveRetrievalCollection {
    items: outputs.GetDataSafeAuditArchiveRetrievalsAuditArchiveRetrievalCollectionItem[];
}

export interface GetDataSafeAuditArchiveRetrievalsAuditArchiveRetrievalCollectionItem {
    auditEventCount: string;
    compartmentId: string;
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    endDate: string;
    errorInfo: string;
    freeformTags: {[key: string]: string};
    id: string;
    lifecycleDetails: string;
    startDate: string;
    state: string;
    systemTags: {[key: string]: string};
    targetId: string;
    timeCompleted: string;
    timeOfExpiry: string;
    timeRequested: string;
}

export interface GetDataSafeAuditArchiveRetrievalsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDataSafeAuditEventAnalyticItem {
    count: string;
    dimensions: outputs.GetDataSafeAuditEventAnalyticItemDimension[];
    displayName: string;
    metricName: string;
    timeEnded: string;
    timeStarted: string;
}

export interface GetDataSafeAuditEventAnalyticItemDimension {
    auditEventTimes: string[];
    auditTypes: string[];
    clientHostnames: string[];
    clientIds: string[];
    clientPrograms: string[];
    dbUserNames: string[];
    eventNames: string[];
    objectTypes: string[];
    targetClasses: string[];
    targetIds: string[];
    targetNames: string[];
}

export interface GetDataSafeAuditEventItem {
    actionTaken: string;
    auditEventTime: string;
    auditLocation: string;
    auditPolicies: string;
    auditTrailId: string;
    auditType: string;
    clientHostname: string;
    clientId: string;
    clientIp: string;
    clientProgram: string;
    commandParam: string;
    commandText: string;
    compartmentId: string;
    databaseType: string;
    dbUserName: string;
    definedTags: {[key: string]: string};
    errorCode: string;
    errorMessage: string;
    eventName: string;
    extendedEventAttributes: string;
    freeformTags: {[key: string]: string};
    id: string;
    isAlerted: boolean;
    object: string;
    objectOwner: string;
    objectType: string;
    operation: string;
    operationStatus: string;
    osTerminal: string;
    osUserName: string;
    targetClass: string;
    targetId: string;
    targetName: string;
    timeCollected: string;
}

export interface GetDataSafeAuditEventsAuditEventCollection {
    items: outputs.GetDataSafeAuditEventsAuditEventCollectionItem[];
}

export interface GetDataSafeAuditEventsAuditEventCollectionItem {
    actionTaken: string;
    applicationContexts: string;
    auditEventTime: string;
    auditLocation: string;
    auditPolicies: string;
    auditTrailId: string;
    auditType: string;
    clientHostname: string;
    clientId: string;
    clientIp: string;
    clientProgram: string;
    commandParam: string;
    commandText: string;
    compartmentId: string;
    databaseType: string;
    databaseUniqueName: string;
    dbUserName: string;
    definedTags: {[key: string]: string};
    errorCode: string;
    errorMessage: string;
    eventName: string;
    extendedEventAttributes: string;
    fgaPolicyName: string;
    freeformTags: {[key: string]: string};
    id: string;
    isAlerted: boolean;
    object: string;
    objectOwner: string;
    objectType: string;
    operation: string;
    operationStatus: string;
    osTerminal: string;
    osUserName: string;
    peerTargetDatabaseKey: number;
    targetClass: string;
    targetId: string;
    targetName: string;
    timeCollected: string;
    trailSource: string;
}

export interface GetDataSafeAuditEventsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDataSafeAuditPoliciesAuditPolicyCollection {
    items: outputs.GetDataSafeAuditPoliciesAuditPolicyCollectionItem[];
}

export interface GetDataSafeAuditPoliciesAuditPolicyCollectionItem {
    auditConditions: outputs.GetDataSafeAuditPoliciesAuditPolicyCollectionItemAuditCondition[];
    auditPolicyId: string;
    auditSpecifications: outputs.GetDataSafeAuditPoliciesAuditPolicyCollectionItemAuditSpecification[];
    compartmentId: string;
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    isDataSafeServiceAccountExcluded: boolean;
    lifecycleDetails: string;
    provisionTrigger: number;
    retrieveFromTargetTrigger: number;
    state: string;
    systemTags: {[key: string]: string};
    targetId: string;
    timeCreated: string;
    timeLastProvisioned: string;
    timeLastRetrieved: string;
    timeUpdated: string;
}

export interface GetDataSafeAuditPoliciesAuditPolicyCollectionItemAuditCondition {
    auditPolicyName: string;
    enableConditions: outputs.GetDataSafeAuditPoliciesAuditPolicyCollectionItemAuditConditionEnableCondition[];
    isDataSafeServiceAccountAudited: boolean;
    isPrivUsersManagedByDataSafe: boolean;
}

export interface GetDataSafeAuditPoliciesAuditPolicyCollectionItemAuditConditionEnableCondition {
    entityNames: string[];
    entitySelection: string;
    entityType: string;
    operationStatus: string;
}

export interface GetDataSafeAuditPoliciesAuditPolicyCollectionItemAuditSpecification {
    auditPolicyCategory: string;
    auditPolicyName: string;
    databasePolicyNames: string[];
    enableStatus: string;
    enabledEntities: string;
    isCreated: boolean;
    isEnabledForAllUsers: boolean;
    isSeededInDataSafe: boolean;
    isSeededInTarget: boolean;
    isViewOnly: boolean;
    partiallyEnabledMsg: string;
}

export interface GetDataSafeAuditPoliciesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDataSafeAuditPolicyAuditCondition {
    auditPolicyName: string;
    enableConditions: outputs.GetDataSafeAuditPolicyAuditConditionEnableCondition[];
    isDataSafeServiceAccountAudited: boolean;
    isPrivUsersManagedByDataSafe: boolean;
}

export interface GetDataSafeAuditPolicyAuditConditionEnableCondition {
    entityNames: string[];
    entitySelection: string;
    entityType: string;
    operationStatus: string;
}

export interface GetDataSafeAuditPolicyAuditSpecification {
    auditPolicyCategory: string;
    auditPolicyName: string;
    databasePolicyNames: string[];
    enableStatus: string;
    enabledEntities: string;
    isCreated: boolean;
    isEnabledForAllUsers: boolean;
    isSeededInDataSafe: boolean;
    isSeededInTarget: boolean;
    isViewOnly: boolean;
    partiallyEnabledMsg: string;
}

export interface GetDataSafeAuditProfileAnalyticItem {
    count: string;
    dimensions: outputs.GetDataSafeAuditProfileAnalyticItemDimension[];
}

export interface GetDataSafeAuditProfileAnalyticItemDimension {
    isPaidUsageEnabled: boolean;
}

export interface GetDataSafeAuditProfileAuditTrail {
    auditCollectionStartTime: string;
    auditProfileId: string;
    compartmentId: string;
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    isAutoPurgeEnabled: boolean;
    lifecycleDetails: string;
    peerTargetDatabaseKey: number;
    purgeJobDetails: string;
    purgeJobStatus: string;
    purgeJobTime: string;
    state: string;
    status: string;
    systemTags: {[key: string]: string};
    targetId: string;
    timeCreated: string;
    timeLastCollected: string;
    timeUpdated: string;
    trailLocation: string;
    trailSource: string;
    workRequestId: string;
}

export interface GetDataSafeAuditProfileAvailableAuditVolumeItem {
    auditProfileId: string;
    monthInConsideration: string;
    trailLocation: string;
    volume: string;
}

export interface GetDataSafeAuditProfileAvailableAuditVolumesAvailableAuditVolumeCollection {
    items: outputs.GetDataSafeAuditProfileAvailableAuditVolumesAvailableAuditVolumeCollectionItem[];
}

export interface GetDataSafeAuditProfileAvailableAuditVolumesAvailableAuditVolumeCollectionItem {
    items: outputs.GetDataSafeAuditProfileAvailableAuditVolumesAvailableAuditVolumeCollectionItemItem[];
}

export interface GetDataSafeAuditProfileAvailableAuditVolumesAvailableAuditVolumeCollectionItemItem {
    auditProfileId: string;
    auditTrailId: string;
    databaseUniqueName: string;
    monthInConsideration: string;
    trailLocation: string;
    volume: string;
}

export interface GetDataSafeAuditProfileAvailableAuditVolumesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDataSafeAuditProfileCollectedAuditVolumeItem {
    archivedVolume: string;
    auditProfileId: string;
    monthInConsideration: string;
    onlineVolume: string;
}

export interface GetDataSafeAuditProfileCollectedAuditVolumesCollectedAuditVolumeCollection {
    items: outputs.GetDataSafeAuditProfileCollectedAuditVolumesCollectedAuditVolumeCollectionItem[];
}

export interface GetDataSafeAuditProfileCollectedAuditVolumesCollectedAuditVolumeCollectionItem {
    items: outputs.GetDataSafeAuditProfileCollectedAuditVolumesCollectedAuditVolumeCollectionItemItem[];
}

export interface GetDataSafeAuditProfileCollectedAuditVolumesCollectedAuditVolumeCollectionItemItem {
    archivedVolume: string;
    auditProfileId: string;
    monthInConsideration: string;
    onlineVolume: string;
}

export interface GetDataSafeAuditProfileCollectedAuditVolumesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDataSafeAuditProfilesAuditProfileCollection {
    items: outputs.GetDataSafeAuditProfilesAuditProfileCollectionItem[];
}

export interface GetDataSafeAuditProfilesAuditProfileCollectionItem {
    auditCollectedVolume: string;
    auditProfileId: string;
    auditTrails: outputs.GetDataSafeAuditProfilesAuditProfileCollectionItemAuditTrail[];
    changeRetentionTrigger: number;
    compartmentId: string;
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    isOverrideGlobalRetentionSetting: boolean;
    isPaidUsageEnabled: boolean;
    lifecycleDetails: string;
    offlineMonths: number;
    onlineMonths: number;
    state: string;
    systemTags: {[key: string]: string};
    targetId: string;
    timeCreated: string;
    timeUpdated: string;
}

export interface GetDataSafeAuditProfilesAuditProfileCollectionItemAuditTrail {
    auditCollectionStartTime: string;
    auditProfileId: string;
    compartmentId: string;
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    isAutoPurgeEnabled: boolean;
    lifecycleDetails: string;
    peerTargetDatabaseKey: number;
    purgeJobDetails: string;
    purgeJobStatus: string;
    purgeJobTime: string;
    state: string;
    status: string;
    systemTags: {[key: string]: string};
    targetId: string;
    timeCreated: string;
    timeLastCollected: string;
    timeUpdated: string;
    trailLocation: string;
    trailSource: string;
    workRequestId: string;
}

export interface GetDataSafeAuditProfilesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDataSafeAuditTrailAnalyticItem {
    count: string;
    dimensions: outputs.GetDataSafeAuditTrailAnalyticItemDimension[];
}

export interface GetDataSafeAuditTrailAnalyticItemDimension {
    location: string;
    state: string;
    status: string;
    targetId: string;
}

export interface GetDataSafeAuditTrailsAuditTrailCollection {
    items: outputs.GetDataSafeAuditTrailsAuditTrailCollectionItem[];
}

export interface GetDataSafeAuditTrailsAuditTrailCollectionItem {
    auditCollectionStartTime: string;
    auditProfileId: string;
    auditTrailId: string;
    compartmentId: string;
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    isAutoPurgeEnabled: boolean;
    lifecycleDetails: string;
    peerTargetDatabaseKey: number;
    purgeJobDetails: string;
    purgeJobStatus: string;
    purgeJobTime: string;
    resumeTrigger: number;
    state: string;
    status: string;
    systemTags: {[key: string]: string};
    targetId: string;
    timeCreated: string;
    timeLastCollected: string;
    timeUpdated: string;
    trailLocation: string;
    trailSource: string;
    workRequestId: string;
}

export interface GetDataSafeAuditTrailsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDataSafeCompatibleFormatsForDataTypeFormatsForDataType {
    dataType: string;
    maskingFormats: outputs.GetDataSafeCompatibleFormatsForDataTypeFormatsForDataTypeMaskingFormat[];
}

export interface GetDataSafeCompatibleFormatsForDataTypeFormatsForDataTypeMaskingFormat {
    description: string;
    id: string;
    name: string;
}

export interface GetDataSafeCompatibleFormatsForSensitiveTypeFormatsForSensitiveType {
    maskingFormats: outputs.GetDataSafeCompatibleFormatsForSensitiveTypeFormatsForSensitiveTypeMaskingFormat[];
    sensitiveTypeId: string;
}

export interface GetDataSafeCompatibleFormatsForSensitiveTypeFormatsForSensitiveTypeMaskingFormat {
    description: string;
    id: string;
    name: string;
}

export interface GetDataSafeDataSafeConfigurationGlobalSetting {
    isPaidUsage: boolean;
    offlineRetentionPeriod: number;
    onlineRetentionPeriod: number;
}

export interface GetDataSafeDataSafePrivateEndpointsDataSafePrivateEndpoint {
    compartmentId: string;
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    endpointFqdn: string;
    freeformTags: {[key: string]: string};
    id: string;
    nsgIds: string[];
    privateEndpointId: string;
    privateEndpointIp: string;
    state: string;
    subnetId: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    vcnId: string;
}

export interface GetDataSafeDataSafePrivateEndpointsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDataSafeDiscoveryAnalyticItem {
    count: string;
    dimensions: outputs.GetDataSafeDiscoveryAnalyticItemDimension[];
    metricName: string;
}

export interface GetDataSafeDiscoveryAnalyticItemDimension {
    sensitiveDataModelId: string;
    targetId: string;
}

export interface GetDataSafeDiscoveryAnalyticsDiscoveryAnalyticsCollection {
    items: outputs.GetDataSafeDiscoveryAnalyticsDiscoveryAnalyticsCollectionItem[];
}

export interface GetDataSafeDiscoveryAnalyticsDiscoveryAnalyticsCollectionItem {
    count: string;
    dimensions: outputs.GetDataSafeDiscoveryAnalyticsDiscoveryAnalyticsCollectionItemDimension[];
    metricName: string;
}

export interface GetDataSafeDiscoveryAnalyticsDiscoveryAnalyticsCollectionItemDimension {
    sensitiveDataModelId: string;
    sensitiveTypeId: string;
    targetId: string;
}

export interface GetDataSafeDiscoveryAnalyticsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDataSafeDiscoveryJobTablesForDiscovery {
    schemaName: string;
    tableNames: string[];
}

export interface GetDataSafeDiscoveryJobsDiscoveryJobCollection {
    items: outputs.GetDataSafeDiscoveryJobsDiscoveryJobCollectionItem[];
}

export interface GetDataSafeDiscoveryJobsDiscoveryJobCollectionItem {
    compartmentId: string;
    definedTags: {[key: string]: string};
    discoveryType: string;
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    isAppDefinedRelationDiscoveryEnabled: boolean;
    isIncludeAllSchemas: boolean;
    isIncludeAllSensitiveTypes: boolean;
    isSampleDataCollectionEnabled: boolean;
    schemasForDiscoveries: string[];
    sensitiveDataModelId: string;
    sensitiveTypeIdsForDiscoveries: string[];
    state: string;
    systemTags: {[key: string]: string};
    tablesForDiscoveries: outputs.GetDataSafeDiscoveryJobsDiscoveryJobCollectionItemTablesForDiscovery[];
    targetId: string;
    timeFinished: string;
    timeStarted: string;
    totalColumnsScanned: string;
    totalDeletedSensitiveColumns: string;
    totalModifiedSensitiveColumns: string;
    totalNewSensitiveColumns: string;
    totalObjectsScanned: string;
    totalSchemasScanned: string;
}

export interface GetDataSafeDiscoveryJobsDiscoveryJobCollectionItemTablesForDiscovery {
    schemaName: string;
    tableNames: string[];
}

export interface GetDataSafeDiscoveryJobsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDataSafeDiscoveryJobsResultModifiedAttribute {
    appDefinedChildColumnKeys: string[];
    dbDefinedChildColumnKeys: string[];
}

export interface GetDataSafeDiscoveryJobsResultsDiscoveryJobResultCollection {
    items: outputs.GetDataSafeDiscoveryJobsResultsDiscoveryJobResultCollectionItem[];
}

export interface GetDataSafeDiscoveryJobsResultsDiscoveryJobResultCollectionItem {
    appDefinedChildColumnKeys: string[];
    appName: string;
    columnName: string;
    dataType: string;
    dbDefinedChildColumnKeys: string[];
    discoveryJobId: string;
    discoveryType: string;
    estimatedDataValueCount: string;
    isResultApplied: boolean;
    key: string;
    modifiedAttributes: outputs.GetDataSafeDiscoveryJobsResultsDiscoveryJobResultCollectionItemModifiedAttribute[];
    object: string;
    objectType: string;
    parentColumnKeys: string[];
    plannedAction: string;
    relationType: string;
    sampleDataValues: string[];
    schemaName: string;
    sensitiveColumnkey: string;
    sensitiveTypeId: string;
}

export interface GetDataSafeDiscoveryJobsResultsDiscoveryJobResultCollectionItemModifiedAttribute {
    appDefinedChildColumnKeys: string[];
    dbDefinedChildColumnKeys: string[];
}

export interface GetDataSafeDiscoveryJobsResultsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDataSafeLibraryMaskingFormatFormatEntry {
    columnName: string;
    description: string;
    endDate: string;
    endLength: number;
    endValue: number;
    fixedNumber: number;
    fixedString: string;
    groupingColumns: string[];
    length: number;
    libraryMaskingFormatId: string;
    pattern: string;
    postProcessingFunction: string;
    randomLists: string[];
    regularExpression: string;
    replaceWith: string;
    schemaName: string;
    sqlExpression: string;
    startDate: string;
    startLength: number;
    startPosition: number;
    startValue: number;
    tableName: string;
    type: string;
    userDefinedFunction: string;
}

export interface GetDataSafeLibraryMaskingFormatsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDataSafeLibraryMaskingFormatsLibraryMaskingFormatCollection {
    items: outputs.GetDataSafeLibraryMaskingFormatsLibraryMaskingFormatCollectionItem[];
}

export interface GetDataSafeLibraryMaskingFormatsLibraryMaskingFormatCollectionItem {
    compartmentId: string;
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    formatEntries: outputs.GetDataSafeLibraryMaskingFormatsLibraryMaskingFormatCollectionItemFormatEntry[];
    freeformTags: {[key: string]: string};
    id: string;
    sensitiveTypeIds: string[];
    source: string;
    state: string;
    timeCreated: string;
    timeUpdated: string;
}

export interface GetDataSafeLibraryMaskingFormatsLibraryMaskingFormatCollectionItemFormatEntry {
    columnName: string;
    description: string;
    endDate: string;
    endLength: number;
    endValue: number;
    fixedNumber: number;
    fixedString: string;
    groupingColumns: string[];
    length: number;
    libraryMaskingFormatId: string;
    pattern: string;
    postProcessingFunction: string;
    randomLists: string[];
    regularExpression: string;
    replaceWith: string;
    schemaName: string;
    sqlExpression: string;
    startDate: string;
    startLength: number;
    startPosition: number;
    startValue: number;
    tableName: string;
    type: string;
    userDefinedFunction: string;
}

export interface GetDataSafeListUserGrantsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDataSafeListUserGrantsGrant {
    depthLevel: number;
    grantName: string;
    key: string;
    privilegeCategory: string;
    privilegeType: string;
}

export interface GetDataSafeMaskingAnalyticItem {
    count: string;
    dimensions: outputs.GetDataSafeMaskingAnalyticItemDimension[];
    metricName: string;
}

export interface GetDataSafeMaskingAnalyticItemDimension {
    policyId: string;
    targetId: string;
}

export interface GetDataSafeMaskingAnalyticsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDataSafeMaskingAnalyticsMaskingAnalyticsCollection {
    items: outputs.GetDataSafeMaskingAnalyticsMaskingAnalyticsCollectionItem[];
}

export interface GetDataSafeMaskingAnalyticsMaskingAnalyticsCollectionItem {
    count: string;
    dimensions: outputs.GetDataSafeMaskingAnalyticsMaskingAnalyticsCollectionItemDimension[];
    metricName: string;
}

export interface GetDataSafeMaskingAnalyticsMaskingAnalyticsCollectionItemDimension {
    policyId: string;
    targetId: string;
}

export interface GetDataSafeMaskingPoliciesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDataSafeMaskingPoliciesMaskingColumnMaskingFormat {
    condition: string;
    description: string;
    formatEntries: outputs.GetDataSafeMaskingPoliciesMaskingColumnMaskingFormatFormatEntry[];
}

export interface GetDataSafeMaskingPoliciesMaskingColumnMaskingFormatFormatEntry {
    columnName: string;
    description: string;
    endDate: string;
    endLength: number;
    endValue: number;
    fixedNumber: number;
    fixedString: string;
    groupingColumns: string[];
    length: number;
    libraryMaskingFormatId: string;
    pattern: string;
    postProcessingFunction: string;
    randomLists: string[];
    regularExpression: string;
    replaceWith: string;
    schemaName: string;
    sqlExpression: string;
    startDate: string;
    startLength: number;
    startPosition: number;
    startValue: number;
    tableName: string;
    type: string;
    userDefinedFunction: string;
}

export interface GetDataSafeMaskingPoliciesMaskingColumnsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDataSafeMaskingPoliciesMaskingColumnsMaskingColumnCollection {
    items: outputs.GetDataSafeMaskingPoliciesMaskingColumnsMaskingColumnCollectionItem[];
}

export interface GetDataSafeMaskingPoliciesMaskingColumnsMaskingColumnCollectionItem {
    childColumns: string[];
    columnName: string;
    dataType: string;
    isMaskingEnabled: boolean;
    key: string;
    lifecycleDetails: string;
    maskingColumnGroup: string;
    maskingFormats: outputs.GetDataSafeMaskingPoliciesMaskingColumnsMaskingColumnCollectionItemMaskingFormat[];
    maskingPolicyId: string;
    object: string;
    objectType: string;
    schemaName: string;
    sensitiveTypeId: string;
    state: string;
    timeCreated: string;
    timeUpdated: string;
}

export interface GetDataSafeMaskingPoliciesMaskingColumnsMaskingColumnCollectionItemMaskingFormat {
    condition: string;
    description: string;
    formatEntries: outputs.GetDataSafeMaskingPoliciesMaskingColumnsMaskingColumnCollectionItemMaskingFormatFormatEntry[];
}

export interface GetDataSafeMaskingPoliciesMaskingColumnsMaskingColumnCollectionItemMaskingFormatFormatEntry {
    columnName: string;
    description: string;
    endDate: string;
    endLength: number;
    endValue: number;
    fixedNumber: number;
    fixedString: string;
    groupingColumns: string[];
    length: number;
    libraryMaskingFormatId: string;
    pattern: string;
    postProcessingFunction: string;
    randomLists: string[];
    regularExpression: string;
    replaceWith: string;
    schemaName: string;
    sqlExpression: string;
    startDate: string;
    startLength: number;
    startPosition: number;
    startValue: number;
    tableName: string;
    type: string;
    userDefinedFunction: string;
}

export interface GetDataSafeMaskingPoliciesMaskingPolicyCollection {
    items: outputs.GetDataSafeMaskingPoliciesMaskingPolicyCollectionItem[];
}

export interface GetDataSafeMaskingPoliciesMaskingPolicyCollectionItem {
    addMaskingColumnsFromSdmTrigger: number;
    columnSources: outputs.GetDataSafeMaskingPoliciesMaskingPolicyCollectionItemColumnSource[];
    compartmentId: string;
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    freeformTags: {[key: string]: string};
    generateHealthReportTrigger: number;
    id: string;
    isDropTempTablesEnabled: boolean;
    isRedoLoggingEnabled: boolean;
    isRefreshStatsEnabled: boolean;
    parallelDegree: string;
    postMaskingScript: string;
    preMaskingScript: string;
    recompile: string;
    state: string;
    timeCreated: string;
    timeUpdated: string;
}

export interface GetDataSafeMaskingPoliciesMaskingPolicyCollectionItemColumnSource {
    columnSource: string;
    sensitiveDataModelId: string;
    targetId: string;
}

export interface GetDataSafeMaskingPolicyColumnSource {
    columnSource: string;
    sensitiveDataModelId: string;
    targetId: string;
}

export interface GetDataSafeMaskingPolicyHealthReportLogsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDataSafeMaskingPolicyHealthReportLogsMaskingPolicyHealthReportLogCollection {
    items: outputs.GetDataSafeMaskingPolicyHealthReportLogsMaskingPolicyHealthReportLogCollectionItem[];
}

export interface GetDataSafeMaskingPolicyHealthReportLogsMaskingPolicyHealthReportLogCollectionItem {
    description: string;
    message: string;
    messageType: string;
    remediation: string;
    timestamp: string;
}

export interface GetDataSafeMaskingPolicyHealthReportsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDataSafeMaskingPolicyHealthReportsMaskingPolicyHealthReportCollection {
    items: outputs.GetDataSafeMaskingPolicyHealthReportsMaskingPolicyHealthReportCollectionItem[];
}

export interface GetDataSafeMaskingPolicyHealthReportsMaskingPolicyHealthReportCollectionItem {
    compartmentId: string;
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    maskingPolicyId: string;
    state: string;
    targetId: string;
    timeCreated: string;
    timeUpdated: string;
}

export interface GetDataSafeMaskingPolicyMaskingObjectsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDataSafeMaskingPolicyMaskingObjectsMaskingObjectCollection {
    items: outputs.GetDataSafeMaskingPolicyMaskingObjectsMaskingObjectCollectionItem[];
}

export interface GetDataSafeMaskingPolicyMaskingObjectsMaskingObjectCollectionItem {
    object: string;
    objectType: string;
    schemaName: string;
}

export interface GetDataSafeMaskingPolicyMaskingSchemasFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDataSafeMaskingPolicyMaskingSchemasMaskingSchemaCollection {
    items: outputs.GetDataSafeMaskingPolicyMaskingSchemasMaskingSchemaCollectionItem[];
}

export interface GetDataSafeMaskingPolicyMaskingSchemasMaskingSchemaCollectionItem {
    schemaName: string;
}

export interface GetDataSafeMaskingReportsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDataSafeMaskingReportsMaskedColumnItem {
    columnName: string;
    key: string;
    maskingColumnGroup: string;
    maskingFormatUsed: string;
    object: string;
    objectType: string;
    parentColumnKey: string;
    schemaName: string;
    sensitiveTypeId: string;
    totalMaskedValues: string;
}

export interface GetDataSafeMaskingReportsMaskedColumnsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDataSafeMaskingReportsMaskedColumnsMaskedColumnCollection {
    items: outputs.GetDataSafeMaskingReportsMaskedColumnsMaskedColumnCollectionItem[];
}

export interface GetDataSafeMaskingReportsMaskedColumnsMaskedColumnCollectionItem {
    columnName: string;
    key: string;
    maskingColumnGroup: string;
    maskingFormatUsed: string;
    object: string;
    objectType: string;
    parentColumnKey: string;
    schemaName: string;
    sensitiveTypeId: string;
    totalMaskedValues: string;
}

export interface GetDataSafeMaskingReportsMaskingReportCollection {
    items: outputs.GetDataSafeMaskingReportsMaskingReportCollectionItem[];
}

export interface GetDataSafeMaskingReportsMaskingReportCollectionItem {
    compartmentId: string;
    id: string;
    isDropTempTablesEnabled: boolean;
    isRedoLoggingEnabled: boolean;
    isRefreshStatsEnabled: boolean;
    maskingPolicyId: string;
    maskingWorkRequestId: string;
    parallelDegree: string;
    recompile: string;
    state: string;
    targetId: string;
    timeCreated: string;
    timeMaskingFinished: string;
    timeMaskingStarted: string;
    totalMaskedColumns: string;
    totalMaskedObjects: string;
    totalMaskedSchemas: string;
    totalMaskedSensitiveTypes: string;
    totalMaskedValues: string;
}

export interface GetDataSafeOnPremConnectorsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDataSafeOnPremConnectorsOnPremConnector {
    availableVersion: string;
    compartmentId: string;
    createdVersion: string;
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    lifecycleDetails: string;
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
}

export interface GetDataSafeReportDefinitionColumnFilter {
    expressions: string[];
    fieldName: string;
    isEnabled: boolean;
    isHidden: boolean;
    operator: string;
}

export interface GetDataSafeReportDefinitionColumnInfo {
    dataType: string;
    displayName: string;
    displayOrder: number;
    fieldName: string;
    isHidden: boolean;
}

export interface GetDataSafeReportDefinitionColumnSorting {
    fieldName: string;
    isAscending: boolean;
    sortingOrder: number;
}

export interface GetDataSafeReportDefinitionSummary {
    countOf: string;
    displayOrder: number;
    groupByFieldName: string;
    isHidden: boolean;
    name: string;
    scimFilter: string;
}

export interface GetDataSafeReportDefinitionsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDataSafeReportDefinitionsReportDefinitionCollection {
    items: outputs.GetDataSafeReportDefinitionsReportDefinitionCollectionItem[];
}

export interface GetDataSafeReportDefinitionsReportDefinitionCollectionItem {
    category: string;
    columnFilters: outputs.GetDataSafeReportDefinitionsReportDefinitionCollectionItemColumnFilter[];
    columnInfos: outputs.GetDataSafeReportDefinitionsReportDefinitionCollectionItemColumnInfo[];
    columnSortings: outputs.GetDataSafeReportDefinitionsReportDefinitionCollectionItemColumnSorting[];
    compartmentId: string;
    complianceStandards: string[];
    dataSource: string;
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    displayOrder: number;
    freeformTags: {[key: string]: string};
    id: string;
    isSeeded: boolean;
    lifecycleDetails: string;
    parentId: string;
    recordTimeSpan: string;
    schedule: string;
    scheduledReportCompartmentId: string;
    scheduledReportMimeType: string;
    scheduledReportName: string;
    scheduledReportRowLimit: number;
    scimFilter: string;
    state: string;
    summaries: outputs.GetDataSafeReportDefinitionsReportDefinitionCollectionItemSummary[];
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
}

export interface GetDataSafeReportDefinitionsReportDefinitionCollectionItemColumnFilter {
    expressions: string[];
    fieldName: string;
    isEnabled: boolean;
    isHidden: boolean;
    operator: string;
}

export interface GetDataSafeReportDefinitionsReportDefinitionCollectionItemColumnInfo {
    dataType: string;
    displayName: string;
    displayOrder: number;
    fieldName: string;
    isHidden: boolean;
}

export interface GetDataSafeReportDefinitionsReportDefinitionCollectionItemColumnSorting {
    fieldName: string;
    isAscending: boolean;
    sortingOrder: number;
}

export interface GetDataSafeReportDefinitionsReportDefinitionCollectionItemSummary {
    countOf: string;
    displayOrder: number;
    groupByFieldName: string;
    isHidden: boolean;
    name: string;
    scimFilter: string;
}

export interface GetDataSafeReportsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDataSafeReportsReportCollection {
    items: outputs.GetDataSafeReportsReportCollectionItem[];
}

export interface GetDataSafeReportsReportCollectionItem {
    compartmentId: string;
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    lifecycleDetails: string;
    mimeType: string;
    reportDefinitionId: string;
    reportId: string;
    state: string;
    systemTags: {[key: string]: string};
    timeGenerated: string;
    type: string;
}

export interface GetDataSafeSdmMaskingPolicyDifferenceDifferenceColumnsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDataSafeSdmMaskingPolicyDifferenceDifferenceColumnsSdmMaskingPolicyDifferenceColumnCollection {
    items: outputs.GetDataSafeSdmMaskingPolicyDifferenceDifferenceColumnsSdmMaskingPolicyDifferenceColumnCollectionItem[];
}

export interface GetDataSafeSdmMaskingPolicyDifferenceDifferenceColumnsSdmMaskingPolicyDifferenceColumnCollectionItem {
    columnName: string;
    differenceType: string;
    key: string;
    maskingColumnkey: string;
    object: string;
    plannedAction: string;
    schemaName: string;
    sensitiveColumnkey: string;
    sensitiveTypeId: string;
    syncStatus: string;
    timeLastSynced: string;
}

export interface GetDataSafeSdmMaskingPolicyDifferencesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDataSafeSdmMaskingPolicyDifferencesSdmMaskingPolicyDifferenceCollection {
    items: outputs.GetDataSafeSdmMaskingPolicyDifferencesSdmMaskingPolicyDifferenceCollectionItem[];
}

export interface GetDataSafeSdmMaskingPolicyDifferencesSdmMaskingPolicyDifferenceCollectionItem {
    compartmentId: string;
    definedTags: {[key: string]: string};
    differenceType: string;
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    maskingPolicyId: string;
    sensitiveDataModelId: string;
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeCreationStarted: string;
}

export interface GetDataSafeSecurityAssessmentComparisonTarget {
    auditings: outputs.GetDataSafeSecurityAssessmentComparisonTargetAuditing[];
    authorizationControls: outputs.GetDataSafeSecurityAssessmentComparisonTargetAuthorizationControl[];
    baselineTargetId: string;
    currentTargetId: string;
    dataEncryptions: outputs.GetDataSafeSecurityAssessmentComparisonTargetDataEncryption[];
    dbConfigurations: outputs.GetDataSafeSecurityAssessmentComparisonTargetDbConfiguration[];
    fineGrainedAccessControls: outputs.GetDataSafeSecurityAssessmentComparisonTargetFineGrainedAccessControl[];
    privilegesAndRoles: outputs.GetDataSafeSecurityAssessmentComparisonTargetPrivilegesAndRole[];
    userAccounts: outputs.GetDataSafeSecurityAssessmentComparisonTargetUserAccount[];
}

export interface GetDataSafeSecurityAssessmentComparisonTargetAuditing {
    addedItems: string[];
    baselines: outputs.GetDataSafeSecurityAssessmentComparisonTargetAuditingBaseline[];
    currents: outputs.GetDataSafeSecurityAssessmentComparisonTargetAuditingCurrent[];
    modifiedItems: string[];
    removedItems: string[];
    severity: string;
}

export interface GetDataSafeSecurityAssessmentComparisonTargetAuditingBaseline {
    assessmentId: string;
    details: string[];
    hasTargetDbRiskLevelChanged: boolean;
    isRiskModified: boolean;
    justification: string;
    key: string;
    lifecycleDetails: string;
    oracleDefinedSeverity: string;
    references: outputs.GetDataSafeSecurityAssessmentComparisonTargetAuditingBaselineReference[];
    remarks: string;
    severity: string;
    state: string;
    summary: string;
    targetId: string;
    timeUpdated: string;
    timeValidUntil: string;
    title: string;
}

export interface GetDataSafeSecurityAssessmentComparisonTargetAuditingBaselineReference {
    cis: string;
    gdpr: string;
    obp: string;
    stig: string;
}

export interface GetDataSafeSecurityAssessmentComparisonTargetAuditingCurrent {
    assessmentId: string;
    details: string[];
    hasTargetDbRiskLevelChanged: boolean;
    isRiskModified: boolean;
    justification: string;
    key: string;
    lifecycleDetails: string;
    oracleDefinedSeverity: string;
    references: outputs.GetDataSafeSecurityAssessmentComparisonTargetAuditingCurrentReference[];
    remarks: string;
    severity: string;
    state: string;
    summary: string;
    targetId: string;
    timeUpdated: string;
    timeValidUntil: string;
    title: string;
}

export interface GetDataSafeSecurityAssessmentComparisonTargetAuditingCurrentReference {
    cis: string;
    gdpr: string;
    obp: string;
    stig: string;
}

export interface GetDataSafeSecurityAssessmentComparisonTargetAuthorizationControl {
    addedItems: string[];
    baselines: outputs.GetDataSafeSecurityAssessmentComparisonTargetAuthorizationControlBaseline[];
    currents: outputs.GetDataSafeSecurityAssessmentComparisonTargetAuthorizationControlCurrent[];
    modifiedItems: string[];
    removedItems: string[];
    severity: string;
}

export interface GetDataSafeSecurityAssessmentComparisonTargetAuthorizationControlBaseline {
    assessmentId: string;
    details: string[];
    hasTargetDbRiskLevelChanged: boolean;
    isRiskModified: boolean;
    justification: string;
    key: string;
    lifecycleDetails: string;
    oracleDefinedSeverity: string;
    references: outputs.GetDataSafeSecurityAssessmentComparisonTargetAuthorizationControlBaselineReference[];
    remarks: string;
    severity: string;
    state: string;
    summary: string;
    targetId: string;
    timeUpdated: string;
    timeValidUntil: string;
    title: string;
}

export interface GetDataSafeSecurityAssessmentComparisonTargetAuthorizationControlBaselineReference {
    cis: string;
    gdpr: string;
    obp: string;
    stig: string;
}

export interface GetDataSafeSecurityAssessmentComparisonTargetAuthorizationControlCurrent {
    assessmentId: string;
    details: string[];
    hasTargetDbRiskLevelChanged: boolean;
    isRiskModified: boolean;
    justification: string;
    key: string;
    lifecycleDetails: string;
    oracleDefinedSeverity: string;
    references: outputs.GetDataSafeSecurityAssessmentComparisonTargetAuthorizationControlCurrentReference[];
    remarks: string;
    severity: string;
    state: string;
    summary: string;
    targetId: string;
    timeUpdated: string;
    timeValidUntil: string;
    title: string;
}

export interface GetDataSafeSecurityAssessmentComparisonTargetAuthorizationControlCurrentReference {
    cis: string;
    gdpr: string;
    obp: string;
    stig: string;
}

export interface GetDataSafeSecurityAssessmentComparisonTargetDataEncryption {
    addedItems: string[];
    baselines: outputs.GetDataSafeSecurityAssessmentComparisonTargetDataEncryptionBaseline[];
    currents: outputs.GetDataSafeSecurityAssessmentComparisonTargetDataEncryptionCurrent[];
    modifiedItems: string[];
    removedItems: string[];
    severity: string;
}

export interface GetDataSafeSecurityAssessmentComparisonTargetDataEncryptionBaseline {
    assessmentId: string;
    details: string[];
    hasTargetDbRiskLevelChanged: boolean;
    isRiskModified: boolean;
    justification: string;
    key: string;
    lifecycleDetails: string;
    oracleDefinedSeverity: string;
    references: outputs.GetDataSafeSecurityAssessmentComparisonTargetDataEncryptionBaselineReference[];
    remarks: string;
    severity: string;
    state: string;
    summary: string;
    targetId: string;
    timeUpdated: string;
    timeValidUntil: string;
    title: string;
}

export interface GetDataSafeSecurityAssessmentComparisonTargetDataEncryptionBaselineReference {
    cis: string;
    gdpr: string;
    obp: string;
    stig: string;
}

export interface GetDataSafeSecurityAssessmentComparisonTargetDataEncryptionCurrent {
    assessmentId: string;
    details: string[];
    hasTargetDbRiskLevelChanged: boolean;
    isRiskModified: boolean;
    justification: string;
    key: string;
    lifecycleDetails: string;
    oracleDefinedSeverity: string;
    references: outputs.GetDataSafeSecurityAssessmentComparisonTargetDataEncryptionCurrentReference[];
    remarks: string;
    severity: string;
    state: string;
    summary: string;
    targetId: string;
    timeUpdated: string;
    timeValidUntil: string;
    title: string;
}

export interface GetDataSafeSecurityAssessmentComparisonTargetDataEncryptionCurrentReference {
    cis: string;
    gdpr: string;
    obp: string;
    stig: string;
}

export interface GetDataSafeSecurityAssessmentComparisonTargetDbConfiguration {
    addedItems: string[];
    baselines: outputs.GetDataSafeSecurityAssessmentComparisonTargetDbConfigurationBaseline[];
    currents: outputs.GetDataSafeSecurityAssessmentComparisonTargetDbConfigurationCurrent[];
    modifiedItems: string[];
    removedItems: string[];
    severity: string;
}

export interface GetDataSafeSecurityAssessmentComparisonTargetDbConfigurationBaseline {
    assessmentId: string;
    details: string[];
    hasTargetDbRiskLevelChanged: boolean;
    isRiskModified: boolean;
    justification: string;
    key: string;
    lifecycleDetails: string;
    oracleDefinedSeverity: string;
    references: outputs.GetDataSafeSecurityAssessmentComparisonTargetDbConfigurationBaselineReference[];
    remarks: string;
    severity: string;
    state: string;
    summary: string;
    targetId: string;
    timeUpdated: string;
    timeValidUntil: string;
    title: string;
}

export interface GetDataSafeSecurityAssessmentComparisonTargetDbConfigurationBaselineReference {
    cis: string;
    gdpr: string;
    obp: string;
    stig: string;
}

export interface GetDataSafeSecurityAssessmentComparisonTargetDbConfigurationCurrent {
    assessmentId: string;
    details: string[];
    hasTargetDbRiskLevelChanged: boolean;
    isRiskModified: boolean;
    justification: string;
    key: string;
    lifecycleDetails: string;
    oracleDefinedSeverity: string;
    references: outputs.GetDataSafeSecurityAssessmentComparisonTargetDbConfigurationCurrentReference[];
    remarks: string;
    severity: string;
    state: string;
    summary: string;
    targetId: string;
    timeUpdated: string;
    timeValidUntil: string;
    title: string;
}

export interface GetDataSafeSecurityAssessmentComparisonTargetDbConfigurationCurrentReference {
    cis: string;
    gdpr: string;
    obp: string;
    stig: string;
}

export interface GetDataSafeSecurityAssessmentComparisonTargetFineGrainedAccessControl {
    addedItems: string[];
    baselines: outputs.GetDataSafeSecurityAssessmentComparisonTargetFineGrainedAccessControlBaseline[];
    currents: outputs.GetDataSafeSecurityAssessmentComparisonTargetFineGrainedAccessControlCurrent[];
    modifiedItems: string[];
    removedItems: string[];
    severity: string;
}

export interface GetDataSafeSecurityAssessmentComparisonTargetFineGrainedAccessControlBaseline {
    assessmentId: string;
    details: string[];
    hasTargetDbRiskLevelChanged: boolean;
    isRiskModified: boolean;
    justification: string;
    key: string;
    lifecycleDetails: string;
    oracleDefinedSeverity: string;
    references: outputs.GetDataSafeSecurityAssessmentComparisonTargetFineGrainedAccessControlBaselineReference[];
    remarks: string;
    severity: string;
    state: string;
    summary: string;
    targetId: string;
    timeUpdated: string;
    timeValidUntil: string;
    title: string;
}

export interface GetDataSafeSecurityAssessmentComparisonTargetFineGrainedAccessControlBaselineReference {
    cis: string;
    gdpr: string;
    obp: string;
    stig: string;
}

export interface GetDataSafeSecurityAssessmentComparisonTargetFineGrainedAccessControlCurrent {
    assessmentId: string;
    details: string[];
    hasTargetDbRiskLevelChanged: boolean;
    isRiskModified: boolean;
    justification: string;
    key: string;
    lifecycleDetails: string;
    oracleDefinedSeverity: string;
    references: outputs.GetDataSafeSecurityAssessmentComparisonTargetFineGrainedAccessControlCurrentReference[];
    remarks: string;
    severity: string;
    state: string;
    summary: string;
    targetId: string;
    timeUpdated: string;
    timeValidUntil: string;
    title: string;
}

export interface GetDataSafeSecurityAssessmentComparisonTargetFineGrainedAccessControlCurrentReference {
    cis: string;
    gdpr: string;
    obp: string;
    stig: string;
}

export interface GetDataSafeSecurityAssessmentComparisonTargetPrivilegesAndRole {
    addedItems: string[];
    baselines: outputs.GetDataSafeSecurityAssessmentComparisonTargetPrivilegesAndRoleBaseline[];
    currents: outputs.GetDataSafeSecurityAssessmentComparisonTargetPrivilegesAndRoleCurrent[];
    modifiedItems: string[];
    removedItems: string[];
    severity: string;
}

export interface GetDataSafeSecurityAssessmentComparisonTargetPrivilegesAndRoleBaseline {
    assessmentId: string;
    details: string[];
    hasTargetDbRiskLevelChanged: boolean;
    isRiskModified: boolean;
    justification: string;
    key: string;
    lifecycleDetails: string;
    oracleDefinedSeverity: string;
    references: outputs.GetDataSafeSecurityAssessmentComparisonTargetPrivilegesAndRoleBaselineReference[];
    remarks: string;
    severity: string;
    state: string;
    summary: string;
    targetId: string;
    timeUpdated: string;
    timeValidUntil: string;
    title: string;
}

export interface GetDataSafeSecurityAssessmentComparisonTargetPrivilegesAndRoleBaselineReference {
    cis: string;
    gdpr: string;
    obp: string;
    stig: string;
}

export interface GetDataSafeSecurityAssessmentComparisonTargetPrivilegesAndRoleCurrent {
    assessmentId: string;
    details: string[];
    hasTargetDbRiskLevelChanged: boolean;
    isRiskModified: boolean;
    justification: string;
    key: string;
    lifecycleDetails: string;
    oracleDefinedSeverity: string;
    references: outputs.GetDataSafeSecurityAssessmentComparisonTargetPrivilegesAndRoleCurrentReference[];
    remarks: string;
    severity: string;
    state: string;
    summary: string;
    targetId: string;
    timeUpdated: string;
    timeValidUntil: string;
    title: string;
}

export interface GetDataSafeSecurityAssessmentComparisonTargetPrivilegesAndRoleCurrentReference {
    cis: string;
    gdpr: string;
    obp: string;
    stig: string;
}

export interface GetDataSafeSecurityAssessmentComparisonTargetUserAccount {
    addedItems: string[];
    baselines: outputs.GetDataSafeSecurityAssessmentComparisonTargetUserAccountBaseline[];
    currents: outputs.GetDataSafeSecurityAssessmentComparisonTargetUserAccountCurrent[];
    modifiedItems: string[];
    removedItems: string[];
    severity: string;
}

export interface GetDataSafeSecurityAssessmentComparisonTargetUserAccountBaseline {
    assessmentId: string;
    details: string[];
    hasTargetDbRiskLevelChanged: boolean;
    isRiskModified: boolean;
    justification: string;
    key: string;
    lifecycleDetails: string;
    oracleDefinedSeverity: string;
    references: outputs.GetDataSafeSecurityAssessmentComparisonTargetUserAccountBaselineReference[];
    remarks: string;
    severity: string;
    state: string;
    summary: string;
    targetId: string;
    timeUpdated: string;
    timeValidUntil: string;
    title: string;
}

export interface GetDataSafeSecurityAssessmentComparisonTargetUserAccountBaselineReference {
    cis: string;
    gdpr: string;
    obp: string;
    stig: string;
}

export interface GetDataSafeSecurityAssessmentComparisonTargetUserAccountCurrent {
    assessmentId: string;
    details: string[];
    hasTargetDbRiskLevelChanged: boolean;
    isRiskModified: boolean;
    justification: string;
    key: string;
    lifecycleDetails: string;
    oracleDefinedSeverity: string;
    references: outputs.GetDataSafeSecurityAssessmentComparisonTargetUserAccountCurrentReference[];
    remarks: string;
    severity: string;
    state: string;
    summary: string;
    targetId: string;
    timeUpdated: string;
    timeValidUntil: string;
    title: string;
}

export interface GetDataSafeSecurityAssessmentComparisonTargetUserAccountCurrentReference {
    cis: string;
    gdpr: string;
    obp: string;
    stig: string;
}

export interface GetDataSafeSecurityAssessmentFindingAnalyticsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDataSafeSecurityAssessmentFindingAnalyticsFindingAnalyticsCollection {
    items: outputs.GetDataSafeSecurityAssessmentFindingAnalyticsFindingAnalyticsCollectionItem[];
}

export interface GetDataSafeSecurityAssessmentFindingAnalyticsFindingAnalyticsCollectionItem {
    dimensions: outputs.GetDataSafeSecurityAssessmentFindingAnalyticsFindingAnalyticsCollectionItemDimension[];
    metricName: string;
    securityAssessmentFindingAnalyticCount: string;
}

export interface GetDataSafeSecurityAssessmentFindingAnalyticsFindingAnalyticsCollectionItemDimension {
    key: string;
    severity: string;
    targetId: string;
    title: string;
    topFindingCategory: string;
    topFindingStatus: string;
}

export interface GetDataSafeSecurityAssessmentFindingFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDataSafeSecurityAssessmentFindingFinding {
    assessmentId: string;
    details: string[];
    hasTargetDbRiskLevelChanged: boolean;
    isRiskModified: boolean;
    isTopFinding: boolean;
    justification: string;
    key: string;
    lifecycleDetails: string;
    oneline: string;
    oracleDefinedSeverity: string;
    references: outputs.GetDataSafeSecurityAssessmentFindingFindingReference[];
    remarks: string;
    severity: string;
    state: string;
    summary: string;
    targetId: string;
    timeUpdated: string;
    timeValidUntil: string;
    title: string;
}

export interface GetDataSafeSecurityAssessmentFindingFindingReference {
    cis: string;
    gdpr: string;
    obp: string;
    stig: string;
}

export interface GetDataSafeSecurityAssessmentFindingsChangeAuditLogsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDataSafeSecurityAssessmentFindingsChangeAuditLogsFindingsChangeAuditLogCollection {
    items: outputs.GetDataSafeSecurityAssessmentFindingsChangeAuditLogsFindingsChangeAuditLogCollectionItem[];
}

export interface GetDataSafeSecurityAssessmentFindingsChangeAuditLogsFindingsChangeAuditLogCollectionItem {
    assessmentId: string;
    findingKey: string;
    findingTitle: string;
    isRiskDeferred: boolean;
    justification: string;
    key: string;
    modifiedBy: string;
    oracleDefinedSeverity: string;
    previousSeverity: string;
    severity: string;
    targetId: string;
    timeUpdated: string;
    timeValidUntil: string;
}

export interface GetDataSafeSecurityAssessmentFindingsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDataSafeSecurityAssessmentFindingsFinding {
    assessmentId: string;
    details: string[];
    hasTargetDbRiskLevelChanged: boolean;
    isRiskModified: boolean;
    isTopFinding: boolean;
    justification: string;
    key: string;
    lifecycleDetails: string;
    oneline: string;
    oracleDefinedSeverity: string;
    references: outputs.GetDataSafeSecurityAssessmentFindingsFindingReference[];
    remarks: string;
    severity: string;
    state: string;
    summary: string;
    targetId: string;
    timeUpdated: string;
    timeValidUntil: string;
    title: string;
}

export interface GetDataSafeSecurityAssessmentFindingsFindingReference {
    cis: string;
    gdpr: string;
    obp: string;
    stig: string;
}

export interface GetDataSafeSecurityAssessmentSecurityFeatureAnalyticsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDataSafeSecurityAssessmentSecurityFeatureAnalyticsSecurityFeatureAnalyticsCollection {
    items: outputs.GetDataSafeSecurityAssessmentSecurityFeatureAnalyticsSecurityFeatureAnalyticsCollectionItem[];
}

export interface GetDataSafeSecurityAssessmentSecurityFeatureAnalyticsSecurityFeatureAnalyticsCollectionItem {
    dimensions: outputs.GetDataSafeSecurityAssessmentSecurityFeatureAnalyticsSecurityFeatureAnalyticsCollectionItemDimension[];
    metricName: string;
    securityAssessmentSecurityFeatureAnalyticCount: string;
}

export interface GetDataSafeSecurityAssessmentSecurityFeatureAnalyticsSecurityFeatureAnalyticsCollectionItemDimension {
    securityFeature: string;
}

export interface GetDataSafeSecurityAssessmentSecurityFeaturesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDataSafeSecurityAssessmentSecurityFeaturesSecurityFeatureCollection {
    items: outputs.GetDataSafeSecurityAssessmentSecurityFeaturesSecurityFeatureCollectionItem[];
}

export interface GetDataSafeSecurityAssessmentSecurityFeaturesSecurityFeatureCollectionItem {
    assessmentId: string;
    columnEncryption: string;
    compartmentId: string;
    databaseVault: string;
    definedTags: {[key: string]: string};
    externalAuthentication: string;
    fineGrainedAudit: string;
    freeformTags: {[key: string]: string};
    globalAuthentication: string;
    networkEncryption: string;
    passwordAuthentication: string;
    privilegeAnalysis: string;
    tablespaceEncryption: string;
    targetId: string;
    traditionalAudit: string;
    unifiedAudit: string;
}

export interface GetDataSafeSecurityAssessmentStatistic {
    advisories: outputs.GetDataSafeSecurityAssessmentStatisticAdvisory[];
    deferreds: outputs.GetDataSafeSecurityAssessmentStatisticDeferred[];
    evaluates: outputs.GetDataSafeSecurityAssessmentStatisticEvaluate[];
    highRisks: outputs.GetDataSafeSecurityAssessmentStatisticHighRisk[];
    lowRisks: outputs.GetDataSafeSecurityAssessmentStatisticLowRisk[];
    mediumRisks: outputs.GetDataSafeSecurityAssessmentStatisticMediumRisk[];
    passes: outputs.GetDataSafeSecurityAssessmentStatisticPass[];
    targetsCount: number;
}

export interface GetDataSafeSecurityAssessmentStatisticAdvisory {
    auditingFindingsCount: number;
    authorizationControlFindingsCount: number;
    dataEncryptionFindingsCount: number;
    dbConfigurationFindingsCount: number;
    fineGrainedAccessControlFindingsCount: number;
    privilegesAndRolesFindingsCount: number;
    targetsCount: number;
    userAccountsFindingsCount: number;
}

export interface GetDataSafeSecurityAssessmentStatisticDeferred {
    auditingFindingsCount: number;
    authorizationControlFindingsCount: number;
    dataEncryptionFindingsCount: number;
    dbConfigurationFindingsCount: number;
    fineGrainedAccessControlFindingsCount: number;
    privilegesAndRolesFindingsCount: number;
    targetsCount: number;
    userAccountsFindingsCount: number;
}

export interface GetDataSafeSecurityAssessmentStatisticEvaluate {
    auditingFindingsCount: number;
    authorizationControlFindingsCount: number;
    dataEncryptionFindingsCount: number;
    dbConfigurationFindingsCount: number;
    fineGrainedAccessControlFindingsCount: number;
    privilegesAndRolesFindingsCount: number;
    targetsCount: number;
    userAccountsFindingsCount: number;
}

export interface GetDataSafeSecurityAssessmentStatisticHighRisk {
    auditingFindingsCount: number;
    authorizationControlFindingsCount: number;
    dataEncryptionFindingsCount: number;
    dbConfigurationFindingsCount: number;
    fineGrainedAccessControlFindingsCount: number;
    privilegesAndRolesFindingsCount: number;
    targetsCount: number;
    userAccountsFindingsCount: number;
}

export interface GetDataSafeSecurityAssessmentStatisticLowRisk {
    auditingFindingsCount: number;
    authorizationControlFindingsCount: number;
    dataEncryptionFindingsCount: number;
    dbConfigurationFindingsCount: number;
    fineGrainedAccessControlFindingsCount: number;
    privilegesAndRolesFindingsCount: number;
    targetsCount: number;
    userAccountsFindingsCount: number;
}

export interface GetDataSafeSecurityAssessmentStatisticMediumRisk {
    auditingFindingsCount: number;
    authorizationControlFindingsCount: number;
    dataEncryptionFindingsCount: number;
    dbConfigurationFindingsCount: number;
    fineGrainedAccessControlFindingsCount: number;
    privilegesAndRolesFindingsCount: number;
    targetsCount: number;
    userAccountsFindingsCount: number;
}

export interface GetDataSafeSecurityAssessmentStatisticPass {
    auditingFindingsCount: number;
    authorizationControlFindingsCount: number;
    dataEncryptionFindingsCount: number;
    dbConfigurationFindingsCount: number;
    fineGrainedAccessControlFindingsCount: number;
    privilegesAndRolesFindingsCount: number;
    targetsCount: number;
    userAccountsFindingsCount: number;
}

export interface GetDataSafeSecurityAssessmentsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDataSafeSecurityAssessmentsSecurityAssessment {
    compartmentId: string;
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    ignoredAssessmentIds: string[];
    ignoredTargets: string[];
    isAssessmentScheduled: boolean;
    isBaseline: boolean;
    isDeviatedFromBaseline: boolean;
    lastComparedBaselineId: string;
    lifecycleDetails: string;
    link: string;
    schedule: string;
    scheduleSecurityAssessmentId: string;
    state: string;
    statistics: outputs.GetDataSafeSecurityAssessmentsSecurityAssessmentStatistic[];
    systemTags: {[key: string]: string};
    targetId: string;
    targetIds: string[];
    targetVersion: string;
    timeCreated: string;
    timeLastAssessed: string;
    timeUpdated: string;
    triggeredBy: string;
    type: string;
}

export interface GetDataSafeSecurityAssessmentsSecurityAssessmentStatistic {
    advisories: outputs.GetDataSafeSecurityAssessmentsSecurityAssessmentStatisticAdvisory[];
    deferreds: outputs.GetDataSafeSecurityAssessmentsSecurityAssessmentStatisticDeferred[];
    evaluates: outputs.GetDataSafeSecurityAssessmentsSecurityAssessmentStatisticEvaluate[];
    highRisks: outputs.GetDataSafeSecurityAssessmentsSecurityAssessmentStatisticHighRisk[];
    lowRisks: outputs.GetDataSafeSecurityAssessmentsSecurityAssessmentStatisticLowRisk[];
    mediumRisks: outputs.GetDataSafeSecurityAssessmentsSecurityAssessmentStatisticMediumRisk[];
    passes: outputs.GetDataSafeSecurityAssessmentsSecurityAssessmentStatisticPass[];
    targetsCount: number;
}

export interface GetDataSafeSecurityAssessmentsSecurityAssessmentStatisticAdvisory {
    auditingFindingsCount: number;
    authorizationControlFindingsCount: number;
    dataEncryptionFindingsCount: number;
    dbConfigurationFindingsCount: number;
    fineGrainedAccessControlFindingsCount: number;
    privilegesAndRolesFindingsCount: number;
    targetsCount: number;
    userAccountsFindingsCount: number;
}

export interface GetDataSafeSecurityAssessmentsSecurityAssessmentStatisticDeferred {
    auditingFindingsCount: number;
    authorizationControlFindingsCount: number;
    dataEncryptionFindingsCount: number;
    dbConfigurationFindingsCount: number;
    fineGrainedAccessControlFindingsCount: number;
    privilegesAndRolesFindingsCount: number;
    targetsCount: number;
    userAccountsFindingsCount: number;
}

export interface GetDataSafeSecurityAssessmentsSecurityAssessmentStatisticEvaluate {
    auditingFindingsCount: number;
    authorizationControlFindingsCount: number;
    dataEncryptionFindingsCount: number;
    dbConfigurationFindingsCount: number;
    fineGrainedAccessControlFindingsCount: number;
    privilegesAndRolesFindingsCount: number;
    targetsCount: number;
    userAccountsFindingsCount: number;
}

export interface GetDataSafeSecurityAssessmentsSecurityAssessmentStatisticHighRisk {
    auditingFindingsCount: number;
    authorizationControlFindingsCount: number;
    dataEncryptionFindingsCount: number;
    dbConfigurationFindingsCount: number;
    fineGrainedAccessControlFindingsCount: number;
    privilegesAndRolesFindingsCount: number;
    targetsCount: number;
    userAccountsFindingsCount: number;
}

export interface GetDataSafeSecurityAssessmentsSecurityAssessmentStatisticLowRisk {
    auditingFindingsCount: number;
    authorizationControlFindingsCount: number;
    dataEncryptionFindingsCount: number;
    dbConfigurationFindingsCount: number;
    fineGrainedAccessControlFindingsCount: number;
    privilegesAndRolesFindingsCount: number;
    targetsCount: number;
    userAccountsFindingsCount: number;
}

export interface GetDataSafeSecurityAssessmentsSecurityAssessmentStatisticMediumRisk {
    auditingFindingsCount: number;
    authorizationControlFindingsCount: number;
    dataEncryptionFindingsCount: number;
    dbConfigurationFindingsCount: number;
    fineGrainedAccessControlFindingsCount: number;
    privilegesAndRolesFindingsCount: number;
    targetsCount: number;
    userAccountsFindingsCount: number;
}

export interface GetDataSafeSecurityAssessmentsSecurityAssessmentStatisticPass {
    auditingFindingsCount: number;
    authorizationControlFindingsCount: number;
    dataEncryptionFindingsCount: number;
    dbConfigurationFindingsCount: number;
    fineGrainedAccessControlFindingsCount: number;
    privilegesAndRolesFindingsCount: number;
    targetsCount: number;
    userAccountsFindingsCount: number;
}

export interface GetDataSafeSecurityPoliciesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDataSafeSecurityPoliciesSecurityPolicyCollection {
    items: outputs.GetDataSafeSecurityPoliciesSecurityPolicyCollectionItem[];
}

export interface GetDataSafeSecurityPoliciesSecurityPolicyCollectionItem {
    compartmentId: string;
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    lifecycleDetails: string;
    securityPolicyId: string;
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
}

export interface GetDataSafeSecurityPolicyDeploymentSecurityPolicyEntryStateEntryDetail {
    entryType: string;
    timeGenerated: string;
    timeStatusUpdated: string;
}

export interface GetDataSafeSecurityPolicyDeploymentSecurityPolicyEntryStatesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDataSafeSecurityPolicyDeploymentSecurityPolicyEntryStatesSecurityPolicyEntryStateCollection {
    items: outputs.GetDataSafeSecurityPolicyDeploymentSecurityPolicyEntryStatesSecurityPolicyEntryStateCollectionItem[];
}

export interface GetDataSafeSecurityPolicyDeploymentSecurityPolicyEntryStatesSecurityPolicyEntryStateCollectionItem {
    deploymentStatus: string;
    entryDetails: outputs.GetDataSafeSecurityPolicyDeploymentSecurityPolicyEntryStatesSecurityPolicyEntryStateCollectionItemEntryDetail[];
    id: string;
    securityPolicyDeploymentId: string;
    securityPolicyEntryId: string;
}

export interface GetDataSafeSecurityPolicyDeploymentSecurityPolicyEntryStatesSecurityPolicyEntryStateCollectionItemEntryDetail {
    entryType: string;
    timeGenerated: string;
    timeStatusUpdated: string;
}

export interface GetDataSafeSecurityPolicyDeploymentsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDataSafeSecurityPolicyDeploymentsSecurityPolicyDeploymentCollection {
    items: outputs.GetDataSafeSecurityPolicyDeploymentsSecurityPolicyDeploymentCollectionItem[];
}

export interface GetDataSafeSecurityPolicyDeploymentsSecurityPolicyDeploymentCollectionItem {
    compartmentId: string;
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    lifecycleDetails: string;
    securityPolicyDeploymentId: string;
    securityPolicyId: string;
    state: string;
    systemTags: {[key: string]: string};
    targetId: string;
    timeCreated: string;
    timeUpdated: string;
}

export interface GetDataSafeSecurityPolicyReportDatabaseTableAccessEntriesDatabaseTableAccessEntryCollection {
    items: outputs.GetDataSafeSecurityPolicyReportDatabaseTableAccessEntriesDatabaseTableAccessEntryCollectionItem[];
}

export interface GetDataSafeSecurityPolicyReportDatabaseTableAccessEntriesDatabaseTableAccessEntryCollectionItem {
    accessThroughObject: string;
    accessType: string;
    areAllTablesAccessible: boolean;
    columnName: string;
    grantFromRole: string;
    grantee: string;
    grantor: string;
    isAccessConstrainedByDatabaseVault: boolean;
    isAccessConstrainedByLabelSecurity: boolean;
    isAccessConstrainedByRealApplicationSecurity: boolean;
    isAccessConstrainedByRedaction: boolean;
    isAccessConstrainedBySqlFirewall: boolean;
    isAccessConstrainedByView: boolean;
    isAccessConstrainedByVirtualPrivateDatabase: boolean;
    isSensitive: boolean;
    key: string;
    privilege: string;
    privilegeGrantable: string;
    privilegeType: string;
    tableName: string;
    tableSchema: string;
    targetId: string;
}

export interface GetDataSafeSecurityPolicyReportDatabaseTableAccessEntriesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDataSafeSecurityPolicyReportDatabaseViewAccessEntriesDatabaseViewAccessEntryCollection {
    items: outputs.GetDataSafeSecurityPolicyReportDatabaseViewAccessEntriesDatabaseViewAccessEntryCollectionItem[];
}

export interface GetDataSafeSecurityPolicyReportDatabaseViewAccessEntriesDatabaseViewAccessEntryCollectionItem {
    accessType: string;
    columnName: string;
    grantFromRole: string;
    grantee: string;
    grantor: string;
    isAccessConstrainedByDatabaseVault: boolean;
    isAccessConstrainedByRealApplicationSecurity: boolean;
    isAccessConstrainedByRedaction: boolean;
    isAccessConstrainedBySqlFirewall: boolean;
    isAccessConstrainedByVirtualPrivateDatabase: boolean;
    key: string;
    privilege: string;
    privilegeGrantable: string;
    privilegeType: string;
    tableName: string;
    tableSchema: string;
    targetId: string;
    viewName: string;
    viewSchema: string;
    viewText: string;
}

export interface GetDataSafeSecurityPolicyReportDatabaseViewAccessEntriesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDataSafeSecurityPolicyReportRoleGrantPathsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDataSafeSecurityPolicyReportRoleGrantPathsRoleGrantPathCollection {
    items: outputs.GetDataSafeSecurityPolicyReportRoleGrantPathsRoleGrantPathCollectionItem[];
}

export interface GetDataSafeSecurityPolicyReportRoleGrantPathsRoleGrantPathCollectionItem {
    depthLevel: number;
    grantedRole: string;
    grantee: string;
    key: string;
}

export interface GetDataSafeSecurityPolicyReportsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDataSafeSecurityPolicyReportsSecurityPolicyReportCollection {
    items: outputs.GetDataSafeSecurityPolicyReportsSecurityPolicyReportCollectionItem[];
}

export interface GetDataSafeSecurityPolicyReportsSecurityPolicyReportCollectionItem {
    compartmentId: string;
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    lifecycleDetails: string;
    state: string;
    systemTags: {[key: string]: string};
    targetId: string;
    timeCreated: string;
    timeUpdated: string;
}

export interface GetDataSafeSensitiveDataModelSensitiveObjectsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDataSafeSensitiveDataModelSensitiveObjectsSensitiveObjectCollection {
    items: outputs.GetDataSafeSensitiveDataModelSensitiveObjectsSensitiveObjectCollectionItem[];
}

export interface GetDataSafeSensitiveDataModelSensitiveObjectsSensitiveObjectCollectionItem {
    object: string;
    objectType: string;
    schemaName: string;
}

export interface GetDataSafeSensitiveDataModelSensitiveSchemasFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDataSafeSensitiveDataModelSensitiveSchemasSensitiveSchemaCollection {
    items: outputs.GetDataSafeSensitiveDataModelSensitiveSchemasSensitiveSchemaCollectionItem[];
}

export interface GetDataSafeSensitiveDataModelSensitiveSchemasSensitiveSchemaCollectionItem {
    schemaName: string;
}

export interface GetDataSafeSensitiveDataModelSensitiveTypesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDataSafeSensitiveDataModelSensitiveTypesSensitiveDataModelSensitiveTypeCollection {
    items: outputs.GetDataSafeSensitiveDataModelSensitiveTypesSensitiveDataModelSensitiveTypeCollectionItem[];
}

export interface GetDataSafeSensitiveDataModelSensitiveTypesSensitiveDataModelSensitiveTypeCollectionItem {
    sensitiveDataModelSensitiveTypeCount: string;
    sensitiveTypeId: string;
}

export interface GetDataSafeSensitiveDataModelTablesForDiscovery {
    schemaName: string;
    tableNames: string[];
}

export interface GetDataSafeSensitiveDataModelsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDataSafeSensitiveDataModelsSensitiveColumnsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDataSafeSensitiveDataModelsSensitiveColumnsSensitiveColumnCollection {
    items: outputs.GetDataSafeSensitiveDataModelsSensitiveColumnsSensitiveColumnCollectionItem[];
}

export interface GetDataSafeSensitiveDataModelsSensitiveColumnsSensitiveColumnCollectionItem {
    appDefinedChildColumnKeys: string[];
    appName: string;
    columnGroups: string[];
    columnName: string;
    dataType: string;
    dbDefinedChildColumnKeys: string[];
    estimatedDataValueCount: string;
    key: string;
    lifecycleDetails: string;
    object: string;
    objectType: string;
    parentColumnKeys: string[];
    relationType: string;
    sampleDataValues: string[];
    schemaName: string;
    sensitiveDataModelId: string;
    sensitiveTypeId: string;
    source: string;
    state: string;
    status: string;
    timeCreated: string;
    timeUpdated: string;
}

export interface GetDataSafeSensitiveDataModelsSensitiveDataModelCollection {
    items: outputs.GetDataSafeSensitiveDataModelsSensitiveDataModelCollectionItem[];
}

export interface GetDataSafeSensitiveDataModelsSensitiveDataModelCollectionItem {
    appSuiteName: string;
    compartmentId: string;
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    isAppDefinedRelationDiscoveryEnabled: boolean;
    isIncludeAllSchemas: boolean;
    isIncludeAllSensitiveTypes: boolean;
    isSampleDataCollectionEnabled: boolean;
    schemasForDiscoveries: string[];
    sensitiveTypeIdsForDiscoveries: string[];
    state: string;
    systemTags: {[key: string]: string};
    tablesForDiscoveries: outputs.GetDataSafeSensitiveDataModelsSensitiveDataModelCollectionItemTablesForDiscovery[];
    targetId: string;
    timeCreated: string;
    timeUpdated: string;
}

export interface GetDataSafeSensitiveDataModelsSensitiveDataModelCollectionItemTablesForDiscovery {
    schemaName: string;
    tableNames: string[];
}

export interface GetDataSafeSensitiveTypesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDataSafeSensitiveTypesSensitiveTypeCollection {
    items: outputs.GetDataSafeSensitiveTypesSensitiveTypeCollectionItem[];
}

export interface GetDataSafeSensitiveTypesSensitiveTypeCollectionItem {
    commentPattern: string;
    compartmentId: string;
    dataPattern: string;
    defaultMaskingFormatId: string;
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    entityType: string;
    freeformTags: {[key: string]: string};
    id: string;
    isCommon: boolean;
    namePattern: string;
    parentCategoryId: string;
    searchType: string;
    shortName: string;
    source: string;
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
}

export interface GetDataSafeTargetAlertPolicyAssociationsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDataSafeTargetAlertPolicyAssociationsTargetAlertPolicyAssociationCollection {
    items: outputs.GetDataSafeTargetAlertPolicyAssociationsTargetAlertPolicyAssociationCollectionItem[];
}

export interface GetDataSafeTargetAlertPolicyAssociationsTargetAlertPolicyAssociationCollectionItem {
    compartmentId: string;
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    isEnabled: boolean;
    lifecycleDetails: string;
    policyId: string;
    state: string;
    systemTags: {[key: string]: string};
    targetId: string;
    timeCreated: string;
    timeUpdated: string;
}

export interface GetDataSafeTargetDatabaseConnectionOption {
    connectionType: string;
    datasafePrivateEndpointId: string;
    onPremConnectorId: string;
}

export interface GetDataSafeTargetDatabaseCredential {
    password: string;
    userName: string;
}

export interface GetDataSafeTargetDatabaseDatabaseDetail {
    autonomousDatabaseId: string;
    databaseType: string;
    dbSystemId: string;
    infrastructureType: string;
    instanceId: string;
    ipAddresses: string[];
    listenerPort: number;
    serviceName: string;
    vmClusterId: string;
}

export interface GetDataSafeTargetDatabasePeerTargetDatabase {
    databaseDetails: outputs.GetDataSafeTargetDatabasePeerTargetDatabaseDatabaseDetail[];
    databaseUniqueName: string;
    dataguardAssociationId: string;
    description: string;
    displayName: string;
    key: number;
    lifecycleDetails: string;
    role: string;
    state: string;
    timeCreated: string;
    tlsConfigs: outputs.GetDataSafeTargetDatabasePeerTargetDatabaseTlsConfig[];
}

export interface GetDataSafeTargetDatabasePeerTargetDatabaseDatabaseDetail {
    autonomousDatabaseId: string;
    databaseType: string;
    dbSystemId: string;
    infrastructureType: string;
    instanceId: string;
    ipAddresses: string[];
    listenerPort: number;
    serviceName: string;
    vmClusterId: string;
}

export interface GetDataSafeTargetDatabasePeerTargetDatabaseDetail {
    databaseDetails: outputs.GetDataSafeTargetDatabasePeerTargetDatabaseDetailDatabaseDetail[];
    dataguardAssociationId: string;
    description: string;
    displayName: string;
    tlsConfigs: outputs.GetDataSafeTargetDatabasePeerTargetDatabaseDetailTlsConfig[];
}

export interface GetDataSafeTargetDatabasePeerTargetDatabaseDetailDatabaseDetail {
    autonomousDatabaseId: string;
    databaseType: string;
    dbSystemId: string;
    infrastructureType: string;
    instanceId: string;
    ipAddresses: string[];
    listenerPort: number;
    serviceName: string;
    vmClusterId: string;
}

export interface GetDataSafeTargetDatabasePeerTargetDatabaseDetailTlsConfig {
    certificateStoreType: string;
    keyStoreContent: string;
    status: string;
    storePassword: string;
    trustStoreContent: string;
}

export interface GetDataSafeTargetDatabasePeerTargetDatabaseTlsConfig {
    certificateStoreType: string;
    keyStoreContent: string;
    status: string;
    storePassword: string;
    trustStoreContent: string;
}

export interface GetDataSafeTargetDatabasePeerTargetDatabasesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDataSafeTargetDatabasePeerTargetDatabasesPeerTargetDatabaseCollection {
    compartmentId: string;
    items: outputs.GetDataSafeTargetDatabasePeerTargetDatabasesPeerTargetDatabaseCollectionItem[];
}

export interface GetDataSafeTargetDatabasePeerTargetDatabasesPeerTargetDatabaseCollectionItem {
    databaseDetails: outputs.GetDataSafeTargetDatabasePeerTargetDatabasesPeerTargetDatabaseCollectionItemDatabaseDetail[];
    databaseUniqueName: string;
    dataguardAssociationId: string;
    description: string;
    displayName: string;
    key: number;
    lifecycleDetails: string;
    role: string;
    state: string;
    targetDatabaseId: string;
    timeCreated: string;
    tlsConfigs: outputs.GetDataSafeTargetDatabasePeerTargetDatabasesPeerTargetDatabaseCollectionItemTlsConfig[];
}

export interface GetDataSafeTargetDatabasePeerTargetDatabasesPeerTargetDatabaseCollectionItemDatabaseDetail {
    autonomousDatabaseId: string;
    databaseType: string;
    dbSystemId: string;
    infrastructureType: string;
    instanceId: string;
    ipAddresses: string[];
    listenerPort: number;
    serviceName: string;
    vmClusterId: string;
}

export interface GetDataSafeTargetDatabasePeerTargetDatabasesPeerTargetDatabaseCollectionItemTlsConfig {
    certificateStoreType: string;
    keyStoreContent: string;
    status: string;
    storePassword: string;
    trustStoreContent: string;
}

export interface GetDataSafeTargetDatabaseRoleFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDataSafeTargetDatabaseRoleRole {
    authenticationType: string;
    isCommon: boolean;
    isImplicit: boolean;
    isInherited: boolean;
    isOracleMaintained: boolean;
    isPasswordRequired: boolean;
    roleName: string;
}

export interface GetDataSafeTargetDatabaseRolesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDataSafeTargetDatabaseRolesRole {
    authenticationType: string;
    isCommon: boolean;
    isImplicit: boolean;
    isInherited: boolean;
    isOracleMaintained: boolean;
    isPasswordRequired: boolean;
    roleName: string;
}

export interface GetDataSafeTargetDatabaseTlsConfig {
    certificateStoreType: string;
    keyStoreContent: string;
    status: string;
    storePassword: string;
    trustStoreContent: string;
}

export interface GetDataSafeTargetDatabasesColumnsColumn {
    characterLength: number;
    columnName: string;
    dataType: string;
    length: string;
    precision: number;
    scale: number;
    schemaName: string;
    tableName: string;
}

export interface GetDataSafeTargetDatabasesColumnsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDataSafeTargetDatabasesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDataSafeTargetDatabasesSchemasFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDataSafeTargetDatabasesSchemasSchema {
    isOracleMaintained: boolean;
    schemaName: string;
}

export interface GetDataSafeTargetDatabasesTablesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDataSafeTargetDatabasesTablesTable {
    schemaName: string;
    tableName: string;
}

export interface GetDataSafeTargetDatabasesTargetDatabase {
    associatedResourceIds: string[];
    compartmentId: string;
    connectionOptions: outputs.GetDataSafeTargetDatabasesTargetDatabaseConnectionOption[];
    credentials: outputs.GetDataSafeTargetDatabasesTargetDatabaseCredential[];
    databaseDetails: outputs.GetDataSafeTargetDatabasesTargetDatabaseDatabaseDetail[];
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    lifecycleDetails: string;
    peerTargetDatabaseDetails: outputs.GetDataSafeTargetDatabasesTargetDatabasePeerTargetDatabaseDetail[];
    peerTargetDatabases: outputs.GetDataSafeTargetDatabasesTargetDatabasePeerTargetDatabase[];
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
    tlsConfigs: outputs.GetDataSafeTargetDatabasesTargetDatabaseTlsConfig[];
}

export interface GetDataSafeTargetDatabasesTargetDatabaseConnectionOption {
    connectionType: string;
    datasafePrivateEndpointId: string;
    onPremConnectorId: string;
}

export interface GetDataSafeTargetDatabasesTargetDatabaseCredential {
    password: string;
    userName: string;
}

export interface GetDataSafeTargetDatabasesTargetDatabaseDatabaseDetail {
    autonomousDatabaseId: string;
    databaseType: string;
    dbSystemId: string;
    infrastructureType: string;
    instanceId: string;
    ipAddresses: string[];
    listenerPort: number;
    serviceName: string;
    vmClusterId: string;
}

export interface GetDataSafeTargetDatabasesTargetDatabasePeerTargetDatabase {
    databaseDetails: outputs.GetDataSafeTargetDatabasesTargetDatabasePeerTargetDatabaseDatabaseDetail[];
    databaseUniqueName: string;
    dataguardAssociationId: string;
    description: string;
    displayName: string;
    key: number;
    lifecycleDetails: string;
    role: string;
    state: string;
    timeCreated: string;
    tlsConfigs: outputs.GetDataSafeTargetDatabasesTargetDatabasePeerTargetDatabaseTlsConfig[];
}

export interface GetDataSafeTargetDatabasesTargetDatabasePeerTargetDatabaseDatabaseDetail {
    autonomousDatabaseId: string;
    databaseType: string;
    dbSystemId: string;
    infrastructureType: string;
    instanceId: string;
    ipAddresses: string[];
    listenerPort: number;
    serviceName: string;
    vmClusterId: string;
}

export interface GetDataSafeTargetDatabasesTargetDatabasePeerTargetDatabaseDetail {
    databaseDetails: outputs.GetDataSafeTargetDatabasesTargetDatabasePeerTargetDatabaseDetailDatabaseDetail[];
    dataguardAssociationId: string;
    description: string;
    displayName: string;
    tlsConfigs: outputs.GetDataSafeTargetDatabasesTargetDatabasePeerTargetDatabaseDetailTlsConfig[];
}

export interface GetDataSafeTargetDatabasesTargetDatabasePeerTargetDatabaseDetailDatabaseDetail {
    autonomousDatabaseId: string;
    databaseType: string;
    dbSystemId: string;
    infrastructureType: string;
    instanceId: string;
    ipAddresses: string[];
    listenerPort: number;
    serviceName: string;
    vmClusterId: string;
}

export interface GetDataSafeTargetDatabasesTargetDatabasePeerTargetDatabaseDetailTlsConfig {
    certificateStoreType: string;
    keyStoreContent: string;
    status: string;
    storePassword: string;
    trustStoreContent: string;
}

export interface GetDataSafeTargetDatabasesTargetDatabasePeerTargetDatabaseTlsConfig {
    certificateStoreType: string;
    keyStoreContent: string;
    status: string;
    storePassword: string;
    trustStoreContent: string;
}

export interface GetDataSafeTargetDatabasesTargetDatabaseTlsConfig {
    certificateStoreType: string;
    keyStoreContent: string;
    status: string;
    storePassword: string;
    trustStoreContent: string;
}

export interface GetDataSafeUserAssessmentComparisonSummary {
    baselines: outputs.GetDataSafeUserAssessmentComparisonSummaryBaseline[];
    currents: outputs.GetDataSafeUserAssessmentComparisonSummaryCurrent[];
    status: string;
}

export interface GetDataSafeUserAssessmentComparisonSummaryBaseline {
    targetId: string;
    userAssessmentId: string;
}

export interface GetDataSafeUserAssessmentComparisonSummaryCurrent {
    targetId: string;
    userAssessmentId: string;
}

export interface GetDataSafeUserAssessmentIgnoredTarget {
    lifecycleState: string;
    targetId: string;
    userAssessmentId: string;
}

export interface GetDataSafeUserAssessmentProfileAnalyticsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDataSafeUserAssessmentProfileAnalyticsProfileAggregation {
    definedTags: {[key: string]: string};
    freeformTags: {[key: string]: string};
    items: {[key: string]: string}[];
}

export interface GetDataSafeUserAssessmentProfilesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDataSafeUserAssessmentProfilesProfile {
    compartmentId: string;
    compositeLimit: string;
    connectTime: string;
    cpuPerCall: string;
    cpuPerSession: string;
    definedTags: {[key: string]: string};
    failedLoginAttempts: string;
    freeformTags: {[key: string]: string};
    idleTime: string;
    inactiveAccountTime: string;
    isUserCreated: boolean;
    logicalReadsPerCall: string;
    logicalReadsPerSession: string;
    passwordGraceTime: string;
    passwordLifeTime: string;
    passwordLockTime: string;
    passwordReuseMax: string;
    passwordReuseTime: string;
    passwordRolloverTime: string;
    passwordVerificationFunction: string;
    passwordVerificationFunctionDetails: string;
    privateSga: string;
    profileName: string;
    sessionsPerUser: string;
    targetId: string;
    userAssessmentId: string;
    userCount: number;
}

export interface GetDataSafeUserAssessmentUserAccessAnalyticsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDataSafeUserAssessmentUserAccessAnalyticsUserAccessAnalyticsCollection {
    items: outputs.GetDataSafeUserAssessmentUserAccessAnalyticsUserAccessAnalyticsCollectionItem[];
}

export interface GetDataSafeUserAssessmentUserAccessAnalyticsUserAccessAnalyticsCollectionItem {
    userAssessmentUserAccessAnalyticCount: string;
    userName: string;
}

export interface GetDataSafeUserAssessmentUserAnalyticsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDataSafeUserAssessmentUserAnalyticsUserAggregation {
    items: outputs.GetDataSafeUserAssessmentUserAnalyticsUserAggregationItem[];
}

export interface GetDataSafeUserAssessmentUserAnalyticsUserAggregationItem {
}

export interface GetDataSafeUserAssessmentUsersFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDataSafeUserAssessmentUsersUser {
    accountStatus: string;
    adminRoles: string[];
    areAllSchemasAccessible: boolean;
    authenticationType: string;
    key: string;
    schemaLists: string[];
    targetId: string;
    timeLastLogin: string;
    timePasswordChanged: string;
    timeUserCreated: string;
    userCategory: string;
    userName: string;
    userProfile: string;
    userTypes: string[];
}

export interface GetDataSafeUserAssessmentsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDataSafeUserAssessmentsIgnoredTarget {
    lifecycleState: string;
    targetId: string;
    userAssessmentId: string;
}

export interface GetDataSafeUserAssessmentsUserAssessment {
    compartmentId: string;
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    ignoredAssessmentIds: string[];
    ignoredTargets: outputs.GetDataSafeUserAssessmentsUserAssessmentIgnoredTarget[];
    isAssessmentScheduled: boolean;
    isBaseline: boolean;
    isDeviatedFromBaseline: boolean;
    lastComparedBaselineId: string;
    lifecycleDetails: string;
    schedule: string;
    scheduleAssessmentId: string;
    state: string;
    statistics: string;
    systemTags: {[key: string]: string};
    targetId: string;
    targetIds: string[];
    timeCreated: string;
    timeLastAssessed: string;
    timeUpdated: string;
    triggeredBy: string;
    type: string;
}

export interface GetDataSafeUserAssessmentsUserAssessmentIgnoredTarget {
    lifecycleState: string;
    targetId: string;
    userAssessmentId: string;
}

export interface GetDatabaseApplicationVipsApplicationVip {
    cloudVmClusterId: string;
    compartmentId: string;
    dbNodeId: string;
    definedTags: {[key: string]: string};
    freeformTags: {[key: string]: string};
    hostnameLabel: string;
    id: string;
    ipAddress: string;
    lifecycleDetails: string;
    state: string;
    subnetId: string;
    timeAssigned: string;
}

export interface GetDatabaseApplicationVipsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseAutonomousContainerDatabaseBackupConfig {
    backupDestinationDetails: outputs.GetDatabaseAutonomousContainerDatabaseBackupConfigBackupDestinationDetail[];
    recoveryWindowInDays: number;
}

export interface GetDatabaseAutonomousContainerDatabaseBackupConfigBackupDestinationDetail {
    id: string;
    internetProxy: string;
    type: string;
    vpcPassword: string;
    vpcUser: string;
}

export interface GetDatabaseAutonomousContainerDatabaseDataguardAssociationPeerAutonomousContainerDatabaseBackupConfig {
    backupDestinationDetails: outputs.GetDatabaseAutonomousContainerDatabaseDataguardAssociationPeerAutonomousContainerDatabaseBackupConfigBackupDestinationDetail[];
    recoveryWindowInDays: number;
}

export interface GetDatabaseAutonomousContainerDatabaseDataguardAssociationPeerAutonomousContainerDatabaseBackupConfigBackupDestinationDetail {
    dbrsPolicyId: string;
    id: string;
    internetProxy: string;
    type: string;
    vpcPassword: string;
    vpcUser: string;
}

export interface GetDatabaseAutonomousContainerDatabaseDataguardAssociationsAutonomousContainerDatabaseDataguardAssociation {
    applyLag: string;
    applyRate: string;
    autonomousContainerDatabaseDataguardAssociationId: string;
    autonomousContainerDatabaseId: string;
    fastStartFailOverLagLimitInSeconds: number;
    id: string;
    isAutomaticFailoverEnabled: boolean;
    lifecycleDetails: string;
    peerAutonomousContainerDatabaseBackupConfigs: outputs.GetDatabaseAutonomousContainerDatabaseDataguardAssociationsAutonomousContainerDatabaseDataguardAssociationPeerAutonomousContainerDatabaseBackupConfig[];
    peerAutonomousContainerDatabaseCompartmentId: string;
    peerAutonomousContainerDatabaseDataguardAssociationId: string;
    peerAutonomousContainerDatabaseDisplayName: string;
    peerAutonomousContainerDatabaseId: string;
    peerAutonomousVmClusterId: string;
    peerCloudAutonomousVmClusterId: string;
    peerDbUniqueName: string;
    peerLifecycleState: string;
    peerRole: string;
    protectionMode: string;
    role: string;
    standbyMaintenanceBufferInDays: number;
    state: string;
    timeCreated: string;
    timeLastRoleChanged: string;
    timeLastSynced: string;
    transportLag: string;
}

export interface GetDatabaseAutonomousContainerDatabaseDataguardAssociationsAutonomousContainerDatabaseDataguardAssociationPeerAutonomousContainerDatabaseBackupConfig {
    backupDestinationDetails: outputs.GetDatabaseAutonomousContainerDatabaseDataguardAssociationsAutonomousContainerDatabaseDataguardAssociationPeerAutonomousContainerDatabaseBackupConfigBackupDestinationDetail[];
    recoveryWindowInDays: number;
}

export interface GetDatabaseAutonomousContainerDatabaseDataguardAssociationsAutonomousContainerDatabaseDataguardAssociationPeerAutonomousContainerDatabaseBackupConfigBackupDestinationDetail {
    dbrsPolicyId: string;
    id: string;
    internetProxy: string;
    type: string;
    vpcPassword: string;
    vpcUser: string;
}

export interface GetDatabaseAutonomousContainerDatabaseDataguardAssociationsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseAutonomousContainerDatabaseKeyHistoryEntry {
    id: string;
    kmsKeyVersionId: string;
    timeActivated: string;
    vaultId: string;
}

export interface GetDatabaseAutonomousContainerDatabaseMaintenanceWindow {
    customActionTimeoutInMins: number;
    daysOfWeeks: outputs.GetDatabaseAutonomousContainerDatabaseMaintenanceWindowDaysOfWeek[];
    hoursOfDays: number[];
    isCustomActionTimeoutEnabled: boolean;
    isMonthlyPatchingEnabled: boolean;
    leadTimeInWeeks: number;
    months: outputs.GetDatabaseAutonomousContainerDatabaseMaintenanceWindowMonth[];
    patchingMode: string;
    preference: string;
    skipRus: boolean[];
    weeksOfMonths: number[];
}

export interface GetDatabaseAutonomousContainerDatabaseMaintenanceWindowDaysOfWeek {
    name: string;
}

export interface GetDatabaseAutonomousContainerDatabaseMaintenanceWindowDetail {
    customActionTimeoutInMins: number;
    daysOfWeeks: outputs.GetDatabaseAutonomousContainerDatabaseMaintenanceWindowDetailDaysOfWeek[];
    hoursOfDays: number[];
    isCustomActionTimeoutEnabled: boolean;
    isMonthlyPatchingEnabled: boolean;
    leadTimeInWeeks: number;
    months: outputs.GetDatabaseAutonomousContainerDatabaseMaintenanceWindowDetailMonth[];
    patchingMode: string;
    preference: string;
    skipRus: boolean[];
    weeksOfMonths: number[];
}

export interface GetDatabaseAutonomousContainerDatabaseMaintenanceWindowDetailDaysOfWeek {
    name: string;
}

export interface GetDatabaseAutonomousContainerDatabaseMaintenanceWindowDetailMonth {
    name: string;
}

export interface GetDatabaseAutonomousContainerDatabaseMaintenanceWindowMonth {
    name: string;
}

export interface GetDatabaseAutonomousContainerDatabasePeerAutonomousContainerDatabaseBackupConfig {
    backupDestinationDetails: outputs.GetDatabaseAutonomousContainerDatabasePeerAutonomousContainerDatabaseBackupConfigBackupDestinationDetail[];
    recoveryWindowInDays: number;
}

export interface GetDatabaseAutonomousContainerDatabasePeerAutonomousContainerDatabaseBackupConfigBackupDestinationDetail {
    id: string;
    internetProxy: string;
    type: string;
    vpcPassword: string;
    vpcUser: string;
}

export interface GetDatabaseAutonomousContainerDatabaseResourceUsageAutonomousContainerDatabaseVmUsage {
    displayName: string;
    id: string;
    provisionedCpus: number;
    reclaimableCpus: number;
    reservedCpus: number;
    usedCpus: number;
}

export interface GetDatabaseAutonomousContainerDatabaseVersionsAutonomousContainerDatabaseVersion {
    details: string;
    supportedApps: outputs.GetDatabaseAutonomousContainerDatabaseVersionsAutonomousContainerDatabaseVersionSupportedApp[];
    version: string;
}

export interface GetDatabaseAutonomousContainerDatabaseVersionsAutonomousContainerDatabaseVersionSupportedApp {
    endOfSupport: string;
    isCertified: boolean;
    releaseDate: string;
    supportedAppName: string;
}

export interface GetDatabaseAutonomousContainerDatabaseVersionsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseAutonomousContainerDatabasesAutonomousContainerDatabase {
    autonomousExadataInfrastructureId: string;
    autonomousVmClusterId: string;
    availabilityDomain: string;
    availableCpus: number;
    backupConfigs: outputs.GetDatabaseAutonomousContainerDatabasesAutonomousContainerDatabaseBackupConfig[];
    cloudAutonomousVmClusterId: string;
    compartmentId: string;
    computeModel: string;
    databaseSoftwareImageId: string;
    dbName: string;
    dbSplitThreshold: number;
    dbUniqueName: string;
    dbVersion: string;
    definedTags: {[key: string]: string};
    displayName: string;
    distributionAffinity: string;
    dstFileVersion: string;
    fastStartFailOverLagLimitInSeconds: number;
    freeformTags: {[key: string]: string};
    id: string;
    infrastructureType: string;
    isAutomaticFailoverEnabled: boolean;
    isDstFileUpdateEnabled: boolean;
    keyHistoryEntries: outputs.GetDatabaseAutonomousContainerDatabasesAutonomousContainerDatabaseKeyHistoryEntry[];
    keyStoreId: string;
    keyStoreWalletName: string;
    kmsKeyId: string;
    largestProvisionableAutonomousDatabaseInCpus: number;
    lastMaintenanceRunId: string;
    lifecycleDetails: string;
    listOneOffPatches: string[];
    maintenanceWindowDetails: outputs.GetDatabaseAutonomousContainerDatabasesAutonomousContainerDatabaseMaintenanceWindowDetail[];
    maintenanceWindows: outputs.GetDatabaseAutonomousContainerDatabasesAutonomousContainerDatabaseMaintenanceWindow[];
    memoryPerOracleComputeUnitInGbs: number;
    netServicesArchitecture: string;
    nextMaintenanceRunId: string;
    patchId: string;
    patchModel: string;
    peerAutonomousContainerDatabaseBackupConfigs: outputs.GetDatabaseAutonomousContainerDatabasesAutonomousContainerDatabasePeerAutonomousContainerDatabaseBackupConfig[];
    peerAutonomousContainerDatabaseCompartmentId: string;
    peerAutonomousContainerDatabaseDisplayName: string;
    peerAutonomousExadataInfrastructureId: string;
    peerAutonomousVmClusterId: string;
    peerCloudAutonomousVmClusterId: string;
    peerDbUniqueName: string;
    protectionMode: string;
    provisionableCpuses: number[];
    provisionedCpus: number;
    reclaimableCpus: number;
    reservedCpus: number;
    role: string;
    rotateKeyTrigger: boolean;
    serviceLevelAgreementType: string;
    standbyMaintenanceBufferInDays: number;
    state: string;
    timeCreated: string;
    timeOfLastBackup: string;
    timeSnapshotStandbyRevert: string;
    totalCpus: number;
    vaultId: string;
    versionPreference: string;
    vmFailoverReservation: number;
}

export interface GetDatabaseAutonomousContainerDatabasesAutonomousContainerDatabaseBackupConfig {
    backupDestinationDetails: outputs.GetDatabaseAutonomousContainerDatabasesAutonomousContainerDatabaseBackupConfigBackupDestinationDetail[];
    recoveryWindowInDays: number;
}

export interface GetDatabaseAutonomousContainerDatabasesAutonomousContainerDatabaseBackupConfigBackupDestinationDetail {
    id: string;
    internetProxy: string;
    type: string;
    vpcPassword: string;
    vpcUser: string;
}

export interface GetDatabaseAutonomousContainerDatabasesAutonomousContainerDatabaseKeyHistoryEntry {
    id: string;
    kmsKeyVersionId: string;
    timeActivated: string;
    vaultId: string;
}

export interface GetDatabaseAutonomousContainerDatabasesAutonomousContainerDatabaseMaintenanceWindow {
    customActionTimeoutInMins: number;
    daysOfWeeks: outputs.GetDatabaseAutonomousContainerDatabasesAutonomousContainerDatabaseMaintenanceWindowDaysOfWeek[];
    hoursOfDays: number[];
    isCustomActionTimeoutEnabled: boolean;
    isMonthlyPatchingEnabled: boolean;
    leadTimeInWeeks: number;
    months: outputs.GetDatabaseAutonomousContainerDatabasesAutonomousContainerDatabaseMaintenanceWindowMonth[];
    patchingMode: string;
    preference: string;
    skipRus: boolean[];
    weeksOfMonths: number[];
}

export interface GetDatabaseAutonomousContainerDatabasesAutonomousContainerDatabaseMaintenanceWindowDaysOfWeek {
    name: string;
}

export interface GetDatabaseAutonomousContainerDatabasesAutonomousContainerDatabaseMaintenanceWindowDetail {
    customActionTimeoutInMins: number;
    daysOfWeeks: outputs.GetDatabaseAutonomousContainerDatabasesAutonomousContainerDatabaseMaintenanceWindowDetailDaysOfWeek[];
    hoursOfDays: number[];
    isCustomActionTimeoutEnabled: boolean;
    isMonthlyPatchingEnabled: boolean;
    leadTimeInWeeks: number;
    months: outputs.GetDatabaseAutonomousContainerDatabasesAutonomousContainerDatabaseMaintenanceWindowDetailMonth[];
    patchingMode: string;
    preference: string;
    skipRus: boolean[];
    weeksOfMonths: number[];
}

export interface GetDatabaseAutonomousContainerDatabasesAutonomousContainerDatabaseMaintenanceWindowDetailDaysOfWeek {
    name: string;
}

export interface GetDatabaseAutonomousContainerDatabasesAutonomousContainerDatabaseMaintenanceWindowDetailMonth {
    name: string;
}

export interface GetDatabaseAutonomousContainerDatabasesAutonomousContainerDatabaseMaintenanceWindowMonth {
    name: string;
}

export interface GetDatabaseAutonomousContainerDatabasesAutonomousContainerDatabasePeerAutonomousContainerDatabaseBackupConfig {
    backupDestinationDetails: outputs.GetDatabaseAutonomousContainerDatabasesAutonomousContainerDatabasePeerAutonomousContainerDatabaseBackupConfigBackupDestinationDetail[];
    recoveryWindowInDays: number;
}

export interface GetDatabaseAutonomousContainerDatabasesAutonomousContainerDatabasePeerAutonomousContainerDatabaseBackupConfigBackupDestinationDetail {
    id: string;
    internetProxy: string;
    type: string;
    vpcPassword: string;
    vpcUser: string;
}

export interface GetDatabaseAutonomousContainerDatabasesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseAutonomousContainerPatchesAutonomousPatch {
    autonomousPatchType: string;
    description: string;
    id: string;
    lifecycleDetails: string;
    patchModel: string;
    quarter: string;
    state: string;
    timeReleased: string;
    type: string;
    version: string;
    year: string;
}

export interface GetDatabaseAutonomousContainerPatchesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseAutonomousDatabaseApexDetail {
    apexVersion: string;
    ordsVersion: string;
}

export interface GetDatabaseAutonomousDatabaseBackupBackupDestinationDetail {
    id: string;
    internetProxy: string;
    type: string;
    vpcPassword: string;
    vpcUser: string;
}

export interface GetDatabaseAutonomousDatabaseBackupConfig {
    manualBackupBucketName: string;
    manualBackupType: string;
}

export interface GetDatabaseAutonomousDatabaseBackupsAutonomousDatabaseBackup {
    autonomousDatabaseId: string;
    backupDestinationDetails: outputs.GetDatabaseAutonomousDatabaseBackupsAutonomousDatabaseBackupBackupDestinationDetail[];
    compartmentId: string;
    databaseSizeInTbs: number;
    dbVersion: string;
    displayName: string;
    id: string;
    isAutomatic: boolean;
    isLongTermBackup: boolean;
    isRestorable: boolean;
    keyStoreId: string;
    keyStoreWalletName: string;
    kmsKeyId: string;
    kmsKeyVersionId: string;
    lifecycleDetails: string;
    retentionPeriodInDays: number;
    sizeInTbs: number;
    state: string;
    timeAvailableTill: string;
    timeEnded: string;
    timeStarted: string;
    type: string;
    vaultId: string;
}

export interface GetDatabaseAutonomousDatabaseBackupsAutonomousDatabaseBackupBackupDestinationDetail {
    id: string;
    internetProxy: string;
    type: string;
    vpcPassword: string;
    vpcUser: string;
}

export interface GetDatabaseAutonomousDatabaseBackupsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseAutonomousDatabaseCharacterSetsAutonomousDatabaseCharacterSet {
    name: string;
}

export interface GetDatabaseAutonomousDatabaseCharacterSetsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseAutonomousDatabaseConnectionString {
    allConnectionStrings: {[key: string]: string};
    dedicated: string;
    high: string;
    low: string;
    medium: string;
    profiles: outputs.GetDatabaseAutonomousDatabaseConnectionStringProfile[];
}

export interface GetDatabaseAutonomousDatabaseConnectionStringProfile {
    consumerGroup: string;
    displayName: string;
    hostFormat: string;
    isRegional: boolean;
    protocol: string;
    sessionMode: string;
    syntaxFormat: string;
    tlsAuthentication: string;
    value: string;
}

export interface GetDatabaseAutonomousDatabaseConnectionUrl {
    apexUrl: string;
    databaseTransformsUrl: string;
    graphStudioUrl: string;
    machineLearningNotebookUrl: string;
    machineLearningUserManagementUrl: string;
    mongoDbUrl: string;
    ordsUrl: string;
    sqlDevWebUrl: string;
}

export interface GetDatabaseAutonomousDatabaseCustomerContact {
    email: string;
}

export interface GetDatabaseAutonomousDatabaseDataguardAssociationsAutonomousDatabaseDataguardAssociation {
    applyLag: string;
    applyRate: string;
    autonomousDatabaseId: string;
    id: string;
    isAutomaticFailoverEnabled: boolean;
    lifecycleDetails: string;
    peerAutonomousDatabaseId: string;
    peerAutonomousDatabaseLifeCycleState: string;
    peerRole: string;
    protectionMode: string;
    role: string;
    state: string;
    timeCreated: string;
    timeLastRoleChanged: string;
    timeLastSynced: string;
    transportLag: string;
}

export interface GetDatabaseAutonomousDatabaseDataguardAssociationsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseAutonomousDatabaseDbToolsDetail {
    computeCount: number;
    isEnabled: boolean;
    maxIdleTimeInMinutes: number;
    name: string;
}

export interface GetDatabaseAutonomousDatabaseKeyHistoryEntry {
    id: string;
    kmsKeyVersionId: string;
    timeActivated: string;
    vaultId: string;
}

export interface GetDatabaseAutonomousDatabaseLocalStandbyDb {
    availabilityDomain: string;
    lagTimeInSeconds: number;
    lifecycleDetails: string;
    state: string;
    timeDataGuardRoleChanged: string;
    timeDisasterRecoveryRoleChanged: string;
}

export interface GetDatabaseAutonomousDatabaseLongTermBackupSchedule {
    isDisabled: boolean;
    repeatCadence: string;
    retentionPeriodInDays: number;
    timeOfBackup: string;
}

export interface GetDatabaseAutonomousDatabasePeersAutonomousDatabasePeerCollection {
    items: outputs.GetDatabaseAutonomousDatabasePeersAutonomousDatabasePeerCollectionItem[];
}

export interface GetDatabaseAutonomousDatabasePeersAutonomousDatabasePeerCollectionItem {
    id: string;
    region: string;
}

export interface GetDatabaseAutonomousDatabasePeersFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseAutonomousDatabasePublicConnectionUrl {
    apexUrl: string;
    databaseTransformsUrl: string;
    graphStudioUrl: string;
    machineLearningNotebookUrl: string;
    machineLearningUserManagementUrl: string;
    mongoDbUrl: string;
    ordsUrl: string;
    sqlDevWebUrl: string;
}

export interface GetDatabaseAutonomousDatabaseRefreshableClonesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseAutonomousDatabaseRefreshableClonesRefreshableCloneCollection {
    items: outputs.GetDatabaseAutonomousDatabaseRefreshableClonesRefreshableCloneCollectionItem[];
}

export interface GetDatabaseAutonomousDatabaseRefreshableClonesRefreshableCloneCollectionItem {
    id: string;
    region: string;
}

export interface GetDatabaseAutonomousDatabaseRemoteDisasterRecoveryConfiguration {
    disasterRecoveryType: string;
    isReplicateAutomaticBackups: boolean;
    isSnapshotStandby: boolean;
    timeSnapshotStandbyEnabledTill: string;
}

export interface GetDatabaseAutonomousDatabaseResourcePoolSummary {
    isDisabled: boolean;
    poolSize: number;
}

export interface GetDatabaseAutonomousDatabaseScheduledOperation {
    dayOfWeeks: outputs.GetDatabaseAutonomousDatabaseScheduledOperationDayOfWeek[];
    scheduledStartTime: string;
    scheduledStopTime: string;
}

export interface GetDatabaseAutonomousDatabaseScheduledOperationDayOfWeek {
    name: string;
}

export interface GetDatabaseAutonomousDatabaseSoftwareImagesAutonomousDatabaseSoftwareImageCollection {
    items: outputs.GetDatabaseAutonomousDatabaseSoftwareImagesAutonomousDatabaseSoftwareImageCollectionItem[];
}

export interface GetDatabaseAutonomousDatabaseSoftwareImagesAutonomousDatabaseSoftwareImageCollectionItem {
    autonomousDsiOneOffPatches: string[];
    compartmentId: string;
    databaseVersion: string;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    imageShapeFamily: string;
    lifecycleDetails: string;
    releaseUpdate: string;
    sourceCdbId: string;
    state: string;
    timeCreated: string;
}

export interface GetDatabaseAutonomousDatabaseSoftwareImagesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseAutonomousDatabaseStandbyDb {
    availabilityDomain: string;
    lagTimeInSeconds: number;
    lifecycleDetails: string;
    state: string;
    timeDataGuardRoleChanged: string;
    timeDisasterRecoveryRoleChanged: string;
}

export interface GetDatabaseAutonomousDatabasesAutonomousDatabase {
    actualUsedDataStorageSizeInTbs: number;
    adminPassword: string;
    allocatedStorageSizeInTbs: number;
    apexDetails: outputs.GetDatabaseAutonomousDatabasesAutonomousDatabaseApexDetail[];
    arePrimaryWhitelistedIpsUsed: boolean;
    autoRefreshFrequencyInSeconds: number;
    autoRefreshPointLagInSeconds: number;
    autonomousContainerDatabaseId: string;
    autonomousDatabaseBackupId: string;
    autonomousDatabaseId: string;
    autonomousMaintenanceScheduleType: string;
    availabilityDomain: string;
    availableUpgradeVersions: string[];
    backupConfigs: outputs.GetDatabaseAutonomousDatabasesAutonomousDatabaseBackupConfig[];
    backupRetentionPeriodInDays: number;
    byolComputeCountLimit: number;
    characterSet: string;
    cloneType: string;
    clusterPlacementGroupId: string;
    compartmentId: string;
    computeCount: number;
    computeModel: string;
    connectionStrings: outputs.GetDatabaseAutonomousDatabasesAutonomousDatabaseConnectionString[];
    connectionUrls: outputs.GetDatabaseAutonomousDatabasesAutonomousDatabaseConnectionUrl[];
    cpuCoreCount: number;
    customerContacts: outputs.GetDatabaseAutonomousDatabasesAutonomousDatabaseCustomerContact[];
    dataSafeStatus: string;
    dataStorageSizeInGb: number;
    dataStorageSizeInTbs: number;
    databaseEdition: string;
    databaseManagementStatus: string;
    dataguardRegionType: string;
    dbName: string;
    dbToolsDetails: outputs.GetDatabaseAutonomousDatabasesAutonomousDatabaseDbToolsDetail[];
    dbVersion: string;
    dbWorkload: string;
    definedTags: {[key: string]: string};
    disasterRecoveryRegionType: string;
    disasterRecoveryType: string;
    displayName: string;
    failedDataRecoveryInSeconds: number;
    freeformTags: {[key: string]: string};
    id: string;
    inMemoryAreaInGbs: number;
    inMemoryPercentage: number;
    infrastructureType: string;
    isAccessControlEnabled: boolean;
    isAutoScalingEnabled: boolean;
    isAutoScalingForStorageEnabled: boolean;
    isDataGuardEnabled: boolean;
    isDedicated: boolean;
    isDevTier: boolean;
    isFreeTier: boolean;
    isLocalDataGuardEnabled: boolean;
    isMtlsConnectionRequired: boolean;
    isPreview: boolean;
    isPreviewVersionWithServiceTermsAccepted: boolean;
    isReconnectCloneEnabled: boolean;
    isRefreshableClone: boolean;
    isRemoteDataGuardEnabled: boolean;
    isReplicateAutomaticBackups: boolean;
    isShrinkOnly: boolean;
    keyHistoryEntries: outputs.GetDatabaseAutonomousDatabasesAutonomousDatabaseKeyHistoryEntry[];
    keyStoreId: string;
    keyStoreWalletName: string;
    kmsKeyId: string;
    kmsKeyLifecycleDetails: string;
    kmsKeyVersionId: string;
    licenseModel: string;
    lifecycleDetails: string;
    localAdgAutoFailoverMaxDataLossLimit: number;
    localDisasterRecoveryType: string;
    localStandbyDbs: outputs.GetDatabaseAutonomousDatabasesAutonomousDatabaseLocalStandbyDb[];
    longTermBackupSchedules: outputs.GetDatabaseAutonomousDatabasesAutonomousDatabaseLongTermBackupSchedule[];
    maxCpuCoreCount: number;
    memoryPerOracleComputeUnitInGbs: number;
    ncharacterSet: string;
    netServicesArchitecture: string;
    nextLongTermBackupTimeStamp: string;
    nsgIds: string[];
    ocpuCount: number;
    openMode: string;
    operationsInsightsStatus: string;
    peerDbIds: string[];
    permissionLevel: string;
    privateEndpoint: string;
    privateEndpointIp: string;
    privateEndpointLabel: string;
    provisionableCpuses: number[];
    publicConnectionUrls: outputs.GetDatabaseAutonomousDatabasesAutonomousDatabasePublicConnectionUrl[];
    publicEndpoint: string;
    refreshableMode: string;
    refreshableStatus: string;
    remoteDisasterRecoveryConfigurations: outputs.GetDatabaseAutonomousDatabasesAutonomousDatabaseRemoteDisasterRecoveryConfiguration[];
    remoteDisasterRecoveryType: string;
    resourcePoolLeaderId: string;
    resourcePoolSummaries: outputs.GetDatabaseAutonomousDatabasesAutonomousDatabaseResourcePoolSummary[];
    role: string;
    rotateKeyTrigger: boolean;
    scheduledOperations: outputs.GetDatabaseAutonomousDatabasesAutonomousDatabaseScheduledOperation[];
    secretId: string;
    secretVersionNumber: number;
    serviceConsoleUrl: string;
    shrinkAdbTrigger: number;
    source: string;
    sourceId: string;
    standbyDbs: outputs.GetDatabaseAutonomousDatabasesAutonomousDatabaseStandbyDb[];
    standbyWhitelistedIps: string[];
    state: string;
    subnetId: string;
    subscriptionId: string;
    supportedRegionsToCloneTos: string[];
    switchoverTo: string;
    switchoverToRemotePeerId: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeDataGuardRoleChanged: string;
    timeDeletionOfFreeAutonomousDatabase: string;
    timeDisasterRecoveryRoleChanged: string;
    timeLocalDataGuardEnabled: string;
    timeMaintenanceBegin: string;
    timeMaintenanceEnd: string;
    timeOfAutoRefreshStart: string;
    timeOfJoiningResourcePool: string;
    timeOfLastFailover: string;
    timeOfLastRefresh: string;
    timeOfLastRefreshPoint: string;
    timeOfLastSwitchover: string;
    timeOfNextRefresh: string;
    timeReclamationOfFreeAutonomousDatabase: string;
    timeUntilReconnectCloneEnabled: string;
    timestamp: string;
    totalBackupStorageSizeInGbs: number;
    useLatestAvailableBackupTimeStamp: boolean;
    usedDataStorageSizeInGbs: number;
    usedDataStorageSizeInTbs: number;
    vaultId: string;
    whitelistedIps: string[];
}

export interface GetDatabaseAutonomousDatabasesAutonomousDatabaseApexDetail {
    apexVersion: string;
    ordsVersion: string;
}

export interface GetDatabaseAutonomousDatabasesAutonomousDatabaseBackupConfig {
    manualBackupBucketName: string;
    manualBackupType: string;
}

export interface GetDatabaseAutonomousDatabasesAutonomousDatabaseConnectionString {
    allConnectionStrings: {[key: string]: string};
    dedicated: string;
    high: string;
    low: string;
    medium: string;
    profiles: outputs.GetDatabaseAutonomousDatabasesAutonomousDatabaseConnectionStringProfile[];
}

export interface GetDatabaseAutonomousDatabasesAutonomousDatabaseConnectionStringProfile {
    consumerGroup: string;
    displayName: string;
    hostFormat: string;
    isRegional: boolean;
    protocol: string;
    sessionMode: string;
    syntaxFormat: string;
    tlsAuthentication: string;
    value: string;
}

export interface GetDatabaseAutonomousDatabasesAutonomousDatabaseConnectionUrl {
    apexUrl: string;
    databaseTransformsUrl: string;
    graphStudioUrl: string;
    machineLearningNotebookUrl: string;
    machineLearningUserManagementUrl: string;
    mongoDbUrl: string;
    ordsUrl: string;
    sqlDevWebUrl: string;
}

export interface GetDatabaseAutonomousDatabasesAutonomousDatabaseCustomerContact {
    email: string;
}

export interface GetDatabaseAutonomousDatabasesAutonomousDatabaseDbToolsDetail {
    computeCount: number;
    isEnabled: boolean;
    maxIdleTimeInMinutes: number;
    name: string;
}

export interface GetDatabaseAutonomousDatabasesAutonomousDatabaseKeyHistoryEntry {
    id: string;
    kmsKeyVersionId: string;
    timeActivated: string;
    vaultId: string;
}

export interface GetDatabaseAutonomousDatabasesAutonomousDatabaseLocalStandbyDb {
    availabilityDomain: string;
    lagTimeInSeconds: number;
    lifecycleDetails: string;
    state: string;
    timeDataGuardRoleChanged: string;
    timeDisasterRecoveryRoleChanged: string;
}

export interface GetDatabaseAutonomousDatabasesAutonomousDatabaseLongTermBackupSchedule {
    isDisabled: boolean;
    repeatCadence: string;
    retentionPeriodInDays: number;
    timeOfBackup: string;
}

export interface GetDatabaseAutonomousDatabasesAutonomousDatabasePublicConnectionUrl {
    apexUrl: string;
    databaseTransformsUrl: string;
    graphStudioUrl: string;
    machineLearningNotebookUrl: string;
    machineLearningUserManagementUrl: string;
    mongoDbUrl: string;
    ordsUrl: string;
    sqlDevWebUrl: string;
}

export interface GetDatabaseAutonomousDatabasesAutonomousDatabaseRemoteDisasterRecoveryConfiguration {
    disasterRecoveryType: string;
    isReplicateAutomaticBackups: boolean;
    isSnapshotStandby: boolean;
    timeSnapshotStandbyEnabledTill: string;
}

export interface GetDatabaseAutonomousDatabasesAutonomousDatabaseResourcePoolSummary {
    isDisabled: boolean;
    poolSize: number;
}

export interface GetDatabaseAutonomousDatabasesAutonomousDatabaseScheduledOperation {
    dayOfWeeks: outputs.GetDatabaseAutonomousDatabasesAutonomousDatabaseScheduledOperationDayOfWeek[];
    scheduledStartTime: string;
    scheduledStopTime: string;
}

export interface GetDatabaseAutonomousDatabasesAutonomousDatabaseScheduledOperationDayOfWeek {
    name: string;
}

export interface GetDatabaseAutonomousDatabasesAutonomousDatabaseStandbyDb {
    availabilityDomain: string;
    lagTimeInSeconds: number;
    lifecycleDetails: string;
    state: string;
    timeDataGuardRoleChanged: string;
    timeDisasterRecoveryRoleChanged: string;
}

export interface GetDatabaseAutonomousDatabasesClonesAutonomousDatabase {
    actualUsedDataStorageSizeInTbs: number;
    allocatedStorageSizeInTbs: number;
    apexDetails: outputs.GetDatabaseAutonomousDatabasesClonesAutonomousDatabaseApexDetail[];
    arePrimaryWhitelistedIpsUsed: boolean;
    autoRefreshFrequencyInSeconds: number;
    autoRefreshPointLagInSeconds: number;
    autonomousContainerDatabaseId: string;
    autonomousMaintenanceScheduleType: string;
    availabilityDomain: string;
    availableUpgradeVersions: string[];
    backupConfigs: outputs.GetDatabaseAutonomousDatabasesClonesAutonomousDatabaseBackupConfig[];
    backupRetentionPeriodInDays: number;
    byolComputeCountLimit: number;
    characterSet: string;
    clusterPlacementGroupId: string;
    compartmentId: string;
    computeCount: number;
    computeModel: string;
    connectionStrings: outputs.GetDatabaseAutonomousDatabasesClonesAutonomousDatabaseConnectionString[];
    connectionUrls: outputs.GetDatabaseAutonomousDatabasesClonesAutonomousDatabaseConnectionUrl[];
    cpuCoreCount: number;
    customerContacts: outputs.GetDatabaseAutonomousDatabasesClonesAutonomousDatabaseCustomerContact[];
    dataSafeStatus: string;
    dataStorageSizeInGb: number;
    dataStorageSizeInTbs: number;
    databaseEdition: string;
    databaseManagementStatus: string;
    dataguardRegionType: string;
    dbName: string;
    dbToolsDetails: outputs.GetDatabaseAutonomousDatabasesClonesAutonomousDatabaseDbToolsDetail[];
    dbVersion: string;
    dbWorkload: string;
    definedTags: {[key: string]: string};
    disasterRecoveryRegionType: string;
    displayName: string;
    failedDataRecoveryInSeconds: number;
    freeformTags: {[key: string]: string};
    id: string;
    inMemoryAreaInGbs: number;
    inMemoryPercentage: number;
    infrastructureType: string;
    isAccessControlEnabled: boolean;
    isAutoScalingEnabled: boolean;
    isAutoScalingForStorageEnabled: boolean;
    isDataGuardEnabled: boolean;
    isDedicated: boolean;
    isDevTier: boolean;
    isFreeTier: boolean;
    isLocalDataGuardEnabled: boolean;
    isMtlsConnectionRequired: boolean;
    isPreview: boolean;
    isReconnectCloneEnabled: boolean;
    isRefreshableClone: boolean;
    isRemoteDataGuardEnabled: boolean;
    keyHistoryEntries: outputs.GetDatabaseAutonomousDatabasesClonesAutonomousDatabaseKeyHistoryEntry[];
    keyStoreId: string;
    keyStoreWalletName: string;
    kmsKeyId: string;
    kmsKeyLifecycleDetails: string;
    kmsKeyVersionId: string;
    licenseModel: string;
    lifecycleDetails: string;
    localAdgAutoFailoverMaxDataLossLimit: number;
    localDisasterRecoveryType: string;
    localStandbyDbs: outputs.GetDatabaseAutonomousDatabasesClonesAutonomousDatabaseLocalStandbyDb[];
    longTermBackupSchedules: outputs.GetDatabaseAutonomousDatabasesClonesAutonomousDatabaseLongTermBackupSchedule[];
    maxCpuCoreCount: number;
    memoryPerOracleComputeUnitInGbs: number;
    ncharacterSet: string;
    netServicesArchitecture: string;
    nextLongTermBackupTimeStamp: string;
    nsgIds: string[];
    ocpuCount: number;
    openMode: string;
    peerDbIds: string[];
    privateEndpoint: string;
    privateEndpointIp: string;
    privateEndpointLabel: string;
    provisionableCpuses: number[];
    publicConnectionUrls: outputs.GetDatabaseAutonomousDatabasesClonesAutonomousDatabasePublicConnectionUrl[];
    publicEndpoint: string;
    refreshableMode: string;
    refreshableStatus: string;
    remoteDisasterRecoveryConfigurations: outputs.GetDatabaseAutonomousDatabasesClonesAutonomousDatabaseRemoteDisasterRecoveryConfiguration[];
    resourcePoolLeaderId: string;
    resourcePoolSummaries: outputs.GetDatabaseAutonomousDatabasesClonesAutonomousDatabaseResourcePoolSummary[];
    role: string;
    scheduledOperations: outputs.GetDatabaseAutonomousDatabasesClonesAutonomousDatabaseScheduledOperation[];
    serviceConsoleUrl: string;
    sourceId: string;
    standbyDbs: outputs.GetDatabaseAutonomousDatabasesClonesAutonomousDatabaseStandbyDb[];
    standbyWhitelistedIps: string[];
    state: string;
    subnetId: string;
    subscriptionId: string;
    supportedRegionsToCloneTos: string[];
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeDataGuardRoleChanged: string;
    timeDeletionOfFreeAutonomousDatabase: string;
    timeDisasterRecoveryRoleChanged: string;
    timeLocalDataGuardEnabled: string;
    timeMaintenanceBegin: string;
    timeMaintenanceEnd: string;
    timeOfAutoRefreshStart: string;
    timeOfJoiningResourcePool: string;
    timeOfLastFailover: string;
    timeOfLastRefresh: string;
    timeOfLastRefreshPoint: string;
    timeOfLastSwitchover: string;
    timeOfNextRefresh: string;
    timeReclamationOfFreeAutonomousDatabase: string;
    timeUntilReconnectCloneEnabled: string;
    totalBackupStorageSizeInGbs: number;
    usedDataStorageSizeInGbs: number;
    usedDataStorageSizeInTbs: number;
    vaultId: string;
    whitelistedIps: string[];
}

export interface GetDatabaseAutonomousDatabasesClonesAutonomousDatabaseApexDetail {
    apexVersion: string;
    ordsVersion: string;
}

export interface GetDatabaseAutonomousDatabasesClonesAutonomousDatabaseBackupConfig {
    manualBackupBucketName: string;
    manualBackupType: string;
}

export interface GetDatabaseAutonomousDatabasesClonesAutonomousDatabaseConnectionString {
    allConnectionStrings: {[key: string]: string};
    dedicated: string;
    high: string;
    low: string;
    medium: string;
    profiles: outputs.GetDatabaseAutonomousDatabasesClonesAutonomousDatabaseConnectionStringProfile[];
}

export interface GetDatabaseAutonomousDatabasesClonesAutonomousDatabaseConnectionStringProfile {
    consumerGroup: string;
    displayName: string;
    hostFormat: string;
    isRegional: boolean;
    protocol: string;
    sessionMode: string;
    syntaxFormat: string;
    tlsAuthentication: string;
    value: string;
}

export interface GetDatabaseAutonomousDatabasesClonesAutonomousDatabaseConnectionUrl {
    apexUrl: string;
    databaseTransformsUrl: string;
    graphStudioUrl: string;
    machineLearningNotebookUrl: string;
    machineLearningUserManagementUrl: string;
    mongoDbUrl: string;
    ordsUrl: string;
    sqlDevWebUrl: string;
}

export interface GetDatabaseAutonomousDatabasesClonesAutonomousDatabaseCustomerContact {
    email: string;
}

export interface GetDatabaseAutonomousDatabasesClonesAutonomousDatabaseDbToolsDetail {
    computeCount: number;
    isEnabled: boolean;
    maxIdleTimeInMinutes: number;
    name: string;
}

export interface GetDatabaseAutonomousDatabasesClonesAutonomousDatabaseKeyHistoryEntry {
    id: string;
    kmsKeyVersionId: string;
    timeActivated: string;
    vaultId: string;
}

export interface GetDatabaseAutonomousDatabasesClonesAutonomousDatabaseLocalStandbyDb {
    availabilityDomain: string;
    lagTimeInSeconds: number;
    lifecycleDetails: string;
    state: string;
    timeDataGuardRoleChanged: string;
    timeDisasterRecoveryRoleChanged: string;
}

export interface GetDatabaseAutonomousDatabasesClonesAutonomousDatabaseLongTermBackupSchedule {
    isDisabled: boolean;
    repeatCadence: string;
    retentionPeriodInDays: number;
    timeOfBackup: string;
}

export interface GetDatabaseAutonomousDatabasesClonesAutonomousDatabasePublicConnectionUrl {
    apexUrl: string;
    databaseTransformsUrl: string;
    graphStudioUrl: string;
    machineLearningNotebookUrl: string;
    machineLearningUserManagementUrl: string;
    mongoDbUrl: string;
    ordsUrl: string;
    sqlDevWebUrl: string;
}

export interface GetDatabaseAutonomousDatabasesClonesAutonomousDatabaseRemoteDisasterRecoveryConfiguration {
    disasterRecoveryType: string;
    isReplicateAutomaticBackups: boolean;
    isSnapshotStandby: boolean;
    timeSnapshotStandbyEnabledTill: string;
}

export interface GetDatabaseAutonomousDatabasesClonesAutonomousDatabaseResourcePoolSummary {
    isDisabled: boolean;
    poolSize: number;
}

export interface GetDatabaseAutonomousDatabasesClonesAutonomousDatabaseScheduledOperation {
    dayOfWeeks: outputs.GetDatabaseAutonomousDatabasesClonesAutonomousDatabaseScheduledOperationDayOfWeek[];
    scheduledStartTime: string;
    scheduledStopTime: string;
}

export interface GetDatabaseAutonomousDatabasesClonesAutonomousDatabaseScheduledOperationDayOfWeek {
    name: string;
}

export interface GetDatabaseAutonomousDatabasesClonesAutonomousDatabaseStandbyDb {
    availabilityDomain: string;
    lagTimeInSeconds: number;
    lifecycleDetails: string;
    state: string;
    timeDataGuardRoleChanged: string;
    timeDisasterRecoveryRoleChanged: string;
}

export interface GetDatabaseAutonomousDatabasesClonesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseAutonomousDatabasesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseAutonomousDbPreviewVersionsAutonomousDbPreviewVersion {
    dbWorkload: string;
    details: string;
    timePreviewBegin: string;
    timePreviewEnd: string;
    version: string;
}

export interface GetDatabaseAutonomousDbPreviewVersionsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseAutonomousDbVersionsAutonomousDbVersion {
    dbWorkload: string;
    details: string;
    isDedicated: boolean;
    isDefaultForFree: boolean;
    isDefaultForPaid: boolean;
    isFreeTierEnabled: boolean;
    isPaidEnabled: boolean;
    version: string;
}

export interface GetDatabaseAutonomousDbVersionsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseAutonomousExadataInfrastructureMaintenanceWindow {
    customActionTimeoutInMins: number;
    daysOfWeeks: outputs.GetDatabaseAutonomousExadataInfrastructureMaintenanceWindowDaysOfWeek[];
    hoursOfDays: number[];
    isCustomActionTimeoutEnabled: boolean;
    isMonthlyPatchingEnabled: boolean;
    leadTimeInWeeks: number;
    months: outputs.GetDatabaseAutonomousExadataInfrastructureMaintenanceWindowMonth[];
    patchingMode: string;
    preference: string;
    skipRus: boolean[];
    weeksOfMonths: number[];
}

export interface GetDatabaseAutonomousExadataInfrastructureMaintenanceWindowDaysOfWeek {
    name: string;
}

export interface GetDatabaseAutonomousExadataInfrastructureMaintenanceWindowDetail {
    customActionTimeoutInMins: number;
    daysOfWeeks: outputs.GetDatabaseAutonomousExadataInfrastructureMaintenanceWindowDetailDaysOfWeek[];
    hoursOfDays: number[];
    isCustomActionTimeoutEnabled: boolean;
    isMonthlyPatchingEnabled: boolean;
    leadTimeInWeeks: number;
    months: outputs.GetDatabaseAutonomousExadataInfrastructureMaintenanceWindowDetailMonth[];
    patchingMode: string;
    preference: string;
    skipRus: boolean[];
    weeksOfMonths: number[];
}

export interface GetDatabaseAutonomousExadataInfrastructureMaintenanceWindowDetailDaysOfWeek {
    name: string;
}

export interface GetDatabaseAutonomousExadataInfrastructureMaintenanceWindowDetailMonth {
    name: string;
}

export interface GetDatabaseAutonomousExadataInfrastructureMaintenanceWindowMonth {
    name: string;
}

export interface GetDatabaseAutonomousExadataInfrastructureOcpuByWorkloadType {
    adw: number;
    atp: number;
}

export interface GetDatabaseAutonomousExadataInfrastructureShapesAutonomousExadataInfrastructureShape {
    availableCoreCount: number;
    coreCountIncrement: number;
    maximumNodeCount: number;
    minimumCoreCount: number;
    minimumNodeCount: number;
    name: string;
}

export interface GetDatabaseAutonomousExadataInfrastructureShapesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseAutonomousExadataInfrastructuresAutonomousExadataInfrastructure {
    availabilityDomain: string;
    compartmentId: string;
    createAsync: boolean;
    definedTags: {[key: string]: string};
    displayName: string;
    domain: string;
    freeformTags: {[key: string]: string};
    hostname: string;
    id: string;
    lastMaintenanceRunId: string;
    licenseModel: string;
    lifecycleDetails: string;
    maintenanceWindowDetails: outputs.GetDatabaseAutonomousExadataInfrastructuresAutonomousExadataInfrastructureMaintenanceWindowDetail[];
    maintenanceWindows: outputs.GetDatabaseAutonomousExadataInfrastructuresAutonomousExadataInfrastructureMaintenanceWindow[];
    nextMaintenanceRunId: string;
    nsgIds: string[];
    scanDnsName: string;
    shape: string;
    state: string;
    subnetId: string;
    timeCreated: string;
    zoneId: string;
}

export interface GetDatabaseAutonomousExadataInfrastructuresAutonomousExadataInfrastructureMaintenanceWindow {
    customActionTimeoutInMins: number;
    daysOfWeeks: outputs.GetDatabaseAutonomousExadataInfrastructuresAutonomousExadataInfrastructureMaintenanceWindowDaysOfWeek[];
    hoursOfDays: number[];
    isCustomActionTimeoutEnabled: boolean;
    isMonthlyPatchingEnabled: boolean;
    leadTimeInWeeks: number;
    months: outputs.GetDatabaseAutonomousExadataInfrastructuresAutonomousExadataInfrastructureMaintenanceWindowMonth[];
    patchingMode: string;
    preference: string;
    skipRus: boolean[];
    weeksOfMonths: number[];
}

export interface GetDatabaseAutonomousExadataInfrastructuresAutonomousExadataInfrastructureMaintenanceWindowDaysOfWeek {
    name: string;
}

export interface GetDatabaseAutonomousExadataInfrastructuresAutonomousExadataInfrastructureMaintenanceWindowDetail {
    customActionTimeoutInMins: number;
    daysOfWeeks: outputs.GetDatabaseAutonomousExadataInfrastructuresAutonomousExadataInfrastructureMaintenanceWindowDetailDaysOfWeek[];
    hoursOfDays: number[];
    isCustomActionTimeoutEnabled: boolean;
    isMonthlyPatchingEnabled: boolean;
    leadTimeInWeeks: number;
    months: outputs.GetDatabaseAutonomousExadataInfrastructuresAutonomousExadataInfrastructureMaintenanceWindowDetailMonth[];
    patchingMode: string;
    preference: string;
    skipRus: boolean[];
    weeksOfMonths: number[];
}

export interface GetDatabaseAutonomousExadataInfrastructuresAutonomousExadataInfrastructureMaintenanceWindowDetailDaysOfWeek {
    name: string;
}

export interface GetDatabaseAutonomousExadataInfrastructuresAutonomousExadataInfrastructureMaintenanceWindowDetailMonth {
    name: string;
}

export interface GetDatabaseAutonomousExadataInfrastructuresAutonomousExadataInfrastructureMaintenanceWindowMonth {
    name: string;
}

export interface GetDatabaseAutonomousExadataInfrastructuresFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseAutonomousVirtualMachinesAutonomousVirtualMachine {
    autonomousVmClusterId: string;
    clientIpAddress: string;
    compartmentId: string;
    cpuCoreCount: number;
    dbNodeStorageSizeInGbs: number;
    dbServerDisplayName: string;
    dbServerId: string;
    definedTags: {[key: string]: string};
    freeformTags: {[key: string]: string};
    id: string;
    memorySizeInGbs: number;
    state: string;
    vmName: string;
}

export interface GetDatabaseAutonomousVirtualMachinesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseAutonomousVmClusterAcdResourceUsagesAutonomousContainerDatabaseResourceUsage {
    autonomousContainerDatabaseVmUsages: outputs.GetDatabaseAutonomousVmClusterAcdResourceUsagesAutonomousContainerDatabaseResourceUsageAutonomousContainerDatabaseVmUsage[];
    availableCpus: number;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    largestProvisionableAutonomousDatabaseInCpus: number;
    provisionableCpuses: number[];
    provisionedCpus: number;
    reclaimableCpus: number;
    reservedCpus: number;
    usedCpus: number;
}

export interface GetDatabaseAutonomousVmClusterAcdResourceUsagesAutonomousContainerDatabaseResourceUsageAutonomousContainerDatabaseVmUsage {
    displayName: string;
    id: string;
    provisionedCpus: number;
    reclaimableCpus: number;
    reservedCpus: number;
    usedCpus: number;
}

export interface GetDatabaseAutonomousVmClusterAcdResourceUsagesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseAutonomousVmClusterMaintenanceWindow {
    customActionTimeoutInMins: number;
    daysOfWeeks: outputs.GetDatabaseAutonomousVmClusterMaintenanceWindowDaysOfWeek[];
    hoursOfDays: number[];
    isCustomActionTimeoutEnabled: boolean;
    isMonthlyPatchingEnabled: boolean;
    leadTimeInWeeks: number;
    months: outputs.GetDatabaseAutonomousVmClusterMaintenanceWindowMonth[];
    patchingMode: string;
    preference: string;
    skipRus: boolean[];
    weeksOfMonths: number[];
}

export interface GetDatabaseAutonomousVmClusterMaintenanceWindowDaysOfWeek {
    name: string;
}

export interface GetDatabaseAutonomousVmClusterMaintenanceWindowDetail {
    customActionTimeoutInMins: number;
    daysOfWeeks: outputs.GetDatabaseAutonomousVmClusterMaintenanceWindowDetailDaysOfWeek[];
    hoursOfDays: number[];
    isCustomActionTimeoutEnabled: boolean;
    isMonthlyPatchingEnabled: boolean;
    leadTimeInWeeks: number;
    months: outputs.GetDatabaseAutonomousVmClusterMaintenanceWindowDetailMonth[];
    patchingMode: string;
    preference: string;
    skipRus: boolean[];
    weeksOfMonths: number[];
}

export interface GetDatabaseAutonomousVmClusterMaintenanceWindowDetailDaysOfWeek {
    name: string;
}

export interface GetDatabaseAutonomousVmClusterMaintenanceWindowDetailMonth {
    name: string;
}

export interface GetDatabaseAutonomousVmClusterMaintenanceWindowMonth {
    name: string;
}

export interface GetDatabaseAutonomousVmClusterResourceUsageAutonomousVmResourceUsage {
    autonomousContainerDatabaseUsages: outputs.GetDatabaseAutonomousVmClusterResourceUsageAutonomousVmResourceUsageAutonomousContainerDatabaseUsage[];
    availableCpus: number;
    displayName: string;
    id: string;
    provisionedCpus: number;
    reclaimableCpus: number;
    reservedCpus: number;
    usedCpus: number;
}

export interface GetDatabaseAutonomousVmClusterResourceUsageAutonomousVmResourceUsageAutonomousContainerDatabaseUsage {
    availableCpus: number;
    displayName: string;
    id: string;
    provisionedCpus: number;
    reclaimableCpus: number;
    reservedCpus: number;
    usedCpus: number;
}

export interface GetDatabaseAutonomousVmClustersAutonomousVmCluster {
    autonomousDataStoragePercentage: number;
    autonomousDataStorageSizeInTbs: number;
    availableAutonomousDataStorageSizeInTbs: number;
    availableContainerDatabases: number;
    availableCpus: number;
    availableDataStorageSizeInTbs: number;
    compartmentId: string;
    computeModel: string;
    cpuCoreCountPerNode: number;
    cpuPercentage: number;
    cpusEnabled: number;
    cpusLowestScaledValue: number;
    dataStorageSizeInGb: number;
    dataStorageSizeInTbs: number;
    dbNodeStorageSizeInGbs: number;
    dbServers: string[];
    definedTags: {[key: string]: string};
    displayName: string;
    exadataInfrastructureId: string;
    exadataStorageInTbsLowestScaledValue: number;
    freeformTags: {[key: string]: string};
    id: string;
    isLocalBackupEnabled: boolean;
    isMtlsEnabled: boolean;
    lastMaintenanceRunId: string;
    licenseModel: string;
    lifecycleDetails: string;
    maintenanceWindowDetails: outputs.GetDatabaseAutonomousVmClustersAutonomousVmClusterMaintenanceWindowDetail[];
    maintenanceWindows: outputs.GetDatabaseAutonomousVmClustersAutonomousVmClusterMaintenanceWindow[];
    maxAcdsLowestScaledValue: number;
    memoryPerOracleComputeUnitInGbs: number;
    memorySizeInGbs: number;
    nextMaintenanceRunId: string;
    nodeCount: number;
    nonProvisionableAutonomousContainerDatabases: number;
    ocpusEnabled: number;
    provisionableAutonomousContainerDatabases: number;
    provisionedAutonomousContainerDatabases: number;
    provisionedCpus: number;
    reclaimableCpus: number;
    reservedCpus: number;
    scanListenerPortNonTls: number;
    scanListenerPortTls: number;
    state: string;
    timeCreated: string;
    timeDatabaseSslCertificateExpires: string;
    timeOrdsCertificateExpires: string;
    timeZone: string;
    totalAutonomousDataStorageInTbs: number;
    totalContainerDatabases: number;
    vmClusterNetworkId: string;
}

export interface GetDatabaseAutonomousVmClustersAutonomousVmClusterMaintenanceWindow {
    customActionTimeoutInMins: number;
    daysOfWeeks: outputs.GetDatabaseAutonomousVmClustersAutonomousVmClusterMaintenanceWindowDaysOfWeek[];
    hoursOfDays: number[];
    isCustomActionTimeoutEnabled: boolean;
    isMonthlyPatchingEnabled: boolean;
    leadTimeInWeeks: number;
    months: outputs.GetDatabaseAutonomousVmClustersAutonomousVmClusterMaintenanceWindowMonth[];
    patchingMode: string;
    preference: string;
    skipRus: boolean[];
    weeksOfMonths: number[];
}

export interface GetDatabaseAutonomousVmClustersAutonomousVmClusterMaintenanceWindowDaysOfWeek {
    name: string;
}

export interface GetDatabaseAutonomousVmClustersAutonomousVmClusterMaintenanceWindowDetail {
    customActionTimeoutInMins: number;
    daysOfWeeks: outputs.GetDatabaseAutonomousVmClustersAutonomousVmClusterMaintenanceWindowDetailDaysOfWeek[];
    hoursOfDays: number[];
    isCustomActionTimeoutEnabled: boolean;
    isMonthlyPatchingEnabled: boolean;
    leadTimeInWeeks: number;
    months: outputs.GetDatabaseAutonomousVmClustersAutonomousVmClusterMaintenanceWindowDetailMonth[];
    patchingMode: string;
    preference: string;
    skipRus: boolean[];
    weeksOfMonths: number[];
}

export interface GetDatabaseAutonomousVmClustersAutonomousVmClusterMaintenanceWindowDetailDaysOfWeek {
    name: string;
}

export interface GetDatabaseAutonomousVmClustersAutonomousVmClusterMaintenanceWindowDetailMonth {
    name: string;
}

export interface GetDatabaseAutonomousVmClustersAutonomousVmClusterMaintenanceWindowMonth {
    name: string;
}

export interface GetDatabaseAutonomousVmClustersFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseBackupDestinationAssociatedDatabase {
    dbName: string;
    id: string;
}

export interface GetDatabaseBackupDestinationMountTypeDetail {
    localMountPointPath: string;
    mountType: string;
    nfsServerExport: string;
    nfsServers: string[];
}

export interface GetDatabaseBackupDestinationsBackupDestination {
    associatedDatabases: outputs.GetDatabaseBackupDestinationsBackupDestinationAssociatedDatabase[];
    compartmentId: string;
    connectionString: string;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    lifecycleDetails: string;
    localMountPointPath: string;
    mountTypeDetails: outputs.GetDatabaseBackupDestinationsBackupDestinationMountTypeDetail[];
    nfsMountType: string;
    nfsServerExport: string;
    nfsServers: string[];
    state: string;
    timeCreated: string;
    type: string;
    vpcUsers: string[];
}

export interface GetDatabaseBackupDestinationsBackupDestinationAssociatedDatabase {
    dbName: string;
    id: string;
}

export interface GetDatabaseBackupDestinationsBackupDestinationMountTypeDetail {
    localMountPointPath: string;
    mountType: string;
    nfsServerExport: string;
    nfsServers: string[];
}

export interface GetDatabaseBackupDestinationsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseBackupsBackup {
    availabilityDomain: string;
    compartmentId: string;
    databaseEdition: string;
    databaseId: string;
    databaseSizeInGbs: number;
    displayName: string;
    id: string;
    keyStoreId: string;
    keyStoreWalletName: string;
    kmsKeyId: string;
    kmsKeyVersionId: string;
    lifecycleDetails: string;
    shape: string;
    state: string;
    timeEnded: string;
    timeStarted: string;
    type: string;
    vaultId: string;
    version: string;
}

export interface GetDatabaseBackupsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseCloudAutonomousVmClusterAcdResourceUsagesAutonomousContainerDatabaseResourceUsage {
    autonomousContainerDatabaseVmUsages: outputs.GetDatabaseCloudAutonomousVmClusterAcdResourceUsagesAutonomousContainerDatabaseResourceUsageAutonomousContainerDatabaseVmUsage[];
    availableCpus: number;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    largestProvisionableAutonomousDatabaseInCpus: number;
    provisionableCpuses: number[];
    provisionedCpus: number;
    reclaimableCpus: number;
    reservedCpus: number;
    usedCpus: number;
}

export interface GetDatabaseCloudAutonomousVmClusterAcdResourceUsagesAutonomousContainerDatabaseResourceUsageAutonomousContainerDatabaseVmUsage {
    displayName: string;
    id: string;
    provisionedCpus: number;
    reclaimableCpus: number;
    reservedCpus: number;
    usedCpus: number;
}

export interface GetDatabaseCloudAutonomousVmClusterAcdResourceUsagesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseCloudAutonomousVmClusterMaintenanceWindow {
    customActionTimeoutInMins: number;
    daysOfWeeks: outputs.GetDatabaseCloudAutonomousVmClusterMaintenanceWindowDaysOfWeek[];
    hoursOfDays: number[];
    isCustomActionTimeoutEnabled: boolean;
    isMonthlyPatchingEnabled: boolean;
    leadTimeInWeeks: number;
    months: outputs.GetDatabaseCloudAutonomousVmClusterMaintenanceWindowMonth[];
    patchingMode: string;
    preference: string;
    skipRus: boolean[];
    weeksOfMonths: number[];
}

export interface GetDatabaseCloudAutonomousVmClusterMaintenanceWindowDaysOfWeek {
    name: string;
}

export interface GetDatabaseCloudAutonomousVmClusterMaintenanceWindowDetail {
    customActionTimeoutInMins: number;
    daysOfWeeks: outputs.GetDatabaseCloudAutonomousVmClusterMaintenanceWindowDetailDaysOfWeek[];
    hoursOfDays: number[];
    isCustomActionTimeoutEnabled: boolean;
    isMonthlyPatchingEnabled: boolean;
    leadTimeInWeeks: number;
    months: outputs.GetDatabaseCloudAutonomousVmClusterMaintenanceWindowDetailMonth[];
    patchingMode: string;
    preference: string;
    skipRus: boolean[];
    weeksOfMonths: number[];
}

export interface GetDatabaseCloudAutonomousVmClusterMaintenanceWindowDetailDaysOfWeek {
    name: string;
}

export interface GetDatabaseCloudAutonomousVmClusterMaintenanceWindowDetailMonth {
    name: string;
}

export interface GetDatabaseCloudAutonomousVmClusterMaintenanceWindowMonth {
    name: string;
}

export interface GetDatabaseCloudAutonomousVmClusterResourceUsageAutonomousVmResourceUsage {
    autonomousContainerDatabaseUsages: outputs.GetDatabaseCloudAutonomousVmClusterResourceUsageAutonomousVmResourceUsageAutonomousContainerDatabaseUsage[];
    availableCpus: number;
    displayName: string;
    id: string;
    provisionedCpus: number;
    reclaimableCpus: number;
    reservedCpus: number;
    usedCpus: number;
}

export interface GetDatabaseCloudAutonomousVmClusterResourceUsageAutonomousVmResourceUsageAutonomousContainerDatabaseUsage {
    availableCpus: number;
    displayName: string;
    id: string;
    provisionedCpus: number;
    reclaimableCpus: number;
    reservedCpus: number;
    usedCpus: number;
}

export interface GetDatabaseCloudAutonomousVmClustersCloudAutonomousVmCluster {
    autonomousDataStoragePercentage: number;
    autonomousDataStorageSizeInTbs: number;
    availabilityDomain: string;
    availableAutonomousDataStorageSizeInTbs: number;
    availableContainerDatabases: number;
    availableCpus: number;
    cloudExadataInfrastructureId: string;
    clusterTimeZone: string;
    compartmentId: string;
    computeModel: string;
    cpuCoreCount: number;
    cpuCoreCountPerNode: number;
    cpuPercentage: number;
    dataStorageSizeInGb: number;
    dataStorageSizeInTbs: number;
    dbNodeStorageSizeInGbs: number;
    dbServers: string[];
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    domain: string;
    exadataStorageInTbsLowestScaledValue: number;
    freeformTags: {[key: string]: string};
    hostname: string;
    id: string;
    isMtlsEnabledVmCluster: boolean;
    lastMaintenanceRunId: string;
    lastUpdateHistoryEntryId: string;
    licenseModel: string;
    lifecycleDetails: string;
    maintenanceWindowDetails: outputs.GetDatabaseCloudAutonomousVmClustersCloudAutonomousVmClusterMaintenanceWindowDetail[];
    maintenanceWindows: outputs.GetDatabaseCloudAutonomousVmClustersCloudAutonomousVmClusterMaintenanceWindow[];
    maxAcdsLowestScaledValue: number;
    memoryPerOracleComputeUnitInGbs: number;
    memorySizeInGbs: number;
    nextMaintenanceRunId: string;
    nodeCount: number;
    nonProvisionableAutonomousContainerDatabases: number;
    nsgIds: string[];
    ocpuCount: number;
    ocpusLowestScaledValue: number;
    provisionableAutonomousContainerDatabases: number;
    provisionedAutonomousContainerDatabases: number;
    provisionedCpus: number;
    reclaimableCpus: number;
    reservedCpus: number;
    scanListenerPortNonTls: number;
    scanListenerPortTls: number;
    shape: string;
    state: string;
    subnetId: string;
    timeCreated: string;
    timeUpdated: string;
    totalAutonomousDataStorageInTbs: number;
    totalContainerDatabases: number;
    totalCpus: number;
}

export interface GetDatabaseCloudAutonomousVmClustersCloudAutonomousVmClusterMaintenanceWindow {
    customActionTimeoutInMins: number;
    daysOfWeeks: outputs.GetDatabaseCloudAutonomousVmClustersCloudAutonomousVmClusterMaintenanceWindowDaysOfWeek[];
    hoursOfDays: number[];
    isCustomActionTimeoutEnabled: boolean;
    isMonthlyPatchingEnabled: boolean;
    leadTimeInWeeks: number;
    months: outputs.GetDatabaseCloudAutonomousVmClustersCloudAutonomousVmClusterMaintenanceWindowMonth[];
    patchingMode: string;
    preference: string;
    skipRus: boolean[];
    weeksOfMonths: number[];
}

export interface GetDatabaseCloudAutonomousVmClustersCloudAutonomousVmClusterMaintenanceWindowDaysOfWeek {
    name: string;
}

export interface GetDatabaseCloudAutonomousVmClustersCloudAutonomousVmClusterMaintenanceWindowDetail {
    customActionTimeoutInMins: number;
    daysOfWeeks: outputs.GetDatabaseCloudAutonomousVmClustersCloudAutonomousVmClusterMaintenanceWindowDetailDaysOfWeek[];
    hoursOfDays: number[];
    isCustomActionTimeoutEnabled: boolean;
    isMonthlyPatchingEnabled: boolean;
    leadTimeInWeeks: number;
    months: outputs.GetDatabaseCloudAutonomousVmClustersCloudAutonomousVmClusterMaintenanceWindowDetailMonth[];
    patchingMode: string;
    preference: string;
    skipRus: boolean[];
    weeksOfMonths: number[];
}

export interface GetDatabaseCloudAutonomousVmClustersCloudAutonomousVmClusterMaintenanceWindowDetailDaysOfWeek {
    name: string;
}

export interface GetDatabaseCloudAutonomousVmClustersCloudAutonomousVmClusterMaintenanceWindowDetailMonth {
    name: string;
}

export interface GetDatabaseCloudAutonomousVmClustersCloudAutonomousVmClusterMaintenanceWindowMonth {
    name: string;
}

export interface GetDatabaseCloudAutonomousVmClustersFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseCloudExadataInfrastructureCustomerContact {
    email: string;
}

export interface GetDatabaseCloudExadataInfrastructureDefinedFileSystemConfiguration {
    isBackupPartition: boolean;
    isResizable: boolean;
    minSizeGb: number;
    mountPoint: string;
}

export interface GetDatabaseCloudExadataInfrastructureMaintenanceWindow {
    customActionTimeoutInMins: number;
    daysOfWeeks: outputs.GetDatabaseCloudExadataInfrastructureMaintenanceWindowDaysOfWeek[];
    hoursOfDays: number[];
    isCustomActionTimeoutEnabled: boolean;
    isMonthlyPatchingEnabled: boolean;
    leadTimeInWeeks: number;
    months: outputs.GetDatabaseCloudExadataInfrastructureMaintenanceWindowMonth[];
    patchingMode: string;
    preference: string;
    skipRus: boolean[];
    weeksOfMonths: number[];
}

export interface GetDatabaseCloudExadataInfrastructureMaintenanceWindowDaysOfWeek {
    name: string;
}

export interface GetDatabaseCloudExadataInfrastructureMaintenanceWindowMonth {
    name: string;
}

export interface GetDatabaseCloudExadataInfrastructureUnAllocatedResourceCloudAutonomousVmCluster {
    id: string;
    unAllocatedAdbStorageInTbs: number;
}

export interface GetDatabaseCloudExadataInfrastructuresCloudExadataInfrastructure {
    activatedStorageCount: number;
    additionalStorageCount: number;
    availabilityDomain: string;
    availableStorageSizeInGbs: number;
    clusterPlacementGroupId: string;
    compartmentId: string;
    computeCount: number;
    cpuCount: number;
    customerContacts: outputs.GetDatabaseCloudExadataInfrastructuresCloudExadataInfrastructureCustomerContact[];
    dataStorageSizeInTbs: number;
    dbNodeStorageSizeInGbs: number;
    dbServerVersion: string;
    definedFileSystemConfigurations: outputs.GetDatabaseCloudExadataInfrastructuresCloudExadataInfrastructureDefinedFileSystemConfiguration[];
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    lastMaintenanceRunId: string;
    lifecycleDetails: string;
    maintenanceWindows: outputs.GetDatabaseCloudExadataInfrastructuresCloudExadataInfrastructureMaintenanceWindow[];
    maxCpuCount: number;
    maxDataStorageInTbs: number;
    maxDbNodeStorageInGbs: number;
    maxMemoryInGbs: number;
    memorySizeInGbs: number;
    monthlyDbServerVersion: string;
    monthlyStorageServerVersion: string;
    nextMaintenanceRunId: string;
    shape: string;
    state: string;
    storageCount: number;
    storageServerVersion: string;
    subscriptionId: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    totalStorageSizeInGbs: number;
}

export interface GetDatabaseCloudExadataInfrastructuresCloudExadataInfrastructureCustomerContact {
    email: string;
}

export interface GetDatabaseCloudExadataInfrastructuresCloudExadataInfrastructureDefinedFileSystemConfiguration {
    isBackupPartition: boolean;
    isResizable: boolean;
    minSizeGb: number;
    mountPoint: string;
}

export interface GetDatabaseCloudExadataInfrastructuresCloudExadataInfrastructureMaintenanceWindow {
    customActionTimeoutInMins: number;
    daysOfWeeks: outputs.GetDatabaseCloudExadataInfrastructuresCloudExadataInfrastructureMaintenanceWindowDaysOfWeek[];
    hoursOfDays: number[];
    isCustomActionTimeoutEnabled: boolean;
    isMonthlyPatchingEnabled: boolean;
    leadTimeInWeeks: number;
    months: outputs.GetDatabaseCloudExadataInfrastructuresCloudExadataInfrastructureMaintenanceWindowMonth[];
    patchingMode: string;
    preference: string;
    skipRus: boolean[];
    weeksOfMonths: number[];
}

export interface GetDatabaseCloudExadataInfrastructuresCloudExadataInfrastructureMaintenanceWindowDaysOfWeek {
    name: string;
}

export interface GetDatabaseCloudExadataInfrastructuresCloudExadataInfrastructureMaintenanceWindowMonth {
    name: string;
}

export interface GetDatabaseCloudExadataInfrastructuresFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseCloudVmClusterDataCollectionOption {
    isDiagnosticsEventsEnabled: boolean;
    isHealthMonitoringEnabled: boolean;
    isIncidentLogsEnabled: boolean;
}

export interface GetDatabaseCloudVmClusterFileSystemConfigurationDetail {
    fileSystemSizeGb: number;
    mountPoint: string;
}

export interface GetDatabaseCloudVmClusterIormConfigCach {
    dbPlans: outputs.GetDatabaseCloudVmClusterIormConfigCachDbPlan[];
    lifecycleDetails: string;
    objective: string;
    state: string;
}

export interface GetDatabaseCloudVmClusterIormConfigCachDbPlan {
    dbName: string;
    flashCacheLimit: string;
    share: number;
}

export interface GetDatabaseCloudVmClusterIormConfigDbPlan {
    dbName: string;
    flashCacheLimit: string;
    share: number;
}

export interface GetDatabaseCloudVmClustersCloudVmCluster {
    availabilityDomain: string;
    backupNetworkNsgIds: string[];
    backupSubnetId: string;
    cloudExadataInfrastructureId: string;
    clusterName: string;
    compartmentId: string;
    cpuCoreCount: number;
    createAsync: boolean;
    dataCollectionOptions: outputs.GetDatabaseCloudVmClustersCloudVmClusterDataCollectionOption[];
    dataStoragePercentage: number;
    dataStorageSizeInTbs: number;
    dbNodeStorageSizeInGbs: number;
    dbServers: string[];
    definedTags: {[key: string]: string};
    diskRedundancy: string;
    displayName: string;
    domain: string;
    fileSystemConfigurationDetails: outputs.GetDatabaseCloudVmClustersCloudVmClusterFileSystemConfigurationDetail[];
    freeformTags: {[key: string]: string};
    giVersion: string;
    hostname: string;
    id: string;
    iormConfigCaches: outputs.GetDatabaseCloudVmClustersCloudVmClusterIormConfigCach[];
    isLocalBackupEnabled: boolean;
    isSparseDiskgroupEnabled: boolean;
    lastUpdateHistoryEntryId: string;
    licenseModel: string;
    lifecycleDetails: string;
    listenerPort: string;
    memorySizeInGbs: number;
    nodeCount: number;
    nsgIds: string[];
    ocpuCount: number;
    privateZoneId: string;
    scanDnsName: string;
    scanDnsRecordId: string;
    scanIpIds: string[];
    scanListenerPortTcp: number;
    scanListenerPortTcpSsl: number;
    shape: string;
    sshPublicKeys: string[];
    state: string;
    storageSizeInGbs: number;
    subnetId: string;
    subscriptionId: string;
    systemTags: {[key: string]: string};
    systemVersion: string;
    timeCreated: string;
    timeZone: string;
    vipIds: string[];
    zoneId: string;
}

export interface GetDatabaseCloudVmClustersCloudVmClusterDataCollectionOption {
    isDiagnosticsEventsEnabled: boolean;
    isHealthMonitoringEnabled: boolean;
    isIncidentLogsEnabled: boolean;
}

export interface GetDatabaseCloudVmClustersCloudVmClusterFileSystemConfigurationDetail {
    fileSystemSizeGb: number;
    mountPoint: string;
}

export interface GetDatabaseCloudVmClustersCloudVmClusterIormConfigCach {
    dbPlans: outputs.GetDatabaseCloudVmClustersCloudVmClusterIormConfigCachDbPlan[];
    lifecycleDetails: string;
    objective: string;
    state: string;
}

export interface GetDatabaseCloudVmClustersCloudVmClusterIormConfigCachDbPlan {
    dbName: string;
    flashCacheLimit: string;
    share: number;
}

export interface GetDatabaseCloudVmClustersFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseDataGuardAssociationDataCollectionOption {
    isDiagnosticsEventsEnabled: boolean;
    isHealthMonitoringEnabled: boolean;
    isIncidentLogsEnabled: boolean;
}

export interface GetDatabaseDataGuardAssociationsDataGuardAssociation {
    applyLag: string;
    applyRate: string;
    availabilityDomain: string;
    backupNetworkNsgIds: string[];
    cpuCoreCount: number;
    createAsync: boolean;
    creationType: string;
    dataCollectionOptions: outputs.GetDatabaseDataGuardAssociationsDataGuardAssociationDataCollectionOption[];
    databaseAdminPassword: string;
    databaseDefinedTags: {[key: string]: string};
    databaseFreeformTags: {[key: string]: string};
    databaseId: string;
    databaseSoftwareImageId: string;
    dbSystemDefinedTags: {[key: string]: string};
    dbSystemFreeformTags: {[key: string]: string};
    deleteStandbyDbHomeOnDelete: string;
    displayName: string;
    domain: string;
    faultDomains: string[];
    hostname: string;
    id: string;
    isActiveDataGuardEnabled: boolean;
    licenseModel: string;
    lifecycleDetails: string;
    nodeCount: number;
    nsgIds: string[];
    peerDataGuardAssociationId: string;
    peerDatabaseId: string;
    peerDbHomeId: string;
    peerDbSystemId: string;
    peerDbUniqueName: string;
    peerRole: string;
    peerSidPrefix: string;
    peerVmClusterId: string;
    privateIp: string;
    protectionMode: string;
    role: string;
    shape: string;
    state: string;
    storageVolumePerformanceMode: string;
    subnetId: string;
    timeCreated: string;
    timeZone: string;
    transportType: string;
}

export interface GetDatabaseDataGuardAssociationsDataGuardAssociationDataCollectionOption {
    isDiagnosticsEventsEnabled: boolean;
    isHealthMonitoringEnabled: boolean;
    isIncidentLogsEnabled: boolean;
}

export interface GetDatabaseDataGuardAssociationsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseDatabaseConnectionString {
    allConnectionStrings: {[key: string]: string};
    cdbDefault: string;
    cdbIpDefault: string;
}

export interface GetDatabaseDatabaseDatabase {
    adminPassword: string;
    backupId: string;
    backupTdePassword: string;
    characterSet: string;
    databaseSoftwareImageId: string;
    dbBackupConfigs: outputs.GetDatabaseDatabaseDatabaseDbBackupConfig[];
    dbName: string;
    dbUniqueName: string;
    dbWorkload: string;
    definedTags: {[key: string]: string};
    freeformTags: {[key: string]: string};
    kmsKeyId: string;
    kmsKeyVersionId: string;
    ncharacterSet: string;
    pdbName: string;
    pluggableDatabases: string[];
    sidPrefix: string;
    tdeWalletPassword: string;
    vaultId: string;
}

export interface GetDatabaseDatabaseDatabaseDbBackupConfig {
    autoBackupEnabled: boolean;
    autoBackupWindow: string;
    autoFullBackupDay: string;
    autoFullBackupWindow: string;
    backupDeletionPolicy: string;
    backupDestinationDetails: outputs.GetDatabaseDatabaseDatabaseDbBackupConfigBackupDestinationDetail[];
    recoveryWindowInDays: number;
    runImmediateFullBackup: boolean;
}

export interface GetDatabaseDatabaseDatabaseDbBackupConfigBackupDestinationDetail {
    dbrsPolicyId: string;
    id: string;
    type: string;
    vpcUser: string;
}

export interface GetDatabaseDatabaseDatabaseManagementConfig {
    managementStatus: string;
    managementType: string;
}

export interface GetDatabaseDatabaseDbBackupConfig {
    autoBackupEnabled: boolean;
    autoBackupWindow: string;
    autoFullBackupDay: string;
    autoFullBackupWindow: string;
    backupDeletionPolicy: string;
    backupDestinationDetails: outputs.GetDatabaseDatabaseDbBackupConfigBackupDestinationDetail[];
    recoveryWindowInDays: number;
    runImmediateFullBackup: boolean;
}

export interface GetDatabaseDatabaseDbBackupConfigBackupDestinationDetail {
    dbrsPolicyId: string;
    id: string;
    type: string;
    vpcUser: string;
}

export interface GetDatabaseDatabasePdbConversionHistoryEntriesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseDatabasePdbConversionHistoryEntriesPdbConversionHistoryEntry {
    action: string;
    additionalCdbParams: string;
    cdbName: string;
    id: string;
    lifecycleDetails: string;
    sourceDatabaseId: string;
    state: string;
    target: string;
    targetDatabaseId: string;
    timeEnded: string;
    timeStarted: string;
}

export interface GetDatabaseDatabaseSoftwareImagesDatabaseSoftwareImage {
    compartmentId: string;
    databaseSoftwareImageIncludedPatches: string[];
    databaseSoftwareImageOneOffPatches: string[];
    databaseVersion: string;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    imageShapeFamily: string;
    imageType: string;
    includedPatchesSummary: string;
    isUpgradeSupported: boolean;
    lifecycleDetails: string;
    lsInventory: string;
    patchSet: string;
    sourceDbHomeId: string;
    state: string;
    timeCreated: string;
}

export interface GetDatabaseDatabaseSoftwareImagesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseDatabaseUpgradeHistoryEntriesDatabaseUpgradeHistoryEntry {
    action: string;
    id: string;
    lifecycleDetails: string;
    options: string;
    source: string;
    sourceDbHomeId: string;
    state: string;
    targetDatabaseSoftwareImageId: string;
    targetDbHomeId: string;
    targetDbVersion: string;
    timeEnded: string;
    timeStarted: string;
}

export interface GetDatabaseDatabaseUpgradeHistoryEntriesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseDatabasesDatabase {
    characterSet: string;
    compartmentId: string;
    connectionStrings: outputs.GetDatabaseDatabasesDatabaseConnectionString[];
    databaseManagementConfigs: outputs.GetDatabaseDatabasesDatabaseDatabaseManagementConfig[];
    databaseSoftwareImageId: string;
    databases: outputs.GetDatabaseDatabasesDatabaseDatabase[];
    dbBackupConfigs: outputs.GetDatabaseDatabasesDatabaseDbBackupConfig[];
    dbHomeId: string;
    dbName: string;
    dbSystemId: string;
    dbUniqueName: string;
    dbVersion: string;
    dbWorkload: string;
    definedTags: {[key: string]: string};
    freeformTags: {[key: string]: string};
    id: string;
    isCdb: boolean;
    keyStoreId: string;
    keyStoreWalletName: string;
    kmsKeyId: string;
    kmsKeyMigration: boolean;
    kmsKeyRotation: number;
    kmsKeyVersionId: string;
    lastBackupDurationInSeconds: number;
    lastBackupTimestamp: string;
    lastFailedBackupTimestamp: string;
    lifecycleDetails: string;
    ncharacterSet: string;
    pdbName: string;
    sidPrefix: string;
    source: string;
    sourceDatabasePointInTimeRecoveryTimestamp: string;
    state: string;
    timeCreated: string;
    vaultId: string;
    vmClusterId: string;
}

export interface GetDatabaseDatabasesDatabaseConnectionString {
    allConnectionStrings: {[key: string]: string};
    cdbDefault: string;
    cdbIpDefault: string;
}

export interface GetDatabaseDatabasesDatabaseDatabase {
    adminPassword: string;
    backupId: string;
    backupTdePassword: string;
    characterSet: string;
    databaseSoftwareImageId: string;
    dbBackupConfigs: outputs.GetDatabaseDatabasesDatabaseDatabaseDbBackupConfig[];
    dbName: string;
    dbUniqueName: string;
    dbWorkload: string;
    definedTags: {[key: string]: string};
    freeformTags: {[key: string]: string};
    kmsKeyId: string;
    kmsKeyVersionId: string;
    ncharacterSet: string;
    pdbName: string;
    pluggableDatabases: string[];
    sidPrefix: string;
    tdeWalletPassword: string;
    vaultId: string;
}

export interface GetDatabaseDatabasesDatabaseDatabaseDbBackupConfig {
    autoBackupEnabled: boolean;
    autoBackupWindow: string;
    autoFullBackupDay: string;
    autoFullBackupWindow: string;
    backupDeletionPolicy: string;
    backupDestinationDetails: outputs.GetDatabaseDatabasesDatabaseDatabaseDbBackupConfigBackupDestinationDetail[];
    recoveryWindowInDays: number;
    runImmediateFullBackup: boolean;
}

export interface GetDatabaseDatabasesDatabaseDatabaseDbBackupConfigBackupDestinationDetail {
    dbrsPolicyId: string;
    id: string;
    type: string;
    vpcUser: string;
}

export interface GetDatabaseDatabasesDatabaseDatabaseManagementConfig {
    managementStatus: string;
    managementType: string;
}

export interface GetDatabaseDatabasesDatabaseDbBackupConfig {
    autoBackupEnabled: boolean;
    autoBackupWindow: string;
    autoFullBackupDay: string;
    autoFullBackupWindow: string;
    backupDeletionPolicy: string;
    backupDestinationDetails: outputs.GetDatabaseDatabasesDatabaseDbBackupConfigBackupDestinationDetail[];
    recoveryWindowInDays: number;
    runImmediateFullBackup: boolean;
}

export interface GetDatabaseDatabasesDatabaseDbBackupConfigBackupDestinationDetail {
    dbrsPolicyId: string;
    id: string;
    type: string;
    vpcUser: string;
}

export interface GetDatabaseDatabasesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseDbHomeDatabase {
    adminPassword: string;
    backupId: string;
    backupTdePassword: string;
    characterSet: string;
    connectionStrings: outputs.GetDatabaseDbHomeDatabaseConnectionString[];
    databaseId: string;
    databaseSoftwareImageId: string;
    dbBackupConfigs: outputs.GetDatabaseDbHomeDatabaseDbBackupConfig[];
    dbName: string;
    dbUniqueName: string;
    dbWorkload: string;
    definedTags: {[key: string]: string};
    freeformTags: {[key: string]: string};
    id: string;
    keyStoreId: string;
    kmsKeyId: string;
    kmsKeyVersionId: string;
    lifecycleDetails: string;
    ncharacterSet: string;
    oneOffPatches: string[];
    pdbName: string;
    pluggableDatabases: string[];
    sidPrefix: string;
    state: string;
    tdeWalletPassword: string;
    timeCreated: string;
    timeStampForPointInTimeRecovery: string;
    vaultId: string;
}

export interface GetDatabaseDbHomeDatabaseConnectionString {
    allConnectionStrings: {[key: string]: string};
    cdbDefault: string;
    cdbIpDefault: string;
}

export interface GetDatabaseDbHomeDatabaseDbBackupConfig {
    autoBackupEnabled: boolean;
    autoBackupWindow: string;
    autoFullBackupDay: string;
    autoFullBackupWindow: string;
    backupDeletionPolicy: string;
    backupDestinationDetails: outputs.GetDatabaseDbHomeDatabaseDbBackupConfigBackupDestinationDetail[];
    recoveryWindowInDays: number;
    runImmediateFullBackup: boolean;
}

export interface GetDatabaseDbHomeDatabaseDbBackupConfigBackupDestinationDetail {
    dbrsPolicyId: string;
    id: string;
    type: string;
}

export interface GetDatabaseDbHomePatchHistoryEntriesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseDbHomePatchHistoryEntriesPatchHistoryEntry {
    action: string;
    id: string;
    lifecycleDetails: string;
    patchId: string;
    patchType: string;
    state: string;
    timeEnded: string;
    timeStarted: string;
}

export interface GetDatabaseDbHomePatchesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseDbHomePatchesPatch {
    availableActions: string[];
    description: string;
    id: string;
    lastAction: string;
    lifecycleDetails: string;
    state: string;
    timeReleased: string;
    version: string;
}

export interface GetDatabaseDbHomesDbHome {
    compartmentId: string;
    databaseSoftwareImageId: string;
    databases: outputs.GetDatabaseDbHomesDbHomeDatabase[];
    dbHomeId: string;
    dbHomeLocation: string;
    dbSystemId: string;
    dbVersion: string;
    definedTags: {[key: string]: string};
    displayName: string;
    enableDatabaseDelete: boolean;
    freeformTags: {[key: string]: string};
    id: string;
    isDesupportedVersion: boolean;
    isUnifiedAuditingEnabled: boolean;
    kmsKeyId: string;
    kmsKeyVersionId: string;
    lastPatchHistoryEntryId: string;
    lifecycleDetails: string;
    source: string;
    state: string;
    timeCreated: string;
    vmClusterId: string;
}

export interface GetDatabaseDbHomesDbHomeDatabase {
    adminPassword: string;
    backupId: string;
    backupTdePassword: string;
    characterSet: string;
    connectionStrings: outputs.GetDatabaseDbHomesDbHomeDatabaseConnectionString[];
    databaseId: string;
    databaseSoftwareImageId: string;
    dbBackupConfigs: outputs.GetDatabaseDbHomesDbHomeDatabaseDbBackupConfig[];
    dbName: string;
    dbUniqueName: string;
    dbWorkload: string;
    definedTags: {[key: string]: string};
    freeformTags: {[key: string]: string};
    id: string;
    keyStoreId: string;
    kmsKeyId: string;
    kmsKeyVersionId: string;
    lifecycleDetails: string;
    ncharacterSet: string;
    oneOffPatches: string[];
    pdbName: string;
    pluggableDatabases: string[];
    sidPrefix: string;
    state: string;
    tdeWalletPassword: string;
    timeCreated: string;
    timeStampForPointInTimeRecovery: string;
    vaultId: string;
}

export interface GetDatabaseDbHomesDbHomeDatabaseConnectionString {
    allConnectionStrings: {[key: string]: string};
    cdbDefault: string;
    cdbIpDefault: string;
}

export interface GetDatabaseDbHomesDbHomeDatabaseDbBackupConfig {
    autoBackupEnabled: boolean;
    autoBackupWindow: string;
    autoFullBackupDay: string;
    autoFullBackupWindow: string;
    backupDeletionPolicy: string;
    backupDestinationDetails: outputs.GetDatabaseDbHomesDbHomeDatabaseDbBackupConfigBackupDestinationDetail[];
    recoveryWindowInDays: number;
    runImmediateFullBackup: boolean;
}

export interface GetDatabaseDbHomesDbHomeDatabaseDbBackupConfigBackupDestinationDetail {
    dbrsPolicyId: string;
    id: string;
    type: string;
}

export interface GetDatabaseDbHomesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseDbNodeConsoleConnectionsConsoleConnection {
    compartmentId: string;
    connectionString: string;
    dbNodeId: string;
    definedTags: {[key: string]: string};
    fingerprint: string;
    freeformTags: {[key: string]: string};
    id: string;
    lifecycleDetails: string;
    publicKey: string;
    serviceHostKeyFingerprint: string;
    state: string;
}

export interface GetDatabaseDbNodeConsoleConnectionsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseDbNodeConsoleHistoriesConsoleHistoryCollection {
    items: outputs.GetDatabaseDbNodeConsoleHistoriesConsoleHistoryCollectionItem[];
}

export interface GetDatabaseDbNodeConsoleHistoriesConsoleHistoryCollectionItem {
    compartmentId: string;
    dbNodeId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    lifecycleDetails: string;
    state: string;
    timeCreated: string;
}

export interface GetDatabaseDbNodeConsoleHistoriesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseDbNodesDbNode {
    additionalDetails: string;
    backupIpId: string;
    backupVnic2id: string;
    backupVnicId: string;
    cpuCoreCount: number;
    dbNodeId: string;
    dbNodeStorageSizeInGbs: number;
    dbServerId: string;
    dbSystemId: string;
    definedTags: {[key: string]: string};
    faultDomain: string;
    freeformTags: {[key: string]: string};
    hostIpId: string;
    hostname: string;
    id: string;
    lifecycleDetails: string;
    maintenanceType: string;
    memorySizeInGbs: number;
    softwareStorageSizeInGb: number;
    state: string;
    timeCreated: string;
    timeMaintenanceWindowEnd: string;
    timeMaintenanceWindowStart: string;
    totalCpuCoreCount: number;
    vnic2id: string;
    vnicId: string;
}

export interface GetDatabaseDbNodesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseDbServerDbServerPatchingDetail {
    estimatedPatchDuration: number;
    patchingStatus: string;
    timePatchingEnded: string;
    timePatchingStarted: string;
}

export interface GetDatabaseDbServersDbServer {
    autonomousVirtualMachineIds: string[];
    autonomousVmClusterIds: string[];
    compartmentId: string;
    cpuCoreCount: number;
    dbNodeIds: string[];
    dbNodeStorageSizeInGbs: number;
    dbServerPatchingDetails: outputs.GetDatabaseDbServersDbServerDbServerPatchingDetail[];
    definedTags: {[key: string]: string};
    displayName: string;
    exadataInfrastructureId: string;
    freeformTags: {[key: string]: string};
    id: string;
    lifecycleDetails: string;
    maxCpuCount: number;
    maxDbNodeStorageInGbs: number;
    maxMemoryInGbs: number;
    memorySizeInGbs: number;
    shape: string;
    state: string;
    timeCreated: string;
    vmClusterIds: string[];
}

export interface GetDatabaseDbServersDbServerDbServerPatchingDetail {
    estimatedPatchDuration: number;
    patchingStatus: string;
    timePatchingEnded: string;
    timePatchingStarted: string;
}

export interface GetDatabaseDbServersFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseDbSystemComputePerformancesDbSystemComputePerformance {
    computePerformanceLists: outputs.GetDatabaseDbSystemComputePerformancesDbSystemComputePerformanceComputePerformanceList[];
    shape: string;
}

export interface GetDatabaseDbSystemComputePerformancesDbSystemComputePerformanceComputePerformanceList {
    cpuCoreCount: number;
    memoryInGbs: number;
    networkBandwidthInGbps: number;
    networkIops: number;
    networkThroughputInMbps: number;
}

export interface GetDatabaseDbSystemComputePerformancesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseDbSystemPatchHistoryEntriesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseDbSystemPatchHistoryEntriesPatchHistoryEntry {
    action: string;
    id: string;
    lifecycleDetails: string;
    patchId: string;
    patchType: string;
    state: string;
    timeEnded: string;
    timeStarted: string;
}

export interface GetDatabaseDbSystemPatchesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseDbSystemPatchesPatch {
    availableActions: string[];
    description: string;
    id: string;
    lastAction: string;
    lifecycleDetails: string;
    state: string;
    timeReleased: string;
    version: string;
}

export interface GetDatabaseDbSystemShapesDbSystemShape {
    availableCoreCount: number;
    availableCoreCountPerNode: number;
    availableDataStorageInTbs: number;
    availableDataStoragePerServerInTbs: number;
    availableDbNodePerNodeInGbs: number;
    availableDbNodeStorageInGbs: number;
    availableMemoryInGbs: number;
    availableMemoryPerNodeInGbs: number;
    coreCountIncrement: number;
    maxStorageCount: number;
    maximumNodeCount: number;
    minCoreCountPerNode: number;
    minDataStorageInTbs: number;
    minDbNodeStoragePerNodeInGbs: number;
    minMemoryPerNodeInGbs: number;
    minStorageCount: number;
    minimumCoreCount: number;
    minimumNodeCount: number;
    name: string;
    shape: string;
    shapeFamily: string;
    shapeType: string;
}

export interface GetDatabaseDbSystemShapesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseDbSystemStoragePerformancesDbSystemStoragePerformance {
    dataStoragePerformanceLists: outputs.GetDatabaseDbSystemStoragePerformancesDbSystemStoragePerformanceDataStoragePerformanceList[];
    recoStoragePerformanceLists: outputs.GetDatabaseDbSystemStoragePerformancesDbSystemStoragePerformanceRecoStoragePerformanceList[];
    shapeType: string;
}

export interface GetDatabaseDbSystemStoragePerformancesDbSystemStoragePerformanceDataStoragePerformanceList {
    balancedDiskPerformances: outputs.GetDatabaseDbSystemStoragePerformancesDbSystemStoragePerformanceDataStoragePerformanceListBalancedDiskPerformance[];
    highDiskPerformances: outputs.GetDatabaseDbSystemStoragePerformancesDbSystemStoragePerformanceDataStoragePerformanceListHighDiskPerformance[];
    sizeInGbs: number;
}

export interface GetDatabaseDbSystemStoragePerformancesDbSystemStoragePerformanceDataStoragePerformanceListBalancedDiskPerformance {
    diskIops: number;
    diskThroughputInMbps: number;
}

export interface GetDatabaseDbSystemStoragePerformancesDbSystemStoragePerformanceDataStoragePerformanceListHighDiskPerformance {
    diskIops: number;
    diskThroughputInMbps: number;
}

export interface GetDatabaseDbSystemStoragePerformancesDbSystemStoragePerformanceRecoStoragePerformanceList {
    balancedDiskPerformances: outputs.GetDatabaseDbSystemStoragePerformancesDbSystemStoragePerformanceRecoStoragePerformanceListBalancedDiskPerformance[];
    highDiskPerformances: outputs.GetDatabaseDbSystemStoragePerformancesDbSystemStoragePerformanceRecoStoragePerformanceListHighDiskPerformance[];
    sizeInGbs: number;
}

export interface GetDatabaseDbSystemStoragePerformancesDbSystemStoragePerformanceRecoStoragePerformanceListBalancedDiskPerformance {
    diskIops: number;
    diskThroughputInMbps: number;
}

export interface GetDatabaseDbSystemStoragePerformancesDbSystemStoragePerformanceRecoStoragePerformanceListHighDiskPerformance {
    diskIops: number;
    diskThroughputInMbps: number;
}

export interface GetDatabaseDbSystemStoragePerformancesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseDbSystemsDbSystem {
    availabilityDomain: string;
    backupNetworkNsgIds: string[];
    backupSubnetId: string;
    clusterName: string;
    compartmentId: string;
    cpuCoreCount: number;
    dataCollectionOptions: outputs.GetDatabaseDbSystemsDbSystemDataCollectionOption[];
    dataStoragePercentage: number;
    dataStorageSizeInGb: number;
    databaseEdition: string;
    dbHomes: outputs.GetDatabaseDbSystemsDbSystemDbHome[];
    dbSystemOptions: outputs.GetDatabaseDbSystemsDbSystemDbSystemOption[];
    definedTags: {[key: string]: string};
    diskRedundancy: string;
    displayName: string;
    domain: string;
    faultDomains: string[];
    freeformTags: {[key: string]: string};
    hostname: string;
    id: string;
    iormConfigCaches: outputs.GetDatabaseDbSystemsDbSystemIormConfigCach[];
    kmsKeyId: string;
    kmsKeyVersionId: string;
    lastMaintenanceRunId: string;
    lastPatchHistoryEntryId: string;
    licenseModel: string;
    lifecycleDetails: string;
    listenerPort: number;
    maintenanceWindowDetails: outputs.GetDatabaseDbSystemsDbSystemMaintenanceWindowDetail[];
    maintenanceWindows: outputs.GetDatabaseDbSystemsDbSystemMaintenanceWindow[];
    memorySizeInGbs: number;
    nextMaintenanceRunId: string;
    nodeCount: number;
    nsgIds: string[];
    osVersion: string;
    pointInTimeDataDiskCloneTimestamp: string;
    privateIp: string;
    recoStorageSizeInGb: number;
    scanDnsName: string;
    scanDnsRecordId: string;
    scanIpIds: string[];
    shape: string;
    source: string;
    sourceDbSystemId: string;
    sparseDiskgroup: boolean;
    sshPublicKeys: string[];
    state: string;
    storageVolumePerformanceMode: string;
    subnetId: string;
    timeCreated: string;
    timeZone: string;
    version: string;
    vipIds: string[];
    zoneId: string;
}

export interface GetDatabaseDbSystemsDbSystemDataCollectionOption {
    isDiagnosticsEventsEnabled: boolean;
    isHealthMonitoringEnabled: boolean;
    isIncidentLogsEnabled: boolean;
}

export interface GetDatabaseDbSystemsDbSystemDbHome {
    createAsync: boolean;
    databaseSoftwareImageId: string;
    databases: outputs.GetDatabaseDbSystemsDbSystemDbHomeDatabase[];
    dbHomeLocation: string;
    dbVersion: string;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    lastPatchHistoryEntryId: string;
    lifecycleDetails: string;
    state: string;
    timeCreated: string;
}

export interface GetDatabaseDbSystemsDbSystemDbHomeDatabase {
    adminPassword: string;
    backupId: string;
    backupTdePassword: string;
    characterSet: string;
    connectionStrings: outputs.GetDatabaseDbSystemsDbSystemDbHomeDatabaseConnectionString[];
    databaseId: string;
    databaseSoftwareImageId: string;
    dbBackupConfigs: outputs.GetDatabaseDbSystemsDbSystemDbHomeDatabaseDbBackupConfig[];
    dbDomain: string;
    dbName: string;
    dbUniqueName: string;
    dbWorkload: string;
    definedTags: {[key: string]: string};
    freeformTags: {[key: string]: string};
    id: string;
    kmsKeyId: string;
    kmsKeyVersionId: string;
    lifecycleDetails: string;
    ncharacterSet: string;
    pdbName: string;
    pluggableDatabases: string[];
    state: string;
    tdeWalletPassword: string;
    timeCreated: string;
    timeStampForPointInTimeRecovery: string;
    vaultId: string;
}

export interface GetDatabaseDbSystemsDbSystemDbHomeDatabaseConnectionString {
    allConnectionStrings: {[key: string]: string};
    cdbDefault: string;
    cdbIpDefault: string;
}

export interface GetDatabaseDbSystemsDbSystemDbHomeDatabaseDbBackupConfig {
    autoBackupEnabled: boolean;
    autoBackupWindow: string;
    autoFullBackupDay: string;
    autoFullBackupWindow: string;
    backupDeletionPolicy: string;
    backupDestinationDetails: outputs.GetDatabaseDbSystemsDbSystemDbHomeDatabaseDbBackupConfigBackupDestinationDetail[];
    recoveryWindowInDays: number;
    runImmediateFullBackup: boolean;
}

export interface GetDatabaseDbSystemsDbSystemDbHomeDatabaseDbBackupConfigBackupDestinationDetail {
    dbrsPolicyId: string;
    id: string;
    type: string;
}

export interface GetDatabaseDbSystemsDbSystemDbSystemOption {
    storageManagement: string;
}

export interface GetDatabaseDbSystemsDbSystemIormConfigCach {
    dbPlans: outputs.GetDatabaseDbSystemsDbSystemIormConfigCachDbPlan[];
    dbSystemId: string;
    lifecycleDetails: string;
    objective: string;
    state: string;
}

export interface GetDatabaseDbSystemsDbSystemIormConfigCachDbPlan {
    dbName: string;
    flashCacheLimit: string;
    share: number;
}

export interface GetDatabaseDbSystemsDbSystemMaintenanceWindow {
    customActionTimeoutInMins: number;
    daysOfWeeks: outputs.GetDatabaseDbSystemsDbSystemMaintenanceWindowDaysOfWeek[];
    hoursOfDays: number[];
    isCustomActionTimeoutEnabled: boolean;
    isMonthlyPatchingEnabled: boolean;
    leadTimeInWeeks: number;
    months: outputs.GetDatabaseDbSystemsDbSystemMaintenanceWindowMonth[];
    patchingMode: string;
    preference: string;
    skipRus: boolean[];
    weeksOfMonths: number[];
}

export interface GetDatabaseDbSystemsDbSystemMaintenanceWindowDaysOfWeek {
    name: string;
}

export interface GetDatabaseDbSystemsDbSystemMaintenanceWindowDetail {
    customActionTimeoutInMins: number;
    daysOfWeeks: outputs.GetDatabaseDbSystemsDbSystemMaintenanceWindowDetailDaysOfWeek[];
    hoursOfDays: number[];
    isCustomActionTimeoutEnabled: boolean;
    isMonthlyPatchingEnabled: boolean;
    leadTimeInWeeks: number;
    months: outputs.GetDatabaseDbSystemsDbSystemMaintenanceWindowDetailMonth[];
    patchingMode: string;
    preference: string;
    skipRus: boolean[];
    weeksOfMonths: number[];
}

export interface GetDatabaseDbSystemsDbSystemMaintenanceWindowDetailDaysOfWeek {
    name: string;
}

export interface GetDatabaseDbSystemsDbSystemMaintenanceWindowDetailMonth {
    name: string;
}

export interface GetDatabaseDbSystemsDbSystemMaintenanceWindowMonth {
    name: string;
}

export interface GetDatabaseDbSystemsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseDbSystemsUpgradeHistoryEntriesDbSystemUpgradeHistoryEntry {
    action: string;
    id: string;
    lifecycleDetails: string;
    newGiVersion: string;
    newOsVersion: string;
    oldGiVersion: string;
    oldOsVersion: string;
    snapshotRetentionPeriodInDays: number;
    state: string;
    timeEnded: string;
    timeStarted: string;
}

export interface GetDatabaseDbSystemsUpgradeHistoryEntriesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseDbVersionsDbVersion {
    isLatestForMajorVersion: boolean;
    isPreviewDbVersion: boolean;
    isUpgradeSupported: boolean;
    supportsPdb: boolean;
    version: string;
}

export interface GetDatabaseDbVersionsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseExadataInfrastructureContact {
    email: string;
    isContactMosValidated: boolean;
    isPrimary: boolean;
    name: string;
    phoneNumber: string;
}

export interface GetDatabaseExadataInfrastructureDefinedFileSystemConfiguration {
    isBackupPartition: boolean;
    isResizable: boolean;
    minSizeGb: number;
    mountPoint: string;
}

export interface GetDatabaseExadataInfrastructureMaintenanceWindow {
    customActionTimeoutInMins: number;
    daysOfWeeks: outputs.GetDatabaseExadataInfrastructureMaintenanceWindowDaysOfWeek[];
    hoursOfDays: number[];
    isCustomActionTimeoutEnabled: boolean;
    isMonthlyPatchingEnabled: boolean;
    leadTimeInWeeks: number;
    months: outputs.GetDatabaseExadataInfrastructureMaintenanceWindowMonth[];
    patchingMode: string;
    preference: string;
    skipRus: boolean[];
    weeksOfMonths: number[];
}

export interface GetDatabaseExadataInfrastructureMaintenanceWindowDaysOfWeek {
    name: string;
}

export interface GetDatabaseExadataInfrastructureMaintenanceWindowMonth {
    name: string;
}

export interface GetDatabaseExadataInfrastructureNetworkBondingModeDetail {
    backupNetworkBondingMode: string;
    clientNetworkBondingMode: string;
    drNetworkBondingMode: string;
}

export interface GetDatabaseExadataInfrastructureUnAllocatedResourceAutonomousVmCluster {
    id: string;
    unAllocatedAdbStorageInTbs: number;
}

export interface GetDatabaseExadataInfrastructuresExadataInfrastructure {
    activatedStorageCount: number;
    activationFile: string;
    additionalComputeCount: number;
    additionalComputeSystemModel: string;
    additionalStorageCount: number;
    adminNetworkCidr: string;
    availabilityDomain: string;
    cloudControlPlaneServer1: string;
    cloudControlPlaneServer2: string;
    compartmentId: string;
    computeCount: number;
    contacts: outputs.GetDatabaseExadataInfrastructuresExadataInfrastructureContact[];
    corporateProxy: string;
    cpusEnabled: number;
    createAsync: boolean;
    csiNumber: string;
    dataStorageSizeInTbs: number;
    dbNodeStorageSizeInGbs: number;
    dbServerVersion: string;
    definedFileSystemConfigurations: outputs.GetDatabaseExadataInfrastructuresExadataInfrastructureDefinedFileSystemConfiguration[];
    definedTags: {[key: string]: string};
    displayName: string;
    dnsServers: string[];
    freeformTags: {[key: string]: string};
    gateway: string;
    id: string;
    infiniBandNetworkCidr: string;
    isCpsOfflineReportEnabled: boolean;
    isMultiRackDeployment: boolean;
    lifecycleDetails: string;
    maintenanceSloStatus: string;
    maintenanceWindows: outputs.GetDatabaseExadataInfrastructuresExadataInfrastructureMaintenanceWindow[];
    maxCpuCount: number;
    maxDataStorageInTbs: number;
    maxDbNodeStorageInGbs: number;
    maxMemoryInGbs: number;
    memorySizeInGbs: number;
    monthlyDbServerVersion: string;
    multiRackConfigurationFile: string;
    netmask: string;
    networkBondingModeDetails: outputs.GetDatabaseExadataInfrastructuresExadataInfrastructureNetworkBondingModeDetail[];
    ntpServers: string[];
    rackSerialNumber: string;
    shape: string;
    state: string;
    storageCount: number;
    storageServerVersion: string;
    timeCreated: string;
    timeZone: string;
}

export interface GetDatabaseExadataInfrastructuresExadataInfrastructureContact {
    email: string;
    isContactMosValidated: boolean;
    isPrimary: boolean;
    name: string;
    phoneNumber: string;
}

export interface GetDatabaseExadataInfrastructuresExadataInfrastructureDefinedFileSystemConfiguration {
    isBackupPartition: boolean;
    isResizable: boolean;
    minSizeGb: number;
    mountPoint: string;
}

export interface GetDatabaseExadataInfrastructuresExadataInfrastructureMaintenanceWindow {
    customActionTimeoutInMins: number;
    daysOfWeeks: outputs.GetDatabaseExadataInfrastructuresExadataInfrastructureMaintenanceWindowDaysOfWeek[];
    hoursOfDays: number[];
    isCustomActionTimeoutEnabled: boolean;
    isMonthlyPatchingEnabled: boolean;
    leadTimeInWeeks: number;
    months: outputs.GetDatabaseExadataInfrastructuresExadataInfrastructureMaintenanceWindowMonth[];
    patchingMode: string;
    preference: string;
    skipRus: boolean[];
    weeksOfMonths: number[];
}

export interface GetDatabaseExadataInfrastructuresExadataInfrastructureMaintenanceWindowDaysOfWeek {
    name: string;
}

export interface GetDatabaseExadataInfrastructuresExadataInfrastructureMaintenanceWindowMonth {
    name: string;
}

export interface GetDatabaseExadataInfrastructuresExadataInfrastructureNetworkBondingModeDetail {
    backupNetworkBondingMode: string;
    clientNetworkBondingMode: string;
    drNetworkBondingMode: string;
}

export interface GetDatabaseExadataInfrastructuresFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseExadataIormConfigDbPlan {
    dbName: string;
    flashCacheLimit: string;
    share: number;
}

export interface GetDatabaseExadbVmClusterDataCollectionOption {
    isDiagnosticsEventsEnabled: boolean;
    isHealthMonitoringEnabled: boolean;
    isIncidentLogsEnabled: boolean;
}

export interface GetDatabaseExadbVmClusterIormConfigCach {
    dbPlans: outputs.GetDatabaseExadbVmClusterIormConfigCachDbPlan[];
    lifecycleDetails: string;
    objective: string;
    state: string;
}

export interface GetDatabaseExadbVmClusterIormConfigCachDbPlan {
    dbName: string;
    flashCacheLimit: string;
    share: number;
}

export interface GetDatabaseExadbVmClusterNodeConfig {
    enabledEcpuCountPerNode: number;
    memorySizeInGbsPerNode: number;
    snapshotFileSystemStorageSizeGbsPerNode: number;
    totalEcpuCountPerNode: number;
    totalFileSystemStorageSizeGbsPerNode: number;
    vmFileSystemStorageSizeGbsPerNode: number;
}

export interface GetDatabaseExadbVmClusterNodeResource {
    nodeHostname: string;
    nodeId: string;
    nodeName: string;
    state: string;
}

export interface GetDatabaseExadbVmClusterUpdateHistoryEntriesExadbVmClusterUpdateHistoryEntry {
    id: string;
    lifecycleDetails: string;
    state: string;
    timeCompleted: string;
    timeStarted: string;
    updateAction: string;
    updateId: string;
    updateType: string;
    version: string;
}

export interface GetDatabaseExadbVmClusterUpdateHistoryEntriesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseExadbVmClusterUpdatesExadbVmClusterUpdate {
    availableActions: string[];
    description: string;
    id: string;
    lastAction: string;
    lifecycleDetails: string;
    state: string;
    timeReleased: string;
    updateType: string;
    version: string;
}

export interface GetDatabaseExadbVmClusterUpdatesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseExadbVmClustersExadbVmCluster {
    availabilityDomain: string;
    backupNetworkNsgIds: string[];
    backupSubnetId: string;
    clusterName: string;
    compartmentId: string;
    dataCollectionOptions: outputs.GetDatabaseExadbVmClustersExadbVmClusterDataCollectionOption[];
    definedTags: {[key: string]: string};
    displayName: string;
    domain: string;
    exascaleDbStorageVaultId: string;
    freeformTags: {[key: string]: string};
    giVersion: string;
    gridImageId: string;
    gridImageType: string;
    hostname: string;
    id: string;
    iormConfigCaches: outputs.GetDatabaseExadbVmClustersExadbVmClusterIormConfigCach[];
    lastUpdateHistoryEntryId: string;
    licenseModel: string;
    lifecycleDetails: string;
    listenerPort: string;
    nodeConfigs: outputs.GetDatabaseExadbVmClustersExadbVmClusterNodeConfig[];
    nodeResources: outputs.GetDatabaseExadbVmClustersExadbVmClusterNodeResource[];
    nsgIds: string[];
    privateZoneId: string;
    scanDnsName: string;
    scanDnsRecordId: string;
    scanIpIds: string[];
    scanListenerPortTcp: number;
    scanListenerPortTcpSsl: number;
    shape: string;
    sshPublicKeys: string[];
    state: string;
    subnetId: string;
    systemTags: {[key: string]: string};
    systemVersion: string;
    timeCreated: string;
    timeZone: string;
    vipIds: string[];
    zoneId: string;
}

export interface GetDatabaseExadbVmClustersExadbVmClusterDataCollectionOption {
    isDiagnosticsEventsEnabled: boolean;
    isHealthMonitoringEnabled: boolean;
    isIncidentLogsEnabled: boolean;
}

export interface GetDatabaseExadbVmClustersExadbVmClusterIormConfigCach {
    dbPlans: outputs.GetDatabaseExadbVmClustersExadbVmClusterIormConfigCachDbPlan[];
    lifecycleDetails: string;
    objective: string;
    state: string;
}

export interface GetDatabaseExadbVmClustersExadbVmClusterIormConfigCachDbPlan {
    dbName: string;
    flashCacheLimit: string;
    share: number;
}

export interface GetDatabaseExadbVmClustersExadbVmClusterNodeConfig {
    enabledEcpuCountPerNode: number;
    memorySizeInGbsPerNode: number;
    snapshotFileSystemStorageSizeGbsPerNode: number;
    totalEcpuCountPerNode: number;
    totalFileSystemStorageSizeGbsPerNode: number;
    vmFileSystemStorageSizeGbsPerNode: number;
}

export interface GetDatabaseExadbVmClustersExadbVmClusterNodeResource {
    nodeHostname: string;
    nodeId: string;
    nodeName: string;
    state: string;
}

export interface GetDatabaseExadbVmClustersFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseExascaleDbStorageVaultHighCapacityDatabaseStorage {
    availableSizeInGbs: number;
    totalSizeInGbs: number;
}

export interface GetDatabaseExascaleDbStorageVaultsExascaleDbStorageVault {
    additionalFlashCacheInPercent: number;
    availabilityDomain: string;
    compartmentId: string;
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    freeformTags: {[key: string]: string};
    highCapacityDatabaseStorages: outputs.GetDatabaseExascaleDbStorageVaultsExascaleDbStorageVaultHighCapacityDatabaseStorage[];
    id: string;
    lifecycleDetails: string;
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeZone: string;
    vmClusterCount: number;
    vmClusterIds: string[];
}

export interface GetDatabaseExascaleDbStorageVaultsExascaleDbStorageVaultHighCapacityDatabaseStorage {
    availableSizeInGbs: number;
    totalSizeInGbs: number;
}

export interface GetDatabaseExascaleDbStorageVaultsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseExternalContainerDatabaseDatabaseManagementConfig {
    databaseManagementConnectionId: string;
    databaseManagementStatus: string;
    licenseModel: string;
}

export interface GetDatabaseExternalContainerDatabaseStackMonitoringConfig {
    stackMonitoringConnectorId: string;
    stackMonitoringStatus: string;
}

export interface GetDatabaseExternalContainerDatabasesExternalContainerDatabase {
    characterSet: string;
    compartmentId: string;
    databaseConfiguration: string;
    databaseEdition: string;
    databaseManagementConfigs: outputs.GetDatabaseExternalContainerDatabasesExternalContainerDatabaseDatabaseManagementConfig[];
    databaseVersion: string;
    dbId: string;
    dbPacks: string;
    dbUniqueName: string;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    lifecycleDetails: string;
    ncharacterSet: string;
    stackMonitoringConfigs: outputs.GetDatabaseExternalContainerDatabasesExternalContainerDatabaseStackMonitoringConfig[];
    state: string;
    timeCreated: string;
    timeZone: string;
}

export interface GetDatabaseExternalContainerDatabasesExternalContainerDatabaseDatabaseManagementConfig {
    databaseManagementConnectionId: string;
    databaseManagementStatus: string;
    licenseModel: string;
}

export interface GetDatabaseExternalContainerDatabasesExternalContainerDatabaseStackMonitoringConfig {
    stackMonitoringConnectorId: string;
    stackMonitoringStatus: string;
}

export interface GetDatabaseExternalContainerDatabasesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseExternalDatabaseConnectorConnectionCredential {
    credentialName: string;
    credentialType: string;
    password: string;
    role: string;
    sslSecretId: string;
    username: string;
}

export interface GetDatabaseExternalDatabaseConnectorConnectionString {
    hostname: string;
    port: number;
    protocol: string;
    service: string;
}

export interface GetDatabaseExternalDatabaseConnectorsExternalDatabaseConnector {
    compartmentId: string;
    connectionCredentials: outputs.GetDatabaseExternalDatabaseConnectorsExternalDatabaseConnectorConnectionCredential[];
    connectionStatus: string;
    connectionStrings: outputs.GetDatabaseExternalDatabaseConnectorsExternalDatabaseConnectorConnectionString[];
    connectorAgentId: string;
    connectorType: string;
    definedTags: {[key: string]: string};
    displayName: string;
    externalDatabaseId: string;
    freeformTags: {[key: string]: string};
    id: string;
    lifecycleDetails: string;
    state: string;
    timeConnectionStatusLastUpdated: string;
    timeCreated: string;
}

export interface GetDatabaseExternalDatabaseConnectorsExternalDatabaseConnectorConnectionCredential {
    credentialName: string;
    credentialType: string;
    password: string;
    role: string;
    sslSecretId: string;
    username: string;
}

export interface GetDatabaseExternalDatabaseConnectorsExternalDatabaseConnectorConnectionString {
    hostname: string;
    port: number;
    protocol: string;
    service: string;
}

export interface GetDatabaseExternalDatabaseConnectorsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseExternalNonContainerDatabaseDatabaseManagementConfig {
    databaseManagementConnectionId: string;
    databaseManagementStatus: string;
    licenseModel: string;
}

export interface GetDatabaseExternalNonContainerDatabaseOperationsInsightsConfig {
    operationsInsightsConnectorId: string;
    operationsInsightsStatus: string;
}

export interface GetDatabaseExternalNonContainerDatabaseStackMonitoringConfig {
    stackMonitoringConnectorId: string;
    stackMonitoringStatus: string;
}

export interface GetDatabaseExternalNonContainerDatabasesExternalNonContainerDatabase {
    characterSet: string;
    compartmentId: string;
    databaseConfiguration: string;
    databaseEdition: string;
    databaseManagementConfigs: outputs.GetDatabaseExternalNonContainerDatabasesExternalNonContainerDatabaseDatabaseManagementConfig[];
    databaseVersion: string;
    dbId: string;
    dbPacks: string;
    dbUniqueName: string;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    lifecycleDetails: string;
    ncharacterSet: string;
    operationsInsightsConfigs: outputs.GetDatabaseExternalNonContainerDatabasesExternalNonContainerDatabaseOperationsInsightsConfig[];
    stackMonitoringConfigs: outputs.GetDatabaseExternalNonContainerDatabasesExternalNonContainerDatabaseStackMonitoringConfig[];
    state: string;
    timeCreated: string;
    timeZone: string;
}

export interface GetDatabaseExternalNonContainerDatabasesExternalNonContainerDatabaseDatabaseManagementConfig {
    databaseManagementConnectionId: string;
    databaseManagementStatus: string;
    licenseModel: string;
}

export interface GetDatabaseExternalNonContainerDatabasesExternalNonContainerDatabaseOperationsInsightsConfig {
    operationsInsightsConnectorId: string;
    operationsInsightsStatus: string;
}

export interface GetDatabaseExternalNonContainerDatabasesExternalNonContainerDatabaseStackMonitoringConfig {
    stackMonitoringConnectorId: string;
    stackMonitoringStatus: string;
}

export interface GetDatabaseExternalNonContainerDatabasesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseExternalPluggableDatabaseDatabaseManagementConfig {
    databaseManagementConnectionId: string;
    databaseManagementStatus: string;
    licenseModel: string;
}

export interface GetDatabaseExternalPluggableDatabaseOperationsInsightsConfig {
    operationsInsightsConnectorId: string;
    operationsInsightsStatus: string;
}

export interface GetDatabaseExternalPluggableDatabaseStackMonitoringConfig {
    stackMonitoringConnectorId: string;
    stackMonitoringStatus: string;
}

export interface GetDatabaseExternalPluggableDatabasesExternalPluggableDatabase {
    characterSet: string;
    compartmentId: string;
    databaseConfiguration: string;
    databaseEdition: string;
    databaseManagementConfigs: outputs.GetDatabaseExternalPluggableDatabasesExternalPluggableDatabaseDatabaseManagementConfig[];
    databaseVersion: string;
    dbId: string;
    dbPacks: string;
    dbUniqueName: string;
    definedTags: {[key: string]: string};
    displayName: string;
    externalContainerDatabaseId: string;
    freeformTags: {[key: string]: string};
    id: string;
    lifecycleDetails: string;
    ncharacterSet: string;
    operationsInsightsConfigs: outputs.GetDatabaseExternalPluggableDatabasesExternalPluggableDatabaseOperationsInsightsConfig[];
    sourceId: string;
    stackMonitoringConfigs: outputs.GetDatabaseExternalPluggableDatabasesExternalPluggableDatabaseStackMonitoringConfig[];
    state: string;
    timeCreated: string;
    timeZone: string;
}

export interface GetDatabaseExternalPluggableDatabasesExternalPluggableDatabaseDatabaseManagementConfig {
    databaseManagementConnectionId: string;
    databaseManagementStatus: string;
    licenseModel: string;
}

export interface GetDatabaseExternalPluggableDatabasesExternalPluggableDatabaseOperationsInsightsConfig {
    operationsInsightsConnectorId: string;
    operationsInsightsStatus: string;
}

export interface GetDatabaseExternalPluggableDatabasesExternalPluggableDatabaseStackMonitoringConfig {
    stackMonitoringConnectorId: string;
    stackMonitoringStatus: string;
}

export interface GetDatabaseExternalPluggableDatabasesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseFlexComponentsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseFlexComponentsFlexComponentCollection {
    items: outputs.GetDatabaseFlexComponentsFlexComponentCollectionItem[];
}

export interface GetDatabaseFlexComponentsFlexComponentCollectionItem {
    availableCoreCount: number;
    availableDbStorageInGbs: number;
    minimumCoreCount: number;
    name: string;
}

export interface GetDatabaseGiVersionMinorVersionsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseGiVersionMinorVersionsGiMinorVersion {
    gridImageId: string;
    version: string;
}

export interface GetDatabaseGiVersionsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseGiVersionsGiVersion {
    version: string;
}

export interface GetDatabaseKeyStoreAssociatedDatabase {
    dbName: string;
    id: string;
}

export interface GetDatabaseKeyStoreTypeDetail {
    adminUsername: string;
    connectionIps: string[];
    secretId: string;
    type: string;
    vaultId: string;
}

export interface GetDatabaseKeyStoresFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseKeyStoresKeyStore {
    associatedDatabases: outputs.GetDatabaseKeyStoresKeyStoreAssociatedDatabase[];
    compartmentId: string;
    confirmDetailsTrigger: number;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    lifecycleDetails: string;
    state: string;
    timeCreated: string;
    typeDetails: outputs.GetDatabaseKeyStoresKeyStoreTypeDetail[];
}

export interface GetDatabaseKeyStoresKeyStoreAssociatedDatabase {
    dbName: string;
    id: string;
}

export interface GetDatabaseKeyStoresKeyStoreTypeDetail {
    adminUsername: string;
    connectionIps: string[];
    secretId: string;
    type: string;
    vaultId: string;
}

export interface GetDatabaseMaintenanceRunEstimatedPatchingTime {
    estimatedDbServerPatchingTime: number;
    estimatedNetworkSwitchesPatchingTime: number;
    estimatedStorageServerPatchingTime: number;
    totalEstimatedPatchingTime: number;
}

export interface GetDatabaseMaintenanceRunHistoriesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseMaintenanceRunHistoriesMaintenanceRunHistory {
    dbServersHistoryDetails: outputs.GetDatabaseMaintenanceRunHistoriesMaintenanceRunHistoryDbServersHistoryDetail[];
    id: string;
    maintenanceRunDetails: outputs.GetDatabaseMaintenanceRunHistoriesMaintenanceRunHistoryMaintenanceRunDetail[];
}

export interface GetDatabaseMaintenanceRunHistoriesMaintenanceRunHistoryDbServersHistoryDetail {
    dbServerPatchingDetails: outputs.GetDatabaseMaintenanceRunHistoriesMaintenanceRunHistoryDbServersHistoryDetailDbServerPatchingDetail[];
    displayName: string;
    id: string;
}

export interface GetDatabaseMaintenanceRunHistoriesMaintenanceRunHistoryDbServersHistoryDetailDbServerPatchingDetail {
    estimatedPatchDuration: number;
    patchingStatus: string;
    timePatchingEnded: string;
    timePatchingStarted: string;
}

export interface GetDatabaseMaintenanceRunHistoriesMaintenanceRunHistoryMaintenanceRunDetail {
    compartmentId: string;
    currentCustomActionTimeoutInMins: number;
    currentPatchingComponent: string;
    customActionTimeoutInMins: number;
    databaseSoftwareImageId: string;
    description: string;
    displayName: string;
    estimatedComponentPatchingStartTime: string;
    estimatedPatchingTimes: outputs.GetDatabaseMaintenanceRunHistoriesMaintenanceRunHistoryMaintenanceRunDetailEstimatedPatchingTime[];
    id: string;
    isCustomActionTimeoutEnabled: boolean;
    isDstFileUpdateEnabled: boolean;
    lifecycleDetails: string;
    maintenanceSubtype: string;
    maintenanceType: string;
    patchFailureCount: number;
    patchId: string;
    patchingEndTime: string;
    patchingMode: string;
    patchingStartTime: string;
    patchingStatus: string;
    peerMaintenanceRunId: string;
    state: string;
    targetDbServerVersion: string;
    targetResourceId: string;
    targetResourceType: string;
    targetStorageServerVersion: string;
    timeEnded: string;
    timeScheduled: string;
    timeStarted: string;
}

export interface GetDatabaseMaintenanceRunHistoriesMaintenanceRunHistoryMaintenanceRunDetailEstimatedPatchingTime {
    estimatedDbServerPatchingTime: number;
    estimatedNetworkSwitchesPatchingTime: number;
    estimatedStorageServerPatchingTime: number;
    totalEstimatedPatchingTime: number;
}

export interface GetDatabaseMaintenanceRunHistoryDbServersHistoryDetail {
    dbServerPatchingDetails: outputs.GetDatabaseMaintenanceRunHistoryDbServersHistoryDetailDbServerPatchingDetail[];
    displayName: string;
    id: string;
}

export interface GetDatabaseMaintenanceRunHistoryDbServersHistoryDetailDbServerPatchingDetail {
    estimatedPatchDuration: number;
    patchingStatus: string;
    timePatchingEnded: string;
    timePatchingStarted: string;
}

export interface GetDatabaseMaintenanceRunHistoryMaintenanceRunDetail {
    compartmentId: string;
    currentCustomActionTimeoutInMins: number;
    currentPatchingComponent: string;
    customActionTimeoutInMins: number;
    databaseSoftwareImageId: string;
    description: string;
    displayName: string;
    estimatedComponentPatchingStartTime: string;
    estimatedPatchingTimes: outputs.GetDatabaseMaintenanceRunHistoryMaintenanceRunDetailEstimatedPatchingTime[];
    id: string;
    isCustomActionTimeoutEnabled: boolean;
    isDstFileUpdateEnabled: boolean;
    lifecycleDetails: string;
    maintenanceSubtype: string;
    maintenanceType: string;
    patchFailureCount: number;
    patchId: string;
    patchingEndTime: string;
    patchingMode: string;
    patchingStartTime: string;
    patchingStatus: string;
    peerMaintenanceRunId: string;
    state: string;
    targetDbServerVersion: string;
    targetResourceId: string;
    targetResourceType: string;
    targetStorageServerVersion: string;
    timeEnded: string;
    timeScheduled: string;
    timeStarted: string;
}

export interface GetDatabaseMaintenanceRunHistoryMaintenanceRunDetailEstimatedPatchingTime {
    estimatedDbServerPatchingTime: number;
    estimatedNetworkSwitchesPatchingTime: number;
    estimatedStorageServerPatchingTime: number;
    totalEstimatedPatchingTime: number;
}

export interface GetDatabaseMaintenanceRunsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseMaintenanceRunsMaintenanceRun {
    compartmentId: string;
    currentCustomActionTimeoutInMins: number;
    currentPatchingComponent: string;
    customActionTimeoutInMins: number;
    databaseSoftwareImageId: string;
    description: string;
    displayName: string;
    estimatedComponentPatchingStartTime: string;
    estimatedPatchingTimes: outputs.GetDatabaseMaintenanceRunsMaintenanceRunEstimatedPatchingTime[];
    id: string;
    isCustomActionTimeoutEnabled: boolean;
    isDstFileUpdateEnabled: boolean;
    lifecycleDetails: string;
    maintenanceSubtype: string;
    maintenanceType: string;
    patchFailureCount: number;
    patchId: string;
    patchType: string;
    patchingEndTime: string;
    patchingMode: string;
    patchingStartTime: string;
    patchingStatus: string;
    peerMaintenanceRunId: string;
    state: string;
    targetDbServerVersion: string;
    targetResourceId: string;
    targetResourceType: string;
    targetStorageServerVersion: string;
    timeEnded: string;
    timeScheduled: string;
    timeStarted: string;
}

export interface GetDatabaseMaintenanceRunsMaintenanceRunEstimatedPatchingTime {
    estimatedDbServerPatchingTime: number;
    estimatedNetworkSwitchesPatchingTime: number;
    estimatedStorageServerPatchingTime: number;
    totalEstimatedPatchingTime: number;
}

export interface GetDatabaseManagementDbManagementPrivateEndpointAssociatedDatabaseItem {
    compartmentId: string;
    id: string;
    name: string;
    timeRegistered: string;
}

export interface GetDatabaseManagementDbManagementPrivateEndpointAssociatedDatabasesAssociatedDatabaseCollection {
    items: outputs.GetDatabaseManagementDbManagementPrivateEndpointAssociatedDatabasesAssociatedDatabaseCollectionItem[];
}

export interface GetDatabaseManagementDbManagementPrivateEndpointAssociatedDatabasesAssociatedDatabaseCollectionItem {
    compartmentId: string;
    id: string;
    name: string;
    timeRegistered: string;
}

export interface GetDatabaseManagementDbManagementPrivateEndpointAssociatedDatabasesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseManagementDbManagementPrivateEndpointsDbManagementPrivateEndpointCollection {
    items: outputs.GetDatabaseManagementDbManagementPrivateEndpointsDbManagementPrivateEndpointCollectionItem[];
}

export interface GetDatabaseManagementDbManagementPrivateEndpointsDbManagementPrivateEndpointCollectionItem {
    compartmentId: string;
    definedTags: {[key: string]: string};
    description: string;
    freeformTags: {[key: string]: string};
    id: string;
    isCluster: boolean;
    isDnsResolutionEnabled: boolean;
    name: string;
    nsgIds: string[];
    privateIp: string;
    state: string;
    subnetId: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    vcnId: string;
}

export interface GetDatabaseManagementDbManagementPrivateEndpointsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseManagementExternalAsmConfigurationInitParameter {
    asmInstanceDisplayName: string;
    asmInstanceId: string;
    autoMountDiskGroups: string[];
    diskDiscoveryPath: string;
    preferredReadFailureGroups: string[];
    rebalancePower: number;
}

export interface GetDatabaseManagementExternalAsmDiskGroupsExternalAsmDiskGroupCollection {
    items: outputs.GetDatabaseManagementExternalAsmDiskGroupsExternalAsmDiskGroupCollectionItem[];
}

export interface GetDatabaseManagementExternalAsmDiskGroupsExternalAsmDiskGroupCollectionItem {
    databases: string[];
    dismountingInstanceCount: number;
    isSparse: boolean;
    mountingInstanceCount: number;
    name: string;
    redundancyType: string;
    totalSizeInMbs: string;
    usedPercent: number;
    usedSizeInMbs: string;
}

export interface GetDatabaseManagementExternalAsmDiskGroupsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseManagementExternalAsmInstancesExternalAsmInstanceCollection {
    items: outputs.GetDatabaseManagementExternalAsmInstancesExternalAsmInstanceCollectionItem[];
}

export interface GetDatabaseManagementExternalAsmInstancesExternalAsmInstanceCollectionItem {
    adrHomeDirectory: string;
    compartmentId: string;
    componentName: string;
    definedTags: {[key: string]: string};
    displayName: string;
    externalAsmId: string;
    externalAsmInstanceId: string;
    externalDbNodeId: string;
    externalDbSystemId: string;
    freeformTags: {[key: string]: string};
    hostName: string;
    id: string;
    lifecycleDetails: string;
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
}

export interface GetDatabaseManagementExternalAsmInstancesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseManagementExternalAsmServicedDatabase {
    compartmentId: string;
    databaseSubType: string;
    databaseType: string;
    dbUniqueName: string;
    diskGroups: string[];
    displayName: string;
    id: string;
    isManaged: boolean;
}

export interface GetDatabaseManagementExternalAsmUsersExternalAsmUserCollection {
    items: outputs.GetDatabaseManagementExternalAsmUsersExternalAsmUserCollectionItem[];
}

export interface GetDatabaseManagementExternalAsmUsersExternalAsmUserCollectionItem {
    asmId: string;
    name: string;
    privileges: string[];
}

export interface GetDatabaseManagementExternalAsmUsersFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseManagementExternalAsmsExternalAsmCollection {
    items: outputs.GetDatabaseManagementExternalAsmsExternalAsmCollectionItem[];
}

export interface GetDatabaseManagementExternalAsmsExternalAsmCollectionItem {
    additionalDetails: {[key: string]: string};
    compartmentId: string;
    componentName: string;
    definedTags: {[key: string]: string};
    displayName: string;
    externalAsmId: string;
    externalConnectorId: string;
    externalDbSystemId: string;
    freeformTags: {[key: string]: string};
    gridHome: string;
    id: string;
    isCluster: boolean;
    isFlexEnabled: boolean;
    lifecycleDetails: string;
    servicedDatabases: outputs.GetDatabaseManagementExternalAsmsExternalAsmCollectionItemServicedDatabase[];
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
    version: string;
}

export interface GetDatabaseManagementExternalAsmsExternalAsmCollectionItemServicedDatabase {
    compartmentId: string;
    databaseSubType: string;
    databaseType: string;
    dbUniqueName: string;
    diskGroups: string[];
    displayName: string;
    id: string;
    isManaged: boolean;
}

export interface GetDatabaseManagementExternalAsmsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseManagementExternalClusterInstancesExternalClusterInstanceCollection {
    items: outputs.GetDatabaseManagementExternalClusterInstancesExternalClusterInstanceCollectionItem[];
}

export interface GetDatabaseManagementExternalClusterInstancesExternalClusterInstanceCollectionItem {
    adrHomeDirectory: string;
    compartmentId: string;
    componentName: string;
    crsBaseDirectory: string;
    definedTags: {[key: string]: string};
    displayName: string;
    externalClusterId: string;
    externalClusterInstanceId: string;
    externalConnectorId: string;
    externalDbNodeId: string;
    externalDbSystemId: string;
    freeformTags: {[key: string]: string};
    hostName: string;
    id: string;
    lifecycleDetails: string;
    nodeRole: string;
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
}

export interface GetDatabaseManagementExternalClusterInstancesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseManagementExternalClusterNetworkConfiguration {
    networkNumber: number;
    networkType: string;
    subnet: string;
}

export interface GetDatabaseManagementExternalClusterScanConfiguration {
    networkNumber: number;
    scanName: string;
    scanPort: number;
    scanProtocol: string;
}

export interface GetDatabaseManagementExternalClusterVipConfiguration {
    address: string;
    networkNumber: number;
    nodeName: string;
}

export interface GetDatabaseManagementExternalClustersExternalClusterCollection {
    items: outputs.GetDatabaseManagementExternalClustersExternalClusterCollectionItem[];
}

export interface GetDatabaseManagementExternalClustersExternalClusterCollectionItem {
    additionalDetails: {[key: string]: string};
    compartmentId: string;
    componentName: string;
    definedTags: {[key: string]: string};
    displayName: string;
    externalClusterId: string;
    externalConnectorId: string;
    externalDbSystemId: string;
    freeformTags: {[key: string]: string};
    gridHome: string;
    id: string;
    isFlexCluster: boolean;
    lifecycleDetails: string;
    networkConfigurations: outputs.GetDatabaseManagementExternalClustersExternalClusterCollectionItemNetworkConfiguration[];
    ocrFileLocation: string;
    scanConfigurations: outputs.GetDatabaseManagementExternalClustersExternalClusterCollectionItemScanConfiguration[];
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
    version: string;
    vipConfigurations: outputs.GetDatabaseManagementExternalClustersExternalClusterCollectionItemVipConfiguration[];
}

export interface GetDatabaseManagementExternalClustersExternalClusterCollectionItemNetworkConfiguration {
    networkNumber: number;
    networkType: string;
    subnet: string;
}

export interface GetDatabaseManagementExternalClustersExternalClusterCollectionItemScanConfiguration {
    networkNumber: number;
    scanName: string;
    scanPort: number;
    scanProtocol: string;
}

export interface GetDatabaseManagementExternalClustersExternalClusterCollectionItemVipConfiguration {
    address: string;
    networkNumber: number;
    nodeName: string;
}

export interface GetDatabaseManagementExternalClustersFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseManagementExternalDatabasesExternalDatabaseCollection {
    items: outputs.GetDatabaseManagementExternalDatabasesExternalDatabaseCollectionItem[];
}

export interface GetDatabaseManagementExternalDatabasesExternalDatabaseCollectionItem {
    compartmentId: string;
    databasePlatformName: string;
    databaseSubType: string;
    databaseType: string;
    databaseVersion: string;
    dbManagementConfigs: outputs.GetDatabaseManagementExternalDatabasesExternalDatabaseCollectionItemDbManagementConfig[];
    dbSystemInfos: outputs.GetDatabaseManagementExternalDatabasesExternalDatabaseCollectionItemDbSystemInfo[];
    dbUniqueName: string;
    dbmgmtFeatureConfigs: outputs.GetDatabaseManagementExternalDatabasesExternalDatabaseCollectionItemDbmgmtFeatureConfig[];
    definedTags: {[key: string]: string};
    displayName: string;
    externalContainerDatabaseId: string;
    externalDbHomeId: string;
    freeformTags: {[key: string]: string};
    id: string;
    instanceDetails: outputs.GetDatabaseManagementExternalDatabasesExternalDatabaseCollectionItemInstanceDetail[];
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
}

export interface GetDatabaseManagementExternalDatabasesExternalDatabaseCollectionItemDbManagementConfig {
    connectorId: string;
    databaseManagementStatus: string;
    licenseModel: string;
}

export interface GetDatabaseManagementExternalDatabasesExternalDatabaseCollectionItemDbSystemInfo {
    compartmentId: string;
    displayName: string;
    exadataInfraInfos: outputs.GetDatabaseManagementExternalDatabasesExternalDatabaseCollectionItemDbSystemInfoExadataInfraInfo[];
    id: string;
}

export interface GetDatabaseManagementExternalDatabasesExternalDatabaseCollectionItemDbSystemInfoExadataInfraInfo {
    compartmentId: string;
    displayName: string;
    id: string;
}

export interface GetDatabaseManagementExternalDatabasesExternalDatabaseCollectionItemDbmgmtFeatureConfig {
    connectorDetails: outputs.GetDatabaseManagementExternalDatabasesExternalDatabaseCollectionItemDbmgmtFeatureConfigConnectorDetail[];
    databaseConnectionDetails: outputs.GetDatabaseManagementExternalDatabasesExternalDatabaseCollectionItemDbmgmtFeatureConfigDatabaseConnectionDetail[];
    feature: string;
    featureStatus: string;
    licenseModel: string;
}

export interface GetDatabaseManagementExternalDatabasesExternalDatabaseCollectionItemDbmgmtFeatureConfigConnectorDetail {
    connectorType: string;
    databaseConnectorId: string;
    managementAgentId: string;
    privateEndPointId: string;
}

export interface GetDatabaseManagementExternalDatabasesExternalDatabaseCollectionItemDbmgmtFeatureConfigDatabaseConnectionDetail {
    connectionCredentials: outputs.GetDatabaseManagementExternalDatabasesExternalDatabaseCollectionItemDbmgmtFeatureConfigDatabaseConnectionDetailConnectionCredential[];
    connectionStrings: outputs.GetDatabaseManagementExternalDatabasesExternalDatabaseCollectionItemDbmgmtFeatureConfigDatabaseConnectionDetailConnectionString[];
}

export interface GetDatabaseManagementExternalDatabasesExternalDatabaseCollectionItemDbmgmtFeatureConfigDatabaseConnectionDetailConnectionCredential {
    credentialName: string;
    credentialType: string;
    namedCredentialId: string;
    passwordSecretId: string;
    role: string;
    sslSecretId: string;
    userName: string;
}

export interface GetDatabaseManagementExternalDatabasesExternalDatabaseCollectionItemDbmgmtFeatureConfigDatabaseConnectionDetailConnectionString {
    connectionType: string;
    port: number;
    protocol: string;
    service: string;
}

export interface GetDatabaseManagementExternalDatabasesExternalDatabaseCollectionItemInstanceDetail {
    hostName: string;
    instanceName: string;
    instanceNumber: number;
}

export interface GetDatabaseManagementExternalDatabasesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseManagementExternalDbHomesExternalDbHomeCollection {
    items: outputs.GetDatabaseManagementExternalDbHomesExternalDbHomeCollectionItem[];
}

export interface GetDatabaseManagementExternalDbHomesExternalDbHomeCollectionItem {
    additionalDetails: {[key: string]: string};
    compartmentId: string;
    componentName: string;
    definedTags: {[key: string]: string};
    displayName: string;
    externalDbHomeId: string;
    externalDbSystemId: string;
    freeformTags: {[key: string]: string};
    homeDirectory: string;
    id: string;
    lifecycleDetails: string;
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
}

export interface GetDatabaseManagementExternalDbHomesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseManagementExternalDbNodesExternalDbNodeCollection {
    items: outputs.GetDatabaseManagementExternalDbNodesExternalDbNodeCollectionItem[];
}

export interface GetDatabaseManagementExternalDbNodesExternalDbNodeCollectionItem {
    additionalDetails: {[key: string]: string};
    compartmentId: string;
    componentName: string;
    cpuCoreCount: number;
    definedTags: {[key: string]: string};
    displayName: string;
    domainName: string;
    externalConnectorId: string;
    externalDbNodeId: string;
    externalDbSystemId: string;
    freeformTags: {[key: string]: string};
    hostName: string;
    id: string;
    lifecycleDetails: string;
    memorySizeInGbs: number;
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
}

export interface GetDatabaseManagementExternalDbNodesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseManagementExternalDbSystemConnectorConnectionInfo {
    componentType: string;
    connectionCredentials: outputs.GetDatabaseManagementExternalDbSystemConnectorConnectionInfoConnectionCredential[];
    connectionStrings: outputs.GetDatabaseManagementExternalDbSystemConnectorConnectionInfoConnectionString[];
    databaseCredentials: outputs.GetDatabaseManagementExternalDbSystemConnectorConnectionInfoDatabaseCredential[];
}

export interface GetDatabaseManagementExternalDbSystemConnectorConnectionInfoConnectionCredential {
    credentialName: string;
    credentialType: string;
    namedCredentialId: string;
    passwordSecretId: string;
    role: string;
    sslSecretId: string;
    userName: string;
}

export interface GetDatabaseManagementExternalDbSystemConnectorConnectionInfoConnectionString {
    hostName: string;
    hosts: string[];
    port: number;
    protocol: string;
    service: string;
}

export interface GetDatabaseManagementExternalDbSystemConnectorConnectionInfoDatabaseCredential {
    credentialType: string;
    namedCredentialId: string;
    password: string;
    passwordSecretId: string;
    role: string;
    username: string;
}

export interface GetDatabaseManagementExternalDbSystemConnectorsExternalDbSystemConnectorCollection {
    items: outputs.GetDatabaseManagementExternalDbSystemConnectorsExternalDbSystemConnectorCollectionItem[];
}

export interface GetDatabaseManagementExternalDbSystemConnectorsExternalDbSystemConnectorCollectionItem {
    agentId: string;
    compartmentId: string;
    connectionFailureMessage: string;
    connectionInfos: outputs.GetDatabaseManagementExternalDbSystemConnectorsExternalDbSystemConnectorCollectionItemConnectionInfo[];
    connectionStatus: string;
    connectorType: string;
    definedTags: {[key: string]: string};
    displayName: string;
    externalDbSystemId: string;
    freeformTags: {[key: string]: string};
    id: string;
    lifecycleDetails: string;
    state: string;
    systemTags: {[key: string]: string};
    timeConnectionStatusLastUpdated: string;
    timeCreated: string;
    timeUpdated: string;
}

export interface GetDatabaseManagementExternalDbSystemConnectorsExternalDbSystemConnectorCollectionItemConnectionInfo {
    componentType: string;
    connectionCredentials: outputs.GetDatabaseManagementExternalDbSystemConnectorsExternalDbSystemConnectorCollectionItemConnectionInfoConnectionCredential[];
    connectionStrings: outputs.GetDatabaseManagementExternalDbSystemConnectorsExternalDbSystemConnectorCollectionItemConnectionInfoConnectionString[];
    databaseCredentials: outputs.GetDatabaseManagementExternalDbSystemConnectorsExternalDbSystemConnectorCollectionItemConnectionInfoDatabaseCredential[];
}

export interface GetDatabaseManagementExternalDbSystemConnectorsExternalDbSystemConnectorCollectionItemConnectionInfoConnectionCredential {
    credentialName: string;
    credentialType: string;
    namedCredentialId: string;
    passwordSecretId: string;
    role: string;
    sslSecretId: string;
    userName: string;
}

export interface GetDatabaseManagementExternalDbSystemConnectorsExternalDbSystemConnectorCollectionItemConnectionInfoConnectionString {
    hostName: string;
    hosts: string[];
    port: number;
    protocol: string;
    service: string;
}

export interface GetDatabaseManagementExternalDbSystemConnectorsExternalDbSystemConnectorCollectionItemConnectionInfoDatabaseCredential {
    credentialType: string;
    namedCredentialId: string;
    password: string;
    passwordSecretId: string;
    role: string;
    username: string;
}

export interface GetDatabaseManagementExternalDbSystemConnectorsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseManagementExternalDbSystemDatabaseManagementConfig {
    licenseModel: string;
}

export interface GetDatabaseManagementExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollection {
    items: outputs.GetDatabaseManagementExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItem[];
}

export interface GetDatabaseManagementExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItem {
    agentId: string;
    compartmentId: string;
    definedTags: {[key: string]: string};
    discoveredComponents: outputs.GetDatabaseManagementExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponent[];
    displayName: string;
    externalDbSystemDiscoveryId: string;
    freeformTags: {[key: string]: string};
    gridHome: string;
    id: string;
    lifecycleDetails: string;
    patchOperations: outputs.GetDatabaseManagementExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemPatchOperation[];
    resourceId: string;
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
}

export interface GetDatabaseManagementExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponent {
    adrHomeDirectory: string;
    asmInstances: outputs.GetDatabaseManagementExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentAsmInstance[];
    associatedComponents: outputs.GetDatabaseManagementExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentAssociatedComponent[];
    clusterId: string;
    clusterInstances: outputs.GetDatabaseManagementExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentClusterInstance[];
    compartmentId: string;
    componentId: string;
    componentName: string;
    componentType: string;
    connectors: outputs.GetDatabaseManagementExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentConnector[];
    containerDatabaseId: string;
    cpuCoreCount: number;
    crsBaseDirectory: string;
    dbEdition: string;
    dbId: string;
    dbNodeName: string;
    dbPacks: string;
    dbRole: string;
    dbType: string;
    dbUniqueName: string;
    dbVersion: string;
    displayName: string;
    endpoints: outputs.GetDatabaseManagementExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentEndpoint[];
    gridHome: string;
    guid: string;
    homeDirectory: string;
    hostName: string;
    instanceName: string;
    isCluster: boolean;
    isFlexCluster: boolean;
    isFlexEnabled: boolean;
    isSelectedForMonitoring: boolean;
    listenerAlias: string;
    listenerType: string;
    logDirectory: string;
    memorySizeInGbs: number;
    networkConfigurations: outputs.GetDatabaseManagementExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentNetworkConfiguration[];
    nodeRole: string;
    ocrFileLocation: string;
    oracleHome: string;
    pluggableDatabases: outputs.GetDatabaseManagementExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentPluggableDatabase[];
    resourceId: string;
    scanConfigurations: outputs.GetDatabaseManagementExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentScanConfiguration[];
    status: string;
    traceDirectory: string;
    version: string;
    vipConfigurations: outputs.GetDatabaseManagementExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentVipConfiguration[];
}

export interface GetDatabaseManagementExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentAsmInstance {
    adrHomeDirectory: string;
    hostName: string;
    instanceName: string;
}

export interface GetDatabaseManagementExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentAssociatedComponent {
    associationType: string;
    componentId: string;
    componentType: string;
}

export interface GetDatabaseManagementExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentClusterInstance {
    adrHomeDirectory: string;
    clusterId: string;
    connectors: outputs.GetDatabaseManagementExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentClusterInstanceConnector[];
    crsBaseDirectory: string;
    hostName: string;
    nodeRole: string;
}

export interface GetDatabaseManagementExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentClusterInstanceConnector {
    agentId: string;
    connectionFailureMessage: string;
    connectionInfos: outputs.GetDatabaseManagementExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentClusterInstanceConnectorConnectionInfo[];
    connectionStatus: string;
    connectorType: string;
    displayName: string;
    timeConnectionStatusLastUpdated: string;
}

export interface GetDatabaseManagementExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentClusterInstanceConnectorConnectionInfo {
    componentType: string;
    connectionCredentials: outputs.GetDatabaseManagementExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentClusterInstanceConnectorConnectionInfoConnectionCredential[];
    connectionStrings: outputs.GetDatabaseManagementExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentClusterInstanceConnectorConnectionInfoConnectionString[];
    databaseCredentials: outputs.GetDatabaseManagementExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentClusterInstanceConnectorConnectionInfoDatabaseCredential[];
}

export interface GetDatabaseManagementExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentClusterInstanceConnectorConnectionInfoConnectionCredential {
    credentialName: string;
    credentialType: string;
    namedCredentialId: string;
    passwordSecretId: string;
    role: string;
    sslSecretId: string;
    userName: string;
}

export interface GetDatabaseManagementExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentClusterInstanceConnectorConnectionInfoConnectionString {
    hostName: string;
    hosts: string[];
    port: number;
    protocol: string;
    service: string;
}

export interface GetDatabaseManagementExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentClusterInstanceConnectorConnectionInfoDatabaseCredential {
    credentialType: string;
    namedCredentialId: string;
    password: string;
    passwordSecretId: string;
    role: string;
    username: string;
}

export interface GetDatabaseManagementExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentConnector {
    agentId: string;
    connectionFailureMessage: string;
    connectionInfos: outputs.GetDatabaseManagementExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentConnectorConnectionInfo[];
    connectionStatus: string;
    connectorType: string;
    displayName: string;
    timeConnectionStatusLastUpdated: string;
}

export interface GetDatabaseManagementExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentConnectorConnectionInfo {
    componentType: string;
    connectionCredentials: outputs.GetDatabaseManagementExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentConnectorConnectionInfoConnectionCredential[];
    connectionStrings: outputs.GetDatabaseManagementExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentConnectorConnectionInfoConnectionString[];
    databaseCredentials: outputs.GetDatabaseManagementExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentConnectorConnectionInfoDatabaseCredential[];
}

export interface GetDatabaseManagementExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentConnectorConnectionInfoConnectionCredential {
    credentialName: string;
    credentialType: string;
    namedCredentialId: string;
    passwordSecretId: string;
    role: string;
    sslSecretId: string;
    userName: string;
}

export interface GetDatabaseManagementExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentConnectorConnectionInfoConnectionString {
    hostName: string;
    hosts: string[];
    port: number;
    protocol: string;
    service: string;
}

export interface GetDatabaseManagementExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentConnectorConnectionInfoDatabaseCredential {
    credentialType: string;
    namedCredentialId: string;
    password: string;
    passwordSecretId: string;
    role: string;
    username: string;
}

export interface GetDatabaseManagementExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentEndpoint {
    host: string;
    key: string;
    port: number;
    protocol: string;
    services: string[];
}

export interface GetDatabaseManagementExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentNetworkConfiguration {
    networkNumber: number;
    networkType: string;
    subnet: string;
}

export interface GetDatabaseManagementExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentPluggableDatabase {
    compartmentId: string;
    connectors: outputs.GetDatabaseManagementExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentPluggableDatabaseConnector[];
    containerDatabaseId: string;
    guid: string;
}

export interface GetDatabaseManagementExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentPluggableDatabaseConnector {
    agentId: string;
    connectionFailureMessage: string;
    connectionInfos: outputs.GetDatabaseManagementExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentPluggableDatabaseConnectorConnectionInfo[];
    connectionStatus: string;
    connectorType: string;
    displayName: string;
    timeConnectionStatusLastUpdated: string;
}

export interface GetDatabaseManagementExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentPluggableDatabaseConnectorConnectionInfo {
    componentType: string;
    connectionCredentials: outputs.GetDatabaseManagementExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentPluggableDatabaseConnectorConnectionInfoConnectionCredential[];
    connectionStrings: outputs.GetDatabaseManagementExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentPluggableDatabaseConnectorConnectionInfoConnectionString[];
    databaseCredentials: outputs.GetDatabaseManagementExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentPluggableDatabaseConnectorConnectionInfoDatabaseCredential[];
}

export interface GetDatabaseManagementExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentPluggableDatabaseConnectorConnectionInfoConnectionCredential {
    credentialName: string;
    credentialType: string;
    namedCredentialId: string;
    passwordSecretId: string;
    role: string;
    sslSecretId: string;
    userName: string;
}

export interface GetDatabaseManagementExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentPluggableDatabaseConnectorConnectionInfoConnectionString {
    hostName: string;
    hosts: string[];
    port: number;
    protocol: string;
    service: string;
}

export interface GetDatabaseManagementExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentPluggableDatabaseConnectorConnectionInfoDatabaseCredential {
    credentialType: string;
    namedCredentialId: string;
    password: string;
    passwordSecretId: string;
    role: string;
    username: string;
}

export interface GetDatabaseManagementExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentScanConfiguration {
    networkNumber: number;
    scanName: string;
    scanPort: number;
    scanProtocol: string;
}

export interface GetDatabaseManagementExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentVipConfiguration {
    address: string;
    networkNumber: number;
    nodeName: string;
}

export interface GetDatabaseManagementExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemPatchOperation {
    operation: string;
    selection: string;
    values: outputs.GetDatabaseManagementExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemPatchOperationValue[];
}

export interface GetDatabaseManagementExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemPatchOperationValue {
    compartmentId: string;
    connectors: outputs.GetDatabaseManagementExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemPatchOperationValueConnector[];
    displayName: string;
    isSelectedForMonitoring: boolean;
}

export interface GetDatabaseManagementExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemPatchOperationValueConnector {
    agentId: string;
    connectionInfos: outputs.GetDatabaseManagementExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemPatchOperationValueConnectorConnectionInfo[];
    connectorType: string;
    displayName: string;
}

export interface GetDatabaseManagementExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemPatchOperationValueConnectorConnectionInfo {
    componentType: string;
    connectionCredentials: outputs.GetDatabaseManagementExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemPatchOperationValueConnectorConnectionInfoConnectionCredential[];
    connectionStrings: outputs.GetDatabaseManagementExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemPatchOperationValueConnectorConnectionInfoConnectionString[];
}

export interface GetDatabaseManagementExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemPatchOperationValueConnectorConnectionInfoConnectionCredential {
    credentialName: string;
    credentialType: string;
    passwordSecretId: string;
    role: string;
    sslSecretId: string;
    userName: string;
}

export interface GetDatabaseManagementExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemPatchOperationValueConnectorConnectionInfoConnectionString {
    hostName: string;
    hosts: string[];
    port: number;
    protocol: string;
    service: string;
}

export interface GetDatabaseManagementExternalDbSystemDiscoveriesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseManagementExternalDbSystemDiscoveryDiscoveredComponent {
    adrHomeDirectory: string;
    asmInstances: outputs.GetDatabaseManagementExternalDbSystemDiscoveryDiscoveredComponentAsmInstance[];
    associatedComponents: outputs.GetDatabaseManagementExternalDbSystemDiscoveryDiscoveredComponentAssociatedComponent[];
    clusterId: string;
    clusterInstances: outputs.GetDatabaseManagementExternalDbSystemDiscoveryDiscoveredComponentClusterInstance[];
    compartmentId: string;
    componentId: string;
    componentName: string;
    componentType: string;
    connectors: outputs.GetDatabaseManagementExternalDbSystemDiscoveryDiscoveredComponentConnector[];
    containerDatabaseId: string;
    cpuCoreCount: number;
    crsBaseDirectory: string;
    dbEdition: string;
    dbId: string;
    dbNodeName: string;
    dbPacks: string;
    dbRole: string;
    dbType: string;
    dbUniqueName: string;
    dbVersion: string;
    displayName: string;
    endpoints: outputs.GetDatabaseManagementExternalDbSystemDiscoveryDiscoveredComponentEndpoint[];
    gridHome: string;
    guid: string;
    homeDirectory: string;
    hostName: string;
    instanceName: string;
    isCluster: boolean;
    isFlexCluster: boolean;
    isFlexEnabled: boolean;
    isSelectedForMonitoring: boolean;
    listenerAlias: string;
    listenerType: string;
    logDirectory: string;
    memorySizeInGbs: number;
    networkConfigurations: outputs.GetDatabaseManagementExternalDbSystemDiscoveryDiscoveredComponentNetworkConfiguration[];
    nodeRole: string;
    ocrFileLocation: string;
    oracleHome: string;
    pluggableDatabases: outputs.GetDatabaseManagementExternalDbSystemDiscoveryDiscoveredComponentPluggableDatabase[];
    resourceId: string;
    scanConfigurations: outputs.GetDatabaseManagementExternalDbSystemDiscoveryDiscoveredComponentScanConfiguration[];
    status: string;
    traceDirectory: string;
    version: string;
    vipConfigurations: outputs.GetDatabaseManagementExternalDbSystemDiscoveryDiscoveredComponentVipConfiguration[];
}

export interface GetDatabaseManagementExternalDbSystemDiscoveryDiscoveredComponentAsmInstance {
    adrHomeDirectory: string;
    hostName: string;
    instanceName: string;
}

export interface GetDatabaseManagementExternalDbSystemDiscoveryDiscoveredComponentAssociatedComponent {
    associationType: string;
    componentId: string;
    componentType: string;
}

export interface GetDatabaseManagementExternalDbSystemDiscoveryDiscoveredComponentClusterInstance {
    adrHomeDirectory: string;
    clusterId: string;
    connectors: outputs.GetDatabaseManagementExternalDbSystemDiscoveryDiscoveredComponentClusterInstanceConnector[];
    crsBaseDirectory: string;
    hostName: string;
    nodeRole: string;
}

export interface GetDatabaseManagementExternalDbSystemDiscoveryDiscoveredComponentClusterInstanceConnector {
    agentId: string;
    connectionFailureMessage: string;
    connectionInfos: outputs.GetDatabaseManagementExternalDbSystemDiscoveryDiscoveredComponentClusterInstanceConnectorConnectionInfo[];
    connectionStatus: string;
    connectorType: string;
    displayName: string;
    timeConnectionStatusLastUpdated: string;
}

export interface GetDatabaseManagementExternalDbSystemDiscoveryDiscoveredComponentClusterInstanceConnectorConnectionInfo {
    componentType: string;
    connectionCredentials: outputs.GetDatabaseManagementExternalDbSystemDiscoveryDiscoveredComponentClusterInstanceConnectorConnectionInfoConnectionCredential[];
    connectionStrings: outputs.GetDatabaseManagementExternalDbSystemDiscoveryDiscoveredComponentClusterInstanceConnectorConnectionInfoConnectionString[];
    databaseCredentials: outputs.GetDatabaseManagementExternalDbSystemDiscoveryDiscoveredComponentClusterInstanceConnectorConnectionInfoDatabaseCredential[];
}

export interface GetDatabaseManagementExternalDbSystemDiscoveryDiscoveredComponentClusterInstanceConnectorConnectionInfoConnectionCredential {
    credentialName: string;
    credentialType: string;
    namedCredentialId: string;
    passwordSecretId: string;
    role: string;
    sslSecretId: string;
    userName: string;
}

export interface GetDatabaseManagementExternalDbSystemDiscoveryDiscoveredComponentClusterInstanceConnectorConnectionInfoConnectionString {
    hostName: string;
    hosts: string[];
    port: number;
    protocol: string;
    service: string;
}

export interface GetDatabaseManagementExternalDbSystemDiscoveryDiscoveredComponentClusterInstanceConnectorConnectionInfoDatabaseCredential {
    credentialType: string;
    namedCredentialId: string;
    password: string;
    passwordSecretId: string;
    role: string;
    username: string;
}

export interface GetDatabaseManagementExternalDbSystemDiscoveryDiscoveredComponentConnector {
    agentId: string;
    connectionFailureMessage: string;
    connectionInfos: outputs.GetDatabaseManagementExternalDbSystemDiscoveryDiscoveredComponentConnectorConnectionInfo[];
    connectionStatus: string;
    connectorType: string;
    displayName: string;
    timeConnectionStatusLastUpdated: string;
}

export interface GetDatabaseManagementExternalDbSystemDiscoveryDiscoveredComponentConnectorConnectionInfo {
    componentType: string;
    connectionCredentials: outputs.GetDatabaseManagementExternalDbSystemDiscoveryDiscoveredComponentConnectorConnectionInfoConnectionCredential[];
    connectionStrings: outputs.GetDatabaseManagementExternalDbSystemDiscoveryDiscoveredComponentConnectorConnectionInfoConnectionString[];
    databaseCredentials: outputs.GetDatabaseManagementExternalDbSystemDiscoveryDiscoveredComponentConnectorConnectionInfoDatabaseCredential[];
}

export interface GetDatabaseManagementExternalDbSystemDiscoveryDiscoveredComponentConnectorConnectionInfoConnectionCredential {
    credentialName: string;
    credentialType: string;
    namedCredentialId: string;
    passwordSecretId: string;
    role: string;
    sslSecretId: string;
    userName: string;
}

export interface GetDatabaseManagementExternalDbSystemDiscoveryDiscoveredComponentConnectorConnectionInfoConnectionString {
    hostName: string;
    hosts: string[];
    port: number;
    protocol: string;
    service: string;
}

export interface GetDatabaseManagementExternalDbSystemDiscoveryDiscoveredComponentConnectorConnectionInfoDatabaseCredential {
    credentialType: string;
    namedCredentialId: string;
    password: string;
    passwordSecretId: string;
    role: string;
    username: string;
}

export interface GetDatabaseManagementExternalDbSystemDiscoveryDiscoveredComponentEndpoint {
    host: string;
    key: string;
    port: number;
    protocol: string;
    services: string[];
}

export interface GetDatabaseManagementExternalDbSystemDiscoveryDiscoveredComponentNetworkConfiguration {
    networkNumber: number;
    networkType: string;
    subnet: string;
}

export interface GetDatabaseManagementExternalDbSystemDiscoveryDiscoveredComponentPluggableDatabase {
    compartmentId: string;
    connectors: outputs.GetDatabaseManagementExternalDbSystemDiscoveryDiscoveredComponentPluggableDatabaseConnector[];
    containerDatabaseId: string;
    guid: string;
}

export interface GetDatabaseManagementExternalDbSystemDiscoveryDiscoveredComponentPluggableDatabaseConnector {
    agentId: string;
    connectionFailureMessage: string;
    connectionInfos: outputs.GetDatabaseManagementExternalDbSystemDiscoveryDiscoveredComponentPluggableDatabaseConnectorConnectionInfo[];
    connectionStatus: string;
    connectorType: string;
    displayName: string;
    timeConnectionStatusLastUpdated: string;
}

export interface GetDatabaseManagementExternalDbSystemDiscoveryDiscoveredComponentPluggableDatabaseConnectorConnectionInfo {
    componentType: string;
    connectionCredentials: outputs.GetDatabaseManagementExternalDbSystemDiscoveryDiscoveredComponentPluggableDatabaseConnectorConnectionInfoConnectionCredential[];
    connectionStrings: outputs.GetDatabaseManagementExternalDbSystemDiscoveryDiscoveredComponentPluggableDatabaseConnectorConnectionInfoConnectionString[];
    databaseCredentials: outputs.GetDatabaseManagementExternalDbSystemDiscoveryDiscoveredComponentPluggableDatabaseConnectorConnectionInfoDatabaseCredential[];
}

export interface GetDatabaseManagementExternalDbSystemDiscoveryDiscoveredComponentPluggableDatabaseConnectorConnectionInfoConnectionCredential {
    credentialName: string;
    credentialType: string;
    namedCredentialId: string;
    passwordSecretId: string;
    role: string;
    sslSecretId: string;
    userName: string;
}

export interface GetDatabaseManagementExternalDbSystemDiscoveryDiscoveredComponentPluggableDatabaseConnectorConnectionInfoConnectionString {
    hostName: string;
    hosts: string[];
    port: number;
    protocol: string;
    service: string;
}

export interface GetDatabaseManagementExternalDbSystemDiscoveryDiscoveredComponentPluggableDatabaseConnectorConnectionInfoDatabaseCredential {
    credentialType: string;
    namedCredentialId: string;
    password: string;
    passwordSecretId: string;
    role: string;
    username: string;
}

export interface GetDatabaseManagementExternalDbSystemDiscoveryDiscoveredComponentScanConfiguration {
    networkNumber: number;
    scanName: string;
    scanPort: number;
    scanProtocol: string;
}

export interface GetDatabaseManagementExternalDbSystemDiscoveryDiscoveredComponentVipConfiguration {
    address: string;
    networkNumber: number;
    nodeName: string;
}

export interface GetDatabaseManagementExternalDbSystemDiscoveryPatchOperation {
    operation: string;
    selection: string;
    values: outputs.GetDatabaseManagementExternalDbSystemDiscoveryPatchOperationValue[];
}

export interface GetDatabaseManagementExternalDbSystemDiscoveryPatchOperationValue {
    compartmentId: string;
    connectors: outputs.GetDatabaseManagementExternalDbSystemDiscoveryPatchOperationValueConnector[];
    displayName: string;
    isSelectedForMonitoring: boolean;
}

export interface GetDatabaseManagementExternalDbSystemDiscoveryPatchOperationValueConnector {
    agentId: string;
    connectionInfos: outputs.GetDatabaseManagementExternalDbSystemDiscoveryPatchOperationValueConnectorConnectionInfo[];
    connectorType: string;
    displayName: string;
}

export interface GetDatabaseManagementExternalDbSystemDiscoveryPatchOperationValueConnectorConnectionInfo {
    componentType: string;
    connectionCredentials: outputs.GetDatabaseManagementExternalDbSystemDiscoveryPatchOperationValueConnectorConnectionInfoConnectionCredential[];
    connectionStrings: outputs.GetDatabaseManagementExternalDbSystemDiscoveryPatchOperationValueConnectorConnectionInfoConnectionString[];
}

export interface GetDatabaseManagementExternalDbSystemDiscoveryPatchOperationValueConnectorConnectionInfoConnectionCredential {
    credentialName: string;
    credentialType: string;
    passwordSecretId: string;
    role: string;
    sslSecretId: string;
    userName: string;
}

export interface GetDatabaseManagementExternalDbSystemDiscoveryPatchOperationValueConnectorConnectionInfoConnectionString {
    hostName: string;
    hosts: string[];
    port: number;
    protocol: string;
    service: string;
}

export interface GetDatabaseManagementExternalDbSystemStackMonitoringConfig {
    isEnabled: boolean;
    metadata: string;
}

export interface GetDatabaseManagementExternalDbSystemsExternalDbSystemCollection {
    items: outputs.GetDatabaseManagementExternalDbSystemsExternalDbSystemCollectionItem[];
}

export interface GetDatabaseManagementExternalDbSystemsExternalDbSystemCollectionItem {
    compartmentId: string;
    databaseManagementConfigs: outputs.GetDatabaseManagementExternalDbSystemsExternalDbSystemCollectionItemDatabaseManagementConfig[];
    dbSystemDiscoveryId: string;
    definedTags: {[key: string]: string};
    discoveryAgentId: string;
    displayName: string;
    freeformTags: {[key: string]: string};
    homeDirectory: string;
    id: string;
    isCluster: boolean;
    lifecycleDetails: string;
    stackMonitoringConfigs: outputs.GetDatabaseManagementExternalDbSystemsExternalDbSystemCollectionItemStackMonitoringConfig[];
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
}

export interface GetDatabaseManagementExternalDbSystemsExternalDbSystemCollectionItemDatabaseManagementConfig {
    licenseModel: string;
}

export interface GetDatabaseManagementExternalDbSystemsExternalDbSystemCollectionItemStackMonitoringConfig {
    isEnabled: boolean;
    metadata: string;
}

export interface GetDatabaseManagementExternalDbSystemsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseManagementExternalExadataInfrastructureDatabaseSystem {
    additionalDetails: {[key: string]: string};
    compartmentId: string;
    displayName: string;
    id: string;
    internalId: string;
    licenseModel: string;
    lifecycleDetails: string;
    state: string;
    status: string;
    timeCreated: string;
    timeUpdated: string;
    version: string;
}

export interface GetDatabaseManagementExternalExadataInfrastructureStorageGrid {
    additionalDetails: {[key: string]: string};
    displayName: string;
    id: string;
    internalId: string;
    lifecycleDetails: string;
    serverCount: number;
    state: string;
    status: string;
    timeCreated: string;
    timeUpdated: string;
    version: string;
}

export interface GetDatabaseManagementExternalExadataInfrastructuresExternalExadataInfrastructureCollection {
    items: outputs.GetDatabaseManagementExternalExadataInfrastructuresExternalExadataInfrastructureCollectionItem[];
}

export interface GetDatabaseManagementExternalExadataInfrastructuresExternalExadataInfrastructureCollectionItem {
    additionalDetails: {[key: string]: string};
    compartmentId: string;
    databaseCompartments: string[];
    databaseSystems: outputs.GetDatabaseManagementExternalExadataInfrastructuresExternalExadataInfrastructureCollectionItemDatabaseSystem[];
    dbSystemIds: string[];
    definedTags: {[key: string]: string};
    discoveryKey: string;
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    internalId: string;
    licenseModel: string;
    lifecycleDetails: string;
    rackSize: string;
    state: string;
    status: string;
    storageGrids: outputs.GetDatabaseManagementExternalExadataInfrastructuresExternalExadataInfrastructureCollectionItemStorageGrid[];
    storageServerNames: string[];
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
    version: string;
}

export interface GetDatabaseManagementExternalExadataInfrastructuresExternalExadataInfrastructureCollectionItemDatabaseSystem {
    additionalDetails: {[key: string]: string};
    compartmentId: string;
    displayName: string;
    id: string;
    internalId: string;
    licenseModel: string;
    lifecycleDetails: string;
    state: string;
    status: string;
    timeCreated: string;
    timeUpdated: string;
    version: string;
}

export interface GetDatabaseManagementExternalExadataInfrastructuresExternalExadataInfrastructureCollectionItemStorageGrid {
    additionalDetails: {[key: string]: string};
    displayName: string;
    id: string;
    internalId: string;
    lifecycleDetails: string;
    serverCount: number;
    state: string;
    status: string;
    timeCreated: string;
    timeUpdated: string;
    version: string;
}

export interface GetDatabaseManagementExternalExadataInfrastructuresFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseManagementExternalExadataStorageConnectorCredentialInfo {
    password: string;
    sslTrustStoreLocation: string;
    sslTrustStorePassword: string;
    sslTrustStoreType: string;
    username: string;
}

export interface GetDatabaseManagementExternalExadataStorageConnectorsExternalExadataStorageConnectorCollection {
    items: outputs.GetDatabaseManagementExternalExadataStorageConnectorsExternalExadataStorageConnectorCollectionItem[];
}

export interface GetDatabaseManagementExternalExadataStorageConnectorsExternalExadataStorageConnectorCollectionItem {
    additionalDetails: {[key: string]: string};
    agentId: string;
    connectionUri: string;
    connectorName: string;
    credentialInfos: outputs.GetDatabaseManagementExternalExadataStorageConnectorsExternalExadataStorageConnectorCollectionItemCredentialInfo[];
    definedTags: {[key: string]: string};
    displayName: string;
    exadataInfrastructureId: string;
    freeformTags: {[key: string]: string};
    id: string;
    internalId: string;
    lifecycleDetails: string;
    state: string;
    status: string;
    storageServerId: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
    version: string;
}

export interface GetDatabaseManagementExternalExadataStorageConnectorsExternalExadataStorageConnectorCollectionItemCredentialInfo {
    password: string;
    sslTrustStoreLocation: string;
    sslTrustStorePassword: string;
    sslTrustStoreType: string;
    username: string;
}

export interface GetDatabaseManagementExternalExadataStorageConnectorsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseManagementExternalExadataStorageGridStorageServer {
    additionalDetails: {[key: string]: string};
    connectorId: string;
    cpuCount: number;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    internalId: string;
    ipAddress: string;
    lifecycleDetails: string;
    makeModel: string;
    maxFlashDiskIops: number;
    maxFlashDiskThroughput: number;
    maxHardDiskIops: number;
    maxHardDiskThroughput: number;
    memoryGb: number;
    resourceType: string;
    state: string;
    status: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
    version: string;
}

export interface GetDatabaseManagementExternalExadataStorageServerConnector {
    additionalDetails: {[key: string]: string};
    agentId: string;
    connectionUri: string;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    internalId: string;
    lifecycleDetails: string;
    resourceType: string;
    state: string;
    status: string;
    storageServerId: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
    version: string;
}

export interface GetDatabaseManagementExternalExadataStorageServerIormPlanDbPlan {
    items: outputs.GetDatabaseManagementExternalExadataStorageServerIormPlanDbPlanItem[];
}

export interface GetDatabaseManagementExternalExadataStorageServerIormPlanDbPlanItem {
    allocation: number;
    asmCluster: string;
    flashCacheLimit: string;
    flashCacheMin: string;
    flashCacheSize: string;
    isFlashCacheOn: boolean;
    isFlashLogOn: boolean;
    isPmemCacheOn: boolean;
    isPmemLogOn: boolean;
    level: number;
    limit: number;
    name: string;
    pmemCacheLimit: string;
    pmemCacheMin: string;
    pmemCacheSize: string;
    role: string;
    share: number;
    type: string;
}

export interface GetDatabaseManagementExternalExadataStorageServerOpenAlertHistoryAlert {
    message: string;
    severity: string;
    timeStartAt: string;
    type: string;
}

export interface GetDatabaseManagementExternalExadataStorageServerTopSqlCpuActivityActivity {
    cpuActivity: number;
    databaseName: string;
    sqlId: string;
}

export interface GetDatabaseManagementExternalExadataStorageServersExternalExadataStorageServerCollection {
    items: outputs.GetDatabaseManagementExternalExadataStorageServersExternalExadataStorageServerCollectionItem[];
}

export interface GetDatabaseManagementExternalExadataStorageServersExternalExadataStorageServerCollectionItem {
    additionalDetails: {[key: string]: string};
    connectorId: string;
    cpuCount: number;
    definedTags: {[key: string]: string};
    displayName: string;
    exadataInfrastructureId: string;
    freeformTags: {[key: string]: string};
    id: string;
    internalId: string;
    ipAddress: string;
    lifecycleDetails: string;
    makeModel: string;
    maxFlashDiskIops: number;
    maxFlashDiskThroughput: number;
    maxHardDiskIops: number;
    maxHardDiskThroughput: number;
    memoryGb: number;
    resourceType: string;
    state: string;
    status: string;
    storageGridId: string;
    timeCreated: string;
    timeUpdated: string;
    version: string;
}

export interface GetDatabaseManagementExternalExadataStorageServersFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseManagementExternalListenerEndpoint {
    host: string;
    key: string;
    port: number;
    protocol: string;
    services: string[];
}

export interface GetDatabaseManagementExternalListenerServicedAsm {
    compartmentId: string;
    displayName: string;
    id: string;
}

export interface GetDatabaseManagementExternalListenerServicedDatabase {
    compartmentId: string;
    databaseSubType: string;
    databaseType: string;
    dbUniqueName: string;
    displayName: string;
    id: string;
    isManaged: boolean;
}

export interface GetDatabaseManagementExternalListenerServicesExternalListenerServiceCollection {
    items: outputs.GetDatabaseManagementExternalListenerServicesExternalListenerServiceCollectionItem[];
}

export interface GetDatabaseManagementExternalListenerServicesExternalListenerServiceCollectionItem {
    listenerId: string;
    managedDatabaseId: string;
    name: string;
}

export interface GetDatabaseManagementExternalListenerServicesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseManagementExternalListenersExternalListenerCollection {
    items: outputs.GetDatabaseManagementExternalListenersExternalListenerCollectionItem[];
}

export interface GetDatabaseManagementExternalListenersExternalListenerCollectionItem {
    additionalDetails: {[key: string]: string};
    adrHomeDirectory: string;
    compartmentId: string;
    componentName: string;
    definedTags: {[key: string]: string};
    displayName: string;
    endpoints: outputs.GetDatabaseManagementExternalListenersExternalListenerCollectionItemEndpoint[];
    externalConnectorId: string;
    externalDbHomeId: string;
    externalDbNodeId: string;
    externalDbSystemId: string;
    externalListenerId: string;
    freeformTags: {[key: string]: string};
    hostName: string;
    id: string;
    lifecycleDetails: string;
    listenerAlias: string;
    listenerOraLocation: string;
    listenerType: string;
    logDirectory: string;
    oracleHome: string;
    servicedAsms: outputs.GetDatabaseManagementExternalListenersExternalListenerCollectionItemServicedAsm[];
    servicedDatabases: outputs.GetDatabaseManagementExternalListenersExternalListenerCollectionItemServicedDatabase[];
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
    traceDirectory: string;
    version: string;
}

export interface GetDatabaseManagementExternalListenersExternalListenerCollectionItemEndpoint {
    host: string;
    key: string;
    port: number;
    protocol: string;
    services: string[];
}

export interface GetDatabaseManagementExternalListenersExternalListenerCollectionItemServicedAsm {
    compartmentId: string;
    displayName: string;
    id: string;
}

export interface GetDatabaseManagementExternalListenersExternalListenerCollectionItemServicedDatabase {
    compartmentId: string;
    databaseSubType: string;
    databaseType: string;
    dbUniqueName: string;
    displayName: string;
    id: string;
    isManaged: boolean;
}

export interface GetDatabaseManagementExternalListenersFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseManagementJobExecutionsStatusItem {
    count: number;
    status: string;
}

export interface GetDatabaseManagementJobExecutionsStatusesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseManagementJobExecutionsStatusesJobExecutionsStatusSummaryCollection {
    items: outputs.GetDatabaseManagementJobExecutionsStatusesJobExecutionsStatusSummaryCollectionItem[];
}

export interface GetDatabaseManagementJobExecutionsStatusesJobExecutionsStatusSummaryCollectionItem {
    count: number;
    status: string;
}

export interface GetDatabaseManagementManagedDatabaseAddmTaskItem {
    beginSnapshotId: string;
    dbUser: string;
    description: string;
    endSnapshotId: string;
    endSnapshotTime: string;
    findings: string;
    howCreated: string;
    startSnapshotTime: string;
    status: string;
    taskId: string;
    taskName: string;
    timeCreated: string;
}

export interface GetDatabaseManagementManagedDatabaseAddmTasksAddmTasksCollection {
    items: outputs.GetDatabaseManagementManagedDatabaseAddmTasksAddmTasksCollectionItem[];
}

export interface GetDatabaseManagementManagedDatabaseAddmTasksAddmTasksCollectionItem {
    beginSnapshotId: string;
    dbUser: string;
    description: string;
    endSnapshotId: string;
    endSnapshotTime: string;
    findings: string;
    howCreated: string;
    startSnapshotTime: string;
    status: string;
    taskId: string;
    taskName: string;
    timeCreated: string;
}

export interface GetDatabaseManagementManagedDatabaseAddmTasksFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseManagementManagedDatabaseAlertLogCountItem {
    category: string;
    count: number;
}

export interface GetDatabaseManagementManagedDatabaseAlertLogCountsAlertLogCountsCollection {
    items: outputs.GetDatabaseManagementManagedDatabaseAlertLogCountsAlertLogCountsCollectionItem[];
}

export interface GetDatabaseManagementManagedDatabaseAlertLogCountsAlertLogCountsCollectionItem {
    category: string;
    count: number;
}

export interface GetDatabaseManagementManagedDatabaseAlertLogCountsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseManagementManagedDatabaseAttentionLogCountItem {
    category: string;
    count: number;
}

export interface GetDatabaseManagementManagedDatabaseAttentionLogCountsAttentionLogCountsCollection {
    items: outputs.GetDatabaseManagementManagedDatabaseAttentionLogCountsAttentionLogCountsCollectionItem[];
}

export interface GetDatabaseManagementManagedDatabaseAttentionLogCountsAttentionLogCountsCollectionItem {
    category: string;
    count: number;
}

export interface GetDatabaseManagementManagedDatabaseAttentionLogCountsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseManagementManagedDatabaseCursorCacheStatementsCursorCacheStatementCollection {
    items: outputs.GetDatabaseManagementManagedDatabaseCursorCacheStatementsCursorCacheStatementCollectionItem[];
}

export interface GetDatabaseManagementManagedDatabaseCursorCacheStatementsCursorCacheStatementCollectionItem {
    schema: string;
    sqlId: string;
    sqlText: string;
}

export interface GetDatabaseManagementManagedDatabaseCursorCacheStatementsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseManagementManagedDatabaseDbmgmtFeatureConfig {
    connectorDetails: outputs.GetDatabaseManagementManagedDatabaseDbmgmtFeatureConfigConnectorDetail[];
    databaseConnectionDetails: outputs.GetDatabaseManagementManagedDatabaseDbmgmtFeatureConfigDatabaseConnectionDetail[];
    feature: string;
    featureStatus: string;
    licenseModel: string;
}

export interface GetDatabaseManagementManagedDatabaseDbmgmtFeatureConfigConnectorDetail {
    connectorType: string;
    databaseConnectorId: string;
    managementAgentId: string;
    privateEndPointId: string;
}

export interface GetDatabaseManagementManagedDatabaseDbmgmtFeatureConfigDatabaseConnectionDetail {
    connectionCredentials: outputs.GetDatabaseManagementManagedDatabaseDbmgmtFeatureConfigDatabaseConnectionDetailConnectionCredential[];
    connectionStrings: outputs.GetDatabaseManagementManagedDatabaseDbmgmtFeatureConfigDatabaseConnectionDetailConnectionString[];
}

export interface GetDatabaseManagementManagedDatabaseDbmgmtFeatureConfigDatabaseConnectionDetailConnectionCredential {
    credentialName: string;
    credentialType: string;
    namedCredentialId: string;
    passwordSecretId: string;
    role: string;
    sslSecretId: string;
    userName: string;
}

export interface GetDatabaseManagementManagedDatabaseDbmgmtFeatureConfigDatabaseConnectionDetailConnectionString {
    connectionType: string;
    port: number;
    protocol: string;
    service: string;
}

export interface GetDatabaseManagementManagedDatabaseGroupManagedDatabase {
    compartmentId: string;
    databaseSubType: string;
    databaseType: string;
    definedTags: {[key: string]: string};
    deploymentType: string;
    freeformTags: {[key: string]: string};
    id: string;
    name: string;
    systemTags: {[key: string]: string};
    timeAdded: string;
    workloadType: string;
}

export interface GetDatabaseManagementManagedDatabaseGroupsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseManagementManagedDatabaseGroupsManagedDatabaseGroupCollection {
    items: outputs.GetDatabaseManagementManagedDatabaseGroupsManagedDatabaseGroupCollectionItem[];
}

export interface GetDatabaseManagementManagedDatabaseGroupsManagedDatabaseGroupCollectionItem {
    compartmentId: string;
    definedTags: {[key: string]: string};
    description: string;
    freeformTags: {[key: string]: string};
    id: string;
    managedDatabases: outputs.GetDatabaseManagementManagedDatabaseGroupsManagedDatabaseGroupCollectionItemManagedDatabase[];
    name: string;
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
}

export interface GetDatabaseManagementManagedDatabaseGroupsManagedDatabaseGroupCollectionItemManagedDatabase {
    compartmentId: string;
    databaseSubType: string;
    databaseType: string;
    definedTags: {[key: string]: string};
    deploymentType: string;
    freeformTags: {[key: string]: string};
    id: string;
    name: string;
    systemTags: {[key: string]: string};
    timeAdded: string;
    workloadType: string;
}

export interface GetDatabaseManagementManagedDatabaseManagedDatabaseGroup {
    compartmentId: string;
    id: string;
    name: string;
}

export interface GetDatabaseManagementManagedDatabaseOptimizerStatisticsAdvisorExecutionDatabase {
    compartmentId: string;
    dbDeploymentType: string;
    dbSubType: string;
    dbType: string;
    dbVersion: string;
    id: string;
    name: string;
}

export interface GetDatabaseManagementManagedDatabaseOptimizerStatisticsAdvisorExecutionReport {
    rules: outputs.GetDatabaseManagementManagedDatabaseOptimizerStatisticsAdvisorExecutionReportRule[];
    summary: string;
}

export interface GetDatabaseManagementManagedDatabaseOptimizerStatisticsAdvisorExecutionReportRule {
    description: string;
    findings: outputs.GetDatabaseManagementManagedDatabaseOptimizerStatisticsAdvisorExecutionReportRuleFinding[];
    name: string;
}

export interface GetDatabaseManagementManagedDatabaseOptimizerStatisticsAdvisorExecutionReportRuleFinding {
    details: outputs.GetDatabaseManagementManagedDatabaseOptimizerStatisticsAdvisorExecutionReportRuleFindingDetail[];
    message: string;
    recommendations: outputs.GetDatabaseManagementManagedDatabaseOptimizerStatisticsAdvisorExecutionReportRuleFindingRecommendation[];
}

export interface GetDatabaseManagementManagedDatabaseOptimizerStatisticsAdvisorExecutionReportRuleFindingDetail {
    operations: string[];
    schemas: outputs.GetDatabaseManagementManagedDatabaseOptimizerStatisticsAdvisorExecutionReportRuleFindingDetailSchema[];
}

export interface GetDatabaseManagementManagedDatabaseOptimizerStatisticsAdvisorExecutionReportRuleFindingDetailSchema {
    name: string;
    objects: string[];
}

export interface GetDatabaseManagementManagedDatabaseOptimizerStatisticsAdvisorExecutionReportRuleFindingRecommendation {
    examples: outputs.GetDatabaseManagementManagedDatabaseOptimizerStatisticsAdvisorExecutionReportRuleFindingRecommendationExample[];
    message: string;
    rationales: outputs.GetDatabaseManagementManagedDatabaseOptimizerStatisticsAdvisorExecutionReportRuleFindingRecommendationRationale[];
}

export interface GetDatabaseManagementManagedDatabaseOptimizerStatisticsAdvisorExecutionReportRuleFindingRecommendationExample {
    lines: outputs.GetDatabaseManagementManagedDatabaseOptimizerStatisticsAdvisorExecutionReportRuleFindingRecommendationExampleLine[];
}

export interface GetDatabaseManagementManagedDatabaseOptimizerStatisticsAdvisorExecutionReportRuleFindingRecommendationExampleLine {
    comment: string;
    operation: string;
}

export interface GetDatabaseManagementManagedDatabaseOptimizerStatisticsAdvisorExecutionReportRuleFindingRecommendationRationale {
    message: string;
}

export interface GetDatabaseManagementManagedDatabaseOptimizerStatisticsAdvisorExecutionsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseManagementManagedDatabaseOptimizerStatisticsAdvisorExecutionsOptimizerStatisticsAdvisorExecutionsCollection {
    items: outputs.GetDatabaseManagementManagedDatabaseOptimizerStatisticsAdvisorExecutionsOptimizerStatisticsAdvisorExecutionsCollectionItem[];
}

export interface GetDatabaseManagementManagedDatabaseOptimizerStatisticsAdvisorExecutionsOptimizerStatisticsAdvisorExecutionsCollectionItem {
    databases: outputs.GetDatabaseManagementManagedDatabaseOptimizerStatisticsAdvisorExecutionsOptimizerStatisticsAdvisorExecutionsCollectionItemDatabase[];
    errorMessage: string;
    executionName: string;
    findings: number;
    reports: outputs.GetDatabaseManagementManagedDatabaseOptimizerStatisticsAdvisorExecutionsOptimizerStatisticsAdvisorExecutionsCollectionItemReport[];
    status: string;
    statusMessage: string;
    taskName: string;
    timeEnd: string;
    timeStart: string;
}

export interface GetDatabaseManagementManagedDatabaseOptimizerStatisticsAdvisorExecutionsOptimizerStatisticsAdvisorExecutionsCollectionItemDatabase {
    compartmentId: string;
    dbDeploymentType: string;
    dbSubType: string;
    dbType: string;
    dbVersion: string;
    id: string;
    name: string;
}

export interface GetDatabaseManagementManagedDatabaseOptimizerStatisticsAdvisorExecutionsOptimizerStatisticsAdvisorExecutionsCollectionItemReport {
    rules: outputs.GetDatabaseManagementManagedDatabaseOptimizerStatisticsAdvisorExecutionsOptimizerStatisticsAdvisorExecutionsCollectionItemReportRule[];
    summary: string;
}

export interface GetDatabaseManagementManagedDatabaseOptimizerStatisticsAdvisorExecutionsOptimizerStatisticsAdvisorExecutionsCollectionItemReportRule {
    description: string;
    findings: outputs.GetDatabaseManagementManagedDatabaseOptimizerStatisticsAdvisorExecutionsOptimizerStatisticsAdvisorExecutionsCollectionItemReportRuleFinding[];
    name: string;
}

export interface GetDatabaseManagementManagedDatabaseOptimizerStatisticsAdvisorExecutionsOptimizerStatisticsAdvisorExecutionsCollectionItemReportRuleFinding {
    details: outputs.GetDatabaseManagementManagedDatabaseOptimizerStatisticsAdvisorExecutionsOptimizerStatisticsAdvisorExecutionsCollectionItemReportRuleFindingDetail[];
    message: string;
    recommendations: outputs.GetDatabaseManagementManagedDatabaseOptimizerStatisticsAdvisorExecutionsOptimizerStatisticsAdvisorExecutionsCollectionItemReportRuleFindingRecommendation[];
}

export interface GetDatabaseManagementManagedDatabaseOptimizerStatisticsAdvisorExecutionsOptimizerStatisticsAdvisorExecutionsCollectionItemReportRuleFindingDetail {
    operations: string[];
    schemas: outputs.GetDatabaseManagementManagedDatabaseOptimizerStatisticsAdvisorExecutionsOptimizerStatisticsAdvisorExecutionsCollectionItemReportRuleFindingDetailSchema[];
}

export interface GetDatabaseManagementManagedDatabaseOptimizerStatisticsAdvisorExecutionsOptimizerStatisticsAdvisorExecutionsCollectionItemReportRuleFindingDetailSchema {
    name: string;
    objects: string[];
}

export interface GetDatabaseManagementManagedDatabaseOptimizerStatisticsAdvisorExecutionsOptimizerStatisticsAdvisorExecutionsCollectionItemReportRuleFindingRecommendation {
    examples: outputs.GetDatabaseManagementManagedDatabaseOptimizerStatisticsAdvisorExecutionsOptimizerStatisticsAdvisorExecutionsCollectionItemReportRuleFindingRecommendationExample[];
    message: string;
    rationales: outputs.GetDatabaseManagementManagedDatabaseOptimizerStatisticsAdvisorExecutionsOptimizerStatisticsAdvisorExecutionsCollectionItemReportRuleFindingRecommendationRationale[];
}

export interface GetDatabaseManagementManagedDatabaseOptimizerStatisticsAdvisorExecutionsOptimizerStatisticsAdvisorExecutionsCollectionItemReportRuleFindingRecommendationExample {
    lines: outputs.GetDatabaseManagementManagedDatabaseOptimizerStatisticsAdvisorExecutionsOptimizerStatisticsAdvisorExecutionsCollectionItemReportRuleFindingRecommendationExampleLine[];
}

export interface GetDatabaseManagementManagedDatabaseOptimizerStatisticsAdvisorExecutionsOptimizerStatisticsAdvisorExecutionsCollectionItemReportRuleFindingRecommendationExampleLine {
    comment: string;
    operation: string;
}

export interface GetDatabaseManagementManagedDatabaseOptimizerStatisticsAdvisorExecutionsOptimizerStatisticsAdvisorExecutionsCollectionItemReportRuleFindingRecommendationRationale {
    message: string;
}

export interface GetDatabaseManagementManagedDatabaseOptimizerStatisticsCollectionAggregationsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseManagementManagedDatabaseOptimizerStatisticsCollectionAggregationsOptimizerStatisticsCollectionAggregationsCollection {
    items: outputs.GetDatabaseManagementManagedDatabaseOptimizerStatisticsCollectionAggregationsOptimizerStatisticsCollectionAggregationsCollectionItem[];
}

export interface GetDatabaseManagementManagedDatabaseOptimizerStatisticsCollectionAggregationsOptimizerStatisticsCollectionAggregationsCollectionItem {
    completed: number;
    failed: number;
    groupBy: string;
    inProgress: number;
    pending: number;
    skipped: number;
    timeEnd: string;
    timeStart: string;
    timedOut: number;
    total: number;
    unknown: number;
}

export interface GetDatabaseManagementManagedDatabaseOptimizerStatisticsCollectionOperationDatabase {
    compartmentId: string;
    dbDeploymentType: string;
    dbSubType: string;
    dbType: string;
    dbVersion: string;
    id: string;
    name: string;
}

export interface GetDatabaseManagementManagedDatabaseOptimizerStatisticsCollectionOperationTask {
    status: string;
    target: string;
    targetType: string;
    timeEnd: string;
    timeStart: string;
}

export interface GetDatabaseManagementManagedDatabaseOptimizerStatisticsCollectionOperationsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseManagementManagedDatabaseOptimizerStatisticsCollectionOperationsOptimizerStatisticsCollectionOperationsCollection {
    items: outputs.GetDatabaseManagementManagedDatabaseOptimizerStatisticsCollectionOperationsOptimizerStatisticsCollectionOperationsCollectionItem[];
}

export interface GetDatabaseManagementManagedDatabaseOptimizerStatisticsCollectionOperationsOptimizerStatisticsCollectionOperationsCollectionItem {
    completedCount: number;
    databases: outputs.GetDatabaseManagementManagedDatabaseOptimizerStatisticsCollectionOperationsOptimizerStatisticsCollectionOperationsCollectionItemDatabase[];
    durationInSeconds: number;
    endTime: string;
    failedCount: number;
    id: number;
    inProgressCount: number;
    jobName: string;
    operationName: string;
    startTime: string;
    status: string;
    target: string;
    tasks: outputs.GetDatabaseManagementManagedDatabaseOptimizerStatisticsCollectionOperationsOptimizerStatisticsCollectionOperationsCollectionItemTask[];
    timedOutCount: number;
    totalObjectsCount: number;
}

export interface GetDatabaseManagementManagedDatabaseOptimizerStatisticsCollectionOperationsOptimizerStatisticsCollectionOperationsCollectionItemDatabase {
    compartmentId: string;
    dbDeploymentType: string;
    dbSubType: string;
    dbType: string;
    dbVersion: string;
    id: string;
    name: string;
}

export interface GetDatabaseManagementManagedDatabaseOptimizerStatisticsCollectionOperationsOptimizerStatisticsCollectionOperationsCollectionItemTask {
    status: string;
    target: string;
    targetType: string;
    timeEnd: string;
    timeStart: string;
}

export interface GetDatabaseManagementManagedDatabasePreferredCredentialsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseManagementManagedDatabasePreferredCredentialsPreferredCredentialCollection {
    items: outputs.GetDatabaseManagementManagedDatabasePreferredCredentialsPreferredCredentialCollectionItem[];
}

export interface GetDatabaseManagementManagedDatabasePreferredCredentialsPreferredCredentialCollectionItem {
    credentialName: string;
    isAccessible: boolean;
    namedCredentialId: string;
    passwordSecretId: string;
    role: string;
    status: string;
    type: string;
    userName: string;
}

export interface GetDatabaseManagementManagedDatabaseSqlPlanBaselineConfigurationAutoCaptureFilter {
    modifiedBy: string;
    name: string;
    timeLastModified: string;
    valuesToExcludes: string[];
    valuesToIncludes: string[];
}

export interface GetDatabaseManagementManagedDatabaseSqlPlanBaselineConfigurationAutoSpmEvolveTaskParameter {
    allowedTimeLimit: number;
    alternatePlanBaselines: string[];
    alternatePlanLimit: number;
    alternatePlanSources: string[];
    arePlansAutoAccepted: boolean;
}

export interface GetDatabaseManagementManagedDatabaseSqlPlanBaselineJobsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseManagementManagedDatabaseSqlPlanBaselineJobsSqlPlanBaselineJobCollection {
    items: outputs.GetDatabaseManagementManagedDatabaseSqlPlanBaselineJobsSqlPlanBaselineJobCollectionItem[];
}

export interface GetDatabaseManagementManagedDatabaseSqlPlanBaselineJobsSqlPlanBaselineJobCollectionItem {
    name: string;
    status: string;
    timeCreated: string;
    type: string;
}

export interface GetDatabaseManagementManagedDatabaseSqlPlanBaselinesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseManagementManagedDatabaseSqlPlanBaselinesSqlPlanBaselineCollection {
    items: outputs.GetDatabaseManagementManagedDatabaseSqlPlanBaselinesSqlPlanBaselineCollectionItem[];
}

export interface GetDatabaseManagementManagedDatabaseSqlPlanBaselinesSqlPlanBaselineCollectionItem {
    accepted: string;
    action: string;
    adaptive: string;
    autoPurge: string;
    enabled: string;
    executionPlan: string;
    fixed: string;
    module: string;
    origin: string;
    planName: string;
    reproduced: string;
    sqlHandle: string;
    sqlText: string;
    timeCreated: string;
    timeLastExecuted: string;
    timeLastModified: string;
}

export interface GetDatabaseManagementManagedDatabaseSqlTuningAdvisorTaskItem {
    daysToExpire: number;
    description: string;
    instanceId: number;
    name: string;
    owner: string;
    recommendationCount: number;
    sqlTuningAdvisorTaskId: string;
    taskStatus: string;
    timeCreated: string;
    timeExecutionEnded: string;
    timeExecutionStarted: string;
    totalSqlStatements: number;
}

export interface GetDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksExecutionPlanStatsComparisionModified {
    planStats: {[key: string]: string};
    planStatus: string;
    planType: string;
}

export interface GetDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksExecutionPlanStatsComparisionOriginal {
    planStats: {[key: string]: string};
    planStatus: string;
    planType: string;
}

export interface GetDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksFindingItem {
    dbTimeBenefit: number;
    isAlternativePlanFindingPresent: boolean;
    isErrorFindingPresent: boolean;
    isIndexFindingPresent: boolean;
    isMiscellaneousFindingPresent: boolean;
    isRestructureSqlFindingPresent: boolean;
    isSqlProfileFindingImplemented: boolean;
    isSqlProfileFindingPresent: boolean;
    isStatsFindingPresent: boolean;
    isTimeoutFindingPresent: boolean;
    parsingSchema: string;
    perExecutionPercentage: number;
    sqlKey: string;
    sqlText: string;
    sqlTuningAdvisorTaskId: string;
    sqlTuningAdvisorTaskObjectExecutionId: string;
    sqlTuningAdvisorTaskObjectId: string;
}

export interface GetDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksFindingsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksFindingsSqlTuningAdvisorTaskFindingCollection {
    items: outputs.GetDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksFindingsSqlTuningAdvisorTaskFindingCollectionItem[];
}

export interface GetDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksFindingsSqlTuningAdvisorTaskFindingCollectionItem {
    dbTimeBenefit: number;
    isAlternativePlanFindingPresent: boolean;
    isErrorFindingPresent: boolean;
    isIndexFindingPresent: boolean;
    isMiscellaneousFindingPresent: boolean;
    isRestructureSqlFindingPresent: boolean;
    isSqlProfileFindingImplemented: boolean;
    isSqlProfileFindingPresent: boolean;
    isStatsFindingPresent: boolean;
    isTimeoutFindingPresent: boolean;
    parsingSchema: string;
    perExecutionPercentage: number;
    sqlKey: string;
    sqlText: string;
    sqlTuningAdvisorTaskId: string;
    sqlTuningAdvisorTaskObjectExecutionId: string;
    sqlTuningAdvisorTaskObjectId: string;
}

export interface GetDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksRecommendationItem {
    benefit: number;
    finding: string;
    implementActionSql: string;
    isParallelExecution: boolean;
    rationale: string;
    recommendation: string;
    recommendationKey: number;
    recommendationType: string;
    sqlTuningAdvisorTaskId: string;
    sqlTuningAdvisorTaskObjectId: string;
}

export interface GetDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksRecommendationsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksRecommendationsSqlTuningAdvisorTaskRecommendationCollection {
    items: outputs.GetDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksRecommendationsSqlTuningAdvisorTaskRecommendationCollectionItem[];
}

export interface GetDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksRecommendationsSqlTuningAdvisorTaskRecommendationCollectionItem {
    benefit: number;
    finding: string;
    implementActionSql: string;
    isParallelExecution: boolean;
    rationale: string;
    recommendation: string;
    recommendationKey: number;
    recommendationType: string;
    sqlTuningAdvisorTaskId: string;
    sqlTuningAdvisorTaskObjectId: string;
}

export interface GetDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksSqlExecutionPlanPlan {
    accessPredicates: string;
    attribute: string;
    bytes: string;
    cardinality: string;
    cost: number;
    cpuCost: number;
    filterPredicates: string;
    ioCost: number;
    numberOfSearchColumn: number;
    object: string;
    objectNode: string;
    objectOwner: string;
    objectPosition: number;
    objectType: string;
    operation: string;
    optimizerMode: string;
    options: string;
    other: string;
    otherTag: string;
    parentStepId: number;
    partitionId: number;
    partitionStart: string;
    partitionStop: string;
    planHashValue: string;
    position: number;
    remarks: string;
    stepId: number;
    tempSpace: string;
    time: string;
}

export interface GetDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksSqlTuningAdvisorTaskCollection {
    items: outputs.GetDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksSqlTuningAdvisorTaskCollectionItem[];
}

export interface GetDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksSqlTuningAdvisorTaskCollectionItem {
    daysToExpire: number;
    description: string;
    instanceId: number;
    name: string;
    owner: string;
    recommendationCount: number;
    sqlTuningAdvisorTaskId: string;
    taskStatus: string;
    timeCreated: string;
    timeExecutionEnded: string;
    timeExecutionStarted: string;
    totalSqlStatements: number;
}

export interface GetDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksSummaryReportIndexFinding {
    indexColumns: string[];
    indexHashValue: string;
    indexName: string;
    referenceCount: number;
    schema: string;
    tableName: string;
}

export interface GetDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksSummaryReportObjectStatFinding {
    object: string;
    objectHashValue: string;
    objectType: string;
    problemType: string;
    referenceCount: number;
    schema: string;
}

export interface GetDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksSummaryReportStatistic {
    findingBenefits: outputs.GetDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksSummaryReportStatisticFindingBenefit[];
    findingCounts: outputs.GetDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksSummaryReportStatisticFindingCount[];
    statementCounts: outputs.GetDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksSummaryReportStatisticStatementCount[];
}

export interface GetDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksSummaryReportStatisticFindingBenefit {
    dbTimeAfterImplemented: number;
    dbTimeAfterRecommended: number;
    dbTimeBeforeImplemented: number;
    dbTimeBeforeRecommended: number;
}

export interface GetDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksSummaryReportStatisticFindingCount {
    alternatePlan: number;
    implementedSqlProfile: number;
    index: number;
    recommendedSqlProfile: number;
    restructure: number;
    statistics: number;
}

export interface GetDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksSummaryReportStatisticStatementCount {
    distinctSql: number;
    errorCount: number;
    findingCount: number;
    totalSql: number;
}

export interface GetDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksSummaryReportTaskInfo {
    description: string;
    id: string;
    name: string;
    owner: string;
    runningTime: number;
    status: string;
    timeEnded: string;
    timeStarted: string;
}

export interface GetDatabaseManagementManagedDatabaseSqlTuningSetItem {
    description: string;
    name: string;
    owner: string;
    statementCounts: number;
}

export interface GetDatabaseManagementManagedDatabaseSqlTuningSetsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseManagementManagedDatabaseSqlTuningSetsSqlTuningSetCollection {
    items: outputs.GetDatabaseManagementManagedDatabaseSqlTuningSetsSqlTuningSetCollectionItem[];
}

export interface GetDatabaseManagementManagedDatabaseSqlTuningSetsSqlTuningSetCollectionItem {
    description: string;
    errorMessage: string;
    id: number;
    name: string;
    owner: string;
    scheduledJobName: string;
    statementCounts: number;
    status: string;
    timeCreated: string;
    timeLastModified: string;
}

export interface GetDatabaseManagementManagedDatabaseTableStatisticsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseManagementManagedDatabaseTableStatisticsTableStatisticsCollection {
    items: outputs.GetDatabaseManagementManagedDatabaseTableStatisticsTableStatisticsCollectionItem[];
}

export interface GetDatabaseManagementManagedDatabaseTableStatisticsTableStatisticsCollectionItem {
    count: number;
    percentage: number;
    type: string;
}

export interface GetDatabaseManagementManagedDatabaseUserConsumerGroupPrivilegeItem {
    grantOption: string;
    initialGroup: string;
    name: string;
}

export interface GetDatabaseManagementManagedDatabaseUserConsumerGroupPrivilegesConsumerGroupPrivilegeCollection {
    items: outputs.GetDatabaseManagementManagedDatabaseUserConsumerGroupPrivilegesConsumerGroupPrivilegeCollectionItem[];
}

export interface GetDatabaseManagementManagedDatabaseUserConsumerGroupPrivilegesConsumerGroupPrivilegeCollectionItem {
    grantOption: string;
    initialGroup: string;
    name: string;
}

export interface GetDatabaseManagementManagedDatabaseUserConsumerGroupPrivilegesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseManagementManagedDatabaseUserDataAccessContainerItem {
    name: string;
}

export interface GetDatabaseManagementManagedDatabaseUserDataAccessContainersDataAccessContainerCollection {
    items: outputs.GetDatabaseManagementManagedDatabaseUserDataAccessContainersDataAccessContainerCollectionItem[];
}

export interface GetDatabaseManagementManagedDatabaseUserDataAccessContainersDataAccessContainerCollectionItem {
    name: string;
}

export interface GetDatabaseManagementManagedDatabaseUserDataAccessContainersFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseManagementManagedDatabaseUserObjectPrivilegeItem {
    common: string;
    grantOption: string;
    grantor: string;
    hierarchy: string;
    inherited: string;
    name: string;
    object: string;
    owner: string;
    schemaType: string;
}

export interface GetDatabaseManagementManagedDatabaseUserObjectPrivilegesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseManagementManagedDatabaseUserObjectPrivilegesObjectPrivilegeCollection {
    items: outputs.GetDatabaseManagementManagedDatabaseUserObjectPrivilegesObjectPrivilegeCollectionItem[];
}

export interface GetDatabaseManagementManagedDatabaseUserObjectPrivilegesObjectPrivilegeCollectionItem {
    common: string;
    grantOption: string;
    grantor: string;
    hierarchy: string;
    inherited: string;
    name: string;
    object: string;
    owner: string;
    schemaType: string;
}

export interface GetDatabaseManagementManagedDatabaseUserProxiedForUserItem {
    authentication: string;
    flags: string;
    name: string;
}

export interface GetDatabaseManagementManagedDatabaseUserProxiedForUsersFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseManagementManagedDatabaseUserProxiedForUsersProxiedForUserCollection {
    items: outputs.GetDatabaseManagementManagedDatabaseUserProxiedForUsersProxiedForUserCollectionItem[];
}

export interface GetDatabaseManagementManagedDatabaseUserProxiedForUsersProxiedForUserCollectionItem {
    authentication: string;
    flags: string;
    name: string;
}

export interface GetDatabaseManagementManagedDatabaseUserRoleItem {
    adminOption: string;
    common: string;
    defaultRole: string;
    delegateOption: string;
    inherited: string;
    name: string;
}

export interface GetDatabaseManagementManagedDatabaseUserRolesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseManagementManagedDatabaseUserRolesRoleCollection {
    items: outputs.GetDatabaseManagementManagedDatabaseUserRolesRoleCollectionItem[];
}

export interface GetDatabaseManagementManagedDatabaseUserRolesRoleCollectionItem {
    adminOption: string;
    common: string;
    defaultRole: string;
    delegateOption: string;
    inherited: string;
    name: string;
}

export interface GetDatabaseManagementManagedDatabaseUsersFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseManagementManagedDatabaseUsersUserCollection {
    items: outputs.GetDatabaseManagementManagedDatabaseUsersUserCollectionItem[];
}

export interface GetDatabaseManagementManagedDatabaseUsersUserCollectionItem {
    allShared: string;
    authentication: string;
    common: string;
    consumerGroup: string;
    defaultCollation: string;
    defaultTablespace: string;
    editionsEnabled: string;
    externalName: string;
    externalShared: string;
    implicit: string;
    inherited: string;
    localTempTablespace: string;
    name: string;
    oracleMaintained: string;
    passwordVersions: string;
    profile: string;
    proxyConnect: string;
    status: string;
    tempTablespace: string;
    timeCreated: string;
    timeExpiring: string;
    timeLastLogin: string;
    timeLocked: string;
    timePasswordChanged: string;
}

export interface GetDatabaseManagementManagedDatabasesAsmPropertiesAsmPropertyCollection {
    items: outputs.GetDatabaseManagementManagedDatabasesAsmPropertiesAsmPropertyCollectionItem[];
}

export interface GetDatabaseManagementManagedDatabasesAsmPropertiesAsmPropertyCollectionItem {
    diskGroup: string;
}

export interface GetDatabaseManagementManagedDatabasesAsmPropertiesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseManagementManagedDatabasesAsmPropertyItem {
    diskGroup: string;
}

export interface GetDatabaseManagementManagedDatabasesDatabaseParameterItem {
    allowedValues: outputs.GetDatabaseManagementManagedDatabasesDatabaseParameterItemAllowedValue[];
    category: string;
    constraint: string;
    containerId: number;
    description: string;
    displayValue: string;
    isAdjusted: boolean;
    isBasic: boolean;
    isDefault: boolean;
    isDeprecated: boolean;
    isInstanceModifiable: boolean;
    isModified: string;
    isPdbModifiable: boolean;
    isSessionModifiable: boolean;
    isSpecified: boolean;
    isSystemModifiable: string;
    name: string;
    number: number;
    ordinal: number;
    sid: string;
    type: string;
    updateComment: string;
    value: string;
}

export interface GetDatabaseManagementManagedDatabasesDatabaseParameterItemAllowedValue {
    isDefault: boolean;
    ordinal: number;
    value: string;
}

export interface GetDatabaseManagementManagedDatabasesDatabaseParametersDatabaseParametersCollection {
    databaseName: string;
    databaseSubType: string;
    databaseType: string;
    databaseVersion: string;
    items: outputs.GetDatabaseManagementManagedDatabasesDatabaseParametersDatabaseParametersCollectionItem[];
}

export interface GetDatabaseManagementManagedDatabasesDatabaseParametersDatabaseParametersCollectionItem {
    allowedValues: outputs.GetDatabaseManagementManagedDatabasesDatabaseParametersDatabaseParametersCollectionItemAllowedValue[];
    category: string;
    constraint: string;
    containerId: number;
    description: string;
    displayValue: string;
    isAdjusted: boolean;
    isBasic: boolean;
    isDefault: boolean;
    isDeprecated: boolean;
    isInstanceModifiable: boolean;
    isModified: string;
    isPdbModifiable: boolean;
    isSessionModifiable: boolean;
    isSpecified: boolean;
    isSystemModifiable: string;
    name: string;
    number: number;
    ordinal: number;
    sid: string;
    type: string;
    updateComment: string;
    value: string;
}

export interface GetDatabaseManagementManagedDatabasesDatabaseParametersDatabaseParametersCollectionItemAllowedValue {
    isDefault: boolean;
    ordinal: number;
    value: string;
}

export interface GetDatabaseManagementManagedDatabasesDatabaseParametersFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseManagementManagedDatabasesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseManagementManagedDatabasesManagedDatabaseCollection {
    items: outputs.GetDatabaseManagementManagedDatabasesManagedDatabaseCollectionItem[];
}

export interface GetDatabaseManagementManagedDatabasesManagedDatabaseCollectionItem {
    additionalDetails: {[key: string]: string};
    compartmentId: string;
    databasePlatformName: string;
    databaseStatus: string;
    databaseSubType: string;
    databaseType: string;
    databaseVersion: string;
    dbSystemId: string;
    dbmgmtFeatureConfigs: outputs.GetDatabaseManagementManagedDatabasesManagedDatabaseCollectionItemDbmgmtFeatureConfig[];
    definedTags: {[key: string]: string};
    deploymentType: string;
    freeformTags: {[key: string]: string};
    id: string;
    isCluster: boolean;
    managedDatabaseGroups: outputs.GetDatabaseManagementManagedDatabasesManagedDatabaseCollectionItemManagedDatabaseGroup[];
    managementOption: string;
    name: string;
    parentContainerId: string;
    storageSystemId: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    workloadType: string;
}

export interface GetDatabaseManagementManagedDatabasesManagedDatabaseCollectionItemDbmgmtFeatureConfig {
    connectorDetails: outputs.GetDatabaseManagementManagedDatabasesManagedDatabaseCollectionItemDbmgmtFeatureConfigConnectorDetail[];
    databaseConnectionDetails: outputs.GetDatabaseManagementManagedDatabasesManagedDatabaseCollectionItemDbmgmtFeatureConfigDatabaseConnectionDetail[];
    feature: string;
    featureStatus: string;
    licenseModel: string;
}

export interface GetDatabaseManagementManagedDatabasesManagedDatabaseCollectionItemDbmgmtFeatureConfigConnectorDetail {
    connectorType: string;
    databaseConnectorId: string;
    managementAgentId: string;
    privateEndPointId: string;
}

export interface GetDatabaseManagementManagedDatabasesManagedDatabaseCollectionItemDbmgmtFeatureConfigDatabaseConnectionDetail {
    connectionCredentials: outputs.GetDatabaseManagementManagedDatabasesManagedDatabaseCollectionItemDbmgmtFeatureConfigDatabaseConnectionDetailConnectionCredential[];
    connectionStrings: outputs.GetDatabaseManagementManagedDatabasesManagedDatabaseCollectionItemDbmgmtFeatureConfigDatabaseConnectionDetailConnectionString[];
}

export interface GetDatabaseManagementManagedDatabasesManagedDatabaseCollectionItemDbmgmtFeatureConfigDatabaseConnectionDetailConnectionCredential {
    credentialName: string;
    credentialType: string;
    namedCredentialId: string;
    passwordSecretId: string;
    role: string;
    sslSecretId: string;
    userName: string;
}

export interface GetDatabaseManagementManagedDatabasesManagedDatabaseCollectionItemDbmgmtFeatureConfigDatabaseConnectionDetailConnectionString {
    connectionType: string;
    port: number;
    protocol: string;
    service: string;
}

export interface GetDatabaseManagementManagedDatabasesManagedDatabaseCollectionItemManagedDatabaseGroup {
    compartmentId: string;
    id: string;
    name: string;
}

export interface GetDatabaseManagementManagedDatabasesUserProxyUserItem {
    authentication: string;
    flags: string;
    name: string;
}

export interface GetDatabaseManagementManagedDatabasesUserProxyUsersFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseManagementManagedDatabasesUserProxyUsersProxyUserCollection {
    items: outputs.GetDatabaseManagementManagedDatabasesUserProxyUsersProxyUserCollectionItem[];
}

export interface GetDatabaseManagementManagedDatabasesUserProxyUsersProxyUserCollectionItem {
    authentication: string;
    flags: string;
    name: string;
}

export interface GetDatabaseManagementManagedDatabasesUserSystemPrivilegeItem {
    adminOption: string;
    common: string;
    inherited: string;
    name: string;
}

export interface GetDatabaseManagementManagedDatabasesUserSystemPrivilegesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseManagementManagedDatabasesUserSystemPrivilegesSystemPrivilegeCollection {
    items: outputs.GetDatabaseManagementManagedDatabasesUserSystemPrivilegesSystemPrivilegeCollectionItem[];
}

export interface GetDatabaseManagementManagedDatabasesUserSystemPrivilegesSystemPrivilegeCollectionItem {
    adminOption: string;
    common: string;
    inherited: string;
    name: string;
}

export interface GetDatabaseManagementManagedMySqlDatabaseConfigurationDataFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseManagementManagedMySqlDatabaseConfigurationDataMySqlConfigurationDataCollection {
    items: outputs.GetDatabaseManagementManagedMySqlDatabaseConfigurationDataMySqlConfigurationDataCollectionItem[];
}

export interface GetDatabaseManagementManagedMySqlDatabaseConfigurationDataMySqlConfigurationDataCollectionItem {
    defaultValue: string;
    description: string;
    hostSet: string;
    isConfigurable: boolean;
    isDynamic: boolean;
    isInit: boolean;
    maxValue: number;
    minValue: number;
    name: string;
    path: string;
    possibleValues: string;
    source: string;
    supportedVersions: string;
    timeSet: string;
    type: string;
    userSet: string;
    value: string;
}

export interface GetDatabaseManagementManagedMySqlDatabaseHeatWaveNode {
    id: string;
    status: string;
    timeCreated: string;
}

export interface GetDatabaseManagementManagedMySqlDatabaseSqlDataFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseManagementManagedMySqlDatabaseSqlDataMySqlDataCollection {
    items: outputs.GetDatabaseManagementManagedMySqlDatabaseSqlDataMySqlDataCollectionItem[];
}

export interface GetDatabaseManagementManagedMySqlDatabaseSqlDataMySqlDataCollectionItem {
    avgTimerWait: number;
    countStar: number;
    digest: string;
    digestText: string;
    firstSeen: string;
    heatWaveOffloaded: number;
    heatWaveOutOfMemory: number;
    lastSeen: string;
    maxTimerWait: number;
    minTimerWait: number;
    quantile95: number;
    quantile99: number;
    quantile999: number;
    schemaName: string;
    sumCreatedTempDiskTables: number;
    sumCreatedTempTables: number;
    sumErrors: number;
    sumLockTime: number;
    sumNoGoodIndexUsed: number;
    sumNoIndexUsed: number;
    sumRowsAffected: number;
    sumRowsExamined: number;
    sumRowsSent: number;
    sumSelectFullJoin: number;
    sumSelectFullRangeJoin: number;
    sumSelectRange: number;
    sumSelectRangeCheck: number;
    sumSelectScan: number;
    sumSortMergePasses: number;
    sumSortRange: number;
    sumSortRows: number;
    sumSortScan: number;
    sumTimerWait: number;
    sumWarnings: number;
}

export interface GetDatabaseManagementManagedMySqlDatabasesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseManagementManagedMySqlDatabasesManagedMySqlDatabaseCollection {
    items: outputs.GetDatabaseManagementManagedMySqlDatabasesManagedMySqlDatabaseCollectionItem[];
}

export interface GetDatabaseManagementManagedMySqlDatabasesManagedMySqlDatabaseCollectionItem {
    compartmentId: string;
    dbName: string;
    dbVersion: string;
    heatWaveClusterDisplayName: string;
    heatWaveMemorySize: number;
    heatWaveNodeShape: string;
    heatWaveNodes: outputs.GetDatabaseManagementManagedMySqlDatabasesManagedMySqlDatabaseCollectionItemHeatWaveNode[];
    id: string;
    isHeatWaveActive: boolean;
    isHeatWaveEnabled: boolean;
    isLakehouseEnabled: boolean;
    name: string;
    timeCreated: string;
    timeCreatedHeatWave: string;
}

export interface GetDatabaseManagementManagedMySqlDatabasesManagedMySqlDatabaseCollectionItemHeatWaveNode {
    id: string;
    status: string;
    timeCreated: string;
}

export interface GetDatabaseManagementNamedCredentialContent {
    credentialType: string;
    passwordSecretAccessMode: string;
    passwordSecretId: string;
    role: string;
    userName: string;
}

export interface GetDatabaseManagementNamedCredentialsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseManagementNamedCredentialsNamedCredentialCollection {
    items: outputs.GetDatabaseManagementNamedCredentialsNamedCredentialCollectionItem[];
}

export interface GetDatabaseManagementNamedCredentialsNamedCredentialCollectionItem {
    associatedResource: string;
    compartmentId: string;
    contents: outputs.GetDatabaseManagementNamedCredentialsNamedCredentialCollectionItemContent[];
    definedTags: {[key: string]: string};
    description: string;
    freeformTags: {[key: string]: string};
    id: string;
    lifecycleDetails: string;
    name: string;
    scope: string;
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
    type: string;
}

export interface GetDatabaseManagementNamedCredentialsNamedCredentialCollectionItemContent {
    credentialType: string;
    passwordSecretAccessMode: string;
    passwordSecretId: string;
    role: string;
    userName: string;
}

export interface GetDatabaseMigrationConnectionAdditionalAttribute {
    name: string;
    value: string;
}

export interface GetDatabaseMigrationConnectionIngressIp {
    ingressIp: string;
}

export interface GetDatabaseMigrationConnectionsConnectionCollection {
    items: outputs.GetDatabaseMigrationConnectionsConnectionCollectionItem[];
}

export interface GetDatabaseMigrationConnectionsConnectionCollectionItem {
    additionalAttributes: outputs.GetDatabaseMigrationConnectionsConnectionCollectionItemAdditionalAttribute[];
    compartmentId: string;
    connectionString: string;
    connectionType: string;
    databaseId: string;
    databaseName: string;
    dbSystemId: string;
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    freeformTags: {[key: string]: string};
    host: string;
    id: string;
    ingressIps: outputs.GetDatabaseMigrationConnectionsConnectionCollectionItemIngressIp[];
    keyId: string;
    lifecycleDetails: string;
    nsgIds: string[];
    password: string;
    port: number;
    privateEndpointId: string;
    replicationPassword: string;
    replicationUsername: string;
    secretId: string;
    securityProtocol: string;
    sshHost: string;
    sshKey: string;
    sshSudoLocation: string;
    sshUser: string;
    sslCa: string;
    sslCert: string;
    sslCrl: string;
    sslKey: string;
    sslMode: string;
    state: string;
    subnetId: string;
    systemTags: {[key: string]: string};
    technologyType: string;
    timeCreated: string;
    timeUpdated: string;
    username: string;
    vaultId: string;
    wallet: string;
}

export interface GetDatabaseMigrationConnectionsConnectionCollectionItemAdditionalAttribute {
    name: string;
    value: string;
}

export interface GetDatabaseMigrationConnectionsConnectionCollectionItemIngressIp {
    ingressIp: string;
}

export interface GetDatabaseMigrationConnectionsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseMigrationJobAdvisorReportReportLocationDetail {
    locationInSource: string;
    objectStorageDetails: outputs.GetDatabaseMigrationJobAdvisorReportReportLocationDetailObjectStorageDetail[];
}

export interface GetDatabaseMigrationJobAdvisorReportReportLocationDetailObjectStorageDetail {
    bucket: string;
    namespace: string;
    object: string;
}

export interface GetDatabaseMigrationJobOutputItem {
    message: string;
}

export interface GetDatabaseMigrationJobParameterFileVersion {
    definedTags: {[key: string]: string};
    description: string;
    freeformTags: {[key: string]: string};
    isCurrent: boolean;
    isFactory: boolean;
    kind: string;
    name: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
}

export interface GetDatabaseMigrationJobProgress {
    currentPhase: string;
    currentStatus: string;
    phases: outputs.GetDatabaseMigrationJobProgressPhase[];
}

export interface GetDatabaseMigrationJobProgressPhase {
    action: string;
    durationInMs: number;
    editableParameterFiles: string[];
    extracts: outputs.GetDatabaseMigrationJobProgressPhaseExtract[];
    isAdvisorReportAvailable: boolean;
    isSuspendAvailable: boolean;
    issue: string;
    logLocations: outputs.GetDatabaseMigrationJobProgressPhaseLogLocation[];
    name: string;
    progress: number;
    status: string;
}

export interface GetDatabaseMigrationJobProgressPhaseExtract {
    message: string;
    type: string;
}

export interface GetDatabaseMigrationJobProgressPhaseLogLocation {
    bucket: string;
    namespace: string;
    object: string;
}

export interface GetDatabaseMigrationJobUnsupportedObject {
    object: string;
    owner: string;
    type: string;
}

export interface GetDatabaseMigrationJobsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseMigrationJobsJobCollection {
    items: outputs.GetDatabaseMigrationJobsJobCollectionItem[];
}

export interface GetDatabaseMigrationJobsJobCollectionItem {
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    jobId: string;
    lifecycleDetails: string;
    migrationId: string;
    parameterFileVersions: outputs.GetDatabaseMigrationJobsJobCollectionItemParameterFileVersion[];
    progresses: outputs.GetDatabaseMigrationJobsJobCollectionItemProgress[];
    state: string;
    suspendTrigger: number;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
    type: string;
    unsupportedObjects: outputs.GetDatabaseMigrationJobsJobCollectionItemUnsupportedObject[];
}

export interface GetDatabaseMigrationJobsJobCollectionItemParameterFileVersion {
    definedTags: {[key: string]: string};
    description: string;
    freeformTags: {[key: string]: string};
    isCurrent: boolean;
    isFactory: boolean;
    kind: string;
    name: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
}

export interface GetDatabaseMigrationJobsJobCollectionItemProgress {
    currentPhase: string;
    currentStatus: string;
    phases: outputs.GetDatabaseMigrationJobsJobCollectionItemProgressPhase[];
}

export interface GetDatabaseMigrationJobsJobCollectionItemProgressPhase {
    action: string;
    durationInMs: number;
    editableParameterFiles: string[];
    extracts: outputs.GetDatabaseMigrationJobsJobCollectionItemProgressPhaseExtract[];
    isAdvisorReportAvailable: boolean;
    isSuspendAvailable: boolean;
    issue: string;
    logLocations: outputs.GetDatabaseMigrationJobsJobCollectionItemProgressPhaseLogLocation[];
    name: string;
    progress: number;
    status: string;
}

export interface GetDatabaseMigrationJobsJobCollectionItemProgressPhaseExtract {
    message: string;
    type: string;
}

export interface GetDatabaseMigrationJobsJobCollectionItemProgressPhaseLogLocation {
    bucket: string;
    namespace: string;
    object: string;
}

export interface GetDatabaseMigrationJobsJobCollectionItemUnsupportedObject {
    object: string;
    owner: string;
    type: string;
}

export interface GetDatabaseMigrationMigrationAdvancedParameter {
    dataType: string;
    name: string;
    value: string;
}

export interface GetDatabaseMigrationMigrationAdvisorSetting {
    isIgnoreErrors: boolean;
    isSkipAdvisor: boolean;
}

export interface GetDatabaseMigrationMigrationDataTransferMediumDetail {
    accessKeyId: string;
    name: string;
    objectStorageBuckets: outputs.GetDatabaseMigrationMigrationDataTransferMediumDetailObjectStorageBucket[];
    region: string;
    secretAccessKey: string;
    sharedStorageMountTargetId: string;
    sources: outputs.GetDatabaseMigrationMigrationDataTransferMediumDetailSource[];
    targets: outputs.GetDatabaseMigrationMigrationDataTransferMediumDetailTarget[];
    type: string;
}

export interface GetDatabaseMigrationMigrationDataTransferMediumDetailObjectStorageBucket {
    bucket: string;
    namespace: string;
}

export interface GetDatabaseMigrationMigrationDataTransferMediumDetailSource {
    kind: string;
    ociHome: string;
    walletLocation: string;
}

export interface GetDatabaseMigrationMigrationDataTransferMediumDetailTarget {
    kind: string;
    ociHome: string;
    walletLocation: string;
}

export interface GetDatabaseMigrationMigrationExcludeObject {
    isOmitExcludedTableFromReplication: boolean;
    object: string;
    owner: string;
    schema: string;
    type: string;
}

export interface GetDatabaseMigrationMigrationGgsDetail {
    acceptableLag: number;
    extracts: outputs.GetDatabaseMigrationMigrationGgsDetailExtract[];
    ggsDeployments: outputs.GetDatabaseMigrationMigrationGgsDetailGgsDeployment[];
    replicats: outputs.GetDatabaseMigrationMigrationGgsDetailReplicat[];
}

export interface GetDatabaseMigrationMigrationGgsDetailExtract {
    longTransDuration: number;
    performanceProfile: string;
}

export interface GetDatabaseMigrationMigrationGgsDetailGgsDeployment {
    deploymentId: string;
    ggsAdminCredentialsSecretId: string;
}

export interface GetDatabaseMigrationMigrationGgsDetailReplicat {
    performanceProfile: string;
}

export interface GetDatabaseMigrationMigrationHubDetail {
    acceptableLag: number;
    computeId: string;
    extracts: outputs.GetDatabaseMigrationMigrationHubDetailExtract[];
    keyId: string;
    replicats: outputs.GetDatabaseMigrationMigrationHubDetailReplicat[];
    restAdminCredentials: outputs.GetDatabaseMigrationMigrationHubDetailRestAdminCredential[];
    url: string;
    vaultId: string;
}

export interface GetDatabaseMigrationMigrationHubDetailExtract {
    longTransDuration: number;
    performanceProfile: string;
}

export interface GetDatabaseMigrationMigrationHubDetailReplicat {
    performanceProfile: string;
}

export interface GetDatabaseMigrationMigrationHubDetailRestAdminCredential {
    password: string;
    username: string;
}

export interface GetDatabaseMigrationMigrationIncludeObject {
    isOmitExcludedTableFromReplication: boolean;
    object: string;
    owner: string;
    schema: string;
    type: string;
}

export interface GetDatabaseMigrationMigrationInitialLoadSetting {
    compatibilities: string[];
    dataPumpParameters: outputs.GetDatabaseMigrationMigrationInitialLoadSettingDataPumpParameter[];
    exportDirectoryObjects: outputs.GetDatabaseMigrationMigrationInitialLoadSettingExportDirectoryObject[];
    handleGrantErrors: string;
    importDirectoryObjects: outputs.GetDatabaseMigrationMigrationInitialLoadSettingImportDirectoryObject[];
    isConsistent: boolean;
    isIgnoreExistingObjects: boolean;
    isTzUtc: boolean;
    jobMode: string;
    metadataRemaps: outputs.GetDatabaseMigrationMigrationInitialLoadSettingMetadataRemap[];
    primaryKeyCompatibility: string;
    tablespaceDetails: outputs.GetDatabaseMigrationMigrationInitialLoadSettingTablespaceDetail[];
}

export interface GetDatabaseMigrationMigrationInitialLoadSettingDataPumpParameter {
    estimate: string;
    excludeParameters: string[];
    exportParallelismDegree: number;
    importParallelismDegree: number;
    isCluster: boolean;
    tableExistsAction: string;
}

export interface GetDatabaseMigrationMigrationInitialLoadSettingExportDirectoryObject {
    name: string;
    path: string;
}

export interface GetDatabaseMigrationMigrationInitialLoadSettingImportDirectoryObject {
    name: string;
    path: string;
}

export interface GetDatabaseMigrationMigrationInitialLoadSettingMetadataRemap {
    newValue: string;
    oldValue: string;
    type: string;
}

export interface GetDatabaseMigrationMigrationInitialLoadSettingTablespaceDetail {
    blockSizeInKbs: string;
    extendSizeInMbs: number;
    isAutoCreate: boolean;
    isBigFile: boolean;
    remapTarget: string;
    targetType: string;
}

export interface GetDatabaseMigrationMigrationObjectTypesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseMigrationMigrationObjectTypesMigrationObjectTypeSummaryCollection {
    items: outputs.GetDatabaseMigrationMigrationObjectTypesMigrationObjectTypeSummaryCollectionItem[];
}

export interface GetDatabaseMigrationMigrationObjectTypesMigrationObjectTypeSummaryCollectionItem {
    name: string;
}

export interface GetDatabaseMigrationMigrationsAdvancedParameter {
    dataType: string;
    name: string;
    value: string;
}

export interface GetDatabaseMigrationMigrationsAdvisorSetting {
    isIgnoreErrors: boolean;
    isSkipAdvisor: boolean;
}

export interface GetDatabaseMigrationMigrationsDataTransferMediumDetail {
    accessKeyId: string;
    name: string;
    objectStorageBuckets: outputs.GetDatabaseMigrationMigrationsDataTransferMediumDetailObjectStorageBucket[];
    region: string;
    secretAccessKey: string;
    sharedStorageMountTargetId: string;
    sources: outputs.GetDatabaseMigrationMigrationsDataTransferMediumDetailSource[];
    targets: outputs.GetDatabaseMigrationMigrationsDataTransferMediumDetailTarget[];
    type: string;
}

export interface GetDatabaseMigrationMigrationsDataTransferMediumDetailObjectStorageBucket {
    bucket: string;
    namespace: string;
}

export interface GetDatabaseMigrationMigrationsDataTransferMediumDetailSource {
    kind: string;
    ociHome: string;
    walletLocation: string;
}

export interface GetDatabaseMigrationMigrationsDataTransferMediumDetailTarget {
    kind: string;
    ociHome: string;
    walletLocation: string;
}

export interface GetDatabaseMigrationMigrationsExcludeObject {
    isOmitExcludedTableFromReplication: boolean;
    object: string;
    owner: string;
    schema: string;
    type: string;
}

export interface GetDatabaseMigrationMigrationsGgsDetail {
    acceptableLag: number;
    extracts: outputs.GetDatabaseMigrationMigrationsGgsDetailExtract[];
    ggsDeployments: outputs.GetDatabaseMigrationMigrationsGgsDetailGgsDeployment[];
    replicats: outputs.GetDatabaseMigrationMigrationsGgsDetailReplicat[];
}

export interface GetDatabaseMigrationMigrationsGgsDetailExtract {
    longTransDuration: number;
    performanceProfile: string;
}

export interface GetDatabaseMigrationMigrationsGgsDetailGgsDeployment {
    deploymentId: string;
    ggsAdminCredentialsSecretId: string;
}

export interface GetDatabaseMigrationMigrationsGgsDetailReplicat {
    performanceProfile: string;
}

export interface GetDatabaseMigrationMigrationsHubDetail {
    acceptableLag: number;
    computeId: string;
    extracts: outputs.GetDatabaseMigrationMigrationsHubDetailExtract[];
    keyId: string;
    replicats: outputs.GetDatabaseMigrationMigrationsHubDetailReplicat[];
    restAdminCredentials: outputs.GetDatabaseMigrationMigrationsHubDetailRestAdminCredential[];
    url: string;
    vaultId: string;
}

export interface GetDatabaseMigrationMigrationsHubDetailExtract {
    longTransDuration: number;
    performanceProfile: string;
}

export interface GetDatabaseMigrationMigrationsHubDetailReplicat {
    performanceProfile: string;
}

export interface GetDatabaseMigrationMigrationsHubDetailRestAdminCredential {
    password: string;
    username: string;
}

export interface GetDatabaseMigrationMigrationsIncludeObject {
    isOmitExcludedTableFromReplication: boolean;
    object: string;
    owner: string;
    schema: string;
    type: string;
}

export interface GetDatabaseMigrationMigrationsInitialLoadSetting {
    compatibilities: string[];
    dataPumpParameters: outputs.GetDatabaseMigrationMigrationsInitialLoadSettingDataPumpParameter[];
    exportDirectoryObjects: outputs.GetDatabaseMigrationMigrationsInitialLoadSettingExportDirectoryObject[];
    handleGrantErrors: string;
    importDirectoryObjects: outputs.GetDatabaseMigrationMigrationsInitialLoadSettingImportDirectoryObject[];
    isConsistent: boolean;
    isIgnoreExistingObjects: boolean;
    isTzUtc: boolean;
    jobMode: string;
    metadataRemaps: outputs.GetDatabaseMigrationMigrationsInitialLoadSettingMetadataRemap[];
    primaryKeyCompatibility: string;
    tablespaceDetails: outputs.GetDatabaseMigrationMigrationsInitialLoadSettingTablespaceDetail[];
}

export interface GetDatabaseMigrationMigrationsInitialLoadSettingDataPumpParameter {
    estimate: string;
    excludeParameters: string[];
    exportParallelismDegree: number;
    importParallelismDegree: number;
    isCluster: boolean;
    tableExistsAction: string;
}

export interface GetDatabaseMigrationMigrationsInitialLoadSettingExportDirectoryObject {
    name: string;
    path: string;
}

export interface GetDatabaseMigrationMigrationsInitialLoadSettingImportDirectoryObject {
    name: string;
    path: string;
}

export interface GetDatabaseMigrationMigrationsInitialLoadSettingMetadataRemap {
    newValue: string;
    oldValue: string;
    type: string;
}

export interface GetDatabaseMigrationMigrationsInitialLoadSettingTablespaceDetail {
    blockSizeInKbs: string;
    extendSizeInMbs: number;
    isAutoCreate: boolean;
    isBigFile: boolean;
    remapTarget: string;
    targetType: string;
}

export interface GetDatabaseOneoffPatchesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseOneoffPatchesOneoffPatch {
    compartmentId: string;
    dbVersion: string;
    definedTags: {[key: string]: string};
    displayName: string;
    downloadOneoffPatchTrigger: number;
    freeformTags: {[key: string]: string};
    id: string;
    lifecycleDetails: string;
    oneOffPatches: string[];
    releaseUpdate: string;
    sha256sum: string;
    sizeInKbs: number;
    state: string;
    timeCreated: string;
    timeOfExpiration: string;
    timeUpdated: string;
}

export interface GetDatabasePluggableDatabaseConnectionString {
    allConnectionStrings: {[key: string]: string};
    pdbDefault: string;
    pdbIpDefault: string;
}

export interface GetDatabasePluggableDatabasePdbCreationTypeDetail {
    creationType: string;
    dblinkUserPassword: string;
    dblinkUsername: string;
    isThinClone: boolean;
    refreshableCloneDetails: outputs.GetDatabasePluggableDatabasePdbCreationTypeDetailRefreshableCloneDetail[];
    sourceContainerDatabaseAdminPassword: string;
    sourcePluggableDatabaseId: string;
}

export interface GetDatabasePluggableDatabasePdbCreationTypeDetailRefreshableCloneDetail {
    isRefreshableClone: boolean;
}

export interface GetDatabasePluggableDatabasePdbNodeLevelDetail {
    nodeName: string;
    openMode: string;
}

export interface GetDatabasePluggableDatabasePluggableDatabaseManagementConfig {
    managementStatus: string;
}

export interface GetDatabasePluggableDatabaseRefreshableCloneConfig {
    isRefreshableClone: boolean;
}

export interface GetDatabasePluggableDatabasesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabasePluggableDatabasesPluggableDatabase {
    compartmentId: string;
    connectionStrings: outputs.GetDatabasePluggableDatabasesPluggableDatabaseConnectionString[];
    containerDatabaseAdminPassword: string;
    containerDatabaseId: string;
    convertToRegularTrigger: number;
    definedTags: {[key: string]: string};
    freeformTags: {[key: string]: string};
    id: string;
    isRestricted: boolean;
    lifecycleDetails: string;
    openMode: string;
    pdbAdminPassword: string;
    pdbCreationTypeDetails: outputs.GetDatabasePluggableDatabasesPluggableDatabasePdbCreationTypeDetail[];
    pdbName: string;
    pdbNodeLevelDetails: outputs.GetDatabasePluggableDatabasesPluggableDatabasePdbNodeLevelDetail[];
    pluggableDatabaseManagementConfigs: outputs.GetDatabasePluggableDatabasesPluggableDatabasePluggableDatabaseManagementConfig[];
    refreshTrigger: number;
    refreshableCloneConfigs: outputs.GetDatabasePluggableDatabasesPluggableDatabaseRefreshableCloneConfig[];
    rotateKeyTrigger: number;
    shouldCreatePdbBackup: boolean;
    shouldPdbAdminAccountBeLocked: boolean;
    state: string;
    tdeWalletPassword: string;
    timeCreated: string;
}

export interface GetDatabasePluggableDatabasesPluggableDatabaseConnectionString {
    allConnectionStrings: {[key: string]: string};
    pdbDefault: string;
    pdbIpDefault: string;
}

export interface GetDatabasePluggableDatabasesPluggableDatabasePdbCreationTypeDetail {
    creationType: string;
    dblinkUserPassword: string;
    dblinkUsername: string;
    isThinClone: boolean;
    refreshableCloneDetails: outputs.GetDatabasePluggableDatabasesPluggableDatabasePdbCreationTypeDetailRefreshableCloneDetail[];
    sourceContainerDatabaseAdminPassword: string;
    sourcePluggableDatabaseId: string;
}

export interface GetDatabasePluggableDatabasesPluggableDatabasePdbCreationTypeDetailRefreshableCloneDetail {
    isRefreshableClone: boolean;
}

export interface GetDatabasePluggableDatabasesPluggableDatabasePdbNodeLevelDetail {
    nodeName: string;
    openMode: string;
}

export interface GetDatabasePluggableDatabasesPluggableDatabasePluggableDatabaseManagementConfig {
    managementStatus: string;
}

export interface GetDatabasePluggableDatabasesPluggableDatabaseRefreshableCloneConfig {
    isRefreshableClone: boolean;
}

export interface GetDatabaseSystemVersionsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseSystemVersionsSystemVersionCollection {
    items: outputs.GetDatabaseSystemVersionsSystemVersionCollectionItem[];
}

export interface GetDatabaseSystemVersionsSystemVersionCollectionItem {
    giVersion: string;
    shape: string;
    systemVersions: string[];
}

export interface GetDatabaseToolsDatabaseToolsConnectionKeyStore {
    keyStoreContents: outputs.GetDatabaseToolsDatabaseToolsConnectionKeyStoreKeyStoreContent[];
    keyStorePasswords: outputs.GetDatabaseToolsDatabaseToolsConnectionKeyStoreKeyStorePassword[];
    keyStoreType: string;
}

export interface GetDatabaseToolsDatabaseToolsConnectionKeyStoreKeyStoreContent {
    secretId: string;
    valueType: string;
}

export interface GetDatabaseToolsDatabaseToolsConnectionKeyStoreKeyStorePassword {
    secretId: string;
    valueType: string;
}

export interface GetDatabaseToolsDatabaseToolsConnectionLock {
    message: string;
    relatedResourceId: string;
    timeCreated: string;
    type: string;
}

export interface GetDatabaseToolsDatabaseToolsConnectionProxyClient {
    proxyAuthenticationType: string;
    roles: string[];
    userName: string;
    userPasswords: outputs.GetDatabaseToolsDatabaseToolsConnectionProxyClientUserPassword[];
}

export interface GetDatabaseToolsDatabaseToolsConnectionProxyClientUserPassword {
    secretId: string;
    valueType: string;
}

export interface GetDatabaseToolsDatabaseToolsConnectionRelatedResource {
    entityType: string;
    identifier: string;
}

export interface GetDatabaseToolsDatabaseToolsConnectionUserPassword {
    secretId: string;
    valueType: string;
}

export interface GetDatabaseToolsDatabaseToolsConnectionsDatabaseToolsConnectionCollection {
    items: outputs.GetDatabaseToolsDatabaseToolsConnectionsDatabaseToolsConnectionCollectionItem[];
}

export interface GetDatabaseToolsDatabaseToolsConnectionsDatabaseToolsConnectionCollectionItem {
    advancedProperties: {[key: string]: string};
    compartmentId: string;
    connectionString: string;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    keyStores: outputs.GetDatabaseToolsDatabaseToolsConnectionsDatabaseToolsConnectionCollectionItemKeyStore[];
    lifecycleDetails: string;
    locks: outputs.GetDatabaseToolsDatabaseToolsConnectionsDatabaseToolsConnectionCollectionItemLock[];
    privateEndpointId: string;
    proxyClients: outputs.GetDatabaseToolsDatabaseToolsConnectionsDatabaseToolsConnectionCollectionItemProxyClient[];
    relatedResources: outputs.GetDatabaseToolsDatabaseToolsConnectionsDatabaseToolsConnectionCollectionItemRelatedResource[];
    runtimeSupport: string;
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
    type: string;
    url: string;
    userName: string;
    userPasswords: outputs.GetDatabaseToolsDatabaseToolsConnectionsDatabaseToolsConnectionCollectionItemUserPassword[];
}

export interface GetDatabaseToolsDatabaseToolsConnectionsDatabaseToolsConnectionCollectionItemKeyStore {
    keyStoreContents: outputs.GetDatabaseToolsDatabaseToolsConnectionsDatabaseToolsConnectionCollectionItemKeyStoreKeyStoreContent[];
    keyStorePasswords: outputs.GetDatabaseToolsDatabaseToolsConnectionsDatabaseToolsConnectionCollectionItemKeyStoreKeyStorePassword[];
    keyStoreType: string;
}

export interface GetDatabaseToolsDatabaseToolsConnectionsDatabaseToolsConnectionCollectionItemKeyStoreKeyStoreContent {
    secretId: string;
    valueType: string;
}

export interface GetDatabaseToolsDatabaseToolsConnectionsDatabaseToolsConnectionCollectionItemKeyStoreKeyStorePassword {
    secretId: string;
    valueType: string;
}

export interface GetDatabaseToolsDatabaseToolsConnectionsDatabaseToolsConnectionCollectionItemLock {
    message: string;
    relatedResourceId: string;
    timeCreated: string;
    type: string;
}

export interface GetDatabaseToolsDatabaseToolsConnectionsDatabaseToolsConnectionCollectionItemProxyClient {
    proxyAuthenticationType: string;
    roles: string[];
    userName: string;
    userPasswords: outputs.GetDatabaseToolsDatabaseToolsConnectionsDatabaseToolsConnectionCollectionItemProxyClientUserPassword[];
}

export interface GetDatabaseToolsDatabaseToolsConnectionsDatabaseToolsConnectionCollectionItemProxyClientUserPassword {
    secretId: string;
    valueType: string;
}

export interface GetDatabaseToolsDatabaseToolsConnectionsDatabaseToolsConnectionCollectionItemRelatedResource {
    entityType: string;
    identifier: string;
}

export interface GetDatabaseToolsDatabaseToolsConnectionsDatabaseToolsConnectionCollectionItemUserPassword {
    secretId: string;
    valueType: string;
}

export interface GetDatabaseToolsDatabaseToolsConnectionsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseToolsDatabaseToolsEndpointServicesDatabaseToolsEndpointServiceCollection {
    items: outputs.GetDatabaseToolsDatabaseToolsEndpointServicesDatabaseToolsEndpointServiceCollectionItem[];
}

export interface GetDatabaseToolsDatabaseToolsEndpointServicesDatabaseToolsEndpointServiceCollectionItem {
    compartmentId: string;
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    lifecycleDetails: string;
    name: string;
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
}

export interface GetDatabaseToolsDatabaseToolsEndpointServicesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseToolsDatabaseToolsPrivateEndpointLock {
    message: string;
    relatedResourceId: string;
    timeCreated: string;
    type: string;
}

export interface GetDatabaseToolsDatabaseToolsPrivateEndpointReverseConnectionConfiguration {
    reverseConnectionsSourceIps: outputs.GetDatabaseToolsDatabaseToolsPrivateEndpointReverseConnectionConfigurationReverseConnectionsSourceIp[];
}

export interface GetDatabaseToolsDatabaseToolsPrivateEndpointReverseConnectionConfigurationReverseConnectionsSourceIp {
    sourceIp: string;
}

export interface GetDatabaseToolsDatabaseToolsPrivateEndpointsDatabaseToolsPrivateEndpointCollection {
    items: outputs.GetDatabaseToolsDatabaseToolsPrivateEndpointsDatabaseToolsPrivateEndpointCollectionItem[];
}

export interface GetDatabaseToolsDatabaseToolsPrivateEndpointsDatabaseToolsPrivateEndpointCollectionItem {
    additionalFqdns: string[];
    compartmentId: string;
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    endpointFqdn: string;
    endpointServiceId: string;
    freeformTags: {[key: string]: string};
    id: string;
    lifecycleDetails: string;
    locks: outputs.GetDatabaseToolsDatabaseToolsPrivateEndpointsDatabaseToolsPrivateEndpointCollectionItemLock[];
    nsgIds: string[];
    privateEndpointIp: string;
    privateEndpointVnicId: string;
    reverseConnectionConfigurations: outputs.GetDatabaseToolsDatabaseToolsPrivateEndpointsDatabaseToolsPrivateEndpointCollectionItemReverseConnectionConfiguration[];
    state: string;
    subnetId: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
    vcnId: string;
}

export interface GetDatabaseToolsDatabaseToolsPrivateEndpointsDatabaseToolsPrivateEndpointCollectionItemLock {
    message: string;
    relatedResourceId: string;
    timeCreated: string;
    type: string;
}

export interface GetDatabaseToolsDatabaseToolsPrivateEndpointsDatabaseToolsPrivateEndpointCollectionItemReverseConnectionConfiguration {
    reverseConnectionsSourceIps: outputs.GetDatabaseToolsDatabaseToolsPrivateEndpointsDatabaseToolsPrivateEndpointCollectionItemReverseConnectionConfigurationReverseConnectionsSourceIp[];
}

export interface GetDatabaseToolsDatabaseToolsPrivateEndpointsDatabaseToolsPrivateEndpointCollectionItemReverseConnectionConfigurationReverseConnectionsSourceIp {
    sourceIp: string;
}

export interface GetDatabaseToolsDatabaseToolsPrivateEndpointsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseVmClusterDataCollectionOption {
    isDiagnosticsEventsEnabled: boolean;
    isHealthMonitoringEnabled: boolean;
    isIncidentLogsEnabled: boolean;
}

export interface GetDatabaseVmClusterFileSystemConfigurationDetail {
    fileSystemSizeGb: number;
    mountPoint: string;
}

export interface GetDatabaseVmClusterNetworkDrScan {
    hostname: string;
    ips: string[];
    scanListenerPortTcp: number;
}

export interface GetDatabaseVmClusterNetworkScan {
    hostname: string;
    ips: string[];
    port: number;
    scanListenerPortTcp: number;
    scanListenerPortTcpSsl: number;
}

export interface GetDatabaseVmClusterNetworkVmNetwork {
    domainName: string;
    gateway: string;
    netmask: string;
    networkType: string;
    nodes: outputs.GetDatabaseVmClusterNetworkVmNetworkNode[];
    vlanId: string;
}

export interface GetDatabaseVmClusterNetworkVmNetworkNode {
    dbServerId: string;
    hostname: string;
    ip: string;
    state: string;
    vip: string;
    vipHostname: string;
}

export interface GetDatabaseVmClusterNetworksFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseVmClusterNetworksVmClusterNetwork {
    action: string;
    compartmentId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    dns: string[];
    drScans: outputs.GetDatabaseVmClusterNetworksVmClusterNetworkDrScan[];
    exadataInfrastructureId: string;
    freeformTags: {[key: string]: string};
    id: string;
    lifecycleDetails: string;
    ntps: string[];
    scans: outputs.GetDatabaseVmClusterNetworksVmClusterNetworkScan[];
    state: string;
    timeCreated: string;
    validateVmClusterNetwork: boolean;
    vmClusterId: string;
    vmNetworks: outputs.GetDatabaseVmClusterNetworksVmClusterNetworkVmNetwork[];
}

export interface GetDatabaseVmClusterNetworksVmClusterNetworkDrScan {
    hostname: string;
    ips: string[];
    scanListenerPortTcp: number;
}

export interface GetDatabaseVmClusterNetworksVmClusterNetworkScan {
    hostname: string;
    ips: string[];
    port: number;
    scanListenerPortTcp: number;
    scanListenerPortTcpSsl: number;
}

export interface GetDatabaseVmClusterNetworksVmClusterNetworkVmNetwork {
    domainName: string;
    gateway: string;
    netmask: string;
    networkType: string;
    nodes: outputs.GetDatabaseVmClusterNetworksVmClusterNetworkVmNetworkNode[];
    vlanId: string;
}

export interface GetDatabaseVmClusterNetworksVmClusterNetworkVmNetworkNode {
    dbServerId: string;
    hostname: string;
    ip: string;
    state: string;
    vip: string;
    vipHostname: string;
}

export interface GetDatabaseVmClusterPatchHistoryEntriesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseVmClusterPatchHistoryEntriesPatchHistoryEntry {
    action: string;
    id: string;
    lifecycleDetails: string;
    patchId: string;
    state: string;
    timeEnded: string;
    timeStarted: string;
}

export interface GetDatabaseVmClusterPatchesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseVmClusterPatchesPatch {
    availableActions: string[];
    description: string;
    id: string;
    lastAction: string;
    lifecycleDetails: string;
    state: string;
    timeReleased: string;
    version: string;
}

export interface GetDatabaseVmClusterRecommendedNetworkDrScan {
    hostname: string;
    ips: string[];
    scanListenerPortTcp: number;
}

export interface GetDatabaseVmClusterRecommendedNetworkNetwork {
    cidr: string;
    domain: string;
    gateway: string;
    netmask: string;
    networkType: string;
    prefix: string;
    vlanId: string;
}

export interface GetDatabaseVmClusterRecommendedNetworkScan {
    hostname: string;
    ips: string[];
    port: number;
    scanListenerPortTcp: number;
    scanListenerPortTcpSsl: number;
}

export interface GetDatabaseVmClusterRecommendedNetworkVmNetwork {
    domainName: string;
    gateway: string;
    netmask: string;
    networkType: string;
    nodes: outputs.GetDatabaseVmClusterRecommendedNetworkVmNetworkNode[];
    vlanId: string;
}

export interface GetDatabaseVmClusterRecommendedNetworkVmNetworkNode {
    dbServerId: string;
    hostname: string;
    ip: string;
    state: string;
    vip: string;
    vipHostname: string;
}

export interface GetDatabaseVmClusterUpdateHistoryEntriesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseVmClusterUpdateHistoryEntriesVmClusterUpdateHistoryEntry {
    id: string;
    lifecycleDetails: string;
    state: string;
    timeCompleted: string;
    timeStarted: string;
    updateAction: string;
    updateId: string;
    updateType: string;
}

export interface GetDatabaseVmClusterUpdatesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseVmClusterUpdatesVmClusterUpdate {
    availableActions: string[];
    description: string;
    id: string;
    lastAction: string;
    lifecycleDetails: string;
    state: string;
    timeReleased: string;
    updateType: string;
    version: string;
}

export interface GetDatabaseVmClustersFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatabaseVmClustersVmCluster {
    availabilityDomain: string;
    compartmentId: string;
    cpuCoreCount: number;
    cpusEnabled: number;
    dataCollectionOptions: outputs.GetDatabaseVmClustersVmClusterDataCollectionOption[];
    dataStorageSizeInGb: number;
    dataStorageSizeInTbs: number;
    dbNodeStorageSizeInGbs: number;
    dbServers: string[];
    definedTags: {[key: string]: string};
    displayName: string;
    exadataInfrastructureId: string;
    fileSystemConfigurationDetails: outputs.GetDatabaseVmClustersVmClusterFileSystemConfigurationDetail[];
    freeformTags: {[key: string]: string};
    giVersion: string;
    id: string;
    isLocalBackupEnabled: boolean;
    isSparseDiskgroupEnabled: boolean;
    lastPatchHistoryEntryId: string;
    licenseModel: string;
    lifecycleDetails: string;
    memorySizeInGbs: number;
    ocpuCount: number;
    ocpusEnabled: number;
    shape: string;
    sshPublicKeys: string[];
    state: string;
    systemVersion: string;
    timeCreated: string;
    timeZone: string;
    vmClusterNetworkId: string;
}

export interface GetDatabaseVmClustersVmClusterDataCollectionOption {
    isDiagnosticsEventsEnabled: boolean;
    isHealthMonitoringEnabled: boolean;
    isIncidentLogsEnabled: boolean;
}

export interface GetDatabaseVmClustersVmClusterFileSystemConfigurationDetail {
    fileSystemSizeGb: number;
    mountPoint: string;
}

export interface GetDatacatalogCatalogLock {
    message: string;
    relatedResourceId: string;
    timeCreated: string;
    type: string;
}

export interface GetDatacatalogCatalogPrivateEndpointLock {
    message: string;
    relatedResourceId: string;
    timeCreated: string;
    type: string;
}

export interface GetDatacatalogCatalogPrivateEndpointsCatalogPrivateEndpoint {
    attachedCatalogs: string[];
    compartmentId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    dnsZones: string[];
    freeformTags: {[key: string]: string};
    id: string;
    lifecycleDetails: string;
    locks: outputs.GetDatacatalogCatalogPrivateEndpointsCatalogPrivateEndpointLock[];
    state: string;
    subnetId: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
}

export interface GetDatacatalogCatalogPrivateEndpointsCatalogPrivateEndpointLock {
    message: string;
    relatedResourceId: string;
    timeCreated: string;
    type: string;
}

export interface GetDatacatalogCatalogPrivateEndpointsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatacatalogCatalogTypesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatacatalogCatalogTypesTypeCollection {
    count: number;
    items: outputs.GetDatacatalogCatalogTypesTypeCollectionItem[];
}

export interface GetDatacatalogCatalogTypesTypeCollectionItem {
    catalogId: string;
    description: string;
    key: string;
    name: string;
    state: string;
    typeCategory: string;
    uri: string;
}

export interface GetDatacatalogCatalogsCatalog {
    attachedCatalogPrivateEndpoints: string[];
    compartmentId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    lifecycleDetails: string;
    locks: outputs.GetDatacatalogCatalogsCatalogLock[];
    numberOfObjects: number;
    serviceApiUrl: string;
    serviceConsoleUrl: string;
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
}

export interface GetDatacatalogCatalogsCatalogLock {
    message: string;
    relatedResourceId: string;
    timeCreated: string;
    type: string;
}

export interface GetDatacatalogCatalogsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatacatalogConnectionsConnectionCollection {
    count: number;
    items: outputs.GetDatacatalogConnectionsConnectionCollectionItem[];
}

export interface GetDatacatalogConnectionsConnectionCollectionItem {
    catalogId: string;
    createdById: string;
    dataAssetKey: string;
    description: string;
    displayName: string;
    encProperties: {[key: string]: string};
    externalKey: string;
    isDefault: boolean;
    key: string;
    properties: {[key: string]: string};
    state: string;
    timeCreated: string;
    timeStatusUpdated: string;
    timeUpdated: string;
    typeKey: string;
    updatedById: string;
    uri: string;
}

export interface GetDatacatalogConnectionsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatacatalogDataAssetsDataAssetCollection {
    count: number;
    items: outputs.GetDatacatalogDataAssetsDataAssetCollectionItem[];
}

export interface GetDatacatalogDataAssetsDataAssetCollectionItem {
    catalogId: string;
    createdById: string;
    description: string;
    displayName: string;
    externalKey: string;
    key: string;
    lifecycleDetails: string;
    properties: {[key: string]: string};
    state: string;
    timeCreated: string;
    timeHarvested: string;
    timeUpdated: string;
    typeKey: string;
    updatedById: string;
    uri: string;
}

export interface GetDatacatalogDataAssetsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatacatalogMetastoreLock {
    message: string;
    relatedResourceId: string;
    timeCreated: string;
    type: string;
}

export interface GetDatacatalogMetastoresFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatacatalogMetastoresMetastore {
    compartmentId: string;
    defaultExternalTableLocation: string;
    defaultManagedTableLocation: string;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    lifecycleDetails: string;
    locks: outputs.GetDatacatalogMetastoresMetastoreLock[];
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
}

export interface GetDatacatalogMetastoresMetastoreLock {
    message: string;
    relatedResourceId: string;
    timeCreated: string;
    type: string;
}

export interface GetDataflowApplicationApplicationLogConfig {
    logGroupId: string;
    logId: string;
}

export interface GetDataflowApplicationDriverShapeConfig {
    memoryInGbs: number;
    ocpus: number;
}

export interface GetDataflowApplicationExecutorShapeConfig {
    memoryInGbs: number;
    ocpus: number;
}

export interface GetDataflowApplicationParameter {
    name: string;
    value: string;
}

export interface GetDataflowApplicationsApplication {
    applicationLogConfigs: outputs.GetDataflowApplicationsApplicationApplicationLogConfig[];
    archiveUri: string;
    arguments: string[];
    className: string;
    compartmentId: string;
    configuration: {[key: string]: string};
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    driverShape: string;
    driverShapeConfigs: outputs.GetDataflowApplicationsApplicationDriverShapeConfig[];
    execute: string;
    executorShape: string;
    executorShapeConfigs: outputs.GetDataflowApplicationsApplicationExecutorShapeConfig[];
    fileUri: string;
    freeformTags: {[key: string]: string};
    id: string;
    idleTimeoutInMinutes: string;
    language: string;
    logsBucketUri: string;
    maxDurationInMinutes: string;
    metastoreId: string;
    numExecutors: number;
    ownerPrincipalId: string;
    ownerUserName: string;
    parameters: outputs.GetDataflowApplicationsApplicationParameter[];
    poolId: string;
    privateEndpointId: string;
    sparkVersion: string;
    state: string;
    timeCreated: string;
    timeUpdated: string;
    type: string;
    warehouseBucketUri: string;
}

export interface GetDataflowApplicationsApplicationApplicationLogConfig {
    logGroupId: string;
    logId: string;
}

export interface GetDataflowApplicationsApplicationDriverShapeConfig {
    memoryInGbs: number;
    ocpus: number;
}

export interface GetDataflowApplicationsApplicationExecutorShapeConfig {
    memoryInGbs: number;
    ocpus: number;
}

export interface GetDataflowApplicationsApplicationParameter {
    name: string;
    value: string;
}

export interface GetDataflowApplicationsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDataflowInvokeRunApplicationLogConfig {
    logGroupId: string;
    logId: string;
}

export interface GetDataflowInvokeRunDriverShapeConfig {
    memoryInGbs: number;
    ocpus: number;
}

export interface GetDataflowInvokeRunExecutorShapeConfig {
    memoryInGbs: number;
    ocpus: number;
}

export interface GetDataflowInvokeRunParameter {
    name: string;
    value: string;
}

export interface GetDataflowInvokeRunsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDataflowInvokeRunsRun {
    applicationId: string;
    applicationLogConfigs: outputs.GetDataflowInvokeRunsRunApplicationLogConfig[];
    archiveUri: string;
    arguments: string[];
    asynchronous: boolean;
    className: string;
    compartmentId: string;
    configuration: {[key: string]: string};
    dataReadInBytes: string;
    dataWrittenInBytes: string;
    definedTags: {[key: string]: string};
    displayName: string;
    driverShape: string;
    driverShapeConfigs: outputs.GetDataflowInvokeRunsRunDriverShapeConfig[];
    execute: string;
    executorShape: string;
    executorShapeConfigs: outputs.GetDataflowInvokeRunsRunExecutorShapeConfig[];
    fileUri: string;
    freeformTags: {[key: string]: string};
    id: string;
    idleTimeoutInMinutes: string;
    language: string;
    lifecycleDetails: string;
    logsBucketUri: string;
    maxDurationInMinutes: string;
    metastoreId: string;
    numExecutors: number;
    opcParentRptUrl: string;
    opcRequestId: string;
    ownerPrincipalId: string;
    ownerUserName: string;
    parameters: outputs.GetDataflowInvokeRunsRunParameter[];
    poolId: string;
    privateEndpointDnsZones: string[];
    privateEndpointId: string;
    privateEndpointMaxHostCount: number;
    privateEndpointNsgIds: string[];
    privateEndpointSubnetId: string;
    runDurationInMilliseconds: string;
    sparkVersion: string;
    state: string;
    timeCreated: string;
    timeUpdated: string;
    totalOcpu: number;
    type: string;
    warehouseBucketUri: string;
}

export interface GetDataflowInvokeRunsRunApplicationLogConfig {
    logGroupId: string;
    logId: string;
}

export interface GetDataflowInvokeRunsRunDriverShapeConfig {
    memoryInGbs: number;
    ocpus: number;
}

export interface GetDataflowInvokeRunsRunExecutorShapeConfig {
    memoryInGbs: number;
    ocpus: number;
}

export interface GetDataflowInvokeRunsRunParameter {
    name: string;
    value: string;
}

export interface GetDataflowPoolConfiguration {
    max: number;
    min: number;
    shape: string;
    shapeConfigs: outputs.GetDataflowPoolConfigurationShapeConfig[];
}

export interface GetDataflowPoolConfigurationShapeConfig {
    memoryInGbs: number;
    ocpus: number;
}

export interface GetDataflowPoolPoolMetric {
    activeRunsCount: string;
    activelyUsedNodeCounts: outputs.GetDataflowPoolPoolMetricActivelyUsedNodeCount[];
    timeLastMetricsUpdated: string;
    timeLastStarted: string;
    timeLastStopped: string;
    timeLastUsed: string;
}

export interface GetDataflowPoolPoolMetricActivelyUsedNodeCount {
    logicalShape: string;
    poolCount: number;
}

export interface GetDataflowPoolSchedule {
    dayOfWeek: string;
    startTime: number;
    stopTime: number;
}

export interface GetDataflowPoolsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDataflowPoolsPoolCollection {
    items: outputs.GetDataflowPoolsPoolCollectionItem[];
}

export interface GetDataflowPoolsPoolCollectionItem {
    compartmentId: string;
    configurations: outputs.GetDataflowPoolsPoolCollectionItemConfiguration[];
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    idleTimeoutInMinutes: number;
    lifecycleDetails: string;
    ownerPrincipalId: string;
    ownerUserName: string;
    poolMetrics: outputs.GetDataflowPoolsPoolCollectionItemPoolMetric[];
    schedules: outputs.GetDataflowPoolsPoolCollectionItemSchedule[];
    state: string;
    timeCreated: string;
    timeUpdated: string;
}

export interface GetDataflowPoolsPoolCollectionItemConfiguration {
    max: number;
    min: number;
    shape: string;
    shapeConfigs: outputs.GetDataflowPoolsPoolCollectionItemConfigurationShapeConfig[];
}

export interface GetDataflowPoolsPoolCollectionItemConfigurationShapeConfig {
    memoryInGbs: number;
    ocpus: number;
}

export interface GetDataflowPoolsPoolCollectionItemPoolMetric {
    activeRunsCount: string;
    activelyUsedNodeCounts: outputs.GetDataflowPoolsPoolCollectionItemPoolMetricActivelyUsedNodeCount[];
    timeLastMetricsUpdated: string;
    timeLastStarted: string;
    timeLastStopped: string;
    timeLastUsed: string;
}

export interface GetDataflowPoolsPoolCollectionItemPoolMetricActivelyUsedNodeCount {
    logicalShape: string;
    poolCount: number;
}

export interface GetDataflowPoolsPoolCollectionItemSchedule {
    dayOfWeek: string;
    startTime: number;
    stopTime: number;
}

export interface GetDataflowPrivateEndpointScanDetail {
    fqdn: string;
    port: string;
}

export interface GetDataflowPrivateEndpointsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDataflowPrivateEndpointsPrivateEndpointCollection {
    items: outputs.GetDataflowPrivateEndpointsPrivateEndpointCollectionItem[];
}

export interface GetDataflowPrivateEndpointsPrivateEndpointCollectionItem {
    compartmentId: string;
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    dnsZones: string[];
    freeformTags: {[key: string]: string};
    id: string;
    lifecycleDetails: string;
    maxHostCount: number;
    nsgIds: string[];
    ownerPrincipalId: string;
    ownerUserName: string;
    scanDetails: outputs.GetDataflowPrivateEndpointsPrivateEndpointCollectionItemScanDetail[];
    state: string;
    subnetId: string;
    timeCreated: string;
    timeUpdated: string;
}

export interface GetDataflowPrivateEndpointsPrivateEndpointCollectionItemScanDetail {
    fqdn: string;
    port: string;
}

export interface GetDataflowRunLogsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDataflowRunLogsRunLog {
    name: string;
    runId: string;
    sizeInBytes: string;
    source: string;
    timeCreated: string;
    type: string;
}

export interface GetDataflowRunStatementOutput {
    datas: outputs.GetDataflowRunStatementOutputData[];
    errorName: string;
    errorValue: string;
    status: string;
    tracebacks: string[];
}

export interface GetDataflowRunStatementOutputData {
    type: string;
    value: string;
}

export interface GetDataflowRunStatementsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDataflowRunStatementsStatementCollection {
    items: outputs.GetDataflowRunStatementsStatementCollectionItem[];
}

export interface GetDataflowRunStatementsStatementCollectionItem {
    code: string;
    id: string;
    outputs: outputs.GetDataflowRunStatementsStatementCollectionItemOutput[];
    progress: number;
    runId: string;
    state: string;
    timeCompleted: string;
    timeCreated: string;
}

export interface GetDataflowRunStatementsStatementCollectionItemOutput {
    datas: outputs.GetDataflowRunStatementsStatementCollectionItemOutputData[];
    errorName: string;
    errorValue: string;
    status: string;
    tracebacks: string[];
}

export interface GetDataflowRunStatementsStatementCollectionItemOutputData {
    type: string;
    value: string;
}

export interface GetDataflowSqlEndpointDriverShapeConfig {
    memoryInGbs: number;
    ocpus: number;
}

export interface GetDataflowSqlEndpointExecutorShapeConfig {
    memoryInGbs: number;
    ocpus: number;
}

export interface GetDataflowSqlEndpointNetworkConfiguration {
    accessControlRules: outputs.GetDataflowSqlEndpointNetworkConfigurationAccessControlRule[];
    hostNamePrefix: string;
    networkType: string;
    privateEndpointIp: string;
    publicEndpointIp: string;
    subnetId: string;
    vcnId: string;
}

export interface GetDataflowSqlEndpointNetworkConfigurationAccessControlRule {
    ipNotation: string;
    value: string;
    vcnIps: string;
}

export interface GetDataflowSqlEndpointsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDataflowSqlEndpointsSqlEndpointCollection {
    items: outputs.GetDataflowSqlEndpointsSqlEndpointCollectionItem[];
}

export interface GetDataflowSqlEndpointsSqlEndpointCollectionItem {
    compartmentId: string;
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    driverShape: string;
    driverShapeConfigs: outputs.GetDataflowSqlEndpointsSqlEndpointCollectionItemDriverShapeConfig[];
    executorShape: string;
    executorShapeConfigs: outputs.GetDataflowSqlEndpointsSqlEndpointCollectionItemExecutorShapeConfig[];
    freeformTags: {[key: string]: string};
    id: string;
    jdbcEndpointUrl: string;
    lakeId: string;
    lastAcceptedRequestToken: string;
    maxExecutorCount: number;
    metastoreId: string;
    minExecutorCount: number;
    networkConfigurations: outputs.GetDataflowSqlEndpointsSqlEndpointCollectionItemNetworkConfiguration[];
    sparkAdvancedConfigurations: {[key: string]: string};
    sqlEndpointVersion: string;
    state: string;
    stateMessage: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
    warehouseBucketUri: string;
}

export interface GetDataflowSqlEndpointsSqlEndpointCollectionItemDriverShapeConfig {
    memoryInGbs: number;
    ocpus: number;
}

export interface GetDataflowSqlEndpointsSqlEndpointCollectionItemExecutorShapeConfig {
    memoryInGbs: number;
    ocpus: number;
}

export interface GetDataflowSqlEndpointsSqlEndpointCollectionItemNetworkConfiguration {
    accessControlRules: outputs.GetDataflowSqlEndpointsSqlEndpointCollectionItemNetworkConfigurationAccessControlRule[];
    hostNamePrefix: string;
    networkType: string;
    privateEndpointIp: string;
    publicEndpointIp: string;
    subnetId: string;
    vcnId: string;
}

export interface GetDataflowSqlEndpointsSqlEndpointCollectionItemNetworkConfigurationAccessControlRule {
    ipNotation: string;
    value: string;
    vcnIps: string;
}

export interface GetDataintegrationWorkspaceApplicationDependentObjectMetadata {
    action: string;
    identifier: string;
    key: string;
    name: string;
    namePath: string;
    objectVersion: number;
    type: string;
}

export interface GetDataintegrationWorkspaceApplicationMetadata {
    aggregatorKey: string;
    aggregators: outputs.GetDataintegrationWorkspaceApplicationMetadataAggregator[];
    countStatistics: outputs.GetDataintegrationWorkspaceApplicationMetadataCountStatistic[];
    createdBy: string;
    createdByName: string;
    identifierPath: string;
    infoFields: {[key: string]: string};
    isFavorite: boolean;
    labels: string[];
    registryVersion: number;
    timeCreated: string;
    timeUpdated: string;
    updatedBy: string;
    updatedByName: string;
}

export interface GetDataintegrationWorkspaceApplicationMetadataAggregator {
    description: string;
    identifier: string;
    key: string;
    name: string;
    type: string;
}

export interface GetDataintegrationWorkspaceApplicationMetadataCountStatistic {
    objectTypeCountLists: outputs.GetDataintegrationWorkspaceApplicationMetadataCountStatisticObjectTypeCountList[];
}

export interface GetDataintegrationWorkspaceApplicationMetadataCountStatisticObjectTypeCountList {
    objectCount: string;
    objectType: string;
}

export interface GetDataintegrationWorkspaceApplicationParentRef {
    parent: string;
    rootDocId: string;
}

export interface GetDataintegrationWorkspaceApplicationPatchDependentObjectMetadata {
    action: string;
    identifier: string;
    key: string;
    name: string;
    namePath: string;
    objectVersion: number;
    type: string;
}

export interface GetDataintegrationWorkspaceApplicationPatchMetadata {
    aggregatorKey: string;
    aggregators: outputs.GetDataintegrationWorkspaceApplicationPatchMetadataAggregator[];
    countStatistics: outputs.GetDataintegrationWorkspaceApplicationPatchMetadataCountStatistic[];
    createdBy: string;
    createdByName: string;
    identifierPath: string;
    infoFields: {[key: string]: string};
    isFavorite: boolean;
    labels: string[];
    registryVersion: number;
    timeCreated: string;
    timeUpdated: string;
    updatedBy: string;
    updatedByName: string;
}

export interface GetDataintegrationWorkspaceApplicationPatchMetadataAggregator {
    description: string;
    identifier: string;
    key: string;
    name: string;
    type: string;
}

export interface GetDataintegrationWorkspaceApplicationPatchMetadataCountStatistic {
    objectTypeCountLists: outputs.GetDataintegrationWorkspaceApplicationPatchMetadataCountStatisticObjectTypeCountList[];
}

export interface GetDataintegrationWorkspaceApplicationPatchMetadataCountStatisticObjectTypeCountList {
    objectCount: string;
    objectType: string;
}

export interface GetDataintegrationWorkspaceApplicationPatchParentRef {
    parent: string;
    rootDocId: string;
}

export interface GetDataintegrationWorkspaceApplicationPatchPatchObjectMetadata {
    action: string;
    identifier: string;
    key: string;
    name: string;
    namePath: string;
    objectVersion: number;
    type: string;
}

export interface GetDataintegrationWorkspaceApplicationPatchRegistryMetadata {
    aggregatorKey: string;
    isFavorite: boolean;
    key: string;
    labels: string[];
    registryVersion: number;
}

export interface GetDataintegrationWorkspaceApplicationPatchesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDataintegrationWorkspaceApplicationPatchesPatchSummaryCollection {
    items: outputs.GetDataintegrationWorkspaceApplicationPatchesPatchSummaryCollectionItem[];
}

export interface GetDataintegrationWorkspaceApplicationPatchesPatchSummaryCollectionItem {
    applicationKey: string;
    applicationVersion: number;
    dependentObjectMetadatas: outputs.GetDataintegrationWorkspaceApplicationPatchesPatchSummaryCollectionItemDependentObjectMetadata[];
    description: string;
    errorMessages: {[key: string]: string};
    identifier: string;
    key: string;
    keyMap: {[key: string]: string};
    metadatas: outputs.GetDataintegrationWorkspaceApplicationPatchesPatchSummaryCollectionItemMetadata[];
    modelType: string;
    modelVersion: string;
    name: string;
    objectKeys: string[];
    objectStatus: number;
    objectVersion: number;
    parentReves: outputs.GetDataintegrationWorkspaceApplicationPatchesPatchSummaryCollectionItemParentRef[];
    patchObjectMetadatas: outputs.GetDataintegrationWorkspaceApplicationPatchesPatchSummaryCollectionItemPatchObjectMetadata[];
    patchStatus: string;
    patchType: string;
    registryMetadatas: outputs.GetDataintegrationWorkspaceApplicationPatchesPatchSummaryCollectionItemRegistryMetadata[];
    timePatched: string;
    workspaceId: string;
}

export interface GetDataintegrationWorkspaceApplicationPatchesPatchSummaryCollectionItemDependentObjectMetadata {
    action: string;
    identifier: string;
    key: string;
    name: string;
    namePath: string;
    objectVersion: number;
    type: string;
}

export interface GetDataintegrationWorkspaceApplicationPatchesPatchSummaryCollectionItemMetadata {
    aggregatorKey: string;
    aggregators: outputs.GetDataintegrationWorkspaceApplicationPatchesPatchSummaryCollectionItemMetadataAggregator[];
    countStatistics: outputs.GetDataintegrationWorkspaceApplicationPatchesPatchSummaryCollectionItemMetadataCountStatistic[];
    createdBy: string;
    createdByName: string;
    identifierPath: string;
    infoFields: {[key: string]: string};
    isFavorite: boolean;
    labels: string[];
    registryVersion: number;
    timeCreated: string;
    timeUpdated: string;
    updatedBy: string;
    updatedByName: string;
}

export interface GetDataintegrationWorkspaceApplicationPatchesPatchSummaryCollectionItemMetadataAggregator {
    description: string;
    identifier: string;
    key: string;
    name: string;
    type: string;
}

export interface GetDataintegrationWorkspaceApplicationPatchesPatchSummaryCollectionItemMetadataCountStatistic {
    objectTypeCountLists: outputs.GetDataintegrationWorkspaceApplicationPatchesPatchSummaryCollectionItemMetadataCountStatisticObjectTypeCountList[];
}

export interface GetDataintegrationWorkspaceApplicationPatchesPatchSummaryCollectionItemMetadataCountStatisticObjectTypeCountList {
    objectCount: string;
    objectType: string;
}

export interface GetDataintegrationWorkspaceApplicationPatchesPatchSummaryCollectionItemParentRef {
    parent: string;
    rootDocId: string;
}

export interface GetDataintegrationWorkspaceApplicationPatchesPatchSummaryCollectionItemPatchObjectMetadata {
    action: string;
    identifier: string;
    key: string;
    name: string;
    namePath: string;
    objectVersion: number;
    type: string;
}

export interface GetDataintegrationWorkspaceApplicationPatchesPatchSummaryCollectionItemRegistryMetadata {
    aggregatorKey: string;
    isFavorite: boolean;
    key: string;
    labels: string[];
    registryVersion: number;
}

export interface GetDataintegrationWorkspaceApplicationPublishedObjectMetadata {
    action: string;
    identifier: string;
    key: string;
    name: string;
    namePath: string;
    objectVersion: number;
    type: string;
}

export interface GetDataintegrationWorkspaceApplicationRegistryMetadata {
    aggregatorKey: string;
    isFavorite: boolean;
    key: string;
    labels: string[];
    registryVersion: number;
}

export interface GetDataintegrationWorkspaceApplicationScheduleFrequencyDetail {
    customExpression: string;
    dayOfWeek: string;
    days: number[];
    frequency: string;
    interval: number;
    modelType: string;
    times: outputs.GetDataintegrationWorkspaceApplicationScheduleFrequencyDetailTime[];
    weekOfMonth: string;
}

export interface GetDataintegrationWorkspaceApplicationScheduleFrequencyDetailTime {
    hour: number;
    minute: number;
    second: number;
}

export interface GetDataintegrationWorkspaceApplicationScheduleMetadata {
    aggregatorKey: string;
    aggregators: outputs.GetDataintegrationWorkspaceApplicationScheduleMetadataAggregator[];
    countStatistics: outputs.GetDataintegrationWorkspaceApplicationScheduleMetadataCountStatistic[];
    createdBy: string;
    createdByName: string;
    identifierPath: string;
    infoFields: {[key: string]: string};
    isFavorite: boolean;
    labels: string[];
    registryVersion: number;
    timeCreated: string;
    timeUpdated: string;
    updatedBy: string;
    updatedByName: string;
}

export interface GetDataintegrationWorkspaceApplicationScheduleMetadataAggregator {
    description: string;
    identifier: string;
    key: string;
    name: string;
    type: string;
}

export interface GetDataintegrationWorkspaceApplicationScheduleMetadataCountStatistic {
    objectTypeCountLists: outputs.GetDataintegrationWorkspaceApplicationScheduleMetadataCountStatisticObjectTypeCountList[];
}

export interface GetDataintegrationWorkspaceApplicationScheduleMetadataCountStatisticObjectTypeCountList {
    objectCount: string;
    objectType: string;
}

export interface GetDataintegrationWorkspaceApplicationScheduleParentRef {
    parent: string;
    rootDocId: string;
}

export interface GetDataintegrationWorkspaceApplicationScheduleRegistryMetadata {
    aggregatorKey: string;
    isFavorite: boolean;
    key: string;
    labels: string[];
    registryVersion: number;
}

export interface GetDataintegrationWorkspaceApplicationSchedulesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDataintegrationWorkspaceApplicationSchedulesScheduleSummaryCollection {
    items: outputs.GetDataintegrationWorkspaceApplicationSchedulesScheduleSummaryCollectionItem[];
}

export interface GetDataintegrationWorkspaceApplicationSchedulesScheduleSummaryCollectionItem {
    applicationKey: string;
    description: string;
    frequencyDetails: outputs.GetDataintegrationWorkspaceApplicationSchedulesScheduleSummaryCollectionItemFrequencyDetail[];
    identifier: string;
    isDaylightAdjustmentEnabled: boolean;
    key: string;
    metadatas: outputs.GetDataintegrationWorkspaceApplicationSchedulesScheduleSummaryCollectionItemMetadata[];
    modelType: string;
    modelVersion: string;
    name: string;
    objectStatus: number;
    objectVersion: number;
    parentReves: outputs.GetDataintegrationWorkspaceApplicationSchedulesScheduleSummaryCollectionItemParentRef[];
    registryMetadatas: outputs.GetDataintegrationWorkspaceApplicationSchedulesScheduleSummaryCollectionItemRegistryMetadata[];
    timezone: string;
    workspaceId: string;
}

export interface GetDataintegrationWorkspaceApplicationSchedulesScheduleSummaryCollectionItemFrequencyDetail {
    customExpression: string;
    dayOfWeek: string;
    days: number[];
    frequency: string;
    interval: number;
    modelType: string;
    times: outputs.GetDataintegrationWorkspaceApplicationSchedulesScheduleSummaryCollectionItemFrequencyDetailTime[];
    weekOfMonth: string;
}

export interface GetDataintegrationWorkspaceApplicationSchedulesScheduleSummaryCollectionItemFrequencyDetailTime {
    hour: number;
    minute: number;
    second: number;
}

export interface GetDataintegrationWorkspaceApplicationSchedulesScheduleSummaryCollectionItemMetadata {
    aggregatorKey: string;
    aggregators: outputs.GetDataintegrationWorkspaceApplicationSchedulesScheduleSummaryCollectionItemMetadataAggregator[];
    countStatistics: outputs.GetDataintegrationWorkspaceApplicationSchedulesScheduleSummaryCollectionItemMetadataCountStatistic[];
    createdBy: string;
    createdByName: string;
    identifierPath: string;
    infoFields: {[key: string]: string};
    isFavorite: boolean;
    labels: string[];
    registryVersion: number;
    timeCreated: string;
    timeUpdated: string;
    updatedBy: string;
    updatedByName: string;
}

export interface GetDataintegrationWorkspaceApplicationSchedulesScheduleSummaryCollectionItemMetadataAggregator {
    description: string;
    identifier: string;
    key: string;
    name: string;
    type: string;
}

export interface GetDataintegrationWorkspaceApplicationSchedulesScheduleSummaryCollectionItemMetadataCountStatistic {
    objectTypeCountLists: outputs.GetDataintegrationWorkspaceApplicationSchedulesScheduleSummaryCollectionItemMetadataCountStatisticObjectTypeCountList[];
}

export interface GetDataintegrationWorkspaceApplicationSchedulesScheduleSummaryCollectionItemMetadataCountStatisticObjectTypeCountList {
    objectCount: string;
    objectType: string;
}

export interface GetDataintegrationWorkspaceApplicationSchedulesScheduleSummaryCollectionItemParentRef {
    parent: string;
    rootDocId: string;
}

export interface GetDataintegrationWorkspaceApplicationSchedulesScheduleSummaryCollectionItemRegistryMetadata {
    aggregatorKey: string;
    isFavorite: boolean;
    key: string;
    labels: string[];
    registryVersion: number;
}

export interface GetDataintegrationWorkspaceApplicationSourceApplicationInfo {
    applicationKey: string;
    applicationVersion: string;
    copyType: string;
    lastPatchKey: string;
    workspaceId: string;
}

export interface GetDataintegrationWorkspaceApplicationTaskScheduleLastRunDetail {
    description: string;
    identifier: string;
    key: string;
    lastRunTimeMillis: string;
    modelType: string;
    modelVersion: string;
    name: string;
    objectStatus: number;
    objectVersion: number;
    parentReves: outputs.GetDataintegrationWorkspaceApplicationTaskScheduleLastRunDetailParentRef[];
}

export interface GetDataintegrationWorkspaceApplicationTaskScheduleLastRunDetailParentRef {
    parent: string;
    rootDocId: string;
}

export interface GetDataintegrationWorkspaceApplicationTaskScheduleMetadata {
    aggregatorKey: string;
    aggregators: outputs.GetDataintegrationWorkspaceApplicationTaskScheduleMetadataAggregator[];
    countStatistics: outputs.GetDataintegrationWorkspaceApplicationTaskScheduleMetadataCountStatistic[];
    createdBy: string;
    createdByName: string;
    identifierPath: string;
    infoFields: {[key: string]: string};
    isFavorite: boolean;
    labels: string[];
    registryVersion: number;
    timeCreated: string;
    timeUpdated: string;
    updatedBy: string;
    updatedByName: string;
}

export interface GetDataintegrationWorkspaceApplicationTaskScheduleMetadataAggregator {
    description: string;
    identifier: string;
    key: string;
    name: string;
    type: string;
}

export interface GetDataintegrationWorkspaceApplicationTaskScheduleMetadataCountStatistic {
    objectTypeCountLists: outputs.GetDataintegrationWorkspaceApplicationTaskScheduleMetadataCountStatisticObjectTypeCountList[];
}

export interface GetDataintegrationWorkspaceApplicationTaskScheduleMetadataCountStatisticObjectTypeCountList {
    objectCount: string;
    objectType: string;
}

export interface GetDataintegrationWorkspaceApplicationTaskScheduleParentRef {
    parent: string;
    rootDocId: string;
}

export interface GetDataintegrationWorkspaceApplicationTaskScheduleRegistryMetadata {
    aggregatorKey: string;
    isFavorite: boolean;
    key: string;
    labels: string[];
    registryVersion: number;
}

export interface GetDataintegrationWorkspaceApplicationTaskScheduleScheduleRef {
    description: string;
    frequencyDetails: outputs.GetDataintegrationWorkspaceApplicationTaskScheduleScheduleRefFrequencyDetail[];
    identifier: string;
    isDaylightAdjustmentEnabled: boolean;
    key: string;
    metadatas: outputs.GetDataintegrationWorkspaceApplicationTaskScheduleScheduleRefMetadata[];
    modelType: string;
    modelVersion: string;
    name: string;
    objectStatus: number;
    objectVersion: number;
    parentReves: outputs.GetDataintegrationWorkspaceApplicationTaskScheduleScheduleRefParentRef[];
    timezone: string;
}

export interface GetDataintegrationWorkspaceApplicationTaskScheduleScheduleRefFrequencyDetail {
    customExpression: string;
    dayOfWeek: string;
    days: number[];
    frequency: string;
    interval: number;
    modelType: string;
    times: outputs.GetDataintegrationWorkspaceApplicationTaskScheduleScheduleRefFrequencyDetailTime[];
    weekOfMonth: string;
}

export interface GetDataintegrationWorkspaceApplicationTaskScheduleScheduleRefFrequencyDetailTime {
    hour: number;
    minute: number;
    second: number;
}

export interface GetDataintegrationWorkspaceApplicationTaskScheduleScheduleRefMetadata {
    aggregatorKey: string;
    aggregators: outputs.GetDataintegrationWorkspaceApplicationTaskScheduleScheduleRefMetadataAggregator[];
    countStatistics: outputs.GetDataintegrationWorkspaceApplicationTaskScheduleScheduleRefMetadataCountStatistic[];
    createdBy: string;
    createdByName: string;
    identifierPath: string;
    infoFields: {[key: string]: string};
    isFavorite: boolean;
    labels: string[];
    registryVersion: number;
    timeCreated: string;
    timeUpdated: string;
    updatedBy: string;
    updatedByName: string;
}

export interface GetDataintegrationWorkspaceApplicationTaskScheduleScheduleRefMetadataAggregator {
    description: string;
    identifier: string;
    key: string;
    name: string;
    type: string;
}

export interface GetDataintegrationWorkspaceApplicationTaskScheduleScheduleRefMetadataCountStatistic {
    objectTypeCountLists: outputs.GetDataintegrationWorkspaceApplicationTaskScheduleScheduleRefMetadataCountStatisticObjectTypeCountList[];
}

export interface GetDataintegrationWorkspaceApplicationTaskScheduleScheduleRefMetadataCountStatisticObjectTypeCountList {
    objectCount: string;
    objectType: string;
}

export interface GetDataintegrationWorkspaceApplicationTaskScheduleScheduleRefParentRef {
    parent: string;
    rootDocId: string;
}

export interface GetDataintegrationWorkspaceApplicationTaskSchedulesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDataintegrationWorkspaceApplicationTaskSchedulesTaskScheduleSummaryCollection {
    items: outputs.GetDataintegrationWorkspaceApplicationTaskSchedulesTaskScheduleSummaryCollectionItem[];
}

export interface GetDataintegrationWorkspaceApplicationTaskSchedulesTaskScheduleSummaryCollectionItem {
    applicationKey: string;
    authMode: string;
    configProviderDelegate: string;
    description: string;
    endTimeMillis: string;
    expectedDuration: number;
    expectedDurationUnit: string;
    identifier: string;
    isBackfillEnabled: boolean;
    isConcurrentAllowed: boolean;
    isEnabled: boolean;
    key: string;
    lastRunDetails: outputs.GetDataintegrationWorkspaceApplicationTaskSchedulesTaskScheduleSummaryCollectionItemLastRunDetail[];
    metadatas: outputs.GetDataintegrationWorkspaceApplicationTaskSchedulesTaskScheduleSummaryCollectionItemMetadata[];
    modelType: string;
    modelVersion: string;
    name: string;
    nextRunTimeMillis: string;
    numberOfRetries: number;
    objectStatus: number;
    objectVersion: number;
    parentReves: outputs.GetDataintegrationWorkspaceApplicationTaskSchedulesTaskScheduleSummaryCollectionItemParentRef[];
    registryMetadatas: outputs.GetDataintegrationWorkspaceApplicationTaskSchedulesTaskScheduleSummaryCollectionItemRegistryMetadata[];
    retryAttempts: number;
    retryDelay: number;
    retryDelayUnit: string;
    scheduleReves: outputs.GetDataintegrationWorkspaceApplicationTaskSchedulesTaskScheduleSummaryCollectionItemScheduleRef[];
    startTimeMillis: string;
    workspaceId: string;
}

export interface GetDataintegrationWorkspaceApplicationTaskSchedulesTaskScheduleSummaryCollectionItemLastRunDetail {
    description: string;
    identifier: string;
    key: string;
    lastRunTimeMillis: string;
    modelType: string;
    modelVersion: string;
    name: string;
    objectStatus: number;
    objectVersion: number;
    parentReves: outputs.GetDataintegrationWorkspaceApplicationTaskSchedulesTaskScheduleSummaryCollectionItemLastRunDetailParentRef[];
}

export interface GetDataintegrationWorkspaceApplicationTaskSchedulesTaskScheduleSummaryCollectionItemLastRunDetailParentRef {
    parent: string;
    rootDocId: string;
}

export interface GetDataintegrationWorkspaceApplicationTaskSchedulesTaskScheduleSummaryCollectionItemMetadata {
    aggregatorKey: string;
    aggregators: outputs.GetDataintegrationWorkspaceApplicationTaskSchedulesTaskScheduleSummaryCollectionItemMetadataAggregator[];
    countStatistics: outputs.GetDataintegrationWorkspaceApplicationTaskSchedulesTaskScheduleSummaryCollectionItemMetadataCountStatistic[];
    createdBy: string;
    createdByName: string;
    identifierPath: string;
    infoFields: {[key: string]: string};
    isFavorite: boolean;
    labels: string[];
    registryVersion: number;
    timeCreated: string;
    timeUpdated: string;
    updatedBy: string;
    updatedByName: string;
}

export interface GetDataintegrationWorkspaceApplicationTaskSchedulesTaskScheduleSummaryCollectionItemMetadataAggregator {
    description: string;
    identifier: string;
    key: string;
    name: string;
    type: string;
}

export interface GetDataintegrationWorkspaceApplicationTaskSchedulesTaskScheduleSummaryCollectionItemMetadataCountStatistic {
    objectTypeCountLists: outputs.GetDataintegrationWorkspaceApplicationTaskSchedulesTaskScheduleSummaryCollectionItemMetadataCountStatisticObjectTypeCountList[];
}

export interface GetDataintegrationWorkspaceApplicationTaskSchedulesTaskScheduleSummaryCollectionItemMetadataCountStatisticObjectTypeCountList {
    objectCount: string;
    objectType: string;
}

export interface GetDataintegrationWorkspaceApplicationTaskSchedulesTaskScheduleSummaryCollectionItemParentRef {
    parent: string;
    rootDocId: string;
}

export interface GetDataintegrationWorkspaceApplicationTaskSchedulesTaskScheduleSummaryCollectionItemRegistryMetadata {
    aggregatorKey: string;
    isFavorite: boolean;
    key: string;
    labels: string[];
    registryVersion: number;
}

export interface GetDataintegrationWorkspaceApplicationTaskSchedulesTaskScheduleSummaryCollectionItemScheduleRef {
    description: string;
    frequencyDetails: outputs.GetDataintegrationWorkspaceApplicationTaskSchedulesTaskScheduleSummaryCollectionItemScheduleRefFrequencyDetail[];
    identifier: string;
    isDaylightAdjustmentEnabled: boolean;
    key: string;
    metadatas: outputs.GetDataintegrationWorkspaceApplicationTaskSchedulesTaskScheduleSummaryCollectionItemScheduleRefMetadata[];
    modelType: string;
    modelVersion: string;
    name: string;
    objectStatus: number;
    objectVersion: number;
    parentReves: outputs.GetDataintegrationWorkspaceApplicationTaskSchedulesTaskScheduleSummaryCollectionItemScheduleRefParentRef[];
    timezone: string;
}

export interface GetDataintegrationWorkspaceApplicationTaskSchedulesTaskScheduleSummaryCollectionItemScheduleRefFrequencyDetail {
    customExpression: string;
    dayOfWeek: string;
    days: number[];
    frequency: string;
    interval: number;
    modelType: string;
    times: outputs.GetDataintegrationWorkspaceApplicationTaskSchedulesTaskScheduleSummaryCollectionItemScheduleRefFrequencyDetailTime[];
    weekOfMonth: string;
}

export interface GetDataintegrationWorkspaceApplicationTaskSchedulesTaskScheduleSummaryCollectionItemScheduleRefFrequencyDetailTime {
    hour: number;
    minute: number;
    second: number;
}

export interface GetDataintegrationWorkspaceApplicationTaskSchedulesTaskScheduleSummaryCollectionItemScheduleRefMetadata {
    aggregatorKey: string;
    aggregators: outputs.GetDataintegrationWorkspaceApplicationTaskSchedulesTaskScheduleSummaryCollectionItemScheduleRefMetadataAggregator[];
    countStatistics: outputs.GetDataintegrationWorkspaceApplicationTaskSchedulesTaskScheduleSummaryCollectionItemScheduleRefMetadataCountStatistic[];
    createdBy: string;
    createdByName: string;
    identifierPath: string;
    infoFields: {[key: string]: string};
    isFavorite: boolean;
    labels: string[];
    registryVersion: number;
    timeCreated: string;
    timeUpdated: string;
    updatedBy: string;
    updatedByName: string;
}

export interface GetDataintegrationWorkspaceApplicationTaskSchedulesTaskScheduleSummaryCollectionItemScheduleRefMetadataAggregator {
    description: string;
    identifier: string;
    key: string;
    name: string;
    type: string;
}

export interface GetDataintegrationWorkspaceApplicationTaskSchedulesTaskScheduleSummaryCollectionItemScheduleRefMetadataCountStatistic {
    objectTypeCountLists: outputs.GetDataintegrationWorkspaceApplicationTaskSchedulesTaskScheduleSummaryCollectionItemScheduleRefMetadataCountStatisticObjectTypeCountList[];
}

export interface GetDataintegrationWorkspaceApplicationTaskSchedulesTaskScheduleSummaryCollectionItemScheduleRefMetadataCountStatisticObjectTypeCountList {
    objectCount: string;
    objectType: string;
}

export interface GetDataintegrationWorkspaceApplicationTaskSchedulesTaskScheduleSummaryCollectionItemScheduleRefParentRef {
    parent: string;
    rootDocId: string;
}

export interface GetDataintegrationWorkspaceApplicationsApplicationSummaryCollection {
    items: outputs.GetDataintegrationWorkspaceApplicationsApplicationSummaryCollectionItem[];
}

export interface GetDataintegrationWorkspaceApplicationsApplicationSummaryCollectionItem {
    applicationVersion: number;
    compartmentId: string;
    definedTags: {[key: string]: string};
    dependentObjectMetadatas: outputs.GetDataintegrationWorkspaceApplicationsApplicationSummaryCollectionItemDependentObjectMetadata[];
    description: string;
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    identifier: string;
    key: string;
    keyMap: {[key: string]: string};
    metadatas: outputs.GetDataintegrationWorkspaceApplicationsApplicationSummaryCollectionItemMetadata[];
    modelType: string;
    modelVersion: string;
    name: string;
    objectStatus: number;
    objectVersion: number;
    parentReves: outputs.GetDataintegrationWorkspaceApplicationsApplicationSummaryCollectionItemParentRef[];
    publishedObjectMetadatas: outputs.GetDataintegrationWorkspaceApplicationsApplicationSummaryCollectionItemPublishedObjectMetadata[];
    registryMetadatas: outputs.GetDataintegrationWorkspaceApplicationsApplicationSummaryCollectionItemRegistryMetadata[];
    sourceApplicationInfos: outputs.GetDataintegrationWorkspaceApplicationsApplicationSummaryCollectionItemSourceApplicationInfo[];
    state: string;
    timeCreated: string;
    timePatched: string;
    timeUpdated: string;
    workspaceId: string;
}

export interface GetDataintegrationWorkspaceApplicationsApplicationSummaryCollectionItemDependentObjectMetadata {
    action: string;
    identifier: string;
    key: string;
    name: string;
    namePath: string;
    objectVersion: number;
    type: string;
}

export interface GetDataintegrationWorkspaceApplicationsApplicationSummaryCollectionItemMetadata {
    aggregatorKey: string;
    aggregators: outputs.GetDataintegrationWorkspaceApplicationsApplicationSummaryCollectionItemMetadataAggregator[];
    countStatistics: outputs.GetDataintegrationWorkspaceApplicationsApplicationSummaryCollectionItemMetadataCountStatistic[];
    createdBy: string;
    createdByName: string;
    identifierPath: string;
    infoFields: {[key: string]: string};
    isFavorite: boolean;
    labels: string[];
    registryVersion: number;
    timeCreated: string;
    timeUpdated: string;
    updatedBy: string;
    updatedByName: string;
}

export interface GetDataintegrationWorkspaceApplicationsApplicationSummaryCollectionItemMetadataAggregator {
    description: string;
    identifier: string;
    key: string;
    name: string;
    type: string;
}

export interface GetDataintegrationWorkspaceApplicationsApplicationSummaryCollectionItemMetadataCountStatistic {
    objectTypeCountLists: outputs.GetDataintegrationWorkspaceApplicationsApplicationSummaryCollectionItemMetadataCountStatisticObjectTypeCountList[];
}

export interface GetDataintegrationWorkspaceApplicationsApplicationSummaryCollectionItemMetadataCountStatisticObjectTypeCountList {
    objectCount: string;
    objectType: string;
}

export interface GetDataintegrationWorkspaceApplicationsApplicationSummaryCollectionItemParentRef {
    parent: string;
    rootDocId: string;
}

export interface GetDataintegrationWorkspaceApplicationsApplicationSummaryCollectionItemPublishedObjectMetadata {
    action: string;
    identifier: string;
    key: string;
    name: string;
    namePath: string;
    objectVersion: number;
    type: string;
}

export interface GetDataintegrationWorkspaceApplicationsApplicationSummaryCollectionItemRegistryMetadata {
    aggregatorKey: string;
    isFavorite: boolean;
    key: string;
    labels: string[];
    registryVersion: number;
}

export interface GetDataintegrationWorkspaceApplicationsApplicationSummaryCollectionItemSourceApplicationInfo {
    applicationKey: string;
    applicationVersion: string;
    copyType: string;
    lastPatchKey: string;
    workspaceId: string;
}

export interface GetDataintegrationWorkspaceApplicationsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDataintegrationWorkspaceExportRequestExportedItem {
    aggregatorKey: string;
    identifier: string;
    key: string;
    name: string;
    namePath: string;
    objectType: string;
    objectVersion: string;
    timeUpdatedInMillis: string;
}

export interface GetDataintegrationWorkspaceExportRequestsExportRequestSummaryCollection {
    items: outputs.GetDataintegrationWorkspaceExportRequestsExportRequestSummaryCollectionItem[];
}

export interface GetDataintegrationWorkspaceExportRequestsExportRequestSummaryCollectionItem {
    areReferencesIncluded: boolean;
    bucket: string;
    createdBy: string;
    errorMessages: {[key: string]: string};
    exportedItems: outputs.GetDataintegrationWorkspaceExportRequestsExportRequestSummaryCollectionItemExportedItem[];
    fileName: string;
    filters: string[];
    isObjectOverwriteEnabled: boolean;
    key: string;
    name: string;
    objectKeys: string[];
    objectStorageRegion: string;
    objectStorageTenancyId: string;
    referencedItems: string;
    status: string;
    timeEndedInMillis: string;
    timeStartedInMillis: string;
    totalExportedObjectCount: number;
    workspaceId: string;
}

export interface GetDataintegrationWorkspaceExportRequestsExportRequestSummaryCollectionItemExportedItem {
    aggregatorKey: string;
    identifier: string;
    key: string;
    name: string;
    namePath: string;
    objectType: string;
    objectVersion: string;
    timeUpdatedInMillis: string;
}

export interface GetDataintegrationWorkspaceExportRequestsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDataintegrationWorkspaceFolderMetadata {
    aggregatorKey: string;
    aggregators: outputs.GetDataintegrationWorkspaceFolderMetadataAggregator[];
    countStatistics: outputs.GetDataintegrationWorkspaceFolderMetadataCountStatistic[];
    createdBy: string;
    createdByName: string;
    identifierPath: string;
    infoFields: {[key: string]: string};
    isFavorite: boolean;
    labels: string[];
    registryVersion: number;
    timeCreated: string;
    timeUpdated: string;
    updatedBy: string;
    updatedByName: string;
}

export interface GetDataintegrationWorkspaceFolderMetadataAggregator {
    description: string;
    identifier: string;
    key: string;
    name: string;
    type: string;
}

export interface GetDataintegrationWorkspaceFolderMetadataCountStatistic {
    objectTypeCountLists: outputs.GetDataintegrationWorkspaceFolderMetadataCountStatisticObjectTypeCountList[];
}

export interface GetDataintegrationWorkspaceFolderMetadataCountStatisticObjectTypeCountList {
    objectCount: string;
    objectType: string;
}

export interface GetDataintegrationWorkspaceFolderParentRef {
    parent: string;
    rootDocId: string;
}

export interface GetDataintegrationWorkspaceFolderRegistryMetadata {
    aggregatorKey: string;
    isFavorite: boolean;
    key: string;
    labels: string[];
    registryVersion: number;
}

export interface GetDataintegrationWorkspaceFoldersFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDataintegrationWorkspaceFoldersFolderSummaryCollection {
    items: outputs.GetDataintegrationWorkspaceFoldersFolderSummaryCollectionItem[];
}

export interface GetDataintegrationWorkspaceFoldersFolderSummaryCollectionItem {
    categoryName: string;
    description: string;
    folderKey: string;
    identifier: string;
    key: string;
    keyMap: {[key: string]: string};
    metadatas: outputs.GetDataintegrationWorkspaceFoldersFolderSummaryCollectionItemMetadata[];
    modelType: string;
    modelVersion: string;
    name: string;
    objectStatus: number;
    objectVersion: number;
    parentReves: outputs.GetDataintegrationWorkspaceFoldersFolderSummaryCollectionItemParentRef[];
    registryMetadatas: outputs.GetDataintegrationWorkspaceFoldersFolderSummaryCollectionItemRegistryMetadata[];
    workspaceId: string;
}

export interface GetDataintegrationWorkspaceFoldersFolderSummaryCollectionItemMetadata {
    aggregatorKey: string;
    aggregators: outputs.GetDataintegrationWorkspaceFoldersFolderSummaryCollectionItemMetadataAggregator[];
    countStatistics: outputs.GetDataintegrationWorkspaceFoldersFolderSummaryCollectionItemMetadataCountStatistic[];
    createdBy: string;
    createdByName: string;
    identifierPath: string;
    infoFields: {[key: string]: string};
    isFavorite: boolean;
    labels: string[];
    registryVersion: number;
    timeCreated: string;
    timeUpdated: string;
    updatedBy: string;
    updatedByName: string;
}

export interface GetDataintegrationWorkspaceFoldersFolderSummaryCollectionItemMetadataAggregator {
    description: string;
    identifier: string;
    key: string;
    name: string;
    type: string;
}

export interface GetDataintegrationWorkspaceFoldersFolderSummaryCollectionItemMetadataCountStatistic {
    objectTypeCountLists: outputs.GetDataintegrationWorkspaceFoldersFolderSummaryCollectionItemMetadataCountStatisticObjectTypeCountList[];
}

export interface GetDataintegrationWorkspaceFoldersFolderSummaryCollectionItemMetadataCountStatisticObjectTypeCountList {
    objectCount: string;
    objectType: string;
}

export interface GetDataintegrationWorkspaceFoldersFolderSummaryCollectionItemParentRef {
    parent: string;
    rootDocId: string;
}

export interface GetDataintegrationWorkspaceFoldersFolderSummaryCollectionItemRegistryMetadata {
    aggregatorKey: string;
    isFavorite: boolean;
    key: string;
    labels: string[];
    registryVersion: number;
}

export interface GetDataintegrationWorkspaceImportRequestImportConflictResolution {
    duplicatePrefix: string;
    duplicateSuffix: string;
    importConflictResolutionType: string;
}

export interface GetDataintegrationWorkspaceImportRequestImportedObject {
    aggregatorKey: string;
    identifier: string;
    name: string;
    namePath: string;
    newKey: string;
    objectType: string;
    objectVersion: string;
    oldKey: string;
    resolutionAction: string;
    timeUpdatedInMillis: string;
}

export interface GetDataintegrationWorkspaceImportRequestsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDataintegrationWorkspaceImportRequestsImportRequestSummaryCollection {
    items: outputs.GetDataintegrationWorkspaceImportRequestsImportRequestSummaryCollectionItem[];
}

export interface GetDataintegrationWorkspaceImportRequestsImportRequestSummaryCollectionItem {
    areDataAssetReferencesIncluded: boolean;
    bucket: string;
    createdBy: string;
    errorMessages: {[key: string]: string};
    fileName: string;
    importConflictResolutions: outputs.GetDataintegrationWorkspaceImportRequestsImportRequestSummaryCollectionItemImportConflictResolution[];
    importedObjects: outputs.GetDataintegrationWorkspaceImportRequestsImportRequestSummaryCollectionItemImportedObject[];
    key: string;
    name: string;
    objectKeyForImport: string;
    objectStorageRegion: string;
    objectStorageTenancyId: string;
    status: string;
    timeEndedInMillis: string;
    timeStartedInMillis: string;
    totalImportedObjectCount: number;
    workspaceId: string;
}

export interface GetDataintegrationWorkspaceImportRequestsImportRequestSummaryCollectionItemImportConflictResolution {
    duplicatePrefix: string;
    duplicateSuffix: string;
    importConflictResolutionType: string;
}

export interface GetDataintegrationWorkspaceImportRequestsImportRequestSummaryCollectionItemImportedObject {
    aggregatorKey: string;
    identifier: string;
    name: string;
    namePath: string;
    newKey: string;
    objectType: string;
    objectVersion: string;
    oldKey: string;
    resolutionAction: string;
    timeUpdatedInMillis: string;
}

export interface GetDataintegrationWorkspaceProjectMetadata {
    aggregatorKey: string;
    aggregators: outputs.GetDataintegrationWorkspaceProjectMetadataAggregator[];
    countStatistics: outputs.GetDataintegrationWorkspaceProjectMetadataCountStatistic[];
    createdBy: string;
    createdByName: string;
    identifierPath: string;
    infoFields: {[key: string]: string};
    isFavorite: boolean;
    labels: string[];
    registryVersion: number;
    timeCreated: string;
    timeUpdated: string;
    updatedBy: string;
    updatedByName: string;
}

export interface GetDataintegrationWorkspaceProjectMetadataAggregator {
    description: string;
    identifier: string;
    key: string;
    name: string;
    type: string;
}

export interface GetDataintegrationWorkspaceProjectMetadataCountStatistic {
    objectTypeCountLists: outputs.GetDataintegrationWorkspaceProjectMetadataCountStatisticObjectTypeCountList[];
}

export interface GetDataintegrationWorkspaceProjectMetadataCountStatisticObjectTypeCountList {
    objectCount: string;
    objectType: string;
}

export interface GetDataintegrationWorkspaceProjectParentRef {
    parent: string;
    rootDocId: string;
}

export interface GetDataintegrationWorkspaceProjectRegistryMetadata {
    aggregatorKey: string;
    isFavorite: boolean;
    key: string;
    labels: string[];
    registryVersion: number;
}

export interface GetDataintegrationWorkspaceProjectsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDataintegrationWorkspaceProjectsProjectSummaryCollection {
    items: outputs.GetDataintegrationWorkspaceProjectsProjectSummaryCollectionItem[];
}

export interface GetDataintegrationWorkspaceProjectsProjectSummaryCollectionItem {
    description: string;
    identifier: string;
    key: string;
    keyMap: {[key: string]: string};
    metadatas: outputs.GetDataintegrationWorkspaceProjectsProjectSummaryCollectionItemMetadata[];
    modelType: string;
    modelVersion: string;
    name: string;
    objectStatus: number;
    objectVersion: number;
    parentReves: outputs.GetDataintegrationWorkspaceProjectsProjectSummaryCollectionItemParentRef[];
    projectKey: string;
    registryMetadatas: outputs.GetDataintegrationWorkspaceProjectsProjectSummaryCollectionItemRegistryMetadata[];
    workspaceId: string;
}

export interface GetDataintegrationWorkspaceProjectsProjectSummaryCollectionItemMetadata {
    aggregatorKey: string;
    aggregators: outputs.GetDataintegrationWorkspaceProjectsProjectSummaryCollectionItemMetadataAggregator[];
    countStatistics: outputs.GetDataintegrationWorkspaceProjectsProjectSummaryCollectionItemMetadataCountStatistic[];
    createdBy: string;
    createdByName: string;
    identifierPath: string;
    infoFields: {[key: string]: string};
    isFavorite: boolean;
    labels: string[];
    registryVersion: number;
    timeCreated: string;
    timeUpdated: string;
    updatedBy: string;
    updatedByName: string;
}

export interface GetDataintegrationWorkspaceProjectsProjectSummaryCollectionItemMetadataAggregator {
    description: string;
    identifier: string;
    key: string;
    name: string;
    type: string;
}

export interface GetDataintegrationWorkspaceProjectsProjectSummaryCollectionItemMetadataCountStatistic {
    objectTypeCountLists: outputs.GetDataintegrationWorkspaceProjectsProjectSummaryCollectionItemMetadataCountStatisticObjectTypeCountList[];
}

export interface GetDataintegrationWorkspaceProjectsProjectSummaryCollectionItemMetadataCountStatisticObjectTypeCountList {
    objectCount: string;
    objectType: string;
}

export interface GetDataintegrationWorkspaceProjectsProjectSummaryCollectionItemParentRef {
    parent: string;
    rootDocId: string;
}

export interface GetDataintegrationWorkspaceProjectsProjectSummaryCollectionItemRegistryMetadata {
    aggregatorKey: string;
    isFavorite: boolean;
    key: string;
    labels: string[];
    registryVersion: number;
}

export interface GetDataintegrationWorkspaceTaskAuthConfig {
    key: string;
    modelType: string;
    modelVersion: string;
    parentReves: outputs.GetDataintegrationWorkspaceTaskAuthConfigParentRef[];
    resourcePrincipalSource: string;
}

export interface GetDataintegrationWorkspaceTaskAuthConfigParentRef {
    parent: string;
    rootDocId: string;
}

export interface GetDataintegrationWorkspaceTaskCancelRestCallConfig {
    configValues: outputs.GetDataintegrationWorkspaceTaskCancelRestCallConfigConfigValue[];
    key: string;
    methodType: string;
    modelType: string;
    requestHeaders: {[key: string]: string};
}

export interface GetDataintegrationWorkspaceTaskCancelRestCallConfigConfigValue {
    configParamValues: outputs.GetDataintegrationWorkspaceTaskCancelRestCallConfigConfigValueConfigParamValue[];
    parentReves: outputs.GetDataintegrationWorkspaceTaskCancelRestCallConfigConfigValueParentRef[];
}

export interface GetDataintegrationWorkspaceTaskCancelRestCallConfigConfigValueConfigParamValue {
    requestPayloads: outputs.GetDataintegrationWorkspaceTaskCancelRestCallConfigConfigValueConfigParamValueRequestPayload[];
    requestUrls: outputs.GetDataintegrationWorkspaceTaskCancelRestCallConfigConfigValueConfigParamValueRequestUrl[];
}

export interface GetDataintegrationWorkspaceTaskCancelRestCallConfigConfigValueConfigParamValueRequestPayload {
    parameterValue: string;
    refValues: outputs.GetDataintegrationWorkspaceTaskCancelRestCallConfigConfigValueConfigParamValueRequestPayloadRefValue[];
}

export interface GetDataintegrationWorkspaceTaskCancelRestCallConfigConfigValueConfigParamValueRequestPayloadRefValue {
    configValues: outputs.GetDataintegrationWorkspaceTaskCancelRestCallConfigConfigValueConfigParamValueRequestPayloadRefValueConfigValue[];
    key: string;
    modelType: string;
}

export interface GetDataintegrationWorkspaceTaskCancelRestCallConfigConfigValueConfigParamValueRequestPayloadRefValueConfigValue {
    configParamValues: outputs.GetDataintegrationWorkspaceTaskCancelRestCallConfigConfigValueConfigParamValueRequestPayloadRefValueConfigValueConfigParamValue[];
}

export interface GetDataintegrationWorkspaceTaskCancelRestCallConfigConfigValueConfigParamValueRequestPayloadRefValueConfigValueConfigParamValue {
    dataParams: outputs.GetDataintegrationWorkspaceTaskCancelRestCallConfigConfigValueConfigParamValueRequestPayloadRefValueConfigValueConfigParamValueDataParam[];
}

export interface GetDataintegrationWorkspaceTaskCancelRestCallConfigConfigValueConfigParamValueRequestPayloadRefValueConfigValueConfigParamValueDataParam {
    stringValue: string;
}

export interface GetDataintegrationWorkspaceTaskCancelRestCallConfigConfigValueConfigParamValueRequestUrl {
    stringValue: string;
}

export interface GetDataintegrationWorkspaceTaskCancelRestCallConfigConfigValueParentRef {
    parent: string;
    rootDocId: string;
}

export interface GetDataintegrationWorkspaceTaskConfigProviderDelegate {
    bindings: outputs.GetDataintegrationWorkspaceTaskConfigProviderDelegateBinding[];
}

export interface GetDataintegrationWorkspaceTaskConfigProviderDelegateBinding {
    key: string;
    parameterValues: outputs.GetDataintegrationWorkspaceTaskConfigProviderDelegateBindingParameterValue[];
}

export interface GetDataintegrationWorkspaceTaskConfigProviderDelegateBindingParameterValue {
    rootObjectValues: outputs.GetDataintegrationWorkspaceTaskConfigProviderDelegateBindingParameterValueRootObjectValue[];
    simpleValue: string;
}

export interface GetDataintegrationWorkspaceTaskConfigProviderDelegateBindingParameterValueRootObjectValue {
    key: string;
    modelType: string;
    modelVersion: string;
    objectStatus: number;
}

export interface GetDataintegrationWorkspaceTaskExecuteRestCallConfig {
    configValues: outputs.GetDataintegrationWorkspaceTaskExecuteRestCallConfigConfigValue[];
    key: string;
    methodType: string;
    modelType: string;
    requestHeaders: {[key: string]: string};
}

export interface GetDataintegrationWorkspaceTaskExecuteRestCallConfigConfigValue {
    configParamValues: outputs.GetDataintegrationWorkspaceTaskExecuteRestCallConfigConfigValueConfigParamValue[];
    parentReves: outputs.GetDataintegrationWorkspaceTaskExecuteRestCallConfigConfigValueParentRef[];
}

export interface GetDataintegrationWorkspaceTaskExecuteRestCallConfigConfigValueConfigParamValue {
    requestPayloads: outputs.GetDataintegrationWorkspaceTaskExecuteRestCallConfigConfigValueConfigParamValueRequestPayload[];
    requestUrls: outputs.GetDataintegrationWorkspaceTaskExecuteRestCallConfigConfigValueConfigParamValueRequestUrl[];
}

export interface GetDataintegrationWorkspaceTaskExecuteRestCallConfigConfigValueConfigParamValueRequestPayload {
    parameterValue: string;
    refValues: outputs.GetDataintegrationWorkspaceTaskExecuteRestCallConfigConfigValueConfigParamValueRequestPayloadRefValue[];
}

export interface GetDataintegrationWorkspaceTaskExecuteRestCallConfigConfigValueConfigParamValueRequestPayloadRefValue {
    configValues: outputs.GetDataintegrationWorkspaceTaskExecuteRestCallConfigConfigValueConfigParamValueRequestPayloadRefValueConfigValue[];
    key: string;
    modelType: string;
}

export interface GetDataintegrationWorkspaceTaskExecuteRestCallConfigConfigValueConfigParamValueRequestPayloadRefValueConfigValue {
    configParamValues: outputs.GetDataintegrationWorkspaceTaskExecuteRestCallConfigConfigValueConfigParamValueRequestPayloadRefValueConfigValueConfigParamValue[];
}

export interface GetDataintegrationWorkspaceTaskExecuteRestCallConfigConfigValueConfigParamValueRequestPayloadRefValueConfigValueConfigParamValue {
    dataParams: outputs.GetDataintegrationWorkspaceTaskExecuteRestCallConfigConfigValueConfigParamValueRequestPayloadRefValueConfigValueConfigParamValueDataParam[];
}

export interface GetDataintegrationWorkspaceTaskExecuteRestCallConfigConfigValueConfigParamValueRequestPayloadRefValueConfigValueConfigParamValueDataParam {
    stringValue: string;
}

export interface GetDataintegrationWorkspaceTaskExecuteRestCallConfigConfigValueConfigParamValueRequestUrl {
    stringValue: string;
}

export interface GetDataintegrationWorkspaceTaskExecuteRestCallConfigConfigValueParentRef {
    parent: string;
    rootDocId: string;
}

export interface GetDataintegrationWorkspaceTaskInputPort {
    configValues: outputs.GetDataintegrationWorkspaceTaskInputPortConfigValue[];
    description: string;
    fields: string[];
    key: string;
    modelType: string;
    modelVersion: string;
    name: string;
    objectStatus: number;
    parentReves: outputs.GetDataintegrationWorkspaceTaskInputPortParentRef[];
    portType: string;
}

export interface GetDataintegrationWorkspaceTaskInputPortConfigValue {
    configParamValues: outputs.GetDataintegrationWorkspaceTaskInputPortConfigValueConfigParamValue[];
    parentReves: outputs.GetDataintegrationWorkspaceTaskInputPortConfigValueParentRef[];
}

export interface GetDataintegrationWorkspaceTaskInputPortConfigValueConfigParamValue {
    intValue: number;
    objectValue: string;
    parameterValue: string;
    refValue: string;
    rootObjectValue: string;
    stringValue: string;
}

export interface GetDataintegrationWorkspaceTaskInputPortConfigValueParentRef {
    parent: string;
    rootDocId: string;
}

export interface GetDataintegrationWorkspaceTaskInputPortParentRef {
    parent: string;
    rootDocId: string;
}

export interface GetDataintegrationWorkspaceTaskMetadata {
    aggregatorKey: string;
    aggregators: outputs.GetDataintegrationWorkspaceTaskMetadataAggregator[];
    countStatistics: outputs.GetDataintegrationWorkspaceTaskMetadataCountStatistic[];
    createdBy: string;
    createdByName: string;
    identifierPath: string;
    infoFields: {[key: string]: string};
    isFavorite: boolean;
    labels: string[];
    registryVersion: number;
    timeCreated: string;
    timeUpdated: string;
    updatedBy: string;
    updatedByName: string;
}

export interface GetDataintegrationWorkspaceTaskMetadataAggregator {
    description: string;
    identifier: string;
    key: string;
    name: string;
    type: string;
}

export interface GetDataintegrationWorkspaceTaskMetadataCountStatistic {
    objectTypeCountLists: outputs.GetDataintegrationWorkspaceTaskMetadataCountStatisticObjectTypeCountList[];
}

export interface GetDataintegrationWorkspaceTaskMetadataCountStatisticObjectTypeCountList {
    objectCount: string;
    objectType: string;
}

export interface GetDataintegrationWorkspaceTaskOpConfigValue {
    configParamValues: outputs.GetDataintegrationWorkspaceTaskOpConfigValueConfigParamValue[];
    parentReves: outputs.GetDataintegrationWorkspaceTaskOpConfigValueParentRef[];
}

export interface GetDataintegrationWorkspaceTaskOpConfigValueConfigParamValue {
    configParamValues: outputs.GetDataintegrationWorkspaceTaskOpConfigValueConfigParamValueConfigParamValue[];
    key: string;
}

export interface GetDataintegrationWorkspaceTaskOpConfigValueConfigParamValueConfigParamValue {
    intValue: number;
    objectValue: string;
    parameterValue: string;
    refValues: outputs.GetDataintegrationWorkspaceTaskOpConfigValueConfigParamValueConfigParamValueRefValue[];
    rootObjectValues: outputs.GetDataintegrationWorkspaceTaskOpConfigValueConfigParamValueConfigParamValueRootObjectValue[];
    stringValue: string;
}

export interface GetDataintegrationWorkspaceTaskOpConfigValueConfigParamValueConfigParamValueRefValue {
    key: string;
    modelType: string;
    modelVersion: string;
    name: string;
    objectStatus: number;
}

export interface GetDataintegrationWorkspaceTaskOpConfigValueConfigParamValueConfigParamValueRootObjectValue {
    key: string;
    modelType: string;
    modelVersion: string;
    objectStatus: number;
}

export interface GetDataintegrationWorkspaceTaskOpConfigValueParentRef {
    parent: string;
    rootDocId: string;
}

export interface GetDataintegrationWorkspaceTaskOutputPort {
    configValues: outputs.GetDataintegrationWorkspaceTaskOutputPortConfigValue[];
    description: string;
    fields: string[];
    key: string;
    modelType: string;
    modelVersion: string;
    name: string;
    objectStatus: number;
    parentReves: outputs.GetDataintegrationWorkspaceTaskOutputPortParentRef[];
    portType: string;
}

export interface GetDataintegrationWorkspaceTaskOutputPortConfigValue {
    configParamValues: outputs.GetDataintegrationWorkspaceTaskOutputPortConfigValueConfigParamValue[];
    parentReves: outputs.GetDataintegrationWorkspaceTaskOutputPortConfigValueParentRef[];
}

export interface GetDataintegrationWorkspaceTaskOutputPortConfigValueConfigParamValue {
    intValue: number;
    objectValue: string;
    parameterValue: string;
    refValue: string;
    rootObjectValue: string;
    stringValue: string;
}

export interface GetDataintegrationWorkspaceTaskOutputPortConfigValueParentRef {
    parent: string;
    rootDocId: string;
}

export interface GetDataintegrationWorkspaceTaskOutputPortParentRef {
    parent: string;
    rootDocId: string;
}

export interface GetDataintegrationWorkspaceTaskParameter {
    configValues: outputs.GetDataintegrationWorkspaceTaskParameterConfigValue[];
    defaultValue: string;
    description: string;
    isInput: boolean;
    isOutput: boolean;
    key: string;
    modelType: string;
    modelVersion: string;
    name: string;
    objectStatus: number;
    outputAggregationType: string;
    parentReves: outputs.GetDataintegrationWorkspaceTaskParameterParentRef[];
    rootObjectDefaultValue: string;
    type: string;
    typeName: string;
    usedFor: string;
}

export interface GetDataintegrationWorkspaceTaskParameterConfigValue {
    configParamValues: outputs.GetDataintegrationWorkspaceTaskParameterConfigValueConfigParamValue[];
    parentReves: outputs.GetDataintegrationWorkspaceTaskParameterConfigValueParentRef[];
}

export interface GetDataintegrationWorkspaceTaskParameterConfigValueConfigParamValue {
    configParamValues: outputs.GetDataintegrationWorkspaceTaskParameterConfigValueConfigParamValueConfigParamValue[];
    key: string;
}

export interface GetDataintegrationWorkspaceTaskParameterConfigValueConfigParamValueConfigParamValue {
    intValue: number;
    objectValue: string;
    parameterValue: string;
    refValues: outputs.GetDataintegrationWorkspaceTaskParameterConfigValueConfigParamValueConfigParamValueRefValue[];
    rootObjectValues: outputs.GetDataintegrationWorkspaceTaskParameterConfigValueConfigParamValueConfigParamValueRootObjectValue[];
    stringValue: string;
}

export interface GetDataintegrationWorkspaceTaskParameterConfigValueConfigParamValueConfigParamValueRefValue {
    key: string;
    modelType: string;
    modelVersion: string;
    name: string;
    objectStatus: number;
}

export interface GetDataintegrationWorkspaceTaskParameterConfigValueConfigParamValueConfigParamValueRootObjectValue {
    key: string;
    modelType: string;
    modelVersion: string;
    objectStatus: number;
}

export interface GetDataintegrationWorkspaceTaskParameterConfigValueParentRef {
    parent: string;
    rootDocId: string;
}

export interface GetDataintegrationWorkspaceTaskParameterParentRef {
    parent: string;
    rootDocId: string;
}

export interface GetDataintegrationWorkspaceTaskParentRef {
    parent: string;
    rootDocId: string;
}

export interface GetDataintegrationWorkspaceTaskPollRestCallConfig {
    configValues: outputs.GetDataintegrationWorkspaceTaskPollRestCallConfigConfigValue[];
    key: string;
    methodType: string;
    modelType: string;
    requestHeaders: {[key: string]: string};
}

export interface GetDataintegrationWorkspaceTaskPollRestCallConfigConfigValue {
    configParamValues: outputs.GetDataintegrationWorkspaceTaskPollRestCallConfigConfigValueConfigParamValue[];
    parentReves: outputs.GetDataintegrationWorkspaceTaskPollRestCallConfigConfigValueParentRef[];
}

export interface GetDataintegrationWorkspaceTaskPollRestCallConfigConfigValueConfigParamValue {
    pollConditions: outputs.GetDataintegrationWorkspaceTaskPollRestCallConfigConfigValueConfigParamValuePollCondition[];
    pollIntervalUnits: outputs.GetDataintegrationWorkspaceTaskPollRestCallConfigConfigValueConfigParamValuePollIntervalUnit[];
    pollIntervals: outputs.GetDataintegrationWorkspaceTaskPollRestCallConfigConfigValueConfigParamValuePollInterval[];
    pollMaxDurationUnits: outputs.GetDataintegrationWorkspaceTaskPollRestCallConfigConfigValueConfigParamValuePollMaxDurationUnit[];
    pollMaxDurations: outputs.GetDataintegrationWorkspaceTaskPollRestCallConfigConfigValueConfigParamValuePollMaxDuration[];
    requestPayloads: outputs.GetDataintegrationWorkspaceTaskPollRestCallConfigConfigValueConfigParamValueRequestPayload[];
    requestUrls: outputs.GetDataintegrationWorkspaceTaskPollRestCallConfigConfigValueConfigParamValueRequestUrl[];
}

export interface GetDataintegrationWorkspaceTaskPollRestCallConfigConfigValueConfigParamValuePollCondition {
    parameterValue: string;
    refValues: outputs.GetDataintegrationWorkspaceTaskPollRestCallConfigConfigValueConfigParamValuePollConditionRefValue[];
}

export interface GetDataintegrationWorkspaceTaskPollRestCallConfigConfigValueConfigParamValuePollConditionRefValue {
    exprString: string;
    key: string;
    modelType: string;
    name: string;
}

export interface GetDataintegrationWorkspaceTaskPollRestCallConfigConfigValueConfigParamValuePollInterval {
    objectValue: number;
}

export interface GetDataintegrationWorkspaceTaskPollRestCallConfigConfigValueConfigParamValuePollIntervalUnit {
    stringValue: string;
}

export interface GetDataintegrationWorkspaceTaskPollRestCallConfigConfigValueConfigParamValuePollMaxDuration {
    objectValue: number;
}

export interface GetDataintegrationWorkspaceTaskPollRestCallConfigConfigValueConfigParamValuePollMaxDurationUnit {
    stringValue: string;
}

export interface GetDataintegrationWorkspaceTaskPollRestCallConfigConfigValueConfigParamValueRequestPayload {
    parameterValue: string;
    refValues: outputs.GetDataintegrationWorkspaceTaskPollRestCallConfigConfigValueConfigParamValueRequestPayloadRefValue[];
}

export interface GetDataintegrationWorkspaceTaskPollRestCallConfigConfigValueConfigParamValueRequestPayloadRefValue {
    configValues: outputs.GetDataintegrationWorkspaceTaskPollRestCallConfigConfigValueConfigParamValueRequestPayloadRefValueConfigValue[];
    key: string;
    modelType: string;
    name: string;
}

export interface GetDataintegrationWorkspaceTaskPollRestCallConfigConfigValueConfigParamValueRequestPayloadRefValueConfigValue {
    configParamValues: outputs.GetDataintegrationWorkspaceTaskPollRestCallConfigConfigValueConfigParamValueRequestPayloadRefValueConfigValueConfigParamValue[];
}

export interface GetDataintegrationWorkspaceTaskPollRestCallConfigConfigValueConfigParamValueRequestPayloadRefValueConfigValueConfigParamValue {
    dataParams: outputs.GetDataintegrationWorkspaceTaskPollRestCallConfigConfigValueConfigParamValueRequestPayloadRefValueConfigValueConfigParamValueDataParam[];
}

export interface GetDataintegrationWorkspaceTaskPollRestCallConfigConfigValueConfigParamValueRequestPayloadRefValueConfigValueConfigParamValueDataParam {
    stringValue: string;
}

export interface GetDataintegrationWorkspaceTaskPollRestCallConfigConfigValueConfigParamValueRequestUrl {
    stringValue: string;
}

export interface GetDataintegrationWorkspaceTaskPollRestCallConfigConfigValueParentRef {
    parent: string;
    rootDocId: string;
}

export interface GetDataintegrationWorkspaceTaskRegistryMetadata {
    aggregatorKey: string;
    isFavorite: boolean;
    key: string;
    labels: string[];
    registryVersion: number;
}

export interface GetDataintegrationWorkspaceTaskTypedExpression {
    configValues: outputs.GetDataintegrationWorkspaceTaskTypedExpressionConfigValue[];
    description: string;
    expression: string;
    key: string;
    modelType: string;
    modelVersion: string;
    name: string;
    objectStatus: number;
    parentReves: outputs.GetDataintegrationWorkspaceTaskTypedExpressionParentRef[];
    type: string;
}

export interface GetDataintegrationWorkspaceTaskTypedExpressionConfigValue {
    configParamValues: outputs.GetDataintegrationWorkspaceTaskTypedExpressionConfigValueConfigParamValue[];
    parentReves: outputs.GetDataintegrationWorkspaceTaskTypedExpressionConfigValueParentRef[];
}

export interface GetDataintegrationWorkspaceTaskTypedExpressionConfigValueConfigParamValue {
    lengths: outputs.GetDataintegrationWorkspaceTaskTypedExpressionConfigValueConfigParamValueLength[];
    scales: outputs.GetDataintegrationWorkspaceTaskTypedExpressionConfigValueConfigParamValueScale[];
}

export interface GetDataintegrationWorkspaceTaskTypedExpressionConfigValueConfigParamValueLength {
    intValue: number;
}

export interface GetDataintegrationWorkspaceTaskTypedExpressionConfigValueConfigParamValueScale {
    intValue: number;
}

export interface GetDataintegrationWorkspaceTaskTypedExpressionConfigValueParentRef {
    parent: string;
    rootDocId: string;
}

export interface GetDataintegrationWorkspaceTaskTypedExpressionParentRef {
    parent: string;
    rootDocId: string;
}

export interface GetDataintegrationWorkspaceTasksFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDataintegrationWorkspaceTasksTaskSummaryCollection {
    items: outputs.GetDataintegrationWorkspaceTasksTaskSummaryCollectionItem[];
}

export interface GetDataintegrationWorkspaceTasksTaskSummaryCollectionItem {
    apiCallMode: string;
    authConfigs: outputs.GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemAuthConfig[];
    cancelRestCallConfigs: outputs.GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemCancelRestCallConfig[];
    configProviderDelegates: outputs.GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemConfigProviderDelegate[];
    description: string;
    executeRestCallConfigs: outputs.GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemExecuteRestCallConfig[];
    identifier: string;
    inputPorts: outputs.GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemInputPort[];
    isSingleLoad: boolean;
    key: string;
    keyMap: {[key: string]: string};
    metadatas: outputs.GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemMetadata[];
    modelType: string;
    modelVersion: string;
    name: string;
    objectStatus: number;
    objectVersion: number;
    opConfigValues: outputs.GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemOpConfigValue[];
    operation: string;
    outputPorts: outputs.GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemOutputPort[];
    parallelLoadLimit: number;
    parameters: outputs.GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemParameter[];
    parentReves: outputs.GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemParentRef[];
    pollRestCallConfigs: outputs.GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemPollRestCallConfig[];
    registryMetadatas: outputs.GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemRegistryMetadata[];
    typedExpressions: outputs.GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemTypedExpression[];
    workspaceId: string;
}

export interface GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemAuthConfig {
    key: string;
    modelType: string;
    modelVersion: string;
    parentReves: outputs.GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemAuthConfigParentRef[];
    resourcePrincipalSource: string;
}

export interface GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemAuthConfigParentRef {
    parent: string;
    rootDocId: string;
}

export interface GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemCancelRestCallConfig {
    configValues: outputs.GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemCancelRestCallConfigConfigValue[];
    key: string;
    methodType: string;
    modelType: string;
    requestHeaders: {[key: string]: string};
}

export interface GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemCancelRestCallConfigConfigValue {
    configParamValues: outputs.GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemCancelRestCallConfigConfigValueConfigParamValue[];
    parentReves: outputs.GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemCancelRestCallConfigConfigValueParentRef[];
}

export interface GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemCancelRestCallConfigConfigValueConfigParamValue {
    requestPayloads: outputs.GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemCancelRestCallConfigConfigValueConfigParamValueRequestPayload[];
    requestUrls: outputs.GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemCancelRestCallConfigConfigValueConfigParamValueRequestUrl[];
}

export interface GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemCancelRestCallConfigConfigValueConfigParamValueRequestPayload {
    parameterValue: string;
    refValues: outputs.GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemCancelRestCallConfigConfigValueConfigParamValueRequestPayloadRefValue[];
}

export interface GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemCancelRestCallConfigConfigValueConfigParamValueRequestPayloadRefValue {
    configValues: outputs.GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemCancelRestCallConfigConfigValueConfigParamValueRequestPayloadRefValueConfigValue[];
    key: string;
    modelType: string;
}

export interface GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemCancelRestCallConfigConfigValueConfigParamValueRequestPayloadRefValueConfigValue {
    configParamValues: outputs.GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemCancelRestCallConfigConfigValueConfigParamValueRequestPayloadRefValueConfigValueConfigParamValue[];
}

export interface GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemCancelRestCallConfigConfigValueConfigParamValueRequestPayloadRefValueConfigValueConfigParamValue {
    dataParams: outputs.GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemCancelRestCallConfigConfigValueConfigParamValueRequestPayloadRefValueConfigValueConfigParamValueDataParam[];
}

export interface GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemCancelRestCallConfigConfigValueConfigParamValueRequestPayloadRefValueConfigValueConfigParamValueDataParam {
    stringValue: string;
}

export interface GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemCancelRestCallConfigConfigValueConfigParamValueRequestUrl {
    stringValue: string;
}

export interface GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemCancelRestCallConfigConfigValueParentRef {
    parent: string;
    rootDocId: string;
}

export interface GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemConfigProviderDelegate {
    bindings: outputs.GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemConfigProviderDelegateBinding[];
}

export interface GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemConfigProviderDelegateBinding {
    key: string;
    parameterValues: outputs.GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemConfigProviderDelegateBindingParameterValue[];
}

export interface GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemConfigProviderDelegateBindingParameterValue {
    rootObjectValues: outputs.GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemConfigProviderDelegateBindingParameterValueRootObjectValue[];
    simpleValue: string;
}

export interface GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemConfigProviderDelegateBindingParameterValueRootObjectValue {
    key: string;
    modelType: string;
    modelVersion: string;
    objectStatus: number;
}

export interface GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemExecuteRestCallConfig {
    configValues: outputs.GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemExecuteRestCallConfigConfigValue[];
    key: string;
    methodType: string;
    modelType: string;
    requestHeaders: {[key: string]: string};
}

export interface GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemExecuteRestCallConfigConfigValue {
    configParamValues: outputs.GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemExecuteRestCallConfigConfigValueConfigParamValue[];
    parentReves: outputs.GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemExecuteRestCallConfigConfigValueParentRef[];
}

export interface GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemExecuteRestCallConfigConfigValueConfigParamValue {
    requestPayloads: outputs.GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemExecuteRestCallConfigConfigValueConfigParamValueRequestPayload[];
    requestUrls: outputs.GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemExecuteRestCallConfigConfigValueConfigParamValueRequestUrl[];
}

export interface GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemExecuteRestCallConfigConfigValueConfigParamValueRequestPayload {
    parameterValue: string;
    refValues: outputs.GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemExecuteRestCallConfigConfigValueConfigParamValueRequestPayloadRefValue[];
}

export interface GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemExecuteRestCallConfigConfigValueConfigParamValueRequestPayloadRefValue {
    configValues: outputs.GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemExecuteRestCallConfigConfigValueConfigParamValueRequestPayloadRefValueConfigValue[];
    key: string;
    modelType: string;
}

export interface GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemExecuteRestCallConfigConfigValueConfigParamValueRequestPayloadRefValueConfigValue {
    configParamValues: outputs.GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemExecuteRestCallConfigConfigValueConfigParamValueRequestPayloadRefValueConfigValueConfigParamValue[];
}

export interface GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemExecuteRestCallConfigConfigValueConfigParamValueRequestPayloadRefValueConfigValueConfigParamValue {
    dataParams: outputs.GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemExecuteRestCallConfigConfigValueConfigParamValueRequestPayloadRefValueConfigValueConfigParamValueDataParam[];
}

export interface GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemExecuteRestCallConfigConfigValueConfigParamValueRequestPayloadRefValueConfigValueConfigParamValueDataParam {
    stringValue: string;
}

export interface GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemExecuteRestCallConfigConfigValueConfigParamValueRequestUrl {
    stringValue: string;
}

export interface GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemExecuteRestCallConfigConfigValueParentRef {
    parent: string;
    rootDocId: string;
}

export interface GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemInputPort {
    configValues: outputs.GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemInputPortConfigValue[];
    description: string;
    fields: string[];
    key: string;
    modelType: string;
    modelVersion: string;
    name: string;
    objectStatus: number;
    parentReves: outputs.GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemInputPortParentRef[];
    portType: string;
}

export interface GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemInputPortConfigValue {
    configParamValues: outputs.GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemInputPortConfigValueConfigParamValue[];
    parentReves: outputs.GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemInputPortConfigValueParentRef[];
}

export interface GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemInputPortConfigValueConfigParamValue {
    intValue: number;
    objectValue: string;
    parameterValue: string;
    refValue: string;
    rootObjectValue: string;
    stringValue: string;
}

export interface GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemInputPortConfigValueParentRef {
    parent: string;
    rootDocId: string;
}

export interface GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemInputPortParentRef {
    parent: string;
    rootDocId: string;
}

export interface GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemMetadata {
    aggregatorKey: string;
    aggregators: outputs.GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemMetadataAggregator[];
    countStatistics: outputs.GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemMetadataCountStatistic[];
    createdBy: string;
    createdByName: string;
    identifierPath: string;
    infoFields: {[key: string]: string};
    isFavorite: boolean;
    labels: string[];
    registryVersion: number;
    timeCreated: string;
    timeUpdated: string;
    updatedBy: string;
    updatedByName: string;
}

export interface GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemMetadataAggregator {
    description: string;
    identifier: string;
    key: string;
    name: string;
    type: string;
}

export interface GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemMetadataCountStatistic {
    objectTypeCountLists: outputs.GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemMetadataCountStatisticObjectTypeCountList[];
}

export interface GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemMetadataCountStatisticObjectTypeCountList {
    objectCount: string;
    objectType: string;
}

export interface GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemOpConfigValue {
    configParamValues: outputs.GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemOpConfigValueConfigParamValue[];
    parentReves: outputs.GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemOpConfigValueParentRef[];
}

export interface GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemOpConfigValueConfigParamValue {
    configParamValues: outputs.GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemOpConfigValueConfigParamValueConfigParamValue[];
    key: string;
}

export interface GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemOpConfigValueConfigParamValueConfigParamValue {
    intValue: number;
    objectValue: string;
    parameterValue: string;
    refValues: outputs.GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemOpConfigValueConfigParamValueConfigParamValueRefValue[];
    rootObjectValues: outputs.GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemOpConfigValueConfigParamValueConfigParamValueRootObjectValue[];
    stringValue: string;
}

export interface GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemOpConfigValueConfigParamValueConfigParamValueRefValue {
    key: string;
    modelType: string;
    modelVersion: string;
    name: string;
    objectStatus: number;
}

export interface GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemOpConfigValueConfigParamValueConfigParamValueRootObjectValue {
    key: string;
    modelType: string;
    modelVersion: string;
    objectStatus: number;
}

export interface GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemOpConfigValueParentRef {
    parent: string;
    rootDocId: string;
}

export interface GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemOutputPort {
    configValues: outputs.GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemOutputPortConfigValue[];
    description: string;
    fields: string[];
    key: string;
    modelType: string;
    modelVersion: string;
    name: string;
    objectStatus: number;
    parentReves: outputs.GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemOutputPortParentRef[];
    portType: string;
}

export interface GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemOutputPortConfigValue {
    configParamValues: outputs.GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemOutputPortConfigValueConfigParamValue[];
    parentReves: outputs.GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemOutputPortConfigValueParentRef[];
}

export interface GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemOutputPortConfigValueConfigParamValue {
    intValue: number;
    objectValue: string;
    parameterValue: string;
    refValue: string;
    rootObjectValue: string;
    stringValue: string;
}

export interface GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemOutputPortConfigValueParentRef {
    parent: string;
    rootDocId: string;
}

export interface GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemOutputPortParentRef {
    parent: string;
    rootDocId: string;
}

export interface GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemParameter {
    configValues: outputs.GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemParameterConfigValue[];
    defaultValue: string;
    description: string;
    isInput: boolean;
    isOutput: boolean;
    key: string;
    modelType: string;
    modelVersion: string;
    name: string;
    objectStatus: number;
    outputAggregationType: string;
    parentReves: outputs.GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemParameterParentRef[];
    rootObjectDefaultValue: string;
    type: string;
    typeName: string;
    usedFor: string;
}

export interface GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemParameterConfigValue {
    configParamValues: outputs.GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemParameterConfigValueConfigParamValue[];
    parentReves: outputs.GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemParameterConfigValueParentRef[];
}

export interface GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemParameterConfigValueConfigParamValue {
    configParamValues: outputs.GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemParameterConfigValueConfigParamValueConfigParamValue[];
    key: string;
}

export interface GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemParameterConfigValueConfigParamValueConfigParamValue {
    intValue: number;
    objectValue: string;
    parameterValue: string;
    refValues: outputs.GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemParameterConfigValueConfigParamValueConfigParamValueRefValue[];
    rootObjectValues: outputs.GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemParameterConfigValueConfigParamValueConfigParamValueRootObjectValue[];
    stringValue: string;
}

export interface GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemParameterConfigValueConfigParamValueConfigParamValueRefValue {
    key: string;
    modelType: string;
    modelVersion: string;
    name: string;
    objectStatus: number;
}

export interface GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemParameterConfigValueConfigParamValueConfigParamValueRootObjectValue {
    key: string;
    modelType: string;
    modelVersion: string;
    objectStatus: number;
}

export interface GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemParameterConfigValueParentRef {
    parent: string;
    rootDocId: string;
}

export interface GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemParameterParentRef {
    parent: string;
    rootDocId: string;
}

export interface GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemParentRef {
    parent: string;
    rootDocId: string;
}

export interface GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemPollRestCallConfig {
    configValues: outputs.GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemPollRestCallConfigConfigValue[];
    key: string;
    methodType: string;
    modelType: string;
    requestHeaders: {[key: string]: string};
}

export interface GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemPollRestCallConfigConfigValue {
    configParamValues: outputs.GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemPollRestCallConfigConfigValueConfigParamValue[];
    parentReves: outputs.GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemPollRestCallConfigConfigValueParentRef[];
}

export interface GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemPollRestCallConfigConfigValueConfigParamValue {
    pollConditions: outputs.GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemPollRestCallConfigConfigValueConfigParamValuePollCondition[];
    pollIntervalUnits: outputs.GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemPollRestCallConfigConfigValueConfigParamValuePollIntervalUnit[];
    pollIntervals: outputs.GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemPollRestCallConfigConfigValueConfigParamValuePollInterval[];
    pollMaxDurationUnits: outputs.GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemPollRestCallConfigConfigValueConfigParamValuePollMaxDurationUnit[];
    pollMaxDurations: outputs.GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemPollRestCallConfigConfigValueConfigParamValuePollMaxDuration[];
    requestPayloads: outputs.GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemPollRestCallConfigConfigValueConfigParamValueRequestPayload[];
    requestUrls: outputs.GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemPollRestCallConfigConfigValueConfigParamValueRequestUrl[];
}

export interface GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemPollRestCallConfigConfigValueConfigParamValuePollCondition {
    parameterValue: string;
    refValues: outputs.GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemPollRestCallConfigConfigValueConfigParamValuePollConditionRefValue[];
}

export interface GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemPollRestCallConfigConfigValueConfigParamValuePollConditionRefValue {
    exprString: string;
    key: string;
    modelType: string;
    name: string;
}

export interface GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemPollRestCallConfigConfigValueConfigParamValuePollInterval {
    objectValue: number;
}

export interface GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemPollRestCallConfigConfigValueConfigParamValuePollIntervalUnit {
    stringValue: string;
}

export interface GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemPollRestCallConfigConfigValueConfigParamValuePollMaxDuration {
    objectValue: number;
}

export interface GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemPollRestCallConfigConfigValueConfigParamValuePollMaxDurationUnit {
    stringValue: string;
}

export interface GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemPollRestCallConfigConfigValueConfigParamValueRequestPayload {
    parameterValue: string;
    refValues: outputs.GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemPollRestCallConfigConfigValueConfigParamValueRequestPayloadRefValue[];
}

export interface GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemPollRestCallConfigConfigValueConfigParamValueRequestPayloadRefValue {
    configValues: outputs.GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemPollRestCallConfigConfigValueConfigParamValueRequestPayloadRefValueConfigValue[];
    key: string;
    modelType: string;
    name: string;
}

export interface GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemPollRestCallConfigConfigValueConfigParamValueRequestPayloadRefValueConfigValue {
    configParamValues: outputs.GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemPollRestCallConfigConfigValueConfigParamValueRequestPayloadRefValueConfigValueConfigParamValue[];
}

export interface GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemPollRestCallConfigConfigValueConfigParamValueRequestPayloadRefValueConfigValueConfigParamValue {
    dataParams: outputs.GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemPollRestCallConfigConfigValueConfigParamValueRequestPayloadRefValueConfigValueConfigParamValueDataParam[];
}

export interface GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemPollRestCallConfigConfigValueConfigParamValueRequestPayloadRefValueConfigValueConfigParamValueDataParam {
    stringValue: string;
}

export interface GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemPollRestCallConfigConfigValueConfigParamValueRequestUrl {
    stringValue: string;
}

export interface GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemPollRestCallConfigConfigValueParentRef {
    parent: string;
    rootDocId: string;
}

export interface GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemRegistryMetadata {
    aggregatorKey: string;
    isFavorite: boolean;
    key: string;
    labels: string[];
    registryVersion: number;
}

export interface GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemTypedExpression {
    configValues: outputs.GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemTypedExpressionConfigValue[];
    description: string;
    expression: string;
    key: string;
    modelType: string;
    modelVersion: string;
    name: string;
    objectStatus: number;
    parentReves: outputs.GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemTypedExpressionParentRef[];
    type: string;
}

export interface GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemTypedExpressionConfigValue {
    configParamValues: outputs.GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemTypedExpressionConfigValueConfigParamValue[];
    parentReves: outputs.GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemTypedExpressionConfigValueParentRef[];
}

export interface GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemTypedExpressionConfigValueConfigParamValue {
    lengths: outputs.GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemTypedExpressionConfigValueConfigParamValueLength[];
    scales: outputs.GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemTypedExpressionConfigValueConfigParamValueScale[];
}

export interface GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemTypedExpressionConfigValueConfigParamValueLength {
    intValue: number;
}

export interface GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemTypedExpressionConfigValueConfigParamValueScale {
    intValue: number;
}

export interface GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemTypedExpressionConfigValueParentRef {
    parent: string;
    rootDocId: string;
}

export interface GetDataintegrationWorkspaceTasksTaskSummaryCollectionItemTypedExpressionParentRef {
    parent: string;
    rootDocId: string;
}

export interface GetDataintegrationWorkspacesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDataintegrationWorkspacesWorkspace {
    compartmentId: string;
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    dnsServerIp: string;
    dnsServerZone: string;
    endpointCompartmentId: string;
    endpointId: string;
    endpointName: string;
    freeformTags: {[key: string]: string};
    id: string;
    isForceOperation: boolean;
    isPrivateNetworkEnabled: boolean;
    quiesceTimeout: number;
    registryCompartmentId: string;
    registryId: string;
    registryName: string;
    state: string;
    stateMessage: string;
    subnetId: string;
    timeCreated: string;
    timeUpdated: string;
    vcnId: string;
}

export interface GetDatascienceFastLaunchJobConfigsFastLaunchJobConfig {
    coreCount: number;
    managedEgressSupport: string;
    memoryInGbs: number;
    name: string;
    shapeName: string;
    shapeSeries: string;
}

export interface GetDatascienceFastLaunchJobConfigsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatascienceJobJobConfigurationDetail {
    commandLineArguments: string;
    environmentVariables: {[key: string]: string};
    jobType: string;
    maximumRuntimeInMinutes: string;
}

export interface GetDatascienceJobJobEnvironmentConfigurationDetail {
    cmds: string[];
    entrypoints: string[];
    image: string;
    imageDigest: string;
    imageSignatureId: string;
    jobEnvironmentType: string;
}

export interface GetDatascienceJobJobInfrastructureConfigurationDetail {
    blockStorageSizeInGbs: number;
    jobInfrastructureType: string;
    jobShapeConfigDetails: outputs.GetDatascienceJobJobInfrastructureConfigurationDetailJobShapeConfigDetail[];
    shapeName: string;
    subnetId: string;
}

export interface GetDatascienceJobJobInfrastructureConfigurationDetailJobShapeConfigDetail {
    memoryInGbs: number;
    ocpus: number;
}

export interface GetDatascienceJobJobLogConfigurationDetail {
    enableAutoLogCreation: boolean;
    enableLogging: boolean;
    logGroupId: string;
    logId: string;
}

export interface GetDatascienceJobJobStorageMountConfigurationDetailsList {
    bucket: string;
    destinationDirectoryName: string;
    destinationPath: string;
    exportId: string;
    mountTargetId: string;
    namespace: string;
    prefix: string;
    storageType: string;
}

export interface GetDatascienceJobRunJobConfigurationOverrideDetail {
    commandLineArguments: string;
    environmentVariables: {[key: string]: string};
    jobType: string;
    maximumRuntimeInMinutes: string;
}

export interface GetDatascienceJobRunJobEnvironmentConfigurationOverrideDetail {
    cmds: string[];
    entrypoints: string[];
    image: string;
    imageDigest: string;
    imageSignatureId: string;
    jobEnvironmentType: string;
}

export interface GetDatascienceJobRunJobInfrastructureConfigurationDetail {
    blockStorageSizeInGbs: number;
    jobInfrastructureType: string;
    jobShapeConfigDetails: outputs.GetDatascienceJobRunJobInfrastructureConfigurationDetailJobShapeConfigDetail[];
    shapeName: string;
    subnetId: string;
}

export interface GetDatascienceJobRunJobInfrastructureConfigurationDetailJobShapeConfigDetail {
    memoryInGbs: number;
    ocpus: number;
}

export interface GetDatascienceJobRunJobLogConfigurationOverrideDetail {
    enableAutoLogCreation: boolean;
    enableLogging: boolean;
    logGroupId: string;
    logId: string;
}

export interface GetDatascienceJobRunJobStorageMountConfigurationDetailsList {
    bucket: string;
    destinationDirectoryName: string;
    destinationPath: string;
    exportId: string;
    mountTargetId: string;
    namespace: string;
    prefix: string;
    storageType: string;
}

export interface GetDatascienceJobRunLogDetail {
    logGroupId: string;
    logId: string;
}

export interface GetDatascienceJobRunsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatascienceJobRunsJobRun {
    asynchronous: boolean;
    compartmentId: string;
    createdBy: string;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    jobConfigurationOverrideDetails: outputs.GetDatascienceJobRunsJobRunJobConfigurationOverrideDetail[];
    jobEnvironmentConfigurationOverrideDetails: outputs.GetDatascienceJobRunsJobRunJobEnvironmentConfigurationOverrideDetail[];
    jobId: string;
    jobInfrastructureConfigurationDetails: outputs.GetDatascienceJobRunsJobRunJobInfrastructureConfigurationDetail[];
    jobLogConfigurationOverrideDetails: outputs.GetDatascienceJobRunsJobRunJobLogConfigurationOverrideDetail[];
    jobStorageMountConfigurationDetailsLists: outputs.GetDatascienceJobRunsJobRunJobStorageMountConfigurationDetailsList[];
    lifecycleDetails: string;
    logDetails: outputs.GetDatascienceJobRunsJobRunLogDetail[];
    opcParentRptUrl: string;
    projectId: string;
    state: string;
    timeAccepted: string;
    timeFinished: string;
    timeStarted: string;
}

export interface GetDatascienceJobRunsJobRunJobConfigurationOverrideDetail {
    commandLineArguments: string;
    environmentVariables: {[key: string]: string};
    jobType: string;
    maximumRuntimeInMinutes: string;
}

export interface GetDatascienceJobRunsJobRunJobEnvironmentConfigurationOverrideDetail {
    cmds: string[];
    entrypoints: string[];
    image: string;
    imageDigest: string;
    imageSignatureId: string;
    jobEnvironmentType: string;
}

export interface GetDatascienceJobRunsJobRunJobInfrastructureConfigurationDetail {
    blockStorageSizeInGbs: number;
    jobInfrastructureType: string;
    jobShapeConfigDetails: outputs.GetDatascienceJobRunsJobRunJobInfrastructureConfigurationDetailJobShapeConfigDetail[];
    shapeName: string;
    subnetId: string;
}

export interface GetDatascienceJobRunsJobRunJobInfrastructureConfigurationDetailJobShapeConfigDetail {
    memoryInGbs: number;
    ocpus: number;
}

export interface GetDatascienceJobRunsJobRunJobLogConfigurationOverrideDetail {
    enableAutoLogCreation: boolean;
    enableLogging: boolean;
    logGroupId: string;
    logId: string;
}

export interface GetDatascienceJobRunsJobRunJobStorageMountConfigurationDetailsList {
    bucket: string;
    destinationDirectoryName: string;
    destinationPath: string;
    exportId: string;
    mountTargetId: string;
    namespace: string;
    prefix: string;
    storageType: string;
}

export interface GetDatascienceJobRunsJobRunLogDetail {
    logGroupId: string;
    logId: string;
}

export interface GetDatascienceJobShapesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatascienceJobShapesJobShape {
    coreCount: number;
    memoryInGbs: number;
    name: string;
    shapeSeries: string;
}

export interface GetDatascienceJobsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatascienceJobsJob {
    artifactContentDisposition: string;
    artifactContentLength: string;
    artifactContentMd5: string;
    artifactLastModified: string;
    compartmentId: string;
    createdBy: string;
    definedTags: {[key: string]: string};
    deleteRelatedJobRuns: boolean;
    description: string;
    displayName: string;
    emptyArtifact: boolean;
    freeformTags: {[key: string]: string};
    id: string;
    jobArtifact: string;
    jobConfigurationDetails: outputs.GetDatascienceJobsJobJobConfigurationDetail[];
    jobEnvironmentConfigurationDetails: outputs.GetDatascienceJobsJobJobEnvironmentConfigurationDetail[];
    jobInfrastructureConfigurationDetails: outputs.GetDatascienceJobsJobJobInfrastructureConfigurationDetail[];
    jobLogConfigurationDetails: outputs.GetDatascienceJobsJobJobLogConfigurationDetail[];
    jobStorageMountConfigurationDetailsLists: outputs.GetDatascienceJobsJobJobStorageMountConfigurationDetailsList[];
    lifecycleDetails: string;
    projectId: string;
    state: string;
    timeCreated: string;
}

export interface GetDatascienceJobsJobJobConfigurationDetail {
    commandLineArguments: string;
    environmentVariables: {[key: string]: string};
    jobType: string;
    maximumRuntimeInMinutes: string;
}

export interface GetDatascienceJobsJobJobEnvironmentConfigurationDetail {
    cmds: string[];
    entrypoints: string[];
    image: string;
    imageDigest: string;
    imageSignatureId: string;
    jobEnvironmentType: string;
}

export interface GetDatascienceJobsJobJobInfrastructureConfigurationDetail {
    blockStorageSizeInGbs: number;
    jobInfrastructureType: string;
    jobShapeConfigDetails: outputs.GetDatascienceJobsJobJobInfrastructureConfigurationDetailJobShapeConfigDetail[];
    shapeName: string;
    subnetId: string;
}

export interface GetDatascienceJobsJobJobInfrastructureConfigurationDetailJobShapeConfigDetail {
    memoryInGbs: number;
    ocpus: number;
}

export interface GetDatascienceJobsJobJobLogConfigurationDetail {
    enableAutoLogCreation: boolean;
    enableLogging: boolean;
    logGroupId: string;
    logId: string;
}

export interface GetDatascienceJobsJobJobStorageMountConfigurationDetailsList {
    bucket: string;
    destinationDirectoryName: string;
    destinationPath: string;
    exportId: string;
    mountTargetId: string;
    namespace: string;
    prefix: string;
    storageType: string;
}

export interface GetDatascienceModelCustomMetadataList {
    category: string;
    description: string;
    key: string;
    value: string;
}

export interface GetDatascienceModelDefinedMetadataList {
    category: string;
    description: string;
    key: string;
    value: string;
}

export interface GetDatascienceModelDeploymentCategoryLogDetail {
    accesses: outputs.GetDatascienceModelDeploymentCategoryLogDetailAccess[];
    predicts: outputs.GetDatascienceModelDeploymentCategoryLogDetailPredict[];
}

export interface GetDatascienceModelDeploymentCategoryLogDetailAccess {
    logGroupId: string;
    logId: string;
}

export interface GetDatascienceModelDeploymentCategoryLogDetailPredict {
    logGroupId: string;
    logId: string;
}

export interface GetDatascienceModelDeploymentModelDeploymentConfigurationDetail {
    deploymentType: string;
    environmentConfigurationDetails: outputs.GetDatascienceModelDeploymentModelDeploymentConfigurationDetailEnvironmentConfigurationDetail[];
    modelConfigurationDetails: outputs.GetDatascienceModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetail[];
}

export interface GetDatascienceModelDeploymentModelDeploymentConfigurationDetailEnvironmentConfigurationDetail {
    cmds: string[];
    entrypoints: string[];
    environmentConfigurationType: string;
    environmentVariables: {[key: string]: string};
    healthCheckPort: number;
    image: string;
    imageDigest: string;
    serverPort: number;
}

export interface GetDatascienceModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetail {
    bandwidthMbps: number;
    instanceConfigurations: outputs.GetDatascienceModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailInstanceConfiguration[];
    maximumBandwidthMbps: number;
    modelId: string;
    scalingPolicies: outputs.GetDatascienceModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailScalingPolicy[];
}

export interface GetDatascienceModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailInstanceConfiguration {
    instanceShapeName: string;
    modelDeploymentInstanceShapeConfigDetails: outputs.GetDatascienceModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailInstanceConfigurationModelDeploymentInstanceShapeConfigDetail[];
    subnetId: string;
}

export interface GetDatascienceModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailInstanceConfigurationModelDeploymentInstanceShapeConfigDetail {
    cpuBaseline: string;
    memoryInGbs: number;
    ocpus: number;
}

export interface GetDatascienceModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailScalingPolicy {
    autoScalingPolicies: outputs.GetDatascienceModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailScalingPolicyAutoScalingPolicy[];
    coolDownInSeconds: number;
    instanceCount: number;
    isEnabled: boolean;
    policyType: string;
}

export interface GetDatascienceModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailScalingPolicyAutoScalingPolicy {
    autoScalingPolicyType: string;
    initialInstanceCount: number;
    maximumInstanceCount: number;
    minimumInstanceCount: number;
    rules: outputs.GetDatascienceModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailScalingPolicyAutoScalingPolicyRule[];
}

export interface GetDatascienceModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailScalingPolicyAutoScalingPolicyRule {
    metricExpressionRuleType: string;
    metricType: string;
    scaleInConfigurations: outputs.GetDatascienceModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailScalingPolicyAutoScalingPolicyRuleScaleInConfiguration[];
    scaleOutConfigurations: outputs.GetDatascienceModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailScalingPolicyAutoScalingPolicyRuleScaleOutConfiguration[];
}

export interface GetDatascienceModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailScalingPolicyAutoScalingPolicyRuleScaleInConfiguration {
    instanceCountAdjustment: number;
    pendingDuration: string;
    query: string;
    scalingConfigurationType: string;
    threshold: number;
}

export interface GetDatascienceModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailScalingPolicyAutoScalingPolicyRuleScaleOutConfiguration {
    instanceCountAdjustment: number;
    pendingDuration: string;
    query: string;
    scalingConfigurationType: string;
    threshold: number;
}

export interface GetDatascienceModelDeploymentModelDeploymentSystemData {
    currentInstanceCount: number;
    systemInfraType: string;
}

export interface GetDatascienceModelDeploymentShapesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatascienceModelDeploymentShapesModelDeploymentShape {
    coreCount: number;
    memoryInGbs: number;
    name: string;
    shapeSeries: string;
}

export interface GetDatascienceModelDeploymentsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatascienceModelDeploymentsModelDeployment {
    categoryLogDetails: outputs.GetDatascienceModelDeploymentsModelDeploymentCategoryLogDetail[];
    compartmentId: string;
    createdBy: string;
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    lifecycleDetails: string;
    modelDeploymentConfigurationDetails: outputs.GetDatascienceModelDeploymentsModelDeploymentModelDeploymentConfigurationDetail[];
    modelDeploymentSystemDatas: outputs.GetDatascienceModelDeploymentsModelDeploymentModelDeploymentSystemData[];
    modelDeploymentUrl: string;
    opcParentRptUrl: string;
    projectId: string;
    state: string;
    timeCreated: string;
}

export interface GetDatascienceModelDeploymentsModelDeploymentCategoryLogDetail {
    accesses: outputs.GetDatascienceModelDeploymentsModelDeploymentCategoryLogDetailAccess[];
    predicts: outputs.GetDatascienceModelDeploymentsModelDeploymentCategoryLogDetailPredict[];
}

export interface GetDatascienceModelDeploymentsModelDeploymentCategoryLogDetailAccess {
    logGroupId: string;
    logId: string;
}

export interface GetDatascienceModelDeploymentsModelDeploymentCategoryLogDetailPredict {
    logGroupId: string;
    logId: string;
}

export interface GetDatascienceModelDeploymentsModelDeploymentModelDeploymentConfigurationDetail {
    deploymentType: string;
    environmentConfigurationDetails: outputs.GetDatascienceModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailEnvironmentConfigurationDetail[];
    modelConfigurationDetails: outputs.GetDatascienceModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetail[];
}

export interface GetDatascienceModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailEnvironmentConfigurationDetail {
    cmds: string[];
    entrypoints: string[];
    environmentConfigurationType: string;
    environmentVariables: {[key: string]: string};
    healthCheckPort: number;
    image: string;
    imageDigest: string;
    serverPort: number;
}

export interface GetDatascienceModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetail {
    bandwidthMbps: number;
    instanceConfigurations: outputs.GetDatascienceModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailInstanceConfiguration[];
    maximumBandwidthMbps: number;
    modelId: string;
    scalingPolicies: outputs.GetDatascienceModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailScalingPolicy[];
}

export interface GetDatascienceModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailInstanceConfiguration {
    instanceShapeName: string;
    modelDeploymentInstanceShapeConfigDetails: outputs.GetDatascienceModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailInstanceConfigurationModelDeploymentInstanceShapeConfigDetail[];
    subnetId: string;
}

export interface GetDatascienceModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailInstanceConfigurationModelDeploymentInstanceShapeConfigDetail {
    cpuBaseline: string;
    memoryInGbs: number;
    ocpus: number;
}

export interface GetDatascienceModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailScalingPolicy {
    autoScalingPolicies: outputs.GetDatascienceModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailScalingPolicyAutoScalingPolicy[];
    coolDownInSeconds: number;
    instanceCount: number;
    isEnabled: boolean;
    policyType: string;
}

export interface GetDatascienceModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailScalingPolicyAutoScalingPolicy {
    autoScalingPolicyType: string;
    initialInstanceCount: number;
    maximumInstanceCount: number;
    minimumInstanceCount: number;
    rules: outputs.GetDatascienceModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailScalingPolicyAutoScalingPolicyRule[];
}

export interface GetDatascienceModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailScalingPolicyAutoScalingPolicyRule {
    metricExpressionRuleType: string;
    metricType: string;
    scaleInConfigurations: outputs.GetDatascienceModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailScalingPolicyAutoScalingPolicyRuleScaleInConfiguration[];
    scaleOutConfigurations: outputs.GetDatascienceModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailScalingPolicyAutoScalingPolicyRuleScaleOutConfiguration[];
}

export interface GetDatascienceModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailScalingPolicyAutoScalingPolicyRuleScaleInConfiguration {
    instanceCountAdjustment: number;
    pendingDuration: string;
    query: string;
    scalingConfigurationType: string;
    threshold: number;
}

export interface GetDatascienceModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailScalingPolicyAutoScalingPolicyRuleScaleOutConfiguration {
    instanceCountAdjustment: number;
    pendingDuration: string;
    query: string;
    scalingConfigurationType: string;
    threshold: number;
}

export interface GetDatascienceModelDeploymentsModelDeploymentModelDeploymentSystemData {
    currentInstanceCount: number;
    systemInfraType: string;
}

export interface GetDatascienceModelVersionSetsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatascienceModelVersionSetsModelVersionSet {
    compartmentId: string;
    createdBy: string;
    definedTags: {[key: string]: string};
    description: string;
    freeformTags: {[key: string]: string};
    id: string;
    name: string;
    projectId: string;
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
}

export interface GetDatascienceModelsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatascienceModelsModel {
    artifactContentDisposition: string;
    artifactContentLength: string;
    artifactContentMd5: string;
    artifactLastModified: string;
    compartmentId: string;
    createdBy: string;
    customMetadataLists: outputs.GetDatascienceModelsModelCustomMetadataList[];
    definedMetadataLists: outputs.GetDatascienceModelsModelDefinedMetadataList[];
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    emptyModel: boolean;
    freeformTags: {[key: string]: string};
    id: string;
    inputSchema: string;
    modelArtifact: string;
    outputSchema: string;
    projectId: string;
    state: string;
    timeCreated: string;
}

export interface GetDatascienceModelsModelCustomMetadataList {
    category: string;
    description: string;
    key: string;
    value: string;
}

export interface GetDatascienceModelsModelDefinedMetadataList {
    category: string;
    description: string;
    key: string;
    value: string;
}

export interface GetDatascienceNotebookSessionNotebookSessionConfigDetail {
    blockStorageSizeInGbs: number;
    notebookSessionShapeConfigDetails: outputs.GetDatascienceNotebookSessionNotebookSessionConfigDetailNotebookSessionShapeConfigDetail[];
    privateEndpointId: string;
    shape: string;
    subnetId: string;
}

export interface GetDatascienceNotebookSessionNotebookSessionConfigDetailNotebookSessionShapeConfigDetail {
    memoryInGbs: number;
    ocpus: number;
}

export interface GetDatascienceNotebookSessionNotebookSessionConfigurationDetail {
    blockStorageSizeInGbs: number;
    notebookSessionShapeConfigDetails: outputs.GetDatascienceNotebookSessionNotebookSessionConfigurationDetailNotebookSessionShapeConfigDetail[];
    privateEndpointId: string;
    shape: string;
    subnetId: string;
}

export interface GetDatascienceNotebookSessionNotebookSessionConfigurationDetailNotebookSessionShapeConfigDetail {
    memoryInGbs: number;
    ocpus: number;
}

export interface GetDatascienceNotebookSessionNotebookSessionRuntimeConfigDetail {
    customEnvironmentVariables: {[key: string]: string};
    notebookSessionGitConfigDetails: outputs.GetDatascienceNotebookSessionNotebookSessionRuntimeConfigDetailNotebookSessionGitConfigDetail[];
}

export interface GetDatascienceNotebookSessionNotebookSessionRuntimeConfigDetailNotebookSessionGitConfigDetail {
    notebookSessionGitRepoConfigCollections: outputs.GetDatascienceNotebookSessionNotebookSessionRuntimeConfigDetailNotebookSessionGitConfigDetailNotebookSessionGitRepoConfigCollection[];
}

export interface GetDatascienceNotebookSessionNotebookSessionRuntimeConfigDetailNotebookSessionGitConfigDetailNotebookSessionGitRepoConfigCollection {
    url: string;
}

export interface GetDatascienceNotebookSessionNotebookSessionStorageMountConfigurationDetailsList {
    bucket: string;
    destinationDirectoryName: string;
    destinationPath: string;
    exportId: string;
    mountTargetId: string;
    namespace: string;
    prefix: string;
    storageType: string;
}

export interface GetDatascienceNotebookSessionShapesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatascienceNotebookSessionShapesNotebookSessionShape {
    coreCount: number;
    memoryInGbs: number;
    name: string;
    shapeSeries: string;
}

export interface GetDatascienceNotebookSessionsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatascienceNotebookSessionsNotebookSession {
    compartmentId: string;
    createdBy: string;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    lifecycleDetails: string;
    notebookSessionConfigDetails: outputs.GetDatascienceNotebookSessionsNotebookSessionNotebookSessionConfigDetail[];
    notebookSessionConfigurationDetails: outputs.GetDatascienceNotebookSessionsNotebookSessionNotebookSessionConfigurationDetail[];
    notebookSessionRuntimeConfigDetails: outputs.GetDatascienceNotebookSessionsNotebookSessionNotebookSessionRuntimeConfigDetail[];
    notebookSessionStorageMountConfigurationDetailsLists: outputs.GetDatascienceNotebookSessionsNotebookSessionNotebookSessionStorageMountConfigurationDetailsList[];
    notebookSessionUrl: string;
    projectId: string;
    state: string;
    timeCreated: string;
}

export interface GetDatascienceNotebookSessionsNotebookSessionNotebookSessionConfigDetail {
    blockStorageSizeInGbs: number;
    notebookSessionShapeConfigDetails: outputs.GetDatascienceNotebookSessionsNotebookSessionNotebookSessionConfigDetailNotebookSessionShapeConfigDetail[];
    privateEndpointId: string;
    shape: string;
    subnetId: string;
}

export interface GetDatascienceNotebookSessionsNotebookSessionNotebookSessionConfigDetailNotebookSessionShapeConfigDetail {
    memoryInGbs: number;
    ocpus: number;
}

export interface GetDatascienceNotebookSessionsNotebookSessionNotebookSessionConfigurationDetail {
    blockStorageSizeInGbs: number;
    notebookSessionShapeConfigDetails: outputs.GetDatascienceNotebookSessionsNotebookSessionNotebookSessionConfigurationDetailNotebookSessionShapeConfigDetail[];
    privateEndpointId: string;
    shape: string;
    subnetId: string;
}

export interface GetDatascienceNotebookSessionsNotebookSessionNotebookSessionConfigurationDetailNotebookSessionShapeConfigDetail {
    memoryInGbs: number;
    ocpus: number;
}

export interface GetDatascienceNotebookSessionsNotebookSessionNotebookSessionRuntimeConfigDetail {
    customEnvironmentVariables: {[key: string]: string};
    notebookSessionGitConfigDetails: outputs.GetDatascienceNotebookSessionsNotebookSessionNotebookSessionRuntimeConfigDetailNotebookSessionGitConfigDetail[];
}

export interface GetDatascienceNotebookSessionsNotebookSessionNotebookSessionRuntimeConfigDetailNotebookSessionGitConfigDetail {
    notebookSessionGitRepoConfigCollections: outputs.GetDatascienceNotebookSessionsNotebookSessionNotebookSessionRuntimeConfigDetailNotebookSessionGitConfigDetailNotebookSessionGitRepoConfigCollection[];
}

export interface GetDatascienceNotebookSessionsNotebookSessionNotebookSessionRuntimeConfigDetailNotebookSessionGitConfigDetailNotebookSessionGitRepoConfigCollection {
    url: string;
}

export interface GetDatascienceNotebookSessionsNotebookSessionNotebookSessionStorageMountConfigurationDetailsList {
    bucket: string;
    destinationDirectoryName: string;
    destinationPath: string;
    exportId: string;
    mountTargetId: string;
    namespace: string;
    prefix: string;
    storageType: string;
}

export interface GetDatasciencePipelineConfigurationDetail {
    commandLineArguments: string;
    environmentVariables: {[key: string]: string};
    maximumRuntimeInMinutes: string;
    type: string;
}

export interface GetDatasciencePipelineInfrastructureConfigurationDetail {
    blockStorageSizeInGbs: number;
    shapeConfigDetails: outputs.GetDatasciencePipelineInfrastructureConfigurationDetailShapeConfigDetail[];
    shapeName: string;
    subnetId: string;
}

export interface GetDatasciencePipelineInfrastructureConfigurationDetailShapeConfigDetail {
    memoryInGbs: number;
    ocpus: number;
}

export interface GetDatasciencePipelineLogConfigurationDetail {
    enableAutoLogCreation: boolean;
    enableLogging: boolean;
    logGroupId: string;
    logId: string;
}

export interface GetDatasciencePipelineRunConfigurationDetail {
    commandLineArguments: string;
    environmentVariables: {[key: string]: string};
    maximumRuntimeInMinutes: string;
    type: string;
}

export interface GetDatasciencePipelineRunConfigurationOverrideDetail {
    commandLineArguments: string;
    environmentVariables: {[key: string]: string};
    maximumRuntimeInMinutes: string;
    type: string;
}

export interface GetDatasciencePipelineRunLogConfigurationOverrideDetail {
    enableAutoLogCreation: boolean;
    enableLogging: boolean;
    logGroupId: string;
    logId: string;
}

export interface GetDatasciencePipelineRunLogDetail {
    logGroupId: string;
    logId: string;
}

export interface GetDatasciencePipelineRunStepOverrideDetail {
    stepConfigurationDetails: outputs.GetDatasciencePipelineRunStepOverrideDetailStepConfigurationDetail[];
    stepContainerConfigurationDetails: outputs.GetDatasciencePipelineRunStepOverrideDetailStepContainerConfigurationDetail[];
    stepName: string;
}

export interface GetDatasciencePipelineRunStepOverrideDetailStepConfigurationDetail {
    commandLineArguments: string;
    environmentVariables: {[key: string]: string};
    maximumRuntimeInMinutes: string;
}

export interface GetDatasciencePipelineRunStepOverrideDetailStepContainerConfigurationDetail {
    cmds: string[];
    containerType: string;
    entrypoints: string[];
    image: string;
    imageDigest: string;
    imageSignatureId: string;
}

export interface GetDatasciencePipelineRunStepRun {
    jobRunId: string;
    lifecycleDetails: string;
    state: string;
    stepName: string;
    stepType: string;
    timeFinished: string;
    timeStarted: string;
}

export interface GetDatasciencePipelineRunsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatasciencePipelineRunsPipelineRun {
    compartmentId: string;
    configurationDetails: outputs.GetDatasciencePipelineRunsPipelineRunConfigurationDetail[];
    configurationOverrideDetails: outputs.GetDatasciencePipelineRunsPipelineRunConfigurationOverrideDetail[];
    createdBy: string;
    definedTags: {[key: string]: string};
    deleteRelatedJobRuns: boolean;
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    lifecycleDetails: string;
    logConfigurationOverrideDetails: outputs.GetDatasciencePipelineRunsPipelineRunLogConfigurationOverrideDetail[];
    logDetails: outputs.GetDatasciencePipelineRunsPipelineRunLogDetail[];
    opcParentRptUrl: string;
    pipelineId: string;
    projectId: string;
    state: string;
    stepOverrideDetails: outputs.GetDatasciencePipelineRunsPipelineRunStepOverrideDetail[];
    stepRuns: outputs.GetDatasciencePipelineRunsPipelineRunStepRun[];
    systemTags: {[key: string]: string};
    timeAccepted: string;
    timeFinished: string;
    timeStarted: string;
    timeUpdated: string;
}

export interface GetDatasciencePipelineRunsPipelineRunConfigurationDetail {
    commandLineArguments: string;
    environmentVariables: {[key: string]: string};
    maximumRuntimeInMinutes: string;
    type: string;
}

export interface GetDatasciencePipelineRunsPipelineRunConfigurationOverrideDetail {
    commandLineArguments: string;
    environmentVariables: {[key: string]: string};
    maximumRuntimeInMinutes: string;
    type: string;
}

export interface GetDatasciencePipelineRunsPipelineRunLogConfigurationOverrideDetail {
    enableAutoLogCreation: boolean;
    enableLogging: boolean;
    logGroupId: string;
    logId: string;
}

export interface GetDatasciencePipelineRunsPipelineRunLogDetail {
    logGroupId: string;
    logId: string;
}

export interface GetDatasciencePipelineRunsPipelineRunStepOverrideDetail {
    stepConfigurationDetails: outputs.GetDatasciencePipelineRunsPipelineRunStepOverrideDetailStepConfigurationDetail[];
    stepContainerConfigurationDetails: outputs.GetDatasciencePipelineRunsPipelineRunStepOverrideDetailStepContainerConfigurationDetail[];
    stepName: string;
}

export interface GetDatasciencePipelineRunsPipelineRunStepOverrideDetailStepConfigurationDetail {
    commandLineArguments: string;
    environmentVariables: {[key: string]: string};
    maximumRuntimeInMinutes: string;
}

export interface GetDatasciencePipelineRunsPipelineRunStepOverrideDetailStepContainerConfigurationDetail {
    cmds: string[];
    containerType: string;
    entrypoints: string[];
    image: string;
    imageDigest: string;
    imageSignatureId: string;
}

export interface GetDatasciencePipelineRunsPipelineRunStepRun {
    jobRunId: string;
    lifecycleDetails: string;
    state: string;
    stepName: string;
    stepType: string;
    timeFinished: string;
    timeStarted: string;
}

export interface GetDatasciencePipelineStepArtifact {
    artifactContentDisposition: string;
    artifactContentLength: string;
    artifactContentMd5: string;
    artifactLastModified: string;
    pipelineStepArtifact: string;
    stepName: string;
}

export interface GetDatasciencePipelineStepDetail {
    dependsOns: string[];
    description: string;
    isArtifactUploaded: boolean;
    jobId: string;
    stepConfigurationDetails: outputs.GetDatasciencePipelineStepDetailStepConfigurationDetail[];
    stepContainerConfigurationDetails: outputs.GetDatasciencePipelineStepDetailStepContainerConfigurationDetail[];
    stepInfrastructureConfigurationDetails: outputs.GetDatasciencePipelineStepDetailStepInfrastructureConfigurationDetail[];
    stepName: string;
    stepType: string;
}

export interface GetDatasciencePipelineStepDetailStepConfigurationDetail {
    commandLineArguments: string;
    environmentVariables: {[key: string]: string};
    maximumRuntimeInMinutes: string;
}

export interface GetDatasciencePipelineStepDetailStepContainerConfigurationDetail {
    cmds: string[];
    containerType: string;
    entrypoints: string[];
    image: string;
    imageDigest: string;
    imageSignatureId: string;
}

export interface GetDatasciencePipelineStepDetailStepInfrastructureConfigurationDetail {
    blockStorageSizeInGbs: number;
    shapeConfigDetails: outputs.GetDatasciencePipelineStepDetailStepInfrastructureConfigurationDetailShapeConfigDetail[];
    shapeName: string;
    subnetId: string;
}

export interface GetDatasciencePipelineStepDetailStepInfrastructureConfigurationDetailShapeConfigDetail {
    memoryInGbs: number;
    ocpus: number;
}

export interface GetDatasciencePipelinesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatasciencePipelinesPipeline {
    compartmentId: string;
    configurationDetails: outputs.GetDatasciencePipelinesPipelineConfigurationDetail[];
    createdBy: string;
    definedTags: {[key: string]: string};
    deleteRelatedPipelineRuns: boolean;
    description: string;
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    infrastructureConfigurationDetails: outputs.GetDatasciencePipelinesPipelineInfrastructureConfigurationDetail[];
    lifecycleDetails: string;
    logConfigurationDetails: outputs.GetDatasciencePipelinesPipelineLogConfigurationDetail[];
    projectId: string;
    state: string;
    stepArtifacts: outputs.GetDatasciencePipelinesPipelineStepArtifact[];
    stepDetails: outputs.GetDatasciencePipelinesPipelineStepDetail[];
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
}

export interface GetDatasciencePipelinesPipelineConfigurationDetail {
    commandLineArguments: string;
    environmentVariables: {[key: string]: string};
    maximumRuntimeInMinutes: string;
    type: string;
}

export interface GetDatasciencePipelinesPipelineInfrastructureConfigurationDetail {
    blockStorageSizeInGbs: number;
    shapeConfigDetails: outputs.GetDatasciencePipelinesPipelineInfrastructureConfigurationDetailShapeConfigDetail[];
    shapeName: string;
    subnetId: string;
}

export interface GetDatasciencePipelinesPipelineInfrastructureConfigurationDetailShapeConfigDetail {
    memoryInGbs: number;
    ocpus: number;
}

export interface GetDatasciencePipelinesPipelineLogConfigurationDetail {
    enableAutoLogCreation: boolean;
    enableLogging: boolean;
    logGroupId: string;
    logId: string;
}

export interface GetDatasciencePipelinesPipelineStepArtifact {
    artifactContentDisposition: string;
    artifactContentLength: string;
    artifactContentMd5: string;
    artifactLastModified: string;
    pipelineStepArtifact: string;
    stepName: string;
}

export interface GetDatasciencePipelinesPipelineStepDetail {
    dependsOns: string[];
    description: string;
    isArtifactUploaded: boolean;
    jobId: string;
    stepConfigurationDetails: outputs.GetDatasciencePipelinesPipelineStepDetailStepConfigurationDetail[];
    stepContainerConfigurationDetails: outputs.GetDatasciencePipelinesPipelineStepDetailStepContainerConfigurationDetail[];
    stepInfrastructureConfigurationDetails: outputs.GetDatasciencePipelinesPipelineStepDetailStepInfrastructureConfigurationDetail[];
    stepName: string;
    stepType: string;
}

export interface GetDatasciencePipelinesPipelineStepDetailStepConfigurationDetail {
    commandLineArguments: string;
    environmentVariables: {[key: string]: string};
    maximumRuntimeInMinutes: string;
}

export interface GetDatasciencePipelinesPipelineStepDetailStepContainerConfigurationDetail {
    cmds: string[];
    containerType: string;
    entrypoints: string[];
    image: string;
    imageDigest: string;
    imageSignatureId: string;
}

export interface GetDatasciencePipelinesPipelineStepDetailStepInfrastructureConfigurationDetail {
    blockStorageSizeInGbs: number;
    shapeConfigDetails: outputs.GetDatasciencePipelinesPipelineStepDetailStepInfrastructureConfigurationDetailShapeConfigDetail[];
    shapeName: string;
    subnetId: string;
}

export interface GetDatasciencePipelinesPipelineStepDetailStepInfrastructureConfigurationDetailShapeConfigDetail {
    memoryInGbs: number;
    ocpus: number;
}

export interface GetDatasciencePrivateEndpointsDataSciencePrivateEndpoint {
    compartmentId: string;
    createdBy: string;
    dataScienceResourceType: string;
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    fqdn: string;
    freeformTags: {[key: string]: string};
    id: string;
    lifecycleDetails: string;
    nsgIds: string[];
    state: string;
    subDomain: string;
    subnetId: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
}

export interface GetDatasciencePrivateEndpointsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatascienceProjectsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDatascienceProjectsProject {
    compartmentId: string;
    createdBy: string;
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
}

export interface GetDelegateAccessControlDelegatedResourceAccessRequestApprovalInfo {
    approvalAction: string;
    approvalType: string;
    approverAdditionalMessage: string;
    approverComment: string;
    approverId: string;
    timeApprovedForAccess: string;
}

export interface GetDelegateAccessControlDelegatedResourceAccessRequestHistoriesDelegatedResourceAccessRequestHistoryCollection {
    items: outputs.GetDelegateAccessControlDelegatedResourceAccessRequestHistoriesDelegatedResourceAccessRequestHistoryCollectionItem[];
}

export interface GetDelegateAccessControlDelegatedResourceAccessRequestHistoriesDelegatedResourceAccessRequestHistoryCollectionItem {
    comment: string;
    requestStatus: string;
    state: string;
    timestamp: string;
    userId: string;
}

export interface GetDelegateAccessControlDelegatedResourceAccessRequestHistoriesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDelegateAccessControlDelegatedResourceAccessRequestsDelegatedResourceAccessRequestSummaryCollection {
    items: outputs.GetDelegateAccessControlDelegatedResourceAccessRequestsDelegatedResourceAccessRequestSummaryCollectionItem[];
}

export interface GetDelegateAccessControlDelegatedResourceAccessRequestsDelegatedResourceAccessRequestSummaryCollectionItem {
    approvalInfos: outputs.GetDelegateAccessControlDelegatedResourceAccessRequestsDelegatedResourceAccessRequestSummaryCollectionItemApprovalInfo[];
    auditTypes: string[];
    closureComment: string;
    compartmentId: string;
    databaseNameLists: string[];
    definedTags: {[key: string]: string};
    delegationControlId: string;
    delegationSubscriptionIds: string[];
    description: string;
    displayName: string;
    durationInHours: number;
    extendDurationInHours: number;
    freeformTags: {[key: string]: string};
    id: string;
    isAutoApproved: boolean;
    isPendingMoreInfo: boolean;
    lifecycleStateDetails: string;
    numExtensionApprovals: number;
    numInitialApprovals: number;
    providedServiceTypes: string[];
    reasonForRequest: string;
    requestStatus: string;
    requestedActionNames: string[];
    requesterType: string;
    resourceId: string;
    resourceName: string;
    resourceType: string;
    severity: string;
    state: string;
    systemTags: {[key: string]: string};
    ticketNumbers: string[];
    timeAccessRequested: string;
    timeCreated: string;
    timeUpdated: string;
}

export interface GetDelegateAccessControlDelegatedResourceAccessRequestsDelegatedResourceAccessRequestSummaryCollectionItemApprovalInfo {
    approvalAction: string;
    approvalType: string;
    approverAdditionalMessage: string;
    approverComment: string;
    approverId: string;
    timeApprovedForAccess: string;
}

export interface GetDelegateAccessControlDelegatedResourceAccessRequestsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDelegateAccessControlDelegationControlResourcesDelegationControlResourceCollection {
    items: outputs.GetDelegateAccessControlDelegationControlResourcesDelegationControlResourceCollectionItem[];
}

export interface GetDelegateAccessControlDelegationControlResourcesDelegationControlResourceCollectionItem {
    id: string;
    resourceStatus: string;
}

export interface GetDelegateAccessControlDelegationControlResourcesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDelegateAccessControlDelegationControlsDelegationControlSummaryCollection {
    items: outputs.GetDelegateAccessControlDelegationControlsDelegationControlSummaryCollectionItem[];
}

export interface GetDelegateAccessControlDelegationControlsDelegationControlSummaryCollectionItem {
    compartmentId: string;
    definedTags: {[key: string]: string};
    delegationSubscriptionIds: string[];
    description: string;
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    isAutoApproveDuringMaintenance: boolean;
    lifecycleStateDetails: string;
    notificationMessageFormat: string;
    notificationTopicId: string;
    numApprovalsRequired: number;
    preApprovedServiceProviderActionNames: string[];
    resourceIds: string[];
    resourceType: string;
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeDeleted: string;
    timeUpdated: string;
    vaultId: string;
    vaultKeyId: string;
}

export interface GetDelegateAccessControlDelegationControlsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDelegateAccessControlDelegationSubscriptionsDelegationSubscriptionSummaryCollection {
    items: outputs.GetDelegateAccessControlDelegationSubscriptionsDelegationSubscriptionSummaryCollectionItem[];
}

export interface GetDelegateAccessControlDelegationSubscriptionsDelegationSubscriptionSummaryCollectionItem {
    compartmentId: string;
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    lifecycleStateDetails: string;
    serviceProviderId: string;
    state: string;
    subscribedServiceType: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
}

export interface GetDelegateAccessControlDelegationSubscriptionsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDelegateAccessControlServiceProviderActionProperty {
    name: string;
    value: string;
}

export interface GetDelegateAccessControlServiceProviderActionsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDelegateAccessControlServiceProviderActionsServiceProviderActionSummaryCollection {
    items: outputs.GetDelegateAccessControlServiceProviderActionsServiceProviderActionSummaryCollectionItem[];
}

export interface GetDelegateAccessControlServiceProviderActionsServiceProviderActionSummaryCollectionItem {
    component: string;
    customerDisplayName: string;
    description: string;
    id: string;
    name: string;
    properties: outputs.GetDelegateAccessControlServiceProviderActionsServiceProviderActionSummaryCollectionItemProperty[];
    resourceType: string;
    serviceProviderServiceTypes: string[];
    state: string;
}

export interface GetDelegateAccessControlServiceProviderActionsServiceProviderActionSummaryCollectionItemProperty {
    name: string;
    value: string;
}

export interface GetDelegateAccessControlServiceProvidersFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDelegateAccessControlServiceProvidersServiceProviderSummaryCollection {
    items: outputs.GetDelegateAccessControlServiceProvidersServiceProviderSummaryCollectionItem[];
}

export interface GetDelegateAccessControlServiceProvidersServiceProviderSummaryCollectionItem {
    compartmentId: string;
    definedTags: {[key: string]: string};
    description: string;
    freeformTags: {[key: string]: string};
    id: string;
    lifecycleStateDetails: string;
    name: string;
    serviceProviderType: string;
    serviceTypes: string[];
    state: string;
    supportedResourceTypes: string[];
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
}

export interface GetDemandSignalOccDemandSignalOccDemandSignal {
    resourceType: string;
    units: string;
    values: outputs.GetDemandSignalOccDemandSignalOccDemandSignalValue[];
}

export interface GetDemandSignalOccDemandSignalOccDemandSignalValue {
    comments: string;
    timeExpected: string;
    value: number;
}

export interface GetDemandSignalOccDemandSignalPatchOperation {
    from: string;
    operation: string;
    position: string;
    selectedItem: string;
    selection: string;
    value: {[key: string]: string};
}

export interface GetDemandSignalOccDemandSignalsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDemandSignalOccDemandSignalsOccDemandSignalCollection {
    items: outputs.GetDemandSignalOccDemandSignalsOccDemandSignalCollectionItem[];
}

export interface GetDemandSignalOccDemandSignalsOccDemandSignalCollectionItem {
    compartmentId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    isActive: boolean;
    lifecycleDetails: string;
    occDemandSignalId: string;
    occDemandSignals: outputs.GetDemandSignalOccDemandSignalsOccDemandSignalCollectionItemOccDemandSignal[];
    patchOperations: outputs.GetDemandSignalOccDemandSignalsOccDemandSignalCollectionItemPatchOperation[];
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
}

export interface GetDemandSignalOccDemandSignalsOccDemandSignalCollectionItemOccDemandSignal {
    resourceType: string;
    units: string;
    values: outputs.GetDemandSignalOccDemandSignalsOccDemandSignalCollectionItemOccDemandSignalValue[];
}

export interface GetDemandSignalOccDemandSignalsOccDemandSignalCollectionItemOccDemandSignalValue {
    comments: string;
    timeExpected: string;
    value: number;
}

export interface GetDemandSignalOccDemandSignalsOccDemandSignalCollectionItemPatchOperation {
    from: string;
    operation: string;
    position: string;
    selectedItem: string;
    selection: string;
    value: {[key: string]: string};
}

export interface GetDesktopsDesktopDevicePolicy {
    audioMode: string;
    cdmMode: string;
    clipboardMode: string;
    isDisplayEnabled: boolean;
    isKeyboardEnabled: boolean;
    isPointerEnabled: boolean;
    isPrintingEnabled: boolean;
}

export interface GetDesktopsDesktopHostingOption {
    connectAddress: string;
    images: outputs.GetDesktopsDesktopHostingOptionImage[];
}

export interface GetDesktopsDesktopHostingOptionImage {
    imageId: string;
    imageName: string;
}

export interface GetDesktopsDesktopPoolAvailabilityPolicy {
    startSchedules: outputs.GetDesktopsDesktopPoolAvailabilityPolicyStartSchedule[];
    stopSchedules: outputs.GetDesktopsDesktopPoolAvailabilityPolicyStopSchedule[];
}

export interface GetDesktopsDesktopPoolAvailabilityPolicyStartSchedule {
    cronExpression: string;
    timezone: string;
}

export interface GetDesktopsDesktopPoolAvailabilityPolicyStopSchedule {
    cronExpression: string;
    timezone: string;
}

export interface GetDesktopsDesktopPoolDesktopsDesktopPoolDesktopCollection {
    items: outputs.GetDesktopsDesktopPoolDesktopsDesktopPoolDesktopCollectionItem[];
}

export interface GetDesktopsDesktopPoolDesktopsDesktopPoolDesktopCollectionItem {
    definedTags: {[key: string]: string};
    desktopId: string;
    freeformTags: {[key: string]: string};
    instanceId: string;
    isAssigned: boolean;
    state: string;
    timeCreated: string;
    userName: string;
}

export interface GetDesktopsDesktopPoolDesktopsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDesktopsDesktopPoolDevicePolicy {
    audioMode: string;
    cdmMode: string;
    clipboardMode: string;
    isDisplayEnabled: boolean;
    isKeyboardEnabled: boolean;
    isPointerEnabled: boolean;
    isPrintingEnabled: boolean;
}

export interface GetDesktopsDesktopPoolImage {
    imageId: string;
    imageName: string;
}

export interface GetDesktopsDesktopPoolNetworkConfiguration {
    subnetId: string;
    vcnId: string;
}

export interface GetDesktopsDesktopPoolVolumesDesktopPoolVolumeCollection {
    items: outputs.GetDesktopsDesktopPoolVolumesDesktopPoolVolumeCollectionItem[];
}

export interface GetDesktopsDesktopPoolVolumesDesktopPoolVolumeCollectionItem {
    availabilityDomain: string;
    definedTags: {[key: string]: string};
    freeformTags: {[key: string]: string};
    id: string;
    name: string;
    poolId: string;
    state: string;
    userName: string;
}

export interface GetDesktopsDesktopPoolVolumesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDesktopsDesktopPoolsDesktopPoolCollection {
    items: outputs.GetDesktopsDesktopPoolsDesktopPoolCollectionItem[];
}

export interface GetDesktopsDesktopPoolsDesktopPoolCollectionItem {
    activeDesktops: number;
    arePrivilegedUsers: boolean;
    availabilityDomain: string;
    availabilityPolicies: outputs.GetDesktopsDesktopPoolsDesktopPoolCollectionItemAvailabilityPolicy[];
    compartmentId: string;
    contactDetails: string;
    definedTags: {[key: string]: string};
    description: string;
    devicePolicies: outputs.GetDesktopsDesktopPoolsDesktopPoolCollectionItemDevicePolicy[];
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    images: outputs.GetDesktopsDesktopPoolsDesktopPoolCollectionItemImage[];
    isStorageEnabled: boolean;
    maximumSize: number;
    networkConfigurations: outputs.GetDesktopsDesktopPoolsDesktopPoolCollectionItemNetworkConfiguration[];
    nsgIds: string[];
    shapeName: string;
    standbySize: number;
    state: string;
    storageBackupPolicyId: string;
    storageSizeInGbs: number;
    timeCreated: string;
    timeStartScheduled: string;
    timeStopScheduled: string;
}

export interface GetDesktopsDesktopPoolsDesktopPoolCollectionItemAvailabilityPolicy {
    startSchedules: outputs.GetDesktopsDesktopPoolsDesktopPoolCollectionItemAvailabilityPolicyStartSchedule[];
    stopSchedules: outputs.GetDesktopsDesktopPoolsDesktopPoolCollectionItemAvailabilityPolicyStopSchedule[];
}

export interface GetDesktopsDesktopPoolsDesktopPoolCollectionItemAvailabilityPolicyStartSchedule {
    cronExpression: string;
    timezone: string;
}

export interface GetDesktopsDesktopPoolsDesktopPoolCollectionItemAvailabilityPolicyStopSchedule {
    cronExpression: string;
    timezone: string;
}

export interface GetDesktopsDesktopPoolsDesktopPoolCollectionItemDevicePolicy {
    audioMode: string;
    cdmMode: string;
    clipboardMode: string;
    isDisplayEnabled: boolean;
    isKeyboardEnabled: boolean;
    isPointerEnabled: boolean;
    isPrintingEnabled: boolean;
}

export interface GetDesktopsDesktopPoolsDesktopPoolCollectionItemImage {
    imageId: string;
    imageName: string;
}

export interface GetDesktopsDesktopPoolsDesktopPoolCollectionItemNetworkConfiguration {
    subnetId: string;
    vcnId: string;
}

export interface GetDesktopsDesktopPoolsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDesktopsDesktopsDesktopCollection {
    items: outputs.GetDesktopsDesktopsDesktopCollectionItem[];
}

export interface GetDesktopsDesktopsDesktopCollectionItem {
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    poolId: string;
    state: string;
    timeCreated: string;
    userName: string;
}

export interface GetDesktopsDesktopsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDevopsBuildPipelineBuildPipelineParameter {
    items: outputs.GetDevopsBuildPipelineBuildPipelineParameterItem[];
}

export interface GetDevopsBuildPipelineBuildPipelineParameterItem {
    defaultValue: string;
    description: string;
    name: string;
}

export interface GetDevopsBuildPipelineStageBuildPipelineStagePredecessorCollection {
    items: outputs.GetDevopsBuildPipelineStageBuildPipelineStagePredecessorCollectionItem[];
}

export interface GetDevopsBuildPipelineStageBuildPipelineStagePredecessorCollectionItem {
    id: string;
}

export interface GetDevopsBuildPipelineStageBuildRunnerShapeConfig {
    buildRunnerType: string;
    memoryInGbs: number;
    ocpus: number;
}

export interface GetDevopsBuildPipelineStageBuildSourceCollection {
    items: outputs.GetDevopsBuildPipelineStageBuildSourceCollectionItem[];
}

export interface GetDevopsBuildPipelineStageBuildSourceCollectionItem {
    branch: string;
    connectionId: string;
    connectionType: string;
    name: string;
    repositoryId: string;
    repositoryUrl: string;
}

export interface GetDevopsBuildPipelineStageDeliverArtifactCollection {
    items: outputs.GetDevopsBuildPipelineStageDeliverArtifactCollectionItem[];
}

export interface GetDevopsBuildPipelineStageDeliverArtifactCollectionItem {
    artifactId: string;
    artifactName: string;
}

export interface GetDevopsBuildPipelineStagePrivateAccessConfig {
    networkChannelType: string;
    nsgIds: string[];
    subnetId: string;
}

export interface GetDevopsBuildPipelineStageWaitCriteria {
    waitDuration: string;
    waitType: string;
}

export interface GetDevopsBuildPipelineStagesBuildPipelineStageCollection {
    items: outputs.GetDevopsBuildPipelineStagesBuildPipelineStageCollectionItem[];
}

export interface GetDevopsBuildPipelineStagesBuildPipelineStageCollectionItem {
    buildPipelineId: string;
    buildPipelineStagePredecessorCollections: outputs.GetDevopsBuildPipelineStagesBuildPipelineStageCollectionItemBuildPipelineStagePredecessorCollection[];
    buildPipelineStageType: string;
    buildRunnerShapeConfigs: outputs.GetDevopsBuildPipelineStagesBuildPipelineStageCollectionItemBuildRunnerShapeConfig[];
    buildSourceCollections: outputs.GetDevopsBuildPipelineStagesBuildPipelineStageCollectionItemBuildSourceCollection[];
    buildSpecFile: string;
    compartmentId: string;
    connectionType: string;
    definedTags: {[key: string]: string};
    deliverArtifactCollections: outputs.GetDevopsBuildPipelineStagesBuildPipelineStageCollectionItemDeliverArtifactCollection[];
    deployPipelineId: string;
    description: string;
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    image: string;
    isPassAllParametersEnabled: boolean;
    lifecycleDetails: string;
    primaryBuildSource: string;
    privateAccessConfigs: outputs.GetDevopsBuildPipelineStagesBuildPipelineStageCollectionItemPrivateAccessConfig[];
    projectId: string;
    stageExecutionTimeoutInSeconds: number;
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
    waitCriterias: outputs.GetDevopsBuildPipelineStagesBuildPipelineStageCollectionItemWaitCriteria[];
}

export interface GetDevopsBuildPipelineStagesBuildPipelineStageCollectionItemBuildPipelineStagePredecessorCollection {
    items: outputs.GetDevopsBuildPipelineStagesBuildPipelineStageCollectionItemBuildPipelineStagePredecessorCollectionItem[];
}

export interface GetDevopsBuildPipelineStagesBuildPipelineStageCollectionItemBuildPipelineStagePredecessorCollectionItem {
    id: string;
}

export interface GetDevopsBuildPipelineStagesBuildPipelineStageCollectionItemBuildRunnerShapeConfig {
    buildRunnerType: string;
    memoryInGbs: number;
    ocpus: number;
}

export interface GetDevopsBuildPipelineStagesBuildPipelineStageCollectionItemBuildSourceCollection {
    items: outputs.GetDevopsBuildPipelineStagesBuildPipelineStageCollectionItemBuildSourceCollectionItem[];
}

export interface GetDevopsBuildPipelineStagesBuildPipelineStageCollectionItemBuildSourceCollectionItem {
    branch: string;
    connectionId: string;
    connectionType: string;
    name: string;
    repositoryId: string;
    repositoryUrl: string;
}

export interface GetDevopsBuildPipelineStagesBuildPipelineStageCollectionItemDeliverArtifactCollection {
    items: outputs.GetDevopsBuildPipelineStagesBuildPipelineStageCollectionItemDeliverArtifactCollectionItem[];
}

export interface GetDevopsBuildPipelineStagesBuildPipelineStageCollectionItemDeliverArtifactCollectionItem {
    artifactId: string;
    artifactName: string;
}

export interface GetDevopsBuildPipelineStagesBuildPipelineStageCollectionItemPrivateAccessConfig {
    networkChannelType: string;
    nsgIds: string[];
    subnetId: string;
}

export interface GetDevopsBuildPipelineStagesBuildPipelineStageCollectionItemWaitCriteria {
    waitDuration: string;
    waitType: string;
}

export interface GetDevopsBuildPipelineStagesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDevopsBuildPipelinesBuildPipelineCollection {
    items: outputs.GetDevopsBuildPipelinesBuildPipelineCollectionItem[];
}

export interface GetDevopsBuildPipelinesBuildPipelineCollectionItem {
    buildPipelineParameters: outputs.GetDevopsBuildPipelinesBuildPipelineCollectionItemBuildPipelineParameter[];
    compartmentId: string;
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    lifecycleDetails: string;
    projectId: string;
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
}

export interface GetDevopsBuildPipelinesBuildPipelineCollectionItemBuildPipelineParameter {
    items: outputs.GetDevopsBuildPipelinesBuildPipelineCollectionItemBuildPipelineParameterItem[];
}

export interface GetDevopsBuildPipelinesBuildPipelineCollectionItemBuildPipelineParameterItem {
    defaultValue: string;
    description: string;
    name: string;
}

export interface GetDevopsBuildPipelinesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDevopsBuildRunBuildOutput {
    artifactOverrideParameters: outputs.GetDevopsBuildRunBuildOutputArtifactOverrideParameter[];
    deliveredArtifacts: outputs.GetDevopsBuildRunBuildOutputDeliveredArtifact[];
    exportedVariables: outputs.GetDevopsBuildRunBuildOutputExportedVariable[];
    vulnerabilityAuditSummaryCollections: outputs.GetDevopsBuildRunBuildOutputVulnerabilityAuditSummaryCollection[];
}

export interface GetDevopsBuildRunBuildOutputArtifactOverrideParameter {
    items: outputs.GetDevopsBuildRunBuildOutputArtifactOverrideParameterItem[];
}

export interface GetDevopsBuildRunBuildOutputArtifactOverrideParameterItem {
    deployArtifactId: string;
    name: string;
    value: string;
}

export interface GetDevopsBuildRunBuildOutputDeliveredArtifact {
    items: outputs.GetDevopsBuildRunBuildOutputDeliveredArtifactItem[];
}

export interface GetDevopsBuildRunBuildOutputDeliveredArtifactItem {
    artifactRepositoryId: string;
    artifactType: string;
    deliveredArtifactHash: string;
    deliveredArtifactId: string;
    deployArtifactId: string;
    imageUri: string;
    outputArtifactName: string;
    path: string;
    version: string;
}

export interface GetDevopsBuildRunBuildOutputExportedVariable {
    items: outputs.GetDevopsBuildRunBuildOutputExportedVariableItem[];
}

export interface GetDevopsBuildRunBuildOutputExportedVariableItem {
    name: string;
    value: string;
}

export interface GetDevopsBuildRunBuildOutputVulnerabilityAuditSummaryCollection {
    items: outputs.GetDevopsBuildRunBuildOutputVulnerabilityAuditSummaryCollectionItem[];
}

export interface GetDevopsBuildRunBuildOutputVulnerabilityAuditSummaryCollectionItem {
    buildStageId: string;
    commitHash: string;
    vulnerabilityAuditId: string;
}

export interface GetDevopsBuildRunBuildRunArgument {
    items: outputs.GetDevopsBuildRunBuildRunArgumentItem[];
}

export interface GetDevopsBuildRunBuildRunArgumentItem {
    name: string;
    value: string;
}

export interface GetDevopsBuildRunBuildRunProgress {
    buildPipelineStageRunProgress: {[key: string]: string};
    timeFinished: string;
    timeStarted: string;
}

export interface GetDevopsBuildRunBuildRunSource {
    repositoryId: string;
    sourceType: string;
    triggerId: string;
    triggerInfos: outputs.GetDevopsBuildRunBuildRunSourceTriggerInfo[];
}

export interface GetDevopsBuildRunBuildRunSourceTriggerInfo {
    actions: outputs.GetDevopsBuildRunBuildRunSourceTriggerInfoAction[];
    displayName: string;
}

export interface GetDevopsBuildRunBuildRunSourceTriggerInfoAction {
    buildPipelineId: string;
    filters: outputs.GetDevopsBuildRunBuildRunSourceTriggerInfoActionFilter[];
    type: string;
}

export interface GetDevopsBuildRunBuildRunSourceTriggerInfoActionFilter {
    events: string[];
    excludes: outputs.GetDevopsBuildRunBuildRunSourceTriggerInfoActionFilterExclude[];
    includes: outputs.GetDevopsBuildRunBuildRunSourceTriggerInfoActionFilterInclude[];
    triggerSource: string;
}

export interface GetDevopsBuildRunBuildRunSourceTriggerInfoActionFilterExclude {
    fileFilters: outputs.GetDevopsBuildRunBuildRunSourceTriggerInfoActionFilterExcludeFileFilter[];
}

export interface GetDevopsBuildRunBuildRunSourceTriggerInfoActionFilterExcludeFileFilter {
    filePaths: string[];
}

export interface GetDevopsBuildRunBuildRunSourceTriggerInfoActionFilterInclude {
    baseRef: string;
    fileFilters: outputs.GetDevopsBuildRunBuildRunSourceTriggerInfoActionFilterIncludeFileFilter[];
    headRef: string;
    repositoryName: string;
}

export interface GetDevopsBuildRunBuildRunSourceTriggerInfoActionFilterIncludeFileFilter {
    filePaths: string[];
}

export interface GetDevopsBuildRunCommitInfo {
    commitHash: string;
    repositoryBranch: string;
    repositoryUrl: string;
}

export interface GetDevopsBuildRunsBuildRunSummaryCollection {
    items: outputs.GetDevopsBuildRunsBuildRunSummaryCollectionItem[];
}

export interface GetDevopsBuildRunsBuildRunSummaryCollectionItem {
    buildPipelineId: string;
    buildRunArguments: outputs.GetDevopsBuildRunsBuildRunSummaryCollectionItemBuildRunArgument[];
    buildRunProgressSummaries: outputs.GetDevopsBuildRunsBuildRunSummaryCollectionItemBuildRunProgressSummary[];
    buildRunSources: outputs.GetDevopsBuildRunsBuildRunSummaryCollectionItemBuildRunSource[];
    commitInfos: outputs.GetDevopsBuildRunsBuildRunSummaryCollectionItemCommitInfo[];
    compartmentId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    lifecycleDetails: string;
    projectId: string;
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
}

export interface GetDevopsBuildRunsBuildRunSummaryCollectionItemBuildRunArgument {
    items: outputs.GetDevopsBuildRunsBuildRunSummaryCollectionItemBuildRunArgumentItem[];
}

export interface GetDevopsBuildRunsBuildRunSummaryCollectionItemBuildRunArgumentItem {
    name: string;
    value: string;
}

export interface GetDevopsBuildRunsBuildRunSummaryCollectionItemBuildRunProgressSummary {
    timeFinished: string;
    timeStarted: string;
}

export interface GetDevopsBuildRunsBuildRunSummaryCollectionItemBuildRunSource {
    repositoryId: string;
    sourceType: string;
    triggerInfos: outputs.GetDevopsBuildRunsBuildRunSummaryCollectionItemBuildRunSourceTriggerInfo[];
}

export interface GetDevopsBuildRunsBuildRunSummaryCollectionItemBuildRunSourceTriggerInfo {
    actions: outputs.GetDevopsBuildRunsBuildRunSummaryCollectionItemBuildRunSourceTriggerInfoAction[];
    displayName: string;
    triggerId: string;
}

export interface GetDevopsBuildRunsBuildRunSummaryCollectionItemBuildRunSourceTriggerInfoAction {
    buildPipelineId: string;
    filters: outputs.GetDevopsBuildRunsBuildRunSummaryCollectionItemBuildRunSourceTriggerInfoActionFilter[];
    type: string;
}

export interface GetDevopsBuildRunsBuildRunSummaryCollectionItemBuildRunSourceTriggerInfoActionFilter {
    events: string[];
    includes: outputs.GetDevopsBuildRunsBuildRunSummaryCollectionItemBuildRunSourceTriggerInfoActionFilterInclude[];
    triggerSource: string;
}

export interface GetDevopsBuildRunsBuildRunSummaryCollectionItemBuildRunSourceTriggerInfoActionFilterInclude {
    baseRef: string;
    headRef: string;
}

export interface GetDevopsBuildRunsBuildRunSummaryCollectionItemCommitInfo {
    commitHash: string;
    repositoryBranch: string;
    repositoryUrl: string;
}

export interface GetDevopsBuildRunsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDevopsConnectionLastConnectionValidationResult {
    message: string;
    result: string;
    timeValidated: string;
}

export interface GetDevopsConnectionTlsVerifyConfig {
    caCertificateBundleId: string;
    tlsVerifyMode: string;
}

export interface GetDevopsConnectionsConnectionCollection {
    items: outputs.GetDevopsConnectionsConnectionCollectionItem[];
}

export interface GetDevopsConnectionsConnectionCollectionItem {
    accessToken: string;
    appPassword: string;
    baseUrl: string;
    compartmentId: string;
    connectionType: string;
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    lastConnectionValidationResults: outputs.GetDevopsConnectionsConnectionCollectionItemLastConnectionValidationResult[];
    projectId: string;
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
    tlsVerifyConfigs: outputs.GetDevopsConnectionsConnectionCollectionItemTlsVerifyConfig[];
    username: string;
}

export interface GetDevopsConnectionsConnectionCollectionItemLastConnectionValidationResult {
    message: string;
    result: string;
    timeValidated: string;
}

export interface GetDevopsConnectionsConnectionCollectionItemTlsVerifyConfig {
    caCertificateBundleId: string;
    tlsVerifyMode: string;
}

export interface GetDevopsConnectionsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDevopsDeployArtifactDeployArtifactSource {
    base64encodedContent: string;
    chartUrl: string;
    deployArtifactPath: string;
    deployArtifactSourceType: string;
    deployArtifactVersion: string;
    helmArtifactSourceType: string;
    helmVerificationKeySources: outputs.GetDevopsDeployArtifactDeployArtifactSourceHelmVerificationKeySource[];
    imageDigest: string;
    imageUri: string;
    repositoryId: string;
}

export interface GetDevopsDeployArtifactDeployArtifactSourceHelmVerificationKeySource {
    currentPublicKey: string;
    previousPublicKey: string;
    vaultSecretId: string;
    verificationKeySourceType: string;
}

export interface GetDevopsDeployArtifactsDeployArtifactCollection {
    items: outputs.GetDevopsDeployArtifactsDeployArtifactCollectionItem[];
}

export interface GetDevopsDeployArtifactsDeployArtifactCollectionItem {
    argumentSubstitutionMode: string;
    compartmentId: string;
    definedTags: {[key: string]: string};
    deployArtifactSources: outputs.GetDevopsDeployArtifactsDeployArtifactCollectionItemDeployArtifactSource[];
    deployArtifactType: string;
    description: string;
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    lifecycleDetails: string;
    projectId: string;
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
}

export interface GetDevopsDeployArtifactsDeployArtifactCollectionItemDeployArtifactSource {
    base64encodedContent: string;
    chartUrl: string;
    deployArtifactPath: string;
    deployArtifactSourceType: string;
    deployArtifactVersion: string;
    helmArtifactSourceType: string;
    helmVerificationKeySources: outputs.GetDevopsDeployArtifactsDeployArtifactCollectionItemDeployArtifactSourceHelmVerificationKeySource[];
    imageDigest: string;
    imageUri: string;
    repositoryId: string;
}

export interface GetDevopsDeployArtifactsDeployArtifactCollectionItemDeployArtifactSourceHelmVerificationKeySource {
    currentPublicKey: string;
    previousPublicKey: string;
    vaultSecretId: string;
    verificationKeySourceType: string;
}

export interface GetDevopsDeployArtifactsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDevopsDeployEnvironmentComputeInstanceGroupSelector {
    items: outputs.GetDevopsDeployEnvironmentComputeInstanceGroupSelectorItem[];
}

export interface GetDevopsDeployEnvironmentComputeInstanceGroupSelectorItem {
    computeInstanceIds: string[];
    query: string;
    region: string;
    selectorType: string;
}

export interface GetDevopsDeployEnvironmentNetworkChannel {
    networkChannelType: string;
    nsgIds: string[];
    subnetId: string;
}

export interface GetDevopsDeployEnvironmentsDeployEnvironmentCollection {
    items: outputs.GetDevopsDeployEnvironmentsDeployEnvironmentCollectionItem[];
}

export interface GetDevopsDeployEnvironmentsDeployEnvironmentCollectionItem {
    clusterId: string;
    compartmentId: string;
    computeInstanceGroupSelectors: outputs.GetDevopsDeployEnvironmentsDeployEnvironmentCollectionItemComputeInstanceGroupSelector[];
    definedTags: {[key: string]: string};
    deployEnvironmentType: string;
    description: string;
    displayName: string;
    freeformTags: {[key: string]: string};
    functionId: string;
    id: string;
    lifecycleDetails: string;
    networkChannels: outputs.GetDevopsDeployEnvironmentsDeployEnvironmentCollectionItemNetworkChannel[];
    projectId: string;
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
}

export interface GetDevopsDeployEnvironmentsDeployEnvironmentCollectionItemComputeInstanceGroupSelector {
    items: outputs.GetDevopsDeployEnvironmentsDeployEnvironmentCollectionItemComputeInstanceGroupSelectorItem[];
}

export interface GetDevopsDeployEnvironmentsDeployEnvironmentCollectionItemComputeInstanceGroupSelectorItem {
    computeInstanceIds: string[];
    query: string;
    region: string;
    selectorType: string;
}

export interface GetDevopsDeployEnvironmentsDeployEnvironmentCollectionItemNetworkChannel {
    networkChannelType: string;
    nsgIds: string[];
    subnetId: string;
}

export interface GetDevopsDeployEnvironmentsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDevopsDeployPipelineDeployPipelineArtifact {
    items: outputs.GetDevopsDeployPipelineDeployPipelineArtifactItem[];
}

export interface GetDevopsDeployPipelineDeployPipelineArtifactItem {
    deployArtifactId: string;
    deployPipelineStages: outputs.GetDevopsDeployPipelineDeployPipelineArtifactItemDeployPipelineStage[];
    displayName: string;
}

export interface GetDevopsDeployPipelineDeployPipelineArtifactItemDeployPipelineStage {
    items: outputs.GetDevopsDeployPipelineDeployPipelineArtifactItemDeployPipelineStageItem[];
}

export interface GetDevopsDeployPipelineDeployPipelineArtifactItemDeployPipelineStageItem {
    deployStageId: string;
    displayName: string;
}

export interface GetDevopsDeployPipelineDeployPipelineEnvironment {
    items: outputs.GetDevopsDeployPipelineDeployPipelineEnvironmentItem[];
}

export interface GetDevopsDeployPipelineDeployPipelineEnvironmentItem {
    deployEnvironmentId: string;
    deployPipelineStages: outputs.GetDevopsDeployPipelineDeployPipelineEnvironmentItemDeployPipelineStage[];
    displayName: string;
}

export interface GetDevopsDeployPipelineDeployPipelineEnvironmentItemDeployPipelineStage {
    items: outputs.GetDevopsDeployPipelineDeployPipelineEnvironmentItemDeployPipelineStageItem[];
}

export interface GetDevopsDeployPipelineDeployPipelineEnvironmentItemDeployPipelineStageItem {
    deployStageId: string;
    displayName: string;
}

export interface GetDevopsDeployPipelineDeployPipelineParameter {
    items: outputs.GetDevopsDeployPipelineDeployPipelineParameterItem[];
}

export interface GetDevopsDeployPipelineDeployPipelineParameterItem {
    defaultValue: string;
    description: string;
    name: string;
}

export interface GetDevopsDeployPipelinesDeployPipelineCollection {
    items: outputs.GetDevopsDeployPipelinesDeployPipelineCollectionItem[];
}

export interface GetDevopsDeployPipelinesDeployPipelineCollectionItem {
    compartmentId: string;
    definedTags: {[key: string]: string};
    deployPipelineArtifacts: outputs.GetDevopsDeployPipelinesDeployPipelineCollectionItemDeployPipelineArtifact[];
    deployPipelineEnvironments: outputs.GetDevopsDeployPipelinesDeployPipelineCollectionItemDeployPipelineEnvironment[];
    deployPipelineParameters: outputs.GetDevopsDeployPipelinesDeployPipelineCollectionItemDeployPipelineParameter[];
    description: string;
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    lifecycleDetails: string;
    projectId: string;
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
}

export interface GetDevopsDeployPipelinesDeployPipelineCollectionItemDeployPipelineArtifact {
    items: outputs.GetDevopsDeployPipelinesDeployPipelineCollectionItemDeployPipelineArtifactItem[];
}

export interface GetDevopsDeployPipelinesDeployPipelineCollectionItemDeployPipelineArtifactItem {
    deployArtifactId: string;
    deployPipelineStages: outputs.GetDevopsDeployPipelinesDeployPipelineCollectionItemDeployPipelineArtifactItemDeployPipelineStage[];
    displayName: string;
}

export interface GetDevopsDeployPipelinesDeployPipelineCollectionItemDeployPipelineArtifactItemDeployPipelineStage {
    items: outputs.GetDevopsDeployPipelinesDeployPipelineCollectionItemDeployPipelineArtifactItemDeployPipelineStageItem[];
}

export interface GetDevopsDeployPipelinesDeployPipelineCollectionItemDeployPipelineArtifactItemDeployPipelineStageItem {
    deployStageId: string;
    displayName: string;
}

export interface GetDevopsDeployPipelinesDeployPipelineCollectionItemDeployPipelineEnvironment {
    items: outputs.GetDevopsDeployPipelinesDeployPipelineCollectionItemDeployPipelineEnvironmentItem[];
}

export interface GetDevopsDeployPipelinesDeployPipelineCollectionItemDeployPipelineEnvironmentItem {
    deployEnvironmentId: string;
    deployPipelineStages: outputs.GetDevopsDeployPipelinesDeployPipelineCollectionItemDeployPipelineEnvironmentItemDeployPipelineStage[];
    displayName: string;
}

export interface GetDevopsDeployPipelinesDeployPipelineCollectionItemDeployPipelineEnvironmentItemDeployPipelineStage {
    items: outputs.GetDevopsDeployPipelinesDeployPipelineCollectionItemDeployPipelineEnvironmentItemDeployPipelineStageItem[];
}

export interface GetDevopsDeployPipelinesDeployPipelineCollectionItemDeployPipelineEnvironmentItemDeployPipelineStageItem {
    deployStageId: string;
    displayName: string;
}

export interface GetDevopsDeployPipelinesDeployPipelineCollectionItemDeployPipelineParameter {
    items: outputs.GetDevopsDeployPipelinesDeployPipelineCollectionItemDeployPipelineParameterItem[];
}

export interface GetDevopsDeployPipelinesDeployPipelineCollectionItemDeployPipelineParameterItem {
    defaultValue: string;
    description: string;
    name: string;
}

export interface GetDevopsDeployPipelinesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDevopsDeployStageApprovalPolicy {
    approvalPolicyType: string;
    numberOfApprovalsRequired: number;
}

export interface GetDevopsDeployStageBlueBackendIp {
    items: string[];
}

export interface GetDevopsDeployStageBlueGreenStrategy {
    ingressName: string;
    namespaceA: string;
    namespaceB: string;
    strategyType: string;
}

export interface GetDevopsDeployStageCanaryStrategy {
    ingressName: string;
    namespace: string;
    strategyType: string;
}

export interface GetDevopsDeployStageContainerConfig {
    availabilityDomain: string;
    compartmentId: string;
    containerConfigType: string;
    networkChannels: outputs.GetDevopsDeployStageContainerConfigNetworkChannel[];
    shapeConfigs: outputs.GetDevopsDeployStageContainerConfigShapeConfig[];
    shapeName: string;
}

export interface GetDevopsDeployStageContainerConfigNetworkChannel {
    networkChannelType: string;
    nsgIds: string[];
    subnetId: string;
}

export interface GetDevopsDeployStageContainerConfigShapeConfig {
    memoryInGbs: number;
    ocpus: number;
}

export interface GetDevopsDeployStageDeployStagePredecessorCollection {
    items: outputs.GetDevopsDeployStageDeployStagePredecessorCollectionItem[];
}

export interface GetDevopsDeployStageDeployStagePredecessorCollectionItem {
    id: string;
}

export interface GetDevopsDeployStageFailurePolicy {
    failureCount: number;
    failurePercentage: number;
    policyType: string;
}

export interface GetDevopsDeployStageGreenBackendIp {
    items: string[];
}

export interface GetDevopsDeployStageLoadBalancerConfig {
    backendPort: number;
    listenerName: string;
    loadBalancerId: string;
    state: string;
}

export interface GetDevopsDeployStageProductionLoadBalancerConfig {
    backendPort: number;
    listenerName: string;
    loadBalancerId: string;
    state: string;
}

export interface GetDevopsDeployStageRollbackPolicy {
    policyType: string;
}

export interface GetDevopsDeployStageRolloutPolicy {
    batchCount: number;
    batchDelayInSeconds: number;
    batchPercentage: number;
    policyType: string;
    rampLimitPercent: number;
}

export interface GetDevopsDeployStageSetString {
    items: outputs.GetDevopsDeployStageSetStringItem[];
}

export interface GetDevopsDeployStageSetStringItem {
    name: string;
    value: string;
}

export interface GetDevopsDeployStageSetValue {
    items: outputs.GetDevopsDeployStageSetValueItem[];
}

export interface GetDevopsDeployStageSetValueItem {
    name: string;
    value: string;
}

export interface GetDevopsDeployStageTestLoadBalancerConfig {
    backendPort: number;
    listenerName: string;
    loadBalancerId: string;
    state: string;
}

export interface GetDevopsDeployStageWaitCriteria {
    waitDuration: string;
    waitType: string;
}

export interface GetDevopsDeployStagesDeployStageCollection {
    items: outputs.GetDevopsDeployStagesDeployStageCollectionItem[];
}

export interface GetDevopsDeployStagesDeployStageCollectionItem {
    approvalPolicies: outputs.GetDevopsDeployStagesDeployStageCollectionItemApprovalPolicy[];
    areHooksEnabled: boolean;
    blueBackendIps: outputs.GetDevopsDeployStagesDeployStageCollectionItemBlueBackendIp[];
    blueGreenStrategies: outputs.GetDevopsDeployStagesDeployStageCollectionItemBlueGreenStrategy[];
    canaryStrategies: outputs.GetDevopsDeployStagesDeployStageCollectionItemCanaryStrategy[];
    commandSpecDeployArtifactId: string;
    compartmentId: string;
    computeInstanceGroupBlueGreenDeploymentDeployStageId: string;
    computeInstanceGroupCanaryDeployStageId: string;
    computeInstanceGroupCanaryTrafficShiftDeployStageId: string;
    computeInstanceGroupDeployEnvironmentId: string;
    config: {[key: string]: string};
    containerConfigs: outputs.GetDevopsDeployStagesDeployStageCollectionItemContainerConfig[];
    definedTags: {[key: string]: string};
    deployArtifactId: string;
    deployArtifactIds: string[];
    deployEnvironmentIdA: string;
    deployEnvironmentIdB: string;
    deployPipelineId: string;
    deployStagePredecessorCollections: outputs.GetDevopsDeployStagesDeployStageCollectionItemDeployStagePredecessorCollection[];
    deployStageType: string;
    deploymentSpecDeployArtifactId: string;
    description: string;
    displayName: string;
    dockerImageDeployArtifactId: string;
    failurePolicies: outputs.GetDevopsDeployStagesDeployStageCollectionItemFailurePolicy[];
    freeformTags: {[key: string]: string};
    functionDeployEnvironmentId: string;
    functionTimeoutInSeconds: number;
    greenBackendIps: outputs.GetDevopsDeployStagesDeployStageCollectionItemGreenBackendIp[];
    helmChartDeployArtifactId: string;
    helmCommandArtifactIds: string[];
    id: string;
    isAsync: boolean;
    isDebugEnabled: boolean;
    isForceEnabled: boolean;
    isUninstallOnStageDelete: boolean;
    isValidationEnabled: boolean;
    kubernetesManifestDeployArtifactIds: string[];
    lifecycleDetails: string;
    loadBalancerConfigs: outputs.GetDevopsDeployStagesDeployStageCollectionItemLoadBalancerConfig[];
    maxHistory: number;
    maxMemoryInMbs: string;
    namespace: string;
    okeBlueGreenDeployStageId: string;
    okeCanaryDeployStageId: string;
    okeCanaryTrafficShiftDeployStageId: string;
    okeClusterDeployEnvironmentId: string;
    productionLoadBalancerConfigs: outputs.GetDevopsDeployStagesDeployStageCollectionItemProductionLoadBalancerConfig[];
    projectId: string;
    purpose: string;
    releaseName: string;
    rollbackPolicies: outputs.GetDevopsDeployStagesDeployStageCollectionItemRollbackPolicy[];
    rolloutPolicies: outputs.GetDevopsDeployStagesDeployStageCollectionItemRolloutPolicy[];
    setStrings: outputs.GetDevopsDeployStagesDeployStageCollectionItemSetString[];
    setValues: outputs.GetDevopsDeployStagesDeployStageCollectionItemSetValue[];
    shouldCleanupOnFail: boolean;
    shouldNotWait: boolean;
    shouldResetValues: boolean;
    shouldReuseValues: boolean;
    shouldSkipCrds: boolean;
    shouldSkipRenderSubchartNotes: boolean;
    state: string;
    systemTags: {[key: string]: string};
    testLoadBalancerConfigs: outputs.GetDevopsDeployStagesDeployStageCollectionItemTestLoadBalancerConfig[];
    timeCreated: string;
    timeUpdated: string;
    timeoutInSeconds: number;
    trafficShiftTarget: string;
    valuesArtifactIds: string[];
    waitCriterias: outputs.GetDevopsDeployStagesDeployStageCollectionItemWaitCriteria[];
}

export interface GetDevopsDeployStagesDeployStageCollectionItemApprovalPolicy {
    approvalPolicyType: string;
    numberOfApprovalsRequired: number;
}

export interface GetDevopsDeployStagesDeployStageCollectionItemBlueBackendIp {
    items: string[];
}

export interface GetDevopsDeployStagesDeployStageCollectionItemBlueGreenStrategy {
    ingressName: string;
    namespaceA: string;
    namespaceB: string;
    strategyType: string;
}

export interface GetDevopsDeployStagesDeployStageCollectionItemCanaryStrategy {
    ingressName: string;
    namespace: string;
    strategyType: string;
}

export interface GetDevopsDeployStagesDeployStageCollectionItemContainerConfig {
    availabilityDomain: string;
    compartmentId: string;
    containerConfigType: string;
    networkChannels: outputs.GetDevopsDeployStagesDeployStageCollectionItemContainerConfigNetworkChannel[];
    shapeConfigs: outputs.GetDevopsDeployStagesDeployStageCollectionItemContainerConfigShapeConfig[];
    shapeName: string;
}

export interface GetDevopsDeployStagesDeployStageCollectionItemContainerConfigNetworkChannel {
    networkChannelType: string;
    nsgIds: string[];
    subnetId: string;
}

export interface GetDevopsDeployStagesDeployStageCollectionItemContainerConfigShapeConfig {
    memoryInGbs: number;
    ocpus: number;
}

export interface GetDevopsDeployStagesDeployStageCollectionItemDeployStagePredecessorCollection {
    items: outputs.GetDevopsDeployStagesDeployStageCollectionItemDeployStagePredecessorCollectionItem[];
}

export interface GetDevopsDeployStagesDeployStageCollectionItemDeployStagePredecessorCollectionItem {
    id: string;
}

export interface GetDevopsDeployStagesDeployStageCollectionItemFailurePolicy {
    failureCount: number;
    failurePercentage: number;
    policyType: string;
}

export interface GetDevopsDeployStagesDeployStageCollectionItemGreenBackendIp {
    items: string[];
}

export interface GetDevopsDeployStagesDeployStageCollectionItemLoadBalancerConfig {
    backendPort: number;
    listenerName: string;
    loadBalancerId: string;
    state: string;
}

export interface GetDevopsDeployStagesDeployStageCollectionItemProductionLoadBalancerConfig {
    backendPort: number;
    listenerName: string;
    loadBalancerId: string;
    state: string;
}

export interface GetDevopsDeployStagesDeployStageCollectionItemRollbackPolicy {
    policyType: string;
}

export interface GetDevopsDeployStagesDeployStageCollectionItemRolloutPolicy {
    batchCount: number;
    batchDelayInSeconds: number;
    batchPercentage: number;
    policyType: string;
    rampLimitPercent: number;
}

export interface GetDevopsDeployStagesDeployStageCollectionItemSetString {
    items: outputs.GetDevopsDeployStagesDeployStageCollectionItemSetStringItem[];
}

export interface GetDevopsDeployStagesDeployStageCollectionItemSetStringItem {
    name: string;
    value: string;
}

export interface GetDevopsDeployStagesDeployStageCollectionItemSetValue {
    items: outputs.GetDevopsDeployStagesDeployStageCollectionItemSetValueItem[];
}

export interface GetDevopsDeployStagesDeployStageCollectionItemSetValueItem {
    name: string;
    value: string;
}

export interface GetDevopsDeployStagesDeployStageCollectionItemTestLoadBalancerConfig {
    backendPort: number;
    listenerName: string;
    loadBalancerId: string;
    state: string;
}

export interface GetDevopsDeployStagesDeployStageCollectionItemWaitCriteria {
    waitDuration: string;
    waitType: string;
}

export interface GetDevopsDeployStagesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDevopsDeploymentDeployArtifactOverrideArgument {
    items: outputs.GetDevopsDeploymentDeployArtifactOverrideArgumentItem[];
}

export interface GetDevopsDeploymentDeployArtifactOverrideArgumentItem {
    deployArtifactId: string;
    name: string;
    value: string;
}

export interface GetDevopsDeploymentDeployPipelineArtifact {
    items: outputs.GetDevopsDeploymentDeployPipelineArtifactItem[];
}

export interface GetDevopsDeploymentDeployPipelineArtifactItem {
    deployArtifactId: string;
    deployPipelineStages: outputs.GetDevopsDeploymentDeployPipelineArtifactItemDeployPipelineStage[];
    displayName: string;
}

export interface GetDevopsDeploymentDeployPipelineArtifactItemDeployPipelineStage {
    items: outputs.GetDevopsDeploymentDeployPipelineArtifactItemDeployPipelineStageItem[];
}

export interface GetDevopsDeploymentDeployPipelineArtifactItemDeployPipelineStageItem {
    deployStageId: string;
    displayName: string;
}

export interface GetDevopsDeploymentDeployPipelineEnvironment {
    items: outputs.GetDevopsDeploymentDeployPipelineEnvironmentItem[];
}

export interface GetDevopsDeploymentDeployPipelineEnvironmentItem {
    deployEnvironmentId: string;
    deployPipelineStages: outputs.GetDevopsDeploymentDeployPipelineEnvironmentItemDeployPipelineStage[];
    displayName: string;
}

export interface GetDevopsDeploymentDeployPipelineEnvironmentItemDeployPipelineStage {
    items: outputs.GetDevopsDeploymentDeployPipelineEnvironmentItemDeployPipelineStageItem[];
}

export interface GetDevopsDeploymentDeployPipelineEnvironmentItemDeployPipelineStageItem {
    deployStageId: string;
    displayName: string;
}

export interface GetDevopsDeploymentDeployStageOverrideArgument {
    items: outputs.GetDevopsDeploymentDeployStageOverrideArgumentItem[];
}

export interface GetDevopsDeploymentDeployStageOverrideArgumentItem {
    deployStageId: string;
    name: string;
    value: string;
}

export interface GetDevopsDeploymentDeploymentArgument {
    items: outputs.GetDevopsDeploymentDeploymentArgumentItem[];
}

export interface GetDevopsDeploymentDeploymentArgumentItem {
    name: string;
    value: string;
}

export interface GetDevopsDeploymentDeploymentExecutionProgress {
    deployStageExecutionProgress: {[key: string]: string};
    timeFinished: string;
    timeStarted: string;
}

export interface GetDevopsDeploymentsDeploymentCollection {
    items: outputs.GetDevopsDeploymentsDeploymentCollectionItem[];
}

export interface GetDevopsDeploymentsDeploymentCollectionItem {
    compartmentId: string;
    definedTags: {[key: string]: string};
    deployArtifactOverrideArguments: outputs.GetDevopsDeploymentsDeploymentCollectionItemDeployArtifactOverrideArgument[];
    deployPipelineArtifacts: outputs.GetDevopsDeploymentsDeploymentCollectionItemDeployPipelineArtifact[];
    deployPipelineEnvironments: outputs.GetDevopsDeploymentsDeploymentCollectionItemDeployPipelineEnvironment[];
    deployPipelineId: string;
    deployStageId: string;
    deployStageOverrideArguments: outputs.GetDevopsDeploymentsDeploymentCollectionItemDeployStageOverrideArgument[];
    deploymentArguments: outputs.GetDevopsDeploymentsDeploymentCollectionItemDeploymentArgument[];
    deploymentExecutionProgresses: outputs.GetDevopsDeploymentsDeploymentCollectionItemDeploymentExecutionProgress[];
    deploymentType: string;
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    lifecycleDetails: string;
    previousDeploymentId: string;
    projectId: string;
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
    triggerNewDevopsDeployment: boolean;
}

export interface GetDevopsDeploymentsDeploymentCollectionItemDeployArtifactOverrideArgument {
    items: outputs.GetDevopsDeploymentsDeploymentCollectionItemDeployArtifactOverrideArgumentItem[];
}

export interface GetDevopsDeploymentsDeploymentCollectionItemDeployArtifactOverrideArgumentItem {
    deployArtifactId: string;
    name: string;
    value: string;
}

export interface GetDevopsDeploymentsDeploymentCollectionItemDeployPipelineArtifact {
    items: outputs.GetDevopsDeploymentsDeploymentCollectionItemDeployPipelineArtifactItem[];
}

export interface GetDevopsDeploymentsDeploymentCollectionItemDeployPipelineArtifactItem {
    deployArtifactId: string;
    deployPipelineStages: outputs.GetDevopsDeploymentsDeploymentCollectionItemDeployPipelineArtifactItemDeployPipelineStage[];
    displayName: string;
}

export interface GetDevopsDeploymentsDeploymentCollectionItemDeployPipelineArtifactItemDeployPipelineStage {
    items: outputs.GetDevopsDeploymentsDeploymentCollectionItemDeployPipelineArtifactItemDeployPipelineStageItem[];
}

export interface GetDevopsDeploymentsDeploymentCollectionItemDeployPipelineArtifactItemDeployPipelineStageItem {
    deployStageId: string;
    displayName: string;
}

export interface GetDevopsDeploymentsDeploymentCollectionItemDeployPipelineEnvironment {
    items: outputs.GetDevopsDeploymentsDeploymentCollectionItemDeployPipelineEnvironmentItem[];
}

export interface GetDevopsDeploymentsDeploymentCollectionItemDeployPipelineEnvironmentItem {
    deployEnvironmentId: string;
    deployPipelineStages: outputs.GetDevopsDeploymentsDeploymentCollectionItemDeployPipelineEnvironmentItemDeployPipelineStage[];
    displayName: string;
}

export interface GetDevopsDeploymentsDeploymentCollectionItemDeployPipelineEnvironmentItemDeployPipelineStage {
    items: outputs.GetDevopsDeploymentsDeploymentCollectionItemDeployPipelineEnvironmentItemDeployPipelineStageItem[];
}

export interface GetDevopsDeploymentsDeploymentCollectionItemDeployPipelineEnvironmentItemDeployPipelineStageItem {
    deployStageId: string;
    displayName: string;
}

export interface GetDevopsDeploymentsDeploymentCollectionItemDeployStageOverrideArgument {
    items: outputs.GetDevopsDeploymentsDeploymentCollectionItemDeployStageOverrideArgumentItem[];
}

export interface GetDevopsDeploymentsDeploymentCollectionItemDeployStageOverrideArgumentItem {
    deployStageId: string;
    name: string;
    value: string;
}

export interface GetDevopsDeploymentsDeploymentCollectionItemDeploymentArgument {
    items: outputs.GetDevopsDeploymentsDeploymentCollectionItemDeploymentArgumentItem[];
}

export interface GetDevopsDeploymentsDeploymentCollectionItemDeploymentArgumentItem {
    name: string;
    value: string;
}

export interface GetDevopsDeploymentsDeploymentCollectionItemDeploymentExecutionProgress {
    deployStageExecutionProgress: {[key: string]: string};
    timeFinished: string;
    timeStarted: string;
}

export interface GetDevopsDeploymentsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDevopsProjectNotificationConfig {
    topicId: string;
}

export interface GetDevopsProjectRepositorySettingApprovalRule {
    items: outputs.GetDevopsProjectRepositorySettingApprovalRuleItem[];
}

export interface GetDevopsProjectRepositorySettingApprovalRuleItem {
    destinationBranch: string;
    minApprovalsCount: number;
    name: string;
    reviewers: outputs.GetDevopsProjectRepositorySettingApprovalRuleItemReviewer[];
}

export interface GetDevopsProjectRepositorySettingApprovalRuleItemReviewer {
    principalId: string;
    principalName: string;
    principalState: string;
    principalType: string;
}

export interface GetDevopsProjectRepositorySettingMergeSetting {
    allowedMergeStrategies: string[];
    defaultMergeStrategy: string;
}

export interface GetDevopsProjectsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDevopsProjectsProjectCollection {
    items: outputs.GetDevopsProjectsProjectCollectionItem[];
}

export interface GetDevopsProjectsProjectCollectionItem {
    compartmentId: string;
    definedTags: {[key: string]: string};
    description: string;
    freeformTags: {[key: string]: string};
    id: string;
    lifecycleDetails: string;
    name: string;
    namespace: string;
    notificationConfigs: outputs.GetDevopsProjectsProjectCollectionItemNotificationConfig[];
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
}

export interface GetDevopsProjectsProjectCollectionItemNotificationConfig {
    topicId: string;
}

export interface GetDevopsRepoFileLineLine {
    lineContent: string;
    lineNumber: number;
}

export interface GetDevopsRepositoriesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDevopsRepositoriesRepositoryCollection {
    items: outputs.GetDevopsRepositoriesRepositoryCollectionItem[];
}

export interface GetDevopsRepositoriesRepositoryCollectionItem {
    branchCount: number;
    commitCount: number;
    compartmentId: string;
    defaultBranch: string;
    definedTags: {[key: string]: string};
    description: string;
    freeformTags: {[key: string]: string};
    httpUrl: string;
    id: string;
    lifecycleDetails: string;
    mirrorRepositoryConfigs: outputs.GetDevopsRepositoriesRepositoryCollectionItemMirrorRepositoryConfig[];
    name: string;
    namespace: string;
    parentRepositoryId: string;
    projectId: string;
    projectName: string;
    repositoryType: string;
    sizeInBytes: string;
    sshUrl: string;
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
    triggerBuildEvents: string[];
}

export interface GetDevopsRepositoriesRepositoryCollectionItemMirrorRepositoryConfig {
    connectorId: string;
    repositoryUrl: string;
    triggerSchedules: outputs.GetDevopsRepositoriesRepositoryCollectionItemMirrorRepositoryConfigTriggerSchedule[];
}

export interface GetDevopsRepositoriesRepositoryCollectionItemMirrorRepositoryConfigTriggerSchedule {
    customSchedule: string;
    scheduleType: string;
}

export interface GetDevopsRepositoryAuthorItem {
    authorName: string;
    definedTags: {[key: string]: string};
    freeformTags: {[key: string]: string};
}

export interface GetDevopsRepositoryAuthorsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDevopsRepositoryAuthorsRepositoryAuthorCollection {
    items: outputs.GetDevopsRepositoryAuthorsRepositoryAuthorCollectionItem[];
}

export interface GetDevopsRepositoryAuthorsRepositoryAuthorCollectionItem {
    authorName: string;
    definedTags: {[key: string]: string};
    freeformTags: {[key: string]: string};
    systemTags: {[key: string]: string};
}

export interface GetDevopsRepositoryCommitsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDevopsRepositoryCommitsRepositoryCommitCollection {
    items: outputs.GetDevopsRepositoryCommitsRepositoryCommitCollectionItem[];
}

export interface GetDevopsRepositoryCommitsRepositoryCommitCollectionItem {
    authorEmail: string;
    authorName: string;
    commitId: string;
    commitMessage: string;
    committerEmail: string;
    committerName: string;
    definedTags: {[key: string]: string};
    freeformTags: {[key: string]: string};
    parentCommitIds: string[];
    timeCreated: string;
    treeId: string;
}

export interface GetDevopsRepositoryDiffChange {
    baseLine: number;
    baseSpan: number;
    diffSections: outputs.GetDevopsRepositoryDiffChangeDiffSection[];
    targetLine: number;
    targetSpan: number;
}

export interface GetDevopsRepositoryDiffChangeDiffSection {
    lines: outputs.GetDevopsRepositoryDiffChangeDiffSectionLine[];
    type: string;
}

export interface GetDevopsRepositoryDiffChangeDiffSectionLine {
    baseLine: number;
    conflictMarker: string;
    lineContent: string;
    targetLine: number;
}

export interface GetDevopsRepositoryDiffsDiffCollection {
    items: outputs.GetDevopsRepositoryDiffsDiffCollectionItem[];
}

export interface GetDevopsRepositoryDiffsDiffCollectionItem {
    areConflictsInFile: boolean;
    changes: outputs.GetDevopsRepositoryDiffsDiffCollectionItemChange[];
    freeformTags: {[key: string]: string};
    isBinary: boolean;
    isLarge: boolean;
    newId: string;
    newPath: string;
    oldId: string;
    oldPath: string;
}

export interface GetDevopsRepositoryDiffsDiffCollectionItemChange {
    baseLine: number;
    baseSpan: number;
    diffSections: outputs.GetDevopsRepositoryDiffsDiffCollectionItemChangeDiffSection[];
    targetLine: number;
    targetSpan: number;
}

export interface GetDevopsRepositoryDiffsDiffCollectionItemChangeDiffSection {
    lines: outputs.GetDevopsRepositoryDiffsDiffCollectionItemChangeDiffSectionLine[];
    type: string;
}

export interface GetDevopsRepositoryDiffsDiffCollectionItemChangeDiffSectionLine {
    baseLine: number;
    conflictMarker: string;
    lineContent: string;
    targetLine: number;
}

export interface GetDevopsRepositoryDiffsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDevopsRepositoryFileDiffChange {
    baseLine: number;
    baseSpan: number;
    diffSections: outputs.GetDevopsRepositoryFileDiffChangeDiffSection[];
    targetLine: number;
    targetSpan: number;
}

export interface GetDevopsRepositoryFileDiffChangeDiffSection {
    lines: outputs.GetDevopsRepositoryFileDiffChangeDiffSectionLine[];
    type: string;
}

export interface GetDevopsRepositoryFileDiffChangeDiffSectionLine {
    baseLine: number;
    conflictMarker: string;
    lineContent: string;
    targetLine: number;
}

export interface GetDevopsRepositoryFileLineLine {
    lineContent: string;
    lineNumber: number;
}

export interface GetDevopsRepositoryMirrorRecordsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDevopsRepositoryMirrorRecordsRepositoryMirrorRecordCollection {
    items: outputs.GetDevopsRepositoryMirrorRecordsRepositoryMirrorRecordCollectionItem[];
}

export interface GetDevopsRepositoryMirrorRecordsRepositoryMirrorRecordCollectionItem {
    freeformTags: {[key: string]: string};
    mirrorStatus: string;
    timeCompleted: string;
    timeEnqueued: string;
    timeStarted: string;
    workRequestId: string;
}

export interface GetDevopsRepositoryMirrorRepositoryConfig {
    connectorId: string;
    repositoryUrl: string;
    triggerSchedules: outputs.GetDevopsRepositoryMirrorRepositoryConfigTriggerSchedule[];
}

export interface GetDevopsRepositoryMirrorRepositoryConfigTriggerSchedule {
    customSchedule: string;
    scheduleType: string;
}

export interface GetDevopsRepositoryPathItem {
    definedTags: {[key: string]: string};
    freeformTags: {[key: string]: string};
    name: string;
    path: string;
    sha: string;
    sizeInBytes: string;
    submoduleGitUrl: string;
    type: string;
}

export interface GetDevopsRepositoryPathsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDevopsRepositoryPathsRepositoryPathCollection {
    items: outputs.GetDevopsRepositoryPathsRepositoryPathCollectionItem[];
}

export interface GetDevopsRepositoryPathsRepositoryPathCollectionItem {
    definedTags: {[key: string]: string};
    freeformTags: {[key: string]: string};
    name: string;
    path: string;
    sha: string;
    sizeInBytes: string;
    submoduleGitUrl: string;
    systemTags: {[key: string]: string};
    type: string;
}

export interface GetDevopsRepositoryProtectedBranchesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDevopsRepositoryProtectedBranchesProtectedBranchCollection {
    items: outputs.GetDevopsRepositoryProtectedBranchesProtectedBranchCollectionItem[];
}

export interface GetDevopsRepositoryProtectedBranchesProtectedBranchCollectionItem {
    branchName: string;
    definedTags: {[key: string]: string};
    freeformTags: {[key: string]: string};
    protectionLevels: string[];
    systemTags: {[key: string]: string};
}

export interface GetDevopsRepositoryRefsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDevopsRepositoryRefsRepositoryRefCollection {
    items: outputs.GetDevopsRepositoryRefsRepositoryRefCollectionItem[];
}

export interface GetDevopsRepositoryRefsRepositoryRefCollectionItem {
    commitId: string;
    definedTags: {[key: string]: string};
    freeformTags: {[key: string]: string};
    fullRefName: string;
    id: string;
    objectId: string;
    refName: string;
    refType: string;
    repositoryId: string;
}

export interface GetDevopsRepositorySettingApprovalRule {
    items: outputs.GetDevopsRepositorySettingApprovalRuleItem[];
}

export interface GetDevopsRepositorySettingApprovalRuleItem {
    destinationBranch: string;
    minApprovalsCount: number;
    name: string;
    reviewers: outputs.GetDevopsRepositorySettingApprovalRuleItemReviewer[];
}

export interface GetDevopsRepositorySettingApprovalRuleItemReviewer {
    principalId: string;
    principalName: string;
    principalState: string;
    principalType: string;
}

export interface GetDevopsRepositorySettingMergeCheck {
    lastBuildSucceeded: string;
}

export interface GetDevopsRepositorySettingMergeSetting {
    allowedMergeStrategies: string[];
    defaultMergeStrategy: string;
}

export interface GetDevopsTriggerAction {
    buildPipelineId: string;
    filters: outputs.GetDevopsTriggerActionFilter[];
    type: string;
}

export interface GetDevopsTriggerActionFilter {
    events: string[];
    excludes: outputs.GetDevopsTriggerActionFilterExclude[];
    includes: outputs.GetDevopsTriggerActionFilterInclude[];
    triggerSource: string;
}

export interface GetDevopsTriggerActionFilterExclude {
    fileFilters: outputs.GetDevopsTriggerActionFilterExcludeFileFilter[];
}

export interface GetDevopsTriggerActionFilterExcludeFileFilter {
    filePaths: string[];
}

export interface GetDevopsTriggerActionFilterInclude {
    baseRef: string;
    fileFilters: outputs.GetDevopsTriggerActionFilterIncludeFileFilter[];
    headRef: string;
    repositoryName: string;
}

export interface GetDevopsTriggerActionFilterIncludeFileFilter {
    filePaths: string[];
}

export interface GetDevopsTriggersFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDevopsTriggersTriggerCollection {
    items: outputs.GetDevopsTriggersTriggerCollectionItem[];
}

export interface GetDevopsTriggersTriggerCollectionItem {
    actions: outputs.GetDevopsTriggersTriggerCollectionItemAction[];
    compartmentId: string;
    connectionId: string;
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    lifecycleDetails: string;
    projectId: string;
    repositoryId: string;
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
    triggerSource: string;
    triggerUrl: string;
}

export interface GetDevopsTriggersTriggerCollectionItemAction {
    buildPipelineId: string;
    filters: outputs.GetDevopsTriggersTriggerCollectionItemActionFilter[];
    type: string;
}

export interface GetDevopsTriggersTriggerCollectionItemActionFilter {
    events: string[];
    excludes: outputs.GetDevopsTriggersTriggerCollectionItemActionFilterExclude[];
    includes: outputs.GetDevopsTriggersTriggerCollectionItemActionFilterInclude[];
    triggerSource: string;
}

export interface GetDevopsTriggersTriggerCollectionItemActionFilterExclude {
    fileFilters: outputs.GetDevopsTriggersTriggerCollectionItemActionFilterExcludeFileFilter[];
}

export interface GetDevopsTriggersTriggerCollectionItemActionFilterExcludeFileFilter {
    filePaths: string[];
}

export interface GetDevopsTriggersTriggerCollectionItemActionFilterInclude {
    baseRef: string;
    fileFilters: outputs.GetDevopsTriggersTriggerCollectionItemActionFilterIncludeFileFilter[];
    headRef: string;
    repositoryName: string;
}

export interface GetDevopsTriggersTriggerCollectionItemActionFilterIncludeFileFilter {
    filePaths: string[];
}

export interface GetDisasterRecoveryDrPlanExecutionExecutionOption {
    arePrechecksEnabled: boolean;
    areWarningsIgnored: boolean;
    planExecutionType: string;
}

export interface GetDisasterRecoveryDrPlanExecutionGroupExecution {
    displayName: string;
    executionDurationInSec: number;
    groupId: string;
    status: string;
    statusDetails: string;
    stepExecutions: outputs.GetDisasterRecoveryDrPlanExecutionGroupExecutionStepExecution[];
    timeEnded: string;
    timeStarted: string;
    type: string;
}

export interface GetDisasterRecoveryDrPlanExecutionGroupExecutionStepExecution {
    displayName: string;
    executionDurationInSec: number;
    groupId: string;
    logLocations: outputs.GetDisasterRecoveryDrPlanExecutionGroupExecutionStepExecutionLogLocation[];
    status: string;
    statusDetails: string;
    stepId: string;
    timeEnded: string;
    timeStarted: string;
    type: string;
}

export interface GetDisasterRecoveryDrPlanExecutionGroupExecutionStepExecutionLogLocation {
    bucket: string;
    namespace: string;
    object: string;
}

export interface GetDisasterRecoveryDrPlanExecutionLogLocation {
    bucket: string;
    namespace: string;
    object: string;
}

export interface GetDisasterRecoveryDrPlanExecutionsDrPlanExecutionCollection {
    items: outputs.GetDisasterRecoveryDrPlanExecutionsDrPlanExecutionCollectionItem[];
}

export interface GetDisasterRecoveryDrPlanExecutionsDrPlanExecutionCollectionItem {
    compartmentId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    drProtectionGroupId: string;
    executionDurationInSec: number;
    executionOptions: outputs.GetDisasterRecoveryDrPlanExecutionsDrPlanExecutionCollectionItemExecutionOption[];
    freeformTags: {[key: string]: string};
    groupExecutions: outputs.GetDisasterRecoveryDrPlanExecutionsDrPlanExecutionCollectionItemGroupExecution[];
    id: string;
    lifeCycleDetails: string;
    logLocations: outputs.GetDisasterRecoveryDrPlanExecutionsDrPlanExecutionCollectionItemLogLocation[];
    peerDrProtectionGroupId: string;
    peerRegion: string;
    planExecutionType: string;
    planId: string;
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeEnded: string;
    timeStarted: string;
    timeUpdated: string;
}

export interface GetDisasterRecoveryDrPlanExecutionsDrPlanExecutionCollectionItemExecutionOption {
    arePrechecksEnabled: boolean;
    areWarningsIgnored: boolean;
    planExecutionType: string;
}

export interface GetDisasterRecoveryDrPlanExecutionsDrPlanExecutionCollectionItemGroupExecution {
    displayName: string;
    executionDurationInSec: number;
    groupId: string;
    status: string;
    statusDetails: string;
    stepExecutions: outputs.GetDisasterRecoveryDrPlanExecutionsDrPlanExecutionCollectionItemGroupExecutionStepExecution[];
    timeEnded: string;
    timeStarted: string;
    type: string;
}

export interface GetDisasterRecoveryDrPlanExecutionsDrPlanExecutionCollectionItemGroupExecutionStepExecution {
    displayName: string;
    executionDurationInSec: number;
    groupId: string;
    logLocations: outputs.GetDisasterRecoveryDrPlanExecutionsDrPlanExecutionCollectionItemGroupExecutionStepExecutionLogLocation[];
    status: string;
    statusDetails: string;
    stepId: string;
    timeEnded: string;
    timeStarted: string;
    type: string;
}

export interface GetDisasterRecoveryDrPlanExecutionsDrPlanExecutionCollectionItemGroupExecutionStepExecutionLogLocation {
    bucket: string;
    namespace: string;
    object: string;
}

export interface GetDisasterRecoveryDrPlanExecutionsDrPlanExecutionCollectionItemLogLocation {
    bucket: string;
    namespace: string;
    object: string;
}

export interface GetDisasterRecoveryDrPlanExecutionsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDisasterRecoveryDrPlanPlanGroup {
    displayName: string;
    id: string;
    isPauseEnabled: boolean;
    steps: outputs.GetDisasterRecoveryDrPlanPlanGroupStep[];
    type: string;
}

export interface GetDisasterRecoveryDrPlanPlanGroupStep {
    displayName: string;
    errorMode: string;
    groupId: string;
    id: string;
    isEnabled: boolean;
    memberId: string;
    timeout: number;
    type: string;
    userDefinedSteps: outputs.GetDisasterRecoveryDrPlanPlanGroupStepUserDefinedStep[];
}

export interface GetDisasterRecoveryDrPlanPlanGroupStepUserDefinedStep {
    functionId: string;
    functionRegion: string;
    objectStorageScriptLocations: outputs.GetDisasterRecoveryDrPlanPlanGroupStepUserDefinedStepObjectStorageScriptLocation[];
    requestBody: string;
    runAsUser: string;
    runOnInstanceId: string;
    runOnInstanceRegion: string;
    scriptCommand: string;
    stepType: string;
}

export interface GetDisasterRecoveryDrPlanPlanGroupStepUserDefinedStepObjectStorageScriptLocation {
    bucket: string;
    namespace: string;
    object: string;
}

export interface GetDisasterRecoveryDrPlansDrPlanCollection {
    items: outputs.GetDisasterRecoveryDrPlansDrPlanCollectionItem[];
}

export interface GetDisasterRecoveryDrPlansDrPlanCollectionItem {
    compartmentId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    drProtectionGroupId: string;
    freeformTags: {[key: string]: string};
    id: string;
    lifeCycleDetails: string;
    peerDrProtectionGroupId: string;
    peerRegion: string;
    planGroups: outputs.GetDisasterRecoveryDrPlansDrPlanCollectionItemPlanGroup[];
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
    type: string;
}

export interface GetDisasterRecoveryDrPlansDrPlanCollectionItemPlanGroup {
    displayName: string;
    id: string;
    isPauseEnabled: boolean;
    steps: outputs.GetDisasterRecoveryDrPlansDrPlanCollectionItemPlanGroupStep[];
    type: string;
}

export interface GetDisasterRecoveryDrPlansDrPlanCollectionItemPlanGroupStep {
    displayName: string;
    errorMode: string;
    groupId: string;
    id: string;
    isEnabled: boolean;
    memberId: string;
    timeout: number;
    type: string;
    userDefinedSteps: outputs.GetDisasterRecoveryDrPlansDrPlanCollectionItemPlanGroupStepUserDefinedStep[];
}

export interface GetDisasterRecoveryDrPlansDrPlanCollectionItemPlanGroupStepUserDefinedStep {
    functionId: string;
    functionRegion: string;
    objectStorageScriptLocations: outputs.GetDisasterRecoveryDrPlansDrPlanCollectionItemPlanGroupStepUserDefinedStepObjectStorageScriptLocation[];
    requestBody: string;
    runAsUser: string;
    runOnInstanceId: string;
    runOnInstanceRegion: string;
    scriptCommand: string;
    stepType: string;
}

export interface GetDisasterRecoveryDrPlansDrPlanCollectionItemPlanGroupStepUserDefinedStepObjectStorageScriptLocation {
    bucket: string;
    namespace: string;
    object: string;
}

export interface GetDisasterRecoveryDrPlansFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDisasterRecoveryDrProtectionGroupAssociation {
    peerId: string;
    peerRegion: string;
    role: string;
}

export interface GetDisasterRecoveryDrProtectionGroupLogLocation {
    bucket: string;
    namespace: string;
    object: string;
}

export interface GetDisasterRecoveryDrProtectionGroupMember {
    autonomousDatabaseStandbyTypeForDrDrills: string;
    backendSetMappings: outputs.GetDisasterRecoveryDrProtectionGroupMemberBackendSetMapping[];
    blockVolumeOperations: outputs.GetDisasterRecoveryDrProtectionGroupMemberBlockVolumeOperation[];
    bucket: string;
    connectionStringType: string;
    destinationAvailabilityDomain: string;
    destinationCapacityReservationId: string;
    destinationCompartmentId: string;
    destinationDedicatedVmHostId: string;
    destinationLoadBalancerId: string;
    destinationNetworkLoadBalancerId: string;
    exportMappings: outputs.GetDisasterRecoveryDrProtectionGroupMemberExportMapping[];
    fileSystemOperations: outputs.GetDisasterRecoveryDrProtectionGroupMemberFileSystemOperation[];
    isMovable: boolean;
    isRetainFaultDomain: boolean;
    isStartStopEnabled: boolean;
    memberId: string;
    memberType: string;
    namespace: string;
    passwordVaultSecretId: string;
    vnicMapping: outputs.GetDisasterRecoveryDrProtectionGroupMemberVnicMapping[];
    vnicMappings: outputs.GetDisasterRecoveryDrProtectionGroupMemberVnicMapping[];
}

export interface GetDisasterRecoveryDrProtectionGroupMemberBackendSetMapping {
    destinationBackendSetName: string;
    isBackendSetForNonMovable: boolean;
    sourceBackendSetName: string;
}

export interface GetDisasterRecoveryDrProtectionGroupMemberBlockVolumeOperation {
    attachmentDetails: outputs.GetDisasterRecoveryDrProtectionGroupMemberBlockVolumeOperationAttachmentDetail[];
    blockVolumeId: string;
    mountDetails: outputs.GetDisasterRecoveryDrProtectionGroupMemberBlockVolumeOperationMountDetail[];
}

export interface GetDisasterRecoveryDrProtectionGroupMemberBlockVolumeOperationAttachmentDetail {
    volumeAttachmentReferenceInstanceId: string;
}

export interface GetDisasterRecoveryDrProtectionGroupMemberBlockVolumeOperationMountDetail {
    mountPoint: string;
}

export interface GetDisasterRecoveryDrProtectionGroupMemberExportMapping {
    destinationMountTargetId: string;
    exportId: string;
}

export interface GetDisasterRecoveryDrProtectionGroupMemberFileSystemOperation {
    exportPath: string;
    mountDetails: outputs.GetDisasterRecoveryDrProtectionGroupMemberFileSystemOperationMountDetail[];
    mountPoint: string;
    mountTargetId: string;
    unmountDetails: outputs.GetDisasterRecoveryDrProtectionGroupMemberFileSystemOperationUnmountDetail[];
}

export interface GetDisasterRecoveryDrProtectionGroupMemberFileSystemOperationMountDetail {
    mountTargetId: string;
}

export interface GetDisasterRecoveryDrProtectionGroupMemberFileSystemOperationUnmountDetail {
    mountTargetId: string;
}

export interface GetDisasterRecoveryDrProtectionGroupMemberVnicMapping {
    destinationNsgIdLists: string[];
    destinationPrimaryPrivateIpAddress: string;
    destinationPrimaryPrivateIpHostnameLabel: string;
    destinationSubnetId: string;
    sourceVnicId: string;
}

export interface GetDisasterRecoveryDrProtectionGroupsDrProtectionGroupCollection {
    items: outputs.GetDisasterRecoveryDrProtectionGroupsDrProtectionGroupCollectionItem[];
}

export interface GetDisasterRecoveryDrProtectionGroupsDrProtectionGroupCollectionItem {
    associations: outputs.GetDisasterRecoveryDrProtectionGroupsDrProtectionGroupCollectionItemAssociation[];
    compartmentId: string;
    definedTags: {[key: string]: string};
    disassociateTrigger: number;
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    lifeCycleDetails: string;
    lifecycleSubState: string;
    logLocations: outputs.GetDisasterRecoveryDrProtectionGroupsDrProtectionGroupCollectionItemLogLocation[];
    members: outputs.GetDisasterRecoveryDrProtectionGroupsDrProtectionGroupCollectionItemMember[];
    peerId: string;
    peerRegion: string;
    role: string;
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
}

export interface GetDisasterRecoveryDrProtectionGroupsDrProtectionGroupCollectionItemAssociation {
    peerId: string;
    peerRegion: string;
    role: string;
}

export interface GetDisasterRecoveryDrProtectionGroupsDrProtectionGroupCollectionItemLogLocation {
    bucket: string;
    namespace: string;
    object: string;
}

export interface GetDisasterRecoveryDrProtectionGroupsDrProtectionGroupCollectionItemMember {
    autonomousDatabaseStandbyTypeForDrDrills: string;
    backendSetMappings: outputs.GetDisasterRecoveryDrProtectionGroupsDrProtectionGroupCollectionItemMemberBackendSetMapping[];
    blockVolumeOperations: outputs.GetDisasterRecoveryDrProtectionGroupsDrProtectionGroupCollectionItemMemberBlockVolumeOperation[];
    bucket: string;
    connectionStringType: string;
    destinationAvailabilityDomain: string;
    destinationCapacityReservationId: string;
    destinationCompartmentId: string;
    destinationDedicatedVmHostId: string;
    destinationLoadBalancerId: string;
    destinationNetworkLoadBalancerId: string;
    exportMappings: outputs.GetDisasterRecoveryDrProtectionGroupsDrProtectionGroupCollectionItemMemberExportMapping[];
    fileSystemOperations: outputs.GetDisasterRecoveryDrProtectionGroupsDrProtectionGroupCollectionItemMemberFileSystemOperation[];
    isMovable: boolean;
    isRetainFaultDomain: boolean;
    isStartStopEnabled: boolean;
    memberId: string;
    memberType: string;
    namespace: string;
    passwordVaultSecretId: string;
    vnicMapping: outputs.GetDisasterRecoveryDrProtectionGroupsDrProtectionGroupCollectionItemMemberVnicMapping[];
    vnicMappings: outputs.GetDisasterRecoveryDrProtectionGroupsDrProtectionGroupCollectionItemMemberVnicMapping[];
}

export interface GetDisasterRecoveryDrProtectionGroupsDrProtectionGroupCollectionItemMemberBackendSetMapping {
    destinationBackendSetName: string;
    isBackendSetForNonMovable: boolean;
    sourceBackendSetName: string;
}

export interface GetDisasterRecoveryDrProtectionGroupsDrProtectionGroupCollectionItemMemberBlockVolumeOperation {
    attachmentDetails: outputs.GetDisasterRecoveryDrProtectionGroupsDrProtectionGroupCollectionItemMemberBlockVolumeOperationAttachmentDetail[];
    blockVolumeId: string;
    mountDetails: outputs.GetDisasterRecoveryDrProtectionGroupsDrProtectionGroupCollectionItemMemberBlockVolumeOperationMountDetail[];
}

export interface GetDisasterRecoveryDrProtectionGroupsDrProtectionGroupCollectionItemMemberBlockVolumeOperationAttachmentDetail {
    volumeAttachmentReferenceInstanceId: string;
}

export interface GetDisasterRecoveryDrProtectionGroupsDrProtectionGroupCollectionItemMemberBlockVolumeOperationMountDetail {
    mountPoint: string;
}

export interface GetDisasterRecoveryDrProtectionGroupsDrProtectionGroupCollectionItemMemberExportMapping {
    destinationMountTargetId: string;
    exportId: string;
}

export interface GetDisasterRecoveryDrProtectionGroupsDrProtectionGroupCollectionItemMemberFileSystemOperation {
    exportPath: string;
    mountDetails: outputs.GetDisasterRecoveryDrProtectionGroupsDrProtectionGroupCollectionItemMemberFileSystemOperationMountDetail[];
    mountPoint: string;
    mountTargetId: string;
    unmountDetails: outputs.GetDisasterRecoveryDrProtectionGroupsDrProtectionGroupCollectionItemMemberFileSystemOperationUnmountDetail[];
}

export interface GetDisasterRecoveryDrProtectionGroupsDrProtectionGroupCollectionItemMemberFileSystemOperationMountDetail {
    mountTargetId: string;
}

export interface GetDisasterRecoveryDrProtectionGroupsDrProtectionGroupCollectionItemMemberFileSystemOperationUnmountDetail {
    mountTargetId: string;
}

export interface GetDisasterRecoveryDrProtectionGroupsDrProtectionGroupCollectionItemMemberVnicMapping {
    destinationNsgIdLists: string[];
    destinationPrimaryPrivateIpAddress: string;
    destinationPrimaryPrivateIpHostnameLabel: string;
    destinationSubnetId: string;
    sourceVnicId: string;
}

export interface GetDisasterRecoveryDrProtectionGroupsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDnsRecordsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDnsRecordsRecord {
    compartmentId: string;
    domain: string;
    isProtected: boolean;
    rdata: string;
    recordHash: string;
    rrsetVersion: string;
    rtype: string;
    ttl: number;
    zoneNameOrId: string;
}

export interface GetDnsResolverAttachedView {
    viewId: string;
}

export interface GetDnsResolverEndpoint {
    compartmentId: string;
    endpointType: string;
    forwardingAddress: string;
    isForwarding: boolean;
    isListening: boolean;
    listeningAddress: string;
    name: string;
    self: string;
    state: string;
    subnetId: string;
    timeCreated: string;
    timeUpdated: string;
}

export interface GetDnsResolverEndpointsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDnsResolverEndpointsResolverEndpoint {
    compartmentId: string;
    endpointType: string;
    forwardingAddress: string;
    isForwarding: boolean;
    isListening: boolean;
    listeningAddress: string;
    name: string;
    nsgIds: string[];
    resolverId: string;
    scope: string;
    self: string;
    state: string;
    subnetId: string;
    timeCreated: string;
    timeUpdated: string;
}

export interface GetDnsResolverRule {
    action: string;
    clientAddressConditions: string[];
    destinationAddresses: string[];
    qnameCoverConditions: string[];
    sourceEndpointName: string;
}

export interface GetDnsResolversFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDnsResolversResolver {
    attachedVcnId: string;
    attachedViews: outputs.GetDnsResolversResolverAttachedView[];
    compartmentId: string;
    defaultViewId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    endpoints: outputs.GetDnsResolversResolverEndpoint[];
    freeformTags: {[key: string]: string};
    id: string;
    isProtected: boolean;
    resolverId: string;
    rules: outputs.GetDnsResolversResolverRule[];
    scope: string;
    self: string;
    state: string;
    timeCreated: string;
    timeUpdated: string;
}

export interface GetDnsResolversResolverAttachedView {
    viewId: string;
}

export interface GetDnsResolversResolverEndpoint {
    compartmentId: string;
    endpointType: string;
    forwardingAddress: string;
    isForwarding: boolean;
    isListening: boolean;
    listeningAddress: string;
    name: string;
    self: string;
    state: string;
    subnetId: string;
    timeCreated: string;
    timeUpdated: string;
}

export interface GetDnsResolversResolverRule {
    action: string;
    clientAddressConditions: string[];
    destinationAddresses: string[];
    qnameCoverConditions: string[];
    sourceEndpointName: string;
}

export interface GetDnsRrsetItem {
    domain: string;
    isProtected: boolean;
    rdata: string;
    recordHash: string;
    rrsetVersion: string;
    rtype: string;
    ttl: number;
}

export interface GetDnsRrsetsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDnsRrsetsRrset {
    domain: string;
    items: outputs.GetDnsRrsetsRrsetItem[];
    rtype: string;
}

export interface GetDnsRrsetsRrsetItem {
    domain: string;
    isProtected: boolean;
    rdata: string;
    recordHash: string;
    rrsetVersion: string;
    rtype: string;
    ttl: number;
}

export interface GetDnsSteeringPoliciesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDnsSteeringPoliciesSteeringPolicy {
    answers: outputs.GetDnsSteeringPoliciesSteeringPolicyAnswer[];
    compartmentId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    healthCheckMonitorId: string;
    id: string;
    rules: outputs.GetDnsSteeringPoliciesSteeringPolicyRule[];
    self: string;
    state: string;
    template: string;
    timeCreated: string;
    ttl: number;
}

export interface GetDnsSteeringPoliciesSteeringPolicyAnswer {
    isDisabled: boolean;
    name: string;
    pool: string;
    rdata: string;
    rtype: string;
}

export interface GetDnsSteeringPoliciesSteeringPolicyRule {
    cases: outputs.GetDnsSteeringPoliciesSteeringPolicyRuleCase[];
    defaultAnswerDatas: outputs.GetDnsSteeringPoliciesSteeringPolicyRuleDefaultAnswerData[];
    defaultCount: number;
    description: string;
    ruleType: string;
}

export interface GetDnsSteeringPoliciesSteeringPolicyRuleCase {
    answerDatas: outputs.GetDnsSteeringPoliciesSteeringPolicyRuleCaseAnswerData[];
    caseCondition: string;
    count: number;
}

export interface GetDnsSteeringPoliciesSteeringPolicyRuleCaseAnswerData {
    answerCondition: string;
    shouldKeep: boolean;
    value: number;
}

export interface GetDnsSteeringPoliciesSteeringPolicyRuleDefaultAnswerData {
    answerCondition: string;
    shouldKeep: boolean;
    value: number;
}

export interface GetDnsSteeringPolicyAnswer {
    isDisabled: boolean;
    name: string;
    pool: string;
    rdata: string;
    rtype: string;
}

export interface GetDnsSteeringPolicyAttachmentsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDnsSteeringPolicyAttachmentsSteeringPolicyAttachment {
    compartmentId: string;
    displayName: string;
    domainName: string;
    id: string;
    rtypes: string[];
    self: string;
    state: string;
    steeringPolicyId: string;
    timeCreated: string;
    zoneId: string;
}

export interface GetDnsSteeringPolicyRule {
    cases: outputs.GetDnsSteeringPolicyRuleCase[];
    defaultAnswerDatas: outputs.GetDnsSteeringPolicyRuleDefaultAnswerData[];
    defaultCount: number;
    description: string;
    ruleType: string;
}

export interface GetDnsSteeringPolicyRuleCase {
    answerDatas: outputs.GetDnsSteeringPolicyRuleCaseAnswerData[];
    caseCondition: string;
    count: number;
}

export interface GetDnsSteeringPolicyRuleCaseAnswerData {
    answerCondition: string;
    shouldKeep: boolean;
    value: number;
}

export interface GetDnsSteeringPolicyRuleDefaultAnswerData {
    answerCondition: string;
    shouldKeep: boolean;
    value: number;
}

export interface GetDnsTsigKeysFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDnsTsigKeysTsigKey {
    algorithm: string;
    compartmentId: string;
    definedTags: {[key: string]: string};
    freeformTags: {[key: string]: string};
    id: string;
    name: string;
    secret: string;
    self: string;
    state: string;
    timeCreated: string;
    timeUpdated: string;
}

export interface GetDnsViewsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDnsViewsView {
    compartmentId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    isProtected: boolean;
    scope: string;
    self: string;
    state: string;
    timeCreated: string;
    timeUpdated: string;
}

export interface GetDnsZonesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetDnsZonesZone {
    compartmentId: string;
    definedTags: {[key: string]: string};
    externalDownstreams: outputs.GetDnsZonesZoneExternalDownstream[];
    externalMasters: outputs.GetDnsZonesZoneExternalMaster[];
    freeformTags: {[key: string]: string};
    id: string;
    isProtected: boolean;
    name: string;
    nameservers: outputs.GetDnsZonesZoneNameserver[];
    scope: string;
    self: string;
    serial: number;
    state: string;
    timeCreated: string;
    version: string;
    viewId: string;
    zoneTransferServers: outputs.GetDnsZonesZoneZoneTransferServer[];
    zoneType: string;
}

export interface GetDnsZonesZoneExternalDownstream {
    address: string;
    port: number;
    tsigKeyId: string;
}

export interface GetDnsZonesZoneExternalMaster {
    address: string;
    port: number;
    tsigKeyId: string;
}

export interface GetDnsZonesZoneNameserver {
    hostname: string;
}

export interface GetDnsZonesZoneZoneTransferServer {
    address: string;
    isTransferDestination: boolean;
    isTransferSource: boolean;
    port: number;
}

export interface GetEmailDkimsDkimCollection {
    items: outputs.GetEmailDkimsDkimCollectionItem[];
}

export interface GetEmailDkimsDkimCollectionItem {
    cnameRecordValue: string;
    compartmentId: string;
    definedTags: {[key: string]: string};
    description: string;
    dnsSubdomainName: string;
    emailDomainId: string;
    freeformTags: {[key: string]: string};
    id: string;
    lifecycleDetails: string;
    name: string;
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
    txtRecordValue: string;
}

export interface GetEmailDkimsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetEmailEmailDomainsEmailDomainCollection {
    items: outputs.GetEmailEmailDomainsEmailDomainCollectionItem[];
}

export interface GetEmailEmailDomainsEmailDomainCollectionItem {
    activeDkimId: string;
    compartmentId: string;
    definedTags: {[key: string]: string};
    description: string;
    domainVerificationId: string;
    domainVerificationStatus: string;
    freeformTags: {[key: string]: string};
    id: string;
    isSpf: boolean;
    name: string;
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
}

export interface GetEmailEmailDomainsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetEmailEmailReturnPathsEmailReturnPathCollection {
    items: outputs.GetEmailEmailReturnPathsEmailReturnPathCollectionItem[];
}

export interface GetEmailEmailReturnPathsEmailReturnPathCollectionItem {
    cnameRecordValue: string;
    compartmentId: string;
    definedTags: {[key: string]: string};
    description: string;
    dnsSubdomainName: string;
    freeformTags: {[key: string]: string};
    id: string;
    lifecycleDetails: string;
    name: string;
    parentResourceId: string;
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
}

export interface GetEmailEmailReturnPathsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetEmailSendersFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetEmailSendersSender {
    compartmentId: string;
    definedTags: {[key: string]: string};
    emailAddress: string;
    emailDomainId: string;
    freeformTags: {[key: string]: string};
    id: string;
    isSpf: boolean;
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
}

export interface GetEmailSuppressionsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetEmailSuppressionsSuppression {
    compartmentId: string;
    emailAddress: string;
    errorDetail: string;
    errorSource: string;
    id: string;
    messageId: string;
    reason: string;
    timeCreated: string;
    timeLastSuppressed: string;
}

export interface GetEventsRuleAction {
    actions: outputs.GetEventsRuleActionAction[];
}

export interface GetEventsRuleActionAction {
    actionType: string;
    description: string;
    functionId: string;
    id: string;
    isEnabled: boolean;
    lifecycleMessage: string;
    state: string;
    streamId: string;
    topicId: string;
}

export interface GetEventsRulesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetEventsRulesRule {
    actions: outputs.GetEventsRulesRuleAction[];
    compartmentId: string;
    condition: string;
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    isEnabled: boolean;
    lifecycleMessage: string;
    state: string;
    timeCreated: string;
}

export interface GetEventsRulesRuleAction {
    actions: outputs.GetEventsRulesRuleActionAction[];
}

export interface GetEventsRulesRuleActionAction {
    actionType: string;
    description: string;
    functionId: string;
    id: string;
    isEnabled: boolean;
    lifecycleMessage: string;
    state: string;
    streamId: string;
    topicId: string;
}

export interface GetFileStorageExportSetsExportSet {
    availabilityDomain: string;
    compartmentId: string;
    displayName: string;
    id: string;
    maxFsStatBytes: string;
    maxFsStatFiles: string;
    mountTargetId: string;
    state: string;
    timeCreated: string;
    vcnId: string;
}

export interface GetFileStorageExportSetsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetFileStorageExportsExport {
    exportOptions: outputs.GetFileStorageExportsExportExportOption[];
    exportSetId: string;
    fileSystemId: string;
    id: string;
    isIdmapGroupsForSysAuth: boolean;
    path: string;
    state: string;
    timeCreated: string;
}

export interface GetFileStorageExportsExportExportOption {
    access: string;
    allowedAuths: string[];
    anonymousGid: string;
    anonymousUid: string;
    identitySquash: string;
    isAnonymousAccessAllowed: boolean;
    requirePrivilegedSourcePort: boolean;
    source: string;
}

export interface GetFileStorageExportsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetFileStorageFileSystemsFileSystem {
    availabilityDomain: string;
    cloneAttachStatus: string;
    cloneCount: number;
    compartmentId: string;
    definedTags: {[key: string]: string};
    detachCloneTrigger: number;
    displayName: string;
    filesystemSnapshotPolicyId: string;
    freeformTags: {[key: string]: string};
    id: string;
    isCloneParent: boolean;
    isHydrated: boolean;
    isTargetable: boolean;
    kmsKeyId: string;
    lifecycleDetails: string;
    meteredBytes: string;
    replicationTargetId: string;
    sourceDetails: outputs.GetFileStorageFileSystemsFileSystemSourceDetail[];
    sourceSnapshotId: string;
    state: string;
    timeCreated: string;
}

export interface GetFileStorageFileSystemsFileSystemSourceDetail {
    parentFileSystemId: string;
    sourceSnapshotId: string;
}

export interface GetFileStorageFileSystemsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetFileStorageFilesystemSnapshotPoliciesFilesystemSnapshotPolicy {
    availabilityDomain: string;
    compartmentId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    policyPrefix: string;
    schedules: outputs.GetFileStorageFilesystemSnapshotPoliciesFilesystemSnapshotPolicySchedule[];
    state: string;
    timeCreated: string;
}

export interface GetFileStorageFilesystemSnapshotPoliciesFilesystemSnapshotPolicySchedule {
    dayOfMonth: number;
    dayOfWeek: string;
    hourOfDay: number;
    month: string;
    period: string;
    retentionDurationInSeconds: string;
    schedulePrefix: string;
    timeScheduleStart: string;
    timeZone: string;
}

export interface GetFileStorageFilesystemSnapshotPoliciesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetFileStorageFilesystemSnapshotPolicySchedule {
    dayOfMonth: number;
    dayOfWeek: string;
    hourOfDay: number;
    month: string;
    period: string;
    retentionDurationInSeconds: string;
    schedulePrefix: string;
    timeScheduleStart: string;
    timeZone: string;
}

export interface GetFileStorageMountTargetsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetFileStorageMountTargetsMountTarget {
    availabilityDomain: string;
    compartmentId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    exportSetId: string;
    freeformTags: {[key: string]: string};
    hostnameLabel: string;
    id: string;
    idmapType: string;
    ipAddress: string;
    kerberos: outputs.GetFileStorageMountTargetsMountTargetKerbero[];
    ldapIdmaps: outputs.GetFileStorageMountTargetsMountTargetLdapIdmap[];
    lifecycleDetails: string;
    nsgIds: string[];
    observedThroughput: string;
    privateIpIds: string[];
    requestedThroughput: string;
    reservedStorageCapacity: string;
    state: string;
    subnetId: string;
    timeBillingCycleEnd: string;
    timeCreated: string;
}

export interface GetFileStorageMountTargetsMountTargetKerbero {
    backupKeyTabSecretVersion: number;
    currentKeyTabSecretVersion: number;
    isKerberosEnabled: boolean;
    kerberosRealm: string;
    keyTabSecretId: string;
}

export interface GetFileStorageMountTargetsMountTargetLdapIdmap {
    cacheLifetimeSeconds: number;
    cacheRefreshIntervalSeconds: number;
    groupSearchBase: string;
    negativeCacheLifetimeSeconds: number;
    outboundConnector1id: string;
    outboundConnector2id: string;
    schemaType: string;
    userSearchBase: string;
}

export interface GetFileStorageOutboundConnectorEndpoint {
    hostname: string;
    port: string;
}

export interface GetFileStorageOutboundConnectorsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetFileStorageOutboundConnectorsOutboundConnector {
    availabilityDomain: string;
    bindDistinguishedName: string;
    compartmentId: string;
    connectorType: string;
    definedTags: {[key: string]: string};
    displayName: string;
    endpoints: outputs.GetFileStorageOutboundConnectorsOutboundConnectorEndpoint[];
    freeformTags: {[key: string]: string};
    id: string;
    passwordSecretId: string;
    passwordSecretVersion: number;
    state: string;
    timeCreated: string;
}

export interface GetFileStorageOutboundConnectorsOutboundConnectorEndpoint {
    hostname: string;
    port: string;
}

export interface GetFileStorageReplicationTargetsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetFileStorageReplicationTargetsReplicationTarget {
    availabilityDomain: string;
    compartmentId: string;
    definedTags: {[key: string]: string};
    deltaProgress: string;
    deltaStatus: string;
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    lastSnapshotId: string;
    lifecycleDetails: string;
    recoveryPointTime: string;
    replicationId: string;
    sourceId: string;
    state: string;
    targetId: string;
    timeCreated: string;
}

export interface GetFileStorageReplicationsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetFileStorageReplicationsReplication {
    availabilityDomain: string;
    compartmentId: string;
    definedTags: {[key: string]: string};
    deltaProgress: string;
    deltaStatus: string;
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    lastSnapshotId: string;
    lifecycleDetails: string;
    recoveryPointTime: string;
    replicationInterval: string;
    replicationTargetId: string;
    sourceId: string;
    state: string;
    targetId: string;
    timeCreated: string;
}

export interface GetFileStorageSnapshotsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetFileStorageSnapshotsSnapshot {
    definedTags: {[key: string]: string};
    expirationTime: string;
    fileSystemId: string;
    filesystemSnapshotPolicyId: string;
    freeformTags: {[key: string]: string};
    id: string;
    isCloneSource: boolean;
    lifecycleDetails: string;
    name: string;
    provenanceId: string;
    snapshotTime: string;
    snapshotType: string;
    state: string;
    timeCreated: string;
}

export interface GetFunctionsApplicationImagePolicyConfig {
    isPolicyEnabled: boolean;
    keyDetails: outputs.GetFunctionsApplicationImagePolicyConfigKeyDetail[];
}

export interface GetFunctionsApplicationImagePolicyConfigKeyDetail {
    kmsKeyId: string;
}

export interface GetFunctionsApplicationTraceConfig {
    domainId: string;
    isEnabled: boolean;
}

export interface GetFunctionsApplicationsApplication {
    compartmentId: string;
    config: {[key: string]: string};
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    imagePolicyConfigs: outputs.GetFunctionsApplicationsApplicationImagePolicyConfig[];
    networkSecurityGroupIds: string[];
    shape: string;
    state: string;
    subnetIds: string[];
    syslogUrl: string;
    timeCreated: string;
    timeUpdated: string;
    traceConfigs: outputs.GetFunctionsApplicationsApplicationTraceConfig[];
}

export interface GetFunctionsApplicationsApplicationImagePolicyConfig {
    isPolicyEnabled: boolean;
    keyDetails: outputs.GetFunctionsApplicationsApplicationImagePolicyConfigKeyDetail[];
}

export interface GetFunctionsApplicationsApplicationImagePolicyConfigKeyDetail {
    kmsKeyId: string;
}

export interface GetFunctionsApplicationsApplicationTraceConfig {
    domainId: string;
    isEnabled: boolean;
}

export interface GetFunctionsApplicationsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetFunctionsFunctionProvisionedConcurrencyConfig {
    count: number;
    strategy: string;
}

export interface GetFunctionsFunctionSourceDetail {
    pbfListingId: string;
    sourceType: string;
}

export interface GetFunctionsFunctionTraceConfig {
    isEnabled: boolean;
}

export interface GetFunctionsFunctionsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetFunctionsFunctionsFunction {
    applicationId: string;
    compartmentId: string;
    config: {[key: string]: string};
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    image: string;
    imageDigest: string;
    invokeEndpoint: string;
    memoryInMbs: string;
    provisionedConcurrencyConfigs: outputs.GetFunctionsFunctionsFunctionProvisionedConcurrencyConfig[];
    shape: string;
    sourceDetails: outputs.GetFunctionsFunctionsFunctionSourceDetail[];
    state: string;
    timeCreated: string;
    timeUpdated: string;
    timeoutInSeconds: number;
    traceConfigs: outputs.GetFunctionsFunctionsFunctionTraceConfig[];
}

export interface GetFunctionsFunctionsFunctionProvisionedConcurrencyConfig {
    count: number;
    strategy: string;
}

export interface GetFunctionsFunctionsFunctionSourceDetail {
    pbfListingId: string;
    sourceType: string;
}

export interface GetFunctionsFunctionsFunctionTraceConfig {
    isEnabled: boolean;
}

export interface GetFunctionsPbfListingPublisherDetail {
    name: string;
}

export interface GetFunctionsPbfListingTrigger {
    name: string;
}

export interface GetFunctionsPbfListingTriggersFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetFunctionsPbfListingTriggersTriggersCollection {
    items: outputs.GetFunctionsPbfListingTriggersTriggersCollectionItem[];
}

export interface GetFunctionsPbfListingTriggersTriggersCollectionItem {
    name: string;
}

export interface GetFunctionsPbfListingVersionConfig {
    description: string;
    isOptional: boolean;
    key: string;
}

export interface GetFunctionsPbfListingVersionRequirement {
    minMemoryRequiredInMbs: string;
    policies: outputs.GetFunctionsPbfListingVersionRequirementPolicy[];
}

export interface GetFunctionsPbfListingVersionRequirementPolicy {
    description: string;
    policy: string;
}

export interface GetFunctionsPbfListingVersionTrigger {
    name: string;
}

export interface GetFunctionsPbfListingVersionsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetFunctionsPbfListingVersionsPbfListingVersionsCollection {
    items: outputs.GetFunctionsPbfListingVersionsPbfListingVersionsCollectionItem[];
}

export interface GetFunctionsPbfListingVersionsPbfListingVersionsCollectionItem {
    changeSummary: string;
    configs: outputs.GetFunctionsPbfListingVersionsPbfListingVersionsCollectionItemConfig[];
    definedTags: {[key: string]: string};
    freeformTags: {[key: string]: string};
    id: string;
    name: string;
    pbfListingId: string;
    requirements: outputs.GetFunctionsPbfListingVersionsPbfListingVersionsCollectionItemRequirement[];
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
    triggers: outputs.GetFunctionsPbfListingVersionsPbfListingVersionsCollectionItemTrigger[];
}

export interface GetFunctionsPbfListingVersionsPbfListingVersionsCollectionItemConfig {
    description: string;
    isOptional: boolean;
    key: string;
}

export interface GetFunctionsPbfListingVersionsPbfListingVersionsCollectionItemRequirement {
    minMemoryRequiredInMbs: string;
    policies: outputs.GetFunctionsPbfListingVersionsPbfListingVersionsCollectionItemRequirementPolicy[];
}

export interface GetFunctionsPbfListingVersionsPbfListingVersionsCollectionItemRequirementPolicy {
    description: string;
    policy: string;
}

export interface GetFunctionsPbfListingVersionsPbfListingVersionsCollectionItemTrigger {
    name: string;
}

export interface GetFunctionsPbfListingsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetFunctionsPbfListingsPbfListingsCollection {
    items: outputs.GetFunctionsPbfListingsPbfListingsCollectionItem[];
}

export interface GetFunctionsPbfListingsPbfListingsCollectionItem {
    definedTags: {[key: string]: string};
    description: string;
    freeformTags: {[key: string]: string};
    id: string;
    name: string;
    publisherDetails: outputs.GetFunctionsPbfListingsPbfListingsCollectionItemPublisherDetail[];
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
    triggers: outputs.GetFunctionsPbfListingsPbfListingsCollectionItemTrigger[];
}

export interface GetFunctionsPbfListingsPbfListingsCollectionItemPublisherDetail {
    name: string;
}

export interface GetFunctionsPbfListingsPbfListingsCollectionItemTrigger {
    name: string;
}

export interface GetFusionAppsFusionEnvironmentAdminUserItem {
    emailAddress: string;
    firstName: string;
    lastName: string;
    username: string;
}

export interface GetFusionAppsFusionEnvironmentAdminUsersAdminUserCollection {
    items: outputs.GetFusionAppsFusionEnvironmentAdminUsersAdminUserCollectionItem[];
}

export interface GetFusionAppsFusionEnvironmentAdminUsersAdminUserCollectionItem {
    emailAddress: string;
    firstName: string;
    fusionEnvironmentId: string;
    id: string;
    items: outputs.GetFusionAppsFusionEnvironmentAdminUsersAdminUserCollectionItemItem[];
    lastName: string;
    password: string;
    username: string;
}

export interface GetFusionAppsFusionEnvironmentAdminUsersAdminUserCollectionItemItem {
    emailAddress: string;
    firstName: string;
    lastName: string;
    username: string;
}

export interface GetFusionAppsFusionEnvironmentAdminUsersFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetFusionAppsFusionEnvironmentCreateFusionEnvironmentAdminUserDetail {
    emailAddress: string;
    firstName: string;
    lastName: string;
    password: string;
    username: string;
}

export interface GetFusionAppsFusionEnvironmentDataMaskingActivitiesDataMaskingActivityCollection {
    items: outputs.GetFusionAppsFusionEnvironmentDataMaskingActivitiesDataMaskingActivityCollectionItem[];
}

export interface GetFusionAppsFusionEnvironmentDataMaskingActivitiesDataMaskingActivityCollectionItem {
    fusionEnvironmentId: string;
    id: string;
    isResumeDataMasking: boolean;
    state: string;
    timeMaskingFinish: string;
    timeMaskingStart: string;
}

export interface GetFusionAppsFusionEnvironmentDataMaskingActivitiesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetFusionAppsFusionEnvironmentFamiliesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetFusionAppsFusionEnvironmentFamiliesFusionEnvironmentFamilyCollection {
    items: outputs.GetFusionAppsFusionEnvironmentFamiliesFusionEnvironmentFamilyCollectionItem[];
}

export interface GetFusionAppsFusionEnvironmentFamiliesFusionEnvironmentFamilyCollectionItem {
    compartmentId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    familyMaintenancePolicies: outputs.GetFusionAppsFusionEnvironmentFamiliesFusionEnvironmentFamilyCollectionItemFamilyMaintenancePolicy[];
    freeformTags: {[key: string]: string};
    id: string;
    isSubscriptionUpdateNeeded: boolean;
    lifecycleDetails: string;
    state: string;
    subscriptionIds: string[];
    systemName: string;
    timeCreated: string;
    timeUpdated: string;
}

export interface GetFusionAppsFusionEnvironmentFamiliesFusionEnvironmentFamilyCollectionItemFamilyMaintenancePolicy {
    concurrentMaintenance: string;
    isMonthlyPatchingEnabled: boolean;
    quarterlyUpgradeBeginTimes: string;
}

export interface GetFusionAppsFusionEnvironmentFamilyFamilyMaintenancePolicy {
    concurrentMaintenance: string;
    isMonthlyPatchingEnabled: boolean;
    quarterlyUpgradeBeginTimes: string;
}

export interface GetFusionAppsFusionEnvironmentFamilyLimitsAndUsageDevelopmentLimitAndUsage {
    limit: number;
    usage: number;
}

export interface GetFusionAppsFusionEnvironmentFamilyLimitsAndUsageProductionLimitAndUsage {
    limit: number;
    usage: number;
}

export interface GetFusionAppsFusionEnvironmentFamilyLimitsAndUsageTestLimitAndUsage {
    limit: number;
    usage: number;
}

export interface GetFusionAppsFusionEnvironmentFamilySubscriptionDetailSubscription {
    classicSubscriptionId: string;
    id: string;
    serviceName: string;
    skuses: outputs.GetFusionAppsFusionEnvironmentFamilySubscriptionDetailSubscriptionSkus[];
}

export interface GetFusionAppsFusionEnvironmentFamilySubscriptionDetailSubscriptionSkus {
    description: string;
    licensePartDescription: string;
    metricName: string;
    quantity: number;
    sku: string;
}

export interface GetFusionAppsFusionEnvironmentKmsKeyInfo {
    activeKeyId: string;
    activeKeyVersion: string;
    currentKeyLifecycleState: string;
    scheduledKeyId: string;
    scheduledKeyStatus: string;
    scheduledKeyVersion: string;
    scheduledLifecycleState: string;
}

export interface GetFusionAppsFusionEnvironmentMaintenancePolicy {
    environmentMaintenanceOverride: string;
    monthlyPatchingOverride: string;
    quarterlyUpgradeBeginTimes: outputs.GetFusionAppsFusionEnvironmentMaintenancePolicyQuarterlyUpgradeBeginTime[];
}

export interface GetFusionAppsFusionEnvironmentMaintenancePolicyQuarterlyUpgradeBeginTime {
    beginTimesValue: string;
    overrideType: string;
}

export interface GetFusionAppsFusionEnvironmentRefresh {
    sourceFusionEnvironmentId: string;
    timeFinished: string;
    timeOfRestorationPoint: string;
}

export interface GetFusionAppsFusionEnvironmentRefreshActivitiesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetFusionAppsFusionEnvironmentRefreshActivitiesRefreshActivityCollection {
    items: outputs.GetFusionAppsFusionEnvironmentRefreshActivitiesRefreshActivityCollectionItem[];
}

export interface GetFusionAppsFusionEnvironmentRefreshActivitiesRefreshActivityCollectionItem {
    displayName: string;
    fusionEnvironmentId: string;
    id: string;
    lifecycleDetails: string;
    refreshActivityId: string;
    refreshIssueDetailsLists: outputs.GetFusionAppsFusionEnvironmentRefreshActivitiesRefreshActivityCollectionItemRefreshIssueDetailsList[];
    serviceAvailability: string;
    sourceFusionEnvironmentId: string;
    state: string;
    timeAccepted: string;
    timeExpectedFinish: string;
    timeFinished: string;
    timeOfRestorationPoint: string;
    timeUpdated: string;
}

export interface GetFusionAppsFusionEnvironmentRefreshActivitiesRefreshActivityCollectionItemRefreshIssueDetailsList {
    refreshIssues: string;
}

export interface GetFusionAppsFusionEnvironmentRefreshActivityRefreshIssueDetailsList {
    refreshIssues: string;
}

export interface GetFusionAppsFusionEnvironmentRule {
    action: string;
    conditions: outputs.GetFusionAppsFusionEnvironmentRuleCondition[];
    description: string;
}

export interface GetFusionAppsFusionEnvironmentRuleCondition {
    attributeName: string;
    attributeValue: string;
}

export interface GetFusionAppsFusionEnvironmentScheduledActivitiesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetFusionAppsFusionEnvironmentScheduledActivitiesScheduledActivityCollection {
    items: outputs.GetFusionAppsFusionEnvironmentScheduledActivitiesScheduledActivityCollectionItem[];
}

export interface GetFusionAppsFusionEnvironmentScheduledActivitiesScheduledActivityCollectionItem {
    actions: outputs.GetFusionAppsFusionEnvironmentScheduledActivitiesScheduledActivityCollectionItemAction[];
    delayInHours: number;
    displayName: string;
    freeformTags: {[key: string]: string};
    fusionEnvironmentId: string;
    id: string;
    lifecycleDetails: string;
    runCycle: string;
    serviceAvailability: string;
    state: string;
    timeAccepted: string;
    timeExpectedFinish: string;
    timeFinished: string;
    timeScheduledStart: string;
    timeUpdated: string;
}

export interface GetFusionAppsFusionEnvironmentScheduledActivitiesScheduledActivityCollectionItemAction {
    actionType: string;
    artifact: string;
    category: string;
    description: string;
    mode: string;
    qualifier: string;
    referenceKey: string;
    state: string;
    version: string;
}

export interface GetFusionAppsFusionEnvironmentScheduledActivityAction {
    actionType: string;
    artifact: string;
    category: string;
    description: string;
    mode: string;
    qualifier: string;
    referenceKey: string;
    state: string;
    version: string;
}

export interface GetFusionAppsFusionEnvironmentServiceAttachmentsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetFusionAppsFusionEnvironmentServiceAttachmentsServiceAttachmentCollection {
    items: outputs.GetFusionAppsFusionEnvironmentServiceAttachmentsServiceAttachmentCollectionItem[];
}

export interface GetFusionAppsFusionEnvironmentServiceAttachmentsServiceAttachmentCollectionItem {
    compartmentId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    fusionEnvironmentId: string;
    id: string;
    isSkuBased: boolean;
    serviceInstanceId: string;
    serviceInstanceType: string;
    serviceUrl: string;
    state: string;
    timeCreated: string;
    timeUpdated: string;
}

export interface GetFusionAppsFusionEnvironmentTimeAvailableForRefreshItem {
    timeAvailableForRefresh: string;
}

export interface GetFusionAppsFusionEnvironmentTimeAvailableForRefreshsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetFusionAppsFusionEnvironmentTimeAvailableForRefreshsTimeAvailableForRefreshCollection {
    items: outputs.GetFusionAppsFusionEnvironmentTimeAvailableForRefreshsTimeAvailableForRefreshCollectionItem[];
}

export interface GetFusionAppsFusionEnvironmentTimeAvailableForRefreshsTimeAvailableForRefreshCollectionItem {
    timeAvailableForRefresh: string;
}

export interface GetFusionAppsFusionEnvironmentsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetFusionAppsFusionEnvironmentsFusionEnvironmentCollection {
    items: outputs.GetFusionAppsFusionEnvironmentsFusionEnvironmentCollectionItem[];
}

export interface GetFusionAppsFusionEnvironmentsFusionEnvironmentCollectionItem {
    additionalLanguagePacks: string[];
    appliedPatchBundles: string[];
    compartmentId: string;
    createFusionEnvironmentAdminUserDetails: outputs.GetFusionAppsFusionEnvironmentsFusionEnvironmentCollectionItemCreateFusionEnvironmentAdminUserDetail[];
    definedTags: {[key: string]: string};
    displayName: string;
    dnsPrefix: string;
    domainId: string;
    freeformTags: {[key: string]: string};
    fusionEnvironmentFamilyId: string;
    fusionEnvironmentType: string;
    id: string;
    idcsDomainUrl: string;
    isBreakGlassEnabled: boolean;
    kmsKeyId: string;
    kmsKeyInfos: outputs.GetFusionAppsFusionEnvironmentsFusionEnvironmentCollectionItemKmsKeyInfo[];
    lifecycleDetails: string;
    lockboxId: string;
    maintenancePolicies: outputs.GetFusionAppsFusionEnvironmentsFusionEnvironmentCollectionItemMaintenancePolicy[];
    publicUrl: string;
    refreshes: outputs.GetFusionAppsFusionEnvironmentsFusionEnvironmentCollectionItemRefresh[];
    rules: outputs.GetFusionAppsFusionEnvironmentsFusionEnvironmentCollectionItemRule[];
    state: string;
    subscriptionIds: string[];
    systemName: string;
    timeCreated: string;
    timeUpcomingMaintenance: string;
    timeUpdated: string;
    version: string;
}

export interface GetFusionAppsFusionEnvironmentsFusionEnvironmentCollectionItemCreateFusionEnvironmentAdminUserDetail {
    emailAddress: string;
    firstName: string;
    lastName: string;
    password: string;
    username: string;
}

export interface GetFusionAppsFusionEnvironmentsFusionEnvironmentCollectionItemKmsKeyInfo {
    activeKeyId: string;
    activeKeyVersion: string;
    currentKeyLifecycleState: string;
    scheduledKeyId: string;
    scheduledKeyStatus: string;
    scheduledKeyVersion: string;
    scheduledLifecycleState: string;
}

export interface GetFusionAppsFusionEnvironmentsFusionEnvironmentCollectionItemMaintenancePolicy {
    environmentMaintenanceOverride: string;
    monthlyPatchingOverride: string;
    quarterlyUpgradeBeginTimes: outputs.GetFusionAppsFusionEnvironmentsFusionEnvironmentCollectionItemMaintenancePolicyQuarterlyUpgradeBeginTime[];
}

export interface GetFusionAppsFusionEnvironmentsFusionEnvironmentCollectionItemMaintenancePolicyQuarterlyUpgradeBeginTime {
    beginTimesValue: string;
    overrideType: string;
}

export interface GetFusionAppsFusionEnvironmentsFusionEnvironmentCollectionItemRefresh {
    sourceFusionEnvironmentId: string;
    timeFinished: string;
    timeOfRestorationPoint: string;
}

export interface GetFusionAppsFusionEnvironmentsFusionEnvironmentCollectionItemRule {
    action: string;
    conditions: outputs.GetFusionAppsFusionEnvironmentsFusionEnvironmentCollectionItemRuleCondition[];
    description: string;
}

export interface GetFusionAppsFusionEnvironmentsFusionEnvironmentCollectionItemRuleCondition {
    attributeName: string;
    attributeValue: string;
}

export interface GetGenerativeAiDedicatedAiClusterCapacity {
    capacityType: string;
    totalEndpointCapacity: number;
    usedEndpointCapacity: number;
}

export interface GetGenerativeAiDedicatedAiClustersDedicatedAiClusterCollection {
    items: outputs.GetGenerativeAiDedicatedAiClustersDedicatedAiClusterCollectionItem[];
}

export interface GetGenerativeAiDedicatedAiClustersDedicatedAiClusterCollectionItem {
    capacities: outputs.GetGenerativeAiDedicatedAiClustersDedicatedAiClusterCollectionItemCapacity[];
    compartmentId: string;
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    lifecycleDetails: string;
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
    type: string;
    unitCount: number;
    unitShape: string;
}

export interface GetGenerativeAiDedicatedAiClustersDedicatedAiClusterCollectionItemCapacity {
    capacityType: string;
    totalEndpointCapacity: number;
    usedEndpointCapacity: number;
}

export interface GetGenerativeAiDedicatedAiClustersFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetGenerativeAiEndpointContentModerationConfig {
    isEnabled: boolean;
}

export interface GetGenerativeAiEndpointsEndpointCollection {
    items: outputs.GetGenerativeAiEndpointsEndpointCollectionItem[];
}

export interface GetGenerativeAiEndpointsEndpointCollectionItem {
    compartmentId: string;
    contentModerationConfigs: outputs.GetGenerativeAiEndpointsEndpointCollectionItemContentModerationConfig[];
    dedicatedAiClusterId: string;
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    lifecycleDetails: string;
    modelId: string;
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
}

export interface GetGenerativeAiEndpointsEndpointCollectionItemContentModerationConfig {
    isEnabled: boolean;
}

export interface GetGenerativeAiEndpointsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetGenerativeAiModelFineTuneDetail {
    dedicatedAiClusterId: string;
    trainingConfigs: outputs.GetGenerativeAiModelFineTuneDetailTrainingConfig[];
    trainingDatasets: outputs.GetGenerativeAiModelFineTuneDetailTrainingDataset[];
}

export interface GetGenerativeAiModelFineTuneDetailTrainingConfig {
    earlyStoppingPatience: number;
    earlyStoppingThreshold: number;
    learningRate: number;
    logModelMetricsIntervalInSteps: number;
    loraAlpha: number;
    loraDropout: number;
    loraR: number;
    numOfLastLayers: number;
    totalTrainingEpochs: number;
    trainingBatchSize: number;
    trainingConfigType: string;
}

export interface GetGenerativeAiModelFineTuneDetailTrainingDataset {
    bucket: string;
    datasetType: string;
    namespace: string;
    object: string;
}

export interface GetGenerativeAiModelModelMetric {
    finalAccuracy: number;
    finalLoss: number;
    modelMetricsType: string;
}

export interface GetGenerativeAiModelsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetGenerativeAiModelsModelCollection {
    items: outputs.GetGenerativeAiModelsModelCollectionItem[];
}

export interface GetGenerativeAiModelsModelCollectionItem {
    baseModelId: string;
    capabilities: string[];
    compartmentId: string;
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    fineTuneDetails: outputs.GetGenerativeAiModelsModelCollectionItemFineTuneDetail[];
    freeformTags: {[key: string]: string};
    id: string;
    isLongTermSupported: boolean;
    lifecycleDetails: string;
    modelMetrics: outputs.GetGenerativeAiModelsModelCollectionItemModelMetric[];
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeDeprecated: string;
    timeUpdated: string;
    type: string;
    vendor: string;
    version: string;
}

export interface GetGenerativeAiModelsModelCollectionItemFineTuneDetail {
    dedicatedAiClusterId: string;
    trainingConfigs: outputs.GetGenerativeAiModelsModelCollectionItemFineTuneDetailTrainingConfig[];
    trainingDatasets: outputs.GetGenerativeAiModelsModelCollectionItemFineTuneDetailTrainingDataset[];
}

export interface GetGenerativeAiModelsModelCollectionItemFineTuneDetailTrainingConfig {
    earlyStoppingPatience: number;
    earlyStoppingThreshold: number;
    learningRate: number;
    logModelMetricsIntervalInSteps: number;
    loraAlpha: number;
    loraDropout: number;
    loraR: number;
    numOfLastLayers: number;
    totalTrainingEpochs: number;
    trainingBatchSize: number;
    trainingConfigType: string;
}

export interface GetGenerativeAiModelsModelCollectionItemFineTuneDetailTrainingDataset {
    bucket: string;
    datasetType: string;
    namespace: string;
    object: string;
}

export interface GetGenerativeAiModelsModelCollectionItemModelMetric {
    finalAccuracy: number;
    finalLoss: number;
    modelMetricsType: string;
}

export interface GetGoldenGateConnectionAdditionalAttribute {
    name: string;
    value: string;
}

export interface GetGoldenGateConnectionAssignmentsConnectionAssignmentCollection {
    items: outputs.GetGoldenGateConnectionAssignmentsConnectionAssignmentCollectionItem[];
}

export interface GetGoldenGateConnectionAssignmentsConnectionAssignmentCollectionItem {
    aliasName: string;
    compartmentId: string;
    connectionId: string;
    deploymentId: string;
    id: string;
    isLockOverride: boolean;
    state: string;
    timeCreated: string;
    timeUpdated: string;
}

export interface GetGoldenGateConnectionAssignmentsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetGoldenGateConnectionBootstrapServer {
    host: string;
    port: number;
    privateIp: string;
}

export interface GetGoldenGateConnectionIngressIp {
    ingressIp: string;
}

export interface GetGoldenGateConnectionLock {
    message: string;
    relatedResourceId: string;
    timeCreated: string;
    type: string;
}

export interface GetGoldenGateConnectionsConnectionCollection {
    items: outputs.GetGoldenGateConnectionsConnectionCollectionItem[];
}

export interface GetGoldenGateConnectionsConnectionCollectionItem {
    accessKeyId: string;
    accountKey: string;
    accountName: string;
    additionalAttributes: outputs.GetGoldenGateConnectionsConnectionCollectionItemAdditionalAttribute[];
    authenticationMode: string;
    authenticationType: string;
    azureTenantId: string;
    bootstrapServers: outputs.GetGoldenGateConnectionsConnectionCollectionItemBootstrapServer[];
    clientId: string;
    clientSecret: string;
    compartmentId: string;
    connectionFactory: string;
    connectionString: string;
    connectionType: string;
    connectionUrl: string;
    consumerProperties: string;
    coreSiteXml: string;
    databaseId: string;
    databaseName: string;
    dbSystemId: string;
    definedTags: {[key: string]: string};
    deploymentId: string;
    description: string;
    displayName: string;
    endpoint: string;
    fingerprint: string;
    freeformTags: {[key: string]: string};
    host: string;
    id: string;
    ingressIps: outputs.GetGoldenGateConnectionsConnectionCollectionItemIngressIp[];
    isLockOverride: boolean;
    jndiConnectionFactory: string;
    jndiInitialContextFactory: string;
    jndiProviderUrl: string;
    jndiSecurityCredentials: string;
    jndiSecurityPrincipal: string;
    keyId: string;
    keyStore: string;
    keyStorePassword: string;
    lifecycleDetails: string;
    locks: outputs.GetGoldenGateConnectionsConnectionCollectionItemLock[];
    nsgIds: string[];
    password: string;
    port: number;
    privateIp: string;
    privateKeyFile: string;
    privateKeyPassphrase: string;
    producerProperties: string;
    publicKeyFingerprint: string;
    redisClusterId: string;
    region: string;
    routingMethod: string;
    sasToken: string;
    secretAccessKey: string;
    securityProtocol: string;
    servers: string;
    serviceAccountKeyFile: string;
    sessionMode: string;
    shouldUseJndi: boolean;
    shouldValidateServerCertificate: boolean;
    sslCa: string;
    sslCert: string;
    sslClientKeystash: string;
    sslClientKeystoredb: string;
    sslCrl: string;
    sslKey: string;
    sslKeyPassword: string;
    sslMode: string;
    sslServerCertificate: string;
    state: string;
    streamPoolId: string;
    subnetId: string;
    systemTags: {[key: string]: string};
    technologyType: string;
    tenancyId: string;
    timeCreated: string;
    timeUpdated: string;
    trustStore: string;
    trustStorePassword: string;
    url: string;
    userId: string;
    username: string;
    vaultId: string;
    wallet: string;
}

export interface GetGoldenGateConnectionsConnectionCollectionItemAdditionalAttribute {
    name: string;
    value: string;
}

export interface GetGoldenGateConnectionsConnectionCollectionItemBootstrapServer {
    host: string;
    port: number;
    privateIp: string;
}

export interface GetGoldenGateConnectionsConnectionCollectionItemIngressIp {
    ingressIp: string;
}

export interface GetGoldenGateConnectionsConnectionCollectionItemLock {
    message: string;
    relatedResourceId: string;
    timeCreated: string;
    type: string;
}

export interface GetGoldenGateConnectionsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetGoldenGateDatabaseRegistrationsDatabaseRegistrationCollection {
    items: outputs.GetGoldenGateDatabaseRegistrationsDatabaseRegistrationCollectionItem[];
}

export interface GetGoldenGateDatabaseRegistrationsDatabaseRegistrationCollectionItem {
    aliasName: string;
    compartmentId: string;
    connectionString: string;
    databaseId: string;
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    fqdn: string;
    freeformTags: {[key: string]: string};
    id: string;
    ipAddress: string;
    keyId: string;
    lifecycleDetails: string;
    password: string;
    rcePrivateIp: string;
    secretCompartmentId: string;
    secretId: string;
    sessionMode: string;
    state: string;
    subnetId: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
    username: string;
    vaultId: string;
    wallet: string;
}

export interface GetGoldenGateDatabaseRegistrationsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetGoldenGateDeploymentBackupLock {
    message: string;
    relatedResourceId: string;
    timeCreated: string;
    type: string;
}

export interface GetGoldenGateDeploymentBackupsDeploymentBackupCollection {
    items: outputs.GetGoldenGateDeploymentBackupsDeploymentBackupCollectionItem[];
}

export interface GetGoldenGateDeploymentBackupsDeploymentBackupCollectionItem {
    backupType: string;
    bucket: string;
    compartmentId: string;
    definedTags: {[key: string]: string};
    deploymentId: string;
    deploymentType: string;
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    isAutomatic: boolean;
    isLockOverride: boolean;
    lifecycleDetails: string;
    locks: outputs.GetGoldenGateDeploymentBackupsDeploymentBackupCollectionItemLock[];
    namespace: string;
    object: string;
    oggVersion: string;
    sizeInBytes: number;
    state: string;
    systemTags: {[key: string]: string};
    timeBackupFinished: string;
    timeCreated: string;
    timeOfBackup: string;
    timeUpdated: string;
}

export interface GetGoldenGateDeploymentBackupsDeploymentBackupCollectionItemLock {
    message: string;
    relatedResourceId: string;
    timeCreated: string;
    type: string;
}

export interface GetGoldenGateDeploymentBackupsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetGoldenGateDeploymentCertificatesCertificateCollection {
    items: outputs.GetGoldenGateDeploymentCertificatesCertificateCollectionItem[];
}

export interface GetGoldenGateDeploymentCertificatesCertificateCollectionItem {
    authorityKeyId: string;
    certificateContent: string;
    deploymentId: string;
    isCa: boolean;
    isLockOverride: boolean;
    isSelfSigned: boolean;
    issuer: string;
    key: string;
    md5hash: string;
    publicKey: string;
    publicKeyAlgorithm: string;
    publicKeySize: string;
    serial: string;
    sha1hash: string;
    state: string;
    subject: string;
    subjectKeyId: string;
    timeCreated: string;
    timeValidFrom: string;
    timeValidTo: string;
    version: string;
}

export interface GetGoldenGateDeploymentCertificatesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetGoldenGateDeploymentDeploymentDiagnosticData {
    bucket: string;
    diagnosticState: string;
    namespace: string;
    object: string;
    timeDiagnosticEnd: string;
    timeDiagnosticStart: string;
}

export interface GetGoldenGateDeploymentIngressIp {
    ingressIp: string;
}

export interface GetGoldenGateDeploymentLock {
    message: string;
    relatedResourceId: string;
    timeCreated: string;
    type: string;
}

export interface GetGoldenGateDeploymentMaintenanceConfiguration {
    bundleReleaseUpgradePeriodInDays: number;
    interimReleaseUpgradePeriodInDays: number;
    isInterimReleaseAutoUpgradeEnabled: boolean;
    majorReleaseUpgradePeriodInDays: number;
    securityPatchUpgradePeriodInDays: number;
}

export interface GetGoldenGateDeploymentMaintenanceWindow {
    day: string;
    startHour: number;
}

export interface GetGoldenGateDeploymentOggData {
    adminPassword: string;
    adminUsername: string;
    certificate: string;
    credentialStore: string;
    deploymentName: string;
    identityDomainId: string;
    key: string;
    oggVersion: string;
    passwordSecretId: string;
}

export interface GetGoldenGateDeploymentTypeItem {
    category: string;
    connectionTypes: string[];
    deploymentType: string;
    displayName: string;
    sourceTechnologies: string[];
    targetTechnologies: string[];
}

export interface GetGoldenGateDeploymentTypesDeploymentTypeCollection {
    items: outputs.GetGoldenGateDeploymentTypesDeploymentTypeCollectionItem[];
}

export interface GetGoldenGateDeploymentTypesDeploymentTypeCollectionItem {
    category: string;
    connectionTypes: string[];
    defaultUsername: string;
    deploymentType: string;
    displayName: string;
    oggVersion: string;
    sourceTechnologies: string[];
    supportedTechnologiesUrl: string;
    targetTechnologies: string[];
}

export interface GetGoldenGateDeploymentTypesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetGoldenGateDeploymentUpgradesDeploymentUpgradeCollection {
    items: outputs.GetGoldenGateDeploymentUpgradesDeploymentUpgradeCollectionItem[];
}

export interface GetGoldenGateDeploymentUpgradesDeploymentUpgradeCollectionItem {
    compartmentId: string;
    definedTags: {[key: string]: string};
    deploymentId: string;
    deploymentUpgradeType: string;
    description: string;
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    isCancelAllowed: boolean;
    isRescheduleAllowed: boolean;
    isRollbackAllowed: boolean;
    isSecurityFix: boolean;
    isSnoozed: boolean;
    lifecycleDetails: string;
    lifecycleSubState: string;
    oggVersion: string;
    previousOggVersion: string;
    releaseType: string;
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeFinished: string;
    timeOggVersionSupportedUntil: string;
    timeReleased: string;
    timeSchedule: string;
    timeScheduleMax: string;
    timeSnoozedUntil: string;
    timeStarted: string;
    timeUpdated: string;
}

export interface GetGoldenGateDeploymentUpgradesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetGoldenGateDeploymentVersionsDeploymentVersionCollection {
    items: outputs.GetGoldenGateDeploymentVersionsDeploymentVersionCollectionItem[];
}

export interface GetGoldenGateDeploymentVersionsDeploymentVersionCollectionItem {
    deploymentType: string;
    isSecurityFix: boolean;
    oggVersion: string;
    releaseType: string;
    timeReleased: string;
    timeSupportedUntil: string;
}

export interface GetGoldenGateDeploymentVersionsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetGoldenGateDeploymentsDeploymentCollection {
    items: outputs.GetGoldenGateDeploymentsDeploymentCollectionItem[];
}

export interface GetGoldenGateDeploymentsDeploymentCollectionItem {
    compartmentId: string;
    cpuCoreCount: number;
    definedTags: {[key: string]: string};
    deploymentBackupId: string;
    deploymentDiagnosticDatas: outputs.GetGoldenGateDeploymentsDeploymentCollectionItemDeploymentDiagnosticData[];
    deploymentType: string;
    deploymentUrl: string;
    description: string;
    displayName: string;
    fqdn: string;
    freeformTags: {[key: string]: string};
    id: string;
    ingressIps: outputs.GetGoldenGateDeploymentsDeploymentCollectionItemIngressIp[];
    isAutoScalingEnabled: boolean;
    isHealthy: boolean;
    isLatestVersion: boolean;
    isLockOverride: boolean;
    isPublic: boolean;
    isStorageUtilizationLimitExceeded: boolean;
    licenseModel: string;
    lifecycleDetails: string;
    lifecycleSubState: string;
    loadBalancerId: string;
    loadBalancerSubnetId: string;
    locks: outputs.GetGoldenGateDeploymentsDeploymentCollectionItemLock[];
    maintenanceConfigurations: outputs.GetGoldenGateDeploymentsDeploymentCollectionItemMaintenanceConfiguration[];
    maintenanceWindows: outputs.GetGoldenGateDeploymentsDeploymentCollectionItemMaintenanceWindow[];
    nextMaintenanceActionType: string;
    nextMaintenanceDescription: string;
    nsgIds: string[];
    oggDatas: outputs.GetGoldenGateDeploymentsDeploymentCollectionItemOggData[];
    privateIpAddress: string;
    publicIpAddress: string;
    state: string;
    storageUtilizationInBytes: string;
    subnetId: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeOfNextMaintenance: string;
    timeOggVersionSupportedUntil: string;
    timeUpdated: string;
    timeUpgradeRequired: string;
}

export interface GetGoldenGateDeploymentsDeploymentCollectionItemDeploymentDiagnosticData {
    bucket: string;
    diagnosticState: string;
    namespace: string;
    object: string;
    timeDiagnosticEnd: string;
    timeDiagnosticStart: string;
}

export interface GetGoldenGateDeploymentsDeploymentCollectionItemIngressIp {
    ingressIp: string;
}

export interface GetGoldenGateDeploymentsDeploymentCollectionItemLock {
    message: string;
    relatedResourceId: string;
    timeCreated: string;
    type: string;
}

export interface GetGoldenGateDeploymentsDeploymentCollectionItemMaintenanceConfiguration {
    bundleReleaseUpgradePeriodInDays: number;
    interimReleaseUpgradePeriodInDays: number;
    isInterimReleaseAutoUpgradeEnabled: boolean;
    majorReleaseUpgradePeriodInDays: number;
    securityPatchUpgradePeriodInDays: number;
}

export interface GetGoldenGateDeploymentsDeploymentCollectionItemMaintenanceWindow {
    day: string;
    startHour: number;
}

export interface GetGoldenGateDeploymentsDeploymentCollectionItemOggData {
    adminPassword: string;
    adminUsername: string;
    certificate: string;
    credentialStore: string;
    deploymentName: string;
    identityDomainId: string;
    key: string;
    oggVersion: string;
    passwordSecretId: string;
}

export interface GetGoldenGateDeploymentsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetGoldenGateMessageItem {
    deploymentMessage: string;
    deploymentMessageStatus: string;
    id: string;
}

export interface GetGoldenGateMessagesDeploymentMessagesCollection {
    items: outputs.GetGoldenGateMessagesDeploymentMessagesCollectionItem[];
}

export interface GetGoldenGateMessagesDeploymentMessagesCollectionItem {
    deploymentMessage: string;
    deploymentMessageStatus: string;
    id: string;
}

export interface GetGoldenGateMessagesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetGoldenGateTrailFileItem {
    consumers: string[];
    displayName: string;
    maxSequenceNumber: string;
    minSequenceNumber: string;
    numberOfSequences: number;
    producer: string;
    sizeInBytes: number;
    timeLastUpdated: string;
    trailFileId: string;
}

export interface GetGoldenGateTrailFilesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetGoldenGateTrailFilesTrailFileCollection {
    items: outputs.GetGoldenGateTrailFilesTrailFileCollectionItem[];
    timeLastFetched: string;
}

export interface GetGoldenGateTrailFilesTrailFileCollectionItem {
    consumers: string[];
    displayName: string;
    maxSequenceNumber: string;
    minSequenceNumber: string;
    numberOfSequences: number;
    producer: string;
    sizeInBytes: number;
    timeLastUpdated: string;
    trailFileId: string;
}

export interface GetGoldenGateTrailSequenceItem {
    displayName: string;
    sequenceId: string;
    sizeInBytes: number;
    timeLastUpdated: string;
}

export interface GetGoldenGateTrailSequencesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetGoldenGateTrailSequencesTrailSequenceCollection {
    items: outputs.GetGoldenGateTrailSequencesTrailSequenceCollectionItem[];
    timeLastFetched: string;
}

export interface GetGoldenGateTrailSequencesTrailSequenceCollectionItem {
    displayName: string;
    sequenceId: string;
    sizeInBytes: number;
    timeLastUpdated: string;
}

export interface GetHealthChecksHttpMonitorsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetHealthChecksHttpMonitorsHttpMonitor {
    compartmentId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    headers: {[key: string]: string};
    homeRegion: string;
    id: string;
    intervalInSeconds: number;
    isEnabled: boolean;
    method: string;
    path: string;
    port: number;
    protocol: string;
    resultsUrl: string;
    targets: string[];
    timeCreated: string;
    timeoutInSeconds: number;
    vantagePointNames: string[];
}

export interface GetHealthChecksHttpProbeResultsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetHealthChecksHttpProbeResultsHttpProbeResult {
    connectEnd: number;
    connectStart: number;
    connections: outputs.GetHealthChecksHttpProbeResultsHttpProbeResultConnection[];
    dns: outputs.GetHealthChecksHttpProbeResultsHttpProbeResultDn[];
    domainLookupEnd: number;
    domainLookupStart: number;
    duration: number;
    encodedBodySize: number;
    errorCategory: string;
    errorMessage: string;
    fetchStart: number;
    isHealthy: boolean;
    isTimedOut: boolean;
    key: string;
    probeConfigurationId: string;
    protocol: string;
    requestStart: number;
    responseEnd: number;
    responseStart: number;
    secureConnectionStart: number;
    startTime: number;
    statusCode: number;
    target: string;
    vantagePointName: string;
}

export interface GetHealthChecksHttpProbeResultsHttpProbeResultConnection {
    address: string;
    connectDuration: number;
    port: number;
    secureConnectDuration: number;
}

export interface GetHealthChecksHttpProbeResultsHttpProbeResultDn {
    addresses: string[];
    domainLookupDuration: number;
}

export interface GetHealthChecksPingMonitorsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetHealthChecksPingMonitorsPingMonitor {
    compartmentId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    homeRegion: string;
    id: string;
    intervalInSeconds: number;
    isEnabled: boolean;
    port: number;
    protocol: string;
    resultsUrl: string;
    targets: string[];
    timeCreated: string;
    timeoutInSeconds: number;
    vantagePointNames: string[];
}

export interface GetHealthChecksPingProbeResultsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetHealthChecksPingProbeResultsPingProbeResult {
    connections: outputs.GetHealthChecksPingProbeResultsPingProbeResultConnection[];
    dns: outputs.GetHealthChecksPingProbeResultsPingProbeResultDn[];
    domainLookupEnd: number;
    domainLookupStart: number;
    errorCategory: string;
    errorMessage: string;
    icmpCode: number;
    isHealthy: boolean;
    isTimedOut: boolean;
    key: string;
    latencyInMs: number;
    probeConfigurationId: string;
    protocol: string;
    startTime: number;
    target: string;
    vantagePointName: string;
}

export interface GetHealthChecksPingProbeResultsPingProbeResultConnection {
    address: string;
    port: number;
}

export interface GetHealthChecksPingProbeResultsPingProbeResultDn {
    addresses: string[];
    domainLookupDuration: number;
}

export interface GetHealthChecksVantagePointsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetHealthChecksVantagePointsHealthChecksVantagePoint {
    displayName: string;
    geos: outputs.GetHealthChecksVantagePointsHealthChecksVantagePointGeo[];
    name: string;
    providerName: string;
    routings: outputs.GetHealthChecksVantagePointsHealthChecksVantagePointRouting[];
}

export interface GetHealthChecksVantagePointsHealthChecksVantagePointGeo {
    adminDivCode: string;
    cityName: string;
    countryCode: string;
    countryName: string;
    geoKey: string;
    latitude: number;
    longitude: number;
}

export interface GetHealthChecksVantagePointsHealthChecksVantagePointRouting {
    asLabel: string;
    asn: number;
    prefix: string;
    weight: number;
}

export interface GetIdentityAllowedDomainLicenseTypesAllowedDomainLicenseType {
    description: string;
    licenseType: string;
    name: string;
}

export interface GetIdentityAllowedDomainLicenseTypesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetIdentityApiKeysApiKey {
    fingerprint: string;
    id: string;
    inactiveStatus: string;
    keyValue: string;
    state: string;
    timeCreated: string;
    userId: string;
}

export interface GetIdentityApiKeysFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetIdentityAuthTokensFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetIdentityAuthTokensToken {
    description: string;
    id: string;
    inactiveState: string;
    state: string;
    timeCreated: string;
    timeExpires: string;
    token: string;
    userId: string;
}

export interface GetIdentityAuthenticationPolicyNetworkPolicy {
    networkSourceIds: string[];
}

export interface GetIdentityAuthenticationPolicyPasswordPolicy {
    isLowercaseCharactersRequired: boolean;
    isNumericCharactersRequired: boolean;
    isSpecialCharactersRequired: boolean;
    isUppercaseCharactersRequired: boolean;
    isUsernameContainmentAllowed: boolean;
    minimumPasswordLength: number;
}

export interface GetIdentityAvailabilityDomainsAvailabilityDomain {
    compartmentId: string;
    id: string;
    name: string;
}

export interface GetIdentityAvailabilityDomainsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetIdentityCompartmentsCompartment {
    compartmentId: string;
    definedTags: {[key: string]: string};
    description: string;
    enableDelete: boolean;
    freeformTags: {[key: string]: string};
    id: string;
    inactiveState: string;
    isAccessible: boolean;
    name: string;
    state: string;
    timeCreated: string;
}

export interface GetIdentityCompartmentsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetIdentityCostTrackingTagsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetIdentityCostTrackingTagsTag {
    compartmentId: string;
    definedTags: {[key: string]: string};
    description: string;
    freeformTags: {[key: string]: string};
    id: string;
    isCostTracking: boolean;
    isRetired: boolean;
    name: string;
    state: string;
    tagNamespaceId: string;
    tagNamespaceName: string;
    timeCreated: string;
    validators: outputs.GetIdentityCostTrackingTagsTagValidator[];
}

export interface GetIdentityCostTrackingTagsTagValidator {
    validatorType: string;
    values: string[];
}

export interface GetIdentityCustomerSecretKeysCustomerSecretKey {
    displayName: string;
    id: string;
    inactiveState: string;
    key: string;
    state: string;
    timeCreated: string;
    timeExpires: string;
    userId: string;
}

export interface GetIdentityCustomerSecretKeysFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetIdentityDbCredentialsDbCredential {
    description: string;
    id: string;
    lifecycleDetails: string;
    password: string;
    state: string;
    timeCreated: string;
    timeExpires: string;
    userId: string;
}

export interface GetIdentityDbCredentialsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetIdentityDomainReplicaRegion {
    region: string;
    state: string;
    url: string;
}

export interface GetIdentityDomainsAccountMgmtInfoApp {
    active: boolean;
    appIcon: string;
    appThumbnail: string;
    audience: string;
    description: string;
    display: string;
    isAliasApp: boolean;
    isAuthoritative: boolean;
    isLoginTarget: boolean;
    isManagedApp: boolean;
    isOauthResource: boolean;
    isOpcService: boolean;
    isUnmanagedApp: boolean;
    loginMechanism: string;
    meterAsOpcService: boolean;
    ref: string;
    serviceTypeUrn: string;
    showInMyApps: boolean;
    value: string;
}

export interface GetIdentityDomainsAccountMgmtInfoIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsAccountMgmtInfoIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsAccountMgmtInfoMatchingOwner {
    display: string;
    email: string;
    ref: string;
    userName: string;
    value: string;
}

export interface GetIdentityDomainsAccountMgmtInfoMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface GetIdentityDomainsAccountMgmtInfoObjectClass {
    display: string;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsAccountMgmtInfoOwner {
    display: string;
    email: string;
    ref: string;
    userName: string;
    value: string;
}

export interface GetIdentityDomainsAccountMgmtInfoResourceType {
    display: string;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsAccountMgmtInfoTag {
    key: string;
    value: string;
}

export interface GetIdentityDomainsAccountMgmtInfoUserWalletArtifact {
    ref: string;
    value: string;
}

export interface GetIdentityDomainsAccountMgmtInfosAccountMgmtInfo {
    accountMgmtInfoId: string;
    accountType: string;
    active: boolean;
    apps: outputs.GetIdentityDomainsAccountMgmtInfosAccountMgmtInfoApp[];
    attributeSets: string[];
    attributes: string;
    authorization: string;
    compartmentOcid: string;
    compositeKey: string;
    deleteInProgress: boolean;
    doNotBackFillGrants: boolean;
    doNotPerformActionOnTarget: boolean;
    domainOcid: string;
    favorite: boolean;
    id: string;
    idcsCreatedBies: outputs.GetIdentityDomainsAccountMgmtInfosAccountMgmtInfoIdcsCreatedBy[];
    idcsEndpoint: string;
    idcsLastModifiedBies: outputs.GetIdentityDomainsAccountMgmtInfosAccountMgmtInfoIdcsLastModifiedBy[];
    idcsLastUpgradedInRelease: string;
    idcsPreventedOperations: string[];
    isAccount: boolean;
    lastAccessed: string;
    matchingOwners: outputs.GetIdentityDomainsAccountMgmtInfosAccountMgmtInfoMatchingOwner[];
    metas: outputs.GetIdentityDomainsAccountMgmtInfosAccountMgmtInfoMeta[];
    name: string;
    objectClasses: outputs.GetIdentityDomainsAccountMgmtInfosAccountMgmtInfoObjectClass[];
    ocid: string;
    operationContext: string;
    owners: outputs.GetIdentityDomainsAccountMgmtInfosAccountMgmtInfoOwner[];
    previewOnly: boolean;
    resourceTypeSchemaVersion: string;
    resourceTypes: outputs.GetIdentityDomainsAccountMgmtInfosAccountMgmtInfoResourceType[];
    schemas: string[];
    syncResponse: string;
    syncSituation: string;
    syncTimestamp: string;
    tags: outputs.GetIdentityDomainsAccountMgmtInfosAccountMgmtInfoTag[];
    tenancyOcid: string;
    uid: string;
    userWalletArtifacts: outputs.GetIdentityDomainsAccountMgmtInfosAccountMgmtInfoUserWalletArtifact[];
}

export interface GetIdentityDomainsAccountMgmtInfosAccountMgmtInfoApp {
    active: boolean;
    appIcon: string;
    appThumbnail: string;
    audience: string;
    description: string;
    display: string;
    isAliasApp: boolean;
    isAuthoritative: boolean;
    isLoginTarget: boolean;
    isManagedApp: boolean;
    isOauthResource: boolean;
    isOpcService: boolean;
    isUnmanagedApp: boolean;
    loginMechanism: string;
    meterAsOpcService: boolean;
    ref: string;
    serviceTypeUrn: string;
    showInMyApps: boolean;
    value: string;
}

export interface GetIdentityDomainsAccountMgmtInfosAccountMgmtInfoIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsAccountMgmtInfosAccountMgmtInfoIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsAccountMgmtInfosAccountMgmtInfoMatchingOwner {
    display: string;
    email: string;
    ref: string;
    userName: string;
    value: string;
}

export interface GetIdentityDomainsAccountMgmtInfosAccountMgmtInfoMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface GetIdentityDomainsAccountMgmtInfosAccountMgmtInfoObjectClass {
    display: string;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsAccountMgmtInfosAccountMgmtInfoOwner {
    display: string;
    email: string;
    ref: string;
    userName: string;
    value: string;
}

export interface GetIdentityDomainsAccountMgmtInfosAccountMgmtInfoResourceType {
    display: string;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsAccountMgmtInfosAccountMgmtInfoTag {
    key: string;
    value: string;
}

export interface GetIdentityDomainsAccountMgmtInfosAccountMgmtInfoUserWalletArtifact {
    ref: string;
    value: string;
}

export interface GetIdentityDomainsAccountRecoverySettingIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsAccountRecoverySettingIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsAccountRecoverySettingMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface GetIdentityDomainsAccountRecoverySettingTag {
    key: string;
    value: string;
}

export interface GetIdentityDomainsAccountRecoverySettingsAccountRecoverySetting {
    accountRecoverySettingId: string;
    attributeSets: string[];
    attributes: string;
    authorization: string;
    compartmentOcid: string;
    deleteInProgress: boolean;
    domainOcid: string;
    externalId: string;
    factors: string[];
    id: string;
    idcsCreatedBies: outputs.GetIdentityDomainsAccountRecoverySettingsAccountRecoverySettingIdcsCreatedBy[];
    idcsEndpoint: string;
    idcsLastModifiedBies: outputs.GetIdentityDomainsAccountRecoverySettingsAccountRecoverySettingIdcsLastModifiedBy[];
    idcsLastUpgradedInRelease: string;
    idcsPreventedOperations: string[];
    lockoutDuration: number;
    maxIncorrectAttempts: number;
    metas: outputs.GetIdentityDomainsAccountRecoverySettingsAccountRecoverySettingMeta[];
    ocid: string;
    resourceTypeSchemaVersion: string;
    schemas: string[];
    tags: outputs.GetIdentityDomainsAccountRecoverySettingsAccountRecoverySettingTag[];
    tenancyOcid: string;
}

export interface GetIdentityDomainsAccountRecoverySettingsAccountRecoverySettingIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsAccountRecoverySettingsAccountRecoverySettingIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsAccountRecoverySettingsAccountRecoverySettingMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface GetIdentityDomainsAccountRecoverySettingsAccountRecoverySettingTag {
    key: string;
    value: string;
}

export interface GetIdentityDomainsApiKeyIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsApiKeyIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsApiKeyMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface GetIdentityDomainsApiKeyTag {
    key: string;
    value: string;
}

export interface GetIdentityDomainsApiKeyUrnietfparamsscimschemasoracleidcsextensionselfChangeUser {
    allowSelfChange: boolean;
}

export interface GetIdentityDomainsApiKeyUser {
    display: string;
    name: string;
    ocid: string;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsApiKeysApiKey {
    attributeSets: string[];
    attributes: string;
    authorization: string;
    compartmentOcid: string;
    deleteInProgress: boolean;
    description: string;
    domainOcid: string;
    fingerprint: string;
    id: string;
    idcsCreatedBies: outputs.GetIdentityDomainsApiKeysApiKeyIdcsCreatedBy[];
    idcsEndpoint: string;
    idcsLastModifiedBies: outputs.GetIdentityDomainsApiKeysApiKeyIdcsLastModifiedBy[];
    idcsLastUpgradedInRelease: string;
    idcsPreventedOperations: string[];
    key: string;
    metas: outputs.GetIdentityDomainsApiKeysApiKeyMeta[];
    ocid: string;
    resourceTypeSchemaVersion: string;
    schemas: string[];
    tags: outputs.GetIdentityDomainsApiKeysApiKeyTag[];
    tenancyOcid: string;
    urnietfparamsscimschemasoracleidcsextensionselfChangeUsers: outputs.GetIdentityDomainsApiKeysApiKeyUrnietfparamsscimschemasoracleidcsextensionselfChangeUser[];
    users: outputs.GetIdentityDomainsApiKeysApiKeyUser[];
}

export interface GetIdentityDomainsApiKeysApiKeyIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsApiKeysApiKeyIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsApiKeysApiKeyMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface GetIdentityDomainsApiKeysApiKeyTag {
    key: string;
    value: string;
}

export interface GetIdentityDomainsApiKeysApiKeyUrnietfparamsscimschemasoracleidcsextensionselfChangeUser {
    allowSelfChange: boolean;
}

export interface GetIdentityDomainsApiKeysApiKeyUser {
    display: string;
    name: string;
    ocid: string;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsAppAccount {
    active: boolean;
    name: string;
    ownerId: string;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsAppAdminRole {
    description: string;
    display: string;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsAppAliasApp {
    description: string;
    display: string;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsAppAllowedScope {
    fqs: string;
    idOfDefiningApp: string;
    readOnly: boolean;
}

export interface GetIdentityDomainsAppAllowedTag {
    key: string;
    readOnly: boolean;
    value: string;
}

export interface GetIdentityDomainsAppAppSignonPolicy {
    ref: string;
    value: string;
}

export interface GetIdentityDomainsAppAppsNetworkPerimeter {
    ref: string;
    value: string;
}

export interface GetIdentityDomainsAppAsOpcService {
    ref: string;
    value: string;
}

export interface GetIdentityDomainsAppAttrRenderingMetadata {
    datatype: string;
    helptext: string;
    label: string;
    maxLength: number;
    maxSize: number;
    minLength: number;
    minSize: number;
    name: string;
    order: number;
    readOnly: boolean;
    regexp: string;
    required: boolean;
    section: string;
    visible: boolean;
    widget: string;
}

export interface GetIdentityDomainsAppBasedOnTemplate {
    lastModified: string;
    ref: string;
    value: string;
    wellKnownId: string;
}

export interface GetIdentityDomainsAppCertificate {
    certAlias: string;
    kid: string;
    sha1thumbprint: string;
    x509base64certificate: string;
    x5t: string;
}

export interface GetIdentityDomainsAppCloudControlProperty {
    name: string;
    values: string[];
}

export interface GetIdentityDomainsAppEditableAttribute {
    name: string;
}

export interface GetIdentityDomainsAppGrant {
    grantMechanism: string;
    granteeId: string;
    granteeType: string;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsAppGrantedAppRole {
    adminRole: boolean;
    appId: string;
    appName: string;
    display: string;
    legacyGroupName: string;
    readOnly: boolean;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsAppIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsAppIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsAppIdentityProvider {
    display: string;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsAppIdpPolicy {
    ref: string;
    value: string;
}

export interface GetIdentityDomainsAppMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface GetIdentityDomainsAppProtectableSecondaryAudience {
    readOnly: boolean;
    value: string;
}

export interface GetIdentityDomainsAppRadiusPolicy {
    ref: string;
    value: string;
}

export interface GetIdentityDomainsAppRoleApp {
    display: string;
    name: string;
    ref: string;
    serviceInstanceIdentifier: string;
    value: string;
}

export interface GetIdentityDomainsAppRoleIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsAppRoleIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsAppRoleMember {
    display: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsAppRoleMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface GetIdentityDomainsAppRoleTag {
    key: string;
    value: string;
}

export interface GetIdentityDomainsAppRolesAppRole {
    adminRole: boolean;
    apps: outputs.GetIdentityDomainsAppRolesAppRoleApp[];
    attributeSets: string[];
    attributes: string;
    authorization: string;
    availableToClients: boolean;
    availableToGroups: boolean;
    availableToUsers: boolean;
    compartmentOcid: string;
    deleteInProgress: boolean;
    description: string;
    displayName: string;
    domainOcid: string;
    id: string;
    idcsCreatedBies: outputs.GetIdentityDomainsAppRolesAppRoleIdcsCreatedBy[];
    idcsEndpoint: string;
    idcsLastModifiedBies: outputs.GetIdentityDomainsAppRolesAppRoleIdcsLastModifiedBy[];
    idcsLastUpgradedInRelease: string;
    idcsPreventedOperations: string[];
    legacyGroupName: string;
    limitedToOneOrMoreGroups: boolean;
    localizedDisplayName: string;
    members: outputs.GetIdentityDomainsAppRolesAppRoleMember[];
    metas: outputs.GetIdentityDomainsAppRolesAppRoleMeta[];
    ocid: string;
    public: boolean;
    resourceTypeSchemaVersion: string;
    schemas: string[];
    tags: outputs.GetIdentityDomainsAppRolesAppRoleTag[];
    tenancyOcid: string;
    uniqueName: string;
}

export interface GetIdentityDomainsAppRolesAppRoleApp {
    display: string;
    name: string;
    ref: string;
    serviceInstanceIdentifier: string;
    value: string;
}

export interface GetIdentityDomainsAppRolesAppRoleIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsAppRolesAppRoleIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsAppRolesAppRoleMember {
    display: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsAppRolesAppRoleMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface GetIdentityDomainsAppRolesAppRoleTag {
    key: string;
    value: string;
}

export interface GetIdentityDomainsAppSamlServiceProvider {
    ref: string;
    value: string;
}

export interface GetIdentityDomainsAppScope {
    description: string;
    displayName: string;
    fqs: string;
    readOnly: boolean;
    requiresConsent: boolean;
    value: string;
}

export interface GetIdentityDomainsAppServiceParam {
    name: string;
    value: string;
}

export interface GetIdentityDomainsAppSignonPolicy {
    ref: string;
    value: string;
}

export interface GetIdentityDomainsAppTag {
    key: string;
    value: string;
}

export interface GetIdentityDomainsAppTermsOfUse {
    name: string;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsAppTrustPolicy {
    ref: string;
    value: string;
}

export interface GetIdentityDomainsAppUrnietfparamsscimschemasoracleidcsextensionOciTag {
    definedTags: outputs.GetIdentityDomainsAppUrnietfparamsscimschemasoracleidcsextensionOciTagDefinedTag[];
    freeformTags: outputs.GetIdentityDomainsAppUrnietfparamsscimschemasoracleidcsextensionOciTagFreeformTag[];
    tagSlug: string;
}

export interface GetIdentityDomainsAppUrnietfparamsscimschemasoracleidcsextensionOciTagDefinedTag {
    key: string;
    namespace: string;
    value: string;
}

export interface GetIdentityDomainsAppUrnietfparamsscimschemasoracleidcsextensionOciTagFreeformTag {
    key: string;
    value: string;
}

export interface GetIdentityDomainsAppUrnietfparamsscimschemasoracleidcsextensiondbcsApp {
    domainApps: outputs.GetIdentityDomainsAppUrnietfparamsscimschemasoracleidcsextensiondbcsAppDomainApp[];
    domainName: string;
}

export interface GetIdentityDomainsAppUrnietfparamsscimschemasoracleidcsextensiondbcsAppDomainApp {
    display: string;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsAppUrnietfparamsscimschemasoracleidcsextensionenterpriseAppApp {
    allowAuthzDecisionTtl: number;
    allowAuthzPolicies: outputs.GetIdentityDomainsAppUrnietfparamsscimschemasoracleidcsextensionenterpriseAppAppAllowAuthzPolicy[];
    appResources: outputs.GetIdentityDomainsAppUrnietfparamsscimschemasoracleidcsextensionenterpriseAppAppAppResource[];
    denyAuthzDecisionTtl: number;
    denyAuthzPolicies: outputs.GetIdentityDomainsAppUrnietfparamsscimschemasoracleidcsextensionenterpriseAppAppDenyAuthzPolicy[];
}

export interface GetIdentityDomainsAppUrnietfparamsscimschemasoracleidcsextensionenterpriseAppAppAllowAuthzPolicy {
    ref: string;
    value: string;
}

export interface GetIdentityDomainsAppUrnietfparamsscimschemasoracleidcsextensionenterpriseAppAppAppResource {
    ref: string;
    value: string;
}

export interface GetIdentityDomainsAppUrnietfparamsscimschemasoracleidcsextensionenterpriseAppAppDenyAuthzPolicy {
    ref: string;
    value: string;
}

export interface GetIdentityDomainsAppUrnietfparamsscimschemasoracleidcsextensionformFillAppApp {
    configuration: string;
    formCredMethod: string;
    formCredentialSharingGroupId: string;
    formFillUrlMatches: outputs.GetIdentityDomainsAppUrnietfparamsscimschemasoracleidcsextensionformFillAppAppFormFillUrlMatch[];
    formType: string;
    revealPasswordOnForm: boolean;
    syncFromTemplate: boolean;
    userNameFormExpression: string;
    userNameFormTemplate: string;
}

export interface GetIdentityDomainsAppUrnietfparamsscimschemasoracleidcsextensionformFillAppAppFormFillUrlMatch {
    formUrl: string;
    formUrlMatchType: string;
}

export interface GetIdentityDomainsAppUrnietfparamsscimschemasoracleidcsextensionformFillAppTemplateAppTemplate {
    configuration: string;
    formCredMethod: string;
    formCredentialSharingGroupId: string;
    formFillUrlMatches: outputs.GetIdentityDomainsAppUrnietfparamsscimschemasoracleidcsextensionformFillAppTemplateAppTemplateFormFillUrlMatch[];
    formType: string;
    revealPasswordOnForm: boolean;
    syncFromTemplate: boolean;
    userNameFormExpression: string;
    userNameFormTemplate: string;
}

export interface GetIdentityDomainsAppUrnietfparamsscimschemasoracleidcsextensionformFillAppTemplateAppTemplateFormFillUrlMatch {
    formUrl: string;
    formUrlMatchType: string;
}

export interface GetIdentityDomainsAppUrnietfparamsscimschemasoracleidcsextensionkerberosRealmApp {
    defaultEncryptionSaltType: string;
    masterKey: string;
    maxRenewableAge: number;
    maxTicketLife: number;
    realmName: string;
    supportedEncryptionSaltTypes: string[];
    ticketFlags: number;
}

export interface GetIdentityDomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappApp {
    accountFormVisible: boolean;
    adminConsentGranted: boolean;
    bundleConfigurationProperties: outputs.GetIdentityDomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppBundleConfigurationProperty[];
    bundlePoolConfigurations: outputs.GetIdentityDomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppBundlePoolConfiguration[];
    canBeAuthoritative: boolean;
    connected: boolean;
    connectorBundles: outputs.GetIdentityDomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppConnectorBundle[];
    enableAuthSyncNewUserNotification: boolean;
    enableSync: boolean;
    enableSyncSummaryReportNotification: boolean;
    flatFileBundleConfigurationProperties: outputs.GetIdentityDomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppFlatFileBundleConfigurationProperty[];
    flatFileConnectorBundles: outputs.GetIdentityDomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppFlatFileConnectorBundle[];
    identityBridges: outputs.GetIdentityDomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppIdentityBridge[];
    isAuthoritative: boolean;
    isDirectory: boolean;
    isOnPremiseApp: boolean;
    isSchemaCustomizationSupported: boolean;
    isSchemaDiscoverySupported: boolean;
    isThreeLeggedOauthEnabled: boolean;
    isTwoLeggedOauthEnabled: boolean;
    objectClasses: outputs.GetIdentityDomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppObjectClass[];
    syncConfigLastModified: string;
    threeLeggedOauthCredentials: outputs.GetIdentityDomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppThreeLeggedOauthCredential[];
    threeLeggedOauthProviderName: string;
}

export interface GetIdentityDomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppBundleConfigurationProperty {
    confidential: boolean;
    displayName: string;
    helpMessage: string;
    icfType: string;
    name: string;
    order: number;
    required: boolean;
    values: string[];
}

export interface GetIdentityDomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppBundlePoolConfiguration {
    maxIdle: number;
    maxObjects: number;
    maxWait: number;
    minEvictableIdleTimeMillis: number;
    minIdle: number;
}

export interface GetIdentityDomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppConnectorBundle {
    display: string;
    ref: string;
    type: string;
    value: string;
    wellKnownId: string;
}

export interface GetIdentityDomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppFlatFileBundleConfigurationProperty {
    confidential: boolean;
    displayName: string;
    helpMessage: string;
    icfType: string;
    name: string;
    order: number;
    required: boolean;
    values: string[];
}

export interface GetIdentityDomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppFlatFileConnectorBundle {
    display: string;
    ref: string;
    value: string;
    wellKnownId: string;
}

export interface GetIdentityDomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppIdentityBridge {
    name: string;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppObjectClass {
    display: string;
    isAccountObjectClass: boolean;
    ref: string;
    resourceType: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppThreeLeggedOauthCredential {
    accessToken: string;
    accessTokenExpiry: string;
    refreshToken: string;
}

export interface GetIdentityDomainsAppUrnietfparamsscimschemasoracleidcsextensionmulticloudServiceAppApp {
    multicloudPlatformUrl: string;
    multicloudServiceType: string;
}

export interface GetIdentityDomainsAppUrnietfparamsscimschemasoracleidcsextensionopcServiceApp {
    currentFederationMode: string;
    currentSynchronizationMode: string;
    enablingNextFedSyncModes: boolean;
    nextFederationMode: string;
    nextSynchronizationMode: string;
    region: string;
    serviceInstanceIdentifier: string;
}

export interface GetIdentityDomainsAppUrnietfparamsscimschemasoracleidcsextensionradiusAppApp {
    captureClientIp: boolean;
    clientIp: string;
    countryCodeResponseAttributeId: string;
    endUserIpAttribute: string;
    groupMembershipRadiusAttribute: string;
    groupMembershipToReturns: outputs.GetIdentityDomainsAppUrnietfparamsscimschemasoracleidcsextensionradiusAppAppGroupMembershipToReturn[];
    groupNameFormat: string;
    includeGroupInResponse: boolean;
    passwordAndOtpTogether: boolean;
    port: string;
    radiusVendorSpecificId: string;
    responseFormat: string;
    responseFormatDelimiter: string;
    secretKey: string;
    typeOfRadiusApp: string;
}

export interface GetIdentityDomainsAppUrnietfparamsscimschemasoracleidcsextensionradiusAppAppGroupMembershipToReturn {
    display: string;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsAppUrnietfparamsscimschemasoracleidcsextensionrequestableApp {
    requestable: boolean;
}

export interface GetIdentityDomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderApp {
    assertionConsumerUrl: string;
    encryptAssertion: boolean;
    encryptionAlgorithm: string;
    encryptionCertificate: string;
    federationProtocol: string;
    groupAssertionAttributes: outputs.GetIdentityDomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppGroupAssertionAttribute[];
    hokAcsUrl: string;
    hokRequired: boolean;
    includeSigningCertInSignature: boolean;
    keyEncryptionAlgorithm: string;
    lastNotificationSentTime: string;
    logoutBinding: string;
    logoutEnabled: boolean;
    logoutRequestUrl: string;
    logoutResponseUrl: string;
    metadata: string;
    nameIdFormat: string;
    nameIdUserstoreAttribute: string;
    outboundAssertionAttributes: outputs.GetIdentityDomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppOutboundAssertionAttribute[];
    partnerProviderId: string;
    partnerProviderPattern: string;
    signResponseOrAssertion: string;
    signatureHashAlgorithm: string;
    signingCertificate: string;
    succinctId: string;
    tenantProviderId: string;
    userAssertionAttributes: outputs.GetIdentityDomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppUserAssertionAttribute[];
}

export interface GetIdentityDomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppGroupAssertionAttribute {
    condition: string;
    format: string;
    groupName: string;
    name: string;
}

export interface GetIdentityDomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppOutboundAssertionAttribute {
    direction: string;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppUserAssertionAttribute {
    format: string;
    name: string;
    userStoreAttributeName: string;
}

export interface GetIdentityDomainsAppUrnietfparamsscimschemasoracleidcsextensionwebTierPolicyApp {
    resourceRef: boolean;
    webTierPolicyAzControl: string;
    webTierPolicyJson: string;
}

export interface GetIdentityDomainsAppUserRole {
    description: string;
    display: string;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsApprovalWorkflowApprovalWorkflowStep {
    ocid: string;
    order: number;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsApprovalWorkflowAssignmentApprovalWorkflow {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsApprovalWorkflowAssignmentAssignedTo {
    description: string;
    display: string;
    ocid: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsApprovalWorkflowAssignmentIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsApprovalWorkflowAssignmentIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsApprovalWorkflowAssignmentMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface GetIdentityDomainsApprovalWorkflowAssignmentTag {
    key: string;
    value: string;
}

export interface GetIdentityDomainsApprovalWorkflowAssignmentsApprovalWorkflowAssignment {
    approvalWorkflows: outputs.GetIdentityDomainsApprovalWorkflowAssignmentsApprovalWorkflowAssignmentApprovalWorkflow[];
    assignedTos: outputs.GetIdentityDomainsApprovalWorkflowAssignmentsApprovalWorkflowAssignmentAssignedTo[];
    assignmentType: string;
    attributeSets: string[];
    attributes: string;
    authorization: string;
    compartmentOcid: string;
    deleteInProgress: boolean;
    domainOcid: string;
    id: string;
    idcsCreatedBies: outputs.GetIdentityDomainsApprovalWorkflowAssignmentsApprovalWorkflowAssignmentIdcsCreatedBy[];
    idcsEndpoint: string;
    idcsLastModifiedBies: outputs.GetIdentityDomainsApprovalWorkflowAssignmentsApprovalWorkflowAssignmentIdcsLastModifiedBy[];
    idcsLastUpgradedInRelease: string;
    idcsPreventedOperations: string[];
    metas: outputs.GetIdentityDomainsApprovalWorkflowAssignmentsApprovalWorkflowAssignmentMeta[];
    ocid: string;
    resourceTypeSchemaVersion: string;
    schemas: string[];
    tags: outputs.GetIdentityDomainsApprovalWorkflowAssignmentsApprovalWorkflowAssignmentTag[];
    tenancyOcid: string;
}

export interface GetIdentityDomainsApprovalWorkflowAssignmentsApprovalWorkflowAssignmentApprovalWorkflow {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsApprovalWorkflowAssignmentsApprovalWorkflowAssignmentAssignedTo {
    description: string;
    display: string;
    ocid: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsApprovalWorkflowAssignmentsApprovalWorkflowAssignmentIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsApprovalWorkflowAssignmentsApprovalWorkflowAssignmentIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsApprovalWorkflowAssignmentsApprovalWorkflowAssignmentMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface GetIdentityDomainsApprovalWorkflowAssignmentsApprovalWorkflowAssignmentTag {
    key: string;
    value: string;
}

export interface GetIdentityDomainsApprovalWorkflowIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsApprovalWorkflowIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsApprovalWorkflowMaxDuration {
    unit: string;
    value: number;
}

export interface GetIdentityDomainsApprovalWorkflowMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface GetIdentityDomainsApprovalWorkflowStepApprover {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsApprovalWorkflowStepIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsApprovalWorkflowStepIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsApprovalWorkflowStepMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface GetIdentityDomainsApprovalWorkflowStepTag {
    key: string;
    value: string;
}

export interface GetIdentityDomainsApprovalWorkflowStepsApprovalWorkflowStep {
    approvers: outputs.GetIdentityDomainsApprovalWorkflowStepsApprovalWorkflowStepApprover[];
    approversExpressions: string[];
    attributeSets: string[];
    attributes: string;
    authorization: string;
    compartmentOcid: string;
    deleteInProgress: boolean;
    domainOcid: string;
    id: string;
    idcsCreatedBies: outputs.GetIdentityDomainsApprovalWorkflowStepsApprovalWorkflowStepIdcsCreatedBy[];
    idcsEndpoint: string;
    idcsLastModifiedBies: outputs.GetIdentityDomainsApprovalWorkflowStepsApprovalWorkflowStepIdcsLastModifiedBy[];
    idcsLastUpgradedInRelease: string;
    idcsPreventedOperations: string[];
    metas: outputs.GetIdentityDomainsApprovalWorkflowStepsApprovalWorkflowStepMeta[];
    minimumApprovals: number;
    ocid: string;
    order: number;
    resourceTypeSchemaVersion: string;
    schemas: string[];
    tags: outputs.GetIdentityDomainsApprovalWorkflowStepsApprovalWorkflowStepTag[];
    tenancyOcid: string;
    type: string;
}

export interface GetIdentityDomainsApprovalWorkflowStepsApprovalWorkflowStepApprover {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsApprovalWorkflowStepsApprovalWorkflowStepIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsApprovalWorkflowStepsApprovalWorkflowStepIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsApprovalWorkflowStepsApprovalWorkflowStepMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface GetIdentityDomainsApprovalWorkflowStepsApprovalWorkflowStepTag {
    key: string;
    value: string;
}

export interface GetIdentityDomainsApprovalWorkflowTag {
    key: string;
    value: string;
}

export interface GetIdentityDomainsApprovalWorkflowsApprovalWorkflow {
    approvalWorkflowSteps: outputs.GetIdentityDomainsApprovalWorkflowsApprovalWorkflowApprovalWorkflowStep[];
    attributeSets: string[];
    attributes: string;
    authorization: string;
    compartmentOcid: string;
    deleteInProgress: boolean;
    description: string;
    domainOcid: string;
    id: string;
    idcsCreatedBies: outputs.GetIdentityDomainsApprovalWorkflowsApprovalWorkflowIdcsCreatedBy[];
    idcsEndpoint: string;
    idcsLastModifiedBies: outputs.GetIdentityDomainsApprovalWorkflowsApprovalWorkflowIdcsLastModifiedBy[];
    idcsLastUpgradedInRelease: string;
    idcsPreventedOperations: string[];
    maxDurations: outputs.GetIdentityDomainsApprovalWorkflowsApprovalWorkflowMaxDuration[];
    metas: outputs.GetIdentityDomainsApprovalWorkflowsApprovalWorkflowMeta[];
    name: string;
    ocid: string;
    resourceTypeSchemaVersion: string;
    schemas: string[];
    tags: outputs.GetIdentityDomainsApprovalWorkflowsApprovalWorkflowTag[];
    tenancyOcid: string;
}

export interface GetIdentityDomainsApprovalWorkflowsApprovalWorkflowApprovalWorkflowStep {
    ocid: string;
    order: number;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsApprovalWorkflowsApprovalWorkflowIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsApprovalWorkflowsApprovalWorkflowIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsApprovalWorkflowsApprovalWorkflowMaxDuration {
    unit: string;
    value: number;
}

export interface GetIdentityDomainsApprovalWorkflowsApprovalWorkflowMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface GetIdentityDomainsApprovalWorkflowsApprovalWorkflowTag {
    key: string;
    value: string;
}

export interface GetIdentityDomainsAppsApp {
    accessTokenExpiry: number;
    accounts: outputs.GetIdentityDomainsAppsAppAccount[];
    active: boolean;
    adminRoles: outputs.GetIdentityDomainsAppsAppAdminRole[];
    aliasApps: outputs.GetIdentityDomainsAppsAppAliasApp[];
    allUrlSchemesAllowed: boolean;
    allowAccessControl: boolean;
    allowOffline: boolean;
    allowedGrants: string[];
    allowedOperations: string[];
    allowedScopes: outputs.GetIdentityDomainsAppsAppAllowedScope[];
    allowedTags: outputs.GetIdentityDomainsAppsAppAllowedTag[];
    appIcon: string;
    appSignonPolicies: outputs.GetIdentityDomainsAppsAppAppSignonPolicy[];
    appThumbnail: string;
    appsNetworkPerimeters: outputs.GetIdentityDomainsAppsAppAppsNetworkPerimeter[];
    asOpcServices: outputs.GetIdentityDomainsAppsAppAsOpcService[];
    attrRenderingMetadatas: outputs.GetIdentityDomainsAppsAppAttrRenderingMetadata[];
    attributeSets: string[];
    attributes: string;
    audience: string;
    authorization: string;
    basedOnTemplates: outputs.GetIdentityDomainsAppsAppBasedOnTemplate[];
    bypassConsent: boolean;
    callbackServiceUrl: string;
    certificates: outputs.GetIdentityDomainsAppsAppCertificate[];
    clientIpChecking: string;
    clientSecret: string;
    clientType: string;
    cloudControlProperties: outputs.GetIdentityDomainsAppsAppCloudControlProperty[];
    compartmentOcid: string;
    contactEmailAddress: string;
    delegatedServiceNames: string[];
    deleteInProgress: boolean;
    description: string;
    disableKmsiTokenAuthentication: boolean;
    displayName: string;
    domainOcid: string;
    editableAttributes: outputs.GetIdentityDomainsAppsAppEditableAttribute[];
    errorPageUrl: string;
    grantedAppRoles: outputs.GetIdentityDomainsAppsAppGrantedAppRole[];
    grants: outputs.GetIdentityDomainsAppsAppGrant[];
    hashedClientSecret: string;
    homePageUrl: string;
    icon: string;
    id: string;
    idTokenEncAlgo: string;
    idcsCreatedBies: outputs.GetIdentityDomainsAppsAppIdcsCreatedBy[];
    idcsEndpoint: string;
    idcsLastModifiedBies: outputs.GetIdentityDomainsAppsAppIdcsLastModifiedBy[];
    idcsLastUpgradedInRelease: string;
    idcsPreventedOperations: string[];
    identityProviders: outputs.GetIdentityDomainsAppsAppIdentityProvider[];
    idpPolicies: outputs.GetIdentityDomainsAppsAppIdpPolicy[];
    infrastructure: boolean;
    isAliasApp: boolean;
    isDatabaseService: boolean;
    isEnterpriseApp: boolean;
    isFormFill: boolean;
    isKerberosRealm: boolean;
    isLoginTarget: boolean;
    isManagedApp: boolean;
    isMobileTarget: boolean;
    isMulticloudServiceApp: boolean;
    isOauthClient: boolean;
    isOauthResource: boolean;
    isObligationCapable: boolean;
    isOpcService: boolean;
    isRadiusApp: boolean;
    isSamlServiceProvider: boolean;
    isUnmanagedApp: boolean;
    isWebTierPolicy: boolean;
    landingPageUrl: string;
    linkingCallbackUrl: string;
    loginMechanism: string;
    loginPageUrl: string;
    logoutPageUrl: string;
    logoutUri: string;
    metas: outputs.GetIdentityDomainsAppsAppMeta[];
    meterAsOpcService: boolean;
    migrated: boolean;
    name: string;
    ocid: string;
    postLogoutRedirectUris: string[];
    privacyPolicyUrl: string;
    productLogoUrl: string;
    productName: string;
    protectableSecondaryAudiences: outputs.GetIdentityDomainsAppsAppProtectableSecondaryAudience[];
    radiusPolicies: outputs.GetIdentityDomainsAppsAppRadiusPolicy[];
    readyToUpgrade: boolean;
    redirectUris: string[];
    refreshTokenExpiry: number;
    resourceTypeSchemaVersion: string;
    samlServiceProviders: outputs.GetIdentityDomainsAppsAppSamlServiceProvider[];
    schemas: string[];
    scopes: outputs.GetIdentityDomainsAppsAppScope[];
    secondaryAudiences: string[];
    serviceParams: outputs.GetIdentityDomainsAppsAppServiceParam[];
    serviceTypeUrn: string;
    serviceTypeVersion: string;
    showInMyApps: boolean;
    signonPolicies: outputs.GetIdentityDomainsAppsAppSignonPolicy[];
    tags: outputs.GetIdentityDomainsAppsAppTag[];
    tenancyOcid: string;
    termsOfServiceUrl: string;
    termsOfUses: outputs.GetIdentityDomainsAppsAppTermsOfUse[];
    trustPolicies: outputs.GetIdentityDomainsAppsAppTrustPolicy[];
    trustScope: string;
    urnietfparamsscimschemasoracleidcsextensionOciTags: outputs.GetIdentityDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionOciTag[];
    urnietfparamsscimschemasoracleidcsextensiondbcsApps: outputs.GetIdentityDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensiondbcsApp[];
    urnietfparamsscimschemasoracleidcsextensionenterpriseAppApps: outputs.GetIdentityDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionenterpriseAppApp[];
    urnietfparamsscimschemasoracleidcsextensionformFillAppApps: outputs.GetIdentityDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionformFillAppApp[];
    urnietfparamsscimschemasoracleidcsextensionformFillAppTemplateAppTemplates: outputs.GetIdentityDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionformFillAppTemplateAppTemplate[];
    urnietfparamsscimschemasoracleidcsextensionkerberosRealmApps: outputs.GetIdentityDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionkerberosRealmApp[];
    urnietfparamsscimschemasoracleidcsextensionmanagedappApps: outputs.GetIdentityDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappApp[];
    urnietfparamsscimschemasoracleidcsextensionmulticloudServiceAppApps: outputs.GetIdentityDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionmulticloudServiceAppApp[];
    urnietfparamsscimschemasoracleidcsextensionopcServiceApps: outputs.GetIdentityDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionopcServiceApp[];
    urnietfparamsscimschemasoracleidcsextensionradiusAppApps: outputs.GetIdentityDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionradiusAppApp[];
    urnietfparamsscimschemasoracleidcsextensionrequestableApps: outputs.GetIdentityDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionrequestableApp[];
    urnietfparamsscimschemasoracleidcsextensionsamlServiceProviderApps: outputs.GetIdentityDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderApp[];
    urnietfparamsscimschemasoracleidcsextensionwebTierPolicyApps: outputs.GetIdentityDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionwebTierPolicyApp[];
    userRoles: outputs.GetIdentityDomainsAppsAppUserRole[];
}

export interface GetIdentityDomainsAppsAppAccount {
    active: boolean;
    name: string;
    ownerId: string;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsAppsAppAdminRole {
    description: string;
    display: string;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsAppsAppAliasApp {
    description: string;
    display: string;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsAppsAppAllowedScope {
    fqs: string;
    idOfDefiningApp: string;
    readOnly: boolean;
}

export interface GetIdentityDomainsAppsAppAllowedTag {
    key: string;
    readOnly: boolean;
    value: string;
}

export interface GetIdentityDomainsAppsAppAppSignonPolicy {
    ref: string;
    value: string;
}

export interface GetIdentityDomainsAppsAppAppsNetworkPerimeter {
    ref: string;
    value: string;
}

export interface GetIdentityDomainsAppsAppAsOpcService {
    ref: string;
    value: string;
}

export interface GetIdentityDomainsAppsAppAttrRenderingMetadata {
    datatype: string;
    helptext: string;
    label: string;
    maxLength: number;
    maxSize: number;
    minLength: number;
    minSize: number;
    name: string;
    order: number;
    readOnly: boolean;
    regexp: string;
    required: boolean;
    section: string;
    visible: boolean;
    widget: string;
}

export interface GetIdentityDomainsAppsAppBasedOnTemplate {
    lastModified: string;
    ref: string;
    value: string;
    wellKnownId: string;
}

export interface GetIdentityDomainsAppsAppCertificate {
    certAlias: string;
    kid: string;
    sha1thumbprint: string;
    x509base64certificate: string;
    x5t: string;
}

export interface GetIdentityDomainsAppsAppCloudControlProperty {
    name: string;
    values: string[];
}

export interface GetIdentityDomainsAppsAppEditableAttribute {
    name: string;
}

export interface GetIdentityDomainsAppsAppGrant {
    grantMechanism: string;
    granteeId: string;
    granteeType: string;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsAppsAppGrantedAppRole {
    adminRole: boolean;
    appId: string;
    appName: string;
    display: string;
    legacyGroupName: string;
    readOnly: boolean;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsAppsAppIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsAppsAppIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsAppsAppIdentityProvider {
    display: string;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsAppsAppIdpPolicy {
    ref: string;
    value: string;
}

export interface GetIdentityDomainsAppsAppMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface GetIdentityDomainsAppsAppProtectableSecondaryAudience {
    readOnly: boolean;
    value: string;
}

export interface GetIdentityDomainsAppsAppRadiusPolicy {
    ref: string;
    value: string;
}

export interface GetIdentityDomainsAppsAppSamlServiceProvider {
    ref: string;
    value: string;
}

export interface GetIdentityDomainsAppsAppScope {
    description: string;
    displayName: string;
    fqs: string;
    readOnly: boolean;
    requiresConsent: boolean;
    value: string;
}

export interface GetIdentityDomainsAppsAppServiceParam {
    name: string;
    value: string;
}

export interface GetIdentityDomainsAppsAppSignonPolicy {
    ref: string;
    value: string;
}

export interface GetIdentityDomainsAppsAppTag {
    key: string;
    value: string;
}

export interface GetIdentityDomainsAppsAppTermsOfUse {
    name: string;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsAppsAppTrustPolicy {
    ref: string;
    value: string;
}

export interface GetIdentityDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionOciTag {
    definedTags: outputs.GetIdentityDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionOciTagDefinedTag[];
    freeformTags: outputs.GetIdentityDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionOciTagFreeformTag[];
    tagSlug: string;
}

export interface GetIdentityDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionOciTagDefinedTag {
    key: string;
    namespace: string;
    value: string;
}

export interface GetIdentityDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionOciTagFreeformTag {
    key: string;
    value: string;
}

export interface GetIdentityDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensiondbcsApp {
    domainApps: outputs.GetIdentityDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensiondbcsAppDomainApp[];
    domainName: string;
}

export interface GetIdentityDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensiondbcsAppDomainApp {
    display: string;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionenterpriseAppApp {
    allowAuthzDecisionTtl: number;
    allowAuthzPolicies: outputs.GetIdentityDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionenterpriseAppAppAllowAuthzPolicy[];
    appResources: outputs.GetIdentityDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionenterpriseAppAppAppResource[];
    denyAuthzDecisionTtl: number;
    denyAuthzPolicies: outputs.GetIdentityDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionenterpriseAppAppDenyAuthzPolicy[];
}

export interface GetIdentityDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionenterpriseAppAppAllowAuthzPolicy {
    ref: string;
    value: string;
}

export interface GetIdentityDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionenterpriseAppAppAppResource {
    ref: string;
    value: string;
}

export interface GetIdentityDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionenterpriseAppAppDenyAuthzPolicy {
    ref: string;
    value: string;
}

export interface GetIdentityDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionformFillAppApp {
    configuration: string;
    formCredMethod: string;
    formCredentialSharingGroupId: string;
    formFillUrlMatches: outputs.GetIdentityDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionformFillAppAppFormFillUrlMatch[];
    formType: string;
    revealPasswordOnForm: boolean;
    syncFromTemplate: boolean;
    userNameFormExpression: string;
    userNameFormTemplate: string;
}

export interface GetIdentityDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionformFillAppAppFormFillUrlMatch {
    formUrl: string;
    formUrlMatchType: string;
}

export interface GetIdentityDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionformFillAppTemplateAppTemplate {
    configuration: string;
    formCredMethod: string;
    formCredentialSharingGroupId: string;
    formFillUrlMatches: outputs.GetIdentityDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionformFillAppTemplateAppTemplateFormFillUrlMatch[];
    formType: string;
    revealPasswordOnForm: boolean;
    syncFromTemplate: boolean;
    userNameFormExpression: string;
    userNameFormTemplate: string;
}

export interface GetIdentityDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionformFillAppTemplateAppTemplateFormFillUrlMatch {
    formUrl: string;
    formUrlMatchType: string;
}

export interface GetIdentityDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionkerberosRealmApp {
    defaultEncryptionSaltType: string;
    masterKey: string;
    maxRenewableAge: number;
    maxTicketLife: number;
    realmName: string;
    supportedEncryptionSaltTypes: string[];
    ticketFlags: number;
}

export interface GetIdentityDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappApp {
    accountFormVisible: boolean;
    adminConsentGranted: boolean;
    bundleConfigurationProperties: outputs.GetIdentityDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppBundleConfigurationProperty[];
    bundlePoolConfigurations: outputs.GetIdentityDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppBundlePoolConfiguration[];
    canBeAuthoritative: boolean;
    connected: boolean;
    connectorBundles: outputs.GetIdentityDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppConnectorBundle[];
    enableAuthSyncNewUserNotification: boolean;
    enableSync: boolean;
    enableSyncSummaryReportNotification: boolean;
    flatFileBundleConfigurationProperties: outputs.GetIdentityDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppFlatFileBundleConfigurationProperty[];
    flatFileConnectorBundles: outputs.GetIdentityDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppFlatFileConnectorBundle[];
    identityBridges: outputs.GetIdentityDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppIdentityBridge[];
    isAuthoritative: boolean;
    isDirectory: boolean;
    isOnPremiseApp: boolean;
    isSchemaCustomizationSupported: boolean;
    isSchemaDiscoverySupported: boolean;
    isThreeLeggedOauthEnabled: boolean;
    isTwoLeggedOauthEnabled: boolean;
    objectClasses: outputs.GetIdentityDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppObjectClass[];
    syncConfigLastModified: string;
    threeLeggedOauthCredentials: outputs.GetIdentityDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppThreeLeggedOauthCredential[];
    threeLeggedOauthProviderName: string;
}

export interface GetIdentityDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppBundleConfigurationProperty {
    confidential: boolean;
    displayName: string;
    helpMessage: string;
    icfType: string;
    name: string;
    order: number;
    required: boolean;
    values: string[];
}

export interface GetIdentityDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppBundlePoolConfiguration {
    maxIdle: number;
    maxObjects: number;
    maxWait: number;
    minEvictableIdleTimeMillis: number;
    minIdle: number;
}

export interface GetIdentityDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppConnectorBundle {
    display: string;
    ref: string;
    type: string;
    value: string;
    wellKnownId: string;
}

export interface GetIdentityDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppFlatFileBundleConfigurationProperty {
    confidential: boolean;
    displayName: string;
    helpMessage: string;
    icfType: string;
    name: string;
    order: number;
    required: boolean;
    values: string[];
}

export interface GetIdentityDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppFlatFileConnectorBundle {
    display: string;
    ref: string;
    value: string;
    wellKnownId: string;
}

export interface GetIdentityDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppIdentityBridge {
    name: string;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppObjectClass {
    display: string;
    isAccountObjectClass: boolean;
    ref: string;
    resourceType: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppThreeLeggedOauthCredential {
    accessToken: string;
    accessTokenExpiry: string;
    refreshToken: string;
}

export interface GetIdentityDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionmulticloudServiceAppApp {
    multicloudPlatformUrl: string;
    multicloudServiceType: string;
}

export interface GetIdentityDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionopcServiceApp {
    currentFederationMode: string;
    currentSynchronizationMode: string;
    enablingNextFedSyncModes: boolean;
    nextFederationMode: string;
    nextSynchronizationMode: string;
    region: string;
    serviceInstanceIdentifier: string;
}

export interface GetIdentityDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionradiusAppApp {
    captureClientIp: boolean;
    clientIp: string;
    countryCodeResponseAttributeId: string;
    endUserIpAttribute: string;
    groupMembershipRadiusAttribute: string;
    groupMembershipToReturns: outputs.GetIdentityDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionradiusAppAppGroupMembershipToReturn[];
    groupNameFormat: string;
    includeGroupInResponse: boolean;
    passwordAndOtpTogether: boolean;
    port: string;
    radiusVendorSpecificId: string;
    responseFormat: string;
    responseFormatDelimiter: string;
    secretKey: string;
    typeOfRadiusApp: string;
}

export interface GetIdentityDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionradiusAppAppGroupMembershipToReturn {
    display: string;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionrequestableApp {
    requestable: boolean;
}

export interface GetIdentityDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderApp {
    assertionConsumerUrl: string;
    encryptAssertion: boolean;
    encryptionAlgorithm: string;
    encryptionCertificate: string;
    federationProtocol: string;
    groupAssertionAttributes: outputs.GetIdentityDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppGroupAssertionAttribute[];
    hokAcsUrl: string;
    hokRequired: boolean;
    includeSigningCertInSignature: boolean;
    keyEncryptionAlgorithm: string;
    lastNotificationSentTime: string;
    logoutBinding: string;
    logoutEnabled: boolean;
    logoutRequestUrl: string;
    logoutResponseUrl: string;
    metadata: string;
    nameIdFormat: string;
    nameIdUserstoreAttribute: string;
    outboundAssertionAttributes: outputs.GetIdentityDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppOutboundAssertionAttribute[];
    partnerProviderId: string;
    partnerProviderPattern: string;
    signResponseOrAssertion: string;
    signatureHashAlgorithm: string;
    signingCertificate: string;
    succinctId: string;
    tenantProviderId: string;
    userAssertionAttributes: outputs.GetIdentityDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppUserAssertionAttribute[];
}

export interface GetIdentityDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppGroupAssertionAttribute {
    condition: string;
    format: string;
    groupName: string;
    name: string;
}

export interface GetIdentityDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppOutboundAssertionAttribute {
    direction: string;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppUserAssertionAttribute {
    format: string;
    name: string;
    userStoreAttributeName: string;
}

export interface GetIdentityDomainsAppsAppUrnietfparamsscimschemasoracleidcsextensionwebTierPolicyApp {
    resourceRef: boolean;
    webTierPolicyAzControl: string;
    webTierPolicyJson: string;
}

export interface GetIdentityDomainsAppsAppUserRole {
    description: string;
    display: string;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsAuthTokenIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsAuthTokenIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsAuthTokenMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface GetIdentityDomainsAuthTokenTag {
    key: string;
    value: string;
}

export interface GetIdentityDomainsAuthTokenUrnietfparamsscimschemasoracleidcsextensionselfChangeUser {
    allowSelfChange: boolean;
}

export interface GetIdentityDomainsAuthTokenUser {
    display: string;
    name: string;
    ocid: string;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsAuthTokensAuthToken {
    attributeSets: string[];
    attributes: string;
    authorization: string;
    compartmentOcid: string;
    deleteInProgress: boolean;
    description: string;
    domainOcid: string;
    expiresOn: string;
    id: string;
    idcsCreatedBies: outputs.GetIdentityDomainsAuthTokensAuthTokenIdcsCreatedBy[];
    idcsEndpoint: string;
    idcsLastModifiedBies: outputs.GetIdentityDomainsAuthTokensAuthTokenIdcsLastModifiedBy[];
    idcsLastUpgradedInRelease: string;
    idcsPreventedOperations: string[];
    metas: outputs.GetIdentityDomainsAuthTokensAuthTokenMeta[];
    ocid: string;
    resourceTypeSchemaVersion: string;
    schemas: string[];
    status: string;
    tags: outputs.GetIdentityDomainsAuthTokensAuthTokenTag[];
    tenancyOcid: string;
    urnietfparamsscimschemasoracleidcsextensionselfChangeUsers: outputs.GetIdentityDomainsAuthTokensAuthTokenUrnietfparamsscimschemasoracleidcsextensionselfChangeUser[];
    users: outputs.GetIdentityDomainsAuthTokensAuthTokenUser[];
}

export interface GetIdentityDomainsAuthTokensAuthTokenIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsAuthTokensAuthTokenIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsAuthTokensAuthTokenMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface GetIdentityDomainsAuthTokensAuthTokenTag {
    key: string;
    value: string;
}

export interface GetIdentityDomainsAuthTokensAuthTokenUrnietfparamsscimschemasoracleidcsextensionselfChangeUser {
    allowSelfChange: boolean;
}

export interface GetIdentityDomainsAuthTokensAuthTokenUser {
    display: string;
    name: string;
    ocid: string;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsAuthenticationFactorSettingBypassCodeSetting {
    helpDeskCodeExpiryInMins: number;
    helpDeskGenerationEnabled: boolean;
    helpDeskMaxUsage: number;
    length: number;
    maxActive: number;
    selfServiceGenerationEnabled: boolean;
}

export interface GetIdentityDomainsAuthenticationFactorSettingClientAppSetting {
    deviceProtectionPolicy: string;
    initialLockoutPeriodInSecs: number;
    keyPairLength: number;
    lockoutEscalationPattern: string;
    maxFailuresBeforeLockout: number;
    maxFailuresBeforeWarning: number;
    maxLockoutIntervalInSecs: number;
    minPinLength: number;
    policyUpdateFreqInDays: number;
    requestSigningAlgo: string;
    sharedSecretEncoding: string;
    unlockAppForEachRequestEnabled: boolean;
    unlockAppIntervalInSecs: number;
    unlockOnAppForegroundEnabled: boolean;
    unlockOnAppStartEnabled: boolean;
}

export interface GetIdentityDomainsAuthenticationFactorSettingCompliancePolicy {
    action: string;
    name: string;
    value: string;
}

export interface GetIdentityDomainsAuthenticationFactorSettingEmailSetting {
    emailLinkCustomUrl: string;
    emailLinkEnabled: boolean;
}

export interface GetIdentityDomainsAuthenticationFactorSettingEndpointRestriction {
    maxEndpointTrustDurationInDays: number;
    maxEnrolledDevices: number;
    maxIncorrectAttempts: number;
    maxTrustedEndpoints: number;
    trustedEndpointsEnabled: boolean;
}

export interface GetIdentityDomainsAuthenticationFactorSettingIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsAuthenticationFactorSettingIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsAuthenticationFactorSettingIdentityStoreSetting {
    mobileNumberEnabled: boolean;
    mobileNumberUpdateEnabled: boolean;
}

export interface GetIdentityDomainsAuthenticationFactorSettingMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface GetIdentityDomainsAuthenticationFactorSettingNotificationSetting {
    pullEnabled: boolean;
}

export interface GetIdentityDomainsAuthenticationFactorSettingTag {
    key: string;
    value: string;
}

export interface GetIdentityDomainsAuthenticationFactorSettingThirdPartyFactor {
    duoSecurity: boolean;
}

export interface GetIdentityDomainsAuthenticationFactorSettingTotpSetting {
    emailOtpValidityDurationInMins: number;
    emailPasscodeLength: number;
    hashingAlgorithm: string;
    jwtValidityDurationInSecs: number;
    keyRefreshIntervalInDays: number;
    passcodeLength: number;
    smsOtpValidityDurationInMins: number;
    smsPasscodeLength: number;
    timeStepInSecs: number;
    timeStepTolerance: number;
}

export interface GetIdentityDomainsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionfidoAuthenticationFactorSetting {
    attestation: string;
    authenticatorSelectionAttachment: string;
    authenticatorSelectionRequireResidentKey: boolean;
    authenticatorSelectionResidentKey: string;
    authenticatorSelectionUserVerification: string;
    domainValidationLevel: number;
    excludeCredentials: boolean;
    publicKeyTypes: string[];
    timeout: number;
}

export interface GetIdentityDomainsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionthirdPartyAuthenticationFactorSetting {
    duoSecuritySettings: outputs.GetIdentityDomainsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionthirdPartyAuthenticationFactorSettingDuoSecuritySetting[];
}

export interface GetIdentityDomainsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionthirdPartyAuthenticationFactorSettingDuoSecuritySetting {
    apiHostname: string;
    attestationKey: string;
    integrationKey: string;
    secretKey: string;
    userMappingAttribute: string;
}

export interface GetIdentityDomainsAuthenticationFactorSettingsAuthenticationFactorSetting {
    attributeSets: string[];
    attributes: string;
    authenticationFactorSettingId: string;
    authorization: string;
    autoEnrollEmailFactorDisabled: boolean;
    bypassCodeEnabled: boolean;
    bypassCodeSettings: outputs.GetIdentityDomainsAuthenticationFactorSettingsAuthenticationFactorSettingBypassCodeSetting[];
    clientAppSettings: outputs.GetIdentityDomainsAuthenticationFactorSettingsAuthenticationFactorSettingClientAppSetting[];
    compartmentOcid: string;
    compliancePolicies: outputs.GetIdentityDomainsAuthenticationFactorSettingsAuthenticationFactorSettingCompliancePolicy[];
    deleteInProgress: boolean;
    domainOcid: string;
    emailEnabled: boolean;
    emailSettings: outputs.GetIdentityDomainsAuthenticationFactorSettingsAuthenticationFactorSettingEmailSetting[];
    endpointRestrictions: outputs.GetIdentityDomainsAuthenticationFactorSettingsAuthenticationFactorSettingEndpointRestriction[];
    fidoAuthenticatorEnabled: boolean;
    hideBackupFactorEnabled: boolean;
    id: string;
    idcsCreatedBies: outputs.GetIdentityDomainsAuthenticationFactorSettingsAuthenticationFactorSettingIdcsCreatedBy[];
    idcsEndpoint: string;
    idcsLastModifiedBies: outputs.GetIdentityDomainsAuthenticationFactorSettingsAuthenticationFactorSettingIdcsLastModifiedBy[];
    idcsLastUpgradedInRelease: string;
    idcsPreventedOperations: string[];
    identityStoreSettings: outputs.GetIdentityDomainsAuthenticationFactorSettingsAuthenticationFactorSettingIdentityStoreSetting[];
    metas: outputs.GetIdentityDomainsAuthenticationFactorSettingsAuthenticationFactorSettingMeta[];
    mfaEnabledCategory: string;
    mfaEnrollmentType: string;
    notificationSettings: outputs.GetIdentityDomainsAuthenticationFactorSettingsAuthenticationFactorSettingNotificationSetting[];
    ocid: string;
    phoneCallEnabled: boolean;
    pushEnabled: boolean;
    resourceTypeSchemaVersion: string;
    schemas: string[];
    securityQuestionsEnabled: boolean;
    smsEnabled: boolean;
    tags: outputs.GetIdentityDomainsAuthenticationFactorSettingsAuthenticationFactorSettingTag[];
    tenancyOcid: string;
    thirdPartyFactors: outputs.GetIdentityDomainsAuthenticationFactorSettingsAuthenticationFactorSettingThirdPartyFactor[];
    totpEnabled: boolean;
    totpSettings: outputs.GetIdentityDomainsAuthenticationFactorSettingsAuthenticationFactorSettingTotpSetting[];
    urnietfparamsscimschemasoracleidcsextensionfidoAuthenticationFactorSettings: outputs.GetIdentityDomainsAuthenticationFactorSettingsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionfidoAuthenticationFactorSetting[];
    urnietfparamsscimschemasoracleidcsextensionthirdPartyAuthenticationFactorSettings: outputs.GetIdentityDomainsAuthenticationFactorSettingsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionthirdPartyAuthenticationFactorSetting[];
    userEnrollmentDisabledFactors: string[];
    yubicoOtpEnabled: boolean;
}

export interface GetIdentityDomainsAuthenticationFactorSettingsAuthenticationFactorSettingBypassCodeSetting {
    helpDeskCodeExpiryInMins: number;
    helpDeskGenerationEnabled: boolean;
    helpDeskMaxUsage: number;
    length: number;
    maxActive: number;
    selfServiceGenerationEnabled: boolean;
}

export interface GetIdentityDomainsAuthenticationFactorSettingsAuthenticationFactorSettingClientAppSetting {
    deviceProtectionPolicy: string;
    initialLockoutPeriodInSecs: number;
    keyPairLength: number;
    lockoutEscalationPattern: string;
    maxFailuresBeforeLockout: number;
    maxFailuresBeforeWarning: number;
    maxLockoutIntervalInSecs: number;
    minPinLength: number;
    policyUpdateFreqInDays: number;
    requestSigningAlgo: string;
    sharedSecretEncoding: string;
    unlockAppForEachRequestEnabled: boolean;
    unlockAppIntervalInSecs: number;
    unlockOnAppForegroundEnabled: boolean;
    unlockOnAppStartEnabled: boolean;
}

export interface GetIdentityDomainsAuthenticationFactorSettingsAuthenticationFactorSettingCompliancePolicy {
    action: string;
    name: string;
    value: string;
}

export interface GetIdentityDomainsAuthenticationFactorSettingsAuthenticationFactorSettingEmailSetting {
    emailLinkCustomUrl: string;
    emailLinkEnabled: boolean;
}

export interface GetIdentityDomainsAuthenticationFactorSettingsAuthenticationFactorSettingEndpointRestriction {
    maxEndpointTrustDurationInDays: number;
    maxEnrolledDevices: number;
    maxIncorrectAttempts: number;
    maxTrustedEndpoints: number;
    trustedEndpointsEnabled: boolean;
}

export interface GetIdentityDomainsAuthenticationFactorSettingsAuthenticationFactorSettingIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsAuthenticationFactorSettingsAuthenticationFactorSettingIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsAuthenticationFactorSettingsAuthenticationFactorSettingIdentityStoreSetting {
    mobileNumberEnabled: boolean;
    mobileNumberUpdateEnabled: boolean;
}

export interface GetIdentityDomainsAuthenticationFactorSettingsAuthenticationFactorSettingMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface GetIdentityDomainsAuthenticationFactorSettingsAuthenticationFactorSettingNotificationSetting {
    pullEnabled: boolean;
}

export interface GetIdentityDomainsAuthenticationFactorSettingsAuthenticationFactorSettingTag {
    key: string;
    value: string;
}

export interface GetIdentityDomainsAuthenticationFactorSettingsAuthenticationFactorSettingThirdPartyFactor {
    duoSecurity: boolean;
}

export interface GetIdentityDomainsAuthenticationFactorSettingsAuthenticationFactorSettingTotpSetting {
    emailOtpValidityDurationInMins: number;
    emailPasscodeLength: number;
    hashingAlgorithm: string;
    jwtValidityDurationInSecs: number;
    keyRefreshIntervalInDays: number;
    passcodeLength: number;
    smsOtpValidityDurationInMins: number;
    smsPasscodeLength: number;
    timeStepInSecs: number;
    timeStepTolerance: number;
}

export interface GetIdentityDomainsAuthenticationFactorSettingsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionfidoAuthenticationFactorSetting {
    attestation: string;
    authenticatorSelectionAttachment: string;
    authenticatorSelectionRequireResidentKey: boolean;
    authenticatorSelectionResidentKey: string;
    authenticatorSelectionUserVerification: string;
    domainValidationLevel: number;
    excludeCredentials: boolean;
    publicKeyTypes: string[];
    timeout: number;
}

export interface GetIdentityDomainsAuthenticationFactorSettingsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionthirdPartyAuthenticationFactorSetting {
    duoSecuritySettings: outputs.GetIdentityDomainsAuthenticationFactorSettingsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionthirdPartyAuthenticationFactorSettingDuoSecuritySetting[];
}

export interface GetIdentityDomainsAuthenticationFactorSettingsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionthirdPartyAuthenticationFactorSettingDuoSecuritySetting {
    apiHostname: string;
    attestationKey: string;
    integrationKey: string;
    secretKey: string;
    userMappingAttribute: string;
}

export interface GetIdentityDomainsBrandingSettingCompanyName {
    locale: string;
    value: string;
}

export interface GetIdentityDomainsBrandingSettingDefaultCompanyName {
    locale: string;
    value: string;
}

export interface GetIdentityDomainsBrandingSettingDefaultImage {
    display: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsBrandingSettingDefaultLoginText {
    locale: string;
    value: string;
}

export interface GetIdentityDomainsBrandingSettingIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsBrandingSettingIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsBrandingSettingImage {
    display: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsBrandingSettingLoginText {
    locale: string;
    value: string;
}

export interface GetIdentityDomainsBrandingSettingMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface GetIdentityDomainsBrandingSettingTag {
    key: string;
    value: string;
}

export interface GetIdentityDomainsBrandingSettingsBrandingSetting {
    attributeSets: string[];
    attributes: string;
    authorization: string;
    brandingSettingId: string;
    companyNames: outputs.GetIdentityDomainsBrandingSettingsBrandingSettingCompanyName[];
    compartmentOcid: string;
    customBranding: boolean;
    customCssLocation: string;
    customHtmlLocation: string;
    customTranslation: string;
    defaultCompanyNames: outputs.GetIdentityDomainsBrandingSettingsBrandingSettingDefaultCompanyName[];
    defaultImages: outputs.GetIdentityDomainsBrandingSettingsBrandingSettingDefaultImage[];
    defaultLoginTexts: outputs.GetIdentityDomainsBrandingSettingsBrandingSettingDefaultLoginText[];
    deleteInProgress: boolean;
    domainOcid: string;
    enableTermsOfUse: boolean;
    externalId: string;
    id: string;
    idcsCreatedBies: outputs.GetIdentityDomainsBrandingSettingsBrandingSettingIdcsCreatedBy[];
    idcsEndpoint: string;
    idcsLastModifiedBies: outputs.GetIdentityDomainsBrandingSettingsBrandingSettingIdcsLastModifiedBy[];
    idcsLastUpgradedInRelease: string;
    idcsPreventedOperations: string[];
    images: outputs.GetIdentityDomainsBrandingSettingsBrandingSettingImage[];
    isHostedPage: boolean;
    locale: string;
    loginTexts: outputs.GetIdentityDomainsBrandingSettingsBrandingSettingLoginText[];
    metas: outputs.GetIdentityDomainsBrandingSettingsBrandingSettingMeta[];
    ocid: string;
    preferredLanguage: string;
    privacyPolicyUrl: string;
    resourceTypeSchemaVersion: string;
    schemas: string[];
    tags: outputs.GetIdentityDomainsBrandingSettingsBrandingSettingTag[];
    tenancyOcid: string;
    termsOfUseUrl: string;
    timezone: string;
}

export interface GetIdentityDomainsBrandingSettingsBrandingSettingCompanyName {
    locale: string;
    value: string;
}

export interface GetIdentityDomainsBrandingSettingsBrandingSettingDefaultCompanyName {
    locale: string;
    value: string;
}

export interface GetIdentityDomainsBrandingSettingsBrandingSettingDefaultImage {
    display: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsBrandingSettingsBrandingSettingDefaultLoginText {
    locale: string;
    value: string;
}

export interface GetIdentityDomainsBrandingSettingsBrandingSettingIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsBrandingSettingsBrandingSettingIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsBrandingSettingsBrandingSettingImage {
    display: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsBrandingSettingsBrandingSettingLoginText {
    locale: string;
    value: string;
}

export interface GetIdentityDomainsBrandingSettingsBrandingSettingMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface GetIdentityDomainsBrandingSettingsBrandingSettingTag {
    key: string;
    value: string;
}

export interface GetIdentityDomainsCloudGateIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsCloudGateIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsCloudGateMapping {
    appId: string;
    mappingId: string;
    name: string;
    nginxSettings: string;
    policyName: string;
    proxyPass: string;
    ref: string;
    resourcePrefix: string;
    serverId: string;
    upstreamServerGroupId: string;
    value: string;
}

export interface GetIdentityDomainsCloudGateMappingCloudGate {
    ref: string;
    value: string;
}

export interface GetIdentityDomainsCloudGateMappingGatewayApp {
    name: string;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsCloudGateMappingIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsCloudGateMappingIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsCloudGateMappingMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface GetIdentityDomainsCloudGateMappingServer {
    ref: string;
    value: string;
}

export interface GetIdentityDomainsCloudGateMappingTag {
    key: string;
    value: string;
}

export interface GetIdentityDomainsCloudGateMappingUpstreamServerGroup {
    ref: string;
    ssl: boolean;
    value: string;
}

export interface GetIdentityDomainsCloudGateMappingsCloudGateMapping {
    attributeSets: string[];
    attributes: string;
    authorization: string;
    cloudGates: outputs.GetIdentityDomainsCloudGateMappingsCloudGateMappingCloudGate[];
    compartmentOcid: string;
    deleteInProgress: boolean;
    description: string;
    domainOcid: string;
    gatewayApps: outputs.GetIdentityDomainsCloudGateMappingsCloudGateMappingGatewayApp[];
    id: string;
    idcsCreatedBies: outputs.GetIdentityDomainsCloudGateMappingsCloudGateMappingIdcsCreatedBy[];
    idcsEndpoint: string;
    idcsLastModifiedBies: outputs.GetIdentityDomainsCloudGateMappingsCloudGateMappingIdcsLastModifiedBy[];
    idcsLastUpgradedInRelease: string;
    idcsPreventedOperations: string[];
    isOpcService: boolean;
    metas: outputs.GetIdentityDomainsCloudGateMappingsCloudGateMappingMeta[];
    nginxSettings: string;
    ocid: string;
    policyName: string;
    proxyPass: string;
    resourcePrefix: string;
    resourceTypeSchemaVersion: string;
    schemas: string[];
    servers: outputs.GetIdentityDomainsCloudGateMappingsCloudGateMappingServer[];
    tags: outputs.GetIdentityDomainsCloudGateMappingsCloudGateMappingTag[];
    tenancyOcid: string;
    upstreamServerGroups: outputs.GetIdentityDomainsCloudGateMappingsCloudGateMappingUpstreamServerGroup[];
}

export interface GetIdentityDomainsCloudGateMappingsCloudGateMappingCloudGate {
    ref: string;
    value: string;
}

export interface GetIdentityDomainsCloudGateMappingsCloudGateMappingGatewayApp {
    name: string;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsCloudGateMappingsCloudGateMappingIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsCloudGateMappingsCloudGateMappingIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsCloudGateMappingsCloudGateMappingMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface GetIdentityDomainsCloudGateMappingsCloudGateMappingServer {
    ref: string;
    value: string;
}

export interface GetIdentityDomainsCloudGateMappingsCloudGateMappingTag {
    key: string;
    value: string;
}

export interface GetIdentityDomainsCloudGateMappingsCloudGateMappingUpstreamServerGroup {
    ref: string;
    ssl: boolean;
    value: string;
}

export interface GetIdentityDomainsCloudGateMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface GetIdentityDomainsCloudGateOauthClient {
    clientId: string;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsCloudGateServer {
    hostName: string;
    nginxSettings: string;
    port: number;
    serverId: string;
    ssl: boolean;
}

export interface GetIdentityDomainsCloudGateServerCloudGate {
    ref: string;
    value: string;
}

export interface GetIdentityDomainsCloudGateServerIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsCloudGateServerIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsCloudGateServerMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface GetIdentityDomainsCloudGateServerTag {
    key: string;
    value: string;
}

export interface GetIdentityDomainsCloudGateServersCloudGateServer {
    attributeSets: string[];
    attributes: string;
    authorization: string;
    cloudGates: outputs.GetIdentityDomainsCloudGateServersCloudGateServerCloudGate[];
    compartmentOcid: string;
    deleteInProgress: boolean;
    description: string;
    displayName: string;
    domainOcid: string;
    hostName: string;
    id: string;
    idcsCreatedBies: outputs.GetIdentityDomainsCloudGateServersCloudGateServerIdcsCreatedBy[];
    idcsEndpoint: string;
    idcsLastModifiedBies: outputs.GetIdentityDomainsCloudGateServersCloudGateServerIdcsLastModifiedBy[];
    idcsLastUpgradedInRelease: string;
    idcsPreventedOperations: string[];
    isOpcService: boolean;
    metas: outputs.GetIdentityDomainsCloudGateServersCloudGateServerMeta[];
    nginxSettings: string;
    ocid: string;
    port: number;
    resourceTypeSchemaVersion: string;
    schemas: string[];
    ssl: boolean;
    tags: outputs.GetIdentityDomainsCloudGateServersCloudGateServerTag[];
    tenancyOcid: string;
}

export interface GetIdentityDomainsCloudGateServersCloudGateServerCloudGate {
    ref: string;
    value: string;
}

export interface GetIdentityDomainsCloudGateServersCloudGateServerIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsCloudGateServersCloudGateServerIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsCloudGateServersCloudGateServerMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface GetIdentityDomainsCloudGateServersCloudGateServerTag {
    key: string;
    value: string;
}

export interface GetIdentityDomainsCloudGateTag {
    key: string;
    value: string;
}

export interface GetIdentityDomainsCloudGateUpstreamServer {
    displayName: string;
    groupId: string;
    hostName: string;
    nginxSettings: string;
    port: number;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsCloudGateUpstreamServerGroup {
    displayName: string;
    nginxSettings: string;
    ref: string;
    ssl: boolean;
    value: string;
}

export interface GetIdentityDomainsCloudGatesCloudGate {
    active: boolean;
    attributeSets: string[];
    attributes: string;
    authorization: string;
    compartmentOcid: string;
    deleteInProgress: boolean;
    description: string;
    displayName: string;
    domainOcid: string;
    id: string;
    idcsCreatedBies: outputs.GetIdentityDomainsCloudGatesCloudGateIdcsCreatedBy[];
    idcsEndpoint: string;
    idcsLastModifiedBies: outputs.GetIdentityDomainsCloudGatesCloudGateIdcsLastModifiedBy[];
    idcsLastUpgradedInRelease: string;
    idcsPreventedOperations: string[];
    isOpcService: boolean;
    lastModifiedTime: string;
    mappings: outputs.GetIdentityDomainsCloudGatesCloudGateMapping[];
    metas: outputs.GetIdentityDomainsCloudGatesCloudGateMeta[];
    oauthClients: outputs.GetIdentityDomainsCloudGatesCloudGateOauthClient[];
    ocid: string;
    resourceTypeSchemaVersion: string;
    schemas: string[];
    servers: outputs.GetIdentityDomainsCloudGatesCloudGateServer[];
    tags: outputs.GetIdentityDomainsCloudGatesCloudGateTag[];
    tenancyOcid: string;
    type: string;
    upstreamServerGroups: outputs.GetIdentityDomainsCloudGatesCloudGateUpstreamServerGroup[];
    upstreamServers: outputs.GetIdentityDomainsCloudGatesCloudGateUpstreamServer[];
}

export interface GetIdentityDomainsCloudGatesCloudGateIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsCloudGatesCloudGateIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsCloudGatesCloudGateMapping {
    appId: string;
    mappingId: string;
    name: string;
    nginxSettings: string;
    policyName: string;
    proxyPass: string;
    ref: string;
    resourcePrefix: string;
    serverId: string;
    upstreamServerGroupId: string;
    value: string;
}

export interface GetIdentityDomainsCloudGatesCloudGateMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface GetIdentityDomainsCloudGatesCloudGateOauthClient {
    clientId: string;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsCloudGatesCloudGateServer {
    hostName: string;
    nginxSettings: string;
    port: number;
    serverId: string;
    ssl: boolean;
}

export interface GetIdentityDomainsCloudGatesCloudGateTag {
    key: string;
    value: string;
}

export interface GetIdentityDomainsCloudGatesCloudGateUpstreamServer {
    displayName: string;
    groupId: string;
    hostName: string;
    nginxSettings: string;
    port: number;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsCloudGatesCloudGateUpstreamServerGroup {
    displayName: string;
    nginxSettings: string;
    ref: string;
    ssl: boolean;
    value: string;
}

export interface GetIdentityDomainsConditionIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsConditionIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsConditionMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface GetIdentityDomainsConditionTag {
    key: string;
    value: string;
}

export interface GetIdentityDomainsConditionsCondition {
    attributeName: string;
    attributeSets: string[];
    attributeValue: string;
    attributes: string;
    authorization: string;
    compartmentOcid: string;
    deleteInProgress: boolean;
    description: string;
    domainOcid: string;
    evaluateConditionIf: string;
    externalId: string;
    id: string;
    idcsCreatedBies: outputs.GetIdentityDomainsConditionsConditionIdcsCreatedBy[];
    idcsEndpoint: string;
    idcsLastModifiedBies: outputs.GetIdentityDomainsConditionsConditionIdcsLastModifiedBy[];
    idcsLastUpgradedInRelease: string;
    idcsPreventedOperations: string[];
    metas: outputs.GetIdentityDomainsConditionsConditionMeta[];
    name: string;
    ocid: string;
    operator: string;
    resourceTypeSchemaVersion: string;
    schemas: string[];
    tags: outputs.GetIdentityDomainsConditionsConditionTag[];
    tenancyOcid: string;
}

export interface GetIdentityDomainsConditionsConditionIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsConditionsConditionIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsConditionsConditionMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface GetIdentityDomainsConditionsConditionTag {
    key: string;
    value: string;
}

export interface GetIdentityDomainsCustomerSecretKeyIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsCustomerSecretKeyIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsCustomerSecretKeyMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface GetIdentityDomainsCustomerSecretKeyTag {
    key: string;
    value: string;
}

export interface GetIdentityDomainsCustomerSecretKeyUrnietfparamsscimschemasoracleidcsextensionselfChangeUser {
    allowSelfChange: boolean;
}

export interface GetIdentityDomainsCustomerSecretKeyUser {
    display: string;
    name: string;
    ocid: string;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsCustomerSecretKeysCustomerSecretKey {
    accessKey: string;
    attributeSets: string[];
    attributes: string;
    authorization: string;
    compartmentOcid: string;
    deleteInProgress: boolean;
    description: string;
    displayName: string;
    domainOcid: string;
    expiresOn: string;
    id: string;
    idcsCreatedBies: outputs.GetIdentityDomainsCustomerSecretKeysCustomerSecretKeyIdcsCreatedBy[];
    idcsEndpoint: string;
    idcsLastModifiedBies: outputs.GetIdentityDomainsCustomerSecretKeysCustomerSecretKeyIdcsLastModifiedBy[];
    idcsLastUpgradedInRelease: string;
    idcsPreventedOperations: string[];
    metas: outputs.GetIdentityDomainsCustomerSecretKeysCustomerSecretKeyMeta[];
    ocid: string;
    resourceTypeSchemaVersion: string;
    schemas: string[];
    status: string;
    tags: outputs.GetIdentityDomainsCustomerSecretKeysCustomerSecretKeyTag[];
    tenancyOcid: string;
    urnietfparamsscimschemasoracleidcsextensionselfChangeUsers: outputs.GetIdentityDomainsCustomerSecretKeysCustomerSecretKeyUrnietfparamsscimschemasoracleidcsextensionselfChangeUser[];
    users: outputs.GetIdentityDomainsCustomerSecretKeysCustomerSecretKeyUser[];
}

export interface GetIdentityDomainsCustomerSecretKeysCustomerSecretKeyIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsCustomerSecretKeysCustomerSecretKeyIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsCustomerSecretKeysCustomerSecretKeyMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface GetIdentityDomainsCustomerSecretKeysCustomerSecretKeyTag {
    key: string;
    value: string;
}

export interface GetIdentityDomainsCustomerSecretKeysCustomerSecretKeyUrnietfparamsscimschemasoracleidcsextensionselfChangeUser {
    allowSelfChange: boolean;
}

export interface GetIdentityDomainsCustomerSecretKeysCustomerSecretKeyUser {
    display: string;
    name: string;
    ocid: string;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsDomain {
    adminEmail: string;
    adminFirstName: string;
    adminLastName: string;
    adminUserName: string;
    compartmentId: string;
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    freeformTags: {[key: string]: string};
    homeRegion: string;
    homeRegionUrl: string;
    id: string;
    isHiddenOnLogin: boolean;
    isNotificationBypassed: boolean;
    isPrimaryEmailRequired: boolean;
    licenseType: string;
    lifecycleDetails: string;
    replicaRegions: outputs.GetIdentityDomainsDomainReplicaRegion[];
    state: string;
    timeCreated: string;
    type: string;
    url: string;
}

export interface GetIdentityDomainsDomainReplicaRegion {
    region: string;
    state: string;
    url: string;
}

export interface GetIdentityDomainsDynamicResourceGroupDynamicGroupAppRole {
    adminRole: boolean;
    appId: string;
    appName: string;
    display: string;
    legacyGroupName: string;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsDynamicResourceGroupGrant {
    appId: string;
    grantMechanism: string;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsDynamicResourceGroupIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsDynamicResourceGroupIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsDynamicResourceGroupMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface GetIdentityDomainsDynamicResourceGroupTag {
    key: string;
    value: string;
}

export interface GetIdentityDomainsDynamicResourceGroupUrnietfparamsscimschemasoracleidcsextensionOciTag {
    definedTags: outputs.GetIdentityDomainsDynamicResourceGroupUrnietfparamsscimschemasoracleidcsextensionOciTagDefinedTag[];
    freeformTags: outputs.GetIdentityDomainsDynamicResourceGroupUrnietfparamsscimschemasoracleidcsextensionOciTagFreeformTag[];
    tagSlug: string;
}

export interface GetIdentityDomainsDynamicResourceGroupUrnietfparamsscimschemasoracleidcsextensionOciTagDefinedTag {
    key: string;
    namespace: string;
    value: string;
}

export interface GetIdentityDomainsDynamicResourceGroupUrnietfparamsscimschemasoracleidcsextensionOciTagFreeformTag {
    key: string;
    value: string;
}

export interface GetIdentityDomainsDynamicResourceGroupsDynamicResourceGroup {
    attributeSets: string[];
    attributes: string;
    authorization: string;
    compartmentOcid: string;
    deleteInProgress: boolean;
    description: string;
    displayName: string;
    domainOcid: string;
    dynamicGroupAppRoles: outputs.GetIdentityDomainsDynamicResourceGroupsDynamicResourceGroupDynamicGroupAppRole[];
    grants: outputs.GetIdentityDomainsDynamicResourceGroupsDynamicResourceGroupGrant[];
    id: string;
    idcsCreatedBies: outputs.GetIdentityDomainsDynamicResourceGroupsDynamicResourceGroupIdcsCreatedBy[];
    idcsEndpoint: string;
    idcsLastModifiedBies: outputs.GetIdentityDomainsDynamicResourceGroupsDynamicResourceGroupIdcsLastModifiedBy[];
    idcsLastUpgradedInRelease: string;
    idcsPreventedOperations: string[];
    matchingRule: string;
    metas: outputs.GetIdentityDomainsDynamicResourceGroupsDynamicResourceGroupMeta[];
    ocid: string;
    resourceTypeSchemaVersion: string;
    schemas: string[];
    tags: outputs.GetIdentityDomainsDynamicResourceGroupsDynamicResourceGroupTag[];
    tenancyOcid: string;
    urnietfparamsscimschemasoracleidcsextensionOciTags: outputs.GetIdentityDomainsDynamicResourceGroupsDynamicResourceGroupUrnietfparamsscimschemasoracleidcsextensionOciTag[];
}

export interface GetIdentityDomainsDynamicResourceGroupsDynamicResourceGroupDynamicGroupAppRole {
    adminRole: boolean;
    appId: string;
    appName: string;
    display: string;
    legacyGroupName: string;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsDynamicResourceGroupsDynamicResourceGroupGrant {
    appId: string;
    grantMechanism: string;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsDynamicResourceGroupsDynamicResourceGroupIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsDynamicResourceGroupsDynamicResourceGroupIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsDynamicResourceGroupsDynamicResourceGroupMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface GetIdentityDomainsDynamicResourceGroupsDynamicResourceGroupTag {
    key: string;
    value: string;
}

export interface GetIdentityDomainsDynamicResourceGroupsDynamicResourceGroupUrnietfparamsscimschemasoracleidcsextensionOciTag {
    definedTags: outputs.GetIdentityDomainsDynamicResourceGroupsDynamicResourceGroupUrnietfparamsscimschemasoracleidcsextensionOciTagDefinedTag[];
    freeformTags: outputs.GetIdentityDomainsDynamicResourceGroupsDynamicResourceGroupUrnietfparamsscimschemasoracleidcsextensionOciTagFreeformTag[];
    tagSlug: string;
}

export interface GetIdentityDomainsDynamicResourceGroupsDynamicResourceGroupUrnietfparamsscimschemasoracleidcsextensionOciTagDefinedTag {
    key: string;
    namespace: string;
    value: string;
}

export interface GetIdentityDomainsDynamicResourceGroupsDynamicResourceGroupUrnietfparamsscimschemasoracleidcsextensionOciTagFreeformTag {
    key: string;
    value: string;
}

export interface GetIdentityDomainsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetIdentityDomainsGrantApp {
    display: string;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsGrantAppEntitlementCollection {
    ref: string;
    value: string;
}

export interface GetIdentityDomainsGrantEntitlement {
    attributeName: string;
    attributeValue: string;
}

export interface GetIdentityDomainsGrantGrantee {
    display: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsGrantGrantor {
    display: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsGrantIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsGrantIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsGrantMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface GetIdentityDomainsGrantTag {
    key: string;
    value: string;
}

export interface GetIdentityDomainsGrantsGrant {
    appEntitlementCollections: outputs.GetIdentityDomainsGrantsGrantAppEntitlementCollection[];
    apps: outputs.GetIdentityDomainsGrantsGrantApp[];
    attributeSets: string[];
    attributes: string;
    authorization: string;
    compartmentOcid: string;
    compositeKey: string;
    deleteInProgress: boolean;
    domainOcid: string;
    entitlements: outputs.GetIdentityDomainsGrantsGrantEntitlement[];
    grantMechanism: string;
    grantedAttributeValuesJson: string;
    grantees: outputs.GetIdentityDomainsGrantsGrantGrantee[];
    grantors: outputs.GetIdentityDomainsGrantsGrantGrantor[];
    id: string;
    idcsCreatedBies: outputs.GetIdentityDomainsGrantsGrantIdcsCreatedBy[];
    idcsEndpoint: string;
    idcsLastModifiedBies: outputs.GetIdentityDomainsGrantsGrantIdcsLastModifiedBy[];
    idcsLastUpgradedInRelease: string;
    idcsPreventedOperations: string[];
    isFulfilled: boolean;
    metas: outputs.GetIdentityDomainsGrantsGrantMeta[];
    ocid: string;
    resourceTypeSchemaVersion: string;
    schemas: string[];
    tags: outputs.GetIdentityDomainsGrantsGrantTag[];
    tenancyOcid: string;
}

export interface GetIdentityDomainsGrantsGrantApp {
    display: string;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsGrantsGrantAppEntitlementCollection {
    ref: string;
    value: string;
}

export interface GetIdentityDomainsGrantsGrantEntitlement {
    attributeName: string;
    attributeValue: string;
}

export interface GetIdentityDomainsGrantsGrantGrantee {
    display: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsGrantsGrantGrantor {
    display: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsGrantsGrantIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsGrantsGrantIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsGrantsGrantMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface GetIdentityDomainsGrantsGrantTag {
    key: string;
    value: string;
}

export interface GetIdentityDomainsGroupIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsGroupIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsGroupMember {
    dateAdded: string;
    display: string;
    membershipOcid: string;
    name: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsGroupMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface GetIdentityDomainsGroupTag {
    key: string;
    value: string;
}

export interface GetIdentityDomainsGroupUrnietfparamsscimschemasoracleidcsextensionOciTag {
    definedTags: outputs.GetIdentityDomainsGroupUrnietfparamsscimschemasoracleidcsextensionOciTagDefinedTag[];
    freeformTags: outputs.GetIdentityDomainsGroupUrnietfparamsscimschemasoracleidcsextensionOciTagFreeformTag[];
    tagSlug: string;
}

export interface GetIdentityDomainsGroupUrnietfparamsscimschemasoracleidcsextensionOciTagDefinedTag {
    key: string;
    namespace: string;
    value: string;
}

export interface GetIdentityDomainsGroupUrnietfparamsscimschemasoracleidcsextensionOciTagFreeformTag {
    key: string;
    value: string;
}

export interface GetIdentityDomainsGroupUrnietfparamsscimschemasoracleidcsextensiondbcsGroup {
    domainLevelSchema: string;
    domainLevelSchemaNames: outputs.GetIdentityDomainsGroupUrnietfparamsscimschemasoracleidcsextensiondbcsGroupDomainLevelSchemaName[];
    instanceLevelSchema: string;
    instanceLevelSchemaNames: outputs.GetIdentityDomainsGroupUrnietfparamsscimschemasoracleidcsextensiondbcsGroupInstanceLevelSchemaName[];
}

export interface GetIdentityDomainsGroupUrnietfparamsscimschemasoracleidcsextensiondbcsGroupDomainLevelSchemaName {
    domainName: string;
    schemaName: string;
}

export interface GetIdentityDomainsGroupUrnietfparamsscimschemasoracleidcsextensiondbcsGroupInstanceLevelSchemaName {
    dbInstanceId: string;
    schemaName: string;
}

export interface GetIdentityDomainsGroupUrnietfparamsscimschemasoracleidcsextensiondynamicGroup {
    membershipRule: string;
    membershipType: string;
}

export interface GetIdentityDomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroup {
    appRoles: outputs.GetIdentityDomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupAppRole[];
    creationMechanism: string;
    description: string;
    grants: outputs.GetIdentityDomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupGrant[];
    owners: outputs.GetIdentityDomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupOwner[];
    passwordPolicies: outputs.GetIdentityDomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupPasswordPolicy[];
    syncedFromApps: outputs.GetIdentityDomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupSyncedFromApp[];
}

export interface GetIdentityDomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupAppRole {
    adminRole: boolean;
    appId: string;
    appName: string;
    display: string;
    legacyGroupName: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupGrant {
    appId: string;
    grantMechanism: string;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupOwner {
    display: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupPasswordPolicy {
    name: string;
    priority: number;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupSyncedFromApp {
    display: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsGroupUrnietfparamsscimschemasoracleidcsextensionposixGroup {
    gidNumber: number;
}

export interface GetIdentityDomainsGroupUrnietfparamsscimschemasoracleidcsextensionrequestableGroup {
    requestable: boolean;
}

export interface GetIdentityDomainsGroupsGroup {
    attributeSets: string[];
    attributes: string;
    authorization: string;
    compartmentOcid: string;
    deleteInProgress: boolean;
    displayName: string;
    domainOcid: string;
    externalId: string;
    forceDelete: boolean;
    id: string;
    idcsCreatedBies: outputs.GetIdentityDomainsGroupsGroupIdcsCreatedBy[];
    idcsEndpoint: string;
    idcsLastModifiedBies: outputs.GetIdentityDomainsGroupsGroupIdcsLastModifiedBy[];
    idcsLastUpgradedInRelease: string;
    idcsPreventedOperations: string[];
    members: outputs.GetIdentityDomainsGroupsGroupMember[];
    metas: outputs.GetIdentityDomainsGroupsGroupMeta[];
    nonUniqueDisplayName: string;
    ocid: string;
    resourceTypeSchemaVersion: string;
    schemas: string[];
    tags: outputs.GetIdentityDomainsGroupsGroupTag[];
    tenancyOcid: string;
    urnietfparamsscimschemasoracleidcsextensionOciTags: outputs.GetIdentityDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensionOciTag[];
    urnietfparamsscimschemasoracleidcsextensiondbcsGroups: outputs.GetIdentityDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensiondbcsGroup[];
    urnietfparamsscimschemasoracleidcsextensiondynamicGroups: outputs.GetIdentityDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensiondynamicGroup[];
    urnietfparamsscimschemasoracleidcsextensiongroupGroups: outputs.GetIdentityDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroup[];
    urnietfparamsscimschemasoracleidcsextensionposixGroups: outputs.GetIdentityDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensionposixGroup[];
    urnietfparamsscimschemasoracleidcsextensionrequestableGroups: outputs.GetIdentityDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensionrequestableGroup[];
}

export interface GetIdentityDomainsGroupsGroupIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsGroupsGroupIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsGroupsGroupMember {
    dateAdded: string;
    display: string;
    membershipOcid: string;
    name: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsGroupsGroupMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface GetIdentityDomainsGroupsGroupTag {
    key: string;
    value: string;
}

export interface GetIdentityDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensionOciTag {
    definedTags: outputs.GetIdentityDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensionOciTagDefinedTag[];
    freeformTags: outputs.GetIdentityDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensionOciTagFreeformTag[];
    tagSlug: string;
}

export interface GetIdentityDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensionOciTagDefinedTag {
    key: string;
    namespace: string;
    value: string;
}

export interface GetIdentityDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensionOciTagFreeformTag {
    key: string;
    value: string;
}

export interface GetIdentityDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensiondbcsGroup {
    domainLevelSchema: string;
    domainLevelSchemaNames: outputs.GetIdentityDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensiondbcsGroupDomainLevelSchemaName[];
    instanceLevelSchema: string;
    instanceLevelSchemaNames: outputs.GetIdentityDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensiondbcsGroupInstanceLevelSchemaName[];
}

export interface GetIdentityDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensiondbcsGroupDomainLevelSchemaName {
    domainName: string;
    schemaName: string;
}

export interface GetIdentityDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensiondbcsGroupInstanceLevelSchemaName {
    dbInstanceId: string;
    schemaName: string;
}

export interface GetIdentityDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensiondynamicGroup {
    membershipRule: string;
    membershipType: string;
}

export interface GetIdentityDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroup {
    appRoles: outputs.GetIdentityDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupAppRole[];
    creationMechanism: string;
    description: string;
    grants: outputs.GetIdentityDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupGrant[];
    owners: outputs.GetIdentityDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupOwner[];
    passwordPolicies: outputs.GetIdentityDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupPasswordPolicy[];
    syncedFromApps: outputs.GetIdentityDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupSyncedFromApp[];
}

export interface GetIdentityDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupAppRole {
    adminRole: boolean;
    appId: string;
    appName: string;
    display: string;
    legacyGroupName: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupGrant {
    appId: string;
    grantMechanism: string;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupOwner {
    display: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupPasswordPolicy {
    name: string;
    priority: number;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupSyncedFromApp {
    display: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensionposixGroup {
    gidNumber: number;
}

export interface GetIdentityDomainsGroupsGroupUrnietfparamsscimschemasoracleidcsextensionrequestableGroup {
    requestable: boolean;
}

export interface GetIdentityDomainsIdentityPropagationTrustIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsIdentityPropagationTrustIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsIdentityPropagationTrustImpersonationServiceUser {
    ocid: string;
    ref: string;
    rule: string;
    value: string;
}

export interface GetIdentityDomainsIdentityPropagationTrustKeytab {
    secretOcid: string;
    secretVersion: number;
}

export interface GetIdentityDomainsIdentityPropagationTrustMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface GetIdentityDomainsIdentityPropagationTrustTag {
    key: string;
    value: string;
}

export interface GetIdentityDomainsIdentityPropagationTrustsIdentityPropagationTrust {
    accountId: string;
    active: boolean;
    allowImpersonation: boolean;
    attributeSets: string[];
    attributes: string;
    authorization: string;
    clientClaimName: string;
    clientClaimValues: string[];
    clockSkewSeconds: number;
    compartmentOcid: string;
    deleteInProgress: boolean;
    description: string;
    domainOcid: string;
    id: string;
    idcsCreatedBies: outputs.GetIdentityDomainsIdentityPropagationTrustsIdentityPropagationTrustIdcsCreatedBy[];
    idcsEndpoint: string;
    idcsLastModifiedBies: outputs.GetIdentityDomainsIdentityPropagationTrustsIdentityPropagationTrustIdcsLastModifiedBy[];
    idcsLastUpgradedInRelease: string;
    idcsPreventedOperations: string[];
    impersonationServiceUsers: outputs.GetIdentityDomainsIdentityPropagationTrustsIdentityPropagationTrustImpersonationServiceUser[];
    issuer: string;
    keytabs: outputs.GetIdentityDomainsIdentityPropagationTrustsIdentityPropagationTrustKeytab[];
    metas: outputs.GetIdentityDomainsIdentityPropagationTrustsIdentityPropagationTrustMeta[];
    name: string;
    oauthClients: string[];
    ocid: string;
    publicCertificate: string;
    publicKeyEndpoint: string;
    resourceTypeSchemaVersion: string;
    schemas: string[];
    subjectClaimName: string;
    subjectMappingAttribute: string;
    subjectType: string;
    tags: outputs.GetIdentityDomainsIdentityPropagationTrustsIdentityPropagationTrustTag[];
    tenancyOcid: string;
    type: string;
}

export interface GetIdentityDomainsIdentityPropagationTrustsIdentityPropagationTrustIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsIdentityPropagationTrustsIdentityPropagationTrustIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsIdentityPropagationTrustsIdentityPropagationTrustImpersonationServiceUser {
    ocid: string;
    ref: string;
    rule: string;
    value: string;
}

export interface GetIdentityDomainsIdentityPropagationTrustsIdentityPropagationTrustKeytab {
    secretOcid: string;
    secretVersion: number;
}

export interface GetIdentityDomainsIdentityPropagationTrustsIdentityPropagationTrustMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface GetIdentityDomainsIdentityPropagationTrustsIdentityPropagationTrustTag {
    key: string;
    value: string;
}

export interface GetIdentityDomainsIdentityProviderCorrelationPolicy {
    display: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsIdentityProviderIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsIdentityProviderIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsIdentityProviderJitUserProvAssignedGroup {
    display: string;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsIdentityProviderJitUserProvAttribute {
    ref: string;
    value: string;
}

export interface GetIdentityDomainsIdentityProviderJitUserProvGroupMapping {
    idpGroup: string;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsIdentityProviderMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface GetIdentityDomainsIdentityProviderTag {
    key: string;
    value: string;
}

export interface GetIdentityDomainsIdentityProviderUrnietfparamsscimschemasoracleidcsextensionsocialIdentityProvider {
    accessTokenUrl: string;
    accountLinkingEnabled: boolean;
    adminScopes: string[];
    authzUrl: string;
    autoRedirectEnabled: boolean;
    clientCredentialInPayload: boolean;
    clockSkewInSeconds: number;
    consumerKey: string;
    consumerSecret: string;
    discoveryUrl: string;
    idAttribute: string;
    jitProvAssignedGroups: outputs.GetIdentityDomainsIdentityProviderUrnietfparamsscimschemasoracleidcsextensionsocialIdentityProviderJitProvAssignedGroup[];
    jitProvGroupStaticListEnabled: boolean;
    profileUrl: string;
    redirectUrl: string;
    registrationEnabled: boolean;
    scopes: string[];
    serviceProviderName: string;
    socialJitProvisioningEnabled: boolean;
    status: string;
}

export interface GetIdentityDomainsIdentityProviderUrnietfparamsscimschemasoracleidcsextensionsocialIdentityProviderJitProvAssignedGroup {
    display: string;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsIdentityProviderUrnietfparamsscimschemasoracleidcsextensionx509identityProvider {
    certMatchAttribute: string;
    crlCheckOnOcspFailureEnabled: boolean;
    crlEnabled: boolean;
    crlLocation: string;
    crlReloadDuration: number;
    ekuValidationEnabled: boolean;
    ekuValues: string[];
    ocspAllowUnknownResponseStatus: boolean;
    ocspEnableSignedResponse: boolean;
    ocspEnabled: boolean;
    ocspResponderUrl: string;
    ocspRevalidateTime: number;
    ocspServerName: string;
    ocspTrustCertChains: string[];
    otherCertMatchAttribute: string;
    signingCertificateChains: string[];
    userMatchAttribute: string;
}

export interface GetIdentityDomainsIdentityProvidersIdentityProvider {
    assertionAttribute: string;
    attributeSets: string[];
    attributes: string;
    authnRequestBinding: string;
    authorization: string;
    compartmentOcid: string;
    correlationPolicies: outputs.GetIdentityDomainsIdentityProvidersIdentityProviderCorrelationPolicy[];
    deleteInProgress: boolean;
    description: string;
    domainOcid: string;
    enabled: boolean;
    encryptionCertificate: string;
    externalId: string;
    iconUrl: string;
    id: string;
    idcsCreatedBies: outputs.GetIdentityDomainsIdentityProvidersIdentityProviderIdcsCreatedBy[];
    idcsEndpoint: string;
    idcsLastModifiedBies: outputs.GetIdentityDomainsIdentityProvidersIdentityProviderIdcsLastModifiedBy[];
    idcsLastUpgradedInRelease: string;
    idcsPreventedOperations: string[];
    idpSsoUrl: string;
    includeSigningCertInSignature: boolean;
    jitUserProvAssignedGroups: outputs.GetIdentityDomainsIdentityProvidersIdentityProviderJitUserProvAssignedGroup[];
    jitUserProvAttributeUpdateEnabled: boolean;
    jitUserProvAttributes: outputs.GetIdentityDomainsIdentityProvidersIdentityProviderJitUserProvAttribute[];
    jitUserProvCreateUserEnabled: boolean;
    jitUserProvEnabled: boolean;
    jitUserProvGroupAssertionAttributeEnabled: boolean;
    jitUserProvGroupAssignmentMethod: string;
    jitUserProvGroupMappingMode: string;
    jitUserProvGroupMappings: outputs.GetIdentityDomainsIdentityProvidersIdentityProviderJitUserProvGroupMapping[];
    jitUserProvGroupSamlAttributeName: string;
    jitUserProvGroupStaticListEnabled: boolean;
    jitUserProvIgnoreErrorOnAbsentGroups: boolean;
    lastNotificationSentTime: string;
    logoutBinding: string;
    logoutEnabled: boolean;
    logoutRequestUrl: string;
    logoutResponseUrl: string;
    metadata: string;
    metas: outputs.GetIdentityDomainsIdentityProvidersIdentityProviderMeta[];
    nameIdFormat: string;
    ocid: string;
    partnerName: string;
    partnerProviderId: string;
    requestedAuthenticationContexts: string[];
    requireForceAuthn: boolean;
    requiresEncryptedAssertion: boolean;
    resourceTypeSchemaVersion: string;
    samlHoKrequired: boolean;
    schemas: string[];
    serviceInstanceIdentifier: string;
    shownOnLoginPage: boolean;
    signatureHashAlgorithm: string;
    signingCertificate: string;
    succinctId: string;
    tags: outputs.GetIdentityDomainsIdentityProvidersIdentityProviderTag[];
    tenancyOcid: string;
    tenantProviderId: string;
    type: string;
    urnietfparamsscimschemasoracleidcsextensionsocialIdentityProviders: outputs.GetIdentityDomainsIdentityProvidersIdentityProviderUrnietfparamsscimschemasoracleidcsextensionsocialIdentityProvider[];
    urnietfparamsscimschemasoracleidcsextensionx509identityProviders: outputs.GetIdentityDomainsIdentityProvidersIdentityProviderUrnietfparamsscimschemasoracleidcsextensionx509identityProvider[];
    userMappingMethod: string;
    userMappingStoreAttribute: string;
}

export interface GetIdentityDomainsIdentityProvidersIdentityProviderCorrelationPolicy {
    display: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsIdentityProvidersIdentityProviderIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsIdentityProvidersIdentityProviderIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsIdentityProvidersIdentityProviderJitUserProvAssignedGroup {
    display: string;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsIdentityProvidersIdentityProviderJitUserProvAttribute {
    ref: string;
    value: string;
}

export interface GetIdentityDomainsIdentityProvidersIdentityProviderJitUserProvGroupMapping {
    idpGroup: string;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsIdentityProvidersIdentityProviderMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface GetIdentityDomainsIdentityProvidersIdentityProviderTag {
    key: string;
    value: string;
}

export interface GetIdentityDomainsIdentityProvidersIdentityProviderUrnietfparamsscimschemasoracleidcsextensionsocialIdentityProvider {
    accessTokenUrl: string;
    accountLinkingEnabled: boolean;
    adminScopes: string[];
    authzUrl: string;
    autoRedirectEnabled: boolean;
    clientCredentialInPayload: boolean;
    clockSkewInSeconds: number;
    consumerKey: string;
    consumerSecret: string;
    discoveryUrl: string;
    idAttribute: string;
    jitProvAssignedGroups: outputs.GetIdentityDomainsIdentityProvidersIdentityProviderUrnietfparamsscimschemasoracleidcsextensionsocialIdentityProviderJitProvAssignedGroup[];
    jitProvGroupStaticListEnabled: boolean;
    profileUrl: string;
    redirectUrl: string;
    registrationEnabled: boolean;
    scopes: string[];
    serviceProviderName: string;
    socialJitProvisioningEnabled: boolean;
    status: string;
}

export interface GetIdentityDomainsIdentityProvidersIdentityProviderUrnietfparamsscimschemasoracleidcsextensionsocialIdentityProviderJitProvAssignedGroup {
    display: string;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsIdentityProvidersIdentityProviderUrnietfparamsscimschemasoracleidcsextensionx509identityProvider {
    certMatchAttribute: string;
    crlCheckOnOcspFailureEnabled: boolean;
    crlEnabled: boolean;
    crlLocation: string;
    crlReloadDuration: number;
    ekuValidationEnabled: boolean;
    ekuValues: string[];
    ocspAllowUnknownResponseStatus: boolean;
    ocspEnableSignedResponse: boolean;
    ocspEnabled: boolean;
    ocspResponderUrl: string;
    ocspRevalidateTime: number;
    ocspServerName: string;
    ocspTrustCertChains: string[];
    otherCertMatchAttribute: string;
    signingCertificateChains: string[];
    userMatchAttribute: string;
}

export interface GetIdentityDomainsIdentitySettingIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsIdentitySettingIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsIdentitySettingMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface GetIdentityDomainsIdentitySettingMyProfile {
    allowEndUsersToChangeTheirPassword: boolean;
    allowEndUsersToLinkTheirSupportAccount: boolean;
    allowEndUsersToManageTheirCapabilities: boolean;
    allowEndUsersToUpdateTheirSecuritySettings: boolean;
}

export interface GetIdentityDomainsIdentitySettingPosixGid {
    manualAssignmentEndsAt: number;
    manualAssignmentStartsFrom: number;
}

export interface GetIdentityDomainsIdentitySettingPosixUid {
    manualAssignmentEndsAt: number;
    manualAssignmentStartsFrom: number;
}

export interface GetIdentityDomainsIdentitySettingTag {
    key: string;
    value: string;
}

export interface GetIdentityDomainsIdentitySettingToken {
    expiresAfter: number;
    type: string;
}

export interface GetIdentityDomainsIdentitySettingsIdentitySetting {
    attributeSets: string[];
    attributes: string;
    authorization: string;
    compartmentOcid: string;
    deleteInProgress: boolean;
    domainOcid: string;
    emitLockedMessageWhenUserIsLocked: boolean;
    externalId: string;
    id: string;
    idcsCreatedBies: outputs.GetIdentityDomainsIdentitySettingsIdentitySettingIdcsCreatedBy[];
    idcsEndpoint: string;
    idcsLastModifiedBies: outputs.GetIdentityDomainsIdentitySettingsIdentitySettingIdcsLastModifiedBy[];
    idcsLastUpgradedInRelease: string;
    idcsPreventedOperations: string[];
    identitySettingId: string;
    metas: outputs.GetIdentityDomainsIdentitySettingsIdentitySettingMeta[];
    myProfiles: outputs.GetIdentityDomainsIdentitySettingsIdentitySettingMyProfile[];
    ocid: string;
    posixGids: outputs.GetIdentityDomainsIdentitySettingsIdentitySettingPosixGid[];
    posixUids: outputs.GetIdentityDomainsIdentitySettingsIdentitySettingPosixUid[];
    primaryEmailRequired: boolean;
    removeInvalidEmails: boolean;
    resourceTypeSchemaVersion: string;
    returnInactiveOverLockedMessage: boolean;
    schemas: string[];
    tags: outputs.GetIdentityDomainsIdentitySettingsIdentitySettingTag[];
    tenancyOcid: string;
    tokens: outputs.GetIdentityDomainsIdentitySettingsIdentitySettingToken[];
    userAllowedToSetRecoveryEmail: boolean;
}

export interface GetIdentityDomainsIdentitySettingsIdentitySettingIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsIdentitySettingsIdentitySettingIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsIdentitySettingsIdentitySettingMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface GetIdentityDomainsIdentitySettingsIdentitySettingMyProfile {
    allowEndUsersToChangeTheirPassword: boolean;
    allowEndUsersToLinkTheirSupportAccount: boolean;
    allowEndUsersToManageTheirCapabilities: boolean;
    allowEndUsersToUpdateTheirSecuritySettings: boolean;
}

export interface GetIdentityDomainsIdentitySettingsIdentitySettingPosixGid {
    manualAssignmentEndsAt: number;
    manualAssignmentStartsFrom: number;
}

export interface GetIdentityDomainsIdentitySettingsIdentitySettingPosixUid {
    manualAssignmentEndsAt: number;
    manualAssignmentStartsFrom: number;
}

export interface GetIdentityDomainsIdentitySettingsIdentitySettingTag {
    key: string;
    value: string;
}

export interface GetIdentityDomainsIdentitySettingsIdentitySettingToken {
    expiresAfter: number;
    type: string;
}

export interface GetIdentityDomainsKmsiSettingIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsKmsiSettingIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsKmsiSettingMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface GetIdentityDomainsKmsiSettingTag {
    key: string;
    value: string;
}

export interface GetIdentityDomainsKmsiSettingsKmsiSetting {
    attributeSets: string[];
    attributes: string;
    authorization: string;
    compartmentOcid: string;
    deleteInProgress: boolean;
    domainOcid: string;
    externalId: string;
    id: string;
    idcsCreatedBies: outputs.GetIdentityDomainsKmsiSettingsKmsiSettingIdcsCreatedBy[];
    idcsEndpoint: string;
    idcsLastModifiedBies: outputs.GetIdentityDomainsKmsiSettingsKmsiSettingIdcsLastModifiedBy[];
    idcsLastUpgradedInRelease: string;
    idcsPreventedOperations: string[];
    kmsiFeatureEnabled: boolean;
    kmsiPromptEnabled: boolean;
    kmsiSettingId: string;
    lastEnabledOn: string;
    lastUsedValidityInDays: number;
    maxAllowedSessions: number;
    metas: outputs.GetIdentityDomainsKmsiSettingsKmsiSettingMeta[];
    ocid: string;
    resourceTypeSchemaVersion: string;
    schemas: string[];
    tags: outputs.GetIdentityDomainsKmsiSettingsKmsiSettingTag[];
    tenancyOcid: string;
    tokenValidityInDays: number;
    touPromptDisabled: boolean;
}

export interface GetIdentityDomainsKmsiSettingsKmsiSettingIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsKmsiSettingsKmsiSettingIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsKmsiSettingsKmsiSettingMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface GetIdentityDomainsKmsiSettingsKmsiSettingTag {
    key: string;
    value: string;
}

export interface GetIdentityDomainsMyApiKeyIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsMyApiKeyIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsMyApiKeyMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface GetIdentityDomainsMyApiKeyTag {
    key: string;
    value: string;
}

export interface GetIdentityDomainsMyApiKeyUser {
    display: string;
    name: string;
    ocid: string;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsMyApiKeysMyApiKey {
    authorization: string;
    compartmentOcid: string;
    deleteInProgress: boolean;
    description: string;
    domainOcid: string;
    fingerprint: string;
    id: string;
    idcsCreatedBies: outputs.GetIdentityDomainsMyApiKeysMyApiKeyIdcsCreatedBy[];
    idcsEndpoint: string;
    idcsLastModifiedBies: outputs.GetIdentityDomainsMyApiKeysMyApiKeyIdcsLastModifiedBy[];
    idcsLastUpgradedInRelease: string;
    idcsPreventedOperations: string[];
    key: string;
    metas: outputs.GetIdentityDomainsMyApiKeysMyApiKeyMeta[];
    ocid: string;
    resourceTypeSchemaVersion: string;
    schemas: string[];
    tags: outputs.GetIdentityDomainsMyApiKeysMyApiKeyTag[];
    tenancyOcid: string;
    users: outputs.GetIdentityDomainsMyApiKeysMyApiKeyUser[];
}

export interface GetIdentityDomainsMyApiKeysMyApiKeyIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsMyApiKeysMyApiKeyIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsMyApiKeysMyApiKeyMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface GetIdentityDomainsMyApiKeysMyApiKeyTag {
    key: string;
    value: string;
}

export interface GetIdentityDomainsMyApiKeysMyApiKeyUser {
    display: string;
    name: string;
    ocid: string;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsMyAppsMyApp {
    accountType: string;
    active: boolean;
    apps: outputs.GetIdentityDomainsMyAppsMyAppApp[];
    compartmentOcid: string;
    deleteInProgress: boolean;
    domainOcid: string;
    favorite: boolean;
    id: string;
    idcsCreatedBies: outputs.GetIdentityDomainsMyAppsMyAppIdcsCreatedBy[];
    idcsLastModifiedBies: outputs.GetIdentityDomainsMyAppsMyAppIdcsLastModifiedBy[];
    idcsLastUpgradedInRelease: string;
    idcsPreventedOperations: string[];
    isAccount: boolean;
    lastAccessed: string;
    launchUrl: string;
    metas: outputs.GetIdentityDomainsMyAppsMyAppMeta[];
    name: string;
    ocid: string;
    owners: outputs.GetIdentityDomainsMyAppsMyAppOwner[];
    schemas: string[];
    tags: outputs.GetIdentityDomainsMyAppsMyAppTag[];
    tenancyOcid: string;
    uid: string;
    userWalletArtifacts: outputs.GetIdentityDomainsMyAppsMyAppUserWalletArtifact[];
}

export interface GetIdentityDomainsMyAppsMyAppApp {
    active: boolean;
    appIcon: string;
    appThumbnail: string;
    description: string;
    display: string;
    isAliasApp: boolean;
    isLoginTarget: boolean;
    isOpcService: boolean;
    loginMechanism: string;
    ref: string;
    serviceTypeUrn: string;
    showInMyApps: boolean;
    value: string;
}

export interface GetIdentityDomainsMyAppsMyAppIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsMyAppsMyAppIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsMyAppsMyAppMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface GetIdentityDomainsMyAppsMyAppOwner {
    display: string;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsMyAppsMyAppTag {
    key: string;
    value: string;
}

export interface GetIdentityDomainsMyAppsMyAppUserWalletArtifact {
    ref: string;
    value: string;
}

export interface GetIdentityDomainsMyAuthTokenIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsMyAuthTokenIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsMyAuthTokenMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface GetIdentityDomainsMyAuthTokenTag {
    key: string;
    value: string;
}

export interface GetIdentityDomainsMyAuthTokenUser {
    display: string;
    name: string;
    ocid: string;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsMyAuthTokensMyAuthToken {
    authorization: string;
    compartmentOcid: string;
    deleteInProgress: boolean;
    description: string;
    domainOcid: string;
    expiresOn: string;
    id: string;
    idcsCreatedBies: outputs.GetIdentityDomainsMyAuthTokensMyAuthTokenIdcsCreatedBy[];
    idcsEndpoint: string;
    idcsLastModifiedBies: outputs.GetIdentityDomainsMyAuthTokensMyAuthTokenIdcsLastModifiedBy[];
    idcsLastUpgradedInRelease: string;
    idcsPreventedOperations: string[];
    metas: outputs.GetIdentityDomainsMyAuthTokensMyAuthTokenMeta[];
    ocid: string;
    resourceTypeSchemaVersion: string;
    schemas: string[];
    status: string;
    tags: outputs.GetIdentityDomainsMyAuthTokensMyAuthTokenTag[];
    tenancyOcid: string;
    users: outputs.GetIdentityDomainsMyAuthTokensMyAuthTokenUser[];
}

export interface GetIdentityDomainsMyAuthTokensMyAuthTokenIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsMyAuthTokensMyAuthTokenIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsMyAuthTokensMyAuthTokenMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface GetIdentityDomainsMyAuthTokensMyAuthTokenTag {
    key: string;
    value: string;
}

export interface GetIdentityDomainsMyAuthTokensMyAuthTokenUser {
    display: string;
    name: string;
    ocid: string;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsMyCompletedApprovalIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsMyCompletedApprovalIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsMyCompletedApprovalMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface GetIdentityDomainsMyCompletedApprovalTag {
    key: string;
    value: string;
}

export interface GetIdentityDomainsMyCompletedApprovalsMyCompletedApproval {
    authorization: string;
    compartmentOcid: string;
    deleteInProgress: boolean;
    domainOcid: string;
    expires: string;
    id: string;
    idcsCreatedBies: outputs.GetIdentityDomainsMyCompletedApprovalsMyCompletedApprovalIdcsCreatedBy[];
    idcsEndpoint: string;
    idcsLastModifiedBies: outputs.GetIdentityDomainsMyCompletedApprovalsMyCompletedApprovalIdcsLastModifiedBy[];
    idcsLastUpgradedInRelease: string;
    idcsPreventedOperations: string[];
    justification: string;
    metas: outputs.GetIdentityDomainsMyCompletedApprovalsMyCompletedApprovalMeta[];
    myCompletedApprovalId: string;
    ocid: string;
    requestCreatedTime: string;
    requestDetails: string;
    requestId: string;
    requestOcid: string;
    resourceDisplayName: string;
    resourceType: string;
    resourceTypeSchemaVersion: string;
    responseTime: string;
    schemas: string[];
    status: string;
    tags: outputs.GetIdentityDomainsMyCompletedApprovalsMyCompletedApprovalTag[];
    tenancyOcid: string;
}

export interface GetIdentityDomainsMyCompletedApprovalsMyCompletedApprovalIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsMyCompletedApprovalsMyCompletedApprovalIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsMyCompletedApprovalsMyCompletedApprovalMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface GetIdentityDomainsMyCompletedApprovalsMyCompletedApprovalTag {
    key: string;
    value: string;
}

export interface GetIdentityDomainsMyCustomerSecretKeyIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsMyCustomerSecretKeyIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsMyCustomerSecretKeyMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface GetIdentityDomainsMyCustomerSecretKeyTag {
    key: string;
    value: string;
}

export interface GetIdentityDomainsMyCustomerSecretKeyUser {
    display: string;
    name: string;
    ocid: string;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsMyCustomerSecretKeysMyCustomerSecretKey {
    accessKey: string;
    authorization: string;
    compartmentOcid: string;
    deleteInProgress: boolean;
    description: string;
    displayName: string;
    domainOcid: string;
    expiresOn: string;
    id: string;
    idcsCreatedBies: outputs.GetIdentityDomainsMyCustomerSecretKeysMyCustomerSecretKeyIdcsCreatedBy[];
    idcsEndpoint: string;
    idcsLastModifiedBies: outputs.GetIdentityDomainsMyCustomerSecretKeysMyCustomerSecretKeyIdcsLastModifiedBy[];
    idcsLastUpgradedInRelease: string;
    idcsPreventedOperations: string[];
    metas: outputs.GetIdentityDomainsMyCustomerSecretKeysMyCustomerSecretKeyMeta[];
    ocid: string;
    resourceTypeSchemaVersion: string;
    schemas: string[];
    status: string;
    tags: outputs.GetIdentityDomainsMyCustomerSecretKeysMyCustomerSecretKeyTag[];
    tenancyOcid: string;
    users: outputs.GetIdentityDomainsMyCustomerSecretKeysMyCustomerSecretKeyUser[];
}

export interface GetIdentityDomainsMyCustomerSecretKeysMyCustomerSecretKeyIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsMyCustomerSecretKeysMyCustomerSecretKeyIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsMyCustomerSecretKeysMyCustomerSecretKeyMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface GetIdentityDomainsMyCustomerSecretKeysMyCustomerSecretKeyTag {
    key: string;
    value: string;
}

export interface GetIdentityDomainsMyCustomerSecretKeysMyCustomerSecretKeyUser {
    display: string;
    name: string;
    ocid: string;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsMyDeviceAdditionalAttribute {
    key: string;
    value: string;
}

export interface GetIdentityDomainsMyDeviceAuthenticationFactor {
    publicKey: string;
    status: string;
    type: string;
}

export interface GetIdentityDomainsMyDeviceIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsMyDeviceIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsMyDeviceMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface GetIdentityDomainsMyDeviceNonCompliance {
    action: string;
    name: string;
    value: string;
}

export interface GetIdentityDomainsMyDevicePushNotificationTarget {
    ref: string;
    value: string;
}

export interface GetIdentityDomainsMyDeviceTag {
    key: string;
    value: string;
}

export interface GetIdentityDomainsMyDeviceThirdPartyFactor {
    ref: string;
    thirdPartyFactorType: string;
    thirdPartyVendorName: string;
    value: string;
}

export interface GetIdentityDomainsMyDeviceUser {
    display: string;
    ocid: string;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsMyDevicesMyDevice {
    additionalAttributes: outputs.GetIdentityDomainsMyDevicesMyDeviceAdditionalAttribute[];
    appVersion: string;
    attributeSets: string[];
    attributes: string;
    authenticationFactors: outputs.GetIdentityDomainsMyDevicesMyDeviceAuthenticationFactor[];
    authenticationMethod: string;
    authorization: string;
    basePublicKey: string;
    compartmentOcid: string;
    countryCode: string;
    deleteInProgress: boolean;
    deviceType: string;
    deviceUuid: string;
    displayName: string;
    domainOcid: string;
    expiresOn: number;
    externalId: string;
    id: string;
    idcsCreatedBies: outputs.GetIdentityDomainsMyDevicesMyDeviceIdcsCreatedBy[];
    idcsEndpoint: string;
    idcsLastModifiedBies: outputs.GetIdentityDomainsMyDevicesMyDeviceIdcsLastModifiedBy[];
    idcsLastUpgradedInRelease: string;
    idcsPreventedOperations: string[];
    isAccRecEnabled: boolean;
    isCompliant: boolean;
    lastSyncTime: string;
    lastValidatedTime: string;
    metas: outputs.GetIdentityDomainsMyDevicesMyDeviceMeta[];
    myDeviceId: string;
    nonCompliances: outputs.GetIdentityDomainsMyDevicesMyDeviceNonCompliance[];
    ocid: string;
    packageId: string;
    phoneNumber: string;
    platform: string;
    pushNotificationTargets: outputs.GetIdentityDomainsMyDevicesMyDevicePushNotificationTarget[];
    reason: string;
    resourceTypeSchemaVersion: string;
    schemas: string[];
    seed: string;
    seedDekId: string;
    status: string;
    tags: outputs.GetIdentityDomainsMyDevicesMyDeviceTag[];
    tenancyOcid: string;
    thirdPartyFactors: outputs.GetIdentityDomainsMyDevicesMyDeviceThirdPartyFactor[];
    users: outputs.GetIdentityDomainsMyDevicesMyDeviceUser[];
}

export interface GetIdentityDomainsMyDevicesMyDeviceAdditionalAttribute {
    key: string;
    value: string;
}

export interface GetIdentityDomainsMyDevicesMyDeviceAuthenticationFactor {
    publicKey: string;
    status: string;
    type: string;
}

export interface GetIdentityDomainsMyDevicesMyDeviceIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsMyDevicesMyDeviceIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsMyDevicesMyDeviceMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface GetIdentityDomainsMyDevicesMyDeviceNonCompliance {
    action: string;
    name: string;
    value: string;
}

export interface GetIdentityDomainsMyDevicesMyDevicePushNotificationTarget {
    ref: string;
    value: string;
}

export interface GetIdentityDomainsMyDevicesMyDeviceTag {
    key: string;
    value: string;
}

export interface GetIdentityDomainsMyDevicesMyDeviceThirdPartyFactor {
    ref: string;
    thirdPartyFactorType: string;
    thirdPartyVendorName: string;
    value: string;
}

export interface GetIdentityDomainsMyDevicesMyDeviceUser {
    display: string;
    ocid: string;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsMyGroupsMyGroup {
    compartmentOcid: string;
    deleteInProgress: boolean;
    displayName: string;
    domainOcid: string;
    externalId: string;
    id: string;
    idcsCreatedBies: outputs.GetIdentityDomainsMyGroupsMyGroupIdcsCreatedBy[];
    idcsLastModifiedBies: outputs.GetIdentityDomainsMyGroupsMyGroupIdcsLastModifiedBy[];
    idcsLastUpgradedInRelease: string;
    idcsPreventedOperations: string[];
    members: outputs.GetIdentityDomainsMyGroupsMyGroupMember[];
    metas: outputs.GetIdentityDomainsMyGroupsMyGroupMeta[];
    nonUniqueDisplayName: string;
    ocid: string;
    schemas: string[];
    tags: outputs.GetIdentityDomainsMyGroupsMyGroupTag[];
    tenancyOcid: string;
    urnietfparamsscimschemasoracleidcsextensiongroupGroups: outputs.GetIdentityDomainsMyGroupsMyGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroup[];
    urnietfparamsscimschemasoracleidcsextensionposixGroups: outputs.GetIdentityDomainsMyGroupsMyGroupUrnietfparamsscimschemasoracleidcsextensionposixGroup[];
}

export interface GetIdentityDomainsMyGroupsMyGroupIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsMyGroupsMyGroupIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsMyGroupsMyGroupMember {
    dateAdded: string;
    display: string;
    membershipOcid: string;
    name: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsMyGroupsMyGroupMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface GetIdentityDomainsMyGroupsMyGroupTag {
    key: string;
    value: string;
}

export interface GetIdentityDomainsMyGroupsMyGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroup {
    appRoles: outputs.GetIdentityDomainsMyGroupsMyGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupAppRole[];
    creationMechanism: string;
    description: string;
    grants: outputs.GetIdentityDomainsMyGroupsMyGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupGrant[];
    owners: outputs.GetIdentityDomainsMyGroupsMyGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupOwner[];
    passwordPolicies: outputs.GetIdentityDomainsMyGroupsMyGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupPasswordPolicy[];
    syncedFromApps: outputs.GetIdentityDomainsMyGroupsMyGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupSyncedFromApp[];
}

export interface GetIdentityDomainsMyGroupsMyGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupAppRole {
    adminRole: boolean;
    appId: string;
    appName: string;
    display: string;
    legacyGroupName: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsMyGroupsMyGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupGrant {
    appId: string;
    grantMechanism: string;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsMyGroupsMyGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupOwner {
    display: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsMyGroupsMyGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupPasswordPolicy {
    name: string;
    priority: number;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsMyGroupsMyGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupSyncedFromApp {
    display: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsMyGroupsMyGroupUrnietfparamsscimschemasoracleidcsextensionposixGroup {
    gidNumber: number;
}

export interface GetIdentityDomainsMyOauth2clientCredentialIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsMyOauth2clientCredentialIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsMyOauth2clientCredentialMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface GetIdentityDomainsMyOauth2clientCredentialScope {
    audience: string;
    scope: string;
}

export interface GetIdentityDomainsMyOauth2clientCredentialTag {
    key: string;
    value: string;
}

export interface GetIdentityDomainsMyOauth2clientCredentialUser {
    display: string;
    name: string;
    ocid: string;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsMyOauth2clientCredentialsMyOauth2clientCredential {
    authorization: string;
    compartmentOcid: string;
    deleteInProgress: boolean;
    description: string;
    domainOcid: string;
    expiresOn: string;
    id: string;
    idcsCreatedBies: outputs.GetIdentityDomainsMyOauth2clientCredentialsMyOauth2clientCredentialIdcsCreatedBy[];
    idcsEndpoint: string;
    idcsLastModifiedBies: outputs.GetIdentityDomainsMyOauth2clientCredentialsMyOauth2clientCredentialIdcsLastModifiedBy[];
    idcsLastUpgradedInRelease: string;
    idcsPreventedOperations: string[];
    isResetSecret: boolean;
    metas: outputs.GetIdentityDomainsMyOauth2clientCredentialsMyOauth2clientCredentialMeta[];
    name: string;
    ocid: string;
    resourceTypeSchemaVersion: string;
    schemas: string[];
    scopes: outputs.GetIdentityDomainsMyOauth2clientCredentialsMyOauth2clientCredentialScope[];
    status: string;
    tags: outputs.GetIdentityDomainsMyOauth2clientCredentialsMyOauth2clientCredentialTag[];
    tenancyOcid: string;
    users: outputs.GetIdentityDomainsMyOauth2clientCredentialsMyOauth2clientCredentialUser[];
}

export interface GetIdentityDomainsMyOauth2clientCredentialsMyOauth2clientCredentialIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsMyOauth2clientCredentialsMyOauth2clientCredentialIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsMyOauth2clientCredentialsMyOauth2clientCredentialMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface GetIdentityDomainsMyOauth2clientCredentialsMyOauth2clientCredentialScope {
    audience: string;
    scope: string;
}

export interface GetIdentityDomainsMyOauth2clientCredentialsMyOauth2clientCredentialTag {
    key: string;
    value: string;
}

export interface GetIdentityDomainsMyOauth2clientCredentialsMyOauth2clientCredentialUser {
    display: string;
    name: string;
    ocid: string;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsMyPendingApprovalIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsMyPendingApprovalIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsMyPendingApprovalMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface GetIdentityDomainsMyPendingApprovalTag {
    key: string;
    value: string;
}

export interface GetIdentityDomainsMyPendingApprovalsMyPendingApproval {
    authorization: string;
    compartmentOcid: string;
    deleteInProgress: boolean;
    domainOcid: string;
    expires: string;
    id: string;
    idcsCreatedBies: outputs.GetIdentityDomainsMyPendingApprovalsMyPendingApprovalIdcsCreatedBy[];
    idcsEndpoint: string;
    idcsLastModifiedBies: outputs.GetIdentityDomainsMyPendingApprovalsMyPendingApprovalIdcsLastModifiedBy[];
    idcsLastUpgradedInRelease: string;
    idcsPreventedOperations: string[];
    justification: string;
    metas: outputs.GetIdentityDomainsMyPendingApprovalsMyPendingApprovalMeta[];
    myPendingApprovalId: string;
    ocid: string;
    requestCreatedTime: string;
    requestDetails: string;
    requestId: string;
    requestOcid: string;
    resourceDisplayName: string;
    resourceType: string;
    resourceTypeSchemaVersion: string;
    responseTime: string;
    schemas: string[];
    status: string;
    tags: outputs.GetIdentityDomainsMyPendingApprovalsMyPendingApprovalTag[];
    tenancyOcid: string;
}

export interface GetIdentityDomainsMyPendingApprovalsMyPendingApprovalIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsMyPendingApprovalsMyPendingApprovalIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsMyPendingApprovalsMyPendingApprovalMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface GetIdentityDomainsMyPendingApprovalsMyPendingApprovalTag {
    key: string;
    value: string;
}

export interface GetIdentityDomainsMyRequestableGroupsMyRequestableGroup {
    compartmentOcid: string;
    deleteInProgress: boolean;
    displayName: string;
    domainOcid: string;
    externalId: string;
    id: string;
    idcsCreatedBies: outputs.GetIdentityDomainsMyRequestableGroupsMyRequestableGroupIdcsCreatedBy[];
    idcsLastModifiedBies: outputs.GetIdentityDomainsMyRequestableGroupsMyRequestableGroupIdcsLastModifiedBy[];
    idcsLastUpgradedInRelease: string;
    idcsPreventedOperations: string[];
    members: outputs.GetIdentityDomainsMyRequestableGroupsMyRequestableGroupMember[];
    metas: outputs.GetIdentityDomainsMyRequestableGroupsMyRequestableGroupMeta[];
    nonUniqueDisplayName: string;
    ocid: string;
    schemas: string[];
    tags: outputs.GetIdentityDomainsMyRequestableGroupsMyRequestableGroupTag[];
    tenancyOcid: string;
    urnietfparamsscimschemasoracleidcsextensiongroupGroups: outputs.GetIdentityDomainsMyRequestableGroupsMyRequestableGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroup[];
    urnietfparamsscimschemasoracleidcsextensionrequestableGroups: outputs.GetIdentityDomainsMyRequestableGroupsMyRequestableGroupUrnietfparamsscimschemasoracleidcsextensionrequestableGroup[];
}

export interface GetIdentityDomainsMyRequestableGroupsMyRequestableGroupIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsMyRequestableGroupsMyRequestableGroupIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsMyRequestableGroupsMyRequestableGroupMember {
    dateAdded: string;
    display: string;
    membershipOcid: string;
    name: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsMyRequestableGroupsMyRequestableGroupMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface GetIdentityDomainsMyRequestableGroupsMyRequestableGroupTag {
    key: string;
    value: string;
}

export interface GetIdentityDomainsMyRequestableGroupsMyRequestableGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroup {
    appRoles: outputs.GetIdentityDomainsMyRequestableGroupsMyRequestableGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupAppRole[];
    creationMechanism: string;
    description: string;
    grants: outputs.GetIdentityDomainsMyRequestableGroupsMyRequestableGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupGrant[];
    owners: outputs.GetIdentityDomainsMyRequestableGroupsMyRequestableGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupOwner[];
    passwordPolicies: outputs.GetIdentityDomainsMyRequestableGroupsMyRequestableGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupPasswordPolicy[];
    syncedFromApps: outputs.GetIdentityDomainsMyRequestableGroupsMyRequestableGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupSyncedFromApp[];
}

export interface GetIdentityDomainsMyRequestableGroupsMyRequestableGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupAppRole {
    adminRole: boolean;
    appId: string;
    appName: string;
    display: string;
    legacyGroupName: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsMyRequestableGroupsMyRequestableGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupGrant {
    appId: string;
    grantMechanism: string;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsMyRequestableGroupsMyRequestableGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupOwner {
    display: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsMyRequestableGroupsMyRequestableGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupPasswordPolicy {
    name: string;
    priority: number;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsMyRequestableGroupsMyRequestableGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupSyncedFromApp {
    display: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsMyRequestableGroupsMyRequestableGroupUrnietfparamsscimschemasoracleidcsextensionrequestableGroup {
    requestable: boolean;
}

export interface GetIdentityDomainsMyRequestsMyRequest {
    action: string;
    approvalDetails: outputs.GetIdentityDomainsMyRequestsMyRequestApprovalDetail[];
    compartmentOcid: string;
    deleteInProgress: boolean;
    domainOcid: string;
    expires: string;
    id: string;
    idcsCreatedBies: outputs.GetIdentityDomainsMyRequestsMyRequestIdcsCreatedBy[];
    idcsLastModifiedBies: outputs.GetIdentityDomainsMyRequestsMyRequestIdcsLastModifiedBy[];
    idcsLastUpgradedInRelease: string;
    idcsPreventedOperations: string[];
    justification: string;
    metas: outputs.GetIdentityDomainsMyRequestsMyRequestMeta[];
    ocid: string;
    requestings: outputs.GetIdentityDomainsMyRequestsMyRequestRequesting[];
    requestors: outputs.GetIdentityDomainsMyRequestsMyRequestRequestor[];
    schemas: string[];
    status: string;
    tags: outputs.GetIdentityDomainsMyRequestsMyRequestTag[];
    tenancyOcid: string;
}

export interface GetIdentityDomainsMyRequestsMyRequestApprovalDetail {
    approvalType: string;
    approverDisplayName: string;
    approverId: string;
    justification: string;
    order: number;
    status: string;
    timeUpdated: string;
}

export interface GetIdentityDomainsMyRequestsMyRequestIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsMyRequestsMyRequestIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsMyRequestsMyRequestMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface GetIdentityDomainsMyRequestsMyRequestRequesting {
    description: string;
    display: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsMyRequestsMyRequestRequestor {
    display: string;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsMyRequestsMyRequestTag {
    key: string;
    value: string;
}

export interface GetIdentityDomainsMySmtpCredentialIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsMySmtpCredentialIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsMySmtpCredentialMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface GetIdentityDomainsMySmtpCredentialTag {
    key: string;
    value: string;
}

export interface GetIdentityDomainsMySmtpCredentialUser {
    display: string;
    name: string;
    ocid: string;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsMySmtpCredentialsMySmtpCredential {
    authorization: string;
    compartmentOcid: string;
    deleteInProgress: boolean;
    description: string;
    domainOcid: string;
    expiresOn: string;
    id: string;
    idcsCreatedBies: outputs.GetIdentityDomainsMySmtpCredentialsMySmtpCredentialIdcsCreatedBy[];
    idcsEndpoint: string;
    idcsLastModifiedBies: outputs.GetIdentityDomainsMySmtpCredentialsMySmtpCredentialIdcsLastModifiedBy[];
    idcsLastUpgradedInRelease: string;
    idcsPreventedOperations: string[];
    metas: outputs.GetIdentityDomainsMySmtpCredentialsMySmtpCredentialMeta[];
    ocid: string;
    resourceTypeSchemaVersion: string;
    schemas: string[];
    status: string;
    tags: outputs.GetIdentityDomainsMySmtpCredentialsMySmtpCredentialTag[];
    tenancyOcid: string;
    userName: string;
    users: outputs.GetIdentityDomainsMySmtpCredentialsMySmtpCredentialUser[];
}

export interface GetIdentityDomainsMySmtpCredentialsMySmtpCredentialIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsMySmtpCredentialsMySmtpCredentialIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsMySmtpCredentialsMySmtpCredentialMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface GetIdentityDomainsMySmtpCredentialsMySmtpCredentialTag {
    key: string;
    value: string;
}

export interface GetIdentityDomainsMySmtpCredentialsMySmtpCredentialUser {
    display: string;
    name: string;
    ocid: string;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsMySupportAccountIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsMySupportAccountIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsMySupportAccountMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface GetIdentityDomainsMySupportAccountTag {
    key: string;
    value: string;
}

export interface GetIdentityDomainsMySupportAccountUser {
    display: string;
    name: string;
    ocid: string;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsMySupportAccountsMySupportAccount {
    authorization: string;
    compartmentOcid: string;
    deleteInProgress: boolean;
    domainOcid: string;
    id: string;
    idcsCreatedBies: outputs.GetIdentityDomainsMySupportAccountsMySupportAccountIdcsCreatedBy[];
    idcsEndpoint: string;
    idcsLastModifiedBies: outputs.GetIdentityDomainsMySupportAccountsMySupportAccountIdcsLastModifiedBy[];
    idcsLastUpgradedInRelease: string;
    idcsPreventedOperations: string[];
    metas: outputs.GetIdentityDomainsMySupportAccountsMySupportAccountMeta[];
    mySupportAccountProvider: string;
    ocid: string;
    resourceTypeSchemaVersion: string;
    schemas: string[];
    tags: outputs.GetIdentityDomainsMySupportAccountsMySupportAccountTag[];
    tenancyOcid: string;
    token: string;
    userId: string;
    users: outputs.GetIdentityDomainsMySupportAccountsMySupportAccountUser[];
}

export interface GetIdentityDomainsMySupportAccountsMySupportAccountIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsMySupportAccountsMySupportAccountIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsMySupportAccountsMySupportAccountMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface GetIdentityDomainsMySupportAccountsMySupportAccountTag {
    key: string;
    value: string;
}

export interface GetIdentityDomainsMySupportAccountsMySupportAccountUser {
    display: string;
    name: string;
    ocid: string;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsMyTrustedUserAgentIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsMyTrustedUserAgentIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsMyTrustedUserAgentMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface GetIdentityDomainsMyTrustedUserAgentTag {
    key: string;
    value: string;
}

export interface GetIdentityDomainsMyTrustedUserAgentTrustedFactor {
    category: string;
    creationTime: string;
    type: string;
}

export interface GetIdentityDomainsMyTrustedUserAgentUser {
    display: string;
    ocid: string;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsMyTrustedUserAgentsMyTrustedUserAgent {
    attributeSets: string[];
    attributes: string;
    authorization: string;
    compartmentOcid: string;
    deleteInProgress: boolean;
    domainOcid: string;
    expiryTime: string;
    id: string;
    idcsCreatedBies: outputs.GetIdentityDomainsMyTrustedUserAgentsMyTrustedUserAgentIdcsCreatedBy[];
    idcsEndpoint: string;
    idcsLastModifiedBies: outputs.GetIdentityDomainsMyTrustedUserAgentsMyTrustedUserAgentIdcsLastModifiedBy[];
    idcsLastUpgradedInRelease: string;
    idcsPreventedOperations: string[];
    lastUsedOn: string;
    location: string;
    metas: outputs.GetIdentityDomainsMyTrustedUserAgentsMyTrustedUserAgentMeta[];
    myTrustedUserAgentId: string;
    name: string;
    ocid: string;
    platform: string;
    resourceTypeSchemaVersion: string;
    schemas: string[];
    tags: outputs.GetIdentityDomainsMyTrustedUserAgentsMyTrustedUserAgentTag[];
    tenancyOcid: string;
    tokenType: string;
    trustToken: string;
    trustedFactors: outputs.GetIdentityDomainsMyTrustedUserAgentsMyTrustedUserAgentTrustedFactor[];
    users: outputs.GetIdentityDomainsMyTrustedUserAgentsMyTrustedUserAgentUser[];
}

export interface GetIdentityDomainsMyTrustedUserAgentsMyTrustedUserAgentIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsMyTrustedUserAgentsMyTrustedUserAgentIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsMyTrustedUserAgentsMyTrustedUserAgentMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface GetIdentityDomainsMyTrustedUserAgentsMyTrustedUserAgentTag {
    key: string;
    value: string;
}

export interface GetIdentityDomainsMyTrustedUserAgentsMyTrustedUserAgentTrustedFactor {
    category: string;
    creationTime: string;
    type: string;
}

export interface GetIdentityDomainsMyTrustedUserAgentsMyTrustedUserAgentUser {
    display: string;
    ocid: string;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsMyUserDbCredentialIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsMyUserDbCredentialIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsMyUserDbCredentialMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface GetIdentityDomainsMyUserDbCredentialTag {
    key: string;
    value: string;
}

export interface GetIdentityDomainsMyUserDbCredentialUser {
    display: string;
    name: string;
    ocid: string;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsMyUserDbCredentialsMyUserDbCredential {
    authorization: string;
    compartmentOcid: string;
    dbPassword: string;
    deleteInProgress: boolean;
    description: string;
    domainOcid: string;
    expired: boolean;
    expiresOn: string;
    id: string;
    idcsCreatedBies: outputs.GetIdentityDomainsMyUserDbCredentialsMyUserDbCredentialIdcsCreatedBy[];
    idcsEndpoint: string;
    idcsLastModifiedBies: outputs.GetIdentityDomainsMyUserDbCredentialsMyUserDbCredentialIdcsLastModifiedBy[];
    idcsLastUpgradedInRelease: string;
    idcsPreventedOperations: string[];
    lastSetDate: string;
    metas: outputs.GetIdentityDomainsMyUserDbCredentialsMyUserDbCredentialMeta[];
    mixedDbPassword: string;
    mixedSalt: string;
    name: string;
    ocid: string;
    resourceTypeSchemaVersion: string;
    salt: string;
    schemas: string[];
    status: string;
    tags: outputs.GetIdentityDomainsMyUserDbCredentialsMyUserDbCredentialTag[];
    tenancyOcid: string;
    users: outputs.GetIdentityDomainsMyUserDbCredentialsMyUserDbCredentialUser[];
}

export interface GetIdentityDomainsMyUserDbCredentialsMyUserDbCredentialIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsMyUserDbCredentialsMyUserDbCredentialIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsMyUserDbCredentialsMyUserDbCredentialMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface GetIdentityDomainsMyUserDbCredentialsMyUserDbCredentialTag {
    key: string;
    value: string;
}

export interface GetIdentityDomainsMyUserDbCredentialsMyUserDbCredentialUser {
    display: string;
    name: string;
    ocid: string;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsNetworkPerimeterIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsNetworkPerimeterIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsNetworkPerimeterIpAddress {
    type: string;
    value: string;
    version: string;
}

export interface GetIdentityDomainsNetworkPerimeterMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface GetIdentityDomainsNetworkPerimeterTag {
    key: string;
    value: string;
}

export interface GetIdentityDomainsNetworkPerimetersNetworkPerimeter {
    attributeSets: string[];
    attributes: string;
    authorization: string;
    compartmentOcid: string;
    deleteInProgress: boolean;
    description: string;
    domainOcid: string;
    externalId: string;
    id: string;
    idcsCreatedBies: outputs.GetIdentityDomainsNetworkPerimetersNetworkPerimeterIdcsCreatedBy[];
    idcsEndpoint: string;
    idcsLastModifiedBies: outputs.GetIdentityDomainsNetworkPerimetersNetworkPerimeterIdcsLastModifiedBy[];
    idcsLastUpgradedInRelease: string;
    idcsPreventedOperations: string[];
    ipAddresses: outputs.GetIdentityDomainsNetworkPerimetersNetworkPerimeterIpAddress[];
    metas: outputs.GetIdentityDomainsNetworkPerimetersNetworkPerimeterMeta[];
    name: string;
    ocid: string;
    resourceTypeSchemaVersion: string;
    schemas: string[];
    tags: outputs.GetIdentityDomainsNetworkPerimetersNetworkPerimeterTag[];
    tenancyOcid: string;
}

export interface GetIdentityDomainsNetworkPerimetersNetworkPerimeterIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsNetworkPerimetersNetworkPerimeterIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsNetworkPerimetersNetworkPerimeterIpAddress {
    type: string;
    value: string;
    version: string;
}

export interface GetIdentityDomainsNetworkPerimetersNetworkPerimeterMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface GetIdentityDomainsNetworkPerimetersNetworkPerimeterTag {
    key: string;
    value: string;
}

export interface GetIdentityDomainsNotificationSettingEventSetting {
    enabled: boolean;
    eventId: string;
}

export interface GetIdentityDomainsNotificationSettingFromEmailAddress {
    displayName: string;
    validate: string;
    validationStatus: string;
    value: string;
}

export interface GetIdentityDomainsNotificationSettingIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsNotificationSettingIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsNotificationSettingMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface GetIdentityDomainsNotificationSettingTag {
    key: string;
    value: string;
}

export interface GetIdentityDomainsNotificationSettingsNotificationSetting {
    attributeSets: string[];
    attributes: string;
    authorization: string;
    compartmentOcid: string;
    deleteInProgress: boolean;
    domainOcid: string;
    eventSettings: outputs.GetIdentityDomainsNotificationSettingsNotificationSettingEventSetting[];
    externalId: string;
    fromEmailAddresses: outputs.GetIdentityDomainsNotificationSettingsNotificationSettingFromEmailAddress[];
    id: string;
    idcsCreatedBies: outputs.GetIdentityDomainsNotificationSettingsNotificationSettingIdcsCreatedBy[];
    idcsEndpoint: string;
    idcsLastModifiedBies: outputs.GetIdentityDomainsNotificationSettingsNotificationSettingIdcsLastModifiedBy[];
    idcsLastUpgradedInRelease: string;
    idcsPreventedOperations: string[];
    metas: outputs.GetIdentityDomainsNotificationSettingsNotificationSettingMeta[];
    notificationEnabled: boolean;
    notificationSettingId: string;
    ocid: string;
    resourceTypeSchemaVersion: string;
    schemas: string[];
    sendNotificationToOldAndNewPrimaryEmailsWhenAdminChangesPrimaryEmail: boolean;
    sendNotificationsToSecondaryEmail: boolean;
    tags: outputs.GetIdentityDomainsNotificationSettingsNotificationSettingTag[];
    tenancyOcid: string;
    testModeEnabled: boolean;
    testRecipients: string[];
}

export interface GetIdentityDomainsNotificationSettingsNotificationSettingEventSetting {
    enabled: boolean;
    eventId: string;
}

export interface GetIdentityDomainsNotificationSettingsNotificationSettingFromEmailAddress {
    displayName: string;
    validate: string;
    validationStatus: string;
    value: string;
}

export interface GetIdentityDomainsNotificationSettingsNotificationSettingIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsNotificationSettingsNotificationSettingIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsNotificationSettingsNotificationSettingMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface GetIdentityDomainsNotificationSettingsNotificationSettingTag {
    key: string;
    value: string;
}

export interface GetIdentityDomainsOauth2clientCredentialIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsOauth2clientCredentialIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsOauth2clientCredentialMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface GetIdentityDomainsOauth2clientCredentialScope {
    audience: string;
    scope: string;
}

export interface GetIdentityDomainsOauth2clientCredentialTag {
    key: string;
    value: string;
}

export interface GetIdentityDomainsOauth2clientCredentialUrnietfparamsscimschemasoracleidcsextensionselfChangeUser {
    allowSelfChange: boolean;
}

export interface GetIdentityDomainsOauth2clientCredentialUser {
    display: string;
    name: string;
    ocid: string;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsOauth2clientCredentialsOauth2clientCredential {
    attributeSets: string[];
    attributes: string;
    authorization: string;
    compartmentOcid: string;
    deleteInProgress: boolean;
    description: string;
    domainOcid: string;
    expiresOn: string;
    id: string;
    idcsCreatedBies: outputs.GetIdentityDomainsOauth2clientCredentialsOauth2clientCredentialIdcsCreatedBy[];
    idcsEndpoint: string;
    idcsLastModifiedBies: outputs.GetIdentityDomainsOauth2clientCredentialsOauth2clientCredentialIdcsLastModifiedBy[];
    idcsLastUpgradedInRelease: string;
    idcsPreventedOperations: string[];
    isResetSecret: boolean;
    metas: outputs.GetIdentityDomainsOauth2clientCredentialsOauth2clientCredentialMeta[];
    name: string;
    ocid: string;
    resourceTypeSchemaVersion: string;
    schemas: string[];
    scopes: outputs.GetIdentityDomainsOauth2clientCredentialsOauth2clientCredentialScope[];
    status: string;
    tags: outputs.GetIdentityDomainsOauth2clientCredentialsOauth2clientCredentialTag[];
    tenancyOcid: string;
    urnietfparamsscimschemasoracleidcsextensionselfChangeUsers: outputs.GetIdentityDomainsOauth2clientCredentialsOauth2clientCredentialUrnietfparamsscimschemasoracleidcsextensionselfChangeUser[];
    users: outputs.GetIdentityDomainsOauth2clientCredentialsOauth2clientCredentialUser[];
}

export interface GetIdentityDomainsOauth2clientCredentialsOauth2clientCredentialIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsOauth2clientCredentialsOauth2clientCredentialIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsOauth2clientCredentialsOauth2clientCredentialMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface GetIdentityDomainsOauth2clientCredentialsOauth2clientCredentialScope {
    audience: string;
    scope: string;
}

export interface GetIdentityDomainsOauth2clientCredentialsOauth2clientCredentialTag {
    key: string;
    value: string;
}

export interface GetIdentityDomainsOauth2clientCredentialsOauth2clientCredentialUrnietfparamsscimschemasoracleidcsextensionselfChangeUser {
    allowSelfChange: boolean;
}

export interface GetIdentityDomainsOauth2clientCredentialsOauth2clientCredentialUser {
    display: string;
    name: string;
    ocid: string;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsOauthClientCertificateIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsOauthClientCertificateIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsOauthClientCertificateMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface GetIdentityDomainsOauthClientCertificateTag {
    key: string;
    value: string;
}

export interface GetIdentityDomainsOauthClientCertificatesOauthClientCertificate {
    authorization: string;
    certEndDate: string;
    certStartDate: string;
    certificateAlias: string;
    compartmentOcid: string;
    deleteInProgress: boolean;
    domainOcid: string;
    externalId: string;
    id: string;
    idcsCreatedBies: outputs.GetIdentityDomainsOauthClientCertificatesOauthClientCertificateIdcsCreatedBy[];
    idcsEndpoint: string;
    idcsLastModifiedBies: outputs.GetIdentityDomainsOauthClientCertificatesOauthClientCertificateIdcsLastModifiedBy[];
    idcsLastUpgradedInRelease: string;
    idcsPreventedOperations: string[];
    keyStoreId: string;
    keyStoreName: string;
    keyStorePassword: string;
    map: string;
    metas: outputs.GetIdentityDomainsOauthClientCertificatesOauthClientCertificateMeta[];
    ocid: string;
    resourceTypeSchemaVersion: string;
    schemas: string[];
    sha1thumbprint: string;
    sha256thumbprint: string;
    tags: outputs.GetIdentityDomainsOauthClientCertificatesOauthClientCertificateTag[];
    tenancyOcid: string;
    x509base64certificate: string;
}

export interface GetIdentityDomainsOauthClientCertificatesOauthClientCertificateIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsOauthClientCertificatesOauthClientCertificateIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsOauthClientCertificatesOauthClientCertificateMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface GetIdentityDomainsOauthClientCertificatesOauthClientCertificateTag {
    key: string;
    value: string;
}

export interface GetIdentityDomainsOauthPartnerCertificateIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsOauthPartnerCertificateIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsOauthPartnerCertificateMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface GetIdentityDomainsOauthPartnerCertificateTag {
    key: string;
    value: string;
}

export interface GetIdentityDomainsOauthPartnerCertificatesOauthPartnerCertificate {
    authorization: string;
    certEndDate: string;
    certStartDate: string;
    certificateAlias: string;
    compartmentOcid: string;
    deleteInProgress: boolean;
    domainOcid: string;
    externalId: string;
    id: string;
    idcsCreatedBies: outputs.GetIdentityDomainsOauthPartnerCertificatesOauthPartnerCertificateIdcsCreatedBy[];
    idcsEndpoint: string;
    idcsLastModifiedBies: outputs.GetIdentityDomainsOauthPartnerCertificatesOauthPartnerCertificateIdcsLastModifiedBy[];
    idcsLastUpgradedInRelease: string;
    idcsPreventedOperations: string[];
    keyStoreId: string;
    keyStoreName: string;
    keyStorePassword: string;
    map: string;
    metas: outputs.GetIdentityDomainsOauthPartnerCertificatesOauthPartnerCertificateMeta[];
    ocid: string;
    resourceTypeSchemaVersion: string;
    schemas: string[];
    sha1thumbprint: string;
    sha256thumbprint: string;
    tags: outputs.GetIdentityDomainsOauthPartnerCertificatesOauthPartnerCertificateTag[];
    tenancyOcid: string;
    x509base64certificate: string;
}

export interface GetIdentityDomainsOauthPartnerCertificatesOauthPartnerCertificateIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsOauthPartnerCertificatesOauthPartnerCertificateIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsOauthPartnerCertificatesOauthPartnerCertificateMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface GetIdentityDomainsOauthPartnerCertificatesOauthPartnerCertificateTag {
    key: string;
    value: string;
}

export interface GetIdentityDomainsPasswordPoliciesPasswordPolicy {
    allowedChars: string;
    attributeSets: string[];
    attributes: string;
    authorization: string;
    compartmentOcid: string;
    configuredPasswordPolicyRules: outputs.GetIdentityDomainsPasswordPoliciesPasswordPolicyConfiguredPasswordPolicyRule[];
    deleteInProgress: boolean;
    description: string;
    dictionaryDelimiter: string;
    dictionaryLocation: string;
    dictionaryWordDisallowed: boolean;
    disallowedChars: string;
    disallowedSubstrings: string[];
    disallowedUserAttributeValues: string[];
    distinctCharacters: number;
    domainOcid: string;
    externalId: string;
    firstNameDisallowed: boolean;
    forcePasswordReset: boolean;
    groups: outputs.GetIdentityDomainsPasswordPoliciesPasswordPolicyGroup[];
    id: string;
    idcsCreatedBies: outputs.GetIdentityDomainsPasswordPoliciesPasswordPolicyIdcsCreatedBy[];
    idcsEndpoint: string;
    idcsLastModifiedBies: outputs.GetIdentityDomainsPasswordPoliciesPasswordPolicyIdcsLastModifiedBy[];
    idcsLastUpgradedInRelease: string;
    idcsPreventedOperations: string[];
    lastNameDisallowed: boolean;
    lockoutDuration: number;
    maxIncorrectAttempts: number;
    maxLength: number;
    maxRepeatedChars: number;
    maxSpecialChars: number;
    metas: outputs.GetIdentityDomainsPasswordPoliciesPasswordPolicyMeta[];
    minAlphaNumerals: number;
    minAlphas: number;
    minLength: number;
    minLowerCase: number;
    minNumerals: number;
    minPasswordAge: number;
    minSpecialChars: number;
    minUniqueChars: number;
    minUpperCase: number;
    name: string;
    numPasswordsInHistory: number;
    ocid: string;
    passwordExpireWarning: number;
    passwordExpiresAfter: number;
    passwordStrength: string;
    priority: number;
    requiredChars: string;
    resourceTypeSchemaVersion: string;
    schemas: string[];
    startsWithAlphabet: boolean;
    tags: outputs.GetIdentityDomainsPasswordPoliciesPasswordPolicyTag[];
    tenancyOcid: string;
    userNameDisallowed: boolean;
}

export interface GetIdentityDomainsPasswordPoliciesPasswordPolicyConfiguredPasswordPolicyRule {
    key: string;
    value: string;
}

export interface GetIdentityDomainsPasswordPoliciesPasswordPolicyGroup {
    display: string;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsPasswordPoliciesPasswordPolicyIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsPasswordPoliciesPasswordPolicyIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsPasswordPoliciesPasswordPolicyMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface GetIdentityDomainsPasswordPoliciesPasswordPolicyTag {
    key: string;
    value: string;
}

export interface GetIdentityDomainsPasswordPolicyConfiguredPasswordPolicyRule {
    key: string;
    value: string;
}

export interface GetIdentityDomainsPasswordPolicyGroup {
    display: string;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsPasswordPolicyIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsPasswordPolicyIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsPasswordPolicyMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface GetIdentityDomainsPasswordPolicyTag {
    key: string;
    value: string;
}

export interface GetIdentityDomainsPoliciesPolicy {
    active: boolean;
    attributeSets: string[];
    attributes: string;
    authorization: string;
    compartmentOcid: string;
    deleteInProgress: boolean;
    description: string;
    domainOcid: string;
    externalId: string;
    id: string;
    idcsCreatedBies: outputs.GetIdentityDomainsPoliciesPolicyIdcsCreatedBy[];
    idcsEndpoint: string;
    idcsLastModifiedBies: outputs.GetIdentityDomainsPoliciesPolicyIdcsLastModifiedBy[];
    idcsLastUpgradedInRelease: string;
    idcsPreventedOperations: string[];
    metas: outputs.GetIdentityDomainsPoliciesPolicyMeta[];
    name: string;
    ocid: string;
    policyGroovy: string;
    policyTypes: outputs.GetIdentityDomainsPoliciesPolicyPolicyType[];
    resourceTypeSchemaVersion: string;
    rules: outputs.GetIdentityDomainsPoliciesPolicyRule[];
    schemas: string[];
    tags: outputs.GetIdentityDomainsPoliciesPolicyTag[];
    tenancyOcid: string;
}

export interface GetIdentityDomainsPoliciesPolicyIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsPoliciesPolicyIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsPoliciesPolicyMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface GetIdentityDomainsPoliciesPolicyPolicyType {
    ref: string;
    value: string;
}

export interface GetIdentityDomainsPoliciesPolicyRule {
    name: string;
    ref: string;
    sequence: number;
    value: string;
}

export interface GetIdentityDomainsPoliciesPolicyTag {
    key: string;
    value: string;
}

export interface GetIdentityDomainsPolicyIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsPolicyIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsPolicyMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface GetIdentityDomainsPolicyPolicyType {
    ref: string;
    value: string;
}

export interface GetIdentityDomainsPolicyRule {
    name: string;
    ref: string;
    sequence: number;
    value: string;
}

export interface GetIdentityDomainsPolicyTag {
    key: string;
    value: string;
}

export interface GetIdentityDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttribute {
    canonicalValues: string[];
    caseExact: boolean;
    compartmentOcid: string;
    deleteInProgress: boolean;
    description: string;
    domainOcid: string;
    endUserMutability: string;
    endUserMutabilityAllowedValues: string[];
    id: string;
    idcsAddedSinceReleaseNumber: string;
    idcsAddedSinceVersion: number;
    idcsAttributeCacheable: boolean;
    idcsAttributeMappable: boolean;
    idcsAuditable: boolean;
    idcsAutoIncrementSeqName: string;
    idcsCanonicalValueSourceFilter: string;
    idcsCanonicalValueSourceResourceType: string;
    idcsCompositeKeys: string[];
    idcsCreatedBies: outputs.GetIdentityDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttributeIdcsCreatedBy[];
    idcsCsvColumnHeaderName: string;
    idcsCustomAttribute: boolean;
    idcsDeprecatedSinceReleaseNumber: string;
    idcsDeprecatedSinceVersion: number;
    idcsDisplayName: string;
    idcsDisplayNameMessageId: string;
    idcsFetchComplexAttributeValues: boolean;
    idcsFromTargetMapper: string;
    idcsFullyQualifiedName: string;
    idcsGenerated: boolean;
    idcsIcfAttributeType: string;
    idcsIcfBundleAttributeName: string;
    idcsIcfRequired: boolean;
    idcsIndirectRefResourceAttributes: string[];
    idcsInternal: boolean;
    idcsLastModifiedBies: outputs.GetIdentityDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttributeIdcsLastModifiedBy[];
    idcsLastUpgradedInRelease: string;
    idcsMaxLength: number;
    idcsMaxValue: number;
    idcsMinLength: number;
    idcsMinValue: number;
    idcsMultiLanguage: boolean;
    idcsPreventedOperations: string[];
    idcsRefResourceAttribute: string;
    idcsRefResourceAttributes: string[];
    idcsSchemaUrn: string;
    idcsScimCompliant: boolean;
    idcsSearchable: boolean;
    idcsSensitive: string;
    idcsTargetAttributeName: string;
    idcsTargetAttributeNameToMigrateFrom: string;
    idcsTargetNormAttributeName: string;
    idcsTargetUniqueConstraintName: string;
    idcsToTargetMapper: string;
    idcsTrimStringValue: boolean;
    idcsValidateReference: boolean;
    idcsValuePersisted: boolean;
    metas: outputs.GetIdentityDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttributeMeta[];
    multiValued: boolean;
    mutability: string;
    name: string;
    ocid: string;
    referenceTypes: string[];
    required: boolean;
    resourceType: string;
    returned: string;
    schemas: string[];
    tags: outputs.GetIdentityDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttributeTag[];
    tenancyOcid: string;
    type: string;
    uniqueness: string;
}

export interface GetIdentityDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttributeIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttributeIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttributeMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface GetIdentityDomainsResourceTypeSchemaAttributesResourceTypeSchemaAttributeTag {
    key: string;
    value: string;
}

export interface GetIdentityDomainsRuleConditionGroup {
    name: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsRuleIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsRuleIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsRuleMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface GetIdentityDomainsRulePolicyType {
    ref: string;
    value: string;
}

export interface GetIdentityDomainsRuleReturn {
    name: string;
    returnGroovy: string;
    value: string;
}

export interface GetIdentityDomainsRuleTag {
    key: string;
    value: string;
}

export interface GetIdentityDomainsRulesRule {
    active: boolean;
    attributeSets: string[];
    attributes: string;
    authorization: string;
    compartmentOcid: string;
    condition: string;
    conditionGroups: outputs.GetIdentityDomainsRulesRuleConditionGroup[];
    deleteInProgress: boolean;
    description: string;
    domainOcid: string;
    externalId: string;
    id: string;
    idcsCreatedBies: outputs.GetIdentityDomainsRulesRuleIdcsCreatedBy[];
    idcsEndpoint: string;
    idcsLastModifiedBies: outputs.GetIdentityDomainsRulesRuleIdcsLastModifiedBy[];
    idcsLastUpgradedInRelease: string;
    idcsPreventedOperations: string[];
    locked: boolean;
    metas: outputs.GetIdentityDomainsRulesRuleMeta[];
    name: string;
    ocid: string;
    policyTypes: outputs.GetIdentityDomainsRulesRulePolicyType[];
    resourceTypeSchemaVersion: string;
    returns: outputs.GetIdentityDomainsRulesRuleReturn[];
    ruleGroovy: string;
    schemas: string[];
    tags: outputs.GetIdentityDomainsRulesRuleTag[];
    tenancyOcid: string;
}

export interface GetIdentityDomainsRulesRuleConditionGroup {
    name: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsRulesRuleIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsRulesRuleIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsRulesRuleMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface GetIdentityDomainsRulesRulePolicyType {
    ref: string;
    value: string;
}

export interface GetIdentityDomainsRulesRuleReturn {
    name: string;
    returnGroovy: string;
    value: string;
}

export interface GetIdentityDomainsRulesRuleTag {
    key: string;
    value: string;
}

export interface GetIdentityDomainsSecurityQuestionIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsSecurityQuestionIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsSecurityQuestionMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface GetIdentityDomainsSecurityQuestionQuestionText {
    default: boolean;
    locale: string;
    value: string;
}

export interface GetIdentityDomainsSecurityQuestionSettingIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsSecurityQuestionSettingIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsSecurityQuestionSettingMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface GetIdentityDomainsSecurityQuestionSettingTag {
    key: string;
    value: string;
}

export interface GetIdentityDomainsSecurityQuestionSettingsSecurityQuestionSetting {
    attributeSets: string[];
    attributes: string;
    authorization: string;
    compartmentOcid: string;
    deleteInProgress: boolean;
    domainOcid: string;
    externalId: string;
    id: string;
    idcsCreatedBies: outputs.GetIdentityDomainsSecurityQuestionSettingsSecurityQuestionSettingIdcsCreatedBy[];
    idcsEndpoint: string;
    idcsLastModifiedBies: outputs.GetIdentityDomainsSecurityQuestionSettingsSecurityQuestionSettingIdcsLastModifiedBy[];
    idcsLastUpgradedInRelease: string;
    idcsPreventedOperations: string[];
    maxFieldLength: number;
    metas: outputs.GetIdentityDomainsSecurityQuestionSettingsSecurityQuestionSettingMeta[];
    minAnswerLength: number;
    numQuestionsToAns: number;
    numQuestionsToSetup: number;
    ocid: string;
    resourceTypeSchemaVersion: string;
    schemas: string[];
    securityQuestionSettingId: string;
    tags: outputs.GetIdentityDomainsSecurityQuestionSettingsSecurityQuestionSettingTag[];
    tenancyOcid: string;
}

export interface GetIdentityDomainsSecurityQuestionSettingsSecurityQuestionSettingIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsSecurityQuestionSettingsSecurityQuestionSettingIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsSecurityQuestionSettingsSecurityQuestionSettingMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface GetIdentityDomainsSecurityQuestionSettingsSecurityQuestionSettingTag {
    key: string;
    value: string;
}

export interface GetIdentityDomainsSecurityQuestionTag {
    key: string;
    value: string;
}

export interface GetIdentityDomainsSecurityQuestionsSecurityQuestion {
    active: boolean;
    attributeSets: string[];
    attributes: string;
    authorization: string;
    compartmentOcid: string;
    deleteInProgress: boolean;
    domainOcid: string;
    externalId: string;
    id: string;
    idcsCreatedBies: outputs.GetIdentityDomainsSecurityQuestionsSecurityQuestionIdcsCreatedBy[];
    idcsEndpoint: string;
    idcsLastModifiedBies: outputs.GetIdentityDomainsSecurityQuestionsSecurityQuestionIdcsLastModifiedBy[];
    idcsLastUpgradedInRelease: string;
    idcsPreventedOperations: string[];
    metas: outputs.GetIdentityDomainsSecurityQuestionsSecurityQuestionMeta[];
    ocid: string;
    questionTexts: outputs.GetIdentityDomainsSecurityQuestionsSecurityQuestionQuestionText[];
    resourceTypeSchemaVersion: string;
    schemas: string[];
    tags: outputs.GetIdentityDomainsSecurityQuestionsSecurityQuestionTag[];
    tenancyOcid: string;
    type: string;
}

export interface GetIdentityDomainsSecurityQuestionsSecurityQuestionIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsSecurityQuestionsSecurityQuestionIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsSecurityQuestionsSecurityQuestionMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface GetIdentityDomainsSecurityQuestionsSecurityQuestionQuestionText {
    default: boolean;
    locale: string;
    value: string;
}

export interface GetIdentityDomainsSecurityQuestionsSecurityQuestionTag {
    key: string;
    value: string;
}

export interface GetIdentityDomainsSelfRegistrationProfileAfterSubmitText {
    default: boolean;
    locale: string;
    value: string;
}

export interface GetIdentityDomainsSelfRegistrationProfileConsentText {
    default: boolean;
    locale: string;
    value: string;
}

export interface GetIdentityDomainsSelfRegistrationProfileDefaultGroup {
    display: string;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsSelfRegistrationProfileDisplayName {
    default: boolean;
    locale: string;
    value: string;
}

export interface GetIdentityDomainsSelfRegistrationProfileEmailTemplate {
    display: string;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsSelfRegistrationProfileFooterText {
    default: boolean;
    locale: string;
    value: string;
}

export interface GetIdentityDomainsSelfRegistrationProfileHeaderText {
    default: boolean;
    locale: string;
    value: string;
}

export interface GetIdentityDomainsSelfRegistrationProfileIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsSelfRegistrationProfileIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsSelfRegistrationProfileMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface GetIdentityDomainsSelfRegistrationProfileTag {
    key: string;
    value: string;
}

export interface GetIdentityDomainsSelfRegistrationProfileUserAttribute {
    deletable: boolean;
    fullyQualifiedAttributeName: string;
    metadata: string;
    seqNumber: number;
    value: string;
}

export interface GetIdentityDomainsSelfRegistrationProfilesSelfRegistrationProfile {
    activationEmailRequired: boolean;
    active: boolean;
    afterSubmitTexts: outputs.GetIdentityDomainsSelfRegistrationProfilesSelfRegistrationProfileAfterSubmitText[];
    allowedEmailDomains: string[];
    attributeSets: string[];
    attributes: string;
    authorization: string;
    compartmentOcid: string;
    consentTextPresent: boolean;
    consentTexts: outputs.GetIdentityDomainsSelfRegistrationProfilesSelfRegistrationProfileConsentText[];
    defaultGroups: outputs.GetIdentityDomainsSelfRegistrationProfilesSelfRegistrationProfileDefaultGroup[];
    deleteInProgress: boolean;
    disallowedEmailDomains: string[];
    displayNames: outputs.GetIdentityDomainsSelfRegistrationProfilesSelfRegistrationProfileDisplayName[];
    domainOcid: string;
    emailTemplates: outputs.GetIdentityDomainsSelfRegistrationProfilesSelfRegistrationProfileEmailTemplate[];
    externalId: string;
    footerLogo: string;
    footerTexts: outputs.GetIdentityDomainsSelfRegistrationProfilesSelfRegistrationProfileFooterText[];
    headerLogo: string;
    headerTexts: outputs.GetIdentityDomainsSelfRegistrationProfilesSelfRegistrationProfileHeaderText[];
    id: string;
    idcsCreatedBies: outputs.GetIdentityDomainsSelfRegistrationProfilesSelfRegistrationProfileIdcsCreatedBy[];
    idcsEndpoint: string;
    idcsLastModifiedBies: outputs.GetIdentityDomainsSelfRegistrationProfilesSelfRegistrationProfileIdcsLastModifiedBy[];
    idcsLastUpgradedInRelease: string;
    idcsPreventedOperations: string[];
    metas: outputs.GetIdentityDomainsSelfRegistrationProfilesSelfRegistrationProfileMeta[];
    name: string;
    numberOfDaysRedirectUrlIsValid: number;
    ocid: string;
    redirectUrl: string;
    resourceTypeSchemaVersion: string;
    schemas: string[];
    showOnLoginPage: boolean;
    tags: outputs.GetIdentityDomainsSelfRegistrationProfilesSelfRegistrationProfileTag[];
    tenancyOcid: string;
    userAttributes: outputs.GetIdentityDomainsSelfRegistrationProfilesSelfRegistrationProfileUserAttribute[];
}

export interface GetIdentityDomainsSelfRegistrationProfilesSelfRegistrationProfileAfterSubmitText {
    default: boolean;
    locale: string;
    value: string;
}

export interface GetIdentityDomainsSelfRegistrationProfilesSelfRegistrationProfileConsentText {
    default: boolean;
    locale: string;
    value: string;
}

export interface GetIdentityDomainsSelfRegistrationProfilesSelfRegistrationProfileDefaultGroup {
    display: string;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsSelfRegistrationProfilesSelfRegistrationProfileDisplayName {
    default: boolean;
    locale: string;
    value: string;
}

export interface GetIdentityDomainsSelfRegistrationProfilesSelfRegistrationProfileEmailTemplate {
    display: string;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsSelfRegistrationProfilesSelfRegistrationProfileFooterText {
    default: boolean;
    locale: string;
    value: string;
}

export interface GetIdentityDomainsSelfRegistrationProfilesSelfRegistrationProfileHeaderText {
    default: boolean;
    locale: string;
    value: string;
}

export interface GetIdentityDomainsSelfRegistrationProfilesSelfRegistrationProfileIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsSelfRegistrationProfilesSelfRegistrationProfileIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsSelfRegistrationProfilesSelfRegistrationProfileMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface GetIdentityDomainsSelfRegistrationProfilesSelfRegistrationProfileTag {
    key: string;
    value: string;
}

export interface GetIdentityDomainsSelfRegistrationProfilesSelfRegistrationProfileUserAttribute {
    deletable: boolean;
    fullyQualifiedAttributeName: string;
    metadata: string;
    seqNumber: number;
    value: string;
}

export interface GetIdentityDomainsSettingCertificateValidation {
    crlCheckOnOcspFailureEnabled: boolean;
    crlEnabled: boolean;
    crlLocation: string;
    crlRefreshInterval: number;
    ocspEnabled: boolean;
    ocspResponderUrl: string;
    ocspSettingsResponderUrlPreferred: boolean;
    ocspSigningCertificateAlias: string;
    ocspTimeoutDuration: number;
    ocspUnknownResponseStatusAllowed: boolean;
}

export interface GetIdentityDomainsSettingCloudGateCorsSetting {
    cloudGateCorsAllowNullOrigin: boolean;
    cloudGateCorsAllowedOrigins: string[];
    cloudGateCorsEnabled: boolean;
    cloudGateCorsExposedHeaders: string[];
    cloudGateCorsMaxAge: number;
}

export interface GetIdentityDomainsSettingCompanyName {
    locale: string;
    value: string;
}

export interface GetIdentityDomainsSettingDefaultCompanyName {
    locale: string;
    value: string;
}

export interface GetIdentityDomainsSettingDefaultImage {
    display: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsSettingDefaultLoginText {
    locale: string;
    value: string;
}

export interface GetIdentityDomainsSettingIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsSettingIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsSettingImage {
    display: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsSettingLoginText {
    locale: string;
    value: string;
}

export interface GetIdentityDomainsSettingMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface GetIdentityDomainsSettingPurgeConfig {
    resourceName: string;
    retentionPeriod: number;
}

export interface GetIdentityDomainsSettingTag {
    key: string;
    value: string;
}

export interface GetIdentityDomainsSettingTenantCustomClaim {
    allScopes: boolean;
    expression: boolean;
    mode: string;
    name: string;
    scopes: string[];
    tokenType: string;
    value: string;
}

export interface GetIdentityDomainsSettingsSetting {
    accountAlwaysTrustScope: boolean;
    allowedDomains: string[];
    allowedForgotPasswordFlowReturnUrls: string[];
    allowedNotificationRedirectUrls: string[];
    attributeSets: string[];
    attributes: string;
    auditEventRetentionPeriod: number;
    authorization: string;
    certificateValidations: outputs.GetIdentityDomainsSettingsSettingCertificateValidation[];
    cloudAccountName: string;
    cloudGateCorsSettings: outputs.GetIdentityDomainsSettingsSettingCloudGateCorsSetting[];
    cloudMigrationCustomUrl: string;
    cloudMigrationUrlEnabled: boolean;
    companyNames: outputs.GetIdentityDomainsSettingsSettingCompanyName[];
    compartmentOcid: string;
    contactEmails: string[];
    csrAccess: string;
    customBranding: boolean;
    customCssLocation: string;
    customHtmlLocation: string;
    customTranslation: string;
    defaultCompanyNames: outputs.GetIdentityDomainsSettingsSettingDefaultCompanyName[];
    defaultImages: outputs.GetIdentityDomainsSettingsSettingDefaultImage[];
    defaultLoginTexts: outputs.GetIdentityDomainsSettingsSettingDefaultLoginText[];
    defaultTrustScope: string;
    deleteInProgress: boolean;
    diagnosticLevel: number;
    diagnosticRecordForSearchIdentifiesReturnedResources: boolean;
    diagnosticTracingUpto: string;
    domainOcid: string;
    enableTermsOfUse: boolean;
    externalId: string;
    iamUpstSessionExpiry: number;
    id: string;
    idcsCreatedBies: outputs.GetIdentityDomainsSettingsSettingIdcsCreatedBy[];
    idcsEndpoint: string;
    idcsLastModifiedBies: outputs.GetIdentityDomainsSettingsSettingIdcsLastModifiedBy[];
    idcsLastUpgradedInRelease: string;
    idcsPreventedOperations: string[];
    images: outputs.GetIdentityDomainsSettingsSettingImage[];
    isHostedPage: boolean;
    issuer: string;
    locale: string;
    loginTexts: outputs.GetIdentityDomainsSettingsSettingLoginText[];
    maxNoOfAppCmvaToReturn: number;
    maxNoOfAppRoleMembersToReturn: number;
    metas: outputs.GetIdentityDomainsSettingsSettingMeta[];
    migrationStatus: string;
    ocid: string;
    onPremisesProvisioning: boolean;
    preferredLanguage: string;
    prevIssuer: string;
    privacyPolicyUrl: string;
    purgeConfigs: outputs.GetIdentityDomainsSettingsSettingPurgeConfig[];
    reAuthFactors: string[];
    reAuthWhenChangingMyAuthenticationFactors: boolean;
    resourceTypeSchemaVersion: string;
    schemas: string[];
    serviceAdminCannotListOtherUsers: boolean;
    settingId: string;
    signingCertPublicAccess: boolean;
    subMappingAttr: string;
    tags: outputs.GetIdentityDomainsSettingsSettingTag[];
    tenancyOcid: string;
    tenantCustomClaims: outputs.GetIdentityDomainsSettingsSettingTenantCustomClaim[];
    termsOfUseUrl: string;
    timezone: string;
}

export interface GetIdentityDomainsSettingsSettingCertificateValidation {
    crlCheckOnOcspFailureEnabled: boolean;
    crlEnabled: boolean;
    crlLocation: string;
    crlRefreshInterval: number;
    ocspEnabled: boolean;
    ocspResponderUrl: string;
    ocspSettingsResponderUrlPreferred: boolean;
    ocspSigningCertificateAlias: string;
    ocspTimeoutDuration: number;
    ocspUnknownResponseStatusAllowed: boolean;
}

export interface GetIdentityDomainsSettingsSettingCloudGateCorsSetting {
    cloudGateCorsAllowNullOrigin: boolean;
    cloudGateCorsAllowedOrigins: string[];
    cloudGateCorsEnabled: boolean;
    cloudGateCorsExposedHeaders: string[];
    cloudGateCorsMaxAge: number;
}

export interface GetIdentityDomainsSettingsSettingCompanyName {
    locale: string;
    value: string;
}

export interface GetIdentityDomainsSettingsSettingDefaultCompanyName {
    locale: string;
    value: string;
}

export interface GetIdentityDomainsSettingsSettingDefaultImage {
    display: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsSettingsSettingDefaultLoginText {
    locale: string;
    value: string;
}

export interface GetIdentityDomainsSettingsSettingIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsSettingsSettingIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsSettingsSettingImage {
    display: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsSettingsSettingLoginText {
    locale: string;
    value: string;
}

export interface GetIdentityDomainsSettingsSettingMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface GetIdentityDomainsSettingsSettingPurgeConfig {
    resourceName: string;
    retentionPeriod: number;
}

export interface GetIdentityDomainsSettingsSettingTag {
    key: string;
    value: string;
}

export interface GetIdentityDomainsSettingsSettingTenantCustomClaim {
    allScopes: boolean;
    expression: boolean;
    mode: string;
    name: string;
    scopes: string[];
    tokenType: string;
    value: string;
}

export interface GetIdentityDomainsSmtpCredentialIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsSmtpCredentialIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsSmtpCredentialMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface GetIdentityDomainsSmtpCredentialTag {
    key: string;
    value: string;
}

export interface GetIdentityDomainsSmtpCredentialUrnietfparamsscimschemasoracleidcsextensionselfChangeUser {
    allowSelfChange: boolean;
}

export interface GetIdentityDomainsSmtpCredentialUser {
    display: string;
    name: string;
    ocid: string;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsSmtpCredentialsSmtpCredential {
    attributeSets: string[];
    attributes: string;
    authorization: string;
    compartmentOcid: string;
    deleteInProgress: boolean;
    description: string;
    domainOcid: string;
    expiresOn: string;
    id: string;
    idcsCreatedBies: outputs.GetIdentityDomainsSmtpCredentialsSmtpCredentialIdcsCreatedBy[];
    idcsEndpoint: string;
    idcsLastModifiedBies: outputs.GetIdentityDomainsSmtpCredentialsSmtpCredentialIdcsLastModifiedBy[];
    idcsLastUpgradedInRelease: string;
    idcsPreventedOperations: string[];
    metas: outputs.GetIdentityDomainsSmtpCredentialsSmtpCredentialMeta[];
    ocid: string;
    resourceTypeSchemaVersion: string;
    schemas: string[];
    status: string;
    tags: outputs.GetIdentityDomainsSmtpCredentialsSmtpCredentialTag[];
    tenancyOcid: string;
    urnietfparamsscimschemasoracleidcsextensionselfChangeUsers: outputs.GetIdentityDomainsSmtpCredentialsSmtpCredentialUrnietfparamsscimschemasoracleidcsextensionselfChangeUser[];
    userName: string;
    users: outputs.GetIdentityDomainsSmtpCredentialsSmtpCredentialUser[];
}

export interface GetIdentityDomainsSmtpCredentialsSmtpCredentialIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsSmtpCredentialsSmtpCredentialIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsSmtpCredentialsSmtpCredentialMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface GetIdentityDomainsSmtpCredentialsSmtpCredentialTag {
    key: string;
    value: string;
}

export interface GetIdentityDomainsSmtpCredentialsSmtpCredentialUrnietfparamsscimschemasoracleidcsextensionselfChangeUser {
    allowSelfChange: boolean;
}

export interface GetIdentityDomainsSmtpCredentialsSmtpCredentialUser {
    display: string;
    name: string;
    ocid: string;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsSocialIdentityProviderIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsSocialIdentityProviderIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsSocialIdentityProviderJitProvAssignedGroup {
    display: string;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsSocialIdentityProviderMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface GetIdentityDomainsSocialIdentityProviderRelayIdpParamMapping {
    relayParamKey: string;
    relayParamValue: string;
}

export interface GetIdentityDomainsSocialIdentityProviderTag {
    key: string;
    value: string;
}

export interface GetIdentityDomainsSocialIdentityProvidersSocialIdentityProvider {
    accessTokenUrl: string;
    accountLinkingEnabled: boolean;
    adminScopes: string[];
    authorization: string;
    authzUrl: string;
    autoRedirectEnabled: boolean;
    clientCredentialInPayload: boolean;
    clockSkewInSeconds: number;
    compartmentOcid: string;
    consumerKey: string;
    consumerSecret: string;
    deleteInProgress: boolean;
    description: string;
    discoveryUrl: string;
    domainOcid: string;
    enabled: boolean;
    iconUrl: string;
    id: string;
    idAttribute: string;
    idcsCreatedBies: outputs.GetIdentityDomainsSocialIdentityProvidersSocialIdentityProviderIdcsCreatedBy[];
    idcsEndpoint: string;
    idcsLastModifiedBies: outputs.GetIdentityDomainsSocialIdentityProvidersSocialIdentityProviderIdcsLastModifiedBy[];
    idcsLastUpgradedInRelease: string;
    idcsPreventedOperations: string[];
    jitProvAssignedGroups: outputs.GetIdentityDomainsSocialIdentityProvidersSocialIdentityProviderJitProvAssignedGroup[];
    jitProvGroupStaticListEnabled: boolean;
    metas: outputs.GetIdentityDomainsSocialIdentityProvidersSocialIdentityProviderMeta[];
    name: string;
    ocid: string;
    profileUrl: string;
    redirectUrl: string;
    refreshTokenUrl: string;
    registrationEnabled: boolean;
    relayIdpParamMappings: outputs.GetIdentityDomainsSocialIdentityProvidersSocialIdentityProviderRelayIdpParamMapping[];
    resourceTypeSchemaVersion: string;
    schemas: string[];
    scopes: string[];
    serviceProviderName: string;
    showOnLogin: boolean;
    socialJitProvisioningEnabled: boolean;
    status: string;
    tags: outputs.GetIdentityDomainsSocialIdentityProvidersSocialIdentityProviderTag[];
    tenancyOcid: string;
}

export interface GetIdentityDomainsSocialIdentityProvidersSocialIdentityProviderIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsSocialIdentityProvidersSocialIdentityProviderIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsSocialIdentityProvidersSocialIdentityProviderJitProvAssignedGroup {
    display: string;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsSocialIdentityProvidersSocialIdentityProviderMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface GetIdentityDomainsSocialIdentityProvidersSocialIdentityProviderRelayIdpParamMapping {
    relayParamKey: string;
    relayParamValue: string;
}

export interface GetIdentityDomainsSocialIdentityProvidersSocialIdentityProviderTag {
    key: string;
    value: string;
}

export interface GetIdentityDomainsUserAddress {
    country: string;
    formatted: string;
    locality: string;
    postalCode: string;
    primary: boolean;
    region: string;
    streetAddress: string;
    type: string;
}

export interface GetIdentityDomainsUserAttributesSettingAttributeSetting {
    endUserMutability: string;
    endUserMutabilityCanonicalValues: string[];
    name: string;
}

export interface GetIdentityDomainsUserAttributesSettingIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsUserAttributesSettingIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsUserAttributesSettingMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface GetIdentityDomainsUserAttributesSettingTag {
    key: string;
    value: string;
}

export interface GetIdentityDomainsUserAttributesSettingsUserAttributesSetting {
    attributeSets: string[];
    attributeSettings: outputs.GetIdentityDomainsUserAttributesSettingsUserAttributesSettingAttributeSetting[];
    attributes: string;
    authorization: string;
    compartmentOcid: string;
    deleteInProgress: boolean;
    domainOcid: string;
    id: string;
    idcsCreatedBies: outputs.GetIdentityDomainsUserAttributesSettingsUserAttributesSettingIdcsCreatedBy[];
    idcsEndpoint: string;
    idcsLastModifiedBies: outputs.GetIdentityDomainsUserAttributesSettingsUserAttributesSettingIdcsLastModifiedBy[];
    idcsLastUpgradedInRelease: string;
    idcsPreventedOperations: string[];
    metas: outputs.GetIdentityDomainsUserAttributesSettingsUserAttributesSettingMeta[];
    ocid: string;
    resourceTypeSchemaVersion: string;
    schemas: string[];
    tags: outputs.GetIdentityDomainsUserAttributesSettingsUserAttributesSettingTag[];
    tenancyOcid: string;
    userAttributesSettingId: string;
}

export interface GetIdentityDomainsUserAttributesSettingsUserAttributesSettingAttributeSetting {
    endUserMutability: string;
    endUserMutabilityCanonicalValues: string[];
    name: string;
}

export interface GetIdentityDomainsUserAttributesSettingsUserAttributesSettingIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsUserAttributesSettingsUserAttributesSettingIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsUserAttributesSettingsUserAttributesSettingMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface GetIdentityDomainsUserAttributesSettingsUserAttributesSettingTag {
    key: string;
    value: string;
}

export interface GetIdentityDomainsUserDbCredentialIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsUserDbCredentialIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsUserDbCredentialMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface GetIdentityDomainsUserDbCredentialTag {
    key: string;
    value: string;
}

export interface GetIdentityDomainsUserDbCredentialUrnietfparamsscimschemasoracleidcsextensionselfChangeUser {
    allowSelfChange: boolean;
}

export interface GetIdentityDomainsUserDbCredentialUser {
    display: string;
    name: string;
    ocid: string;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsUserDbCredentialsUserDbCredential {
    attributeSets: string[];
    attributes: string;
    authorization: string;
    compartmentOcid: string;
    dbPassword: string;
    deleteInProgress: boolean;
    description: string;
    domainOcid: string;
    expired: boolean;
    expiresOn: string;
    id: string;
    idcsCreatedBies: outputs.GetIdentityDomainsUserDbCredentialsUserDbCredentialIdcsCreatedBy[];
    idcsEndpoint: string;
    idcsLastModifiedBies: outputs.GetIdentityDomainsUserDbCredentialsUserDbCredentialIdcsLastModifiedBy[];
    idcsLastUpgradedInRelease: string;
    idcsPreventedOperations: string[];
    lastSetDate: string;
    metas: outputs.GetIdentityDomainsUserDbCredentialsUserDbCredentialMeta[];
    mixedDbPassword: string;
    mixedSalt: string;
    name: string;
    ocid: string;
    resourceTypeSchemaVersion: string;
    salt: string;
    schemas: string[];
    status: string;
    tags: outputs.GetIdentityDomainsUserDbCredentialsUserDbCredentialTag[];
    tenancyOcid: string;
    urnietfparamsscimschemasoracleidcsextensionselfChangeUsers: outputs.GetIdentityDomainsUserDbCredentialsUserDbCredentialUrnietfparamsscimschemasoracleidcsextensionselfChangeUser[];
    users: outputs.GetIdentityDomainsUserDbCredentialsUserDbCredentialUser[];
}

export interface GetIdentityDomainsUserDbCredentialsUserDbCredentialIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsUserDbCredentialsUserDbCredentialIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsUserDbCredentialsUserDbCredentialMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface GetIdentityDomainsUserDbCredentialsUserDbCredentialTag {
    key: string;
    value: string;
}

export interface GetIdentityDomainsUserDbCredentialsUserDbCredentialUrnietfparamsscimschemasoracleidcsextensionselfChangeUser {
    allowSelfChange: boolean;
}

export interface GetIdentityDomainsUserDbCredentialsUserDbCredentialUser {
    display: string;
    name: string;
    ocid: string;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsUserEmail {
    pendingVerificationData: string;
    primary: boolean;
    secondary: boolean;
    type: string;
    value: string;
    verified: boolean;
}

export interface GetIdentityDomainsUserEntitlement {
    display: string;
    primary: boolean;
    type: string;
    value: string;
}

export interface GetIdentityDomainsUserGroup {
    dateAdded: string;
    display: string;
    externalId: string;
    membershipOcid: string;
    nonUniqueDisplay: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsUserIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsUserIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsUserIm {
    display: string;
    primary: boolean;
    type: string;
    value: string;
}

export interface GetIdentityDomainsUserMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface GetIdentityDomainsUserName {
    familyName: string;
    formatted: string;
    givenName: string;
    honorificPrefix: string;
    honorificSuffix: string;
    middleName: string;
}

export interface GetIdentityDomainsUserPhoneNumber {
    display: string;
    primary: boolean;
    type: string;
    value: string;
    verified: boolean;
}

export interface GetIdentityDomainsUserPhoto {
    display: string;
    primary: boolean;
    type: string;
    value: string;
}

export interface GetIdentityDomainsUserRole {
    display: string;
    primary: boolean;
    type: string;
    value: string;
}

export interface GetIdentityDomainsUserTag {
    key: string;
    value: string;
}

export interface GetIdentityDomainsUserUrnietfparamsscimschemasextensionenterprise20user {
    costCenter: string;
    department: string;
    division: string;
    employeeNumber: string;
    managers: outputs.GetIdentityDomainsUserUrnietfparamsscimschemasextensionenterprise20userManager[];
    organization: string;
}

export interface GetIdentityDomainsUserUrnietfparamsscimschemasextensionenterprise20userManager {
    displayName: string;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionOciTag {
    definedTags: outputs.GetIdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionOciTagDefinedTag[];
    freeformTags: outputs.GetIdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionOciTagFreeformTag[];
    tagSlug: string;
}

export interface GetIdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionOciTagDefinedTag {
    key: string;
    namespace: string;
    value: string;
}

export interface GetIdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionOciTagFreeformTag {
    key: string;
    value: string;
}

export interface GetIdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionadaptiveUser {
    riskLevel: string;
    riskScores: outputs.GetIdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionadaptiveUserRiskScore[];
}

export interface GetIdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionadaptiveUserRiskScore {
    lastUpdateTimestamp: string;
    ref: string;
    riskLevel: string;
    score: number;
    source: string;
    status: string;
    value: string;
}

export interface GetIdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensioncapabilitiesUser {
    canUseApiKeys: boolean;
    canUseAuthTokens: boolean;
    canUseConsole: boolean;
    canUseConsolePassword: boolean;
    canUseCustomerSecretKeys: boolean;
    canUseDbCredentials: boolean;
    canUseOauth2clientCredentials: boolean;
    canUseSmtpCredentials: boolean;
}

export interface GetIdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensiondbCredentialsUser {
    dbLoginAttempts: number;
    dbUserName: string;
}

export interface GetIdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensiondbUserUser {
    dbGlobalRoles: string[];
    domainLevelSchema: string;
    instanceLevelSchema: string;
    isDbUser: boolean;
    passwordVerifiers: outputs.GetIdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensiondbUserUserPasswordVerifier[];
}

export interface GetIdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensiondbUserUserPasswordVerifier {
    type: string;
    value: string;
}

export interface GetIdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionkerberosUserUser {
    realmUsers: outputs.GetIdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionkerberosUserUserRealmUser[];
}

export interface GetIdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionkerberosUserUserRealmUser {
    principalName: string;
    realmName: string;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUser {
    bypassCodes: outputs.GetIdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserBypassCode[];
    devices: outputs.GetIdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserDevice[];
    loginAttempts: number;
    mfaEnabledOn: string;
    mfaIgnoredApps: string[];
    mfaStatus: string;
    preferredAuthenticationFactor: string;
    preferredAuthenticationMethod: string;
    preferredDevices: outputs.GetIdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserPreferredDevice[];
    preferredThirdPartyVendor: string;
    trustedUserAgents: outputs.GetIdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserTrustedUserAgent[];
}

export interface GetIdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserBypassCode {
    ref: string;
    value: string;
}

export interface GetIdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserDevice {
    authenticationMethod: string;
    display: string;
    factorStatus: string;
    factorType: string;
    lastSyncTime: string;
    ref: string;
    status: string;
    thirdPartyVendorName: string;
    value: string;
}

export interface GetIdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserPreferredDevice {
    display: string;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserTrustedUserAgent {
    display: string;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionpasswordStateUser {
    applicablePasswordPolicies: outputs.GetIdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionpasswordStateUserApplicablePasswordPolicy[];
    cantChange: boolean;
    cantExpire: boolean;
    expired: boolean;
    lastFailedValidationDate: string;
    lastSuccessfulSetDate: string;
    lastSuccessfulValidationDate: string;
    mustChange: boolean;
}

export interface GetIdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionpasswordStateUserApplicablePasswordPolicy {
    display: string;
    priority: number;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionpasswordlessUser {
    factorIdentifiers: outputs.GetIdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionpasswordlessUserFactorIdentifier[];
    factorMethod: string;
    factorType: string;
}

export interface GetIdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionpasswordlessUserFactorIdentifier {
    display: string;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionposixUser {
    gecos: string;
    gidNumber: number;
    homeDirectory: string;
    loginShell: string;
    uidNumber: number;
}

export interface GetIdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionsecurityQuestionsUser {
    secQuestions: outputs.GetIdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionsecurityQuestionsUserSecQuestion[];
}

export interface GetIdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionsecurityQuestionsUserSecQuestion {
    answer: string;
    hintText: string;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionselfChangeUser {
    allowSelfChange: boolean;
}

export interface GetIdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionselfRegistrationUser {
    consentGranted: boolean;
    selfRegistrationProfiles: outputs.GetIdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionselfRegistrationUserSelfRegistrationProfile[];
    userToken: string;
}

export interface GetIdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionselfRegistrationUserSelfRegistrationProfile {
    display: string;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionsffUser {
    sffAuthKeys: string;
}

export interface GetIdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionsocialAccountUser {
    socialAccounts: outputs.GetIdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionsocialAccountUserSocialAccount[];
}

export interface GetIdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionsocialAccountUserSocialAccount {
    display: string;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensiontermsOfUseUser {
    termsOfUseConsents: outputs.GetIdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensiontermsOfUseUserTermsOfUseConsent[];
}

export interface GetIdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensiontermsOfUseUserTermsOfUseConsent {
    ref: string;
    value: string;
}

export interface GetIdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUser {
    apiKeys: outputs.GetIdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserApiKey[];
    authTokens: outputs.GetIdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserAuthToken[];
    customerSecretKeys: outputs.GetIdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserCustomerSecretKey[];
    dbCredentials: outputs.GetIdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserDbCredential[];
    oAuth2clientCredentials: outputs.GetIdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserOAuth2clientCredential[];
    smtpCredentials: outputs.GetIdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserSmtpCredential[];
}

export interface GetIdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserApiKey {
    key: string;
    ocid: string;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserAuthToken {
    ocid: string;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserCustomerSecretKey {
    ocid: string;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserDbCredential {
    ocid: string;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserOAuth2clientCredential {
    ocid: string;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserSmtpCredential {
    ocid: string;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUser {
    lastFailedLoginDate: string;
    lastSuccessfulLoginDate: string;
    lockeds: outputs.GetIdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserLocked[];
    loginAttempts: number;
    maxConcurrentSessions: number;
    previousSuccessfulLoginDate: string;
    recoveryAttempts: number;
    recoveryEnrollAttempts: number;
    recoveryLockeds: outputs.GetIdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserRecoveryLocked[];
}

export interface GetIdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserLocked {
    expired: boolean;
    lockDate: string;
    on: boolean;
    reason: number;
}

export interface GetIdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserRecoveryLocked {
    lockDate: string;
    on: boolean;
}

export interface GetIdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUser {
    accountRecoveryRequired: boolean;
    accounts: outputs.GetIdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserAccount[];
    appRoles: outputs.GetIdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserAppRole[];
    applicableAuthenticationTargetApps: outputs.GetIdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserApplicableAuthenticationTargetApp[];
    bypassNotification: boolean;
    creationMechanism: string;
    delegatedAuthenticationTargetApps: outputs.GetIdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserDelegatedAuthenticationTargetApp[];
    doNotShowGettingStarted: boolean;
    grants: outputs.GetIdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserGrant[];
    groupMembershipLastModified: string;
    idcsAppRolesLimitedToGroups: outputs.GetIdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserIdcsAppRolesLimitedToGroup[];
    isAccountRecoveryEnrolled: boolean;
    isAuthenticationDelegated: boolean;
    isFederatedUser: boolean;
    isGroupMembershipNormalized: boolean;
    isGroupMembershipSyncedToUsersGroups: boolean;
    notificationEmailTemplateId: string;
    preferredUiLandingPage: string;
    serviceUser: boolean;
    status: string;
    supportAccounts: outputs.GetIdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserSupportAccount[];
    syncedFromApps: outputs.GetIdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserSyncedFromApp[];
    userFlowControlledByExternalClient: boolean;
    userProvider: string;
    userTokens: outputs.GetIdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserUserToken[];
}

export interface GetIdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserAccount {
    active: boolean;
    appId: string;
    name: string;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserAppRole {
    adminRole: boolean;
    appId: string;
    appName: string;
    display: string;
    legacyGroupName: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserApplicableAuthenticationTargetApp {
    display: string;
    ref: string;
    targetRequestTimeout: number;
    type: string;
    value: string;
}

export interface GetIdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserDelegatedAuthenticationTargetApp {
    display: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserGrant {
    appId: string;
    grantMechanism: string;
    grantorId: string;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserIdcsAppRolesLimitedToGroup {
    display: string;
    idcsAppRoleId: string;
    ocid: string;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserSupportAccount {
    ocid: string;
    ref: string;
    userId: string;
    userProvider: string;
    value: string;
}

export interface GetIdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserSyncedFromApp {
    display: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserUserToken {
    ref: string;
    value: string;
}

export interface GetIdentityDomainsUserX509certificate {
    display: string;
    primary: boolean;
    type: string;
    value: string;
}

export interface GetIdentityDomainsUsersUser {
    active: boolean;
    addresses: outputs.GetIdentityDomainsUsersUserAddress[];
    attributeSets: string[];
    attributes: string;
    authorization: string;
    compartmentOcid: string;
    deleteInProgress: boolean;
    description: string;
    displayName: string;
    domainOcid: string;
    emails: outputs.GetIdentityDomainsUsersUserEmail[];
    entitlements: outputs.GetIdentityDomainsUsersUserEntitlement[];
    externalId: string;
    forceDelete: boolean;
    groups: outputs.GetIdentityDomainsUsersUserGroup[];
    id: string;
    idcsCreatedBies: outputs.GetIdentityDomainsUsersUserIdcsCreatedBy[];
    idcsEndpoint: string;
    idcsLastModifiedBies: outputs.GetIdentityDomainsUsersUserIdcsLastModifiedBy[];
    idcsLastUpgradedInRelease: string;
    idcsPreventedOperations: string[];
    ims: outputs.GetIdentityDomainsUsersUserIm[];
    locale: string;
    metas: outputs.GetIdentityDomainsUsersUserMeta[];
    names: outputs.GetIdentityDomainsUsersUserName[];
    nickName: string;
    ocid: string;
    password: string;
    phoneNumbers: outputs.GetIdentityDomainsUsersUserPhoneNumber[];
    photos: outputs.GetIdentityDomainsUsersUserPhoto[];
    preferredLanguage: string;
    profileUrl: string;
    resourceTypeSchemaVersion: string;
    roles: outputs.GetIdentityDomainsUsersUserRole[];
    schemas: string[];
    tags: outputs.GetIdentityDomainsUsersUserTag[];
    tenancyOcid: string;
    timezone: string;
    title: string;
    urnietfparamsscimschemasextensionenterprise20users: outputs.GetIdentityDomainsUsersUserUrnietfparamsscimschemasextensionenterprise20user[];
    urnietfparamsscimschemasoracleidcsextensionOciTags: outputs.GetIdentityDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionOciTag[];
    urnietfparamsscimschemasoracleidcsextensionadaptiveUsers: outputs.GetIdentityDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionadaptiveUser[];
    urnietfparamsscimschemasoracleidcsextensioncapabilitiesUsers: outputs.GetIdentityDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensioncapabilitiesUser[];
    urnietfparamsscimschemasoracleidcsextensiondbCredentialsUsers: outputs.GetIdentityDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensiondbCredentialsUser[];
    urnietfparamsscimschemasoracleidcsextensiondbUserUsers: outputs.GetIdentityDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensiondbUserUser[];
    urnietfparamsscimschemasoracleidcsextensionkerberosUserUsers: outputs.GetIdentityDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionkerberosUserUser[];
    urnietfparamsscimschemasoracleidcsextensionmfaUsers: outputs.GetIdentityDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionmfaUser[];
    urnietfparamsscimschemasoracleidcsextensionpasswordStateUsers: outputs.GetIdentityDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionpasswordStateUser[];
    urnietfparamsscimschemasoracleidcsextensionpasswordlessUsers: outputs.GetIdentityDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionpasswordlessUser[];
    urnietfparamsscimschemasoracleidcsextensionposixUsers: outputs.GetIdentityDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionposixUser[];
    urnietfparamsscimschemasoracleidcsextensionsecurityQuestionsUsers: outputs.GetIdentityDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionsecurityQuestionsUser[];
    urnietfparamsscimschemasoracleidcsextensionselfChangeUsers: outputs.GetIdentityDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionselfChangeUser[];
    urnietfparamsscimschemasoracleidcsextensionselfRegistrationUsers: outputs.GetIdentityDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionselfRegistrationUser[];
    urnietfparamsscimschemasoracleidcsextensionsffUsers: outputs.GetIdentityDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionsffUser[];
    urnietfparamsscimschemasoracleidcsextensionsocialAccountUsers: outputs.GetIdentityDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionsocialAccountUser[];
    urnietfparamsscimschemasoracleidcsextensiontermsOfUseUsers: outputs.GetIdentityDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensiontermsOfUseUser[];
    urnietfparamsscimschemasoracleidcsextensionuserCredentialsUsers: outputs.GetIdentityDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUser[];
    urnietfparamsscimschemasoracleidcsextensionuserStateUsers: outputs.GetIdentityDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserStateUser[];
    urnietfparamsscimschemasoracleidcsextensionuserUsers: outputs.GetIdentityDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserUser[];
    userName: string;
    userType: string;
    x509certificates: outputs.GetIdentityDomainsUsersUserX509certificate[];
}

export interface GetIdentityDomainsUsersUserAddress {
    country: string;
    formatted: string;
    locality: string;
    postalCode: string;
    primary: boolean;
    region: string;
    streetAddress: string;
    type: string;
}

export interface GetIdentityDomainsUsersUserEmail {
    pendingVerificationData: string;
    primary: boolean;
    secondary: boolean;
    type: string;
    value: string;
    verified: boolean;
}

export interface GetIdentityDomainsUsersUserEntitlement {
    display: string;
    primary: boolean;
    type: string;
    value: string;
}

export interface GetIdentityDomainsUsersUserGroup {
    dateAdded: string;
    display: string;
    externalId: string;
    membershipOcid: string;
    nonUniqueDisplay: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsUsersUserIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsUsersUserIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsUsersUserIm {
    display: string;
    primary: boolean;
    type: string;
    value: string;
}

export interface GetIdentityDomainsUsersUserMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface GetIdentityDomainsUsersUserName {
    familyName: string;
    formatted: string;
    givenName: string;
    honorificPrefix: string;
    honorificSuffix: string;
    middleName: string;
}

export interface GetIdentityDomainsUsersUserPhoneNumber {
    display: string;
    primary: boolean;
    type: string;
    value: string;
    verified: boolean;
}

export interface GetIdentityDomainsUsersUserPhoto {
    display: string;
    primary: boolean;
    type: string;
    value: string;
}

export interface GetIdentityDomainsUsersUserRole {
    display: string;
    primary: boolean;
    type: string;
    value: string;
}

export interface GetIdentityDomainsUsersUserTag {
    key: string;
    value: string;
}

export interface GetIdentityDomainsUsersUserUrnietfparamsscimschemasextensionenterprise20user {
    costCenter: string;
    department: string;
    division: string;
    employeeNumber: string;
    managers: outputs.GetIdentityDomainsUsersUserUrnietfparamsscimschemasextensionenterprise20userManager[];
    organization: string;
}

export interface GetIdentityDomainsUsersUserUrnietfparamsscimschemasextensionenterprise20userManager {
    displayName: string;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionOciTag {
    definedTags: outputs.GetIdentityDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionOciTagDefinedTag[];
    freeformTags: outputs.GetIdentityDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionOciTagFreeformTag[];
    tagSlug: string;
}

export interface GetIdentityDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionOciTagDefinedTag {
    key: string;
    namespace: string;
    value: string;
}

export interface GetIdentityDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionOciTagFreeformTag {
    key: string;
    value: string;
}

export interface GetIdentityDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionadaptiveUser {
    riskLevel: string;
    riskScores: outputs.GetIdentityDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionadaptiveUserRiskScore[];
}

export interface GetIdentityDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionadaptiveUserRiskScore {
    lastUpdateTimestamp: string;
    ref: string;
    riskLevel: string;
    score: number;
    source: string;
    status: string;
    value: string;
}

export interface GetIdentityDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensioncapabilitiesUser {
    canUseApiKeys: boolean;
    canUseAuthTokens: boolean;
    canUseConsole: boolean;
    canUseConsolePassword: boolean;
    canUseCustomerSecretKeys: boolean;
    canUseDbCredentials: boolean;
    canUseOauth2clientCredentials: boolean;
    canUseSmtpCredentials: boolean;
}

export interface GetIdentityDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensiondbCredentialsUser {
    dbLoginAttempts: number;
    dbUserName: string;
}

export interface GetIdentityDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensiondbUserUser {
    dbGlobalRoles: string[];
    domainLevelSchema: string;
    instanceLevelSchema: string;
    isDbUser: boolean;
    passwordVerifiers: outputs.GetIdentityDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensiondbUserUserPasswordVerifier[];
}

export interface GetIdentityDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensiondbUserUserPasswordVerifier {
    type: string;
    value: string;
}

export interface GetIdentityDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionkerberosUserUser {
    realmUsers: outputs.GetIdentityDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionkerberosUserUserRealmUser[];
}

export interface GetIdentityDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionkerberosUserUserRealmUser {
    principalName: string;
    realmName: string;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionmfaUser {
    bypassCodes: outputs.GetIdentityDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionmfaUserBypassCode[];
    devices: outputs.GetIdentityDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionmfaUserDevice[];
    loginAttempts: number;
    mfaEnabledOn: string;
    mfaIgnoredApps: string[];
    mfaStatus: string;
    preferredAuthenticationFactor: string;
    preferredAuthenticationMethod: string;
    preferredDevices: outputs.GetIdentityDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionmfaUserPreferredDevice[];
    preferredThirdPartyVendor: string;
    trustedUserAgents: outputs.GetIdentityDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionmfaUserTrustedUserAgent[];
}

export interface GetIdentityDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionmfaUserBypassCode {
    ref: string;
    value: string;
}

export interface GetIdentityDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionmfaUserDevice {
    authenticationMethod: string;
    display: string;
    factorStatus: string;
    factorType: string;
    lastSyncTime: string;
    ref: string;
    status: string;
    thirdPartyVendorName: string;
    value: string;
}

export interface GetIdentityDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionmfaUserPreferredDevice {
    display: string;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionmfaUserTrustedUserAgent {
    display: string;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionpasswordStateUser {
    applicablePasswordPolicies: outputs.GetIdentityDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionpasswordStateUserApplicablePasswordPolicy[];
    cantChange: boolean;
    cantExpire: boolean;
    expired: boolean;
    lastFailedValidationDate: string;
    lastSuccessfulSetDate: string;
    lastSuccessfulValidationDate: string;
    mustChange: boolean;
}

export interface GetIdentityDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionpasswordStateUserApplicablePasswordPolicy {
    display: string;
    priority: number;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionpasswordlessUser {
    factorIdentifiers: outputs.GetIdentityDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionpasswordlessUserFactorIdentifier[];
    factorMethod: string;
    factorType: string;
}

export interface GetIdentityDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionpasswordlessUserFactorIdentifier {
    display: string;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionposixUser {
    gecos: string;
    gidNumber: number;
    homeDirectory: string;
    loginShell: string;
    uidNumber: number;
}

export interface GetIdentityDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionsecurityQuestionsUser {
    secQuestions: outputs.GetIdentityDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionsecurityQuestionsUserSecQuestion[];
}

export interface GetIdentityDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionsecurityQuestionsUserSecQuestion {
    answer: string;
    hintText: string;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionselfChangeUser {
    allowSelfChange: boolean;
}

export interface GetIdentityDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionselfRegistrationUser {
    consentGranted: boolean;
    selfRegistrationProfiles: outputs.GetIdentityDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionselfRegistrationUserSelfRegistrationProfile[];
    userToken: string;
}

export interface GetIdentityDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionselfRegistrationUserSelfRegistrationProfile {
    display: string;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionsffUser {
    sffAuthKeys: string;
}

export interface GetIdentityDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionsocialAccountUser {
    socialAccounts: outputs.GetIdentityDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionsocialAccountUserSocialAccount[];
}

export interface GetIdentityDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionsocialAccountUserSocialAccount {
    display: string;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensiontermsOfUseUser {
    termsOfUseConsents: outputs.GetIdentityDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensiontermsOfUseUserTermsOfUseConsent[];
}

export interface GetIdentityDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensiontermsOfUseUserTermsOfUseConsent {
    ref: string;
    value: string;
}

export interface GetIdentityDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUser {
    apiKeys: outputs.GetIdentityDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserApiKey[];
    authTokens: outputs.GetIdentityDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserAuthToken[];
    customerSecretKeys: outputs.GetIdentityDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserCustomerSecretKey[];
    dbCredentials: outputs.GetIdentityDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserDbCredential[];
    oAuth2clientCredentials: outputs.GetIdentityDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserOAuth2clientCredential[];
    smtpCredentials: outputs.GetIdentityDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserSmtpCredential[];
}

export interface GetIdentityDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserApiKey {
    key: string;
    ocid: string;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserAuthToken {
    ocid: string;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserCustomerSecretKey {
    ocid: string;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserDbCredential {
    ocid: string;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserOAuth2clientCredential {
    ocid: string;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserSmtpCredential {
    ocid: string;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserStateUser {
    lastFailedLoginDate: string;
    lastSuccessfulLoginDate: string;
    lockeds: outputs.GetIdentityDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserLocked[];
    loginAttempts: number;
    maxConcurrentSessions: number;
    previousSuccessfulLoginDate: string;
    recoveryAttempts: number;
    recoveryEnrollAttempts: number;
    recoveryLockeds: outputs.GetIdentityDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserRecoveryLocked[];
}

export interface GetIdentityDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserLocked {
    expired: boolean;
    lockDate: string;
    on: boolean;
    reason: number;
}

export interface GetIdentityDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserRecoveryLocked {
    lockDate: string;
    on: boolean;
}

export interface GetIdentityDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserUser {
    accountRecoveryRequired: boolean;
    accounts: outputs.GetIdentityDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserUserAccount[];
    appRoles: outputs.GetIdentityDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserUserAppRole[];
    applicableAuthenticationTargetApps: outputs.GetIdentityDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserUserApplicableAuthenticationTargetApp[];
    bypassNotification: boolean;
    creationMechanism: string;
    delegatedAuthenticationTargetApps: outputs.GetIdentityDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserUserDelegatedAuthenticationTargetApp[];
    doNotShowGettingStarted: boolean;
    grants: outputs.GetIdentityDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserUserGrant[];
    groupMembershipLastModified: string;
    idcsAppRolesLimitedToGroups: outputs.GetIdentityDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserUserIdcsAppRolesLimitedToGroup[];
    isAccountRecoveryEnrolled: boolean;
    isAuthenticationDelegated: boolean;
    isFederatedUser: boolean;
    isGroupMembershipNormalized: boolean;
    isGroupMembershipSyncedToUsersGroups: boolean;
    notificationEmailTemplateId: string;
    preferredUiLandingPage: string;
    serviceUser: boolean;
    status: string;
    supportAccounts: outputs.GetIdentityDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserUserSupportAccount[];
    syncedFromApps: outputs.GetIdentityDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserUserSyncedFromApp[];
    userFlowControlledByExternalClient: boolean;
    userProvider: string;
    userTokens: outputs.GetIdentityDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserUserUserToken[];
}

export interface GetIdentityDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserUserAccount {
    active: boolean;
    appId: string;
    name: string;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserUserAppRole {
    adminRole: boolean;
    appId: string;
    appName: string;
    display: string;
    legacyGroupName: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserUserApplicableAuthenticationTargetApp {
    display: string;
    ref: string;
    targetRequestTimeout: number;
    type: string;
    value: string;
}

export interface GetIdentityDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserUserDelegatedAuthenticationTargetApp {
    display: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserUserGrant {
    appId: string;
    grantMechanism: string;
    grantorId: string;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserUserIdcsAppRolesLimitedToGroup {
    display: string;
    idcsAppRoleId: string;
    ocid: string;
    ref: string;
    value: string;
}

export interface GetIdentityDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserUserSupportAccount {
    ocid: string;
    ref: string;
    userId: string;
    userProvider: string;
    value: string;
}

export interface GetIdentityDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserUserSyncedFromApp {
    display: string;
    ref: string;
    type: string;
    value: string;
}

export interface GetIdentityDomainsUsersUserUrnietfparamsscimschemasoracleidcsextensionuserUserUserToken {
    ref: string;
    value: string;
}

export interface GetIdentityDomainsUsersUserX509certificate {
    display: string;
    primary: boolean;
    type: string;
    value: string;
}

export interface GetIdentityDynamicGroupsDynamicGroup {
    compartmentId: string;
    definedTags: {[key: string]: string};
    description: string;
    freeformTags: {[key: string]: string};
    id: string;
    inactiveState: string;
    matchingRule: string;
    name: string;
    state: string;
    timeCreated: string;
}

export interface GetIdentityDynamicGroupsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetIdentityFaultDomainsFaultDomain {
    availabilityDomain: string;
    compartmentId: string;
    id: string;
    name: string;
}

export interface GetIdentityFaultDomainsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetIdentityGroupsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetIdentityGroupsGroup {
    compartmentId: string;
    definedTags: {[key: string]: string};
    description: string;
    freeformTags: {[key: string]: string};
    id: string;
    inactiveState: string;
    name: string;
    state: string;
    timeCreated: string;
}

export interface GetIdentityIamWorkRequestErrorsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetIdentityIamWorkRequestErrorsIamWorkRequestError {
    code: string;
    message: string;
    timestamp: string;
}

export interface GetIdentityIamWorkRequestLogsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetIdentityIamWorkRequestLogsIamWorkRequestLog {
    message: string;
    timestamp: string;
}

export interface GetIdentityIamWorkRequestResource {
    actionType: string;
    entityType: string;
    entityUri: string;
    identifier: string;
}

export interface GetIdentityIamWorkRequestsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetIdentityIamWorkRequestsIamWorkRequest {
    compartmentId: string;
    id: string;
    operationType: string;
    percentComplete: number;
    resources: outputs.GetIdentityIamWorkRequestsIamWorkRequestResource[];
    status: string;
    timeAccepted: string;
    timeFinished: string;
    timeStarted: string;
}

export interface GetIdentityIamWorkRequestsIamWorkRequestResource {
    actionType: string;
    entityType: string;
    entityUri: string;
    identifier: string;
}

export interface GetIdentityIdentityProviderGroupsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetIdentityIdentityProviderGroupsIdentityProviderGroup {
    displayName: string;
    externalIdentifier: string;
    id: string;
    identityProviderId: string;
    name: string;
    timeCreated: string;
    timeModified: string;
}

export interface GetIdentityIdentityProvidersFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetIdentityIdentityProvidersIdentityProvider {
    compartmentId: string;
    definedTags: {[key: string]: string};
    description: string;
    freeformAttributes: {[key: string]: string};
    freeformTags: {[key: string]: string};
    id: string;
    inactiveState: string;
    metadata: string;
    metadataUrl: string;
    name: string;
    productType: string;
    protocol: string;
    redirectUrl: string;
    signingCertificate: string;
    state: string;
    timeCreated: string;
}

export interface GetIdentityIdpGroupMappingsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetIdentityIdpGroupMappingsIdpGroupMapping {
    compartmentId: string;
    groupId: string;
    id: string;
    identityProviderId: string;
    idpGroupName: string;
    inactiveState: string;
    state: string;
    timeCreated: string;
}

export interface GetIdentityNetworkSourceVirtualSourceList {
    ipRanges: string[];
    vcnId: string;
}

export interface GetIdentityNetworkSourcesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetIdentityNetworkSourcesNetworkSource {
    compartmentId: string;
    definedTags: {[key: string]: string};
    description: string;
    freeformTags: {[key: string]: string};
    id: string;
    inactiveState: string;
    name: string;
    publicSourceLists: string[];
    services: string[];
    state: string;
    timeCreated: string;
    virtualSourceLists: outputs.GetIdentityNetworkSourcesNetworkSourceVirtualSourceList[];
}

export interface GetIdentityNetworkSourcesNetworkSourceVirtualSourceList {
    ipRanges: string[];
    vcnId: string;
}

export interface GetIdentityPoliciesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetIdentityPoliciesPolicy {
    ETag: string;
    compartmentId: string;
    definedTags: {[key: string]: string};
    description: string;
    freeformTags: {[key: string]: string};
    id: string;
    inactiveState: string;
    lastUpdateETag: string;
    name: string;
    policyHash: string;
    state: string;
    statements: string[];
    timeCreated: string;
    versionDate: string;
}

export interface GetIdentityRegionSubscriptionsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetIdentityRegionSubscriptionsRegionSubscription {
    isHomeRegion: boolean;
    regionKey: string;
    regionName: string;
    state: string;
    tenancyId: string;
}

export interface GetIdentityRegionsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetIdentityRegionsRegion {
    key: string;
    name: string;
}

export interface GetIdentitySmtpCredentialsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetIdentitySmtpCredentialsSmtpCredential {
    description: string;
    id: string;
    inactiveState: string;
    password: string;
    state: string;
    timeCreated: string;
    timeExpires: string;
    userId: string;
    username: string;
}

export interface GetIdentityTagDefaultsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetIdentityTagDefaultsTagDefault {
    compartmentId: string;
    id: string;
    isRequired: boolean;
    state: string;
    tagDefinitionId: string;
    tagDefinitionName: string;
    tagNamespaceId: string;
    timeCreated: string;
    value: string;
}

export interface GetIdentityTagNamespacesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetIdentityTagNamespacesTagNamespace {
    compartmentId: string;
    definedTags: {[key: string]: string};
    description: string;
    freeformTags: {[key: string]: string};
    id: string;
    isRetired: boolean;
    name: string;
    state: string;
    timeCreated: string;
}

export interface GetIdentityTagStandardTagNamespaceTemplateTagDefinitionTemplate {
    description: string;
    enumMutability: string;
    isCostTracking: boolean;
    possibleValues: string[];
    tagDefinitionName: string;
    type: string;
}

export interface GetIdentityTagStandardTagNamespaceTemplatesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetIdentityTagStandardTagNamespaceTemplatesStandardTagNamespaceTemplate {
    description: string;
    standardTagNamespaceName: string;
    status: string;
}

export interface GetIdentityTagValidator {
    validatorType: string;
    values: string[];
}

export interface GetIdentityTagsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetIdentityTagsTag {
    definedTags: {[key: string]: string};
    description: string;
    freeformTags: {[key: string]: string};
    id: string;
    isCostTracking: boolean;
    isRetired: boolean;
    name: string;
    state: string;
    tagNamespaceId: string;
    timeCreated: string;
    validators: outputs.GetIdentityTagsTagValidator[];
}

export interface GetIdentityTagsTagValidator {
    validatorType: string;
    values: string[];
}

export interface GetIdentityUserCapability {
    canUseApiKeys: boolean;
    canUseAuthTokens: boolean;
    canUseConsolePassword: boolean;
    canUseCustomerSecretKeys: boolean;
    canUseDbCredentials: boolean;
    canUseOauth2clientCredentials: boolean;
    canUseSmtpCredentials: boolean;
}

export interface GetIdentityUserGroupMembershipsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetIdentityUserGroupMembershipsMembership {
    compartmentId: string;
    groupId: string;
    id: string;
    inactiveState: string;
    state: string;
    timeCreated: string;
    userId: string;
}

export interface GetIdentityUsersFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetIdentityUsersUser {
    capabilities: outputs.GetIdentityUsersUserCapability[];
    compartmentId: string;
    dbUserName: string;
    definedTags: {[key: string]: string};
    description: string;
    email: string;
    emailVerified: boolean;
    externalIdentifier: string;
    freeformTags: {[key: string]: string};
    id: string;
    identityProviderId: string;
    inactiveState: string;
    lastSuccessfulLoginTime: string;
    name: string;
    previousSuccessfulLoginTime: string;
    state: string;
    timeCreated: string;
}

export interface GetIdentityUsersUserCapability {
    canUseApiKeys: boolean;
    canUseAuthTokens: boolean;
    canUseConsolePassword: boolean;
    canUseCustomerSecretKeys: boolean;
    canUseDbCredentials: boolean;
    canUseOauth2clientCredentials: boolean;
    canUseSmtpCredentials: boolean;
}

export interface GetIntegrationIntegrationInstanceAlternateCustomEndpoint {
    alias: string;
    certificateSecretId: string;
    certificateSecretVersion: number;
    hostname: string;
}

export interface GetIntegrationIntegrationInstanceAttachment {
    isImplicit: boolean;
    targetId: string;
    targetInstanceUrl: string;
    targetRole: string;
    targetServiceType: string;
}

export interface GetIntegrationIntegrationInstanceCustomEndpoint {
    alias: string;
    certificateSecretId: string;
    certificateSecretVersion: number;
    hostname: string;
}

export interface GetIntegrationIntegrationInstanceIdcsInfo {
    idcsAppDisplayName: string;
    idcsAppId: string;
    idcsAppLocationUrl: string;
    idcsAppName: string;
    instancePrimaryAudienceUrl: string;
}

export interface GetIntegrationIntegrationInstanceNetworkEndpointDetail {
    allowlistedHttpIps: string[];
    allowlistedHttpVcns: outputs.GetIntegrationIntegrationInstanceNetworkEndpointDetailAllowlistedHttpVcn[];
    isIntegrationVcnAllowlisted: boolean;
    networkEndpointType: string;
}

export interface GetIntegrationIntegrationInstanceNetworkEndpointDetailAllowlistedHttpVcn {
    allowlistedIps: string[];
    id: string;
}

export interface GetIntegrationIntegrationInstancePrivateEndpointOutboundConnection {
    nsgIds: string[];
    outboundConnectionType: string;
    subnetId: string;
}

export interface GetIntegrationIntegrationInstancesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetIntegrationIntegrationInstancesIntegrationInstance {
    alternateCustomEndpoints: outputs.GetIntegrationIntegrationInstancesIntegrationInstanceAlternateCustomEndpoint[];
    attachments: outputs.GetIntegrationIntegrationInstancesIntegrationInstanceAttachment[];
    compartmentId: string;
    consumptionModel: string;
    customEndpoints: outputs.GetIntegrationIntegrationInstancesIntegrationInstanceCustomEndpoint[];
    dataRetentionPeriod: string;
    definedTags: {[key: string]: string};
    displayName: string;
    domainId: string;
    enableProcessAutomationTrigger: number;
    extendDataRetentionTrigger: number;
    freeformTags: {[key: string]: string};
    id: string;
    idcsAt: string;
    idcsInfos: outputs.GetIntegrationIntegrationInstancesIntegrationInstanceIdcsInfo[];
    instanceUrl: string;
    integrationInstanceType: string;
    isByol: boolean;
    isFileServerEnabled: boolean;
    isVisualBuilderEnabled: boolean;
    messagePacks: number;
    networkEndpointDetails: outputs.GetIntegrationIntegrationInstancesIntegrationInstanceNetworkEndpointDetail[];
    privateEndpointOutboundConnections: outputs.GetIntegrationIntegrationInstancesIntegrationInstancePrivateEndpointOutboundConnection[];
    shape: string;
    state: string;
    stateMessage: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
}

export interface GetIntegrationIntegrationInstancesIntegrationInstanceAlternateCustomEndpoint {
    alias: string;
    certificateSecretId: string;
    certificateSecretVersion: number;
    hostname: string;
}

export interface GetIntegrationIntegrationInstancesIntegrationInstanceAttachment {
    isImplicit: boolean;
    targetId: string;
    targetInstanceUrl: string;
    targetRole: string;
    targetServiceType: string;
}

export interface GetIntegrationIntegrationInstancesIntegrationInstanceCustomEndpoint {
    alias: string;
    certificateSecretId: string;
    certificateSecretVersion: number;
    hostname: string;
}

export interface GetIntegrationIntegrationInstancesIntegrationInstanceIdcsInfo {
    idcsAppDisplayName: string;
    idcsAppId: string;
    idcsAppLocationUrl: string;
    idcsAppName: string;
    instancePrimaryAudienceUrl: string;
}

export interface GetIntegrationIntegrationInstancesIntegrationInstanceNetworkEndpointDetail {
    allowlistedHttpIps: string[];
    allowlistedHttpVcns: outputs.GetIntegrationIntegrationInstancesIntegrationInstanceNetworkEndpointDetailAllowlistedHttpVcn[];
    isIntegrationVcnAllowlisted: boolean;
    networkEndpointType: string;
}

export interface GetIntegrationIntegrationInstancesIntegrationInstanceNetworkEndpointDetailAllowlistedHttpVcn {
    allowlistedIps: string[];
    id: string;
}

export interface GetIntegrationIntegrationInstancesIntegrationInstancePrivateEndpointOutboundConnection {
    nsgIds: string[];
    outboundConnectionType: string;
    subnetId: string;
}

export interface GetJmsAgentInstallersAgentInstallerCollection {
    items: outputs.GetJmsAgentInstallersAgentInstallerCollectionItem[];
}

export interface GetJmsAgentInstallersAgentInstallerCollectionItem {
    agentInstallerDescription: string;
    agentInstallerId: string;
    agentInstallerVersion: string;
    agentVersion: string;
    approximateFileSizeInBytes: string;
    javaVersion: string;
    osFamily: string;
    packageType: string;
    platformArchitecture: string;
    sha256: string;
}

export interface GetJmsAgentInstallersFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetJmsAnnouncementsAnnouncementCollection {
    items: outputs.GetJmsAnnouncementsAnnouncementCollectionItem[];
}

export interface GetJmsAnnouncementsAnnouncementCollectionItem {
    key: number;
    summary: string;
    timeReleased: string;
    url: string;
}

export interface GetJmsAnnouncementsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetJmsFleetAdvancedFeatureConfigurationAdvancedUsageTracking {
    isEnabled: boolean;
}

export interface GetJmsFleetAdvancedFeatureConfigurationCryptoEventAnalysis {
    isEnabled: boolean;
    summarizedEventsLogs: outputs.GetJmsFleetAdvancedFeatureConfigurationCryptoEventAnalysisSummarizedEventsLog[];
}

export interface GetJmsFleetAdvancedFeatureConfigurationCryptoEventAnalysisSummarizedEventsLog {
    logGroupId: string;
    logId: string;
}

export interface GetJmsFleetAdvancedFeatureConfigurationJavaMigrationAnalysis {
    isEnabled: boolean;
}

export interface GetJmsFleetAdvancedFeatureConfigurationJfrRecording {
    isEnabled: boolean;
}

export interface GetJmsFleetAdvancedFeatureConfigurationLcm {
    isEnabled: boolean;
    postInstallationActions: outputs.GetJmsFleetAdvancedFeatureConfigurationLcmPostInstallationAction[];
}

export interface GetJmsFleetAdvancedFeatureConfigurationLcmPostInstallationAction {
    addLoggingHandler: boolean;
    disabledTlsVersions: string[];
    globalLoggingLevel: string;
    minimumKeySizeSettings: outputs.GetJmsFleetAdvancedFeatureConfigurationLcmPostInstallationActionMinimumKeySizeSetting[];
    proxies: outputs.GetJmsFleetAdvancedFeatureConfigurationLcmPostInstallationActionProxy[];
    shouldReplaceCertificatesOperatingSystem: boolean;
}

export interface GetJmsFleetAdvancedFeatureConfigurationLcmPostInstallationActionMinimumKeySizeSetting {
    certpaths: outputs.GetJmsFleetAdvancedFeatureConfigurationLcmPostInstallationActionMinimumKeySizeSettingCertpath[];
    jars: outputs.GetJmsFleetAdvancedFeatureConfigurationLcmPostInstallationActionMinimumKeySizeSettingJar[];
    tls: outputs.GetJmsFleetAdvancedFeatureConfigurationLcmPostInstallationActionMinimumKeySizeSettingTl[];
}

export interface GetJmsFleetAdvancedFeatureConfigurationLcmPostInstallationActionMinimumKeySizeSettingCertpath {
    keySize: number;
    name: string;
}

export interface GetJmsFleetAdvancedFeatureConfigurationLcmPostInstallationActionMinimumKeySizeSettingJar {
    keySize: number;
    name: string;
}

export interface GetJmsFleetAdvancedFeatureConfigurationLcmPostInstallationActionMinimumKeySizeSettingTl {
    keySize: number;
    name: string;
}

export interface GetJmsFleetAdvancedFeatureConfigurationLcmPostInstallationActionProxy {
    ftpProxyHost: string;
    ftpProxyPort: number;
    httpProxyHost: string;
    httpProxyPort: number;
    httpsProxyHost: string;
    httpsProxyPort: number;
    socksProxyHost: string;
    socksProxyPort: number;
    useSystemProxies: boolean;
}

export interface GetJmsFleetAdvancedFeatureConfigurationPerformanceTuningAnalysis {
    isEnabled: boolean;
}

export interface GetJmsFleetBlocklistsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetJmsFleetBlocklistsItem {
    key: string;
    operation: string;
    reason: string;
    targets: outputs.GetJmsFleetBlocklistsItemTarget[];
}

export interface GetJmsFleetBlocklistsItemTarget {
    fleetId: string;
    installationKey: string;
    managedInstanceId: string;
}

export interface GetJmsFleetCryptoAnalysisResultsCryptoAnalysisResultCollection {
    items: outputs.GetJmsFleetCryptoAnalysisResultsCryptoAnalysisResultCollectionItem[];
}

export interface GetJmsFleetCryptoAnalysisResultsCryptoAnalysisResultCollectionItem {
    aggregationMode: string;
    bucket: string;
    cryptoRoadmapVersion: string;
    findingCount: number;
    fleetId: string;
    hostName: string;
    id: string;
    managedInstanceId: string;
    namespace: string;
    nonCompliantFindingCount: number;
    object: string;
    summarizedEventCount: number;
    timeCreated: string;
    timeFinished: string;
    timeFirstEvent: string;
    timeLastEvent: string;
    timeStarted: string;
    totalEventCount: number;
    workRequestId: string;
}

export interface GetJmsFleetCryptoAnalysisResultsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetJmsFleetDiagnosesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetJmsFleetDiagnosesFleetDiagnosisCollection {
    items: outputs.GetJmsFleetDiagnosesFleetDiagnosisCollectionItem[];
}

export interface GetJmsFleetDiagnosesFleetDiagnosisCollectionItem {
    resourceDiagnosis: string;
    resourceId: string;
    resourceState: string;
    resourceType: string;
}

export interface GetJmsFleetDrsFilesDrsFileCollection {
    items: outputs.GetJmsFleetDrsFilesDrsFileCollectionItem[];
}

export interface GetJmsFleetDrsFilesDrsFileCollectionItem {
    bucket: string;
    checksumType: string;
    checksumValue: string;
    drsFileKey: string;
    drsFileName: string;
    fleetId: string;
    isDefault: boolean;
    namespace: string;
}

export interface GetJmsFleetDrsFilesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetJmsFleetInstallationSiteItem {
    approximateApplicationCount: number;
    blocklists: outputs.GetJmsFleetInstallationSiteItemBlocklist[];
    installationKey: string;
    jres: outputs.GetJmsFleetInstallationSiteItemJre[];
    managedInstanceId: string;
    operatingSystems: outputs.GetJmsFleetInstallationSiteItemOperatingSystem[];
    path: string;
    securityStatus: string;
    state: string;
    timeLastSeen: string;
}

export interface GetJmsFleetInstallationSiteItemBlocklist {
    operation: string;
    reason: string;
}

export interface GetJmsFleetInstallationSiteItemJre {
    distribution: string;
    jreKey: string;
    vendor: string;
    version: string;
}

export interface GetJmsFleetInstallationSiteItemOperatingSystem {
    architecture: string;
    family: string;
    managedInstanceCount: number;
    name: string;
    version: string;
}

export interface GetJmsFleetInstallationSitesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetJmsFleetInstallationSitesInstallationSiteCollection {
    items: outputs.GetJmsFleetInstallationSitesInstallationSiteCollectionItem[];
}

export interface GetJmsFleetInstallationSitesInstallationSiteCollectionItem {
    items: outputs.GetJmsFleetInstallationSitesInstallationSiteCollectionItemItem[];
}

export interface GetJmsFleetInstallationSitesInstallationSiteCollectionItemItem {
    approximateApplicationCount: number;
    blocklists: outputs.GetJmsFleetInstallationSitesInstallationSiteCollectionItemItemBlocklist[];
    installationKey: string;
    jres: outputs.GetJmsFleetInstallationSitesInstallationSiteCollectionItemItemJre[];
    managedInstanceId: string;
    operatingSystems: outputs.GetJmsFleetInstallationSitesInstallationSiteCollectionItemItemOperatingSystem[];
    path: string;
    securityStatus: string;
    state: string;
    timeLastSeen: string;
}

export interface GetJmsFleetInstallationSitesInstallationSiteCollectionItemItemBlocklist {
    operation: string;
    reason: string;
}

export interface GetJmsFleetInstallationSitesInstallationSiteCollectionItemItemJre {
    distribution: string;
    jreKey: string;
    vendor: string;
    version: string;
}

export interface GetJmsFleetInstallationSitesInstallationSiteCollectionItemItemOperatingSystem {
    architecture: string;
    family: string;
    managedInstanceCount: number;
    name: string;
    version: string;
}

export interface GetJmsFleetInventoryLog {
    logGroupId: string;
    logId: string;
}

export interface GetJmsFleetJavaMigrationAnalysisResultsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetJmsFleetJavaMigrationAnalysisResultsJavaMigrationAnalysisResultCollection {
    items: outputs.GetJmsFleetJavaMigrationAnalysisResultsJavaMigrationAnalysisResultCollectionItem[];
}

export interface GetJmsFleetJavaMigrationAnalysisResultsJavaMigrationAnalysisResultCollectionItem {
    applicationExecutionType: string;
    applicationKey: string;
    applicationName: string;
    applicationPath: string;
    bucket: string;
    fleetId: string;
    hostName: string;
    id: string;
    managedInstanceId: string;
    metadata: string;
    namespace: string;
    objectLists: string[];
    objectStorageUploadDirPath: string;
    sourceJdkVersion: string;
    targetJdkVersion: string;
    timeCreated: string;
    workRequestId: string;
}

export interface GetJmsFleetOperationLog {
    logGroupId: string;
    logId: string;
}

export interface GetJmsFleetPerformanceTuningAnalysisResultsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetJmsFleetPerformanceTuningAnalysisResultsPerformanceTuningAnalysisResultCollection {
    items: outputs.GetJmsFleetPerformanceTuningAnalysisResultsPerformanceTuningAnalysisResultCollectionItem[];
}

export interface GetJmsFleetPerformanceTuningAnalysisResultsPerformanceTuningAnalysisResultCollectionItem {
    applicationId: string;
    applicationInstallationId: string;
    applicationInstallationPath: string;
    applicationName: string;
    bucket: string;
    fleetId: string;
    hostName: string;
    id: string;
    managedInstanceId: string;
    namespace: string;
    object: string;
    result: string;
    timeCreated: string;
    timeFinished: string;
    timeStarted: string;
    warningCount: number;
    workRequestId: string;
}

export interface GetJmsFleetsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetJmsFleetsFleetCollection {
    items: outputs.GetJmsFleetsFleetCollectionItem[];
}

export interface GetJmsFleetsFleetCollectionItem {
    approximateApplicationCount: number;
    approximateInstallationCount: number;
    approximateJavaServerCount: number;
    approximateJreCount: number;
    approximateManagedInstanceCount: number;
    compartmentId: string;
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    inventoryLogs: outputs.GetJmsFleetsFleetCollectionItemInventoryLog[];
    isAdvancedFeaturesEnabled: boolean;
    isExportSettingEnabled: boolean;
    operationLogs: outputs.GetJmsFleetsFleetCollectionItemOperationLog[];
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
}

export interface GetJmsFleetsFleetCollectionItemInventoryLog {
    logGroupId: string;
    logId: string;
}

export interface GetJmsFleetsFleetCollectionItemOperationLog {
    logGroupId: string;
    logId: string;
}

export interface GetJmsJavaDownloadsJavaDownloadRecordsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetJmsJavaDownloadsJavaDownloadRecordsJavaDownloadRecordCollection {
    items: outputs.GetJmsJavaDownloadsJavaDownloadRecordsJavaDownloadRecordCollectionItem[];
}

export interface GetJmsJavaDownloadsJavaDownloadRecordsJavaDownloadRecordCollectionItem {
    architecture: string;
    downloadSourceId: string;
    downloadType: string;
    familyDisplayName: string;
    familyVersion: string;
    osFamily: string;
    packageType: string;
    packageTypeDetail: string;
    releaseVersion: string;
    timeDownloaded: string;
}

export interface GetJmsJavaDownloadsJavaDownloadReportCreatedBy {
    displayName: string;
    email: string;
    id: string;
}

export interface GetJmsJavaDownloadsJavaDownloadReportsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetJmsJavaDownloadsJavaDownloadReportsJavaDownloadReportCollection {
    items: outputs.GetJmsJavaDownloadsJavaDownloadReportsJavaDownloadReportCollectionItem[];
}

export interface GetJmsJavaDownloadsJavaDownloadReportsJavaDownloadReportCollectionItem {
    checksumType: string;
    checksumValue: string;
    compartmentId: string;
    createdBies: outputs.GetJmsJavaDownloadsJavaDownloadReportsJavaDownloadReportCollectionItemCreatedBy[];
    definedTags: {[key: string]: string};
    displayName: string;
    fileSizeInBytes: string;
    format: string;
    freeformTags: {[key: string]: string};
    id: string;
    sortBy: string;
    sortOrder: string;
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeEnd: string;
    timeStart: string;
}

export interface GetJmsJavaDownloadsJavaDownloadReportsJavaDownloadReportCollectionItemCreatedBy {
    displayName: string;
    email: string;
    id: string;
}

export interface GetJmsJavaDownloadsJavaDownloadTokenCreatedBy {
    displayName: string;
    email: string;
    id: string;
}

export interface GetJmsJavaDownloadsJavaDownloadTokenLastUpdatedBy {
    displayName: string;
    email: string;
    id: string;
}

export interface GetJmsJavaDownloadsJavaDownloadTokensFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetJmsJavaDownloadsJavaDownloadTokensJavaDownloadTokenCollection {
    items: outputs.GetJmsJavaDownloadsJavaDownloadTokensJavaDownloadTokenCollectionItem[];
}

export interface GetJmsJavaDownloadsJavaDownloadTokensJavaDownloadTokenCollectionItem {
    compartmentId: string;
    createdBies: outputs.GetJmsJavaDownloadsJavaDownloadTokensJavaDownloadTokenCollectionItemCreatedBy[];
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    isDefault: boolean;
    javaVersion: string;
    lastUpdatedBies: outputs.GetJmsJavaDownloadsJavaDownloadTokensJavaDownloadTokenCollectionItemLastUpdatedBy[];
    licenseTypes: string[];
    lifecycleDetails: string;
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeExpires: string;
    timeLastUsed: string;
    timeUpdated: string;
    value: string;
}

export interface GetJmsJavaDownloadsJavaDownloadTokensJavaDownloadTokenCollectionItemCreatedBy {
    displayName: string;
    email: string;
    id: string;
}

export interface GetJmsJavaDownloadsJavaDownloadTokensJavaDownloadTokenCollectionItemLastUpdatedBy {
    displayName: string;
    email: string;
    id: string;
}

export interface GetJmsJavaDownloadsJavaLicenseAcceptanceRecordCreatedBy {
    displayName: string;
    email: string;
    id: string;
}

export interface GetJmsJavaDownloadsJavaLicenseAcceptanceRecordLastUpdatedBy {
    displayName: string;
    email: string;
    id: string;
}

export interface GetJmsJavaDownloadsJavaLicenseAcceptanceRecordsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetJmsJavaDownloadsJavaLicenseAcceptanceRecordsJavaLicenseAcceptanceRecordCollection {
    items: outputs.GetJmsJavaDownloadsJavaLicenseAcceptanceRecordsJavaLicenseAcceptanceRecordCollectionItem[];
}

export interface GetJmsJavaDownloadsJavaLicenseAcceptanceRecordsJavaLicenseAcceptanceRecordCollectionItem {
    compartmentId: string;
    createdBies: outputs.GetJmsJavaDownloadsJavaLicenseAcceptanceRecordsJavaLicenseAcceptanceRecordCollectionItemCreatedBy[];
    definedTags: {[key: string]: string};
    freeformTags: {[key: string]: string};
    id: string;
    lastUpdatedBies: outputs.GetJmsJavaDownloadsJavaLicenseAcceptanceRecordsJavaLicenseAcceptanceRecordCollectionItemLastUpdatedBy[];
    licenseAcceptanceStatus: string;
    licenseType: string;
    state: string;
    systemTags: {[key: string]: string};
    timeAccepted: string;
    timeLastUpdated: string;
}

export interface GetJmsJavaDownloadsJavaLicenseAcceptanceRecordsJavaLicenseAcceptanceRecordCollectionItemCreatedBy {
    displayName: string;
    email: string;
    id: string;
}

export interface GetJmsJavaDownloadsJavaLicenseAcceptanceRecordsJavaLicenseAcceptanceRecordCollectionItemLastUpdatedBy {
    displayName: string;
    email: string;
    id: string;
}

export interface GetJmsJavaDownloadsJavaLicensesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetJmsJavaDownloadsJavaLicensesJavaLicenseCollection {
    items: outputs.GetJmsJavaDownloadsJavaLicensesJavaLicenseCollectionItem[];
}

export interface GetJmsJavaDownloadsJavaLicensesJavaLicenseCollectionItem {
    displayName: string;
    licenseType: string;
    licenseUrl: string;
}

export interface GetJmsJavaFamiliesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetJmsJavaFamiliesJavaFamilyCollection {
    items: outputs.GetJmsJavaFamiliesJavaFamilyCollectionItem[];
}

export interface GetJmsJavaFamiliesJavaFamilyCollectionItem {
    displayName: string;
    docUrl: string;
    endOfSupportLifeDate: string;
    familyVersion: string;
    isSupportedVersion: boolean;
    latestReleaseArtifacts: outputs.GetJmsJavaFamiliesJavaFamilyCollectionItemLatestReleaseArtifact[];
    latestReleaseVersion: string;
    releaseDate: string;
    supportType: string;
}

export interface GetJmsJavaFamiliesJavaFamilyCollectionItemLatestReleaseArtifact {
    approximateFileSizeInBytes: string;
    architecture: string;
    artifactContentType: string;
    artifactDescription: string;
    artifactFileName: string;
    artifactId: string;
    downloadUrl: string;
    osFamily: string;
    packageType: string;
    packageTypeDetail: string;
    scriptChecksumUrl: string;
    scriptDownloadUrl: string;
    sha256: string;
}

export interface GetJmsJavaFamilyLatestReleaseArtifact {
    approximateFileSizeInBytes: string;
    architecture: string;
    artifactContentType: string;
    artifactDescription: string;
    artifactFileName: string;
    artifactId: string;
    downloadUrl: string;
    osFamily: string;
    packageType: string;
    packageTypeDetail: string;
    scriptChecksumUrl: string;
    scriptDownloadUrl: string;
    sha256: string;
}

export interface GetJmsJavaReleaseArtifact {
    approximateFileSizeInBytes: string;
    architecture: string;
    artifactContentType: string;
    artifactDescription: string;
    artifactFileName: string;
    artifactId: string;
    downloadUrl: string;
    osFamily: string;
    packageType: string;
    packageTypeDetail: string;
    scriptChecksumUrl: string;
    scriptDownloadUrl: string;
    sha256: string;
}

export interface GetJmsJavaReleaseFamilyDetail {
    displayName: string;
    docUrl: string;
    endOfSupportLifeDate: string;
    familyVersion: string;
    isSupportedVersion: boolean;
    latestReleaseArtifacts: outputs.GetJmsJavaReleaseFamilyDetailLatestReleaseArtifact[];
    latestReleaseVersion: string;
    releaseDate: string;
    supportType: string;
}

export interface GetJmsJavaReleaseFamilyDetailLatestReleaseArtifact {
    approximateFileSizeInBytes: string;
    architecture: string;
    artifactContentType: string;
    artifactDescription: string;
    artifactFileName: string;
    artifactId: string;
    downloadUrl: string;
    osFamily: string;
    packageType: string;
    packageTypeDetail: string;
    scriptChecksumUrl: string;
    scriptDownloadUrl: string;
    sha256: string;
}

export interface GetJmsJavaReleaseLicenseDetail {
    displayName: string;
    licenseType: string;
    licenseUrl: string;
}

export interface GetJmsJavaReleaseMosPatch {
    displayName: string;
    patchUrl: string;
}

export interface GetJmsJavaReleasesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetJmsJavaReleasesJavaReleaseCollection {
    items: outputs.GetJmsJavaReleasesJavaReleaseCollectionItem[];
}

export interface GetJmsJavaReleasesJavaReleaseCollectionItem {
    artifactContentTypes: string[];
    artifacts: outputs.GetJmsJavaReleasesJavaReleaseCollectionItemArtifact[];
    daysUnderSecurityBaseline: number;
    familyDetails: outputs.GetJmsJavaReleasesJavaReleaseCollectionItemFamilyDetail[];
    familyVersion: string;
    licenseDetails: outputs.GetJmsJavaReleasesJavaReleaseCollectionItemLicenseDetail[];
    licenseType: string;
    mosPatches: outputs.GetJmsJavaReleasesJavaReleaseCollectionItemMosPatch[];
    parentReleaseVersion: string;
    releaseDate: string;
    releaseNotesUrl: string;
    releaseType: string;
    releaseVersion: string;
    securityStatus: string;
}

export interface GetJmsJavaReleasesJavaReleaseCollectionItemArtifact {
    approximateFileSizeInBytes: string;
    architecture: string;
    artifactContentType: string;
    artifactDescription: string;
    artifactFileName: string;
    artifactId: string;
    downloadUrl: string;
    osFamily: string;
    packageType: string;
    packageTypeDetail: string;
    scriptChecksumUrl: string;
    scriptDownloadUrl: string;
    sha256: string;
}

export interface GetJmsJavaReleasesJavaReleaseCollectionItemFamilyDetail {
    displayName: string;
    docUrl: string;
    endOfSupportLifeDate: string;
    familyVersion: string;
    isSupportedVersion: boolean;
    latestReleaseArtifacts: outputs.GetJmsJavaReleasesJavaReleaseCollectionItemFamilyDetailLatestReleaseArtifact[];
    latestReleaseVersion: string;
    releaseDate: string;
    supportType: string;
}

export interface GetJmsJavaReleasesJavaReleaseCollectionItemFamilyDetailLatestReleaseArtifact {
    approximateFileSizeInBytes: string;
    architecture: string;
    artifactContentType: string;
    artifactDescription: string;
    artifactFileName: string;
    artifactId: string;
    downloadUrl: string;
    osFamily: string;
    packageType: string;
    packageTypeDetail: string;
    scriptChecksumUrl: string;
    scriptDownloadUrl: string;
    sha256: string;
}

export interface GetJmsJavaReleasesJavaReleaseCollectionItemLicenseDetail {
    displayName: string;
    licenseType: string;
    licenseUrl: string;
}

export interface GetJmsJavaReleasesJavaReleaseCollectionItemMosPatch {
    displayName: string;
    patchUrl: string;
}

export interface GetJmsJmsPluginsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetJmsJmsPluginsJmsPluginCollection {
    items: outputs.GetJmsJmsPluginsJmsPluginCollectionItem[];
}

export interface GetJmsJmsPluginsJmsPluginCollectionItem {
    agentId: string;
    agentType: string;
    availabilityStatus: string;
    compartmentId: string;
    definedTags: {[key: string]: string};
    fleetId: string;
    freeformTags: {[key: string]: string};
    hostname: string;
    id: string;
    osArchitecture: string;
    osDistribution: string;
    osFamily: string;
    pluginVersion: string;
    state: string;
    systemTags: {[key: string]: string};
    timeLastSeen: string;
    timeRegistered: string;
}

export interface GetJmsListJreUsageItem {
    approximateApplicationCount: number;
    approximateInstallationCount: number;
    approximateManagedInstanceCount: number;
    approximatePendingWorkRequestCount: number;
    daysUnderSecurityBaseline: number;
    distribution: string;
    endOfSupportLifeDate: string;
    fleetId: string;
    id: string;
    managedInstanceId: string;
    operatingSystems: outputs.GetJmsListJreUsageItemOperatingSystem[];
    releaseDate: string;
    securityStatus: string;
    timeEnd: string;
    timeFirstSeen: string;
    timeLastSeen: string;
    timeStart: string;
    vendor: string;
    version: string;
}

export interface GetJmsListJreUsageItemOperatingSystem {
    architecture: string;
    family: string;
    managedInstanceCount: number;
    name: string;
    version: string;
}

export interface GetKmsEkmsPrivateEndpointsEkmsPrivateEndpoint {
    caBundle: string;
    compartmentId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    externalKeyManagerIp: string;
    freeformTags: {[key: string]: string};
    id: string;
    lifecycleDetails: string;
    port: number;
    privateEndpointIp: string;
    state: string;
    subnetId: string;
    timeCreated: string;
    timeUpdated: string;
}

export interface GetKmsEkmsPrivateEndpointsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetKmsKeyAutoKeyRotationDetail {
    lastRotationMessage: string;
    lastRotationStatus: string;
    rotationIntervalInDays: number;
    timeOfLastRotation: string;
    timeOfNextRotation: string;
    timeOfScheduleStart: string;
}

export interface GetKmsKeyExternalKeyReference {
    externalKeyId: string;
}

export interface GetKmsKeyExternalKeyReferenceDetail {
    externalKeyId: string;
    externalKeyVersionId: string;
}

export interface GetKmsKeyKeyShape {
    algorithm: string;
    curveId: string;
    length: number;
}

export interface GetKmsKeyReplicaDetail {
    replicationId: string;
}

export interface GetKmsKeyRestoreFromFile {
    contentLength: string;
    contentMd5: string;
    restoreKeyFromFileDetails: string;
}

export interface GetKmsKeyRestoreFromObjectStore {
    bucket: string;
    destination: string;
    namespace: string;
    object: string;
    uri: string;
}

export interface GetKmsKeyVersionExternalKeyReferenceDetail {
    externalKeyId: string;
    externalKeyVersionId: string;
}

export interface GetKmsKeyVersionReplicaDetail {
    replicationId: string;
}

export interface GetKmsKeyVersionsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetKmsKeyVersionsKeyVersion {
    compartmentId: string;
    externalKeyReferenceDetails: outputs.GetKmsKeyVersionsKeyVersionExternalKeyReferenceDetail[];
    externalKeyVersionId: string;
    id: string;
    isAutoRotated: boolean;
    isPrimary: boolean;
    keyId: string;
    keyVersionId: string;
    managementEndpoint: string;
    publicKey: string;
    replicaDetails: outputs.GetKmsKeyVersionsKeyVersionReplicaDetail[];
    restoredFromKeyId: string;
    restoredFromKeyVersionId: string;
    state: string;
    timeCreated: string;
    timeOfDeletion: string;
    vaultId: string;
}

export interface GetKmsKeyVersionsKeyVersionExternalKeyReferenceDetail {
    externalKeyId: string;
    externalKeyVersionId: string;
}

export interface GetKmsKeyVersionsKeyVersionReplicaDetail {
    replicationId: string;
}

export interface GetKmsKeysFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetKmsKeysKey {
    autoKeyRotationDetails: outputs.GetKmsKeysKeyAutoKeyRotationDetail[];
    compartmentId: string;
    currentKeyVersion: string;
    definedTags: {[key: string]: string};
    desiredState: string;
    displayName: string;
    externalKeyReferenceDetails: outputs.GetKmsKeysKeyExternalKeyReferenceDetail[];
    externalKeyReferences: outputs.GetKmsKeysKeyExternalKeyReference[];
    freeformTags: {[key: string]: string};
    id: string;
    isAutoRotationEnabled: boolean;
    isPrimary: boolean;
    keyShapes: outputs.GetKmsKeysKeyKeyShape[];
    managementEndpoint: string;
    protectionMode: string;
    replicaDetails: outputs.GetKmsKeysKeyReplicaDetail[];
    restoreFromFiles: outputs.GetKmsKeysKeyRestoreFromFile[];
    restoreFromObjectStores: outputs.GetKmsKeysKeyRestoreFromObjectStore[];
    restoreTrigger: boolean;
    restoredFromKeyId: string;
    state: string;
    timeCreated: string;
    timeOfDeletion: string;
    vaultId: string;
}

export interface GetKmsKeysKeyAutoKeyRotationDetail {
    lastRotationMessage: string;
    lastRotationStatus: string;
    rotationIntervalInDays: number;
    timeOfLastRotation: string;
    timeOfNextRotation: string;
    timeOfScheduleStart: string;
}

export interface GetKmsKeysKeyExternalKeyReference {
    externalKeyId: string;
}

export interface GetKmsKeysKeyExternalKeyReferenceDetail {
    externalKeyId: string;
    externalKeyVersionId: string;
}

export interface GetKmsKeysKeyKeyShape {
    algorithm: string;
    curveId: string;
    length: number;
}

export interface GetKmsKeysKeyReplicaDetail {
    replicationId: string;
}

export interface GetKmsKeysKeyRestoreFromFile {
    contentLength: string;
    contentMd5: string;
    restoreKeyFromFileDetails: string;
}

export interface GetKmsKeysKeyRestoreFromObjectStore {
    bucket: string;
    destination: string;
    namespace: string;
    object: string;
    uri: string;
}

export interface GetKmsReplicationStatusReplicaDetail {
    region: string;
    status: string;
}

export interface GetKmsVaultExternalKeyManagerMetadata {
    externalVaultEndpointUrl: string;
    oauthMetadatas: outputs.GetKmsVaultExternalKeyManagerMetadataOauthMetadata[];
    privateEndpointId: string;
}

export interface GetKmsVaultExternalKeyManagerMetadataOauthMetadata {
    clientAppId: string;
    clientAppSecret: string;
    idcsAccountNameUrl: string;
}

export interface GetKmsVaultExternalKeyManagerMetadataSummary {
    externalVaultEndpointUrl: string;
    oauthMetadataSummaries: outputs.GetKmsVaultExternalKeyManagerMetadataSummaryOauthMetadataSummary[];
    privateEndpointId: string;
    vendor: string;
}

export interface GetKmsVaultExternalKeyManagerMetadataSummaryOauthMetadataSummary {
    clientAppId: string;
    idcsAccountNameUrl: string;
}

export interface GetKmsVaultReplicaDetail {
    replicationId: string;
}

export interface GetKmsVaultReplicasFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetKmsVaultReplicasVaultReplica {
    cryptoEndpoint: string;
    managementEndpoint: string;
    region: string;
    status: string;
}

export interface GetKmsVaultRestoreFromFile {
    contentLength: string;
    contentMd5: string;
    restoreVaultFromFileDetails: string;
}

export interface GetKmsVaultRestoreFromObjectStore {
    bucket: string;
    destination: string;
    namespace: string;
    object: string;
    uri: string;
}

export interface GetKmsVaultsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetKmsVaultsVault {
    compartmentId: string;
    cryptoEndpoint: string;
    definedTags: {[key: string]: string};
    displayName: string;
    externalKeyManagerMetadataSummaries: outputs.GetKmsVaultsVaultExternalKeyManagerMetadataSummary[];
    externalKeyManagerMetadatas: outputs.GetKmsVaultsVaultExternalKeyManagerMetadata[];
    freeformTags: {[key: string]: string};
    id: string;
    isPrimary: boolean;
    isVaultReplicable: boolean;
    managementEndpoint: string;
    replicaDetails: outputs.GetKmsVaultsVaultReplicaDetail[];
    restoreFromFiles: outputs.GetKmsVaultsVaultRestoreFromFile[];
    restoreFromObjectStores: outputs.GetKmsVaultsVaultRestoreFromObjectStore[];
    restoreTrigger: boolean;
    restoredFromVaultId: string;
    state: string;
    timeCreated: string;
    timeOfDeletion: string;
    vaultType: string;
}

export interface GetKmsVaultsVaultExternalKeyManagerMetadata {
    externalVaultEndpointUrl: string;
    oauthMetadatas: outputs.GetKmsVaultsVaultExternalKeyManagerMetadataOauthMetadata[];
    privateEndpointId: string;
}

export interface GetKmsVaultsVaultExternalKeyManagerMetadataOauthMetadata {
    clientAppId: string;
    clientAppSecret: string;
    idcsAccountNameUrl: string;
}

export interface GetKmsVaultsVaultExternalKeyManagerMetadataSummary {
    externalVaultEndpointUrl: string;
    oauthMetadataSummaries: outputs.GetKmsVaultsVaultExternalKeyManagerMetadataSummaryOauthMetadataSummary[];
    privateEndpointId: string;
    vendor: string;
}

export interface GetKmsVaultsVaultExternalKeyManagerMetadataSummaryOauthMetadataSummary {
    clientAppId: string;
    idcsAccountNameUrl: string;
}

export interface GetKmsVaultsVaultReplicaDetail {
    replicationId: string;
}

export interface GetKmsVaultsVaultRestoreFromFile {
    contentLength: string;
    contentMd5: string;
    restoreVaultFromFileDetails: string;
}

export interface GetKmsVaultsVaultRestoreFromObjectStore {
    bucket: string;
    destination: string;
    namespace: string;
    object: string;
    uri: string;
}

export interface GetLicenseManagerLicenseRecordsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetLicenseManagerLicenseRecordsLicenseRecordCollection {
    items: outputs.GetLicenseManagerLicenseRecordsLicenseRecordCollectionItem[];
}

export interface GetLicenseManagerLicenseRecordsLicenseRecordCollectionItem {
    compartmentId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    expirationDate: string;
    freeformTags: {[key: string]: string};
    id: string;
    isPerpetual: boolean;
    isUnlimited: boolean;
    licenseCount: number;
    licenseUnit: string;
    productId: string;
    productLicense: string;
    productLicenseId: string;
    state: string;
    supportEndDate: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
}

export interface GetLicenseManagerProductLicenseConsumersItem {
    areAllOptionsAvailable: boolean;
    isBaseLicenseAvailable: boolean;
    licenseUnitType: string;
    licenseUnitsConsumed: number;
    missingProducts: outputs.GetLicenseManagerProductLicenseConsumersItemMissingProduct[];
    productName: string;
    resourceCompartmentId: string;
    resourceCompartmentName: string;
    resourceId: string;
    resourceName: string;
    resourceUnitCount: number;
    resourceUnitType: string;
}

export interface GetLicenseManagerProductLicenseConsumersItemMissingProduct {
    category: string;
    count: number;
    name: string;
}

export interface GetLicenseManagerProductLicenseImage {
    id: string;
    listingId: string;
    listingName: string;
    packageVersion: string;
    publisher: string;
}

export interface GetLicenseManagerProductLicensesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetLicenseManagerProductLicensesProductLicenseCollection {
    items: outputs.GetLicenseManagerProductLicensesProductLicenseCollectionItem[];
}

export interface GetLicenseManagerProductLicensesProductLicenseCollectionItem {
    activeLicenseRecordCount: number;
    compartmentId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    images: outputs.GetLicenseManagerProductLicensesProductLicenseCollectionItemImage[];
    isOverSubscribed: boolean;
    isUnlimited: boolean;
    isVendorOracle: boolean;
    licenseUnit: string;
    state: string;
    status: string;
    statusDescription: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
    totalActiveLicenseUnitCount: number;
    totalLicenseRecordCount: number;
    totalLicenseUnitsConsumed: number;
    vendorName: string;
}

export interface GetLicenseManagerProductLicensesProductLicenseCollectionItemImage {
    id: string;
    listingId: string;
    listingName: string;
    packageVersion: string;
    publisher: string;
}

export interface GetLicenseManagerTopUtilizedProductLicensesItem {
    isUnlimited: boolean;
    productLicenseId: string;
    productType: string;
    status: string;
    totalLicenseUnitCount: number;
    totalUnitsConsumed: number;
    unitType: string;
}

export interface GetLicenseManagerTopUtilizedResourcesItem {
    resourceCompartmentId: string;
    resourceCompartmentName: string;
    resourceId: string;
    resourceName: string;
    totalUnits: number;
    unitType: string;
}

export interface GetLimitsLimitDefinitionsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetLimitsLimitDefinitionsLimitDefinition {
    areQuotasSupported: boolean;
    description: string;
    isDeprecated: boolean;
    isDynamic: boolean;
    isEligibleForLimitIncrease: boolean;
    isResourceAvailabilitySupported: boolean;
    name: string;
    scopeType: string;
    serviceName: string;
    supportedQuotaFamilies: string[];
    supportedSubscriptions: string[];
}

export interface GetLimitsLimitValuesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetLimitsLimitValuesLimitValue {
    availabilityDomain: string;
    name: string;
    scopeType: string;
    value: string;
}

export interface GetLimitsQuotaLock {
    message: string;
    relatedResourceId: string;
    timeCreated: string;
    type: string;
}

export interface GetLimitsQuotasFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetLimitsQuotasQuota {
    compartmentId: string;
    definedTags: {[key: string]: string};
    description: string;
    freeformTags: {[key: string]: string};
    id: string;
    isLockOverride: boolean;
    locks: outputs.GetLimitsQuotasQuotaLock[];
    name: string;
    state: string;
    statements: string[];
    timeCreated: string;
}

export interface GetLimitsQuotasQuotaLock {
    message: string;
    relatedResourceId: string;
    timeCreated: string;
    type: string;
}

export interface GetLimitsServicesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetLimitsServicesService {
    description: string;
    name: string;
    supportedSubscriptions: string[];
}

export interface GetLoadBalancerBackendHealthHealthCheckResult {
    healthCheckStatus: string;
    sourceIpAddress: string;
    subnetId: string;
    timestamp: string;
}

export interface GetLoadBalancerBackendSetsBackendset {
    backendMaxConnections: number;
    backends: outputs.GetLoadBalancerBackendSetsBackendsetBackend[];
    healthCheckers: outputs.GetLoadBalancerBackendSetsBackendsetHealthChecker[];
    id: string;
    lbCookieSessionPersistenceConfigurations: outputs.GetLoadBalancerBackendSetsBackendsetLbCookieSessionPersistenceConfiguration[];
    loadBalancerId: string;
    name: string;
    policy: string;
    sessionPersistenceConfigurations: outputs.GetLoadBalancerBackendSetsBackendsetSessionPersistenceConfiguration[];
    sslConfigurations: outputs.GetLoadBalancerBackendSetsBackendsetSslConfiguration[];
    state: string;
}

export interface GetLoadBalancerBackendSetsBackendsetBackend {
    backup: boolean;
    drain: boolean;
    ipAddress: string;
    maxConnections: number;
    name: string;
    offline: boolean;
    port: number;
    weight: number;
}

export interface GetLoadBalancerBackendSetsBackendsetHealthChecker {
    intervalMs: number;
    isForcePlainText: boolean;
    port: number;
    protocol: string;
    responseBodyRegex: string;
    retries: number;
    returnCode: number;
    timeoutInMillis: number;
    urlPath: string;
}

export interface GetLoadBalancerBackendSetsBackendsetLbCookieSessionPersistenceConfiguration {
    cookieName: string;
    disableFallback: boolean;
    domain: string;
    isHttpOnly: boolean;
    isSecure: boolean;
    maxAgeInSeconds: number;
    path: string;
}

export interface GetLoadBalancerBackendSetsBackendsetSessionPersistenceConfiguration {
    cookieName: string;
    disableFallback: boolean;
}

export interface GetLoadBalancerBackendSetsBackendsetSslConfiguration {
    certificateIds: string[];
    certificateName: string;
    cipherSuiteName: string;
    protocols: string[];
    serverOrderPreference: string;
    trustedCertificateAuthorityIds: string[];
    verifyDepth: number;
    verifyPeerCertificate: boolean;
}

export interface GetLoadBalancerBackendSetsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetLoadBalancerBackendsBackend {
    backendsetName: string;
    backup: boolean;
    drain: boolean;
    ipAddress: string;
    loadBalancerId: string;
    maxConnections: number;
    name: string;
    offline: boolean;
    port: number;
    state: string;
    weight: number;
}

export interface GetLoadBalancerBackendsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetLoadBalancerBackendsetsBackendset {
    backendMaxConnections: number;
    backends: outputs.GetLoadBalancerBackendsetsBackendsetBackend[];
    healthCheckers: outputs.GetLoadBalancerBackendsetsBackendsetHealthChecker[];
    id: string;
    lbCookieSessionPersistenceConfigurations: outputs.GetLoadBalancerBackendsetsBackendsetLbCookieSessionPersistenceConfiguration[];
    loadBalancerId: string;
    name: string;
    policy: string;
    sessionPersistenceConfigurations: outputs.GetLoadBalancerBackendsetsBackendsetSessionPersistenceConfiguration[];
    sslConfigurations: outputs.GetLoadBalancerBackendsetsBackendsetSslConfiguration[];
    state: string;
}

export interface GetLoadBalancerBackendsetsBackendsetBackend {
    backup: boolean;
    drain: boolean;
    ipAddress: string;
    maxConnections: number;
    name: string;
    offline: boolean;
    port: number;
    weight: number;
}

export interface GetLoadBalancerBackendsetsBackendsetHealthChecker {
    intervalMs: number;
    isForcePlainText: boolean;
    port: number;
    protocol: string;
    responseBodyRegex: string;
    retries: number;
    returnCode: number;
    timeoutInMillis: number;
    urlPath: string;
}

export interface GetLoadBalancerBackendsetsBackendsetLbCookieSessionPersistenceConfiguration {
    cookieName: string;
    disableFallback: boolean;
    domain: string;
    isHttpOnly: boolean;
    isSecure: boolean;
    maxAgeInSeconds: number;
    path: string;
}

export interface GetLoadBalancerBackendsetsBackendsetSessionPersistenceConfiguration {
    cookieName: string;
    disableFallback: boolean;
}

export interface GetLoadBalancerBackendsetsBackendsetSslConfiguration {
    certificateIds: string[];
    certificateName: string;
    cipherSuiteName: string;
    protocols: string[];
    serverOrderPreference: string;
    trustedCertificateAuthorityIds: string[];
    verifyDepth: number;
    verifyPeerCertificate: boolean;
}

export interface GetLoadBalancerBackendsetsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetLoadBalancerCertificatesCertificate {
    caCertificate: string;
    certificateName: string;
    loadBalancerId: string;
    passphrase: string;
    privateKey: string;
    publicCertificate: string;
    state: string;
}

export interface GetLoadBalancerCertificatesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetLoadBalancerHostnamesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetLoadBalancerHostnamesHostname {
    hostname: string;
    loadBalancerId: string;
    name: string;
    state: string;
}

export interface GetLoadBalancerListenerRulesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetLoadBalancerListenerRulesListenerRule {
    name: string;
    rules: outputs.GetLoadBalancerListenerRulesListenerRuleRule[];
    state: string;
}

export interface GetLoadBalancerListenerRulesListenerRuleRule {
    action: string;
    allowedMethods: string[];
    areInvalidCharactersAllowed: boolean;
    conditions: outputs.GetLoadBalancerListenerRulesListenerRuleRuleCondition[];
    defaultMaxConnections: number;
    description: string;
    header: string;
    httpLargeHeaderSizeInKb: number;
    ipMaxConnections: outputs.GetLoadBalancerListenerRulesListenerRuleRuleIpMaxConnection[];
    prefix: string;
    redirectUris: outputs.GetLoadBalancerListenerRulesListenerRuleRuleRedirectUri[];
    responseCode: number;
    statusCode: number;
    suffix: string;
    value: string;
}

export interface GetLoadBalancerListenerRulesListenerRuleRuleCondition {
    attributeName: string;
    attributeValue: string;
    operator: string;
}

export interface GetLoadBalancerListenerRulesListenerRuleRuleIpMaxConnection {
    ipAddresses: string[];
    maxConnections: number;
}

export interface GetLoadBalancerListenerRulesListenerRuleRuleRedirectUri {
    host: string;
    path: string;
    port: number;
    protocol: string;
    query: string;
}

export interface GetLoadBalancerLoadBalancerRoutingPoliciesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetLoadBalancerLoadBalancerRoutingPoliciesRoutingPolicy {
    conditionLanguageVersion: string;
    loadBalancerId: string;
    name: string;
    rules: outputs.GetLoadBalancerLoadBalancerRoutingPoliciesRoutingPolicyRule[];
    state: string;
}

export interface GetLoadBalancerLoadBalancerRoutingPoliciesRoutingPolicyRule {
    actions: outputs.GetLoadBalancerLoadBalancerRoutingPoliciesRoutingPolicyRuleAction[];
    condition: string;
    name: string;
}

export interface GetLoadBalancerLoadBalancerRoutingPoliciesRoutingPolicyRuleAction {
    backendSetName: string;
    name: string;
}

export interface GetLoadBalancerLoadBalancerRoutingPolicyRule {
    actions: outputs.GetLoadBalancerLoadBalancerRoutingPolicyRuleAction[];
    condition: string;
    name: string;
}

export interface GetLoadBalancerLoadBalancerRoutingPolicyRuleAction {
    backendSetName: string;
    name: string;
}

export interface GetLoadBalancerLoadBalancersFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetLoadBalancerLoadBalancersLoadBalancer {
    compartmentId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    ipAddressDetails: outputs.GetLoadBalancerLoadBalancersLoadBalancerIpAddressDetail[];
    ipAddresses: string[];
    ipMode: string;
    isDeleteProtectionEnabled: boolean;
    isPrivate: boolean;
    isRequestIdEnabled: boolean;
    networkSecurityGroupIds: string[];
    requestIdHeader: string;
    reservedIps: outputs.GetLoadBalancerLoadBalancersLoadBalancerReservedIp[];
    shape: string;
    shapeDetails: outputs.GetLoadBalancerLoadBalancersLoadBalancerShapeDetail[];
    state: string;
    subnetIds: string[];
    systemTags: {[key: string]: string};
    timeCreated: string;
}

export interface GetLoadBalancerLoadBalancersLoadBalancerIpAddressDetail {
    ipAddress: string;
    isPublic: boolean;
    reservedIps: outputs.GetLoadBalancerLoadBalancersLoadBalancerIpAddressDetailReservedIp[];
}

export interface GetLoadBalancerLoadBalancersLoadBalancerIpAddressDetailReservedIp {
    id: string;
}

export interface GetLoadBalancerLoadBalancersLoadBalancerReservedIp {
    id: string;
}

export interface GetLoadBalancerLoadBalancersLoadBalancerShapeDetail {
    maximumBandwidthInMbps: number;
    minimumBandwidthInMbps: number;
}

export interface GetLoadBalancerPathRouteSetsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetLoadBalancerPathRouteSetsPathRouteSet {
    loadBalancerId: string;
    name: string;
    pathRoutes: outputs.GetLoadBalancerPathRouteSetsPathRouteSetPathRoute[];
    state: string;
}

export interface GetLoadBalancerPathRouteSetsPathRouteSetPathRoute {
    backendSetName: string;
    path: string;
    pathMatchTypes: outputs.GetLoadBalancerPathRouteSetsPathRouteSetPathRoutePathMatchType[];
}

export interface GetLoadBalancerPathRouteSetsPathRouteSetPathRoutePathMatchType {
    matchType: string;
}

export interface GetLoadBalancerPoliciesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetLoadBalancerPoliciesPolicy {
    name: string;
}

export interface GetLoadBalancerProtocolsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetLoadBalancerProtocolsProtocol {
    name: string;
}

export interface GetLoadBalancerRuleSetItem {
    action: string;
    allowedMethods: string[];
    areInvalidCharactersAllowed: boolean;
    conditions: outputs.GetLoadBalancerRuleSetItemCondition[];
    defaultMaxConnections: number;
    description: string;
    header: string;
    httpLargeHeaderSizeInKb: number;
    ipMaxConnections: outputs.GetLoadBalancerRuleSetItemIpMaxConnection[];
    prefix: string;
    redirectUris: outputs.GetLoadBalancerRuleSetItemRedirectUri[];
    responseCode: number;
    statusCode: number;
    suffix: string;
    value: string;
}

export interface GetLoadBalancerRuleSetItemCondition {
    attributeName: string;
    attributeValue: string;
    operator: string;
}

export interface GetLoadBalancerRuleSetItemIpMaxConnection {
    ipAddresses: string[];
    maxConnections: number;
}

export interface GetLoadBalancerRuleSetItemRedirectUri {
    host: string;
    path: string;
    port: number;
    protocol: string;
    query: string;
}

export interface GetLoadBalancerRuleSetsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetLoadBalancerRuleSetsRuleSet {
    id: string;
    items: outputs.GetLoadBalancerRuleSetsRuleSetItem[];
    loadBalancerId: string;
    name: string;
    state: string;
}

export interface GetLoadBalancerRuleSetsRuleSetItem {
    action: string;
    allowedMethods: string[];
    areInvalidCharactersAllowed: boolean;
    conditions: outputs.GetLoadBalancerRuleSetsRuleSetItemCondition[];
    defaultMaxConnections: number;
    description: string;
    header: string;
    httpLargeHeaderSizeInKb: number;
    ipMaxConnections: outputs.GetLoadBalancerRuleSetsRuleSetItemIpMaxConnection[];
    prefix: string;
    redirectUris: outputs.GetLoadBalancerRuleSetsRuleSetItemRedirectUri[];
    responseCode: number;
    statusCode: number;
    suffix: string;
    value: string;
}

export interface GetLoadBalancerRuleSetsRuleSetItemCondition {
    attributeName: string;
    attributeValue: string;
    operator: string;
}

export interface GetLoadBalancerRuleSetsRuleSetItemIpMaxConnection {
    ipAddresses: string[];
    maxConnections: number;
}

export interface GetLoadBalancerRuleSetsRuleSetItemRedirectUri {
    host: string;
    path: string;
    port: number;
    protocol: string;
    query: string;
}

export interface GetLoadBalancerShapesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetLoadBalancerShapesShape {
    name: string;
}

export interface GetLoadBalancerSslCipherSuitesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetLoadBalancerSslCipherSuitesSslCipherSuite {
    ciphers: string[];
    loadBalancerId: string;
    name: string;
    state: string;
}

export interface GetLoadBalancersFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetLoadBalancersLoadBalancer {
    compartmentId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    ipAddressDetails: outputs.GetLoadBalancersLoadBalancerIpAddressDetail[];
    ipAddresses: string[];
    ipMode: string;
    isDeleteProtectionEnabled: boolean;
    isPrivate: boolean;
    isRequestIdEnabled: boolean;
    networkSecurityGroupIds: string[];
    requestIdHeader: string;
    reservedIps: outputs.GetLoadBalancersLoadBalancerReservedIp[];
    shape: string;
    shapeDetails: outputs.GetLoadBalancersLoadBalancerShapeDetail[];
    state: string;
    subnetIds: string[];
    systemTags: {[key: string]: string};
    timeCreated: string;
}

export interface GetLoadBalancersLoadBalancerIpAddressDetail {
    ipAddress: string;
    isPublic: boolean;
    reservedIps: outputs.GetLoadBalancersLoadBalancerIpAddressDetailReservedIp[];
}

export interface GetLoadBalancersLoadBalancerIpAddressDetailReservedIp {
    id: string;
}

export interface GetLoadBalancersLoadBalancerReservedIp {
    id: string;
}

export interface GetLoadBalancersLoadBalancerShapeDetail {
    maximumBandwidthInMbps: number;
    minimumBandwidthInMbps: number;
}

export interface GetLogAnalyticsLogAnalyticsCategoriesListItem {
    description: string;
    displayName: string;
    isSystem: boolean;
    name: string;
    type: string;
}

export interface GetLogAnalyticsLogAnalyticsEntitiesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetLogAnalyticsLogAnalyticsEntitiesLogAnalyticsEntityCollection {
    items: outputs.GetLogAnalyticsLogAnalyticsEntitiesLogAnalyticsEntityCollectionItem[];
}

export interface GetLogAnalyticsLogAnalyticsEntitiesLogAnalyticsEntityCollectionItem {
    areLogsCollected: boolean;
    cloudResourceId: string;
    compartmentId: string;
    definedTags: {[key: string]: string};
    entityTypeInternalName: string;
    entityTypeName: string;
    freeformTags: {[key: string]: string};
    hostname: string;
    id: string;
    lifecycleDetails: string;
    managementAgentCompartmentId: string;
    managementAgentDisplayName: string;
    managementAgentId: string;
    metadatas: outputs.GetLogAnalyticsLogAnalyticsEntitiesLogAnalyticsEntityCollectionItemMetadata[];
    name: string;
    namespace: string;
    properties: {[key: string]: string};
    sourceId: string;
    state: string;
    timeCreated: string;
    timeLastDiscovered: string;
    timeUpdated: string;
    timezoneRegion: string;
}

export interface GetLogAnalyticsLogAnalyticsEntitiesLogAnalyticsEntityCollectionItemMetadata {
    items: outputs.GetLogAnalyticsLogAnalyticsEntitiesLogAnalyticsEntityCollectionItemMetadataItem[];
}

export interface GetLogAnalyticsLogAnalyticsEntitiesLogAnalyticsEntityCollectionItemMetadataItem {
    name: string;
    type: string;
    value: string;
}

export interface GetLogAnalyticsLogAnalyticsEntityMetadata {
    items: outputs.GetLogAnalyticsLogAnalyticsEntityMetadataItem[];
}

export interface GetLogAnalyticsLogAnalyticsEntityMetadataItem {
    name: string;
    type: string;
    value: string;
}

export interface GetLogAnalyticsLogAnalyticsEntityTopologyItem {
    links: outputs.GetLogAnalyticsLogAnalyticsEntityTopologyItemLink[];
    nodes: outputs.GetLogAnalyticsLogAnalyticsEntityTopologyItemNode[];
}

export interface GetLogAnalyticsLogAnalyticsEntityTopologyItemLink {
    items: outputs.GetLogAnalyticsLogAnalyticsEntityTopologyItemLinkItem[];
}

export interface GetLogAnalyticsLogAnalyticsEntityTopologyItemLinkItem {
    destinationEntityId: string;
    sourceEntityId: string;
}

export interface GetLogAnalyticsLogAnalyticsEntityTopologyItemNode {
    items: outputs.GetLogAnalyticsLogAnalyticsEntityTopologyItemNodeItem[];
}

export interface GetLogAnalyticsLogAnalyticsEntityTopologyItemNodeItem {
    areLogsCollected: boolean;
    cloudResourceId: string;
    compartmentId: string;
    definedTags: {[key: string]: string};
    entityTypeInternalName: string;
    entityTypeName: string;
    freeformTags: {[key: string]: string};
    id: string;
    lifecycleDetails: string;
    managementAgentId: string;
    name: string;
    sourceId: string;
    state: string;
    timeCreated: string;
    timeUpdated: string;
    timezoneRegion: string;
}

export interface GetLogAnalyticsLogAnalyticsLogGroupsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetLogAnalyticsLogAnalyticsLogGroupsLogAnalyticsLogGroupSummaryCollection {
    items: outputs.GetLogAnalyticsLogAnalyticsLogGroupsLogAnalyticsLogGroupSummaryCollectionItem[];
}

export interface GetLogAnalyticsLogAnalyticsLogGroupsLogAnalyticsLogGroupSummaryCollectionItem {
    compartmentId: string;
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    namespace: string;
    timeCreated: string;
    timeUpdated: string;
}

export interface GetLogAnalyticsLogAnalyticsObjectCollectionRuleOverride {
    matchType: string;
    matchValue: string;
    propertyName: string;
    propertyValue: string;
}

export interface GetLogAnalyticsLogAnalyticsObjectCollectionRulesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetLogAnalyticsLogAnalyticsObjectCollectionRulesLogAnalyticsObjectCollectionRuleCollection {
    items: outputs.GetLogAnalyticsLogAnalyticsObjectCollectionRulesLogAnalyticsObjectCollectionRuleCollectionItem[];
}

export interface GetLogAnalyticsLogAnalyticsObjectCollectionRulesLogAnalyticsObjectCollectionRuleCollectionItem {
    charEncoding: string;
    collectionType: string;
    compartmentId: string;
    definedTags: {[key: string]: string};
    description: string;
    entityId: string;
    freeformTags: {[key: string]: string};
    id: string;
    isEnabled: boolean;
    isForceHistoricCollection: boolean;
    lifecycleDetails: string;
    logGroupId: string;
    logSet: string;
    logSetExtRegex: string;
    logSetKey: string;
    logSourceName: string;
    logType: string;
    name: string;
    namespace: string;
    objectNameFilters: string[];
    osBucketName: string;
    osNamespace: string;
    overrides: outputs.GetLogAnalyticsLogAnalyticsObjectCollectionRulesLogAnalyticsObjectCollectionRuleCollectionItemOverride[];
    pollSince: string;
    pollTill: string;
    state: string;
    timeCreated: string;
    timeUpdated: string;
    timezone: string;
}

export interface GetLogAnalyticsLogAnalyticsObjectCollectionRulesLogAnalyticsObjectCollectionRuleCollectionItemOverride {
    matchType: string;
    matchValue: string;
    propertyName: string;
    propertyValue: string;
}

export interface GetLogAnalyticsLogAnalyticsPreferenceItem {
    name: string;
    value: string;
}

export interface GetLogAnalyticsLogAnalyticsResourceCategoriesListCategory {
    description: string;
    displayName: string;
    isSystem: boolean;
    name: string;
    type: string;
}

export interface GetLogAnalyticsLogAnalyticsResourceCategoriesListItem {
    categoryName: string;
    isSystem: boolean;
    resourceId: string;
    resourceType: string;
}

export interface GetLogAnalyticsNamespaceEffectivePropertiesEffectivePropertyCollection {
    items: outputs.GetLogAnalyticsNamespaceEffectivePropertiesEffectivePropertyCollectionItem[];
}

export interface GetLogAnalyticsNamespaceEffectivePropertiesEffectivePropertyCollectionItem {
    effectiveLevel: string;
    name: string;
    patterns: outputs.GetLogAnalyticsNamespaceEffectivePropertiesEffectivePropertyCollectionItemPattern[];
    value: string;
}

export interface GetLogAnalyticsNamespaceEffectivePropertiesEffectivePropertyCollectionItemPattern {
    effectiveLevel: string;
    id: string;
    value: string;
}

export interface GetLogAnalyticsNamespaceEffectivePropertiesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetLogAnalyticsNamespaceIngestTimeRuleAction {
    compartmentId: string;
    dimensions: string[];
    metricName: string;
    namespace: string;
    resourceGroup: string;
    type: string;
}

export interface GetLogAnalyticsNamespaceIngestTimeRuleCondition {
    additionalConditions: outputs.GetLogAnalyticsNamespaceIngestTimeRuleConditionAdditionalCondition[];
    fieldName: string;
    fieldOperator: string;
    fieldValue: string;
    kind: string;
}

export interface GetLogAnalyticsNamespaceIngestTimeRuleConditionAdditionalCondition {
    conditionField: string;
    conditionOperator: string;
    conditionValue: string;
}

export interface GetLogAnalyticsNamespaceIngestTimeRulesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetLogAnalyticsNamespaceIngestTimeRulesIngestTimeRuleSummaryCollection {
    items: outputs.GetLogAnalyticsNamespaceIngestTimeRulesIngestTimeRuleSummaryCollectionItem[];
}

export interface GetLogAnalyticsNamespaceIngestTimeRulesIngestTimeRuleSummaryCollectionItem {
    compartmentId: string;
    conditionKind: string;
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    fieldName: string;
    fieldValue: string;
    freeformTags: {[key: string]: string};
    id: string;
    isEnabled: boolean;
    state: string;
    timeCreated: string;
    timeUpdated: string;
}

export interface GetLogAnalyticsNamespacePropertiesMetadataFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetLogAnalyticsNamespacePropertiesMetadataPropertyMetadataSummaryCollection {
    items: outputs.GetLogAnalyticsNamespacePropertiesMetadataPropertyMetadataSummaryCollectionItem[];
}

export interface GetLogAnalyticsNamespacePropertiesMetadataPropertyMetadataSummaryCollectionItem {
    defaultValue: string;
    description: string;
    displayName: string;
    levels: outputs.GetLogAnalyticsNamespacePropertiesMetadataPropertyMetadataSummaryCollectionItemLevel[];
    name: string;
}

export interface GetLogAnalyticsNamespacePropertiesMetadataPropertyMetadataSummaryCollectionItemLevel {
    constraints: string;
    name: string;
}

export interface GetLogAnalyticsNamespaceRulesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetLogAnalyticsNamespaceRulesRuleSummaryCollection {
    items: outputs.GetLogAnalyticsNamespaceRulesRuleSummaryCollectionItem[];
}

export interface GetLogAnalyticsNamespaceRulesRuleSummaryCollectionItem {
    compartmentId: string;
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    isEnabled: boolean;
    kind: string;
    lastExecutionStatus: string;
    state: string;
    targetService: string;
    timeCreated: string;
    timeLastExecuted: string;
    timeUpdated: string;
}

export interface GetLogAnalyticsNamespaceScheduledTaskAction {
    compartmentIdInSubtree: boolean;
    dataType: string;
    metricExtractions: outputs.GetLogAnalyticsNamespaceScheduledTaskActionMetricExtraction[];
    purgeCompartmentId: string;
    purgeDuration: string;
    queryString: string;
    savedSearchId: string;
    type: string;
}

export interface GetLogAnalyticsNamespaceScheduledTaskActionMetricExtraction {
    compartmentId: string;
    metricName: string;
    namespace: string;
    resourceGroup: string;
}

export interface GetLogAnalyticsNamespaceScheduledTaskSchedule {
    schedules: outputs.GetLogAnalyticsNamespaceScheduledTaskScheduleSchedule[];
}

export interface GetLogAnalyticsNamespaceScheduledTaskScheduleSchedule {
    expression: string;
    misfirePolicy: string;
    recurringInterval: string;
    repeatCount: number;
    timeZone: string;
    type: string;
}

export interface GetLogAnalyticsNamespaceScheduledTasksFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetLogAnalyticsNamespaceScheduledTasksScheduledTaskCollection {
    items: outputs.GetLogAnalyticsNamespaceScheduledTasksScheduledTaskCollectionItem[];
}

export interface GetLogAnalyticsNamespaceScheduledTasksScheduledTaskCollectionItem {
    actions: outputs.GetLogAnalyticsNamespaceScheduledTasksScheduledTaskCollectionItemAction[];
    compartmentId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    kind: string;
    namespace: string;
    numOccurrences: string;
    savedSearchId: string;
    scheduledTaskId: string;
    schedules: outputs.GetLogAnalyticsNamespaceScheduledTasksScheduledTaskCollectionItemSchedule[];
    state: string;
    taskStatus: string;
    taskType: string;
    timeCreated: string;
    timeUpdated: string;
    workRequestId: string;
}

export interface GetLogAnalyticsNamespaceScheduledTasksScheduledTaskCollectionItemAction {
    compartmentIdInSubtree: boolean;
    dataType: string;
    metricExtractions: outputs.GetLogAnalyticsNamespaceScheduledTasksScheduledTaskCollectionItemActionMetricExtraction[];
    purgeCompartmentId: string;
    purgeDuration: string;
    queryString: string;
    savedSearchId: string;
    type: string;
}

export interface GetLogAnalyticsNamespaceScheduledTasksScheduledTaskCollectionItemActionMetricExtraction {
    compartmentId: string;
    metricName: string;
    namespace: string;
    resourceGroup: string;
}

export interface GetLogAnalyticsNamespaceScheduledTasksScheduledTaskCollectionItemSchedule {
    schedules: outputs.GetLogAnalyticsNamespaceScheduledTasksScheduledTaskCollectionItemScheduleSchedule[];
}

export interface GetLogAnalyticsNamespaceScheduledTasksScheduledTaskCollectionItemScheduleSchedule {
    expression: string;
    misfirePolicy: string;
    recurringInterval: string;
    repeatCount: number;
    timeZone: string;
    type: string;
}

export interface GetLogAnalyticsNamespaceStorageEncryptionKeyInfoItem {
    keyId: string;
    keySource: string;
    keyType: string;
}

export interface GetLogAnalyticsNamespaceStorageOverlappingRecallsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetLogAnalyticsNamespaceStorageOverlappingRecallsOverlappingRecallCollection {
    items: outputs.GetLogAnalyticsNamespaceStorageOverlappingRecallsOverlappingRecallCollectionItem[];
}

export interface GetLogAnalyticsNamespaceStorageOverlappingRecallsOverlappingRecallCollectionItem {
    collectionId: string;
    createdBy: string;
    logSets: string;
    purpose: string;
    queryString: string;
    recallId: string;
    status: string;
    timeDataEnded: string;
    timeDataStarted: string;
    timeStarted: string;
}

export interface GetLogAnalyticsNamespacesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetLogAnalyticsNamespacesNamespaceCollection {
    items: outputs.GetLogAnalyticsNamespacesNamespaceCollectionItem[];
}

export interface GetLogAnalyticsNamespacesNamespaceCollectionItem {
    compartmentId: string;
    isOnboarded: boolean;
    namespace: string;
}

export interface GetLoggingLogConfiguration {
    compartmentId: string;
    sources: outputs.GetLoggingLogConfigurationSource[];
}

export interface GetLoggingLogConfigurationSource {
    category: string;
    parameters: {[key: string]: string};
    resource: string;
    service: string;
    sourceType: string;
}

export interface GetLoggingLogGroupsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetLoggingLogGroupsLogGroup {
    compartmentId: string;
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    state: string;
    timeCreated: string;
    timeLastModified: string;
}

export interface GetLoggingLogSavedSearchesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetLoggingLogSavedSearchesLogSavedSearchSummaryCollection {
    items: outputs.GetLoggingLogSavedSearchesLogSavedSearchSummaryCollectionItem[];
}

export interface GetLoggingLogSavedSearchesLogSavedSearchSummaryCollectionItem {
    compartmentId: string;
    definedTags: {[key: string]: string};
    description: string;
    freeformTags: {[key: string]: string};
    id: string;
    name: string;
    query: string;
    state: string;
    timeCreated: string;
    timeLastModified: string;
}

export interface GetLoggingLogsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetLoggingLogsLog {
    compartmentId: string;
    configurations: outputs.GetLoggingLogsLogConfiguration[];
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    isEnabled: boolean;
    logGroupId: string;
    logType: string;
    retentionDuration: number;
    state: string;
    tenancyId: string;
    timeCreated: string;
    timeLastModified: string;
}

export interface GetLoggingLogsLogConfiguration {
    compartmentId: string;
    sources: outputs.GetLoggingLogsLogConfigurationSource[];
}

export interface GetLoggingLogsLogConfigurationSource {
    category: string;
    parameters: {[key: string]: string};
    resource: string;
    service: string;
    sourceType: string;
}

export interface GetLoggingUnifiedAgentConfigurationGroupAssociation {
    groupLists: string[];
}

export interface GetLoggingUnifiedAgentConfigurationServiceConfiguration {
    applicationConfigurations: outputs.GetLoggingUnifiedAgentConfigurationServiceConfigurationApplicationConfiguration[];
    configurationType: string;
    destinations: outputs.GetLoggingUnifiedAgentConfigurationServiceConfigurationDestination[];
    sources: outputs.GetLoggingUnifiedAgentConfigurationServiceConfigurationSource[];
    unifiedAgentConfigurationFilters: outputs.GetLoggingUnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilter[];
}

export interface GetLoggingUnifiedAgentConfigurationServiceConfigurationApplicationConfiguration {
    destinations: outputs.GetLoggingUnifiedAgentConfigurationServiceConfigurationApplicationConfigurationDestination[];
    source: outputs.GetLoggingUnifiedAgentConfigurationServiceConfigurationApplicationConfigurationSource[];
    sourceType: string;
    sources: outputs.GetLoggingUnifiedAgentConfigurationServiceConfigurationApplicationConfigurationSource[];
    unifiedAgentConfigurationFilters: outputs.GetLoggingUnifiedAgentConfigurationServiceConfigurationApplicationConfigurationUnifiedAgentConfigurationFilter[];
}

export interface GetLoggingUnifiedAgentConfigurationServiceConfigurationApplicationConfigurationDestination {
    compartmentId: string;
    metricsNamespace: string;
}

export interface GetLoggingUnifiedAgentConfigurationServiceConfigurationApplicationConfigurationSource {
    advancedOptions: outputs.GetLoggingUnifiedAgentConfigurationServiceConfigurationApplicationConfigurationSourceAdvancedOption[];
    name: string;
    parsers: outputs.GetLoggingUnifiedAgentConfigurationServiceConfigurationApplicationConfigurationSourceParser[];
    paths: string[];
    sourceType: string;
}

export interface GetLoggingUnifiedAgentConfigurationServiceConfigurationApplicationConfigurationSourceAdvancedOption {
    isReadFromHead: boolean;
}

export interface GetLoggingUnifiedAgentConfigurationServiceConfigurationApplicationConfigurationSourceParser {
    delimiter: string;
    expression: string;
    fieldTimeKey: string;
    formatFirstline: string;
    formats: string[];
    grokFailureKey: string;
    grokNameKey: string;
    isEstimateCurrentEvent: boolean;
    isKeepTimeKey: boolean;
    isMergeCriFields: boolean;
    isNullEmptyString: boolean;
    isSupportColonlessIdent: boolean;
    isWithPriority: boolean;
    keys: string[];
    messageFormat: string;
    messageKey: string;
    multiLineStartRegexp: string;
    nestedParsers: outputs.GetLoggingUnifiedAgentConfigurationServiceConfigurationApplicationConfigurationSourceParserNestedParser[];
    nullValuePattern: string;
    parseNested: boolean;
    parserType: string;
    patterns: outputs.GetLoggingUnifiedAgentConfigurationServiceConfigurationApplicationConfigurationSourceParserPattern[];
    recordInputs: outputs.GetLoggingUnifiedAgentConfigurationServiceConfigurationApplicationConfigurationSourceParserRecordInput[];
    rfc5424timeFormat: string;
    separator: string;
    syslogParserType: string;
    timeFormat: string;
    timeType: string;
    timeoutInMilliseconds: number;
    types: {[key: string]: string};
}

export interface GetLoggingUnifiedAgentConfigurationServiceConfigurationApplicationConfigurationSourceParserNestedParser {
    fieldTimeKey: string;
    isKeepTimeKey: boolean;
    parseNested: boolean;
    separator: string;
    timeFormat: string;
    timeType: string;
}

export interface GetLoggingUnifiedAgentConfigurationServiceConfigurationApplicationConfigurationSourceParserPattern {
    fieldTimeFormat: string;
    fieldTimeKey: string;
    fieldTimeZone: string;
    name: string;
    pattern: string;
}

export interface GetLoggingUnifiedAgentConfigurationServiceConfigurationApplicationConfigurationSourceParserRecordInput {
    dimensions: {[key: string]: string};
    namespace: string;
    resourceGroup: string;
}

export interface GetLoggingUnifiedAgentConfigurationServiceConfigurationApplicationConfigurationUnifiedAgentConfigurationFilter {
    allowLists: string[];
    denyLists: string[];
    filterType: string;
    name: string;
}

export interface GetLoggingUnifiedAgentConfigurationServiceConfigurationDestination {
    logObjectId: string;
    operationalMetricsConfigurations: outputs.GetLoggingUnifiedAgentConfigurationServiceConfigurationDestinationOperationalMetricsConfiguration[];
}

export interface GetLoggingUnifiedAgentConfigurationServiceConfigurationDestinationOperationalMetricsConfiguration {
    destinations: outputs.GetLoggingUnifiedAgentConfigurationServiceConfigurationDestinationOperationalMetricsConfigurationDestination[];
    sources: outputs.GetLoggingUnifiedAgentConfigurationServiceConfigurationDestinationOperationalMetricsConfigurationSource[];
}

export interface GetLoggingUnifiedAgentConfigurationServiceConfigurationDestinationOperationalMetricsConfigurationDestination {
    compartmentId: string;
}

export interface GetLoggingUnifiedAgentConfigurationServiceConfigurationDestinationOperationalMetricsConfigurationSource {
    metrics: string[];
    recordInputs: outputs.GetLoggingUnifiedAgentConfigurationServiceConfigurationDestinationOperationalMetricsConfigurationSourceRecordInput[];
    type: string;
}

export interface GetLoggingUnifiedAgentConfigurationServiceConfigurationDestinationOperationalMetricsConfigurationSourceRecordInput {
    namespace: string;
    resourceGroup: string;
}

export interface GetLoggingUnifiedAgentConfigurationServiceConfigurationSource {
    advancedOptions: outputs.GetLoggingUnifiedAgentConfigurationServiceConfigurationSourceAdvancedOption[];
    channels: string[];
    customPlugin: string;
    name: string;
    parsers: outputs.GetLoggingUnifiedAgentConfigurationServiceConfigurationSourceParser[];
    paths: string[];
    sourceType: string;
}

export interface GetLoggingUnifiedAgentConfigurationServiceConfigurationSourceAdvancedOption {
    isReadFromHead: boolean;
}

export interface GetLoggingUnifiedAgentConfigurationServiceConfigurationSourceParser {
    delimiter: string;
    expression: string;
    fieldTimeKey: string;
    formatFirstline: string;
    formats: string[];
    grokFailureKey: string;
    grokNameKey: string;
    isEstimateCurrentEvent: boolean;
    isKeepTimeKey: boolean;
    isMergeCriFields: boolean;
    isNullEmptyString: boolean;
    isSupportColonlessIdent: boolean;
    isWithPriority: boolean;
    keys: string[];
    messageFormat: string;
    messageKey: string;
    multiLineStartRegexp: string;
    nestedParsers: outputs.GetLoggingUnifiedAgentConfigurationServiceConfigurationSourceParserNestedParser[];
    nullValuePattern: string;
    parseNested: boolean;
    parserType: string;
    patterns: outputs.GetLoggingUnifiedAgentConfigurationServiceConfigurationSourceParserPattern[];
    recordInputs: outputs.GetLoggingUnifiedAgentConfigurationServiceConfigurationSourceParserRecordInput[];
    rfc5424timeFormat: string;
    separator: string;
    syslogParserType: string;
    timeFormat: string;
    timeType: string;
    timeoutInMilliseconds: number;
    types: {[key: string]: string};
}

export interface GetLoggingUnifiedAgentConfigurationServiceConfigurationSourceParserNestedParser {
    fieldTimeKey: string;
    isKeepTimeKey: boolean;
    parseNested: boolean;
    separator: string;
    timeFormat: string;
    timeType: string;
}

export interface GetLoggingUnifiedAgentConfigurationServiceConfigurationSourceParserPattern {
    fieldTimeFormat: string;
    fieldTimeKey: string;
    fieldTimeZone: string;
    name: string;
    pattern: string;
}

export interface GetLoggingUnifiedAgentConfigurationServiceConfigurationSourceParserRecordInput {
    dimensions: {[key: string]: string};
    namespace: string;
    resourceGroup: string;
}

export interface GetLoggingUnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilter {
    allowLists: outputs.GetLoggingUnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilterAllowList[];
    customFilterType: string;
    customSections: outputs.GetLoggingUnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilterCustomSection[];
    denyLists: outputs.GetLoggingUnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilterDenyList[];
    emitInvalidRecordToError: boolean;
    filterType: string;
    hashValueField: string;
    injectKeyPrefix: string;
    isAutoTypecastEnabled: boolean;
    isRenewRecordEnabled: boolean;
    isRubyEnabled: boolean;
    keepKeys: string[];
    keyName: string;
    name: string;
    params: {[key: string]: string};
    parsers: outputs.GetLoggingUnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilterParser[];
    recordLists: outputs.GetLoggingUnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilterRecordList[];
    removeKeyNameField: boolean;
    removeKeys: string[];
    renewTimeKey: string;
    replaceInvalidSequence: boolean;
    reserveData: boolean;
    reserveTime: boolean;
}

export interface GetLoggingUnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilterAllowList {
    key: string;
    pattern: string;
}

export interface GetLoggingUnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilterCustomSection {
    name: string;
    params: {[key: string]: string};
}

export interface GetLoggingUnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilterDenyList {
    key: string;
    pattern: string;
}

export interface GetLoggingUnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilterParser {
    delimiter: string;
    expression: string;
    fieldTimeKey: string;
    formatFirstline: string;
    formats: string[];
    grokFailureKey: string;
    grokNameKey: string;
    isEstimateCurrentEvent: boolean;
    isKeepTimeKey: boolean;
    isMergeCriFields: boolean;
    isNullEmptyString: boolean;
    isSupportColonlessIdent: boolean;
    isWithPriority: boolean;
    keys: string[];
    messageFormat: string;
    messageKey: string;
    multiLineStartRegexp: string;
    nestedParsers: outputs.GetLoggingUnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilterParserNestedParser[];
    nullValuePattern: string;
    parseNested: boolean;
    parserType: string;
    patterns: outputs.GetLoggingUnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilterParserPattern[];
    recordInputs: outputs.GetLoggingUnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilterParserRecordInput[];
    rfc5424timeFormat: string;
    separator: string;
    syslogParserType: string;
    timeFormat: string;
    timeType: string;
    timeoutInMilliseconds: number;
    types: {[key: string]: string};
}

export interface GetLoggingUnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilterParserNestedParser {
    fieldTimeKey: string;
    isKeepTimeKey: boolean;
    parseNested: boolean;
    separator: string;
    timeFormat: string;
    timeType: string;
}

export interface GetLoggingUnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilterParserPattern {
    fieldTimeFormat: string;
    fieldTimeKey: string;
    fieldTimeZone: string;
    name: string;
    pattern: string;
}

export interface GetLoggingUnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilterParserRecordInput {
    dimensions: {[key: string]: string};
    namespace: string;
    resourceGroup: string;
}

export interface GetLoggingUnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilterRecordList {
    key: string;
    value: string;
}

export interface GetLoggingUnifiedAgentConfigurationsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetLoggingUnifiedAgentConfigurationsUnifiedAgentConfigurationCollection {
    items: outputs.GetLoggingUnifiedAgentConfigurationsUnifiedAgentConfigurationCollectionItem[];
}

export interface GetLoggingUnifiedAgentConfigurationsUnifiedAgentConfigurationCollectionItem {
    compartmentId: string;
    configurationState: string;
    configurationType: string;
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    isEnabled: boolean;
    state: string;
    timeCreated: string;
    timeLastModified: string;
}

export interface GetManagementAgentManagementAgentAvailableHistoriesAvailabilityHistory {
    availabilityStatus: string;
    managementAgentId: string;
    timeAvailabilityStatusEnded: string;
    timeAvailabilityStatusStarted: string;
}

export interface GetManagementAgentManagementAgentAvailableHistoriesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetManagementAgentManagementAgentCountItem {
    count: number;
    dimensions: outputs.GetManagementAgentManagementAgentCountItemDimension[];
}

export interface GetManagementAgentManagementAgentCountItemDimension {
    availabilityStatus: string;
    hasPlugins: boolean;
    installType: string;
    platformType: string;
    version: string;
}

export interface GetManagementAgentManagementAgentDataSourceList {
    allowMetrics: string;
    compartmentId: string;
    connectionTimeout: number;
    isDaemonSet: boolean;
    key: string;
    metricDimensions: outputs.GetManagementAgentManagementAgentDataSourceListMetricDimension[];
    name: string;
    namespace: string;
    proxyUrl: string;
    readDataLimit: number;
    readTimeout: number;
    resourceGroup: string;
    scheduleMins: number;
    state: string;
    timeCreated: string;
    timeUpdated: string;
    type: string;
    url: string;
}

export interface GetManagementAgentManagementAgentDataSourceListMetricDimension {
    name: string;
    value: string;
}

export interface GetManagementAgentManagementAgentDataSourceMetricDimension {
    name: string;
    value: string;
}

export interface GetManagementAgentManagementAgentDataSourceSummaryList {
    isDaemonSet: boolean;
    key: string;
    name: string;
    type: string;
}

export interface GetManagementAgentManagementAgentDataSourcesDataSource {
    dataSourceKey: string;
    name: string;
    type: string;
}

export interface GetManagementAgentManagementAgentDataSourcesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetManagementAgentManagementAgentImagesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetManagementAgentManagementAgentImagesManagementAgentImage {
    checksum: string;
    id: string;
    imageObjectStorageDetails: outputs.GetManagementAgentManagementAgentImagesManagementAgentImageImageObjectStorageDetail[];
    objectUrl: string;
    packageArchitectureType: string;
    packageType: string;
    platformName: string;
    platformType: string;
    size: number;
    state: string;
    version: string;
}

export interface GetManagementAgentManagementAgentImagesManagementAgentImageImageObjectStorageDetail {
    checksum: string;
    object: string;
    objectBucket: string;
    objectNamespace: string;
    objectUrl: string;
}

export interface GetManagementAgentManagementAgentInstallKeysFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetManagementAgentManagementAgentInstallKeysManagementAgentInstallKey {
    allowedKeyInstallCount: number;
    compartmentId: string;
    createdByPrincipalId: string;
    currentKeyInstallCount: number;
    displayName: string;
    id: string;
    isUnlimited: boolean;
    key: string;
    lifecycleDetails: string;
    state: string;
    timeCreated: string;
    timeExpires: string;
    timeUpdated: string;
}

export interface GetManagementAgentManagementAgentManagementAgentProperty {
    name: string;
    units: string;
    values: string[];
}

export interface GetManagementAgentManagementAgentPluginCountItem {
    count: number;
    dimensions: outputs.GetManagementAgentManagementAgentPluginCountItemDimension[];
}

export interface GetManagementAgentManagementAgentPluginCountItemDimension {
    pluginDisplayName: string;
    pluginName: string;
}

export interface GetManagementAgentManagementAgentPluginList {
    isEnabled: boolean;
    pluginDisplayName: string;
    pluginId: string;
    pluginName: string;
    pluginStatus: string;
    pluginStatusMessage: string;
    pluginVersion: string;
}

export interface GetManagementAgentManagementAgentPluginsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetManagementAgentManagementAgentPluginsManagementAgentPlugin {
    description: string;
    displayName: string;
    id: string;
    isConsoleDeployable: boolean;
    name: string;
    state: string;
    supportedPlatformTypes: string[];
    version: number;
}

export interface GetManagementAgentManagementAgentsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetManagementAgentManagementAgentsManagementAgent {
    availabilityStatus: string;
    compartmentId: string;
    dataSourceLists: outputs.GetManagementAgentManagementAgentsManagementAgentDataSourceList[];
    dataSourceSummaryLists: outputs.GetManagementAgentManagementAgentsManagementAgentDataSourceSummaryList[];
    definedTags: {[key: string]: string};
    deployPluginsIds: string[];
    displayName: string;
    freeformTags: {[key: string]: string};
    host: string;
    hostId: string;
    id: string;
    installKeyId: string;
    installPath: string;
    installType: string;
    isAgentAutoUpgradable: boolean;
    isCustomerDeployed: boolean;
    lifecycleDetails: string;
    managedAgentId: string;
    managementAgentProperties: outputs.GetManagementAgentManagementAgentsManagementAgentManagementAgentProperty[];
    platformName: string;
    platformType: string;
    platformVersion: string;
    pluginLists: outputs.GetManagementAgentManagementAgentsManagementAgentPluginList[];
    resourceArtifactVersion: string;
    state: string;
    timeCreated: string;
    timeLastHeartbeat: string;
    timeUpdated: string;
    version: string;
}

export interface GetManagementAgentManagementAgentsManagementAgentDataSourceList {
    allowMetrics: string;
    compartmentId: string;
    connectionTimeout: number;
    isDaemonSet: boolean;
    key: string;
    metricDimensions: outputs.GetManagementAgentManagementAgentsManagementAgentDataSourceListMetricDimension[];
    name: string;
    namespace: string;
    proxyUrl: string;
    readDataLimit: number;
    readTimeout: number;
    resourceGroup: string;
    scheduleMins: number;
    state: string;
    timeCreated: string;
    timeUpdated: string;
    type: string;
    url: string;
}

export interface GetManagementAgentManagementAgentsManagementAgentDataSourceListMetricDimension {
    name: string;
    value: string;
}

export interface GetManagementAgentManagementAgentsManagementAgentDataSourceSummaryList {
    isDaemonSet: boolean;
    key: string;
    name: string;
    type: string;
}

export interface GetManagementAgentManagementAgentsManagementAgentManagementAgentProperty {
    name: string;
    units: string;
    values: string[];
}

export interface GetManagementAgentManagementAgentsManagementAgentPluginList {
    isEnabled: boolean;
    pluginDisplayName: string;
    pluginId: string;
    pluginName: string;
    pluginStatus: string;
    pluginStatusMessage: string;
    pluginVersion: string;
}

export interface GetMarketplaceAcceptedAgreementsAcceptedAgreement {
    agreementId: string;
    compartmentId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    listingId: string;
    packageVersion: string;
    signature: string;
    timeAccepted: string;
}

export interface GetMarketplaceAcceptedAgreementsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetMarketplaceCategoriesCategory {
    name: string;
}

export interface GetMarketplaceCategoriesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetMarketplaceListingBanner {
    contentUrl: string;
    fileExtension: string;
    mimeType: string;
    name: string;
}

export interface GetMarketplaceListingDocumentationLink {
    documentCategory: string;
    name: string;
    url: string;
}

export interface GetMarketplaceListingIcon {
    contentUrl: string;
    fileExtension: string;
    mimeType: string;
    name: string;
}

export interface GetMarketplaceListingLanguage {
    code: string;
    name: string;
}

export interface GetMarketplaceListingLink {
    href: string;
    rel: string;
}

export interface GetMarketplaceListingPackageAgreementsAgreement {
    author: string;
    contentUrl: string;
    id: string;
    prompt: string;
}

export interface GetMarketplaceListingPackageAgreementsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetMarketplaceListingPackageOperatingSystem {
    name: string;
}

export interface GetMarketplaceListingPackagePricing {
    currency: string;
    internationalMarketPrices: outputs.GetMarketplaceListingPackagePricingInternationalMarketPrice[];
    payGoStrategy: string;
    rate: number;
    type: string;
}

export interface GetMarketplaceListingPackagePricingInternationalMarketPrice {
    currencyCode: string;
    currencySymbol: string;
    rate: number;
}

export interface GetMarketplaceListingPackageRegion {
    code: string;
    countries: outputs.GetMarketplaceListingPackageRegionCountry[];
    name: string;
}

export interface GetMarketplaceListingPackageRegionCountry {
    code: string;
    name: string;
}

export interface GetMarketplaceListingPackageVariable {
    dataType: string;
    defaultValue: string;
    description: string;
    hintMessage: string;
    isMandatory: boolean;
    name: string;
}

export interface GetMarketplaceListingPackagesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetMarketplaceListingPackagesListingPackage {
    listingId: string;
    operatingSystems: outputs.GetMarketplaceListingPackagesListingPackageOperatingSystem[];
    packageType: string;
    packageVersion: string;
    pricings: outputs.GetMarketplaceListingPackagesListingPackagePricing[];
    regions: outputs.GetMarketplaceListingPackagesListingPackageRegion[];
    resourceId: string;
    timeCreated: string;
}

export interface GetMarketplaceListingPackagesListingPackageOperatingSystem {
    name: string;
}

export interface GetMarketplaceListingPackagesListingPackagePricing {
    currency: string;
    internationalMarketPrices: outputs.GetMarketplaceListingPackagesListingPackagePricingInternationalMarketPrice[];
    payGoStrategy: string;
    rate: number;
    type: string;
}

export interface GetMarketplaceListingPackagesListingPackagePricingInternationalMarketPrice {
    currencyCode: string;
    currencySymbol: string;
    rate: number;
}

export interface GetMarketplaceListingPackagesListingPackageRegion {
    code: string;
    countries: outputs.GetMarketplaceListingPackagesListingPackageRegionCountry[];
    name: string;
}

export interface GetMarketplaceListingPackagesListingPackageRegionCountry {
    code: string;
    name: string;
}

export interface GetMarketplaceListingPublisher {
    contactEmail: string;
    contactPhone: string;
    description: string;
    hqAddress: string;
    id: string;
    links: outputs.GetMarketplaceListingPublisherLink[];
    logos: outputs.GetMarketplaceListingPublisherLogo[];
    name: string;
    websiteUrl: string;
    yearFounded: string;
}

export interface GetMarketplaceListingPublisherLink {
    href: string;
    rel: string;
}

export interface GetMarketplaceListingPublisherLogo {
    contentUrl: string;
    fileExtension: string;
    mimeType: string;
    name: string;
}

export interface GetMarketplaceListingRegion {
    code: string;
    countries: outputs.GetMarketplaceListingRegionCountry[];
    name: string;
}

export interface GetMarketplaceListingRegionCountry {
    code: string;
    name: string;
}

export interface GetMarketplaceListingScreenshot {
    contentUrl: string;
    description: string;
    fileExtension: string;
    mimeType: string;
    name: string;
}

export interface GetMarketplaceListingSupportContact {
    email: string;
    name: string;
    phone: string;
    subject: string;
}

export interface GetMarketplaceListingSupportLink {
    name: string;
    url: string;
}

export interface GetMarketplaceListingSupportedOperatingSystem {
    name: string;
}

export interface GetMarketplaceListingTaxesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetMarketplaceListingTaxesTax {
    code: string;
    country: string;
    name: string;
    url: string;
}

export interface GetMarketplaceListingVideo {
    name: string;
    url: string;
}

export interface GetMarketplaceListingsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetMarketplaceListingsListing {
    banners: outputs.GetMarketplaceListingsListingBanner[];
    categories: string[];
    compatibleArchitectures: string[];
    defaultPackageVersion: string;
    documentationLinks: outputs.GetMarketplaceListingsListingDocumentationLink[];
    icons: outputs.GetMarketplaceListingsListingIcon[];
    id: string;
    isFeatured: boolean;
    listingType: string;
    name: string;
    packageType: string;
    pricingTypes: string[];
    publishers: outputs.GetMarketplaceListingsListingPublisher[];
    regions: outputs.GetMarketplaceListingsListingRegion[];
    shortDescription: string;
    supportedOperatingSystems: outputs.GetMarketplaceListingsListingSupportedOperatingSystem[];
}

export interface GetMarketplaceListingsListingBanner {
    contentUrl: string;
    fileExtension: string;
    mimeType: string;
    name: string;
}

export interface GetMarketplaceListingsListingDocumentationLink {
    documentCategory: string;
    name: string;
    url: string;
}

export interface GetMarketplaceListingsListingIcon {
    contentUrl: string;
    fileExtension: string;
    mimeType: string;
    name: string;
}

export interface GetMarketplaceListingsListingPublisher {
    description: string;
    id: string;
    name: string;
}

export interface GetMarketplaceListingsListingRegion {
    code: string;
    countries: outputs.GetMarketplaceListingsListingRegionCountry[];
    name: string;
}

export interface GetMarketplaceListingsListingRegionCountry {
    code: string;
    name: string;
}

export interface GetMarketplaceListingsListingSupportedOperatingSystem {
    name: string;
}

export interface GetMarketplacePublicationIcon {
    contentUrl: string;
    fileExtension: string;
    mimeType: string;
    name: string;
}

export interface GetMarketplacePublicationPackageDetail {
    eulas: outputs.GetMarketplacePublicationPackageDetailEula[];
    imageId: string;
    operatingSystems: outputs.GetMarketplacePublicationPackageDetailOperatingSystem[];
    packageType: string;
    packageVersion: string;
}

export interface GetMarketplacePublicationPackageDetailEula {
    eulaType: string;
    licenseText: string;
}

export interface GetMarketplacePublicationPackageDetailOperatingSystem {
    name: string;
}

export interface GetMarketplacePublicationPackageOperatingSystem {
    name: string;
}

export interface GetMarketplacePublicationPackageVariable {
    dataType: string;
    defaultValue: string;
    description: string;
    hintMessage: string;
    isMandatory: boolean;
    name: string;
}

export interface GetMarketplacePublicationPackagesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetMarketplacePublicationPackagesPublicationPackage {
    listingId: string;
    packageType: string;
    packageVersion: string;
    resourceId: string;
    timeCreated: string;
}

export interface GetMarketplacePublicationSupportContact {
    email: string;
    name: string;
    phone: string;
    subject: string;
}

export interface GetMarketplacePublicationSupportedOperatingSystem {
    name: string;
}

export interface GetMarketplacePublicationsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetMarketplacePublicationsPublication {
    compartmentId: string;
    definedTags: {[key: string]: string};
    freeformTags: {[key: string]: string};
    icons: outputs.GetMarketplacePublicationsPublicationIcon[];
    id: string;
    isAgreementAcknowledged: boolean;
    listingType: string;
    longDescription: string;
    name: string;
    packageDetails: outputs.GetMarketplacePublicationsPublicationPackageDetail[];
    packageType: string;
    shortDescription: string;
    state: string;
    supportContacts: outputs.GetMarketplacePublicationsPublicationSupportContact[];
    supportedOperatingSystems: outputs.GetMarketplacePublicationsPublicationSupportedOperatingSystem[];
    systemTags: {[key: string]: string};
    timeCreated: string;
}

export interface GetMarketplacePublicationsPublicationIcon {
    contentUrl: string;
    fileExtension: string;
    mimeType: string;
    name: string;
}

export interface GetMarketplacePublicationsPublicationPackageDetail {
    eulas: outputs.GetMarketplacePublicationsPublicationPackageDetailEula[];
    imageId: string;
    operatingSystems: outputs.GetMarketplacePublicationsPublicationPackageDetailOperatingSystem[];
    packageType: string;
    packageVersion: string;
}

export interface GetMarketplacePublicationsPublicationPackageDetailEula {
    eulaType: string;
    licenseText: string;
}

export interface GetMarketplacePublicationsPublicationPackageDetailOperatingSystem {
    name: string;
}

export interface GetMarketplacePublicationsPublicationSupportContact {
    email: string;
    name: string;
    phone: string;
    subject: string;
}

export interface GetMarketplacePublicationsPublicationSupportedOperatingSystem {
    name: string;
}

export interface GetMarketplacePublishersFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetMarketplacePublishersPublisher {
    description: string;
    id: string;
    name: string;
}

export interface GetMediaServicesMediaAssetDistributionChannelAttachmentLock {
    compartmentId: string;
    message: string;
    relatedResourceId: string;
    timeCreated: string;
    type: string;
}

export interface GetMediaServicesMediaAssetLock {
    compartmentId: string;
    message: string;
    relatedResourceId: string;
    timeCreated: string;
    type: string;
}

export interface GetMediaServicesMediaAssetMediaAssetTag {
    type: string;
    value: string;
}

export interface GetMediaServicesMediaAssetMetadata {
    metadata: string;
}

export interface GetMediaServicesMediaAssetsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetMediaServicesMediaAssetsMediaAssetCollection {
    items: outputs.GetMediaServicesMediaAssetsMediaAssetCollectionItem[];
}

export interface GetMediaServicesMediaAssetsMediaAssetCollectionItem {
    bucket: string;
    compartmentId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    isLockOverride: boolean;
    locks: outputs.GetMediaServicesMediaAssetsMediaAssetCollectionItemLock[];
    masterMediaAssetId: string;
    mediaAssetTags: outputs.GetMediaServicesMediaAssetsMediaAssetCollectionItemMediaAssetTag[];
    mediaWorkflowJobId: string;
    metadatas: outputs.GetMediaServicesMediaAssetsMediaAssetCollectionItemMetadata[];
    namespace: string;
    object: string;
    objectEtag: string;
    parentMediaAssetId: string;
    segmentRangeEndIndex: string;
    segmentRangeStartIndex: string;
    sourceMediaWorkflowId: string;
    sourceMediaWorkflowVersion: string;
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
    type: string;
}

export interface GetMediaServicesMediaAssetsMediaAssetCollectionItemLock {
    compartmentId: string;
    message: string;
    relatedResourceId: string;
    timeCreated: string;
    type: string;
}

export interface GetMediaServicesMediaAssetsMediaAssetCollectionItemMediaAssetTag {
    type: string;
    value: string;
}

export interface GetMediaServicesMediaAssetsMediaAssetCollectionItemMetadata {
    metadata: string;
}

export interface GetMediaServicesMediaWorkflowConfigurationLock {
    compartmentId: string;
    message: string;
    relatedResourceId: string;
    timeCreated: string;
    type: string;
}

export interface GetMediaServicesMediaWorkflowConfigurationsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetMediaServicesMediaWorkflowConfigurationsMediaWorkflowConfigurationCollection {
    items: outputs.GetMediaServicesMediaWorkflowConfigurationsMediaWorkflowConfigurationCollectionItem[];
}

export interface GetMediaServicesMediaWorkflowConfigurationsMediaWorkflowConfigurationCollectionItem {
    compartmentId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    isLockOverride: boolean;
    lifecyleDetails: string;
    locks: outputs.GetMediaServicesMediaWorkflowConfigurationsMediaWorkflowConfigurationCollectionItemLock[];
    parameters: string;
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
}

export interface GetMediaServicesMediaWorkflowConfigurationsMediaWorkflowConfigurationCollectionItemLock {
    compartmentId: string;
    message: string;
    relatedResourceId: string;
    timeCreated: string;
    type: string;
}

export interface GetMediaServicesMediaWorkflowJobFactsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetMediaServicesMediaWorkflowJobFactsMediaWorkflowJobFactCollection {
    items: outputs.GetMediaServicesMediaWorkflowJobFactsMediaWorkflowJobFactCollectionItem[];
}

export interface GetMediaServicesMediaWorkflowJobFactsMediaWorkflowJobFactCollectionItem {
    detail: string;
    key: string;
    mediaWorkflowJobId: string;
    name: string;
    type: string;
}

export interface GetMediaServicesMediaWorkflowJobLock {
    compartmentId: string;
    message: string;
    relatedResourceId: string;
    timeCreated: string;
    type: string;
}

export interface GetMediaServicesMediaWorkflowJobOutput {
    assetType: string;
    bucket: string;
    id: string;
    namespace: string;
    object: string;
}

export interface GetMediaServicesMediaWorkflowJobTaskLifecycleState {
    key: string;
    lifecycleDetails: string;
    state: string;
}

export interface GetMediaServicesMediaWorkflowJobsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetMediaServicesMediaWorkflowJobsMediaWorkflowJobCollection {
    items: outputs.GetMediaServicesMediaWorkflowJobsMediaWorkflowJobCollectionItem[];
}

export interface GetMediaServicesMediaWorkflowJobsMediaWorkflowJobCollectionItem {
    compartmentId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    isLockOverride: boolean;
    lifecycleDetails: string;
    locks: outputs.GetMediaServicesMediaWorkflowJobsMediaWorkflowJobCollectionItemLock[];
    mediaWorkflowConfigurationIds: string[];
    mediaWorkflowId: string;
    mediaWorkflowName: string;
    outputs: outputs.GetMediaServicesMediaWorkflowJobsMediaWorkflowJobCollectionItemOutput[];
    parameters: string;
    runnable: string;
    state: string;
    systemTags: {[key: string]: string};
    taskLifecycleStates: outputs.GetMediaServicesMediaWorkflowJobsMediaWorkflowJobCollectionItemTaskLifecycleState[];
    timeCreated: string;
    timeEnded: string;
    timeStarted: string;
    timeUpdated: string;
    workflowIdentifierType: string;
}

export interface GetMediaServicesMediaWorkflowJobsMediaWorkflowJobCollectionItemLock {
    compartmentId: string;
    message: string;
    relatedResourceId: string;
    timeCreated: string;
    type: string;
}

export interface GetMediaServicesMediaWorkflowJobsMediaWorkflowJobCollectionItemOutput {
    assetType: string;
    bucket: string;
    id: string;
    namespace: string;
    object: string;
}

export interface GetMediaServicesMediaWorkflowJobsMediaWorkflowJobCollectionItemTaskLifecycleState {
    key: string;
    lifecycleDetails: string;
    state: string;
}

export interface GetMediaServicesMediaWorkflowLock {
    compartmentId: string;
    message: string;
    relatedResourceId: string;
    timeCreated: string;
    type: string;
}

export interface GetMediaServicesMediaWorkflowTask {
    enableParameterReference: string;
    enableWhenReferencedParameterEquals: {[key: string]: string};
    key: string;
    parameters: string;
    prerequisites: string[];
    type: string;
    version: string;
}

export interface GetMediaServicesMediaWorkflowTaskDeclarationItem {
    name: string;
    parametersSchema: string;
    parametersSchemaAllowingReferences: string;
    version: number;
}

export interface GetMediaServicesMediaWorkflowsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetMediaServicesMediaWorkflowsMediaWorkflowCollection {
    items: outputs.GetMediaServicesMediaWorkflowsMediaWorkflowCollectionItem[];
}

export interface GetMediaServicesMediaWorkflowsMediaWorkflowCollectionItem {
    compartmentId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    isLockOverride: boolean;
    lifecyleDetails: string;
    locks: outputs.GetMediaServicesMediaWorkflowsMediaWorkflowCollectionItemLock[];
    mediaWorkflowConfigurationIds: string[];
    parameters: string;
    state: string;
    systemTags: {[key: string]: string};
    tasks: outputs.GetMediaServicesMediaWorkflowsMediaWorkflowCollectionItemTask[];
    timeCreated: string;
    timeUpdated: string;
    version: string;
}

export interface GetMediaServicesMediaWorkflowsMediaWorkflowCollectionItemLock {
    compartmentId: string;
    message: string;
    relatedResourceId: string;
    timeCreated: string;
    type: string;
}

export interface GetMediaServicesMediaWorkflowsMediaWorkflowCollectionItemTask {
    enableParameterReference: string;
    enableWhenReferencedParameterEquals: {[key: string]: string};
    key: string;
    parameters: string;
    prerequisites: string[];
    type: string;
    version: string;
}

export interface GetMediaServicesStreamCdnConfigConfig {
    edgeHostname: string;
    edgePathPrefix: string;
    edgeTokenKey: string;
    edgeTokenSalt: string;
    isEdgeTokenAuth: boolean;
    originAuthSecretKeyA: string;
    originAuthSecretKeyB: string;
    originAuthSecretKeyNonceA: string;
    originAuthSecretKeyNonceB: string;
    originAuthSignEncryption: string;
    originAuthSignType: string;
    type: string;
}

export interface GetMediaServicesStreamCdnConfigLock {
    compartmentId: string;
    message: string;
    relatedResourceId: string;
    timeCreated: string;
    type: string;
}

export interface GetMediaServicesStreamCdnConfigsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetMediaServicesStreamCdnConfigsStreamCdnConfigCollection {
    items: outputs.GetMediaServicesStreamCdnConfigsStreamCdnConfigCollectionItem[];
}

export interface GetMediaServicesStreamCdnConfigsStreamCdnConfigCollectionItem {
    compartmentId: string;
    configs: outputs.GetMediaServicesStreamCdnConfigsStreamCdnConfigCollectionItemConfig[];
    definedTags: {[key: string]: string};
    displayName: string;
    distributionChannelId: string;
    freeformTags: {[key: string]: string};
    id: string;
    isEnabled: boolean;
    isLockOverride: boolean;
    lifecyleDetails: string;
    locks: outputs.GetMediaServicesStreamCdnConfigsStreamCdnConfigCollectionItemLock[];
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
}

export interface GetMediaServicesStreamCdnConfigsStreamCdnConfigCollectionItemConfig {
    edgeHostname: string;
    edgePathPrefix: string;
    edgeTokenKey: string;
    edgeTokenSalt: string;
    isEdgeTokenAuth: boolean;
    originAuthSecretKeyA: string;
    originAuthSecretKeyB: string;
    originAuthSecretKeyNonceA: string;
    originAuthSecretKeyNonceB: string;
    originAuthSignEncryption: string;
    originAuthSignType: string;
    type: string;
}

export interface GetMediaServicesStreamCdnConfigsStreamCdnConfigCollectionItemLock {
    compartmentId: string;
    message: string;
    relatedResourceId: string;
    timeCreated: string;
    type: string;
}

export interface GetMediaServicesStreamDistributionChannelLock {
    compartmentId: string;
    message: string;
    relatedResourceId: string;
    timeCreated: string;
    type: string;
}

export interface GetMediaServicesStreamDistributionChannelsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetMediaServicesStreamDistributionChannelsStreamDistributionChannelCollection {
    items: outputs.GetMediaServicesStreamDistributionChannelsStreamDistributionChannelCollectionItem[];
}

export interface GetMediaServicesStreamDistributionChannelsStreamDistributionChannelCollectionItem {
    compartmentId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    domainName: string;
    freeformTags: {[key: string]: string};
    id: string;
    isLockOverride: boolean;
    locks: outputs.GetMediaServicesStreamDistributionChannelsStreamDistributionChannelCollectionItemLock[];
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
}

export interface GetMediaServicesStreamDistributionChannelsStreamDistributionChannelCollectionItemLock {
    compartmentId: string;
    message: string;
    relatedResourceId: string;
    timeCreated: string;
    type: string;
}

export interface GetMediaServicesStreamPackagingConfigEncryption {
    algorithm: string;
    kmsKeyId: string;
}

export interface GetMediaServicesStreamPackagingConfigLock {
    compartmentId: string;
    message: string;
    relatedResourceId: string;
    timeCreated: string;
    type: string;
}

export interface GetMediaServicesStreamPackagingConfigsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetMediaServicesStreamPackagingConfigsStreamPackagingConfigCollection {
    items: outputs.GetMediaServicesStreamPackagingConfigsStreamPackagingConfigCollectionItem[];
}

export interface GetMediaServicesStreamPackagingConfigsStreamPackagingConfigCollectionItem {
    compartmentId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    distributionChannelId: string;
    encryptions: outputs.GetMediaServicesStreamPackagingConfigsStreamPackagingConfigCollectionItemEncryption[];
    freeformTags: {[key: string]: string};
    id: string;
    isLockOverride: boolean;
    locks: outputs.GetMediaServicesStreamPackagingConfigsStreamPackagingConfigCollectionItemLock[];
    segmentTimeInSeconds: number;
    state: string;
    streamPackagingFormat: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
}

export interface GetMediaServicesStreamPackagingConfigsStreamPackagingConfigCollectionItemEncryption {
    algorithm: string;
    kmsKeyId: string;
}

export interface GetMediaServicesStreamPackagingConfigsStreamPackagingConfigCollectionItemLock {
    compartmentId: string;
    message: string;
    relatedResourceId: string;
    timeCreated: string;
    type: string;
}

export interface GetMediaServicesSystemMediaWorkflowItem {
    description: string;
    name: string;
    parameters: string;
    tasks: outputs.GetMediaServicesSystemMediaWorkflowItemTask[];
}

export interface GetMediaServicesSystemMediaWorkflowItemTask {
    enableParameterReference: string;
    enableWhenReferencedParameterEquals: {[key: string]: string};
    key: string;
    parameters: string;
    prerequisites: string[];
    type: string;
    version: string;
}

export interface GetMeteringComputationConfigurationItem {
    key: string;
    values: string[];
}

export interface GetMeteringComputationCustomTableSavedCustomTable {
    columnGroupBies: string[];
    compartmentDepth: number;
    displayName: string;
    groupByTags: outputs.GetMeteringComputationCustomTableSavedCustomTableGroupByTag[];
    rowGroupBies: string[];
    version: number;
}

export interface GetMeteringComputationCustomTableSavedCustomTableGroupByTag {
    key: string;
    namespace: string;
    value: string;
}

export interface GetMeteringComputationCustomTablesCustomTableCollection {
    items: outputs.GetMeteringComputationCustomTablesCustomTableCollectionItem[];
}

export interface GetMeteringComputationCustomTablesCustomTableCollectionItem {
    compartmentId: string;
    id: string;
    savedCustomTables: outputs.GetMeteringComputationCustomTablesCustomTableCollectionItemSavedCustomTable[];
    savedReportId: string;
}

export interface GetMeteringComputationCustomTablesCustomTableCollectionItemSavedCustomTable {
    columnGroupBies: string[];
    compartmentDepth: number;
    displayName: string;
    groupByTags: outputs.GetMeteringComputationCustomTablesCustomTableCollectionItemSavedCustomTableGroupByTag[];
    rowGroupBies: string[];
    version: number;
}

export interface GetMeteringComputationCustomTablesCustomTableCollectionItemSavedCustomTableGroupByTag {
    key: string;
    namespace: string;
    value: string;
}

export interface GetMeteringComputationCustomTablesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetMeteringComputationQueriesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetMeteringComputationQueriesQueryCollection {
    items: outputs.GetMeteringComputationQueriesQueryCollectionItem[];
}

export interface GetMeteringComputationQueriesQueryCollectionItem {
    compartmentId: string;
    id: string;
    queryDefinitions: outputs.GetMeteringComputationQueriesQueryCollectionItemQueryDefinition[];
}

export interface GetMeteringComputationQueriesQueryCollectionItemQueryDefinition {
    costAnalysisUis: outputs.GetMeteringComputationQueriesQueryCollectionItemQueryDefinitionCostAnalysisUi[];
    displayName: string;
    reportQueries: outputs.GetMeteringComputationQueriesQueryCollectionItemQueryDefinitionReportQuery[];
    version: number;
}

export interface GetMeteringComputationQueriesQueryCollectionItemQueryDefinitionCostAnalysisUi {
    graph: string;
    isCumulativeGraph: boolean;
}

export interface GetMeteringComputationQueriesQueryCollectionItemQueryDefinitionReportQuery {
    compartmentDepth: number;
    dateRangeName: string;
    filter: string;
    forecasts: outputs.GetMeteringComputationQueriesQueryCollectionItemQueryDefinitionReportQueryForecast[];
    granularity: string;
    groupBies: string[];
    groupByTags: outputs.GetMeteringComputationQueriesQueryCollectionItemQueryDefinitionReportQueryGroupByTag[];
    isAggregateByTime: boolean;
    queryType: string;
    tenantId: string;
    timeUsageEnded: string;
    timeUsageStarted: string;
}

export interface GetMeteringComputationQueriesQueryCollectionItemQueryDefinitionReportQueryForecast {
    forecastType: string;
    timeForecastEnded: string;
    timeForecastStarted: string;
}

export interface GetMeteringComputationQueriesQueryCollectionItemQueryDefinitionReportQueryGroupByTag {
    key: string;
    namespace: string;
    value: string;
}

export interface GetMeteringComputationQueryQueryDefinition {
    costAnalysisUis: outputs.GetMeteringComputationQueryQueryDefinitionCostAnalysisUi[];
    displayName: string;
    reportQueries: outputs.GetMeteringComputationQueryQueryDefinitionReportQuery[];
    version: number;
}

export interface GetMeteringComputationQueryQueryDefinitionCostAnalysisUi {
    graph: string;
    isCumulativeGraph: boolean;
}

export interface GetMeteringComputationQueryQueryDefinitionReportQuery {
    compartmentDepth: number;
    dateRangeName: string;
    filter: string;
    forecasts: outputs.GetMeteringComputationQueryQueryDefinitionReportQueryForecast[];
    granularity: string;
    groupBies: string[];
    groupByTags: outputs.GetMeteringComputationQueryQueryDefinitionReportQueryGroupByTag[];
    isAggregateByTime: boolean;
    queryType: string;
    tenantId: string;
    timeUsageEnded: string;
    timeUsageStarted: string;
}

export interface GetMeteringComputationQueryQueryDefinitionReportQueryForecast {
    forecastType: string;
    timeForecastEnded: string;
    timeForecastStarted: string;
}

export interface GetMeteringComputationQueryQueryDefinitionReportQueryGroupByTag {
    key: string;
    namespace: string;
    value: string;
}

export interface GetMeteringComputationScheduleQueryProperty {
    compartmentDepth: number;
    dateRanges: outputs.GetMeteringComputationScheduleQueryPropertyDateRange[];
    filter: string;
    granularity: string;
    groupBies: string[];
    groupByTags: outputs.GetMeteringComputationScheduleQueryPropertyGroupByTag[];
    isAggregateByTime: boolean;
    queryType: string;
}

export interface GetMeteringComputationScheduleQueryPropertyDateRange {
    dateRangeType: string;
    dynamicDateRangeType: string;
    timeUsageEnded: string;
    timeUsageStarted: string;
}

export interface GetMeteringComputationScheduleQueryPropertyGroupByTag {
    key: string;
    namespace: string;
    value: string;
}

export interface GetMeteringComputationScheduleResultLocation {
    bucket: string;
    locationType: string;
    namespace: string;
    region: string;
}

export interface GetMeteringComputationScheduledRunsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetMeteringComputationScheduledRunsScheduledRunCollection {
    items: outputs.GetMeteringComputationScheduledRunsScheduledRunCollectionItem[];
}

export interface GetMeteringComputationScheduledRunsScheduledRunCollectionItem {
    id: string;
    lifecycleDetails: string;
    scheduleId: string;
    state: string;
    timeCreated: string;
    timeFinished: string;
}

export interface GetMeteringComputationSchedulesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetMeteringComputationSchedulesScheduleCollection {
    items: outputs.GetMeteringComputationSchedulesScheduleCollectionItem[];
}

export interface GetMeteringComputationSchedulesScheduleCollectionItem {
    compartmentId: string;
    definedTags: {[key: string]: string};
    description: string;
    freeformTags: {[key: string]: string};
    id: string;
    name: string;
    outputFileFormat: string;
    queryProperties: outputs.GetMeteringComputationSchedulesScheduleCollectionItemQueryProperty[];
    resultLocations: outputs.GetMeteringComputationSchedulesScheduleCollectionItemResultLocation[];
    savedReportId: string;
    scheduleRecurrences: string;
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeNextRun: string;
    timeScheduled: string;
}

export interface GetMeteringComputationSchedulesScheduleCollectionItemQueryProperty {
    compartmentDepth: number;
    dateRanges: outputs.GetMeteringComputationSchedulesScheduleCollectionItemQueryPropertyDateRange[];
    filter: string;
    granularity: string;
    groupBies: string[];
    groupByTags: outputs.GetMeteringComputationSchedulesScheduleCollectionItemQueryPropertyGroupByTag[];
    isAggregateByTime: boolean;
    queryType: string;
}

export interface GetMeteringComputationSchedulesScheduleCollectionItemQueryPropertyDateRange {
    dateRangeType: string;
    dynamicDateRangeType: string;
    timeUsageEnded: string;
    timeUsageStarted: string;
}

export interface GetMeteringComputationSchedulesScheduleCollectionItemQueryPropertyGroupByTag {
    key: string;
    namespace: string;
    value: string;
}

export interface GetMeteringComputationSchedulesScheduleCollectionItemResultLocation {
    bucket: string;
    locationType: string;
    namespace: string;
    region: string;
}

export interface GetMeteringComputationUsageCarbonEmissionsConfigItem {
    key: string;
    values: string[];
}

export interface GetMeteringComputationUsageCarbonEmissionsQueriesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetMeteringComputationUsageCarbonEmissionsQueriesUsageCarbonEmissionsQueryCollection {
    items: outputs.GetMeteringComputationUsageCarbonEmissionsQueriesUsageCarbonEmissionsQueryCollectionItem[];
}

export interface GetMeteringComputationUsageCarbonEmissionsQueriesUsageCarbonEmissionsQueryCollectionItem {
    compartmentId: string;
    id: string;
    queryDefinitions: outputs.GetMeteringComputationUsageCarbonEmissionsQueriesUsageCarbonEmissionsQueryCollectionItemQueryDefinition[];
}

export interface GetMeteringComputationUsageCarbonEmissionsQueriesUsageCarbonEmissionsQueryCollectionItemQueryDefinition {
    costAnalysisUis: outputs.GetMeteringComputationUsageCarbonEmissionsQueriesUsageCarbonEmissionsQueryCollectionItemQueryDefinitionCostAnalysisUi[];
    displayName: string;
    reportQueries: outputs.GetMeteringComputationUsageCarbonEmissionsQueriesUsageCarbonEmissionsQueryCollectionItemQueryDefinitionReportQuery[];
    version: number;
}

export interface GetMeteringComputationUsageCarbonEmissionsQueriesUsageCarbonEmissionsQueryCollectionItemQueryDefinitionCostAnalysisUi {
    graph: string;
    isCumulativeGraph: boolean;
}

export interface GetMeteringComputationUsageCarbonEmissionsQueriesUsageCarbonEmissionsQueryCollectionItemQueryDefinitionReportQuery {
    compartmentDepth: number;
    dateRangeName: string;
    groupBies: string[];
    groupByTags: outputs.GetMeteringComputationUsageCarbonEmissionsQueriesUsageCarbonEmissionsQueryCollectionItemQueryDefinitionReportQueryGroupByTag[];
    isAggregateByTime: boolean;
    tenantId: string;
    timeUsageEnded: string;
    timeUsageStarted: string;
    usageCarbonEmissionsQueryFilter: string;
}

export interface GetMeteringComputationUsageCarbonEmissionsQueriesUsageCarbonEmissionsQueryCollectionItemQueryDefinitionReportQueryGroupByTag {
    key: string;
    namespace: string;
    value: string;
}

export interface GetMeteringComputationUsageCarbonEmissionsQueryQueryDefinition {
    costAnalysisUis: outputs.GetMeteringComputationUsageCarbonEmissionsQueryQueryDefinitionCostAnalysisUi[];
    displayName: string;
    reportQueries: outputs.GetMeteringComputationUsageCarbonEmissionsQueryQueryDefinitionReportQuery[];
    version: number;
}

export interface GetMeteringComputationUsageCarbonEmissionsQueryQueryDefinitionCostAnalysisUi {
    graph: string;
    isCumulativeGraph: boolean;
}

export interface GetMeteringComputationUsageCarbonEmissionsQueryQueryDefinitionReportQuery {
    compartmentDepth: number;
    dateRangeName: string;
    groupBies: string[];
    groupByTags: outputs.GetMeteringComputationUsageCarbonEmissionsQueryQueryDefinitionReportQueryGroupByTag[];
    isAggregateByTime: boolean;
    tenantId: string;
    timeUsageEnded: string;
    timeUsageStarted: string;
    usageCarbonEmissionsQueryFilter: string;
}

export interface GetMeteringComputationUsageCarbonEmissionsQueryQueryDefinitionReportQueryGroupByTag {
    key: string;
    namespace: string;
    value: string;
}

export interface GetMeteringComputationUsageStatementEmailRecipientsGroupRecipientsList {
    emailId: string;
    firstName: string;
    lastName: string;
    state: string;
}

export interface GetMeteringComputationUsageStatementEmailRecipientsGroupsEmailRecipientsGroupCollection {
    items: outputs.GetMeteringComputationUsageStatementEmailRecipientsGroupsEmailRecipientsGroupCollectionItem[];
}

export interface GetMeteringComputationUsageStatementEmailRecipientsGroupsEmailRecipientsGroupCollectionItem {
    compartmentId: string;
    emailRecipientsGroupId: string;
    id: string;
    recipientsLists: outputs.GetMeteringComputationUsageStatementEmailRecipientsGroupsEmailRecipientsGroupCollectionItemRecipientsList[];
    state: string;
    subscriptionId: string;
}

export interface GetMeteringComputationUsageStatementEmailRecipientsGroupsEmailRecipientsGroupCollectionItemRecipientsList {
    emailId: string;
    firstName: string;
    lastName: string;
    state: string;
}

export interface GetMeteringComputationUsageStatementEmailRecipientsGroupsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetMonitoringAlarmHistoryCollectionEntry {
    alarmSummary: string;
    summary: string;
    timestamp: string;
    timestampTriggered: string;
}

export interface GetMonitoringAlarmOverride {
    body: string;
    pendingDuration: string;
    query: string;
    ruleName: string;
    severity: string;
}

export interface GetMonitoringAlarmStatusesAlarmStatus {
    alarmSummary: string;
    displayName: string;
    id: string;
    ruleName: string;
    severity: string;
    status: string;
    suppressions: outputs.GetMonitoringAlarmStatusesAlarmStatusSuppression[];
    timestampTriggered: string;
}

export interface GetMonitoringAlarmStatusesAlarmStatusSuppression {
    description: string;
    timeSuppressFrom: string;
    timeSuppressUntil: string;
}

export interface GetMonitoringAlarmStatusesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetMonitoringAlarmSuppression {
    description: string;
    timeSuppressFrom: string;
    timeSuppressUntil: string;
}

export interface GetMonitoringAlarmSuppressionAlarmSuppressionTarget {
    alarmId: string;
    targetType: string;
}

export interface GetMonitoringAlarmSuppressionsAlarmSuppressionCollection {
    items: outputs.GetMonitoringAlarmSuppressionsAlarmSuppressionCollectionItem[];
}

export interface GetMonitoringAlarmSuppressionsAlarmSuppressionCollectionItem {
    alarmSuppressionTargets: outputs.GetMonitoringAlarmSuppressionsAlarmSuppressionCollectionItemAlarmSuppressionTarget[];
    compartmentId: string;
    definedTags: {[key: string]: string};
    description: string;
    dimensions: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    state: string;
    timeCreated: string;
    timeSuppressFrom: string;
    timeSuppressUntil: string;
    timeUpdated: string;
}

export interface GetMonitoringAlarmSuppressionsAlarmSuppressionCollectionItemAlarmSuppressionTarget {
    alarmId: string;
    targetType: string;
}

export interface GetMonitoringAlarmSuppressionsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetMonitoringAlarmsAlarm {
    alarmSummary: string;
    body: string;
    compartmentId: string;
    definedTags: {[key: string]: string};
    destinations: string[];
    displayName: string;
    evaluationSlackDuration: string;
    freeformTags: {[key: string]: string};
    id: string;
    isEnabled: boolean;
    isNotificationsPerMetricDimensionEnabled: boolean;
    messageFormat: string;
    metricCompartmentId: string;
    metricCompartmentIdInSubtree: boolean;
    namespace: string;
    notificationTitle: string;
    notificationVersion: string;
    overrides: outputs.GetMonitoringAlarmsAlarmOverride[];
    pendingDuration: string;
    query: string;
    repeatNotificationDuration: string;
    resolution: string;
    resourceGroup: string;
    ruleName: string;
    severity: string;
    state: string;
    suppressions: outputs.GetMonitoringAlarmsAlarmSuppression[];
    timeCreated: string;
    timeUpdated: string;
}

export interface GetMonitoringAlarmsAlarmOverride {
    body: string;
    pendingDuration: string;
    query: string;
    ruleName: string;
    severity: string;
}

export interface GetMonitoringAlarmsAlarmSuppression {
    description: string;
    timeSuppressFrom: string;
    timeSuppressUntil: string;
}

export interface GetMonitoringAlarmsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetMonitoringMetricDataFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetMonitoringMetricDataMetricData {
    aggregatedDatapoints: outputs.GetMonitoringMetricDataMetricDataAggregatedDatapoint[];
    compartmentId: string;
    compartmentIdInSubtree: boolean;
    dimensions: {[key: string]: string};
    endTime: string;
    metadata: {[key: string]: string};
    name: string;
    namespace: string;
    query: string;
    resolution: string;
    resourceGroup: string;
    startTime: string;
}

export interface GetMonitoringMetricDataMetricDataAggregatedDatapoint {
    timestamp: string;
    value: number;
}

export interface GetMonitoringMetricsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetMonitoringMetricsMetric {
    compartmentId: string;
    compartmentIdInSubtree: boolean;
    dimensionFilters: {[key: string]: string};
    dimensions: {[key: string]: string};
    groupBies: string[];
    name: string;
    namespace: string;
    resourceGroup: string;
}

export interface GetMysqlChannelSource {
    anonymousTransactionsHandlings: outputs.GetMysqlChannelSourceAnonymousTransactionsHandling[];
    hostname: string;
    password: string;
    port: number;
    sourceType: string;
    sslCaCertificates: outputs.GetMysqlChannelSourceSslCaCertificate[];
    sslMode: string;
    username: string;
}

export interface GetMysqlChannelSourceAnonymousTransactionsHandling {
    lastConfiguredLogFilename: string;
    lastConfiguredLogOffset: string;
    policy: string;
    uuid: string;
}

export interface GetMysqlChannelSourceSslCaCertificate {
    certificateType: string;
    contents: string;
}

export interface GetMysqlChannelTarget {
    applierUsername: string;
    channelName: string;
    dbSystemId: string;
    delayInSeconds: number;
    filters: outputs.GetMysqlChannelTargetFilter[];
    tablesWithoutPrimaryKeyHandling: string;
    targetType: string;
}

export interface GetMysqlChannelTargetFilter {
    type: string;
    value: string;
}

export interface GetMysqlChannelsChannel {
    compartmentId: string;
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    isEnabled: boolean;
    lifecycleDetails: string;
    sources: outputs.GetMysqlChannelsChannelSource[];
    state: string;
    targets: outputs.GetMysqlChannelsChannelTarget[];
    timeCreated: string;
    timeUpdated: string;
}

export interface GetMysqlChannelsChannelSource {
    anonymousTransactionsHandlings: outputs.GetMysqlChannelsChannelSourceAnonymousTransactionsHandling[];
    hostname: string;
    password: string;
    port: number;
    sourceType: string;
    sslCaCertificates: outputs.GetMysqlChannelsChannelSourceSslCaCertificate[];
    sslMode: string;
    username: string;
}

export interface GetMysqlChannelsChannelSourceAnonymousTransactionsHandling {
    lastConfiguredLogFilename: string;
    lastConfiguredLogOffset: string;
    policy: string;
    uuid: string;
}

export interface GetMysqlChannelsChannelSourceSslCaCertificate {
    certificateType: string;
    contents: string;
}

export interface GetMysqlChannelsChannelTarget {
    applierUsername: string;
    channelName: string;
    dbSystemId: string;
    delayInSeconds: number;
    filters: outputs.GetMysqlChannelsChannelTargetFilter[];
    tablesWithoutPrimaryKeyHandling: string;
    targetType: string;
}

export interface GetMysqlChannelsChannelTargetFilter {
    type: string;
    value: string;
}

export interface GetMysqlChannelsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetMysqlHeatWaveClusterClusterNode {
    nodeId: string;
    state: string;
    timeCreated: string;
    timeUpdated: string;
}

export interface GetMysqlMysqlBackupDbSystemSnapshot {
    adminUsername: string;
    availabilityDomain: string;
    backupPolicies: outputs.GetMysqlMysqlBackupDbSystemSnapshotBackupPolicy[];
    compartmentId: string;
    configurationId: string;
    crashRecovery: string;
    dataStorageSizeInGb: number;
    dataStorages: outputs.GetMysqlMysqlBackupDbSystemSnapshotDataStorage[];
    databaseManagement: string;
    definedTags: {[key: string]: string};
    deletionPolicies: outputs.GetMysqlMysqlBackupDbSystemSnapshotDeletionPolicy[];
    description: string;
    displayName: string;
    endpoints: outputs.GetMysqlMysqlBackupDbSystemSnapshotEndpoint[];
    faultDomain: string;
    freeformTags: {[key: string]: string};
    hostnameLabel: string;
    id: string;
    ipAddress: string;
    isHighlyAvailable: boolean;
    maintenances: outputs.GetMysqlMysqlBackupDbSystemSnapshotMaintenance[];
    mysqlVersion: string;
    port: number;
    portX: number;
    region: string;
    secureConnections: outputs.GetMysqlMysqlBackupDbSystemSnapshotSecureConnection[];
    shapeName: string;
    subnetId: string;
}

export interface GetMysqlMysqlBackupDbSystemSnapshotBackupPolicy {
    definedTags: {[key: string]: string};
    freeformTags: {[key: string]: string};
    isEnabled: boolean;
    pitrPolicies: outputs.GetMysqlMysqlBackupDbSystemSnapshotBackupPolicyPitrPolicy[];
    retentionInDays: number;
    windowStartTime: string;
}

export interface GetMysqlMysqlBackupDbSystemSnapshotBackupPolicyPitrPolicy {
    isEnabled: boolean;
}

export interface GetMysqlMysqlBackupDbSystemSnapshotDataStorage {
    allocatedStorageSizeInGbs: number;
    dataStorageSizeInGb: number;
    dataStorageSizeLimitInGbs: number;
    isAutoExpandStorageEnabled: boolean;
    maxStorageSizeInGbs: number;
}

export interface GetMysqlMysqlBackupDbSystemSnapshotDeletionPolicy {
    automaticBackupRetention: string;
    finalBackup: string;
    isDeleteProtected: boolean;
}

export interface GetMysqlMysqlBackupDbSystemSnapshotEndpoint {
    hostname: string;
    ipAddress: string;
    modes: string[];
    port: number;
    portX: number;
    resourceId: string;
    resourceType: string;
    status: string;
    statusDetails: string;
}

export interface GetMysqlMysqlBackupDbSystemSnapshotMaintenance {
    windowStartTime: string;
}

export interface GetMysqlMysqlBackupDbSystemSnapshotSecureConnection {
    certificateGenerationType: string;
    certificateId: string;
}

export interface GetMysqlMysqlBackupDbSystemSnapshotSummary {
    displayName: string;
    id: string;
    region: string;
}

export interface GetMysqlMysqlBackupSourceDetail {
    backupId: string;
    compartmentId: string;
    region: string;
}

export interface GetMysqlMysqlBackupsBackup {
    backupSizeInGbs: number;
    backupType: string;
    compartmentId: string;
    creationType: string;
    dataStorageSizeInGb: number;
    dbSystemId: string;
    dbSystemSnapshotSummaries: outputs.GetMysqlMysqlBackupsBackupDbSystemSnapshotSummary[];
    dbSystemSnapshots: outputs.GetMysqlMysqlBackupsBackupDbSystemSnapshot[];
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    immediateSourceBackupId: string;
    lifecycleDetails: string;
    mysqlVersion: string;
    originalSourceBackupId: string;
    retentionInDays: number;
    shapeName: string;
    sourceDetails: outputs.GetMysqlMysqlBackupsBackupSourceDetail[];
    state: string;
    timeCopyCreated: string;
    timeCreated: string;
    timeUpdated: string;
}

export interface GetMysqlMysqlBackupsBackupDbSystemSnapshot {
    adminUsername: string;
    availabilityDomain: string;
    backupPolicies: outputs.GetMysqlMysqlBackupsBackupDbSystemSnapshotBackupPolicy[];
    compartmentId: string;
    configurationId: string;
    crashRecovery: string;
    dataStorageSizeInGb: number;
    dataStorages: outputs.GetMysqlMysqlBackupsBackupDbSystemSnapshotDataStorage[];
    databaseManagement: string;
    definedTags: {[key: string]: string};
    deletionPolicies: outputs.GetMysqlMysqlBackupsBackupDbSystemSnapshotDeletionPolicy[];
    description: string;
    displayName: string;
    endpoints: outputs.GetMysqlMysqlBackupsBackupDbSystemSnapshotEndpoint[];
    faultDomain: string;
    freeformTags: {[key: string]: string};
    hostnameLabel: string;
    id: string;
    ipAddress: string;
    isHighlyAvailable: boolean;
    maintenances: outputs.GetMysqlMysqlBackupsBackupDbSystemSnapshotMaintenance[];
    mysqlVersion: string;
    port: number;
    portX: number;
    region: string;
    secureConnections: outputs.GetMysqlMysqlBackupsBackupDbSystemSnapshotSecureConnection[];
    shapeName: string;
    subnetId: string;
}

export interface GetMysqlMysqlBackupsBackupDbSystemSnapshotBackupPolicy {
    definedTags: {[key: string]: string};
    freeformTags: {[key: string]: string};
    isEnabled: boolean;
    pitrPolicies: outputs.GetMysqlMysqlBackupsBackupDbSystemSnapshotBackupPolicyPitrPolicy[];
    retentionInDays: number;
    windowStartTime: string;
}

export interface GetMysqlMysqlBackupsBackupDbSystemSnapshotBackupPolicyPitrPolicy {
    isEnabled: boolean;
}

export interface GetMysqlMysqlBackupsBackupDbSystemSnapshotDataStorage {
    allocatedStorageSizeInGbs: number;
    dataStorageSizeInGb: number;
    dataStorageSizeLimitInGbs: number;
    isAutoExpandStorageEnabled: boolean;
    maxStorageSizeInGbs: number;
}

export interface GetMysqlMysqlBackupsBackupDbSystemSnapshotDeletionPolicy {
    automaticBackupRetention: string;
    finalBackup: string;
    isDeleteProtected: boolean;
}

export interface GetMysqlMysqlBackupsBackupDbSystemSnapshotEndpoint {
    hostname: string;
    ipAddress: string;
    modes: string[];
    port: number;
    portX: number;
    resourceId: string;
    resourceType: string;
    status: string;
    statusDetails: string;
}

export interface GetMysqlMysqlBackupsBackupDbSystemSnapshotMaintenance {
    windowStartTime: string;
}

export interface GetMysqlMysqlBackupsBackupDbSystemSnapshotSecureConnection {
    certificateGenerationType: string;
    certificateId: string;
}

export interface GetMysqlMysqlBackupsBackupDbSystemSnapshotSummary {
    displayName: string;
    id: string;
    region: string;
}

export interface GetMysqlMysqlBackupsBackupSourceDetail {
    backupId: string;
    compartmentId: string;
    region: string;
}

export interface GetMysqlMysqlBackupsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetMysqlMysqlConfigurationInitVariable {
    lowerCaseTableNames: string;
}

export interface GetMysqlMysqlConfigurationVariable {
    autocommit: boolean;
    bigTables: boolean;
    binlogExpireLogsSeconds: number;
    binlogRowMetadata: string;
    binlogRowValueOptions: string;
    binlogTransactionCompression: boolean;
    completionType: string;
    connectTimeout: number;
    connectionMemoryChunkSize: number;
    connectionMemoryLimit: string;
    cteMaxRecursionDepth: string;
    defaultAuthenticationPlugin: string;
    foreignKeyChecks: boolean;
    generatedRandomPasswordLength: number;
    globalConnectionMemoryLimit: string;
    globalConnectionMemoryTracking: boolean;
    groupReplicationConsistency: string;
    informationSchemaStatsExpiry: number;
    innodbBufferPoolDumpPct: number;
    innodbBufferPoolInstances: number;
    innodbBufferPoolSize: string;
    innodbDdlBufferSize: string;
    innodbDdlThreads: number;
    innodbFtEnableStopword: boolean;
    innodbFtMaxTokenSize: number;
    innodbFtMinTokenSize: number;
    innodbFtNumWordOptimize: number;
    innodbFtResultCacheLimit: string;
    innodbFtServerStopwordTable: string;
    innodbLockWaitTimeout: number;
    innodbLogWriterThreads: boolean;
    innodbMaxPurgeLag: string;
    innodbMaxPurgeLagDelay: number;
    innodbStatsPersistentSamplePages: string;
    innodbStatsTransientSamplePages: string;
    interactiveTimeout: number;
    localInfile: boolean;
    mandatoryRoles: string;
    maxAllowedPacket: number;
    maxBinlogCacheSize: string;
    maxConnectErrors: string;
    maxConnections: number;
    maxExecutionTime: string;
    maxHeapTableSize: string;
    maxPreparedStmtCount: number;
    mysqlFirewallMode: boolean;
    mysqlZstdDefaultCompressionLevel: number;
    mysqlxConnectTimeout: number;
    mysqlxDeflateDefaultCompressionLevel: number;
    mysqlxDeflateMaxClientCompressionLevel: number;
    mysqlxDocumentIdUniquePrefix: number;
    mysqlxEnableHelloNotice: boolean;
    mysqlxIdleWorkerThreadTimeout: number;
    mysqlxInteractiveTimeout: number;
    mysqlxLz4defaultCompressionLevel: number;
    mysqlxLz4maxClientCompressionLevel: number;
    mysqlxMaxAllowedPacket: number;
    mysqlxMinWorkerThreads: number;
    mysqlxReadTimeout: number;
    mysqlxWaitTimeout: number;
    mysqlxWriteTimeout: number;
    mysqlxZstdDefaultCompressionLevel: number;
    mysqlxZstdMaxClientCompressionLevel: number;
    netReadTimeout: number;
    netWriteTimeout: number;
    parserMaxMemSize: string;
    queryAllocBlockSize: string;
    queryPreallocSize: string;
    regexpTimeLimit: number;
    sortBufferSize: string;
    sqlMode: string;
    sqlRequirePrimaryKey: boolean;
    sqlWarnings: boolean;
    threadPoolDedicatedListeners: boolean;
    threadPoolMaxTransactionsLimit: number;
    timeZone: string;
    tmpTableSize: string;
    transactionIsolation: string;
    waitTimeout: number;
}

export interface GetMysqlMysqlConfigurationsConfiguration {
    compartmentId: string;
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    initVariables: outputs.GetMysqlMysqlConfigurationsConfigurationInitVariable[];
    parentConfigurationId: string;
    shapeName: string;
    state: string;
    timeCreated: string;
    timeUpdated: string;
    type: string;
    variables: outputs.GetMysqlMysqlConfigurationsConfigurationVariable[];
}

export interface GetMysqlMysqlConfigurationsConfigurationInitVariable {
    lowerCaseTableNames: string;
}

export interface GetMysqlMysqlConfigurationsConfigurationVariable {
    autocommit: boolean;
    bigTables: boolean;
    binlogExpireLogsSeconds: number;
    binlogRowMetadata: string;
    binlogRowValueOptions: string;
    binlogTransactionCompression: boolean;
    completionType: string;
    connectTimeout: number;
    connectionMemoryChunkSize: number;
    connectionMemoryLimit: string;
    cteMaxRecursionDepth: string;
    defaultAuthenticationPlugin: string;
    foreignKeyChecks: boolean;
    generatedRandomPasswordLength: number;
    globalConnectionMemoryLimit: string;
    globalConnectionMemoryTracking: boolean;
    groupReplicationConsistency: string;
    informationSchemaStatsExpiry: number;
    innodbBufferPoolDumpPct: number;
    innodbBufferPoolInstances: number;
    innodbBufferPoolSize: string;
    innodbDdlBufferSize: string;
    innodbDdlThreads: number;
    innodbFtEnableStopword: boolean;
    innodbFtMaxTokenSize: number;
    innodbFtMinTokenSize: number;
    innodbFtNumWordOptimize: number;
    innodbFtResultCacheLimit: string;
    innodbFtServerStopwordTable: string;
    innodbLockWaitTimeout: number;
    innodbLogWriterThreads: boolean;
    innodbMaxPurgeLag: string;
    innodbMaxPurgeLagDelay: number;
    innodbStatsPersistentSamplePages: string;
    innodbStatsTransientSamplePages: string;
    interactiveTimeout: number;
    localInfile: boolean;
    mandatoryRoles: string;
    maxAllowedPacket: number;
    maxBinlogCacheSize: string;
    maxConnectErrors: string;
    maxConnections: number;
    maxExecutionTime: string;
    maxHeapTableSize: string;
    maxPreparedStmtCount: number;
    mysqlFirewallMode: boolean;
    mysqlZstdDefaultCompressionLevel: number;
    mysqlxConnectTimeout: number;
    mysqlxDeflateDefaultCompressionLevel: number;
    mysqlxDeflateMaxClientCompressionLevel: number;
    mysqlxDocumentIdUniquePrefix: number;
    mysqlxEnableHelloNotice: boolean;
    mysqlxIdleWorkerThreadTimeout: number;
    mysqlxInteractiveTimeout: number;
    mysqlxLz4defaultCompressionLevel: number;
    mysqlxLz4maxClientCompressionLevel: number;
    mysqlxMaxAllowedPacket: number;
    mysqlxMinWorkerThreads: number;
    mysqlxReadTimeout: number;
    mysqlxWaitTimeout: number;
    mysqlxWriteTimeout: number;
    mysqlxZstdDefaultCompressionLevel: number;
    mysqlxZstdMaxClientCompressionLevel: number;
    netReadTimeout: number;
    netWriteTimeout: number;
    parserMaxMemSize: string;
    queryAllocBlockSize: string;
    queryPreallocSize: string;
    regexpTimeLimit: number;
    sortBufferSize: string;
    sqlMode: string;
    sqlRequirePrimaryKey: boolean;
    sqlWarnings: boolean;
    threadPoolDedicatedListeners: boolean;
    threadPoolMaxTransactionsLimit: number;
    timeZone: string;
    tmpTableSize: string;
    transactionIsolation: string;
    waitTimeout: number;
}

export interface GetMysqlMysqlConfigurationsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetMysqlMysqlDbSystemBackupPolicy {
    definedTags: {[key: string]: string};
    freeformTags: {[key: string]: string};
    isEnabled: boolean;
    pitrPolicies: outputs.GetMysqlMysqlDbSystemBackupPolicyPitrPolicy[];
    retentionInDays: number;
    windowStartTime: string;
}

export interface GetMysqlMysqlDbSystemBackupPolicyPitrPolicy {
    isEnabled: boolean;
}

export interface GetMysqlMysqlDbSystemChannel {
    compartmentId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    isEnabled: boolean;
    lifecycleDetails: string;
    sources: outputs.GetMysqlMysqlDbSystemChannelSource[];
    state: string;
    targets: outputs.GetMysqlMysqlDbSystemChannelTarget[];
    timeCreated: string;
    timeUpdated: string;
}

export interface GetMysqlMysqlDbSystemChannelSource {
    anonymousTransactionsHandlings: outputs.GetMysqlMysqlDbSystemChannelSourceAnonymousTransactionsHandling[];
    hostname: string;
    port: number;
    sourceType: string;
    sslCaCertificates: outputs.GetMysqlMysqlDbSystemChannelSourceSslCaCertificate[];
    sslMode: string;
    username: string;
}

export interface GetMysqlMysqlDbSystemChannelSourceAnonymousTransactionsHandling {
    lastConfiguredLogFilename: string;
    lastConfiguredLogOffset: string;
    policy: string;
    uuid: string;
}

export interface GetMysqlMysqlDbSystemChannelSourceSslCaCertificate {
    certificateType: string;
    contents: string;
}

export interface GetMysqlMysqlDbSystemChannelTarget {
    applierUsername: string;
    channelName: string;
    dbSystemId: string;
    delayInSeconds: number;
    filters: outputs.GetMysqlMysqlDbSystemChannelTargetFilter[];
    tablesWithoutPrimaryKeyHandling: string;
    targetType: string;
}

export interface GetMysqlMysqlDbSystemChannelTargetFilter {
    type: string;
    value: string;
}

export interface GetMysqlMysqlDbSystemCurrentPlacement {
    availabilityDomain: string;
    faultDomain: string;
}

export interface GetMysqlMysqlDbSystemCustomerContact {
    email: string;
}

export interface GetMysqlMysqlDbSystemDataStorage {
    allocatedStorageSizeInGbs: number;
    dataStorageSizeInGb: number;
    dataStorageSizeLimitInGbs: number;
    isAutoExpandStorageEnabled: boolean;
    maxStorageSizeInGbs: number;
}

export interface GetMysqlMysqlDbSystemDeletionPolicy {
    automaticBackupRetention: string;
    finalBackup: string;
    isDeleteProtected: boolean;
}

export interface GetMysqlMysqlDbSystemEndpoint {
    hostname: string;
    ipAddress: string;
    modes: string[];
    port: number;
    portX: number;
    resourceId: string;
    resourceType: string;
    status: string;
    statusDetails: string;
}

export interface GetMysqlMysqlDbSystemHeatWaveCluster {
    clusterSize: number;
    isLakehouseEnabled: boolean;
    shapeName: string;
    state: string;
    timeCreated: string;
    timeUpdated: string;
}

export interface GetMysqlMysqlDbSystemMaintenance {
    windowStartTime: string;
}

export interface GetMysqlMysqlDbSystemPointInTimeRecoveryDetail {
    timeEarliestRecoveryPoint: string;
    timeLatestRecoveryPoint: string;
}

export interface GetMysqlMysqlDbSystemSecureConnection {
    certificateGenerationType: string;
    certificateId: string;
}

export interface GetMysqlMysqlDbSystemSource {
    backupId: string;
    dbSystemId: string;
    recoveryPoint: string;
    sourceType: string;
    sourceUrl: string;
}

export interface GetMysqlMysqlDbSystemsDbSystem {
    adminPassword: string;
    adminUsername: string;
    availabilityDomain: string;
    backupPolicies: outputs.GetMysqlMysqlDbSystemsDbSystemBackupPolicy[];
    channels: outputs.GetMysqlMysqlDbSystemsDbSystemChannel[];
    compartmentId: string;
    configurationId: string;
    crashRecovery: string;
    currentPlacements: outputs.GetMysqlMysqlDbSystemsDbSystemCurrentPlacement[];
    customerContacts: outputs.GetMysqlMysqlDbSystemsDbSystemCustomerContact[];
    dataStorageSizeInGb: number;
    dataStorages: outputs.GetMysqlMysqlDbSystemsDbSystemDataStorage[];
    databaseManagement: string;
    definedTags: {[key: string]: string};
    deletionPolicies: outputs.GetMysqlMysqlDbSystemsDbSystemDeletionPolicy[];
    description: string;
    displayName: string;
    endpoints: outputs.GetMysqlMysqlDbSystemsDbSystemEndpoint[];
    faultDomain: string;
    freeformTags: {[key: string]: string};
    heatWaveClusters: outputs.GetMysqlMysqlDbSystemsDbSystemHeatWaveCluster[];
    hostnameLabel: string;
    id: string;
    ipAddress: string;
    isHeatWaveClusterAttached: boolean;
    isHighlyAvailable: boolean;
    lifecycleDetails: string;
    maintenances: outputs.GetMysqlMysqlDbSystemsDbSystemMaintenance[];
    mysqlVersion: string;
    pointInTimeRecoveryDetails: outputs.GetMysqlMysqlDbSystemsDbSystemPointInTimeRecoveryDetail[];
    port: number;
    portX: number;
    secureConnections: outputs.GetMysqlMysqlDbSystemsDbSystemSecureConnection[];
    shapeName: string;
    shutdownType: string;
    sources: outputs.GetMysqlMysqlDbSystemsDbSystemSource[];
    state: string;
    subnetId: string;
    timeCreated: string;
    timeUpdated: string;
}

export interface GetMysqlMysqlDbSystemsDbSystemBackupPolicy {
    definedTags: {[key: string]: string};
    freeformTags: {[key: string]: string};
    isEnabled: boolean;
    pitrPolicies: outputs.GetMysqlMysqlDbSystemsDbSystemBackupPolicyPitrPolicy[];
    retentionInDays: number;
    windowStartTime: string;
}

export interface GetMysqlMysqlDbSystemsDbSystemBackupPolicyPitrPolicy {
    isEnabled: boolean;
}

export interface GetMysqlMysqlDbSystemsDbSystemChannel {
    compartmentId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    isEnabled: boolean;
    lifecycleDetails: string;
    sources: outputs.GetMysqlMysqlDbSystemsDbSystemChannelSource[];
    state: string;
    targets: outputs.GetMysqlMysqlDbSystemsDbSystemChannelTarget[];
    timeCreated: string;
    timeUpdated: string;
}

export interface GetMysqlMysqlDbSystemsDbSystemChannelSource {
    anonymousTransactionsHandlings: outputs.GetMysqlMysqlDbSystemsDbSystemChannelSourceAnonymousTransactionsHandling[];
    hostname: string;
    port: number;
    sourceType: string;
    sslCaCertificates: outputs.GetMysqlMysqlDbSystemsDbSystemChannelSourceSslCaCertificate[];
    sslMode: string;
    username: string;
}

export interface GetMysqlMysqlDbSystemsDbSystemChannelSourceAnonymousTransactionsHandling {
    lastConfiguredLogFilename: string;
    lastConfiguredLogOffset: string;
    policy: string;
    uuid: string;
}

export interface GetMysqlMysqlDbSystemsDbSystemChannelSourceSslCaCertificate {
    certificateType: string;
    contents: string;
}

export interface GetMysqlMysqlDbSystemsDbSystemChannelTarget {
    applierUsername: string;
    channelName: string;
    dbSystemId: string;
    delayInSeconds: number;
    filters: outputs.GetMysqlMysqlDbSystemsDbSystemChannelTargetFilter[];
    tablesWithoutPrimaryKeyHandling: string;
    targetType: string;
}

export interface GetMysqlMysqlDbSystemsDbSystemChannelTargetFilter {
    type: string;
    value: string;
}

export interface GetMysqlMysqlDbSystemsDbSystemCurrentPlacement {
    availabilityDomain: string;
    faultDomain: string;
}

export interface GetMysqlMysqlDbSystemsDbSystemCustomerContact {
    email: string;
}

export interface GetMysqlMysqlDbSystemsDbSystemDataStorage {
    allocatedStorageSizeInGbs: number;
    dataStorageSizeInGb: number;
    dataStorageSizeLimitInGbs: number;
    isAutoExpandStorageEnabled: boolean;
    maxStorageSizeInGbs: number;
}

export interface GetMysqlMysqlDbSystemsDbSystemDeletionPolicy {
    automaticBackupRetention: string;
    finalBackup: string;
    isDeleteProtected: boolean;
}

export interface GetMysqlMysqlDbSystemsDbSystemEndpoint {
    hostname: string;
    ipAddress: string;
    modes: string[];
    port: number;
    portX: number;
    resourceId: string;
    resourceType: string;
    status: string;
    statusDetails: string;
}

export interface GetMysqlMysqlDbSystemsDbSystemHeatWaveCluster {
    clusterSize: number;
    isLakehouseEnabled: boolean;
    shapeName: string;
    state: string;
    timeCreated: string;
    timeUpdated: string;
}

export interface GetMysqlMysqlDbSystemsDbSystemMaintenance {
    windowStartTime: string;
}

export interface GetMysqlMysqlDbSystemsDbSystemPointInTimeRecoveryDetail {
    timeEarliestRecoveryPoint: string;
    timeLatestRecoveryPoint: string;
}

export interface GetMysqlMysqlDbSystemsDbSystemSecureConnection {
    certificateGenerationType: string;
    certificateId: string;
}

export interface GetMysqlMysqlDbSystemsDbSystemSource {
    backupId: string;
    dbSystemId: string;
    recoveryPoint: string;
    sourceType: string;
    sourceUrl: string;
}

export interface GetMysqlMysqlDbSystemsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetMysqlMysqlVersionsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetMysqlMysqlVersionsVersion {
    versionFamily: string;
    versions: outputs.GetMysqlMysqlVersionsVersionVersion[];
}

export interface GetMysqlMysqlVersionsVersionVersion {
    description: string;
    version: string;
}

export interface GetMysqlReplicaReplicaOverride {
    configurationId: string;
    mysqlVersion: string;
    shapeName: string;
}

export interface GetMysqlReplicaSecureConnection {
    certificateGenerationType: string;
    certificateId: string;
}

export interface GetMysqlReplicasFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetMysqlReplicasReplica {
    availabilityDomain: string;
    compartmentId: string;
    configurationId: string;
    dbSystemId: string;
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    faultDomain: string;
    freeformTags: {[key: string]: string};
    id: string;
    ipAddress: string;
    isDeleteProtected: boolean;
    lifecycleDetails: string;
    mysqlVersion: string;
    port: number;
    portX: number;
    replicaOverrides: outputs.GetMysqlReplicasReplicaReplicaOverride[];
    secureConnections: outputs.GetMysqlReplicasReplicaSecureConnection[];
    shapeName: string;
    state: string;
    timeCreated: string;
    timeUpdated: string;
}

export interface GetMysqlReplicasReplicaReplicaOverride {
    configurationId: string;
    mysqlVersion: string;
    shapeName: string;
}

export interface GetMysqlReplicasReplicaSecureConnection {
    certificateGenerationType: string;
    certificateId: string;
}

export interface GetMysqlShapesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetMysqlShapesShape {
    cpuCoreCount: number;
    isSupportedFors: string[];
    memorySizeInGbs: number;
    name: string;
}

export interface GetNetworkFirewallNetworkFirewallPoliciesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetNetworkFirewallNetworkFirewallPoliciesNetworkFirewallPolicySummaryCollection {
    items: outputs.GetNetworkFirewallNetworkFirewallPoliciesNetworkFirewallPolicySummaryCollectionItem[];
}

export interface GetNetworkFirewallNetworkFirewallPoliciesNetworkFirewallPolicySummaryCollectionItem {
    attachedNetworkFirewallCount: number;
    compartmentId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    lifecycleDetails: string;
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
}

export interface GetNetworkFirewallNetworkFirewallPolicyAddressListsAddressListSummaryCollection {
    items: outputs.GetNetworkFirewallNetworkFirewallPolicyAddressListsAddressListSummaryCollectionItem[];
}

export interface GetNetworkFirewallNetworkFirewallPolicyAddressListsAddressListSummaryCollectionItem {
    addresses: string[];
    name: string;
    networkFirewallPolicyId: string;
    parentResourceId: string;
    totalAddresses: number;
    type: string;
}

export interface GetNetworkFirewallNetworkFirewallPolicyAddressListsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetNetworkFirewallNetworkFirewallPolicyApplicationGroupsApplicationGroupSummaryCollection {
    items: outputs.GetNetworkFirewallNetworkFirewallPolicyApplicationGroupsApplicationGroupSummaryCollectionItem[];
}

export interface GetNetworkFirewallNetworkFirewallPolicyApplicationGroupsApplicationGroupSummaryCollectionItem {
    apps: string[];
    name: string;
    networkFirewallPolicyId: string;
    parentResourceId: string;
    totalApps: number;
}

export interface GetNetworkFirewallNetworkFirewallPolicyApplicationGroupsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetNetworkFirewallNetworkFirewallPolicyApplicationsApplicationSummaryCollection {
    items: outputs.GetNetworkFirewallNetworkFirewallPolicyApplicationsApplicationSummaryCollectionItem[];
}

export interface GetNetworkFirewallNetworkFirewallPolicyApplicationsApplicationSummaryCollectionItem {
    icmpCode: number;
    icmpType: number;
    name: string;
    networkFirewallPolicyId: string;
    parentResourceId: string;
    type: string;
}

export interface GetNetworkFirewallNetworkFirewallPolicyApplicationsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetNetworkFirewallNetworkFirewallPolicyDecryptionProfilesDecryptionProfileSummaryCollection {
    items: outputs.GetNetworkFirewallNetworkFirewallPolicyDecryptionProfilesDecryptionProfileSummaryCollectionItem[];
}

export interface GetNetworkFirewallNetworkFirewallPolicyDecryptionProfilesDecryptionProfileSummaryCollectionItem {
    areCertificateExtensionsRestricted: boolean;
    isAutoIncludeAltName: boolean;
    isExpiredCertificateBlocked: boolean;
    isOutOfCapacityBlocked: boolean;
    isRevocationStatusTimeoutBlocked: boolean;
    isUnknownRevocationStatusBlocked: boolean;
    isUnsupportedCipherBlocked: boolean;
    isUnsupportedVersionBlocked: boolean;
    isUntrustedIssuerBlocked: boolean;
    name: string;
    networkFirewallPolicyId: string;
    parentResourceId: string;
    type: string;
}

export interface GetNetworkFirewallNetworkFirewallPolicyDecryptionProfilesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetNetworkFirewallNetworkFirewallPolicyDecryptionRuleCondition {
    destinationAddresses: string[];
    sourceAddresses: string[];
}

export interface GetNetworkFirewallNetworkFirewallPolicyDecryptionRulePosition {
    afterRule: string;
    beforeRule: string;
}

export interface GetNetworkFirewallNetworkFirewallPolicyDecryptionRulesDecryptionRuleSummaryCollection {
    items: outputs.GetNetworkFirewallNetworkFirewallPolicyDecryptionRulesDecryptionRuleSummaryCollectionItem[];
}

export interface GetNetworkFirewallNetworkFirewallPolicyDecryptionRulesDecryptionRuleSummaryCollectionItem {
    action: string;
    conditions: outputs.GetNetworkFirewallNetworkFirewallPolicyDecryptionRulesDecryptionRuleSummaryCollectionItemCondition[];
    decryptionProfile: string;
    name: string;
    networkFirewallPolicyId: string;
    parentResourceId: string;
    positions: outputs.GetNetworkFirewallNetworkFirewallPolicyDecryptionRulesDecryptionRuleSummaryCollectionItemPosition[];
    priorityOrder: string;
    secret: string;
}

export interface GetNetworkFirewallNetworkFirewallPolicyDecryptionRulesDecryptionRuleSummaryCollectionItemCondition {
    destinationAddresses: string[];
    sourceAddresses: string[];
}

export interface GetNetworkFirewallNetworkFirewallPolicyDecryptionRulesDecryptionRuleSummaryCollectionItemPosition {
    afterRule: string;
    beforeRule: string;
}

export interface GetNetworkFirewallNetworkFirewallPolicyDecryptionRulesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetNetworkFirewallNetworkFirewallPolicyMappedSecretsMappedSecretSummaryCollection {
    items: outputs.GetNetworkFirewallNetworkFirewallPolicyMappedSecretsMappedSecretSummaryCollectionItem[];
}

export interface GetNetworkFirewallNetworkFirewallPolicyMappedSecretsMappedSecretSummaryCollectionItem {
    name: string;
    networkFirewallPolicyId: string;
    parentResourceId: string;
    source: string;
    type: string;
    vaultSecretId: string;
    versionNumber: number;
}

export interface GetNetworkFirewallNetworkFirewallPolicySecurityRuleCondition {
    applications: string[];
    destinationAddresses: string[];
    services: string[];
    sourceAddresses: string[];
    urls: string[];
}

export interface GetNetworkFirewallNetworkFirewallPolicySecurityRulePosition {
    afterRule: string;
    beforeRule: string;
}

export interface GetNetworkFirewallNetworkFirewallPolicySecurityRulesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetNetworkFirewallNetworkFirewallPolicySecurityRulesSecurityRuleSummaryCollection {
    items: outputs.GetNetworkFirewallNetworkFirewallPolicySecurityRulesSecurityRuleSummaryCollectionItem[];
}

export interface GetNetworkFirewallNetworkFirewallPolicySecurityRulesSecurityRuleSummaryCollectionItem {
    action: string;
    conditions: outputs.GetNetworkFirewallNetworkFirewallPolicySecurityRulesSecurityRuleSummaryCollectionItemCondition[];
    inspection: string;
    name: string;
    networkFirewallPolicyId: string;
    parentResourceId: string;
    positions: outputs.GetNetworkFirewallNetworkFirewallPolicySecurityRulesSecurityRuleSummaryCollectionItemPosition[];
    priorityOrder: string;
}

export interface GetNetworkFirewallNetworkFirewallPolicySecurityRulesSecurityRuleSummaryCollectionItemCondition {
    applications: string[];
    destinationAddresses: string[];
    services: string[];
    sourceAddresses: string[];
    urls: string[];
}

export interface GetNetworkFirewallNetworkFirewallPolicySecurityRulesSecurityRuleSummaryCollectionItemPosition {
    afterRule: string;
    beforeRule: string;
}

export interface GetNetworkFirewallNetworkFirewallPolicyServiceListsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetNetworkFirewallNetworkFirewallPolicyServiceListsServiceListSummaryCollection {
    items: outputs.GetNetworkFirewallNetworkFirewallPolicyServiceListsServiceListSummaryCollectionItem[];
}

export interface GetNetworkFirewallNetworkFirewallPolicyServiceListsServiceListSummaryCollectionItem {
    name: string;
    networkFirewallPolicyId: string;
    parentResourceId: string;
    services: string[];
    totalServices: number;
}

export interface GetNetworkFirewallNetworkFirewallPolicyServicePortRange {
    maximumPort: number;
    minimumPort: number;
}

export interface GetNetworkFirewallNetworkFirewallPolicyServicesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetNetworkFirewallNetworkFirewallPolicyServicesServiceSummaryCollection {
    items: outputs.GetNetworkFirewallNetworkFirewallPolicyServicesServiceSummaryCollectionItem[];
}

export interface GetNetworkFirewallNetworkFirewallPolicyServicesServiceSummaryCollectionItem {
    name: string;
    networkFirewallPolicyId: string;
    parentResourceId: string;
    portRanges: outputs.GetNetworkFirewallNetworkFirewallPolicyServicesServiceSummaryCollectionItemPortRange[];
    type: string;
}

export interface GetNetworkFirewallNetworkFirewallPolicyServicesServiceSummaryCollectionItemPortRange {
    maximumPort: number;
    minimumPort: number;
}

export interface GetNetworkFirewallNetworkFirewallPolicyTunnelInspectionRuleCondition {
    destinationAddresses: string[];
    sourceAddresses: string[];
}

export interface GetNetworkFirewallNetworkFirewallPolicyTunnelInspectionRulePosition {
    afterRule: string;
    beforeRule: string;
}

export interface GetNetworkFirewallNetworkFirewallPolicyTunnelInspectionRuleProfile {
    mustReturnTrafficToSource: boolean;
}

export interface GetNetworkFirewallNetworkFirewallPolicyTunnelInspectionRulesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetNetworkFirewallNetworkFirewallPolicyTunnelInspectionRulesTunnelInspectionRuleSummaryCollection {
    items: outputs.GetNetworkFirewallNetworkFirewallPolicyTunnelInspectionRulesTunnelInspectionRuleSummaryCollectionItem[];
}

export interface GetNetworkFirewallNetworkFirewallPolicyTunnelInspectionRulesTunnelInspectionRuleSummaryCollectionItem {
    action: string;
    conditions: outputs.GetNetworkFirewallNetworkFirewallPolicyTunnelInspectionRulesTunnelInspectionRuleSummaryCollectionItemCondition[];
    name: string;
    networkFirewallPolicyId: string;
    parentResourceId: string;
    positions: outputs.GetNetworkFirewallNetworkFirewallPolicyTunnelInspectionRulesTunnelInspectionRuleSummaryCollectionItemPosition[];
    priorityOrder: string;
    profiles: outputs.GetNetworkFirewallNetworkFirewallPolicyTunnelInspectionRulesTunnelInspectionRuleSummaryCollectionItemProfile[];
    protocol: string;
}

export interface GetNetworkFirewallNetworkFirewallPolicyTunnelInspectionRulesTunnelInspectionRuleSummaryCollectionItemCondition {
    destinationAddresses: string[];
    sourceAddresses: string[];
}

export interface GetNetworkFirewallNetworkFirewallPolicyTunnelInspectionRulesTunnelInspectionRuleSummaryCollectionItemPosition {
    afterRule: string;
    beforeRule: string;
}

export interface GetNetworkFirewallNetworkFirewallPolicyTunnelInspectionRulesTunnelInspectionRuleSummaryCollectionItemProfile {
    mustReturnTrafficToSource: boolean;
}

export interface GetNetworkFirewallNetworkFirewallPolicyUrlListUrl {
    pattern: string;
    type: string;
}

export interface GetNetworkFirewallNetworkFirewallPolicyUrlListsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetNetworkFirewallNetworkFirewallPolicyUrlListsUrlListSummaryCollection {
    items: outputs.GetNetworkFirewallNetworkFirewallPolicyUrlListsUrlListSummaryCollectionItem[];
}

export interface GetNetworkFirewallNetworkFirewallPolicyUrlListsUrlListSummaryCollectionItem {
    name: string;
    networkFirewallPolicyId: string;
    parentResourceId: string;
    totalUrls: number;
    urls: outputs.GetNetworkFirewallNetworkFirewallPolicyUrlListsUrlListSummaryCollectionItemUrl[];
}

export interface GetNetworkFirewallNetworkFirewallPolicyUrlListsUrlListSummaryCollectionItemUrl {
    pattern: string;
    type: string;
}

export interface GetNetworkFirewallNetworkFirewallsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetNetworkFirewallNetworkFirewallsNetworkFirewallCollection {
    items: outputs.GetNetworkFirewallNetworkFirewallsNetworkFirewallCollectionItem[];
}

export interface GetNetworkFirewallNetworkFirewallsNetworkFirewallCollectionItem {
    availabilityDomain: string;
    compartmentId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    ipv4address: string;
    ipv6address: string;
    lifecycleDetails: string;
    networkFirewallPolicyId: string;
    networkSecurityGroupIds: string[];
    state: string;
    subnetId: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
}

export interface GetNetworkLoadBalancerBackendHealthHealthCheckResult {
    healthCheckStatus: string;
    timestamp: string;
}

export interface GetNetworkLoadBalancerBackendSetBackend {
    ipAddress: string;
    isBackup: boolean;
    isDrain: boolean;
    isOffline: boolean;
    name: string;
    port: number;
    targetId: string;
    weight: number;
}

export interface GetNetworkLoadBalancerBackendSetHealthChecker {
    dns: outputs.GetNetworkLoadBalancerBackendSetHealthCheckerDn[];
    intervalInMillis: number;
    port: number;
    protocol: string;
    requestData: string;
    responseBodyRegex: string;
    responseData: string;
    retries: number;
    returnCode: number;
    timeoutInMillis: number;
    urlPath: string;
}

export interface GetNetworkLoadBalancerBackendSetHealthCheckerDn {
    domainName: string;
    queryClass: string;
    queryType: string;
    rcodes: string[];
    transportProtocol: string;
}

export interface GetNetworkLoadBalancerBackendSetsBackendSetCollection {
    items: outputs.GetNetworkLoadBalancerBackendSetsBackendSetCollectionItem[];
}

export interface GetNetworkLoadBalancerBackendSetsBackendSetCollectionItem {
    backends: outputs.GetNetworkLoadBalancerBackendSetsBackendSetCollectionItemBackend[];
    healthCheckers: outputs.GetNetworkLoadBalancerBackendSetsBackendSetCollectionItemHealthChecker[];
    id: string;
    ipVersion: string;
    isFailOpen: boolean;
    isInstantFailoverEnabled: boolean;
    isPreserveSource: boolean;
    name: string;
    networkLoadBalancerId: string;
    policy: string;
}

export interface GetNetworkLoadBalancerBackendSetsBackendSetCollectionItemBackend {
    ipAddress: string;
    isBackup: boolean;
    isDrain: boolean;
    isOffline: boolean;
    name: string;
    port: number;
    targetId: string;
    weight: number;
}

export interface GetNetworkLoadBalancerBackendSetsBackendSetCollectionItemHealthChecker {
    dns: outputs.GetNetworkLoadBalancerBackendSetsBackendSetCollectionItemHealthCheckerDn[];
    intervalInMillis: number;
    port: number;
    protocol: string;
    requestData: string;
    responseBodyRegex: string;
    responseData: string;
    retries: number;
    returnCode: number;
    timeoutInMillis: number;
    urlPath: string;
}

export interface GetNetworkLoadBalancerBackendSetsBackendSetCollectionItemHealthCheckerDn {
    domainName: string;
    queryClass: string;
    queryType: string;
    rcodes: string[];
    transportProtocol: string;
}

export interface GetNetworkLoadBalancerBackendSetsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetNetworkLoadBalancerBackendsBackendCollection {
    items: outputs.GetNetworkLoadBalancerBackendsBackendCollectionItem[];
}

export interface GetNetworkLoadBalancerBackendsBackendCollectionItem {
    backendSetName: string;
    id: string;
    ipAddress: string;
    isBackup: boolean;
    isDrain: boolean;
    isOffline: boolean;
    name: string;
    networkLoadBalancerId: string;
    port: number;
    targetId: string;
    weight: number;
}

export interface GetNetworkLoadBalancerBackendsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetNetworkLoadBalancerListenersFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetNetworkLoadBalancerListenersListenerCollection {
    items: outputs.GetNetworkLoadBalancerListenersListenerCollectionItem[];
}

export interface GetNetworkLoadBalancerListenersListenerCollectionItem {
    defaultBackendSetName: string;
    id: string;
    ipVersion: string;
    isPpv2enabled: boolean;
    name: string;
    networkLoadBalancerId: string;
    port: number;
    protocol: string;
    tcpIdleTimeout: number;
    udpIdleTimeout: number;
}

export interface GetNetworkLoadBalancerNetworkLoadBalancerIpAddress {
    ipAddress: string;
    ipVersion: string;
    isPublic: boolean;
    reservedIps: outputs.GetNetworkLoadBalancerNetworkLoadBalancerIpAddressReservedIp[];
}

export interface GetNetworkLoadBalancerNetworkLoadBalancerIpAddressReservedIp {
    id: string;
}

export interface GetNetworkLoadBalancerNetworkLoadBalancerReservedIp {
    id: string;
}

export interface GetNetworkLoadBalancerNetworkLoadBalancersFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetNetworkLoadBalancerNetworkLoadBalancersNetworkLoadBalancerCollection {
    items: outputs.GetNetworkLoadBalancerNetworkLoadBalancersNetworkLoadBalancerCollectionItem[];
}

export interface GetNetworkLoadBalancerNetworkLoadBalancersNetworkLoadBalancerCollectionItem {
    assignedIpv6: string;
    assignedPrivateIpv4: string;
    compartmentId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    ipAddresses: outputs.GetNetworkLoadBalancerNetworkLoadBalancersNetworkLoadBalancerCollectionItemIpAddress[];
    isPreserveSourceDestination: boolean;
    isPrivate: boolean;
    isSymmetricHashEnabled: boolean;
    lifecycleDetails: string;
    networkSecurityGroupIds: string[];
    nlbIpVersion: string;
    reservedIps: outputs.GetNetworkLoadBalancerNetworkLoadBalancersNetworkLoadBalancerCollectionItemReservedIp[];
    state: string;
    subnetId: string;
    subnetIpv6cidr: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
}

export interface GetNetworkLoadBalancerNetworkLoadBalancersNetworkLoadBalancerCollectionItemIpAddress {
    ipAddress: string;
    ipVersion: string;
    isPublic: boolean;
    reservedIps: outputs.GetNetworkLoadBalancerNetworkLoadBalancersNetworkLoadBalancerCollectionItemIpAddressReservedIp[];
}

export interface GetNetworkLoadBalancerNetworkLoadBalancersNetworkLoadBalancerCollectionItemIpAddressReservedIp {
    id: string;
}

export interface GetNetworkLoadBalancerNetworkLoadBalancersNetworkLoadBalancerCollectionItemReservedIp {
    id: string;
}

export interface GetNetworkLoadBalancerNetworkLoadBalancersPoliciesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetNetworkLoadBalancerNetworkLoadBalancersPoliciesNetworkLoadBalancersPolicyCollection {
    items: string[];
}

export interface GetNetworkLoadBalancerNetworkLoadBalancersProtocolsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetNetworkLoadBalancerNetworkLoadBalancersProtocolsNetworkLoadBalancersProtocolCollection {
    items: string[];
}

export interface GetNosqlIndexKey {
    columnName: string;
    jsonFieldType: string;
    jsonPath: string;
}

export interface GetNosqlIndexesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetNosqlIndexesIndexCollection {
    compartmentId: string;
    id: string;
    isIfNotExists: boolean;
    keys: outputs.GetNosqlIndexesIndexCollectionKey[];
    lifecycleDetails: string;
    name: string;
    state: string;
    tableId: string;
    tableName: string;
    tableNameOrId: string;
}

export interface GetNosqlIndexesIndexCollectionKey {
    columnName: string;
    jsonFieldType: string;
    jsonPath: string;
}

export interface GetNosqlTableReplica {
    capacityMode: string;
    lifecycleDetails: string;
    maxWriteUnits: number;
    region: string;
    state: string;
    tableId: string;
}

export interface GetNosqlTableSchema {
    columns: outputs.GetNosqlTableSchemaColumn[];
    identities: outputs.GetNosqlTableSchemaIdentity[];
    primaryKeys: string[];
    shardKeys: string[];
    ttl: number;
}

export interface GetNosqlTableSchemaColumn {
    defaultValue: string;
    isAsUuid: boolean;
    isGenerated: boolean;
    isNullable: boolean;
    name: string;
    type: string;
}

export interface GetNosqlTableSchemaIdentity {
    columnName: string;
    isAlways: boolean;
    isNull: boolean;
}

export interface GetNosqlTableTableLimit {
    capacityMode: string;
    maxReadUnits: number;
    maxStorageInGbs: number;
    maxWriteUnits: number;
}

export interface GetNosqlTablesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetNosqlTablesTableCollection {
    compartmentId: string;
    ddlStatement: string;
    definedTags: {[key: string]: string};
    freeformTags: {[key: string]: string};
    id: string;
    isAutoReclaimable: boolean;
    isMultiRegion: boolean;
    lifecycleDetails: string;
    localReplicaInitializationInPercent: number;
    name: string;
    replicas: outputs.GetNosqlTablesTableCollectionReplica[];
    schemaState: string;
    schemas: outputs.GetNosqlTablesTableCollectionSchema[];
    state: string;
    systemTags: {[key: string]: string};
    tableLimits: outputs.GetNosqlTablesTableCollectionTableLimit[];
    timeCreated: string;
    timeOfExpiration: string;
    timeUpdated: string;
}

export interface GetNosqlTablesTableCollectionReplica {
    capacityMode: string;
    lifecycleDetails: string;
    maxWriteUnits: number;
    region: string;
    state: string;
    tableId: string;
}

export interface GetNosqlTablesTableCollectionSchema {
    columns: outputs.GetNosqlTablesTableCollectionSchemaColumn[];
    identities: outputs.GetNosqlTablesTableCollectionSchemaIdentity[];
    primaryKeys: string[];
    shardKeys: string[];
    ttl: number;
}

export interface GetNosqlTablesTableCollectionSchemaColumn {
    defaultValue: string;
    isAsUuid: boolean;
    isGenerated: boolean;
    isNullable: boolean;
    name: string;
    type: string;
}

export interface GetNosqlTablesTableCollectionSchemaIdentity {
    columnName: string;
    isAlways: boolean;
    isNull: boolean;
}

export interface GetNosqlTablesTableCollectionTableLimit {
    capacityMode: string;
    maxReadUnits: number;
    maxStorageInGbs: number;
    maxWriteUnits: number;
}

export interface GetObjectstorageBucketRetentionRule {
    displayName: string;
    durations: outputs.GetObjectstorageBucketRetentionRuleDuration[];
    retentionRuleId: string;
    timeCreated: string;
    timeModified: string;
    timeRuleLocked: string;
}

export interface GetObjectstorageBucketRetentionRuleDuration {
    timeAmount: string;
    timeUnit: string;
}

export interface GetObjectstorageBucketSummariesBucketSummary {
    accessType: string;
    approximateCount: string;
    approximateSize: string;
    autoTiering: string;
    bucketId: string;
    compartmentId: string;
    createdBy: string;
    definedTags: {[key: string]: string};
    etag: string;
    freeformTags: {[key: string]: string};
    id: string;
    isReadOnly: boolean;
    kmsKeyId: string;
    metadata: {[key: string]: string};
    name: string;
    namespace: string;
    objectEventsEnabled: boolean;
    objectLifecyclePolicyEtag: string;
    replicationEnabled: boolean;
    retentionRules: outputs.GetObjectstorageBucketSummariesBucketSummaryRetentionRule[];
    storageTier: string;
    timeCreated: string;
    versioning: string;
}

export interface GetObjectstorageBucketSummariesBucketSummaryRetentionRule {
    displayName: string;
    durations: outputs.GetObjectstorageBucketSummariesBucketSummaryRetentionRuleDuration[];
    retentionRuleId: string;
    timeCreated: string;
    timeModified: string;
    timeRuleLocked: string;
}

export interface GetObjectstorageBucketSummariesBucketSummaryRetentionRuleDuration {
    timeAmount: string;
    timeUnit: string;
}

export interface GetObjectstorageBucketSummariesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetObjectstorageObjectLifecyclePolicyRule {
    action: string;
    isEnabled: boolean;
    name: string;
    objectNameFilters: outputs.GetObjectstorageObjectLifecyclePolicyRuleObjectNameFilter[];
    target: string;
    timeAmount: string;
    timeUnit: string;
}

export interface GetObjectstorageObjectLifecyclePolicyRuleObjectNameFilter {
    exclusionPatterns: string[];
    inclusionPatterns: string[];
    inclusionPrefixes: string[];
}

export interface GetObjectstorageObjectVersionsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetObjectstorageObjectVersionsItem {
    archivalState: string;
    etag: string;
    isDeleteMarker: boolean;
    md5: string;
    name: string;
    size: string;
    storageTier: string;
    timeCreated: string;
    timeModified: string;
    versionId: string;
}

export interface GetObjectstorageObjectsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetObjectstorageObjectsObject {
    archivalState: string;
    etag: string;
    md5: string;
    name: string;
    size: string;
    storageTier: string;
    timeCreated: string;
    timeModified: string;
}

export interface GetObjectstoragePreauthrequestsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetObjectstoragePreauthrequestsPreauthenticatedRequest {
    accessType: string;
    accessUri: string;
    bucket: string;
    bucketListingAction: string;
    fullPath: string;
    id: string;
    name: string;
    namespace: string;
    object: string;
    objectName: string;
    parId: string;
    timeCreated: string;
    timeExpires: string;
}

export interface GetObjectstorageReplicationPoliciesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetObjectstorageReplicationPoliciesReplicationPolicy {
    bucket: string;
    deleteObjectInDestinationBucket: string;
    destinationBucketName: string;
    destinationRegionName: string;
    id: string;
    name: string;
    namespace: string;
    status: string;
    statusMessage: string;
    timeCreated: string;
    timeLastSync: string;
}

export interface GetObjectstorageReplicationSourcesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetObjectstorageReplicationSourcesReplicationSource {
    policyName: string;
    sourceBucketName: string;
    sourceRegionName: string;
}

export interface GetOceOceInstancesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetOceOceInstancesOceInstance {
    addOnFeatures: string[];
    adminEmail: string;
    compartmentId: string;
    definedTags: {[key: string]: string};
    description: string;
    drRegion: string;
    freeformTags: {[key: string]: string};
    guid: string;
    id: string;
    idcsAccessToken: string;
    idcsTenancy: string;
    instanceAccessType: string;
    instanceLicenseType: string;
    instanceUsageType: string;
    lifecycleDetails: string;
    name: string;
    objectStorageNamespace: string;
    service: {[key: string]: string};
    state: string;
    stateMessage: string;
    systemTags: {[key: string]: string};
    tenancyId: string;
    tenancyName: string;
    timeCreated: string;
    timeUpdated: string;
    upgradeSchedule: string;
    wafPrimaryDomain: string;
}

export interface GetOcvpClusterDatastore {
    blockVolumeIds: string[];
    capacity: number;
    datastoreType: string;
}

export interface GetOcvpClusterNetworkConfiguration {
    hcxVlanId: string;
    nsxEdgeUplink1vlanId: string;
    nsxEdgeUplink2vlanId: string;
    nsxEdgeVtepVlanId: string;
    nsxVtepVlanId: string;
    provisioningSubnetId: string;
    provisioningVlanId: string;
    replicationVlanId: string;
    vmotionVlanId: string;
    vsanVlanId: string;
    vsphereVlanId: string;
}

export interface GetOcvpClusterUpgradeLicense {
    licenseKey: string;
    licenseType: string;
}

export interface GetOcvpClusterVsphereUpgradeObject {
    downloadLink: string;
    linkDescription: string;
}

export interface GetOcvpClustersClusterCollection {
    items: outputs.GetOcvpClustersClusterCollectionItem[];
}

export interface GetOcvpClustersClusterCollectionItem {
    actualEsxiHostsCount: number;
    capacityReservationId: string;
    compartmentId: string;
    computeAvailabilityDomain: string;
    datastores: outputs.GetOcvpClustersClusterCollectionItemDatastore[];
    definedTags: {[key: string]: string};
    displayName: string;
    esxiHostsCount: number;
    esxiSoftwareVersion: string;
    freeformTags: {[key: string]: string};
    id: string;
    initialCommitment: string;
    initialHostOcpuCount: number;
    initialHostShapeName: string;
    instanceDisplayNamePrefix: string;
    isShieldedInstanceEnabled: boolean;
    networkConfigurations: outputs.GetOcvpClustersClusterCollectionItemNetworkConfiguration[];
    sddcId: string;
    state: string;
    timeCreated: string;
    timeUpdated: string;
    upgradeLicenses: outputs.GetOcvpClustersClusterCollectionItemUpgradeLicense[];
    vmwareSoftwareVersion: string;
    vsphereType: string;
    vsphereUpgradeObjects: outputs.GetOcvpClustersClusterCollectionItemVsphereUpgradeObject[];
    workloadNetworkCidr: string;
}

export interface GetOcvpClustersClusterCollectionItemDatastore {
    blockVolumeIds: string[];
    capacity: number;
    datastoreType: string;
}

export interface GetOcvpClustersClusterCollectionItemNetworkConfiguration {
    hcxVlanId: string;
    nsxEdgeUplink1vlanId: string;
    nsxEdgeUplink2vlanId: string;
    nsxEdgeVtepVlanId: string;
    nsxVtepVlanId: string;
    provisioningSubnetId: string;
    provisioningVlanId: string;
    replicationVlanId: string;
    vmotionVlanId: string;
    vsanVlanId: string;
    vsphereVlanId: string;
}

export interface GetOcvpClustersClusterCollectionItemUpgradeLicense {
    licenseKey: string;
    licenseType: string;
}

export interface GetOcvpClustersClusterCollectionItemVsphereUpgradeObject {
    downloadLink: string;
    linkDescription: string;
}

export interface GetOcvpClustersFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetOcvpEsxiHostsEsxiHostCollection {
    billingContractEndDate: string;
    billingDonorHostId: string;
    capacityReservationId: string;
    clusterId: string;
    compartmentId: string;
    computeAvailabilityDomain: string;
    computeInstanceId: string;
    currentCommitment: string;
    currentSku: string;
    definedTags: {[key: string]: string};
    displayName: string;
    esxiSoftwareVersion: string;
    failedEsxiHostId: string;
    freeformTags: {[key: string]: string};
    gracePeriodEndDate: string;
    hostOcpuCount: number;
    hostShapeName: string;
    id: string;
    isBillingContinuationInProgress: boolean;
    isBillingSwappingInProgress: boolean;
    nextCommitment: string;
    nextSku: string;
    nonUpgradedEsxiHostId: string;
    replacementEsxiHostId: string;
    sddcId: string;
    state: string;
    swapBillingHostId: string;
    timeCreated: string;
    timeUpdated: string;
    upgradedReplacementEsxiHostId: string;
    vmwareSoftwareVersion: string;
}

export interface GetOcvpEsxiHostsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetOcvpSddcDatastore {
    blockVolumeIds: string[];
    capacity: number;
    datastoreType: string;
}

export interface GetOcvpSddcHcxOnPremLicense {
    activationKey: string;
    status: string;
    systemName: string;
}

export interface GetOcvpSddcInitialConfiguration {
    initialClusterConfigurations: outputs.GetOcvpSddcInitialConfigurationInitialClusterConfiguration[];
}

export interface GetOcvpSddcInitialConfigurationInitialClusterConfiguration {
    actualEsxiHostsCount: number;
    capacityReservationId: string;
    computeAvailabilityDomain: string;
    datastores: outputs.GetOcvpSddcInitialConfigurationInitialClusterConfigurationDatastore[];
    displayName: string;
    esxiHostsCount: number;
    initialCommitment: string;
    initialHostOcpuCount: number;
    initialHostShapeName: string;
    instanceDisplayNamePrefix: string;
    isShieldedInstanceEnabled: boolean;
    networkConfigurations: outputs.GetOcvpSddcInitialConfigurationInitialClusterConfigurationNetworkConfiguration[];
    vsphereType: string;
    workloadNetworkCidr: string;
}

export interface GetOcvpSddcInitialConfigurationInitialClusterConfigurationDatastore {
    blockVolumeIds: string[];
    datastoreType: string;
}

export interface GetOcvpSddcInitialConfigurationInitialClusterConfigurationNetworkConfiguration {
    hcxVlanId: string;
    nsxEdgeUplink1vlanId: string;
    nsxEdgeUplink2vlanId: string;
    nsxEdgeVtepVlanId: string;
    nsxVtepVlanId: string;
    provisioningSubnetId: string;
    provisioningVlanId: string;
    replicationVlanId: string;
    vmotionVlanId: string;
    vsanVlanId: string;
    vsphereVlanId: string;
}

export interface GetOcvpSddcUpgradeLicense {
    licenseKey: string;
    licenseType: string;
}

export interface GetOcvpSddcVsphereUpgradeObject {
    downloadLink: string;
    linkDescription: string;
}

export interface GetOcvpSddcsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetOcvpSddcsSddcCollection {
    actualEsxiHostsCount: number;
    capacityReservationId: string;
    clustersCount: number;
    compartmentId: string;
    computeAvailabilityDomain: string;
    datastores: outputs.GetOcvpSddcsSddcCollectionDatastore[];
    definedTags: {[key: string]: string};
    displayName: string;
    esxiHostsCount: number;
    esxiSoftwareVersion: string;
    freeformTags: {[key: string]: string};
    hcxAction: string;
    hcxFqdn: string;
    hcxInitialPassword: string;
    hcxMode: string;
    hcxOnPremKey: string;
    hcxOnPremLicenses: outputs.GetOcvpSddcsSddcCollectionHcxOnPremLicense[];
    hcxPrivateIpId: string;
    hcxVlanId: string;
    id: string;
    initialConfigurations: outputs.GetOcvpSddcsSddcCollectionInitialConfiguration[];
    initialHostOcpuCount: number;
    initialHostShapeName: string;
    initialSku: string;
    instanceDisplayNamePrefix: string;
    isHcxEnabled: boolean;
    isHcxEnterpriseEnabled: boolean;
    isHcxPendingDowngrade: boolean;
    isShieldedInstanceEnabled: boolean;
    isSingleHostSddc: boolean;
    nsxEdgeUplink1vlanId: string;
    nsxEdgeUplink2vlanId: string;
    nsxEdgeUplinkIpId: string;
    nsxEdgeVtepVlanId: string;
    nsxManagerFqdn: string;
    nsxManagerInitialPassword: string;
    nsxManagerPrivateIpId: string;
    nsxManagerUsername: string;
    nsxOverlaySegmentName: string;
    nsxVtepVlanId: string;
    provisioningSubnetId: string;
    provisioningVlanId: string;
    refreshHcxLicenseStatus: boolean;
    replicationVlanId: string;
    reservingHcxOnPremiseLicenseKeys: string[];
    sshAuthorizedKeys: string;
    state: string;
    timeCreated: string;
    timeHcxBillingCycleEnd: string;
    timeHcxLicenseStatusUpdated: string;
    timeUpdated: string;
    upgradeLicenses: outputs.GetOcvpSddcsSddcCollectionUpgradeLicense[];
    vcenterFqdn: string;
    vcenterInitialPassword: string;
    vcenterPrivateIpId: string;
    vcenterUsername: string;
    vmotionVlanId: string;
    vmwareSoftwareVersion: string;
    vsanVlanId: string;
    vsphereUpgradeGuide: string;
    vsphereUpgradeObjects: outputs.GetOcvpSddcsSddcCollectionVsphereUpgradeObject[];
    vsphereVlanId: string;
    workloadNetworkCidr: string;
}

export interface GetOcvpSddcsSddcCollectionDatastore {
    blockVolumeIds: string[];
    capacity: number;
    datastoreType: string;
}

export interface GetOcvpSddcsSddcCollectionHcxOnPremLicense {
    activationKey: string;
    status: string;
    systemName: string;
}

export interface GetOcvpSddcsSddcCollectionInitialConfiguration {
    initialClusterConfigurations: outputs.GetOcvpSddcsSddcCollectionInitialConfigurationInitialClusterConfiguration[];
}

export interface GetOcvpSddcsSddcCollectionInitialConfigurationInitialClusterConfiguration {
    actualEsxiHostsCount: number;
    capacityReservationId: string;
    computeAvailabilityDomain: string;
    datastores: outputs.GetOcvpSddcsSddcCollectionInitialConfigurationInitialClusterConfigurationDatastore[];
    displayName: string;
    esxiHostsCount: number;
    initialCommitment: string;
    initialHostOcpuCount: number;
    initialHostShapeName: string;
    instanceDisplayNamePrefix: string;
    isShieldedInstanceEnabled: boolean;
    networkConfigurations: outputs.GetOcvpSddcsSddcCollectionInitialConfigurationInitialClusterConfigurationNetworkConfiguration[];
    vsphereType: string;
    workloadNetworkCidr: string;
}

export interface GetOcvpSddcsSddcCollectionInitialConfigurationInitialClusterConfigurationDatastore {
    blockVolumeIds: string[];
    datastoreType: string;
}

export interface GetOcvpSddcsSddcCollectionInitialConfigurationInitialClusterConfigurationNetworkConfiguration {
    hcxVlanId: string;
    nsxEdgeUplink1vlanId: string;
    nsxEdgeUplink2vlanId: string;
    nsxEdgeVtepVlanId: string;
    nsxVtepVlanId: string;
    provisioningSubnetId: string;
    provisioningVlanId: string;
    replicationVlanId: string;
    vmotionVlanId: string;
    vsanVlanId: string;
    vsphereVlanId: string;
}

export interface GetOcvpSddcsSddcCollectionUpgradeLicense {
    licenseKey: string;
    licenseType: string;
}

export interface GetOcvpSddcsSddcCollectionVsphereUpgradeObject {
    downloadLink: string;
    linkDescription: string;
}

export interface GetOcvpSupportedCommitmentsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetOcvpSupportedCommitmentsItem {
    name: string;
}

export interface GetOcvpSupportedHostShapesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetOcvpSupportedHostShapesItem {
    defaultOcpuCount: number;
    description: string;
    isSingleHostSddcSupported: boolean;
    isSupportMonthlyCommitment: boolean;
    isSupportMonthlySku: boolean;
    isSupportShieldedInstances: boolean;
    name: string;
    shapeFamily: string;
    supportedOcpuCounts: number[];
    supportedOperations: string[];
    supportedSddcTypes: string[];
    supportedVmwareSoftwareVersions: string[];
}

export interface GetOcvpSupportedSkusFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetOcvpSupportedSkusItem {
    name: string;
}

export interface GetOcvpSupportedVmwareSoftwareVersionsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetOcvpSupportedVmwareSoftwareVersionsItem {
    description: string;
    esxiSoftwareVersions: outputs.GetOcvpSupportedVmwareSoftwareVersionsItemEsxiSoftwareVersion[];
    version: string;
}

export interface GetOcvpSupportedVmwareSoftwareVersionsItemEsxiSoftwareVersion {
    description: string;
    supportedHostShapeNames: string[];
    version: string;
}

export interface GetOdaOdaInstanceRestrictedOperation {
    operationName: string;
    restrictingService: string;
}

export interface GetOdaOdaInstancesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetOdaOdaInstancesOdaInstance {
    attachmentIds: string[];
    attachmentTypes: string[];
    compartmentId: string;
    connectorUrl: string;
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    identityAppConsoleUrl: string;
    identityAppGuid: string;
    identityDomain: string;
    importedPackageIds: string[];
    importedPackageNames: string[];
    isRoleBasedAccess: boolean;
    lifecycleSubState: string;
    restrictedOperations: outputs.GetOdaOdaInstancesOdaInstanceRestrictedOperation[];
    shapeName: string;
    state: string;
    stateMessage: string;
    timeCreated: string;
    timeUpdated: string;
    webAppUrl: string;
}

export interface GetOdaOdaInstancesOdaInstanceRestrictedOperation {
    operationName: string;
    restrictingService: string;
}

export interface GetOdaOdaPrivateEndpointAttachmentsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetOdaOdaPrivateEndpointAttachmentsOdaPrivateEndpointAttachmentCollection {
    items: outputs.GetOdaOdaPrivateEndpointAttachmentsOdaPrivateEndpointAttachmentCollectionItem[];
}

export interface GetOdaOdaPrivateEndpointAttachmentsOdaPrivateEndpointAttachmentCollectionItem {
    compartmentId: string;
    id: string;
    odaInstanceId: string;
    odaPrivateEndpointId: string;
    state: string;
    timeCreated: string;
    timeUpdated: string;
}

export interface GetOdaOdaPrivateEndpointScanProxiesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetOdaOdaPrivateEndpointScanProxiesOdaPrivateEndpointScanProxyCollection {
    items: outputs.GetOdaOdaPrivateEndpointScanProxiesOdaPrivateEndpointScanProxyCollectionItem[];
}

export interface GetOdaOdaPrivateEndpointScanProxiesOdaPrivateEndpointScanProxyCollectionItem {
    id: string;
    odaPrivateEndpointId: string;
    protocol: string;
    scanListenerInfos: outputs.GetOdaOdaPrivateEndpointScanProxiesOdaPrivateEndpointScanProxyCollectionItemScanListenerInfo[];
    scanListenerType: string;
    state: string;
    timeCreated: string;
}

export interface GetOdaOdaPrivateEndpointScanProxiesOdaPrivateEndpointScanProxyCollectionItemScanListenerInfo {
    scanListenerFqdn: string;
    scanListenerIp: string;
    scanListenerPort: number;
}

export interface GetOdaOdaPrivateEndpointScanProxyScanListenerInfo {
    scanListenerFqdn: string;
    scanListenerIp: string;
    scanListenerPort: number;
}

export interface GetOdaOdaPrivateEndpointsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetOdaOdaPrivateEndpointsOdaPrivateEndpointCollection {
    items: outputs.GetOdaOdaPrivateEndpointsOdaPrivateEndpointCollectionItem[];
}

export interface GetOdaOdaPrivateEndpointsOdaPrivateEndpointCollectionItem {
    compartmentId: string;
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    nsgIds: string[];
    state: string;
    subnetId: string;
    timeCreated: string;
    timeUpdated: string;
}

export interface GetOnesubscriptionAggregatedComputedUsagesAggregatedComputedUsage {
    aggregatedComputedUsages: outputs.GetOnesubscriptionAggregatedComputedUsagesAggregatedComputedUsageAggregatedComputedUsage[];
    currencyCode: string;
    parentProducts: outputs.GetOnesubscriptionAggregatedComputedUsagesAggregatedComputedUsageParentProduct[];
    parentSubscribedServiceId: string;
    planNumber: string;
    pricingModel: string;
    rateCardId: string;
    subscriptionId: string;
    timeEnd: string;
    timeStart: string;
}

export interface GetOnesubscriptionAggregatedComputedUsagesAggregatedComputedUsageAggregatedComputedUsage {
    cost: string;
    costUnrounded: string;
    dataCenter: string;
    netUnitPrice: string;
    products: outputs.GetOnesubscriptionAggregatedComputedUsagesAggregatedComputedUsageAggregatedComputedUsageProduct[];
    quantity: string;
    timeMeteredOn: string;
    type: string;
}

export interface GetOnesubscriptionAggregatedComputedUsagesAggregatedComputedUsageAggregatedComputedUsageProduct {
    billingCategory: string;
    name: string;
    partNumber: string;
    productCategory: string;
    provisioningGroup: string;
    ucmRateCardPartType: string;
    unitOfMeasure: string;
}

export interface GetOnesubscriptionAggregatedComputedUsagesAggregatedComputedUsageParentProduct {
    billingCategory: string;
    name: string;
    partNumber: string;
    productCategory: string;
    provisioningGroup: string;
    ucmRateCardPartType: string;
    unitOfMeasure: string;
}

export interface GetOnesubscriptionAggregatedComputedUsagesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetOnesubscriptionBillingSchedulesBillingSchedule {
    amount: string;
    arCustomerTransactionId: string;
    arInvoiceNumber: string;
    billingFrequency: string;
    invoiceStatus: string;
    netUnitPrice: string;
    orderNumber: string;
    products: outputs.GetOnesubscriptionBillingSchedulesBillingScheduleProduct[];
    quantity: string;
    subscribedServiceId: string;
    timeEnd: string;
    timeInvoicing: string;
    timeStart: string;
}

export interface GetOnesubscriptionBillingSchedulesBillingScheduleProduct {
    name: string;
    partNumber: string;
}

export interface GetOnesubscriptionBillingSchedulesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetOnesubscriptionCommitmentsCommitment {
    availableAmount: string;
    fundedAllocationValue: string;
    id: string;
    quantity: string;
    subscribedServiceId: string;
    timeEnd: string;
    timeStart: string;
    usedAmount: string;
}

export interface GetOnesubscriptionCommitmentsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetOnesubscriptionComputedUsageParentProduct {
    billingCategory: string;
    name: string;
    partNumber: string;
    productCategory: string;
    provisioningGroup: string;
    ucmRateCardPartType: string;
    unitOfMeasure: string;
}

export interface GetOnesubscriptionComputedUsageProduct {
    billingCategory: string;
    name: string;
    partNumber: string;
    productCategory: string;
    provisioningGroup: string;
    ucmRateCardPartType: string;
    unitOfMeasure: string;
}

export interface GetOnesubscriptionComputedUsagesComputedUsage {
    commitmentServiceId: string;
    computeSource: string;
    computedUsageId: string;
    cost: string;
    costRounded: string;
    currencyCode: string;
    dataCenter: string;
    id: string;
    isInvoiced: boolean;
    mqsMessageId: string;
    netUnitPrice: string;
    originalUsageNumber: string;
    parentProducts: outputs.GetOnesubscriptionComputedUsagesComputedUsageParentProduct[];
    parentSubscribedServiceId: string;
    planNumber: string;
    products: outputs.GetOnesubscriptionComputedUsagesComputedUsageProduct[];
    quantity: string;
    rateCardId: string;
    rateCardTierdId: string;
    timeCreated: string;
    timeMeteredOn: string;
    timeOfArrival: string;
    timeUpdated: string;
    type: string;
    unitOfMeasure: string;
    usageNumber: string;
}

export interface GetOnesubscriptionComputedUsagesComputedUsageParentProduct {
    billingCategory: string;
    name: string;
    partNumber: string;
    productCategory: string;
    provisioningGroup: string;
    ucmRateCardPartType: string;
    unitOfMeasure: string;
}

export interface GetOnesubscriptionComputedUsagesComputedUsageProduct {
    billingCategory: string;
    name: string;
    partNumber: string;
    productCategory: string;
    provisioningGroup: string;
    ucmRateCardPartType: string;
    unitOfMeasure: string;
}

export interface GetOnesubscriptionComputedUsagesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetOnesubscriptionInvoiceLineComputedUsagesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetOnesubscriptionInvoiceLineComputedUsagesInvoicelineComputedUsage {
    cost: number;
    costRounded: number;
    netUnitPrice: number;
    parentProducts: outputs.GetOnesubscriptionInvoiceLineComputedUsagesInvoicelineComputedUsageParentProduct[];
    products: outputs.GetOnesubscriptionInvoiceLineComputedUsagesInvoicelineComputedUsageProduct[];
    quantity: number;
    timeMeteredOn: string;
    type: string;
}

export interface GetOnesubscriptionInvoiceLineComputedUsagesInvoicelineComputedUsageParentProduct {
    billingCategory: string;
    name: string;
    partNumber: string;
    productCategory: string;
    ucmRateCardPartType: string;
    unitOfMeasure: string;
}

export interface GetOnesubscriptionInvoiceLineComputedUsagesInvoicelineComputedUsageProduct {
    billingCategory: string;
    name: string;
    partNumber: string;
    productCategory: string;
    ucmRateCardPartType: string;
    unitOfMeasure: string;
}

export interface GetOnesubscriptionInvoicesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetOnesubscriptionInvoicesInvoice {
    arInvoices: string;
    billToAddresses: outputs.GetOnesubscriptionInvoicesInvoiceBillToAddress[];
    billToContacts: outputs.GetOnesubscriptionInvoicesInvoiceBillToContact[];
    billToCustomers: outputs.GetOnesubscriptionInvoicesInvoiceBillToCustomer[];
    createdBy: string;
    currencies: outputs.GetOnesubscriptionInvoicesInvoiceCurrency[];
    invoiceLines: outputs.GetOnesubscriptionInvoicesInvoiceInvoiceLine[];
    organizations: outputs.GetOnesubscriptionInvoicesInvoiceOrganization[];
    paymentMethod: string;
    paymentTerms: outputs.GetOnesubscriptionInvoicesInvoicePaymentTerm[];
    receiptMethod: string;
    spmInvoiceNumber: string;
    status: string;
    subscriptionNumber: string;
    timeCreated: string;
    timeInvoiceDate: string;
    timeUpdated: string;
    type: string;
    updatedBy: string;
}

export interface GetOnesubscriptionInvoicesInvoiceBillToAddress {
    billSiteUseId: string;
    isBillTo: boolean;
    isShipTo: boolean;
    locations: outputs.GetOnesubscriptionInvoicesInvoiceBillToAddressLocation[];
    name: string;
    phone: string;
    service2siteUseId: string;
    tcaCustAcctSiteId: string;
    tcaPartySiteNumber: string;
}

export interface GetOnesubscriptionInvoicesInvoiceBillToAddressLocation {
    address1: string;
    address2: string;
    city: string;
    country: string;
    postalCode: string;
    region: string;
    tcaLocationId: string;
}

export interface GetOnesubscriptionInvoicesInvoiceBillToContact {
    email: string;
    firstName: string;
    lastName: string;
    name: string;
    tcaContactId: string;
    tcaCustAccntSiteId: string;
    tcaPartyId: string;
    userName: string;
}

export interface GetOnesubscriptionInvoicesInvoiceBillToCustomer {
    customerChainType: string;
    isChainCustomer: boolean;
    isPublicSector: boolean;
    name: string;
    namePhonetic: string;
    tcaCustomerAccountId: string;
    tcaCustomerAccountNumber: string;
    tcaPartyId: string;
    tcaPartyNumber: string;
}

export interface GetOnesubscriptionInvoicesInvoiceCurrency {
    isoCode: string;
    name: string;
    stdPrecision: string;
}

export interface GetOnesubscriptionInvoicesInvoiceInvoiceLine {
    arInvoiceNumber: string;
    dataCenter: string;
    id: string;
    products: outputs.GetOnesubscriptionInvoicesInvoiceInvoiceLineProduct[];
    timeEnd: string;
    timeStart: string;
}

export interface GetOnesubscriptionInvoicesInvoiceInvoiceLineProduct {
    billingCategory: string;
    name: string;
    partNumber: string;
    productCategory: string;
    ucmRateCardPartType: string;
    unitOfMeasure: string;
}

export interface GetOnesubscriptionInvoicesInvoiceOrganization {
    name: string;
    number: number;
}

export interface GetOnesubscriptionInvoicesInvoicePaymentTerm {
    createdBy: string;
    description: string;
    isActive: boolean;
    name: string;
    timeCreated: string;
    timeUpdated: string;
    updatedBy: string;
    value: string;
}

export interface GetOnesubscriptionOrganizationSubscriptionsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetOnesubscriptionOrganizationSubscriptionsOrganizationSubscription {
    currencies: outputs.GetOnesubscriptionOrganizationSubscriptionsOrganizationSubscriptionCurrency[];
    id: string;
    serviceName: string;
    status: string;
    timeEnd: string;
    timeStart: string;
    totalValue: string;
    type: string;
}

export interface GetOnesubscriptionOrganizationSubscriptionsOrganizationSubscriptionCurrency {
    isoCode: string;
    name: string;
    stdPrecision: string;
}

export interface GetOnesubscriptionRatecardsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetOnesubscriptionRatecardsRateCard {
    currencies: outputs.GetOnesubscriptionRatecardsRateCardCurrency[];
    discretionaryDiscountPercentage: string;
    isTier: boolean;
    netUnitPrice: string;
    overagePrice: string;
    products: outputs.GetOnesubscriptionRatecardsRateCardProduct[];
    rateCardTiers: outputs.GetOnesubscriptionRatecardsRateCardRateCardTier[];
    subscribedServiceId: string;
    timeEnd: string;
    timeStart: string;
}

export interface GetOnesubscriptionRatecardsRateCardCurrency {
    isoCode: string;
    name: string;
    stdPrecision: string;
}

export interface GetOnesubscriptionRatecardsRateCardProduct {
    billingCategory: string;
    name: string;
    partNumber: string;
    productCategory: string;
    ucmRateCardPartType: string;
    unitOfMeasure: string;
}

export interface GetOnesubscriptionRatecardsRateCardRateCardTier {
    netUnitPrice: string;
    overagePrice: string;
    upToQuantity: string;
}

export interface GetOnesubscriptionSubscribedServiceBillToAddress {
    billSiteUseId: string;
    isBillTo: boolean;
    isShipTo: boolean;
    locations: outputs.GetOnesubscriptionSubscribedServiceBillToAddressLocation[];
    name: string;
    phone: string;
    service2siteUseId: string;
    tcaCustAcctSiteId: string;
    tcaPartySiteNumber: string;
}

export interface GetOnesubscriptionSubscribedServiceBillToAddressLocation {
    address1: string;
    address2: string;
    city: string;
    country: string;
    postalCode: string;
    region: string;
    tcaLocationId: string;
}

export interface GetOnesubscriptionSubscribedServiceBillToContact {
    email: string;
    firstName: string;
    lastName: string;
    name: string;
    tcaContactId: string;
    tcaCustAccntSiteId: string;
    tcaPartyId: string;
    username: string;
}

export interface GetOnesubscriptionSubscribedServiceBillToCustomer {
    customerChainType: string;
    isChainCustomer: boolean;
    isPublicSector: boolean;
    name: string;
    namePhonetic: string;
    tcaCustAccountNumber: string;
    tcaCustomerAccountId: string;
    tcaPartyId: string;
    tcaPartyNumber: string;
}

export interface GetOnesubscriptionSubscribedServiceCommitmentService {
    availableAmount: string;
    fundedAllocationValue: string;
    lineNetAmount: string;
    quantity: string;
    timeEnd: string;
    timeStart: string;
}

export interface GetOnesubscriptionSubscribedServiceEndUserAddress {
    billSiteUseId: string;
    isBillTo: boolean;
    isShipTo: boolean;
    locations: outputs.GetOnesubscriptionSubscribedServiceEndUserAddressLocation[];
    name: string;
    phone: string;
    service2siteUseId: string;
    tcaCustAcctSiteId: string;
    tcaPartySiteNumber: string;
}

export interface GetOnesubscriptionSubscribedServiceEndUserAddressLocation {
    address1: string;
    address2: string;
    city: string;
    country: string;
    postalCode: string;
    region: string;
    tcaLocationId: string;
}

export interface GetOnesubscriptionSubscribedServiceEndUserContact {
    email: string;
    firstName: string;
    lastName: string;
    name: string;
    tcaContactId: string;
    tcaCustAccntSiteId: string;
    tcaPartyId: string;
    username: string;
}

export interface GetOnesubscriptionSubscribedServiceEndUserCustomer {
    customerChainType: string;
    isChainCustomer: boolean;
    isPublicSector: boolean;
    name: string;
    namePhonetic: string;
    tcaCustAccountNumber: string;
    tcaCustomerAccountId: string;
    tcaPartyId: string;
    tcaPartyNumber: string;
}

export interface GetOnesubscriptionSubscribedServicePaymentTerm {
    createdBy: string;
    description: string;
    isActive: boolean;
    name: string;
    timeCreated: string;
    timeUpdated: string;
    updatedBy: string;
    value: string;
}

export interface GetOnesubscriptionSubscribedServiceProduct {
    billingCategory: string;
    name: string;
    partNumber: string;
    productCategory: string;
    ucmRateCardPartType: string;
    unitOfMeasure: string;
}

export interface GetOnesubscriptionSubscribedServiceRateCard {
    currencies: outputs.GetOnesubscriptionSubscribedServiceRateCardCurrency[];
    discretionaryDiscountPercentage: string;
    isTier: boolean;
    netUnitPrice: string;
    overagePrice: string;
    products: outputs.GetOnesubscriptionSubscribedServiceRateCardProduct[];
    rateCardTiers: outputs.GetOnesubscriptionSubscribedServiceRateCardRateCardTier[];
    subscribedServiceId: string;
    timeEnd: string;
    timeStart: string;
}

export interface GetOnesubscriptionSubscribedServiceRateCardCurrency {
    isoCode: string;
    name: string;
    stdPrecision: string;
}

export interface GetOnesubscriptionSubscribedServiceRateCardProduct {
    billingCategory: string;
    name: string;
    partNumber: string;
    productCategory: string;
    ucmRateCardPartType: string;
    unitOfMeasure: string;
}

export interface GetOnesubscriptionSubscribedServiceRateCardRateCardTier {
    netUnitPrice: string;
    overagePrice: string;
    upToQuantity: string;
}

export interface GetOnesubscriptionSubscribedServiceResellerAddress {
    billSiteUseId: string;
    isBillTo: boolean;
    isShipTo: boolean;
    locations: outputs.GetOnesubscriptionSubscribedServiceResellerAddressLocation[];
    name: string;
    phone: string;
    service2siteUseId: string;
    tcaCustAcctSiteId: string;
    tcaPartySiteNumber: string;
}

export interface GetOnesubscriptionSubscribedServiceResellerAddressLocation {
    address1: string;
    address2: string;
    city: string;
    country: string;
    postalCode: string;
    region: string;
    tcaLocationId: string;
}

export interface GetOnesubscriptionSubscribedServiceResellerContact {
    email: string;
    firstName: string;
    lastName: string;
    name: string;
    tcaContactId: string;
    tcaCustAccntSiteId: string;
    tcaPartyId: string;
    username: string;
}

export interface GetOnesubscriptionSubscribedServiceResellerCustomer {
    customerChainType: string;
    isChainCustomer: boolean;
    isPublicSector: boolean;
    name: string;
    namePhonetic: string;
    tcaCustAccountNumber: string;
    tcaCustomerAccountId: string;
    tcaPartyId: string;
    tcaPartyNumber: string;
}

export interface GetOnesubscriptionSubscribedServiceServiceToAddress {
    billSiteUseId: string;
    isBillTo: boolean;
    isShipTo: boolean;
    locations: outputs.GetOnesubscriptionSubscribedServiceServiceToAddressLocation[];
    name: string;
    phone: string;
    service2siteUseId: string;
    tcaCustAcctSiteId: string;
    tcaPartySiteNumber: string;
}

export interface GetOnesubscriptionSubscribedServiceServiceToAddressLocation {
    address1: string;
    address2: string;
    city: string;
    country: string;
    postalCode: string;
    region: string;
    tcaLocationId: string;
}

export interface GetOnesubscriptionSubscribedServiceServiceToContact {
    email: string;
    firstName: string;
    lastName: string;
    name: string;
    tcaContactId: string;
    tcaCustAccntSiteId: string;
    tcaPartyId: string;
    username: string;
}

export interface GetOnesubscriptionSubscribedServiceServiceToCustomer {
    customerChainType: string;
    isChainCustomer: boolean;
    isPublicSector: boolean;
    name: string;
    namePhonetic: string;
    tcaCustAccountNumber: string;
    tcaCustomerAccountId: string;
    tcaPartyId: string;
    tcaPartyNumber: string;
}

export interface GetOnesubscriptionSubscribedServiceSoldToContact {
    email: string;
    firstName: string;
    lastName: string;
    name: string;
    tcaContactId: string;
    tcaCustAccntSiteId: string;
    tcaPartyId: string;
    username: string;
}

export interface GetOnesubscriptionSubscribedServiceSoldToCustomer {
    customerChainType: string;
    isChainCustomer: boolean;
    isPublicSector: boolean;
    name: string;
    namePhonetic: string;
    tcaCustAccountNumber: string;
    tcaCustomerAccountId: string;
    tcaPartyId: string;
    tcaPartyNumber: string;
}

export interface GetOnesubscriptionSubscribedServicesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetOnesubscriptionSubscribedServicesSubscribedService {
    adminEmail: string;
    agreementId: string;
    agreementName: string;
    agreementType: string;
    availableAmount: string;
    billToAddresses: outputs.GetOnesubscriptionSubscribedServicesSubscribedServiceBillToAddress[];
    billToContacts: outputs.GetOnesubscriptionSubscribedServicesSubscribedServiceBillToContact[];
    billToCustomers: outputs.GetOnesubscriptionSubscribedServicesSubscribedServiceBillToCustomer[];
    billingFrequency: string;
    bookingOptyNumber: string;
    buyerEmail: string;
    commitmentScheduleId: string;
    commitmentServices: outputs.GetOnesubscriptionSubscribedServicesSubscribedServiceCommitmentService[];
    createdBy: string;
    creditPercentage: string;
    csi: string;
    customerTransactionReference: string;
    dataCenter: string;
    dataCenterRegion: string;
    eligibleToRenew: string;
    endUserAddresses: outputs.GetOnesubscriptionSubscribedServicesSubscribedServiceEndUserAddress[];
    endUserContacts: outputs.GetOnesubscriptionSubscribedServicesSubscribedServiceEndUserContact[];
    endUserCustomers: outputs.GetOnesubscriptionSubscribedServicesSubscribedServiceEndUserCustomer[];
    fulfillmentSet: string;
    fundedAllocationValue: string;
    id: string;
    isAllowance: boolean;
    isCapToPriceList: boolean;
    isCreditEnabled: boolean;
    isHavingUsage: boolean;
    isIntentToPay: boolean;
    isPayg: boolean;
    isSingleRateCard: boolean;
    isVariableCommitment: boolean;
    lineNetAmount: string;
    majorSet: string;
    netUnitPrice: string;
    operationType: string;
    orderHeaderId: string;
    orderLineId: string;
    orderLineNumber: number;
    orderNumber: string;
    orderType: string;
    originalPromoAmount: string;
    overageBillTo: string;
    overageDiscountPercentage: string;
    overagePolicy: string;
    partnerCreditAmount: string;
    partnerTransactionType: string;
    paygPolicy: string;
    paymentMethod: string;
    paymentNumber: string;
    paymentTerms: outputs.GetOnesubscriptionSubscribedServicesSubscribedServicePaymentTerm[];
    pricePeriod: string;
    pricingModel: string;
    products: outputs.GetOnesubscriptionSubscribedServicesSubscribedServiceProduct[];
    programType: string;
    promoOrderLineId: string;
    promoType: string;
    promotionPricingType: string;
    provisioningSource: string;
    quantity: string;
    rateCardDiscountPercentage: string;
    rateCards: outputs.GetOnesubscriptionSubscribedServicesSubscribedServiceRateCard[];
    ratecardType: string;
    renewalOptyId: string;
    renewalOptyNumber: string;
    renewalOptyType: string;
    renewedSubscribedServiceId: string;
    resellerAddresses: outputs.GetOnesubscriptionSubscribedServicesSubscribedServiceResellerAddress[];
    resellerContacts: outputs.GetOnesubscriptionSubscribedServicesSubscribedServiceResellerContact[];
    resellerCustomers: outputs.GetOnesubscriptionSubscribedServicesSubscribedServiceResellerCustomer[];
    revenueLineId: string;
    revenueLineNumber: string;
    revisedArrInLc: string;
    revisedArrInSc: string;
    salesAccountPartyId: string;
    salesChannel: string;
    serialNumber: string;
    serviceToAddresses: outputs.GetOnesubscriptionSubscribedServicesSubscribedServiceServiceToAddress[];
    serviceToContacts: outputs.GetOnesubscriptionSubscribedServicesSubscribedServiceServiceToContact[];
    serviceToCustomers: outputs.GetOnesubscriptionSubscribedServicesSubscribedServiceServiceToCustomer[];
    soldToContacts: outputs.GetOnesubscriptionSubscribedServicesSubscribedServiceSoldToContact[];
    soldToCustomers: outputs.GetOnesubscriptionSubscribedServicesSubscribedServiceSoldToCustomer[];
    startDateType: string;
    status: string;
    subscriptionId: string;
    subscriptionSource: string;
    systemArrInLc: string;
    systemArrInSc: string;
    systemAtrArrInLc: string;
    systemAtrArrInSc: string;
    termValue: string;
    termValueUom: string;
    timeAgreementEnd: string;
    timeCreated: string;
    timeCustomerConfig: string;
    timeEnd: string;
    timeMajorsetEnd: string;
    timeMajorsetStart: string;
    timePaymentExpiry: string;
    timeProvisioned: string;
    timeServiceConfigurationEmailSent: string;
    timeStart: string;
    timeUpdated: string;
    timeWelcomeEmailSent: string;
    totalValue: string;
    transactionExtensionId: string;
    type: string;
    updatedBy: string;
    usedAmount: string;
}

export interface GetOnesubscriptionSubscribedServicesSubscribedServiceBillToAddress {
    billSiteUseId: string;
    isBillTo: boolean;
    isShipTo: boolean;
    locations: outputs.GetOnesubscriptionSubscribedServicesSubscribedServiceBillToAddressLocation[];
    name: string;
    phone: string;
    service2siteUseId: string;
    tcaCustAcctSiteId: string;
    tcaPartySiteNumber: string;
}

export interface GetOnesubscriptionSubscribedServicesSubscribedServiceBillToAddressLocation {
    address1: string;
    address2: string;
    city: string;
    country: string;
    postalCode: string;
    region: string;
    tcaLocationId: string;
}

export interface GetOnesubscriptionSubscribedServicesSubscribedServiceBillToContact {
    email: string;
    firstName: string;
    lastName: string;
    name: string;
    tcaContactId: string;
    tcaCustAccntSiteId: string;
    tcaPartyId: string;
    username: string;
}

export interface GetOnesubscriptionSubscribedServicesSubscribedServiceBillToCustomer {
    customerChainType: string;
    isChainCustomer: boolean;
    isPublicSector: boolean;
    name: string;
    namePhonetic: string;
    tcaCustAccountNumber: string;
    tcaCustomerAccountId: string;
    tcaPartyId: string;
    tcaPartyNumber: string;
}

export interface GetOnesubscriptionSubscribedServicesSubscribedServiceCommitmentService {
    availableAmount: string;
    fundedAllocationValue: string;
    lineNetAmount: string;
    quantity: string;
    timeEnd: string;
    timeStart: string;
}

export interface GetOnesubscriptionSubscribedServicesSubscribedServiceEndUserAddress {
    billSiteUseId: string;
    isBillTo: boolean;
    isShipTo: boolean;
    locations: outputs.GetOnesubscriptionSubscribedServicesSubscribedServiceEndUserAddressLocation[];
    name: string;
    phone: string;
    service2siteUseId: string;
    tcaCustAcctSiteId: string;
    tcaPartySiteNumber: string;
}

export interface GetOnesubscriptionSubscribedServicesSubscribedServiceEndUserAddressLocation {
    address1: string;
    address2: string;
    city: string;
    country: string;
    postalCode: string;
    region: string;
    tcaLocationId: string;
}

export interface GetOnesubscriptionSubscribedServicesSubscribedServiceEndUserContact {
    email: string;
    firstName: string;
    lastName: string;
    name: string;
    tcaContactId: string;
    tcaCustAccntSiteId: string;
    tcaPartyId: string;
    username: string;
}

export interface GetOnesubscriptionSubscribedServicesSubscribedServiceEndUserCustomer {
    customerChainType: string;
    isChainCustomer: boolean;
    isPublicSector: boolean;
    name: string;
    namePhonetic: string;
    tcaCustAccountNumber: string;
    tcaCustomerAccountId: string;
    tcaPartyId: string;
    tcaPartyNumber: string;
}

export interface GetOnesubscriptionSubscribedServicesSubscribedServicePaymentTerm {
    createdBy: string;
    description: string;
    isActive: boolean;
    name: string;
    timeCreated: string;
    timeUpdated: string;
    updatedBy: string;
    value: string;
}

export interface GetOnesubscriptionSubscribedServicesSubscribedServiceProduct {
    billingCategory: string;
    name: string;
    partNumber: string;
    productCategory: string;
    ucmRateCardPartType: string;
    unitOfMeasure: string;
}

export interface GetOnesubscriptionSubscribedServicesSubscribedServiceRateCard {
    currencies: outputs.GetOnesubscriptionSubscribedServicesSubscribedServiceRateCardCurrency[];
    discretionaryDiscountPercentage: string;
    isTier: boolean;
    netUnitPrice: string;
    overagePrice: string;
    products: outputs.GetOnesubscriptionSubscribedServicesSubscribedServiceRateCardProduct[];
    rateCardTiers: outputs.GetOnesubscriptionSubscribedServicesSubscribedServiceRateCardRateCardTier[];
    subscribedServiceId: string;
    timeEnd: string;
    timeStart: string;
}

export interface GetOnesubscriptionSubscribedServicesSubscribedServiceRateCardCurrency {
    isoCode: string;
    name: string;
    stdPrecision: string;
}

export interface GetOnesubscriptionSubscribedServicesSubscribedServiceRateCardProduct {
    billingCategory: string;
    name: string;
    partNumber: string;
    productCategory: string;
    ucmRateCardPartType: string;
    unitOfMeasure: string;
}

export interface GetOnesubscriptionSubscribedServicesSubscribedServiceRateCardRateCardTier {
    netUnitPrice: string;
    overagePrice: string;
    upToQuantity: string;
}

export interface GetOnesubscriptionSubscribedServicesSubscribedServiceResellerAddress {
    billSiteUseId: string;
    isBillTo: boolean;
    isShipTo: boolean;
    locations: outputs.GetOnesubscriptionSubscribedServicesSubscribedServiceResellerAddressLocation[];
    name: string;
    phone: string;
    service2siteUseId: string;
    tcaCustAcctSiteId: string;
    tcaPartySiteNumber: string;
}

export interface GetOnesubscriptionSubscribedServicesSubscribedServiceResellerAddressLocation {
    address1: string;
    address2: string;
    city: string;
    country: string;
    postalCode: string;
    region: string;
    tcaLocationId: string;
}

export interface GetOnesubscriptionSubscribedServicesSubscribedServiceResellerContact {
    email: string;
    firstName: string;
    lastName: string;
    name: string;
    tcaContactId: string;
    tcaCustAccntSiteId: string;
    tcaPartyId: string;
    username: string;
}

export interface GetOnesubscriptionSubscribedServicesSubscribedServiceResellerCustomer {
    customerChainType: string;
    isChainCustomer: boolean;
    isPublicSector: boolean;
    name: string;
    namePhonetic: string;
    tcaCustAccountNumber: string;
    tcaCustomerAccountId: string;
    tcaPartyId: string;
    tcaPartyNumber: string;
}

export interface GetOnesubscriptionSubscribedServicesSubscribedServiceServiceToAddress {
    billSiteUseId: string;
    isBillTo: boolean;
    isShipTo: boolean;
    locations: outputs.GetOnesubscriptionSubscribedServicesSubscribedServiceServiceToAddressLocation[];
    name: string;
    phone: string;
    service2siteUseId: string;
    tcaCustAcctSiteId: string;
    tcaPartySiteNumber: string;
}

export interface GetOnesubscriptionSubscribedServicesSubscribedServiceServiceToAddressLocation {
    address1: string;
    address2: string;
    city: string;
    country: string;
    postalCode: string;
    region: string;
    tcaLocationId: string;
}

export interface GetOnesubscriptionSubscribedServicesSubscribedServiceServiceToContact {
    email: string;
    firstName: string;
    lastName: string;
    name: string;
    tcaContactId: string;
    tcaCustAccntSiteId: string;
    tcaPartyId: string;
    username: string;
}

export interface GetOnesubscriptionSubscribedServicesSubscribedServiceServiceToCustomer {
    customerChainType: string;
    isChainCustomer: boolean;
    isPublicSector: boolean;
    name: string;
    namePhonetic: string;
    tcaCustAccountNumber: string;
    tcaCustomerAccountId: string;
    tcaPartyId: string;
    tcaPartyNumber: string;
}

export interface GetOnesubscriptionSubscribedServicesSubscribedServiceSoldToContact {
    email: string;
    firstName: string;
    lastName: string;
    name: string;
    tcaContactId: string;
    tcaCustAccntSiteId: string;
    tcaPartyId: string;
    username: string;
}

export interface GetOnesubscriptionSubscribedServicesSubscribedServiceSoldToCustomer {
    customerChainType: string;
    isChainCustomer: boolean;
    isPublicSector: boolean;
    name: string;
    namePhonetic: string;
    tcaCustAccountNumber: string;
    tcaCustomerAccountId: string;
    tcaPartyId: string;
    tcaPartyNumber: string;
}

export interface GetOnesubscriptionSubscriptionsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetOnesubscriptionSubscriptionsSubscription {
    currencies: outputs.GetOnesubscriptionSubscriptionsSubscriptionCurrency[];
    holdReason: string;
    serviceName: string;
    status: string;
    subscribedServices: outputs.GetOnesubscriptionSubscriptionsSubscriptionSubscribedService[];
    timeEnd: string;
    timeHoldReleaseEta: string;
    timeStart: string;
}

export interface GetOnesubscriptionSubscriptionsSubscriptionCurrency {
    isoCode: string;
    name: string;
    stdPrecision: string;
}

export interface GetOnesubscriptionSubscriptionsSubscriptionSubscribedService {
    availableAmount: string;
    bookingOptyNumber: string;
    commitmentServices: outputs.GetOnesubscriptionSubscriptionsSubscriptionSubscribedServiceCommitmentService[];
    csi: string;
    dataCenterRegion: string;
    fundedAllocationValue: string;
    id: string;
    isIntentToPay: boolean;
    netUnitPrice: string;
    operationType: string;
    orderNumber: string;
    originalPromoAmount: string;
    partnerTransactionType: string;
    pricingModel: string;
    products: outputs.GetOnesubscriptionSubscriptionsSubscriptionSubscribedServiceProduct[];
    programType: string;
    promoType: string;
    quantity: string;
    status: string;
    termValue: string;
    termValueUom: string;
    timeEnd: string;
    timeStart: string;
    totalValue: string;
    usedAmount: string;
}

export interface GetOnesubscriptionSubscriptionsSubscriptionSubscribedServiceCommitmentService {
    availableAmount: string;
    fundedAllocationValue: string;
    lineNetAmount: string;
    quantity: string;
    timeEnd: string;
    timeStart: string;
}

export interface GetOnesubscriptionSubscriptionsSubscriptionSubscribedServiceProduct {
    name: string;
    partNumber: string;
    provisioningGroup: string;
    unitOfMeasure: string;
}

export interface GetOnsNotificationTopicsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetOnsNotificationTopicsNotificationTopic {
    apiEndpoint: string;
    compartmentId: string;
    definedTags: {[key: string]: string};
    description: string;
    etag: string;
    freeformTags: {[key: string]: string};
    id: string;
    name: string;
    shortTopicId: string;
    state: string;
    timeCreated: string;
    topicId: string;
}

export interface GetOnsSubscriptionsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetOnsSubscriptionsSubscription {
    compartmentId: string;
    createdTime: string;
    definedTags: {[key: string]: string};
    deliveryPolicies: outputs.GetOnsSubscriptionsSubscriptionDeliveryPolicy[];
    endpoint: string;
    etag: string;
    freeformTags: {[key: string]: string};
    id: string;
    protocol: string;
    state: string;
    topicId: string;
}

export interface GetOnsSubscriptionsSubscriptionDeliveryPolicy {
    backoffRetryPolicies: outputs.GetOnsSubscriptionsSubscriptionDeliveryPolicyBackoffRetryPolicy[];
}

export interface GetOnsSubscriptionsSubscriptionDeliveryPolicyBackoffRetryPolicy {
    maxRetryDuration: number;
    policyType: string;
}

export interface GetOpaOpaInstanceAttachment {
    isImplicit: boolean;
    targetId: string;
    targetInstanceUrl: string;
    targetRole: string;
    targetServiceType: string;
}

export interface GetOpaOpaInstancesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetOpaOpaInstancesOpaInstanceCollection {
    items: outputs.GetOpaOpaInstancesOpaInstanceCollectionItem[];
}

export interface GetOpaOpaInstancesOpaInstanceCollectionItem {
    attachments: outputs.GetOpaOpaInstancesOpaInstanceCollectionItemAttachment[];
    compartmentId: string;
    consumptionModel: string;
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    idcsAt: string;
    identityAppDisplayName: string;
    identityAppGuid: string;
    identityAppOpcServiceInstanceGuid: string;
    identityDomainUrl: string;
    instanceUrl: string;
    isBreakglassEnabled: boolean;
    meteringType: string;
    shapeName: string;
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
}

export interface GetOpaOpaInstancesOpaInstanceCollectionItemAttachment {
    isImplicit: boolean;
    targetId: string;
    targetInstanceUrl: string;
    targetRole: string;
    targetServiceType: string;
}

export interface GetOpensearchOpensearchClustersFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetOpensearchOpensearchClustersOpensearchClusterCollection {
    items: outputs.GetOpensearchOpensearchClustersOpensearchClusterCollectionItem[];
}

export interface GetOpensearchOpensearchClustersOpensearchClusterCollectionItem {
    availabilityDomains: string[];
    compartmentId: string;
    dataNodeCount: number;
    dataNodeHostBareMetalShape: string;
    dataNodeHostMemoryGb: number;
    dataNodeHostOcpuCount: number;
    dataNodeHostType: string;
    dataNodeStorageGb: number;
    definedTags: {[key: string]: string};
    displayName: string;
    fqdn: string;
    freeformTags: {[key: string]: string};
    id: string;
    lifecycleDetails: string;
    masterNodeCount: number;
    masterNodeHostBareMetalShape: string;
    masterNodeHostMemoryGb: number;
    masterNodeHostOcpuCount: number;
    masterNodeHostType: string;
    opendashboardFqdn: string;
    opendashboardNodeCount: number;
    opendashboardNodeHostMemoryGb: number;
    opendashboardNodeHostOcpuCount: number;
    opendashboardPrivateIp: string;
    opensearchFqdn: string;
    opensearchPrivateIp: string;
    securityMasterUserName: string;
    securityMasterUserPasswordHash: string;
    securityMode: string;
    softwareVersion: string;
    state: string;
    subnetCompartmentId: string;
    subnetId: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeDeleted: string;
    timeUpdated: string;
    totalStorageGb: number;
    vcnCompartmentId: string;
    vcnId: string;
}

export interface GetOpensearchOpensearchVersionItem {
    version: string;
}

export interface GetOpensearchOpensearchVersionsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetOpensearchOpensearchVersionsOpensearchVersionsCollection {
    items: outputs.GetOpensearchOpensearchVersionsOpensearchVersionsCollectionItem[];
}

export interface GetOpensearchOpensearchVersionsOpensearchVersionsCollectionItem {
    version: string;
}

export interface GetOperatorAccessControlAccessRequestApproverDetail {
    approvalAction: string;
    approvalAdditionalMessage: string;
    approvalComment: string;
    approverId: string;
    timeApprovedForAccess: string;
    timeOfAuthorization: string;
}

export interface GetOperatorAccessControlAccessRequestExtensionApproverDetail {
    approvalAction: string;
    approvalAdditionalMessage: string;
    approvalComment: string;
    approverId: string;
    timeApprovedForAccess: string;
    timeOfAuthorization: string;
}

export interface GetOperatorAccessControlAccessRequestHistoryItem {
    actionsLists: string[];
    description: string;
    duration: number;
    isAutoApproved: boolean;
    state: string;
    timeOfAction: string;
    userId: string;
}

export interface GetOperatorAccessControlAccessRequestsAccessRequestCollection {
    items: outputs.GetOperatorAccessControlAccessRequestsAccessRequestCollectionItem[];
}

export interface GetOperatorAccessControlAccessRequestsAccessRequestCollectionItem {
    accessReasonSummary: string;
    actionRequestsLists: string[];
    approverComment: string;
    approverDetails: outputs.GetOperatorAccessControlAccessRequestsAccessRequestCollectionItemApproverDetail[];
    auditTypes: string[];
    closureComment: string;
    compartmentId: string;
    definedTags: {[key: string]: string};
    duration: number;
    extendDuration: number;
    extensionApproverDetails: outputs.GetOperatorAccessControlAccessRequestsAccessRequestCollectionItemExtensionApproverDetail[];
    freeformTags: {[key: string]: string};
    id: string;
    isAutoApproved: boolean;
    isValidateAssignment: boolean;
    lifecycleDetails: string;
    numberOfApprovers: number;
    numberOfApproversRequired: number;
    numberOfExtensionApprovers: number;
    opctlAdditionalMessage: string;
    opctlId: string;
    opctlName: string;
    operatorId: string;
    reason: string;
    requestId: string;
    resourceId: string;
    resourceName: string;
    resourceType: string;
    severity: string;
    state: string;
    subResourceLists: string[];
    systemMessage: string;
    timeOfCreation: string;
    timeOfModification: string;
    timeOfUserCreation: string;
    timeRequestedForFutureAccess: string;
    userId: string;
    workflowIds: string[];
}

export interface GetOperatorAccessControlAccessRequestsAccessRequestCollectionItemApproverDetail {
    approvalAction: string;
    approvalAdditionalMessage: string;
    approvalComment: string;
    approverId: string;
    timeApprovedForAccess: string;
    timeOfAuthorization: string;
}

export interface GetOperatorAccessControlAccessRequestsAccessRequestCollectionItemExtensionApproverDetail {
    approvalAction: string;
    approvalAdditionalMessage: string;
    approvalComment: string;
    approverId: string;
    timeApprovedForAccess: string;
    timeOfAuthorization: string;
}

export interface GetOperatorAccessControlAccessRequestsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetOperatorAccessControlOperatorActionProperty {
    name: string;
    value: string;
}

export interface GetOperatorAccessControlOperatorActionsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetOperatorAccessControlOperatorActionsOperatorActionCollection {
    items: outputs.GetOperatorAccessControlOperatorActionsOperatorActionCollectionItem[];
}

export interface GetOperatorAccessControlOperatorActionsOperatorActionCollectionItem {
    compartmentId: string;
    component: string;
    customerDisplayName: string;
    description: string;
    id: string;
    name: string;
    properties: outputs.GetOperatorAccessControlOperatorActionsOperatorActionCollectionItemProperty[];
    resourceType: string;
    state: string;
}

export interface GetOperatorAccessControlOperatorActionsOperatorActionCollectionItemProperty {
    name: string;
    value: string;
}

export interface GetOperatorAccessControlOperatorControlAssignmentsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetOperatorAccessControlOperatorControlAssignmentsOperatorControlAssignmentCollection {
    items: outputs.GetOperatorAccessControlOperatorControlAssignmentsOperatorControlAssignmentCollectionItem[];
}

export interface GetOperatorAccessControlOperatorControlAssignmentsOperatorControlAssignmentCollectionItem {
    assignerId: string;
    comment: string;
    compartmentId: string;
    definedTags: {[key: string]: string};
    detachmentDescription: string;
    errorCode: number;
    errorMessage: string;
    freeformTags: {[key: string]: string};
    id: string;
    isAutoApproveDuringMaintenance: boolean;
    isDefaultAssignment: boolean;
    isEnforcedAlways: boolean;
    isHypervisorLogForwarded: boolean;
    isLogForwarded: boolean;
    lifecycleDetails: string;
    opControlName: string;
    operatorControlId: string;
    remoteSyslogServerAddress: string;
    remoteSyslogServerCaCert: string;
    remoteSyslogServerPort: number;
    resourceCompartmentId: string;
    resourceId: string;
    resourceName: string;
    resourceType: string;
    state: string;
    timeAssignmentFrom: string;
    timeAssignmentTo: string;
    timeOfAssignment: string;
    timeOfDeletion: string;
    unassignerId: string;
    validateAssignmentTrigger: number;
}

export interface GetOperatorAccessControlOperatorControlsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetOperatorAccessControlOperatorControlsOperatorControlCollection {
    items: outputs.GetOperatorAccessControlOperatorControlsOperatorControlCollectionItem[];
}

export interface GetOperatorAccessControlOperatorControlsOperatorControlCollectionItem {
    approvalRequiredOpActionLists: string[];
    approverGroupsLists: string[];
    approversLists: string[];
    compartmentId: string;
    definedTags: {[key: string]: string};
    description: string;
    emailIdLists: string[];
    freeformTags: {[key: string]: string};
    id: string;
    isDefaultOperatorControl: boolean;
    isFullyPreApproved: boolean;
    lastModifiedInfo: string;
    numberOfApprovers: number;
    operatorControlName: string;
    preApprovedOpActionLists: string[];
    resourceType: string;
    state: string;
    systemMessage: string;
    timeOfCreation: string;
    timeOfDeletion: string;
    timeOfModification: string;
}

export interface GetOpsiAwrHubAwrSnapshotItem {
    awrSourceDatabaseId: string;
    errorCount: string;
    instanceNumber: number;
    snapshotIdentifier: number;
    timeDbStartup: string;
    timeSnapshotBegin: string;
    timeSnapshotEnd: string;
}

export interface GetOpsiAwrHubAwrSnapshotsAwrSnapshotCollection {
    items: outputs.GetOpsiAwrHubAwrSnapshotsAwrSnapshotCollectionItem[];
}

export interface GetOpsiAwrHubAwrSnapshotsAwrSnapshotCollectionItem {
    items: outputs.GetOpsiAwrHubAwrSnapshotsAwrSnapshotCollectionItemItem[];
}

export interface GetOpsiAwrHubAwrSnapshotsAwrSnapshotCollectionItemItem {
    awrSourceDatabaseId: string;
    errorCount: string;
    instanceNumber: number;
    snapshotIdentifier: number;
    timeDbStartup: string;
    timeSnapshotBegin: string;
    timeSnapshotEnd: string;
}

export interface GetOpsiAwrHubAwrSnapshotsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetOpsiAwrHubAwrSourcesSummaryItem {
    awrHubId: string;
    awrSourceDatabaseId: string;
    hoursSinceLastImport: number;
    maxSnapshotIdentifier: number;
    minSnapshotIdentifier: number;
    name: string;
    snapshotsUploaded: number;
    timeFirstSnapshotGenerated: string;
    timeLastSnapshotGenerated: string;
}

export interface GetOpsiAwrHubSourcesAwrHubSourceSummaryCollection {
    items: outputs.GetOpsiAwrHubSourcesAwrHubSourceSummaryCollectionItem[];
}

export interface GetOpsiAwrHubSourcesAwrHubSourceSummaryCollectionItem {
    associatedOpsiId: string;
    associatedResourceId: string;
    awrHubId: string;
    awrHubOpsiSourceId: string;
    awrSourceDatabaseId: string;
    compartmentId: string;
    definedTags: {[key: string]: string};
    freeformTags: {[key: string]: string};
    hoursSinceLastImport: number;
    id: string;
    isRegisteredWithAwrHub: boolean;
    maxSnapshotIdentifier: number;
    minSnapshotIdentifier: number;
    name: string;
    sourceMailBoxUrl: string;
    state: string;
    status: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeFirstSnapshotGenerated: string;
    timeLastSnapshotGenerated: string;
    timeUpdated: string;
    type: string;
}

export interface GetOpsiAwrHubSourcesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetOpsiAwrHubsAwrHubSummaryCollection {
    items: outputs.GetOpsiAwrHubsAwrHubSummaryCollectionItem[];
}

export interface GetOpsiAwrHubsAwrHubSummaryCollectionItem {
    awrMailboxUrl: string;
    compartmentId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    hubDstTimezoneVersion: string;
    id: string;
    lifecycleDetails: string;
    objectStorageBucketName: string;
    operationsInsightsWarehouseId: string;
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
}

export interface GetOpsiAwrHubsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetOpsiDatabaseInsightConnectionCredentialDetail {
    credentialSourceName: string;
    credentialType: string;
    passwordSecretId: string;
    role: string;
    userName: string;
    walletSecretId: string;
}

export interface GetOpsiDatabaseInsightConnectionDetail {
    hostName: string;
    hosts: outputs.GetOpsiDatabaseInsightConnectionDetailHost[];
    port: number;
    protocol: string;
    serviceName: string;
}

export interface GetOpsiDatabaseInsightConnectionDetailHost {
    hostIp: string;
    port: number;
}

export interface GetOpsiDatabaseInsightCredentialDetail {
    credentialSourceName: string;
    credentialType: string;
    passwordSecretId: string;
    role: string;
    userName: string;
    walletSecretId: string;
}

export interface GetOpsiDatabaseInsightsDatabaseInsightsCollection {
    items: outputs.GetOpsiDatabaseInsightsDatabaseInsightsCollectionItem[];
}

export interface GetOpsiDatabaseInsightsDatabaseInsightsCollectionItem {
    compartmentId: string;
    connectionCredentialDetails: outputs.GetOpsiDatabaseInsightsDatabaseInsightsCollectionItemConnectionCredentialDetail[];
    connectionDetails: outputs.GetOpsiDatabaseInsightsDatabaseInsightsCollectionItemConnectionDetail[];
    credentialDetails: outputs.GetOpsiDatabaseInsightsDatabaseInsightsCollectionItemCredentialDetail[];
    databaseConnectionStatusDetails: string;
    databaseDisplayName: string;
    databaseId: string;
    databaseName: string;
    databaseResourceType: string;
    databaseType: string;
    databaseVersion: string;
    dbmPrivateEndpointId: string;
    definedTags: {[key: string]: string};
    deploymentType: string;
    enterpriseManagerBridgeId: string;
    enterpriseManagerEntityDisplayName: string;
    enterpriseManagerEntityIdentifier: string;
    enterpriseManagerEntityName: string;
    enterpriseManagerEntityType: string;
    enterpriseManagerIdentifier: string;
    entitySource: string;
    exadataInsightId: string;
    freeformTags: {[key: string]: string};
    id: string;
    isHeatWaveClusterAttached: boolean;
    isHighlyAvailable: boolean;
    lifecycleDetails: string;
    opsiPrivateEndpointId: string;
    parentId: string;
    processorCount: number;
    rootId: string;
    serviceName: string;
    state: string;
    status: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
}

export interface GetOpsiDatabaseInsightsDatabaseInsightsCollectionItemConnectionCredentialDetail {
    credentialSourceName: string;
    credentialType: string;
    passwordSecretId: string;
    role: string;
    userName: string;
    walletSecretId: string;
}

export interface GetOpsiDatabaseInsightsDatabaseInsightsCollectionItemConnectionDetail {
    hostName: string;
    hosts: outputs.GetOpsiDatabaseInsightsDatabaseInsightsCollectionItemConnectionDetailHost[];
    port: number;
    protocol: string;
    serviceName: string;
}

export interface GetOpsiDatabaseInsightsDatabaseInsightsCollectionItemConnectionDetailHost {
    hostIp: string;
    port: number;
}

export interface GetOpsiDatabaseInsightsDatabaseInsightsCollectionItemCredentialDetail {
    credentialSourceName: string;
    credentialType: string;
    passwordSecretId: string;
    role: string;
    userName: string;
    walletSecretId: string;
}

export interface GetOpsiDatabaseInsightsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetOpsiEnterpriseManagerBridgesEnterpriseManagerBridgeCollection {
    items: outputs.GetOpsiEnterpriseManagerBridgesEnterpriseManagerBridgeCollectionItem[];
}

export interface GetOpsiEnterpriseManagerBridgesEnterpriseManagerBridgeCollectionItem {
    compartmentId: string;
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    lifecycleDetails: string;
    objectStorageBucketName: string;
    objectStorageBucketStatusDetails: string;
    objectStorageNamespaceName: string;
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
}

export interface GetOpsiEnterpriseManagerBridgesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetOpsiExadataInsightMemberVmClusterDetail {
    compartmentId: string;
    dbmPrivateEndpointId: string;
    memberDatabaseDetails: outputs.GetOpsiExadataInsightMemberVmClusterDetailMemberDatabaseDetail[];
    opsiPrivateEndpointId: string;
    vmclusterId: string;
}

export interface GetOpsiExadataInsightMemberVmClusterDetailMemberDatabaseDetail {
    compartmentId: string;
    connectionDetails: outputs.GetOpsiExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionDetail[];
    credentialDetails: outputs.GetOpsiExadataInsightMemberVmClusterDetailMemberDatabaseDetailCredentialDetail[];
    databaseId: string;
    databaseResourceType: string;
    dbmPrivateEndpointId: string;
    definedTags: {[key: string]: string};
    deploymentType: string;
    entitySource: string;
    freeformTags: {[key: string]: string};
    opsiPrivateEndpointId: string;
    serviceName: string;
    systemTags: {[key: string]: string};
}

export interface GetOpsiExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionDetail {
    hosts: outputs.GetOpsiExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionDetailHost[];
    protocol: string;
    serviceName: string;
}

export interface GetOpsiExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionDetailHost {
    hostIp: string;
    port: number;
}

export interface GetOpsiExadataInsightMemberVmClusterDetailMemberDatabaseDetailCredentialDetail {
    credentialSourceName: string;
    credentialType: string;
    passwordSecretId: string;
    role: string;
    userName: string;
    walletSecretId: string;
}

export interface GetOpsiExadataInsightsExadataInsightSummaryCollection {
    items: outputs.GetOpsiExadataInsightsExadataInsightSummaryCollectionItem[];
}

export interface GetOpsiExadataInsightsExadataInsightSummaryCollectionItem {
    compartmentId: string;
    definedTags: {[key: string]: string};
    enterpriseManagerBridgeId: string;
    enterpriseManagerEntityDisplayName: string;
    enterpriseManagerEntityIdentifier: string;
    enterpriseManagerEntityName: string;
    enterpriseManagerEntityType: string;
    enterpriseManagerIdentifier: string;
    entitySource: string;
    exadataDisplayName: string;
    exadataInfraId: string;
    exadataInfraResourceType: string;
    exadataName: string;
    exadataRackType: string;
    exadataShape: string;
    exadataType: string;
    freeformTags: {[key: string]: string};
    id: string;
    isAutoSyncEnabled: boolean;
    isVirtualizedExadata: boolean;
    lifecycleDetails: string;
    memberVmClusterDetails: outputs.GetOpsiExadataInsightsExadataInsightSummaryCollectionItemMemberVmClusterDetail[];
    state: string;
    status: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
}

export interface GetOpsiExadataInsightsExadataInsightSummaryCollectionItemMemberVmClusterDetail {
    compartmentId: string;
    dbmPrivateEndpointId: string;
    memberDatabaseDetails: outputs.GetOpsiExadataInsightsExadataInsightSummaryCollectionItemMemberVmClusterDetailMemberDatabaseDetail[];
    opsiPrivateEndpointId: string;
    vmclusterId: string;
}

export interface GetOpsiExadataInsightsExadataInsightSummaryCollectionItemMemberVmClusterDetailMemberDatabaseDetail {
    compartmentId: string;
    connectionDetails: outputs.GetOpsiExadataInsightsExadataInsightSummaryCollectionItemMemberVmClusterDetailMemberDatabaseDetailConnectionDetail[];
    credentialDetails: outputs.GetOpsiExadataInsightsExadataInsightSummaryCollectionItemMemberVmClusterDetailMemberDatabaseDetailCredentialDetail[];
    databaseId: string;
    databaseResourceType: string;
    dbmPrivateEndpointId: string;
    definedTags: {[key: string]: string};
    deploymentType: string;
    entitySource: string;
    freeformTags: {[key: string]: string};
    opsiPrivateEndpointId: string;
    serviceName: string;
    systemTags: {[key: string]: string};
}

export interface GetOpsiExadataInsightsExadataInsightSummaryCollectionItemMemberVmClusterDetailMemberDatabaseDetailConnectionDetail {
    hosts: outputs.GetOpsiExadataInsightsExadataInsightSummaryCollectionItemMemberVmClusterDetailMemberDatabaseDetailConnectionDetailHost[];
    protocol: string;
    serviceName: string;
}

export interface GetOpsiExadataInsightsExadataInsightSummaryCollectionItemMemberVmClusterDetailMemberDatabaseDetailConnectionDetailHost {
    hostIp: string;
    port: number;
}

export interface GetOpsiExadataInsightsExadataInsightSummaryCollectionItemMemberVmClusterDetailMemberDatabaseDetailCredentialDetail {
    credentialSourceName: string;
    credentialType: string;
    passwordSecretId: string;
    role: string;
    userName: string;
    walletSecretId: string;
}

export interface GetOpsiExadataInsightsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetOpsiHostInsightsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetOpsiHostInsightsHostInsightSummaryCollection {
    items: outputs.GetOpsiHostInsightsHostInsightSummaryCollectionItem[];
}

export interface GetOpsiHostInsightsHostInsightSummaryCollectionItem {
    compartmentId: string;
    computeId: string;
    definedTags: {[key: string]: string};
    enterpriseManagerBridgeId: string;
    enterpriseManagerEntityDisplayName: string;
    enterpriseManagerEntityIdentifier: string;
    enterpriseManagerEntityName: string;
    enterpriseManagerEntityType: string;
    enterpriseManagerIdentifier: string;
    entitySource: string;
    exadataInsightId: string;
    freeformTags: {[key: string]: string};
    hostDisplayName: string;
    hostName: string;
    hostType: string;
    id: string;
    lifecycleDetails: string;
    managementAgentId: string;
    platformName: string;
    platformType: string;
    platformVersion: string;
    processorCount: number;
    state: string;
    status: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
}

export interface GetOpsiImportableAgentEntitiesItem {
    entitySource: string;
    hostName: string;
    managementAgentDisplayName: string;
    managementAgentId: string;
    platformType: string;
}

export interface GetOpsiImportableAgentEntityItem {
    entitySource: string;
    hostName: string;
    managementAgentDisplayName: string;
    managementAgentId: string;
    platformType: string;
}

export interface GetOpsiImportableComputeEntitiesItem {
    compartmentId: string;
    computeDisplayName: string;
    computeId: string;
    entitySource: string;
    hostName: string;
    platformType: string;
}

export interface GetOpsiImportableComputeEntityItem {
    compartmentId: string;
    computeDisplayName: string;
    computeId: string;
    entitySource: string;
    hostName: string;
    platformType: string;
}

export interface GetOpsiNewsReportContentType {
    capacityPlanningResources: string[];
    sqlInsightsFleetAnalysisResources: string[];
    sqlInsightsPerformanceDegradationResources: string[];
    sqlInsightsPlanChangesResources: string[];
    sqlInsightsTopDatabasesResources: string[];
    sqlInsightsTopSqlByInsightsResources: string[];
    sqlInsightsTopSqlResources: string[];
}

export interface GetOpsiNewsReportsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetOpsiNewsReportsNewsReportCollection {
    items: outputs.GetOpsiNewsReportsNewsReportCollectionItem[];
}

export interface GetOpsiNewsReportsNewsReportCollectionItem {
    areChildCompartmentsIncluded: boolean;
    compartmentId: string;
    contentTypes: outputs.GetOpsiNewsReportsNewsReportCollectionItemContentType[];
    dayOfWeek: string;
    definedTags: {[key: string]: string};
    description: string;
    freeformTags: {[key: string]: string};
    id: string;
    lifecycleDetails: string;
    locale: string;
    name: string;
    newsFrequency: string;
    onsTopicId: string;
    state: string;
    status: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
}

export interface GetOpsiNewsReportsNewsReportCollectionItemContentType {
    capacityPlanningResources: string[];
    sqlInsightsFleetAnalysisResources: string[];
    sqlInsightsPerformanceDegradationResources: string[];
    sqlInsightsPlanChangesResources: string[];
    sqlInsightsTopDatabasesResources: string[];
    sqlInsightsTopSqlByInsightsResources: string[];
    sqlInsightsTopSqlResources: string[];
}

export interface GetOpsiOperationsInsightsPrivateEndpointsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetOpsiOperationsInsightsPrivateEndpointsOperationsInsightsPrivateEndpointCollection {
    items: outputs.GetOpsiOperationsInsightsPrivateEndpointsOperationsInsightsPrivateEndpointCollectionItem[];
}

export interface GetOpsiOperationsInsightsPrivateEndpointsOperationsInsightsPrivateEndpointCollectionItem {
    compartmentId: string;
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    isUsedForRacDbs: boolean;
    lifecycleDetails: string;
    nsgIds: string[];
    privateEndpointStatusDetails: string;
    privateIp: string;
    state: string;
    subnetId: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    vcnId: string;
}

export interface GetOpsiOperationsInsightsWarehouseUsersFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetOpsiOperationsInsightsWarehouseUsersOperationsInsightsWarehouseUserSummaryCollection {
    items: outputs.GetOpsiOperationsInsightsWarehouseUsersOperationsInsightsWarehouseUserSummaryCollectionItem[];
}

export interface GetOpsiOperationsInsightsWarehouseUsersOperationsInsightsWarehouseUserSummaryCollectionItem {
    compartmentId: string;
    connectionPassword: string;
    definedTags: {[key: string]: string};
    freeformTags: {[key: string]: string};
    id: string;
    isAwrDataAccess: boolean;
    isEmDataAccess: boolean;
    isOpsiDataAccess: boolean;
    lifecycleDetails: string;
    name: string;
    operationsInsightsWarehouseId: string;
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
}

export interface GetOpsiOperationsInsightsWarehousesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetOpsiOperationsInsightsWarehousesOperationsInsightsWarehouseSummaryCollection {
    items: outputs.GetOpsiOperationsInsightsWarehousesOperationsInsightsWarehouseSummaryCollectionItem[];
}

export interface GetOpsiOperationsInsightsWarehousesOperationsInsightsWarehouseSummaryCollectionItem {
    compartmentId: string;
    cpuAllocated: number;
    cpuUsed: number;
    definedTags: {[key: string]: string};
    displayName: string;
    dynamicGroupId: string;
    freeformTags: {[key: string]: string};
    id: string;
    lifecycleDetails: string;
    operationsInsightsTenancyId: string;
    state: string;
    storageAllocatedInGbs: number;
    storageUsedInGbs: number;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeLastWalletRotated: string;
    timeUpdated: string;
}

export interface GetOpsiOpsiConfigurationConfigItem {
    applicableContexts: string[];
    configItemType: string;
    defaultValue: string;
    metadatas: outputs.GetOpsiOpsiConfigurationConfigItemMetadata[];
    name: string;
    value: string;
}

export interface GetOpsiOpsiConfigurationConfigItemMetadata {
    configItemType: string;
    dataType: string;
    description: string;
    displayName: string;
    unitDetails: outputs.GetOpsiOpsiConfigurationConfigItemMetadataUnitDetail[];
    valueInputDetails: outputs.GetOpsiOpsiConfigurationConfigItemMetadataValueInputDetail[];
}

export interface GetOpsiOpsiConfigurationConfigItemMetadataUnitDetail {
    displayName: string;
    unit: string;
}

export interface GetOpsiOpsiConfigurationConfigItemMetadataValueInputDetail {
    allowedValueType: string;
    maxValue: string;
    minValue: string;
    possibleValues: string[];
}

export interface GetOpsiOpsiConfigurationConfigurationItemConfigItem {
    applicableContexts: string[];
    configItemType: string;
    defaultValue: string;
    metadatas: outputs.GetOpsiOpsiConfigurationConfigurationItemConfigItemMetadata[];
    name: string;
    value: string;
    valueSourceConfig: string;
}

export interface GetOpsiOpsiConfigurationConfigurationItemConfigItemMetadata {
    configItemType: string;
    dataType: string;
    description: string;
    displayName: string;
    unitDetails: outputs.GetOpsiOpsiConfigurationConfigurationItemConfigItemMetadataUnitDetail[];
    valueInputDetails: outputs.GetOpsiOpsiConfigurationConfigurationItemConfigItemMetadataValueInputDetail[];
}

export interface GetOpsiOpsiConfigurationConfigurationItemConfigItemMetadataUnitDetail {
    displayName: string;
    unit: string;
}

export interface GetOpsiOpsiConfigurationConfigurationItemConfigItemMetadataValueInputDetail {
    allowedValueType: string;
    maxValue: string;
    minValue: string;
    possibleValues: string[];
}

export interface GetOpsiOpsiConfigurationsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetOpsiOpsiConfigurationsOpsiConfigurationsCollection {
    items: outputs.GetOpsiOpsiConfigurationsOpsiConfigurationsCollectionItem[];
}

export interface GetOpsiOpsiConfigurationsOpsiConfigurationsCollectionItem {
    compartmentId: string;
    configItemCustomStatuses: string[];
    configItemFields: string[];
    configItems: outputs.GetOpsiOpsiConfigurationsOpsiConfigurationsCollectionItemConfigItem[];
    configItemsApplicableContexts: string[];
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    lifecycleDetails: string;
    opsiConfigFields: string[];
    opsiConfigType: string;
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
}

export interface GetOpsiOpsiConfigurationsOpsiConfigurationsCollectionItemConfigItem {
    applicableContexts: string[];
    configItemType: string;
    defaultValue: string;
    metadatas: outputs.GetOpsiOpsiConfigurationsOpsiConfigurationsCollectionItemConfigItemMetadata[];
    name: string;
    value: string;
}

export interface GetOpsiOpsiConfigurationsOpsiConfigurationsCollectionItemConfigItemMetadata {
    configItemType: string;
    dataType: string;
    description: string;
    displayName: string;
    unitDetails: outputs.GetOpsiOpsiConfigurationsOpsiConfigurationsCollectionItemConfigItemMetadataUnitDetail[];
    valueInputDetails: outputs.GetOpsiOpsiConfigurationsOpsiConfigurationsCollectionItemConfigItemMetadataValueInputDetail[];
}

export interface GetOpsiOpsiConfigurationsOpsiConfigurationsCollectionItemConfigItemMetadataUnitDetail {
    displayName: string;
    unit: string;
}

export interface GetOpsiOpsiConfigurationsOpsiConfigurationsCollectionItemConfigItemMetadataValueInputDetail {
    allowedValueType: string;
    maxValue: string;
    minValue: string;
    possibleValues: string[];
}

export interface GetOptimizerCategoriesCategoryCollection {
    items: outputs.GetOptimizerCategoriesCategoryCollectionItem[];
}

export interface GetOptimizerCategoriesCategoryCollectionItem {
    compartmentId: string;
    compartmentName: string;
    description: string;
    estimatedCostSaving: number;
    extendedMetadata: {[key: string]: string};
    id: string;
    name: string;
    recommendationCounts: outputs.GetOptimizerCategoriesCategoryCollectionItemRecommendationCount[];
    resourceCounts: outputs.GetOptimizerCategoriesCategoryCollectionItemResourceCount[];
    state: string;
    timeCreated: string;
    timeUpdated: string;
}

export interface GetOptimizerCategoriesCategoryCollectionItemRecommendationCount {
    count: number;
    importance: string;
}

export interface GetOptimizerCategoriesCategoryCollectionItemResourceCount {
    count: number;
    status: string;
}

export interface GetOptimizerCategoriesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetOptimizerCategoryRecommendationCount {
    count: number;
    importance: string;
}

export interface GetOptimizerCategoryResourceCount {
    count: number;
    status: string;
}

export interface GetOptimizerEnrollmentStatusesEnrollmentStatusCollection {
    items: outputs.GetOptimizerEnrollmentStatusesEnrollmentStatusCollectionItem[];
}

export interface GetOptimizerEnrollmentStatusesEnrollmentStatusCollectionItem {
    compartmentId: string;
    enrollmentStatusId: string;
    id: string;
    state: string;
    status: string;
    statusReason: string;
    timeCreated: string;
    timeUpdated: string;
}

export interface GetOptimizerEnrollmentStatusesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetOptimizerHistoriesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetOptimizerHistoriesHistoryCollection {
    items: outputs.GetOptimizerHistoriesHistoryCollectionItem[];
}

export interface GetOptimizerHistoriesHistoryCollectionItem {
    actions: outputs.GetOptimizerHistoriesHistoryCollectionItemAction[];
    categoryId: string;
    compartmentId: string;
    compartmentName: string;
    estimatedCostSaving: number;
    extendedMetadata: {[key: string]: string};
    id: string;
    metadata: {[key: string]: string};
    name: string;
    recommendationId: string;
    recommendationName: string;
    resourceActionId: string;
    resourceId: string;
    resourceType: string;
    state: string;
    status: string;
    timeCreated: string;
}

export interface GetOptimizerHistoriesHistoryCollectionItemAction {
    description: string;
    type: string;
    url: string;
}

export interface GetOptimizerProfileLevelItem {
    defaultInterval: number;
    metrics: outputs.GetOptimizerProfileLevelItemMetric[];
    name: string;
    recommendationName: string;
    timeCreated: string;
    timeUpdated: string;
    validIntervals: number[];
}

export interface GetOptimizerProfileLevelItemMetric {
    name: string;
    statistic: string;
    target: number;
    threshold: number;
}

export interface GetOptimizerProfileLevelsConfiguration {
    items: outputs.GetOptimizerProfileLevelsConfigurationItem[];
}

export interface GetOptimizerProfileLevelsConfigurationItem {
    level: string;
    recommendationId: string;
}

export interface GetOptimizerProfileLevelsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetOptimizerProfileLevelsProfileLevelCollection {
    items: outputs.GetOptimizerProfileLevelsProfileLevelCollectionItem[];
}

export interface GetOptimizerProfileLevelsProfileLevelCollectionItem {
    defaultInterval: number;
    metrics: outputs.GetOptimizerProfileLevelsProfileLevelCollectionItemMetric[];
    name: string;
    recommendationName: string;
    timeCreated: string;
    timeUpdated: string;
    validIntervals: number[];
}

export interface GetOptimizerProfileLevelsProfileLevelCollectionItemMetric {
    name: string;
    statistic: string;
    target: number;
    threshold: number;
}

export interface GetOptimizerProfileTargetCompartment {
    items: string[];
}

export interface GetOptimizerProfileTargetTag {
    items: outputs.GetOptimizerProfileTargetTagItem[];
}

export interface GetOptimizerProfileTargetTagItem {
    tagDefinitionName: string;
    tagNamespaceName: string;
    tagValueType: string;
    tagValues: string[];
}

export interface GetOptimizerProfilesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetOptimizerProfilesProfileCollection {
    items: outputs.GetOptimizerProfilesProfileCollectionItem[];
}

export interface GetOptimizerProfilesProfileCollectionItem {
    aggregationIntervalInDays: number;
    compartmentId: string;
    definedTags: {[key: string]: string};
    description: string;
    freeformTags: {[key: string]: string};
    id: string;
    levelsConfigurations: outputs.GetOptimizerProfilesProfileCollectionItemLevelsConfiguration[];
    name: string;
    state: string;
    systemTags: {[key: string]: string};
    targetCompartments: outputs.GetOptimizerProfilesProfileCollectionItemTargetCompartment[];
    targetTags: outputs.GetOptimizerProfilesProfileCollectionItemTargetTag[];
    timeCreated: string;
    timeUpdated: string;
}

export interface GetOptimizerProfilesProfileCollectionItemLevelsConfiguration {
    items: outputs.GetOptimizerProfilesProfileCollectionItemLevelsConfigurationItem[];
}

export interface GetOptimizerProfilesProfileCollectionItemLevelsConfigurationItem {
    level: string;
    recommendationId: string;
}

export interface GetOptimizerProfilesProfileCollectionItemTargetCompartment {
    items: string[];
}

export interface GetOptimizerProfilesProfileCollectionItemTargetTag {
    items: outputs.GetOptimizerProfilesProfileCollectionItemTargetTagItem[];
}

export interface GetOptimizerProfilesProfileCollectionItemTargetTagItem {
    tagDefinitionName: string;
    tagNamespaceName: string;
    tagValueType: string;
    tagValues: string[];
}

export interface GetOptimizerRecommendationResourceCount {
    count: number;
    status: string;
}

export interface GetOptimizerRecommendationStrategiesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetOptimizerRecommendationStrategiesRecommendationStrategyCollection {
    items: outputs.GetOptimizerRecommendationStrategiesRecommendationStrategyCollectionItem[];
}

export interface GetOptimizerRecommendationStrategiesRecommendationStrategyCollectionItem {
    name: string;
    strategies: outputs.GetOptimizerRecommendationStrategiesRecommendationStrategyCollectionItemStrategy[];
}

export interface GetOptimizerRecommendationStrategiesRecommendationStrategyCollectionItemStrategy {
    isDefault: boolean;
    parametersDefinitions: outputs.GetOptimizerRecommendationStrategiesRecommendationStrategyCollectionItemStrategyParametersDefinition[];
    strategyName: string;
}

export interface GetOptimizerRecommendationStrategiesRecommendationStrategyCollectionItemStrategyParametersDefinition {
    defaultValues: string[];
    description: string;
    isRequired: boolean;
    name: string;
    possibleValues: string[];
    type: string;
}

export interface GetOptimizerRecommendationStrategyItem {
    name: string;
    strategies: outputs.GetOptimizerRecommendationStrategyItemStrategy[];
}

export interface GetOptimizerRecommendationStrategyItemStrategy {
    isDefault: boolean;
    parametersDefinitions: outputs.GetOptimizerRecommendationStrategyItemStrategyParametersDefinition[];
    strategyName: string;
}

export interface GetOptimizerRecommendationStrategyItemStrategyParametersDefinition {
    defaultValues: string[];
    description: string;
    isRequired: boolean;
    name: string;
    possibleValues: string[];
    type: string;
}

export interface GetOptimizerRecommendationSupportedLevel {
    items: outputs.GetOptimizerRecommendationSupportedLevelItem[];
}

export interface GetOptimizerRecommendationSupportedLevelItem {
    name: string;
}

export interface GetOptimizerRecommendationsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetOptimizerRecommendationsRecommendationCollection {
    items: outputs.GetOptimizerRecommendationsRecommendationCollectionItem[];
}

export interface GetOptimizerRecommendationsRecommendationCollectionItem {
    categoryId: string;
    compartmentId: string;
    description: string;
    estimatedCostSaving: number;
    extendedMetadata: {[key: string]: string};
    id: string;
    importance: string;
    name: string;
    recommendationId: string;
    resourceCounts: outputs.GetOptimizerRecommendationsRecommendationCollectionItemResourceCount[];
    state: string;
    status: string;
    supportedLevels: outputs.GetOptimizerRecommendationsRecommendationCollectionItemSupportedLevel[];
    timeCreated: string;
    timeStatusBegin: string;
    timeStatusEnd: string;
    timeUpdated: string;
}

export interface GetOptimizerRecommendationsRecommendationCollectionItemResourceCount {
    count: number;
    status: string;
}

export interface GetOptimizerRecommendationsRecommendationCollectionItemSupportedLevel {
    items: outputs.GetOptimizerRecommendationsRecommendationCollectionItemSupportedLevelItem[];
}

export interface GetOptimizerRecommendationsRecommendationCollectionItemSupportedLevelItem {
    name: string;
}

export interface GetOptimizerResourceActionAction {
    description: string;
    type: string;
    url: string;
}

export interface GetOptimizerResourceActionsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetOptimizerResourceActionsResourceActionCollection {
    items: outputs.GetOptimizerResourceActionsResourceActionCollectionItem[];
}

export interface GetOptimizerResourceActionsResourceActionCollectionItem {
    actions: outputs.GetOptimizerResourceActionsResourceActionCollectionItemAction[];
    categoryId: string;
    compartmentId: string;
    compartmentName: string;
    estimatedCostSaving: number;
    extendedMetadata: {[key: string]: string};
    id: string;
    metadata: {[key: string]: string};
    name: string;
    recommendationId: string;
    resourceActionId: string;
    resourceId: string;
    resourceType: string;
    state: string;
    status: string;
    timeCreated: string;
    timeStatusBegin: string;
    timeStatusEnd: string;
    timeUpdated: string;
}

export interface GetOptimizerResourceActionsResourceActionCollectionItemAction {
    description: string;
    type: string;
    url: string;
}

export interface GetOsManagementHubEntitlementsEntitlementCollection {
    compartmentId: string;
    csi: string;
    items: outputs.GetOsManagementHubEntitlementsEntitlementCollectionItem[];
}

export interface GetOsManagementHubEntitlementsEntitlementCollectionItem {
    compartmentId: string;
    csi: string;
    vendorName: string;
}

export interface GetOsManagementHubEntitlementsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetOsManagementHubErrataErratumCollection {
    items: outputs.GetOsManagementHubErrataErratumCollectionItem[];
}

export interface GetOsManagementHubErrataErratumCollectionItem {
    advisorySeverity: string;
    advisoryType: string;
    classificationType: string;
    description: string;
    from: string;
    name: string;
    osFamilies: string[];
    packages: outputs.GetOsManagementHubErrataErratumCollectionItemPackage[];
    references: string;
    relatedCves: string[];
    repositories: string[];
    solution: string;
    synopsis: string;
    timeIssued: string;
    timeUpdated: string;
}

export interface GetOsManagementHubErrataErratumCollectionItemPackage {
    architecture: string;
    checksum: string;
    checksumType: string;
    displayName: string;
    isLatest: boolean;
    name: string;
    osFamilies: string[];
    softwareSources: outputs.GetOsManagementHubErrataErratumCollectionItemPackageSoftwareSource[];
    type: string;
    version: string;
}

export interface GetOsManagementHubErrataErratumCollectionItemPackageSoftwareSource {
    description: string;
    displayName: string;
    id: string;
    isMandatoryForAutonomousLinux: boolean;
    softwareSourceType: string;
}

export interface GetOsManagementHubErrataFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetOsManagementHubErratumPackage {
    architecture: string;
    checksum: string;
    checksumType: string;
    displayName: string;
    isLatest: boolean;
    name: string;
    osFamilies: string[];
    softwareSources: outputs.GetOsManagementHubErratumPackageSoftwareSource[];
    type: string;
    version: string;
}

export interface GetOsManagementHubErratumPackageSoftwareSource {
    description: string;
    displayName: string;
    id: string;
    isMandatoryForAutonomousLinux: boolean;
    softwareSourceType: string;
}

export interface GetOsManagementHubEventData {
    additionalDetails: outputs.GetOsManagementHubEventDataAdditionalDetail[];
    contents: outputs.GetOsManagementHubEventDataContent[];
    eventCount: number;
    eventFingerprint: string;
    operationType: string;
    reason: string;
    status: string;
    timeFirstOccurred: string;
}

export interface GetOsManagementHubEventDataAdditionalDetail {
    exploitCves: string[];
    initiatorId: string;
    vmcores: outputs.GetOsManagementHubEventDataAdditionalDetailVmcore[];
    workRequestIds: string[];
}

export interface GetOsManagementHubEventDataAdditionalDetailVmcore {
    backtrace: string;
    component: string;
}

export interface GetOsManagementHubEventDataContent {
    contentAvailability: string;
    contentLocation: string;
    exploitDetectionLogContent: string;
    exploitObjectStoreLocation: string;
    size: number;
    type: string;
}

export interface GetOsManagementHubEventSystemDetail {
    architecture: string;
    kspliceEffectiveKernelVersion: string;
    osFamily: string;
    osKernelRelease: string;
    osKernelVersion: string;
    osName: string;
    osSystemVersion: string;
}

export interface GetOsManagementHubEventsEventCollection {
    items: outputs.GetOsManagementHubEventsEventCollectionItem[];
}

export interface GetOsManagementHubEventsEventCollectionItem {
    compartmentId: string;
    datas: outputs.GetOsManagementHubEventsEventCollectionItemData[];
    definedTags: {[key: string]: string};
    eventDetails: string;
    eventId: string;
    eventSummary: string;
    freeformTags: {[key: string]: string};
    id: string;
    isManagedByAutonomousLinux: boolean;
    lifecycleDetails: string;
    resourceId: string;
    state: string;
    systemDetails: outputs.GetOsManagementHubEventsEventCollectionItemSystemDetail[];
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeOccurred: string;
    timeUpdated: string;
    type: string;
}

export interface GetOsManagementHubEventsEventCollectionItemData {
    additionalDetails: outputs.GetOsManagementHubEventsEventCollectionItemDataAdditionalDetail[];
    contents: outputs.GetOsManagementHubEventsEventCollectionItemDataContent[];
    eventCount: number;
    eventFingerprint: string;
    operationType: string;
    reason: string;
    status: string;
    timeFirstOccurred: string;
}

export interface GetOsManagementHubEventsEventCollectionItemDataAdditionalDetail {
    exploitCves: string[];
    initiatorId: string;
    vmcores: outputs.GetOsManagementHubEventsEventCollectionItemDataAdditionalDetailVmcore[];
    workRequestIds: string[];
}

export interface GetOsManagementHubEventsEventCollectionItemDataAdditionalDetailVmcore {
    backtrace: string;
    component: string;
}

export interface GetOsManagementHubEventsEventCollectionItemDataContent {
    contentAvailability: string;
    contentLocation: string;
    exploitDetectionLogContent: string;
    exploitObjectStoreLocation: string;
    size: number;
    type: string;
}

export interface GetOsManagementHubEventsEventCollectionItemSystemDetail {
    architecture: string;
    kspliceEffectiveKernelVersion: string;
    osFamily: string;
    osKernelRelease: string;
    osKernelVersion: string;
    osName: string;
    osSystemVersion: string;
}

export interface GetOsManagementHubEventsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetOsManagementHubLifecycleEnvironmentManagedInstanceId {
    displayName: string;
    id: string;
}

export interface GetOsManagementHubLifecycleEnvironmentStage {
    archType: string;
    compartmentId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    lifecycleEnvironmentId: string;
    location: string;
    managedInstanceIds: outputs.GetOsManagementHubLifecycleEnvironmentStageManagedInstanceId[];
    osFamily: string;
    rank: number;
    softwareSourceIds: outputs.GetOsManagementHubLifecycleEnvironmentStageSoftwareSourceId[];
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeModified: string;
    vendorName: string;
}

export interface GetOsManagementHubLifecycleEnvironmentStageManagedInstanceId {
    displayName: string;
    id: string;
}

export interface GetOsManagementHubLifecycleEnvironmentStageSoftwareSourceId {
    description: string;
    displayName: string;
    id: string;
    isMandatoryForAutonomousLinux: boolean;
    softwareSourceType: string;
}

export interface GetOsManagementHubLifecycleEnvironmentsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetOsManagementHubLifecycleEnvironmentsLifecycleEnvironmentCollection {
    items: outputs.GetOsManagementHubLifecycleEnvironmentsLifecycleEnvironmentCollectionItem[];
}

export interface GetOsManagementHubLifecycleEnvironmentsLifecycleEnvironmentCollectionItem {
    archType: string;
    compartmentId: string;
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    location: string;
    osFamily: string;
    stages: outputs.GetOsManagementHubLifecycleEnvironmentsLifecycleEnvironmentCollectionItemStage[];
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeModified: string;
    vendorName: string;
}

export interface GetOsManagementHubLifecycleEnvironmentsLifecycleEnvironmentCollectionItemStage {
    archType: string;
    compartmentId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    lifecycleEnvironmentDisplayName: string;
    lifecycleEnvironmentId: string;
    location: string;
    managedInstances: number;
    osFamily: string;
    rank: number;
    softwareSourceIds: outputs.GetOsManagementHubLifecycleEnvironmentsLifecycleEnvironmentCollectionItemStageSoftwareSourceId[];
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeModified: string;
    vendorName: string;
}

export interface GetOsManagementHubLifecycleEnvironmentsLifecycleEnvironmentCollectionItemStageSoftwareSourceId {
    description: string;
    displayName: string;
    id: string;
    isMandatoryForAutonomousLinux: boolean;
    softwareSourceType: string;
}

export interface GetOsManagementHubLifecycleStageManagedInstanceId {
    displayName: string;
    id: string;
}

export interface GetOsManagementHubLifecycleStageSoftwareSourceId {
    description: string;
    displayName: string;
    id: string;
    isMandatoryForAutonomousLinux: boolean;
    softwareSourceType: string;
}

export interface GetOsManagementHubLifecycleStagesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetOsManagementHubLifecycleStagesLifecycleStageCollection {
    items: outputs.GetOsManagementHubLifecycleStagesLifecycleStageCollectionItem[];
}

export interface GetOsManagementHubLifecycleStagesLifecycleStageCollectionItem {
    archType: string;
    compartmentId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    lifecycleEnvironmentDisplayName: string;
    lifecycleEnvironmentId: string;
    location: string;
    managedInstances: number;
    osFamily: string;
    rank: number;
    softwareSourceIds: outputs.GetOsManagementHubLifecycleStagesLifecycleStageCollectionItemSoftwareSourceId[];
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeModified: string;
    vendorName: string;
}

export interface GetOsManagementHubLifecycleStagesLifecycleStageCollectionItemSoftwareSourceId {
    description: string;
    displayName: string;
    id: string;
    isMandatoryForAutonomousLinux: boolean;
    softwareSourceType: string;
}

export interface GetOsManagementHubManagedInstanceAutonomousSetting {
    isDataCollectionAuthorized: boolean;
    scheduledJobId: string;
}

export interface GetOsManagementHubManagedInstanceAvailablePackagesAvailablePackageCollection {
    items: outputs.GetOsManagementHubManagedInstanceAvailablePackagesAvailablePackageCollectionItem[];
}

export interface GetOsManagementHubManagedInstanceAvailablePackagesAvailablePackageCollectionItem {
    architecture: string;
    displayName: string;
    name: string;
    packageClassification: string;
    softwareSources: outputs.GetOsManagementHubManagedInstanceAvailablePackagesAvailablePackageCollectionItemSoftwareSource[];
    type: string;
    version: string;
}

export interface GetOsManagementHubManagedInstanceAvailablePackagesAvailablePackageCollectionItemSoftwareSource {
    description: string;
    displayName: string;
    id: string;
    isMandatoryForAutonomousLinux: boolean;
    softwareSourceType: string;
}

export interface GetOsManagementHubManagedInstanceAvailablePackagesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetOsManagementHubManagedInstanceAvailableSoftwareSourcesAvailableSoftwareSourceCollection {
    items: outputs.GetOsManagementHubManagedInstanceAvailableSoftwareSourcesAvailableSoftwareSourceCollectionItem[];
}

export interface GetOsManagementHubManagedInstanceAvailableSoftwareSourcesAvailableSoftwareSourceCollectionItem {
    compartmentId: string;
    displayName: string;
    id: string;
}

export interface GetOsManagementHubManagedInstanceAvailableSoftwareSourcesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetOsManagementHubManagedInstanceAvailableWindowsUpdatesAvailableWindowsUpdateCollection {
    items: outputs.GetOsManagementHubManagedInstanceAvailableWindowsUpdatesAvailableWindowsUpdateCollectionItem[];
}

export interface GetOsManagementHubManagedInstanceAvailableWindowsUpdatesAvailableWindowsUpdateCollectionItem {
    installable: string;
    isRebootRequiredForInstallation: boolean;
    name: string;
    updateId: string;
    updateType: string;
}

export interface GetOsManagementHubManagedInstanceAvailableWindowsUpdatesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetOsManagementHubManagedInstanceErrataFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetOsManagementHubManagedInstanceErrataManagedInstanceErratumSummaryCollection {
    items: outputs.GetOsManagementHubManagedInstanceErrataManagedInstanceErratumSummaryCollectionItem[];
}

export interface GetOsManagementHubManagedInstanceErrataManagedInstanceErratumSummaryCollectionItem {
    advisoryType: string;
    name: string;
    packages: outputs.GetOsManagementHubManagedInstanceErrataManagedInstanceErratumSummaryCollectionItemPackage[];
    relatedCves: string[];
    synopsis: string;
    timeIssued: string;
}

export interface GetOsManagementHubManagedInstanceErrataManagedInstanceErratumSummaryCollectionItemPackage {
    architecture: string;
    displayName: string;
    name: string;
    type: string;
    version: string;
}

export interface GetOsManagementHubManagedInstanceGroupAutonomousSetting {
    isDataCollectionAuthorized: boolean;
    scheduledJobId: string;
}

export interface GetOsManagementHubManagedInstanceGroupAvailableModulesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetOsManagementHubManagedInstanceGroupAvailableModulesManagedInstanceGroupAvailableModuleCollection {
    items: outputs.GetOsManagementHubManagedInstanceGroupAvailableModulesManagedInstanceGroupAvailableModuleCollectionItem[];
}

export interface GetOsManagementHubManagedInstanceGroupAvailableModulesManagedInstanceGroupAvailableModuleCollectionItem {
    name: string;
    softwareSourceId: string;
}

export interface GetOsManagementHubManagedInstanceGroupAvailablePackagesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetOsManagementHubManagedInstanceGroupAvailablePackagesManagedInstanceGroupAvailablePackageCollection {
    items: outputs.GetOsManagementHubManagedInstanceGroupAvailablePackagesManagedInstanceGroupAvailablePackageCollectionItem[];
}

export interface GetOsManagementHubManagedInstanceGroupAvailablePackagesManagedInstanceGroupAvailablePackageCollectionItem {
    architecture: string;
    displayName: string;
    isLatest: boolean;
    name: string;
    softwareSources: outputs.GetOsManagementHubManagedInstanceGroupAvailablePackagesManagedInstanceGroupAvailablePackageCollectionItemSoftwareSource[];
    type: string;
    version: string;
}

export interface GetOsManagementHubManagedInstanceGroupAvailablePackagesManagedInstanceGroupAvailablePackageCollectionItemSoftwareSource {
    description: string;
    displayName: string;
    id: string;
    isMandatoryForAutonomousLinux: boolean;
    softwareSourceType: string;
}

export interface GetOsManagementHubManagedInstanceGroupAvailableSoftwareSourcesAvailableSoftwareSourceCollection {
    items: outputs.GetOsManagementHubManagedInstanceGroupAvailableSoftwareSourcesAvailableSoftwareSourceCollectionItem[];
}

export interface GetOsManagementHubManagedInstanceGroupAvailableSoftwareSourcesAvailableSoftwareSourceCollectionItem {
    compartmentId: string;
    displayName: string;
    id: string;
}

export interface GetOsManagementHubManagedInstanceGroupAvailableSoftwareSourcesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetOsManagementHubManagedInstanceGroupInstalledPackagesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetOsManagementHubManagedInstanceGroupInstalledPackagesManagedInstanceGroupInstalledPackageCollection {
    items: outputs.GetOsManagementHubManagedInstanceGroupInstalledPackagesManagedInstanceGroupInstalledPackageCollectionItem[];
}

export interface GetOsManagementHubManagedInstanceGroupInstalledPackagesManagedInstanceGroupInstalledPackageCollectionItem {
    architecture: string;
    name: string;
}

export interface GetOsManagementHubManagedInstanceGroupModulesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetOsManagementHubManagedInstanceGroupModulesManagedInstanceGroupModuleCollection {
    items: outputs.GetOsManagementHubManagedInstanceGroupModulesManagedInstanceGroupModuleCollectionItem[];
}

export interface GetOsManagementHubManagedInstanceGroupModulesManagedInstanceGroupModuleCollectionItem {
    enabledStream: string;
    installedProfiles: string[];
    name: string;
    softwareSourceId: string;
}

export interface GetOsManagementHubManagedInstanceGroupSoftwareSource {
    description: string;
    displayName: string;
    id: string;
    isMandatoryForAutonomousLinux: boolean;
    softwareSourceType: string;
}

export interface GetOsManagementHubManagedInstanceGroupsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetOsManagementHubManagedInstanceGroupsManagedInstanceGroupCollection {
    items: outputs.GetOsManagementHubManagedInstanceGroupsManagedInstanceGroupCollectionItem[];
}

export interface GetOsManagementHubManagedInstanceGroupsManagedInstanceGroupCollectionItem {
    archType: string;
    autonomousSettings: outputs.GetOsManagementHubManagedInstanceGroupsManagedInstanceGroupCollectionItemAutonomousSetting[];
    compartmentId: string;
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    isManagedByAutonomousLinux: boolean;
    location: string;
    managedInstanceCount: number;
    managedInstanceIds: string[];
    notificationTopicId: string;
    osFamily: string;
    pendingJobCount: number;
    softwareSourceIds: string[];
    softwareSources: outputs.GetOsManagementHubManagedInstanceGroupsManagedInstanceGroupCollectionItemSoftwareSource[];
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeModified: string;
    vendorName: string;
}

export interface GetOsManagementHubManagedInstanceGroupsManagedInstanceGroupCollectionItemAutonomousSetting {
    isDataCollectionAuthorized: boolean;
    scheduledJobId: string;
}

export interface GetOsManagementHubManagedInstanceGroupsManagedInstanceGroupCollectionItemSoftwareSource {
    description: string;
    displayName: string;
    id: string;
    isMandatoryForAutonomousLinux: boolean;
    softwareSourceType: string;
}

export interface GetOsManagementHubManagedInstanceInstalledPackagesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetOsManagementHubManagedInstanceInstalledPackagesInstalledPackageCollection {
    items: outputs.GetOsManagementHubManagedInstanceInstalledPackagesInstalledPackageCollectionItem[];
}

export interface GetOsManagementHubManagedInstanceInstalledPackagesInstalledPackageCollectionItem {
    architecture: string;
    displayName: string;
    name: string;
    packageClassification: string;
    softwareSources: outputs.GetOsManagementHubManagedInstanceInstalledPackagesInstalledPackageCollectionItemSoftwareSource[];
    timeInstalled: string;
    timeIssued: string;
    type: string;
    version: string;
}

export interface GetOsManagementHubManagedInstanceInstalledPackagesInstalledPackageCollectionItemSoftwareSource {
    description: string;
    displayName: string;
    id: string;
    isMandatoryForAutonomousLinux: boolean;
    softwareSourceType: string;
}

export interface GetOsManagementHubManagedInstanceInstalledWindowsUpdatesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetOsManagementHubManagedInstanceInstalledWindowsUpdatesInstalledWindowsUpdateCollection {
    items: outputs.GetOsManagementHubManagedInstanceInstalledWindowsUpdatesInstalledWindowsUpdateCollectionItem[];
}

export interface GetOsManagementHubManagedInstanceInstalledWindowsUpdatesInstalledWindowsUpdateCollectionItem {
    name: string;
    updateId: string;
    updateType: string;
}

export interface GetOsManagementHubManagedInstanceLifecycleEnvironment {
    displayName: string;
    id: string;
}

export interface GetOsManagementHubManagedInstanceLifecycleStage {
    displayName: string;
    id: string;
}

export interface GetOsManagementHubManagedInstanceManagedInstanceGroup {
    displayName: string;
    id: string;
}

export interface GetOsManagementHubManagedInstanceModulesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetOsManagementHubManagedInstanceModulesManagedInstanceModuleCollection {
    items: outputs.GetOsManagementHubManagedInstanceModulesManagedInstanceModuleCollectionItem[];
}

export interface GetOsManagementHubManagedInstanceModulesManagedInstanceModuleCollectionItem {
    activeStreams: string[];
    disabledStreams: string[];
    enabledStream: string;
    installedProfiles: string[];
    name: string;
    softwareSourceId: string;
}

export interface GetOsManagementHubManagedInstanceSoftwareSource {
    description: string;
    displayName: string;
    id: string;
    isMandatoryForAutonomousLinux: boolean;
    softwareSourceType: string;
}

export interface GetOsManagementHubManagedInstanceUpdatablePackagesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetOsManagementHubManagedInstanceUpdatablePackagesUpdatablePackageCollection {
    items: outputs.GetOsManagementHubManagedInstanceUpdatablePackagesUpdatablePackageCollectionItem[];
}

export interface GetOsManagementHubManagedInstanceUpdatablePackagesUpdatablePackageCollectionItem {
    architecture: string;
    displayName: string;
    erratas: string[];
    installedVersion: string;
    name: string;
    packageClassification: string;
    relatedCves: string[];
    softwareSources: outputs.GetOsManagementHubManagedInstanceUpdatablePackagesUpdatablePackageCollectionItemSoftwareSource[];
    type: string;
    updateType: string;
    version: string;
}

export interface GetOsManagementHubManagedInstanceUpdatablePackagesUpdatablePackageCollectionItemSoftwareSource {
    description: string;
    displayName: string;
    id: string;
    isMandatoryForAutonomousLinux: boolean;
    softwareSourceType: string;
}

export interface GetOsManagementHubManagedInstancesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetOsManagementHubManagedInstancesManagedInstanceCollection {
    items: outputs.GetOsManagementHubManagedInstancesManagedInstanceCollectionItem[];
}

export interface GetOsManagementHubManagedInstancesManagedInstanceCollectionItem {
    architecture: string;
    autonomousSettings: outputs.GetOsManagementHubManagedInstancesManagedInstanceCollectionItemAutonomousSetting[];
    bugUpdatesAvailable: number;
    compartmentId: string;
    description: string;
    displayName: string;
    enhancementUpdatesAvailable: number;
    id: string;
    installedPackages: number;
    installedWindowsUpdates: number;
    isManagedByAutonomousLinux: boolean;
    isManagementStation: boolean;
    isRebootRequired: boolean;
    kspliceEffectiveKernelVersion: string;
    lifecycleEnvironments: outputs.GetOsManagementHubManagedInstancesManagedInstanceCollectionItemLifecycleEnvironment[];
    lifecycleStages: outputs.GetOsManagementHubManagedInstancesManagedInstanceCollectionItemLifecycleStage[];
    location: string;
    managedInstanceGroups: outputs.GetOsManagementHubManagedInstancesManagedInstanceCollectionItemManagedInstanceGroup[];
    managedInstanceId: string;
    notificationTopicId: string;
    osFamily: string;
    osKernelVersion: string;
    osName: string;
    osVersion: string;
    otherUpdatesAvailable: number;
    primaryManagementStationId: string;
    profile: string;
    scheduledJobCount: number;
    secondaryManagementStationId: string;
    securityUpdatesAvailable: number;
    softwareSources: outputs.GetOsManagementHubManagedInstancesManagedInstanceCollectionItemSoftwareSource[];
    status: string;
    tenancyId: string;
    timeCreated: string;
    timeLastBoot: string;
    timeLastCheckin: string;
    timeUpdated: string;
    updatesAvailable: number;
    workRequestCount: number;
}

export interface GetOsManagementHubManagedInstancesManagedInstanceCollectionItemAutonomousSetting {
    isDataCollectionAuthorized: boolean;
    scheduledJobId: string;
}

export interface GetOsManagementHubManagedInstancesManagedInstanceCollectionItemLifecycleEnvironment {
    displayName: string;
    id: string;
}

export interface GetOsManagementHubManagedInstancesManagedInstanceCollectionItemLifecycleStage {
    displayName: string;
    id: string;
}

export interface GetOsManagementHubManagedInstancesManagedInstanceCollectionItemManagedInstanceGroup {
    displayName: string;
    id: string;
}

export interface GetOsManagementHubManagedInstancesManagedInstanceCollectionItemSoftwareSource {
    description: string;
    displayName: string;
    id: string;
    isMandatoryForAutonomousLinux: boolean;
    softwareSourceType: string;
}

export interface GetOsManagementHubManagementStationHealth {
    description: string;
    state: string;
}

export interface GetOsManagementHubManagementStationMirror {
    directory: string;
    port: string;
    sslcert: string;
    sslport: string;
}

export interface GetOsManagementHubManagementStationMirrorSyncStatus {
    failed: number;
    queued: number;
    synced: number;
    syncing: number;
    unsynced: number;
}

export interface GetOsManagementHubManagementStationMirrorsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetOsManagementHubManagementStationMirrorsMirrorsCollection {
    items: outputs.GetOsManagementHubManagementStationMirrorsMirrorsCollectionItem[];
}

export interface GetOsManagementHubManagementStationMirrorsMirrorsCollectionItem {
    archType: string;
    displayName: string;
    id: string;
    log: string;
    osFamily: string;
    percentage: number;
    state: string;
    timeLastSynced: string;
    type: string;
}

export interface GetOsManagementHubManagementStationProxy {
    forward: string;
    hosts: string[];
    isEnabled: boolean;
    port: string;
}

export interface GetOsManagementHubManagementStationsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetOsManagementHubManagementStationsManagementStationCollection {
    items: outputs.GetOsManagementHubManagementStationsManagementStationCollectionItem[];
}

export interface GetOsManagementHubManagementStationsManagementStationCollectionItem {
    compartmentId: string;
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    freeformTags: {[key: string]: string};
    healthState: string;
    hostname: string;
    id: string;
    managedInstanceId: string;
    mirrorCapacity: number;
    overallPercentage: number;
    overallState: string;
    profileId: string;
    scheduledJobId: string;
    state: string;
    systemTags: {[key: string]: string};
    timeNextExecution: string;
}

export interface GetOsManagementHubProfileLifecycleEnvironment {
    displayName: string;
    id: string;
}

export interface GetOsManagementHubProfileLifecycleStage {
    displayName: string;
    id: string;
}

export interface GetOsManagementHubProfileManagedInstanceGroup {
    displayName: string;
    id: string;
}

export interface GetOsManagementHubProfileSoftwareSource {
    description: string;
    displayName: string;
    id: string;
    isMandatoryForAutonomousLinux: boolean;
    softwareSourceType: string;
}

export interface GetOsManagementHubProfilesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetOsManagementHubProfilesProfileCollection {
    items: outputs.GetOsManagementHubProfilesProfileCollectionItem[];
}

export interface GetOsManagementHubProfilesProfileCollectionItem {
    archType: string;
    compartmentId: string;
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    isDefaultProfile: boolean;
    isServiceProvidedProfile: boolean;
    lifecycleEnvironments: outputs.GetOsManagementHubProfilesProfileCollectionItemLifecycleEnvironment[];
    lifecycleStageId: string;
    lifecycleStages: outputs.GetOsManagementHubProfilesProfileCollectionItemLifecycleStage[];
    managedInstanceGroupId: string;
    managedInstanceGroups: outputs.GetOsManagementHubProfilesProfileCollectionItemManagedInstanceGroup[];
    managementStationId: string;
    osFamily: string;
    profileType: string;
    registrationType: string;
    softwareSourceIds: string[];
    softwareSources: outputs.GetOsManagementHubProfilesProfileCollectionItemSoftwareSource[];
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    vendorName: string;
}

export interface GetOsManagementHubProfilesProfileCollectionItemLifecycleEnvironment {
    displayName: string;
    id: string;
}

export interface GetOsManagementHubProfilesProfileCollectionItemLifecycleStage {
    displayName: string;
    id: string;
}

export interface GetOsManagementHubProfilesProfileCollectionItemManagedInstanceGroup {
    displayName: string;
    id: string;
}

export interface GetOsManagementHubProfilesProfileCollectionItemSoftwareSource {
    description: string;
    displayName: string;
    id: string;
    isMandatoryForAutonomousLinux: boolean;
    softwareSourceType: string;
}

export interface GetOsManagementHubScheduledJobOperation {
    manageModuleStreamsDetails: outputs.GetOsManagementHubScheduledJobOperationManageModuleStreamsDetail[];
    operationType: string;
    packageNames: string[];
    softwareSourceIds: string[];
    switchModuleStreamsDetails: outputs.GetOsManagementHubScheduledJobOperationSwitchModuleStreamsDetail[];
    windowsUpdateNames: string[];
}

export interface GetOsManagementHubScheduledJobOperationManageModuleStreamsDetail {
    disables: outputs.GetOsManagementHubScheduledJobOperationManageModuleStreamsDetailDisable[];
    enables: outputs.GetOsManagementHubScheduledJobOperationManageModuleStreamsDetailEnable[];
    installs: outputs.GetOsManagementHubScheduledJobOperationManageModuleStreamsDetailInstall[];
    removes: outputs.GetOsManagementHubScheduledJobOperationManageModuleStreamsDetailRemove[];
}

export interface GetOsManagementHubScheduledJobOperationManageModuleStreamsDetailDisable {
    moduleName: string;
    softwareSourceId: string;
    streamName: string;
}

export interface GetOsManagementHubScheduledJobOperationManageModuleStreamsDetailEnable {
    moduleName: string;
    softwareSourceId: string;
    streamName: string;
}

export interface GetOsManagementHubScheduledJobOperationManageModuleStreamsDetailInstall {
    moduleName: string;
    profileName: string;
    softwareSourceId: string;
    streamName: string;
}

export interface GetOsManagementHubScheduledJobOperationManageModuleStreamsDetailRemove {
    moduleName: string;
    profileName: string;
    softwareSourceId: string;
    streamName: string;
}

export interface GetOsManagementHubScheduledJobOperationSwitchModuleStreamsDetail {
    moduleName: string;
    softwareSourceId: string;
    streamName: string;
}

export interface GetOsManagementHubScheduledJobsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetOsManagementHubScheduledJobsScheduledJobCollection {
    items: outputs.GetOsManagementHubScheduledJobsScheduledJobCollectionItem[];
}

export interface GetOsManagementHubScheduledJobsScheduledJobCollectionItem {
    compartmentId: string;
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    isManagedByAutonomousLinux: boolean;
    isRestricted: boolean;
    isSubcompartmentIncluded: boolean;
    lifecycleStageIds: string[];
    locations: string[];
    managedCompartmentIds: string[];
    managedInstanceGroupIds: string[];
    managedInstanceIds: string[];
    operations: outputs.GetOsManagementHubScheduledJobsScheduledJobCollectionItemOperation[];
    recurringRule: string;
    retryIntervals: number[];
    scheduleType: string;
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeLastExecution: string;
    timeNextExecution: string;
    timeUpdated: string;
    workRequestIds: string[];
}

export interface GetOsManagementHubScheduledJobsScheduledJobCollectionItemOperation {
    manageModuleStreamsDetails: outputs.GetOsManagementHubScheduledJobsScheduledJobCollectionItemOperationManageModuleStreamsDetail[];
    operationType: string;
    packageNames: string[];
    softwareSourceIds: string[];
    switchModuleStreamsDetails: outputs.GetOsManagementHubScheduledJobsScheduledJobCollectionItemOperationSwitchModuleStreamsDetail[];
    windowsUpdateNames: string[];
}

export interface GetOsManagementHubScheduledJobsScheduledJobCollectionItemOperationManageModuleStreamsDetail {
    disables: outputs.GetOsManagementHubScheduledJobsScheduledJobCollectionItemOperationManageModuleStreamsDetailDisable[];
    enables: outputs.GetOsManagementHubScheduledJobsScheduledJobCollectionItemOperationManageModuleStreamsDetailEnable[];
    installs: outputs.GetOsManagementHubScheduledJobsScheduledJobCollectionItemOperationManageModuleStreamsDetailInstall[];
    removes: outputs.GetOsManagementHubScheduledJobsScheduledJobCollectionItemOperationManageModuleStreamsDetailRemove[];
}

export interface GetOsManagementHubScheduledJobsScheduledJobCollectionItemOperationManageModuleStreamsDetailDisable {
    moduleName: string;
    softwareSourceId: string;
    streamName: string;
}

export interface GetOsManagementHubScheduledJobsScheduledJobCollectionItemOperationManageModuleStreamsDetailEnable {
    moduleName: string;
    softwareSourceId: string;
    streamName: string;
}

export interface GetOsManagementHubScheduledJobsScheduledJobCollectionItemOperationManageModuleStreamsDetailInstall {
    moduleName: string;
    profileName: string;
    softwareSourceId: string;
    streamName: string;
}

export interface GetOsManagementHubScheduledJobsScheduledJobCollectionItemOperationManageModuleStreamsDetailRemove {
    moduleName: string;
    profileName: string;
    softwareSourceId: string;
    streamName: string;
}

export interface GetOsManagementHubScheduledJobsScheduledJobCollectionItemOperationSwitchModuleStreamsDetail {
    moduleName: string;
    softwareSourceId: string;
    streamName: string;
}

export interface GetOsManagementHubSoftwarePackageDependency {
    dependency: string;
    dependencyModifier: string;
    dependencyType: string;
}

export interface GetOsManagementHubSoftwarePackageFile {
    checksum: string;
    checksumType: string;
    path: string;
    sizeInBytes: string;
    timeModified: string;
    type: string;
}

export interface GetOsManagementHubSoftwarePackageSoftwareSource {
    description: string;
    displayName: string;
    id: string;
    isMandatoryForAutonomousLinux: boolean;
    softwareSourceType: string;
}

export interface GetOsManagementHubSoftwarePackageSoftwareSourceFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetOsManagementHubSoftwarePackageSoftwareSourceSoftwareSourceCollection {
    items: outputs.GetOsManagementHubSoftwarePackageSoftwareSourceSoftwareSourceCollectionItem[];
}

export interface GetOsManagementHubSoftwarePackageSoftwareSourceSoftwareSourceCollectionItem {
    archType: string;
    availability: string;
    availabilityAtOci: string;
    compartmentId: string;
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    isMandatoryForAutonomousLinux: boolean;
    osFamily: string;
    packageCount: string;
    repoId: string;
    size: number;
    softwareSourceType: string;
    softwareSourceVersion: string;
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
    url: string;
    vendorName: string;
    vendorSoftwareSources: outputs.GetOsManagementHubSoftwarePackageSoftwareSourceSoftwareSourceCollectionItemVendorSoftwareSource[];
}

export interface GetOsManagementHubSoftwarePackageSoftwareSourceSoftwareSourceCollectionItemVendorSoftwareSource {
    displayName: string;
    id: string;
}

export interface GetOsManagementHubSoftwarePackagesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetOsManagementHubSoftwarePackagesSoftwarePackageCollection {
    items: outputs.GetOsManagementHubSoftwarePackagesSoftwarePackageCollectionItem[];
}

export interface GetOsManagementHubSoftwarePackagesSoftwarePackageCollectionItem {
    architecture: string;
    checksum: string;
    checksumType: string;
    dependencies: outputs.GetOsManagementHubSoftwarePackagesSoftwarePackageCollectionItemDependency[];
    description: string;
    displayName: string;
    files: outputs.GetOsManagementHubSoftwarePackagesSoftwarePackageCollectionItemFile[];
    isLatest: boolean;
    lastModifiedDate: string;
    name: string;
    osFamilies: string[];
    sizeInBytes: string;
    softwareSources: outputs.GetOsManagementHubSoftwarePackagesSoftwarePackageCollectionItemSoftwareSource[];
    type: string;
    version: string;
}

export interface GetOsManagementHubSoftwarePackagesSoftwarePackageCollectionItemDependency {
    dependency: string;
    dependencyModifier: string;
    dependencyType: string;
}

export interface GetOsManagementHubSoftwarePackagesSoftwarePackageCollectionItemFile {
    checksum: string;
    checksumType: string;
    path: string;
    sizeInBytes: string;
    timeModified: string;
    type: string;
}

export interface GetOsManagementHubSoftwarePackagesSoftwarePackageCollectionItemSoftwareSource {
    description: string;
    displayName: string;
    id: string;
    isMandatoryForAutonomousLinux: boolean;
    softwareSourceType: string;
}

export interface GetOsManagementHubSoftwareSourceCustomSoftwareSourceFilter {
    moduleStreamProfileFilters: outputs.GetOsManagementHubSoftwareSourceCustomSoftwareSourceFilterModuleStreamProfileFilter[];
    packageFilters: outputs.GetOsManagementHubSoftwareSourceCustomSoftwareSourceFilterPackageFilter[];
    packageGroupFilters: outputs.GetOsManagementHubSoftwareSourceCustomSoftwareSourceFilterPackageGroupFilter[];
}

export interface GetOsManagementHubSoftwareSourceCustomSoftwareSourceFilterModuleStreamProfileFilter {
    filterType: string;
    moduleName: string;
    profileName: string;
    streamName: string;
}

export interface GetOsManagementHubSoftwareSourceCustomSoftwareSourceFilterPackageFilter {
    filterType: string;
    packageName: string;
    packageNamePattern: string;
    packageVersion: string;
}

export interface GetOsManagementHubSoftwareSourceCustomSoftwareSourceFilterPackageGroupFilter {
    filterType: string;
    packageGroups: string[];
}

export interface GetOsManagementHubSoftwareSourceModuleStreamProfilesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetOsManagementHubSoftwareSourceModuleStreamProfilesModuleStreamProfileCollection {
    items: outputs.GetOsManagementHubSoftwareSourceModuleStreamProfilesModuleStreamProfileCollectionItem[];
}

export interface GetOsManagementHubSoftwareSourceModuleStreamProfilesModuleStreamProfileCollectionItem {
    description: string;
    isDefault: boolean;
    moduleName: string;
    name: string;
    packages: string[];
    streamName: string;
}

export interface GetOsManagementHubSoftwareSourceModuleStreamsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetOsManagementHubSoftwareSourceModuleStreamsModuleStreamCollection {
    items: outputs.GetOsManagementHubSoftwareSourceModuleStreamsModuleStreamCollectionItem[];
}

export interface GetOsManagementHubSoftwareSourceModuleStreamsModuleStreamCollectionItem {
    archType: string;
    description: string;
    isDefault: boolean;
    isLatest: boolean;
    moduleName: string;
    name: string;
    packages: string[];
    profiles: string[];
    softwareSourceId: string;
}

export interface GetOsManagementHubSoftwareSourcePackageGroupsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetOsManagementHubSoftwareSourcePackageGroupsPackageGroupCollection {
    items: outputs.GetOsManagementHubSoftwareSourcePackageGroupsPackageGroupCollectionItem[];
}

export interface GetOsManagementHubSoftwareSourcePackageGroupsPackageGroupCollectionItem {
    description: string;
    displayOrder: number;
    groupType: string;
    id: string;
    isDefault: boolean;
    isUserVisible: boolean;
    name: string;
    packages: string[];
    repositories: string[];
}

export interface GetOsManagementHubSoftwareSourceSoftwarePackageDependency {
    dependency: string;
    dependencyModifier: string;
    dependencyType: string;
}

export interface GetOsManagementHubSoftwareSourceSoftwarePackageFile {
    checksum: string;
    checksumType: string;
    path: string;
    sizeInBytes: string;
    timeModified: string;
    type: string;
}

export interface GetOsManagementHubSoftwareSourceSoftwarePackageSoftwareSource {
    description: string;
    displayName: string;
    id: string;
    isMandatoryForAutonomousLinux: boolean;
    softwareSourceType: string;
}

export interface GetOsManagementHubSoftwareSourceSoftwarePackagesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetOsManagementHubSoftwareSourceSoftwarePackagesSoftwarePackageCollection {
    items: outputs.GetOsManagementHubSoftwareSourceSoftwarePackagesSoftwarePackageCollectionItem[];
}

export interface GetOsManagementHubSoftwareSourceSoftwarePackagesSoftwarePackageCollectionItem {
    architecture: string;
    checksum: string;
    checksumType: string;
    dependencies: outputs.GetOsManagementHubSoftwareSourceSoftwarePackagesSoftwarePackageCollectionItemDependency[];
    description: string;
    displayName: string;
    files: outputs.GetOsManagementHubSoftwareSourceSoftwarePackagesSoftwarePackageCollectionItemFile[];
    isLatest: boolean;
    lastModifiedDate: string;
    name: string;
    osFamilies: string[];
    sizeInBytes: string;
    softwareSources: outputs.GetOsManagementHubSoftwareSourceSoftwarePackagesSoftwarePackageCollectionItemSoftwareSource[];
    type: string;
    version: string;
}

export interface GetOsManagementHubSoftwareSourceSoftwarePackagesSoftwarePackageCollectionItemDependency {
    dependency: string;
    dependencyModifier: string;
    dependencyType: string;
}

export interface GetOsManagementHubSoftwareSourceSoftwarePackagesSoftwarePackageCollectionItemFile {
    checksum: string;
    checksumType: string;
    path: string;
    sizeInBytes: string;
    timeModified: string;
    type: string;
}

export interface GetOsManagementHubSoftwareSourceSoftwarePackagesSoftwarePackageCollectionItemSoftwareSource {
    description: string;
    displayName: string;
    id: string;
    isMandatoryForAutonomousLinux: boolean;
    softwareSourceType: string;
}

export interface GetOsManagementHubSoftwareSourceVendorSoftwareSource {
    displayName: string;
    id: string;
}

export interface GetOsManagementHubSoftwareSourceVendorsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetOsManagementHubSoftwareSourceVendorsSoftwareSourceVendorCollection {
    items: outputs.GetOsManagementHubSoftwareSourceVendorsSoftwareSourceVendorCollectionItem[];
}

export interface GetOsManagementHubSoftwareSourceVendorsSoftwareSourceVendorCollectionItem {
    archTypes: string[];
    name: string;
    osFamilies: string[];
}

export interface GetOsManagementHubSoftwareSourcesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetOsManagementHubSoftwareSourcesSoftwareSourceCollection {
    items: outputs.GetOsManagementHubSoftwareSourcesSoftwareSourceCollectionItem[];
}

export interface GetOsManagementHubSoftwareSourcesSoftwareSourceCollectionItem {
    archType: string;
    availability: string;
    availabilityAtOci: string;
    compartmentId: string;
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    isMandatoryForAutonomousLinux: boolean;
    osFamily: string;
    packageCount: string;
    repoId: string;
    size: number;
    softwareSourceType: string;
    softwareSourceVersion: string;
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
    url: string;
    vendorName: string;
    vendorSoftwareSources: outputs.GetOsManagementHubSoftwareSourcesSoftwareSourceCollectionItemVendorSoftwareSource[];
}

export interface GetOsManagementHubSoftwareSourcesSoftwareSourceCollectionItemVendorSoftwareSource {
    displayName: string;
    id: string;
}

export interface GetOsManagementHubWindowsUpdatesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetOsManagementHubWindowsUpdatesWindowsUpdateCollection {
    items: outputs.GetOsManagementHubWindowsUpdatesWindowsUpdateCollectionItem[];
}

export interface GetOsManagementHubWindowsUpdatesWindowsUpdateCollectionItem {
    description: string;
    installable: string;
    installationRequirements: string[];
    isRebootRequiredForInstallation: boolean;
    kbArticleIds: string[];
    name: string;
    sizeInBytes: string;
    updateId: string;
    updateType: string;
}

export interface GetOsmanagementManagedInstanceAutonomouse {
    isAutoUpdateEnabled: boolean;
}

export interface GetOsmanagementManagedInstanceChildSoftwareSource {
    id: string;
    name: string;
}

export interface GetOsmanagementManagedInstanceGroupManagedInstance {
    displayName: string;
    id: string;
}

export interface GetOsmanagementManagedInstanceGroupsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetOsmanagementManagedInstanceGroupsManagedInstanceGroup {
    compartmentId: string;
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    managedInstanceCount: number;
    managedInstanceIds: string[];
    managedInstances: outputs.GetOsmanagementManagedInstanceGroupsManagedInstanceGroupManagedInstance[];
    osFamily: string;
    state: string;
}

export interface GetOsmanagementManagedInstanceGroupsManagedInstanceGroupManagedInstance {
    displayName: string;
    id: string;
}

export interface GetOsmanagementManagedInstanceManagedInstanceGroup {
    displayName: string;
    id: string;
}

export interface GetOsmanagementManagedInstanceModuleStreamsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetOsmanagementManagedInstanceModuleStreamsModuleStreamOnManagedInstance {
    moduleName: string;
    profiles: outputs.GetOsmanagementManagedInstanceModuleStreamsModuleStreamOnManagedInstanceProfile[];
    softwareSourceId: string;
    status: string;
    streamName: string;
    timeModified: string;
}

export interface GetOsmanagementManagedInstanceModuleStreamsModuleStreamOnManagedInstanceProfile {
    moduleName: string;
    profileName: string;
    status: string;
    streamName: string;
    timeModified: string;
}

export interface GetOsmanagementManagedInstanceParentSoftwareSource {
    id: string;
    name: string;
}

export interface GetOsmanagementManagedInstanceStreamProfilesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetOsmanagementManagedInstanceStreamProfilesModuleStreamProfileOnManagedInstance {
    moduleName: string;
    profileName: string;
    status: string;
    streamName: string;
    timeModified: string;
}

export interface GetOsmanagementManagedInstancesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetOsmanagementManagedInstancesManagedInstance {
    autonomouses: outputs.GetOsmanagementManagedInstancesManagedInstanceAutonomouse[];
    bugUpdatesAvailable: number;
    childSoftwareSources: outputs.GetOsmanagementManagedInstancesManagedInstanceChildSoftwareSource[];
    compartmentId: string;
    description: string;
    displayName: string;
    enhancementUpdatesAvailable: number;
    id: string;
    isDataCollectionAuthorized: boolean;
    isRebootRequired: boolean;
    kspliceEffectiveKernelVersion: string;
    lastBoot: string;
    lastCheckin: string;
    managedInstanceGroups: outputs.GetOsmanagementManagedInstancesManagedInstanceManagedInstanceGroup[];
    managedInstanceId: string;
    notificationTopicId: string;
    osFamily: string;
    osKernelVersion: string;
    osName: string;
    osVersion: string;
    otherUpdatesAvailable: number;
    parentSoftwareSources: outputs.GetOsmanagementManagedInstancesManagedInstanceParentSoftwareSource[];
    scheduledJobCount: number;
    securityUpdatesAvailable: number;
    status: string;
    updatesAvailable: number;
    workRequestCount: number;
}

export interface GetOsmanagementManagedInstancesManagedInstanceAutonomouse {
    isAutoUpdateEnabled: boolean;
}

export interface GetOsmanagementManagedInstancesManagedInstanceChildSoftwareSource {
    id: string;
    name: string;
}

export interface GetOsmanagementManagedInstancesManagedInstanceManagedInstanceGroup {
    displayName: string;
    id: string;
}

export interface GetOsmanagementManagedInstancesManagedInstanceParentSoftwareSource {
    id: string;
    name: string;
}

export interface GetOsmanagementSoftwareSourceAssociatedManagedInstance {
    displayName: string;
    id: string;
}

export interface GetOsmanagementSoftwareSourceStreamProfilesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetOsmanagementSoftwareSourceStreamProfilesModuleStreamProfile {
    moduleName: string;
    profileName: string;
    streamName: string;
}

export interface GetOsmanagementSoftwareSourcesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetOsmanagementSoftwareSourcesSoftwareSource {
    archType: string;
    associatedManagedInstances: outputs.GetOsmanagementSoftwareSourcesSoftwareSourceAssociatedManagedInstance[];
    checksumType: string;
    compartmentId: string;
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    freeformTags: {[key: string]: string};
    gpgKeyFingerprint: string;
    gpgKeyId: string;
    gpgKeyUrl: string;
    id: string;
    maintainerEmail: string;
    maintainerName: string;
    maintainerPhone: string;
    packages: number;
    parentId: string;
    parentName: string;
    repoType: string;
    state: string;
    status: string;
    url: string;
}

export interface GetOsmanagementSoftwareSourcesSoftwareSourceAssociatedManagedInstance {
    displayName: string;
    id: string;
}

export interface GetOspGatewayAddressRuleAddress {
    fields: outputs.GetOspGatewayAddressRuleAddressField[];
    thirdPartyValidation: string;
}

export interface GetOspGatewayAddressRuleAddressField {
    formats: outputs.GetOspGatewayAddressRuleAddressFieldFormat[];
    isRequired: boolean;
    labels: outputs.GetOspGatewayAddressRuleAddressFieldLabel[];
    language: string;
    name: string;
}

export interface GetOspGatewayAddressRuleAddressFieldFormat {
    example: string;
    value: string;
}

export interface GetOspGatewayAddressRuleAddressFieldLabel {
    example: string;
    value: string;
}

export interface GetOspGatewayAddressRuleContact {
    fields: outputs.GetOspGatewayAddressRuleContactField[];
}

export interface GetOspGatewayAddressRuleContactField {
    formats: outputs.GetOspGatewayAddressRuleContactFieldFormat[];
    isRequired: boolean;
    labels: outputs.GetOspGatewayAddressRuleContactFieldLabel[];
    language: string;
    name: string;
}

export interface GetOspGatewayAddressRuleContactFieldFormat {
    example: string;
    value: string;
}

export interface GetOspGatewayAddressRuleContactFieldLabel {
    example: string;
    value: string;
}

export interface GetOspGatewayAddressRuleTax {
    fields: outputs.GetOspGatewayAddressRuleTaxField[];
    valueSets: outputs.GetOspGatewayAddressRuleTaxValueSet[];
}

export interface GetOspGatewayAddressRuleTaxField {
    formats: outputs.GetOspGatewayAddressRuleTaxFieldFormat[];
    isRequired: boolean;
    labels: outputs.GetOspGatewayAddressRuleTaxFieldLabel[];
    language: string;
    name: string;
}

export interface GetOspGatewayAddressRuleTaxFieldFormat {
    example: string;
    value: string;
}

export interface GetOspGatewayAddressRuleTaxFieldLabel {
    example: string;
    value: string;
}

export interface GetOspGatewayAddressRuleTaxValueSet {
    name: string;
    value: string;
}

export interface GetOspGatewayInvoiceBillToAddress {
    addressLine1: string;
    addressLine2: string;
    addressLine3: string;
    addressLine4: string;
    city: string;
    companyName: string;
    contactName: string;
    countries: outputs.GetOspGatewayInvoiceBillToAddressCountry[];
    county: string;
    postalCode: string;
    province: string;
    state: string;
    streetName: string;
    streetNumber: string;
}

export interface GetOspGatewayInvoiceBillToAddressCountry {
    ascii3countryCode: string;
    countryCode: string;
    countryId: number;
    countryName: string;
    languageId: number;
}

export interface GetOspGatewayInvoiceCurrency {
    currencyCode: string;
    currencySymbol: string;
    name: string;
    roundDecimalPoint: number;
    usdConversion: number;
}

export interface GetOspGatewayInvoiceLastPaymentDetail {
    accountNumber: string;
    amountPaid: number;
    cardType: string;
    creditCardType: string;
    echeckRouting: string;
    lastDigits: string;
    nameOnCard: string;
    paidBy: string;
    paymentMethod: string;
    paypalId: string;
    paypalReference: string;
    routingNumber: string;
    timeExpiration: string;
    timePaidOn: string;
}

export interface GetOspGatewayInvoicesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetOspGatewayInvoicesInvoiceCollection {
    items: outputs.GetOspGatewayInvoicesInvoiceCollectionItem[];
}

export interface GetOspGatewayInvoicesInvoiceCollectionItem {
    billToAddresses: outputs.GetOspGatewayInvoicesInvoiceCollectionItemBillToAddress[];
    currencies: outputs.GetOspGatewayInvoicesInvoiceCollectionItemCurrency[];
    internalInvoiceId: string;
    invoiceAmount: number;
    invoiceAmountAdjusted: number;
    invoiceAmountApplied: number;
    invoiceAmountCredited: number;
    invoiceAmountDue: number;
    invoiceAmountInDispute: number;
    invoiceId: string;
    invoiceNumber: string;
    invoicePoNumber: string;
    invoiceRefNumber: string;
    invoiceStatus: string;
    invoiceType: string;
    isCreditCardPayable: boolean;
    isDisplayDownloadPdf: boolean;
    isDisplayViewPdf: boolean;
    isPaid: boolean;
    isPayable: boolean;
    isPaymentFailed: boolean;
    isPdfEmailAvailable: boolean;
    lastPaymentDetails: outputs.GetOspGatewayInvoicesInvoiceCollectionItemLastPaymentDetail[];
    partyName: string;
    paymentTerms: string;
    preferredEmail: string;
    subscriptionIds: string[];
    tax: number;
    timeInvoice: string;
    timeInvoiceDue: string;
}

export interface GetOspGatewayInvoicesInvoiceCollectionItemBillToAddress {
    addressLine1: string;
    addressLine2: string;
    addressLine3: string;
    addressLine4: string;
    city: string;
    companyName: string;
    contactName: string;
    countries: outputs.GetOspGatewayInvoicesInvoiceCollectionItemBillToAddressCountry[];
    county: string;
    postalCode: string;
    province: string;
    state: string;
    streetName: string;
    streetNumber: string;
}

export interface GetOspGatewayInvoicesInvoiceCollectionItemBillToAddressCountry {
    ascii3countryCode: string;
    countryCode: string;
    countryId: number;
    countryName: string;
    languageId: number;
}

export interface GetOspGatewayInvoicesInvoiceCollectionItemCurrency {
    currencyCode: string;
    currencySymbol: string;
    name: string;
    roundDecimalPoint: number;
    usdConversion: number;
}

export interface GetOspGatewayInvoicesInvoiceCollectionItemLastPaymentDetail {
    accountNumber: string;
    amountPaid: number;
    cardType: string;
    creditCardType: string;
    echeckRouting: string;
    lastDigits: string;
    nameOnCard: string;
    paidBy: string;
    paymentMethod: string;
    paypalId: string;
    paypalReference: string;
    routingNumber: string;
    timeExpiration: string;
    timePaidOn: string;
}

export interface GetOspGatewayInvoicesInvoiceLineItem {
    currencies: outputs.GetOspGatewayInvoicesInvoiceLineItemCurrency[];
    netUnitPrice: number;
    orderNo: string;
    partNumber: string;
    product: string;
    quantity: number;
    timeEnd: string;
    timeStart: string;
    totalPrice: number;
}

export interface GetOspGatewayInvoicesInvoiceLineItemCurrency {
    currencyCode: string;
    currencySymbol: string;
    name: string;
    roundDecimalPoint: number;
    usdConversion: number;
}

export interface GetOspGatewayInvoicesInvoiceLinesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetOspGatewayInvoicesInvoiceLinesInvoiceLineCollection {
    items: outputs.GetOspGatewayInvoicesInvoiceLinesInvoiceLineCollectionItem[];
}

export interface GetOspGatewayInvoicesInvoiceLinesInvoiceLineCollectionItem {
    currencies: outputs.GetOspGatewayInvoicesInvoiceLinesInvoiceLineCollectionItemCurrency[];
    netUnitPrice: number;
    orderNo: string;
    partNumber: string;
    product: string;
    quantity: number;
    timeEnd: string;
    timeStart: string;
    totalPrice: number;
}

export interface GetOspGatewayInvoicesInvoiceLinesInvoiceLineCollectionItemCurrency {
    currencyCode: string;
    currencySymbol: string;
    name: string;
    roundDecimalPoint: number;
    usdConversion: number;
}

export interface GetOspGatewaySubscriptionBillingAddress {
    addressKey: string;
    city: string;
    companyName: string;
    contributorClass: string;
    country: string;
    county: string;
    departmentName: string;
    emailAddress: string;
    firstName: string;
    internalNumber: string;
    jobTitle: string;
    lastName: string;
    line1: string;
    line2: string;
    line3: string;
    line4: string;
    middleName: string;
    municipalInscription: string;
    phoneCountryCode: string;
    phoneNumber: string;
    postalCode: string;
    province: string;
    state: string;
    stateInscription: string;
    streetName: string;
    streetNumber: string;
}

export interface GetOspGatewaySubscriptionPaymentGateway {
    merchantDefinedDatas: outputs.GetOspGatewaySubscriptionPaymentGatewayMerchantDefinedData[];
}

export interface GetOspGatewaySubscriptionPaymentGatewayMerchantDefinedData {
    cloudAccountName: string;
    promoType: string;
}

export interface GetOspGatewaySubscriptionPaymentOption {
    creditCardType: string;
    emailAddress: string;
    extBillingAgreementId: string;
    firstName: string;
    lastDigits: string;
    lastName: string;
    nameOnCard: string;
    paymentMethod: string;
    timeExpiration: string;
    walletInstrumentId: string;
    walletTransactionId: string;
}

export interface GetOspGatewaySubscriptionSubscription {
    accountType: string;
    billToCustAccountId: string;
    billingAddresses: outputs.GetOspGatewaySubscriptionSubscriptionBillingAddress[];
    currencyCode: string;
    gsiOrgCode: string;
    id: string;
    isIntentToPay: boolean;
    languageCode: string;
    organizationId: string;
    paymentGateways: outputs.GetOspGatewaySubscriptionSubscriptionPaymentGateway[];
    paymentOptions: outputs.GetOspGatewaySubscriptionSubscriptionPaymentOption[];
    planType: string;
    shipToCustAcctRoleId: string;
    shipToCustAcctSiteId: string;
    subscriptionPlanNumber: string;
    taxInfos: outputs.GetOspGatewaySubscriptionSubscriptionTaxInfo[];
    timePersonalToCorporateConv: string;
    timePlanUpgrade: string;
    timeStart: string;
    upgradeState: string;
    upgradeStateDetails: string;
}

export interface GetOspGatewaySubscriptionSubscriptionBillingAddress {
    addressKey: string;
    city: string;
    companyName: string;
    contributorClass: string;
    country: string;
    county: string;
    departmentName: string;
    emailAddress: string;
    firstName: string;
    internalNumber: string;
    jobTitle: string;
    lastName: string;
    line1: string;
    line2: string;
    line3: string;
    line4: string;
    middleName: string;
    municipalInscription: string;
    phoneCountryCode: string;
    phoneNumber: string;
    postalCode: string;
    province: string;
    state: string;
    stateInscription: string;
    streetName: string;
    streetNumber: string;
}

export interface GetOspGatewaySubscriptionSubscriptionPaymentGateway {
    merchantDefinedDatas: outputs.GetOspGatewaySubscriptionSubscriptionPaymentGatewayMerchantDefinedData[];
}

export interface GetOspGatewaySubscriptionSubscriptionPaymentGatewayMerchantDefinedData {
    cloudAccountName: string;
    promoType: string;
}

export interface GetOspGatewaySubscriptionSubscriptionPaymentOption {
    creditCardType: string;
    emailAddress: string;
    extBillingAgreementId: string;
    firstName: string;
    lastDigits: string;
    lastName: string;
    nameOnCard: string;
    paymentMethod: string;
    timeExpiration: string;
    walletInstrumentId: string;
    walletTransactionId: string;
}

export interface GetOspGatewaySubscriptionSubscriptionTaxInfo {
    noTaxReasonCode: string;
    noTaxReasonCodeDetails: string;
    taxCnpj: string;
    taxPayerId: string;
    taxRegNumber: string;
}

export interface GetOspGatewaySubscriptionTaxInfo {
    giro: string;
    noTaxReasonCode: string;
    noTaxReasonCodeDetails: string;
    taxCnpj: string;
    taxPayerId: string;
    taxRegNumber: string;
}

export interface GetOspGatewaySubscriptionsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetOspGatewaySubscriptionsSubscriptionCollection {
    items: outputs.GetOspGatewaySubscriptionsSubscriptionCollectionItem[];
}

export interface GetOspGatewaySubscriptionsSubscriptionCollectionItem {
    accountType: string;
    billToCustAccountId: string;
    billingAddresses: outputs.GetOspGatewaySubscriptionsSubscriptionCollectionItemBillingAddress[];
    compartmentId: string;
    currencyCode: string;
    email: string;
    gsiOrgCode: string;
    id: string;
    isIntentToPay: boolean;
    languageCode: string;
    organizationId: string;
    ospHomeRegion: string;
    paymentGateways: outputs.GetOspGatewaySubscriptionsSubscriptionCollectionItemPaymentGateway[];
    paymentOptions: outputs.GetOspGatewaySubscriptionsSubscriptionCollectionItemPaymentOption[];
    planType: string;
    shipToCustAcctRoleId: string;
    shipToCustAcctSiteId: string;
    subscriptionId: string;
    subscriptionPlanNumber: string;
    subscriptions: outputs.GetOspGatewaySubscriptionsSubscriptionCollectionItemSubscription[];
    taxInfos: outputs.GetOspGatewaySubscriptionsSubscriptionCollectionItemTaxInfo[];
    timePersonalToCorporateConv: string;
    timePlanUpgrade: string;
    timeStart: string;
    upgradeState: string;
    upgradeStateDetails: string;
}

export interface GetOspGatewaySubscriptionsSubscriptionCollectionItemBillingAddress {
    addressKey: string;
    city: string;
    companyName: string;
    contributorClass: string;
    country: string;
    county: string;
    departmentName: string;
    emailAddress: string;
    firstName: string;
    internalNumber: string;
    jobTitle: string;
    lastName: string;
    line1: string;
    line2: string;
    line3: string;
    line4: string;
    middleName: string;
    municipalInscription: string;
    phoneCountryCode: string;
    phoneNumber: string;
    postalCode: string;
    province: string;
    state: string;
    stateInscription: string;
    streetName: string;
    streetNumber: string;
}

export interface GetOspGatewaySubscriptionsSubscriptionCollectionItemPaymentGateway {
    merchantDefinedDatas: outputs.GetOspGatewaySubscriptionsSubscriptionCollectionItemPaymentGatewayMerchantDefinedData[];
}

export interface GetOspGatewaySubscriptionsSubscriptionCollectionItemPaymentGatewayMerchantDefinedData {
    cloudAccountName: string;
    promoType: string;
}

export interface GetOspGatewaySubscriptionsSubscriptionCollectionItemPaymentOption {
    creditCardType: string;
    emailAddress: string;
    extBillingAgreementId: string;
    firstName: string;
    lastDigits: string;
    lastName: string;
    nameOnCard: string;
    paymentMethod: string;
    timeExpiration: string;
    walletInstrumentId: string;
    walletTransactionId: string;
}

export interface GetOspGatewaySubscriptionsSubscriptionCollectionItemSubscription {
    accountType: string;
    billToCustAccountId: string;
    billingAddresses: outputs.GetOspGatewaySubscriptionsSubscriptionCollectionItemSubscriptionBillingAddress[];
    currencyCode: string;
    gsiOrgCode: string;
    id: string;
    isIntentToPay: boolean;
    languageCode: string;
    organizationId: string;
    paymentGateways: outputs.GetOspGatewaySubscriptionsSubscriptionCollectionItemSubscriptionPaymentGateway[];
    paymentOptions: outputs.GetOspGatewaySubscriptionsSubscriptionCollectionItemSubscriptionPaymentOption[];
    planType: string;
    shipToCustAcctRoleId: string;
    shipToCustAcctSiteId: string;
    subscriptionPlanNumber: string;
    taxInfos: outputs.GetOspGatewaySubscriptionsSubscriptionCollectionItemSubscriptionTaxInfo[];
    timePersonalToCorporateConv: string;
    timePlanUpgrade: string;
    timeStart: string;
    upgradeState: string;
    upgradeStateDetails: string;
}

export interface GetOspGatewaySubscriptionsSubscriptionCollectionItemSubscriptionBillingAddress {
    addressKey: string;
    city: string;
    companyName: string;
    contributorClass: string;
    country: string;
    county: string;
    departmentName: string;
    emailAddress: string;
    firstName: string;
    internalNumber: string;
    jobTitle: string;
    lastName: string;
    line1: string;
    line2: string;
    line3: string;
    line4: string;
    middleName: string;
    municipalInscription: string;
    phoneCountryCode: string;
    phoneNumber: string;
    postalCode: string;
    province: string;
    state: string;
    stateInscription: string;
    streetName: string;
    streetNumber: string;
}

export interface GetOspGatewaySubscriptionsSubscriptionCollectionItemSubscriptionPaymentGateway {
    merchantDefinedDatas: outputs.GetOspGatewaySubscriptionsSubscriptionCollectionItemSubscriptionPaymentGatewayMerchantDefinedData[];
}

export interface GetOspGatewaySubscriptionsSubscriptionCollectionItemSubscriptionPaymentGatewayMerchantDefinedData {
    cloudAccountName: string;
    promoType: string;
}

export interface GetOspGatewaySubscriptionsSubscriptionCollectionItemSubscriptionPaymentOption {
    creditCardType: string;
    emailAddress: string;
    extBillingAgreementId: string;
    firstName: string;
    lastDigits: string;
    lastName: string;
    nameOnCard: string;
    paymentMethod: string;
    timeExpiration: string;
    walletInstrumentId: string;
    walletTransactionId: string;
}

export interface GetOspGatewaySubscriptionsSubscriptionCollectionItemSubscriptionTaxInfo {
    noTaxReasonCode: string;
    noTaxReasonCodeDetails: string;
    taxCnpj: string;
    taxPayerId: string;
    taxRegNumber: string;
}

export interface GetOspGatewaySubscriptionsSubscriptionCollectionItemTaxInfo {
    giro: string;
    noTaxReasonCode: string;
    noTaxReasonCodeDetails: string;
    taxCnpj: string;
    taxPayerId: string;
    taxRegNumber: string;
}

export interface GetOsubBillingScheduleBillingSchedulesBillingSchedule {
    amount: string;
    arCustomerTransactionId: string;
    arInvoiceNumber: string;
    billingFrequency: string;
    invoiceStatus: string;
    netUnitPrice: string;
    orderNumber: string;
    products: outputs.GetOsubBillingScheduleBillingSchedulesBillingScheduleProduct[];
    quantity: string;
    timeEnd: string;
    timeInvoicing: string;
    timeStart: string;
}

export interface GetOsubBillingScheduleBillingSchedulesBillingScheduleProduct {
    name: string;
    partNumber: string;
}

export interface GetOsubBillingScheduleBillingSchedulesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetOsubOrganizationSubscriptionOrganizationSubscriptionsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetOsubOrganizationSubscriptionOrganizationSubscriptionsSubscription {
    currencies: outputs.GetOsubOrganizationSubscriptionOrganizationSubscriptionsSubscriptionCurrency[];
    id: string;
    serviceName: string;
    status: string;
    timeEnd: string;
    timeStart: string;
    totalValue: string;
    type: string;
}

export interface GetOsubOrganizationSubscriptionOrganizationSubscriptionsSubscriptionCurrency {
    isoCode: string;
    name: string;
    stdPrecision: string;
}

export interface GetOsubSubscriptionCommitmentsCommitment {
    availableAmount: string;
    fundedAllocationValue: string;
    id: string;
    quantity: string;
    timeEnd: string;
    timeStart: string;
    usedAmount: string;
}

export interface GetOsubSubscriptionCommitmentsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetOsubSubscriptionRatecardsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetOsubSubscriptionRatecardsRateCard {
    currencies: outputs.GetOsubSubscriptionRatecardsRateCardCurrency[];
    discretionaryDiscountPercentage: string;
    isTier: boolean;
    netUnitPrice: string;
    overagePrice: string;
    products: outputs.GetOsubSubscriptionRatecardsRateCardProduct[];
    rateCardTiers: outputs.GetOsubSubscriptionRatecardsRateCardRateCardTier[];
    timeEnd: string;
    timeStart: string;
}

export interface GetOsubSubscriptionRatecardsRateCardCurrency {
    isoCode: string;
    name: string;
    stdPrecision: string;
}

export interface GetOsubSubscriptionRatecardsRateCardProduct {
    billingCategory: string;
    name: string;
    partNumber: string;
    productCategory: string;
    ucmRateCardPartType: string;
    unitOfMeasure: string;
}

export interface GetOsubSubscriptionRatecardsRateCardRateCardTier {
    netUnitPrice: string;
    overagePrice: string;
    upToQuantity: string;
}

export interface GetOsubSubscriptionSubscriptionsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetOsubSubscriptionSubscriptionsSubscription {
    currencies: outputs.GetOsubSubscriptionSubscriptionsSubscriptionCurrency[];
    serviceName: string;
    status: string;
    subscribedServices: outputs.GetOsubSubscriptionSubscriptionsSubscriptionSubscribedService[];
    timeEnd: string;
    timeStart: string;
}

export interface GetOsubSubscriptionSubscriptionsSubscriptionCurrency {
    isoCode: string;
    name: string;
    stdPrecision: string;
}

export interface GetOsubSubscriptionSubscriptionsSubscriptionSubscribedService {
    bookingOptyNumber: string;
    commitmentServices: outputs.GetOsubSubscriptionSubscriptionsSubscriptionSubscribedServiceCommitmentService[];
    csi: string;
    dataCenterRegion: string;
    fundedAllocationValue: string;
    id: string;
    isIntentToPay: boolean;
    netUnitPrice: string;
    operationType: string;
    orderNumber: string;
    partnerTransactionType: string;
    pricingModel: string;
    products: outputs.GetOsubSubscriptionSubscriptionsSubscriptionSubscribedServiceProduct[];
    programType: string;
    promoType: string;
    quantity: string;
    status: string;
    termValue: string;
    termValueUom: string;
    timeEnd: string;
    timeStart: string;
    totalValue: string;
}

export interface GetOsubSubscriptionSubscriptionsSubscriptionSubscribedServiceCommitmentService {
    availableAmount: string;
    fundedAllocationValue: string;
    lineNetAmount: string;
    quantity: string;
    timeEnd: string;
    timeStart: string;
}

export interface GetOsubSubscriptionSubscriptionsSubscriptionSubscribedServiceProduct {
    name: string;
    partNumber: string;
    provisioningGroup: string;
    unitOfMeasure: string;
}

export interface GetOsubUsageComputedUsageAggregatedsComputedUsageAggregated {
    aggregatedComputedUsages: outputs.GetOsubUsageComputedUsageAggregatedsComputedUsageAggregatedAggregatedComputedUsage[];
    currencyCode: string;
    parentProducts: outputs.GetOsubUsageComputedUsageAggregatedsComputedUsageAggregatedParentProduct[];
    parentSubscribedServiceId: string;
    planNumber: string;
    pricingModel: string;
    rateCardId: string;
    subscriptionId: string;
    timeEnd: string;
    timeStart: string;
}

export interface GetOsubUsageComputedUsageAggregatedsComputedUsageAggregatedAggregatedComputedUsage {
    cost: string;
    costUnrounded: string;
    dataCenter: string;
    netUnitPrice: string;
    products: outputs.GetOsubUsageComputedUsageAggregatedsComputedUsageAggregatedAggregatedComputedUsageProduct[];
    quantity: string;
    timeMeteredOn: string;
    type: string;
}

export interface GetOsubUsageComputedUsageAggregatedsComputedUsageAggregatedAggregatedComputedUsageProduct {
    billingCategory: string;
    name: string;
    partNumber: string;
    productCategory: string;
    provisioningGroup: string;
    ucmRateCardPartType: string;
    unitOfMeasure: string;
}

export interface GetOsubUsageComputedUsageAggregatedsComputedUsageAggregatedParentProduct {
    billingCategory: string;
    name: string;
    partNumber: string;
    productCategory: string;
    provisioningGroup: string;
    ucmRateCardPartType: string;
    unitOfMeasure: string;
}

export interface GetOsubUsageComputedUsageAggregatedsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetOsubUsageComputedUsageParentProduct {
    billingCategory: string;
    name: string;
    partNumber: string;
    productCategory: string;
    provisioningGroup: string;
    ucmRateCardPartType: string;
    unitOfMeasure: string;
}

export interface GetOsubUsageComputedUsageProduct {
    billingCategory: string;
    name: string;
    partNumber: string;
    productCategory: string;
    provisioningGroup: string;
    ucmRateCardPartType: string;
    unitOfMeasure: string;
}

export interface GetOsubUsageComputedUsagesComputedUsage {
    commitmentServiceId: string;
    computeSource: string;
    computedUsageId: string;
    cost: string;
    costRounded: string;
    currencyCode: string;
    dataCenter: string;
    id: string;
    isInvoiced: boolean;
    mqsMessageId: string;
    netUnitPrice: string;
    originalUsageNumber: string;
    parentProducts: outputs.GetOsubUsageComputedUsagesComputedUsageParentProduct[];
    parentSubscribedServiceId: string;
    planNumber: string;
    products: outputs.GetOsubUsageComputedUsagesComputedUsageProduct[];
    quantity: string;
    rateCardId: string;
    rateCardTierdId: string;
    timeCreated: string;
    timeMeteredOn: string;
    timeOfArrival: string;
    timeUpdated: string;
    type: string;
    unitOfMeasure: string;
    usageNumber: string;
}

export interface GetOsubUsageComputedUsagesComputedUsageParentProduct {
    billingCategory: string;
    name: string;
    partNumber: string;
    productCategory: string;
    provisioningGroup: string;
    ucmRateCardPartType: string;
    unitOfMeasure: string;
}

export interface GetOsubUsageComputedUsagesComputedUsageProduct {
    billingCategory: string;
    name: string;
    partNumber: string;
    productCategory: string;
    provisioningGroup: string;
    ucmRateCardPartType: string;
    unitOfMeasure: string;
}

export interface GetOsubUsageComputedUsagesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetPsqlBackupDbSystemDetail {
    dbVersion: string;
    systemType: string;
}

export interface GetPsqlBackupsBackupCollection {
    items: outputs.GetPsqlBackupsBackupCollectionItem[];
}

export interface GetPsqlBackupsBackupCollectionItem {
    backupSize: number;
    compartmentId: string;
    dbSystemDetails: outputs.GetPsqlBackupsBackupCollectionItemDbSystemDetail[];
    dbSystemId: string;
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    lastAcceptedRequestToken: string;
    lastCompletedRequestToken: string;
    lifecycleDetails: string;
    retentionPeriod: number;
    sourceType: string;
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
}

export interface GetPsqlBackupsBackupCollectionItemDbSystemDetail {
    dbVersion: string;
    systemType: string;
}

export interface GetPsqlBackupsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetPsqlConfigurationConfigurationDetail {
    items: outputs.GetPsqlConfigurationConfigurationDetailItem[];
}

export interface GetPsqlConfigurationConfigurationDetailItem {
    allowedValues: string;
    configKey: string;
    dataType: string;
    defaultConfigValue: string;
    description: string;
    isOverridable: boolean;
    isRestartRequired: boolean;
    overridenConfigValue: string;
}

export interface GetPsqlConfigurationDbConfigurationOverride {
    items: outputs.GetPsqlConfigurationDbConfigurationOverrideItem[];
}

export interface GetPsqlConfigurationDbConfigurationOverrideItem {
    configKey: string;
    overridenConfigValue: string;
}

export interface GetPsqlConfigurationsConfigurationCollection {
    items: outputs.GetPsqlConfigurationsConfigurationCollectionItem[];
}

export interface GetPsqlConfigurationsConfigurationCollectionItem {
    compartmentId: string;
    configType: string;
    configurationDetails: outputs.GetPsqlConfigurationsConfigurationCollectionItemConfigurationDetail[];
    dbConfigurationOverrides: outputs.GetPsqlConfigurationsConfigurationCollectionItemDbConfigurationOverride[];
    dbVersion: string;
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    instanceMemorySizeInGbs: number;
    instanceOcpuCount: number;
    isFlexible: boolean;
    lifecycleDetails: string;
    shape: string;
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
}

export interface GetPsqlConfigurationsConfigurationCollectionItemConfigurationDetail {
    items: outputs.GetPsqlConfigurationsConfigurationCollectionItemConfigurationDetailItem[];
}

export interface GetPsqlConfigurationsConfigurationCollectionItemConfigurationDetailItem {
    allowedValues: string;
    configKey: string;
    dataType: string;
    defaultConfigValue: string;
    description: string;
    isOverridable: boolean;
    isRestartRequired: boolean;
    overridenConfigValue: string;
}

export interface GetPsqlConfigurationsConfigurationCollectionItemDbConfigurationOverride {
    items: outputs.GetPsqlConfigurationsConfigurationCollectionItemDbConfigurationOverrideItem[];
}

export interface GetPsqlConfigurationsConfigurationCollectionItemDbConfigurationOverrideItem {
    configKey: string;
    overridenConfigValue: string;
}

export interface GetPsqlConfigurationsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetPsqlDbSystemConnectionDetailInstanceEndpoint {
    dbInstanceId: string;
    endpoints: outputs.GetPsqlDbSystemConnectionDetailInstanceEndpointEndpoint[];
}

export interface GetPsqlDbSystemConnectionDetailInstanceEndpointEndpoint {
    fqdn: string;
    ipAddress: string;
    port: number;
}

export interface GetPsqlDbSystemConnectionDetailPrimaryDbEndpoint {
    fqdn: string;
    ipAddress: string;
    port: number;
}

export interface GetPsqlDbSystemCredential {
    passwordDetails: outputs.GetPsqlDbSystemCredentialPasswordDetail[];
    username: string;
}

export interface GetPsqlDbSystemCredentialPasswordDetail {
    password: string;
    passwordType: string;
    secretId: string;
    secretVersion: string;
}

export interface GetPsqlDbSystemInstance {
    availabilityDomain: string;
    description: string;
    displayName: string;
    id: string;
    lifecycleDetails: string;
    state: string;
    timeCreated: string;
    timeUpdated: string;
}

export interface GetPsqlDbSystemInstancesDetail {
    description: string;
    displayName: string;
    privateIp: string;
}

export interface GetPsqlDbSystemManagementPolicy {
    backupPolicies: outputs.GetPsqlDbSystemManagementPolicyBackupPolicy[];
    maintenanceWindowStart: string;
}

export interface GetPsqlDbSystemManagementPolicyBackupPolicy {
    backupStart: string;
    daysOfTheMonths: number[];
    daysOfTheWeeks: string[];
    kind: string;
    retentionDays: number;
}

export interface GetPsqlDbSystemNetworkDetail {
    nsgIds: string[];
    primaryDbEndpointPrivateIp: string;
    subnetId: string;
}

export interface GetPsqlDbSystemPatchOperation {
    from: string;
    operation: string;
    position: string;
    selectedItem: string;
    selection: string;
    value: {[key: string]: string};
}

export interface GetPsqlDbSystemSource {
    backupId: string;
    isHavingRestoreConfigOverrides: boolean;
    sourceType: string;
}

export interface GetPsqlDbSystemStorageDetail {
    availabilityDomain: string;
    iops: string;
    isRegionallyDurable: boolean;
    systemType: string;
}

export interface GetPsqlDbSystemsDbSystemCollection {
    items: outputs.GetPsqlDbSystemsDbSystemCollectionItem[];
}

export interface GetPsqlDbSystemsDbSystemCollectionItem {
    adminUsername: string;
    applyConfig: string;
    compartmentId: string;
    configId: string;
    credentials: outputs.GetPsqlDbSystemsDbSystemCollectionItemCredential[];
    dbVersion: string;
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    instanceCount: number;
    instanceMemorySizeInGbs: number;
    instanceOcpuCount: number;
    instances: outputs.GetPsqlDbSystemsDbSystemCollectionItemInstance[];
    instancesDetails: outputs.GetPsqlDbSystemsDbSystemCollectionItemInstancesDetail[];
    lifecycleDetails: string;
    managementPolicies: outputs.GetPsqlDbSystemsDbSystemCollectionItemManagementPolicy[];
    networkDetails: outputs.GetPsqlDbSystemsDbSystemCollectionItemNetworkDetail[];
    patchOperations: outputs.GetPsqlDbSystemsDbSystemCollectionItemPatchOperation[];
    shape: string;
    sources: outputs.GetPsqlDbSystemsDbSystemCollectionItemSource[];
    state: string;
    storageDetails: outputs.GetPsqlDbSystemsDbSystemCollectionItemStorageDetail[];
    systemTags: {[key: string]: string};
    systemType: string;
    timeCreated: string;
    timeUpdated: string;
}

export interface GetPsqlDbSystemsDbSystemCollectionItemCredential {
    passwordDetails: outputs.GetPsqlDbSystemsDbSystemCollectionItemCredentialPasswordDetail[];
    username: string;
}

export interface GetPsqlDbSystemsDbSystemCollectionItemCredentialPasswordDetail {
    password: string;
    passwordType: string;
    secretId: string;
    secretVersion: string;
}

export interface GetPsqlDbSystemsDbSystemCollectionItemInstance {
    availabilityDomain: string;
    description: string;
    displayName: string;
    id: string;
    lifecycleDetails: string;
    state: string;
    timeCreated: string;
    timeUpdated: string;
}

export interface GetPsqlDbSystemsDbSystemCollectionItemInstancesDetail {
    description: string;
    displayName: string;
    privateIp: string;
}

export interface GetPsqlDbSystemsDbSystemCollectionItemManagementPolicy {
    backupPolicies: outputs.GetPsqlDbSystemsDbSystemCollectionItemManagementPolicyBackupPolicy[];
    maintenanceWindowStart: string;
}

export interface GetPsqlDbSystemsDbSystemCollectionItemManagementPolicyBackupPolicy {
    backupStart: string;
    daysOfTheMonths: number[];
    daysOfTheWeeks: string[];
    kind: string;
    retentionDays: number;
}

export interface GetPsqlDbSystemsDbSystemCollectionItemNetworkDetail {
    nsgIds: string[];
    primaryDbEndpointPrivateIp: string;
    subnetId: string;
}

export interface GetPsqlDbSystemsDbSystemCollectionItemPatchOperation {
    from: string;
    operation: string;
    position: string;
    selectedItem: string;
    selection: string;
    value: {[key: string]: string};
}

export interface GetPsqlDbSystemsDbSystemCollectionItemSource {
    backupId: string;
    isHavingRestoreConfigOverrides: boolean;
    sourceType: string;
}

export interface GetPsqlDbSystemsDbSystemCollectionItemStorageDetail {
    availabilityDomain: string;
    iops: string;
    isRegionallyDurable: boolean;
    systemType: string;
}

export interface GetPsqlDbSystemsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetPsqlDefaultConfigurationConfigurationDetail {
    items: outputs.GetPsqlDefaultConfigurationConfigurationDetailItem[];
}

export interface GetPsqlDefaultConfigurationConfigurationDetailItem {
    allowedValues: string;
    configKey: string;
    dataType: string;
    defaultConfigValue: string;
    description: string;
    isOverridable: boolean;
    isRestartRequired: boolean;
}

export interface GetPsqlDefaultConfigurationsDefaultConfigurationCollection {
    items: outputs.GetPsqlDefaultConfigurationsDefaultConfigurationCollectionItem[];
}

export interface GetPsqlDefaultConfigurationsDefaultConfigurationCollectionItem {
    configurationDetails: outputs.GetPsqlDefaultConfigurationsDefaultConfigurationCollectionItemConfigurationDetail[];
    dbVersion: string;
    description: string;
    displayName: string;
    id: string;
    instanceMemorySizeInGbs: number;
    instanceOcpuCount: number;
    isFlexible: boolean;
    lifecycleDetails: string;
    shape: string;
    state: string;
    timeCreated: string;
}

export interface GetPsqlDefaultConfigurationsDefaultConfigurationCollectionItemConfigurationDetail {
    items: outputs.GetPsqlDefaultConfigurationsDefaultConfigurationCollectionItemConfigurationDetailItem[];
}

export interface GetPsqlDefaultConfigurationsDefaultConfigurationCollectionItemConfigurationDetailItem {
    allowedValues: string;
    configKey: string;
    dataType: string;
    defaultConfigValue: string;
    description: string;
    isOverridable: boolean;
    isRestartRequired: boolean;
}

export interface GetPsqlDefaultConfigurationsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetPsqlShapesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetPsqlShapesShapeCollection {
    items: outputs.GetPsqlShapesShapeCollectionItem[];
}

export interface GetPsqlShapesShapeCollectionItem {
    id: string;
    isFlexible: boolean;
    memorySizeInGbs: number;
    ocpuCount: number;
    shape: string;
    shapeMemoryOptions: outputs.GetPsqlShapesShapeCollectionItemShapeMemoryOption[];
    shapeOcpuOptions: outputs.GetPsqlShapesShapeCollectionItemShapeOcpuOption[];
}

export interface GetPsqlShapesShapeCollectionItemShapeMemoryOption {
    defaultPerOcpuInGbs: number;
    maxInGbs: number;
    maxPerOcpuInGbs: number;
    minInGbs: number;
    minPerOcpuInGbs: number;
}

export interface GetPsqlShapesShapeCollectionItemShapeOcpuOption {
    max: number;
    min: number;
}

export interface GetQueueQueuesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetQueueQueuesQueueCollection {
    items: outputs.GetQueueQueuesQueueCollectionItem[];
}

export interface GetQueueQueuesQueueCollectionItem {
    channelConsumptionLimit: number;
    compartmentId: string;
    customEncryptionKeyId: string;
    deadLetterQueueDeliveryCount: number;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    lifecycleDetails: string;
    messagesEndpoint: string;
    purgeTrigger: number;
    purgeType: string;
    retentionInSeconds: number;
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
    timeoutInSeconds: number;
    visibilityInSeconds: number;
}

export interface GetRecoveryProtectedDatabaseMetric {
    backupSpaceEstimateInGbs: number;
    backupSpaceUsedInGbs: number;
    currentRetentionPeriodInSeconds: number;
    dbSizeInGbs: number;
    isRedoLogsEnabled: boolean;
    minimumRecoveryNeededInDays: number;
    retentionPeriodInDays: number;
    unprotectedWindowInSeconds: number;
}

export interface GetRecoveryProtectedDatabaseRecoveryServiceSubnet {
    recoveryServiceSubnetId: string;
    state: string;
}

export interface GetRecoveryProtectedDatabasesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetRecoveryProtectedDatabasesProtectedDatabaseCollection {
    items: outputs.GetRecoveryProtectedDatabasesProtectedDatabaseCollectionItem[];
}

export interface GetRecoveryProtectedDatabasesProtectedDatabaseCollectionItem {
    compartmentId: string;
    databaseId: string;
    databaseSize: string;
    dbUniqueName: string;
    definedTags: {[key: string]: string};
    deletionSchedule: string;
    displayName: string;
    freeformTags: {[key: string]: string};
    health: string;
    healthDetails: string;
    id: string;
    isReadOnlyResource: boolean;
    isRedoLogsShipped: boolean;
    lifecycleDetails: string;
    metrics: outputs.GetRecoveryProtectedDatabasesProtectedDatabaseCollectionItemMetric[];
    password: string;
    policyLockedDateTime: string;
    protectionPolicyId: string;
    recoveryServiceSubnets: outputs.GetRecoveryProtectedDatabasesProtectedDatabaseCollectionItemRecoveryServiceSubnet[];
    state: string;
    subscriptionId: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
    vpcUserName: string;
}

export interface GetRecoveryProtectedDatabasesProtectedDatabaseCollectionItemMetric {
    backupSpaceEstimateInGbs: number;
    backupSpaceUsedInGbs: number;
    currentRetentionPeriodInSeconds: number;
    dbSizeInGbs: number;
    isRedoLogsEnabled: boolean;
    minimumRecoveryNeededInDays: number;
    retentionPeriodInDays: number;
    unprotectedWindowInSeconds: number;
}

export interface GetRecoveryProtectedDatabasesProtectedDatabaseCollectionItemRecoveryServiceSubnet {
    recoveryServiceSubnetId: string;
    state: string;
}

export interface GetRecoveryProtectionPoliciesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetRecoveryProtectionPoliciesProtectionPolicyCollection {
    items: outputs.GetRecoveryProtectionPoliciesProtectionPolicyCollectionItem[];
}

export interface GetRecoveryProtectionPoliciesProtectionPolicyCollectionItem {
    backupRetentionPeriodInDays: number;
    compartmentId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    isPredefinedPolicy: boolean;
    lifecycleDetails: string;
    mustEnforceCloudLocality: boolean;
    policyLockedDateTime: string;
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
}

export interface GetRecoveryRecoveryServiceSubnetsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetRecoveryRecoveryServiceSubnetsRecoveryServiceSubnetCollection {
    items: outputs.GetRecoveryRecoveryServiceSubnetsRecoveryServiceSubnetCollectionItem[];
}

export interface GetRecoveryRecoveryServiceSubnetsRecoveryServiceSubnetCollectionItem {
    compartmentId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    lifecycleDetails: string;
    nsgIds: string[];
    state: string;
    subnetId: string;
    subnets: string[];
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
    vcnId: string;
}

export interface GetRedisRedisClusterNodeCollection {
    items: outputs.GetRedisRedisClusterNodeCollectionItem[];
}

export interface GetRedisRedisClusterNodeCollectionItem {
    displayName: string;
    privateEndpointFqdn: string;
    privateEndpointIpAddress: string;
}

export interface GetRedisRedisClusterNodesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetRedisRedisClusterNodesRedisNodeCollection {
    items: outputs.GetRedisRedisClusterNodesRedisNodeCollectionItem[];
}

export interface GetRedisRedisClusterNodesRedisNodeCollectionItem {
    displayName: string;
    privateEndpointFqdn: string;
    privateEndpointIpAddress: string;
    redisClusterId: string;
    shardNumber: number;
}

export interface GetRedisRedisClustersFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetRedisRedisClustersRedisClusterCollection {
    items: outputs.GetRedisRedisClustersRedisClusterCollectionItem[];
}

export interface GetRedisRedisClustersRedisClusterCollectionItem {
    clusterMode: string;
    compartmentId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    lifecycleDetails: string;
    nodeCollections: outputs.GetRedisRedisClustersRedisClusterCollectionItemNodeCollection[];
    nodeCount: number;
    nodeMemoryInGbs: number;
    nsgIds: string[];
    primaryEndpointIpAddress: string;
    primaryFqdn: string;
    replicasEndpointIpAddress: string;
    replicasFqdn: string;
    shardCount: number;
    softwareVersion: string;
    state: string;
    subnetId: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
}

export interface GetRedisRedisClustersRedisClusterCollectionItemNodeCollection {
    items: outputs.GetRedisRedisClustersRedisClusterCollectionItemNodeCollectionItem[];
}

export interface GetRedisRedisClustersRedisClusterCollectionItemNodeCollectionItem {
    displayName: string;
    privateEndpointFqdn: string;
    privateEndpointIpAddress: string;
}

export interface GetResourceSchedulerScheduleResource {
    id: string;
    metadata: {[key: string]: string};
}

export interface GetResourceSchedulerScheduleResourceFilter {
    attribute: string;
    condition: string;
    shouldIncludeChildCompartments: boolean;
    values: outputs.GetResourceSchedulerScheduleResourceFilterValue[];
}

export interface GetResourceSchedulerScheduleResourceFilterValue {
    namespace: string;
    tagKey: string;
    value: string;
}

export interface GetResourceSchedulerSchedulesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetResourceSchedulerSchedulesScheduleCollection {
    items: outputs.GetResourceSchedulerSchedulesScheduleCollectionItem[];
}

export interface GetResourceSchedulerSchedulesScheduleCollectionItem {
    action: string;
    compartmentId: string;
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    recurrenceDetails: string;
    recurrenceType: string;
    resourceFilters: outputs.GetResourceSchedulerSchedulesScheduleCollectionItemResourceFilter[];
    resources: outputs.GetResourceSchedulerSchedulesScheduleCollectionItemResource[];
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeEnds: string;
    timeLastRun: string;
    timeNextRun: string;
    timeStarts: string;
    timeUpdated: string;
}

export interface GetResourceSchedulerSchedulesScheduleCollectionItemResource {
    id: string;
    metadata: {[key: string]: string};
}

export interface GetResourceSchedulerSchedulesScheduleCollectionItemResourceFilter {
    attribute: string;
    condition: string;
    shouldIncludeChildCompartments: boolean;
    values: outputs.GetResourceSchedulerSchedulesScheduleCollectionItemResourceFilterValue[];
}

export interface GetResourceSchedulerSchedulesScheduleCollectionItemResourceFilterValue {
    namespace: string;
    tagKey: string;
    value: string;
}

export interface GetResourcemanagerPrivateEndpointsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetResourcemanagerPrivateEndpointsPrivateEndpointCollection {
    items: outputs.GetResourcemanagerPrivateEndpointsPrivateEndpointCollectionItem[];
}

export interface GetResourcemanagerPrivateEndpointsPrivateEndpointCollectionItem {
    compartmentId: string;
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    dnsZones: string[];
    freeformTags: {[key: string]: string};
    id: string;
    isUsedWithConfigurationSourceProvider: boolean;
    nsgIdLists: string[];
    sourceIps: string[];
    state: string;
    subnetId: string;
    timeCreated: string;
    vcnId: string;
}

export interface GetResourcemanagerStackConfigSource {
    configSourceType: string;
    workingDirectory: string;
    zipFileBase64encoded: string;
}

export interface GetResourcemanagerStacksFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetResourcemanagerStacksStack {
    compartmentId: string;
    configSources: outputs.GetResourcemanagerStacksStackConfigSource[];
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    state: string;
    timeCreated: string;
    variables: {[key: string]: string};
}

export interface GetResourcemanagerStacksStackConfigSource {
    configSourceType: string;
    workingDirectory: string;
    zipFileBase64encoded: string;
}

export interface GetSchConnectorPluginsConnectorPluginCollection {
    items: outputs.GetSchConnectorPluginsConnectorPluginCollectionItem[];
}

export interface GetSchConnectorPluginsConnectorPluginCollectionItem {
    displayName: string;
    estimatedThroughput: string;
    kind: string;
    maxRetention: string;
    name: string;
    schema: string;
    state: string;
    timeCreated: string;
}

export interface GetSchConnectorPluginsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetSchServiceConnectorSource {
    configMap: string;
    cursors: outputs.GetSchServiceConnectorSourceCursor[];
    kind: string;
    logSources: outputs.GetSchServiceConnectorSourceLogSource[];
    monitoringSources: outputs.GetSchServiceConnectorSourceMonitoringSource[];
    pluginName: string;
    streamId: string;
}

export interface GetSchServiceConnectorSourceCursor {
    kind: string;
}

export interface GetSchServiceConnectorSourceLogSource {
    compartmentId: string;
    logGroupId: string;
    logId: string;
}

export interface GetSchServiceConnectorSourceMonitoringSource {
    compartmentId: string;
    namespaceDetails: outputs.GetSchServiceConnectorSourceMonitoringSourceNamespaceDetail[];
}

export interface GetSchServiceConnectorSourceMonitoringSourceNamespaceDetail {
    kind: string;
    namespaces: outputs.GetSchServiceConnectorSourceMonitoringSourceNamespaceDetailNamespace[];
}

export interface GetSchServiceConnectorSourceMonitoringSourceNamespaceDetailNamespace {
    metrics: outputs.GetSchServiceConnectorSourceMonitoringSourceNamespaceDetailNamespaceMetric[];
    namespace: string;
}

export interface GetSchServiceConnectorSourceMonitoringSourceNamespaceDetailNamespaceMetric {
    kind: string;
}

export interface GetSchServiceConnectorTarget {
    batchRolloverSizeInMbs: number;
    batchRolloverTimeInMs: number;
    batchSizeInKbs: number;
    batchSizeInNum: number;
    batchTimeInSec: number;
    bucket: string;
    compartmentId: string;
    dimensions: outputs.GetSchServiceConnectorTargetDimension[];
    enableFormattedMessaging: boolean;
    functionId: string;
    kind: string;
    logGroupId: string;
    logSourceIdentifier: string;
    metric: string;
    metricNamespace: string;
    namespace: string;
    objectNamePrefix: string;
    streamId: string;
    topicId: string;
}

export interface GetSchServiceConnectorTargetDimension {
    dimensionValues: outputs.GetSchServiceConnectorTargetDimensionDimensionValue[];
    name: string;
}

export interface GetSchServiceConnectorTargetDimensionDimensionValue {
    kind: string;
    path: string;
    value: string;
}

export interface GetSchServiceConnectorTask {
    batchSizeInKbs: number;
    batchTimeInSec: number;
    condition: string;
    functionId: string;
    kind: string;
}

export interface GetSchServiceConnectorsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetSchServiceConnectorsServiceConnectorCollection {
    items: outputs.GetSchServiceConnectorsServiceConnectorCollectionItem[];
}

export interface GetSchServiceConnectorsServiceConnectorCollectionItem {
    compartmentId: string;
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    lifecyleDetails: string;
    sources: outputs.GetSchServiceConnectorsServiceConnectorCollectionItemSource[];
    state: string;
    systemTags: {[key: string]: string};
    targets: outputs.GetSchServiceConnectorsServiceConnectorCollectionItemTarget[];
    tasks: outputs.GetSchServiceConnectorsServiceConnectorCollectionItemTask[];
    timeCreated: string;
    timeUpdated: string;
}

export interface GetSchServiceConnectorsServiceConnectorCollectionItemSource {
    configMap: string;
    cursors: outputs.GetSchServiceConnectorsServiceConnectorCollectionItemSourceCursor[];
    kind: string;
    logSources: outputs.GetSchServiceConnectorsServiceConnectorCollectionItemSourceLogSource[];
    monitoringSources: outputs.GetSchServiceConnectorsServiceConnectorCollectionItemSourceMonitoringSource[];
    pluginName: string;
    streamId: string;
}

export interface GetSchServiceConnectorsServiceConnectorCollectionItemSourceCursor {
    kind: string;
}

export interface GetSchServiceConnectorsServiceConnectorCollectionItemSourceLogSource {
    compartmentId: string;
    logGroupId: string;
    logId: string;
}

export interface GetSchServiceConnectorsServiceConnectorCollectionItemSourceMonitoringSource {
    compartmentId: string;
    namespaceDetails: outputs.GetSchServiceConnectorsServiceConnectorCollectionItemSourceMonitoringSourceNamespaceDetail[];
}

export interface GetSchServiceConnectorsServiceConnectorCollectionItemSourceMonitoringSourceNamespaceDetail {
    kind: string;
    namespaces: outputs.GetSchServiceConnectorsServiceConnectorCollectionItemSourceMonitoringSourceNamespaceDetailNamespace[];
}

export interface GetSchServiceConnectorsServiceConnectorCollectionItemSourceMonitoringSourceNamespaceDetailNamespace {
    metrics: outputs.GetSchServiceConnectorsServiceConnectorCollectionItemSourceMonitoringSourceNamespaceDetailNamespaceMetric[];
    namespace: string;
}

export interface GetSchServiceConnectorsServiceConnectorCollectionItemSourceMonitoringSourceNamespaceDetailNamespaceMetric {
    kind: string;
}

export interface GetSchServiceConnectorsServiceConnectorCollectionItemTarget {
    batchRolloverSizeInMbs: number;
    batchRolloverTimeInMs: number;
    batchSizeInKbs: number;
    batchSizeInNum: number;
    batchTimeInSec: number;
    bucket: string;
    compartmentId: string;
    dimensions: outputs.GetSchServiceConnectorsServiceConnectorCollectionItemTargetDimension[];
    enableFormattedMessaging: boolean;
    functionId: string;
    kind: string;
    logGroupId: string;
    logSourceIdentifier: string;
    metric: string;
    metricNamespace: string;
    namespace: string;
    objectNamePrefix: string;
    streamId: string;
    topicId: string;
}

export interface GetSchServiceConnectorsServiceConnectorCollectionItemTargetDimension {
    dimensionValues: outputs.GetSchServiceConnectorsServiceConnectorCollectionItemTargetDimensionDimensionValue[];
    name: string;
}

export interface GetSchServiceConnectorsServiceConnectorCollectionItemTargetDimensionDimensionValue {
    kind: string;
    path: string;
    value: string;
}

export interface GetSchServiceConnectorsServiceConnectorCollectionItemTask {
    batchSizeInKbs: number;
    batchTimeInSec: number;
    condition: string;
    functionId: string;
    kind: string;
}

export interface GetSecretsSecretbundleSecretBundleContent {
    content: string;
    contentType: string;
}

export interface GetSecretsSecretbundleVersionsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetSecretsSecretbundleVersionsSecretBundleVersion {
    secretId: string;
    stages: string[];
    timeCreated: string;
    timeOfDeletion: string;
    timeOfExpiry: string;
    versionName: string;
    versionNumber: string;
}

export interface GetServiceCatalogPrivateApplicationLogo {
    contentUrl: string;
    displayName: string;
    mimeType: string;
}

export interface GetServiceCatalogPrivateApplicationPackageDetail {
    packageType: string;
    version: string;
    zipFileBase64encoded: string;
}

export interface GetServiceCatalogPrivateApplicationPackagesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetServiceCatalogPrivateApplicationPackagesPrivateApplicationPackageCollection {
    items: outputs.GetServiceCatalogPrivateApplicationPackagesPrivateApplicationPackageCollectionItem[];
}

export interface GetServiceCatalogPrivateApplicationPackagesPrivateApplicationPackageCollectionItem {
    contentUrl: string;
    displayName: string;
    id: string;
    mimeType: string;
    packageType: string;
    privateApplicationId: string;
    timeCreated: string;
    version: string;
}

export interface GetServiceCatalogPrivateApplicationsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetServiceCatalogPrivateApplicationsPrivateApplicationCollection {
    items: outputs.GetServiceCatalogPrivateApplicationsPrivateApplicationCollectionItem[];
}

export interface GetServiceCatalogPrivateApplicationsPrivateApplicationCollectionItem {
    compartmentId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    logoFileBase64encoded: string;
    logos: outputs.GetServiceCatalogPrivateApplicationsPrivateApplicationCollectionItemLogo[];
    longDescription: string;
    packageDetails: outputs.GetServiceCatalogPrivateApplicationsPrivateApplicationCollectionItemPackageDetail[];
    packageType: string;
    shortDescription: string;
    state: string;
    timeCreated: string;
    timeUpdated: string;
}

export interface GetServiceCatalogPrivateApplicationsPrivateApplicationCollectionItemLogo {
    contentUrl: string;
    displayName: string;
    mimeType: string;
}

export interface GetServiceCatalogPrivateApplicationsPrivateApplicationCollectionItemPackageDetail {
    packageType: string;
    version: string;
    zipFileBase64encoded: string;
}

export interface GetServiceCatalogServiceCatalogAssociationsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetServiceCatalogServiceCatalogAssociationsServiceCatalogAssociationCollection {
    items: outputs.GetServiceCatalogServiceCatalogAssociationsServiceCatalogAssociationCollectionItem[];
}

export interface GetServiceCatalogServiceCatalogAssociationsServiceCatalogAssociationCollectionItem {
    entityId: string;
    entityType: string;
    id: string;
    serviceCatalogId: string;
    timeCreated: string;
}

export interface GetServiceCatalogServiceCatalogsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetServiceCatalogServiceCatalogsServiceCatalogCollection {
    items: outputs.GetServiceCatalogServiceCatalogsServiceCatalogCollectionItem[];
}

export interface GetServiceCatalogServiceCatalogsServiceCatalogCollectionItem {
    compartmentId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    state: string;
    timeCreated: string;
    timeUpdated: string;
}

export interface GetServiceManagerProxyServiceEnvironmentServiceDefinition {
    displayName: string;
    shortDisplayName: string;
    type: string;
}

export interface GetServiceManagerProxyServiceEnvironmentServiceEnvironmentEndpoint {
    description: string;
    environmentType: string;
    url: string;
}

export interface GetServiceManagerProxyServiceEnvironmentsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetServiceManagerProxyServiceEnvironmentsServiceEnvironmentCollection {
    items: outputs.GetServiceManagerProxyServiceEnvironmentsServiceEnvironmentCollectionItem[];
}

export interface GetServiceManagerProxyServiceEnvironmentsServiceEnvironmentCollectionItem {
    compartmentId: string;
    consoleUrl: string;
    definedTags: {[key: string]: string};
    freeformTags: {[key: string]: string};
    id: string;
    serviceDefinitions: outputs.GetServiceManagerProxyServiceEnvironmentsServiceEnvironmentCollectionItemServiceDefinition[];
    serviceEnvironmentEndpoints: outputs.GetServiceManagerProxyServiceEnvironmentsServiceEnvironmentCollectionItemServiceEnvironmentEndpoint[];
    status: string;
    subscriptionId: string;
}

export interface GetServiceManagerProxyServiceEnvironmentsServiceEnvironmentCollectionItemServiceDefinition {
    displayName: string;
    shortDisplayName: string;
    type: string;
}

export interface GetServiceManagerProxyServiceEnvironmentsServiceEnvironmentCollectionItemServiceEnvironmentEndpoint {
    description: string;
    environmentType: string;
    url: string;
}

export interface GetServiceMeshAccessPoliciesAccessPolicyCollection {
    items: outputs.GetServiceMeshAccessPoliciesAccessPolicyCollectionItem[];
}

export interface GetServiceMeshAccessPoliciesAccessPolicyCollectionItem {
    compartmentId: string;
    definedTags: {[key: string]: string};
    description: string;
    freeformTags: {[key: string]: string};
    id: string;
    lifecycleDetails: string;
    meshId: string;
    name: string;
    rules: outputs.GetServiceMeshAccessPoliciesAccessPolicyCollectionItemRule[];
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
}

export interface GetServiceMeshAccessPoliciesAccessPolicyCollectionItemRule {
    action: string;
    destinations: outputs.GetServiceMeshAccessPoliciesAccessPolicyCollectionItemRuleDestination[];
    sources: outputs.GetServiceMeshAccessPoliciesAccessPolicyCollectionItemRuleSource[];
}

export interface GetServiceMeshAccessPoliciesAccessPolicyCollectionItemRuleDestination {
    hostnames: string[];
    ingressGatewayId: string;
    ipAddresses: string[];
    ports: number[];
    protocol: string;
    type: string;
    virtualServiceId: string;
}

export interface GetServiceMeshAccessPoliciesAccessPolicyCollectionItemRuleSource {
    hostnames: string[];
    ingressGatewayId: string;
    ipAddresses: string[];
    ports: number[];
    protocol: string;
    type: string;
    virtualServiceId: string;
}

export interface GetServiceMeshAccessPoliciesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetServiceMeshAccessPolicyRule {
    action: string;
    destinations: outputs.GetServiceMeshAccessPolicyRuleDestination[];
    sources: outputs.GetServiceMeshAccessPolicyRuleSource[];
}

export interface GetServiceMeshAccessPolicyRuleDestination {
    hostnames: string[];
    ingressGatewayId: string;
    ipAddresses: string[];
    ports: number[];
    protocol: string;
    type: string;
    virtualServiceId: string;
}

export interface GetServiceMeshAccessPolicyRuleSource {
    hostnames: string[];
    ingressGatewayId: string;
    ipAddresses: string[];
    ports: number[];
    protocol: string;
    type: string;
    virtualServiceId: string;
}

export interface GetServiceMeshIngressGatewayAccessLogging {
    isEnabled: boolean;
}

export interface GetServiceMeshIngressGatewayHost {
    hostnames: string[];
    listeners: outputs.GetServiceMeshIngressGatewayHostListener[];
    name: string;
}

export interface GetServiceMeshIngressGatewayHostListener {
    port: number;
    protocol: string;
    tls: outputs.GetServiceMeshIngressGatewayHostListenerTl[];
}

export interface GetServiceMeshIngressGatewayHostListenerTl {
    clientValidations: outputs.GetServiceMeshIngressGatewayHostListenerTlClientValidation[];
    mode: string;
    serverCertificates: outputs.GetServiceMeshIngressGatewayHostListenerTlServerCertificate[];
}

export interface GetServiceMeshIngressGatewayHostListenerTlClientValidation {
    subjectAlternateNames: string[];
    trustedCaBundles: outputs.GetServiceMeshIngressGatewayHostListenerTlClientValidationTrustedCaBundle[];
}

export interface GetServiceMeshIngressGatewayHostListenerTlClientValidationTrustedCaBundle {
    caBundleId: string;
    secretName: string;
    type: string;
}

export interface GetServiceMeshIngressGatewayHostListenerTlServerCertificate {
    certificateId: string;
    secretName: string;
    type: string;
}

export interface GetServiceMeshIngressGatewayMtl {
    certificateId: string;
    maximumValidity: number;
}

export interface GetServiceMeshIngressGatewayRouteTableRouteRule {
    destinations: outputs.GetServiceMeshIngressGatewayRouteTableRouteRuleDestination[];
    ingressGatewayHosts: outputs.GetServiceMeshIngressGatewayRouteTableRouteRuleIngressGatewayHost[];
    isGrpc: boolean;
    isHostRewriteEnabled: boolean;
    isPathRewriteEnabled: boolean;
    path: string;
    pathType: string;
    requestTimeoutInMs: string;
    type: string;
}

export interface GetServiceMeshIngressGatewayRouteTableRouteRuleDestination {
    port: number;
    virtualServiceId: string;
    weight: number;
}

export interface GetServiceMeshIngressGatewayRouteTableRouteRuleIngressGatewayHost {
    name: string;
    port: number;
}

export interface GetServiceMeshIngressGatewayRouteTablesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetServiceMeshIngressGatewayRouteTablesIngressGatewayRouteTableCollection {
    items: outputs.GetServiceMeshIngressGatewayRouteTablesIngressGatewayRouteTableCollectionItem[];
}

export interface GetServiceMeshIngressGatewayRouteTablesIngressGatewayRouteTableCollectionItem {
    compartmentId: string;
    definedTags: {[key: string]: string};
    description: string;
    freeformTags: {[key: string]: string};
    id: string;
    ingressGatewayId: string;
    lifecycleDetails: string;
    name: string;
    priority: number;
    routeRules: outputs.GetServiceMeshIngressGatewayRouteTablesIngressGatewayRouteTableCollectionItemRouteRule[];
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
}

export interface GetServiceMeshIngressGatewayRouteTablesIngressGatewayRouteTableCollectionItemRouteRule {
    destinations: outputs.GetServiceMeshIngressGatewayRouteTablesIngressGatewayRouteTableCollectionItemRouteRuleDestination[];
    ingressGatewayHosts: outputs.GetServiceMeshIngressGatewayRouteTablesIngressGatewayRouteTableCollectionItemRouteRuleIngressGatewayHost[];
    isGrpc: boolean;
    isHostRewriteEnabled: boolean;
    isPathRewriteEnabled: boolean;
    path: string;
    pathType: string;
    requestTimeoutInMs: string;
    type: string;
}

export interface GetServiceMeshIngressGatewayRouteTablesIngressGatewayRouteTableCollectionItemRouteRuleDestination {
    port: number;
    virtualServiceId: string;
    weight: number;
}

export interface GetServiceMeshIngressGatewayRouteTablesIngressGatewayRouteTableCollectionItemRouteRuleIngressGatewayHost {
    name: string;
    port: number;
}

export interface GetServiceMeshIngressGatewaysFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetServiceMeshIngressGatewaysIngressGatewayCollection {
    items: outputs.GetServiceMeshIngressGatewaysIngressGatewayCollectionItem[];
}

export interface GetServiceMeshIngressGatewaysIngressGatewayCollectionItem {
    accessLoggings: outputs.GetServiceMeshIngressGatewaysIngressGatewayCollectionItemAccessLogging[];
    compartmentId: string;
    definedTags: {[key: string]: string};
    description: string;
    freeformTags: {[key: string]: string};
    hosts: outputs.GetServiceMeshIngressGatewaysIngressGatewayCollectionItemHost[];
    id: string;
    lifecycleDetails: string;
    meshId: string;
    mtls: outputs.GetServiceMeshIngressGatewaysIngressGatewayCollectionItemMtl[];
    name: string;
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
}

export interface GetServiceMeshIngressGatewaysIngressGatewayCollectionItemAccessLogging {
    isEnabled: boolean;
}

export interface GetServiceMeshIngressGatewaysIngressGatewayCollectionItemHost {
    hostnames: string[];
    listeners: outputs.GetServiceMeshIngressGatewaysIngressGatewayCollectionItemHostListener[];
    name: string;
}

export interface GetServiceMeshIngressGatewaysIngressGatewayCollectionItemHostListener {
    port: number;
    protocol: string;
    tls: outputs.GetServiceMeshIngressGatewaysIngressGatewayCollectionItemHostListenerTl[];
}

export interface GetServiceMeshIngressGatewaysIngressGatewayCollectionItemHostListenerTl {
    clientValidations: outputs.GetServiceMeshIngressGatewaysIngressGatewayCollectionItemHostListenerTlClientValidation[];
    mode: string;
    serverCertificates: outputs.GetServiceMeshIngressGatewaysIngressGatewayCollectionItemHostListenerTlServerCertificate[];
}

export interface GetServiceMeshIngressGatewaysIngressGatewayCollectionItemHostListenerTlClientValidation {
    subjectAlternateNames: string[];
    trustedCaBundles: outputs.GetServiceMeshIngressGatewaysIngressGatewayCollectionItemHostListenerTlClientValidationTrustedCaBundle[];
}

export interface GetServiceMeshIngressGatewaysIngressGatewayCollectionItemHostListenerTlClientValidationTrustedCaBundle {
    caBundleId: string;
    secretName: string;
    type: string;
}

export interface GetServiceMeshIngressGatewaysIngressGatewayCollectionItemHostListenerTlServerCertificate {
    certificateId: string;
    secretName: string;
    type: string;
}

export interface GetServiceMeshIngressGatewaysIngressGatewayCollectionItemMtl {
    certificateId: string;
    maximumValidity: number;
}

export interface GetServiceMeshMeshCertificateAuthority {
    id: string;
}

export interface GetServiceMeshMeshMtl {
    minimum: string;
}

export interface GetServiceMeshMeshesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetServiceMeshMeshesMeshCollection {
    items: outputs.GetServiceMeshMeshesMeshCollectionItem[];
}

export interface GetServiceMeshMeshesMeshCollectionItem {
    certificateAuthorities: outputs.GetServiceMeshMeshesMeshCollectionItemCertificateAuthority[];
    compartmentId: string;
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    lifecycleDetails: string;
    mtls: outputs.GetServiceMeshMeshesMeshCollectionItemMtl[];
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
}

export interface GetServiceMeshMeshesMeshCollectionItemCertificateAuthority {
    id: string;
}

export interface GetServiceMeshMeshesMeshCollectionItemMtl {
    minimum: string;
}

export interface GetServiceMeshVirtualDeploymentAccessLogging {
    isEnabled: boolean;
}

export interface GetServiceMeshVirtualDeploymentListener {
    idleTimeoutInMs: string;
    port: number;
    protocol: string;
    requestTimeoutInMs: string;
}

export interface GetServiceMeshVirtualDeploymentServiceDiscovery {
    hostname: string;
    type: string;
}

export interface GetServiceMeshVirtualDeploymentsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetServiceMeshVirtualDeploymentsVirtualDeploymentCollection {
    items: outputs.GetServiceMeshVirtualDeploymentsVirtualDeploymentCollectionItem[];
}

export interface GetServiceMeshVirtualDeploymentsVirtualDeploymentCollectionItem {
    accessLoggings: outputs.GetServiceMeshVirtualDeploymentsVirtualDeploymentCollectionItemAccessLogging[];
    compartmentId: string;
    definedTags: {[key: string]: string};
    description: string;
    freeformTags: {[key: string]: string};
    id: string;
    lifecycleDetails: string;
    listeners: outputs.GetServiceMeshVirtualDeploymentsVirtualDeploymentCollectionItemListener[];
    name: string;
    serviceDiscoveries: outputs.GetServiceMeshVirtualDeploymentsVirtualDeploymentCollectionItemServiceDiscovery[];
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
    virtualServiceId: string;
}

export interface GetServiceMeshVirtualDeploymentsVirtualDeploymentCollectionItemAccessLogging {
    isEnabled: boolean;
}

export interface GetServiceMeshVirtualDeploymentsVirtualDeploymentCollectionItemListener {
    idleTimeoutInMs: string;
    port: number;
    protocol: string;
    requestTimeoutInMs: string;
}

export interface GetServiceMeshVirtualDeploymentsVirtualDeploymentCollectionItemServiceDiscovery {
    hostname: string;
    type: string;
}

export interface GetServiceMeshVirtualServiceDefaultRoutingPolicy {
    type: string;
}

export interface GetServiceMeshVirtualServiceMtl {
    certificateId: string;
    maximumValidity: number;
    mode: string;
}

export interface GetServiceMeshVirtualServiceRouteTableRouteRule {
    destinations: outputs.GetServiceMeshVirtualServiceRouteTableRouteRuleDestination[];
    isGrpc: boolean;
    path: string;
    pathType: string;
    requestTimeoutInMs: string;
    type: string;
}

export interface GetServiceMeshVirtualServiceRouteTableRouteRuleDestination {
    port: number;
    virtualDeploymentId: string;
    weight: number;
}

export interface GetServiceMeshVirtualServiceRouteTablesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetServiceMeshVirtualServiceRouteTablesVirtualServiceRouteTableCollection {
    items: outputs.GetServiceMeshVirtualServiceRouteTablesVirtualServiceRouteTableCollectionItem[];
}

export interface GetServiceMeshVirtualServiceRouteTablesVirtualServiceRouteTableCollectionItem {
    compartmentId: string;
    definedTags: {[key: string]: string};
    description: string;
    freeformTags: {[key: string]: string};
    id: string;
    lifecycleDetails: string;
    name: string;
    priority: number;
    routeRules: outputs.GetServiceMeshVirtualServiceRouteTablesVirtualServiceRouteTableCollectionItemRouteRule[];
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
    virtualServiceId: string;
}

export interface GetServiceMeshVirtualServiceRouteTablesVirtualServiceRouteTableCollectionItemRouteRule {
    destinations: outputs.GetServiceMeshVirtualServiceRouteTablesVirtualServiceRouteTableCollectionItemRouteRuleDestination[];
    isGrpc: boolean;
    path: string;
    pathType: string;
    requestTimeoutInMs: string;
    type: string;
}

export interface GetServiceMeshVirtualServiceRouteTablesVirtualServiceRouteTableCollectionItemRouteRuleDestination {
    port: number;
    virtualDeploymentId: string;
    weight: number;
}

export interface GetServiceMeshVirtualServicesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetServiceMeshVirtualServicesVirtualServiceCollection {
    items: outputs.GetServiceMeshVirtualServicesVirtualServiceCollectionItem[];
}

export interface GetServiceMeshVirtualServicesVirtualServiceCollectionItem {
    compartmentId: string;
    defaultRoutingPolicies: outputs.GetServiceMeshVirtualServicesVirtualServiceCollectionItemDefaultRoutingPolicy[];
    definedTags: {[key: string]: string};
    description: string;
    freeformTags: {[key: string]: string};
    hosts: string[];
    id: string;
    lifecycleDetails: string;
    meshId: string;
    mtls: outputs.GetServiceMeshVirtualServicesVirtualServiceCollectionItemMtl[];
    name: string;
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
}

export interface GetServiceMeshVirtualServicesVirtualServiceCollectionItemDefaultRoutingPolicy {
    type: string;
}

export interface GetServiceMeshVirtualServicesVirtualServiceCollectionItemMtl {
    certificateId: string;
    maximumValidity: number;
    mode: string;
}

export interface GetStackMonitoringBaselineableMetricsBaselineableMetricSummaryCollection {
    items: outputs.GetStackMonitoringBaselineableMetricsBaselineableMetricSummaryCollectionItem[];
}

export interface GetStackMonitoringBaselineableMetricsBaselineableMetricSummaryCollectionItem {
    column: string;
    compartmentId: string;
    createdBy: string;
    definedTags: {[key: string]: string};
    freeformTags: {[key: string]: string};
    id: string;
    isOutOfBox: boolean;
    lastUpdatedBy: string;
    name: string;
    namespace: string;
    resourceGroup: string;
    resourceType: string;
    state: string;
    systemTags: {[key: string]: string};
    tenancyId: string;
    timeCreated: string;
    timeLastUpdated: string;
}

export interface GetStackMonitoringBaselineableMetricsEvaluateDataPoint {
    anomaly: number;
    high: number;
    low: number;
    timestamp: string;
    value: number;
}

export interface GetStackMonitoringBaselineableMetricsEvaluateItem {
    dataPoints: outputs.GetStackMonitoringBaselineableMetricsEvaluateItemDataPoint[];
    dimensions: {[key: string]: string};
    evaluationDataPoints: outputs.GetStackMonitoringBaselineableMetricsEvaluateItemEvaluationDataPoint[];
    trainingDataPoints: outputs.GetStackMonitoringBaselineableMetricsEvaluateItemTrainingDataPoint[];
}

export interface GetStackMonitoringBaselineableMetricsEvaluateItemDataPoint {
    anomaly: number;
    high: number;
    low: number;
    timestamp: string;
    value: number;
}

export interface GetStackMonitoringBaselineableMetricsEvaluateItemEvaluationDataPoint {
    timestamp: string;
    value: number;
}

export interface GetStackMonitoringBaselineableMetricsEvaluateItemTrainingDataPoint {
    timestamp: string;
    value: number;
}

export interface GetStackMonitoringBaselineableMetricsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetStackMonitoringConfigsConfigCollection {
    items: outputs.GetStackMonitoringConfigsConfigCollectionItem[];
}

export interface GetStackMonitoringConfigsConfigCollectionItem {
    compartmentId: string;
    configType: string;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    isEnabled: boolean;
    license: string;
    resourceType: string;
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
}

export interface GetStackMonitoringConfigsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetStackMonitoringDiscoveryJobDiscoveryDetail {
    agentId: string;
    credentials: outputs.GetStackMonitoringDiscoveryJobDiscoveryDetailCredential[];
    license: string;
    properties: outputs.GetStackMonitoringDiscoveryJobDiscoveryDetailProperty[];
    resourceName: string;
    resourceType: string;
    tags: outputs.GetStackMonitoringDiscoveryJobDiscoveryDetailTag[];
}

export interface GetStackMonitoringDiscoveryJobDiscoveryDetailCredential {
    items: outputs.GetStackMonitoringDiscoveryJobDiscoveryDetailCredentialItem[];
}

export interface GetStackMonitoringDiscoveryJobDiscoveryDetailCredentialItem {
    credentialName: string;
    credentialType: string;
    properties: outputs.GetStackMonitoringDiscoveryJobDiscoveryDetailCredentialItemProperty[];
}

export interface GetStackMonitoringDiscoveryJobDiscoveryDetailCredentialItemProperty {
    propertiesMap: {[key: string]: string};
}

export interface GetStackMonitoringDiscoveryJobDiscoveryDetailProperty {
    propertiesMap: {[key: string]: string};
}

export interface GetStackMonitoringDiscoveryJobDiscoveryDetailTag {
    propertiesMap: {[key: string]: string};
}

export interface GetStackMonitoringDiscoveryJobLogsDiscoveryJobLogCollection {
    items: outputs.GetStackMonitoringDiscoveryJobLogsDiscoveryJobLogCollectionItem[];
}

export interface GetStackMonitoringDiscoveryJobLogsDiscoveryJobLogCollectionItem {
    id: string;
    logMessage: string;
    logType: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
}

export interface GetStackMonitoringDiscoveryJobLogsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetStackMonitoringDiscoveryJobsDiscoveryJobCollection {
    items: outputs.GetStackMonitoringDiscoveryJobsDiscoveryJobCollectionItem[];
}

export interface GetStackMonitoringDiscoveryJobsDiscoveryJobCollectionItem {
    compartmentId: string;
    definedTags: {[key: string]: string};
    discoveryType: string;
    freeformTags: {[key: string]: string};
    id: string;
    resourceName: string;
    resourceType: string;
    state: string;
    status: string;
    statusMessage: string;
    systemTags: {[key: string]: string};
    tenantId: string;
    timeUpdated: string;
    userId: string;
}

export interface GetStackMonitoringDiscoveryJobsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetStackMonitoringMetricExtensionEnabledOnResource {
    resourceId: string;
}

export interface GetStackMonitoringMetricExtensionMetricList {
    computeExpression: string;
    dataType: string;
    displayName: string;
    isDimension: boolean;
    isHidden: boolean;
    metricCategory: string;
    name: string;
    unit: string;
}

export interface GetStackMonitoringMetricExtensionQueryProperty {
    arguments: string;
    autoRowPrefix: string;
    collectionMethod: string;
    command: string;
    delimiter: string;
    identityMetric: string;
    inParamDetails: outputs.GetStackMonitoringMetricExtensionQueryPropertyInParamDetail[];
    isMetricServiceEnabled: boolean;
    jmxAttributes: string;
    managedBeanQuery: string;
    outParamDetails: outputs.GetStackMonitoringMetricExtensionQueryPropertyOutParamDetail[];
    scriptDetails: outputs.GetStackMonitoringMetricExtensionQueryPropertyScriptDetail[];
    sqlDetails: outputs.GetStackMonitoringMetricExtensionQueryPropertySqlDetail[];
    sqlType: string;
    startsWith: string;
}

export interface GetStackMonitoringMetricExtensionQueryPropertyInParamDetail {
    inParamPosition: number;
    inParamValue: string;
}

export interface GetStackMonitoringMetricExtensionQueryPropertyOutParamDetail {
    outParamPosition: number;
    outParamType: string;
}

export interface GetStackMonitoringMetricExtensionQueryPropertyScriptDetail {
    content: string;
    name: string;
}

export interface GetStackMonitoringMetricExtensionQueryPropertySqlDetail {
    content: string;
    scriptFileName: string;
}

export interface GetStackMonitoringMetricExtensionsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetStackMonitoringMetricExtensionsMetricExtensionCollection {
    items: outputs.GetStackMonitoringMetricExtensionsMetricExtensionCollectionItem[];
}

export interface GetStackMonitoringMetricExtensionsMetricExtensionCollectionItem {
    collectionMethod: string;
    collectionRecurrences: string;
    compartmentId: string;
    createdBy: string;
    description: string;
    displayName: string;
    enabledOnResources: outputs.GetStackMonitoringMetricExtensionsMetricExtensionCollectionItemEnabledOnResource[];
    enabledOnResourcesCount: number;
    id: string;
    lastUpdatedBy: string;
    metricLists: outputs.GetStackMonitoringMetricExtensionsMetricExtensionCollectionItemMetricList[];
    name: string;
    publishTrigger: boolean;
    queryProperties: outputs.GetStackMonitoringMetricExtensionsMetricExtensionCollectionItemQueryProperty[];
    resourceType: string;
    resourceUri: string;
    state: string;
    status: string;
    tenantId: string;
    timeCreated: string;
    timeUpdated: string;
}

export interface GetStackMonitoringMetricExtensionsMetricExtensionCollectionItemEnabledOnResource {
    resourceId: string;
}

export interface GetStackMonitoringMetricExtensionsMetricExtensionCollectionItemMetricList {
    computeExpression: string;
    dataType: string;
    displayName: string;
    isDimension: boolean;
    isHidden: boolean;
    metricCategory: string;
    name: string;
    unit: string;
}

export interface GetStackMonitoringMetricExtensionsMetricExtensionCollectionItemQueryProperty {
    arguments: string;
    autoRowPrefix: string;
    collectionMethod: string;
    command: string;
    delimiter: string;
    identityMetric: string;
    inParamDetails: outputs.GetStackMonitoringMetricExtensionsMetricExtensionCollectionItemQueryPropertyInParamDetail[];
    isMetricServiceEnabled: boolean;
    jmxAttributes: string;
    managedBeanQuery: string;
    outParamDetails: outputs.GetStackMonitoringMetricExtensionsMetricExtensionCollectionItemQueryPropertyOutParamDetail[];
    scriptDetails: outputs.GetStackMonitoringMetricExtensionsMetricExtensionCollectionItemQueryPropertyScriptDetail[];
    sqlDetails: outputs.GetStackMonitoringMetricExtensionsMetricExtensionCollectionItemQueryPropertySqlDetail[];
    sqlType: string;
    startsWith: string;
}

export interface GetStackMonitoringMetricExtensionsMetricExtensionCollectionItemQueryPropertyInParamDetail {
    inParamPosition: number;
    inParamValue: string;
}

export interface GetStackMonitoringMetricExtensionsMetricExtensionCollectionItemQueryPropertyOutParamDetail {
    outParamPosition: number;
    outParamType: string;
}

export interface GetStackMonitoringMetricExtensionsMetricExtensionCollectionItemQueryPropertyScriptDetail {
    content: string;
    name: string;
}

export interface GetStackMonitoringMetricExtensionsMetricExtensionCollectionItemQueryPropertySqlDetail {
    content: string;
    scriptFileName: string;
}

export interface GetStackMonitoringMonitoredResourceAdditionalAlias {
    credentials: outputs.GetStackMonitoringMonitoredResourceAdditionalAliasCredential[];
    name: string;
    source: string;
}

export interface GetStackMonitoringMonitoredResourceAdditionalAliasCredential {
    name: string;
    service: string;
    source: string;
}

export interface GetStackMonitoringMonitoredResourceAdditionalCredential {
    credentialType: string;
    description: string;
    keyId: string;
    name: string;
    properties: outputs.GetStackMonitoringMonitoredResourceAdditionalCredentialProperty[];
    source: string;
    type: string;
}

export interface GetStackMonitoringMonitoredResourceAdditionalCredentialProperty {
    name: string;
    value: string;
}

export interface GetStackMonitoringMonitoredResourceAlias {
    credentials: outputs.GetStackMonitoringMonitoredResourceAliasCredential[];
    name: string;
    source: string;
}

export interface GetStackMonitoringMonitoredResourceAliasCredential {
    name: string;
    service: string;
    source: string;
}

export interface GetStackMonitoringMonitoredResourceCredential {
    credentialType: string;
    description: string;
    keyId: string;
    name: string;
    properties: outputs.GetStackMonitoringMonitoredResourceCredentialProperty[];
    source: string;
    type: string;
}

export interface GetStackMonitoringMonitoredResourceCredentialProperty {
    name: string;
    value: string;
}

export interface GetStackMonitoringMonitoredResourceDatabaseConnectionDetail {
    connectorId: string;
    dbId: string;
    dbUniqueName: string;
    port: number;
    protocol: string;
    serviceName: string;
    sslSecretId: string;
}

export interface GetStackMonitoringMonitoredResourceProperty {
    name: string;
    value: string;
}

export interface GetStackMonitoringMonitoredResourceTaskTaskDetail {
    availabilityProxyMetricCollectionInterval: number;
    availabilityProxyMetrics: string[];
    consolePathPrefix: string;
    externalIdMapping: string;
    lifecycleStatusMappingsForUpStatuses: string[];
    namespace: string;
    resourceGroup: string;
    resourceNameFilter: string;
    resourceNameMapping: string;
    resourceTypeFilter: string;
    resourceTypeMapping: string;
    serviceBaseUrl: string;
    shouldUseMetricsFlowForStatus: boolean;
    source: string;
    type: string;
}

export interface GetStackMonitoringMonitoredResourceTasksFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetStackMonitoringMonitoredResourceTasksMonitoredResourceTasksCollection {
    items: outputs.GetStackMonitoringMonitoredResourceTasksMonitoredResourceTasksCollectionItem[];
}

export interface GetStackMonitoringMonitoredResourceTasksMonitoredResourceTasksCollectionItem {
    compartmentId: string;
    definedTags: {[key: string]: string};
    freeformTags: {[key: string]: string};
    id: string;
    name: string;
    state: string;
    systemTags: {[key: string]: string};
    taskDetails: outputs.GetStackMonitoringMonitoredResourceTasksMonitoredResourceTasksCollectionItemTaskDetail[];
    tenantId: string;
    timeCreated: string;
    timeUpdated: string;
    workRequestIds: string[];
}

export interface GetStackMonitoringMonitoredResourceTasksMonitoredResourceTasksCollectionItemTaskDetail {
    availabilityProxyMetricCollectionInterval: number;
    availabilityProxyMetrics: string[];
    consolePathPrefix: string;
    externalIdMapping: string;
    lifecycleStatusMappingsForUpStatuses: string[];
    namespace: string;
    resourceGroup: string;
    resourceNameFilter: string;
    resourceNameMapping: string;
    resourceTypeFilter: string;
    resourceTypeMapping: string;
    serviceBaseUrl: string;
    shouldUseMetricsFlowForStatus: boolean;
    source: string;
    type: string;
}

export interface GetStackMonitoringMonitoredResourceTypeMetadata {
    agentProperties: string[];
    format: string;
    requiredProperties: string[];
    uniquePropertySets: outputs.GetStackMonitoringMonitoredResourceTypeMetadataUniquePropertySet[];
    validPropertiesForCreates: string[];
    validPropertiesForUpdates: string[];
    validPropertyValues: {[key: string]: string};
}

export interface GetStackMonitoringMonitoredResourceTypeMetadataUniquePropertySet {
    properties: string[];
}

export interface GetStackMonitoringMonitoredResourceTypesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetStackMonitoringMonitoredResourceTypesMonitoredResourceTypesCollection {
    items: outputs.GetStackMonitoringMonitoredResourceTypesMonitoredResourceTypesCollectionItem[];
}

export interface GetStackMonitoringMonitoredResourceTypesMonitoredResourceTypesCollectionItem {
    compartmentId: string;
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    metadatas: outputs.GetStackMonitoringMonitoredResourceTypesMonitoredResourceTypesCollectionItemMetadata[];
    metricNamespace: string;
    name: string;
    resourceCategory: string;
    sourceType: string;
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
}

export interface GetStackMonitoringMonitoredResourceTypesMonitoredResourceTypesCollectionItemMetadata {
    agentProperties: string[];
    format: string;
    requiredProperties: string[];
    uniquePropertySets: outputs.GetStackMonitoringMonitoredResourceTypesMonitoredResourceTypesCollectionItemMetadataUniquePropertySet[];
    validPropertiesForCreates: string[];
    validPropertiesForUpdates: string[];
    validPropertyValues: {[key: string]: string};
}

export interface GetStackMonitoringMonitoredResourceTypesMonitoredResourceTypesCollectionItemMetadataUniquePropertySet {
    properties: string[];
}

export interface GetStackMonitoringMonitoredResourcesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetStackMonitoringMonitoredResourcesMonitoredResourceCollection {
    items: outputs.GetStackMonitoringMonitoredResourcesMonitoredResourceCollectionItem[];
}

export interface GetStackMonitoringMonitoredResourcesMonitoredResourceCollectionItem {
    additionalAliases: outputs.GetStackMonitoringMonitoredResourcesMonitoredResourceCollectionItemAdditionalAlias[];
    additionalCredentials: outputs.GetStackMonitoringMonitoredResourcesMonitoredResourceCollectionItemAdditionalCredential[];
    aliases: outputs.GetStackMonitoringMonitoredResourcesMonitoredResourceCollectionItemAlias[];
    compartmentId: string;
    credentials: outputs.GetStackMonitoringMonitoredResourcesMonitoredResourceCollectionItemCredential[];
    databaseConnectionDetails: outputs.GetStackMonitoringMonitoredResourcesMonitoredResourceCollectionItemDatabaseConnectionDetail[];
    definedTags: {[key: string]: string};
    displayName: string;
    externalId: string;
    externalResourceId: string;
    freeformTags: {[key: string]: string};
    hostName: string;
    id: string;
    license: string;
    managementAgentId: string;
    name: string;
    properties: outputs.GetStackMonitoringMonitoredResourcesMonitoredResourceCollectionItemProperty[];
    resourceCategory: string;
    resourceTimeZone: string;
    sourceType: string;
    state: string;
    systemTags: {[key: string]: string};
    tenantId: string;
    timeCreated: string;
    timeUpdated: string;
    type: string;
}

export interface GetStackMonitoringMonitoredResourcesMonitoredResourceCollectionItemAdditionalAlias {
    credentials: outputs.GetStackMonitoringMonitoredResourcesMonitoredResourceCollectionItemAdditionalAliasCredential[];
    name: string;
    source: string;
}

export interface GetStackMonitoringMonitoredResourcesMonitoredResourceCollectionItemAdditionalAliasCredential {
    name: string;
    service: string;
    source: string;
}

export interface GetStackMonitoringMonitoredResourcesMonitoredResourceCollectionItemAdditionalCredential {
    credentialType: string;
    description: string;
    keyId: string;
    name: string;
    properties: outputs.GetStackMonitoringMonitoredResourcesMonitoredResourceCollectionItemAdditionalCredentialProperty[];
    source: string;
    type: string;
}

export interface GetStackMonitoringMonitoredResourcesMonitoredResourceCollectionItemAdditionalCredentialProperty {
    name: string;
    value: string;
}

export interface GetStackMonitoringMonitoredResourcesMonitoredResourceCollectionItemAlias {
    credentials: outputs.GetStackMonitoringMonitoredResourcesMonitoredResourceCollectionItemAliasCredential[];
    name: string;
    source: string;
}

export interface GetStackMonitoringMonitoredResourcesMonitoredResourceCollectionItemAliasCredential {
    name: string;
    service: string;
    source: string;
}

export interface GetStackMonitoringMonitoredResourcesMonitoredResourceCollectionItemCredential {
    credentialType: string;
    description: string;
    keyId: string;
    name: string;
    properties: outputs.GetStackMonitoringMonitoredResourcesMonitoredResourceCollectionItemCredentialProperty[];
    source: string;
    type: string;
}

export interface GetStackMonitoringMonitoredResourcesMonitoredResourceCollectionItemCredentialProperty {
    name: string;
    value: string;
}

export interface GetStackMonitoringMonitoredResourcesMonitoredResourceCollectionItemDatabaseConnectionDetail {
    connectorId: string;
    dbId: string;
    dbUniqueName: string;
    port: number;
    protocol: string;
    serviceName: string;
    sslSecretId: string;
}

export interface GetStackMonitoringMonitoredResourcesMonitoredResourceCollectionItemProperty {
    name: string;
    value: string;
}

export interface GetStackMonitoringProcessSetSpecification {
    items: outputs.GetStackMonitoringProcessSetSpecificationItem[];
}

export interface GetStackMonitoringProcessSetSpecificationItem {
    label: string;
    processCommand: string;
    processLineRegexPattern: string;
    processUser: string;
}

export interface GetStackMonitoringProcessSetsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetStackMonitoringProcessSetsProcessSetCollection {
    items: outputs.GetStackMonitoringProcessSetsProcessSetCollectionItem[];
}

export interface GetStackMonitoringProcessSetsProcessSetCollectionItem {
    compartmentId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    revision: string;
    specifications: outputs.GetStackMonitoringProcessSetsProcessSetCollectionItemSpecification[];
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
}

export interface GetStackMonitoringProcessSetsProcessSetCollectionItemSpecification {
    items: outputs.GetStackMonitoringProcessSetsProcessSetCollectionItemSpecificationItem[];
}

export interface GetStackMonitoringProcessSetsProcessSetCollectionItemSpecificationItem {
    label: string;
    processCommand: string;
    processLineRegexPattern: string;
    processUser: string;
}

export interface GetStreamingConnectHarnessesConnectHarness {
    compartmentId: string;
    definedTags: {[key: string]: string};
    freeformTags: {[key: string]: string};
    id: string;
    lifecycleStateDetails: string;
    name: string;
    state: string;
    timeCreated: string;
}

export interface GetStreamingConnectHarnessesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetStreamingStreamPoolCustomEncryptionKey {
    keyState: string;
    kmsKeyId: string;
}

export interface GetStreamingStreamPoolKafkaSetting {
    autoCreateTopicsEnable: boolean;
    bootstrapServers: string;
    logRetentionHours: number;
    numPartitions: number;
}

export interface GetStreamingStreamPoolPrivateEndpointSetting {
    nsgIds: string[];
    privateEndpointIp: string;
    subnetId: string;
}

export interface GetStreamingStreamPoolsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetStreamingStreamPoolsStreamPool {
    compartmentId: string;
    customEncryptionKeys: outputs.GetStreamingStreamPoolsStreamPoolCustomEncryptionKey[];
    definedTags: {[key: string]: string};
    endpointFqdn: string;
    freeformTags: {[key: string]: string};
    id: string;
    isPrivate: boolean;
    kafkaSettings: outputs.GetStreamingStreamPoolsStreamPoolKafkaSetting[];
    lifecycleStateDetails: string;
    name: string;
    privateEndpointSettings: outputs.GetStreamingStreamPoolsStreamPoolPrivateEndpointSetting[];
    state: string;
    timeCreated: string;
}

export interface GetStreamingStreamPoolsStreamPoolCustomEncryptionKey {
    keyState: string;
    kmsKeyId: string;
}

export interface GetStreamingStreamPoolsStreamPoolKafkaSetting {
    autoCreateTopicsEnable: boolean;
    bootstrapServers: string;
    logRetentionHours: number;
    numPartitions: number;
}

export interface GetStreamingStreamPoolsStreamPoolPrivateEndpointSetting {
    nsgIds: string[];
    privateEndpointIp: string;
    subnetId: string;
}

export interface GetStreamingStreamsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetStreamingStreamsStream {
    compartmentId: string;
    definedTags: {[key: string]: string};
    freeformTags: {[key: string]: string};
    id: string;
    lifecycleStateDetails: string;
    messagesEndpoint: string;
    name: string;
    partitions: number;
    retentionInHours: number;
    state: string;
    streamPoolId: string;
    timeCreated: string;
}

export interface GetUsageProxyResourceQuotasFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetUsageProxyResourceQuotasResourceQuotumCollection {
    isAllowed: boolean;
    items: outputs.GetUsageProxyResourceQuotasResourceQuotumCollectionItem[];
}

export interface GetUsageProxyResourceQuotasResourceQuotumCollectionItem {
    affectedResource: string;
    balance: number;
    isAllowed: boolean;
    isDependency: boolean;
    isOverage: boolean;
    name: string;
    purchasedLimit: number;
    service: string;
}

export interface GetUsageProxyResourcesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetUsageProxyResourcesResourcesCollection {
    items: outputs.GetUsageProxyResourcesResourcesCollectionItem[];
}

export interface GetUsageProxyResourcesResourcesCollectionItem {
    childResources: string[];
    dailyUnitDisplayName: string;
    description: string;
    hourlyUnitDisplayName: string;
    instanceType: string;
    isPurchased: boolean;
    name: string;
    rawUnitDisplayName: string;
    servicename: string;
    skuses: outputs.GetUsageProxyResourcesResourcesCollectionItemSkus[];
    usageDataType: string;
}

export interface GetUsageProxyResourcesResourcesCollectionItemSkus {
    cloudCreditType: string;
    skuId: string;
    skuType: string;
}

export interface GetUsageProxySubscriptionProductItem {
    earnedRewards: number;
    isEligibleToEarnRewards: boolean;
    productName: string;
    productNumber: string;
    usageAmount: number;
}

export interface GetUsageProxySubscriptionProductsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetUsageProxySubscriptionProductsProductCollection {
    items: outputs.GetUsageProxySubscriptionProductsProductCollectionItem[];
}

export interface GetUsageProxySubscriptionProductsProductCollectionItem {
    items: outputs.GetUsageProxySubscriptionProductsProductCollectionItemItem[];
}

export interface GetUsageProxySubscriptionProductsProductCollectionItemItem {
    earnedRewards: number;
    isEligibleToEarnRewards: boolean;
    productName: string;
    productNumber: string;
    usageAmount: number;
}

export interface GetUsageProxySubscriptionRedeemableUserItem {
    emailId: string;
    firstName: string;
    lastName: string;
}

export interface GetUsageProxySubscriptionRedeemableUsersFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetUsageProxySubscriptionRedeemableUsersRedeemableUserCollection {
    items: outputs.GetUsageProxySubscriptionRedeemableUsersRedeemableUserCollectionItem[];
}

export interface GetUsageProxySubscriptionRedeemableUsersRedeemableUserCollectionItem {
    items: outputs.GetUsageProxySubscriptionRedeemableUsersRedeemableUserCollectionItemItem[];
    subscriptionId: string;
    tenancyId: string;
    userId: string;
}

export interface GetUsageProxySubscriptionRedeemableUsersRedeemableUserCollectionItemItem {
    emailId: string;
    firstName: string;
    lastName: string;
}

export interface GetUsageProxySubscriptionRedemptionItem {
    baseRewards: number;
    fxRate: number;
    invoiceCurrency: string;
    invoiceNumber: string;
    invoiceTotalAmount: number;
    redeemedRewards: number;
    redemptionCode: string;
    redemptionEmail: string;
    timeInvoiced: string;
    timeRedeemed: string;
}

export interface GetUsageProxySubscriptionRedemptionsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetUsageProxySubscriptionRedemptionsRedemptionCollection {
    items: outputs.GetUsageProxySubscriptionRedemptionsRedemptionCollectionItem[];
}

export interface GetUsageProxySubscriptionRedemptionsRedemptionCollectionItem {
    items: outputs.GetUsageProxySubscriptionRedemptionsRedemptionCollectionItemItem[];
}

export interface GetUsageProxySubscriptionRedemptionsRedemptionCollectionItemItem {
    baseRewards: number;
    fxRate: number;
    invoiceCurrency: string;
    invoiceNumber: string;
    invoiceTotalAmount: number;
    redeemedRewards: number;
    redemptionCode: string;
    redemptionEmail: string;
    timeInvoiced: string;
    timeRedeemed: string;
}

export interface GetUsageProxySubscriptionRewardItem {
    availableRewards: number;
    earnedRewards: number;
    eligibleUsageAmount: number;
    ineligibleUsageAmount: number;
    isManual: boolean;
    redeemedRewards: number;
    timeRewardsEarned: string;
    timeRewardsExpired: string;
    timeUsageEnded: string;
    timeUsageStarted: string;
    usageAmount: number;
    usagePeriodKey: string;
}

export interface GetUsageProxySubscriptionRewardSummary {
    currency: string;
    redemptionCode: string;
    rewardsRate: number;
    subscriptionId: string;
    tenancyId: string;
    totalRewardsAvailable: number;
}

export interface GetUsageProxySubscriptionRewardsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetUsageProxySubscriptionRewardsRewardCollection {
    items: outputs.GetUsageProxySubscriptionRewardsRewardCollectionItem[];
}

export interface GetUsageProxySubscriptionRewardsRewardCollectionItem {
    items: outputs.GetUsageProxySubscriptionRewardsRewardCollectionItemItem[];
    summaries: outputs.GetUsageProxySubscriptionRewardsRewardCollectionItemSummary[];
}

export interface GetUsageProxySubscriptionRewardsRewardCollectionItemItem {
    availableRewards: number;
    earnedRewards: number;
    eligibleUsageAmount: number;
    ineligibleUsageAmount: number;
    isManual: boolean;
    redeemedRewards: number;
    timeRewardsEarned: string;
    timeRewardsExpired: string;
    timeUsageEnded: string;
    timeUsageStarted: string;
    usageAmount: number;
    usagePeriodKey: string;
}

export interface GetUsageProxySubscriptionRewardsRewardCollectionItemSummary {
    currency: string;
    redemptionCode: string;
    rewardsRate: number;
    subscriptionId: string;
    tenancyId: string;
    totalRewardsAvailable: number;
}

export interface GetUsageProxyUsagelimitsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetUsageProxyUsagelimitsUsageLimitCollection {
    items: outputs.GetUsageProxyUsagelimitsUsageLimitCollectionItem[];
}

export interface GetUsageProxyUsagelimitsUsageLimitCollectionItem {
    action: string;
    alertLevel: number;
    createdBy: string;
    entitlementId: string;
    id: string;
    limit: string;
    limitType: string;
    maxHardLimit: string;
    modifiedBy: string;
    resourceName: string;
    serviceName: string;
    skuPartId: string;
    state: string;
    timeCreated: string;
    timeModified: string;
    valueType: string;
}

export interface GetVaultSecretRotationConfig {
    isScheduledRotationEnabled: boolean;
    rotationInterval: string;
    targetSystemDetails: outputs.GetVaultSecretRotationConfigTargetSystemDetail[];
}

export interface GetVaultSecretRotationConfigTargetSystemDetail {
    adbId: string;
    functionId: string;
    targetSystemType: string;
}

export interface GetVaultSecretSecretContent {
    content: string;
    contentType: string;
    name: string;
    stage: string;
}

export interface GetVaultSecretSecretRule {
    isEnforcedOnDeletedSecretVersions: boolean;
    isSecretContentRetrievalBlockedOnExpiry: boolean;
    ruleType: string;
    secretVersionExpiryInterval: string;
    timeOfAbsoluteExpiry: string;
}

export interface GetVaultSecretsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetVaultSecretsSecret {
    compartmentId: string;
    currentVersionNumber: string;
    definedTags: {[key: string]: string};
    description: string;
    freeformTags: {[key: string]: string};
    id: string;
    keyId: string;
    lastRotationTime: string;
    lifecycleDetails: string;
    metadata: {[key: string]: string};
    nextRotationTime: string;
    rotationConfigs: outputs.GetVaultSecretsSecretRotationConfig[];
    rotationStatus: string;
    secretContents: outputs.GetVaultSecretsSecretSecretContent[];
    secretName: string;
    secretRules: outputs.GetVaultSecretsSecretSecretRule[];
    state: string;
    timeCreated: string;
    timeOfCurrentVersionExpiry: string;
    timeOfDeletion: string;
    vaultId: string;
}

export interface GetVaultSecretsSecretRotationConfig {
    isScheduledRotationEnabled: boolean;
    rotationInterval: string;
    targetSystemDetails: outputs.GetVaultSecretsSecretRotationConfigTargetSystemDetail[];
}

export interface GetVaultSecretsSecretRotationConfigTargetSystemDetail {
    adbId: string;
    functionId: string;
    targetSystemType: string;
}

export interface GetVaultSecretsSecretSecretContent {
    content: string;
    contentType: string;
    name: string;
    stage: string;
}

export interface GetVaultSecretsSecretSecretRule {
    isEnforcedOnDeletedSecretVersions: boolean;
    isSecretContentRetrievalBlockedOnExpiry: boolean;
    ruleType: string;
    secretVersionExpiryInterval: string;
    timeOfAbsoluteExpiry: string;
}

export interface GetVbsInstVbsInstancesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetVbsInstVbsInstancesVbsInstanceSummaryCollection {
    items: outputs.GetVbsInstVbsInstancesVbsInstanceSummaryCollectionItem[];
}

export interface GetVbsInstVbsInstancesVbsInstanceSummaryCollectionItem {
    compartmentId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    idcsAccessToken: string;
    isResourceUsageAgreementGranted: boolean;
    lifecyleDetails: string;
    name: string;
    resourceCompartmentId: string;
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
    vbsAccessUrl: string;
}

export interface GetVisualBuilderVbInstanceAlternateCustomEndpoint {
    certificateSecretId: string;
    certificateSecretVersion: number;
    hostname: string;
}

export interface GetVisualBuilderVbInstanceApplicationsApplicationSummaryCollection {
    items: outputs.GetVisualBuilderVbInstanceApplicationsApplicationSummaryCollectionItem[];
}

export interface GetVisualBuilderVbInstanceApplicationsApplicationSummaryCollectionItem {
    id: string;
    projectId: string;
    state: string;
    version: string;
}

export interface GetVisualBuilderVbInstanceAttachment {
    isImplicit: boolean;
    targetId: string;
    targetInstanceUrl: string;
    targetRole: string;
    targetServiceType: string;
}

export interface GetVisualBuilderVbInstanceCustomEndpoint {
    certificateSecretId: string;
    certificateSecretVersion: number;
    hostname: string;
}

export interface GetVisualBuilderVbInstanceIdcsInfo {
    idcsAppDisplayName: string;
    idcsAppId: string;
    idcsAppLocationUrl: string;
    idcsAppName: string;
    instancePrimaryAudienceUrl: string;
}

export interface GetVisualBuilderVbInstancesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetVisualBuilderVbInstancesVbInstanceSummaryCollection {
    items: outputs.GetVisualBuilderVbInstancesVbInstanceSummaryCollectionItem[];
}

export interface GetVisualBuilderVbInstancesVbInstanceSummaryCollectionItem {
    alternateCustomEndpoints: outputs.GetVisualBuilderVbInstancesVbInstanceSummaryCollectionItemAlternateCustomEndpoint[];
    attachments: outputs.GetVisualBuilderVbInstancesVbInstanceSummaryCollectionItemAttachment[];
    compartmentId: string;
    consumptionModel: string;
    customEndpoints: outputs.GetVisualBuilderVbInstancesVbInstanceSummaryCollectionItemCustomEndpoint[];
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    idcsInfos: outputs.GetVisualBuilderVbInstancesVbInstanceSummaryCollectionItemIdcsInfo[];
    idcsOpenId: string;
    instanceUrl: string;
    isVisualBuilderEnabled: boolean;
    managementNatGatewayIp: string;
    managementVcnId: string;
    nodeCount: number;
    serviceNatGatewayIp: string;
    serviceVcnId: string;
    state: string;
    stateMessage: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
}

export interface GetVisualBuilderVbInstancesVbInstanceSummaryCollectionItemAlternateCustomEndpoint {
    certificateSecretId: string;
    certificateSecretVersion: number;
    hostname: string;
}

export interface GetVisualBuilderVbInstancesVbInstanceSummaryCollectionItemAttachment {
    isImplicit: boolean;
    targetId: string;
    targetInstanceUrl: string;
    targetRole: string;
    targetServiceType: string;
}

export interface GetVisualBuilderVbInstancesVbInstanceSummaryCollectionItemCustomEndpoint {
    certificateSecretId: string;
    certificateSecretVersion: number;
    hostname: string;
}

export interface GetVisualBuilderVbInstancesVbInstanceSummaryCollectionItemIdcsInfo {
    idcsAppDisplayName: string;
    idcsAppId: string;
    idcsAppLocationUrl: string;
    idcsAppName: string;
    instancePrimaryAudienceUrl: string;
}

export interface GetVnMonitoringPathAnalyzerTestDestinationEndpoint {
    address: string;
    instanceId: string;
    listenerId: string;
    loadBalancerId: string;
    networkLoadBalancerId: string;
    state: string;
    subnetId: string;
    type: string;
    vlanId: string;
    vnicId: string;
}

export interface GetVnMonitoringPathAnalyzerTestProtocolParameter {
    destinationPort: number;
    icmpCode: number;
    icmpType: number;
    sourcePort: number;
    type: string;
}

export interface GetVnMonitoringPathAnalyzerTestQueryOption {
    isBiDirectionalAnalysis: boolean;
}

export interface GetVnMonitoringPathAnalyzerTestSourceEndpoint {
    address: string;
    instanceId: string;
    listenerId: string;
    loadBalancerId: string;
    networkLoadBalancerId: string;
    state: string;
    subnetId: string;
    type: string;
    vlanId: string;
    vnicId: string;
}

export interface GetVnMonitoringPathAnalyzerTestsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetVnMonitoringPathAnalyzerTestsPathAnalyzerTestCollection {
    items: outputs.GetVnMonitoringPathAnalyzerTestsPathAnalyzerTestCollectionItem[];
}

export interface GetVnMonitoringPathAnalyzerTestsPathAnalyzerTestCollectionItem {
    compartmentId: string;
    definedTags: {[key: string]: string};
    destinationEndpoints: outputs.GetVnMonitoringPathAnalyzerTestsPathAnalyzerTestCollectionItemDestinationEndpoint[];
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    protocol: number;
    protocolParameters: outputs.GetVnMonitoringPathAnalyzerTestsPathAnalyzerTestCollectionItemProtocolParameter[];
    queryOptions: outputs.GetVnMonitoringPathAnalyzerTestsPathAnalyzerTestCollectionItemQueryOption[];
    sourceEndpoints: outputs.GetVnMonitoringPathAnalyzerTestsPathAnalyzerTestCollectionItemSourceEndpoint[];
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
}

export interface GetVnMonitoringPathAnalyzerTestsPathAnalyzerTestCollectionItemDestinationEndpoint {
    address: string;
    instanceId: string;
    listenerId: string;
    loadBalancerId: string;
    networkLoadBalancerId: string;
    state: string;
    subnetId: string;
    type: string;
    vlanId: string;
    vnicId: string;
}

export interface GetVnMonitoringPathAnalyzerTestsPathAnalyzerTestCollectionItemProtocolParameter {
    destinationPort: number;
    icmpCode: number;
    icmpType: number;
    sourcePort: number;
    type: string;
}

export interface GetVnMonitoringPathAnalyzerTestsPathAnalyzerTestCollectionItemQueryOption {
    isBiDirectionalAnalysis: boolean;
}

export interface GetVnMonitoringPathAnalyzerTestsPathAnalyzerTestCollectionItemSourceEndpoint {
    address: string;
    instanceId: string;
    listenerId: string;
    loadBalancerId: string;
    networkLoadBalancerId: string;
    state: string;
    subnetId: string;
    type: string;
    vlanId: string;
    vnicId: string;
}

export interface GetVulnerabilityScanningContainerScanRecipeScanSetting {
    scanLevel: string;
}

export interface GetVulnerabilityScanningContainerScanRecipesContainerScanRecipeSummaryCollection {
    items: outputs.GetVulnerabilityScanningContainerScanRecipesContainerScanRecipeSummaryCollectionItem[];
}

export interface GetVulnerabilityScanningContainerScanRecipesContainerScanRecipeSummaryCollectionItem {
    compartmentId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    imageCount: number;
    scanSettings: outputs.GetVulnerabilityScanningContainerScanRecipesContainerScanRecipeSummaryCollectionItemScanSetting[];
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
}

export interface GetVulnerabilityScanningContainerScanRecipesContainerScanRecipeSummaryCollectionItemScanSetting {
    scanLevel: string;
}

export interface GetVulnerabilityScanningContainerScanRecipesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetVulnerabilityScanningContainerScanTargetTargetRegistry {
    compartmentId: string;
    repositories: string[];
    type: string;
    url: string;
}

export interface GetVulnerabilityScanningContainerScanTargetsContainerScanTargetSummaryCollection {
    items: outputs.GetVulnerabilityScanningContainerScanTargetsContainerScanTargetSummaryCollectionItem[];
}

export interface GetVulnerabilityScanningContainerScanTargetsContainerScanTargetSummaryCollectionItem {
    compartmentId: string;
    containerScanRecipeId: string;
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    state: string;
    systemTags: {[key: string]: string};
    targetRegistries: outputs.GetVulnerabilityScanningContainerScanTargetsContainerScanTargetSummaryCollectionItemTargetRegistry[];
    timeCreated: string;
    timeUpdated: string;
}

export interface GetVulnerabilityScanningContainerScanTargetsContainerScanTargetSummaryCollectionItemTargetRegistry {
    compartmentId: string;
    repositories: string[];
    type: string;
    url: string;
}

export interface GetVulnerabilityScanningContainerScanTargetsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetVulnerabilityScanningHostScanRecipeAgentSetting {
    agentConfigurations: outputs.GetVulnerabilityScanningHostScanRecipeAgentSettingAgentConfiguration[];
    scanLevel: string;
}

export interface GetVulnerabilityScanningHostScanRecipeAgentSettingAgentConfiguration {
    cisBenchmarkSettings: outputs.GetVulnerabilityScanningHostScanRecipeAgentSettingAgentConfigurationCisBenchmarkSetting[];
    endpointProtectionSettings: outputs.GetVulnerabilityScanningHostScanRecipeAgentSettingAgentConfigurationEndpointProtectionSetting[];
    shouldUnInstall: boolean;
    vaultSecretId: string;
    vendor: string;
    vendorType: string;
}

export interface GetVulnerabilityScanningHostScanRecipeAgentSettingAgentConfigurationCisBenchmarkSetting {
    scanLevel: string;
}

export interface GetVulnerabilityScanningHostScanRecipeAgentSettingAgentConfigurationEndpointProtectionSetting {
    scanLevel: string;
}

export interface GetVulnerabilityScanningHostScanRecipeApplicationSetting {
    applicationScanRecurrence: string;
    foldersToScans: outputs.GetVulnerabilityScanningHostScanRecipeApplicationSettingFoldersToScan[];
    isEnabled: boolean;
}

export interface GetVulnerabilityScanningHostScanRecipeApplicationSettingFoldersToScan {
    folder: string;
    operatingsystem: string;
}

export interface GetVulnerabilityScanningHostScanRecipePortSetting {
    scanLevel: string;
}

export interface GetVulnerabilityScanningHostScanRecipeSchedule {
    dayOfWeek: string;
    type: string;
}

export interface GetVulnerabilityScanningHostScanRecipesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetVulnerabilityScanningHostScanRecipesHostScanRecipeSummaryCollection {
    items: outputs.GetVulnerabilityScanningHostScanRecipesHostScanRecipeSummaryCollectionItem[];
}

export interface GetVulnerabilityScanningHostScanRecipesHostScanRecipeSummaryCollectionItem {
    agentSettings: outputs.GetVulnerabilityScanningHostScanRecipesHostScanRecipeSummaryCollectionItemAgentSetting[];
    applicationSettings: outputs.GetVulnerabilityScanningHostScanRecipesHostScanRecipeSummaryCollectionItemApplicationSetting[];
    compartmentId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    portSettings: outputs.GetVulnerabilityScanningHostScanRecipesHostScanRecipeSummaryCollectionItemPortSetting[];
    schedules: outputs.GetVulnerabilityScanningHostScanRecipesHostScanRecipeSummaryCollectionItemSchedule[];
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
}

export interface GetVulnerabilityScanningHostScanRecipesHostScanRecipeSummaryCollectionItemAgentSetting {
    agentConfigurations: outputs.GetVulnerabilityScanningHostScanRecipesHostScanRecipeSummaryCollectionItemAgentSettingAgentConfiguration[];
    scanLevel: string;
}

export interface GetVulnerabilityScanningHostScanRecipesHostScanRecipeSummaryCollectionItemAgentSettingAgentConfiguration {
    cisBenchmarkSettings: outputs.GetVulnerabilityScanningHostScanRecipesHostScanRecipeSummaryCollectionItemAgentSettingAgentConfigurationCisBenchmarkSetting[];
    endpointProtectionSettings: outputs.GetVulnerabilityScanningHostScanRecipesHostScanRecipeSummaryCollectionItemAgentSettingAgentConfigurationEndpointProtectionSetting[];
    shouldUnInstall: boolean;
    vaultSecretId: string;
    vendor: string;
    vendorType: string;
}

export interface GetVulnerabilityScanningHostScanRecipesHostScanRecipeSummaryCollectionItemAgentSettingAgentConfigurationCisBenchmarkSetting {
    scanLevel: string;
}

export interface GetVulnerabilityScanningHostScanRecipesHostScanRecipeSummaryCollectionItemAgentSettingAgentConfigurationEndpointProtectionSetting {
    scanLevel: string;
}

export interface GetVulnerabilityScanningHostScanRecipesHostScanRecipeSummaryCollectionItemApplicationSetting {
    applicationScanRecurrence: string;
    foldersToScans: outputs.GetVulnerabilityScanningHostScanRecipesHostScanRecipeSummaryCollectionItemApplicationSettingFoldersToScan[];
    isEnabled: boolean;
}

export interface GetVulnerabilityScanningHostScanRecipesHostScanRecipeSummaryCollectionItemApplicationSettingFoldersToScan {
    folder: string;
    operatingsystem: string;
}

export interface GetVulnerabilityScanningHostScanRecipesHostScanRecipeSummaryCollectionItemPortSetting {
    scanLevel: string;
}

export interface GetVulnerabilityScanningHostScanRecipesHostScanRecipeSummaryCollectionItemSchedule {
    dayOfWeek: string;
    type: string;
}

export interface GetVulnerabilityScanningHostScanTargetErrorsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetVulnerabilityScanningHostScanTargetErrorsHostScanTargetErrorSummaryCollection {
    items: outputs.GetVulnerabilityScanningHostScanTargetErrorsHostScanTargetErrorSummaryCollectionItem[];
}

export interface GetVulnerabilityScanningHostScanTargetErrorsHostScanTargetErrorSummaryCollectionItem {
    items: outputs.GetVulnerabilityScanningHostScanTargetErrorsHostScanTargetErrorSummaryCollectionItemItem[];
}

export interface GetVulnerabilityScanningHostScanTargetErrorsHostScanTargetErrorSummaryCollectionItemItem {
    definedTags: {[key: string]: string};
    errorCode: string;
    freeformTags: {[key: string]: string};
    instanceId: string;
    message: string;
    state: string;
    systemTags: {[key: string]: string};
    task: string;
    timeUpdated: string;
    vendor: string;
}

export interface GetVulnerabilityScanningHostScanTargetsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetVulnerabilityScanningHostScanTargetsHostScanTargetSummaryCollection {
    items: outputs.GetVulnerabilityScanningHostScanTargetsHostScanTargetSummaryCollectionItem[];
}

export interface GetVulnerabilityScanningHostScanTargetsHostScanTargetSummaryCollectionItem {
    compartmentId: string;
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    freeformTags: {[key: string]: string};
    hostScanRecipeId: string;
    id: string;
    instanceIds: string[];
    state: string;
    systemTags: {[key: string]: string};
    targetCompartmentId: string;
    timeCreated: string;
    timeUpdated: string;
}

export interface GetWaaWebAppAccelerationPoliciesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetWaaWebAppAccelerationPoliciesWebAppAccelerationPolicyCollection {
    items: outputs.GetWaaWebAppAccelerationPoliciesWebAppAccelerationPolicyCollectionItem[];
}

export interface GetWaaWebAppAccelerationPoliciesWebAppAccelerationPolicyCollectionItem {
    compartmentId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    lifecycleDetails: string;
    responseCachingPolicies: outputs.GetWaaWebAppAccelerationPoliciesWebAppAccelerationPolicyCollectionItemResponseCachingPolicy[];
    responseCompressionPolicies: outputs.GetWaaWebAppAccelerationPoliciesWebAppAccelerationPolicyCollectionItemResponseCompressionPolicy[];
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
}

export interface GetWaaWebAppAccelerationPoliciesWebAppAccelerationPolicyCollectionItemResponseCachingPolicy {
    isResponseHeaderBasedCachingEnabled: boolean;
}

export interface GetWaaWebAppAccelerationPoliciesWebAppAccelerationPolicyCollectionItemResponseCompressionPolicy {
    gzipCompressions: outputs.GetWaaWebAppAccelerationPoliciesWebAppAccelerationPolicyCollectionItemResponseCompressionPolicyGzipCompression[];
}

export interface GetWaaWebAppAccelerationPoliciesWebAppAccelerationPolicyCollectionItemResponseCompressionPolicyGzipCompression {
    isEnabled: boolean;
}

export interface GetWaaWebAppAccelerationPolicyResponseCachingPolicy {
    isResponseHeaderBasedCachingEnabled: boolean;
}

export interface GetWaaWebAppAccelerationPolicyResponseCompressionPolicy {
    gzipCompressions: outputs.GetWaaWebAppAccelerationPolicyResponseCompressionPolicyGzipCompression[];
}

export interface GetWaaWebAppAccelerationPolicyResponseCompressionPolicyGzipCompression {
    isEnabled: boolean;
}

export interface GetWaaWebAppAccelerationsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetWaaWebAppAccelerationsWebAppAccelerationCollection {
    items: outputs.GetWaaWebAppAccelerationsWebAppAccelerationCollectionItem[];
}

export interface GetWaaWebAppAccelerationsWebAppAccelerationCollectionItem {
    backendType: string;
    compartmentId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    lifecycleDetails: string;
    loadBalancerId: string;
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
    webAppAccelerationPolicyId: string;
}

export interface GetWaasAddressListsAddressList {
    addressCount: number;
    addresses: string[];
    compartmentId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    state: string;
    timeCreated: string;
}

export interface GetWaasAddressListsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetWaasCertificateExtension {
    isCritical: boolean;
    name: string;
    value: string;
}

export interface GetWaasCertificateIssuerName {
    commonName: string;
    country: string;
    emailAddress: string;
    locality: string;
    organization: string;
    organizationalUnit: string;
    stateProvince: string;
}

export interface GetWaasCertificatePublicKeyInfo {
    algorithm: string;
    exponent: number;
    keySize: number;
}

export interface GetWaasCertificateSubjectName {
    commonName: string;
    country: string;
    emailAddress: string;
    locality: string;
    organization: string;
    organizationalUnit: string;
    stateProvince: string;
}

export interface GetWaasCertificatesCertificate {
    certificateData: string;
    compartmentId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    extensions: outputs.GetWaasCertificatesCertificateExtension[];
    freeformTags: {[key: string]: string};
    id: string;
    isTrustVerificationDisabled: boolean;
    issuedBy: string;
    issuerNames: outputs.GetWaasCertificatesCertificateIssuerName[];
    privateKeyData: string;
    publicKeyInfos: outputs.GetWaasCertificatesCertificatePublicKeyInfo[];
    serialNumber: string;
    signatureAlgorithm: string;
    state: string;
    subjectNames: outputs.GetWaasCertificatesCertificateSubjectName[];
    timeCreated: string;
    timeNotValidAfter: string;
    timeNotValidBefore: string;
    version: number;
}

export interface GetWaasCertificatesCertificateExtension {
    isCritical: boolean;
    name: string;
    value: string;
}

export interface GetWaasCertificatesCertificateIssuerName {
    commonName: string;
    country: string;
    emailAddress: string;
    locality: string;
    organization: string;
    organizationalUnit: string;
    stateProvince: string;
}

export interface GetWaasCertificatesCertificatePublicKeyInfo {
    algorithm: string;
    exponent: number;
    keySize: number;
}

export interface GetWaasCertificatesCertificateSubjectName {
    commonName: string;
    country: string;
    emailAddress: string;
    locality: string;
    organization: string;
    organizationalUnit: string;
    stateProvince: string;
}

export interface GetWaasCertificatesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetWaasCustomProtectionRulesCustomProtectionRule {
    compartmentId: string;
    definedTags: {[key: string]: string};
    description: string;
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    modSecurityRuleIds: string[];
    state: string;
    template: string;
    timeCreated: string;
}

export interface GetWaasCustomProtectionRulesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetWaasEdgeSubnetsEdgeSubnet {
    cidr: string;
    region: string;
    timeModified: string;
}

export interface GetWaasEdgeSubnetsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetWaasHttpRedirectTarget {
    host: string;
    path: string;
    port: number;
    protocol: string;
    query: string;
}

export interface GetWaasHttpRedirectsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetWaasHttpRedirectsHttpRedirect {
    compartmentId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    domain: string;
    freeformTags: {[key: string]: string};
    id: string;
    responseCode: number;
    state: string;
    targets: outputs.GetWaasHttpRedirectsHttpRedirectTarget[];
    timeCreated: string;
}

export interface GetWaasHttpRedirectsHttpRedirectTarget {
    host: string;
    path: string;
    port: number;
    protocol: string;
    query: string;
}

export interface GetWaasProtectionRuleExclusion {
    exclusions: string[];
    target: string;
}

export interface GetWaasProtectionRulesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetWaasProtectionRulesProtectionRule {
    action: string;
    description: string;
    exclusions: outputs.GetWaasProtectionRulesProtectionRuleExclusion[];
    key: string;
    labels: string[];
    modSecurityRuleIds: string[];
    name: string;
    waasPolicyId: string;
}

export interface GetWaasProtectionRulesProtectionRuleExclusion {
    exclusions: string[];
    target: string;
}

export interface GetWaasWaasPoliciesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetWaasWaasPoliciesWaasPolicy {
    additionalDomains: string[];
    cname: string;
    compartmentId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    domain: string;
    freeformTags: {[key: string]: string};
    id: string;
    originGroups: outputs.GetWaasWaasPoliciesWaasPolicyOriginGroup[];
    origins: outputs.GetWaasWaasPoliciesWaasPolicyOrigin[];
    policyConfigs: outputs.GetWaasWaasPoliciesWaasPolicyPolicyConfig[];
    state: string;
    timeCreated: string;
    wafConfigs: outputs.GetWaasWaasPoliciesWaasPolicyWafConfig[];
}

export interface GetWaasWaasPoliciesWaasPolicyOrigin {
    customHeaders: outputs.GetWaasWaasPoliciesWaasPolicyOriginCustomHeader[];
    httpPort: number;
    httpsPort: number;
    label: string;
    uri: string;
}

export interface GetWaasWaasPoliciesWaasPolicyOriginCustomHeader {
    name: string;
    value: string;
}

export interface GetWaasWaasPoliciesWaasPolicyOriginGroup {
    label: string;
    originGroups: outputs.GetWaasWaasPoliciesWaasPolicyOriginGroupOriginGroup[];
}

export interface GetWaasWaasPoliciesWaasPolicyOriginGroupOriginGroup {
    origin: string;
    weight: number;
}

export interface GetWaasWaasPoliciesWaasPolicyPolicyConfig {
    certificateId: string;
    cipherGroup: string;
    clientAddressHeader: string;
    healthChecks: outputs.GetWaasWaasPoliciesWaasPolicyPolicyConfigHealthCheck[];
    isBehindCdn: boolean;
    isCacheControlRespected: boolean;
    isHttpsEnabled: boolean;
    isHttpsForced: boolean;
    isOriginCompressionEnabled: boolean;
    isResponseBufferingEnabled: boolean;
    isSniEnabled: boolean;
    loadBalancingMethods: outputs.GetWaasWaasPoliciesWaasPolicyPolicyConfigLoadBalancingMethod[];
    tlsProtocols: string[];
    websocketPathPrefixes: string[];
}

export interface GetWaasWaasPoliciesWaasPolicyPolicyConfigHealthCheck {
    expectedResponseCodeGroups: string[];
    expectedResponseText: string;
    headers: {[key: string]: string};
    healthyThreshold: number;
    intervalInSeconds: number;
    isEnabled: boolean;
    isResponseTextCheckEnabled: boolean;
    method: string;
    path: string;
    timeoutInSeconds: number;
    unhealthyThreshold: number;
}

export interface GetWaasWaasPoliciesWaasPolicyPolicyConfigLoadBalancingMethod {
    domain: string;
    expirationTimeInSeconds: number;
    method: string;
    name: string;
}

export interface GetWaasWaasPoliciesWaasPolicyWafConfig {
    accessRules: outputs.GetWaasWaasPoliciesWaasPolicyWafConfigAccessRule[];
    addressRateLimitings: outputs.GetWaasWaasPoliciesWaasPolicyWafConfigAddressRateLimiting[];
    cachingRules: outputs.GetWaasWaasPoliciesWaasPolicyWafConfigCachingRule[];
    captchas: outputs.GetWaasWaasPoliciesWaasPolicyWafConfigCaptcha[];
    customProtectionRules: outputs.GetWaasWaasPoliciesWaasPolicyWafConfigCustomProtectionRule[];
    deviceFingerprintChallenges: outputs.GetWaasWaasPoliciesWaasPolicyWafConfigDeviceFingerprintChallenge[];
    humanInteractionChallenges: outputs.GetWaasWaasPoliciesWaasPolicyWafConfigHumanInteractionChallenge[];
    jsChallenges: outputs.GetWaasWaasPoliciesWaasPolicyWafConfigJsChallenge[];
    origin: string;
    originGroups: string[];
    protectionSettings: outputs.GetWaasWaasPoliciesWaasPolicyWafConfigProtectionSetting[];
    whitelists: outputs.GetWaasWaasPoliciesWaasPolicyWafConfigWhitelist[];
}

export interface GetWaasWaasPoliciesWaasPolicyWafConfigAccessRule {
    action: string;
    blockAction: string;
    blockErrorPageCode: string;
    blockErrorPageDescription: string;
    blockErrorPageMessage: string;
    blockResponseCode: number;
    bypassChallenges: string[];
    captchaFooter: string;
    captchaHeader: string;
    captchaSubmitLabel: string;
    captchaTitle: string;
    criterias: outputs.GetWaasWaasPoliciesWaasPolicyWafConfigAccessRuleCriteria[];
    name: string;
    redirectResponseCode: string;
    redirectUrl: string;
    responseHeaderManipulations: outputs.GetWaasWaasPoliciesWaasPolicyWafConfigAccessRuleResponseHeaderManipulation[];
}

export interface GetWaasWaasPoliciesWaasPolicyWafConfigAccessRuleCriteria {
    condition: string;
    isCaseSensitive: boolean;
    value: string;
}

export interface GetWaasWaasPoliciesWaasPolicyWafConfigAccessRuleResponseHeaderManipulation {
    action: string;
    header: string;
    value: string;
}

export interface GetWaasWaasPoliciesWaasPolicyWafConfigAddressRateLimiting {
    allowedRatePerAddress: number;
    blockResponseCode: number;
    isEnabled: boolean;
    maxDelayedCountPerAddress: number;
}

export interface GetWaasWaasPoliciesWaasPolicyWafConfigCachingRule {
    action: string;
    cachingDuration: string;
    clientCachingDuration: string;
    criterias: outputs.GetWaasWaasPoliciesWaasPolicyWafConfigCachingRuleCriteria[];
    isClientCachingEnabled: boolean;
    key: string;
    name: string;
}

export interface GetWaasWaasPoliciesWaasPolicyWafConfigCachingRuleCriteria {
    condition: string;
    value: string;
}

export interface GetWaasWaasPoliciesWaasPolicyWafConfigCaptcha {
    failureMessage: string;
    footerText: string;
    headerText: string;
    sessionExpirationInSeconds: number;
    submitLabel: string;
    title: string;
    url: string;
}

export interface GetWaasWaasPoliciesWaasPolicyWafConfigCustomProtectionRule {
    action: string;
    exclusions: outputs.GetWaasWaasPoliciesWaasPolicyWafConfigCustomProtectionRuleExclusion[];
    id: string;
}

export interface GetWaasWaasPoliciesWaasPolicyWafConfigCustomProtectionRuleExclusion {
    exclusions: string[];
    target: string;
}

export interface GetWaasWaasPoliciesWaasPolicyWafConfigDeviceFingerprintChallenge {
    action: string;
    actionExpirationInSeconds: number;
    challengeSettings: outputs.GetWaasWaasPoliciesWaasPolicyWafConfigDeviceFingerprintChallengeChallengeSetting[];
    failureThreshold: number;
    failureThresholdExpirationInSeconds: number;
    isEnabled: boolean;
    maxAddressCount: number;
    maxAddressCountExpirationInSeconds: number;
}

export interface GetWaasWaasPoliciesWaasPolicyWafConfigDeviceFingerprintChallengeChallengeSetting {
    blockAction: string;
    blockErrorPageCode: string;
    blockErrorPageDescription: string;
    blockErrorPageMessage: string;
    blockResponseCode: number;
    captchaFooter: string;
    captchaHeader: string;
    captchaSubmitLabel: string;
    captchaTitle: string;
}

export interface GetWaasWaasPoliciesWaasPolicyWafConfigHumanInteractionChallenge {
    action: string;
    actionExpirationInSeconds: number;
    challengeSettings: outputs.GetWaasWaasPoliciesWaasPolicyWafConfigHumanInteractionChallengeChallengeSetting[];
    failureThreshold: number;
    failureThresholdExpirationInSeconds: number;
    interactionThreshold: number;
    isEnabled: boolean;
    isNatEnabled: boolean;
    recordingPeriodInSeconds: number;
    setHttpHeaders: outputs.GetWaasWaasPoliciesWaasPolicyWafConfigHumanInteractionChallengeSetHttpHeader[];
}

export interface GetWaasWaasPoliciesWaasPolicyWafConfigHumanInteractionChallengeChallengeSetting {
    blockAction: string;
    blockErrorPageCode: string;
    blockErrorPageDescription: string;
    blockErrorPageMessage: string;
    blockResponseCode: number;
    captchaFooter: string;
    captchaHeader: string;
    captchaSubmitLabel: string;
    captchaTitle: string;
}

export interface GetWaasWaasPoliciesWaasPolicyWafConfigHumanInteractionChallengeSetHttpHeader {
    name: string;
    value: string;
}

export interface GetWaasWaasPoliciesWaasPolicyWafConfigJsChallenge {
    action: string;
    actionExpirationInSeconds: number;
    areRedirectsChallenged: boolean;
    challengeSettings: outputs.GetWaasWaasPoliciesWaasPolicyWafConfigJsChallengeChallengeSetting[];
    criterias: outputs.GetWaasWaasPoliciesWaasPolicyWafConfigJsChallengeCriteria[];
    failureThreshold: number;
    isEnabled: boolean;
    isNatEnabled: boolean;
    setHttpHeaders: outputs.GetWaasWaasPoliciesWaasPolicyWafConfigJsChallengeSetHttpHeader[];
}

export interface GetWaasWaasPoliciesWaasPolicyWafConfigJsChallengeChallengeSetting {
    blockAction: string;
    blockErrorPageCode: string;
    blockErrorPageDescription: string;
    blockErrorPageMessage: string;
    blockResponseCode: number;
    captchaFooter: string;
    captchaHeader: string;
    captchaSubmitLabel: string;
    captchaTitle: string;
}

export interface GetWaasWaasPoliciesWaasPolicyWafConfigJsChallengeCriteria {
    condition: string;
    isCaseSensitive: boolean;
    value: string;
}

export interface GetWaasWaasPoliciesWaasPolicyWafConfigJsChallengeSetHttpHeader {
    name: string;
    value: string;
}

export interface GetWaasWaasPoliciesWaasPolicyWafConfigProtectionSetting {
    allowedHttpMethods: string[];
    blockAction: string;
    blockErrorPageCode: string;
    blockErrorPageDescription: string;
    blockErrorPageMessage: string;
    blockResponseCode: number;
    isResponseInspected: boolean;
    maxArgumentCount: number;
    maxNameLengthPerArgument: number;
    maxResponseSizeInKiB: number;
    maxTotalNameLengthOfArguments: number;
    mediaTypes: string[];
    recommendationsPeriodInDays: number;
}

export interface GetWaasWaasPoliciesWaasPolicyWafConfigWhitelist {
    addressLists: string[];
    addresses: string[];
    name: string;
}

export interface GetWaasWaasPolicyOrigin {
    customHeaders: outputs.GetWaasWaasPolicyOriginCustomHeader[];
    httpPort: number;
    httpsPort: number;
    label: string;
    uri: string;
}

export interface GetWaasWaasPolicyOriginCustomHeader {
    name: string;
    value: string;
}

export interface GetWaasWaasPolicyOriginGroup {
    label: string;
    originGroups: outputs.GetWaasWaasPolicyOriginGroupOriginGroup[];
}

export interface GetWaasWaasPolicyOriginGroupOriginGroup {
    origin: string;
    weight: number;
}

export interface GetWaasWaasPolicyPolicyConfig {
    certificateId: string;
    cipherGroup: string;
    clientAddressHeader: string;
    healthChecks: outputs.GetWaasWaasPolicyPolicyConfigHealthCheck[];
    isBehindCdn: boolean;
    isCacheControlRespected: boolean;
    isHttpsEnabled: boolean;
    isHttpsForced: boolean;
    isOriginCompressionEnabled: boolean;
    isResponseBufferingEnabled: boolean;
    isSniEnabled: boolean;
    loadBalancingMethods: outputs.GetWaasWaasPolicyPolicyConfigLoadBalancingMethod[];
    tlsProtocols: string[];
    websocketPathPrefixes: string[];
}

export interface GetWaasWaasPolicyPolicyConfigHealthCheck {
    expectedResponseCodeGroups: string[];
    expectedResponseText: string;
    headers: {[key: string]: string};
    healthyThreshold: number;
    intervalInSeconds: number;
    isEnabled: boolean;
    isResponseTextCheckEnabled: boolean;
    method: string;
    path: string;
    timeoutInSeconds: number;
    unhealthyThreshold: number;
}

export interface GetWaasWaasPolicyPolicyConfigLoadBalancingMethod {
    domain: string;
    expirationTimeInSeconds: number;
    method: string;
    name: string;
}

export interface GetWaasWaasPolicyWafConfig {
    accessRules: outputs.GetWaasWaasPolicyWafConfigAccessRule[];
    addressRateLimitings: outputs.GetWaasWaasPolicyWafConfigAddressRateLimiting[];
    cachingRules: outputs.GetWaasWaasPolicyWafConfigCachingRule[];
    captchas: outputs.GetWaasWaasPolicyWafConfigCaptcha[];
    customProtectionRules: outputs.GetWaasWaasPolicyWafConfigCustomProtectionRule[];
    deviceFingerprintChallenges: outputs.GetWaasWaasPolicyWafConfigDeviceFingerprintChallenge[];
    humanInteractionChallenges: outputs.GetWaasWaasPolicyWafConfigHumanInteractionChallenge[];
    jsChallenges: outputs.GetWaasWaasPolicyWafConfigJsChallenge[];
    origin: string;
    originGroups: string[];
    protectionSettings: outputs.GetWaasWaasPolicyWafConfigProtectionSetting[];
    whitelists: outputs.GetWaasWaasPolicyWafConfigWhitelist[];
}

export interface GetWaasWaasPolicyWafConfigAccessRule {
    action: string;
    blockAction: string;
    blockErrorPageCode: string;
    blockErrorPageDescription: string;
    blockErrorPageMessage: string;
    blockResponseCode: number;
    bypassChallenges: string[];
    captchaFooter: string;
    captchaHeader: string;
    captchaSubmitLabel: string;
    captchaTitle: string;
    criterias: outputs.GetWaasWaasPolicyWafConfigAccessRuleCriteria[];
    name: string;
    redirectResponseCode: string;
    redirectUrl: string;
    responseHeaderManipulations: outputs.GetWaasWaasPolicyWafConfigAccessRuleResponseHeaderManipulation[];
}

export interface GetWaasWaasPolicyWafConfigAccessRuleCriteria {
    condition: string;
    isCaseSensitive: boolean;
    value: string;
}

export interface GetWaasWaasPolicyWafConfigAccessRuleResponseHeaderManipulation {
    action: string;
    header: string;
    value: string;
}

export interface GetWaasWaasPolicyWafConfigAddressRateLimiting {
    allowedRatePerAddress: number;
    blockResponseCode: number;
    isEnabled: boolean;
    maxDelayedCountPerAddress: number;
}

export interface GetWaasWaasPolicyWafConfigCachingRule {
    action: string;
    cachingDuration: string;
    clientCachingDuration: string;
    criterias: outputs.GetWaasWaasPolicyWafConfigCachingRuleCriteria[];
    isClientCachingEnabled: boolean;
    key: string;
    name: string;
}

export interface GetWaasWaasPolicyWafConfigCachingRuleCriteria {
    condition: string;
    value: string;
}

export interface GetWaasWaasPolicyWafConfigCaptcha {
    failureMessage: string;
    footerText: string;
    headerText: string;
    sessionExpirationInSeconds: number;
    submitLabel: string;
    title: string;
    url: string;
}

export interface GetWaasWaasPolicyWafConfigCustomProtectionRule {
    action: string;
    exclusions: outputs.GetWaasWaasPolicyWafConfigCustomProtectionRuleExclusion[];
    id: string;
}

export interface GetWaasWaasPolicyWafConfigCustomProtectionRuleExclusion {
    exclusions: string[];
    target: string;
}

export interface GetWaasWaasPolicyWafConfigDeviceFingerprintChallenge {
    action: string;
    actionExpirationInSeconds: number;
    challengeSettings: outputs.GetWaasWaasPolicyWafConfigDeviceFingerprintChallengeChallengeSetting[];
    failureThreshold: number;
    failureThresholdExpirationInSeconds: number;
    isEnabled: boolean;
    maxAddressCount: number;
    maxAddressCountExpirationInSeconds: number;
}

export interface GetWaasWaasPolicyWafConfigDeviceFingerprintChallengeChallengeSetting {
    blockAction: string;
    blockErrorPageCode: string;
    blockErrorPageDescription: string;
    blockErrorPageMessage: string;
    blockResponseCode: number;
    captchaFooter: string;
    captchaHeader: string;
    captchaSubmitLabel: string;
    captchaTitle: string;
}

export interface GetWaasWaasPolicyWafConfigHumanInteractionChallenge {
    action: string;
    actionExpirationInSeconds: number;
    challengeSettings: outputs.GetWaasWaasPolicyWafConfigHumanInteractionChallengeChallengeSetting[];
    failureThreshold: number;
    failureThresholdExpirationInSeconds: number;
    interactionThreshold: number;
    isEnabled: boolean;
    isNatEnabled: boolean;
    recordingPeriodInSeconds: number;
    setHttpHeaders: outputs.GetWaasWaasPolicyWafConfigHumanInteractionChallengeSetHttpHeader[];
}

export interface GetWaasWaasPolicyWafConfigHumanInteractionChallengeChallengeSetting {
    blockAction: string;
    blockErrorPageCode: string;
    blockErrorPageDescription: string;
    blockErrorPageMessage: string;
    blockResponseCode: number;
    captchaFooter: string;
    captchaHeader: string;
    captchaSubmitLabel: string;
    captchaTitle: string;
}

export interface GetWaasWaasPolicyWafConfigHumanInteractionChallengeSetHttpHeader {
    name: string;
    value: string;
}

export interface GetWaasWaasPolicyWafConfigJsChallenge {
    action: string;
    actionExpirationInSeconds: number;
    areRedirectsChallenged: boolean;
    challengeSettings: outputs.GetWaasWaasPolicyWafConfigJsChallengeChallengeSetting[];
    criterias: outputs.GetWaasWaasPolicyWafConfigJsChallengeCriteria[];
    failureThreshold: number;
    isEnabled: boolean;
    isNatEnabled: boolean;
    setHttpHeaders: outputs.GetWaasWaasPolicyWafConfigJsChallengeSetHttpHeader[];
}

export interface GetWaasWaasPolicyWafConfigJsChallengeChallengeSetting {
    blockAction: string;
    blockErrorPageCode: string;
    blockErrorPageDescription: string;
    blockErrorPageMessage: string;
    blockResponseCode: number;
    captchaFooter: string;
    captchaHeader: string;
    captchaSubmitLabel: string;
    captchaTitle: string;
}

export interface GetWaasWaasPolicyWafConfigJsChallengeCriteria {
    condition: string;
    isCaseSensitive: boolean;
    value: string;
}

export interface GetWaasWaasPolicyWafConfigJsChallengeSetHttpHeader {
    name: string;
    value: string;
}

export interface GetWaasWaasPolicyWafConfigProtectionSetting {
    allowedHttpMethods: string[];
    blockAction: string;
    blockErrorPageCode: string;
    blockErrorPageDescription: string;
    blockErrorPageMessage: string;
    blockResponseCode: number;
    isResponseInspected: boolean;
    maxArgumentCount: number;
    maxNameLengthPerArgument: number;
    maxResponseSizeInKiB: number;
    maxTotalNameLengthOfArguments: number;
    mediaTypes: string[];
    recommendationsPeriodInDays: number;
}

export interface GetWaasWaasPolicyWafConfigWhitelist {
    addressLists: string[];
    addresses: string[];
    name: string;
}

export interface GetWafNetworkAddressListVcnAddress {
    addresses: string;
    vcnId: string;
}

export interface GetWafNetworkAddressListsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetWafNetworkAddressListsNetworkAddressListCollection {
    items: outputs.GetWafNetworkAddressListsNetworkAddressListCollectionItem[];
}

export interface GetWafNetworkAddressListsNetworkAddressListCollectionItem {
    addresses: string[];
    compartmentId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    lifecycleDetails: string;
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
    type: string;
    vcnAddresses: outputs.GetWafNetworkAddressListsNetworkAddressListCollectionItemVcnAddress[];
}

export interface GetWafNetworkAddressListsNetworkAddressListCollectionItemVcnAddress {
    addresses: string;
    vcnId: string;
}

export interface GetWafProtectionCapabilitiesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetWafProtectionCapabilitiesProtectionCapabilityCollection {
    items: outputs.GetWafProtectionCapabilitiesProtectionCapabilityCollectionItem[];
}

export interface GetWafProtectionCapabilitiesProtectionCapabilityCollectionItem {
    collaborativeActionThreshold: number;
    collaborativeWeights: outputs.GetWafProtectionCapabilitiesProtectionCapabilityCollectionItemCollaborativeWeight[];
    description: string;
    displayName: string;
    groupTags: string[];
    isLatestVersion: boolean;
    key: string;
    type: string;
    version: number;
}

export interface GetWafProtectionCapabilitiesProtectionCapabilityCollectionItemCollaborativeWeight {
    displayName: string;
    key: string;
    weight: number;
}

export interface GetWafProtectionCapabilityGroupTagsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetWafProtectionCapabilityGroupTagsProtectionCapabilityGroupTagCollection {
    items: outputs.GetWafProtectionCapabilityGroupTagsProtectionCapabilityGroupTagCollectionItem[];
}

export interface GetWafProtectionCapabilityGroupTagsProtectionCapabilityGroupTagCollectionItem {
    name: string;
}

export interface GetWafWebAppFirewallPoliciesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetWafWebAppFirewallPoliciesWebAppFirewallPolicyCollection {
    items: outputs.GetWafWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItem[];
}

export interface GetWafWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItem {
    actions: outputs.GetWafWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemAction[];
    compartmentId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    lifecycleDetails: string;
    requestAccessControls: outputs.GetWafWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemRequestAccessControl[];
    requestProtections: outputs.GetWafWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemRequestProtection[];
    requestRateLimitings: outputs.GetWafWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemRequestRateLimiting[];
    responseAccessControls: outputs.GetWafWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemResponseAccessControl[];
    responseProtections: outputs.GetWafWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemResponseProtection[];
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
}

export interface GetWafWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemAction {
    bodies: outputs.GetWafWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemActionBody[];
    code: number;
    headers: outputs.GetWafWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemActionHeader[];
    name: string;
    type: string;
}

export interface GetWafWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemActionBody {
    template: string;
    text: string;
    type: string;
}

export interface GetWafWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemActionHeader {
    name: string;
    value: string;
}

export interface GetWafWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemRequestAccessControl {
    defaultActionName: string;
    rules: outputs.GetWafWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemRequestAccessControlRule[];
}

export interface GetWafWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemRequestAccessControlRule {
    actionName: string;
    condition: string;
    conditionLanguage: string;
    name: string;
    type: string;
}

export interface GetWafWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemRequestProtection {
    bodyInspectionSizeLimitExceededActionName: string;
    bodyInspectionSizeLimitInBytes: number;
    rules: outputs.GetWafWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemRequestProtectionRule[];
}

export interface GetWafWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemRequestProtectionRule {
    actionName: string;
    condition: string;
    conditionLanguage: string;
    isBodyInspectionEnabled: boolean;
    name: string;
    protectionCapabilities: outputs.GetWafWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemRequestProtectionRuleProtectionCapability[];
    protectionCapabilitySettings: outputs.GetWafWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemRequestProtectionRuleProtectionCapabilitySetting[];
    type: string;
}

export interface GetWafWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemRequestProtectionRuleProtectionCapability {
    actionName: string;
    collaborativeActionThreshold: number;
    collaborativeWeights: outputs.GetWafWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemRequestProtectionRuleProtectionCapabilityCollaborativeWeight[];
    exclusions: outputs.GetWafWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemRequestProtectionRuleProtectionCapabilityExclusion[];
    key: string;
    version: number;
}

export interface GetWafWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemRequestProtectionRuleProtectionCapabilityCollaborativeWeight {
    key: string;
    weight: number;
}

export interface GetWafWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemRequestProtectionRuleProtectionCapabilityExclusion {
    args: string[];
    requestCookies: string[];
}

export interface GetWafWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemRequestProtectionRuleProtectionCapabilitySetting {
    allowedHttpMethods: string[];
    maxHttpRequestHeaderLength: number;
    maxHttpRequestHeaders: number;
    maxNumberOfArguments: number;
    maxSingleArgumentLength: number;
    maxTotalArgumentLength: number;
}

export interface GetWafWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemRequestRateLimiting {
    rules: outputs.GetWafWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemRequestRateLimitingRule[];
}

export interface GetWafWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemRequestRateLimitingRule {
    actionName: string;
    condition: string;
    conditionLanguage: string;
    configurations: outputs.GetWafWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemRequestRateLimitingRuleConfiguration[];
    name: string;
    type: string;
}

export interface GetWafWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemRequestRateLimitingRuleConfiguration {
    actionDurationInSeconds: number;
    periodInSeconds: number;
    requestsLimit: number;
}

export interface GetWafWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemResponseAccessControl {
    rules: outputs.GetWafWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemResponseAccessControlRule[];
}

export interface GetWafWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemResponseAccessControlRule {
    actionName: string;
    condition: string;
    conditionLanguage: string;
    name: string;
    type: string;
}

export interface GetWafWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemResponseProtection {
    rules: outputs.GetWafWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemResponseProtectionRule[];
}

export interface GetWafWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemResponseProtectionRule {
    actionName: string;
    condition: string;
    conditionLanguage: string;
    isBodyInspectionEnabled: boolean;
    name: string;
    protectionCapabilities: outputs.GetWafWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemResponseProtectionRuleProtectionCapability[];
    protectionCapabilitySettings: outputs.GetWafWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemResponseProtectionRuleProtectionCapabilitySetting[];
    type: string;
}

export interface GetWafWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemResponseProtectionRuleProtectionCapability {
    actionName: string;
    collaborativeActionThreshold: number;
    collaborativeWeights: outputs.GetWafWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemResponseProtectionRuleProtectionCapabilityCollaborativeWeight[];
    exclusions: outputs.GetWafWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemResponseProtectionRuleProtectionCapabilityExclusion[];
    key: string;
    version: number;
}

export interface GetWafWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemResponseProtectionRuleProtectionCapabilityCollaborativeWeight {
    key: string;
    weight: number;
}

export interface GetWafWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemResponseProtectionRuleProtectionCapabilityExclusion {
    args: string[];
    requestCookies: string[];
}

export interface GetWafWebAppFirewallPoliciesWebAppFirewallPolicyCollectionItemResponseProtectionRuleProtectionCapabilitySetting {
    allowedHttpMethods: string[];
    maxHttpRequestHeaderLength: number;
    maxHttpRequestHeaders: number;
    maxNumberOfArguments: number;
    maxSingleArgumentLength: number;
    maxTotalArgumentLength: number;
}

export interface GetWafWebAppFirewallPolicyAction {
    bodies: outputs.GetWafWebAppFirewallPolicyActionBody[];
    code: number;
    headers: outputs.GetWafWebAppFirewallPolicyActionHeader[];
    name: string;
    type: string;
}

export interface GetWafWebAppFirewallPolicyActionBody {
    template: string;
    text: string;
    type: string;
}

export interface GetWafWebAppFirewallPolicyActionHeader {
    name: string;
    value: string;
}

export interface GetWafWebAppFirewallPolicyRequestAccessControl {
    defaultActionName: string;
    rules: outputs.GetWafWebAppFirewallPolicyRequestAccessControlRule[];
}

export interface GetWafWebAppFirewallPolicyRequestAccessControlRule {
    actionName: string;
    condition: string;
    conditionLanguage: string;
    name: string;
    type: string;
}

export interface GetWafWebAppFirewallPolicyRequestProtection {
    bodyInspectionSizeLimitExceededActionName: string;
    bodyInspectionSizeLimitInBytes: number;
    rules: outputs.GetWafWebAppFirewallPolicyRequestProtectionRule[];
}

export interface GetWafWebAppFirewallPolicyRequestProtectionRule {
    actionName: string;
    condition: string;
    conditionLanguage: string;
    isBodyInspectionEnabled: boolean;
    name: string;
    protectionCapabilities: outputs.GetWafWebAppFirewallPolicyRequestProtectionRuleProtectionCapability[];
    protectionCapabilitySettings: outputs.GetWafWebAppFirewallPolicyRequestProtectionRuleProtectionCapabilitySetting[];
    type: string;
}

export interface GetWafWebAppFirewallPolicyRequestProtectionRuleProtectionCapability {
    actionName: string;
    collaborativeActionThreshold: number;
    collaborativeWeights: outputs.GetWafWebAppFirewallPolicyRequestProtectionRuleProtectionCapabilityCollaborativeWeight[];
    exclusions: outputs.GetWafWebAppFirewallPolicyRequestProtectionRuleProtectionCapabilityExclusion[];
    key: string;
    version: number;
}

export interface GetWafWebAppFirewallPolicyRequestProtectionRuleProtectionCapabilityCollaborativeWeight {
    key: string;
    weight: number;
}

export interface GetWafWebAppFirewallPolicyRequestProtectionRuleProtectionCapabilityExclusion {
    args: string[];
    requestCookies: string[];
}

export interface GetWafWebAppFirewallPolicyRequestProtectionRuleProtectionCapabilitySetting {
    allowedHttpMethods: string[];
    maxHttpRequestHeaderLength: number;
    maxHttpRequestHeaders: number;
    maxNumberOfArguments: number;
    maxSingleArgumentLength: number;
    maxTotalArgumentLength: number;
}

export interface GetWafWebAppFirewallPolicyRequestRateLimiting {
    rules: outputs.GetWafWebAppFirewallPolicyRequestRateLimitingRule[];
}

export interface GetWafWebAppFirewallPolicyRequestRateLimitingRule {
    actionName: string;
    condition: string;
    conditionLanguage: string;
    configurations: outputs.GetWafWebAppFirewallPolicyRequestRateLimitingRuleConfiguration[];
    name: string;
    type: string;
}

export interface GetWafWebAppFirewallPolicyRequestRateLimitingRuleConfiguration {
    actionDurationInSeconds: number;
    periodInSeconds: number;
    requestsLimit: number;
}

export interface GetWafWebAppFirewallPolicyResponseAccessControl {
    rules: outputs.GetWafWebAppFirewallPolicyResponseAccessControlRule[];
}

export interface GetWafWebAppFirewallPolicyResponseAccessControlRule {
    actionName: string;
    condition: string;
    conditionLanguage: string;
    name: string;
    type: string;
}

export interface GetWafWebAppFirewallPolicyResponseProtection {
    rules: outputs.GetWafWebAppFirewallPolicyResponseProtectionRule[];
}

export interface GetWafWebAppFirewallPolicyResponseProtectionRule {
    actionName: string;
    condition: string;
    conditionLanguage: string;
    isBodyInspectionEnabled: boolean;
    name: string;
    protectionCapabilities: outputs.GetWafWebAppFirewallPolicyResponseProtectionRuleProtectionCapability[];
    protectionCapabilitySettings: outputs.GetWafWebAppFirewallPolicyResponseProtectionRuleProtectionCapabilitySetting[];
    type: string;
}

export interface GetWafWebAppFirewallPolicyResponseProtectionRuleProtectionCapability {
    actionName: string;
    collaborativeActionThreshold: number;
    collaborativeWeights: outputs.GetWafWebAppFirewallPolicyResponseProtectionRuleProtectionCapabilityCollaborativeWeight[];
    exclusions: outputs.GetWafWebAppFirewallPolicyResponseProtectionRuleProtectionCapabilityExclusion[];
    key: string;
    version: number;
}

export interface GetWafWebAppFirewallPolicyResponseProtectionRuleProtectionCapabilityCollaborativeWeight {
    key: string;
    weight: number;
}

export interface GetWafWebAppFirewallPolicyResponseProtectionRuleProtectionCapabilityExclusion {
    args: string[];
    requestCookies: string[];
}

export interface GetWafWebAppFirewallPolicyResponseProtectionRuleProtectionCapabilitySetting {
    allowedHttpMethods: string[];
    maxHttpRequestHeaderLength: number;
    maxHttpRequestHeaders: number;
    maxNumberOfArguments: number;
    maxSingleArgumentLength: number;
    maxTotalArgumentLength: number;
}

export interface GetWafWebAppFirewallsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetWafWebAppFirewallsWebAppFirewallCollection {
    items: outputs.GetWafWebAppFirewallsWebAppFirewallCollectionItem[];
}

export interface GetWafWebAppFirewallsWebAppFirewallCollectionItem {
    backendType: string;
    compartmentId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    lifecycleDetails: string;
    loadBalancerId: string;
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
    webAppFirewallPolicyId: string;
}

export interface GoldenGateConnectionAdditionalAttribute {
    name: string;
    value: string;
}

export interface GoldenGateConnectionAssignmentTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface GoldenGateConnectionBootstrapServer {
    host: string;
    port: number;
    privateIp: string;
}

export interface GoldenGateConnectionIngressIp {
    ingressIp: string;
}

export interface GoldenGateConnectionLock {
    message: string;
    relatedResourceId: string;
    timeCreated: string;
    type: string;
}

export interface GoldenGateConnectionTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface GoldenGateDatabaseRegistrationTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface GoldenGateDeploymentBackupLock {
    message: string;
    relatedResourceId: string;
    timeCreated: string;
    type: string;
}

export interface GoldenGateDeploymentBackupTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface GoldenGateDeploymentCertificateTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface GoldenGateDeploymentDeploymentDiagnosticData {
    bucket: string;
    diagnosticState: string;
    namespace: string;
    object: string;
    timeDiagnosticEnd: string;
    timeDiagnosticStart: string;
}

export interface GoldenGateDeploymentIngressIp {
    ingressIp: string;
}

export interface GoldenGateDeploymentLock {
    message: string;
    relatedResourceId: string;
    timeCreated: string;
    type: string;
}

export interface GoldenGateDeploymentMaintenanceConfiguration {
    bundleReleaseUpgradePeriodInDays: number;
    interimReleaseUpgradePeriodInDays: number;
    isInterimReleaseAutoUpgradeEnabled: boolean;
    majorReleaseUpgradePeriodInDays: number;
    securityPatchUpgradePeriodInDays: number;
}

export interface GoldenGateDeploymentMaintenanceWindow {
    day: string;
    startHour: number;
}

export interface GoldenGateDeploymentOggData {
    adminPassword: string;
    adminUsername: string;
    certificate: string;
    credentialStore: string;
    deploymentName: string;
    identityDomainId: string;
    key: string;
    oggVersion: string;
    passwordSecretId: string;
}

export interface GoldenGateDeploymentTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface HealthChecksHttpMonitorTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface HealthChecksHttpProbeTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface HealthChecksPingMonitorTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface HealthChecksPingProbeTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface IdentityApiKeyTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface IdentityAuthTokenTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface IdentityAuthenticationPolicyNetworkPolicy {
    networkSourceIds: string[];
}

export interface IdentityAuthenticationPolicyPasswordPolicy {
    isLowercaseCharactersRequired: boolean;
    isNumericCharactersRequired: boolean;
    isSpecialCharactersRequired: boolean;
    isUppercaseCharactersRequired: boolean;
    isUsernameContainmentAllowed: boolean;
    minimumPasswordLength: number;
}

export interface IdentityAuthenticationPolicyTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface IdentityCompartmentTimeouts {
    delete?: string;
}

export interface IdentityCustomerSecretKeyTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface IdentityDataPlaneGenerateScopedAccessTokenTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface IdentityDbCredentialTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface IdentityDomainReplicaRegion {
    region: string;
    state: string;
    url: string;
}

export interface IdentityDomainReplicationToRegionTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface IdentityDomainTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface IdentityDomainsAccountRecoverySettingIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface IdentityDomainsAccountRecoverySettingIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface IdentityDomainsAccountRecoverySettingMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface IdentityDomainsAccountRecoverySettingTag {
    key: string;
    value: string;
}

export interface IdentityDomainsAccountRecoverySettingTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface IdentityDomainsApiKeyIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface IdentityDomainsApiKeyIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface IdentityDomainsApiKeyMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface IdentityDomainsApiKeyTag {
    key: string;
    value: string;
}

export interface IdentityDomainsApiKeyTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface IdentityDomainsApiKeyUrnietfparamsscimschemasoracleidcsextensionselfChangeUser {
    allowSelfChange: boolean;
}

export interface IdentityDomainsApiKeyUser {
    display: string;
    name: string;
    ocid: string;
    ref: string;
    value: string;
}

export interface IdentityDomainsAppAccount {
    active: boolean;
    name: string;
    ownerId: string;
    ref: string;
    value: string;
}

export interface IdentityDomainsAppAdminRole {
    description: string;
    display: string;
    ref: string;
    value: string;
}

export interface IdentityDomainsAppAliasApp {
    description: string;
    display: string;
    ref: string;
    value: string;
}

export interface IdentityDomainsAppAllowedScope {
    fqs: string;
    idOfDefiningApp: string;
    readOnly: boolean;
}

export interface IdentityDomainsAppAllowedTag {
    key: string;
    readOnly: boolean;
    value: string;
}

export interface IdentityDomainsAppAppSignonPolicy {
    ref: string;
    value: string;
}

export interface IdentityDomainsAppAppsNetworkPerimeter {
    ref: string;
    value: string;
}

export interface IdentityDomainsAppAsOpcService {
    ref: string;
    value: string;
}

export interface IdentityDomainsAppAttrRenderingMetadata {
    datatype: string;
    helptext: string;
    label: string;
    maxLength: number;
    maxSize: number;
    minLength: number;
    minSize: number;
    name: string;
    order: number;
    readOnly: boolean;
    regexp: string;
    required: boolean;
    section: string;
    visible: boolean;
    widget: string;
}

export interface IdentityDomainsAppBasedOnTemplate {
    lastModified: string;
    ref: string;
    value: string;
    wellKnownId: string;
}

export interface IdentityDomainsAppCertificate {
    certAlias: string;
    kid: string;
    sha1thumbprint: string;
    x509base64certificate: string;
    x5t: string;
}

export interface IdentityDomainsAppCloudControlProperty {
    name: string;
    values: string[];
}

export interface IdentityDomainsAppEditableAttribute {
    name: string;
}

export interface IdentityDomainsAppGrant {
    grantMechanism: string;
    granteeId: string;
    granteeType: string;
    ref: string;
    value: string;
}

export interface IdentityDomainsAppGrantedAppRole {
    adminRole: boolean;
    appId: string;
    appName: string;
    display: string;
    legacyGroupName: string;
    readOnly: boolean;
    ref: string;
    type: string;
    value: string;
}

export interface IdentityDomainsAppIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface IdentityDomainsAppIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface IdentityDomainsAppIdentityProvider {
    display: string;
    ref: string;
    value: string;
}

export interface IdentityDomainsAppIdpPolicy {
    ref: string;
    value: string;
}

export interface IdentityDomainsAppMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface IdentityDomainsAppProtectableSecondaryAudience {
    readOnly: boolean;
    value: string;
}

export interface IdentityDomainsAppRadiusPolicy {
    ref: string;
    value: string;
}

export interface IdentityDomainsAppRoleApp {
    display: string;
    name: string;
    ref: string;
    serviceInstanceIdentifier: string;
    value: string;
}

export interface IdentityDomainsAppRoleIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface IdentityDomainsAppRoleIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface IdentityDomainsAppRoleMember {
    display: string;
    ref: string;
    type: string;
    value: string;
}

export interface IdentityDomainsAppRoleMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface IdentityDomainsAppRoleTag {
    key: string;
    value: string;
}

export interface IdentityDomainsAppRoleTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface IdentityDomainsAppSamlServiceProvider {
    ref: string;
    value: string;
}

export interface IdentityDomainsAppScope {
    description: string;
    displayName: string;
    fqs: string;
    readOnly: boolean;
    requiresConsent: boolean;
    value: string;
}

export interface IdentityDomainsAppServiceParam {
    name: string;
    value: string;
}

export interface IdentityDomainsAppSignonPolicy {
    ref: string;
    value: string;
}

export interface IdentityDomainsAppTag {
    key: string;
    value: string;
}

export interface IdentityDomainsAppTermsOfUse {
    name: string;
    ref: string;
    value: string;
}

export interface IdentityDomainsAppTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface IdentityDomainsAppTrustPolicy {
    ref: string;
    value: string;
}

export interface IdentityDomainsAppUrnietfparamsscimschemasoracleidcsextensionOciTags {
    definedTags?: outputs.IdentityDomainsAppUrnietfparamsscimschemasoracleidcsextensionOciTagsDefinedTag[];
    freeformTags?: outputs.IdentityDomainsAppUrnietfparamsscimschemasoracleidcsextensionOciTagsFreeformTag[];
    tagSlug: string;
}

export interface IdentityDomainsAppUrnietfparamsscimschemasoracleidcsextensionOciTagsDefinedTag {
    key: string;
    namespace: string;
    value: string;
}

export interface IdentityDomainsAppUrnietfparamsscimschemasoracleidcsextensionOciTagsFreeformTag {
    key: string;
    value: string;
}

export interface IdentityDomainsAppUrnietfparamsscimschemasoracleidcsextensiondbcsApp {
    domainApp?: outputs.IdentityDomainsAppUrnietfparamsscimschemasoracleidcsextensiondbcsAppDomainApp;
    domainName: string;
}

export interface IdentityDomainsAppUrnietfparamsscimschemasoracleidcsextensiondbcsAppDomainApp {
    display: string;
    ref: string;
    value: string;
}

export interface IdentityDomainsAppUrnietfparamsscimschemasoracleidcsextensionenterpriseAppApp {
    allowAuthzDecisionTtl: number;
    allowAuthzPolicy?: outputs.IdentityDomainsAppUrnietfparamsscimschemasoracleidcsextensionenterpriseAppAppAllowAuthzPolicy;
    appResources?: outputs.IdentityDomainsAppUrnietfparamsscimschemasoracleidcsextensionenterpriseAppAppAppResource[];
    denyAuthzDecisionTtl: number;
    denyAuthzPolicy?: outputs.IdentityDomainsAppUrnietfparamsscimschemasoracleidcsextensionenterpriseAppAppDenyAuthzPolicy;
}

export interface IdentityDomainsAppUrnietfparamsscimschemasoracleidcsextensionenterpriseAppAppAllowAuthzPolicy {
    ref: string;
    value: string;
}

export interface IdentityDomainsAppUrnietfparamsscimschemasoracleidcsextensionenterpriseAppAppAppResource {
    ref: string;
    value: string;
}

export interface IdentityDomainsAppUrnietfparamsscimschemasoracleidcsextensionenterpriseAppAppDenyAuthzPolicy {
    ref: string;
    value: string;
}

export interface IdentityDomainsAppUrnietfparamsscimschemasoracleidcsextensionformFillAppApp {
    configuration: string;
    formCredMethod: string;
    formCredentialSharingGroupId: string;
    formFillUrlMatches?: outputs.IdentityDomainsAppUrnietfparamsscimschemasoracleidcsextensionformFillAppAppFormFillUrlMatch[];
    formType: string;
    revealPasswordOnForm: boolean;
    syncFromTemplate: boolean;
    userNameFormExpression: string;
    userNameFormTemplate: string;
}

export interface IdentityDomainsAppUrnietfparamsscimschemasoracleidcsextensionformFillAppAppFormFillUrlMatch {
    formUrl: string;
    formUrlMatchType: string;
}

export interface IdentityDomainsAppUrnietfparamsscimschemasoracleidcsextensionformFillAppTemplateAppTemplate {
    configuration: string;
    formCredMethod: string;
    formCredentialSharingGroupId: string;
    formFillUrlMatches?: outputs.IdentityDomainsAppUrnietfparamsscimschemasoracleidcsextensionformFillAppTemplateAppTemplateFormFillUrlMatch[];
    formType: string;
    revealPasswordOnForm: boolean;
    syncFromTemplate: boolean;
    userNameFormExpression: string;
    userNameFormTemplate: string;
}

export interface IdentityDomainsAppUrnietfparamsscimschemasoracleidcsextensionformFillAppTemplateAppTemplateFormFillUrlMatch {
    formUrl: string;
    formUrlMatchType: string;
}

export interface IdentityDomainsAppUrnietfparamsscimschemasoracleidcsextensionkerberosRealmApp {
    defaultEncryptionSaltType: string;
    masterKey: string;
    maxRenewableAge: number;
    maxTicketLife: number;
    realmName: string;
    supportedEncryptionSaltTypes: string[];
    ticketFlags: number;
}

export interface IdentityDomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappApp {
    accountFormVisible: boolean;
    adminConsentGranted: boolean;
    bundleConfigurationProperties?: outputs.IdentityDomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppBundleConfigurationProperty[];
    bundlePoolConfiguration?: outputs.IdentityDomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppBundlePoolConfiguration;
    canBeAuthoritative: boolean;
    connected: boolean;
    connectorBundles: outputs.IdentityDomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppConnectorBundle[];
    enableAuthSyncNewUserNotification: boolean;
    enableSync: boolean;
    enableSyncSummaryReportNotification: boolean;
    flatFileBundleConfigurationProperties?: outputs.IdentityDomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppFlatFileBundleConfigurationProperty[];
    flatFileConnectorBundle?: outputs.IdentityDomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppFlatFileConnectorBundle;
    identityBridges: outputs.IdentityDomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppIdentityBridge[];
    isAuthoritative: boolean;
    isDirectory: boolean;
    isOnPremiseApp: boolean;
    isSchemaCustomizationSupported: boolean;
    isSchemaDiscoverySupported: boolean;
    isThreeLeggedOauthEnabled: boolean;
    isTwoLeggedOauthEnabled: boolean;
    objectClasses: outputs.IdentityDomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppObjectClass[];
    syncConfigLastModified: string;
    threeLeggedOauthCredential?: outputs.IdentityDomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppThreeLeggedOauthCredential;
    threeLeggedOauthProviderName: string;
}

export interface IdentityDomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppBundleConfigurationProperty {
    confidential: boolean;
    displayName: string;
    helpMessage: string;
    icfType: string;
    name: string;
    order: number;
    required: boolean;
    values: string[];
}

export interface IdentityDomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppBundlePoolConfiguration {
    maxIdle: number;
    maxObjects: number;
    maxWait: number;
    minEvictableIdleTimeMillis: number;
    minIdle: number;
}

export interface IdentityDomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppConnectorBundle {
    display: string;
    ref: string;
    type: string;
    value: string;
    wellKnownId: string;
}

export interface IdentityDomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppFlatFileBundleConfigurationProperty {
    confidential: boolean;
    displayName: string;
    helpMessage: string;
    icfType: string;
    name: string;
    order: number;
    required: boolean;
    values: string[];
}

export interface IdentityDomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppFlatFileConnectorBundle {
    display: string;
    ref: string;
    value: string;
    wellKnownId: string;
}

export interface IdentityDomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppIdentityBridge {
    name: string;
    ref: string;
    value: string;
}

export interface IdentityDomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppObjectClass {
    display: string;
    isAccountObjectClass: boolean;
    ref: string;
    resourceType: string;
    type: string;
    value: string;
}

export interface IdentityDomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappAppThreeLeggedOauthCredential {
    accessToken: string;
    accessTokenExpiry: string;
    refreshToken: string;
}

export interface IdentityDomainsAppUrnietfparamsscimschemasoracleidcsextensionmulticloudServiceAppApp {
    multicloudPlatformUrl: string;
    multicloudServiceType: string;
}

export interface IdentityDomainsAppUrnietfparamsscimschemasoracleidcsextensionopcServiceApp {
    currentFederationMode: string;
    currentSynchronizationMode: string;
    enablingNextFedSyncModes: boolean;
    nextFederationMode: string;
    nextSynchronizationMode: string;
    region: string;
    serviceInstanceIdentifier: string;
}

export interface IdentityDomainsAppUrnietfparamsscimschemasoracleidcsextensionradiusAppApp {
    captureClientIp: boolean;
    clientIp: string;
    countryCodeResponseAttributeId: string;
    endUserIpAttribute: string;
    groupMembershipRadiusAttribute: string;
    groupMembershipToReturns?: outputs.IdentityDomainsAppUrnietfparamsscimschemasoracleidcsextensionradiusAppAppGroupMembershipToReturn[];
    groupNameFormat: string;
    includeGroupInResponse: boolean;
    passwordAndOtpTogether: boolean;
    port: string;
    radiusVendorSpecificId: string;
    responseFormat: string;
    responseFormatDelimiter: string;
    secretKey: string;
    typeOfRadiusApp: string;
}

export interface IdentityDomainsAppUrnietfparamsscimschemasoracleidcsextensionradiusAppAppGroupMembershipToReturn {
    display: string;
    ref: string;
    value: string;
}

export interface IdentityDomainsAppUrnietfparamsscimschemasoracleidcsextensionrequestableApp {
    requestable: boolean;
}

export interface IdentityDomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderApp {
    assertionConsumerUrl: string;
    encryptAssertion: boolean;
    encryptionAlgorithm: string;
    encryptionCertificate: string;
    federationProtocol: string;
    groupAssertionAttributes?: outputs.IdentityDomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppGroupAssertionAttribute[];
    hokAcsUrl: string;
    hokRequired: boolean;
    includeSigningCertInSignature: boolean;
    keyEncryptionAlgorithm: string;
    lastNotificationSentTime: string;
    logoutBinding: string;
    logoutEnabled: boolean;
    logoutRequestUrl: string;
    logoutResponseUrl: string;
    metadata: string;
    nameIdFormat: string;
    nameIdUserstoreAttribute: string;
    outboundAssertionAttributes: outputs.IdentityDomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppOutboundAssertionAttribute[];
    partnerProviderId: string;
    partnerProviderPattern: string;
    signResponseOrAssertion: string;
    signatureHashAlgorithm: string;
    signingCertificate: string;
    succinctId: string;
    tenantProviderId: string;
    userAssertionAttributes?: outputs.IdentityDomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppUserAssertionAttribute[];
}

export interface IdentityDomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppGroupAssertionAttribute {
    condition: string;
    format: string;
    groupName: string;
    name: string;
}

export interface IdentityDomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppOutboundAssertionAttribute {
    direction: string;
    ref: string;
    value: string;
}

export interface IdentityDomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppUserAssertionAttribute {
    format: string;
    name: string;
    userStoreAttributeName: string;
}

export interface IdentityDomainsAppUrnietfparamsscimschemasoracleidcsextensionwebTierPolicyApp {
    resourceRef: boolean;
    webTierPolicyAzControl: string;
    webTierPolicyJson: string;
}

export interface IdentityDomainsAppUserRole {
    description: string;
    display: string;
    ref: string;
    value: string;
}

export interface IdentityDomainsApprovalWorkflowApprovalWorkflowStep {
    ocid: string;
    order: number;
    ref: string;
    type: string;
    value: string;
}

export interface IdentityDomainsApprovalWorkflowAssignmentApprovalWorkflow {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface IdentityDomainsApprovalWorkflowAssignmentAssignedTo {
    description: string;
    display: string;
    ocid: string;
    type: string;
    value: string;
}

export interface IdentityDomainsApprovalWorkflowAssignmentIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface IdentityDomainsApprovalWorkflowAssignmentIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface IdentityDomainsApprovalWorkflowAssignmentMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface IdentityDomainsApprovalWorkflowAssignmentTag {
    key: string;
    value: string;
}

export interface IdentityDomainsApprovalWorkflowAssignmentTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface IdentityDomainsApprovalWorkflowIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface IdentityDomainsApprovalWorkflowIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface IdentityDomainsApprovalWorkflowMaxDuration {
    unit: string;
    value: number;
}

export interface IdentityDomainsApprovalWorkflowMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface IdentityDomainsApprovalWorkflowStepApprover {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface IdentityDomainsApprovalWorkflowStepIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface IdentityDomainsApprovalWorkflowStepIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface IdentityDomainsApprovalWorkflowStepMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface IdentityDomainsApprovalWorkflowStepTag {
    key: string;
    value: string;
}

export interface IdentityDomainsApprovalWorkflowStepTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface IdentityDomainsApprovalWorkflowTag {
    key: string;
    value: string;
}

export interface IdentityDomainsApprovalWorkflowTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface IdentityDomainsAuthTokenIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface IdentityDomainsAuthTokenIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface IdentityDomainsAuthTokenMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface IdentityDomainsAuthTokenTag {
    key: string;
    value: string;
}

export interface IdentityDomainsAuthTokenTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface IdentityDomainsAuthTokenUrnietfparamsscimschemasoracleidcsextensionselfChangeUser {
    allowSelfChange: boolean;
}

export interface IdentityDomainsAuthTokenUser {
    display: string;
    name: string;
    ocid: string;
    ref: string;
    value: string;
}

export interface IdentityDomainsAuthenticationFactorSettingBypassCodeSettings {
    helpDeskCodeExpiryInMins: number;
    helpDeskGenerationEnabled: boolean;
    helpDeskMaxUsage: number;
    length: number;
    maxActive: number;
    selfServiceGenerationEnabled: boolean;
}

export interface IdentityDomainsAuthenticationFactorSettingClientAppSettings {
    deviceProtectionPolicy: string;
    initialLockoutPeriodInSecs: number;
    keyPairLength: number;
    lockoutEscalationPattern: string;
    maxFailuresBeforeLockout: number;
    maxFailuresBeforeWarning: number;
    maxLockoutIntervalInSecs: number;
    minPinLength: number;
    policyUpdateFreqInDays: number;
    requestSigningAlgo: string;
    sharedSecretEncoding: string;
    unlockAppForEachRequestEnabled: boolean;
    unlockAppIntervalInSecs: number;
    unlockOnAppForegroundEnabled: boolean;
    unlockOnAppStartEnabled: boolean;
}

export interface IdentityDomainsAuthenticationFactorSettingCompliancePolicy {
    action: string;
    name: string;
    value: string;
}

export interface IdentityDomainsAuthenticationFactorSettingEmailSettings {
    emailLinkCustomUrl: string;
    emailLinkEnabled: boolean;
}

export interface IdentityDomainsAuthenticationFactorSettingEndpointRestrictions {
    maxEndpointTrustDurationInDays: number;
    maxEnrolledDevices: number;
    maxIncorrectAttempts: number;
    maxTrustedEndpoints: number;
    trustedEndpointsEnabled: boolean;
}

export interface IdentityDomainsAuthenticationFactorSettingIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface IdentityDomainsAuthenticationFactorSettingIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface IdentityDomainsAuthenticationFactorSettingIdentityStoreSettings {
    mobileNumberEnabled: boolean;
    mobileNumberUpdateEnabled: boolean;
}

export interface IdentityDomainsAuthenticationFactorSettingMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface IdentityDomainsAuthenticationFactorSettingNotificationSettings {
    pullEnabled: boolean;
}

export interface IdentityDomainsAuthenticationFactorSettingTag {
    key: string;
    value: string;
}

export interface IdentityDomainsAuthenticationFactorSettingThirdPartyFactor {
    duoSecurity: boolean;
}

export interface IdentityDomainsAuthenticationFactorSettingTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface IdentityDomainsAuthenticationFactorSettingTotpSettings {
    emailOtpValidityDurationInMins: number;
    emailPasscodeLength: number;
    hashingAlgorithm: string;
    jwtValidityDurationInSecs: number;
    keyRefreshIntervalInDays: number;
    passcodeLength: number;
    smsOtpValidityDurationInMins: number;
    smsPasscodeLength: number;
    timeStepInSecs: number;
    timeStepTolerance: number;
}

export interface IdentityDomainsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionfidoAuthenticationFactorSettings {
    attestation: string;
    authenticatorSelectionAttachment: string;
    authenticatorSelectionRequireResidentKey: boolean;
    authenticatorSelectionResidentKey: string;
    authenticatorSelectionUserVerification: string;
    domainValidationLevel: number;
    excludeCredentials: boolean;
    publicKeyTypes: string[];
    timeout: number;
}

export interface IdentityDomainsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionthirdPartyAuthenticationFactorSettings {
    duoSecuritySettings?: outputs.IdentityDomainsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionthirdPartyAuthenticationFactorSettingsDuoSecuritySettings;
}

export interface IdentityDomainsAuthenticationFactorSettingUrnietfparamsscimschemasoracleidcsextensionthirdPartyAuthenticationFactorSettingsDuoSecuritySettings {
    apiHostname: string;
    attestationKey: string;
    integrationKey: string;
    secretKey: string;
    userMappingAttribute: string;
}

export interface IdentityDomainsCloudGateIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface IdentityDomainsCloudGateIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface IdentityDomainsCloudGateMapping {
    appId: string;
    mappingId: string;
    name: string;
    nginxSettings: string;
    policyName: string;
    proxyPass: string;
    ref: string;
    resourcePrefix: string;
    serverId: string;
    upstreamServerGroupId: string;
    value: string;
}

export interface IdentityDomainsCloudGateMappingCloudGate {
    ref: string;
    value: string;
}

export interface IdentityDomainsCloudGateMappingGatewayApp {
    name: string;
    ref: string;
    value: string;
}

export interface IdentityDomainsCloudGateMappingIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface IdentityDomainsCloudGateMappingIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface IdentityDomainsCloudGateMappingMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface IdentityDomainsCloudGateMappingServer {
    ref: string;
    value: string;
}

export interface IdentityDomainsCloudGateMappingTag {
    key: string;
    value: string;
}

export interface IdentityDomainsCloudGateMappingTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface IdentityDomainsCloudGateMappingUpstreamServerGroup {
    ref: string;
    ssl: boolean;
    value: string;
}

export interface IdentityDomainsCloudGateMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface IdentityDomainsCloudGateOauthClient {
    clientId: string;
    ref: string;
    value: string;
}

export interface IdentityDomainsCloudGateServer {
    hostName: string;
    nginxSettings: string;
    port: number;
    serverId: string;
    ssl: boolean;
}

export interface IdentityDomainsCloudGateServerCloudGate {
    ref: string;
    value: string;
}

export interface IdentityDomainsCloudGateServerIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface IdentityDomainsCloudGateServerIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface IdentityDomainsCloudGateServerMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface IdentityDomainsCloudGateServerTag {
    key: string;
    value: string;
}

export interface IdentityDomainsCloudGateServerTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface IdentityDomainsCloudGateTag {
    key: string;
    value: string;
}

export interface IdentityDomainsCloudGateTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface IdentityDomainsCloudGateUpstreamServer {
    displayName: string;
    groupId: string;
    hostName: string;
    nginxSettings: string;
    port: number;
    ref: string;
    value: string;
}

export interface IdentityDomainsCloudGateUpstreamServerGroup {
    displayName: string;
    nginxSettings: string;
    ref: string;
    ssl: boolean;
    value: string;
}

export interface IdentityDomainsConditionIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface IdentityDomainsConditionIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface IdentityDomainsConditionMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface IdentityDomainsConditionTag {
    key: string;
    value: string;
}

export interface IdentityDomainsConditionTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface IdentityDomainsCustomerSecretKeyIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface IdentityDomainsCustomerSecretKeyIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface IdentityDomainsCustomerSecretKeyMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface IdentityDomainsCustomerSecretKeyTag {
    key: string;
    value: string;
}

export interface IdentityDomainsCustomerSecretKeyTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface IdentityDomainsCustomerSecretKeyUrnietfparamsscimschemasoracleidcsextensionselfChangeUser {
    allowSelfChange: boolean;
}

export interface IdentityDomainsCustomerSecretKeyUser {
    display: string;
    name: string;
    ocid: string;
    ref: string;
    value: string;
}

export interface IdentityDomainsDynamicResourceGroupDynamicGroupAppRole {
    adminRole: boolean;
    appId: string;
    appName: string;
    display: string;
    legacyGroupName: string;
    ref: string;
    value: string;
}

export interface IdentityDomainsDynamicResourceGroupGrant {
    appId: string;
    grantMechanism: string;
    ref: string;
    value: string;
}

export interface IdentityDomainsDynamicResourceGroupIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface IdentityDomainsDynamicResourceGroupIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface IdentityDomainsDynamicResourceGroupMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface IdentityDomainsDynamicResourceGroupTag {
    key: string;
    value: string;
}

export interface IdentityDomainsDynamicResourceGroupTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface IdentityDomainsDynamicResourceGroupUrnietfparamsscimschemasoracleidcsextensionOciTags {
    definedTags?: outputs.IdentityDomainsDynamicResourceGroupUrnietfparamsscimschemasoracleidcsextensionOciTagsDefinedTag[];
    freeformTags?: outputs.IdentityDomainsDynamicResourceGroupUrnietfparamsscimschemasoracleidcsextensionOciTagsFreeformTag[];
    tagSlug: string;
}

export interface IdentityDomainsDynamicResourceGroupUrnietfparamsscimschemasoracleidcsextensionOciTagsDefinedTag {
    key: string;
    namespace: string;
    value: string;
}

export interface IdentityDomainsDynamicResourceGroupUrnietfparamsscimschemasoracleidcsextensionOciTagsFreeformTag {
    key: string;
    value: string;
}

export interface IdentityDomainsGrantApp {
    display: string;
    ref: string;
    value: string;
}

export interface IdentityDomainsGrantAppEntitlementCollection {
    ref: string;
    value: string;
}

export interface IdentityDomainsGrantEntitlement {
    attributeName: string;
    attributeValue: string;
}

export interface IdentityDomainsGrantGrantee {
    display: string;
    ref: string;
    type: string;
    value: string;
}

export interface IdentityDomainsGrantGrantor {
    display: string;
    ref: string;
    type: string;
    value: string;
}

export interface IdentityDomainsGrantIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface IdentityDomainsGrantIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface IdentityDomainsGrantMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface IdentityDomainsGrantTag {
    key: string;
    value: string;
}

export interface IdentityDomainsGrantTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface IdentityDomainsGroupIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface IdentityDomainsGroupIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface IdentityDomainsGroupMember {
    dateAdded: string;
    display: string;
    membershipOcid: string;
    name: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface IdentityDomainsGroupMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface IdentityDomainsGroupTag {
    key: string;
    value: string;
}

export interface IdentityDomainsGroupTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface IdentityDomainsGroupUrnietfparamsscimschemasoracleidcsextensionOciTags {
    definedTags?: outputs.IdentityDomainsGroupUrnietfparamsscimschemasoracleidcsextensionOciTagsDefinedTag[];
    freeformTags?: outputs.IdentityDomainsGroupUrnietfparamsscimschemasoracleidcsextensionOciTagsFreeformTag[];
    tagSlug: string;
}

export interface IdentityDomainsGroupUrnietfparamsscimschemasoracleidcsextensionOciTagsDefinedTag {
    key: string;
    namespace: string;
    value: string;
}

export interface IdentityDomainsGroupUrnietfparamsscimschemasoracleidcsextensionOciTagsFreeformTag {
    key: string;
    value: string;
}

export interface IdentityDomainsGroupUrnietfparamsscimschemasoracleidcsextensiondbcsGroup {
    domainLevelSchema: string;
    domainLevelSchemaNames: outputs.IdentityDomainsGroupUrnietfparamsscimschemasoracleidcsextensiondbcsGroupDomainLevelSchemaName[];
    instanceLevelSchema: string;
    instanceLevelSchemaNames: outputs.IdentityDomainsGroupUrnietfparamsscimschemasoracleidcsextensiondbcsGroupInstanceLevelSchemaName[];
}

export interface IdentityDomainsGroupUrnietfparamsscimschemasoracleidcsextensiondbcsGroupDomainLevelSchemaName {
    domainName: string;
    schemaName: string;
}

export interface IdentityDomainsGroupUrnietfparamsscimschemasoracleidcsextensiondbcsGroupInstanceLevelSchemaName {
    dbInstanceId: string;
    schemaName: string;
}

export interface IdentityDomainsGroupUrnietfparamsscimschemasoracleidcsextensiondynamicGroup {
    membershipRule: string;
    membershipType: string;
}

export interface IdentityDomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroup {
    appRoles: outputs.IdentityDomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupAppRole[];
    creationMechanism: string;
    description: string;
    grants: outputs.IdentityDomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupGrant[];
    owners?: outputs.IdentityDomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupOwner[];
    passwordPolicies: outputs.IdentityDomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupPasswordPolicy[];
    syncedFromApps: outputs.IdentityDomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupSyncedFromApp[];
}

export interface IdentityDomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupAppRole {
    adminRole: boolean;
    appId: string;
    appName: string;
    display: string;
    legacyGroupName: string;
    ref: string;
    type: string;
    value: string;
}

export interface IdentityDomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupGrant {
    appId: string;
    grantMechanism: string;
    ref: string;
    value: string;
}

export interface IdentityDomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupOwner {
    display: string;
    ref: string;
    type: string;
    value: string;
}

export interface IdentityDomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupPasswordPolicy {
    name: string;
    priority: number;
    ref: string;
    value: string;
}

export interface IdentityDomainsGroupUrnietfparamsscimschemasoracleidcsextensiongroupGroupSyncedFromApp {
    display: string;
    ref: string;
    type: string;
    value: string;
}

export interface IdentityDomainsGroupUrnietfparamsscimschemasoracleidcsextensionposixGroup {
    gidNumber: number;
}

export interface IdentityDomainsGroupUrnietfparamsscimschemasoracleidcsextensionrequestableGroup {
    requestable: boolean;
}

export interface IdentityDomainsIdentityPropagationTrustIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface IdentityDomainsIdentityPropagationTrustIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface IdentityDomainsIdentityPropagationTrustImpersonationServiceUser {
    ocid: string;
    ref: string;
    rule: string;
    value: string;
}

export interface IdentityDomainsIdentityPropagationTrustKeytab {
    secretOcid: string;
    secretVersion: number;
}

export interface IdentityDomainsIdentityPropagationTrustMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface IdentityDomainsIdentityPropagationTrustTag {
    key: string;
    value: string;
}

export interface IdentityDomainsIdentityPropagationTrustTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface IdentityDomainsIdentityProviderCorrelationPolicy {
    display: string;
    ref: string;
    type: string;
    value: string;
}

export interface IdentityDomainsIdentityProviderIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface IdentityDomainsIdentityProviderIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface IdentityDomainsIdentityProviderJitUserProvAssignedGroup {
    display: string;
    ref: string;
    value: string;
}

export interface IdentityDomainsIdentityProviderJitUserProvAttributes {
    ref: string;
    value: string;
}

export interface IdentityDomainsIdentityProviderJitUserProvGroupMapping {
    idpGroup: string;
    ref: string;
    value: string;
}

export interface IdentityDomainsIdentityProviderMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface IdentityDomainsIdentityProviderTag {
    key: string;
    value: string;
}

export interface IdentityDomainsIdentityProviderTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface IdentityDomainsIdentityProviderUrnietfparamsscimschemasoracleidcsextensionsocialIdentityProvider {
    accessTokenUrl: string;
    accountLinkingEnabled: boolean;
    adminScopes: string[];
    authzUrl: string;
    autoRedirectEnabled: boolean;
    clientCredentialInPayload: boolean;
    clockSkewInSeconds: number;
    consumerKey: string;
    consumerSecret: string;
    discoveryUrl: string;
    idAttribute: string;
    jitProvAssignedGroups?: outputs.IdentityDomainsIdentityProviderUrnietfparamsscimschemasoracleidcsextensionsocialIdentityProviderJitProvAssignedGroup[];
    jitProvGroupStaticListEnabled: boolean;
    profileUrl: string;
    redirectUrl: string;
    registrationEnabled: boolean;
    scopes: string[];
    serviceProviderName: string;
    socialJitProvisioningEnabled: boolean;
    status: string;
}

export interface IdentityDomainsIdentityProviderUrnietfparamsscimschemasoracleidcsextensionsocialIdentityProviderJitProvAssignedGroup {
    display: string;
    ref: string;
    value: string;
}

export interface IdentityDomainsIdentityProviderUrnietfparamsscimschemasoracleidcsextensionx509identityProvider {
    certMatchAttribute: string;
    crlCheckOnOcspFailureEnabled: boolean;
    crlEnabled: boolean;
    crlLocation: string;
    crlReloadDuration: number;
    ekuValidationEnabled: boolean;
    ekuValues: string[];
    ocspAllowUnknownResponseStatus: boolean;
    ocspEnableSignedResponse: boolean;
    ocspEnabled: boolean;
    ocspResponderUrl: string;
    ocspRevalidateTime: number;
    ocspServerName: string;
    ocspTrustCertChains: string[];
    otherCertMatchAttribute: string;
    signingCertificateChains: string[];
    userMatchAttribute: string;
}

export interface IdentityDomainsIdentitySettingIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface IdentityDomainsIdentitySettingIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface IdentityDomainsIdentitySettingMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface IdentityDomainsIdentitySettingMyProfile {
    allowEndUsersToChangeTheirPassword: boolean;
    allowEndUsersToLinkTheirSupportAccount: boolean;
    allowEndUsersToManageTheirCapabilities: boolean;
    allowEndUsersToUpdateTheirSecuritySettings: boolean;
}

export interface IdentityDomainsIdentitySettingPosixGid {
    manualAssignmentEndsAt: number;
    manualAssignmentStartsFrom: number;
}

export interface IdentityDomainsIdentitySettingPosixUid {
    manualAssignmentEndsAt: number;
    manualAssignmentStartsFrom: number;
}

export interface IdentityDomainsIdentitySettingTag {
    key: string;
    value: string;
}

export interface IdentityDomainsIdentitySettingTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface IdentityDomainsIdentitySettingToken {
    expiresAfter: number;
    type: string;
}

export interface IdentityDomainsKmsiSettingIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface IdentityDomainsKmsiSettingIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface IdentityDomainsKmsiSettingMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface IdentityDomainsKmsiSettingTag {
    key: string;
    value: string;
}

export interface IdentityDomainsKmsiSettingTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface IdentityDomainsMyApiKeyIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface IdentityDomainsMyApiKeyIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface IdentityDomainsMyApiKeyMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface IdentityDomainsMyApiKeyTag {
    key: string;
    value: string;
}

export interface IdentityDomainsMyApiKeyTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface IdentityDomainsMyApiKeyUser {
    display: string;
    name: string;
    ocid: string;
    ref: string;
    value: string;
}

export interface IdentityDomainsMyAuthTokenIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface IdentityDomainsMyAuthTokenIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface IdentityDomainsMyAuthTokenMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface IdentityDomainsMyAuthTokenTag {
    key: string;
    value: string;
}

export interface IdentityDomainsMyAuthTokenTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface IdentityDomainsMyAuthTokenUser {
    display: string;
    name: string;
    ocid: string;
    ref: string;
    value: string;
}

export interface IdentityDomainsMyCustomerSecretKeyIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface IdentityDomainsMyCustomerSecretKeyIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface IdentityDomainsMyCustomerSecretKeyMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface IdentityDomainsMyCustomerSecretKeyTag {
    key: string;
    value: string;
}

export interface IdentityDomainsMyCustomerSecretKeyTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface IdentityDomainsMyCustomerSecretKeyUser {
    display: string;
    name: string;
    ocid: string;
    ref: string;
    value: string;
}

export interface IdentityDomainsMyOauth2clientCredentialIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface IdentityDomainsMyOauth2clientCredentialIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface IdentityDomainsMyOauth2clientCredentialMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface IdentityDomainsMyOauth2clientCredentialScope {
    audience: string;
    scope: string;
}

export interface IdentityDomainsMyOauth2clientCredentialTag {
    key: string;
    value: string;
}

export interface IdentityDomainsMyOauth2clientCredentialTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface IdentityDomainsMyOauth2clientCredentialUser {
    display: string;
    name: string;
    ocid: string;
    ref: string;
    value: string;
}

export interface IdentityDomainsMyRequestApprovalDetail {
    approvalType: string;
    approverDisplayName: string;
    approverId: string;
    justification: string;
    order: number;
    status: string;
    timeUpdated: string;
}

export interface IdentityDomainsMyRequestIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface IdentityDomainsMyRequestIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface IdentityDomainsMyRequestMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface IdentityDomainsMyRequestRequesting {
    description: string;
    display: string;
    ref: string;
    type: string;
    value: string;
}

export interface IdentityDomainsMyRequestRequestor {
    display: string;
    ref: string;
    value: string;
}

export interface IdentityDomainsMyRequestTag {
    key: string;
    value: string;
}

export interface IdentityDomainsMyRequestTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface IdentityDomainsMySmtpCredentialIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface IdentityDomainsMySmtpCredentialIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface IdentityDomainsMySmtpCredentialMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface IdentityDomainsMySmtpCredentialTag {
    key: string;
    value: string;
}

export interface IdentityDomainsMySmtpCredentialTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface IdentityDomainsMySmtpCredentialUser {
    display: string;
    name: string;
    ocid: string;
    ref: string;
    value: string;
}

export interface IdentityDomainsMySupportAccountIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface IdentityDomainsMySupportAccountIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface IdentityDomainsMySupportAccountMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface IdentityDomainsMySupportAccountTag {
    key: string;
    value: string;
}

export interface IdentityDomainsMySupportAccountTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface IdentityDomainsMySupportAccountUser {
    display: string;
    name: string;
    ocid: string;
    ref: string;
    value: string;
}

export interface IdentityDomainsMyUserDbCredentialIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface IdentityDomainsMyUserDbCredentialIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface IdentityDomainsMyUserDbCredentialMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface IdentityDomainsMyUserDbCredentialTag {
    key: string;
    value: string;
}

export interface IdentityDomainsMyUserDbCredentialTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface IdentityDomainsMyUserDbCredentialUser {
    display: string;
    name: string;
    ocid: string;
    ref: string;
    value: string;
}

export interface IdentityDomainsNetworkPerimeterIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface IdentityDomainsNetworkPerimeterIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface IdentityDomainsNetworkPerimeterIpAddress {
    type: string;
    value: string;
    version: string;
}

export interface IdentityDomainsNetworkPerimeterMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface IdentityDomainsNetworkPerimeterTag {
    key: string;
    value: string;
}

export interface IdentityDomainsNetworkPerimeterTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface IdentityDomainsNotificationSettingEventSetting {
    enabled: boolean;
    eventId: string;
}

export interface IdentityDomainsNotificationSettingFromEmailAddress {
    displayName: string;
    validate: string;
    validationStatus: string;
    value: string;
}

export interface IdentityDomainsNotificationSettingIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface IdentityDomainsNotificationSettingIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface IdentityDomainsNotificationSettingMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface IdentityDomainsNotificationSettingTag {
    key: string;
    value: string;
}

export interface IdentityDomainsNotificationSettingTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface IdentityDomainsOauth2clientCredentialIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface IdentityDomainsOauth2clientCredentialIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface IdentityDomainsOauth2clientCredentialMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface IdentityDomainsOauth2clientCredentialScope {
    audience: string;
    scope: string;
}

export interface IdentityDomainsOauth2clientCredentialTag {
    key: string;
    value: string;
}

export interface IdentityDomainsOauth2clientCredentialTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface IdentityDomainsOauth2clientCredentialUrnietfparamsscimschemasoracleidcsextensionselfChangeUser {
    allowSelfChange: boolean;
}

export interface IdentityDomainsOauth2clientCredentialUser {
    display: string;
    name: string;
    ocid: string;
    ref: string;
    value: string;
}

export interface IdentityDomainsOauthClientCertificateIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface IdentityDomainsOauthClientCertificateIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface IdentityDomainsOauthClientCertificateMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface IdentityDomainsOauthClientCertificateTag {
    key: string;
    value: string;
}

export interface IdentityDomainsOauthClientCertificateTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface IdentityDomainsOauthPartnerCertificateIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface IdentityDomainsOauthPartnerCertificateIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface IdentityDomainsOauthPartnerCertificateMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface IdentityDomainsOauthPartnerCertificateTag {
    key: string;
    value: string;
}

export interface IdentityDomainsOauthPartnerCertificateTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface IdentityDomainsPasswordPolicyConfiguredPasswordPolicyRule {
    key: string;
    value: string;
}

export interface IdentityDomainsPasswordPolicyGroup {
    display: string;
    ref: string;
    value: string;
}

export interface IdentityDomainsPasswordPolicyIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface IdentityDomainsPasswordPolicyIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface IdentityDomainsPasswordPolicyMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface IdentityDomainsPasswordPolicyTag {
    key: string;
    value: string;
}

export interface IdentityDomainsPasswordPolicyTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface IdentityDomainsPolicyIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface IdentityDomainsPolicyIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface IdentityDomainsPolicyMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface IdentityDomainsPolicyPolicyType {
    ref: string;
    value: string;
}

export interface IdentityDomainsPolicyRule {
    name: string;
    ref: string;
    sequence: number;
    value: string;
}

export interface IdentityDomainsPolicyTag {
    key: string;
    value: string;
}

export interface IdentityDomainsPolicyTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface IdentityDomainsRuleConditionGroup {
    name: string;
    ref: string;
    type: string;
    value: string;
}

export interface IdentityDomainsRuleIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface IdentityDomainsRuleIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface IdentityDomainsRuleMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface IdentityDomainsRulePolicyType {
    ref: string;
    value: string;
}

export interface IdentityDomainsRuleReturn {
    name: string;
    returnGroovy: string;
    value: string;
}

export interface IdentityDomainsRuleTag {
    key: string;
    value: string;
}

export interface IdentityDomainsRuleTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface IdentityDomainsSecurityQuestionIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface IdentityDomainsSecurityQuestionIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface IdentityDomainsSecurityQuestionMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface IdentityDomainsSecurityQuestionQuestionText {
    default: boolean;
    locale: string;
    value: string;
}

export interface IdentityDomainsSecurityQuestionSettingIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface IdentityDomainsSecurityQuestionSettingIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface IdentityDomainsSecurityQuestionSettingMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface IdentityDomainsSecurityQuestionSettingTag {
    key: string;
    value: string;
}

export interface IdentityDomainsSecurityQuestionSettingTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface IdentityDomainsSecurityQuestionTag {
    key: string;
    value: string;
}

export interface IdentityDomainsSecurityQuestionTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface IdentityDomainsSelfRegistrationProfileAfterSubmitText {
    default: boolean;
    locale: string;
    value: string;
}

export interface IdentityDomainsSelfRegistrationProfileConsentText {
    default: boolean;
    locale: string;
    value: string;
}

export interface IdentityDomainsSelfRegistrationProfileDefaultGroup {
    display: string;
    ref: string;
    value: string;
}

export interface IdentityDomainsSelfRegistrationProfileDisplayName {
    default: boolean;
    locale: string;
    value: string;
}

export interface IdentityDomainsSelfRegistrationProfileEmailTemplate {
    display: string;
    ref: string;
    value: string;
}

export interface IdentityDomainsSelfRegistrationProfileFooterText {
    default: boolean;
    locale: string;
    value: string;
}

export interface IdentityDomainsSelfRegistrationProfileHeaderText {
    default: boolean;
    locale: string;
    value: string;
}

export interface IdentityDomainsSelfRegistrationProfileIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface IdentityDomainsSelfRegistrationProfileIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface IdentityDomainsSelfRegistrationProfileMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface IdentityDomainsSelfRegistrationProfileTag {
    key: string;
    value: string;
}

export interface IdentityDomainsSelfRegistrationProfileTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface IdentityDomainsSelfRegistrationProfileUserAttribute {
    deletable: boolean;
    fullyQualifiedAttributeName: string;
    metadata: string;
    seqNumber: number;
    value: string;
}

export interface IdentityDomainsSettingCertificateValidation {
    crlCheckOnOcspFailureEnabled: boolean;
    crlEnabled: boolean;
    crlLocation: string;
    crlRefreshInterval: number;
    ocspEnabled: boolean;
    ocspResponderUrl: string;
    ocspSettingsResponderUrlPreferred: boolean;
    ocspSigningCertificateAlias: string;
    ocspTimeoutDuration: number;
    ocspUnknownResponseStatusAllowed: boolean;
}

export interface IdentityDomainsSettingCloudGateCorsSettings {
    cloudGateCorsAllowNullOrigin: boolean;
    cloudGateCorsAllowedOrigins: string[];
    cloudGateCorsEnabled: boolean;
    cloudGateCorsExposedHeaders: string[];
    cloudGateCorsMaxAge: number;
}

export interface IdentityDomainsSettingCompanyName {
    locale: string;
    value: string;
}

export interface IdentityDomainsSettingDefaultCompanyName {
    locale: string;
    value: string;
}

export interface IdentityDomainsSettingDefaultImage {
    display: string;
    type: string;
    value: string;
}

export interface IdentityDomainsSettingDefaultLoginText {
    locale: string;
    value: string;
}

export interface IdentityDomainsSettingIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface IdentityDomainsSettingIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface IdentityDomainsSettingImage {
    display: string;
    type: string;
    value: string;
}

export interface IdentityDomainsSettingLoginText {
    locale: string;
    value: string;
}

export interface IdentityDomainsSettingMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface IdentityDomainsSettingPurgeConfig {
    resourceName: string;
    retentionPeriod: number;
}

export interface IdentityDomainsSettingTag {
    key: string;
    value: string;
}

export interface IdentityDomainsSettingTenantCustomClaim {
    allScopes: boolean;
    expression: boolean;
    mode: string;
    name: string;
    scopes: string[];
    tokenType: string;
    value: string;
}

export interface IdentityDomainsSettingTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface IdentityDomainsSmtpCredentialIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface IdentityDomainsSmtpCredentialIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface IdentityDomainsSmtpCredentialMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface IdentityDomainsSmtpCredentialTag {
    key: string;
    value: string;
}

export interface IdentityDomainsSmtpCredentialTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface IdentityDomainsSmtpCredentialUrnietfparamsscimschemasoracleidcsextensionselfChangeUser {
    allowSelfChange: boolean;
}

export interface IdentityDomainsSmtpCredentialUser {
    display: string;
    name: string;
    ocid: string;
    ref: string;
    value: string;
}

export interface IdentityDomainsSocialIdentityProviderIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface IdentityDomainsSocialIdentityProviderIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface IdentityDomainsSocialIdentityProviderJitProvAssignedGroup {
    display: string;
    ref: string;
    value: string;
}

export interface IdentityDomainsSocialIdentityProviderMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface IdentityDomainsSocialIdentityProviderRelayIdpParamMapping {
    relayParamKey: string;
    relayParamValue: string;
}

export interface IdentityDomainsSocialIdentityProviderTag {
    key: string;
    value: string;
}

export interface IdentityDomainsSocialIdentityProviderTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface IdentityDomainsUserAddress {
    country: string;
    formatted: string;
    locality: string;
    postalCode: string;
    primary: boolean;
    region: string;
    streetAddress: string;
    type: string;
}

export interface IdentityDomainsUserDbCredentialIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface IdentityDomainsUserDbCredentialIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface IdentityDomainsUserDbCredentialMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface IdentityDomainsUserDbCredentialTag {
    key: string;
    value: string;
}

export interface IdentityDomainsUserDbCredentialTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface IdentityDomainsUserDbCredentialUrnietfparamsscimschemasoracleidcsextensionselfChangeUser {
    allowSelfChange: boolean;
}

export interface IdentityDomainsUserDbCredentialUser {
    display: string;
    name: string;
    ocid: string;
    ref: string;
    value: string;
}

export interface IdentityDomainsUserEmail {
    pendingVerificationData: string;
    primary: boolean;
    secondary: boolean;
    type: string;
    value: string;
    verified: boolean;
}

export interface IdentityDomainsUserEntitlement {
    display: string;
    primary: boolean;
    type: string;
    value: string;
}

export interface IdentityDomainsUserGroup {
    dateAdded: string;
    display: string;
    externalId: string;
    membershipOcid: string;
    nonUniqueDisplay: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface IdentityDomainsUserIdcsCreatedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface IdentityDomainsUserIdcsLastModifiedBy {
    display: string;
    ocid: string;
    ref: string;
    type: string;
    value: string;
}

export interface IdentityDomainsUserIm {
    display: string;
    primary: boolean;
    type: string;
    value: string;
}

export interface IdentityDomainsUserMeta {
    created: string;
    lastModified: string;
    location: string;
    resourceType: string;
    version: string;
}

export interface IdentityDomainsUserName {
    familyName: string;
    formatted: string;
    givenName: string;
    honorificPrefix: string;
    honorificSuffix: string;
    middleName: string;
}

export interface IdentityDomainsUserPhoneNumber {
    display: string;
    primary: boolean;
    type: string;
    value: string;
    verified: boolean;
}

export interface IdentityDomainsUserPhoto {
    display: string;
    primary: boolean;
    type: string;
    value: string;
}

export interface IdentityDomainsUserRole {
    display: string;
    primary: boolean;
    type: string;
    value: string;
}

export interface IdentityDomainsUserTag {
    key: string;
    value: string;
}

export interface IdentityDomainsUserTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface IdentityDomainsUserUrnietfparamsscimschemasextensionenterprise20user {
    costCenter: string;
    department: string;
    division: string;
    employeeNumber: string;
    manager?: outputs.IdentityDomainsUserUrnietfparamsscimschemasextensionenterprise20userManager;
    organization: string;
}

export interface IdentityDomainsUserUrnietfparamsscimschemasextensionenterprise20userManager {
    displayName: string;
    ref: string;
    value: string;
}

export interface IdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionOciTags {
    definedTags?: outputs.IdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionOciTagsDefinedTag[];
    freeformTags?: outputs.IdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionOciTagsFreeformTag[];
    tagSlug: string;
}

export interface IdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionOciTagsDefinedTag {
    key: string;
    namespace: string;
    value: string;
}

export interface IdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionOciTagsFreeformTag {
    key: string;
    value: string;
}

export interface IdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionadaptiveUser {
    riskLevel: string;
    riskScores?: outputs.IdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionadaptiveUserRiskScore[];
}

export interface IdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionadaptiveUserRiskScore {
    lastUpdateTimestamp: string;
    ref: string;
    riskLevel: string;
    score: number;
    source: string;
    status: string;
    value: string;
}

export interface IdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensioncapabilitiesUser {
    canUseApiKeys: boolean;
    canUseAuthTokens: boolean;
    canUseConsole: boolean;
    canUseConsolePassword: boolean;
    canUseCustomerSecretKeys: boolean;
    canUseDbCredentials: boolean;
    canUseOauth2clientCredentials: boolean;
    canUseSmtpCredentials: boolean;
}

export interface IdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensiondbCredentialsUser {
    dbLoginAttempts: number;
    dbUserName: string;
}

export interface IdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensiondbUserUser {
    dbGlobalRoles: string[];
    domainLevelSchema: string;
    instanceLevelSchema: string;
    isDbUser: boolean;
    passwordVerifiers: outputs.IdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensiondbUserUserPasswordVerifier[];
}

export interface IdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensiondbUserUserPasswordVerifier {
    type: string;
    value: string;
}

export interface IdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionkerberosUserUser {
    realmUsers?: outputs.IdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionkerberosUserUserRealmUser[];
}

export interface IdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionkerberosUserUserRealmUser {
    principalName: string;
    realmName: string;
    ref: string;
    value: string;
}

export interface IdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUser {
    bypassCodes?: outputs.IdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserBypassCode[];
    devices?: outputs.IdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserDevice[];
    loginAttempts: number;
    mfaEnabledOn: string;
    mfaIgnoredApps: string[];
    mfaStatus: string;
    preferredAuthenticationFactor: string;
    preferredAuthenticationMethod: string;
    preferredDevice?: outputs.IdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserPreferredDevice;
    preferredThirdPartyVendor: string;
    trustedUserAgents?: outputs.IdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserTrustedUserAgent[];
}

export interface IdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserBypassCode {
    ref: string;
    value: string;
}

export interface IdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserDevice {
    authenticationMethod: string;
    display: string;
    factorStatus: string;
    factorType: string;
    lastSyncTime: string;
    ref: string;
    status: string;
    thirdPartyVendorName: string;
    value: string;
}

export interface IdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserPreferredDevice {
    display: string;
    ref: string;
    value: string;
}

export interface IdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserTrustedUserAgent {
    display: string;
    ref: string;
    value: string;
}

export interface IdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionpasswordStateUser {
    applicablePasswordPolicies: outputs.IdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionpasswordStateUserApplicablePasswordPolicy[];
    cantChange: boolean;
    cantExpire: boolean;
    expired: boolean;
    lastFailedValidationDate: string;
    lastSuccessfulSetDate: string;
    lastSuccessfulValidationDate: string;
    mustChange: boolean;
}

export interface IdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionpasswordStateUserApplicablePasswordPolicy {
    display: string;
    priority: number;
    ref: string;
    value: string;
}

export interface IdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionpasswordlessUser {
    factorIdentifier?: outputs.IdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionpasswordlessUserFactorIdentifier;
    factorMethod: string;
    factorType: string;
}

export interface IdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionpasswordlessUserFactorIdentifier {
    display: string;
    ref: string;
    value: string;
}

export interface IdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionposixUser {
    gecos: string;
    gidNumber: number;
    homeDirectory: string;
    loginShell: string;
    uidNumber: number;
}

export interface IdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionsecurityQuestionsUser {
    secQuestions?: outputs.IdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionsecurityQuestionsUserSecQuestion[];
}

export interface IdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionsecurityQuestionsUserSecQuestion {
    answer: string;
    hintText: string;
    ref: string;
    value: string;
}

export interface IdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionselfChangeUser {
    allowSelfChange: boolean;
}

export interface IdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionselfRegistrationUser {
    consentGranted: boolean;
    selfRegistrationProfile: outputs.IdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionselfRegistrationUserSelfRegistrationProfile;
    userToken: string;
}

export interface IdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionselfRegistrationUserSelfRegistrationProfile {
    display: string;
    ref: string;
    value: string;
}

export interface IdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionsffUser {
    sffAuthKeys: string;
}

export interface IdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionsocialAccountUser {
    socialAccounts?: outputs.IdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionsocialAccountUserSocialAccount[];
}

export interface IdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionsocialAccountUserSocialAccount {
    display: string;
    ref: string;
    value: string;
}

export interface IdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensiontermsOfUseUser {
    termsOfUseConsents?: outputs.IdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensiontermsOfUseUserTermsOfUseConsent[];
}

export interface IdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensiontermsOfUseUserTermsOfUseConsent {
    ref: string;
    value: string;
}

export interface IdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUser {
    apiKeys: outputs.IdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserApiKey[];
    authTokens: outputs.IdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserAuthToken[];
    customerSecretKeys: outputs.IdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserCustomerSecretKey[];
    dbCredentials: outputs.IdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserDbCredential[];
    oAuth2clientCredentials: outputs.IdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserOAuth2clientCredential[];
    smtpCredentials: outputs.IdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserSmtpCredential[];
}

export interface IdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserApiKey {
    key: string;
    ocid: string;
    ref: string;
    value: string;
}

export interface IdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserAuthToken {
    ocid: string;
    ref: string;
    value: string;
}

export interface IdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserCustomerSecretKey {
    ocid: string;
    ref: string;
    value: string;
}

export interface IdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserDbCredential {
    ocid: string;
    ref: string;
    value: string;
}

export interface IdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserOAuth2clientCredential {
    ocid: string;
    ref: string;
    value: string;
}

export interface IdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserCredentialsUserSmtpCredential {
    ocid: string;
    ref: string;
    value: string;
}

export interface IdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUser {
    lastFailedLoginDate: string;
    lastSuccessfulLoginDate: string;
    locked?: outputs.IdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserLocked;
    loginAttempts: number;
    maxConcurrentSessions: number;
    previousSuccessfulLoginDate: string;
    recoveryAttempts: number;
    recoveryEnrollAttempts: number;
    recoveryLocked?: outputs.IdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserRecoveryLocked;
}

export interface IdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserLocked {
    expired: boolean;
    lockDate: string;
    on: boolean;
    reason: number;
}

export interface IdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserStateUserRecoveryLocked {
    lockDate: string;
    on: boolean;
}

export interface IdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUser {
    accountRecoveryRequired: boolean;
    accounts: outputs.IdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserAccount[];
    appRoles: outputs.IdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserAppRole[];
    applicableAuthenticationTargetApps: outputs.IdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserApplicableAuthenticationTargetApp[];
    bypassNotification: boolean;
    creationMechanism: string;
    delegatedAuthenticationTargetApp?: outputs.IdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserDelegatedAuthenticationTargetApp;
    doNotShowGettingStarted: boolean;
    grants: outputs.IdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserGrant[];
    groupMembershipLastModified: string;
    idcsAppRolesLimitedToGroups: outputs.IdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserIdcsAppRolesLimitedToGroup[];
    isAccountRecoveryEnrolled: boolean;
    isAuthenticationDelegated: boolean;
    isFederatedUser: boolean;
    isGroupMembershipNormalized: boolean;
    isGroupMembershipSyncedToUsersGroups: boolean;
    notificationEmailTemplateId: string;
    preferredUiLandingPage: string;
    serviceUser: boolean;
    status: string;
    supportAccounts: outputs.IdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserSupportAccount[];
    syncedFromApp?: outputs.IdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserSyncedFromApp;
    userFlowControlledByExternalClient: boolean;
    userProvider: string;
    userTokens: outputs.IdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserUserToken[];
}

export interface IdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserAccount {
    active: boolean;
    appId: string;
    name: string;
    ref: string;
    value: string;
}

export interface IdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserAppRole {
    adminRole: boolean;
    appId: string;
    appName: string;
    display: string;
    legacyGroupName: string;
    ref: string;
    type: string;
    value: string;
}

export interface IdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserApplicableAuthenticationTargetApp {
    display: string;
    ref: string;
    targetRequestTimeout: number;
    type: string;
    value: string;
}

export interface IdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserDelegatedAuthenticationTargetApp {
    display: string;
    ref: string;
    type: string;
    value: string;
}

export interface IdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserGrant {
    appId: string;
    grantMechanism: string;
    grantorId: string;
    ref: string;
    value: string;
}

export interface IdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserIdcsAppRolesLimitedToGroup {
    display: string;
    idcsAppRoleId: string;
    ocid: string;
    ref: string;
    value: string;
}

export interface IdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserSupportAccount {
    ocid: string;
    ref: string;
    userId: string;
    userProvider: string;
    value: string;
}

export interface IdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserSyncedFromApp {
    display: string;
    ref: string;
    type: string;
    value: string;
}

export interface IdentityDomainsUserUrnietfparamsscimschemasoracleidcsextensionuserUserUserToken {
    ref: string;
    value: string;
}

export interface IdentityDomainsUserX509certificate {
    display: string;
    primary: boolean;
    type: string;
    value: string;
}

export interface IdentityDynamicGroupTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface IdentityGroupTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface IdentityIdentityProviderTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface IdentityIdpGroupMappingTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface IdentityImportStandardTagsManagementTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface IdentityNetworkSourceTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface IdentityNetworkSourceVirtualSourceList {
    ipRanges: string[];
    vcnId: string;
}

export interface IdentityPolicyTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface IdentitySmtpCredentialTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface IdentityTagDefaultTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface IdentityTagNamespaceTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface IdentityTagTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface IdentityTagValidator {
    validatorType: string;
    values: string[];
}

export interface IdentityUiPasswordTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface IdentityUserCapabilitiesManagementTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface IdentityUserCapability {
    canUseApiKeys: boolean;
    canUseAuthTokens: boolean;
    canUseConsolePassword: boolean;
    canUseCustomerSecretKeys: boolean;
    canUseDbCredentials: boolean;
    canUseOauth2clientCredentials: boolean;
    canUseSmtpCredentials: boolean;
}

export interface IdentityUserGroupMembershipTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface IdentityUserTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface IntegrationIntegrationInstanceAlternateCustomEndpoint {
    alias: string;
    certificateSecretId: string;
    certificateSecretVersion: number;
    hostname: string;
}

export interface IntegrationIntegrationInstanceAttachment {
    isImplicit: boolean;
    targetId: string;
    targetInstanceUrl: string;
    targetRole: string;
    targetServiceType: string;
}

export interface IntegrationIntegrationInstanceCustomEndpoint {
    alias: string;
    certificateSecretId: string;
    certificateSecretVersion: number;
    hostname: string;
}

export interface IntegrationIntegrationInstanceIdcsInfo {
    idcsAppDisplayName: string;
    idcsAppId: string;
    idcsAppLocationUrl: string;
    idcsAppName: string;
    instancePrimaryAudienceUrl: string;
}

export interface IntegrationIntegrationInstanceNetworkEndpointDetails {
    allowlistedHttpIps: string[];
    allowlistedHttpVcns?: outputs.IntegrationIntegrationInstanceNetworkEndpointDetailsAllowlistedHttpVcn[];
    isIntegrationVcnAllowlisted: boolean;
    networkEndpointType: string;
}

export interface IntegrationIntegrationInstanceNetworkEndpointDetailsAllowlistedHttpVcn {
    allowlistedIps: string[];
    id: string;
}

export interface IntegrationIntegrationInstancePrivateEndpointOutboundConnection {
    nsgIds: string[];
    outboundConnectionType: string;
    subnetId: string;
}

export interface IntegrationIntegrationInstanceTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface IntegrationPrivateEndpointOutboundConnectionTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface JmsFleetAdvancedFeatureConfigurationAdvancedUsageTracking {
    isEnabled: boolean;
}

export interface JmsFleetAdvancedFeatureConfigurationCryptoEventAnalysis {
    isEnabled: boolean;
    summarizedEventsLog?: outputs.JmsFleetAdvancedFeatureConfigurationCryptoEventAnalysisSummarizedEventsLog;
}

export interface JmsFleetAdvancedFeatureConfigurationCryptoEventAnalysisSummarizedEventsLog {
    logGroupId: string;
    logId: string;
}

export interface JmsFleetAdvancedFeatureConfigurationJavaMigrationAnalysis {
    isEnabled: boolean;
}

export interface JmsFleetAdvancedFeatureConfigurationJfrRecording {
    isEnabled: boolean;
}

export interface JmsFleetAdvancedFeatureConfigurationLcm {
    isEnabled: boolean;
    postInstallationActions?: outputs.JmsFleetAdvancedFeatureConfigurationLcmPostInstallationActions;
}

export interface JmsFleetAdvancedFeatureConfigurationLcmPostInstallationActions {
    addLoggingHandler: boolean;
    disabledTlsVersions: string[];
    globalLoggingLevel: string;
    minimumKeySizeSettings?: outputs.JmsFleetAdvancedFeatureConfigurationLcmPostInstallationActionsMinimumKeySizeSettings;
    proxies?: outputs.JmsFleetAdvancedFeatureConfigurationLcmPostInstallationActionsProxies;
    shouldReplaceCertificatesOperatingSystem: boolean;
}

export interface JmsFleetAdvancedFeatureConfigurationLcmPostInstallationActionsMinimumKeySizeSettings {
    certpaths?: outputs.JmsFleetAdvancedFeatureConfigurationLcmPostInstallationActionsMinimumKeySizeSettingsCertpath[];
    jars?: outputs.JmsFleetAdvancedFeatureConfigurationLcmPostInstallationActionsMinimumKeySizeSettingsJar[];
    tls?: outputs.JmsFleetAdvancedFeatureConfigurationLcmPostInstallationActionsMinimumKeySizeSettingsTl[];
}

export interface JmsFleetAdvancedFeatureConfigurationLcmPostInstallationActionsMinimumKeySizeSettingsCertpath {
    keySize: number;
    name: string;
}

export interface JmsFleetAdvancedFeatureConfigurationLcmPostInstallationActionsMinimumKeySizeSettingsJar {
    keySize: number;
    name: string;
}

export interface JmsFleetAdvancedFeatureConfigurationLcmPostInstallationActionsMinimumKeySizeSettingsTl {
    keySize: number;
    name: string;
}

export interface JmsFleetAdvancedFeatureConfigurationLcmPostInstallationActionsProxies {
    ftpProxyHost: string;
    ftpProxyPort: number;
    httpProxyHost: string;
    httpProxyPort: number;
    httpsProxyHost: string;
    httpsProxyPort: number;
    socksProxyHost: string;
    socksProxyPort: number;
    useSystemProxies: boolean;
}

export interface JmsFleetAdvancedFeatureConfigurationPerformanceTuningAnalysis {
    isEnabled: boolean;
}

export interface JmsFleetAdvancedFeatureConfigurationTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface JmsFleetInventoryLog {
    logGroupId: string;
    logId: string;
}

export interface JmsFleetOperationLog {
    logGroupId: string;
    logId: string;
}

export interface JmsFleetTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface JmsJavaDownloadsJavaDownloadReportCreatedBy {
    displayName: string;
    email: string;
    id: string;
}

export interface JmsJavaDownloadsJavaDownloadReportTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface JmsJavaDownloadsJavaDownloadTokenCreatedBy {
    displayName: string;
    email: string;
    id: string;
}

export interface JmsJavaDownloadsJavaDownloadTokenLastUpdatedBy {
    displayName: string;
    email: string;
    id: string;
}

export interface JmsJavaDownloadsJavaDownloadTokenTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface JmsJavaDownloadsJavaLicenseAcceptanceRecordCreatedBy {
    displayName: string;
    email: string;
    id: string;
}

export interface JmsJavaDownloadsJavaLicenseAcceptanceRecordLastUpdatedBy {
    displayName: string;
    email: string;
    id: string;
}

export interface JmsJavaDownloadsJavaLicenseAcceptanceRecordTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface JmsJmsPluginTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface KmsEkmsPrivateEndpointTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface KmsEncryptedDataTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface KmsGeneratedKeyKeyShape {
    algorithm: string;
    curveId: string;
    length: number;
}

export interface KmsGeneratedKeyTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface KmsKeyAutoKeyRotationDetails {
    lastRotationMessage: string;
    lastRotationStatus: string;
    rotationIntervalInDays: number;
    timeOfLastRotation: string;
    timeOfNextRotation: string;
    timeOfScheduleStart: string;
}

export interface KmsKeyExternalKeyReference {
    externalKeyId: string;
}

export interface KmsKeyExternalKeyReferenceDetail {
    externalKeyId: string;
    externalKeyVersionId: string;
}

export interface KmsKeyKeyShape {
    algorithm: string;
    curveId: string;
    length: number;
}

export interface KmsKeyReplicaDetail {
    replicationId: string;
}

export interface KmsKeyRestoreFromFile {
    contentLength: string;
    contentMd5?: string;
    restoreKeyFromFileDetails: string;
}

export interface KmsKeyRestoreFromObjectStore {
    bucket?: string;
    destination: string;
    namespace?: string;
    object?: string;
    uri?: string;
}

export interface KmsKeyTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface KmsKeyVersionExternalKeyReferenceDetail {
    externalKeyId: string;
    externalKeyVersionId: string;
}

export interface KmsKeyVersionReplicaDetail {
    replicationId: string;
}

export interface KmsKeyVersionTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface KmsSignTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface KmsVaultExternalKeyManagerMetadata {
    externalVaultEndpointUrl: string;
    oauthMetadata: outputs.KmsVaultExternalKeyManagerMetadataOauthMetadata;
    privateEndpointId: string;
}

export interface KmsVaultExternalKeyManagerMetadataOauthMetadata {
    clientAppId: string;
    clientAppSecret: string;
    idcsAccountNameUrl: string;
}

export interface KmsVaultExternalKeyManagerMetadataSummary {
    externalVaultEndpointUrl: string;
    oauthMetadataSummaries: outputs.KmsVaultExternalKeyManagerMetadataSummaryOauthMetadataSummary[];
    privateEndpointId: string;
    vendor: string;
}

export interface KmsVaultExternalKeyManagerMetadataSummaryOauthMetadataSummary {
    clientAppId: string;
    idcsAccountNameUrl: string;
}

export interface KmsVaultReplicaDetail {
    replicationId: string;
}

export interface KmsVaultReplicationTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface KmsVaultRestoreFromFile {
    contentLength: string;
    contentMd5?: string;
    restoreVaultFromFileDetails: string;
}

export interface KmsVaultRestoreFromObjectStore {
    bucket?: string;
    destination: string;
    namespace?: string;
    object?: string;
    uri?: string;
}

export interface KmsVaultTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface KmsVerifyTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface LicenseManagerConfigurationTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface LicenseManagerLicenseRecordTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface LicenseManagerProductLicenseImage {
    id: string;
    listingId: string;
    listingName: string;
    packageVersion: string;
    publisher: string;
}

export interface LicenseManagerProductLicenseTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface LimitsQuotaLock {
    message: string;
    relatedResourceId: string;
    timeCreated: string;
    type: string;
}

export interface LimitsQuotaTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface LoadBalancerBackendSetBackend {
    backup: boolean;
    drain: boolean;
    ipAddress: string;
    maxConnections: number;
    name: string;
    offline: boolean;
    port: number;
    weight: number;
}

export interface LoadBalancerBackendSetHealthChecker {
    intervalMs?: number;
    isForcePlainText: boolean;
    port?: number;
    protocol: string;
    responseBodyRegex: string;
    retries?: number;
    returnCode: number;
    timeoutInMillis?: number;
    urlPath: string;
}

export interface LoadBalancerBackendSetLbCookieSessionPersistenceConfiguration {
    cookieName: string;
    disableFallback: boolean;
    domain: string;
    isHttpOnly: boolean;
    isSecure: boolean;
    maxAgeInSeconds: number;
    path: string;
}

export interface LoadBalancerBackendSetSessionPersistenceConfiguration {
    cookieName: string;
    disableFallback?: boolean;
}

export interface LoadBalancerBackendSetSslConfiguration {
    certificateIds?: string[];
    certificateName?: string;
    cipherSuiteName: string;
    protocols: string[];
    serverOrderPreference: string;
    trustedCertificateAuthorityIds?: string[];
    verifyDepth?: number;
    verifyPeerCertificate?: boolean;
}

export interface LoadBalancerBackendSetTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface LoadBalancerBackendTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface LoadBalancerBackendsetBackend {
    backup: boolean;
    drain: boolean;
    ipAddress: string;
    maxConnections: number;
    name: string;
    offline: boolean;
    port: number;
    weight: number;
}

export interface LoadBalancerBackendsetHealthChecker {
    intervalMs?: number;
    isForcePlainText: boolean;
    port?: number;
    protocol: string;
    responseBodyRegex: string;
    retries?: number;
    returnCode: number;
    timeoutInMillis?: number;
    urlPath: string;
}

export interface LoadBalancerBackendsetLbCookieSessionPersistenceConfiguration {
    cookieName: string;
    disableFallback: boolean;
    domain: string;
    isHttpOnly: boolean;
    isSecure: boolean;
    maxAgeInSeconds: number;
    path: string;
}

export interface LoadBalancerBackendsetSessionPersistenceConfiguration {
    cookieName: string;
    disableFallback?: boolean;
}

export interface LoadBalancerBackendsetSslConfiguration {
    certificateIds?: string[];
    certificateName?: string;
    cipherSuiteName: string;
    protocols: string[];
    serverOrderPreference: string;
    trustedCertificateAuthorityIds?: string[];
    verifyDepth?: number;
    verifyPeerCertificate?: boolean;
}

export interface LoadBalancerBackendsetTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface LoadBalancerCertificateTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface LoadBalancerHostnameTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface LoadBalancerIpAddressDetail {
    ipAddress: string;
    isPublic: boolean;
    reservedIps: outputs.LoadBalancerIpAddressDetailReservedIp[];
}

export interface LoadBalancerIpAddressDetailReservedIp {
    id: string;
}

export interface LoadBalancerListenerConnectionConfiguration {
    backendTcpProxyProtocolVersion?: number;
    idleTimeoutInSeconds: string;
}

export interface LoadBalancerListenerSslConfiguration {
    certificateIds?: string[];
    certificateName?: string;
    cipherSuiteName: string;
    hasSessionResumption: boolean;
    protocols: string[];
    serverOrderPreference: string;
    trustedCertificateAuthorityIds?: string[];
    verifyDepth?: number;
    verifyPeerCertificate?: boolean;
}

export interface LoadBalancerListenerTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface LoadBalancerLoadBalancerIpAddressDetail {
    ipAddress: string;
    isPublic: boolean;
    reservedIps: outputs.LoadBalancerLoadBalancerIpAddressDetailReservedIp[];
}

export interface LoadBalancerLoadBalancerIpAddressDetailReservedIp {
    id: string;
}

export interface LoadBalancerLoadBalancerReservedIp {
    id: string;
}

export interface LoadBalancerLoadBalancerRoutingPolicyRule {
    actions: outputs.LoadBalancerLoadBalancerRoutingPolicyRuleAction[];
    condition: string;
    name: string;
}

export interface LoadBalancerLoadBalancerRoutingPolicyRuleAction {
    backendSetName: string;
    name: string;
}

export interface LoadBalancerLoadBalancerRoutingPolicyTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface LoadBalancerLoadBalancerShapeDetails {
    maximumBandwidthInMbps: number;
    minimumBandwidthInMbps: number;
}

export interface LoadBalancerLoadBalancerTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface LoadBalancerPathRouteSetPathRoute {
    backendSetName: string;
    path: string;
    pathMatchType: outputs.LoadBalancerPathRouteSetPathRoutePathMatchType;
}

export interface LoadBalancerPathRouteSetPathRoutePathMatchType {
    matchType: string;
}

export interface LoadBalancerPathRouteSetTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface LoadBalancerReservedIp {
    id: string;
}

export interface LoadBalancerRuleSetItem {
    action: string;
    allowedMethods: string[];
    areInvalidCharactersAllowed: boolean;
    conditions?: outputs.LoadBalancerRuleSetItemCondition[];
    defaultMaxConnections: number;
    description: string;
    header: string;
    httpLargeHeaderSizeInKb: number;
    ipMaxConnections?: outputs.LoadBalancerRuleSetItemIpMaxConnection[];
    prefix: string;
    redirectUri?: outputs.LoadBalancerRuleSetItemRedirectUri;
    responseCode: number;
    statusCode: number;
    suffix: string;
    value: string;
}

export interface LoadBalancerRuleSetItemCondition {
    attributeName: string;
    attributeValue: string;
    operator: string;
}

export interface LoadBalancerRuleSetItemIpMaxConnection {
    ipAddresses: string[];
    maxConnections: number;
}

export interface LoadBalancerRuleSetItemRedirectUri {
    host: string;
    path: string;
    port: number;
    protocol: string;
    query: string;
}

export interface LoadBalancerRuleSetTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface LoadBalancerShapeDetails {
    maximumBandwidthInMbps: number;
    minimumBandwidthInMbps: number;
}

export interface LoadBalancerSslCipherSuiteTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface LoadBalancerTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface LogAnalyticsLogAnalyticsEntityMetadata {
    items?: outputs.LogAnalyticsLogAnalyticsEntityMetadataItem[];
}

export interface LogAnalyticsLogAnalyticsEntityMetadataItem {
    name: string;
    type: string;
    value: string;
}

export interface LogAnalyticsLogAnalyticsEntityTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface LogAnalyticsLogAnalyticsImportCustomContentChangeList {
    conflictFieldDisplayNames: string[];
    conflictParserNames: string[];
    conflictSourceNames: string[];
    createdFieldDisplayNames: string[];
    createdParserNames: string[];
    createdSourceNames: string[];
    updatedFieldDisplayNames: string[];
    updatedParserNames: string[];
    updatedSourceNames: string[];
}

export interface LogAnalyticsLogAnalyticsImportCustomContentTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface LogAnalyticsLogAnalyticsLogGroupTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface LogAnalyticsLogAnalyticsObjectCollectionRuleOverride {
    matchType: string;
    matchValue: string;
    propertyName: string;
    propertyValue: string;
}

export interface LogAnalyticsLogAnalyticsObjectCollectionRuleTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface LogAnalyticsLogAnalyticsPreferencesManagementItem {
    name?: string;
    value?: string;
}

export interface LogAnalyticsLogAnalyticsPreferencesManagementTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface LogAnalyticsLogAnalyticsResourceCategoriesManagementTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface LogAnalyticsLogAnalyticsUnprocessedDataBucketManagementTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface LogAnalyticsNamespaceIngestTimeRuleAction {
    compartmentId: string;
    dimensions: string[];
    metricName: string;
    namespace: string;
    resourceGroup: string;
    type: string;
}

export interface LogAnalyticsNamespaceIngestTimeRuleConditions {
    additionalConditions?: outputs.LogAnalyticsNamespaceIngestTimeRuleConditionsAdditionalCondition[];
    fieldName: string;
    fieldOperator: string;
    fieldValue: string;
    kind: string;
}

export interface LogAnalyticsNamespaceIngestTimeRuleConditionsAdditionalCondition {
    conditionField: string;
    conditionOperator: string;
    conditionValue: string;
}

export interface LogAnalyticsNamespaceIngestTimeRuleTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface LogAnalyticsNamespaceIngestTimeRulesManagementTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface LogAnalyticsNamespaceScheduledTaskAction {
    compartmentIdInSubtree: boolean;
    dataType: string;
    metricExtraction?: outputs.LogAnalyticsNamespaceScheduledTaskActionMetricExtraction;
    purgeCompartmentId: string;
    purgeDuration: string;
    queryString: string;
    savedSearchId: string;
    type: string;
}

export interface LogAnalyticsNamespaceScheduledTaskActionMetricExtraction {
    compartmentId: string;
    metricName: string;
    namespace: string;
    resourceGroup: string;
}

export interface LogAnalyticsNamespaceScheduledTaskSchedules {
    schedules: outputs.LogAnalyticsNamespaceScheduledTaskSchedulesSchedule[];
}

export interface LogAnalyticsNamespaceScheduledTaskSchedulesSchedule {
    expression: string;
    misfirePolicy: string;
    recurringInterval: string;
    repeatCount: number;
    timeZone: string;
    type: string;
}

export interface LogAnalyticsNamespaceScheduledTaskTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface LogAnalyticsNamespaceTimeouts {
    create?: string;
    update?: string;
}

export interface LoggingLogConfiguration {
    compartmentId: string;
    source: outputs.LoggingLogConfigurationSource;
}

export interface LoggingLogConfigurationSource {
    category: string;
    parameters: {[key: string]: string};
    resource: string;
    service: string;
    sourceType: string;
}

export interface LoggingLogGroupTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface LoggingLogSavedSearchTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface LoggingLogTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface LoggingUnifiedAgentConfigurationGroupAssociation {
    groupLists: string[];
}

export interface LoggingUnifiedAgentConfigurationServiceConfiguration {
    applicationConfigurations?: outputs.LoggingUnifiedAgentConfigurationServiceConfigurationApplicationConfiguration[];
    configurationType: string;
    destination?: outputs.LoggingUnifiedAgentConfigurationServiceConfigurationDestination;
    sources?: outputs.LoggingUnifiedAgentConfigurationServiceConfigurationSource[];
    unifiedAgentConfigurationFilters?: outputs.LoggingUnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilter[];
}

export interface LoggingUnifiedAgentConfigurationServiceConfigurationApplicationConfiguration {
    destination: outputs.LoggingUnifiedAgentConfigurationServiceConfigurationApplicationConfigurationDestination;
    source?: outputs.LoggingUnifiedAgentConfigurationServiceConfigurationApplicationConfigurationSource;
    sourceType: string;
    sources?: outputs.LoggingUnifiedAgentConfigurationServiceConfigurationApplicationConfigurationSource[];
    unifiedAgentConfigurationFilter?: outputs.LoggingUnifiedAgentConfigurationServiceConfigurationApplicationConfigurationUnifiedAgentConfigurationFilter;
}

export interface LoggingUnifiedAgentConfigurationServiceConfigurationApplicationConfigurationDestination {
    compartmentId: string;
    metricsNamespace: string;
}

export interface LoggingUnifiedAgentConfigurationServiceConfigurationApplicationConfigurationSource {
    advancedOptions?: outputs.LoggingUnifiedAgentConfigurationServiceConfigurationApplicationConfigurationSourceAdvancedOptions;
    name: string;
    parser?: outputs.LoggingUnifiedAgentConfigurationServiceConfigurationApplicationConfigurationSourceParser;
    paths: string[];
    sourceType: string;
}

export interface LoggingUnifiedAgentConfigurationServiceConfigurationApplicationConfigurationSourceAdvancedOptions {
    isReadFromHead: boolean;
}

export interface LoggingUnifiedAgentConfigurationServiceConfigurationApplicationConfigurationSourceParser {
    delimiter: string;
    expression: string;
    fieldTimeKey: string;
    formatFirstline: string;
    formats: string[];
    grokFailureKey: string;
    grokNameKey: string;
    isEstimateCurrentEvent: boolean;
    isKeepTimeKey: boolean;
    isMergeCriFields: boolean;
    isNullEmptyString: boolean;
    isSupportColonlessIdent: boolean;
    isWithPriority: boolean;
    keys: string[];
    messageFormat: string;
    messageKey: string;
    multiLineStartRegexp: string;
    nestedParser?: outputs.LoggingUnifiedAgentConfigurationServiceConfigurationApplicationConfigurationSourceParserNestedParser;
    nullValuePattern: string;
    parseNested: boolean;
    parserType: string;
    patterns?: outputs.LoggingUnifiedAgentConfigurationServiceConfigurationApplicationConfigurationSourceParserPattern[];
    recordInput?: outputs.LoggingUnifiedAgentConfigurationServiceConfigurationApplicationConfigurationSourceParserRecordInput;
    rfc5424timeFormat: string;
    separator: string;
    syslogParserType: string;
    timeFormat: string;
    timeType: string;
    timeoutInMilliseconds: number;
    types: {[key: string]: string};
}

export interface LoggingUnifiedAgentConfigurationServiceConfigurationApplicationConfigurationSourceParserNestedParser {
    fieldTimeKey: string;
    isKeepTimeKey: boolean;
    parseNested: boolean;
    separator: string;
    timeFormat: string;
    timeType: string;
}

export interface LoggingUnifiedAgentConfigurationServiceConfigurationApplicationConfigurationSourceParserPattern {
    fieldTimeFormat: string;
    fieldTimeKey: string;
    fieldTimeZone: string;
    name: string;
    pattern: string;
}

export interface LoggingUnifiedAgentConfigurationServiceConfigurationApplicationConfigurationSourceParserRecordInput {
    dimensions: {[key: string]: string};
    namespace: string;
    resourceGroup: string;
}

export interface LoggingUnifiedAgentConfigurationServiceConfigurationApplicationConfigurationUnifiedAgentConfigurationFilter {
    allowLists: string[];
    denyLists: string[];
    filterType: string;
    name: string;
}

export interface LoggingUnifiedAgentConfigurationServiceConfigurationDestination {
    logObjectId: string;
    operationalMetricsConfiguration?: outputs.LoggingUnifiedAgentConfigurationServiceConfigurationDestinationOperationalMetricsConfiguration;
}

export interface LoggingUnifiedAgentConfigurationServiceConfigurationDestinationOperationalMetricsConfiguration {
    destination: outputs.LoggingUnifiedAgentConfigurationServiceConfigurationDestinationOperationalMetricsConfigurationDestination;
    source: outputs.LoggingUnifiedAgentConfigurationServiceConfigurationDestinationOperationalMetricsConfigurationSource;
}

export interface LoggingUnifiedAgentConfigurationServiceConfigurationDestinationOperationalMetricsConfigurationDestination {
    compartmentId: string;
}

export interface LoggingUnifiedAgentConfigurationServiceConfigurationDestinationOperationalMetricsConfigurationSource {
    metrics: string[];
    recordInput: outputs.LoggingUnifiedAgentConfigurationServiceConfigurationDestinationOperationalMetricsConfigurationSourceRecordInput;
    type: string;
}

export interface LoggingUnifiedAgentConfigurationServiceConfigurationDestinationOperationalMetricsConfigurationSourceRecordInput {
    namespace: string;
    resourceGroup: string;
}

export interface LoggingUnifiedAgentConfigurationServiceConfigurationSource {
    advancedOptions?: outputs.LoggingUnifiedAgentConfigurationServiceConfigurationSourceAdvancedOptions;
    channels: string[];
    customPlugin: string;
    name: string;
    parser?: outputs.LoggingUnifiedAgentConfigurationServiceConfigurationSourceParser;
    paths: string[];
    sourceType: string;
}

export interface LoggingUnifiedAgentConfigurationServiceConfigurationSourceAdvancedOptions {
    isReadFromHead: boolean;
}

export interface LoggingUnifiedAgentConfigurationServiceConfigurationSourceParser {
    delimiter: string;
    expression: string;
    fieldTimeKey: string;
    formatFirstline: string;
    formats: string[];
    grokFailureKey: string;
    grokNameKey: string;
    isEstimateCurrentEvent: boolean;
    isKeepTimeKey: boolean;
    isMergeCriFields: boolean;
    isNullEmptyString: boolean;
    isSupportColonlessIdent: boolean;
    isWithPriority: boolean;
    keys: string[];
    messageFormat: string;
    messageKey: string;
    multiLineStartRegexp: string;
    nestedParser?: outputs.LoggingUnifiedAgentConfigurationServiceConfigurationSourceParserNestedParser;
    nullValuePattern: string;
    parseNested: boolean;
    parserType: string;
    patterns?: outputs.LoggingUnifiedAgentConfigurationServiceConfigurationSourceParserPattern[];
    recordInput?: outputs.LoggingUnifiedAgentConfigurationServiceConfigurationSourceParserRecordInput;
    rfc5424timeFormat: string;
    separator: string;
    syslogParserType: string;
    timeFormat: string;
    timeType: string;
    timeoutInMilliseconds: number;
    types: {[key: string]: string};
}

export interface LoggingUnifiedAgentConfigurationServiceConfigurationSourceParserNestedParser {
    fieldTimeKey: string;
    isKeepTimeKey: boolean;
    parseNested: boolean;
    separator: string;
    timeFormat: string;
    timeType: string;
}

export interface LoggingUnifiedAgentConfigurationServiceConfigurationSourceParserPattern {
    fieldTimeFormat: string;
    fieldTimeKey: string;
    fieldTimeZone: string;
    name: string;
    pattern: string;
}

export interface LoggingUnifiedAgentConfigurationServiceConfigurationSourceParserRecordInput {
    dimensions: {[key: string]: string};
    namespace: string;
    resourceGroup: string;
}

export interface LoggingUnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilter {
    allowLists?: outputs.LoggingUnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilterAllowList[];
    customFilterType: string;
    customSections?: outputs.LoggingUnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilterCustomSection[];
    denyLists?: outputs.LoggingUnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilterDenyList[];
    emitInvalidRecordToError: boolean;
    filterType: string;
    hashValueField: string;
    injectKeyPrefix: string;
    isAutoTypecastEnabled: boolean;
    isRenewRecordEnabled: boolean;
    isRubyEnabled: boolean;
    keepKeys: string[];
    keyName: string;
    name: string;
    params: {[key: string]: string};
    parser?: outputs.LoggingUnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilterParser;
    recordLists?: outputs.LoggingUnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilterRecordList[];
    removeKeyNameField: boolean;
    removeKeys: string[];
    renewTimeKey: string;
    replaceInvalidSequence: boolean;
    reserveData: boolean;
    reserveTime: boolean;
}

export interface LoggingUnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilterAllowList {
    key: string;
    pattern: string;
}

export interface LoggingUnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilterCustomSection {
    name: string;
    params: {[key: string]: string};
}

export interface LoggingUnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilterDenyList {
    key: string;
    pattern: string;
}

export interface LoggingUnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilterParser {
    delimiter: string;
    expression: string;
    fieldTimeKey: string;
    formatFirstline: string;
    formats: string[];
    grokFailureKey: string;
    grokNameKey: string;
    isEstimateCurrentEvent: boolean;
    isKeepTimeKey: boolean;
    isMergeCriFields: boolean;
    isNullEmptyString: boolean;
    isSupportColonlessIdent: boolean;
    isWithPriority: boolean;
    keys: string[];
    messageFormat: string;
    messageKey: string;
    multiLineStartRegexp: string;
    nestedParser?: outputs.LoggingUnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilterParserNestedParser;
    nullValuePattern: string;
    parseNested: boolean;
    parserType: string;
    patterns?: outputs.LoggingUnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilterParserPattern[];
    recordInput?: outputs.LoggingUnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilterParserRecordInput;
    rfc5424timeFormat: string;
    separator: string;
    syslogParserType: string;
    timeFormat: string;
    timeType: string;
    timeoutInMilliseconds: number;
    types: {[key: string]: string};
}

export interface LoggingUnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilterParserNestedParser {
    fieldTimeKey: string;
    isKeepTimeKey: boolean;
    parseNested: boolean;
    separator: string;
    timeFormat: string;
    timeType: string;
}

export interface LoggingUnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilterParserPattern {
    fieldTimeFormat: string;
    fieldTimeKey: string;
    fieldTimeZone: string;
    name: string;
    pattern: string;
}

export interface LoggingUnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilterParserRecordInput {
    dimensions: {[key: string]: string};
    namespace: string;
    resourceGroup: string;
}

export interface LoggingUnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilterRecordList {
    key: string;
    value: string;
}

export interface LoggingUnifiedAgentConfigurationTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface ManagementAgentManagementAgentDataSourceList {
    allowMetrics: string;
    compartmentId: string;
    connectionTimeout: number;
    isDaemonSet: boolean;
    key: string;
    metricDimensions: outputs.ManagementAgentManagementAgentDataSourceListMetricDimension[];
    name: string;
    namespace: string;
    proxyUrl: string;
    readDataLimit: number;
    readTimeout: number;
    resourceGroup: string;
    scheduleMins: number;
    state: string;
    timeCreated: string;
    timeUpdated: string;
    type: string;
    url: string;
}

export interface ManagementAgentManagementAgentDataSourceListMetricDimension {
    name: string;
    value: string;
}

export interface ManagementAgentManagementAgentDataSourceMetricDimension {
    name: string;
    value: string;
}

export interface ManagementAgentManagementAgentDataSourceSummaryList {
    isDaemonSet: boolean;
    key: string;
    name: string;
    type: string;
}

export interface ManagementAgentManagementAgentDataSourceTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface ManagementAgentManagementAgentInstallKeyTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface ManagementAgentManagementAgentManagementAgentProperty {
    name: string;
    units: string;
    values: string[];
}

export interface ManagementAgentManagementAgentPluginList {
    isEnabled: boolean;
    pluginDisplayName: string;
    pluginId: string;
    pluginName: string;
    pluginStatus: string;
    pluginStatusMessage: string;
    pluginVersion: string;
}

export interface ManagementAgentManagementAgentTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface ManagementDashboardManagementDashboardsImportTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface MarketplaceAcceptedAgreementTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface MarketplacePublicationIcon {
    contentUrl: string;
    fileExtension: string;
    mimeType: string;
    name: string;
}

export interface MarketplacePublicationPackageDetails {
    eulas: outputs.MarketplacePublicationPackageDetailsEula[];
    imageId: string;
    operatingSystem: outputs.MarketplacePublicationPackageDetailsOperatingSystem;
    packageType: string;
    packageVersion: string;
}

export interface MarketplacePublicationPackageDetailsEula {
    eulaType: string;
    licenseText: string;
}

export interface MarketplacePublicationPackageDetailsOperatingSystem {
    name: string;
}

export interface MarketplacePublicationSupportContact {
    email: string;
    name: string;
    phone: string;
    subject: string;
}

export interface MarketplacePublicationSupportedOperatingSystem {
    name: string;
}

export interface MarketplacePublicationTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface MediaServicesMediaAssetLock {
    compartmentId: string;
    message: string;
    relatedResourceId: string;
    timeCreated: string;
    type: string;
}

export interface MediaServicesMediaAssetMediaAssetTag {
    type: string;
    value: string;
}

export interface MediaServicesMediaAssetMetadata {
    metadata: string;
}

export interface MediaServicesMediaAssetTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface MediaServicesMediaWorkflowConfigurationLock {
    compartmentId: string;
    message: string;
    relatedResourceId: string;
    timeCreated: string;
    type: string;
}

export interface MediaServicesMediaWorkflowConfigurationTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface MediaServicesMediaWorkflowJobLock {
    compartmentId: string;
    message: string;
    relatedResourceId: string;
    timeCreated: string;
    type: string;
}

export interface MediaServicesMediaWorkflowJobOutput {
    assetType: string;
    bucket: string;
    id: string;
    namespace: string;
    object: string;
}

export interface MediaServicesMediaWorkflowJobTaskLifecycleState {
    key: string;
    lifecycleDetails: string;
    state: string;
}

export interface MediaServicesMediaWorkflowJobTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface MediaServicesMediaWorkflowLock {
    compartmentId: string;
    message: string;
    relatedResourceId: string;
    timeCreated: string;
    type: string;
}

export interface MediaServicesMediaWorkflowTask {
    enableParameterReference: string;
    enableWhenReferencedParameterEquals: {[key: string]: string};
    key: string;
    parameters: string;
    prerequisites: string[];
    type: string;
    version: string;
}

export interface MediaServicesMediaWorkflowTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface MediaServicesStreamCdnConfigConfig {
    edgeHostname: string;
    edgePathPrefix: string;
    edgeTokenKey: string;
    edgeTokenSalt: string;
    isEdgeTokenAuth: boolean;
    originAuthSecretKeyA: string;
    originAuthSecretKeyB: string;
    originAuthSecretKeyNonceA: string;
    originAuthSecretKeyNonceB: string;
    originAuthSignEncryption: string;
    originAuthSignType: string;
    type: string;
}

export interface MediaServicesStreamCdnConfigLock {
    compartmentId: string;
    message: string;
    relatedResourceId: string;
    timeCreated: string;
    type: string;
}

export interface MediaServicesStreamCdnConfigTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface MediaServicesStreamDistributionChannelLock {
    compartmentId: string;
    message: string;
    relatedResourceId: string;
    timeCreated: string;
    type: string;
}

export interface MediaServicesStreamDistributionChannelTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface MediaServicesStreamPackagingConfigEncryption {
    algorithm: string;
    kmsKeyId: string;
}

export interface MediaServicesStreamPackagingConfigLock {
    compartmentId: string;
    message: string;
    relatedResourceId: string;
    timeCreated: string;
    type: string;
}

export interface MediaServicesStreamPackagingConfigTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface MeteringComputationCustomTableSavedCustomTable {
    columnGroupBies: string[];
    compartmentDepth: number;
    displayName: string;
    groupByTags?: outputs.MeteringComputationCustomTableSavedCustomTableGroupByTag[];
    rowGroupBies: string[];
    version: number;
}

export interface MeteringComputationCustomTableSavedCustomTableGroupByTag {
    key: string;
    namespace: string;
    value: string;
}

export interface MeteringComputationCustomTableTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface MeteringComputationQueryQueryDefinition {
    costAnalysisUi: outputs.MeteringComputationQueryQueryDefinitionCostAnalysisUi;
    displayName: string;
    reportQuery: outputs.MeteringComputationQueryQueryDefinitionReportQuery;
    version: number;
}

export interface MeteringComputationQueryQueryDefinitionCostAnalysisUi {
    graph: string;
    isCumulativeGraph: boolean;
}

export interface MeteringComputationQueryQueryDefinitionReportQuery {
    compartmentDepth: number;
    dateRangeName: string;
    filter: string;
    forecast?: outputs.MeteringComputationQueryQueryDefinitionReportQueryForecast;
    granularity: string;
    groupBies: string[];
    groupByTags?: outputs.MeteringComputationQueryQueryDefinitionReportQueryGroupByTag[];
    isAggregateByTime: boolean;
    queryType: string;
    tenantId: string;
    timeUsageEnded: string;
    timeUsageStarted: string;
}

export interface MeteringComputationQueryQueryDefinitionReportQueryForecast {
    forecastType: string;
    timeForecastEnded: string;
    timeForecastStarted: string;
}

export interface MeteringComputationQueryQueryDefinitionReportQueryGroupByTag {
    key: string;
    namespace: string;
    value: string;
}

export interface MeteringComputationQueryTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface MeteringComputationScheduleQueryProperties {
    compartmentDepth: number;
    dateRange: outputs.MeteringComputationScheduleQueryPropertiesDateRange;
    filter: string;
    granularity: string;
    groupBies: string[];
    groupByTags?: outputs.MeteringComputationScheduleQueryPropertiesGroupByTag[];
    isAggregateByTime: boolean;
    queryType: string;
}

export interface MeteringComputationScheduleQueryPropertiesDateRange {
    dateRangeType: string;
    dynamicDateRangeType: string;
    timeUsageEnded: string;
    timeUsageStarted: string;
}

export interface MeteringComputationScheduleQueryPropertiesGroupByTag {
    key: string;
    namespace: string;
    value: string;
}

export interface MeteringComputationScheduleResultLocation {
    bucket: string;
    locationType: string;
    namespace: string;
    region: string;
}

export interface MeteringComputationScheduleTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface MeteringComputationUsageCarbonEmissionGroupByTag {
    key: string;
    namespace: string;
    value: string;
}

export interface MeteringComputationUsageCarbonEmissionItem {
    ad: string;
    compartmentId: string;
    compartmentName: string;
    compartmentPath: string;
    computedCarbonEmission: number;
    emissionCalculationMethod: string;
    platform: string;
    region: string;
    resourceId: string;
    resourceName: string;
    service: string;
    skuName: string;
    skuPartNumber: string;
    subscriptionId: string;
    tags: outputs.MeteringComputationUsageCarbonEmissionItemTag[];
    tenantId: string;
    tenantName: string;
    timeUsageEnded: string;
    timeUsageStarted: string;
}

export interface MeteringComputationUsageCarbonEmissionItemTag {
    key: string;
    namespace: string;
    value: string;
}

export interface MeteringComputationUsageCarbonEmissionTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface MeteringComputationUsageCarbonEmissionsQueryQueryDefinition {
    costAnalysisUi: outputs.MeteringComputationUsageCarbonEmissionsQueryQueryDefinitionCostAnalysisUi;
    displayName: string;
    reportQuery: outputs.MeteringComputationUsageCarbonEmissionsQueryQueryDefinitionReportQuery;
    version: number;
}

export interface MeteringComputationUsageCarbonEmissionsQueryQueryDefinitionCostAnalysisUi {
    graph: string;
    isCumulativeGraph: boolean;
}

export interface MeteringComputationUsageCarbonEmissionsQueryQueryDefinitionReportQuery {
    compartmentDepth: number;
    dateRangeName: string;
    groupBies: string[];
    groupByTags?: outputs.MeteringComputationUsageCarbonEmissionsQueryQueryDefinitionReportQueryGroupByTag[];
    isAggregateByTime: boolean;
    tenantId: string;
    timeUsageEnded: string;
    timeUsageStarted: string;
    usageCarbonEmissionsQueryFilter: string;
}

export interface MeteringComputationUsageCarbonEmissionsQueryQueryDefinitionReportQueryGroupByTag {
    key: string;
    namespace: string;
    value: string;
}

export interface MeteringComputationUsageCarbonEmissionsQueryTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface MeteringComputationUsageForecast {
    forecastType: string;
    timeForecastEnded: string;
    timeForecastStarted: string;
}

export interface MeteringComputationUsageGroupByTag {
    key: string;
    namespace: string;
    value: string;
}

export interface MeteringComputationUsageItem {
    ad: string;
    attributedCost: string;
    attributedUsage: string;
    compartmentId: string;
    compartmentName: string;
    compartmentPath: string;
    computedAmount: number;
    computedQuantity: number;
    currency: string;
    discount: number;
    isForecast: boolean;
    listRate: number;
    overage: string;
    overagesFlag: string;
    platform: string;
    region: string;
    resourceId: string;
    resourceName: string;
    service: string;
    shape: string;
    skuName: string;
    skuPartNumber: string;
    subscriptionId: string;
    tags: outputs.MeteringComputationUsageItemTag[];
    tenantId: string;
    tenantName: string;
    timeUsageEnded: string;
    timeUsageStarted: string;
    unit: string;
    unitPrice: number;
    weight: number;
}

export interface MeteringComputationUsageItemTag {
    key: string;
    namespace: string;
    value: string;
}

export interface MeteringComputationUsageStatementEmailRecipientsGroupRecipientsList {
    emailId: string;
    firstName: string;
    lastName: string;
    state: string;
}

export interface MeteringComputationUsageStatementEmailRecipientsGroupTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface MeteringComputationUsageTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface MonitoringAlarmOverride {
    body: string;
    pendingDuration: string;
    query: string;
    ruleName: string;
    severity: string;
}

export interface MonitoringAlarmSuppression {
    description: string;
    timeSuppressFrom: string;
    timeSuppressUntil: string;
}

export interface MonitoringAlarmSuppressionAlarmSuppressionTarget {
    alarmId: string;
    targetType: string;
}

export interface MonitoringAlarmSuppressionTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface MonitoringAlarmTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface MysqlChannelSource {
    anonymousTransactionsHandling?: outputs.MysqlChannelSourceAnonymousTransactionsHandling;
    hostname: string;
    password: string;
    port: number;
    sourceType: string;
    sslCaCertificate?: outputs.MysqlChannelSourceSslCaCertificate;
    sslMode: string;
    username: string;
}

export interface MysqlChannelSourceAnonymousTransactionsHandling {
    lastConfiguredLogFilename: string;
    lastConfiguredLogOffset: string;
    policy: string;
    uuid: string;
}

export interface MysqlChannelSourceSslCaCertificate {
    certificateType: string;
    contents: string;
}

export interface MysqlChannelTarget {
    applierUsername: string;
    channelName: string;
    dbSystemId: string;
    delayInSeconds: number;
    filters?: outputs.MysqlChannelTargetFilter[];
    tablesWithoutPrimaryKeyHandling: string;
    targetType: string;
}

export interface MysqlChannelTargetFilter {
    type: string;
    value: string;
}

export interface MysqlChannelTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface MysqlHeatWaveClusterClusterNode {
    nodeId: string;
    state: string;
    timeCreated: string;
    timeUpdated: string;
}

export interface MysqlHeatWaveClusterTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface MysqlMysqlBackupDbSystemSnapshot {
    adminUsername: string;
    availabilityDomain: string;
    backupPolicies: outputs.MysqlMysqlBackupDbSystemSnapshotBackupPolicy[];
    compartmentId: string;
    configurationId: string;
    crashRecovery: string;
    dataStorageSizeInGb: number;
    dataStorages: outputs.MysqlMysqlBackupDbSystemSnapshotDataStorage[];
    databaseManagement: string;
    definedTags: {[key: string]: string};
    deletionPolicies: outputs.MysqlMysqlBackupDbSystemSnapshotDeletionPolicy[];
    description: string;
    displayName: string;
    endpoints: outputs.MysqlMysqlBackupDbSystemSnapshotEndpoint[];
    faultDomain: string;
    freeformTags: {[key: string]: string};
    hostnameLabel: string;
    id: string;
    ipAddress: string;
    isHighlyAvailable: boolean;
    maintenances: outputs.MysqlMysqlBackupDbSystemSnapshotMaintenance[];
    mysqlVersion: string;
    port: number;
    portX: number;
    region: string;
    secureConnections: outputs.MysqlMysqlBackupDbSystemSnapshotSecureConnection[];
    shapeName: string;
    subnetId: string;
}

export interface MysqlMysqlBackupDbSystemSnapshotBackupPolicy {
    definedTags: {[key: string]: string};
    freeformTags: {[key: string]: string};
    isEnabled: boolean;
    pitrPolicies: outputs.MysqlMysqlBackupDbSystemSnapshotBackupPolicyPitrPolicy[];
    retentionInDays: number;
    windowStartTime: string;
}

export interface MysqlMysqlBackupDbSystemSnapshotBackupPolicyPitrPolicy {
    isEnabled: boolean;
}

export interface MysqlMysqlBackupDbSystemSnapshotDataStorage {
    allocatedStorageSizeInGbs: number;
    dataStorageSizeInGb: number;
    dataStorageSizeLimitInGbs: number;
    isAutoExpandStorageEnabled: boolean;
    maxStorageSizeInGbs: number;
}

export interface MysqlMysqlBackupDbSystemSnapshotDeletionPolicy {
    automaticBackupRetention: string;
    finalBackup: string;
    isDeleteProtected: boolean;
}

export interface MysqlMysqlBackupDbSystemSnapshotEndpoint {
    hostname: string;
    ipAddress: string;
    modes: string[];
    port: number;
    portX: number;
    resourceId: string;
    resourceType: string;
    status: string;
    statusDetails: string;
}

export interface MysqlMysqlBackupDbSystemSnapshotMaintenance {
    windowStartTime: string;
}

export interface MysqlMysqlBackupDbSystemSnapshotSecureConnection {
    certificateGenerationType: string;
    certificateId: string;
}

export interface MysqlMysqlBackupDbSystemSnapshotSummary {
    displayName: string;
    id: string;
    region: string;
}

export interface MysqlMysqlBackupSourceDetails {
    backupId: string;
    compartmentId: string;
    region: string;
}

export interface MysqlMysqlBackupTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface MysqlMysqlConfigurationInitVariables {
    lowerCaseTableNames: string;
}

export interface MysqlMysqlConfigurationTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface MysqlMysqlConfigurationVariables {
    autocommit: boolean;
    bigTables: boolean;
    binlogExpireLogsSeconds: number;
    binlogRowMetadata: string;
    binlogRowValueOptions: string;
    binlogTransactionCompression: boolean;
    completionType: string;
    connectTimeout: number;
    connectionMemoryChunkSize: number;
    connectionMemoryLimit: string;
    cteMaxRecursionDepth: string;
    defaultAuthenticationPlugin: string;
    foreignKeyChecks: boolean;
    /**
     * @deprecated Deprecated
     */
    generatedRandomPasswordLength: number;
    globalConnectionMemoryLimit: string;
    globalConnectionMemoryTracking: boolean;
    groupReplicationConsistency: string;
    informationSchemaStatsExpiry: number;
    innodbBufferPoolDumpPct: number;
    innodbBufferPoolInstances: number;
    innodbBufferPoolSize: string;
    innodbDdlBufferSize: string;
    innodbDdlThreads: number;
    innodbFtEnableStopword: boolean;
    innodbFtMaxTokenSize: number;
    innodbFtMinTokenSize: number;
    innodbFtNumWordOptimize: number;
    innodbFtResultCacheLimit: string;
    innodbFtServerStopwordTable: string;
    innodbLockWaitTimeout: number;
    innodbLogWriterThreads: boolean;
    innodbMaxPurgeLag: string;
    innodbMaxPurgeLagDelay: number;
    innodbStatsPersistentSamplePages: string;
    innodbStatsTransientSamplePages: string;
    interactiveTimeout: number;
    localInfile: boolean;
    mandatoryRoles: string;
    maxAllowedPacket: number;
    maxBinlogCacheSize: string;
    maxConnectErrors: string;
    maxConnections: number;
    maxExecutionTime: string;
    maxHeapTableSize: string;
    maxPreparedStmtCount: number;
    mysqlFirewallMode: boolean;
    /**
     * @deprecated Deprecated
     */
    mysqlZstdDefaultCompressionLevel: number;
    mysqlxConnectTimeout: number;
    mysqlxDeflateDefaultCompressionLevel: number;
    mysqlxDeflateMaxClientCompressionLevel: number;
    /**
     * @deprecated Deprecated
     */
    mysqlxDocumentIdUniquePrefix: number;
    mysqlxEnableHelloNotice: boolean;
    /**
     * @deprecated Deprecated
     */
    mysqlxIdleWorkerThreadTimeout: number;
    mysqlxInteractiveTimeout: number;
    mysqlxLz4defaultCompressionLevel: number;
    mysqlxLz4maxClientCompressionLevel: number;
    mysqlxMaxAllowedPacket: number;
    /**
     * @deprecated Deprecated
     */
    mysqlxMinWorkerThreads: number;
    mysqlxReadTimeout: number;
    mysqlxWaitTimeout: number;
    mysqlxWriteTimeout: number;
    mysqlxZstdDefaultCompressionLevel: number;
    mysqlxZstdMaxClientCompressionLevel: number;
    netReadTimeout: number;
    netWriteTimeout: number;
    parserMaxMemSize: string;
    /**
     * @deprecated Deprecated
     */
    queryAllocBlockSize: string;
    /**
     * @deprecated Deprecated
     */
    queryPreallocSize: string;
    regexpTimeLimit: number;
    sortBufferSize: string;
    sqlMode: string;
    sqlRequirePrimaryKey: boolean;
    sqlWarnings: boolean;
    threadPoolDedicatedListeners: boolean;
    threadPoolMaxTransactionsLimit: number;
    timeZone: string;
    tmpTableSize: string;
    transactionIsolation: string;
    waitTimeout: number;
}

export interface MysqlMysqlDbSystemBackupPolicy {
    definedTags: {[key: string]: string};
    freeformTags: {[key: string]: string};
    isEnabled: boolean;
    pitrPolicy?: outputs.MysqlMysqlDbSystemBackupPolicyPitrPolicy;
    retentionInDays: number;
    windowStartTime: string;
}

export interface MysqlMysqlDbSystemBackupPolicyPitrPolicy {
    isEnabled: boolean;
}

export interface MysqlMysqlDbSystemChannel {
    compartmentId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    isEnabled: boolean;
    lifecycleDetails: string;
    sources: outputs.MysqlMysqlDbSystemChannelSource[];
    state: string;
    targets: outputs.MysqlMysqlDbSystemChannelTarget[];
    timeCreated: string;
    timeUpdated: string;
}

export interface MysqlMysqlDbSystemChannelSource {
    anonymousTransactionsHandlings: outputs.MysqlMysqlDbSystemChannelSourceAnonymousTransactionsHandling[];
    hostname: string;
    port: number;
    sourceType: string;
    sslCaCertificates: outputs.MysqlMysqlDbSystemChannelSourceSslCaCertificate[];
    sslMode: string;
    username: string;
}

export interface MysqlMysqlDbSystemChannelSourceAnonymousTransactionsHandling {
    lastConfiguredLogFilename: string;
    lastConfiguredLogOffset: string;
    policy: string;
    uuid: string;
}

export interface MysqlMysqlDbSystemChannelSourceSslCaCertificate {
    certificateType: string;
    contents: string;
}

export interface MysqlMysqlDbSystemChannelTarget {
    applierUsername: string;
    channelName: string;
    dbSystemId: string;
    delayInSeconds: number;
    filters: outputs.MysqlMysqlDbSystemChannelTargetFilter[];
    tablesWithoutPrimaryKeyHandling: string;
    targetType: string;
}

export interface MysqlMysqlDbSystemChannelTargetFilter {
    type: string;
    value: string;
}

export interface MysqlMysqlDbSystemCurrentPlacement {
    availabilityDomain: string;
    faultDomain: string;
}

export interface MysqlMysqlDbSystemCustomerContact {
    email: string;
}

export interface MysqlMysqlDbSystemDataStorage {
    allocatedStorageSizeInGbs: number;
    dataStorageSizeInGb: number;
    dataStorageSizeLimitInGbs: number;
    isAutoExpandStorageEnabled: boolean;
    maxStorageSizeInGbs: number;
}

export interface MysqlMysqlDbSystemDeletionPolicy {
    automaticBackupRetention: string;
    finalBackup: string;
    isDeleteProtected: boolean;
}

export interface MysqlMysqlDbSystemEndpoint {
    hostname: string;
    ipAddress: string;
    modes: string[];
    port: number;
    portX: number;
    resourceId: string;
    resourceType: string;
    status: string;
    statusDetails: string;
}

export interface MysqlMysqlDbSystemHeatWaveCluster {
    clusterSize: number;
    isLakehouseEnabled: boolean;
    shapeName: string;
    state: string;
    timeCreated: string;
    timeUpdated: string;
}

export interface MysqlMysqlDbSystemMaintenance {
    windowStartTime: string;
}

export interface MysqlMysqlDbSystemPointInTimeRecoveryDetail {
    timeEarliestRecoveryPoint: string;
    timeLatestRecoveryPoint: string;
}

export interface MysqlMysqlDbSystemSecureConnections {
    certificateGenerationType: string;
    certificateId: string;
}

export interface MysqlMysqlDbSystemSource {
    backupId: string;
    dbSystemId: string;
    recoveryPoint: string;
    sourceType: string;
    sourceUrl?: string;
}

export interface MysqlMysqlDbSystemTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface MysqlReplicaReplicaOverrides {
    configurationId: string;
    mysqlVersion: string;
    shapeName: string;
}

export interface MysqlReplicaSecureConnection {
    certificateGenerationType: string;
    certificateId: string;
}

export interface MysqlReplicaTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface NetworkFirewallNetworkFirewallPolicyAddressListTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface NetworkFirewallNetworkFirewallPolicyApplicationGroupTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface NetworkFirewallNetworkFirewallPolicyApplicationTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface NetworkFirewallNetworkFirewallPolicyDecryptionProfileTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface NetworkFirewallNetworkFirewallPolicyDecryptionRuleCondition {
    destinationAddresses?: string[];
    sourceAddresses?: string[];
}

export interface NetworkFirewallNetworkFirewallPolicyDecryptionRulePosition {
    afterRule: string;
    beforeRule: string;
}

export interface NetworkFirewallNetworkFirewallPolicyDecryptionRuleTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface NetworkFirewallNetworkFirewallPolicyMappedSecretTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface NetworkFirewallNetworkFirewallPolicySecurityRuleCondition {
    applications?: string[];
    destinationAddresses?: string[];
    services?: string[];
    sourceAddresses?: string[];
    urls?: string[];
}

export interface NetworkFirewallNetworkFirewallPolicySecurityRulePosition {
    afterRule: string;
    beforeRule: string;
}

export interface NetworkFirewallNetworkFirewallPolicySecurityRuleTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface NetworkFirewallNetworkFirewallPolicyServiceListTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface NetworkFirewallNetworkFirewallPolicyServicePortRange {
    maximumPort: number;
    minimumPort: number;
}

export interface NetworkFirewallNetworkFirewallPolicyServiceTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface NetworkFirewallNetworkFirewallPolicyTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface NetworkFirewallNetworkFirewallPolicyTunnelInspectionRuleCondition {
    destinationAddresses: string[];
    sourceAddresses: string[];
}

export interface NetworkFirewallNetworkFirewallPolicyTunnelInspectionRulePosition {
    afterRule: string;
    beforeRule: string;
}

export interface NetworkFirewallNetworkFirewallPolicyTunnelInspectionRuleProfile {
    mustReturnTrafficToSource: boolean;
}

export interface NetworkFirewallNetworkFirewallPolicyTunnelInspectionRuleTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface NetworkFirewallNetworkFirewallPolicyUrlListTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface NetworkFirewallNetworkFirewallPolicyUrlListUrl {
    pattern: string;
    type: string;
}

export interface NetworkFirewallNetworkFirewallTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface NetworkLoadBalancerBackendSetBackend {
    ipAddress: string;
    isBackup: boolean;
    isDrain: boolean;
    isOffline: boolean;
    name: string;
    port: number;
    targetId: string;
    weight: number;
}

export interface NetworkLoadBalancerBackendSetHealthChecker {
    dns?: outputs.NetworkLoadBalancerBackendSetHealthCheckerDns;
    intervalInMillis: number;
    port: number;
    protocol: string;
    requestData: string;
    responseBodyRegex: string;
    responseData: string;
    retries: number;
    returnCode: number;
    timeoutInMillis: number;
    urlPath: string;
}

export interface NetworkLoadBalancerBackendSetHealthCheckerDns {
    domainName: string;
    queryClass: string;
    queryType: string;
    rcodes: string[];
    transportProtocol: string;
}

export interface NetworkLoadBalancerBackendSetTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface NetworkLoadBalancerBackendTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface NetworkLoadBalancerListenerTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface NetworkLoadBalancerNetworkLoadBalancerIpAddress {
    ipAddress: string;
    ipVersion: string;
    isPublic: boolean;
    reservedIps: outputs.NetworkLoadBalancerNetworkLoadBalancerIpAddressReservedIp[];
}

export interface NetworkLoadBalancerNetworkLoadBalancerIpAddressReservedIp {
    id: string;
}

export interface NetworkLoadBalancerNetworkLoadBalancerReservedIp {
    id: string;
}

export interface NetworkLoadBalancerNetworkLoadBalancerTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface NetworkLoadBalancerNetworkLoadBalancersBackendSetsUnifiedBackend {
    ipAddress: string;
    isBackup: boolean;
    isDrain: boolean;
    isOffline: boolean;
    name: string;
    port: number;
    targetId: string;
    weight: number;
}

export interface NetworkLoadBalancerNetworkLoadBalancersBackendSetsUnifiedHealthChecker {
    dns?: outputs.NetworkLoadBalancerNetworkLoadBalancersBackendSetsUnifiedHealthCheckerDns;
    intervalInMillis: number;
    port: number;
    protocol: string;
    requestData: string;
    responseBodyRegex: string;
    responseData: string;
    retries: number;
    returnCode: number;
    timeoutInMillis: number;
    urlPath: string;
}

export interface NetworkLoadBalancerNetworkLoadBalancersBackendSetsUnifiedHealthCheckerDns {
    domainName: string;
    queryClass: string;
    queryType: string;
    rcodes: string[];
    transportProtocol: string;
}

export interface NetworkLoadBalancerNetworkLoadBalancersBackendSetsUnifiedTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface NosqlIndexKey {
    columnName: string;
    jsonFieldType: string;
    jsonPath: string;
}

export interface NosqlIndexTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface NosqlTableReplica {
    capacityMode: string;
    lifecycleDetails: string;
    maxWriteUnits: number;
    region: string;
    state: string;
    tableId: string;
}

export interface NosqlTableReplicaTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface NosqlTableSchema {
    columns: outputs.NosqlTableSchemaColumn[];
    identities: outputs.NosqlTableSchemaIdentity[];
    primaryKeys: string[];
    shardKeys: string[];
    ttl: number;
}

export interface NosqlTableSchemaColumn {
    defaultValue: string;
    isAsUuid: boolean;
    isGenerated: boolean;
    isNullable: boolean;
    name: string;
    type: string;
}

export interface NosqlTableSchemaIdentity {
    columnName: string;
    isAlways: boolean;
    isNull: boolean;
}

export interface NosqlTableTableLimits {
    capacityMode: string;
    maxReadUnits: number;
    maxStorageInGbs: number;
    maxWriteUnits: number;
}

export interface NosqlTableTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface ObjectstorageBucketRetentionRule {
    displayName: string;
    duration?: outputs.ObjectstorageBucketRetentionRuleDuration;
    retentionRuleId: string;
    timeCreated: string;
    timeModified: string;
    timeRuleLocked?: string;
}

export interface ObjectstorageBucketRetentionRuleDuration {
    timeAmount: string;
    timeUnit: string;
}

export interface ObjectstorageBucketTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface ObjectstorageNamespaceMetadataTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface ObjectstorageObjectLifecyclePolicyRule {
    action: string;
    isEnabled: boolean;
    name: string;
    objectNameFilter?: outputs.ObjectstorageObjectLifecyclePolicyRuleObjectNameFilter;
    target?: string;
    timeAmount: string;
    timeUnit: string;
}

export interface ObjectstorageObjectLifecyclePolicyRuleObjectNameFilter {
    exclusionPatterns: string[];
    inclusionPatterns: string[];
    inclusionPrefixes: string[];
}

export interface ObjectstorageObjectLifecyclePolicyTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface ObjectstorageObjectSourceUriDetails {
    bucket: string;
    destinationObjectIfMatchEtag?: string;
    destinationObjectIfNoneMatchEtag?: string;
    namespace: string;
    object: string;
    region: string;
    sourceObjectIfMatchEtag?: string;
    sourceVersionId?: string;
}

export interface ObjectstorageObjectTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface ObjectstoragePreauthrequestTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface ObjectstorageReplicationPolicyTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface OceOceInstanceTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface OcvpClusterDatastore {
    blockVolumeIds: string[];
    capacity: number;
    datastoreType: string;
}

export interface OcvpClusterNetworkConfiguration {
    hcxVlanId: string;
    nsxEdgeUplink1vlanId: string;
    nsxEdgeUplink2vlanId: string;
    nsxEdgeVtepVlanId: string;
    nsxVtepVlanId: string;
    provisioningSubnetId: string;
    provisioningVlanId: string;
    replicationVlanId: string;
    vmotionVlanId: string;
    vsanVlanId: string;
    vsphereVlanId: string;
}

export interface OcvpClusterTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface OcvpClusterUpgradeLicense {
    licenseKey: string;
    licenseType: string;
}

export interface OcvpClusterVsphereUpgradeObject {
    downloadLink: string;
    linkDescription: string;
}

export interface OcvpEsxiHostTimeouts {
    create?: string;
}

export interface OcvpSddcDatastore {
    blockVolumeIds: string[];
    capacity: number;
    datastoreType: string;
}

export interface OcvpSddcHcxOnPremLicense {
    activationKey: string;
    status: string;
    systemName: string;
}

export interface OcvpSddcInitialConfiguration {
    initialClusterConfigurations: outputs.OcvpSddcInitialConfigurationInitialClusterConfiguration[];
}

export interface OcvpSddcInitialConfigurationInitialClusterConfiguration {
    actualEsxiHostsCount: number;
    capacityReservationId: string;
    computeAvailabilityDomain: string;
    datastores?: outputs.OcvpSddcInitialConfigurationInitialClusterConfigurationDatastore[];
    displayName: string;
    esxiHostsCount: number;
    initialCommitment: string;
    initialHostOcpuCount: number;
    initialHostShapeName: string;
    instanceDisplayNamePrefix: string;
    isShieldedInstanceEnabled: boolean;
    networkConfiguration?: outputs.OcvpSddcInitialConfigurationInitialClusterConfigurationNetworkConfiguration;
    vsphereType: string;
    workloadNetworkCidr: string;
}

export interface OcvpSddcInitialConfigurationInitialClusterConfigurationDatastore {
    blockVolumeIds: string[];
    datastoreType: string;
}

export interface OcvpSddcInitialConfigurationInitialClusterConfigurationNetworkConfiguration {
    hcxVlanId: string;
    nsxEdgeUplink1vlanId: string;
    nsxEdgeUplink2vlanId: string;
    nsxEdgeVtepVlanId: string;
    nsxVtepVlanId: string;
    provisioningSubnetId: string;
    provisioningVlanId: string;
    replicationVlanId: string;
    vmotionVlanId: string;
    vsanVlanId: string;
    vsphereVlanId: string;
}

export interface OcvpSddcTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface OcvpSddcUpgradeLicense {
    licenseKey: string;
    licenseType: string;
}

export interface OcvpSddcVsphereUpgradeObject {
    downloadLink: string;
    linkDescription: string;
}

export interface OdaOdaInstanceRestrictedOperation {
    operationName: string;
    restrictingService: string;
}

export interface OdaOdaInstanceTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface OdaOdaPrivateEndpointAttachmentTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface OdaOdaPrivateEndpointScanProxyScanListenerInfo {
    scanListenerFqdn: string;
    scanListenerIp: string;
    scanListenerPort: number;
}

export interface OdaOdaPrivateEndpointScanProxyTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface OdaOdaPrivateEndpointTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface OnsNotificationTopicTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface OnsSubscriptionTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface OpaOpaInstanceAttachment {
    isImplicit: boolean;
    targetId: string;
    targetInstanceUrl: string;
    targetRole: string;
    targetServiceType: string;
}

export interface OpaOpaInstanceTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface OpensearchOpensearchClusterTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface OperatorAccessControlOperatorControlAssignmentTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface OperatorAccessControlOperatorControlTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface OpsiAwrHubSourceAwrhubsourcesManagementTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface OpsiAwrHubSourceTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface OpsiAwrHubTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface OpsiDatabaseInsightConnectionCredentialDetails {
    credentialSourceName: string;
    credentialType: string;
    passwordSecretId: string;
    role: string;
    userName: string;
    walletSecretId: string;
}

export interface OpsiDatabaseInsightConnectionDetails {
    hostName: string;
    hosts?: outputs.OpsiDatabaseInsightConnectionDetailsHost[];
    port: number;
    protocol: string;
    serviceName: string;
}

export interface OpsiDatabaseInsightConnectionDetailsHost {
    hostIp: string;
    port: number;
}

export interface OpsiDatabaseInsightCredentialDetails {
    credentialSourceName?: string;
    credentialType: string;
    passwordSecretId?: string;
    role: string;
    userName?: string;
    walletSecretId?: string;
}

export interface OpsiDatabaseInsightTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface OpsiEnterpriseManagerBridgeTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface OpsiExadataInsightMemberVmClusterDetail {
    compartmentId: string;
    dbmPrivateEndpointId: string;
    memberDatabaseDetails?: outputs.OpsiExadataInsightMemberVmClusterDetailMemberDatabaseDetail[];
    opsiPrivateEndpointId: string;
    vmclusterId: string;
}

export interface OpsiExadataInsightMemberVmClusterDetailMemberDatabaseDetail {
    compartmentId: string;
    connectionDetails?: outputs.OpsiExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionDetails;
    credentialDetails?: outputs.OpsiExadataInsightMemberVmClusterDetailMemberDatabaseDetailCredentialDetails;
    databaseId: string;
    databaseResourceType: string;
    dbmPrivateEndpointId: string;
    definedTags: {[key: string]: string};
    deploymentType: string;
    entitySource: string;
    freeformTags: {[key: string]: string};
    opsiPrivateEndpointId: string;
    serviceName: string;
    systemTags: {[key: string]: string};
}

export interface OpsiExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionDetails {
    hosts?: outputs.OpsiExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionDetailsHost[];
    protocol: string;
    serviceName: string;
}

export interface OpsiExadataInsightMemberVmClusterDetailMemberDatabaseDetailConnectionDetailsHost {
    hostIp: string;
    port: number;
}

export interface OpsiExadataInsightMemberVmClusterDetailMemberDatabaseDetailCredentialDetails {
    credentialSourceName: string;
    credentialType: string;
    passwordSecretId: string;
    role: string;
    userName: string;
    walletSecretId: string;
}

export interface OpsiExadataInsightTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface OpsiHostInsightTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface OpsiNewsReportContentTypes {
    capacityPlanningResources: string[];
    sqlInsightsFleetAnalysisResources: string[];
    sqlInsightsPerformanceDegradationResources: string[];
    sqlInsightsPlanChangesResources: string[];
    sqlInsightsTopDatabasesResources: string[];
    sqlInsightsTopSqlByInsightsResources: string[];
    sqlInsightsTopSqlResources: string[];
}

export interface OpsiNewsReportTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface OpsiOperationsInsightsPrivateEndpointTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface OpsiOperationsInsightsWarehouseDownloadWarehouseWalletTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface OpsiOperationsInsightsWarehouseRotateWarehouseWalletTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface OpsiOperationsInsightsWarehouseTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface OpsiOperationsInsightsWarehouseUserTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface OpsiOpsiConfigurationConfigItem {
    applicableContexts: string[];
    configItemType: string;
    defaultValue: string;
    metadatas: outputs.OpsiOpsiConfigurationConfigItemMetadata[];
    name: string;
    value: string;
}

export interface OpsiOpsiConfigurationConfigItemMetadata {
    configItemType: string;
    dataType: string;
    description: string;
    displayName: string;
    unitDetails: outputs.OpsiOpsiConfigurationConfigItemMetadataUnitDetail[];
    valueInputDetails: outputs.OpsiOpsiConfigurationConfigItemMetadataValueInputDetail[];
}

export interface OpsiOpsiConfigurationConfigItemMetadataUnitDetail {
    displayName: string;
    unit: string;
}

export interface OpsiOpsiConfigurationConfigItemMetadataValueInputDetail {
    allowedValueType: string;
    maxValue: string;
    minValue: string;
    possibleValues: string[];
}

export interface OpsiOpsiConfigurationTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface OptimizerEnrollmentStatusTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface OptimizerProfileLevelsConfiguration {
    items?: outputs.OptimizerProfileLevelsConfigurationItem[];
}

export interface OptimizerProfileLevelsConfigurationItem {
    level: string;
    recommendationId: string;
}

export interface OptimizerProfileTargetCompartments {
    items: string[];
}

export interface OptimizerProfileTargetTags {
    items: outputs.OptimizerProfileTargetTagsItem[];
}

export interface OptimizerProfileTargetTagsItem {
    tagDefinitionName: string;
    tagNamespaceName: string;
    tagValueType: string;
    tagValues: string[];
}

export interface OptimizerProfileTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface OptimizerRecommendationResourceCount {
    count: number;
    status: string;
}

export interface OptimizerRecommendationSupportedLevel {
    items: outputs.OptimizerRecommendationSupportedLevelItem[];
}

export interface OptimizerRecommendationSupportedLevelItem {
    name: string;
}

export interface OptimizerRecommendationTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface OptimizerResourceActionAction {
    description: string;
    type: string;
    url: string;
}

export interface OptimizerResourceActionTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface OsManagementHubEventData {
    additionalDetails: outputs.OsManagementHubEventDataAdditionalDetail[];
    contents: outputs.OsManagementHubEventDataContent[];
    eventCount: number;
    eventFingerprint: string;
    operationType: string;
    reason: string;
    status: string;
    timeFirstOccurred: string;
}

export interface OsManagementHubEventDataAdditionalDetail {
    exploitCves: string[];
    initiatorId: string;
    vmcores: outputs.OsManagementHubEventDataAdditionalDetailVmcore[];
    workRequestIds: string[];
}

export interface OsManagementHubEventDataAdditionalDetailVmcore {
    backtrace: string;
    component: string;
}

export interface OsManagementHubEventDataContent {
    contentAvailability: string;
    contentLocation: string;
    exploitDetectionLogContent: string;
    exploitObjectStoreLocation: string;
    size: number;
    type: string;
}

export interface OsManagementHubEventSystemDetail {
    architecture: string;
    kspliceEffectiveKernelVersion: string;
    osFamily: string;
    osKernelRelease: string;
    osKernelVersion: string;
    osName: string;
    osSystemVersion: string;
}

export interface OsManagementHubEventTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface OsManagementHubLifecycleEnvironmentManagedInstanceId {
    displayName: string;
    id: string;
}

export interface OsManagementHubLifecycleEnvironmentStage {
    archType: string;
    compartmentId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    freeformTags: {[key: string]: string};
    id: string;
    lifecycleEnvironmentId: string;
    location: string;
    managedInstanceIds: outputs.OsManagementHubLifecycleEnvironmentStageManagedInstanceId[];
    osFamily: string;
    rank: number;
    softwareSourceIds: outputs.OsManagementHubLifecycleEnvironmentStageSoftwareSourceId[];
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeModified: string;
    vendorName: string;
}

export interface OsManagementHubLifecycleEnvironmentStageManagedInstanceId {
    displayName: string;
    id: string;
}

export interface OsManagementHubLifecycleEnvironmentStageSoftwareSourceId {
    description: string;
    displayName: string;
    id: string;
    isMandatoryForAutonomousLinux: boolean;
    softwareSourceType: string;
}

export interface OsManagementHubLifecycleEnvironmentTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface OsManagementHubLifecycleStageAttachManagedInstancesManagementManagedInstanceDetails {
    managedInstances: string[];
    workRequestDetails?: outputs.OsManagementHubLifecycleStageAttachManagedInstancesManagementManagedInstanceDetailsWorkRequestDetails;
}

export interface OsManagementHubLifecycleStageAttachManagedInstancesManagementManagedInstanceDetailsWorkRequestDetails {
    description: string;
    displayName: string;
}

export interface OsManagementHubLifecycleStageAttachManagedInstancesManagementTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface OsManagementHubLifecycleStageDetachManagedInstancesManagementManagedInstanceDetails {
    managedInstances: string[];
    workRequestDetails?: outputs.OsManagementHubLifecycleStageDetachManagedInstancesManagementManagedInstanceDetailsWorkRequestDetails;
}

export interface OsManagementHubLifecycleStageDetachManagedInstancesManagementManagedInstanceDetailsWorkRequestDetails {
    description: string;
    displayName: string;
}

export interface OsManagementHubLifecycleStageDetachManagedInstancesManagementTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface OsManagementHubLifecycleStagePromoteSoftwareSourceManagementTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface OsManagementHubLifecycleStagePromoteSoftwareSourceManagementWorkRequestDetails {
    description: string;
    displayName: string;
}

export interface OsManagementHubManagedInstanceAttachProfileManagementTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface OsManagementHubManagedInstanceAutonomousSettings {
    isDataCollectionAuthorized: boolean;
    scheduledJobId: string;
}

export interface OsManagementHubManagedInstanceDetachProfileManagementTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface OsManagementHubManagedInstanceGroupAttachManagedInstancesManagementTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface OsManagementHubManagedInstanceGroupAttachManagedInstancesManagementWorkRequestDetails {
    description: string;
    displayName: string;
}

export interface OsManagementHubManagedInstanceGroupAttachSoftwareSourcesManagementTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface OsManagementHubManagedInstanceGroupAttachSoftwareSourcesManagementWorkRequestDetails {
    description: string;
    displayName: string;
}

export interface OsManagementHubManagedInstanceGroupAutonomousSettings {
    isDataCollectionAuthorized: boolean;
    scheduledJobId: string;
}

export interface OsManagementHubManagedInstanceGroupDetachManagedInstancesManagementTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface OsManagementHubManagedInstanceGroupDetachSoftwareSourcesManagementTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface OsManagementHubManagedInstanceGroupDetachSoftwareSourcesManagementWorkRequestDetails {
    description: string;
    displayName: string;
}

export interface OsManagementHubManagedInstanceGroupInstallPackagesManagementTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface OsManagementHubManagedInstanceGroupInstallPackagesManagementWorkRequestDetails {
    description: string;
    displayName: string;
}

export interface OsManagementHubManagedInstanceGroupInstallWindowsUpdatesManagementTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface OsManagementHubManagedInstanceGroupInstallWindowsUpdatesManagementWorkRequestDetails {
    description: string;
    displayName: string;
}

export interface OsManagementHubManagedInstanceGroupManageModuleStreamsManagementDisable {
    moduleName: string;
    softwareSourceId: string;
    streamName: string;
}

export interface OsManagementHubManagedInstanceGroupManageModuleStreamsManagementEnable {
    moduleName: string;
    softwareSourceId: string;
    streamName: string;
}

export interface OsManagementHubManagedInstanceGroupManageModuleStreamsManagementInstall {
    moduleName: string;
    profileName: string;
    softwareSourceId: string;
    streamName: string;
}

export interface OsManagementHubManagedInstanceGroupManageModuleStreamsManagementRemove {
    moduleName: string;
    profileName: string;
    softwareSourceId: string;
    streamName: string;
}

export interface OsManagementHubManagedInstanceGroupManageModuleStreamsManagementTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface OsManagementHubManagedInstanceGroupManageModuleStreamsManagementWorkRequestDetails {
    description: string;
    displayName: string;
}

export interface OsManagementHubManagedInstanceGroupRemovePackagesManagementTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface OsManagementHubManagedInstanceGroupRemovePackagesManagementWorkRequestDetails {
    description: string;
    displayName: string;
}

export interface OsManagementHubManagedInstanceGroupSoftwareSource {
    description: string;
    displayName: string;
    id: string;
    isMandatoryForAutonomousLinux: boolean;
    softwareSourceType: string;
}

export interface OsManagementHubManagedInstanceGroupTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface OsManagementHubManagedInstanceGroupUpdateAllPackagesManagementTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface OsManagementHubManagedInstanceGroupUpdateAllPackagesManagementWorkRequestDetails {
    description: string;
    displayName: string;
}

export interface OsManagementHubManagedInstanceInstallWindowsUpdatesManagementTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface OsManagementHubManagedInstanceInstallWindowsUpdatesManagementWorkRequestDetails {
    description: string;
    displayName: string;
}

export interface OsManagementHubManagedInstanceLifecycleEnvironment {
    displayName: string;
    id: string;
}

export interface OsManagementHubManagedInstanceLifecycleStage {
    displayName: string;
    id: string;
}

export interface OsManagementHubManagedInstanceManagedInstanceGroup {
    displayName: string;
    id: string;
}

export interface OsManagementHubManagedInstanceSoftwareSource {
    description: string;
    displayName: string;
    id: string;
    isMandatoryForAutonomousLinux: boolean;
    softwareSourceType: string;
}

export interface OsManagementHubManagedInstanceTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface OsManagementHubManagedInstanceUpdatePackagesManagementTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface OsManagementHubManagedInstanceUpdatePackagesManagementWorkRequestDetails {
    description: string;
    displayName: string;
}

export interface OsManagementHubManagementStationHealth {
    description: string;
    state: string;
}

export interface OsManagementHubManagementStationMirror {
    directory: string;
    port: string;
    sslcert: string;
    sslport: string;
}

export interface OsManagementHubManagementStationMirrorSyncStatus {
    failed: number;
    queued: number;
    synced: number;
    syncing: number;
    unsynced: number;
}

export interface OsManagementHubManagementStationMirrorSynchronizeManagementTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface OsManagementHubManagementStationProxy {
    forward: string;
    hosts: string[];
    isEnabled: boolean;
    port: string;
}

export interface OsManagementHubManagementStationRefreshManagementTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface OsManagementHubManagementStationSynchronizeMirrorsManagementTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface OsManagementHubManagementStationTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface OsManagementHubProfileLifecycleEnvironment {
    displayName: string;
    id: string;
}

export interface OsManagementHubProfileLifecycleStage {
    displayName: string;
    id: string;
}

export interface OsManagementHubProfileManagedInstanceGroup {
    displayName: string;
    id: string;
}

export interface OsManagementHubProfileSoftwareSource {
    description: string;
    displayName: string;
    id: string;
    isMandatoryForAutonomousLinux: boolean;
    softwareSourceType: string;
}

export interface OsManagementHubProfileTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface OsManagementHubScheduledJobOperation {
    manageModuleStreamsDetails?: outputs.OsManagementHubScheduledJobOperationManageModuleStreamsDetails;
    operationType: string;
    packageNames: string[];
    softwareSourceIds: string[];
    switchModuleStreamsDetails?: outputs.OsManagementHubScheduledJobOperationSwitchModuleStreamsDetails;
    windowsUpdateNames: string[];
}

export interface OsManagementHubScheduledJobOperationManageModuleStreamsDetails {
    disables?: outputs.OsManagementHubScheduledJobOperationManageModuleStreamsDetailsDisable[];
    enables?: outputs.OsManagementHubScheduledJobOperationManageModuleStreamsDetailsEnable[];
    installs?: outputs.OsManagementHubScheduledJobOperationManageModuleStreamsDetailsInstall[];
    removes?: outputs.OsManagementHubScheduledJobOperationManageModuleStreamsDetailsRemove[];
}

export interface OsManagementHubScheduledJobOperationManageModuleStreamsDetailsDisable {
    moduleName: string;
    softwareSourceId: string;
    streamName: string;
}

export interface OsManagementHubScheduledJobOperationManageModuleStreamsDetailsEnable {
    moduleName: string;
    softwareSourceId: string;
    streamName: string;
}

export interface OsManagementHubScheduledJobOperationManageModuleStreamsDetailsInstall {
    moduleName: string;
    profileName: string;
    softwareSourceId: string;
    streamName: string;
}

export interface OsManagementHubScheduledJobOperationManageModuleStreamsDetailsRemove {
    moduleName: string;
    profileName: string;
    softwareSourceId: string;
    streamName: string;
}

export interface OsManagementHubScheduledJobOperationSwitchModuleStreamsDetails {
    moduleName: string;
    softwareSourceId: string;
    streamName: string;
}

export interface OsManagementHubScheduledJobTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface OsManagementHubSoftwareSourceAddPackagesManagementTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface OsManagementHubSoftwareSourceChangeAvailabilityManagementSoftwareSourceAvailability {
    availability: string;
    availabilityAtOci: string;
    softwareSourceId: string;
}

export interface OsManagementHubSoftwareSourceChangeAvailabilityManagementTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface OsManagementHubSoftwareSourceCustomSoftwareSourceFilter {
    moduleStreamProfileFilters?: outputs.OsManagementHubSoftwareSourceCustomSoftwareSourceFilterModuleStreamProfileFilter[];
    packageFilters?: outputs.OsManagementHubSoftwareSourceCustomSoftwareSourceFilterPackageFilter[];
    packageGroupFilters?: outputs.OsManagementHubSoftwareSourceCustomSoftwareSourceFilterPackageGroupFilter[];
}

export interface OsManagementHubSoftwareSourceCustomSoftwareSourceFilterModuleStreamProfileFilter {
    filterType: string;
    moduleName: string;
    profileName: string;
    streamName: string;
}

export interface OsManagementHubSoftwareSourceCustomSoftwareSourceFilterPackageFilter {
    filterType: string;
    packageName: string;
    packageNamePattern: string;
    packageVersion: string;
}

export interface OsManagementHubSoftwareSourceCustomSoftwareSourceFilterPackageGroupFilter {
    filterType: string;
    packageGroups: string[];
}

export interface OsManagementHubSoftwareSourceTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface OsManagementHubSoftwareSourceVendorSoftwareSource {
    displayName: string;
    id: string;
}

export interface OsmanagementManagedInstanceAutonomouse {
    isAutoUpdateEnabled: boolean;
}

export interface OsmanagementManagedInstanceChildSoftwareSource {
    id: string;
    name: string;
}

export interface OsmanagementManagedInstanceGroupManagedInstance {
    displayName: string;
    id: string;
}

export interface OsmanagementManagedInstanceGroupTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface OsmanagementManagedInstanceManagedInstanceGroup {
    displayName: string;
    id: string;
}

export interface OsmanagementManagedInstanceManagementChildSoftwareSource {
    id: string;
    name: string;
}

export interface OsmanagementManagedInstanceManagementManagedInstanceGroup {
    displayName: string;
    id: string;
}

export interface OsmanagementManagedInstanceManagementParentSoftwareSource {
    id: string;
    name: string;
}

export interface OsmanagementManagedInstanceManagementTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface OsmanagementManagedInstanceParentSoftwareSource {
    id: string;
    name: string;
}

export interface OsmanagementManagedInstanceTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface OsmanagementSoftwareSourceAssociatedManagedInstance {
    displayName: string;
    id: string;
}

export interface OsmanagementSoftwareSourceTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface OspGatewayAddressActionVerificationAddress {
    addressKey: string;
    city: string;
    companyName: string;
    contributorClass: string;
    country: string;
    county: string;
    departmentName: string;
    emailAddress: string;
    firstName: string;
    internalNumber: string;
    jobTitle: string;
    lastName: string;
    line1: string;
    line2: string;
    line3: string;
    line4: string;
    middleName: string;
    municipalInscription: string;
    phoneCountryCode: string;
    phoneNumber: string;
    postalCode: string;
    province: string;
    state: string;
    stateInscription: string;
    streetName: string;
    streetNumber: string;
}

export interface OspGatewayAddressActionVerificationTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface OspGatewaySubscriptionBillingAddress {
    addressKey: string;
    city: string;
    companyName: string;
    contributorClass: string;
    country: string;
    county: string;
    departmentName: string;
    emailAddress: string;
    firstName: string;
    internalNumber: string;
    jobTitle: string;
    lastName: string;
    line1: string;
    line2: string;
    line3: string;
    line4: string;
    middleName: string;
    municipalInscription: string;
    phoneCountryCode: string;
    phoneNumber: string;
    postalCode: string;
    province: string;
    state: string;
    stateInscription: string;
    streetName: string;
    streetNumber: string;
}

export interface OspGatewaySubscriptionPaymentGateway {
    merchantDefinedDatas: outputs.OspGatewaySubscriptionPaymentGatewayMerchantDefinedData[];
}

export interface OspGatewaySubscriptionPaymentGatewayMerchantDefinedData {
    cloudAccountName: string;
    promoType: string;
}

export interface OspGatewaySubscriptionPaymentOption {
    creditCardType: string;
    emailAddress: string;
    extBillingAgreementId: string;
    firstName: string;
    lastDigits: string;
    lastName: string;
    nameOnCard: string;
    paymentMethod: string;
    timeExpiration: string;
    walletInstrumentId: string;
    walletTransactionId: string;
}

export interface OspGatewaySubscriptionSubscription {
    accountType: string;
    billToCustAccountId: string;
    billingAddresses?: outputs.OspGatewaySubscriptionSubscriptionBillingAddress[];
    currencyCode: string;
    gsiOrgCode: string;
    id: string;
    isIntentToPay: boolean;
    languageCode: string;
    organizationId: string;
    paymentGateway?: outputs.OspGatewaySubscriptionSubscriptionPaymentGateway;
    paymentOptions?: outputs.OspGatewaySubscriptionSubscriptionPaymentOption[];
    planType: string;
    shipToCustAcctRoleId: string;
    shipToCustAcctSiteId: string;
    subscriptionPlanNumber: string;
    taxInfo?: outputs.OspGatewaySubscriptionSubscriptionTaxInfo;
    timePersonalToCorporateConv: string;
    timePlanUpgrade: string;
    timeStart: string;
    upgradeState: string;
    upgradeStateDetails: string;
}

export interface OspGatewaySubscriptionSubscriptionBillingAddress {
    addressKey: string;
    city: string;
    companyName: string;
    contributorClass: string;
    country: string;
    county: string;
    departmentName: string;
    emailAddress: string;
    firstName: string;
    internalNumber: string;
    jobTitle: string;
    lastName: string;
    line1: string;
    line2: string;
    line3: string;
    line4: string;
    middleName: string;
    municipalInscription: string;
    phoneCountryCode: string;
    phoneNumber: string;
    postalCode: string;
    province: string;
    state: string;
    stateInscription: string;
    streetName: string;
    streetNumber: string;
}

export interface OspGatewaySubscriptionSubscriptionPaymentGateway {
    merchantDefinedData?: outputs.OspGatewaySubscriptionSubscriptionPaymentGatewayMerchantDefinedData;
}

export interface OspGatewaySubscriptionSubscriptionPaymentGatewayMerchantDefinedData {
    cloudAccountName: string;
    promoType: string;
}

export interface OspGatewaySubscriptionSubscriptionPaymentOption {
    creditCardType: string;
    emailAddress: string;
    extBillingAgreementId: string;
    firstName: string;
    lastDigits: string;
    lastName: string;
    nameOnCard: string;
    paymentMethod: string;
    timeExpiration: string;
    walletInstrumentId: string;
    walletTransactionId: string;
}

export interface OspGatewaySubscriptionSubscriptionTaxInfo {
    noTaxReasonCode: string;
    noTaxReasonCodeDetails: string;
    taxCnpj: string;
    taxPayerId: string;
    taxRegNumber: string;
}

export interface OspGatewaySubscriptionTaxInfo {
    giro: string;
    noTaxReasonCode: string;
    noTaxReasonCodeDetails: string;
    taxCnpj: string;
    taxPayerId: string;
    taxRegNumber: string;
}

export interface OspGatewaySubscriptionTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface PsqlBackupDbSystemDetail {
    dbVersion: string;
    systemType: string;
}

export interface PsqlBackupTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface PsqlConfigurationConfigurationDetail {
    items: outputs.PsqlConfigurationConfigurationDetailItem[];
}

export interface PsqlConfigurationConfigurationDetailItem {
    allowedValues: string;
    configKey: string;
    dataType: string;
    defaultConfigValue: string;
    description: string;
    isOverridable: boolean;
    isRestartRequired: boolean;
    overridenConfigValue: string;
}

export interface PsqlConfigurationDbConfigurationOverrides {
    items: outputs.PsqlConfigurationDbConfigurationOverridesItem[];
}

export interface PsqlConfigurationDbConfigurationOverridesItem {
    configKey: string;
    overridenConfigValue: string;
}

export interface PsqlConfigurationTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface PsqlDbSystemCredentials {
    passwordDetails: outputs.PsqlDbSystemCredentialsPasswordDetails;
    username: string;
}

export interface PsqlDbSystemCredentialsPasswordDetails {
    password: string;
    passwordType: string;
    secretId: string;
    secretVersion: string;
}

export interface PsqlDbSystemInstance {
    availabilityDomain: string;
    description: string;
    displayName: string;
    id: string;
    lifecycleDetails: string;
    state: string;
    timeCreated: string;
    timeUpdated: string;
}

export interface PsqlDbSystemInstancesDetail {
    description: string;
    displayName: string;
    privateIp: string;
}

export interface PsqlDbSystemManagementPolicy {
    backupPolicy?: outputs.PsqlDbSystemManagementPolicyBackupPolicy;
    maintenanceWindowStart: string;
}

export interface PsqlDbSystemManagementPolicyBackupPolicy {
    backupStart: string;
    daysOfTheMonths: number[];
    daysOfTheWeeks: string[];
    kind: string;
    retentionDays: number;
}

export interface PsqlDbSystemNetworkDetails {
    nsgIds: string[];
    primaryDbEndpointPrivateIp: string;
    subnetId: string;
}

export interface PsqlDbSystemPatchOperation {
    from?: string;
    operation: string;
    position?: string;
    selectedItem?: string;
    selection: string;
    value?: {[key: string]: string};
}

export interface PsqlDbSystemSource {
    backupId: string;
    isHavingRestoreConfigOverrides: boolean;
    sourceType: string;
}

export interface PsqlDbSystemStorageDetails {
    availabilityDomain?: string;
    iops: string;
    isRegionallyDurable: boolean;
    systemType: string;
}

export interface PsqlDbSystemTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface QueueQueueTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface RecoveryProtectedDatabaseMetric {
    backupSpaceEstimateInGbs: number;
    backupSpaceUsedInGbs: number;
    currentRetentionPeriodInSeconds: number;
    dbSizeInGbs: number;
    isRedoLogsEnabled: boolean;
    minimumRecoveryNeededInDays: number;
    retentionPeriodInDays: number;
    unprotectedWindowInSeconds: number;
}

export interface RecoveryProtectedDatabaseRecoveryServiceSubnet {
    recoveryServiceSubnetId: string;
    state: string;
}

export interface RecoveryProtectedDatabaseTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface RecoveryProtectionPolicyTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface RecoveryRecoveryServiceSubnetTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface RedisRedisClusterNodeCollection {
    items: outputs.RedisRedisClusterNodeCollectionItem[];
}

export interface RedisRedisClusterNodeCollectionItem {
    displayName: string;
    privateEndpointFqdn: string;
    privateEndpointIpAddress: string;
}

export interface RedisRedisClusterTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface ResourceSchedulerScheduleResource {
    id: string;
    metadata: {[key: string]: string};
}

export interface ResourceSchedulerScheduleResourceFilter {
    attribute: string;
    condition: string;
    shouldIncludeChildCompartments: boolean;
    values?: outputs.ResourceSchedulerScheduleResourceFilterValue[];
}

export interface ResourceSchedulerScheduleResourceFilterValue {
    namespace: string;
    tagKey: string;
    value: string;
}

export interface ResourceSchedulerScheduleTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface ResourcemanagerPrivateEndpointTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface SchServiceConnectorSource {
    configMap: string;
    cursor?: outputs.SchServiceConnectorSourceCursor;
    kind: string;
    logSources?: outputs.SchServiceConnectorSourceLogSource[];
    monitoringSources?: outputs.SchServiceConnectorSourceMonitoringSource[];
    pluginName: string;
    streamId: string;
}

export interface SchServiceConnectorSourceCursor {
    kind: string;
}

export interface SchServiceConnectorSourceLogSource {
    compartmentId: string;
    logGroupId: string;
    logId: string;
}

export interface SchServiceConnectorSourceMonitoringSource {
    compartmentId: string;
    namespaceDetails?: outputs.SchServiceConnectorSourceMonitoringSourceNamespaceDetails;
}

export interface SchServiceConnectorSourceMonitoringSourceNamespaceDetails {
    kind: string;
    namespaces: outputs.SchServiceConnectorSourceMonitoringSourceNamespaceDetailsNamespace[];
}

export interface SchServiceConnectorSourceMonitoringSourceNamespaceDetailsNamespace {
    metrics: outputs.SchServiceConnectorSourceMonitoringSourceNamespaceDetailsNamespaceMetrics;
    namespace: string;
}

export interface SchServiceConnectorSourceMonitoringSourceNamespaceDetailsNamespaceMetrics {
    kind: string;
}

export interface SchServiceConnectorTarget {
    batchRolloverSizeInMbs: number;
    batchRolloverTimeInMs: number;
    batchSizeInKbs: number;
    batchSizeInNum: number;
    batchTimeInSec: number;
    bucket: string;
    compartmentId: string;
    dimensions?: outputs.SchServiceConnectorTargetDimension[];
    enableFormattedMessaging: boolean;
    functionId: string;
    kind: string;
    logGroupId: string;
    logSourceIdentifier: string;
    metric: string;
    metricNamespace: string;
    namespace: string;
    objectNamePrefix: string;
    streamId: string;
    topicId: string;
}

export interface SchServiceConnectorTargetDimension {
    dimensionValue?: outputs.SchServiceConnectorTargetDimensionDimensionValue;
    name: string;
}

export interface SchServiceConnectorTargetDimensionDimensionValue {
    kind: string;
    path: string;
    value: string;
}

export interface SchServiceConnectorTask {
    batchSizeInKbs: number;
    batchTimeInSec: number;
    condition: string;
    functionId: string;
    kind: string;
}

export interface SchServiceConnectorTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface ServiceCatalogPrivateApplicationLogo {
    contentUrl: string;
    displayName: string;
    mimeType: string;
}

export interface ServiceCatalogPrivateApplicationPackageDetails {
    packageType: string;
    version: string;
    zipFileBase64encoded: string;
}

export interface ServiceCatalogPrivateApplicationTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface ServiceCatalogServiceCatalogAssociationTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface ServiceCatalogServiceCatalogTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface ServiceMeshAccessPolicyRule {
    action: string;
    destination: outputs.ServiceMeshAccessPolicyRuleDestination;
    source: outputs.ServiceMeshAccessPolicyRuleSource;
}

export interface ServiceMeshAccessPolicyRuleDestination {
    hostnames: string[];
    ingressGatewayId: string;
    ipAddresses: string[];
    ports: number[];
    protocol: string;
    type: string;
    virtualServiceId: string;
}

export interface ServiceMeshAccessPolicyRuleSource {
    hostnames: string[];
    ingressGatewayId: string;
    ipAddresses: string[];
    ports: number[];
    protocol: string;
    type: string;
    virtualServiceId: string;
}

export interface ServiceMeshAccessPolicyTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface ServiceMeshIngressGatewayAccessLogging {
    isEnabled: boolean;
}

export interface ServiceMeshIngressGatewayHost {
    hostnames: string[];
    listeners: outputs.ServiceMeshIngressGatewayHostListener[];
    name: string;
}

export interface ServiceMeshIngressGatewayHostListener {
    port: number;
    protocol: string;
    tls?: outputs.ServiceMeshIngressGatewayHostListenerTls;
}

export interface ServiceMeshIngressGatewayHostListenerTls {
    clientValidation?: outputs.ServiceMeshIngressGatewayHostListenerTlsClientValidation;
    mode: string;
    serverCertificate?: outputs.ServiceMeshIngressGatewayHostListenerTlsServerCertificate;
}

export interface ServiceMeshIngressGatewayHostListenerTlsClientValidation {
    subjectAlternateNames: string[];
    trustedCaBundle?: outputs.ServiceMeshIngressGatewayHostListenerTlsClientValidationTrustedCaBundle;
}

export interface ServiceMeshIngressGatewayHostListenerTlsClientValidationTrustedCaBundle {
    caBundleId: string;
    secretName: string;
    type: string;
}

export interface ServiceMeshIngressGatewayHostListenerTlsServerCertificate {
    certificateId: string;
    secretName: string;
    type: string;
}

export interface ServiceMeshIngressGatewayMtls {
    certificateId: string;
    maximumValidity: number;
}

export interface ServiceMeshIngressGatewayRouteTableRouteRule {
    destinations: outputs.ServiceMeshIngressGatewayRouteTableRouteRuleDestination[];
    ingressGatewayHost?: outputs.ServiceMeshIngressGatewayRouteTableRouteRuleIngressGatewayHost;
    isGrpc: boolean;
    isHostRewriteEnabled: boolean;
    isPathRewriteEnabled: boolean;
    path: string;
    pathType: string;
    requestTimeoutInMs: string;
    type: string;
}

export interface ServiceMeshIngressGatewayRouteTableRouteRuleDestination {
    port: number;
    virtualServiceId: string;
    weight: number;
}

export interface ServiceMeshIngressGatewayRouteTableRouteRuleIngressGatewayHost {
    name: string;
    port: number;
}

export interface ServiceMeshIngressGatewayRouteTableTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface ServiceMeshIngressGatewayTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface ServiceMeshMeshCertificateAuthority {
    id: string;
}

export interface ServiceMeshMeshMtls {
    minimum: string;
}

export interface ServiceMeshMeshTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface ServiceMeshVirtualDeploymentAccessLogging {
    isEnabled: boolean;
}

export interface ServiceMeshVirtualDeploymentListener {
    idleTimeoutInMs: string;
    port: number;
    protocol: string;
    requestTimeoutInMs: string;
}

export interface ServiceMeshVirtualDeploymentServiceDiscovery {
    hostname: string;
    type: string;
}

export interface ServiceMeshVirtualDeploymentTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface ServiceMeshVirtualServiceDefaultRoutingPolicy {
    type: string;
}

export interface ServiceMeshVirtualServiceMtls {
    certificateId: string;
    maximumValidity: number;
    mode: string;
}

export interface ServiceMeshVirtualServiceRouteTableRouteRule {
    destinations: outputs.ServiceMeshVirtualServiceRouteTableRouteRuleDestination[];
    isGrpc: boolean;
    path: string;
    pathType: string;
    requestTimeoutInMs: string;
    type: string;
}

export interface ServiceMeshVirtualServiceRouteTableRouteRuleDestination {
    port: number;
    virtualDeploymentId: string;
    weight: number;
}

export interface ServiceMeshVirtualServiceRouteTableTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface ServiceMeshVirtualServiceTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface StackMonitoringBaselineableMetricTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface StackMonitoringConfigTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface StackMonitoringDiscoveryJobDiscoveryDetails {
    agentId: string;
    credentials?: outputs.StackMonitoringDiscoveryJobDiscoveryDetailsCredentials;
    license: string;
    properties: outputs.StackMonitoringDiscoveryJobDiscoveryDetailsProperties;
    resourceName: string;
    resourceType: string;
    tags?: outputs.StackMonitoringDiscoveryJobDiscoveryDetailsTags;
}

export interface StackMonitoringDiscoveryJobDiscoveryDetailsCredentials {
    items: outputs.StackMonitoringDiscoveryJobDiscoveryDetailsCredentialsItem[];
}

export interface StackMonitoringDiscoveryJobDiscoveryDetailsCredentialsItem {
    credentialName: string;
    credentialType: string;
    properties: outputs.StackMonitoringDiscoveryJobDiscoveryDetailsCredentialsItemProperties;
}

export interface StackMonitoringDiscoveryJobDiscoveryDetailsCredentialsItemProperties {
    propertiesMap?: {[key: string]: string};
}

export interface StackMonitoringDiscoveryJobDiscoveryDetailsProperties {
    propertiesMap?: {[key: string]: string};
}

export interface StackMonitoringDiscoveryJobDiscoveryDetailsTags {
    propertiesMap?: {[key: string]: string};
}

export interface StackMonitoringDiscoveryJobTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface StackMonitoringMetricExtensionEnabledOnResource {
    resourceId: string;
}

export interface StackMonitoringMetricExtensionMetricExtensionOnGivenResourcesManagementTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface StackMonitoringMetricExtensionMetricList {
    computeExpression?: string;
    dataType: string;
    displayName?: string;
    isDimension: boolean;
    isHidden: boolean;
    metricCategory: string;
    name: string;
    unit?: string;
}

export interface StackMonitoringMetricExtensionQueryProperties {
    arguments: string;
    autoRowPrefix: string;
    collectionMethod: string;
    command: string;
    delimiter: string;
    identityMetric: string;
    inParamDetails?: outputs.StackMonitoringMetricExtensionQueryPropertiesInParamDetail[];
    isMetricServiceEnabled: boolean;
    jmxAttributes: string;
    managedBeanQuery: string;
    outParamDetails?: outputs.StackMonitoringMetricExtensionQueryPropertiesOutParamDetails;
    scriptDetails?: outputs.StackMonitoringMetricExtensionQueryPropertiesScriptDetails;
    sqlDetails?: outputs.StackMonitoringMetricExtensionQueryPropertiesSqlDetails;
    sqlType: string;
    startsWith: string;
}

export interface StackMonitoringMetricExtensionQueryPropertiesInParamDetail {
    inParamPosition: number;
    inParamValue: string;
}

export interface StackMonitoringMetricExtensionQueryPropertiesOutParamDetails {
    outParamPosition: number;
    outParamType: string;
}

export interface StackMonitoringMetricExtensionQueryPropertiesScriptDetails {
    content: string;
    name: string;
}

export interface StackMonitoringMetricExtensionQueryPropertiesSqlDetails {
    content: string;
    scriptFileName?: string;
}

export interface StackMonitoringMetricExtensionTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface StackMonitoringMetricExtensionsTestManagementTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface StackMonitoringMonitoredResourceAdditionalAlias {
    credential: outputs.StackMonitoringMonitoredResourceAdditionalAliasCredential;
    name: string;
    source: string;
}

export interface StackMonitoringMonitoredResourceAdditionalAliasCredential {
    name: string;
    service: string;
    source: string;
}

export interface StackMonitoringMonitoredResourceAdditionalCredential {
    credentialType?: string;
    description?: string;
    keyId?: string;
    name?: string;
    properties?: outputs.StackMonitoringMonitoredResourceAdditionalCredentialProperty[];
    source?: string;
    type?: string;
}

export interface StackMonitoringMonitoredResourceAdditionalCredentialProperty {
    name?: string;
    value?: string;
}

export interface StackMonitoringMonitoredResourceAliases {
    credential: outputs.StackMonitoringMonitoredResourceAliasesCredential;
    name: string;
    source: string;
}

export interface StackMonitoringMonitoredResourceAliasesCredential {
    name: string;
    service: string;
    source: string;
}

export interface StackMonitoringMonitoredResourceCredentials {
    credentialType?: string;
    description?: string;
    keyId?: string;
    name?: string;
    properties?: outputs.StackMonitoringMonitoredResourceCredentialsProperty[];
    source?: string;
    type?: string;
}

export interface StackMonitoringMonitoredResourceCredentialsProperty {
    name?: string;
    value?: string;
}

export interface StackMonitoringMonitoredResourceDatabaseConnectionDetails {
    connectorId?: string;
    dbId?: string;
    dbUniqueName?: string;
    port: number;
    protocol: string;
    serviceName: string;
    sslSecretId?: string;
}

export interface StackMonitoringMonitoredResourceProperty {
    name?: string;
    value?: string;
}

export interface StackMonitoringMonitoredResourceTaskTaskDetails {
    availabilityProxyMetricCollectionInterval: number;
    availabilityProxyMetrics: string[];
    consolePathPrefix?: string;
    externalIdMapping?: string;
    lifecycleStatusMappingsForUpStatuses?: string[];
    namespace: string;
    resourceGroup: string;
    resourceNameFilter?: string;
    resourceNameMapping?: string;
    resourceTypeFilter?: string;
    resourceTypeMapping?: string;
    serviceBaseUrl?: string;
    shouldUseMetricsFlowForStatus: boolean;
    source: string;
    type: string;
}

export interface StackMonitoringMonitoredResourceTaskTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface StackMonitoringMonitoredResourceTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface StackMonitoringMonitoredResourceTypeMetadata {
    agentProperties: string[];
    format: string;
    requiredProperties: string[];
    uniquePropertySets?: outputs.StackMonitoringMonitoredResourceTypeMetadataUniquePropertySet[];
    validPropertiesForCreates: string[];
    validPropertiesForUpdates: string[];
    validPropertyValues: {[key: string]: string};
}

export interface StackMonitoringMonitoredResourceTypeMetadataUniquePropertySet {
    properties: string[];
}

export interface StackMonitoringMonitoredResourceTypeTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface StackMonitoringMonitoredResourcesAssociateMonitoredResourceDestinationResourceDetail {
    compartmentId: string;
    name: string;
    type: string;
}

export interface StackMonitoringMonitoredResourcesAssociateMonitoredResourceSourceResourceDetail {
    compartmentId: string;
    name: string;
    type: string;
}

export interface StackMonitoringMonitoredResourcesAssociateMonitoredResourceTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface StackMonitoringMonitoredResourcesListMemberItem {
    compartmentId: string;
    definedTags: {[key: string]: string};
    externalId: string;
    freeformTags: {[key: string]: string};
    hostName: string;
    license: string;
    parentId: string;
    resourceCategory: string;
    resourceDisplayName: string;
    resourceId: string;
    resourceName: string;
    resourceType: string;
    sourceType: string;
    state: string;
    systemTags: {[key: string]: string};
}

export interface StackMonitoringMonitoredResourcesListMemberTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface StackMonitoringMonitoredResourcesSearchAssociationItem {
    associationType: string;
    destinationResourceDetails: outputs.StackMonitoringMonitoredResourcesSearchAssociationItemDestinationResourceDetail[];
    destinationResourceId: string;
    sourceResourceDetails: outputs.StackMonitoringMonitoredResourcesSearchAssociationItemSourceResourceDetail[];
    sourceResourceId: string;
    timeCreated: string;
}

export interface StackMonitoringMonitoredResourcesSearchAssociationItemDestinationResourceDetail {
    compartmentId: string;
    name: string;
    type: string;
}

export interface StackMonitoringMonitoredResourcesSearchAssociationItemSourceResourceDetail {
    compartmentId: string;
    name: string;
    type: string;
}

export interface StackMonitoringMonitoredResourcesSearchAssociationTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface StackMonitoringMonitoredResourcesSearchItem {
    compartmentId: string;
    definedTags: {[key: string]: string};
    displayName: string;
    externalId: string;
    freeformTags: {[key: string]: string};
    hostName: string;
    id: string;
    license: string;
    managementAgentId: string;
    name: string;
    properties: outputs.StackMonitoringMonitoredResourcesSearchItemProperty[];
    resourceCategory: string;
    sourceType: string;
    state: string;
    systemTags: {[key: string]: string};
    timeCreated: string;
    timeUpdated: string;
    type: string;
}

export interface StackMonitoringMonitoredResourcesSearchItemProperty {
    name: string;
    value: string;
}

export interface StackMonitoringMonitoredResourcesSearchTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface StackMonitoringProcessSetSpecification {
    items: outputs.StackMonitoringProcessSetSpecificationItem[];
}

export interface StackMonitoringProcessSetSpecificationItem {
    label: string;
    processCommand: string;
    processLineRegexPattern: string;
    processUser: string;
}

export interface StackMonitoringProcessSetTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface StreamingConnectHarnessTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface StreamingStreamPoolCustomEncryptionKey {
    keyState: string;
    kmsKeyId: string;
}

export interface StreamingStreamPoolKafkaSettings {
    autoCreateTopicsEnable: boolean;
    bootstrapServers: string;
    logRetentionHours: number;
    numPartitions: number;
}

export interface StreamingStreamPoolPrivateEndpointSettings {
    nsgIds: string[];
    privateEndpointIp: string;
    subnetId: string;
}

export interface StreamingStreamPoolTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface StreamingStreamTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface UsageProxySubscriptionRedeemableUserItem {
    emailId: string;
    firstName: string;
    lastName: string;
}

export interface UsageProxySubscriptionRedeemableUserTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface VaultSecretRotationConfig {
    isScheduledRotationEnabled: boolean;
    rotationInterval: string;
    targetSystemDetails: outputs.VaultSecretRotationConfigTargetSystemDetails;
}

export interface VaultSecretRotationConfigTargetSystemDetails {
    adbId: string;
    functionId: string;
    targetSystemType: string;
}

export interface VaultSecretSecretContent {
    content?: string;
    contentType: string;
    name?: string;
    stage: string;
}

export interface VaultSecretSecretRule {
    isEnforcedOnDeletedSecretVersions: boolean;
    isSecretContentRetrievalBlockedOnExpiry: boolean;
    ruleType: string;
    secretVersionExpiryInterval: string;
    timeOfAbsoluteExpiry: string;
}

export interface VaultSecretTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface VbsInstVbsInstanceTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface VisualBuilderVbInstanceAlternateCustomEndpoint {
    certificateSecretId: string;
    certificateSecretVersion: number;
    hostname: string;
}

export interface VisualBuilderVbInstanceAttachment {
    isImplicit: boolean;
    targetId: string;
    targetInstanceUrl: string;
    targetRole: string;
    targetServiceType: string;
}

export interface VisualBuilderVbInstanceCustomEndpoint {
    certificateSecretId: string;
    certificateSecretVersion: number;
    hostname: string;
}

export interface VisualBuilderVbInstanceIdcsInfo {
    idcsAppDisplayName: string;
    idcsAppId: string;
    idcsAppLocationUrl: string;
    idcsAppName: string;
    instancePrimaryAudienceUrl: string;
}

export interface VisualBuilderVbInstanceTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface VnMonitoringPathAnalysiDestinationEndpoint {
    address: string;
    instanceId: string;
    listenerId: string;
    loadBalancerId: string;
    networkLoadBalancerId: string;
    state: string;
    subnetId: string;
    type: string;
    vlanId: string;
    vnicId: string;
}

export interface VnMonitoringPathAnalysiProtocolParameters {
    destinationPort: number;
    icmpCode: number;
    icmpType: number;
    sourcePort: number;
    type: string;
}

export interface VnMonitoringPathAnalysiQueryOptions {
    isBiDirectionalAnalysis: boolean;
}

export interface VnMonitoringPathAnalysiSourceEndpoint {
    address: string;
    instanceId: string;
    listenerId: string;
    loadBalancerId: string;
    networkLoadBalancerId: string;
    state: string;
    subnetId: string;
    type: string;
    vlanId: string;
    vnicId: string;
}

export interface VnMonitoringPathAnalysiTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface VnMonitoringPathAnalyzerTestDestinationEndpoint {
    address: string;
    instanceId: string;
    listenerId: string;
    loadBalancerId: string;
    networkLoadBalancerId: string;
    state: string;
    subnetId: string;
    type: string;
    vlanId: string;
    vnicId: string;
}

export interface VnMonitoringPathAnalyzerTestProtocolParameters {
    destinationPort: number;
    icmpCode: number;
    icmpType: number;
    sourcePort: number;
    type: string;
}

export interface VnMonitoringPathAnalyzerTestQueryOptions {
    isBiDirectionalAnalysis: boolean;
}

export interface VnMonitoringPathAnalyzerTestSourceEndpoint {
    address: string;
    instanceId: string;
    listenerId: string;
    loadBalancerId: string;
    networkLoadBalancerId: string;
    state: string;
    subnetId: string;
    type: string;
    vlanId: string;
    vnicId: string;
}

export interface VnMonitoringPathAnalyzerTestTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface VulnerabilityScanningContainerScanRecipeScanSettings {
    scanLevel: string;
}

export interface VulnerabilityScanningContainerScanRecipeTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface VulnerabilityScanningContainerScanTargetTargetRegistry {
    compartmentId: string;
    repositories: string[];
    type: string;
    url: string;
}

export interface VulnerabilityScanningContainerScanTargetTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface VulnerabilityScanningHostScanRecipeAgentSettings {
    agentConfiguration?: outputs.VulnerabilityScanningHostScanRecipeAgentSettingsAgentConfiguration;
    scanLevel: string;
}

export interface VulnerabilityScanningHostScanRecipeAgentSettingsAgentConfiguration {
    cisBenchmarkSettings?: outputs.VulnerabilityScanningHostScanRecipeAgentSettingsAgentConfigurationCisBenchmarkSettings;
    endpointProtectionSettings?: outputs.VulnerabilityScanningHostScanRecipeAgentSettingsAgentConfigurationEndpointProtectionSettings;
    shouldUnInstall: boolean;
    vaultSecretId: string;
    vendor: string;
    vendorType: string;
}

export interface VulnerabilityScanningHostScanRecipeAgentSettingsAgentConfigurationCisBenchmarkSettings {
    scanLevel: string;
}

export interface VulnerabilityScanningHostScanRecipeAgentSettingsAgentConfigurationEndpointProtectionSettings {
    scanLevel: string;
}

export interface VulnerabilityScanningHostScanRecipeApplicationSettings {
    applicationScanRecurrence: string;
    foldersToScans: outputs.VulnerabilityScanningHostScanRecipeApplicationSettingsFoldersToScan[];
    isEnabled: boolean;
}

export interface VulnerabilityScanningHostScanRecipeApplicationSettingsFoldersToScan {
    folder: string;
    operatingsystem: string;
}

export interface VulnerabilityScanningHostScanRecipePortSettings {
    scanLevel: string;
}

export interface VulnerabilityScanningHostScanRecipeSchedule {
    dayOfWeek: string;
    type: string;
}

export interface VulnerabilityScanningHostScanRecipeTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface VulnerabilityScanningHostScanTargetTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface WaaWebAppAccelerationPolicyResponseCachingPolicy {
    isResponseHeaderBasedCachingEnabled: boolean;
}

export interface WaaWebAppAccelerationPolicyResponseCompressionPolicy {
    gzipCompression?: outputs.WaaWebAppAccelerationPolicyResponseCompressionPolicyGzipCompression;
}

export interface WaaWebAppAccelerationPolicyResponseCompressionPolicyGzipCompression {
    isEnabled: boolean;
}

export interface WaaWebAppAccelerationPolicyTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface WaaWebAppAccelerationTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface WaasAddressListTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface WaasCertificateExtension {
    isCritical: boolean;
    name: string;
    value: string;
}

export interface WaasCertificateIssuerName {
    commonName: string;
    country: string;
    emailAddress: string;
    locality: string;
    organization: string;
    organizationalUnit: string;
    stateProvince: string;
}

export interface WaasCertificatePublicKeyInfo {
    algorithm: string;
    exponent: number;
    keySize: number;
}

export interface WaasCertificateSubjectName {
    commonName: string;
    country: string;
    emailAddress: string;
    locality: string;
    organization: string;
    organizationalUnit: string;
    stateProvince: string;
}

export interface WaasCertificateTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface WaasCustomProtectionRuleTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface WaasHttpRedirectTarget {
    host: string;
    path: string;
    port: number;
    protocol: string;
    query: string;
}

export interface WaasHttpRedirectTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface WaasProtectionRuleExclusion {
    exclusions: string[];
    target: string;
}

export interface WaasProtectionRuleTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface WaasPurgeCacheTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface WaasWaasPolicyOrigin {
    customHeaders?: outputs.WaasWaasPolicyOriginCustomHeader[];
    httpPort?: number;
    httpsPort?: number;
    label: string;
    uri: string;
}

export interface WaasWaasPolicyOriginCustomHeader {
    name: string;
    value: string;
}

export interface WaasWaasPolicyOriginGroup {
    label: string;
    originGroups: outputs.WaasWaasPolicyOriginGroupOriginGroup[];
}

export interface WaasWaasPolicyOriginGroupOriginGroup {
    origin: string;
    weight?: number;
}

export interface WaasWaasPolicyPolicyConfig {
    certificateId: string;
    cipherGroup: string;
    clientAddressHeader?: string;
    healthChecks?: outputs.WaasWaasPolicyPolicyConfigHealthChecks;
    isBehindCdn: boolean;
    isCacheControlRespected: boolean;
    isHttpsEnabled: boolean;
    isHttpsForced: boolean;
    isOriginCompressionEnabled: boolean;
    isResponseBufferingEnabled: boolean;
    isSniEnabled: boolean;
    loadBalancingMethod?: outputs.WaasWaasPolicyPolicyConfigLoadBalancingMethod;
    tlsProtocols: string[];
    websocketPathPrefixes: string[];
}

export interface WaasWaasPolicyPolicyConfigHealthChecks {
    expectedResponseCodeGroups: string[];
    expectedResponseText: string;
    headers: {[key: string]: string};
    healthyThreshold: number;
    intervalInSeconds: number;
    isEnabled: boolean;
    isResponseTextCheckEnabled: boolean;
    method: string;
    path: string;
    timeoutInSeconds: number;
    unhealthyThreshold: number;
}

export interface WaasWaasPolicyPolicyConfigLoadBalancingMethod {
    domain: string;
    expirationTimeInSeconds: number;
    method: string;
    name: string;
}

export interface WaasWaasPolicyTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface WaasWaasPolicyWafConfig {
    accessRules?: outputs.WaasWaasPolicyWafConfigAccessRule[];
    addressRateLimiting?: outputs.WaasWaasPolicyWafConfigAddressRateLimiting;
    cachingRules?: outputs.WaasWaasPolicyWafConfigCachingRule[];
    captchas?: outputs.WaasWaasPolicyWafConfigCaptcha[];
    customProtectionRules?: outputs.WaasWaasPolicyWafConfigCustomProtectionRule[];
    deviceFingerprintChallenge?: outputs.WaasWaasPolicyWafConfigDeviceFingerprintChallenge;
    humanInteractionChallenge?: outputs.WaasWaasPolicyWafConfigHumanInteractionChallenge;
    jsChallenge?: outputs.WaasWaasPolicyWafConfigJsChallenge;
    origin: string;
    originGroups: string[];
    protectionSettings?: outputs.WaasWaasPolicyWafConfigProtectionSettings;
    whitelists?: outputs.WaasWaasPolicyWafConfigWhitelist[];
}

export interface WaasWaasPolicyWafConfigAccessRule {
    action: string;
    blockAction: string;
    blockErrorPageCode: string;
    blockErrorPageDescription: string;
    blockErrorPageMessage: string;
    blockResponseCode: number;
    bypassChallenges: string[];
    captchaFooter: string;
    captchaHeader: string;
    captchaSubmitLabel: string;
    captchaTitle: string;
    criterias: outputs.WaasWaasPolicyWafConfigAccessRuleCriteria[];
    name: string;
    redirectResponseCode: string;
    redirectUrl: string;
    responseHeaderManipulations?: outputs.WaasWaasPolicyWafConfigAccessRuleResponseHeaderManipulation[];
}

export interface WaasWaasPolicyWafConfigAccessRuleCriteria {
    condition: string;
    isCaseSensitive: boolean;
    value: string;
}

export interface WaasWaasPolicyWafConfigAccessRuleResponseHeaderManipulation {
    action: string;
    header: string;
    value: string;
}

export interface WaasWaasPolicyWafConfigAddressRateLimiting {
    allowedRatePerAddress: number;
    blockResponseCode: number;
    isEnabled: boolean;
    maxDelayedCountPerAddress: number;
}

export interface WaasWaasPolicyWafConfigCachingRule {
    action: string;
    cachingDuration?: string;
    clientCachingDuration?: string;
    criterias: outputs.WaasWaasPolicyWafConfigCachingRuleCriteria[];
    isClientCachingEnabled: boolean;
    key: string;
    name: string;
}

export interface WaasWaasPolicyWafConfigCachingRuleCriteria {
    condition: string;
    value: string;
}

export interface WaasWaasPolicyWafConfigCaptcha {
    failureMessage: string;
    footerText: string;
    headerText: string;
    sessionExpirationInSeconds: number;
    submitLabel: string;
    title: string;
    url: string;
}

export interface WaasWaasPolicyWafConfigCustomProtectionRule {
    action: string;
    exclusions?: outputs.WaasWaasPolicyWafConfigCustomProtectionRuleExclusion[];
    id: string;
}

export interface WaasWaasPolicyWafConfigCustomProtectionRuleExclusion {
    exclusions: string[];
    target: string;
}

export interface WaasWaasPolicyWafConfigDeviceFingerprintChallenge {
    action: string;
    actionExpirationInSeconds: number;
    challengeSettings?: outputs.WaasWaasPolicyWafConfigDeviceFingerprintChallengeChallengeSettings;
    failureThreshold: number;
    failureThresholdExpirationInSeconds: number;
    isEnabled: boolean;
    maxAddressCount: number;
    maxAddressCountExpirationInSeconds: number;
}

export interface WaasWaasPolicyWafConfigDeviceFingerprintChallengeChallengeSettings {
    blockAction: string;
    blockErrorPageCode: string;
    blockErrorPageDescription: string;
    blockErrorPageMessage: string;
    blockResponseCode: number;
    captchaFooter: string;
    captchaHeader: string;
    captchaSubmitLabel: string;
    captchaTitle: string;
}

export interface WaasWaasPolicyWafConfigHumanInteractionChallenge {
    action: string;
    actionExpirationInSeconds: number;
    challengeSettings?: outputs.WaasWaasPolicyWafConfigHumanInteractionChallengeChallengeSettings;
    failureThreshold: number;
    failureThresholdExpirationInSeconds: number;
    interactionThreshold: number;
    isEnabled: boolean;
    isNatEnabled: boolean;
    recordingPeriodInSeconds: number;
    setHttpHeader?: outputs.WaasWaasPolicyWafConfigHumanInteractionChallengeSetHttpHeader;
}

export interface WaasWaasPolicyWafConfigHumanInteractionChallengeChallengeSettings {
    blockAction: string;
    blockErrorPageCode: string;
    blockErrorPageDescription: string;
    blockErrorPageMessage: string;
    blockResponseCode: number;
    captchaFooter: string;
    captchaHeader: string;
    captchaSubmitLabel: string;
    captchaTitle: string;
}

export interface WaasWaasPolicyWafConfigHumanInteractionChallengeSetHttpHeader {
    name: string;
    value: string;
}

export interface WaasWaasPolicyWafConfigJsChallenge {
    action: string;
    actionExpirationInSeconds: number;
    areRedirectsChallenged: boolean;
    challengeSettings?: outputs.WaasWaasPolicyWafConfigJsChallengeChallengeSettings;
    criterias?: outputs.WaasWaasPolicyWafConfigJsChallengeCriteria[];
    failureThreshold: number;
    isEnabled: boolean;
    isNatEnabled: boolean;
    setHttpHeader?: outputs.WaasWaasPolicyWafConfigJsChallengeSetHttpHeader;
}

export interface WaasWaasPolicyWafConfigJsChallengeChallengeSettings {
    blockAction: string;
    blockErrorPageCode: string;
    blockErrorPageDescription: string;
    blockErrorPageMessage: string;
    blockResponseCode: number;
    captchaFooter: string;
    captchaHeader: string;
    captchaSubmitLabel: string;
    captchaTitle: string;
}

export interface WaasWaasPolicyWafConfigJsChallengeCriteria {
    condition: string;
    isCaseSensitive: boolean;
    value: string;
}

export interface WaasWaasPolicyWafConfigJsChallengeSetHttpHeader {
    name: string;
    value: string;
}

export interface WaasWaasPolicyWafConfigProtectionSettings {
    allowedHttpMethods: string[];
    blockAction: string;
    blockErrorPageCode: string;
    blockErrorPageDescription: string;
    blockErrorPageMessage: string;
    blockResponseCode: number;
    isResponseInspected: boolean;
    maxArgumentCount: number;
    maxNameLengthPerArgument: number;
    maxResponseSizeInKiB: number;
    maxTotalNameLengthOfArguments: number;
    mediaTypes: string[];
    recommendationsPeriodInDays: number;
}

export interface WaasWaasPolicyWafConfigWhitelist {
    addressLists: string[];
    addresses: string[];
    name: string;
}

export interface WafNetworkAddressListTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface WafNetworkAddressListVcnAddress {
    addresses: string;
    vcnId: string;
}

export interface WafWebAppFirewallPolicyAction {
    body?: outputs.WafWebAppFirewallPolicyActionBody;
    code: number;
    headers?: outputs.WafWebAppFirewallPolicyActionHeader[];
    name: string;
    type: string;
}

export interface WafWebAppFirewallPolicyActionBody {
    template?: string;
    text?: string;
    type: string;
}

export interface WafWebAppFirewallPolicyActionHeader {
    name: string;
    value: string;
}

export interface WafWebAppFirewallPolicyRequestAccessControl {
    defaultActionName: string;
    rules?: outputs.WafWebAppFirewallPolicyRequestAccessControlRule[];
}

export interface WafWebAppFirewallPolicyRequestAccessControlRule {
    actionName: string;
    condition: string;
    conditionLanguage: string;
    name: string;
    type: string;
}

export interface WafWebAppFirewallPolicyRequestProtection {
    bodyInspectionSizeLimitExceededActionName: string;
    bodyInspectionSizeLimitInBytes?: number;
    rules?: outputs.WafWebAppFirewallPolicyRequestProtectionRule[];
}

export interface WafWebAppFirewallPolicyRequestProtectionRule {
    actionName: string;
    condition: string;
    conditionLanguage: string;
    isBodyInspectionEnabled: boolean;
    name: string;
    protectionCapabilities: outputs.WafWebAppFirewallPolicyRequestProtectionRuleProtectionCapability[];
    protectionCapabilitySettings?: outputs.WafWebAppFirewallPolicyRequestProtectionRuleProtectionCapabilitySettings;
    type: string;
}

export interface WafWebAppFirewallPolicyRequestProtectionRuleProtectionCapability {
    actionName: string;
    collaborativeActionThreshold: number;
    collaborativeWeights?: outputs.WafWebAppFirewallPolicyRequestProtectionRuleProtectionCapabilityCollaborativeWeight[];
    exclusions?: outputs.WafWebAppFirewallPolicyRequestProtectionRuleProtectionCapabilityExclusions;
    key: string;
    version: number;
}

export interface WafWebAppFirewallPolicyRequestProtectionRuleProtectionCapabilityCollaborativeWeight {
    key: string;
    weight: number;
}

export interface WafWebAppFirewallPolicyRequestProtectionRuleProtectionCapabilityExclusions {
    args: string[];
    requestCookies: string[];
}

export interface WafWebAppFirewallPolicyRequestProtectionRuleProtectionCapabilitySettings {
    allowedHttpMethods: string[];
    maxHttpRequestHeaderLength?: number;
    maxHttpRequestHeaders?: number;
    maxNumberOfArguments?: number;
    maxSingleArgumentLength?: number;
    maxTotalArgumentLength?: number;
}

export interface WafWebAppFirewallPolicyRequestRateLimiting {
    rules?: outputs.WafWebAppFirewallPolicyRequestRateLimitingRule[];
}

export interface WafWebAppFirewallPolicyRequestRateLimitingRule {
    actionName: string;
    condition: string;
    conditionLanguage: string;
    configurations: outputs.WafWebAppFirewallPolicyRequestRateLimitingRuleConfiguration[];
    name: string;
    type: string;
}

export interface WafWebAppFirewallPolicyRequestRateLimitingRuleConfiguration {
    actionDurationInSeconds: number;
    periodInSeconds: number;
    requestsLimit: number;
}

export interface WafWebAppFirewallPolicyResponseAccessControl {
    rules?: outputs.WafWebAppFirewallPolicyResponseAccessControlRule[];
}

export interface WafWebAppFirewallPolicyResponseAccessControlRule {
    actionName: string;
    condition: string;
    conditionLanguage: string;
    name: string;
    type: string;
}

export interface WafWebAppFirewallPolicyResponseProtection {
    rules?: outputs.WafWebAppFirewallPolicyResponseProtectionRule[];
}

export interface WafWebAppFirewallPolicyResponseProtectionRule {
    actionName: string;
    condition: string;
    conditionLanguage: string;
    isBodyInspectionEnabled: boolean;
    name: string;
    protectionCapabilities: outputs.WafWebAppFirewallPolicyResponseProtectionRuleProtectionCapability[];
    protectionCapabilitySettings?: outputs.WafWebAppFirewallPolicyResponseProtectionRuleProtectionCapabilitySettings;
    type: string;
}

export interface WafWebAppFirewallPolicyResponseProtectionRuleProtectionCapability {
    actionName: string;
    collaborativeActionThreshold: number;
    collaborativeWeights?: outputs.WafWebAppFirewallPolicyResponseProtectionRuleProtectionCapabilityCollaborativeWeight[];
    exclusions?: outputs.WafWebAppFirewallPolicyResponseProtectionRuleProtectionCapabilityExclusions;
    key: string;
    version: number;
}

export interface WafWebAppFirewallPolicyResponseProtectionRuleProtectionCapabilityCollaborativeWeight {
    key: string;
    weight: number;
}

export interface WafWebAppFirewallPolicyResponseProtectionRuleProtectionCapabilityExclusions {
    args: string[];
    requestCookies: string[];
}

export interface WafWebAppFirewallPolicyResponseProtectionRuleProtectionCapabilitySettings {
    allowedHttpMethods: string[];
    maxHttpRequestHeaderLength?: number;
    maxHttpRequestHeaders?: number;
    maxNumberOfArguments?: number;
    maxSingleArgumentLength?: number;
    maxTotalArgumentLength?: number;
}

export interface WafWebAppFirewallPolicyTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface WafWebAppFirewallTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

