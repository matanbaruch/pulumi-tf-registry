// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getLicenseManagerProductLicense(args: GetLicenseManagerProductLicenseArgs, opts?: pulumi.InvokeOptions): Promise<GetLicenseManagerProductLicenseResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getLicenseManagerProductLicense:getLicenseManagerProductLicense", {
        "productLicenseId": args.productLicenseId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getLicenseManagerProductLicense.
 */
export interface GetLicenseManagerProductLicenseArgs {
    productLicenseId: string;
}

/**
 * A collection of values returned by getLicenseManagerProductLicense.
 */
export interface GetLicenseManagerProductLicenseResult {
    readonly activeLicenseRecordCount: number;
    readonly compartmentId: string;
    readonly definedTags: {[key: string]: string};
    readonly displayName: string;
    readonly freeformTags: {[key: string]: string};
    readonly id: string;
    readonly images: outputs.GetLicenseManagerProductLicenseImage[];
    readonly isOverSubscribed: boolean;
    readonly isUnlimited: boolean;
    readonly isVendorOracle: boolean;
    readonly licenseUnit: string;
    readonly productLicenseId: string;
    readonly state: string;
    readonly status: string;
    readonly statusDescription: string;
    readonly systemTags: {[key: string]: string};
    readonly timeCreated: string;
    readonly timeUpdated: string;
    readonly totalActiveLicenseUnitCount: number;
    readonly totalLicenseRecordCount: number;
    readonly totalLicenseUnitsConsumed: number;
    readonly vendorName: string;
}
export function getLicenseManagerProductLicenseOutput(args: GetLicenseManagerProductLicenseOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetLicenseManagerProductLicenseResult> {
    return pulumi.output(args).apply((a: any) => getLicenseManagerProductLicense(a, opts))
}

/**
 * A collection of arguments for invoking getLicenseManagerProductLicense.
 */
export interface GetLicenseManagerProductLicenseOutputArgs {
    productLicenseId: pulumi.Input<string>;
}
