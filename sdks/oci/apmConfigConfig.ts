// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ApmConfigConfig extends pulumi.CustomResource {
    /**
     * Get an existing ApmConfigConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ApmConfigConfigState, opts?: pulumi.CustomResourceOptions): ApmConfigConfig {
        return new ApmConfigConfig(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/apmConfigConfig:ApmConfigConfig';

    /**
     * Returns true if the given object is an instance of ApmConfigConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ApmConfigConfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ApmConfigConfig.__pulumiType;
    }

    public readonly apmDomainId!: pulumi.Output<string>;
    public readonly configType!: pulumi.Output<string>;
    public /*out*/ readonly createdBy!: pulumi.Output<string>;
    public readonly definedTags!: pulumi.Output<{[key: string]: string}>;
    public readonly description!: pulumi.Output<string>;
    public readonly dimensions!: pulumi.Output<outputs.ApmConfigConfigDimension[] | undefined>;
    public readonly displayName!: pulumi.Output<string>;
    public /*out*/ readonly etag!: pulumi.Output<string>;
    public readonly filterId!: pulumi.Output<string>;
    public readonly filterText!: pulumi.Output<string>;
    public readonly freeformTags!: pulumi.Output<{[key: string]: string}>;
    public readonly group!: pulumi.Output<string>;
    public readonly inUseBies!: pulumi.Output<outputs.ApmConfigConfigInUseBy[] | undefined>;
    public readonly metrics!: pulumi.Output<outputs.ApmConfigConfigMetric[] | undefined>;
    public readonly namespace!: pulumi.Output<string>;
    public readonly opcDryRun!: pulumi.Output<string>;
    public readonly options!: pulumi.Output<string>;
    public readonly rules!: pulumi.Output<outputs.ApmConfigConfigRule[] | undefined>;
    public /*out*/ readonly timeCreated!: pulumi.Output<string>;
    public /*out*/ readonly timeUpdated!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.ApmConfigConfigTimeouts | undefined>;
    public /*out*/ readonly updatedBy!: pulumi.Output<string>;

    /**
     * Create a ApmConfigConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ApmConfigConfigArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ApmConfigConfigArgs | ApmConfigConfigState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ApmConfigConfigState | undefined;
            resourceInputs["apmDomainId"] = state ? state.apmDomainId : undefined;
            resourceInputs["configType"] = state ? state.configType : undefined;
            resourceInputs["createdBy"] = state ? state.createdBy : undefined;
            resourceInputs["definedTags"] = state ? state.definedTags : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["dimensions"] = state ? state.dimensions : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["etag"] = state ? state.etag : undefined;
            resourceInputs["filterId"] = state ? state.filterId : undefined;
            resourceInputs["filterText"] = state ? state.filterText : undefined;
            resourceInputs["freeformTags"] = state ? state.freeformTags : undefined;
            resourceInputs["group"] = state ? state.group : undefined;
            resourceInputs["inUseBies"] = state ? state.inUseBies : undefined;
            resourceInputs["metrics"] = state ? state.metrics : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["opcDryRun"] = state ? state.opcDryRun : undefined;
            resourceInputs["options"] = state ? state.options : undefined;
            resourceInputs["rules"] = state ? state.rules : undefined;
            resourceInputs["timeCreated"] = state ? state.timeCreated : undefined;
            resourceInputs["timeUpdated"] = state ? state.timeUpdated : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["updatedBy"] = state ? state.updatedBy : undefined;
        } else {
            const args = argsOrState as ApmConfigConfigArgs | undefined;
            if ((!args || args.apmDomainId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'apmDomainId'");
            }
            if ((!args || args.configType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'configType'");
            }
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            resourceInputs["apmDomainId"] = args ? args.apmDomainId : undefined;
            resourceInputs["configType"] = args ? args.configType : undefined;
            resourceInputs["definedTags"] = args ? args.definedTags : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["dimensions"] = args ? args.dimensions : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["filterId"] = args ? args.filterId : undefined;
            resourceInputs["filterText"] = args ? args.filterText : undefined;
            resourceInputs["freeformTags"] = args ? args.freeformTags : undefined;
            resourceInputs["group"] = args ? args.group : undefined;
            resourceInputs["inUseBies"] = args ? args.inUseBies : undefined;
            resourceInputs["metrics"] = args ? args.metrics : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["opcDryRun"] = args ? args.opcDryRun : undefined;
            resourceInputs["options"] = args ? args.options : undefined;
            resourceInputs["rules"] = args ? args.rules : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["createdBy"] = undefined /*out*/;
            resourceInputs["etag"] = undefined /*out*/;
            resourceInputs["timeCreated"] = undefined /*out*/;
            resourceInputs["timeUpdated"] = undefined /*out*/;
            resourceInputs["updatedBy"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ApmConfigConfig.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ApmConfigConfig resources.
 */
export interface ApmConfigConfigState {
    apmDomainId?: pulumi.Input<string>;
    configType?: pulumi.Input<string>;
    createdBy?: pulumi.Input<string>;
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    description?: pulumi.Input<string>;
    dimensions?: pulumi.Input<pulumi.Input<inputs.ApmConfigConfigDimension>[]>;
    displayName?: pulumi.Input<string>;
    etag?: pulumi.Input<string>;
    filterId?: pulumi.Input<string>;
    filterText?: pulumi.Input<string>;
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    group?: pulumi.Input<string>;
    inUseBies?: pulumi.Input<pulumi.Input<inputs.ApmConfigConfigInUseBy>[]>;
    metrics?: pulumi.Input<pulumi.Input<inputs.ApmConfigConfigMetric>[]>;
    namespace?: pulumi.Input<string>;
    opcDryRun?: pulumi.Input<string>;
    options?: pulumi.Input<string>;
    rules?: pulumi.Input<pulumi.Input<inputs.ApmConfigConfigRule>[]>;
    timeCreated?: pulumi.Input<string>;
    timeUpdated?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ApmConfigConfigTimeouts>;
    updatedBy?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ApmConfigConfig resource.
 */
export interface ApmConfigConfigArgs {
    apmDomainId: pulumi.Input<string>;
    configType: pulumi.Input<string>;
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    description?: pulumi.Input<string>;
    dimensions?: pulumi.Input<pulumi.Input<inputs.ApmConfigConfigDimension>[]>;
    displayName: pulumi.Input<string>;
    filterId?: pulumi.Input<string>;
    filterText?: pulumi.Input<string>;
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    group?: pulumi.Input<string>;
    inUseBies?: pulumi.Input<pulumi.Input<inputs.ApmConfigConfigInUseBy>[]>;
    metrics?: pulumi.Input<pulumi.Input<inputs.ApmConfigConfigMetric>[]>;
    namespace?: pulumi.Input<string>;
    opcDryRun?: pulumi.Input<string>;
    options?: pulumi.Input<string>;
    rules?: pulumi.Input<pulumi.Input<inputs.ApmConfigConfigRule>[]>;
    timeouts?: pulumi.Input<inputs.ApmConfigConfigTimeouts>;
}
