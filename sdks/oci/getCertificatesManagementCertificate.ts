// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getCertificatesManagementCertificate(args: GetCertificatesManagementCertificateArgs, opts?: pulumi.InvokeOptions): Promise<GetCertificatesManagementCertificateResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getCertificatesManagementCertificate:getCertificatesManagementCertificate", {
        "certificateId": args.certificateId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getCertificatesManagementCertificate.
 */
export interface GetCertificatesManagementCertificateArgs {
    certificateId: string;
}

/**
 * A collection of values returned by getCertificatesManagementCertificate.
 */
export interface GetCertificatesManagementCertificateResult {
    readonly certificateConfigs: outputs.GetCertificatesManagementCertificateCertificateConfig[];
    readonly certificateId: string;
    readonly certificateProfileType: string;
    readonly certificateRevocationListDetails: outputs.GetCertificatesManagementCertificateCertificateRevocationListDetail[];
    readonly certificateRules: outputs.GetCertificatesManagementCertificateCertificateRule[];
    readonly compartmentId: string;
    readonly configType: string;
    readonly currentVersions: outputs.GetCertificatesManagementCertificateCurrentVersion[];
    readonly definedTags: {[key: string]: string};
    readonly description: string;
    readonly freeformTags: {[key: string]: string};
    readonly id: string;
    readonly issuerCertificateAuthorityId: string;
    readonly keyAlgorithm: string;
    readonly lifecycleDetails: string;
    readonly name: string;
    readonly signatureAlgorithm: string;
    readonly state: string;
    readonly subjects: outputs.GetCertificatesManagementCertificateSubject[];
    readonly timeCreated: string;
    readonly timeOfDeletion: string;
}
export function getCertificatesManagementCertificateOutput(args: GetCertificatesManagementCertificateOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetCertificatesManagementCertificateResult> {
    return pulumi.output(args).apply((a: any) => getCertificatesManagementCertificate(a, opts))
}

/**
 * A collection of arguments for invoking getCertificatesManagementCertificate.
 */
export interface GetCertificatesManagementCertificateOutputArgs {
    certificateId: pulumi.Input<string>;
}
