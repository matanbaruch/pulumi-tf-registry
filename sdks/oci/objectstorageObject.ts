// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ObjectstorageObject extends pulumi.CustomResource {
    /**
     * Get an existing ObjectstorageObject resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ObjectstorageObjectState, opts?: pulumi.CustomResourceOptions): ObjectstorageObject {
        return new ObjectstorageObject(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/objectstorageObject:ObjectstorageObject';

    /**
     * Returns true if the given object is an instance of ObjectstorageObject.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ObjectstorageObject {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ObjectstorageObject.__pulumiType;
    }

    public readonly bucket!: pulumi.Output<string>;
    public readonly cacheControl!: pulumi.Output<string | undefined>;
    public readonly content!: pulumi.Output<string | undefined>;
    public readonly contentDisposition!: pulumi.Output<string | undefined>;
    public readonly contentEncoding!: pulumi.Output<string | undefined>;
    public readonly contentLanguage!: pulumi.Output<string | undefined>;
    public /*out*/ readonly contentLength!: pulumi.Output<string>;
    public readonly contentMd5!: pulumi.Output<string>;
    public readonly contentType!: pulumi.Output<string>;
    public readonly deleteAllObjectVersions!: pulumi.Output<boolean | undefined>;
    public readonly metadata!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly namespace!: pulumi.Output<string>;
    public readonly object!: pulumi.Output<string>;
    public readonly opcSseKmsKeyId!: pulumi.Output<string>;
    public readonly source!: pulumi.Output<string | undefined>;
    public readonly sourceUriDetails!: pulumi.Output<outputs.ObjectstorageObjectSourceUriDetails | undefined>;
    public /*out*/ readonly state!: pulumi.Output<string>;
    public readonly storageTier!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.ObjectstorageObjectTimeouts | undefined>;
    public /*out*/ readonly versionId!: pulumi.Output<string>;
    public /*out*/ readonly workRequestId!: pulumi.Output<string>;

    /**
     * Create a ObjectstorageObject resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ObjectstorageObjectArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ObjectstorageObjectArgs | ObjectstorageObjectState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ObjectstorageObjectState | undefined;
            resourceInputs["bucket"] = state ? state.bucket : undefined;
            resourceInputs["cacheControl"] = state ? state.cacheControl : undefined;
            resourceInputs["content"] = state ? state.content : undefined;
            resourceInputs["contentDisposition"] = state ? state.contentDisposition : undefined;
            resourceInputs["contentEncoding"] = state ? state.contentEncoding : undefined;
            resourceInputs["contentLanguage"] = state ? state.contentLanguage : undefined;
            resourceInputs["contentLength"] = state ? state.contentLength : undefined;
            resourceInputs["contentMd5"] = state ? state.contentMd5 : undefined;
            resourceInputs["contentType"] = state ? state.contentType : undefined;
            resourceInputs["deleteAllObjectVersions"] = state ? state.deleteAllObjectVersions : undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["object"] = state ? state.object : undefined;
            resourceInputs["opcSseKmsKeyId"] = state ? state.opcSseKmsKeyId : undefined;
            resourceInputs["source"] = state ? state.source : undefined;
            resourceInputs["sourceUriDetails"] = state ? state.sourceUriDetails : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["storageTier"] = state ? state.storageTier : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["versionId"] = state ? state.versionId : undefined;
            resourceInputs["workRequestId"] = state ? state.workRequestId : undefined;
        } else {
            const args = argsOrState as ObjectstorageObjectArgs | undefined;
            if ((!args || args.bucket === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bucket'");
            }
            if ((!args || args.namespace === undefined) && !opts.urn) {
                throw new Error("Missing required property 'namespace'");
            }
            if ((!args || args.object === undefined) && !opts.urn) {
                throw new Error("Missing required property 'object'");
            }
            resourceInputs["bucket"] = args ? args.bucket : undefined;
            resourceInputs["cacheControl"] = args ? args.cacheControl : undefined;
            resourceInputs["content"] = args ? args.content : undefined;
            resourceInputs["contentDisposition"] = args ? args.contentDisposition : undefined;
            resourceInputs["contentEncoding"] = args ? args.contentEncoding : undefined;
            resourceInputs["contentLanguage"] = args ? args.contentLanguage : undefined;
            resourceInputs["contentMd5"] = args ? args.contentMd5 : undefined;
            resourceInputs["contentType"] = args ? args.contentType : undefined;
            resourceInputs["deleteAllObjectVersions"] = args ? args.deleteAllObjectVersions : undefined;
            resourceInputs["metadata"] = args ? args.metadata : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["object"] = args ? args.object : undefined;
            resourceInputs["opcSseKmsKeyId"] = args ? args.opcSseKmsKeyId : undefined;
            resourceInputs["source"] = args ? args.source : undefined;
            resourceInputs["sourceUriDetails"] = args ? args.sourceUriDetails : undefined;
            resourceInputs["storageTier"] = args ? args.storageTier : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["contentLength"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["versionId"] = undefined /*out*/;
            resourceInputs["workRequestId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ObjectstorageObject.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ObjectstorageObject resources.
 */
export interface ObjectstorageObjectState {
    bucket?: pulumi.Input<string>;
    cacheControl?: pulumi.Input<string>;
    content?: pulumi.Input<string>;
    contentDisposition?: pulumi.Input<string>;
    contentEncoding?: pulumi.Input<string>;
    contentLanguage?: pulumi.Input<string>;
    contentLength?: pulumi.Input<string>;
    contentMd5?: pulumi.Input<string>;
    contentType?: pulumi.Input<string>;
    deleteAllObjectVersions?: pulumi.Input<boolean>;
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    namespace?: pulumi.Input<string>;
    object?: pulumi.Input<string>;
    opcSseKmsKeyId?: pulumi.Input<string>;
    source?: pulumi.Input<string>;
    sourceUriDetails?: pulumi.Input<inputs.ObjectstorageObjectSourceUriDetails>;
    state?: pulumi.Input<string>;
    storageTier?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ObjectstorageObjectTimeouts>;
    versionId?: pulumi.Input<string>;
    workRequestId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ObjectstorageObject resource.
 */
export interface ObjectstorageObjectArgs {
    bucket: pulumi.Input<string>;
    cacheControl?: pulumi.Input<string>;
    content?: pulumi.Input<string>;
    contentDisposition?: pulumi.Input<string>;
    contentEncoding?: pulumi.Input<string>;
    contentLanguage?: pulumi.Input<string>;
    contentMd5?: pulumi.Input<string>;
    contentType?: pulumi.Input<string>;
    deleteAllObjectVersions?: pulumi.Input<boolean>;
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    namespace: pulumi.Input<string>;
    object: pulumi.Input<string>;
    opcSseKmsKeyId?: pulumi.Input<string>;
    source?: pulumi.Input<string>;
    sourceUriDetails?: pulumi.Input<inputs.ObjectstorageObjectSourceUriDetails>;
    storageTier?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ObjectstorageObjectTimeouts>;
}
