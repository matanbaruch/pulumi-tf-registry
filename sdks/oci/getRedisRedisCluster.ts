// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getRedisRedisCluster(args: GetRedisRedisClusterArgs, opts?: pulumi.InvokeOptions): Promise<GetRedisRedisClusterResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getRedisRedisCluster:getRedisRedisCluster", {
        "redisClusterId": args.redisClusterId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getRedisRedisCluster.
 */
export interface GetRedisRedisClusterArgs {
    redisClusterId: string;
}

/**
 * A collection of values returned by getRedisRedisCluster.
 */
export interface GetRedisRedisClusterResult {
    readonly clusterMode: string;
    readonly compartmentId: string;
    readonly definedTags: {[key: string]: string};
    readonly displayName: string;
    readonly freeformTags: {[key: string]: string};
    readonly id: string;
    readonly lifecycleDetails: string;
    readonly nodeCollections: outputs.GetRedisRedisClusterNodeCollection[];
    readonly nodeCount: number;
    readonly nodeMemoryInGbs: number;
    readonly nsgIds: string[];
    readonly primaryEndpointIpAddress: string;
    readonly primaryFqdn: string;
    readonly redisClusterId: string;
    readonly replicasEndpointIpAddress: string;
    readonly replicasFqdn: string;
    readonly shardCount: number;
    readonly softwareVersion: string;
    readonly state: string;
    readonly subnetId: string;
    readonly systemTags: {[key: string]: string};
    readonly timeCreated: string;
    readonly timeUpdated: string;
}
export function getRedisRedisClusterOutput(args: GetRedisRedisClusterOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetRedisRedisClusterResult> {
    return pulumi.output(args).apply((a: any) => getRedisRedisCluster(a, opts))
}

/**
 * A collection of arguments for invoking getRedisRedisCluster.
 */
export interface GetRedisRedisClusterOutputArgs {
    redisClusterId: pulumi.Input<string>;
}
