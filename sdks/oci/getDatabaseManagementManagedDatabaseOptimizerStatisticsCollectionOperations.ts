// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getDatabaseManagementManagedDatabaseOptimizerStatisticsCollectionOperations(args: GetDatabaseManagementManagedDatabaseOptimizerStatisticsCollectionOperationsArgs, opts?: pulumi.InvokeOptions): Promise<GetDatabaseManagementManagedDatabaseOptimizerStatisticsCollectionOperationsResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getDatabaseManagementManagedDatabaseOptimizerStatisticsCollectionOperations:getDatabaseManagementManagedDatabaseOptimizerStatisticsCollectionOperations", {
        "endTimeLessThanOrEqualTo": args.endTimeLessThanOrEqualTo,
        "filterBy": args.filterBy,
        "filters": args.filters,
        "id": args.id,
        "limit": args.limit,
        "managedDatabaseId": args.managedDatabaseId,
        "startTimeGreaterThanOrEqualTo": args.startTimeGreaterThanOrEqualTo,
        "taskType": args.taskType,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getDatabaseManagementManagedDatabaseOptimizerStatisticsCollectionOperations.
 */
export interface GetDatabaseManagementManagedDatabaseOptimizerStatisticsCollectionOperationsArgs {
    endTimeLessThanOrEqualTo?: string;
    filterBy?: string;
    filters?: inputs.GetDatabaseManagementManagedDatabaseOptimizerStatisticsCollectionOperationsFilter[];
    id?: string;
    limit?: number;
    managedDatabaseId: string;
    startTimeGreaterThanOrEqualTo?: string;
    taskType?: string;
}

/**
 * A collection of values returned by getDatabaseManagementManagedDatabaseOptimizerStatisticsCollectionOperations.
 */
export interface GetDatabaseManagementManagedDatabaseOptimizerStatisticsCollectionOperationsResult {
    readonly endTimeLessThanOrEqualTo?: string;
    readonly filterBy?: string;
    readonly filters?: outputs.GetDatabaseManagementManagedDatabaseOptimizerStatisticsCollectionOperationsFilter[];
    readonly id: string;
    readonly limit?: number;
    readonly managedDatabaseId: string;
    readonly optimizerStatisticsCollectionOperationsCollections: outputs.GetDatabaseManagementManagedDatabaseOptimizerStatisticsCollectionOperationsOptimizerStatisticsCollectionOperationsCollection[];
    readonly startTimeGreaterThanOrEqualTo?: string;
    readonly taskType?: string;
}
export function getDatabaseManagementManagedDatabaseOptimizerStatisticsCollectionOperationsOutput(args: GetDatabaseManagementManagedDatabaseOptimizerStatisticsCollectionOperationsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDatabaseManagementManagedDatabaseOptimizerStatisticsCollectionOperationsResult> {
    return pulumi.output(args).apply((a: any) => getDatabaseManagementManagedDatabaseOptimizerStatisticsCollectionOperations(a, opts))
}

/**
 * A collection of arguments for invoking getDatabaseManagementManagedDatabaseOptimizerStatisticsCollectionOperations.
 */
export interface GetDatabaseManagementManagedDatabaseOptimizerStatisticsCollectionOperationsOutputArgs {
    endTimeLessThanOrEqualTo?: pulumi.Input<string>;
    filterBy?: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.GetDatabaseManagementManagedDatabaseOptimizerStatisticsCollectionOperationsFilterArgs>[]>;
    id?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    managedDatabaseId: pulumi.Input<string>;
    startTimeGreaterThanOrEqualTo?: pulumi.Input<string>;
    taskType?: pulumi.Input<string>;
}
