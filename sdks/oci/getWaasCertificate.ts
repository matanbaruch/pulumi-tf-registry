// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getWaasCertificate(args: GetWaasCertificateArgs, opts?: pulumi.InvokeOptions): Promise<GetWaasCertificateResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getWaasCertificate:getWaasCertificate", {
        "certificateId": args.certificateId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getWaasCertificate.
 */
export interface GetWaasCertificateArgs {
    certificateId: string;
}

/**
 * A collection of values returned by getWaasCertificate.
 */
export interface GetWaasCertificateResult {
    readonly certificateData: string;
    readonly certificateId: string;
    readonly compartmentId: string;
    readonly definedTags: {[key: string]: string};
    readonly displayName: string;
    readonly extensions: outputs.GetWaasCertificateExtension[];
    readonly freeformTags: {[key: string]: string};
    readonly id: string;
    readonly isTrustVerificationDisabled: boolean;
    readonly issuedBy: string;
    readonly issuerNames: outputs.GetWaasCertificateIssuerName[];
    readonly privateKeyData: string;
    readonly publicKeyInfos: outputs.GetWaasCertificatePublicKeyInfo[];
    readonly serialNumber: string;
    readonly signatureAlgorithm: string;
    readonly state: string;
    readonly subjectNames: outputs.GetWaasCertificateSubjectName[];
    readonly timeCreated: string;
    readonly timeNotValidAfter: string;
    readonly timeNotValidBefore: string;
    readonly version: number;
}
export function getWaasCertificateOutput(args: GetWaasCertificateOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetWaasCertificateResult> {
    return pulumi.output(args).apply((a: any) => getWaasCertificate(a, opts))
}

/**
 * A collection of arguments for invoking getWaasCertificate.
 */
export interface GetWaasCertificateOutputArgs {
    certificateId: pulumi.Input<string>;
}
