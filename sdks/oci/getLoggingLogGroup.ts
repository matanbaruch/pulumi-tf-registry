// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getLoggingLogGroup(args: GetLoggingLogGroupArgs, opts?: pulumi.InvokeOptions): Promise<GetLoggingLogGroupResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getLoggingLogGroup:getLoggingLogGroup", {
        "logGroupId": args.logGroupId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getLoggingLogGroup.
 */
export interface GetLoggingLogGroupArgs {
    logGroupId: string;
}

/**
 * A collection of values returned by getLoggingLogGroup.
 */
export interface GetLoggingLogGroupResult {
    readonly compartmentId: string;
    readonly definedTags: {[key: string]: string};
    readonly description: string;
    readonly displayName: string;
    readonly freeformTags: {[key: string]: string};
    readonly id: string;
    readonly logGroupId: string;
    readonly state: string;
    readonly timeCreated: string;
    readonly timeLastModified: string;
}
export function getLoggingLogGroupOutput(args: GetLoggingLogGroupOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetLoggingLogGroupResult> {
    return pulumi.output(args).apply((a: any) => getLoggingLogGroup(a, opts))
}

/**
 * A collection of arguments for invoking getLoggingLogGroup.
 */
export interface GetLoggingLogGroupOutputArgs {
    logGroupId: pulumi.Input<string>;
}
