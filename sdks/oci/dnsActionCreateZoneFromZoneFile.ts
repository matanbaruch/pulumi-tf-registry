// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DnsActionCreateZoneFromZoneFile extends pulumi.CustomResource {
    /**
     * Get an existing DnsActionCreateZoneFromZoneFile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DnsActionCreateZoneFromZoneFileState, opts?: pulumi.CustomResourceOptions): DnsActionCreateZoneFromZoneFile {
        return new DnsActionCreateZoneFromZoneFile(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/dnsActionCreateZoneFromZoneFile:DnsActionCreateZoneFromZoneFile';

    /**
     * Returns true if the given object is an instance of DnsActionCreateZoneFromZoneFile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DnsActionCreateZoneFromZoneFile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DnsActionCreateZoneFromZoneFile.__pulumiType;
    }

    public readonly compartmentId!: pulumi.Output<string>;
    public readonly createZoneFromZoneFileDetails!: pulumi.Output<string>;
    public /*out*/ readonly definedTags!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly externalDownstreams!: pulumi.Output<outputs.DnsActionCreateZoneFromZoneFileExternalDownstream[]>;
    public /*out*/ readonly externalMasters!: pulumi.Output<outputs.DnsActionCreateZoneFromZoneFileExternalMaster[]>;
    public /*out*/ readonly freeformTags!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly isProtected!: pulumi.Output<boolean>;
    public /*out*/ readonly name!: pulumi.Output<string>;
    public /*out*/ readonly nameservers!: pulumi.Output<outputs.DnsActionCreateZoneFromZoneFileNameserver[]>;
    public readonly scope!: pulumi.Output<string>;
    public /*out*/ readonly self!: pulumi.Output<string>;
    public /*out*/ readonly serial!: pulumi.Output<string>;
    public /*out*/ readonly state!: pulumi.Output<string>;
    public /*out*/ readonly timeCreated!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.DnsActionCreateZoneFromZoneFileTimeouts | undefined>;
    public /*out*/ readonly version!: pulumi.Output<string>;
    public readonly viewId!: pulumi.Output<string>;
    public /*out*/ readonly zoneTransferServers!: pulumi.Output<outputs.DnsActionCreateZoneFromZoneFileZoneTransferServer[]>;
    public /*out*/ readonly zoneType!: pulumi.Output<string>;

    /**
     * Create a DnsActionCreateZoneFromZoneFile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DnsActionCreateZoneFromZoneFileArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DnsActionCreateZoneFromZoneFileArgs | DnsActionCreateZoneFromZoneFileState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DnsActionCreateZoneFromZoneFileState | undefined;
            resourceInputs["compartmentId"] = state ? state.compartmentId : undefined;
            resourceInputs["createZoneFromZoneFileDetails"] = state ? state.createZoneFromZoneFileDetails : undefined;
            resourceInputs["definedTags"] = state ? state.definedTags : undefined;
            resourceInputs["externalDownstreams"] = state ? state.externalDownstreams : undefined;
            resourceInputs["externalMasters"] = state ? state.externalMasters : undefined;
            resourceInputs["freeformTags"] = state ? state.freeformTags : undefined;
            resourceInputs["isProtected"] = state ? state.isProtected : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nameservers"] = state ? state.nameservers : undefined;
            resourceInputs["scope"] = state ? state.scope : undefined;
            resourceInputs["self"] = state ? state.self : undefined;
            resourceInputs["serial"] = state ? state.serial : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["timeCreated"] = state ? state.timeCreated : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
            resourceInputs["viewId"] = state ? state.viewId : undefined;
            resourceInputs["zoneTransferServers"] = state ? state.zoneTransferServers : undefined;
            resourceInputs["zoneType"] = state ? state.zoneType : undefined;
        } else {
            const args = argsOrState as DnsActionCreateZoneFromZoneFileArgs | undefined;
            if ((!args || args.compartmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'compartmentId'");
            }
            if ((!args || args.createZoneFromZoneFileDetails === undefined) && !opts.urn) {
                throw new Error("Missing required property 'createZoneFromZoneFileDetails'");
            }
            resourceInputs["compartmentId"] = args ? args.compartmentId : undefined;
            resourceInputs["createZoneFromZoneFileDetails"] = args ? args.createZoneFromZoneFileDetails : undefined;
            resourceInputs["scope"] = args ? args.scope : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["viewId"] = args ? args.viewId : undefined;
            resourceInputs["definedTags"] = undefined /*out*/;
            resourceInputs["externalDownstreams"] = undefined /*out*/;
            resourceInputs["externalMasters"] = undefined /*out*/;
            resourceInputs["freeformTags"] = undefined /*out*/;
            resourceInputs["isProtected"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["nameservers"] = undefined /*out*/;
            resourceInputs["self"] = undefined /*out*/;
            resourceInputs["serial"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["timeCreated"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
            resourceInputs["zoneTransferServers"] = undefined /*out*/;
            resourceInputs["zoneType"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DnsActionCreateZoneFromZoneFile.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DnsActionCreateZoneFromZoneFile resources.
 */
export interface DnsActionCreateZoneFromZoneFileState {
    compartmentId?: pulumi.Input<string>;
    createZoneFromZoneFileDetails?: pulumi.Input<string>;
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    externalDownstreams?: pulumi.Input<pulumi.Input<inputs.DnsActionCreateZoneFromZoneFileExternalDownstream>[]>;
    externalMasters?: pulumi.Input<pulumi.Input<inputs.DnsActionCreateZoneFromZoneFileExternalMaster>[]>;
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    isProtected?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    nameservers?: pulumi.Input<pulumi.Input<inputs.DnsActionCreateZoneFromZoneFileNameserver>[]>;
    scope?: pulumi.Input<string>;
    self?: pulumi.Input<string>;
    serial?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    timeCreated?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.DnsActionCreateZoneFromZoneFileTimeouts>;
    version?: pulumi.Input<string>;
    viewId?: pulumi.Input<string>;
    zoneTransferServers?: pulumi.Input<pulumi.Input<inputs.DnsActionCreateZoneFromZoneFileZoneTransferServer>[]>;
    zoneType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DnsActionCreateZoneFromZoneFile resource.
 */
export interface DnsActionCreateZoneFromZoneFileArgs {
    compartmentId: pulumi.Input<string>;
    createZoneFromZoneFileDetails: pulumi.Input<string>;
    scope?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.DnsActionCreateZoneFromZoneFileTimeouts>;
    viewId?: pulumi.Input<string>;
}
