// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class VaultSecret extends pulumi.CustomResource {
    /**
     * Get an existing VaultSecret resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VaultSecretState, opts?: pulumi.CustomResourceOptions): VaultSecret {
        return new VaultSecret(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/vaultSecret:VaultSecret';

    /**
     * Returns true if the given object is an instance of VaultSecret.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VaultSecret {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VaultSecret.__pulumiType;
    }

    public readonly compartmentId!: pulumi.Output<string>;
    public /*out*/ readonly currentVersionNumber!: pulumi.Output<string>;
    public readonly definedTags!: pulumi.Output<{[key: string]: string}>;
    public readonly description!: pulumi.Output<string>;
    public readonly freeformTags!: pulumi.Output<{[key: string]: string}>;
    public readonly keyId!: pulumi.Output<string>;
    public /*out*/ readonly lastRotationTime!: pulumi.Output<string>;
    public /*out*/ readonly lifecycleDetails!: pulumi.Output<string>;
    public readonly metadata!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly nextRotationTime!: pulumi.Output<string>;
    public readonly rotationConfig!: pulumi.Output<outputs.VaultSecretRotationConfig | undefined>;
    public /*out*/ readonly rotationStatus!: pulumi.Output<string>;
    public readonly secretContent!: pulumi.Output<outputs.VaultSecretSecretContent | undefined>;
    public readonly secretName!: pulumi.Output<string>;
    public readonly secretRules!: pulumi.Output<outputs.VaultSecretSecretRule[] | undefined>;
    public /*out*/ readonly state!: pulumi.Output<string>;
    public /*out*/ readonly timeCreated!: pulumi.Output<string>;
    public /*out*/ readonly timeOfCurrentVersionExpiry!: pulumi.Output<string>;
    public /*out*/ readonly timeOfDeletion!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.VaultSecretTimeouts | undefined>;
    public readonly vaultId!: pulumi.Output<string>;

    /**
     * Create a VaultSecret resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VaultSecretArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VaultSecretArgs | VaultSecretState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VaultSecretState | undefined;
            resourceInputs["compartmentId"] = state ? state.compartmentId : undefined;
            resourceInputs["currentVersionNumber"] = state ? state.currentVersionNumber : undefined;
            resourceInputs["definedTags"] = state ? state.definedTags : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["freeformTags"] = state ? state.freeformTags : undefined;
            resourceInputs["keyId"] = state ? state.keyId : undefined;
            resourceInputs["lastRotationTime"] = state ? state.lastRotationTime : undefined;
            resourceInputs["lifecycleDetails"] = state ? state.lifecycleDetails : undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
            resourceInputs["nextRotationTime"] = state ? state.nextRotationTime : undefined;
            resourceInputs["rotationConfig"] = state ? state.rotationConfig : undefined;
            resourceInputs["rotationStatus"] = state ? state.rotationStatus : undefined;
            resourceInputs["secretContent"] = state ? state.secretContent : undefined;
            resourceInputs["secretName"] = state ? state.secretName : undefined;
            resourceInputs["secretRules"] = state ? state.secretRules : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["timeCreated"] = state ? state.timeCreated : undefined;
            resourceInputs["timeOfCurrentVersionExpiry"] = state ? state.timeOfCurrentVersionExpiry : undefined;
            resourceInputs["timeOfDeletion"] = state ? state.timeOfDeletion : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["vaultId"] = state ? state.vaultId : undefined;
        } else {
            const args = argsOrState as VaultSecretArgs | undefined;
            if ((!args || args.compartmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'compartmentId'");
            }
            if ((!args || args.keyId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'keyId'");
            }
            if ((!args || args.secretName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'secretName'");
            }
            if ((!args || args.vaultId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vaultId'");
            }
            resourceInputs["compartmentId"] = args ? args.compartmentId : undefined;
            resourceInputs["definedTags"] = args ? args.definedTags : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["freeformTags"] = args ? args.freeformTags : undefined;
            resourceInputs["keyId"] = args ? args.keyId : undefined;
            resourceInputs["metadata"] = args ? args.metadata : undefined;
            resourceInputs["rotationConfig"] = args ? args.rotationConfig : undefined;
            resourceInputs["secretContent"] = args ? args.secretContent : undefined;
            resourceInputs["secretName"] = args ? args.secretName : undefined;
            resourceInputs["secretRules"] = args ? args.secretRules : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["vaultId"] = args ? args.vaultId : undefined;
            resourceInputs["currentVersionNumber"] = undefined /*out*/;
            resourceInputs["lastRotationTime"] = undefined /*out*/;
            resourceInputs["lifecycleDetails"] = undefined /*out*/;
            resourceInputs["nextRotationTime"] = undefined /*out*/;
            resourceInputs["rotationStatus"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["timeCreated"] = undefined /*out*/;
            resourceInputs["timeOfCurrentVersionExpiry"] = undefined /*out*/;
            resourceInputs["timeOfDeletion"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VaultSecret.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VaultSecret resources.
 */
export interface VaultSecretState {
    compartmentId?: pulumi.Input<string>;
    currentVersionNumber?: pulumi.Input<string>;
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    description?: pulumi.Input<string>;
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    keyId?: pulumi.Input<string>;
    lastRotationTime?: pulumi.Input<string>;
    lifecycleDetails?: pulumi.Input<string>;
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    nextRotationTime?: pulumi.Input<string>;
    rotationConfig?: pulumi.Input<inputs.VaultSecretRotationConfig>;
    rotationStatus?: pulumi.Input<string>;
    secretContent?: pulumi.Input<inputs.VaultSecretSecretContent>;
    secretName?: pulumi.Input<string>;
    secretRules?: pulumi.Input<pulumi.Input<inputs.VaultSecretSecretRule>[]>;
    state?: pulumi.Input<string>;
    timeCreated?: pulumi.Input<string>;
    timeOfCurrentVersionExpiry?: pulumi.Input<string>;
    timeOfDeletion?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.VaultSecretTimeouts>;
    vaultId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VaultSecret resource.
 */
export interface VaultSecretArgs {
    compartmentId: pulumi.Input<string>;
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    description?: pulumi.Input<string>;
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    keyId: pulumi.Input<string>;
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    rotationConfig?: pulumi.Input<inputs.VaultSecretRotationConfig>;
    secretContent?: pulumi.Input<inputs.VaultSecretSecretContent>;
    secretName: pulumi.Input<string>;
    secretRules?: pulumi.Input<pulumi.Input<inputs.VaultSecretSecretRule>[]>;
    timeouts?: pulumi.Input<inputs.VaultSecretTimeouts>;
    vaultId: pulumi.Input<string>;
}
