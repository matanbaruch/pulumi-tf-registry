// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Append extends pulumi.CustomResource {
    /**
     * Get an existing Append resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AppendState, opts?: pulumi.CustomResourceOptions): Append {
        return new Append(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/append:Append';

    /**
     * Returns true if the given object is an instance of Append.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Append {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Append.__pulumiType;
    }

    /**
     * Base image to append layers to.
     */
    public readonly baseImage!: pulumi.Output<string>;
    /**
     * The resulting fully-qualified digest (e.g. {repo}@sha256:deadbeef).
     */
    public /*out*/ readonly imageRef!: pulumi.Output<string>;
    /**
     * Layers to append to the base image.
     */
    public readonly layers!: pulumi.Output<outputs.AppendLayer[]>;

    /**
     * Create a Append resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AppendArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AppendArgs | AppendState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AppendState | undefined;
            resourceInputs["baseImage"] = state ? state.baseImage : undefined;
            resourceInputs["imageRef"] = state ? state.imageRef : undefined;
            resourceInputs["layers"] = state ? state.layers : undefined;
        } else {
            const args = argsOrState as AppendArgs | undefined;
            if ((!args || args.layers === undefined) && !opts.urn) {
                throw new Error("Missing required property 'layers'");
            }
            resourceInputs["baseImage"] = args ? args.baseImage : undefined;
            resourceInputs["layers"] = args ? args.layers : undefined;
            resourceInputs["imageRef"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Append.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Append resources.
 */
export interface AppendState {
    /**
     * Base image to append layers to.
     */
    baseImage?: pulumi.Input<string>;
    /**
     * The resulting fully-qualified digest (e.g. {repo}@sha256:deadbeef).
     */
    imageRef?: pulumi.Input<string>;
    /**
     * Layers to append to the base image.
     */
    layers?: pulumi.Input<pulumi.Input<inputs.AppendLayer>[]>;
}

/**
 * The set of arguments for constructing a Append resource.
 */
export interface AppendArgs {
    /**
     * Base image to append layers to.
     */
    baseImage?: pulumi.Input<string>;
    /**
     * Layers to append to the base image.
     */
    layers: pulumi.Input<pulumi.Input<inputs.AppendLayer>[]>;
}
