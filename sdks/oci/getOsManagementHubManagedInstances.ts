// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getOsManagementHubManagedInstances(args?: GetOsManagementHubManagedInstancesArgs, opts?: pulumi.InvokeOptions): Promise<GetOsManagementHubManagedInstancesResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getOsManagementHubManagedInstances:getOsManagementHubManagedInstances", {
        "advisoryNames": args.advisoryNames,
        "archTypes": args.archTypes,
        "compartmentId": args.compartmentId,
        "displayNameContains": args.displayNameContains,
        "displayNames": args.displayNames,
        "filters": args.filters,
        "group": args.group,
        "groupNotEqualTo": args.groupNotEqualTo,
        "id": args.id,
        "isAttachedToGroupOrLifecycleStage": args.isAttachedToGroupOrLifecycleStage,
        "isManagedByAutonomousLinux": args.isManagedByAutonomousLinux,
        "isManagementStation": args.isManagementStation,
        "isProfileAttached": args.isProfileAttached,
        "lifecycleEnvironment": args.lifecycleEnvironment,
        "lifecycleEnvironmentNotEqualTo": args.lifecycleEnvironmentNotEqualTo,
        "lifecycleStage": args.lifecycleStage,
        "lifecycleStageNotEqualTo": args.lifecycleStageNotEqualTo,
        "locationNotEqualTos": args.locationNotEqualTos,
        "locations": args.locations,
        "managedInstanceId": args.managedInstanceId,
        "osFamilies": args.osFamilies,
        "profileNotEqualTos": args.profileNotEqualTos,
        "profiles": args.profiles,
        "softwareSourceId": args.softwareSourceId,
        "statuses": args.statuses,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getOsManagementHubManagedInstances.
 */
export interface GetOsManagementHubManagedInstancesArgs {
    advisoryNames?: string[];
    archTypes?: string[];
    compartmentId?: string;
    displayNameContains?: string;
    displayNames?: string[];
    filters?: inputs.GetOsManagementHubManagedInstancesFilter[];
    group?: string;
    groupNotEqualTo?: string;
    id?: string;
    isAttachedToGroupOrLifecycleStage?: boolean;
    isManagedByAutonomousLinux?: boolean;
    isManagementStation?: boolean;
    isProfileAttached?: boolean;
    lifecycleEnvironment?: string;
    lifecycleEnvironmentNotEqualTo?: string;
    lifecycleStage?: string;
    lifecycleStageNotEqualTo?: string;
    locationNotEqualTos?: string[];
    locations?: string[];
    managedInstanceId?: string;
    osFamilies?: string[];
    profileNotEqualTos?: string[];
    profiles?: string[];
    softwareSourceId?: string;
    statuses?: string[];
}

/**
 * A collection of values returned by getOsManagementHubManagedInstances.
 */
export interface GetOsManagementHubManagedInstancesResult {
    readonly advisoryNames?: string[];
    readonly archTypes?: string[];
    readonly compartmentId?: string;
    readonly displayNameContains?: string;
    readonly displayNames?: string[];
    readonly filters?: outputs.GetOsManagementHubManagedInstancesFilter[];
    readonly group?: string;
    readonly groupNotEqualTo?: string;
    readonly id: string;
    readonly isAttachedToGroupOrLifecycleStage?: boolean;
    readonly isManagedByAutonomousLinux?: boolean;
    readonly isManagementStation?: boolean;
    readonly isProfileAttached?: boolean;
    readonly lifecycleEnvironment?: string;
    readonly lifecycleEnvironmentNotEqualTo?: string;
    readonly lifecycleStage?: string;
    readonly lifecycleStageNotEqualTo?: string;
    readonly locationNotEqualTos?: string[];
    readonly locations?: string[];
    readonly managedInstanceCollections: outputs.GetOsManagementHubManagedInstancesManagedInstanceCollection[];
    readonly managedInstanceId?: string;
    readonly osFamilies?: string[];
    readonly profileNotEqualTos?: string[];
    readonly profiles?: string[];
    readonly softwareSourceId?: string;
    readonly statuses?: string[];
}
export function getOsManagementHubManagedInstancesOutput(args?: GetOsManagementHubManagedInstancesOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetOsManagementHubManagedInstancesResult> {
    return pulumi.output(args).apply((a: any) => getOsManagementHubManagedInstances(a, opts))
}

/**
 * A collection of arguments for invoking getOsManagementHubManagedInstances.
 */
export interface GetOsManagementHubManagedInstancesOutputArgs {
    advisoryNames?: pulumi.Input<pulumi.Input<string>[]>;
    archTypes?: pulumi.Input<pulumi.Input<string>[]>;
    compartmentId?: pulumi.Input<string>;
    displayNameContains?: pulumi.Input<string>;
    displayNames?: pulumi.Input<pulumi.Input<string>[]>;
    filters?: pulumi.Input<pulumi.Input<inputs.GetOsManagementHubManagedInstancesFilterArgs>[]>;
    group?: pulumi.Input<string>;
    groupNotEqualTo?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    isAttachedToGroupOrLifecycleStage?: pulumi.Input<boolean>;
    isManagedByAutonomousLinux?: pulumi.Input<boolean>;
    isManagementStation?: pulumi.Input<boolean>;
    isProfileAttached?: pulumi.Input<boolean>;
    lifecycleEnvironment?: pulumi.Input<string>;
    lifecycleEnvironmentNotEqualTo?: pulumi.Input<string>;
    lifecycleStage?: pulumi.Input<string>;
    lifecycleStageNotEqualTo?: pulumi.Input<string>;
    locationNotEqualTos?: pulumi.Input<pulumi.Input<string>[]>;
    locations?: pulumi.Input<pulumi.Input<string>[]>;
    managedInstanceId?: pulumi.Input<string>;
    osFamilies?: pulumi.Input<pulumi.Input<string>[]>;
    profileNotEqualTos?: pulumi.Input<pulumi.Input<string>[]>;
    profiles?: pulumi.Input<pulumi.Input<string>[]>;
    softwareSourceId?: pulumi.Input<string>;
    statuses?: pulumi.Input<pulumi.Input<string>[]>;
}
