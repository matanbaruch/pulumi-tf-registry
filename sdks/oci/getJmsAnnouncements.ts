// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getJmsAnnouncements(args?: GetJmsAnnouncementsArgs, opts?: pulumi.InvokeOptions): Promise<GetJmsAnnouncementsResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getJmsAnnouncements:getJmsAnnouncements", {
        "filters": args.filters,
        "id": args.id,
        "summaryContains": args.summaryContains,
        "timeEnd": args.timeEnd,
        "timeStart": args.timeStart,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getJmsAnnouncements.
 */
export interface GetJmsAnnouncementsArgs {
    filters?: inputs.GetJmsAnnouncementsFilter[];
    id?: string;
    summaryContains?: string;
    timeEnd?: string;
    timeStart?: string;
}

/**
 * A collection of values returned by getJmsAnnouncements.
 */
export interface GetJmsAnnouncementsResult {
    readonly announcementCollections: outputs.GetJmsAnnouncementsAnnouncementCollection[];
    readonly filters?: outputs.GetJmsAnnouncementsFilter[];
    readonly id: string;
    readonly summaryContains?: string;
    readonly timeEnd?: string;
    readonly timeStart?: string;
}
export function getJmsAnnouncementsOutput(args?: GetJmsAnnouncementsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetJmsAnnouncementsResult> {
    return pulumi.output(args).apply((a: any) => getJmsAnnouncements(a, opts))
}

/**
 * A collection of arguments for invoking getJmsAnnouncements.
 */
export interface GetJmsAnnouncementsOutputArgs {
    filters?: pulumi.Input<pulumi.Input<inputs.GetJmsAnnouncementsFilterArgs>[]>;
    id?: pulumi.Input<string>;
    summaryContains?: pulumi.Input<string>;
    timeEnd?: pulumi.Input<string>;
    timeStart?: pulumi.Input<string>;
}
