// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class BdsAutoScalingConfiguration extends pulumi.CustomResource {
    /**
     * Get an existing BdsAutoScalingConfiguration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BdsAutoScalingConfigurationState, opts?: pulumi.CustomResourceOptions): BdsAutoScalingConfiguration {
        return new BdsAutoScalingConfiguration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/bdsAutoScalingConfiguration:BdsAutoScalingConfiguration';

    /**
     * Returns true if the given object is an instance of BdsAutoScalingConfiguration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BdsAutoScalingConfiguration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BdsAutoScalingConfiguration.__pulumiType;
    }

    public readonly bdsInstanceId!: pulumi.Output<string>;
    public readonly clusterAdminPassword!: pulumi.Output<string>;
    public readonly displayName!: pulumi.Output<string>;
    public readonly isEnabled!: pulumi.Output<boolean>;
    public readonly nodeType!: pulumi.Output<string>;
    public readonly policy!: pulumi.Output<outputs.BdsAutoScalingConfigurationPolicy | undefined>;
    public readonly policyDetails!: pulumi.Output<outputs.BdsAutoScalingConfigurationPolicyDetails | undefined>;
    public /*out*/ readonly state!: pulumi.Output<string>;
    public /*out*/ readonly timeCreated!: pulumi.Output<string>;
    public /*out*/ readonly timeUpdated!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.BdsAutoScalingConfigurationTimeouts | undefined>;

    /**
     * Create a BdsAutoScalingConfiguration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BdsAutoScalingConfigurationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BdsAutoScalingConfigurationArgs | BdsAutoScalingConfigurationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BdsAutoScalingConfigurationState | undefined;
            resourceInputs["bdsInstanceId"] = state ? state.bdsInstanceId : undefined;
            resourceInputs["clusterAdminPassword"] = state ? state.clusterAdminPassword : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["isEnabled"] = state ? state.isEnabled : undefined;
            resourceInputs["nodeType"] = state ? state.nodeType : undefined;
            resourceInputs["policy"] = state ? state.policy : undefined;
            resourceInputs["policyDetails"] = state ? state.policyDetails : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["timeCreated"] = state ? state.timeCreated : undefined;
            resourceInputs["timeUpdated"] = state ? state.timeUpdated : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as BdsAutoScalingConfigurationArgs | undefined;
            if ((!args || args.bdsInstanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bdsInstanceId'");
            }
            if ((!args || args.clusterAdminPassword === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterAdminPassword'");
            }
            if ((!args || args.isEnabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'isEnabled'");
            }
            if ((!args || args.nodeType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nodeType'");
            }
            resourceInputs["bdsInstanceId"] = args ? args.bdsInstanceId : undefined;
            resourceInputs["clusterAdminPassword"] = args?.clusterAdminPassword ? pulumi.secret(args.clusterAdminPassword) : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["isEnabled"] = args ? args.isEnabled : undefined;
            resourceInputs["nodeType"] = args ? args.nodeType : undefined;
            resourceInputs["policy"] = args ? args.policy : undefined;
            resourceInputs["policyDetails"] = args ? args.policyDetails : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["timeCreated"] = undefined /*out*/;
            resourceInputs["timeUpdated"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["clusterAdminPassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(BdsAutoScalingConfiguration.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering BdsAutoScalingConfiguration resources.
 */
export interface BdsAutoScalingConfigurationState {
    bdsInstanceId?: pulumi.Input<string>;
    clusterAdminPassword?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    isEnabled?: pulumi.Input<boolean>;
    nodeType?: pulumi.Input<string>;
    policy?: pulumi.Input<inputs.BdsAutoScalingConfigurationPolicy>;
    policyDetails?: pulumi.Input<inputs.BdsAutoScalingConfigurationPolicyDetails>;
    state?: pulumi.Input<string>;
    timeCreated?: pulumi.Input<string>;
    timeUpdated?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.BdsAutoScalingConfigurationTimeouts>;
}

/**
 * The set of arguments for constructing a BdsAutoScalingConfiguration resource.
 */
export interface BdsAutoScalingConfigurationArgs {
    bdsInstanceId: pulumi.Input<string>;
    clusterAdminPassword: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    isEnabled: pulumi.Input<boolean>;
    nodeType: pulumi.Input<string>;
    policy?: pulumi.Input<inputs.BdsAutoScalingConfigurationPolicy>;
    policyDetails?: pulumi.Input<inputs.BdsAutoScalingConfigurationPolicyDetails>;
    timeouts?: pulumi.Input<inputs.BdsAutoScalingConfigurationTimeouts>;
}
