// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DatabaseDataGuardAssociation extends pulumi.CustomResource {
    /**
     * Get an existing DatabaseDataGuardAssociation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DatabaseDataGuardAssociationState, opts?: pulumi.CustomResourceOptions): DatabaseDataGuardAssociation {
        return new DatabaseDataGuardAssociation(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/databaseDataGuardAssociation:DatabaseDataGuardAssociation';

    /**
     * Returns true if the given object is an instance of DatabaseDataGuardAssociation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DatabaseDataGuardAssociation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DatabaseDataGuardAssociation.__pulumiType;
    }

    public /*out*/ readonly applyLag!: pulumi.Output<string>;
    public /*out*/ readonly applyRate!: pulumi.Output<string>;
    public readonly availabilityDomain!: pulumi.Output<string>;
    public readonly backupNetworkNsgIds!: pulumi.Output<string[] | undefined>;
    public readonly cpuCoreCount!: pulumi.Output<number>;
    public readonly createAsync!: pulumi.Output<boolean | undefined>;
    public readonly creationType!: pulumi.Output<string>;
    public readonly dataCollectionOptions!: pulumi.Output<outputs.DatabaseDataGuardAssociationDataCollectionOptions | undefined>;
    public readonly databaseAdminPassword!: pulumi.Output<string>;
    public readonly databaseDefinedTags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly databaseFreeformTags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly databaseId!: pulumi.Output<string>;
    public readonly databaseSoftwareImageId!: pulumi.Output<string | undefined>;
    public readonly dbSystemDefinedTags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly dbSystemFreeformTags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly deleteStandbyDbHomeOnDelete!: pulumi.Output<string>;
    public readonly displayName!: pulumi.Output<string>;
    public readonly domain!: pulumi.Output<string>;
    public readonly faultDomains!: pulumi.Output<string[] | undefined>;
    public readonly hostname!: pulumi.Output<string>;
    public readonly isActiveDataGuardEnabled!: pulumi.Output<boolean | undefined>;
    public readonly licenseModel!: pulumi.Output<string | undefined>;
    public /*out*/ readonly lifecycleDetails!: pulumi.Output<string>;
    public readonly nodeCount!: pulumi.Output<number | undefined>;
    public readonly nsgIds!: pulumi.Output<string[] | undefined>;
    public /*out*/ readonly peerDataGuardAssociationId!: pulumi.Output<string>;
    public /*out*/ readonly peerDatabaseId!: pulumi.Output<string>;
    public readonly peerDbHomeId!: pulumi.Output<string>;
    public readonly peerDbSystemId!: pulumi.Output<string>;
    public readonly peerDbUniqueName!: pulumi.Output<string | undefined>;
    public /*out*/ readonly peerRole!: pulumi.Output<string>;
    public readonly peerSidPrefix!: pulumi.Output<string | undefined>;
    public readonly peerVmClusterId!: pulumi.Output<string>;
    public readonly privateIp!: pulumi.Output<string | undefined>;
    public readonly protectionMode!: pulumi.Output<string>;
    public /*out*/ readonly role!: pulumi.Output<string>;
    public readonly shape!: pulumi.Output<string>;
    public /*out*/ readonly state!: pulumi.Output<string>;
    public readonly storageVolumePerformanceMode!: pulumi.Output<string>;
    public readonly subnetId!: pulumi.Output<string>;
    public /*out*/ readonly timeCreated!: pulumi.Output<string>;
    public readonly timeZone!: pulumi.Output<string | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.DatabaseDataGuardAssociationTimeouts | undefined>;
    public readonly transportType!: pulumi.Output<string>;

    /**
     * Create a DatabaseDataGuardAssociation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatabaseDataGuardAssociationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DatabaseDataGuardAssociationArgs | DatabaseDataGuardAssociationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DatabaseDataGuardAssociationState | undefined;
            resourceInputs["applyLag"] = state ? state.applyLag : undefined;
            resourceInputs["applyRate"] = state ? state.applyRate : undefined;
            resourceInputs["availabilityDomain"] = state ? state.availabilityDomain : undefined;
            resourceInputs["backupNetworkNsgIds"] = state ? state.backupNetworkNsgIds : undefined;
            resourceInputs["cpuCoreCount"] = state ? state.cpuCoreCount : undefined;
            resourceInputs["createAsync"] = state ? state.createAsync : undefined;
            resourceInputs["creationType"] = state ? state.creationType : undefined;
            resourceInputs["dataCollectionOptions"] = state ? state.dataCollectionOptions : undefined;
            resourceInputs["databaseAdminPassword"] = state ? state.databaseAdminPassword : undefined;
            resourceInputs["databaseDefinedTags"] = state ? state.databaseDefinedTags : undefined;
            resourceInputs["databaseFreeformTags"] = state ? state.databaseFreeformTags : undefined;
            resourceInputs["databaseId"] = state ? state.databaseId : undefined;
            resourceInputs["databaseSoftwareImageId"] = state ? state.databaseSoftwareImageId : undefined;
            resourceInputs["dbSystemDefinedTags"] = state ? state.dbSystemDefinedTags : undefined;
            resourceInputs["dbSystemFreeformTags"] = state ? state.dbSystemFreeformTags : undefined;
            resourceInputs["deleteStandbyDbHomeOnDelete"] = state ? state.deleteStandbyDbHomeOnDelete : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["domain"] = state ? state.domain : undefined;
            resourceInputs["faultDomains"] = state ? state.faultDomains : undefined;
            resourceInputs["hostname"] = state ? state.hostname : undefined;
            resourceInputs["isActiveDataGuardEnabled"] = state ? state.isActiveDataGuardEnabled : undefined;
            resourceInputs["licenseModel"] = state ? state.licenseModel : undefined;
            resourceInputs["lifecycleDetails"] = state ? state.lifecycleDetails : undefined;
            resourceInputs["nodeCount"] = state ? state.nodeCount : undefined;
            resourceInputs["nsgIds"] = state ? state.nsgIds : undefined;
            resourceInputs["peerDataGuardAssociationId"] = state ? state.peerDataGuardAssociationId : undefined;
            resourceInputs["peerDatabaseId"] = state ? state.peerDatabaseId : undefined;
            resourceInputs["peerDbHomeId"] = state ? state.peerDbHomeId : undefined;
            resourceInputs["peerDbSystemId"] = state ? state.peerDbSystemId : undefined;
            resourceInputs["peerDbUniqueName"] = state ? state.peerDbUniqueName : undefined;
            resourceInputs["peerRole"] = state ? state.peerRole : undefined;
            resourceInputs["peerSidPrefix"] = state ? state.peerSidPrefix : undefined;
            resourceInputs["peerVmClusterId"] = state ? state.peerVmClusterId : undefined;
            resourceInputs["privateIp"] = state ? state.privateIp : undefined;
            resourceInputs["protectionMode"] = state ? state.protectionMode : undefined;
            resourceInputs["role"] = state ? state.role : undefined;
            resourceInputs["shape"] = state ? state.shape : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["storageVolumePerformanceMode"] = state ? state.storageVolumePerformanceMode : undefined;
            resourceInputs["subnetId"] = state ? state.subnetId : undefined;
            resourceInputs["timeCreated"] = state ? state.timeCreated : undefined;
            resourceInputs["timeZone"] = state ? state.timeZone : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["transportType"] = state ? state.transportType : undefined;
        } else {
            const args = argsOrState as DatabaseDataGuardAssociationArgs | undefined;
            if ((!args || args.creationType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'creationType'");
            }
            if ((!args || args.databaseAdminPassword === undefined) && !opts.urn) {
                throw new Error("Missing required property 'databaseAdminPassword'");
            }
            if ((!args || args.databaseId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'databaseId'");
            }
            if ((!args || args.deleteStandbyDbHomeOnDelete === undefined) && !opts.urn) {
                throw new Error("Missing required property 'deleteStandbyDbHomeOnDelete'");
            }
            if ((!args || args.protectionMode === undefined) && !opts.urn) {
                throw new Error("Missing required property 'protectionMode'");
            }
            if ((!args || args.transportType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'transportType'");
            }
            resourceInputs["availabilityDomain"] = args ? args.availabilityDomain : undefined;
            resourceInputs["backupNetworkNsgIds"] = args ? args.backupNetworkNsgIds : undefined;
            resourceInputs["cpuCoreCount"] = args ? args.cpuCoreCount : undefined;
            resourceInputs["createAsync"] = args ? args.createAsync : undefined;
            resourceInputs["creationType"] = args ? args.creationType : undefined;
            resourceInputs["dataCollectionOptions"] = args ? args.dataCollectionOptions : undefined;
            resourceInputs["databaseAdminPassword"] = args?.databaseAdminPassword ? pulumi.secret(args.databaseAdminPassword) : undefined;
            resourceInputs["databaseDefinedTags"] = args ? args.databaseDefinedTags : undefined;
            resourceInputs["databaseFreeformTags"] = args ? args.databaseFreeformTags : undefined;
            resourceInputs["databaseId"] = args ? args.databaseId : undefined;
            resourceInputs["databaseSoftwareImageId"] = args ? args.databaseSoftwareImageId : undefined;
            resourceInputs["dbSystemDefinedTags"] = args ? args.dbSystemDefinedTags : undefined;
            resourceInputs["dbSystemFreeformTags"] = args ? args.dbSystemFreeformTags : undefined;
            resourceInputs["deleteStandbyDbHomeOnDelete"] = args ? args.deleteStandbyDbHomeOnDelete : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["domain"] = args ? args.domain : undefined;
            resourceInputs["faultDomains"] = args ? args.faultDomains : undefined;
            resourceInputs["hostname"] = args ? args.hostname : undefined;
            resourceInputs["isActiveDataGuardEnabled"] = args ? args.isActiveDataGuardEnabled : undefined;
            resourceInputs["licenseModel"] = args ? args.licenseModel : undefined;
            resourceInputs["nodeCount"] = args ? args.nodeCount : undefined;
            resourceInputs["nsgIds"] = args ? args.nsgIds : undefined;
            resourceInputs["peerDbHomeId"] = args ? args.peerDbHomeId : undefined;
            resourceInputs["peerDbSystemId"] = args ? args.peerDbSystemId : undefined;
            resourceInputs["peerDbUniqueName"] = args ? args.peerDbUniqueName : undefined;
            resourceInputs["peerSidPrefix"] = args ? args.peerSidPrefix : undefined;
            resourceInputs["peerVmClusterId"] = args ? args.peerVmClusterId : undefined;
            resourceInputs["privateIp"] = args ? args.privateIp : undefined;
            resourceInputs["protectionMode"] = args ? args.protectionMode : undefined;
            resourceInputs["shape"] = args ? args.shape : undefined;
            resourceInputs["storageVolumePerformanceMode"] = args ? args.storageVolumePerformanceMode : undefined;
            resourceInputs["subnetId"] = args ? args.subnetId : undefined;
            resourceInputs["timeZone"] = args ? args.timeZone : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["transportType"] = args ? args.transportType : undefined;
            resourceInputs["applyLag"] = undefined /*out*/;
            resourceInputs["applyRate"] = undefined /*out*/;
            resourceInputs["lifecycleDetails"] = undefined /*out*/;
            resourceInputs["peerDataGuardAssociationId"] = undefined /*out*/;
            resourceInputs["peerDatabaseId"] = undefined /*out*/;
            resourceInputs["peerRole"] = undefined /*out*/;
            resourceInputs["role"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["timeCreated"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["databaseAdminPassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(DatabaseDataGuardAssociation.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DatabaseDataGuardAssociation resources.
 */
export interface DatabaseDataGuardAssociationState {
    applyLag?: pulumi.Input<string>;
    applyRate?: pulumi.Input<string>;
    availabilityDomain?: pulumi.Input<string>;
    backupNetworkNsgIds?: pulumi.Input<pulumi.Input<string>[]>;
    cpuCoreCount?: pulumi.Input<number>;
    createAsync?: pulumi.Input<boolean>;
    creationType?: pulumi.Input<string>;
    dataCollectionOptions?: pulumi.Input<inputs.DatabaseDataGuardAssociationDataCollectionOptions>;
    databaseAdminPassword?: pulumi.Input<string>;
    databaseDefinedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    databaseFreeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    databaseId?: pulumi.Input<string>;
    databaseSoftwareImageId?: pulumi.Input<string>;
    dbSystemDefinedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    dbSystemFreeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    deleteStandbyDbHomeOnDelete?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    domain?: pulumi.Input<string>;
    faultDomains?: pulumi.Input<pulumi.Input<string>[]>;
    hostname?: pulumi.Input<string>;
    isActiveDataGuardEnabled?: pulumi.Input<boolean>;
    licenseModel?: pulumi.Input<string>;
    lifecycleDetails?: pulumi.Input<string>;
    nodeCount?: pulumi.Input<number>;
    nsgIds?: pulumi.Input<pulumi.Input<string>[]>;
    peerDataGuardAssociationId?: pulumi.Input<string>;
    peerDatabaseId?: pulumi.Input<string>;
    peerDbHomeId?: pulumi.Input<string>;
    peerDbSystemId?: pulumi.Input<string>;
    peerDbUniqueName?: pulumi.Input<string>;
    peerRole?: pulumi.Input<string>;
    peerSidPrefix?: pulumi.Input<string>;
    peerVmClusterId?: pulumi.Input<string>;
    privateIp?: pulumi.Input<string>;
    protectionMode?: pulumi.Input<string>;
    role?: pulumi.Input<string>;
    shape?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    storageVolumePerformanceMode?: pulumi.Input<string>;
    subnetId?: pulumi.Input<string>;
    timeCreated?: pulumi.Input<string>;
    timeZone?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.DatabaseDataGuardAssociationTimeouts>;
    transportType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DatabaseDataGuardAssociation resource.
 */
export interface DatabaseDataGuardAssociationArgs {
    availabilityDomain?: pulumi.Input<string>;
    backupNetworkNsgIds?: pulumi.Input<pulumi.Input<string>[]>;
    cpuCoreCount?: pulumi.Input<number>;
    createAsync?: pulumi.Input<boolean>;
    creationType: pulumi.Input<string>;
    dataCollectionOptions?: pulumi.Input<inputs.DatabaseDataGuardAssociationDataCollectionOptions>;
    databaseAdminPassword: pulumi.Input<string>;
    databaseDefinedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    databaseFreeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    databaseId: pulumi.Input<string>;
    databaseSoftwareImageId?: pulumi.Input<string>;
    dbSystemDefinedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    dbSystemFreeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    deleteStandbyDbHomeOnDelete: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    domain?: pulumi.Input<string>;
    faultDomains?: pulumi.Input<pulumi.Input<string>[]>;
    hostname?: pulumi.Input<string>;
    isActiveDataGuardEnabled?: pulumi.Input<boolean>;
    licenseModel?: pulumi.Input<string>;
    nodeCount?: pulumi.Input<number>;
    nsgIds?: pulumi.Input<pulumi.Input<string>[]>;
    peerDbHomeId?: pulumi.Input<string>;
    peerDbSystemId?: pulumi.Input<string>;
    peerDbUniqueName?: pulumi.Input<string>;
    peerSidPrefix?: pulumi.Input<string>;
    peerVmClusterId?: pulumi.Input<string>;
    privateIp?: pulumi.Input<string>;
    protectionMode: pulumi.Input<string>;
    shape?: pulumi.Input<string>;
    storageVolumePerformanceMode?: pulumi.Input<string>;
    subnetId?: pulumi.Input<string>;
    timeZone?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.DatabaseDataGuardAssociationTimeouts>;
    transportType: pulumi.Input<string>;
}
