// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getStackMonitoringMonitoredResourceType(args: GetStackMonitoringMonitoredResourceTypeArgs, opts?: pulumi.InvokeOptions): Promise<GetStackMonitoringMonitoredResourceTypeResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getStackMonitoringMonitoredResourceType:getStackMonitoringMonitoredResourceType", {
        "monitoredResourceTypeId": args.monitoredResourceTypeId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getStackMonitoringMonitoredResourceType.
 */
export interface GetStackMonitoringMonitoredResourceTypeArgs {
    monitoredResourceTypeId: string;
}

/**
 * A collection of values returned by getStackMonitoringMonitoredResourceType.
 */
export interface GetStackMonitoringMonitoredResourceTypeResult {
    readonly compartmentId: string;
    readonly definedTags: {[key: string]: string};
    readonly description: string;
    readonly displayName: string;
    readonly freeformTags: {[key: string]: string};
    readonly id: string;
    readonly metadatas: outputs.GetStackMonitoringMonitoredResourceTypeMetadata[];
    readonly metricNamespace: string;
    readonly monitoredResourceTypeId: string;
    readonly name: string;
    readonly resourceCategory: string;
    readonly sourceType: string;
    readonly state: string;
    readonly systemTags: {[key: string]: string};
    readonly timeCreated: string;
    readonly timeUpdated: string;
}
export function getStackMonitoringMonitoredResourceTypeOutput(args: GetStackMonitoringMonitoredResourceTypeOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetStackMonitoringMonitoredResourceTypeResult> {
    return pulumi.output(args).apply((a: any) => getStackMonitoringMonitoredResourceType(a, opts))
}

/**
 * A collection of arguments for invoking getStackMonitoringMonitoredResourceType.
 */
export interface GetStackMonitoringMonitoredResourceTypeOutputArgs {
    monitoredResourceTypeId: pulumi.Input<string>;
}
