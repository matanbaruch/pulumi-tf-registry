// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getDatabaseManagementExternalExadataStorageConnector(args: GetDatabaseManagementExternalExadataStorageConnectorArgs, opts?: pulumi.InvokeOptions): Promise<GetDatabaseManagementExternalExadataStorageConnectorResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getDatabaseManagementExternalExadataStorageConnector:getDatabaseManagementExternalExadataStorageConnector", {
        "externalExadataStorageConnectorId": args.externalExadataStorageConnectorId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getDatabaseManagementExternalExadataStorageConnector.
 */
export interface GetDatabaseManagementExternalExadataStorageConnectorArgs {
    externalExadataStorageConnectorId: string;
}

/**
 * A collection of values returned by getDatabaseManagementExternalExadataStorageConnector.
 */
export interface GetDatabaseManagementExternalExadataStorageConnectorResult {
    readonly additionalDetails: {[key: string]: string};
    readonly agentId: string;
    readonly connectionUri: string;
    readonly connectorName: string;
    readonly credentialInfos: outputs.GetDatabaseManagementExternalExadataStorageConnectorCredentialInfo[];
    readonly definedTags: {[key: string]: string};
    readonly displayName: string;
    readonly exadataInfrastructureId: string;
    readonly externalExadataStorageConnectorId: string;
    readonly freeformTags: {[key: string]: string};
    readonly id: string;
    readonly internalId: string;
    readonly lifecycleDetails: string;
    readonly state: string;
    readonly status: string;
    readonly storageServerId: string;
    readonly systemTags: {[key: string]: string};
    readonly timeCreated: string;
    readonly timeUpdated: string;
    readonly version: string;
}
export function getDatabaseManagementExternalExadataStorageConnectorOutput(args: GetDatabaseManagementExternalExadataStorageConnectorOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDatabaseManagementExternalExadataStorageConnectorResult> {
    return pulumi.output(args).apply((a: any) => getDatabaseManagementExternalExadataStorageConnector(a, opts))
}

/**
 * A collection of arguments for invoking getDatabaseManagementExternalExadataStorageConnector.
 */
export interface GetDatabaseManagementExternalExadataStorageConnectorOutputArgs {
    externalExadataStorageConnectorId: pulumi.Input<string>;
}
