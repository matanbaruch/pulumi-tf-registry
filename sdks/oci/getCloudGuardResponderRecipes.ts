// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getCloudGuardResponderRecipes(args: GetCloudGuardResponderRecipesArgs, opts?: pulumi.InvokeOptions): Promise<GetCloudGuardResponderRecipesResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getCloudGuardResponderRecipes:getCloudGuardResponderRecipes", {
        "accessLevel": args.accessLevel,
        "compartmentId": args.compartmentId,
        "compartmentIdInSubtree": args.compartmentIdInSubtree,
        "displayName": args.displayName,
        "filters": args.filters,
        "id": args.id,
        "resourceMetadataOnly": args.resourceMetadataOnly,
        "state": args.state,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getCloudGuardResponderRecipes.
 */
export interface GetCloudGuardResponderRecipesArgs {
    accessLevel?: string;
    compartmentId: string;
    compartmentIdInSubtree?: boolean;
    displayName?: string;
    filters?: inputs.GetCloudGuardResponderRecipesFilter[];
    id?: string;
    resourceMetadataOnly?: boolean;
    state?: string;
}

/**
 * A collection of values returned by getCloudGuardResponderRecipes.
 */
export interface GetCloudGuardResponderRecipesResult {
    readonly accessLevel?: string;
    readonly compartmentId: string;
    readonly compartmentIdInSubtree?: boolean;
    readonly displayName?: string;
    readonly filters?: outputs.GetCloudGuardResponderRecipesFilter[];
    readonly id: string;
    readonly resourceMetadataOnly?: boolean;
    readonly responderRecipeCollections: outputs.GetCloudGuardResponderRecipesResponderRecipeCollection[];
    readonly state?: string;
}
export function getCloudGuardResponderRecipesOutput(args: GetCloudGuardResponderRecipesOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetCloudGuardResponderRecipesResult> {
    return pulumi.output(args).apply((a: any) => getCloudGuardResponderRecipes(a, opts))
}

/**
 * A collection of arguments for invoking getCloudGuardResponderRecipes.
 */
export interface GetCloudGuardResponderRecipesOutputArgs {
    accessLevel?: pulumi.Input<string>;
    compartmentId: pulumi.Input<string>;
    compartmentIdInSubtree?: pulumi.Input<boolean>;
    displayName?: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.GetCloudGuardResponderRecipesFilterArgs>[]>;
    id?: pulumi.Input<string>;
    resourceMetadataOnly?: pulumi.Input<boolean>;
    state?: pulumi.Input<string>;
}
