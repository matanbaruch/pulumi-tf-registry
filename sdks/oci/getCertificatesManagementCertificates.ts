// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getCertificatesManagementCertificates(args?: GetCertificatesManagementCertificatesArgs, opts?: pulumi.InvokeOptions): Promise<GetCertificatesManagementCertificatesResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getCertificatesManagementCertificates:getCertificatesManagementCertificates", {
        "certificateId": args.certificateId,
        "compartmentId": args.compartmentId,
        "filters": args.filters,
        "id": args.id,
        "issuerCertificateAuthorityId": args.issuerCertificateAuthorityId,
        "name": args.name,
        "state": args.state,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getCertificatesManagementCertificates.
 */
export interface GetCertificatesManagementCertificatesArgs {
    certificateId?: string;
    compartmentId?: string;
    filters?: inputs.GetCertificatesManagementCertificatesFilter[];
    id?: string;
    issuerCertificateAuthorityId?: string;
    name?: string;
    state?: string;
}

/**
 * A collection of values returned by getCertificatesManagementCertificates.
 */
export interface GetCertificatesManagementCertificatesResult {
    readonly certificateCollections: outputs.GetCertificatesManagementCertificatesCertificateCollection[];
    readonly certificateId?: string;
    readonly compartmentId?: string;
    readonly filters?: outputs.GetCertificatesManagementCertificatesFilter[];
    readonly id: string;
    readonly issuerCertificateAuthorityId?: string;
    readonly name?: string;
    readonly state?: string;
}
export function getCertificatesManagementCertificatesOutput(args?: GetCertificatesManagementCertificatesOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetCertificatesManagementCertificatesResult> {
    return pulumi.output(args).apply((a: any) => getCertificatesManagementCertificates(a, opts))
}

/**
 * A collection of arguments for invoking getCertificatesManagementCertificates.
 */
export interface GetCertificatesManagementCertificatesOutputArgs {
    certificateId?: pulumi.Input<string>;
    compartmentId?: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.GetCertificatesManagementCertificatesFilterArgs>[]>;
    id?: pulumi.Input<string>;
    issuerCertificateAuthorityId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
}
