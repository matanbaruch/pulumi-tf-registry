// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class LoadBalancerBackendSet extends pulumi.CustomResource {
    /**
     * Get an existing LoadBalancerBackendSet resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LoadBalancerBackendSetState, opts?: pulumi.CustomResourceOptions): LoadBalancerBackendSet {
        return new LoadBalancerBackendSet(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/loadBalancerBackendSet:LoadBalancerBackendSet';

    /**
     * Returns true if the given object is an instance of LoadBalancerBackendSet.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LoadBalancerBackendSet {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LoadBalancerBackendSet.__pulumiType;
    }

    public readonly backendMaxConnections!: pulumi.Output<number>;
    public /*out*/ readonly backends!: pulumi.Output<outputs.LoadBalancerBackendSetBackend[]>;
    public readonly healthChecker!: pulumi.Output<outputs.LoadBalancerBackendSetHealthChecker>;
    public readonly lbCookieSessionPersistenceConfiguration!: pulumi.Output<outputs.LoadBalancerBackendSetLbCookieSessionPersistenceConfiguration | undefined>;
    public readonly loadBalancerId!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly policy!: pulumi.Output<string>;
    public readonly sessionPersistenceConfiguration!: pulumi.Output<outputs.LoadBalancerBackendSetSessionPersistenceConfiguration | undefined>;
    public readonly sslConfiguration!: pulumi.Output<outputs.LoadBalancerBackendSetSslConfiguration | undefined>;
    public /*out*/ readonly state!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.LoadBalancerBackendSetTimeouts | undefined>;

    /**
     * Create a LoadBalancerBackendSet resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LoadBalancerBackendSetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LoadBalancerBackendSetArgs | LoadBalancerBackendSetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LoadBalancerBackendSetState | undefined;
            resourceInputs["backendMaxConnections"] = state ? state.backendMaxConnections : undefined;
            resourceInputs["backends"] = state ? state.backends : undefined;
            resourceInputs["healthChecker"] = state ? state.healthChecker : undefined;
            resourceInputs["lbCookieSessionPersistenceConfiguration"] = state ? state.lbCookieSessionPersistenceConfiguration : undefined;
            resourceInputs["loadBalancerId"] = state ? state.loadBalancerId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["policy"] = state ? state.policy : undefined;
            resourceInputs["sessionPersistenceConfiguration"] = state ? state.sessionPersistenceConfiguration : undefined;
            resourceInputs["sslConfiguration"] = state ? state.sslConfiguration : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as LoadBalancerBackendSetArgs | undefined;
            if ((!args || args.healthChecker === undefined) && !opts.urn) {
                throw new Error("Missing required property 'healthChecker'");
            }
            if ((!args || args.loadBalancerId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'loadBalancerId'");
            }
            if ((!args || args.policy === undefined) && !opts.urn) {
                throw new Error("Missing required property 'policy'");
            }
            resourceInputs["backendMaxConnections"] = args ? args.backendMaxConnections : undefined;
            resourceInputs["healthChecker"] = args ? args.healthChecker : undefined;
            resourceInputs["lbCookieSessionPersistenceConfiguration"] = args ? args.lbCookieSessionPersistenceConfiguration : undefined;
            resourceInputs["loadBalancerId"] = args ? args.loadBalancerId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["policy"] = args ? args.policy : undefined;
            resourceInputs["sessionPersistenceConfiguration"] = args ? args.sessionPersistenceConfiguration : undefined;
            resourceInputs["sslConfiguration"] = args ? args.sslConfiguration : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["backends"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LoadBalancerBackendSet.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LoadBalancerBackendSet resources.
 */
export interface LoadBalancerBackendSetState {
    backendMaxConnections?: pulumi.Input<number>;
    backends?: pulumi.Input<pulumi.Input<inputs.LoadBalancerBackendSetBackend>[]>;
    healthChecker?: pulumi.Input<inputs.LoadBalancerBackendSetHealthChecker>;
    lbCookieSessionPersistenceConfiguration?: pulumi.Input<inputs.LoadBalancerBackendSetLbCookieSessionPersistenceConfiguration>;
    loadBalancerId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    policy?: pulumi.Input<string>;
    sessionPersistenceConfiguration?: pulumi.Input<inputs.LoadBalancerBackendSetSessionPersistenceConfiguration>;
    sslConfiguration?: pulumi.Input<inputs.LoadBalancerBackendSetSslConfiguration>;
    state?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.LoadBalancerBackendSetTimeouts>;
}

/**
 * The set of arguments for constructing a LoadBalancerBackendSet resource.
 */
export interface LoadBalancerBackendSetArgs {
    backendMaxConnections?: pulumi.Input<number>;
    healthChecker: pulumi.Input<inputs.LoadBalancerBackendSetHealthChecker>;
    lbCookieSessionPersistenceConfiguration?: pulumi.Input<inputs.LoadBalancerBackendSetLbCookieSessionPersistenceConfiguration>;
    loadBalancerId: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    policy: pulumi.Input<string>;
    sessionPersistenceConfiguration?: pulumi.Input<inputs.LoadBalancerBackendSetSessionPersistenceConfiguration>;
    sslConfiguration?: pulumi.Input<inputs.LoadBalancerBackendSetSslConfiguration>;
    timeouts?: pulumi.Input<inputs.LoadBalancerBackendSetTimeouts>;
}
