// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DataflowRunStatement extends pulumi.CustomResource {
    /**
     * Get an existing DataflowRunStatement resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DataflowRunStatementState, opts?: pulumi.CustomResourceOptions): DataflowRunStatement {
        return new DataflowRunStatement(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/dataflowRunStatement:DataflowRunStatement';

    /**
     * Returns true if the given object is an instance of DataflowRunStatement.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DataflowRunStatement {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DataflowRunStatement.__pulumiType;
    }

    public readonly code!: pulumi.Output<string>;
    public /*out*/ readonly outputs!: pulumi.Output<outputs.DataflowRunStatementOutput[]>;
    public /*out*/ readonly progress!: pulumi.Output<number>;
    public readonly runId!: pulumi.Output<string>;
    public /*out*/ readonly state!: pulumi.Output<string>;
    public /*out*/ readonly timeCompleted!: pulumi.Output<string>;
    public /*out*/ readonly timeCreated!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.DataflowRunStatementTimeouts | undefined>;

    /**
     * Create a DataflowRunStatement resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DataflowRunStatementArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DataflowRunStatementArgs | DataflowRunStatementState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DataflowRunStatementState | undefined;
            resourceInputs["code"] = state ? state.code : undefined;
            resourceInputs["outputs"] = state ? state.outputs : undefined;
            resourceInputs["progress"] = state ? state.progress : undefined;
            resourceInputs["runId"] = state ? state.runId : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["timeCompleted"] = state ? state.timeCompleted : undefined;
            resourceInputs["timeCreated"] = state ? state.timeCreated : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as DataflowRunStatementArgs | undefined;
            if ((!args || args.code === undefined) && !opts.urn) {
                throw new Error("Missing required property 'code'");
            }
            if ((!args || args.runId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'runId'");
            }
            resourceInputs["code"] = args ? args.code : undefined;
            resourceInputs["runId"] = args ? args.runId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["outputs"] = undefined /*out*/;
            resourceInputs["progress"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["timeCompleted"] = undefined /*out*/;
            resourceInputs["timeCreated"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DataflowRunStatement.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DataflowRunStatement resources.
 */
export interface DataflowRunStatementState {
    code?: pulumi.Input<string>;
    outputs?: pulumi.Input<pulumi.Input<inputs.DataflowRunStatementOutput>[]>;
    progress?: pulumi.Input<number>;
    runId?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    timeCompleted?: pulumi.Input<string>;
    timeCreated?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.DataflowRunStatementTimeouts>;
}

/**
 * The set of arguments for constructing a DataflowRunStatement resource.
 */
export interface DataflowRunStatementArgs {
    code: pulumi.Input<string>;
    runId: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.DataflowRunStatementTimeouts>;
}
