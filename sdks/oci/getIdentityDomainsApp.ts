// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getIdentityDomainsApp(args: GetIdentityDomainsAppArgs, opts?: pulumi.InvokeOptions): Promise<GetIdentityDomainsAppResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getIdentityDomainsApp:getIdentityDomainsApp", {
        "appId": args.appId,
        "attributeSets": args.attributeSets,
        "attributes": args.attributes,
        "authorization": args.authorization,
        "idcsEndpoint": args.idcsEndpoint,
        "resourceTypeSchemaVersion": args.resourceTypeSchemaVersion,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getIdentityDomainsApp.
 */
export interface GetIdentityDomainsAppArgs {
    appId: string;
    attributeSets?: string[];
    attributes?: string;
    authorization?: string;
    idcsEndpoint: string;
    resourceTypeSchemaVersion?: string;
}

/**
 * A collection of values returned by getIdentityDomainsApp.
 */
export interface GetIdentityDomainsAppResult {
    readonly accessTokenExpiry: number;
    readonly accounts: outputs.GetIdentityDomainsAppAccount[];
    readonly active: boolean;
    readonly adminRoles: outputs.GetIdentityDomainsAppAdminRole[];
    readonly aliasApps: outputs.GetIdentityDomainsAppAliasApp[];
    readonly allUrlSchemesAllowed: boolean;
    readonly allowAccessControl: boolean;
    readonly allowOffline: boolean;
    readonly allowedGrants: string[];
    readonly allowedOperations: string[];
    readonly allowedScopes: outputs.GetIdentityDomainsAppAllowedScope[];
    readonly allowedTags: outputs.GetIdentityDomainsAppAllowedTag[];
    readonly appIcon: string;
    readonly appId: string;
    readonly appSignonPolicies: outputs.GetIdentityDomainsAppAppSignonPolicy[];
    readonly appThumbnail: string;
    readonly appsNetworkPerimeters: outputs.GetIdentityDomainsAppAppsNetworkPerimeter[];
    readonly asOpcServices: outputs.GetIdentityDomainsAppAsOpcService[];
    readonly attrRenderingMetadatas: outputs.GetIdentityDomainsAppAttrRenderingMetadata[];
    readonly attributeSets?: string[];
    readonly attributes?: string;
    readonly audience: string;
    readonly authorization?: string;
    readonly basedOnTemplates: outputs.GetIdentityDomainsAppBasedOnTemplate[];
    readonly bypassConsent: boolean;
    readonly callbackServiceUrl: string;
    readonly certificates: outputs.GetIdentityDomainsAppCertificate[];
    readonly clientIpChecking: string;
    readonly clientSecret: string;
    readonly clientType: string;
    readonly cloudControlProperties: outputs.GetIdentityDomainsAppCloudControlProperty[];
    readonly compartmentOcid: string;
    readonly contactEmailAddress: string;
    readonly delegatedServiceNames: string[];
    readonly deleteInProgress: boolean;
    readonly description: string;
    readonly disableKmsiTokenAuthentication: boolean;
    readonly displayName: string;
    readonly domainOcid: string;
    readonly editableAttributes: outputs.GetIdentityDomainsAppEditableAttribute[];
    readonly errorPageUrl: string;
    readonly grantedAppRoles: outputs.GetIdentityDomainsAppGrantedAppRole[];
    readonly grants: outputs.GetIdentityDomainsAppGrant[];
    readonly hashedClientSecret: string;
    readonly homePageUrl: string;
    readonly icon: string;
    readonly id: string;
    readonly idTokenEncAlgo: string;
    readonly idcsCreatedBies: outputs.GetIdentityDomainsAppIdcsCreatedBy[];
    readonly idcsEndpoint: string;
    readonly idcsLastModifiedBies: outputs.GetIdentityDomainsAppIdcsLastModifiedBy[];
    readonly idcsLastUpgradedInRelease: string;
    readonly idcsPreventedOperations: string[];
    readonly identityProviders: outputs.GetIdentityDomainsAppIdentityProvider[];
    readonly idpPolicies: outputs.GetIdentityDomainsAppIdpPolicy[];
    readonly infrastructure: boolean;
    readonly isAliasApp: boolean;
    readonly isDatabaseService: boolean;
    readonly isEnterpriseApp: boolean;
    readonly isFormFill: boolean;
    readonly isKerberosRealm: boolean;
    readonly isLoginTarget: boolean;
    readonly isManagedApp: boolean;
    readonly isMobileTarget: boolean;
    readonly isMulticloudServiceApp: boolean;
    readonly isOauthClient: boolean;
    readonly isOauthResource: boolean;
    readonly isObligationCapable: boolean;
    readonly isOpcService: boolean;
    readonly isRadiusApp: boolean;
    readonly isSamlServiceProvider: boolean;
    readonly isUnmanagedApp: boolean;
    readonly isWebTierPolicy: boolean;
    readonly landingPageUrl: string;
    readonly linkingCallbackUrl: string;
    readonly loginMechanism: string;
    readonly loginPageUrl: string;
    readonly logoutPageUrl: string;
    readonly logoutUri: string;
    readonly metas: outputs.GetIdentityDomainsAppMeta[];
    readonly meterAsOpcService: boolean;
    readonly migrated: boolean;
    readonly name: string;
    readonly ocid: string;
    readonly postLogoutRedirectUris: string[];
    readonly privacyPolicyUrl: string;
    readonly productLogoUrl: string;
    readonly productName: string;
    readonly protectableSecondaryAudiences: outputs.GetIdentityDomainsAppProtectableSecondaryAudience[];
    readonly radiusPolicies: outputs.GetIdentityDomainsAppRadiusPolicy[];
    readonly readyToUpgrade: boolean;
    readonly redirectUris: string[];
    readonly refreshTokenExpiry: number;
    readonly resourceTypeSchemaVersion?: string;
    readonly samlServiceProviders: outputs.GetIdentityDomainsAppSamlServiceProvider[];
    readonly schemas: string[];
    readonly scopes: outputs.GetIdentityDomainsAppScope[];
    readonly secondaryAudiences: string[];
    readonly serviceParams: outputs.GetIdentityDomainsAppServiceParam[];
    readonly serviceTypeUrn: string;
    readonly serviceTypeVersion: string;
    readonly showInMyApps: boolean;
    readonly signonPolicies: outputs.GetIdentityDomainsAppSignonPolicy[];
    readonly tags: outputs.GetIdentityDomainsAppTag[];
    readonly tenancyOcid: string;
    readonly termsOfServiceUrl: string;
    readonly termsOfUses: outputs.GetIdentityDomainsAppTermsOfUse[];
    readonly trustPolicies: outputs.GetIdentityDomainsAppTrustPolicy[];
    readonly trustScope: string;
    readonly urnietfparamsscimschemasoracleidcsextensionOciTags: outputs.GetIdentityDomainsAppUrnietfparamsscimschemasoracleidcsextensionOciTag[];
    readonly urnietfparamsscimschemasoracleidcsextensiondbcsApps: outputs.GetIdentityDomainsAppUrnietfparamsscimschemasoracleidcsextensiondbcsApp[];
    readonly urnietfparamsscimschemasoracleidcsextensionenterpriseAppApps: outputs.GetIdentityDomainsAppUrnietfparamsscimschemasoracleidcsextensionenterpriseAppApp[];
    readonly urnietfparamsscimschemasoracleidcsextensionformFillAppApps: outputs.GetIdentityDomainsAppUrnietfparamsscimschemasoracleidcsextensionformFillAppApp[];
    readonly urnietfparamsscimschemasoracleidcsextensionformFillAppTemplateAppTemplates: outputs.GetIdentityDomainsAppUrnietfparamsscimschemasoracleidcsextensionformFillAppTemplateAppTemplate[];
    readonly urnietfparamsscimschemasoracleidcsextensionkerberosRealmApps: outputs.GetIdentityDomainsAppUrnietfparamsscimschemasoracleidcsextensionkerberosRealmApp[];
    readonly urnietfparamsscimschemasoracleidcsextensionmanagedappApps: outputs.GetIdentityDomainsAppUrnietfparamsscimschemasoracleidcsextensionmanagedappApp[];
    readonly urnietfparamsscimschemasoracleidcsextensionmulticloudServiceAppApps: outputs.GetIdentityDomainsAppUrnietfparamsscimschemasoracleidcsextensionmulticloudServiceAppApp[];
    readonly urnietfparamsscimschemasoracleidcsextensionopcServiceApps: outputs.GetIdentityDomainsAppUrnietfparamsscimschemasoracleidcsextensionopcServiceApp[];
    readonly urnietfparamsscimschemasoracleidcsextensionradiusAppApps: outputs.GetIdentityDomainsAppUrnietfparamsscimschemasoracleidcsextensionradiusAppApp[];
    readonly urnietfparamsscimschemasoracleidcsextensionrequestableApps: outputs.GetIdentityDomainsAppUrnietfparamsscimschemasoracleidcsextensionrequestableApp[];
    readonly urnietfparamsscimschemasoracleidcsextensionsamlServiceProviderApps: outputs.GetIdentityDomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderApp[];
    readonly urnietfparamsscimschemasoracleidcsextensionwebTierPolicyApps: outputs.GetIdentityDomainsAppUrnietfparamsscimschemasoracleidcsextensionwebTierPolicyApp[];
    readonly userRoles: outputs.GetIdentityDomainsAppUserRole[];
}
export function getIdentityDomainsAppOutput(args: GetIdentityDomainsAppOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetIdentityDomainsAppResult> {
    return pulumi.output(args).apply((a: any) => getIdentityDomainsApp(a, opts))
}

/**
 * A collection of arguments for invoking getIdentityDomainsApp.
 */
export interface GetIdentityDomainsAppOutputArgs {
    appId: pulumi.Input<string>;
    attributeSets?: pulumi.Input<pulumi.Input<string>[]>;
    attributes?: pulumi.Input<string>;
    authorization?: pulumi.Input<string>;
    idcsEndpoint: pulumi.Input<string>;
    resourceTypeSchemaVersion?: pulumi.Input<string>;
}
