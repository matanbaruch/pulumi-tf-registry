// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CoreInstance extends pulumi.CustomResource {
    /**
     * Get an existing CoreInstance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CoreInstanceState, opts?: pulumi.CustomResourceOptions): CoreInstance {
        return new CoreInstance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/coreInstance:CoreInstance';

    /**
     * Returns true if the given object is an instance of CoreInstance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CoreInstance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CoreInstance.__pulumiType;
    }

    public readonly agentConfig!: pulumi.Output<outputs.CoreInstanceAgentConfig | undefined>;
    public readonly async!: pulumi.Output<boolean | undefined>;
    public readonly availabilityConfig!: pulumi.Output<outputs.CoreInstanceAvailabilityConfig | undefined>;
    public readonly availabilityDomain!: pulumi.Output<string>;
    public /*out*/ readonly bootVolumeId!: pulumi.Output<string>;
    public readonly capacityReservationId!: pulumi.Output<string>;
    public readonly clusterPlacementGroupId!: pulumi.Output<string | undefined>;
    public readonly compartmentId!: pulumi.Output<string>;
    public readonly computeClusterId!: pulumi.Output<string>;
    public readonly createVnicDetails!: pulumi.Output<outputs.CoreInstanceCreateVnicDetails | undefined>;
    public readonly dedicatedVmHostId!: pulumi.Output<string>;
    public readonly definedTags!: pulumi.Output<{[key: string]: string}>;
    public readonly displayName!: pulumi.Output<string>;
    public readonly extendedMetadata!: pulumi.Output<{[key: string]: string}>;
    public readonly faultDomain!: pulumi.Output<string>;
    public readonly freeformTags!: pulumi.Output<{[key: string]: string}>;
    /**
     * @deprecated Deprecated
     */
    public readonly hostnameLabel!: pulumi.Output<string>;
    /**
     * @deprecated Deprecated
     */
    public readonly image!: pulumi.Output<string>;
    public readonly instanceConfigurationId!: pulumi.Output<string>;
    public readonly instanceOptions!: pulumi.Output<outputs.CoreInstanceInstanceOptions | undefined>;
    public readonly ipxeScript!: pulumi.Output<string>;
    public /*out*/ readonly isCrossNumaNode!: pulumi.Output<boolean>;
    public readonly isPvEncryptionInTransitEnabled!: pulumi.Output<boolean>;
    public /*out*/ readonly launchMode!: pulumi.Output<string>;
    public readonly launchOptions!: pulumi.Output<outputs.CoreInstanceLaunchOptions | undefined>;
    public readonly launchVolumeAttachments!: pulumi.Output<outputs.CoreInstanceLaunchVolumeAttachment[] | undefined>;
    public readonly metadata!: pulumi.Output<{[key: string]: string}>;
    public readonly platformConfig!: pulumi.Output<outputs.CoreInstancePlatformConfig | undefined>;
    public readonly preemptibleInstanceConfig!: pulumi.Output<outputs.CoreInstancePreemptibleInstanceConfig | undefined>;
    public readonly preserveBootVolume!: pulumi.Output<boolean | undefined>;
    public readonly preserveDataVolumesCreatedAtLaunch!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly privateIp!: pulumi.Output<string>;
    public /*out*/ readonly publicIp!: pulumi.Output<string>;
    public /*out*/ readonly region!: pulumi.Output<string>;
    public readonly shape!: pulumi.Output<string>;
    public readonly shapeConfig!: pulumi.Output<outputs.CoreInstanceShapeConfig | undefined>;
    public readonly sourceDetails!: pulumi.Output<outputs.CoreInstanceSourceDetails | undefined>;
    public readonly state!: pulumi.Output<string>;
    /**
     * @deprecated Deprecated
     */
    public readonly subnetId!: pulumi.Output<string>;
    public /*out*/ readonly systemTags!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly timeCreated!: pulumi.Output<string>;
    public /*out*/ readonly timeMaintenanceRebootDue!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.CoreInstanceTimeouts | undefined>;
    public readonly updateOperationConstraint!: pulumi.Output<string | undefined>;

    /**
     * Create a CoreInstance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CoreInstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CoreInstanceArgs | CoreInstanceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CoreInstanceState | undefined;
            resourceInputs["agentConfig"] = state ? state.agentConfig : undefined;
            resourceInputs["async"] = state ? state.async : undefined;
            resourceInputs["availabilityConfig"] = state ? state.availabilityConfig : undefined;
            resourceInputs["availabilityDomain"] = state ? state.availabilityDomain : undefined;
            resourceInputs["bootVolumeId"] = state ? state.bootVolumeId : undefined;
            resourceInputs["capacityReservationId"] = state ? state.capacityReservationId : undefined;
            resourceInputs["clusterPlacementGroupId"] = state ? state.clusterPlacementGroupId : undefined;
            resourceInputs["compartmentId"] = state ? state.compartmentId : undefined;
            resourceInputs["computeClusterId"] = state ? state.computeClusterId : undefined;
            resourceInputs["createVnicDetails"] = state ? state.createVnicDetails : undefined;
            resourceInputs["dedicatedVmHostId"] = state ? state.dedicatedVmHostId : undefined;
            resourceInputs["definedTags"] = state ? state.definedTags : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["extendedMetadata"] = state ? state.extendedMetadata : undefined;
            resourceInputs["faultDomain"] = state ? state.faultDomain : undefined;
            resourceInputs["freeformTags"] = state ? state.freeformTags : undefined;
            resourceInputs["hostnameLabel"] = state ? state.hostnameLabel : undefined;
            resourceInputs["image"] = state ? state.image : undefined;
            resourceInputs["instanceConfigurationId"] = state ? state.instanceConfigurationId : undefined;
            resourceInputs["instanceOptions"] = state ? state.instanceOptions : undefined;
            resourceInputs["ipxeScript"] = state ? state.ipxeScript : undefined;
            resourceInputs["isCrossNumaNode"] = state ? state.isCrossNumaNode : undefined;
            resourceInputs["isPvEncryptionInTransitEnabled"] = state ? state.isPvEncryptionInTransitEnabled : undefined;
            resourceInputs["launchMode"] = state ? state.launchMode : undefined;
            resourceInputs["launchOptions"] = state ? state.launchOptions : undefined;
            resourceInputs["launchVolumeAttachments"] = state ? state.launchVolumeAttachments : undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
            resourceInputs["platformConfig"] = state ? state.platformConfig : undefined;
            resourceInputs["preemptibleInstanceConfig"] = state ? state.preemptibleInstanceConfig : undefined;
            resourceInputs["preserveBootVolume"] = state ? state.preserveBootVolume : undefined;
            resourceInputs["preserveDataVolumesCreatedAtLaunch"] = state ? state.preserveDataVolumesCreatedAtLaunch : undefined;
            resourceInputs["privateIp"] = state ? state.privateIp : undefined;
            resourceInputs["publicIp"] = state ? state.publicIp : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["shape"] = state ? state.shape : undefined;
            resourceInputs["shapeConfig"] = state ? state.shapeConfig : undefined;
            resourceInputs["sourceDetails"] = state ? state.sourceDetails : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["subnetId"] = state ? state.subnetId : undefined;
            resourceInputs["systemTags"] = state ? state.systemTags : undefined;
            resourceInputs["timeCreated"] = state ? state.timeCreated : undefined;
            resourceInputs["timeMaintenanceRebootDue"] = state ? state.timeMaintenanceRebootDue : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["updateOperationConstraint"] = state ? state.updateOperationConstraint : undefined;
        } else {
            const args = argsOrState as CoreInstanceArgs | undefined;
            if ((!args || args.availabilityDomain === undefined) && !opts.urn) {
                throw new Error("Missing required property 'availabilityDomain'");
            }
            if ((!args || args.compartmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'compartmentId'");
            }
            resourceInputs["agentConfig"] = args ? args.agentConfig : undefined;
            resourceInputs["async"] = args ? args.async : undefined;
            resourceInputs["availabilityConfig"] = args ? args.availabilityConfig : undefined;
            resourceInputs["availabilityDomain"] = args ? args.availabilityDomain : undefined;
            resourceInputs["capacityReservationId"] = args ? args.capacityReservationId : undefined;
            resourceInputs["clusterPlacementGroupId"] = args ? args.clusterPlacementGroupId : undefined;
            resourceInputs["compartmentId"] = args ? args.compartmentId : undefined;
            resourceInputs["computeClusterId"] = args ? args.computeClusterId : undefined;
            resourceInputs["createVnicDetails"] = args ? args.createVnicDetails : undefined;
            resourceInputs["dedicatedVmHostId"] = args ? args.dedicatedVmHostId : undefined;
            resourceInputs["definedTags"] = args ? args.definedTags : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["extendedMetadata"] = args ? args.extendedMetadata : undefined;
            resourceInputs["faultDomain"] = args ? args.faultDomain : undefined;
            resourceInputs["freeformTags"] = args ? args.freeformTags : undefined;
            resourceInputs["hostnameLabel"] = args ? args.hostnameLabel : undefined;
            resourceInputs["image"] = args ? args.image : undefined;
            resourceInputs["instanceConfigurationId"] = args ? args.instanceConfigurationId : undefined;
            resourceInputs["instanceOptions"] = args ? args.instanceOptions : undefined;
            resourceInputs["ipxeScript"] = args ? args.ipxeScript : undefined;
            resourceInputs["isPvEncryptionInTransitEnabled"] = args ? args.isPvEncryptionInTransitEnabled : undefined;
            resourceInputs["launchOptions"] = args ? args.launchOptions : undefined;
            resourceInputs["launchVolumeAttachments"] = args ? args.launchVolumeAttachments : undefined;
            resourceInputs["metadata"] = args ? args.metadata : undefined;
            resourceInputs["platformConfig"] = args ? args.platformConfig : undefined;
            resourceInputs["preemptibleInstanceConfig"] = args ? args.preemptibleInstanceConfig : undefined;
            resourceInputs["preserveBootVolume"] = args ? args.preserveBootVolume : undefined;
            resourceInputs["preserveDataVolumesCreatedAtLaunch"] = args ? args.preserveDataVolumesCreatedAtLaunch : undefined;
            resourceInputs["shape"] = args ? args.shape : undefined;
            resourceInputs["shapeConfig"] = args ? args.shapeConfig : undefined;
            resourceInputs["sourceDetails"] = args ? args.sourceDetails : undefined;
            resourceInputs["state"] = args ? args.state : undefined;
            resourceInputs["subnetId"] = args ? args.subnetId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["updateOperationConstraint"] = args ? args.updateOperationConstraint : undefined;
            resourceInputs["bootVolumeId"] = undefined /*out*/;
            resourceInputs["isCrossNumaNode"] = undefined /*out*/;
            resourceInputs["launchMode"] = undefined /*out*/;
            resourceInputs["privateIp"] = undefined /*out*/;
            resourceInputs["publicIp"] = undefined /*out*/;
            resourceInputs["region"] = undefined /*out*/;
            resourceInputs["systemTags"] = undefined /*out*/;
            resourceInputs["timeCreated"] = undefined /*out*/;
            resourceInputs["timeMaintenanceRebootDue"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CoreInstance.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CoreInstance resources.
 */
export interface CoreInstanceState {
    agentConfig?: pulumi.Input<inputs.CoreInstanceAgentConfig>;
    async?: pulumi.Input<boolean>;
    availabilityConfig?: pulumi.Input<inputs.CoreInstanceAvailabilityConfig>;
    availabilityDomain?: pulumi.Input<string>;
    bootVolumeId?: pulumi.Input<string>;
    capacityReservationId?: pulumi.Input<string>;
    clusterPlacementGroupId?: pulumi.Input<string>;
    compartmentId?: pulumi.Input<string>;
    computeClusterId?: pulumi.Input<string>;
    createVnicDetails?: pulumi.Input<inputs.CoreInstanceCreateVnicDetails>;
    dedicatedVmHostId?: pulumi.Input<string>;
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    displayName?: pulumi.Input<string>;
    extendedMetadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    faultDomain?: pulumi.Input<string>;
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * @deprecated Deprecated
     */
    hostnameLabel?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    image?: pulumi.Input<string>;
    instanceConfigurationId?: pulumi.Input<string>;
    instanceOptions?: pulumi.Input<inputs.CoreInstanceInstanceOptions>;
    ipxeScript?: pulumi.Input<string>;
    isCrossNumaNode?: pulumi.Input<boolean>;
    isPvEncryptionInTransitEnabled?: pulumi.Input<boolean>;
    launchMode?: pulumi.Input<string>;
    launchOptions?: pulumi.Input<inputs.CoreInstanceLaunchOptions>;
    launchVolumeAttachments?: pulumi.Input<pulumi.Input<inputs.CoreInstanceLaunchVolumeAttachment>[]>;
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    platformConfig?: pulumi.Input<inputs.CoreInstancePlatformConfig>;
    preemptibleInstanceConfig?: pulumi.Input<inputs.CoreInstancePreemptibleInstanceConfig>;
    preserveBootVolume?: pulumi.Input<boolean>;
    preserveDataVolumesCreatedAtLaunch?: pulumi.Input<boolean>;
    privateIp?: pulumi.Input<string>;
    publicIp?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    shape?: pulumi.Input<string>;
    shapeConfig?: pulumi.Input<inputs.CoreInstanceShapeConfig>;
    sourceDetails?: pulumi.Input<inputs.CoreInstanceSourceDetails>;
    state?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    subnetId?: pulumi.Input<string>;
    systemTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeCreated?: pulumi.Input<string>;
    timeMaintenanceRebootDue?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.CoreInstanceTimeouts>;
    updateOperationConstraint?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CoreInstance resource.
 */
export interface CoreInstanceArgs {
    agentConfig?: pulumi.Input<inputs.CoreInstanceAgentConfig>;
    async?: pulumi.Input<boolean>;
    availabilityConfig?: pulumi.Input<inputs.CoreInstanceAvailabilityConfig>;
    availabilityDomain: pulumi.Input<string>;
    capacityReservationId?: pulumi.Input<string>;
    clusterPlacementGroupId?: pulumi.Input<string>;
    compartmentId: pulumi.Input<string>;
    computeClusterId?: pulumi.Input<string>;
    createVnicDetails?: pulumi.Input<inputs.CoreInstanceCreateVnicDetails>;
    dedicatedVmHostId?: pulumi.Input<string>;
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    displayName?: pulumi.Input<string>;
    extendedMetadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    faultDomain?: pulumi.Input<string>;
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * @deprecated Deprecated
     */
    hostnameLabel?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    image?: pulumi.Input<string>;
    instanceConfigurationId?: pulumi.Input<string>;
    instanceOptions?: pulumi.Input<inputs.CoreInstanceInstanceOptions>;
    ipxeScript?: pulumi.Input<string>;
    isPvEncryptionInTransitEnabled?: pulumi.Input<boolean>;
    launchOptions?: pulumi.Input<inputs.CoreInstanceLaunchOptions>;
    launchVolumeAttachments?: pulumi.Input<pulumi.Input<inputs.CoreInstanceLaunchVolumeAttachment>[]>;
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    platformConfig?: pulumi.Input<inputs.CoreInstancePlatformConfig>;
    preemptibleInstanceConfig?: pulumi.Input<inputs.CoreInstancePreemptibleInstanceConfig>;
    preserveBootVolume?: pulumi.Input<boolean>;
    preserveDataVolumesCreatedAtLaunch?: pulumi.Input<boolean>;
    shape?: pulumi.Input<string>;
    shapeConfig?: pulumi.Input<inputs.CoreInstanceShapeConfig>;
    sourceDetails?: pulumi.Input<inputs.CoreInstanceSourceDetails>;
    state?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    subnetId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.CoreInstanceTimeouts>;
    updateOperationConstraint?: pulumi.Input<string>;
}
