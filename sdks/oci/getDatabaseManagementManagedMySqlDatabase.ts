// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getDatabaseManagementManagedMySqlDatabase(args: GetDatabaseManagementManagedMySqlDatabaseArgs, opts?: pulumi.InvokeOptions): Promise<GetDatabaseManagementManagedMySqlDatabaseResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getDatabaseManagementManagedMySqlDatabase:getDatabaseManagementManagedMySqlDatabase", {
        "id": args.id,
        "managedMySqlDatabaseId": args.managedMySqlDatabaseId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getDatabaseManagementManagedMySqlDatabase.
 */
export interface GetDatabaseManagementManagedMySqlDatabaseArgs {
    id?: string;
    managedMySqlDatabaseId: string;
}

/**
 * A collection of values returned by getDatabaseManagementManagedMySqlDatabase.
 */
export interface GetDatabaseManagementManagedMySqlDatabaseResult {
    readonly compartmentId: string;
    readonly dbName: string;
    readonly dbVersion: string;
    readonly heatWaveClusterDisplayName: string;
    readonly heatWaveMemorySize: number;
    readonly heatWaveNodeShape: string;
    readonly heatWaveNodes: outputs.GetDatabaseManagementManagedMySqlDatabaseHeatWaveNode[];
    readonly id: string;
    readonly isHeatWaveActive: boolean;
    readonly isHeatWaveEnabled: boolean;
    readonly isLakehouseEnabled: boolean;
    readonly managedMySqlDatabaseId: string;
    readonly name: string;
    readonly timeCreated: string;
    readonly timeCreatedHeatWave: string;
}
export function getDatabaseManagementManagedMySqlDatabaseOutput(args: GetDatabaseManagementManagedMySqlDatabaseOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDatabaseManagementManagedMySqlDatabaseResult> {
    return pulumi.output(args).apply((a: any) => getDatabaseManagementManagedMySqlDatabase(a, opts))
}

/**
 * A collection of arguments for invoking getDatabaseManagementManagedMySqlDatabase.
 */
export interface GetDatabaseManagementManagedMySqlDatabaseOutputArgs {
    id?: pulumi.Input<string>;
    managedMySqlDatabaseId: pulumi.Input<string>;
}
