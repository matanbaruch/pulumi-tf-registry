// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getDatabaseManagementManagedDatabaseOptimizerStatisticsCollectionOperation(args: GetDatabaseManagementManagedDatabaseOptimizerStatisticsCollectionOperationArgs, opts?: pulumi.InvokeOptions): Promise<GetDatabaseManagementManagedDatabaseOptimizerStatisticsCollectionOperationResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getDatabaseManagementManagedDatabaseOptimizerStatisticsCollectionOperation:getDatabaseManagementManagedDatabaseOptimizerStatisticsCollectionOperation", {
        "id": args.id,
        "managedDatabaseId": args.managedDatabaseId,
        "optimizerStatisticsCollectionOperationId": args.optimizerStatisticsCollectionOperationId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getDatabaseManagementManagedDatabaseOptimizerStatisticsCollectionOperation.
 */
export interface GetDatabaseManagementManagedDatabaseOptimizerStatisticsCollectionOperationArgs {
    id?: string;
    managedDatabaseId: string;
    optimizerStatisticsCollectionOperationId: number;
}

/**
 * A collection of values returned by getDatabaseManagementManagedDatabaseOptimizerStatisticsCollectionOperation.
 */
export interface GetDatabaseManagementManagedDatabaseOptimizerStatisticsCollectionOperationResult {
    readonly completedCount: number;
    readonly databases: outputs.GetDatabaseManagementManagedDatabaseOptimizerStatisticsCollectionOperationDatabase[];
    readonly durationInSeconds: number;
    readonly endTime: string;
    readonly failedCount: number;
    readonly id: string;
    readonly inProgressCount: number;
    readonly jobName: string;
    readonly managedDatabaseId: string;
    readonly operationName: string;
    readonly optimizerStatisticsCollectionOperationId: number;
    readonly startTime: string;
    readonly status: string;
    readonly target: string;
    readonly tasks: outputs.GetDatabaseManagementManagedDatabaseOptimizerStatisticsCollectionOperationTask[];
    readonly timedOutCount: number;
    readonly totalObjectsCount: number;
}
export function getDatabaseManagementManagedDatabaseOptimizerStatisticsCollectionOperationOutput(args: GetDatabaseManagementManagedDatabaseOptimizerStatisticsCollectionOperationOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDatabaseManagementManagedDatabaseOptimizerStatisticsCollectionOperationResult> {
    return pulumi.output(args).apply((a: any) => getDatabaseManagementManagedDatabaseOptimizerStatisticsCollectionOperation(a, opts))
}

/**
 * A collection of arguments for invoking getDatabaseManagementManagedDatabaseOptimizerStatisticsCollectionOperation.
 */
export interface GetDatabaseManagementManagedDatabaseOptimizerStatisticsCollectionOperationOutputArgs {
    id?: pulumi.Input<string>;
    managedDatabaseId: pulumi.Input<string>;
    optimizerStatisticsCollectionOperationId: pulumi.Input<number>;
}
