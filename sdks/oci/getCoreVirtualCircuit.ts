// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getCoreVirtualCircuit(args: GetCoreVirtualCircuitArgs, opts?: pulumi.InvokeOptions): Promise<GetCoreVirtualCircuitResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getCoreVirtualCircuit:getCoreVirtualCircuit", {
        "virtualCircuitId": args.virtualCircuitId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getCoreVirtualCircuit.
 */
export interface GetCoreVirtualCircuitArgs {
    virtualCircuitId: string;
}

/**
 * A collection of values returned by getCoreVirtualCircuit.
 */
export interface GetCoreVirtualCircuitResult {
    readonly bandwidthShapeName: string;
    readonly bgpAdminState: string;
    readonly bgpIpv6sessionState: string;
    /**
     * @deprecated Deprecated
     */
    readonly bgpManagement: string;
    readonly bgpSessionState: string;
    readonly compartmentId: string;
    readonly crossConnectMappings: outputs.GetCoreVirtualCircuitCrossConnectMapping[];
    readonly customerAsn: string;
    /**
     * @deprecated Deprecated
     */
    readonly customerBgpAsn: number;
    readonly definedTags: {[key: string]: string};
    readonly displayName: string;
    readonly freeformTags: {[key: string]: string};
    readonly gatewayId: string;
    readonly id: string;
    readonly ipMtu: string;
    readonly isBfdEnabled: boolean;
    readonly isTransportMode: boolean;
    readonly oracleBgpAsn: number;
    readonly providerServiceId: string;
    readonly providerServiceKeyName: string;
    readonly providerState: string;
    readonly publicPrefixes: outputs.GetCoreVirtualCircuitPublicPrefix[];
    readonly referenceComment: string;
    readonly region: string;
    readonly routingPolicies: string[];
    readonly serviceType: string;
    readonly state: string;
    readonly timeCreated: string;
    readonly type: string;
    readonly virtualCircuitId: string;
}
export function getCoreVirtualCircuitOutput(args: GetCoreVirtualCircuitOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetCoreVirtualCircuitResult> {
    return pulumi.output(args).apply((a: any) => getCoreVirtualCircuit(a, opts))
}

/**
 * A collection of arguments for invoking getCoreVirtualCircuit.
 */
export interface GetCoreVirtualCircuitOutputArgs {
    virtualCircuitId: pulumi.Input<string>;
}
