// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getOptimizerHistories(args: GetOptimizerHistoriesArgs, opts?: pulumi.InvokeOptions): Promise<GetOptimizerHistoriesResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getOptimizerHistories:getOptimizerHistories", {
        "compartmentId": args.compartmentId,
        "compartmentIdInSubtree": args.compartmentIdInSubtree,
        "filters": args.filters,
        "id": args.id,
        "includeResourceMetadata": args.includeResourceMetadata,
        "name": args.name,
        "recommendationId": args.recommendationId,
        "recommendationName": args.recommendationName,
        "resourceType": args.resourceType,
        "state": args.state,
        "status": args.status,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getOptimizerHistories.
 */
export interface GetOptimizerHistoriesArgs {
    compartmentId: string;
    compartmentIdInSubtree: boolean;
    filters?: inputs.GetOptimizerHistoriesFilter[];
    id?: string;
    includeResourceMetadata?: boolean;
    name?: string;
    recommendationId?: string;
    recommendationName?: string;
    resourceType?: string;
    state?: string;
    status?: string;
}

/**
 * A collection of values returned by getOptimizerHistories.
 */
export interface GetOptimizerHistoriesResult {
    readonly compartmentId: string;
    readonly compartmentIdInSubtree: boolean;
    readonly filters?: outputs.GetOptimizerHistoriesFilter[];
    readonly historyCollections: outputs.GetOptimizerHistoriesHistoryCollection[];
    readonly id: string;
    readonly includeResourceMetadata?: boolean;
    readonly name?: string;
    readonly recommendationId?: string;
    readonly recommendationName?: string;
    readonly resourceType?: string;
    readonly state?: string;
    readonly status?: string;
}
export function getOptimizerHistoriesOutput(args: GetOptimizerHistoriesOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetOptimizerHistoriesResult> {
    return pulumi.output(args).apply((a: any) => getOptimizerHistories(a, opts))
}

/**
 * A collection of arguments for invoking getOptimizerHistories.
 */
export interface GetOptimizerHistoriesOutputArgs {
    compartmentId: pulumi.Input<string>;
    compartmentIdInSubtree: pulumi.Input<boolean>;
    filters?: pulumi.Input<pulumi.Input<inputs.GetOptimizerHistoriesFilterArgs>[]>;
    id?: pulumi.Input<string>;
    includeResourceMetadata?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    recommendationId?: pulumi.Input<string>;
    recommendationName?: pulumi.Input<string>;
    resourceType?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}
