// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getArtifactsContainerImages(args: GetArtifactsContainerImagesArgs, opts?: pulumi.InvokeOptions): Promise<GetArtifactsContainerImagesResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getArtifactsContainerImages:getArtifactsContainerImages", {
        "compartmentId": args.compartmentId,
        "compartmentIdInSubtree": args.compartmentIdInSubtree,
        "displayName": args.displayName,
        "filters": args.filters,
        "id": args.id,
        "imageId": args.imageId,
        "isVersioned": args.isVersioned,
        "repositoryId": args.repositoryId,
        "repositoryName": args.repositoryName,
        "state": args.state,
        "version": args.version,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getArtifactsContainerImages.
 */
export interface GetArtifactsContainerImagesArgs {
    compartmentId: string;
    compartmentIdInSubtree?: boolean;
    displayName?: string;
    filters?: inputs.GetArtifactsContainerImagesFilter[];
    id?: string;
    imageId?: string;
    isVersioned?: boolean;
    repositoryId?: string;
    repositoryName?: string;
    state?: string;
    version?: string;
}

/**
 * A collection of values returned by getArtifactsContainerImages.
 */
export interface GetArtifactsContainerImagesResult {
    readonly compartmentId: string;
    readonly compartmentIdInSubtree?: boolean;
    readonly containerImageCollections: outputs.GetArtifactsContainerImagesContainerImageCollection[];
    readonly displayName?: string;
    readonly filters?: outputs.GetArtifactsContainerImagesFilter[];
    readonly id: string;
    readonly imageId?: string;
    readonly isVersioned?: boolean;
    readonly repositoryId?: string;
    readonly repositoryName?: string;
    readonly state?: string;
    readonly version?: string;
}
export function getArtifactsContainerImagesOutput(args: GetArtifactsContainerImagesOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetArtifactsContainerImagesResult> {
    return pulumi.output(args).apply((a: any) => getArtifactsContainerImages(a, opts))
}

/**
 * A collection of arguments for invoking getArtifactsContainerImages.
 */
export interface GetArtifactsContainerImagesOutputArgs {
    compartmentId: pulumi.Input<string>;
    compartmentIdInSubtree?: pulumi.Input<boolean>;
    displayName?: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.GetArtifactsContainerImagesFilterArgs>[]>;
    id?: pulumi.Input<string>;
    imageId?: pulumi.Input<string>;
    isVersioned?: pulumi.Input<boolean>;
    repositoryId?: pulumi.Input<string>;
    repositoryName?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    version?: pulumi.Input<string>;
}
