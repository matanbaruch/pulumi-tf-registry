// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getDataintegrationWorkspaceFolder(args: GetDataintegrationWorkspaceFolderArgs, opts?: pulumi.InvokeOptions): Promise<GetDataintegrationWorkspaceFolderResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getDataintegrationWorkspaceFolder:getDataintegrationWorkspaceFolder", {
        "folderKey": args.folderKey,
        "workspaceId": args.workspaceId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getDataintegrationWorkspaceFolder.
 */
export interface GetDataintegrationWorkspaceFolderArgs {
    folderKey: string;
    workspaceId: string;
}

/**
 * A collection of values returned by getDataintegrationWorkspaceFolder.
 */
export interface GetDataintegrationWorkspaceFolderResult {
    readonly categoryName: string;
    readonly description: string;
    readonly folderKey: string;
    readonly id: string;
    readonly identifier: string;
    readonly key: string;
    readonly keyMap: {[key: string]: string};
    readonly metadatas: outputs.GetDataintegrationWorkspaceFolderMetadata[];
    readonly modelType: string;
    readonly modelVersion: string;
    readonly name: string;
    readonly objectStatus: number;
    readonly objectVersion: number;
    readonly parentReves: outputs.GetDataintegrationWorkspaceFolderParentRef[];
    readonly registryMetadatas: outputs.GetDataintegrationWorkspaceFolderRegistryMetadata[];
    readonly workspaceId: string;
}
export function getDataintegrationWorkspaceFolderOutput(args: GetDataintegrationWorkspaceFolderOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDataintegrationWorkspaceFolderResult> {
    return pulumi.output(args).apply((a: any) => getDataintegrationWorkspaceFolder(a, opts))
}

/**
 * A collection of arguments for invoking getDataintegrationWorkspaceFolder.
 */
export interface GetDataintegrationWorkspaceFolderOutputArgs {
    folderKey: pulumi.Input<string>;
    workspaceId: pulumi.Input<string>;
}
