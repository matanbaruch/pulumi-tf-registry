// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CoreNetworkSecurityGroupSecurityRule extends pulumi.CustomResource {
    /**
     * Get an existing CoreNetworkSecurityGroupSecurityRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CoreNetworkSecurityGroupSecurityRuleState, opts?: pulumi.CustomResourceOptions): CoreNetworkSecurityGroupSecurityRule {
        return new CoreNetworkSecurityGroupSecurityRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/coreNetworkSecurityGroupSecurityRule:CoreNetworkSecurityGroupSecurityRule';

    /**
     * Returns true if the given object is an instance of CoreNetworkSecurityGroupSecurityRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CoreNetworkSecurityGroupSecurityRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CoreNetworkSecurityGroupSecurityRule.__pulumiType;
    }

    public readonly description!: pulumi.Output<string>;
    public readonly destination!: pulumi.Output<string>;
    public readonly destinationType!: pulumi.Output<string>;
    public readonly direction!: pulumi.Output<string>;
    public readonly icmpOptions!: pulumi.Output<outputs.CoreNetworkSecurityGroupSecurityRuleIcmpOptions | undefined>;
    public /*out*/ readonly isValid!: pulumi.Output<boolean>;
    public readonly networkSecurityGroupId!: pulumi.Output<string>;
    public readonly protocol!: pulumi.Output<string>;
    public readonly source!: pulumi.Output<string | undefined>;
    public readonly sourceType!: pulumi.Output<string>;
    public readonly stateless!: pulumi.Output<boolean>;
    public readonly tcpOptions!: pulumi.Output<outputs.CoreNetworkSecurityGroupSecurityRuleTcpOptions | undefined>;
    public /*out*/ readonly timeCreated!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.CoreNetworkSecurityGroupSecurityRuleTimeouts | undefined>;
    public readonly udpOptions!: pulumi.Output<outputs.CoreNetworkSecurityGroupSecurityRuleUdpOptions | undefined>;

    /**
     * Create a CoreNetworkSecurityGroupSecurityRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CoreNetworkSecurityGroupSecurityRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CoreNetworkSecurityGroupSecurityRuleArgs | CoreNetworkSecurityGroupSecurityRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CoreNetworkSecurityGroupSecurityRuleState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["destination"] = state ? state.destination : undefined;
            resourceInputs["destinationType"] = state ? state.destinationType : undefined;
            resourceInputs["direction"] = state ? state.direction : undefined;
            resourceInputs["icmpOptions"] = state ? state.icmpOptions : undefined;
            resourceInputs["isValid"] = state ? state.isValid : undefined;
            resourceInputs["networkSecurityGroupId"] = state ? state.networkSecurityGroupId : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["source"] = state ? state.source : undefined;
            resourceInputs["sourceType"] = state ? state.sourceType : undefined;
            resourceInputs["stateless"] = state ? state.stateless : undefined;
            resourceInputs["tcpOptions"] = state ? state.tcpOptions : undefined;
            resourceInputs["timeCreated"] = state ? state.timeCreated : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["udpOptions"] = state ? state.udpOptions : undefined;
        } else {
            const args = argsOrState as CoreNetworkSecurityGroupSecurityRuleArgs | undefined;
            if ((!args || args.direction === undefined) && !opts.urn) {
                throw new Error("Missing required property 'direction'");
            }
            if ((!args || args.networkSecurityGroupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'networkSecurityGroupId'");
            }
            if ((!args || args.protocol === undefined) && !opts.urn) {
                throw new Error("Missing required property 'protocol'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["destination"] = args ? args.destination : undefined;
            resourceInputs["destinationType"] = args ? args.destinationType : undefined;
            resourceInputs["direction"] = args ? args.direction : undefined;
            resourceInputs["icmpOptions"] = args ? args.icmpOptions : undefined;
            resourceInputs["networkSecurityGroupId"] = args ? args.networkSecurityGroupId : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["source"] = args ? args.source : undefined;
            resourceInputs["sourceType"] = args ? args.sourceType : undefined;
            resourceInputs["stateless"] = args ? args.stateless : undefined;
            resourceInputs["tcpOptions"] = args ? args.tcpOptions : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["udpOptions"] = args ? args.udpOptions : undefined;
            resourceInputs["isValid"] = undefined /*out*/;
            resourceInputs["timeCreated"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CoreNetworkSecurityGroupSecurityRule.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CoreNetworkSecurityGroupSecurityRule resources.
 */
export interface CoreNetworkSecurityGroupSecurityRuleState {
    description?: pulumi.Input<string>;
    destination?: pulumi.Input<string>;
    destinationType?: pulumi.Input<string>;
    direction?: pulumi.Input<string>;
    icmpOptions?: pulumi.Input<inputs.CoreNetworkSecurityGroupSecurityRuleIcmpOptions>;
    isValid?: pulumi.Input<boolean>;
    networkSecurityGroupId?: pulumi.Input<string>;
    protocol?: pulumi.Input<string>;
    source?: pulumi.Input<string>;
    sourceType?: pulumi.Input<string>;
    stateless?: pulumi.Input<boolean>;
    tcpOptions?: pulumi.Input<inputs.CoreNetworkSecurityGroupSecurityRuleTcpOptions>;
    timeCreated?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.CoreNetworkSecurityGroupSecurityRuleTimeouts>;
    udpOptions?: pulumi.Input<inputs.CoreNetworkSecurityGroupSecurityRuleUdpOptions>;
}

/**
 * The set of arguments for constructing a CoreNetworkSecurityGroupSecurityRule resource.
 */
export interface CoreNetworkSecurityGroupSecurityRuleArgs {
    description?: pulumi.Input<string>;
    destination?: pulumi.Input<string>;
    destinationType?: pulumi.Input<string>;
    direction: pulumi.Input<string>;
    icmpOptions?: pulumi.Input<inputs.CoreNetworkSecurityGroupSecurityRuleIcmpOptions>;
    networkSecurityGroupId: pulumi.Input<string>;
    protocol: pulumi.Input<string>;
    source?: pulumi.Input<string>;
    sourceType?: pulumi.Input<string>;
    stateless?: pulumi.Input<boolean>;
    tcpOptions?: pulumi.Input<inputs.CoreNetworkSecurityGroupSecurityRuleTcpOptions>;
    timeouts?: pulumi.Input<inputs.CoreNetworkSecurityGroupSecurityRuleTimeouts>;
    udpOptions?: pulumi.Input<inputs.CoreNetworkSecurityGroupSecurityRuleUdpOptions>;
}
