// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getDataSafeMaskingPolicy(args: GetDataSafeMaskingPolicyArgs, opts?: pulumi.InvokeOptions): Promise<GetDataSafeMaskingPolicyResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getDataSafeMaskingPolicy:getDataSafeMaskingPolicy", {
        "maskingPolicyId": args.maskingPolicyId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getDataSafeMaskingPolicy.
 */
export interface GetDataSafeMaskingPolicyArgs {
    maskingPolicyId: string;
}

/**
 * A collection of values returned by getDataSafeMaskingPolicy.
 */
export interface GetDataSafeMaskingPolicyResult {
    readonly addMaskingColumnsFromSdmTrigger: number;
    readonly columnSources: outputs.GetDataSafeMaskingPolicyColumnSource[];
    readonly compartmentId: string;
    readonly definedTags: {[key: string]: string};
    readonly description: string;
    readonly displayName: string;
    readonly freeformTags: {[key: string]: string};
    readonly generateHealthReportTrigger: number;
    readonly id: string;
    readonly isDropTempTablesEnabled: boolean;
    readonly isRedoLoggingEnabled: boolean;
    readonly isRefreshStatsEnabled: boolean;
    readonly maskingPolicyId: string;
    readonly parallelDegree: string;
    readonly postMaskingScript: string;
    readonly preMaskingScript: string;
    readonly recompile: string;
    readonly state: string;
    readonly timeCreated: string;
    readonly timeUpdated: string;
}
export function getDataSafeMaskingPolicyOutput(args: GetDataSafeMaskingPolicyOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDataSafeMaskingPolicyResult> {
    return pulumi.output(args).apply((a: any) => getDataSafeMaskingPolicy(a, opts))
}

/**
 * A collection of arguments for invoking getDataSafeMaskingPolicy.
 */
export interface GetDataSafeMaskingPolicyOutputArgs {
    maskingPolicyId: pulumi.Input<string>;
}
