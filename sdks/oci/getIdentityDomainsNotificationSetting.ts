// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getIdentityDomainsNotificationSetting(args: GetIdentityDomainsNotificationSettingArgs, opts?: pulumi.InvokeOptions): Promise<GetIdentityDomainsNotificationSettingResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getIdentityDomainsNotificationSetting:getIdentityDomainsNotificationSetting", {
        "attributeSets": args.attributeSets,
        "attributes": args.attributes,
        "authorization": args.authorization,
        "idcsEndpoint": args.idcsEndpoint,
        "notificationSettingId": args.notificationSettingId,
        "resourceTypeSchemaVersion": args.resourceTypeSchemaVersion,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getIdentityDomainsNotificationSetting.
 */
export interface GetIdentityDomainsNotificationSettingArgs {
    attributeSets?: string[];
    attributes?: string;
    authorization?: string;
    idcsEndpoint: string;
    notificationSettingId: string;
    resourceTypeSchemaVersion?: string;
}

/**
 * A collection of values returned by getIdentityDomainsNotificationSetting.
 */
export interface GetIdentityDomainsNotificationSettingResult {
    readonly attributeSets?: string[];
    readonly attributes?: string;
    readonly authorization?: string;
    readonly compartmentOcid: string;
    readonly deleteInProgress: boolean;
    readonly domainOcid: string;
    readonly eventSettings: outputs.GetIdentityDomainsNotificationSettingEventSetting[];
    readonly externalId: string;
    readonly fromEmailAddresses: outputs.GetIdentityDomainsNotificationSettingFromEmailAddress[];
    readonly id: string;
    readonly idcsCreatedBies: outputs.GetIdentityDomainsNotificationSettingIdcsCreatedBy[];
    readonly idcsEndpoint: string;
    readonly idcsLastModifiedBies: outputs.GetIdentityDomainsNotificationSettingIdcsLastModifiedBy[];
    readonly idcsLastUpgradedInRelease: string;
    readonly idcsPreventedOperations: string[];
    readonly metas: outputs.GetIdentityDomainsNotificationSettingMeta[];
    readonly notificationEnabled: boolean;
    readonly notificationSettingId: string;
    readonly ocid: string;
    readonly resourceTypeSchemaVersion?: string;
    readonly schemas: string[];
    readonly sendNotificationToOldAndNewPrimaryEmailsWhenAdminChangesPrimaryEmail: boolean;
    readonly sendNotificationsToSecondaryEmail: boolean;
    readonly tags: outputs.GetIdentityDomainsNotificationSettingTag[];
    readonly tenancyOcid: string;
    readonly testModeEnabled: boolean;
    readonly testRecipients: string[];
}
export function getIdentityDomainsNotificationSettingOutput(args: GetIdentityDomainsNotificationSettingOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetIdentityDomainsNotificationSettingResult> {
    return pulumi.output(args).apply((a: any) => getIdentityDomainsNotificationSetting(a, opts))
}

/**
 * A collection of arguments for invoking getIdentityDomainsNotificationSetting.
 */
export interface GetIdentityDomainsNotificationSettingOutputArgs {
    attributeSets?: pulumi.Input<pulumi.Input<string>[]>;
    attributes?: pulumi.Input<string>;
    authorization?: pulumi.Input<string>;
    idcsEndpoint: pulumi.Input<string>;
    notificationSettingId: pulumi.Input<string>;
    resourceTypeSchemaVersion?: pulumi.Input<string>;
}
