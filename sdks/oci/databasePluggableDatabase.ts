// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DatabasePluggableDatabase extends pulumi.CustomResource {
    /**
     * Get an existing DatabasePluggableDatabase resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DatabasePluggableDatabaseState, opts?: pulumi.CustomResourceOptions): DatabasePluggableDatabase {
        return new DatabasePluggableDatabase(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/databasePluggableDatabase:DatabasePluggableDatabase';

    /**
     * Returns true if the given object is an instance of DatabasePluggableDatabase.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DatabasePluggableDatabase {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DatabasePluggableDatabase.__pulumiType;
    }

    public /*out*/ readonly compartmentId!: pulumi.Output<string>;
    public /*out*/ readonly connectionStrings!: pulumi.Output<outputs.DatabasePluggableDatabaseConnectionString[]>;
    public readonly containerDatabaseAdminPassword!: pulumi.Output<string>;
    public readonly containerDatabaseId!: pulumi.Output<string>;
    public readonly convertToRegularTrigger!: pulumi.Output<number | undefined>;
    public readonly definedTags!: pulumi.Output<{[key: string]: string}>;
    public readonly freeformTags!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly isRestricted!: pulumi.Output<boolean>;
    public /*out*/ readonly lifecycleDetails!: pulumi.Output<string>;
    public /*out*/ readonly openMode!: pulumi.Output<string>;
    public readonly pdbAdminPassword!: pulumi.Output<string>;
    public readonly pdbCreationTypeDetails!: pulumi.Output<outputs.DatabasePluggableDatabasePdbCreationTypeDetails | undefined>;
    public readonly pdbName!: pulumi.Output<string>;
    public /*out*/ readonly pdbNodeLevelDetails!: pulumi.Output<outputs.DatabasePluggableDatabasePdbNodeLevelDetail[]>;
    public /*out*/ readonly pluggableDatabaseManagementConfigs!: pulumi.Output<outputs.DatabasePluggableDatabasePluggableDatabaseManagementConfig[]>;
    public readonly refreshTrigger!: pulumi.Output<number | undefined>;
    public /*out*/ readonly refreshableCloneConfigs!: pulumi.Output<outputs.DatabasePluggableDatabaseRefreshableCloneConfig[]>;
    public readonly rotateKeyTrigger!: pulumi.Output<number | undefined>;
    public readonly shouldCreatePdbBackup!: pulumi.Output<boolean>;
    public readonly shouldPdbAdminAccountBeLocked!: pulumi.Output<boolean>;
    public /*out*/ readonly state!: pulumi.Output<string>;
    public readonly tdeWalletPassword!: pulumi.Output<string>;
    public /*out*/ readonly timeCreated!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.DatabasePluggableDatabaseTimeouts | undefined>;

    /**
     * Create a DatabasePluggableDatabase resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatabasePluggableDatabaseArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DatabasePluggableDatabaseArgs | DatabasePluggableDatabaseState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DatabasePluggableDatabaseState | undefined;
            resourceInputs["compartmentId"] = state ? state.compartmentId : undefined;
            resourceInputs["connectionStrings"] = state ? state.connectionStrings : undefined;
            resourceInputs["containerDatabaseAdminPassword"] = state ? state.containerDatabaseAdminPassword : undefined;
            resourceInputs["containerDatabaseId"] = state ? state.containerDatabaseId : undefined;
            resourceInputs["convertToRegularTrigger"] = state ? state.convertToRegularTrigger : undefined;
            resourceInputs["definedTags"] = state ? state.definedTags : undefined;
            resourceInputs["freeformTags"] = state ? state.freeformTags : undefined;
            resourceInputs["isRestricted"] = state ? state.isRestricted : undefined;
            resourceInputs["lifecycleDetails"] = state ? state.lifecycleDetails : undefined;
            resourceInputs["openMode"] = state ? state.openMode : undefined;
            resourceInputs["pdbAdminPassword"] = state ? state.pdbAdminPassword : undefined;
            resourceInputs["pdbCreationTypeDetails"] = state ? state.pdbCreationTypeDetails : undefined;
            resourceInputs["pdbName"] = state ? state.pdbName : undefined;
            resourceInputs["pdbNodeLevelDetails"] = state ? state.pdbNodeLevelDetails : undefined;
            resourceInputs["pluggableDatabaseManagementConfigs"] = state ? state.pluggableDatabaseManagementConfigs : undefined;
            resourceInputs["refreshTrigger"] = state ? state.refreshTrigger : undefined;
            resourceInputs["refreshableCloneConfigs"] = state ? state.refreshableCloneConfigs : undefined;
            resourceInputs["rotateKeyTrigger"] = state ? state.rotateKeyTrigger : undefined;
            resourceInputs["shouldCreatePdbBackup"] = state ? state.shouldCreatePdbBackup : undefined;
            resourceInputs["shouldPdbAdminAccountBeLocked"] = state ? state.shouldPdbAdminAccountBeLocked : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["tdeWalletPassword"] = state ? state.tdeWalletPassword : undefined;
            resourceInputs["timeCreated"] = state ? state.timeCreated : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as DatabasePluggableDatabaseArgs | undefined;
            if ((!args || args.containerDatabaseId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'containerDatabaseId'");
            }
            if ((!args || args.pdbName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'pdbName'");
            }
            resourceInputs["containerDatabaseAdminPassword"] = args?.containerDatabaseAdminPassword ? pulumi.secret(args.containerDatabaseAdminPassword) : undefined;
            resourceInputs["containerDatabaseId"] = args ? args.containerDatabaseId : undefined;
            resourceInputs["convertToRegularTrigger"] = args ? args.convertToRegularTrigger : undefined;
            resourceInputs["definedTags"] = args ? args.definedTags : undefined;
            resourceInputs["freeformTags"] = args ? args.freeformTags : undefined;
            resourceInputs["pdbAdminPassword"] = args?.pdbAdminPassword ? pulumi.secret(args.pdbAdminPassword) : undefined;
            resourceInputs["pdbCreationTypeDetails"] = args ? args.pdbCreationTypeDetails : undefined;
            resourceInputs["pdbName"] = args ? args.pdbName : undefined;
            resourceInputs["refreshTrigger"] = args ? args.refreshTrigger : undefined;
            resourceInputs["rotateKeyTrigger"] = args ? args.rotateKeyTrigger : undefined;
            resourceInputs["shouldCreatePdbBackup"] = args ? args.shouldCreatePdbBackup : undefined;
            resourceInputs["shouldPdbAdminAccountBeLocked"] = args ? args.shouldPdbAdminAccountBeLocked : undefined;
            resourceInputs["tdeWalletPassword"] = args?.tdeWalletPassword ? pulumi.secret(args.tdeWalletPassword) : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["compartmentId"] = undefined /*out*/;
            resourceInputs["connectionStrings"] = undefined /*out*/;
            resourceInputs["isRestricted"] = undefined /*out*/;
            resourceInputs["lifecycleDetails"] = undefined /*out*/;
            resourceInputs["openMode"] = undefined /*out*/;
            resourceInputs["pdbNodeLevelDetails"] = undefined /*out*/;
            resourceInputs["pluggableDatabaseManagementConfigs"] = undefined /*out*/;
            resourceInputs["refreshableCloneConfigs"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["timeCreated"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["containerDatabaseAdminPassword", "pdbAdminPassword", "tdeWalletPassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(DatabasePluggableDatabase.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DatabasePluggableDatabase resources.
 */
export interface DatabasePluggableDatabaseState {
    compartmentId?: pulumi.Input<string>;
    connectionStrings?: pulumi.Input<pulumi.Input<inputs.DatabasePluggableDatabaseConnectionString>[]>;
    containerDatabaseAdminPassword?: pulumi.Input<string>;
    containerDatabaseId?: pulumi.Input<string>;
    convertToRegularTrigger?: pulumi.Input<number>;
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    isRestricted?: pulumi.Input<boolean>;
    lifecycleDetails?: pulumi.Input<string>;
    openMode?: pulumi.Input<string>;
    pdbAdminPassword?: pulumi.Input<string>;
    pdbCreationTypeDetails?: pulumi.Input<inputs.DatabasePluggableDatabasePdbCreationTypeDetails>;
    pdbName?: pulumi.Input<string>;
    pdbNodeLevelDetails?: pulumi.Input<pulumi.Input<inputs.DatabasePluggableDatabasePdbNodeLevelDetail>[]>;
    pluggableDatabaseManagementConfigs?: pulumi.Input<pulumi.Input<inputs.DatabasePluggableDatabasePluggableDatabaseManagementConfig>[]>;
    refreshTrigger?: pulumi.Input<number>;
    refreshableCloneConfigs?: pulumi.Input<pulumi.Input<inputs.DatabasePluggableDatabaseRefreshableCloneConfig>[]>;
    rotateKeyTrigger?: pulumi.Input<number>;
    shouldCreatePdbBackup?: pulumi.Input<boolean>;
    shouldPdbAdminAccountBeLocked?: pulumi.Input<boolean>;
    state?: pulumi.Input<string>;
    tdeWalletPassword?: pulumi.Input<string>;
    timeCreated?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.DatabasePluggableDatabaseTimeouts>;
}

/**
 * The set of arguments for constructing a DatabasePluggableDatabase resource.
 */
export interface DatabasePluggableDatabaseArgs {
    containerDatabaseAdminPassword?: pulumi.Input<string>;
    containerDatabaseId: pulumi.Input<string>;
    convertToRegularTrigger?: pulumi.Input<number>;
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    pdbAdminPassword?: pulumi.Input<string>;
    pdbCreationTypeDetails?: pulumi.Input<inputs.DatabasePluggableDatabasePdbCreationTypeDetails>;
    pdbName: pulumi.Input<string>;
    refreshTrigger?: pulumi.Input<number>;
    rotateKeyTrigger?: pulumi.Input<number>;
    shouldCreatePdbBackup?: pulumi.Input<boolean>;
    shouldPdbAdminAccountBeLocked?: pulumi.Input<boolean>;
    tdeWalletPassword?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.DatabasePluggableDatabaseTimeouts>;
}
