// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getLogAnalyticsLogAnalyticsEntity(args: GetLogAnalyticsLogAnalyticsEntityArgs, opts?: pulumi.InvokeOptions): Promise<GetLogAnalyticsLogAnalyticsEntityResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getLogAnalyticsLogAnalyticsEntity:getLogAnalyticsLogAnalyticsEntity", {
        "logAnalyticsEntityId": args.logAnalyticsEntityId,
        "namespace": args.namespace,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getLogAnalyticsLogAnalyticsEntity.
 */
export interface GetLogAnalyticsLogAnalyticsEntityArgs {
    logAnalyticsEntityId: string;
    namespace: string;
}

/**
 * A collection of values returned by getLogAnalyticsLogAnalyticsEntity.
 */
export interface GetLogAnalyticsLogAnalyticsEntityResult {
    readonly areLogsCollected: boolean;
    readonly cloudResourceId: string;
    readonly compartmentId: string;
    readonly definedTags: {[key: string]: string};
    readonly entityTypeInternalName: string;
    readonly entityTypeName: string;
    readonly freeformTags: {[key: string]: string};
    readonly hostname: string;
    readonly id: string;
    readonly lifecycleDetails: string;
    readonly logAnalyticsEntityId: string;
    readonly managementAgentCompartmentId: string;
    readonly managementAgentDisplayName: string;
    readonly managementAgentId: string;
    readonly metadatas: outputs.GetLogAnalyticsLogAnalyticsEntityMetadata[];
    readonly name: string;
    readonly namespace: string;
    readonly properties: {[key: string]: string};
    readonly sourceId: string;
    readonly state: string;
    readonly timeCreated: string;
    readonly timeLastDiscovered: string;
    readonly timeUpdated: string;
    readonly timezoneRegion: string;
}
export function getLogAnalyticsLogAnalyticsEntityOutput(args: GetLogAnalyticsLogAnalyticsEntityOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetLogAnalyticsLogAnalyticsEntityResult> {
    return pulumi.output(args).apply((a: any) => getLogAnalyticsLogAnalyticsEntity(a, opts))
}

/**
 * A collection of arguments for invoking getLogAnalyticsLogAnalyticsEntity.
 */
export interface GetLogAnalyticsLogAnalyticsEntityOutputArgs {
    logAnalyticsEntityId: pulumi.Input<string>;
    namespace: pulumi.Input<string>;
}
