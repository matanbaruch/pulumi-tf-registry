// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getLicenseManagerLicenseMetric(args: GetLicenseManagerLicenseMetricArgs, opts?: pulumi.InvokeOptions): Promise<GetLicenseManagerLicenseMetricResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getLicenseManagerLicenseMetric:getLicenseManagerLicenseMetric", {
        "compartmentId": args.compartmentId,
        "id": args.id,
        "isCompartmentIdInSubtree": args.isCompartmentIdInSubtree,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getLicenseManagerLicenseMetric.
 */
export interface GetLicenseManagerLicenseMetricArgs {
    compartmentId: string;
    id?: string;
    isCompartmentIdInSubtree?: boolean;
}

/**
 * A collection of values returned by getLicenseManagerLicenseMetric.
 */
export interface GetLicenseManagerLicenseMetricResult {
    readonly compartmentId: string;
    readonly id: string;
    readonly isCompartmentIdInSubtree?: boolean;
    readonly licenseRecordExpiringSoonCount: number;
    readonly totalByolInstanceCount: number;
    readonly totalLicenseIncludedInstanceCount: number;
    readonly totalProductLicenseCount: number;
}
export function getLicenseManagerLicenseMetricOutput(args: GetLicenseManagerLicenseMetricOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetLicenseManagerLicenseMetricResult> {
    return pulumi.output(args).apply((a: any) => getLicenseManagerLicenseMetric(a, opts))
}

/**
 * A collection of arguments for invoking getLicenseManagerLicenseMetric.
 */
export interface GetLicenseManagerLicenseMetricOutputArgs {
    compartmentId: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    isCompartmentIdInSubtree?: pulumi.Input<boolean>;
}
