// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getIdentityDomainsPasswordPolicy(args: GetIdentityDomainsPasswordPolicyArgs, opts?: pulumi.InvokeOptions): Promise<GetIdentityDomainsPasswordPolicyResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getIdentityDomainsPasswordPolicy:getIdentityDomainsPasswordPolicy", {
        "attributeSets": args.attributeSets,
        "attributes": args.attributes,
        "authorization": args.authorization,
        "idcsEndpoint": args.idcsEndpoint,
        "passwordPolicyId": args.passwordPolicyId,
        "resourceTypeSchemaVersion": args.resourceTypeSchemaVersion,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getIdentityDomainsPasswordPolicy.
 */
export interface GetIdentityDomainsPasswordPolicyArgs {
    attributeSets?: string[];
    attributes?: string;
    authorization?: string;
    idcsEndpoint: string;
    passwordPolicyId: string;
    resourceTypeSchemaVersion?: string;
}

/**
 * A collection of values returned by getIdentityDomainsPasswordPolicy.
 */
export interface GetIdentityDomainsPasswordPolicyResult {
    readonly allowedChars: string;
    readonly attributeSets?: string[];
    readonly attributes?: string;
    readonly authorization?: string;
    readonly compartmentOcid: string;
    readonly configuredPasswordPolicyRules: outputs.GetIdentityDomainsPasswordPolicyConfiguredPasswordPolicyRule[];
    readonly deleteInProgress: boolean;
    readonly description: string;
    readonly dictionaryDelimiter: string;
    readonly dictionaryLocation: string;
    readonly dictionaryWordDisallowed: boolean;
    readonly disallowedChars: string;
    readonly disallowedSubstrings: string[];
    readonly disallowedUserAttributeValues: string[];
    readonly distinctCharacters: number;
    readonly domainOcid: string;
    readonly externalId: string;
    readonly firstNameDisallowed: boolean;
    readonly forcePasswordReset: boolean;
    readonly groups: outputs.GetIdentityDomainsPasswordPolicyGroup[];
    readonly id: string;
    readonly idcsCreatedBies: outputs.GetIdentityDomainsPasswordPolicyIdcsCreatedBy[];
    readonly idcsEndpoint: string;
    readonly idcsLastModifiedBies: outputs.GetIdentityDomainsPasswordPolicyIdcsLastModifiedBy[];
    readonly idcsLastUpgradedInRelease: string;
    readonly idcsPreventedOperations: string[];
    readonly lastNameDisallowed: boolean;
    readonly lockoutDuration: number;
    readonly maxIncorrectAttempts: number;
    readonly maxLength: number;
    readonly maxRepeatedChars: number;
    readonly maxSpecialChars: number;
    readonly metas: outputs.GetIdentityDomainsPasswordPolicyMeta[];
    readonly minAlphaNumerals: number;
    readonly minAlphas: number;
    readonly minLength: number;
    readonly minLowerCase: number;
    readonly minNumerals: number;
    readonly minPasswordAge: number;
    readonly minSpecialChars: number;
    readonly minUniqueChars: number;
    readonly minUpperCase: number;
    readonly name: string;
    readonly numPasswordsInHistory: number;
    readonly ocid: string;
    readonly passwordExpireWarning: number;
    readonly passwordExpiresAfter: number;
    readonly passwordPolicyId: string;
    readonly passwordStrength: string;
    readonly priority: number;
    readonly requiredChars: string;
    readonly resourceTypeSchemaVersion?: string;
    readonly schemas: string[];
    readonly startsWithAlphabet: boolean;
    readonly tags: outputs.GetIdentityDomainsPasswordPolicyTag[];
    readonly tenancyOcid: string;
    readonly userNameDisallowed: boolean;
}
export function getIdentityDomainsPasswordPolicyOutput(args: GetIdentityDomainsPasswordPolicyOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetIdentityDomainsPasswordPolicyResult> {
    return pulumi.output(args).apply((a: any) => getIdentityDomainsPasswordPolicy(a, opts))
}

/**
 * A collection of arguments for invoking getIdentityDomainsPasswordPolicy.
 */
export interface GetIdentityDomainsPasswordPolicyOutputArgs {
    attributeSets?: pulumi.Input<pulumi.Input<string>[]>;
    attributes?: pulumi.Input<string>;
    authorization?: pulumi.Input<string>;
    idcsEndpoint: pulumi.Input<string>;
    passwordPolicyId: pulumi.Input<string>;
    resourceTypeSchemaVersion?: pulumi.Input<string>;
}
