// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DatabaseManagementDatabaseDbmFeaturesManagement extends pulumi.CustomResource {
    /**
     * Get an existing DatabaseManagementDatabaseDbmFeaturesManagement resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DatabaseManagementDatabaseDbmFeaturesManagementState, opts?: pulumi.CustomResourceOptions): DatabaseManagementDatabaseDbmFeaturesManagement {
        return new DatabaseManagementDatabaseDbmFeaturesManagement(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/databaseManagementDatabaseDbmFeaturesManagement:DatabaseManagementDatabaseDbmFeaturesManagement';

    /**
     * Returns true if the given object is an instance of DatabaseManagementDatabaseDbmFeaturesManagement.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DatabaseManagementDatabaseDbmFeaturesManagement {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DatabaseManagementDatabaseDbmFeaturesManagement.__pulumiType;
    }

    public readonly databaseId!: pulumi.Output<string>;
    public readonly enableDatabaseDbmFeature!: pulumi.Output<boolean>;
    public readonly featureDetails!: pulumi.Output<outputs.DatabaseManagementDatabaseDbmFeaturesManagementFeatureDetails | undefined>;
    public readonly modifyDatabaseDbmFeature!: pulumi.Output<boolean | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.DatabaseManagementDatabaseDbmFeaturesManagementTimeouts | undefined>;

    /**
     * Create a DatabaseManagementDatabaseDbmFeaturesManagement resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatabaseManagementDatabaseDbmFeaturesManagementArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DatabaseManagementDatabaseDbmFeaturesManagementArgs | DatabaseManagementDatabaseDbmFeaturesManagementState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DatabaseManagementDatabaseDbmFeaturesManagementState | undefined;
            resourceInputs["databaseId"] = state ? state.databaseId : undefined;
            resourceInputs["enableDatabaseDbmFeature"] = state ? state.enableDatabaseDbmFeature : undefined;
            resourceInputs["featureDetails"] = state ? state.featureDetails : undefined;
            resourceInputs["modifyDatabaseDbmFeature"] = state ? state.modifyDatabaseDbmFeature : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as DatabaseManagementDatabaseDbmFeaturesManagementArgs | undefined;
            if ((!args || args.databaseId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'databaseId'");
            }
            if ((!args || args.enableDatabaseDbmFeature === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enableDatabaseDbmFeature'");
            }
            resourceInputs["databaseId"] = args ? args.databaseId : undefined;
            resourceInputs["enableDatabaseDbmFeature"] = args ? args.enableDatabaseDbmFeature : undefined;
            resourceInputs["featureDetails"] = args ? args.featureDetails : undefined;
            resourceInputs["modifyDatabaseDbmFeature"] = args ? args.modifyDatabaseDbmFeature : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DatabaseManagementDatabaseDbmFeaturesManagement.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DatabaseManagementDatabaseDbmFeaturesManagement resources.
 */
export interface DatabaseManagementDatabaseDbmFeaturesManagementState {
    databaseId?: pulumi.Input<string>;
    enableDatabaseDbmFeature?: pulumi.Input<boolean>;
    featureDetails?: pulumi.Input<inputs.DatabaseManagementDatabaseDbmFeaturesManagementFeatureDetails>;
    modifyDatabaseDbmFeature?: pulumi.Input<boolean>;
    timeouts?: pulumi.Input<inputs.DatabaseManagementDatabaseDbmFeaturesManagementTimeouts>;
}

/**
 * The set of arguments for constructing a DatabaseManagementDatabaseDbmFeaturesManagement resource.
 */
export interface DatabaseManagementDatabaseDbmFeaturesManagementArgs {
    databaseId: pulumi.Input<string>;
    enableDatabaseDbmFeature: pulumi.Input<boolean>;
    featureDetails?: pulumi.Input<inputs.DatabaseManagementDatabaseDbmFeaturesManagementFeatureDetails>;
    modifyDatabaseDbmFeature?: pulumi.Input<boolean>;
    timeouts?: pulumi.Input<inputs.DatabaseManagementDatabaseDbmFeaturesManagementTimeouts>;
}
