// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getLogAnalyticsLogAnalyticsEntities(args: GetLogAnalyticsLogAnalyticsEntitiesArgs, opts?: pulumi.InvokeOptions): Promise<GetLogAnalyticsLogAnalyticsEntitiesResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getLogAnalyticsLogAnalyticsEntities:getLogAnalyticsLogAnalyticsEntities", {
        "cloudResourceId": args.cloudResourceId,
        "compartmentId": args.compartmentId,
        "entityTypeNames": args.entityTypeNames,
        "filters": args.filters,
        "hostname": args.hostname,
        "hostnameContains": args.hostnameContains,
        "id": args.id,
        "isManagementAgentIdNull": args.isManagementAgentIdNull,
        "lifecycleDetailsContains": args.lifecycleDetailsContains,
        "metadataEquals": args.metadataEquals,
        "name": args.name,
        "nameContains": args.nameContains,
        "namespace": args.namespace,
        "sourceId": args.sourceId,
        "state": args.state,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getLogAnalyticsLogAnalyticsEntities.
 */
export interface GetLogAnalyticsLogAnalyticsEntitiesArgs {
    cloudResourceId?: string;
    compartmentId: string;
    entityTypeNames?: string[];
    filters?: inputs.GetLogAnalyticsLogAnalyticsEntitiesFilter[];
    hostname?: string;
    hostnameContains?: string;
    id?: string;
    isManagementAgentIdNull?: string;
    lifecycleDetailsContains?: string;
    metadataEquals?: string[];
    name?: string;
    nameContains?: string;
    namespace: string;
    sourceId?: string;
    state?: string;
}

/**
 * A collection of values returned by getLogAnalyticsLogAnalyticsEntities.
 */
export interface GetLogAnalyticsLogAnalyticsEntitiesResult {
    readonly cloudResourceId?: string;
    readonly compartmentId: string;
    readonly entityTypeNames?: string[];
    readonly filters?: outputs.GetLogAnalyticsLogAnalyticsEntitiesFilter[];
    readonly hostname?: string;
    readonly hostnameContains?: string;
    readonly id: string;
    readonly isManagementAgentIdNull?: string;
    readonly lifecycleDetailsContains?: string;
    readonly logAnalyticsEntityCollections: outputs.GetLogAnalyticsLogAnalyticsEntitiesLogAnalyticsEntityCollection[];
    readonly metadataEquals?: string[];
    readonly name?: string;
    readonly nameContains?: string;
    readonly namespace: string;
    readonly sourceId?: string;
    readonly state?: string;
}
export function getLogAnalyticsLogAnalyticsEntitiesOutput(args: GetLogAnalyticsLogAnalyticsEntitiesOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetLogAnalyticsLogAnalyticsEntitiesResult> {
    return pulumi.output(args).apply((a: any) => getLogAnalyticsLogAnalyticsEntities(a, opts))
}

/**
 * A collection of arguments for invoking getLogAnalyticsLogAnalyticsEntities.
 */
export interface GetLogAnalyticsLogAnalyticsEntitiesOutputArgs {
    cloudResourceId?: pulumi.Input<string>;
    compartmentId: pulumi.Input<string>;
    entityTypeNames?: pulumi.Input<pulumi.Input<string>[]>;
    filters?: pulumi.Input<pulumi.Input<inputs.GetLogAnalyticsLogAnalyticsEntitiesFilterArgs>[]>;
    hostname?: pulumi.Input<string>;
    hostnameContains?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    isManagementAgentIdNull?: pulumi.Input<string>;
    lifecycleDetailsContains?: pulumi.Input<string>;
    metadataEquals?: pulumi.Input<pulumi.Input<string>[]>;
    name?: pulumi.Input<string>;
    nameContains?: pulumi.Input<string>;
    namespace: pulumi.Input<string>;
    sourceId?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
}
