// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class BastionBastion extends pulumi.CustomResource {
    /**
     * Get an existing BastionBastion resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BastionBastionState, opts?: pulumi.CustomResourceOptions): BastionBastion {
        return new BastionBastion(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/bastionBastion:BastionBastion';

    /**
     * Returns true if the given object is an instance of BastionBastion.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BastionBastion {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BastionBastion.__pulumiType;
    }

    public readonly bastionType!: pulumi.Output<string>;
    public readonly clientCidrBlockAllowLists!: pulumi.Output<string[]>;
    public readonly compartmentId!: pulumi.Output<string>;
    public readonly definedTags!: pulumi.Output<{[key: string]: string}>;
    public readonly dnsProxyStatus!: pulumi.Output<string>;
    public readonly freeformTags!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly lifecycleDetails!: pulumi.Output<string>;
    public readonly maxSessionTtlInSeconds!: pulumi.Output<number>;
    public /*out*/ readonly maxSessionsAllowed!: pulumi.Output<number>;
    public readonly name!: pulumi.Output<string>;
    public readonly phoneBookEntry!: pulumi.Output<string>;
    public /*out*/ readonly privateEndpointIpAddress!: pulumi.Output<string>;
    public /*out*/ readonly state!: pulumi.Output<string>;
    public readonly staticJumpHostIpAddresses!: pulumi.Output<string[]>;
    public /*out*/ readonly systemTags!: pulumi.Output<{[key: string]: string}>;
    public readonly targetSubnetId!: pulumi.Output<string>;
    public /*out*/ readonly targetVcnId!: pulumi.Output<string>;
    public /*out*/ readonly timeCreated!: pulumi.Output<string>;
    public /*out*/ readonly timeUpdated!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.BastionBastionTimeouts | undefined>;

    /**
     * Create a BastionBastion resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BastionBastionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BastionBastionArgs | BastionBastionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BastionBastionState | undefined;
            resourceInputs["bastionType"] = state ? state.bastionType : undefined;
            resourceInputs["clientCidrBlockAllowLists"] = state ? state.clientCidrBlockAllowLists : undefined;
            resourceInputs["compartmentId"] = state ? state.compartmentId : undefined;
            resourceInputs["definedTags"] = state ? state.definedTags : undefined;
            resourceInputs["dnsProxyStatus"] = state ? state.dnsProxyStatus : undefined;
            resourceInputs["freeformTags"] = state ? state.freeformTags : undefined;
            resourceInputs["lifecycleDetails"] = state ? state.lifecycleDetails : undefined;
            resourceInputs["maxSessionTtlInSeconds"] = state ? state.maxSessionTtlInSeconds : undefined;
            resourceInputs["maxSessionsAllowed"] = state ? state.maxSessionsAllowed : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["phoneBookEntry"] = state ? state.phoneBookEntry : undefined;
            resourceInputs["privateEndpointIpAddress"] = state ? state.privateEndpointIpAddress : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["staticJumpHostIpAddresses"] = state ? state.staticJumpHostIpAddresses : undefined;
            resourceInputs["systemTags"] = state ? state.systemTags : undefined;
            resourceInputs["targetSubnetId"] = state ? state.targetSubnetId : undefined;
            resourceInputs["targetVcnId"] = state ? state.targetVcnId : undefined;
            resourceInputs["timeCreated"] = state ? state.timeCreated : undefined;
            resourceInputs["timeUpdated"] = state ? state.timeUpdated : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as BastionBastionArgs | undefined;
            if ((!args || args.bastionType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bastionType'");
            }
            if ((!args || args.compartmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'compartmentId'");
            }
            if ((!args || args.targetSubnetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetSubnetId'");
            }
            resourceInputs["bastionType"] = args ? args.bastionType : undefined;
            resourceInputs["clientCidrBlockAllowLists"] = args ? args.clientCidrBlockAllowLists : undefined;
            resourceInputs["compartmentId"] = args ? args.compartmentId : undefined;
            resourceInputs["definedTags"] = args ? args.definedTags : undefined;
            resourceInputs["dnsProxyStatus"] = args ? args.dnsProxyStatus : undefined;
            resourceInputs["freeformTags"] = args ? args.freeformTags : undefined;
            resourceInputs["maxSessionTtlInSeconds"] = args ? args.maxSessionTtlInSeconds : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["phoneBookEntry"] = args ? args.phoneBookEntry : undefined;
            resourceInputs["staticJumpHostIpAddresses"] = args ? args.staticJumpHostIpAddresses : undefined;
            resourceInputs["targetSubnetId"] = args ? args.targetSubnetId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["lifecycleDetails"] = undefined /*out*/;
            resourceInputs["maxSessionsAllowed"] = undefined /*out*/;
            resourceInputs["privateEndpointIpAddress"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["systemTags"] = undefined /*out*/;
            resourceInputs["targetVcnId"] = undefined /*out*/;
            resourceInputs["timeCreated"] = undefined /*out*/;
            resourceInputs["timeUpdated"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BastionBastion.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering BastionBastion resources.
 */
export interface BastionBastionState {
    bastionType?: pulumi.Input<string>;
    clientCidrBlockAllowLists?: pulumi.Input<pulumi.Input<string>[]>;
    compartmentId?: pulumi.Input<string>;
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    dnsProxyStatus?: pulumi.Input<string>;
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    lifecycleDetails?: pulumi.Input<string>;
    maxSessionTtlInSeconds?: pulumi.Input<number>;
    maxSessionsAllowed?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    phoneBookEntry?: pulumi.Input<string>;
    privateEndpointIpAddress?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    staticJumpHostIpAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    systemTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    targetSubnetId?: pulumi.Input<string>;
    targetVcnId?: pulumi.Input<string>;
    timeCreated?: pulumi.Input<string>;
    timeUpdated?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.BastionBastionTimeouts>;
}

/**
 * The set of arguments for constructing a BastionBastion resource.
 */
export interface BastionBastionArgs {
    bastionType: pulumi.Input<string>;
    clientCidrBlockAllowLists?: pulumi.Input<pulumi.Input<string>[]>;
    compartmentId: pulumi.Input<string>;
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    dnsProxyStatus?: pulumi.Input<string>;
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    maxSessionTtlInSeconds?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    phoneBookEntry?: pulumi.Input<string>;
    staticJumpHostIpAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    targetSubnetId: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.BastionBastionTimeouts>;
}
