// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getMediaServicesSystemMediaWorkflow(args?: GetMediaServicesSystemMediaWorkflowArgs, opts?: pulumi.InvokeOptions): Promise<GetMediaServicesSystemMediaWorkflowResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getMediaServicesSystemMediaWorkflow:getMediaServicesSystemMediaWorkflow", {
        "compartmentId": args.compartmentId,
        "id": args.id,
        "name": args.name,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getMediaServicesSystemMediaWorkflow.
 */
export interface GetMediaServicesSystemMediaWorkflowArgs {
    compartmentId?: string;
    id?: string;
    name?: string;
}

/**
 * A collection of values returned by getMediaServicesSystemMediaWorkflow.
 */
export interface GetMediaServicesSystemMediaWorkflowResult {
    readonly compartmentId?: string;
    readonly id: string;
    readonly items: outputs.GetMediaServicesSystemMediaWorkflowItem[];
    readonly name?: string;
}
export function getMediaServicesSystemMediaWorkflowOutput(args?: GetMediaServicesSystemMediaWorkflowOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetMediaServicesSystemMediaWorkflowResult> {
    return pulumi.output(args).apply((a: any) => getMediaServicesSystemMediaWorkflow(a, opts))
}

/**
 * A collection of arguments for invoking getMediaServicesSystemMediaWorkflow.
 */
export interface GetMediaServicesSystemMediaWorkflowOutputArgs {
    compartmentId?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
}
