// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CoreVirtualCircuit extends pulumi.CustomResource {
    /**
     * Get an existing CoreVirtualCircuit resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CoreVirtualCircuitState, opts?: pulumi.CustomResourceOptions): CoreVirtualCircuit {
        return new CoreVirtualCircuit(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/coreVirtualCircuit:CoreVirtualCircuit';

    /**
     * Returns true if the given object is an instance of CoreVirtualCircuit.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CoreVirtualCircuit {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CoreVirtualCircuit.__pulumiType;
    }

    public readonly bandwidthShapeName!: pulumi.Output<string>;
    public readonly bgpAdminState!: pulumi.Output<string>;
    public /*out*/ readonly bgpIpv6sessionState!: pulumi.Output<string>;
    /**
     * @deprecated Deprecated
     */
    public /*out*/ readonly bgpManagement!: pulumi.Output<string>;
    public /*out*/ readonly bgpSessionState!: pulumi.Output<string>;
    public readonly compartmentId!: pulumi.Output<string>;
    public readonly crossConnectMappings!: pulumi.Output<outputs.CoreVirtualCircuitCrossConnectMapping[] | undefined>;
    public readonly customerAsn!: pulumi.Output<string>;
    /**
     * @deprecated Deprecated
     */
    public readonly customerBgpAsn!: pulumi.Output<number>;
    public readonly definedTags!: pulumi.Output<{[key: string]: string}>;
    public readonly displayName!: pulumi.Output<string>;
    public readonly freeformTags!: pulumi.Output<{[key: string]: string}>;
    public readonly gatewayId!: pulumi.Output<string>;
    public readonly ipMtu!: pulumi.Output<string>;
    public readonly isBfdEnabled!: pulumi.Output<boolean>;
    public readonly isTransportMode!: pulumi.Output<boolean>;
    public /*out*/ readonly oracleBgpAsn!: pulumi.Output<number>;
    public readonly providerServiceId!: pulumi.Output<string>;
    public readonly providerServiceKeyName!: pulumi.Output<string>;
    public /*out*/ readonly providerState!: pulumi.Output<string>;
    public readonly publicPrefixes!: pulumi.Output<outputs.CoreVirtualCircuitPublicPrefix[] | undefined>;
    public /*out*/ readonly referenceComment!: pulumi.Output<string>;
    public readonly region!: pulumi.Output<string>;
    public readonly routingPolicies!: pulumi.Output<string[]>;
    public /*out*/ readonly serviceType!: pulumi.Output<string>;
    public /*out*/ readonly state!: pulumi.Output<string>;
    public /*out*/ readonly timeCreated!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.CoreVirtualCircuitTimeouts | undefined>;
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a CoreVirtualCircuit resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CoreVirtualCircuitArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CoreVirtualCircuitArgs | CoreVirtualCircuitState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CoreVirtualCircuitState | undefined;
            resourceInputs["bandwidthShapeName"] = state ? state.bandwidthShapeName : undefined;
            resourceInputs["bgpAdminState"] = state ? state.bgpAdminState : undefined;
            resourceInputs["bgpIpv6sessionState"] = state ? state.bgpIpv6sessionState : undefined;
            resourceInputs["bgpManagement"] = state ? state.bgpManagement : undefined;
            resourceInputs["bgpSessionState"] = state ? state.bgpSessionState : undefined;
            resourceInputs["compartmentId"] = state ? state.compartmentId : undefined;
            resourceInputs["crossConnectMappings"] = state ? state.crossConnectMappings : undefined;
            resourceInputs["customerAsn"] = state ? state.customerAsn : undefined;
            resourceInputs["customerBgpAsn"] = state ? state.customerBgpAsn : undefined;
            resourceInputs["definedTags"] = state ? state.definedTags : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["freeformTags"] = state ? state.freeformTags : undefined;
            resourceInputs["gatewayId"] = state ? state.gatewayId : undefined;
            resourceInputs["ipMtu"] = state ? state.ipMtu : undefined;
            resourceInputs["isBfdEnabled"] = state ? state.isBfdEnabled : undefined;
            resourceInputs["isTransportMode"] = state ? state.isTransportMode : undefined;
            resourceInputs["oracleBgpAsn"] = state ? state.oracleBgpAsn : undefined;
            resourceInputs["providerServiceId"] = state ? state.providerServiceId : undefined;
            resourceInputs["providerServiceKeyName"] = state ? state.providerServiceKeyName : undefined;
            resourceInputs["providerState"] = state ? state.providerState : undefined;
            resourceInputs["publicPrefixes"] = state ? state.publicPrefixes : undefined;
            resourceInputs["referenceComment"] = state ? state.referenceComment : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["routingPolicies"] = state ? state.routingPolicies : undefined;
            resourceInputs["serviceType"] = state ? state.serviceType : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["timeCreated"] = state ? state.timeCreated : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as CoreVirtualCircuitArgs | undefined;
            if ((!args || args.compartmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'compartmentId'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["bandwidthShapeName"] = args ? args.bandwidthShapeName : undefined;
            resourceInputs["bgpAdminState"] = args ? args.bgpAdminState : undefined;
            resourceInputs["compartmentId"] = args ? args.compartmentId : undefined;
            resourceInputs["crossConnectMappings"] = args ? args.crossConnectMappings : undefined;
            resourceInputs["customerAsn"] = args ? args.customerAsn : undefined;
            resourceInputs["customerBgpAsn"] = args ? args.customerBgpAsn : undefined;
            resourceInputs["definedTags"] = args ? args.definedTags : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["freeformTags"] = args ? args.freeformTags : undefined;
            resourceInputs["gatewayId"] = args ? args.gatewayId : undefined;
            resourceInputs["ipMtu"] = args ? args.ipMtu : undefined;
            resourceInputs["isBfdEnabled"] = args ? args.isBfdEnabled : undefined;
            resourceInputs["isTransportMode"] = args ? args.isTransportMode : undefined;
            resourceInputs["providerServiceId"] = args ? args.providerServiceId : undefined;
            resourceInputs["providerServiceKeyName"] = args ? args.providerServiceKeyName : undefined;
            resourceInputs["publicPrefixes"] = args ? args.publicPrefixes : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["routingPolicies"] = args ? args.routingPolicies : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["bgpIpv6sessionState"] = undefined /*out*/;
            resourceInputs["bgpManagement"] = undefined /*out*/;
            resourceInputs["bgpSessionState"] = undefined /*out*/;
            resourceInputs["oracleBgpAsn"] = undefined /*out*/;
            resourceInputs["providerState"] = undefined /*out*/;
            resourceInputs["referenceComment"] = undefined /*out*/;
            resourceInputs["serviceType"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["timeCreated"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CoreVirtualCircuit.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CoreVirtualCircuit resources.
 */
export interface CoreVirtualCircuitState {
    bandwidthShapeName?: pulumi.Input<string>;
    bgpAdminState?: pulumi.Input<string>;
    bgpIpv6sessionState?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    bgpManagement?: pulumi.Input<string>;
    bgpSessionState?: pulumi.Input<string>;
    compartmentId?: pulumi.Input<string>;
    crossConnectMappings?: pulumi.Input<pulumi.Input<inputs.CoreVirtualCircuitCrossConnectMapping>[]>;
    customerAsn?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    customerBgpAsn?: pulumi.Input<number>;
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    displayName?: pulumi.Input<string>;
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    gatewayId?: pulumi.Input<string>;
    ipMtu?: pulumi.Input<string>;
    isBfdEnabled?: pulumi.Input<boolean>;
    isTransportMode?: pulumi.Input<boolean>;
    oracleBgpAsn?: pulumi.Input<number>;
    providerServiceId?: pulumi.Input<string>;
    providerServiceKeyName?: pulumi.Input<string>;
    providerState?: pulumi.Input<string>;
    publicPrefixes?: pulumi.Input<pulumi.Input<inputs.CoreVirtualCircuitPublicPrefix>[]>;
    referenceComment?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    routingPolicies?: pulumi.Input<pulumi.Input<string>[]>;
    serviceType?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    timeCreated?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.CoreVirtualCircuitTimeouts>;
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CoreVirtualCircuit resource.
 */
export interface CoreVirtualCircuitArgs {
    bandwidthShapeName?: pulumi.Input<string>;
    bgpAdminState?: pulumi.Input<string>;
    compartmentId: pulumi.Input<string>;
    crossConnectMappings?: pulumi.Input<pulumi.Input<inputs.CoreVirtualCircuitCrossConnectMapping>[]>;
    customerAsn?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    customerBgpAsn?: pulumi.Input<number>;
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    displayName?: pulumi.Input<string>;
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    gatewayId?: pulumi.Input<string>;
    ipMtu?: pulumi.Input<string>;
    isBfdEnabled?: pulumi.Input<boolean>;
    isTransportMode?: pulumi.Input<boolean>;
    providerServiceId?: pulumi.Input<string>;
    providerServiceKeyName?: pulumi.Input<string>;
    publicPrefixes?: pulumi.Input<pulumi.Input<inputs.CoreVirtualCircuitPublicPrefix>[]>;
    region?: pulumi.Input<string>;
    routingPolicies?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.CoreVirtualCircuitTimeouts>;
    type: pulumi.Input<string>;
}
