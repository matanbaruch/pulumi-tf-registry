// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class NetworkFirewallNetworkFirewallPolicyDecryptionProfile extends pulumi.CustomResource {
    /**
     * Get an existing NetworkFirewallNetworkFirewallPolicyDecryptionProfile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetworkFirewallNetworkFirewallPolicyDecryptionProfileState, opts?: pulumi.CustomResourceOptions): NetworkFirewallNetworkFirewallPolicyDecryptionProfile {
        return new NetworkFirewallNetworkFirewallPolicyDecryptionProfile(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/networkFirewallNetworkFirewallPolicyDecryptionProfile:NetworkFirewallNetworkFirewallPolicyDecryptionProfile';

    /**
     * Returns true if the given object is an instance of NetworkFirewallNetworkFirewallPolicyDecryptionProfile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NetworkFirewallNetworkFirewallPolicyDecryptionProfile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NetworkFirewallNetworkFirewallPolicyDecryptionProfile.__pulumiType;
    }

    public readonly areCertificateExtensionsRestricted!: pulumi.Output<boolean>;
    public readonly isAutoIncludeAltName!: pulumi.Output<boolean>;
    public readonly isExpiredCertificateBlocked!: pulumi.Output<boolean>;
    public readonly isOutOfCapacityBlocked!: pulumi.Output<boolean>;
    public readonly isRevocationStatusTimeoutBlocked!: pulumi.Output<boolean>;
    public readonly isUnknownRevocationStatusBlocked!: pulumi.Output<boolean>;
    public readonly isUnsupportedCipherBlocked!: pulumi.Output<boolean>;
    public readonly isUnsupportedVersionBlocked!: pulumi.Output<boolean>;
    public readonly isUntrustedIssuerBlocked!: pulumi.Output<boolean>;
    public readonly name!: pulumi.Output<string>;
    public readonly networkFirewallPolicyId!: pulumi.Output<string>;
    public /*out*/ readonly parentResourceId!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.NetworkFirewallNetworkFirewallPolicyDecryptionProfileTimeouts | undefined>;
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a NetworkFirewallNetworkFirewallPolicyDecryptionProfile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NetworkFirewallNetworkFirewallPolicyDecryptionProfileArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NetworkFirewallNetworkFirewallPolicyDecryptionProfileArgs | NetworkFirewallNetworkFirewallPolicyDecryptionProfileState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NetworkFirewallNetworkFirewallPolicyDecryptionProfileState | undefined;
            resourceInputs["areCertificateExtensionsRestricted"] = state ? state.areCertificateExtensionsRestricted : undefined;
            resourceInputs["isAutoIncludeAltName"] = state ? state.isAutoIncludeAltName : undefined;
            resourceInputs["isExpiredCertificateBlocked"] = state ? state.isExpiredCertificateBlocked : undefined;
            resourceInputs["isOutOfCapacityBlocked"] = state ? state.isOutOfCapacityBlocked : undefined;
            resourceInputs["isRevocationStatusTimeoutBlocked"] = state ? state.isRevocationStatusTimeoutBlocked : undefined;
            resourceInputs["isUnknownRevocationStatusBlocked"] = state ? state.isUnknownRevocationStatusBlocked : undefined;
            resourceInputs["isUnsupportedCipherBlocked"] = state ? state.isUnsupportedCipherBlocked : undefined;
            resourceInputs["isUnsupportedVersionBlocked"] = state ? state.isUnsupportedVersionBlocked : undefined;
            resourceInputs["isUntrustedIssuerBlocked"] = state ? state.isUntrustedIssuerBlocked : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkFirewallPolicyId"] = state ? state.networkFirewallPolicyId : undefined;
            resourceInputs["parentResourceId"] = state ? state.parentResourceId : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as NetworkFirewallNetworkFirewallPolicyDecryptionProfileArgs | undefined;
            if ((!args || args.networkFirewallPolicyId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'networkFirewallPolicyId'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["areCertificateExtensionsRestricted"] = args ? args.areCertificateExtensionsRestricted : undefined;
            resourceInputs["isAutoIncludeAltName"] = args ? args.isAutoIncludeAltName : undefined;
            resourceInputs["isExpiredCertificateBlocked"] = args ? args.isExpiredCertificateBlocked : undefined;
            resourceInputs["isOutOfCapacityBlocked"] = args ? args.isOutOfCapacityBlocked : undefined;
            resourceInputs["isRevocationStatusTimeoutBlocked"] = args ? args.isRevocationStatusTimeoutBlocked : undefined;
            resourceInputs["isUnknownRevocationStatusBlocked"] = args ? args.isUnknownRevocationStatusBlocked : undefined;
            resourceInputs["isUnsupportedCipherBlocked"] = args ? args.isUnsupportedCipherBlocked : undefined;
            resourceInputs["isUnsupportedVersionBlocked"] = args ? args.isUnsupportedVersionBlocked : undefined;
            resourceInputs["isUntrustedIssuerBlocked"] = args ? args.isUntrustedIssuerBlocked : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkFirewallPolicyId"] = args ? args.networkFirewallPolicyId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["parentResourceId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NetworkFirewallNetworkFirewallPolicyDecryptionProfile.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering NetworkFirewallNetworkFirewallPolicyDecryptionProfile resources.
 */
export interface NetworkFirewallNetworkFirewallPolicyDecryptionProfileState {
    areCertificateExtensionsRestricted?: pulumi.Input<boolean>;
    isAutoIncludeAltName?: pulumi.Input<boolean>;
    isExpiredCertificateBlocked?: pulumi.Input<boolean>;
    isOutOfCapacityBlocked?: pulumi.Input<boolean>;
    isRevocationStatusTimeoutBlocked?: pulumi.Input<boolean>;
    isUnknownRevocationStatusBlocked?: pulumi.Input<boolean>;
    isUnsupportedCipherBlocked?: pulumi.Input<boolean>;
    isUnsupportedVersionBlocked?: pulumi.Input<boolean>;
    isUntrustedIssuerBlocked?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    networkFirewallPolicyId?: pulumi.Input<string>;
    parentResourceId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.NetworkFirewallNetworkFirewallPolicyDecryptionProfileTimeouts>;
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NetworkFirewallNetworkFirewallPolicyDecryptionProfile resource.
 */
export interface NetworkFirewallNetworkFirewallPolicyDecryptionProfileArgs {
    areCertificateExtensionsRestricted?: pulumi.Input<boolean>;
    isAutoIncludeAltName?: pulumi.Input<boolean>;
    isExpiredCertificateBlocked?: pulumi.Input<boolean>;
    isOutOfCapacityBlocked?: pulumi.Input<boolean>;
    isRevocationStatusTimeoutBlocked?: pulumi.Input<boolean>;
    isUnknownRevocationStatusBlocked?: pulumi.Input<boolean>;
    isUnsupportedCipherBlocked?: pulumi.Input<boolean>;
    isUnsupportedVersionBlocked?: pulumi.Input<boolean>;
    isUntrustedIssuerBlocked?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    networkFirewallPolicyId: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.NetworkFirewallNetworkFirewallPolicyDecryptionProfileTimeouts>;
    type: pulumi.Input<string>;
}
