// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getCoreFastConnectProviderServiceKey(args: GetCoreFastConnectProviderServiceKeyArgs, opts?: pulumi.InvokeOptions): Promise<GetCoreFastConnectProviderServiceKeyResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getCoreFastConnectProviderServiceKey:getCoreFastConnectProviderServiceKey", {
        "id": args.id,
        "providerServiceId": args.providerServiceId,
        "providerServiceKeyName": args.providerServiceKeyName,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getCoreFastConnectProviderServiceKey.
 */
export interface GetCoreFastConnectProviderServiceKeyArgs {
    id?: string;
    providerServiceId: string;
    providerServiceKeyName: string;
}

/**
 * A collection of values returned by getCoreFastConnectProviderServiceKey.
 */
export interface GetCoreFastConnectProviderServiceKeyResult {
    readonly bandwidthShapeName: string;
    readonly id: string;
    readonly name: string;
    readonly peeringLocation: string;
    readonly providerServiceId: string;
    readonly providerServiceKeyName: string;
}
export function getCoreFastConnectProviderServiceKeyOutput(args: GetCoreFastConnectProviderServiceKeyOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetCoreFastConnectProviderServiceKeyResult> {
    return pulumi.output(args).apply((a: any) => getCoreFastConnectProviderServiceKey(a, opts))
}

/**
 * A collection of arguments for invoking getCoreFastConnectProviderServiceKey.
 */
export interface GetCoreFastConnectProviderServiceKeyOutputArgs {
    id?: pulumi.Input<string>;
    providerServiceId: pulumi.Input<string>;
    providerServiceKeyName: pulumi.Input<string>;
}
