// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class FileStorageExport extends pulumi.CustomResource {
    /**
     * Get an existing FileStorageExport resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FileStorageExportState, opts?: pulumi.CustomResourceOptions): FileStorageExport {
        return new FileStorageExport(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/fileStorageExport:FileStorageExport';

    /**
     * Returns true if the given object is an instance of FileStorageExport.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FileStorageExport {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FileStorageExport.__pulumiType;
    }

    public readonly exportOptions!: pulumi.Output<outputs.FileStorageExportExportOption[] | undefined>;
    public readonly exportSetId!: pulumi.Output<string>;
    public readonly fileSystemId!: pulumi.Output<string>;
    public readonly isIdmapGroupsForSysAuth!: pulumi.Output<boolean>;
    public readonly path!: pulumi.Output<string>;
    public /*out*/ readonly state!: pulumi.Output<string>;
    public /*out*/ readonly timeCreated!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.FileStorageExportTimeouts | undefined>;

    /**
     * Create a FileStorageExport resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FileStorageExportArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FileStorageExportArgs | FileStorageExportState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FileStorageExportState | undefined;
            resourceInputs["exportOptions"] = state ? state.exportOptions : undefined;
            resourceInputs["exportSetId"] = state ? state.exportSetId : undefined;
            resourceInputs["fileSystemId"] = state ? state.fileSystemId : undefined;
            resourceInputs["isIdmapGroupsForSysAuth"] = state ? state.isIdmapGroupsForSysAuth : undefined;
            resourceInputs["path"] = state ? state.path : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["timeCreated"] = state ? state.timeCreated : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as FileStorageExportArgs | undefined;
            if ((!args || args.exportSetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'exportSetId'");
            }
            if ((!args || args.fileSystemId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'fileSystemId'");
            }
            if ((!args || args.path === undefined) && !opts.urn) {
                throw new Error("Missing required property 'path'");
            }
            resourceInputs["exportOptions"] = args ? args.exportOptions : undefined;
            resourceInputs["exportSetId"] = args ? args.exportSetId : undefined;
            resourceInputs["fileSystemId"] = args ? args.fileSystemId : undefined;
            resourceInputs["isIdmapGroupsForSysAuth"] = args ? args.isIdmapGroupsForSysAuth : undefined;
            resourceInputs["path"] = args ? args.path : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["timeCreated"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FileStorageExport.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering FileStorageExport resources.
 */
export interface FileStorageExportState {
    exportOptions?: pulumi.Input<pulumi.Input<inputs.FileStorageExportExportOption>[]>;
    exportSetId?: pulumi.Input<string>;
    fileSystemId?: pulumi.Input<string>;
    isIdmapGroupsForSysAuth?: pulumi.Input<boolean>;
    path?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    timeCreated?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.FileStorageExportTimeouts>;
}

/**
 * The set of arguments for constructing a FileStorageExport resource.
 */
export interface FileStorageExportArgs {
    exportOptions?: pulumi.Input<pulumi.Input<inputs.FileStorageExportExportOption>[]>;
    exportSetId: pulumi.Input<string>;
    fileSystemId: pulumi.Input<string>;
    isIdmapGroupsForSysAuth?: pulumi.Input<boolean>;
    path: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.FileStorageExportTimeouts>;
}
