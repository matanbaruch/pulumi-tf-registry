// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getIdentityDomainsMyUserDbCredential(args: GetIdentityDomainsMyUserDbCredentialArgs, opts?: pulumi.InvokeOptions): Promise<GetIdentityDomainsMyUserDbCredentialResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getIdentityDomainsMyUserDbCredential:getIdentityDomainsMyUserDbCredential", {
        "authorization": args.authorization,
        "idcsEndpoint": args.idcsEndpoint,
        "myUserDbCredentialId": args.myUserDbCredentialId,
        "resourceTypeSchemaVersion": args.resourceTypeSchemaVersion,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getIdentityDomainsMyUserDbCredential.
 */
export interface GetIdentityDomainsMyUserDbCredentialArgs {
    authorization?: string;
    idcsEndpoint: string;
    myUserDbCredentialId: string;
    resourceTypeSchemaVersion?: string;
}

/**
 * A collection of values returned by getIdentityDomainsMyUserDbCredential.
 */
export interface GetIdentityDomainsMyUserDbCredentialResult {
    readonly authorization?: string;
    readonly compartmentOcid: string;
    readonly dbPassword: string;
    readonly deleteInProgress: boolean;
    readonly description: string;
    readonly domainOcid: string;
    readonly expired: boolean;
    readonly expiresOn: string;
    readonly id: string;
    readonly idcsCreatedBies: outputs.GetIdentityDomainsMyUserDbCredentialIdcsCreatedBy[];
    readonly idcsEndpoint: string;
    readonly idcsLastModifiedBies: outputs.GetIdentityDomainsMyUserDbCredentialIdcsLastModifiedBy[];
    readonly idcsLastUpgradedInRelease: string;
    readonly idcsPreventedOperations: string[];
    readonly lastSetDate: string;
    readonly metas: outputs.GetIdentityDomainsMyUserDbCredentialMeta[];
    readonly mixedDbPassword: string;
    readonly mixedSalt: string;
    readonly myUserDbCredentialId: string;
    readonly name: string;
    readonly ocid: string;
    readonly resourceTypeSchemaVersion?: string;
    readonly salt: string;
    readonly schemas: string[];
    readonly status: string;
    readonly tags: outputs.GetIdentityDomainsMyUserDbCredentialTag[];
    readonly tenancyOcid: string;
    readonly users: outputs.GetIdentityDomainsMyUserDbCredentialUser[];
}
export function getIdentityDomainsMyUserDbCredentialOutput(args: GetIdentityDomainsMyUserDbCredentialOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetIdentityDomainsMyUserDbCredentialResult> {
    return pulumi.output(args).apply((a: any) => getIdentityDomainsMyUserDbCredential(a, opts))
}

/**
 * A collection of arguments for invoking getIdentityDomainsMyUserDbCredential.
 */
export interface GetIdentityDomainsMyUserDbCredentialOutputArgs {
    authorization?: pulumi.Input<string>;
    idcsEndpoint: pulumi.Input<string>;
    myUserDbCredentialId: pulumi.Input<string>;
    resourceTypeSchemaVersion?: pulumi.Input<string>;
}
