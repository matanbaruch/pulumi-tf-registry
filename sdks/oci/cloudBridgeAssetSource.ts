// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CloudBridgeAssetSource extends pulumi.CustomResource {
    /**
     * Get an existing CloudBridgeAssetSource resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CloudBridgeAssetSourceState, opts?: pulumi.CustomResourceOptions): CloudBridgeAssetSource {
        return new CloudBridgeAssetSource(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/cloudBridgeAssetSource:CloudBridgeAssetSource';

    /**
     * Returns true if the given object is an instance of CloudBridgeAssetSource.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CloudBridgeAssetSource {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CloudBridgeAssetSource.__pulumiType;
    }

    public readonly areHistoricalMetricsCollected!: pulumi.Output<boolean>;
    public readonly areRealtimeMetricsCollected!: pulumi.Output<boolean>;
    public readonly assetsCompartmentId!: pulumi.Output<string>;
    public readonly compartmentId!: pulumi.Output<string>;
    public readonly definedTags!: pulumi.Output<{[key: string]: string}>;
    public readonly discoveryCredentials!: pulumi.Output<outputs.CloudBridgeAssetSourceDiscoveryCredentials>;
    public readonly discoveryScheduleId!: pulumi.Output<string>;
    public readonly displayName!: pulumi.Output<string>;
    public readonly environmentId!: pulumi.Output<string>;
    public readonly freeformTags!: pulumi.Output<{[key: string]: string}>;
    public readonly inventoryId!: pulumi.Output<string>;
    public /*out*/ readonly lifecycleDetails!: pulumi.Output<string>;
    public readonly replicationCredentials!: pulumi.Output<outputs.CloudBridgeAssetSourceReplicationCredentials | undefined>;
    public /*out*/ readonly state!: pulumi.Output<string>;
    public readonly systemTags!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly timeCreated!: pulumi.Output<string>;
    public /*out*/ readonly timeUpdated!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.CloudBridgeAssetSourceTimeouts | undefined>;
    public readonly type!: pulumi.Output<string>;
    public readonly vcenterEndpoint!: pulumi.Output<string>;

    /**
     * Create a CloudBridgeAssetSource resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CloudBridgeAssetSourceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CloudBridgeAssetSourceArgs | CloudBridgeAssetSourceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CloudBridgeAssetSourceState | undefined;
            resourceInputs["areHistoricalMetricsCollected"] = state ? state.areHistoricalMetricsCollected : undefined;
            resourceInputs["areRealtimeMetricsCollected"] = state ? state.areRealtimeMetricsCollected : undefined;
            resourceInputs["assetsCompartmentId"] = state ? state.assetsCompartmentId : undefined;
            resourceInputs["compartmentId"] = state ? state.compartmentId : undefined;
            resourceInputs["definedTags"] = state ? state.definedTags : undefined;
            resourceInputs["discoveryCredentials"] = state ? state.discoveryCredentials : undefined;
            resourceInputs["discoveryScheduleId"] = state ? state.discoveryScheduleId : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["environmentId"] = state ? state.environmentId : undefined;
            resourceInputs["freeformTags"] = state ? state.freeformTags : undefined;
            resourceInputs["inventoryId"] = state ? state.inventoryId : undefined;
            resourceInputs["lifecycleDetails"] = state ? state.lifecycleDetails : undefined;
            resourceInputs["replicationCredentials"] = state ? state.replicationCredentials : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["systemTags"] = state ? state.systemTags : undefined;
            resourceInputs["timeCreated"] = state ? state.timeCreated : undefined;
            resourceInputs["timeUpdated"] = state ? state.timeUpdated : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["vcenterEndpoint"] = state ? state.vcenterEndpoint : undefined;
        } else {
            const args = argsOrState as CloudBridgeAssetSourceArgs | undefined;
            if ((!args || args.assetsCompartmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'assetsCompartmentId'");
            }
            if ((!args || args.compartmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'compartmentId'");
            }
            if ((!args || args.discoveryCredentials === undefined) && !opts.urn) {
                throw new Error("Missing required property 'discoveryCredentials'");
            }
            if ((!args || args.environmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'environmentId'");
            }
            if ((!args || args.inventoryId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'inventoryId'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            if ((!args || args.vcenterEndpoint === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vcenterEndpoint'");
            }
            resourceInputs["areHistoricalMetricsCollected"] = args ? args.areHistoricalMetricsCollected : undefined;
            resourceInputs["areRealtimeMetricsCollected"] = args ? args.areRealtimeMetricsCollected : undefined;
            resourceInputs["assetsCompartmentId"] = args ? args.assetsCompartmentId : undefined;
            resourceInputs["compartmentId"] = args ? args.compartmentId : undefined;
            resourceInputs["definedTags"] = args ? args.definedTags : undefined;
            resourceInputs["discoveryCredentials"] = args ? args.discoveryCredentials : undefined;
            resourceInputs["discoveryScheduleId"] = args ? args.discoveryScheduleId : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["environmentId"] = args ? args.environmentId : undefined;
            resourceInputs["freeformTags"] = args ? args.freeformTags : undefined;
            resourceInputs["inventoryId"] = args ? args.inventoryId : undefined;
            resourceInputs["replicationCredentials"] = args ? args.replicationCredentials : undefined;
            resourceInputs["systemTags"] = args ? args.systemTags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["vcenterEndpoint"] = args ? args.vcenterEndpoint : undefined;
            resourceInputs["lifecycleDetails"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["timeCreated"] = undefined /*out*/;
            resourceInputs["timeUpdated"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CloudBridgeAssetSource.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CloudBridgeAssetSource resources.
 */
export interface CloudBridgeAssetSourceState {
    areHistoricalMetricsCollected?: pulumi.Input<boolean>;
    areRealtimeMetricsCollected?: pulumi.Input<boolean>;
    assetsCompartmentId?: pulumi.Input<string>;
    compartmentId?: pulumi.Input<string>;
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    discoveryCredentials?: pulumi.Input<inputs.CloudBridgeAssetSourceDiscoveryCredentials>;
    discoveryScheduleId?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    environmentId?: pulumi.Input<string>;
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    inventoryId?: pulumi.Input<string>;
    lifecycleDetails?: pulumi.Input<string>;
    replicationCredentials?: pulumi.Input<inputs.CloudBridgeAssetSourceReplicationCredentials>;
    state?: pulumi.Input<string>;
    systemTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeCreated?: pulumi.Input<string>;
    timeUpdated?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.CloudBridgeAssetSourceTimeouts>;
    type?: pulumi.Input<string>;
    vcenterEndpoint?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CloudBridgeAssetSource resource.
 */
export interface CloudBridgeAssetSourceArgs {
    areHistoricalMetricsCollected?: pulumi.Input<boolean>;
    areRealtimeMetricsCollected?: pulumi.Input<boolean>;
    assetsCompartmentId: pulumi.Input<string>;
    compartmentId: pulumi.Input<string>;
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    discoveryCredentials: pulumi.Input<inputs.CloudBridgeAssetSourceDiscoveryCredentials>;
    discoveryScheduleId?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    environmentId: pulumi.Input<string>;
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    inventoryId: pulumi.Input<string>;
    replicationCredentials?: pulumi.Input<inputs.CloudBridgeAssetSourceReplicationCredentials>;
    systemTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.CloudBridgeAssetSourceTimeouts>;
    type: pulumi.Input<string>;
    vcenterEndpoint: pulumi.Input<string>;
}
