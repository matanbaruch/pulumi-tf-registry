// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class StackMonitoringMonitoredResourcesAssociateMonitoredResource extends pulumi.CustomResource {
    /**
     * Get an existing StackMonitoringMonitoredResourcesAssociateMonitoredResource resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StackMonitoringMonitoredResourcesAssociateMonitoredResourceState, opts?: pulumi.CustomResourceOptions): StackMonitoringMonitoredResourcesAssociateMonitoredResource {
        return new StackMonitoringMonitoredResourcesAssociateMonitoredResource(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/stackMonitoringMonitoredResourcesAssociateMonitoredResource:StackMonitoringMonitoredResourcesAssociateMonitoredResource';

    /**
     * Returns true if the given object is an instance of StackMonitoringMonitoredResourcesAssociateMonitoredResource.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is StackMonitoringMonitoredResourcesAssociateMonitoredResource {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StackMonitoringMonitoredResourcesAssociateMonitoredResource.__pulumiType;
    }

    public readonly associationType!: pulumi.Output<string>;
    public /*out*/ readonly category!: pulumi.Output<string>;
    public readonly compartmentId!: pulumi.Output<string>;
    public /*out*/ readonly destinationResourceDetails!: pulumi.Output<outputs.StackMonitoringMonitoredResourcesAssociateMonitoredResourceDestinationResourceDetail[]>;
    public readonly destinationResourceId!: pulumi.Output<string>;
    public /*out*/ readonly sourceResourceDetails!: pulumi.Output<outputs.StackMonitoringMonitoredResourcesAssociateMonitoredResourceSourceResourceDetail[]>;
    public readonly sourceResourceId!: pulumi.Output<string>;
    public /*out*/ readonly tenantId!: pulumi.Output<string>;
    public /*out*/ readonly timeCreated!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.StackMonitoringMonitoredResourcesAssociateMonitoredResourceTimeouts | undefined>;

    /**
     * Create a StackMonitoringMonitoredResourcesAssociateMonitoredResource resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StackMonitoringMonitoredResourcesAssociateMonitoredResourceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: StackMonitoringMonitoredResourcesAssociateMonitoredResourceArgs | StackMonitoringMonitoredResourcesAssociateMonitoredResourceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as StackMonitoringMonitoredResourcesAssociateMonitoredResourceState | undefined;
            resourceInputs["associationType"] = state ? state.associationType : undefined;
            resourceInputs["category"] = state ? state.category : undefined;
            resourceInputs["compartmentId"] = state ? state.compartmentId : undefined;
            resourceInputs["destinationResourceDetails"] = state ? state.destinationResourceDetails : undefined;
            resourceInputs["destinationResourceId"] = state ? state.destinationResourceId : undefined;
            resourceInputs["sourceResourceDetails"] = state ? state.sourceResourceDetails : undefined;
            resourceInputs["sourceResourceId"] = state ? state.sourceResourceId : undefined;
            resourceInputs["tenantId"] = state ? state.tenantId : undefined;
            resourceInputs["timeCreated"] = state ? state.timeCreated : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as StackMonitoringMonitoredResourcesAssociateMonitoredResourceArgs | undefined;
            if ((!args || args.associationType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'associationType'");
            }
            if ((!args || args.compartmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'compartmentId'");
            }
            if ((!args || args.destinationResourceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'destinationResourceId'");
            }
            if ((!args || args.sourceResourceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceResourceId'");
            }
            resourceInputs["associationType"] = args ? args.associationType : undefined;
            resourceInputs["compartmentId"] = args ? args.compartmentId : undefined;
            resourceInputs["destinationResourceId"] = args ? args.destinationResourceId : undefined;
            resourceInputs["sourceResourceId"] = args ? args.sourceResourceId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["category"] = undefined /*out*/;
            resourceInputs["destinationResourceDetails"] = undefined /*out*/;
            resourceInputs["sourceResourceDetails"] = undefined /*out*/;
            resourceInputs["tenantId"] = undefined /*out*/;
            resourceInputs["timeCreated"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(StackMonitoringMonitoredResourcesAssociateMonitoredResource.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering StackMonitoringMonitoredResourcesAssociateMonitoredResource resources.
 */
export interface StackMonitoringMonitoredResourcesAssociateMonitoredResourceState {
    associationType?: pulumi.Input<string>;
    category?: pulumi.Input<string>;
    compartmentId?: pulumi.Input<string>;
    destinationResourceDetails?: pulumi.Input<pulumi.Input<inputs.StackMonitoringMonitoredResourcesAssociateMonitoredResourceDestinationResourceDetail>[]>;
    destinationResourceId?: pulumi.Input<string>;
    sourceResourceDetails?: pulumi.Input<pulumi.Input<inputs.StackMonitoringMonitoredResourcesAssociateMonitoredResourceSourceResourceDetail>[]>;
    sourceResourceId?: pulumi.Input<string>;
    tenantId?: pulumi.Input<string>;
    timeCreated?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.StackMonitoringMonitoredResourcesAssociateMonitoredResourceTimeouts>;
}

/**
 * The set of arguments for constructing a StackMonitoringMonitoredResourcesAssociateMonitoredResource resource.
 */
export interface StackMonitoringMonitoredResourcesAssociateMonitoredResourceArgs {
    associationType: pulumi.Input<string>;
    compartmentId: pulumi.Input<string>;
    destinationResourceId: pulumi.Input<string>;
    sourceResourceId: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.StackMonitoringMonitoredResourcesAssociateMonitoredResourceTimeouts>;
}
