// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DatacatalogConnection extends pulumi.CustomResource {
    /**
     * Get an existing DatacatalogConnection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DatacatalogConnectionState, opts?: pulumi.CustomResourceOptions): DatacatalogConnection {
        return new DatacatalogConnection(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/datacatalogConnection:DatacatalogConnection';

    /**
     * Returns true if the given object is an instance of DatacatalogConnection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DatacatalogConnection {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DatacatalogConnection.__pulumiType;
    }

    public readonly catalogId!: pulumi.Output<string>;
    public /*out*/ readonly createdById!: pulumi.Output<string>;
    public readonly dataAssetKey!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string>;
    public readonly displayName!: pulumi.Output<string>;
    public readonly encProperties!: pulumi.Output<{[key: string]: string} | undefined>;
    public /*out*/ readonly externalKey!: pulumi.Output<string>;
    public readonly isDefault!: pulumi.Output<boolean>;
    public /*out*/ readonly key!: pulumi.Output<string>;
    public readonly properties!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly state!: pulumi.Output<string>;
    public /*out*/ readonly timeCreated!: pulumi.Output<string>;
    public /*out*/ readonly timeStatusUpdated!: pulumi.Output<string>;
    public /*out*/ readonly timeUpdated!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.DatacatalogConnectionTimeouts | undefined>;
    public readonly typeKey!: pulumi.Output<string>;
    public /*out*/ readonly updatedById!: pulumi.Output<string>;
    public /*out*/ readonly uri!: pulumi.Output<string>;

    /**
     * Create a DatacatalogConnection resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatacatalogConnectionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DatacatalogConnectionArgs | DatacatalogConnectionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DatacatalogConnectionState | undefined;
            resourceInputs["catalogId"] = state ? state.catalogId : undefined;
            resourceInputs["createdById"] = state ? state.createdById : undefined;
            resourceInputs["dataAssetKey"] = state ? state.dataAssetKey : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["encProperties"] = state ? state.encProperties : undefined;
            resourceInputs["externalKey"] = state ? state.externalKey : undefined;
            resourceInputs["isDefault"] = state ? state.isDefault : undefined;
            resourceInputs["key"] = state ? state.key : undefined;
            resourceInputs["properties"] = state ? state.properties : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["timeCreated"] = state ? state.timeCreated : undefined;
            resourceInputs["timeStatusUpdated"] = state ? state.timeStatusUpdated : undefined;
            resourceInputs["timeUpdated"] = state ? state.timeUpdated : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["typeKey"] = state ? state.typeKey : undefined;
            resourceInputs["updatedById"] = state ? state.updatedById : undefined;
            resourceInputs["uri"] = state ? state.uri : undefined;
        } else {
            const args = argsOrState as DatacatalogConnectionArgs | undefined;
            if ((!args || args.catalogId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'catalogId'");
            }
            if ((!args || args.dataAssetKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dataAssetKey'");
            }
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if ((!args || args.properties === undefined) && !opts.urn) {
                throw new Error("Missing required property 'properties'");
            }
            if ((!args || args.typeKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'typeKey'");
            }
            resourceInputs["catalogId"] = args ? args.catalogId : undefined;
            resourceInputs["dataAssetKey"] = args ? args.dataAssetKey : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["encProperties"] = args?.encProperties ? pulumi.secret(args.encProperties) : undefined;
            resourceInputs["isDefault"] = args ? args.isDefault : undefined;
            resourceInputs["properties"] = args ? args.properties : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["typeKey"] = args ? args.typeKey : undefined;
            resourceInputs["createdById"] = undefined /*out*/;
            resourceInputs["externalKey"] = undefined /*out*/;
            resourceInputs["key"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["timeCreated"] = undefined /*out*/;
            resourceInputs["timeStatusUpdated"] = undefined /*out*/;
            resourceInputs["timeUpdated"] = undefined /*out*/;
            resourceInputs["updatedById"] = undefined /*out*/;
            resourceInputs["uri"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["encProperties"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(DatacatalogConnection.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DatacatalogConnection resources.
 */
export interface DatacatalogConnectionState {
    catalogId?: pulumi.Input<string>;
    createdById?: pulumi.Input<string>;
    dataAssetKey?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    encProperties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    externalKey?: pulumi.Input<string>;
    isDefault?: pulumi.Input<boolean>;
    key?: pulumi.Input<string>;
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    state?: pulumi.Input<string>;
    timeCreated?: pulumi.Input<string>;
    timeStatusUpdated?: pulumi.Input<string>;
    timeUpdated?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.DatacatalogConnectionTimeouts>;
    typeKey?: pulumi.Input<string>;
    updatedById?: pulumi.Input<string>;
    uri?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DatacatalogConnection resource.
 */
export interface DatacatalogConnectionArgs {
    catalogId: pulumi.Input<string>;
    dataAssetKey: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    displayName: pulumi.Input<string>;
    encProperties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    isDefault?: pulumi.Input<boolean>;
    properties: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.DatacatalogConnectionTimeouts>;
    typeKey: pulumi.Input<string>;
}
