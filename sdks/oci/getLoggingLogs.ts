// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getLoggingLogs(args: GetLoggingLogsArgs, opts?: pulumi.InvokeOptions): Promise<GetLoggingLogsResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getLoggingLogs:getLoggingLogs", {
        "displayName": args.displayName,
        "filters": args.filters,
        "id": args.id,
        "logGroupId": args.logGroupId,
        "logType": args.logType,
        "sourceResource": args.sourceResource,
        "sourceService": args.sourceService,
        "state": args.state,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getLoggingLogs.
 */
export interface GetLoggingLogsArgs {
    displayName?: string;
    filters?: inputs.GetLoggingLogsFilter[];
    id?: string;
    logGroupId: string;
    logType?: string;
    sourceResource?: string;
    sourceService?: string;
    state?: string;
}

/**
 * A collection of values returned by getLoggingLogs.
 */
export interface GetLoggingLogsResult {
    readonly displayName?: string;
    readonly filters?: outputs.GetLoggingLogsFilter[];
    readonly id: string;
    readonly logGroupId: string;
    readonly logType?: string;
    readonly logs: outputs.GetLoggingLogsLog[];
    readonly sourceResource?: string;
    readonly sourceService?: string;
    readonly state?: string;
}
export function getLoggingLogsOutput(args: GetLoggingLogsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetLoggingLogsResult> {
    return pulumi.output(args).apply((a: any) => getLoggingLogs(a, opts))
}

/**
 * A collection of arguments for invoking getLoggingLogs.
 */
export interface GetLoggingLogsOutputArgs {
    displayName?: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.GetLoggingLogsFilterArgs>[]>;
    id?: pulumi.Input<string>;
    logGroupId: pulumi.Input<string>;
    logType?: pulumi.Input<string>;
    sourceResource?: pulumi.Input<string>;
    sourceService?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
}
