// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getDatabaseExadataInfrastructure(args: GetDatabaseExadataInfrastructureArgs, opts?: pulumi.InvokeOptions): Promise<GetDatabaseExadataInfrastructureResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getDatabaseExadataInfrastructure:getDatabaseExadataInfrastructure", {
        "exadataInfrastructureId": args.exadataInfrastructureId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getDatabaseExadataInfrastructure.
 */
export interface GetDatabaseExadataInfrastructureArgs {
    exadataInfrastructureId: string;
}

/**
 * A collection of values returned by getDatabaseExadataInfrastructure.
 */
export interface GetDatabaseExadataInfrastructureResult {
    readonly activatedStorageCount: number;
    readonly activationFile: string;
    readonly additionalComputeCount: number;
    readonly additionalComputeSystemModel: string;
    readonly additionalStorageCount: number;
    readonly adminNetworkCidr: string;
    readonly availabilityDomain: string;
    readonly cloudControlPlaneServer1: string;
    readonly cloudControlPlaneServer2: string;
    readonly compartmentId: string;
    readonly computeCount: number;
    readonly contacts: outputs.GetDatabaseExadataInfrastructureContact[];
    readonly corporateProxy: string;
    readonly cpusEnabled: number;
    readonly createAsync: boolean;
    readonly csiNumber: string;
    readonly dataStorageSizeInTbs: number;
    readonly dbNodeStorageSizeInGbs: number;
    readonly dbServerVersion: string;
    readonly definedFileSystemConfigurations: outputs.GetDatabaseExadataInfrastructureDefinedFileSystemConfiguration[];
    readonly definedTags: {[key: string]: string};
    readonly displayName: string;
    readonly dnsServers: string[];
    readonly exadataInfrastructureId: string;
    readonly freeformTags: {[key: string]: string};
    readonly gateway: string;
    readonly id: string;
    readonly infiniBandNetworkCidr: string;
    readonly isCpsOfflineReportEnabled: boolean;
    readonly isMultiRackDeployment: boolean;
    readonly lifecycleDetails: string;
    readonly maintenanceSloStatus: string;
    readonly maintenanceWindows: outputs.GetDatabaseExadataInfrastructureMaintenanceWindow[];
    readonly maxCpuCount: number;
    readonly maxDataStorageInTbs: number;
    readonly maxDbNodeStorageInGbs: number;
    readonly maxMemoryInGbs: number;
    readonly memorySizeInGbs: number;
    readonly monthlyDbServerVersion: string;
    readonly multiRackConfigurationFile: string;
    readonly netmask: string;
    readonly networkBondingModeDetails: outputs.GetDatabaseExadataInfrastructureNetworkBondingModeDetail[];
    readonly ntpServers: string[];
    readonly rackSerialNumber: string;
    readonly shape: string;
    readonly state: string;
    readonly storageCount: number;
    readonly storageServerVersion: string;
    readonly timeCreated: string;
    readonly timeZone: string;
}
export function getDatabaseExadataInfrastructureOutput(args: GetDatabaseExadataInfrastructureOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDatabaseExadataInfrastructureResult> {
    return pulumi.output(args).apply((a: any) => getDatabaseExadataInfrastructure(a, opts))
}

/**
 * A collection of arguments for invoking getDatabaseExadataInfrastructure.
 */
export interface GetDatabaseExadataInfrastructureOutputArgs {
    exadataInfrastructureId: pulumi.Input<string>;
}
