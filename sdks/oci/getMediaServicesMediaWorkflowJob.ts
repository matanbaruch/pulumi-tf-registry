// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getMediaServicesMediaWorkflowJob(args: GetMediaServicesMediaWorkflowJobArgs, opts?: pulumi.InvokeOptions): Promise<GetMediaServicesMediaWorkflowJobResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getMediaServicesMediaWorkflowJob:getMediaServicesMediaWorkflowJob", {
        "mediaWorkflowJobId": args.mediaWorkflowJobId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getMediaServicesMediaWorkflowJob.
 */
export interface GetMediaServicesMediaWorkflowJobArgs {
    mediaWorkflowJobId: string;
}

/**
 * A collection of values returned by getMediaServicesMediaWorkflowJob.
 */
export interface GetMediaServicesMediaWorkflowJobResult {
    readonly compartmentId: string;
    readonly definedTags: {[key: string]: string};
    readonly displayName: string;
    readonly freeformTags: {[key: string]: string};
    readonly id: string;
    readonly isLockOverride: boolean;
    readonly lifecycleDetails: string;
    readonly locks: outputs.GetMediaServicesMediaWorkflowJobLock[];
    readonly mediaWorkflowConfigurationIds: string[];
    readonly mediaWorkflowId: string;
    readonly mediaWorkflowJobId: string;
    readonly mediaWorkflowName: string;
    readonly outputs: outputs.GetMediaServicesMediaWorkflowJobOutput[];
    readonly parameters: string;
    readonly runnable: string;
    readonly state: string;
    readonly systemTags: {[key: string]: string};
    readonly taskLifecycleStates: outputs.GetMediaServicesMediaWorkflowJobTaskLifecycleState[];
    readonly timeCreated: string;
    readonly timeEnded: string;
    readonly timeStarted: string;
    readonly timeUpdated: string;
    readonly workflowIdentifierType: string;
}
export function getMediaServicesMediaWorkflowJobOutput(args: GetMediaServicesMediaWorkflowJobOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetMediaServicesMediaWorkflowJobResult> {
    return pulumi.output(args).apply((a: any) => getMediaServicesMediaWorkflowJob(a, opts))
}

/**
 * A collection of arguments for invoking getMediaServicesMediaWorkflowJob.
 */
export interface GetMediaServicesMediaWorkflowJobOutputArgs {
    mediaWorkflowJobId: pulumi.Input<string>;
}
