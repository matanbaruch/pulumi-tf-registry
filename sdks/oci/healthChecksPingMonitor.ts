// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class HealthChecksPingMonitor extends pulumi.CustomResource {
    /**
     * Get an existing HealthChecksPingMonitor resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: HealthChecksPingMonitorState, opts?: pulumi.CustomResourceOptions): HealthChecksPingMonitor {
        return new HealthChecksPingMonitor(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/healthChecksPingMonitor:HealthChecksPingMonitor';

    /**
     * Returns true if the given object is an instance of HealthChecksPingMonitor.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is HealthChecksPingMonitor {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === HealthChecksPingMonitor.__pulumiType;
    }

    public readonly compartmentId!: pulumi.Output<string>;
    public readonly definedTags!: pulumi.Output<{[key: string]: string}>;
    public readonly displayName!: pulumi.Output<string>;
    public readonly freeformTags!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly homeRegion!: pulumi.Output<string>;
    public readonly intervalInSeconds!: pulumi.Output<number>;
    public readonly isEnabled!: pulumi.Output<boolean>;
    public readonly port!: pulumi.Output<number>;
    public readonly protocol!: pulumi.Output<string>;
    public /*out*/ readonly resultsUrl!: pulumi.Output<string>;
    public readonly targets!: pulumi.Output<string[]>;
    public /*out*/ readonly timeCreated!: pulumi.Output<string>;
    public readonly timeoutInSeconds!: pulumi.Output<number>;
    public readonly timeouts!: pulumi.Output<outputs.HealthChecksPingMonitorTimeouts | undefined>;
    public readonly vantagePointNames!: pulumi.Output<string[]>;

    /**
     * Create a HealthChecksPingMonitor resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: HealthChecksPingMonitorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: HealthChecksPingMonitorArgs | HealthChecksPingMonitorState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as HealthChecksPingMonitorState | undefined;
            resourceInputs["compartmentId"] = state ? state.compartmentId : undefined;
            resourceInputs["definedTags"] = state ? state.definedTags : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["freeformTags"] = state ? state.freeformTags : undefined;
            resourceInputs["homeRegion"] = state ? state.homeRegion : undefined;
            resourceInputs["intervalInSeconds"] = state ? state.intervalInSeconds : undefined;
            resourceInputs["isEnabled"] = state ? state.isEnabled : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["resultsUrl"] = state ? state.resultsUrl : undefined;
            resourceInputs["targets"] = state ? state.targets : undefined;
            resourceInputs["timeCreated"] = state ? state.timeCreated : undefined;
            resourceInputs["timeoutInSeconds"] = state ? state.timeoutInSeconds : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["vantagePointNames"] = state ? state.vantagePointNames : undefined;
        } else {
            const args = argsOrState as HealthChecksPingMonitorArgs | undefined;
            if ((!args || args.compartmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'compartmentId'");
            }
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if ((!args || args.intervalInSeconds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'intervalInSeconds'");
            }
            if ((!args || args.protocol === undefined) && !opts.urn) {
                throw new Error("Missing required property 'protocol'");
            }
            if ((!args || args.targets === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targets'");
            }
            resourceInputs["compartmentId"] = args ? args.compartmentId : undefined;
            resourceInputs["definedTags"] = args ? args.definedTags : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["freeformTags"] = args ? args.freeformTags : undefined;
            resourceInputs["intervalInSeconds"] = args ? args.intervalInSeconds : undefined;
            resourceInputs["isEnabled"] = args ? args.isEnabled : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["targets"] = args ? args.targets : undefined;
            resourceInputs["timeoutInSeconds"] = args ? args.timeoutInSeconds : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["vantagePointNames"] = args ? args.vantagePointNames : undefined;
            resourceInputs["homeRegion"] = undefined /*out*/;
            resourceInputs["resultsUrl"] = undefined /*out*/;
            resourceInputs["timeCreated"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(HealthChecksPingMonitor.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering HealthChecksPingMonitor resources.
 */
export interface HealthChecksPingMonitorState {
    compartmentId?: pulumi.Input<string>;
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    displayName?: pulumi.Input<string>;
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    homeRegion?: pulumi.Input<string>;
    intervalInSeconds?: pulumi.Input<number>;
    isEnabled?: pulumi.Input<boolean>;
    port?: pulumi.Input<number>;
    protocol?: pulumi.Input<string>;
    resultsUrl?: pulumi.Input<string>;
    targets?: pulumi.Input<pulumi.Input<string>[]>;
    timeCreated?: pulumi.Input<string>;
    timeoutInSeconds?: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.HealthChecksPingMonitorTimeouts>;
    vantagePointNames?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a HealthChecksPingMonitor resource.
 */
export interface HealthChecksPingMonitorArgs {
    compartmentId: pulumi.Input<string>;
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    displayName: pulumi.Input<string>;
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    intervalInSeconds: pulumi.Input<number>;
    isEnabled?: pulumi.Input<boolean>;
    port?: pulumi.Input<number>;
    protocol: pulumi.Input<string>;
    targets: pulumi.Input<pulumi.Input<string>[]>;
    timeoutInSeconds?: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.HealthChecksPingMonitorTimeouts>;
    vantagePointNames?: pulumi.Input<pulumi.Input<string>[]>;
}
