// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class MarketplaceListingPackageAgreement extends pulumi.CustomResource {
    /**
     * Get an existing MarketplaceListingPackageAgreement resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MarketplaceListingPackageAgreementState, opts?: pulumi.CustomResourceOptions): MarketplaceListingPackageAgreement {
        return new MarketplaceListingPackageAgreement(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/marketplaceListingPackageAgreement:MarketplaceListingPackageAgreement';

    /**
     * Returns true if the given object is an instance of MarketplaceListingPackageAgreement.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MarketplaceListingPackageAgreement {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MarketplaceListingPackageAgreement.__pulumiType;
    }

    public readonly agreementId!: pulumi.Output<string>;
    public /*out*/ readonly author!: pulumi.Output<string>;
    public readonly compartmentId!: pulumi.Output<string>;
    public /*out*/ readonly contentUrl!: pulumi.Output<string>;
    public readonly listingId!: pulumi.Output<string>;
    public readonly packageVersion!: pulumi.Output<string>;
    public /*out*/ readonly prompt!: pulumi.Output<string>;
    public /*out*/ readonly signature!: pulumi.Output<string>;

    /**
     * Create a MarketplaceListingPackageAgreement resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MarketplaceListingPackageAgreementArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MarketplaceListingPackageAgreementArgs | MarketplaceListingPackageAgreementState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MarketplaceListingPackageAgreementState | undefined;
            resourceInputs["agreementId"] = state ? state.agreementId : undefined;
            resourceInputs["author"] = state ? state.author : undefined;
            resourceInputs["compartmentId"] = state ? state.compartmentId : undefined;
            resourceInputs["contentUrl"] = state ? state.contentUrl : undefined;
            resourceInputs["listingId"] = state ? state.listingId : undefined;
            resourceInputs["packageVersion"] = state ? state.packageVersion : undefined;
            resourceInputs["prompt"] = state ? state.prompt : undefined;
            resourceInputs["signature"] = state ? state.signature : undefined;
        } else {
            const args = argsOrState as MarketplaceListingPackageAgreementArgs | undefined;
            if ((!args || args.agreementId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'agreementId'");
            }
            if ((!args || args.listingId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'listingId'");
            }
            if ((!args || args.packageVersion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'packageVersion'");
            }
            resourceInputs["agreementId"] = args ? args.agreementId : undefined;
            resourceInputs["compartmentId"] = args ? args.compartmentId : undefined;
            resourceInputs["listingId"] = args ? args.listingId : undefined;
            resourceInputs["packageVersion"] = args ? args.packageVersion : undefined;
            resourceInputs["author"] = undefined /*out*/;
            resourceInputs["contentUrl"] = undefined /*out*/;
            resourceInputs["prompt"] = undefined /*out*/;
            resourceInputs["signature"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MarketplaceListingPackageAgreement.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering MarketplaceListingPackageAgreement resources.
 */
export interface MarketplaceListingPackageAgreementState {
    agreementId?: pulumi.Input<string>;
    author?: pulumi.Input<string>;
    compartmentId?: pulumi.Input<string>;
    contentUrl?: pulumi.Input<string>;
    listingId?: pulumi.Input<string>;
    packageVersion?: pulumi.Input<string>;
    prompt?: pulumi.Input<string>;
    signature?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a MarketplaceListingPackageAgreement resource.
 */
export interface MarketplaceListingPackageAgreementArgs {
    agreementId: pulumi.Input<string>;
    compartmentId?: pulumi.Input<string>;
    listingId: pulumi.Input<string>;
    packageVersion: pulumi.Input<string>;
}
