// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getAuditEvents(args: GetAuditEventsArgs, opts?: pulumi.InvokeOptions): Promise<GetAuditEventsResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getAuditEvents:getAuditEvents", {
        "compartmentId": args.compartmentId,
        "endTime": args.endTime,
        "filters": args.filters,
        "id": args.id,
        "startTime": args.startTime,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getAuditEvents.
 */
export interface GetAuditEventsArgs {
    compartmentId: string;
    endTime: string;
    filters?: inputs.GetAuditEventsFilter[];
    id?: string;
    startTime: string;
}

/**
 * A collection of values returned by getAuditEvents.
 */
export interface GetAuditEventsResult {
    readonly auditEvents: outputs.GetAuditEventsAuditEvent[];
    readonly compartmentId: string;
    readonly endTime: string;
    readonly filters?: outputs.GetAuditEventsFilter[];
    readonly id: string;
    readonly startTime: string;
}
export function getAuditEventsOutput(args: GetAuditEventsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetAuditEventsResult> {
    return pulumi.output(args).apply((a: any) => getAuditEvents(a, opts))
}

/**
 * A collection of arguments for invoking getAuditEvents.
 */
export interface GetAuditEventsOutputArgs {
    compartmentId: pulumi.Input<string>;
    endTime: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.GetAuditEventsFilterArgs>[]>;
    id?: pulumi.Input<string>;
    startTime: pulumi.Input<string>;
}
