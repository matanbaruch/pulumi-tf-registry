// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getDatabaseManagementManagedDatabaseCursorCacheStatements(args: GetDatabaseManagementManagedDatabaseCursorCacheStatementsArgs, opts?: pulumi.InvokeOptions): Promise<GetDatabaseManagementManagedDatabaseCursorCacheStatementsResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getDatabaseManagementManagedDatabaseCursorCacheStatements:getDatabaseManagementManagedDatabaseCursorCacheStatements", {
        "filters": args.filters,
        "id": args.id,
        "limit": args.limit,
        "managedDatabaseId": args.managedDatabaseId,
        "opcNamedCredentialId": args.opcNamedCredentialId,
        "sqlText": args.sqlText,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getDatabaseManagementManagedDatabaseCursorCacheStatements.
 */
export interface GetDatabaseManagementManagedDatabaseCursorCacheStatementsArgs {
    filters?: inputs.GetDatabaseManagementManagedDatabaseCursorCacheStatementsFilter[];
    id?: string;
    limit?: number;
    managedDatabaseId: string;
    opcNamedCredentialId?: string;
    sqlText?: string;
}

/**
 * A collection of values returned by getDatabaseManagementManagedDatabaseCursorCacheStatements.
 */
export interface GetDatabaseManagementManagedDatabaseCursorCacheStatementsResult {
    readonly cursorCacheStatementCollections: outputs.GetDatabaseManagementManagedDatabaseCursorCacheStatementsCursorCacheStatementCollection[];
    readonly filters?: outputs.GetDatabaseManagementManagedDatabaseCursorCacheStatementsFilter[];
    readonly id: string;
    readonly limit?: number;
    readonly managedDatabaseId: string;
    readonly opcNamedCredentialId?: string;
    readonly sqlText?: string;
}
export function getDatabaseManagementManagedDatabaseCursorCacheStatementsOutput(args: GetDatabaseManagementManagedDatabaseCursorCacheStatementsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDatabaseManagementManagedDatabaseCursorCacheStatementsResult> {
    return pulumi.output(args).apply((a: any) => getDatabaseManagementManagedDatabaseCursorCacheStatements(a, opts))
}

/**
 * A collection of arguments for invoking getDatabaseManagementManagedDatabaseCursorCacheStatements.
 */
export interface GetDatabaseManagementManagedDatabaseCursorCacheStatementsOutputArgs {
    filters?: pulumi.Input<pulumi.Input<inputs.GetDatabaseManagementManagedDatabaseCursorCacheStatementsFilterArgs>[]>;
    id?: pulumi.Input<string>;
    limit?: pulumi.Input<number>;
    managedDatabaseId: pulumi.Input<string>;
    opcNamedCredentialId?: pulumi.Input<string>;
    sqlText?: pulumi.Input<string>;
}
