// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getDataLabelingServiceAnnotationFormats(args: GetDataLabelingServiceAnnotationFormatsArgs, opts?: pulumi.InvokeOptions): Promise<GetDataLabelingServiceAnnotationFormatsResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getDataLabelingServiceAnnotationFormats:getDataLabelingServiceAnnotationFormats", {
        "compartmentId": args.compartmentId,
        "filters": args.filters,
        "id": args.id,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getDataLabelingServiceAnnotationFormats.
 */
export interface GetDataLabelingServiceAnnotationFormatsArgs {
    compartmentId: string;
    filters?: inputs.GetDataLabelingServiceAnnotationFormatsFilter[];
    id?: string;
}

/**
 * A collection of values returned by getDataLabelingServiceAnnotationFormats.
 */
export interface GetDataLabelingServiceAnnotationFormatsResult {
    readonly annotationFormatCollections: outputs.GetDataLabelingServiceAnnotationFormatsAnnotationFormatCollection[];
    readonly compartmentId: string;
    readonly filters?: outputs.GetDataLabelingServiceAnnotationFormatsFilter[];
    readonly id: string;
}
export function getDataLabelingServiceAnnotationFormatsOutput(args: GetDataLabelingServiceAnnotationFormatsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDataLabelingServiceAnnotationFormatsResult> {
    return pulumi.output(args).apply((a: any) => getDataLabelingServiceAnnotationFormats(a, opts))
}

/**
 * A collection of arguments for invoking getDataLabelingServiceAnnotationFormats.
 */
export interface GetDataLabelingServiceAnnotationFormatsOutputArgs {
    compartmentId: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.GetDataLabelingServiceAnnotationFormatsFilterArgs>[]>;
    id?: pulumi.Input<string>;
}
