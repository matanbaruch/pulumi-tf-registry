// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class GoldenGateDeployment extends pulumi.CustomResource {
    /**
     * Get an existing GoldenGateDeployment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GoldenGateDeploymentState, opts?: pulumi.CustomResourceOptions): GoldenGateDeployment {
        return new GoldenGateDeployment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/goldenGateDeployment:GoldenGateDeployment';

    /**
     * Returns true if the given object is an instance of GoldenGateDeployment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GoldenGateDeployment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GoldenGateDeployment.__pulumiType;
    }

    public readonly compartmentId!: pulumi.Output<string>;
    public readonly cpuCoreCount!: pulumi.Output<number>;
    public readonly definedTags!: pulumi.Output<{[key: string]: string}>;
    public readonly deploymentBackupId!: pulumi.Output<string>;
    public /*out*/ readonly deploymentDiagnosticDatas!: pulumi.Output<outputs.GoldenGateDeploymentDeploymentDiagnosticData[]>;
    public readonly deploymentType!: pulumi.Output<string>;
    public /*out*/ readonly deploymentUrl!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string>;
    public readonly displayName!: pulumi.Output<string>;
    public readonly fqdn!: pulumi.Output<string>;
    public readonly freeformTags!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly ingressIps!: pulumi.Output<outputs.GoldenGateDeploymentIngressIp[]>;
    public readonly isAutoScalingEnabled!: pulumi.Output<boolean>;
    public /*out*/ readonly isHealthy!: pulumi.Output<boolean>;
    public /*out*/ readonly isLatestVersion!: pulumi.Output<boolean>;
    public readonly isLockOverride!: pulumi.Output<boolean>;
    public readonly isPublic!: pulumi.Output<boolean>;
    public /*out*/ readonly isStorageUtilizationLimitExceeded!: pulumi.Output<boolean>;
    public readonly licenseModel!: pulumi.Output<string>;
    public /*out*/ readonly lifecycleDetails!: pulumi.Output<string>;
    public /*out*/ readonly lifecycleSubState!: pulumi.Output<string>;
    public /*out*/ readonly loadBalancerId!: pulumi.Output<string>;
    public readonly loadBalancerSubnetId!: pulumi.Output<string>;
    public readonly locks!: pulumi.Output<outputs.GoldenGateDeploymentLock[] | undefined>;
    public readonly maintenanceConfiguration!: pulumi.Output<outputs.GoldenGateDeploymentMaintenanceConfiguration | undefined>;
    public readonly maintenanceWindow!: pulumi.Output<outputs.GoldenGateDeploymentMaintenanceWindow | undefined>;
    public /*out*/ readonly nextMaintenanceActionType!: pulumi.Output<string>;
    public /*out*/ readonly nextMaintenanceDescription!: pulumi.Output<string>;
    public readonly nsgIds!: pulumi.Output<string[]>;
    public readonly oggData!: pulumi.Output<outputs.GoldenGateDeploymentOggData | undefined>;
    public /*out*/ readonly privateIpAddress!: pulumi.Output<string>;
    public /*out*/ readonly publicIpAddress!: pulumi.Output<string>;
    public readonly state!: pulumi.Output<string>;
    public /*out*/ readonly storageUtilizationInBytes!: pulumi.Output<string>;
    public readonly subnetId!: pulumi.Output<string>;
    public /*out*/ readonly systemTags!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly timeCreated!: pulumi.Output<string>;
    public /*out*/ readonly timeOfNextMaintenance!: pulumi.Output<string>;
    public /*out*/ readonly timeOggVersionSupportedUntil!: pulumi.Output<string>;
    public /*out*/ readonly timeUpdated!: pulumi.Output<string>;
    public /*out*/ readonly timeUpgradeRequired!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.GoldenGateDeploymentTimeouts | undefined>;

    /**
     * Create a GoldenGateDeployment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GoldenGateDeploymentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GoldenGateDeploymentArgs | GoldenGateDeploymentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GoldenGateDeploymentState | undefined;
            resourceInputs["compartmentId"] = state ? state.compartmentId : undefined;
            resourceInputs["cpuCoreCount"] = state ? state.cpuCoreCount : undefined;
            resourceInputs["definedTags"] = state ? state.definedTags : undefined;
            resourceInputs["deploymentBackupId"] = state ? state.deploymentBackupId : undefined;
            resourceInputs["deploymentDiagnosticDatas"] = state ? state.deploymentDiagnosticDatas : undefined;
            resourceInputs["deploymentType"] = state ? state.deploymentType : undefined;
            resourceInputs["deploymentUrl"] = state ? state.deploymentUrl : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["fqdn"] = state ? state.fqdn : undefined;
            resourceInputs["freeformTags"] = state ? state.freeformTags : undefined;
            resourceInputs["ingressIps"] = state ? state.ingressIps : undefined;
            resourceInputs["isAutoScalingEnabled"] = state ? state.isAutoScalingEnabled : undefined;
            resourceInputs["isHealthy"] = state ? state.isHealthy : undefined;
            resourceInputs["isLatestVersion"] = state ? state.isLatestVersion : undefined;
            resourceInputs["isLockOverride"] = state ? state.isLockOverride : undefined;
            resourceInputs["isPublic"] = state ? state.isPublic : undefined;
            resourceInputs["isStorageUtilizationLimitExceeded"] = state ? state.isStorageUtilizationLimitExceeded : undefined;
            resourceInputs["licenseModel"] = state ? state.licenseModel : undefined;
            resourceInputs["lifecycleDetails"] = state ? state.lifecycleDetails : undefined;
            resourceInputs["lifecycleSubState"] = state ? state.lifecycleSubState : undefined;
            resourceInputs["loadBalancerId"] = state ? state.loadBalancerId : undefined;
            resourceInputs["loadBalancerSubnetId"] = state ? state.loadBalancerSubnetId : undefined;
            resourceInputs["locks"] = state ? state.locks : undefined;
            resourceInputs["maintenanceConfiguration"] = state ? state.maintenanceConfiguration : undefined;
            resourceInputs["maintenanceWindow"] = state ? state.maintenanceWindow : undefined;
            resourceInputs["nextMaintenanceActionType"] = state ? state.nextMaintenanceActionType : undefined;
            resourceInputs["nextMaintenanceDescription"] = state ? state.nextMaintenanceDescription : undefined;
            resourceInputs["nsgIds"] = state ? state.nsgIds : undefined;
            resourceInputs["oggData"] = state ? state.oggData : undefined;
            resourceInputs["privateIpAddress"] = state ? state.privateIpAddress : undefined;
            resourceInputs["publicIpAddress"] = state ? state.publicIpAddress : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["storageUtilizationInBytes"] = state ? state.storageUtilizationInBytes : undefined;
            resourceInputs["subnetId"] = state ? state.subnetId : undefined;
            resourceInputs["systemTags"] = state ? state.systemTags : undefined;
            resourceInputs["timeCreated"] = state ? state.timeCreated : undefined;
            resourceInputs["timeOfNextMaintenance"] = state ? state.timeOfNextMaintenance : undefined;
            resourceInputs["timeOggVersionSupportedUntil"] = state ? state.timeOggVersionSupportedUntil : undefined;
            resourceInputs["timeUpdated"] = state ? state.timeUpdated : undefined;
            resourceInputs["timeUpgradeRequired"] = state ? state.timeUpgradeRequired : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as GoldenGateDeploymentArgs | undefined;
            if ((!args || args.compartmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'compartmentId'");
            }
            if ((!args || args.cpuCoreCount === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cpuCoreCount'");
            }
            if ((!args || args.deploymentType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'deploymentType'");
            }
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if ((!args || args.isAutoScalingEnabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'isAutoScalingEnabled'");
            }
            if ((!args || args.licenseModel === undefined) && !opts.urn) {
                throw new Error("Missing required property 'licenseModel'");
            }
            if ((!args || args.subnetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnetId'");
            }
            resourceInputs["compartmentId"] = args ? args.compartmentId : undefined;
            resourceInputs["cpuCoreCount"] = args ? args.cpuCoreCount : undefined;
            resourceInputs["definedTags"] = args ? args.definedTags : undefined;
            resourceInputs["deploymentBackupId"] = args ? args.deploymentBackupId : undefined;
            resourceInputs["deploymentType"] = args ? args.deploymentType : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["fqdn"] = args ? args.fqdn : undefined;
            resourceInputs["freeformTags"] = args ? args.freeformTags : undefined;
            resourceInputs["isAutoScalingEnabled"] = args ? args.isAutoScalingEnabled : undefined;
            resourceInputs["isLockOverride"] = args ? args.isLockOverride : undefined;
            resourceInputs["isPublic"] = args ? args.isPublic : undefined;
            resourceInputs["licenseModel"] = args ? args.licenseModel : undefined;
            resourceInputs["loadBalancerSubnetId"] = args ? args.loadBalancerSubnetId : undefined;
            resourceInputs["locks"] = args ? args.locks : undefined;
            resourceInputs["maintenanceConfiguration"] = args ? args.maintenanceConfiguration : undefined;
            resourceInputs["maintenanceWindow"] = args ? args.maintenanceWindow : undefined;
            resourceInputs["nsgIds"] = args ? args.nsgIds : undefined;
            resourceInputs["oggData"] = args ? args.oggData : undefined;
            resourceInputs["state"] = args ? args.state : undefined;
            resourceInputs["subnetId"] = args ? args.subnetId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["deploymentDiagnosticDatas"] = undefined /*out*/;
            resourceInputs["deploymentUrl"] = undefined /*out*/;
            resourceInputs["ingressIps"] = undefined /*out*/;
            resourceInputs["isHealthy"] = undefined /*out*/;
            resourceInputs["isLatestVersion"] = undefined /*out*/;
            resourceInputs["isStorageUtilizationLimitExceeded"] = undefined /*out*/;
            resourceInputs["lifecycleDetails"] = undefined /*out*/;
            resourceInputs["lifecycleSubState"] = undefined /*out*/;
            resourceInputs["loadBalancerId"] = undefined /*out*/;
            resourceInputs["nextMaintenanceActionType"] = undefined /*out*/;
            resourceInputs["nextMaintenanceDescription"] = undefined /*out*/;
            resourceInputs["privateIpAddress"] = undefined /*out*/;
            resourceInputs["publicIpAddress"] = undefined /*out*/;
            resourceInputs["storageUtilizationInBytes"] = undefined /*out*/;
            resourceInputs["systemTags"] = undefined /*out*/;
            resourceInputs["timeCreated"] = undefined /*out*/;
            resourceInputs["timeOfNextMaintenance"] = undefined /*out*/;
            resourceInputs["timeOggVersionSupportedUntil"] = undefined /*out*/;
            resourceInputs["timeUpdated"] = undefined /*out*/;
            resourceInputs["timeUpgradeRequired"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GoldenGateDeployment.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering GoldenGateDeployment resources.
 */
export interface GoldenGateDeploymentState {
    compartmentId?: pulumi.Input<string>;
    cpuCoreCount?: pulumi.Input<number>;
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    deploymentBackupId?: pulumi.Input<string>;
    deploymentDiagnosticDatas?: pulumi.Input<pulumi.Input<inputs.GoldenGateDeploymentDeploymentDiagnosticData>[]>;
    deploymentType?: pulumi.Input<string>;
    deploymentUrl?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    fqdn?: pulumi.Input<string>;
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    ingressIps?: pulumi.Input<pulumi.Input<inputs.GoldenGateDeploymentIngressIp>[]>;
    isAutoScalingEnabled?: pulumi.Input<boolean>;
    isHealthy?: pulumi.Input<boolean>;
    isLatestVersion?: pulumi.Input<boolean>;
    isLockOverride?: pulumi.Input<boolean>;
    isPublic?: pulumi.Input<boolean>;
    isStorageUtilizationLimitExceeded?: pulumi.Input<boolean>;
    licenseModel?: pulumi.Input<string>;
    lifecycleDetails?: pulumi.Input<string>;
    lifecycleSubState?: pulumi.Input<string>;
    loadBalancerId?: pulumi.Input<string>;
    loadBalancerSubnetId?: pulumi.Input<string>;
    locks?: pulumi.Input<pulumi.Input<inputs.GoldenGateDeploymentLock>[]>;
    maintenanceConfiguration?: pulumi.Input<inputs.GoldenGateDeploymentMaintenanceConfiguration>;
    maintenanceWindow?: pulumi.Input<inputs.GoldenGateDeploymentMaintenanceWindow>;
    nextMaintenanceActionType?: pulumi.Input<string>;
    nextMaintenanceDescription?: pulumi.Input<string>;
    nsgIds?: pulumi.Input<pulumi.Input<string>[]>;
    oggData?: pulumi.Input<inputs.GoldenGateDeploymentOggData>;
    privateIpAddress?: pulumi.Input<string>;
    publicIpAddress?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    storageUtilizationInBytes?: pulumi.Input<string>;
    subnetId?: pulumi.Input<string>;
    systemTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeCreated?: pulumi.Input<string>;
    timeOfNextMaintenance?: pulumi.Input<string>;
    timeOggVersionSupportedUntil?: pulumi.Input<string>;
    timeUpdated?: pulumi.Input<string>;
    timeUpgradeRequired?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.GoldenGateDeploymentTimeouts>;
}

/**
 * The set of arguments for constructing a GoldenGateDeployment resource.
 */
export interface GoldenGateDeploymentArgs {
    compartmentId: pulumi.Input<string>;
    cpuCoreCount: pulumi.Input<number>;
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    deploymentBackupId?: pulumi.Input<string>;
    deploymentType: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    displayName: pulumi.Input<string>;
    fqdn?: pulumi.Input<string>;
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    isAutoScalingEnabled: pulumi.Input<boolean>;
    isLockOverride?: pulumi.Input<boolean>;
    isPublic?: pulumi.Input<boolean>;
    licenseModel: pulumi.Input<string>;
    loadBalancerSubnetId?: pulumi.Input<string>;
    locks?: pulumi.Input<pulumi.Input<inputs.GoldenGateDeploymentLock>[]>;
    maintenanceConfiguration?: pulumi.Input<inputs.GoldenGateDeploymentMaintenanceConfiguration>;
    maintenanceWindow?: pulumi.Input<inputs.GoldenGateDeploymentMaintenanceWindow>;
    nsgIds?: pulumi.Input<pulumi.Input<string>[]>;
    oggData?: pulumi.Input<inputs.GoldenGateDeploymentOggData>;
    state?: pulumi.Input<string>;
    subnetId: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.GoldenGateDeploymentTimeouts>;
}
