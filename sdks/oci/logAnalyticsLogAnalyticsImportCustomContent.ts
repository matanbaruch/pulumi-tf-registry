// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class LogAnalyticsLogAnalyticsImportCustomContent extends pulumi.CustomResource {
    /**
     * Get an existing LogAnalyticsLogAnalyticsImportCustomContent resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LogAnalyticsLogAnalyticsImportCustomContentState, opts?: pulumi.CustomResourceOptions): LogAnalyticsLogAnalyticsImportCustomContent {
        return new LogAnalyticsLogAnalyticsImportCustomContent(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/logAnalyticsLogAnalyticsImportCustomContent:LogAnalyticsLogAnalyticsImportCustomContent';

    /**
     * Returns true if the given object is an instance of LogAnalyticsLogAnalyticsImportCustomContent.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LogAnalyticsLogAnalyticsImportCustomContent {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LogAnalyticsLogAnalyticsImportCustomContent.__pulumiType;
    }

    public /*out*/ readonly changeLists!: pulumi.Output<outputs.LogAnalyticsLogAnalyticsImportCustomContentChangeList[]>;
    public /*out*/ readonly contentName!: pulumi.Output<string>;
    public readonly expect!: pulumi.Output<string>;
    public /*out*/ readonly fieldNames!: pulumi.Output<string[]>;
    public readonly importCustomContentFile!: pulumi.Output<string>;
    public readonly isOverwrite!: pulumi.Output<boolean>;
    public readonly namespace!: pulumi.Output<string>;
    public /*out*/ readonly parserNames!: pulumi.Output<string[]>;
    public /*out*/ readonly sourceNames!: pulumi.Output<string[]>;
    public readonly timeouts!: pulumi.Output<outputs.LogAnalyticsLogAnalyticsImportCustomContentTimeouts | undefined>;

    /**
     * Create a LogAnalyticsLogAnalyticsImportCustomContent resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LogAnalyticsLogAnalyticsImportCustomContentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LogAnalyticsLogAnalyticsImportCustomContentArgs | LogAnalyticsLogAnalyticsImportCustomContentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LogAnalyticsLogAnalyticsImportCustomContentState | undefined;
            resourceInputs["changeLists"] = state ? state.changeLists : undefined;
            resourceInputs["contentName"] = state ? state.contentName : undefined;
            resourceInputs["expect"] = state ? state.expect : undefined;
            resourceInputs["fieldNames"] = state ? state.fieldNames : undefined;
            resourceInputs["importCustomContentFile"] = state ? state.importCustomContentFile : undefined;
            resourceInputs["isOverwrite"] = state ? state.isOverwrite : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["parserNames"] = state ? state.parserNames : undefined;
            resourceInputs["sourceNames"] = state ? state.sourceNames : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as LogAnalyticsLogAnalyticsImportCustomContentArgs | undefined;
            if ((!args || args.importCustomContentFile === undefined) && !opts.urn) {
                throw new Error("Missing required property 'importCustomContentFile'");
            }
            if ((!args || args.namespace === undefined) && !opts.urn) {
                throw new Error("Missing required property 'namespace'");
            }
            resourceInputs["expect"] = args ? args.expect : undefined;
            resourceInputs["importCustomContentFile"] = args ? args.importCustomContentFile : undefined;
            resourceInputs["isOverwrite"] = args ? args.isOverwrite : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["changeLists"] = undefined /*out*/;
            resourceInputs["contentName"] = undefined /*out*/;
            resourceInputs["fieldNames"] = undefined /*out*/;
            resourceInputs["parserNames"] = undefined /*out*/;
            resourceInputs["sourceNames"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LogAnalyticsLogAnalyticsImportCustomContent.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LogAnalyticsLogAnalyticsImportCustomContent resources.
 */
export interface LogAnalyticsLogAnalyticsImportCustomContentState {
    changeLists?: pulumi.Input<pulumi.Input<inputs.LogAnalyticsLogAnalyticsImportCustomContentChangeList>[]>;
    contentName?: pulumi.Input<string>;
    expect?: pulumi.Input<string>;
    fieldNames?: pulumi.Input<pulumi.Input<string>[]>;
    importCustomContentFile?: pulumi.Input<string>;
    isOverwrite?: pulumi.Input<boolean>;
    namespace?: pulumi.Input<string>;
    parserNames?: pulumi.Input<pulumi.Input<string>[]>;
    sourceNames?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.LogAnalyticsLogAnalyticsImportCustomContentTimeouts>;
}

/**
 * The set of arguments for constructing a LogAnalyticsLogAnalyticsImportCustomContent resource.
 */
export interface LogAnalyticsLogAnalyticsImportCustomContentArgs {
    expect?: pulumi.Input<string>;
    importCustomContentFile: pulumi.Input<string>;
    isOverwrite?: pulumi.Input<boolean>;
    namespace: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.LogAnalyticsLogAnalyticsImportCustomContentTimeouts>;
}
