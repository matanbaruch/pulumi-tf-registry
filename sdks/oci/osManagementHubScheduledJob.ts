// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class OsManagementHubScheduledJob extends pulumi.CustomResource {
    /**
     * Get an existing OsManagementHubScheduledJob resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OsManagementHubScheduledJobState, opts?: pulumi.CustomResourceOptions): OsManagementHubScheduledJob {
        return new OsManagementHubScheduledJob(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/osManagementHubScheduledJob:OsManagementHubScheduledJob';

    /**
     * Returns true if the given object is an instance of OsManagementHubScheduledJob.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OsManagementHubScheduledJob {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OsManagementHubScheduledJob.__pulumiType;
    }

    public readonly compartmentId!: pulumi.Output<string>;
    public readonly definedTags!: pulumi.Output<{[key: string]: string}>;
    public readonly description!: pulumi.Output<string>;
    public readonly displayName!: pulumi.Output<string>;
    public readonly freeformTags!: pulumi.Output<{[key: string]: string}>;
    public readonly isManagedByAutonomousLinux!: pulumi.Output<boolean>;
    public /*out*/ readonly isRestricted!: pulumi.Output<boolean>;
    public readonly isSubcompartmentIncluded!: pulumi.Output<boolean>;
    public readonly lifecycleStageIds!: pulumi.Output<string[]>;
    public readonly locations!: pulumi.Output<string[]>;
    public readonly managedCompartmentIds!: pulumi.Output<string[]>;
    public readonly managedInstanceGroupIds!: pulumi.Output<string[]>;
    public readonly managedInstanceIds!: pulumi.Output<string[]>;
    public readonly operations!: pulumi.Output<outputs.OsManagementHubScheduledJobOperation[]>;
    public readonly recurringRule!: pulumi.Output<string>;
    public readonly retryIntervals!: pulumi.Output<number[]>;
    public readonly scheduleType!: pulumi.Output<string>;
    public /*out*/ readonly state!: pulumi.Output<string>;
    public /*out*/ readonly systemTags!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly timeCreated!: pulumi.Output<string>;
    public /*out*/ readonly timeLastExecution!: pulumi.Output<string>;
    public readonly timeNextExecution!: pulumi.Output<string>;
    public /*out*/ readonly timeUpdated!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.OsManagementHubScheduledJobTimeouts | undefined>;
    public /*out*/ readonly workRequestIds!: pulumi.Output<string[]>;

    /**
     * Create a OsManagementHubScheduledJob resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OsManagementHubScheduledJobArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OsManagementHubScheduledJobArgs | OsManagementHubScheduledJobState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OsManagementHubScheduledJobState | undefined;
            resourceInputs["compartmentId"] = state ? state.compartmentId : undefined;
            resourceInputs["definedTags"] = state ? state.definedTags : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["freeformTags"] = state ? state.freeformTags : undefined;
            resourceInputs["isManagedByAutonomousLinux"] = state ? state.isManagedByAutonomousLinux : undefined;
            resourceInputs["isRestricted"] = state ? state.isRestricted : undefined;
            resourceInputs["isSubcompartmentIncluded"] = state ? state.isSubcompartmentIncluded : undefined;
            resourceInputs["lifecycleStageIds"] = state ? state.lifecycleStageIds : undefined;
            resourceInputs["locations"] = state ? state.locations : undefined;
            resourceInputs["managedCompartmentIds"] = state ? state.managedCompartmentIds : undefined;
            resourceInputs["managedInstanceGroupIds"] = state ? state.managedInstanceGroupIds : undefined;
            resourceInputs["managedInstanceIds"] = state ? state.managedInstanceIds : undefined;
            resourceInputs["operations"] = state ? state.operations : undefined;
            resourceInputs["recurringRule"] = state ? state.recurringRule : undefined;
            resourceInputs["retryIntervals"] = state ? state.retryIntervals : undefined;
            resourceInputs["scheduleType"] = state ? state.scheduleType : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["systemTags"] = state ? state.systemTags : undefined;
            resourceInputs["timeCreated"] = state ? state.timeCreated : undefined;
            resourceInputs["timeLastExecution"] = state ? state.timeLastExecution : undefined;
            resourceInputs["timeNextExecution"] = state ? state.timeNextExecution : undefined;
            resourceInputs["timeUpdated"] = state ? state.timeUpdated : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["workRequestIds"] = state ? state.workRequestIds : undefined;
        } else {
            const args = argsOrState as OsManagementHubScheduledJobArgs | undefined;
            if ((!args || args.compartmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'compartmentId'");
            }
            if ((!args || args.operations === undefined) && !opts.urn) {
                throw new Error("Missing required property 'operations'");
            }
            if ((!args || args.scheduleType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scheduleType'");
            }
            if ((!args || args.timeNextExecution === undefined) && !opts.urn) {
                throw new Error("Missing required property 'timeNextExecution'");
            }
            resourceInputs["compartmentId"] = args ? args.compartmentId : undefined;
            resourceInputs["definedTags"] = args ? args.definedTags : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["freeformTags"] = args ? args.freeformTags : undefined;
            resourceInputs["isManagedByAutonomousLinux"] = args ? args.isManagedByAutonomousLinux : undefined;
            resourceInputs["isSubcompartmentIncluded"] = args ? args.isSubcompartmentIncluded : undefined;
            resourceInputs["lifecycleStageIds"] = args ? args.lifecycleStageIds : undefined;
            resourceInputs["locations"] = args ? args.locations : undefined;
            resourceInputs["managedCompartmentIds"] = args ? args.managedCompartmentIds : undefined;
            resourceInputs["managedInstanceGroupIds"] = args ? args.managedInstanceGroupIds : undefined;
            resourceInputs["managedInstanceIds"] = args ? args.managedInstanceIds : undefined;
            resourceInputs["operations"] = args ? args.operations : undefined;
            resourceInputs["recurringRule"] = args ? args.recurringRule : undefined;
            resourceInputs["retryIntervals"] = args ? args.retryIntervals : undefined;
            resourceInputs["scheduleType"] = args ? args.scheduleType : undefined;
            resourceInputs["timeNextExecution"] = args ? args.timeNextExecution : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["isRestricted"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["systemTags"] = undefined /*out*/;
            resourceInputs["timeCreated"] = undefined /*out*/;
            resourceInputs["timeLastExecution"] = undefined /*out*/;
            resourceInputs["timeUpdated"] = undefined /*out*/;
            resourceInputs["workRequestIds"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OsManagementHubScheduledJob.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering OsManagementHubScheduledJob resources.
 */
export interface OsManagementHubScheduledJobState {
    compartmentId?: pulumi.Input<string>;
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    description?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    isManagedByAutonomousLinux?: pulumi.Input<boolean>;
    isRestricted?: pulumi.Input<boolean>;
    isSubcompartmentIncluded?: pulumi.Input<boolean>;
    lifecycleStageIds?: pulumi.Input<pulumi.Input<string>[]>;
    locations?: pulumi.Input<pulumi.Input<string>[]>;
    managedCompartmentIds?: pulumi.Input<pulumi.Input<string>[]>;
    managedInstanceGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    managedInstanceIds?: pulumi.Input<pulumi.Input<string>[]>;
    operations?: pulumi.Input<pulumi.Input<inputs.OsManagementHubScheduledJobOperation>[]>;
    recurringRule?: pulumi.Input<string>;
    retryIntervals?: pulumi.Input<pulumi.Input<number>[]>;
    scheduleType?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    systemTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeCreated?: pulumi.Input<string>;
    timeLastExecution?: pulumi.Input<string>;
    timeNextExecution?: pulumi.Input<string>;
    timeUpdated?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.OsManagementHubScheduledJobTimeouts>;
    workRequestIds?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a OsManagementHubScheduledJob resource.
 */
export interface OsManagementHubScheduledJobArgs {
    compartmentId: pulumi.Input<string>;
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    description?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    isManagedByAutonomousLinux?: pulumi.Input<boolean>;
    isSubcompartmentIncluded?: pulumi.Input<boolean>;
    lifecycleStageIds?: pulumi.Input<pulumi.Input<string>[]>;
    locations?: pulumi.Input<pulumi.Input<string>[]>;
    managedCompartmentIds?: pulumi.Input<pulumi.Input<string>[]>;
    managedInstanceGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    managedInstanceIds?: pulumi.Input<pulumi.Input<string>[]>;
    operations: pulumi.Input<pulumi.Input<inputs.OsManagementHubScheduledJobOperation>[]>;
    recurringRule?: pulumi.Input<string>;
    retryIntervals?: pulumi.Input<pulumi.Input<number>[]>;
    scheduleType: pulumi.Input<string>;
    timeNextExecution: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.OsManagementHubScheduledJobTimeouts>;
}
