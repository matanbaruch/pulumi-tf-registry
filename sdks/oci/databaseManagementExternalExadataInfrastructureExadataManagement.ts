// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DatabaseManagementExternalExadataInfrastructureExadataManagement extends pulumi.CustomResource {
    /**
     * Get an existing DatabaseManagementExternalExadataInfrastructureExadataManagement resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DatabaseManagementExternalExadataInfrastructureExadataManagementState, opts?: pulumi.CustomResourceOptions): DatabaseManagementExternalExadataInfrastructureExadataManagement {
        return new DatabaseManagementExternalExadataInfrastructureExadataManagement(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/databaseManagementExternalExadataInfrastructureExadataManagement:DatabaseManagementExternalExadataInfrastructureExadataManagement';

    /**
     * Returns true if the given object is an instance of DatabaseManagementExternalExadataInfrastructureExadataManagement.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DatabaseManagementExternalExadataInfrastructureExadataManagement {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DatabaseManagementExternalExadataInfrastructureExadataManagement.__pulumiType;
    }

    public readonly enableExadata!: pulumi.Output<boolean>;
    public readonly externalExadataInfrastructureId!: pulumi.Output<string>;
    public readonly licenseModel!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.DatabaseManagementExternalExadataInfrastructureExadataManagementTimeouts | undefined>;

    /**
     * Create a DatabaseManagementExternalExadataInfrastructureExadataManagement resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatabaseManagementExternalExadataInfrastructureExadataManagementArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DatabaseManagementExternalExadataInfrastructureExadataManagementArgs | DatabaseManagementExternalExadataInfrastructureExadataManagementState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DatabaseManagementExternalExadataInfrastructureExadataManagementState | undefined;
            resourceInputs["enableExadata"] = state ? state.enableExadata : undefined;
            resourceInputs["externalExadataInfrastructureId"] = state ? state.externalExadataInfrastructureId : undefined;
            resourceInputs["licenseModel"] = state ? state.licenseModel : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as DatabaseManagementExternalExadataInfrastructureExadataManagementArgs | undefined;
            if ((!args || args.enableExadata === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enableExadata'");
            }
            if ((!args || args.externalExadataInfrastructureId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'externalExadataInfrastructureId'");
            }
            resourceInputs["enableExadata"] = args ? args.enableExadata : undefined;
            resourceInputs["externalExadataInfrastructureId"] = args ? args.externalExadataInfrastructureId : undefined;
            resourceInputs["licenseModel"] = args ? args.licenseModel : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DatabaseManagementExternalExadataInfrastructureExadataManagement.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DatabaseManagementExternalExadataInfrastructureExadataManagement resources.
 */
export interface DatabaseManagementExternalExadataInfrastructureExadataManagementState {
    enableExadata?: pulumi.Input<boolean>;
    externalExadataInfrastructureId?: pulumi.Input<string>;
    licenseModel?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.DatabaseManagementExternalExadataInfrastructureExadataManagementTimeouts>;
}

/**
 * The set of arguments for constructing a DatabaseManagementExternalExadataInfrastructureExadataManagement resource.
 */
export interface DatabaseManagementExternalExadataInfrastructureExadataManagementArgs {
    enableExadata: pulumi.Input<boolean>;
    externalExadataInfrastructureId: pulumi.Input<string>;
    licenseModel?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.DatabaseManagementExternalExadataInfrastructureExadataManagementTimeouts>;
}
