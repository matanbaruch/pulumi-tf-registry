// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getDatacatalogCatalogTypes(args: GetDatacatalogCatalogTypesArgs, opts?: pulumi.InvokeOptions): Promise<GetDatacatalogCatalogTypesResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getDatacatalogCatalogTypes:getDatacatalogCatalogTypes", {
        "catalogId": args.catalogId,
        "externalTypeName": args.externalTypeName,
        "fields": args.fields,
        "filters": args.filters,
        "id": args.id,
        "isApproved": args.isApproved,
        "isInternal": args.isInternal,
        "isTag": args.isTag,
        "name": args.name,
        "state": args.state,
        "typeCategory": args.typeCategory,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getDatacatalogCatalogTypes.
 */
export interface GetDatacatalogCatalogTypesArgs {
    catalogId: string;
    externalTypeName?: string;
    fields?: string[];
    filters?: inputs.GetDatacatalogCatalogTypesFilter[];
    id?: string;
    isApproved?: string;
    isInternal?: string;
    isTag?: string;
    name?: string;
    state?: string;
    typeCategory?: string;
}

/**
 * A collection of values returned by getDatacatalogCatalogTypes.
 */
export interface GetDatacatalogCatalogTypesResult {
    readonly catalogId: string;
    readonly externalTypeName?: string;
    readonly fields?: string[];
    readonly filters?: outputs.GetDatacatalogCatalogTypesFilter[];
    readonly id: string;
    readonly isApproved?: string;
    readonly isInternal?: string;
    readonly isTag?: string;
    readonly name?: string;
    readonly state?: string;
    readonly typeCategory?: string;
    readonly typeCollections: outputs.GetDatacatalogCatalogTypesTypeCollection[];
}
export function getDatacatalogCatalogTypesOutput(args: GetDatacatalogCatalogTypesOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDatacatalogCatalogTypesResult> {
    return pulumi.output(args).apply((a: any) => getDatacatalogCatalogTypes(a, opts))
}

/**
 * A collection of arguments for invoking getDatacatalogCatalogTypes.
 */
export interface GetDatacatalogCatalogTypesOutputArgs {
    catalogId: pulumi.Input<string>;
    externalTypeName?: pulumi.Input<string>;
    fields?: pulumi.Input<pulumi.Input<string>[]>;
    filters?: pulumi.Input<pulumi.Input<inputs.GetDatacatalogCatalogTypesFilterArgs>[]>;
    id?: pulumi.Input<string>;
    isApproved?: pulumi.Input<string>;
    isInternal?: pulumi.Input<string>;
    isTag?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    typeCategory?: pulumi.Input<string>;
}
