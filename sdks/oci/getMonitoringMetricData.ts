// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getMonitoringMetricData(args: GetMonitoringMetricDataArgs, opts?: pulumi.InvokeOptions): Promise<GetMonitoringMetricDataResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getMonitoringMetricData:getMonitoringMetricData", {
        "compartmentId": args.compartmentId,
        "compartmentIdInSubtree": args.compartmentIdInSubtree,
        "endTime": args.endTime,
        "filters": args.filters,
        "id": args.id,
        "namespace": args.namespace,
        "query": args.query,
        "resolution": args.resolution,
        "resourceGroup": args.resourceGroup,
        "startTime": args.startTime,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getMonitoringMetricData.
 */
export interface GetMonitoringMetricDataArgs {
    compartmentId: string;
    compartmentIdInSubtree?: boolean;
    endTime?: string;
    filters?: inputs.GetMonitoringMetricDataFilter[];
    id?: string;
    namespace: string;
    query: string;
    resolution?: string;
    resourceGroup?: string;
    startTime?: string;
}

/**
 * A collection of values returned by getMonitoringMetricData.
 */
export interface GetMonitoringMetricDataResult {
    readonly compartmentId: string;
    readonly compartmentIdInSubtree?: boolean;
    readonly endTime?: string;
    readonly filters?: outputs.GetMonitoringMetricDataFilter[];
    readonly id: string;
    readonly metricDatas: outputs.GetMonitoringMetricDataMetricData[];
    readonly namespace: string;
    readonly query: string;
    readonly resolution?: string;
    readonly resourceGroup?: string;
    readonly startTime?: string;
}
export function getMonitoringMetricDataOutput(args: GetMonitoringMetricDataOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetMonitoringMetricDataResult> {
    return pulumi.output(args).apply((a: any) => getMonitoringMetricData(a, opts))
}

/**
 * A collection of arguments for invoking getMonitoringMetricData.
 */
export interface GetMonitoringMetricDataOutputArgs {
    compartmentId: pulumi.Input<string>;
    compartmentIdInSubtree?: pulumi.Input<boolean>;
    endTime?: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.GetMonitoringMetricDataFilterArgs>[]>;
    id?: pulumi.Input<string>;
    namespace: pulumi.Input<string>;
    query: pulumi.Input<string>;
    resolution?: pulumi.Input<string>;
    resourceGroup?: pulumi.Input<string>;
    startTime?: pulumi.Input<string>;
}
