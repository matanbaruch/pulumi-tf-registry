// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DnsResolver extends pulumi.CustomResource {
    /**
     * Get an existing DnsResolver resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DnsResolverState, opts?: pulumi.CustomResourceOptions): DnsResolver {
        return new DnsResolver(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/dnsResolver:DnsResolver';

    /**
     * Returns true if the given object is an instance of DnsResolver.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DnsResolver {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DnsResolver.__pulumiType;
    }

    public /*out*/ readonly attachedVcnId!: pulumi.Output<string>;
    public readonly attachedViews!: pulumi.Output<outputs.DnsResolverAttachedView[] | undefined>;
    public readonly compartmentId!: pulumi.Output<string>;
    public /*out*/ readonly defaultViewId!: pulumi.Output<string>;
    public readonly definedTags!: pulumi.Output<{[key: string]: string}>;
    public readonly displayName!: pulumi.Output<string>;
    public /*out*/ readonly endpoints!: pulumi.Output<outputs.DnsResolverEndpoint[]>;
    public readonly freeformTags!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly isProtected!: pulumi.Output<boolean>;
    public readonly resolverId!: pulumi.Output<string>;
    public readonly rules!: pulumi.Output<outputs.DnsResolverRule[] | undefined>;
    public readonly scope!: pulumi.Output<string | undefined>;
    public /*out*/ readonly self!: pulumi.Output<string>;
    public /*out*/ readonly state!: pulumi.Output<string>;
    public /*out*/ readonly timeCreated!: pulumi.Output<string>;
    public /*out*/ readonly timeUpdated!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.DnsResolverTimeouts | undefined>;

    /**
     * Create a DnsResolver resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DnsResolverArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DnsResolverArgs | DnsResolverState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DnsResolverState | undefined;
            resourceInputs["attachedVcnId"] = state ? state.attachedVcnId : undefined;
            resourceInputs["attachedViews"] = state ? state.attachedViews : undefined;
            resourceInputs["compartmentId"] = state ? state.compartmentId : undefined;
            resourceInputs["defaultViewId"] = state ? state.defaultViewId : undefined;
            resourceInputs["definedTags"] = state ? state.definedTags : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["endpoints"] = state ? state.endpoints : undefined;
            resourceInputs["freeformTags"] = state ? state.freeformTags : undefined;
            resourceInputs["isProtected"] = state ? state.isProtected : undefined;
            resourceInputs["resolverId"] = state ? state.resolverId : undefined;
            resourceInputs["rules"] = state ? state.rules : undefined;
            resourceInputs["scope"] = state ? state.scope : undefined;
            resourceInputs["self"] = state ? state.self : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["timeCreated"] = state ? state.timeCreated : undefined;
            resourceInputs["timeUpdated"] = state ? state.timeUpdated : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as DnsResolverArgs | undefined;
            if ((!args || args.resolverId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resolverId'");
            }
            resourceInputs["attachedViews"] = args ? args.attachedViews : undefined;
            resourceInputs["compartmentId"] = args ? args.compartmentId : undefined;
            resourceInputs["definedTags"] = args ? args.definedTags : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["freeformTags"] = args ? args.freeformTags : undefined;
            resourceInputs["resolverId"] = args ? args.resolverId : undefined;
            resourceInputs["rules"] = args ? args.rules : undefined;
            resourceInputs["scope"] = args ? args.scope : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["attachedVcnId"] = undefined /*out*/;
            resourceInputs["defaultViewId"] = undefined /*out*/;
            resourceInputs["endpoints"] = undefined /*out*/;
            resourceInputs["isProtected"] = undefined /*out*/;
            resourceInputs["self"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["timeCreated"] = undefined /*out*/;
            resourceInputs["timeUpdated"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DnsResolver.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DnsResolver resources.
 */
export interface DnsResolverState {
    attachedVcnId?: pulumi.Input<string>;
    attachedViews?: pulumi.Input<pulumi.Input<inputs.DnsResolverAttachedView>[]>;
    compartmentId?: pulumi.Input<string>;
    defaultViewId?: pulumi.Input<string>;
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    displayName?: pulumi.Input<string>;
    endpoints?: pulumi.Input<pulumi.Input<inputs.DnsResolverEndpoint>[]>;
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    isProtected?: pulumi.Input<boolean>;
    resolverId?: pulumi.Input<string>;
    rules?: pulumi.Input<pulumi.Input<inputs.DnsResolverRule>[]>;
    scope?: pulumi.Input<string>;
    self?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    timeCreated?: pulumi.Input<string>;
    timeUpdated?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.DnsResolverTimeouts>;
}

/**
 * The set of arguments for constructing a DnsResolver resource.
 */
export interface DnsResolverArgs {
    attachedViews?: pulumi.Input<pulumi.Input<inputs.DnsResolverAttachedView>[]>;
    compartmentId?: pulumi.Input<string>;
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    displayName?: pulumi.Input<string>;
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    resolverId: pulumi.Input<string>;
    rules?: pulumi.Input<pulumi.Input<inputs.DnsResolverRule>[]>;
    scope?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.DnsResolverTimeouts>;
}
