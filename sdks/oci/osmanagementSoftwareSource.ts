// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class OsmanagementSoftwareSource extends pulumi.CustomResource {
    /**
     * Get an existing OsmanagementSoftwareSource resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OsmanagementSoftwareSourceState, opts?: pulumi.CustomResourceOptions): OsmanagementSoftwareSource {
        return new OsmanagementSoftwareSource(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/osmanagementSoftwareSource:OsmanagementSoftwareSource';

    /**
     * Returns true if the given object is an instance of OsmanagementSoftwareSource.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OsmanagementSoftwareSource {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OsmanagementSoftwareSource.__pulumiType;
    }

    public readonly archType!: pulumi.Output<string>;
    public /*out*/ readonly associatedManagedInstances!: pulumi.Output<outputs.OsmanagementSoftwareSourceAssociatedManagedInstance[]>;
    public readonly checksumType!: pulumi.Output<string>;
    public readonly compartmentId!: pulumi.Output<string>;
    public readonly definedTags!: pulumi.Output<{[key: string]: string}>;
    public readonly description!: pulumi.Output<string>;
    public readonly displayName!: pulumi.Output<string>;
    public readonly freeformTags!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly gpgKeyFingerprint!: pulumi.Output<string>;
    public /*out*/ readonly gpgKeyId!: pulumi.Output<string>;
    public /*out*/ readonly gpgKeyUrl!: pulumi.Output<string>;
    public readonly maintainerEmail!: pulumi.Output<string>;
    public readonly maintainerName!: pulumi.Output<string>;
    public readonly maintainerPhone!: pulumi.Output<string>;
    public /*out*/ readonly packages!: pulumi.Output<number>;
    public readonly parentId!: pulumi.Output<string>;
    public /*out*/ readonly parentName!: pulumi.Output<string>;
    public /*out*/ readonly repoType!: pulumi.Output<string>;
    public /*out*/ readonly state!: pulumi.Output<string>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.OsmanagementSoftwareSourceTimeouts | undefined>;
    public /*out*/ readonly url!: pulumi.Output<string>;

    /**
     * Create a OsmanagementSoftwareSource resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OsmanagementSoftwareSourceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OsmanagementSoftwareSourceArgs | OsmanagementSoftwareSourceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OsmanagementSoftwareSourceState | undefined;
            resourceInputs["archType"] = state ? state.archType : undefined;
            resourceInputs["associatedManagedInstances"] = state ? state.associatedManagedInstances : undefined;
            resourceInputs["checksumType"] = state ? state.checksumType : undefined;
            resourceInputs["compartmentId"] = state ? state.compartmentId : undefined;
            resourceInputs["definedTags"] = state ? state.definedTags : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["freeformTags"] = state ? state.freeformTags : undefined;
            resourceInputs["gpgKeyFingerprint"] = state ? state.gpgKeyFingerprint : undefined;
            resourceInputs["gpgKeyId"] = state ? state.gpgKeyId : undefined;
            resourceInputs["gpgKeyUrl"] = state ? state.gpgKeyUrl : undefined;
            resourceInputs["maintainerEmail"] = state ? state.maintainerEmail : undefined;
            resourceInputs["maintainerName"] = state ? state.maintainerName : undefined;
            resourceInputs["maintainerPhone"] = state ? state.maintainerPhone : undefined;
            resourceInputs["packages"] = state ? state.packages : undefined;
            resourceInputs["parentId"] = state ? state.parentId : undefined;
            resourceInputs["parentName"] = state ? state.parentName : undefined;
            resourceInputs["repoType"] = state ? state.repoType : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["url"] = state ? state.url : undefined;
        } else {
            const args = argsOrState as OsmanagementSoftwareSourceArgs | undefined;
            if ((!args || args.archType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'archType'");
            }
            if ((!args || args.compartmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'compartmentId'");
            }
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            resourceInputs["archType"] = args ? args.archType : undefined;
            resourceInputs["checksumType"] = args ? args.checksumType : undefined;
            resourceInputs["compartmentId"] = args ? args.compartmentId : undefined;
            resourceInputs["definedTags"] = args ? args.definedTags : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["freeformTags"] = args ? args.freeformTags : undefined;
            resourceInputs["maintainerEmail"] = args ? args.maintainerEmail : undefined;
            resourceInputs["maintainerName"] = args ? args.maintainerName : undefined;
            resourceInputs["maintainerPhone"] = args ? args.maintainerPhone : undefined;
            resourceInputs["parentId"] = args ? args.parentId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["associatedManagedInstances"] = undefined /*out*/;
            resourceInputs["gpgKeyFingerprint"] = undefined /*out*/;
            resourceInputs["gpgKeyId"] = undefined /*out*/;
            resourceInputs["gpgKeyUrl"] = undefined /*out*/;
            resourceInputs["packages"] = undefined /*out*/;
            resourceInputs["parentName"] = undefined /*out*/;
            resourceInputs["repoType"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["url"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OsmanagementSoftwareSource.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering OsmanagementSoftwareSource resources.
 */
export interface OsmanagementSoftwareSourceState {
    archType?: pulumi.Input<string>;
    associatedManagedInstances?: pulumi.Input<pulumi.Input<inputs.OsmanagementSoftwareSourceAssociatedManagedInstance>[]>;
    checksumType?: pulumi.Input<string>;
    compartmentId?: pulumi.Input<string>;
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    description?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    gpgKeyFingerprint?: pulumi.Input<string>;
    gpgKeyId?: pulumi.Input<string>;
    gpgKeyUrl?: pulumi.Input<string>;
    maintainerEmail?: pulumi.Input<string>;
    maintainerName?: pulumi.Input<string>;
    maintainerPhone?: pulumi.Input<string>;
    packages?: pulumi.Input<number>;
    parentId?: pulumi.Input<string>;
    parentName?: pulumi.Input<string>;
    repoType?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.OsmanagementSoftwareSourceTimeouts>;
    url?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a OsmanagementSoftwareSource resource.
 */
export interface OsmanagementSoftwareSourceArgs {
    archType: pulumi.Input<string>;
    checksumType?: pulumi.Input<string>;
    compartmentId: pulumi.Input<string>;
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    description?: pulumi.Input<string>;
    displayName: pulumi.Input<string>;
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    maintainerEmail?: pulumi.Input<string>;
    maintainerName?: pulumi.Input<string>;
    maintainerPhone?: pulumi.Input<string>;
    parentId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.OsmanagementSoftwareSourceTimeouts>;
}
