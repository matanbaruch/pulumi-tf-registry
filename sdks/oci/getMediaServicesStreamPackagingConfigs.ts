// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getMediaServicesStreamPackagingConfigs(args: GetMediaServicesStreamPackagingConfigsArgs, opts?: pulumi.InvokeOptions): Promise<GetMediaServicesStreamPackagingConfigsResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getMediaServicesStreamPackagingConfigs:getMediaServicesStreamPackagingConfigs", {
        "displayName": args.displayName,
        "distributionChannelId": args.distributionChannelId,
        "filters": args.filters,
        "id": args.id,
        "state": args.state,
        "streamPackagingConfigId": args.streamPackagingConfigId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getMediaServicesStreamPackagingConfigs.
 */
export interface GetMediaServicesStreamPackagingConfigsArgs {
    displayName?: string;
    distributionChannelId: string;
    filters?: inputs.GetMediaServicesStreamPackagingConfigsFilter[];
    id?: string;
    state?: string;
    streamPackagingConfigId?: string;
}

/**
 * A collection of values returned by getMediaServicesStreamPackagingConfigs.
 */
export interface GetMediaServicesStreamPackagingConfigsResult {
    readonly displayName?: string;
    readonly distributionChannelId: string;
    readonly filters?: outputs.GetMediaServicesStreamPackagingConfigsFilter[];
    readonly id: string;
    readonly state?: string;
    readonly streamPackagingConfigCollections: outputs.GetMediaServicesStreamPackagingConfigsStreamPackagingConfigCollection[];
    readonly streamPackagingConfigId?: string;
}
export function getMediaServicesStreamPackagingConfigsOutput(args: GetMediaServicesStreamPackagingConfigsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetMediaServicesStreamPackagingConfigsResult> {
    return pulumi.output(args).apply((a: any) => getMediaServicesStreamPackagingConfigs(a, opts))
}

/**
 * A collection of arguments for invoking getMediaServicesStreamPackagingConfigs.
 */
export interface GetMediaServicesStreamPackagingConfigsOutputArgs {
    displayName?: pulumi.Input<string>;
    distributionChannelId: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.GetMediaServicesStreamPackagingConfigsFilterArgs>[]>;
    id?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    streamPackagingConfigId?: pulumi.Input<string>;
}
