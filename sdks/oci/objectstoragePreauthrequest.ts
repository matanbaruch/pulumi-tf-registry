// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ObjectstoragePreauthrequest extends pulumi.CustomResource {
    /**
     * Get an existing ObjectstoragePreauthrequest resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ObjectstoragePreauthrequestState, opts?: pulumi.CustomResourceOptions): ObjectstoragePreauthrequest {
        return new ObjectstoragePreauthrequest(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/objectstoragePreauthrequest:ObjectstoragePreauthrequest';

    /**
     * Returns true if the given object is an instance of ObjectstoragePreauthrequest.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ObjectstoragePreauthrequest {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ObjectstoragePreauthrequest.__pulumiType;
    }

    public readonly accessType!: pulumi.Output<string>;
    public /*out*/ readonly accessUri!: pulumi.Output<string>;
    public readonly bucket!: pulumi.Output<string>;
    public readonly bucketListingAction!: pulumi.Output<string>;
    public /*out*/ readonly fullPath!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly namespace!: pulumi.Output<string>;
    /**
     * @deprecated Deprecated
     */
    public readonly object!: pulumi.Output<string>;
    public readonly objectName!: pulumi.Output<string>;
    public /*out*/ readonly parId!: pulumi.Output<string>;
    public /*out*/ readonly timeCreated!: pulumi.Output<string>;
    public readonly timeExpires!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.ObjectstoragePreauthrequestTimeouts | undefined>;

    /**
     * Create a ObjectstoragePreauthrequest resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ObjectstoragePreauthrequestArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ObjectstoragePreauthrequestArgs | ObjectstoragePreauthrequestState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ObjectstoragePreauthrequestState | undefined;
            resourceInputs["accessType"] = state ? state.accessType : undefined;
            resourceInputs["accessUri"] = state ? state.accessUri : undefined;
            resourceInputs["bucket"] = state ? state.bucket : undefined;
            resourceInputs["bucketListingAction"] = state ? state.bucketListingAction : undefined;
            resourceInputs["fullPath"] = state ? state.fullPath : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["object"] = state ? state.object : undefined;
            resourceInputs["objectName"] = state ? state.objectName : undefined;
            resourceInputs["parId"] = state ? state.parId : undefined;
            resourceInputs["timeCreated"] = state ? state.timeCreated : undefined;
            resourceInputs["timeExpires"] = state ? state.timeExpires : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as ObjectstoragePreauthrequestArgs | undefined;
            if ((!args || args.accessType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accessType'");
            }
            if ((!args || args.bucket === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bucket'");
            }
            if ((!args || args.namespace === undefined) && !opts.urn) {
                throw new Error("Missing required property 'namespace'");
            }
            if ((!args || args.timeExpires === undefined) && !opts.urn) {
                throw new Error("Missing required property 'timeExpires'");
            }
            resourceInputs["accessType"] = args ? args.accessType : undefined;
            resourceInputs["bucket"] = args ? args.bucket : undefined;
            resourceInputs["bucketListingAction"] = args ? args.bucketListingAction : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["object"] = args ? args.object : undefined;
            resourceInputs["objectName"] = args ? args.objectName : undefined;
            resourceInputs["timeExpires"] = args ? args.timeExpires : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["accessUri"] = undefined /*out*/;
            resourceInputs["fullPath"] = undefined /*out*/;
            resourceInputs["parId"] = undefined /*out*/;
            resourceInputs["timeCreated"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ObjectstoragePreauthrequest.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ObjectstoragePreauthrequest resources.
 */
export interface ObjectstoragePreauthrequestState {
    accessType?: pulumi.Input<string>;
    accessUri?: pulumi.Input<string>;
    bucket?: pulumi.Input<string>;
    bucketListingAction?: pulumi.Input<string>;
    fullPath?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    namespace?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    object?: pulumi.Input<string>;
    objectName?: pulumi.Input<string>;
    parId?: pulumi.Input<string>;
    timeCreated?: pulumi.Input<string>;
    timeExpires?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ObjectstoragePreauthrequestTimeouts>;
}

/**
 * The set of arguments for constructing a ObjectstoragePreauthrequest resource.
 */
export interface ObjectstoragePreauthrequestArgs {
    accessType: pulumi.Input<string>;
    bucket: pulumi.Input<string>;
    bucketListingAction?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    namespace: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    object?: pulumi.Input<string>;
    objectName?: pulumi.Input<string>;
    timeExpires: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ObjectstoragePreauthrequestTimeouts>;
}
