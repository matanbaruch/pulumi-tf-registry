// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DatabaseMaintenanceRun extends pulumi.CustomResource {
    /**
     * Get an existing DatabaseMaintenanceRun resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DatabaseMaintenanceRunState, opts?: pulumi.CustomResourceOptions): DatabaseMaintenanceRun {
        return new DatabaseMaintenanceRun(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/databaseMaintenanceRun:DatabaseMaintenanceRun';

    /**
     * Returns true if the given object is an instance of DatabaseMaintenanceRun.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DatabaseMaintenanceRun {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DatabaseMaintenanceRun.__pulumiType;
    }

    public readonly compartmentId!: pulumi.Output<string>;
    public /*out*/ readonly currentCustomActionTimeoutInMins!: pulumi.Output<number>;
    public /*out*/ readonly currentPatchingComponent!: pulumi.Output<string>;
    public /*out*/ readonly customActionTimeoutInMins!: pulumi.Output<number>;
    public readonly databaseSoftwareImageId!: pulumi.Output<string>;
    public /*out*/ readonly description!: pulumi.Output<string>;
    public /*out*/ readonly displayName!: pulumi.Output<string>;
    public /*out*/ readonly estimatedComponentPatchingStartTime!: pulumi.Output<string>;
    public /*out*/ readonly estimatedPatchingTimes!: pulumi.Output<outputs.DatabaseMaintenanceRunEstimatedPatchingTime[]>;
    public /*out*/ readonly isCustomActionTimeoutEnabled!: pulumi.Output<boolean>;
    public readonly isDstFileUpdateEnabled!: pulumi.Output<boolean>;
    public /*out*/ readonly lifecycleDetails!: pulumi.Output<string>;
    public /*out*/ readonly maintenanceSubtype!: pulumi.Output<string>;
    public /*out*/ readonly maintenanceType!: pulumi.Output<string>;
    public /*out*/ readonly patchFailureCount!: pulumi.Output<number>;
    public /*out*/ readonly patchId!: pulumi.Output<string>;
    public readonly patchType!: pulumi.Output<string>;
    public /*out*/ readonly patchingEndTime!: pulumi.Output<string>;
    public readonly patchingMode!: pulumi.Output<string>;
    public /*out*/ readonly patchingStartTime!: pulumi.Output<string>;
    public /*out*/ readonly patchingStatus!: pulumi.Output<string>;
    public /*out*/ readonly peerMaintenanceRunId!: pulumi.Output<string>;
    public /*out*/ readonly state!: pulumi.Output<string>;
    public /*out*/ readonly targetDbServerVersion!: pulumi.Output<string>;
    public readonly targetResourceId!: pulumi.Output<string>;
    public /*out*/ readonly targetResourceType!: pulumi.Output<string>;
    public /*out*/ readonly targetStorageServerVersion!: pulumi.Output<string>;
    public /*out*/ readonly timeEnded!: pulumi.Output<string>;
    public readonly timeScheduled!: pulumi.Output<string>;
    public /*out*/ readonly timeStarted!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.DatabaseMaintenanceRunTimeouts | undefined>;

    /**
     * Create a DatabaseMaintenanceRun resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatabaseMaintenanceRunArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DatabaseMaintenanceRunArgs | DatabaseMaintenanceRunState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DatabaseMaintenanceRunState | undefined;
            resourceInputs["compartmentId"] = state ? state.compartmentId : undefined;
            resourceInputs["currentCustomActionTimeoutInMins"] = state ? state.currentCustomActionTimeoutInMins : undefined;
            resourceInputs["currentPatchingComponent"] = state ? state.currentPatchingComponent : undefined;
            resourceInputs["customActionTimeoutInMins"] = state ? state.customActionTimeoutInMins : undefined;
            resourceInputs["databaseSoftwareImageId"] = state ? state.databaseSoftwareImageId : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["estimatedComponentPatchingStartTime"] = state ? state.estimatedComponentPatchingStartTime : undefined;
            resourceInputs["estimatedPatchingTimes"] = state ? state.estimatedPatchingTimes : undefined;
            resourceInputs["isCustomActionTimeoutEnabled"] = state ? state.isCustomActionTimeoutEnabled : undefined;
            resourceInputs["isDstFileUpdateEnabled"] = state ? state.isDstFileUpdateEnabled : undefined;
            resourceInputs["lifecycleDetails"] = state ? state.lifecycleDetails : undefined;
            resourceInputs["maintenanceSubtype"] = state ? state.maintenanceSubtype : undefined;
            resourceInputs["maintenanceType"] = state ? state.maintenanceType : undefined;
            resourceInputs["patchFailureCount"] = state ? state.patchFailureCount : undefined;
            resourceInputs["patchId"] = state ? state.patchId : undefined;
            resourceInputs["patchType"] = state ? state.patchType : undefined;
            resourceInputs["patchingEndTime"] = state ? state.patchingEndTime : undefined;
            resourceInputs["patchingMode"] = state ? state.patchingMode : undefined;
            resourceInputs["patchingStartTime"] = state ? state.patchingStartTime : undefined;
            resourceInputs["patchingStatus"] = state ? state.patchingStatus : undefined;
            resourceInputs["peerMaintenanceRunId"] = state ? state.peerMaintenanceRunId : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["targetDbServerVersion"] = state ? state.targetDbServerVersion : undefined;
            resourceInputs["targetResourceId"] = state ? state.targetResourceId : undefined;
            resourceInputs["targetResourceType"] = state ? state.targetResourceType : undefined;
            resourceInputs["targetStorageServerVersion"] = state ? state.targetStorageServerVersion : undefined;
            resourceInputs["timeEnded"] = state ? state.timeEnded : undefined;
            resourceInputs["timeScheduled"] = state ? state.timeScheduled : undefined;
            resourceInputs["timeStarted"] = state ? state.timeStarted : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as DatabaseMaintenanceRunArgs | undefined;
            if ((!args || args.patchType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'patchType'");
            }
            if ((!args || args.targetResourceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetResourceId'");
            }
            if ((!args || args.timeScheduled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'timeScheduled'");
            }
            resourceInputs["compartmentId"] = args ? args.compartmentId : undefined;
            resourceInputs["databaseSoftwareImageId"] = args ? args.databaseSoftwareImageId : undefined;
            resourceInputs["isDstFileUpdateEnabled"] = args ? args.isDstFileUpdateEnabled : undefined;
            resourceInputs["patchType"] = args ? args.patchType : undefined;
            resourceInputs["patchingMode"] = args ? args.patchingMode : undefined;
            resourceInputs["targetResourceId"] = args ? args.targetResourceId : undefined;
            resourceInputs["timeScheduled"] = args ? args.timeScheduled : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["currentCustomActionTimeoutInMins"] = undefined /*out*/;
            resourceInputs["currentPatchingComponent"] = undefined /*out*/;
            resourceInputs["customActionTimeoutInMins"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["displayName"] = undefined /*out*/;
            resourceInputs["estimatedComponentPatchingStartTime"] = undefined /*out*/;
            resourceInputs["estimatedPatchingTimes"] = undefined /*out*/;
            resourceInputs["isCustomActionTimeoutEnabled"] = undefined /*out*/;
            resourceInputs["lifecycleDetails"] = undefined /*out*/;
            resourceInputs["maintenanceSubtype"] = undefined /*out*/;
            resourceInputs["maintenanceType"] = undefined /*out*/;
            resourceInputs["patchFailureCount"] = undefined /*out*/;
            resourceInputs["patchId"] = undefined /*out*/;
            resourceInputs["patchingEndTime"] = undefined /*out*/;
            resourceInputs["patchingStartTime"] = undefined /*out*/;
            resourceInputs["patchingStatus"] = undefined /*out*/;
            resourceInputs["peerMaintenanceRunId"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["targetDbServerVersion"] = undefined /*out*/;
            resourceInputs["targetResourceType"] = undefined /*out*/;
            resourceInputs["targetStorageServerVersion"] = undefined /*out*/;
            resourceInputs["timeEnded"] = undefined /*out*/;
            resourceInputs["timeStarted"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DatabaseMaintenanceRun.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DatabaseMaintenanceRun resources.
 */
export interface DatabaseMaintenanceRunState {
    compartmentId?: pulumi.Input<string>;
    currentCustomActionTimeoutInMins?: pulumi.Input<number>;
    currentPatchingComponent?: pulumi.Input<string>;
    customActionTimeoutInMins?: pulumi.Input<number>;
    databaseSoftwareImageId?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    estimatedComponentPatchingStartTime?: pulumi.Input<string>;
    estimatedPatchingTimes?: pulumi.Input<pulumi.Input<inputs.DatabaseMaintenanceRunEstimatedPatchingTime>[]>;
    isCustomActionTimeoutEnabled?: pulumi.Input<boolean>;
    isDstFileUpdateEnabled?: pulumi.Input<boolean>;
    lifecycleDetails?: pulumi.Input<string>;
    maintenanceSubtype?: pulumi.Input<string>;
    maintenanceType?: pulumi.Input<string>;
    patchFailureCount?: pulumi.Input<number>;
    patchId?: pulumi.Input<string>;
    patchType?: pulumi.Input<string>;
    patchingEndTime?: pulumi.Input<string>;
    patchingMode?: pulumi.Input<string>;
    patchingStartTime?: pulumi.Input<string>;
    patchingStatus?: pulumi.Input<string>;
    peerMaintenanceRunId?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    targetDbServerVersion?: pulumi.Input<string>;
    targetResourceId?: pulumi.Input<string>;
    targetResourceType?: pulumi.Input<string>;
    targetStorageServerVersion?: pulumi.Input<string>;
    timeEnded?: pulumi.Input<string>;
    timeScheduled?: pulumi.Input<string>;
    timeStarted?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.DatabaseMaintenanceRunTimeouts>;
}

/**
 * The set of arguments for constructing a DatabaseMaintenanceRun resource.
 */
export interface DatabaseMaintenanceRunArgs {
    compartmentId?: pulumi.Input<string>;
    databaseSoftwareImageId?: pulumi.Input<string>;
    isDstFileUpdateEnabled?: pulumi.Input<boolean>;
    patchType: pulumi.Input<string>;
    patchingMode?: pulumi.Input<string>;
    targetResourceId: pulumi.Input<string>;
    timeScheduled: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.DatabaseMaintenanceRunTimeouts>;
}
