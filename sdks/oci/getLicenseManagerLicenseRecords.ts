// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getLicenseManagerLicenseRecords(args: GetLicenseManagerLicenseRecordsArgs, opts?: pulumi.InvokeOptions): Promise<GetLicenseManagerLicenseRecordsResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getLicenseManagerLicenseRecords:getLicenseManagerLicenseRecords", {
        "filters": args.filters,
        "id": args.id,
        "productLicenseId": args.productLicenseId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getLicenseManagerLicenseRecords.
 */
export interface GetLicenseManagerLicenseRecordsArgs {
    filters?: inputs.GetLicenseManagerLicenseRecordsFilter[];
    id?: string;
    productLicenseId: string;
}

/**
 * A collection of values returned by getLicenseManagerLicenseRecords.
 */
export interface GetLicenseManagerLicenseRecordsResult {
    readonly filters?: outputs.GetLicenseManagerLicenseRecordsFilter[];
    readonly id: string;
    readonly licenseRecordCollections: outputs.GetLicenseManagerLicenseRecordsLicenseRecordCollection[];
    readonly productLicenseId: string;
}
export function getLicenseManagerLicenseRecordsOutput(args: GetLicenseManagerLicenseRecordsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetLicenseManagerLicenseRecordsResult> {
    return pulumi.output(args).apply((a: any) => getLicenseManagerLicenseRecords(a, opts))
}

/**
 * A collection of arguments for invoking getLicenseManagerLicenseRecords.
 */
export interface GetLicenseManagerLicenseRecordsOutputArgs {
    filters?: pulumi.Input<pulumi.Input<inputs.GetLicenseManagerLicenseRecordsFilterArgs>[]>;
    id?: pulumi.Input<string>;
    productLicenseId: pulumi.Input<string>;
}
