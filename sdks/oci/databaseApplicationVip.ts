// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DatabaseApplicationVip extends pulumi.CustomResource {
    /**
     * Get an existing DatabaseApplicationVip resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DatabaseApplicationVipState, opts?: pulumi.CustomResourceOptions): DatabaseApplicationVip {
        return new DatabaseApplicationVip(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/databaseApplicationVip:DatabaseApplicationVip';

    /**
     * Returns true if the given object is an instance of DatabaseApplicationVip.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DatabaseApplicationVip {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DatabaseApplicationVip.__pulumiType;
    }

    public readonly cloudVmClusterId!: pulumi.Output<string>;
    public /*out*/ readonly compartmentId!: pulumi.Output<string>;
    public readonly dbNodeId!: pulumi.Output<string>;
    public /*out*/ readonly definedTags!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly freeformTags!: pulumi.Output<{[key: string]: string}>;
    public readonly hostnameLabel!: pulumi.Output<string>;
    public readonly ipAddress!: pulumi.Output<string>;
    public /*out*/ readonly lifecycleDetails!: pulumi.Output<string>;
    public /*out*/ readonly state!: pulumi.Output<string>;
    public readonly subnetId!: pulumi.Output<string>;
    public /*out*/ readonly timeAssigned!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.DatabaseApplicationVipTimeouts | undefined>;

    /**
     * Create a DatabaseApplicationVip resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatabaseApplicationVipArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DatabaseApplicationVipArgs | DatabaseApplicationVipState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DatabaseApplicationVipState | undefined;
            resourceInputs["cloudVmClusterId"] = state ? state.cloudVmClusterId : undefined;
            resourceInputs["compartmentId"] = state ? state.compartmentId : undefined;
            resourceInputs["dbNodeId"] = state ? state.dbNodeId : undefined;
            resourceInputs["definedTags"] = state ? state.definedTags : undefined;
            resourceInputs["freeformTags"] = state ? state.freeformTags : undefined;
            resourceInputs["hostnameLabel"] = state ? state.hostnameLabel : undefined;
            resourceInputs["ipAddress"] = state ? state.ipAddress : undefined;
            resourceInputs["lifecycleDetails"] = state ? state.lifecycleDetails : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["subnetId"] = state ? state.subnetId : undefined;
            resourceInputs["timeAssigned"] = state ? state.timeAssigned : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as DatabaseApplicationVipArgs | undefined;
            if ((!args || args.cloudVmClusterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cloudVmClusterId'");
            }
            if ((!args || args.hostnameLabel === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hostnameLabel'");
            }
            if ((!args || args.subnetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnetId'");
            }
            resourceInputs["cloudVmClusterId"] = args ? args.cloudVmClusterId : undefined;
            resourceInputs["dbNodeId"] = args ? args.dbNodeId : undefined;
            resourceInputs["hostnameLabel"] = args ? args.hostnameLabel : undefined;
            resourceInputs["ipAddress"] = args ? args.ipAddress : undefined;
            resourceInputs["subnetId"] = args ? args.subnetId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["compartmentId"] = undefined /*out*/;
            resourceInputs["definedTags"] = undefined /*out*/;
            resourceInputs["freeformTags"] = undefined /*out*/;
            resourceInputs["lifecycleDetails"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["timeAssigned"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DatabaseApplicationVip.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DatabaseApplicationVip resources.
 */
export interface DatabaseApplicationVipState {
    cloudVmClusterId?: pulumi.Input<string>;
    compartmentId?: pulumi.Input<string>;
    dbNodeId?: pulumi.Input<string>;
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    hostnameLabel?: pulumi.Input<string>;
    ipAddress?: pulumi.Input<string>;
    lifecycleDetails?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    subnetId?: pulumi.Input<string>;
    timeAssigned?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.DatabaseApplicationVipTimeouts>;
}

/**
 * The set of arguments for constructing a DatabaseApplicationVip resource.
 */
export interface DatabaseApplicationVipArgs {
    cloudVmClusterId: pulumi.Input<string>;
    dbNodeId?: pulumi.Input<string>;
    hostnameLabel: pulumi.Input<string>;
    ipAddress?: pulumi.Input<string>;
    subnetId: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.DatabaseApplicationVipTimeouts>;
}
