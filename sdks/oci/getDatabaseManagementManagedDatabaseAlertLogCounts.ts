// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getDatabaseManagementManagedDatabaseAlertLogCounts(args: GetDatabaseManagementManagedDatabaseAlertLogCountsArgs, opts?: pulumi.InvokeOptions): Promise<GetDatabaseManagementManagedDatabaseAlertLogCountsResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getDatabaseManagementManagedDatabaseAlertLogCounts:getDatabaseManagementManagedDatabaseAlertLogCounts", {
        "filters": args.filters,
        "groupBy": args.groupBy,
        "id": args.id,
        "isRegularExpression": args.isRegularExpression,
        "levelFilter": args.levelFilter,
        "logSearchText": args.logSearchText,
        "managedDatabaseId": args.managedDatabaseId,
        "timeGreaterThanOrEqualTo": args.timeGreaterThanOrEqualTo,
        "timeLessThanOrEqualTo": args.timeLessThanOrEqualTo,
        "typeFilter": args.typeFilter,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getDatabaseManagementManagedDatabaseAlertLogCounts.
 */
export interface GetDatabaseManagementManagedDatabaseAlertLogCountsArgs {
    filters?: inputs.GetDatabaseManagementManagedDatabaseAlertLogCountsFilter[];
    groupBy?: string;
    id?: string;
    isRegularExpression?: boolean;
    levelFilter?: string;
    logSearchText?: string;
    managedDatabaseId: string;
    timeGreaterThanOrEqualTo?: string;
    timeLessThanOrEqualTo?: string;
    typeFilter?: string;
}

/**
 * A collection of values returned by getDatabaseManagementManagedDatabaseAlertLogCounts.
 */
export interface GetDatabaseManagementManagedDatabaseAlertLogCountsResult {
    readonly alertLogCountsCollections: outputs.GetDatabaseManagementManagedDatabaseAlertLogCountsAlertLogCountsCollection[];
    readonly filters?: outputs.GetDatabaseManagementManagedDatabaseAlertLogCountsFilter[];
    readonly groupBy?: string;
    readonly id: string;
    readonly isRegularExpression?: boolean;
    readonly levelFilter?: string;
    readonly logSearchText?: string;
    readonly managedDatabaseId: string;
    readonly timeGreaterThanOrEqualTo?: string;
    readonly timeLessThanOrEqualTo?: string;
    readonly typeFilter?: string;
}
export function getDatabaseManagementManagedDatabaseAlertLogCountsOutput(args: GetDatabaseManagementManagedDatabaseAlertLogCountsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDatabaseManagementManagedDatabaseAlertLogCountsResult> {
    return pulumi.output(args).apply((a: any) => getDatabaseManagementManagedDatabaseAlertLogCounts(a, opts))
}

/**
 * A collection of arguments for invoking getDatabaseManagementManagedDatabaseAlertLogCounts.
 */
export interface GetDatabaseManagementManagedDatabaseAlertLogCountsOutputArgs {
    filters?: pulumi.Input<pulumi.Input<inputs.GetDatabaseManagementManagedDatabaseAlertLogCountsFilterArgs>[]>;
    groupBy?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    isRegularExpression?: pulumi.Input<boolean>;
    levelFilter?: pulumi.Input<string>;
    logSearchText?: pulumi.Input<string>;
    managedDatabaseId: pulumi.Input<string>;
    timeGreaterThanOrEqualTo?: pulumi.Input<string>;
    timeLessThanOrEqualTo?: pulumi.Input<string>;
    typeFilter?: pulumi.Input<string>;
}
