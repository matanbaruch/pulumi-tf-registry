// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class BudgetBudget extends pulumi.CustomResource {
    /**
     * Get an existing BudgetBudget resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BudgetBudgetState, opts?: pulumi.CustomResourceOptions): BudgetBudget {
        return new BudgetBudget(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/budgetBudget:BudgetBudget';

    /**
     * Returns true if the given object is an instance of BudgetBudget.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BudgetBudget {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BudgetBudget.__pulumiType;
    }

    public /*out*/ readonly actualSpend!: pulumi.Output<number>;
    public /*out*/ readonly alertRuleCount!: pulumi.Output<number>;
    public readonly amount!: pulumi.Output<number>;
    public readonly budgetProcessingPeriodStartOffset!: pulumi.Output<number>;
    public readonly compartmentId!: pulumi.Output<string>;
    public readonly definedTags!: pulumi.Output<{[key: string]: string}>;
    public readonly description!: pulumi.Output<string>;
    public readonly displayName!: pulumi.Output<string>;
    public readonly endDate!: pulumi.Output<string>;
    public /*out*/ readonly forecastedSpend!: pulumi.Output<number>;
    public readonly freeformTags!: pulumi.Output<{[key: string]: string}>;
    public readonly processingPeriodType!: pulumi.Output<string>;
    public readonly resetPeriod!: pulumi.Output<string>;
    public readonly startDate!: pulumi.Output<string>;
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * @deprecated Deprecated
     */
    public readonly targetCompartmentId!: pulumi.Output<string>;
    public readonly targetType!: pulumi.Output<string>;
    public readonly targets!: pulumi.Output<string[]>;
    public /*out*/ readonly timeCreated!: pulumi.Output<string>;
    public /*out*/ readonly timeSpendComputed!: pulumi.Output<string>;
    public /*out*/ readonly timeUpdated!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.BudgetBudgetTimeouts | undefined>;
    public /*out*/ readonly version!: pulumi.Output<number>;

    /**
     * Create a BudgetBudget resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BudgetBudgetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BudgetBudgetArgs | BudgetBudgetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BudgetBudgetState | undefined;
            resourceInputs["actualSpend"] = state ? state.actualSpend : undefined;
            resourceInputs["alertRuleCount"] = state ? state.alertRuleCount : undefined;
            resourceInputs["amount"] = state ? state.amount : undefined;
            resourceInputs["budgetProcessingPeriodStartOffset"] = state ? state.budgetProcessingPeriodStartOffset : undefined;
            resourceInputs["compartmentId"] = state ? state.compartmentId : undefined;
            resourceInputs["definedTags"] = state ? state.definedTags : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["endDate"] = state ? state.endDate : undefined;
            resourceInputs["forecastedSpend"] = state ? state.forecastedSpend : undefined;
            resourceInputs["freeformTags"] = state ? state.freeformTags : undefined;
            resourceInputs["processingPeriodType"] = state ? state.processingPeriodType : undefined;
            resourceInputs["resetPeriod"] = state ? state.resetPeriod : undefined;
            resourceInputs["startDate"] = state ? state.startDate : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["targetCompartmentId"] = state ? state.targetCompartmentId : undefined;
            resourceInputs["targetType"] = state ? state.targetType : undefined;
            resourceInputs["targets"] = state ? state.targets : undefined;
            resourceInputs["timeCreated"] = state ? state.timeCreated : undefined;
            resourceInputs["timeSpendComputed"] = state ? state.timeSpendComputed : undefined;
            resourceInputs["timeUpdated"] = state ? state.timeUpdated : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as BudgetBudgetArgs | undefined;
            if ((!args || args.amount === undefined) && !opts.urn) {
                throw new Error("Missing required property 'amount'");
            }
            if ((!args || args.compartmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'compartmentId'");
            }
            if ((!args || args.resetPeriod === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resetPeriod'");
            }
            resourceInputs["amount"] = args ? args.amount : undefined;
            resourceInputs["budgetProcessingPeriodStartOffset"] = args ? args.budgetProcessingPeriodStartOffset : undefined;
            resourceInputs["compartmentId"] = args ? args.compartmentId : undefined;
            resourceInputs["definedTags"] = args ? args.definedTags : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["endDate"] = args ? args.endDate : undefined;
            resourceInputs["freeformTags"] = args ? args.freeformTags : undefined;
            resourceInputs["processingPeriodType"] = args ? args.processingPeriodType : undefined;
            resourceInputs["resetPeriod"] = args ? args.resetPeriod : undefined;
            resourceInputs["startDate"] = args ? args.startDate : undefined;
            resourceInputs["targetCompartmentId"] = args ? args.targetCompartmentId : undefined;
            resourceInputs["targetType"] = args ? args.targetType : undefined;
            resourceInputs["targets"] = args ? args.targets : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["actualSpend"] = undefined /*out*/;
            resourceInputs["alertRuleCount"] = undefined /*out*/;
            resourceInputs["forecastedSpend"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["timeCreated"] = undefined /*out*/;
            resourceInputs["timeSpendComputed"] = undefined /*out*/;
            resourceInputs["timeUpdated"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BudgetBudget.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering BudgetBudget resources.
 */
export interface BudgetBudgetState {
    actualSpend?: pulumi.Input<number>;
    alertRuleCount?: pulumi.Input<number>;
    amount?: pulumi.Input<number>;
    budgetProcessingPeriodStartOffset?: pulumi.Input<number>;
    compartmentId?: pulumi.Input<string>;
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    description?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    endDate?: pulumi.Input<string>;
    forecastedSpend?: pulumi.Input<number>;
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    processingPeriodType?: pulumi.Input<string>;
    resetPeriod?: pulumi.Input<string>;
    startDate?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    targetCompartmentId?: pulumi.Input<string>;
    targetType?: pulumi.Input<string>;
    targets?: pulumi.Input<pulumi.Input<string>[]>;
    timeCreated?: pulumi.Input<string>;
    timeSpendComputed?: pulumi.Input<string>;
    timeUpdated?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.BudgetBudgetTimeouts>;
    version?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a BudgetBudget resource.
 */
export interface BudgetBudgetArgs {
    amount: pulumi.Input<number>;
    budgetProcessingPeriodStartOffset?: pulumi.Input<number>;
    compartmentId: pulumi.Input<string>;
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    description?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    endDate?: pulumi.Input<string>;
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    processingPeriodType?: pulumi.Input<string>;
    resetPeriod: pulumi.Input<string>;
    startDate?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    targetCompartmentId?: pulumi.Input<string>;
    targetType?: pulumi.Input<string>;
    targets?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.BudgetBudgetTimeouts>;
}
