// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ContainerengineCluster extends pulumi.CustomResource {
    /**
     * Get an existing ContainerengineCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ContainerengineClusterState, opts?: pulumi.CustomResourceOptions): ContainerengineCluster {
        return new ContainerengineCluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/containerengineCluster:ContainerengineCluster';

    /**
     * Returns true if the given object is an instance of ContainerengineCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ContainerengineCluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ContainerengineCluster.__pulumiType;
    }

    public /*out*/ readonly availableKubernetesUpgrades!: pulumi.Output<string[]>;
    public readonly clusterPodNetworkOptions!: pulumi.Output<outputs.ContainerengineClusterClusterPodNetworkOption[] | undefined>;
    public readonly compartmentId!: pulumi.Output<string>;
    public readonly definedTags!: pulumi.Output<{[key: string]: string}>;
    public readonly endpointConfig!: pulumi.Output<outputs.ContainerengineClusterEndpointConfig | undefined>;
    public /*out*/ readonly endpoints!: pulumi.Output<outputs.ContainerengineClusterEndpoint[]>;
    public readonly freeformTags!: pulumi.Output<{[key: string]: string}>;
    public readonly imagePolicyConfig!: pulumi.Output<outputs.ContainerengineClusterImagePolicyConfig | undefined>;
    public readonly kmsKeyId!: pulumi.Output<string>;
    public readonly kubernetesVersion!: pulumi.Output<string>;
    public /*out*/ readonly lifecycleDetails!: pulumi.Output<string>;
    public /*out*/ readonly metadatas!: pulumi.Output<outputs.ContainerengineClusterMetadata[]>;
    public readonly name!: pulumi.Output<string>;
    public readonly options!: pulumi.Output<outputs.ContainerengineClusterOptions | undefined>;
    public /*out*/ readonly state!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.ContainerengineClusterTimeouts | undefined>;
    public readonly type!: pulumi.Output<string>;
    public readonly vcnId!: pulumi.Output<string>;

    /**
     * Create a ContainerengineCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ContainerengineClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ContainerengineClusterArgs | ContainerengineClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ContainerengineClusterState | undefined;
            resourceInputs["availableKubernetesUpgrades"] = state ? state.availableKubernetesUpgrades : undefined;
            resourceInputs["clusterPodNetworkOptions"] = state ? state.clusterPodNetworkOptions : undefined;
            resourceInputs["compartmentId"] = state ? state.compartmentId : undefined;
            resourceInputs["definedTags"] = state ? state.definedTags : undefined;
            resourceInputs["endpointConfig"] = state ? state.endpointConfig : undefined;
            resourceInputs["endpoints"] = state ? state.endpoints : undefined;
            resourceInputs["freeformTags"] = state ? state.freeformTags : undefined;
            resourceInputs["imagePolicyConfig"] = state ? state.imagePolicyConfig : undefined;
            resourceInputs["kmsKeyId"] = state ? state.kmsKeyId : undefined;
            resourceInputs["kubernetesVersion"] = state ? state.kubernetesVersion : undefined;
            resourceInputs["lifecycleDetails"] = state ? state.lifecycleDetails : undefined;
            resourceInputs["metadatas"] = state ? state.metadatas : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["options"] = state ? state.options : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["vcnId"] = state ? state.vcnId : undefined;
        } else {
            const args = argsOrState as ContainerengineClusterArgs | undefined;
            if ((!args || args.compartmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'compartmentId'");
            }
            if ((!args || args.kubernetesVersion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'kubernetesVersion'");
            }
            if ((!args || args.vcnId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vcnId'");
            }
            resourceInputs["clusterPodNetworkOptions"] = args ? args.clusterPodNetworkOptions : undefined;
            resourceInputs["compartmentId"] = args ? args.compartmentId : undefined;
            resourceInputs["definedTags"] = args ? args.definedTags : undefined;
            resourceInputs["endpointConfig"] = args ? args.endpointConfig : undefined;
            resourceInputs["freeformTags"] = args ? args.freeformTags : undefined;
            resourceInputs["imagePolicyConfig"] = args ? args.imagePolicyConfig : undefined;
            resourceInputs["kmsKeyId"] = args ? args.kmsKeyId : undefined;
            resourceInputs["kubernetesVersion"] = args ? args.kubernetesVersion : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["options"] = args ? args.options : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["vcnId"] = args ? args.vcnId : undefined;
            resourceInputs["availableKubernetesUpgrades"] = undefined /*out*/;
            resourceInputs["endpoints"] = undefined /*out*/;
            resourceInputs["lifecycleDetails"] = undefined /*out*/;
            resourceInputs["metadatas"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ContainerengineCluster.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ContainerengineCluster resources.
 */
export interface ContainerengineClusterState {
    availableKubernetesUpgrades?: pulumi.Input<pulumi.Input<string>[]>;
    clusterPodNetworkOptions?: pulumi.Input<pulumi.Input<inputs.ContainerengineClusterClusterPodNetworkOption>[]>;
    compartmentId?: pulumi.Input<string>;
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    endpointConfig?: pulumi.Input<inputs.ContainerengineClusterEndpointConfig>;
    endpoints?: pulumi.Input<pulumi.Input<inputs.ContainerengineClusterEndpoint>[]>;
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    imagePolicyConfig?: pulumi.Input<inputs.ContainerengineClusterImagePolicyConfig>;
    kmsKeyId?: pulumi.Input<string>;
    kubernetesVersion?: pulumi.Input<string>;
    lifecycleDetails?: pulumi.Input<string>;
    metadatas?: pulumi.Input<pulumi.Input<inputs.ContainerengineClusterMetadata>[]>;
    name?: pulumi.Input<string>;
    options?: pulumi.Input<inputs.ContainerengineClusterOptions>;
    state?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ContainerengineClusterTimeouts>;
    type?: pulumi.Input<string>;
    vcnId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ContainerengineCluster resource.
 */
export interface ContainerengineClusterArgs {
    clusterPodNetworkOptions?: pulumi.Input<pulumi.Input<inputs.ContainerengineClusterClusterPodNetworkOption>[]>;
    compartmentId: pulumi.Input<string>;
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    endpointConfig?: pulumi.Input<inputs.ContainerengineClusterEndpointConfig>;
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    imagePolicyConfig?: pulumi.Input<inputs.ContainerengineClusterImagePolicyConfig>;
    kmsKeyId?: pulumi.Input<string>;
    kubernetesVersion: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    options?: pulumi.Input<inputs.ContainerengineClusterOptions>;
    timeouts?: pulumi.Input<inputs.ContainerengineClusterTimeouts>;
    type?: pulumi.Input<string>;
    vcnId: pulumi.Input<string>;
}
