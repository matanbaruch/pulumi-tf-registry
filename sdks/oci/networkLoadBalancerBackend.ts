// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class NetworkLoadBalancerBackend extends pulumi.CustomResource {
    /**
     * Get an existing NetworkLoadBalancerBackend resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetworkLoadBalancerBackendState, opts?: pulumi.CustomResourceOptions): NetworkLoadBalancerBackend {
        return new NetworkLoadBalancerBackend(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/networkLoadBalancerBackend:NetworkLoadBalancerBackend';

    /**
     * Returns true if the given object is an instance of NetworkLoadBalancerBackend.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NetworkLoadBalancerBackend {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NetworkLoadBalancerBackend.__pulumiType;
    }

    public readonly backendSetName!: pulumi.Output<string>;
    public readonly ipAddress!: pulumi.Output<string>;
    public readonly isBackup!: pulumi.Output<boolean>;
    public readonly isDrain!: pulumi.Output<boolean>;
    public readonly isOffline!: pulumi.Output<boolean>;
    public readonly name!: pulumi.Output<string>;
    public readonly networkLoadBalancerId!: pulumi.Output<string>;
    public readonly port!: pulumi.Output<number>;
    public readonly targetId!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.NetworkLoadBalancerBackendTimeouts | undefined>;
    public readonly weight!: pulumi.Output<number>;

    /**
     * Create a NetworkLoadBalancerBackend resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NetworkLoadBalancerBackendArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NetworkLoadBalancerBackendArgs | NetworkLoadBalancerBackendState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NetworkLoadBalancerBackendState | undefined;
            resourceInputs["backendSetName"] = state ? state.backendSetName : undefined;
            resourceInputs["ipAddress"] = state ? state.ipAddress : undefined;
            resourceInputs["isBackup"] = state ? state.isBackup : undefined;
            resourceInputs["isDrain"] = state ? state.isDrain : undefined;
            resourceInputs["isOffline"] = state ? state.isOffline : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkLoadBalancerId"] = state ? state.networkLoadBalancerId : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["targetId"] = state ? state.targetId : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["weight"] = state ? state.weight : undefined;
        } else {
            const args = argsOrState as NetworkLoadBalancerBackendArgs | undefined;
            if ((!args || args.backendSetName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'backendSetName'");
            }
            if ((!args || args.networkLoadBalancerId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'networkLoadBalancerId'");
            }
            if ((!args || args.port === undefined) && !opts.urn) {
                throw new Error("Missing required property 'port'");
            }
            resourceInputs["backendSetName"] = args ? args.backendSetName : undefined;
            resourceInputs["ipAddress"] = args ? args.ipAddress : undefined;
            resourceInputs["isBackup"] = args ? args.isBackup : undefined;
            resourceInputs["isDrain"] = args ? args.isDrain : undefined;
            resourceInputs["isOffline"] = args ? args.isOffline : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkLoadBalancerId"] = args ? args.networkLoadBalancerId : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["targetId"] = args ? args.targetId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["weight"] = args ? args.weight : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NetworkLoadBalancerBackend.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering NetworkLoadBalancerBackend resources.
 */
export interface NetworkLoadBalancerBackendState {
    backendSetName?: pulumi.Input<string>;
    ipAddress?: pulumi.Input<string>;
    isBackup?: pulumi.Input<boolean>;
    isDrain?: pulumi.Input<boolean>;
    isOffline?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    networkLoadBalancerId?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    targetId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.NetworkLoadBalancerBackendTimeouts>;
    weight?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a NetworkLoadBalancerBackend resource.
 */
export interface NetworkLoadBalancerBackendArgs {
    backendSetName: pulumi.Input<string>;
    ipAddress?: pulumi.Input<string>;
    isBackup?: pulumi.Input<boolean>;
    isDrain?: pulumi.Input<boolean>;
    isOffline?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    networkLoadBalancerId: pulumi.Input<string>;
    port: pulumi.Input<number>;
    targetId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.NetworkLoadBalancerBackendTimeouts>;
    weight?: pulumi.Input<number>;
}
