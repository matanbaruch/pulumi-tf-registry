// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getCoreCaptureFilter(args: GetCoreCaptureFilterArgs, opts?: pulumi.InvokeOptions): Promise<GetCoreCaptureFilterResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getCoreCaptureFilter:getCoreCaptureFilter", {
        "captureFilterId": args.captureFilterId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getCoreCaptureFilter.
 */
export interface GetCoreCaptureFilterArgs {
    captureFilterId: string;
}

/**
 * A collection of values returned by getCoreCaptureFilter.
 */
export interface GetCoreCaptureFilterResult {
    readonly captureFilterId: string;
    readonly compartmentId: string;
    readonly definedTags: {[key: string]: string};
    readonly displayName: string;
    readonly filterType: string;
    readonly flowLogCaptureFilterRules: outputs.GetCoreCaptureFilterFlowLogCaptureFilterRule[];
    readonly freeformTags: {[key: string]: string};
    readonly id: string;
    readonly state: string;
    readonly timeCreated: string;
    readonly vtapCaptureFilterRules: outputs.GetCoreCaptureFilterVtapCaptureFilterRule[];
}
export function getCoreCaptureFilterOutput(args: GetCoreCaptureFilterOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetCoreCaptureFilterResult> {
    return pulumi.output(args).apply((a: any) => getCoreCaptureFilter(a, opts))
}

/**
 * A collection of arguments for invoking getCoreCaptureFilter.
 */
export interface GetCoreCaptureFilterOutputArgs {
    captureFilterId: pulumi.Input<string>;
}
