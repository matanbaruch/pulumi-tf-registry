// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getDataSafeAuditProfileAnalytic(args: GetDataSafeAuditProfileAnalyticArgs, opts?: pulumi.InvokeOptions): Promise<GetDataSafeAuditProfileAnalyticResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getDataSafeAuditProfileAnalytic:getDataSafeAuditProfileAnalytic", {
        "accessLevel": args.accessLevel,
        "compartmentId": args.compartmentId,
        "compartmentIdInSubtree": args.compartmentIdInSubtree,
        "groupBies": args.groupBies,
        "id": args.id,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getDataSafeAuditProfileAnalytic.
 */
export interface GetDataSafeAuditProfileAnalyticArgs {
    accessLevel?: string;
    compartmentId: string;
    compartmentIdInSubtree?: boolean;
    groupBies?: string[];
    id?: string;
}

/**
 * A collection of values returned by getDataSafeAuditProfileAnalytic.
 */
export interface GetDataSafeAuditProfileAnalyticResult {
    readonly accessLevel?: string;
    readonly compartmentId: string;
    readonly compartmentIdInSubtree?: boolean;
    readonly groupBies?: string[];
    readonly id: string;
    readonly items: outputs.GetDataSafeAuditProfileAnalyticItem[];
}
export function getDataSafeAuditProfileAnalyticOutput(args: GetDataSafeAuditProfileAnalyticOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDataSafeAuditProfileAnalyticResult> {
    return pulumi.output(args).apply((a: any) => getDataSafeAuditProfileAnalytic(a, opts))
}

/**
 * A collection of arguments for invoking getDataSafeAuditProfileAnalytic.
 */
export interface GetDataSafeAuditProfileAnalyticOutputArgs {
    accessLevel?: pulumi.Input<string>;
    compartmentId: pulumi.Input<string>;
    compartmentIdInSubtree?: pulumi.Input<boolean>;
    groupBies?: pulumi.Input<pulumi.Input<string>[]>;
    id?: pulumi.Input<string>;
}
