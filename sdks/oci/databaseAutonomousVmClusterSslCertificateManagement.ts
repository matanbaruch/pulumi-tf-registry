// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DatabaseAutonomousVmClusterSslCertificateManagement extends pulumi.CustomResource {
    /**
     * Get an existing DatabaseAutonomousVmClusterSslCertificateManagement resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DatabaseAutonomousVmClusterSslCertificateManagementState, opts?: pulumi.CustomResourceOptions): DatabaseAutonomousVmClusterSslCertificateManagement {
        return new DatabaseAutonomousVmClusterSslCertificateManagement(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/databaseAutonomousVmClusterSslCertificateManagement:DatabaseAutonomousVmClusterSslCertificateManagement';

    /**
     * Returns true if the given object is an instance of DatabaseAutonomousVmClusterSslCertificateManagement.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DatabaseAutonomousVmClusterSslCertificateManagement {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DatabaseAutonomousVmClusterSslCertificateManagement.__pulumiType;
    }

    public readonly autonomousVmClusterId!: pulumi.Output<string>;
    public readonly caBundleId!: pulumi.Output<string>;
    public readonly certificateAuthorityId!: pulumi.Output<string>;
    public readonly certificateGenerationType!: pulumi.Output<string>;
    public readonly certificateId!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.DatabaseAutonomousVmClusterSslCertificateManagementTimeouts | undefined>;

    /**
     * Create a DatabaseAutonomousVmClusterSslCertificateManagement resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatabaseAutonomousVmClusterSslCertificateManagementArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DatabaseAutonomousVmClusterSslCertificateManagementArgs | DatabaseAutonomousVmClusterSslCertificateManagementState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DatabaseAutonomousVmClusterSslCertificateManagementState | undefined;
            resourceInputs["autonomousVmClusterId"] = state ? state.autonomousVmClusterId : undefined;
            resourceInputs["caBundleId"] = state ? state.caBundleId : undefined;
            resourceInputs["certificateAuthorityId"] = state ? state.certificateAuthorityId : undefined;
            resourceInputs["certificateGenerationType"] = state ? state.certificateGenerationType : undefined;
            resourceInputs["certificateId"] = state ? state.certificateId : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as DatabaseAutonomousVmClusterSslCertificateManagementArgs | undefined;
            if ((!args || args.autonomousVmClusterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'autonomousVmClusterId'");
            }
            if ((!args || args.certificateGenerationType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'certificateGenerationType'");
            }
            resourceInputs["autonomousVmClusterId"] = args ? args.autonomousVmClusterId : undefined;
            resourceInputs["caBundleId"] = args ? args.caBundleId : undefined;
            resourceInputs["certificateAuthorityId"] = args ? args.certificateAuthorityId : undefined;
            resourceInputs["certificateGenerationType"] = args ? args.certificateGenerationType : undefined;
            resourceInputs["certificateId"] = args ? args.certificateId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DatabaseAutonomousVmClusterSslCertificateManagement.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DatabaseAutonomousVmClusterSslCertificateManagement resources.
 */
export interface DatabaseAutonomousVmClusterSslCertificateManagementState {
    autonomousVmClusterId?: pulumi.Input<string>;
    caBundleId?: pulumi.Input<string>;
    certificateAuthorityId?: pulumi.Input<string>;
    certificateGenerationType?: pulumi.Input<string>;
    certificateId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.DatabaseAutonomousVmClusterSslCertificateManagementTimeouts>;
}

/**
 * The set of arguments for constructing a DatabaseAutonomousVmClusterSslCertificateManagement resource.
 */
export interface DatabaseAutonomousVmClusterSslCertificateManagementArgs {
    autonomousVmClusterId: pulumi.Input<string>;
    caBundleId?: pulumi.Input<string>;
    certificateAuthorityId?: pulumi.Input<string>;
    certificateGenerationType: pulumi.Input<string>;
    certificateId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.DatabaseAutonomousVmClusterSslCertificateManagementTimeouts>;
}
