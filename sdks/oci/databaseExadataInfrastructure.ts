// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DatabaseExadataInfrastructure extends pulumi.CustomResource {
    /**
     * Get an existing DatabaseExadataInfrastructure resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DatabaseExadataInfrastructureState, opts?: pulumi.CustomResourceOptions): DatabaseExadataInfrastructure {
        return new DatabaseExadataInfrastructure(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/databaseExadataInfrastructure:DatabaseExadataInfrastructure';

    /**
     * Returns true if the given object is an instance of DatabaseExadataInfrastructure.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DatabaseExadataInfrastructure {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DatabaseExadataInfrastructure.__pulumiType;
    }

    public /*out*/ readonly activatedStorageCount!: pulumi.Output<number>;
    public readonly activationFile!: pulumi.Output<string | undefined>;
    public /*out*/ readonly additionalComputeCount!: pulumi.Output<number>;
    public /*out*/ readonly additionalComputeSystemModel!: pulumi.Output<string>;
    public readonly additionalStorageCount!: pulumi.Output<number>;
    public readonly adminNetworkCidr!: pulumi.Output<string>;
    public /*out*/ readonly availabilityDomain!: pulumi.Output<string>;
    public readonly cloudControlPlaneServer1!: pulumi.Output<string>;
    public readonly cloudControlPlaneServer2!: pulumi.Output<string>;
    public readonly compartmentId!: pulumi.Output<string>;
    public readonly computeCount!: pulumi.Output<number>;
    public readonly contacts!: pulumi.Output<outputs.DatabaseExadataInfrastructureContact[] | undefined>;
    public readonly corporateProxy!: pulumi.Output<string>;
    public /*out*/ readonly cpusEnabled!: pulumi.Output<number>;
    public readonly createAsync!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly csiNumber!: pulumi.Output<string>;
    public /*out*/ readonly dataStorageSizeInTbs!: pulumi.Output<number>;
    public /*out*/ readonly dbNodeStorageSizeInGbs!: pulumi.Output<number>;
    public /*out*/ readonly dbServerVersion!: pulumi.Output<string>;
    public /*out*/ readonly definedFileSystemConfigurations!: pulumi.Output<outputs.DatabaseExadataInfrastructureDefinedFileSystemConfiguration[]>;
    public readonly definedTags!: pulumi.Output<{[key: string]: string}>;
    public readonly displayName!: pulumi.Output<string>;
    public readonly dnsServers!: pulumi.Output<string[]>;
    public readonly freeformTags!: pulumi.Output<{[key: string]: string}>;
    public readonly gateway!: pulumi.Output<string>;
    public readonly infiniBandNetworkCidr!: pulumi.Output<string>;
    public readonly isCpsOfflineReportEnabled!: pulumi.Output<boolean>;
    public readonly isMultiRackDeployment!: pulumi.Output<boolean>;
    public /*out*/ readonly lifecycleDetails!: pulumi.Output<string>;
    public /*out*/ readonly maintenanceSloStatus!: pulumi.Output<string>;
    public readonly maintenanceWindow!: pulumi.Output<outputs.DatabaseExadataInfrastructureMaintenanceWindow | undefined>;
    public /*out*/ readonly maxCpuCount!: pulumi.Output<number>;
    public /*out*/ readonly maxDataStorageInTbs!: pulumi.Output<number>;
    public /*out*/ readonly maxDbNodeStorageInGbs!: pulumi.Output<number>;
    public /*out*/ readonly maxMemoryInGbs!: pulumi.Output<number>;
    public /*out*/ readonly memorySizeInGbs!: pulumi.Output<number>;
    public /*out*/ readonly monthlyDbServerVersion!: pulumi.Output<string>;
    public readonly multiRackConfigurationFile!: pulumi.Output<string | undefined>;
    public readonly netmask!: pulumi.Output<string>;
    public readonly networkBondingModeDetails!: pulumi.Output<outputs.DatabaseExadataInfrastructureNetworkBondingModeDetails | undefined>;
    public readonly ntpServers!: pulumi.Output<string[]>;
    public /*out*/ readonly rackSerialNumber!: pulumi.Output<string>;
    public readonly shape!: pulumi.Output<string>;
    public /*out*/ readonly state!: pulumi.Output<string>;
    public readonly storageCount!: pulumi.Output<number>;
    public /*out*/ readonly storageServerVersion!: pulumi.Output<string>;
    public /*out*/ readonly timeCreated!: pulumi.Output<string>;
    public readonly timeZone!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.DatabaseExadataInfrastructureTimeouts | undefined>;

    /**
     * Create a DatabaseExadataInfrastructure resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatabaseExadataInfrastructureArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DatabaseExadataInfrastructureArgs | DatabaseExadataInfrastructureState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DatabaseExadataInfrastructureState | undefined;
            resourceInputs["activatedStorageCount"] = state ? state.activatedStorageCount : undefined;
            resourceInputs["activationFile"] = state ? state.activationFile : undefined;
            resourceInputs["additionalComputeCount"] = state ? state.additionalComputeCount : undefined;
            resourceInputs["additionalComputeSystemModel"] = state ? state.additionalComputeSystemModel : undefined;
            resourceInputs["additionalStorageCount"] = state ? state.additionalStorageCount : undefined;
            resourceInputs["adminNetworkCidr"] = state ? state.adminNetworkCidr : undefined;
            resourceInputs["availabilityDomain"] = state ? state.availabilityDomain : undefined;
            resourceInputs["cloudControlPlaneServer1"] = state ? state.cloudControlPlaneServer1 : undefined;
            resourceInputs["cloudControlPlaneServer2"] = state ? state.cloudControlPlaneServer2 : undefined;
            resourceInputs["compartmentId"] = state ? state.compartmentId : undefined;
            resourceInputs["computeCount"] = state ? state.computeCount : undefined;
            resourceInputs["contacts"] = state ? state.contacts : undefined;
            resourceInputs["corporateProxy"] = state ? state.corporateProxy : undefined;
            resourceInputs["cpusEnabled"] = state ? state.cpusEnabled : undefined;
            resourceInputs["createAsync"] = state ? state.createAsync : undefined;
            resourceInputs["csiNumber"] = state ? state.csiNumber : undefined;
            resourceInputs["dataStorageSizeInTbs"] = state ? state.dataStorageSizeInTbs : undefined;
            resourceInputs["dbNodeStorageSizeInGbs"] = state ? state.dbNodeStorageSizeInGbs : undefined;
            resourceInputs["dbServerVersion"] = state ? state.dbServerVersion : undefined;
            resourceInputs["definedFileSystemConfigurations"] = state ? state.definedFileSystemConfigurations : undefined;
            resourceInputs["definedTags"] = state ? state.definedTags : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["dnsServers"] = state ? state.dnsServers : undefined;
            resourceInputs["freeformTags"] = state ? state.freeformTags : undefined;
            resourceInputs["gateway"] = state ? state.gateway : undefined;
            resourceInputs["infiniBandNetworkCidr"] = state ? state.infiniBandNetworkCidr : undefined;
            resourceInputs["isCpsOfflineReportEnabled"] = state ? state.isCpsOfflineReportEnabled : undefined;
            resourceInputs["isMultiRackDeployment"] = state ? state.isMultiRackDeployment : undefined;
            resourceInputs["lifecycleDetails"] = state ? state.lifecycleDetails : undefined;
            resourceInputs["maintenanceSloStatus"] = state ? state.maintenanceSloStatus : undefined;
            resourceInputs["maintenanceWindow"] = state ? state.maintenanceWindow : undefined;
            resourceInputs["maxCpuCount"] = state ? state.maxCpuCount : undefined;
            resourceInputs["maxDataStorageInTbs"] = state ? state.maxDataStorageInTbs : undefined;
            resourceInputs["maxDbNodeStorageInGbs"] = state ? state.maxDbNodeStorageInGbs : undefined;
            resourceInputs["maxMemoryInGbs"] = state ? state.maxMemoryInGbs : undefined;
            resourceInputs["memorySizeInGbs"] = state ? state.memorySizeInGbs : undefined;
            resourceInputs["monthlyDbServerVersion"] = state ? state.monthlyDbServerVersion : undefined;
            resourceInputs["multiRackConfigurationFile"] = state ? state.multiRackConfigurationFile : undefined;
            resourceInputs["netmask"] = state ? state.netmask : undefined;
            resourceInputs["networkBondingModeDetails"] = state ? state.networkBondingModeDetails : undefined;
            resourceInputs["ntpServers"] = state ? state.ntpServers : undefined;
            resourceInputs["rackSerialNumber"] = state ? state.rackSerialNumber : undefined;
            resourceInputs["shape"] = state ? state.shape : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["storageCount"] = state ? state.storageCount : undefined;
            resourceInputs["storageServerVersion"] = state ? state.storageServerVersion : undefined;
            resourceInputs["timeCreated"] = state ? state.timeCreated : undefined;
            resourceInputs["timeZone"] = state ? state.timeZone : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as DatabaseExadataInfrastructureArgs | undefined;
            if ((!args || args.adminNetworkCidr === undefined) && !opts.urn) {
                throw new Error("Missing required property 'adminNetworkCidr'");
            }
            if ((!args || args.cloudControlPlaneServer1 === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cloudControlPlaneServer1'");
            }
            if ((!args || args.cloudControlPlaneServer2 === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cloudControlPlaneServer2'");
            }
            if ((!args || args.compartmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'compartmentId'");
            }
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if ((!args || args.dnsServers === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dnsServers'");
            }
            if ((!args || args.gateway === undefined) && !opts.urn) {
                throw new Error("Missing required property 'gateway'");
            }
            if ((!args || args.infiniBandNetworkCidr === undefined) && !opts.urn) {
                throw new Error("Missing required property 'infiniBandNetworkCidr'");
            }
            if ((!args || args.netmask === undefined) && !opts.urn) {
                throw new Error("Missing required property 'netmask'");
            }
            if ((!args || args.ntpServers === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ntpServers'");
            }
            if ((!args || args.shape === undefined) && !opts.urn) {
                throw new Error("Missing required property 'shape'");
            }
            if ((!args || args.timeZone === undefined) && !opts.urn) {
                throw new Error("Missing required property 'timeZone'");
            }
            resourceInputs["activationFile"] = args ? args.activationFile : undefined;
            resourceInputs["additionalStorageCount"] = args ? args.additionalStorageCount : undefined;
            resourceInputs["adminNetworkCidr"] = args ? args.adminNetworkCidr : undefined;
            resourceInputs["cloudControlPlaneServer1"] = args ? args.cloudControlPlaneServer1 : undefined;
            resourceInputs["cloudControlPlaneServer2"] = args ? args.cloudControlPlaneServer2 : undefined;
            resourceInputs["compartmentId"] = args ? args.compartmentId : undefined;
            resourceInputs["computeCount"] = args ? args.computeCount : undefined;
            resourceInputs["contacts"] = args ? args.contacts : undefined;
            resourceInputs["corporateProxy"] = args ? args.corporateProxy : undefined;
            resourceInputs["createAsync"] = args ? args.createAsync : undefined;
            resourceInputs["definedTags"] = args ? args.definedTags : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["dnsServers"] = args ? args.dnsServers : undefined;
            resourceInputs["freeformTags"] = args ? args.freeformTags : undefined;
            resourceInputs["gateway"] = args ? args.gateway : undefined;
            resourceInputs["infiniBandNetworkCidr"] = args ? args.infiniBandNetworkCidr : undefined;
            resourceInputs["isCpsOfflineReportEnabled"] = args ? args.isCpsOfflineReportEnabled : undefined;
            resourceInputs["isMultiRackDeployment"] = args ? args.isMultiRackDeployment : undefined;
            resourceInputs["maintenanceWindow"] = args ? args.maintenanceWindow : undefined;
            resourceInputs["multiRackConfigurationFile"] = args ? args.multiRackConfigurationFile : undefined;
            resourceInputs["netmask"] = args ? args.netmask : undefined;
            resourceInputs["networkBondingModeDetails"] = args ? args.networkBondingModeDetails : undefined;
            resourceInputs["ntpServers"] = args ? args.ntpServers : undefined;
            resourceInputs["shape"] = args ? args.shape : undefined;
            resourceInputs["storageCount"] = args ? args.storageCount : undefined;
            resourceInputs["timeZone"] = args ? args.timeZone : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["activatedStorageCount"] = undefined /*out*/;
            resourceInputs["additionalComputeCount"] = undefined /*out*/;
            resourceInputs["additionalComputeSystemModel"] = undefined /*out*/;
            resourceInputs["availabilityDomain"] = undefined /*out*/;
            resourceInputs["cpusEnabled"] = undefined /*out*/;
            resourceInputs["csiNumber"] = undefined /*out*/;
            resourceInputs["dataStorageSizeInTbs"] = undefined /*out*/;
            resourceInputs["dbNodeStorageSizeInGbs"] = undefined /*out*/;
            resourceInputs["dbServerVersion"] = undefined /*out*/;
            resourceInputs["definedFileSystemConfigurations"] = undefined /*out*/;
            resourceInputs["lifecycleDetails"] = undefined /*out*/;
            resourceInputs["maintenanceSloStatus"] = undefined /*out*/;
            resourceInputs["maxCpuCount"] = undefined /*out*/;
            resourceInputs["maxDataStorageInTbs"] = undefined /*out*/;
            resourceInputs["maxDbNodeStorageInGbs"] = undefined /*out*/;
            resourceInputs["maxMemoryInGbs"] = undefined /*out*/;
            resourceInputs["memorySizeInGbs"] = undefined /*out*/;
            resourceInputs["monthlyDbServerVersion"] = undefined /*out*/;
            resourceInputs["rackSerialNumber"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["storageServerVersion"] = undefined /*out*/;
            resourceInputs["timeCreated"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DatabaseExadataInfrastructure.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DatabaseExadataInfrastructure resources.
 */
export interface DatabaseExadataInfrastructureState {
    activatedStorageCount?: pulumi.Input<number>;
    activationFile?: pulumi.Input<string>;
    additionalComputeCount?: pulumi.Input<number>;
    additionalComputeSystemModel?: pulumi.Input<string>;
    additionalStorageCount?: pulumi.Input<number>;
    adminNetworkCidr?: pulumi.Input<string>;
    availabilityDomain?: pulumi.Input<string>;
    cloudControlPlaneServer1?: pulumi.Input<string>;
    cloudControlPlaneServer2?: pulumi.Input<string>;
    compartmentId?: pulumi.Input<string>;
    computeCount?: pulumi.Input<number>;
    contacts?: pulumi.Input<pulumi.Input<inputs.DatabaseExadataInfrastructureContact>[]>;
    corporateProxy?: pulumi.Input<string>;
    cpusEnabled?: pulumi.Input<number>;
    createAsync?: pulumi.Input<boolean>;
    csiNumber?: pulumi.Input<string>;
    dataStorageSizeInTbs?: pulumi.Input<number>;
    dbNodeStorageSizeInGbs?: pulumi.Input<number>;
    dbServerVersion?: pulumi.Input<string>;
    definedFileSystemConfigurations?: pulumi.Input<pulumi.Input<inputs.DatabaseExadataInfrastructureDefinedFileSystemConfiguration>[]>;
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    displayName?: pulumi.Input<string>;
    dnsServers?: pulumi.Input<pulumi.Input<string>[]>;
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    gateway?: pulumi.Input<string>;
    infiniBandNetworkCidr?: pulumi.Input<string>;
    isCpsOfflineReportEnabled?: pulumi.Input<boolean>;
    isMultiRackDeployment?: pulumi.Input<boolean>;
    lifecycleDetails?: pulumi.Input<string>;
    maintenanceSloStatus?: pulumi.Input<string>;
    maintenanceWindow?: pulumi.Input<inputs.DatabaseExadataInfrastructureMaintenanceWindow>;
    maxCpuCount?: pulumi.Input<number>;
    maxDataStorageInTbs?: pulumi.Input<number>;
    maxDbNodeStorageInGbs?: pulumi.Input<number>;
    maxMemoryInGbs?: pulumi.Input<number>;
    memorySizeInGbs?: pulumi.Input<number>;
    monthlyDbServerVersion?: pulumi.Input<string>;
    multiRackConfigurationFile?: pulumi.Input<string>;
    netmask?: pulumi.Input<string>;
    networkBondingModeDetails?: pulumi.Input<inputs.DatabaseExadataInfrastructureNetworkBondingModeDetails>;
    ntpServers?: pulumi.Input<pulumi.Input<string>[]>;
    rackSerialNumber?: pulumi.Input<string>;
    shape?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    storageCount?: pulumi.Input<number>;
    storageServerVersion?: pulumi.Input<string>;
    timeCreated?: pulumi.Input<string>;
    timeZone?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.DatabaseExadataInfrastructureTimeouts>;
}

/**
 * The set of arguments for constructing a DatabaseExadataInfrastructure resource.
 */
export interface DatabaseExadataInfrastructureArgs {
    activationFile?: pulumi.Input<string>;
    additionalStorageCount?: pulumi.Input<number>;
    adminNetworkCidr: pulumi.Input<string>;
    cloudControlPlaneServer1: pulumi.Input<string>;
    cloudControlPlaneServer2: pulumi.Input<string>;
    compartmentId: pulumi.Input<string>;
    computeCount?: pulumi.Input<number>;
    contacts?: pulumi.Input<pulumi.Input<inputs.DatabaseExadataInfrastructureContact>[]>;
    corporateProxy?: pulumi.Input<string>;
    createAsync?: pulumi.Input<boolean>;
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    displayName: pulumi.Input<string>;
    dnsServers: pulumi.Input<pulumi.Input<string>[]>;
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    gateway: pulumi.Input<string>;
    infiniBandNetworkCidr: pulumi.Input<string>;
    isCpsOfflineReportEnabled?: pulumi.Input<boolean>;
    isMultiRackDeployment?: pulumi.Input<boolean>;
    maintenanceWindow?: pulumi.Input<inputs.DatabaseExadataInfrastructureMaintenanceWindow>;
    multiRackConfigurationFile?: pulumi.Input<string>;
    netmask: pulumi.Input<string>;
    networkBondingModeDetails?: pulumi.Input<inputs.DatabaseExadataInfrastructureNetworkBondingModeDetails>;
    ntpServers: pulumi.Input<pulumi.Input<string>[]>;
    shape: pulumi.Input<string>;
    storageCount?: pulumi.Input<number>;
    timeZone: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.DatabaseExadataInfrastructureTimeouts>;
}
