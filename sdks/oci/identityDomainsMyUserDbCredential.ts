// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class IdentityDomainsMyUserDbCredential extends pulumi.CustomResource {
    /**
     * Get an existing IdentityDomainsMyUserDbCredential resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IdentityDomainsMyUserDbCredentialState, opts?: pulumi.CustomResourceOptions): IdentityDomainsMyUserDbCredential {
        return new IdentityDomainsMyUserDbCredential(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/identityDomainsMyUserDbCredential:IdentityDomainsMyUserDbCredential';

    /**
     * Returns true if the given object is an instance of IdentityDomainsMyUserDbCredential.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IdentityDomainsMyUserDbCredential {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IdentityDomainsMyUserDbCredential.__pulumiType;
    }

    public readonly authorization!: pulumi.Output<string | undefined>;
    public /*out*/ readonly compartmentOcid!: pulumi.Output<string>;
    public readonly dbPassword!: pulumi.Output<string>;
    public /*out*/ readonly deleteInProgress!: pulumi.Output<boolean>;
    public readonly description!: pulumi.Output<string>;
    public /*out*/ readonly domainOcid!: pulumi.Output<string>;
    public /*out*/ readonly expired!: pulumi.Output<boolean>;
    public readonly expiresOn!: pulumi.Output<string>;
    public /*out*/ readonly idcsCreatedBies!: pulumi.Output<outputs.IdentityDomainsMyUserDbCredentialIdcsCreatedBy[]>;
    public readonly idcsEndpoint!: pulumi.Output<string>;
    public /*out*/ readonly idcsLastModifiedBies!: pulumi.Output<outputs.IdentityDomainsMyUserDbCredentialIdcsLastModifiedBy[]>;
    public /*out*/ readonly idcsLastUpgradedInRelease!: pulumi.Output<string>;
    public /*out*/ readonly idcsPreventedOperations!: pulumi.Output<string[]>;
    public /*out*/ readonly lastSetDate!: pulumi.Output<string>;
    public /*out*/ readonly metas!: pulumi.Output<outputs.IdentityDomainsMyUserDbCredentialMeta[]>;
    public /*out*/ readonly mixedDbPassword!: pulumi.Output<string>;
    public /*out*/ readonly mixedSalt!: pulumi.Output<string>;
    public /*out*/ readonly name!: pulumi.Output<string>;
    public readonly ocid!: pulumi.Output<string>;
    public readonly resourceTypeSchemaVersion!: pulumi.Output<string | undefined>;
    public /*out*/ readonly salt!: pulumi.Output<string>;
    public readonly schemas!: pulumi.Output<string[]>;
    public readonly status!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<outputs.IdentityDomainsMyUserDbCredentialTag[] | undefined>;
    public /*out*/ readonly tenancyOcid!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.IdentityDomainsMyUserDbCredentialTimeouts | undefined>;
    public readonly user!: pulumi.Output<outputs.IdentityDomainsMyUserDbCredentialUser | undefined>;

    /**
     * Create a IdentityDomainsMyUserDbCredential resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IdentityDomainsMyUserDbCredentialArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IdentityDomainsMyUserDbCredentialArgs | IdentityDomainsMyUserDbCredentialState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IdentityDomainsMyUserDbCredentialState | undefined;
            resourceInputs["authorization"] = state ? state.authorization : undefined;
            resourceInputs["compartmentOcid"] = state ? state.compartmentOcid : undefined;
            resourceInputs["dbPassword"] = state ? state.dbPassword : undefined;
            resourceInputs["deleteInProgress"] = state ? state.deleteInProgress : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["domainOcid"] = state ? state.domainOcid : undefined;
            resourceInputs["expired"] = state ? state.expired : undefined;
            resourceInputs["expiresOn"] = state ? state.expiresOn : undefined;
            resourceInputs["idcsCreatedBies"] = state ? state.idcsCreatedBies : undefined;
            resourceInputs["idcsEndpoint"] = state ? state.idcsEndpoint : undefined;
            resourceInputs["idcsLastModifiedBies"] = state ? state.idcsLastModifiedBies : undefined;
            resourceInputs["idcsLastUpgradedInRelease"] = state ? state.idcsLastUpgradedInRelease : undefined;
            resourceInputs["idcsPreventedOperations"] = state ? state.idcsPreventedOperations : undefined;
            resourceInputs["lastSetDate"] = state ? state.lastSetDate : undefined;
            resourceInputs["metas"] = state ? state.metas : undefined;
            resourceInputs["mixedDbPassword"] = state ? state.mixedDbPassword : undefined;
            resourceInputs["mixedSalt"] = state ? state.mixedSalt : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["ocid"] = state ? state.ocid : undefined;
            resourceInputs["resourceTypeSchemaVersion"] = state ? state.resourceTypeSchemaVersion : undefined;
            resourceInputs["salt"] = state ? state.salt : undefined;
            resourceInputs["schemas"] = state ? state.schemas : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tenancyOcid"] = state ? state.tenancyOcid : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["user"] = state ? state.user : undefined;
        } else {
            const args = argsOrState as IdentityDomainsMyUserDbCredentialArgs | undefined;
            if ((!args || args.dbPassword === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dbPassword'");
            }
            if ((!args || args.idcsEndpoint === undefined) && !opts.urn) {
                throw new Error("Missing required property 'idcsEndpoint'");
            }
            if ((!args || args.schemas === undefined) && !opts.urn) {
                throw new Error("Missing required property 'schemas'");
            }
            resourceInputs["authorization"] = args ? args.authorization : undefined;
            resourceInputs["dbPassword"] = args?.dbPassword ? pulumi.secret(args.dbPassword) : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["expiresOn"] = args ? args.expiresOn : undefined;
            resourceInputs["idcsEndpoint"] = args ? args.idcsEndpoint : undefined;
            resourceInputs["ocid"] = args ? args.ocid : undefined;
            resourceInputs["resourceTypeSchemaVersion"] = args ? args.resourceTypeSchemaVersion : undefined;
            resourceInputs["schemas"] = args ? args.schemas : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["user"] = args ? args.user : undefined;
            resourceInputs["compartmentOcid"] = undefined /*out*/;
            resourceInputs["deleteInProgress"] = undefined /*out*/;
            resourceInputs["domainOcid"] = undefined /*out*/;
            resourceInputs["expired"] = undefined /*out*/;
            resourceInputs["idcsCreatedBies"] = undefined /*out*/;
            resourceInputs["idcsLastModifiedBies"] = undefined /*out*/;
            resourceInputs["idcsLastUpgradedInRelease"] = undefined /*out*/;
            resourceInputs["idcsPreventedOperations"] = undefined /*out*/;
            resourceInputs["lastSetDate"] = undefined /*out*/;
            resourceInputs["metas"] = undefined /*out*/;
            resourceInputs["mixedDbPassword"] = undefined /*out*/;
            resourceInputs["mixedSalt"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["salt"] = undefined /*out*/;
            resourceInputs["tenancyOcid"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["dbPassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(IdentityDomainsMyUserDbCredential.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering IdentityDomainsMyUserDbCredential resources.
 */
export interface IdentityDomainsMyUserDbCredentialState {
    authorization?: pulumi.Input<string>;
    compartmentOcid?: pulumi.Input<string>;
    dbPassword?: pulumi.Input<string>;
    deleteInProgress?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    domainOcid?: pulumi.Input<string>;
    expired?: pulumi.Input<boolean>;
    expiresOn?: pulumi.Input<string>;
    idcsCreatedBies?: pulumi.Input<pulumi.Input<inputs.IdentityDomainsMyUserDbCredentialIdcsCreatedBy>[]>;
    idcsEndpoint?: pulumi.Input<string>;
    idcsLastModifiedBies?: pulumi.Input<pulumi.Input<inputs.IdentityDomainsMyUserDbCredentialIdcsLastModifiedBy>[]>;
    idcsLastUpgradedInRelease?: pulumi.Input<string>;
    idcsPreventedOperations?: pulumi.Input<pulumi.Input<string>[]>;
    lastSetDate?: pulumi.Input<string>;
    metas?: pulumi.Input<pulumi.Input<inputs.IdentityDomainsMyUserDbCredentialMeta>[]>;
    mixedDbPassword?: pulumi.Input<string>;
    mixedSalt?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    ocid?: pulumi.Input<string>;
    resourceTypeSchemaVersion?: pulumi.Input<string>;
    salt?: pulumi.Input<string>;
    schemas?: pulumi.Input<pulumi.Input<string>[]>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.IdentityDomainsMyUserDbCredentialTag>[]>;
    tenancyOcid?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.IdentityDomainsMyUserDbCredentialTimeouts>;
    user?: pulumi.Input<inputs.IdentityDomainsMyUserDbCredentialUser>;
}

/**
 * The set of arguments for constructing a IdentityDomainsMyUserDbCredential resource.
 */
export interface IdentityDomainsMyUserDbCredentialArgs {
    authorization?: pulumi.Input<string>;
    dbPassword: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    expiresOn?: pulumi.Input<string>;
    idcsEndpoint: pulumi.Input<string>;
    ocid?: pulumi.Input<string>;
    resourceTypeSchemaVersion?: pulumi.Input<string>;
    schemas: pulumi.Input<pulumi.Input<string>[]>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.IdentityDomainsMyUserDbCredentialTag>[]>;
    timeouts?: pulumi.Input<inputs.IdentityDomainsMyUserDbCredentialTimeouts>;
    user?: pulumi.Input<inputs.IdentityDomainsMyUserDbCredentialUser>;
}
