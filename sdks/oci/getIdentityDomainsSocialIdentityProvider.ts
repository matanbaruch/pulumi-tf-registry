// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getIdentityDomainsSocialIdentityProvider(args: GetIdentityDomainsSocialIdentityProviderArgs, opts?: pulumi.InvokeOptions): Promise<GetIdentityDomainsSocialIdentityProviderResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getIdentityDomainsSocialIdentityProvider:getIdentityDomainsSocialIdentityProvider", {
        "authorization": args.authorization,
        "idcsEndpoint": args.idcsEndpoint,
        "resourceTypeSchemaVersion": args.resourceTypeSchemaVersion,
        "socialIdentityProviderId": args.socialIdentityProviderId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getIdentityDomainsSocialIdentityProvider.
 */
export interface GetIdentityDomainsSocialIdentityProviderArgs {
    authorization?: string;
    idcsEndpoint: string;
    resourceTypeSchemaVersion?: string;
    socialIdentityProviderId: string;
}

/**
 * A collection of values returned by getIdentityDomainsSocialIdentityProvider.
 */
export interface GetIdentityDomainsSocialIdentityProviderResult {
    readonly accessTokenUrl: string;
    readonly accountLinkingEnabled: boolean;
    readonly adminScopes: string[];
    readonly authorization?: string;
    readonly authzUrl: string;
    readonly autoRedirectEnabled: boolean;
    readonly clientCredentialInPayload: boolean;
    readonly clockSkewInSeconds: number;
    readonly compartmentOcid: string;
    readonly consumerKey: string;
    readonly consumerSecret: string;
    readonly deleteInProgress: boolean;
    readonly description: string;
    readonly discoveryUrl: string;
    readonly domainOcid: string;
    readonly enabled: boolean;
    readonly iconUrl: string;
    readonly id: string;
    readonly idAttribute: string;
    readonly idcsCreatedBies: outputs.GetIdentityDomainsSocialIdentityProviderIdcsCreatedBy[];
    readonly idcsEndpoint: string;
    readonly idcsLastModifiedBies: outputs.GetIdentityDomainsSocialIdentityProviderIdcsLastModifiedBy[];
    readonly idcsLastUpgradedInRelease: string;
    readonly idcsPreventedOperations: string[];
    readonly jitProvAssignedGroups: outputs.GetIdentityDomainsSocialIdentityProviderJitProvAssignedGroup[];
    readonly jitProvGroupStaticListEnabled: boolean;
    readonly metas: outputs.GetIdentityDomainsSocialIdentityProviderMeta[];
    readonly name: string;
    readonly ocid: string;
    readonly profileUrl: string;
    readonly redirectUrl: string;
    readonly refreshTokenUrl: string;
    readonly registrationEnabled: boolean;
    readonly relayIdpParamMappings: outputs.GetIdentityDomainsSocialIdentityProviderRelayIdpParamMapping[];
    readonly resourceTypeSchemaVersion?: string;
    readonly schemas: string[];
    readonly scopes: string[];
    readonly serviceProviderName: string;
    readonly showOnLogin: boolean;
    readonly socialIdentityProviderId: string;
    readonly socialJitProvisioningEnabled: boolean;
    readonly status: string;
    readonly tags: outputs.GetIdentityDomainsSocialIdentityProviderTag[];
    readonly tenancyOcid: string;
}
export function getIdentityDomainsSocialIdentityProviderOutput(args: GetIdentityDomainsSocialIdentityProviderOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetIdentityDomainsSocialIdentityProviderResult> {
    return pulumi.output(args).apply((a: any) => getIdentityDomainsSocialIdentityProvider(a, opts))
}

/**
 * A collection of arguments for invoking getIdentityDomainsSocialIdentityProvider.
 */
export interface GetIdentityDomainsSocialIdentityProviderOutputArgs {
    authorization?: pulumi.Input<string>;
    idcsEndpoint: pulumi.Input<string>;
    resourceTypeSchemaVersion?: pulumi.Input<string>;
    socialIdentityProviderId: pulumi.Input<string>;
}
