// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DataintegrationWorkspaceTask extends pulumi.CustomResource {
    /**
     * Get an existing DataintegrationWorkspaceTask resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DataintegrationWorkspaceTaskState, opts?: pulumi.CustomResourceOptions): DataintegrationWorkspaceTask {
        return new DataintegrationWorkspaceTask(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/dataintegrationWorkspaceTask:DataintegrationWorkspaceTask';

    /**
     * Returns true if the given object is an instance of DataintegrationWorkspaceTask.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DataintegrationWorkspaceTask {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DataintegrationWorkspaceTask.__pulumiType;
    }

    public readonly apiCallMode!: pulumi.Output<string>;
    public readonly authConfig!: pulumi.Output<outputs.DataintegrationWorkspaceTaskAuthConfig | undefined>;
    public readonly cancelRestCallConfig!: pulumi.Output<outputs.DataintegrationWorkspaceTaskCancelRestCallConfig | undefined>;
    public readonly configProviderDelegate!: pulumi.Output<outputs.DataintegrationWorkspaceTaskConfigProviderDelegate | undefined>;
    public readonly description!: pulumi.Output<string>;
    public readonly executeRestCallConfig!: pulumi.Output<outputs.DataintegrationWorkspaceTaskExecuteRestCallConfig | undefined>;
    public readonly identifier!: pulumi.Output<string>;
    public readonly inputPorts!: pulumi.Output<outputs.DataintegrationWorkspaceTaskInputPort[] | undefined>;
    public readonly isSingleLoad!: pulumi.Output<boolean>;
    public readonly key!: pulumi.Output<string>;
    public /*out*/ readonly keyMap!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly metadatas!: pulumi.Output<outputs.DataintegrationWorkspaceTaskMetadata[]>;
    public readonly modelType!: pulumi.Output<string>;
    public readonly modelVersion!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly objectStatus!: pulumi.Output<number>;
    public /*out*/ readonly objectVersion!: pulumi.Output<number>;
    public readonly opConfigValues!: pulumi.Output<outputs.DataintegrationWorkspaceTaskOpConfigValues | undefined>;
    public readonly operation!: pulumi.Output<string>;
    public readonly outputPorts!: pulumi.Output<outputs.DataintegrationWorkspaceTaskOutputPort[] | undefined>;
    public readonly parallelLoadLimit!: pulumi.Output<number>;
    public readonly parameters!: pulumi.Output<outputs.DataintegrationWorkspaceTaskParameter[] | undefined>;
    public readonly parentRef!: pulumi.Output<outputs.DataintegrationWorkspaceTaskParentRef | undefined>;
    public readonly pollRestCallConfig!: pulumi.Output<outputs.DataintegrationWorkspaceTaskPollRestCallConfig | undefined>;
    public readonly registryMetadata!: pulumi.Output<outputs.DataintegrationWorkspaceTaskRegistryMetadata>;
    public readonly timeouts!: pulumi.Output<outputs.DataintegrationWorkspaceTaskTimeouts | undefined>;
    public readonly typedExpressions!: pulumi.Output<outputs.DataintegrationWorkspaceTaskTypedExpression[] | undefined>;
    public readonly workspaceId!: pulumi.Output<string>;

    /**
     * Create a DataintegrationWorkspaceTask resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DataintegrationWorkspaceTaskArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DataintegrationWorkspaceTaskArgs | DataintegrationWorkspaceTaskState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DataintegrationWorkspaceTaskState | undefined;
            resourceInputs["apiCallMode"] = state ? state.apiCallMode : undefined;
            resourceInputs["authConfig"] = state ? state.authConfig : undefined;
            resourceInputs["cancelRestCallConfig"] = state ? state.cancelRestCallConfig : undefined;
            resourceInputs["configProviderDelegate"] = state ? state.configProviderDelegate : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["executeRestCallConfig"] = state ? state.executeRestCallConfig : undefined;
            resourceInputs["identifier"] = state ? state.identifier : undefined;
            resourceInputs["inputPorts"] = state ? state.inputPorts : undefined;
            resourceInputs["isSingleLoad"] = state ? state.isSingleLoad : undefined;
            resourceInputs["key"] = state ? state.key : undefined;
            resourceInputs["keyMap"] = state ? state.keyMap : undefined;
            resourceInputs["metadatas"] = state ? state.metadatas : undefined;
            resourceInputs["modelType"] = state ? state.modelType : undefined;
            resourceInputs["modelVersion"] = state ? state.modelVersion : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["objectStatus"] = state ? state.objectStatus : undefined;
            resourceInputs["objectVersion"] = state ? state.objectVersion : undefined;
            resourceInputs["opConfigValues"] = state ? state.opConfigValues : undefined;
            resourceInputs["operation"] = state ? state.operation : undefined;
            resourceInputs["outputPorts"] = state ? state.outputPorts : undefined;
            resourceInputs["parallelLoadLimit"] = state ? state.parallelLoadLimit : undefined;
            resourceInputs["parameters"] = state ? state.parameters : undefined;
            resourceInputs["parentRef"] = state ? state.parentRef : undefined;
            resourceInputs["pollRestCallConfig"] = state ? state.pollRestCallConfig : undefined;
            resourceInputs["registryMetadata"] = state ? state.registryMetadata : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["typedExpressions"] = state ? state.typedExpressions : undefined;
            resourceInputs["workspaceId"] = state ? state.workspaceId : undefined;
        } else {
            const args = argsOrState as DataintegrationWorkspaceTaskArgs | undefined;
            if ((!args || args.identifier === undefined) && !opts.urn) {
                throw new Error("Missing required property 'identifier'");
            }
            if ((!args || args.modelType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'modelType'");
            }
            if ((!args || args.registryMetadata === undefined) && !opts.urn) {
                throw new Error("Missing required property 'registryMetadata'");
            }
            if ((!args || args.workspaceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'workspaceId'");
            }
            resourceInputs["apiCallMode"] = args ? args.apiCallMode : undefined;
            resourceInputs["authConfig"] = args ? args.authConfig : undefined;
            resourceInputs["cancelRestCallConfig"] = args ? args.cancelRestCallConfig : undefined;
            resourceInputs["configProviderDelegate"] = args ? args.configProviderDelegate : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["executeRestCallConfig"] = args ? args.executeRestCallConfig : undefined;
            resourceInputs["identifier"] = args ? args.identifier : undefined;
            resourceInputs["inputPorts"] = args ? args.inputPorts : undefined;
            resourceInputs["isSingleLoad"] = args ? args.isSingleLoad : undefined;
            resourceInputs["key"] = args ? args.key : undefined;
            resourceInputs["modelType"] = args ? args.modelType : undefined;
            resourceInputs["modelVersion"] = args ? args.modelVersion : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["objectStatus"] = args ? args.objectStatus : undefined;
            resourceInputs["opConfigValues"] = args ? args.opConfigValues : undefined;
            resourceInputs["operation"] = args ? args.operation : undefined;
            resourceInputs["outputPorts"] = args ? args.outputPorts : undefined;
            resourceInputs["parallelLoadLimit"] = args ? args.parallelLoadLimit : undefined;
            resourceInputs["parameters"] = args ? args.parameters : undefined;
            resourceInputs["parentRef"] = args ? args.parentRef : undefined;
            resourceInputs["pollRestCallConfig"] = args ? args.pollRestCallConfig : undefined;
            resourceInputs["registryMetadata"] = args ? args.registryMetadata : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["typedExpressions"] = args ? args.typedExpressions : undefined;
            resourceInputs["workspaceId"] = args ? args.workspaceId : undefined;
            resourceInputs["keyMap"] = undefined /*out*/;
            resourceInputs["metadatas"] = undefined /*out*/;
            resourceInputs["objectVersion"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DataintegrationWorkspaceTask.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DataintegrationWorkspaceTask resources.
 */
export interface DataintegrationWorkspaceTaskState {
    apiCallMode?: pulumi.Input<string>;
    authConfig?: pulumi.Input<inputs.DataintegrationWorkspaceTaskAuthConfig>;
    cancelRestCallConfig?: pulumi.Input<inputs.DataintegrationWorkspaceTaskCancelRestCallConfig>;
    configProviderDelegate?: pulumi.Input<inputs.DataintegrationWorkspaceTaskConfigProviderDelegate>;
    description?: pulumi.Input<string>;
    executeRestCallConfig?: pulumi.Input<inputs.DataintegrationWorkspaceTaskExecuteRestCallConfig>;
    identifier?: pulumi.Input<string>;
    inputPorts?: pulumi.Input<pulumi.Input<inputs.DataintegrationWorkspaceTaskInputPort>[]>;
    isSingleLoad?: pulumi.Input<boolean>;
    key?: pulumi.Input<string>;
    keyMap?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    metadatas?: pulumi.Input<pulumi.Input<inputs.DataintegrationWorkspaceTaskMetadata>[]>;
    modelType?: pulumi.Input<string>;
    modelVersion?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    objectStatus?: pulumi.Input<number>;
    objectVersion?: pulumi.Input<number>;
    opConfigValues?: pulumi.Input<inputs.DataintegrationWorkspaceTaskOpConfigValues>;
    operation?: pulumi.Input<string>;
    outputPorts?: pulumi.Input<pulumi.Input<inputs.DataintegrationWorkspaceTaskOutputPort>[]>;
    parallelLoadLimit?: pulumi.Input<number>;
    parameters?: pulumi.Input<pulumi.Input<inputs.DataintegrationWorkspaceTaskParameter>[]>;
    parentRef?: pulumi.Input<inputs.DataintegrationWorkspaceTaskParentRef>;
    pollRestCallConfig?: pulumi.Input<inputs.DataintegrationWorkspaceTaskPollRestCallConfig>;
    registryMetadata?: pulumi.Input<inputs.DataintegrationWorkspaceTaskRegistryMetadata>;
    timeouts?: pulumi.Input<inputs.DataintegrationWorkspaceTaskTimeouts>;
    typedExpressions?: pulumi.Input<pulumi.Input<inputs.DataintegrationWorkspaceTaskTypedExpression>[]>;
    workspaceId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DataintegrationWorkspaceTask resource.
 */
export interface DataintegrationWorkspaceTaskArgs {
    apiCallMode?: pulumi.Input<string>;
    authConfig?: pulumi.Input<inputs.DataintegrationWorkspaceTaskAuthConfig>;
    cancelRestCallConfig?: pulumi.Input<inputs.DataintegrationWorkspaceTaskCancelRestCallConfig>;
    configProviderDelegate?: pulumi.Input<inputs.DataintegrationWorkspaceTaskConfigProviderDelegate>;
    description?: pulumi.Input<string>;
    executeRestCallConfig?: pulumi.Input<inputs.DataintegrationWorkspaceTaskExecuteRestCallConfig>;
    identifier: pulumi.Input<string>;
    inputPorts?: pulumi.Input<pulumi.Input<inputs.DataintegrationWorkspaceTaskInputPort>[]>;
    isSingleLoad?: pulumi.Input<boolean>;
    key?: pulumi.Input<string>;
    modelType: pulumi.Input<string>;
    modelVersion?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    objectStatus?: pulumi.Input<number>;
    opConfigValues?: pulumi.Input<inputs.DataintegrationWorkspaceTaskOpConfigValues>;
    operation?: pulumi.Input<string>;
    outputPorts?: pulumi.Input<pulumi.Input<inputs.DataintegrationWorkspaceTaskOutputPort>[]>;
    parallelLoadLimit?: pulumi.Input<number>;
    parameters?: pulumi.Input<pulumi.Input<inputs.DataintegrationWorkspaceTaskParameter>[]>;
    parentRef?: pulumi.Input<inputs.DataintegrationWorkspaceTaskParentRef>;
    pollRestCallConfig?: pulumi.Input<inputs.DataintegrationWorkspaceTaskPollRestCallConfig>;
    registryMetadata: pulumi.Input<inputs.DataintegrationWorkspaceTaskRegistryMetadata>;
    timeouts?: pulumi.Input<inputs.DataintegrationWorkspaceTaskTimeouts>;
    typedExpressions?: pulumi.Input<pulumi.Input<inputs.DataintegrationWorkspaceTaskTypedExpression>[]>;
    workspaceId: pulumi.Input<string>;
}
