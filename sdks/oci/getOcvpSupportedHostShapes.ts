// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getOcvpSupportedHostShapes(args: GetOcvpSupportedHostShapesArgs, opts?: pulumi.InvokeOptions): Promise<GetOcvpSupportedHostShapesResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getOcvpSupportedHostShapes:getOcvpSupportedHostShapes", {
        "compartmentId": args.compartmentId,
        "filters": args.filters,
        "id": args.id,
        "initialHostShapeName": args.initialHostShapeName,
        "isSingleHostSddcSupported": args.isSingleHostSddcSupported,
        "name": args.name,
        "sddcType": args.sddcType,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getOcvpSupportedHostShapes.
 */
export interface GetOcvpSupportedHostShapesArgs {
    compartmentId: string;
    filters?: inputs.GetOcvpSupportedHostShapesFilter[];
    id?: string;
    initialHostShapeName?: string;
    isSingleHostSddcSupported?: boolean;
    name?: string;
    /**
     * @deprecated Deprecated
     */
    sddcType?: string;
}

/**
 * A collection of values returned by getOcvpSupportedHostShapes.
 */
export interface GetOcvpSupportedHostShapesResult {
    readonly compartmentId: string;
    readonly filters?: outputs.GetOcvpSupportedHostShapesFilter[];
    readonly id: string;
    readonly initialHostShapeName?: string;
    readonly isSingleHostSddcSupported?: boolean;
    readonly items: outputs.GetOcvpSupportedHostShapesItem[];
    readonly name?: string;
    /**
     * @deprecated Deprecated
     */
    readonly sddcType?: string;
}
export function getOcvpSupportedHostShapesOutput(args: GetOcvpSupportedHostShapesOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetOcvpSupportedHostShapesResult> {
    return pulumi.output(args).apply((a: any) => getOcvpSupportedHostShapes(a, opts))
}

/**
 * A collection of arguments for invoking getOcvpSupportedHostShapes.
 */
export interface GetOcvpSupportedHostShapesOutputArgs {
    compartmentId: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.GetOcvpSupportedHostShapesFilterArgs>[]>;
    id?: pulumi.Input<string>;
    initialHostShapeName?: pulumi.Input<string>;
    isSingleHostSddcSupported?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    sddcType?: pulumi.Input<string>;
}
