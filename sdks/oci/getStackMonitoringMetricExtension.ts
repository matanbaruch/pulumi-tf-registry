// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getStackMonitoringMetricExtension(args: GetStackMonitoringMetricExtensionArgs, opts?: pulumi.InvokeOptions): Promise<GetStackMonitoringMetricExtensionResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getStackMonitoringMetricExtension:getStackMonitoringMetricExtension", {
        "metricExtensionId": args.metricExtensionId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getStackMonitoringMetricExtension.
 */
export interface GetStackMonitoringMetricExtensionArgs {
    metricExtensionId: string;
}

/**
 * A collection of values returned by getStackMonitoringMetricExtension.
 */
export interface GetStackMonitoringMetricExtensionResult {
    readonly collectionMethod: string;
    readonly collectionRecurrences: string;
    readonly compartmentId: string;
    readonly createdBy: string;
    readonly description: string;
    readonly displayName: string;
    readonly enabledOnResources: outputs.GetStackMonitoringMetricExtensionEnabledOnResource[];
    readonly enabledOnResourcesCount: number;
    readonly id: string;
    readonly lastUpdatedBy: string;
    readonly metricExtensionId: string;
    readonly metricLists: outputs.GetStackMonitoringMetricExtensionMetricList[];
    readonly name: string;
    readonly publishTrigger: boolean;
    readonly queryProperties: outputs.GetStackMonitoringMetricExtensionQueryProperty[];
    readonly resourceType: string;
    readonly resourceUri: string;
    readonly state: string;
    readonly status: string;
    readonly tenantId: string;
    readonly timeCreated: string;
    readonly timeUpdated: string;
}
export function getStackMonitoringMetricExtensionOutput(args: GetStackMonitoringMetricExtensionOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetStackMonitoringMetricExtensionResult> {
    return pulumi.output(args).apply((a: any) => getStackMonitoringMetricExtension(a, opts))
}

/**
 * A collection of arguments for invoking getStackMonitoringMetricExtension.
 */
export interface GetStackMonitoringMetricExtensionOutputArgs {
    metricExtensionId: pulumi.Input<string>;
}
