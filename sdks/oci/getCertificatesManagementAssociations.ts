// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getCertificatesManagementAssociations(args?: GetCertificatesManagementAssociationsArgs, opts?: pulumi.InvokeOptions): Promise<GetCertificatesManagementAssociationsResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getCertificatesManagementAssociations:getCertificatesManagementAssociations", {
        "associatedResourceId": args.associatedResourceId,
        "associationId": args.associationId,
        "associationType": args.associationType,
        "certificatesResourceId": args.certificatesResourceId,
        "compartmentId": args.compartmentId,
        "filters": args.filters,
        "id": args.id,
        "name": args.name,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getCertificatesManagementAssociations.
 */
export interface GetCertificatesManagementAssociationsArgs {
    associatedResourceId?: string;
    associationId?: string;
    associationType?: string;
    certificatesResourceId?: string;
    compartmentId?: string;
    filters?: inputs.GetCertificatesManagementAssociationsFilter[];
    id?: string;
    name?: string;
}

/**
 * A collection of values returned by getCertificatesManagementAssociations.
 */
export interface GetCertificatesManagementAssociationsResult {
    readonly associatedResourceId?: string;
    readonly associationCollections: outputs.GetCertificatesManagementAssociationsAssociationCollection[];
    readonly associationId?: string;
    readonly associationType?: string;
    readonly certificatesResourceId?: string;
    readonly compartmentId?: string;
    readonly filters?: outputs.GetCertificatesManagementAssociationsFilter[];
    readonly id: string;
    readonly name?: string;
}
export function getCertificatesManagementAssociationsOutput(args?: GetCertificatesManagementAssociationsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetCertificatesManagementAssociationsResult> {
    return pulumi.output(args).apply((a: any) => getCertificatesManagementAssociations(a, opts))
}

/**
 * A collection of arguments for invoking getCertificatesManagementAssociations.
 */
export interface GetCertificatesManagementAssociationsOutputArgs {
    associatedResourceId?: pulumi.Input<string>;
    associationId?: pulumi.Input<string>;
    associationType?: pulumi.Input<string>;
    certificatesResourceId?: pulumi.Input<string>;
    compartmentId?: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.GetCertificatesManagementAssociationsFilterArgs>[]>;
    id?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
}
