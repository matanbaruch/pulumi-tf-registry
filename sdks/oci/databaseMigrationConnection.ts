// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DatabaseMigrationConnection extends pulumi.CustomResource {
    /**
     * Get an existing DatabaseMigrationConnection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DatabaseMigrationConnectionState, opts?: pulumi.CustomResourceOptions): DatabaseMigrationConnection {
        return new DatabaseMigrationConnection(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/databaseMigrationConnection:DatabaseMigrationConnection';

    /**
     * Returns true if the given object is an instance of DatabaseMigrationConnection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DatabaseMigrationConnection {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DatabaseMigrationConnection.__pulumiType;
    }

    public readonly additionalAttributes!: pulumi.Output<outputs.DatabaseMigrationConnectionAdditionalAttribute[] | undefined>;
    public readonly compartmentId!: pulumi.Output<string>;
    public readonly connectionString!: pulumi.Output<string>;
    public readonly connectionType!: pulumi.Output<string>;
    public readonly databaseId!: pulumi.Output<string>;
    public readonly databaseName!: pulumi.Output<string>;
    public readonly dbSystemId!: pulumi.Output<string>;
    public readonly definedTags!: pulumi.Output<{[key: string]: string}>;
    public readonly description!: pulumi.Output<string>;
    public readonly displayName!: pulumi.Output<string>;
    public readonly freeformTags!: pulumi.Output<{[key: string]: string}>;
    public readonly host!: pulumi.Output<string>;
    public /*out*/ readonly ingressIps!: pulumi.Output<outputs.DatabaseMigrationConnectionIngressIp[]>;
    public readonly keyId!: pulumi.Output<string>;
    public /*out*/ readonly lifecycleDetails!: pulumi.Output<string>;
    public readonly nsgIds!: pulumi.Output<string[]>;
    public readonly password!: pulumi.Output<string>;
    public readonly port!: pulumi.Output<number>;
    public /*out*/ readonly privateEndpointId!: pulumi.Output<string>;
    public readonly replicationPassword!: pulumi.Output<string>;
    public readonly replicationUsername!: pulumi.Output<string>;
    public /*out*/ readonly secretId!: pulumi.Output<string>;
    public readonly securityProtocol!: pulumi.Output<string>;
    public readonly sshHost!: pulumi.Output<string>;
    public readonly sshKey!: pulumi.Output<string>;
    public readonly sshSudoLocation!: pulumi.Output<string>;
    public readonly sshUser!: pulumi.Output<string>;
    public readonly sslCa!: pulumi.Output<string>;
    public readonly sslCert!: pulumi.Output<string>;
    public readonly sslCrl!: pulumi.Output<string>;
    public readonly sslKey!: pulumi.Output<string>;
    public readonly sslMode!: pulumi.Output<string>;
    public /*out*/ readonly state!: pulumi.Output<string>;
    public readonly subnetId!: pulumi.Output<string>;
    public /*out*/ readonly systemTags!: pulumi.Output<{[key: string]: string}>;
    public readonly technologyType!: pulumi.Output<string>;
    public /*out*/ readonly timeCreated!: pulumi.Output<string>;
    public /*out*/ readonly timeUpdated!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.DatabaseMigrationConnectionTimeouts | undefined>;
    public readonly username!: pulumi.Output<string>;
    public readonly vaultId!: pulumi.Output<string>;
    public readonly wallet!: pulumi.Output<string>;

    /**
     * Create a DatabaseMigrationConnection resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatabaseMigrationConnectionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DatabaseMigrationConnectionArgs | DatabaseMigrationConnectionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DatabaseMigrationConnectionState | undefined;
            resourceInputs["additionalAttributes"] = state ? state.additionalAttributes : undefined;
            resourceInputs["compartmentId"] = state ? state.compartmentId : undefined;
            resourceInputs["connectionString"] = state ? state.connectionString : undefined;
            resourceInputs["connectionType"] = state ? state.connectionType : undefined;
            resourceInputs["databaseId"] = state ? state.databaseId : undefined;
            resourceInputs["databaseName"] = state ? state.databaseName : undefined;
            resourceInputs["dbSystemId"] = state ? state.dbSystemId : undefined;
            resourceInputs["definedTags"] = state ? state.definedTags : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["freeformTags"] = state ? state.freeformTags : undefined;
            resourceInputs["host"] = state ? state.host : undefined;
            resourceInputs["ingressIps"] = state ? state.ingressIps : undefined;
            resourceInputs["keyId"] = state ? state.keyId : undefined;
            resourceInputs["lifecycleDetails"] = state ? state.lifecycleDetails : undefined;
            resourceInputs["nsgIds"] = state ? state.nsgIds : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["privateEndpointId"] = state ? state.privateEndpointId : undefined;
            resourceInputs["replicationPassword"] = state ? state.replicationPassword : undefined;
            resourceInputs["replicationUsername"] = state ? state.replicationUsername : undefined;
            resourceInputs["secretId"] = state ? state.secretId : undefined;
            resourceInputs["securityProtocol"] = state ? state.securityProtocol : undefined;
            resourceInputs["sshHost"] = state ? state.sshHost : undefined;
            resourceInputs["sshKey"] = state ? state.sshKey : undefined;
            resourceInputs["sshSudoLocation"] = state ? state.sshSudoLocation : undefined;
            resourceInputs["sshUser"] = state ? state.sshUser : undefined;
            resourceInputs["sslCa"] = state ? state.sslCa : undefined;
            resourceInputs["sslCert"] = state ? state.sslCert : undefined;
            resourceInputs["sslCrl"] = state ? state.sslCrl : undefined;
            resourceInputs["sslKey"] = state ? state.sslKey : undefined;
            resourceInputs["sslMode"] = state ? state.sslMode : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["subnetId"] = state ? state.subnetId : undefined;
            resourceInputs["systemTags"] = state ? state.systemTags : undefined;
            resourceInputs["technologyType"] = state ? state.technologyType : undefined;
            resourceInputs["timeCreated"] = state ? state.timeCreated : undefined;
            resourceInputs["timeUpdated"] = state ? state.timeUpdated : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
            resourceInputs["vaultId"] = state ? state.vaultId : undefined;
            resourceInputs["wallet"] = state ? state.wallet : undefined;
        } else {
            const args = argsOrState as DatabaseMigrationConnectionArgs | undefined;
            if ((!args || args.compartmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'compartmentId'");
            }
            if ((!args || args.connectionType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'connectionType'");
            }
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if ((!args || args.keyId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'keyId'");
            }
            if ((!args || args.password === undefined) && !opts.urn) {
                throw new Error("Missing required property 'password'");
            }
            if ((!args || args.technologyType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'technologyType'");
            }
            if ((!args || args.username === undefined) && !opts.urn) {
                throw new Error("Missing required property 'username'");
            }
            if ((!args || args.vaultId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vaultId'");
            }
            resourceInputs["additionalAttributes"] = args ? args.additionalAttributes : undefined;
            resourceInputs["compartmentId"] = args ? args.compartmentId : undefined;
            resourceInputs["connectionString"] = args ? args.connectionString : undefined;
            resourceInputs["connectionType"] = args ? args.connectionType : undefined;
            resourceInputs["databaseId"] = args ? args.databaseId : undefined;
            resourceInputs["databaseName"] = args ? args.databaseName : undefined;
            resourceInputs["dbSystemId"] = args ? args.dbSystemId : undefined;
            resourceInputs["definedTags"] = args ? args.definedTags : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["freeformTags"] = args ? args.freeformTags : undefined;
            resourceInputs["host"] = args ? args.host : undefined;
            resourceInputs["keyId"] = args ? args.keyId : undefined;
            resourceInputs["nsgIds"] = args ? args.nsgIds : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["replicationPassword"] = args?.replicationPassword ? pulumi.secret(args.replicationPassword) : undefined;
            resourceInputs["replicationUsername"] = args ? args.replicationUsername : undefined;
            resourceInputs["securityProtocol"] = args ? args.securityProtocol : undefined;
            resourceInputs["sshHost"] = args ? args.sshHost : undefined;
            resourceInputs["sshKey"] = args ? args.sshKey : undefined;
            resourceInputs["sshSudoLocation"] = args ? args.sshSudoLocation : undefined;
            resourceInputs["sshUser"] = args ? args.sshUser : undefined;
            resourceInputs["sslCa"] = args ? args.sslCa : undefined;
            resourceInputs["sslCert"] = args ? args.sslCert : undefined;
            resourceInputs["sslCrl"] = args ? args.sslCrl : undefined;
            resourceInputs["sslKey"] = args ? args.sslKey : undefined;
            resourceInputs["sslMode"] = args ? args.sslMode : undefined;
            resourceInputs["subnetId"] = args ? args.subnetId : undefined;
            resourceInputs["technologyType"] = args ? args.technologyType : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
            resourceInputs["vaultId"] = args ? args.vaultId : undefined;
            resourceInputs["wallet"] = args ? args.wallet : undefined;
            resourceInputs["ingressIps"] = undefined /*out*/;
            resourceInputs["lifecycleDetails"] = undefined /*out*/;
            resourceInputs["privateEndpointId"] = undefined /*out*/;
            resourceInputs["secretId"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["systemTags"] = undefined /*out*/;
            resourceInputs["timeCreated"] = undefined /*out*/;
            resourceInputs["timeUpdated"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password", "replicationPassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(DatabaseMigrationConnection.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DatabaseMigrationConnection resources.
 */
export interface DatabaseMigrationConnectionState {
    additionalAttributes?: pulumi.Input<pulumi.Input<inputs.DatabaseMigrationConnectionAdditionalAttribute>[]>;
    compartmentId?: pulumi.Input<string>;
    connectionString?: pulumi.Input<string>;
    connectionType?: pulumi.Input<string>;
    databaseId?: pulumi.Input<string>;
    databaseName?: pulumi.Input<string>;
    dbSystemId?: pulumi.Input<string>;
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    description?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    host?: pulumi.Input<string>;
    ingressIps?: pulumi.Input<pulumi.Input<inputs.DatabaseMigrationConnectionIngressIp>[]>;
    keyId?: pulumi.Input<string>;
    lifecycleDetails?: pulumi.Input<string>;
    nsgIds?: pulumi.Input<pulumi.Input<string>[]>;
    password?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    privateEndpointId?: pulumi.Input<string>;
    replicationPassword?: pulumi.Input<string>;
    replicationUsername?: pulumi.Input<string>;
    secretId?: pulumi.Input<string>;
    securityProtocol?: pulumi.Input<string>;
    sshHost?: pulumi.Input<string>;
    sshKey?: pulumi.Input<string>;
    sshSudoLocation?: pulumi.Input<string>;
    sshUser?: pulumi.Input<string>;
    sslCa?: pulumi.Input<string>;
    sslCert?: pulumi.Input<string>;
    sslCrl?: pulumi.Input<string>;
    sslKey?: pulumi.Input<string>;
    sslMode?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    subnetId?: pulumi.Input<string>;
    systemTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    technologyType?: pulumi.Input<string>;
    timeCreated?: pulumi.Input<string>;
    timeUpdated?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.DatabaseMigrationConnectionTimeouts>;
    username?: pulumi.Input<string>;
    vaultId?: pulumi.Input<string>;
    wallet?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DatabaseMigrationConnection resource.
 */
export interface DatabaseMigrationConnectionArgs {
    additionalAttributes?: pulumi.Input<pulumi.Input<inputs.DatabaseMigrationConnectionAdditionalAttribute>[]>;
    compartmentId: pulumi.Input<string>;
    connectionString?: pulumi.Input<string>;
    connectionType: pulumi.Input<string>;
    databaseId?: pulumi.Input<string>;
    databaseName?: pulumi.Input<string>;
    dbSystemId?: pulumi.Input<string>;
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    description?: pulumi.Input<string>;
    displayName: pulumi.Input<string>;
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    host?: pulumi.Input<string>;
    keyId: pulumi.Input<string>;
    nsgIds?: pulumi.Input<pulumi.Input<string>[]>;
    password: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    replicationPassword?: pulumi.Input<string>;
    replicationUsername?: pulumi.Input<string>;
    securityProtocol?: pulumi.Input<string>;
    sshHost?: pulumi.Input<string>;
    sshKey?: pulumi.Input<string>;
    sshSudoLocation?: pulumi.Input<string>;
    sshUser?: pulumi.Input<string>;
    sslCa?: pulumi.Input<string>;
    sslCert?: pulumi.Input<string>;
    sslCrl?: pulumi.Input<string>;
    sslKey?: pulumi.Input<string>;
    sslMode?: pulumi.Input<string>;
    subnetId?: pulumi.Input<string>;
    technologyType: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.DatabaseMigrationConnectionTimeouts>;
    username: pulumi.Input<string>;
    vaultId: pulumi.Input<string>;
    wallet?: pulumi.Input<string>;
}
