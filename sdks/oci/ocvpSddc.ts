// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class OcvpSddc extends pulumi.CustomResource {
    /**
     * Get an existing OcvpSddc resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OcvpSddcState, opts?: pulumi.CustomResourceOptions): OcvpSddc {
        return new OcvpSddc(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/ocvpSddc:OcvpSddc';

    /**
     * Returns true if the given object is an instance of OcvpSddc.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OcvpSddc {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OcvpSddc.__pulumiType;
    }

    /**
     * @deprecated Deprecated
     */
    public /*out*/ readonly actualEsxiHostsCount!: pulumi.Output<number>;
    /**
     * @deprecated Deprecated
     */
    public readonly capacityReservationId!: pulumi.Output<string>;
    public /*out*/ readonly clustersCount!: pulumi.Output<number>;
    public readonly compartmentId!: pulumi.Output<string>;
    /**
     * @deprecated Deprecated
     */
    public readonly computeAvailabilityDomain!: pulumi.Output<string | undefined>;
    /**
     * @deprecated Deprecated
     */
    public readonly datastores!: pulumi.Output<outputs.OcvpSddcDatastore[] | undefined>;
    public readonly definedTags!: pulumi.Output<{[key: string]: string}>;
    public readonly displayName!: pulumi.Output<string>;
    /**
     * @deprecated Deprecated
     */
    public readonly esxiHostsCount!: pulumi.Output<number | undefined>;
    public readonly esxiSoftwareVersion!: pulumi.Output<string>;
    public readonly freeformTags!: pulumi.Output<{[key: string]: string}>;
    public readonly hcxAction!: pulumi.Output<string | undefined>;
    public /*out*/ readonly hcxFqdn!: pulumi.Output<string>;
    /**
     * @deprecated Deprecated
     */
    public /*out*/ readonly hcxInitialPassword!: pulumi.Output<string>;
    public /*out*/ readonly hcxMode!: pulumi.Output<string>;
    /**
     * @deprecated Deprecated
     */
    public /*out*/ readonly hcxOnPremKey!: pulumi.Output<string>;
    public /*out*/ readonly hcxOnPremLicenses!: pulumi.Output<outputs.OcvpSddcHcxOnPremLicense[]>;
    public /*out*/ readonly hcxPrivateIpId!: pulumi.Output<string>;
    /**
     * @deprecated Deprecated
     */
    public readonly hcxVlanId!: pulumi.Output<string>;
    public readonly initialConfigurations!: pulumi.Output<outputs.OcvpSddcInitialConfiguration[] | undefined>;
    /**
     * @deprecated Deprecated
     */
    public readonly initialHostOcpuCount!: pulumi.Output<number>;
    /**
     * @deprecated Deprecated
     */
    public readonly initialHostShapeName!: pulumi.Output<string>;
    /**
     * @deprecated Deprecated
     */
    public readonly initialSku!: pulumi.Output<string>;
    /**
     * @deprecated Deprecated
     */
    public readonly instanceDisplayNamePrefix!: pulumi.Output<string>;
    public readonly isHcxEnabled!: pulumi.Output<boolean>;
    /**
     * @deprecated Deprecated
     */
    public /*out*/ readonly isHcxEnterpriseEnabled!: pulumi.Output<boolean>;
    public /*out*/ readonly isHcxPendingDowngrade!: pulumi.Output<boolean>;
    /**
     * @deprecated Deprecated
     */
    public readonly isShieldedInstanceEnabled!: pulumi.Output<boolean>;
    public readonly isSingleHostSddc!: pulumi.Output<boolean>;
    /**
     * @deprecated Deprecated
     */
    public readonly nsxEdgeUplink1vlanId!: pulumi.Output<string | undefined>;
    /**
     * @deprecated Deprecated
     */
    public readonly nsxEdgeUplink2vlanId!: pulumi.Output<string | undefined>;
    public /*out*/ readonly nsxEdgeUplinkIpId!: pulumi.Output<string>;
    /**
     * @deprecated Deprecated
     */
    public readonly nsxEdgeVtepVlanId!: pulumi.Output<string | undefined>;
    public /*out*/ readonly nsxManagerFqdn!: pulumi.Output<string>;
    /**
     * @deprecated Deprecated
     */
    public /*out*/ readonly nsxManagerInitialPassword!: pulumi.Output<string>;
    public /*out*/ readonly nsxManagerPrivateIpId!: pulumi.Output<string>;
    public /*out*/ readonly nsxManagerUsername!: pulumi.Output<string>;
    /**
     * @deprecated Deprecated
     */
    public /*out*/ readonly nsxOverlaySegmentName!: pulumi.Output<string>;
    /**
     * @deprecated Deprecated
     */
    public readonly nsxVtepVlanId!: pulumi.Output<string | undefined>;
    /**
     * @deprecated Deprecated
     */
    public readonly provisioningSubnetId!: pulumi.Output<string | undefined>;
    /**
     * @deprecated Deprecated
     */
    public readonly provisioningVlanId!: pulumi.Output<string>;
    public readonly refreshHcxLicenseStatus!: pulumi.Output<boolean | undefined>;
    /**
     * @deprecated Deprecated
     */
    public readonly replicationVlanId!: pulumi.Output<string>;
    public readonly reservingHcxOnPremiseLicenseKeys!: pulumi.Output<string[] | undefined>;
    public readonly sshAuthorizedKeys!: pulumi.Output<string>;
    public /*out*/ readonly state!: pulumi.Output<string>;
    public /*out*/ readonly timeCreated!: pulumi.Output<string>;
    public /*out*/ readonly timeHcxBillingCycleEnd!: pulumi.Output<string>;
    public /*out*/ readonly timeHcxLicenseStatusUpdated!: pulumi.Output<string>;
    public /*out*/ readonly timeUpdated!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.OcvpSddcTimeouts | undefined>;
    /**
     * @deprecated Deprecated
     */
    public /*out*/ readonly upgradeLicenses!: pulumi.Output<outputs.OcvpSddcUpgradeLicense[]>;
    public /*out*/ readonly vcenterFqdn!: pulumi.Output<string>;
    /**
     * @deprecated Deprecated
     */
    public /*out*/ readonly vcenterInitialPassword!: pulumi.Output<string>;
    public /*out*/ readonly vcenterPrivateIpId!: pulumi.Output<string>;
    public /*out*/ readonly vcenterUsername!: pulumi.Output<string>;
    /**
     * @deprecated Deprecated
     */
    public readonly vmotionVlanId!: pulumi.Output<string | undefined>;
    public readonly vmwareSoftwareVersion!: pulumi.Output<string>;
    /**
     * @deprecated Deprecated
     */
    public readonly vsanVlanId!: pulumi.Output<string | undefined>;
    /**
     * @deprecated Deprecated
     */
    public /*out*/ readonly vsphereUpgradeGuide!: pulumi.Output<string>;
    /**
     * @deprecated Deprecated
     */
    public /*out*/ readonly vsphereUpgradeObjects!: pulumi.Output<outputs.OcvpSddcVsphereUpgradeObject[]>;
    /**
     * @deprecated Deprecated
     */
    public readonly vsphereVlanId!: pulumi.Output<string | undefined>;
    /**
     * @deprecated Deprecated
     */
    public readonly workloadNetworkCidr!: pulumi.Output<string>;

    /**
     * Create a OcvpSddc resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OcvpSddcArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OcvpSddcArgs | OcvpSddcState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OcvpSddcState | undefined;
            resourceInputs["actualEsxiHostsCount"] = state ? state.actualEsxiHostsCount : undefined;
            resourceInputs["capacityReservationId"] = state ? state.capacityReservationId : undefined;
            resourceInputs["clustersCount"] = state ? state.clustersCount : undefined;
            resourceInputs["compartmentId"] = state ? state.compartmentId : undefined;
            resourceInputs["computeAvailabilityDomain"] = state ? state.computeAvailabilityDomain : undefined;
            resourceInputs["datastores"] = state ? state.datastores : undefined;
            resourceInputs["definedTags"] = state ? state.definedTags : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["esxiHostsCount"] = state ? state.esxiHostsCount : undefined;
            resourceInputs["esxiSoftwareVersion"] = state ? state.esxiSoftwareVersion : undefined;
            resourceInputs["freeformTags"] = state ? state.freeformTags : undefined;
            resourceInputs["hcxAction"] = state ? state.hcxAction : undefined;
            resourceInputs["hcxFqdn"] = state ? state.hcxFqdn : undefined;
            resourceInputs["hcxInitialPassword"] = state ? state.hcxInitialPassword : undefined;
            resourceInputs["hcxMode"] = state ? state.hcxMode : undefined;
            resourceInputs["hcxOnPremKey"] = state ? state.hcxOnPremKey : undefined;
            resourceInputs["hcxOnPremLicenses"] = state ? state.hcxOnPremLicenses : undefined;
            resourceInputs["hcxPrivateIpId"] = state ? state.hcxPrivateIpId : undefined;
            resourceInputs["hcxVlanId"] = state ? state.hcxVlanId : undefined;
            resourceInputs["initialConfigurations"] = state ? state.initialConfigurations : undefined;
            resourceInputs["initialHostOcpuCount"] = state ? state.initialHostOcpuCount : undefined;
            resourceInputs["initialHostShapeName"] = state ? state.initialHostShapeName : undefined;
            resourceInputs["initialSku"] = state ? state.initialSku : undefined;
            resourceInputs["instanceDisplayNamePrefix"] = state ? state.instanceDisplayNamePrefix : undefined;
            resourceInputs["isHcxEnabled"] = state ? state.isHcxEnabled : undefined;
            resourceInputs["isHcxEnterpriseEnabled"] = state ? state.isHcxEnterpriseEnabled : undefined;
            resourceInputs["isHcxPendingDowngrade"] = state ? state.isHcxPendingDowngrade : undefined;
            resourceInputs["isShieldedInstanceEnabled"] = state ? state.isShieldedInstanceEnabled : undefined;
            resourceInputs["isSingleHostSddc"] = state ? state.isSingleHostSddc : undefined;
            resourceInputs["nsxEdgeUplink1vlanId"] = state ? state.nsxEdgeUplink1vlanId : undefined;
            resourceInputs["nsxEdgeUplink2vlanId"] = state ? state.nsxEdgeUplink2vlanId : undefined;
            resourceInputs["nsxEdgeUplinkIpId"] = state ? state.nsxEdgeUplinkIpId : undefined;
            resourceInputs["nsxEdgeVtepVlanId"] = state ? state.nsxEdgeVtepVlanId : undefined;
            resourceInputs["nsxManagerFqdn"] = state ? state.nsxManagerFqdn : undefined;
            resourceInputs["nsxManagerInitialPassword"] = state ? state.nsxManagerInitialPassword : undefined;
            resourceInputs["nsxManagerPrivateIpId"] = state ? state.nsxManagerPrivateIpId : undefined;
            resourceInputs["nsxManagerUsername"] = state ? state.nsxManagerUsername : undefined;
            resourceInputs["nsxOverlaySegmentName"] = state ? state.nsxOverlaySegmentName : undefined;
            resourceInputs["nsxVtepVlanId"] = state ? state.nsxVtepVlanId : undefined;
            resourceInputs["provisioningSubnetId"] = state ? state.provisioningSubnetId : undefined;
            resourceInputs["provisioningVlanId"] = state ? state.provisioningVlanId : undefined;
            resourceInputs["refreshHcxLicenseStatus"] = state ? state.refreshHcxLicenseStatus : undefined;
            resourceInputs["replicationVlanId"] = state ? state.replicationVlanId : undefined;
            resourceInputs["reservingHcxOnPremiseLicenseKeys"] = state ? state.reservingHcxOnPremiseLicenseKeys : undefined;
            resourceInputs["sshAuthorizedKeys"] = state ? state.sshAuthorizedKeys : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["timeCreated"] = state ? state.timeCreated : undefined;
            resourceInputs["timeHcxBillingCycleEnd"] = state ? state.timeHcxBillingCycleEnd : undefined;
            resourceInputs["timeHcxLicenseStatusUpdated"] = state ? state.timeHcxLicenseStatusUpdated : undefined;
            resourceInputs["timeUpdated"] = state ? state.timeUpdated : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["upgradeLicenses"] = state ? state.upgradeLicenses : undefined;
            resourceInputs["vcenterFqdn"] = state ? state.vcenterFqdn : undefined;
            resourceInputs["vcenterInitialPassword"] = state ? state.vcenterInitialPassword : undefined;
            resourceInputs["vcenterPrivateIpId"] = state ? state.vcenterPrivateIpId : undefined;
            resourceInputs["vcenterUsername"] = state ? state.vcenterUsername : undefined;
            resourceInputs["vmotionVlanId"] = state ? state.vmotionVlanId : undefined;
            resourceInputs["vmwareSoftwareVersion"] = state ? state.vmwareSoftwareVersion : undefined;
            resourceInputs["vsanVlanId"] = state ? state.vsanVlanId : undefined;
            resourceInputs["vsphereUpgradeGuide"] = state ? state.vsphereUpgradeGuide : undefined;
            resourceInputs["vsphereUpgradeObjects"] = state ? state.vsphereUpgradeObjects : undefined;
            resourceInputs["vsphereVlanId"] = state ? state.vsphereVlanId : undefined;
            resourceInputs["workloadNetworkCidr"] = state ? state.workloadNetworkCidr : undefined;
        } else {
            const args = argsOrState as OcvpSddcArgs | undefined;
            if ((!args || args.compartmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'compartmentId'");
            }
            if ((!args || args.sshAuthorizedKeys === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sshAuthorizedKeys'");
            }
            if ((!args || args.vmwareSoftwareVersion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vmwareSoftwareVersion'");
            }
            resourceInputs["capacityReservationId"] = args ? args.capacityReservationId : undefined;
            resourceInputs["compartmentId"] = args ? args.compartmentId : undefined;
            resourceInputs["computeAvailabilityDomain"] = args ? args.computeAvailabilityDomain : undefined;
            resourceInputs["datastores"] = args ? args.datastores : undefined;
            resourceInputs["definedTags"] = args ? args.definedTags : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["esxiHostsCount"] = args ? args.esxiHostsCount : undefined;
            resourceInputs["esxiSoftwareVersion"] = args ? args.esxiSoftwareVersion : undefined;
            resourceInputs["freeformTags"] = args ? args.freeformTags : undefined;
            resourceInputs["hcxAction"] = args ? args.hcxAction : undefined;
            resourceInputs["hcxVlanId"] = args ? args.hcxVlanId : undefined;
            resourceInputs["initialConfigurations"] = args ? args.initialConfigurations : undefined;
            resourceInputs["initialHostOcpuCount"] = args ? args.initialHostOcpuCount : undefined;
            resourceInputs["initialHostShapeName"] = args ? args.initialHostShapeName : undefined;
            resourceInputs["initialSku"] = args ? args.initialSku : undefined;
            resourceInputs["instanceDisplayNamePrefix"] = args ? args.instanceDisplayNamePrefix : undefined;
            resourceInputs["isHcxEnabled"] = args ? args.isHcxEnabled : undefined;
            resourceInputs["isShieldedInstanceEnabled"] = args ? args.isShieldedInstanceEnabled : undefined;
            resourceInputs["isSingleHostSddc"] = args ? args.isSingleHostSddc : undefined;
            resourceInputs["nsxEdgeUplink1vlanId"] = args ? args.nsxEdgeUplink1vlanId : undefined;
            resourceInputs["nsxEdgeUplink2vlanId"] = args ? args.nsxEdgeUplink2vlanId : undefined;
            resourceInputs["nsxEdgeVtepVlanId"] = args ? args.nsxEdgeVtepVlanId : undefined;
            resourceInputs["nsxVtepVlanId"] = args ? args.nsxVtepVlanId : undefined;
            resourceInputs["provisioningSubnetId"] = args ? args.provisioningSubnetId : undefined;
            resourceInputs["provisioningVlanId"] = args ? args.provisioningVlanId : undefined;
            resourceInputs["refreshHcxLicenseStatus"] = args ? args.refreshHcxLicenseStatus : undefined;
            resourceInputs["replicationVlanId"] = args ? args.replicationVlanId : undefined;
            resourceInputs["reservingHcxOnPremiseLicenseKeys"] = args ? args.reservingHcxOnPremiseLicenseKeys : undefined;
            resourceInputs["sshAuthorizedKeys"] = args ? args.sshAuthorizedKeys : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["vmotionVlanId"] = args ? args.vmotionVlanId : undefined;
            resourceInputs["vmwareSoftwareVersion"] = args ? args.vmwareSoftwareVersion : undefined;
            resourceInputs["vsanVlanId"] = args ? args.vsanVlanId : undefined;
            resourceInputs["vsphereVlanId"] = args ? args.vsphereVlanId : undefined;
            resourceInputs["workloadNetworkCidr"] = args ? args.workloadNetworkCidr : undefined;
            resourceInputs["actualEsxiHostsCount"] = undefined /*out*/;
            resourceInputs["clustersCount"] = undefined /*out*/;
            resourceInputs["hcxFqdn"] = undefined /*out*/;
            resourceInputs["hcxInitialPassword"] = undefined /*out*/;
            resourceInputs["hcxMode"] = undefined /*out*/;
            resourceInputs["hcxOnPremKey"] = undefined /*out*/;
            resourceInputs["hcxOnPremLicenses"] = undefined /*out*/;
            resourceInputs["hcxPrivateIpId"] = undefined /*out*/;
            resourceInputs["isHcxEnterpriseEnabled"] = undefined /*out*/;
            resourceInputs["isHcxPendingDowngrade"] = undefined /*out*/;
            resourceInputs["nsxEdgeUplinkIpId"] = undefined /*out*/;
            resourceInputs["nsxManagerFqdn"] = undefined /*out*/;
            resourceInputs["nsxManagerInitialPassword"] = undefined /*out*/;
            resourceInputs["nsxManagerPrivateIpId"] = undefined /*out*/;
            resourceInputs["nsxManagerUsername"] = undefined /*out*/;
            resourceInputs["nsxOverlaySegmentName"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["timeCreated"] = undefined /*out*/;
            resourceInputs["timeHcxBillingCycleEnd"] = undefined /*out*/;
            resourceInputs["timeHcxLicenseStatusUpdated"] = undefined /*out*/;
            resourceInputs["timeUpdated"] = undefined /*out*/;
            resourceInputs["upgradeLicenses"] = undefined /*out*/;
            resourceInputs["vcenterFqdn"] = undefined /*out*/;
            resourceInputs["vcenterInitialPassword"] = undefined /*out*/;
            resourceInputs["vcenterPrivateIpId"] = undefined /*out*/;
            resourceInputs["vcenterUsername"] = undefined /*out*/;
            resourceInputs["vsphereUpgradeGuide"] = undefined /*out*/;
            resourceInputs["vsphereUpgradeObjects"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OcvpSddc.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering OcvpSddc resources.
 */
export interface OcvpSddcState {
    /**
     * @deprecated Deprecated
     */
    actualEsxiHostsCount?: pulumi.Input<number>;
    /**
     * @deprecated Deprecated
     */
    capacityReservationId?: pulumi.Input<string>;
    clustersCount?: pulumi.Input<number>;
    compartmentId?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    computeAvailabilityDomain?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    datastores?: pulumi.Input<pulumi.Input<inputs.OcvpSddcDatastore>[]>;
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    displayName?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    esxiHostsCount?: pulumi.Input<number>;
    esxiSoftwareVersion?: pulumi.Input<string>;
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    hcxAction?: pulumi.Input<string>;
    hcxFqdn?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    hcxInitialPassword?: pulumi.Input<string>;
    hcxMode?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    hcxOnPremKey?: pulumi.Input<string>;
    hcxOnPremLicenses?: pulumi.Input<pulumi.Input<inputs.OcvpSddcHcxOnPremLicense>[]>;
    hcxPrivateIpId?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    hcxVlanId?: pulumi.Input<string>;
    initialConfigurations?: pulumi.Input<pulumi.Input<inputs.OcvpSddcInitialConfiguration>[]>;
    /**
     * @deprecated Deprecated
     */
    initialHostOcpuCount?: pulumi.Input<number>;
    /**
     * @deprecated Deprecated
     */
    initialHostShapeName?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    initialSku?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    instanceDisplayNamePrefix?: pulumi.Input<string>;
    isHcxEnabled?: pulumi.Input<boolean>;
    /**
     * @deprecated Deprecated
     */
    isHcxEnterpriseEnabled?: pulumi.Input<boolean>;
    isHcxPendingDowngrade?: pulumi.Input<boolean>;
    /**
     * @deprecated Deprecated
     */
    isShieldedInstanceEnabled?: pulumi.Input<boolean>;
    isSingleHostSddc?: pulumi.Input<boolean>;
    /**
     * @deprecated Deprecated
     */
    nsxEdgeUplink1vlanId?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    nsxEdgeUplink2vlanId?: pulumi.Input<string>;
    nsxEdgeUplinkIpId?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    nsxEdgeVtepVlanId?: pulumi.Input<string>;
    nsxManagerFqdn?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    nsxManagerInitialPassword?: pulumi.Input<string>;
    nsxManagerPrivateIpId?: pulumi.Input<string>;
    nsxManagerUsername?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    nsxOverlaySegmentName?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    nsxVtepVlanId?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    provisioningSubnetId?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    provisioningVlanId?: pulumi.Input<string>;
    refreshHcxLicenseStatus?: pulumi.Input<boolean>;
    /**
     * @deprecated Deprecated
     */
    replicationVlanId?: pulumi.Input<string>;
    reservingHcxOnPremiseLicenseKeys?: pulumi.Input<pulumi.Input<string>[]>;
    sshAuthorizedKeys?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    timeCreated?: pulumi.Input<string>;
    timeHcxBillingCycleEnd?: pulumi.Input<string>;
    timeHcxLicenseStatusUpdated?: pulumi.Input<string>;
    timeUpdated?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.OcvpSddcTimeouts>;
    /**
     * @deprecated Deprecated
     */
    upgradeLicenses?: pulumi.Input<pulumi.Input<inputs.OcvpSddcUpgradeLicense>[]>;
    vcenterFqdn?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    vcenterInitialPassword?: pulumi.Input<string>;
    vcenterPrivateIpId?: pulumi.Input<string>;
    vcenterUsername?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    vmotionVlanId?: pulumi.Input<string>;
    vmwareSoftwareVersion?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    vsanVlanId?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    vsphereUpgradeGuide?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    vsphereUpgradeObjects?: pulumi.Input<pulumi.Input<inputs.OcvpSddcVsphereUpgradeObject>[]>;
    /**
     * @deprecated Deprecated
     */
    vsphereVlanId?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    workloadNetworkCidr?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a OcvpSddc resource.
 */
export interface OcvpSddcArgs {
    /**
     * @deprecated Deprecated
     */
    capacityReservationId?: pulumi.Input<string>;
    compartmentId: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    computeAvailabilityDomain?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    datastores?: pulumi.Input<pulumi.Input<inputs.OcvpSddcDatastore>[]>;
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    displayName?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    esxiHostsCount?: pulumi.Input<number>;
    esxiSoftwareVersion?: pulumi.Input<string>;
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    hcxAction?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    hcxVlanId?: pulumi.Input<string>;
    initialConfigurations?: pulumi.Input<pulumi.Input<inputs.OcvpSddcInitialConfiguration>[]>;
    /**
     * @deprecated Deprecated
     */
    initialHostOcpuCount?: pulumi.Input<number>;
    /**
     * @deprecated Deprecated
     */
    initialHostShapeName?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    initialSku?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    instanceDisplayNamePrefix?: pulumi.Input<string>;
    isHcxEnabled?: pulumi.Input<boolean>;
    /**
     * @deprecated Deprecated
     */
    isShieldedInstanceEnabled?: pulumi.Input<boolean>;
    isSingleHostSddc?: pulumi.Input<boolean>;
    /**
     * @deprecated Deprecated
     */
    nsxEdgeUplink1vlanId?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    nsxEdgeUplink2vlanId?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    nsxEdgeVtepVlanId?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    nsxVtepVlanId?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    provisioningSubnetId?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    provisioningVlanId?: pulumi.Input<string>;
    refreshHcxLicenseStatus?: pulumi.Input<boolean>;
    /**
     * @deprecated Deprecated
     */
    replicationVlanId?: pulumi.Input<string>;
    reservingHcxOnPremiseLicenseKeys?: pulumi.Input<pulumi.Input<string>[]>;
    sshAuthorizedKeys: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.OcvpSddcTimeouts>;
    /**
     * @deprecated Deprecated
     */
    vmotionVlanId?: pulumi.Input<string>;
    vmwareSoftwareVersion: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    vsanVlanId?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    vsphereVlanId?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    workloadNetworkCidr?: pulumi.Input<string>;
}
