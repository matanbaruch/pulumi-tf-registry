// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CoreIpsecConnectionTunnelManagement extends pulumi.CustomResource {
    /**
     * Get an existing CoreIpsecConnectionTunnelManagement resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CoreIpsecConnectionTunnelManagementState, opts?: pulumi.CustomResourceOptions): CoreIpsecConnectionTunnelManagement {
        return new CoreIpsecConnectionTunnelManagement(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/coreIpsecConnectionTunnelManagement:CoreIpsecConnectionTunnelManagement';

    /**
     * Returns true if the given object is an instance of CoreIpsecConnectionTunnelManagement.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CoreIpsecConnectionTunnelManagement {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CoreIpsecConnectionTunnelManagement.__pulumiType;
    }

    public /*out*/ readonly associatedVirtualCircuits!: pulumi.Output<string[]>;
    public readonly bgpSessionInfo!: pulumi.Output<outputs.CoreIpsecConnectionTunnelManagementBgpSessionInfo | undefined>;
    public /*out*/ readonly compartmentId!: pulumi.Output<string>;
    public /*out*/ readonly cpeIp!: pulumi.Output<string>;
    public readonly displayName!: pulumi.Output<string>;
    public readonly dpdConfigs!: pulumi.Output<outputs.CoreIpsecConnectionTunnelManagementDpdConfig[] | undefined>;
    public /*out*/ readonly dpdMode!: pulumi.Output<string>;
    public /*out*/ readonly dpdTimeoutInSec!: pulumi.Output<number>;
    public readonly encryptionDomainConfig!: pulumi.Output<outputs.CoreIpsecConnectionTunnelManagementEncryptionDomainConfig | undefined>;
    public readonly ikeVersion!: pulumi.Output<string>;
    public readonly ipsecId!: pulumi.Output<string>;
    public readonly natTranslationEnabled!: pulumi.Output<string>;
    public readonly oracleCanInitiate!: pulumi.Output<string>;
    public readonly phaseOneDetails!: pulumi.Output<outputs.CoreIpsecConnectionTunnelManagementPhaseOneDetails | undefined>;
    public readonly phaseTwoDetails!: pulumi.Output<outputs.CoreIpsecConnectionTunnelManagementPhaseTwoDetails | undefined>;
    public readonly routing!: pulumi.Output<string>;
    public readonly sharedSecret!: pulumi.Output<string>;
    public /*out*/ readonly state!: pulumi.Output<string>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public /*out*/ readonly timeCreated!: pulumi.Output<string>;
    public /*out*/ readonly timeStatusUpdated!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.CoreIpsecConnectionTunnelManagementTimeouts | undefined>;
    public readonly tunnelId!: pulumi.Output<string>;
    public /*out*/ readonly vpnIp!: pulumi.Output<string>;

    /**
     * Create a CoreIpsecConnectionTunnelManagement resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CoreIpsecConnectionTunnelManagementArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CoreIpsecConnectionTunnelManagementArgs | CoreIpsecConnectionTunnelManagementState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CoreIpsecConnectionTunnelManagementState | undefined;
            resourceInputs["associatedVirtualCircuits"] = state ? state.associatedVirtualCircuits : undefined;
            resourceInputs["bgpSessionInfo"] = state ? state.bgpSessionInfo : undefined;
            resourceInputs["compartmentId"] = state ? state.compartmentId : undefined;
            resourceInputs["cpeIp"] = state ? state.cpeIp : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["dpdConfigs"] = state ? state.dpdConfigs : undefined;
            resourceInputs["dpdMode"] = state ? state.dpdMode : undefined;
            resourceInputs["dpdTimeoutInSec"] = state ? state.dpdTimeoutInSec : undefined;
            resourceInputs["encryptionDomainConfig"] = state ? state.encryptionDomainConfig : undefined;
            resourceInputs["ikeVersion"] = state ? state.ikeVersion : undefined;
            resourceInputs["ipsecId"] = state ? state.ipsecId : undefined;
            resourceInputs["natTranslationEnabled"] = state ? state.natTranslationEnabled : undefined;
            resourceInputs["oracleCanInitiate"] = state ? state.oracleCanInitiate : undefined;
            resourceInputs["phaseOneDetails"] = state ? state.phaseOneDetails : undefined;
            resourceInputs["phaseTwoDetails"] = state ? state.phaseTwoDetails : undefined;
            resourceInputs["routing"] = state ? state.routing : undefined;
            resourceInputs["sharedSecret"] = state ? state.sharedSecret : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["timeCreated"] = state ? state.timeCreated : undefined;
            resourceInputs["timeStatusUpdated"] = state ? state.timeStatusUpdated : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["tunnelId"] = state ? state.tunnelId : undefined;
            resourceInputs["vpnIp"] = state ? state.vpnIp : undefined;
        } else {
            const args = argsOrState as CoreIpsecConnectionTunnelManagementArgs | undefined;
            if ((!args || args.ipsecId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ipsecId'");
            }
            if ((!args || args.tunnelId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tunnelId'");
            }
            resourceInputs["bgpSessionInfo"] = args ? args.bgpSessionInfo : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["dpdConfigs"] = args ? args.dpdConfigs : undefined;
            resourceInputs["encryptionDomainConfig"] = args ? args.encryptionDomainConfig : undefined;
            resourceInputs["ikeVersion"] = args ? args.ikeVersion : undefined;
            resourceInputs["ipsecId"] = args ? args.ipsecId : undefined;
            resourceInputs["natTranslationEnabled"] = args ? args.natTranslationEnabled : undefined;
            resourceInputs["oracleCanInitiate"] = args ? args.oracleCanInitiate : undefined;
            resourceInputs["phaseOneDetails"] = args ? args.phaseOneDetails : undefined;
            resourceInputs["phaseTwoDetails"] = args ? args.phaseTwoDetails : undefined;
            resourceInputs["routing"] = args ? args.routing : undefined;
            resourceInputs["sharedSecret"] = args?.sharedSecret ? pulumi.secret(args.sharedSecret) : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["tunnelId"] = args ? args.tunnelId : undefined;
            resourceInputs["associatedVirtualCircuits"] = undefined /*out*/;
            resourceInputs["compartmentId"] = undefined /*out*/;
            resourceInputs["cpeIp"] = undefined /*out*/;
            resourceInputs["dpdMode"] = undefined /*out*/;
            resourceInputs["dpdTimeoutInSec"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["timeCreated"] = undefined /*out*/;
            resourceInputs["timeStatusUpdated"] = undefined /*out*/;
            resourceInputs["vpnIp"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["sharedSecret"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(CoreIpsecConnectionTunnelManagement.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CoreIpsecConnectionTunnelManagement resources.
 */
export interface CoreIpsecConnectionTunnelManagementState {
    associatedVirtualCircuits?: pulumi.Input<pulumi.Input<string>[]>;
    bgpSessionInfo?: pulumi.Input<inputs.CoreIpsecConnectionTunnelManagementBgpSessionInfo>;
    compartmentId?: pulumi.Input<string>;
    cpeIp?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    dpdConfigs?: pulumi.Input<pulumi.Input<inputs.CoreIpsecConnectionTunnelManagementDpdConfig>[]>;
    dpdMode?: pulumi.Input<string>;
    dpdTimeoutInSec?: pulumi.Input<number>;
    encryptionDomainConfig?: pulumi.Input<inputs.CoreIpsecConnectionTunnelManagementEncryptionDomainConfig>;
    ikeVersion?: pulumi.Input<string>;
    ipsecId?: pulumi.Input<string>;
    natTranslationEnabled?: pulumi.Input<string>;
    oracleCanInitiate?: pulumi.Input<string>;
    phaseOneDetails?: pulumi.Input<inputs.CoreIpsecConnectionTunnelManagementPhaseOneDetails>;
    phaseTwoDetails?: pulumi.Input<inputs.CoreIpsecConnectionTunnelManagementPhaseTwoDetails>;
    routing?: pulumi.Input<string>;
    sharedSecret?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    timeCreated?: pulumi.Input<string>;
    timeStatusUpdated?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.CoreIpsecConnectionTunnelManagementTimeouts>;
    tunnelId?: pulumi.Input<string>;
    vpnIp?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CoreIpsecConnectionTunnelManagement resource.
 */
export interface CoreIpsecConnectionTunnelManagementArgs {
    bgpSessionInfo?: pulumi.Input<inputs.CoreIpsecConnectionTunnelManagementBgpSessionInfo>;
    displayName?: pulumi.Input<string>;
    dpdConfigs?: pulumi.Input<pulumi.Input<inputs.CoreIpsecConnectionTunnelManagementDpdConfig>[]>;
    encryptionDomainConfig?: pulumi.Input<inputs.CoreIpsecConnectionTunnelManagementEncryptionDomainConfig>;
    ikeVersion?: pulumi.Input<string>;
    ipsecId: pulumi.Input<string>;
    natTranslationEnabled?: pulumi.Input<string>;
    oracleCanInitiate?: pulumi.Input<string>;
    phaseOneDetails?: pulumi.Input<inputs.CoreIpsecConnectionTunnelManagementPhaseOneDetails>;
    phaseTwoDetails?: pulumi.Input<inputs.CoreIpsecConnectionTunnelManagementPhaseTwoDetails>;
    routing?: pulumi.Input<string>;
    sharedSecret?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.CoreIpsecConnectionTunnelManagementTimeouts>;
    tunnelId: pulumi.Input<string>;
}
