// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class NetworkLoadBalancerNetworkLoadBalancer extends pulumi.CustomResource {
    /**
     * Get an existing NetworkLoadBalancerNetworkLoadBalancer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetworkLoadBalancerNetworkLoadBalancerState, opts?: pulumi.CustomResourceOptions): NetworkLoadBalancerNetworkLoadBalancer {
        return new NetworkLoadBalancerNetworkLoadBalancer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/networkLoadBalancerNetworkLoadBalancer:NetworkLoadBalancerNetworkLoadBalancer';

    /**
     * Returns true if the given object is an instance of NetworkLoadBalancerNetworkLoadBalancer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NetworkLoadBalancerNetworkLoadBalancer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NetworkLoadBalancerNetworkLoadBalancer.__pulumiType;
    }

    public readonly assignedIpv6!: pulumi.Output<string | undefined>;
    public readonly assignedPrivateIpv4!: pulumi.Output<string | undefined>;
    public readonly compartmentId!: pulumi.Output<string>;
    public readonly definedTags!: pulumi.Output<{[key: string]: string}>;
    public readonly displayName!: pulumi.Output<string>;
    public readonly freeformTags!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly ipAddresses!: pulumi.Output<outputs.NetworkLoadBalancerNetworkLoadBalancerIpAddress[]>;
    public readonly isPreserveSourceDestination!: pulumi.Output<boolean>;
    public readonly isPrivate!: pulumi.Output<boolean>;
    public readonly isSymmetricHashEnabled!: pulumi.Output<boolean>;
    public /*out*/ readonly lifecycleDetails!: pulumi.Output<string>;
    public readonly networkSecurityGroupIds!: pulumi.Output<string[] | undefined>;
    public readonly nlbIpVersion!: pulumi.Output<string>;
    public readonly reservedIps!: pulumi.Output<outputs.NetworkLoadBalancerNetworkLoadBalancerReservedIp[] | undefined>;
    public /*out*/ readonly state!: pulumi.Output<string>;
    public readonly subnetId!: pulumi.Output<string>;
    public readonly subnetIpv6cidr!: pulumi.Output<string | undefined>;
    public /*out*/ readonly systemTags!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly timeCreated!: pulumi.Output<string>;
    public /*out*/ readonly timeUpdated!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.NetworkLoadBalancerNetworkLoadBalancerTimeouts | undefined>;

    /**
     * Create a NetworkLoadBalancerNetworkLoadBalancer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NetworkLoadBalancerNetworkLoadBalancerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NetworkLoadBalancerNetworkLoadBalancerArgs | NetworkLoadBalancerNetworkLoadBalancerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NetworkLoadBalancerNetworkLoadBalancerState | undefined;
            resourceInputs["assignedIpv6"] = state ? state.assignedIpv6 : undefined;
            resourceInputs["assignedPrivateIpv4"] = state ? state.assignedPrivateIpv4 : undefined;
            resourceInputs["compartmentId"] = state ? state.compartmentId : undefined;
            resourceInputs["definedTags"] = state ? state.definedTags : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["freeformTags"] = state ? state.freeformTags : undefined;
            resourceInputs["ipAddresses"] = state ? state.ipAddresses : undefined;
            resourceInputs["isPreserveSourceDestination"] = state ? state.isPreserveSourceDestination : undefined;
            resourceInputs["isPrivate"] = state ? state.isPrivate : undefined;
            resourceInputs["isSymmetricHashEnabled"] = state ? state.isSymmetricHashEnabled : undefined;
            resourceInputs["lifecycleDetails"] = state ? state.lifecycleDetails : undefined;
            resourceInputs["networkSecurityGroupIds"] = state ? state.networkSecurityGroupIds : undefined;
            resourceInputs["nlbIpVersion"] = state ? state.nlbIpVersion : undefined;
            resourceInputs["reservedIps"] = state ? state.reservedIps : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["subnetId"] = state ? state.subnetId : undefined;
            resourceInputs["subnetIpv6cidr"] = state ? state.subnetIpv6cidr : undefined;
            resourceInputs["systemTags"] = state ? state.systemTags : undefined;
            resourceInputs["timeCreated"] = state ? state.timeCreated : undefined;
            resourceInputs["timeUpdated"] = state ? state.timeUpdated : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as NetworkLoadBalancerNetworkLoadBalancerArgs | undefined;
            if ((!args || args.compartmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'compartmentId'");
            }
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if ((!args || args.subnetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnetId'");
            }
            resourceInputs["assignedIpv6"] = args ? args.assignedIpv6 : undefined;
            resourceInputs["assignedPrivateIpv4"] = args ? args.assignedPrivateIpv4 : undefined;
            resourceInputs["compartmentId"] = args ? args.compartmentId : undefined;
            resourceInputs["definedTags"] = args ? args.definedTags : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["freeformTags"] = args ? args.freeformTags : undefined;
            resourceInputs["isPreserveSourceDestination"] = args ? args.isPreserveSourceDestination : undefined;
            resourceInputs["isPrivate"] = args ? args.isPrivate : undefined;
            resourceInputs["isSymmetricHashEnabled"] = args ? args.isSymmetricHashEnabled : undefined;
            resourceInputs["networkSecurityGroupIds"] = args ? args.networkSecurityGroupIds : undefined;
            resourceInputs["nlbIpVersion"] = args ? args.nlbIpVersion : undefined;
            resourceInputs["reservedIps"] = args ? args.reservedIps : undefined;
            resourceInputs["subnetId"] = args ? args.subnetId : undefined;
            resourceInputs["subnetIpv6cidr"] = args ? args.subnetIpv6cidr : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["ipAddresses"] = undefined /*out*/;
            resourceInputs["lifecycleDetails"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["systemTags"] = undefined /*out*/;
            resourceInputs["timeCreated"] = undefined /*out*/;
            resourceInputs["timeUpdated"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NetworkLoadBalancerNetworkLoadBalancer.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering NetworkLoadBalancerNetworkLoadBalancer resources.
 */
export interface NetworkLoadBalancerNetworkLoadBalancerState {
    assignedIpv6?: pulumi.Input<string>;
    assignedPrivateIpv4?: pulumi.Input<string>;
    compartmentId?: pulumi.Input<string>;
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    displayName?: pulumi.Input<string>;
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    ipAddresses?: pulumi.Input<pulumi.Input<inputs.NetworkLoadBalancerNetworkLoadBalancerIpAddress>[]>;
    isPreserveSourceDestination?: pulumi.Input<boolean>;
    isPrivate?: pulumi.Input<boolean>;
    isSymmetricHashEnabled?: pulumi.Input<boolean>;
    lifecycleDetails?: pulumi.Input<string>;
    networkSecurityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    nlbIpVersion?: pulumi.Input<string>;
    reservedIps?: pulumi.Input<pulumi.Input<inputs.NetworkLoadBalancerNetworkLoadBalancerReservedIp>[]>;
    state?: pulumi.Input<string>;
    subnetId?: pulumi.Input<string>;
    subnetIpv6cidr?: pulumi.Input<string>;
    systemTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeCreated?: pulumi.Input<string>;
    timeUpdated?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.NetworkLoadBalancerNetworkLoadBalancerTimeouts>;
}

/**
 * The set of arguments for constructing a NetworkLoadBalancerNetworkLoadBalancer resource.
 */
export interface NetworkLoadBalancerNetworkLoadBalancerArgs {
    assignedIpv6?: pulumi.Input<string>;
    assignedPrivateIpv4?: pulumi.Input<string>;
    compartmentId: pulumi.Input<string>;
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    displayName: pulumi.Input<string>;
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    isPreserveSourceDestination?: pulumi.Input<boolean>;
    isPrivate?: pulumi.Input<boolean>;
    isSymmetricHashEnabled?: pulumi.Input<boolean>;
    networkSecurityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    nlbIpVersion?: pulumi.Input<string>;
    reservedIps?: pulumi.Input<pulumi.Input<inputs.NetworkLoadBalancerNetworkLoadBalancerReservedIp>[]>;
    subnetId: pulumi.Input<string>;
    subnetIpv6cidr?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.NetworkLoadBalancerNetworkLoadBalancerTimeouts>;
}
