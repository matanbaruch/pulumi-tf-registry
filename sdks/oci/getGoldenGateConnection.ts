// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getGoldenGateConnection(args: GetGoldenGateConnectionArgs, opts?: pulumi.InvokeOptions): Promise<GetGoldenGateConnectionResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getGoldenGateConnection:getGoldenGateConnection", {
        "connectionId": args.connectionId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getGoldenGateConnection.
 */
export interface GetGoldenGateConnectionArgs {
    connectionId: string;
}

/**
 * A collection of values returned by getGoldenGateConnection.
 */
export interface GetGoldenGateConnectionResult {
    readonly accessKeyId: string;
    readonly accountKey: string;
    readonly accountName: string;
    readonly additionalAttributes: outputs.GetGoldenGateConnectionAdditionalAttribute[];
    readonly authenticationMode: string;
    readonly authenticationType: string;
    readonly azureTenantId: string;
    readonly bootstrapServers: outputs.GetGoldenGateConnectionBootstrapServer[];
    readonly clientId: string;
    readonly clientSecret: string;
    readonly compartmentId: string;
    readonly connectionFactory: string;
    readonly connectionId: string;
    readonly connectionString: string;
    readonly connectionType: string;
    readonly connectionUrl: string;
    readonly consumerProperties: string;
    readonly coreSiteXml: string;
    readonly databaseId: string;
    readonly databaseName: string;
    readonly dbSystemId: string;
    readonly definedTags: {[key: string]: string};
    readonly deploymentId: string;
    readonly description: string;
    readonly displayName: string;
    readonly endpoint: string;
    readonly fingerprint: string;
    readonly freeformTags: {[key: string]: string};
    readonly host: string;
    readonly id: string;
    readonly ingressIps: outputs.GetGoldenGateConnectionIngressIp[];
    readonly isLockOverride: boolean;
    readonly jndiConnectionFactory: string;
    readonly jndiInitialContextFactory: string;
    readonly jndiProviderUrl: string;
    readonly jndiSecurityCredentials: string;
    readonly jndiSecurityPrincipal: string;
    readonly keyId: string;
    readonly keyStore: string;
    readonly keyStorePassword: string;
    readonly lifecycleDetails: string;
    readonly locks: outputs.GetGoldenGateConnectionLock[];
    readonly nsgIds: string[];
    readonly password: string;
    readonly port: number;
    readonly privateIp: string;
    readonly privateKeyFile: string;
    readonly privateKeyPassphrase: string;
    readonly producerProperties: string;
    readonly publicKeyFingerprint: string;
    readonly redisClusterId: string;
    readonly region: string;
    readonly routingMethod: string;
    readonly sasToken: string;
    readonly secretAccessKey: string;
    readonly securityProtocol: string;
    readonly servers: string;
    readonly serviceAccountKeyFile: string;
    readonly sessionMode: string;
    readonly shouldUseJndi: boolean;
    readonly shouldValidateServerCertificate: boolean;
    readonly sslCa: string;
    readonly sslCert: string;
    readonly sslClientKeystash: string;
    readonly sslClientKeystoredb: string;
    readonly sslCrl: string;
    readonly sslKey: string;
    readonly sslKeyPassword: string;
    readonly sslMode: string;
    readonly sslServerCertificate: string;
    readonly state: string;
    readonly streamPoolId: string;
    readonly subnetId: string;
    readonly systemTags: {[key: string]: string};
    readonly technologyType: string;
    readonly tenancyId: string;
    readonly timeCreated: string;
    readonly timeUpdated: string;
    readonly trustStore: string;
    readonly trustStorePassword: string;
    readonly url: string;
    readonly userId: string;
    readonly username: string;
    readonly vaultId: string;
    readonly wallet: string;
}
export function getGoldenGateConnectionOutput(args: GetGoldenGateConnectionOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetGoldenGateConnectionResult> {
    return pulumi.output(args).apply((a: any) => getGoldenGateConnection(a, opts))
}

/**
 * A collection of arguments for invoking getGoldenGateConnection.
 */
export interface GetGoldenGateConnectionOutputArgs {
    connectionId: pulumi.Input<string>;
}
