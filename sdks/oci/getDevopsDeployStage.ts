// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getDevopsDeployStage(args: GetDevopsDeployStageArgs, opts?: pulumi.InvokeOptions): Promise<GetDevopsDeployStageResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getDevopsDeployStage:getDevopsDeployStage", {
        "deployStageId": args.deployStageId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getDevopsDeployStage.
 */
export interface GetDevopsDeployStageArgs {
    deployStageId: string;
}

/**
 * A collection of values returned by getDevopsDeployStage.
 */
export interface GetDevopsDeployStageResult {
    readonly approvalPolicies: outputs.GetDevopsDeployStageApprovalPolicy[];
    readonly areHooksEnabled: boolean;
    readonly blueBackendIps: outputs.GetDevopsDeployStageBlueBackendIp[];
    readonly blueGreenStrategies: outputs.GetDevopsDeployStageBlueGreenStrategy[];
    readonly canaryStrategies: outputs.GetDevopsDeployStageCanaryStrategy[];
    readonly commandSpecDeployArtifactId: string;
    readonly compartmentId: string;
    readonly computeInstanceGroupBlueGreenDeploymentDeployStageId: string;
    readonly computeInstanceGroupCanaryDeployStageId: string;
    readonly computeInstanceGroupCanaryTrafficShiftDeployStageId: string;
    readonly computeInstanceGroupDeployEnvironmentId: string;
    readonly config: {[key: string]: string};
    readonly containerConfigs: outputs.GetDevopsDeployStageContainerConfig[];
    readonly definedTags: {[key: string]: string};
    readonly deployArtifactId: string;
    readonly deployArtifactIds: string[];
    readonly deployEnvironmentIdA: string;
    readonly deployEnvironmentIdB: string;
    readonly deployPipelineId: string;
    readonly deployStageId: string;
    readonly deployStagePredecessorCollections: outputs.GetDevopsDeployStageDeployStagePredecessorCollection[];
    readonly deployStageType: string;
    readonly deploymentSpecDeployArtifactId: string;
    readonly description: string;
    readonly displayName: string;
    readonly dockerImageDeployArtifactId: string;
    readonly failurePolicies: outputs.GetDevopsDeployStageFailurePolicy[];
    readonly freeformTags: {[key: string]: string};
    readonly functionDeployEnvironmentId: string;
    readonly functionTimeoutInSeconds: number;
    readonly greenBackendIps: outputs.GetDevopsDeployStageGreenBackendIp[];
    readonly helmChartDeployArtifactId: string;
    readonly helmCommandArtifactIds: string[];
    readonly id: string;
    readonly isAsync: boolean;
    readonly isDebugEnabled: boolean;
    readonly isForceEnabled: boolean;
    readonly isUninstallOnStageDelete: boolean;
    readonly isValidationEnabled: boolean;
    readonly kubernetesManifestDeployArtifactIds: string[];
    readonly lifecycleDetails: string;
    readonly loadBalancerConfigs: outputs.GetDevopsDeployStageLoadBalancerConfig[];
    readonly maxHistory: number;
    readonly maxMemoryInMbs: string;
    readonly namespace: string;
    readonly okeBlueGreenDeployStageId: string;
    readonly okeCanaryDeployStageId: string;
    readonly okeCanaryTrafficShiftDeployStageId: string;
    readonly okeClusterDeployEnvironmentId: string;
    readonly productionLoadBalancerConfigs: outputs.GetDevopsDeployStageProductionLoadBalancerConfig[];
    readonly projectId: string;
    readonly purpose: string;
    readonly releaseName: string;
    readonly rollbackPolicies: outputs.GetDevopsDeployStageRollbackPolicy[];
    readonly rolloutPolicies: outputs.GetDevopsDeployStageRolloutPolicy[];
    readonly setStrings: outputs.GetDevopsDeployStageSetString[];
    readonly setValues: outputs.GetDevopsDeployStageSetValue[];
    readonly shouldCleanupOnFail: boolean;
    readonly shouldNotWait: boolean;
    readonly shouldResetValues: boolean;
    readonly shouldReuseValues: boolean;
    readonly shouldSkipCrds: boolean;
    readonly shouldSkipRenderSubchartNotes: boolean;
    readonly state: string;
    readonly systemTags: {[key: string]: string};
    readonly testLoadBalancerConfigs: outputs.GetDevopsDeployStageTestLoadBalancerConfig[];
    readonly timeCreated: string;
    readonly timeUpdated: string;
    readonly timeoutInSeconds: number;
    readonly trafficShiftTarget: string;
    readonly valuesArtifactIds: string[];
    readonly waitCriterias: outputs.GetDevopsDeployStageWaitCriteria[];
}
export function getDevopsDeployStageOutput(args: GetDevopsDeployStageOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDevopsDeployStageResult> {
    return pulumi.output(args).apply((a: any) => getDevopsDeployStage(a, opts))
}

/**
 * A collection of arguments for invoking getDevopsDeployStage.
 */
export interface GetDevopsDeployStageOutputArgs {
    deployStageId: pulumi.Input<string>;
}
