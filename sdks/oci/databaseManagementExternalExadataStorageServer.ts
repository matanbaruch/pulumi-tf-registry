// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DatabaseManagementExternalExadataStorageServer extends pulumi.CustomResource {
    /**
     * Get an existing DatabaseManagementExternalExadataStorageServer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DatabaseManagementExternalExadataStorageServerState, opts?: pulumi.CustomResourceOptions): DatabaseManagementExternalExadataStorageServer {
        return new DatabaseManagementExternalExadataStorageServer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/databaseManagementExternalExadataStorageServer:DatabaseManagementExternalExadataStorageServer';

    /**
     * Returns true if the given object is an instance of DatabaseManagementExternalExadataStorageServer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DatabaseManagementExternalExadataStorageServer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DatabaseManagementExternalExadataStorageServer.__pulumiType;
    }

    public /*out*/ readonly additionalDetails!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly connectors!: pulumi.Output<outputs.DatabaseManagementExternalExadataStorageServerConnector[]>;
    public /*out*/ readonly cpuCount!: pulumi.Output<number>;
    public readonly definedTags!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly displayName!: pulumi.Output<string>;
    public /*out*/ readonly exadataInfrastructureId!: pulumi.Output<string>;
    public readonly externalExadataStorageServerId!: pulumi.Output<string>;
    public readonly freeformTags!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly internalId!: pulumi.Output<string>;
    public /*out*/ readonly ipAddress!: pulumi.Output<string>;
    public /*out*/ readonly lifecycleDetails!: pulumi.Output<string>;
    public /*out*/ readonly makeModel!: pulumi.Output<string>;
    public /*out*/ readonly maxFlashDiskIops!: pulumi.Output<number>;
    public /*out*/ readonly maxFlashDiskThroughput!: pulumi.Output<number>;
    public /*out*/ readonly maxHardDiskIops!: pulumi.Output<number>;
    public /*out*/ readonly maxHardDiskThroughput!: pulumi.Output<number>;
    public /*out*/ readonly memoryGb!: pulumi.Output<number>;
    public /*out*/ readonly resourceType!: pulumi.Output<string>;
    public /*out*/ readonly state!: pulumi.Output<string>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public /*out*/ readonly storageGridId!: pulumi.Output<string>;
    public /*out*/ readonly systemTags!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly timeCreated!: pulumi.Output<string>;
    public /*out*/ readonly timeUpdated!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.DatabaseManagementExternalExadataStorageServerTimeouts | undefined>;
    public /*out*/ readonly version!: pulumi.Output<string>;

    /**
     * Create a DatabaseManagementExternalExadataStorageServer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatabaseManagementExternalExadataStorageServerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DatabaseManagementExternalExadataStorageServerArgs | DatabaseManagementExternalExadataStorageServerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DatabaseManagementExternalExadataStorageServerState | undefined;
            resourceInputs["additionalDetails"] = state ? state.additionalDetails : undefined;
            resourceInputs["connectors"] = state ? state.connectors : undefined;
            resourceInputs["cpuCount"] = state ? state.cpuCount : undefined;
            resourceInputs["definedTags"] = state ? state.definedTags : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["exadataInfrastructureId"] = state ? state.exadataInfrastructureId : undefined;
            resourceInputs["externalExadataStorageServerId"] = state ? state.externalExadataStorageServerId : undefined;
            resourceInputs["freeformTags"] = state ? state.freeformTags : undefined;
            resourceInputs["internalId"] = state ? state.internalId : undefined;
            resourceInputs["ipAddress"] = state ? state.ipAddress : undefined;
            resourceInputs["lifecycleDetails"] = state ? state.lifecycleDetails : undefined;
            resourceInputs["makeModel"] = state ? state.makeModel : undefined;
            resourceInputs["maxFlashDiskIops"] = state ? state.maxFlashDiskIops : undefined;
            resourceInputs["maxFlashDiskThroughput"] = state ? state.maxFlashDiskThroughput : undefined;
            resourceInputs["maxHardDiskIops"] = state ? state.maxHardDiskIops : undefined;
            resourceInputs["maxHardDiskThroughput"] = state ? state.maxHardDiskThroughput : undefined;
            resourceInputs["memoryGb"] = state ? state.memoryGb : undefined;
            resourceInputs["resourceType"] = state ? state.resourceType : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["storageGridId"] = state ? state.storageGridId : undefined;
            resourceInputs["systemTags"] = state ? state.systemTags : undefined;
            resourceInputs["timeCreated"] = state ? state.timeCreated : undefined;
            resourceInputs["timeUpdated"] = state ? state.timeUpdated : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as DatabaseManagementExternalExadataStorageServerArgs | undefined;
            if ((!args || args.externalExadataStorageServerId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'externalExadataStorageServerId'");
            }
            resourceInputs["definedTags"] = args ? args.definedTags : undefined;
            resourceInputs["externalExadataStorageServerId"] = args ? args.externalExadataStorageServerId : undefined;
            resourceInputs["freeformTags"] = args ? args.freeformTags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["additionalDetails"] = undefined /*out*/;
            resourceInputs["connectors"] = undefined /*out*/;
            resourceInputs["cpuCount"] = undefined /*out*/;
            resourceInputs["displayName"] = undefined /*out*/;
            resourceInputs["exadataInfrastructureId"] = undefined /*out*/;
            resourceInputs["internalId"] = undefined /*out*/;
            resourceInputs["ipAddress"] = undefined /*out*/;
            resourceInputs["lifecycleDetails"] = undefined /*out*/;
            resourceInputs["makeModel"] = undefined /*out*/;
            resourceInputs["maxFlashDiskIops"] = undefined /*out*/;
            resourceInputs["maxFlashDiskThroughput"] = undefined /*out*/;
            resourceInputs["maxHardDiskIops"] = undefined /*out*/;
            resourceInputs["maxHardDiskThroughput"] = undefined /*out*/;
            resourceInputs["memoryGb"] = undefined /*out*/;
            resourceInputs["resourceType"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["storageGridId"] = undefined /*out*/;
            resourceInputs["systemTags"] = undefined /*out*/;
            resourceInputs["timeCreated"] = undefined /*out*/;
            resourceInputs["timeUpdated"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DatabaseManagementExternalExadataStorageServer.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DatabaseManagementExternalExadataStorageServer resources.
 */
export interface DatabaseManagementExternalExadataStorageServerState {
    additionalDetails?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    connectors?: pulumi.Input<pulumi.Input<inputs.DatabaseManagementExternalExadataStorageServerConnector>[]>;
    cpuCount?: pulumi.Input<number>;
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    displayName?: pulumi.Input<string>;
    exadataInfrastructureId?: pulumi.Input<string>;
    externalExadataStorageServerId?: pulumi.Input<string>;
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    internalId?: pulumi.Input<string>;
    ipAddress?: pulumi.Input<string>;
    lifecycleDetails?: pulumi.Input<string>;
    makeModel?: pulumi.Input<string>;
    maxFlashDiskIops?: pulumi.Input<number>;
    maxFlashDiskThroughput?: pulumi.Input<number>;
    maxHardDiskIops?: pulumi.Input<number>;
    maxHardDiskThroughput?: pulumi.Input<number>;
    memoryGb?: pulumi.Input<number>;
    resourceType?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    storageGridId?: pulumi.Input<string>;
    systemTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeCreated?: pulumi.Input<string>;
    timeUpdated?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.DatabaseManagementExternalExadataStorageServerTimeouts>;
    version?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DatabaseManagementExternalExadataStorageServer resource.
 */
export interface DatabaseManagementExternalExadataStorageServerArgs {
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    externalExadataStorageServerId: pulumi.Input<string>;
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.DatabaseManagementExternalExadataStorageServerTimeouts>;
}
