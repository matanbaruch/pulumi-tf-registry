// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getAnalyticsAnalyticsInstance(args: GetAnalyticsAnalyticsInstanceArgs, opts?: pulumi.InvokeOptions): Promise<GetAnalyticsAnalyticsInstanceResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getAnalyticsAnalyticsInstance:getAnalyticsAnalyticsInstance", {
        "analyticsInstanceId": args.analyticsInstanceId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getAnalyticsAnalyticsInstance.
 */
export interface GetAnalyticsAnalyticsInstanceArgs {
    analyticsInstanceId: string;
}

/**
 * A collection of values returned by getAnalyticsAnalyticsInstance.
 */
export interface GetAnalyticsAnalyticsInstanceResult {
    readonly adminUser: string;
    readonly analyticsInstanceId: string;
    readonly capacities: outputs.GetAnalyticsAnalyticsInstanceCapacity[];
    readonly compartmentId: string;
    readonly definedTags: {[key: string]: string};
    readonly description: string;
    readonly domainId: string;
    readonly emailNotification: string;
    readonly featureBundle: string;
    readonly featureSet: string;
    readonly freeformTags: {[key: string]: string};
    readonly id: string;
    readonly idcsAccessToken: string;
    readonly kmsKeyId: string;
    readonly licenseType: string;
    readonly name: string;
    readonly networkEndpointDetails: outputs.GetAnalyticsAnalyticsInstanceNetworkEndpointDetail[];
    readonly serviceUrl: string;
    readonly state: string;
    readonly systemTags: {[key: string]: string};
    readonly timeCreated: string;
    readonly timeUpdated: string;
}
export function getAnalyticsAnalyticsInstanceOutput(args: GetAnalyticsAnalyticsInstanceOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetAnalyticsAnalyticsInstanceResult> {
    return pulumi.output(args).apply((a: any) => getAnalyticsAnalyticsInstance(a, opts))
}

/**
 * A collection of arguments for invoking getAnalyticsAnalyticsInstance.
 */
export interface GetAnalyticsAnalyticsInstanceOutputArgs {
    analyticsInstanceId: pulumi.Input<string>;
}
