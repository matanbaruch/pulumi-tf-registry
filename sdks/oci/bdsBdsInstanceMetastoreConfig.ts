// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class BdsBdsInstanceMetastoreConfig extends pulumi.CustomResource {
    /**
     * Get an existing BdsBdsInstanceMetastoreConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BdsBdsInstanceMetastoreConfigState, opts?: pulumi.CustomResourceOptions): BdsBdsInstanceMetastoreConfig {
        return new BdsBdsInstanceMetastoreConfig(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/bdsBdsInstanceMetastoreConfig:BdsBdsInstanceMetastoreConfig';

    /**
     * Returns true if the given object is an instance of BdsBdsInstanceMetastoreConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BdsBdsInstanceMetastoreConfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BdsBdsInstanceMetastoreConfig.__pulumiType;
    }

    public readonly activateTrigger!: pulumi.Output<number | undefined>;
    public readonly bdsApiKeyId!: pulumi.Output<string>;
    public readonly bdsApiKeyPassphrase!: pulumi.Output<string>;
    public readonly bdsInstanceId!: pulumi.Output<string>;
    public readonly clusterAdminPassword!: pulumi.Output<string>;
    public readonly displayName!: pulumi.Output<string>;
    public readonly metastoreId!: pulumi.Output<string>;
    public /*out*/ readonly metastoreType!: pulumi.Output<string>;
    public /*out*/ readonly state!: pulumi.Output<string>;
    public /*out*/ readonly timeCreated!: pulumi.Output<string>;
    public /*out*/ readonly timeUpdated!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.BdsBdsInstanceMetastoreConfigTimeouts | undefined>;

    /**
     * Create a BdsBdsInstanceMetastoreConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BdsBdsInstanceMetastoreConfigArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BdsBdsInstanceMetastoreConfigArgs | BdsBdsInstanceMetastoreConfigState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BdsBdsInstanceMetastoreConfigState | undefined;
            resourceInputs["activateTrigger"] = state ? state.activateTrigger : undefined;
            resourceInputs["bdsApiKeyId"] = state ? state.bdsApiKeyId : undefined;
            resourceInputs["bdsApiKeyPassphrase"] = state ? state.bdsApiKeyPassphrase : undefined;
            resourceInputs["bdsInstanceId"] = state ? state.bdsInstanceId : undefined;
            resourceInputs["clusterAdminPassword"] = state ? state.clusterAdminPassword : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["metastoreId"] = state ? state.metastoreId : undefined;
            resourceInputs["metastoreType"] = state ? state.metastoreType : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["timeCreated"] = state ? state.timeCreated : undefined;
            resourceInputs["timeUpdated"] = state ? state.timeUpdated : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as BdsBdsInstanceMetastoreConfigArgs | undefined;
            if ((!args || args.bdsApiKeyId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bdsApiKeyId'");
            }
            if ((!args || args.bdsApiKeyPassphrase === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bdsApiKeyPassphrase'");
            }
            if ((!args || args.bdsInstanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bdsInstanceId'");
            }
            if ((!args || args.clusterAdminPassword === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterAdminPassword'");
            }
            if ((!args || args.metastoreId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'metastoreId'");
            }
            resourceInputs["activateTrigger"] = args ? args.activateTrigger : undefined;
            resourceInputs["bdsApiKeyId"] = args ? args.bdsApiKeyId : undefined;
            resourceInputs["bdsApiKeyPassphrase"] = args?.bdsApiKeyPassphrase ? pulumi.secret(args.bdsApiKeyPassphrase) : undefined;
            resourceInputs["bdsInstanceId"] = args ? args.bdsInstanceId : undefined;
            resourceInputs["clusterAdminPassword"] = args?.clusterAdminPassword ? pulumi.secret(args.clusterAdminPassword) : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["metastoreId"] = args ? args.metastoreId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["metastoreType"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["timeCreated"] = undefined /*out*/;
            resourceInputs["timeUpdated"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["bdsApiKeyPassphrase", "clusterAdminPassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(BdsBdsInstanceMetastoreConfig.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering BdsBdsInstanceMetastoreConfig resources.
 */
export interface BdsBdsInstanceMetastoreConfigState {
    activateTrigger?: pulumi.Input<number>;
    bdsApiKeyId?: pulumi.Input<string>;
    bdsApiKeyPassphrase?: pulumi.Input<string>;
    bdsInstanceId?: pulumi.Input<string>;
    clusterAdminPassword?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    metastoreId?: pulumi.Input<string>;
    metastoreType?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    timeCreated?: pulumi.Input<string>;
    timeUpdated?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.BdsBdsInstanceMetastoreConfigTimeouts>;
}

/**
 * The set of arguments for constructing a BdsBdsInstanceMetastoreConfig resource.
 */
export interface BdsBdsInstanceMetastoreConfigArgs {
    activateTrigger?: pulumi.Input<number>;
    bdsApiKeyId: pulumi.Input<string>;
    bdsApiKeyPassphrase: pulumi.Input<string>;
    bdsInstanceId: pulumi.Input<string>;
    clusterAdminPassword: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    metastoreId: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.BdsBdsInstanceMetastoreConfigTimeouts>;
}
