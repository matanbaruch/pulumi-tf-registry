// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class OcvpCluster extends pulumi.CustomResource {
    /**
     * Get an existing OcvpCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OcvpClusterState, opts?: pulumi.CustomResourceOptions): OcvpCluster {
        return new OcvpCluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/ocvpCluster:OcvpCluster';

    /**
     * Returns true if the given object is an instance of OcvpCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OcvpCluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OcvpCluster.__pulumiType;
    }

    public /*out*/ readonly actualEsxiHostsCount!: pulumi.Output<number>;
    public readonly capacityReservationId!: pulumi.Output<string>;
    public /*out*/ readonly compartmentId!: pulumi.Output<string>;
    public readonly computeAvailabilityDomain!: pulumi.Output<string>;
    public readonly datastores!: pulumi.Output<outputs.OcvpClusterDatastore[] | undefined>;
    public readonly definedTags!: pulumi.Output<{[key: string]: string}>;
    public readonly displayName!: pulumi.Output<string>;
    public readonly esxiHostsCount!: pulumi.Output<number>;
    public readonly esxiSoftwareVersion!: pulumi.Output<string>;
    public readonly freeformTags!: pulumi.Output<{[key: string]: string}>;
    public readonly initialCommitment!: pulumi.Output<string>;
    public readonly initialHostOcpuCount!: pulumi.Output<number>;
    public readonly initialHostShapeName!: pulumi.Output<string>;
    public readonly instanceDisplayNamePrefix!: pulumi.Output<string>;
    public readonly isShieldedInstanceEnabled!: pulumi.Output<boolean>;
    public readonly networkConfiguration!: pulumi.Output<outputs.OcvpClusterNetworkConfiguration>;
    public readonly sddcId!: pulumi.Output<string>;
    public /*out*/ readonly state!: pulumi.Output<string>;
    public /*out*/ readonly timeCreated!: pulumi.Output<string>;
    public /*out*/ readonly timeUpdated!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.OcvpClusterTimeouts | undefined>;
    public /*out*/ readonly upgradeLicenses!: pulumi.Output<outputs.OcvpClusterUpgradeLicense[]>;
    public readonly vmwareSoftwareVersion!: pulumi.Output<string>;
    public /*out*/ readonly vsphereType!: pulumi.Output<string>;
    public /*out*/ readonly vsphereUpgradeObjects!: pulumi.Output<outputs.OcvpClusterVsphereUpgradeObject[]>;
    public readonly workloadNetworkCidr!: pulumi.Output<string>;

    /**
     * Create a OcvpCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OcvpClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OcvpClusterArgs | OcvpClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OcvpClusterState | undefined;
            resourceInputs["actualEsxiHostsCount"] = state ? state.actualEsxiHostsCount : undefined;
            resourceInputs["capacityReservationId"] = state ? state.capacityReservationId : undefined;
            resourceInputs["compartmentId"] = state ? state.compartmentId : undefined;
            resourceInputs["computeAvailabilityDomain"] = state ? state.computeAvailabilityDomain : undefined;
            resourceInputs["datastores"] = state ? state.datastores : undefined;
            resourceInputs["definedTags"] = state ? state.definedTags : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["esxiHostsCount"] = state ? state.esxiHostsCount : undefined;
            resourceInputs["esxiSoftwareVersion"] = state ? state.esxiSoftwareVersion : undefined;
            resourceInputs["freeformTags"] = state ? state.freeformTags : undefined;
            resourceInputs["initialCommitment"] = state ? state.initialCommitment : undefined;
            resourceInputs["initialHostOcpuCount"] = state ? state.initialHostOcpuCount : undefined;
            resourceInputs["initialHostShapeName"] = state ? state.initialHostShapeName : undefined;
            resourceInputs["instanceDisplayNamePrefix"] = state ? state.instanceDisplayNamePrefix : undefined;
            resourceInputs["isShieldedInstanceEnabled"] = state ? state.isShieldedInstanceEnabled : undefined;
            resourceInputs["networkConfiguration"] = state ? state.networkConfiguration : undefined;
            resourceInputs["sddcId"] = state ? state.sddcId : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["timeCreated"] = state ? state.timeCreated : undefined;
            resourceInputs["timeUpdated"] = state ? state.timeUpdated : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["upgradeLicenses"] = state ? state.upgradeLicenses : undefined;
            resourceInputs["vmwareSoftwareVersion"] = state ? state.vmwareSoftwareVersion : undefined;
            resourceInputs["vsphereType"] = state ? state.vsphereType : undefined;
            resourceInputs["vsphereUpgradeObjects"] = state ? state.vsphereUpgradeObjects : undefined;
            resourceInputs["workloadNetworkCidr"] = state ? state.workloadNetworkCidr : undefined;
        } else {
            const args = argsOrState as OcvpClusterArgs | undefined;
            if ((!args || args.computeAvailabilityDomain === undefined) && !opts.urn) {
                throw new Error("Missing required property 'computeAvailabilityDomain'");
            }
            if ((!args || args.esxiHostsCount === undefined) && !opts.urn) {
                throw new Error("Missing required property 'esxiHostsCount'");
            }
            if ((!args || args.networkConfiguration === undefined) && !opts.urn) {
                throw new Error("Missing required property 'networkConfiguration'");
            }
            if ((!args || args.sddcId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sddcId'");
            }
            resourceInputs["capacityReservationId"] = args ? args.capacityReservationId : undefined;
            resourceInputs["computeAvailabilityDomain"] = args ? args.computeAvailabilityDomain : undefined;
            resourceInputs["datastores"] = args ? args.datastores : undefined;
            resourceInputs["definedTags"] = args ? args.definedTags : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["esxiHostsCount"] = args ? args.esxiHostsCount : undefined;
            resourceInputs["esxiSoftwareVersion"] = args ? args.esxiSoftwareVersion : undefined;
            resourceInputs["freeformTags"] = args ? args.freeformTags : undefined;
            resourceInputs["initialCommitment"] = args ? args.initialCommitment : undefined;
            resourceInputs["initialHostOcpuCount"] = args ? args.initialHostOcpuCount : undefined;
            resourceInputs["initialHostShapeName"] = args ? args.initialHostShapeName : undefined;
            resourceInputs["instanceDisplayNamePrefix"] = args ? args.instanceDisplayNamePrefix : undefined;
            resourceInputs["isShieldedInstanceEnabled"] = args ? args.isShieldedInstanceEnabled : undefined;
            resourceInputs["networkConfiguration"] = args ? args.networkConfiguration : undefined;
            resourceInputs["sddcId"] = args ? args.sddcId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["vmwareSoftwareVersion"] = args ? args.vmwareSoftwareVersion : undefined;
            resourceInputs["workloadNetworkCidr"] = args ? args.workloadNetworkCidr : undefined;
            resourceInputs["actualEsxiHostsCount"] = undefined /*out*/;
            resourceInputs["compartmentId"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["timeCreated"] = undefined /*out*/;
            resourceInputs["timeUpdated"] = undefined /*out*/;
            resourceInputs["upgradeLicenses"] = undefined /*out*/;
            resourceInputs["vsphereType"] = undefined /*out*/;
            resourceInputs["vsphereUpgradeObjects"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OcvpCluster.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering OcvpCluster resources.
 */
export interface OcvpClusterState {
    actualEsxiHostsCount?: pulumi.Input<number>;
    capacityReservationId?: pulumi.Input<string>;
    compartmentId?: pulumi.Input<string>;
    computeAvailabilityDomain?: pulumi.Input<string>;
    datastores?: pulumi.Input<pulumi.Input<inputs.OcvpClusterDatastore>[]>;
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    displayName?: pulumi.Input<string>;
    esxiHostsCount?: pulumi.Input<number>;
    esxiSoftwareVersion?: pulumi.Input<string>;
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    initialCommitment?: pulumi.Input<string>;
    initialHostOcpuCount?: pulumi.Input<number>;
    initialHostShapeName?: pulumi.Input<string>;
    instanceDisplayNamePrefix?: pulumi.Input<string>;
    isShieldedInstanceEnabled?: pulumi.Input<boolean>;
    networkConfiguration?: pulumi.Input<inputs.OcvpClusterNetworkConfiguration>;
    sddcId?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    timeCreated?: pulumi.Input<string>;
    timeUpdated?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.OcvpClusterTimeouts>;
    upgradeLicenses?: pulumi.Input<pulumi.Input<inputs.OcvpClusterUpgradeLicense>[]>;
    vmwareSoftwareVersion?: pulumi.Input<string>;
    vsphereType?: pulumi.Input<string>;
    vsphereUpgradeObjects?: pulumi.Input<pulumi.Input<inputs.OcvpClusterVsphereUpgradeObject>[]>;
    workloadNetworkCidr?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a OcvpCluster resource.
 */
export interface OcvpClusterArgs {
    capacityReservationId?: pulumi.Input<string>;
    computeAvailabilityDomain: pulumi.Input<string>;
    datastores?: pulumi.Input<pulumi.Input<inputs.OcvpClusterDatastore>[]>;
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    displayName?: pulumi.Input<string>;
    esxiHostsCount: pulumi.Input<number>;
    esxiSoftwareVersion?: pulumi.Input<string>;
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    initialCommitment?: pulumi.Input<string>;
    initialHostOcpuCount?: pulumi.Input<number>;
    initialHostShapeName?: pulumi.Input<string>;
    instanceDisplayNamePrefix?: pulumi.Input<string>;
    isShieldedInstanceEnabled?: pulumi.Input<boolean>;
    networkConfiguration: pulumi.Input<inputs.OcvpClusterNetworkConfiguration>;
    sddcId: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.OcvpClusterTimeouts>;
    vmwareSoftwareVersion?: pulumi.Input<string>;
    workloadNetworkCidr?: pulumi.Input<string>;
}
