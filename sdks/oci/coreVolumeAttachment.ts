// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CoreVolumeAttachment extends pulumi.CustomResource {
    /**
     * Get an existing CoreVolumeAttachment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CoreVolumeAttachmentState, opts?: pulumi.CustomResourceOptions): CoreVolumeAttachment {
        return new CoreVolumeAttachment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/coreVolumeAttachment:CoreVolumeAttachment';

    /**
     * Returns true if the given object is an instance of CoreVolumeAttachment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CoreVolumeAttachment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CoreVolumeAttachment.__pulumiType;
    }

    public readonly attachmentType!: pulumi.Output<string>;
    public /*out*/ readonly availabilityDomain!: pulumi.Output<string>;
    public /*out*/ readonly chapSecret!: pulumi.Output<string>;
    public /*out*/ readonly chapUsername!: pulumi.Output<string>;
    /**
     * @deprecated Deprecated
     */
    public readonly compartmentId!: pulumi.Output<string>;
    public readonly device!: pulumi.Output<string>;
    public readonly displayName!: pulumi.Output<string>;
    public readonly encryptionInTransitType!: pulumi.Output<string>;
    public readonly instanceId!: pulumi.Output<string>;
    public /*out*/ readonly ipv4!: pulumi.Output<string>;
    public /*out*/ readonly iqn!: pulumi.Output<string>;
    public readonly isAgentAutoIscsiLoginEnabled!: pulumi.Output<boolean>;
    public /*out*/ readonly isMultipath!: pulumi.Output<boolean>;
    public readonly isPvEncryptionInTransitEnabled!: pulumi.Output<boolean>;
    public readonly isReadOnly!: pulumi.Output<boolean>;
    public readonly isShareable!: pulumi.Output<boolean>;
    public /*out*/ readonly isVolumeCreatedDuringLaunch!: pulumi.Output<boolean>;
    public /*out*/ readonly iscsiLoginState!: pulumi.Output<string>;
    public /*out*/ readonly multipathDevices!: pulumi.Output<outputs.CoreVolumeAttachmentMultipathDevice[]>;
    public /*out*/ readonly port!: pulumi.Output<number>;
    public /*out*/ readonly state!: pulumi.Output<string>;
    public /*out*/ readonly timeCreated!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.CoreVolumeAttachmentTimeouts | undefined>;
    public readonly useChap!: pulumi.Output<boolean>;
    public readonly volumeId!: pulumi.Output<string>;

    /**
     * Create a CoreVolumeAttachment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CoreVolumeAttachmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CoreVolumeAttachmentArgs | CoreVolumeAttachmentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CoreVolumeAttachmentState | undefined;
            resourceInputs["attachmentType"] = state ? state.attachmentType : undefined;
            resourceInputs["availabilityDomain"] = state ? state.availabilityDomain : undefined;
            resourceInputs["chapSecret"] = state ? state.chapSecret : undefined;
            resourceInputs["chapUsername"] = state ? state.chapUsername : undefined;
            resourceInputs["compartmentId"] = state ? state.compartmentId : undefined;
            resourceInputs["device"] = state ? state.device : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["encryptionInTransitType"] = state ? state.encryptionInTransitType : undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["ipv4"] = state ? state.ipv4 : undefined;
            resourceInputs["iqn"] = state ? state.iqn : undefined;
            resourceInputs["isAgentAutoIscsiLoginEnabled"] = state ? state.isAgentAutoIscsiLoginEnabled : undefined;
            resourceInputs["isMultipath"] = state ? state.isMultipath : undefined;
            resourceInputs["isPvEncryptionInTransitEnabled"] = state ? state.isPvEncryptionInTransitEnabled : undefined;
            resourceInputs["isReadOnly"] = state ? state.isReadOnly : undefined;
            resourceInputs["isShareable"] = state ? state.isShareable : undefined;
            resourceInputs["isVolumeCreatedDuringLaunch"] = state ? state.isVolumeCreatedDuringLaunch : undefined;
            resourceInputs["iscsiLoginState"] = state ? state.iscsiLoginState : undefined;
            resourceInputs["multipathDevices"] = state ? state.multipathDevices : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["timeCreated"] = state ? state.timeCreated : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["useChap"] = state ? state.useChap : undefined;
            resourceInputs["volumeId"] = state ? state.volumeId : undefined;
        } else {
            const args = argsOrState as CoreVolumeAttachmentArgs | undefined;
            if ((!args || args.attachmentType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'attachmentType'");
            }
            if ((!args || args.instanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            if ((!args || args.volumeId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'volumeId'");
            }
            resourceInputs["attachmentType"] = args ? args.attachmentType : undefined;
            resourceInputs["compartmentId"] = args ? args.compartmentId : undefined;
            resourceInputs["device"] = args ? args.device : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["encryptionInTransitType"] = args ? args.encryptionInTransitType : undefined;
            resourceInputs["instanceId"] = args ? args.instanceId : undefined;
            resourceInputs["isAgentAutoIscsiLoginEnabled"] = args ? args.isAgentAutoIscsiLoginEnabled : undefined;
            resourceInputs["isPvEncryptionInTransitEnabled"] = args ? args.isPvEncryptionInTransitEnabled : undefined;
            resourceInputs["isReadOnly"] = args ? args.isReadOnly : undefined;
            resourceInputs["isShareable"] = args ? args.isShareable : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["useChap"] = args ? args.useChap : undefined;
            resourceInputs["volumeId"] = args ? args.volumeId : undefined;
            resourceInputs["availabilityDomain"] = undefined /*out*/;
            resourceInputs["chapSecret"] = undefined /*out*/;
            resourceInputs["chapUsername"] = undefined /*out*/;
            resourceInputs["ipv4"] = undefined /*out*/;
            resourceInputs["iqn"] = undefined /*out*/;
            resourceInputs["isMultipath"] = undefined /*out*/;
            resourceInputs["isVolumeCreatedDuringLaunch"] = undefined /*out*/;
            resourceInputs["iscsiLoginState"] = undefined /*out*/;
            resourceInputs["multipathDevices"] = undefined /*out*/;
            resourceInputs["port"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["timeCreated"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CoreVolumeAttachment.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CoreVolumeAttachment resources.
 */
export interface CoreVolumeAttachmentState {
    attachmentType?: pulumi.Input<string>;
    availabilityDomain?: pulumi.Input<string>;
    chapSecret?: pulumi.Input<string>;
    chapUsername?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    compartmentId?: pulumi.Input<string>;
    device?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    encryptionInTransitType?: pulumi.Input<string>;
    instanceId?: pulumi.Input<string>;
    ipv4?: pulumi.Input<string>;
    iqn?: pulumi.Input<string>;
    isAgentAutoIscsiLoginEnabled?: pulumi.Input<boolean>;
    isMultipath?: pulumi.Input<boolean>;
    isPvEncryptionInTransitEnabled?: pulumi.Input<boolean>;
    isReadOnly?: pulumi.Input<boolean>;
    isShareable?: pulumi.Input<boolean>;
    isVolumeCreatedDuringLaunch?: pulumi.Input<boolean>;
    iscsiLoginState?: pulumi.Input<string>;
    multipathDevices?: pulumi.Input<pulumi.Input<inputs.CoreVolumeAttachmentMultipathDevice>[]>;
    port?: pulumi.Input<number>;
    state?: pulumi.Input<string>;
    timeCreated?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.CoreVolumeAttachmentTimeouts>;
    useChap?: pulumi.Input<boolean>;
    volumeId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CoreVolumeAttachment resource.
 */
export interface CoreVolumeAttachmentArgs {
    attachmentType: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    compartmentId?: pulumi.Input<string>;
    device?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    encryptionInTransitType?: pulumi.Input<string>;
    instanceId: pulumi.Input<string>;
    isAgentAutoIscsiLoginEnabled?: pulumi.Input<boolean>;
    isPvEncryptionInTransitEnabled?: pulumi.Input<boolean>;
    isReadOnly?: pulumi.Input<boolean>;
    isShareable?: pulumi.Input<boolean>;
    timeouts?: pulumi.Input<inputs.CoreVolumeAttachmentTimeouts>;
    useChap?: pulumi.Input<boolean>;
    volumeId: pulumi.Input<string>;
}
