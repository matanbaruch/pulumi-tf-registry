// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class GoldenGateDatabaseRegistration extends pulumi.CustomResource {
    /**
     * Get an existing GoldenGateDatabaseRegistration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GoldenGateDatabaseRegistrationState, opts?: pulumi.CustomResourceOptions): GoldenGateDatabaseRegistration {
        return new GoldenGateDatabaseRegistration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/goldenGateDatabaseRegistration:GoldenGateDatabaseRegistration';

    /**
     * Returns true if the given object is an instance of GoldenGateDatabaseRegistration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GoldenGateDatabaseRegistration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GoldenGateDatabaseRegistration.__pulumiType;
    }

    public readonly aliasName!: pulumi.Output<string>;
    public readonly compartmentId!: pulumi.Output<string>;
    public readonly connectionString!: pulumi.Output<string>;
    public readonly databaseId!: pulumi.Output<string>;
    public readonly definedTags!: pulumi.Output<{[key: string]: string}>;
    public readonly description!: pulumi.Output<string>;
    public readonly displayName!: pulumi.Output<string>;
    public readonly fqdn!: pulumi.Output<string>;
    public readonly freeformTags!: pulumi.Output<{[key: string]: string}>;
    public readonly ipAddress!: pulumi.Output<string>;
    public readonly keyId!: pulumi.Output<string>;
    public /*out*/ readonly lifecycleDetails!: pulumi.Output<string>;
    public readonly password!: pulumi.Output<string>;
    public /*out*/ readonly rcePrivateIp!: pulumi.Output<string>;
    public readonly secretCompartmentId!: pulumi.Output<string>;
    public /*out*/ readonly secretId!: pulumi.Output<string>;
    public readonly sessionMode!: pulumi.Output<string>;
    public /*out*/ readonly state!: pulumi.Output<string>;
    public readonly subnetId!: pulumi.Output<string>;
    public /*out*/ readonly systemTags!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly timeCreated!: pulumi.Output<string>;
    public /*out*/ readonly timeUpdated!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.GoldenGateDatabaseRegistrationTimeouts | undefined>;
    public readonly username!: pulumi.Output<string>;
    public readonly vaultId!: pulumi.Output<string>;
    public readonly wallet!: pulumi.Output<string>;

    /**
     * Create a GoldenGateDatabaseRegistration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GoldenGateDatabaseRegistrationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GoldenGateDatabaseRegistrationArgs | GoldenGateDatabaseRegistrationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GoldenGateDatabaseRegistrationState | undefined;
            resourceInputs["aliasName"] = state ? state.aliasName : undefined;
            resourceInputs["compartmentId"] = state ? state.compartmentId : undefined;
            resourceInputs["connectionString"] = state ? state.connectionString : undefined;
            resourceInputs["databaseId"] = state ? state.databaseId : undefined;
            resourceInputs["definedTags"] = state ? state.definedTags : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["fqdn"] = state ? state.fqdn : undefined;
            resourceInputs["freeformTags"] = state ? state.freeformTags : undefined;
            resourceInputs["ipAddress"] = state ? state.ipAddress : undefined;
            resourceInputs["keyId"] = state ? state.keyId : undefined;
            resourceInputs["lifecycleDetails"] = state ? state.lifecycleDetails : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["rcePrivateIp"] = state ? state.rcePrivateIp : undefined;
            resourceInputs["secretCompartmentId"] = state ? state.secretCompartmentId : undefined;
            resourceInputs["secretId"] = state ? state.secretId : undefined;
            resourceInputs["sessionMode"] = state ? state.sessionMode : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["subnetId"] = state ? state.subnetId : undefined;
            resourceInputs["systemTags"] = state ? state.systemTags : undefined;
            resourceInputs["timeCreated"] = state ? state.timeCreated : undefined;
            resourceInputs["timeUpdated"] = state ? state.timeUpdated : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
            resourceInputs["vaultId"] = state ? state.vaultId : undefined;
            resourceInputs["wallet"] = state ? state.wallet : undefined;
        } else {
            const args = argsOrState as GoldenGateDatabaseRegistrationArgs | undefined;
            if ((!args || args.aliasName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'aliasName'");
            }
            if ((!args || args.compartmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'compartmentId'");
            }
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if ((!args || args.fqdn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'fqdn'");
            }
            if ((!args || args.password === undefined) && !opts.urn) {
                throw new Error("Missing required property 'password'");
            }
            if ((!args || args.username === undefined) && !opts.urn) {
                throw new Error("Missing required property 'username'");
            }
            resourceInputs["aliasName"] = args ? args.aliasName : undefined;
            resourceInputs["compartmentId"] = args ? args.compartmentId : undefined;
            resourceInputs["connectionString"] = args ? args.connectionString : undefined;
            resourceInputs["databaseId"] = args ? args.databaseId : undefined;
            resourceInputs["definedTags"] = args ? args.definedTags : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["fqdn"] = args ? args.fqdn : undefined;
            resourceInputs["freeformTags"] = args ? args.freeformTags : undefined;
            resourceInputs["ipAddress"] = args ? args.ipAddress : undefined;
            resourceInputs["keyId"] = args ? args.keyId : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["secretCompartmentId"] = args ? args.secretCompartmentId : undefined;
            resourceInputs["sessionMode"] = args ? args.sessionMode : undefined;
            resourceInputs["subnetId"] = args ? args.subnetId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
            resourceInputs["vaultId"] = args ? args.vaultId : undefined;
            resourceInputs["wallet"] = args ? args.wallet : undefined;
            resourceInputs["lifecycleDetails"] = undefined /*out*/;
            resourceInputs["rcePrivateIp"] = undefined /*out*/;
            resourceInputs["secretId"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["systemTags"] = undefined /*out*/;
            resourceInputs["timeCreated"] = undefined /*out*/;
            resourceInputs["timeUpdated"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(GoldenGateDatabaseRegistration.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering GoldenGateDatabaseRegistration resources.
 */
export interface GoldenGateDatabaseRegistrationState {
    aliasName?: pulumi.Input<string>;
    compartmentId?: pulumi.Input<string>;
    connectionString?: pulumi.Input<string>;
    databaseId?: pulumi.Input<string>;
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    description?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    fqdn?: pulumi.Input<string>;
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    ipAddress?: pulumi.Input<string>;
    keyId?: pulumi.Input<string>;
    lifecycleDetails?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    rcePrivateIp?: pulumi.Input<string>;
    secretCompartmentId?: pulumi.Input<string>;
    secretId?: pulumi.Input<string>;
    sessionMode?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    subnetId?: pulumi.Input<string>;
    systemTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeCreated?: pulumi.Input<string>;
    timeUpdated?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.GoldenGateDatabaseRegistrationTimeouts>;
    username?: pulumi.Input<string>;
    vaultId?: pulumi.Input<string>;
    wallet?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a GoldenGateDatabaseRegistration resource.
 */
export interface GoldenGateDatabaseRegistrationArgs {
    aliasName: pulumi.Input<string>;
    compartmentId: pulumi.Input<string>;
    connectionString?: pulumi.Input<string>;
    databaseId?: pulumi.Input<string>;
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    description?: pulumi.Input<string>;
    displayName: pulumi.Input<string>;
    fqdn: pulumi.Input<string>;
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    ipAddress?: pulumi.Input<string>;
    keyId?: pulumi.Input<string>;
    password: pulumi.Input<string>;
    secretCompartmentId?: pulumi.Input<string>;
    sessionMode?: pulumi.Input<string>;
    subnetId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.GoldenGateDatabaseRegistrationTimeouts>;
    username: pulumi.Input<string>;
    vaultId?: pulumi.Input<string>;
    wallet?: pulumi.Input<string>;
}
