// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class IdentityDomainsPasswordPolicy extends pulumi.CustomResource {
    /**
     * Get an existing IdentityDomainsPasswordPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IdentityDomainsPasswordPolicyState, opts?: pulumi.CustomResourceOptions): IdentityDomainsPasswordPolicy {
        return new IdentityDomainsPasswordPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/identityDomainsPasswordPolicy:IdentityDomainsPasswordPolicy';

    /**
     * Returns true if the given object is an instance of IdentityDomainsPasswordPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IdentityDomainsPasswordPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IdentityDomainsPasswordPolicy.__pulumiType;
    }

    public readonly allowedChars!: pulumi.Output<string>;
    public readonly attributeSets!: pulumi.Output<string[] | undefined>;
    public readonly attributes!: pulumi.Output<string | undefined>;
    public readonly authorization!: pulumi.Output<string | undefined>;
    public /*out*/ readonly compartmentOcid!: pulumi.Output<string>;
    public /*out*/ readonly configuredPasswordPolicyRules!: pulumi.Output<outputs.IdentityDomainsPasswordPolicyConfiguredPasswordPolicyRule[]>;
    public /*out*/ readonly deleteInProgress!: pulumi.Output<boolean>;
    public readonly description!: pulumi.Output<string>;
    public readonly dictionaryDelimiter!: pulumi.Output<string>;
    public readonly dictionaryLocation!: pulumi.Output<string>;
    public readonly dictionaryWordDisallowed!: pulumi.Output<boolean>;
    public readonly disallowedChars!: pulumi.Output<string>;
    public readonly disallowedSubstrings!: pulumi.Output<string[]>;
    public readonly disallowedUserAttributeValues!: pulumi.Output<string[]>;
    public readonly distinctCharacters!: pulumi.Output<number>;
    public /*out*/ readonly domainOcid!: pulumi.Output<string>;
    public readonly externalId!: pulumi.Output<string>;
    public readonly firstNameDisallowed!: pulumi.Output<boolean>;
    public readonly forcePasswordReset!: pulumi.Output<boolean>;
    public readonly groups!: pulumi.Output<outputs.IdentityDomainsPasswordPolicyGroup[] | undefined>;
    public /*out*/ readonly idcsCreatedBies!: pulumi.Output<outputs.IdentityDomainsPasswordPolicyIdcsCreatedBy[]>;
    public readonly idcsEndpoint!: pulumi.Output<string>;
    public /*out*/ readonly idcsLastModifiedBies!: pulumi.Output<outputs.IdentityDomainsPasswordPolicyIdcsLastModifiedBy[]>;
    public /*out*/ readonly idcsLastUpgradedInRelease!: pulumi.Output<string>;
    public /*out*/ readonly idcsPreventedOperations!: pulumi.Output<string[]>;
    public readonly lastNameDisallowed!: pulumi.Output<boolean>;
    public readonly lockoutDuration!: pulumi.Output<number>;
    public readonly maxIncorrectAttempts!: pulumi.Output<number>;
    public readonly maxLength!: pulumi.Output<number>;
    public readonly maxRepeatedChars!: pulumi.Output<number>;
    public readonly maxSpecialChars!: pulumi.Output<number>;
    public /*out*/ readonly metas!: pulumi.Output<outputs.IdentityDomainsPasswordPolicyMeta[]>;
    public readonly minAlphaNumerals!: pulumi.Output<number>;
    public readonly minAlphas!: pulumi.Output<number>;
    public readonly minLength!: pulumi.Output<number>;
    public readonly minLowerCase!: pulumi.Output<number>;
    public readonly minNumerals!: pulumi.Output<number>;
    public readonly minPasswordAge!: pulumi.Output<number>;
    public readonly minSpecialChars!: pulumi.Output<number>;
    public readonly minUniqueChars!: pulumi.Output<number>;
    public readonly minUpperCase!: pulumi.Output<number>;
    public readonly name!: pulumi.Output<string>;
    public readonly numPasswordsInHistory!: pulumi.Output<number>;
    public readonly ocid!: pulumi.Output<string>;
    public readonly passwordExpireWarning!: pulumi.Output<number>;
    public readonly passwordExpiresAfter!: pulumi.Output<number>;
    public readonly passwordStrength!: pulumi.Output<string>;
    public readonly priority!: pulumi.Output<number>;
    public readonly requiredChars!: pulumi.Output<string>;
    public readonly resourceTypeSchemaVersion!: pulumi.Output<string | undefined>;
    public readonly schemas!: pulumi.Output<string[]>;
    public readonly startsWithAlphabet!: pulumi.Output<boolean>;
    public readonly tags!: pulumi.Output<outputs.IdentityDomainsPasswordPolicyTag[] | undefined>;
    public /*out*/ readonly tenancyOcid!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.IdentityDomainsPasswordPolicyTimeouts | undefined>;
    public readonly userNameDisallowed!: pulumi.Output<boolean>;

    /**
     * Create a IdentityDomainsPasswordPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IdentityDomainsPasswordPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IdentityDomainsPasswordPolicyArgs | IdentityDomainsPasswordPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IdentityDomainsPasswordPolicyState | undefined;
            resourceInputs["allowedChars"] = state ? state.allowedChars : undefined;
            resourceInputs["attributeSets"] = state ? state.attributeSets : undefined;
            resourceInputs["attributes"] = state ? state.attributes : undefined;
            resourceInputs["authorization"] = state ? state.authorization : undefined;
            resourceInputs["compartmentOcid"] = state ? state.compartmentOcid : undefined;
            resourceInputs["configuredPasswordPolicyRules"] = state ? state.configuredPasswordPolicyRules : undefined;
            resourceInputs["deleteInProgress"] = state ? state.deleteInProgress : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["dictionaryDelimiter"] = state ? state.dictionaryDelimiter : undefined;
            resourceInputs["dictionaryLocation"] = state ? state.dictionaryLocation : undefined;
            resourceInputs["dictionaryWordDisallowed"] = state ? state.dictionaryWordDisallowed : undefined;
            resourceInputs["disallowedChars"] = state ? state.disallowedChars : undefined;
            resourceInputs["disallowedSubstrings"] = state ? state.disallowedSubstrings : undefined;
            resourceInputs["disallowedUserAttributeValues"] = state ? state.disallowedUserAttributeValues : undefined;
            resourceInputs["distinctCharacters"] = state ? state.distinctCharacters : undefined;
            resourceInputs["domainOcid"] = state ? state.domainOcid : undefined;
            resourceInputs["externalId"] = state ? state.externalId : undefined;
            resourceInputs["firstNameDisallowed"] = state ? state.firstNameDisallowed : undefined;
            resourceInputs["forcePasswordReset"] = state ? state.forcePasswordReset : undefined;
            resourceInputs["groups"] = state ? state.groups : undefined;
            resourceInputs["idcsCreatedBies"] = state ? state.idcsCreatedBies : undefined;
            resourceInputs["idcsEndpoint"] = state ? state.idcsEndpoint : undefined;
            resourceInputs["idcsLastModifiedBies"] = state ? state.idcsLastModifiedBies : undefined;
            resourceInputs["idcsLastUpgradedInRelease"] = state ? state.idcsLastUpgradedInRelease : undefined;
            resourceInputs["idcsPreventedOperations"] = state ? state.idcsPreventedOperations : undefined;
            resourceInputs["lastNameDisallowed"] = state ? state.lastNameDisallowed : undefined;
            resourceInputs["lockoutDuration"] = state ? state.lockoutDuration : undefined;
            resourceInputs["maxIncorrectAttempts"] = state ? state.maxIncorrectAttempts : undefined;
            resourceInputs["maxLength"] = state ? state.maxLength : undefined;
            resourceInputs["maxRepeatedChars"] = state ? state.maxRepeatedChars : undefined;
            resourceInputs["maxSpecialChars"] = state ? state.maxSpecialChars : undefined;
            resourceInputs["metas"] = state ? state.metas : undefined;
            resourceInputs["minAlphaNumerals"] = state ? state.minAlphaNumerals : undefined;
            resourceInputs["minAlphas"] = state ? state.minAlphas : undefined;
            resourceInputs["minLength"] = state ? state.minLength : undefined;
            resourceInputs["minLowerCase"] = state ? state.minLowerCase : undefined;
            resourceInputs["minNumerals"] = state ? state.minNumerals : undefined;
            resourceInputs["minPasswordAge"] = state ? state.minPasswordAge : undefined;
            resourceInputs["minSpecialChars"] = state ? state.minSpecialChars : undefined;
            resourceInputs["minUniqueChars"] = state ? state.minUniqueChars : undefined;
            resourceInputs["minUpperCase"] = state ? state.minUpperCase : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["numPasswordsInHistory"] = state ? state.numPasswordsInHistory : undefined;
            resourceInputs["ocid"] = state ? state.ocid : undefined;
            resourceInputs["passwordExpireWarning"] = state ? state.passwordExpireWarning : undefined;
            resourceInputs["passwordExpiresAfter"] = state ? state.passwordExpiresAfter : undefined;
            resourceInputs["passwordStrength"] = state ? state.passwordStrength : undefined;
            resourceInputs["priority"] = state ? state.priority : undefined;
            resourceInputs["requiredChars"] = state ? state.requiredChars : undefined;
            resourceInputs["resourceTypeSchemaVersion"] = state ? state.resourceTypeSchemaVersion : undefined;
            resourceInputs["schemas"] = state ? state.schemas : undefined;
            resourceInputs["startsWithAlphabet"] = state ? state.startsWithAlphabet : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tenancyOcid"] = state ? state.tenancyOcid : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["userNameDisallowed"] = state ? state.userNameDisallowed : undefined;
        } else {
            const args = argsOrState as IdentityDomainsPasswordPolicyArgs | undefined;
            if ((!args || args.idcsEndpoint === undefined) && !opts.urn) {
                throw new Error("Missing required property 'idcsEndpoint'");
            }
            if ((!args || args.schemas === undefined) && !opts.urn) {
                throw new Error("Missing required property 'schemas'");
            }
            resourceInputs["allowedChars"] = args ? args.allowedChars : undefined;
            resourceInputs["attributeSets"] = args ? args.attributeSets : undefined;
            resourceInputs["attributes"] = args ? args.attributes : undefined;
            resourceInputs["authorization"] = args ? args.authorization : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["dictionaryDelimiter"] = args ? args.dictionaryDelimiter : undefined;
            resourceInputs["dictionaryLocation"] = args ? args.dictionaryLocation : undefined;
            resourceInputs["dictionaryWordDisallowed"] = args ? args.dictionaryWordDisallowed : undefined;
            resourceInputs["disallowedChars"] = args ? args.disallowedChars : undefined;
            resourceInputs["disallowedSubstrings"] = args ? args.disallowedSubstrings : undefined;
            resourceInputs["disallowedUserAttributeValues"] = args ? args.disallowedUserAttributeValues : undefined;
            resourceInputs["distinctCharacters"] = args ? args.distinctCharacters : undefined;
            resourceInputs["externalId"] = args ? args.externalId : undefined;
            resourceInputs["firstNameDisallowed"] = args ? args.firstNameDisallowed : undefined;
            resourceInputs["forcePasswordReset"] = args ? args.forcePasswordReset : undefined;
            resourceInputs["groups"] = args ? args.groups : undefined;
            resourceInputs["idcsEndpoint"] = args ? args.idcsEndpoint : undefined;
            resourceInputs["lastNameDisallowed"] = args ? args.lastNameDisallowed : undefined;
            resourceInputs["lockoutDuration"] = args ? args.lockoutDuration : undefined;
            resourceInputs["maxIncorrectAttempts"] = args ? args.maxIncorrectAttempts : undefined;
            resourceInputs["maxLength"] = args ? args.maxLength : undefined;
            resourceInputs["maxRepeatedChars"] = args ? args.maxRepeatedChars : undefined;
            resourceInputs["maxSpecialChars"] = args ? args.maxSpecialChars : undefined;
            resourceInputs["minAlphaNumerals"] = args ? args.minAlphaNumerals : undefined;
            resourceInputs["minAlphas"] = args ? args.minAlphas : undefined;
            resourceInputs["minLength"] = args ? args.minLength : undefined;
            resourceInputs["minLowerCase"] = args ? args.minLowerCase : undefined;
            resourceInputs["minNumerals"] = args ? args.minNumerals : undefined;
            resourceInputs["minPasswordAge"] = args ? args.minPasswordAge : undefined;
            resourceInputs["minSpecialChars"] = args ? args.minSpecialChars : undefined;
            resourceInputs["minUniqueChars"] = args ? args.minUniqueChars : undefined;
            resourceInputs["minUpperCase"] = args ? args.minUpperCase : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["numPasswordsInHistory"] = args ? args.numPasswordsInHistory : undefined;
            resourceInputs["ocid"] = args ? args.ocid : undefined;
            resourceInputs["passwordExpireWarning"] = args ? args.passwordExpireWarning : undefined;
            resourceInputs["passwordExpiresAfter"] = args ? args.passwordExpiresAfter : undefined;
            resourceInputs["passwordStrength"] = args?.passwordStrength ? pulumi.secret(args.passwordStrength) : undefined;
            resourceInputs["priority"] = args ? args.priority : undefined;
            resourceInputs["requiredChars"] = args ? args.requiredChars : undefined;
            resourceInputs["resourceTypeSchemaVersion"] = args ? args.resourceTypeSchemaVersion : undefined;
            resourceInputs["schemas"] = args ? args.schemas : undefined;
            resourceInputs["startsWithAlphabet"] = args ? args.startsWithAlphabet : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["userNameDisallowed"] = args ? args.userNameDisallowed : undefined;
            resourceInputs["compartmentOcid"] = undefined /*out*/;
            resourceInputs["configuredPasswordPolicyRules"] = undefined /*out*/;
            resourceInputs["deleteInProgress"] = undefined /*out*/;
            resourceInputs["domainOcid"] = undefined /*out*/;
            resourceInputs["idcsCreatedBies"] = undefined /*out*/;
            resourceInputs["idcsLastModifiedBies"] = undefined /*out*/;
            resourceInputs["idcsLastUpgradedInRelease"] = undefined /*out*/;
            resourceInputs["idcsPreventedOperations"] = undefined /*out*/;
            resourceInputs["metas"] = undefined /*out*/;
            resourceInputs["tenancyOcid"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["passwordStrength"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(IdentityDomainsPasswordPolicy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering IdentityDomainsPasswordPolicy resources.
 */
export interface IdentityDomainsPasswordPolicyState {
    allowedChars?: pulumi.Input<string>;
    attributeSets?: pulumi.Input<pulumi.Input<string>[]>;
    attributes?: pulumi.Input<string>;
    authorization?: pulumi.Input<string>;
    compartmentOcid?: pulumi.Input<string>;
    configuredPasswordPolicyRules?: pulumi.Input<pulumi.Input<inputs.IdentityDomainsPasswordPolicyConfiguredPasswordPolicyRule>[]>;
    deleteInProgress?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    dictionaryDelimiter?: pulumi.Input<string>;
    dictionaryLocation?: pulumi.Input<string>;
    dictionaryWordDisallowed?: pulumi.Input<boolean>;
    disallowedChars?: pulumi.Input<string>;
    disallowedSubstrings?: pulumi.Input<pulumi.Input<string>[]>;
    disallowedUserAttributeValues?: pulumi.Input<pulumi.Input<string>[]>;
    distinctCharacters?: pulumi.Input<number>;
    domainOcid?: pulumi.Input<string>;
    externalId?: pulumi.Input<string>;
    firstNameDisallowed?: pulumi.Input<boolean>;
    forcePasswordReset?: pulumi.Input<boolean>;
    groups?: pulumi.Input<pulumi.Input<inputs.IdentityDomainsPasswordPolicyGroup>[]>;
    idcsCreatedBies?: pulumi.Input<pulumi.Input<inputs.IdentityDomainsPasswordPolicyIdcsCreatedBy>[]>;
    idcsEndpoint?: pulumi.Input<string>;
    idcsLastModifiedBies?: pulumi.Input<pulumi.Input<inputs.IdentityDomainsPasswordPolicyIdcsLastModifiedBy>[]>;
    idcsLastUpgradedInRelease?: pulumi.Input<string>;
    idcsPreventedOperations?: pulumi.Input<pulumi.Input<string>[]>;
    lastNameDisallowed?: pulumi.Input<boolean>;
    lockoutDuration?: pulumi.Input<number>;
    maxIncorrectAttempts?: pulumi.Input<number>;
    maxLength?: pulumi.Input<number>;
    maxRepeatedChars?: pulumi.Input<number>;
    maxSpecialChars?: pulumi.Input<number>;
    metas?: pulumi.Input<pulumi.Input<inputs.IdentityDomainsPasswordPolicyMeta>[]>;
    minAlphaNumerals?: pulumi.Input<number>;
    minAlphas?: pulumi.Input<number>;
    minLength?: pulumi.Input<number>;
    minLowerCase?: pulumi.Input<number>;
    minNumerals?: pulumi.Input<number>;
    minPasswordAge?: pulumi.Input<number>;
    minSpecialChars?: pulumi.Input<number>;
    minUniqueChars?: pulumi.Input<number>;
    minUpperCase?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    numPasswordsInHistory?: pulumi.Input<number>;
    ocid?: pulumi.Input<string>;
    passwordExpireWarning?: pulumi.Input<number>;
    passwordExpiresAfter?: pulumi.Input<number>;
    passwordStrength?: pulumi.Input<string>;
    priority?: pulumi.Input<number>;
    requiredChars?: pulumi.Input<string>;
    resourceTypeSchemaVersion?: pulumi.Input<string>;
    schemas?: pulumi.Input<pulumi.Input<string>[]>;
    startsWithAlphabet?: pulumi.Input<boolean>;
    tags?: pulumi.Input<pulumi.Input<inputs.IdentityDomainsPasswordPolicyTag>[]>;
    tenancyOcid?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.IdentityDomainsPasswordPolicyTimeouts>;
    userNameDisallowed?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a IdentityDomainsPasswordPolicy resource.
 */
export interface IdentityDomainsPasswordPolicyArgs {
    allowedChars?: pulumi.Input<string>;
    attributeSets?: pulumi.Input<pulumi.Input<string>[]>;
    attributes?: pulumi.Input<string>;
    authorization?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    dictionaryDelimiter?: pulumi.Input<string>;
    dictionaryLocation?: pulumi.Input<string>;
    dictionaryWordDisallowed?: pulumi.Input<boolean>;
    disallowedChars?: pulumi.Input<string>;
    disallowedSubstrings?: pulumi.Input<pulumi.Input<string>[]>;
    disallowedUserAttributeValues?: pulumi.Input<pulumi.Input<string>[]>;
    distinctCharacters?: pulumi.Input<number>;
    externalId?: pulumi.Input<string>;
    firstNameDisallowed?: pulumi.Input<boolean>;
    forcePasswordReset?: pulumi.Input<boolean>;
    groups?: pulumi.Input<pulumi.Input<inputs.IdentityDomainsPasswordPolicyGroup>[]>;
    idcsEndpoint: pulumi.Input<string>;
    lastNameDisallowed?: pulumi.Input<boolean>;
    lockoutDuration?: pulumi.Input<number>;
    maxIncorrectAttempts?: pulumi.Input<number>;
    maxLength?: pulumi.Input<number>;
    maxRepeatedChars?: pulumi.Input<number>;
    maxSpecialChars?: pulumi.Input<number>;
    minAlphaNumerals?: pulumi.Input<number>;
    minAlphas?: pulumi.Input<number>;
    minLength?: pulumi.Input<number>;
    minLowerCase?: pulumi.Input<number>;
    minNumerals?: pulumi.Input<number>;
    minPasswordAge?: pulumi.Input<number>;
    minSpecialChars?: pulumi.Input<number>;
    minUniqueChars?: pulumi.Input<number>;
    minUpperCase?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    numPasswordsInHistory?: pulumi.Input<number>;
    ocid?: pulumi.Input<string>;
    passwordExpireWarning?: pulumi.Input<number>;
    passwordExpiresAfter?: pulumi.Input<number>;
    passwordStrength?: pulumi.Input<string>;
    priority?: pulumi.Input<number>;
    requiredChars?: pulumi.Input<string>;
    resourceTypeSchemaVersion?: pulumi.Input<string>;
    schemas: pulumi.Input<pulumi.Input<string>[]>;
    startsWithAlphabet?: pulumi.Input<boolean>;
    tags?: pulumi.Input<pulumi.Input<inputs.IdentityDomainsPasswordPolicyTag>[]>;
    timeouts?: pulumi.Input<inputs.IdentityDomainsPasswordPolicyTimeouts>;
    userNameDisallowed?: pulumi.Input<boolean>;
}
