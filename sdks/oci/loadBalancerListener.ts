// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class LoadBalancerListener extends pulumi.CustomResource {
    /**
     * Get an existing LoadBalancerListener resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LoadBalancerListenerState, opts?: pulumi.CustomResourceOptions): LoadBalancerListener {
        return new LoadBalancerListener(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/loadBalancerListener:LoadBalancerListener';

    /**
     * Returns true if the given object is an instance of LoadBalancerListener.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LoadBalancerListener {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LoadBalancerListener.__pulumiType;
    }

    public readonly connectionConfiguration!: pulumi.Output<outputs.LoadBalancerListenerConnectionConfiguration | undefined>;
    public readonly defaultBackendSetName!: pulumi.Output<string>;
    public readonly hostnameNames!: pulumi.Output<string[]>;
    public readonly loadBalancerId!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly pathRouteSetName!: pulumi.Output<string>;
    public readonly port!: pulumi.Output<number>;
    public readonly protocol!: pulumi.Output<string>;
    public readonly routingPolicyName!: pulumi.Output<string>;
    public readonly ruleSetNames!: pulumi.Output<string[]>;
    public readonly sslConfiguration!: pulumi.Output<outputs.LoadBalancerListenerSslConfiguration | undefined>;
    public /*out*/ readonly state!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.LoadBalancerListenerTimeouts | undefined>;

    /**
     * Create a LoadBalancerListener resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LoadBalancerListenerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LoadBalancerListenerArgs | LoadBalancerListenerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LoadBalancerListenerState | undefined;
            resourceInputs["connectionConfiguration"] = state ? state.connectionConfiguration : undefined;
            resourceInputs["defaultBackendSetName"] = state ? state.defaultBackendSetName : undefined;
            resourceInputs["hostnameNames"] = state ? state.hostnameNames : undefined;
            resourceInputs["loadBalancerId"] = state ? state.loadBalancerId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["pathRouteSetName"] = state ? state.pathRouteSetName : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["routingPolicyName"] = state ? state.routingPolicyName : undefined;
            resourceInputs["ruleSetNames"] = state ? state.ruleSetNames : undefined;
            resourceInputs["sslConfiguration"] = state ? state.sslConfiguration : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as LoadBalancerListenerArgs | undefined;
            if ((!args || args.defaultBackendSetName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'defaultBackendSetName'");
            }
            if ((!args || args.loadBalancerId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'loadBalancerId'");
            }
            if ((!args || args.port === undefined) && !opts.urn) {
                throw new Error("Missing required property 'port'");
            }
            if ((!args || args.protocol === undefined) && !opts.urn) {
                throw new Error("Missing required property 'protocol'");
            }
            resourceInputs["connectionConfiguration"] = args ? args.connectionConfiguration : undefined;
            resourceInputs["defaultBackendSetName"] = args ? args.defaultBackendSetName : undefined;
            resourceInputs["hostnameNames"] = args ? args.hostnameNames : undefined;
            resourceInputs["loadBalancerId"] = args ? args.loadBalancerId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["pathRouteSetName"] = args ? args.pathRouteSetName : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["routingPolicyName"] = args ? args.routingPolicyName : undefined;
            resourceInputs["ruleSetNames"] = args ? args.ruleSetNames : undefined;
            resourceInputs["sslConfiguration"] = args ? args.sslConfiguration : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["state"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LoadBalancerListener.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LoadBalancerListener resources.
 */
export interface LoadBalancerListenerState {
    connectionConfiguration?: pulumi.Input<inputs.LoadBalancerListenerConnectionConfiguration>;
    defaultBackendSetName?: pulumi.Input<string>;
    hostnameNames?: pulumi.Input<pulumi.Input<string>[]>;
    loadBalancerId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    pathRouteSetName?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    protocol?: pulumi.Input<string>;
    routingPolicyName?: pulumi.Input<string>;
    ruleSetNames?: pulumi.Input<pulumi.Input<string>[]>;
    sslConfiguration?: pulumi.Input<inputs.LoadBalancerListenerSslConfiguration>;
    state?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.LoadBalancerListenerTimeouts>;
}

/**
 * The set of arguments for constructing a LoadBalancerListener resource.
 */
export interface LoadBalancerListenerArgs {
    connectionConfiguration?: pulumi.Input<inputs.LoadBalancerListenerConnectionConfiguration>;
    defaultBackendSetName: pulumi.Input<string>;
    hostnameNames?: pulumi.Input<pulumi.Input<string>[]>;
    loadBalancerId: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    pathRouteSetName?: pulumi.Input<string>;
    port: pulumi.Input<number>;
    protocol: pulumi.Input<string>;
    routingPolicyName?: pulumi.Input<string>;
    ruleSetNames?: pulumi.Input<pulumi.Input<string>[]>;
    sslConfiguration?: pulumi.Input<inputs.LoadBalancerListenerSslConfiguration>;
    timeouts?: pulumi.Input<inputs.LoadBalancerListenerTimeouts>;
}
