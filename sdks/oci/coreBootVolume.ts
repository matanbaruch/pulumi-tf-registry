// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CoreBootVolume extends pulumi.CustomResource {
    /**
     * Get an existing CoreBootVolume resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CoreBootVolumeState, opts?: pulumi.CustomResourceOptions): CoreBootVolume {
        return new CoreBootVolume(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/coreBootVolume:CoreBootVolume';

    /**
     * Returns true if the given object is an instance of CoreBootVolume.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CoreBootVolume {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CoreBootVolume.__pulumiType;
    }

    public /*out*/ readonly autoTunedVpusPerGb!: pulumi.Output<string>;
    public readonly autotunePolicies!: pulumi.Output<outputs.CoreBootVolumeAutotunePolicy[] | undefined>;
    public readonly availabilityDomain!: pulumi.Output<string>;
    /**
     * @deprecated Deprecated
     */
    public readonly backupPolicyId!: pulumi.Output<string>;
    public readonly bootVolumeReplicas!: pulumi.Output<outputs.CoreBootVolumeBootVolumeReplica[] | undefined>;
    public readonly bootVolumeReplicasDeletion!: pulumi.Output<boolean | undefined>;
    public readonly clusterPlacementGroupId!: pulumi.Output<string>;
    public readonly compartmentId!: pulumi.Output<string>;
    public readonly definedTags!: pulumi.Output<{[key: string]: string}>;
    public readonly displayName!: pulumi.Output<string>;
    public readonly freeformTags!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly imageId!: pulumi.Output<string>;
    public readonly isAutoTuneEnabled!: pulumi.Output<boolean>;
    public /*out*/ readonly isHydrated!: pulumi.Output<boolean>;
    public readonly kmsKeyId!: pulumi.Output<string>;
    public readonly sizeInGbs!: pulumi.Output<string>;
    public /*out*/ readonly sizeInMbs!: pulumi.Output<string>;
    public readonly sourceDetails!: pulumi.Output<outputs.CoreBootVolumeSourceDetails>;
    public /*out*/ readonly state!: pulumi.Output<string>;
    public /*out*/ readonly systemTags!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly timeCreated!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.CoreBootVolumeTimeouts | undefined>;
    public /*out*/ readonly volumeGroupId!: pulumi.Output<string>;
    public readonly vpusPerGb!: pulumi.Output<string>;

    /**
     * Create a CoreBootVolume resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CoreBootVolumeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CoreBootVolumeArgs | CoreBootVolumeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CoreBootVolumeState | undefined;
            resourceInputs["autoTunedVpusPerGb"] = state ? state.autoTunedVpusPerGb : undefined;
            resourceInputs["autotunePolicies"] = state ? state.autotunePolicies : undefined;
            resourceInputs["availabilityDomain"] = state ? state.availabilityDomain : undefined;
            resourceInputs["backupPolicyId"] = state ? state.backupPolicyId : undefined;
            resourceInputs["bootVolumeReplicas"] = state ? state.bootVolumeReplicas : undefined;
            resourceInputs["bootVolumeReplicasDeletion"] = state ? state.bootVolumeReplicasDeletion : undefined;
            resourceInputs["clusterPlacementGroupId"] = state ? state.clusterPlacementGroupId : undefined;
            resourceInputs["compartmentId"] = state ? state.compartmentId : undefined;
            resourceInputs["definedTags"] = state ? state.definedTags : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["freeformTags"] = state ? state.freeformTags : undefined;
            resourceInputs["imageId"] = state ? state.imageId : undefined;
            resourceInputs["isAutoTuneEnabled"] = state ? state.isAutoTuneEnabled : undefined;
            resourceInputs["isHydrated"] = state ? state.isHydrated : undefined;
            resourceInputs["kmsKeyId"] = state ? state.kmsKeyId : undefined;
            resourceInputs["sizeInGbs"] = state ? state.sizeInGbs : undefined;
            resourceInputs["sizeInMbs"] = state ? state.sizeInMbs : undefined;
            resourceInputs["sourceDetails"] = state ? state.sourceDetails : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["systemTags"] = state ? state.systemTags : undefined;
            resourceInputs["timeCreated"] = state ? state.timeCreated : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["volumeGroupId"] = state ? state.volumeGroupId : undefined;
            resourceInputs["vpusPerGb"] = state ? state.vpusPerGb : undefined;
        } else {
            const args = argsOrState as CoreBootVolumeArgs | undefined;
            if ((!args || args.availabilityDomain === undefined) && !opts.urn) {
                throw new Error("Missing required property 'availabilityDomain'");
            }
            if ((!args || args.compartmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'compartmentId'");
            }
            if ((!args || args.sourceDetails === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceDetails'");
            }
            resourceInputs["autotunePolicies"] = args ? args.autotunePolicies : undefined;
            resourceInputs["availabilityDomain"] = args ? args.availabilityDomain : undefined;
            resourceInputs["backupPolicyId"] = args ? args.backupPolicyId : undefined;
            resourceInputs["bootVolumeReplicas"] = args ? args.bootVolumeReplicas : undefined;
            resourceInputs["bootVolumeReplicasDeletion"] = args ? args.bootVolumeReplicasDeletion : undefined;
            resourceInputs["clusterPlacementGroupId"] = args ? args.clusterPlacementGroupId : undefined;
            resourceInputs["compartmentId"] = args ? args.compartmentId : undefined;
            resourceInputs["definedTags"] = args ? args.definedTags : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["freeformTags"] = args ? args.freeformTags : undefined;
            resourceInputs["isAutoTuneEnabled"] = args ? args.isAutoTuneEnabled : undefined;
            resourceInputs["kmsKeyId"] = args ? args.kmsKeyId : undefined;
            resourceInputs["sizeInGbs"] = args ? args.sizeInGbs : undefined;
            resourceInputs["sourceDetails"] = args ? args.sourceDetails : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["vpusPerGb"] = args ? args.vpusPerGb : undefined;
            resourceInputs["autoTunedVpusPerGb"] = undefined /*out*/;
            resourceInputs["imageId"] = undefined /*out*/;
            resourceInputs["isHydrated"] = undefined /*out*/;
            resourceInputs["sizeInMbs"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["systemTags"] = undefined /*out*/;
            resourceInputs["timeCreated"] = undefined /*out*/;
            resourceInputs["volumeGroupId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CoreBootVolume.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CoreBootVolume resources.
 */
export interface CoreBootVolumeState {
    autoTunedVpusPerGb?: pulumi.Input<string>;
    autotunePolicies?: pulumi.Input<pulumi.Input<inputs.CoreBootVolumeAutotunePolicy>[]>;
    availabilityDomain?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    backupPolicyId?: pulumi.Input<string>;
    bootVolumeReplicas?: pulumi.Input<pulumi.Input<inputs.CoreBootVolumeBootVolumeReplica>[]>;
    bootVolumeReplicasDeletion?: pulumi.Input<boolean>;
    clusterPlacementGroupId?: pulumi.Input<string>;
    compartmentId?: pulumi.Input<string>;
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    displayName?: pulumi.Input<string>;
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    imageId?: pulumi.Input<string>;
    isAutoTuneEnabled?: pulumi.Input<boolean>;
    isHydrated?: pulumi.Input<boolean>;
    kmsKeyId?: pulumi.Input<string>;
    sizeInGbs?: pulumi.Input<string>;
    sizeInMbs?: pulumi.Input<string>;
    sourceDetails?: pulumi.Input<inputs.CoreBootVolumeSourceDetails>;
    state?: pulumi.Input<string>;
    systemTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeCreated?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.CoreBootVolumeTimeouts>;
    volumeGroupId?: pulumi.Input<string>;
    vpusPerGb?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CoreBootVolume resource.
 */
export interface CoreBootVolumeArgs {
    autotunePolicies?: pulumi.Input<pulumi.Input<inputs.CoreBootVolumeAutotunePolicy>[]>;
    availabilityDomain: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    backupPolicyId?: pulumi.Input<string>;
    bootVolumeReplicas?: pulumi.Input<pulumi.Input<inputs.CoreBootVolumeBootVolumeReplica>[]>;
    bootVolumeReplicasDeletion?: pulumi.Input<boolean>;
    clusterPlacementGroupId?: pulumi.Input<string>;
    compartmentId: pulumi.Input<string>;
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    displayName?: pulumi.Input<string>;
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    isAutoTuneEnabled?: pulumi.Input<boolean>;
    kmsKeyId?: pulumi.Input<string>;
    sizeInGbs?: pulumi.Input<string>;
    sourceDetails: pulumi.Input<inputs.CoreBootVolumeSourceDetails>;
    timeouts?: pulumi.Input<inputs.CoreBootVolumeTimeouts>;
    vpusPerGb?: pulumi.Input<string>;
}
