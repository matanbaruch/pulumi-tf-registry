// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class IdentityDomainsIdentityProvider extends pulumi.CustomResource {
    /**
     * Get an existing IdentityDomainsIdentityProvider resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IdentityDomainsIdentityProviderState, opts?: pulumi.CustomResourceOptions): IdentityDomainsIdentityProvider {
        return new IdentityDomainsIdentityProvider(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/identityDomainsIdentityProvider:IdentityDomainsIdentityProvider';

    /**
     * Returns true if the given object is an instance of IdentityDomainsIdentityProvider.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IdentityDomainsIdentityProvider {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IdentityDomainsIdentityProvider.__pulumiType;
    }

    public readonly assertionAttribute!: pulumi.Output<string>;
    public readonly attributeSets!: pulumi.Output<string[] | undefined>;
    public readonly attributes!: pulumi.Output<string | undefined>;
    public readonly authnRequestBinding!: pulumi.Output<string>;
    public readonly authorization!: pulumi.Output<string | undefined>;
    public /*out*/ readonly compartmentOcid!: pulumi.Output<string>;
    public readonly correlationPolicy!: pulumi.Output<outputs.IdentityDomainsIdentityProviderCorrelationPolicy | undefined>;
    public /*out*/ readonly deleteInProgress!: pulumi.Output<boolean>;
    public readonly description!: pulumi.Output<string>;
    public /*out*/ readonly domainOcid!: pulumi.Output<string>;
    public readonly enabled!: pulumi.Output<boolean>;
    public readonly encryptionCertificate!: pulumi.Output<string>;
    public readonly externalId!: pulumi.Output<string>;
    public readonly iconUrl!: pulumi.Output<string>;
    public /*out*/ readonly idcsCreatedBies!: pulumi.Output<outputs.IdentityDomainsIdentityProviderIdcsCreatedBy[]>;
    public readonly idcsEndpoint!: pulumi.Output<string>;
    public /*out*/ readonly idcsLastModifiedBies!: pulumi.Output<outputs.IdentityDomainsIdentityProviderIdcsLastModifiedBy[]>;
    public /*out*/ readonly idcsLastUpgradedInRelease!: pulumi.Output<string>;
    public /*out*/ readonly idcsPreventedOperations!: pulumi.Output<string[]>;
    public readonly idpSsoUrl!: pulumi.Output<string>;
    public readonly includeSigningCertInSignature!: pulumi.Output<boolean>;
    public readonly jitUserProvAssignedGroups!: pulumi.Output<outputs.IdentityDomainsIdentityProviderJitUserProvAssignedGroup[] | undefined>;
    public readonly jitUserProvAttributeUpdateEnabled!: pulumi.Output<boolean>;
    public readonly jitUserProvAttributes!: pulumi.Output<outputs.IdentityDomainsIdentityProviderJitUserProvAttributes | undefined>;
    public readonly jitUserProvCreateUserEnabled!: pulumi.Output<boolean>;
    public readonly jitUserProvEnabled!: pulumi.Output<boolean>;
    public readonly jitUserProvGroupAssertionAttributeEnabled!: pulumi.Output<boolean>;
    public readonly jitUserProvGroupAssignmentMethod!: pulumi.Output<string>;
    public readonly jitUserProvGroupMappingMode!: pulumi.Output<string>;
    public readonly jitUserProvGroupMappings!: pulumi.Output<outputs.IdentityDomainsIdentityProviderJitUserProvGroupMapping[] | undefined>;
    public readonly jitUserProvGroupSamlAttributeName!: pulumi.Output<string>;
    public readonly jitUserProvGroupStaticListEnabled!: pulumi.Output<boolean>;
    public readonly jitUserProvIgnoreErrorOnAbsentGroups!: pulumi.Output<boolean>;
    public /*out*/ readonly lastNotificationSentTime!: pulumi.Output<string>;
    public readonly logoutBinding!: pulumi.Output<string>;
    public readonly logoutEnabled!: pulumi.Output<boolean>;
    public readonly logoutRequestUrl!: pulumi.Output<string>;
    public readonly logoutResponseUrl!: pulumi.Output<string>;
    public readonly metadata!: pulumi.Output<string>;
    public /*out*/ readonly metas!: pulumi.Output<outputs.IdentityDomainsIdentityProviderMeta[]>;
    public readonly nameIdFormat!: pulumi.Output<string>;
    public readonly ocid!: pulumi.Output<string>;
    public readonly partnerName!: pulumi.Output<string>;
    public readonly partnerProviderId!: pulumi.Output<string>;
    public readonly requestedAuthenticationContexts!: pulumi.Output<string[]>;
    public readonly requireForceAuthn!: pulumi.Output<boolean>;
    public readonly requiresEncryptedAssertion!: pulumi.Output<boolean>;
    public readonly resourceTypeSchemaVersion!: pulumi.Output<string | undefined>;
    public readonly samlHoKrequired!: pulumi.Output<boolean>;
    public readonly schemas!: pulumi.Output<string[]>;
    public readonly serviceInstanceIdentifier!: pulumi.Output<string>;
    public readonly shownOnLoginPage!: pulumi.Output<boolean>;
    public readonly signatureHashAlgorithm!: pulumi.Output<string>;
    public readonly signingCertificate!: pulumi.Output<string>;
    public readonly succinctId!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<outputs.IdentityDomainsIdentityProviderTag[] | undefined>;
    public /*out*/ readonly tenancyOcid!: pulumi.Output<string>;
    public /*out*/ readonly tenantProviderId!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.IdentityDomainsIdentityProviderTimeouts | undefined>;
    public readonly type!: pulumi.Output<string>;
    public readonly urnietfparamsscimschemasoracleidcsextensionsocialIdentityProvider!: pulumi.Output<outputs.IdentityDomainsIdentityProviderUrnietfparamsscimschemasoracleidcsextensionsocialIdentityProvider | undefined>;
    public readonly urnietfparamsscimschemasoracleidcsextensionx509identityProvider!: pulumi.Output<outputs.IdentityDomainsIdentityProviderUrnietfparamsscimschemasoracleidcsextensionx509identityProvider | undefined>;
    public readonly userMappingMethod!: pulumi.Output<string>;
    public readonly userMappingStoreAttribute!: pulumi.Output<string>;

    /**
     * Create a IdentityDomainsIdentityProvider resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IdentityDomainsIdentityProviderArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IdentityDomainsIdentityProviderArgs | IdentityDomainsIdentityProviderState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IdentityDomainsIdentityProviderState | undefined;
            resourceInputs["assertionAttribute"] = state ? state.assertionAttribute : undefined;
            resourceInputs["attributeSets"] = state ? state.attributeSets : undefined;
            resourceInputs["attributes"] = state ? state.attributes : undefined;
            resourceInputs["authnRequestBinding"] = state ? state.authnRequestBinding : undefined;
            resourceInputs["authorization"] = state ? state.authorization : undefined;
            resourceInputs["compartmentOcid"] = state ? state.compartmentOcid : undefined;
            resourceInputs["correlationPolicy"] = state ? state.correlationPolicy : undefined;
            resourceInputs["deleteInProgress"] = state ? state.deleteInProgress : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["domainOcid"] = state ? state.domainOcid : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["encryptionCertificate"] = state ? state.encryptionCertificate : undefined;
            resourceInputs["externalId"] = state ? state.externalId : undefined;
            resourceInputs["iconUrl"] = state ? state.iconUrl : undefined;
            resourceInputs["idcsCreatedBies"] = state ? state.idcsCreatedBies : undefined;
            resourceInputs["idcsEndpoint"] = state ? state.idcsEndpoint : undefined;
            resourceInputs["idcsLastModifiedBies"] = state ? state.idcsLastModifiedBies : undefined;
            resourceInputs["idcsLastUpgradedInRelease"] = state ? state.idcsLastUpgradedInRelease : undefined;
            resourceInputs["idcsPreventedOperations"] = state ? state.idcsPreventedOperations : undefined;
            resourceInputs["idpSsoUrl"] = state ? state.idpSsoUrl : undefined;
            resourceInputs["includeSigningCertInSignature"] = state ? state.includeSigningCertInSignature : undefined;
            resourceInputs["jitUserProvAssignedGroups"] = state ? state.jitUserProvAssignedGroups : undefined;
            resourceInputs["jitUserProvAttributeUpdateEnabled"] = state ? state.jitUserProvAttributeUpdateEnabled : undefined;
            resourceInputs["jitUserProvAttributes"] = state ? state.jitUserProvAttributes : undefined;
            resourceInputs["jitUserProvCreateUserEnabled"] = state ? state.jitUserProvCreateUserEnabled : undefined;
            resourceInputs["jitUserProvEnabled"] = state ? state.jitUserProvEnabled : undefined;
            resourceInputs["jitUserProvGroupAssertionAttributeEnabled"] = state ? state.jitUserProvGroupAssertionAttributeEnabled : undefined;
            resourceInputs["jitUserProvGroupAssignmentMethod"] = state ? state.jitUserProvGroupAssignmentMethod : undefined;
            resourceInputs["jitUserProvGroupMappingMode"] = state ? state.jitUserProvGroupMappingMode : undefined;
            resourceInputs["jitUserProvGroupMappings"] = state ? state.jitUserProvGroupMappings : undefined;
            resourceInputs["jitUserProvGroupSamlAttributeName"] = state ? state.jitUserProvGroupSamlAttributeName : undefined;
            resourceInputs["jitUserProvGroupStaticListEnabled"] = state ? state.jitUserProvGroupStaticListEnabled : undefined;
            resourceInputs["jitUserProvIgnoreErrorOnAbsentGroups"] = state ? state.jitUserProvIgnoreErrorOnAbsentGroups : undefined;
            resourceInputs["lastNotificationSentTime"] = state ? state.lastNotificationSentTime : undefined;
            resourceInputs["logoutBinding"] = state ? state.logoutBinding : undefined;
            resourceInputs["logoutEnabled"] = state ? state.logoutEnabled : undefined;
            resourceInputs["logoutRequestUrl"] = state ? state.logoutRequestUrl : undefined;
            resourceInputs["logoutResponseUrl"] = state ? state.logoutResponseUrl : undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
            resourceInputs["metas"] = state ? state.metas : undefined;
            resourceInputs["nameIdFormat"] = state ? state.nameIdFormat : undefined;
            resourceInputs["ocid"] = state ? state.ocid : undefined;
            resourceInputs["partnerName"] = state ? state.partnerName : undefined;
            resourceInputs["partnerProviderId"] = state ? state.partnerProviderId : undefined;
            resourceInputs["requestedAuthenticationContexts"] = state ? state.requestedAuthenticationContexts : undefined;
            resourceInputs["requireForceAuthn"] = state ? state.requireForceAuthn : undefined;
            resourceInputs["requiresEncryptedAssertion"] = state ? state.requiresEncryptedAssertion : undefined;
            resourceInputs["resourceTypeSchemaVersion"] = state ? state.resourceTypeSchemaVersion : undefined;
            resourceInputs["samlHoKrequired"] = state ? state.samlHoKrequired : undefined;
            resourceInputs["schemas"] = state ? state.schemas : undefined;
            resourceInputs["serviceInstanceIdentifier"] = state ? state.serviceInstanceIdentifier : undefined;
            resourceInputs["shownOnLoginPage"] = state ? state.shownOnLoginPage : undefined;
            resourceInputs["signatureHashAlgorithm"] = state ? state.signatureHashAlgorithm : undefined;
            resourceInputs["signingCertificate"] = state ? state.signingCertificate : undefined;
            resourceInputs["succinctId"] = state ? state.succinctId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tenancyOcid"] = state ? state.tenancyOcid : undefined;
            resourceInputs["tenantProviderId"] = state ? state.tenantProviderId : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["urnietfparamsscimschemasoracleidcsextensionsocialIdentityProvider"] = state ? state.urnietfparamsscimschemasoracleidcsextensionsocialIdentityProvider : undefined;
            resourceInputs["urnietfparamsscimschemasoracleidcsextensionx509identityProvider"] = state ? state.urnietfparamsscimschemasoracleidcsextensionx509identityProvider : undefined;
            resourceInputs["userMappingMethod"] = state ? state.userMappingMethod : undefined;
            resourceInputs["userMappingStoreAttribute"] = state ? state.userMappingStoreAttribute : undefined;
        } else {
            const args = argsOrState as IdentityDomainsIdentityProviderArgs | undefined;
            if ((!args || args.enabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enabled'");
            }
            if ((!args || args.idcsEndpoint === undefined) && !opts.urn) {
                throw new Error("Missing required property 'idcsEndpoint'");
            }
            if ((!args || args.partnerName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'partnerName'");
            }
            if ((!args || args.schemas === undefined) && !opts.urn) {
                throw new Error("Missing required property 'schemas'");
            }
            resourceInputs["assertionAttribute"] = args ? args.assertionAttribute : undefined;
            resourceInputs["attributeSets"] = args ? args.attributeSets : undefined;
            resourceInputs["attributes"] = args ? args.attributes : undefined;
            resourceInputs["authnRequestBinding"] = args ? args.authnRequestBinding : undefined;
            resourceInputs["authorization"] = args ? args.authorization : undefined;
            resourceInputs["correlationPolicy"] = args ? args.correlationPolicy : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["encryptionCertificate"] = args ? args.encryptionCertificate : undefined;
            resourceInputs["externalId"] = args ? args.externalId : undefined;
            resourceInputs["iconUrl"] = args ? args.iconUrl : undefined;
            resourceInputs["idcsEndpoint"] = args ? args.idcsEndpoint : undefined;
            resourceInputs["idpSsoUrl"] = args ? args.idpSsoUrl : undefined;
            resourceInputs["includeSigningCertInSignature"] = args ? args.includeSigningCertInSignature : undefined;
            resourceInputs["jitUserProvAssignedGroups"] = args ? args.jitUserProvAssignedGroups : undefined;
            resourceInputs["jitUserProvAttributeUpdateEnabled"] = args ? args.jitUserProvAttributeUpdateEnabled : undefined;
            resourceInputs["jitUserProvAttributes"] = args ? args.jitUserProvAttributes : undefined;
            resourceInputs["jitUserProvCreateUserEnabled"] = args ? args.jitUserProvCreateUserEnabled : undefined;
            resourceInputs["jitUserProvEnabled"] = args ? args.jitUserProvEnabled : undefined;
            resourceInputs["jitUserProvGroupAssertionAttributeEnabled"] = args ? args.jitUserProvGroupAssertionAttributeEnabled : undefined;
            resourceInputs["jitUserProvGroupAssignmentMethod"] = args ? args.jitUserProvGroupAssignmentMethod : undefined;
            resourceInputs["jitUserProvGroupMappingMode"] = args ? args.jitUserProvGroupMappingMode : undefined;
            resourceInputs["jitUserProvGroupMappings"] = args ? args.jitUserProvGroupMappings : undefined;
            resourceInputs["jitUserProvGroupSamlAttributeName"] = args ? args.jitUserProvGroupSamlAttributeName : undefined;
            resourceInputs["jitUserProvGroupStaticListEnabled"] = args ? args.jitUserProvGroupStaticListEnabled : undefined;
            resourceInputs["jitUserProvIgnoreErrorOnAbsentGroups"] = args ? args.jitUserProvIgnoreErrorOnAbsentGroups : undefined;
            resourceInputs["logoutBinding"] = args ? args.logoutBinding : undefined;
            resourceInputs["logoutEnabled"] = args ? args.logoutEnabled : undefined;
            resourceInputs["logoutRequestUrl"] = args ? args.logoutRequestUrl : undefined;
            resourceInputs["logoutResponseUrl"] = args ? args.logoutResponseUrl : undefined;
            resourceInputs["metadata"] = args ? args.metadata : undefined;
            resourceInputs["nameIdFormat"] = args ? args.nameIdFormat : undefined;
            resourceInputs["ocid"] = args ? args.ocid : undefined;
            resourceInputs["partnerName"] = args ? args.partnerName : undefined;
            resourceInputs["partnerProviderId"] = args ? args.partnerProviderId : undefined;
            resourceInputs["requestedAuthenticationContexts"] = args ? args.requestedAuthenticationContexts : undefined;
            resourceInputs["requireForceAuthn"] = args ? args.requireForceAuthn : undefined;
            resourceInputs["requiresEncryptedAssertion"] = args ? args.requiresEncryptedAssertion : undefined;
            resourceInputs["resourceTypeSchemaVersion"] = args ? args.resourceTypeSchemaVersion : undefined;
            resourceInputs["samlHoKrequired"] = args ? args.samlHoKrequired : undefined;
            resourceInputs["schemas"] = args ? args.schemas : undefined;
            resourceInputs["serviceInstanceIdentifier"] = args ? args.serviceInstanceIdentifier : undefined;
            resourceInputs["shownOnLoginPage"] = args ? args.shownOnLoginPage : undefined;
            resourceInputs["signatureHashAlgorithm"] = args ? args.signatureHashAlgorithm : undefined;
            resourceInputs["signingCertificate"] = args ? args.signingCertificate : undefined;
            resourceInputs["succinctId"] = args ? args.succinctId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["urnietfparamsscimschemasoracleidcsextensionsocialIdentityProvider"] = args ? args.urnietfparamsscimschemasoracleidcsextensionsocialIdentityProvider : undefined;
            resourceInputs["urnietfparamsscimschemasoracleidcsextensionx509identityProvider"] = args ? args.urnietfparamsscimschemasoracleidcsextensionx509identityProvider : undefined;
            resourceInputs["userMappingMethod"] = args ? args.userMappingMethod : undefined;
            resourceInputs["userMappingStoreAttribute"] = args ? args.userMappingStoreAttribute : undefined;
            resourceInputs["compartmentOcid"] = undefined /*out*/;
            resourceInputs["deleteInProgress"] = undefined /*out*/;
            resourceInputs["domainOcid"] = undefined /*out*/;
            resourceInputs["idcsCreatedBies"] = undefined /*out*/;
            resourceInputs["idcsLastModifiedBies"] = undefined /*out*/;
            resourceInputs["idcsLastUpgradedInRelease"] = undefined /*out*/;
            resourceInputs["idcsPreventedOperations"] = undefined /*out*/;
            resourceInputs["lastNotificationSentTime"] = undefined /*out*/;
            resourceInputs["metas"] = undefined /*out*/;
            resourceInputs["tenancyOcid"] = undefined /*out*/;
            resourceInputs["tenantProviderId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IdentityDomainsIdentityProvider.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering IdentityDomainsIdentityProvider resources.
 */
export interface IdentityDomainsIdentityProviderState {
    assertionAttribute?: pulumi.Input<string>;
    attributeSets?: pulumi.Input<pulumi.Input<string>[]>;
    attributes?: pulumi.Input<string>;
    authnRequestBinding?: pulumi.Input<string>;
    authorization?: pulumi.Input<string>;
    compartmentOcid?: pulumi.Input<string>;
    correlationPolicy?: pulumi.Input<inputs.IdentityDomainsIdentityProviderCorrelationPolicy>;
    deleteInProgress?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    domainOcid?: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    encryptionCertificate?: pulumi.Input<string>;
    externalId?: pulumi.Input<string>;
    iconUrl?: pulumi.Input<string>;
    idcsCreatedBies?: pulumi.Input<pulumi.Input<inputs.IdentityDomainsIdentityProviderIdcsCreatedBy>[]>;
    idcsEndpoint?: pulumi.Input<string>;
    idcsLastModifiedBies?: pulumi.Input<pulumi.Input<inputs.IdentityDomainsIdentityProviderIdcsLastModifiedBy>[]>;
    idcsLastUpgradedInRelease?: pulumi.Input<string>;
    idcsPreventedOperations?: pulumi.Input<pulumi.Input<string>[]>;
    idpSsoUrl?: pulumi.Input<string>;
    includeSigningCertInSignature?: pulumi.Input<boolean>;
    jitUserProvAssignedGroups?: pulumi.Input<pulumi.Input<inputs.IdentityDomainsIdentityProviderJitUserProvAssignedGroup>[]>;
    jitUserProvAttributeUpdateEnabled?: pulumi.Input<boolean>;
    jitUserProvAttributes?: pulumi.Input<inputs.IdentityDomainsIdentityProviderJitUserProvAttributes>;
    jitUserProvCreateUserEnabled?: pulumi.Input<boolean>;
    jitUserProvEnabled?: pulumi.Input<boolean>;
    jitUserProvGroupAssertionAttributeEnabled?: pulumi.Input<boolean>;
    jitUserProvGroupAssignmentMethod?: pulumi.Input<string>;
    jitUserProvGroupMappingMode?: pulumi.Input<string>;
    jitUserProvGroupMappings?: pulumi.Input<pulumi.Input<inputs.IdentityDomainsIdentityProviderJitUserProvGroupMapping>[]>;
    jitUserProvGroupSamlAttributeName?: pulumi.Input<string>;
    jitUserProvGroupStaticListEnabled?: pulumi.Input<boolean>;
    jitUserProvIgnoreErrorOnAbsentGroups?: pulumi.Input<boolean>;
    lastNotificationSentTime?: pulumi.Input<string>;
    logoutBinding?: pulumi.Input<string>;
    logoutEnabled?: pulumi.Input<boolean>;
    logoutRequestUrl?: pulumi.Input<string>;
    logoutResponseUrl?: pulumi.Input<string>;
    metadata?: pulumi.Input<string>;
    metas?: pulumi.Input<pulumi.Input<inputs.IdentityDomainsIdentityProviderMeta>[]>;
    nameIdFormat?: pulumi.Input<string>;
    ocid?: pulumi.Input<string>;
    partnerName?: pulumi.Input<string>;
    partnerProviderId?: pulumi.Input<string>;
    requestedAuthenticationContexts?: pulumi.Input<pulumi.Input<string>[]>;
    requireForceAuthn?: pulumi.Input<boolean>;
    requiresEncryptedAssertion?: pulumi.Input<boolean>;
    resourceTypeSchemaVersion?: pulumi.Input<string>;
    samlHoKrequired?: pulumi.Input<boolean>;
    schemas?: pulumi.Input<pulumi.Input<string>[]>;
    serviceInstanceIdentifier?: pulumi.Input<string>;
    shownOnLoginPage?: pulumi.Input<boolean>;
    signatureHashAlgorithm?: pulumi.Input<string>;
    signingCertificate?: pulumi.Input<string>;
    succinctId?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.IdentityDomainsIdentityProviderTag>[]>;
    tenancyOcid?: pulumi.Input<string>;
    tenantProviderId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.IdentityDomainsIdentityProviderTimeouts>;
    type?: pulumi.Input<string>;
    urnietfparamsscimschemasoracleidcsextensionsocialIdentityProvider?: pulumi.Input<inputs.IdentityDomainsIdentityProviderUrnietfparamsscimschemasoracleidcsextensionsocialIdentityProvider>;
    urnietfparamsscimschemasoracleidcsextensionx509identityProvider?: pulumi.Input<inputs.IdentityDomainsIdentityProviderUrnietfparamsscimschemasoracleidcsextensionx509identityProvider>;
    userMappingMethod?: pulumi.Input<string>;
    userMappingStoreAttribute?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a IdentityDomainsIdentityProvider resource.
 */
export interface IdentityDomainsIdentityProviderArgs {
    assertionAttribute?: pulumi.Input<string>;
    attributeSets?: pulumi.Input<pulumi.Input<string>[]>;
    attributes?: pulumi.Input<string>;
    authnRequestBinding?: pulumi.Input<string>;
    authorization?: pulumi.Input<string>;
    correlationPolicy?: pulumi.Input<inputs.IdentityDomainsIdentityProviderCorrelationPolicy>;
    description?: pulumi.Input<string>;
    enabled: pulumi.Input<boolean>;
    encryptionCertificate?: pulumi.Input<string>;
    externalId?: pulumi.Input<string>;
    iconUrl?: pulumi.Input<string>;
    idcsEndpoint: pulumi.Input<string>;
    idpSsoUrl?: pulumi.Input<string>;
    includeSigningCertInSignature?: pulumi.Input<boolean>;
    jitUserProvAssignedGroups?: pulumi.Input<pulumi.Input<inputs.IdentityDomainsIdentityProviderJitUserProvAssignedGroup>[]>;
    jitUserProvAttributeUpdateEnabled?: pulumi.Input<boolean>;
    jitUserProvAttributes?: pulumi.Input<inputs.IdentityDomainsIdentityProviderJitUserProvAttributes>;
    jitUserProvCreateUserEnabled?: pulumi.Input<boolean>;
    jitUserProvEnabled?: pulumi.Input<boolean>;
    jitUserProvGroupAssertionAttributeEnabled?: pulumi.Input<boolean>;
    jitUserProvGroupAssignmentMethod?: pulumi.Input<string>;
    jitUserProvGroupMappingMode?: pulumi.Input<string>;
    jitUserProvGroupMappings?: pulumi.Input<pulumi.Input<inputs.IdentityDomainsIdentityProviderJitUserProvGroupMapping>[]>;
    jitUserProvGroupSamlAttributeName?: pulumi.Input<string>;
    jitUserProvGroupStaticListEnabled?: pulumi.Input<boolean>;
    jitUserProvIgnoreErrorOnAbsentGroups?: pulumi.Input<boolean>;
    logoutBinding?: pulumi.Input<string>;
    logoutEnabled?: pulumi.Input<boolean>;
    logoutRequestUrl?: pulumi.Input<string>;
    logoutResponseUrl?: pulumi.Input<string>;
    metadata?: pulumi.Input<string>;
    nameIdFormat?: pulumi.Input<string>;
    ocid?: pulumi.Input<string>;
    partnerName: pulumi.Input<string>;
    partnerProviderId?: pulumi.Input<string>;
    requestedAuthenticationContexts?: pulumi.Input<pulumi.Input<string>[]>;
    requireForceAuthn?: pulumi.Input<boolean>;
    requiresEncryptedAssertion?: pulumi.Input<boolean>;
    resourceTypeSchemaVersion?: pulumi.Input<string>;
    samlHoKrequired?: pulumi.Input<boolean>;
    schemas: pulumi.Input<pulumi.Input<string>[]>;
    serviceInstanceIdentifier?: pulumi.Input<string>;
    shownOnLoginPage?: pulumi.Input<boolean>;
    signatureHashAlgorithm?: pulumi.Input<string>;
    signingCertificate?: pulumi.Input<string>;
    succinctId?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.IdentityDomainsIdentityProviderTag>[]>;
    timeouts?: pulumi.Input<inputs.IdentityDomainsIdentityProviderTimeouts>;
    type?: pulumi.Input<string>;
    urnietfparamsscimschemasoracleidcsextensionsocialIdentityProvider?: pulumi.Input<inputs.IdentityDomainsIdentityProviderUrnietfparamsscimschemasoracleidcsextensionsocialIdentityProvider>;
    urnietfparamsscimschemasoracleidcsextensionx509identityProvider?: pulumi.Input<inputs.IdentityDomainsIdentityProviderUrnietfparamsscimschemasoracleidcsextensionx509identityProvider>;
    userMappingMethod?: pulumi.Input<string>;
    userMappingStoreAttribute?: pulumi.Input<string>;
}
