// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getLogAnalyticsLogAnalyticsObjectCollectionRule(args: GetLogAnalyticsLogAnalyticsObjectCollectionRuleArgs, opts?: pulumi.InvokeOptions): Promise<GetLogAnalyticsLogAnalyticsObjectCollectionRuleResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getLogAnalyticsLogAnalyticsObjectCollectionRule:getLogAnalyticsLogAnalyticsObjectCollectionRule", {
        "logAnalyticsObjectCollectionRuleId": args.logAnalyticsObjectCollectionRuleId,
        "namespace": args.namespace,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getLogAnalyticsLogAnalyticsObjectCollectionRule.
 */
export interface GetLogAnalyticsLogAnalyticsObjectCollectionRuleArgs {
    logAnalyticsObjectCollectionRuleId: string;
    namespace: string;
}

/**
 * A collection of values returned by getLogAnalyticsLogAnalyticsObjectCollectionRule.
 */
export interface GetLogAnalyticsLogAnalyticsObjectCollectionRuleResult {
    readonly charEncoding: string;
    readonly collectionType: string;
    readonly compartmentId: string;
    readonly definedTags: {[key: string]: string};
    readonly description: string;
    readonly entityId: string;
    readonly freeformTags: {[key: string]: string};
    readonly id: string;
    readonly isEnabled: boolean;
    readonly isForceHistoricCollection: boolean;
    readonly lifecycleDetails: string;
    readonly logAnalyticsObjectCollectionRuleId: string;
    readonly logGroupId: string;
    readonly logSet: string;
    readonly logSetExtRegex: string;
    readonly logSetKey: string;
    readonly logSourceName: string;
    readonly logType: string;
    readonly name: string;
    readonly namespace: string;
    readonly objectNameFilters: string[];
    readonly osBucketName: string;
    readonly osNamespace: string;
    readonly overrides: outputs.GetLogAnalyticsLogAnalyticsObjectCollectionRuleOverride[];
    readonly pollSince: string;
    readonly pollTill: string;
    readonly state: string;
    readonly timeCreated: string;
    readonly timeUpdated: string;
    readonly timezone: string;
}
export function getLogAnalyticsLogAnalyticsObjectCollectionRuleOutput(args: GetLogAnalyticsLogAnalyticsObjectCollectionRuleOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetLogAnalyticsLogAnalyticsObjectCollectionRuleResult> {
    return pulumi.output(args).apply((a: any) => getLogAnalyticsLogAnalyticsObjectCollectionRule(a, opts))
}

/**
 * A collection of arguments for invoking getLogAnalyticsLogAnalyticsObjectCollectionRule.
 */
export interface GetLogAnalyticsLogAnalyticsObjectCollectionRuleOutputArgs {
    logAnalyticsObjectCollectionRuleId: pulumi.Input<string>;
    namespace: pulumi.Input<string>;
}
