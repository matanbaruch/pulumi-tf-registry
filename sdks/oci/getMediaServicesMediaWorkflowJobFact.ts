// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getMediaServicesMediaWorkflowJobFact(args: GetMediaServicesMediaWorkflowJobFactArgs, opts?: pulumi.InvokeOptions): Promise<GetMediaServicesMediaWorkflowJobFactResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:index/getMediaServicesMediaWorkflowJobFact:getMediaServicesMediaWorkflowJobFact", {
        "id": args.id,
        "key": args.key,
        "mediaWorkflowJobId": args.mediaWorkflowJobId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getMediaServicesMediaWorkflowJobFact.
 */
export interface GetMediaServicesMediaWorkflowJobFactArgs {
    id?: string;
    key: string;
    mediaWorkflowJobId: string;
}

/**
 * A collection of values returned by getMediaServicesMediaWorkflowJobFact.
 */
export interface GetMediaServicesMediaWorkflowJobFactResult {
    readonly detail: string;
    readonly id: string;
    readonly key: string;
    readonly mediaWorkflowJobId: string;
    readonly name: string;
    readonly type: string;
}
export function getMediaServicesMediaWorkflowJobFactOutput(args: GetMediaServicesMediaWorkflowJobFactOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetMediaServicesMediaWorkflowJobFactResult> {
    return pulumi.output(args).apply((a: any) => getMediaServicesMediaWorkflowJobFact(a, opts))
}

/**
 * A collection of arguments for invoking getMediaServicesMediaWorkflowJobFact.
 */
export interface GetMediaServicesMediaWorkflowJobFactOutputArgs {
    id?: pulumi.Input<string>;
    key: pulumi.Input<string>;
    mediaWorkflowJobId: pulumi.Input<string>;
}
