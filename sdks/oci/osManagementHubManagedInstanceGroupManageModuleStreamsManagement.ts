// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class OsManagementHubManagedInstanceGroupManageModuleStreamsManagement extends pulumi.CustomResource {
    /**
     * Get an existing OsManagementHubManagedInstanceGroupManageModuleStreamsManagement resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OsManagementHubManagedInstanceGroupManageModuleStreamsManagementState, opts?: pulumi.CustomResourceOptions): OsManagementHubManagedInstanceGroupManageModuleStreamsManagement {
        return new OsManagementHubManagedInstanceGroupManageModuleStreamsManagement(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/osManagementHubManagedInstanceGroupManageModuleStreamsManagement:OsManagementHubManagedInstanceGroupManageModuleStreamsManagement';

    /**
     * Returns true if the given object is an instance of OsManagementHubManagedInstanceGroupManageModuleStreamsManagement.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OsManagementHubManagedInstanceGroupManageModuleStreamsManagement {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OsManagementHubManagedInstanceGroupManageModuleStreamsManagement.__pulumiType;
    }

    public readonly disables!: pulumi.Output<outputs.OsManagementHubManagedInstanceGroupManageModuleStreamsManagementDisable[] | undefined>;
    public readonly enables!: pulumi.Output<outputs.OsManagementHubManagedInstanceGroupManageModuleStreamsManagementEnable[] | undefined>;
    public readonly installs!: pulumi.Output<outputs.OsManagementHubManagedInstanceGroupManageModuleStreamsManagementInstall[] | undefined>;
    public readonly isDryRun!: pulumi.Output<boolean>;
    public readonly managedInstanceGroupId!: pulumi.Output<string>;
    public readonly removes!: pulumi.Output<outputs.OsManagementHubManagedInstanceGroupManageModuleStreamsManagementRemove[] | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.OsManagementHubManagedInstanceGroupManageModuleStreamsManagementTimeouts | undefined>;
    public readonly workRequestDetails!: pulumi.Output<outputs.OsManagementHubManagedInstanceGroupManageModuleStreamsManagementWorkRequestDetails | undefined>;

    /**
     * Create a OsManagementHubManagedInstanceGroupManageModuleStreamsManagement resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OsManagementHubManagedInstanceGroupManageModuleStreamsManagementArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OsManagementHubManagedInstanceGroupManageModuleStreamsManagementArgs | OsManagementHubManagedInstanceGroupManageModuleStreamsManagementState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OsManagementHubManagedInstanceGroupManageModuleStreamsManagementState | undefined;
            resourceInputs["disables"] = state ? state.disables : undefined;
            resourceInputs["enables"] = state ? state.enables : undefined;
            resourceInputs["installs"] = state ? state.installs : undefined;
            resourceInputs["isDryRun"] = state ? state.isDryRun : undefined;
            resourceInputs["managedInstanceGroupId"] = state ? state.managedInstanceGroupId : undefined;
            resourceInputs["removes"] = state ? state.removes : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["workRequestDetails"] = state ? state.workRequestDetails : undefined;
        } else {
            const args = argsOrState as OsManagementHubManagedInstanceGroupManageModuleStreamsManagementArgs | undefined;
            if ((!args || args.managedInstanceGroupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'managedInstanceGroupId'");
            }
            resourceInputs["disables"] = args ? args.disables : undefined;
            resourceInputs["enables"] = args ? args.enables : undefined;
            resourceInputs["installs"] = args ? args.installs : undefined;
            resourceInputs["isDryRun"] = args ? args.isDryRun : undefined;
            resourceInputs["managedInstanceGroupId"] = args ? args.managedInstanceGroupId : undefined;
            resourceInputs["removes"] = args ? args.removes : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["workRequestDetails"] = args ? args.workRequestDetails : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OsManagementHubManagedInstanceGroupManageModuleStreamsManagement.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering OsManagementHubManagedInstanceGroupManageModuleStreamsManagement resources.
 */
export interface OsManagementHubManagedInstanceGroupManageModuleStreamsManagementState {
    disables?: pulumi.Input<pulumi.Input<inputs.OsManagementHubManagedInstanceGroupManageModuleStreamsManagementDisable>[]>;
    enables?: pulumi.Input<pulumi.Input<inputs.OsManagementHubManagedInstanceGroupManageModuleStreamsManagementEnable>[]>;
    installs?: pulumi.Input<pulumi.Input<inputs.OsManagementHubManagedInstanceGroupManageModuleStreamsManagementInstall>[]>;
    isDryRun?: pulumi.Input<boolean>;
    managedInstanceGroupId?: pulumi.Input<string>;
    removes?: pulumi.Input<pulumi.Input<inputs.OsManagementHubManagedInstanceGroupManageModuleStreamsManagementRemove>[]>;
    timeouts?: pulumi.Input<inputs.OsManagementHubManagedInstanceGroupManageModuleStreamsManagementTimeouts>;
    workRequestDetails?: pulumi.Input<inputs.OsManagementHubManagedInstanceGroupManageModuleStreamsManagementWorkRequestDetails>;
}

/**
 * The set of arguments for constructing a OsManagementHubManagedInstanceGroupManageModuleStreamsManagement resource.
 */
export interface OsManagementHubManagedInstanceGroupManageModuleStreamsManagementArgs {
    disables?: pulumi.Input<pulumi.Input<inputs.OsManagementHubManagedInstanceGroupManageModuleStreamsManagementDisable>[]>;
    enables?: pulumi.Input<pulumi.Input<inputs.OsManagementHubManagedInstanceGroupManageModuleStreamsManagementEnable>[]>;
    installs?: pulumi.Input<pulumi.Input<inputs.OsManagementHubManagedInstanceGroupManageModuleStreamsManagementInstall>[]>;
    isDryRun?: pulumi.Input<boolean>;
    managedInstanceGroupId: pulumi.Input<string>;
    removes?: pulumi.Input<pulumi.Input<inputs.OsManagementHubManagedInstanceGroupManageModuleStreamsManagementRemove>[]>;
    timeouts?: pulumi.Input<inputs.OsManagementHubManagedInstanceGroupManageModuleStreamsManagementTimeouts>;
    workRequestDetails?: pulumi.Input<inputs.OsManagementHubManagedInstanceGroupManageModuleStreamsManagementWorkRequestDetails>;
}
