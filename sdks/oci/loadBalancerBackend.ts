// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class LoadBalancerBackend extends pulumi.CustomResource {
    /**
     * Get an existing LoadBalancerBackend resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LoadBalancerBackendState, opts?: pulumi.CustomResourceOptions): LoadBalancerBackend {
        return new LoadBalancerBackend(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/loadBalancerBackend:LoadBalancerBackend';

    /**
     * Returns true if the given object is an instance of LoadBalancerBackend.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LoadBalancerBackend {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LoadBalancerBackend.__pulumiType;
    }

    public readonly backendsetName!: pulumi.Output<string>;
    public readonly backup!: pulumi.Output<boolean | undefined>;
    public readonly drain!: pulumi.Output<boolean>;
    public readonly ipAddress!: pulumi.Output<string>;
    public readonly loadBalancerId!: pulumi.Output<string>;
    public readonly maxConnections!: pulumi.Output<number>;
    public /*out*/ readonly name!: pulumi.Output<string>;
    public readonly offline!: pulumi.Output<boolean>;
    public readonly port!: pulumi.Output<number>;
    public /*out*/ readonly state!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.LoadBalancerBackendTimeouts | undefined>;
    public readonly weight!: pulumi.Output<number>;

    /**
     * Create a LoadBalancerBackend resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LoadBalancerBackendArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LoadBalancerBackendArgs | LoadBalancerBackendState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LoadBalancerBackendState | undefined;
            resourceInputs["backendsetName"] = state ? state.backendsetName : undefined;
            resourceInputs["backup"] = state ? state.backup : undefined;
            resourceInputs["drain"] = state ? state.drain : undefined;
            resourceInputs["ipAddress"] = state ? state.ipAddress : undefined;
            resourceInputs["loadBalancerId"] = state ? state.loadBalancerId : undefined;
            resourceInputs["maxConnections"] = state ? state.maxConnections : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["offline"] = state ? state.offline : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["weight"] = state ? state.weight : undefined;
        } else {
            const args = argsOrState as LoadBalancerBackendArgs | undefined;
            if ((!args || args.backendsetName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'backendsetName'");
            }
            if ((!args || args.ipAddress === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ipAddress'");
            }
            if ((!args || args.loadBalancerId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'loadBalancerId'");
            }
            if ((!args || args.port === undefined) && !opts.urn) {
                throw new Error("Missing required property 'port'");
            }
            resourceInputs["backendsetName"] = args ? args.backendsetName : undefined;
            resourceInputs["backup"] = args ? args.backup : undefined;
            resourceInputs["drain"] = args ? args.drain : undefined;
            resourceInputs["ipAddress"] = args ? args.ipAddress : undefined;
            resourceInputs["loadBalancerId"] = args ? args.loadBalancerId : undefined;
            resourceInputs["maxConnections"] = args ? args.maxConnections : undefined;
            resourceInputs["offline"] = args ? args.offline : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["weight"] = args ? args.weight : undefined;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LoadBalancerBackend.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LoadBalancerBackend resources.
 */
export interface LoadBalancerBackendState {
    backendsetName?: pulumi.Input<string>;
    backup?: pulumi.Input<boolean>;
    drain?: pulumi.Input<boolean>;
    ipAddress?: pulumi.Input<string>;
    loadBalancerId?: pulumi.Input<string>;
    maxConnections?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    offline?: pulumi.Input<boolean>;
    port?: pulumi.Input<number>;
    state?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.LoadBalancerBackendTimeouts>;
    weight?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a LoadBalancerBackend resource.
 */
export interface LoadBalancerBackendArgs {
    backendsetName: pulumi.Input<string>;
    backup?: pulumi.Input<boolean>;
    drain?: pulumi.Input<boolean>;
    ipAddress: pulumi.Input<string>;
    loadBalancerId: pulumi.Input<string>;
    maxConnections?: pulumi.Input<number>;
    offline?: pulumi.Input<boolean>;
    port: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.LoadBalancerBackendTimeouts>;
    weight?: pulumi.Input<number>;
}
