// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DatabaseExternalPluggableDatabase extends pulumi.CustomResource {
    /**
     * Get an existing DatabaseExternalPluggableDatabase resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DatabaseExternalPluggableDatabaseState, opts?: pulumi.CustomResourceOptions): DatabaseExternalPluggableDatabase {
        return new DatabaseExternalPluggableDatabase(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/databaseExternalPluggableDatabase:DatabaseExternalPluggableDatabase';

    /**
     * Returns true if the given object is an instance of DatabaseExternalPluggableDatabase.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DatabaseExternalPluggableDatabase {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DatabaseExternalPluggableDatabase.__pulumiType;
    }

    public /*out*/ readonly characterSet!: pulumi.Output<string>;
    public readonly compartmentId!: pulumi.Output<string>;
    public /*out*/ readonly databaseConfiguration!: pulumi.Output<string>;
    public /*out*/ readonly databaseEdition!: pulumi.Output<string>;
    public /*out*/ readonly databaseManagementConfigs!: pulumi.Output<outputs.DatabaseExternalPluggableDatabaseDatabaseManagementConfig[]>;
    public /*out*/ readonly databaseVersion!: pulumi.Output<string>;
    public /*out*/ readonly dbId!: pulumi.Output<string>;
    public /*out*/ readonly dbPacks!: pulumi.Output<string>;
    public /*out*/ readonly dbUniqueName!: pulumi.Output<string>;
    public readonly definedTags!: pulumi.Output<{[key: string]: string}>;
    public readonly displayName!: pulumi.Output<string>;
    public readonly externalContainerDatabaseId!: pulumi.Output<string>;
    public readonly freeformTags!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly lifecycleDetails!: pulumi.Output<string>;
    public /*out*/ readonly ncharacterSet!: pulumi.Output<string>;
    public /*out*/ readonly operationsInsightsConfigs!: pulumi.Output<outputs.DatabaseExternalPluggableDatabaseOperationsInsightsConfig[]>;
    public readonly sourceId!: pulumi.Output<string>;
    public /*out*/ readonly stackMonitoringConfigs!: pulumi.Output<outputs.DatabaseExternalPluggableDatabaseStackMonitoringConfig[]>;
    public /*out*/ readonly state!: pulumi.Output<string>;
    public /*out*/ readonly timeCreated!: pulumi.Output<string>;
    public /*out*/ readonly timeZone!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.DatabaseExternalPluggableDatabaseTimeouts | undefined>;

    /**
     * Create a DatabaseExternalPluggableDatabase resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatabaseExternalPluggableDatabaseArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DatabaseExternalPluggableDatabaseArgs | DatabaseExternalPluggableDatabaseState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DatabaseExternalPluggableDatabaseState | undefined;
            resourceInputs["characterSet"] = state ? state.characterSet : undefined;
            resourceInputs["compartmentId"] = state ? state.compartmentId : undefined;
            resourceInputs["databaseConfiguration"] = state ? state.databaseConfiguration : undefined;
            resourceInputs["databaseEdition"] = state ? state.databaseEdition : undefined;
            resourceInputs["databaseManagementConfigs"] = state ? state.databaseManagementConfigs : undefined;
            resourceInputs["databaseVersion"] = state ? state.databaseVersion : undefined;
            resourceInputs["dbId"] = state ? state.dbId : undefined;
            resourceInputs["dbPacks"] = state ? state.dbPacks : undefined;
            resourceInputs["dbUniqueName"] = state ? state.dbUniqueName : undefined;
            resourceInputs["definedTags"] = state ? state.definedTags : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["externalContainerDatabaseId"] = state ? state.externalContainerDatabaseId : undefined;
            resourceInputs["freeformTags"] = state ? state.freeformTags : undefined;
            resourceInputs["lifecycleDetails"] = state ? state.lifecycleDetails : undefined;
            resourceInputs["ncharacterSet"] = state ? state.ncharacterSet : undefined;
            resourceInputs["operationsInsightsConfigs"] = state ? state.operationsInsightsConfigs : undefined;
            resourceInputs["sourceId"] = state ? state.sourceId : undefined;
            resourceInputs["stackMonitoringConfigs"] = state ? state.stackMonitoringConfigs : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["timeCreated"] = state ? state.timeCreated : undefined;
            resourceInputs["timeZone"] = state ? state.timeZone : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as DatabaseExternalPluggableDatabaseArgs | undefined;
            if ((!args || args.compartmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'compartmentId'");
            }
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if ((!args || args.externalContainerDatabaseId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'externalContainerDatabaseId'");
            }
            resourceInputs["compartmentId"] = args ? args.compartmentId : undefined;
            resourceInputs["definedTags"] = args ? args.definedTags : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["externalContainerDatabaseId"] = args ? args.externalContainerDatabaseId : undefined;
            resourceInputs["freeformTags"] = args ? args.freeformTags : undefined;
            resourceInputs["sourceId"] = args ? args.sourceId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["characterSet"] = undefined /*out*/;
            resourceInputs["databaseConfiguration"] = undefined /*out*/;
            resourceInputs["databaseEdition"] = undefined /*out*/;
            resourceInputs["databaseManagementConfigs"] = undefined /*out*/;
            resourceInputs["databaseVersion"] = undefined /*out*/;
            resourceInputs["dbId"] = undefined /*out*/;
            resourceInputs["dbPacks"] = undefined /*out*/;
            resourceInputs["dbUniqueName"] = undefined /*out*/;
            resourceInputs["lifecycleDetails"] = undefined /*out*/;
            resourceInputs["ncharacterSet"] = undefined /*out*/;
            resourceInputs["operationsInsightsConfigs"] = undefined /*out*/;
            resourceInputs["stackMonitoringConfigs"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["timeCreated"] = undefined /*out*/;
            resourceInputs["timeZone"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DatabaseExternalPluggableDatabase.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DatabaseExternalPluggableDatabase resources.
 */
export interface DatabaseExternalPluggableDatabaseState {
    characterSet?: pulumi.Input<string>;
    compartmentId?: pulumi.Input<string>;
    databaseConfiguration?: pulumi.Input<string>;
    databaseEdition?: pulumi.Input<string>;
    databaseManagementConfigs?: pulumi.Input<pulumi.Input<inputs.DatabaseExternalPluggableDatabaseDatabaseManagementConfig>[]>;
    databaseVersion?: pulumi.Input<string>;
    dbId?: pulumi.Input<string>;
    dbPacks?: pulumi.Input<string>;
    dbUniqueName?: pulumi.Input<string>;
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    displayName?: pulumi.Input<string>;
    externalContainerDatabaseId?: pulumi.Input<string>;
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    lifecycleDetails?: pulumi.Input<string>;
    ncharacterSet?: pulumi.Input<string>;
    operationsInsightsConfigs?: pulumi.Input<pulumi.Input<inputs.DatabaseExternalPluggableDatabaseOperationsInsightsConfig>[]>;
    sourceId?: pulumi.Input<string>;
    stackMonitoringConfigs?: pulumi.Input<pulumi.Input<inputs.DatabaseExternalPluggableDatabaseStackMonitoringConfig>[]>;
    state?: pulumi.Input<string>;
    timeCreated?: pulumi.Input<string>;
    timeZone?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.DatabaseExternalPluggableDatabaseTimeouts>;
}

/**
 * The set of arguments for constructing a DatabaseExternalPluggableDatabase resource.
 */
export interface DatabaseExternalPluggableDatabaseArgs {
    compartmentId: pulumi.Input<string>;
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    displayName: pulumi.Input<string>;
    externalContainerDatabaseId: pulumi.Input<string>;
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    sourceId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.DatabaseExternalPluggableDatabaseTimeouts>;
}
