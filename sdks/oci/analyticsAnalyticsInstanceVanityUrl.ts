// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class AnalyticsAnalyticsInstanceVanityUrl extends pulumi.CustomResource {
    /**
     * Get an existing AnalyticsAnalyticsInstanceVanityUrl resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AnalyticsAnalyticsInstanceVanityUrlState, opts?: pulumi.CustomResourceOptions): AnalyticsAnalyticsInstanceVanityUrl {
        return new AnalyticsAnalyticsInstanceVanityUrl(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/analyticsAnalyticsInstanceVanityUrl:AnalyticsAnalyticsInstanceVanityUrl';

    /**
     * Returns true if the given object is an instance of AnalyticsAnalyticsInstanceVanityUrl.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AnalyticsAnalyticsInstanceVanityUrl {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AnalyticsAnalyticsInstanceVanityUrl.__pulumiType;
    }

    public readonly analyticsInstanceId!: pulumi.Output<string>;
    public readonly caCertificate!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly hosts!: pulumi.Output<string[]>;
    public readonly passphrase!: pulumi.Output<string | undefined>;
    public readonly privateKey!: pulumi.Output<string>;
    public readonly publicCertificate!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.AnalyticsAnalyticsInstanceVanityUrlTimeouts | undefined>;

    /**
     * Create a AnalyticsAnalyticsInstanceVanityUrl resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AnalyticsAnalyticsInstanceVanityUrlArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AnalyticsAnalyticsInstanceVanityUrlArgs | AnalyticsAnalyticsInstanceVanityUrlState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AnalyticsAnalyticsInstanceVanityUrlState | undefined;
            resourceInputs["analyticsInstanceId"] = state ? state.analyticsInstanceId : undefined;
            resourceInputs["caCertificate"] = state ? state.caCertificate : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["hosts"] = state ? state.hosts : undefined;
            resourceInputs["passphrase"] = state ? state.passphrase : undefined;
            resourceInputs["privateKey"] = state ? state.privateKey : undefined;
            resourceInputs["publicCertificate"] = state ? state.publicCertificate : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as AnalyticsAnalyticsInstanceVanityUrlArgs | undefined;
            if ((!args || args.analyticsInstanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'analyticsInstanceId'");
            }
            if ((!args || args.caCertificate === undefined) && !opts.urn) {
                throw new Error("Missing required property 'caCertificate'");
            }
            if ((!args || args.hosts === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hosts'");
            }
            if ((!args || args.privateKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'privateKey'");
            }
            if ((!args || args.publicCertificate === undefined) && !opts.urn) {
                throw new Error("Missing required property 'publicCertificate'");
            }
            resourceInputs["analyticsInstanceId"] = args ? args.analyticsInstanceId : undefined;
            resourceInputs["caCertificate"] = args ? args.caCertificate : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["hosts"] = args ? args.hosts : undefined;
            resourceInputs["passphrase"] = args?.passphrase ? pulumi.secret(args.passphrase) : undefined;
            resourceInputs["privateKey"] = args?.privateKey ? pulumi.secret(args.privateKey) : undefined;
            resourceInputs["publicCertificate"] = args ? args.publicCertificate : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["passphrase", "privateKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(AnalyticsAnalyticsInstanceVanityUrl.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AnalyticsAnalyticsInstanceVanityUrl resources.
 */
export interface AnalyticsAnalyticsInstanceVanityUrlState {
    analyticsInstanceId?: pulumi.Input<string>;
    caCertificate?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    hosts?: pulumi.Input<pulumi.Input<string>[]>;
    passphrase?: pulumi.Input<string>;
    privateKey?: pulumi.Input<string>;
    publicCertificate?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.AnalyticsAnalyticsInstanceVanityUrlTimeouts>;
}

/**
 * The set of arguments for constructing a AnalyticsAnalyticsInstanceVanityUrl resource.
 */
export interface AnalyticsAnalyticsInstanceVanityUrlArgs {
    analyticsInstanceId: pulumi.Input<string>;
    caCertificate: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    hosts: pulumi.Input<pulumi.Input<string>[]>;
    passphrase?: pulumi.Input<string>;
    privateKey: pulumi.Input<string>;
    publicCertificate: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.AnalyticsAnalyticsInstanceVanityUrlTimeouts>;
}
