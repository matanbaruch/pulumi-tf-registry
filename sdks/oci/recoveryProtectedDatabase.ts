// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class RecoveryProtectedDatabase extends pulumi.CustomResource {
    /**
     * Get an existing RecoveryProtectedDatabase resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RecoveryProtectedDatabaseState, opts?: pulumi.CustomResourceOptions): RecoveryProtectedDatabase {
        return new RecoveryProtectedDatabase(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/recoveryProtectedDatabase:RecoveryProtectedDatabase';

    /**
     * Returns true if the given object is an instance of RecoveryProtectedDatabase.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RecoveryProtectedDatabase {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RecoveryProtectedDatabase.__pulumiType;
    }

    public readonly compartmentId!: pulumi.Output<string>;
    public readonly databaseId!: pulumi.Output<string>;
    public readonly databaseSize!: pulumi.Output<string>;
    public readonly dbUniqueName!: pulumi.Output<string>;
    public readonly definedTags!: pulumi.Output<{[key: string]: string}>;
    public readonly deletionSchedule!: pulumi.Output<string>;
    public readonly displayName!: pulumi.Output<string>;
    public readonly freeformTags!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly health!: pulumi.Output<string>;
    public /*out*/ readonly healthDetails!: pulumi.Output<string>;
    public /*out*/ readonly isReadOnlyResource!: pulumi.Output<boolean>;
    public readonly isRedoLogsShipped!: pulumi.Output<boolean>;
    public /*out*/ readonly lifecycleDetails!: pulumi.Output<string>;
    public /*out*/ readonly metrics!: pulumi.Output<outputs.RecoveryProtectedDatabaseMetric[]>;
    public readonly password!: pulumi.Output<string>;
    public /*out*/ readonly policyLockedDateTime!: pulumi.Output<string>;
    public readonly protectionPolicyId!: pulumi.Output<string>;
    public readonly recoveryServiceSubnets!: pulumi.Output<outputs.RecoveryProtectedDatabaseRecoveryServiceSubnet[]>;
    public /*out*/ readonly state!: pulumi.Output<string>;
    public readonly subscriptionId!: pulumi.Output<string>;
    public /*out*/ readonly systemTags!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly timeCreated!: pulumi.Output<string>;
    public /*out*/ readonly timeUpdated!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.RecoveryProtectedDatabaseTimeouts | undefined>;
    public /*out*/ readonly vpcUserName!: pulumi.Output<string>;

    /**
     * Create a RecoveryProtectedDatabase resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RecoveryProtectedDatabaseArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RecoveryProtectedDatabaseArgs | RecoveryProtectedDatabaseState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RecoveryProtectedDatabaseState | undefined;
            resourceInputs["compartmentId"] = state ? state.compartmentId : undefined;
            resourceInputs["databaseId"] = state ? state.databaseId : undefined;
            resourceInputs["databaseSize"] = state ? state.databaseSize : undefined;
            resourceInputs["dbUniqueName"] = state ? state.dbUniqueName : undefined;
            resourceInputs["definedTags"] = state ? state.definedTags : undefined;
            resourceInputs["deletionSchedule"] = state ? state.deletionSchedule : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["freeformTags"] = state ? state.freeformTags : undefined;
            resourceInputs["health"] = state ? state.health : undefined;
            resourceInputs["healthDetails"] = state ? state.healthDetails : undefined;
            resourceInputs["isReadOnlyResource"] = state ? state.isReadOnlyResource : undefined;
            resourceInputs["isRedoLogsShipped"] = state ? state.isRedoLogsShipped : undefined;
            resourceInputs["lifecycleDetails"] = state ? state.lifecycleDetails : undefined;
            resourceInputs["metrics"] = state ? state.metrics : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["policyLockedDateTime"] = state ? state.policyLockedDateTime : undefined;
            resourceInputs["protectionPolicyId"] = state ? state.protectionPolicyId : undefined;
            resourceInputs["recoveryServiceSubnets"] = state ? state.recoveryServiceSubnets : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["subscriptionId"] = state ? state.subscriptionId : undefined;
            resourceInputs["systemTags"] = state ? state.systemTags : undefined;
            resourceInputs["timeCreated"] = state ? state.timeCreated : undefined;
            resourceInputs["timeUpdated"] = state ? state.timeUpdated : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["vpcUserName"] = state ? state.vpcUserName : undefined;
        } else {
            const args = argsOrState as RecoveryProtectedDatabaseArgs | undefined;
            if ((!args || args.compartmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'compartmentId'");
            }
            if ((!args || args.dbUniqueName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dbUniqueName'");
            }
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if ((!args || args.password === undefined) && !opts.urn) {
                throw new Error("Missing required property 'password'");
            }
            if ((!args || args.protectionPolicyId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'protectionPolicyId'");
            }
            if ((!args || args.recoveryServiceSubnets === undefined) && !opts.urn) {
                throw new Error("Missing required property 'recoveryServiceSubnets'");
            }
            resourceInputs["compartmentId"] = args ? args.compartmentId : undefined;
            resourceInputs["databaseId"] = args ? args.databaseId : undefined;
            resourceInputs["databaseSize"] = args ? args.databaseSize : undefined;
            resourceInputs["dbUniqueName"] = args ? args.dbUniqueName : undefined;
            resourceInputs["definedTags"] = args ? args.definedTags : undefined;
            resourceInputs["deletionSchedule"] = args ? args.deletionSchedule : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["freeformTags"] = args ? args.freeformTags : undefined;
            resourceInputs["isRedoLogsShipped"] = args ? args.isRedoLogsShipped : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["protectionPolicyId"] = args ? args.protectionPolicyId : undefined;
            resourceInputs["recoveryServiceSubnets"] = args ? args.recoveryServiceSubnets : undefined;
            resourceInputs["subscriptionId"] = args ? args.subscriptionId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["health"] = undefined /*out*/;
            resourceInputs["healthDetails"] = undefined /*out*/;
            resourceInputs["isReadOnlyResource"] = undefined /*out*/;
            resourceInputs["lifecycleDetails"] = undefined /*out*/;
            resourceInputs["metrics"] = undefined /*out*/;
            resourceInputs["policyLockedDateTime"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["systemTags"] = undefined /*out*/;
            resourceInputs["timeCreated"] = undefined /*out*/;
            resourceInputs["timeUpdated"] = undefined /*out*/;
            resourceInputs["vpcUserName"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(RecoveryProtectedDatabase.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering RecoveryProtectedDatabase resources.
 */
export interface RecoveryProtectedDatabaseState {
    compartmentId?: pulumi.Input<string>;
    databaseId?: pulumi.Input<string>;
    databaseSize?: pulumi.Input<string>;
    dbUniqueName?: pulumi.Input<string>;
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    deletionSchedule?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    health?: pulumi.Input<string>;
    healthDetails?: pulumi.Input<string>;
    isReadOnlyResource?: pulumi.Input<boolean>;
    isRedoLogsShipped?: pulumi.Input<boolean>;
    lifecycleDetails?: pulumi.Input<string>;
    metrics?: pulumi.Input<pulumi.Input<inputs.RecoveryProtectedDatabaseMetric>[]>;
    password?: pulumi.Input<string>;
    policyLockedDateTime?: pulumi.Input<string>;
    protectionPolicyId?: pulumi.Input<string>;
    recoveryServiceSubnets?: pulumi.Input<pulumi.Input<inputs.RecoveryProtectedDatabaseRecoveryServiceSubnet>[]>;
    state?: pulumi.Input<string>;
    subscriptionId?: pulumi.Input<string>;
    systemTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeCreated?: pulumi.Input<string>;
    timeUpdated?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.RecoveryProtectedDatabaseTimeouts>;
    vpcUserName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RecoveryProtectedDatabase resource.
 */
export interface RecoveryProtectedDatabaseArgs {
    compartmentId: pulumi.Input<string>;
    databaseId?: pulumi.Input<string>;
    databaseSize?: pulumi.Input<string>;
    dbUniqueName: pulumi.Input<string>;
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    deletionSchedule?: pulumi.Input<string>;
    displayName: pulumi.Input<string>;
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    isRedoLogsShipped?: pulumi.Input<boolean>;
    password: pulumi.Input<string>;
    protectionPolicyId: pulumi.Input<string>;
    recoveryServiceSubnets: pulumi.Input<pulumi.Input<inputs.RecoveryProtectedDatabaseRecoveryServiceSubnet>[]>;
    subscriptionId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.RecoveryProtectedDatabaseTimeouts>;
}
