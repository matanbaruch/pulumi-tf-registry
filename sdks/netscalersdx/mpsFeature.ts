// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class MpsFeature extends pulumi.CustomResource {
    /**
     * Get an existing MpsFeature resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MpsFeatureState, opts?: pulumi.CustomResourceOptions): MpsFeature {
        return new MpsFeature(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'netscalersdx:index/mpsFeature:MpsFeature';

    /**
     * Returns true if the given object is an instance of MpsFeature.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MpsFeature {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MpsFeature.__pulumiType;
    }

    /**
     * This is Admin controllable. 0: Disable UI and Backend, 1: Disable UI and enable Backend, 2: Enable UI and disable
     * Backend, 3: Enable UI and Backend.. Maximum value =
     */
    public readonly adminToggle!: pulumi.Output<number | undefined>;
    /**
     * This is Ops controllable and will not be visible to the Admin to control. If true: Ops controllable feature, false:
     * Admin controllable feature..
     */
    public readonly builtIn!: pulumi.Output<boolean | undefined>;
    /**
     * Feature Description..
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Feature Name.
     */
    public readonly featureName!: pulumi.Output<string>;
    /**
     * This is Ops controllable. 0: Disable UI and Backend, 1: Disable UI and enable Backend, 2: Enable UI and disable Backend,
     * 3: Enable UI and Backend. Ops controlled takes higher precedence than Admin Controlled.. Maximum value =
     */
    public readonly opsToggle!: pulumi.Output<number | undefined>;

    /**
     * Create a MpsFeature resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MpsFeatureArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MpsFeatureArgs | MpsFeatureState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MpsFeatureState | undefined;
            resourceInputs["adminToggle"] = state ? state.adminToggle : undefined;
            resourceInputs["builtIn"] = state ? state.builtIn : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["featureName"] = state ? state.featureName : undefined;
            resourceInputs["opsToggle"] = state ? state.opsToggle : undefined;
        } else {
            const args = argsOrState as MpsFeatureArgs | undefined;
            if ((!args || args.featureName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'featureName'");
            }
            resourceInputs["adminToggle"] = args ? args.adminToggle : undefined;
            resourceInputs["builtIn"] = args ? args.builtIn : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["featureName"] = args ? args.featureName : undefined;
            resourceInputs["opsToggle"] = args ? args.opsToggle : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MpsFeature.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering MpsFeature resources.
 */
export interface MpsFeatureState {
    /**
     * This is Admin controllable. 0: Disable UI and Backend, 1: Disable UI and enable Backend, 2: Enable UI and disable
     * Backend, 3: Enable UI and Backend.. Maximum value =
     */
    adminToggle?: pulumi.Input<number>;
    /**
     * This is Ops controllable and will not be visible to the Admin to control. If true: Ops controllable feature, false:
     * Admin controllable feature..
     */
    builtIn?: pulumi.Input<boolean>;
    /**
     * Feature Description..
     */
    description?: pulumi.Input<string>;
    /**
     * Feature Name.
     */
    featureName?: pulumi.Input<string>;
    /**
     * This is Ops controllable. 0: Disable UI and Backend, 1: Disable UI and enable Backend, 2: Enable UI and disable Backend,
     * 3: Enable UI and Backend. Ops controlled takes higher precedence than Admin Controlled.. Maximum value =
     */
    opsToggle?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a MpsFeature resource.
 */
export interface MpsFeatureArgs {
    /**
     * This is Admin controllable. 0: Disable UI and Backend, 1: Disable UI and enable Backend, 2: Enable UI and disable
     * Backend, 3: Enable UI and Backend.. Maximum value =
     */
    adminToggle?: pulumi.Input<number>;
    /**
     * This is Ops controllable and will not be visible to the Admin to control. If true: Ops controllable feature, false:
     * Admin controllable feature..
     */
    builtIn?: pulumi.Input<boolean>;
    /**
     * Feature Description..
     */
    description?: pulumi.Input<string>;
    /**
     * Feature Name.
     */
    featureName: pulumi.Input<string>;
    /**
     * This is Ops controllable. 0: Disable UI and Backend, 1: Disable UI and enable Backend, 2: Enable UI and disable Backend,
     * 3: Enable UI and Backend. Ops controlled takes higher precedence than Admin Controlled.. Maximum value =
     */
    opsToggle?: pulumi.Input<number>;
}
