// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SnmpAlarmConfig extends pulumi.CustomResource {
    /**
     * Get an existing SnmpAlarmConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SnmpAlarmConfigState, opts?: pulumi.CustomResourceOptions): SnmpAlarmConfig {
        return new SnmpAlarmConfig(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'netscalersdx:index/snmpAlarmConfig:SnmpAlarmConfig';

    /**
     * Returns true if the given object is an instance of SnmpAlarmConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SnmpAlarmConfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SnmpAlarmConfig.__pulumiType;
    }

    /**
     * Enable Alarm.
     */
    public readonly enable!: pulumi.Output<boolean | undefined>;
    /**
     * Alarm Name. Maximum length = 128
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Alarm severity. Supported values: Critical, Major, Minor, Warning, Informational . Maximum length = 128
     */
    public readonly severity!: pulumi.Output<string | undefined>;
    /**
     * Threshold Value for the alarm.
     */
    public readonly threshold!: pulumi.Output<number | undefined>;
    /**
     * Frequency of the alarm in minutes.
     */
    public readonly time!: pulumi.Output<number | undefined>;

    /**
     * Create a SnmpAlarmConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SnmpAlarmConfigArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SnmpAlarmConfigArgs | SnmpAlarmConfigState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SnmpAlarmConfigState | undefined;
            resourceInputs["enable"] = state ? state.enable : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["severity"] = state ? state.severity : undefined;
            resourceInputs["threshold"] = state ? state.threshold : undefined;
            resourceInputs["time"] = state ? state.time : undefined;
        } else {
            const args = argsOrState as SnmpAlarmConfigArgs | undefined;
            resourceInputs["enable"] = args ? args.enable : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["severity"] = args ? args.severity : undefined;
            resourceInputs["threshold"] = args ? args.threshold : undefined;
            resourceInputs["time"] = args ? args.time : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SnmpAlarmConfig.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SnmpAlarmConfig resources.
 */
export interface SnmpAlarmConfigState {
    /**
     * Enable Alarm.
     */
    enable?: pulumi.Input<boolean>;
    /**
     * Alarm Name. Maximum length = 128
     */
    name?: pulumi.Input<string>;
    /**
     * Alarm severity. Supported values: Critical, Major, Minor, Warning, Informational . Maximum length = 128
     */
    severity?: pulumi.Input<string>;
    /**
     * Threshold Value for the alarm.
     */
    threshold?: pulumi.Input<number>;
    /**
     * Frequency of the alarm in minutes.
     */
    time?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a SnmpAlarmConfig resource.
 */
export interface SnmpAlarmConfigArgs {
    /**
     * Enable Alarm.
     */
    enable?: pulumi.Input<boolean>;
    /**
     * Alarm Name. Maximum length = 128
     */
    name?: pulumi.Input<string>;
    /**
     * Alarm severity. Supported values: Critical, Major, Minor, Warning, Informational . Maximum length = 128
     */
    severity?: pulumi.Input<string>;
    /**
     * Threshold Value for the alarm.
     */
    threshold?: pulumi.Input<number>;
    /**
     * Frequency of the alarm in minutes.
     */
    time?: pulumi.Input<number>;
}
