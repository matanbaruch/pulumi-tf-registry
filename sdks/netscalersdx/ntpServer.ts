// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class NtpServer extends pulumi.CustomResource {
    /**
     * Get an existing NtpServer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NtpServerState, opts?: pulumi.CustomResourceOptions): NtpServer {
        return new NtpServer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'netscalersdx:index/ntpServer:NtpServer';

    /**
     * Returns true if the given object is an instance of NtpServer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NtpServer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NtpServer.__pulumiType;
    }

    /**
     * Autokey Public Key Authentication.
     */
    public readonly autokey!: pulumi.Output<boolean | undefined>;
    /**
     * Sender of request, whether from Setup Wizard or direct NTP configuration.
     */
    public readonly client!: pulumi.Output<string | undefined>;
    /**
     * Key Identifier for Symmetric Key Authentication.
     */
    public readonly keyId!: pulumi.Output<number | undefined>;
    /**
     * Maximum Poll Interval.
     */
    public readonly maxpoll!: pulumi.Output<number | undefined>;
    /**
     * Minimum Poll Interval.
     */
    public readonly minpoll!: pulumi.Output<number | undefined>;
    /**
     * NTP Server Preferred.
     */
    public readonly preferredServer!: pulumi.Output<boolean | undefined>;
    /**
     * NTP Time Server Address.
     */
    public readonly server!: pulumi.Output<string>;

    /**
     * Create a NtpServer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NtpServerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NtpServerArgs | NtpServerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NtpServerState | undefined;
            resourceInputs["autokey"] = state ? state.autokey : undefined;
            resourceInputs["client"] = state ? state.client : undefined;
            resourceInputs["keyId"] = state ? state.keyId : undefined;
            resourceInputs["maxpoll"] = state ? state.maxpoll : undefined;
            resourceInputs["minpoll"] = state ? state.minpoll : undefined;
            resourceInputs["preferredServer"] = state ? state.preferredServer : undefined;
            resourceInputs["server"] = state ? state.server : undefined;
        } else {
            const args = argsOrState as NtpServerArgs | undefined;
            if ((!args || args.server === undefined) && !opts.urn) {
                throw new Error("Missing required property 'server'");
            }
            resourceInputs["autokey"] = args ? args.autokey : undefined;
            resourceInputs["client"] = args ? args.client : undefined;
            resourceInputs["keyId"] = args ? args.keyId : undefined;
            resourceInputs["maxpoll"] = args ? args.maxpoll : undefined;
            resourceInputs["minpoll"] = args ? args.minpoll : undefined;
            resourceInputs["preferredServer"] = args ? args.preferredServer : undefined;
            resourceInputs["server"] = args ? args.server : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NtpServer.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering NtpServer resources.
 */
export interface NtpServerState {
    /**
     * Autokey Public Key Authentication.
     */
    autokey?: pulumi.Input<boolean>;
    /**
     * Sender of request, whether from Setup Wizard or direct NTP configuration.
     */
    client?: pulumi.Input<string>;
    /**
     * Key Identifier for Symmetric Key Authentication.
     */
    keyId?: pulumi.Input<number>;
    /**
     * Maximum Poll Interval.
     */
    maxpoll?: pulumi.Input<number>;
    /**
     * Minimum Poll Interval.
     */
    minpoll?: pulumi.Input<number>;
    /**
     * NTP Server Preferred.
     */
    preferredServer?: pulumi.Input<boolean>;
    /**
     * NTP Time Server Address.
     */
    server?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NtpServer resource.
 */
export interface NtpServerArgs {
    /**
     * Autokey Public Key Authentication.
     */
    autokey?: pulumi.Input<boolean>;
    /**
     * Sender of request, whether from Setup Wizard or direct NTP configuration.
     */
    client?: pulumi.Input<string>;
    /**
     * Key Identifier for Symmetric Key Authentication.
     */
    keyId?: pulumi.Input<number>;
    /**
     * Maximum Poll Interval.
     */
    maxpoll?: pulumi.Input<number>;
    /**
     * Minimum Poll Interval.
     */
    minpoll?: pulumi.Input<number>;
    /**
     * NTP Server Preferred.
     */
    preferredServer?: pulumi.Input<boolean>;
    /**
     * NTP Time Server Address.
     */
    server: pulumi.Input<string>;
}
