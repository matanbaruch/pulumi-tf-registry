// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AaaServerArgs, AaaServerState } from "./aaaServer";
export type AaaServer = import("./aaaServer").AaaServer;
export const AaaServer: typeof import("./aaaServer").AaaServer = null as any;
utilities.lazyLoad(exports, ["AaaServer"], () => require("./aaaServer"));

export { AclruleArgs, AclruleState } from "./aclrule";
export type Aclrule = import("./aclrule").Aclrule;
export const Aclrule: typeof import("./aclrule").Aclrule = null as any;
utilities.lazyLoad(exports, ["Aclrule"], () => require("./aclrule"));

export { BlxDeviceProfileArgs, BlxDeviceProfileState } from "./blxDeviceProfile";
export type BlxDeviceProfile = import("./blxDeviceProfile").BlxDeviceProfile;
export const BlxDeviceProfile: typeof import("./blxDeviceProfile").BlxDeviceProfile = null as any;
utilities.lazyLoad(exports, ["BlxDeviceProfile"], () => require("./blxDeviceProfile"));

export { CipherConfigArgs, CipherConfigState } from "./cipherConfig";
export type CipherConfig = import("./cipherConfig").CipherConfig;
export const CipherConfig: typeof import("./cipherConfig").CipherConfig = null as any;
utilities.lazyLoad(exports, ["CipherConfig"], () => require("./cipherConfig"));

export { CipherGroupArgs, CipherGroupState } from "./cipherGroup";
export type CipherGroup = import("./cipherGroup").CipherGroup;
export const CipherGroup: typeof import("./cipherGroup").CipherGroup = null as any;
utilities.lazyLoad(exports, ["CipherGroup"], () => require("./cipherGroup"));

export { CurrentTimezoneArgs, CurrentTimezoneState } from "./currentTimezone";
export type CurrentTimezone = import("./currentTimezone").CurrentTimezone;
export const CurrentTimezone: typeof import("./currentTimezone").CurrentTimezone = null as any;
utilities.lazyLoad(exports, ["CurrentTimezone"], () => require("./currentTimezone"));

export { DeviceGroupArgs, DeviceGroupState } from "./deviceGroup";
export type DeviceGroup = import("./deviceGroup").DeviceGroup;
export const DeviceGroup: typeof import("./deviceGroup").DeviceGroup = null as any;
utilities.lazyLoad(exports, ["DeviceGroup"], () => require("./deviceGroup"));

export { DeviceProfileArgs, DeviceProfileState } from "./deviceProfile";
export type DeviceProfile = import("./deviceProfile").DeviceProfile;
export const DeviceProfile: typeof import("./deviceProfile").DeviceProfile = null as any;
utilities.lazyLoad(exports, ["DeviceProfile"], () => require("./deviceProfile"));

export { GetVpxArgs, GetVpxResult, GetVpxOutputArgs } from "./getVpx";
export const getVpx: typeof import("./getVpx").getVpx = null as any;
export const getVpxOutput: typeof import("./getVpx").getVpxOutput = null as any;
utilities.lazyLoad(exports, ["getVpx","getVpxOutput"], () => require("./getVpx"));

export { LdapServerArgs, LdapServerState } from "./ldapServer";
export type LdapServer = import("./ldapServer").LdapServer;
export const LdapServer: typeof import("./ldapServer").LdapServer = null as any;
utilities.lazyLoad(exports, ["LdapServer"], () => require("./ldapServer"));

export { MpsArgs, MpsState } from "./mps";
export type Mps = import("./mps").Mps;
export const Mps: typeof import("./mps").Mps = null as any;
utilities.lazyLoad(exports, ["Mps"], () => require("./mps"));

export { MpsFeatureArgs, MpsFeatureState } from "./mpsFeature";
export type MpsFeature = import("./mpsFeature").MpsFeature;
export const MpsFeature: typeof import("./mpsFeature").MpsFeature = null as any;
utilities.lazyLoad(exports, ["MpsFeature"], () => require("./mpsFeature"));

export { MpsgroupArgs, MpsgroupState } from "./mpsgroup";
export type Mpsgroup = import("./mpsgroup").Mpsgroup;
export const Mpsgroup: typeof import("./mpsgroup").Mpsgroup = null as any;
utilities.lazyLoad(exports, ["Mpsgroup"], () => require("./mpsgroup"));

export { MpsuserArgs, MpsuserState } from "./mpsuser";
export type Mpsuser = import("./mpsuser").Mpsuser;
export const Mpsuser: typeof import("./mpsuser").Mpsuser = null as any;
utilities.lazyLoad(exports, ["Mpsuser"], () => require("./mpsuser"));

export { NsDeviceProfileArgs, NsDeviceProfileState } from "./nsDeviceProfile";
export type NsDeviceProfile = import("./nsDeviceProfile").NsDeviceProfile;
export const NsDeviceProfile: typeof import("./nsDeviceProfile").NsDeviceProfile = null as any;
utilities.lazyLoad(exports, ["NsDeviceProfile"], () => require("./nsDeviceProfile"));

export { NsSaveConfigArgs, NsSaveConfigState } from "./nsSaveConfig";
export type NsSaveConfig = import("./nsSaveConfig").NsSaveConfig;
export const NsSaveConfig: typeof import("./nsSaveConfig").NsSaveConfig = null as any;
utilities.lazyLoad(exports, ["NsSaveConfig"], () => require("./nsSaveConfig"));

export { NtpParamArgs, NtpParamState } from "./ntpParam";
export type NtpParam = import("./ntpParam").NtpParam;
export const NtpParam: typeof import("./ntpParam").NtpParam = null as any;
utilities.lazyLoad(exports, ["NtpParam"], () => require("./ntpParam"));

export { NtpServerArgs, NtpServerState } from "./ntpServer";
export type NtpServer = import("./ntpServer").NtpServer;
export const NtpServer: typeof import("./ntpServer").NtpServer = null as any;
utilities.lazyLoad(exports, ["NtpServer"], () => require("./ntpServer"));

export { NtpSyncArgs, NtpSyncState } from "./ntpSync";
export type NtpSync = import("./ntpSync").NtpSync;
export const NtpSync: typeof import("./ntpSync").NtpSync = null as any;
utilities.lazyLoad(exports, ["NtpSync"], () => require("./ntpSync"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { ProvisionVpxArgs, ProvisionVpxState } from "./provisionVpx";
export type ProvisionVpx = import("./provisionVpx").ProvisionVpx;
export const ProvisionVpx: typeof import("./provisionVpx").ProvisionVpx = null as any;
utilities.lazyLoad(exports, ["ProvisionVpx"], () => require("./provisionVpx"));

export { RadiusServerArgs, RadiusServerState } from "./radiusServer";
export type RadiusServer = import("./radiusServer").RadiusServer;
export const RadiusServer: typeof import("./radiusServer").RadiusServer = null as any;
utilities.lazyLoad(exports, ["RadiusServer"], () => require("./radiusServer"));

export { SmtpServerArgs, SmtpServerState } from "./smtpServer";
export type SmtpServer = import("./smtpServer").SmtpServer;
export const SmtpServer: typeof import("./smtpServer").SmtpServer = null as any;
utilities.lazyLoad(exports, ["SmtpServer"], () => require("./smtpServer"));

export { SnmpAlarmConfigArgs, SnmpAlarmConfigState } from "./snmpAlarmConfig";
export type SnmpAlarmConfig = import("./snmpAlarmConfig").SnmpAlarmConfig;
export const SnmpAlarmConfig: typeof import("./snmpAlarmConfig").SnmpAlarmConfig = null as any;
utilities.lazyLoad(exports, ["SnmpAlarmConfig"], () => require("./snmpAlarmConfig"));

export { SnmpManagerArgs, SnmpManagerState } from "./snmpManager";
export type SnmpManager = import("./snmpManager").SnmpManager;
export const SnmpManager: typeof import("./snmpManager").SnmpManager = null as any;
utilities.lazyLoad(exports, ["SnmpManager"], () => require("./snmpManager"));

export { SnmpMibArgs, SnmpMibState } from "./snmpMib";
export type SnmpMib = import("./snmpMib").SnmpMib;
export const SnmpMib: typeof import("./snmpMib").SnmpMib = null as any;
utilities.lazyLoad(exports, ["SnmpMib"], () => require("./snmpMib"));

export { SnmpTrapArgs, SnmpTrapState } from "./snmpTrap";
export type SnmpTrap = import("./snmpTrap").SnmpTrap;
export const SnmpTrap: typeof import("./snmpTrap").SnmpTrap = null as any;
utilities.lazyLoad(exports, ["SnmpTrap"], () => require("./snmpTrap"));

export { SnmpUserArgs, SnmpUserState } from "./snmpUser";
export type SnmpUser = import("./snmpUser").SnmpUser;
export const SnmpUser: typeof import("./snmpUser").SnmpUser = null as any;
utilities.lazyLoad(exports, ["SnmpUser"], () => require("./snmpUser"));

export { SnmpViewArgs, SnmpViewState } from "./snmpView";
export type SnmpView = import("./snmpView").SnmpView;
export const SnmpView: typeof import("./snmpView").SnmpView = null as any;
utilities.lazyLoad(exports, ["SnmpView"], () => require("./snmpView"));

export { SslSettingsArgs, SslSettingsState } from "./sslSettings";
export type SslSettings = import("./sslSettings").SslSettings;
export const SslSettings: typeof import("./sslSettings").SslSettings = null as any;
utilities.lazyLoad(exports, ["SslSettings"], () => require("./sslSettings"));

export { StaticRouteArgs, StaticRouteState } from "./staticRoute";
export type StaticRoute = import("./staticRoute").StaticRoute;
export const StaticRoute: typeof import("./staticRoute").StaticRoute = null as any;
utilities.lazyLoad(exports, ["StaticRoute"], () => require("./staticRoute"));

export { SyslogParamsArgs, SyslogParamsState } from "./syslogParams";
export type SyslogParams = import("./syslogParams").SyslogParams;
export const SyslogParams: typeof import("./syslogParams").SyslogParams = null as any;
utilities.lazyLoad(exports, ["SyslogParams"], () => require("./syslogParams"));

export { SyslogServerArgs, SyslogServerState } from "./syslogServer";
export type SyslogServer = import("./syslogServer").SyslogServer;
export const SyslogServer: typeof import("./syslogServer").SyslogServer = null as any;
utilities.lazyLoad(exports, ["SyslogServer"], () => require("./syslogServer"));

export { SystemSettingsArgs, SystemSettingsState } from "./systemSettings";
export type SystemSettings = import("./systemSettings").SystemSettings;
export const SystemSettings: typeof import("./systemSettings").SystemSettings = null as any;
utilities.lazyLoad(exports, ["SystemSettings"], () => require("./systemSettings"));

export { TacacsServerArgs, TacacsServerState } from "./tacacsServer";
export type TacacsServer = import("./tacacsServer").TacacsServer;
export const TacacsServer: typeof import("./tacacsServer").TacacsServer = null as any;
utilities.lazyLoad(exports, ["TacacsServer"], () => require("./tacacsServer"));

export { VpxStateArgs, VpxStateState } from "./vpxState";
export type VpxState = import("./vpxState").VpxState;
export const VpxState: typeof import("./vpxState").VpxState = null as any;
utilities.lazyLoad(exports, ["VpxState"], () => require("./vpxState"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "netscalersdx:index/aaaServer:AaaServer":
                return new AaaServer(name, <any>undefined, { urn })
            case "netscalersdx:index/aclrule:Aclrule":
                return new Aclrule(name, <any>undefined, { urn })
            case "netscalersdx:index/blxDeviceProfile:BlxDeviceProfile":
                return new BlxDeviceProfile(name, <any>undefined, { urn })
            case "netscalersdx:index/cipherConfig:CipherConfig":
                return new CipherConfig(name, <any>undefined, { urn })
            case "netscalersdx:index/cipherGroup:CipherGroup":
                return new CipherGroup(name, <any>undefined, { urn })
            case "netscalersdx:index/currentTimezone:CurrentTimezone":
                return new CurrentTimezone(name, <any>undefined, { urn })
            case "netscalersdx:index/deviceGroup:DeviceGroup":
                return new DeviceGroup(name, <any>undefined, { urn })
            case "netscalersdx:index/deviceProfile:DeviceProfile":
                return new DeviceProfile(name, <any>undefined, { urn })
            case "netscalersdx:index/ldapServer:LdapServer":
                return new LdapServer(name, <any>undefined, { urn })
            case "netscalersdx:index/mps:Mps":
                return new Mps(name, <any>undefined, { urn })
            case "netscalersdx:index/mpsFeature:MpsFeature":
                return new MpsFeature(name, <any>undefined, { urn })
            case "netscalersdx:index/mpsgroup:Mpsgroup":
                return new Mpsgroup(name, <any>undefined, { urn })
            case "netscalersdx:index/mpsuser:Mpsuser":
                return new Mpsuser(name, <any>undefined, { urn })
            case "netscalersdx:index/nsDeviceProfile:NsDeviceProfile":
                return new NsDeviceProfile(name, <any>undefined, { urn })
            case "netscalersdx:index/nsSaveConfig:NsSaveConfig":
                return new NsSaveConfig(name, <any>undefined, { urn })
            case "netscalersdx:index/ntpParam:NtpParam":
                return new NtpParam(name, <any>undefined, { urn })
            case "netscalersdx:index/ntpServer:NtpServer":
                return new NtpServer(name, <any>undefined, { urn })
            case "netscalersdx:index/ntpSync:NtpSync":
                return new NtpSync(name, <any>undefined, { urn })
            case "netscalersdx:index/provisionVpx:ProvisionVpx":
                return new ProvisionVpx(name, <any>undefined, { urn })
            case "netscalersdx:index/radiusServer:RadiusServer":
                return new RadiusServer(name, <any>undefined, { urn })
            case "netscalersdx:index/smtpServer:SmtpServer":
                return new SmtpServer(name, <any>undefined, { urn })
            case "netscalersdx:index/snmpAlarmConfig:SnmpAlarmConfig":
                return new SnmpAlarmConfig(name, <any>undefined, { urn })
            case "netscalersdx:index/snmpManager:SnmpManager":
                return new SnmpManager(name, <any>undefined, { urn })
            case "netscalersdx:index/snmpMib:SnmpMib":
                return new SnmpMib(name, <any>undefined, { urn })
            case "netscalersdx:index/snmpTrap:SnmpTrap":
                return new SnmpTrap(name, <any>undefined, { urn })
            case "netscalersdx:index/snmpUser:SnmpUser":
                return new SnmpUser(name, <any>undefined, { urn })
            case "netscalersdx:index/snmpView:SnmpView":
                return new SnmpView(name, <any>undefined, { urn })
            case "netscalersdx:index/sslSettings:SslSettings":
                return new SslSettings(name, <any>undefined, { urn })
            case "netscalersdx:index/staticRoute:StaticRoute":
                return new StaticRoute(name, <any>undefined, { urn })
            case "netscalersdx:index/syslogParams:SyslogParams":
                return new SyslogParams(name, <any>undefined, { urn })
            case "netscalersdx:index/syslogServer:SyslogServer":
                return new SyslogServer(name, <any>undefined, { urn })
            case "netscalersdx:index/systemSettings:SystemSettings":
                return new SystemSettings(name, <any>undefined, { urn })
            case "netscalersdx:index/tacacsServer:TacacsServer":
                return new TacacsServer(name, <any>undefined, { urn })
            case "netscalersdx:index/vpxState:VpxState":
                return new VpxState(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("netscalersdx", "index/aaaServer", _module)
pulumi.runtime.registerResourceModule("netscalersdx", "index/aclrule", _module)
pulumi.runtime.registerResourceModule("netscalersdx", "index/blxDeviceProfile", _module)
pulumi.runtime.registerResourceModule("netscalersdx", "index/cipherConfig", _module)
pulumi.runtime.registerResourceModule("netscalersdx", "index/cipherGroup", _module)
pulumi.runtime.registerResourceModule("netscalersdx", "index/currentTimezone", _module)
pulumi.runtime.registerResourceModule("netscalersdx", "index/deviceGroup", _module)
pulumi.runtime.registerResourceModule("netscalersdx", "index/deviceProfile", _module)
pulumi.runtime.registerResourceModule("netscalersdx", "index/ldapServer", _module)
pulumi.runtime.registerResourceModule("netscalersdx", "index/mps", _module)
pulumi.runtime.registerResourceModule("netscalersdx", "index/mpsFeature", _module)
pulumi.runtime.registerResourceModule("netscalersdx", "index/mpsgroup", _module)
pulumi.runtime.registerResourceModule("netscalersdx", "index/mpsuser", _module)
pulumi.runtime.registerResourceModule("netscalersdx", "index/nsDeviceProfile", _module)
pulumi.runtime.registerResourceModule("netscalersdx", "index/nsSaveConfig", _module)
pulumi.runtime.registerResourceModule("netscalersdx", "index/ntpParam", _module)
pulumi.runtime.registerResourceModule("netscalersdx", "index/ntpServer", _module)
pulumi.runtime.registerResourceModule("netscalersdx", "index/ntpSync", _module)
pulumi.runtime.registerResourceModule("netscalersdx", "index/provisionVpx", _module)
pulumi.runtime.registerResourceModule("netscalersdx", "index/radiusServer", _module)
pulumi.runtime.registerResourceModule("netscalersdx", "index/smtpServer", _module)
pulumi.runtime.registerResourceModule("netscalersdx", "index/snmpAlarmConfig", _module)
pulumi.runtime.registerResourceModule("netscalersdx", "index/snmpManager", _module)
pulumi.runtime.registerResourceModule("netscalersdx", "index/snmpMib", _module)
pulumi.runtime.registerResourceModule("netscalersdx", "index/snmpTrap", _module)
pulumi.runtime.registerResourceModule("netscalersdx", "index/snmpUser", _module)
pulumi.runtime.registerResourceModule("netscalersdx", "index/snmpView", _module)
pulumi.runtime.registerResourceModule("netscalersdx", "index/sslSettings", _module)
pulumi.runtime.registerResourceModule("netscalersdx", "index/staticRoute", _module)
pulumi.runtime.registerResourceModule("netscalersdx", "index/syslogParams", _module)
pulumi.runtime.registerResourceModule("netscalersdx", "index/syslogServer", _module)
pulumi.runtime.registerResourceModule("netscalersdx", "index/systemSettings", _module)
pulumi.runtime.registerResourceModule("netscalersdx", "index/tacacsServer", _module)
pulumi.runtime.registerResourceModule("netscalersdx", "index/vpxState", _module)
pulumi.runtime.registerResourcePackage("netscalersdx", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:netscalersdx") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
