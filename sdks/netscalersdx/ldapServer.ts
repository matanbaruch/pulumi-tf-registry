// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class LdapServer extends pulumi.CustomResource {
    /**
     * Get an existing LdapServer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LdapServerState, opts?: pulumi.CustomResourceOptions): LdapServer {
        return new LdapServer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'netscalersdx:index/ldapServer:LdapServer';

    /**
     * Returns true if the given object is an instance of LdapServer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LdapServer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LdapServer.__pulumiType;
    }

    /**
     * The maximum number of seconds the system will wait for a response from the LDAP server.
     */
    public readonly authTimeout!: pulumi.Output<number | undefined>;
    /**
     * Set to false for public key Authentication.
     */
    public readonly authentication!: pulumi.Output<boolean | undefined>;
    /**
     * The base or node where the ldapsearch should start. Maximum length = 128
     */
    public readonly baseDn!: pulumi.Output<string | undefined>;
    /**
     * The full distinguished name used to bind to the LDAP server. Maximum length = 128
     */
    public readonly bindDn!: pulumi.Output<string | undefined>;
    /**
     * The password used to bind to the LDAP server. Maximum length = 128
     */
    public readonly bindPasswd!: pulumi.Output<string | undefined>;
    /**
     * Enable change of the user.
     */
    public readonly changePassword!: pulumi.Output<boolean | undefined>;
    /**
     * This is the default group. Maximum length = 64
     */
    public readonly defaultAuthenticationGroup!: pulumi.Output<string | undefined>;
    /**
     * Enable following LDAP referrals received from LDAP server.
     */
    public readonly followReferrals!: pulumi.Output<boolean | undefined>;
    /**
     * The Attribute name for group extraction from the LDAP server. Maximum length = 32
     */
    public readonly groupAttrName!: pulumi.Output<string | undefined>;
    /**
     * Name that uniquely identifies a group in LDAP server. Maximum length = 32
     */
    public readonly groupNameIdentifier!: pulumi.Output<string | undefined>;
    /**
     * LDAP group search attribute. Used to determine to which groups a group belongs. Maximum length = 32
     */
    public readonly groupSearchAttribute!: pulumi.Output<string | undefined>;
    /**
     * String to be combined with the default LDAP group search string to form the search value. Maximum length = 128
     */
    public readonly groupSearchFilter!: pulumi.Output<string | undefined>;
    /**
     * LDAP group search subattribute. Used to determine to which groups a group belongs.. Maximum length = 32
     */
    public readonly groupSearchSubattribute!: pulumi.Output<string | undefined>;
    /**
     * The IP address of the LDAP server.. Minimum length = 1 Maximum length = 64
     */
    public readonly ipAddress!: pulumi.Output<string>;
    /**
     * Host Name on the certificate from LDAP Server. Maximum length = 128
     */
    public readonly ldapHostName!: pulumi.Output<string | undefined>;
    /**
     * The name attribute used by the system to query the external LDAP server. Maximum length = 32
     */
    public readonly loginName!: pulumi.Output<string | undefined>;
    /**
     * Maximum number of ldap referrals to follow.
     */
    public readonly maxLdapReferrals!: pulumi.Output<number | undefined>;
    /**
     * Number of levels at which group extraction is allowed. Maximum value =
     */
    public readonly maxNestingLevel!: pulumi.Output<number | undefined>;
    /**
     * Name of LDAP server. Minimum length = 1 Maximum length = 128
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Enable Nested Group Extraction.
     */
    public readonly nestedGroupExtraction!: pulumi.Output<boolean | undefined>;
    /**
     * The port number on which the LDAP server is running. Maximum value =
     */
    public readonly port!: pulumi.Output<number | undefined>;
    /**
     * The String to be combined with the default LDAP user search string to form the value. Maximum length = 256
     */
    public readonly searchFilter!: pulumi.Output<string | undefined>;
    /**
     * The communication type between the system and the LDAP server.
     */
    public readonly secType!: pulumi.Output<string | undefined>;
    /**
     * SSH public key attribute holds the public keys of the user. Maximum length = 64
     */
    public readonly sshPublicKey!: pulumi.Output<string | undefined>;
    /**
     * The Sub-Attribute name for group extraction from LDAP server. Maximum length = 32
     */
    public readonly subattributeName!: pulumi.Output<string | undefined>;
    /**
     * The type of LDAP server. Minimum length = 2 Maximum length = 64
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * Validate LDAP Server Certificate.
     */
    public readonly validateLdapServerCerts!: pulumi.Output<boolean | undefined>;

    /**
     * Create a LdapServer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LdapServerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LdapServerArgs | LdapServerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LdapServerState | undefined;
            resourceInputs["authTimeout"] = state ? state.authTimeout : undefined;
            resourceInputs["authentication"] = state ? state.authentication : undefined;
            resourceInputs["baseDn"] = state ? state.baseDn : undefined;
            resourceInputs["bindDn"] = state ? state.bindDn : undefined;
            resourceInputs["bindPasswd"] = state ? state.bindPasswd : undefined;
            resourceInputs["changePassword"] = state ? state.changePassword : undefined;
            resourceInputs["defaultAuthenticationGroup"] = state ? state.defaultAuthenticationGroup : undefined;
            resourceInputs["followReferrals"] = state ? state.followReferrals : undefined;
            resourceInputs["groupAttrName"] = state ? state.groupAttrName : undefined;
            resourceInputs["groupNameIdentifier"] = state ? state.groupNameIdentifier : undefined;
            resourceInputs["groupSearchAttribute"] = state ? state.groupSearchAttribute : undefined;
            resourceInputs["groupSearchFilter"] = state ? state.groupSearchFilter : undefined;
            resourceInputs["groupSearchSubattribute"] = state ? state.groupSearchSubattribute : undefined;
            resourceInputs["ipAddress"] = state ? state.ipAddress : undefined;
            resourceInputs["ldapHostName"] = state ? state.ldapHostName : undefined;
            resourceInputs["loginName"] = state ? state.loginName : undefined;
            resourceInputs["maxLdapReferrals"] = state ? state.maxLdapReferrals : undefined;
            resourceInputs["maxNestingLevel"] = state ? state.maxNestingLevel : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nestedGroupExtraction"] = state ? state.nestedGroupExtraction : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["searchFilter"] = state ? state.searchFilter : undefined;
            resourceInputs["secType"] = state ? state.secType : undefined;
            resourceInputs["sshPublicKey"] = state ? state.sshPublicKey : undefined;
            resourceInputs["subattributeName"] = state ? state.subattributeName : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["validateLdapServerCerts"] = state ? state.validateLdapServerCerts : undefined;
        } else {
            const args = argsOrState as LdapServerArgs | undefined;
            if ((!args || args.ipAddress === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ipAddress'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["authTimeout"] = args ? args.authTimeout : undefined;
            resourceInputs["authentication"] = args ? args.authentication : undefined;
            resourceInputs["baseDn"] = args ? args.baseDn : undefined;
            resourceInputs["bindDn"] = args ? args.bindDn : undefined;
            resourceInputs["bindPasswd"] = args ? args.bindPasswd : undefined;
            resourceInputs["changePassword"] = args ? args.changePassword : undefined;
            resourceInputs["defaultAuthenticationGroup"] = args ? args.defaultAuthenticationGroup : undefined;
            resourceInputs["followReferrals"] = args ? args.followReferrals : undefined;
            resourceInputs["groupAttrName"] = args ? args.groupAttrName : undefined;
            resourceInputs["groupNameIdentifier"] = args ? args.groupNameIdentifier : undefined;
            resourceInputs["groupSearchAttribute"] = args ? args.groupSearchAttribute : undefined;
            resourceInputs["groupSearchFilter"] = args ? args.groupSearchFilter : undefined;
            resourceInputs["groupSearchSubattribute"] = args ? args.groupSearchSubattribute : undefined;
            resourceInputs["ipAddress"] = args ? args.ipAddress : undefined;
            resourceInputs["ldapHostName"] = args ? args.ldapHostName : undefined;
            resourceInputs["loginName"] = args ? args.loginName : undefined;
            resourceInputs["maxLdapReferrals"] = args ? args.maxLdapReferrals : undefined;
            resourceInputs["maxNestingLevel"] = args ? args.maxNestingLevel : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nestedGroupExtraction"] = args ? args.nestedGroupExtraction : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["searchFilter"] = args ? args.searchFilter : undefined;
            resourceInputs["secType"] = args ? args.secType : undefined;
            resourceInputs["sshPublicKey"] = args ? args.sshPublicKey : undefined;
            resourceInputs["subattributeName"] = args ? args.subattributeName : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["validateLdapServerCerts"] = args ? args.validateLdapServerCerts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LdapServer.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LdapServer resources.
 */
export interface LdapServerState {
    /**
     * The maximum number of seconds the system will wait for a response from the LDAP server.
     */
    authTimeout?: pulumi.Input<number>;
    /**
     * Set to false for public key Authentication.
     */
    authentication?: pulumi.Input<boolean>;
    /**
     * The base or node where the ldapsearch should start. Maximum length = 128
     */
    baseDn?: pulumi.Input<string>;
    /**
     * The full distinguished name used to bind to the LDAP server. Maximum length = 128
     */
    bindDn?: pulumi.Input<string>;
    /**
     * The password used to bind to the LDAP server. Maximum length = 128
     */
    bindPasswd?: pulumi.Input<string>;
    /**
     * Enable change of the user.
     */
    changePassword?: pulumi.Input<boolean>;
    /**
     * This is the default group. Maximum length = 64
     */
    defaultAuthenticationGroup?: pulumi.Input<string>;
    /**
     * Enable following LDAP referrals received from LDAP server.
     */
    followReferrals?: pulumi.Input<boolean>;
    /**
     * The Attribute name for group extraction from the LDAP server. Maximum length = 32
     */
    groupAttrName?: pulumi.Input<string>;
    /**
     * Name that uniquely identifies a group in LDAP server. Maximum length = 32
     */
    groupNameIdentifier?: pulumi.Input<string>;
    /**
     * LDAP group search attribute. Used to determine to which groups a group belongs. Maximum length = 32
     */
    groupSearchAttribute?: pulumi.Input<string>;
    /**
     * String to be combined with the default LDAP group search string to form the search value. Maximum length = 128
     */
    groupSearchFilter?: pulumi.Input<string>;
    /**
     * LDAP group search subattribute. Used to determine to which groups a group belongs.. Maximum length = 32
     */
    groupSearchSubattribute?: pulumi.Input<string>;
    /**
     * The IP address of the LDAP server.. Minimum length = 1 Maximum length = 64
     */
    ipAddress?: pulumi.Input<string>;
    /**
     * Host Name on the certificate from LDAP Server. Maximum length = 128
     */
    ldapHostName?: pulumi.Input<string>;
    /**
     * The name attribute used by the system to query the external LDAP server. Maximum length = 32
     */
    loginName?: pulumi.Input<string>;
    /**
     * Maximum number of ldap referrals to follow.
     */
    maxLdapReferrals?: pulumi.Input<number>;
    /**
     * Number of levels at which group extraction is allowed. Maximum value =
     */
    maxNestingLevel?: pulumi.Input<number>;
    /**
     * Name of LDAP server. Minimum length = 1 Maximum length = 128
     */
    name?: pulumi.Input<string>;
    /**
     * Enable Nested Group Extraction.
     */
    nestedGroupExtraction?: pulumi.Input<boolean>;
    /**
     * The port number on which the LDAP server is running. Maximum value =
     */
    port?: pulumi.Input<number>;
    /**
     * The String to be combined with the default LDAP user search string to form the value. Maximum length = 256
     */
    searchFilter?: pulumi.Input<string>;
    /**
     * The communication type between the system and the LDAP server.
     */
    secType?: pulumi.Input<string>;
    /**
     * SSH public key attribute holds the public keys of the user. Maximum length = 64
     */
    sshPublicKey?: pulumi.Input<string>;
    /**
     * The Sub-Attribute name for group extraction from LDAP server. Maximum length = 32
     */
    subattributeName?: pulumi.Input<string>;
    /**
     * The type of LDAP server. Minimum length = 2 Maximum length = 64
     */
    type?: pulumi.Input<string>;
    /**
     * Validate LDAP Server Certificate.
     */
    validateLdapServerCerts?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a LdapServer resource.
 */
export interface LdapServerArgs {
    /**
     * The maximum number of seconds the system will wait for a response from the LDAP server.
     */
    authTimeout?: pulumi.Input<number>;
    /**
     * Set to false for public key Authentication.
     */
    authentication?: pulumi.Input<boolean>;
    /**
     * The base or node where the ldapsearch should start. Maximum length = 128
     */
    baseDn?: pulumi.Input<string>;
    /**
     * The full distinguished name used to bind to the LDAP server. Maximum length = 128
     */
    bindDn?: pulumi.Input<string>;
    /**
     * The password used to bind to the LDAP server. Maximum length = 128
     */
    bindPasswd?: pulumi.Input<string>;
    /**
     * Enable change of the user.
     */
    changePassword?: pulumi.Input<boolean>;
    /**
     * This is the default group. Maximum length = 64
     */
    defaultAuthenticationGroup?: pulumi.Input<string>;
    /**
     * Enable following LDAP referrals received from LDAP server.
     */
    followReferrals?: pulumi.Input<boolean>;
    /**
     * The Attribute name for group extraction from the LDAP server. Maximum length = 32
     */
    groupAttrName?: pulumi.Input<string>;
    /**
     * Name that uniquely identifies a group in LDAP server. Maximum length = 32
     */
    groupNameIdentifier?: pulumi.Input<string>;
    /**
     * LDAP group search attribute. Used to determine to which groups a group belongs. Maximum length = 32
     */
    groupSearchAttribute?: pulumi.Input<string>;
    /**
     * String to be combined with the default LDAP group search string to form the search value. Maximum length = 128
     */
    groupSearchFilter?: pulumi.Input<string>;
    /**
     * LDAP group search subattribute. Used to determine to which groups a group belongs.. Maximum length = 32
     */
    groupSearchSubattribute?: pulumi.Input<string>;
    /**
     * The IP address of the LDAP server.. Minimum length = 1 Maximum length = 64
     */
    ipAddress: pulumi.Input<string>;
    /**
     * Host Name on the certificate from LDAP Server. Maximum length = 128
     */
    ldapHostName?: pulumi.Input<string>;
    /**
     * The name attribute used by the system to query the external LDAP server. Maximum length = 32
     */
    loginName?: pulumi.Input<string>;
    /**
     * Maximum number of ldap referrals to follow.
     */
    maxLdapReferrals?: pulumi.Input<number>;
    /**
     * Number of levels at which group extraction is allowed. Maximum value =
     */
    maxNestingLevel?: pulumi.Input<number>;
    /**
     * Name of LDAP server. Minimum length = 1 Maximum length = 128
     */
    name?: pulumi.Input<string>;
    /**
     * Enable Nested Group Extraction.
     */
    nestedGroupExtraction?: pulumi.Input<boolean>;
    /**
     * The port number on which the LDAP server is running. Maximum value =
     */
    port?: pulumi.Input<number>;
    /**
     * The String to be combined with the default LDAP user search string to form the value. Maximum length = 256
     */
    searchFilter?: pulumi.Input<string>;
    /**
     * The communication type between the system and the LDAP server.
     */
    secType?: pulumi.Input<string>;
    /**
     * SSH public key attribute holds the public keys of the user. Maximum length = 64
     */
    sshPublicKey?: pulumi.Input<string>;
    /**
     * The Sub-Attribute name for group extraction from LDAP server. Maximum length = 32
     */
    subattributeName?: pulumi.Input<string>;
    /**
     * The type of LDAP server. Minimum length = 2 Maximum length = 64
     */
    type: pulumi.Input<string>;
    /**
     * Validate LDAP Server Certificate.
     */
    validateLdapServerCerts?: pulumi.Input<boolean>;
}
