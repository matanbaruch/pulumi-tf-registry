// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class AaaServer extends pulumi.CustomResource {
    /**
     * Get an existing AaaServer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AaaServerState, opts?: pulumi.CustomResourceOptions): AaaServer {
        return new AaaServer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'netscalersdx:index/aaaServer:AaaServer';

    /**
     * Returns true if the given object is an instance of AaaServer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AaaServer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AaaServer.__pulumiType;
    }

    /**
     * List of external servers.
     */
    public readonly externalServers!: pulumi.Output<outputs.AaaServerExternalServer[] | undefined>;
    /**
     * Enable local fallback authentication.
     */
    public readonly fallbackLocalAuthentication!: pulumi.Output<boolean | undefined>;
    /**
     * Log external group info.
     */
    public readonly logExtGroupInfo!: pulumi.Output<boolean | undefined>;
    /**
     * Name of primary server name. Minimum length = 1 Maximum length = 128
     */
    public readonly primaryServerName!: pulumi.Output<string | undefined>;
    /**
     * Type of primary server. Supported types 1. LOCAL 2.RADIUS 3.LDAP 4.TACACS 5.KEYSTONE. Minimum length = 1 Maximum length
     * = 32
     */
    public readonly primaryServerType!: pulumi.Output<string>;

    /**
     * Create a AaaServer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AaaServerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AaaServerArgs | AaaServerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AaaServerState | undefined;
            resourceInputs["externalServers"] = state ? state.externalServers : undefined;
            resourceInputs["fallbackLocalAuthentication"] = state ? state.fallbackLocalAuthentication : undefined;
            resourceInputs["logExtGroupInfo"] = state ? state.logExtGroupInfo : undefined;
            resourceInputs["primaryServerName"] = state ? state.primaryServerName : undefined;
            resourceInputs["primaryServerType"] = state ? state.primaryServerType : undefined;
        } else {
            const args = argsOrState as AaaServerArgs | undefined;
            if ((!args || args.primaryServerType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'primaryServerType'");
            }
            resourceInputs["externalServers"] = args ? args.externalServers : undefined;
            resourceInputs["fallbackLocalAuthentication"] = args ? args.fallbackLocalAuthentication : undefined;
            resourceInputs["logExtGroupInfo"] = args ? args.logExtGroupInfo : undefined;
            resourceInputs["primaryServerName"] = args ? args.primaryServerName : undefined;
            resourceInputs["primaryServerType"] = args ? args.primaryServerType : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AaaServer.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AaaServer resources.
 */
export interface AaaServerState {
    /**
     * List of external servers.
     */
    externalServers?: pulumi.Input<pulumi.Input<inputs.AaaServerExternalServer>[]>;
    /**
     * Enable local fallback authentication.
     */
    fallbackLocalAuthentication?: pulumi.Input<boolean>;
    /**
     * Log external group info.
     */
    logExtGroupInfo?: pulumi.Input<boolean>;
    /**
     * Name of primary server name. Minimum length = 1 Maximum length = 128
     */
    primaryServerName?: pulumi.Input<string>;
    /**
     * Type of primary server. Supported types 1. LOCAL 2.RADIUS 3.LDAP 4.TACACS 5.KEYSTONE. Minimum length = 1 Maximum length
     * = 32
     */
    primaryServerType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AaaServer resource.
 */
export interface AaaServerArgs {
    /**
     * List of external servers.
     */
    externalServers?: pulumi.Input<pulumi.Input<inputs.AaaServerExternalServer>[]>;
    /**
     * Enable local fallback authentication.
     */
    fallbackLocalAuthentication?: pulumi.Input<boolean>;
    /**
     * Log external group info.
     */
    logExtGroupInfo?: pulumi.Input<boolean>;
    /**
     * Name of primary server name. Minimum length = 1 Maximum length = 128
     */
    primaryServerName?: pulumi.Input<string>;
    /**
     * Type of primary server. Supported types 1. LOCAL 2.RADIUS 3.LDAP 4.TACACS 5.KEYSTONE. Minimum length = 1 Maximum length
     * = 32
     */
    primaryServerType: pulumi.Input<string>;
}
