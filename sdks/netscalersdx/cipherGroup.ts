// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class CipherGroup extends pulumi.CustomResource {
    /**
     * Get an existing CipherGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CipherGroupState, opts?: pulumi.CustomResourceOptions): CipherGroup {
        return new CipherGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'netscalersdx:index/cipherGroup:CipherGroup';

    /**
     * Returns true if the given object is an instance of CipherGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CipherGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CipherGroup.__pulumiType;
    }

    /**
     * Describing the Cipher Group algorithms created. Minimum length = 1 Maximum length = 256
     */
    public readonly cipherGroupDescription!: pulumi.Output<string>;
    /**
     * Name of Cipher Group. Minimum length = 1 Maximum length = 128
     */
    public readonly cipherGroupName!: pulumi.Output<string>;
    /**
     * list of cipher suites in form of array of strings.
     */
    public readonly cipherNameListArrays!: pulumi.Output<string[]>;

    /**
     * Create a CipherGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CipherGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CipherGroupArgs | CipherGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CipherGroupState | undefined;
            resourceInputs["cipherGroupDescription"] = state ? state.cipherGroupDescription : undefined;
            resourceInputs["cipherGroupName"] = state ? state.cipherGroupName : undefined;
            resourceInputs["cipherNameListArrays"] = state ? state.cipherNameListArrays : undefined;
        } else {
            const args = argsOrState as CipherGroupArgs | undefined;
            if ((!args || args.cipherGroupDescription === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cipherGroupDescription'");
            }
            if ((!args || args.cipherGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cipherGroupName'");
            }
            if ((!args || args.cipherNameListArrays === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cipherNameListArrays'");
            }
            resourceInputs["cipherGroupDescription"] = args ? args.cipherGroupDescription : undefined;
            resourceInputs["cipherGroupName"] = args ? args.cipherGroupName : undefined;
            resourceInputs["cipherNameListArrays"] = args ? args.cipherNameListArrays : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CipherGroup.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CipherGroup resources.
 */
export interface CipherGroupState {
    /**
     * Describing the Cipher Group algorithms created. Minimum length = 1 Maximum length = 256
     */
    cipherGroupDescription?: pulumi.Input<string>;
    /**
     * Name of Cipher Group. Minimum length = 1 Maximum length = 128
     */
    cipherGroupName?: pulumi.Input<string>;
    /**
     * list of cipher suites in form of array of strings.
     */
    cipherNameListArrays?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a CipherGroup resource.
 */
export interface CipherGroupArgs {
    /**
     * Describing the Cipher Group algorithms created. Minimum length = 1 Maximum length = 256
     */
    cipherGroupDescription: pulumi.Input<string>;
    /**
     * Name of Cipher Group. Minimum length = 1 Maximum length = 128
     */
    cipherGroupName: pulumi.Input<string>;
    /**
     * list of cipher suites in form of array of strings.
     */
    cipherNameListArrays: pulumi.Input<pulumi.Input<string>[]>;
}
