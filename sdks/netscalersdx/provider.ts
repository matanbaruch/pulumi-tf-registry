// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The provider type for the netscalersdx package. By default, resources use package-wide configuration
 * settings, however an explicit `Provider` instance may be created and passed during resource
 * construction to achieve fine-grained programmatic control over provider settings. See the
 * [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.
 */
export class Provider extends pulumi.ProviderResource {
    /** @internal */
    public static readonly __pulumiType = 'netscalersdx';

    /**
     * Returns true if the given object is an instance of Provider.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Provider {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === "pulumi:providers:" + Provider.__pulumiType;
    }

    /**
     * NetScaler SDX host. Can be specified with `NETSCALERSDX_HOST` environment variable. This has to start with https://
     */
    public readonly host!: pulumi.Output<string | undefined>;
    /**
     * Log level (Default is INFO). Can be specified with `NETSCALERSDX_LOG_LEVEL` environment variable.
     */
    public readonly logLevel!: pulumi.Output<string | undefined>;
    /**
     * NetScaler SDX password. Can be specified with `NETSCALERSDX_PASSWORD` environment variable.
     */
    public readonly password!: pulumi.Output<string | undefined>;
    /**
     * TODO
     */
    public readonly rootCaPath!: pulumi.Output<string | undefined>;
    /**
     * TODO
     */
    public readonly serverName!: pulumi.Output<string | undefined>;
    /**
     * NetScaler SDX username. Can be specified with `NETSCALERSDX_USERNAME` environment variable.
     */
    public readonly username!: pulumi.Output<string | undefined>;

    /**
     * Create a Provider resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ProviderArgs, opts?: pulumi.ResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        {
            resourceInputs["headers"] = pulumi.output(args ? args.headers : undefined).apply(JSON.stringify);
            resourceInputs["host"] = args ? args.host : undefined;
            resourceInputs["jsonLogFormat"] = pulumi.output(args ? args.jsonLogFormat : undefined).apply(JSON.stringify);
            resourceInputs["logLevel"] = args ? args.logLevel : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["rootCaPath"] = args ? args.rootCaPath : undefined;
            resourceInputs["serverName"] = args ? args.serverName : undefined;
            resourceInputs["sslVerify"] = pulumi.output(args ? args.sslVerify : undefined).apply(JSON.stringify);
            resourceInputs["username"] = args ? args.username : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Provider.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * The set of arguments for constructing a Provider resource.
 */
export interface ProviderArgs {
    /**
     * TODO
     */
    headers?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * NetScaler SDX host. Can be specified with `NETSCALERSDX_HOST` environment variable. This has to start with https://
     */
    host?: pulumi.Input<string>;
    /**
     * TODO
     */
    jsonLogFormat?: pulumi.Input<boolean>;
    /**
     * Log level (Default is INFO). Can be specified with `NETSCALERSDX_LOG_LEVEL` environment variable.
     */
    logLevel?: pulumi.Input<string>;
    /**
     * NetScaler SDX password. Can be specified with `NETSCALERSDX_PASSWORD` environment variable.
     */
    password?: pulumi.Input<string>;
    /**
     * TODO
     */
    rootCaPath?: pulumi.Input<string>;
    /**
     * TODO
     */
    serverName?: pulumi.Input<string>;
    /**
     * Ignore validity of SDX TLS certificate if true. Can be specified with `NETSCALERSDX_SSL_VERIFY` environment variable.
     */
    sslVerify?: pulumi.Input<boolean>;
    /**
     * NetScaler SDX username. Can be specified with `NETSCALERSDX_USERNAME` environment variable.
     */
    username?: pulumi.Input<string>;
}
