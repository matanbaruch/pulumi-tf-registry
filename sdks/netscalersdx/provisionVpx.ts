// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ProvisionVpx extends pulumi.CustomResource {
    /**
     * Get an existing ProvisionVpx resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProvisionVpxState, opts?: pulumi.CustomResourceOptions): ProvisionVpx {
        return new ProvisionVpx(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'netscalersdx:index/provisionVpx:ProvisionVpx';

    /**
     * Returns true if the given object is an instance of ProvisionVpx.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ProvisionVpx {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ProvisionVpx.__pulumiType;
    }

    /**
     * Backplane Interface. Minimum length = 1
     */
    public readonly backplane!: pulumi.Output<string | undefined>;
    /**
     * Burst Priority of the VM Instance between 1 and 4.
     */
    public readonly burstPriority!: pulumi.Output<number | undefined>;
    /**
     * true if you want to allow shell/sftp/scp access to NetScaler Instance administrator. Minimum length = 1 Maximum length =
     * 1024
     */
    public readonly cmdPolicy!: pulumi.Output<string | undefined>;
    /**
     * Configuration Type. Values: 0: IPv4, 1: IPv6, 2: Both.
     */
    public readonly configType!: pulumi.Output<number | undefined>;
    /**
     * `true` if the current changes made by user requires a reboot of the VM else `false`.
     */
    public readonly cryptoChangeRequiresReboot!: pulumi.Output<boolean | undefined>;
    /**
     * Custom ID.
     */
    public readonly customid!: pulumi.Output<string | undefined>;
    /**
     * Datacenter Id is system generated key for data center.
     */
    public readonly datacenterId!: pulumi.Output<string | undefined>;
    /**
     * Description of managed device. Minimum length = 1 Maximum length = 512
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Device Family. Minimum length = 1 Maximum length = 64
     */
    public readonly deviceFamily!: pulumi.Output<string | undefined>;
    /**
     * Display Name for this managed device. For HA pair it will be A-B, and for Cluster it will be CLIP. Minimum length = 1
     * Maximum length = 128
     */
    public readonly displayName!: pulumi.Output<string | undefined>;
    /**
     * Domain name of VM Device. Minimum length = 1 Maximum length = 128
     */
    public readonly domainName!: pulumi.Output<string | undefined>;
    /**
     * Enterprise Bandwidth configured.
     */
    public readonly entBwAvailable!: pulumi.Output<number | undefined>;
    /**
     * Enterprise Bandwidth configured.
     */
    public readonly entBwConfig!: pulumi.Output<number | undefined>;
    /**
     * Enterprise Bandwidth Total.
     */
    public readonly entBwTotal!: pulumi.Output<number | undefined>;
    /**
     * FIPS Partition Name. Minimum length = 1 Maximum length = 128
     */
    public readonly fipsPartitionName!: pulumi.Output<string | undefined>;
    /**
     * Default Gateway of managed device. Minimum length = 1 Maximum length = 64
     */
    public readonly gateway!: pulumi.Output<string | undefined>;
    /**
     * Gateway IPv6 Address.
     */
    public readonly gatewayIpv6!: pulumi.Output<string | undefined>;
    /**
     * Host IPAddress where VM is provisioned. Minimum length = 1 Maximum length = 64
     */
    public readonly hostIpAddress!: pulumi.Output<string | undefined>;
    /**
     * Assign hostname to managed device, if this is not provided, name will be set as host name . Minimum length = 1 Maximum
     * length = 256
     */
    public readonly hostname!: pulumi.Output<string | undefined>;
    /**
     * Network 0/1 on VM Instance, Select this option to assign 0/1 Interface
     */
    public readonly if01!: pulumi.Output<boolean | undefined>;
    /**
     * Network 0/2 on VM Instance, Select this option to assign 0/2 Interface
     */
    public readonly if02!: pulumi.Output<boolean | undefined>;
    /**
     * Set as true if VPX is managed by internal network (not required to be set for SDWAN).
     */
    public readonly ifInternalIpEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * Image Name, This parameter is used while provisioning VM Instance with XVA image, template_name is given priority if
     * provided along with image_name. Minimum length = 1 Maximum length = 128
     */
    public readonly imageName!: pulumi.Output<string | undefined>;
    /**
     * Denotes state- primary,secondary,clip,clusternode.
     */
    public readonly instanceMode!: pulumi.Output<string | undefined>;
    /**
     * Internal IP Address for this managed device. Minimum length = 1 Maximum length = 64
     */
    public readonly internalIpAddress!: pulumi.Output<string | undefined>;
    /**
     * IP Address for this managed device. Minimum length = 1 Maximum length = 64
     */
    public readonly ipAddress!: pulumi.Output<string>;
    /**
     * IPv4 Address. Minimum length = 1 Maximum length = 64
     */
    public readonly ipv4Address!: pulumi.Output<string | undefined>;
    /**
     * IPv6 Address.
     */
    public readonly ipv6Address!: pulumi.Output<string | undefined>;
    /**
     * Is Clip.
     */
    public readonly isClip!: pulumi.Output<boolean | undefined>;
    /**
     * Is Managed.
     */
    public readonly isManaged!: pulumi.Output<boolean | undefined>;
    /**
     * `true` if number_of_acu/number_of_scu are used, `false` if number_of_ssl_cores is used.
     */
    public readonly isNewCrypto!: pulumi.Output<boolean | undefined>;
    /**
     * Is CCO.
     */
    public readonly iscco!: pulumi.Output<boolean | undefined>;
    /**
     * L2mode status of VM Instance. Select this option to allow L2 mode on all the Data Interfaces on this NetScaler ADC
     * Instance
     */
    public readonly l2Enabled!: pulumi.Output<boolean | undefined>;
    /**
     * Bond consisting of management ports on VM Instance. When Management Channel created for interfaces, this will be set to
     * `true`
     */
    public readonly laMgmt!: pulumi.Output<boolean | undefined>;
    /**
     * Last Updated Time.
     */
    public readonly lastUpdatedTime!: pulumi.Output<number | undefined>;
    /**
     * Feature License for NetScaler ADC Instance, needs to be set while provisioning [Possible values: Standard, Enterprise,
     * Platinum].
     */
    public readonly license!: pulumi.Output<string | undefined>;
    /**
     * Edition of instance.
     */
    public readonly licenseEdition!: pulumi.Output<string | undefined>;
    /**
     * Grace for this NetScaler Instance..
     */
    public readonly licenseGraceTime!: pulumi.Output<number | undefined>;
    /**
     * Mastools version if the device is embedded agent.
     */
    public readonly mastoolsVersion!: pulumi.Output<string | undefined>;
    /**
     * Maximum burst throughput in Mbps of VM Instance.
     */
    public readonly maxBurstThroughput!: pulumi.Output<number | undefined>;
    /**
     * Flag to check if metrics collection is enabled or disabled..
     */
    public readonly metricsCollection!: pulumi.Output<boolean | undefined>;
    /**
     * Management IP Address for this Managed Device. Minimum length = 1 Maximum length = 64
     */
    public readonly mgmtIpAddress!: pulumi.Output<string | undefined>;
    /**
     * Name of managed device. Minimum length = 1 Maximum length = 128
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Netmask of managed device. Minimum length = 1 Maximum length = 64
     */
    public readonly netmask!: pulumi.Output<string | undefined>;
    /**
     * Network Interfaces.
     */
    public readonly networkInterfaces!: pulumi.Output<outputs.ProvisionVpxNetworkInterface[]>;
    /**
     * Next Hop IP address. Minimum length = 1 Maximum length = 64
     */
    public readonly nexthop!: pulumi.Output<string | undefined>;
    /**
     * Next Hop IPv6 Address.
     */
    public readonly nexthopV6!: pulumi.Output<string | undefined>;
    /**
     * Node identification of a device.
     */
    public readonly nodeId!: pulumi.Output<string | undefined>;
    /**
     * NetScaler IP Address for this managed device. Minimum length = 1 Maximum length = 128
     */
    public readonly nsIpAddress!: pulumi.Output<string | undefined>;
    /**
     * VLAN for Management Traffic.
     */
    public readonly nsvlanId!: pulumi.Output<number | undefined>;
    /**
     * VLAN Interfaces. Minimum length = 1 Maximum length = 50
     */
    public readonly nsvlanInterfaces!: pulumi.Output<string[] | undefined>;
    /**
     * When this option is selected, selected interfaces are added as tagged members of Management VLAN
     */
    public readonly nsvlanTagged!: pulumi.Output<boolean | undefined>;
    /**
     * Total number of PEs.
     */
    public readonly numPes!: pulumi.Output<number | undefined>;
    /**
     * Assign number of asymmetric crypto units to VM Instance.
     */
    public readonly numberOfAcu!: pulumi.Output<number | undefined>;
    /**
     * Number of cores that are assigned to VM Instance.
     */
    public readonly numberOfCores!: pulumi.Output<number | undefined>;
    /**
     * Assign number of asymmetric crypto units to VM Instance.
     */
    public readonly numberOfScu!: pulumi.Output<number | undefined>;
    /**
     * Number of SSL Cards.
     */
    public readonly numberOfSslCards!: pulumi.Output<number | undefined>;
    /**
     * Assign number of ssl virtual functions to VM Instance.
     */
    public readonly numberOfSslCores!: pulumi.Output<number | undefined>;
    /**
     * Number of SSL Cores Up.
     */
    public readonly numberOfSslCoresUp!: pulumi.Output<number | undefined>;
    /**
     * Password for specified user on NetScaler Instance. Minimum length = 1 Maximum length = 127
     */
    public readonly password!: pulumi.Output<string | undefined>;
    /**
     * Platinum Bandwidth Available.
     */
    public readonly pltBwAvailable!: pulumi.Output<number | undefined>;
    /**
     * Platinum Bandwidth configured.
     */
    public readonly pltBwConfig!: pulumi.Output<number | undefined>;
    /**
     * Total Platinum Bandwidth.
     */
    public readonly pltBwTotal!: pulumi.Output<number | undefined>;
    /**
     * Signaling IP Address. Minimum length = 1 Maximum length = 64
     */
    public readonly pluginIpAddress!: pulumi.Output<string | undefined>;
    /**
     * Signaling Netmask. Minimum length = 1 Maximum length = 64
     */
    public readonly pluginNetmask!: pulumi.Output<string | undefined>;
    /**
     * Assign packets per seconds to NetScaler Instance.
     */
    public readonly pps!: pulumi.Output<number | undefined>;
    /**
     * Device Profile Name that is attached with this managed device. Minimum length = 1 Maximum length = 128
     */
    public readonly profileName!: pulumi.Output<string | undefined>;
    /**
     * Password specified by the user for this NetScaler Instance.. Minimum length = 1 Maximum length = 128
     */
    public readonly profilePassword!: pulumi.Output<string | undefined>;
    /**
     * User Name specified by the user for this NetScaler Instance.. Minimum length = 1 Maximum length = 128
     */
    public readonly profileUsername!: pulumi.Output<string | undefined>;
    /**
     * Reboot VMs on CPU change during resource allocation.
     */
    public readonly rebootVmOnCpuChange!: pulumi.Output<boolean | undefined>;
    /**
     * Should config be saved first in case instance is rebooted while modify.
     */
    public readonly saveConfig!: pulumi.Output<boolean | undefined>;
    /**
     * Node State. Minimum length = 1 Maximum length = 32
     */
    public readonly state!: pulumi.Output<string | undefined>;
    /**
     * Standard Bandwidth Available.
     */
    public readonly stdBwAvailable!: pulumi.Output<number | undefined>;
    /**
     * Standard Bandwidth running.
     */
    public readonly stdBwConfig!: pulumi.Output<number | undefined>;
    /**
     * Standard Bandwidth.
     */
    public readonly stdBwTotal!: pulumi.Output<number | undefined>;
    /**
     * Template Name, This parameter is used while provisioning VM Instance with template, template_name is given priority if
     * provided along with image_name. Minimum length = 1 Maximum length = 128
     */
    public readonly templateName!: pulumi.Output<string | undefined>;
    /**
     * Assign throughput in Mbps to VM Instance.
     */
    public readonly throughput!: pulumi.Output<number | undefined>;
    /**
     * Throughput Allocation Mode: 0-Fixed, 1-Burst-able.
     */
    public readonly throughputAllocationMode!: pulumi.Output<number | undefined>;
    /**
     * Throughput Limit in Mbps set for VM Instance.
     */
    public readonly throughputLimit!: pulumi.Output<number | undefined>;
    /**
     * Type of device, (Xen | NS). Minimum length = 1 Maximum length = 64
     */
    public readonly type!: pulumi.Output<string | undefined>;
    /**
     * User Name (except nsroot) to be configured on NetScaler Instance. Minimum length = 1 Maximum length = 127
     */
    public readonly username!: pulumi.Output<string | undefined>;
    /**
     * Number of vCPU allocated for the device.
     */
    public readonly vcpuConfig!: pulumi.Output<number | undefined>;
    /**
     * VLAN id for the management interface 0/1. This VLAN ID is used to filter management traffic on 0/1 at hypervisor layer.
     */
    public readonly vlanId01!: pulumi.Output<number | undefined>;
    /**
     * VLAN id for the management interface 0/2. This VLAN ID is used to filter management traffic on 0/2 at hypervisor layer.
     */
    public readonly vlanId02!: pulumi.Output<number | undefined>;
    /**
     * VLAN Type, NetScaler or L2 VLAN. Select 0 for NetScaler VLAN or 1 for L2 VLAN.
     */
    public readonly vlanType!: pulumi.Output<number | undefined>;
    /**
     * Total Memory of VM Instance in MB. 2048MB, 5120MB.
     */
    public readonly vmMemoryTotal!: pulumi.Output<number | undefined>;

    /**
     * Create a ProvisionVpx resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProvisionVpxArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProvisionVpxArgs | ProvisionVpxState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ProvisionVpxState | undefined;
            resourceInputs["backplane"] = state ? state.backplane : undefined;
            resourceInputs["burstPriority"] = state ? state.burstPriority : undefined;
            resourceInputs["cmdPolicy"] = state ? state.cmdPolicy : undefined;
            resourceInputs["configType"] = state ? state.configType : undefined;
            resourceInputs["cryptoChangeRequiresReboot"] = state ? state.cryptoChangeRequiresReboot : undefined;
            resourceInputs["customid"] = state ? state.customid : undefined;
            resourceInputs["datacenterId"] = state ? state.datacenterId : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["deviceFamily"] = state ? state.deviceFamily : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["domainName"] = state ? state.domainName : undefined;
            resourceInputs["entBwAvailable"] = state ? state.entBwAvailable : undefined;
            resourceInputs["entBwConfig"] = state ? state.entBwConfig : undefined;
            resourceInputs["entBwTotal"] = state ? state.entBwTotal : undefined;
            resourceInputs["fipsPartitionName"] = state ? state.fipsPartitionName : undefined;
            resourceInputs["gateway"] = state ? state.gateway : undefined;
            resourceInputs["gatewayIpv6"] = state ? state.gatewayIpv6 : undefined;
            resourceInputs["hostIpAddress"] = state ? state.hostIpAddress : undefined;
            resourceInputs["hostname"] = state ? state.hostname : undefined;
            resourceInputs["if01"] = state ? state.if01 : undefined;
            resourceInputs["if02"] = state ? state.if02 : undefined;
            resourceInputs["ifInternalIpEnabled"] = state ? state.ifInternalIpEnabled : undefined;
            resourceInputs["imageName"] = state ? state.imageName : undefined;
            resourceInputs["instanceMode"] = state ? state.instanceMode : undefined;
            resourceInputs["internalIpAddress"] = state ? state.internalIpAddress : undefined;
            resourceInputs["ipAddress"] = state ? state.ipAddress : undefined;
            resourceInputs["ipv4Address"] = state ? state.ipv4Address : undefined;
            resourceInputs["ipv6Address"] = state ? state.ipv6Address : undefined;
            resourceInputs["isClip"] = state ? state.isClip : undefined;
            resourceInputs["isManaged"] = state ? state.isManaged : undefined;
            resourceInputs["isNewCrypto"] = state ? state.isNewCrypto : undefined;
            resourceInputs["iscco"] = state ? state.iscco : undefined;
            resourceInputs["l2Enabled"] = state ? state.l2Enabled : undefined;
            resourceInputs["laMgmt"] = state ? state.laMgmt : undefined;
            resourceInputs["lastUpdatedTime"] = state ? state.lastUpdatedTime : undefined;
            resourceInputs["license"] = state ? state.license : undefined;
            resourceInputs["licenseEdition"] = state ? state.licenseEdition : undefined;
            resourceInputs["licenseGraceTime"] = state ? state.licenseGraceTime : undefined;
            resourceInputs["mastoolsVersion"] = state ? state.mastoolsVersion : undefined;
            resourceInputs["maxBurstThroughput"] = state ? state.maxBurstThroughput : undefined;
            resourceInputs["metricsCollection"] = state ? state.metricsCollection : undefined;
            resourceInputs["mgmtIpAddress"] = state ? state.mgmtIpAddress : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["netmask"] = state ? state.netmask : undefined;
            resourceInputs["networkInterfaces"] = state ? state.networkInterfaces : undefined;
            resourceInputs["nexthop"] = state ? state.nexthop : undefined;
            resourceInputs["nexthopV6"] = state ? state.nexthopV6 : undefined;
            resourceInputs["nodeId"] = state ? state.nodeId : undefined;
            resourceInputs["nsIpAddress"] = state ? state.nsIpAddress : undefined;
            resourceInputs["nsvlanId"] = state ? state.nsvlanId : undefined;
            resourceInputs["nsvlanInterfaces"] = state ? state.nsvlanInterfaces : undefined;
            resourceInputs["nsvlanTagged"] = state ? state.nsvlanTagged : undefined;
            resourceInputs["numPes"] = state ? state.numPes : undefined;
            resourceInputs["numberOfAcu"] = state ? state.numberOfAcu : undefined;
            resourceInputs["numberOfCores"] = state ? state.numberOfCores : undefined;
            resourceInputs["numberOfScu"] = state ? state.numberOfScu : undefined;
            resourceInputs["numberOfSslCards"] = state ? state.numberOfSslCards : undefined;
            resourceInputs["numberOfSslCores"] = state ? state.numberOfSslCores : undefined;
            resourceInputs["numberOfSslCoresUp"] = state ? state.numberOfSslCoresUp : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["pltBwAvailable"] = state ? state.pltBwAvailable : undefined;
            resourceInputs["pltBwConfig"] = state ? state.pltBwConfig : undefined;
            resourceInputs["pltBwTotal"] = state ? state.pltBwTotal : undefined;
            resourceInputs["pluginIpAddress"] = state ? state.pluginIpAddress : undefined;
            resourceInputs["pluginNetmask"] = state ? state.pluginNetmask : undefined;
            resourceInputs["pps"] = state ? state.pps : undefined;
            resourceInputs["profileName"] = state ? state.profileName : undefined;
            resourceInputs["profilePassword"] = state ? state.profilePassword : undefined;
            resourceInputs["profileUsername"] = state ? state.profileUsername : undefined;
            resourceInputs["rebootVmOnCpuChange"] = state ? state.rebootVmOnCpuChange : undefined;
            resourceInputs["saveConfig"] = state ? state.saveConfig : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["stdBwAvailable"] = state ? state.stdBwAvailable : undefined;
            resourceInputs["stdBwConfig"] = state ? state.stdBwConfig : undefined;
            resourceInputs["stdBwTotal"] = state ? state.stdBwTotal : undefined;
            resourceInputs["templateName"] = state ? state.templateName : undefined;
            resourceInputs["throughput"] = state ? state.throughput : undefined;
            resourceInputs["throughputAllocationMode"] = state ? state.throughputAllocationMode : undefined;
            resourceInputs["throughputLimit"] = state ? state.throughputLimit : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
            resourceInputs["vcpuConfig"] = state ? state.vcpuConfig : undefined;
            resourceInputs["vlanId01"] = state ? state.vlanId01 : undefined;
            resourceInputs["vlanId02"] = state ? state.vlanId02 : undefined;
            resourceInputs["vlanType"] = state ? state.vlanType : undefined;
            resourceInputs["vmMemoryTotal"] = state ? state.vmMemoryTotal : undefined;
        } else {
            const args = argsOrState as ProvisionVpxArgs | undefined;
            if ((!args || args.ipAddress === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ipAddress'");
            }
            resourceInputs["backplane"] = args ? args.backplane : undefined;
            resourceInputs["burstPriority"] = args ? args.burstPriority : undefined;
            resourceInputs["cmdPolicy"] = args ? args.cmdPolicy : undefined;
            resourceInputs["configType"] = args ? args.configType : undefined;
            resourceInputs["cryptoChangeRequiresReboot"] = args ? args.cryptoChangeRequiresReboot : undefined;
            resourceInputs["customid"] = args ? args.customid : undefined;
            resourceInputs["datacenterId"] = args ? args.datacenterId : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["deviceFamily"] = args ? args.deviceFamily : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["domainName"] = args ? args.domainName : undefined;
            resourceInputs["entBwAvailable"] = args ? args.entBwAvailable : undefined;
            resourceInputs["entBwConfig"] = args ? args.entBwConfig : undefined;
            resourceInputs["entBwTotal"] = args ? args.entBwTotal : undefined;
            resourceInputs["fipsPartitionName"] = args ? args.fipsPartitionName : undefined;
            resourceInputs["gateway"] = args ? args.gateway : undefined;
            resourceInputs["gatewayIpv6"] = args ? args.gatewayIpv6 : undefined;
            resourceInputs["hostIpAddress"] = args ? args.hostIpAddress : undefined;
            resourceInputs["hostname"] = args ? args.hostname : undefined;
            resourceInputs["if01"] = args ? args.if01 : undefined;
            resourceInputs["if02"] = args ? args.if02 : undefined;
            resourceInputs["ifInternalIpEnabled"] = args ? args.ifInternalIpEnabled : undefined;
            resourceInputs["imageName"] = args ? args.imageName : undefined;
            resourceInputs["instanceMode"] = args ? args.instanceMode : undefined;
            resourceInputs["internalIpAddress"] = args ? args.internalIpAddress : undefined;
            resourceInputs["ipAddress"] = args ? args.ipAddress : undefined;
            resourceInputs["ipv4Address"] = args ? args.ipv4Address : undefined;
            resourceInputs["ipv6Address"] = args ? args.ipv6Address : undefined;
            resourceInputs["isClip"] = args ? args.isClip : undefined;
            resourceInputs["isManaged"] = args ? args.isManaged : undefined;
            resourceInputs["isNewCrypto"] = args ? args.isNewCrypto : undefined;
            resourceInputs["iscco"] = args ? args.iscco : undefined;
            resourceInputs["l2Enabled"] = args ? args.l2Enabled : undefined;
            resourceInputs["laMgmt"] = args ? args.laMgmt : undefined;
            resourceInputs["lastUpdatedTime"] = args ? args.lastUpdatedTime : undefined;
            resourceInputs["license"] = args ? args.license : undefined;
            resourceInputs["licenseEdition"] = args ? args.licenseEdition : undefined;
            resourceInputs["licenseGraceTime"] = args ? args.licenseGraceTime : undefined;
            resourceInputs["mastoolsVersion"] = args ? args.mastoolsVersion : undefined;
            resourceInputs["maxBurstThroughput"] = args ? args.maxBurstThroughput : undefined;
            resourceInputs["metricsCollection"] = args ? args.metricsCollection : undefined;
            resourceInputs["mgmtIpAddress"] = args ? args.mgmtIpAddress : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["netmask"] = args ? args.netmask : undefined;
            resourceInputs["networkInterfaces"] = args ? args.networkInterfaces : undefined;
            resourceInputs["nexthop"] = args ? args.nexthop : undefined;
            resourceInputs["nexthopV6"] = args ? args.nexthopV6 : undefined;
            resourceInputs["nodeId"] = args ? args.nodeId : undefined;
            resourceInputs["nsIpAddress"] = args ? args.nsIpAddress : undefined;
            resourceInputs["nsvlanId"] = args ? args.nsvlanId : undefined;
            resourceInputs["nsvlanInterfaces"] = args ? args.nsvlanInterfaces : undefined;
            resourceInputs["nsvlanTagged"] = args ? args.nsvlanTagged : undefined;
            resourceInputs["numPes"] = args ? args.numPes : undefined;
            resourceInputs["numberOfAcu"] = args ? args.numberOfAcu : undefined;
            resourceInputs["numberOfCores"] = args ? args.numberOfCores : undefined;
            resourceInputs["numberOfScu"] = args ? args.numberOfScu : undefined;
            resourceInputs["numberOfSslCards"] = args ? args.numberOfSslCards : undefined;
            resourceInputs["numberOfSslCores"] = args ? args.numberOfSslCores : undefined;
            resourceInputs["numberOfSslCoresUp"] = args ? args.numberOfSslCoresUp : undefined;
            resourceInputs["password"] = args ? args.password : undefined;
            resourceInputs["pltBwAvailable"] = args ? args.pltBwAvailable : undefined;
            resourceInputs["pltBwConfig"] = args ? args.pltBwConfig : undefined;
            resourceInputs["pltBwTotal"] = args ? args.pltBwTotal : undefined;
            resourceInputs["pluginIpAddress"] = args ? args.pluginIpAddress : undefined;
            resourceInputs["pluginNetmask"] = args ? args.pluginNetmask : undefined;
            resourceInputs["pps"] = args ? args.pps : undefined;
            resourceInputs["profileName"] = args ? args.profileName : undefined;
            resourceInputs["profilePassword"] = args ? args.profilePassword : undefined;
            resourceInputs["profileUsername"] = args ? args.profileUsername : undefined;
            resourceInputs["rebootVmOnCpuChange"] = args ? args.rebootVmOnCpuChange : undefined;
            resourceInputs["saveConfig"] = args ? args.saveConfig : undefined;
            resourceInputs["state"] = args ? args.state : undefined;
            resourceInputs["stdBwAvailable"] = args ? args.stdBwAvailable : undefined;
            resourceInputs["stdBwConfig"] = args ? args.stdBwConfig : undefined;
            resourceInputs["stdBwTotal"] = args ? args.stdBwTotal : undefined;
            resourceInputs["templateName"] = args ? args.templateName : undefined;
            resourceInputs["throughput"] = args ? args.throughput : undefined;
            resourceInputs["throughputAllocationMode"] = args ? args.throughputAllocationMode : undefined;
            resourceInputs["throughputLimit"] = args ? args.throughputLimit : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
            resourceInputs["vcpuConfig"] = args ? args.vcpuConfig : undefined;
            resourceInputs["vlanId01"] = args ? args.vlanId01 : undefined;
            resourceInputs["vlanId02"] = args ? args.vlanId02 : undefined;
            resourceInputs["vlanType"] = args ? args.vlanType : undefined;
            resourceInputs["vmMemoryTotal"] = args ? args.vmMemoryTotal : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ProvisionVpx.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ProvisionVpx resources.
 */
export interface ProvisionVpxState {
    /**
     * Backplane Interface. Minimum length = 1
     */
    backplane?: pulumi.Input<string>;
    /**
     * Burst Priority of the VM Instance between 1 and 4.
     */
    burstPriority?: pulumi.Input<number>;
    /**
     * true if you want to allow shell/sftp/scp access to NetScaler Instance administrator. Minimum length = 1 Maximum length =
     * 1024
     */
    cmdPolicy?: pulumi.Input<string>;
    /**
     * Configuration Type. Values: 0: IPv4, 1: IPv6, 2: Both.
     */
    configType?: pulumi.Input<number>;
    /**
     * `true` if the current changes made by user requires a reboot of the VM else `false`.
     */
    cryptoChangeRequiresReboot?: pulumi.Input<boolean>;
    /**
     * Custom ID.
     */
    customid?: pulumi.Input<string>;
    /**
     * Datacenter Id is system generated key for data center.
     */
    datacenterId?: pulumi.Input<string>;
    /**
     * Description of managed device. Minimum length = 1 Maximum length = 512
     */
    description?: pulumi.Input<string>;
    /**
     * Device Family. Minimum length = 1 Maximum length = 64
     */
    deviceFamily?: pulumi.Input<string>;
    /**
     * Display Name for this managed device. For HA pair it will be A-B, and for Cluster it will be CLIP. Minimum length = 1
     * Maximum length = 128
     */
    displayName?: pulumi.Input<string>;
    /**
     * Domain name of VM Device. Minimum length = 1 Maximum length = 128
     */
    domainName?: pulumi.Input<string>;
    /**
     * Enterprise Bandwidth configured.
     */
    entBwAvailable?: pulumi.Input<number>;
    /**
     * Enterprise Bandwidth configured.
     */
    entBwConfig?: pulumi.Input<number>;
    /**
     * Enterprise Bandwidth Total.
     */
    entBwTotal?: pulumi.Input<number>;
    /**
     * FIPS Partition Name. Minimum length = 1 Maximum length = 128
     */
    fipsPartitionName?: pulumi.Input<string>;
    /**
     * Default Gateway of managed device. Minimum length = 1 Maximum length = 64
     */
    gateway?: pulumi.Input<string>;
    /**
     * Gateway IPv6 Address.
     */
    gatewayIpv6?: pulumi.Input<string>;
    /**
     * Host IPAddress where VM is provisioned. Minimum length = 1 Maximum length = 64
     */
    hostIpAddress?: pulumi.Input<string>;
    /**
     * Assign hostname to managed device, if this is not provided, name will be set as host name . Minimum length = 1 Maximum
     * length = 256
     */
    hostname?: pulumi.Input<string>;
    /**
     * Network 0/1 on VM Instance, Select this option to assign 0/1 Interface
     */
    if01?: pulumi.Input<boolean>;
    /**
     * Network 0/2 on VM Instance, Select this option to assign 0/2 Interface
     */
    if02?: pulumi.Input<boolean>;
    /**
     * Set as true if VPX is managed by internal network (not required to be set for SDWAN).
     */
    ifInternalIpEnabled?: pulumi.Input<boolean>;
    /**
     * Image Name, This parameter is used while provisioning VM Instance with XVA image, template_name is given priority if
     * provided along with image_name. Minimum length = 1 Maximum length = 128
     */
    imageName?: pulumi.Input<string>;
    /**
     * Denotes state- primary,secondary,clip,clusternode.
     */
    instanceMode?: pulumi.Input<string>;
    /**
     * Internal IP Address for this managed device. Minimum length = 1 Maximum length = 64
     */
    internalIpAddress?: pulumi.Input<string>;
    /**
     * IP Address for this managed device. Minimum length = 1 Maximum length = 64
     */
    ipAddress?: pulumi.Input<string>;
    /**
     * IPv4 Address. Minimum length = 1 Maximum length = 64
     */
    ipv4Address?: pulumi.Input<string>;
    /**
     * IPv6 Address.
     */
    ipv6Address?: pulumi.Input<string>;
    /**
     * Is Clip.
     */
    isClip?: pulumi.Input<boolean>;
    /**
     * Is Managed.
     */
    isManaged?: pulumi.Input<boolean>;
    /**
     * `true` if number_of_acu/number_of_scu are used, `false` if number_of_ssl_cores is used.
     */
    isNewCrypto?: pulumi.Input<boolean>;
    /**
     * Is CCO.
     */
    iscco?: pulumi.Input<boolean>;
    /**
     * L2mode status of VM Instance. Select this option to allow L2 mode on all the Data Interfaces on this NetScaler ADC
     * Instance
     */
    l2Enabled?: pulumi.Input<boolean>;
    /**
     * Bond consisting of management ports on VM Instance. When Management Channel created for interfaces, this will be set to
     * `true`
     */
    laMgmt?: pulumi.Input<boolean>;
    /**
     * Last Updated Time.
     */
    lastUpdatedTime?: pulumi.Input<number>;
    /**
     * Feature License for NetScaler ADC Instance, needs to be set while provisioning [Possible values: Standard, Enterprise,
     * Platinum].
     */
    license?: pulumi.Input<string>;
    /**
     * Edition of instance.
     */
    licenseEdition?: pulumi.Input<string>;
    /**
     * Grace for this NetScaler Instance..
     */
    licenseGraceTime?: pulumi.Input<number>;
    /**
     * Mastools version if the device is embedded agent.
     */
    mastoolsVersion?: pulumi.Input<string>;
    /**
     * Maximum burst throughput in Mbps of VM Instance.
     */
    maxBurstThroughput?: pulumi.Input<number>;
    /**
     * Flag to check if metrics collection is enabled or disabled..
     */
    metricsCollection?: pulumi.Input<boolean>;
    /**
     * Management IP Address for this Managed Device. Minimum length = 1 Maximum length = 64
     */
    mgmtIpAddress?: pulumi.Input<string>;
    /**
     * Name of managed device. Minimum length = 1 Maximum length = 128
     */
    name?: pulumi.Input<string>;
    /**
     * Netmask of managed device. Minimum length = 1 Maximum length = 64
     */
    netmask?: pulumi.Input<string>;
    /**
     * Network Interfaces.
     */
    networkInterfaces?: pulumi.Input<pulumi.Input<inputs.ProvisionVpxNetworkInterface>[]>;
    /**
     * Next Hop IP address. Minimum length = 1 Maximum length = 64
     */
    nexthop?: pulumi.Input<string>;
    /**
     * Next Hop IPv6 Address.
     */
    nexthopV6?: pulumi.Input<string>;
    /**
     * Node identification of a device.
     */
    nodeId?: pulumi.Input<string>;
    /**
     * NetScaler IP Address for this managed device. Minimum length = 1 Maximum length = 128
     */
    nsIpAddress?: pulumi.Input<string>;
    /**
     * VLAN for Management Traffic.
     */
    nsvlanId?: pulumi.Input<number>;
    /**
     * VLAN Interfaces. Minimum length = 1 Maximum length = 50
     */
    nsvlanInterfaces?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * When this option is selected, selected interfaces are added as tagged members of Management VLAN
     */
    nsvlanTagged?: pulumi.Input<boolean>;
    /**
     * Total number of PEs.
     */
    numPes?: pulumi.Input<number>;
    /**
     * Assign number of asymmetric crypto units to VM Instance.
     */
    numberOfAcu?: pulumi.Input<number>;
    /**
     * Number of cores that are assigned to VM Instance.
     */
    numberOfCores?: pulumi.Input<number>;
    /**
     * Assign number of asymmetric crypto units to VM Instance.
     */
    numberOfScu?: pulumi.Input<number>;
    /**
     * Number of SSL Cards.
     */
    numberOfSslCards?: pulumi.Input<number>;
    /**
     * Assign number of ssl virtual functions to VM Instance.
     */
    numberOfSslCores?: pulumi.Input<number>;
    /**
     * Number of SSL Cores Up.
     */
    numberOfSslCoresUp?: pulumi.Input<number>;
    /**
     * Password for specified user on NetScaler Instance. Minimum length = 1 Maximum length = 127
     */
    password?: pulumi.Input<string>;
    /**
     * Platinum Bandwidth Available.
     */
    pltBwAvailable?: pulumi.Input<number>;
    /**
     * Platinum Bandwidth configured.
     */
    pltBwConfig?: pulumi.Input<number>;
    /**
     * Total Platinum Bandwidth.
     */
    pltBwTotal?: pulumi.Input<number>;
    /**
     * Signaling IP Address. Minimum length = 1 Maximum length = 64
     */
    pluginIpAddress?: pulumi.Input<string>;
    /**
     * Signaling Netmask. Minimum length = 1 Maximum length = 64
     */
    pluginNetmask?: pulumi.Input<string>;
    /**
     * Assign packets per seconds to NetScaler Instance.
     */
    pps?: pulumi.Input<number>;
    /**
     * Device Profile Name that is attached with this managed device. Minimum length = 1 Maximum length = 128
     */
    profileName?: pulumi.Input<string>;
    /**
     * Password specified by the user for this NetScaler Instance.. Minimum length = 1 Maximum length = 128
     */
    profilePassword?: pulumi.Input<string>;
    /**
     * User Name specified by the user for this NetScaler Instance.. Minimum length = 1 Maximum length = 128
     */
    profileUsername?: pulumi.Input<string>;
    /**
     * Reboot VMs on CPU change during resource allocation.
     */
    rebootVmOnCpuChange?: pulumi.Input<boolean>;
    /**
     * Should config be saved first in case instance is rebooted while modify.
     */
    saveConfig?: pulumi.Input<boolean>;
    /**
     * Node State. Minimum length = 1 Maximum length = 32
     */
    state?: pulumi.Input<string>;
    /**
     * Standard Bandwidth Available.
     */
    stdBwAvailable?: pulumi.Input<number>;
    /**
     * Standard Bandwidth running.
     */
    stdBwConfig?: pulumi.Input<number>;
    /**
     * Standard Bandwidth.
     */
    stdBwTotal?: pulumi.Input<number>;
    /**
     * Template Name, This parameter is used while provisioning VM Instance with template, template_name is given priority if
     * provided along with image_name. Minimum length = 1 Maximum length = 128
     */
    templateName?: pulumi.Input<string>;
    /**
     * Assign throughput in Mbps to VM Instance.
     */
    throughput?: pulumi.Input<number>;
    /**
     * Throughput Allocation Mode: 0-Fixed, 1-Burst-able.
     */
    throughputAllocationMode?: pulumi.Input<number>;
    /**
     * Throughput Limit in Mbps set for VM Instance.
     */
    throughputLimit?: pulumi.Input<number>;
    /**
     * Type of device, (Xen | NS). Minimum length = 1 Maximum length = 64
     */
    type?: pulumi.Input<string>;
    /**
     * User Name (except nsroot) to be configured on NetScaler Instance. Minimum length = 1 Maximum length = 127
     */
    username?: pulumi.Input<string>;
    /**
     * Number of vCPU allocated for the device.
     */
    vcpuConfig?: pulumi.Input<number>;
    /**
     * VLAN id for the management interface 0/1. This VLAN ID is used to filter management traffic on 0/1 at hypervisor layer.
     */
    vlanId01?: pulumi.Input<number>;
    /**
     * VLAN id for the management interface 0/2. This VLAN ID is used to filter management traffic on 0/2 at hypervisor layer.
     */
    vlanId02?: pulumi.Input<number>;
    /**
     * VLAN Type, NetScaler or L2 VLAN. Select 0 for NetScaler VLAN or 1 for L2 VLAN.
     */
    vlanType?: pulumi.Input<number>;
    /**
     * Total Memory of VM Instance in MB. 2048MB, 5120MB.
     */
    vmMemoryTotal?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a ProvisionVpx resource.
 */
export interface ProvisionVpxArgs {
    /**
     * Backplane Interface. Minimum length = 1
     */
    backplane?: pulumi.Input<string>;
    /**
     * Burst Priority of the VM Instance between 1 and 4.
     */
    burstPriority?: pulumi.Input<number>;
    /**
     * true if you want to allow shell/sftp/scp access to NetScaler Instance administrator. Minimum length = 1 Maximum length =
     * 1024
     */
    cmdPolicy?: pulumi.Input<string>;
    /**
     * Configuration Type. Values: 0: IPv4, 1: IPv6, 2: Both.
     */
    configType?: pulumi.Input<number>;
    /**
     * `true` if the current changes made by user requires a reboot of the VM else `false`.
     */
    cryptoChangeRequiresReboot?: pulumi.Input<boolean>;
    /**
     * Custom ID.
     */
    customid?: pulumi.Input<string>;
    /**
     * Datacenter Id is system generated key for data center.
     */
    datacenterId?: pulumi.Input<string>;
    /**
     * Description of managed device. Minimum length = 1 Maximum length = 512
     */
    description?: pulumi.Input<string>;
    /**
     * Device Family. Minimum length = 1 Maximum length = 64
     */
    deviceFamily?: pulumi.Input<string>;
    /**
     * Display Name for this managed device. For HA pair it will be A-B, and for Cluster it will be CLIP. Minimum length = 1
     * Maximum length = 128
     */
    displayName?: pulumi.Input<string>;
    /**
     * Domain name of VM Device. Minimum length = 1 Maximum length = 128
     */
    domainName?: pulumi.Input<string>;
    /**
     * Enterprise Bandwidth configured.
     */
    entBwAvailable?: pulumi.Input<number>;
    /**
     * Enterprise Bandwidth configured.
     */
    entBwConfig?: pulumi.Input<number>;
    /**
     * Enterprise Bandwidth Total.
     */
    entBwTotal?: pulumi.Input<number>;
    /**
     * FIPS Partition Name. Minimum length = 1 Maximum length = 128
     */
    fipsPartitionName?: pulumi.Input<string>;
    /**
     * Default Gateway of managed device. Minimum length = 1 Maximum length = 64
     */
    gateway?: pulumi.Input<string>;
    /**
     * Gateway IPv6 Address.
     */
    gatewayIpv6?: pulumi.Input<string>;
    /**
     * Host IPAddress where VM is provisioned. Minimum length = 1 Maximum length = 64
     */
    hostIpAddress?: pulumi.Input<string>;
    /**
     * Assign hostname to managed device, if this is not provided, name will be set as host name . Minimum length = 1 Maximum
     * length = 256
     */
    hostname?: pulumi.Input<string>;
    /**
     * Network 0/1 on VM Instance, Select this option to assign 0/1 Interface
     */
    if01?: pulumi.Input<boolean>;
    /**
     * Network 0/2 on VM Instance, Select this option to assign 0/2 Interface
     */
    if02?: pulumi.Input<boolean>;
    /**
     * Set as true if VPX is managed by internal network (not required to be set for SDWAN).
     */
    ifInternalIpEnabled?: pulumi.Input<boolean>;
    /**
     * Image Name, This parameter is used while provisioning VM Instance with XVA image, template_name is given priority if
     * provided along with image_name. Minimum length = 1 Maximum length = 128
     */
    imageName?: pulumi.Input<string>;
    /**
     * Denotes state- primary,secondary,clip,clusternode.
     */
    instanceMode?: pulumi.Input<string>;
    /**
     * Internal IP Address for this managed device. Minimum length = 1 Maximum length = 64
     */
    internalIpAddress?: pulumi.Input<string>;
    /**
     * IP Address for this managed device. Minimum length = 1 Maximum length = 64
     */
    ipAddress: pulumi.Input<string>;
    /**
     * IPv4 Address. Minimum length = 1 Maximum length = 64
     */
    ipv4Address?: pulumi.Input<string>;
    /**
     * IPv6 Address.
     */
    ipv6Address?: pulumi.Input<string>;
    /**
     * Is Clip.
     */
    isClip?: pulumi.Input<boolean>;
    /**
     * Is Managed.
     */
    isManaged?: pulumi.Input<boolean>;
    /**
     * `true` if number_of_acu/number_of_scu are used, `false` if number_of_ssl_cores is used.
     */
    isNewCrypto?: pulumi.Input<boolean>;
    /**
     * Is CCO.
     */
    iscco?: pulumi.Input<boolean>;
    /**
     * L2mode status of VM Instance. Select this option to allow L2 mode on all the Data Interfaces on this NetScaler ADC
     * Instance
     */
    l2Enabled?: pulumi.Input<boolean>;
    /**
     * Bond consisting of management ports on VM Instance. When Management Channel created for interfaces, this will be set to
     * `true`
     */
    laMgmt?: pulumi.Input<boolean>;
    /**
     * Last Updated Time.
     */
    lastUpdatedTime?: pulumi.Input<number>;
    /**
     * Feature License for NetScaler ADC Instance, needs to be set while provisioning [Possible values: Standard, Enterprise,
     * Platinum].
     */
    license?: pulumi.Input<string>;
    /**
     * Edition of instance.
     */
    licenseEdition?: pulumi.Input<string>;
    /**
     * Grace for this NetScaler Instance..
     */
    licenseGraceTime?: pulumi.Input<number>;
    /**
     * Mastools version if the device is embedded agent.
     */
    mastoolsVersion?: pulumi.Input<string>;
    /**
     * Maximum burst throughput in Mbps of VM Instance.
     */
    maxBurstThroughput?: pulumi.Input<number>;
    /**
     * Flag to check if metrics collection is enabled or disabled..
     */
    metricsCollection?: pulumi.Input<boolean>;
    /**
     * Management IP Address for this Managed Device. Minimum length = 1 Maximum length = 64
     */
    mgmtIpAddress?: pulumi.Input<string>;
    /**
     * Name of managed device. Minimum length = 1 Maximum length = 128
     */
    name?: pulumi.Input<string>;
    /**
     * Netmask of managed device. Minimum length = 1 Maximum length = 64
     */
    netmask?: pulumi.Input<string>;
    /**
     * Network Interfaces.
     */
    networkInterfaces?: pulumi.Input<pulumi.Input<inputs.ProvisionVpxNetworkInterface>[]>;
    /**
     * Next Hop IP address. Minimum length = 1 Maximum length = 64
     */
    nexthop?: pulumi.Input<string>;
    /**
     * Next Hop IPv6 Address.
     */
    nexthopV6?: pulumi.Input<string>;
    /**
     * Node identification of a device.
     */
    nodeId?: pulumi.Input<string>;
    /**
     * NetScaler IP Address for this managed device. Minimum length = 1 Maximum length = 128
     */
    nsIpAddress?: pulumi.Input<string>;
    /**
     * VLAN for Management Traffic.
     */
    nsvlanId?: pulumi.Input<number>;
    /**
     * VLAN Interfaces. Minimum length = 1 Maximum length = 50
     */
    nsvlanInterfaces?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * When this option is selected, selected interfaces are added as tagged members of Management VLAN
     */
    nsvlanTagged?: pulumi.Input<boolean>;
    /**
     * Total number of PEs.
     */
    numPes?: pulumi.Input<number>;
    /**
     * Assign number of asymmetric crypto units to VM Instance.
     */
    numberOfAcu?: pulumi.Input<number>;
    /**
     * Number of cores that are assigned to VM Instance.
     */
    numberOfCores?: pulumi.Input<number>;
    /**
     * Assign number of asymmetric crypto units to VM Instance.
     */
    numberOfScu?: pulumi.Input<number>;
    /**
     * Number of SSL Cards.
     */
    numberOfSslCards?: pulumi.Input<number>;
    /**
     * Assign number of ssl virtual functions to VM Instance.
     */
    numberOfSslCores?: pulumi.Input<number>;
    /**
     * Number of SSL Cores Up.
     */
    numberOfSslCoresUp?: pulumi.Input<number>;
    /**
     * Password for specified user on NetScaler Instance. Minimum length = 1 Maximum length = 127
     */
    password?: pulumi.Input<string>;
    /**
     * Platinum Bandwidth Available.
     */
    pltBwAvailable?: pulumi.Input<number>;
    /**
     * Platinum Bandwidth configured.
     */
    pltBwConfig?: pulumi.Input<number>;
    /**
     * Total Platinum Bandwidth.
     */
    pltBwTotal?: pulumi.Input<number>;
    /**
     * Signaling IP Address. Minimum length = 1 Maximum length = 64
     */
    pluginIpAddress?: pulumi.Input<string>;
    /**
     * Signaling Netmask. Minimum length = 1 Maximum length = 64
     */
    pluginNetmask?: pulumi.Input<string>;
    /**
     * Assign packets per seconds to NetScaler Instance.
     */
    pps?: pulumi.Input<number>;
    /**
     * Device Profile Name that is attached with this managed device. Minimum length = 1 Maximum length = 128
     */
    profileName?: pulumi.Input<string>;
    /**
     * Password specified by the user for this NetScaler Instance.. Minimum length = 1 Maximum length = 128
     */
    profilePassword?: pulumi.Input<string>;
    /**
     * User Name specified by the user for this NetScaler Instance.. Minimum length = 1 Maximum length = 128
     */
    profileUsername?: pulumi.Input<string>;
    /**
     * Reboot VMs on CPU change during resource allocation.
     */
    rebootVmOnCpuChange?: pulumi.Input<boolean>;
    /**
     * Should config be saved first in case instance is rebooted while modify.
     */
    saveConfig?: pulumi.Input<boolean>;
    /**
     * Node State. Minimum length = 1 Maximum length = 32
     */
    state?: pulumi.Input<string>;
    /**
     * Standard Bandwidth Available.
     */
    stdBwAvailable?: pulumi.Input<number>;
    /**
     * Standard Bandwidth running.
     */
    stdBwConfig?: pulumi.Input<number>;
    /**
     * Standard Bandwidth.
     */
    stdBwTotal?: pulumi.Input<number>;
    /**
     * Template Name, This parameter is used while provisioning VM Instance with template, template_name is given priority if
     * provided along with image_name. Minimum length = 1 Maximum length = 128
     */
    templateName?: pulumi.Input<string>;
    /**
     * Assign throughput in Mbps to VM Instance.
     */
    throughput?: pulumi.Input<number>;
    /**
     * Throughput Allocation Mode: 0-Fixed, 1-Burst-able.
     */
    throughputAllocationMode?: pulumi.Input<number>;
    /**
     * Throughput Limit in Mbps set for VM Instance.
     */
    throughputLimit?: pulumi.Input<number>;
    /**
     * Type of device, (Xen | NS). Minimum length = 1 Maximum length = 64
     */
    type?: pulumi.Input<string>;
    /**
     * User Name (except nsroot) to be configured on NetScaler Instance. Minimum length = 1 Maximum length = 127
     */
    username?: pulumi.Input<string>;
    /**
     * Number of vCPU allocated for the device.
     */
    vcpuConfig?: pulumi.Input<number>;
    /**
     * VLAN id for the management interface 0/1. This VLAN ID is used to filter management traffic on 0/1 at hypervisor layer.
     */
    vlanId01?: pulumi.Input<number>;
    /**
     * VLAN id for the management interface 0/2. This VLAN ID is used to filter management traffic on 0/2 at hypervisor layer.
     */
    vlanId02?: pulumi.Input<number>;
    /**
     * VLAN Type, NetScaler or L2 VLAN. Select 0 for NetScaler VLAN or 1 for L2 VLAN.
     */
    vlanType?: pulumi.Input<number>;
    /**
     * Total Memory of VM Instance in MB. 2048MB, 5120MB.
     */
    vmMemoryTotal?: pulumi.Input<number>;
}
