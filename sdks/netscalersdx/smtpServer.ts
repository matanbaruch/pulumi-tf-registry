// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SmtpServer extends pulumi.CustomResource {
    /**
     * Get an existing SmtpServer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SmtpServerState, opts?: pulumi.CustomResourceOptions): SmtpServer {
        return new SmtpServer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'netscalersdx:index/smtpServer:SmtpServer';

    /**
     * Returns true if the given object is an instance of SmtpServer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SmtpServer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SmtpServer.__pulumiType;
    }

    /**
     * Is authentication enabled for this smtp server.
     */
    public readonly isAuth!: pulumi.Output<boolean | undefined>;
    /**
     * Is this smtp server is SSL support configured..
     */
    public readonly isSsl!: pulumi.Output<boolean | undefined>;
    /**
     * Password for the smtp server. Maximum length = 128
     */
    public readonly password!: pulumi.Output<string | undefined>;
    /**
     * SMTP Server port address.. Minimum value = 1 Maximum value =
     */
    public readonly port!: pulumi.Output<number | undefined>;
    /**
     * Email Address from which email is to be sent.
     */
    public readonly senderMailId!: pulumi.Output<string | undefined>;
    /**
     * SMTP server name. Minimum length = 1 Maximum length = 128
     */
    public readonly serverName!: pulumi.Output<string>;
    /**
     * Username for the smtp server. Maximum length = 128
     */
    public readonly username!: pulumi.Output<string | undefined>;

    /**
     * Create a SmtpServer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SmtpServerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SmtpServerArgs | SmtpServerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SmtpServerState | undefined;
            resourceInputs["isAuth"] = state ? state.isAuth : undefined;
            resourceInputs["isSsl"] = state ? state.isSsl : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["senderMailId"] = state ? state.senderMailId : undefined;
            resourceInputs["serverName"] = state ? state.serverName : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
        } else {
            const args = argsOrState as SmtpServerArgs | undefined;
            if ((!args || args.serverName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serverName'");
            }
            resourceInputs["isAuth"] = args ? args.isAuth : undefined;
            resourceInputs["isSsl"] = args ? args.isSsl : undefined;
            resourceInputs["password"] = args ? args.password : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["senderMailId"] = args ? args.senderMailId : undefined;
            resourceInputs["serverName"] = args ? args.serverName : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SmtpServer.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SmtpServer resources.
 */
export interface SmtpServerState {
    /**
     * Is authentication enabled for this smtp server.
     */
    isAuth?: pulumi.Input<boolean>;
    /**
     * Is this smtp server is SSL support configured..
     */
    isSsl?: pulumi.Input<boolean>;
    /**
     * Password for the smtp server. Maximum length = 128
     */
    password?: pulumi.Input<string>;
    /**
     * SMTP Server port address.. Minimum value = 1 Maximum value =
     */
    port?: pulumi.Input<number>;
    /**
     * Email Address from which email is to be sent.
     */
    senderMailId?: pulumi.Input<string>;
    /**
     * SMTP server name. Minimum length = 1 Maximum length = 128
     */
    serverName?: pulumi.Input<string>;
    /**
     * Username for the smtp server. Maximum length = 128
     */
    username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SmtpServer resource.
 */
export interface SmtpServerArgs {
    /**
     * Is authentication enabled for this smtp server.
     */
    isAuth?: pulumi.Input<boolean>;
    /**
     * Is this smtp server is SSL support configured..
     */
    isSsl?: pulumi.Input<boolean>;
    /**
     * Password for the smtp server. Maximum length = 128
     */
    password?: pulumi.Input<string>;
    /**
     * SMTP Server port address.. Minimum value = 1 Maximum value =
     */
    port?: pulumi.Input<number>;
    /**
     * Email Address from which email is to be sent.
     */
    senderMailId?: pulumi.Input<string>;
    /**
     * SMTP server name. Minimum length = 1 Maximum length = 128
     */
    serverName: pulumi.Input<string>;
    /**
     * Username for the smtp server. Maximum length = 128
     */
    username?: pulumi.Input<string>;
}
