// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class TacacsServer extends pulumi.CustomResource {
    /**
     * Get an existing TacacsServer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TacacsServerState, opts?: pulumi.CustomResourceOptions): TacacsServer {
        return new TacacsServer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'netscalersdx:index/tacacsServer:TacacsServer';

    /**
     * Returns true if the given object is an instance of TacacsServer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TacacsServer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TacacsServer.__pulumiType;
    }

    /**
     * Enable accounting in the tacacs server.
     */
    public readonly accounting!: pulumi.Output<boolean | undefined>;
    /**
     * The maximum number of seconds the system will wait for a response from the TACACS server. Minimum value = 1 Maximum
     * value =
     */
    public readonly authTimeout!: pulumi.Output<number | undefined>;
    /**
     * The Attribute name for group extraction from the ACS server. If not passed, then groups will not be extracted. No other
     * harm. Maximum length = 64
     */
    public readonly groupAttrName!: pulumi.Output<string | undefined>;
    /**
     * IP Address of TACACS server. Minimum length = 1 Maximum length = 64
     */
    public readonly ipAddress!: pulumi.Output<string>;
    /**
     * Name of TACACS server. Minimum length = 1 Maximum length = 128
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * port number of TACACS server. Minimum value = 1 Maximum value =
     */
    public readonly port!: pulumi.Output<number | undefined>;
    /**
     * Key shared between the TACACS+ server and clients. Minimum length = 1 Maximum length = 64
     */
    public readonly tacacsKey!: pulumi.Output<string>;

    /**
     * Create a TacacsServer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TacacsServerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TacacsServerArgs | TacacsServerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TacacsServerState | undefined;
            resourceInputs["accounting"] = state ? state.accounting : undefined;
            resourceInputs["authTimeout"] = state ? state.authTimeout : undefined;
            resourceInputs["groupAttrName"] = state ? state.groupAttrName : undefined;
            resourceInputs["ipAddress"] = state ? state.ipAddress : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["tacacsKey"] = state ? state.tacacsKey : undefined;
        } else {
            const args = argsOrState as TacacsServerArgs | undefined;
            if ((!args || args.ipAddress === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ipAddress'");
            }
            if ((!args || args.tacacsKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tacacsKey'");
            }
            resourceInputs["accounting"] = args ? args.accounting : undefined;
            resourceInputs["authTimeout"] = args ? args.authTimeout : undefined;
            resourceInputs["groupAttrName"] = args ? args.groupAttrName : undefined;
            resourceInputs["ipAddress"] = args ? args.ipAddress : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["tacacsKey"] = args ? args.tacacsKey : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TacacsServer.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering TacacsServer resources.
 */
export interface TacacsServerState {
    /**
     * Enable accounting in the tacacs server.
     */
    accounting?: pulumi.Input<boolean>;
    /**
     * The maximum number of seconds the system will wait for a response from the TACACS server. Minimum value = 1 Maximum
     * value =
     */
    authTimeout?: pulumi.Input<number>;
    /**
     * The Attribute name for group extraction from the ACS server. If not passed, then groups will not be extracted. No other
     * harm. Maximum length = 64
     */
    groupAttrName?: pulumi.Input<string>;
    /**
     * IP Address of TACACS server. Minimum length = 1 Maximum length = 64
     */
    ipAddress?: pulumi.Input<string>;
    /**
     * Name of TACACS server. Minimum length = 1 Maximum length = 128
     */
    name?: pulumi.Input<string>;
    /**
     * port number of TACACS server. Minimum value = 1 Maximum value =
     */
    port?: pulumi.Input<number>;
    /**
     * Key shared between the TACACS+ server and clients. Minimum length = 1 Maximum length = 64
     */
    tacacsKey?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a TacacsServer resource.
 */
export interface TacacsServerArgs {
    /**
     * Enable accounting in the tacacs server.
     */
    accounting?: pulumi.Input<boolean>;
    /**
     * The maximum number of seconds the system will wait for a response from the TACACS server. Minimum value = 1 Maximum
     * value =
     */
    authTimeout?: pulumi.Input<number>;
    /**
     * The Attribute name for group extraction from the ACS server. If not passed, then groups will not be extracted. No other
     * harm. Maximum length = 64
     */
    groupAttrName?: pulumi.Input<string>;
    /**
     * IP Address of TACACS server. Minimum length = 1 Maximum length = 64
     */
    ipAddress: pulumi.Input<string>;
    /**
     * Name of TACACS server. Minimum length = 1 Maximum length = 128
     */
    name?: pulumi.Input<string>;
    /**
     * port number of TACACS server. Minimum value = 1 Maximum value =
     */
    port?: pulumi.Input<number>;
    /**
     * Key shared between the TACACS+ server and clients. Minimum length = 1 Maximum length = 64
     */
    tacacsKey: pulumi.Input<string>;
}
