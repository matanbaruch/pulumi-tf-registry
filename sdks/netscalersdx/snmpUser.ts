// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SnmpUser extends pulumi.CustomResource {
    /**
     * Get an existing SnmpUser resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SnmpUserState, opts?: pulumi.CustomResourceOptions): SnmpUser {
        return new SnmpUser(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'netscalersdx:index/snmpUser:SnmpUser';

    /**
     * Returns true if the given object is an instance of SnmpUser.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SnmpUser {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SnmpUser.__pulumiType;
    }

    /**
     * Authentication Password of SNMP User. Minimum length = 8 Maximum length = 32
     */
    public readonly authPassword!: pulumi.Output<string | undefined>;
    /**
     * Authentication Protocol of SNMP User. Values: 0:noValue, 1: MD5, 2: SHA1. Maximum value =
     */
    public readonly authProtocol!: pulumi.Output<number | undefined>;
    /**
     * Name of SNMP User. Minimum length = 1 Maximum length = 32
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Privacy Password of SNMP User. Minimum length = 8 Maximum length = 32
     */
    public readonly privacyPassword!: pulumi.Output<string | undefined>;
    /**
     * Privacy Protocol of SNMP User. Values: 0:noValue, 1: DES, 2: AES. Maximum value =
     */
    public readonly privacyProtocol!: pulumi.Output<number | undefined>;
    /**
     * Security Level of SNMP User. Values: 0: noAuthNoPriv, 1: authNoPriv, 2: authPriv. Maximum value =
     */
    public readonly securityLevel!: pulumi.Output<number>;
    /**
     * SNMP View Name attached to the SNMP User. Maximum length = 32
     */
    public readonly viewName!: pulumi.Output<string | undefined>;

    /**
     * Create a SnmpUser resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SnmpUserArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SnmpUserArgs | SnmpUserState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SnmpUserState | undefined;
            resourceInputs["authPassword"] = state ? state.authPassword : undefined;
            resourceInputs["authProtocol"] = state ? state.authProtocol : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["privacyPassword"] = state ? state.privacyPassword : undefined;
            resourceInputs["privacyProtocol"] = state ? state.privacyProtocol : undefined;
            resourceInputs["securityLevel"] = state ? state.securityLevel : undefined;
            resourceInputs["viewName"] = state ? state.viewName : undefined;
        } else {
            const args = argsOrState as SnmpUserArgs | undefined;
            if ((!args || args.securityLevel === undefined) && !opts.urn) {
                throw new Error("Missing required property 'securityLevel'");
            }
            resourceInputs["authPassword"] = args ? args.authPassword : undefined;
            resourceInputs["authProtocol"] = args ? args.authProtocol : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["privacyPassword"] = args ? args.privacyPassword : undefined;
            resourceInputs["privacyProtocol"] = args ? args.privacyProtocol : undefined;
            resourceInputs["securityLevel"] = args ? args.securityLevel : undefined;
            resourceInputs["viewName"] = args ? args.viewName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SnmpUser.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SnmpUser resources.
 */
export interface SnmpUserState {
    /**
     * Authentication Password of SNMP User. Minimum length = 8 Maximum length = 32
     */
    authPassword?: pulumi.Input<string>;
    /**
     * Authentication Protocol of SNMP User. Values: 0:noValue, 1: MD5, 2: SHA1. Maximum value =
     */
    authProtocol?: pulumi.Input<number>;
    /**
     * Name of SNMP User. Minimum length = 1 Maximum length = 32
     */
    name?: pulumi.Input<string>;
    /**
     * Privacy Password of SNMP User. Minimum length = 8 Maximum length = 32
     */
    privacyPassword?: pulumi.Input<string>;
    /**
     * Privacy Protocol of SNMP User. Values: 0:noValue, 1: DES, 2: AES. Maximum value =
     */
    privacyProtocol?: pulumi.Input<number>;
    /**
     * Security Level of SNMP User. Values: 0: noAuthNoPriv, 1: authNoPriv, 2: authPriv. Maximum value =
     */
    securityLevel?: pulumi.Input<number>;
    /**
     * SNMP View Name attached to the SNMP User. Maximum length = 32
     */
    viewName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SnmpUser resource.
 */
export interface SnmpUserArgs {
    /**
     * Authentication Password of SNMP User. Minimum length = 8 Maximum length = 32
     */
    authPassword?: pulumi.Input<string>;
    /**
     * Authentication Protocol of SNMP User. Values: 0:noValue, 1: MD5, 2: SHA1. Maximum value =
     */
    authProtocol?: pulumi.Input<number>;
    /**
     * Name of SNMP User. Minimum length = 1 Maximum length = 32
     */
    name?: pulumi.Input<string>;
    /**
     * Privacy Password of SNMP User. Minimum length = 8 Maximum length = 32
     */
    privacyPassword?: pulumi.Input<string>;
    /**
     * Privacy Protocol of SNMP User. Values: 0:noValue, 1: DES, 2: AES. Maximum value =
     */
    privacyProtocol?: pulumi.Input<number>;
    /**
     * Security Level of SNMP User. Values: 0: noAuthNoPriv, 1: authNoPriv, 2: authPriv. Maximum value =
     */
    securityLevel: pulumi.Input<number>;
    /**
     * SNMP View Name attached to the SNMP User. Maximum length = 32
     */
    viewName?: pulumi.Input<string>;
}
