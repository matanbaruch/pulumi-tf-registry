// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class RoleMappingSaas extends pulumi.CustomResource {
    /**
     * Get an existing RoleMappingSaas resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RoleMappingSaasState, opts?: pulumi.CustomResourceOptions): RoleMappingSaas {
        return new RoleMappingSaas(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aquasec:index/roleMappingSaas:RoleMappingSaas';

    /**
     * Returns true if the given object is an instance of RoleMappingSaas.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RoleMappingSaas {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RoleMappingSaas.__pulumiType;
    }

    public /*out*/ readonly accountId!: pulumi.Output<number>;
    public /*out*/ readonly created!: pulumi.Output<string>;
    public readonly cspRole!: pulumi.Output<string>;
    public /*out*/ readonly roleMappingId!: pulumi.Output<number>;
    public readonly samlGroups!: pulumi.Output<string[]>;

    /**
     * Create a RoleMappingSaas resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RoleMappingSaasArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RoleMappingSaasArgs | RoleMappingSaasState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RoleMappingSaasState | undefined;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["created"] = state ? state.created : undefined;
            resourceInputs["cspRole"] = state ? state.cspRole : undefined;
            resourceInputs["roleMappingId"] = state ? state.roleMappingId : undefined;
            resourceInputs["samlGroups"] = state ? state.samlGroups : undefined;
        } else {
            const args = argsOrState as RoleMappingSaasArgs | undefined;
            if ((!args || args.cspRole === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cspRole'");
            }
            if ((!args || args.samlGroups === undefined) && !opts.urn) {
                throw new Error("Missing required property 'samlGroups'");
            }
            resourceInputs["cspRole"] = args ? args.cspRole : undefined;
            resourceInputs["samlGroups"] = args ? args.samlGroups : undefined;
            resourceInputs["accountId"] = undefined /*out*/;
            resourceInputs["created"] = undefined /*out*/;
            resourceInputs["roleMappingId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RoleMappingSaas.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering RoleMappingSaas resources.
 */
export interface RoleMappingSaasState {
    accountId?: pulumi.Input<number>;
    created?: pulumi.Input<string>;
    cspRole?: pulumi.Input<string>;
    roleMappingId?: pulumi.Input<number>;
    samlGroups?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a RoleMappingSaas resource.
 */
export interface RoleMappingSaasArgs {
    cspRole: pulumi.Input<string>;
    samlGroups: pulumi.Input<pulumi.Input<string>[]>;
}
