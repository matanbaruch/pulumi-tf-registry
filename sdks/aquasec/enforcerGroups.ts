// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class EnforcerGroups extends pulumi.CustomResource {
    /**
     * Get an existing EnforcerGroups resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EnforcerGroupsState, opts?: pulumi.CustomResourceOptions): EnforcerGroups {
        return new EnforcerGroups(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aquasec:index/enforcerGroups:EnforcerGroups';

    /**
     * Returns true if the given object is an instance of EnforcerGroups.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EnforcerGroups {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EnforcerGroups.__pulumiType;
    }

    /**
     * Selecting this option will allow the KubeEnforcer to block the deployment of container images that have failed any of
     * these Container Runtime Policy controls:\ * Block Non-Compliant Images\ * Block Non-Compliant Workloads\ * Block
     * Unregistered Images\ This functionality can work only when the KubeEnforcer is deployed in Enforce mode.
     */
    public readonly admissionControl!: pulumi.Output<boolean | undefined>;
    /**
     * Allow kube enforcer audit.
     */
    public readonly allowKubeEnforcerAudit!: pulumi.Output<boolean | undefined>;
    /**
     * List of application names to allow on the hosts. if provided, only containers of the listed applications will be allowed
     * to run.
     */
    public readonly allowedApplications!: pulumi.Output<string[] | undefined>;
    /**
     * List of label names to allow on the hosts.
     */
    public readonly allowedLabels!: pulumi.Output<string[] | undefined>;
    /**
     * List of registry names to allow on the hosts.
     */
    public readonly allowedRegistries!: pulumi.Output<string[] | undefined>;
    /**
     * This setting is available only when you have license for `Advanced Malware Protection`. Send true to make use of the
     * license and enable the `Real-time Malware Protection` control in the Host Runtime policies.
     */
    public readonly antivirusProtection!: pulumi.Output<boolean | undefined>;
    /**
     * Aqua server version
     */
    public /*out*/ readonly aquaVersion!: pulumi.Output<string>;
    /**
     * Agent will send extra audit messages to the server for success operations from inside the container (runtime).
     */
    public readonly auditAll!: pulumi.Output<boolean | undefined>;
    /**
     * This option is applicable only if `Enable Pod Enforcer injection` is selected. Select this option if you want Aqua
     * Enterprise to copy the secrets defined above to the Pod Enforcer namespace and container. Otherwise, you can choose to
     * copy these secrets by other means.
     */
    public readonly autoCopySecrets!: pulumi.Output<boolean>;
    /**
     * This option is available only if `Enable workload discovery` is selected. If selected, the KubeEnforcer will add
     * previously unknown image registries from the cluster to Aqua.
     */
    public readonly autoDiscoverConfigureRegistries!: pulumi.Output<boolean | undefined>;
    /**
     * When this option is selected, the KubeEnforcer will discover workloads on its cluster.
     */
    public readonly autoDiscoveryEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * This option is available only if `Enable workload discovery` is selected. If selected, the KubeEnforcer will
     * automatically register images running as workloads (and scan the discovered images for security issues).
     */
    public readonly autoScanDiscoveredImagesRunningContainers!: pulumi.Output<boolean | undefined>;
    /**
     * Select Enabled to detect suspicious activity in your containers and display potential security threats in the Incidents
     * and Audit pages.
     */
    public readonly behavioralEngine!: pulumi.Output<boolean | undefined>;
    /**
     * This applies only if both `Enable admission control` and Enforce mode are set. This additional option must be selected
     * for admission control to work if the KubeEnforcer is not connected to any Gateway. If this option is not selected,
     * admission control will be disabled; this will have no effect on containers already running.
     */
    public readonly blockAdmissionControl!: pulumi.Output<boolean | undefined>;
    /**
     * The installation command.
     */
    public /*out*/ readonly commands!: pulumi.Output<outputs.EnforcerGroupsCommand[]>;
    /**
     * Number of connected enforcers in the enforcer group.
     */
    public /*out*/ readonly connectedCount!: pulumi.Output<number>;
    /**
     * Set `True` to apply Container Runtime Policies, Image Profiles, and Firewall Policies to containers.
     */
    public readonly containerActivityProtection!: pulumi.Output<boolean | undefined>;
    /**
     * This setting is available only when you have license for `Advanced Malware Protection`. Send true to make use of the
     * license and enable the `Real-time Malware Protection` control in the Container Runtime policies.
     */
    public readonly containerAntivirusProtection!: pulumi.Output<boolean | undefined>;
    /**
     * A description of the Aqua Enforcer group.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Number of disconnected enforcers in the enforcer group.
     */
    public /*out*/ readonly disconnectedCount!: pulumi.Output<number>;
    /**
     * Whether to enable enforce mode on the Enforcers, defaults to False.
     */
    public readonly enforce!: pulumi.Output<boolean | undefined>;
    /**
     * The specific Aqua Enforcer product image (with image tag) to be deployed.
     */
    public /*out*/ readonly enforcerImageName!: pulumi.Output<string>;
    /**
     * Select Enabled to send activity logs in your containers to the Aqua Server for forensics purposes.
     */
    public readonly forensics!: pulumi.Output<boolean | undefined>;
    /**
     * Gateway Address
     */
    public /*out*/ readonly gatewayAddress!: pulumi.Output<string>;
    /**
     * Gateway Name
     */
    public /*out*/ readonly gatewayName!: pulumi.Output<string>;
    /**
     * List of Aqua gateway IDs for the Enforcers.
     */
    public readonly gateways!: pulumi.Output<string[]>;
    /**
     * The ID of the Enforcer group.
     */
    public readonly groupId!: pulumi.Output<string>;
    /**
     * Number of high vulnerabilities in the enforcers that in this enforcer group.
     */
    public /*out*/ readonly highVulns!: pulumi.Output<number>;
    /**
     * Set `True` to enable host scanning and respective Host Assurance controls.
     */
    public readonly hostAssurance!: pulumi.Output<boolean | undefined>;
    /**
     * Set `True` to enable these Host Runtime Policy controls: `OS Users and Groups Allowed` and `OS Users and Groups Blocked`
     */
    public readonly hostBehavioralEngine!: pulumi.Output<boolean | undefined>;
    /**
     * Select Enabled to send activity logs in your host to the Aqua Server for forensics purposes.
     */
    public readonly hostForensics!: pulumi.Output<boolean | undefined>;
    /**
     * Set `True` to apply Firewall Policies to hosts, and allow recording network maps for Aqua services. The Network Firewall
     * setting must be disabled when deploying the Aqua Enforcer on a machine running Rocky Linux. See
     * https://docs.aquasec.com/docs/platform-support-limitations-rocky-linux for further information
     */
    public readonly hostNetworkProtection!: pulumi.Output<boolean | undefined>;
    /**
     * The OS type for the host
     */
    public readonly hostOs!: pulumi.Output<string>;
    /**
     * Set `True` to enable all Host Runtime Policy controls except for `OS Users and Groups Allowed` and `OS Users and Groups
     * Blocked`.
     */
    public readonly hostProtection!: pulumi.Output<boolean | undefined>;
    /**
     * Set `True` to enable these Host Runtime Policy controls: `OS Users and Groups Allowed` and `OS Users and Groups Blocked`
     */
    public readonly hostUserProtection!: pulumi.Output<boolean | undefined>;
    /**
     * The hostname
     */
    public /*out*/ readonly hostname!: pulumi.Output<string>;
    /**
     * Number of enforcers in the enforcer group.
     */
    public /*out*/ readonly hostsCount!: pulumi.Output<number>;
    /**
     * Set `True` to enable selected controls: Container Runtime Policy (`Block Non-Compliant Images`, `Block Unregistered
     * Images`, and `Registries Allowed`) and Default Image Assurance Policy (`Images Blocked`).
     */
    public readonly imageAssurance!: pulumi.Output<boolean | undefined>;
    /**
     * Enforcer install command
     */
    public /*out*/ readonly installCommand!: pulumi.Output<string>;
    /**
     * See https://docs.aquasec.com/docs/securing-kubernetes-applications#section-configuration-hardening, The KubeEnforcer can
     * deploy the Aqua Security kube-bench open-source product to perform Kubernetes CIS benchmark testing of nodes. This field
     * specifies the path and file name of the kube-bench product image for the KubeEnforcer to deploy; it will be filled in
     * automatically. You can optionally enter a different value.
     */
    public readonly kubeBenchImageName!: pulumi.Output<string>;
    /**
     * The last date and time the batch token was updated in UNIX time.
     */
    public /*out*/ readonly lastUpdate!: pulumi.Output<number>;
    /**
     * Name for the batch install record.
     */
    public readonly logicalName!: pulumi.Output<string>;
    /**
     * Number of low vulnerabilities in the enforcers that in this enforcer group.
     */
    public /*out*/ readonly lowVulns!: pulumi.Output<number>;
    /**
     * Number of medium vulnerabilities in the enforcers that in this enforcer group.
     */
    public /*out*/ readonly medVulns!: pulumi.Output<number>;
    /**
     * This option is applicable only if `Enable Pod Enforcer injection` is selected.
     */
    public readonly microEnforcerCertsSecretsName!: pulumi.Output<string | undefined>;
    /**
     * This option is applicable only if `Enable Pod Enforcer injection` is selected. This field specifies the path and file
     * name of the KubeEnforcer product image to be deployed; it will be filled in automatically. You can optionally enter a
     * different value.
     */
    public readonly microEnforcerImageName!: pulumi.Output<string>;
    /**
     * This applies only if both `Enable admission control` and Enforce mode are set. This additional option must be selected
     * for admission control to work if the KubeEnforcer is not connected to any Gateway. If this option is not selected,
     * admission control will be disabled; this will have no effect on containers already running.
     */
    public readonly microEnforcerInjection!: pulumi.Output<boolean | undefined>;
    /**
     * You can specify the name of the secret (in the Aqua namespace) that Aqua copies into the Pod Enforcer namespace and
     * kube-bench, allowing them access to the Pod Enforcer and kube-bench product images, respectively.
     */
    public readonly microEnforcerSecretsName!: pulumi.Output<string>;
    /**
     * Number of negligible vulnerabilities in the enforcers that in this enforcer group.
     */
    public /*out*/ readonly negVulns!: pulumi.Output<number>;
    /**
     * Send true to apply Firewall Policies to containers, and allow recording network maps for Aqua services. The Network
     * Firewall setting must be disabled when deploying the Aqua Enforcer on a machine running Rocky Linux. See
     * https://docs.aquasec.com/docs/platform-support-limitations-rocky-linux for further information.
     */
    public readonly networkProtection!: pulumi.Output<boolean | undefined>;
    /**
     * The orchestrator for which you are creating the Enforcer group.
     */
    public readonly orchestrators!: pulumi.Output<outputs.EnforcerGroupsOrchestrator[]>;
    /**
     * pas deployment link
     */
    public /*out*/ readonly pasDeploymentLink!: pulumi.Output<string>;
    /**
     * Permission Action
     */
    public readonly permission!: pulumi.Output<string | undefined>;
    /**
     * Set `True` to allow Enforcers to be discovered in the Risk Explorer.
     */
    public readonly riskExplorerAutoDiscovery!: pulumi.Output<boolean | undefined>;
    /**
     * Function Runtime Policy that will applay on the nano enforcer.
     */
    public /*out*/ readonly runtimePolicyName!: pulumi.Output<string>;
    /**
     * The container runtime environment.
     */
    public readonly runtimeType!: pulumi.Output<string>;
    /**
     * Set `True` to configure Enforcers to discover local host images. Discovered images will be listed under Images > Host
     * Images, as well as under Infrastructure (in the Images tab for applicable hosts).
     */
    public readonly syncHostImages!: pulumi.Output<boolean | undefined>;
    /**
     * Set `True` will allow profiling and monitoring system calls made by running containers.
     */
    public readonly syscallEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * The batch install token.
     */
    public /*out*/ readonly token!: pulumi.Output<string>;
    /**
     * Enforcer Type.
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * Set `True` to apply User Access Control Policies to containers. Note that Aqua Enforcers must be deployed with the
     * AQUA_RUNC_INTERCEPTION environment variable set to 0 in order to use User Access Control Policies.
     */
    public readonly userAccessControl!: pulumi.Output<boolean | undefined>;

    /**
     * Create a EnforcerGroups resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EnforcerGroupsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EnforcerGroupsArgs | EnforcerGroupsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EnforcerGroupsState | undefined;
            resourceInputs["admissionControl"] = state ? state.admissionControl : undefined;
            resourceInputs["allowKubeEnforcerAudit"] = state ? state.allowKubeEnforcerAudit : undefined;
            resourceInputs["allowedApplications"] = state ? state.allowedApplications : undefined;
            resourceInputs["allowedLabels"] = state ? state.allowedLabels : undefined;
            resourceInputs["allowedRegistries"] = state ? state.allowedRegistries : undefined;
            resourceInputs["antivirusProtection"] = state ? state.antivirusProtection : undefined;
            resourceInputs["aquaVersion"] = state ? state.aquaVersion : undefined;
            resourceInputs["auditAll"] = state ? state.auditAll : undefined;
            resourceInputs["autoCopySecrets"] = state ? state.autoCopySecrets : undefined;
            resourceInputs["autoDiscoverConfigureRegistries"] = state ? state.autoDiscoverConfigureRegistries : undefined;
            resourceInputs["autoDiscoveryEnabled"] = state ? state.autoDiscoveryEnabled : undefined;
            resourceInputs["autoScanDiscoveredImagesRunningContainers"] = state ? state.autoScanDiscoveredImagesRunningContainers : undefined;
            resourceInputs["behavioralEngine"] = state ? state.behavioralEngine : undefined;
            resourceInputs["blockAdmissionControl"] = state ? state.blockAdmissionControl : undefined;
            resourceInputs["commands"] = state ? state.commands : undefined;
            resourceInputs["connectedCount"] = state ? state.connectedCount : undefined;
            resourceInputs["containerActivityProtection"] = state ? state.containerActivityProtection : undefined;
            resourceInputs["containerAntivirusProtection"] = state ? state.containerAntivirusProtection : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["disconnectedCount"] = state ? state.disconnectedCount : undefined;
            resourceInputs["enforce"] = state ? state.enforce : undefined;
            resourceInputs["enforcerImageName"] = state ? state.enforcerImageName : undefined;
            resourceInputs["forensics"] = state ? state.forensics : undefined;
            resourceInputs["gatewayAddress"] = state ? state.gatewayAddress : undefined;
            resourceInputs["gatewayName"] = state ? state.gatewayName : undefined;
            resourceInputs["gateways"] = state ? state.gateways : undefined;
            resourceInputs["groupId"] = state ? state.groupId : undefined;
            resourceInputs["highVulns"] = state ? state.highVulns : undefined;
            resourceInputs["hostAssurance"] = state ? state.hostAssurance : undefined;
            resourceInputs["hostBehavioralEngine"] = state ? state.hostBehavioralEngine : undefined;
            resourceInputs["hostForensics"] = state ? state.hostForensics : undefined;
            resourceInputs["hostNetworkProtection"] = state ? state.hostNetworkProtection : undefined;
            resourceInputs["hostOs"] = state ? state.hostOs : undefined;
            resourceInputs["hostProtection"] = state ? state.hostProtection : undefined;
            resourceInputs["hostUserProtection"] = state ? state.hostUserProtection : undefined;
            resourceInputs["hostname"] = state ? state.hostname : undefined;
            resourceInputs["hostsCount"] = state ? state.hostsCount : undefined;
            resourceInputs["imageAssurance"] = state ? state.imageAssurance : undefined;
            resourceInputs["installCommand"] = state ? state.installCommand : undefined;
            resourceInputs["kubeBenchImageName"] = state ? state.kubeBenchImageName : undefined;
            resourceInputs["lastUpdate"] = state ? state.lastUpdate : undefined;
            resourceInputs["logicalName"] = state ? state.logicalName : undefined;
            resourceInputs["lowVulns"] = state ? state.lowVulns : undefined;
            resourceInputs["medVulns"] = state ? state.medVulns : undefined;
            resourceInputs["microEnforcerCertsSecretsName"] = state ? state.microEnforcerCertsSecretsName : undefined;
            resourceInputs["microEnforcerImageName"] = state ? state.microEnforcerImageName : undefined;
            resourceInputs["microEnforcerInjection"] = state ? state.microEnforcerInjection : undefined;
            resourceInputs["microEnforcerSecretsName"] = state ? state.microEnforcerSecretsName : undefined;
            resourceInputs["negVulns"] = state ? state.negVulns : undefined;
            resourceInputs["networkProtection"] = state ? state.networkProtection : undefined;
            resourceInputs["orchestrators"] = state ? state.orchestrators : undefined;
            resourceInputs["pasDeploymentLink"] = state ? state.pasDeploymentLink : undefined;
            resourceInputs["permission"] = state ? state.permission : undefined;
            resourceInputs["riskExplorerAutoDiscovery"] = state ? state.riskExplorerAutoDiscovery : undefined;
            resourceInputs["runtimePolicyName"] = state ? state.runtimePolicyName : undefined;
            resourceInputs["runtimeType"] = state ? state.runtimeType : undefined;
            resourceInputs["syncHostImages"] = state ? state.syncHostImages : undefined;
            resourceInputs["syscallEnabled"] = state ? state.syscallEnabled : undefined;
            resourceInputs["token"] = state ? state.token : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["userAccessControl"] = state ? state.userAccessControl : undefined;
        } else {
            const args = argsOrState as EnforcerGroupsArgs | undefined;
            if ((!args || args.groupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'groupId'");
            }
            if ((!args || args.orchestrators === undefined) && !opts.urn) {
                throw new Error("Missing required property 'orchestrators'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["admissionControl"] = args ? args.admissionControl : undefined;
            resourceInputs["allowKubeEnforcerAudit"] = args ? args.allowKubeEnforcerAudit : undefined;
            resourceInputs["allowedApplications"] = args ? args.allowedApplications : undefined;
            resourceInputs["allowedLabels"] = args ? args.allowedLabels : undefined;
            resourceInputs["allowedRegistries"] = args ? args.allowedRegistries : undefined;
            resourceInputs["antivirusProtection"] = args ? args.antivirusProtection : undefined;
            resourceInputs["auditAll"] = args ? args.auditAll : undefined;
            resourceInputs["autoCopySecrets"] = args ? args.autoCopySecrets : undefined;
            resourceInputs["autoDiscoverConfigureRegistries"] = args ? args.autoDiscoverConfigureRegistries : undefined;
            resourceInputs["autoDiscoveryEnabled"] = args ? args.autoDiscoveryEnabled : undefined;
            resourceInputs["autoScanDiscoveredImagesRunningContainers"] = args ? args.autoScanDiscoveredImagesRunningContainers : undefined;
            resourceInputs["behavioralEngine"] = args ? args.behavioralEngine : undefined;
            resourceInputs["blockAdmissionControl"] = args ? args.blockAdmissionControl : undefined;
            resourceInputs["containerActivityProtection"] = args ? args.containerActivityProtection : undefined;
            resourceInputs["containerAntivirusProtection"] = args ? args.containerAntivirusProtection : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["enforce"] = args ? args.enforce : undefined;
            resourceInputs["forensics"] = args ? args.forensics : undefined;
            resourceInputs["gateways"] = args ? args.gateways : undefined;
            resourceInputs["groupId"] = args ? args.groupId : undefined;
            resourceInputs["hostAssurance"] = args ? args.hostAssurance : undefined;
            resourceInputs["hostBehavioralEngine"] = args ? args.hostBehavioralEngine : undefined;
            resourceInputs["hostForensics"] = args ? args.hostForensics : undefined;
            resourceInputs["hostNetworkProtection"] = args ? args.hostNetworkProtection : undefined;
            resourceInputs["hostOs"] = args ? args.hostOs : undefined;
            resourceInputs["hostProtection"] = args ? args.hostProtection : undefined;
            resourceInputs["hostUserProtection"] = args ? args.hostUserProtection : undefined;
            resourceInputs["imageAssurance"] = args ? args.imageAssurance : undefined;
            resourceInputs["kubeBenchImageName"] = args ? args.kubeBenchImageName : undefined;
            resourceInputs["logicalName"] = args ? args.logicalName : undefined;
            resourceInputs["microEnforcerCertsSecretsName"] = args ? args.microEnforcerCertsSecretsName : undefined;
            resourceInputs["microEnforcerImageName"] = args ? args.microEnforcerImageName : undefined;
            resourceInputs["microEnforcerInjection"] = args ? args.microEnforcerInjection : undefined;
            resourceInputs["microEnforcerSecretsName"] = args ? args.microEnforcerSecretsName : undefined;
            resourceInputs["networkProtection"] = args ? args.networkProtection : undefined;
            resourceInputs["orchestrators"] = args ? args.orchestrators : undefined;
            resourceInputs["permission"] = args ? args.permission : undefined;
            resourceInputs["riskExplorerAutoDiscovery"] = args ? args.riskExplorerAutoDiscovery : undefined;
            resourceInputs["runtimeType"] = args ? args.runtimeType : undefined;
            resourceInputs["syncHostImages"] = args ? args.syncHostImages : undefined;
            resourceInputs["syscallEnabled"] = args ? args.syscallEnabled : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["userAccessControl"] = args ? args.userAccessControl : undefined;
            resourceInputs["aquaVersion"] = undefined /*out*/;
            resourceInputs["commands"] = undefined /*out*/;
            resourceInputs["connectedCount"] = undefined /*out*/;
            resourceInputs["disconnectedCount"] = undefined /*out*/;
            resourceInputs["enforcerImageName"] = undefined /*out*/;
            resourceInputs["gatewayAddress"] = undefined /*out*/;
            resourceInputs["gatewayName"] = undefined /*out*/;
            resourceInputs["highVulns"] = undefined /*out*/;
            resourceInputs["hostname"] = undefined /*out*/;
            resourceInputs["hostsCount"] = undefined /*out*/;
            resourceInputs["installCommand"] = undefined /*out*/;
            resourceInputs["lastUpdate"] = undefined /*out*/;
            resourceInputs["lowVulns"] = undefined /*out*/;
            resourceInputs["medVulns"] = undefined /*out*/;
            resourceInputs["negVulns"] = undefined /*out*/;
            resourceInputs["pasDeploymentLink"] = undefined /*out*/;
            resourceInputs["runtimePolicyName"] = undefined /*out*/;
            resourceInputs["token"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EnforcerGroups.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering EnforcerGroups resources.
 */
export interface EnforcerGroupsState {
    /**
     * Selecting this option will allow the KubeEnforcer to block the deployment of container images that have failed any of
     * these Container Runtime Policy controls:\ * Block Non-Compliant Images\ * Block Non-Compliant Workloads\ * Block
     * Unregistered Images\ This functionality can work only when the KubeEnforcer is deployed in Enforce mode.
     */
    admissionControl?: pulumi.Input<boolean>;
    /**
     * Allow kube enforcer audit.
     */
    allowKubeEnforcerAudit?: pulumi.Input<boolean>;
    /**
     * List of application names to allow on the hosts. if provided, only containers of the listed applications will be allowed
     * to run.
     */
    allowedApplications?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of label names to allow on the hosts.
     */
    allowedLabels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of registry names to allow on the hosts.
     */
    allowedRegistries?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * This setting is available only when you have license for `Advanced Malware Protection`. Send true to make use of the
     * license and enable the `Real-time Malware Protection` control in the Host Runtime policies.
     */
    antivirusProtection?: pulumi.Input<boolean>;
    /**
     * Aqua server version
     */
    aquaVersion?: pulumi.Input<string>;
    /**
     * Agent will send extra audit messages to the server for success operations from inside the container (runtime).
     */
    auditAll?: pulumi.Input<boolean>;
    /**
     * This option is applicable only if `Enable Pod Enforcer injection` is selected. Select this option if you want Aqua
     * Enterprise to copy the secrets defined above to the Pod Enforcer namespace and container. Otherwise, you can choose to
     * copy these secrets by other means.
     */
    autoCopySecrets?: pulumi.Input<boolean>;
    /**
     * This option is available only if `Enable workload discovery` is selected. If selected, the KubeEnforcer will add
     * previously unknown image registries from the cluster to Aqua.
     */
    autoDiscoverConfigureRegistries?: pulumi.Input<boolean>;
    /**
     * When this option is selected, the KubeEnforcer will discover workloads on its cluster.
     */
    autoDiscoveryEnabled?: pulumi.Input<boolean>;
    /**
     * This option is available only if `Enable workload discovery` is selected. If selected, the KubeEnforcer will
     * automatically register images running as workloads (and scan the discovered images for security issues).
     */
    autoScanDiscoveredImagesRunningContainers?: pulumi.Input<boolean>;
    /**
     * Select Enabled to detect suspicious activity in your containers and display potential security threats in the Incidents
     * and Audit pages.
     */
    behavioralEngine?: pulumi.Input<boolean>;
    /**
     * This applies only if both `Enable admission control` and Enforce mode are set. This additional option must be selected
     * for admission control to work if the KubeEnforcer is not connected to any Gateway. If this option is not selected,
     * admission control will be disabled; this will have no effect on containers already running.
     */
    blockAdmissionControl?: pulumi.Input<boolean>;
    /**
     * The installation command.
     */
    commands?: pulumi.Input<pulumi.Input<inputs.EnforcerGroupsCommand>[]>;
    /**
     * Number of connected enforcers in the enforcer group.
     */
    connectedCount?: pulumi.Input<number>;
    /**
     * Set `True` to apply Container Runtime Policies, Image Profiles, and Firewall Policies to containers.
     */
    containerActivityProtection?: pulumi.Input<boolean>;
    /**
     * This setting is available only when you have license for `Advanced Malware Protection`. Send true to make use of the
     * license and enable the `Real-time Malware Protection` control in the Container Runtime policies.
     */
    containerAntivirusProtection?: pulumi.Input<boolean>;
    /**
     * A description of the Aqua Enforcer group.
     */
    description?: pulumi.Input<string>;
    /**
     * Number of disconnected enforcers in the enforcer group.
     */
    disconnectedCount?: pulumi.Input<number>;
    /**
     * Whether to enable enforce mode on the Enforcers, defaults to False.
     */
    enforce?: pulumi.Input<boolean>;
    /**
     * The specific Aqua Enforcer product image (with image tag) to be deployed.
     */
    enforcerImageName?: pulumi.Input<string>;
    /**
     * Select Enabled to send activity logs in your containers to the Aqua Server for forensics purposes.
     */
    forensics?: pulumi.Input<boolean>;
    /**
     * Gateway Address
     */
    gatewayAddress?: pulumi.Input<string>;
    /**
     * Gateway Name
     */
    gatewayName?: pulumi.Input<string>;
    /**
     * List of Aqua gateway IDs for the Enforcers.
     */
    gateways?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of the Enforcer group.
     */
    groupId?: pulumi.Input<string>;
    /**
     * Number of high vulnerabilities in the enforcers that in this enforcer group.
     */
    highVulns?: pulumi.Input<number>;
    /**
     * Set `True` to enable host scanning and respective Host Assurance controls.
     */
    hostAssurance?: pulumi.Input<boolean>;
    /**
     * Set `True` to enable these Host Runtime Policy controls: `OS Users and Groups Allowed` and `OS Users and Groups Blocked`
     */
    hostBehavioralEngine?: pulumi.Input<boolean>;
    /**
     * Select Enabled to send activity logs in your host to the Aqua Server for forensics purposes.
     */
    hostForensics?: pulumi.Input<boolean>;
    /**
     * Set `True` to apply Firewall Policies to hosts, and allow recording network maps for Aqua services. The Network Firewall
     * setting must be disabled when deploying the Aqua Enforcer on a machine running Rocky Linux. See
     * https://docs.aquasec.com/docs/platform-support-limitations-rocky-linux for further information
     */
    hostNetworkProtection?: pulumi.Input<boolean>;
    /**
     * The OS type for the host
     */
    hostOs?: pulumi.Input<string>;
    /**
     * Set `True` to enable all Host Runtime Policy controls except for `OS Users and Groups Allowed` and `OS Users and Groups
     * Blocked`.
     */
    hostProtection?: pulumi.Input<boolean>;
    /**
     * Set `True` to enable these Host Runtime Policy controls: `OS Users and Groups Allowed` and `OS Users and Groups Blocked`
     */
    hostUserProtection?: pulumi.Input<boolean>;
    /**
     * The hostname
     */
    hostname?: pulumi.Input<string>;
    /**
     * Number of enforcers in the enforcer group.
     */
    hostsCount?: pulumi.Input<number>;
    /**
     * Set `True` to enable selected controls: Container Runtime Policy (`Block Non-Compliant Images`, `Block Unregistered
     * Images`, and `Registries Allowed`) and Default Image Assurance Policy (`Images Blocked`).
     */
    imageAssurance?: pulumi.Input<boolean>;
    /**
     * Enforcer install command
     */
    installCommand?: pulumi.Input<string>;
    /**
     * See https://docs.aquasec.com/docs/securing-kubernetes-applications#section-configuration-hardening, The KubeEnforcer can
     * deploy the Aqua Security kube-bench open-source product to perform Kubernetes CIS benchmark testing of nodes. This field
     * specifies the path and file name of the kube-bench product image for the KubeEnforcer to deploy; it will be filled in
     * automatically. You can optionally enter a different value.
     */
    kubeBenchImageName?: pulumi.Input<string>;
    /**
     * The last date and time the batch token was updated in UNIX time.
     */
    lastUpdate?: pulumi.Input<number>;
    /**
     * Name for the batch install record.
     */
    logicalName?: pulumi.Input<string>;
    /**
     * Number of low vulnerabilities in the enforcers that in this enforcer group.
     */
    lowVulns?: pulumi.Input<number>;
    /**
     * Number of medium vulnerabilities in the enforcers that in this enforcer group.
     */
    medVulns?: pulumi.Input<number>;
    /**
     * This option is applicable only if `Enable Pod Enforcer injection` is selected.
     */
    microEnforcerCertsSecretsName?: pulumi.Input<string>;
    /**
     * This option is applicable only if `Enable Pod Enforcer injection` is selected. This field specifies the path and file
     * name of the KubeEnforcer product image to be deployed; it will be filled in automatically. You can optionally enter a
     * different value.
     */
    microEnforcerImageName?: pulumi.Input<string>;
    /**
     * This applies only if both `Enable admission control` and Enforce mode are set. This additional option must be selected
     * for admission control to work if the KubeEnforcer is not connected to any Gateway. If this option is not selected,
     * admission control will be disabled; this will have no effect on containers already running.
     */
    microEnforcerInjection?: pulumi.Input<boolean>;
    /**
     * You can specify the name of the secret (in the Aqua namespace) that Aqua copies into the Pod Enforcer namespace and
     * kube-bench, allowing them access to the Pod Enforcer and kube-bench product images, respectively.
     */
    microEnforcerSecretsName?: pulumi.Input<string>;
    /**
     * Number of negligible vulnerabilities in the enforcers that in this enforcer group.
     */
    negVulns?: pulumi.Input<number>;
    /**
     * Send true to apply Firewall Policies to containers, and allow recording network maps for Aqua services. The Network
     * Firewall setting must be disabled when deploying the Aqua Enforcer on a machine running Rocky Linux. See
     * https://docs.aquasec.com/docs/platform-support-limitations-rocky-linux for further information.
     */
    networkProtection?: pulumi.Input<boolean>;
    /**
     * The orchestrator for which you are creating the Enforcer group.
     */
    orchestrators?: pulumi.Input<pulumi.Input<inputs.EnforcerGroupsOrchestrator>[]>;
    /**
     * pas deployment link
     */
    pasDeploymentLink?: pulumi.Input<string>;
    /**
     * Permission Action
     */
    permission?: pulumi.Input<string>;
    /**
     * Set `True` to allow Enforcers to be discovered in the Risk Explorer.
     */
    riskExplorerAutoDiscovery?: pulumi.Input<boolean>;
    /**
     * Function Runtime Policy that will applay on the nano enforcer.
     */
    runtimePolicyName?: pulumi.Input<string>;
    /**
     * The container runtime environment.
     */
    runtimeType?: pulumi.Input<string>;
    /**
     * Set `True` to configure Enforcers to discover local host images. Discovered images will be listed under Images > Host
     * Images, as well as under Infrastructure (in the Images tab for applicable hosts).
     */
    syncHostImages?: pulumi.Input<boolean>;
    /**
     * Set `True` will allow profiling and monitoring system calls made by running containers.
     */
    syscallEnabled?: pulumi.Input<boolean>;
    /**
     * The batch install token.
     */
    token?: pulumi.Input<string>;
    /**
     * Enforcer Type.
     */
    type?: pulumi.Input<string>;
    /**
     * Set `True` to apply User Access Control Policies to containers. Note that Aqua Enforcers must be deployed with the
     * AQUA_RUNC_INTERCEPTION environment variable set to 0 in order to use User Access Control Policies.
     */
    userAccessControl?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a EnforcerGroups resource.
 */
export interface EnforcerGroupsArgs {
    /**
     * Selecting this option will allow the KubeEnforcer to block the deployment of container images that have failed any of
     * these Container Runtime Policy controls:\ * Block Non-Compliant Images\ * Block Non-Compliant Workloads\ * Block
     * Unregistered Images\ This functionality can work only when the KubeEnforcer is deployed in Enforce mode.
     */
    admissionControl?: pulumi.Input<boolean>;
    /**
     * Allow kube enforcer audit.
     */
    allowKubeEnforcerAudit?: pulumi.Input<boolean>;
    /**
     * List of application names to allow on the hosts. if provided, only containers of the listed applications will be allowed
     * to run.
     */
    allowedApplications?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of label names to allow on the hosts.
     */
    allowedLabels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of registry names to allow on the hosts.
     */
    allowedRegistries?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * This setting is available only when you have license for `Advanced Malware Protection`. Send true to make use of the
     * license and enable the `Real-time Malware Protection` control in the Host Runtime policies.
     */
    antivirusProtection?: pulumi.Input<boolean>;
    /**
     * Agent will send extra audit messages to the server for success operations from inside the container (runtime).
     */
    auditAll?: pulumi.Input<boolean>;
    /**
     * This option is applicable only if `Enable Pod Enforcer injection` is selected. Select this option if you want Aqua
     * Enterprise to copy the secrets defined above to the Pod Enforcer namespace and container. Otherwise, you can choose to
     * copy these secrets by other means.
     */
    autoCopySecrets?: pulumi.Input<boolean>;
    /**
     * This option is available only if `Enable workload discovery` is selected. If selected, the KubeEnforcer will add
     * previously unknown image registries from the cluster to Aqua.
     */
    autoDiscoverConfigureRegistries?: pulumi.Input<boolean>;
    /**
     * When this option is selected, the KubeEnforcer will discover workloads on its cluster.
     */
    autoDiscoveryEnabled?: pulumi.Input<boolean>;
    /**
     * This option is available only if `Enable workload discovery` is selected. If selected, the KubeEnforcer will
     * automatically register images running as workloads (and scan the discovered images for security issues).
     */
    autoScanDiscoveredImagesRunningContainers?: pulumi.Input<boolean>;
    /**
     * Select Enabled to detect suspicious activity in your containers and display potential security threats in the Incidents
     * and Audit pages.
     */
    behavioralEngine?: pulumi.Input<boolean>;
    /**
     * This applies only if both `Enable admission control` and Enforce mode are set. This additional option must be selected
     * for admission control to work if the KubeEnforcer is not connected to any Gateway. If this option is not selected,
     * admission control will be disabled; this will have no effect on containers already running.
     */
    blockAdmissionControl?: pulumi.Input<boolean>;
    /**
     * Set `True` to apply Container Runtime Policies, Image Profiles, and Firewall Policies to containers.
     */
    containerActivityProtection?: pulumi.Input<boolean>;
    /**
     * This setting is available only when you have license for `Advanced Malware Protection`. Send true to make use of the
     * license and enable the `Real-time Malware Protection` control in the Container Runtime policies.
     */
    containerAntivirusProtection?: pulumi.Input<boolean>;
    /**
     * A description of the Aqua Enforcer group.
     */
    description?: pulumi.Input<string>;
    /**
     * Whether to enable enforce mode on the Enforcers, defaults to False.
     */
    enforce?: pulumi.Input<boolean>;
    /**
     * Select Enabled to send activity logs in your containers to the Aqua Server for forensics purposes.
     */
    forensics?: pulumi.Input<boolean>;
    /**
     * List of Aqua gateway IDs for the Enforcers.
     */
    gateways?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of the Enforcer group.
     */
    groupId: pulumi.Input<string>;
    /**
     * Set `True` to enable host scanning and respective Host Assurance controls.
     */
    hostAssurance?: pulumi.Input<boolean>;
    /**
     * Set `True` to enable these Host Runtime Policy controls: `OS Users and Groups Allowed` and `OS Users and Groups Blocked`
     */
    hostBehavioralEngine?: pulumi.Input<boolean>;
    /**
     * Select Enabled to send activity logs in your host to the Aqua Server for forensics purposes.
     */
    hostForensics?: pulumi.Input<boolean>;
    /**
     * Set `True` to apply Firewall Policies to hosts, and allow recording network maps for Aqua services. The Network Firewall
     * setting must be disabled when deploying the Aqua Enforcer on a machine running Rocky Linux. See
     * https://docs.aquasec.com/docs/platform-support-limitations-rocky-linux for further information
     */
    hostNetworkProtection?: pulumi.Input<boolean>;
    /**
     * The OS type for the host
     */
    hostOs?: pulumi.Input<string>;
    /**
     * Set `True` to enable all Host Runtime Policy controls except for `OS Users and Groups Allowed` and `OS Users and Groups
     * Blocked`.
     */
    hostProtection?: pulumi.Input<boolean>;
    /**
     * Set `True` to enable these Host Runtime Policy controls: `OS Users and Groups Allowed` and `OS Users and Groups Blocked`
     */
    hostUserProtection?: pulumi.Input<boolean>;
    /**
     * Set `True` to enable selected controls: Container Runtime Policy (`Block Non-Compliant Images`, `Block Unregistered
     * Images`, and `Registries Allowed`) and Default Image Assurance Policy (`Images Blocked`).
     */
    imageAssurance?: pulumi.Input<boolean>;
    /**
     * See https://docs.aquasec.com/docs/securing-kubernetes-applications#section-configuration-hardening, The KubeEnforcer can
     * deploy the Aqua Security kube-bench open-source product to perform Kubernetes CIS benchmark testing of nodes. This field
     * specifies the path and file name of the kube-bench product image for the KubeEnforcer to deploy; it will be filled in
     * automatically. You can optionally enter a different value.
     */
    kubeBenchImageName?: pulumi.Input<string>;
    /**
     * Name for the batch install record.
     */
    logicalName?: pulumi.Input<string>;
    /**
     * This option is applicable only if `Enable Pod Enforcer injection` is selected.
     */
    microEnforcerCertsSecretsName?: pulumi.Input<string>;
    /**
     * This option is applicable only if `Enable Pod Enforcer injection` is selected. This field specifies the path and file
     * name of the KubeEnforcer product image to be deployed; it will be filled in automatically. You can optionally enter a
     * different value.
     */
    microEnforcerImageName?: pulumi.Input<string>;
    /**
     * This applies only if both `Enable admission control` and Enforce mode are set. This additional option must be selected
     * for admission control to work if the KubeEnforcer is not connected to any Gateway. If this option is not selected,
     * admission control will be disabled; this will have no effect on containers already running.
     */
    microEnforcerInjection?: pulumi.Input<boolean>;
    /**
     * You can specify the name of the secret (in the Aqua namespace) that Aqua copies into the Pod Enforcer namespace and
     * kube-bench, allowing them access to the Pod Enforcer and kube-bench product images, respectively.
     */
    microEnforcerSecretsName?: pulumi.Input<string>;
    /**
     * Send true to apply Firewall Policies to containers, and allow recording network maps for Aqua services. The Network
     * Firewall setting must be disabled when deploying the Aqua Enforcer on a machine running Rocky Linux. See
     * https://docs.aquasec.com/docs/platform-support-limitations-rocky-linux for further information.
     */
    networkProtection?: pulumi.Input<boolean>;
    /**
     * The orchestrator for which you are creating the Enforcer group.
     */
    orchestrators: pulumi.Input<pulumi.Input<inputs.EnforcerGroupsOrchestrator>[]>;
    /**
     * Permission Action
     */
    permission?: pulumi.Input<string>;
    /**
     * Set `True` to allow Enforcers to be discovered in the Risk Explorer.
     */
    riskExplorerAutoDiscovery?: pulumi.Input<boolean>;
    /**
     * The container runtime environment.
     */
    runtimeType?: pulumi.Input<string>;
    /**
     * Set `True` to configure Enforcers to discover local host images. Discovered images will be listed under Images > Host
     * Images, as well as under Infrastructure (in the Images tab for applicable hosts).
     */
    syncHostImages?: pulumi.Input<boolean>;
    /**
     * Set `True` will allow profiling and monitoring system calls made by running containers.
     */
    syscallEnabled?: pulumi.Input<boolean>;
    /**
     * Enforcer Type.
     */
    type: pulumi.Input<string>;
    /**
     * Set `True` to apply User Access Control Policies to containers. Note that Aqua Enforcers must be deployed with the
     * AQUA_RUNC_INTERCEPTION environment variable set to 0 in order to use User Access Control Policies.
     */
    userAccessControl?: pulumi.Input<boolean>;
}
