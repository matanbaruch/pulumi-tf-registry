// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getHostAssurancePolicy(args: GetHostAssurancePolicyArgs, opts?: pulumi.InvokeOptions): Promise<GetHostAssurancePolicyResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aquasec:index/getHostAssurancePolicy:getHostAssurancePolicy", {
        "name": args.name,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getHostAssurancePolicy.
 */
export interface GetHostAssurancePolicyArgs {
    name: string;
}

/**
 * A collection of values returned by getHostAssurancePolicy.
 */
export interface GetHostAssurancePolicyResult {
    readonly allowedImages: string[];
    readonly applicationScopes: string[];
    readonly auditOnFailure: boolean;
    readonly author: string;
    readonly autoScanConfigured: boolean;
    readonly autoScanEnabled: boolean;
    readonly autoScanTimes: outputs.GetHostAssurancePolicyAutoScanTime[];
    readonly blacklistPermissions: string[];
    readonly blacklistPermissionsEnabled: boolean;
    readonly blacklistedLicenses: string[];
    readonly blacklistedLicensesEnabled: boolean;
    readonly blockFailed: boolean;
    readonly controlExcludeNoFix: boolean;
    readonly customChecks: outputs.GetHostAssurancePolicyCustomCheck[];
    readonly customChecksEnabled: boolean;
    readonly customSeverityEnabled: boolean;
    readonly cvesBlackListEnabled: boolean;
    readonly cvesBlackLists: string[];
    readonly cvesWhiteListEnabled: boolean;
    readonly cvesWhiteLists: string[];
    readonly cvssSeverity: string;
    readonly cvssSeverityEnabled: boolean;
    readonly cvssSeverityExcludeNoFix: boolean;
    readonly description: string;
    readonly disallowMalware: boolean;
    readonly dockerCisEnabled: boolean;
    readonly domain: string;
    readonly domainName: string;
    readonly dtaEnabled: boolean;
    readonly dtaSeverity: string;
    readonly enabled: boolean;
    readonly enforce: boolean;
    readonly enforceAfterDays: number;
    readonly enforceExcessivePermissions: boolean;
    readonly exceptionalMonitoredMalwarePaths: string[];
    readonly failCicd: boolean;
    readonly forbiddenLabels: outputs.GetHostAssurancePolicyForbiddenLabel[];
    readonly forbiddenLabelsEnabled: boolean;
    readonly forceMicroenforcer: boolean;
    readonly functionIntegrityEnabled: boolean;
    readonly id: string;
    readonly ignoreRecentlyPublishedVln: boolean;
    readonly ignoreRecentlyPublishedVlnPeriod: number;
    readonly ignoreRiskResourcesEnabled: boolean;
    readonly ignoredRiskResources: string[];
    readonly images: string[];
    readonly kubeCisEnabled: boolean;
    readonly labels: string[];
    readonly malwareAction: string;
    readonly maximumScore: number;
    readonly maximumScoreEnabled: boolean;
    readonly maximumScoreExcludeNoFix: boolean;
    readonly monitoredMalwarePaths: string[];
    readonly name: string;
    readonly onlyNoneRootUsers: boolean;
    readonly packagesBlackListEnabled: boolean;
    readonly packagesBlackLists: outputs.GetHostAssurancePolicyPackagesBlackList[];
    readonly packagesWhiteListEnabled: boolean;
    readonly packagesWhiteLists: outputs.GetHostAssurancePolicyPackagesWhiteList[];
    readonly partialResultsImageFail: boolean;
    readonly readOnly: boolean;
    readonly registries: string[];
    readonly registry: string;
    readonly requiredLabels: outputs.GetHostAssurancePolicyRequiredLabel[];
    readonly requiredLabelsEnabled: boolean;
    readonly scanNfsMounts: boolean;
    readonly scanSensitiveData: boolean;
    readonly scapEnabled: boolean;
    readonly scapFiles: string[];
    readonly scopes: outputs.GetHostAssurancePolicyScope[];
    readonly trustedBaseImages: outputs.GetHostAssurancePolicyTrustedBaseImage[];
    readonly trustedBaseImagesEnabled: boolean;
    readonly whitelistedLicenses: string[];
    readonly whitelistedLicensesEnabled: boolean;
}
export function getHostAssurancePolicyOutput(args: GetHostAssurancePolicyOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetHostAssurancePolicyResult> {
    return pulumi.output(args).apply((a: any) => getHostAssurancePolicy(a, opts))
}

/**
 * A collection of arguments for invoking getHostAssurancePolicy.
 */
export interface GetHostAssurancePolicyOutputArgs {
    name: pulumi.Input<string>;
}
