// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface AcknowledgeIssue {
    /**
     * The user who acknowledged the issue.
     */
    author?: pulumi.Input<string>;
    /**
     * The date and time of the acknowledgment.
     */
    date?: pulumi.Input<string>;
    dockerId?: pulumi.Input<string>;
    /**
     * The current dat and time when the expiration was set
     */
    expirationConfiguredAt?: pulumi.Input<string>;
    /**
     * The user who set the expiration of the issue.
     */
    expirationConfiguredBy?: pulumi.Input<string>;
    /**
     * Number of days until expiration of the acknowledgement. The value must be integer from 1 to 999, inclusive.
     */
    expirationDays?: pulumi.Input<number>;
    /**
     * The version of the package that having a fix for the issue.
     */
    fixVersion?: pulumi.Input<string>;
    /**
     * Only acknowledge the issue in the context of the specified image (also requires 'registry_name')
     */
    imageName?: pulumi.Input<string>;
    /**
     * The name of the security issue (the CVE or security advisory for vulnerabilities, name of malware or type of sensitive data)
     */
    issueName: pulumi.Input<string>;
    /**
     * The type of the security issue (either 'vulnerability', 'sensitive_data' or 'malware')
     */
    issueType: pulumi.Input<string>;
    /**
     * When the resource_type is 'package', the operating system is required (e.g., 'ubuntu', 'alpine').
     */
    os?: pulumi.Input<string>;
    /**
     * When the resource_type is 'package', the operating system version is required.
     */
    osVersion?: pulumi.Input<string>;
    /**
     * The permissions of the user who acknowledged the issue.
     */
    permission?: pulumi.Input<string>;
    /**
     * Only acknowledge the issue in the context of the specified repository (also requires 'registry_name').
     */
    registryName?: pulumi.Input<string>;
    /**
     * The CPE of the resource as listed in the issue by the Aqua API. This is required for resources of type 'executable'. For packages and files, the next parameters can be specified instead.
     */
    resourceCpe?: pulumi.Input<string>;
    /**
     * The format of the resource.
     */
    resourceFormat?: pulumi.Input<string>;
    /**
     * When the resource_type is 'file', the hash of the file is required
     */
    resourceHash?: pulumi.Input<string>;
    /**
     * When the resource_type is 'package', the name of the package is required.
     */
    resourceName?: pulumi.Input<string>;
    /**
     * The path of the resource. This is required for resources of type 'file' and 'executable'.
     */
    resourcePath?: pulumi.Input<string>;
    /**
     * The type of the resource where the issue was detected (either 'package', 'file' or 'executable')
     */
    resourceType: pulumi.Input<string>;
    /**
     * When the resource_type is 'package', the version of the package is required
     */
    resourceVersion?: pulumi.Input<string>;
}

export interface ApplicationScopeCategory {
    /**
     * An artifact is an application. It can be an image (for a container, not a CF application); a serverless function; or a Tanzu Application Service (TAS) droplet.
     */
    artifacts?: pulumi.Input<pulumi.Input<inputs.ApplicationScopeCategoryArtifact>[]>;
    entityScopes?: pulumi.Input<pulumi.Input<inputs.ApplicationScopeCategoryEntityScope>[]>;
    /**
     * An infrastructure resource is an element of a computing environment on which a workload is orchestrated and run. It can be a host (VM) or a Kubernetes cluster.
     */
    infrastructures?: pulumi.Input<pulumi.Input<inputs.ApplicationScopeCategoryInfrastructure>[]>;
    /**
     * A workload is a running container. It can run in a Kubernetes cluster, on a VM (no orchestrator), or under Tanzu Application Service (TAS).
     */
    workloads?: pulumi.Input<pulumi.Input<inputs.ApplicationScopeCategoryWorkload>[]>;
}

export interface ApplicationScopeCategoryArtifact {
    cfs?: pulumi.Input<pulumi.Input<inputs.ApplicationScopeCategoryArtifactCf>[]>;
    /**
     * Function name
     */
    functions?: pulumi.Input<pulumi.Input<inputs.ApplicationScopeCategoryArtifactFunction>[]>;
    /**
     * Name of a registry as defined in Aqua
     */
    images?: pulumi.Input<pulumi.Input<inputs.ApplicationScopeCategoryArtifactImage>[]>;
}

export interface ApplicationScopeCategoryArtifactCf {
    expression?: pulumi.Input<string>;
    variables?: pulumi.Input<pulumi.Input<inputs.ApplicationScopeCategoryArtifactCfVariable>[]>;
}

export interface ApplicationScopeCategoryArtifactCfVariable {
    attribute?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ApplicationScopeCategoryArtifactFunction {
    expression?: pulumi.Input<string>;
    variables?: pulumi.Input<pulumi.Input<inputs.ApplicationScopeCategoryArtifactFunctionVariable>[]>;
}

export interface ApplicationScopeCategoryArtifactFunctionVariable {
    attribute?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ApplicationScopeCategoryArtifactImage {
    expression?: pulumi.Input<string>;
    variables?: pulumi.Input<pulumi.Input<inputs.ApplicationScopeCategoryArtifactImageVariable>[]>;
}

export interface ApplicationScopeCategoryArtifactImageVariable {
    attribute?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ApplicationScopeCategoryEntityScope {
    expression: pulumi.Input<string>;
    variables: pulumi.Input<pulumi.Input<inputs.ApplicationScopeCategoryEntityScopeVariable>[]>;
}

export interface ApplicationScopeCategoryEntityScopeVariable {
    attribute: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface ApplicationScopeCategoryInfrastructure {
    kubernetes?: pulumi.Input<pulumi.Input<inputs.ApplicationScopeCategoryInfrastructureKubernete>[]>;
    os?: pulumi.Input<pulumi.Input<inputs.ApplicationScopeCategoryInfrastructureO>[]>;
}

export interface ApplicationScopeCategoryInfrastructureKubernete {
    expression?: pulumi.Input<string>;
    variables?: pulumi.Input<pulumi.Input<inputs.ApplicationScopeCategoryInfrastructureKuberneteVariable>[]>;
}

export interface ApplicationScopeCategoryInfrastructureKuberneteVariable {
    attribute?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ApplicationScopeCategoryInfrastructureO {
    expression?: pulumi.Input<string>;
    variables?: pulumi.Input<pulumi.Input<inputs.ApplicationScopeCategoryInfrastructureOVariable>[]>;
}

export interface ApplicationScopeCategoryInfrastructureOVariable {
    attribute?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ApplicationScopeCategoryWorkload {
    cfs?: pulumi.Input<pulumi.Input<inputs.ApplicationScopeCategoryWorkloadCf>[]>;
    kubernetes?: pulumi.Input<pulumi.Input<inputs.ApplicationScopeCategoryWorkloadKubernete>[]>;
    os?: pulumi.Input<pulumi.Input<inputs.ApplicationScopeCategoryWorkloadO>[]>;
}

export interface ApplicationScopeCategoryWorkloadCf {
    expression?: pulumi.Input<string>;
    variables?: pulumi.Input<pulumi.Input<inputs.ApplicationScopeCategoryWorkloadCfVariable>[]>;
}

export interface ApplicationScopeCategoryWorkloadCfVariable {
    attribute?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ApplicationScopeCategoryWorkloadKubernete {
    expression?: pulumi.Input<string>;
    variables?: pulumi.Input<pulumi.Input<inputs.ApplicationScopeCategoryWorkloadKuberneteVariable>[]>;
}

export interface ApplicationScopeCategoryWorkloadKuberneteVariable {
    attribute?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ApplicationScopeCategoryWorkloadO {
    expression?: pulumi.Input<string>;
    variables?: pulumi.Input<pulumi.Input<inputs.ApplicationScopeCategoryWorkloadOVariable>[]>;
}

export interface ApplicationScopeCategoryWorkloadOVariable {
    attribute?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ContainerRuntimePolicyAllowedExecutable {
    /**
     * List of allowed executables.
     */
    allowExecutables?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of allowed root executables.
     */
    allowRootExecutables?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether allowed executables configuration is enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Whether to treat executables separately.
     */
    separateExecutables?: pulumi.Input<boolean>;
}

export interface ContainerRuntimePolicyAllowedRegistry {
    /**
     * List of allowed registries.
     */
    allowedRegistries?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether allowed registries are enabled.
     */
    enabled?: pulumi.Input<boolean>;
}

export interface ContainerRuntimePolicyAuditing {
    auditAllNetwork?: pulumi.Input<boolean>;
    auditAllProcesses?: pulumi.Input<boolean>;
    auditFailedLogin?: pulumi.Input<boolean>;
    auditOsUserActivity?: pulumi.Input<boolean>;
    auditProcessCmdline?: pulumi.Input<boolean>;
    auditSuccessLogin?: pulumi.Input<boolean>;
    auditUserAccountManagement?: pulumi.Input<boolean>;
    enabled?: pulumi.Input<boolean>;
}

export interface ContainerRuntimePolicyBlacklistedOsUsers {
    enabled?: pulumi.Input<boolean>;
    groupBlackLists?: pulumi.Input<pulumi.Input<string>[]>;
    userBlackLists?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ContainerRuntimePolicyBypassScope {
    /**
     * Whether bypassing the scope is enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Scope configuration.
     */
    scopes?: pulumi.Input<pulumi.Input<inputs.ContainerRuntimePolicyBypassScopeScope>[]>;
}

export interface ContainerRuntimePolicyBypassScopeScope {
    /**
     * Scope expression.
     */
    expression?: pulumi.Input<string>;
    /**
     * List of variables in the scope.
     */
    variables?: pulumi.Input<pulumi.Input<inputs.ContainerRuntimePolicyBypassScopeScopeVariable>[]>;
}

export interface ContainerRuntimePolicyBypassScopeScopeVariable {
    /**
     * Variable attribute.
     */
    attribute?: pulumi.Input<string>;
    /**
     * Variable value.
     */
    value?: pulumi.Input<string>;
}

export interface ContainerRuntimePolicyContainerExec {
    blockContainerExec?: pulumi.Input<boolean>;
    containerExecProcWhiteLists?: pulumi.Input<pulumi.Input<string>[]>;
    enabled?: pulumi.Input<boolean>;
    reverseShellIpWhiteLists?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ContainerRuntimePolicyDriftPrevention {
    /**
     * Whether drift prevention is enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Whether to lockdown execution drift.
     */
    execLockdown?: pulumi.Input<boolean>;
    /**
     * List of items in the execution lockdown white list.
     */
    execLockdownWhiteLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether to lockdown image drift.
     */
    imageLockdown?: pulumi.Input<boolean>;
}

export interface ContainerRuntimePolicyExecutableBlacklist {
    /**
     * Whether the executable blacklist is enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * List of blacklisted executables.
     */
    executables?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ContainerRuntimePolicyFailedKubernetesChecks {
    enabled?: pulumi.Input<boolean>;
    failedChecks?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ContainerRuntimePolicyFileBlock {
    blockFilesProcesses?: pulumi.Input<pulumi.Input<string>[]>;
    blockFilesUsers?: pulumi.Input<pulumi.Input<string>[]>;
    enabled?: pulumi.Input<boolean>;
    exceptionalBlockFiles?: pulumi.Input<pulumi.Input<string>[]>;
    exceptionalBlockFilesProcesses?: pulumi.Input<pulumi.Input<string>[]>;
    exceptionalBlockFilesUsers?: pulumi.Input<pulumi.Input<string>[]>;
    filenameBlockLists?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ContainerRuntimePolicyFileIntegrityMonitoring {
    /**
     * If true, file integrity monitoring is enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * List of paths to be excluded from monitoring.
     */
    exceptionalMonitoredFiles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of processes to be excluded from monitoring.
     */
    exceptionalMonitoredFilesProcesses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of users to be excluded from monitoring.
     */
    exceptionalMonitoredFilesUsers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of paths to be monitored.
     */
    monitoredFiles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether to monitor file attribute operations.
     */
    monitoredFilesAttributes?: pulumi.Input<boolean>;
    /**
     * Whether to monitor file create operations.
     */
    monitoredFilesCreate?: pulumi.Input<boolean>;
    /**
     * Whether to monitor file delete operations.
     */
    monitoredFilesDelete?: pulumi.Input<boolean>;
    /**
     * Whether to monitor file modify operations.
     */
    monitoredFilesModify?: pulumi.Input<boolean>;
    /**
     * List of processes associated with monitored files.
     */
    monitoredFilesProcesses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether to monitor file read operations.
     */
    monitoredFilesRead?: pulumi.Input<boolean>;
    /**
     * List of users associated with monitored files.
     */
    monitoredFilesUsers?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ContainerRuntimePolicyLimitContainerPrivilege {
    /**
     * Whether to block adding capabilities.
     */
    blockAddCapabilities?: pulumi.Input<boolean>;
    /**
     * Whether container privilege limitations are enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Whether to limit IPC-related capabilities.
     */
    ipcmode?: pulumi.Input<boolean>;
    /**
     * Whether to limit network-related capabilities.
     */
    netmode?: pulumi.Input<boolean>;
    /**
     * Whether to limit process-related capabilities.
     */
    pidmode?: pulumi.Input<boolean>;
    /**
     * Whether to prevent low port binding.
     */
    preventLowPortBinding?: pulumi.Input<boolean>;
    /**
     * Whether to prevent the use of the root user.
     */
    preventRootUser?: pulumi.Input<boolean>;
    /**
     * Whether the container is run in privileged mode.
     */
    privileged?: pulumi.Input<boolean>;
    /**
     * Whether to use the host user.
     */
    useHostUser?: pulumi.Input<boolean>;
    /**
     * Whether to limit user-related capabilities.
     */
    usermode?: pulumi.Input<boolean>;
    /**
     * Whether to limit UTS-related capabilities.
     */
    utsmode?: pulumi.Input<boolean>;
}

export interface ContainerRuntimePolicyLinuxCapabilities {
    enabled?: pulumi.Input<boolean>;
    removeLinuxCapabilities?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ContainerRuntimePolicyMalwareScanOptions {
    /**
     * Set Action, Defaults to 'Alert' when empty
     */
    action?: pulumi.Input<string>;
    /**
     * Defines if enabled or not
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * List of registry paths to be excluded from being protected.
     */
    excludeDirectories?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of registry processes to be excluded from being protected.
     */
    excludeProcesses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of registry paths to be excluded from being protected.
     */
    includeDirectories?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ContainerRuntimePolicyPackageBlock {
    blockPackagesProcesses?: pulumi.Input<pulumi.Input<string>[]>;
    blockPackagesUsers?: pulumi.Input<pulumi.Input<string>[]>;
    enabled?: pulumi.Input<boolean>;
    exceptionalBlockPackagesFiles?: pulumi.Input<pulumi.Input<string>[]>;
    exceptionalBlockPackagesProcesses?: pulumi.Input<pulumi.Input<string>[]>;
    exceptionalBlockPackagesUsers?: pulumi.Input<pulumi.Input<string>[]>;
    packagesBlackLists?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ContainerRuntimePolicyPortBlock {
    blockInboundPorts?: pulumi.Input<pulumi.Input<string>[]>;
    blockOutboundPorts?: pulumi.Input<pulumi.Input<string>[]>;
    enabled?: pulumi.Input<boolean>;
}

export interface ContainerRuntimePolicyReadonlyFiles {
    enabled?: pulumi.Input<boolean>;
    exceptionalReadonlyFiles?: pulumi.Input<pulumi.Input<string>[]>;
    exceptionalReadonlyFilesProcesses?: pulumi.Input<pulumi.Input<string>[]>;
    exceptionalReadonlyFilesUsers?: pulumi.Input<pulumi.Input<string>[]>;
    readonlyFiles?: pulumi.Input<pulumi.Input<string>[]>;
    readonlyFilesProcesses?: pulumi.Input<pulumi.Input<string>[]>;
    readonlyFilesUsers?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ContainerRuntimePolicyReadonlyRegistry {
    enabled?: pulumi.Input<boolean>;
    exceptionalReadonlyRegistryPaths?: pulumi.Input<pulumi.Input<string>[]>;
    exceptionalReadonlyRegistryProcesses?: pulumi.Input<pulumi.Input<string>[]>;
    exceptionalReadonlyRegistryUsers?: pulumi.Input<pulumi.Input<string>[]>;
    readonlyRegistryPaths?: pulumi.Input<pulumi.Input<string>[]>;
    readonlyRegistryProcesses?: pulumi.Input<pulumi.Input<string>[]>;
    readonlyRegistryUsers?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ContainerRuntimePolicyRegistryAccessMonitoring {
    enabled?: pulumi.Input<boolean>;
    exceptionalMonitoredRegistryPaths?: pulumi.Input<pulumi.Input<string>[]>;
    exceptionalMonitoredRegistryProcesses?: pulumi.Input<pulumi.Input<string>[]>;
    exceptionalMonitoredRegistryUsers?: pulumi.Input<pulumi.Input<string>[]>;
    monitoredRegistryAttributes?: pulumi.Input<boolean>;
    monitoredRegistryCreate?: pulumi.Input<boolean>;
    monitoredRegistryDelete?: pulumi.Input<boolean>;
    monitoredRegistryModify?: pulumi.Input<boolean>;
    monitoredRegistryPaths?: pulumi.Input<pulumi.Input<string>[]>;
    monitoredRegistryProcesses?: pulumi.Input<pulumi.Input<string>[]>;
    monitoredRegistryRead?: pulumi.Input<boolean>;
    monitoredRegistryUsers?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ContainerRuntimePolicyRestrictedVolume {
    /**
     * Whether restricted volumes are enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * List of restricted volumes.
     */
    volumes?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ContainerRuntimePolicyReverseShell {
    blockReverseShell?: pulumi.Input<boolean>;
    enabled?: pulumi.Input<boolean>;
    reverseShellIpWhiteLists?: pulumi.Input<pulumi.Input<string>[]>;
    reverseShellProcWhiteLists?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ContainerRuntimePolicyScope {
    /**
     * Scope expression.
     */
    expression: pulumi.Input<string>;
    /**
     * List of variables in the scope.
     */
    variables: pulumi.Input<pulumi.Input<inputs.ContainerRuntimePolicyScopeVariable>[]>;
}

export interface ContainerRuntimePolicyScopeVariable {
    /**
     * Class of supported scope.
     */
    attribute: pulumi.Input<string>;
    /**
     * Name assigned to the attribute.
     */
    name?: pulumi.Input<string>;
    /**
     * Value assigned to the attribute.
     */
    value: pulumi.Input<string>;
}

export interface ContainerRuntimePolicySystemIntegrityProtection {
    auditSystemtimeChange?: pulumi.Input<boolean>;
    enabled?: pulumi.Input<boolean>;
    monitorAuditLogIntegrity?: pulumi.Input<boolean>;
    windowsServicesMonitoring?: pulumi.Input<boolean>;
}

export interface ContainerRuntimePolicyTripwire {
    applyOns?: pulumi.Input<pulumi.Input<string>[]>;
    enabled?: pulumi.Input<boolean>;
    serverlessApp?: pulumi.Input<string>;
    userId?: pulumi.Input<string>;
    userPassword?: pulumi.Input<string>;
}

export interface ContainerRuntimePolicyWhitelistedOsUsers {
    enabled?: pulumi.Input<boolean>;
    groupWhiteLists?: pulumi.Input<pulumi.Input<string>[]>;
    userWhiteLists?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface EnforcerGroupsCommand {
    default: pulumi.Input<string>;
    kubernetes: pulumi.Input<string>;
    swarm: pulumi.Input<string>;
    windows: pulumi.Input<string>;
}

export interface EnforcerGroupsOrchestrator {
    master?: pulumi.Input<boolean>;
    /**
     * May be specified for these orchestrators: Kubernetes, Kubernetes GKE, VMware Tanzu Kubernetes Grid Integrated Edition (PKS).
     */
    namespace?: pulumi.Input<string>;
    /**
     * May be specified for these orchestrators: Kubernetes, Kubernetes GKE, OpenShift, VMware Tanzu Kubernetes Grid Integrated Edition (PKS).
     */
    serviceAccount?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface FirewallPolicyInboundNetwork {
    /**
     * Indicates whether the specified resources are allowed to pass in data or requests.
     */
    allow: pulumi.Input<boolean>;
    /**
     * Range of ports affected by firewall.
     */
    portRange: pulumi.Input<string>;
    /**
     * Information of the resource.
     */
    resource?: pulumi.Input<string>;
    /**
     * Type of the resource
     */
    resourceType: pulumi.Input<string>;
}

export interface FirewallPolicyOutboundNetwork {
    /**
     * Indicates whether the specified resources are allowed to receive data or requests.
     */
    allow: pulumi.Input<boolean>;
    /**
     * Range of ports affected by firewall.
     */
    portRange: pulumi.Input<string>;
    /**
     * Information of the resource.
     */
    resource?: pulumi.Input<string>;
    /**
     * Type of the resource.
     */
    resourceType: pulumi.Input<string>;
}

export interface FunctionAssurancePolicyAutoScanTime {
    iteration?: pulumi.Input<number>;
    iterationType?: pulumi.Input<string>;
    time?: pulumi.Input<string>;
    weekDays?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface FunctionAssurancePolicyCustomCheck {
    /**
     * Name of user account that created the policy.
     */
    author?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    engine?: pulumi.Input<string>;
    lastModified?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    path?: pulumi.Input<string>;
    readOnly?: pulumi.Input<boolean>;
    scriptId?: pulumi.Input<string>;
    severity?: pulumi.Input<string>;
    snippet?: pulumi.Input<string>;
}

export interface FunctionAssurancePolicyForbiddenLabel {
    key?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface FunctionAssurancePolicyKubernetesControl {
    avdId?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    kind?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    ootb?: pulumi.Input<boolean>;
    scriptId?: pulumi.Input<number>;
    severity?: pulumi.Input<string>;
}

export interface FunctionAssurancePolicyPackagesBlackList {
    arch?: pulumi.Input<string>;
    display?: pulumi.Input<string>;
    epoch?: pulumi.Input<string>;
    format?: pulumi.Input<string>;
    license?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    release?: pulumi.Input<string>;
    version?: pulumi.Input<string>;
    versionRange?: pulumi.Input<string>;
}

export interface FunctionAssurancePolicyPackagesWhiteList {
    arch?: pulumi.Input<string>;
    display?: pulumi.Input<string>;
    epoch?: pulumi.Input<string>;
    format?: pulumi.Input<string>;
    license?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    release?: pulumi.Input<string>;
    version?: pulumi.Input<string>;
    versionRange?: pulumi.Input<string>;
}

export interface FunctionAssurancePolicyPolicySettings {
    enforce?: pulumi.Input<boolean>;
    isAuditChecked?: pulumi.Input<boolean>;
    warn?: pulumi.Input<boolean>;
    warningMessage?: pulumi.Input<string>;
}

export interface FunctionAssurancePolicyRequiredLabel {
    key?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface FunctionAssurancePolicyScope {
    expression?: pulumi.Input<string>;
    variables?: pulumi.Input<pulumi.Input<inputs.FunctionAssurancePolicyScopeVariable>[]>;
}

export interface FunctionAssurancePolicyScopeVariable {
    attribute?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface FunctionAssurancePolicyTrustedBaseImage {
    imagename?: pulumi.Input<string>;
    registry?: pulumi.Input<string>;
}

export interface FunctionRuntimePolicyAllowedExecutable {
    /**
     * List of allowed executables.
     */
    allowExecutables?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of allowed root executables.
     */
    allowRootExecutables?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether allowed executables configuration is enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Whether to treat executables separately.
     */
    separateExecutables?: pulumi.Input<boolean>;
}

export interface FunctionRuntimePolicyAllowedRegistry {
    /**
     * List of allowed registries.
     */
    allowedRegistries?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether allowed registries are enabled.
     */
    enabled?: pulumi.Input<boolean>;
}

export interface FunctionRuntimePolicyAuditing {
    auditAllNetwork?: pulumi.Input<boolean>;
    auditAllProcesses?: pulumi.Input<boolean>;
    auditFailedLogin?: pulumi.Input<boolean>;
    auditOsUserActivity?: pulumi.Input<boolean>;
    auditProcessCmdline?: pulumi.Input<boolean>;
    auditSuccessLogin?: pulumi.Input<boolean>;
    auditUserAccountManagement?: pulumi.Input<boolean>;
    enabled?: pulumi.Input<boolean>;
}

export interface FunctionRuntimePolicyBlacklistedOsUsers {
    enabled?: pulumi.Input<boolean>;
    groupBlackLists?: pulumi.Input<pulumi.Input<string>[]>;
    userBlackLists?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface FunctionRuntimePolicyBypassScope {
    /**
     * Whether bypassing the scope is enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Scope configuration.
     */
    scopes?: pulumi.Input<pulumi.Input<inputs.FunctionRuntimePolicyBypassScopeScope>[]>;
}

export interface FunctionRuntimePolicyBypassScopeScope {
    /**
     * Scope expression.
     */
    expression?: pulumi.Input<string>;
    /**
     * List of variables in the scope.
     */
    variables?: pulumi.Input<pulumi.Input<inputs.FunctionRuntimePolicyBypassScopeScopeVariable>[]>;
}

export interface FunctionRuntimePolicyBypassScopeScopeVariable {
    /**
     * Variable attribute.
     */
    attribute?: pulumi.Input<string>;
    /**
     * Variable value.
     */
    value?: pulumi.Input<string>;
}

export interface FunctionRuntimePolicyContainerExec {
    blockContainerExec?: pulumi.Input<boolean>;
    containerExecProcWhiteLists?: pulumi.Input<pulumi.Input<string>[]>;
    enabled?: pulumi.Input<boolean>;
    reverseShellIpWhiteLists?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface FunctionRuntimePolicyDriftPrevention {
    /**
     * Whether drift prevention is enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Whether to lockdown execution drift.
     */
    execLockdown?: pulumi.Input<boolean>;
    /**
     * List of items in the execution lockdown white list.
     */
    execLockdownWhiteLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether to lockdown image drift.
     */
    imageLockdown?: pulumi.Input<boolean>;
}

export interface FunctionRuntimePolicyExecutableBlacklist {
    /**
     * Whether the executable blacklist is enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * List of blacklisted executables.
     */
    executables?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface FunctionRuntimePolicyFailedKubernetesChecks {
    enabled?: pulumi.Input<boolean>;
    failedChecks?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface FunctionRuntimePolicyFileBlock {
    blockFilesProcesses?: pulumi.Input<pulumi.Input<string>[]>;
    blockFilesUsers?: pulumi.Input<pulumi.Input<string>[]>;
    enabled?: pulumi.Input<boolean>;
    exceptionalBlockFiles?: pulumi.Input<pulumi.Input<string>[]>;
    exceptionalBlockFilesProcesses?: pulumi.Input<pulumi.Input<string>[]>;
    exceptionalBlockFilesUsers?: pulumi.Input<pulumi.Input<string>[]>;
    filenameBlockLists?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface FunctionRuntimePolicyFileIntegrityMonitoring {
    /**
     * If true, file integrity monitoring is enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * List of paths to be excluded from monitoring.
     */
    exceptionalMonitoredFiles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of processes to be excluded from monitoring.
     */
    exceptionalMonitoredFilesProcesses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of users to be excluded from monitoring.
     */
    exceptionalMonitoredFilesUsers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of paths to be monitored.
     */
    monitoredFiles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether to monitor file attribute operations.
     */
    monitoredFilesAttributes?: pulumi.Input<boolean>;
    /**
     * Whether to monitor file create operations.
     */
    monitoredFilesCreate?: pulumi.Input<boolean>;
    /**
     * Whether to monitor file delete operations.
     */
    monitoredFilesDelete?: pulumi.Input<boolean>;
    /**
     * Whether to monitor file modify operations.
     */
    monitoredFilesModify?: pulumi.Input<boolean>;
    /**
     * List of processes associated with monitored files.
     */
    monitoredFilesProcesses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether to monitor file read operations.
     */
    monitoredFilesRead?: pulumi.Input<boolean>;
    /**
     * List of users associated with monitored files.
     */
    monitoredFilesUsers?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface FunctionRuntimePolicyLimitContainerPrivilege {
    /**
     * Whether to block adding capabilities.
     */
    blockAddCapabilities?: pulumi.Input<boolean>;
    /**
     * Whether container privilege limitations are enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Whether to limit IPC-related capabilities.
     */
    ipcmode?: pulumi.Input<boolean>;
    /**
     * Whether to limit network-related capabilities.
     */
    netmode?: pulumi.Input<boolean>;
    /**
     * Whether to limit process-related capabilities.
     */
    pidmode?: pulumi.Input<boolean>;
    /**
     * Whether to prevent low port binding.
     */
    preventLowPortBinding?: pulumi.Input<boolean>;
    /**
     * Whether to prevent the use of the root user.
     */
    preventRootUser?: pulumi.Input<boolean>;
    /**
     * Whether the container is run in privileged mode.
     */
    privileged?: pulumi.Input<boolean>;
    /**
     * Whether to use the host user.
     */
    useHostUser?: pulumi.Input<boolean>;
    /**
     * Whether to limit user-related capabilities.
     */
    usermode?: pulumi.Input<boolean>;
    /**
     * Whether to limit UTS-related capabilities.
     */
    utsmode?: pulumi.Input<boolean>;
}

export interface FunctionRuntimePolicyLinuxCapabilities {
    enabled?: pulumi.Input<boolean>;
    removeLinuxCapabilities?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface FunctionRuntimePolicyMalwareScanOptions {
    /**
     * Set Action, Defaults to 'Alert' when empty
     */
    action?: pulumi.Input<string>;
    /**
     * Defines if enabled or not
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * List of registry paths to be excluded from being protected.
     */
    excludeDirectories?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of registry processes to be excluded from being protected.
     */
    excludeProcesses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of registry paths to be excluded from being protected.
     */
    includeDirectories?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface FunctionRuntimePolicyPackageBlock {
    blockPackagesProcesses?: pulumi.Input<pulumi.Input<string>[]>;
    blockPackagesUsers?: pulumi.Input<pulumi.Input<string>[]>;
    enabled?: pulumi.Input<boolean>;
    exceptionalBlockPackagesFiles?: pulumi.Input<pulumi.Input<string>[]>;
    exceptionalBlockPackagesProcesses?: pulumi.Input<pulumi.Input<string>[]>;
    exceptionalBlockPackagesUsers?: pulumi.Input<pulumi.Input<string>[]>;
    packagesBlackLists?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface FunctionRuntimePolicyPortBlock {
    blockInboundPorts?: pulumi.Input<pulumi.Input<string>[]>;
    blockOutboundPorts?: pulumi.Input<pulumi.Input<string>[]>;
    enabled?: pulumi.Input<boolean>;
}

export interface FunctionRuntimePolicyReadonlyFiles {
    enabled?: pulumi.Input<boolean>;
    exceptionalReadonlyFiles?: pulumi.Input<pulumi.Input<string>[]>;
    exceptionalReadonlyFilesProcesses?: pulumi.Input<pulumi.Input<string>[]>;
    exceptionalReadonlyFilesUsers?: pulumi.Input<pulumi.Input<string>[]>;
    readonlyFiles?: pulumi.Input<pulumi.Input<string>[]>;
    readonlyFilesProcesses?: pulumi.Input<pulumi.Input<string>[]>;
    readonlyFilesUsers?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface FunctionRuntimePolicyReadonlyRegistry {
    enabled?: pulumi.Input<boolean>;
    exceptionalReadonlyRegistryPaths?: pulumi.Input<pulumi.Input<string>[]>;
    exceptionalReadonlyRegistryProcesses?: pulumi.Input<pulumi.Input<string>[]>;
    exceptionalReadonlyRegistryUsers?: pulumi.Input<pulumi.Input<string>[]>;
    readonlyRegistryPaths?: pulumi.Input<pulumi.Input<string>[]>;
    readonlyRegistryProcesses?: pulumi.Input<pulumi.Input<string>[]>;
    readonlyRegistryUsers?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface FunctionRuntimePolicyRegistryAccessMonitoring {
    enabled?: pulumi.Input<boolean>;
    exceptionalMonitoredRegistryPaths?: pulumi.Input<pulumi.Input<string>[]>;
    exceptionalMonitoredRegistryProcesses?: pulumi.Input<pulumi.Input<string>[]>;
    exceptionalMonitoredRegistryUsers?: pulumi.Input<pulumi.Input<string>[]>;
    monitoredRegistryAttributes?: pulumi.Input<boolean>;
    monitoredRegistryCreate?: pulumi.Input<boolean>;
    monitoredRegistryDelete?: pulumi.Input<boolean>;
    monitoredRegistryModify?: pulumi.Input<boolean>;
    monitoredRegistryPaths?: pulumi.Input<pulumi.Input<string>[]>;
    monitoredRegistryProcesses?: pulumi.Input<pulumi.Input<string>[]>;
    monitoredRegistryRead?: pulumi.Input<boolean>;
    monitoredRegistryUsers?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface FunctionRuntimePolicyRestrictedVolume {
    /**
     * Whether restricted volumes are enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * List of restricted volumes.
     */
    volumes?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface FunctionRuntimePolicyReverseShell {
    blockReverseShell?: pulumi.Input<boolean>;
    enabled?: pulumi.Input<boolean>;
    reverseShellIpWhiteLists?: pulumi.Input<pulumi.Input<string>[]>;
    reverseShellProcWhiteLists?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface FunctionRuntimePolicyScope {
    /**
     * Scope expression.
     */
    expression: pulumi.Input<string>;
    /**
     * List of variables in the scope.
     */
    variables: pulumi.Input<pulumi.Input<inputs.FunctionRuntimePolicyScopeVariable>[]>;
}

export interface FunctionRuntimePolicyScopeVariable {
    /**
     * Class of supported scope.
     */
    attribute: pulumi.Input<string>;
    /**
     * Name assigned to the attribute.
     */
    name?: pulumi.Input<string>;
    /**
     * Value assigned to the attribute.
     */
    value: pulumi.Input<string>;
}

export interface FunctionRuntimePolicySystemIntegrityProtection {
    auditSystemtimeChange?: pulumi.Input<boolean>;
    enabled?: pulumi.Input<boolean>;
    monitorAuditLogIntegrity?: pulumi.Input<boolean>;
    windowsServicesMonitoring?: pulumi.Input<boolean>;
}

export interface FunctionRuntimePolicyTripwire {
    applyOns?: pulumi.Input<pulumi.Input<string>[]>;
    enabled?: pulumi.Input<boolean>;
    serverlessApp?: pulumi.Input<string>;
    userId?: pulumi.Input<string>;
    userPassword?: pulumi.Input<string>;
}

export interface FunctionRuntimePolicyWhitelistedOsUsers {
    enabled?: pulumi.Input<boolean>;
    groupWhiteLists?: pulumi.Input<pulumi.Input<string>[]>;
    userWhiteLists?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetApplicationScopeCategory {
    artifacts?: inputs.GetApplicationScopeCategoryArtifact[];
    entityScopes?: inputs.GetApplicationScopeCategoryEntityScope[];
    infrastructures?: inputs.GetApplicationScopeCategoryInfrastructure[];
    workloads?: inputs.GetApplicationScopeCategoryWorkload[];
}

export interface GetApplicationScopeCategoryArgs {
    artifacts?: pulumi.Input<pulumi.Input<inputs.GetApplicationScopeCategoryArtifactArgs>[]>;
    entityScopes?: pulumi.Input<pulumi.Input<inputs.GetApplicationScopeCategoryEntityScopeArgs>[]>;
    infrastructures?: pulumi.Input<pulumi.Input<inputs.GetApplicationScopeCategoryInfrastructureArgs>[]>;
    workloads?: pulumi.Input<pulumi.Input<inputs.GetApplicationScopeCategoryWorkloadArgs>[]>;
}

export interface GetApplicationScopeCategoryArtifact {
    cfs?: inputs.GetApplicationScopeCategoryArtifactCf[];
    functions?: inputs.GetApplicationScopeCategoryArtifactFunction[];
    images?: inputs.GetApplicationScopeCategoryArtifactImage[];
}

export interface GetApplicationScopeCategoryArtifactArgs {
    cfs?: pulumi.Input<pulumi.Input<inputs.GetApplicationScopeCategoryArtifactCfArgs>[]>;
    functions?: pulumi.Input<pulumi.Input<inputs.GetApplicationScopeCategoryArtifactFunctionArgs>[]>;
    images?: pulumi.Input<pulumi.Input<inputs.GetApplicationScopeCategoryArtifactImageArgs>[]>;
}

export interface GetApplicationScopeCategoryArtifactCf {
    expression?: string;
    variables?: inputs.GetApplicationScopeCategoryArtifactCfVariable[];
}

export interface GetApplicationScopeCategoryArtifactCfArgs {
    expression?: pulumi.Input<string>;
    variables?: pulumi.Input<pulumi.Input<inputs.GetApplicationScopeCategoryArtifactCfVariableArgs>[]>;
}

export interface GetApplicationScopeCategoryArtifactCfVariable {
    attribute?: string;
    value?: string;
}

export interface GetApplicationScopeCategoryArtifactCfVariableArgs {
    attribute?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface GetApplicationScopeCategoryArtifactFunction {
    expression?: string;
    variables?: inputs.GetApplicationScopeCategoryArtifactFunctionVariable[];
}

export interface GetApplicationScopeCategoryArtifactFunctionArgs {
    expression?: pulumi.Input<string>;
    variables?: pulumi.Input<pulumi.Input<inputs.GetApplicationScopeCategoryArtifactFunctionVariableArgs>[]>;
}

export interface GetApplicationScopeCategoryArtifactFunctionVariable {
    attribute?: string;
    value?: string;
}

export interface GetApplicationScopeCategoryArtifactFunctionVariableArgs {
    attribute?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface GetApplicationScopeCategoryArtifactImage {
    expression?: string;
    variables?: inputs.GetApplicationScopeCategoryArtifactImageVariable[];
}

export interface GetApplicationScopeCategoryArtifactImageArgs {
    expression?: pulumi.Input<string>;
    variables?: pulumi.Input<pulumi.Input<inputs.GetApplicationScopeCategoryArtifactImageVariableArgs>[]>;
}

export interface GetApplicationScopeCategoryArtifactImageVariable {
    attribute?: string;
    value?: string;
}

export interface GetApplicationScopeCategoryArtifactImageVariableArgs {
    attribute?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface GetApplicationScopeCategoryEntityScope {
    expression?: string;
    variables?: inputs.GetApplicationScopeCategoryEntityScopeVariable[];
}

export interface GetApplicationScopeCategoryEntityScopeArgs {
    expression?: pulumi.Input<string>;
    variables?: pulumi.Input<pulumi.Input<inputs.GetApplicationScopeCategoryEntityScopeVariableArgs>[]>;
}

export interface GetApplicationScopeCategoryEntityScopeVariable {
    attribute?: string;
    value?: string;
}

export interface GetApplicationScopeCategoryEntityScopeVariableArgs {
    attribute?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface GetApplicationScopeCategoryInfrastructure {
    kubernetes?: inputs.GetApplicationScopeCategoryInfrastructureKubernete[];
    os?: inputs.GetApplicationScopeCategoryInfrastructureO[];
}

export interface GetApplicationScopeCategoryInfrastructureArgs {
    kubernetes?: pulumi.Input<pulumi.Input<inputs.GetApplicationScopeCategoryInfrastructureKuberneteArgs>[]>;
    os?: pulumi.Input<pulumi.Input<inputs.GetApplicationScopeCategoryInfrastructureOArgs>[]>;
}

export interface GetApplicationScopeCategoryInfrastructureKubernete {
    expression?: string;
    variables?: inputs.GetApplicationScopeCategoryInfrastructureKuberneteVariable[];
}

export interface GetApplicationScopeCategoryInfrastructureKuberneteArgs {
    expression?: pulumi.Input<string>;
    variables?: pulumi.Input<pulumi.Input<inputs.GetApplicationScopeCategoryInfrastructureKuberneteVariableArgs>[]>;
}

export interface GetApplicationScopeCategoryInfrastructureKuberneteVariable {
    attribute?: string;
    value?: string;
}

export interface GetApplicationScopeCategoryInfrastructureKuberneteVariableArgs {
    attribute?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface GetApplicationScopeCategoryInfrastructureO {
    expression?: string;
    variables?: inputs.GetApplicationScopeCategoryInfrastructureOVariable[];
}

export interface GetApplicationScopeCategoryInfrastructureOArgs {
    expression?: pulumi.Input<string>;
    variables?: pulumi.Input<pulumi.Input<inputs.GetApplicationScopeCategoryInfrastructureOVariableArgs>[]>;
}

export interface GetApplicationScopeCategoryInfrastructureOVariable {
    attribute?: string;
    value?: string;
}

export interface GetApplicationScopeCategoryInfrastructureOVariableArgs {
    attribute?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface GetApplicationScopeCategoryWorkload {
    cfs?: inputs.GetApplicationScopeCategoryWorkloadCf[];
    kubernetes?: inputs.GetApplicationScopeCategoryWorkloadKubernete[];
    os?: inputs.GetApplicationScopeCategoryWorkloadO[];
}

export interface GetApplicationScopeCategoryWorkloadArgs {
    cfs?: pulumi.Input<pulumi.Input<inputs.GetApplicationScopeCategoryWorkloadCfArgs>[]>;
    kubernetes?: pulumi.Input<pulumi.Input<inputs.GetApplicationScopeCategoryWorkloadKuberneteArgs>[]>;
    os?: pulumi.Input<pulumi.Input<inputs.GetApplicationScopeCategoryWorkloadOArgs>[]>;
}

export interface GetApplicationScopeCategoryWorkloadCf {
    expression?: string;
    variables?: inputs.GetApplicationScopeCategoryWorkloadCfVariable[];
}

export interface GetApplicationScopeCategoryWorkloadCfArgs {
    expression?: pulumi.Input<string>;
    variables?: pulumi.Input<pulumi.Input<inputs.GetApplicationScopeCategoryWorkloadCfVariableArgs>[]>;
}

export interface GetApplicationScopeCategoryWorkloadCfVariable {
    attribute?: string;
    value?: string;
}

export interface GetApplicationScopeCategoryWorkloadCfVariableArgs {
    attribute?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface GetApplicationScopeCategoryWorkloadKubernete {
    expression?: string;
    variables?: inputs.GetApplicationScopeCategoryWorkloadKuberneteVariable[];
}

export interface GetApplicationScopeCategoryWorkloadKuberneteArgs {
    expression?: pulumi.Input<string>;
    variables?: pulumi.Input<pulumi.Input<inputs.GetApplicationScopeCategoryWorkloadKuberneteVariableArgs>[]>;
}

export interface GetApplicationScopeCategoryWorkloadKuberneteVariable {
    attribute?: string;
    value?: string;
}

export interface GetApplicationScopeCategoryWorkloadKuberneteVariableArgs {
    attribute?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface GetApplicationScopeCategoryWorkloadO {
    expression?: string;
    variables?: inputs.GetApplicationScopeCategoryWorkloadOVariable[];
}

export interface GetApplicationScopeCategoryWorkloadOArgs {
    expression?: pulumi.Input<string>;
    variables?: pulumi.Input<pulumi.Input<inputs.GetApplicationScopeCategoryWorkloadOVariableArgs>[]>;
}

export interface GetApplicationScopeCategoryWorkloadOVariable {
    attribute?: string;
    value?: string;
}

export interface GetApplicationScopeCategoryWorkloadOVariableArgs {
    attribute?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface GetContainerRuntimePolicyAllowedExecutable {
    /**
     * List of allowed executables.
     */
    allowExecutables?: string[];
    /**
     * List of allowed root executables.
     */
    allowRootExecutables?: string[];
    /**
     * Whether allowed executables configuration is enabled.
     */
    enabled?: boolean;
    /**
     * Whether to treat executables separately.
     */
    separateExecutables?: boolean;
}

export interface GetContainerRuntimePolicyAllowedExecutableArgs {
    /**
     * List of allowed executables.
     */
    allowExecutables?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of allowed root executables.
     */
    allowRootExecutables?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether allowed executables configuration is enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Whether to treat executables separately.
     */
    separateExecutables?: pulumi.Input<boolean>;
}

export interface GetContainerRuntimePolicyAllowedRegistry {
    /**
     * List of allowed registries.
     */
    allowedRegistries?: string[];
    /**
     * Whether allowed registries are enabled.
     */
    enabled?: boolean;
}

export interface GetContainerRuntimePolicyAllowedRegistryArgs {
    /**
     * List of allowed registries.
     */
    allowedRegistries?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether allowed registries are enabled.
     */
    enabled?: pulumi.Input<boolean>;
}

export interface GetContainerRuntimePolicyAuditing {
    auditAllNetwork?: boolean;
    auditAllProcesses?: boolean;
    auditFailedLogin?: boolean;
    auditOsUserActivity?: boolean;
    auditProcessCmdline?: boolean;
    auditSuccessLogin?: boolean;
    auditUserAccountManagement?: boolean;
    enabled?: boolean;
}

export interface GetContainerRuntimePolicyAuditingArgs {
    auditAllNetwork?: pulumi.Input<boolean>;
    auditAllProcesses?: pulumi.Input<boolean>;
    auditFailedLogin?: pulumi.Input<boolean>;
    auditOsUserActivity?: pulumi.Input<boolean>;
    auditProcessCmdline?: pulumi.Input<boolean>;
    auditSuccessLogin?: pulumi.Input<boolean>;
    auditUserAccountManagement?: pulumi.Input<boolean>;
    enabled?: pulumi.Input<boolean>;
}

export interface GetContainerRuntimePolicyContainerExec {
    blockContainerExec?: boolean;
    containerExecProcWhiteLists?: string[];
    enabled?: boolean;
    reverseShellIpWhiteLists?: string[];
}

export interface GetContainerRuntimePolicyContainerExecArgs {
    blockContainerExec?: pulumi.Input<boolean>;
    containerExecProcWhiteLists?: pulumi.Input<pulumi.Input<string>[]>;
    enabled?: pulumi.Input<boolean>;
    reverseShellIpWhiteLists?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetContainerRuntimePolicyFileBlock {
    blockFilesProcesses?: string[];
    blockFilesUsers?: string[];
    enabled?: boolean;
    exceptionalBlockFiles?: string[];
    exceptionalBlockFilesProcesses?: string[];
    exceptionalBlockFilesUsers?: string[];
    filenameBlockLists?: string[];
}

export interface GetContainerRuntimePolicyFileBlockArgs {
    blockFilesProcesses?: pulumi.Input<pulumi.Input<string>[]>;
    blockFilesUsers?: pulumi.Input<pulumi.Input<string>[]>;
    enabled?: pulumi.Input<boolean>;
    exceptionalBlockFiles?: pulumi.Input<pulumi.Input<string>[]>;
    exceptionalBlockFilesProcesses?: pulumi.Input<pulumi.Input<string>[]>;
    exceptionalBlockFilesUsers?: pulumi.Input<pulumi.Input<string>[]>;
    filenameBlockLists?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetContainerRuntimePolicyFileIntegrityMonitoring {
    /**
     * If true, file integrity monitoring is enabled.
     */
    enabled?: boolean;
    /**
     * List of paths to be excluded from monitoring.
     */
    exceptionalMonitoredFiles?: string[];
    /**
     * List of processes to be excluded from monitoring.
     */
    exceptionalMonitoredFilesProcesses?: string[];
    /**
     * List of users to be excluded from monitoring.
     */
    exceptionalMonitoredFilesUsers?: string[];
    /**
     * List of paths to be monitored.
     */
    monitoredFiles?: string[];
    /**
     * Whether to monitor file attribute operations.
     */
    monitoredFilesAttributes?: boolean;
    /**
     * Whether to monitor file create operations.
     */
    monitoredFilesCreate?: boolean;
    /**
     * Whether to monitor file delete operations.
     */
    monitoredFilesDelete?: boolean;
    /**
     * Whether to monitor file modify operations.
     */
    monitoredFilesModify?: boolean;
    /**
     * List of processes associated with monitored files.
     */
    monitoredFilesProcesses?: string[];
    /**
     * Whether to monitor file read operations.
     */
    monitoredFilesRead?: boolean;
    /**
     * List of users associated with monitored files.
     */
    monitoredFilesUsers?: string[];
}

export interface GetContainerRuntimePolicyFileIntegrityMonitoringArgs {
    /**
     * If true, file integrity monitoring is enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * List of paths to be excluded from monitoring.
     */
    exceptionalMonitoredFiles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of processes to be excluded from monitoring.
     */
    exceptionalMonitoredFilesProcesses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of users to be excluded from monitoring.
     */
    exceptionalMonitoredFilesUsers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of paths to be monitored.
     */
    monitoredFiles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether to monitor file attribute operations.
     */
    monitoredFilesAttributes?: pulumi.Input<boolean>;
    /**
     * Whether to monitor file create operations.
     */
    monitoredFilesCreate?: pulumi.Input<boolean>;
    /**
     * Whether to monitor file delete operations.
     */
    monitoredFilesDelete?: pulumi.Input<boolean>;
    /**
     * Whether to monitor file modify operations.
     */
    monitoredFilesModify?: pulumi.Input<boolean>;
    /**
     * List of processes associated with monitored files.
     */
    monitoredFilesProcesses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether to monitor file read operations.
     */
    monitoredFilesRead?: pulumi.Input<boolean>;
    /**
     * List of users associated with monitored files.
     */
    monitoredFilesUsers?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetContainerRuntimePolicyLimitContainerPrivilege {
    /**
     * Whether to block adding capabilities.
     */
    blockAddCapabilities?: boolean;
    /**
     * Whether container privilege limitations are enabled.
     */
    enabled?: boolean;
    /**
     * Whether to limit IPC-related capabilities.
     */
    ipcmode?: boolean;
    /**
     * Whether to limit network-related capabilities.
     */
    netmode?: boolean;
    /**
     * Whether to limit process-related capabilities.
     */
    pidmode?: boolean;
    /**
     * Whether to prevent low port binding.
     */
    preventLowPortBinding?: boolean;
    /**
     * Whether to prevent the use of the root user.
     */
    preventRootUser?: boolean;
    /**
     * Whether the container is run in privileged mode.
     */
    privileged?: boolean;
    /**
     * Whether to use the host user.
     */
    useHostUser?: boolean;
    /**
     * Whether to limit user-related capabilities.
     */
    usermode?: boolean;
    /**
     * Whether to limit UTS-related capabilities.
     */
    utsmode?: boolean;
}

export interface GetContainerRuntimePolicyLimitContainerPrivilegeArgs {
    /**
     * Whether to block adding capabilities.
     */
    blockAddCapabilities?: pulumi.Input<boolean>;
    /**
     * Whether container privilege limitations are enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Whether to limit IPC-related capabilities.
     */
    ipcmode?: pulumi.Input<boolean>;
    /**
     * Whether to limit network-related capabilities.
     */
    netmode?: pulumi.Input<boolean>;
    /**
     * Whether to limit process-related capabilities.
     */
    pidmode?: pulumi.Input<boolean>;
    /**
     * Whether to prevent low port binding.
     */
    preventLowPortBinding?: pulumi.Input<boolean>;
    /**
     * Whether to prevent the use of the root user.
     */
    preventRootUser?: pulumi.Input<boolean>;
    /**
     * Whether the container is run in privileged mode.
     */
    privileged?: pulumi.Input<boolean>;
    /**
     * Whether to use the host user.
     */
    useHostUser?: pulumi.Input<boolean>;
    /**
     * Whether to limit user-related capabilities.
     */
    usermode?: pulumi.Input<boolean>;
    /**
     * Whether to limit UTS-related capabilities.
     */
    utsmode?: pulumi.Input<boolean>;
}

export interface GetContainerRuntimePolicyMalwareScanOptions {
    /**
     * Set Action, Defaults to 'Alert' when empty
     */
    action?: string;
    /**
     * Defines if enabled or not
     */
    enabled?: boolean;
    /**
     * List of registry paths to be excluded from being protected.
     */
    excludeDirectories?: string[];
    /**
     * List of registry processes to be excluded from being protected.
     */
    excludeProcesses?: string[];
    /**
     * List of registry paths to be excluded from being protected.
     */
    includeDirectories?: string[];
}

export interface GetContainerRuntimePolicyMalwareScanOptionsArgs {
    /**
     * Set Action, Defaults to 'Alert' when empty
     */
    action?: pulumi.Input<string>;
    /**
     * Defines if enabled or not
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * List of registry paths to be excluded from being protected.
     */
    excludeDirectories?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of registry processes to be excluded from being protected.
     */
    excludeProcesses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of registry paths to be excluded from being protected.
     */
    includeDirectories?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetContainerRuntimePolicyPortBlock {
    blockInboundPorts?: string[];
    blockOutboundPorts?: string[];
    enabled?: boolean;
}

export interface GetContainerRuntimePolicyPortBlockArgs {
    blockInboundPorts?: pulumi.Input<pulumi.Input<string>[]>;
    blockOutboundPorts?: pulumi.Input<pulumi.Input<string>[]>;
    enabled?: pulumi.Input<boolean>;
}

export interface GetContainerRuntimePolicyReadonlyFiles {
    enabled?: boolean;
    exceptionalReadonlyFiles?: string[];
    exceptionalReadonlyFilesProcesses?: string[];
    exceptionalReadonlyFilesUsers?: string[];
    readonlyFiles?: string[];
    readonlyFilesProcesses?: string[];
    readonlyFilesUsers?: string[];
}

export interface GetContainerRuntimePolicyReadonlyFilesArgs {
    enabled?: pulumi.Input<boolean>;
    exceptionalReadonlyFiles?: pulumi.Input<pulumi.Input<string>[]>;
    exceptionalReadonlyFilesProcesses?: pulumi.Input<pulumi.Input<string>[]>;
    exceptionalReadonlyFilesUsers?: pulumi.Input<pulumi.Input<string>[]>;
    readonlyFiles?: pulumi.Input<pulumi.Input<string>[]>;
    readonlyFilesProcesses?: pulumi.Input<pulumi.Input<string>[]>;
    readonlyFilesUsers?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetContainerRuntimePolicyRestrictedVolume {
    /**
     * Whether restricted volumes are enabled.
     */
    enabled?: boolean;
    /**
     * List of restricted volumes.
     */
    volumes?: string[];
}

export interface GetContainerRuntimePolicyRestrictedVolumeArgs {
    /**
     * Whether restricted volumes are enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * List of restricted volumes.
     */
    volumes?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetFirewallPolicyOutboundNetwork {
    /**
     * Indicates whether the specified resources are allowed to receive data or requests.
     */
    allow?: boolean;
    /**
     * Range of ports affected by firewall.
     */
    portRange?: string;
    /**
     * Information of the resource.
     */
    resource?: string;
    /**
     * Type of the resource.
     */
    resourceType?: string;
}

export interface GetFirewallPolicyOutboundNetworkArgs {
    /**
     * Indicates whether the specified resources are allowed to receive data or requests.
     */
    allow?: pulumi.Input<boolean>;
    /**
     * Range of ports affected by firewall.
     */
    portRange?: pulumi.Input<string>;
    /**
     * Information of the resource.
     */
    resource?: pulumi.Input<string>;
    /**
     * Type of the resource.
     */
    resourceType?: pulumi.Input<string>;
}

export interface GetFunctionRuntimePolicyDriftPrevention {
    /**
     * Whether drift prevention is enabled.
     */
    enabled?: boolean;
    /**
     * Whether to lockdown execution drift.
     */
    execLockdown?: boolean;
    /**
     * List of items in the execution lockdown white list.
     */
    execLockdownWhiteLists?: string[];
    /**
     * Whether to lockdown image drift.
     */
    imageLockdown?: boolean;
}

export interface GetFunctionRuntimePolicyDriftPreventionArgs {
    /**
     * Whether drift prevention is enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Whether to lockdown execution drift.
     */
    execLockdown?: pulumi.Input<boolean>;
    /**
     * List of items in the execution lockdown white list.
     */
    execLockdownWhiteLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether to lockdown image drift.
     */
    imageLockdown?: pulumi.Input<boolean>;
}

export interface GetFunctionRuntimePolicyExecutableBlacklist {
    /**
     * Whether the executable blacklist is enabled.
     */
    enabled?: boolean;
    /**
     * List of blacklisted executables.
     */
    executables?: string[];
}

export interface GetFunctionRuntimePolicyExecutableBlacklistArgs {
    /**
     * Whether the executable blacklist is enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * List of blacklisted executables.
     */
    executables?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetHostRuntimePolicyAuditing {
    auditAllNetwork?: boolean;
    auditAllProcesses?: boolean;
    auditFailedLogin?: boolean;
    auditOsUserActivity?: boolean;
    auditProcessCmdline?: boolean;
    auditSuccessLogin?: boolean;
    auditUserAccountManagement?: boolean;
    enabled?: boolean;
}

export interface GetHostRuntimePolicyAuditingArgs {
    auditAllNetwork?: pulumi.Input<boolean>;
    auditAllProcesses?: pulumi.Input<boolean>;
    auditFailedLogin?: pulumi.Input<boolean>;
    auditOsUserActivity?: pulumi.Input<boolean>;
    auditProcessCmdline?: pulumi.Input<boolean>;
    auditSuccessLogin?: pulumi.Input<boolean>;
    auditUserAccountManagement?: pulumi.Input<boolean>;
    enabled?: pulumi.Input<boolean>;
}

export interface GetHostRuntimePolicyFileIntegrityMonitoring {
    /**
     * If true, file integrity monitoring is enabled.
     */
    enabled?: boolean;
    /**
     * List of paths to be excluded from monitoring.
     */
    exceptionalMonitoredFiles?: string[];
    /**
     * List of processes to be excluded from monitoring.
     */
    exceptionalMonitoredFilesProcesses?: string[];
    /**
     * List of users to be excluded from monitoring.
     */
    exceptionalMonitoredFilesUsers?: string[];
    /**
     * List of paths to be monitored.
     */
    monitoredFiles?: string[];
    /**
     * Whether to monitor file attribute operations.
     */
    monitoredFilesAttributes?: boolean;
    /**
     * Whether to monitor file create operations.
     */
    monitoredFilesCreate?: boolean;
    /**
     * Whether to monitor file delete operations.
     */
    monitoredFilesDelete?: boolean;
    /**
     * Whether to monitor file modify operations.
     */
    monitoredFilesModify?: boolean;
    /**
     * List of processes associated with monitored files.
     */
    monitoredFilesProcesses?: string[];
    /**
     * Whether to monitor file read operations.
     */
    monitoredFilesRead?: boolean;
    /**
     * List of users associated with monitored files.
     */
    monitoredFilesUsers?: string[];
}

export interface GetHostRuntimePolicyFileIntegrityMonitoringArgs {
    /**
     * If true, file integrity monitoring is enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * List of paths to be excluded from monitoring.
     */
    exceptionalMonitoredFiles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of processes to be excluded from monitoring.
     */
    exceptionalMonitoredFilesProcesses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of users to be excluded from monitoring.
     */
    exceptionalMonitoredFilesUsers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of paths to be monitored.
     */
    monitoredFiles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether to monitor file attribute operations.
     */
    monitoredFilesAttributes?: pulumi.Input<boolean>;
    /**
     * Whether to monitor file create operations.
     */
    monitoredFilesCreate?: pulumi.Input<boolean>;
    /**
     * Whether to monitor file delete operations.
     */
    monitoredFilesDelete?: pulumi.Input<boolean>;
    /**
     * Whether to monitor file modify operations.
     */
    monitoredFilesModify?: pulumi.Input<boolean>;
    /**
     * List of processes associated with monitored files.
     */
    monitoredFilesProcesses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether to monitor file read operations.
     */
    monitoredFilesRead?: pulumi.Input<boolean>;
    /**
     * List of users associated with monitored files.
     */
    monitoredFilesUsers?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetHostRuntimePolicyMalwareScanOptions {
    /**
     * Set Action, Defaults to 'Alert' when empty
     */
    action?: string;
    /**
     * Defines if enabled or not
     */
    enabled?: boolean;
    /**
     * List of registry paths to be excluded from being protected.
     */
    excludeDirectories?: string[];
    /**
     * List of registry processes to be excluded from being protected.
     */
    excludeProcesses?: string[];
    /**
     * List of registry paths to be excluded from being protected.
     */
    includeDirectories?: string[];
}

export interface GetHostRuntimePolicyMalwareScanOptionsArgs {
    /**
     * Set Action, Defaults to 'Alert' when empty
     */
    action?: pulumi.Input<string>;
    /**
     * Defines if enabled or not
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * List of registry paths to be excluded from being protected.
     */
    excludeDirectories?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of registry processes to be excluded from being protected.
     */
    excludeProcesses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of registry paths to be excluded from being protected.
     */
    includeDirectories?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetHostRuntimePolicyPackageBlock {
    blockPackagesProcesses?: string[];
    blockPackagesUsers?: string[];
    enabled?: boolean;
    exceptionalBlockPackagesFiles?: string[];
    exceptionalBlockPackagesProcesses?: string[];
    exceptionalBlockPackagesUsers?: string[];
    packagesBlackLists?: string[];
}

export interface GetHostRuntimePolicyPackageBlockArgs {
    blockPackagesProcesses?: pulumi.Input<pulumi.Input<string>[]>;
    blockPackagesUsers?: pulumi.Input<pulumi.Input<string>[]>;
    enabled?: pulumi.Input<boolean>;
    exceptionalBlockPackagesFiles?: pulumi.Input<pulumi.Input<string>[]>;
    exceptionalBlockPackagesProcesses?: pulumi.Input<pulumi.Input<string>[]>;
    exceptionalBlockPackagesUsers?: pulumi.Input<pulumi.Input<string>[]>;
    packagesBlackLists?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetIntegrationRegistriesOption {
    option?: string;
    value?: string;
}

export interface GetIntegrationRegistriesOptionArgs {
    option?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface GetIntegrationRegistriesWebhook {
    authToken?: string;
    enabled?: boolean;
    unQuarantine?: boolean;
    url?: string;
}

export interface GetIntegrationRegistriesWebhookArgs {
    authToken?: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    unQuarantine?: pulumi.Input<boolean>;
    url?: pulumi.Input<string>;
}

export interface HostAssurancePolicyAutoScanTime {
    iteration?: pulumi.Input<number>;
    iterationType?: pulumi.Input<string>;
    time?: pulumi.Input<string>;
    weekDays?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface HostAssurancePolicyCustomCheck {
    /**
     * Name of user account that created the policy.
     */
    author?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    engine?: pulumi.Input<string>;
    lastModified?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    path?: pulumi.Input<string>;
    readOnly?: pulumi.Input<boolean>;
    scriptId?: pulumi.Input<string>;
    severity?: pulumi.Input<string>;
    snippet?: pulumi.Input<string>;
}

export interface HostAssurancePolicyForbiddenLabel {
    key?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface HostAssurancePolicyPackagesBlackList {
    arch?: pulumi.Input<string>;
    display?: pulumi.Input<string>;
    epoch?: pulumi.Input<string>;
    format?: pulumi.Input<string>;
    license?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    release?: pulumi.Input<string>;
    version?: pulumi.Input<string>;
    versionRange?: pulumi.Input<string>;
}

export interface HostAssurancePolicyPackagesWhiteList {
    arch?: pulumi.Input<string>;
    display?: pulumi.Input<string>;
    epoch?: pulumi.Input<string>;
    format?: pulumi.Input<string>;
    license?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    release?: pulumi.Input<string>;
    version?: pulumi.Input<string>;
    versionRange?: pulumi.Input<string>;
}

export interface HostAssurancePolicyPolicySettings {
    enforce?: pulumi.Input<boolean>;
    isAuditChecked?: pulumi.Input<boolean>;
    warn?: pulumi.Input<boolean>;
    warningMessage?: pulumi.Input<string>;
}

export interface HostAssurancePolicyRequiredLabel {
    key?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface HostAssurancePolicyScope {
    expression?: pulumi.Input<string>;
    variables?: pulumi.Input<pulumi.Input<inputs.HostAssurancePolicyScopeVariable>[]>;
}

export interface HostAssurancePolicyScopeVariable {
    attribute?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface HostAssurancePolicyTrustedBaseImage {
    imagename?: pulumi.Input<string>;
    registry?: pulumi.Input<string>;
}

export interface HostRuntimePolicyAllowedExecutable {
    /**
     * List of allowed executables.
     */
    allowExecutables?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of allowed root executables.
     */
    allowRootExecutables?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether allowed executables configuration is enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Whether to treat executables separately.
     */
    separateExecutables?: pulumi.Input<boolean>;
}

export interface HostRuntimePolicyAllowedRegistry {
    /**
     * List of allowed registries.
     */
    allowedRegistries?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether allowed registries are enabled.
     */
    enabled?: pulumi.Input<boolean>;
}

export interface HostRuntimePolicyAuditing {
    auditAllNetwork?: pulumi.Input<boolean>;
    auditAllProcesses?: pulumi.Input<boolean>;
    auditFailedLogin?: pulumi.Input<boolean>;
    auditOsUserActivity?: pulumi.Input<boolean>;
    auditProcessCmdline?: pulumi.Input<boolean>;
    auditSuccessLogin?: pulumi.Input<boolean>;
    auditUserAccountManagement?: pulumi.Input<boolean>;
    enabled?: pulumi.Input<boolean>;
}

export interface HostRuntimePolicyBlacklistedOsUsers {
    enabled?: pulumi.Input<boolean>;
    groupBlackLists?: pulumi.Input<pulumi.Input<string>[]>;
    userBlackLists?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface HostRuntimePolicyBypassScope {
    /**
     * Whether bypassing the scope is enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Scope configuration.
     */
    scopes?: pulumi.Input<pulumi.Input<inputs.HostRuntimePolicyBypassScopeScope>[]>;
}

export interface HostRuntimePolicyBypassScopeScope {
    /**
     * Scope expression.
     */
    expression?: pulumi.Input<string>;
    /**
     * List of variables in the scope.
     */
    variables?: pulumi.Input<pulumi.Input<inputs.HostRuntimePolicyBypassScopeScopeVariable>[]>;
}

export interface HostRuntimePolicyBypassScopeScopeVariable {
    /**
     * Variable attribute.
     */
    attribute?: pulumi.Input<string>;
    /**
     * Variable value.
     */
    value?: pulumi.Input<string>;
}

export interface HostRuntimePolicyContainerExec {
    blockContainerExec?: pulumi.Input<boolean>;
    containerExecProcWhiteLists?: pulumi.Input<pulumi.Input<string>[]>;
    enabled?: pulumi.Input<boolean>;
    reverseShellIpWhiteLists?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface HostRuntimePolicyDriftPrevention {
    /**
     * Whether drift prevention is enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Whether to lockdown execution drift.
     */
    execLockdown?: pulumi.Input<boolean>;
    /**
     * List of items in the execution lockdown white list.
     */
    execLockdownWhiteLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether to lockdown image drift.
     */
    imageLockdown?: pulumi.Input<boolean>;
}

export interface HostRuntimePolicyExecutableBlacklist {
    /**
     * Whether the executable blacklist is enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * List of blacklisted executables.
     */
    executables?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface HostRuntimePolicyFailedKubernetesChecks {
    enabled?: pulumi.Input<boolean>;
    failedChecks?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface HostRuntimePolicyFileBlock {
    blockFilesProcesses?: pulumi.Input<pulumi.Input<string>[]>;
    blockFilesUsers?: pulumi.Input<pulumi.Input<string>[]>;
    enabled?: pulumi.Input<boolean>;
    exceptionalBlockFiles?: pulumi.Input<pulumi.Input<string>[]>;
    exceptionalBlockFilesProcesses?: pulumi.Input<pulumi.Input<string>[]>;
    exceptionalBlockFilesUsers?: pulumi.Input<pulumi.Input<string>[]>;
    filenameBlockLists?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface HostRuntimePolicyFileIntegrityMonitoring {
    /**
     * If true, file integrity monitoring is enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * List of paths to be excluded from monitoring.
     */
    exceptionalMonitoredFiles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of processes to be excluded from monitoring.
     */
    exceptionalMonitoredFilesProcesses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of users to be excluded from monitoring.
     */
    exceptionalMonitoredFilesUsers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of paths to be monitored.
     */
    monitoredFiles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether to monitor file attribute operations.
     */
    monitoredFilesAttributes?: pulumi.Input<boolean>;
    /**
     * Whether to monitor file create operations.
     */
    monitoredFilesCreate?: pulumi.Input<boolean>;
    /**
     * Whether to monitor file delete operations.
     */
    monitoredFilesDelete?: pulumi.Input<boolean>;
    /**
     * Whether to monitor file modify operations.
     */
    monitoredFilesModify?: pulumi.Input<boolean>;
    /**
     * List of processes associated with monitored files.
     */
    monitoredFilesProcesses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether to monitor file read operations.
     */
    monitoredFilesRead?: pulumi.Input<boolean>;
    /**
     * List of users associated with monitored files.
     */
    monitoredFilesUsers?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface HostRuntimePolicyLimitContainerPrivilege {
    /**
     * Whether to block adding capabilities.
     */
    blockAddCapabilities?: pulumi.Input<boolean>;
    /**
     * Whether container privilege limitations are enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Whether to limit IPC-related capabilities.
     */
    ipcmode?: pulumi.Input<boolean>;
    /**
     * Whether to limit network-related capabilities.
     */
    netmode?: pulumi.Input<boolean>;
    /**
     * Whether to limit process-related capabilities.
     */
    pidmode?: pulumi.Input<boolean>;
    /**
     * Whether to prevent low port binding.
     */
    preventLowPortBinding?: pulumi.Input<boolean>;
    /**
     * Whether to prevent the use of the root user.
     */
    preventRootUser?: pulumi.Input<boolean>;
    /**
     * Whether the container is run in privileged mode.
     */
    privileged?: pulumi.Input<boolean>;
    /**
     * Whether to use the host user.
     */
    useHostUser?: pulumi.Input<boolean>;
    /**
     * Whether to limit user-related capabilities.
     */
    usermode?: pulumi.Input<boolean>;
    /**
     * Whether to limit UTS-related capabilities.
     */
    utsmode?: pulumi.Input<boolean>;
}

export interface HostRuntimePolicyLinuxCapabilities {
    enabled?: pulumi.Input<boolean>;
    removeLinuxCapabilities?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface HostRuntimePolicyMalwareScanOptions {
    /**
     * Set Action, Defaults to 'Alert' when empty
     */
    action?: pulumi.Input<string>;
    /**
     * Defines if enabled or not
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * List of registry paths to be excluded from being protected.
     */
    excludeDirectories?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of registry processes to be excluded from being protected.
     */
    excludeProcesses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of registry paths to be excluded from being protected.
     */
    includeDirectories?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface HostRuntimePolicyPackageBlock {
    blockPackagesProcesses?: pulumi.Input<pulumi.Input<string>[]>;
    blockPackagesUsers?: pulumi.Input<pulumi.Input<string>[]>;
    enabled?: pulumi.Input<boolean>;
    exceptionalBlockPackagesFiles?: pulumi.Input<pulumi.Input<string>[]>;
    exceptionalBlockPackagesProcesses?: pulumi.Input<pulumi.Input<string>[]>;
    exceptionalBlockPackagesUsers?: pulumi.Input<pulumi.Input<string>[]>;
    packagesBlackLists?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface HostRuntimePolicyPortBlock {
    blockInboundPorts?: pulumi.Input<pulumi.Input<string>[]>;
    blockOutboundPorts?: pulumi.Input<pulumi.Input<string>[]>;
    enabled?: pulumi.Input<boolean>;
}

export interface HostRuntimePolicyReadonlyFiles {
    enabled?: pulumi.Input<boolean>;
    exceptionalReadonlyFiles?: pulumi.Input<pulumi.Input<string>[]>;
    exceptionalReadonlyFilesProcesses?: pulumi.Input<pulumi.Input<string>[]>;
    exceptionalReadonlyFilesUsers?: pulumi.Input<pulumi.Input<string>[]>;
    readonlyFiles?: pulumi.Input<pulumi.Input<string>[]>;
    readonlyFilesProcesses?: pulumi.Input<pulumi.Input<string>[]>;
    readonlyFilesUsers?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface HostRuntimePolicyReadonlyRegistry {
    enabled?: pulumi.Input<boolean>;
    exceptionalReadonlyRegistryPaths?: pulumi.Input<pulumi.Input<string>[]>;
    exceptionalReadonlyRegistryProcesses?: pulumi.Input<pulumi.Input<string>[]>;
    exceptionalReadonlyRegistryUsers?: pulumi.Input<pulumi.Input<string>[]>;
    readonlyRegistryPaths?: pulumi.Input<pulumi.Input<string>[]>;
    readonlyRegistryProcesses?: pulumi.Input<pulumi.Input<string>[]>;
    readonlyRegistryUsers?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface HostRuntimePolicyRegistryAccessMonitoring {
    enabled?: pulumi.Input<boolean>;
    exceptionalMonitoredRegistryPaths?: pulumi.Input<pulumi.Input<string>[]>;
    exceptionalMonitoredRegistryProcesses?: pulumi.Input<pulumi.Input<string>[]>;
    exceptionalMonitoredRegistryUsers?: pulumi.Input<pulumi.Input<string>[]>;
    monitoredRegistryAttributes?: pulumi.Input<boolean>;
    monitoredRegistryCreate?: pulumi.Input<boolean>;
    monitoredRegistryDelete?: pulumi.Input<boolean>;
    monitoredRegistryModify?: pulumi.Input<boolean>;
    monitoredRegistryPaths?: pulumi.Input<pulumi.Input<string>[]>;
    monitoredRegistryProcesses?: pulumi.Input<pulumi.Input<string>[]>;
    monitoredRegistryRead?: pulumi.Input<boolean>;
    monitoredRegistryUsers?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface HostRuntimePolicyRestrictedVolume {
    /**
     * Whether restricted volumes are enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * List of restricted volumes.
     */
    volumes?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface HostRuntimePolicyReverseShell {
    blockReverseShell?: pulumi.Input<boolean>;
    enabled?: pulumi.Input<boolean>;
    reverseShellIpWhiteLists?: pulumi.Input<pulumi.Input<string>[]>;
    reverseShellProcWhiteLists?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface HostRuntimePolicyScope {
    /**
     * Scope expression.
     */
    expression: pulumi.Input<string>;
    /**
     * List of variables in the scope.
     */
    variables: pulumi.Input<pulumi.Input<inputs.HostRuntimePolicyScopeVariable>[]>;
}

export interface HostRuntimePolicyScopeVariable {
    /**
     * Class of supported scope.
     */
    attribute: pulumi.Input<string>;
    /**
     * Name assigned to the attribute.
     */
    name?: pulumi.Input<string>;
    /**
     * Value assigned to the attribute.
     */
    value: pulumi.Input<string>;
}

export interface HostRuntimePolicySystemIntegrityProtection {
    auditSystemtimeChange?: pulumi.Input<boolean>;
    enabled?: pulumi.Input<boolean>;
    monitorAuditLogIntegrity?: pulumi.Input<boolean>;
    windowsServicesMonitoring?: pulumi.Input<boolean>;
}

export interface HostRuntimePolicyTripwire {
    applyOns?: pulumi.Input<pulumi.Input<string>[]>;
    enabled?: pulumi.Input<boolean>;
    serverlessApp?: pulumi.Input<string>;
    userId?: pulumi.Input<string>;
    userPassword?: pulumi.Input<string>;
}

export interface HostRuntimePolicyWhitelistedOsUsers {
    enabled?: pulumi.Input<boolean>;
    groupWhiteLists?: pulumi.Input<pulumi.Input<string>[]>;
    userWhiteLists?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ImageAssuranceChecksPerformed {
    assuranceType: pulumi.Input<string>;
    blocking: pulumi.Input<boolean>;
    control: pulumi.Input<string>;
    dtaSkipped: pulumi.Input<boolean>;
    dtaSkippedReason: pulumi.Input<string>;
    failed: pulumi.Input<boolean>;
    policyName: pulumi.Input<string>;
}

export interface ImageAssurancePolicyAutoScanTime {
    iteration?: pulumi.Input<number>;
    iterationType?: pulumi.Input<string>;
    time?: pulumi.Input<string>;
    weekDays?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ImageAssurancePolicyCustomCheck {
    /**
     * Name of user account that created the policy.
     */
    author?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    engine?: pulumi.Input<string>;
    lastModified?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    path?: pulumi.Input<string>;
    readOnly?: pulumi.Input<boolean>;
    scriptId?: pulumi.Input<string>;
    severity?: pulumi.Input<string>;
    snippet?: pulumi.Input<string>;
}

export interface ImageAssurancePolicyForbiddenLabel {
    key?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ImageAssurancePolicyKubernetesControls {
    avdId?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    kind?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    ootb?: pulumi.Input<boolean>;
    scriptId?: pulumi.Input<number>;
    severity?: pulumi.Input<string>;
}

export interface ImageAssurancePolicyPackagesBlackList {
    arch?: pulumi.Input<string>;
    display?: pulumi.Input<string>;
    epoch?: pulumi.Input<string>;
    format?: pulumi.Input<string>;
    license?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    release?: pulumi.Input<string>;
    version?: pulumi.Input<string>;
    versionRange?: pulumi.Input<string>;
}

export interface ImageAssurancePolicyPackagesWhiteList {
    arch?: pulumi.Input<string>;
    display?: pulumi.Input<string>;
    epoch?: pulumi.Input<string>;
    format?: pulumi.Input<string>;
    license?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    release?: pulumi.Input<string>;
    version?: pulumi.Input<string>;
    versionRange?: pulumi.Input<string>;
}

export interface ImageAssurancePolicyPolicySettings {
    enforce?: pulumi.Input<boolean>;
    isAuditChecked?: pulumi.Input<boolean>;
    warn?: pulumi.Input<boolean>;
    warningMessage?: pulumi.Input<string>;
}

export interface ImageAssurancePolicyRequiredLabel {
    key?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ImageAssurancePolicyScope {
    expression?: pulumi.Input<string>;
    variables?: pulumi.Input<pulumi.Input<inputs.ImageAssurancePolicyScopeVariable>[]>;
}

export interface ImageAssurancePolicyScopeVariable {
    attribute?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ImageAssurancePolicyTrustedBaseImage {
    imagename?: pulumi.Input<string>;
    registry?: pulumi.Input<string>;
}

export interface ImageHistory {
    comment: pulumi.Input<string>;
    created: pulumi.Input<string>;
    createdBy: pulumi.Input<string>;
    id: pulumi.Input<string>;
    size: pulumi.Input<number>;
}

export interface ImageVulnerability {
    ackAuthor: pulumi.Input<string>;
    ackComment: pulumi.Input<string>;
    ackExpirationConfiguredAt: pulumi.Input<string>;
    ackExpirationConfiguredBy: pulumi.Input<string>;
    ackExpirationDays: pulumi.Input<number>;
    ackScope: pulumi.Input<string>;
    acknowledgeDate: pulumi.Input<string>;
    ancestorPkg: pulumi.Input<string>;
    aquaScore: pulumi.Input<number>;
    aquaScoreClassification: pulumi.Input<string>;
    aquaScoringSystem: pulumi.Input<string>;
    aquaSeverity: pulumi.Input<string>;
    aquaSeverityClassification: pulumi.Input<string>;
    aquaVectors: pulumi.Input<string>;
    auditEventsCount: pulumi.Input<number>;
    blockEventsCount: pulumi.Input<number>;
    classification: pulumi.Input<string>;
    description: pulumi.Input<string>;
    digest: pulumi.Input<string>;
    exploitReference: pulumi.Input<string>;
    exploitType: pulumi.Input<string>;
    firstFoundDate: pulumi.Input<string>;
    fixVersion: pulumi.Input<string>;
    imageName: pulumi.Input<string>;
    lastFoundDate: pulumi.Input<string>;
    modificationDate: pulumi.Input<string>;
    name: pulumi.Input<string>;
    nvdCvss2Score: pulumi.Input<number>;
    nvdCvss2Vectors: pulumi.Input<string>;
    nvdCvss3Score: pulumi.Input<number>;
    nvdCvss3Severity: pulumi.Input<string>;
    nvdCvss3Vectors: pulumi.Input<string>;
    nvdSeverity: pulumi.Input<string>;
    nvdUrl: pulumi.Input<string>;
    os: pulumi.Input<string>;
    osVersion: pulumi.Input<string>;
    permission: pulumi.Input<string>;
    publishDate: pulumi.Input<string>;
    registry: pulumi.Input<string>;
    repository: pulumi.Input<string>;
    resourceArchitecture: pulumi.Input<string>;
    resourceCpe: pulumi.Input<string>;
    resourceFormat: pulumi.Input<string>;
    resourceHash: pulumi.Input<string>;
    resourceLicenses: pulumi.Input<pulumi.Input<string>[]>;
    resourceName: pulumi.Input<string>;
    resourcePath: pulumi.Input<string>;
    resourceType: pulumi.Input<string>;
    resourceVersion: pulumi.Input<string>;
    severityClassification: pulumi.Input<string>;
    solution: pulumi.Input<string>;
    temporalVector: pulumi.Input<string>;
    vPatchAppliedBy: pulumi.Input<string>;
    vPatchAppliedOn: pulumi.Input<string>;
    vPatchEnforcedBy: pulumi.Input<string>;
    vPatchEnforcedOn: pulumi.Input<string>;
    vPatchPolicyEnforce: pulumi.Input<boolean>;
    vPatchPolicyName: pulumi.Input<string>;
    vPatchRevertedBy: pulumi.Input<string>;
    vPatchRevertedOn: pulumi.Input<string>;
    vPatchStatus: pulumi.Input<string>;
    vendorCvss2Score: pulumi.Input<number>;
    vendorCvss2Vectors: pulumi.Input<string>;
    vendorSeverity: pulumi.Input<string>;
    vendorStatement: pulumi.Input<string>;
    vendorUrl: pulumi.Input<string>;
}

export interface IntegrationRegistryOption {
    option?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface IntegrationRegistryWebhook {
    authToken?: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    unQuarantine?: pulumi.Input<boolean>;
    url?: pulumi.Input<string>;
}

export interface KubernetesAssurancePolicyAutoScanTime {
    iteration?: pulumi.Input<number>;
    iterationType?: pulumi.Input<string>;
    time?: pulumi.Input<string>;
    weekDays?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface KubernetesAssurancePolicyCustomCheck {
    /**
     * Name of user account that created the policy.
     */
    author?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    engine?: pulumi.Input<string>;
    lastModified?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    path?: pulumi.Input<string>;
    readOnly?: pulumi.Input<boolean>;
    scriptId?: pulumi.Input<string>;
    severity?: pulumi.Input<string>;
    snippet?: pulumi.Input<string>;
}

export interface KubernetesAssurancePolicyForbiddenLabel {
    key?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface KubernetesAssurancePolicyKubernetesControl {
    /**
     * AVD ID.
     */
    avdId?: pulumi.Input<string>;
    /**
     * Description of the control.
     */
    description?: pulumi.Input<string>;
    /**
     * Is the control enabled?
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Kind of the control.
     */
    kind?: pulumi.Input<string>;
    /**
     * Name of the control.
     */
    name?: pulumi.Input<string>;
    /**
     * Out-of-the-box status of the control.
     */
    ootb?: pulumi.Input<boolean>;
    /**
     * Script ID.
     */
    scriptId?: pulumi.Input<number>;
    /**
     * Severity of the control.
     */
    severity?: pulumi.Input<string>;
}

export interface KubernetesAssurancePolicyPackagesBlackList {
    arch?: pulumi.Input<string>;
    display?: pulumi.Input<string>;
    epoch?: pulumi.Input<string>;
    format?: pulumi.Input<string>;
    license?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    release?: pulumi.Input<string>;
    version?: pulumi.Input<string>;
    versionRange?: pulumi.Input<string>;
}

export interface KubernetesAssurancePolicyPackagesWhiteList {
    arch?: pulumi.Input<string>;
    display?: pulumi.Input<string>;
    epoch?: pulumi.Input<string>;
    format?: pulumi.Input<string>;
    license?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    release?: pulumi.Input<string>;
    version?: pulumi.Input<string>;
    versionRange?: pulumi.Input<string>;
}

export interface KubernetesAssurancePolicyPolicySettings {
    enforce?: pulumi.Input<boolean>;
    isAuditChecked?: pulumi.Input<boolean>;
    warn?: pulumi.Input<boolean>;
    warningMessage?: pulumi.Input<string>;
}

export interface KubernetesAssurancePolicyRequiredLabel {
    key?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface KubernetesAssurancePolicyScope {
    expression?: pulumi.Input<string>;
    variables?: pulumi.Input<pulumi.Input<inputs.KubernetesAssurancePolicyScopeVariable>[]>;
}

export interface KubernetesAssurancePolicyScopeVariable {
    attribute?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface KubernetesAssurancePolicyTrustedBaseImage {
    imagename?: pulumi.Input<string>;
    registry?: pulumi.Input<string>;
}

export interface RoleMappingLdap {
    /**
     * Role Mapping is used to define the IdP role that the user will assume in Aqua. Use '|' as a separator for multiple roles.
     */
    roleMapping: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface RoleMappingOauth2 {
    /**
     * Role Mapping is used to define the IdP role that the user will assume in Aqua. Use '|' as a separator for multiple roles.
     */
    roleMapping: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface RoleMappingOpenid {
    /**
     * Role Mapping is used to define the IdP role that the user will assume in Aqua. Use '|' as a separator for multiple roles.
     */
    roleMapping: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface RoleMappingSaml {
    /**
     * Role Mapping is used to define the IdP role that the user will assume in Aqua. Use '|' as a separator for multiple roles.
     */
    roleMapping: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface ServiceScopeVariable {
    /**
     * Class of supported scope.
     */
    attribute?: pulumi.Input<string>;
    /**
     * Name assigned to the attribute.
     */
    name?: pulumi.Input<string>;
    /**
     * Value assigned to the attribute.
     */
    value?: pulumi.Input<string>;
}

export interface UserSaasGroup {
    groupAdmin?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
}

export interface UserSaasLogin {
    created: pulumi.Input<string>;
    id: pulumi.Input<number>;
    ipAddress: pulumi.Input<string>;
    userId: pulumi.Input<number>;
}

export interface VmwareAssurancePolicyAutoScanTime {
    iteration?: pulumi.Input<number>;
    iterationType?: pulumi.Input<string>;
    time?: pulumi.Input<string>;
    weekDays?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface VmwareAssurancePolicyCustomCheck {
    /**
     * Name of user account that created the policy.
     */
    author?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    engine?: pulumi.Input<string>;
    lastModified?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    path?: pulumi.Input<string>;
    readOnly?: pulumi.Input<boolean>;
    scriptId?: pulumi.Input<string>;
    severity?: pulumi.Input<string>;
    snippet?: pulumi.Input<string>;
}

export interface VmwareAssurancePolicyForbiddenLabel {
    key?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface VmwareAssurancePolicyKubernetesControl {
    avdId?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    kind?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    ootb?: pulumi.Input<boolean>;
    scriptId?: pulumi.Input<number>;
    severity?: pulumi.Input<string>;
}

export interface VmwareAssurancePolicyPackagesBlackList {
    arch?: pulumi.Input<string>;
    display?: pulumi.Input<string>;
    epoch?: pulumi.Input<string>;
    format?: pulumi.Input<string>;
    license?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    release?: pulumi.Input<string>;
    version?: pulumi.Input<string>;
    versionRange?: pulumi.Input<string>;
}

export interface VmwareAssurancePolicyPackagesWhiteList {
    arch?: pulumi.Input<string>;
    display?: pulumi.Input<string>;
    epoch?: pulumi.Input<string>;
    format?: pulumi.Input<string>;
    license?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    release?: pulumi.Input<string>;
    version?: pulumi.Input<string>;
    versionRange?: pulumi.Input<string>;
}

export interface VmwareAssurancePolicyPolicySettings {
    enforce?: pulumi.Input<boolean>;
    isAuditChecked?: pulumi.Input<boolean>;
    warn?: pulumi.Input<boolean>;
    warningMessage?: pulumi.Input<string>;
}

export interface VmwareAssurancePolicyRequiredLabel {
    key?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface VmwareAssurancePolicyScope {
    expression?: pulumi.Input<string>;
    variables?: pulumi.Input<pulumi.Input<inputs.VmwareAssurancePolicyScopeVariable>[]>;
}

export interface VmwareAssurancePolicyScopeVariable {
    attribute?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface VmwareAssurancePolicyTrustedBaseImage {
    imagename?: pulumi.Input<string>;
    registry?: pulumi.Input<string>;
}
