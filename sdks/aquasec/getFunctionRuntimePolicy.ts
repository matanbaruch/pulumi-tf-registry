// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getFunctionRuntimePolicy(args: GetFunctionRuntimePolicyArgs, opts?: pulumi.InvokeOptions): Promise<GetFunctionRuntimePolicyResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aquasec:index/getFunctionRuntimePolicy:getFunctionRuntimePolicy", {
        "driftPreventions": args.driftPreventions,
        "executableBlacklists": args.executableBlacklists,
        "id": args.id,
        "name": args.name,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getFunctionRuntimePolicy.
 */
export interface GetFunctionRuntimePolicyArgs {
    driftPreventions?: inputs.GetFunctionRuntimePolicyDriftPrevention[];
    executableBlacklists?: inputs.GetFunctionRuntimePolicyExecutableBlacklist[];
    id?: string;
    name: string;
}

/**
 * A collection of values returned by getFunctionRuntimePolicy.
 */
export interface GetFunctionRuntimePolicyResult {
    readonly applicationScopes: string[];
    readonly author: string;
    readonly blockMaliciousExecutables: boolean;
    readonly blockMaliciousExecutablesAllowedProcesses: string[];
    readonly blockRunningExecutablesInTmpFolder: boolean;
    readonly blockedExecutables: string[];
    readonly description: string;
    readonly driftPreventions?: outputs.GetFunctionRuntimePolicyDriftPrevention[];
    readonly enabled: boolean;
    readonly enforce: boolean;
    readonly executableBlacklists?: outputs.GetFunctionRuntimePolicyExecutableBlacklist[];
    readonly honeypotAccessKey: string;
    readonly honeypotApplyOns: string[];
    readonly honeypotSecretKey: string;
    readonly honeypotServerlessAppName: string;
    readonly id: string;
    readonly name: string;
    readonly scopeExpression: string;
    readonly scopeVariables: outputs.GetFunctionRuntimePolicyScopeVariable[];
}
export function getFunctionRuntimePolicyOutput(args: GetFunctionRuntimePolicyOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetFunctionRuntimePolicyResult> {
    return pulumi.output(args).apply((a: any) => getFunctionRuntimePolicy(a, opts))
}

/**
 * A collection of arguments for invoking getFunctionRuntimePolicy.
 */
export interface GetFunctionRuntimePolicyOutputArgs {
    driftPreventions?: pulumi.Input<pulumi.Input<inputs.GetFunctionRuntimePolicyDriftPreventionArgs>[]>;
    executableBlacklists?: pulumi.Input<pulumi.Input<inputs.GetFunctionRuntimePolicyExecutableBlacklistArgs>[]>;
    id?: pulumi.Input<string>;
    name: pulumi.Input<string>;
}
