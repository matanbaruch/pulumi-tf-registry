// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getContainerRuntimePolicy(args: GetContainerRuntimePolicyArgs, opts?: pulumi.InvokeOptions): Promise<GetContainerRuntimePolicyResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aquasec:index/getContainerRuntimePolicy:getContainerRuntimePolicy", {
        "allowedExecutables": args.allowedExecutables,
        "allowedRegistries": args.allowedRegistries,
        "auditing": args.auditing,
        "containerExec": args.containerExec,
        "fileBlock": args.fileBlock,
        "fileIntegrityMonitorings": args.fileIntegrityMonitorings,
        "id": args.id,
        "limitContainerPrivileges": args.limitContainerPrivileges,
        "malwareScanOptions": args.malwareScanOptions,
        "name": args.name,
        "portBlock": args.portBlock,
        "readonlyFiles": args.readonlyFiles,
        "restrictedVolumes": args.restrictedVolumes,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getContainerRuntimePolicy.
 */
export interface GetContainerRuntimePolicyArgs {
    allowedExecutables?: inputs.GetContainerRuntimePolicyAllowedExecutable[];
    allowedRegistries?: inputs.GetContainerRuntimePolicyAllowedRegistry[];
    auditing?: inputs.GetContainerRuntimePolicyAuditing;
    containerExec?: inputs.GetContainerRuntimePolicyContainerExec;
    fileBlock?: inputs.GetContainerRuntimePolicyFileBlock;
    fileIntegrityMonitorings?: inputs.GetContainerRuntimePolicyFileIntegrityMonitoring[];
    id?: string;
    limitContainerPrivileges?: inputs.GetContainerRuntimePolicyLimitContainerPrivilege[];
    malwareScanOptions?: inputs.GetContainerRuntimePolicyMalwareScanOptions;
    name: string;
    portBlock?: inputs.GetContainerRuntimePolicyPortBlock;
    readonlyFiles?: inputs.GetContainerRuntimePolicyReadonlyFiles;
    restrictedVolumes?: inputs.GetContainerRuntimePolicyRestrictedVolume[];
}

/**
 * A collection of values returned by getContainerRuntimePolicy.
 */
export interface GetContainerRuntimePolicyResult {
    readonly allowedExecutables?: outputs.GetContainerRuntimePolicyAllowedExecutable[];
    readonly allowedRegistries?: outputs.GetContainerRuntimePolicyAllowedRegistry[];
    readonly applicationScopes: string[];
    readonly auditAllNetworkActivity: boolean;
    readonly auditAllProcessesActivity: boolean;
    readonly auditFullCommandArguments: boolean;
    readonly auditing?: outputs.GetContainerRuntimePolicyAuditing;
    readonly author: string;
    readonly blockAccessHostNetwork: boolean;
    readonly blockAddingCapabilities: boolean;
    readonly blockContainerExec: boolean;
    readonly blockCryptocurrencyMining: boolean;
    readonly blockFilelessExec: boolean;
    readonly blockLowPortBinding: boolean;
    readonly blockNonCompliantImages: boolean;
    readonly blockNonCompliantWorkloads: boolean;
    readonly blockNonK8sContainers: boolean;
    readonly blockPrivilegedContainers: boolean;
    readonly blockReverseShell: boolean;
    readonly blockRootUser: boolean;
    readonly blockUnregisteredImages: boolean;
    readonly blockUseIpcNamespace: boolean;
    readonly blockUsePidNamespace: boolean;
    readonly blockUseUserNamespace: boolean;
    readonly blockUseUtsNamespace: boolean;
    readonly blockedCapabilities: string[];
    readonly blockedExecutables: string[];
    readonly blockedFiles: string[];
    readonly blockedInboundPorts: string[];
    readonly blockedOutboundPorts: string[];
    readonly blockedPackages: string[];
    readonly blockedVolumes: string[];
    readonly containerExec?: outputs.GetContainerRuntimePolicyContainerExec;
    readonly containerExecAllowedProcesses: string[];
    readonly description: string;
    readonly enableDriftPrevention: boolean;
    readonly enableForkGuard: boolean;
    readonly enableIpReputationSecurity: boolean;
    readonly enablePortScanDetection: boolean;
    readonly enabled: boolean;
    readonly enforce: boolean;
    readonly enforceAfterDays: number;
    readonly exceptionalReadonlyFilesAndDirectories: string[];
    readonly execLockdownWhiteLists: string[];
    readonly fileBlock?: outputs.GetContainerRuntimePolicyFileBlock;
    readonly fileIntegrityMonitorings?: outputs.GetContainerRuntimePolicyFileIntegrityMonitoring[];
    readonly forkGuardProcessLimit: number;
    readonly id: string;
    readonly limitContainerPrivileges?: outputs.GetContainerRuntimePolicyLimitContainerPrivilege[];
    readonly limitNewPrivileges: boolean;
    readonly malwareScanOptions?: outputs.GetContainerRuntimePolicyMalwareScanOptions;
    readonly monitorSystemTimeChanges: boolean;
    readonly name: string;
    readonly portBlock?: outputs.GetContainerRuntimePolicyPortBlock;
    readonly readonlyFiles?: outputs.GetContainerRuntimePolicyReadonlyFiles;
    readonly readonlyFilesAndDirectories: string[];
    readonly restrictedVolumes?: outputs.GetContainerRuntimePolicyRestrictedVolume[];
    readonly reverseShellAllowedIps: string[];
    readonly reverseShellAllowedProcesses: string[];
    readonly scopeExpression: string;
    readonly scopeVariables: outputs.GetContainerRuntimePolicyScopeVariable[];
}
export function getContainerRuntimePolicyOutput(args: GetContainerRuntimePolicyOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetContainerRuntimePolicyResult> {
    return pulumi.output(args).apply((a: any) => getContainerRuntimePolicy(a, opts))
}

/**
 * A collection of arguments for invoking getContainerRuntimePolicy.
 */
export interface GetContainerRuntimePolicyOutputArgs {
    allowedExecutables?: pulumi.Input<pulumi.Input<inputs.GetContainerRuntimePolicyAllowedExecutableArgs>[]>;
    allowedRegistries?: pulumi.Input<pulumi.Input<inputs.GetContainerRuntimePolicyAllowedRegistryArgs>[]>;
    auditing?: pulumi.Input<inputs.GetContainerRuntimePolicyAuditingArgs>;
    containerExec?: pulumi.Input<inputs.GetContainerRuntimePolicyContainerExecArgs>;
    fileBlock?: pulumi.Input<inputs.GetContainerRuntimePolicyFileBlockArgs>;
    fileIntegrityMonitorings?: pulumi.Input<pulumi.Input<inputs.GetContainerRuntimePolicyFileIntegrityMonitoringArgs>[]>;
    id?: pulumi.Input<string>;
    limitContainerPrivileges?: pulumi.Input<pulumi.Input<inputs.GetContainerRuntimePolicyLimitContainerPrivilegeArgs>[]>;
    malwareScanOptions?: pulumi.Input<inputs.GetContainerRuntimePolicyMalwareScanOptionsArgs>;
    name: pulumi.Input<string>;
    portBlock?: pulumi.Input<inputs.GetContainerRuntimePolicyPortBlockArgs>;
    readonlyFiles?: pulumi.Input<inputs.GetContainerRuntimePolicyReadonlyFilesArgs>;
    restrictedVolumes?: pulumi.Input<pulumi.Input<inputs.GetContainerRuntimePolicyRestrictedVolumeArgs>[]>;
}
