// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ApplicationScope extends pulumi.CustomResource {
    /**
     * Get an existing ApplicationScope resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ApplicationScopeState, opts?: pulumi.CustomResourceOptions): ApplicationScope {
        return new ApplicationScope(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aquasec:index/applicationScope:ApplicationScope';

    /**
     * Returns true if the given object is an instance of ApplicationScope.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ApplicationScope {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ApplicationScope.__pulumiType;
    }

    /**
     * Username of the account that created the service.
     */
    public /*out*/ readonly author!: pulumi.Output<string>;
    /**
     * Artifacts (of applications) / Workloads (containers) / Infrastructure (elements).
     */
    public readonly categories!: pulumi.Output<outputs.ApplicationScopeCategory[] | undefined>;
    /**
     * Description of the application scope.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Name of an application scope.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Name of an application scope.
     */
    public readonly ownerEmail!: pulumi.Output<string | undefined>;

    /**
     * Create a ApplicationScope resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ApplicationScopeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ApplicationScopeArgs | ApplicationScopeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ApplicationScopeState | undefined;
            resourceInputs["author"] = state ? state.author : undefined;
            resourceInputs["categories"] = state ? state.categories : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["ownerEmail"] = state ? state.ownerEmail : undefined;
        } else {
            const args = argsOrState as ApplicationScopeArgs | undefined;
            resourceInputs["categories"] = args ? args.categories : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["ownerEmail"] = args ? args.ownerEmail : undefined;
            resourceInputs["author"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ApplicationScope.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ApplicationScope resources.
 */
export interface ApplicationScopeState {
    /**
     * Username of the account that created the service.
     */
    author?: pulumi.Input<string>;
    /**
     * Artifacts (of applications) / Workloads (containers) / Infrastructure (elements).
     */
    categories?: pulumi.Input<pulumi.Input<inputs.ApplicationScopeCategory>[]>;
    /**
     * Description of the application scope.
     */
    description?: pulumi.Input<string>;
    /**
     * Name of an application scope.
     */
    name?: pulumi.Input<string>;
    /**
     * Name of an application scope.
     */
    ownerEmail?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ApplicationScope resource.
 */
export interface ApplicationScopeArgs {
    /**
     * Artifacts (of applications) / Workloads (containers) / Infrastructure (elements).
     */
    categories?: pulumi.Input<pulumi.Input<inputs.ApplicationScopeCategory>[]>;
    /**
     * Description of the application scope.
     */
    description?: pulumi.Input<string>;
    /**
     * Name of an application scope.
     */
    name?: pulumi.Input<string>;
    /**
     * Name of an application scope.
     */
    ownerEmail?: pulumi.Input<string>;
}
