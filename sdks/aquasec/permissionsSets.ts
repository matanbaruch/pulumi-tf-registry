// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class PermissionsSets extends pulumi.CustomResource {
    /**
     * Get an existing PermissionsSets resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PermissionsSetsState, opts?: pulumi.CustomResourceOptions): PermissionsSets {
        return new PermissionsSets(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aquasec:index/permissionsSets:PermissionsSets';

    /**
     * Returns true if the given object is an instance of PermissionsSets.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PermissionsSets {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PermissionsSets.__pulumiType;
    }

    /**
     * List of allowed actions for the Permission Set (not relevant if 'is_super' is true).
     */
    public readonly actions!: pulumi.Output<string[]>;
    /**
     * The name of the user who created the Permission Set.
     */
    public /*out*/ readonly author!: pulumi.Output<string>;
    /**
     * Free text description for the Permission Set.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Give the Permission Set full access, meaning all actions are allowed without restriction.
     */
    public readonly isSuper!: pulumi.Output<boolean | undefined>;
    /**
     * The name of the Permission Set, comprised of alphanumeric characters and '-', '_', ' ', ':', '.', '@', '!', '^'.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Whether to allow UI access for users with this Permission Set.
     */
    public readonly uiAccess!: pulumi.Output<boolean>;
    /**
     * The date of the last modification of the Role.
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;

    /**
     * Create a PermissionsSets resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PermissionsSetsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PermissionsSetsArgs | PermissionsSetsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PermissionsSetsState | undefined;
            resourceInputs["actions"] = state ? state.actions : undefined;
            resourceInputs["author"] = state ? state.author : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["isSuper"] = state ? state.isSuper : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["uiAccess"] = state ? state.uiAccess : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
        } else {
            const args = argsOrState as PermissionsSetsArgs | undefined;
            if ((!args || args.actions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'actions'");
            }
            if ((!args || args.uiAccess === undefined) && !opts.urn) {
                throw new Error("Missing required property 'uiAccess'");
            }
            resourceInputs["actions"] = args ? args.actions : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["isSuper"] = args ? args.isSuper : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["uiAccess"] = args ? args.uiAccess : undefined;
            resourceInputs["author"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PermissionsSets.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering PermissionsSets resources.
 */
export interface PermissionsSetsState {
    /**
     * List of allowed actions for the Permission Set (not relevant if 'is_super' is true).
     */
    actions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the user who created the Permission Set.
     */
    author?: pulumi.Input<string>;
    /**
     * Free text description for the Permission Set.
     */
    description?: pulumi.Input<string>;
    /**
     * Give the Permission Set full access, meaning all actions are allowed without restriction.
     */
    isSuper?: pulumi.Input<boolean>;
    /**
     * The name of the Permission Set, comprised of alphanumeric characters and '-', '_', ' ', ':', '.', '@', '!', '^'.
     */
    name?: pulumi.Input<string>;
    /**
     * Whether to allow UI access for users with this Permission Set.
     */
    uiAccess?: pulumi.Input<boolean>;
    /**
     * The date of the last modification of the Role.
     */
    updatedAt?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a PermissionsSets resource.
 */
export interface PermissionsSetsArgs {
    /**
     * List of allowed actions for the Permission Set (not relevant if 'is_super' is true).
     */
    actions: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Free text description for the Permission Set.
     */
    description?: pulumi.Input<string>;
    /**
     * Give the Permission Set full access, meaning all actions are allowed without restriction.
     */
    isSuper?: pulumi.Input<boolean>;
    /**
     * The name of the Permission Set, comprised of alphanumeric characters and '-', '_', ' ', ':', '.', '@', '!', '^'.
     */
    name?: pulumi.Input<string>;
    /**
     * Whether to allow UI access for users with this Permission Set.
     */
    uiAccess: pulumi.Input<boolean>;
}
