// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getHostRuntimePolicy(args: GetHostRuntimePolicyArgs, opts?: pulumi.InvokeOptions): Promise<GetHostRuntimePolicyResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aquasec:index/getHostRuntimePolicy:getHostRuntimePolicy", {
        "auditing": args.auditing,
        "fileIntegrityMonitorings": args.fileIntegrityMonitorings,
        "id": args.id,
        "malwareScanOptions": args.malwareScanOptions,
        "name": args.name,
        "packageBlock": args.packageBlock,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getHostRuntimePolicy.
 */
export interface GetHostRuntimePolicyArgs {
    auditing?: inputs.GetHostRuntimePolicyAuditing;
    fileIntegrityMonitorings?: inputs.GetHostRuntimePolicyFileIntegrityMonitoring[];
    id?: string;
    malwareScanOptions?: inputs.GetHostRuntimePolicyMalwareScanOptions;
    name: string;
    packageBlock?: inputs.GetHostRuntimePolicyPackageBlock;
}

/**
 * A collection of values returned by getHostRuntimePolicy.
 */
export interface GetHostRuntimePolicyResult {
    readonly applicationScopes: string[];
    readonly auditAllOsUserActivity: boolean;
    readonly auditBruteForceLogin: boolean;
    readonly auditFullCommandArguments: boolean;
    readonly auditHostFailedLoginEvents: boolean;
    readonly auditHostSuccessfulLoginEvents: boolean;
    readonly auditUserAccountManagement: boolean;
    readonly auditing?: outputs.GetHostRuntimePolicyAuditing;
    readonly author: string;
    readonly blockCryptocurrencyMining: boolean;
    readonly blockedFiles: string[];
    readonly description: string;
    readonly enableIpReputation: boolean;
    readonly enabled: boolean;
    readonly enforce: boolean;
    readonly enforceAfterDays: number;
    readonly fileIntegrityMonitorings?: outputs.GetHostRuntimePolicyFileIntegrityMonitoring[];
    readonly id: string;
    readonly malwareScanOptions?: outputs.GetHostRuntimePolicyMalwareScanOptions;
    readonly monitorSystemLogIntegrity: boolean;
    readonly monitorSystemTimeChanges: boolean;
    readonly monitorWindowsServices: boolean;
    readonly name: string;
    readonly osGroupsAlloweds: string[];
    readonly osGroupsBlockeds: string[];
    readonly osUsersAlloweds: string[];
    readonly osUsersBlockeds: string[];
    readonly packageBlock?: outputs.GetHostRuntimePolicyPackageBlock;
    readonly portScanningDetection: boolean;
    readonly scopeExpression: string;
    readonly scopeVariables: outputs.GetHostRuntimePolicyScopeVariable[];
    readonly windowsRegistryMonitorings: outputs.GetHostRuntimePolicyWindowsRegistryMonitoring[];
    readonly windowsRegistryProtections: outputs.GetHostRuntimePolicyWindowsRegistryProtection[];
}
export function getHostRuntimePolicyOutput(args: GetHostRuntimePolicyOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetHostRuntimePolicyResult> {
    return pulumi.output(args).apply((a: any) => getHostRuntimePolicy(a, opts))
}

/**
 * A collection of arguments for invoking getHostRuntimePolicy.
 */
export interface GetHostRuntimePolicyOutputArgs {
    auditing?: pulumi.Input<inputs.GetHostRuntimePolicyAuditingArgs>;
    fileIntegrityMonitorings?: pulumi.Input<pulumi.Input<inputs.GetHostRuntimePolicyFileIntegrityMonitoringArgs>[]>;
    id?: pulumi.Input<string>;
    malwareScanOptions?: pulumi.Input<inputs.GetHostRuntimePolicyMalwareScanOptionsArgs>;
    name: pulumi.Input<string>;
    packageBlock?: pulumi.Input<inputs.GetHostRuntimePolicyPackageBlockArgs>;
}
