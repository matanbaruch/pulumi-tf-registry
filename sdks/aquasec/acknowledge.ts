// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Acknowledge extends pulumi.CustomResource {
    /**
     * Get an existing Acknowledge resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AcknowledgeState, opts?: pulumi.CustomResourceOptions): Acknowledge {
        return new Acknowledge(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aquasec:index/acknowledge:Acknowledge';

    /**
     * Returns true if the given object is an instance of Acknowledge.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Acknowledge {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Acknowledge.__pulumiType;
    }

    /**
     * A comment describing the reason for the acknowledgment
     */
    public readonly comment!: pulumi.Output<string>;
    /**
     * A list of existing security acknowledges.
     */
    public readonly issues!: pulumi.Output<outputs.AcknowledgeIssue[]>;

    /**
     * Create a Acknowledge resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AcknowledgeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AcknowledgeArgs | AcknowledgeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AcknowledgeState | undefined;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["issues"] = state ? state.issues : undefined;
        } else {
            const args = argsOrState as AcknowledgeArgs | undefined;
            if ((!args || args.comment === undefined) && !opts.urn) {
                throw new Error("Missing required property 'comment'");
            }
            if ((!args || args.issues === undefined) && !opts.urn) {
                throw new Error("Missing required property 'issues'");
            }
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["issues"] = args ? args.issues : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Acknowledge.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Acknowledge resources.
 */
export interface AcknowledgeState {
    /**
     * A comment describing the reason for the acknowledgment
     */
    comment?: pulumi.Input<string>;
    /**
     * A list of existing security acknowledges.
     */
    issues?: pulumi.Input<pulumi.Input<inputs.AcknowledgeIssue>[]>;
}

/**
 * The set of arguments for constructing a Acknowledge resource.
 */
export interface AcknowledgeArgs {
    /**
     * A comment describing the reason for the acknowledgment
     */
    comment: pulumi.Input<string>;
    /**
     * A list of existing security acknowledges.
     */
    issues: pulumi.Input<pulumi.Input<inputs.AcknowledgeIssue>[]>;
}
