// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getImage(args: GetImageArgs, opts?: pulumi.InvokeOptions): Promise<GetImageResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aquasec:index/getImage:getImage", {
        "id": args.id,
        "registry": args.registry,
        "repository": args.repository,
        "tag": args.tag,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getImage.
 */
export interface GetImageArgs {
    id?: string;
    registry: string;
    repository: string;
    tag: string;
}

/**
 * A collection of values returned by getImage.
 */
export interface GetImageResult {
    readonly architecture: string;
    readonly assuranceChecksPerformeds: outputs.GetImageAssuranceChecksPerformed[];
    readonly author: string;
    readonly blacklisted: boolean;
    readonly comment: string;
    readonly created: string;
    readonly criticalVulnerabilities: number;
    readonly defaultUser: string;
    readonly digest: string;
    readonly disallowed: boolean;
    readonly disallowedByAssuranceChecks: boolean;
    readonly dockerId: string;
    readonly dockerLabels: string[];
    readonly dockerVersion: string;
    readonly dtaSeverityScore: string;
    readonly dtaSkipped: boolean;
    readonly dtaSkippedReason: string;
    readonly environmentVariables: string[];
    readonly highVulnerabilities: number;
    readonly histories: outputs.GetImageHistory[];
    readonly id: string;
    readonly imageSize: number;
    readonly imageType: string;
    readonly labels: string[];
    readonly lowVulnerabilities: number;
    readonly malware: number;
    readonly mediumVulnerabilities: number;
    readonly name: string;
    readonly negligibleVulnerabilities: number;
    readonly newerImageExists: boolean;
    readonly os: string;
    readonly osVersion: string;
    readonly parent: string;
    readonly partialResults: boolean;
    readonly pendingDisallowed: boolean;
    readonly permission: string;
    readonly permissionAuthor: string;
    readonly permissionComment: string;
    readonly registry: string;
    readonly registryType: string;
    readonly repoDigests: string[];
    readonly repository: string;
    readonly scanDate: string;
    readonly scanError: string;
    readonly scanStatus: string;
    readonly sensitiveData: number;
    readonly tag: string;
    readonly totalVulnerabilities: number;
    readonly virtualSize: number;
    readonly vulnerabilities: outputs.GetImageVulnerability[];
    readonly whitelisted: boolean;
}
export function getImageOutput(args: GetImageOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetImageResult> {
    return pulumi.output(args).apply((a: any) => getImage(a, opts))
}

/**
 * A collection of arguments for invoking getImage.
 */
export interface GetImageOutputArgs {
    id?: pulumi.Input<string>;
    registry: pulumi.Input<string>;
    repository: pulumi.Input<string>;
    tag: pulumi.Input<string>;
}
