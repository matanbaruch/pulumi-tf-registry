// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class IntegrationRegistry extends pulumi.CustomResource {
    /**
     * Get an existing IntegrationRegistry resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IntegrationRegistryState, opts?: pulumi.CustomResourceOptions): IntegrationRegistry {
        return new IntegrationRegistry(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aquasec:index/integrationRegistry:IntegrationRegistry';

    /**
     * Returns true if the given object is an instance of IntegrationRegistry.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IntegrationRegistry {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IntegrationRegistry.__pulumiType;
    }

    /**
     * Automatically clean up that don't match the pull criteria
     */
    public readonly advancedSettingsCleanup!: pulumi.Output<boolean | undefined>;
    /**
     * List of image patterns to pull always
     */
    public readonly alwaysPullPatterns!: pulumi.Output<string[] | undefined>;
    /**
     * The username of the user who created or last modified the registry
     */
    public readonly author!: pulumi.Output<string>;
    /**
     * Automatically clean up images and repositories which are no longer present in the registry from Aqua console
     */
    public readonly autoCleanup!: pulumi.Output<boolean | undefined>;
    /**
     * Whether to automatically pull images from the registry on creation and daily
     */
    public readonly autoPull!: pulumi.Output<boolean | undefined>;
    /**
     * The interval in days to start pulling new images from the registry, Defaults to 1
     */
    public readonly autoPullInterval!: pulumi.Output<number | undefined>;
    /**
     * Maximum number of repositories to pull every day, defaults to 100
     */
    public readonly autoPullMax!: pulumi.Output<number | undefined>;
    /**
     * Whether to automatically pull and rescan images from the registry on creation and daily
     */
    public readonly autoPullRescan!: pulumi.Output<boolean | undefined>;
    /**
     * The time of day to start pulling new images from the registry, in the format HH:MM (24-hour clock), defaults to 03:00
     */
    public readonly autoPullTime!: pulumi.Output<string | undefined>;
    /**
     * The description of the registry
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Additional condition for pulling and rescanning images, Defaults to 'none'
     */
    public readonly imageCreationDateCondition!: pulumi.Output<string>;
    /**
     * The last time the registry was modified in UNIX time
     */
    public readonly lastupdate!: pulumi.Output<number>;
    /**
     * The name of the registry; string, required - this will be treated as the registry's ID, so choose a simple
     * alphanumerical name without special signs and spaces
     */
    public readonly name!: pulumi.Output<string>;
    public readonly options!: pulumi.Output<outputs.IntegrationRegistryOption[] | undefined>;
    /**
     * The password for registry authentication
     */
    public readonly password!: pulumi.Output<string | undefined>;
    /**
     * List of possible prefixes to image names pulled from the registry
     */
    public readonly prefixes!: pulumi.Output<string[]>;
    /**
     * When auto pull image enabled, sets maximum age of auto pulled images (for example for 5 Days the value should be: 5D),
     * Requires `image_creation_date_condition = "image_age"`
     */
    public readonly pullImageAge!: pulumi.Output<string>;
    /**
     * When auto pull image enabled, sets maximum age of auto pulled images tags from each repository (based on image creation
     * date) Requires `image_creation_date_condition = "image_count"`
     */
    public readonly pullImageCount!: pulumi.Output<number>;
    /**
     * List of image tags patterns to pull
     */
    public readonly pullImageTagPatterns!: pulumi.Output<string[] | undefined>;
    /**
     * List of image patterns to exclude
     */
    public readonly pullRepoPatternsExcludeds!: pulumi.Output<string[] | undefined>;
    /**
     * Registry scan timeout in Minutes
     */
    public readonly registryScanTimeout!: pulumi.Output<number | undefined>;
    /**
     * List of scanner names
     */
    public readonly scannerNames!: pulumi.Output<string[] | undefined>;
    /**
     * The Scanner type
     */
    public readonly scannerType!: pulumi.Output<string>;
    /**
     * Registry type (HUB / V1 / V2 / ACR / GAR / ENGINE / AWS / GCR).
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * The URL, address or region of the registry
     */
    public readonly url!: pulumi.Output<string>;
    /**
     * The username for registry authentication.
     */
    public readonly username!: pulumi.Output<string | undefined>;
    /**
     * When enabled, registry events are sent to the given Aqua webhook url
     */
    public readonly webhooks!: pulumi.Output<outputs.IntegrationRegistryWebhook[] | undefined>;

    /**
     * Create a IntegrationRegistry resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IntegrationRegistryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IntegrationRegistryArgs | IntegrationRegistryState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IntegrationRegistryState | undefined;
            resourceInputs["advancedSettingsCleanup"] = state ? state.advancedSettingsCleanup : undefined;
            resourceInputs["alwaysPullPatterns"] = state ? state.alwaysPullPatterns : undefined;
            resourceInputs["author"] = state ? state.author : undefined;
            resourceInputs["autoCleanup"] = state ? state.autoCleanup : undefined;
            resourceInputs["autoPull"] = state ? state.autoPull : undefined;
            resourceInputs["autoPullInterval"] = state ? state.autoPullInterval : undefined;
            resourceInputs["autoPullMax"] = state ? state.autoPullMax : undefined;
            resourceInputs["autoPullRescan"] = state ? state.autoPullRescan : undefined;
            resourceInputs["autoPullTime"] = state ? state.autoPullTime : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["imageCreationDateCondition"] = state ? state.imageCreationDateCondition : undefined;
            resourceInputs["lastupdate"] = state ? state.lastupdate : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["options"] = state ? state.options : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["prefixes"] = state ? state.prefixes : undefined;
            resourceInputs["pullImageAge"] = state ? state.pullImageAge : undefined;
            resourceInputs["pullImageCount"] = state ? state.pullImageCount : undefined;
            resourceInputs["pullImageTagPatterns"] = state ? state.pullImageTagPatterns : undefined;
            resourceInputs["pullRepoPatternsExcludeds"] = state ? state.pullRepoPatternsExcludeds : undefined;
            resourceInputs["registryScanTimeout"] = state ? state.registryScanTimeout : undefined;
            resourceInputs["scannerNames"] = state ? state.scannerNames : undefined;
            resourceInputs["scannerType"] = state ? state.scannerType : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["url"] = state ? state.url : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
            resourceInputs["webhooks"] = state ? state.webhooks : undefined;
        } else {
            const args = argsOrState as IntegrationRegistryArgs | undefined;
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["advancedSettingsCleanup"] = args ? args.advancedSettingsCleanup : undefined;
            resourceInputs["alwaysPullPatterns"] = args ? args.alwaysPullPatterns : undefined;
            resourceInputs["author"] = args ? args.author : undefined;
            resourceInputs["autoCleanup"] = args ? args.autoCleanup : undefined;
            resourceInputs["autoPull"] = args ? args.autoPull : undefined;
            resourceInputs["autoPullInterval"] = args ? args.autoPullInterval : undefined;
            resourceInputs["autoPullMax"] = args ? args.autoPullMax : undefined;
            resourceInputs["autoPullRescan"] = args ? args.autoPullRescan : undefined;
            resourceInputs["autoPullTime"] = args ? args.autoPullTime : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["imageCreationDateCondition"] = args ? args.imageCreationDateCondition : undefined;
            resourceInputs["lastupdate"] = args ? args.lastupdate : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["options"] = args ? args.options : undefined;
            resourceInputs["password"] = args ? args.password : undefined;
            resourceInputs["prefixes"] = args ? args.prefixes : undefined;
            resourceInputs["pullImageAge"] = args ? args.pullImageAge : undefined;
            resourceInputs["pullImageCount"] = args ? args.pullImageCount : undefined;
            resourceInputs["pullImageTagPatterns"] = args ? args.pullImageTagPatterns : undefined;
            resourceInputs["pullRepoPatternsExcludeds"] = args ? args.pullRepoPatternsExcludeds : undefined;
            resourceInputs["registryScanTimeout"] = args ? args.registryScanTimeout : undefined;
            resourceInputs["scannerNames"] = args ? args.scannerNames : undefined;
            resourceInputs["scannerType"] = args ? args.scannerType : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["url"] = args ? args.url : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
            resourceInputs["webhooks"] = args ? args.webhooks : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IntegrationRegistry.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering IntegrationRegistry resources.
 */
export interface IntegrationRegistryState {
    /**
     * Automatically clean up that don't match the pull criteria
     */
    advancedSettingsCleanup?: pulumi.Input<boolean>;
    /**
     * List of image patterns to pull always
     */
    alwaysPullPatterns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The username of the user who created or last modified the registry
     */
    author?: pulumi.Input<string>;
    /**
     * Automatically clean up images and repositories which are no longer present in the registry from Aqua console
     */
    autoCleanup?: pulumi.Input<boolean>;
    /**
     * Whether to automatically pull images from the registry on creation and daily
     */
    autoPull?: pulumi.Input<boolean>;
    /**
     * The interval in days to start pulling new images from the registry, Defaults to 1
     */
    autoPullInterval?: pulumi.Input<number>;
    /**
     * Maximum number of repositories to pull every day, defaults to 100
     */
    autoPullMax?: pulumi.Input<number>;
    /**
     * Whether to automatically pull and rescan images from the registry on creation and daily
     */
    autoPullRescan?: pulumi.Input<boolean>;
    /**
     * The time of day to start pulling new images from the registry, in the format HH:MM (24-hour clock), defaults to 03:00
     */
    autoPullTime?: pulumi.Input<string>;
    /**
     * The description of the registry
     */
    description?: pulumi.Input<string>;
    /**
     * Additional condition for pulling and rescanning images, Defaults to 'none'
     */
    imageCreationDateCondition?: pulumi.Input<string>;
    /**
     * The last time the registry was modified in UNIX time
     */
    lastupdate?: pulumi.Input<number>;
    /**
     * The name of the registry; string, required - this will be treated as the registry's ID, so choose a simple
     * alphanumerical name without special signs and spaces
     */
    name?: pulumi.Input<string>;
    options?: pulumi.Input<pulumi.Input<inputs.IntegrationRegistryOption>[]>;
    /**
     * The password for registry authentication
     */
    password?: pulumi.Input<string>;
    /**
     * List of possible prefixes to image names pulled from the registry
     */
    prefixes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * When auto pull image enabled, sets maximum age of auto pulled images (for example for 5 Days the value should be: 5D),
     * Requires `image_creation_date_condition = "image_age"`
     */
    pullImageAge?: pulumi.Input<string>;
    /**
     * When auto pull image enabled, sets maximum age of auto pulled images tags from each repository (based on image creation
     * date) Requires `image_creation_date_condition = "image_count"`
     */
    pullImageCount?: pulumi.Input<number>;
    /**
     * List of image tags patterns to pull
     */
    pullImageTagPatterns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of image patterns to exclude
     */
    pullRepoPatternsExcludeds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Registry scan timeout in Minutes
     */
    registryScanTimeout?: pulumi.Input<number>;
    /**
     * List of scanner names
     */
    scannerNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The Scanner type
     */
    scannerType?: pulumi.Input<string>;
    /**
     * Registry type (HUB / V1 / V2 / ACR / GAR / ENGINE / AWS / GCR).
     */
    type?: pulumi.Input<string>;
    /**
     * The URL, address or region of the registry
     */
    url?: pulumi.Input<string>;
    /**
     * The username for registry authentication.
     */
    username?: pulumi.Input<string>;
    /**
     * When enabled, registry events are sent to the given Aqua webhook url
     */
    webhooks?: pulumi.Input<pulumi.Input<inputs.IntegrationRegistryWebhook>[]>;
}

/**
 * The set of arguments for constructing a IntegrationRegistry resource.
 */
export interface IntegrationRegistryArgs {
    /**
     * Automatically clean up that don't match the pull criteria
     */
    advancedSettingsCleanup?: pulumi.Input<boolean>;
    /**
     * List of image patterns to pull always
     */
    alwaysPullPatterns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The username of the user who created or last modified the registry
     */
    author?: pulumi.Input<string>;
    /**
     * Automatically clean up images and repositories which are no longer present in the registry from Aqua console
     */
    autoCleanup?: pulumi.Input<boolean>;
    /**
     * Whether to automatically pull images from the registry on creation and daily
     */
    autoPull?: pulumi.Input<boolean>;
    /**
     * The interval in days to start pulling new images from the registry, Defaults to 1
     */
    autoPullInterval?: pulumi.Input<number>;
    /**
     * Maximum number of repositories to pull every day, defaults to 100
     */
    autoPullMax?: pulumi.Input<number>;
    /**
     * Whether to automatically pull and rescan images from the registry on creation and daily
     */
    autoPullRescan?: pulumi.Input<boolean>;
    /**
     * The time of day to start pulling new images from the registry, in the format HH:MM (24-hour clock), defaults to 03:00
     */
    autoPullTime?: pulumi.Input<string>;
    /**
     * The description of the registry
     */
    description?: pulumi.Input<string>;
    /**
     * Additional condition for pulling and rescanning images, Defaults to 'none'
     */
    imageCreationDateCondition?: pulumi.Input<string>;
    /**
     * The last time the registry was modified in UNIX time
     */
    lastupdate?: pulumi.Input<number>;
    /**
     * The name of the registry; string, required - this will be treated as the registry's ID, so choose a simple
     * alphanumerical name without special signs and spaces
     */
    name?: pulumi.Input<string>;
    options?: pulumi.Input<pulumi.Input<inputs.IntegrationRegistryOption>[]>;
    /**
     * The password for registry authentication
     */
    password?: pulumi.Input<string>;
    /**
     * List of possible prefixes to image names pulled from the registry
     */
    prefixes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * When auto pull image enabled, sets maximum age of auto pulled images (for example for 5 Days the value should be: 5D),
     * Requires `image_creation_date_condition = "image_age"`
     */
    pullImageAge?: pulumi.Input<string>;
    /**
     * When auto pull image enabled, sets maximum age of auto pulled images tags from each repository (based on image creation
     * date) Requires `image_creation_date_condition = "image_count"`
     */
    pullImageCount?: pulumi.Input<number>;
    /**
     * List of image tags patterns to pull
     */
    pullImageTagPatterns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of image patterns to exclude
     */
    pullRepoPatternsExcludeds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Registry scan timeout in Minutes
     */
    registryScanTimeout?: pulumi.Input<number>;
    /**
     * List of scanner names
     */
    scannerNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The Scanner type
     */
    scannerType?: pulumi.Input<string>;
    /**
     * Registry type (HUB / V1 / V2 / ACR / GAR / ENGINE / AWS / GCR).
     */
    type: pulumi.Input<string>;
    /**
     * The URL, address or region of the registry
     */
    url?: pulumi.Input<string>;
    /**
     * The username for registry authentication.
     */
    username?: pulumi.Input<string>;
    /**
     * When enabled, registry events are sent to the given Aqua webhook url
     */
    webhooks?: pulumi.Input<pulumi.Input<inputs.IntegrationRegistryWebhook>[]>;
}
