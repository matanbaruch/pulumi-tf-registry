// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class User extends pulumi.CustomResource {
    /**
     * Get an existing User resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UserState, opts?: pulumi.CustomResourceOptions): User {
        return new User(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aquasec:index/user:User';

    /**
     * Returns true if the given object is an instance of User.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is User {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === User.__pulumiType;
    }

    /**
     * The user Email.
     */
    public readonly email!: pulumi.Output<string | undefined>;
    /**
     * If the user must change the password first login. Applicable only one time, Later for user password resets use aqua
     * console.
     */
    public readonly firstTime!: pulumi.Output<boolean | undefined>;
    /**
     * Give the Permission Set full access, meaning all actions are allowed without restriction.
     */
    public /*out*/ readonly isSuper!: pulumi.Output<boolean>;
    /**
     * The user name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Login password for the user; string, required, at least 8 characters long.
     */
    public readonly password!: pulumi.Output<string>;
    /**
     * Password confirmation.
     */
    public readonly passwordConfirm!: pulumi.Output<string | undefined>;
    /**
     * User's Aqua plan (Developer / Team / Advanced).
     */
    public /*out*/ readonly plan!: pulumi.Output<string>;
    /**
     * The first role that assigned to the user for backward compatibility.
     */
    public /*out*/ readonly role!: pulumi.Output<string>;
    /**
     * The roles that will be assigned to the user.
     */
    public readonly roles!: pulumi.Output<string[]>;
    /**
     * The user type (Aqua, LDAP, SAML, OAuth2, OpenID, Tenant Manager).
     */
    public /*out*/ readonly type!: pulumi.Output<string>;
    /**
     * Whether to allow UI access for users with this Permission Set.
     */
    public /*out*/ readonly uiAccess!: pulumi.Output<boolean>;
    /**
     * The user ID.
     */
    public readonly userId!: pulumi.Output<string>;

    /**
     * Create a User resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UserArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UserArgs | UserState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UserState | undefined;
            resourceInputs["email"] = state ? state.email : undefined;
            resourceInputs["firstTime"] = state ? state.firstTime : undefined;
            resourceInputs["isSuper"] = state ? state.isSuper : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["passwordConfirm"] = state ? state.passwordConfirm : undefined;
            resourceInputs["plan"] = state ? state.plan : undefined;
            resourceInputs["role"] = state ? state.role : undefined;
            resourceInputs["roles"] = state ? state.roles : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["uiAccess"] = state ? state.uiAccess : undefined;
            resourceInputs["userId"] = state ? state.userId : undefined;
        } else {
            const args = argsOrState as UserArgs | undefined;
            if ((!args || args.password === undefined) && !opts.urn) {
                throw new Error("Missing required property 'password'");
            }
            if ((!args || args.roles === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roles'");
            }
            if ((!args || args.userId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userId'");
            }
            resourceInputs["email"] = args ? args.email : undefined;
            resourceInputs["firstTime"] = args ? args.firstTime : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["password"] = args ? args.password : undefined;
            resourceInputs["passwordConfirm"] = args ? args.passwordConfirm : undefined;
            resourceInputs["roles"] = args ? args.roles : undefined;
            resourceInputs["userId"] = args ? args.userId : undefined;
            resourceInputs["isSuper"] = undefined /*out*/;
            resourceInputs["plan"] = undefined /*out*/;
            resourceInputs["role"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
            resourceInputs["uiAccess"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(User.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering User resources.
 */
export interface UserState {
    /**
     * The user Email.
     */
    email?: pulumi.Input<string>;
    /**
     * If the user must change the password first login. Applicable only one time, Later for user password resets use aqua
     * console.
     */
    firstTime?: pulumi.Input<boolean>;
    /**
     * Give the Permission Set full access, meaning all actions are allowed without restriction.
     */
    isSuper?: pulumi.Input<boolean>;
    /**
     * The user name.
     */
    name?: pulumi.Input<string>;
    /**
     * Login password for the user; string, required, at least 8 characters long.
     */
    password?: pulumi.Input<string>;
    /**
     * Password confirmation.
     */
    passwordConfirm?: pulumi.Input<string>;
    /**
     * User's Aqua plan (Developer / Team / Advanced).
     */
    plan?: pulumi.Input<string>;
    /**
     * The first role that assigned to the user for backward compatibility.
     */
    role?: pulumi.Input<string>;
    /**
     * The roles that will be assigned to the user.
     */
    roles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The user type (Aqua, LDAP, SAML, OAuth2, OpenID, Tenant Manager).
     */
    type?: pulumi.Input<string>;
    /**
     * Whether to allow UI access for users with this Permission Set.
     */
    uiAccess?: pulumi.Input<boolean>;
    /**
     * The user ID.
     */
    userId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a User resource.
 */
export interface UserArgs {
    /**
     * The user Email.
     */
    email?: pulumi.Input<string>;
    /**
     * If the user must change the password first login. Applicable only one time, Later for user password resets use aqua
     * console.
     */
    firstTime?: pulumi.Input<boolean>;
    /**
     * The user name.
     */
    name?: pulumi.Input<string>;
    /**
     * Login password for the user; string, required, at least 8 characters long.
     */
    password: pulumi.Input<string>;
    /**
     * Password confirmation.
     */
    passwordConfirm?: pulumi.Input<string>;
    /**
     * The roles that will be assigned to the user.
     */
    roles: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The user ID.
     */
    userId: pulumi.Input<string>;
}
