// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Redirect extends pulumi.CustomResource {
    /**
     * Get an existing Redirect resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RedirectState, opts?: pulumi.CustomResourceOptions): Redirect {
        return new Redirect(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ns1:index/redirect:Redirect';

    /**
     * Returns true if the given object is an instance of Redirect.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Redirect {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Redirect.__pulumiType;
    }

    public readonly certificateId!: pulumi.Output<string>;
    public readonly domain!: pulumi.Output<string>;
    public readonly forwardingMode!: pulumi.Output<string | undefined>;
    public readonly forwardingType!: pulumi.Output<string | undefined>;
    public /*out*/ readonly httpsEnabled!: pulumi.Output<boolean>;
    public readonly httpsForced!: pulumi.Output<boolean>;
    public /*out*/ readonly lastUpdated!: pulumi.Output<number>;
    public readonly path!: pulumi.Output<string>;
    public readonly queryForwarding!: pulumi.Output<boolean | undefined>;
    public readonly tags!: pulumi.Output<string[] | undefined>;
    public readonly target!: pulumi.Output<string>;

    /**
     * Create a Redirect resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RedirectArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RedirectArgs | RedirectState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RedirectState | undefined;
            resourceInputs["certificateId"] = state ? state.certificateId : undefined;
            resourceInputs["domain"] = state ? state.domain : undefined;
            resourceInputs["forwardingMode"] = state ? state.forwardingMode : undefined;
            resourceInputs["forwardingType"] = state ? state.forwardingType : undefined;
            resourceInputs["httpsEnabled"] = state ? state.httpsEnabled : undefined;
            resourceInputs["httpsForced"] = state ? state.httpsForced : undefined;
            resourceInputs["lastUpdated"] = state ? state.lastUpdated : undefined;
            resourceInputs["path"] = state ? state.path : undefined;
            resourceInputs["queryForwarding"] = state ? state.queryForwarding : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["target"] = state ? state.target : undefined;
        } else {
            const args = argsOrState as RedirectArgs | undefined;
            if ((!args || args.domain === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domain'");
            }
            if ((!args || args.path === undefined) && !opts.urn) {
                throw new Error("Missing required property 'path'");
            }
            if ((!args || args.target === undefined) && !opts.urn) {
                throw new Error("Missing required property 'target'");
            }
            resourceInputs["certificateId"] = args ? args.certificateId : undefined;
            resourceInputs["domain"] = args ? args.domain : undefined;
            resourceInputs["forwardingMode"] = args ? args.forwardingMode : undefined;
            resourceInputs["forwardingType"] = args ? args.forwardingType : undefined;
            resourceInputs["httpsForced"] = args ? args.httpsForced : undefined;
            resourceInputs["path"] = args ? args.path : undefined;
            resourceInputs["queryForwarding"] = args ? args.queryForwarding : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["target"] = args ? args.target : undefined;
            resourceInputs["httpsEnabled"] = undefined /*out*/;
            resourceInputs["lastUpdated"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Redirect.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Redirect resources.
 */
export interface RedirectState {
    certificateId?: pulumi.Input<string>;
    domain?: pulumi.Input<string>;
    forwardingMode?: pulumi.Input<string>;
    forwardingType?: pulumi.Input<string>;
    httpsEnabled?: pulumi.Input<boolean>;
    httpsForced?: pulumi.Input<boolean>;
    lastUpdated?: pulumi.Input<number>;
    path?: pulumi.Input<string>;
    queryForwarding?: pulumi.Input<boolean>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    target?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Redirect resource.
 */
export interface RedirectArgs {
    certificateId?: pulumi.Input<string>;
    domain: pulumi.Input<string>;
    forwardingMode?: pulumi.Input<string>;
    forwardingType?: pulumi.Input<string>;
    httpsForced?: pulumi.Input<boolean>;
    path: pulumi.Input<string>;
    queryForwarding?: pulumi.Input<boolean>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    target: pulumi.Input<string>;
}
