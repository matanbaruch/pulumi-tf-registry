// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getDnssec(args: GetDnssecArgs, opts?: pulumi.InvokeOptions): Promise<GetDnssecResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("ns1:index/getDnssec:getDnssec", {
        "id": args.id,
        "zone": args.zone,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getDnssec.
 */
export interface GetDnssecArgs {
    id?: string;
    zone: string;
}

/**
 * A collection of values returned by getDnssec.
 */
export interface GetDnssecResult {
    readonly delegations: outputs.GetDnssecDelegation[];
    readonly id: string;
    readonly keys: outputs.GetDnssecKey[];
    readonly zone: string;
}
export function getDnssecOutput(args: GetDnssecOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDnssecResult> {
    return pulumi.output(args).apply((a: any) => getDnssec(a, opts))
}

/**
 * A collection of arguments for invoking getDnssec.
 */
export interface GetDnssecOutputArgs {
    id?: pulumi.Input<string>;
    zone: pulumi.Input<string>;
}
