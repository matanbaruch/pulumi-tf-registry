// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface ApikeyDnsRecordsAllow {
    domain: string;
    includeSubdomains: boolean;
    type: string;
    zone: string;
}

export interface ApikeyDnsRecordsDeny {
    domain: string;
    includeSubdomains: boolean;
    type: string;
    zone: string;
}

export interface ApplicationDefaultConfig {
    http: boolean;
    https?: boolean;
    jobTimeoutMillis?: number;
    requestTimeoutMillis?: number;
    staticValues?: boolean;
    useXhr?: boolean;
}

export interface DatasetDatatype {
    data: {[key: string]: string};
    scope: string;
    type: string;
}

export interface DatasetRepeat {
    endAfterN: number;
    repeatsEvery: string;
    start: number;
}

export interface DatasetReport {
    createdAt: number;
    end: number;
    id: string;
    start: number;
    status: string;
}

export interface DatasetTimeframe {
    aggregation: string;
    cycles?: number;
    from?: number;
    to?: number;
}

export interface GetDnssecDelegation {
    dnskeys: outputs.GetDnssecDelegationDnskey[];
    ds: outputs.GetDnssecDelegationD[];
    ttl: number;
}

export interface GetDnssecDelegationD {
    algorithm: string;
    flags: string;
    protocol: string;
    publicKey: string;
}

export interface GetDnssecDelegationDnskey {
    algorithm: string;
    flags: string;
    protocol: string;
    publicKey: string;
}

export interface GetDnssecKey {
    dnskeys: outputs.GetDnssecKeyDnskey[];
    ttl: number;
}

export interface GetDnssecKeyDnskey {
    algorithm: string;
    flags: string;
    protocol: string;
    publicKey: string;
}

export interface GetMonitoringRegionsRegion {
    code?: string;
    name?: string;
    subnets?: string[];
}

export interface GetNetworksNetwork {
    label: string;
    name: string;
    networkId: number;
}

export interface GetRecordAnswer {
    answer: string;
    meta: {[key: string]: string};
    region: string;
}

export interface GetRecordFilter {
    config: {[key: string]: string};
    disabled: boolean;
    filter: string;
}

export interface GetRecordRegion {
    meta: {[key: string]: string};
    name: string;
}

export interface GetZoneSecondary {
    ip: string;
    networks: number[];
    notify: boolean;
    port: number;
}

export interface MonitoringjobRule {
    comparison: string;
    key: string;
    value: string;
}

export interface NotifylistNotification {
    config: {[key: string]: string};
    type: string;
}

export interface PulsarjobBlendMetricWeights {
    timestamp: number;
}

export interface PulsarjobConfig {
    host?: string;
    http?: boolean;
    https?: boolean;
    jobTimeoutMillis?: number;
    requestTimeoutMillis?: number;
    staticValues?: boolean;
    urlPath?: string;
    useXhr?: boolean;
}

export interface PulsarjobWeight {
    defaultValue: number;
    maximize?: boolean;
    name: string;
    weight: number;
}

export interface RecordAnswer {
    answer?: string;
    meta?: {[key: string]: string};
    region?: string;
}

export interface RecordFilter {
    config?: {[key: string]: string};
    disabled?: boolean;
    filter: string;
}

export interface RecordRegion {
    meta?: {[key: string]: string};
    name: string;
}

export interface TeamDnsRecordsAllow {
    domain: string;
    includeSubdomains: boolean;
    type: string;
    zone: string;
}

export interface TeamDnsRecordsDeny {
    domain: string;
    includeSubdomains: boolean;
    type: string;
    zone: string;
}

export interface TeamIpWhitelist {
    name: string;
    values: string[];
}

export interface UserDnsRecordsAllow {
    domain: string;
    includeSubdomains: boolean;
    type: string;
    zone: string;
}

export interface UserDnsRecordsDeny {
    domain: string;
    includeSubdomains: boolean;
    type: string;
    zone: string;
}

export interface ZoneSecondary {
    ip: string;
    networks: number[];
    notify: boolean;
    port: number;
}

