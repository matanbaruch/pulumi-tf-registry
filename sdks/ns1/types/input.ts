// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface ApikeyDnsRecordsAllow {
    domain: pulumi.Input<string>;
    includeSubdomains: pulumi.Input<boolean>;
    type: pulumi.Input<string>;
    zone: pulumi.Input<string>;
}

export interface ApikeyDnsRecordsDeny {
    domain: pulumi.Input<string>;
    includeSubdomains: pulumi.Input<boolean>;
    type: pulumi.Input<string>;
    zone: pulumi.Input<string>;
}

export interface ApplicationDefaultConfig {
    http: pulumi.Input<boolean>;
    https?: pulumi.Input<boolean>;
    jobTimeoutMillis?: pulumi.Input<number>;
    requestTimeoutMillis?: pulumi.Input<number>;
    staticValues?: pulumi.Input<boolean>;
    useXhr?: pulumi.Input<boolean>;
}

export interface DatasetDatatype {
    data: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    scope: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface DatasetRepeat {
    endAfterN: pulumi.Input<number>;
    repeatsEvery: pulumi.Input<string>;
    start: pulumi.Input<number>;
}

export interface DatasetReport {
    createdAt: pulumi.Input<number>;
    end: pulumi.Input<number>;
    id: pulumi.Input<string>;
    start: pulumi.Input<number>;
    status: pulumi.Input<string>;
}

export interface DatasetTimeframe {
    aggregation: pulumi.Input<string>;
    cycles?: pulumi.Input<number>;
    from?: pulumi.Input<number>;
    to?: pulumi.Input<number>;
}

export interface GetMonitoringRegionsRegion {
    code?: string;
    name?: string;
    subnets?: string[];
}

export interface GetMonitoringRegionsRegionArgs {
    code?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    subnets?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface MonitoringjobRule {
    comparison: pulumi.Input<string>;
    key: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface NotifylistNotification {
    config: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    type: pulumi.Input<string>;
}

export interface PulsarjobBlendMetricWeights {
    timestamp: pulumi.Input<number>;
}

export interface PulsarjobConfig {
    host?: pulumi.Input<string>;
    http?: pulumi.Input<boolean>;
    https?: pulumi.Input<boolean>;
    jobTimeoutMillis?: pulumi.Input<number>;
    requestTimeoutMillis?: pulumi.Input<number>;
    staticValues?: pulumi.Input<boolean>;
    urlPath?: pulumi.Input<string>;
    useXhr?: pulumi.Input<boolean>;
}

export interface PulsarjobWeight {
    defaultValue: pulumi.Input<number>;
    maximize?: pulumi.Input<boolean>;
    name: pulumi.Input<string>;
    weight: pulumi.Input<number>;
}

export interface RecordAnswer {
    answer?: pulumi.Input<string>;
    meta?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    region?: pulumi.Input<string>;
}

export interface RecordFilter {
    config?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    disabled?: pulumi.Input<boolean>;
    filter: pulumi.Input<string>;
}

export interface RecordRegion {
    meta?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name: pulumi.Input<string>;
}

export interface TeamDnsRecordsAllow {
    domain: pulumi.Input<string>;
    includeSubdomains: pulumi.Input<boolean>;
    type: pulumi.Input<string>;
    zone: pulumi.Input<string>;
}

export interface TeamDnsRecordsDeny {
    domain: pulumi.Input<string>;
    includeSubdomains: pulumi.Input<boolean>;
    type: pulumi.Input<string>;
    zone: pulumi.Input<string>;
}

export interface TeamIpWhitelist {
    name: pulumi.Input<string>;
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface UserDnsRecordsAllow {
    domain: pulumi.Input<string>;
    includeSubdomains: pulumi.Input<boolean>;
    type: pulumi.Input<string>;
    zone: pulumi.Input<string>;
}

export interface UserDnsRecordsDeny {
    domain: pulumi.Input<string>;
    includeSubdomains: pulumi.Input<boolean>;
    type: pulumi.Input<string>;
    zone: pulumi.Input<string>;
}

export interface ZoneSecondary {
    ip: pulumi.Input<string>;
    networks?: pulumi.Input<pulumi.Input<number>[]>;
    notify?: pulumi.Input<boolean>;
    port?: pulumi.Input<number>;
}
