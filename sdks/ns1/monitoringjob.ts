// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Monitoringjob extends pulumi.CustomResource {
    /**
     * Get an existing Monitoringjob resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MonitoringjobState, opts?: pulumi.CustomResourceOptions): Monitoringjob {
        return new Monitoringjob(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ns1:index/monitoringjob:Monitoringjob';

    /**
     * Returns true if the given object is an instance of Monitoringjob.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Monitoringjob {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Monitoringjob.__pulumiType;
    }

    public readonly active!: pulumi.Output<boolean | undefined>;
    public readonly config!: pulumi.Output<{[key: string]: string}>;
    public readonly frequency!: pulumi.Output<number>;
    public readonly jobType!: pulumi.Output<string>;
    public readonly mute!: pulumi.Output<boolean | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly notes!: pulumi.Output<string | undefined>;
    public readonly notifyDelay!: pulumi.Output<number | undefined>;
    public readonly notifyFailback!: pulumi.Output<boolean | undefined>;
    public readonly notifyList!: pulumi.Output<string | undefined>;
    public readonly notifyRegional!: pulumi.Output<boolean | undefined>;
    public readonly notifyRepeat!: pulumi.Output<number | undefined>;
    public readonly policy!: pulumi.Output<string | undefined>;
    public readonly rapidRecheck!: pulumi.Output<boolean | undefined>;
    public readonly regions!: pulumi.Output<string[]>;
    public readonly rules!: pulumi.Output<outputs.MonitoringjobRule[] | undefined>;

    /**
     * Create a Monitoringjob resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MonitoringjobArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MonitoringjobArgs | MonitoringjobState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MonitoringjobState | undefined;
            resourceInputs["active"] = state ? state.active : undefined;
            resourceInputs["config"] = state ? state.config : undefined;
            resourceInputs["frequency"] = state ? state.frequency : undefined;
            resourceInputs["jobType"] = state ? state.jobType : undefined;
            resourceInputs["mute"] = state ? state.mute : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notes"] = state ? state.notes : undefined;
            resourceInputs["notifyDelay"] = state ? state.notifyDelay : undefined;
            resourceInputs["notifyFailback"] = state ? state.notifyFailback : undefined;
            resourceInputs["notifyList"] = state ? state.notifyList : undefined;
            resourceInputs["notifyRegional"] = state ? state.notifyRegional : undefined;
            resourceInputs["notifyRepeat"] = state ? state.notifyRepeat : undefined;
            resourceInputs["policy"] = state ? state.policy : undefined;
            resourceInputs["rapidRecheck"] = state ? state.rapidRecheck : undefined;
            resourceInputs["regions"] = state ? state.regions : undefined;
            resourceInputs["rules"] = state ? state.rules : undefined;
        } else {
            const args = argsOrState as MonitoringjobArgs | undefined;
            if ((!args || args.config === undefined) && !opts.urn) {
                throw new Error("Missing required property 'config'");
            }
            if ((!args || args.frequency === undefined) && !opts.urn) {
                throw new Error("Missing required property 'frequency'");
            }
            if ((!args || args.jobType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'jobType'");
            }
            if ((!args || args.regions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'regions'");
            }
            resourceInputs["active"] = args ? args.active : undefined;
            resourceInputs["config"] = args ? args.config : undefined;
            resourceInputs["frequency"] = args ? args.frequency : undefined;
            resourceInputs["jobType"] = args ? args.jobType : undefined;
            resourceInputs["mute"] = args ? args.mute : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["notes"] = args ? args.notes : undefined;
            resourceInputs["notifyDelay"] = args ? args.notifyDelay : undefined;
            resourceInputs["notifyFailback"] = args ? args.notifyFailback : undefined;
            resourceInputs["notifyList"] = args ? args.notifyList : undefined;
            resourceInputs["notifyRegional"] = args ? args.notifyRegional : undefined;
            resourceInputs["notifyRepeat"] = args ? args.notifyRepeat : undefined;
            resourceInputs["policy"] = args ? args.policy : undefined;
            resourceInputs["rapidRecheck"] = args ? args.rapidRecheck : undefined;
            resourceInputs["regions"] = args ? args.regions : undefined;
            resourceInputs["rules"] = args ? args.rules : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Monitoringjob.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Monitoringjob resources.
 */
export interface MonitoringjobState {
    active?: pulumi.Input<boolean>;
    config?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    frequency?: pulumi.Input<number>;
    jobType?: pulumi.Input<string>;
    mute?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    notes?: pulumi.Input<string>;
    notifyDelay?: pulumi.Input<number>;
    notifyFailback?: pulumi.Input<boolean>;
    notifyList?: pulumi.Input<string>;
    notifyRegional?: pulumi.Input<boolean>;
    notifyRepeat?: pulumi.Input<number>;
    policy?: pulumi.Input<string>;
    rapidRecheck?: pulumi.Input<boolean>;
    regions?: pulumi.Input<pulumi.Input<string>[]>;
    rules?: pulumi.Input<pulumi.Input<inputs.MonitoringjobRule>[]>;
}

/**
 * The set of arguments for constructing a Monitoringjob resource.
 */
export interface MonitoringjobArgs {
    active?: pulumi.Input<boolean>;
    config: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    frequency: pulumi.Input<number>;
    jobType: pulumi.Input<string>;
    mute?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    notes?: pulumi.Input<string>;
    notifyDelay?: pulumi.Input<number>;
    notifyFailback?: pulumi.Input<boolean>;
    notifyList?: pulumi.Input<string>;
    notifyRegional?: pulumi.Input<boolean>;
    notifyRepeat?: pulumi.Input<number>;
    policy?: pulumi.Input<string>;
    rapidRecheck?: pulumi.Input<boolean>;
    regions: pulumi.Input<pulumi.Input<string>[]>;
    rules?: pulumi.Input<pulumi.Input<inputs.MonitoringjobRule>[]>;
}
