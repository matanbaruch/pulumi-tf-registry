// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getMonitoringRegions(args?: GetMonitoringRegionsArgs, opts?: pulumi.InvokeOptions): Promise<GetMonitoringRegionsResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("ns1:index/getMonitoringRegions:getMonitoringRegions", {
        "id": args.id,
        "regions": args.regions,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getMonitoringRegions.
 */
export interface GetMonitoringRegionsArgs {
    id?: string;
    regions?: inputs.GetMonitoringRegionsRegion[];
}

/**
 * A collection of values returned by getMonitoringRegions.
 */
export interface GetMonitoringRegionsResult {
    readonly id: string;
    readonly regions?: outputs.GetMonitoringRegionsRegion[];
}
export function getMonitoringRegionsOutput(args?: GetMonitoringRegionsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetMonitoringRegionsResult> {
    return pulumi.output(args).apply((a: any) => getMonitoringRegions(a, opts))
}

/**
 * A collection of arguments for invoking getMonitoringRegions.
 */
export interface GetMonitoringRegionsOutputArgs {
    id?: pulumi.Input<string>;
    regions?: pulumi.Input<pulumi.Input<inputs.GetMonitoringRegionsRegionArgs>[]>;
}
