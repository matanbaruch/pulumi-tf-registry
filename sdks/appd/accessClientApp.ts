// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class AccessClientApp extends pulumi.CustomResource {
    /**
     * Get an existing AccessClientApp resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AccessClientAppState, opts?: pulumi.CustomResourceOptions): AccessClientApp {
        return new AccessClientApp(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'appd:index/accessClientApp:AccessClientApp';

    /**
     * Returns true if the given object is an instance of AccessClientApp.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AccessClientApp {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AccessClientApp.__pulumiType;
    }

    /**
     * Supported authentication methods used to request OAuth tokens: `client_secret_basic` - The client credentials will be
     * sent in the authorization header `client_secret_post` - The client credentials will be sent in the request body.
     */
    public readonly authType!: pulumi.Output<string>;
    /**
     * The client's secret, used to authenticate during an oAuth token request
     */
    public /*out*/ readonly clientSecret!: pulumi.Output<string>;
    /**
     * The RFC3339 timestamp when the client was created
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * A user provided description of the client.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * The display name for the client.
     */
    public readonly displayName!: pulumi.Output<string>;
    /**
     * Indicates if the client has rotated secrets. Rotated client secrets can be revoked.
     */
    public /*out*/ readonly hasRotatedSecrets!: pulumi.Output<boolean>;
    /**
     * Revokes all the rotated client secrets of the specified client. Defaults to false. Please note that this cannot be used
     * along with rotate_secret. If you wish to rotate the secret to a newer version and revoke the current one immediately,
     * use the `revoke_previous_secret_in` and set it to `now`
     */
    public readonly revokeNow!: pulumi.Output<boolean | undefined>;
    /**
     * Time duration of how long the previous secret should be active for. Acceptable values are `NOW`, `1D`, `3D`, `7D` and
     * `30D`. Must be set when rotating a secret with rotate_secret.
     */
    public readonly revokePreviousSecretIn!: pulumi.Output<string | undefined>;
    /**
     * Rotates the client secret of the specified service client. Defaults to false.
     */
    public readonly rotateSecret!: pulumi.Output<boolean | undefined>;
    /**
     * The RFC3339 timestamp when the rotated client secret will expire.
     */
    public /*out*/ readonly rotatedSecretExpiresAt!: pulumi.Output<string>;
    /**
     * The RFC3339 timestamp when the client was last updated.
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;

    /**
     * Create a AccessClientApp resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AccessClientAppArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AccessClientAppArgs | AccessClientAppState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AccessClientAppState | undefined;
            resourceInputs["authType"] = state ? state.authType : undefined;
            resourceInputs["clientSecret"] = state ? state.clientSecret : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["hasRotatedSecrets"] = state ? state.hasRotatedSecrets : undefined;
            resourceInputs["revokeNow"] = state ? state.revokeNow : undefined;
            resourceInputs["revokePreviousSecretIn"] = state ? state.revokePreviousSecretIn : undefined;
            resourceInputs["rotateSecret"] = state ? state.rotateSecret : undefined;
            resourceInputs["rotatedSecretExpiresAt"] = state ? state.rotatedSecretExpiresAt : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
        } else {
            const args = argsOrState as AccessClientAppArgs | undefined;
            if ((!args || args.authType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'authType'");
            }
            if ((!args || args.description === undefined) && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            resourceInputs["authType"] = args ? args.authType : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["revokeNow"] = args ? args.revokeNow : undefined;
            resourceInputs["revokePreviousSecretIn"] = args ? args.revokePreviousSecretIn : undefined;
            resourceInputs["rotateSecret"] = args ? args.rotateSecret : undefined;
            resourceInputs["clientSecret"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["hasRotatedSecrets"] = undefined /*out*/;
            resourceInputs["rotatedSecretExpiresAt"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["clientSecret"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(AccessClientApp.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AccessClientApp resources.
 */
export interface AccessClientAppState {
    /**
     * Supported authentication methods used to request OAuth tokens: `client_secret_basic` - The client credentials will be
     * sent in the authorization header `client_secret_post` - The client credentials will be sent in the request body.
     */
    authType?: pulumi.Input<string>;
    /**
     * The client's secret, used to authenticate during an oAuth token request
     */
    clientSecret?: pulumi.Input<string>;
    /**
     * The RFC3339 timestamp when the client was created
     */
    createdAt?: pulumi.Input<string>;
    /**
     * A user provided description of the client.
     */
    description?: pulumi.Input<string>;
    /**
     * The display name for the client.
     */
    displayName?: pulumi.Input<string>;
    /**
     * Indicates if the client has rotated secrets. Rotated client secrets can be revoked.
     */
    hasRotatedSecrets?: pulumi.Input<boolean>;
    /**
     * Revokes all the rotated client secrets of the specified client. Defaults to false. Please note that this cannot be used
     * along with rotate_secret. If you wish to rotate the secret to a newer version and revoke the current one immediately,
     * use the `revoke_previous_secret_in` and set it to `now`
     */
    revokeNow?: pulumi.Input<boolean>;
    /**
     * Time duration of how long the previous secret should be active for. Acceptable values are `NOW`, `1D`, `3D`, `7D` and
     * `30D`. Must be set when rotating a secret with rotate_secret.
     */
    revokePreviousSecretIn?: pulumi.Input<string>;
    /**
     * Rotates the client secret of the specified service client. Defaults to false.
     */
    rotateSecret?: pulumi.Input<boolean>;
    /**
     * The RFC3339 timestamp when the rotated client secret will expire.
     */
    rotatedSecretExpiresAt?: pulumi.Input<string>;
    /**
     * The RFC3339 timestamp when the client was last updated.
     */
    updatedAt?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AccessClientApp resource.
 */
export interface AccessClientAppArgs {
    /**
     * Supported authentication methods used to request OAuth tokens: `client_secret_basic` - The client credentials will be
     * sent in the authorization header `client_secret_post` - The client credentials will be sent in the request body.
     */
    authType: pulumi.Input<string>;
    /**
     * A user provided description of the client.
     */
    description: pulumi.Input<string>;
    /**
     * The display name for the client.
     */
    displayName: pulumi.Input<string>;
    /**
     * Revokes all the rotated client secrets of the specified client. Defaults to false. Please note that this cannot be used
     * along with rotate_secret. If you wish to rotate the secret to a newer version and revoke the current one immediately,
     * use the `revoke_previous_secret_in` and set it to `now`
     */
    revokeNow?: pulumi.Input<boolean>;
    /**
     * Time duration of how long the previous secret should be active for. Acceptable values are `NOW`, `1D`, `3D`, `7D` and
     * `30D`. Must be set when rotating a secret with rotate_secret.
     */
    revokePreviousSecretIn?: pulumi.Input<string>;
    /**
     * Rotates the client secret of the specified service client. Defaults to false.
     */
    rotateSecret?: pulumi.Input<boolean>;
}
