// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The provider type for the appd package. By default, resources use package-wide configuration
 * settings, however an explicit `Provider` instance may be created and passed during resource
 * construction to achieve fine-grained programmatic control over provider settings. See the
 * [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.
 */
export class Provider extends pulumi.ProviderResource {
    /** @internal */
    public static readonly __pulumiType = 'appd';

    /**
     * Returns true if the given object is an instance of Provider.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Provider {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === "pulumi:providers:" + Provider.__pulumiType;
    }

    /**
     * ClientID of the AppDynamics API Client, this can also be set as the APPDYNAMICS_CLIENT_ID environment variable. To be
     * used with login mode service_principal.
     */
    public readonly clientId!: pulumi.Output<string | undefined>;
    /**
     * ClientSecret of the AppDynamics API Client. This can also be set as the APPDYNAMICS_CLIENT_SECRET environment variable.
     * To be used with login mode service_principal.
     */
    public readonly clientSecret!: pulumi.Output<string | undefined>;
    /**
     * Mode of login. Possible values are: service_principal, browser and headless. This can also be set as the
     * APPDYNAMICS_LOGIN_MODE environment variable.
     */
    public readonly loginMode!: pulumi.Output<string>;
    /**
     * Password to login to the AppDynamics Platform. This can also be set as the APPDYNAMICS_PASSWORD environment variable. To
     * be used with login mode headless.
     */
    public readonly password!: pulumi.Output<string | undefined>;
    /**
     * Tenant name of the AppDynamics Platform. This can also be set as the APPDYNAMICS_TENANT_NAME environment variable.
     */
    public readonly tenantName!: pulumi.Output<string>;
    /**
     * Username to login to the AppDynamics Platform. This can also be set as the APPDYNAMICS_USERNAME environment variable. To
     * be used with login mode headless.
     */
    public readonly username!: pulumi.Output<string | undefined>;

    /**
     * Create a Provider resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProviderArgs, opts?: pulumi.ResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        {
            if ((!args || args.loginMode === undefined) && !opts.urn) {
                throw new Error("Missing required property 'loginMode'");
            }
            if ((!args || args.tenantName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tenantName'");
            }
            resourceInputs["clientId"] = args ? args.clientId : undefined;
            resourceInputs["clientSecret"] = args?.clientSecret ? pulumi.secret(args.clientSecret) : undefined;
            resourceInputs["loginMode"] = args ? args.loginMode : undefined;
            resourceInputs["password"] = args ? args.password : undefined;
            resourceInputs["saveToken"] = pulumi.output(args ? args.saveToken : undefined).apply(JSON.stringify);
            resourceInputs["tenantName"] = args ? args.tenantName : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["clientSecret"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Provider.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * The set of arguments for constructing a Provider resource.
 */
export interface ProviderArgs {
    /**
     * ClientID of the AppDynamics API Client, this can also be set as the APPDYNAMICS_CLIENT_ID environment variable. To be
     * used with login mode service_principal.
     */
    clientId?: pulumi.Input<string>;
    /**
     * ClientSecret of the AppDynamics API Client. This can also be set as the APPDYNAMICS_CLIENT_SECRET environment variable.
     * To be used with login mode service_principal.
     */
    clientSecret?: pulumi.Input<string>;
    /**
     * Mode of login. Possible values are: service_principal, browser and headless. This can also be set as the
     * APPDYNAMICS_LOGIN_MODE environment variable.
     */
    loginMode: pulumi.Input<string>;
    /**
     * Password to login to the AppDynamics Platform. This can also be set as the APPDYNAMICS_PASSWORD environment variable. To
     * be used with login mode headless.
     */
    password?: pulumi.Input<string>;
    /**
     * Whether or not to store the access token acquired by login mode browser and headless. This is for convenience and if you
     * store the token, it would not prompt you to login again until it expires. This can also be set as the
     * APPDYNAMICS_SAVE_TOKEN environment variable.
     */
    saveToken?: pulumi.Input<boolean>;
    /**
     * Tenant name of the AppDynamics Platform. This can also be set as the APPDYNAMICS_TENANT_NAME environment variable.
     */
    tenantName: pulumi.Input<string>;
    /**
     * Username to login to the AppDynamics Platform. This can also be set as the APPDYNAMICS_USERNAME environment variable. To
     * be used with login mode headless.
     */
    username?: pulumi.Input<string>;
}
