// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AccessClientAppArgs, AccessClientAppState } from "./accessClientApp";
export type AccessClientApp = import("./accessClientApp").AccessClientApp;
export const AccessClientApp: typeof import("./accessClientApp").AccessClientApp = null as any;
utilities.lazyLoad(exports, ["AccessClientApp"], () => require("./accessClientApp"));

export { ConnectionAwsArgs, ConnectionAwsState } from "./connectionAws";
export type ConnectionAws = import("./connectionAws").ConnectionAws;
export const ConnectionAws: typeof import("./connectionAws").ConnectionAws = null as any;
utilities.lazyLoad(exports, ["ConnectionAws"], () => require("./connectionAws"));

export { ConnectionAwsRoleAttachmentArgs, ConnectionAwsRoleAttachmentState } from "./connectionAwsRoleAttachment";
export type ConnectionAwsRoleAttachment = import("./connectionAwsRoleAttachment").ConnectionAwsRoleAttachment;
export const ConnectionAwsRoleAttachment: typeof import("./connectionAwsRoleAttachment").ConnectionAwsRoleAttachment = null as any;
utilities.lazyLoad(exports, ["ConnectionAwsRoleAttachment"], () => require("./connectionAwsRoleAttachment"));

export { ConnectionAzureArgs, ConnectionAzureState } from "./connectionAzure";
export type ConnectionAzure = import("./connectionAzure").ConnectionAzure;
export const ConnectionAzure: typeof import("./connectionAzure").ConnectionAzure = null as any;
utilities.lazyLoad(exports, ["ConnectionAzure"], () => require("./connectionAzure"));

export { GetAccessClientAppArgs, GetAccessClientAppResult, GetAccessClientAppOutputArgs } from "./getAccessClientApp";
export const getAccessClientApp: typeof import("./getAccessClientApp").getAccessClientApp = null as any;
export const getAccessClientAppOutput: typeof import("./getAccessClientApp").getAccessClientAppOutput = null as any;
utilities.lazyLoad(exports, ["getAccessClientApp","getAccessClientAppOutput"], () => require("./getAccessClientApp"));

export { GetConnectionAwsArgs, GetConnectionAwsResult, GetConnectionAwsOutputArgs } from "./getConnectionAws";
export const getConnectionAws: typeof import("./getConnectionAws").getConnectionAws = null as any;
export const getConnectionAwsOutput: typeof import("./getConnectionAws").getConnectionAwsOutput = null as any;
utilities.lazyLoad(exports, ["getConnectionAws","getConnectionAwsOutput"], () => require("./getConnectionAws"));

export { GetConnectionAzureArgs, GetConnectionAzureResult, GetConnectionAzureOutputArgs } from "./getConnectionAzure";
export const getConnectionAzure: typeof import("./getConnectionAzure").getConnectionAzure = null as any;
export const getConnectionAzureOutput: typeof import("./getConnectionAzure").getConnectionAzureOutput = null as any;
utilities.lazyLoad(exports, ["getConnectionAzure","getConnectionAzureOutput"], () => require("./getConnectionAzure"));

export { GetQueryArgs, GetQueryResult, GetQueryOutputArgs } from "./getQuery";
export const getQuery: typeof import("./getQuery").getQuery = null as any;
export const getQueryOutput: typeof import("./getQuery").getQueryOutput = null as any;
utilities.lazyLoad(exports, ["getQuery","getQueryOutput"], () => require("./getQuery"));

export { GetRegionsAwsArgs, GetRegionsAwsResult, GetRegionsAwsOutputArgs } from "./getRegionsAws";
export const getRegionsAws: typeof import("./getRegionsAws").getRegionsAws = null as any;
export const getRegionsAwsOutput: typeof import("./getRegionsAws").getRegionsAwsOutput = null as any;
utilities.lazyLoad(exports, ["getRegionsAws","getRegionsAwsOutput"], () => require("./getRegionsAws"));

export { GetRegionsAzureArgs, GetRegionsAzureResult, GetRegionsAzureOutputArgs } from "./getRegionsAzure";
export const getRegionsAzure: typeof import("./getRegionsAzure").getRegionsAzure = null as any;
export const getRegionsAzureOutput: typeof import("./getRegionsAzure").getRegionsAzureOutput = null as any;
utilities.lazyLoad(exports, ["getRegionsAzure","getRegionsAzureOutput"], () => require("./getRegionsAzure"));

export { GetServicesAwsArgs, GetServicesAwsResult, GetServicesAwsOutputArgs } from "./getServicesAws";
export const getServicesAws: typeof import("./getServicesAws").getServicesAws = null as any;
export const getServicesAwsOutput: typeof import("./getServicesAws").getServicesAwsOutput = null as any;
utilities.lazyLoad(exports, ["getServicesAws","getServicesAwsOutput"], () => require("./getServicesAws"));

export { GetServicesAzureArgs, GetServicesAzureResult, GetServicesAzureOutputArgs } from "./getServicesAzure";
export const getServicesAzure: typeof import("./getServicesAzure").getServicesAzure = null as any;
export const getServicesAzureOutput: typeof import("./getServicesAzure").getServicesAzureOutput = null as any;
utilities.lazyLoad(exports, ["getServicesAzure","getServicesAzureOutput"], () => require("./getServicesAzure"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "appd:index/accessClientApp:AccessClientApp":
                return new AccessClientApp(name, <any>undefined, { urn })
            case "appd:index/connectionAws:ConnectionAws":
                return new ConnectionAws(name, <any>undefined, { urn })
            case "appd:index/connectionAwsRoleAttachment:ConnectionAwsRoleAttachment":
                return new ConnectionAwsRoleAttachment(name, <any>undefined, { urn })
            case "appd:index/connectionAzure:ConnectionAzure":
                return new ConnectionAzure(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("appd", "index/accessClientApp", _module)
pulumi.runtime.registerResourceModule("appd", "index/connectionAws", _module)
pulumi.runtime.registerResourceModule("appd", "index/connectionAwsRoleAttachment", _module)
pulumi.runtime.registerResourceModule("appd", "index/connectionAzure", _module)
pulumi.runtime.registerResourcePackage("appd", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:appd") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
