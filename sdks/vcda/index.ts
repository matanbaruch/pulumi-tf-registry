// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AppliancePasswordArgs, AppliancePasswordState } from "./appliancePassword";
export type AppliancePassword = import("./appliancePassword").AppliancePassword;
export const AppliancePassword: typeof import("./appliancePassword").AppliancePassword = null as any;
utilities.lazyLoad(exports, ["AppliancePassword"], () => require("./appliancePassword"));

export { CloudDirectorReplicationManagerArgs, CloudDirectorReplicationManagerState } from "./cloudDirectorReplicationManager";
export type CloudDirectorReplicationManager = import("./cloudDirectorReplicationManager").CloudDirectorReplicationManager;
export const CloudDirectorReplicationManager: typeof import("./cloudDirectorReplicationManager").CloudDirectorReplicationManager = null as any;
utilities.lazyLoad(exports, ["CloudDirectorReplicationManager"], () => require("./cloudDirectorReplicationManager"));

export { GetCloudHealthArgs, GetCloudHealthResult, GetCloudHealthOutputArgs } from "./getCloudHealth";
export const getCloudHealth: typeof import("./getCloudHealth").getCloudHealth = null as any;
export const getCloudHealthOutput: typeof import("./getCloudHealth").getCloudHealthOutput = null as any;
utilities.lazyLoad(exports, ["getCloudHealth","getCloudHealthOutput"], () => require("./getCloudHealth"));

export { GetManagerHealthArgs, GetManagerHealthResult, GetManagerHealthOutputArgs } from "./getManagerHealth";
export const getManagerHealth: typeof import("./getManagerHealth").getManagerHealth = null as any;
export const getManagerHealthOutput: typeof import("./getManagerHealth").getManagerHealthOutput = null as any;
utilities.lazyLoad(exports, ["getManagerHealth","getManagerHealthOutput"], () => require("./getManagerHealth"));

export { GetRemoteServicesThumbprintArgs, GetRemoteServicesThumbprintResult, GetRemoteServicesThumbprintOutputArgs } from "./getRemoteServicesThumbprint";
export const getRemoteServicesThumbprint: typeof import("./getRemoteServicesThumbprint").getRemoteServicesThumbprint = null as any;
export const getRemoteServicesThumbprintOutput: typeof import("./getRemoteServicesThumbprint").getRemoteServicesThumbprintOutput = null as any;
utilities.lazyLoad(exports, ["getRemoteServicesThumbprint","getRemoteServicesThumbprintOutput"], () => require("./getRemoteServicesThumbprint"));

export { GetReplicatorHealthArgs, GetReplicatorHealthResult, GetReplicatorHealthOutputArgs } from "./getReplicatorHealth";
export const getReplicatorHealth: typeof import("./getReplicatorHealth").getReplicatorHealth = null as any;
export const getReplicatorHealthOutput: typeof import("./getReplicatorHealth").getReplicatorHealthOutput = null as any;
utilities.lazyLoad(exports, ["getReplicatorHealth","getReplicatorHealthOutput"], () => require("./getReplicatorHealth"));

export { GetServiceCertArgs, GetServiceCertResult, GetServiceCertOutputArgs } from "./getServiceCert";
export const getServiceCert: typeof import("./getServiceCert").getServiceCert = null as any;
export const getServiceCertOutput: typeof import("./getServiceCert").getServiceCertOutput = null as any;
utilities.lazyLoad(exports, ["getServiceCert","getServiceCertOutput"], () => require("./getServiceCert"));

export { GetTunnelConnectivityArgs, GetTunnelConnectivityResult, GetTunnelConnectivityOutputArgs } from "./getTunnelConnectivity";
export const getTunnelConnectivity: typeof import("./getTunnelConnectivity").getTunnelConnectivity = null as any;
export const getTunnelConnectivityOutput: typeof import("./getTunnelConnectivity").getTunnelConnectivityOutput = null as any;
utilities.lazyLoad(exports, ["getTunnelConnectivity","getTunnelConnectivityOutput"], () => require("./getTunnelConnectivity"));

export { PairSiteArgs, PairSiteState } from "./pairSite";
export type PairSite = import("./pairSite").PairSite;
export const PairSite: typeof import("./pairSite").PairSite = null as any;
utilities.lazyLoad(exports, ["PairSite"], () => require("./pairSite"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { ReplicatorArgs, ReplicatorState } from "./replicator";
export type Replicator = import("./replicator").Replicator;
export const Replicator: typeof import("./replicator").Replicator = null as any;
utilities.lazyLoad(exports, ["Replicator"], () => require("./replicator"));

export { TunnelArgs, TunnelState } from "./tunnel";
export type Tunnel = import("./tunnel").Tunnel;
export const Tunnel: typeof import("./tunnel").Tunnel = null as any;
utilities.lazyLoad(exports, ["Tunnel"], () => require("./tunnel"));

export { VcenterReplicationManagerArgs, VcenterReplicationManagerState } from "./vcenterReplicationManager";
export type VcenterReplicationManager = import("./vcenterReplicationManager").VcenterReplicationManager;
export const VcenterReplicationManager: typeof import("./vcenterReplicationManager").VcenterReplicationManager = null as any;
utilities.lazyLoad(exports, ["VcenterReplicationManager"], () => require("./vcenterReplicationManager"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "vcda:index/appliancePassword:AppliancePassword":
                return new AppliancePassword(name, <any>undefined, { urn })
            case "vcda:index/cloudDirectorReplicationManager:CloudDirectorReplicationManager":
                return new CloudDirectorReplicationManager(name, <any>undefined, { urn })
            case "vcda:index/pairSite:PairSite":
                return new PairSite(name, <any>undefined, { urn })
            case "vcda:index/replicator:Replicator":
                return new Replicator(name, <any>undefined, { urn })
            case "vcda:index/tunnel:Tunnel":
                return new Tunnel(name, <any>undefined, { urn })
            case "vcda:index/vcenterReplicationManager:VcenterReplicationManager":
                return new VcenterReplicationManager(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("vcda", "index/appliancePassword", _module)
pulumi.runtime.registerResourceModule("vcda", "index/cloudDirectorReplicationManager", _module)
pulumi.runtime.registerResourceModule("vcda", "index/pairSite", _module)
pulumi.runtime.registerResourceModule("vcda", "index/replicator", _module)
pulumi.runtime.registerResourceModule("vcda", "index/tunnel", _module)
pulumi.runtime.registerResourceModule("vcda", "index/vcenterReplicationManager", _module)
pulumi.runtime.registerResourcePackage("vcda", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:vcda") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
