// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The provider type for the vcda package. By default, resources use package-wide configuration
 * settings, however an explicit `Provider` instance may be created and passed during resource
 * construction to achieve fine-grained programmatic control over provider settings. See the
 * [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.
 */
export class Provider extends pulumi.ProviderResource {
    /** @internal */
    public static readonly __pulumiType = 'vcda';

    /**
     * Returns true if the given object is an instance of Provider.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Provider {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === "pulumi:providers:" + Provider.__pulumiType;
    }

    /**
     * The local password of the appliance.
     */
    public readonly localPassword!: pulumi.Output<string>;
    /**
     * The local user of the appliance.
     */
    public readonly localUser!: pulumi.Output<string>;
    /**
     * The IP address of either the Cloud Director Replication Management Appliance or the vCenter Replication Management
     * Appliance.
     */
    public readonly vcdaIp!: pulumi.Output<string>;
    /**
     * The password of the user for performing vSphere API operations.
     */
    public readonly vspherePassword!: pulumi.Output<string>;
    /**
     * The vSphere server name for performing vSphere API operations.
     */
    public readonly vsphereServer!: pulumi.Output<string>;
    /**
     * The user name for performing vSphere API operations.
     */
    public readonly vsphereUser!: pulumi.Output<string>;

    /**
     * Create a Provider resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProviderArgs, opts?: pulumi.ResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        {
            if ((!args || args.localPassword === undefined) && !opts.urn) {
                throw new Error("Missing required property 'localPassword'");
            }
            if ((!args || args.localUser === undefined) && !opts.urn) {
                throw new Error("Missing required property 'localUser'");
            }
            if ((!args || args.vcdaIp === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vcdaIp'");
            }
            if ((!args || args.vspherePassword === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vspherePassword'");
            }
            if ((!args || args.vsphereServer === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vsphereServer'");
            }
            if ((!args || args.vsphereUser === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vsphereUser'");
            }
            resourceInputs["localPassword"] = args ? args.localPassword : undefined;
            resourceInputs["localUser"] = args ? args.localUser : undefined;
            resourceInputs["vcdaIp"] = args ? args.vcdaIp : undefined;
            resourceInputs["vsphereAllowUnverifiedSsl"] = pulumi.output(args ? args.vsphereAllowUnverifiedSsl : undefined).apply(JSON.stringify);
            resourceInputs["vspherePassword"] = args ? args.vspherePassword : undefined;
            resourceInputs["vsphereServer"] = args ? args.vsphereServer : undefined;
            resourceInputs["vsphereUser"] = args ? args.vsphereUser : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Provider.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * The set of arguments for constructing a Provider resource.
 */
export interface ProviderArgs {
    /**
     * The local password of the appliance.
     */
    localPassword: pulumi.Input<string>;
    /**
     * The local user of the appliance.
     */
    localUser: pulumi.Input<string>;
    /**
     * The IP address of either the Cloud Director Replication Management Appliance or the vCenter Replication Management
     * Appliance.
     */
    vcdaIp: pulumi.Input<string>;
    /**
     * When set, the vSphere client establishes an insecure TLS connection without performing certificate validations.
     */
    vsphereAllowUnverifiedSsl?: pulumi.Input<boolean>;
    /**
     * The password of the user for performing vSphere API operations.
     */
    vspherePassword: pulumi.Input<string>;
    /**
     * The vSphere server name for performing vSphere API operations.
     */
    vsphereServer: pulumi.Input<string>;
    /**
     * The user name for performing vSphere API operations.
     */
    vsphereUser: pulumi.Input<string>;
}
