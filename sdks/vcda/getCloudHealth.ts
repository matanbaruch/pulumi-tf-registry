// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getCloudHealth(args: GetCloudHealthArgs, opts?: pulumi.InvokeOptions): Promise<GetCloudHealthResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("vcda:index/getCloudHealth:getCloudHealth", {
        "serviceCert": args.serviceCert,
        "timeouts": args.timeouts,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getCloudHealth.
 */
export interface GetCloudHealthArgs {
    serviceCert: string;
    timeouts?: inputs.GetCloudHealthTimeouts;
}

/**
 * A collection of values returned by getCloudHealth.
 */
export interface GetCloudHealthResult {
    readonly address: string;
    readonly applianceBootTimestamp: number;
    readonly buildDate: number;
    readonly buildVersion: string;
    readonly currentTime: number;
    readonly dbErrorArgs: string[];
    readonly dbErrorCode: string;
    readonly dbErrorMsg: string;
    readonly dbErrorStacktrace: string;
    readonly diskUsage: {[key: string]: number};
    readonly id: string;
    readonly instanceId: string;
    readonly lsErrorArgs: string[];
    readonly lsErrorCode: string;
    readonly lsErrorMsg: string;
    readonly lsErrorStacktrace: string;
    readonly managerErrorArgs: string[];
    readonly managerErrorCode: string;
    readonly managerErrorMsg: string;
    readonly managerErrorStacktrace: string;
    readonly managerId: string;
    readonly ntpErrorArgs: string[];
    readonly ntpErrorCode: string;
    readonly ntpErrorMsg: string;
    readonly ntpErrorStacktrace: string;
    readonly productName: string;
    readonly runtimeId: string;
    readonly serviceBootTimestamp: number;
    readonly serviceCert: string;
    readonly timeouts?: outputs.GetCloudHealthTimeouts;
    readonly tunnelsIds: string[];
    readonly vcdErrorArgs: string[];
    readonly vcdErrorCode: string;
    readonly vcdErrorMsg: string;
    readonly vcdErrorStacktrace: string;
}
export function getCloudHealthOutput(args: GetCloudHealthOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetCloudHealthResult> {
    return pulumi.output(args).apply((a: any) => getCloudHealth(a, opts))
}

/**
 * A collection of arguments for invoking getCloudHealth.
 */
export interface GetCloudHealthOutputArgs {
    serviceCert: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.GetCloudHealthTimeoutsArgs>;
}
