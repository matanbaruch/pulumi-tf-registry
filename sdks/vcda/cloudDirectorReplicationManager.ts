// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CloudDirectorReplicationManager extends pulumi.CustomResource {
    /**
     * Get an existing CloudDirectorReplicationManager resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CloudDirectorReplicationManagerState, opts?: pulumi.CustomResourceOptions): CloudDirectorReplicationManager {
        return new CloudDirectorReplicationManager(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vcda:index/cloudDirectorReplicationManager:CloudDirectorReplicationManager';

    /**
     * Returns true if the given object is an instance of CloudDirectorReplicationManager.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CloudDirectorReplicationManager {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CloudDirectorReplicationManager.__pulumiType;
    }

    /**
     * Effective endpoint API address.
     */
    public /*out*/ readonly apiAddress!: pulumi.Output<string>;
    /**
     * Effective endpoint API port.
     */
    public /*out*/ readonly apiPort!: pulumi.Output<number>;
    /**
     * Effective endpoint API public address.
     */
    public /*out*/ readonly apiPublicAddress!: pulumi.Output<string>;
    /**
     * Effective endpoint API public port.
     */
    public /*out*/ readonly apiPublicPort!: pulumi.Output<number>;
    /**
     * VMware Cloud Director Availability license expiration date.
     */
    public /*out*/ readonly expirationDate!: pulumi.Output<number>;
    /**
     * Flag indicating whether the appliance role is Cloud Director Combined Appliance.
     */
    public /*out*/ readonly isCombined!: pulumi.Output<boolean>;
    /**
     * Flag indicating whether the solution is licensed.
     */
    public /*out*/ readonly isLicensed!: pulumi.Output<boolean>;
    /**
     * The license key for VMware Cloud Director Availability.
     */
    public readonly licenseKey!: pulumi.Output<string>;
    /**
     * Cloud Director Replication Manager local site name.
     */
    public /*out*/ readonly localSite!: pulumi.Output<string>;
    /**
     * Cloud Director Replication Manager local site description.
     */
    public /*out*/ readonly localSiteDescription!: pulumi.Output<string>;
    /**
     * The thumbprint of the vCenter Server Lookup service. It can either be computed from the
     * `vcda.getRemoteServicesThumbprint` data source or provided directly as a SHA-256 fingerprint.
     */
    public readonly lookupServiceThumbprint!: pulumi.Output<string>;
    /**
     * The URL of the vCenter Server Lookup service. For example, https://server.domain.com/lookupservice/sdk.
     */
    public readonly lookupServiceUrl!: pulumi.Output<string>;
    /**
     * SHA-256 vCenter Server Lookup service thumbprint.
     */
    public /*out*/ readonly lsThumbprint!: pulumi.Output<string>;
    /**
     * The URL of the vCenter Server Lookup service.
     */
    public /*out*/ readonly lsUrl!: pulumi.Output<string>;
    /**
     * Effective endpoint management address.
     */
    public /*out*/ readonly mgmtAddress!: pulumi.Output<string>;
    /**
     * Effective endpoint management port.
     */
    public /*out*/ readonly mgmtPort!: pulumi.Output<number>;
    /**
     * Effective endpoint management public address.
     */
    public /*out*/ readonly mgmtPublicAddress!: pulumi.Output<string>;
    /**
     * Effective endpoint management public port.
     */
    public /*out*/ readonly mgmtPublicPort!: pulumi.Output<number>;
    /**
     * The public API endpoint address.
     */
    public readonly publicEndpointAddress!: pulumi.Output<string>;
    /**
     * The public API endpoint port.
     */
    public readonly publicEndpointPort!: pulumi.Output<number>;
    /**
     * The certificate of the Cloud Director Replication Manager Service.
     */
    public readonly serviceCert!: pulumi.Output<string>;
    /**
     * The site description of the Cloud Director Replication Manager.
     */
    public readonly siteDescription!: pulumi.Output<string | undefined>;
    /**
     * The site name of the Cloud Director Replication Manager.
     */
    public readonly siteName!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.CloudDirectorReplicationManagerTimeouts | undefined>;
    /**
     * Tunnel Service certificate.
     */
    public /*out*/ readonly tunnelCertificate!: pulumi.Output<string>;
    /**
     * Tunnel Service URL.
     */
    public /*out*/ readonly tunnelUrl!: pulumi.Output<string>;
    /**
     * Cloud Director password.
     */
    public readonly vcdPassword!: pulumi.Output<string>;
    /**
     * The thumbprint of the Cloud Director service. It can either be computed from the `vcda.getRemoteServicesThumbprint` data
     * source or provided directly as a SHA-256 fingerprint.
     */
    public readonly vcdThumbprint!: pulumi.Output<string>;
    /**
     * This is the URL for the Cloud Director API endpoint. For example, https://server.domain.com/api.
     */
    public readonly vcdUrl!: pulumi.Output<string>;
    /**
     * Cloud Director user name.
     */
    public readonly vcdUsername!: pulumi.Output<string>;
    /**
     * Cloud Director thumbprint.
     */
    public /*out*/ readonly vcloudThumbprint!: pulumi.Output<string>;
    /**
     * Cloud Director URL.
     */
    public /*out*/ readonly vcloudUrl!: pulumi.Output<string>;
    /**
     * Cloud Director user name.
     */
    public /*out*/ readonly vcloudUsername!: pulumi.Output<string>;

    /**
     * Create a CloudDirectorReplicationManager resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CloudDirectorReplicationManagerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CloudDirectorReplicationManagerArgs | CloudDirectorReplicationManagerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CloudDirectorReplicationManagerState | undefined;
            resourceInputs["apiAddress"] = state ? state.apiAddress : undefined;
            resourceInputs["apiPort"] = state ? state.apiPort : undefined;
            resourceInputs["apiPublicAddress"] = state ? state.apiPublicAddress : undefined;
            resourceInputs["apiPublicPort"] = state ? state.apiPublicPort : undefined;
            resourceInputs["expirationDate"] = state ? state.expirationDate : undefined;
            resourceInputs["isCombined"] = state ? state.isCombined : undefined;
            resourceInputs["isLicensed"] = state ? state.isLicensed : undefined;
            resourceInputs["licenseKey"] = state ? state.licenseKey : undefined;
            resourceInputs["localSite"] = state ? state.localSite : undefined;
            resourceInputs["localSiteDescription"] = state ? state.localSiteDescription : undefined;
            resourceInputs["lookupServiceThumbprint"] = state ? state.lookupServiceThumbprint : undefined;
            resourceInputs["lookupServiceUrl"] = state ? state.lookupServiceUrl : undefined;
            resourceInputs["lsThumbprint"] = state ? state.lsThumbprint : undefined;
            resourceInputs["lsUrl"] = state ? state.lsUrl : undefined;
            resourceInputs["mgmtAddress"] = state ? state.mgmtAddress : undefined;
            resourceInputs["mgmtPort"] = state ? state.mgmtPort : undefined;
            resourceInputs["mgmtPublicAddress"] = state ? state.mgmtPublicAddress : undefined;
            resourceInputs["mgmtPublicPort"] = state ? state.mgmtPublicPort : undefined;
            resourceInputs["publicEndpointAddress"] = state ? state.publicEndpointAddress : undefined;
            resourceInputs["publicEndpointPort"] = state ? state.publicEndpointPort : undefined;
            resourceInputs["serviceCert"] = state ? state.serviceCert : undefined;
            resourceInputs["siteDescription"] = state ? state.siteDescription : undefined;
            resourceInputs["siteName"] = state ? state.siteName : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["tunnelCertificate"] = state ? state.tunnelCertificate : undefined;
            resourceInputs["tunnelUrl"] = state ? state.tunnelUrl : undefined;
            resourceInputs["vcdPassword"] = state ? state.vcdPassword : undefined;
            resourceInputs["vcdThumbprint"] = state ? state.vcdThumbprint : undefined;
            resourceInputs["vcdUrl"] = state ? state.vcdUrl : undefined;
            resourceInputs["vcdUsername"] = state ? state.vcdUsername : undefined;
            resourceInputs["vcloudThumbprint"] = state ? state.vcloudThumbprint : undefined;
            resourceInputs["vcloudUrl"] = state ? state.vcloudUrl : undefined;
            resourceInputs["vcloudUsername"] = state ? state.vcloudUsername : undefined;
        } else {
            const args = argsOrState as CloudDirectorReplicationManagerArgs | undefined;
            if ((!args || args.licenseKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'licenseKey'");
            }
            if ((!args || args.lookupServiceThumbprint === undefined) && !opts.urn) {
                throw new Error("Missing required property 'lookupServiceThumbprint'");
            }
            if ((!args || args.lookupServiceUrl === undefined) && !opts.urn) {
                throw new Error("Missing required property 'lookupServiceUrl'");
            }
            if ((!args || args.publicEndpointAddress === undefined) && !opts.urn) {
                throw new Error("Missing required property 'publicEndpointAddress'");
            }
            if ((!args || args.publicEndpointPort === undefined) && !opts.urn) {
                throw new Error("Missing required property 'publicEndpointPort'");
            }
            if ((!args || args.serviceCert === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceCert'");
            }
            if ((!args || args.siteName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'siteName'");
            }
            if ((!args || args.vcdPassword === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vcdPassword'");
            }
            if ((!args || args.vcdThumbprint === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vcdThumbprint'");
            }
            if ((!args || args.vcdUrl === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vcdUrl'");
            }
            if ((!args || args.vcdUsername === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vcdUsername'");
            }
            resourceInputs["licenseKey"] = args ? args.licenseKey : undefined;
            resourceInputs["lookupServiceThumbprint"] = args ? args.lookupServiceThumbprint : undefined;
            resourceInputs["lookupServiceUrl"] = args ? args.lookupServiceUrl : undefined;
            resourceInputs["publicEndpointAddress"] = args ? args.publicEndpointAddress : undefined;
            resourceInputs["publicEndpointPort"] = args ? args.publicEndpointPort : undefined;
            resourceInputs["serviceCert"] = args ? args.serviceCert : undefined;
            resourceInputs["siteDescription"] = args ? args.siteDescription : undefined;
            resourceInputs["siteName"] = args ? args.siteName : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["vcdPassword"] = args ? args.vcdPassword : undefined;
            resourceInputs["vcdThumbprint"] = args ? args.vcdThumbprint : undefined;
            resourceInputs["vcdUrl"] = args ? args.vcdUrl : undefined;
            resourceInputs["vcdUsername"] = args ? args.vcdUsername : undefined;
            resourceInputs["apiAddress"] = undefined /*out*/;
            resourceInputs["apiPort"] = undefined /*out*/;
            resourceInputs["apiPublicAddress"] = undefined /*out*/;
            resourceInputs["apiPublicPort"] = undefined /*out*/;
            resourceInputs["expirationDate"] = undefined /*out*/;
            resourceInputs["isCombined"] = undefined /*out*/;
            resourceInputs["isLicensed"] = undefined /*out*/;
            resourceInputs["localSite"] = undefined /*out*/;
            resourceInputs["localSiteDescription"] = undefined /*out*/;
            resourceInputs["lsThumbprint"] = undefined /*out*/;
            resourceInputs["lsUrl"] = undefined /*out*/;
            resourceInputs["mgmtAddress"] = undefined /*out*/;
            resourceInputs["mgmtPort"] = undefined /*out*/;
            resourceInputs["mgmtPublicAddress"] = undefined /*out*/;
            resourceInputs["mgmtPublicPort"] = undefined /*out*/;
            resourceInputs["tunnelCertificate"] = undefined /*out*/;
            resourceInputs["tunnelUrl"] = undefined /*out*/;
            resourceInputs["vcloudThumbprint"] = undefined /*out*/;
            resourceInputs["vcloudUrl"] = undefined /*out*/;
            resourceInputs["vcloudUsername"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CloudDirectorReplicationManager.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CloudDirectorReplicationManager resources.
 */
export interface CloudDirectorReplicationManagerState {
    /**
     * Effective endpoint API address.
     */
    apiAddress?: pulumi.Input<string>;
    /**
     * Effective endpoint API port.
     */
    apiPort?: pulumi.Input<number>;
    /**
     * Effective endpoint API public address.
     */
    apiPublicAddress?: pulumi.Input<string>;
    /**
     * Effective endpoint API public port.
     */
    apiPublicPort?: pulumi.Input<number>;
    /**
     * VMware Cloud Director Availability license expiration date.
     */
    expirationDate?: pulumi.Input<number>;
    /**
     * Flag indicating whether the appliance role is Cloud Director Combined Appliance.
     */
    isCombined?: pulumi.Input<boolean>;
    /**
     * Flag indicating whether the solution is licensed.
     */
    isLicensed?: pulumi.Input<boolean>;
    /**
     * The license key for VMware Cloud Director Availability.
     */
    licenseKey?: pulumi.Input<string>;
    /**
     * Cloud Director Replication Manager local site name.
     */
    localSite?: pulumi.Input<string>;
    /**
     * Cloud Director Replication Manager local site description.
     */
    localSiteDescription?: pulumi.Input<string>;
    /**
     * The thumbprint of the vCenter Server Lookup service. It can either be computed from the
     * `vcda.getRemoteServicesThumbprint` data source or provided directly as a SHA-256 fingerprint.
     */
    lookupServiceThumbprint?: pulumi.Input<string>;
    /**
     * The URL of the vCenter Server Lookup service. For example, https://server.domain.com/lookupservice/sdk.
     */
    lookupServiceUrl?: pulumi.Input<string>;
    /**
     * SHA-256 vCenter Server Lookup service thumbprint.
     */
    lsThumbprint?: pulumi.Input<string>;
    /**
     * The URL of the vCenter Server Lookup service.
     */
    lsUrl?: pulumi.Input<string>;
    /**
     * Effective endpoint management address.
     */
    mgmtAddress?: pulumi.Input<string>;
    /**
     * Effective endpoint management port.
     */
    mgmtPort?: pulumi.Input<number>;
    /**
     * Effective endpoint management public address.
     */
    mgmtPublicAddress?: pulumi.Input<string>;
    /**
     * Effective endpoint management public port.
     */
    mgmtPublicPort?: pulumi.Input<number>;
    /**
     * The public API endpoint address.
     */
    publicEndpointAddress?: pulumi.Input<string>;
    /**
     * The public API endpoint port.
     */
    publicEndpointPort?: pulumi.Input<number>;
    /**
     * The certificate of the Cloud Director Replication Manager Service.
     */
    serviceCert?: pulumi.Input<string>;
    /**
     * The site description of the Cloud Director Replication Manager.
     */
    siteDescription?: pulumi.Input<string>;
    /**
     * The site name of the Cloud Director Replication Manager.
     */
    siteName?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.CloudDirectorReplicationManagerTimeouts>;
    /**
     * Tunnel Service certificate.
     */
    tunnelCertificate?: pulumi.Input<string>;
    /**
     * Tunnel Service URL.
     */
    tunnelUrl?: pulumi.Input<string>;
    /**
     * Cloud Director password.
     */
    vcdPassword?: pulumi.Input<string>;
    /**
     * The thumbprint of the Cloud Director service. It can either be computed from the `vcda.getRemoteServicesThumbprint` data
     * source or provided directly as a SHA-256 fingerprint.
     */
    vcdThumbprint?: pulumi.Input<string>;
    /**
     * This is the URL for the Cloud Director API endpoint. For example, https://server.domain.com/api.
     */
    vcdUrl?: pulumi.Input<string>;
    /**
     * Cloud Director user name.
     */
    vcdUsername?: pulumi.Input<string>;
    /**
     * Cloud Director thumbprint.
     */
    vcloudThumbprint?: pulumi.Input<string>;
    /**
     * Cloud Director URL.
     */
    vcloudUrl?: pulumi.Input<string>;
    /**
     * Cloud Director user name.
     */
    vcloudUsername?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CloudDirectorReplicationManager resource.
 */
export interface CloudDirectorReplicationManagerArgs {
    /**
     * The license key for VMware Cloud Director Availability.
     */
    licenseKey: pulumi.Input<string>;
    /**
     * The thumbprint of the vCenter Server Lookup service. It can either be computed from the
     * `vcda.getRemoteServicesThumbprint` data source or provided directly as a SHA-256 fingerprint.
     */
    lookupServiceThumbprint: pulumi.Input<string>;
    /**
     * The URL of the vCenter Server Lookup service. For example, https://server.domain.com/lookupservice/sdk.
     */
    lookupServiceUrl: pulumi.Input<string>;
    /**
     * The public API endpoint address.
     */
    publicEndpointAddress: pulumi.Input<string>;
    /**
     * The public API endpoint port.
     */
    publicEndpointPort: pulumi.Input<number>;
    /**
     * The certificate of the Cloud Director Replication Manager Service.
     */
    serviceCert: pulumi.Input<string>;
    /**
     * The site description of the Cloud Director Replication Manager.
     */
    siteDescription?: pulumi.Input<string>;
    /**
     * The site name of the Cloud Director Replication Manager.
     */
    siteName: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.CloudDirectorReplicationManagerTimeouts>;
    /**
     * Cloud Director password.
     */
    vcdPassword: pulumi.Input<string>;
    /**
     * The thumbprint of the Cloud Director service. It can either be computed from the `vcda.getRemoteServicesThumbprint` data
     * source or provided directly as a SHA-256 fingerprint.
     */
    vcdThumbprint: pulumi.Input<string>;
    /**
     * This is the URL for the Cloud Director API endpoint. For example, https://server.domain.com/api.
     */
    vcdUrl: pulumi.Input<string>;
    /**
     * Cloud Director user name.
     */
    vcdUsername: pulumi.Input<string>;
}
