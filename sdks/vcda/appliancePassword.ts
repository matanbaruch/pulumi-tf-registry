// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class AppliancePassword extends pulumi.CustomResource {
    /**
     * Get an existing AppliancePassword resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AppliancePasswordState, opts?: pulumi.CustomResourceOptions): AppliancePassword {
        return new AppliancePassword(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vcda:index/appliancePassword:AppliancePassword';

    /**
     * Returns true if the given object is an instance of AppliancePassword.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AppliancePassword {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AppliancePassword.__pulumiType;
    }

    /**
     * The IP address of the appliance.
     */
    public readonly applianceIp!: pulumi.Output<string>;
    /**
     * The current password of the appliance.
     */
    public readonly currentPassword!: pulumi.Output<string>;
    /**
     * The new password of the appliance. Note: This value is never returned on read. On creation, include either
     * `new_password` or `password_file`.
     */
    public readonly newPassword!: pulumi.Output<string | undefined>;
    /**
     * The name of a file containing the appliance password. On creation, include either `password_file` or `new_password`.
     */
    public readonly passwordFile!: pulumi.Output<string | undefined>;
    /**
     * Flag indicating whether the **root** user password is already expired.
     */
    public /*out*/ readonly rootPasswordExpired!: pulumi.Output<boolean>;
    /**
     * Seconds until the **root** user password expires.
     */
    public /*out*/ readonly secondsUntilExpiration!: pulumi.Output<number>;
    /**
     * The service certificate.
     */
    public readonly serviceCert!: pulumi.Output<string>;

    /**
     * Create a AppliancePassword resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AppliancePasswordArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AppliancePasswordArgs | AppliancePasswordState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AppliancePasswordState | undefined;
            resourceInputs["applianceIp"] = state ? state.applianceIp : undefined;
            resourceInputs["currentPassword"] = state ? state.currentPassword : undefined;
            resourceInputs["newPassword"] = state ? state.newPassword : undefined;
            resourceInputs["passwordFile"] = state ? state.passwordFile : undefined;
            resourceInputs["rootPasswordExpired"] = state ? state.rootPasswordExpired : undefined;
            resourceInputs["secondsUntilExpiration"] = state ? state.secondsUntilExpiration : undefined;
            resourceInputs["serviceCert"] = state ? state.serviceCert : undefined;
        } else {
            const args = argsOrState as AppliancePasswordArgs | undefined;
            if ((!args || args.applianceIp === undefined) && !opts.urn) {
                throw new Error("Missing required property 'applianceIp'");
            }
            if ((!args || args.currentPassword === undefined) && !opts.urn) {
                throw new Error("Missing required property 'currentPassword'");
            }
            if ((!args || args.serviceCert === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceCert'");
            }
            resourceInputs["applianceIp"] = args ? args.applianceIp : undefined;
            resourceInputs["currentPassword"] = args?.currentPassword ? pulumi.secret(args.currentPassword) : undefined;
            resourceInputs["newPassword"] = args?.newPassword ? pulumi.secret(args.newPassword) : undefined;
            resourceInputs["passwordFile"] = args ? args.passwordFile : undefined;
            resourceInputs["serviceCert"] = args ? args.serviceCert : undefined;
            resourceInputs["rootPasswordExpired"] = undefined /*out*/;
            resourceInputs["secondsUntilExpiration"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["currentPassword", "newPassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(AppliancePassword.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AppliancePassword resources.
 */
export interface AppliancePasswordState {
    /**
     * The IP address of the appliance.
     */
    applianceIp?: pulumi.Input<string>;
    /**
     * The current password of the appliance.
     */
    currentPassword?: pulumi.Input<string>;
    /**
     * The new password of the appliance. Note: This value is never returned on read. On creation, include either
     * `new_password` or `password_file`.
     */
    newPassword?: pulumi.Input<string>;
    /**
     * The name of a file containing the appliance password. On creation, include either `password_file` or `new_password`.
     */
    passwordFile?: pulumi.Input<string>;
    /**
     * Flag indicating whether the **root** user password is already expired.
     */
    rootPasswordExpired?: pulumi.Input<boolean>;
    /**
     * Seconds until the **root** user password expires.
     */
    secondsUntilExpiration?: pulumi.Input<number>;
    /**
     * The service certificate.
     */
    serviceCert?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AppliancePassword resource.
 */
export interface AppliancePasswordArgs {
    /**
     * The IP address of the appliance.
     */
    applianceIp: pulumi.Input<string>;
    /**
     * The current password of the appliance.
     */
    currentPassword: pulumi.Input<string>;
    /**
     * The new password of the appliance. Note: This value is never returned on read. On creation, include either
     * `new_password` or `password_file`.
     */
    newPassword?: pulumi.Input<string>;
    /**
     * The name of a file containing the appliance password. On creation, include either `password_file` or `new_password`.
     */
    passwordFile?: pulumi.Input<string>;
    /**
     * The service certificate.
     */
    serviceCert: pulumi.Input<string>;
}
