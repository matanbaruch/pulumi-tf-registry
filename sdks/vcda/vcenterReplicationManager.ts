// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class VcenterReplicationManager extends pulumi.CustomResource {
    /**
     * Get an existing VcenterReplicationManager resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VcenterReplicationManagerState, opts?: pulumi.CustomResourceOptions): VcenterReplicationManager {
        return new VcenterReplicationManager(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vcda:index/vcenterReplicationManager:VcenterReplicationManager';

    /**
     * Returns true if the given object is an instance of VcenterReplicationManager.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VcenterReplicationManager {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VcenterReplicationManager.__pulumiType;
    }

    /**
     * The expiration date of the license.
     */
    public /*out*/ readonly expirationDate!: pulumi.Output<number>;
    /**
     * Flag indicating whether the service is licensed.
     */
    public /*out*/ readonly isLicensed!: pulumi.Output<boolean>;
    /**
     * The license key of VMware Cloud Director Availability.
     */
    public readonly licenseKey!: pulumi.Output<string>;
    /**
     * The thumbprint of the vCenter Server Lookup service. It can either be computed from the
     * `vcda.getRemoteServicesThumbprint` data source or provided directly as a SHA-256 fingerprint.
     */
    public readonly lookupServiceThumbprint!: pulumi.Output<string>;
    /**
     * The URL of the vCenter Server Lookup service. For example, https://server.domain.com/lookupservice/sdk.
     */
    public readonly lookupServiceUrl!: pulumi.Output<string>;
    /**
     * The thumbprint of the vCenter Server Lookup service.
     */
    public /*out*/ readonly lsThumbprint!: pulumi.Output<string>;
    /**
     * The URL of the vCenter Server Lookup service.
     */
    public /*out*/ readonly lsUrl!: pulumi.Output<string>;
    /**
     * The service certificate of the vCenter Replication Manager.
     */
    public readonly serviceCert!: pulumi.Output<string>;
    /**
     * The site name of the vCenter Replication Manager.
     */
    public /*out*/ readonly site!: pulumi.Output<string>;
    /**
     * The site name of the vCenter Replication Manager.
     */
    public readonly siteName!: pulumi.Output<string>;
    /**
     * The password of the SSO administrator.
     */
    public readonly ssoPassword!: pulumi.Output<string>;
    /**
     * The user name of a single sign-on (SSO) administrator.
     */
    public readonly ssoUser!: pulumi.Output<string>;
    /**
     * The certificate of the Tunnel Service.
     */
    public /*out*/ readonly tunnelCertificate!: pulumi.Output<string>;
    /**
     * The URL of the Tunnel Service.
     */
    public /*out*/ readonly tunnelUrl!: pulumi.Output<string>;
    /**
     * The status of the Vsphere Plugin.
     */
    public /*out*/ readonly vspherePluginStatus!: pulumi.Output<string>;

    /**
     * Create a VcenterReplicationManager resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VcenterReplicationManagerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VcenterReplicationManagerArgs | VcenterReplicationManagerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VcenterReplicationManagerState | undefined;
            resourceInputs["expirationDate"] = state ? state.expirationDate : undefined;
            resourceInputs["isLicensed"] = state ? state.isLicensed : undefined;
            resourceInputs["licenseKey"] = state ? state.licenseKey : undefined;
            resourceInputs["lookupServiceThumbprint"] = state ? state.lookupServiceThumbprint : undefined;
            resourceInputs["lookupServiceUrl"] = state ? state.lookupServiceUrl : undefined;
            resourceInputs["lsThumbprint"] = state ? state.lsThumbprint : undefined;
            resourceInputs["lsUrl"] = state ? state.lsUrl : undefined;
            resourceInputs["serviceCert"] = state ? state.serviceCert : undefined;
            resourceInputs["site"] = state ? state.site : undefined;
            resourceInputs["siteName"] = state ? state.siteName : undefined;
            resourceInputs["ssoPassword"] = state ? state.ssoPassword : undefined;
            resourceInputs["ssoUser"] = state ? state.ssoUser : undefined;
            resourceInputs["tunnelCertificate"] = state ? state.tunnelCertificate : undefined;
            resourceInputs["tunnelUrl"] = state ? state.tunnelUrl : undefined;
            resourceInputs["vspherePluginStatus"] = state ? state.vspherePluginStatus : undefined;
        } else {
            const args = argsOrState as VcenterReplicationManagerArgs | undefined;
            if ((!args || args.licenseKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'licenseKey'");
            }
            if ((!args || args.lookupServiceThumbprint === undefined) && !opts.urn) {
                throw new Error("Missing required property 'lookupServiceThumbprint'");
            }
            if ((!args || args.lookupServiceUrl === undefined) && !opts.urn) {
                throw new Error("Missing required property 'lookupServiceUrl'");
            }
            if ((!args || args.serviceCert === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceCert'");
            }
            if ((!args || args.siteName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'siteName'");
            }
            if ((!args || args.ssoPassword === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ssoPassword'");
            }
            if ((!args || args.ssoUser === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ssoUser'");
            }
            resourceInputs["licenseKey"] = args ? args.licenseKey : undefined;
            resourceInputs["lookupServiceThumbprint"] = args ? args.lookupServiceThumbprint : undefined;
            resourceInputs["lookupServiceUrl"] = args ? args.lookupServiceUrl : undefined;
            resourceInputs["serviceCert"] = args ? args.serviceCert : undefined;
            resourceInputs["siteName"] = args ? args.siteName : undefined;
            resourceInputs["ssoPassword"] = args ? args.ssoPassword : undefined;
            resourceInputs["ssoUser"] = args ? args.ssoUser : undefined;
            resourceInputs["expirationDate"] = undefined /*out*/;
            resourceInputs["isLicensed"] = undefined /*out*/;
            resourceInputs["lsThumbprint"] = undefined /*out*/;
            resourceInputs["lsUrl"] = undefined /*out*/;
            resourceInputs["site"] = undefined /*out*/;
            resourceInputs["tunnelCertificate"] = undefined /*out*/;
            resourceInputs["tunnelUrl"] = undefined /*out*/;
            resourceInputs["vspherePluginStatus"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VcenterReplicationManager.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VcenterReplicationManager resources.
 */
export interface VcenterReplicationManagerState {
    /**
     * The expiration date of the license.
     */
    expirationDate?: pulumi.Input<number>;
    /**
     * Flag indicating whether the service is licensed.
     */
    isLicensed?: pulumi.Input<boolean>;
    /**
     * The license key of VMware Cloud Director Availability.
     */
    licenseKey?: pulumi.Input<string>;
    /**
     * The thumbprint of the vCenter Server Lookup service. It can either be computed from the
     * `vcda.getRemoteServicesThumbprint` data source or provided directly as a SHA-256 fingerprint.
     */
    lookupServiceThumbprint?: pulumi.Input<string>;
    /**
     * The URL of the vCenter Server Lookup service. For example, https://server.domain.com/lookupservice/sdk.
     */
    lookupServiceUrl?: pulumi.Input<string>;
    /**
     * The thumbprint of the vCenter Server Lookup service.
     */
    lsThumbprint?: pulumi.Input<string>;
    /**
     * The URL of the vCenter Server Lookup service.
     */
    lsUrl?: pulumi.Input<string>;
    /**
     * The service certificate of the vCenter Replication Manager.
     */
    serviceCert?: pulumi.Input<string>;
    /**
     * The site name of the vCenter Replication Manager.
     */
    site?: pulumi.Input<string>;
    /**
     * The site name of the vCenter Replication Manager.
     */
    siteName?: pulumi.Input<string>;
    /**
     * The password of the SSO administrator.
     */
    ssoPassword?: pulumi.Input<string>;
    /**
     * The user name of a single sign-on (SSO) administrator.
     */
    ssoUser?: pulumi.Input<string>;
    /**
     * The certificate of the Tunnel Service.
     */
    tunnelCertificate?: pulumi.Input<string>;
    /**
     * The URL of the Tunnel Service.
     */
    tunnelUrl?: pulumi.Input<string>;
    /**
     * The status of the Vsphere Plugin.
     */
    vspherePluginStatus?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VcenterReplicationManager resource.
 */
export interface VcenterReplicationManagerArgs {
    /**
     * The license key of VMware Cloud Director Availability.
     */
    licenseKey: pulumi.Input<string>;
    /**
     * The thumbprint of the vCenter Server Lookup service. It can either be computed from the
     * `vcda.getRemoteServicesThumbprint` data source or provided directly as a SHA-256 fingerprint.
     */
    lookupServiceThumbprint: pulumi.Input<string>;
    /**
     * The URL of the vCenter Server Lookup service. For example, https://server.domain.com/lookupservice/sdk.
     */
    lookupServiceUrl: pulumi.Input<string>;
    /**
     * The service certificate of the vCenter Replication Manager.
     */
    serviceCert: pulumi.Input<string>;
    /**
     * The site name of the vCenter Replication Manager.
     */
    siteName: pulumi.Input<string>;
    /**
     * The password of the SSO administrator.
     */
    ssoPassword: pulumi.Input<string>;
    /**
     * The user name of a single sign-on (SSO) administrator.
     */
    ssoUser: pulumi.Input<string>;
}
