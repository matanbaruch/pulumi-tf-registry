// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class PairSite extends pulumi.CustomResource {
    /**
     * Get an existing PairSite resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PairSiteState, opts?: pulumi.CustomResourceOptions): PairSite {
        return new PairSite(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vcda:index/pairSite:PairSite';

    /**
     * Returns true if the given object is an instance of PairSite.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PairSite {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PairSite.__pulumiType;
    }

    /**
     * The public API URL address of the paired Cloud Director/vCenter Replication Management Appliance.
     */
    public /*out*/ readonly apiPublicUrl!: pulumi.Output<string>;
    /**
     * The thumbprint of the to-be paired Cloud Director/vCenter Replication Management Appliance. It can either be computed
     * from the `vcda.getRemoteServicesThumbprint` data source or provided directly as a SHA-256 fingerprint.
     */
    public readonly apiThumbprint!: pulumi.Output<string>;
    /**
     * The API URL address/endpoint of the to-be paired Cloud Director/vCenter Replication Management Appliance.
     */
    public readonly apiUrl!: pulumi.Output<string>;
    /**
     * The API version of the paired Cloud Director/vCenter Replication Management Appliance.
     */
    public /*out*/ readonly apiVersion!: pulumi.Output<string>;
    /**
     * The build version of the paired Cloud Director Replication Management Appliance. Computed only for pairing a Cloud
     * Director Replication Management Appliance to another Cloud Director Replication Management Appliance.
     */
    public /*out*/ readonly buildVersion!: pulumi.Output<string>;
    /**
     * A flag that indicates whether the paired vCenter Replication Management Appliance is of type provider. Computed only for
     * pairing a vCenter Replication Management Appliance to another vCenter Replication Management Appliance.
     */
    public /*out*/ readonly isProviderDeployment!: pulumi.Output<boolean>;
    /**
     * The description of the pairing.
     */
    public readonly pairingDescription!: pulumi.Output<string | undefined>;
    /**
     * The certificate of the Cloud Director/vCenter Replication Management Appliance.
     */
    public readonly serviceCert!: pulumi.Output<string>;
    /**
     * The site name of the to-be paired Cloud Director Replication Management Appliance. Only required for pairing a Cloud
     * Director Replication Management Appliance to another Cloud Director Replication Management Appliance.
     */
    public readonly site!: pulumi.Output<string | undefined>;
    /**
     * The site description of the paired Cloud Director/vCenter Replication Management Appliance.
     */
    public /*out*/ readonly siteDescription!: pulumi.Output<string>;
    /**
     * The site ID of the paired vCenter Replication Management Appliance. Computed only for pairing a vCenter Replication
     * Management Appliance to another vCenter Replication Management Appliance.
     */
    public /*out*/ readonly siteId!: pulumi.Output<string>;
    /**
     * The site name of the paired Cloud Director/vCenter Replication Management Appliance.
     */
    public /*out*/ readonly siteName!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.PairSiteTimeouts | undefined>;

    /**
     * Create a PairSite resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PairSiteArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PairSiteArgs | PairSiteState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PairSiteState | undefined;
            resourceInputs["apiPublicUrl"] = state ? state.apiPublicUrl : undefined;
            resourceInputs["apiThumbprint"] = state ? state.apiThumbprint : undefined;
            resourceInputs["apiUrl"] = state ? state.apiUrl : undefined;
            resourceInputs["apiVersion"] = state ? state.apiVersion : undefined;
            resourceInputs["buildVersion"] = state ? state.buildVersion : undefined;
            resourceInputs["isProviderDeployment"] = state ? state.isProviderDeployment : undefined;
            resourceInputs["pairingDescription"] = state ? state.pairingDescription : undefined;
            resourceInputs["serviceCert"] = state ? state.serviceCert : undefined;
            resourceInputs["site"] = state ? state.site : undefined;
            resourceInputs["siteDescription"] = state ? state.siteDescription : undefined;
            resourceInputs["siteId"] = state ? state.siteId : undefined;
            resourceInputs["siteName"] = state ? state.siteName : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as PairSiteArgs | undefined;
            if ((!args || args.apiThumbprint === undefined) && !opts.urn) {
                throw new Error("Missing required property 'apiThumbprint'");
            }
            if ((!args || args.apiUrl === undefined) && !opts.urn) {
                throw new Error("Missing required property 'apiUrl'");
            }
            if ((!args || args.serviceCert === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceCert'");
            }
            resourceInputs["apiThumbprint"] = args ? args.apiThumbprint : undefined;
            resourceInputs["apiUrl"] = args ? args.apiUrl : undefined;
            resourceInputs["pairingDescription"] = args ? args.pairingDescription : undefined;
            resourceInputs["serviceCert"] = args ? args.serviceCert : undefined;
            resourceInputs["site"] = args ? args.site : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["apiPublicUrl"] = undefined /*out*/;
            resourceInputs["apiVersion"] = undefined /*out*/;
            resourceInputs["buildVersion"] = undefined /*out*/;
            resourceInputs["isProviderDeployment"] = undefined /*out*/;
            resourceInputs["siteDescription"] = undefined /*out*/;
            resourceInputs["siteId"] = undefined /*out*/;
            resourceInputs["siteName"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PairSite.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering PairSite resources.
 */
export interface PairSiteState {
    /**
     * The public API URL address of the paired Cloud Director/vCenter Replication Management Appliance.
     */
    apiPublicUrl?: pulumi.Input<string>;
    /**
     * The thumbprint of the to-be paired Cloud Director/vCenter Replication Management Appliance. It can either be computed
     * from the `vcda.getRemoteServicesThumbprint` data source or provided directly as a SHA-256 fingerprint.
     */
    apiThumbprint?: pulumi.Input<string>;
    /**
     * The API URL address/endpoint of the to-be paired Cloud Director/vCenter Replication Management Appliance.
     */
    apiUrl?: pulumi.Input<string>;
    /**
     * The API version of the paired Cloud Director/vCenter Replication Management Appliance.
     */
    apiVersion?: pulumi.Input<string>;
    /**
     * The build version of the paired Cloud Director Replication Management Appliance. Computed only for pairing a Cloud
     * Director Replication Management Appliance to another Cloud Director Replication Management Appliance.
     */
    buildVersion?: pulumi.Input<string>;
    /**
     * A flag that indicates whether the paired vCenter Replication Management Appliance is of type provider. Computed only for
     * pairing a vCenter Replication Management Appliance to another vCenter Replication Management Appliance.
     */
    isProviderDeployment?: pulumi.Input<boolean>;
    /**
     * The description of the pairing.
     */
    pairingDescription?: pulumi.Input<string>;
    /**
     * The certificate of the Cloud Director/vCenter Replication Management Appliance.
     */
    serviceCert?: pulumi.Input<string>;
    /**
     * The site name of the to-be paired Cloud Director Replication Management Appliance. Only required for pairing a Cloud
     * Director Replication Management Appliance to another Cloud Director Replication Management Appliance.
     */
    site?: pulumi.Input<string>;
    /**
     * The site description of the paired Cloud Director/vCenter Replication Management Appliance.
     */
    siteDescription?: pulumi.Input<string>;
    /**
     * The site ID of the paired vCenter Replication Management Appliance. Computed only for pairing a vCenter Replication
     * Management Appliance to another vCenter Replication Management Appliance.
     */
    siteId?: pulumi.Input<string>;
    /**
     * The site name of the paired Cloud Director/vCenter Replication Management Appliance.
     */
    siteName?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.PairSiteTimeouts>;
}

/**
 * The set of arguments for constructing a PairSite resource.
 */
export interface PairSiteArgs {
    /**
     * The thumbprint of the to-be paired Cloud Director/vCenter Replication Management Appliance. It can either be computed
     * from the `vcda.getRemoteServicesThumbprint` data source or provided directly as a SHA-256 fingerprint.
     */
    apiThumbprint: pulumi.Input<string>;
    /**
     * The API URL address/endpoint of the to-be paired Cloud Director/vCenter Replication Management Appliance.
     */
    apiUrl: pulumi.Input<string>;
    /**
     * The description of the pairing.
     */
    pairingDescription?: pulumi.Input<string>;
    /**
     * The certificate of the Cloud Director/vCenter Replication Management Appliance.
     */
    serviceCert: pulumi.Input<string>;
    /**
     * The site name of the to-be paired Cloud Director Replication Management Appliance. Only required for pairing a Cloud
     * Director Replication Management Appliance to another Cloud Director Replication Management Appliance.
     */
    site?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.PairSiteTimeouts>;
}
