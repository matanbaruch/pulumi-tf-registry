// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Tunnel extends pulumi.CustomResource {
    /**
     * Get an existing Tunnel resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TunnelState, opts?: pulumi.CustomResourceOptions): Tunnel {
        return new Tunnel(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vcda:index/tunnel:Tunnel';

    /**
     * Returns true if the given object is an instance of Tunnel.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Tunnel {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Tunnel.__pulumiType;
    }

    /**
     * The certificate of the Tunnel Service.
     */
    public readonly certificate!: pulumi.Output<string>;
    /**
     * The **root** user password of the Tunnel Appliance.
     */
    public readonly rootPassword!: pulumi.Output<string>;
    /**
     * The service certificate of the Cloud Director Replication Management Service to which the Tunnel Service is being added.
     */
    public readonly serviceCert!: pulumi.Output<string>;
    /**
     * The certificate of the Tunnel Service.
     */
    public /*out*/ readonly tunnelCertificate!: pulumi.Output<string>;
    /**
     * The URL of the Tunnel Service.
     */
    public /*out*/ readonly tunnelUrl!: pulumi.Output<string>;
    /**
     * The URL of the Tunnel Service.
     */
    public readonly url!: pulumi.Output<string>;

    /**
     * Create a Tunnel resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TunnelArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TunnelArgs | TunnelState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TunnelState | undefined;
            resourceInputs["certificate"] = state ? state.certificate : undefined;
            resourceInputs["rootPassword"] = state ? state.rootPassword : undefined;
            resourceInputs["serviceCert"] = state ? state.serviceCert : undefined;
            resourceInputs["tunnelCertificate"] = state ? state.tunnelCertificate : undefined;
            resourceInputs["tunnelUrl"] = state ? state.tunnelUrl : undefined;
            resourceInputs["url"] = state ? state.url : undefined;
        } else {
            const args = argsOrState as TunnelArgs | undefined;
            if ((!args || args.certificate === undefined) && !opts.urn) {
                throw new Error("Missing required property 'certificate'");
            }
            if ((!args || args.rootPassword === undefined) && !opts.urn) {
                throw new Error("Missing required property 'rootPassword'");
            }
            if ((!args || args.serviceCert === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceCert'");
            }
            if ((!args || args.url === undefined) && !opts.urn) {
                throw new Error("Missing required property 'url'");
            }
            resourceInputs["certificate"] = args ? args.certificate : undefined;
            resourceInputs["rootPassword"] = args ? args.rootPassword : undefined;
            resourceInputs["serviceCert"] = args ? args.serviceCert : undefined;
            resourceInputs["url"] = args ? args.url : undefined;
            resourceInputs["tunnelCertificate"] = undefined /*out*/;
            resourceInputs["tunnelUrl"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Tunnel.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Tunnel resources.
 */
export interface TunnelState {
    /**
     * The certificate of the Tunnel Service.
     */
    certificate?: pulumi.Input<string>;
    /**
     * The **root** user password of the Tunnel Appliance.
     */
    rootPassword?: pulumi.Input<string>;
    /**
     * The service certificate of the Cloud Director Replication Management Service to which the Tunnel Service is being added.
     */
    serviceCert?: pulumi.Input<string>;
    /**
     * The certificate of the Tunnel Service.
     */
    tunnelCertificate?: pulumi.Input<string>;
    /**
     * The URL of the Tunnel Service.
     */
    tunnelUrl?: pulumi.Input<string>;
    /**
     * The URL of the Tunnel Service.
     */
    url?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Tunnel resource.
 */
export interface TunnelArgs {
    /**
     * The certificate of the Tunnel Service.
     */
    certificate: pulumi.Input<string>;
    /**
     * The **root** user password of the Tunnel Appliance.
     */
    rootPassword: pulumi.Input<string>;
    /**
     * The service certificate of the Cloud Director Replication Management Service to which the Tunnel Service is being added.
     */
    serviceCert: pulumi.Input<string>;
    /**
     * The URL of the Tunnel Service.
     */
    url: pulumi.Input<string>;
}
