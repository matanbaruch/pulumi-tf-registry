// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getReplicatorHealth(args: GetReplicatorHealthArgs, opts?: pulumi.InvokeOptions): Promise<GetReplicatorHealthResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("vcda:index/getReplicatorHealth:getReplicatorHealth", {
        "replicatorId": args.replicatorId,
        "serviceCert": args.serviceCert,
        "timeouts": args.timeouts,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getReplicatorHealth.
 */
export interface GetReplicatorHealthArgs {
    replicatorId: string;
    serviceCert: string;
    timeouts?: inputs.GetReplicatorHealthTimeouts;
}

/**
 * A collection of values returned by getReplicatorHealth.
 */
export interface GetReplicatorHealthResult {
    readonly address: string;
    readonly applianceBootTimestamp: number;
    readonly buildDate: number;
    readonly buildVersion: string;
    readonly currentTime: number;
    readonly dbErrorArgs: string[];
    readonly dbErrorCode: string;
    readonly dbErrorMsg: string;
    readonly dbErrorStacktrace: string;
    readonly diskUsage: {[key: string]: number};
    readonly h4dmErrorArgs: string[];
    readonly h4dmErrorCode: string;
    readonly h4dmErrorMsg: string;
    readonly h4dmErrorStacktrace: string;
    readonly hbrErrorArgs: string[];
    readonly hbrErrorCode: string;
    readonly hbrErrorMsg: string;
    readonly hbrErrorStacktrace: string;
    readonly id: string;
    readonly instanceId: string;
    readonly lsErrorArgs: string[];
    readonly lsErrorCode: string;
    readonly lsErrorMsg: string;
    readonly lsErrorStacktrace: string;
    readonly lwdErrorArgs: string[];
    readonly lwdErrorCode: string;
    readonly lwdErrorMsg: string;
    readonly lwdErrorStacktrace: string;
    readonly ntpErrorArgs: string[];
    readonly ntpErrorCode: string;
    readonly ntpErrorMsg: string;
    readonly ntpErrorStacktrace: string;
    readonly offlineManagersIds: string[];
    readonly onlineManagersIds: string[];
    readonly productName: string;
    readonly replicatorId: string;
    readonly runtimeId: string;
    readonly serviceBootTimestamp: number;
    readonly serviceCert: string;
    readonly timeouts?: outputs.GetReplicatorHealthTimeouts;
}
export function getReplicatorHealthOutput(args: GetReplicatorHealthOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetReplicatorHealthResult> {
    return pulumi.output(args).apply((a: any) => getReplicatorHealth(a, opts))
}

/**
 * A collection of arguments for invoking getReplicatorHealth.
 */
export interface GetReplicatorHealthOutputArgs {
    replicatorId: pulumi.Input<string>;
    serviceCert: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.GetReplicatorHealthTimeoutsArgs>;
}
