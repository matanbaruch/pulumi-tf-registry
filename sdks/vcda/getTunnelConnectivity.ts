// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getTunnelConnectivity(args: GetTunnelConnectivityArgs, opts?: pulumi.InvokeOptions): Promise<GetTunnelConnectivityResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("vcda:index/getTunnelConnectivity:getTunnelConnectivity", {
        "serviceCert": args.serviceCert,
        "timeouts": args.timeouts,
        "tunnelId": args.tunnelId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getTunnelConnectivity.
 */
export interface GetTunnelConnectivityArgs {
    serviceCert: string;
    timeouts?: inputs.GetTunnelConnectivityTimeouts;
    tunnelId: string;
}

/**
 * A collection of values returned by getTunnelConnectivity.
 */
export interface GetTunnelConnectivityResult {
    readonly id: string;
    readonly serviceCert: string;
    readonly timeouts?: outputs.GetTunnelConnectivityTimeouts;
    readonly tunnelId: string;
    readonly tunnelService: {[key: string]: string};
    readonly tunnelServiceErrorArgs: string[];
    readonly tunnelServiceErrorCode: string;
    readonly tunnelServiceErrorMsg: string;
    readonly tunnelServiceErrorStacktrace: string;
}
export function getTunnelConnectivityOutput(args: GetTunnelConnectivityOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetTunnelConnectivityResult> {
    return pulumi.output(args).apply((a: any) => getTunnelConnectivity(a, opts))
}

/**
 * A collection of arguments for invoking getTunnelConnectivity.
 */
export interface GetTunnelConnectivityOutputArgs {
    serviceCert: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.GetTunnelConnectivityTimeoutsArgs>;
    tunnelId: pulumi.Input<string>;
}
