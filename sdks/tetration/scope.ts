// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Scope extends pulumi.CustomResource {
    /**
     * Get an existing Scope resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ScopeState, opts?: pulumi.CustomResourceOptions): Scope {
        return new Scope(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tetration:index/scope:Scope';

    /**
     * Returns true if the given object is an instance of Scope.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Scope {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Scope.__pulumiType;
    }

    /**
     * Indicates a child or parent query has been updated and that the changes need to be committed..
     */
    public /*out*/ readonly childAppScopeIds!: pulumi.Output<string[]>;
    /**
     * Unix Epoch timestamp when scope was created.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<number>;
    /**
     * User-specified description of the scope.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Indicates a child or parent query has been updated and that the changes need to be committed..
     */
    public /*out*/ readonly dirty!: pulumi.Output<boolean>;
    /**
     * Fully qualified name of the scope. This is a fully qualified name; that is, it includes the names of parent scopes (if
     * applicable) all the way to the root scope.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * What resource field to use when evaluating the scope query.
     */
    public readonly parentAppScopeId!: pulumi.Output<string>;
    /**
     * Used to sort application priorities; default is last.
     */
    public readonly policyPriority!: pulumi.Output<number>;
    public /*out*/ readonly priority!: pulumi.Output<string>;
    /**
     * Root scope for the tetration installation
     */
    public /*out*/ readonly rootAppScopeId!: pulumi.Output<string>;
    /**
     * User-specified name for the scope.
     */
    public readonly shortName!: pulumi.Output<string>;
    /**
     * Used to sort application priorities; default is last.
     */
    public /*out*/ readonly shortPriority!: pulumi.Output<number>;
    /**
     * What resource field to use when evaluating the scope query.
     */
    public readonly shortQueryField!: pulumi.Output<string>;
    /**
     * Scope short query type.
     */
    public readonly shortQueryType!: pulumi.Output<string>;
    /**
     * What resource value to use when evaluating the scope query.
     */
    public readonly shortQueryValue!: pulumi.Output<string>;
    /**
     * Unix Epoch timestamp when scope was last updated.
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<number>;
    /**
     * ID of the VRF to which scope belongs.
     */
    public /*out*/ readonly vrfId!: pulumi.Output<number>;

    /**
     * Create a Scope resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ScopeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ScopeArgs | ScopeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ScopeState | undefined;
            resourceInputs["childAppScopeIds"] = state ? state.childAppScopeIds : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["dirty"] = state ? state.dirty : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["parentAppScopeId"] = state ? state.parentAppScopeId : undefined;
            resourceInputs["policyPriority"] = state ? state.policyPriority : undefined;
            resourceInputs["priority"] = state ? state.priority : undefined;
            resourceInputs["rootAppScopeId"] = state ? state.rootAppScopeId : undefined;
            resourceInputs["shortName"] = state ? state.shortName : undefined;
            resourceInputs["shortPriority"] = state ? state.shortPriority : undefined;
            resourceInputs["shortQueryField"] = state ? state.shortQueryField : undefined;
            resourceInputs["shortQueryType"] = state ? state.shortQueryType : undefined;
            resourceInputs["shortQueryValue"] = state ? state.shortQueryValue : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
            resourceInputs["vrfId"] = state ? state.vrfId : undefined;
        } else {
            const args = argsOrState as ScopeArgs | undefined;
            if ((!args || args.parentAppScopeId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'parentAppScopeId'");
            }
            if ((!args || args.shortName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'shortName'");
            }
            if ((!args || args.shortQueryField === undefined) && !opts.urn) {
                throw new Error("Missing required property 'shortQueryField'");
            }
            if ((!args || args.shortQueryType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'shortQueryType'");
            }
            if ((!args || args.shortQueryValue === undefined) && !opts.urn) {
                throw new Error("Missing required property 'shortQueryValue'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["parentAppScopeId"] = args ? args.parentAppScopeId : undefined;
            resourceInputs["policyPriority"] = args ? args.policyPriority : undefined;
            resourceInputs["shortName"] = args ? args.shortName : undefined;
            resourceInputs["shortQueryField"] = args ? args.shortQueryField : undefined;
            resourceInputs["shortQueryType"] = args ? args.shortQueryType : undefined;
            resourceInputs["shortQueryValue"] = args ? args.shortQueryValue : undefined;
            resourceInputs["childAppScopeIds"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["dirty"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["priority"] = undefined /*out*/;
            resourceInputs["rootAppScopeId"] = undefined /*out*/;
            resourceInputs["shortPriority"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
            resourceInputs["vrfId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Scope.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Scope resources.
 */
export interface ScopeState {
    /**
     * Indicates a child or parent query has been updated and that the changes need to be committed..
     */
    childAppScopeIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Unix Epoch timestamp when scope was created.
     */
    createdAt?: pulumi.Input<number>;
    /**
     * User-specified description of the scope.
     */
    description?: pulumi.Input<string>;
    /**
     * Indicates a child or parent query has been updated and that the changes need to be committed..
     */
    dirty?: pulumi.Input<boolean>;
    /**
     * Fully qualified name of the scope. This is a fully qualified name; that is, it includes the names of parent scopes (if
     * applicable) all the way to the root scope.
     */
    name?: pulumi.Input<string>;
    /**
     * What resource field to use when evaluating the scope query.
     */
    parentAppScopeId?: pulumi.Input<string>;
    /**
     * Used to sort application priorities; default is last.
     */
    policyPriority?: pulumi.Input<number>;
    priority?: pulumi.Input<string>;
    /**
     * Root scope for the tetration installation
     */
    rootAppScopeId?: pulumi.Input<string>;
    /**
     * User-specified name for the scope.
     */
    shortName?: pulumi.Input<string>;
    /**
     * Used to sort application priorities; default is last.
     */
    shortPriority?: pulumi.Input<number>;
    /**
     * What resource field to use when evaluating the scope query.
     */
    shortQueryField?: pulumi.Input<string>;
    /**
     * Scope short query type.
     */
    shortQueryType?: pulumi.Input<string>;
    /**
     * What resource value to use when evaluating the scope query.
     */
    shortQueryValue?: pulumi.Input<string>;
    /**
     * Unix Epoch timestamp when scope was last updated.
     */
    updatedAt?: pulumi.Input<number>;
    /**
     * ID of the VRF to which scope belongs.
     */
    vrfId?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Scope resource.
 */
export interface ScopeArgs {
    /**
     * User-specified description of the scope.
     */
    description?: pulumi.Input<string>;
    /**
     * What resource field to use when evaluating the scope query.
     */
    parentAppScopeId: pulumi.Input<string>;
    /**
     * Used to sort application priorities; default is last.
     */
    policyPriority?: pulumi.Input<number>;
    /**
     * User-specified name for the scope.
     */
    shortName: pulumi.Input<string>;
    /**
     * What resource field to use when evaluating the scope query.
     */
    shortQueryField: pulumi.Input<string>;
    /**
     * Scope short query type.
     */
    shortQueryType: pulumi.Input<string>;
    /**
     * What resource value to use when evaluating the scope query.
     */
    shortQueryValue: pulumi.Input<string>;
}
