// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class EntitlementsCloud extends pulumi.CustomResource {
    /**
     * Get an existing EntitlementsCloud resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EntitlementsCloudState, opts?: pulumi.CustomResourceOptions): EntitlementsCloud {
        return new EntitlementsCloud(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortiflexvm:index/entitlementsCloud:EntitlementsCloud';

    /**
     * Returns true if the given object is an instance of EntitlementsCloud.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EntitlementsCloud {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EntitlementsCloud.__pulumiType;
    }

    public /*out*/ readonly accountId!: pulumi.Output<number>;
    public readonly configId!: pulumi.Output<number>;
    public readonly description!: pulumi.Output<string>;
    public readonly endDate!: pulumi.Output<string>;
    public readonly folderPath!: pulumi.Output<string | undefined>;
    public readonly serialNumber!: pulumi.Output<string>;
    public /*out*/ readonly startDate!: pulumi.Output<string>;
    public readonly status!: pulumi.Output<string>;

    /**
     * Create a EntitlementsCloud resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EntitlementsCloudArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EntitlementsCloudArgs | EntitlementsCloudState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EntitlementsCloudState | undefined;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["configId"] = state ? state.configId : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["endDate"] = state ? state.endDate : undefined;
            resourceInputs["folderPath"] = state ? state.folderPath : undefined;
            resourceInputs["serialNumber"] = state ? state.serialNumber : undefined;
            resourceInputs["startDate"] = state ? state.startDate : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
        } else {
            const args = argsOrState as EntitlementsCloudArgs | undefined;
            if ((!args || args.configId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'configId'");
            }
            resourceInputs["configId"] = args ? args.configId : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["endDate"] = args ? args.endDate : undefined;
            resourceInputs["folderPath"] = args ? args.folderPath : undefined;
            resourceInputs["serialNumber"] = args ? args.serialNumber : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["accountId"] = undefined /*out*/;
            resourceInputs["startDate"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EntitlementsCloud.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering EntitlementsCloud resources.
 */
export interface EntitlementsCloudState {
    accountId?: pulumi.Input<number>;
    configId?: pulumi.Input<number>;
    description?: pulumi.Input<string>;
    endDate?: pulumi.Input<string>;
    folderPath?: pulumi.Input<string>;
    serialNumber?: pulumi.Input<string>;
    startDate?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a EntitlementsCloud resource.
 */
export interface EntitlementsCloudArgs {
    configId: pulumi.Input<number>;
    description?: pulumi.Input<string>;
    endDate?: pulumi.Input<string>;
    folderPath?: pulumi.Input<string>;
    serialNumber?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}
