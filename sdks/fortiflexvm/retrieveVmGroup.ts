// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class RetrieveVmGroup extends pulumi.CustomResource {
    /**
     * Get an existing RetrieveVmGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RetrieveVmGroupState, opts?: pulumi.CustomResourceOptions): RetrieveVmGroup {
        return new RetrieveVmGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortiflexvm:index/retrieveVmGroup:RetrieveVmGroup';

    /**
     * Returns true if the given object is an instance of RetrieveVmGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RetrieveVmGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RetrieveVmGroup.__pulumiType;
    }

    public readonly configId!: pulumi.Output<number>;
    public readonly countNum!: pulumi.Output<number>;
    public /*out*/ readonly entitlements!: pulumi.Output<outputs.RetrieveVmGroupEntitlement[]>;
    public readonly preemptInterval!: pulumi.Output<number | undefined>;
    public readonly refreshTokenWhenCreate!: pulumi.Output<boolean | undefined>;
    public readonly refreshTokenWhenDestroy!: pulumi.Output<boolean | undefined>;
    public readonly requireExactCount!: pulumi.Output<boolean | undefined>;
    public readonly retrieveStatuses!: pulumi.Output<string[] | undefined>;
    public readonly taskName!: pulumi.Output<string>;

    /**
     * Create a RetrieveVmGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RetrieveVmGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RetrieveVmGroupArgs | RetrieveVmGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RetrieveVmGroupState | undefined;
            resourceInputs["configId"] = state ? state.configId : undefined;
            resourceInputs["countNum"] = state ? state.countNum : undefined;
            resourceInputs["entitlements"] = state ? state.entitlements : undefined;
            resourceInputs["preemptInterval"] = state ? state.preemptInterval : undefined;
            resourceInputs["refreshTokenWhenCreate"] = state ? state.refreshTokenWhenCreate : undefined;
            resourceInputs["refreshTokenWhenDestroy"] = state ? state.refreshTokenWhenDestroy : undefined;
            resourceInputs["requireExactCount"] = state ? state.requireExactCount : undefined;
            resourceInputs["retrieveStatuses"] = state ? state.retrieveStatuses : undefined;
            resourceInputs["taskName"] = state ? state.taskName : undefined;
        } else {
            const args = argsOrState as RetrieveVmGroupArgs | undefined;
            if ((!args || args.configId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'configId'");
            }
            if ((!args || args.countNum === undefined) && !opts.urn) {
                throw new Error("Missing required property 'countNum'");
            }
            if ((!args || args.taskName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'taskName'");
            }
            resourceInputs["configId"] = args ? args.configId : undefined;
            resourceInputs["countNum"] = args ? args.countNum : undefined;
            resourceInputs["preemptInterval"] = args ? args.preemptInterval : undefined;
            resourceInputs["refreshTokenWhenCreate"] = args ? args.refreshTokenWhenCreate : undefined;
            resourceInputs["refreshTokenWhenDestroy"] = args ? args.refreshTokenWhenDestroy : undefined;
            resourceInputs["requireExactCount"] = args ? args.requireExactCount : undefined;
            resourceInputs["retrieveStatuses"] = args ? args.retrieveStatuses : undefined;
            resourceInputs["taskName"] = args ? args.taskName : undefined;
            resourceInputs["entitlements"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RetrieveVmGroup.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering RetrieveVmGroup resources.
 */
export interface RetrieveVmGroupState {
    configId?: pulumi.Input<number>;
    countNum?: pulumi.Input<number>;
    entitlements?: pulumi.Input<pulumi.Input<inputs.RetrieveVmGroupEntitlement>[]>;
    preemptInterval?: pulumi.Input<number>;
    refreshTokenWhenCreate?: pulumi.Input<boolean>;
    refreshTokenWhenDestroy?: pulumi.Input<boolean>;
    requireExactCount?: pulumi.Input<boolean>;
    retrieveStatuses?: pulumi.Input<pulumi.Input<string>[]>;
    taskName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RetrieveVmGroup resource.
 */
export interface RetrieveVmGroupArgs {
    configId: pulumi.Input<number>;
    countNum: pulumi.Input<number>;
    preemptInterval?: pulumi.Input<number>;
    refreshTokenWhenCreate?: pulumi.Input<boolean>;
    refreshTokenWhenDestroy?: pulumi.Input<boolean>;
    requireExactCount?: pulumi.Input<boolean>;
    retrieveStatuses?: pulumi.Input<pulumi.Input<string>[]>;
    taskName: pulumi.Input<string>;
}
