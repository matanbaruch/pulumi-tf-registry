// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { ConfigArgs, ConfigState } from "./config";
export type Config = import("./config").Config;
export const Config: typeof import("./config").Config = null as any;
utilities.lazyLoad(exports, ["Config"], () => require("./config"));

export { EntitlementsCloudArgs, EntitlementsCloudState } from "./entitlementsCloud";
export type EntitlementsCloud = import("./entitlementsCloud").EntitlementsCloud;
export const EntitlementsCloud: typeof import("./entitlementsCloud").EntitlementsCloud = null as any;
utilities.lazyLoad(exports, ["EntitlementsCloud"], () => require("./entitlementsCloud"));

export { EntitlementsHardwareArgs, EntitlementsHardwareState } from "./entitlementsHardware";
export type EntitlementsHardware = import("./entitlementsHardware").EntitlementsHardware;
export const EntitlementsHardware: typeof import("./entitlementsHardware").EntitlementsHardware = null as any;
utilities.lazyLoad(exports, ["EntitlementsHardware"], () => require("./entitlementsHardware"));

export { EntitlementsVmArgs, EntitlementsVmState } from "./entitlementsVm";
export type EntitlementsVm = import("./entitlementsVm").EntitlementsVm;
export const EntitlementsVm: typeof import("./entitlementsVm").EntitlementsVm = null as any;
utilities.lazyLoad(exports, ["EntitlementsVm"], () => require("./entitlementsVm"));

export { EntitlementsVmTokenArgs, EntitlementsVmTokenState } from "./entitlementsVmToken";
export type EntitlementsVmToken = import("./entitlementsVmToken").EntitlementsVmToken;
export const EntitlementsVmToken: typeof import("./entitlementsVmToken").EntitlementsVmToken = null as any;
utilities.lazyLoad(exports, ["EntitlementsVmToken"], () => require("./entitlementsVmToken"));

export { GetConfigsListArgs, GetConfigsListResult, GetConfigsListOutputArgs } from "./getConfigsList";
export const getConfigsList: typeof import("./getConfigsList").getConfigsList = null as any;
export const getConfigsListOutput: typeof import("./getConfigsList").getConfigsListOutput = null as any;
utilities.lazyLoad(exports, ["getConfigsList","getConfigsListOutput"], () => require("./getConfigsList"));

export { GetEntitlementsListArgs, GetEntitlementsListResult, GetEntitlementsListOutputArgs } from "./getEntitlementsList";
export const getEntitlementsList: typeof import("./getEntitlementsList").getEntitlementsList = null as any;
export const getEntitlementsListOutput: typeof import("./getEntitlementsList").getEntitlementsListOutput = null as any;
utilities.lazyLoad(exports, ["getEntitlementsList","getEntitlementsListOutput"], () => require("./getEntitlementsList"));

export { GetEntitlementsPointsArgs, GetEntitlementsPointsResult, GetEntitlementsPointsOutputArgs } from "./getEntitlementsPoints";
export const getEntitlementsPoints: typeof import("./getEntitlementsPoints").getEntitlementsPoints = null as any;
export const getEntitlementsPointsOutput: typeof import("./getEntitlementsPoints").getEntitlementsPointsOutput = null as any;
utilities.lazyLoad(exports, ["getEntitlementsPoints","getEntitlementsPointsOutput"], () => require("./getEntitlementsPoints"));

export { GetGroupsListArgs, GetGroupsListResult, GetGroupsListOutputArgs } from "./getGroupsList";
export const getGroupsList: typeof import("./getGroupsList").getGroupsList = null as any;
export const getGroupsListOutput: typeof import("./getGroupsList").getGroupsListOutput = null as any;
utilities.lazyLoad(exports, ["getGroupsList","getGroupsListOutput"], () => require("./getGroupsList"));

export { GetGroupsNexttokenArgs, GetGroupsNexttokenResult, GetGroupsNexttokenOutputArgs } from "./getGroupsNexttoken";
export const getGroupsNexttoken: typeof import("./getGroupsNexttoken").getGroupsNexttoken = null as any;
export const getGroupsNexttokenOutput: typeof import("./getGroupsNexttoken").getGroupsNexttokenOutput = null as any;
utilities.lazyLoad(exports, ["getGroupsNexttoken","getGroupsNexttokenOutput"], () => require("./getGroupsNexttoken"));

export { GetProgramsListArgs, GetProgramsListResult, GetProgramsListOutputArgs } from "./getProgramsList";
export const getProgramsList: typeof import("./getProgramsList").getProgramsList = null as any;
export const getProgramsListOutput: typeof import("./getProgramsList").getProgramsListOutput = null as any;
utilities.lazyLoad(exports, ["getProgramsList","getProgramsListOutput"], () => require("./getProgramsList"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { RetrieveVmGroupArgs, RetrieveVmGroupState } from "./retrieveVmGroup";
export type RetrieveVmGroup = import("./retrieveVmGroup").RetrieveVmGroup;
export const RetrieveVmGroup: typeof import("./retrieveVmGroup").RetrieveVmGroup = null as any;
utilities.lazyLoad(exports, ["RetrieveVmGroup"], () => require("./retrieveVmGroup"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "fortiflexvm:index/config:Config":
                return new Config(name, <any>undefined, { urn })
            case "fortiflexvm:index/entitlementsCloud:EntitlementsCloud":
                return new EntitlementsCloud(name, <any>undefined, { urn })
            case "fortiflexvm:index/entitlementsHardware:EntitlementsHardware":
                return new EntitlementsHardware(name, <any>undefined, { urn })
            case "fortiflexvm:index/entitlementsVm:EntitlementsVm":
                return new EntitlementsVm(name, <any>undefined, { urn })
            case "fortiflexvm:index/entitlementsVmToken:EntitlementsVmToken":
                return new EntitlementsVmToken(name, <any>undefined, { urn })
            case "fortiflexvm:index/retrieveVmGroup:RetrieveVmGroup":
                return new RetrieveVmGroup(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("fortiflexvm", "index/config", _module)
pulumi.runtime.registerResourceModule("fortiflexvm", "index/entitlementsCloud", _module)
pulumi.runtime.registerResourceModule("fortiflexvm", "index/entitlementsHardware", _module)
pulumi.runtime.registerResourceModule("fortiflexvm", "index/entitlementsVm", _module)
pulumi.runtime.registerResourceModule("fortiflexvm", "index/entitlementsVmToken", _module)
pulumi.runtime.registerResourceModule("fortiflexvm", "index/retrieveVmGroup", _module)
pulumi.runtime.registerResourcePackage("fortiflexvm", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:fortiflexvm") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
