// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SecureScanningPolicy extends pulumi.CustomResource {
    /**
     * Get an existing SecureScanningPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SecureScanningPolicyState, opts?: pulumi.CustomResourceOptions): SecureScanningPolicy {
        return new SecureScanningPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sysdig:index/secureScanningPolicy:SecureScanningPolicy';

    /**
     * Returns true if the given object is an instance of SecureScanningPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SecureScanningPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SecureScanningPolicy.__pulumiType;
    }

    public readonly comment!: pulumi.Output<string>;
    public /*out*/ readonly isdefault!: pulumi.Output<boolean>;
    public readonly name!: pulumi.Output<string>;
    public readonly policyBundleId!: pulumi.Output<string | undefined>;
    public readonly rules!: pulumi.Output<outputs.SecureScanningPolicyRule[]>;
    public readonly timeouts!: pulumi.Output<outputs.SecureScanningPolicyTimeouts | undefined>;
    public readonly version!: pulumi.Output<string | undefined>;

    /**
     * Create a SecureScanningPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SecureScanningPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SecureScanningPolicyArgs | SecureScanningPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SecureScanningPolicyState | undefined;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["isdefault"] = state ? state.isdefault : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["policyBundleId"] = state ? state.policyBundleId : undefined;
            resourceInputs["rules"] = state ? state.rules : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as SecureScanningPolicyArgs | undefined;
            if ((!args || args.comment === undefined) && !opts.urn) {
                throw new Error("Missing required property 'comment'");
            }
            if ((!args || args.rules === undefined) && !opts.urn) {
                throw new Error("Missing required property 'rules'");
            }
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["policyBundleId"] = args ? args.policyBundleId : undefined;
            resourceInputs["rules"] = args ? args.rules : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
            resourceInputs["isdefault"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SecureScanningPolicy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SecureScanningPolicy resources.
 */
export interface SecureScanningPolicyState {
    comment?: pulumi.Input<string>;
    isdefault?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    policyBundleId?: pulumi.Input<string>;
    rules?: pulumi.Input<pulumi.Input<inputs.SecureScanningPolicyRule>[]>;
    timeouts?: pulumi.Input<inputs.SecureScanningPolicyTimeouts>;
    version?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SecureScanningPolicy resource.
 */
export interface SecureScanningPolicyArgs {
    comment: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    policyBundleId?: pulumi.Input<string>;
    rules: pulumi.Input<pulumi.Input<inputs.SecureScanningPolicyRule>[]>;
    timeouts?: pulumi.Input<inputs.SecureScanningPolicyTimeouts>;
    version?: pulumi.Input<string>;
}
