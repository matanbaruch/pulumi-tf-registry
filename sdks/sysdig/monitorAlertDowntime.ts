// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class MonitorAlertDowntime extends pulumi.CustomResource {
    /**
     * Get an existing MonitorAlertDowntime resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MonitorAlertDowntimeState, opts?: pulumi.CustomResourceOptions): MonitorAlertDowntime {
        return new MonitorAlertDowntime(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sysdig:index/monitorAlertDowntime:MonitorAlertDowntime';

    /**
     * Returns true if the given object is an instance of MonitorAlertDowntime.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MonitorAlertDowntime {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MonitorAlertDowntime.__pulumiType;
    }

    public readonly capture!: pulumi.Output<outputs.MonitorAlertDowntimeCapture | undefined>;
    public readonly customNotification!: pulumi.Output<outputs.MonitorAlertDowntimeCustomNotification | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    public readonly entitiesToMonitors!: pulumi.Output<string[]>;
    public readonly groupName!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly notificationChannels!: pulumi.Output<number[] | undefined>;
    public readonly renotificationMinutes!: pulumi.Output<number | undefined>;
    public readonly scope!: pulumi.Output<string | undefined>;
    public readonly severity!: pulumi.Output<number | undefined>;
    public /*out*/ readonly team!: pulumi.Output<number>;
    public readonly timeouts!: pulumi.Output<outputs.MonitorAlertDowntimeTimeouts | undefined>;
    public readonly triggerAfterMinutes!: pulumi.Output<number>;
    public readonly triggerAfterPct!: pulumi.Output<number | undefined>;
    public /*out*/ readonly version!: pulumi.Output<number>;

    /**
     * Create a MonitorAlertDowntime resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MonitorAlertDowntimeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MonitorAlertDowntimeArgs | MonitorAlertDowntimeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MonitorAlertDowntimeState | undefined;
            resourceInputs["capture"] = state ? state.capture : undefined;
            resourceInputs["customNotification"] = state ? state.customNotification : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["entitiesToMonitors"] = state ? state.entitiesToMonitors : undefined;
            resourceInputs["groupName"] = state ? state.groupName : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notificationChannels"] = state ? state.notificationChannels : undefined;
            resourceInputs["renotificationMinutes"] = state ? state.renotificationMinutes : undefined;
            resourceInputs["scope"] = state ? state.scope : undefined;
            resourceInputs["severity"] = state ? state.severity : undefined;
            resourceInputs["team"] = state ? state.team : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["triggerAfterMinutes"] = state ? state.triggerAfterMinutes : undefined;
            resourceInputs["triggerAfterPct"] = state ? state.triggerAfterPct : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as MonitorAlertDowntimeArgs | undefined;
            if ((!args || args.entitiesToMonitors === undefined) && !opts.urn) {
                throw new Error("Missing required property 'entitiesToMonitors'");
            }
            if ((!args || args.triggerAfterMinutes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'triggerAfterMinutes'");
            }
            resourceInputs["capture"] = args ? args.capture : undefined;
            resourceInputs["customNotification"] = args ? args.customNotification : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["entitiesToMonitors"] = args ? args.entitiesToMonitors : undefined;
            resourceInputs["groupName"] = args ? args.groupName : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["notificationChannels"] = args ? args.notificationChannels : undefined;
            resourceInputs["renotificationMinutes"] = args ? args.renotificationMinutes : undefined;
            resourceInputs["scope"] = args ? args.scope : undefined;
            resourceInputs["severity"] = args ? args.severity : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["triggerAfterMinutes"] = args ? args.triggerAfterMinutes : undefined;
            resourceInputs["triggerAfterPct"] = args ? args.triggerAfterPct : undefined;
            resourceInputs["team"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MonitorAlertDowntime.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering MonitorAlertDowntime resources.
 */
export interface MonitorAlertDowntimeState {
    capture?: pulumi.Input<inputs.MonitorAlertDowntimeCapture>;
    customNotification?: pulumi.Input<inputs.MonitorAlertDowntimeCustomNotification>;
    description?: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    entitiesToMonitors?: pulumi.Input<pulumi.Input<string>[]>;
    groupName?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    notificationChannels?: pulumi.Input<pulumi.Input<number>[]>;
    renotificationMinutes?: pulumi.Input<number>;
    scope?: pulumi.Input<string>;
    severity?: pulumi.Input<number>;
    team?: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.MonitorAlertDowntimeTimeouts>;
    triggerAfterMinutes?: pulumi.Input<number>;
    triggerAfterPct?: pulumi.Input<number>;
    version?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a MonitorAlertDowntime resource.
 */
export interface MonitorAlertDowntimeArgs {
    capture?: pulumi.Input<inputs.MonitorAlertDowntimeCapture>;
    customNotification?: pulumi.Input<inputs.MonitorAlertDowntimeCustomNotification>;
    description?: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    entitiesToMonitors: pulumi.Input<pulumi.Input<string>[]>;
    groupName?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    notificationChannels?: pulumi.Input<pulumi.Input<number>[]>;
    renotificationMinutes?: pulumi.Input<number>;
    scope?: pulumi.Input<string>;
    severity?: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.MonitorAlertDowntimeTimeouts>;
    triggerAfterMinutes: pulumi.Input<number>;
    triggerAfterPct?: pulumi.Input<number>;
}
