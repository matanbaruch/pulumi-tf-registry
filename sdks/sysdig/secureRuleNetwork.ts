// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SecureRuleNetwork extends pulumi.CustomResource {
    /**
     * Get an existing SecureRuleNetwork resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SecureRuleNetworkState, opts?: pulumi.CustomResourceOptions): SecureRuleNetwork {
        return new SecureRuleNetwork(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sysdig:index/secureRuleNetwork:SecureRuleNetwork';

    /**
     * Returns true if the given object is an instance of SecureRuleNetwork.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SecureRuleNetwork {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SecureRuleNetwork.__pulumiType;
    }

    public readonly blockInbound!: pulumi.Output<boolean>;
    public readonly blockOutbound!: pulumi.Output<boolean>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<string[] | undefined>;
    public readonly tcps!: pulumi.Output<outputs.SecureRuleNetworkTcp[] | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.SecureRuleNetworkTimeouts | undefined>;
    public readonly udps!: pulumi.Output<outputs.SecureRuleNetworkUdp[] | undefined>;
    public /*out*/ readonly version!: pulumi.Output<number>;

    /**
     * Create a SecureRuleNetwork resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SecureRuleNetworkArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SecureRuleNetworkArgs | SecureRuleNetworkState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SecureRuleNetworkState | undefined;
            resourceInputs["blockInbound"] = state ? state.blockInbound : undefined;
            resourceInputs["blockOutbound"] = state ? state.blockOutbound : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tcps"] = state ? state.tcps : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["udps"] = state ? state.udps : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as SecureRuleNetworkArgs | undefined;
            if ((!args || args.blockInbound === undefined) && !opts.urn) {
                throw new Error("Missing required property 'blockInbound'");
            }
            if ((!args || args.blockOutbound === undefined) && !opts.urn) {
                throw new Error("Missing required property 'blockOutbound'");
            }
            resourceInputs["blockInbound"] = args ? args.blockInbound : undefined;
            resourceInputs["blockOutbound"] = args ? args.blockOutbound : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tcps"] = args ? args.tcps : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["udps"] = args ? args.udps : undefined;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SecureRuleNetwork.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SecureRuleNetwork resources.
 */
export interface SecureRuleNetworkState {
    blockInbound?: pulumi.Input<boolean>;
    blockOutbound?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    tcps?: pulumi.Input<pulumi.Input<inputs.SecureRuleNetworkTcp>[]>;
    timeouts?: pulumi.Input<inputs.SecureRuleNetworkTimeouts>;
    udps?: pulumi.Input<pulumi.Input<inputs.SecureRuleNetworkUdp>[]>;
    version?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a SecureRuleNetwork resource.
 */
export interface SecureRuleNetworkArgs {
    blockInbound: pulumi.Input<boolean>;
    blockOutbound: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    tcps?: pulumi.Input<pulumi.Input<inputs.SecureRuleNetworkTcp>[]>;
    timeouts?: pulumi.Input<inputs.SecureRuleNetworkTimeouts>;
    udps?: pulumi.Input<pulumi.Input<inputs.SecureRuleNetworkUdp>[]>;
}
