// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SecureManagedRuleset extends pulumi.CustomResource {
    /**
     * Get an existing SecureManagedRuleset resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SecureManagedRulesetState, opts?: pulumi.CustomResourceOptions): SecureManagedRuleset {
        return new SecureManagedRuleset(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sysdig:index/secureManagedRuleset:SecureManagedRuleset';

    /**
     * Returns true if the given object is an instance of SecureManagedRuleset.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SecureManagedRuleset {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SecureManagedRuleset.__pulumiType;
    }

    public readonly actions!: pulumi.Output<outputs.SecureManagedRulesetAction[] | undefined>;
    public readonly description!: pulumi.Output<string>;
    public readonly disabledRules!: pulumi.Output<string[] | undefined>;
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    public readonly inheritedFroms!: pulumi.Output<outputs.SecureManagedRulesetInheritedFrom[]>;
    public readonly name!: pulumi.Output<string>;
    public readonly notificationChannels!: pulumi.Output<number[] | undefined>;
    public readonly runbook!: pulumi.Output<string | undefined>;
    public readonly scope!: pulumi.Output<string | undefined>;
    public readonly severity!: pulumi.Output<number | undefined>;
    public /*out*/ readonly templateId!: pulumi.Output<number>;
    public readonly timeouts!: pulumi.Output<outputs.SecureManagedRulesetTimeouts | undefined>;
    public /*out*/ readonly version!: pulumi.Output<number>;

    /**
     * Create a SecureManagedRuleset resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SecureManagedRulesetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SecureManagedRulesetArgs | SecureManagedRulesetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SecureManagedRulesetState | undefined;
            resourceInputs["actions"] = state ? state.actions : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["disabledRules"] = state ? state.disabledRules : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["inheritedFroms"] = state ? state.inheritedFroms : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notificationChannels"] = state ? state.notificationChannels : undefined;
            resourceInputs["runbook"] = state ? state.runbook : undefined;
            resourceInputs["scope"] = state ? state.scope : undefined;
            resourceInputs["severity"] = state ? state.severity : undefined;
            resourceInputs["templateId"] = state ? state.templateId : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as SecureManagedRulesetArgs | undefined;
            if ((!args || args.description === undefined) && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if ((!args || args.inheritedFroms === undefined) && !opts.urn) {
                throw new Error("Missing required property 'inheritedFroms'");
            }
            resourceInputs["actions"] = args ? args.actions : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["disabledRules"] = args ? args.disabledRules : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["inheritedFroms"] = args ? args.inheritedFroms : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["notificationChannels"] = args ? args.notificationChannels : undefined;
            resourceInputs["runbook"] = args ? args.runbook : undefined;
            resourceInputs["scope"] = args ? args.scope : undefined;
            resourceInputs["severity"] = args ? args.severity : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["templateId"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SecureManagedRuleset.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SecureManagedRuleset resources.
 */
export interface SecureManagedRulesetState {
    actions?: pulumi.Input<pulumi.Input<inputs.SecureManagedRulesetAction>[]>;
    description?: pulumi.Input<string>;
    disabledRules?: pulumi.Input<pulumi.Input<string>[]>;
    enabled?: pulumi.Input<boolean>;
    inheritedFroms?: pulumi.Input<pulumi.Input<inputs.SecureManagedRulesetInheritedFrom>[]>;
    name?: pulumi.Input<string>;
    notificationChannels?: pulumi.Input<pulumi.Input<number>[]>;
    runbook?: pulumi.Input<string>;
    scope?: pulumi.Input<string>;
    severity?: pulumi.Input<number>;
    templateId?: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.SecureManagedRulesetTimeouts>;
    version?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a SecureManagedRuleset resource.
 */
export interface SecureManagedRulesetArgs {
    actions?: pulumi.Input<pulumi.Input<inputs.SecureManagedRulesetAction>[]>;
    description: pulumi.Input<string>;
    disabledRules?: pulumi.Input<pulumi.Input<string>[]>;
    enabled?: pulumi.Input<boolean>;
    inheritedFroms: pulumi.Input<pulumi.Input<inputs.SecureManagedRulesetInheritedFrom>[]>;
    name?: pulumi.Input<string>;
    notificationChannels?: pulumi.Input<pulumi.Input<number>[]>;
    runbook?: pulumi.Input<string>;
    scope?: pulumi.Input<string>;
    severity?: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.SecureManagedRulesetTimeouts>;
}
