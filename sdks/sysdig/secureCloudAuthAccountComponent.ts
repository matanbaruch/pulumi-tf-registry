// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SecureCloudAuthAccountComponent extends pulumi.CustomResource {
    /**
     * Get an existing SecureCloudAuthAccountComponent resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SecureCloudAuthAccountComponentState, opts?: pulumi.CustomResourceOptions): SecureCloudAuthAccountComponent {
        return new SecureCloudAuthAccountComponent(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sysdig:index/secureCloudAuthAccountComponent:SecureCloudAuthAccountComponent';

    /**
     * Returns true if the given object is an instance of SecureCloudAuthAccountComponent.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SecureCloudAuthAccountComponent {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SecureCloudAuthAccountComponent.__pulumiType;
    }

    public readonly accountId!: pulumi.Output<string>;
    public readonly cloudConnectorMetadata!: pulumi.Output<string | undefined>;
    public readonly cloudLogsMetadata!: pulumi.Output<string | undefined>;
    public readonly cryptoKeyMetadata!: pulumi.Output<string | undefined>;
    public readonly eventBridgeMetadata!: pulumi.Output<string | undefined>;
    public readonly instance!: pulumi.Output<string>;
    public readonly servicePrincipalMetadata!: pulumi.Output<string | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.SecureCloudAuthAccountComponentTimeouts | undefined>;
    public readonly trustedRoleMetadata!: pulumi.Output<string | undefined>;
    public readonly type!: pulumi.Output<string>;
    public readonly version!: pulumi.Output<string | undefined>;
    public readonly webhookDatasourceMetadata!: pulumi.Output<string | undefined>;

    /**
     * Create a SecureCloudAuthAccountComponent resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SecureCloudAuthAccountComponentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SecureCloudAuthAccountComponentArgs | SecureCloudAuthAccountComponentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SecureCloudAuthAccountComponentState | undefined;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["cloudConnectorMetadata"] = state ? state.cloudConnectorMetadata : undefined;
            resourceInputs["cloudLogsMetadata"] = state ? state.cloudLogsMetadata : undefined;
            resourceInputs["cryptoKeyMetadata"] = state ? state.cryptoKeyMetadata : undefined;
            resourceInputs["eventBridgeMetadata"] = state ? state.eventBridgeMetadata : undefined;
            resourceInputs["instance"] = state ? state.instance : undefined;
            resourceInputs["servicePrincipalMetadata"] = state ? state.servicePrincipalMetadata : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["trustedRoleMetadata"] = state ? state.trustedRoleMetadata : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
            resourceInputs["webhookDatasourceMetadata"] = state ? state.webhookDatasourceMetadata : undefined;
        } else {
            const args = argsOrState as SecureCloudAuthAccountComponentArgs | undefined;
            if ((!args || args.accountId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accountId'");
            }
            if ((!args || args.instance === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instance'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["accountId"] = args ? args.accountId : undefined;
            resourceInputs["cloudConnectorMetadata"] = args ? args.cloudConnectorMetadata : undefined;
            resourceInputs["cloudLogsMetadata"] = args ? args.cloudLogsMetadata : undefined;
            resourceInputs["cryptoKeyMetadata"] = args ? args.cryptoKeyMetadata : undefined;
            resourceInputs["eventBridgeMetadata"] = args ? args.eventBridgeMetadata : undefined;
            resourceInputs["instance"] = args ? args.instance : undefined;
            resourceInputs["servicePrincipalMetadata"] = args ? args.servicePrincipalMetadata : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["trustedRoleMetadata"] = args ? args.trustedRoleMetadata : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
            resourceInputs["webhookDatasourceMetadata"] = args ? args.webhookDatasourceMetadata : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SecureCloudAuthAccountComponent.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SecureCloudAuthAccountComponent resources.
 */
export interface SecureCloudAuthAccountComponentState {
    accountId?: pulumi.Input<string>;
    cloudConnectorMetadata?: pulumi.Input<string>;
    cloudLogsMetadata?: pulumi.Input<string>;
    cryptoKeyMetadata?: pulumi.Input<string>;
    eventBridgeMetadata?: pulumi.Input<string>;
    instance?: pulumi.Input<string>;
    servicePrincipalMetadata?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.SecureCloudAuthAccountComponentTimeouts>;
    trustedRoleMetadata?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    version?: pulumi.Input<string>;
    webhookDatasourceMetadata?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SecureCloudAuthAccountComponent resource.
 */
export interface SecureCloudAuthAccountComponentArgs {
    accountId: pulumi.Input<string>;
    cloudConnectorMetadata?: pulumi.Input<string>;
    cloudLogsMetadata?: pulumi.Input<string>;
    cryptoKeyMetadata?: pulumi.Input<string>;
    eventBridgeMetadata?: pulumi.Input<string>;
    instance: pulumi.Input<string>;
    servicePrincipalMetadata?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.SecureCloudAuthAccountComponentTimeouts>;
    trustedRoleMetadata?: pulumi.Input<string>;
    type: pulumi.Input<string>;
    version?: pulumi.Input<string>;
    webhookDatasourceMetadata?: pulumi.Input<string>;
}
