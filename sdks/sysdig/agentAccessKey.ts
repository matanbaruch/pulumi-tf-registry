// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class AgentAccessKey extends pulumi.CustomResource {
    /**
     * Get an existing AgentAccessKey resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AgentAccessKeyState, opts?: pulumi.CustomResourceOptions): AgentAccessKey {
        return new AgentAccessKey(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sysdig:index/agentAccessKey:AgentAccessKey';

    /**
     * Returns true if the given object is an instance of AgentAccessKey.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AgentAccessKey {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AgentAccessKey.__pulumiType;
    }

    public /*out*/ readonly accessKey!: pulumi.Output<string>;
    public /*out*/ readonly dateCreated!: pulumi.Output<string>;
    public /*out*/ readonly dateDisabled!: pulumi.Output<string>;
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    public readonly limit!: pulumi.Output<number | undefined>;
    public readonly metadata!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly reservation!: pulumi.Output<number | undefined>;
    public readonly teamId!: pulumi.Output<number | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.AgentAccessKeyTimeouts | undefined>;

    /**
     * Create a AgentAccessKey resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: AgentAccessKeyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AgentAccessKeyArgs | AgentAccessKeyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AgentAccessKeyState | undefined;
            resourceInputs["accessKey"] = state ? state.accessKey : undefined;
            resourceInputs["dateCreated"] = state ? state.dateCreated : undefined;
            resourceInputs["dateDisabled"] = state ? state.dateDisabled : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["limit"] = state ? state.limit : undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
            resourceInputs["reservation"] = state ? state.reservation : undefined;
            resourceInputs["teamId"] = state ? state.teamId : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as AgentAccessKeyArgs | undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["limit"] = args ? args.limit : undefined;
            resourceInputs["metadata"] = args ? args.metadata : undefined;
            resourceInputs["reservation"] = args ? args.reservation : undefined;
            resourceInputs["teamId"] = args ? args.teamId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["accessKey"] = undefined /*out*/;
            resourceInputs["dateCreated"] = undefined /*out*/;
            resourceInputs["dateDisabled"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["accessKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(AgentAccessKey.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AgentAccessKey resources.
 */
export interface AgentAccessKeyState {
    accessKey?: pulumi.Input<string>;
    dateCreated?: pulumi.Input<string>;
    dateDisabled?: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    limit?: pulumi.Input<number>;
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    reservation?: pulumi.Input<number>;
    teamId?: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.AgentAccessKeyTimeouts>;
}

/**
 * The set of arguments for constructing a AgentAccessKey resource.
 */
export interface AgentAccessKeyArgs {
    enabled?: pulumi.Input<boolean>;
    limit?: pulumi.Input<number>;
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    reservation?: pulumi.Input<number>;
    teamId?: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.AgentAccessKeyTimeouts>;
}
