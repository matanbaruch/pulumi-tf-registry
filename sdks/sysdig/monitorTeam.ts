// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class MonitorTeam extends pulumi.CustomResource {
    /**
     * Get an existing MonitorTeam resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MonitorTeamState, opts?: pulumi.CustomResourceOptions): MonitorTeam {
        return new MonitorTeam(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sysdig:index/monitorTeam:MonitorTeam';

    /**
     * Returns true if the given object is an instance of MonitorTeam.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MonitorTeam {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MonitorTeam.__pulumiType;
    }

    public readonly canSeeInfrastructureEvents!: pulumi.Output<boolean | undefined>;
    public readonly canUseAwsData!: pulumi.Output<boolean | undefined>;
    public readonly canUseSysdigCapture!: pulumi.Output<boolean | undefined>;
    public readonly defaultTeam!: pulumi.Output<boolean | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly enableIbmPlatformMetrics!: pulumi.Output<boolean | undefined>;
    public readonly entrypoints!: pulumi.Output<outputs.MonitorTeamEntrypoint[]>;
    public readonly filter!: pulumi.Output<string | undefined>;
    public readonly ibmPlatformMetrics!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly scopeBy!: pulumi.Output<string | undefined>;
    public readonly theme!: pulumi.Output<string | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.MonitorTeamTimeouts | undefined>;
    public readonly userRoles!: pulumi.Output<outputs.MonitorTeamUserRole[] | undefined>;
    public /*out*/ readonly version!: pulumi.Output<number>;

    /**
     * Create a MonitorTeam resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MonitorTeamArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MonitorTeamArgs | MonitorTeamState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MonitorTeamState | undefined;
            resourceInputs["canSeeInfrastructureEvents"] = state ? state.canSeeInfrastructureEvents : undefined;
            resourceInputs["canUseAwsData"] = state ? state.canUseAwsData : undefined;
            resourceInputs["canUseSysdigCapture"] = state ? state.canUseSysdigCapture : undefined;
            resourceInputs["defaultTeam"] = state ? state.defaultTeam : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["enableIbmPlatformMetrics"] = state ? state.enableIbmPlatformMetrics : undefined;
            resourceInputs["entrypoints"] = state ? state.entrypoints : undefined;
            resourceInputs["filter"] = state ? state.filter : undefined;
            resourceInputs["ibmPlatformMetrics"] = state ? state.ibmPlatformMetrics : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["scopeBy"] = state ? state.scopeBy : undefined;
            resourceInputs["theme"] = state ? state.theme : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["userRoles"] = state ? state.userRoles : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as MonitorTeamArgs | undefined;
            if ((!args || args.entrypoints === undefined) && !opts.urn) {
                throw new Error("Missing required property 'entrypoints'");
            }
            resourceInputs["canSeeInfrastructureEvents"] = args ? args.canSeeInfrastructureEvents : undefined;
            resourceInputs["canUseAwsData"] = args ? args.canUseAwsData : undefined;
            resourceInputs["canUseSysdigCapture"] = args ? args.canUseSysdigCapture : undefined;
            resourceInputs["defaultTeam"] = args ? args.defaultTeam : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["enableIbmPlatformMetrics"] = args ? args.enableIbmPlatformMetrics : undefined;
            resourceInputs["entrypoints"] = args ? args.entrypoints : undefined;
            resourceInputs["filter"] = args ? args.filter : undefined;
            resourceInputs["ibmPlatformMetrics"] = args ? args.ibmPlatformMetrics : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["scopeBy"] = args ? args.scopeBy : undefined;
            resourceInputs["theme"] = args ? args.theme : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["userRoles"] = args ? args.userRoles : undefined;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MonitorTeam.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering MonitorTeam resources.
 */
export interface MonitorTeamState {
    canSeeInfrastructureEvents?: pulumi.Input<boolean>;
    canUseAwsData?: pulumi.Input<boolean>;
    canUseSysdigCapture?: pulumi.Input<boolean>;
    defaultTeam?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    enableIbmPlatformMetrics?: pulumi.Input<boolean>;
    entrypoints?: pulumi.Input<pulumi.Input<inputs.MonitorTeamEntrypoint>[]>;
    filter?: pulumi.Input<string>;
    ibmPlatformMetrics?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    scopeBy?: pulumi.Input<string>;
    theme?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.MonitorTeamTimeouts>;
    userRoles?: pulumi.Input<pulumi.Input<inputs.MonitorTeamUserRole>[]>;
    version?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a MonitorTeam resource.
 */
export interface MonitorTeamArgs {
    canSeeInfrastructureEvents?: pulumi.Input<boolean>;
    canUseAwsData?: pulumi.Input<boolean>;
    canUseSysdigCapture?: pulumi.Input<boolean>;
    defaultTeam?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    enableIbmPlatformMetrics?: pulumi.Input<boolean>;
    entrypoints: pulumi.Input<pulumi.Input<inputs.MonitorTeamEntrypoint>[]>;
    filter?: pulumi.Input<string>;
    ibmPlatformMetrics?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    scopeBy?: pulumi.Input<string>;
    theme?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.MonitorTeamTimeouts>;
    userRoles?: pulumi.Input<pulumi.Input<inputs.MonitorTeamUserRole>[]>;
}
