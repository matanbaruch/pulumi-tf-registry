// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AgentAccessKeyArgs, AgentAccessKeyState } from "./agentAccessKey";
export type AgentAccessKey = import("./agentAccessKey").AgentAccessKey;
export const AgentAccessKey: typeof import("./agentAccessKey").AgentAccessKey = null as any;
utilities.lazyLoad(exports, ["AgentAccessKey"], () => require("./agentAccessKey"));

export { CustomRoleArgs, CustomRoleState } from "./customRole";
export type CustomRole = import("./customRole").CustomRole;
export const CustomRole: typeof import("./customRole").CustomRole = null as any;
utilities.lazyLoad(exports, ["CustomRole"], () => require("./customRole"));

export { GetAgentAccessKeyArgs, GetAgentAccessKeyResult, GetAgentAccessKeyOutputArgs } from "./getAgentAccessKey";
export const getAgentAccessKey: typeof import("./getAgentAccessKey").getAgentAccessKey = null as any;
export const getAgentAccessKeyOutput: typeof import("./getAgentAccessKey").getAgentAccessKeyOutput = null as any;
utilities.lazyLoad(exports, ["getAgentAccessKey","getAgentAccessKeyOutput"], () => require("./getAgentAccessKey"));

export { GetCurrentUserArgs, GetCurrentUserResult, GetCurrentUserOutputArgs } from "./getCurrentUser";
export const getCurrentUser: typeof import("./getCurrentUser").getCurrentUser = null as any;
export const getCurrentUserOutput: typeof import("./getCurrentUser").getCurrentUserOutput = null as any;
utilities.lazyLoad(exports, ["getCurrentUser","getCurrentUserOutput"], () => require("./getCurrentUser"));

export { GetCustomRoleArgs, GetCustomRoleResult, GetCustomRoleOutputArgs } from "./getCustomRole";
export const getCustomRole: typeof import("./getCustomRole").getCustomRole = null as any;
export const getCustomRoleOutput: typeof import("./getCustomRole").getCustomRoleOutput = null as any;
utilities.lazyLoad(exports, ["getCustomRole","getCustomRoleOutput"], () => require("./getCustomRole"));

export { GetFargateWorkloadAgentArgs, GetFargateWorkloadAgentResult, GetFargateWorkloadAgentOutputArgs } from "./getFargateWorkloadAgent";
export const getFargateWorkloadAgent: typeof import("./getFargateWorkloadAgent").getFargateWorkloadAgent = null as any;
export const getFargateWorkloadAgentOutput: typeof import("./getFargateWorkloadAgent").getFargateWorkloadAgentOutput = null as any;
utilities.lazyLoad(exports, ["getFargateWorkloadAgent","getFargateWorkloadAgentOutput"], () => require("./getFargateWorkloadAgent"));

export { GetMonitorCustomRolePermissionsArgs, GetMonitorCustomRolePermissionsResult, GetMonitorCustomRolePermissionsOutputArgs } from "./getMonitorCustomRolePermissions";
export const getMonitorCustomRolePermissions: typeof import("./getMonitorCustomRolePermissions").getMonitorCustomRolePermissions = null as any;
export const getMonitorCustomRolePermissionsOutput: typeof import("./getMonitorCustomRolePermissions").getMonitorCustomRolePermissionsOutput = null as any;
utilities.lazyLoad(exports, ["getMonitorCustomRolePermissions","getMonitorCustomRolePermissionsOutput"], () => require("./getMonitorCustomRolePermissions"));

export { GetMonitorNotificationChannelCustomWebhookArgs, GetMonitorNotificationChannelCustomWebhookResult, GetMonitorNotificationChannelCustomWebhookOutputArgs } from "./getMonitorNotificationChannelCustomWebhook";
export const getMonitorNotificationChannelCustomWebhook: typeof import("./getMonitorNotificationChannelCustomWebhook").getMonitorNotificationChannelCustomWebhook = null as any;
export const getMonitorNotificationChannelCustomWebhookOutput: typeof import("./getMonitorNotificationChannelCustomWebhook").getMonitorNotificationChannelCustomWebhookOutput = null as any;
utilities.lazyLoad(exports, ["getMonitorNotificationChannelCustomWebhook","getMonitorNotificationChannelCustomWebhookOutput"], () => require("./getMonitorNotificationChannelCustomWebhook"));

export { GetMonitorNotificationChannelEmailArgs, GetMonitorNotificationChannelEmailResult, GetMonitorNotificationChannelEmailOutputArgs } from "./getMonitorNotificationChannelEmail";
export const getMonitorNotificationChannelEmail: typeof import("./getMonitorNotificationChannelEmail").getMonitorNotificationChannelEmail = null as any;
export const getMonitorNotificationChannelEmailOutput: typeof import("./getMonitorNotificationChannelEmail").getMonitorNotificationChannelEmailOutput = null as any;
utilities.lazyLoad(exports, ["getMonitorNotificationChannelEmail","getMonitorNotificationChannelEmailOutput"], () => require("./getMonitorNotificationChannelEmail"));

export { GetMonitorNotificationChannelGoogleChatArgs, GetMonitorNotificationChannelGoogleChatResult, GetMonitorNotificationChannelGoogleChatOutputArgs } from "./getMonitorNotificationChannelGoogleChat";
export const getMonitorNotificationChannelGoogleChat: typeof import("./getMonitorNotificationChannelGoogleChat").getMonitorNotificationChannelGoogleChat = null as any;
export const getMonitorNotificationChannelGoogleChatOutput: typeof import("./getMonitorNotificationChannelGoogleChat").getMonitorNotificationChannelGoogleChatOutput = null as any;
utilities.lazyLoad(exports, ["getMonitorNotificationChannelGoogleChat","getMonitorNotificationChannelGoogleChatOutput"], () => require("./getMonitorNotificationChannelGoogleChat"));

export { GetMonitorNotificationChannelIbmEventNotificationArgs, GetMonitorNotificationChannelIbmEventNotificationResult, GetMonitorNotificationChannelIbmEventNotificationOutputArgs } from "./getMonitorNotificationChannelIbmEventNotification";
export const getMonitorNotificationChannelIbmEventNotification: typeof import("./getMonitorNotificationChannelIbmEventNotification").getMonitorNotificationChannelIbmEventNotification = null as any;
export const getMonitorNotificationChannelIbmEventNotificationOutput: typeof import("./getMonitorNotificationChannelIbmEventNotification").getMonitorNotificationChannelIbmEventNotificationOutput = null as any;
utilities.lazyLoad(exports, ["getMonitorNotificationChannelIbmEventNotification","getMonitorNotificationChannelIbmEventNotificationOutput"], () => require("./getMonitorNotificationChannelIbmEventNotification"));

export { GetMonitorNotificationChannelIbmFunctionArgs, GetMonitorNotificationChannelIbmFunctionResult, GetMonitorNotificationChannelIbmFunctionOutputArgs } from "./getMonitorNotificationChannelIbmFunction";
export const getMonitorNotificationChannelIbmFunction: typeof import("./getMonitorNotificationChannelIbmFunction").getMonitorNotificationChannelIbmFunction = null as any;
export const getMonitorNotificationChannelIbmFunctionOutput: typeof import("./getMonitorNotificationChannelIbmFunction").getMonitorNotificationChannelIbmFunctionOutput = null as any;
utilities.lazyLoad(exports, ["getMonitorNotificationChannelIbmFunction","getMonitorNotificationChannelIbmFunctionOutput"], () => require("./getMonitorNotificationChannelIbmFunction"));

export { GetMonitorNotificationChannelMsteamsArgs, GetMonitorNotificationChannelMsteamsResult, GetMonitorNotificationChannelMsteamsOutputArgs } from "./getMonitorNotificationChannelMsteams";
export const getMonitorNotificationChannelMsteams: typeof import("./getMonitorNotificationChannelMsteams").getMonitorNotificationChannelMsteams = null as any;
export const getMonitorNotificationChannelMsteamsOutput: typeof import("./getMonitorNotificationChannelMsteams").getMonitorNotificationChannelMsteamsOutput = null as any;
utilities.lazyLoad(exports, ["getMonitorNotificationChannelMsteams","getMonitorNotificationChannelMsteamsOutput"], () => require("./getMonitorNotificationChannelMsteams"));

export { GetMonitorNotificationChannelOpsgenieArgs, GetMonitorNotificationChannelOpsgenieResult, GetMonitorNotificationChannelOpsgenieOutputArgs } from "./getMonitorNotificationChannelOpsgenie";
export const getMonitorNotificationChannelOpsgenie: typeof import("./getMonitorNotificationChannelOpsgenie").getMonitorNotificationChannelOpsgenie = null as any;
export const getMonitorNotificationChannelOpsgenieOutput: typeof import("./getMonitorNotificationChannelOpsgenie").getMonitorNotificationChannelOpsgenieOutput = null as any;
utilities.lazyLoad(exports, ["getMonitorNotificationChannelOpsgenie","getMonitorNotificationChannelOpsgenieOutput"], () => require("./getMonitorNotificationChannelOpsgenie"));

export { GetMonitorNotificationChannelPagerdutyArgs, GetMonitorNotificationChannelPagerdutyResult, GetMonitorNotificationChannelPagerdutyOutputArgs } from "./getMonitorNotificationChannelPagerduty";
export const getMonitorNotificationChannelPagerduty: typeof import("./getMonitorNotificationChannelPagerduty").getMonitorNotificationChannelPagerduty = null as any;
export const getMonitorNotificationChannelPagerdutyOutput: typeof import("./getMonitorNotificationChannelPagerduty").getMonitorNotificationChannelPagerdutyOutput = null as any;
utilities.lazyLoad(exports, ["getMonitorNotificationChannelPagerduty","getMonitorNotificationChannelPagerdutyOutput"], () => require("./getMonitorNotificationChannelPagerduty"));

export { GetMonitorNotificationChannelPrometheusAlertManagerArgs, GetMonitorNotificationChannelPrometheusAlertManagerResult, GetMonitorNotificationChannelPrometheusAlertManagerOutputArgs } from "./getMonitorNotificationChannelPrometheusAlertManager";
export const getMonitorNotificationChannelPrometheusAlertManager: typeof import("./getMonitorNotificationChannelPrometheusAlertManager").getMonitorNotificationChannelPrometheusAlertManager = null as any;
export const getMonitorNotificationChannelPrometheusAlertManagerOutput: typeof import("./getMonitorNotificationChannelPrometheusAlertManager").getMonitorNotificationChannelPrometheusAlertManagerOutput = null as any;
utilities.lazyLoad(exports, ["getMonitorNotificationChannelPrometheusAlertManager","getMonitorNotificationChannelPrometheusAlertManagerOutput"], () => require("./getMonitorNotificationChannelPrometheusAlertManager"));

export { GetMonitorNotificationChannelSlackArgs, GetMonitorNotificationChannelSlackResult, GetMonitorNotificationChannelSlackOutputArgs } from "./getMonitorNotificationChannelSlack";
export const getMonitorNotificationChannelSlack: typeof import("./getMonitorNotificationChannelSlack").getMonitorNotificationChannelSlack = null as any;
export const getMonitorNotificationChannelSlackOutput: typeof import("./getMonitorNotificationChannelSlack").getMonitorNotificationChannelSlackOutput = null as any;
utilities.lazyLoad(exports, ["getMonitorNotificationChannelSlack","getMonitorNotificationChannelSlackOutput"], () => require("./getMonitorNotificationChannelSlack"));

export { GetMonitorNotificationChannelSnsArgs, GetMonitorNotificationChannelSnsResult, GetMonitorNotificationChannelSnsOutputArgs } from "./getMonitorNotificationChannelSns";
export const getMonitorNotificationChannelSns: typeof import("./getMonitorNotificationChannelSns").getMonitorNotificationChannelSns = null as any;
export const getMonitorNotificationChannelSnsOutput: typeof import("./getMonitorNotificationChannelSns").getMonitorNotificationChannelSnsOutput = null as any;
utilities.lazyLoad(exports, ["getMonitorNotificationChannelSns","getMonitorNotificationChannelSnsOutput"], () => require("./getMonitorNotificationChannelSns"));

export { GetMonitorNotificationChannelTeamEmailArgs, GetMonitorNotificationChannelTeamEmailResult, GetMonitorNotificationChannelTeamEmailOutputArgs } from "./getMonitorNotificationChannelTeamEmail";
export const getMonitorNotificationChannelTeamEmail: typeof import("./getMonitorNotificationChannelTeamEmail").getMonitorNotificationChannelTeamEmail = null as any;
export const getMonitorNotificationChannelTeamEmailOutput: typeof import("./getMonitorNotificationChannelTeamEmail").getMonitorNotificationChannelTeamEmailOutput = null as any;
utilities.lazyLoad(exports, ["getMonitorNotificationChannelTeamEmail","getMonitorNotificationChannelTeamEmailOutput"], () => require("./getMonitorNotificationChannelTeamEmail"));

export { GetMonitorNotificationChannelVictoropsArgs, GetMonitorNotificationChannelVictoropsResult, GetMonitorNotificationChannelVictoropsOutputArgs } from "./getMonitorNotificationChannelVictorops";
export const getMonitorNotificationChannelVictorops: typeof import("./getMonitorNotificationChannelVictorops").getMonitorNotificationChannelVictorops = null as any;
export const getMonitorNotificationChannelVictoropsOutput: typeof import("./getMonitorNotificationChannelVictorops").getMonitorNotificationChannelVictoropsOutput = null as any;
utilities.lazyLoad(exports, ["getMonitorNotificationChannelVictorops","getMonitorNotificationChannelVictoropsOutput"], () => require("./getMonitorNotificationChannelVictorops"));

export { GetMonitorNotificationChannelWebhookArgs, GetMonitorNotificationChannelWebhookResult, GetMonitorNotificationChannelWebhookOutputArgs } from "./getMonitorNotificationChannelWebhook";
export const getMonitorNotificationChannelWebhook: typeof import("./getMonitorNotificationChannelWebhook").getMonitorNotificationChannelWebhook = null as any;
export const getMonitorNotificationChannelWebhookOutput: typeof import("./getMonitorNotificationChannelWebhook").getMonitorNotificationChannelWebhookOutput = null as any;
utilities.lazyLoad(exports, ["getMonitorNotificationChannelWebhook","getMonitorNotificationChannelWebhookOutput"], () => require("./getMonitorNotificationChannelWebhook"));

export { GetSecureAgentlessScanningAssetsArgs, GetSecureAgentlessScanningAssetsResult, GetSecureAgentlessScanningAssetsOutputArgs } from "./getSecureAgentlessScanningAssets";
export const getSecureAgentlessScanningAssets: typeof import("./getSecureAgentlessScanningAssets").getSecureAgentlessScanningAssets = null as any;
export const getSecureAgentlessScanningAssetsOutput: typeof import("./getSecureAgentlessScanningAssets").getSecureAgentlessScanningAssetsOutput = null as any;
utilities.lazyLoad(exports, ["getSecureAgentlessScanningAssets","getSecureAgentlessScanningAssetsOutput"], () => require("./getSecureAgentlessScanningAssets"));

export { GetSecureAwsMlPolicyArgs, GetSecureAwsMlPolicyResult, GetSecureAwsMlPolicyOutputArgs } from "./getSecureAwsMlPolicy";
export const getSecureAwsMlPolicy: typeof import("./getSecureAwsMlPolicy").getSecureAwsMlPolicy = null as any;
export const getSecureAwsMlPolicyOutput: typeof import("./getSecureAwsMlPolicy").getSecureAwsMlPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getSecureAwsMlPolicy","getSecureAwsMlPolicyOutput"], () => require("./getSecureAwsMlPolicy"));

export { GetSecureCloudIngestionAssetsArgs, GetSecureCloudIngestionAssetsResult, GetSecureCloudIngestionAssetsOutputArgs } from "./getSecureCloudIngestionAssets";
export const getSecureCloudIngestionAssets: typeof import("./getSecureCloudIngestionAssets").getSecureCloudIngestionAssets = null as any;
export const getSecureCloudIngestionAssetsOutput: typeof import("./getSecureCloudIngestionAssets").getSecureCloudIngestionAssetsOutput = null as any;
utilities.lazyLoad(exports, ["getSecureCloudIngestionAssets","getSecureCloudIngestionAssetsOutput"], () => require("./getSecureCloudIngestionAssets"));

export { GetSecureConnectionArgs, GetSecureConnectionResult, GetSecureConnectionOutputArgs } from "./getSecureConnection";
export const getSecureConnection: typeof import("./getSecureConnection").getSecureConnection = null as any;
export const getSecureConnectionOutput: typeof import("./getSecureConnection").getSecureConnectionOutput = null as any;
utilities.lazyLoad(exports, ["getSecureConnection","getSecureConnectionOutput"], () => require("./getSecureConnection"));

export { GetSecureCustomPolicyArgs, GetSecureCustomPolicyResult, GetSecureCustomPolicyOutputArgs } from "./getSecureCustomPolicy";
export const getSecureCustomPolicy: typeof import("./getSecureCustomPolicy").getSecureCustomPolicy = null as any;
export const getSecureCustomPolicyOutput: typeof import("./getSecureCustomPolicy").getSecureCustomPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getSecureCustomPolicy","getSecureCustomPolicyOutput"], () => require("./getSecureCustomPolicy"));

export { GetSecureCustomRolePermissionsArgs, GetSecureCustomRolePermissionsResult, GetSecureCustomRolePermissionsOutputArgs } from "./getSecureCustomRolePermissions";
export const getSecureCustomRolePermissions: typeof import("./getSecureCustomRolePermissions").getSecureCustomRolePermissions = null as any;
export const getSecureCustomRolePermissionsOutput: typeof import("./getSecureCustomRolePermissions").getSecureCustomRolePermissionsOutput = null as any;
utilities.lazyLoad(exports, ["getSecureCustomRolePermissions","getSecureCustomRolePermissionsOutput"], () => require("./getSecureCustomRolePermissions"));

export { GetSecureDriftPolicyArgs, GetSecureDriftPolicyResult, GetSecureDriftPolicyOutputArgs } from "./getSecureDriftPolicy";
export const getSecureDriftPolicy: typeof import("./getSecureDriftPolicy").getSecureDriftPolicy = null as any;
export const getSecureDriftPolicyOutput: typeof import("./getSecureDriftPolicy").getSecureDriftPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getSecureDriftPolicy","getSecureDriftPolicyOutput"], () => require("./getSecureDriftPolicy"));

export { GetSecureMalwarePolicyArgs, GetSecureMalwarePolicyResult, GetSecureMalwarePolicyOutputArgs } from "./getSecureMalwarePolicy";
export const getSecureMalwarePolicy: typeof import("./getSecureMalwarePolicy").getSecureMalwarePolicy = null as any;
export const getSecureMalwarePolicyOutput: typeof import("./getSecureMalwarePolicy").getSecureMalwarePolicyOutput = null as any;
utilities.lazyLoad(exports, ["getSecureMalwarePolicy","getSecureMalwarePolicyOutput"], () => require("./getSecureMalwarePolicy"));

export { GetSecureManagedPolicyArgs, GetSecureManagedPolicyResult, GetSecureManagedPolicyOutputArgs } from "./getSecureManagedPolicy";
export const getSecureManagedPolicy: typeof import("./getSecureManagedPolicy").getSecureManagedPolicy = null as any;
export const getSecureManagedPolicyOutput: typeof import("./getSecureManagedPolicy").getSecureManagedPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getSecureManagedPolicy","getSecureManagedPolicyOutput"], () => require("./getSecureManagedPolicy"));

export { GetSecureManagedRulesetArgs, GetSecureManagedRulesetResult, GetSecureManagedRulesetOutputArgs } from "./getSecureManagedRuleset";
export const getSecureManagedRuleset: typeof import("./getSecureManagedRuleset").getSecureManagedRuleset = null as any;
export const getSecureManagedRulesetOutput: typeof import("./getSecureManagedRuleset").getSecureManagedRulesetOutput = null as any;
utilities.lazyLoad(exports, ["getSecureManagedRuleset","getSecureManagedRulesetOutput"], () => require("./getSecureManagedRuleset"));

export { GetSecureMlPolicyArgs, GetSecureMlPolicyResult, GetSecureMlPolicyOutputArgs } from "./getSecureMlPolicy";
export const getSecureMlPolicy: typeof import("./getSecureMlPolicy").getSecureMlPolicy = null as any;
export const getSecureMlPolicyOutput: typeof import("./getSecureMlPolicy").getSecureMlPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getSecureMlPolicy","getSecureMlPolicyOutput"], () => require("./getSecureMlPolicy"));

export { GetSecureNotificationChannelArgs, GetSecureNotificationChannelResult, GetSecureNotificationChannelOutputArgs } from "./getSecureNotificationChannel";
export const getSecureNotificationChannel: typeof import("./getSecureNotificationChannel").getSecureNotificationChannel = null as any;
export const getSecureNotificationChannelOutput: typeof import("./getSecureNotificationChannel").getSecureNotificationChannelOutput = null as any;
utilities.lazyLoad(exports, ["getSecureNotificationChannel","getSecureNotificationChannelOutput"], () => require("./getSecureNotificationChannel"));

export { GetSecureNotificationChannelEmailArgs, GetSecureNotificationChannelEmailResult, GetSecureNotificationChannelEmailOutputArgs } from "./getSecureNotificationChannelEmail";
export const getSecureNotificationChannelEmail: typeof import("./getSecureNotificationChannelEmail").getSecureNotificationChannelEmail = null as any;
export const getSecureNotificationChannelEmailOutput: typeof import("./getSecureNotificationChannelEmail").getSecureNotificationChannelEmailOutput = null as any;
utilities.lazyLoad(exports, ["getSecureNotificationChannelEmail","getSecureNotificationChannelEmailOutput"], () => require("./getSecureNotificationChannelEmail"));

export { GetSecureNotificationChannelMsteamsArgs, GetSecureNotificationChannelMsteamsResult, GetSecureNotificationChannelMsteamsOutputArgs } from "./getSecureNotificationChannelMsteams";
export const getSecureNotificationChannelMsteams: typeof import("./getSecureNotificationChannelMsteams").getSecureNotificationChannelMsteams = null as any;
export const getSecureNotificationChannelMsteamsOutput: typeof import("./getSecureNotificationChannelMsteams").getSecureNotificationChannelMsteamsOutput = null as any;
utilities.lazyLoad(exports, ["getSecureNotificationChannelMsteams","getSecureNotificationChannelMsteamsOutput"], () => require("./getSecureNotificationChannelMsteams"));

export { GetSecureNotificationChannelOpsgenieArgs, GetSecureNotificationChannelOpsgenieResult, GetSecureNotificationChannelOpsgenieOutputArgs } from "./getSecureNotificationChannelOpsgenie";
export const getSecureNotificationChannelOpsgenie: typeof import("./getSecureNotificationChannelOpsgenie").getSecureNotificationChannelOpsgenie = null as any;
export const getSecureNotificationChannelOpsgenieOutput: typeof import("./getSecureNotificationChannelOpsgenie").getSecureNotificationChannelOpsgenieOutput = null as any;
utilities.lazyLoad(exports, ["getSecureNotificationChannelOpsgenie","getSecureNotificationChannelOpsgenieOutput"], () => require("./getSecureNotificationChannelOpsgenie"));

export { GetSecureNotificationChannelPagerdutyArgs, GetSecureNotificationChannelPagerdutyResult, GetSecureNotificationChannelPagerdutyOutputArgs } from "./getSecureNotificationChannelPagerduty";
export const getSecureNotificationChannelPagerduty: typeof import("./getSecureNotificationChannelPagerduty").getSecureNotificationChannelPagerduty = null as any;
export const getSecureNotificationChannelPagerdutyOutput: typeof import("./getSecureNotificationChannelPagerduty").getSecureNotificationChannelPagerdutyOutput = null as any;
utilities.lazyLoad(exports, ["getSecureNotificationChannelPagerduty","getSecureNotificationChannelPagerdutyOutput"], () => require("./getSecureNotificationChannelPagerduty"));

export { GetSecureNotificationChannelPrometheusAlertManagerArgs, GetSecureNotificationChannelPrometheusAlertManagerResult, GetSecureNotificationChannelPrometheusAlertManagerOutputArgs } from "./getSecureNotificationChannelPrometheusAlertManager";
export const getSecureNotificationChannelPrometheusAlertManager: typeof import("./getSecureNotificationChannelPrometheusAlertManager").getSecureNotificationChannelPrometheusAlertManager = null as any;
export const getSecureNotificationChannelPrometheusAlertManagerOutput: typeof import("./getSecureNotificationChannelPrometheusAlertManager").getSecureNotificationChannelPrometheusAlertManagerOutput = null as any;
utilities.lazyLoad(exports, ["getSecureNotificationChannelPrometheusAlertManager","getSecureNotificationChannelPrometheusAlertManagerOutput"], () => require("./getSecureNotificationChannelPrometheusAlertManager"));

export { GetSecureNotificationChannelSlackArgs, GetSecureNotificationChannelSlackResult, GetSecureNotificationChannelSlackOutputArgs } from "./getSecureNotificationChannelSlack";
export const getSecureNotificationChannelSlack: typeof import("./getSecureNotificationChannelSlack").getSecureNotificationChannelSlack = null as any;
export const getSecureNotificationChannelSlackOutput: typeof import("./getSecureNotificationChannelSlack").getSecureNotificationChannelSlackOutput = null as any;
utilities.lazyLoad(exports, ["getSecureNotificationChannelSlack","getSecureNotificationChannelSlackOutput"], () => require("./getSecureNotificationChannelSlack"));

export { GetSecureNotificationChannelSnsArgs, GetSecureNotificationChannelSnsResult, GetSecureNotificationChannelSnsOutputArgs } from "./getSecureNotificationChannelSns";
export const getSecureNotificationChannelSns: typeof import("./getSecureNotificationChannelSns").getSecureNotificationChannelSns = null as any;
export const getSecureNotificationChannelSnsOutput: typeof import("./getSecureNotificationChannelSns").getSecureNotificationChannelSnsOutput = null as any;
utilities.lazyLoad(exports, ["getSecureNotificationChannelSns","getSecureNotificationChannelSnsOutput"], () => require("./getSecureNotificationChannelSns"));

export { GetSecureNotificationChannelTeamEmailArgs, GetSecureNotificationChannelTeamEmailResult, GetSecureNotificationChannelTeamEmailOutputArgs } from "./getSecureNotificationChannelTeamEmail";
export const getSecureNotificationChannelTeamEmail: typeof import("./getSecureNotificationChannelTeamEmail").getSecureNotificationChannelTeamEmail = null as any;
export const getSecureNotificationChannelTeamEmailOutput: typeof import("./getSecureNotificationChannelTeamEmail").getSecureNotificationChannelTeamEmailOutput = null as any;
utilities.lazyLoad(exports, ["getSecureNotificationChannelTeamEmail","getSecureNotificationChannelTeamEmailOutput"], () => require("./getSecureNotificationChannelTeamEmail"));

export { GetSecureNotificationChannelVictoropsArgs, GetSecureNotificationChannelVictoropsResult, GetSecureNotificationChannelVictoropsOutputArgs } from "./getSecureNotificationChannelVictorops";
export const getSecureNotificationChannelVictorops: typeof import("./getSecureNotificationChannelVictorops").getSecureNotificationChannelVictorops = null as any;
export const getSecureNotificationChannelVictoropsOutput: typeof import("./getSecureNotificationChannelVictorops").getSecureNotificationChannelVictoropsOutput = null as any;
utilities.lazyLoad(exports, ["getSecureNotificationChannelVictorops","getSecureNotificationChannelVictoropsOutput"], () => require("./getSecureNotificationChannelVictorops"));

export { GetSecureNotificationChannelWebhookArgs, GetSecureNotificationChannelWebhookResult, GetSecureNotificationChannelWebhookOutputArgs } from "./getSecureNotificationChannelWebhook";
export const getSecureNotificationChannelWebhook: typeof import("./getSecureNotificationChannelWebhook").getSecureNotificationChannelWebhook = null as any;
export const getSecureNotificationChannelWebhookOutput: typeof import("./getSecureNotificationChannelWebhook").getSecureNotificationChannelWebhookOutput = null as any;
utilities.lazyLoad(exports, ["getSecureNotificationChannelWebhook","getSecureNotificationChannelWebhookOutput"], () => require("./getSecureNotificationChannelWebhook"));

export { GetSecurePosturePoliciesArgs, GetSecurePosturePoliciesResult, GetSecurePosturePoliciesOutputArgs } from "./getSecurePosturePolicies";
export const getSecurePosturePolicies: typeof import("./getSecurePosturePolicies").getSecurePosturePolicies = null as any;
export const getSecurePosturePoliciesOutput: typeof import("./getSecurePosturePolicies").getSecurePosturePoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getSecurePosturePolicies","getSecurePosturePoliciesOutput"], () => require("./getSecurePosturePolicies"));

export { GetSecurePosturePolicyArgs, GetSecurePosturePolicyResult, GetSecurePosturePolicyOutputArgs } from "./getSecurePosturePolicy";
export const getSecurePosturePolicy: typeof import("./getSecurePosturePolicy").getSecurePosturePolicy = null as any;
export const getSecurePosturePolicyOutput: typeof import("./getSecurePosturePolicy").getSecurePosturePolicyOutput = null as any;
utilities.lazyLoad(exports, ["getSecurePosturePolicy","getSecurePosturePolicyOutput"], () => require("./getSecurePosturePolicy"));

export { GetSecureRuleContainerArgs, GetSecureRuleContainerResult, GetSecureRuleContainerOutputArgs } from "./getSecureRuleContainer";
export const getSecureRuleContainer: typeof import("./getSecureRuleContainer").getSecureRuleContainer = null as any;
export const getSecureRuleContainerOutput: typeof import("./getSecureRuleContainer").getSecureRuleContainerOutput = null as any;
utilities.lazyLoad(exports, ["getSecureRuleContainer","getSecureRuleContainerOutput"], () => require("./getSecureRuleContainer"));

export { GetSecureRuleFalcoArgs, GetSecureRuleFalcoResult, GetSecureRuleFalcoOutputArgs } from "./getSecureRuleFalco";
export const getSecureRuleFalco: typeof import("./getSecureRuleFalco").getSecureRuleFalco = null as any;
export const getSecureRuleFalcoOutput: typeof import("./getSecureRuleFalco").getSecureRuleFalcoOutput = null as any;
utilities.lazyLoad(exports, ["getSecureRuleFalco","getSecureRuleFalcoOutput"], () => require("./getSecureRuleFalco"));

export { GetSecureRuleFalcoCountArgs, GetSecureRuleFalcoCountResult, GetSecureRuleFalcoCountOutputArgs } from "./getSecureRuleFalcoCount";
export const getSecureRuleFalcoCount: typeof import("./getSecureRuleFalcoCount").getSecureRuleFalcoCount = null as any;
export const getSecureRuleFalcoCountOutput: typeof import("./getSecureRuleFalcoCount").getSecureRuleFalcoCountOutput = null as any;
utilities.lazyLoad(exports, ["getSecureRuleFalcoCount","getSecureRuleFalcoCountOutput"], () => require("./getSecureRuleFalcoCount"));

export { GetSecureRuleFilesystemArgs, GetSecureRuleFilesystemResult, GetSecureRuleFilesystemOutputArgs } from "./getSecureRuleFilesystem";
export const getSecureRuleFilesystem: typeof import("./getSecureRuleFilesystem").getSecureRuleFilesystem = null as any;
export const getSecureRuleFilesystemOutput: typeof import("./getSecureRuleFilesystem").getSecureRuleFilesystemOutput = null as any;
utilities.lazyLoad(exports, ["getSecureRuleFilesystem","getSecureRuleFilesystemOutput"], () => require("./getSecureRuleFilesystem"));

export { GetSecureRuleNetworkArgs, GetSecureRuleNetworkResult, GetSecureRuleNetworkOutputArgs } from "./getSecureRuleNetwork";
export const getSecureRuleNetwork: typeof import("./getSecureRuleNetwork").getSecureRuleNetwork = null as any;
export const getSecureRuleNetworkOutput: typeof import("./getSecureRuleNetwork").getSecureRuleNetworkOutput = null as any;
utilities.lazyLoad(exports, ["getSecureRuleNetwork","getSecureRuleNetworkOutput"], () => require("./getSecureRuleNetwork"));

export { GetSecureRuleProcessArgs, GetSecureRuleProcessResult, GetSecureRuleProcessOutputArgs } from "./getSecureRuleProcess";
export const getSecureRuleProcess: typeof import("./getSecureRuleProcess").getSecureRuleProcess = null as any;
export const getSecureRuleProcessOutput: typeof import("./getSecureRuleProcess").getSecureRuleProcessOutput = null as any;
utilities.lazyLoad(exports, ["getSecureRuleProcess","getSecureRuleProcessOutput"], () => require("./getSecureRuleProcess"));

export { GetSecureRuleSyscallArgs, GetSecureRuleSyscallResult, GetSecureRuleSyscallOutputArgs } from "./getSecureRuleSyscall";
export const getSecureRuleSyscall: typeof import("./getSecureRuleSyscall").getSecureRuleSyscall = null as any;
export const getSecureRuleSyscallOutput: typeof import("./getSecureRuleSyscall").getSecureRuleSyscallOutput = null as any;
utilities.lazyLoad(exports, ["getSecureRuleSyscall","getSecureRuleSyscallOutput"], () => require("./getSecureRuleSyscall"));

export { GetSecureTenantExternalIdArgs, GetSecureTenantExternalIdResult, GetSecureTenantExternalIdOutputArgs } from "./getSecureTenantExternalId";
export const getSecureTenantExternalId: typeof import("./getSecureTenantExternalId").getSecureTenantExternalId = null as any;
export const getSecureTenantExternalIdOutput: typeof import("./getSecureTenantExternalId").getSecureTenantExternalIdOutput = null as any;
utilities.lazyLoad(exports, ["getSecureTenantExternalId","getSecureTenantExternalIdOutput"], () => require("./getSecureTenantExternalId"));

export { GetSecureTrustedAzureAppArgs, GetSecureTrustedAzureAppResult, GetSecureTrustedAzureAppOutputArgs } from "./getSecureTrustedAzureApp";
export const getSecureTrustedAzureApp: typeof import("./getSecureTrustedAzureApp").getSecureTrustedAzureApp = null as any;
export const getSecureTrustedAzureAppOutput: typeof import("./getSecureTrustedAzureApp").getSecureTrustedAzureAppOutput = null as any;
utilities.lazyLoad(exports, ["getSecureTrustedAzureApp","getSecureTrustedAzureAppOutput"], () => require("./getSecureTrustedAzureApp"));

export { GetSecureTrustedCloudIdentityArgs, GetSecureTrustedCloudIdentityResult, GetSecureTrustedCloudIdentityOutputArgs } from "./getSecureTrustedCloudIdentity";
export const getSecureTrustedCloudIdentity: typeof import("./getSecureTrustedCloudIdentity").getSecureTrustedCloudIdentity = null as any;
export const getSecureTrustedCloudIdentityOutput: typeof import("./getSecureTrustedCloudIdentity").getSecureTrustedCloudIdentityOutput = null as any;
utilities.lazyLoad(exports, ["getSecureTrustedCloudIdentity","getSecureTrustedCloudIdentityOutput"], () => require("./getSecureTrustedCloudIdentity"));

export { GetUserArgs, GetUserResult, GetUserOutputArgs } from "./getUser";
export const getUser: typeof import("./getUser").getUser = null as any;
export const getUserOutput: typeof import("./getUser").getUserOutput = null as any;
utilities.lazyLoad(exports, ["getUser","getUserOutput"], () => require("./getUser"));

export { GroupMappingArgs, GroupMappingState } from "./groupMapping";
export type GroupMapping = import("./groupMapping").GroupMapping;
export const GroupMapping: typeof import("./groupMapping").GroupMapping = null as any;
utilities.lazyLoad(exports, ["GroupMapping"], () => require("./groupMapping"));

export { GroupMappingConfigArgs, GroupMappingConfigState } from "./groupMappingConfig";
export type GroupMappingConfig = import("./groupMappingConfig").GroupMappingConfig;
export const GroupMappingConfig: typeof import("./groupMappingConfig").GroupMappingConfig = null as any;
utilities.lazyLoad(exports, ["GroupMappingConfig"], () => require("./groupMappingConfig"));

export { MonitorAlertAnomalyArgs, MonitorAlertAnomalyState } from "./monitorAlertAnomaly";
export type MonitorAlertAnomaly = import("./monitorAlertAnomaly").MonitorAlertAnomaly;
export const MonitorAlertAnomaly: typeof import("./monitorAlertAnomaly").MonitorAlertAnomaly = null as any;
utilities.lazyLoad(exports, ["MonitorAlertAnomaly"], () => require("./monitorAlertAnomaly"));

export { MonitorAlertDowntimeArgs, MonitorAlertDowntimeState } from "./monitorAlertDowntime";
export type MonitorAlertDowntime = import("./monitorAlertDowntime").MonitorAlertDowntime;
export const MonitorAlertDowntime: typeof import("./monitorAlertDowntime").MonitorAlertDowntime = null as any;
utilities.lazyLoad(exports, ["MonitorAlertDowntime"], () => require("./monitorAlertDowntime"));

export { MonitorAlertEventArgs, MonitorAlertEventState } from "./monitorAlertEvent";
export type MonitorAlertEvent = import("./monitorAlertEvent").MonitorAlertEvent;
export const MonitorAlertEvent: typeof import("./monitorAlertEvent").MonitorAlertEvent = null as any;
utilities.lazyLoad(exports, ["MonitorAlertEvent"], () => require("./monitorAlertEvent"));

export { MonitorAlertGroupOutlierArgs, MonitorAlertGroupOutlierState } from "./monitorAlertGroupOutlier";
export type MonitorAlertGroupOutlier = import("./monitorAlertGroupOutlier").MonitorAlertGroupOutlier;
export const MonitorAlertGroupOutlier: typeof import("./monitorAlertGroupOutlier").MonitorAlertGroupOutlier = null as any;
utilities.lazyLoad(exports, ["MonitorAlertGroupOutlier"], () => require("./monitorAlertGroupOutlier"));

export { MonitorAlertMetricArgs, MonitorAlertMetricState } from "./monitorAlertMetric";
export type MonitorAlertMetric = import("./monitorAlertMetric").MonitorAlertMetric;
export const MonitorAlertMetric: typeof import("./monitorAlertMetric").MonitorAlertMetric = null as any;
utilities.lazyLoad(exports, ["MonitorAlertMetric"], () => require("./monitorAlertMetric"));

export { MonitorAlertPromqlArgs, MonitorAlertPromqlState } from "./monitorAlertPromql";
export type MonitorAlertPromql = import("./monitorAlertPromql").MonitorAlertPromql;
export const MonitorAlertPromql: typeof import("./monitorAlertPromql").MonitorAlertPromql = null as any;
utilities.lazyLoad(exports, ["MonitorAlertPromql"], () => require("./monitorAlertPromql"));

export { MonitorAlertV2ChangeArgs, MonitorAlertV2ChangeState } from "./monitorAlertV2Change";
export type MonitorAlertV2Change = import("./monitorAlertV2Change").MonitorAlertV2Change;
export const MonitorAlertV2Change: typeof import("./monitorAlertV2Change").MonitorAlertV2Change = null as any;
utilities.lazyLoad(exports, ["MonitorAlertV2Change"], () => require("./monitorAlertV2Change"));

export { MonitorAlertV2DowntimeArgs, MonitorAlertV2DowntimeState } from "./monitorAlertV2Downtime";
export type MonitorAlertV2Downtime = import("./monitorAlertV2Downtime").MonitorAlertV2Downtime;
export const MonitorAlertV2Downtime: typeof import("./monitorAlertV2Downtime").MonitorAlertV2Downtime = null as any;
utilities.lazyLoad(exports, ["MonitorAlertV2Downtime"], () => require("./monitorAlertV2Downtime"));

export { MonitorAlertV2EventArgs, MonitorAlertV2EventState } from "./monitorAlertV2Event";
export type MonitorAlertV2Event = import("./monitorAlertV2Event").MonitorAlertV2Event;
export const MonitorAlertV2Event: typeof import("./monitorAlertV2Event").MonitorAlertV2Event = null as any;
utilities.lazyLoad(exports, ["MonitorAlertV2Event"], () => require("./monitorAlertV2Event"));

export { MonitorAlertV2FormBasedPrometheusArgs, MonitorAlertV2FormBasedPrometheusState } from "./monitorAlertV2FormBasedPrometheus";
export type MonitorAlertV2FormBasedPrometheus = import("./monitorAlertV2FormBasedPrometheus").MonitorAlertV2FormBasedPrometheus;
export const MonitorAlertV2FormBasedPrometheus: typeof import("./monitorAlertV2FormBasedPrometheus").MonitorAlertV2FormBasedPrometheus = null as any;
utilities.lazyLoad(exports, ["MonitorAlertV2FormBasedPrometheus"], () => require("./monitorAlertV2FormBasedPrometheus"));

export { MonitorAlertV2GroupOutlierArgs, MonitorAlertV2GroupOutlierState } from "./monitorAlertV2GroupOutlier";
export type MonitorAlertV2GroupOutlier = import("./monitorAlertV2GroupOutlier").MonitorAlertV2GroupOutlier;
export const MonitorAlertV2GroupOutlier: typeof import("./monitorAlertV2GroupOutlier").MonitorAlertV2GroupOutlier = null as any;
utilities.lazyLoad(exports, ["MonitorAlertV2GroupOutlier"], () => require("./monitorAlertV2GroupOutlier"));

export { MonitorAlertV2MetricArgs, MonitorAlertV2MetricState } from "./monitorAlertV2Metric";
export type MonitorAlertV2Metric = import("./monitorAlertV2Metric").MonitorAlertV2Metric;
export const MonitorAlertV2Metric: typeof import("./monitorAlertV2Metric").MonitorAlertV2Metric = null as any;
utilities.lazyLoad(exports, ["MonitorAlertV2Metric"], () => require("./monitorAlertV2Metric"));

export { MonitorAlertV2PrometheusArgs, MonitorAlertV2PrometheusState } from "./monitorAlertV2Prometheus";
export type MonitorAlertV2Prometheus = import("./monitorAlertV2Prometheus").MonitorAlertV2Prometheus;
export const MonitorAlertV2Prometheus: typeof import("./monitorAlertV2Prometheus").MonitorAlertV2Prometheus = null as any;
utilities.lazyLoad(exports, ["MonitorAlertV2Prometheus"], () => require("./monitorAlertV2Prometheus"));

export { MonitorCloudAccountArgs, MonitorCloudAccountState } from "./monitorCloudAccount";
export type MonitorCloudAccount = import("./monitorCloudAccount").MonitorCloudAccount;
export const MonitorCloudAccount: typeof import("./monitorCloudAccount").MonitorCloudAccount = null as any;
utilities.lazyLoad(exports, ["MonitorCloudAccount"], () => require("./monitorCloudAccount"));

export { MonitorDashboardArgs, MonitorDashboardState } from "./monitorDashboard";
export type MonitorDashboard = import("./monitorDashboard").MonitorDashboard;
export const MonitorDashboard: typeof import("./monitorDashboard").MonitorDashboard = null as any;
utilities.lazyLoad(exports, ["MonitorDashboard"], () => require("./monitorDashboard"));

export { MonitorInhibitionRuleArgs, MonitorInhibitionRuleState } from "./monitorInhibitionRule";
export type MonitorInhibitionRule = import("./monitorInhibitionRule").MonitorInhibitionRule;
export const MonitorInhibitionRule: typeof import("./monitorInhibitionRule").MonitorInhibitionRule = null as any;
utilities.lazyLoad(exports, ["MonitorInhibitionRule"], () => require("./monitorInhibitionRule"));

export { MonitorNotificationChannelCustomWebhookArgs, MonitorNotificationChannelCustomWebhookState } from "./monitorNotificationChannelCustomWebhook";
export type MonitorNotificationChannelCustomWebhook = import("./monitorNotificationChannelCustomWebhook").MonitorNotificationChannelCustomWebhook;
export const MonitorNotificationChannelCustomWebhook: typeof import("./monitorNotificationChannelCustomWebhook").MonitorNotificationChannelCustomWebhook = null as any;
utilities.lazyLoad(exports, ["MonitorNotificationChannelCustomWebhook"], () => require("./monitorNotificationChannelCustomWebhook"));

export { MonitorNotificationChannelEmailArgs, MonitorNotificationChannelEmailState } from "./monitorNotificationChannelEmail";
export type MonitorNotificationChannelEmail = import("./monitorNotificationChannelEmail").MonitorNotificationChannelEmail;
export const MonitorNotificationChannelEmail: typeof import("./monitorNotificationChannelEmail").MonitorNotificationChannelEmail = null as any;
utilities.lazyLoad(exports, ["MonitorNotificationChannelEmail"], () => require("./monitorNotificationChannelEmail"));

export { MonitorNotificationChannelGoogleChatArgs, MonitorNotificationChannelGoogleChatState } from "./monitorNotificationChannelGoogleChat";
export type MonitorNotificationChannelGoogleChat = import("./monitorNotificationChannelGoogleChat").MonitorNotificationChannelGoogleChat;
export const MonitorNotificationChannelGoogleChat: typeof import("./monitorNotificationChannelGoogleChat").MonitorNotificationChannelGoogleChat = null as any;
utilities.lazyLoad(exports, ["MonitorNotificationChannelGoogleChat"], () => require("./monitorNotificationChannelGoogleChat"));

export { MonitorNotificationChannelIbmEventNotificationArgs, MonitorNotificationChannelIbmEventNotificationState } from "./monitorNotificationChannelIbmEventNotification";
export type MonitorNotificationChannelIbmEventNotification = import("./monitorNotificationChannelIbmEventNotification").MonitorNotificationChannelIbmEventNotification;
export const MonitorNotificationChannelIbmEventNotification: typeof import("./monitorNotificationChannelIbmEventNotification").MonitorNotificationChannelIbmEventNotification = null as any;
utilities.lazyLoad(exports, ["MonitorNotificationChannelIbmEventNotification"], () => require("./monitorNotificationChannelIbmEventNotification"));

export { MonitorNotificationChannelIbmFunctionArgs, MonitorNotificationChannelIbmFunctionState } from "./monitorNotificationChannelIbmFunction";
export type MonitorNotificationChannelIbmFunction = import("./monitorNotificationChannelIbmFunction").MonitorNotificationChannelIbmFunction;
export const MonitorNotificationChannelIbmFunction: typeof import("./monitorNotificationChannelIbmFunction").MonitorNotificationChannelIbmFunction = null as any;
utilities.lazyLoad(exports, ["MonitorNotificationChannelIbmFunction"], () => require("./monitorNotificationChannelIbmFunction"));

export { MonitorNotificationChannelMsteamsArgs, MonitorNotificationChannelMsteamsState } from "./monitorNotificationChannelMsteams";
export type MonitorNotificationChannelMsteams = import("./monitorNotificationChannelMsteams").MonitorNotificationChannelMsteams;
export const MonitorNotificationChannelMsteams: typeof import("./monitorNotificationChannelMsteams").MonitorNotificationChannelMsteams = null as any;
utilities.lazyLoad(exports, ["MonitorNotificationChannelMsteams"], () => require("./monitorNotificationChannelMsteams"));

export { MonitorNotificationChannelOpsgenieArgs, MonitorNotificationChannelOpsgenieState } from "./monitorNotificationChannelOpsgenie";
export type MonitorNotificationChannelOpsgenie = import("./monitorNotificationChannelOpsgenie").MonitorNotificationChannelOpsgenie;
export const MonitorNotificationChannelOpsgenie: typeof import("./monitorNotificationChannelOpsgenie").MonitorNotificationChannelOpsgenie = null as any;
utilities.lazyLoad(exports, ["MonitorNotificationChannelOpsgenie"], () => require("./monitorNotificationChannelOpsgenie"));

export { MonitorNotificationChannelPagerdutyArgs, MonitorNotificationChannelPagerdutyState } from "./monitorNotificationChannelPagerduty";
export type MonitorNotificationChannelPagerduty = import("./monitorNotificationChannelPagerduty").MonitorNotificationChannelPagerduty;
export const MonitorNotificationChannelPagerduty: typeof import("./monitorNotificationChannelPagerduty").MonitorNotificationChannelPagerduty = null as any;
utilities.lazyLoad(exports, ["MonitorNotificationChannelPagerduty"], () => require("./monitorNotificationChannelPagerduty"));

export { MonitorNotificationChannelPrometheusAlertManagerArgs, MonitorNotificationChannelPrometheusAlertManagerState } from "./monitorNotificationChannelPrometheusAlertManager";
export type MonitorNotificationChannelPrometheusAlertManager = import("./monitorNotificationChannelPrometheusAlertManager").MonitorNotificationChannelPrometheusAlertManager;
export const MonitorNotificationChannelPrometheusAlertManager: typeof import("./monitorNotificationChannelPrometheusAlertManager").MonitorNotificationChannelPrometheusAlertManager = null as any;
utilities.lazyLoad(exports, ["MonitorNotificationChannelPrometheusAlertManager"], () => require("./monitorNotificationChannelPrometheusAlertManager"));

export { MonitorNotificationChannelSlackArgs, MonitorNotificationChannelSlackState } from "./monitorNotificationChannelSlack";
export type MonitorNotificationChannelSlack = import("./monitorNotificationChannelSlack").MonitorNotificationChannelSlack;
export const MonitorNotificationChannelSlack: typeof import("./monitorNotificationChannelSlack").MonitorNotificationChannelSlack = null as any;
utilities.lazyLoad(exports, ["MonitorNotificationChannelSlack"], () => require("./monitorNotificationChannelSlack"));

export { MonitorNotificationChannelSnsArgs, MonitorNotificationChannelSnsState } from "./monitorNotificationChannelSns";
export type MonitorNotificationChannelSns = import("./monitorNotificationChannelSns").MonitorNotificationChannelSns;
export const MonitorNotificationChannelSns: typeof import("./monitorNotificationChannelSns").MonitorNotificationChannelSns = null as any;
utilities.lazyLoad(exports, ["MonitorNotificationChannelSns"], () => require("./monitorNotificationChannelSns"));

export { MonitorNotificationChannelTeamEmailArgs, MonitorNotificationChannelTeamEmailState } from "./monitorNotificationChannelTeamEmail";
export type MonitorNotificationChannelTeamEmail = import("./monitorNotificationChannelTeamEmail").MonitorNotificationChannelTeamEmail;
export const MonitorNotificationChannelTeamEmail: typeof import("./monitorNotificationChannelTeamEmail").MonitorNotificationChannelTeamEmail = null as any;
utilities.lazyLoad(exports, ["MonitorNotificationChannelTeamEmail"], () => require("./monitorNotificationChannelTeamEmail"));

export { MonitorNotificationChannelVictoropsArgs, MonitorNotificationChannelVictoropsState } from "./monitorNotificationChannelVictorops";
export type MonitorNotificationChannelVictorops = import("./monitorNotificationChannelVictorops").MonitorNotificationChannelVictorops;
export const MonitorNotificationChannelVictorops: typeof import("./monitorNotificationChannelVictorops").MonitorNotificationChannelVictorops = null as any;
utilities.lazyLoad(exports, ["MonitorNotificationChannelVictorops"], () => require("./monitorNotificationChannelVictorops"));

export { MonitorNotificationChannelWebhookArgs, MonitorNotificationChannelWebhookState } from "./monitorNotificationChannelWebhook";
export type MonitorNotificationChannelWebhook = import("./monitorNotificationChannelWebhook").MonitorNotificationChannelWebhook;
export const MonitorNotificationChannelWebhook: typeof import("./monitorNotificationChannelWebhook").MonitorNotificationChannelWebhook = null as any;
utilities.lazyLoad(exports, ["MonitorNotificationChannelWebhook"], () => require("./monitorNotificationChannelWebhook"));

export { MonitorSilenceRuleArgs, MonitorSilenceRuleState } from "./monitorSilenceRule";
export type MonitorSilenceRule = import("./monitorSilenceRule").MonitorSilenceRule;
export const MonitorSilenceRule: typeof import("./monitorSilenceRule").MonitorSilenceRule = null as any;
utilities.lazyLoad(exports, ["MonitorSilenceRule"], () => require("./monitorSilenceRule"));

export { MonitorTeamArgs, MonitorTeamState } from "./monitorTeam";
export type MonitorTeam = import("./monitorTeam").MonitorTeam;
export const MonitorTeam: typeof import("./monitorTeam").MonitorTeam = null as any;
utilities.lazyLoad(exports, ["MonitorTeam"], () => require("./monitorTeam"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { SecureAwsMlPolicyArgs, SecureAwsMlPolicyState } from "./secureAwsMlPolicy";
export type SecureAwsMlPolicy = import("./secureAwsMlPolicy").SecureAwsMlPolicy;
export const SecureAwsMlPolicy: typeof import("./secureAwsMlPolicy").SecureAwsMlPolicy = null as any;
utilities.lazyLoad(exports, ["SecureAwsMlPolicy"], () => require("./secureAwsMlPolicy"));

export { SecureCloudAccountArgs, SecureCloudAccountState } from "./secureCloudAccount";
export type SecureCloudAccount = import("./secureCloudAccount").SecureCloudAccount;
export const SecureCloudAccount: typeof import("./secureCloudAccount").SecureCloudAccount = null as any;
utilities.lazyLoad(exports, ["SecureCloudAccount"], () => require("./secureCloudAccount"));

export { SecureCloudAuthAccountArgs, SecureCloudAuthAccountState } from "./secureCloudAuthAccount";
export type SecureCloudAuthAccount = import("./secureCloudAuthAccount").SecureCloudAuthAccount;
export const SecureCloudAuthAccount: typeof import("./secureCloudAuthAccount").SecureCloudAuthAccount = null as any;
utilities.lazyLoad(exports, ["SecureCloudAuthAccount"], () => require("./secureCloudAuthAccount"));

export { SecureCloudAuthAccountComponentArgs, SecureCloudAuthAccountComponentState } from "./secureCloudAuthAccountComponent";
export type SecureCloudAuthAccountComponent = import("./secureCloudAuthAccountComponent").SecureCloudAuthAccountComponent;
export const SecureCloudAuthAccountComponent: typeof import("./secureCloudAuthAccountComponent").SecureCloudAuthAccountComponent = null as any;
utilities.lazyLoad(exports, ["SecureCloudAuthAccountComponent"], () => require("./secureCloudAuthAccountComponent"));

export { SecureCloudAuthAccountFeatureArgs, SecureCloudAuthAccountFeatureState } from "./secureCloudAuthAccountFeature";
export type SecureCloudAuthAccountFeature = import("./secureCloudAuthAccountFeature").SecureCloudAuthAccountFeature;
export const SecureCloudAuthAccountFeature: typeof import("./secureCloudAuthAccountFeature").SecureCloudAuthAccountFeature = null as any;
utilities.lazyLoad(exports, ["SecureCloudAuthAccountFeature"], () => require("./secureCloudAuthAccountFeature"));

export { SecureCustomPolicyArgs, SecureCustomPolicyState } from "./secureCustomPolicy";
export type SecureCustomPolicy = import("./secureCustomPolicy").SecureCustomPolicy;
export const SecureCustomPolicy: typeof import("./secureCustomPolicy").SecureCustomPolicy = null as any;
utilities.lazyLoad(exports, ["SecureCustomPolicy"], () => require("./secureCustomPolicy"));

export { SecureDriftPolicyArgs, SecureDriftPolicyState } from "./secureDriftPolicy";
export type SecureDriftPolicy = import("./secureDriftPolicy").SecureDriftPolicy;
export const SecureDriftPolicy: typeof import("./secureDriftPolicy").SecureDriftPolicy = null as any;
utilities.lazyLoad(exports, ["SecureDriftPolicy"], () => require("./secureDriftPolicy"));

export { SecureListArgs, SecureListState } from "./secureList";
export type SecureList = import("./secureList").SecureList;
export const SecureList: typeof import("./secureList").SecureList = null as any;
utilities.lazyLoad(exports, ["SecureList"], () => require("./secureList"));

export { SecureMacroArgs, SecureMacroState } from "./secureMacro";
export type SecureMacro = import("./secureMacro").SecureMacro;
export const SecureMacro: typeof import("./secureMacro").SecureMacro = null as any;
utilities.lazyLoad(exports, ["SecureMacro"], () => require("./secureMacro"));

export { SecureMalwarePolicyArgs, SecureMalwarePolicyState } from "./secureMalwarePolicy";
export type SecureMalwarePolicy = import("./secureMalwarePolicy").SecureMalwarePolicy;
export const SecureMalwarePolicy: typeof import("./secureMalwarePolicy").SecureMalwarePolicy = null as any;
utilities.lazyLoad(exports, ["SecureMalwarePolicy"], () => require("./secureMalwarePolicy"));

export { SecureManagedPolicyArgs, SecureManagedPolicyState } from "./secureManagedPolicy";
export type SecureManagedPolicy = import("./secureManagedPolicy").SecureManagedPolicy;
export const SecureManagedPolicy: typeof import("./secureManagedPolicy").SecureManagedPolicy = null as any;
utilities.lazyLoad(exports, ["SecureManagedPolicy"], () => require("./secureManagedPolicy"));

export { SecureManagedRulesetArgs, SecureManagedRulesetState } from "./secureManagedRuleset";
export type SecureManagedRuleset = import("./secureManagedRuleset").SecureManagedRuleset;
export const SecureManagedRuleset: typeof import("./secureManagedRuleset").SecureManagedRuleset = null as any;
utilities.lazyLoad(exports, ["SecureManagedRuleset"], () => require("./secureManagedRuleset"));

export { SecureMlPolicyArgs, SecureMlPolicyState } from "./secureMlPolicy";
export type SecureMlPolicy = import("./secureMlPolicy").SecureMlPolicy;
export const SecureMlPolicy: typeof import("./secureMlPolicy").SecureMlPolicy = null as any;
utilities.lazyLoad(exports, ["SecureMlPolicy"], () => require("./secureMlPolicy"));

export { SecureNotificationChannelEmailArgs, SecureNotificationChannelEmailState } from "./secureNotificationChannelEmail";
export type SecureNotificationChannelEmail = import("./secureNotificationChannelEmail").SecureNotificationChannelEmail;
export const SecureNotificationChannelEmail: typeof import("./secureNotificationChannelEmail").SecureNotificationChannelEmail = null as any;
utilities.lazyLoad(exports, ["SecureNotificationChannelEmail"], () => require("./secureNotificationChannelEmail"));

export { SecureNotificationChannelMsteamsArgs, SecureNotificationChannelMsteamsState } from "./secureNotificationChannelMsteams";
export type SecureNotificationChannelMsteams = import("./secureNotificationChannelMsteams").SecureNotificationChannelMsteams;
export const SecureNotificationChannelMsteams: typeof import("./secureNotificationChannelMsteams").SecureNotificationChannelMsteams = null as any;
utilities.lazyLoad(exports, ["SecureNotificationChannelMsteams"], () => require("./secureNotificationChannelMsteams"));

export { SecureNotificationChannelOpsgenieArgs, SecureNotificationChannelOpsgenieState } from "./secureNotificationChannelOpsgenie";
export type SecureNotificationChannelOpsgenie = import("./secureNotificationChannelOpsgenie").SecureNotificationChannelOpsgenie;
export const SecureNotificationChannelOpsgenie: typeof import("./secureNotificationChannelOpsgenie").SecureNotificationChannelOpsgenie = null as any;
utilities.lazyLoad(exports, ["SecureNotificationChannelOpsgenie"], () => require("./secureNotificationChannelOpsgenie"));

export { SecureNotificationChannelPagerdutyArgs, SecureNotificationChannelPagerdutyState } from "./secureNotificationChannelPagerduty";
export type SecureNotificationChannelPagerduty = import("./secureNotificationChannelPagerduty").SecureNotificationChannelPagerduty;
export const SecureNotificationChannelPagerduty: typeof import("./secureNotificationChannelPagerduty").SecureNotificationChannelPagerduty = null as any;
utilities.lazyLoad(exports, ["SecureNotificationChannelPagerduty"], () => require("./secureNotificationChannelPagerduty"));

export { SecureNotificationChannelPrometheusAlertManagerArgs, SecureNotificationChannelPrometheusAlertManagerState } from "./secureNotificationChannelPrometheusAlertManager";
export type SecureNotificationChannelPrometheusAlertManager = import("./secureNotificationChannelPrometheusAlertManager").SecureNotificationChannelPrometheusAlertManager;
export const SecureNotificationChannelPrometheusAlertManager: typeof import("./secureNotificationChannelPrometheusAlertManager").SecureNotificationChannelPrometheusAlertManager = null as any;
utilities.lazyLoad(exports, ["SecureNotificationChannelPrometheusAlertManager"], () => require("./secureNotificationChannelPrometheusAlertManager"));

export { SecureNotificationChannelSlackArgs, SecureNotificationChannelSlackState } from "./secureNotificationChannelSlack";
export type SecureNotificationChannelSlack = import("./secureNotificationChannelSlack").SecureNotificationChannelSlack;
export const SecureNotificationChannelSlack: typeof import("./secureNotificationChannelSlack").SecureNotificationChannelSlack = null as any;
utilities.lazyLoad(exports, ["SecureNotificationChannelSlack"], () => require("./secureNotificationChannelSlack"));

export { SecureNotificationChannelSnsArgs, SecureNotificationChannelSnsState } from "./secureNotificationChannelSns";
export type SecureNotificationChannelSns = import("./secureNotificationChannelSns").SecureNotificationChannelSns;
export const SecureNotificationChannelSns: typeof import("./secureNotificationChannelSns").SecureNotificationChannelSns = null as any;
utilities.lazyLoad(exports, ["SecureNotificationChannelSns"], () => require("./secureNotificationChannelSns"));

export { SecureNotificationChannelTeamEmailArgs, SecureNotificationChannelTeamEmailState } from "./secureNotificationChannelTeamEmail";
export type SecureNotificationChannelTeamEmail = import("./secureNotificationChannelTeamEmail").SecureNotificationChannelTeamEmail;
export const SecureNotificationChannelTeamEmail: typeof import("./secureNotificationChannelTeamEmail").SecureNotificationChannelTeamEmail = null as any;
utilities.lazyLoad(exports, ["SecureNotificationChannelTeamEmail"], () => require("./secureNotificationChannelTeamEmail"));

export { SecureNotificationChannelVictoropsArgs, SecureNotificationChannelVictoropsState } from "./secureNotificationChannelVictorops";
export type SecureNotificationChannelVictorops = import("./secureNotificationChannelVictorops").SecureNotificationChannelVictorops;
export const SecureNotificationChannelVictorops: typeof import("./secureNotificationChannelVictorops").SecureNotificationChannelVictorops = null as any;
utilities.lazyLoad(exports, ["SecureNotificationChannelVictorops"], () => require("./secureNotificationChannelVictorops"));

export { SecureNotificationChannelWebhookArgs, SecureNotificationChannelWebhookState } from "./secureNotificationChannelWebhook";
export type SecureNotificationChannelWebhook = import("./secureNotificationChannelWebhook").SecureNotificationChannelWebhook;
export const SecureNotificationChannelWebhook: typeof import("./secureNotificationChannelWebhook").SecureNotificationChannelWebhook = null as any;
utilities.lazyLoad(exports, ["SecureNotificationChannelWebhook"], () => require("./secureNotificationChannelWebhook"));

export { SecureOrganizationArgs, SecureOrganizationState } from "./secureOrganization";
export type SecureOrganization = import("./secureOrganization").SecureOrganization;
export const SecureOrganization: typeof import("./secureOrganization").SecureOrganization = null as any;
utilities.lazyLoad(exports, ["SecureOrganization"], () => require("./secureOrganization"));

export { SecurePolicyArgs, SecurePolicyState } from "./securePolicy";
export type SecurePolicy = import("./securePolicy").SecurePolicy;
export const SecurePolicy: typeof import("./securePolicy").SecurePolicy = null as any;
utilities.lazyLoad(exports, ["SecurePolicy"], () => require("./securePolicy"));

export { SecurePostureControlArgs, SecurePostureControlState } from "./securePostureControl";
export type SecurePostureControl = import("./securePostureControl").SecurePostureControl;
export const SecurePostureControl: typeof import("./securePostureControl").SecurePostureControl = null as any;
utilities.lazyLoad(exports, ["SecurePostureControl"], () => require("./securePostureControl"));

export { SecurePosturePolicyArgs, SecurePosturePolicyState } from "./securePosturePolicy";
export type SecurePosturePolicy = import("./securePosturePolicy").SecurePosturePolicy;
export const SecurePosturePolicy: typeof import("./securePosturePolicy").SecurePosturePolicy = null as any;
utilities.lazyLoad(exports, ["SecurePosturePolicy"], () => require("./securePosturePolicy"));

export { SecurePostureZoneArgs, SecurePostureZoneState } from "./securePostureZone";
export type SecurePostureZone = import("./securePostureZone").SecurePostureZone;
export const SecurePostureZone: typeof import("./securePostureZone").SecurePostureZone = null as any;
utilities.lazyLoad(exports, ["SecurePostureZone"], () => require("./securePostureZone"));

export { SecureRuleContainerArgs, SecureRuleContainerState } from "./secureRuleContainer";
export type SecureRuleContainer = import("./secureRuleContainer").SecureRuleContainer;
export const SecureRuleContainer: typeof import("./secureRuleContainer").SecureRuleContainer = null as any;
utilities.lazyLoad(exports, ["SecureRuleContainer"], () => require("./secureRuleContainer"));

export { SecureRuleFalcoArgs, SecureRuleFalcoState } from "./secureRuleFalco";
export type SecureRuleFalco = import("./secureRuleFalco").SecureRuleFalco;
export const SecureRuleFalco: typeof import("./secureRuleFalco").SecureRuleFalco = null as any;
utilities.lazyLoad(exports, ["SecureRuleFalco"], () => require("./secureRuleFalco"));

export { SecureRuleFilesystemArgs, SecureRuleFilesystemState } from "./secureRuleFilesystem";
export type SecureRuleFilesystem = import("./secureRuleFilesystem").SecureRuleFilesystem;
export const SecureRuleFilesystem: typeof import("./secureRuleFilesystem").SecureRuleFilesystem = null as any;
utilities.lazyLoad(exports, ["SecureRuleFilesystem"], () => require("./secureRuleFilesystem"));

export { SecureRuleNetworkArgs, SecureRuleNetworkState } from "./secureRuleNetwork";
export type SecureRuleNetwork = import("./secureRuleNetwork").SecureRuleNetwork;
export const SecureRuleNetwork: typeof import("./secureRuleNetwork").SecureRuleNetwork = null as any;
utilities.lazyLoad(exports, ["SecureRuleNetwork"], () => require("./secureRuleNetwork"));

export { SecureRuleProcessArgs, SecureRuleProcessState } from "./secureRuleProcess";
export type SecureRuleProcess = import("./secureRuleProcess").SecureRuleProcess;
export const SecureRuleProcess: typeof import("./secureRuleProcess").SecureRuleProcess = null as any;
utilities.lazyLoad(exports, ["SecureRuleProcess"], () => require("./secureRuleProcess"));

export { SecureRuleSyscallArgs, SecureRuleSyscallState } from "./secureRuleSyscall";
export type SecureRuleSyscall = import("./secureRuleSyscall").SecureRuleSyscall;
export const SecureRuleSyscall: typeof import("./secureRuleSyscall").SecureRuleSyscall = null as any;
utilities.lazyLoad(exports, ["SecureRuleSyscall"], () => require("./secureRuleSyscall"));

export { SecureScanningPolicyArgs, SecureScanningPolicyState } from "./secureScanningPolicy";
export type SecureScanningPolicy = import("./secureScanningPolicy").SecureScanningPolicy;
export const SecureScanningPolicy: typeof import("./secureScanningPolicy").SecureScanningPolicy = null as any;
utilities.lazyLoad(exports, ["SecureScanningPolicy"], () => require("./secureScanningPolicy"));

export { SecureScanningPolicyAssignmentArgs, SecureScanningPolicyAssignmentState } from "./secureScanningPolicyAssignment";
export type SecureScanningPolicyAssignment = import("./secureScanningPolicyAssignment").SecureScanningPolicyAssignment;
export const SecureScanningPolicyAssignment: typeof import("./secureScanningPolicyAssignment").SecureScanningPolicyAssignment = null as any;
utilities.lazyLoad(exports, ["SecureScanningPolicyAssignment"], () => require("./secureScanningPolicyAssignment"));

export { SecureTeamArgs, SecureTeamState } from "./secureTeam";
export type SecureTeam = import("./secureTeam").SecureTeam;
export const SecureTeam: typeof import("./secureTeam").SecureTeam = null as any;
utilities.lazyLoad(exports, ["SecureTeam"], () => require("./secureTeam"));

export { SecureVulnerabilityExceptionArgs, SecureVulnerabilityExceptionState } from "./secureVulnerabilityException";
export type SecureVulnerabilityException = import("./secureVulnerabilityException").SecureVulnerabilityException;
export const SecureVulnerabilityException: typeof import("./secureVulnerabilityException").SecureVulnerabilityException = null as any;
utilities.lazyLoad(exports, ["SecureVulnerabilityException"], () => require("./secureVulnerabilityException"));

export { SecureVulnerabilityExceptionListArgs, SecureVulnerabilityExceptionListState } from "./secureVulnerabilityExceptionList";
export type SecureVulnerabilityExceptionList = import("./secureVulnerabilityExceptionList").SecureVulnerabilityExceptionList;
export const SecureVulnerabilityExceptionList: typeof import("./secureVulnerabilityExceptionList").SecureVulnerabilityExceptionList = null as any;
utilities.lazyLoad(exports, ["SecureVulnerabilityExceptionList"], () => require("./secureVulnerabilityExceptionList"));

export { TeamServiceAccountArgs, TeamServiceAccountState } from "./teamServiceAccount";
export type TeamServiceAccount = import("./teamServiceAccount").TeamServiceAccount;
export const TeamServiceAccount: typeof import("./teamServiceAccount").TeamServiceAccount = null as any;
utilities.lazyLoad(exports, ["TeamServiceAccount"], () => require("./teamServiceAccount"));

export { UserArgs, UserState } from "./user";
export type User = import("./user").User;
export const User: typeof import("./user").User = null as any;
utilities.lazyLoad(exports, ["User"], () => require("./user"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "sysdig:index/agentAccessKey:AgentAccessKey":
                return new AgentAccessKey(name, <any>undefined, { urn })
            case "sysdig:index/customRole:CustomRole":
                return new CustomRole(name, <any>undefined, { urn })
            case "sysdig:index/groupMapping:GroupMapping":
                return new GroupMapping(name, <any>undefined, { urn })
            case "sysdig:index/groupMappingConfig:GroupMappingConfig":
                return new GroupMappingConfig(name, <any>undefined, { urn })
            case "sysdig:index/monitorAlertAnomaly:MonitorAlertAnomaly":
                return new MonitorAlertAnomaly(name, <any>undefined, { urn })
            case "sysdig:index/monitorAlertDowntime:MonitorAlertDowntime":
                return new MonitorAlertDowntime(name, <any>undefined, { urn })
            case "sysdig:index/monitorAlertEvent:MonitorAlertEvent":
                return new MonitorAlertEvent(name, <any>undefined, { urn })
            case "sysdig:index/monitorAlertGroupOutlier:MonitorAlertGroupOutlier":
                return new MonitorAlertGroupOutlier(name, <any>undefined, { urn })
            case "sysdig:index/monitorAlertMetric:MonitorAlertMetric":
                return new MonitorAlertMetric(name, <any>undefined, { urn })
            case "sysdig:index/monitorAlertPromql:MonitorAlertPromql":
                return new MonitorAlertPromql(name, <any>undefined, { urn })
            case "sysdig:index/monitorAlertV2Change:MonitorAlertV2Change":
                return new MonitorAlertV2Change(name, <any>undefined, { urn })
            case "sysdig:index/monitorAlertV2Downtime:MonitorAlertV2Downtime":
                return new MonitorAlertV2Downtime(name, <any>undefined, { urn })
            case "sysdig:index/monitorAlertV2Event:MonitorAlertV2Event":
                return new MonitorAlertV2Event(name, <any>undefined, { urn })
            case "sysdig:index/monitorAlertV2FormBasedPrometheus:MonitorAlertV2FormBasedPrometheus":
                return new MonitorAlertV2FormBasedPrometheus(name, <any>undefined, { urn })
            case "sysdig:index/monitorAlertV2GroupOutlier:MonitorAlertV2GroupOutlier":
                return new MonitorAlertV2GroupOutlier(name, <any>undefined, { urn })
            case "sysdig:index/monitorAlertV2Metric:MonitorAlertV2Metric":
                return new MonitorAlertV2Metric(name, <any>undefined, { urn })
            case "sysdig:index/monitorAlertV2Prometheus:MonitorAlertV2Prometheus":
                return new MonitorAlertV2Prometheus(name, <any>undefined, { urn })
            case "sysdig:index/monitorCloudAccount:MonitorCloudAccount":
                return new MonitorCloudAccount(name, <any>undefined, { urn })
            case "sysdig:index/monitorDashboard:MonitorDashboard":
                return new MonitorDashboard(name, <any>undefined, { urn })
            case "sysdig:index/monitorInhibitionRule:MonitorInhibitionRule":
                return new MonitorInhibitionRule(name, <any>undefined, { urn })
            case "sysdig:index/monitorNotificationChannelCustomWebhook:MonitorNotificationChannelCustomWebhook":
                return new MonitorNotificationChannelCustomWebhook(name, <any>undefined, { urn })
            case "sysdig:index/monitorNotificationChannelEmail:MonitorNotificationChannelEmail":
                return new MonitorNotificationChannelEmail(name, <any>undefined, { urn })
            case "sysdig:index/monitorNotificationChannelGoogleChat:MonitorNotificationChannelGoogleChat":
                return new MonitorNotificationChannelGoogleChat(name, <any>undefined, { urn })
            case "sysdig:index/monitorNotificationChannelIbmEventNotification:MonitorNotificationChannelIbmEventNotification":
                return new MonitorNotificationChannelIbmEventNotification(name, <any>undefined, { urn })
            case "sysdig:index/monitorNotificationChannelIbmFunction:MonitorNotificationChannelIbmFunction":
                return new MonitorNotificationChannelIbmFunction(name, <any>undefined, { urn })
            case "sysdig:index/monitorNotificationChannelMsteams:MonitorNotificationChannelMsteams":
                return new MonitorNotificationChannelMsteams(name, <any>undefined, { urn })
            case "sysdig:index/monitorNotificationChannelOpsgenie:MonitorNotificationChannelOpsgenie":
                return new MonitorNotificationChannelOpsgenie(name, <any>undefined, { urn })
            case "sysdig:index/monitorNotificationChannelPagerduty:MonitorNotificationChannelPagerduty":
                return new MonitorNotificationChannelPagerduty(name, <any>undefined, { urn })
            case "sysdig:index/monitorNotificationChannelPrometheusAlertManager:MonitorNotificationChannelPrometheusAlertManager":
                return new MonitorNotificationChannelPrometheusAlertManager(name, <any>undefined, { urn })
            case "sysdig:index/monitorNotificationChannelSlack:MonitorNotificationChannelSlack":
                return new MonitorNotificationChannelSlack(name, <any>undefined, { urn })
            case "sysdig:index/monitorNotificationChannelSns:MonitorNotificationChannelSns":
                return new MonitorNotificationChannelSns(name, <any>undefined, { urn })
            case "sysdig:index/monitorNotificationChannelTeamEmail:MonitorNotificationChannelTeamEmail":
                return new MonitorNotificationChannelTeamEmail(name, <any>undefined, { urn })
            case "sysdig:index/monitorNotificationChannelVictorops:MonitorNotificationChannelVictorops":
                return new MonitorNotificationChannelVictorops(name, <any>undefined, { urn })
            case "sysdig:index/monitorNotificationChannelWebhook:MonitorNotificationChannelWebhook":
                return new MonitorNotificationChannelWebhook(name, <any>undefined, { urn })
            case "sysdig:index/monitorSilenceRule:MonitorSilenceRule":
                return new MonitorSilenceRule(name, <any>undefined, { urn })
            case "sysdig:index/monitorTeam:MonitorTeam":
                return new MonitorTeam(name, <any>undefined, { urn })
            case "sysdig:index/secureAwsMlPolicy:SecureAwsMlPolicy":
                return new SecureAwsMlPolicy(name, <any>undefined, { urn })
            case "sysdig:index/secureCloudAccount:SecureCloudAccount":
                return new SecureCloudAccount(name, <any>undefined, { urn })
            case "sysdig:index/secureCloudAuthAccount:SecureCloudAuthAccount":
                return new SecureCloudAuthAccount(name, <any>undefined, { urn })
            case "sysdig:index/secureCloudAuthAccountComponent:SecureCloudAuthAccountComponent":
                return new SecureCloudAuthAccountComponent(name, <any>undefined, { urn })
            case "sysdig:index/secureCloudAuthAccountFeature:SecureCloudAuthAccountFeature":
                return new SecureCloudAuthAccountFeature(name, <any>undefined, { urn })
            case "sysdig:index/secureCustomPolicy:SecureCustomPolicy":
                return new SecureCustomPolicy(name, <any>undefined, { urn })
            case "sysdig:index/secureDriftPolicy:SecureDriftPolicy":
                return new SecureDriftPolicy(name, <any>undefined, { urn })
            case "sysdig:index/secureList:SecureList":
                return new SecureList(name, <any>undefined, { urn })
            case "sysdig:index/secureMacro:SecureMacro":
                return new SecureMacro(name, <any>undefined, { urn })
            case "sysdig:index/secureMalwarePolicy:SecureMalwarePolicy":
                return new SecureMalwarePolicy(name, <any>undefined, { urn })
            case "sysdig:index/secureManagedPolicy:SecureManagedPolicy":
                return new SecureManagedPolicy(name, <any>undefined, { urn })
            case "sysdig:index/secureManagedRuleset:SecureManagedRuleset":
                return new SecureManagedRuleset(name, <any>undefined, { urn })
            case "sysdig:index/secureMlPolicy:SecureMlPolicy":
                return new SecureMlPolicy(name, <any>undefined, { urn })
            case "sysdig:index/secureNotificationChannelEmail:SecureNotificationChannelEmail":
                return new SecureNotificationChannelEmail(name, <any>undefined, { urn })
            case "sysdig:index/secureNotificationChannelMsteams:SecureNotificationChannelMsteams":
                return new SecureNotificationChannelMsteams(name, <any>undefined, { urn })
            case "sysdig:index/secureNotificationChannelOpsgenie:SecureNotificationChannelOpsgenie":
                return new SecureNotificationChannelOpsgenie(name, <any>undefined, { urn })
            case "sysdig:index/secureNotificationChannelPagerduty:SecureNotificationChannelPagerduty":
                return new SecureNotificationChannelPagerduty(name, <any>undefined, { urn })
            case "sysdig:index/secureNotificationChannelPrometheusAlertManager:SecureNotificationChannelPrometheusAlertManager":
                return new SecureNotificationChannelPrometheusAlertManager(name, <any>undefined, { urn })
            case "sysdig:index/secureNotificationChannelSlack:SecureNotificationChannelSlack":
                return new SecureNotificationChannelSlack(name, <any>undefined, { urn })
            case "sysdig:index/secureNotificationChannelSns:SecureNotificationChannelSns":
                return new SecureNotificationChannelSns(name, <any>undefined, { urn })
            case "sysdig:index/secureNotificationChannelTeamEmail:SecureNotificationChannelTeamEmail":
                return new SecureNotificationChannelTeamEmail(name, <any>undefined, { urn })
            case "sysdig:index/secureNotificationChannelVictorops:SecureNotificationChannelVictorops":
                return new SecureNotificationChannelVictorops(name, <any>undefined, { urn })
            case "sysdig:index/secureNotificationChannelWebhook:SecureNotificationChannelWebhook":
                return new SecureNotificationChannelWebhook(name, <any>undefined, { urn })
            case "sysdig:index/secureOrganization:SecureOrganization":
                return new SecureOrganization(name, <any>undefined, { urn })
            case "sysdig:index/securePolicy:SecurePolicy":
                return new SecurePolicy(name, <any>undefined, { urn })
            case "sysdig:index/securePostureControl:SecurePostureControl":
                return new SecurePostureControl(name, <any>undefined, { urn })
            case "sysdig:index/securePosturePolicy:SecurePosturePolicy":
                return new SecurePosturePolicy(name, <any>undefined, { urn })
            case "sysdig:index/securePostureZone:SecurePostureZone":
                return new SecurePostureZone(name, <any>undefined, { urn })
            case "sysdig:index/secureRuleContainer:SecureRuleContainer":
                return new SecureRuleContainer(name, <any>undefined, { urn })
            case "sysdig:index/secureRuleFalco:SecureRuleFalco":
                return new SecureRuleFalco(name, <any>undefined, { urn })
            case "sysdig:index/secureRuleFilesystem:SecureRuleFilesystem":
                return new SecureRuleFilesystem(name, <any>undefined, { urn })
            case "sysdig:index/secureRuleNetwork:SecureRuleNetwork":
                return new SecureRuleNetwork(name, <any>undefined, { urn })
            case "sysdig:index/secureRuleProcess:SecureRuleProcess":
                return new SecureRuleProcess(name, <any>undefined, { urn })
            case "sysdig:index/secureRuleSyscall:SecureRuleSyscall":
                return new SecureRuleSyscall(name, <any>undefined, { urn })
            case "sysdig:index/secureScanningPolicy:SecureScanningPolicy":
                return new SecureScanningPolicy(name, <any>undefined, { urn })
            case "sysdig:index/secureScanningPolicyAssignment:SecureScanningPolicyAssignment":
                return new SecureScanningPolicyAssignment(name, <any>undefined, { urn })
            case "sysdig:index/secureTeam:SecureTeam":
                return new SecureTeam(name, <any>undefined, { urn })
            case "sysdig:index/secureVulnerabilityException:SecureVulnerabilityException":
                return new SecureVulnerabilityException(name, <any>undefined, { urn })
            case "sysdig:index/secureVulnerabilityExceptionList:SecureVulnerabilityExceptionList":
                return new SecureVulnerabilityExceptionList(name, <any>undefined, { urn })
            case "sysdig:index/teamServiceAccount:TeamServiceAccount":
                return new TeamServiceAccount(name, <any>undefined, { urn })
            case "sysdig:index/user:User":
                return new User(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("sysdig", "index/agentAccessKey", _module)
pulumi.runtime.registerResourceModule("sysdig", "index/customRole", _module)
pulumi.runtime.registerResourceModule("sysdig", "index/groupMapping", _module)
pulumi.runtime.registerResourceModule("sysdig", "index/groupMappingConfig", _module)
pulumi.runtime.registerResourceModule("sysdig", "index/monitorAlertAnomaly", _module)
pulumi.runtime.registerResourceModule("sysdig", "index/monitorAlertDowntime", _module)
pulumi.runtime.registerResourceModule("sysdig", "index/monitorAlertEvent", _module)
pulumi.runtime.registerResourceModule("sysdig", "index/monitorAlertGroupOutlier", _module)
pulumi.runtime.registerResourceModule("sysdig", "index/monitorAlertMetric", _module)
pulumi.runtime.registerResourceModule("sysdig", "index/monitorAlertPromql", _module)
pulumi.runtime.registerResourceModule("sysdig", "index/monitorAlertV2Change", _module)
pulumi.runtime.registerResourceModule("sysdig", "index/monitorAlertV2Downtime", _module)
pulumi.runtime.registerResourceModule("sysdig", "index/monitorAlertV2Event", _module)
pulumi.runtime.registerResourceModule("sysdig", "index/monitorAlertV2FormBasedPrometheus", _module)
pulumi.runtime.registerResourceModule("sysdig", "index/monitorAlertV2GroupOutlier", _module)
pulumi.runtime.registerResourceModule("sysdig", "index/monitorAlertV2Metric", _module)
pulumi.runtime.registerResourceModule("sysdig", "index/monitorAlertV2Prometheus", _module)
pulumi.runtime.registerResourceModule("sysdig", "index/monitorCloudAccount", _module)
pulumi.runtime.registerResourceModule("sysdig", "index/monitorDashboard", _module)
pulumi.runtime.registerResourceModule("sysdig", "index/monitorInhibitionRule", _module)
pulumi.runtime.registerResourceModule("sysdig", "index/monitorNotificationChannelCustomWebhook", _module)
pulumi.runtime.registerResourceModule("sysdig", "index/monitorNotificationChannelEmail", _module)
pulumi.runtime.registerResourceModule("sysdig", "index/monitorNotificationChannelGoogleChat", _module)
pulumi.runtime.registerResourceModule("sysdig", "index/monitorNotificationChannelIbmEventNotification", _module)
pulumi.runtime.registerResourceModule("sysdig", "index/monitorNotificationChannelIbmFunction", _module)
pulumi.runtime.registerResourceModule("sysdig", "index/monitorNotificationChannelMsteams", _module)
pulumi.runtime.registerResourceModule("sysdig", "index/monitorNotificationChannelOpsgenie", _module)
pulumi.runtime.registerResourceModule("sysdig", "index/monitorNotificationChannelPagerduty", _module)
pulumi.runtime.registerResourceModule("sysdig", "index/monitorNotificationChannelPrometheusAlertManager", _module)
pulumi.runtime.registerResourceModule("sysdig", "index/monitorNotificationChannelSlack", _module)
pulumi.runtime.registerResourceModule("sysdig", "index/monitorNotificationChannelSns", _module)
pulumi.runtime.registerResourceModule("sysdig", "index/monitorNotificationChannelTeamEmail", _module)
pulumi.runtime.registerResourceModule("sysdig", "index/monitorNotificationChannelVictorops", _module)
pulumi.runtime.registerResourceModule("sysdig", "index/monitorNotificationChannelWebhook", _module)
pulumi.runtime.registerResourceModule("sysdig", "index/monitorSilenceRule", _module)
pulumi.runtime.registerResourceModule("sysdig", "index/monitorTeam", _module)
pulumi.runtime.registerResourceModule("sysdig", "index/secureAwsMlPolicy", _module)
pulumi.runtime.registerResourceModule("sysdig", "index/secureCloudAccount", _module)
pulumi.runtime.registerResourceModule("sysdig", "index/secureCloudAuthAccount", _module)
pulumi.runtime.registerResourceModule("sysdig", "index/secureCloudAuthAccountComponent", _module)
pulumi.runtime.registerResourceModule("sysdig", "index/secureCloudAuthAccountFeature", _module)
pulumi.runtime.registerResourceModule("sysdig", "index/secureCustomPolicy", _module)
pulumi.runtime.registerResourceModule("sysdig", "index/secureDriftPolicy", _module)
pulumi.runtime.registerResourceModule("sysdig", "index/secureList", _module)
pulumi.runtime.registerResourceModule("sysdig", "index/secureMacro", _module)
pulumi.runtime.registerResourceModule("sysdig", "index/secureMalwarePolicy", _module)
pulumi.runtime.registerResourceModule("sysdig", "index/secureManagedPolicy", _module)
pulumi.runtime.registerResourceModule("sysdig", "index/secureManagedRuleset", _module)
pulumi.runtime.registerResourceModule("sysdig", "index/secureMlPolicy", _module)
pulumi.runtime.registerResourceModule("sysdig", "index/secureNotificationChannelEmail", _module)
pulumi.runtime.registerResourceModule("sysdig", "index/secureNotificationChannelMsteams", _module)
pulumi.runtime.registerResourceModule("sysdig", "index/secureNotificationChannelOpsgenie", _module)
pulumi.runtime.registerResourceModule("sysdig", "index/secureNotificationChannelPagerduty", _module)
pulumi.runtime.registerResourceModule("sysdig", "index/secureNotificationChannelPrometheusAlertManager", _module)
pulumi.runtime.registerResourceModule("sysdig", "index/secureNotificationChannelSlack", _module)
pulumi.runtime.registerResourceModule("sysdig", "index/secureNotificationChannelSns", _module)
pulumi.runtime.registerResourceModule("sysdig", "index/secureNotificationChannelTeamEmail", _module)
pulumi.runtime.registerResourceModule("sysdig", "index/secureNotificationChannelVictorops", _module)
pulumi.runtime.registerResourceModule("sysdig", "index/secureNotificationChannelWebhook", _module)
pulumi.runtime.registerResourceModule("sysdig", "index/secureOrganization", _module)
pulumi.runtime.registerResourceModule("sysdig", "index/securePolicy", _module)
pulumi.runtime.registerResourceModule("sysdig", "index/securePostureControl", _module)
pulumi.runtime.registerResourceModule("sysdig", "index/securePosturePolicy", _module)
pulumi.runtime.registerResourceModule("sysdig", "index/securePostureZone", _module)
pulumi.runtime.registerResourceModule("sysdig", "index/secureRuleContainer", _module)
pulumi.runtime.registerResourceModule("sysdig", "index/secureRuleFalco", _module)
pulumi.runtime.registerResourceModule("sysdig", "index/secureRuleFilesystem", _module)
pulumi.runtime.registerResourceModule("sysdig", "index/secureRuleNetwork", _module)
pulumi.runtime.registerResourceModule("sysdig", "index/secureRuleProcess", _module)
pulumi.runtime.registerResourceModule("sysdig", "index/secureRuleSyscall", _module)
pulumi.runtime.registerResourceModule("sysdig", "index/secureScanningPolicy", _module)
pulumi.runtime.registerResourceModule("sysdig", "index/secureScanningPolicyAssignment", _module)
pulumi.runtime.registerResourceModule("sysdig", "index/secureTeam", _module)
pulumi.runtime.registerResourceModule("sysdig", "index/secureVulnerabilityException", _module)
pulumi.runtime.registerResourceModule("sysdig", "index/secureVulnerabilityExceptionList", _module)
pulumi.runtime.registerResourceModule("sysdig", "index/teamServiceAccount", _module)
pulumi.runtime.registerResourceModule("sysdig", "index/user", _module)
pulumi.runtime.registerResourcePackage("sysdig", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:sysdig") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
