// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class MonitorDashboard extends pulumi.CustomResource {
    /**
     * Get an existing MonitorDashboard resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MonitorDashboardState, opts?: pulumi.CustomResourceOptions): MonitorDashboard {
        return new MonitorDashboard(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sysdig:index/monitorDashboard:MonitorDashboard';

    /**
     * Returns true if the given object is an instance of MonitorDashboard.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MonitorDashboard {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MonitorDashboard.__pulumiType;
    }

    public readonly description!: pulumi.Output<string | undefined>;
    public readonly minInterval!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly panels!: pulumi.Output<outputs.MonitorDashboardPanel[]>;
    public readonly public!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly publicToken!: pulumi.Output<string>;
    public readonly scopes!: pulumi.Output<outputs.MonitorDashboardScope[] | undefined>;
    public readonly shares!: pulumi.Output<outputs.MonitorDashboardShare[] | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.MonitorDashboardTimeouts | undefined>;
    public /*out*/ readonly version!: pulumi.Output<number>;

    /**
     * Create a MonitorDashboard resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MonitorDashboardArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MonitorDashboardArgs | MonitorDashboardState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MonitorDashboardState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["minInterval"] = state ? state.minInterval : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["panels"] = state ? state.panels : undefined;
            resourceInputs["public"] = state ? state.public : undefined;
            resourceInputs["publicToken"] = state ? state.publicToken : undefined;
            resourceInputs["scopes"] = state ? state.scopes : undefined;
            resourceInputs["shares"] = state ? state.shares : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as MonitorDashboardArgs | undefined;
            if ((!args || args.panels === undefined) && !opts.urn) {
                throw new Error("Missing required property 'panels'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["minInterval"] = args ? args.minInterval : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["panels"] = args ? args.panels : undefined;
            resourceInputs["public"] = args ? args.public : undefined;
            resourceInputs["scopes"] = args ? args.scopes : undefined;
            resourceInputs["shares"] = args ? args.shares : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["publicToken"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MonitorDashboard.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering MonitorDashboard resources.
 */
export interface MonitorDashboardState {
    description?: pulumi.Input<string>;
    minInterval?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    panels?: pulumi.Input<pulumi.Input<inputs.MonitorDashboardPanel>[]>;
    public?: pulumi.Input<boolean>;
    publicToken?: pulumi.Input<string>;
    scopes?: pulumi.Input<pulumi.Input<inputs.MonitorDashboardScope>[]>;
    shares?: pulumi.Input<pulumi.Input<inputs.MonitorDashboardShare>[]>;
    timeouts?: pulumi.Input<inputs.MonitorDashboardTimeouts>;
    version?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a MonitorDashboard resource.
 */
export interface MonitorDashboardArgs {
    description?: pulumi.Input<string>;
    minInterval?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    panels: pulumi.Input<pulumi.Input<inputs.MonitorDashboardPanel>[]>;
    public?: pulumi.Input<boolean>;
    scopes?: pulumi.Input<pulumi.Input<inputs.MonitorDashboardScope>[]>;
    shares?: pulumi.Input<pulumi.Input<inputs.MonitorDashboardShare>[]>;
    timeouts?: pulumi.Input<inputs.MonitorDashboardTimeouts>;
}
