// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class MonitorInhibitionRule extends pulumi.CustomResource {
    /**
     * Get an existing MonitorInhibitionRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MonitorInhibitionRuleState, opts?: pulumi.CustomResourceOptions): MonitorInhibitionRule {
        return new MonitorInhibitionRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sysdig:index/monitorInhibitionRule:MonitorInhibitionRule';

    /**
     * Returns true if the given object is an instance of MonitorInhibitionRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MonitorInhibitionRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MonitorInhibitionRule.__pulumiType;
    }

    public readonly description!: pulumi.Output<string | undefined>;
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    public readonly equals!: pulumi.Output<string[] | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly sourceMatchers!: pulumi.Output<outputs.MonitorInhibitionRuleSourceMatcher[]>;
    public readonly targetMatchers!: pulumi.Output<outputs.MonitorInhibitionRuleTargetMatcher[]>;
    public readonly timeouts!: pulumi.Output<outputs.MonitorInhibitionRuleTimeouts | undefined>;
    public /*out*/ readonly version!: pulumi.Output<number>;

    /**
     * Create a MonitorInhibitionRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MonitorInhibitionRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MonitorInhibitionRuleArgs | MonitorInhibitionRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MonitorInhibitionRuleState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["equals"] = state ? state.equals : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["sourceMatchers"] = state ? state.sourceMatchers : undefined;
            resourceInputs["targetMatchers"] = state ? state.targetMatchers : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as MonitorInhibitionRuleArgs | undefined;
            if ((!args || args.sourceMatchers === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceMatchers'");
            }
            if ((!args || args.targetMatchers === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetMatchers'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["equals"] = args ? args.equals : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["sourceMatchers"] = args ? args.sourceMatchers : undefined;
            resourceInputs["targetMatchers"] = args ? args.targetMatchers : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MonitorInhibitionRule.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering MonitorInhibitionRule resources.
 */
export interface MonitorInhibitionRuleState {
    description?: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    equals?: pulumi.Input<pulumi.Input<string>[]>;
    name?: pulumi.Input<string>;
    sourceMatchers?: pulumi.Input<pulumi.Input<inputs.MonitorInhibitionRuleSourceMatcher>[]>;
    targetMatchers?: pulumi.Input<pulumi.Input<inputs.MonitorInhibitionRuleTargetMatcher>[]>;
    timeouts?: pulumi.Input<inputs.MonitorInhibitionRuleTimeouts>;
    version?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a MonitorInhibitionRule resource.
 */
export interface MonitorInhibitionRuleArgs {
    description?: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    equals?: pulumi.Input<pulumi.Input<string>[]>;
    name?: pulumi.Input<string>;
    sourceMatchers: pulumi.Input<pulumi.Input<inputs.MonitorInhibitionRuleSourceMatcher>[]>;
    targetMatchers: pulumi.Input<pulumi.Input<inputs.MonitorInhibitionRuleTargetMatcher>[]>;
    timeouts?: pulumi.Input<inputs.MonitorInhibitionRuleTimeouts>;
}
