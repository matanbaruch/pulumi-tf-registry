// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class MonitorAlertV2Change extends pulumi.CustomResource {
    /**
     * Get an existing MonitorAlertV2Change resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MonitorAlertV2ChangeState, opts?: pulumi.CustomResourceOptions): MonitorAlertV2Change {
        return new MonitorAlertV2Change(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sysdig:index/monitorAlertV2Change:MonitorAlertV2Change';

    /**
     * Returns true if the given object is an instance of MonitorAlertV2Change.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MonitorAlertV2Change {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MonitorAlertV2Change.__pulumiType;
    }

    public readonly capture!: pulumi.Output<outputs.MonitorAlertV2ChangeCapture | undefined>;
    public readonly customNotification!: pulumi.Output<outputs.MonitorAlertV2ChangeCustomNotification | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    public readonly group!: pulumi.Output<string | undefined>;
    public readonly groupAggregation!: pulumi.Output<string>;
    public readonly groupBies!: pulumi.Output<string[] | undefined>;
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly links!: pulumi.Output<outputs.MonitorAlertV2ChangeLink[] | undefined>;
    public readonly longerTimeRangeSeconds!: pulumi.Output<number>;
    public readonly metric!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly notificationChannels!: pulumi.Output<outputs.MonitorAlertV2ChangeNotificationChannel[] | undefined>;
    public readonly operator!: pulumi.Output<string>;
    public readonly scopes!: pulumi.Output<outputs.MonitorAlertV2ChangeScope[] | undefined>;
    public readonly severity!: pulumi.Output<string | undefined>;
    public readonly shorterTimeRangeSeconds!: pulumi.Output<number>;
    public /*out*/ readonly team!: pulumi.Output<number>;
    public readonly threshold!: pulumi.Output<number>;
    public readonly timeAggregation!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.MonitorAlertV2ChangeTimeouts | undefined>;
    public readonly unreportedAlertNotificationsRetentionSeconds!: pulumi.Output<number | undefined>;
    public /*out*/ readonly version!: pulumi.Output<number>;
    public readonly warningThreshold!: pulumi.Output<string | undefined>;

    /**
     * Create a MonitorAlertV2Change resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MonitorAlertV2ChangeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MonitorAlertV2ChangeArgs | MonitorAlertV2ChangeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MonitorAlertV2ChangeState | undefined;
            resourceInputs["capture"] = state ? state.capture : undefined;
            resourceInputs["customNotification"] = state ? state.customNotification : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["group"] = state ? state.group : undefined;
            resourceInputs["groupAggregation"] = state ? state.groupAggregation : undefined;
            resourceInputs["groupBies"] = state ? state.groupBies : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["links"] = state ? state.links : undefined;
            resourceInputs["longerTimeRangeSeconds"] = state ? state.longerTimeRangeSeconds : undefined;
            resourceInputs["metric"] = state ? state.metric : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notificationChannels"] = state ? state.notificationChannels : undefined;
            resourceInputs["operator"] = state ? state.operator : undefined;
            resourceInputs["scopes"] = state ? state.scopes : undefined;
            resourceInputs["severity"] = state ? state.severity : undefined;
            resourceInputs["shorterTimeRangeSeconds"] = state ? state.shorterTimeRangeSeconds : undefined;
            resourceInputs["team"] = state ? state.team : undefined;
            resourceInputs["threshold"] = state ? state.threshold : undefined;
            resourceInputs["timeAggregation"] = state ? state.timeAggregation : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["unreportedAlertNotificationsRetentionSeconds"] = state ? state.unreportedAlertNotificationsRetentionSeconds : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
            resourceInputs["warningThreshold"] = state ? state.warningThreshold : undefined;
        } else {
            const args = argsOrState as MonitorAlertV2ChangeArgs | undefined;
            if ((!args || args.groupAggregation === undefined) && !opts.urn) {
                throw new Error("Missing required property 'groupAggregation'");
            }
            if ((!args || args.longerTimeRangeSeconds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'longerTimeRangeSeconds'");
            }
            if ((!args || args.metric === undefined) && !opts.urn) {
                throw new Error("Missing required property 'metric'");
            }
            if ((!args || args.operator === undefined) && !opts.urn) {
                throw new Error("Missing required property 'operator'");
            }
            if ((!args || args.shorterTimeRangeSeconds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'shorterTimeRangeSeconds'");
            }
            if ((!args || args.threshold === undefined) && !opts.urn) {
                throw new Error("Missing required property 'threshold'");
            }
            if ((!args || args.timeAggregation === undefined) && !opts.urn) {
                throw new Error("Missing required property 'timeAggregation'");
            }
            resourceInputs["capture"] = args ? args.capture : undefined;
            resourceInputs["customNotification"] = args ? args.customNotification : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["group"] = args ? args.group : undefined;
            resourceInputs["groupAggregation"] = args ? args.groupAggregation : undefined;
            resourceInputs["groupBies"] = args ? args.groupBies : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["links"] = args ? args.links : undefined;
            resourceInputs["longerTimeRangeSeconds"] = args ? args.longerTimeRangeSeconds : undefined;
            resourceInputs["metric"] = args ? args.metric : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["notificationChannels"] = args ? args.notificationChannels : undefined;
            resourceInputs["operator"] = args ? args.operator : undefined;
            resourceInputs["scopes"] = args ? args.scopes : undefined;
            resourceInputs["severity"] = args ? args.severity : undefined;
            resourceInputs["shorterTimeRangeSeconds"] = args ? args.shorterTimeRangeSeconds : undefined;
            resourceInputs["threshold"] = args ? args.threshold : undefined;
            resourceInputs["timeAggregation"] = args ? args.timeAggregation : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["unreportedAlertNotificationsRetentionSeconds"] = args ? args.unreportedAlertNotificationsRetentionSeconds : undefined;
            resourceInputs["warningThreshold"] = args ? args.warningThreshold : undefined;
            resourceInputs["team"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MonitorAlertV2Change.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering MonitorAlertV2Change resources.
 */
export interface MonitorAlertV2ChangeState {
    capture?: pulumi.Input<inputs.MonitorAlertV2ChangeCapture>;
    customNotification?: pulumi.Input<inputs.MonitorAlertV2ChangeCustomNotification>;
    description?: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    group?: pulumi.Input<string>;
    groupAggregation?: pulumi.Input<string>;
    groupBies?: pulumi.Input<pulumi.Input<string>[]>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    links?: pulumi.Input<pulumi.Input<inputs.MonitorAlertV2ChangeLink>[]>;
    longerTimeRangeSeconds?: pulumi.Input<number>;
    metric?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    notificationChannels?: pulumi.Input<pulumi.Input<inputs.MonitorAlertV2ChangeNotificationChannel>[]>;
    operator?: pulumi.Input<string>;
    scopes?: pulumi.Input<pulumi.Input<inputs.MonitorAlertV2ChangeScope>[]>;
    severity?: pulumi.Input<string>;
    shorterTimeRangeSeconds?: pulumi.Input<number>;
    team?: pulumi.Input<number>;
    threshold?: pulumi.Input<number>;
    timeAggregation?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.MonitorAlertV2ChangeTimeouts>;
    unreportedAlertNotificationsRetentionSeconds?: pulumi.Input<number>;
    version?: pulumi.Input<number>;
    warningThreshold?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a MonitorAlertV2Change resource.
 */
export interface MonitorAlertV2ChangeArgs {
    capture?: pulumi.Input<inputs.MonitorAlertV2ChangeCapture>;
    customNotification?: pulumi.Input<inputs.MonitorAlertV2ChangeCustomNotification>;
    description?: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    group?: pulumi.Input<string>;
    groupAggregation: pulumi.Input<string>;
    groupBies?: pulumi.Input<pulumi.Input<string>[]>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    links?: pulumi.Input<pulumi.Input<inputs.MonitorAlertV2ChangeLink>[]>;
    longerTimeRangeSeconds: pulumi.Input<number>;
    metric: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    notificationChannels?: pulumi.Input<pulumi.Input<inputs.MonitorAlertV2ChangeNotificationChannel>[]>;
    operator: pulumi.Input<string>;
    scopes?: pulumi.Input<pulumi.Input<inputs.MonitorAlertV2ChangeScope>[]>;
    severity?: pulumi.Input<string>;
    shorterTimeRangeSeconds: pulumi.Input<number>;
    threshold: pulumi.Input<number>;
    timeAggregation: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.MonitorAlertV2ChangeTimeouts>;
    unreportedAlertNotificationsRetentionSeconds?: pulumi.Input<number>;
    warningThreshold?: pulumi.Input<string>;
}
