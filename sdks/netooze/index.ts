// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { IsolatedNetworkArgs, IsolatedNetworkState } from "./isolatedNetwork";
export type IsolatedNetwork = import("./isolatedNetwork").IsolatedNetwork;
export const IsolatedNetwork: typeof import("./isolatedNetwork").IsolatedNetwork = null as any;
utilities.lazyLoad(exports, ["IsolatedNetwork"], () => require("./isolatedNetwork"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { ServerArgs, ServerState } from "./server";
export type Server = import("./server").Server;
export const Server: typeof import("./server").Server = null as any;
utilities.lazyLoad(exports, ["Server"], () => require("./server"));

export { SshArgs, SshState } from "./ssh";
export type Ssh = import("./ssh").Ssh;
export const Ssh: typeof import("./ssh").Ssh = null as any;
utilities.lazyLoad(exports, ["Ssh"], () => require("./ssh"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "netooze:index/isolatedNetwork:IsolatedNetwork":
                return new IsolatedNetwork(name, <any>undefined, { urn })
            case "netooze:index/server:Server":
                return new Server(name, <any>undefined, { urn })
            case "netooze:index/ssh:Ssh":
                return new Ssh(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("netooze", "index/isolatedNetwork", _module)
pulumi.runtime.registerResourceModule("netooze", "index/server", _module)
pulumi.runtime.registerResourceModule("netooze", "index/ssh", _module)
pulumi.runtime.registerResourcePackage("netooze", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:netooze") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
