// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class MsgVpnDistributedCacheCluster extends pulumi.CustomResource {
    /**
     * Get an existing MsgVpnDistributedCacheCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MsgVpnDistributedCacheClusterState, opts?: pulumi.CustomResourceOptions): MsgVpnDistributedCacheCluster {
        return new MsgVpnDistributedCacheCluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'solacebroker:index/msgVpnDistributedCacheCluster:MsgVpnDistributedCacheCluster';

    /**
     * Returns true if the given object is an instance of MsgVpnDistributedCacheCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MsgVpnDistributedCacheCluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MsgVpnDistributedCacheCluster.__pulumiType;
    }

    /**
     * The name of the Distributed Cache.
     */
    public readonly cacheName!: pulumi.Output<string>;
    /**
     * The name of the Cache Cluster.
     */
    public readonly clusterName!: pulumi.Output<string>;
    /**
     * Enable or disable deliver-to-one override for the Cache Cluster. Modifying this attribute while the object (or the
     * relevant part of the object) is administratively enabled may be service impacting as enabled will be temporarily set to
     * false to apply the change. Changes to this attribute are synchronized to HA mates and replication sites via config-sync.
     * The default value is `true`.
     */
    public readonly deliverToOneOverrideEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * Enable or disable the Cache Cluster. Changes to this attribute are synchronized to HA mates and replication sites via
     * config-sync. The default value is `false`.
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * The thresholds for the cached data incoming byte rate event, in bytes per second.
     */
    public readonly eventDataByteRateThreshold!: pulumi.Output<outputs.MsgVpnDistributedCacheClusterEventDataByteRateThreshold | undefined>;
    /**
     * The thresholds for the cached data incoming message rate event, in messages per second.
     */
    public readonly eventDataMsgRateThreshold!: pulumi.Output<outputs.MsgVpnDistributedCacheClusterEventDataMsgRateThreshold | undefined>;
    /**
     * The thresholds for the memory usage per instance event, relative to `max_memory`.
     */
    public readonly eventMaxMemoryThreshold!: pulumi.Output<outputs.MsgVpnDistributedCacheClusterEventMaxMemoryThreshold | undefined>;
    /**
     * The thresholds for the topics per instance event, relative to `max_topic_count`.
     */
    public readonly eventMaxTopicsThreshold!: pulumi.Output<outputs.MsgVpnDistributedCacheClusterEventMaxTopicsThreshold | undefined>;
    /**
     * The thresholds for the request queue depth event, relative to `max_request_queue_depth`.
     */
    public readonly eventRequestQueueDepthThreshold!: pulumi.Output<outputs.MsgVpnDistributedCacheClusterEventRequestQueueDepthThreshold | undefined>;
    /**
     * The thresholds for the cache request message rate event, in messages per second.
     */
    public readonly eventRequestRateThreshold!: pulumi.Output<outputs.MsgVpnDistributedCacheClusterEventRequestRateThreshold | undefined>;
    /**
     * The thresholds for the cache response message rate event, in messages per second.
     */
    public readonly eventResponseRateThreshold!: pulumi.Output<outputs.MsgVpnDistributedCacheClusterEventResponseRateThreshold | undefined>;
    /**
     * Enable or disable global caching for the Cache Cluster. When enabled, the Cache Instances will fetch topics from remote
     * Home Cache Clusters when requested, and subscribe to those topics to cache them locally. When disabled, the Cache
     * Instances will remove all subscriptions and cached messages for topics from remote Home Cache Clusters. Changes to this
     * attribute are synchronized to HA mates and replication sites via config-sync. The default value is `false`.
     */
    public readonly globalCachingEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * The heartbeat interval, in seconds, used by the Cache Instances to monitor connectivity with the remote Home Cache
     * Clusters. Changes to this attribute are synchronized to HA mates and replication sites via config-sync. The default
     * value is `3`.
     */
    public readonly globalCachingHeartbeat!: pulumi.Output<number | undefined>;
    /**
     * The topic lifetime, in seconds. If no client requests are received for a given global topic over the duration of the
     * topic lifetime, then the Cache Instance will remove the subscription and cached messages for that topic. A value of 0
     * disables aging. Changes to this attribute are synchronized to HA mates and replication sites via config-sync. The
     * default value is `3600`.
     */
    public readonly globalCachingTopicLifetime!: pulumi.Output<number | undefined>;
    /**
     * The maximum memory usage, in megabytes (MB), for each Cache Instance in the Cache Cluster. Changes to this attribute are
     * synchronized to HA mates and replication sites via config-sync. The default value is `2048`.
     */
    public readonly maxMemory!: pulumi.Output<number | undefined>;
    /**
     * The maximum number of messages per topic for each Cache Instance in the Cache Cluster. When at the maximum, old messages
     * are removed as new messages arrive. Changes to this attribute are synchronized to HA mates and replication sites via
     * config-sync. The default value is `1`.
     */
    public readonly maxMsgsPerTopic!: pulumi.Output<number | undefined>;
    /**
     * The maximum queue depth for cache requests received by the Cache Cluster. Changes to this attribute are synchronized to
     * HA mates and replication sites via config-sync. The default value is `100000`.
     */
    public readonly maxRequestQueueDepth!: pulumi.Output<number | undefined>;
    /**
     * The maximum number of topics for each Cache Instance in the Cache Cluster. Changes to this attribute are synchronized to
     * HA mates and replication sites via config-sync. The default value is `2000000`.
     */
    public readonly maxTopicCount!: pulumi.Output<number | undefined>;
    /**
     * The message lifetime, in seconds. If a message remains cached for the duration of its lifetime, the Cache Instance will
     * remove the message. A lifetime of 0 results in the message being retained indefinitely. Changes to this attribute are
     * synchronized to HA mates and replication sites via config-sync. The default value is `0`.
     */
    public readonly msgLifetime!: pulumi.Output<number | undefined>;
    /**
     * The name of the Message VPN.
     */
    public readonly msgVpnName!: pulumi.Output<string>;
    /**
     * Enable or disable the advertising, onto the message bus, of new topics learned by each Cache Instance in the Cache
     * Cluster. Changes to this attribute are synchronized to HA mates and replication sites via config-sync. The default value
     * is `false`.
     */
    public readonly newTopicAdvertisementEnabled!: pulumi.Output<boolean | undefined>;

    /**
     * Create a MsgVpnDistributedCacheCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MsgVpnDistributedCacheClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MsgVpnDistributedCacheClusterArgs | MsgVpnDistributedCacheClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MsgVpnDistributedCacheClusterState | undefined;
            resourceInputs["cacheName"] = state ? state.cacheName : undefined;
            resourceInputs["clusterName"] = state ? state.clusterName : undefined;
            resourceInputs["deliverToOneOverrideEnabled"] = state ? state.deliverToOneOverrideEnabled : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["eventDataByteRateThreshold"] = state ? state.eventDataByteRateThreshold : undefined;
            resourceInputs["eventDataMsgRateThreshold"] = state ? state.eventDataMsgRateThreshold : undefined;
            resourceInputs["eventMaxMemoryThreshold"] = state ? state.eventMaxMemoryThreshold : undefined;
            resourceInputs["eventMaxTopicsThreshold"] = state ? state.eventMaxTopicsThreshold : undefined;
            resourceInputs["eventRequestQueueDepthThreshold"] = state ? state.eventRequestQueueDepthThreshold : undefined;
            resourceInputs["eventRequestRateThreshold"] = state ? state.eventRequestRateThreshold : undefined;
            resourceInputs["eventResponseRateThreshold"] = state ? state.eventResponseRateThreshold : undefined;
            resourceInputs["globalCachingEnabled"] = state ? state.globalCachingEnabled : undefined;
            resourceInputs["globalCachingHeartbeat"] = state ? state.globalCachingHeartbeat : undefined;
            resourceInputs["globalCachingTopicLifetime"] = state ? state.globalCachingTopicLifetime : undefined;
            resourceInputs["maxMemory"] = state ? state.maxMemory : undefined;
            resourceInputs["maxMsgsPerTopic"] = state ? state.maxMsgsPerTopic : undefined;
            resourceInputs["maxRequestQueueDepth"] = state ? state.maxRequestQueueDepth : undefined;
            resourceInputs["maxTopicCount"] = state ? state.maxTopicCount : undefined;
            resourceInputs["msgLifetime"] = state ? state.msgLifetime : undefined;
            resourceInputs["msgVpnName"] = state ? state.msgVpnName : undefined;
            resourceInputs["newTopicAdvertisementEnabled"] = state ? state.newTopicAdvertisementEnabled : undefined;
        } else {
            const args = argsOrState as MsgVpnDistributedCacheClusterArgs | undefined;
            if ((!args || args.cacheName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cacheName'");
            }
            if ((!args || args.clusterName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterName'");
            }
            if ((!args || args.msgVpnName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'msgVpnName'");
            }
            resourceInputs["cacheName"] = args ? args.cacheName : undefined;
            resourceInputs["clusterName"] = args ? args.clusterName : undefined;
            resourceInputs["deliverToOneOverrideEnabled"] = args ? args.deliverToOneOverrideEnabled : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["eventDataByteRateThreshold"] = args ? args.eventDataByteRateThreshold : undefined;
            resourceInputs["eventDataMsgRateThreshold"] = args ? args.eventDataMsgRateThreshold : undefined;
            resourceInputs["eventMaxMemoryThreshold"] = args ? args.eventMaxMemoryThreshold : undefined;
            resourceInputs["eventMaxTopicsThreshold"] = args ? args.eventMaxTopicsThreshold : undefined;
            resourceInputs["eventRequestQueueDepthThreshold"] = args ? args.eventRequestQueueDepthThreshold : undefined;
            resourceInputs["eventRequestRateThreshold"] = args ? args.eventRequestRateThreshold : undefined;
            resourceInputs["eventResponseRateThreshold"] = args ? args.eventResponseRateThreshold : undefined;
            resourceInputs["globalCachingEnabled"] = args ? args.globalCachingEnabled : undefined;
            resourceInputs["globalCachingHeartbeat"] = args ? args.globalCachingHeartbeat : undefined;
            resourceInputs["globalCachingTopicLifetime"] = args ? args.globalCachingTopicLifetime : undefined;
            resourceInputs["maxMemory"] = args ? args.maxMemory : undefined;
            resourceInputs["maxMsgsPerTopic"] = args ? args.maxMsgsPerTopic : undefined;
            resourceInputs["maxRequestQueueDepth"] = args ? args.maxRequestQueueDepth : undefined;
            resourceInputs["maxTopicCount"] = args ? args.maxTopicCount : undefined;
            resourceInputs["msgLifetime"] = args ? args.msgLifetime : undefined;
            resourceInputs["msgVpnName"] = args ? args.msgVpnName : undefined;
            resourceInputs["newTopicAdvertisementEnabled"] = args ? args.newTopicAdvertisementEnabled : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MsgVpnDistributedCacheCluster.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering MsgVpnDistributedCacheCluster resources.
 */
export interface MsgVpnDistributedCacheClusterState {
    /**
     * The name of the Distributed Cache.
     */
    cacheName?: pulumi.Input<string>;
    /**
     * The name of the Cache Cluster.
     */
    clusterName?: pulumi.Input<string>;
    /**
     * Enable or disable deliver-to-one override for the Cache Cluster. Modifying this attribute while the object (or the
     * relevant part of the object) is administratively enabled may be service impacting as enabled will be temporarily set to
     * false to apply the change. Changes to this attribute are synchronized to HA mates and replication sites via config-sync.
     * The default value is `true`.
     */
    deliverToOneOverrideEnabled?: pulumi.Input<boolean>;
    /**
     * Enable or disable the Cache Cluster. Changes to this attribute are synchronized to HA mates and replication sites via
     * config-sync. The default value is `false`.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The thresholds for the cached data incoming byte rate event, in bytes per second.
     */
    eventDataByteRateThreshold?: pulumi.Input<inputs.MsgVpnDistributedCacheClusterEventDataByteRateThreshold>;
    /**
     * The thresholds for the cached data incoming message rate event, in messages per second.
     */
    eventDataMsgRateThreshold?: pulumi.Input<inputs.MsgVpnDistributedCacheClusterEventDataMsgRateThreshold>;
    /**
     * The thresholds for the memory usage per instance event, relative to `max_memory`.
     */
    eventMaxMemoryThreshold?: pulumi.Input<inputs.MsgVpnDistributedCacheClusterEventMaxMemoryThreshold>;
    /**
     * The thresholds for the topics per instance event, relative to `max_topic_count`.
     */
    eventMaxTopicsThreshold?: pulumi.Input<inputs.MsgVpnDistributedCacheClusterEventMaxTopicsThreshold>;
    /**
     * The thresholds for the request queue depth event, relative to `max_request_queue_depth`.
     */
    eventRequestQueueDepthThreshold?: pulumi.Input<inputs.MsgVpnDistributedCacheClusterEventRequestQueueDepthThreshold>;
    /**
     * The thresholds for the cache request message rate event, in messages per second.
     */
    eventRequestRateThreshold?: pulumi.Input<inputs.MsgVpnDistributedCacheClusterEventRequestRateThreshold>;
    /**
     * The thresholds for the cache response message rate event, in messages per second.
     */
    eventResponseRateThreshold?: pulumi.Input<inputs.MsgVpnDistributedCacheClusterEventResponseRateThreshold>;
    /**
     * Enable or disable global caching for the Cache Cluster. When enabled, the Cache Instances will fetch topics from remote
     * Home Cache Clusters when requested, and subscribe to those topics to cache them locally. When disabled, the Cache
     * Instances will remove all subscriptions and cached messages for topics from remote Home Cache Clusters. Changes to this
     * attribute are synchronized to HA mates and replication sites via config-sync. The default value is `false`.
     */
    globalCachingEnabled?: pulumi.Input<boolean>;
    /**
     * The heartbeat interval, in seconds, used by the Cache Instances to monitor connectivity with the remote Home Cache
     * Clusters. Changes to this attribute are synchronized to HA mates and replication sites via config-sync. The default
     * value is `3`.
     */
    globalCachingHeartbeat?: pulumi.Input<number>;
    /**
     * The topic lifetime, in seconds. If no client requests are received for a given global topic over the duration of the
     * topic lifetime, then the Cache Instance will remove the subscription and cached messages for that topic. A value of 0
     * disables aging. Changes to this attribute are synchronized to HA mates and replication sites via config-sync. The
     * default value is `3600`.
     */
    globalCachingTopicLifetime?: pulumi.Input<number>;
    /**
     * The maximum memory usage, in megabytes (MB), for each Cache Instance in the Cache Cluster. Changes to this attribute are
     * synchronized to HA mates and replication sites via config-sync. The default value is `2048`.
     */
    maxMemory?: pulumi.Input<number>;
    /**
     * The maximum number of messages per topic for each Cache Instance in the Cache Cluster. When at the maximum, old messages
     * are removed as new messages arrive. Changes to this attribute are synchronized to HA mates and replication sites via
     * config-sync. The default value is `1`.
     */
    maxMsgsPerTopic?: pulumi.Input<number>;
    /**
     * The maximum queue depth for cache requests received by the Cache Cluster. Changes to this attribute are synchronized to
     * HA mates and replication sites via config-sync. The default value is `100000`.
     */
    maxRequestQueueDepth?: pulumi.Input<number>;
    /**
     * The maximum number of topics for each Cache Instance in the Cache Cluster. Changes to this attribute are synchronized to
     * HA mates and replication sites via config-sync. The default value is `2000000`.
     */
    maxTopicCount?: pulumi.Input<number>;
    /**
     * The message lifetime, in seconds. If a message remains cached for the duration of its lifetime, the Cache Instance will
     * remove the message. A lifetime of 0 results in the message being retained indefinitely. Changes to this attribute are
     * synchronized to HA mates and replication sites via config-sync. The default value is `0`.
     */
    msgLifetime?: pulumi.Input<number>;
    /**
     * The name of the Message VPN.
     */
    msgVpnName?: pulumi.Input<string>;
    /**
     * Enable or disable the advertising, onto the message bus, of new topics learned by each Cache Instance in the Cache
     * Cluster. Changes to this attribute are synchronized to HA mates and replication sites via config-sync. The default value
     * is `false`.
     */
    newTopicAdvertisementEnabled?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a MsgVpnDistributedCacheCluster resource.
 */
export interface MsgVpnDistributedCacheClusterArgs {
    /**
     * The name of the Distributed Cache.
     */
    cacheName: pulumi.Input<string>;
    /**
     * The name of the Cache Cluster.
     */
    clusterName: pulumi.Input<string>;
    /**
     * Enable or disable deliver-to-one override for the Cache Cluster. Modifying this attribute while the object (or the
     * relevant part of the object) is administratively enabled may be service impacting as enabled will be temporarily set to
     * false to apply the change. Changes to this attribute are synchronized to HA mates and replication sites via config-sync.
     * The default value is `true`.
     */
    deliverToOneOverrideEnabled?: pulumi.Input<boolean>;
    /**
     * Enable or disable the Cache Cluster. Changes to this attribute are synchronized to HA mates and replication sites via
     * config-sync. The default value is `false`.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The thresholds for the cached data incoming byte rate event, in bytes per second.
     */
    eventDataByteRateThreshold?: pulumi.Input<inputs.MsgVpnDistributedCacheClusterEventDataByteRateThreshold>;
    /**
     * The thresholds for the cached data incoming message rate event, in messages per second.
     */
    eventDataMsgRateThreshold?: pulumi.Input<inputs.MsgVpnDistributedCacheClusterEventDataMsgRateThreshold>;
    /**
     * The thresholds for the memory usage per instance event, relative to `max_memory`.
     */
    eventMaxMemoryThreshold?: pulumi.Input<inputs.MsgVpnDistributedCacheClusterEventMaxMemoryThreshold>;
    /**
     * The thresholds for the topics per instance event, relative to `max_topic_count`.
     */
    eventMaxTopicsThreshold?: pulumi.Input<inputs.MsgVpnDistributedCacheClusterEventMaxTopicsThreshold>;
    /**
     * The thresholds for the request queue depth event, relative to `max_request_queue_depth`.
     */
    eventRequestQueueDepthThreshold?: pulumi.Input<inputs.MsgVpnDistributedCacheClusterEventRequestQueueDepthThreshold>;
    /**
     * The thresholds for the cache request message rate event, in messages per second.
     */
    eventRequestRateThreshold?: pulumi.Input<inputs.MsgVpnDistributedCacheClusterEventRequestRateThreshold>;
    /**
     * The thresholds for the cache response message rate event, in messages per second.
     */
    eventResponseRateThreshold?: pulumi.Input<inputs.MsgVpnDistributedCacheClusterEventResponseRateThreshold>;
    /**
     * Enable or disable global caching for the Cache Cluster. When enabled, the Cache Instances will fetch topics from remote
     * Home Cache Clusters when requested, and subscribe to those topics to cache them locally. When disabled, the Cache
     * Instances will remove all subscriptions and cached messages for topics from remote Home Cache Clusters. Changes to this
     * attribute are synchronized to HA mates and replication sites via config-sync. The default value is `false`.
     */
    globalCachingEnabled?: pulumi.Input<boolean>;
    /**
     * The heartbeat interval, in seconds, used by the Cache Instances to monitor connectivity with the remote Home Cache
     * Clusters. Changes to this attribute are synchronized to HA mates and replication sites via config-sync. The default
     * value is `3`.
     */
    globalCachingHeartbeat?: pulumi.Input<number>;
    /**
     * The topic lifetime, in seconds. If no client requests are received for a given global topic over the duration of the
     * topic lifetime, then the Cache Instance will remove the subscription and cached messages for that topic. A value of 0
     * disables aging. Changes to this attribute are synchronized to HA mates and replication sites via config-sync. The
     * default value is `3600`.
     */
    globalCachingTopicLifetime?: pulumi.Input<number>;
    /**
     * The maximum memory usage, in megabytes (MB), for each Cache Instance in the Cache Cluster. Changes to this attribute are
     * synchronized to HA mates and replication sites via config-sync. The default value is `2048`.
     */
    maxMemory?: pulumi.Input<number>;
    /**
     * The maximum number of messages per topic for each Cache Instance in the Cache Cluster. When at the maximum, old messages
     * are removed as new messages arrive. Changes to this attribute are synchronized to HA mates and replication sites via
     * config-sync. The default value is `1`.
     */
    maxMsgsPerTopic?: pulumi.Input<number>;
    /**
     * The maximum queue depth for cache requests received by the Cache Cluster. Changes to this attribute are synchronized to
     * HA mates and replication sites via config-sync. The default value is `100000`.
     */
    maxRequestQueueDepth?: pulumi.Input<number>;
    /**
     * The maximum number of topics for each Cache Instance in the Cache Cluster. Changes to this attribute are synchronized to
     * HA mates and replication sites via config-sync. The default value is `2000000`.
     */
    maxTopicCount?: pulumi.Input<number>;
    /**
     * The message lifetime, in seconds. If a message remains cached for the duration of its lifetime, the Cache Instance will
     * remove the message. A lifetime of 0 results in the message being retained indefinitely. Changes to this attribute are
     * synchronized to HA mates and replication sites via config-sync. The default value is `0`.
     */
    msgLifetime?: pulumi.Input<number>;
    /**
     * The name of the Message VPN.
     */
    msgVpnName: pulumi.Input<string>;
    /**
     * Enable or disable the advertising, onto the message bus, of new topics learned by each Cache Instance in the Cache
     * Cluster. Changes to this attribute are synchronized to HA mates and replication sites via config-sync. The default value
     * is `false`.
     */
    newTopicAdvertisementEnabled?: pulumi.Input<boolean>;
}
