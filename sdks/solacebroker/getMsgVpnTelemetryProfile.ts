// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getMsgVpnTelemetryProfile(args: GetMsgVpnTelemetryProfileArgs, opts?: pulumi.InvokeOptions): Promise<GetMsgVpnTelemetryProfileResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("solacebroker:index/getMsgVpnTelemetryProfile:getMsgVpnTelemetryProfile", {
        "msgVpnName": args.msgVpnName,
        "telemetryProfileName": args.telemetryProfileName,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getMsgVpnTelemetryProfile.
 */
export interface GetMsgVpnTelemetryProfileArgs {
    msgVpnName: string;
    telemetryProfileName: string;
}

/**
 * A collection of values returned by getMsgVpnTelemetryProfile.
 */
export interface GetMsgVpnTelemetryProfileResult {
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly msgVpnName: string;
    readonly queueEventBindCountThreshold: outputs.GetMsgVpnTelemetryProfileQueueEventBindCountThreshold;
    readonly queueEventMsgSpoolUsageThreshold: outputs.GetMsgVpnTelemetryProfileQueueEventMsgSpoolUsageThreshold;
    readonly queueMaxBindCount: number;
    readonly queueMaxMsgSpoolUsage: number;
    readonly receiverAclConnectDefaultAction: string;
    readonly receiverEnabled: boolean;
    readonly receiverEventConnectionCountPerClientUsernameThreshold: outputs.GetMsgVpnTelemetryProfileReceiverEventConnectionCountPerClientUsernameThreshold;
    readonly receiverMaxConnectionCountPerClientUsername: number;
    readonly receiverTcpCongestionWindowSize: number;
    readonly receiverTcpKeepaliveCount: number;
    readonly receiverTcpKeepaliveIdleTime: number;
    readonly receiverTcpKeepaliveInterval: number;
    readonly receiverTcpMaxSegmentSize: number;
    readonly receiverTcpMaxWindowSize: number;
    readonly telemetryProfileName: string;
    readonly traceEnabled: boolean;
    readonly traceSendSpanGenerationEnabled: boolean;
}
export function getMsgVpnTelemetryProfileOutput(args: GetMsgVpnTelemetryProfileOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetMsgVpnTelemetryProfileResult> {
    return pulumi.output(args).apply((a: any) => getMsgVpnTelemetryProfile(a, opts))
}

/**
 * A collection of arguments for invoking getMsgVpnTelemetryProfile.
 */
export interface GetMsgVpnTelemetryProfileOutputArgs {
    msgVpnName: pulumi.Input<string>;
    telemetryProfileName: pulumi.Input<string>;
}
