// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { BrokerArgs, BrokerState } from "./broker";
export type Broker = import("./broker").Broker;
export const Broker: typeof import("./broker").Broker = null as any;
utilities.lazyLoad(exports, ["Broker"], () => require("./broker"));

export { ClientCertAuthorityArgs, ClientCertAuthorityState } from "./clientCertAuthority";
export type ClientCertAuthority = import("./clientCertAuthority").ClientCertAuthority;
export const ClientCertAuthority: typeof import("./clientCertAuthority").ClientCertAuthority = null as any;
utilities.lazyLoad(exports, ["ClientCertAuthority"], () => require("./clientCertAuthority"));

export { ClientCertAuthorityOcspTlsTrustedCommonNameArgs, ClientCertAuthorityOcspTlsTrustedCommonNameState } from "./clientCertAuthorityOcspTlsTrustedCommonName";
export type ClientCertAuthorityOcspTlsTrustedCommonName = import("./clientCertAuthorityOcspTlsTrustedCommonName").ClientCertAuthorityOcspTlsTrustedCommonName;
export const ClientCertAuthorityOcspTlsTrustedCommonName: typeof import("./clientCertAuthorityOcspTlsTrustedCommonName").ClientCertAuthorityOcspTlsTrustedCommonName = null as any;
utilities.lazyLoad(exports, ["ClientCertAuthorityOcspTlsTrustedCommonName"], () => require("./clientCertAuthorityOcspTlsTrustedCommonName"));

export { DmrClusterArgs, DmrClusterState } from "./dmrCluster";
export type DmrCluster = import("./dmrCluster").DmrCluster;
export const DmrCluster: typeof import("./dmrCluster").DmrCluster = null as any;
utilities.lazyLoad(exports, ["DmrCluster"], () => require("./dmrCluster"));

export { DmrClusterCertMatchingRuleArgs, DmrClusterCertMatchingRuleState } from "./dmrClusterCertMatchingRule";
export type DmrClusterCertMatchingRule = import("./dmrClusterCertMatchingRule").DmrClusterCertMatchingRule;
export const DmrClusterCertMatchingRule: typeof import("./dmrClusterCertMatchingRule").DmrClusterCertMatchingRule = null as any;
utilities.lazyLoad(exports, ["DmrClusterCertMatchingRule"], () => require("./dmrClusterCertMatchingRule"));

export { DmrClusterCertMatchingRuleAttributeFilterArgs, DmrClusterCertMatchingRuleAttributeFilterState } from "./dmrClusterCertMatchingRuleAttributeFilter";
export type DmrClusterCertMatchingRuleAttributeFilter = import("./dmrClusterCertMatchingRuleAttributeFilter").DmrClusterCertMatchingRuleAttributeFilter;
export const DmrClusterCertMatchingRuleAttributeFilter: typeof import("./dmrClusterCertMatchingRuleAttributeFilter").DmrClusterCertMatchingRuleAttributeFilter = null as any;
utilities.lazyLoad(exports, ["DmrClusterCertMatchingRuleAttributeFilter"], () => require("./dmrClusterCertMatchingRuleAttributeFilter"));

export { DmrClusterCertMatchingRuleConditionArgs, DmrClusterCertMatchingRuleConditionState } from "./dmrClusterCertMatchingRuleCondition";
export type DmrClusterCertMatchingRuleCondition = import("./dmrClusterCertMatchingRuleCondition").DmrClusterCertMatchingRuleCondition;
export const DmrClusterCertMatchingRuleCondition: typeof import("./dmrClusterCertMatchingRuleCondition").DmrClusterCertMatchingRuleCondition = null as any;
utilities.lazyLoad(exports, ["DmrClusterCertMatchingRuleCondition"], () => require("./dmrClusterCertMatchingRuleCondition"));

export { DmrClusterLinkArgs, DmrClusterLinkState } from "./dmrClusterLink";
export type DmrClusterLink = import("./dmrClusterLink").DmrClusterLink;
export const DmrClusterLink: typeof import("./dmrClusterLink").DmrClusterLink = null as any;
utilities.lazyLoad(exports, ["DmrClusterLink"], () => require("./dmrClusterLink"));

export { DmrClusterLinkAttributeArgs, DmrClusterLinkAttributeState } from "./dmrClusterLinkAttribute";
export type DmrClusterLinkAttribute = import("./dmrClusterLinkAttribute").DmrClusterLinkAttribute;
export const DmrClusterLinkAttribute: typeof import("./dmrClusterLinkAttribute").DmrClusterLinkAttribute = null as any;
utilities.lazyLoad(exports, ["DmrClusterLinkAttribute"], () => require("./dmrClusterLinkAttribute"));

export { DmrClusterLinkRemoteAddressArgs, DmrClusterLinkRemoteAddressState } from "./dmrClusterLinkRemoteAddress";
export type DmrClusterLinkRemoteAddress = import("./dmrClusterLinkRemoteAddress").DmrClusterLinkRemoteAddress;
export const DmrClusterLinkRemoteAddress: typeof import("./dmrClusterLinkRemoteAddress").DmrClusterLinkRemoteAddress = null as any;
utilities.lazyLoad(exports, ["DmrClusterLinkRemoteAddress"], () => require("./dmrClusterLinkRemoteAddress"));

export { DomainCertAuthorityArgs, DomainCertAuthorityState } from "./domainCertAuthority";
export type DomainCertAuthority = import("./domainCertAuthority").DomainCertAuthority;
export const DomainCertAuthority: typeof import("./domainCertAuthority").DomainCertAuthority = null as any;
utilities.lazyLoad(exports, ["DomainCertAuthority"], () => require("./domainCertAuthority"));

export { GetAboutApiResult } from "./getAboutApi";
export const getAboutApi: typeof import("./getAboutApi").getAboutApi = null as any;
export const getAboutApiOutput: typeof import("./getAboutApi").getAboutApiOutput = null as any;
utilities.lazyLoad(exports, ["getAboutApi","getAboutApiOutput"], () => require("./getAboutApi"));

export { GetAboutUserResult } from "./getAboutUser";
export const getAboutUser: typeof import("./getAboutUser").getAboutUser = null as any;
export const getAboutUserOutput: typeof import("./getAboutUser").getAboutUserOutput = null as any;
utilities.lazyLoad(exports, ["getAboutUser","getAboutUserOutput"], () => require("./getAboutUser"));

export { GetAboutUserMsgVpnArgs, GetAboutUserMsgVpnResult, GetAboutUserMsgVpnOutputArgs } from "./getAboutUserMsgVpn";
export const getAboutUserMsgVpn: typeof import("./getAboutUserMsgVpn").getAboutUserMsgVpn = null as any;
export const getAboutUserMsgVpnOutput: typeof import("./getAboutUserMsgVpn").getAboutUserMsgVpnOutput = null as any;
utilities.lazyLoad(exports, ["getAboutUserMsgVpn","getAboutUserMsgVpnOutput"], () => require("./getAboutUserMsgVpn"));

export { GetBrokerResult } from "./getBroker";
export const getBroker: typeof import("./getBroker").getBroker = null as any;
export const getBrokerOutput: typeof import("./getBroker").getBrokerOutput = null as any;
utilities.lazyLoad(exports, ["getBroker","getBrokerOutput"], () => require("./getBroker"));

export { GetClientCertAuthorityArgs, GetClientCertAuthorityResult, GetClientCertAuthorityOutputArgs } from "./getClientCertAuthority";
export const getClientCertAuthority: typeof import("./getClientCertAuthority").getClientCertAuthority = null as any;
export const getClientCertAuthorityOutput: typeof import("./getClientCertAuthority").getClientCertAuthorityOutput = null as any;
utilities.lazyLoad(exports, ["getClientCertAuthority","getClientCertAuthorityOutput"], () => require("./getClientCertAuthority"));

export { GetClientCertAuthorityOcspTlsTrustedCommonNameArgs, GetClientCertAuthorityOcspTlsTrustedCommonNameResult, GetClientCertAuthorityOcspTlsTrustedCommonNameOutputArgs } from "./getClientCertAuthorityOcspTlsTrustedCommonName";
export const getClientCertAuthorityOcspTlsTrustedCommonName: typeof import("./getClientCertAuthorityOcspTlsTrustedCommonName").getClientCertAuthorityOcspTlsTrustedCommonName = null as any;
export const getClientCertAuthorityOcspTlsTrustedCommonNameOutput: typeof import("./getClientCertAuthorityOcspTlsTrustedCommonName").getClientCertAuthorityOcspTlsTrustedCommonNameOutput = null as any;
utilities.lazyLoad(exports, ["getClientCertAuthorityOcspTlsTrustedCommonName","getClientCertAuthorityOcspTlsTrustedCommonNameOutput"], () => require("./getClientCertAuthorityOcspTlsTrustedCommonName"));

export { GetDmrClusterArgs, GetDmrClusterResult, GetDmrClusterOutputArgs } from "./getDmrCluster";
export const getDmrCluster: typeof import("./getDmrCluster").getDmrCluster = null as any;
export const getDmrClusterOutput: typeof import("./getDmrCluster").getDmrClusterOutput = null as any;
utilities.lazyLoad(exports, ["getDmrCluster","getDmrClusterOutput"], () => require("./getDmrCluster"));

export { GetDmrClusterCertMatchingRuleArgs, GetDmrClusterCertMatchingRuleResult, GetDmrClusterCertMatchingRuleOutputArgs } from "./getDmrClusterCertMatchingRule";
export const getDmrClusterCertMatchingRule: typeof import("./getDmrClusterCertMatchingRule").getDmrClusterCertMatchingRule = null as any;
export const getDmrClusterCertMatchingRuleOutput: typeof import("./getDmrClusterCertMatchingRule").getDmrClusterCertMatchingRuleOutput = null as any;
utilities.lazyLoad(exports, ["getDmrClusterCertMatchingRule","getDmrClusterCertMatchingRuleOutput"], () => require("./getDmrClusterCertMatchingRule"));

export { GetDmrClusterCertMatchingRuleAttributeFilterArgs, GetDmrClusterCertMatchingRuleAttributeFilterResult, GetDmrClusterCertMatchingRuleAttributeFilterOutputArgs } from "./getDmrClusterCertMatchingRuleAttributeFilter";
export const getDmrClusterCertMatchingRuleAttributeFilter: typeof import("./getDmrClusterCertMatchingRuleAttributeFilter").getDmrClusterCertMatchingRuleAttributeFilter = null as any;
export const getDmrClusterCertMatchingRuleAttributeFilterOutput: typeof import("./getDmrClusterCertMatchingRuleAttributeFilter").getDmrClusterCertMatchingRuleAttributeFilterOutput = null as any;
utilities.lazyLoad(exports, ["getDmrClusterCertMatchingRuleAttributeFilter","getDmrClusterCertMatchingRuleAttributeFilterOutput"], () => require("./getDmrClusterCertMatchingRuleAttributeFilter"));

export { GetDmrClusterCertMatchingRuleConditionArgs, GetDmrClusterCertMatchingRuleConditionResult, GetDmrClusterCertMatchingRuleConditionOutputArgs } from "./getDmrClusterCertMatchingRuleCondition";
export const getDmrClusterCertMatchingRuleCondition: typeof import("./getDmrClusterCertMatchingRuleCondition").getDmrClusterCertMatchingRuleCondition = null as any;
export const getDmrClusterCertMatchingRuleConditionOutput: typeof import("./getDmrClusterCertMatchingRuleCondition").getDmrClusterCertMatchingRuleConditionOutput = null as any;
utilities.lazyLoad(exports, ["getDmrClusterCertMatchingRuleCondition","getDmrClusterCertMatchingRuleConditionOutput"], () => require("./getDmrClusterCertMatchingRuleCondition"));

export { GetDmrClusterLinkArgs, GetDmrClusterLinkResult, GetDmrClusterLinkOutputArgs } from "./getDmrClusterLink";
export const getDmrClusterLink: typeof import("./getDmrClusterLink").getDmrClusterLink = null as any;
export const getDmrClusterLinkOutput: typeof import("./getDmrClusterLink").getDmrClusterLinkOutput = null as any;
utilities.lazyLoad(exports, ["getDmrClusterLink","getDmrClusterLinkOutput"], () => require("./getDmrClusterLink"));

export { GetDmrClusterLinkAttributeArgs, GetDmrClusterLinkAttributeResult, GetDmrClusterLinkAttributeOutputArgs } from "./getDmrClusterLinkAttribute";
export const getDmrClusterLinkAttribute: typeof import("./getDmrClusterLinkAttribute").getDmrClusterLinkAttribute = null as any;
export const getDmrClusterLinkAttributeOutput: typeof import("./getDmrClusterLinkAttribute").getDmrClusterLinkAttributeOutput = null as any;
utilities.lazyLoad(exports, ["getDmrClusterLinkAttribute","getDmrClusterLinkAttributeOutput"], () => require("./getDmrClusterLinkAttribute"));

export { GetDmrClusterLinkRemoteAddressArgs, GetDmrClusterLinkRemoteAddressResult, GetDmrClusterLinkRemoteAddressOutputArgs } from "./getDmrClusterLinkRemoteAddress";
export const getDmrClusterLinkRemoteAddress: typeof import("./getDmrClusterLinkRemoteAddress").getDmrClusterLinkRemoteAddress = null as any;
export const getDmrClusterLinkRemoteAddressOutput: typeof import("./getDmrClusterLinkRemoteAddress").getDmrClusterLinkRemoteAddressOutput = null as any;
utilities.lazyLoad(exports, ["getDmrClusterLinkRemoteAddress","getDmrClusterLinkRemoteAddressOutput"], () => require("./getDmrClusterLinkRemoteAddress"));

export { GetDomainCertAuthorityArgs, GetDomainCertAuthorityResult, GetDomainCertAuthorityOutputArgs } from "./getDomainCertAuthority";
export const getDomainCertAuthority: typeof import("./getDomainCertAuthority").getDomainCertAuthority = null as any;
export const getDomainCertAuthorityOutput: typeof import("./getDomainCertAuthority").getDomainCertAuthorityOutput = null as any;
utilities.lazyLoad(exports, ["getDomainCertAuthority","getDomainCertAuthorityOutput"], () => require("./getDomainCertAuthority"));

export { GetMsgVpnArgs, GetMsgVpnResult, GetMsgVpnOutputArgs } from "./getMsgVpn";
export const getMsgVpn: typeof import("./getMsgVpn").getMsgVpn = null as any;
export const getMsgVpnOutput: typeof import("./getMsgVpn").getMsgVpnOutput = null as any;
utilities.lazyLoad(exports, ["getMsgVpn","getMsgVpnOutput"], () => require("./getMsgVpn"));

export { GetMsgVpnAclProfileArgs, GetMsgVpnAclProfileResult, GetMsgVpnAclProfileOutputArgs } from "./getMsgVpnAclProfile";
export const getMsgVpnAclProfile: typeof import("./getMsgVpnAclProfile").getMsgVpnAclProfile = null as any;
export const getMsgVpnAclProfileOutput: typeof import("./getMsgVpnAclProfile").getMsgVpnAclProfileOutput = null as any;
utilities.lazyLoad(exports, ["getMsgVpnAclProfile","getMsgVpnAclProfileOutput"], () => require("./getMsgVpnAclProfile"));

export { GetMsgVpnAclProfileClientConnectExceptionArgs, GetMsgVpnAclProfileClientConnectExceptionResult, GetMsgVpnAclProfileClientConnectExceptionOutputArgs } from "./getMsgVpnAclProfileClientConnectException";
export const getMsgVpnAclProfileClientConnectException: typeof import("./getMsgVpnAclProfileClientConnectException").getMsgVpnAclProfileClientConnectException = null as any;
export const getMsgVpnAclProfileClientConnectExceptionOutput: typeof import("./getMsgVpnAclProfileClientConnectException").getMsgVpnAclProfileClientConnectExceptionOutput = null as any;
utilities.lazyLoad(exports, ["getMsgVpnAclProfileClientConnectException","getMsgVpnAclProfileClientConnectExceptionOutput"], () => require("./getMsgVpnAclProfileClientConnectException"));

export { GetMsgVpnAclProfilePublishTopicExceptionArgs, GetMsgVpnAclProfilePublishTopicExceptionResult, GetMsgVpnAclProfilePublishTopicExceptionOutputArgs } from "./getMsgVpnAclProfilePublishTopicException";
export const getMsgVpnAclProfilePublishTopicException: typeof import("./getMsgVpnAclProfilePublishTopicException").getMsgVpnAclProfilePublishTopicException = null as any;
export const getMsgVpnAclProfilePublishTopicExceptionOutput: typeof import("./getMsgVpnAclProfilePublishTopicException").getMsgVpnAclProfilePublishTopicExceptionOutput = null as any;
utilities.lazyLoad(exports, ["getMsgVpnAclProfilePublishTopicException","getMsgVpnAclProfilePublishTopicExceptionOutput"], () => require("./getMsgVpnAclProfilePublishTopicException"));

export { GetMsgVpnAclProfileSubscribeShareNameExceptionArgs, GetMsgVpnAclProfileSubscribeShareNameExceptionResult, GetMsgVpnAclProfileSubscribeShareNameExceptionOutputArgs } from "./getMsgVpnAclProfileSubscribeShareNameException";
export const getMsgVpnAclProfileSubscribeShareNameException: typeof import("./getMsgVpnAclProfileSubscribeShareNameException").getMsgVpnAclProfileSubscribeShareNameException = null as any;
export const getMsgVpnAclProfileSubscribeShareNameExceptionOutput: typeof import("./getMsgVpnAclProfileSubscribeShareNameException").getMsgVpnAclProfileSubscribeShareNameExceptionOutput = null as any;
utilities.lazyLoad(exports, ["getMsgVpnAclProfileSubscribeShareNameException","getMsgVpnAclProfileSubscribeShareNameExceptionOutput"], () => require("./getMsgVpnAclProfileSubscribeShareNameException"));

export { GetMsgVpnAclProfileSubscribeTopicExceptionArgs, GetMsgVpnAclProfileSubscribeTopicExceptionResult, GetMsgVpnAclProfileSubscribeTopicExceptionOutputArgs } from "./getMsgVpnAclProfileSubscribeTopicException";
export const getMsgVpnAclProfileSubscribeTopicException: typeof import("./getMsgVpnAclProfileSubscribeTopicException").getMsgVpnAclProfileSubscribeTopicException = null as any;
export const getMsgVpnAclProfileSubscribeTopicExceptionOutput: typeof import("./getMsgVpnAclProfileSubscribeTopicException").getMsgVpnAclProfileSubscribeTopicExceptionOutput = null as any;
utilities.lazyLoad(exports, ["getMsgVpnAclProfileSubscribeTopicException","getMsgVpnAclProfileSubscribeTopicExceptionOutput"], () => require("./getMsgVpnAclProfileSubscribeTopicException"));

export { GetMsgVpnAuthenticationKerberosRealmArgs, GetMsgVpnAuthenticationKerberosRealmResult, GetMsgVpnAuthenticationKerberosRealmOutputArgs } from "./getMsgVpnAuthenticationKerberosRealm";
export const getMsgVpnAuthenticationKerberosRealm: typeof import("./getMsgVpnAuthenticationKerberosRealm").getMsgVpnAuthenticationKerberosRealm = null as any;
export const getMsgVpnAuthenticationKerberosRealmOutput: typeof import("./getMsgVpnAuthenticationKerberosRealm").getMsgVpnAuthenticationKerberosRealmOutput = null as any;
utilities.lazyLoad(exports, ["getMsgVpnAuthenticationKerberosRealm","getMsgVpnAuthenticationKerberosRealmOutput"], () => require("./getMsgVpnAuthenticationKerberosRealm"));

export { GetMsgVpnAuthenticationOauthProfileArgs, GetMsgVpnAuthenticationOauthProfileResult, GetMsgVpnAuthenticationOauthProfileOutputArgs } from "./getMsgVpnAuthenticationOauthProfile";
export const getMsgVpnAuthenticationOauthProfile: typeof import("./getMsgVpnAuthenticationOauthProfile").getMsgVpnAuthenticationOauthProfile = null as any;
export const getMsgVpnAuthenticationOauthProfileOutput: typeof import("./getMsgVpnAuthenticationOauthProfile").getMsgVpnAuthenticationOauthProfileOutput = null as any;
utilities.lazyLoad(exports, ["getMsgVpnAuthenticationOauthProfile","getMsgVpnAuthenticationOauthProfileOutput"], () => require("./getMsgVpnAuthenticationOauthProfile"));

export { GetMsgVpnAuthenticationOauthProfileClientRequiredClaimArgs, GetMsgVpnAuthenticationOauthProfileClientRequiredClaimResult, GetMsgVpnAuthenticationOauthProfileClientRequiredClaimOutputArgs } from "./getMsgVpnAuthenticationOauthProfileClientRequiredClaim";
export const getMsgVpnAuthenticationOauthProfileClientRequiredClaim: typeof import("./getMsgVpnAuthenticationOauthProfileClientRequiredClaim").getMsgVpnAuthenticationOauthProfileClientRequiredClaim = null as any;
export const getMsgVpnAuthenticationOauthProfileClientRequiredClaimOutput: typeof import("./getMsgVpnAuthenticationOauthProfileClientRequiredClaim").getMsgVpnAuthenticationOauthProfileClientRequiredClaimOutput = null as any;
utilities.lazyLoad(exports, ["getMsgVpnAuthenticationOauthProfileClientRequiredClaim","getMsgVpnAuthenticationOauthProfileClientRequiredClaimOutput"], () => require("./getMsgVpnAuthenticationOauthProfileClientRequiredClaim"));

export { GetMsgVpnAuthenticationOauthProfileResourceServerRequiredClaimArgs, GetMsgVpnAuthenticationOauthProfileResourceServerRequiredClaimResult, GetMsgVpnAuthenticationOauthProfileResourceServerRequiredClaimOutputArgs } from "./getMsgVpnAuthenticationOauthProfileResourceServerRequiredClaim";
export const getMsgVpnAuthenticationOauthProfileResourceServerRequiredClaim: typeof import("./getMsgVpnAuthenticationOauthProfileResourceServerRequiredClaim").getMsgVpnAuthenticationOauthProfileResourceServerRequiredClaim = null as any;
export const getMsgVpnAuthenticationOauthProfileResourceServerRequiredClaimOutput: typeof import("./getMsgVpnAuthenticationOauthProfileResourceServerRequiredClaim").getMsgVpnAuthenticationOauthProfileResourceServerRequiredClaimOutput = null as any;
utilities.lazyLoad(exports, ["getMsgVpnAuthenticationOauthProfileResourceServerRequiredClaim","getMsgVpnAuthenticationOauthProfileResourceServerRequiredClaimOutput"], () => require("./getMsgVpnAuthenticationOauthProfileResourceServerRequiredClaim"));

export { GetMsgVpnAuthorizationGroupArgs, GetMsgVpnAuthorizationGroupResult, GetMsgVpnAuthorizationGroupOutputArgs } from "./getMsgVpnAuthorizationGroup";
export const getMsgVpnAuthorizationGroup: typeof import("./getMsgVpnAuthorizationGroup").getMsgVpnAuthorizationGroup = null as any;
export const getMsgVpnAuthorizationGroupOutput: typeof import("./getMsgVpnAuthorizationGroup").getMsgVpnAuthorizationGroupOutput = null as any;
utilities.lazyLoad(exports, ["getMsgVpnAuthorizationGroup","getMsgVpnAuthorizationGroupOutput"], () => require("./getMsgVpnAuthorizationGroup"));

export { GetMsgVpnBridgeArgs, GetMsgVpnBridgeResult, GetMsgVpnBridgeOutputArgs } from "./getMsgVpnBridge";
export const getMsgVpnBridge: typeof import("./getMsgVpnBridge").getMsgVpnBridge = null as any;
export const getMsgVpnBridgeOutput: typeof import("./getMsgVpnBridge").getMsgVpnBridgeOutput = null as any;
utilities.lazyLoad(exports, ["getMsgVpnBridge","getMsgVpnBridgeOutput"], () => require("./getMsgVpnBridge"));

export { GetMsgVpnBridgeRemoteMsgVpnArgs, GetMsgVpnBridgeRemoteMsgVpnResult, GetMsgVpnBridgeRemoteMsgVpnOutputArgs } from "./getMsgVpnBridgeRemoteMsgVpn";
export const getMsgVpnBridgeRemoteMsgVpn: typeof import("./getMsgVpnBridgeRemoteMsgVpn").getMsgVpnBridgeRemoteMsgVpn = null as any;
export const getMsgVpnBridgeRemoteMsgVpnOutput: typeof import("./getMsgVpnBridgeRemoteMsgVpn").getMsgVpnBridgeRemoteMsgVpnOutput = null as any;
utilities.lazyLoad(exports, ["getMsgVpnBridgeRemoteMsgVpn","getMsgVpnBridgeRemoteMsgVpnOutput"], () => require("./getMsgVpnBridgeRemoteMsgVpn"));

export { GetMsgVpnBridgeRemoteSubscriptionArgs, GetMsgVpnBridgeRemoteSubscriptionResult, GetMsgVpnBridgeRemoteSubscriptionOutputArgs } from "./getMsgVpnBridgeRemoteSubscription";
export const getMsgVpnBridgeRemoteSubscription: typeof import("./getMsgVpnBridgeRemoteSubscription").getMsgVpnBridgeRemoteSubscription = null as any;
export const getMsgVpnBridgeRemoteSubscriptionOutput: typeof import("./getMsgVpnBridgeRemoteSubscription").getMsgVpnBridgeRemoteSubscriptionOutput = null as any;
utilities.lazyLoad(exports, ["getMsgVpnBridgeRemoteSubscription","getMsgVpnBridgeRemoteSubscriptionOutput"], () => require("./getMsgVpnBridgeRemoteSubscription"));

export { GetMsgVpnCertMatchingRuleArgs, GetMsgVpnCertMatchingRuleResult, GetMsgVpnCertMatchingRuleOutputArgs } from "./getMsgVpnCertMatchingRule";
export const getMsgVpnCertMatchingRule: typeof import("./getMsgVpnCertMatchingRule").getMsgVpnCertMatchingRule = null as any;
export const getMsgVpnCertMatchingRuleOutput: typeof import("./getMsgVpnCertMatchingRule").getMsgVpnCertMatchingRuleOutput = null as any;
utilities.lazyLoad(exports, ["getMsgVpnCertMatchingRule","getMsgVpnCertMatchingRuleOutput"], () => require("./getMsgVpnCertMatchingRule"));

export { GetMsgVpnCertMatchingRuleAttributeFilterArgs, GetMsgVpnCertMatchingRuleAttributeFilterResult, GetMsgVpnCertMatchingRuleAttributeFilterOutputArgs } from "./getMsgVpnCertMatchingRuleAttributeFilter";
export const getMsgVpnCertMatchingRuleAttributeFilter: typeof import("./getMsgVpnCertMatchingRuleAttributeFilter").getMsgVpnCertMatchingRuleAttributeFilter = null as any;
export const getMsgVpnCertMatchingRuleAttributeFilterOutput: typeof import("./getMsgVpnCertMatchingRuleAttributeFilter").getMsgVpnCertMatchingRuleAttributeFilterOutput = null as any;
utilities.lazyLoad(exports, ["getMsgVpnCertMatchingRuleAttributeFilter","getMsgVpnCertMatchingRuleAttributeFilterOutput"], () => require("./getMsgVpnCertMatchingRuleAttributeFilter"));

export { GetMsgVpnCertMatchingRuleConditionArgs, GetMsgVpnCertMatchingRuleConditionResult, GetMsgVpnCertMatchingRuleConditionOutputArgs } from "./getMsgVpnCertMatchingRuleCondition";
export const getMsgVpnCertMatchingRuleCondition: typeof import("./getMsgVpnCertMatchingRuleCondition").getMsgVpnCertMatchingRuleCondition = null as any;
export const getMsgVpnCertMatchingRuleConditionOutput: typeof import("./getMsgVpnCertMatchingRuleCondition").getMsgVpnCertMatchingRuleConditionOutput = null as any;
utilities.lazyLoad(exports, ["getMsgVpnCertMatchingRuleCondition","getMsgVpnCertMatchingRuleConditionOutput"], () => require("./getMsgVpnCertMatchingRuleCondition"));

export { GetMsgVpnClientProfileArgs, GetMsgVpnClientProfileResult, GetMsgVpnClientProfileOutputArgs } from "./getMsgVpnClientProfile";
export const getMsgVpnClientProfile: typeof import("./getMsgVpnClientProfile").getMsgVpnClientProfile = null as any;
export const getMsgVpnClientProfileOutput: typeof import("./getMsgVpnClientProfile").getMsgVpnClientProfileOutput = null as any;
utilities.lazyLoad(exports, ["getMsgVpnClientProfile","getMsgVpnClientProfileOutput"], () => require("./getMsgVpnClientProfile"));

export { GetMsgVpnClientUsernameArgs, GetMsgVpnClientUsernameResult, GetMsgVpnClientUsernameOutputArgs } from "./getMsgVpnClientUsername";
export const getMsgVpnClientUsername: typeof import("./getMsgVpnClientUsername").getMsgVpnClientUsername = null as any;
export const getMsgVpnClientUsernameOutput: typeof import("./getMsgVpnClientUsername").getMsgVpnClientUsernameOutput = null as any;
utilities.lazyLoad(exports, ["getMsgVpnClientUsername","getMsgVpnClientUsernameOutput"], () => require("./getMsgVpnClientUsername"));

export { GetMsgVpnClientUsernameAttributeArgs, GetMsgVpnClientUsernameAttributeResult, GetMsgVpnClientUsernameAttributeOutputArgs } from "./getMsgVpnClientUsernameAttribute";
export const getMsgVpnClientUsernameAttribute: typeof import("./getMsgVpnClientUsernameAttribute").getMsgVpnClientUsernameAttribute = null as any;
export const getMsgVpnClientUsernameAttributeOutput: typeof import("./getMsgVpnClientUsernameAttribute").getMsgVpnClientUsernameAttributeOutput = null as any;
utilities.lazyLoad(exports, ["getMsgVpnClientUsernameAttribute","getMsgVpnClientUsernameAttributeOutput"], () => require("./getMsgVpnClientUsernameAttribute"));

export { GetMsgVpnDistributedCacheArgs, GetMsgVpnDistributedCacheResult, GetMsgVpnDistributedCacheOutputArgs } from "./getMsgVpnDistributedCache";
export const getMsgVpnDistributedCache: typeof import("./getMsgVpnDistributedCache").getMsgVpnDistributedCache = null as any;
export const getMsgVpnDistributedCacheOutput: typeof import("./getMsgVpnDistributedCache").getMsgVpnDistributedCacheOutput = null as any;
utilities.lazyLoad(exports, ["getMsgVpnDistributedCache","getMsgVpnDistributedCacheOutput"], () => require("./getMsgVpnDistributedCache"));

export { GetMsgVpnDistributedCacheClusterArgs, GetMsgVpnDistributedCacheClusterResult, GetMsgVpnDistributedCacheClusterOutputArgs } from "./getMsgVpnDistributedCacheCluster";
export const getMsgVpnDistributedCacheCluster: typeof import("./getMsgVpnDistributedCacheCluster").getMsgVpnDistributedCacheCluster = null as any;
export const getMsgVpnDistributedCacheClusterOutput: typeof import("./getMsgVpnDistributedCacheCluster").getMsgVpnDistributedCacheClusterOutput = null as any;
utilities.lazyLoad(exports, ["getMsgVpnDistributedCacheCluster","getMsgVpnDistributedCacheClusterOutput"], () => require("./getMsgVpnDistributedCacheCluster"));

export { GetMsgVpnDistributedCacheClusterGlobalCachingHomeClusterArgs, GetMsgVpnDistributedCacheClusterGlobalCachingHomeClusterResult, GetMsgVpnDistributedCacheClusterGlobalCachingHomeClusterOutputArgs } from "./getMsgVpnDistributedCacheClusterGlobalCachingHomeCluster";
export const getMsgVpnDistributedCacheClusterGlobalCachingHomeCluster: typeof import("./getMsgVpnDistributedCacheClusterGlobalCachingHomeCluster").getMsgVpnDistributedCacheClusterGlobalCachingHomeCluster = null as any;
export const getMsgVpnDistributedCacheClusterGlobalCachingHomeClusterOutput: typeof import("./getMsgVpnDistributedCacheClusterGlobalCachingHomeCluster").getMsgVpnDistributedCacheClusterGlobalCachingHomeClusterOutput = null as any;
utilities.lazyLoad(exports, ["getMsgVpnDistributedCacheClusterGlobalCachingHomeCluster","getMsgVpnDistributedCacheClusterGlobalCachingHomeClusterOutput"], () => require("./getMsgVpnDistributedCacheClusterGlobalCachingHomeCluster"));

export { GetMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixArgs, GetMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixResult, GetMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixOutputArgs } from "./getMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefix";
export const getMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefix: typeof import("./getMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefix").getMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefix = null as any;
export const getMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixOutput: typeof import("./getMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefix").getMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixOutput = null as any;
utilities.lazyLoad(exports, ["getMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefix","getMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixOutput"], () => require("./getMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefix"));

export { GetMsgVpnDistributedCacheClusterInstanceArgs, GetMsgVpnDistributedCacheClusterInstanceResult, GetMsgVpnDistributedCacheClusterInstanceOutputArgs } from "./getMsgVpnDistributedCacheClusterInstance";
export const getMsgVpnDistributedCacheClusterInstance: typeof import("./getMsgVpnDistributedCacheClusterInstance").getMsgVpnDistributedCacheClusterInstance = null as any;
export const getMsgVpnDistributedCacheClusterInstanceOutput: typeof import("./getMsgVpnDistributedCacheClusterInstance").getMsgVpnDistributedCacheClusterInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getMsgVpnDistributedCacheClusterInstance","getMsgVpnDistributedCacheClusterInstanceOutput"], () => require("./getMsgVpnDistributedCacheClusterInstance"));

export { GetMsgVpnDistributedCacheClusterTopicArgs, GetMsgVpnDistributedCacheClusterTopicResult, GetMsgVpnDistributedCacheClusterTopicOutputArgs } from "./getMsgVpnDistributedCacheClusterTopic";
export const getMsgVpnDistributedCacheClusterTopic: typeof import("./getMsgVpnDistributedCacheClusterTopic").getMsgVpnDistributedCacheClusterTopic = null as any;
export const getMsgVpnDistributedCacheClusterTopicOutput: typeof import("./getMsgVpnDistributedCacheClusterTopic").getMsgVpnDistributedCacheClusterTopicOutput = null as any;
utilities.lazyLoad(exports, ["getMsgVpnDistributedCacheClusterTopic","getMsgVpnDistributedCacheClusterTopicOutput"], () => require("./getMsgVpnDistributedCacheClusterTopic"));

export { GetMsgVpnDmrBridgeArgs, GetMsgVpnDmrBridgeResult, GetMsgVpnDmrBridgeOutputArgs } from "./getMsgVpnDmrBridge";
export const getMsgVpnDmrBridge: typeof import("./getMsgVpnDmrBridge").getMsgVpnDmrBridge = null as any;
export const getMsgVpnDmrBridgeOutput: typeof import("./getMsgVpnDmrBridge").getMsgVpnDmrBridgeOutput = null as any;
utilities.lazyLoad(exports, ["getMsgVpnDmrBridge","getMsgVpnDmrBridgeOutput"], () => require("./getMsgVpnDmrBridge"));

export { GetMsgVpnJndiConnectionFactoryArgs, GetMsgVpnJndiConnectionFactoryResult, GetMsgVpnJndiConnectionFactoryOutputArgs } from "./getMsgVpnJndiConnectionFactory";
export const getMsgVpnJndiConnectionFactory: typeof import("./getMsgVpnJndiConnectionFactory").getMsgVpnJndiConnectionFactory = null as any;
export const getMsgVpnJndiConnectionFactoryOutput: typeof import("./getMsgVpnJndiConnectionFactory").getMsgVpnJndiConnectionFactoryOutput = null as any;
utilities.lazyLoad(exports, ["getMsgVpnJndiConnectionFactory","getMsgVpnJndiConnectionFactoryOutput"], () => require("./getMsgVpnJndiConnectionFactory"));

export { GetMsgVpnJndiQueueArgs, GetMsgVpnJndiQueueResult, GetMsgVpnJndiQueueOutputArgs } from "./getMsgVpnJndiQueue";
export const getMsgVpnJndiQueue: typeof import("./getMsgVpnJndiQueue").getMsgVpnJndiQueue = null as any;
export const getMsgVpnJndiQueueOutput: typeof import("./getMsgVpnJndiQueue").getMsgVpnJndiQueueOutput = null as any;
utilities.lazyLoad(exports, ["getMsgVpnJndiQueue","getMsgVpnJndiQueueOutput"], () => require("./getMsgVpnJndiQueue"));

export { GetMsgVpnJndiTopicArgs, GetMsgVpnJndiTopicResult, GetMsgVpnJndiTopicOutputArgs } from "./getMsgVpnJndiTopic";
export const getMsgVpnJndiTopic: typeof import("./getMsgVpnJndiTopic").getMsgVpnJndiTopic = null as any;
export const getMsgVpnJndiTopicOutput: typeof import("./getMsgVpnJndiTopic").getMsgVpnJndiTopicOutput = null as any;
utilities.lazyLoad(exports, ["getMsgVpnJndiTopic","getMsgVpnJndiTopicOutput"], () => require("./getMsgVpnJndiTopic"));

export { GetMsgVpnKafkaReceiverArgs, GetMsgVpnKafkaReceiverResult, GetMsgVpnKafkaReceiverOutputArgs } from "./getMsgVpnKafkaReceiver";
export const getMsgVpnKafkaReceiver: typeof import("./getMsgVpnKafkaReceiver").getMsgVpnKafkaReceiver = null as any;
export const getMsgVpnKafkaReceiverOutput: typeof import("./getMsgVpnKafkaReceiver").getMsgVpnKafkaReceiverOutput = null as any;
utilities.lazyLoad(exports, ["getMsgVpnKafkaReceiver","getMsgVpnKafkaReceiverOutput"], () => require("./getMsgVpnKafkaReceiver"));

export { GetMsgVpnKafkaReceiverTopicBindingArgs, GetMsgVpnKafkaReceiverTopicBindingResult, GetMsgVpnKafkaReceiverTopicBindingOutputArgs } from "./getMsgVpnKafkaReceiverTopicBinding";
export const getMsgVpnKafkaReceiverTopicBinding: typeof import("./getMsgVpnKafkaReceiverTopicBinding").getMsgVpnKafkaReceiverTopicBinding = null as any;
export const getMsgVpnKafkaReceiverTopicBindingOutput: typeof import("./getMsgVpnKafkaReceiverTopicBinding").getMsgVpnKafkaReceiverTopicBindingOutput = null as any;
utilities.lazyLoad(exports, ["getMsgVpnKafkaReceiverTopicBinding","getMsgVpnKafkaReceiverTopicBindingOutput"], () => require("./getMsgVpnKafkaReceiverTopicBinding"));

export { GetMsgVpnKafkaSenderArgs, GetMsgVpnKafkaSenderResult, GetMsgVpnKafkaSenderOutputArgs } from "./getMsgVpnKafkaSender";
export const getMsgVpnKafkaSender: typeof import("./getMsgVpnKafkaSender").getMsgVpnKafkaSender = null as any;
export const getMsgVpnKafkaSenderOutput: typeof import("./getMsgVpnKafkaSender").getMsgVpnKafkaSenderOutput = null as any;
utilities.lazyLoad(exports, ["getMsgVpnKafkaSender","getMsgVpnKafkaSenderOutput"], () => require("./getMsgVpnKafkaSender"));

export { GetMsgVpnKafkaSenderQueueBindingArgs, GetMsgVpnKafkaSenderQueueBindingResult, GetMsgVpnKafkaSenderQueueBindingOutputArgs } from "./getMsgVpnKafkaSenderQueueBinding";
export const getMsgVpnKafkaSenderQueueBinding: typeof import("./getMsgVpnKafkaSenderQueueBinding").getMsgVpnKafkaSenderQueueBinding = null as any;
export const getMsgVpnKafkaSenderQueueBindingOutput: typeof import("./getMsgVpnKafkaSenderQueueBinding").getMsgVpnKafkaSenderQueueBindingOutput = null as any;
utilities.lazyLoad(exports, ["getMsgVpnKafkaSenderQueueBinding","getMsgVpnKafkaSenderQueueBindingOutput"], () => require("./getMsgVpnKafkaSenderQueueBinding"));

export { GetMsgVpnMqttRetainCacheArgs, GetMsgVpnMqttRetainCacheResult, GetMsgVpnMqttRetainCacheOutputArgs } from "./getMsgVpnMqttRetainCache";
export const getMsgVpnMqttRetainCache: typeof import("./getMsgVpnMqttRetainCache").getMsgVpnMqttRetainCache = null as any;
export const getMsgVpnMqttRetainCacheOutput: typeof import("./getMsgVpnMqttRetainCache").getMsgVpnMqttRetainCacheOutput = null as any;
utilities.lazyLoad(exports, ["getMsgVpnMqttRetainCache","getMsgVpnMqttRetainCacheOutput"], () => require("./getMsgVpnMqttRetainCache"));

export { GetMsgVpnMqttSessionArgs, GetMsgVpnMqttSessionResult, GetMsgVpnMqttSessionOutputArgs } from "./getMsgVpnMqttSession";
export const getMsgVpnMqttSession: typeof import("./getMsgVpnMqttSession").getMsgVpnMqttSession = null as any;
export const getMsgVpnMqttSessionOutput: typeof import("./getMsgVpnMqttSession").getMsgVpnMqttSessionOutput = null as any;
utilities.lazyLoad(exports, ["getMsgVpnMqttSession","getMsgVpnMqttSessionOutput"], () => require("./getMsgVpnMqttSession"));

export { GetMsgVpnMqttSessionSubscriptionArgs, GetMsgVpnMqttSessionSubscriptionResult, GetMsgVpnMqttSessionSubscriptionOutputArgs } from "./getMsgVpnMqttSessionSubscription";
export const getMsgVpnMqttSessionSubscription: typeof import("./getMsgVpnMqttSessionSubscription").getMsgVpnMqttSessionSubscription = null as any;
export const getMsgVpnMqttSessionSubscriptionOutput: typeof import("./getMsgVpnMqttSessionSubscription").getMsgVpnMqttSessionSubscriptionOutput = null as any;
utilities.lazyLoad(exports, ["getMsgVpnMqttSessionSubscription","getMsgVpnMqttSessionSubscriptionOutput"], () => require("./getMsgVpnMqttSessionSubscription"));

export { GetMsgVpnProxyArgs, GetMsgVpnProxyResult, GetMsgVpnProxyOutputArgs } from "./getMsgVpnProxy";
export const getMsgVpnProxy: typeof import("./getMsgVpnProxy").getMsgVpnProxy = null as any;
export const getMsgVpnProxyOutput: typeof import("./getMsgVpnProxy").getMsgVpnProxyOutput = null as any;
utilities.lazyLoad(exports, ["getMsgVpnProxy","getMsgVpnProxyOutput"], () => require("./getMsgVpnProxy"));

export { GetMsgVpnQueueArgs, GetMsgVpnQueueResult, GetMsgVpnQueueOutputArgs } from "./getMsgVpnQueue";
export const getMsgVpnQueue: typeof import("./getMsgVpnQueue").getMsgVpnQueue = null as any;
export const getMsgVpnQueueOutput: typeof import("./getMsgVpnQueue").getMsgVpnQueueOutput = null as any;
utilities.lazyLoad(exports, ["getMsgVpnQueue","getMsgVpnQueueOutput"], () => require("./getMsgVpnQueue"));

export { GetMsgVpnQueueSubscriptionArgs, GetMsgVpnQueueSubscriptionResult, GetMsgVpnQueueSubscriptionOutputArgs } from "./getMsgVpnQueueSubscription";
export const getMsgVpnQueueSubscription: typeof import("./getMsgVpnQueueSubscription").getMsgVpnQueueSubscription = null as any;
export const getMsgVpnQueueSubscriptionOutput: typeof import("./getMsgVpnQueueSubscription").getMsgVpnQueueSubscriptionOutput = null as any;
utilities.lazyLoad(exports, ["getMsgVpnQueueSubscription","getMsgVpnQueueSubscriptionOutput"], () => require("./getMsgVpnQueueSubscription"));

export { GetMsgVpnQueueTemplateArgs, GetMsgVpnQueueTemplateResult, GetMsgVpnQueueTemplateOutputArgs } from "./getMsgVpnQueueTemplate";
export const getMsgVpnQueueTemplate: typeof import("./getMsgVpnQueueTemplate").getMsgVpnQueueTemplate = null as any;
export const getMsgVpnQueueTemplateOutput: typeof import("./getMsgVpnQueueTemplate").getMsgVpnQueueTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getMsgVpnQueueTemplate","getMsgVpnQueueTemplateOutput"], () => require("./getMsgVpnQueueTemplate"));

export { GetMsgVpnReplayLogArgs, GetMsgVpnReplayLogResult, GetMsgVpnReplayLogOutputArgs } from "./getMsgVpnReplayLog";
export const getMsgVpnReplayLog: typeof import("./getMsgVpnReplayLog").getMsgVpnReplayLog = null as any;
export const getMsgVpnReplayLogOutput: typeof import("./getMsgVpnReplayLog").getMsgVpnReplayLogOutput = null as any;
utilities.lazyLoad(exports, ["getMsgVpnReplayLog","getMsgVpnReplayLogOutput"], () => require("./getMsgVpnReplayLog"));

export { GetMsgVpnReplayLogTopicFilterSubscriptionArgs, GetMsgVpnReplayLogTopicFilterSubscriptionResult, GetMsgVpnReplayLogTopicFilterSubscriptionOutputArgs } from "./getMsgVpnReplayLogTopicFilterSubscription";
export const getMsgVpnReplayLogTopicFilterSubscription: typeof import("./getMsgVpnReplayLogTopicFilterSubscription").getMsgVpnReplayLogTopicFilterSubscription = null as any;
export const getMsgVpnReplayLogTopicFilterSubscriptionOutput: typeof import("./getMsgVpnReplayLogTopicFilterSubscription").getMsgVpnReplayLogTopicFilterSubscriptionOutput = null as any;
utilities.lazyLoad(exports, ["getMsgVpnReplayLogTopicFilterSubscription","getMsgVpnReplayLogTopicFilterSubscriptionOutput"], () => require("./getMsgVpnReplayLogTopicFilterSubscription"));

export { GetMsgVpnReplicatedTopicArgs, GetMsgVpnReplicatedTopicResult, GetMsgVpnReplicatedTopicOutputArgs } from "./getMsgVpnReplicatedTopic";
export const getMsgVpnReplicatedTopic: typeof import("./getMsgVpnReplicatedTopic").getMsgVpnReplicatedTopic = null as any;
export const getMsgVpnReplicatedTopicOutput: typeof import("./getMsgVpnReplicatedTopic").getMsgVpnReplicatedTopicOutput = null as any;
utilities.lazyLoad(exports, ["getMsgVpnReplicatedTopic","getMsgVpnReplicatedTopicOutput"], () => require("./getMsgVpnReplicatedTopic"));

export { GetMsgVpnRestDeliveryPointArgs, GetMsgVpnRestDeliveryPointResult, GetMsgVpnRestDeliveryPointOutputArgs } from "./getMsgVpnRestDeliveryPoint";
export const getMsgVpnRestDeliveryPoint: typeof import("./getMsgVpnRestDeliveryPoint").getMsgVpnRestDeliveryPoint = null as any;
export const getMsgVpnRestDeliveryPointOutput: typeof import("./getMsgVpnRestDeliveryPoint").getMsgVpnRestDeliveryPointOutput = null as any;
utilities.lazyLoad(exports, ["getMsgVpnRestDeliveryPoint","getMsgVpnRestDeliveryPointOutput"], () => require("./getMsgVpnRestDeliveryPoint"));

export { GetMsgVpnRestDeliveryPointQueueBindingArgs, GetMsgVpnRestDeliveryPointQueueBindingResult, GetMsgVpnRestDeliveryPointQueueBindingOutputArgs } from "./getMsgVpnRestDeliveryPointQueueBinding";
export const getMsgVpnRestDeliveryPointQueueBinding: typeof import("./getMsgVpnRestDeliveryPointQueueBinding").getMsgVpnRestDeliveryPointQueueBinding = null as any;
export const getMsgVpnRestDeliveryPointQueueBindingOutput: typeof import("./getMsgVpnRestDeliveryPointQueueBinding").getMsgVpnRestDeliveryPointQueueBindingOutput = null as any;
utilities.lazyLoad(exports, ["getMsgVpnRestDeliveryPointQueueBinding","getMsgVpnRestDeliveryPointQueueBindingOutput"], () => require("./getMsgVpnRestDeliveryPointQueueBinding"));

export { GetMsgVpnRestDeliveryPointQueueBindingProtectedRequestHeaderArgs, GetMsgVpnRestDeliveryPointQueueBindingProtectedRequestHeaderResult, GetMsgVpnRestDeliveryPointQueueBindingProtectedRequestHeaderOutputArgs } from "./getMsgVpnRestDeliveryPointQueueBindingProtectedRequestHeader";
export const getMsgVpnRestDeliveryPointQueueBindingProtectedRequestHeader: typeof import("./getMsgVpnRestDeliveryPointQueueBindingProtectedRequestHeader").getMsgVpnRestDeliveryPointQueueBindingProtectedRequestHeader = null as any;
export const getMsgVpnRestDeliveryPointQueueBindingProtectedRequestHeaderOutput: typeof import("./getMsgVpnRestDeliveryPointQueueBindingProtectedRequestHeader").getMsgVpnRestDeliveryPointQueueBindingProtectedRequestHeaderOutput = null as any;
utilities.lazyLoad(exports, ["getMsgVpnRestDeliveryPointQueueBindingProtectedRequestHeader","getMsgVpnRestDeliveryPointQueueBindingProtectedRequestHeaderOutput"], () => require("./getMsgVpnRestDeliveryPointQueueBindingProtectedRequestHeader"));

export { GetMsgVpnRestDeliveryPointQueueBindingRequestHeaderArgs, GetMsgVpnRestDeliveryPointQueueBindingRequestHeaderResult, GetMsgVpnRestDeliveryPointQueueBindingRequestHeaderOutputArgs } from "./getMsgVpnRestDeliveryPointQueueBindingRequestHeader";
export const getMsgVpnRestDeliveryPointQueueBindingRequestHeader: typeof import("./getMsgVpnRestDeliveryPointQueueBindingRequestHeader").getMsgVpnRestDeliveryPointQueueBindingRequestHeader = null as any;
export const getMsgVpnRestDeliveryPointQueueBindingRequestHeaderOutput: typeof import("./getMsgVpnRestDeliveryPointQueueBindingRequestHeader").getMsgVpnRestDeliveryPointQueueBindingRequestHeaderOutput = null as any;
utilities.lazyLoad(exports, ["getMsgVpnRestDeliveryPointQueueBindingRequestHeader","getMsgVpnRestDeliveryPointQueueBindingRequestHeaderOutput"], () => require("./getMsgVpnRestDeliveryPointQueueBindingRequestHeader"));

export { GetMsgVpnRestDeliveryPointRestConsumerArgs, GetMsgVpnRestDeliveryPointRestConsumerResult, GetMsgVpnRestDeliveryPointRestConsumerOutputArgs } from "./getMsgVpnRestDeliveryPointRestConsumer";
export const getMsgVpnRestDeliveryPointRestConsumer: typeof import("./getMsgVpnRestDeliveryPointRestConsumer").getMsgVpnRestDeliveryPointRestConsumer = null as any;
export const getMsgVpnRestDeliveryPointRestConsumerOutput: typeof import("./getMsgVpnRestDeliveryPointRestConsumer").getMsgVpnRestDeliveryPointRestConsumerOutput = null as any;
utilities.lazyLoad(exports, ["getMsgVpnRestDeliveryPointRestConsumer","getMsgVpnRestDeliveryPointRestConsumerOutput"], () => require("./getMsgVpnRestDeliveryPointRestConsumer"));

export { GetMsgVpnRestDeliveryPointRestConsumerOauthJwtClaimArgs, GetMsgVpnRestDeliveryPointRestConsumerOauthJwtClaimResult, GetMsgVpnRestDeliveryPointRestConsumerOauthJwtClaimOutputArgs } from "./getMsgVpnRestDeliveryPointRestConsumerOauthJwtClaim";
export const getMsgVpnRestDeliveryPointRestConsumerOauthJwtClaim: typeof import("./getMsgVpnRestDeliveryPointRestConsumerOauthJwtClaim").getMsgVpnRestDeliveryPointRestConsumerOauthJwtClaim = null as any;
export const getMsgVpnRestDeliveryPointRestConsumerOauthJwtClaimOutput: typeof import("./getMsgVpnRestDeliveryPointRestConsumerOauthJwtClaim").getMsgVpnRestDeliveryPointRestConsumerOauthJwtClaimOutput = null as any;
utilities.lazyLoad(exports, ["getMsgVpnRestDeliveryPointRestConsumerOauthJwtClaim","getMsgVpnRestDeliveryPointRestConsumerOauthJwtClaimOutput"], () => require("./getMsgVpnRestDeliveryPointRestConsumerOauthJwtClaim"));

export { GetMsgVpnSequencedTopicArgs, GetMsgVpnSequencedTopicResult, GetMsgVpnSequencedTopicOutputArgs } from "./getMsgVpnSequencedTopic";
export const getMsgVpnSequencedTopic: typeof import("./getMsgVpnSequencedTopic").getMsgVpnSequencedTopic = null as any;
export const getMsgVpnSequencedTopicOutput: typeof import("./getMsgVpnSequencedTopic").getMsgVpnSequencedTopicOutput = null as any;
utilities.lazyLoad(exports, ["getMsgVpnSequencedTopic","getMsgVpnSequencedTopicOutput"], () => require("./getMsgVpnSequencedTopic"));

export { GetMsgVpnTelemetryProfileArgs, GetMsgVpnTelemetryProfileResult, GetMsgVpnTelemetryProfileOutputArgs } from "./getMsgVpnTelemetryProfile";
export const getMsgVpnTelemetryProfile: typeof import("./getMsgVpnTelemetryProfile").getMsgVpnTelemetryProfile = null as any;
export const getMsgVpnTelemetryProfileOutput: typeof import("./getMsgVpnTelemetryProfile").getMsgVpnTelemetryProfileOutput = null as any;
utilities.lazyLoad(exports, ["getMsgVpnTelemetryProfile","getMsgVpnTelemetryProfileOutput"], () => require("./getMsgVpnTelemetryProfile"));

export { GetMsgVpnTelemetryProfileReceiverAclConnectExceptionArgs, GetMsgVpnTelemetryProfileReceiverAclConnectExceptionResult, GetMsgVpnTelemetryProfileReceiverAclConnectExceptionOutputArgs } from "./getMsgVpnTelemetryProfileReceiverAclConnectException";
export const getMsgVpnTelemetryProfileReceiverAclConnectException: typeof import("./getMsgVpnTelemetryProfileReceiverAclConnectException").getMsgVpnTelemetryProfileReceiverAclConnectException = null as any;
export const getMsgVpnTelemetryProfileReceiverAclConnectExceptionOutput: typeof import("./getMsgVpnTelemetryProfileReceiverAclConnectException").getMsgVpnTelemetryProfileReceiverAclConnectExceptionOutput = null as any;
utilities.lazyLoad(exports, ["getMsgVpnTelemetryProfileReceiverAclConnectException","getMsgVpnTelemetryProfileReceiverAclConnectExceptionOutput"], () => require("./getMsgVpnTelemetryProfileReceiverAclConnectException"));

export { GetMsgVpnTelemetryProfileTraceFilterArgs, GetMsgVpnTelemetryProfileTraceFilterResult, GetMsgVpnTelemetryProfileTraceFilterOutputArgs } from "./getMsgVpnTelemetryProfileTraceFilter";
export const getMsgVpnTelemetryProfileTraceFilter: typeof import("./getMsgVpnTelemetryProfileTraceFilter").getMsgVpnTelemetryProfileTraceFilter = null as any;
export const getMsgVpnTelemetryProfileTraceFilterOutput: typeof import("./getMsgVpnTelemetryProfileTraceFilter").getMsgVpnTelemetryProfileTraceFilterOutput = null as any;
utilities.lazyLoad(exports, ["getMsgVpnTelemetryProfileTraceFilter","getMsgVpnTelemetryProfileTraceFilterOutput"], () => require("./getMsgVpnTelemetryProfileTraceFilter"));

export { GetMsgVpnTelemetryProfileTraceFilterSubscriptionArgs, GetMsgVpnTelemetryProfileTraceFilterSubscriptionResult, GetMsgVpnTelemetryProfileTraceFilterSubscriptionOutputArgs } from "./getMsgVpnTelemetryProfileTraceFilterSubscription";
export const getMsgVpnTelemetryProfileTraceFilterSubscription: typeof import("./getMsgVpnTelemetryProfileTraceFilterSubscription").getMsgVpnTelemetryProfileTraceFilterSubscription = null as any;
export const getMsgVpnTelemetryProfileTraceFilterSubscriptionOutput: typeof import("./getMsgVpnTelemetryProfileTraceFilterSubscription").getMsgVpnTelemetryProfileTraceFilterSubscriptionOutput = null as any;
utilities.lazyLoad(exports, ["getMsgVpnTelemetryProfileTraceFilterSubscription","getMsgVpnTelemetryProfileTraceFilterSubscriptionOutput"], () => require("./getMsgVpnTelemetryProfileTraceFilterSubscription"));

export { GetMsgVpnTopicEndpointArgs, GetMsgVpnTopicEndpointResult, GetMsgVpnTopicEndpointOutputArgs } from "./getMsgVpnTopicEndpoint";
export const getMsgVpnTopicEndpoint: typeof import("./getMsgVpnTopicEndpoint").getMsgVpnTopicEndpoint = null as any;
export const getMsgVpnTopicEndpointOutput: typeof import("./getMsgVpnTopicEndpoint").getMsgVpnTopicEndpointOutput = null as any;
utilities.lazyLoad(exports, ["getMsgVpnTopicEndpoint","getMsgVpnTopicEndpointOutput"], () => require("./getMsgVpnTopicEndpoint"));

export { GetMsgVpnTopicEndpointTemplateArgs, GetMsgVpnTopicEndpointTemplateResult, GetMsgVpnTopicEndpointTemplateOutputArgs } from "./getMsgVpnTopicEndpointTemplate";
export const getMsgVpnTopicEndpointTemplate: typeof import("./getMsgVpnTopicEndpointTemplate").getMsgVpnTopicEndpointTemplate = null as any;
export const getMsgVpnTopicEndpointTemplateOutput: typeof import("./getMsgVpnTopicEndpointTemplate").getMsgVpnTopicEndpointTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getMsgVpnTopicEndpointTemplate","getMsgVpnTopicEndpointTemplateOutput"], () => require("./getMsgVpnTopicEndpointTemplate"));

export { GetOauthProfileArgs, GetOauthProfileResult, GetOauthProfileOutputArgs } from "./getOauthProfile";
export const getOauthProfile: typeof import("./getOauthProfile").getOauthProfile = null as any;
export const getOauthProfileOutput: typeof import("./getOauthProfile").getOauthProfileOutput = null as any;
utilities.lazyLoad(exports, ["getOauthProfile","getOauthProfileOutput"], () => require("./getOauthProfile"));

export { GetOauthProfileAccessLevelGroupArgs, GetOauthProfileAccessLevelGroupResult, GetOauthProfileAccessLevelGroupOutputArgs } from "./getOauthProfileAccessLevelGroup";
export const getOauthProfileAccessLevelGroup: typeof import("./getOauthProfileAccessLevelGroup").getOauthProfileAccessLevelGroup = null as any;
export const getOauthProfileAccessLevelGroupOutput: typeof import("./getOauthProfileAccessLevelGroup").getOauthProfileAccessLevelGroupOutput = null as any;
utilities.lazyLoad(exports, ["getOauthProfileAccessLevelGroup","getOauthProfileAccessLevelGroupOutput"], () => require("./getOauthProfileAccessLevelGroup"));

export { GetOauthProfileAccessLevelGroupMsgVpnAccessLevelExceptionArgs, GetOauthProfileAccessLevelGroupMsgVpnAccessLevelExceptionResult, GetOauthProfileAccessLevelGroupMsgVpnAccessLevelExceptionOutputArgs } from "./getOauthProfileAccessLevelGroupMsgVpnAccessLevelException";
export const getOauthProfileAccessLevelGroupMsgVpnAccessLevelException: typeof import("./getOauthProfileAccessLevelGroupMsgVpnAccessLevelException").getOauthProfileAccessLevelGroupMsgVpnAccessLevelException = null as any;
export const getOauthProfileAccessLevelGroupMsgVpnAccessLevelExceptionOutput: typeof import("./getOauthProfileAccessLevelGroupMsgVpnAccessLevelException").getOauthProfileAccessLevelGroupMsgVpnAccessLevelExceptionOutput = null as any;
utilities.lazyLoad(exports, ["getOauthProfileAccessLevelGroupMsgVpnAccessLevelException","getOauthProfileAccessLevelGroupMsgVpnAccessLevelExceptionOutput"], () => require("./getOauthProfileAccessLevelGroupMsgVpnAccessLevelException"));

export { GetOauthProfileClientAllowedHostArgs, GetOauthProfileClientAllowedHostResult, GetOauthProfileClientAllowedHostOutputArgs } from "./getOauthProfileClientAllowedHost";
export const getOauthProfileClientAllowedHost: typeof import("./getOauthProfileClientAllowedHost").getOauthProfileClientAllowedHost = null as any;
export const getOauthProfileClientAllowedHostOutput: typeof import("./getOauthProfileClientAllowedHost").getOauthProfileClientAllowedHostOutput = null as any;
utilities.lazyLoad(exports, ["getOauthProfileClientAllowedHost","getOauthProfileClientAllowedHostOutput"], () => require("./getOauthProfileClientAllowedHost"));

export { GetOauthProfileClientAuthorizationParameterArgs, GetOauthProfileClientAuthorizationParameterResult, GetOauthProfileClientAuthorizationParameterOutputArgs } from "./getOauthProfileClientAuthorizationParameter";
export const getOauthProfileClientAuthorizationParameter: typeof import("./getOauthProfileClientAuthorizationParameter").getOauthProfileClientAuthorizationParameter = null as any;
export const getOauthProfileClientAuthorizationParameterOutput: typeof import("./getOauthProfileClientAuthorizationParameter").getOauthProfileClientAuthorizationParameterOutput = null as any;
utilities.lazyLoad(exports, ["getOauthProfileClientAuthorizationParameter","getOauthProfileClientAuthorizationParameterOutput"], () => require("./getOauthProfileClientAuthorizationParameter"));

export { GetOauthProfileClientRequiredClaimArgs, GetOauthProfileClientRequiredClaimResult, GetOauthProfileClientRequiredClaimOutputArgs } from "./getOauthProfileClientRequiredClaim";
export const getOauthProfileClientRequiredClaim: typeof import("./getOauthProfileClientRequiredClaim").getOauthProfileClientRequiredClaim = null as any;
export const getOauthProfileClientRequiredClaimOutput: typeof import("./getOauthProfileClientRequiredClaim").getOauthProfileClientRequiredClaimOutput = null as any;
utilities.lazyLoad(exports, ["getOauthProfileClientRequiredClaim","getOauthProfileClientRequiredClaimOutput"], () => require("./getOauthProfileClientRequiredClaim"));

export { GetOauthProfileDefaultMsgVpnAccessLevelExceptionArgs, GetOauthProfileDefaultMsgVpnAccessLevelExceptionResult, GetOauthProfileDefaultMsgVpnAccessLevelExceptionOutputArgs } from "./getOauthProfileDefaultMsgVpnAccessLevelException";
export const getOauthProfileDefaultMsgVpnAccessLevelException: typeof import("./getOauthProfileDefaultMsgVpnAccessLevelException").getOauthProfileDefaultMsgVpnAccessLevelException = null as any;
export const getOauthProfileDefaultMsgVpnAccessLevelExceptionOutput: typeof import("./getOauthProfileDefaultMsgVpnAccessLevelException").getOauthProfileDefaultMsgVpnAccessLevelExceptionOutput = null as any;
utilities.lazyLoad(exports, ["getOauthProfileDefaultMsgVpnAccessLevelException","getOauthProfileDefaultMsgVpnAccessLevelExceptionOutput"], () => require("./getOauthProfileDefaultMsgVpnAccessLevelException"));

export { GetOauthProfileResourceServerRequiredClaimArgs, GetOauthProfileResourceServerRequiredClaimResult, GetOauthProfileResourceServerRequiredClaimOutputArgs } from "./getOauthProfileResourceServerRequiredClaim";
export const getOauthProfileResourceServerRequiredClaim: typeof import("./getOauthProfileResourceServerRequiredClaim").getOauthProfileResourceServerRequiredClaim = null as any;
export const getOauthProfileResourceServerRequiredClaimOutput: typeof import("./getOauthProfileResourceServerRequiredClaim").getOauthProfileResourceServerRequiredClaimOutput = null as any;
utilities.lazyLoad(exports, ["getOauthProfileResourceServerRequiredClaim","getOauthProfileResourceServerRequiredClaimOutput"], () => require("./getOauthProfileResourceServerRequiredClaim"));

export { GetProxyArgs, GetProxyResult, GetProxyOutputArgs } from "./getProxy";
export const getProxy: typeof import("./getProxy").getProxy = null as any;
export const getProxyOutput: typeof import("./getProxy").getProxyOutput = null as any;
utilities.lazyLoad(exports, ["getProxy","getProxyOutput"], () => require("./getProxy"));

export { GetVirtualHostnameArgs, GetVirtualHostnameResult, GetVirtualHostnameOutputArgs } from "./getVirtualHostname";
export const getVirtualHostname: typeof import("./getVirtualHostname").getVirtualHostname = null as any;
export const getVirtualHostnameOutput: typeof import("./getVirtualHostname").getVirtualHostnameOutput = null as any;
utilities.lazyLoad(exports, ["getVirtualHostname","getVirtualHostnameOutput"], () => require("./getVirtualHostname"));

export { MsgVpnArgs, MsgVpnState } from "./msgVpn";
export type MsgVpn = import("./msgVpn").MsgVpn;
export const MsgVpn: typeof import("./msgVpn").MsgVpn = null as any;
utilities.lazyLoad(exports, ["MsgVpn"], () => require("./msgVpn"));

export { MsgVpnAclProfileArgs, MsgVpnAclProfileState } from "./msgVpnAclProfile";
export type MsgVpnAclProfile = import("./msgVpnAclProfile").MsgVpnAclProfile;
export const MsgVpnAclProfile: typeof import("./msgVpnAclProfile").MsgVpnAclProfile = null as any;
utilities.lazyLoad(exports, ["MsgVpnAclProfile"], () => require("./msgVpnAclProfile"));

export { MsgVpnAclProfileClientConnectExceptionArgs, MsgVpnAclProfileClientConnectExceptionState } from "./msgVpnAclProfileClientConnectException";
export type MsgVpnAclProfileClientConnectException = import("./msgVpnAclProfileClientConnectException").MsgVpnAclProfileClientConnectException;
export const MsgVpnAclProfileClientConnectException: typeof import("./msgVpnAclProfileClientConnectException").MsgVpnAclProfileClientConnectException = null as any;
utilities.lazyLoad(exports, ["MsgVpnAclProfileClientConnectException"], () => require("./msgVpnAclProfileClientConnectException"));

export { MsgVpnAclProfilePublishTopicExceptionArgs, MsgVpnAclProfilePublishTopicExceptionState } from "./msgVpnAclProfilePublishTopicException";
export type MsgVpnAclProfilePublishTopicException = import("./msgVpnAclProfilePublishTopicException").MsgVpnAclProfilePublishTopicException;
export const MsgVpnAclProfilePublishTopicException: typeof import("./msgVpnAclProfilePublishTopicException").MsgVpnAclProfilePublishTopicException = null as any;
utilities.lazyLoad(exports, ["MsgVpnAclProfilePublishTopicException"], () => require("./msgVpnAclProfilePublishTopicException"));

export { MsgVpnAclProfileSubscribeShareNameExceptionArgs, MsgVpnAclProfileSubscribeShareNameExceptionState } from "./msgVpnAclProfileSubscribeShareNameException";
export type MsgVpnAclProfileSubscribeShareNameException = import("./msgVpnAclProfileSubscribeShareNameException").MsgVpnAclProfileSubscribeShareNameException;
export const MsgVpnAclProfileSubscribeShareNameException: typeof import("./msgVpnAclProfileSubscribeShareNameException").MsgVpnAclProfileSubscribeShareNameException = null as any;
utilities.lazyLoad(exports, ["MsgVpnAclProfileSubscribeShareNameException"], () => require("./msgVpnAclProfileSubscribeShareNameException"));

export { MsgVpnAclProfileSubscribeTopicExceptionArgs, MsgVpnAclProfileSubscribeTopicExceptionState } from "./msgVpnAclProfileSubscribeTopicException";
export type MsgVpnAclProfileSubscribeTopicException = import("./msgVpnAclProfileSubscribeTopicException").MsgVpnAclProfileSubscribeTopicException;
export const MsgVpnAclProfileSubscribeTopicException: typeof import("./msgVpnAclProfileSubscribeTopicException").MsgVpnAclProfileSubscribeTopicException = null as any;
utilities.lazyLoad(exports, ["MsgVpnAclProfileSubscribeTopicException"], () => require("./msgVpnAclProfileSubscribeTopicException"));

export { MsgVpnAuthenticationKerberosRealmArgs, MsgVpnAuthenticationKerberosRealmState } from "./msgVpnAuthenticationKerberosRealm";
export type MsgVpnAuthenticationKerberosRealm = import("./msgVpnAuthenticationKerberosRealm").MsgVpnAuthenticationKerberosRealm;
export const MsgVpnAuthenticationKerberosRealm: typeof import("./msgVpnAuthenticationKerberosRealm").MsgVpnAuthenticationKerberosRealm = null as any;
utilities.lazyLoad(exports, ["MsgVpnAuthenticationKerberosRealm"], () => require("./msgVpnAuthenticationKerberosRealm"));

export { MsgVpnAuthenticationOauthProfileArgs, MsgVpnAuthenticationOauthProfileState } from "./msgVpnAuthenticationOauthProfile";
export type MsgVpnAuthenticationOauthProfile = import("./msgVpnAuthenticationOauthProfile").MsgVpnAuthenticationOauthProfile;
export const MsgVpnAuthenticationOauthProfile: typeof import("./msgVpnAuthenticationOauthProfile").MsgVpnAuthenticationOauthProfile = null as any;
utilities.lazyLoad(exports, ["MsgVpnAuthenticationOauthProfile"], () => require("./msgVpnAuthenticationOauthProfile"));

export { MsgVpnAuthenticationOauthProfileClientRequiredClaimArgs, MsgVpnAuthenticationOauthProfileClientRequiredClaimState } from "./msgVpnAuthenticationOauthProfileClientRequiredClaim";
export type MsgVpnAuthenticationOauthProfileClientRequiredClaim = import("./msgVpnAuthenticationOauthProfileClientRequiredClaim").MsgVpnAuthenticationOauthProfileClientRequiredClaim;
export const MsgVpnAuthenticationOauthProfileClientRequiredClaim: typeof import("./msgVpnAuthenticationOauthProfileClientRequiredClaim").MsgVpnAuthenticationOauthProfileClientRequiredClaim = null as any;
utilities.lazyLoad(exports, ["MsgVpnAuthenticationOauthProfileClientRequiredClaim"], () => require("./msgVpnAuthenticationOauthProfileClientRequiredClaim"));

export { MsgVpnAuthenticationOauthProfileResourceServerRequiredClaimArgs, MsgVpnAuthenticationOauthProfileResourceServerRequiredClaimState } from "./msgVpnAuthenticationOauthProfileResourceServerRequiredClaim";
export type MsgVpnAuthenticationOauthProfileResourceServerRequiredClaim = import("./msgVpnAuthenticationOauthProfileResourceServerRequiredClaim").MsgVpnAuthenticationOauthProfileResourceServerRequiredClaim;
export const MsgVpnAuthenticationOauthProfileResourceServerRequiredClaim: typeof import("./msgVpnAuthenticationOauthProfileResourceServerRequiredClaim").MsgVpnAuthenticationOauthProfileResourceServerRequiredClaim = null as any;
utilities.lazyLoad(exports, ["MsgVpnAuthenticationOauthProfileResourceServerRequiredClaim"], () => require("./msgVpnAuthenticationOauthProfileResourceServerRequiredClaim"));

export { MsgVpnAuthorizationGroupArgs, MsgVpnAuthorizationGroupState } from "./msgVpnAuthorizationGroup";
export type MsgVpnAuthorizationGroup = import("./msgVpnAuthorizationGroup").MsgVpnAuthorizationGroup;
export const MsgVpnAuthorizationGroup: typeof import("./msgVpnAuthorizationGroup").MsgVpnAuthorizationGroup = null as any;
utilities.lazyLoad(exports, ["MsgVpnAuthorizationGroup"], () => require("./msgVpnAuthorizationGroup"));

export { MsgVpnBridgeArgs, MsgVpnBridgeState } from "./msgVpnBridge";
export type MsgVpnBridge = import("./msgVpnBridge").MsgVpnBridge;
export const MsgVpnBridge: typeof import("./msgVpnBridge").MsgVpnBridge = null as any;
utilities.lazyLoad(exports, ["MsgVpnBridge"], () => require("./msgVpnBridge"));

export { MsgVpnBridgeRemoteMsgVpnArgs, MsgVpnBridgeRemoteMsgVpnState } from "./msgVpnBridgeRemoteMsgVpn";
export type MsgVpnBridgeRemoteMsgVpn = import("./msgVpnBridgeRemoteMsgVpn").MsgVpnBridgeRemoteMsgVpn;
export const MsgVpnBridgeRemoteMsgVpn: typeof import("./msgVpnBridgeRemoteMsgVpn").MsgVpnBridgeRemoteMsgVpn = null as any;
utilities.lazyLoad(exports, ["MsgVpnBridgeRemoteMsgVpn"], () => require("./msgVpnBridgeRemoteMsgVpn"));

export { MsgVpnBridgeRemoteSubscriptionArgs, MsgVpnBridgeRemoteSubscriptionState } from "./msgVpnBridgeRemoteSubscription";
export type MsgVpnBridgeRemoteSubscription = import("./msgVpnBridgeRemoteSubscription").MsgVpnBridgeRemoteSubscription;
export const MsgVpnBridgeRemoteSubscription: typeof import("./msgVpnBridgeRemoteSubscription").MsgVpnBridgeRemoteSubscription = null as any;
utilities.lazyLoad(exports, ["MsgVpnBridgeRemoteSubscription"], () => require("./msgVpnBridgeRemoteSubscription"));

export { MsgVpnCertMatchingRuleArgs, MsgVpnCertMatchingRuleState } from "./msgVpnCertMatchingRule";
export type MsgVpnCertMatchingRule = import("./msgVpnCertMatchingRule").MsgVpnCertMatchingRule;
export const MsgVpnCertMatchingRule: typeof import("./msgVpnCertMatchingRule").MsgVpnCertMatchingRule = null as any;
utilities.lazyLoad(exports, ["MsgVpnCertMatchingRule"], () => require("./msgVpnCertMatchingRule"));

export { MsgVpnCertMatchingRuleAttributeFilterArgs, MsgVpnCertMatchingRuleAttributeFilterState } from "./msgVpnCertMatchingRuleAttributeFilter";
export type MsgVpnCertMatchingRuleAttributeFilter = import("./msgVpnCertMatchingRuleAttributeFilter").MsgVpnCertMatchingRuleAttributeFilter;
export const MsgVpnCertMatchingRuleAttributeFilter: typeof import("./msgVpnCertMatchingRuleAttributeFilter").MsgVpnCertMatchingRuleAttributeFilter = null as any;
utilities.lazyLoad(exports, ["MsgVpnCertMatchingRuleAttributeFilter"], () => require("./msgVpnCertMatchingRuleAttributeFilter"));

export { MsgVpnCertMatchingRuleConditionArgs, MsgVpnCertMatchingRuleConditionState } from "./msgVpnCertMatchingRuleCondition";
export type MsgVpnCertMatchingRuleCondition = import("./msgVpnCertMatchingRuleCondition").MsgVpnCertMatchingRuleCondition;
export const MsgVpnCertMatchingRuleCondition: typeof import("./msgVpnCertMatchingRuleCondition").MsgVpnCertMatchingRuleCondition = null as any;
utilities.lazyLoad(exports, ["MsgVpnCertMatchingRuleCondition"], () => require("./msgVpnCertMatchingRuleCondition"));

export { MsgVpnClientProfileArgs, MsgVpnClientProfileState } from "./msgVpnClientProfile";
export type MsgVpnClientProfile = import("./msgVpnClientProfile").MsgVpnClientProfile;
export const MsgVpnClientProfile: typeof import("./msgVpnClientProfile").MsgVpnClientProfile = null as any;
utilities.lazyLoad(exports, ["MsgVpnClientProfile"], () => require("./msgVpnClientProfile"));

export { MsgVpnClientUsernameArgs, MsgVpnClientUsernameState } from "./msgVpnClientUsername";
export type MsgVpnClientUsername = import("./msgVpnClientUsername").MsgVpnClientUsername;
export const MsgVpnClientUsername: typeof import("./msgVpnClientUsername").MsgVpnClientUsername = null as any;
utilities.lazyLoad(exports, ["MsgVpnClientUsername"], () => require("./msgVpnClientUsername"));

export { MsgVpnClientUsernameAttributeArgs, MsgVpnClientUsernameAttributeState } from "./msgVpnClientUsernameAttribute";
export type MsgVpnClientUsernameAttribute = import("./msgVpnClientUsernameAttribute").MsgVpnClientUsernameAttribute;
export const MsgVpnClientUsernameAttribute: typeof import("./msgVpnClientUsernameAttribute").MsgVpnClientUsernameAttribute = null as any;
utilities.lazyLoad(exports, ["MsgVpnClientUsernameAttribute"], () => require("./msgVpnClientUsernameAttribute"));

export { MsgVpnDistributedCacheArgs, MsgVpnDistributedCacheState } from "./msgVpnDistributedCache";
export type MsgVpnDistributedCache = import("./msgVpnDistributedCache").MsgVpnDistributedCache;
export const MsgVpnDistributedCache: typeof import("./msgVpnDistributedCache").MsgVpnDistributedCache = null as any;
utilities.lazyLoad(exports, ["MsgVpnDistributedCache"], () => require("./msgVpnDistributedCache"));

export { MsgVpnDistributedCacheClusterArgs, MsgVpnDistributedCacheClusterState } from "./msgVpnDistributedCacheCluster";
export type MsgVpnDistributedCacheCluster = import("./msgVpnDistributedCacheCluster").MsgVpnDistributedCacheCluster;
export const MsgVpnDistributedCacheCluster: typeof import("./msgVpnDistributedCacheCluster").MsgVpnDistributedCacheCluster = null as any;
utilities.lazyLoad(exports, ["MsgVpnDistributedCacheCluster"], () => require("./msgVpnDistributedCacheCluster"));

export { MsgVpnDistributedCacheClusterGlobalCachingHomeClusterArgs, MsgVpnDistributedCacheClusterGlobalCachingHomeClusterState } from "./msgVpnDistributedCacheClusterGlobalCachingHomeCluster";
export type MsgVpnDistributedCacheClusterGlobalCachingHomeCluster = import("./msgVpnDistributedCacheClusterGlobalCachingHomeCluster").MsgVpnDistributedCacheClusterGlobalCachingHomeCluster;
export const MsgVpnDistributedCacheClusterGlobalCachingHomeCluster: typeof import("./msgVpnDistributedCacheClusterGlobalCachingHomeCluster").MsgVpnDistributedCacheClusterGlobalCachingHomeCluster = null as any;
utilities.lazyLoad(exports, ["MsgVpnDistributedCacheClusterGlobalCachingHomeCluster"], () => require("./msgVpnDistributedCacheClusterGlobalCachingHomeCluster"));

export { MsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixArgs, MsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixState } from "./msgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefix";
export type MsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefix = import("./msgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefix").MsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefix;
export const MsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefix: typeof import("./msgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefix").MsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefix = null as any;
utilities.lazyLoad(exports, ["MsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefix"], () => require("./msgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefix"));

export { MsgVpnDistributedCacheClusterInstanceArgs, MsgVpnDistributedCacheClusterInstanceState } from "./msgVpnDistributedCacheClusterInstance";
export type MsgVpnDistributedCacheClusterInstance = import("./msgVpnDistributedCacheClusterInstance").MsgVpnDistributedCacheClusterInstance;
export const MsgVpnDistributedCacheClusterInstance: typeof import("./msgVpnDistributedCacheClusterInstance").MsgVpnDistributedCacheClusterInstance = null as any;
utilities.lazyLoad(exports, ["MsgVpnDistributedCacheClusterInstance"], () => require("./msgVpnDistributedCacheClusterInstance"));

export { MsgVpnDistributedCacheClusterTopicArgs, MsgVpnDistributedCacheClusterTopicState } from "./msgVpnDistributedCacheClusterTopic";
export type MsgVpnDistributedCacheClusterTopic = import("./msgVpnDistributedCacheClusterTopic").MsgVpnDistributedCacheClusterTopic;
export const MsgVpnDistributedCacheClusterTopic: typeof import("./msgVpnDistributedCacheClusterTopic").MsgVpnDistributedCacheClusterTopic = null as any;
utilities.lazyLoad(exports, ["MsgVpnDistributedCacheClusterTopic"], () => require("./msgVpnDistributedCacheClusterTopic"));

export { MsgVpnDmrBridgeArgs, MsgVpnDmrBridgeState } from "./msgVpnDmrBridge";
export type MsgVpnDmrBridge = import("./msgVpnDmrBridge").MsgVpnDmrBridge;
export const MsgVpnDmrBridge: typeof import("./msgVpnDmrBridge").MsgVpnDmrBridge = null as any;
utilities.lazyLoad(exports, ["MsgVpnDmrBridge"], () => require("./msgVpnDmrBridge"));

export { MsgVpnJndiConnectionFactoryArgs, MsgVpnJndiConnectionFactoryState } from "./msgVpnJndiConnectionFactory";
export type MsgVpnJndiConnectionFactory = import("./msgVpnJndiConnectionFactory").MsgVpnJndiConnectionFactory;
export const MsgVpnJndiConnectionFactory: typeof import("./msgVpnJndiConnectionFactory").MsgVpnJndiConnectionFactory = null as any;
utilities.lazyLoad(exports, ["MsgVpnJndiConnectionFactory"], () => require("./msgVpnJndiConnectionFactory"));

export { MsgVpnJndiQueueArgs, MsgVpnJndiQueueState } from "./msgVpnJndiQueue";
export type MsgVpnJndiQueue = import("./msgVpnJndiQueue").MsgVpnJndiQueue;
export const MsgVpnJndiQueue: typeof import("./msgVpnJndiQueue").MsgVpnJndiQueue = null as any;
utilities.lazyLoad(exports, ["MsgVpnJndiQueue"], () => require("./msgVpnJndiQueue"));

export { MsgVpnJndiTopicArgs, MsgVpnJndiTopicState } from "./msgVpnJndiTopic";
export type MsgVpnJndiTopic = import("./msgVpnJndiTopic").MsgVpnJndiTopic;
export const MsgVpnJndiTopic: typeof import("./msgVpnJndiTopic").MsgVpnJndiTopic = null as any;
utilities.lazyLoad(exports, ["MsgVpnJndiTopic"], () => require("./msgVpnJndiTopic"));

export { MsgVpnKafkaReceiverArgs, MsgVpnKafkaReceiverState } from "./msgVpnKafkaReceiver";
export type MsgVpnKafkaReceiver = import("./msgVpnKafkaReceiver").MsgVpnKafkaReceiver;
export const MsgVpnKafkaReceiver: typeof import("./msgVpnKafkaReceiver").MsgVpnKafkaReceiver = null as any;
utilities.lazyLoad(exports, ["MsgVpnKafkaReceiver"], () => require("./msgVpnKafkaReceiver"));

export { MsgVpnKafkaReceiverTopicBindingArgs, MsgVpnKafkaReceiverTopicBindingState } from "./msgVpnKafkaReceiverTopicBinding";
export type MsgVpnKafkaReceiverTopicBinding = import("./msgVpnKafkaReceiverTopicBinding").MsgVpnKafkaReceiverTopicBinding;
export const MsgVpnKafkaReceiverTopicBinding: typeof import("./msgVpnKafkaReceiverTopicBinding").MsgVpnKafkaReceiverTopicBinding = null as any;
utilities.lazyLoad(exports, ["MsgVpnKafkaReceiverTopicBinding"], () => require("./msgVpnKafkaReceiverTopicBinding"));

export { MsgVpnKafkaSenderArgs, MsgVpnKafkaSenderState } from "./msgVpnKafkaSender";
export type MsgVpnKafkaSender = import("./msgVpnKafkaSender").MsgVpnKafkaSender;
export const MsgVpnKafkaSender: typeof import("./msgVpnKafkaSender").MsgVpnKafkaSender = null as any;
utilities.lazyLoad(exports, ["MsgVpnKafkaSender"], () => require("./msgVpnKafkaSender"));

export { MsgVpnKafkaSenderQueueBindingArgs, MsgVpnKafkaSenderQueueBindingState } from "./msgVpnKafkaSenderQueueBinding";
export type MsgVpnKafkaSenderQueueBinding = import("./msgVpnKafkaSenderQueueBinding").MsgVpnKafkaSenderQueueBinding;
export const MsgVpnKafkaSenderQueueBinding: typeof import("./msgVpnKafkaSenderQueueBinding").MsgVpnKafkaSenderQueueBinding = null as any;
utilities.lazyLoad(exports, ["MsgVpnKafkaSenderQueueBinding"], () => require("./msgVpnKafkaSenderQueueBinding"));

export { MsgVpnMqttRetainCacheArgs, MsgVpnMqttRetainCacheState } from "./msgVpnMqttRetainCache";
export type MsgVpnMqttRetainCache = import("./msgVpnMqttRetainCache").MsgVpnMqttRetainCache;
export const MsgVpnMqttRetainCache: typeof import("./msgVpnMqttRetainCache").MsgVpnMqttRetainCache = null as any;
utilities.lazyLoad(exports, ["MsgVpnMqttRetainCache"], () => require("./msgVpnMqttRetainCache"));

export { MsgVpnMqttSessionArgs, MsgVpnMqttSessionState } from "./msgVpnMqttSession";
export type MsgVpnMqttSession = import("./msgVpnMqttSession").MsgVpnMqttSession;
export const MsgVpnMqttSession: typeof import("./msgVpnMqttSession").MsgVpnMqttSession = null as any;
utilities.lazyLoad(exports, ["MsgVpnMqttSession"], () => require("./msgVpnMqttSession"));

export { MsgVpnMqttSessionSubscriptionArgs, MsgVpnMqttSessionSubscriptionState } from "./msgVpnMqttSessionSubscription";
export type MsgVpnMqttSessionSubscription = import("./msgVpnMqttSessionSubscription").MsgVpnMqttSessionSubscription;
export const MsgVpnMqttSessionSubscription: typeof import("./msgVpnMqttSessionSubscription").MsgVpnMqttSessionSubscription = null as any;
utilities.lazyLoad(exports, ["MsgVpnMqttSessionSubscription"], () => require("./msgVpnMqttSessionSubscription"));

export { MsgVpnProxyArgs, MsgVpnProxyState } from "./msgVpnProxy";
export type MsgVpnProxy = import("./msgVpnProxy").MsgVpnProxy;
export const MsgVpnProxy: typeof import("./msgVpnProxy").MsgVpnProxy = null as any;
utilities.lazyLoad(exports, ["MsgVpnProxy"], () => require("./msgVpnProxy"));

export { MsgVpnQueueArgs, MsgVpnQueueState } from "./msgVpnQueue";
export type MsgVpnQueue = import("./msgVpnQueue").MsgVpnQueue;
export const MsgVpnQueue: typeof import("./msgVpnQueue").MsgVpnQueue = null as any;
utilities.lazyLoad(exports, ["MsgVpnQueue"], () => require("./msgVpnQueue"));

export { MsgVpnQueueSubscriptionArgs, MsgVpnQueueSubscriptionState } from "./msgVpnQueueSubscription";
export type MsgVpnQueueSubscription = import("./msgVpnQueueSubscription").MsgVpnQueueSubscription;
export const MsgVpnQueueSubscription: typeof import("./msgVpnQueueSubscription").MsgVpnQueueSubscription = null as any;
utilities.lazyLoad(exports, ["MsgVpnQueueSubscription"], () => require("./msgVpnQueueSubscription"));

export { MsgVpnQueueTemplateArgs, MsgVpnQueueTemplateState } from "./msgVpnQueueTemplate";
export type MsgVpnQueueTemplate = import("./msgVpnQueueTemplate").MsgVpnQueueTemplate;
export const MsgVpnQueueTemplate: typeof import("./msgVpnQueueTemplate").MsgVpnQueueTemplate = null as any;
utilities.lazyLoad(exports, ["MsgVpnQueueTemplate"], () => require("./msgVpnQueueTemplate"));

export { MsgVpnReplayLogArgs, MsgVpnReplayLogState } from "./msgVpnReplayLog";
export type MsgVpnReplayLog = import("./msgVpnReplayLog").MsgVpnReplayLog;
export const MsgVpnReplayLog: typeof import("./msgVpnReplayLog").MsgVpnReplayLog = null as any;
utilities.lazyLoad(exports, ["MsgVpnReplayLog"], () => require("./msgVpnReplayLog"));

export { MsgVpnReplayLogTopicFilterSubscriptionArgs, MsgVpnReplayLogTopicFilterSubscriptionState } from "./msgVpnReplayLogTopicFilterSubscription";
export type MsgVpnReplayLogTopicFilterSubscription = import("./msgVpnReplayLogTopicFilterSubscription").MsgVpnReplayLogTopicFilterSubscription;
export const MsgVpnReplayLogTopicFilterSubscription: typeof import("./msgVpnReplayLogTopicFilterSubscription").MsgVpnReplayLogTopicFilterSubscription = null as any;
utilities.lazyLoad(exports, ["MsgVpnReplayLogTopicFilterSubscription"], () => require("./msgVpnReplayLogTopicFilterSubscription"));

export { MsgVpnReplicatedTopicArgs, MsgVpnReplicatedTopicState } from "./msgVpnReplicatedTopic";
export type MsgVpnReplicatedTopic = import("./msgVpnReplicatedTopic").MsgVpnReplicatedTopic;
export const MsgVpnReplicatedTopic: typeof import("./msgVpnReplicatedTopic").MsgVpnReplicatedTopic = null as any;
utilities.lazyLoad(exports, ["MsgVpnReplicatedTopic"], () => require("./msgVpnReplicatedTopic"));

export { MsgVpnRestDeliveryPointArgs, MsgVpnRestDeliveryPointState } from "./msgVpnRestDeliveryPoint";
export type MsgVpnRestDeliveryPoint = import("./msgVpnRestDeliveryPoint").MsgVpnRestDeliveryPoint;
export const MsgVpnRestDeliveryPoint: typeof import("./msgVpnRestDeliveryPoint").MsgVpnRestDeliveryPoint = null as any;
utilities.lazyLoad(exports, ["MsgVpnRestDeliveryPoint"], () => require("./msgVpnRestDeliveryPoint"));

export { MsgVpnRestDeliveryPointQueueBindingArgs, MsgVpnRestDeliveryPointQueueBindingState } from "./msgVpnRestDeliveryPointQueueBinding";
export type MsgVpnRestDeliveryPointQueueBinding = import("./msgVpnRestDeliveryPointQueueBinding").MsgVpnRestDeliveryPointQueueBinding;
export const MsgVpnRestDeliveryPointQueueBinding: typeof import("./msgVpnRestDeliveryPointQueueBinding").MsgVpnRestDeliveryPointQueueBinding = null as any;
utilities.lazyLoad(exports, ["MsgVpnRestDeliveryPointQueueBinding"], () => require("./msgVpnRestDeliveryPointQueueBinding"));

export { MsgVpnRestDeliveryPointQueueBindingProtectedRequestHeaderArgs, MsgVpnRestDeliveryPointQueueBindingProtectedRequestHeaderState } from "./msgVpnRestDeliveryPointQueueBindingProtectedRequestHeader";
export type MsgVpnRestDeliveryPointQueueBindingProtectedRequestHeader = import("./msgVpnRestDeliveryPointQueueBindingProtectedRequestHeader").MsgVpnRestDeliveryPointQueueBindingProtectedRequestHeader;
export const MsgVpnRestDeliveryPointQueueBindingProtectedRequestHeader: typeof import("./msgVpnRestDeliveryPointQueueBindingProtectedRequestHeader").MsgVpnRestDeliveryPointQueueBindingProtectedRequestHeader = null as any;
utilities.lazyLoad(exports, ["MsgVpnRestDeliveryPointQueueBindingProtectedRequestHeader"], () => require("./msgVpnRestDeliveryPointQueueBindingProtectedRequestHeader"));

export { MsgVpnRestDeliveryPointQueueBindingRequestHeaderArgs, MsgVpnRestDeliveryPointQueueBindingRequestHeaderState } from "./msgVpnRestDeliveryPointQueueBindingRequestHeader";
export type MsgVpnRestDeliveryPointQueueBindingRequestHeader = import("./msgVpnRestDeliveryPointQueueBindingRequestHeader").MsgVpnRestDeliveryPointQueueBindingRequestHeader;
export const MsgVpnRestDeliveryPointQueueBindingRequestHeader: typeof import("./msgVpnRestDeliveryPointQueueBindingRequestHeader").MsgVpnRestDeliveryPointQueueBindingRequestHeader = null as any;
utilities.lazyLoad(exports, ["MsgVpnRestDeliveryPointQueueBindingRequestHeader"], () => require("./msgVpnRestDeliveryPointQueueBindingRequestHeader"));

export { MsgVpnRestDeliveryPointRestConsumerArgs, MsgVpnRestDeliveryPointRestConsumerState } from "./msgVpnRestDeliveryPointRestConsumer";
export type MsgVpnRestDeliveryPointRestConsumer = import("./msgVpnRestDeliveryPointRestConsumer").MsgVpnRestDeliveryPointRestConsumer;
export const MsgVpnRestDeliveryPointRestConsumer: typeof import("./msgVpnRestDeliveryPointRestConsumer").MsgVpnRestDeliveryPointRestConsumer = null as any;
utilities.lazyLoad(exports, ["MsgVpnRestDeliveryPointRestConsumer"], () => require("./msgVpnRestDeliveryPointRestConsumer"));

export { MsgVpnRestDeliveryPointRestConsumerOauthJwtClaimArgs, MsgVpnRestDeliveryPointRestConsumerOauthJwtClaimState } from "./msgVpnRestDeliveryPointRestConsumerOauthJwtClaim";
export type MsgVpnRestDeliveryPointRestConsumerOauthJwtClaim = import("./msgVpnRestDeliveryPointRestConsumerOauthJwtClaim").MsgVpnRestDeliveryPointRestConsumerOauthJwtClaim;
export const MsgVpnRestDeliveryPointRestConsumerOauthJwtClaim: typeof import("./msgVpnRestDeliveryPointRestConsumerOauthJwtClaim").MsgVpnRestDeliveryPointRestConsumerOauthJwtClaim = null as any;
utilities.lazyLoad(exports, ["MsgVpnRestDeliveryPointRestConsumerOauthJwtClaim"], () => require("./msgVpnRestDeliveryPointRestConsumerOauthJwtClaim"));

export { MsgVpnSequencedTopicArgs, MsgVpnSequencedTopicState } from "./msgVpnSequencedTopic";
export type MsgVpnSequencedTopic = import("./msgVpnSequencedTopic").MsgVpnSequencedTopic;
export const MsgVpnSequencedTopic: typeof import("./msgVpnSequencedTopic").MsgVpnSequencedTopic = null as any;
utilities.lazyLoad(exports, ["MsgVpnSequencedTopic"], () => require("./msgVpnSequencedTopic"));

export { MsgVpnTelemetryProfileArgs, MsgVpnTelemetryProfileState } from "./msgVpnTelemetryProfile";
export type MsgVpnTelemetryProfile = import("./msgVpnTelemetryProfile").MsgVpnTelemetryProfile;
export const MsgVpnTelemetryProfile: typeof import("./msgVpnTelemetryProfile").MsgVpnTelemetryProfile = null as any;
utilities.lazyLoad(exports, ["MsgVpnTelemetryProfile"], () => require("./msgVpnTelemetryProfile"));

export { MsgVpnTelemetryProfileReceiverAclConnectExceptionArgs, MsgVpnTelemetryProfileReceiverAclConnectExceptionState } from "./msgVpnTelemetryProfileReceiverAclConnectException";
export type MsgVpnTelemetryProfileReceiverAclConnectException = import("./msgVpnTelemetryProfileReceiverAclConnectException").MsgVpnTelemetryProfileReceiverAclConnectException;
export const MsgVpnTelemetryProfileReceiverAclConnectException: typeof import("./msgVpnTelemetryProfileReceiverAclConnectException").MsgVpnTelemetryProfileReceiverAclConnectException = null as any;
utilities.lazyLoad(exports, ["MsgVpnTelemetryProfileReceiverAclConnectException"], () => require("./msgVpnTelemetryProfileReceiverAclConnectException"));

export { MsgVpnTelemetryProfileTraceFilterArgs, MsgVpnTelemetryProfileTraceFilterState } from "./msgVpnTelemetryProfileTraceFilter";
export type MsgVpnTelemetryProfileTraceFilter = import("./msgVpnTelemetryProfileTraceFilter").MsgVpnTelemetryProfileTraceFilter;
export const MsgVpnTelemetryProfileTraceFilter: typeof import("./msgVpnTelemetryProfileTraceFilter").MsgVpnTelemetryProfileTraceFilter = null as any;
utilities.lazyLoad(exports, ["MsgVpnTelemetryProfileTraceFilter"], () => require("./msgVpnTelemetryProfileTraceFilter"));

export { MsgVpnTelemetryProfileTraceFilterSubscriptionArgs, MsgVpnTelemetryProfileTraceFilterSubscriptionState } from "./msgVpnTelemetryProfileTraceFilterSubscription";
export type MsgVpnTelemetryProfileTraceFilterSubscription = import("./msgVpnTelemetryProfileTraceFilterSubscription").MsgVpnTelemetryProfileTraceFilterSubscription;
export const MsgVpnTelemetryProfileTraceFilterSubscription: typeof import("./msgVpnTelemetryProfileTraceFilterSubscription").MsgVpnTelemetryProfileTraceFilterSubscription = null as any;
utilities.lazyLoad(exports, ["MsgVpnTelemetryProfileTraceFilterSubscription"], () => require("./msgVpnTelemetryProfileTraceFilterSubscription"));

export { MsgVpnTopicEndpointArgs, MsgVpnTopicEndpointState } from "./msgVpnTopicEndpoint";
export type MsgVpnTopicEndpoint = import("./msgVpnTopicEndpoint").MsgVpnTopicEndpoint;
export const MsgVpnTopicEndpoint: typeof import("./msgVpnTopicEndpoint").MsgVpnTopicEndpoint = null as any;
utilities.lazyLoad(exports, ["MsgVpnTopicEndpoint"], () => require("./msgVpnTopicEndpoint"));

export { MsgVpnTopicEndpointTemplateArgs, MsgVpnTopicEndpointTemplateState } from "./msgVpnTopicEndpointTemplate";
export type MsgVpnTopicEndpointTemplate = import("./msgVpnTopicEndpointTemplate").MsgVpnTopicEndpointTemplate;
export const MsgVpnTopicEndpointTemplate: typeof import("./msgVpnTopicEndpointTemplate").MsgVpnTopicEndpointTemplate = null as any;
utilities.lazyLoad(exports, ["MsgVpnTopicEndpointTemplate"], () => require("./msgVpnTopicEndpointTemplate"));

export { OauthProfileArgs, OauthProfileState } from "./oauthProfile";
export type OauthProfile = import("./oauthProfile").OauthProfile;
export const OauthProfile: typeof import("./oauthProfile").OauthProfile = null as any;
utilities.lazyLoad(exports, ["OauthProfile"], () => require("./oauthProfile"));

export { OauthProfileAccessLevelGroupArgs, OauthProfileAccessLevelGroupState } from "./oauthProfileAccessLevelGroup";
export type OauthProfileAccessLevelGroup = import("./oauthProfileAccessLevelGroup").OauthProfileAccessLevelGroup;
export const OauthProfileAccessLevelGroup: typeof import("./oauthProfileAccessLevelGroup").OauthProfileAccessLevelGroup = null as any;
utilities.lazyLoad(exports, ["OauthProfileAccessLevelGroup"], () => require("./oauthProfileAccessLevelGroup"));

export { OauthProfileAccessLevelGroupMsgVpnAccessLevelExceptionArgs, OauthProfileAccessLevelGroupMsgVpnAccessLevelExceptionState } from "./oauthProfileAccessLevelGroupMsgVpnAccessLevelException";
export type OauthProfileAccessLevelGroupMsgVpnAccessLevelException = import("./oauthProfileAccessLevelGroupMsgVpnAccessLevelException").OauthProfileAccessLevelGroupMsgVpnAccessLevelException;
export const OauthProfileAccessLevelGroupMsgVpnAccessLevelException: typeof import("./oauthProfileAccessLevelGroupMsgVpnAccessLevelException").OauthProfileAccessLevelGroupMsgVpnAccessLevelException = null as any;
utilities.lazyLoad(exports, ["OauthProfileAccessLevelGroupMsgVpnAccessLevelException"], () => require("./oauthProfileAccessLevelGroupMsgVpnAccessLevelException"));

export { OauthProfileClientAllowedHostArgs, OauthProfileClientAllowedHostState } from "./oauthProfileClientAllowedHost";
export type OauthProfileClientAllowedHost = import("./oauthProfileClientAllowedHost").OauthProfileClientAllowedHost;
export const OauthProfileClientAllowedHost: typeof import("./oauthProfileClientAllowedHost").OauthProfileClientAllowedHost = null as any;
utilities.lazyLoad(exports, ["OauthProfileClientAllowedHost"], () => require("./oauthProfileClientAllowedHost"));

export { OauthProfileClientAuthorizationParameterArgs, OauthProfileClientAuthorizationParameterState } from "./oauthProfileClientAuthorizationParameter";
export type OauthProfileClientAuthorizationParameter = import("./oauthProfileClientAuthorizationParameter").OauthProfileClientAuthorizationParameter;
export const OauthProfileClientAuthorizationParameter: typeof import("./oauthProfileClientAuthorizationParameter").OauthProfileClientAuthorizationParameter = null as any;
utilities.lazyLoad(exports, ["OauthProfileClientAuthorizationParameter"], () => require("./oauthProfileClientAuthorizationParameter"));

export { OauthProfileClientRequiredClaimArgs, OauthProfileClientRequiredClaimState } from "./oauthProfileClientRequiredClaim";
export type OauthProfileClientRequiredClaim = import("./oauthProfileClientRequiredClaim").OauthProfileClientRequiredClaim;
export const OauthProfileClientRequiredClaim: typeof import("./oauthProfileClientRequiredClaim").OauthProfileClientRequiredClaim = null as any;
utilities.lazyLoad(exports, ["OauthProfileClientRequiredClaim"], () => require("./oauthProfileClientRequiredClaim"));

export { OauthProfileDefaultMsgVpnAccessLevelExceptionArgs, OauthProfileDefaultMsgVpnAccessLevelExceptionState } from "./oauthProfileDefaultMsgVpnAccessLevelException";
export type OauthProfileDefaultMsgVpnAccessLevelException = import("./oauthProfileDefaultMsgVpnAccessLevelException").OauthProfileDefaultMsgVpnAccessLevelException;
export const OauthProfileDefaultMsgVpnAccessLevelException: typeof import("./oauthProfileDefaultMsgVpnAccessLevelException").OauthProfileDefaultMsgVpnAccessLevelException = null as any;
utilities.lazyLoad(exports, ["OauthProfileDefaultMsgVpnAccessLevelException"], () => require("./oauthProfileDefaultMsgVpnAccessLevelException"));

export { OauthProfileResourceServerRequiredClaimArgs, OauthProfileResourceServerRequiredClaimState } from "./oauthProfileResourceServerRequiredClaim";
export type OauthProfileResourceServerRequiredClaim = import("./oauthProfileResourceServerRequiredClaim").OauthProfileResourceServerRequiredClaim;
export const OauthProfileResourceServerRequiredClaim: typeof import("./oauthProfileResourceServerRequiredClaim").OauthProfileResourceServerRequiredClaim = null as any;
utilities.lazyLoad(exports, ["OauthProfileResourceServerRequiredClaim"], () => require("./oauthProfileResourceServerRequiredClaim"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { ProxyArgs, ProxyState } from "./proxy";
export type Proxy = import("./proxy").Proxy;
export const Proxy: typeof import("./proxy").Proxy = null as any;
utilities.lazyLoad(exports, ["Proxy"], () => require("./proxy"));

export { VirtualHostnameArgs, VirtualHostnameState } from "./virtualHostname";
export type VirtualHostname = import("./virtualHostname").VirtualHostname;
export const VirtualHostname: typeof import("./virtualHostname").VirtualHostname = null as any;
utilities.lazyLoad(exports, ["VirtualHostname"], () => require("./virtualHostname"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "solacebroker:index/broker:Broker":
                return new Broker(name, <any>undefined, { urn })
            case "solacebroker:index/clientCertAuthority:ClientCertAuthority":
                return new ClientCertAuthority(name, <any>undefined, { urn })
            case "solacebroker:index/clientCertAuthorityOcspTlsTrustedCommonName:ClientCertAuthorityOcspTlsTrustedCommonName":
                return new ClientCertAuthorityOcspTlsTrustedCommonName(name, <any>undefined, { urn })
            case "solacebroker:index/dmrCluster:DmrCluster":
                return new DmrCluster(name, <any>undefined, { urn })
            case "solacebroker:index/dmrClusterCertMatchingRule:DmrClusterCertMatchingRule":
                return new DmrClusterCertMatchingRule(name, <any>undefined, { urn })
            case "solacebroker:index/dmrClusterCertMatchingRuleAttributeFilter:DmrClusterCertMatchingRuleAttributeFilter":
                return new DmrClusterCertMatchingRuleAttributeFilter(name, <any>undefined, { urn })
            case "solacebroker:index/dmrClusterCertMatchingRuleCondition:DmrClusterCertMatchingRuleCondition":
                return new DmrClusterCertMatchingRuleCondition(name, <any>undefined, { urn })
            case "solacebroker:index/dmrClusterLink:DmrClusterLink":
                return new DmrClusterLink(name, <any>undefined, { urn })
            case "solacebroker:index/dmrClusterLinkAttribute:DmrClusterLinkAttribute":
                return new DmrClusterLinkAttribute(name, <any>undefined, { urn })
            case "solacebroker:index/dmrClusterLinkRemoteAddress:DmrClusterLinkRemoteAddress":
                return new DmrClusterLinkRemoteAddress(name, <any>undefined, { urn })
            case "solacebroker:index/domainCertAuthority:DomainCertAuthority":
                return new DomainCertAuthority(name, <any>undefined, { urn })
            case "solacebroker:index/msgVpn:MsgVpn":
                return new MsgVpn(name, <any>undefined, { urn })
            case "solacebroker:index/msgVpnAclProfile:MsgVpnAclProfile":
                return new MsgVpnAclProfile(name, <any>undefined, { urn })
            case "solacebroker:index/msgVpnAclProfileClientConnectException:MsgVpnAclProfileClientConnectException":
                return new MsgVpnAclProfileClientConnectException(name, <any>undefined, { urn })
            case "solacebroker:index/msgVpnAclProfilePublishTopicException:MsgVpnAclProfilePublishTopicException":
                return new MsgVpnAclProfilePublishTopicException(name, <any>undefined, { urn })
            case "solacebroker:index/msgVpnAclProfileSubscribeShareNameException:MsgVpnAclProfileSubscribeShareNameException":
                return new MsgVpnAclProfileSubscribeShareNameException(name, <any>undefined, { urn })
            case "solacebroker:index/msgVpnAclProfileSubscribeTopicException:MsgVpnAclProfileSubscribeTopicException":
                return new MsgVpnAclProfileSubscribeTopicException(name, <any>undefined, { urn })
            case "solacebroker:index/msgVpnAuthenticationKerberosRealm:MsgVpnAuthenticationKerberosRealm":
                return new MsgVpnAuthenticationKerberosRealm(name, <any>undefined, { urn })
            case "solacebroker:index/msgVpnAuthenticationOauthProfile:MsgVpnAuthenticationOauthProfile":
                return new MsgVpnAuthenticationOauthProfile(name, <any>undefined, { urn })
            case "solacebroker:index/msgVpnAuthenticationOauthProfileClientRequiredClaim:MsgVpnAuthenticationOauthProfileClientRequiredClaim":
                return new MsgVpnAuthenticationOauthProfileClientRequiredClaim(name, <any>undefined, { urn })
            case "solacebroker:index/msgVpnAuthenticationOauthProfileResourceServerRequiredClaim:MsgVpnAuthenticationOauthProfileResourceServerRequiredClaim":
                return new MsgVpnAuthenticationOauthProfileResourceServerRequiredClaim(name, <any>undefined, { urn })
            case "solacebroker:index/msgVpnAuthorizationGroup:MsgVpnAuthorizationGroup":
                return new MsgVpnAuthorizationGroup(name, <any>undefined, { urn })
            case "solacebroker:index/msgVpnBridge:MsgVpnBridge":
                return new MsgVpnBridge(name, <any>undefined, { urn })
            case "solacebroker:index/msgVpnBridgeRemoteMsgVpn:MsgVpnBridgeRemoteMsgVpn":
                return new MsgVpnBridgeRemoteMsgVpn(name, <any>undefined, { urn })
            case "solacebroker:index/msgVpnBridgeRemoteSubscription:MsgVpnBridgeRemoteSubscription":
                return new MsgVpnBridgeRemoteSubscription(name, <any>undefined, { urn })
            case "solacebroker:index/msgVpnCertMatchingRule:MsgVpnCertMatchingRule":
                return new MsgVpnCertMatchingRule(name, <any>undefined, { urn })
            case "solacebroker:index/msgVpnCertMatchingRuleAttributeFilter:MsgVpnCertMatchingRuleAttributeFilter":
                return new MsgVpnCertMatchingRuleAttributeFilter(name, <any>undefined, { urn })
            case "solacebroker:index/msgVpnCertMatchingRuleCondition:MsgVpnCertMatchingRuleCondition":
                return new MsgVpnCertMatchingRuleCondition(name, <any>undefined, { urn })
            case "solacebroker:index/msgVpnClientProfile:MsgVpnClientProfile":
                return new MsgVpnClientProfile(name, <any>undefined, { urn })
            case "solacebroker:index/msgVpnClientUsername:MsgVpnClientUsername":
                return new MsgVpnClientUsername(name, <any>undefined, { urn })
            case "solacebroker:index/msgVpnClientUsernameAttribute:MsgVpnClientUsernameAttribute":
                return new MsgVpnClientUsernameAttribute(name, <any>undefined, { urn })
            case "solacebroker:index/msgVpnDistributedCache:MsgVpnDistributedCache":
                return new MsgVpnDistributedCache(name, <any>undefined, { urn })
            case "solacebroker:index/msgVpnDistributedCacheCluster:MsgVpnDistributedCacheCluster":
                return new MsgVpnDistributedCacheCluster(name, <any>undefined, { urn })
            case "solacebroker:index/msgVpnDistributedCacheClusterGlobalCachingHomeCluster:MsgVpnDistributedCacheClusterGlobalCachingHomeCluster":
                return new MsgVpnDistributedCacheClusterGlobalCachingHomeCluster(name, <any>undefined, { urn })
            case "solacebroker:index/msgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefix:MsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefix":
                return new MsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefix(name, <any>undefined, { urn })
            case "solacebroker:index/msgVpnDistributedCacheClusterInstance:MsgVpnDistributedCacheClusterInstance":
                return new MsgVpnDistributedCacheClusterInstance(name, <any>undefined, { urn })
            case "solacebroker:index/msgVpnDistributedCacheClusterTopic:MsgVpnDistributedCacheClusterTopic":
                return new MsgVpnDistributedCacheClusterTopic(name, <any>undefined, { urn })
            case "solacebroker:index/msgVpnDmrBridge:MsgVpnDmrBridge":
                return new MsgVpnDmrBridge(name, <any>undefined, { urn })
            case "solacebroker:index/msgVpnJndiConnectionFactory:MsgVpnJndiConnectionFactory":
                return new MsgVpnJndiConnectionFactory(name, <any>undefined, { urn })
            case "solacebroker:index/msgVpnJndiQueue:MsgVpnJndiQueue":
                return new MsgVpnJndiQueue(name, <any>undefined, { urn })
            case "solacebroker:index/msgVpnJndiTopic:MsgVpnJndiTopic":
                return new MsgVpnJndiTopic(name, <any>undefined, { urn })
            case "solacebroker:index/msgVpnKafkaReceiver:MsgVpnKafkaReceiver":
                return new MsgVpnKafkaReceiver(name, <any>undefined, { urn })
            case "solacebroker:index/msgVpnKafkaReceiverTopicBinding:MsgVpnKafkaReceiverTopicBinding":
                return new MsgVpnKafkaReceiverTopicBinding(name, <any>undefined, { urn })
            case "solacebroker:index/msgVpnKafkaSender:MsgVpnKafkaSender":
                return new MsgVpnKafkaSender(name, <any>undefined, { urn })
            case "solacebroker:index/msgVpnKafkaSenderQueueBinding:MsgVpnKafkaSenderQueueBinding":
                return new MsgVpnKafkaSenderQueueBinding(name, <any>undefined, { urn })
            case "solacebroker:index/msgVpnMqttRetainCache:MsgVpnMqttRetainCache":
                return new MsgVpnMqttRetainCache(name, <any>undefined, { urn })
            case "solacebroker:index/msgVpnMqttSession:MsgVpnMqttSession":
                return new MsgVpnMqttSession(name, <any>undefined, { urn })
            case "solacebroker:index/msgVpnMqttSessionSubscription:MsgVpnMqttSessionSubscription":
                return new MsgVpnMqttSessionSubscription(name, <any>undefined, { urn })
            case "solacebroker:index/msgVpnProxy:MsgVpnProxy":
                return new MsgVpnProxy(name, <any>undefined, { urn })
            case "solacebroker:index/msgVpnQueue:MsgVpnQueue":
                return new MsgVpnQueue(name, <any>undefined, { urn })
            case "solacebroker:index/msgVpnQueueSubscription:MsgVpnQueueSubscription":
                return new MsgVpnQueueSubscription(name, <any>undefined, { urn })
            case "solacebroker:index/msgVpnQueueTemplate:MsgVpnQueueTemplate":
                return new MsgVpnQueueTemplate(name, <any>undefined, { urn })
            case "solacebroker:index/msgVpnReplayLog:MsgVpnReplayLog":
                return new MsgVpnReplayLog(name, <any>undefined, { urn })
            case "solacebroker:index/msgVpnReplayLogTopicFilterSubscription:MsgVpnReplayLogTopicFilterSubscription":
                return new MsgVpnReplayLogTopicFilterSubscription(name, <any>undefined, { urn })
            case "solacebroker:index/msgVpnReplicatedTopic:MsgVpnReplicatedTopic":
                return new MsgVpnReplicatedTopic(name, <any>undefined, { urn })
            case "solacebroker:index/msgVpnRestDeliveryPoint:MsgVpnRestDeliveryPoint":
                return new MsgVpnRestDeliveryPoint(name, <any>undefined, { urn })
            case "solacebroker:index/msgVpnRestDeliveryPointQueueBinding:MsgVpnRestDeliveryPointQueueBinding":
                return new MsgVpnRestDeliveryPointQueueBinding(name, <any>undefined, { urn })
            case "solacebroker:index/msgVpnRestDeliveryPointQueueBindingProtectedRequestHeader:MsgVpnRestDeliveryPointQueueBindingProtectedRequestHeader":
                return new MsgVpnRestDeliveryPointQueueBindingProtectedRequestHeader(name, <any>undefined, { urn })
            case "solacebroker:index/msgVpnRestDeliveryPointQueueBindingRequestHeader:MsgVpnRestDeliveryPointQueueBindingRequestHeader":
                return new MsgVpnRestDeliveryPointQueueBindingRequestHeader(name, <any>undefined, { urn })
            case "solacebroker:index/msgVpnRestDeliveryPointRestConsumer:MsgVpnRestDeliveryPointRestConsumer":
                return new MsgVpnRestDeliveryPointRestConsumer(name, <any>undefined, { urn })
            case "solacebroker:index/msgVpnRestDeliveryPointRestConsumerOauthJwtClaim:MsgVpnRestDeliveryPointRestConsumerOauthJwtClaim":
                return new MsgVpnRestDeliveryPointRestConsumerOauthJwtClaim(name, <any>undefined, { urn })
            case "solacebroker:index/msgVpnSequencedTopic:MsgVpnSequencedTopic":
                return new MsgVpnSequencedTopic(name, <any>undefined, { urn })
            case "solacebroker:index/msgVpnTelemetryProfile:MsgVpnTelemetryProfile":
                return new MsgVpnTelemetryProfile(name, <any>undefined, { urn })
            case "solacebroker:index/msgVpnTelemetryProfileReceiverAclConnectException:MsgVpnTelemetryProfileReceiverAclConnectException":
                return new MsgVpnTelemetryProfileReceiverAclConnectException(name, <any>undefined, { urn })
            case "solacebroker:index/msgVpnTelemetryProfileTraceFilter:MsgVpnTelemetryProfileTraceFilter":
                return new MsgVpnTelemetryProfileTraceFilter(name, <any>undefined, { urn })
            case "solacebroker:index/msgVpnTelemetryProfileTraceFilterSubscription:MsgVpnTelemetryProfileTraceFilterSubscription":
                return new MsgVpnTelemetryProfileTraceFilterSubscription(name, <any>undefined, { urn })
            case "solacebroker:index/msgVpnTopicEndpoint:MsgVpnTopicEndpoint":
                return new MsgVpnTopicEndpoint(name, <any>undefined, { urn })
            case "solacebroker:index/msgVpnTopicEndpointTemplate:MsgVpnTopicEndpointTemplate":
                return new MsgVpnTopicEndpointTemplate(name, <any>undefined, { urn })
            case "solacebroker:index/oauthProfile:OauthProfile":
                return new OauthProfile(name, <any>undefined, { urn })
            case "solacebroker:index/oauthProfileAccessLevelGroup:OauthProfileAccessLevelGroup":
                return new OauthProfileAccessLevelGroup(name, <any>undefined, { urn })
            case "solacebroker:index/oauthProfileAccessLevelGroupMsgVpnAccessLevelException:OauthProfileAccessLevelGroupMsgVpnAccessLevelException":
                return new OauthProfileAccessLevelGroupMsgVpnAccessLevelException(name, <any>undefined, { urn })
            case "solacebroker:index/oauthProfileClientAllowedHost:OauthProfileClientAllowedHost":
                return new OauthProfileClientAllowedHost(name, <any>undefined, { urn })
            case "solacebroker:index/oauthProfileClientAuthorizationParameter:OauthProfileClientAuthorizationParameter":
                return new OauthProfileClientAuthorizationParameter(name, <any>undefined, { urn })
            case "solacebroker:index/oauthProfileClientRequiredClaim:OauthProfileClientRequiredClaim":
                return new OauthProfileClientRequiredClaim(name, <any>undefined, { urn })
            case "solacebroker:index/oauthProfileDefaultMsgVpnAccessLevelException:OauthProfileDefaultMsgVpnAccessLevelException":
                return new OauthProfileDefaultMsgVpnAccessLevelException(name, <any>undefined, { urn })
            case "solacebroker:index/oauthProfileResourceServerRequiredClaim:OauthProfileResourceServerRequiredClaim":
                return new OauthProfileResourceServerRequiredClaim(name, <any>undefined, { urn })
            case "solacebroker:index/proxy:Proxy":
                return new Proxy(name, <any>undefined, { urn })
            case "solacebroker:index/virtualHostname:VirtualHostname":
                return new VirtualHostname(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("solacebroker", "index/broker", _module)
pulumi.runtime.registerResourceModule("solacebroker", "index/clientCertAuthority", _module)
pulumi.runtime.registerResourceModule("solacebroker", "index/clientCertAuthorityOcspTlsTrustedCommonName", _module)
pulumi.runtime.registerResourceModule("solacebroker", "index/dmrCluster", _module)
pulumi.runtime.registerResourceModule("solacebroker", "index/dmrClusterCertMatchingRule", _module)
pulumi.runtime.registerResourceModule("solacebroker", "index/dmrClusterCertMatchingRuleAttributeFilter", _module)
pulumi.runtime.registerResourceModule("solacebroker", "index/dmrClusterCertMatchingRuleCondition", _module)
pulumi.runtime.registerResourceModule("solacebroker", "index/dmrClusterLink", _module)
pulumi.runtime.registerResourceModule("solacebroker", "index/dmrClusterLinkAttribute", _module)
pulumi.runtime.registerResourceModule("solacebroker", "index/dmrClusterLinkRemoteAddress", _module)
pulumi.runtime.registerResourceModule("solacebroker", "index/domainCertAuthority", _module)
pulumi.runtime.registerResourceModule("solacebroker", "index/msgVpn", _module)
pulumi.runtime.registerResourceModule("solacebroker", "index/msgVpnAclProfile", _module)
pulumi.runtime.registerResourceModule("solacebroker", "index/msgVpnAclProfileClientConnectException", _module)
pulumi.runtime.registerResourceModule("solacebroker", "index/msgVpnAclProfilePublishTopicException", _module)
pulumi.runtime.registerResourceModule("solacebroker", "index/msgVpnAclProfileSubscribeShareNameException", _module)
pulumi.runtime.registerResourceModule("solacebroker", "index/msgVpnAclProfileSubscribeTopicException", _module)
pulumi.runtime.registerResourceModule("solacebroker", "index/msgVpnAuthenticationKerberosRealm", _module)
pulumi.runtime.registerResourceModule("solacebroker", "index/msgVpnAuthenticationOauthProfile", _module)
pulumi.runtime.registerResourceModule("solacebroker", "index/msgVpnAuthenticationOauthProfileClientRequiredClaim", _module)
pulumi.runtime.registerResourceModule("solacebroker", "index/msgVpnAuthenticationOauthProfileResourceServerRequiredClaim", _module)
pulumi.runtime.registerResourceModule("solacebroker", "index/msgVpnAuthorizationGroup", _module)
pulumi.runtime.registerResourceModule("solacebroker", "index/msgVpnBridge", _module)
pulumi.runtime.registerResourceModule("solacebroker", "index/msgVpnBridgeRemoteMsgVpn", _module)
pulumi.runtime.registerResourceModule("solacebroker", "index/msgVpnBridgeRemoteSubscription", _module)
pulumi.runtime.registerResourceModule("solacebroker", "index/msgVpnCertMatchingRule", _module)
pulumi.runtime.registerResourceModule("solacebroker", "index/msgVpnCertMatchingRuleAttributeFilter", _module)
pulumi.runtime.registerResourceModule("solacebroker", "index/msgVpnCertMatchingRuleCondition", _module)
pulumi.runtime.registerResourceModule("solacebroker", "index/msgVpnClientProfile", _module)
pulumi.runtime.registerResourceModule("solacebroker", "index/msgVpnClientUsername", _module)
pulumi.runtime.registerResourceModule("solacebroker", "index/msgVpnClientUsernameAttribute", _module)
pulumi.runtime.registerResourceModule("solacebroker", "index/msgVpnDistributedCache", _module)
pulumi.runtime.registerResourceModule("solacebroker", "index/msgVpnDistributedCacheCluster", _module)
pulumi.runtime.registerResourceModule("solacebroker", "index/msgVpnDistributedCacheClusterGlobalCachingHomeCluster", _module)
pulumi.runtime.registerResourceModule("solacebroker", "index/msgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefix", _module)
pulumi.runtime.registerResourceModule("solacebroker", "index/msgVpnDistributedCacheClusterInstance", _module)
pulumi.runtime.registerResourceModule("solacebroker", "index/msgVpnDistributedCacheClusterTopic", _module)
pulumi.runtime.registerResourceModule("solacebroker", "index/msgVpnDmrBridge", _module)
pulumi.runtime.registerResourceModule("solacebroker", "index/msgVpnJndiConnectionFactory", _module)
pulumi.runtime.registerResourceModule("solacebroker", "index/msgVpnJndiQueue", _module)
pulumi.runtime.registerResourceModule("solacebroker", "index/msgVpnJndiTopic", _module)
pulumi.runtime.registerResourceModule("solacebroker", "index/msgVpnKafkaReceiver", _module)
pulumi.runtime.registerResourceModule("solacebroker", "index/msgVpnKafkaReceiverTopicBinding", _module)
pulumi.runtime.registerResourceModule("solacebroker", "index/msgVpnKafkaSender", _module)
pulumi.runtime.registerResourceModule("solacebroker", "index/msgVpnKafkaSenderQueueBinding", _module)
pulumi.runtime.registerResourceModule("solacebroker", "index/msgVpnMqttRetainCache", _module)
pulumi.runtime.registerResourceModule("solacebroker", "index/msgVpnMqttSession", _module)
pulumi.runtime.registerResourceModule("solacebroker", "index/msgVpnMqttSessionSubscription", _module)
pulumi.runtime.registerResourceModule("solacebroker", "index/msgVpnProxy", _module)
pulumi.runtime.registerResourceModule("solacebroker", "index/msgVpnQueue", _module)
pulumi.runtime.registerResourceModule("solacebroker", "index/msgVpnQueueSubscription", _module)
pulumi.runtime.registerResourceModule("solacebroker", "index/msgVpnQueueTemplate", _module)
pulumi.runtime.registerResourceModule("solacebroker", "index/msgVpnReplayLog", _module)
pulumi.runtime.registerResourceModule("solacebroker", "index/msgVpnReplayLogTopicFilterSubscription", _module)
pulumi.runtime.registerResourceModule("solacebroker", "index/msgVpnReplicatedTopic", _module)
pulumi.runtime.registerResourceModule("solacebroker", "index/msgVpnRestDeliveryPoint", _module)
pulumi.runtime.registerResourceModule("solacebroker", "index/msgVpnRestDeliveryPointQueueBinding", _module)
pulumi.runtime.registerResourceModule("solacebroker", "index/msgVpnRestDeliveryPointQueueBindingProtectedRequestHeader", _module)
pulumi.runtime.registerResourceModule("solacebroker", "index/msgVpnRestDeliveryPointQueueBindingRequestHeader", _module)
pulumi.runtime.registerResourceModule("solacebroker", "index/msgVpnRestDeliveryPointRestConsumer", _module)
pulumi.runtime.registerResourceModule("solacebroker", "index/msgVpnRestDeliveryPointRestConsumerOauthJwtClaim", _module)
pulumi.runtime.registerResourceModule("solacebroker", "index/msgVpnSequencedTopic", _module)
pulumi.runtime.registerResourceModule("solacebroker", "index/msgVpnTelemetryProfile", _module)
pulumi.runtime.registerResourceModule("solacebroker", "index/msgVpnTelemetryProfileReceiverAclConnectException", _module)
pulumi.runtime.registerResourceModule("solacebroker", "index/msgVpnTelemetryProfileTraceFilter", _module)
pulumi.runtime.registerResourceModule("solacebroker", "index/msgVpnTelemetryProfileTraceFilterSubscription", _module)
pulumi.runtime.registerResourceModule("solacebroker", "index/msgVpnTopicEndpoint", _module)
pulumi.runtime.registerResourceModule("solacebroker", "index/msgVpnTopicEndpointTemplate", _module)
pulumi.runtime.registerResourceModule("solacebroker", "index/oauthProfile", _module)
pulumi.runtime.registerResourceModule("solacebroker", "index/oauthProfileAccessLevelGroup", _module)
pulumi.runtime.registerResourceModule("solacebroker", "index/oauthProfileAccessLevelGroupMsgVpnAccessLevelException", _module)
pulumi.runtime.registerResourceModule("solacebroker", "index/oauthProfileClientAllowedHost", _module)
pulumi.runtime.registerResourceModule("solacebroker", "index/oauthProfileClientAuthorizationParameter", _module)
pulumi.runtime.registerResourceModule("solacebroker", "index/oauthProfileClientRequiredClaim", _module)
pulumi.runtime.registerResourceModule("solacebroker", "index/oauthProfileDefaultMsgVpnAccessLevelException", _module)
pulumi.runtime.registerResourceModule("solacebroker", "index/oauthProfileResourceServerRequiredClaim", _module)
pulumi.runtime.registerResourceModule("solacebroker", "index/proxy", _module)
pulumi.runtime.registerResourceModule("solacebroker", "index/virtualHostname", _module)
pulumi.runtime.registerResourcePackage("solacebroker", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:solacebroker") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
