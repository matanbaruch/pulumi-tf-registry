// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getMsgVpnDistributedCacheCluster(args: GetMsgVpnDistributedCacheClusterArgs, opts?: pulumi.InvokeOptions): Promise<GetMsgVpnDistributedCacheClusterResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("solacebroker:index/getMsgVpnDistributedCacheCluster:getMsgVpnDistributedCacheCluster", {
        "cacheName": args.cacheName,
        "clusterName": args.clusterName,
        "msgVpnName": args.msgVpnName,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getMsgVpnDistributedCacheCluster.
 */
export interface GetMsgVpnDistributedCacheClusterArgs {
    cacheName: string;
    clusterName: string;
    msgVpnName: string;
}

/**
 * A collection of values returned by getMsgVpnDistributedCacheCluster.
 */
export interface GetMsgVpnDistributedCacheClusterResult {
    readonly cacheName: string;
    readonly clusterName: string;
    readonly deliverToOneOverrideEnabled: boolean;
    readonly enabled: boolean;
    readonly eventDataByteRateThreshold: outputs.GetMsgVpnDistributedCacheClusterEventDataByteRateThreshold;
    readonly eventDataMsgRateThreshold: outputs.GetMsgVpnDistributedCacheClusterEventDataMsgRateThreshold;
    readonly eventMaxMemoryThreshold: outputs.GetMsgVpnDistributedCacheClusterEventMaxMemoryThreshold;
    readonly eventMaxTopicsThreshold: outputs.GetMsgVpnDistributedCacheClusterEventMaxTopicsThreshold;
    readonly eventRequestQueueDepthThreshold: outputs.GetMsgVpnDistributedCacheClusterEventRequestQueueDepthThreshold;
    readonly eventRequestRateThreshold: outputs.GetMsgVpnDistributedCacheClusterEventRequestRateThreshold;
    readonly eventResponseRateThreshold: outputs.GetMsgVpnDistributedCacheClusterEventResponseRateThreshold;
    readonly globalCachingEnabled: boolean;
    readonly globalCachingHeartbeat: number;
    readonly globalCachingTopicLifetime: number;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly maxMemory: number;
    readonly maxMsgsPerTopic: number;
    readonly maxRequestQueueDepth: number;
    readonly maxTopicCount: number;
    readonly msgLifetime: number;
    readonly msgVpnName: string;
    readonly newTopicAdvertisementEnabled: boolean;
}
export function getMsgVpnDistributedCacheClusterOutput(args: GetMsgVpnDistributedCacheClusterOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetMsgVpnDistributedCacheClusterResult> {
    return pulumi.output(args).apply((a: any) => getMsgVpnDistributedCacheCluster(a, opts))
}

/**
 * A collection of arguments for invoking getMsgVpnDistributedCacheCluster.
 */
export interface GetMsgVpnDistributedCacheClusterOutputArgs {
    cacheName: pulumi.Input<string>;
    clusterName: pulumi.Input<string>;
    msgVpnName: pulumi.Input<string>;
}
