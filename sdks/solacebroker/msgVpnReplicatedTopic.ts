// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class MsgVpnReplicatedTopic extends pulumi.CustomResource {
    /**
     * Get an existing MsgVpnReplicatedTopic resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MsgVpnReplicatedTopicState, opts?: pulumi.CustomResourceOptions): MsgVpnReplicatedTopic {
        return new MsgVpnReplicatedTopic(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'solacebroker:index/msgVpnReplicatedTopic:MsgVpnReplicatedTopic';

    /**
     * Returns true if the given object is an instance of MsgVpnReplicatedTopic.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MsgVpnReplicatedTopic {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MsgVpnReplicatedTopic.__pulumiType;
    }

    /**
     * The name of the Message VPN.
     */
    public readonly msgVpnName!: pulumi.Output<string>;
    /**
     * The topic for applying replication. Published messages matching this topic will be replicated to the standby site.
     */
    public readonly replicatedTopic!: pulumi.Output<string>;
    /**
     * The replication mode for the Replicated Topic. Changes to this attribute are synchronized to HA mates and replication
     * sites via config-sync. The default value is `"async"`. The allowed values and their meaning are: <pre> "sync" - Messages
     * are acknowledged when replicated (spooled remotely). "async" - Messages are acknowledged when pending replication
     * (spooled locally). </pre>
     */
    public readonly replicationMode!: pulumi.Output<string | undefined>;

    /**
     * Create a MsgVpnReplicatedTopic resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MsgVpnReplicatedTopicArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MsgVpnReplicatedTopicArgs | MsgVpnReplicatedTopicState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MsgVpnReplicatedTopicState | undefined;
            resourceInputs["msgVpnName"] = state ? state.msgVpnName : undefined;
            resourceInputs["replicatedTopic"] = state ? state.replicatedTopic : undefined;
            resourceInputs["replicationMode"] = state ? state.replicationMode : undefined;
        } else {
            const args = argsOrState as MsgVpnReplicatedTopicArgs | undefined;
            if ((!args || args.msgVpnName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'msgVpnName'");
            }
            if ((!args || args.replicatedTopic === undefined) && !opts.urn) {
                throw new Error("Missing required property 'replicatedTopic'");
            }
            resourceInputs["msgVpnName"] = args ? args.msgVpnName : undefined;
            resourceInputs["replicatedTopic"] = args ? args.replicatedTopic : undefined;
            resourceInputs["replicationMode"] = args ? args.replicationMode : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MsgVpnReplicatedTopic.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering MsgVpnReplicatedTopic resources.
 */
export interface MsgVpnReplicatedTopicState {
    /**
     * The name of the Message VPN.
     */
    msgVpnName?: pulumi.Input<string>;
    /**
     * The topic for applying replication. Published messages matching this topic will be replicated to the standby site.
     */
    replicatedTopic?: pulumi.Input<string>;
    /**
     * The replication mode for the Replicated Topic. Changes to this attribute are synchronized to HA mates and replication
     * sites via config-sync. The default value is `"async"`. The allowed values and their meaning are: <pre> "sync" - Messages
     * are acknowledged when replicated (spooled remotely). "async" - Messages are acknowledged when pending replication
     * (spooled locally). </pre>
     */
    replicationMode?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a MsgVpnReplicatedTopic resource.
 */
export interface MsgVpnReplicatedTopicArgs {
    /**
     * The name of the Message VPN.
     */
    msgVpnName: pulumi.Input<string>;
    /**
     * The topic for applying replication. Published messages matching this topic will be replicated to the standby site.
     */
    replicatedTopic: pulumi.Input<string>;
    /**
     * The replication mode for the Replicated Topic. Changes to this attribute are synchronized to HA mates and replication
     * sites via config-sync. The default value is `"async"`. The allowed values and their meaning are: <pre> "sync" - Messages
     * are acknowledged when replicated (spooled remotely). "async" - Messages are acknowledged when pending replication
     * (spooled locally). </pre>
     */
    replicationMode?: pulumi.Input<string>;
}
