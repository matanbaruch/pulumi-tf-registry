// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getMsgVpnJndiConnectionFactory(args: GetMsgVpnJndiConnectionFactoryArgs, opts?: pulumi.InvokeOptions): Promise<GetMsgVpnJndiConnectionFactoryResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("solacebroker:index/getMsgVpnJndiConnectionFactory:getMsgVpnJndiConnectionFactory", {
        "connectionFactoryName": args.connectionFactoryName,
        "msgVpnName": args.msgVpnName,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getMsgVpnJndiConnectionFactory.
 */
export interface GetMsgVpnJndiConnectionFactoryArgs {
    connectionFactoryName: string;
    msgVpnName: string;
}

/**
 * A collection of values returned by getMsgVpnJndiConnectionFactory.
 */
export interface GetMsgVpnJndiConnectionFactoryResult {
    readonly allowDuplicateClientIdEnabled: boolean;
    readonly clientDescription: string;
    readonly clientId: string;
    readonly connectionFactoryName: string;
    readonly dtoReceiveOverrideEnabled: boolean;
    readonly dtoReceiveSubscriberLocalPriority: number;
    readonly dtoReceiveSubscriberNetworkPriority: number;
    readonly dtoSendEnabled: boolean;
    readonly dynamicEndpointCreateDurableEnabled: boolean;
    readonly dynamicEndpointRespectTtlEnabled: boolean;
    readonly guaranteedReceiveAckTimeout: number;
    readonly guaranteedReceiveReconnectRetryCount: number;
    readonly guaranteedReceiveReconnectRetryWait: number;
    readonly guaranteedReceiveWindowSize: number;
    readonly guaranteedReceiveWindowSizeAckThreshold: number;
    readonly guaranteedSendAckTimeout: number;
    readonly guaranteedSendWindowSize: number;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly messagingDefaultDeliveryMode: string;
    readonly messagingDefaultDmqEligibleEnabled: boolean;
    readonly messagingDefaultElidingEligibleEnabled: boolean;
    readonly messagingJmsxUserIdEnabled: boolean;
    readonly messagingTextInXmlPayloadEnabled: boolean;
    readonly msgVpnName: string;
    readonly transportCompressionLevel: number;
    readonly transportConnectRetryCount: number;
    readonly transportConnectRetryPerHostCount: number;
    readonly transportConnectTimeout: number;
    readonly transportDirectTransportEnabled: boolean;
    readonly transportKeepaliveCount: number;
    readonly transportKeepaliveEnabled: boolean;
    readonly transportKeepaliveInterval: number;
    readonly transportMsgCallbackOnIoThreadEnabled: boolean;
    readonly transportOptimizeDirectEnabled: boolean;
    readonly transportPort: number;
    readonly transportReadTimeout: number;
    readonly transportReceiveBufferSize: number;
    readonly transportReconnectRetryCount: number;
    readonly transportReconnectRetryWait: number;
    readonly transportSendBufferSize: number;
    readonly transportTcpNoDelayEnabled: boolean;
    readonly xaEnabled: boolean;
}
export function getMsgVpnJndiConnectionFactoryOutput(args: GetMsgVpnJndiConnectionFactoryOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetMsgVpnJndiConnectionFactoryResult> {
    return pulumi.output(args).apply((a: any) => getMsgVpnJndiConnectionFactory(a, opts))
}

/**
 * A collection of arguments for invoking getMsgVpnJndiConnectionFactory.
 */
export interface GetMsgVpnJndiConnectionFactoryOutputArgs {
    connectionFactoryName: pulumi.Input<string>;
    msgVpnName: pulumi.Input<string>;
}
