// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

declare var exports: any;
const __config = new pulumi.Config("solacebroker");

/**
 * A bearer token that will be sent in the Authorization header of SEMP requests. Requires TLS transport enabled. Conflicts
 * with username and password.
 */
export declare const bearerToken: string | undefined;
Object.defineProperty(exports, "bearerToken", {
    get() {
        return __config.get("bearerToken");
    },
    enumerable: true,
});

/**
 * Disable validation of server SSL certificates, accept/ignore self-signed. The default value is false.
 */
export declare const insecureSkipVerify: boolean | undefined;
Object.defineProperty(exports, "insecureSkipVerify", {
    get() {
        return __config.getObject<boolean>("insecureSkipVerify");
    },
    enumerable: true,
});

/**
 * The password to connect to the broker with. Requires username and conflicts with bearer_token.
 */
export declare const password: string | undefined;
Object.defineProperty(exports, "password", {
    get() {
        return __config.get("password");
    },
    enumerable: true,
});

/**
 * A [duration](https://pkg.go.dev/maze.io/x/duration#ParseDuration) string indicating the minimum interval between
 * requests; this serves as a rate limit. This setting does not apply to retries. Set to 0 for no rate limit. The default
 * value is 100ms (which equates to a rate limit of 10 calls per second).
 */
export declare const requestMinInterval: string | undefined;
Object.defineProperty(exports, "requestMinInterval", {
    get() {
        return __config.get("requestMinInterval");
    },
    enumerable: true,
});

/**
 * A [duration](https://pkg.go.dev/maze.io/x/duration#ParseDuration) string indicating the maximum time to wait for a SEMP
 * request. The default value is 1m.
 */
export declare const requestTimeoutDuration: string | undefined;
Object.defineProperty(exports, "requestTimeoutDuration", {
    get() {
        return __config.get("requestTimeoutDuration");
    },
    enumerable: true,
});

/**
 * The number of retries for a SEMP call. The default value is 10.
 */
export declare const retries: number | undefined;
Object.defineProperty(exports, "retries", {
    get() {
        return __config.getObject<number>("retries");
    },
    enumerable: true,
});

/**
 * A [duration](https://pkg.go.dev/maze.io/x/duration#ParseDuration) string indicating the maximum retry interval. The
 * default value is 30s.
 */
export declare const retryMaxInterval: string | undefined;
Object.defineProperty(exports, "retryMaxInterval", {
    get() {
        return __config.get("retryMaxInterval");
    },
    enumerable: true,
});

/**
 * A [duration](https://pkg.go.dev/maze.io/x/duration#ParseDuration) string indicating how long to wait after an initial
 * failed request before the first retry. Exponential backoff is used, up to the limit set by retry_max_interval. The
 * default value is 3s.
 */
export declare const retryMinInterval: string | undefined;
Object.defineProperty(exports, "retryMinInterval", {
    get() {
        return __config.get("retryMinInterval");
    },
    enumerable: true,
});

/**
 * Disable validation of the broker SEMP API for supported platform and minimum version. The default value is false.
 */
export declare const skipApiCheck: boolean | undefined;
Object.defineProperty(exports, "skipApiCheck", {
    get() {
        return __config.getObject<boolean>("skipApiCheck");
    },
    enumerable: true,
});

/**
 * The base URL of the event broker, for example `https://mybroker.example.org:<semp-service-port>/`. The trailing / can be
 * omitted.
 */
export declare const url: string | undefined;
Object.defineProperty(exports, "url", {
    get() {
        return __config.get("url");
    },
    enumerable: true,
});

/**
 * The username to connect to the broker with. Requires password and conflicts with bearer_token.
 */
export declare const username: string | undefined;
Object.defineProperty(exports, "username", {
    get() {
        return __config.get("username");
    },
    enumerable: true,
});

