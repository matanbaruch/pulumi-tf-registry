// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class MsgVpnBridgeRemoteSubscription extends pulumi.CustomResource {
    /**
     * Get an existing MsgVpnBridgeRemoteSubscription resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MsgVpnBridgeRemoteSubscriptionState, opts?: pulumi.CustomResourceOptions): MsgVpnBridgeRemoteSubscription {
        return new MsgVpnBridgeRemoteSubscription(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'solacebroker:index/msgVpnBridgeRemoteSubscription:MsgVpnBridgeRemoteSubscription';

    /**
     * Returns true if the given object is an instance of MsgVpnBridgeRemoteSubscription.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MsgVpnBridgeRemoteSubscription {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MsgVpnBridgeRemoteSubscription.__pulumiType;
    }

    /**
     * The name of the Bridge.
     */
    public readonly bridgeName!: pulumi.Output<string>;
    /**
     * The virtual router of the Bridge. The allowed values and their meaning are: <pre> "primary" - The Bridge is used for the
     * primary virtual router. "backup" - The Bridge is used for the backup virtual router. "auto" - The Bridge is
     * automatically assigned a virtual router at creation, depending on the broker's active-standby role. </pre>
     */
    public readonly bridgeVirtualRouter!: pulumi.Output<string>;
    /**
     * Enable or disable deliver-always for the Bridge remote subscription topic instead of a deliver-to-one remote priority. A
     * given topic for the Bridge may be deliver-to-one or deliver-always but not both. Note that this attribute requires
     * replacement of the resource when updated.
     */
    public readonly deliverAlwaysEnabled!: pulumi.Output<boolean>;
    /**
     * The name of the Message VPN.
     */
    public readonly msgVpnName!: pulumi.Output<string>;
    /**
     * The topic of the Bridge remote subscription.
     */
    public readonly remoteSubscriptionTopic!: pulumi.Output<string>;

    /**
     * Create a MsgVpnBridgeRemoteSubscription resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MsgVpnBridgeRemoteSubscriptionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MsgVpnBridgeRemoteSubscriptionArgs | MsgVpnBridgeRemoteSubscriptionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MsgVpnBridgeRemoteSubscriptionState | undefined;
            resourceInputs["bridgeName"] = state ? state.bridgeName : undefined;
            resourceInputs["bridgeVirtualRouter"] = state ? state.bridgeVirtualRouter : undefined;
            resourceInputs["deliverAlwaysEnabled"] = state ? state.deliverAlwaysEnabled : undefined;
            resourceInputs["msgVpnName"] = state ? state.msgVpnName : undefined;
            resourceInputs["remoteSubscriptionTopic"] = state ? state.remoteSubscriptionTopic : undefined;
        } else {
            const args = argsOrState as MsgVpnBridgeRemoteSubscriptionArgs | undefined;
            if ((!args || args.bridgeName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bridgeName'");
            }
            if ((!args || args.bridgeVirtualRouter === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bridgeVirtualRouter'");
            }
            if ((!args || args.deliverAlwaysEnabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'deliverAlwaysEnabled'");
            }
            if ((!args || args.msgVpnName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'msgVpnName'");
            }
            if ((!args || args.remoteSubscriptionTopic === undefined) && !opts.urn) {
                throw new Error("Missing required property 'remoteSubscriptionTopic'");
            }
            resourceInputs["bridgeName"] = args ? args.bridgeName : undefined;
            resourceInputs["bridgeVirtualRouter"] = args ? args.bridgeVirtualRouter : undefined;
            resourceInputs["deliverAlwaysEnabled"] = args ? args.deliverAlwaysEnabled : undefined;
            resourceInputs["msgVpnName"] = args ? args.msgVpnName : undefined;
            resourceInputs["remoteSubscriptionTopic"] = args ? args.remoteSubscriptionTopic : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MsgVpnBridgeRemoteSubscription.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering MsgVpnBridgeRemoteSubscription resources.
 */
export interface MsgVpnBridgeRemoteSubscriptionState {
    /**
     * The name of the Bridge.
     */
    bridgeName?: pulumi.Input<string>;
    /**
     * The virtual router of the Bridge. The allowed values and their meaning are: <pre> "primary" - The Bridge is used for the
     * primary virtual router. "backup" - The Bridge is used for the backup virtual router. "auto" - The Bridge is
     * automatically assigned a virtual router at creation, depending on the broker's active-standby role. </pre>
     */
    bridgeVirtualRouter?: pulumi.Input<string>;
    /**
     * Enable or disable deliver-always for the Bridge remote subscription topic instead of a deliver-to-one remote priority. A
     * given topic for the Bridge may be deliver-to-one or deliver-always but not both. Note that this attribute requires
     * replacement of the resource when updated.
     */
    deliverAlwaysEnabled?: pulumi.Input<boolean>;
    /**
     * The name of the Message VPN.
     */
    msgVpnName?: pulumi.Input<string>;
    /**
     * The topic of the Bridge remote subscription.
     */
    remoteSubscriptionTopic?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a MsgVpnBridgeRemoteSubscription resource.
 */
export interface MsgVpnBridgeRemoteSubscriptionArgs {
    /**
     * The name of the Bridge.
     */
    bridgeName: pulumi.Input<string>;
    /**
     * The virtual router of the Bridge. The allowed values and their meaning are: <pre> "primary" - The Bridge is used for the
     * primary virtual router. "backup" - The Bridge is used for the backup virtual router. "auto" - The Bridge is
     * automatically assigned a virtual router at creation, depending on the broker's active-standby role. </pre>
     */
    bridgeVirtualRouter: pulumi.Input<string>;
    /**
     * Enable or disable deliver-always for the Bridge remote subscription topic instead of a deliver-to-one remote priority. A
     * given topic for the Bridge may be deliver-to-one or deliver-always but not both. Note that this attribute requires
     * replacement of the resource when updated.
     */
    deliverAlwaysEnabled: pulumi.Input<boolean>;
    /**
     * The name of the Message VPN.
     */
    msgVpnName: pulumi.Input<string>;
    /**
     * The topic of the Bridge remote subscription.
     */
    remoteSubscriptionTopic: pulumi.Input<string>;
}
