// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class DmrClusterLinkRemoteAddress extends pulumi.CustomResource {
    /**
     * Get an existing DmrClusterLinkRemoteAddress resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DmrClusterLinkRemoteAddressState, opts?: pulumi.CustomResourceOptions): DmrClusterLinkRemoteAddress {
        return new DmrClusterLinkRemoteAddress(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'solacebroker:index/dmrClusterLinkRemoteAddress:DmrClusterLinkRemoteAddress';

    /**
     * Returns true if the given object is an instance of DmrClusterLinkRemoteAddress.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DmrClusterLinkRemoteAddress {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DmrClusterLinkRemoteAddress.__pulumiType;
    }

    /**
     * The name of the Cluster.
     */
    public readonly dmrClusterName!: pulumi.Output<string>;
    /**
     * The FQDN or IP address (and optional port) of the remote node. If a port is not provided, it will vary based on the
     * transport encoding: 55555 (plain-text), 55443 (encrypted), or 55003 (compressed).
     */
    public readonly remoteAddress!: pulumi.Output<string>;
    /**
     * The name of the node at the remote end of the Link.
     */
    public readonly remoteNodeName!: pulumi.Output<string>;

    /**
     * Create a DmrClusterLinkRemoteAddress resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DmrClusterLinkRemoteAddressArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DmrClusterLinkRemoteAddressArgs | DmrClusterLinkRemoteAddressState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DmrClusterLinkRemoteAddressState | undefined;
            resourceInputs["dmrClusterName"] = state ? state.dmrClusterName : undefined;
            resourceInputs["remoteAddress"] = state ? state.remoteAddress : undefined;
            resourceInputs["remoteNodeName"] = state ? state.remoteNodeName : undefined;
        } else {
            const args = argsOrState as DmrClusterLinkRemoteAddressArgs | undefined;
            if ((!args || args.dmrClusterName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dmrClusterName'");
            }
            if ((!args || args.remoteAddress === undefined) && !opts.urn) {
                throw new Error("Missing required property 'remoteAddress'");
            }
            if ((!args || args.remoteNodeName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'remoteNodeName'");
            }
            resourceInputs["dmrClusterName"] = args ? args.dmrClusterName : undefined;
            resourceInputs["remoteAddress"] = args ? args.remoteAddress : undefined;
            resourceInputs["remoteNodeName"] = args ? args.remoteNodeName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DmrClusterLinkRemoteAddress.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DmrClusterLinkRemoteAddress resources.
 */
export interface DmrClusterLinkRemoteAddressState {
    /**
     * The name of the Cluster.
     */
    dmrClusterName?: pulumi.Input<string>;
    /**
     * The FQDN or IP address (and optional port) of the remote node. If a port is not provided, it will vary based on the
     * transport encoding: 55555 (plain-text), 55443 (encrypted), or 55003 (compressed).
     */
    remoteAddress?: pulumi.Input<string>;
    /**
     * The name of the node at the remote end of the Link.
     */
    remoteNodeName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DmrClusterLinkRemoteAddress resource.
 */
export interface DmrClusterLinkRemoteAddressArgs {
    /**
     * The name of the Cluster.
     */
    dmrClusterName: pulumi.Input<string>;
    /**
     * The FQDN or IP address (and optional port) of the remote node. If a port is not provided, it will vary based on the
     * transport encoding: 55555 (plain-text), 55443 (encrypted), or 55003 (compressed).
     */
    remoteAddress: pulumi.Input<string>;
    /**
     * The name of the node at the remote end of the Link.
     */
    remoteNodeName: pulumi.Input<string>;
}
