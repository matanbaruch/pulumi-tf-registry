// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getOauthProfile(args: GetOauthProfileArgs, opts?: pulumi.InvokeOptions): Promise<GetOauthProfileResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("solacebroker:index/getOauthProfile:getOauthProfile", {
        "oauthProfileName": args.oauthProfileName,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getOauthProfile.
 */
export interface GetOauthProfileArgs {
    oauthProfileName: string;
}

/**
 * A collection of values returned by getOauthProfile.
 */
export interface GetOauthProfileResult {
    readonly accessLevelGroupsClaimName: string;
    readonly accessLevelGroupsClaimStringFormat: string;
    readonly clientId: string;
    readonly clientRedirectUri: string;
    readonly clientRequiredType: string;
    readonly clientScope: string;
    readonly clientValidateTypeEnabled: boolean;
    readonly defaultGlobalAccessLevel: string;
    readonly defaultMsgVpnAccessLevel: string;
    readonly displayName: string;
    readonly enabled: boolean;
    readonly endpointAuthorization: string;
    readonly endpointDiscovery: string;
    readonly endpointDiscoveryRefreshInterval: number;
    readonly endpointIntrospection: string;
    readonly endpointIntrospectionTimeout: number;
    readonly endpointJwks: string;
    readonly endpointJwksRefreshInterval: number;
    readonly endpointToken: string;
    readonly endpointTokenTimeout: number;
    readonly endpointUserinfo: string;
    readonly endpointUserinfoTimeout: number;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly interactiveEnabled: boolean;
    readonly interactivePromptForExpiredSession: string;
    readonly interactivePromptForNewSession: string;
    readonly issuer: string;
    readonly oauthProfileName: string;
    readonly oauthRole: string;
    readonly proxyName: string;
    readonly resourceServerParseAccessTokenEnabled: boolean;
    readonly resourceServerRequiredAudience: string;
    readonly resourceServerRequiredIssuer: string;
    readonly resourceServerRequiredScope: string;
    readonly resourceServerRequiredType: string;
    readonly resourceServerValidateAudienceEnabled: boolean;
    readonly resourceServerValidateIssuerEnabled: boolean;
    readonly resourceServerValidateScopeEnabled: boolean;
    readonly resourceServerValidateTypeEnabled: boolean;
    readonly sempEnabled: boolean;
    readonly usernameClaimName: string;
}
export function getOauthProfileOutput(args: GetOauthProfileOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetOauthProfileResult> {
    return pulumi.output(args).apply((a: any) => getOauthProfile(a, opts))
}

/**
 * A collection of arguments for invoking getOauthProfile.
 */
export interface GetOauthProfileOutputArgs {
    oauthProfileName: pulumi.Input<string>;
}
