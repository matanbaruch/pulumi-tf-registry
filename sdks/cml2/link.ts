// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Link extends pulumi.CustomResource {
    /**
     * Get an existing Link resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LinkState, opts?: pulumi.CustomResourceOptions): Link {
        return new Link(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cml2:index/link:Link';

    /**
     * Returns true if the given object is an instance of Link.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Link {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Link.__pulumiType;
    }

    /**
     * Interface ID containing the node (UUID).
     */
    public /*out*/ readonly interfaceA!: pulumi.Output<string>;
    /**
     * Interface ID containing the node (UUID).
     */
    public /*out*/ readonly interfaceB!: pulumi.Output<string>;
    /**
     * Lab ID containing the link (UUID).
     */
    public readonly labId!: pulumi.Output<string>;
    /**
     * link label (auto generated).
     */
    public /*out*/ readonly label!: pulumi.Output<string>;
    /**
     * link capture key (when running).
     */
    public /*out*/ readonly linkCaptureKey!: pulumi.Output<string>;
    /**
     * Node (A) attached to link.
     */
    public readonly nodeA!: pulumi.Output<string>;
    /**
     * Node (B) attached to link.
     */
    public readonly nodeB!: pulumi.Output<string>;
    /**
     * Optional interface slot on node A (src), if not provided use next free.
     */
    public readonly slotA!: pulumi.Output<number>;
    /**
     * Optional interface slot on node B (dst), if not provided use next free.
     */
    public readonly slotB!: pulumi.Output<number>;
    /**
     * Link state.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;

    /**
     * Create a Link resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LinkArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LinkArgs | LinkState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LinkState | undefined;
            resourceInputs["interfaceA"] = state ? state.interfaceA : undefined;
            resourceInputs["interfaceB"] = state ? state.interfaceB : undefined;
            resourceInputs["labId"] = state ? state.labId : undefined;
            resourceInputs["label"] = state ? state.label : undefined;
            resourceInputs["linkCaptureKey"] = state ? state.linkCaptureKey : undefined;
            resourceInputs["nodeA"] = state ? state.nodeA : undefined;
            resourceInputs["nodeB"] = state ? state.nodeB : undefined;
            resourceInputs["slotA"] = state ? state.slotA : undefined;
            resourceInputs["slotB"] = state ? state.slotB : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
        } else {
            const args = argsOrState as LinkArgs | undefined;
            if ((!args || args.labId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'labId'");
            }
            if ((!args || args.nodeA === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nodeA'");
            }
            if ((!args || args.nodeB === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nodeB'");
            }
            resourceInputs["labId"] = args ? args.labId : undefined;
            resourceInputs["nodeA"] = args ? args.nodeA : undefined;
            resourceInputs["nodeB"] = args ? args.nodeB : undefined;
            resourceInputs["slotA"] = args ? args.slotA : undefined;
            resourceInputs["slotB"] = args ? args.slotB : undefined;
            resourceInputs["interfaceA"] = undefined /*out*/;
            resourceInputs["interfaceB"] = undefined /*out*/;
            resourceInputs["label"] = undefined /*out*/;
            resourceInputs["linkCaptureKey"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Link.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Link resources.
 */
export interface LinkState {
    /**
     * Interface ID containing the node (UUID).
     */
    interfaceA?: pulumi.Input<string>;
    /**
     * Interface ID containing the node (UUID).
     */
    interfaceB?: pulumi.Input<string>;
    /**
     * Lab ID containing the link (UUID).
     */
    labId?: pulumi.Input<string>;
    /**
     * link label (auto generated).
     */
    label?: pulumi.Input<string>;
    /**
     * link capture key (when running).
     */
    linkCaptureKey?: pulumi.Input<string>;
    /**
     * Node (A) attached to link.
     */
    nodeA?: pulumi.Input<string>;
    /**
     * Node (B) attached to link.
     */
    nodeB?: pulumi.Input<string>;
    /**
     * Optional interface slot on node A (src), if not provided use next free.
     */
    slotA?: pulumi.Input<number>;
    /**
     * Optional interface slot on node B (dst), if not provided use next free.
     */
    slotB?: pulumi.Input<number>;
    /**
     * Link state.
     */
    state?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Link resource.
 */
export interface LinkArgs {
    /**
     * Lab ID containing the link (UUID).
     */
    labId: pulumi.Input<string>;
    /**
     * Node (A) attached to link.
     */
    nodeA: pulumi.Input<string>;
    /**
     * Node (B) attached to link.
     */
    nodeB: pulumi.Input<string>;
    /**
     * Optional interface slot on node A (src), if not provided use next free.
     */
    slotA?: pulumi.Input<number>;
    /**
     * Optional interface slot on node B (dst), if not provided use next free.
     */
    slotB?: pulumi.Input<number>;
}
