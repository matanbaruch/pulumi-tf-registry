// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface GroupLab {
    /**
     * Lab ID (UUID).
     */
    id: pulumi.Input<string>;
    /**
     * Permission.
     */
    permission: pulumi.Input<string>;
}

export interface LabGroup {
    /**
     * Group ID (UUID).
     */
    id?: pulumi.Input<string>;
    /**
     * Descriptive group name.
     */
    name?: pulumi.Input<string>;
    /**
     * Permission, either `read_only` or `read_write`.
     */
    permission?: pulumi.Input<string>;
}

export interface LifecycleNamedConfigs {
    content: pulumi.Input<string>;
    name: pulumi.Input<string>;
}

export interface LifecycleNodes {
    /**
     * Size of boot disk volume, in GB. Can be changed until the node is started once. Will require a replace in that case.
     */
    bootDiskSize?: pulumi.Input<number>;
    /**
     * ID of a compute this node is on, a UUID4.
     */
    computeId?: pulumi.Input<string>;
    /**
     * Node configuration. Can be changed until the node is started once. Will require a replace in that case.
     */
    configuration?: pulumi.Input<string>;
    /**
     * List of node configurations. Can be changed until the node is started once. Will require a replace in that case. Note that this requires the `named_configs` provider setting and also at least CML 2.7.0. Using `configuration` and `configurations` is mutually exclusive!
     */
    configurations?: pulumi.Input<pulumi.Input<inputs.LifecycleNodesConfiguration>[]>;
    /**
     * CPU limit in %, 20-100. Can be changed until the node is started once. Will require a replace in that case.
     */
    cpuLimit?: pulumi.Input<number>;
    /**
     * Number of CPUs. Can be changed until the node is started once. Will require a replace in that case.
     */
    cpus?: pulumi.Input<number>;
    /**
     * Size of data volume, in GB. Can be changed until the node is started once. Will require a replace in that case.
     */
    dataVolume?: pulumi.Input<number>;
    /**
     * If true, links are not shown in the topology. This is a visual cue and does not influence any simulation function.
     */
    hideLinks?: pulumi.Input<boolean>;
    /**
     * Node ID (UUID).
     */
    id?: pulumi.Input<string>;
    /**
     * Image definition, must match the node type. Can be changed until the node is started once. Will require a replace in that case.
     */
    imagedefinition?: pulumi.Input<string>;
    /**
     * List of interfaces on the node.
     */
    interfaces?: pulumi.Input<pulumi.Input<inputs.LifecycleNodesInterface>[]>;
    /**
     * Lab ID containing the node (UUID).
     */
    labId: pulumi.Input<string>;
    /**
     * Node label.
     */
    label: pulumi.Input<string>;
    /**
     * Node definition / type. This can only be set at create time.
     */
    nodedefinition: pulumi.Input<string>;
    /**
     * Amount of RAM, megabytes. Can be changed until the node is started once. Will require a replace in that case.
     */
    ram?: pulumi.Input<number>;
    /**
     * List of serial devices (consoles).
     */
    serialDevices?: pulumi.Input<pulumi.Input<inputs.LifecycleNodesSerialDevice>[]>;
    /**
     * Node state (`DEFINED_ON_CORE`, `STOPPED`, `STARTED`, `BOOTED`).
     */
    state?: pulumi.Input<string>;
    /**
     * Set of tags of the node.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * VNC key of console, a UUID4.
     */
    vncKey?: pulumi.Input<string>;
    /**
     * X coordinate on the topology canvas.
     */
    x?: pulumi.Input<number>;
    /**
     * Y coordinate on the topology canvas.
     */
    y?: pulumi.Input<number>;
}

export interface LifecycleNodesConfiguration {
    content: pulumi.Input<string>;
    name: pulumi.Input<string>;
}

export interface LifecycleNodesInterface {
    /**
     * Interface ID (UUID).
     */
    id?: pulumi.Input<string>;
    /**
     * IPv4 address list.
     */
    ip4s?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * IPv6 address list.
     */
    ip6s?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Is the interface connected to a link?
     */
    isConnected?: pulumi.Input<boolean>;
    /**
     * Interface label.
     */
    label?: pulumi.Input<string>;
    /**
     * MAC address.
     */
    macAddress?: pulumi.Input<string>;
    /**
     * interface state (`UP` or `DOWN`).
     */
    state?: pulumi.Input<string>;
}

export interface LifecycleNodesSerialDevice {
    consoleKey: pulumi.Input<string>;
    deviceNumber: pulumi.Input<number>;
}

export interface LifecycleStaging {
    /**
     * Ordered list of node tags, controls node launch. Nodes currently not launched will be launched in the stage with the matching tag. Tags must match exactly.
     */
    stages: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * If set to `true` (which is the default) then all nodes which are not matched by the stages list and which are still unstarted after running all stages will be started.
     */
    startRemaining?: pulumi.Input<boolean>;
}

export interface LifecycleTimeouts {
    /**
     * Create timeout.
     */
    create: pulumi.Input<string>;
    /**
     * Delete timeout (currently unused).
     */
    delete?: pulumi.Input<string>;
    /**
     * Update timeout.
     */
    update: pulumi.Input<string>;
}

export interface NodeConfiguration {
    content: pulumi.Input<string>;
    name: pulumi.Input<string>;
}

export interface NodeInterface {
    /**
     * Interface ID (UUID).
     */
    id?: pulumi.Input<string>;
    /**
     * IPv4 address list.
     */
    ip4s?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * IPv6 address list.
     */
    ip6s?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Is the interface connected to a link?
     */
    isConnected?: pulumi.Input<boolean>;
    /**
     * Interface label.
     */
    label?: pulumi.Input<string>;
    /**
     * MAC address.
     */
    macAddress?: pulumi.Input<string>;
    /**
     * interface state (`UP` or `DOWN`).
     */
    state?: pulumi.Input<string>;
}

export interface NodeSerialDevice {
    consoleKey: pulumi.Input<string>;
    deviceNumber: pulumi.Input<number>;
}
