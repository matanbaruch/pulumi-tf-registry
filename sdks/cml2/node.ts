// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Node extends pulumi.CustomResource {
    /**
     * Get an existing Node resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NodeState, opts?: pulumi.CustomResourceOptions): Node {
        return new Node(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cml2:index/node:Node';

    /**
     * Returns true if the given object is an instance of Node.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Node {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Node.__pulumiType;
    }

    /**
     * Size of boot disk volume, in GB. Can be changed until the node is started once. Will require a replace in that case.
     */
    public readonly bootDiskSize!: pulumi.Output<number>;
    /**
     * ID of a compute this node is on, a UUID4.
     */
    public /*out*/ readonly computeId!: pulumi.Output<string>;
    /**
     * Node configuration. Can be changed until the node is started once. Will require a replace in that case.
     */
    public readonly configuration!: pulumi.Output<string>;
    /**
     * List of node configurations. Can be changed until the node is started once. Will require a replace in that case. Note
     * that this requires the `named_configs` provider setting and also at least CML 2.7.0. Using `configuration` and
     * `configurations` is mutually exclusive!
     */
    public readonly configurations!: pulumi.Output<outputs.NodeConfiguration[]>;
    /**
     * CPU limit in %, 20-100. Can be changed until the node is started once. Will require a replace in that case.
     */
    public readonly cpuLimit!: pulumi.Output<number>;
    /**
     * Number of CPUs. Can be changed until the node is started once. Will require a replace in that case.
     */
    public readonly cpus!: pulumi.Output<number>;
    /**
     * Size of data volume, in GB. Can be changed until the node is started once. Will require a replace in that case.
     */
    public readonly dataVolume!: pulumi.Output<number>;
    /**
     * If true, links are not shown in the topology. This is a visual cue and does not influence any simulation function.
     */
    public readonly hideLinks!: pulumi.Output<boolean>;
    /**
     * Image definition, must match the node type. Can be changed until the node is started once. Will require a replace in
     * that case.
     */
    public readonly imagedefinition!: pulumi.Output<string>;
    /**
     * List of interfaces on the node.
     */
    public /*out*/ readonly interfaces!: pulumi.Output<outputs.NodeInterface[]>;
    /**
     * Lab ID containing the node (UUID).
     */
    public readonly labId!: pulumi.Output<string>;
    /**
     * Node label.
     */
    public readonly label!: pulumi.Output<string>;
    /**
     * Node definition / type. This can only be set at create time.
     */
    public readonly nodedefinition!: pulumi.Output<string>;
    /**
     * Amount of RAM, megabytes. Can be changed until the node is started once. Will require a replace in that case.
     */
    public readonly ram!: pulumi.Output<number>;
    /**
     * List of serial devices (consoles).
     */
    public /*out*/ readonly serialDevices!: pulumi.Output<outputs.NodeSerialDevice[]>;
    /**
     * Node state (`DEFINED_ON_CORE`, `STOPPED`, `STARTED`, `BOOTED`).
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * Set of tags of the node.
     */
    public readonly tags!: pulumi.Output<string[]>;
    /**
     * VNC key of console, a UUID4.
     */
    public /*out*/ readonly vncKey!: pulumi.Output<string>;
    /**
     * X coordinate on the topology canvas.
     */
    public readonly x!: pulumi.Output<number>;
    /**
     * Y coordinate on the topology canvas.
     */
    public readonly y!: pulumi.Output<number>;

    /**
     * Create a Node resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NodeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NodeArgs | NodeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NodeState | undefined;
            resourceInputs["bootDiskSize"] = state ? state.bootDiskSize : undefined;
            resourceInputs["computeId"] = state ? state.computeId : undefined;
            resourceInputs["configuration"] = state ? state.configuration : undefined;
            resourceInputs["configurations"] = state ? state.configurations : undefined;
            resourceInputs["cpuLimit"] = state ? state.cpuLimit : undefined;
            resourceInputs["cpus"] = state ? state.cpus : undefined;
            resourceInputs["dataVolume"] = state ? state.dataVolume : undefined;
            resourceInputs["hideLinks"] = state ? state.hideLinks : undefined;
            resourceInputs["imagedefinition"] = state ? state.imagedefinition : undefined;
            resourceInputs["interfaces"] = state ? state.interfaces : undefined;
            resourceInputs["labId"] = state ? state.labId : undefined;
            resourceInputs["label"] = state ? state.label : undefined;
            resourceInputs["nodedefinition"] = state ? state.nodedefinition : undefined;
            resourceInputs["ram"] = state ? state.ram : undefined;
            resourceInputs["serialDevices"] = state ? state.serialDevices : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["vncKey"] = state ? state.vncKey : undefined;
            resourceInputs["x"] = state ? state.x : undefined;
            resourceInputs["y"] = state ? state.y : undefined;
        } else {
            const args = argsOrState as NodeArgs | undefined;
            if ((!args || args.labId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'labId'");
            }
            if ((!args || args.label === undefined) && !opts.urn) {
                throw new Error("Missing required property 'label'");
            }
            if ((!args || args.nodedefinition === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nodedefinition'");
            }
            resourceInputs["bootDiskSize"] = args ? args.bootDiskSize : undefined;
            resourceInputs["configuration"] = args ? args.configuration : undefined;
            resourceInputs["configurations"] = args ? args.configurations : undefined;
            resourceInputs["cpuLimit"] = args ? args.cpuLimit : undefined;
            resourceInputs["cpus"] = args ? args.cpus : undefined;
            resourceInputs["dataVolume"] = args ? args.dataVolume : undefined;
            resourceInputs["hideLinks"] = args ? args.hideLinks : undefined;
            resourceInputs["imagedefinition"] = args ? args.imagedefinition : undefined;
            resourceInputs["labId"] = args ? args.labId : undefined;
            resourceInputs["label"] = args ? args.label : undefined;
            resourceInputs["nodedefinition"] = args ? args.nodedefinition : undefined;
            resourceInputs["ram"] = args ? args.ram : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["x"] = args ? args.x : undefined;
            resourceInputs["y"] = args ? args.y : undefined;
            resourceInputs["computeId"] = undefined /*out*/;
            resourceInputs["interfaces"] = undefined /*out*/;
            resourceInputs["serialDevices"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["vncKey"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Node.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Node resources.
 */
export interface NodeState {
    /**
     * Size of boot disk volume, in GB. Can be changed until the node is started once. Will require a replace in that case.
     */
    bootDiskSize?: pulumi.Input<number>;
    /**
     * ID of a compute this node is on, a UUID4.
     */
    computeId?: pulumi.Input<string>;
    /**
     * Node configuration. Can be changed until the node is started once. Will require a replace in that case.
     */
    configuration?: pulumi.Input<string>;
    /**
     * List of node configurations. Can be changed until the node is started once. Will require a replace in that case. Note
     * that this requires the `named_configs` provider setting and also at least CML 2.7.0. Using `configuration` and
     * `configurations` is mutually exclusive!
     */
    configurations?: pulumi.Input<pulumi.Input<inputs.NodeConfiguration>[]>;
    /**
     * CPU limit in %, 20-100. Can be changed until the node is started once. Will require a replace in that case.
     */
    cpuLimit?: pulumi.Input<number>;
    /**
     * Number of CPUs. Can be changed until the node is started once. Will require a replace in that case.
     */
    cpus?: pulumi.Input<number>;
    /**
     * Size of data volume, in GB. Can be changed until the node is started once. Will require a replace in that case.
     */
    dataVolume?: pulumi.Input<number>;
    /**
     * If true, links are not shown in the topology. This is a visual cue and does not influence any simulation function.
     */
    hideLinks?: pulumi.Input<boolean>;
    /**
     * Image definition, must match the node type. Can be changed until the node is started once. Will require a replace in
     * that case.
     */
    imagedefinition?: pulumi.Input<string>;
    /**
     * List of interfaces on the node.
     */
    interfaces?: pulumi.Input<pulumi.Input<inputs.NodeInterface>[]>;
    /**
     * Lab ID containing the node (UUID).
     */
    labId?: pulumi.Input<string>;
    /**
     * Node label.
     */
    label?: pulumi.Input<string>;
    /**
     * Node definition / type. This can only be set at create time.
     */
    nodedefinition?: pulumi.Input<string>;
    /**
     * Amount of RAM, megabytes. Can be changed until the node is started once. Will require a replace in that case.
     */
    ram?: pulumi.Input<number>;
    /**
     * List of serial devices (consoles).
     */
    serialDevices?: pulumi.Input<pulumi.Input<inputs.NodeSerialDevice>[]>;
    /**
     * Node state (`DEFINED_ON_CORE`, `STOPPED`, `STARTED`, `BOOTED`).
     */
    state?: pulumi.Input<string>;
    /**
     * Set of tags of the node.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * VNC key of console, a UUID4.
     */
    vncKey?: pulumi.Input<string>;
    /**
     * X coordinate on the topology canvas.
     */
    x?: pulumi.Input<number>;
    /**
     * Y coordinate on the topology canvas.
     */
    y?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Node resource.
 */
export interface NodeArgs {
    /**
     * Size of boot disk volume, in GB. Can be changed until the node is started once. Will require a replace in that case.
     */
    bootDiskSize?: pulumi.Input<number>;
    /**
     * Node configuration. Can be changed until the node is started once. Will require a replace in that case.
     */
    configuration?: pulumi.Input<string>;
    /**
     * List of node configurations. Can be changed until the node is started once. Will require a replace in that case. Note
     * that this requires the `named_configs` provider setting and also at least CML 2.7.0. Using `configuration` and
     * `configurations` is mutually exclusive!
     */
    configurations?: pulumi.Input<pulumi.Input<inputs.NodeConfiguration>[]>;
    /**
     * CPU limit in %, 20-100. Can be changed until the node is started once. Will require a replace in that case.
     */
    cpuLimit?: pulumi.Input<number>;
    /**
     * Number of CPUs. Can be changed until the node is started once. Will require a replace in that case.
     */
    cpus?: pulumi.Input<number>;
    /**
     * Size of data volume, in GB. Can be changed until the node is started once. Will require a replace in that case.
     */
    dataVolume?: pulumi.Input<number>;
    /**
     * If true, links are not shown in the topology. This is a visual cue and does not influence any simulation function.
     */
    hideLinks?: pulumi.Input<boolean>;
    /**
     * Image definition, must match the node type. Can be changed until the node is started once. Will require a replace in
     * that case.
     */
    imagedefinition?: pulumi.Input<string>;
    /**
     * Lab ID containing the node (UUID).
     */
    labId: pulumi.Input<string>;
    /**
     * Node label.
     */
    label: pulumi.Input<string>;
    /**
     * Node definition / type. This can only be set at create time.
     */
    nodedefinition: pulumi.Input<string>;
    /**
     * Amount of RAM, megabytes. Can be changed until the node is started once. Will require a replace in that case.
     */
    ram?: pulumi.Input<number>;
    /**
     * Set of tags of the node.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * X coordinate on the topology canvas.
     */
    x?: pulumi.Input<number>;
    /**
     * Y coordinate on the topology canvas.
     */
    y?: pulumi.Input<number>;
}
