// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Lifecycle extends pulumi.CustomResource {
    /**
     * Get an existing Lifecycle resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LifecycleState, opts?: pulumi.CustomResourceOptions): Lifecycle {
        return new Lifecycle(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cml2:index/lifecycle:Lifecycle';

    /**
     * Returns true if the given object is an instance of Lifecycle.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Lifecycle {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Lifecycle.__pulumiType;
    }

    /**
     * Set to `true` when all nodes in the lab have booted.
     */
    public /*out*/ readonly booted!: pulumi.Output<boolean>;
    /**
     * Map of node configurations to store into nodes, the key is the label of the node, the value is the node configuration.
     */
    public readonly configs!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * List of node and link IDs the lab consists of. Works only when a (lab) ID is provided and no topology is configured.
     *
     * @deprecated Deprecated
     */
    public readonly elements!: pulumi.Output<string[] | undefined>;
    /**
     * Lab identifier, a UUID. If set, `elements` must be configured as well.
     */
    public readonly labId!: pulumi.Output<string>;
    /**
     * Map of named node configurations to store into nodes, the key is the label of the node, the value is the node
     * configuration.
     */
    public readonly namedConfigs!: pulumi.Output<{[key: string]: outputs.LifecycleNamedConfigs[]} | undefined>;
    /**
     * List of nodes and their interfaces with IP addresses.
     */
    public /*out*/ readonly nodes!: pulumi.Output<{[key: string]: outputs.LifecycleNodes}>;
    /**
     * Defines in what sequence nodes are launched.
     */
    public readonly staging!: pulumi.Output<outputs.LifecycleStaging | undefined>;
    /**
     * Lab state, one of `DEFINED_ON_CORE`, `STARTED` or `STOPPED`.
     */
    public readonly state!: pulumi.Output<string>;
    /**
     * Timeouts for operations, given as a parsable string as in `60m` or `2h`.
     */
    public readonly timeouts!: pulumi.Output<outputs.LifecycleTimeouts | undefined>;
    /**
     * The topology to start, must be valid YAML. Can't be configured if the lab `id` is configured.
     */
    public readonly topology!: pulumi.Output<string | undefined>;
    /**
     * If set to `true` then wait until the lab has completely `BOOTED`.
     */
    public readonly wait!: pulumi.Output<boolean | undefined>;

    /**
     * Create a Lifecycle resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: LifecycleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LifecycleArgs | LifecycleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LifecycleState | undefined;
            resourceInputs["booted"] = state ? state.booted : undefined;
            resourceInputs["configs"] = state ? state.configs : undefined;
            resourceInputs["elements"] = state ? state.elements : undefined;
            resourceInputs["labId"] = state ? state.labId : undefined;
            resourceInputs["namedConfigs"] = state ? state.namedConfigs : undefined;
            resourceInputs["nodes"] = state ? state.nodes : undefined;
            resourceInputs["staging"] = state ? state.staging : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["topology"] = state ? state.topology : undefined;
            resourceInputs["wait"] = state ? state.wait : undefined;
        } else {
            const args = argsOrState as LifecycleArgs | undefined;
            resourceInputs["configs"] = args ? args.configs : undefined;
            resourceInputs["elements"] = args ? args.elements : undefined;
            resourceInputs["labId"] = args ? args.labId : undefined;
            resourceInputs["namedConfigs"] = args ? args.namedConfigs : undefined;
            resourceInputs["staging"] = args ? args.staging : undefined;
            resourceInputs["state"] = args ? args.state : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["topology"] = args?.topology ? pulumi.secret(args.topology) : undefined;
            resourceInputs["wait"] = args ? args.wait : undefined;
            resourceInputs["booted"] = undefined /*out*/;
            resourceInputs["nodes"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["topology"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Lifecycle.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Lifecycle resources.
 */
export interface LifecycleState {
    /**
     * Set to `true` when all nodes in the lab have booted.
     */
    booted?: pulumi.Input<boolean>;
    /**
     * Map of node configurations to store into nodes, the key is the label of the node, the value is the node configuration.
     */
    configs?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * List of node and link IDs the lab consists of. Works only when a (lab) ID is provided and no topology is configured.
     *
     * @deprecated Deprecated
     */
    elements?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Lab identifier, a UUID. If set, `elements` must be configured as well.
     */
    labId?: pulumi.Input<string>;
    /**
     * Map of named node configurations to store into nodes, the key is the label of the node, the value is the node
     * configuration.
     */
    namedConfigs?: pulumi.Input<{[key: string]: pulumi.Input<pulumi.Input<inputs.LifecycleNamedConfigs>[]>}>;
    /**
     * List of nodes and their interfaces with IP addresses.
     */
    nodes?: pulumi.Input<{[key: string]: pulumi.Input<inputs.LifecycleNodes>}>;
    /**
     * Defines in what sequence nodes are launched.
     */
    staging?: pulumi.Input<inputs.LifecycleStaging>;
    /**
     * Lab state, one of `DEFINED_ON_CORE`, `STARTED` or `STOPPED`.
     */
    state?: pulumi.Input<string>;
    /**
     * Timeouts for operations, given as a parsable string as in `60m` or `2h`.
     */
    timeouts?: pulumi.Input<inputs.LifecycleTimeouts>;
    /**
     * The topology to start, must be valid YAML. Can't be configured if the lab `id` is configured.
     */
    topology?: pulumi.Input<string>;
    /**
     * If set to `true` then wait until the lab has completely `BOOTED`.
     */
    wait?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a Lifecycle resource.
 */
export interface LifecycleArgs {
    /**
     * Map of node configurations to store into nodes, the key is the label of the node, the value is the node configuration.
     */
    configs?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * List of node and link IDs the lab consists of. Works only when a (lab) ID is provided and no topology is configured.
     *
     * @deprecated Deprecated
     */
    elements?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Lab identifier, a UUID. If set, `elements` must be configured as well.
     */
    labId?: pulumi.Input<string>;
    /**
     * Map of named node configurations to store into nodes, the key is the label of the node, the value is the node
     * configuration.
     */
    namedConfigs?: pulumi.Input<{[key: string]: pulumi.Input<pulumi.Input<inputs.LifecycleNamedConfigs>[]>}>;
    /**
     * Defines in what sequence nodes are launched.
     */
    staging?: pulumi.Input<inputs.LifecycleStaging>;
    /**
     * Lab state, one of `DEFINED_ON_CORE`, `STARTED` or `STOPPED`.
     */
    state?: pulumi.Input<string>;
    /**
     * Timeouts for operations, given as a parsable string as in `60m` or `2h`.
     */
    timeouts?: pulumi.Input<inputs.LifecycleTimeouts>;
    /**
     * The topology to start, must be valid YAML. Can't be configured if the lab `id` is configured.
     */
    topology?: pulumi.Input<string>;
    /**
     * If set to `true` then wait until the lab has completely `BOOTED`.
     */
    wait?: pulumi.Input<boolean>;
}
