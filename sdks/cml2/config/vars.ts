// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

declare var exports: any;
const __config = new pulumi.Config("cml2");

/**
 * CML2 controller address, must start with `https://`.
 */
export declare const address: string | undefined;
Object.defineProperty(exports, "address", {
    get() {
        return __config.get("address");
    },
    enumerable: true,
});

/**
 * A CA CERT, PEM encoded. When provided, the controller cert will be checked against it. Otherwise, the system trust
 * anchors will be used.
 */
export declare const cacert: string | undefined;
Object.defineProperty(exports, "cacert", {
    get() {
        return __config.get("cacert");
    },
    enumerable: true,
});

/**
 * Does late binding of the provider configuration. If set to `true` then provider configuration errors will only be caught
 * when resources and data sources are actually created/read. Defaults to `false`
 */
export declare const dynamicConfig: boolean | undefined;
Object.defineProperty(exports, "dynamicConfig", {
    get() {
        return __config.getObject<boolean>("dynamicConfig");
    },
    enumerable: true,
});

/**
 * Enables the use of named configs (CML version >2.7.0 required!)
 */
export declare const namedConfigs: boolean | undefined;
Object.defineProperty(exports, "namedConfigs", {
    get() {
        return __config.getObject<boolean>("namedConfigs");
    },
    enumerable: true,
});

/**
 * CML2 password.
 */
export declare const password: string | undefined;
Object.defineProperty(exports, "password", {
    get() {
        return __config.get("password");
    },
    enumerable: true,
});

/**
 * Disables TLS certificate verification (default is false -- will not skip / it will verify the certificate!)
 */
export declare const skipVerify: boolean | undefined;
Object.defineProperty(exports, "skipVerify", {
    get() {
        return __config.getObject<boolean>("skipVerify");
    },
    enumerable: true,
});

/**
 * CML2 API token (JWT).
 */
export declare const token: string | undefined;
Object.defineProperty(exports, "token", {
    get() {
        return __config.get("token");
    },
    enumerable: true,
});

/**
 * Enables the client cache, **Deprecated**
 */
export declare const useCache: boolean | undefined;
Object.defineProperty(exports, "useCache", {
    get() {
        return __config.getObject<boolean>("useCache");
    },
    enumerable: true,
});

/**
 * CML2 username.
 */
export declare const username: string | undefined;
Object.defineProperty(exports, "username", {
    get() {
        return __config.get("username");
    },
    enumerable: true,
});

