// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Vns3Alert extends pulumi.CustomResource {
    /**
     * Get an existing Vns3Alert resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: Vns3AlertState, opts?: pulumi.CustomResourceOptions): Vns3Alert {
        return new Vns3Alert(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cohesivenet:index/vns3Alert:Vns3Alert';

    /**
     * Returns true if the given object is an instance of Vns3Alert.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Vns3Alert {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Vns3Alert.__pulumiType;
    }

    /**
     * Nested block for custom properties
     */
    public readonly customProperties!: pulumi.Output<outputs.Vns3AlertCustomProperty[] | undefined>;
    /**
     * Is Alert enabled
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * List of Alert Events to be triggered
     */
    public readonly events!: pulumi.Output<string[] | undefined>;
    public readonly lastUpdated!: pulumi.Output<string>;
    /**
     * Arbitrary name of the alert
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * URL of the Webhook endpoint
     */
    public readonly url!: pulumi.Output<string | undefined>;
    public readonly vns3!: pulumi.Output<outputs.Vns3AlertVns3 | undefined>;
    /**
     * Associated Wehook Id
     */
    public readonly webhookId!: pulumi.Output<number>;

    /**
     * Create a Vns3Alert resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: Vns3AlertArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: Vns3AlertArgs | Vns3AlertState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as Vns3AlertState | undefined;
            resourceInputs["customProperties"] = state ? state.customProperties : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["events"] = state ? state.events : undefined;
            resourceInputs["lastUpdated"] = state ? state.lastUpdated : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["url"] = state ? state.url : undefined;
            resourceInputs["vns3"] = state ? state.vns3 : undefined;
            resourceInputs["webhookId"] = state ? state.webhookId : undefined;
        } else {
            const args = argsOrState as Vns3AlertArgs | undefined;
            if ((!args || args.webhookId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'webhookId'");
            }
            resourceInputs["customProperties"] = args ? args.customProperties : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["events"] = args ? args.events : undefined;
            resourceInputs["lastUpdated"] = args ? args.lastUpdated : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["url"] = args ? args.url : undefined;
            resourceInputs["vns3"] = args ? args.vns3 : undefined;
            resourceInputs["webhookId"] = args ? args.webhookId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Vns3Alert.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Vns3Alert resources.
 */
export interface Vns3AlertState {
    /**
     * Nested block for custom properties
     */
    customProperties?: pulumi.Input<pulumi.Input<inputs.Vns3AlertCustomProperty>[]>;
    /**
     * Is Alert enabled
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * List of Alert Events to be triggered
     */
    events?: pulumi.Input<pulumi.Input<string>[]>;
    lastUpdated?: pulumi.Input<string>;
    /**
     * Arbitrary name of the alert
     */
    name?: pulumi.Input<string>;
    /**
     * URL of the Webhook endpoint
     */
    url?: pulumi.Input<string>;
    vns3?: pulumi.Input<inputs.Vns3AlertVns3>;
    /**
     * Associated Wehook Id
     */
    webhookId?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Vns3Alert resource.
 */
export interface Vns3AlertArgs {
    /**
     * Nested block for custom properties
     */
    customProperties?: pulumi.Input<pulumi.Input<inputs.Vns3AlertCustomProperty>[]>;
    /**
     * Is Alert enabled
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * List of Alert Events to be triggered
     */
    events?: pulumi.Input<pulumi.Input<string>[]>;
    lastUpdated?: pulumi.Input<string>;
    /**
     * Arbitrary name of the alert
     */
    name?: pulumi.Input<string>;
    /**
     * URL of the Webhook endpoint
     */
    url?: pulumi.Input<string>;
    vns3?: pulumi.Input<inputs.Vns3AlertVns3>;
    /**
     * Associated Wehook Id
     */
    webhookId: pulumi.Input<number>;
}
