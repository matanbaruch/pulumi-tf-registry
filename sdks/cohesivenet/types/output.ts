// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface GetVns3ConfigResponse {
    asn: number;
    licensed: boolean;
    managerId: number;
    ntpHosts: string;
    overlayIpaddress: string;
    peered: boolean;
    privateIpaddress: string;
    publicIpaddress: string;
    securityToken: string;
    subnetGateway: string;
    topologyChecksum: string;
    topologyName: string;
    vns3Version: string;
}

export interface GetVns3ContainerNetworkResponse {
    network: string;
    running: boolean;
}

export interface GetVns3FirewallRule {
    id: string;
    script: string;
}

export interface GetVns3IpsecEndpointsResponse {
    active: boolean;
    connected: boolean;
    description: string;
    enabled: boolean;
    endpointName: string;
    endpointid: number;
    localSubnet: string;
    remoteSubnet: string;
}

export interface GetVns3RouteResponse {
    advertise: boolean;
    cidr: string;
    description: string;
    editable: boolean;
    enabled: boolean;
    id: string;
    interface: string;
    metric: number;
    netmask: string;
    table: string;
}

export interface Vns3AlertCustomProperty {
    /**
     * Custom property name
     */
    name: string;
    /**
     * Custom property value
     */
    value: string;
}

export interface Vns3AlertVns3 {
    apiToken?: string;
    host?: string;
    password?: string;
    timeout?: number;
    username?: string;
}

export interface Vns3ConfigKeysetParams {
    source?: string;
    token: string;
}

export interface Vns3ConfigLicenseParams {
    /**
     * Sets VNS3 default ASNs
     */
    asns?: number[];
    /**
     * Sets VNS3 overlay client addresses
     */
    clients?: string[];
    /**
     * Sets VNS3 VIP
     */
    controllerVip?: string;
    /**
     * Specifies number of controllers in topology
     */
    controllers?: string[];
    default?: boolean;
    /**
     * Sets VNS3 overlay subnet
     */
    subnet?: string;
}

export interface Vns3ConfigVns3 {
    apiToken?: string;
    host?: string;
    password?: string;
    timeout?: number;
    username?: string;
}

export interface Vns3FirewallFwsetEntry {
    /**
     * fwset entry comment
     */
    comment: string;
    /**
     * when fwset entry created
     */
    createdAt: string;
    /**
     * fwset entry
     */
    entry: string;
    /**
     * fwset entry resolved
     */
    entryResolved: string;
    /**
     * fwset entry last resolved
     */
    lastResolved: string;
}

export interface Vns3FirewallFwsetVns3 {
    apiToken?: string;
    host?: string;
    password?: string;
    timeout?: number;
    username?: string;
}

export interface Vns3FirewallRuleVns3 {
    apiToken?: string;
    host?: string;
    password?: string;
    timeout?: number;
    username?: string;
}

export interface Vns3FirewallRulesRule {
    /**
     * Id given to rule after it has been applied
     */
    id: string;
    /**
     * Firewall rule in VNS3 syntax
     */
    script?: string;
}

export interface Vns3FirewallRulesVns3 {
    apiToken?: string;
    host?: string;
    password?: string;
    timeout?: number;
    username?: string;
}

export interface Vns3HttpsCertsVns3 {
    apiToken?: string;
    host?: string;
    password?: string;
    timeout?: number;
    username?: string;
}

export interface Vns3IdentityControllerVns3 {
    apiToken?: string;
    host?: string;
    password?: string;
    timeout?: number;
    username?: string;
}

export interface Vns3IdentityVpnVns3 {
    apiToken?: string;
    host?: string;
    password?: string;
    timeout?: number;
    username?: string;
}

export interface Vns3IpsecEbpgPeersEbgpPeer {
    /**
     * Access Control List. IN PERMIT xxxx / OUT PERMIT xxxx
     */
    accessList?: string;
    /**
     * Specifies if we are using network distance weighting, Default: false
     */
    addNetworkDistance?: boolean;
    /**
     * Specifies direction for distance weighting. IN / OUT
     */
    addNetworkDistanceDirection?: string;
    /**
     * Specifies how many hops for network distance weighting
     */
    addNetworkDistanceHops?: number;
    /**
     * Autonomous System Number of your network
     */
    asn: number;
    /**
     * Password for BGP, if required
     */
    bgpPassword?: string;
    /**
     * Id of the eBGP peer
     */
    id: string;
    /**
     * IP address or neighbor IP for BGP
     */
    ipaddress: string;
    /**
     * ASN alias
     */
    localAsnAlias?: number;
}

export interface Vns3IpsecEbpgPeersVns3 {
    apiToken?: string;
    host?: string;
    password?: string;
    timeout?: number;
    username?: string;
}

export interface Vns3IpsecEndpointsEndpoint {
    /**
     * Description of new endpoint
     */
    description: string;
    /**
     * IPsec extra parameter settings for auth and encryption
     */
    extraConfig?: string;
    /**
     * IKE version
     */
    ikeVersion?: number;
    /**
     * IP address or remote device
     */
    ipaddress: string;
    /**
     * Name for new endpoint
     */
    name: string;
    /**
     * Perfect Forward Secrecy setting. Default: false
     */
    natTEnabled?: boolean;
    /**
     * Perfect Forward Secrecy setting. Default: false
     */
    pfs?: boolean;
    /**
     * If VTI or GRE a /30 address for the virtual interface
     */
    routeBasedIntAddress?: string;
    /**
     * Local subnet of IPsec tunnel
     */
    routeBasedLocal?: string;
    /**
     * Remote subnet of IPsec tunnel
     */
    routeBasedRemote?: string;
    /**
     * Pre-shared key for IPSec connection
     */
    secret: string;
    /**
     * Type of VPN connection. VTI or GRE
     */
    vpnType?: string;
}

export interface Vns3IpsecEndpointsVns3 {
    apiToken?: string;
    host?: string;
    password?: string;
    timeout?: number;
    username?: string;
}

export interface Vns3IpsecTrafficPairVns3 {
    apiToken?: string;
    host?: string;
    password?: string;
    timeout?: number;
    username?: string;
}

export interface Vns3IpsecTunnelVns3 {
    apiToken?: string;
    host?: string;
    password?: string;
    timeout?: number;
    username?: string;
}

export interface Vns3LicenseUpgradeVns3 {
    apiToken?: string;
    host?: string;
    password?: string;
    timeout?: number;
    username?: string;
}

export interface Vns3LinkVns3 {
    apiToken?: string;
    host?: string;
    password?: string;
    timeout?: number;
    username?: string;
}

export interface Vns3PeersPeer {
    /**
     * IP address or DNS name of remote peer
     */
    address: string;
    /**
     * MTU overide for peering link
     */
    overlayMtu?: number;
    /**
     * Peer id in topology
     */
    peerId: number;
}

export interface Vns3PeersVns3 {
    apiToken?: string;
    host?: string;
    password?: string;
    timeout?: number;
    username?: string;
}

export interface Vns3PluginImageVns3 {
    apiToken?: string;
    host?: string;
    password?: string;
    timeout?: number;
    username?: string;
}

export interface Vns3PluginImagesImage {
    /**
     * Upload docker file or zipped docker context directory
     */
    buildfile?: string;
    /**
     * URL of a dockerfile that will be used to build the image
     */
    buildurl?: string;
    /**
     * Comment
     */
    comment: string;
    /**
     * State of image
     */
    created: string;
    /**
     * Description of deployed image
     */
    description?: string;
    /**
     * Id of deployed image
     */
    id: string;
    /**
     * Name of deployed image
     */
    imageName: string;
    /**
     * Upload image file
     */
    imagefile?: string;
    /**
     * Initial import Id
     */
    importId: string;
    /**
     * Uuid of imported image
     */
    importUuid: string;
    /**
     * Local build file to create new image
     */
    localbuild?: string;
    /**
     * Local image to tag
     */
    localimage?: string;
    /**
     * Current status of upload
     */
    status: string;
    /**
     * Status response
     */
    statusMsg: string;
    /**
     * Image Tag
     */
    tagName: string;
    /**
     * URL of the image file to be imported
     */
    url?: string;
}

export interface Vns3PluginImagesVns3 {
    apiToken?: string;
    host?: string;
    password?: string;
    timeout?: number;
    username?: string;
}

export interface Vns3PluginInstanceVns3 {
    apiToken?: string;
    host?: string;
    password?: string;
    timeout?: number;
    username?: string;
}

export interface Vns3PluginInstancesVns3 {
    apiToken?: string;
    host?: string;
    password?: string;
    timeout?: number;
    username?: string;
}

export interface Vns3RoutesRoute {
    /**
     * Flag to advertise route to VNS3 Overlay Network
     */
    advertise?: boolean;
    /**
     * CIDR of route
     */
    cidr: string;
    /**
     * Description of route
     */
    description?: string;
    /**
     * Editable flag
     */
    editable: boolean;
    /**
     * Flag to enable route
     */
    enabled: boolean;
    /**
     * Specifies network gateway
     */
    gateway?: string;
    /**
     * Id of created route
     */
    id: string;
    /**
     * Specifies interface route applies to
     */
    interface?: string;
    /**
     * Route metric
     */
    metric?: number;
    /**
     * Netmask
     */
    netmask: string;
    /**
     * Table route is created in
     */
    table: string;
    /**
     * GRE endpoint id (if applicable)
     */
    tunnel: number;
}

export interface Vns3RoutesVns3 {
    apiToken?: string;
    host?: string;
    password?: string;
    timeout?: number;
    username?: string;
}

export interface Vns3WebhookCustomProperty {
    /**
     * Custom property description
     */
    description: string;
    /**
     * Custom property name
     */
    name: string;
    /**
     * Custom property value
     */
    value: string;
}

export interface Vns3WebhookHeader {
    /**
     * HTTP header name
     */
    name: string;
    /**
     * HTTP header value
     */
    value: string;
}

export interface Vns3WebhookParameter {
    /**
     * HTTP parameter name
     */
    name: string;
    /**
     * HTTP parameter name
     */
    value: string;
}

export interface Vns3WebhookVns3 {
    apiToken?: string;
    host?: string;
    password?: string;
    timeout?: number;
    username?: string;
}

export namespace config {
    export interface Vns3 {
        apiToken?: string;
        host?: string;
        password?: string;
        timeout?: number;
        username?: string;
    }

}
