// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface ProviderVns3 {
    apiToken?: pulumi.Input<string>;
    host?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    timeout?: pulumi.Input<number>;
    username?: pulumi.Input<string>;
}

export interface Vns3AlertCustomProperty {
    /**
     * Custom property name
     */
    name: pulumi.Input<string>;
    /**
     * Custom property value
     */
    value: pulumi.Input<string>;
}

export interface Vns3AlertVns3 {
    apiToken?: pulumi.Input<string>;
    host?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    timeout?: pulumi.Input<number>;
    username?: pulumi.Input<string>;
}

export interface Vns3ConfigKeysetParams {
    source?: pulumi.Input<string>;
    token: pulumi.Input<string>;
}

export interface Vns3ConfigLicenseParams {
    /**
     * Sets VNS3 default ASNs
     */
    asns?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Sets VNS3 overlay client addresses
     */
    clients?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Sets VNS3 VIP
     */
    controllerVip?: pulumi.Input<string>;
    /**
     * Specifies number of controllers in topology
     */
    controllers?: pulumi.Input<pulumi.Input<string>[]>;
    default?: pulumi.Input<boolean>;
    /**
     * Sets VNS3 overlay subnet
     */
    subnet?: pulumi.Input<string>;
}

export interface Vns3ConfigVns3 {
    apiToken?: pulumi.Input<string>;
    host?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    timeout?: pulumi.Input<number>;
    username?: pulumi.Input<string>;
}

export interface Vns3FirewallFwsetEntry {
    /**
     * fwset entry comment
     */
    comment: pulumi.Input<string>;
    /**
     * when fwset entry created
     */
    createdAt?: pulumi.Input<string>;
    /**
     * fwset entry
     */
    entry: pulumi.Input<string>;
    /**
     * fwset entry resolved
     */
    entryResolved?: pulumi.Input<string>;
    /**
     * fwset entry last resolved
     */
    lastResolved?: pulumi.Input<string>;
}

export interface Vns3FirewallFwsetVns3 {
    apiToken?: pulumi.Input<string>;
    host?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    timeout?: pulumi.Input<number>;
    username?: pulumi.Input<string>;
}

export interface Vns3FirewallRuleVns3 {
    apiToken?: pulumi.Input<string>;
    host?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    timeout?: pulumi.Input<number>;
    username?: pulumi.Input<string>;
}

export interface Vns3FirewallRulesRule {
    /**
     * Id given to rule after it has been applied
     */
    id?: pulumi.Input<string>;
    /**
     * Firewall rule in VNS3 syntax
     */
    script?: pulumi.Input<string>;
}

export interface Vns3FirewallRulesVns3 {
    apiToken?: pulumi.Input<string>;
    host?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    timeout?: pulumi.Input<number>;
    username?: pulumi.Input<string>;
}

export interface Vns3HttpsCertsVns3 {
    apiToken?: pulumi.Input<string>;
    host?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    timeout?: pulumi.Input<number>;
    username?: pulumi.Input<string>;
}

export interface Vns3IdentityControllerVns3 {
    apiToken?: pulumi.Input<string>;
    host?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    timeout?: pulumi.Input<number>;
    username?: pulumi.Input<string>;
}

export interface Vns3IdentityVpnVns3 {
    apiToken?: pulumi.Input<string>;
    host?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    timeout?: pulumi.Input<number>;
    username?: pulumi.Input<string>;
}

export interface Vns3IpsecEbpgPeersEbgpPeer {
    /**
     * Access Control List. IN PERMIT xxxx / OUT PERMIT xxxx
     */
    accessList?: pulumi.Input<string>;
    /**
     * Specifies if we are using network distance weighting, Default: false
     */
    addNetworkDistance?: pulumi.Input<boolean>;
    /**
     * Specifies direction for distance weighting. IN / OUT
     */
    addNetworkDistanceDirection?: pulumi.Input<string>;
    /**
     * Specifies how many hops for network distance weighting
     */
    addNetworkDistanceHops?: pulumi.Input<number>;
    /**
     * Autonomous System Number of your network
     */
    asn: pulumi.Input<number>;
    /**
     * Password for BGP, if required
     */
    bgpPassword?: pulumi.Input<string>;
    /**
     * Id of the eBGP peer
     */
    id?: pulumi.Input<string>;
    /**
     * IP address or neighbor IP for BGP
     */
    ipaddress: pulumi.Input<string>;
    /**
     * ASN alias
     */
    localAsnAlias?: pulumi.Input<number>;
}

export interface Vns3IpsecEbpgPeersVns3 {
    apiToken?: pulumi.Input<string>;
    host?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    timeout?: pulumi.Input<number>;
    username?: pulumi.Input<string>;
}

export interface Vns3IpsecEndpointsEndpoint {
    /**
     * Description of new endpoint
     */
    description?: pulumi.Input<string>;
    /**
     * IPsec extra parameter settings for auth and encryption
     */
    extraConfig?: pulumi.Input<string>;
    /**
     * IKE version
     */
    ikeVersion?: pulumi.Input<number>;
    /**
     * IP address or remote device
     */
    ipaddress: pulumi.Input<string>;
    /**
     * Name for new endpoint
     */
    name: pulumi.Input<string>;
    /**
     * Perfect Forward Secrecy setting. Default: false
     */
    natTEnabled?: pulumi.Input<boolean>;
    /**
     * Perfect Forward Secrecy setting. Default: false
     */
    pfs?: pulumi.Input<boolean>;
    /**
     * If VTI or GRE a /30 address for the virtual interface
     */
    routeBasedIntAddress?: pulumi.Input<string>;
    /**
     * Local subnet of IPsec tunnel
     */
    routeBasedLocal?: pulumi.Input<string>;
    /**
     * Remote subnet of IPsec tunnel
     */
    routeBasedRemote?: pulumi.Input<string>;
    /**
     * Pre-shared key for IPSec connection
     */
    secret: pulumi.Input<string>;
    /**
     * Type of VPN connection. VTI or GRE
     */
    vpnType?: pulumi.Input<string>;
}

export interface Vns3IpsecEndpointsVns3 {
    apiToken?: pulumi.Input<string>;
    host?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    timeout?: pulumi.Input<number>;
    username?: pulumi.Input<string>;
}

export interface Vns3IpsecTrafficPairVns3 {
    apiToken?: pulumi.Input<string>;
    host?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    timeout?: pulumi.Input<number>;
    username?: pulumi.Input<string>;
}

export interface Vns3IpsecTunnelVns3 {
    apiToken?: pulumi.Input<string>;
    host?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    timeout?: pulumi.Input<number>;
    username?: pulumi.Input<string>;
}

export interface Vns3LicenseUpgradeVns3 {
    apiToken?: pulumi.Input<string>;
    host?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    timeout?: pulumi.Input<number>;
    username?: pulumi.Input<string>;
}

export interface Vns3LinkVns3 {
    apiToken?: pulumi.Input<string>;
    host?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    timeout?: pulumi.Input<number>;
    username?: pulumi.Input<string>;
}

export interface Vns3PeersPeer {
    /**
     * IP address or DNS name of remote peer
     */
    address: pulumi.Input<string>;
    /**
     * MTU overide for peering link
     */
    overlayMtu?: pulumi.Input<number>;
    /**
     * Peer id in topology
     */
    peerId: pulumi.Input<number>;
}

export interface Vns3PeersVns3 {
    apiToken?: pulumi.Input<string>;
    host?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    timeout?: pulumi.Input<number>;
    username?: pulumi.Input<string>;
}

export interface Vns3PluginImageVns3 {
    apiToken?: pulumi.Input<string>;
    host?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    timeout?: pulumi.Input<number>;
    username?: pulumi.Input<string>;
}

export interface Vns3PluginImagesImage {
    /**
     * Upload docker file or zipped docker context directory
     */
    buildfile?: pulumi.Input<string>;
    /**
     * URL of a dockerfile that will be used to build the image
     */
    buildurl?: pulumi.Input<string>;
    /**
     * Comment
     */
    comment?: pulumi.Input<string>;
    /**
     * State of image
     */
    created?: pulumi.Input<string>;
    /**
     * Description of deployed image
     */
    description?: pulumi.Input<string>;
    /**
     * Id of deployed image
     */
    id?: pulumi.Input<string>;
    /**
     * Name of deployed image
     */
    imageName: pulumi.Input<string>;
    /**
     * Upload image file
     */
    imagefile?: pulumi.Input<string>;
    /**
     * Initial import Id
     */
    importId?: pulumi.Input<string>;
    /**
     * Uuid of imported image
     */
    importUuid?: pulumi.Input<string>;
    /**
     * Local build file to create new image
     */
    localbuild?: pulumi.Input<string>;
    /**
     * Local image to tag
     */
    localimage?: pulumi.Input<string>;
    /**
     * Current status of upload
     */
    status?: pulumi.Input<string>;
    /**
     * Status response
     */
    statusMsg?: pulumi.Input<string>;
    /**
     * Image Tag
     */
    tagName?: pulumi.Input<string>;
    /**
     * URL of the image file to be imported
     */
    url?: pulumi.Input<string>;
}

export interface Vns3PluginImagesVns3 {
    apiToken?: pulumi.Input<string>;
    host?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    timeout?: pulumi.Input<number>;
    username?: pulumi.Input<string>;
}

export interface Vns3PluginInstanceVns3 {
    apiToken?: pulumi.Input<string>;
    host?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    timeout?: pulumi.Input<number>;
    username?: pulumi.Input<string>;
}

export interface Vns3PluginInstancesVns3 {
    apiToken?: pulumi.Input<string>;
    host?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    timeout?: pulumi.Input<number>;
    username?: pulumi.Input<string>;
}

export interface Vns3RoutesRoute {
    /**
     * Flag to advertise route to VNS3 Overlay Network
     */
    advertise?: pulumi.Input<boolean>;
    /**
     * CIDR of route
     */
    cidr: pulumi.Input<string>;
    /**
     * Description of route
     */
    description?: pulumi.Input<string>;
    /**
     * Editable flag
     */
    editable?: pulumi.Input<boolean>;
    /**
     * Flag to enable route
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Specifies network gateway
     */
    gateway?: pulumi.Input<string>;
    /**
     * Id of created route
     */
    id?: pulumi.Input<string>;
    /**
     * Specifies interface route applies to
     */
    interface?: pulumi.Input<string>;
    /**
     * Route metric
     */
    metric?: pulumi.Input<number>;
    /**
     * Netmask
     */
    netmask?: pulumi.Input<string>;
    /**
     * Table route is created in
     */
    table?: pulumi.Input<string>;
    /**
     * GRE endpoint id (if applicable)
     */
    tunnel?: pulumi.Input<number>;
}

export interface Vns3RoutesVns3 {
    apiToken?: pulumi.Input<string>;
    host?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    timeout?: pulumi.Input<number>;
    username?: pulumi.Input<string>;
}

export interface Vns3WebhookCustomProperty {
    /**
     * Custom property description
     */
    description: pulumi.Input<string>;
    /**
     * Custom property name
     */
    name: pulumi.Input<string>;
    /**
     * Custom property value
     */
    value: pulumi.Input<string>;
}

export interface Vns3WebhookHeader {
    /**
     * HTTP header name
     */
    name: pulumi.Input<string>;
    /**
     * HTTP header value
     */
    value: pulumi.Input<string>;
}

export interface Vns3WebhookParameter {
    /**
     * HTTP parameter name
     */
    name: pulumi.Input<string>;
    /**
     * HTTP parameter name
     */
    value: pulumi.Input<string>;
}

export interface Vns3WebhookVns3 {
    apiToken?: pulumi.Input<string>;
    host?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    timeout?: pulumi.Input<number>;
    username?: pulumi.Input<string>;
}
export namespace config {
}
