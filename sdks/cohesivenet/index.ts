// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { GetVns3ConfigArgs, GetVns3ConfigResult, GetVns3ConfigOutputArgs } from "./getVns3Config";
export const getVns3Config: typeof import("./getVns3Config").getVns3Config = null as any;
export const getVns3ConfigOutput: typeof import("./getVns3Config").getVns3ConfigOutput = null as any;
utilities.lazyLoad(exports, ["getVns3Config","getVns3ConfigOutput"], () => require("./getVns3Config"));

export { GetVns3ContainerNetworkArgs, GetVns3ContainerNetworkResult, GetVns3ContainerNetworkOutputArgs } from "./getVns3ContainerNetwork";
export const getVns3ContainerNetwork: typeof import("./getVns3ContainerNetwork").getVns3ContainerNetwork = null as any;
export const getVns3ContainerNetworkOutput: typeof import("./getVns3ContainerNetwork").getVns3ContainerNetworkOutput = null as any;
utilities.lazyLoad(exports, ["getVns3ContainerNetwork","getVns3ContainerNetworkOutput"], () => require("./getVns3ContainerNetwork"));

export { GetVns3FirewallArgs, GetVns3FirewallResult, GetVns3FirewallOutputArgs } from "./getVns3Firewall";
export const getVns3Firewall: typeof import("./getVns3Firewall").getVns3Firewall = null as any;
export const getVns3FirewallOutput: typeof import("./getVns3Firewall").getVns3FirewallOutput = null as any;
utilities.lazyLoad(exports, ["getVns3Firewall","getVns3FirewallOutput"], () => require("./getVns3Firewall"));

export { GetVns3IpsecEndpointsArgs, GetVns3IpsecEndpointsResult, GetVns3IpsecEndpointsOutputArgs } from "./getVns3IpsecEndpoints";
export const getVns3IpsecEndpoints: typeof import("./getVns3IpsecEndpoints").getVns3IpsecEndpoints = null as any;
export const getVns3IpsecEndpointsOutput: typeof import("./getVns3IpsecEndpoints").getVns3IpsecEndpointsOutput = null as any;
utilities.lazyLoad(exports, ["getVns3IpsecEndpoints","getVns3IpsecEndpointsOutput"], () => require("./getVns3IpsecEndpoints"));

export { GetVns3RouteArgs, GetVns3RouteResult, GetVns3RouteOutputArgs } from "./getVns3Route";
export const getVns3Route: typeof import("./getVns3Route").getVns3Route = null as any;
export const getVns3RouteOutput: typeof import("./getVns3Route").getVns3RouteOutput = null as any;
utilities.lazyLoad(exports, ["getVns3Route","getVns3RouteOutput"], () => require("./getVns3Route"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { Vns3AlertArgs, Vns3AlertState } from "./vns3Alert";
export type Vns3Alert = import("./vns3Alert").Vns3Alert;
export const Vns3Alert: typeof import("./vns3Alert").Vns3Alert = null as any;
utilities.lazyLoad(exports, ["Vns3Alert"], () => require("./vns3Alert"));

export { Vns3ConfigArgs, Vns3ConfigState } from "./vns3Config";
export type Vns3Config = import("./vns3Config").Vns3Config;
export const Vns3Config: typeof import("./vns3Config").Vns3Config = null as any;
utilities.lazyLoad(exports, ["Vns3Config"], () => require("./vns3Config"));

export { Vns3FirewallFwsetArgs, Vns3FirewallFwsetState } from "./vns3FirewallFwset";
export type Vns3FirewallFwset = import("./vns3FirewallFwset").Vns3FirewallFwset;
export const Vns3FirewallFwset: typeof import("./vns3FirewallFwset").Vns3FirewallFwset = null as any;
utilities.lazyLoad(exports, ["Vns3FirewallFwset"], () => require("./vns3FirewallFwset"));

export { Vns3FirewallRuleArgs, Vns3FirewallRuleState } from "./vns3FirewallRule";
export type Vns3FirewallRule = import("./vns3FirewallRule").Vns3FirewallRule;
export const Vns3FirewallRule: typeof import("./vns3FirewallRule").Vns3FirewallRule = null as any;
utilities.lazyLoad(exports, ["Vns3FirewallRule"], () => require("./vns3FirewallRule"));

export { Vns3FirewallRulesArgs, Vns3FirewallRulesState } from "./vns3FirewallRules";
export type Vns3FirewallRules = import("./vns3FirewallRules").Vns3FirewallRules;
export const Vns3FirewallRules: typeof import("./vns3FirewallRules").Vns3FirewallRules = null as any;
utilities.lazyLoad(exports, ["Vns3FirewallRules"], () => require("./vns3FirewallRules"));

export { Vns3HttpsCertsArgs, Vns3HttpsCertsState } from "./vns3HttpsCerts";
export type Vns3HttpsCerts = import("./vns3HttpsCerts").Vns3HttpsCerts;
export const Vns3HttpsCerts: typeof import("./vns3HttpsCerts").Vns3HttpsCerts = null as any;
utilities.lazyLoad(exports, ["Vns3HttpsCerts"], () => require("./vns3HttpsCerts"));

export { Vns3IdentityControllerArgs, Vns3IdentityControllerState } from "./vns3IdentityController";
export type Vns3IdentityController = import("./vns3IdentityController").Vns3IdentityController;
export const Vns3IdentityController: typeof import("./vns3IdentityController").Vns3IdentityController = null as any;
utilities.lazyLoad(exports, ["Vns3IdentityController"], () => require("./vns3IdentityController"));

export { Vns3IdentityVpnArgs, Vns3IdentityVpnState } from "./vns3IdentityVpn";
export type Vns3IdentityVpn = import("./vns3IdentityVpn").Vns3IdentityVpn;
export const Vns3IdentityVpn: typeof import("./vns3IdentityVpn").Vns3IdentityVpn = null as any;
utilities.lazyLoad(exports, ["Vns3IdentityVpn"], () => require("./vns3IdentityVpn"));

export { Vns3IpsecEbpgPeersArgs, Vns3IpsecEbpgPeersState } from "./vns3IpsecEbpgPeers";
export type Vns3IpsecEbpgPeers = import("./vns3IpsecEbpgPeers").Vns3IpsecEbpgPeers;
export const Vns3IpsecEbpgPeers: typeof import("./vns3IpsecEbpgPeers").Vns3IpsecEbpgPeers = null as any;
utilities.lazyLoad(exports, ["Vns3IpsecEbpgPeers"], () => require("./vns3IpsecEbpgPeers"));

export { Vns3IpsecEndpointsArgs, Vns3IpsecEndpointsState } from "./vns3IpsecEndpoints";
export type Vns3IpsecEndpoints = import("./vns3IpsecEndpoints").Vns3IpsecEndpoints;
export const Vns3IpsecEndpoints: typeof import("./vns3IpsecEndpoints").Vns3IpsecEndpoints = null as any;
utilities.lazyLoad(exports, ["Vns3IpsecEndpoints"], () => require("./vns3IpsecEndpoints"));

export { Vns3IpsecTrafficPairArgs, Vns3IpsecTrafficPairState } from "./vns3IpsecTrafficPair";
export type Vns3IpsecTrafficPair = import("./vns3IpsecTrafficPair").Vns3IpsecTrafficPair;
export const Vns3IpsecTrafficPair: typeof import("./vns3IpsecTrafficPair").Vns3IpsecTrafficPair = null as any;
utilities.lazyLoad(exports, ["Vns3IpsecTrafficPair"], () => require("./vns3IpsecTrafficPair"));

export { Vns3IpsecTunnelArgs, Vns3IpsecTunnelState } from "./vns3IpsecTunnel";
export type Vns3IpsecTunnel = import("./vns3IpsecTunnel").Vns3IpsecTunnel;
export const Vns3IpsecTunnel: typeof import("./vns3IpsecTunnel").Vns3IpsecTunnel = null as any;
utilities.lazyLoad(exports, ["Vns3IpsecTunnel"], () => require("./vns3IpsecTunnel"));

export { Vns3LicenseUpgradeArgs, Vns3LicenseUpgradeState } from "./vns3LicenseUpgrade";
export type Vns3LicenseUpgrade = import("./vns3LicenseUpgrade").Vns3LicenseUpgrade;
export const Vns3LicenseUpgrade: typeof import("./vns3LicenseUpgrade").Vns3LicenseUpgrade = null as any;
utilities.lazyLoad(exports, ["Vns3LicenseUpgrade"], () => require("./vns3LicenseUpgrade"));

export { Vns3LinkArgs, Vns3LinkState } from "./vns3Link";
export type Vns3Link = import("./vns3Link").Vns3Link;
export const Vns3Link: typeof import("./vns3Link").Vns3Link = null as any;
utilities.lazyLoad(exports, ["Vns3Link"], () => require("./vns3Link"));

export { Vns3PeersArgs, Vns3PeersState } from "./vns3Peers";
export type Vns3Peers = import("./vns3Peers").Vns3Peers;
export const Vns3Peers: typeof import("./vns3Peers").Vns3Peers = null as any;
utilities.lazyLoad(exports, ["Vns3Peers"], () => require("./vns3Peers"));

export { Vns3PluginImageArgs, Vns3PluginImageState } from "./vns3PluginImage";
export type Vns3PluginImage = import("./vns3PluginImage").Vns3PluginImage;
export const Vns3PluginImage: typeof import("./vns3PluginImage").Vns3PluginImage = null as any;
utilities.lazyLoad(exports, ["Vns3PluginImage"], () => require("./vns3PluginImage"));

export { Vns3PluginImagesArgs, Vns3PluginImagesState } from "./vns3PluginImages";
export type Vns3PluginImages = import("./vns3PluginImages").Vns3PluginImages;
export const Vns3PluginImages: typeof import("./vns3PluginImages").Vns3PluginImages = null as any;
utilities.lazyLoad(exports, ["Vns3PluginImages"], () => require("./vns3PluginImages"));

export { Vns3PluginInstanceArgs, Vns3PluginInstanceState } from "./vns3PluginInstance";
export type Vns3PluginInstance = import("./vns3PluginInstance").Vns3PluginInstance;
export const Vns3PluginInstance: typeof import("./vns3PluginInstance").Vns3PluginInstance = null as any;
utilities.lazyLoad(exports, ["Vns3PluginInstance"], () => require("./vns3PluginInstance"));

export { Vns3PluginInstancesArgs, Vns3PluginInstancesState } from "./vns3PluginInstances";
export type Vns3PluginInstances = import("./vns3PluginInstances").Vns3PluginInstances;
export const Vns3PluginInstances: typeof import("./vns3PluginInstances").Vns3PluginInstances = null as any;
utilities.lazyLoad(exports, ["Vns3PluginInstances"], () => require("./vns3PluginInstances"));

export { Vns3RoutesArgs, Vns3RoutesState } from "./vns3Routes";
export type Vns3Routes = import("./vns3Routes").Vns3Routes;
export const Vns3Routes: typeof import("./vns3Routes").Vns3Routes = null as any;
utilities.lazyLoad(exports, ["Vns3Routes"], () => require("./vns3Routes"));

export { Vns3WebhookArgs, Vns3WebhookState } from "./vns3Webhook";
export type Vns3Webhook = import("./vns3Webhook").Vns3Webhook;
export const Vns3Webhook: typeof import("./vns3Webhook").Vns3Webhook = null as any;
utilities.lazyLoad(exports, ["Vns3Webhook"], () => require("./vns3Webhook"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "cohesivenet:index/vns3Alert:Vns3Alert":
                return new Vns3Alert(name, <any>undefined, { urn })
            case "cohesivenet:index/vns3Config:Vns3Config":
                return new Vns3Config(name, <any>undefined, { urn })
            case "cohesivenet:index/vns3FirewallFwset:Vns3FirewallFwset":
                return new Vns3FirewallFwset(name, <any>undefined, { urn })
            case "cohesivenet:index/vns3FirewallRule:Vns3FirewallRule":
                return new Vns3FirewallRule(name, <any>undefined, { urn })
            case "cohesivenet:index/vns3FirewallRules:Vns3FirewallRules":
                return new Vns3FirewallRules(name, <any>undefined, { urn })
            case "cohesivenet:index/vns3HttpsCerts:Vns3HttpsCerts":
                return new Vns3HttpsCerts(name, <any>undefined, { urn })
            case "cohesivenet:index/vns3IdentityController:Vns3IdentityController":
                return new Vns3IdentityController(name, <any>undefined, { urn })
            case "cohesivenet:index/vns3IdentityVpn:Vns3IdentityVpn":
                return new Vns3IdentityVpn(name, <any>undefined, { urn })
            case "cohesivenet:index/vns3IpsecEbpgPeers:Vns3IpsecEbpgPeers":
                return new Vns3IpsecEbpgPeers(name, <any>undefined, { urn })
            case "cohesivenet:index/vns3IpsecEndpoints:Vns3IpsecEndpoints":
                return new Vns3IpsecEndpoints(name, <any>undefined, { urn })
            case "cohesivenet:index/vns3IpsecTrafficPair:Vns3IpsecTrafficPair":
                return new Vns3IpsecTrafficPair(name, <any>undefined, { urn })
            case "cohesivenet:index/vns3IpsecTunnel:Vns3IpsecTunnel":
                return new Vns3IpsecTunnel(name, <any>undefined, { urn })
            case "cohesivenet:index/vns3LicenseUpgrade:Vns3LicenseUpgrade":
                return new Vns3LicenseUpgrade(name, <any>undefined, { urn })
            case "cohesivenet:index/vns3Link:Vns3Link":
                return new Vns3Link(name, <any>undefined, { urn })
            case "cohesivenet:index/vns3Peers:Vns3Peers":
                return new Vns3Peers(name, <any>undefined, { urn })
            case "cohesivenet:index/vns3PluginImage:Vns3PluginImage":
                return new Vns3PluginImage(name, <any>undefined, { urn })
            case "cohesivenet:index/vns3PluginImages:Vns3PluginImages":
                return new Vns3PluginImages(name, <any>undefined, { urn })
            case "cohesivenet:index/vns3PluginInstance:Vns3PluginInstance":
                return new Vns3PluginInstance(name, <any>undefined, { urn })
            case "cohesivenet:index/vns3PluginInstances:Vns3PluginInstances":
                return new Vns3PluginInstances(name, <any>undefined, { urn })
            case "cohesivenet:index/vns3Routes:Vns3Routes":
                return new Vns3Routes(name, <any>undefined, { urn })
            case "cohesivenet:index/vns3Webhook:Vns3Webhook":
                return new Vns3Webhook(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("cohesivenet", "index/vns3Alert", _module)
pulumi.runtime.registerResourceModule("cohesivenet", "index/vns3Config", _module)
pulumi.runtime.registerResourceModule("cohesivenet", "index/vns3FirewallFwset", _module)
pulumi.runtime.registerResourceModule("cohesivenet", "index/vns3FirewallRule", _module)
pulumi.runtime.registerResourceModule("cohesivenet", "index/vns3FirewallRules", _module)
pulumi.runtime.registerResourceModule("cohesivenet", "index/vns3HttpsCerts", _module)
pulumi.runtime.registerResourceModule("cohesivenet", "index/vns3IdentityController", _module)
pulumi.runtime.registerResourceModule("cohesivenet", "index/vns3IdentityVpn", _module)
pulumi.runtime.registerResourceModule("cohesivenet", "index/vns3IpsecEbpgPeers", _module)
pulumi.runtime.registerResourceModule("cohesivenet", "index/vns3IpsecEndpoints", _module)
pulumi.runtime.registerResourceModule("cohesivenet", "index/vns3IpsecTrafficPair", _module)
pulumi.runtime.registerResourceModule("cohesivenet", "index/vns3IpsecTunnel", _module)
pulumi.runtime.registerResourceModule("cohesivenet", "index/vns3LicenseUpgrade", _module)
pulumi.runtime.registerResourceModule("cohesivenet", "index/vns3Link", _module)
pulumi.runtime.registerResourceModule("cohesivenet", "index/vns3Peers", _module)
pulumi.runtime.registerResourceModule("cohesivenet", "index/vns3PluginImage", _module)
pulumi.runtime.registerResourceModule("cohesivenet", "index/vns3PluginImages", _module)
pulumi.runtime.registerResourceModule("cohesivenet", "index/vns3PluginInstance", _module)
pulumi.runtime.registerResourceModule("cohesivenet", "index/vns3PluginInstances", _module)
pulumi.runtime.registerResourceModule("cohesivenet", "index/vns3Routes", _module)
pulumi.runtime.registerResourceModule("cohesivenet", "index/vns3Webhook", _module)
pulumi.runtime.registerResourcePackage("cohesivenet", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:cohesivenet") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
