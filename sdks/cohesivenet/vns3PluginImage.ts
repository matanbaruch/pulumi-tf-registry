// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Vns3PluginImage extends pulumi.CustomResource {
    /**
     * Get an existing Vns3PluginImage resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: Vns3PluginImageState, opts?: pulumi.CustomResourceOptions): Vns3PluginImage {
        return new Vns3PluginImage(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cohesivenet:index/vns3PluginImage:Vns3PluginImage';

    /**
     * Returns true if the given object is an instance of Vns3PluginImage.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Vns3PluginImage {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Vns3PluginImage.__pulumiType;
    }

    /**
     * Upload image file
     */
    public readonly catalogId!: pulumi.Output<string | undefined>;
    /**
     * URL of a dockerfile that will be used to build the image
     */
    public readonly command!: pulumi.Output<string | undefined>;
    /**
     * Description of deployed image
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Local build file to create new image
     */
    public readonly documentationUrl!: pulumi.Output<string | undefined>;
    /**
     * URL of the image file to be imported
     */
    public readonly imageUrl!: pulumi.Output<string | undefined>;
    public readonly lastUpdated!: pulumi.Output<string>;
    /**
     * Name of deployed image
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Local image to tag
     */
    public readonly supportUrl!: pulumi.Output<string | undefined>;
    /**
     * Upload docker file or zipped docker context directory
     */
    public readonly version!: pulumi.Output<string | undefined>;
    public readonly vns3!: pulumi.Output<outputs.Vns3PluginImageVns3 | undefined>;

    /**
     * Create a Vns3PluginImage resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: Vns3PluginImageArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: Vns3PluginImageArgs | Vns3PluginImageState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as Vns3PluginImageState | undefined;
            resourceInputs["catalogId"] = state ? state.catalogId : undefined;
            resourceInputs["command"] = state ? state.command : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["documentationUrl"] = state ? state.documentationUrl : undefined;
            resourceInputs["imageUrl"] = state ? state.imageUrl : undefined;
            resourceInputs["lastUpdated"] = state ? state.lastUpdated : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["supportUrl"] = state ? state.supportUrl : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
            resourceInputs["vns3"] = state ? state.vns3 : undefined;
        } else {
            const args = argsOrState as Vns3PluginImageArgs | undefined;
            resourceInputs["catalogId"] = args ? args.catalogId : undefined;
            resourceInputs["command"] = args ? args.command : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["documentationUrl"] = args ? args.documentationUrl : undefined;
            resourceInputs["imageUrl"] = args ? args.imageUrl : undefined;
            resourceInputs["lastUpdated"] = args ? args.lastUpdated : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["supportUrl"] = args ? args.supportUrl : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
            resourceInputs["vns3"] = args ? args.vns3 : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Vns3PluginImage.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Vns3PluginImage resources.
 */
export interface Vns3PluginImageState {
    /**
     * Upload image file
     */
    catalogId?: pulumi.Input<string>;
    /**
     * URL of a dockerfile that will be used to build the image
     */
    command?: pulumi.Input<string>;
    /**
     * Description of deployed image
     */
    description?: pulumi.Input<string>;
    /**
     * Local build file to create new image
     */
    documentationUrl?: pulumi.Input<string>;
    /**
     * URL of the image file to be imported
     */
    imageUrl?: pulumi.Input<string>;
    lastUpdated?: pulumi.Input<string>;
    /**
     * Name of deployed image
     */
    name?: pulumi.Input<string>;
    /**
     * Local image to tag
     */
    supportUrl?: pulumi.Input<string>;
    /**
     * Upload docker file or zipped docker context directory
     */
    version?: pulumi.Input<string>;
    vns3?: pulumi.Input<inputs.Vns3PluginImageVns3>;
}

/**
 * The set of arguments for constructing a Vns3PluginImage resource.
 */
export interface Vns3PluginImageArgs {
    /**
     * Upload image file
     */
    catalogId?: pulumi.Input<string>;
    /**
     * URL of a dockerfile that will be used to build the image
     */
    command?: pulumi.Input<string>;
    /**
     * Description of deployed image
     */
    description?: pulumi.Input<string>;
    /**
     * Local build file to create new image
     */
    documentationUrl?: pulumi.Input<string>;
    /**
     * URL of the image file to be imported
     */
    imageUrl?: pulumi.Input<string>;
    lastUpdated?: pulumi.Input<string>;
    /**
     * Name of deployed image
     */
    name?: pulumi.Input<string>;
    /**
     * Local image to tag
     */
    supportUrl?: pulumi.Input<string>;
    /**
     * Upload docker file or zipped docker context directory
     */
    version?: pulumi.Input<string>;
    vns3?: pulumi.Input<inputs.Vns3PluginImageVns3>;
}
