// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Vns3IpsecTrafficPair extends pulumi.CustomResource {
    /**
     * Get an existing Vns3IpsecTrafficPair resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: Vns3IpsecTrafficPairState, opts?: pulumi.CustomResourceOptions): Vns3IpsecTrafficPair {
        return new Vns3IpsecTrafficPair(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cohesivenet:index/vns3IpsecTrafficPair:Vns3IpsecTrafficPair';

    /**
     * Returns true if the given object is an instance of Vns3IpsecTrafficPair.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Vns3IpsecTrafficPair {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Vns3IpsecTrafficPair.__pulumiType;
    }

    /**
     * Traffic Pair Description
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Enable / Disable Traffic Pair
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * Endpoint ID to associate Trrafic Pair
     */
    public readonly endpointId!: pulumi.Output<number>;
    /**
     * ID of IPsec Endpoint
     */
    public /*out*/ readonly ipsecEndpointId!: pulumi.Output<number>;
    public readonly lastUpdated!: pulumi.Output<string>;
    /**
     * Local Subnet CIDR of Traffic Pair
     */
    public readonly localSubnet!: pulumi.Output<string>;
    /**
     * Keep Alive Ping Interface (eth0/tun0)
     */
    public readonly pingInterface!: pulumi.Output<string>;
    /**
     * Interval between Keep Alive Pings
     */
    public readonly pingInterval!: pulumi.Output<number>;
    /**
     * IP Address to Send Keep Alive Pings
     */
    public readonly pingIpaddress!: pulumi.Output<string | undefined>;
    /**
     * Remote Subnet CIDR of Traffic Pair
     */
    public readonly remoteSubnet!: pulumi.Output<string>;
    public readonly vns3!: pulumi.Output<outputs.Vns3IpsecTrafficPairVns3 | undefined>;

    /**
     * Create a Vns3IpsecTrafficPair resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: Vns3IpsecTrafficPairArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: Vns3IpsecTrafficPairArgs | Vns3IpsecTrafficPairState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as Vns3IpsecTrafficPairState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["endpointId"] = state ? state.endpointId : undefined;
            resourceInputs["ipsecEndpointId"] = state ? state.ipsecEndpointId : undefined;
            resourceInputs["lastUpdated"] = state ? state.lastUpdated : undefined;
            resourceInputs["localSubnet"] = state ? state.localSubnet : undefined;
            resourceInputs["pingInterface"] = state ? state.pingInterface : undefined;
            resourceInputs["pingInterval"] = state ? state.pingInterval : undefined;
            resourceInputs["pingIpaddress"] = state ? state.pingIpaddress : undefined;
            resourceInputs["remoteSubnet"] = state ? state.remoteSubnet : undefined;
            resourceInputs["vns3"] = state ? state.vns3 : undefined;
        } else {
            const args = argsOrState as Vns3IpsecTrafficPairArgs | undefined;
            if ((!args || args.endpointId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'endpointId'");
            }
            if ((!args || args.remoteSubnet === undefined) && !opts.urn) {
                throw new Error("Missing required property 'remoteSubnet'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["endpointId"] = args ? args.endpointId : undefined;
            resourceInputs["lastUpdated"] = args ? args.lastUpdated : undefined;
            resourceInputs["localSubnet"] = args ? args.localSubnet : undefined;
            resourceInputs["pingInterface"] = args ? args.pingInterface : undefined;
            resourceInputs["pingInterval"] = args ? args.pingInterval : undefined;
            resourceInputs["pingIpaddress"] = args ? args.pingIpaddress : undefined;
            resourceInputs["remoteSubnet"] = args ? args.remoteSubnet : undefined;
            resourceInputs["vns3"] = args ? args.vns3 : undefined;
            resourceInputs["ipsecEndpointId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Vns3IpsecTrafficPair.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Vns3IpsecTrafficPair resources.
 */
export interface Vns3IpsecTrafficPairState {
    /**
     * Traffic Pair Description
     */
    description?: pulumi.Input<string>;
    /**
     * Enable / Disable Traffic Pair
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Endpoint ID to associate Trrafic Pair
     */
    endpointId?: pulumi.Input<number>;
    /**
     * ID of IPsec Endpoint
     */
    ipsecEndpointId?: pulumi.Input<number>;
    lastUpdated?: pulumi.Input<string>;
    /**
     * Local Subnet CIDR of Traffic Pair
     */
    localSubnet?: pulumi.Input<string>;
    /**
     * Keep Alive Ping Interface (eth0/tun0)
     */
    pingInterface?: pulumi.Input<string>;
    /**
     * Interval between Keep Alive Pings
     */
    pingInterval?: pulumi.Input<number>;
    /**
     * IP Address to Send Keep Alive Pings
     */
    pingIpaddress?: pulumi.Input<string>;
    /**
     * Remote Subnet CIDR of Traffic Pair
     */
    remoteSubnet?: pulumi.Input<string>;
    vns3?: pulumi.Input<inputs.Vns3IpsecTrafficPairVns3>;
}

/**
 * The set of arguments for constructing a Vns3IpsecTrafficPair resource.
 */
export interface Vns3IpsecTrafficPairArgs {
    /**
     * Traffic Pair Description
     */
    description?: pulumi.Input<string>;
    /**
     * Enable / Disable Traffic Pair
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Endpoint ID to associate Trrafic Pair
     */
    endpointId: pulumi.Input<number>;
    lastUpdated?: pulumi.Input<string>;
    /**
     * Local Subnet CIDR of Traffic Pair
     */
    localSubnet?: pulumi.Input<string>;
    /**
     * Keep Alive Ping Interface (eth0/tun0)
     */
    pingInterface?: pulumi.Input<string>;
    /**
     * Interval between Keep Alive Pings
     */
    pingInterval?: pulumi.Input<number>;
    /**
     * IP Address to Send Keep Alive Pings
     */
    pingIpaddress?: pulumi.Input<string>;
    /**
     * Remote Subnet CIDR of Traffic Pair
     */
    remoteSubnet: pulumi.Input<string>;
    vns3?: pulumi.Input<inputs.Vns3IpsecTrafficPairVns3>;
}
