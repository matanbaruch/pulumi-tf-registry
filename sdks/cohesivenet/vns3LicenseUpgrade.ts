// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Vns3LicenseUpgrade extends pulumi.CustomResource {
    /**
     * Get an existing Vns3LicenseUpgrade resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: Vns3LicenseUpgradeState, opts?: pulumi.CustomResourceOptions): Vns3LicenseUpgrade {
        return new Vns3LicenseUpgrade(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cohesivenet:index/vns3LicenseUpgrade:Vns3LicenseUpgrade';

    /**
     * Returns true if the given object is an instance of Vns3LicenseUpgrade.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Vns3LicenseUpgrade {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Vns3LicenseUpgrade.__pulumiType;
    }

    /**
     * Comma separated list of clientpack ips
     */
    public readonly clientpackIps!: pulumi.Output<string | undefined>;
    /**
     * License upgrade file path
     */
    public readonly licenseUpgradeKey!: pulumi.Output<string | undefined>;
    /**
     * Comma separated list of manager ips
     */
    public readonly managerIps!: pulumi.Output<string | undefined>;
    public readonly vns3!: pulumi.Output<outputs.Vns3LicenseUpgradeVns3 | undefined>;

    /**
     * Create a Vns3LicenseUpgrade resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: Vns3LicenseUpgradeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: Vns3LicenseUpgradeArgs | Vns3LicenseUpgradeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as Vns3LicenseUpgradeState | undefined;
            resourceInputs["clientpackIps"] = state ? state.clientpackIps : undefined;
            resourceInputs["licenseUpgradeKey"] = state ? state.licenseUpgradeKey : undefined;
            resourceInputs["managerIps"] = state ? state.managerIps : undefined;
            resourceInputs["vns3"] = state ? state.vns3 : undefined;
        } else {
            const args = argsOrState as Vns3LicenseUpgradeArgs | undefined;
            resourceInputs["clientpackIps"] = args ? args.clientpackIps : undefined;
            resourceInputs["licenseUpgradeKey"] = args ? args.licenseUpgradeKey : undefined;
            resourceInputs["managerIps"] = args ? args.managerIps : undefined;
            resourceInputs["vns3"] = args ? args.vns3 : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Vns3LicenseUpgrade.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Vns3LicenseUpgrade resources.
 */
export interface Vns3LicenseUpgradeState {
    /**
     * Comma separated list of clientpack ips
     */
    clientpackIps?: pulumi.Input<string>;
    /**
     * License upgrade file path
     */
    licenseUpgradeKey?: pulumi.Input<string>;
    /**
     * Comma separated list of manager ips
     */
    managerIps?: pulumi.Input<string>;
    vns3?: pulumi.Input<inputs.Vns3LicenseUpgradeVns3>;
}

/**
 * The set of arguments for constructing a Vns3LicenseUpgrade resource.
 */
export interface Vns3LicenseUpgradeArgs {
    /**
     * Comma separated list of clientpack ips
     */
    clientpackIps?: pulumi.Input<string>;
    /**
     * License upgrade file path
     */
    licenseUpgradeKey?: pulumi.Input<string>;
    /**
     * Comma separated list of manager ips
     */
    managerIps?: pulumi.Input<string>;
    vns3?: pulumi.Input<inputs.Vns3LicenseUpgradeVns3>;
}
