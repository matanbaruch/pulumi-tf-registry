// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Vns3PluginInstances extends pulumi.CustomResource {
    /**
     * Get an existing Vns3PluginInstances resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: Vns3PluginInstancesState, opts?: pulumi.CustomResourceOptions): Vns3PluginInstances {
        return new Vns3PluginInstances(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cohesivenet:index/vns3PluginInstances:Vns3PluginInstances';

    /**
     * Returns true if the given object is an instance of Vns3PluginInstances.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Vns3PluginInstances {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Vns3PluginInstances.__pulumiType;
    }

    /**
     * Command used to start instance
     */
    public readonly command!: pulumi.Output<string | undefined>;
    /**
     * Description of instance
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Environment variables used when launching instance
     */
    public readonly environment!: pulumi.Output<string | undefined>;
    /**
     * IP address of deployed image
     */
    public readonly ipAddress!: pulumi.Output<string | undefined>;
    public readonly lastUpdated!: pulumi.Output<string>;
    /**
     * Name of instance
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Id of instance
     */
    public readonly pluginId!: pulumi.Output<string | undefined>;
    public readonly vns3!: pulumi.Output<outputs.Vns3PluginInstancesVns3 | undefined>;

    /**
     * Create a Vns3PluginInstances resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: Vns3PluginInstancesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: Vns3PluginInstancesArgs | Vns3PluginInstancesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as Vns3PluginInstancesState | undefined;
            resourceInputs["command"] = state ? state.command : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["environment"] = state ? state.environment : undefined;
            resourceInputs["ipAddress"] = state ? state.ipAddress : undefined;
            resourceInputs["lastUpdated"] = state ? state.lastUpdated : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["pluginId"] = state ? state.pluginId : undefined;
            resourceInputs["vns3"] = state ? state.vns3 : undefined;
        } else {
            const args = argsOrState as Vns3PluginInstancesArgs | undefined;
            resourceInputs["command"] = args ? args.command : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["environment"] = args ? args.environment : undefined;
            resourceInputs["ipAddress"] = args ? args.ipAddress : undefined;
            resourceInputs["lastUpdated"] = args ? args.lastUpdated : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["pluginId"] = args ? args.pluginId : undefined;
            resourceInputs["vns3"] = args ? args.vns3 : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Vns3PluginInstances.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Vns3PluginInstances resources.
 */
export interface Vns3PluginInstancesState {
    /**
     * Command used to start instance
     */
    command?: pulumi.Input<string>;
    /**
     * Description of instance
     */
    description?: pulumi.Input<string>;
    /**
     * Environment variables used when launching instance
     */
    environment?: pulumi.Input<string>;
    /**
     * IP address of deployed image
     */
    ipAddress?: pulumi.Input<string>;
    lastUpdated?: pulumi.Input<string>;
    /**
     * Name of instance
     */
    name?: pulumi.Input<string>;
    /**
     * Id of instance
     */
    pluginId?: pulumi.Input<string>;
    vns3?: pulumi.Input<inputs.Vns3PluginInstancesVns3>;
}

/**
 * The set of arguments for constructing a Vns3PluginInstances resource.
 */
export interface Vns3PluginInstancesArgs {
    /**
     * Command used to start instance
     */
    command?: pulumi.Input<string>;
    /**
     * Description of instance
     */
    description?: pulumi.Input<string>;
    /**
     * Environment variables used when launching instance
     */
    environment?: pulumi.Input<string>;
    /**
     * IP address of deployed image
     */
    ipAddress?: pulumi.Input<string>;
    lastUpdated?: pulumi.Input<string>;
    /**
     * Name of instance
     */
    name?: pulumi.Input<string>;
    /**
     * Id of instance
     */
    pluginId?: pulumi.Input<string>;
    vns3?: pulumi.Input<inputs.Vns3PluginInstancesVns3>;
}
