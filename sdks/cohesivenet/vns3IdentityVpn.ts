// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Vns3IdentityVpn extends pulumi.CustomResource {
    /**
     * Get an existing Vns3IdentityVpn resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: Vns3IdentityVpnState, opts?: pulumi.CustomResourceOptions): Vns3IdentityVpn {
        return new Vns3IdentityVpn(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cohesivenet:index/vns3IdentityVpn:Vns3IdentityVpn';

    /**
     * Returns true if the given object is an instance of Vns3IdentityVpn.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Vns3IdentityVpn {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Vns3IdentityVpn.__pulumiType;
    }

    /**
     * Authorization Endpoint
     */
    public readonly authorizationEndpoint!: pulumi.Output<string | undefined>;
    /**
     * Enabled
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * Host
     */
    public readonly host!: pulumi.Output<string | undefined>;
    /**
     * Identifier
     */
    public readonly identifier!: pulumi.Output<string | undefined>;
    /**
     * Identity provider
     */
    public readonly identityProvider!: pulumi.Output<string | undefined>;
    /**
     * Issuer
     */
    public readonly issuer!: pulumi.Output<string | undefined>;
    /**
     * Jwks Uri
     */
    public readonly jwksUri!: pulumi.Output<string | undefined>;
    public readonly lastUpdated!: pulumi.Output<string>;
    /**
     * Provider Url
     */
    public readonly providerUrl!: pulumi.Output<string | undefined>;
    /**
     * Redirect Hostname
     */
    public readonly redirectHostname!: pulumi.Output<string | undefined>;
    /**
     * Redirect Uri
     */
    public readonly redirectUri!: pulumi.Output<string | undefined>;
    /**
     * Secret
     */
    public readonly secret!: pulumi.Output<string | undefined>;
    /**
     * Token Endpoint
     */
    public readonly tokenEndpoint!: pulumi.Output<string | undefined>;
    /**
     * Userinfo Endpoint
     */
    public readonly userinfoEndpoint!: pulumi.Output<string | undefined>;
    public readonly vns3!: pulumi.Output<outputs.Vns3IdentityVpnVns3 | undefined>;

    /**
     * Create a Vns3IdentityVpn resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: Vns3IdentityVpnArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: Vns3IdentityVpnArgs | Vns3IdentityVpnState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as Vns3IdentityVpnState | undefined;
            resourceInputs["authorizationEndpoint"] = state ? state.authorizationEndpoint : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["host"] = state ? state.host : undefined;
            resourceInputs["identifier"] = state ? state.identifier : undefined;
            resourceInputs["identityProvider"] = state ? state.identityProvider : undefined;
            resourceInputs["issuer"] = state ? state.issuer : undefined;
            resourceInputs["jwksUri"] = state ? state.jwksUri : undefined;
            resourceInputs["lastUpdated"] = state ? state.lastUpdated : undefined;
            resourceInputs["providerUrl"] = state ? state.providerUrl : undefined;
            resourceInputs["redirectHostname"] = state ? state.redirectHostname : undefined;
            resourceInputs["redirectUri"] = state ? state.redirectUri : undefined;
            resourceInputs["secret"] = state ? state.secret : undefined;
            resourceInputs["tokenEndpoint"] = state ? state.tokenEndpoint : undefined;
            resourceInputs["userinfoEndpoint"] = state ? state.userinfoEndpoint : undefined;
            resourceInputs["vns3"] = state ? state.vns3 : undefined;
        } else {
            const args = argsOrState as Vns3IdentityVpnArgs | undefined;
            resourceInputs["authorizationEndpoint"] = args ? args.authorizationEndpoint : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["host"] = args ? args.host : undefined;
            resourceInputs["identifier"] = args ? args.identifier : undefined;
            resourceInputs["identityProvider"] = args ? args.identityProvider : undefined;
            resourceInputs["issuer"] = args ? args.issuer : undefined;
            resourceInputs["jwksUri"] = args ? args.jwksUri : undefined;
            resourceInputs["lastUpdated"] = args ? args.lastUpdated : undefined;
            resourceInputs["providerUrl"] = args ? args.providerUrl : undefined;
            resourceInputs["redirectHostname"] = args ? args.redirectHostname : undefined;
            resourceInputs["redirectUri"] = args ? args.redirectUri : undefined;
            resourceInputs["secret"] = args ? args.secret : undefined;
            resourceInputs["tokenEndpoint"] = args ? args.tokenEndpoint : undefined;
            resourceInputs["userinfoEndpoint"] = args ? args.userinfoEndpoint : undefined;
            resourceInputs["vns3"] = args ? args.vns3 : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Vns3IdentityVpn.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Vns3IdentityVpn resources.
 */
export interface Vns3IdentityVpnState {
    /**
     * Authorization Endpoint
     */
    authorizationEndpoint?: pulumi.Input<string>;
    /**
     * Enabled
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Host
     */
    host?: pulumi.Input<string>;
    /**
     * Identifier
     */
    identifier?: pulumi.Input<string>;
    /**
     * Identity provider
     */
    identityProvider?: pulumi.Input<string>;
    /**
     * Issuer
     */
    issuer?: pulumi.Input<string>;
    /**
     * Jwks Uri
     */
    jwksUri?: pulumi.Input<string>;
    lastUpdated?: pulumi.Input<string>;
    /**
     * Provider Url
     */
    providerUrl?: pulumi.Input<string>;
    /**
     * Redirect Hostname
     */
    redirectHostname?: pulumi.Input<string>;
    /**
     * Redirect Uri
     */
    redirectUri?: pulumi.Input<string>;
    /**
     * Secret
     */
    secret?: pulumi.Input<string>;
    /**
     * Token Endpoint
     */
    tokenEndpoint?: pulumi.Input<string>;
    /**
     * Userinfo Endpoint
     */
    userinfoEndpoint?: pulumi.Input<string>;
    vns3?: pulumi.Input<inputs.Vns3IdentityVpnVns3>;
}

/**
 * The set of arguments for constructing a Vns3IdentityVpn resource.
 */
export interface Vns3IdentityVpnArgs {
    /**
     * Authorization Endpoint
     */
    authorizationEndpoint?: pulumi.Input<string>;
    /**
     * Enabled
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Host
     */
    host?: pulumi.Input<string>;
    /**
     * Identifier
     */
    identifier?: pulumi.Input<string>;
    /**
     * Identity provider
     */
    identityProvider?: pulumi.Input<string>;
    /**
     * Issuer
     */
    issuer?: pulumi.Input<string>;
    /**
     * Jwks Uri
     */
    jwksUri?: pulumi.Input<string>;
    lastUpdated?: pulumi.Input<string>;
    /**
     * Provider Url
     */
    providerUrl?: pulumi.Input<string>;
    /**
     * Redirect Hostname
     */
    redirectHostname?: pulumi.Input<string>;
    /**
     * Redirect Uri
     */
    redirectUri?: pulumi.Input<string>;
    /**
     * Secret
     */
    secret?: pulumi.Input<string>;
    /**
     * Token Endpoint
     */
    tokenEndpoint?: pulumi.Input<string>;
    /**
     * Userinfo Endpoint
     */
    userinfoEndpoint?: pulumi.Input<string>;
    vns3?: pulumi.Input<inputs.Vns3IdentityVpnVns3>;
}
