// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Vns3Link extends pulumi.CustomResource {
    /**
     * Get an existing Vns3Link resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: Vns3LinkState, opts?: pulumi.CustomResourceOptions): Vns3Link {
        return new Vns3Link(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cohesivenet:index/vns3Link:Vns3Link';

    /**
     * Returns true if the given object is an instance of Vns3Link.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Vns3Link {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Vns3Link.__pulumiType;
    }

    /**
     * Overlay IP address for link
     */
    public /*out*/ readonly clientpackIp!: pulumi.Output<string>;
    /**
     * Link conf (wireguard or openvpn)
     */
    public readonly conf!: pulumi.Output<string>;
    /**
     * Description of transit link
     */
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly lastUpdated!: pulumi.Output<string>;
    /**
     * Number for interface and link Id
     */
    public readonly linkId!: pulumi.Output<number>;
    /**
     * Name for Link
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Optional policies to place at end of conf file
     */
    public readonly policies!: pulumi.Output<string | undefined>;
    /**
     * Type of client connection
     */
    public /*out*/ readonly type!: pulumi.Output<string>;
    public readonly vns3!: pulumi.Output<outputs.Vns3LinkVns3 | undefined>;

    /**
     * Create a Vns3Link resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: Vns3LinkArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: Vns3LinkArgs | Vns3LinkState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as Vns3LinkState | undefined;
            resourceInputs["clientpackIp"] = state ? state.clientpackIp : undefined;
            resourceInputs["conf"] = state ? state.conf : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["lastUpdated"] = state ? state.lastUpdated : undefined;
            resourceInputs["linkId"] = state ? state.linkId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["policies"] = state ? state.policies : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["vns3"] = state ? state.vns3 : undefined;
        } else {
            const args = argsOrState as Vns3LinkArgs | undefined;
            if ((!args || args.conf === undefined) && !opts.urn) {
                throw new Error("Missing required property 'conf'");
            }
            if ((!args || args.linkId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'linkId'");
            }
            resourceInputs["conf"] = args ? args.conf : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["lastUpdated"] = args ? args.lastUpdated : undefined;
            resourceInputs["linkId"] = args ? args.linkId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["policies"] = args ? args.policies : undefined;
            resourceInputs["vns3"] = args ? args.vns3 : undefined;
            resourceInputs["clientpackIp"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Vns3Link.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Vns3Link resources.
 */
export interface Vns3LinkState {
    /**
     * Overlay IP address for link
     */
    clientpackIp?: pulumi.Input<string>;
    /**
     * Link conf (wireguard or openvpn)
     */
    conf?: pulumi.Input<string>;
    /**
     * Description of transit link
     */
    description?: pulumi.Input<string>;
    lastUpdated?: pulumi.Input<string>;
    /**
     * Number for interface and link Id
     */
    linkId?: pulumi.Input<number>;
    /**
     * Name for Link
     */
    name?: pulumi.Input<string>;
    /**
     * Optional policies to place at end of conf file
     */
    policies?: pulumi.Input<string>;
    /**
     * Type of client connection
     */
    type?: pulumi.Input<string>;
    vns3?: pulumi.Input<inputs.Vns3LinkVns3>;
}

/**
 * The set of arguments for constructing a Vns3Link resource.
 */
export interface Vns3LinkArgs {
    /**
     * Link conf (wireguard or openvpn)
     */
    conf: pulumi.Input<string>;
    /**
     * Description of transit link
     */
    description?: pulumi.Input<string>;
    lastUpdated?: pulumi.Input<string>;
    /**
     * Number for interface and link Id
     */
    linkId: pulumi.Input<number>;
    /**
     * Name for Link
     */
    name?: pulumi.Input<string>;
    /**
     * Optional policies to place at end of conf file
     */
    policies?: pulumi.Input<string>;
    vns3?: pulumi.Input<inputs.Vns3LinkVns3>;
}
