// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Vns3Webhook extends pulumi.CustomResource {
    /**
     * Get an existing Vns3Webhook resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: Vns3WebhookState, opts?: pulumi.CustomResourceOptions): Vns3Webhook {
        return new Vns3Webhook(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cohesivenet:index/vns3Webhook:Vns3Webhook';

    /**
     * Returns true if the given object is an instance of Vns3Webhook.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Vns3Webhook {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Vns3Webhook.__pulumiType;
    }

    /**
     * Custom integration payload
     */
    public readonly body!: pulumi.Output<string | undefined>;
    /**
     * List of custom properties
     */
    public readonly customProperties!: pulumi.Output<outputs.Vns3WebhookCustomProperty[] | undefined>;
    /**
     * List of alert events to be triggered
     */
    public readonly events!: pulumi.Output<string[] | undefined>;
    /**
     * HTTP Headers to be included in the request
     */
    public readonly headers!: pulumi.Output<outputs.Vns3WebhookHeader[] | undefined>;
    public readonly lastUpdated!: pulumi.Output<string>;
    /**
     * Name of webhook
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * HTTP Parameters to be included in the request
     */
    public readonly parameters!: pulumi.Output<outputs.Vns3WebhookParameter[] | undefined>;
    /**
     * URL of the webhook enpoint
     */
    public readonly url!: pulumi.Output<string | undefined>;
    /**
     * Validate SSL/TLS certificate
     */
    public readonly validateCert!: pulumi.Output<boolean | undefined>;
    public readonly vns3!: pulumi.Output<outputs.Vns3WebhookVns3 | undefined>;

    /**
     * Create a Vns3Webhook resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: Vns3WebhookArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: Vns3WebhookArgs | Vns3WebhookState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as Vns3WebhookState | undefined;
            resourceInputs["body"] = state ? state.body : undefined;
            resourceInputs["customProperties"] = state ? state.customProperties : undefined;
            resourceInputs["events"] = state ? state.events : undefined;
            resourceInputs["headers"] = state ? state.headers : undefined;
            resourceInputs["lastUpdated"] = state ? state.lastUpdated : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["parameters"] = state ? state.parameters : undefined;
            resourceInputs["url"] = state ? state.url : undefined;
            resourceInputs["validateCert"] = state ? state.validateCert : undefined;
            resourceInputs["vns3"] = state ? state.vns3 : undefined;
        } else {
            const args = argsOrState as Vns3WebhookArgs | undefined;
            resourceInputs["body"] = args ? args.body : undefined;
            resourceInputs["customProperties"] = args ? args.customProperties : undefined;
            resourceInputs["events"] = args ? args.events : undefined;
            resourceInputs["headers"] = args ? args.headers : undefined;
            resourceInputs["lastUpdated"] = args ? args.lastUpdated : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["parameters"] = args ? args.parameters : undefined;
            resourceInputs["url"] = args ? args.url : undefined;
            resourceInputs["validateCert"] = args ? args.validateCert : undefined;
            resourceInputs["vns3"] = args ? args.vns3 : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Vns3Webhook.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Vns3Webhook resources.
 */
export interface Vns3WebhookState {
    /**
     * Custom integration payload
     */
    body?: pulumi.Input<string>;
    /**
     * List of custom properties
     */
    customProperties?: pulumi.Input<pulumi.Input<inputs.Vns3WebhookCustomProperty>[]>;
    /**
     * List of alert events to be triggered
     */
    events?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * HTTP Headers to be included in the request
     */
    headers?: pulumi.Input<pulumi.Input<inputs.Vns3WebhookHeader>[]>;
    lastUpdated?: pulumi.Input<string>;
    /**
     * Name of webhook
     */
    name?: pulumi.Input<string>;
    /**
     * HTTP Parameters to be included in the request
     */
    parameters?: pulumi.Input<pulumi.Input<inputs.Vns3WebhookParameter>[]>;
    /**
     * URL of the webhook enpoint
     */
    url?: pulumi.Input<string>;
    /**
     * Validate SSL/TLS certificate
     */
    validateCert?: pulumi.Input<boolean>;
    vns3?: pulumi.Input<inputs.Vns3WebhookVns3>;
}

/**
 * The set of arguments for constructing a Vns3Webhook resource.
 */
export interface Vns3WebhookArgs {
    /**
     * Custom integration payload
     */
    body?: pulumi.Input<string>;
    /**
     * List of custom properties
     */
    customProperties?: pulumi.Input<pulumi.Input<inputs.Vns3WebhookCustomProperty>[]>;
    /**
     * List of alert events to be triggered
     */
    events?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * HTTP Headers to be included in the request
     */
    headers?: pulumi.Input<pulumi.Input<inputs.Vns3WebhookHeader>[]>;
    lastUpdated?: pulumi.Input<string>;
    /**
     * Name of webhook
     */
    name?: pulumi.Input<string>;
    /**
     * HTTP Parameters to be included in the request
     */
    parameters?: pulumi.Input<pulumi.Input<inputs.Vns3WebhookParameter>[]>;
    /**
     * URL of the webhook enpoint
     */
    url?: pulumi.Input<string>;
    /**
     * Validate SSL/TLS certificate
     */
    validateCert?: pulumi.Input<boolean>;
    vns3?: pulumi.Input<inputs.Vns3WebhookVns3>;
}
