// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Vns3FirewallRule extends pulumi.CustomResource {
    /**
     * Get an existing Vns3FirewallRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: Vns3FirewallRuleState, opts?: pulumi.CustomResourceOptions): Vns3FirewallRule {
        return new Vns3FirewallRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cohesivenet:index/vns3FirewallRule:Vns3FirewallRule';

    /**
     * Returns true if the given object is an instance of Vns3FirewallRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Vns3FirewallRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Vns3FirewallRule.__pulumiType;
    }

    /**
     * Firewall comment
     */
    public readonly comment!: pulumi.Output<string | undefined>;
    /**
     * Firewall rule created date
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * Whether the rule is disabled or not
     */
    public readonly disabled!: pulumi.Output<boolean | undefined>;
    /**
     * Firewall rule groups
     */
    public readonly groups!: pulumi.Output<string[] | undefined>;
    /**
     * Firewall rule date last resolved
     */
    public /*out*/ readonly lastResolved!: pulumi.Output<string>;
    public readonly lastUpdated!: pulumi.Output<string>;
    /**
     * Position of firewall rule
     */
    public readonly position!: pulumi.Output<number | undefined>;
    /**
     * Firewall rule in VNS3 syntax
     */
    public readonly rule!: pulumi.Output<string>;
    /**
     * Firewall rule resolved table in VNS3 syntax
     */
    public /*out*/ readonly ruleResolved!: pulumi.Output<string>;
    /**
     * Firewall rule table in VNS3
     */
    public /*out*/ readonly table!: pulumi.Output<string>;
    public readonly vns3!: pulumi.Output<outputs.Vns3FirewallRuleVns3 | undefined>;

    /**
     * Create a Vns3FirewallRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: Vns3FirewallRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: Vns3FirewallRuleArgs | Vns3FirewallRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as Vns3FirewallRuleState | undefined;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["disabled"] = state ? state.disabled : undefined;
            resourceInputs["groups"] = state ? state.groups : undefined;
            resourceInputs["lastResolved"] = state ? state.lastResolved : undefined;
            resourceInputs["lastUpdated"] = state ? state.lastUpdated : undefined;
            resourceInputs["position"] = state ? state.position : undefined;
            resourceInputs["rule"] = state ? state.rule : undefined;
            resourceInputs["ruleResolved"] = state ? state.ruleResolved : undefined;
            resourceInputs["table"] = state ? state.table : undefined;
            resourceInputs["vns3"] = state ? state.vns3 : undefined;
        } else {
            const args = argsOrState as Vns3FirewallRuleArgs | undefined;
            if ((!args || args.rule === undefined) && !opts.urn) {
                throw new Error("Missing required property 'rule'");
            }
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["disabled"] = args ? args.disabled : undefined;
            resourceInputs["groups"] = args ? args.groups : undefined;
            resourceInputs["lastUpdated"] = args ? args.lastUpdated : undefined;
            resourceInputs["position"] = args ? args.position : undefined;
            resourceInputs["rule"] = args ? args.rule : undefined;
            resourceInputs["vns3"] = args ? args.vns3 : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["lastResolved"] = undefined /*out*/;
            resourceInputs["ruleResolved"] = undefined /*out*/;
            resourceInputs["table"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Vns3FirewallRule.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Vns3FirewallRule resources.
 */
export interface Vns3FirewallRuleState {
    /**
     * Firewall comment
     */
    comment?: pulumi.Input<string>;
    /**
     * Firewall rule created date
     */
    createdAt?: pulumi.Input<string>;
    /**
     * Whether the rule is disabled or not
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * Firewall rule groups
     */
    groups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Firewall rule date last resolved
     */
    lastResolved?: pulumi.Input<string>;
    lastUpdated?: pulumi.Input<string>;
    /**
     * Position of firewall rule
     */
    position?: pulumi.Input<number>;
    /**
     * Firewall rule in VNS3 syntax
     */
    rule?: pulumi.Input<string>;
    /**
     * Firewall rule resolved table in VNS3 syntax
     */
    ruleResolved?: pulumi.Input<string>;
    /**
     * Firewall rule table in VNS3
     */
    table?: pulumi.Input<string>;
    vns3?: pulumi.Input<inputs.Vns3FirewallRuleVns3>;
}

/**
 * The set of arguments for constructing a Vns3FirewallRule resource.
 */
export interface Vns3FirewallRuleArgs {
    /**
     * Firewall comment
     */
    comment?: pulumi.Input<string>;
    /**
     * Whether the rule is disabled or not
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * Firewall rule groups
     */
    groups?: pulumi.Input<pulumi.Input<string>[]>;
    lastUpdated?: pulumi.Input<string>;
    /**
     * Position of firewall rule
     */
    position?: pulumi.Input<number>;
    /**
     * Firewall rule in VNS3 syntax
     */
    rule: pulumi.Input<string>;
    vns3?: pulumi.Input<inputs.Vns3FirewallRuleVns3>;
}
