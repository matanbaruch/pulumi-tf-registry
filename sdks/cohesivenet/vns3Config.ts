// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Vns3Config extends pulumi.CustomResource {
    /**
     * Get an existing Vns3Config resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: Vns3ConfigState, opts?: pulumi.CustomResourceOptions): Vns3Config {
        return new Vns3Config(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cohesivenet:index/vns3Config:Vns3Config';

    /**
     * Returns true if the given object is an instance of Vns3Config.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Vns3Config {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Vns3Config.__pulumiType;
    }

    /**
     * Configuration id
     */
    public readonly configurationId!: pulumi.Output<string>;
    /**
     * Sets VNS3 controller name
     */
    public readonly controllerName!: pulumi.Output<string | undefined>;
    /**
     * Optionally creates API token
     */
    public readonly generateToken!: pulumi.Output<boolean | undefined>;
    /**
     * instance id (used for upgrade)
     */
    public readonly instanceId!: pulumi.Output<string>;
    /**
     * Keyset checksum
     */
    public /*out*/ readonly keysetChecksum!: pulumi.Output<string>;
    public readonly keysetParams!: pulumi.Output<outputs.Vns3ConfigKeysetParams>;
    public readonly lastUpdated!: pulumi.Output<string>;
    /**
     * Path to VNS3 license file
     */
    public readonly licenseFile!: pulumi.Output<string | undefined>;
    /**
     * Nested block of configurable VNS3 license parameters
     */
    public readonly licenseParams!: pulumi.Output<outputs.Vns3ConfigLicenseParams | undefined>;
    public /*out*/ readonly licensed!: pulumi.Output<boolean>;
    /**
     * Sets user defined API password
     */
    public readonly newApiPassword!: pulumi.Output<string | undefined>;
    public /*out*/ readonly newAuthSet!: pulumi.Output<boolean>;
    /**
     * Sets user defined UI password
     */
    public readonly newUiPassword!: pulumi.Output<string | undefined>;
    /**
     * Sets user defined admin username
     */
    public readonly newUiUsername!: pulumi.Output<string | undefined>;
    /**
     * Sets VNS3 controllers peer id
     */
    public readonly peerId!: pulumi.Output<number>;
    /**
     * ip of controller
     */
    public /*out*/ readonly privateIp!: pulumi.Output<string>;
    /**
     * Token
     */
    public /*out*/ readonly token!: pulumi.Output<string>;
    /**
     * Sets API token lifetime. A value > 0 will generate token
     */
    public readonly tokenLifetime!: pulumi.Output<number | undefined>;
    /**
     * Sets API token refresh
     */
    public readonly tokenRefresh!: pulumi.Output<boolean | undefined>;
    /**
     * Checksum
     */
    public /*out*/ readonly topologyChecksum!: pulumi.Output<string>;
    /**
     * Sets VNS3 topolgy name
     */
    public readonly topologyName!: pulumi.Output<string>;
    public readonly vns3!: pulumi.Output<outputs.Vns3ConfigVns3 | undefined>;

    /**
     * Create a Vns3Config resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: Vns3ConfigArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: Vns3ConfigArgs | Vns3ConfigState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as Vns3ConfigState | undefined;
            resourceInputs["configurationId"] = state ? state.configurationId : undefined;
            resourceInputs["controllerName"] = state ? state.controllerName : undefined;
            resourceInputs["generateToken"] = state ? state.generateToken : undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["keysetChecksum"] = state ? state.keysetChecksum : undefined;
            resourceInputs["keysetParams"] = state ? state.keysetParams : undefined;
            resourceInputs["lastUpdated"] = state ? state.lastUpdated : undefined;
            resourceInputs["licenseFile"] = state ? state.licenseFile : undefined;
            resourceInputs["licenseParams"] = state ? state.licenseParams : undefined;
            resourceInputs["licensed"] = state ? state.licensed : undefined;
            resourceInputs["newApiPassword"] = state ? state.newApiPassword : undefined;
            resourceInputs["newAuthSet"] = state ? state.newAuthSet : undefined;
            resourceInputs["newUiPassword"] = state ? state.newUiPassword : undefined;
            resourceInputs["newUiUsername"] = state ? state.newUiUsername : undefined;
            resourceInputs["peerId"] = state ? state.peerId : undefined;
            resourceInputs["privateIp"] = state ? state.privateIp : undefined;
            resourceInputs["token"] = state ? state.token : undefined;
            resourceInputs["tokenLifetime"] = state ? state.tokenLifetime : undefined;
            resourceInputs["tokenRefresh"] = state ? state.tokenRefresh : undefined;
            resourceInputs["topologyChecksum"] = state ? state.topologyChecksum : undefined;
            resourceInputs["topologyName"] = state ? state.topologyName : undefined;
            resourceInputs["vns3"] = state ? state.vns3 : undefined;
        } else {
            const args = argsOrState as Vns3ConfigArgs | undefined;
            if ((!args || args.configurationId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'configurationId'");
            }
            if ((!args || args.instanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            if ((!args || args.keysetParams === undefined) && !opts.urn) {
                throw new Error("Missing required property 'keysetParams'");
            }
            if ((!args || args.peerId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'peerId'");
            }
            if ((!args || args.topologyName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'topologyName'");
            }
            resourceInputs["configurationId"] = args ? args.configurationId : undefined;
            resourceInputs["controllerName"] = args ? args.controllerName : undefined;
            resourceInputs["generateToken"] = args ? args.generateToken : undefined;
            resourceInputs["instanceId"] = args ? args.instanceId : undefined;
            resourceInputs["keysetParams"] = args ? args.keysetParams : undefined;
            resourceInputs["lastUpdated"] = args ? args.lastUpdated : undefined;
            resourceInputs["licenseFile"] = args ? args.licenseFile : undefined;
            resourceInputs["licenseParams"] = args ? args.licenseParams : undefined;
            resourceInputs["newApiPassword"] = args?.newApiPassword ? pulumi.secret(args.newApiPassword) : undefined;
            resourceInputs["newUiPassword"] = args?.newUiPassword ? pulumi.secret(args.newUiPassword) : undefined;
            resourceInputs["newUiUsername"] = args ? args.newUiUsername : undefined;
            resourceInputs["peerId"] = args ? args.peerId : undefined;
            resourceInputs["tokenLifetime"] = args ? args.tokenLifetime : undefined;
            resourceInputs["tokenRefresh"] = args ? args.tokenRefresh : undefined;
            resourceInputs["topologyName"] = args ? args.topologyName : undefined;
            resourceInputs["vns3"] = args ? args.vns3 : undefined;
            resourceInputs["keysetChecksum"] = undefined /*out*/;
            resourceInputs["licensed"] = undefined /*out*/;
            resourceInputs["newAuthSet"] = undefined /*out*/;
            resourceInputs["privateIp"] = undefined /*out*/;
            resourceInputs["token"] = undefined /*out*/;
            resourceInputs["topologyChecksum"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["newApiPassword", "newUiPassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Vns3Config.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Vns3Config resources.
 */
export interface Vns3ConfigState {
    /**
     * Configuration id
     */
    configurationId?: pulumi.Input<string>;
    /**
     * Sets VNS3 controller name
     */
    controllerName?: pulumi.Input<string>;
    /**
     * Optionally creates API token
     */
    generateToken?: pulumi.Input<boolean>;
    /**
     * instance id (used for upgrade)
     */
    instanceId?: pulumi.Input<string>;
    /**
     * Keyset checksum
     */
    keysetChecksum?: pulumi.Input<string>;
    keysetParams?: pulumi.Input<inputs.Vns3ConfigKeysetParams>;
    lastUpdated?: pulumi.Input<string>;
    /**
     * Path to VNS3 license file
     */
    licenseFile?: pulumi.Input<string>;
    /**
     * Nested block of configurable VNS3 license parameters
     */
    licenseParams?: pulumi.Input<inputs.Vns3ConfigLicenseParams>;
    licensed?: pulumi.Input<boolean>;
    /**
     * Sets user defined API password
     */
    newApiPassword?: pulumi.Input<string>;
    newAuthSet?: pulumi.Input<boolean>;
    /**
     * Sets user defined UI password
     */
    newUiPassword?: pulumi.Input<string>;
    /**
     * Sets user defined admin username
     */
    newUiUsername?: pulumi.Input<string>;
    /**
     * Sets VNS3 controllers peer id
     */
    peerId?: pulumi.Input<number>;
    /**
     * ip of controller
     */
    privateIp?: pulumi.Input<string>;
    /**
     * Token
     */
    token?: pulumi.Input<string>;
    /**
     * Sets API token lifetime. A value > 0 will generate token
     */
    tokenLifetime?: pulumi.Input<number>;
    /**
     * Sets API token refresh
     */
    tokenRefresh?: pulumi.Input<boolean>;
    /**
     * Checksum
     */
    topologyChecksum?: pulumi.Input<string>;
    /**
     * Sets VNS3 topolgy name
     */
    topologyName?: pulumi.Input<string>;
    vns3?: pulumi.Input<inputs.Vns3ConfigVns3>;
}

/**
 * The set of arguments for constructing a Vns3Config resource.
 */
export interface Vns3ConfigArgs {
    /**
     * Configuration id
     */
    configurationId: pulumi.Input<string>;
    /**
     * Sets VNS3 controller name
     */
    controllerName?: pulumi.Input<string>;
    /**
     * Optionally creates API token
     */
    generateToken?: pulumi.Input<boolean>;
    /**
     * instance id (used for upgrade)
     */
    instanceId: pulumi.Input<string>;
    keysetParams: pulumi.Input<inputs.Vns3ConfigKeysetParams>;
    lastUpdated?: pulumi.Input<string>;
    /**
     * Path to VNS3 license file
     */
    licenseFile?: pulumi.Input<string>;
    /**
     * Nested block of configurable VNS3 license parameters
     */
    licenseParams?: pulumi.Input<inputs.Vns3ConfigLicenseParams>;
    /**
     * Sets user defined API password
     */
    newApiPassword?: pulumi.Input<string>;
    /**
     * Sets user defined UI password
     */
    newUiPassword?: pulumi.Input<string>;
    /**
     * Sets user defined admin username
     */
    newUiUsername?: pulumi.Input<string>;
    /**
     * Sets VNS3 controllers peer id
     */
    peerId: pulumi.Input<number>;
    /**
     * Sets API token lifetime. A value > 0 will generate token
     */
    tokenLifetime?: pulumi.Input<number>;
    /**
     * Sets API token refresh
     */
    tokenRefresh?: pulumi.Input<boolean>;
    /**
     * Sets VNS3 topolgy name
     */
    topologyName: pulumi.Input<string>;
    vns3?: pulumi.Input<inputs.Vns3ConfigVns3>;
}
