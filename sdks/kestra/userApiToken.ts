// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class UserApiToken extends pulumi.CustomResource {
    /**
     * Get an existing UserApiToken resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UserApiTokenState, opts?: pulumi.CustomResourceOptions): UserApiToken {
        return new UserApiToken(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'kestra:index/userApiToken:UserApiToken';

    /**
     * Returns true if the given object is an instance of UserApiToken.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is UserApiToken {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === UserApiToken.__pulumiType;
    }

    /**
     * The API token description.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * Specify whether the expiry date is automatically moved forward by max age whenever the token is used. Defaults to
     * `false`.
     */
    public readonly extended!: pulumi.Output<boolean | undefined>;
    /**
     * The full API token.
     */
    public /*out*/ readonly fullToken!: pulumi.Output<string>;
    /**
     * The time the token remains valid since creation (ISO 8601 duration format).
     */
    public readonly maxAge!: pulumi.Output<string>;
    /**
     * The API token display name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The ID of the user owning the API Token.
     */
    public readonly userId!: pulumi.Output<string>;

    /**
     * Create a UserApiToken resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UserApiTokenArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UserApiTokenArgs | UserApiTokenState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UserApiTokenState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["extended"] = state ? state.extended : undefined;
            resourceInputs["fullToken"] = state ? state.fullToken : undefined;
            resourceInputs["maxAge"] = state ? state.maxAge : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["userId"] = state ? state.userId : undefined;
        } else {
            const args = argsOrState as UserApiTokenArgs | undefined;
            if ((!args || args.description === undefined) && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if ((!args || args.maxAge === undefined) && !opts.urn) {
                throw new Error("Missing required property 'maxAge'");
            }
            if ((!args || args.userId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userId'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["extended"] = args ? args.extended : undefined;
            resourceInputs["maxAge"] = args ? args.maxAge : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["userId"] = args ? args.userId : undefined;
            resourceInputs["fullToken"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["fullToken"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(UserApiToken.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering UserApiToken resources.
 */
export interface UserApiTokenState {
    /**
     * The API token description.
     */
    description?: pulumi.Input<string>;
    /**
     * Specify whether the expiry date is automatically moved forward by max age whenever the token is used. Defaults to
     * `false`.
     */
    extended?: pulumi.Input<boolean>;
    /**
     * The full API token.
     */
    fullToken?: pulumi.Input<string>;
    /**
     * The time the token remains valid since creation (ISO 8601 duration format).
     */
    maxAge?: pulumi.Input<string>;
    /**
     * The API token display name.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the user owning the API Token.
     */
    userId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a UserApiToken resource.
 */
export interface UserApiTokenArgs {
    /**
     * The API token description.
     */
    description: pulumi.Input<string>;
    /**
     * Specify whether the expiry date is automatically moved forward by max age whenever the token is used. Defaults to
     * `false`.
     */
    extended?: pulumi.Input<boolean>;
    /**
     * The time the token remains valid since creation (ISO 8601 duration format).
     */
    maxAge: pulumi.Input<string>;
    /**
     * The API token display name.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the user owning the API Token.
     */
    userId: pulumi.Input<string>;
}
