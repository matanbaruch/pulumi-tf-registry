// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class NamespaceFile extends pulumi.CustomResource {
    /**
     * Get an existing NamespaceFile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NamespaceFileState, opts?: pulumi.CustomResourceOptions): NamespaceFile {
        return new NamespaceFile(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'kestra:index/namespaceFile:NamespaceFile';

    /**
     * Returns true if the given object is an instance of NamespaceFile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NamespaceFile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NamespaceFile.__pulumiType;
    }

    /**
     * Content to store in the file, expected to be a UTF-8 encoded string.
     */
    public readonly content!: pulumi.Output<string | undefined>;
    /**
     * The path to the namespace file that will be created. Missing parent directories will be created. If the file already
     * exists, it will be overridden with the given content.
     */
    public readonly filename!: pulumi.Output<string>;
    /**
     * The namespace of the namespace file resource.
     */
    public readonly namespace!: pulumi.Output<string>;
    /**
     * The tenant id.
     */
    public /*out*/ readonly tenantId!: pulumi.Output<string>;

    /**
     * Create a NamespaceFile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NamespaceFileArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NamespaceFileArgs | NamespaceFileState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NamespaceFileState | undefined;
            resourceInputs["content"] = state ? state.content : undefined;
            resourceInputs["filename"] = state ? state.filename : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["tenantId"] = state ? state.tenantId : undefined;
        } else {
            const args = argsOrState as NamespaceFileArgs | undefined;
            if ((!args || args.filename === undefined) && !opts.urn) {
                throw new Error("Missing required property 'filename'");
            }
            if ((!args || args.namespace === undefined) && !opts.urn) {
                throw new Error("Missing required property 'namespace'");
            }
            resourceInputs["content"] = args ? args.content : undefined;
            resourceInputs["filename"] = args ? args.filename : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["tenantId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NamespaceFile.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering NamespaceFile resources.
 */
export interface NamespaceFileState {
    /**
     * Content to store in the file, expected to be a UTF-8 encoded string.
     */
    content?: pulumi.Input<string>;
    /**
     * The path to the namespace file that will be created. Missing parent directories will be created. If the file already
     * exists, it will be overridden with the given content.
     */
    filename?: pulumi.Input<string>;
    /**
     * The namespace of the namespace file resource.
     */
    namespace?: pulumi.Input<string>;
    /**
     * The tenant id.
     */
    tenantId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NamespaceFile resource.
 */
export interface NamespaceFileArgs {
    /**
     * Content to store in the file, expected to be a UTF-8 encoded string.
     */
    content?: pulumi.Input<string>;
    /**
     * The path to the namespace file that will be created. Missing parent directories will be created. If the file already
     * exists, it will be overridden with the given content.
     */
    filename: pulumi.Input<string>;
    /**
     * The namespace of the namespace file resource.
     */
    namespace: pulumi.Input<string>;
}
