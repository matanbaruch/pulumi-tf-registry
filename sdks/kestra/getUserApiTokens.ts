// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getUserApiTokens(args: GetUserApiTokensArgs, opts?: pulumi.InvokeOptions): Promise<GetUserApiTokensResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("kestra:index/getUserApiTokens:getUserApiTokens", {
        "id": args.id,
        "userId": args.userId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getUserApiTokens.
 */
export interface GetUserApiTokensArgs {
    id?: string;
    userId: string;
}

/**
 * A collection of values returned by getUserApiTokens.
 */
export interface GetUserApiTokensResult {
    readonly apiTokens: outputs.GetUserApiTokensApiToken[];
    readonly id: string;
    readonly userId: string;
}
export function getUserApiTokensOutput(args: GetUserApiTokensOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetUserApiTokensResult> {
    return pulumi.output(args).apply((a: any) => getUserApiTokens(a, opts))
}

/**
 * A collection of arguments for invoking getUserApiTokens.
 */
export interface GetUserApiTokensOutputArgs {
    id?: pulumi.Input<string>;
    userId: pulumi.Input<string>;
}
