// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { BindingArgs, BindingState } from "./binding";
export type Binding = import("./binding").Binding;
export const Binding: typeof import("./binding").Binding = null as any;
utilities.lazyLoad(exports, ["Binding"], () => require("./binding"));

export { FlowArgs, FlowState } from "./flow";
export type Flow = import("./flow").Flow;
export const Flow: typeof import("./flow").Flow = null as any;
utilities.lazyLoad(exports, ["Flow"], () => require("./flow"));

export { GetBindingArgs, GetBindingResult, GetBindingOutputArgs } from "./getBinding";
export const getBinding: typeof import("./getBinding").getBinding = null as any;
export const getBindingOutput: typeof import("./getBinding").getBindingOutput = null as any;
utilities.lazyLoad(exports, ["getBinding","getBindingOutput"], () => require("./getBinding"));

export { GetFlowArgs, GetFlowResult, GetFlowOutputArgs } from "./getFlow";
export const getFlow: typeof import("./getFlow").getFlow = null as any;
export const getFlowOutput: typeof import("./getFlow").getFlowOutput = null as any;
utilities.lazyLoad(exports, ["getFlow","getFlowOutput"], () => require("./getFlow"));

export { GetGroupArgs, GetGroupResult, GetGroupOutputArgs } from "./getGroup";
export const getGroup: typeof import("./getGroup").getGroup = null as any;
export const getGroupOutput: typeof import("./getGroup").getGroupOutput = null as any;
utilities.lazyLoad(exports, ["getGroup","getGroupOutput"], () => require("./getGroup"));

export { GetKvArgs, GetKvResult, GetKvOutputArgs } from "./getKv";
export const getKv: typeof import("./getKv").getKv = null as any;
export const getKvOutput: typeof import("./getKv").getKvOutput = null as any;
utilities.lazyLoad(exports, ["getKv","getKvOutput"], () => require("./getKv"));

export { GetNamespaceArgs, GetNamespaceResult, GetNamespaceOutputArgs } from "./getNamespace";
export const getNamespace: typeof import("./getNamespace").getNamespace = null as any;
export const getNamespaceOutput: typeof import("./getNamespace").getNamespaceOutput = null as any;
utilities.lazyLoad(exports, ["getNamespace","getNamespaceOutput"], () => require("./getNamespace"));

export { GetNamespaceFileArgs, GetNamespaceFileResult, GetNamespaceFileOutputArgs } from "./getNamespaceFile";
export const getNamespaceFile: typeof import("./getNamespaceFile").getNamespaceFile = null as any;
export const getNamespaceFileOutput: typeof import("./getNamespaceFile").getNamespaceFileOutput = null as any;
utilities.lazyLoad(exports, ["getNamespaceFile","getNamespaceFileOutput"], () => require("./getNamespaceFile"));

export { GetRoleArgs, GetRoleResult, GetRoleOutputArgs } from "./getRole";
export const getRole: typeof import("./getRole").getRole = null as any;
export const getRoleOutput: typeof import("./getRole").getRoleOutput = null as any;
utilities.lazyLoad(exports, ["getRole","getRoleOutput"], () => require("./getRole"));

export { GetServiceAccountArgs, GetServiceAccountResult, GetServiceAccountOutputArgs } from "./getServiceAccount";
export const getServiceAccount: typeof import("./getServiceAccount").getServiceAccount = null as any;
export const getServiceAccountOutput: typeof import("./getServiceAccount").getServiceAccountOutput = null as any;
utilities.lazyLoad(exports, ["getServiceAccount","getServiceAccountOutput"], () => require("./getServiceAccount"));

export { GetTemplateArgs, GetTemplateResult, GetTemplateOutputArgs } from "./getTemplate";
export const getTemplate: typeof import("./getTemplate").getTemplate = null as any;
export const getTemplateOutput: typeof import("./getTemplate").getTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getTemplate","getTemplateOutput"], () => require("./getTemplate"));

export { GetTenantArgs, GetTenantResult, GetTenantOutputArgs } from "./getTenant";
export const getTenant: typeof import("./getTenant").getTenant = null as any;
export const getTenantOutput: typeof import("./getTenant").getTenantOutput = null as any;
utilities.lazyLoad(exports, ["getTenant","getTenantOutput"], () => require("./getTenant"));

export { GetUserArgs, GetUserResult, GetUserOutputArgs } from "./getUser";
export const getUser: typeof import("./getUser").getUser = null as any;
export const getUserOutput: typeof import("./getUser").getUserOutput = null as any;
utilities.lazyLoad(exports, ["getUser","getUserOutput"], () => require("./getUser"));

export { GetUserApiTokensArgs, GetUserApiTokensResult, GetUserApiTokensOutputArgs } from "./getUserApiTokens";
export const getUserApiTokens: typeof import("./getUserApiTokens").getUserApiTokens = null as any;
export const getUserApiTokensOutput: typeof import("./getUserApiTokens").getUserApiTokensOutput = null as any;
utilities.lazyLoad(exports, ["getUserApiTokens","getUserApiTokensOutput"], () => require("./getUserApiTokens"));

export { GroupArgs, GroupState } from "./group";
export type Group = import("./group").Group;
export const Group: typeof import("./group").Group = null as any;
utilities.lazyLoad(exports, ["Group"], () => require("./group"));

export { KvArgs, KvState } from "./kv";
export type Kv = import("./kv").Kv;
export const Kv: typeof import("./kv").Kv = null as any;
utilities.lazyLoad(exports, ["Kv"], () => require("./kv"));

export { NamespaceArgs, NamespaceState } from "./namespace";
export type Namespace = import("./namespace").Namespace;
export const Namespace: typeof import("./namespace").Namespace = null as any;
utilities.lazyLoad(exports, ["Namespace"], () => require("./namespace"));

export { NamespaceFileArgs, NamespaceFileState } from "./namespaceFile";
export type NamespaceFile = import("./namespaceFile").NamespaceFile;
export const NamespaceFile: typeof import("./namespaceFile").NamespaceFile = null as any;
utilities.lazyLoad(exports, ["NamespaceFile"], () => require("./namespaceFile"));

export { NamespaceSecretArgs, NamespaceSecretState } from "./namespaceSecret";
export type NamespaceSecret = import("./namespaceSecret").NamespaceSecret;
export const NamespaceSecret: typeof import("./namespaceSecret").NamespaceSecret = null as any;
utilities.lazyLoad(exports, ["NamespaceSecret"], () => require("./namespaceSecret"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { RoleArgs, RoleState } from "./role";
export type Role = import("./role").Role;
export const Role: typeof import("./role").Role = null as any;
utilities.lazyLoad(exports, ["Role"], () => require("./role"));

export { ServiceAccountArgs, ServiceAccountState } from "./serviceAccount";
export type ServiceAccount = import("./serviceAccount").ServiceAccount;
export const ServiceAccount: typeof import("./serviceAccount").ServiceAccount = null as any;
utilities.lazyLoad(exports, ["ServiceAccount"], () => require("./serviceAccount"));

export { TemplateArgs, TemplateState } from "./template";
export type Template = import("./template").Template;
export const Template: typeof import("./template").Template = null as any;
utilities.lazyLoad(exports, ["Template"], () => require("./template"));

export { TenantArgs, TenantState } from "./tenant";
export type Tenant = import("./tenant").Tenant;
export const Tenant: typeof import("./tenant").Tenant = null as any;
utilities.lazyLoad(exports, ["Tenant"], () => require("./tenant"));

export { UserArgs, UserState } from "./user";
export type User = import("./user").User;
export const User: typeof import("./user").User = null as any;
utilities.lazyLoad(exports, ["User"], () => require("./user"));

export { UserApiTokenArgs, UserApiTokenState } from "./userApiToken";
export type UserApiToken = import("./userApiToken").UserApiToken;
export const UserApiToken: typeof import("./userApiToken").UserApiToken = null as any;
utilities.lazyLoad(exports, ["UserApiToken"], () => require("./userApiToken"));

export { UserPasswordArgs, UserPasswordState } from "./userPassword";
export type UserPassword = import("./userPassword").UserPassword;
export const UserPassword: typeof import("./userPassword").UserPassword = null as any;
utilities.lazyLoad(exports, ["UserPassword"], () => require("./userPassword"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "kestra:index/binding:Binding":
                return new Binding(name, <any>undefined, { urn })
            case "kestra:index/flow:Flow":
                return new Flow(name, <any>undefined, { urn })
            case "kestra:index/group:Group":
                return new Group(name, <any>undefined, { urn })
            case "kestra:index/kv:Kv":
                return new Kv(name, <any>undefined, { urn })
            case "kestra:index/namespace:Namespace":
                return new Namespace(name, <any>undefined, { urn })
            case "kestra:index/namespaceFile:NamespaceFile":
                return new NamespaceFile(name, <any>undefined, { urn })
            case "kestra:index/namespaceSecret:NamespaceSecret":
                return new NamespaceSecret(name, <any>undefined, { urn })
            case "kestra:index/role:Role":
                return new Role(name, <any>undefined, { urn })
            case "kestra:index/serviceAccount:ServiceAccount":
                return new ServiceAccount(name, <any>undefined, { urn })
            case "kestra:index/template:Template":
                return new Template(name, <any>undefined, { urn })
            case "kestra:index/tenant:Tenant":
                return new Tenant(name, <any>undefined, { urn })
            case "kestra:index/user:User":
                return new User(name, <any>undefined, { urn })
            case "kestra:index/userApiToken:UserApiToken":
                return new UserApiToken(name, <any>undefined, { urn })
            case "kestra:index/userPassword:UserPassword":
                return new UserPassword(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("kestra", "index/binding", _module)
pulumi.runtime.registerResourceModule("kestra", "index/flow", _module)
pulumi.runtime.registerResourceModule("kestra", "index/group", _module)
pulumi.runtime.registerResourceModule("kestra", "index/kv", _module)
pulumi.runtime.registerResourceModule("kestra", "index/namespace", _module)
pulumi.runtime.registerResourceModule("kestra", "index/namespaceFile", _module)
pulumi.runtime.registerResourceModule("kestra", "index/namespaceSecret", _module)
pulumi.runtime.registerResourceModule("kestra", "index/role", _module)
pulumi.runtime.registerResourceModule("kestra", "index/serviceAccount", _module)
pulumi.runtime.registerResourceModule("kestra", "index/template", _module)
pulumi.runtime.registerResourceModule("kestra", "index/tenant", _module)
pulumi.runtime.registerResourceModule("kestra", "index/user", _module)
pulumi.runtime.registerResourceModule("kestra", "index/userApiToken", _module)
pulumi.runtime.registerResourceModule("kestra", "index/userPassword", _module)
pulumi.runtime.registerResourcePackage("kestra", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:kestra") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
