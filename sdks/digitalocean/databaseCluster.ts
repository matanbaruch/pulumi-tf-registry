// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DatabaseCluster extends pulumi.CustomResource {
    /**
     * Get an existing DatabaseCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DatabaseClusterState, opts?: pulumi.CustomResourceOptions): DatabaseCluster {
        return new DatabaseCluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'digitalocean:index/databaseCluster:DatabaseCluster';

    /**
     * Returns true if the given object is an instance of DatabaseCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DatabaseCluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DatabaseCluster.__pulumiType;
    }

    public readonly backupRestore!: pulumi.Output<outputs.DatabaseClusterBackupRestore | undefined>;
    public /*out*/ readonly database!: pulumi.Output<string>;
    public /*out*/ readonly digitaloceanUrn!: pulumi.Output<string>;
    public readonly engine!: pulumi.Output<string>;
    public readonly evictionPolicy!: pulumi.Output<string | undefined>;
    public /*out*/ readonly host!: pulumi.Output<string>;
    public readonly maintenanceWindows!: pulumi.Output<outputs.DatabaseClusterMaintenanceWindow[] | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly nodeCount!: pulumi.Output<number>;
    public /*out*/ readonly password!: pulumi.Output<string>;
    public /*out*/ readonly port!: pulumi.Output<number>;
    public /*out*/ readonly privateHost!: pulumi.Output<string>;
    public readonly privateNetworkUuid!: pulumi.Output<string>;
    public /*out*/ readonly privateUri!: pulumi.Output<string>;
    public readonly projectId!: pulumi.Output<string>;
    public readonly region!: pulumi.Output<string>;
    public readonly size!: pulumi.Output<string>;
    public readonly sqlMode!: pulumi.Output<string | undefined>;
    public readonly storageSizeMib!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<string[] | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.DatabaseClusterTimeouts | undefined>;
    public /*out*/ readonly uiDatabase!: pulumi.Output<string>;
    public /*out*/ readonly uiHost!: pulumi.Output<string>;
    public /*out*/ readonly uiPassword!: pulumi.Output<string>;
    public /*out*/ readonly uiPort!: pulumi.Output<number>;
    public /*out*/ readonly uiUri!: pulumi.Output<string>;
    public /*out*/ readonly uiUser!: pulumi.Output<string>;
    public /*out*/ readonly uri!: pulumi.Output<string>;
    public /*out*/ readonly user!: pulumi.Output<string>;
    public readonly version!: pulumi.Output<string | undefined>;

    /**
     * Create a DatabaseCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatabaseClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DatabaseClusterArgs | DatabaseClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DatabaseClusterState | undefined;
            resourceInputs["backupRestore"] = state ? state.backupRestore : undefined;
            resourceInputs["database"] = state ? state.database : undefined;
            resourceInputs["digitaloceanUrn"] = state ? state.digitaloceanUrn : undefined;
            resourceInputs["engine"] = state ? state.engine : undefined;
            resourceInputs["evictionPolicy"] = state ? state.evictionPolicy : undefined;
            resourceInputs["host"] = state ? state.host : undefined;
            resourceInputs["maintenanceWindows"] = state ? state.maintenanceWindows : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nodeCount"] = state ? state.nodeCount : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["privateHost"] = state ? state.privateHost : undefined;
            resourceInputs["privateNetworkUuid"] = state ? state.privateNetworkUuid : undefined;
            resourceInputs["privateUri"] = state ? state.privateUri : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["size"] = state ? state.size : undefined;
            resourceInputs["sqlMode"] = state ? state.sqlMode : undefined;
            resourceInputs["storageSizeMib"] = state ? state.storageSizeMib : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["uiDatabase"] = state ? state.uiDatabase : undefined;
            resourceInputs["uiHost"] = state ? state.uiHost : undefined;
            resourceInputs["uiPassword"] = state ? state.uiPassword : undefined;
            resourceInputs["uiPort"] = state ? state.uiPort : undefined;
            resourceInputs["uiUri"] = state ? state.uiUri : undefined;
            resourceInputs["uiUser"] = state ? state.uiUser : undefined;
            resourceInputs["uri"] = state ? state.uri : undefined;
            resourceInputs["user"] = state ? state.user : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as DatabaseClusterArgs | undefined;
            if ((!args || args.engine === undefined) && !opts.urn) {
                throw new Error("Missing required property 'engine'");
            }
            if ((!args || args.nodeCount === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nodeCount'");
            }
            if ((!args || args.region === undefined) && !opts.urn) {
                throw new Error("Missing required property 'region'");
            }
            if ((!args || args.size === undefined) && !opts.urn) {
                throw new Error("Missing required property 'size'");
            }
            resourceInputs["backupRestore"] = args ? args.backupRestore : undefined;
            resourceInputs["engine"] = args ? args.engine : undefined;
            resourceInputs["evictionPolicy"] = args ? args.evictionPolicy : undefined;
            resourceInputs["maintenanceWindows"] = args ? args.maintenanceWindows : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nodeCount"] = args ? args.nodeCount : undefined;
            resourceInputs["privateNetworkUuid"] = args ? args.privateNetworkUuid : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["size"] = args ? args.size : undefined;
            resourceInputs["sqlMode"] = args ? args.sqlMode : undefined;
            resourceInputs["storageSizeMib"] = args ? args.storageSizeMib : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
            resourceInputs["database"] = undefined /*out*/;
            resourceInputs["digitaloceanUrn"] = undefined /*out*/;
            resourceInputs["host"] = undefined /*out*/;
            resourceInputs["password"] = undefined /*out*/;
            resourceInputs["port"] = undefined /*out*/;
            resourceInputs["privateHost"] = undefined /*out*/;
            resourceInputs["privateUri"] = undefined /*out*/;
            resourceInputs["uiDatabase"] = undefined /*out*/;
            resourceInputs["uiHost"] = undefined /*out*/;
            resourceInputs["uiPassword"] = undefined /*out*/;
            resourceInputs["uiPort"] = undefined /*out*/;
            resourceInputs["uiUri"] = undefined /*out*/;
            resourceInputs["uiUser"] = undefined /*out*/;
            resourceInputs["uri"] = undefined /*out*/;
            resourceInputs["user"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password", "privateUri", "uiPassword", "uiUri", "uri"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(DatabaseCluster.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DatabaseCluster resources.
 */
export interface DatabaseClusterState {
    backupRestore?: pulumi.Input<inputs.DatabaseClusterBackupRestore>;
    database?: pulumi.Input<string>;
    digitaloceanUrn?: pulumi.Input<string>;
    engine?: pulumi.Input<string>;
    evictionPolicy?: pulumi.Input<string>;
    host?: pulumi.Input<string>;
    maintenanceWindows?: pulumi.Input<pulumi.Input<inputs.DatabaseClusterMaintenanceWindow>[]>;
    name?: pulumi.Input<string>;
    nodeCount?: pulumi.Input<number>;
    password?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    privateHost?: pulumi.Input<string>;
    privateNetworkUuid?: pulumi.Input<string>;
    privateUri?: pulumi.Input<string>;
    projectId?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    size?: pulumi.Input<string>;
    sqlMode?: pulumi.Input<string>;
    storageSizeMib?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.DatabaseClusterTimeouts>;
    uiDatabase?: pulumi.Input<string>;
    uiHost?: pulumi.Input<string>;
    uiPassword?: pulumi.Input<string>;
    uiPort?: pulumi.Input<number>;
    uiUri?: pulumi.Input<string>;
    uiUser?: pulumi.Input<string>;
    uri?: pulumi.Input<string>;
    user?: pulumi.Input<string>;
    version?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DatabaseCluster resource.
 */
export interface DatabaseClusterArgs {
    backupRestore?: pulumi.Input<inputs.DatabaseClusterBackupRestore>;
    engine: pulumi.Input<string>;
    evictionPolicy?: pulumi.Input<string>;
    maintenanceWindows?: pulumi.Input<pulumi.Input<inputs.DatabaseClusterMaintenanceWindow>[]>;
    name?: pulumi.Input<string>;
    nodeCount: pulumi.Input<number>;
    privateNetworkUuid?: pulumi.Input<string>;
    projectId?: pulumi.Input<string>;
    region: pulumi.Input<string>;
    size: pulumi.Input<string>;
    sqlMode?: pulumi.Input<string>;
    storageSizeMib?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.DatabaseClusterTimeouts>;
    version?: pulumi.Input<string>;
}
