// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SpacesBucket extends pulumi.CustomResource {
    /**
     * Get an existing SpacesBucket resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SpacesBucketState, opts?: pulumi.CustomResourceOptions): SpacesBucket {
        return new SpacesBucket(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'digitalocean:index/spacesBucket:SpacesBucket';

    /**
     * Returns true if the given object is an instance of SpacesBucket.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SpacesBucket {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SpacesBucket.__pulumiType;
    }

    /**
     * Canned ACL applied on bucket creation
     */
    public readonly acl!: pulumi.Output<string | undefined>;
    /**
     * The FQDN of the bucket
     */
    public /*out*/ readonly bucketDomainName!: pulumi.Output<string>;
    /**
     * A container holding a list of elements describing allowed methods for a specific origin.
     *
     * @deprecated Deprecated
     */
    public readonly corsRules!: pulumi.Output<outputs.SpacesBucketCorsRule[] | undefined>;
    /**
     * the uniform resource name for the bucket
     */
    public /*out*/ readonly digitaloceanUrn!: pulumi.Output<string>;
    /**
     * The FQDN of the bucket without the bucket name
     */
    public /*out*/ readonly endpoint!: pulumi.Output<string>;
    /**
     * Unless true, the bucket will only be destroyed if empty
     */
    public readonly forceDestroy!: pulumi.Output<boolean | undefined>;
    public readonly lifecycleRules!: pulumi.Output<outputs.SpacesBucketLifecycleRule[] | undefined>;
    /**
     * Bucket name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Bucket region
     */
    public readonly region!: pulumi.Output<string | undefined>;
    public readonly versioning!: pulumi.Output<outputs.SpacesBucketVersioning | undefined>;

    /**
     * Create a SpacesBucket resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SpacesBucketArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SpacesBucketArgs | SpacesBucketState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SpacesBucketState | undefined;
            resourceInputs["acl"] = state ? state.acl : undefined;
            resourceInputs["bucketDomainName"] = state ? state.bucketDomainName : undefined;
            resourceInputs["corsRules"] = state ? state.corsRules : undefined;
            resourceInputs["digitaloceanUrn"] = state ? state.digitaloceanUrn : undefined;
            resourceInputs["endpoint"] = state ? state.endpoint : undefined;
            resourceInputs["forceDestroy"] = state ? state.forceDestroy : undefined;
            resourceInputs["lifecycleRules"] = state ? state.lifecycleRules : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["versioning"] = state ? state.versioning : undefined;
        } else {
            const args = argsOrState as SpacesBucketArgs | undefined;
            resourceInputs["acl"] = args ? args.acl : undefined;
            resourceInputs["corsRules"] = args ? args.corsRules : undefined;
            resourceInputs["forceDestroy"] = args ? args.forceDestroy : undefined;
            resourceInputs["lifecycleRules"] = args ? args.lifecycleRules : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["versioning"] = args ? args.versioning : undefined;
            resourceInputs["bucketDomainName"] = undefined /*out*/;
            resourceInputs["digitaloceanUrn"] = undefined /*out*/;
            resourceInputs["endpoint"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SpacesBucket.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SpacesBucket resources.
 */
export interface SpacesBucketState {
    /**
     * Canned ACL applied on bucket creation
     */
    acl?: pulumi.Input<string>;
    /**
     * The FQDN of the bucket
     */
    bucketDomainName?: pulumi.Input<string>;
    /**
     * A container holding a list of elements describing allowed methods for a specific origin.
     *
     * @deprecated Deprecated
     */
    corsRules?: pulumi.Input<pulumi.Input<inputs.SpacesBucketCorsRule>[]>;
    /**
     * the uniform resource name for the bucket
     */
    digitaloceanUrn?: pulumi.Input<string>;
    /**
     * The FQDN of the bucket without the bucket name
     */
    endpoint?: pulumi.Input<string>;
    /**
     * Unless true, the bucket will only be destroyed if empty
     */
    forceDestroy?: pulumi.Input<boolean>;
    lifecycleRules?: pulumi.Input<pulumi.Input<inputs.SpacesBucketLifecycleRule>[]>;
    /**
     * Bucket name
     */
    name?: pulumi.Input<string>;
    /**
     * Bucket region
     */
    region?: pulumi.Input<string>;
    versioning?: pulumi.Input<inputs.SpacesBucketVersioning>;
}

/**
 * The set of arguments for constructing a SpacesBucket resource.
 */
export interface SpacesBucketArgs {
    /**
     * Canned ACL applied on bucket creation
     */
    acl?: pulumi.Input<string>;
    /**
     * A container holding a list of elements describing allowed methods for a specific origin.
     *
     * @deprecated Deprecated
     */
    corsRules?: pulumi.Input<pulumi.Input<inputs.SpacesBucketCorsRule>[]>;
    /**
     * Unless true, the bucket will only be destroyed if empty
     */
    forceDestroy?: pulumi.Input<boolean>;
    lifecycleRules?: pulumi.Input<pulumi.Input<inputs.SpacesBucketLifecycleRule>[]>;
    /**
     * Bucket name
     */
    name?: pulumi.Input<string>;
    /**
     * Bucket region
     */
    region?: pulumi.Input<string>;
    versioning?: pulumi.Input<inputs.SpacesBucketVersioning>;
}
