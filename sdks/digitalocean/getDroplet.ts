// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getDroplet(args?: GetDropletArgs, opts?: pulumi.InvokeOptions): Promise<GetDropletResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("digitalocean:index/getDroplet:getDroplet", {
        "id": args.id,
        "name": args.name,
        "tag": args.tag,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getDroplet.
 */
export interface GetDropletArgs {
    id?: number;
    name?: string;
    tag?: string;
}

/**
 * A collection of values returned by getDroplet.
 */
export interface GetDropletResult {
    readonly backups: boolean;
    readonly createdAt: string;
    readonly disk: number;
    readonly id: number;
    readonly image: string;
    readonly ipv4Address: string;
    readonly ipv4AddressPrivate: string;
    readonly ipv6: boolean;
    readonly ipv6Address: string;
    readonly ipv6AddressPrivate: string;
    readonly locked: boolean;
    readonly memory: number;
    readonly monitoring: boolean;
    readonly name: string;
    readonly priceHourly: number;
    readonly priceMonthly: number;
    readonly privateNetworking: boolean;
    readonly region: string;
    readonly size: string;
    readonly status: string;
    readonly tag?: string;
    readonly tags: string[];
    readonly urn: string;
    readonly vcpus: number;
    readonly volumeIds: string[];
    readonly vpcUuid: string;
}
export function getDropletOutput(args?: GetDropletOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDropletResult> {
    return pulumi.output(args).apply((a: any) => getDroplet(a, opts))
}

/**
 * A collection of arguments for invoking getDroplet.
 */
export interface GetDropletOutputArgs {
    id?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
}
