// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DatabasePostgresqlConfig extends pulumi.CustomResource {
    /**
     * Get an existing DatabasePostgresqlConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DatabasePostgresqlConfigState, opts?: pulumi.CustomResourceOptions): DatabasePostgresqlConfig {
        return new DatabasePostgresqlConfig(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'digitalocean:index/databasePostgresqlConfig:DatabasePostgresqlConfig';

    /**
     * Returns true if the given object is an instance of DatabasePostgresqlConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DatabasePostgresqlConfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DatabasePostgresqlConfig.__pulumiType;
    }

    public readonly autovacuumAnalyzeScaleFactor!: pulumi.Output<number>;
    public readonly autovacuumAnalyzeThreshold!: pulumi.Output<number>;
    public readonly autovacuumFreezeMaxAge!: pulumi.Output<number>;
    public readonly autovacuumMaxWorkers!: pulumi.Output<number>;
    public readonly autovacuumNaptime!: pulumi.Output<number>;
    public readonly autovacuumVacuumCostDelay!: pulumi.Output<number>;
    public readonly autovacuumVacuumCostLimit!: pulumi.Output<number>;
    public readonly autovacuumVacuumScaleFactor!: pulumi.Output<number>;
    public readonly autovacuumVacuumThreshold!: pulumi.Output<number>;
    public readonly backupHour!: pulumi.Output<number>;
    public readonly backupMinute!: pulumi.Output<number>;
    public readonly bgwriterDelay!: pulumi.Output<number>;
    public readonly bgwriterFlushAfter!: pulumi.Output<number>;
    public readonly bgwriterLruMaxpages!: pulumi.Output<number>;
    public readonly bgwriterLruMultiplier!: pulumi.Output<number>;
    public readonly clusterId!: pulumi.Output<string>;
    public readonly deadlockTimeout!: pulumi.Output<number>;
    public readonly defaultToastCompression!: pulumi.Output<string>;
    public readonly idleInTransactionSessionTimeout!: pulumi.Output<number>;
    public readonly jit!: pulumi.Output<boolean>;
    public readonly logAutovacuumMinDuration!: pulumi.Output<number>;
    public readonly logErrorVerbosity!: pulumi.Output<string>;
    public readonly logLinePrefix!: pulumi.Output<string>;
    public readonly logMinDurationStatement!: pulumi.Output<number>;
    public readonly maxFilesPerProcess!: pulumi.Output<number>;
    public readonly maxLocksPerTransaction!: pulumi.Output<number>;
    public readonly maxLogicalReplicationWorkers!: pulumi.Output<number>;
    public readonly maxParallelWorkers!: pulumi.Output<number>;
    public readonly maxParallelWorkersPerGather!: pulumi.Output<number>;
    public readonly maxPredLocksPerTransaction!: pulumi.Output<number>;
    public readonly maxPreparedTransactions!: pulumi.Output<number>;
    public readonly maxReplicationSlots!: pulumi.Output<number>;
    public readonly maxStackDepth!: pulumi.Output<number>;
    public readonly maxStandbyArchiveDelay!: pulumi.Output<number>;
    public readonly maxStandbyStreamingDelay!: pulumi.Output<number>;
    public readonly maxWalSenders!: pulumi.Output<number>;
    public readonly maxWorkerProcesses!: pulumi.Output<number>;
    public readonly pgPartmanBgwInterval!: pulumi.Output<number>;
    public readonly pgPartmanBgwRole!: pulumi.Output<string>;
    public readonly pgStatStatementsTrack!: pulumi.Output<string>;
    public readonly pgbouncers!: pulumi.Output<outputs.DatabasePostgresqlConfigPgbouncer[] | undefined>;
    public readonly sharedBuffersPercentage!: pulumi.Output<number>;
    public readonly tempFileLimit!: pulumi.Output<number>;
    public readonly timescaledbs!: pulumi.Output<outputs.DatabasePostgresqlConfigTimescaledb[] | undefined>;
    public readonly timezone!: pulumi.Output<string>;
    public readonly trackActivityQuerySize!: pulumi.Output<number>;
    public readonly trackCommitTimestamp!: pulumi.Output<string>;
    public readonly trackFunctions!: pulumi.Output<string>;
    public readonly trackIoTiming!: pulumi.Output<string>;
    public readonly walSenderTimeout!: pulumi.Output<number>;
    public readonly walWriterDelay!: pulumi.Output<number>;
    public readonly workMem!: pulumi.Output<number>;

    /**
     * Create a DatabasePostgresqlConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatabasePostgresqlConfigArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DatabasePostgresqlConfigArgs | DatabasePostgresqlConfigState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DatabasePostgresqlConfigState | undefined;
            resourceInputs["autovacuumAnalyzeScaleFactor"] = state ? state.autovacuumAnalyzeScaleFactor : undefined;
            resourceInputs["autovacuumAnalyzeThreshold"] = state ? state.autovacuumAnalyzeThreshold : undefined;
            resourceInputs["autovacuumFreezeMaxAge"] = state ? state.autovacuumFreezeMaxAge : undefined;
            resourceInputs["autovacuumMaxWorkers"] = state ? state.autovacuumMaxWorkers : undefined;
            resourceInputs["autovacuumNaptime"] = state ? state.autovacuumNaptime : undefined;
            resourceInputs["autovacuumVacuumCostDelay"] = state ? state.autovacuumVacuumCostDelay : undefined;
            resourceInputs["autovacuumVacuumCostLimit"] = state ? state.autovacuumVacuumCostLimit : undefined;
            resourceInputs["autovacuumVacuumScaleFactor"] = state ? state.autovacuumVacuumScaleFactor : undefined;
            resourceInputs["autovacuumVacuumThreshold"] = state ? state.autovacuumVacuumThreshold : undefined;
            resourceInputs["backupHour"] = state ? state.backupHour : undefined;
            resourceInputs["backupMinute"] = state ? state.backupMinute : undefined;
            resourceInputs["bgwriterDelay"] = state ? state.bgwriterDelay : undefined;
            resourceInputs["bgwriterFlushAfter"] = state ? state.bgwriterFlushAfter : undefined;
            resourceInputs["bgwriterLruMaxpages"] = state ? state.bgwriterLruMaxpages : undefined;
            resourceInputs["bgwriterLruMultiplier"] = state ? state.bgwriterLruMultiplier : undefined;
            resourceInputs["clusterId"] = state ? state.clusterId : undefined;
            resourceInputs["deadlockTimeout"] = state ? state.deadlockTimeout : undefined;
            resourceInputs["defaultToastCompression"] = state ? state.defaultToastCompression : undefined;
            resourceInputs["idleInTransactionSessionTimeout"] = state ? state.idleInTransactionSessionTimeout : undefined;
            resourceInputs["jit"] = state ? state.jit : undefined;
            resourceInputs["logAutovacuumMinDuration"] = state ? state.logAutovacuumMinDuration : undefined;
            resourceInputs["logErrorVerbosity"] = state ? state.logErrorVerbosity : undefined;
            resourceInputs["logLinePrefix"] = state ? state.logLinePrefix : undefined;
            resourceInputs["logMinDurationStatement"] = state ? state.logMinDurationStatement : undefined;
            resourceInputs["maxFilesPerProcess"] = state ? state.maxFilesPerProcess : undefined;
            resourceInputs["maxLocksPerTransaction"] = state ? state.maxLocksPerTransaction : undefined;
            resourceInputs["maxLogicalReplicationWorkers"] = state ? state.maxLogicalReplicationWorkers : undefined;
            resourceInputs["maxParallelWorkers"] = state ? state.maxParallelWorkers : undefined;
            resourceInputs["maxParallelWorkersPerGather"] = state ? state.maxParallelWorkersPerGather : undefined;
            resourceInputs["maxPredLocksPerTransaction"] = state ? state.maxPredLocksPerTransaction : undefined;
            resourceInputs["maxPreparedTransactions"] = state ? state.maxPreparedTransactions : undefined;
            resourceInputs["maxReplicationSlots"] = state ? state.maxReplicationSlots : undefined;
            resourceInputs["maxStackDepth"] = state ? state.maxStackDepth : undefined;
            resourceInputs["maxStandbyArchiveDelay"] = state ? state.maxStandbyArchiveDelay : undefined;
            resourceInputs["maxStandbyStreamingDelay"] = state ? state.maxStandbyStreamingDelay : undefined;
            resourceInputs["maxWalSenders"] = state ? state.maxWalSenders : undefined;
            resourceInputs["maxWorkerProcesses"] = state ? state.maxWorkerProcesses : undefined;
            resourceInputs["pgPartmanBgwInterval"] = state ? state.pgPartmanBgwInterval : undefined;
            resourceInputs["pgPartmanBgwRole"] = state ? state.pgPartmanBgwRole : undefined;
            resourceInputs["pgStatStatementsTrack"] = state ? state.pgStatStatementsTrack : undefined;
            resourceInputs["pgbouncers"] = state ? state.pgbouncers : undefined;
            resourceInputs["sharedBuffersPercentage"] = state ? state.sharedBuffersPercentage : undefined;
            resourceInputs["tempFileLimit"] = state ? state.tempFileLimit : undefined;
            resourceInputs["timescaledbs"] = state ? state.timescaledbs : undefined;
            resourceInputs["timezone"] = state ? state.timezone : undefined;
            resourceInputs["trackActivityQuerySize"] = state ? state.trackActivityQuerySize : undefined;
            resourceInputs["trackCommitTimestamp"] = state ? state.trackCommitTimestamp : undefined;
            resourceInputs["trackFunctions"] = state ? state.trackFunctions : undefined;
            resourceInputs["trackIoTiming"] = state ? state.trackIoTiming : undefined;
            resourceInputs["walSenderTimeout"] = state ? state.walSenderTimeout : undefined;
            resourceInputs["walWriterDelay"] = state ? state.walWriterDelay : undefined;
            resourceInputs["workMem"] = state ? state.workMem : undefined;
        } else {
            const args = argsOrState as DatabasePostgresqlConfigArgs | undefined;
            if ((!args || args.clusterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            resourceInputs["autovacuumAnalyzeScaleFactor"] = args ? args.autovacuumAnalyzeScaleFactor : undefined;
            resourceInputs["autovacuumAnalyzeThreshold"] = args ? args.autovacuumAnalyzeThreshold : undefined;
            resourceInputs["autovacuumFreezeMaxAge"] = args ? args.autovacuumFreezeMaxAge : undefined;
            resourceInputs["autovacuumMaxWorkers"] = args ? args.autovacuumMaxWorkers : undefined;
            resourceInputs["autovacuumNaptime"] = args ? args.autovacuumNaptime : undefined;
            resourceInputs["autovacuumVacuumCostDelay"] = args ? args.autovacuumVacuumCostDelay : undefined;
            resourceInputs["autovacuumVacuumCostLimit"] = args ? args.autovacuumVacuumCostLimit : undefined;
            resourceInputs["autovacuumVacuumScaleFactor"] = args ? args.autovacuumVacuumScaleFactor : undefined;
            resourceInputs["autovacuumVacuumThreshold"] = args ? args.autovacuumVacuumThreshold : undefined;
            resourceInputs["backupHour"] = args ? args.backupHour : undefined;
            resourceInputs["backupMinute"] = args ? args.backupMinute : undefined;
            resourceInputs["bgwriterDelay"] = args ? args.bgwriterDelay : undefined;
            resourceInputs["bgwriterFlushAfter"] = args ? args.bgwriterFlushAfter : undefined;
            resourceInputs["bgwriterLruMaxpages"] = args ? args.bgwriterLruMaxpages : undefined;
            resourceInputs["bgwriterLruMultiplier"] = args ? args.bgwriterLruMultiplier : undefined;
            resourceInputs["clusterId"] = args ? args.clusterId : undefined;
            resourceInputs["deadlockTimeout"] = args ? args.deadlockTimeout : undefined;
            resourceInputs["defaultToastCompression"] = args ? args.defaultToastCompression : undefined;
            resourceInputs["idleInTransactionSessionTimeout"] = args ? args.idleInTransactionSessionTimeout : undefined;
            resourceInputs["jit"] = args ? args.jit : undefined;
            resourceInputs["logAutovacuumMinDuration"] = args ? args.logAutovacuumMinDuration : undefined;
            resourceInputs["logErrorVerbosity"] = args ? args.logErrorVerbosity : undefined;
            resourceInputs["logLinePrefix"] = args ? args.logLinePrefix : undefined;
            resourceInputs["logMinDurationStatement"] = args ? args.logMinDurationStatement : undefined;
            resourceInputs["maxFilesPerProcess"] = args ? args.maxFilesPerProcess : undefined;
            resourceInputs["maxLocksPerTransaction"] = args ? args.maxLocksPerTransaction : undefined;
            resourceInputs["maxLogicalReplicationWorkers"] = args ? args.maxLogicalReplicationWorkers : undefined;
            resourceInputs["maxParallelWorkers"] = args ? args.maxParallelWorkers : undefined;
            resourceInputs["maxParallelWorkersPerGather"] = args ? args.maxParallelWorkersPerGather : undefined;
            resourceInputs["maxPredLocksPerTransaction"] = args ? args.maxPredLocksPerTransaction : undefined;
            resourceInputs["maxPreparedTransactions"] = args ? args.maxPreparedTransactions : undefined;
            resourceInputs["maxReplicationSlots"] = args ? args.maxReplicationSlots : undefined;
            resourceInputs["maxStackDepth"] = args ? args.maxStackDepth : undefined;
            resourceInputs["maxStandbyArchiveDelay"] = args ? args.maxStandbyArchiveDelay : undefined;
            resourceInputs["maxStandbyStreamingDelay"] = args ? args.maxStandbyStreamingDelay : undefined;
            resourceInputs["maxWalSenders"] = args ? args.maxWalSenders : undefined;
            resourceInputs["maxWorkerProcesses"] = args ? args.maxWorkerProcesses : undefined;
            resourceInputs["pgPartmanBgwInterval"] = args ? args.pgPartmanBgwInterval : undefined;
            resourceInputs["pgPartmanBgwRole"] = args ? args.pgPartmanBgwRole : undefined;
            resourceInputs["pgStatStatementsTrack"] = args ? args.pgStatStatementsTrack : undefined;
            resourceInputs["pgbouncers"] = args ? args.pgbouncers : undefined;
            resourceInputs["sharedBuffersPercentage"] = args ? args.sharedBuffersPercentage : undefined;
            resourceInputs["tempFileLimit"] = args ? args.tempFileLimit : undefined;
            resourceInputs["timescaledbs"] = args ? args.timescaledbs : undefined;
            resourceInputs["timezone"] = args ? args.timezone : undefined;
            resourceInputs["trackActivityQuerySize"] = args ? args.trackActivityQuerySize : undefined;
            resourceInputs["trackCommitTimestamp"] = args ? args.trackCommitTimestamp : undefined;
            resourceInputs["trackFunctions"] = args ? args.trackFunctions : undefined;
            resourceInputs["trackIoTiming"] = args ? args.trackIoTiming : undefined;
            resourceInputs["walSenderTimeout"] = args ? args.walSenderTimeout : undefined;
            resourceInputs["walWriterDelay"] = args ? args.walWriterDelay : undefined;
            resourceInputs["workMem"] = args ? args.workMem : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DatabasePostgresqlConfig.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DatabasePostgresqlConfig resources.
 */
export interface DatabasePostgresqlConfigState {
    autovacuumAnalyzeScaleFactor?: pulumi.Input<number>;
    autovacuumAnalyzeThreshold?: pulumi.Input<number>;
    autovacuumFreezeMaxAge?: pulumi.Input<number>;
    autovacuumMaxWorkers?: pulumi.Input<number>;
    autovacuumNaptime?: pulumi.Input<number>;
    autovacuumVacuumCostDelay?: pulumi.Input<number>;
    autovacuumVacuumCostLimit?: pulumi.Input<number>;
    autovacuumVacuumScaleFactor?: pulumi.Input<number>;
    autovacuumVacuumThreshold?: pulumi.Input<number>;
    backupHour?: pulumi.Input<number>;
    backupMinute?: pulumi.Input<number>;
    bgwriterDelay?: pulumi.Input<number>;
    bgwriterFlushAfter?: pulumi.Input<number>;
    bgwriterLruMaxpages?: pulumi.Input<number>;
    bgwriterLruMultiplier?: pulumi.Input<number>;
    clusterId?: pulumi.Input<string>;
    deadlockTimeout?: pulumi.Input<number>;
    defaultToastCompression?: pulumi.Input<string>;
    idleInTransactionSessionTimeout?: pulumi.Input<number>;
    jit?: pulumi.Input<boolean>;
    logAutovacuumMinDuration?: pulumi.Input<number>;
    logErrorVerbosity?: pulumi.Input<string>;
    logLinePrefix?: pulumi.Input<string>;
    logMinDurationStatement?: pulumi.Input<number>;
    maxFilesPerProcess?: pulumi.Input<number>;
    maxLocksPerTransaction?: pulumi.Input<number>;
    maxLogicalReplicationWorkers?: pulumi.Input<number>;
    maxParallelWorkers?: pulumi.Input<number>;
    maxParallelWorkersPerGather?: pulumi.Input<number>;
    maxPredLocksPerTransaction?: pulumi.Input<number>;
    maxPreparedTransactions?: pulumi.Input<number>;
    maxReplicationSlots?: pulumi.Input<number>;
    maxStackDepth?: pulumi.Input<number>;
    maxStandbyArchiveDelay?: pulumi.Input<number>;
    maxStandbyStreamingDelay?: pulumi.Input<number>;
    maxWalSenders?: pulumi.Input<number>;
    maxWorkerProcesses?: pulumi.Input<number>;
    pgPartmanBgwInterval?: pulumi.Input<number>;
    pgPartmanBgwRole?: pulumi.Input<string>;
    pgStatStatementsTrack?: pulumi.Input<string>;
    pgbouncers?: pulumi.Input<pulumi.Input<inputs.DatabasePostgresqlConfigPgbouncer>[]>;
    sharedBuffersPercentage?: pulumi.Input<number>;
    tempFileLimit?: pulumi.Input<number>;
    timescaledbs?: pulumi.Input<pulumi.Input<inputs.DatabasePostgresqlConfigTimescaledb>[]>;
    timezone?: pulumi.Input<string>;
    trackActivityQuerySize?: pulumi.Input<number>;
    trackCommitTimestamp?: pulumi.Input<string>;
    trackFunctions?: pulumi.Input<string>;
    trackIoTiming?: pulumi.Input<string>;
    walSenderTimeout?: pulumi.Input<number>;
    walWriterDelay?: pulumi.Input<number>;
    workMem?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a DatabasePostgresqlConfig resource.
 */
export interface DatabasePostgresqlConfigArgs {
    autovacuumAnalyzeScaleFactor?: pulumi.Input<number>;
    autovacuumAnalyzeThreshold?: pulumi.Input<number>;
    autovacuumFreezeMaxAge?: pulumi.Input<number>;
    autovacuumMaxWorkers?: pulumi.Input<number>;
    autovacuumNaptime?: pulumi.Input<number>;
    autovacuumVacuumCostDelay?: pulumi.Input<number>;
    autovacuumVacuumCostLimit?: pulumi.Input<number>;
    autovacuumVacuumScaleFactor?: pulumi.Input<number>;
    autovacuumVacuumThreshold?: pulumi.Input<number>;
    backupHour?: pulumi.Input<number>;
    backupMinute?: pulumi.Input<number>;
    bgwriterDelay?: pulumi.Input<number>;
    bgwriterFlushAfter?: pulumi.Input<number>;
    bgwriterLruMaxpages?: pulumi.Input<number>;
    bgwriterLruMultiplier?: pulumi.Input<number>;
    clusterId: pulumi.Input<string>;
    deadlockTimeout?: pulumi.Input<number>;
    defaultToastCompression?: pulumi.Input<string>;
    idleInTransactionSessionTimeout?: pulumi.Input<number>;
    jit?: pulumi.Input<boolean>;
    logAutovacuumMinDuration?: pulumi.Input<number>;
    logErrorVerbosity?: pulumi.Input<string>;
    logLinePrefix?: pulumi.Input<string>;
    logMinDurationStatement?: pulumi.Input<number>;
    maxFilesPerProcess?: pulumi.Input<number>;
    maxLocksPerTransaction?: pulumi.Input<number>;
    maxLogicalReplicationWorkers?: pulumi.Input<number>;
    maxParallelWorkers?: pulumi.Input<number>;
    maxParallelWorkersPerGather?: pulumi.Input<number>;
    maxPredLocksPerTransaction?: pulumi.Input<number>;
    maxPreparedTransactions?: pulumi.Input<number>;
    maxReplicationSlots?: pulumi.Input<number>;
    maxStackDepth?: pulumi.Input<number>;
    maxStandbyArchiveDelay?: pulumi.Input<number>;
    maxStandbyStreamingDelay?: pulumi.Input<number>;
    maxWalSenders?: pulumi.Input<number>;
    maxWorkerProcesses?: pulumi.Input<number>;
    pgPartmanBgwInterval?: pulumi.Input<number>;
    pgPartmanBgwRole?: pulumi.Input<string>;
    pgStatStatementsTrack?: pulumi.Input<string>;
    pgbouncers?: pulumi.Input<pulumi.Input<inputs.DatabasePostgresqlConfigPgbouncer>[]>;
    sharedBuffersPercentage?: pulumi.Input<number>;
    tempFileLimit?: pulumi.Input<number>;
    timescaledbs?: pulumi.Input<pulumi.Input<inputs.DatabasePostgresqlConfigTimescaledb>[]>;
    timezone?: pulumi.Input<string>;
    trackActivityQuerySize?: pulumi.Input<number>;
    trackCommitTimestamp?: pulumi.Input<string>;
    trackFunctions?: pulumi.Input<string>;
    trackIoTiming?: pulumi.Input<string>;
    walSenderTimeout?: pulumi.Input<number>;
    walWriterDelay?: pulumi.Input<number>;
    workMem?: pulumi.Input<number>;
}
