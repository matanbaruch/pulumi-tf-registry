// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Loadbalancer extends pulumi.CustomResource {
    /**
     * Get an existing Loadbalancer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LoadbalancerState, opts?: pulumi.CustomResourceOptions): Loadbalancer {
        return new Loadbalancer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'digitalocean:index/loadbalancer:Loadbalancer';

    /**
     * Returns true if the given object is an instance of Loadbalancer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Loadbalancer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Loadbalancer.__pulumiType;
    }

    /**
     * @deprecated Deprecated
     */
    public readonly algorithm!: pulumi.Output<string | undefined>;
    /**
     * the uniform resource name for the load balancer
     */
    public /*out*/ readonly digitaloceanUrn!: pulumi.Output<string>;
    public readonly disableLetsEncryptDnsRecords!: pulumi.Output<boolean | undefined>;
    /**
     * the list of domains required to ingress traffic to global load balancer
     */
    public readonly domains!: pulumi.Output<outputs.LoadbalancerDomain[] | undefined>;
    public readonly dropletIds!: pulumi.Output<number[]>;
    public readonly dropletTag!: pulumi.Output<string | undefined>;
    public readonly enableBackendKeepalive!: pulumi.Output<boolean | undefined>;
    public readonly enableProxyProtocol!: pulumi.Output<boolean | undefined>;
    public readonly firewall!: pulumi.Output<outputs.LoadbalancerFirewall | undefined>;
    public readonly forwardingRules!: pulumi.Output<outputs.LoadbalancerForwardingRule[] | undefined>;
    /**
     * configuration options for global load balancer
     */
    public readonly glbSettings!: pulumi.Output<outputs.LoadbalancerGlbSettings | undefined>;
    public readonly healthcheck!: pulumi.Output<outputs.LoadbalancerHealthcheck | undefined>;
    public readonly httpIdleTimeoutSeconds!: pulumi.Output<number>;
    public /*out*/ readonly ip!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    /**
     * the type of network the load balancer is accessible from (EXTERNAL or INTERNAL)
     */
    public readonly network!: pulumi.Output<string | undefined>;
    public readonly projectId!: pulumi.Output<string>;
    public readonly redirectHttpToHttps!: pulumi.Output<boolean | undefined>;
    public readonly region!: pulumi.Output<string | undefined>;
    public readonly size!: pulumi.Output<string | undefined>;
    public readonly sizeUnit!: pulumi.Output<number>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly stickySessions!: pulumi.Output<outputs.LoadbalancerStickySessions | undefined>;
    /**
     * list of load balancer IDs to put behind a global load balancer
     */
    public readonly targetLoadBalancerIds!: pulumi.Output<string[]>;
    /**
     * the type of the load balancer (GLOBAL or REGIONAL)
     */
    public readonly type!: pulumi.Output<string | undefined>;
    public readonly vpcUuid!: pulumi.Output<string>;

    /**
     * Create a Loadbalancer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: LoadbalancerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LoadbalancerArgs | LoadbalancerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LoadbalancerState | undefined;
            resourceInputs["algorithm"] = state ? state.algorithm : undefined;
            resourceInputs["digitaloceanUrn"] = state ? state.digitaloceanUrn : undefined;
            resourceInputs["disableLetsEncryptDnsRecords"] = state ? state.disableLetsEncryptDnsRecords : undefined;
            resourceInputs["domains"] = state ? state.domains : undefined;
            resourceInputs["dropletIds"] = state ? state.dropletIds : undefined;
            resourceInputs["dropletTag"] = state ? state.dropletTag : undefined;
            resourceInputs["enableBackendKeepalive"] = state ? state.enableBackendKeepalive : undefined;
            resourceInputs["enableProxyProtocol"] = state ? state.enableProxyProtocol : undefined;
            resourceInputs["firewall"] = state ? state.firewall : undefined;
            resourceInputs["forwardingRules"] = state ? state.forwardingRules : undefined;
            resourceInputs["glbSettings"] = state ? state.glbSettings : undefined;
            resourceInputs["healthcheck"] = state ? state.healthcheck : undefined;
            resourceInputs["httpIdleTimeoutSeconds"] = state ? state.httpIdleTimeoutSeconds : undefined;
            resourceInputs["ip"] = state ? state.ip : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["network"] = state ? state.network : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["redirectHttpToHttps"] = state ? state.redirectHttpToHttps : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["size"] = state ? state.size : undefined;
            resourceInputs["sizeUnit"] = state ? state.sizeUnit : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["stickySessions"] = state ? state.stickySessions : undefined;
            resourceInputs["targetLoadBalancerIds"] = state ? state.targetLoadBalancerIds : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["vpcUuid"] = state ? state.vpcUuid : undefined;
        } else {
            const args = argsOrState as LoadbalancerArgs | undefined;
            resourceInputs["algorithm"] = args ? args.algorithm : undefined;
            resourceInputs["disableLetsEncryptDnsRecords"] = args ? args.disableLetsEncryptDnsRecords : undefined;
            resourceInputs["domains"] = args ? args.domains : undefined;
            resourceInputs["dropletIds"] = args ? args.dropletIds : undefined;
            resourceInputs["dropletTag"] = args ? args.dropletTag : undefined;
            resourceInputs["enableBackendKeepalive"] = args ? args.enableBackendKeepalive : undefined;
            resourceInputs["enableProxyProtocol"] = args ? args.enableProxyProtocol : undefined;
            resourceInputs["firewall"] = args ? args.firewall : undefined;
            resourceInputs["forwardingRules"] = args ? args.forwardingRules : undefined;
            resourceInputs["glbSettings"] = args ? args.glbSettings : undefined;
            resourceInputs["healthcheck"] = args ? args.healthcheck : undefined;
            resourceInputs["httpIdleTimeoutSeconds"] = args ? args.httpIdleTimeoutSeconds : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["network"] = args ? args.network : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["redirectHttpToHttps"] = args ? args.redirectHttpToHttps : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["size"] = args ? args.size : undefined;
            resourceInputs["sizeUnit"] = args ? args.sizeUnit : undefined;
            resourceInputs["stickySessions"] = args ? args.stickySessions : undefined;
            resourceInputs["targetLoadBalancerIds"] = args ? args.targetLoadBalancerIds : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["vpcUuid"] = args ? args.vpcUuid : undefined;
            resourceInputs["digitaloceanUrn"] = undefined /*out*/;
            resourceInputs["ip"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Loadbalancer.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Loadbalancer resources.
 */
export interface LoadbalancerState {
    /**
     * @deprecated Deprecated
     */
    algorithm?: pulumi.Input<string>;
    /**
     * the uniform resource name for the load balancer
     */
    digitaloceanUrn?: pulumi.Input<string>;
    disableLetsEncryptDnsRecords?: pulumi.Input<boolean>;
    /**
     * the list of domains required to ingress traffic to global load balancer
     */
    domains?: pulumi.Input<pulumi.Input<inputs.LoadbalancerDomain>[]>;
    dropletIds?: pulumi.Input<pulumi.Input<number>[]>;
    dropletTag?: pulumi.Input<string>;
    enableBackendKeepalive?: pulumi.Input<boolean>;
    enableProxyProtocol?: pulumi.Input<boolean>;
    firewall?: pulumi.Input<inputs.LoadbalancerFirewall>;
    forwardingRules?: pulumi.Input<pulumi.Input<inputs.LoadbalancerForwardingRule>[]>;
    /**
     * configuration options for global load balancer
     */
    glbSettings?: pulumi.Input<inputs.LoadbalancerGlbSettings>;
    healthcheck?: pulumi.Input<inputs.LoadbalancerHealthcheck>;
    httpIdleTimeoutSeconds?: pulumi.Input<number>;
    ip?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    /**
     * the type of network the load balancer is accessible from (EXTERNAL or INTERNAL)
     */
    network?: pulumi.Input<string>;
    projectId?: pulumi.Input<string>;
    redirectHttpToHttps?: pulumi.Input<boolean>;
    region?: pulumi.Input<string>;
    size?: pulumi.Input<string>;
    sizeUnit?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    stickySessions?: pulumi.Input<inputs.LoadbalancerStickySessions>;
    /**
     * list of load balancer IDs to put behind a global load balancer
     */
    targetLoadBalancerIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * the type of the load balancer (GLOBAL or REGIONAL)
     */
    type?: pulumi.Input<string>;
    vpcUuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Loadbalancer resource.
 */
export interface LoadbalancerArgs {
    /**
     * @deprecated Deprecated
     */
    algorithm?: pulumi.Input<string>;
    disableLetsEncryptDnsRecords?: pulumi.Input<boolean>;
    /**
     * the list of domains required to ingress traffic to global load balancer
     */
    domains?: pulumi.Input<pulumi.Input<inputs.LoadbalancerDomain>[]>;
    dropletIds?: pulumi.Input<pulumi.Input<number>[]>;
    dropletTag?: pulumi.Input<string>;
    enableBackendKeepalive?: pulumi.Input<boolean>;
    enableProxyProtocol?: pulumi.Input<boolean>;
    firewall?: pulumi.Input<inputs.LoadbalancerFirewall>;
    forwardingRules?: pulumi.Input<pulumi.Input<inputs.LoadbalancerForwardingRule>[]>;
    /**
     * configuration options for global load balancer
     */
    glbSettings?: pulumi.Input<inputs.LoadbalancerGlbSettings>;
    healthcheck?: pulumi.Input<inputs.LoadbalancerHealthcheck>;
    httpIdleTimeoutSeconds?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    /**
     * the type of network the load balancer is accessible from (EXTERNAL or INTERNAL)
     */
    network?: pulumi.Input<string>;
    projectId?: pulumi.Input<string>;
    redirectHttpToHttps?: pulumi.Input<boolean>;
    region?: pulumi.Input<string>;
    size?: pulumi.Input<string>;
    sizeUnit?: pulumi.Input<number>;
    stickySessions?: pulumi.Input<inputs.LoadbalancerStickySessions>;
    /**
     * list of load balancer IDs to put behind a global load balancer
     */
    targetLoadBalancerIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * the type of the load balancer (GLOBAL or REGIONAL)
     */
    type?: pulumi.Input<string>;
    vpcUuid?: pulumi.Input<string>;
}
