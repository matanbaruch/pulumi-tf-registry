// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getLoadbalancer(args?: GetLoadbalancerArgs, opts?: pulumi.InvokeOptions): Promise<GetLoadbalancerResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("digitalocean:index/getLoadbalancer:getLoadbalancer", {
        "id": args.id,
        "name": args.name,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getLoadbalancer.
 */
export interface GetLoadbalancerArgs {
    id?: string;
    name?: string;
}

/**
 * A collection of values returned by getLoadbalancer.
 */
export interface GetLoadbalancerResult {
    /**
     * @deprecated Deprecated
     */
    readonly algorithm: string;
    readonly disableLetsEncryptDnsRecords: boolean;
    readonly domains: outputs.GetLoadbalancerDomain[];
    readonly dropletIds: number[];
    readonly dropletTag: string;
    readonly enableBackendKeepalive: boolean;
    readonly enableProxyProtocol: boolean;
    readonly firewalls: outputs.GetLoadbalancerFirewall[];
    readonly forwardingRules: outputs.GetLoadbalancerForwardingRule[];
    readonly glbSettings: outputs.GetLoadbalancerGlbSetting[];
    readonly healthchecks: outputs.GetLoadbalancerHealthcheck[];
    readonly httpIdleTimeoutSeconds: number;
    readonly id?: string;
    readonly ip: string;
    readonly name?: string;
    readonly network: string;
    readonly projectId: string;
    readonly redirectHttpToHttps: boolean;
    readonly region: string;
    readonly size: string;
    readonly sizeUnit: number;
    readonly status: string;
    readonly stickySessions: outputs.GetLoadbalancerStickySession[];
    readonly targetLoadBalancerIds: string[];
    readonly type: string;
    readonly urn: string;
    readonly vpcUuid: string;
}
export function getLoadbalancerOutput(args?: GetLoadbalancerOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetLoadbalancerResult> {
    return pulumi.output(args).apply((a: any) => getLoadbalancer(a, opts))
}

/**
 * A collection of arguments for invoking getLoadbalancer.
 */
export interface GetLoadbalancerOutputArgs {
    id?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
}
