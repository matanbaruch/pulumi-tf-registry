// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class DatabaseReplica extends pulumi.CustomResource {
    /**
     * Get an existing DatabaseReplica resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DatabaseReplicaState, opts?: pulumi.CustomResourceOptions): DatabaseReplica {
        return new DatabaseReplica(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'digitalocean:index/databaseReplica:DatabaseReplica';

    /**
     * Returns true if the given object is an instance of DatabaseReplica.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DatabaseReplica {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DatabaseReplica.__pulumiType;
    }

    public readonly clusterId!: pulumi.Output<string>;
    public /*out*/ readonly database!: pulumi.Output<string>;
    public /*out*/ readonly host!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public /*out*/ readonly password!: pulumi.Output<string>;
    public /*out*/ readonly port!: pulumi.Output<number>;
    public /*out*/ readonly privateHost!: pulumi.Output<string>;
    public readonly privateNetworkUuid!: pulumi.Output<string>;
    public /*out*/ readonly privateUri!: pulumi.Output<string>;
    public readonly region!: pulumi.Output<string | undefined>;
    public readonly size!: pulumi.Output<string | undefined>;
    public readonly storageSizeMib!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<string[] | undefined>;
    public /*out*/ readonly uri!: pulumi.Output<string>;
    public /*out*/ readonly user!: pulumi.Output<string>;
    /**
     * The unique universal identifier for the database replica.
     */
    public /*out*/ readonly uuid!: pulumi.Output<string>;

    /**
     * Create a DatabaseReplica resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatabaseReplicaArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DatabaseReplicaArgs | DatabaseReplicaState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DatabaseReplicaState | undefined;
            resourceInputs["clusterId"] = state ? state.clusterId : undefined;
            resourceInputs["database"] = state ? state.database : undefined;
            resourceInputs["host"] = state ? state.host : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["privateHost"] = state ? state.privateHost : undefined;
            resourceInputs["privateNetworkUuid"] = state ? state.privateNetworkUuid : undefined;
            resourceInputs["privateUri"] = state ? state.privateUri : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["size"] = state ? state.size : undefined;
            resourceInputs["storageSizeMib"] = state ? state.storageSizeMib : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["uri"] = state ? state.uri : undefined;
            resourceInputs["user"] = state ? state.user : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as DatabaseReplicaArgs | undefined;
            if ((!args || args.clusterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            resourceInputs["clusterId"] = args ? args.clusterId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["privateNetworkUuid"] = args ? args.privateNetworkUuid : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["size"] = args ? args.size : undefined;
            resourceInputs["storageSizeMib"] = args ? args.storageSizeMib : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["database"] = undefined /*out*/;
            resourceInputs["host"] = undefined /*out*/;
            resourceInputs["password"] = undefined /*out*/;
            resourceInputs["port"] = undefined /*out*/;
            resourceInputs["privateHost"] = undefined /*out*/;
            resourceInputs["privateUri"] = undefined /*out*/;
            resourceInputs["uri"] = undefined /*out*/;
            resourceInputs["user"] = undefined /*out*/;
            resourceInputs["uuid"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password", "privateUri", "uri"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(DatabaseReplica.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DatabaseReplica resources.
 */
export interface DatabaseReplicaState {
    clusterId?: pulumi.Input<string>;
    database?: pulumi.Input<string>;
    host?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    privateHost?: pulumi.Input<string>;
    privateNetworkUuid?: pulumi.Input<string>;
    privateUri?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    size?: pulumi.Input<string>;
    storageSizeMib?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    uri?: pulumi.Input<string>;
    user?: pulumi.Input<string>;
    /**
     * The unique universal identifier for the database replica.
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DatabaseReplica resource.
 */
export interface DatabaseReplicaArgs {
    clusterId: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    privateNetworkUuid?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    size?: pulumi.Input<string>;
    storageSizeMib?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}
