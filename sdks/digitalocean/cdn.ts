// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Cdn extends pulumi.CustomResource {
    /**
     * Get an existing Cdn resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CdnState, opts?: pulumi.CustomResourceOptions): Cdn {
        return new Cdn(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'digitalocean:index/cdn:Cdn';

    /**
     * Returns true if the given object is an instance of Cdn.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Cdn {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Cdn.__pulumiType;
    }

    /**
     * ID of a DigitalOcean managed TLS certificate for use with custom domains
     *
     * @deprecated Deprecated
     */
    public readonly certificateId!: pulumi.Output<string>;
    public readonly certificateName!: pulumi.Output<string>;
    /**
     * The date and time (ISO8601) of when the CDN endpoint was created.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * fully qualified domain name (FQDN) for custom subdomain, (requires certificate_id)
     */
    public readonly customDomain!: pulumi.Output<string | undefined>;
    /**
     * fully qualified domain name (FQDN) to serve the CDN content
     */
    public /*out*/ readonly endpoint!: pulumi.Output<string>;
    /**
     * fully qualified domain name (FQDN) for the origin server
     */
    public readonly origin!: pulumi.Output<string>;
    /**
     * The amount of time the content is cached in the CDN
     */
    public readonly ttl!: pulumi.Output<number>;

    /**
     * Create a Cdn resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CdnArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CdnArgs | CdnState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CdnState | undefined;
            resourceInputs["certificateId"] = state ? state.certificateId : undefined;
            resourceInputs["certificateName"] = state ? state.certificateName : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["customDomain"] = state ? state.customDomain : undefined;
            resourceInputs["endpoint"] = state ? state.endpoint : undefined;
            resourceInputs["origin"] = state ? state.origin : undefined;
            resourceInputs["ttl"] = state ? state.ttl : undefined;
        } else {
            const args = argsOrState as CdnArgs | undefined;
            if ((!args || args.origin === undefined) && !opts.urn) {
                throw new Error("Missing required property 'origin'");
            }
            resourceInputs["certificateId"] = args ? args.certificateId : undefined;
            resourceInputs["certificateName"] = args ? args.certificateName : undefined;
            resourceInputs["customDomain"] = args ? args.customDomain : undefined;
            resourceInputs["origin"] = args ? args.origin : undefined;
            resourceInputs["ttl"] = args ? args.ttl : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["endpoint"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Cdn.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Cdn resources.
 */
export interface CdnState {
    /**
     * ID of a DigitalOcean managed TLS certificate for use with custom domains
     *
     * @deprecated Deprecated
     */
    certificateId?: pulumi.Input<string>;
    certificateName?: pulumi.Input<string>;
    /**
     * The date and time (ISO8601) of when the CDN endpoint was created.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * fully qualified domain name (FQDN) for custom subdomain, (requires certificate_id)
     */
    customDomain?: pulumi.Input<string>;
    /**
     * fully qualified domain name (FQDN) to serve the CDN content
     */
    endpoint?: pulumi.Input<string>;
    /**
     * fully qualified domain name (FQDN) for the origin server
     */
    origin?: pulumi.Input<string>;
    /**
     * The amount of time the content is cached in the CDN
     */
    ttl?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Cdn resource.
 */
export interface CdnArgs {
    /**
     * ID of a DigitalOcean managed TLS certificate for use with custom domains
     *
     * @deprecated Deprecated
     */
    certificateId?: pulumi.Input<string>;
    certificateName?: pulumi.Input<string>;
    /**
     * fully qualified domain name (FQDN) for custom subdomain, (requires certificate_id)
     */
    customDomain?: pulumi.Input<string>;
    /**
     * fully qualified domain name (FQDN) for the origin server
     */
    origin: pulumi.Input<string>;
    /**
     * The amount of time the content is cached in the CDN
     */
    ttl?: pulumi.Input<number>;
}
