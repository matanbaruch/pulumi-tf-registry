// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class KubernetesCluster extends pulumi.CustomResource {
    /**
     * Get an existing KubernetesCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KubernetesClusterState, opts?: pulumi.CustomResourceOptions): KubernetesCluster {
        return new KubernetesCluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'digitalocean:index/kubernetesCluster:KubernetesCluster';

    /**
     * Returns true if the given object is an instance of KubernetesCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KubernetesCluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KubernetesCluster.__pulumiType;
    }

    public readonly autoUpgrade!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly clusterSubnet!: pulumi.Output<string>;
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    public readonly destroyAllAssociatedResources!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly digitaloceanUrn!: pulumi.Output<string>;
    public /*out*/ readonly endpoint!: pulumi.Output<string>;
    public readonly ha!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly ipv4Address!: pulumi.Output<string>;
    public /*out*/ readonly kubeConfigs!: pulumi.Output<outputs.KubernetesClusterKubeConfig[]>;
    public readonly maintenancePolicy!: pulumi.Output<outputs.KubernetesClusterMaintenancePolicy | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly nodePool!: pulumi.Output<outputs.KubernetesClusterNodePool>;
    public readonly region!: pulumi.Output<string>;
    public readonly registryIntegration!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly serviceSubnet!: pulumi.Output<string>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly surgeUpgrade!: pulumi.Output<boolean | undefined>;
    public readonly tags!: pulumi.Output<string[] | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.KubernetesClusterTimeouts | undefined>;
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;
    public readonly version!: pulumi.Output<string>;
    public readonly vpcUuid!: pulumi.Output<string>;

    /**
     * Create a KubernetesCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KubernetesClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KubernetesClusterArgs | KubernetesClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KubernetesClusterState | undefined;
            resourceInputs["autoUpgrade"] = state ? state.autoUpgrade : undefined;
            resourceInputs["clusterSubnet"] = state ? state.clusterSubnet : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["destroyAllAssociatedResources"] = state ? state.destroyAllAssociatedResources : undefined;
            resourceInputs["digitaloceanUrn"] = state ? state.digitaloceanUrn : undefined;
            resourceInputs["endpoint"] = state ? state.endpoint : undefined;
            resourceInputs["ha"] = state ? state.ha : undefined;
            resourceInputs["ipv4Address"] = state ? state.ipv4Address : undefined;
            resourceInputs["kubeConfigs"] = state ? state.kubeConfigs : undefined;
            resourceInputs["maintenancePolicy"] = state ? state.maintenancePolicy : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nodePool"] = state ? state.nodePool : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["registryIntegration"] = state ? state.registryIntegration : undefined;
            resourceInputs["serviceSubnet"] = state ? state.serviceSubnet : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["surgeUpgrade"] = state ? state.surgeUpgrade : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
            resourceInputs["vpcUuid"] = state ? state.vpcUuid : undefined;
        } else {
            const args = argsOrState as KubernetesClusterArgs | undefined;
            if ((!args || args.nodePool === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nodePool'");
            }
            if ((!args || args.region === undefined) && !opts.urn) {
                throw new Error("Missing required property 'region'");
            }
            if ((!args || args.version === undefined) && !opts.urn) {
                throw new Error("Missing required property 'version'");
            }
            resourceInputs["autoUpgrade"] = args ? args.autoUpgrade : undefined;
            resourceInputs["destroyAllAssociatedResources"] = args ? args.destroyAllAssociatedResources : undefined;
            resourceInputs["ha"] = args ? args.ha : undefined;
            resourceInputs["maintenancePolicy"] = args ? args.maintenancePolicy : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nodePool"] = args ? args.nodePool : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["registryIntegration"] = args ? args.registryIntegration : undefined;
            resourceInputs["surgeUpgrade"] = args ? args.surgeUpgrade : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
            resourceInputs["vpcUuid"] = args ? args.vpcUuid : undefined;
            resourceInputs["clusterSubnet"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["digitaloceanUrn"] = undefined /*out*/;
            resourceInputs["endpoint"] = undefined /*out*/;
            resourceInputs["ipv4Address"] = undefined /*out*/;
            resourceInputs["kubeConfigs"] = undefined /*out*/;
            resourceInputs["serviceSubnet"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["kubeConfigs"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(KubernetesCluster.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering KubernetesCluster resources.
 */
export interface KubernetesClusterState {
    autoUpgrade?: pulumi.Input<boolean>;
    clusterSubnet?: pulumi.Input<string>;
    createdAt?: pulumi.Input<string>;
    destroyAllAssociatedResources?: pulumi.Input<boolean>;
    digitaloceanUrn?: pulumi.Input<string>;
    endpoint?: pulumi.Input<string>;
    ha?: pulumi.Input<boolean>;
    ipv4Address?: pulumi.Input<string>;
    kubeConfigs?: pulumi.Input<pulumi.Input<inputs.KubernetesClusterKubeConfig>[]>;
    maintenancePolicy?: pulumi.Input<inputs.KubernetesClusterMaintenancePolicy>;
    name?: pulumi.Input<string>;
    nodePool?: pulumi.Input<inputs.KubernetesClusterNodePool>;
    region?: pulumi.Input<string>;
    registryIntegration?: pulumi.Input<boolean>;
    serviceSubnet?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    surgeUpgrade?: pulumi.Input<boolean>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.KubernetesClusterTimeouts>;
    updatedAt?: pulumi.Input<string>;
    version?: pulumi.Input<string>;
    vpcUuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a KubernetesCluster resource.
 */
export interface KubernetesClusterArgs {
    autoUpgrade?: pulumi.Input<boolean>;
    destroyAllAssociatedResources?: pulumi.Input<boolean>;
    ha?: pulumi.Input<boolean>;
    maintenancePolicy?: pulumi.Input<inputs.KubernetesClusterMaintenancePolicy>;
    name?: pulumi.Input<string>;
    nodePool: pulumi.Input<inputs.KubernetesClusterNodePool>;
    region: pulumi.Input<string>;
    registryIntegration?: pulumi.Input<boolean>;
    surgeUpgrade?: pulumi.Input<boolean>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.KubernetesClusterTimeouts>;
    version: pulumi.Input<string>;
    vpcUuid?: pulumi.Input<string>;
}
