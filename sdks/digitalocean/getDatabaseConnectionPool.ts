// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getDatabaseConnectionPool(args: GetDatabaseConnectionPoolArgs, opts?: pulumi.InvokeOptions): Promise<GetDatabaseConnectionPoolResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("digitalocean:index/getDatabaseConnectionPool:getDatabaseConnectionPool", {
        "clusterId": args.clusterId,
        "id": args.id,
        "name": args.name,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getDatabaseConnectionPool.
 */
export interface GetDatabaseConnectionPoolArgs {
    clusterId: string;
    id?: string;
    name: string;
}

/**
 * A collection of values returned by getDatabaseConnectionPool.
 */
export interface GetDatabaseConnectionPoolResult {
    readonly clusterId: string;
    readonly dbName: string;
    readonly host: string;
    readonly id: string;
    readonly mode: string;
    readonly name: string;
    readonly password: string;
    readonly port: number;
    readonly privateHost: string;
    readonly privateUri: string;
    readonly size: number;
    readonly uri: string;
    readonly user: string;
}
export function getDatabaseConnectionPoolOutput(args: GetDatabaseConnectionPoolOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDatabaseConnectionPoolResult> {
    return pulumi.output(args).apply((a: any) => getDatabaseConnectionPool(a, opts))
}

/**
 * A collection of arguments for invoking getDatabaseConnectionPool.
 */
export interface GetDatabaseConnectionPoolOutputArgs {
    clusterId: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    name: pulumi.Input<string>;
}
