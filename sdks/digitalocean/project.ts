// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Project extends pulumi.CustomResource {
    /**
     * Get an existing Project resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProjectState, opts?: pulumi.CustomResourceOptions): Project {
        return new Project(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'digitalocean:index/project:Project';

    /**
     * Returns true if the given object is an instance of Project.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Project {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Project.__pulumiType;
    }

    /**
     * the date and time when the project was created, (ISO8601)
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * the description of the project
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * the environment of the project's resources
     */
    public readonly environment!: pulumi.Output<string | undefined>;
    /**
     * determine if the project is the default or not.
     */
    public readonly isDefault!: pulumi.Output<boolean | undefined>;
    /**
     * the human-readable name for the project
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * the id of the project owner.
     */
    public /*out*/ readonly ownerId!: pulumi.Output<number>;
    /**
     * the unique universal identifier of the project owner.
     */
    public /*out*/ readonly ownerUuid!: pulumi.Output<string>;
    /**
     * the purpose of the project
     */
    public readonly purpose!: pulumi.Output<string | undefined>;
    /**
     * the resources associated with the project
     */
    public readonly resources!: pulumi.Output<string[]>;
    public readonly timeouts!: pulumi.Output<outputs.ProjectTimeouts | undefined>;
    /**
     * the date and time when the project was last updated, (ISO8601)
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;

    /**
     * Create a Project resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ProjectArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProjectArgs | ProjectState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ProjectState | undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["environment"] = state ? state.environment : undefined;
            resourceInputs["isDefault"] = state ? state.isDefault : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["ownerId"] = state ? state.ownerId : undefined;
            resourceInputs["ownerUuid"] = state ? state.ownerUuid : undefined;
            resourceInputs["purpose"] = state ? state.purpose : undefined;
            resourceInputs["resources"] = state ? state.resources : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
        } else {
            const args = argsOrState as ProjectArgs | undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["environment"] = args ? args.environment : undefined;
            resourceInputs["isDefault"] = args ? args.isDefault : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["purpose"] = args ? args.purpose : undefined;
            resourceInputs["resources"] = args ? args.resources : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["ownerId"] = undefined /*out*/;
            resourceInputs["ownerUuid"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Project.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Project resources.
 */
export interface ProjectState {
    /**
     * the date and time when the project was created, (ISO8601)
     */
    createdAt?: pulumi.Input<string>;
    /**
     * the description of the project
     */
    description?: pulumi.Input<string>;
    /**
     * the environment of the project's resources
     */
    environment?: pulumi.Input<string>;
    /**
     * determine if the project is the default or not.
     */
    isDefault?: pulumi.Input<boolean>;
    /**
     * the human-readable name for the project
     */
    name?: pulumi.Input<string>;
    /**
     * the id of the project owner.
     */
    ownerId?: pulumi.Input<number>;
    /**
     * the unique universal identifier of the project owner.
     */
    ownerUuid?: pulumi.Input<string>;
    /**
     * the purpose of the project
     */
    purpose?: pulumi.Input<string>;
    /**
     * the resources associated with the project
     */
    resources?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.ProjectTimeouts>;
    /**
     * the date and time when the project was last updated, (ISO8601)
     */
    updatedAt?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Project resource.
 */
export interface ProjectArgs {
    /**
     * the description of the project
     */
    description?: pulumi.Input<string>;
    /**
     * the environment of the project's resources
     */
    environment?: pulumi.Input<string>;
    /**
     * determine if the project is the default or not.
     */
    isDefault?: pulumi.Input<boolean>;
    /**
     * the human-readable name for the project
     */
    name?: pulumi.Input<string>;
    /**
     * the purpose of the project
     */
    purpose?: pulumi.Input<string>;
    /**
     * the resources associated with the project
     */
    resources?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.ProjectTimeouts>;
}
