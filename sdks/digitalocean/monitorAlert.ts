// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class MonitorAlert extends pulumi.CustomResource {
    /**
     * Get an existing MonitorAlert resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MonitorAlertState, opts?: pulumi.CustomResourceOptions): MonitorAlert {
        return new MonitorAlert(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'digitalocean:index/monitorAlert:MonitorAlert';

    /**
     * Returns true if the given object is an instance of MonitorAlert.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MonitorAlert {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MonitorAlert.__pulumiType;
    }

    /**
     * List with details how to notify about the alert. Support for Slack or email.
     */
    public readonly alerts!: pulumi.Output<outputs.MonitorAlertAlerts>;
    /**
     * The comparison operator to use for value
     */
    public readonly compare!: pulumi.Output<string>;
    /**
     * Description of the alert policy
     */
    public readonly description!: pulumi.Output<string>;
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * The droplets to apply the alert policy to
     */
    public readonly entities!: pulumi.Output<string[] | undefined>;
    public readonly tags!: pulumi.Output<string[] | undefined>;
    public readonly type!: pulumi.Output<string>;
    public /*out*/ readonly uuid!: pulumi.Output<string>;
    public readonly value!: pulumi.Output<number>;
    public readonly window!: pulumi.Output<string>;

    /**
     * Create a MonitorAlert resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MonitorAlertArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MonitorAlertArgs | MonitorAlertState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MonitorAlertState | undefined;
            resourceInputs["alerts"] = state ? state.alerts : undefined;
            resourceInputs["compare"] = state ? state.compare : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["entities"] = state ? state.entities : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
            resourceInputs["value"] = state ? state.value : undefined;
            resourceInputs["window"] = state ? state.window : undefined;
        } else {
            const args = argsOrState as MonitorAlertArgs | undefined;
            if ((!args || args.alerts === undefined) && !opts.urn) {
                throw new Error("Missing required property 'alerts'");
            }
            if ((!args || args.compare === undefined) && !opts.urn) {
                throw new Error("Missing required property 'compare'");
            }
            if ((!args || args.description === undefined) && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            if ((!args || args.value === undefined) && !opts.urn) {
                throw new Error("Missing required property 'value'");
            }
            if ((!args || args.window === undefined) && !opts.urn) {
                throw new Error("Missing required property 'window'");
            }
            resourceInputs["alerts"] = args ? args.alerts : undefined;
            resourceInputs["compare"] = args ? args.compare : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["entities"] = args ? args.entities : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["value"] = args ? args.value : undefined;
            resourceInputs["window"] = args ? args.window : undefined;
            resourceInputs["uuid"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MonitorAlert.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering MonitorAlert resources.
 */
export interface MonitorAlertState {
    /**
     * List with details how to notify about the alert. Support for Slack or email.
     */
    alerts?: pulumi.Input<inputs.MonitorAlertAlerts>;
    /**
     * The comparison operator to use for value
     */
    compare?: pulumi.Input<string>;
    /**
     * Description of the alert policy
     */
    description?: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    /**
     * The droplets to apply the alert policy to
     */
    entities?: pulumi.Input<pulumi.Input<string>[]>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    type?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
    value?: pulumi.Input<number>;
    window?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a MonitorAlert resource.
 */
export interface MonitorAlertArgs {
    /**
     * List with details how to notify about the alert. Support for Slack or email.
     */
    alerts: pulumi.Input<inputs.MonitorAlertAlerts>;
    /**
     * The comparison operator to use for value
     */
    compare: pulumi.Input<string>;
    /**
     * Description of the alert policy
     */
    description: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    /**
     * The droplets to apply the alert policy to
     */
    entities?: pulumi.Input<pulumi.Input<string>[]>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    type: pulumi.Input<string>;
    value: pulumi.Input<number>;
    window: pulumi.Input<string>;
}
