// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class DatabaseRedisConfig extends pulumi.CustomResource {
    /**
     * Get an existing DatabaseRedisConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DatabaseRedisConfigState, opts?: pulumi.CustomResourceOptions): DatabaseRedisConfig {
        return new DatabaseRedisConfig(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'digitalocean:index/databaseRedisConfig:DatabaseRedisConfig';

    /**
     * Returns true if the given object is an instance of DatabaseRedisConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DatabaseRedisConfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DatabaseRedisConfig.__pulumiType;
    }

    public readonly aclChannelsDefault!: pulumi.Output<string>;
    public readonly clusterId!: pulumi.Output<string>;
    public readonly ioThreads!: pulumi.Output<number>;
    public readonly lfuDecayTime!: pulumi.Output<number>;
    public readonly lfuLogFactor!: pulumi.Output<number>;
    public readonly maxmemoryPolicy!: pulumi.Output<string>;
    public readonly notifyKeyspaceEvents!: pulumi.Output<string>;
    public readonly numberOfDatabases!: pulumi.Output<number>;
    public readonly persistence!: pulumi.Output<string>;
    public readonly pubsubClientOutputBufferLimit!: pulumi.Output<number>;
    public readonly ssl!: pulumi.Output<boolean>;
    public readonly timeout!: pulumi.Output<number>;

    /**
     * Create a DatabaseRedisConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatabaseRedisConfigArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DatabaseRedisConfigArgs | DatabaseRedisConfigState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DatabaseRedisConfigState | undefined;
            resourceInputs["aclChannelsDefault"] = state ? state.aclChannelsDefault : undefined;
            resourceInputs["clusterId"] = state ? state.clusterId : undefined;
            resourceInputs["ioThreads"] = state ? state.ioThreads : undefined;
            resourceInputs["lfuDecayTime"] = state ? state.lfuDecayTime : undefined;
            resourceInputs["lfuLogFactor"] = state ? state.lfuLogFactor : undefined;
            resourceInputs["maxmemoryPolicy"] = state ? state.maxmemoryPolicy : undefined;
            resourceInputs["notifyKeyspaceEvents"] = state ? state.notifyKeyspaceEvents : undefined;
            resourceInputs["numberOfDatabases"] = state ? state.numberOfDatabases : undefined;
            resourceInputs["persistence"] = state ? state.persistence : undefined;
            resourceInputs["pubsubClientOutputBufferLimit"] = state ? state.pubsubClientOutputBufferLimit : undefined;
            resourceInputs["ssl"] = state ? state.ssl : undefined;
            resourceInputs["timeout"] = state ? state.timeout : undefined;
        } else {
            const args = argsOrState as DatabaseRedisConfigArgs | undefined;
            if ((!args || args.clusterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            resourceInputs["aclChannelsDefault"] = args ? args.aclChannelsDefault : undefined;
            resourceInputs["clusterId"] = args ? args.clusterId : undefined;
            resourceInputs["ioThreads"] = args ? args.ioThreads : undefined;
            resourceInputs["lfuDecayTime"] = args ? args.lfuDecayTime : undefined;
            resourceInputs["lfuLogFactor"] = args ? args.lfuLogFactor : undefined;
            resourceInputs["maxmemoryPolicy"] = args ? args.maxmemoryPolicy : undefined;
            resourceInputs["notifyKeyspaceEvents"] = args ? args.notifyKeyspaceEvents : undefined;
            resourceInputs["numberOfDatabases"] = args ? args.numberOfDatabases : undefined;
            resourceInputs["persistence"] = args ? args.persistence : undefined;
            resourceInputs["pubsubClientOutputBufferLimit"] = args ? args.pubsubClientOutputBufferLimit : undefined;
            resourceInputs["ssl"] = args ? args.ssl : undefined;
            resourceInputs["timeout"] = args ? args.timeout : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DatabaseRedisConfig.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DatabaseRedisConfig resources.
 */
export interface DatabaseRedisConfigState {
    aclChannelsDefault?: pulumi.Input<string>;
    clusterId?: pulumi.Input<string>;
    ioThreads?: pulumi.Input<number>;
    lfuDecayTime?: pulumi.Input<number>;
    lfuLogFactor?: pulumi.Input<number>;
    maxmemoryPolicy?: pulumi.Input<string>;
    notifyKeyspaceEvents?: pulumi.Input<string>;
    numberOfDatabases?: pulumi.Input<number>;
    persistence?: pulumi.Input<string>;
    pubsubClientOutputBufferLimit?: pulumi.Input<number>;
    ssl?: pulumi.Input<boolean>;
    timeout?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a DatabaseRedisConfig resource.
 */
export interface DatabaseRedisConfigArgs {
    aclChannelsDefault?: pulumi.Input<string>;
    clusterId: pulumi.Input<string>;
    ioThreads?: pulumi.Input<number>;
    lfuDecayTime?: pulumi.Input<number>;
    lfuLogFactor?: pulumi.Input<number>;
    maxmemoryPolicy?: pulumi.Input<string>;
    notifyKeyspaceEvents?: pulumi.Input<string>;
    numberOfDatabases?: pulumi.Input<number>;
    persistence?: pulumi.Input<string>;
    pubsubClientOutputBufferLimit?: pulumi.Input<number>;
    ssl?: pulumi.Input<boolean>;
    timeout?: pulumi.Input<number>;
}
