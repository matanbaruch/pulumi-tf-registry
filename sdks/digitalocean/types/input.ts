// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface AppDedicatedIp {
    /**
     * The ID of the dedicated egress IP.
     */
    id?: pulumi.Input<string>;
    /**
     * The IP address of the dedicated egress IP.
     */
    ip?: pulumi.Input<string>;
    /**
     * The status of the dedicated egress IP: 'UNKNOWN', 'ASSIGNING', 'ASSIGNED', or 'REMOVED'
     */
    status?: pulumi.Input<string>;
}

export interface AppSpec {
    alerts?: pulumi.Input<pulumi.Input<inputs.AppSpecAlert>[]>;
    databases?: pulumi.Input<pulumi.Input<inputs.AppSpecDatabase>[]>;
    domain?: pulumi.Input<pulumi.Input<inputs.AppSpecDomain>[]>;
    /**
     * @deprecated Deprecated
     */
    domains?: pulumi.Input<pulumi.Input<string>[]>;
    egresses?: pulumi.Input<pulumi.Input<inputs.AppSpecEgress>[]>;
    envs?: pulumi.Input<pulumi.Input<inputs.AppSpecEnv>[]>;
    /**
     * List of features which is applied to the app
     */
    features?: pulumi.Input<pulumi.Input<string>[]>;
    functions?: pulumi.Input<pulumi.Input<inputs.AppSpecFunction>[]>;
    ingress?: pulumi.Input<inputs.AppSpecIngress>;
    jobs?: pulumi.Input<pulumi.Input<inputs.AppSpecJob>[]>;
    /**
     * The name of the app. Must be unique across all apps in the same account.
     */
    name: pulumi.Input<string>;
    /**
     * The slug for the DigitalOcean data center region hosting the app
     */
    region?: pulumi.Input<string>;
    services?: pulumi.Input<pulumi.Input<inputs.AppSpecService>[]>;
    staticSites?: pulumi.Input<pulumi.Input<inputs.AppSpecStaticSite>[]>;
    workers?: pulumi.Input<pulumi.Input<inputs.AppSpecWorker>[]>;
}

export interface AppSpecAlert {
    disabled?: pulumi.Input<boolean>;
    rule: pulumi.Input<string>;
}

export interface AppSpecDatabase {
    /**
     * The name of the underlying DigitalOcean DBaaS cluster. This is required for production databases. For dev databases, if cluster_name is not set, a new cluster will be provisioned.
     */
    clusterName?: pulumi.Input<string>;
    /**
     * The name of the MySQL or PostgreSQL database to configure.
     */
    dbName?: pulumi.Input<string>;
    /**
     * The name of the MySQL or PostgreSQL user to configure.
     */
    dbUser?: pulumi.Input<string>;
    /**
     * The database engine to use.
     */
    engine?: pulumi.Input<string>;
    /**
     * The name of the component
     */
    name?: pulumi.Input<string>;
    /**
     * Whether this is a production or dev database.
     */
    production?: pulumi.Input<boolean>;
    /**
     * The version of the database engine.
     */
    version?: pulumi.Input<string>;
}

export interface AppSpecDomain {
    /**
     * The hostname for the domain.
     */
    name: pulumi.Input<string>;
    /**
     * The type of the domain.
     */
    type?: pulumi.Input<string>;
    /**
     * Indicates whether the domain includes all sub-domains, in addition to the given domain.
     */
    wildcard?: pulumi.Input<boolean>;
    /**
     * If the domain uses DigitalOcean DNS and you would like App Platform to automatically manage it for you, set this to the name of the domain on your account.
     */
    zone?: pulumi.Input<string>;
}

export interface AppSpecEgress {
    /**
     * The app egress type.
     */
    type?: pulumi.Input<string>;
}

export interface AppSpecEnv {
    /**
     * The name of the environment variable.
     */
    key?: pulumi.Input<string>;
    /**
     * The visibility scope of the environment variable.
     */
    scope?: pulumi.Input<string>;
    /**
     * The type of the environment variable.
     */
    type?: pulumi.Input<string>;
    /**
     * The value of the environment variable.
     */
    value?: pulumi.Input<string>;
}

export interface AppSpecFunction {
    /**
     * Alert policies for the app component
     */
    alerts?: pulumi.Input<pulumi.Input<inputs.AppSpecFunctionAlert>[]>;
    /**
     * @deprecated Deprecated
     */
    cors?: pulumi.Input<inputs.AppSpecFunctionCors>;
    envs?: pulumi.Input<pulumi.Input<inputs.AppSpecFunctionEnv>[]>;
    git?: pulumi.Input<inputs.AppSpecFunctionGit>;
    github?: pulumi.Input<inputs.AppSpecFunctionGithub>;
    gitlab?: pulumi.Input<inputs.AppSpecFunctionGitlab>;
    /**
     * Logs
     */
    logDestinations?: pulumi.Input<pulumi.Input<inputs.AppSpecFunctionLogDestination>[]>;
    /**
     * The name of the component
     */
    name: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    routes?: pulumi.Input<pulumi.Input<inputs.AppSpecFunctionRoute>[]>;
    /**
     * An optional path to the working directory to use for the build.
     */
    sourceDir?: pulumi.Input<string>;
}

export interface AppSpecFunctionAlert {
    disabled?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    rule: pulumi.Input<string>;
    value: pulumi.Input<number>;
    window: pulumi.Input<string>;
}

export interface AppSpecFunctionCors {
    /**
     * Whether browsers should expose the response to the client-side JavaScript code when the requestâ€™s credentials mode is `include`. This configures the Access-Control-Allow-Credentials header.
     */
    allowCredentials?: pulumi.Input<boolean>;
    /**
     * The set of allowed HTTP request headers. This configures the Access-Control-Allow-Headers header.
     */
    allowHeaders?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The set of allowed HTTP methods. This configures the Access-Control-Allow-Methods header.
     */
    allowMethods?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The set of allowed CORS origins. This configures the Access-Control-Allow-Origin header.
     */
    allowOrigins?: pulumi.Input<inputs.AppSpecFunctionCorsAllowOrigins>;
    /**
     * The set of HTTP response headers that browsers are allowed to access. This configures the Access-Control-Expose-Headers header.
     */
    exposeHeaders?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the Access-Control-Max-Age header. Example: `5h30m`.
     */
    maxAge?: pulumi.Input<string>;
}

export interface AppSpecFunctionCorsAllowOrigins {
    /**
     * Exact string match.
     */
    exact?: pulumi.Input<string>;
    /**
     * Prefix-based match.
     *
     * @deprecated Deprecated
     */
    prefix?: pulumi.Input<string>;
    /**
     * RE2 style regex-based match.
     */
    regex?: pulumi.Input<string>;
}

export interface AppSpecFunctionEnv {
    /**
     * The name of the environment variable.
     */
    key?: pulumi.Input<string>;
    /**
     * The visibility scope of the environment variable.
     */
    scope?: pulumi.Input<string>;
    /**
     * The type of the environment variable.
     */
    type?: pulumi.Input<string>;
    /**
     * The value of the environment variable.
     */
    value?: pulumi.Input<string>;
}

export interface AppSpecFunctionGit {
    /**
     * The name of the branch to use.
     */
    branch?: pulumi.Input<string>;
    /**
     * The clone URL of the repo.
     */
    repoCloneUrl?: pulumi.Input<string>;
}

export interface AppSpecFunctionGithub {
    /**
     * The name of the branch to use.
     */
    branch?: pulumi.Input<string>;
    /**
     * Whether to automatically deploy new commits made to the repo
     */
    deployOnPush?: pulumi.Input<boolean>;
    /**
     * The name of the repo in the format `owner/repo`.
     */
    repo?: pulumi.Input<string>;
}

export interface AppSpecFunctionGitlab {
    /**
     * The name of the branch to use.
     */
    branch?: pulumi.Input<string>;
    /**
     * Whether to automatically deploy new commits made to the repo
     */
    deployOnPush?: pulumi.Input<boolean>;
    /**
     * The name of the repo in the format `owner/repo`.
     */
    repo?: pulumi.Input<string>;
}

export interface AppSpecFunctionLogDestination {
    /**
     * Datadog configuration.
     */
    datadog?: pulumi.Input<inputs.AppSpecFunctionLogDestinationDatadog>;
    /**
     * Logtail configuration.
     */
    logtail?: pulumi.Input<inputs.AppSpecFunctionLogDestinationLogtail>;
    /**
     * Name of the log destination
     */
    name: pulumi.Input<string>;
    /**
     * Papertrail configuration.
     */
    papertrail?: pulumi.Input<inputs.AppSpecFunctionLogDestinationPapertrail>;
}

export interface AppSpecFunctionLogDestinationDatadog {
    /**
     * Datadog API key.
     */
    apiKey: pulumi.Input<string>;
    /**
     * Datadog HTTP log intake endpoint.
     */
    endpoint?: pulumi.Input<string>;
}

export interface AppSpecFunctionLogDestinationLogtail {
    /**
     * Logtail token.
     */
    token: pulumi.Input<string>;
}

export interface AppSpecFunctionLogDestinationPapertrail {
    /**
     * Papertrail syslog endpoint.
     */
    endpoint: pulumi.Input<string>;
}

export interface AppSpecFunctionRoute {
    /**
     * Path specifies an route by HTTP path prefix. Paths must start with / and must be unique within the app.
     */
    path?: pulumi.Input<string>;
    /**
     * An optional flag to preserve the path that is forwarded to the backend service.
     */
    preservePathPrefix?: pulumi.Input<boolean>;
}

export interface AppSpecIngress {
    rules?: pulumi.Input<pulumi.Input<inputs.AppSpecIngressRule>[]>;
}

export interface AppSpecIngressRule {
    component?: pulumi.Input<inputs.AppSpecIngressRuleComponent>;
    cors?: pulumi.Input<inputs.AppSpecIngressRuleCors>;
    match?: pulumi.Input<inputs.AppSpecIngressRuleMatch>;
    redirect?: pulumi.Input<inputs.AppSpecIngressRuleRedirect>;
}

export interface AppSpecIngressRuleComponent {
    name?: pulumi.Input<string>;
    preservePathPrefix?: pulumi.Input<boolean>;
    rewrite?: pulumi.Input<string>;
}

export interface AppSpecIngressRuleCors {
    /**
     * Whether browsers should expose the response to the client-side JavaScript code when the requestâ€™s credentials mode is `include`. This configures the Access-Control-Allow-Credentials header.
     */
    allowCredentials?: pulumi.Input<boolean>;
    /**
     * The set of allowed HTTP request headers. This configures the Access-Control-Allow-Headers header.
     */
    allowHeaders?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The set of allowed HTTP methods. This configures the Access-Control-Allow-Methods header.
     */
    allowMethods?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The set of allowed CORS origins. This configures the Access-Control-Allow-Origin header.
     */
    allowOrigins?: pulumi.Input<inputs.AppSpecIngressRuleCorsAllowOrigins>;
    /**
     * The set of HTTP response headers that browsers are allowed to access. This configures the Access-Control-Expose-Headers header.
     */
    exposeHeaders?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the Access-Control-Max-Age header. Example: `5h30m`.
     */
    maxAge?: pulumi.Input<string>;
}

export interface AppSpecIngressRuleCorsAllowOrigins {
    /**
     * Exact string match.
     */
    exact?: pulumi.Input<string>;
    /**
     * Prefix-based match.
     *
     * @deprecated Deprecated
     */
    prefix?: pulumi.Input<string>;
    /**
     * RE2 style regex-based match.
     */
    regex?: pulumi.Input<string>;
}

export interface AppSpecIngressRuleMatch {
    path?: pulumi.Input<inputs.AppSpecIngressRuleMatchPath>;
}

export interface AppSpecIngressRuleMatchPath {
    prefix?: pulumi.Input<string>;
}

export interface AppSpecIngressRuleRedirect {
    authority?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    redirectCode?: pulumi.Input<number>;
    scheme?: pulumi.Input<string>;
    uri?: pulumi.Input<string>;
}

export interface AppSpecJob {
    /**
     * Alert policies for the app component
     */
    alerts?: pulumi.Input<pulumi.Input<inputs.AppSpecJobAlert>[]>;
    /**
     * An optional build command to run while building this component from source.
     */
    buildCommand?: pulumi.Input<string>;
    /**
     * The path to a Dockerfile relative to the root of the repo. If set, overrides usage of buildpacks.
     */
    dockerfilePath?: pulumi.Input<string>;
    /**
     * An environment slug describing the type of this app.
     */
    environmentSlug?: pulumi.Input<string>;
    envs?: pulumi.Input<pulumi.Input<inputs.AppSpecJobEnv>[]>;
    git?: pulumi.Input<inputs.AppSpecJobGit>;
    github?: pulumi.Input<inputs.AppSpecJobGithub>;
    gitlab?: pulumi.Input<inputs.AppSpecJobGitlab>;
    image?: pulumi.Input<inputs.AppSpecJobImage>;
    /**
     * The amount of instances that this component should be scaled to.
     */
    instanceCount?: pulumi.Input<number>;
    /**
     * The instance size to use for this component.
     */
    instanceSizeSlug?: pulumi.Input<string>;
    /**
     * The type of job and when it will be run during the deployment process.
     */
    kind?: pulumi.Input<string>;
    /**
     * Logs
     */
    logDestinations?: pulumi.Input<pulumi.Input<inputs.AppSpecJobLogDestination>[]>;
    /**
     * The name of the component
     */
    name: pulumi.Input<string>;
    /**
     * An optional run command to override the component's default.
     */
    runCommand?: pulumi.Input<string>;
    /**
     * An optional path to the working directory to use for the build.
     */
    sourceDir?: pulumi.Input<string>;
}

export interface AppSpecJobAlert {
    disabled?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    rule: pulumi.Input<string>;
    value: pulumi.Input<number>;
    window: pulumi.Input<string>;
}

export interface AppSpecJobEnv {
    /**
     * The name of the environment variable.
     */
    key?: pulumi.Input<string>;
    /**
     * The visibility scope of the environment variable.
     */
    scope?: pulumi.Input<string>;
    /**
     * The type of the environment variable.
     */
    type?: pulumi.Input<string>;
    /**
     * The value of the environment variable.
     */
    value?: pulumi.Input<string>;
}

export interface AppSpecJobGit {
    /**
     * The name of the branch to use.
     */
    branch?: pulumi.Input<string>;
    /**
     * The clone URL of the repo.
     */
    repoCloneUrl?: pulumi.Input<string>;
}

export interface AppSpecJobGithub {
    /**
     * The name of the branch to use.
     */
    branch?: pulumi.Input<string>;
    /**
     * Whether to automatically deploy new commits made to the repo
     */
    deployOnPush?: pulumi.Input<boolean>;
    /**
     * The name of the repo in the format `owner/repo`.
     */
    repo?: pulumi.Input<string>;
}

export interface AppSpecJobGitlab {
    /**
     * The name of the branch to use.
     */
    branch?: pulumi.Input<string>;
    /**
     * Whether to automatically deploy new commits made to the repo
     */
    deployOnPush?: pulumi.Input<boolean>;
    /**
     * The name of the repo in the format `owner/repo`.
     */
    repo?: pulumi.Input<string>;
}

export interface AppSpecJobImage {
    /**
     * Configures automatically deploying images pushed to DOCR.
     */
    deployOnPushes?: pulumi.Input<pulumi.Input<inputs.AppSpecJobImageDeployOnPush>[]>;
    /**
     * The registry name. Must be left empty for the DOCR registry type.
     */
    registry?: pulumi.Input<string>;
    /**
     * Access credentials for third-party registries
     */
    registryCredentials?: pulumi.Input<string>;
    /**
     * The registry type.
     */
    registryType: pulumi.Input<string>;
    /**
     * The repository name.
     */
    repository: pulumi.Input<string>;
    /**
     * The repository tag. Defaults to latest if not provided.
     */
    tag?: pulumi.Input<string>;
}

export interface AppSpecJobImageDeployOnPush {
    /**
     * Whether to automatically deploy images pushed to DOCR.
     */
    enabled?: pulumi.Input<boolean>;
}

export interface AppSpecJobLogDestination {
    /**
     * Datadog configuration.
     */
    datadog?: pulumi.Input<inputs.AppSpecJobLogDestinationDatadog>;
    /**
     * Logtail configuration.
     */
    logtail?: pulumi.Input<inputs.AppSpecJobLogDestinationLogtail>;
    /**
     * Name of the log destination
     */
    name: pulumi.Input<string>;
    /**
     * Papertrail configuration.
     */
    papertrail?: pulumi.Input<inputs.AppSpecJobLogDestinationPapertrail>;
}

export interface AppSpecJobLogDestinationDatadog {
    /**
     * Datadog API key.
     */
    apiKey: pulumi.Input<string>;
    /**
     * Datadog HTTP log intake endpoint.
     */
    endpoint?: pulumi.Input<string>;
}

export interface AppSpecJobLogDestinationLogtail {
    /**
     * Logtail token.
     */
    token: pulumi.Input<string>;
}

export interface AppSpecJobLogDestinationPapertrail {
    /**
     * Papertrail syslog endpoint.
     */
    endpoint: pulumi.Input<string>;
}

export interface AppSpecService {
    /**
     * Alert policies for the app component
     */
    alerts?: pulumi.Input<pulumi.Input<inputs.AppSpecServiceAlert>[]>;
    autoscaling?: pulumi.Input<inputs.AppSpecServiceAutoscaling>;
    /**
     * An optional build command to run while building this component from source.
     */
    buildCommand?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    cors?: pulumi.Input<inputs.AppSpecServiceCors>;
    /**
     * The path to a Dockerfile relative to the root of the repo. If set, overrides usage of buildpacks.
     */
    dockerfilePath?: pulumi.Input<string>;
    /**
     * An environment slug describing the type of this app.
     */
    environmentSlug?: pulumi.Input<string>;
    envs?: pulumi.Input<pulumi.Input<inputs.AppSpecServiceEnv>[]>;
    git?: pulumi.Input<inputs.AppSpecServiceGit>;
    github?: pulumi.Input<inputs.AppSpecServiceGithub>;
    gitlab?: pulumi.Input<inputs.AppSpecServiceGitlab>;
    healthCheck?: pulumi.Input<inputs.AppSpecServiceHealthCheck>;
    /**
     * The internal port on which this service's run command will listen.
     */
    httpPort?: pulumi.Input<number>;
    image?: pulumi.Input<inputs.AppSpecServiceImage>;
    /**
     * The amount of instances that this component should be scaled to.
     */
    instanceCount?: pulumi.Input<number>;
    /**
     * The instance size to use for this component.
     */
    instanceSizeSlug?: pulumi.Input<string>;
    internalPorts?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Logs
     */
    logDestinations?: pulumi.Input<pulumi.Input<inputs.AppSpecServiceLogDestination>[]>;
    /**
     * The name of the component
     */
    name: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    routes?: pulumi.Input<pulumi.Input<inputs.AppSpecServiceRoute>[]>;
    /**
     * An optional run command to override the component's default.
     */
    runCommand?: pulumi.Input<string>;
    /**
     * An optional path to the working directory to use for the build.
     */
    sourceDir?: pulumi.Input<string>;
}

export interface AppSpecServiceAlert {
    disabled?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    rule: pulumi.Input<string>;
    value: pulumi.Input<number>;
    window: pulumi.Input<string>;
}

export interface AppSpecServiceAutoscaling {
    /**
     * The maximum amount of instances for this component. Must be more than min_instance_count.
     */
    maxInstanceCount: pulumi.Input<number>;
    /**
     * The metrics that the component is scaled on.
     */
    metrics: pulumi.Input<inputs.AppSpecServiceAutoscalingMetrics>;
    /**
     * The minimum amount of instances for this component. Must be less than max_instance_count.
     */
    minInstanceCount: pulumi.Input<number>;
}

export interface AppSpecServiceAutoscalingMetrics {
    /**
     * Settings for scaling the component based on CPU utilization.
     */
    cpu?: pulumi.Input<inputs.AppSpecServiceAutoscalingMetricsCpu>;
}

export interface AppSpecServiceAutoscalingMetricsCpu {
    /**
     * The average target CPU utilization for the component.
     */
    percent: pulumi.Input<number>;
}

export interface AppSpecServiceCors {
    /**
     * Whether browsers should expose the response to the client-side JavaScript code when the requestâ€™s credentials mode is `include`. This configures the Access-Control-Allow-Credentials header.
     */
    allowCredentials?: pulumi.Input<boolean>;
    /**
     * The set of allowed HTTP request headers. This configures the Access-Control-Allow-Headers header.
     */
    allowHeaders?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The set of allowed HTTP methods. This configures the Access-Control-Allow-Methods header.
     */
    allowMethods?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The set of allowed CORS origins. This configures the Access-Control-Allow-Origin header.
     */
    allowOrigins?: pulumi.Input<inputs.AppSpecServiceCorsAllowOrigins>;
    /**
     * The set of HTTP response headers that browsers are allowed to access. This configures the Access-Control-Expose-Headers header.
     */
    exposeHeaders?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the Access-Control-Max-Age header. Example: `5h30m`.
     */
    maxAge?: pulumi.Input<string>;
}

export interface AppSpecServiceCorsAllowOrigins {
    /**
     * Exact string match.
     */
    exact?: pulumi.Input<string>;
    /**
     * Prefix-based match.
     *
     * @deprecated Deprecated
     */
    prefix?: pulumi.Input<string>;
    /**
     * RE2 style regex-based match.
     */
    regex?: pulumi.Input<string>;
}

export interface AppSpecServiceEnv {
    /**
     * The name of the environment variable.
     */
    key?: pulumi.Input<string>;
    /**
     * The visibility scope of the environment variable.
     */
    scope?: pulumi.Input<string>;
    /**
     * The type of the environment variable.
     */
    type?: pulumi.Input<string>;
    /**
     * The value of the environment variable.
     */
    value?: pulumi.Input<string>;
}

export interface AppSpecServiceGit {
    /**
     * The name of the branch to use.
     */
    branch?: pulumi.Input<string>;
    /**
     * The clone URL of the repo.
     */
    repoCloneUrl?: pulumi.Input<string>;
}

export interface AppSpecServiceGithub {
    /**
     * The name of the branch to use.
     */
    branch?: pulumi.Input<string>;
    /**
     * Whether to automatically deploy new commits made to the repo
     */
    deployOnPush?: pulumi.Input<boolean>;
    /**
     * The name of the repo in the format `owner/repo`.
     */
    repo?: pulumi.Input<string>;
}

export interface AppSpecServiceGitlab {
    /**
     * The name of the branch to use.
     */
    branch?: pulumi.Input<string>;
    /**
     * Whether to automatically deploy new commits made to the repo
     */
    deployOnPush?: pulumi.Input<boolean>;
    /**
     * The name of the repo in the format `owner/repo`.
     */
    repo?: pulumi.Input<string>;
}

export interface AppSpecServiceHealthCheck {
    /**
     * The number of failed health checks before considered unhealthy.
     */
    failureThreshold?: pulumi.Input<number>;
    /**
     * The route path used for the HTTP health check ping.
     */
    httpPath?: pulumi.Input<string>;
    /**
     * The number of seconds to wait before beginning health checks.
     */
    initialDelaySeconds?: pulumi.Input<number>;
    /**
     * The number of seconds to wait between health checks.
     */
    periodSeconds?: pulumi.Input<number>;
    /**
     * The port on which the health check will be performed. If not set, the health check will be performed on the component's http_port.
     */
    port?: pulumi.Input<number>;
    /**
     * The number of successful health checks before considered healthy.
     */
    successThreshold?: pulumi.Input<number>;
    /**
     * The number of seconds after which the check times out.
     */
    timeoutSeconds?: pulumi.Input<number>;
}

export interface AppSpecServiceImage {
    /**
     * Configures automatically deploying images pushed to DOCR.
     */
    deployOnPushes?: pulumi.Input<pulumi.Input<inputs.AppSpecServiceImageDeployOnPush>[]>;
    /**
     * The registry name. Must be left empty for the DOCR registry type.
     */
    registry?: pulumi.Input<string>;
    /**
     * Access credentials for third-party registries
     */
    registryCredentials?: pulumi.Input<string>;
    /**
     * The registry type.
     */
    registryType: pulumi.Input<string>;
    /**
     * The repository name.
     */
    repository: pulumi.Input<string>;
    /**
     * The repository tag. Defaults to latest if not provided.
     */
    tag?: pulumi.Input<string>;
}

export interface AppSpecServiceImageDeployOnPush {
    /**
     * Whether to automatically deploy images pushed to DOCR.
     */
    enabled?: pulumi.Input<boolean>;
}

export interface AppSpecServiceLogDestination {
    /**
     * Datadog configuration.
     */
    datadog?: pulumi.Input<inputs.AppSpecServiceLogDestinationDatadog>;
    /**
     * Logtail configuration.
     */
    logtail?: pulumi.Input<inputs.AppSpecServiceLogDestinationLogtail>;
    /**
     * Name of the log destination
     */
    name: pulumi.Input<string>;
    /**
     * Papertrail configuration.
     */
    papertrail?: pulumi.Input<inputs.AppSpecServiceLogDestinationPapertrail>;
}

export interface AppSpecServiceLogDestinationDatadog {
    /**
     * Datadog API key.
     */
    apiKey: pulumi.Input<string>;
    /**
     * Datadog HTTP log intake endpoint.
     */
    endpoint?: pulumi.Input<string>;
}

export interface AppSpecServiceLogDestinationLogtail {
    /**
     * Logtail token.
     */
    token: pulumi.Input<string>;
}

export interface AppSpecServiceLogDestinationPapertrail {
    /**
     * Papertrail syslog endpoint.
     */
    endpoint: pulumi.Input<string>;
}

export interface AppSpecServiceRoute {
    /**
     * Path specifies an route by HTTP path prefix. Paths must start with / and must be unique within the app.
     */
    path?: pulumi.Input<string>;
    /**
     * An optional flag to preserve the path that is forwarded to the backend service.
     */
    preservePathPrefix?: pulumi.Input<boolean>;
}

export interface AppSpecStaticSite {
    /**
     * An optional build command to run while building this component from source.
     */
    buildCommand?: pulumi.Input<string>;
    /**
     * The name of the document to use as the fallback for any requests to documents that are not found when serving this static site.
     */
    catchallDocument?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    cors?: pulumi.Input<inputs.AppSpecStaticSiteCors>;
    /**
     * The path to a Dockerfile relative to the root of the repo. If set, overrides usage of buildpacks.
     */
    dockerfilePath?: pulumi.Input<string>;
    /**
     * An environment slug describing the type of this app.
     */
    environmentSlug?: pulumi.Input<string>;
    envs?: pulumi.Input<pulumi.Input<inputs.AppSpecStaticSiteEnv>[]>;
    /**
     * The name of the error document to use when serving this static site.
     */
    errorDocument?: pulumi.Input<string>;
    git?: pulumi.Input<inputs.AppSpecStaticSiteGit>;
    github?: pulumi.Input<inputs.AppSpecStaticSiteGithub>;
    gitlab?: pulumi.Input<inputs.AppSpecStaticSiteGitlab>;
    /**
     * The name of the index document to use when serving this static site.
     */
    indexDocument?: pulumi.Input<string>;
    /**
     * The name of the component
     */
    name: pulumi.Input<string>;
    /**
     * An optional path to where the built assets will be located, relative to the build context. If not set, App Platform will automatically scan for these directory names: `_static`, `dist`, `public`.
     */
    outputDir?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    routes?: pulumi.Input<pulumi.Input<inputs.AppSpecStaticSiteRoute>[]>;
    /**
     * An optional path to the working directory to use for the build.
     */
    sourceDir?: pulumi.Input<string>;
}

export interface AppSpecStaticSiteCors {
    /**
     * Whether browsers should expose the response to the client-side JavaScript code when the requestâ€™s credentials mode is `include`. This configures the Access-Control-Allow-Credentials header.
     */
    allowCredentials?: pulumi.Input<boolean>;
    /**
     * The set of allowed HTTP request headers. This configures the Access-Control-Allow-Headers header.
     */
    allowHeaders?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The set of allowed HTTP methods. This configures the Access-Control-Allow-Methods header.
     */
    allowMethods?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The set of allowed CORS origins. This configures the Access-Control-Allow-Origin header.
     */
    allowOrigins?: pulumi.Input<inputs.AppSpecStaticSiteCorsAllowOrigins>;
    /**
     * The set of HTTP response headers that browsers are allowed to access. This configures the Access-Control-Expose-Headers header.
     */
    exposeHeaders?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * An optional duration specifying how long browsers can cache the results of a preflight request. This configures the Access-Control-Max-Age header. Example: `5h30m`.
     */
    maxAge?: pulumi.Input<string>;
}

export interface AppSpecStaticSiteCorsAllowOrigins {
    /**
     * Exact string match.
     */
    exact?: pulumi.Input<string>;
    /**
     * Prefix-based match.
     *
     * @deprecated Deprecated
     */
    prefix?: pulumi.Input<string>;
    /**
     * RE2 style regex-based match.
     */
    regex?: pulumi.Input<string>;
}

export interface AppSpecStaticSiteEnv {
    /**
     * The name of the environment variable.
     */
    key?: pulumi.Input<string>;
    /**
     * The visibility scope of the environment variable.
     */
    scope?: pulumi.Input<string>;
    /**
     * The type of the environment variable.
     */
    type?: pulumi.Input<string>;
    /**
     * The value of the environment variable.
     */
    value?: pulumi.Input<string>;
}

export interface AppSpecStaticSiteGit {
    /**
     * The name of the branch to use.
     */
    branch?: pulumi.Input<string>;
    /**
     * The clone URL of the repo.
     */
    repoCloneUrl?: pulumi.Input<string>;
}

export interface AppSpecStaticSiteGithub {
    /**
     * The name of the branch to use.
     */
    branch?: pulumi.Input<string>;
    /**
     * Whether to automatically deploy new commits made to the repo
     */
    deployOnPush?: pulumi.Input<boolean>;
    /**
     * The name of the repo in the format `owner/repo`.
     */
    repo?: pulumi.Input<string>;
}

export interface AppSpecStaticSiteGitlab {
    /**
     * The name of the branch to use.
     */
    branch?: pulumi.Input<string>;
    /**
     * Whether to automatically deploy new commits made to the repo
     */
    deployOnPush?: pulumi.Input<boolean>;
    /**
     * The name of the repo in the format `owner/repo`.
     */
    repo?: pulumi.Input<string>;
}

export interface AppSpecStaticSiteRoute {
    /**
     * Path specifies an route by HTTP path prefix. Paths must start with / and must be unique within the app.
     */
    path?: pulumi.Input<string>;
    /**
     * An optional flag to preserve the path that is forwarded to the backend service.
     */
    preservePathPrefix?: pulumi.Input<boolean>;
}

export interface AppSpecWorker {
    /**
     * Alert policies for the app component
     */
    alerts?: pulumi.Input<pulumi.Input<inputs.AppSpecWorkerAlert>[]>;
    /**
     * An optional build command to run while building this component from source.
     */
    buildCommand?: pulumi.Input<string>;
    /**
     * The path to a Dockerfile relative to the root of the repo. If set, overrides usage of buildpacks.
     */
    dockerfilePath?: pulumi.Input<string>;
    /**
     * An environment slug describing the type of this app.
     */
    environmentSlug?: pulumi.Input<string>;
    envs?: pulumi.Input<pulumi.Input<inputs.AppSpecWorkerEnv>[]>;
    git?: pulumi.Input<inputs.AppSpecWorkerGit>;
    github?: pulumi.Input<inputs.AppSpecWorkerGithub>;
    gitlab?: pulumi.Input<inputs.AppSpecWorkerGitlab>;
    image?: pulumi.Input<inputs.AppSpecWorkerImage>;
    /**
     * The amount of instances that this component should be scaled to.
     */
    instanceCount?: pulumi.Input<number>;
    /**
     * The instance size to use for this component.
     */
    instanceSizeSlug?: pulumi.Input<string>;
    /**
     * Logs
     */
    logDestinations?: pulumi.Input<pulumi.Input<inputs.AppSpecWorkerLogDestination>[]>;
    /**
     * The name of the component
     */
    name: pulumi.Input<string>;
    /**
     * An optional run command to override the component's default.
     */
    runCommand?: pulumi.Input<string>;
    /**
     * An optional path to the working directory to use for the build.
     */
    sourceDir?: pulumi.Input<string>;
}

export interface AppSpecWorkerAlert {
    disabled?: pulumi.Input<boolean>;
    operator: pulumi.Input<string>;
    rule: pulumi.Input<string>;
    value: pulumi.Input<number>;
    window: pulumi.Input<string>;
}

export interface AppSpecWorkerEnv {
    /**
     * The name of the environment variable.
     */
    key?: pulumi.Input<string>;
    /**
     * The visibility scope of the environment variable.
     */
    scope?: pulumi.Input<string>;
    /**
     * The type of the environment variable.
     */
    type?: pulumi.Input<string>;
    /**
     * The value of the environment variable.
     */
    value?: pulumi.Input<string>;
}

export interface AppSpecWorkerGit {
    /**
     * The name of the branch to use.
     */
    branch?: pulumi.Input<string>;
    /**
     * The clone URL of the repo.
     */
    repoCloneUrl?: pulumi.Input<string>;
}

export interface AppSpecWorkerGithub {
    /**
     * The name of the branch to use.
     */
    branch?: pulumi.Input<string>;
    /**
     * Whether to automatically deploy new commits made to the repo
     */
    deployOnPush?: pulumi.Input<boolean>;
    /**
     * The name of the repo in the format `owner/repo`.
     */
    repo?: pulumi.Input<string>;
}

export interface AppSpecWorkerGitlab {
    /**
     * The name of the branch to use.
     */
    branch?: pulumi.Input<string>;
    /**
     * Whether to automatically deploy new commits made to the repo
     */
    deployOnPush?: pulumi.Input<boolean>;
    /**
     * The name of the repo in the format `owner/repo`.
     */
    repo?: pulumi.Input<string>;
}

export interface AppSpecWorkerImage {
    /**
     * Configures automatically deploying images pushed to DOCR.
     */
    deployOnPushes?: pulumi.Input<pulumi.Input<inputs.AppSpecWorkerImageDeployOnPush>[]>;
    /**
     * The registry name. Must be left empty for the DOCR registry type.
     */
    registry?: pulumi.Input<string>;
    /**
     * Access credentials for third-party registries
     */
    registryCredentials?: pulumi.Input<string>;
    /**
     * The registry type.
     */
    registryType: pulumi.Input<string>;
    /**
     * The repository name.
     */
    repository: pulumi.Input<string>;
    /**
     * The repository tag. Defaults to latest if not provided.
     */
    tag?: pulumi.Input<string>;
}

export interface AppSpecWorkerImageDeployOnPush {
    /**
     * Whether to automatically deploy images pushed to DOCR.
     */
    enabled?: pulumi.Input<boolean>;
}

export interface AppSpecWorkerLogDestination {
    /**
     * Datadog configuration.
     */
    datadog?: pulumi.Input<inputs.AppSpecWorkerLogDestinationDatadog>;
    /**
     * Logtail configuration.
     */
    logtail?: pulumi.Input<inputs.AppSpecWorkerLogDestinationLogtail>;
    /**
     * Name of the log destination
     */
    name: pulumi.Input<string>;
    /**
     * Papertrail configuration.
     */
    papertrail?: pulumi.Input<inputs.AppSpecWorkerLogDestinationPapertrail>;
}

export interface AppSpecWorkerLogDestinationDatadog {
    /**
     * Datadog API key.
     */
    apiKey: pulumi.Input<string>;
    /**
     * Datadog HTTP log intake endpoint.
     */
    endpoint?: pulumi.Input<string>;
}

export interface AppSpecWorkerLogDestinationLogtail {
    /**
     * Logtail token.
     */
    token: pulumi.Input<string>;
}

export interface AppSpecWorkerLogDestinationPapertrail {
    /**
     * Papertrail syslog endpoint.
     */
    endpoint: pulumi.Input<string>;
}

export interface AppTimeouts {
    create?: pulumi.Input<string>;
}

export interface CustomImageTimeouts {
    create?: pulumi.Input<string>;
}

export interface DatabaseClusterBackupRestore {
    backupCreatedAt?: pulumi.Input<string>;
    databaseName: pulumi.Input<string>;
}

export interface DatabaseClusterMaintenanceWindow {
    day: pulumi.Input<string>;
    hour: pulumi.Input<string>;
}

export interface DatabaseClusterTimeouts {
    create?: pulumi.Input<string>;
}

export interface DatabaseFirewallRule {
    createdAt?: pulumi.Input<string>;
    type: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface DatabaseKafkaTopicConfig {
    cleanupPolicy?: pulumi.Input<string>;
    compressionType?: pulumi.Input<string>;
    deleteRetentionMs?: pulumi.Input<string>;
    fileDeleteDelayMs?: pulumi.Input<string>;
    flushMessages?: pulumi.Input<string>;
    flushMs?: pulumi.Input<string>;
    indexIntervalBytes?: pulumi.Input<string>;
    maxCompactionLagMs?: pulumi.Input<string>;
    maxMessageBytes?: pulumi.Input<string>;
    messageDownConversionEnable?: pulumi.Input<boolean>;
    messageFormatVersion?: pulumi.Input<string>;
    messageTimestampDifferenceMaxMs?: pulumi.Input<string>;
    messageTimestampType?: pulumi.Input<string>;
    minCleanableDirtyRatio?: pulumi.Input<number>;
    minCompactionLagMs?: pulumi.Input<string>;
    minInsyncReplicas?: pulumi.Input<number>;
    preallocate?: pulumi.Input<boolean>;
    retentionBytes?: pulumi.Input<string>;
    retentionMs?: pulumi.Input<string>;
    segmentBytes?: pulumi.Input<string>;
    segmentIndexBytes?: pulumi.Input<string>;
    segmentJitterMs?: pulumi.Input<string>;
    segmentMs?: pulumi.Input<string>;
}

export interface DatabasePostgresqlConfigPgbouncer {
    autodbIdleTimeout?: pulumi.Input<number>;
    autodbMaxDbConnections?: pulumi.Input<number>;
    autodbPoolMode?: pulumi.Input<string>;
    autodbPoolSize?: pulumi.Input<number>;
    ignoreStartupParameters?: pulumi.Input<pulumi.Input<string>[]>;
    minPoolSize?: pulumi.Input<number>;
    serverIdleTimeout?: pulumi.Input<number>;
    serverLifetime?: pulumi.Input<number>;
    serverResetQueryAlways?: pulumi.Input<boolean>;
}

export interface DatabasePostgresqlConfigTimescaledb {
    timescaledb?: pulumi.Input<number>;
}

export interface DatabaseUserSetting {
    acls?: pulumi.Input<pulumi.Input<inputs.DatabaseUserSettingAcl>[]>;
}

export interface DatabaseUserSettingAcl {
    id?: pulumi.Input<string>;
    permission: pulumi.Input<string>;
    topic: pulumi.Input<string>;
}

export interface DropletTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface FirewallInboundRule {
    portRange?: pulumi.Input<string>;
    protocol: pulumi.Input<string>;
    sourceAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    sourceDropletIds?: pulumi.Input<pulumi.Input<number>[]>;
    sourceKubernetesIds?: pulumi.Input<pulumi.Input<string>[]>;
    sourceLoadBalancerUids?: pulumi.Input<pulumi.Input<string>[]>;
    sourceTags?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface FirewallOutboundRule {
    destinationAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    destinationDropletIds?: pulumi.Input<pulumi.Input<number>[]>;
    destinationKubernetesIds?: pulumi.Input<pulumi.Input<string>[]>;
    destinationLoadBalancerUids?: pulumi.Input<pulumi.Input<string>[]>;
    destinationTags?: pulumi.Input<pulumi.Input<string>[]>;
    portRange?: pulumi.Input<string>;
    protocol: pulumi.Input<string>;
}

export interface FirewallPendingChange {
    dropletId: pulumi.Input<number>;
    removing: pulumi.Input<boolean>;
    status: pulumi.Input<string>;
}

export interface GetAppDedicatedIp {
    /**
     * The ID of the dedicated egress IP.
     */
    id?: string;
    /**
     * The IP address of the dedicated egress IP.
     */
    ip?: string;
    /**
     * The status of the dedicated egress IP: 'UNKNOWN', 'ASSIGNING', 'ASSIGNED', or 'REMOVED'
     */
    status?: string;
}

export interface GetAppDedicatedIpArgs {
    /**
     * The ID of the dedicated egress IP.
     */
    id?: pulumi.Input<string>;
    /**
     * The IP address of the dedicated egress IP.
     */
    ip?: pulumi.Input<string>;
    /**
     * The status of the dedicated egress IP: 'UNKNOWN', 'ASSIGNING', 'ASSIGNED', or 'REMOVED'
     */
    status?: pulumi.Input<string>;
}

export interface GetDomainsFilter {
    all?: boolean;
    key: string;
    matchBy?: string;
    values: string[];
}

export interface GetDomainsFilterArgs {
    all?: pulumi.Input<boolean>;
    key: pulumi.Input<string>;
    matchBy?: pulumi.Input<string>;
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetDomainsSort {
    direction?: string;
    key: string;
}

export interface GetDomainsSortArgs {
    direction?: pulumi.Input<string>;
    key: pulumi.Input<string>;
}

export interface GetDropletsFilter {
    all?: boolean;
    key: string;
    matchBy?: string;
    values: string[];
}

export interface GetDropletsFilterArgs {
    all?: pulumi.Input<boolean>;
    key: pulumi.Input<string>;
    matchBy?: pulumi.Input<string>;
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetDropletsSort {
    direction?: string;
    key: string;
}

export interface GetDropletsSortArgs {
    direction?: pulumi.Input<string>;
    key: pulumi.Input<string>;
}

export interface GetFirewallInboundRule {
    portRange?: string;
    protocol: string;
    sourceAddresses?: string[];
    sourceDropletIds?: number[];
    sourceKubernetesIds?: string[];
    sourceLoadBalancerUids?: string[];
    sourceTags?: string[];
}

export interface GetFirewallInboundRuleArgs {
    portRange?: pulumi.Input<string>;
    protocol: pulumi.Input<string>;
    sourceAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    sourceDropletIds?: pulumi.Input<pulumi.Input<number>[]>;
    sourceKubernetesIds?: pulumi.Input<pulumi.Input<string>[]>;
    sourceLoadBalancerUids?: pulumi.Input<pulumi.Input<string>[]>;
    sourceTags?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetFirewallOutboundRule {
    destinationAddresses?: string[];
    destinationDropletIds?: number[];
    destinationKubernetesIds?: string[];
    destinationLoadBalancerUids?: string[];
    destinationTags?: string[];
    portRange?: string;
    protocol: string;
}

export interface GetFirewallOutboundRuleArgs {
    destinationAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    destinationDropletIds?: pulumi.Input<pulumi.Input<number>[]>;
    destinationKubernetesIds?: pulumi.Input<pulumi.Input<string>[]>;
    destinationLoadBalancerUids?: pulumi.Input<pulumi.Input<string>[]>;
    destinationTags?: pulumi.Input<pulumi.Input<string>[]>;
    portRange?: pulumi.Input<string>;
    protocol: pulumi.Input<string>;
}

export interface GetImagesFilter {
    all?: boolean;
    key: string;
    matchBy?: string;
    values: string[];
}

export interface GetImagesFilterArgs {
    all?: pulumi.Input<boolean>;
    key: pulumi.Input<string>;
    matchBy?: pulumi.Input<string>;
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetImagesSort {
    direction?: string;
    key: string;
}

export interface GetImagesSortArgs {
    direction?: pulumi.Input<string>;
    key: pulumi.Input<string>;
}

export interface GetProjectsFilter {
    all?: boolean;
    key: string;
    matchBy?: string;
    values: string[];
}

export interface GetProjectsFilterArgs {
    all?: pulumi.Input<boolean>;
    key: pulumi.Input<string>;
    matchBy?: pulumi.Input<string>;
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetProjectsSort {
    direction?: string;
    key: string;
}

export interface GetProjectsSortArgs {
    direction?: pulumi.Input<string>;
    key: pulumi.Input<string>;
}

export interface GetRecordsFilter {
    all?: boolean;
    key: string;
    matchBy?: string;
    values: string[];
}

export interface GetRecordsFilterArgs {
    all?: pulumi.Input<boolean>;
    key: pulumi.Input<string>;
    matchBy?: pulumi.Input<string>;
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetRecordsSort {
    direction?: string;
    key: string;
}

export interface GetRecordsSortArgs {
    direction?: pulumi.Input<string>;
    key: pulumi.Input<string>;
}

export interface GetRegionsFilter {
    all?: boolean;
    key: string;
    matchBy?: string;
    values: string[];
}

export interface GetRegionsFilterArgs {
    all?: pulumi.Input<boolean>;
    key: pulumi.Input<string>;
    matchBy?: pulumi.Input<string>;
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetRegionsSort {
    direction?: string;
    key: string;
}

export interface GetRegionsSortArgs {
    direction?: pulumi.Input<string>;
    key: pulumi.Input<string>;
}

export interface GetSizesFilter {
    all?: boolean;
    key: string;
    matchBy?: string;
    values: string[];
}

export interface GetSizesFilterArgs {
    all?: pulumi.Input<boolean>;
    key: pulumi.Input<string>;
    matchBy?: pulumi.Input<string>;
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetSizesSort {
    direction?: string;
    key: string;
}

export interface GetSizesSortArgs {
    direction?: pulumi.Input<string>;
    key: pulumi.Input<string>;
}

export interface GetSpacesBucketsFilter {
    all?: boolean;
    key: string;
    matchBy?: string;
    values: string[];
}

export interface GetSpacesBucketsFilterArgs {
    all?: pulumi.Input<boolean>;
    key: pulumi.Input<string>;
    matchBy?: pulumi.Input<string>;
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetSpacesBucketsSort {
    direction?: string;
    key: string;
}

export interface GetSpacesBucketsSortArgs {
    direction?: pulumi.Input<string>;
    key: pulumi.Input<string>;
}

export interface GetSshKeysFilter {
    all?: boolean;
    key: string;
    matchBy?: string;
    values: string[];
}

export interface GetSshKeysFilterArgs {
    all?: pulumi.Input<boolean>;
    key: pulumi.Input<string>;
    matchBy?: pulumi.Input<string>;
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetSshKeysSort {
    direction?: string;
    key: string;
}

export interface GetSshKeysSortArgs {
    direction?: pulumi.Input<string>;
    key: pulumi.Input<string>;
}

export interface GetTagsFilter {
    all?: boolean;
    key: string;
    matchBy?: string;
    values: string[];
}

export interface GetTagsFilterArgs {
    all?: pulumi.Input<boolean>;
    key: pulumi.Input<string>;
    matchBy?: pulumi.Input<string>;
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetTagsSort {
    direction?: string;
    key: string;
}

export interface GetTagsSortArgs {
    direction?: pulumi.Input<string>;
    key: pulumi.Input<string>;
}

export interface KubernetesClusterKubeConfig {
    clientCertificate: pulumi.Input<string>;
    clientKey: pulumi.Input<string>;
    clusterCaCertificate: pulumi.Input<string>;
    expiresAt: pulumi.Input<string>;
    host: pulumi.Input<string>;
    rawConfig: pulumi.Input<string>;
    token: pulumi.Input<string>;
}

export interface KubernetesClusterMaintenancePolicy {
    day?: pulumi.Input<string>;
    duration?: pulumi.Input<string>;
    startTime?: pulumi.Input<string>;
}

export interface KubernetesClusterNodePool {
    actualNodeCount?: pulumi.Input<number>;
    autoScale?: pulumi.Input<boolean>;
    id?: pulumi.Input<string>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    maxNodes?: pulumi.Input<number>;
    minNodes?: pulumi.Input<number>;
    name: pulumi.Input<string>;
    nodeCount?: pulumi.Input<number>;
    nodes?: pulumi.Input<pulumi.Input<inputs.KubernetesClusterNodePoolNode>[]>;
    size: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    taints?: pulumi.Input<pulumi.Input<inputs.KubernetesClusterNodePoolTaint>[]>;
}

export interface KubernetesClusterNodePoolNode {
    createdAt: pulumi.Input<string>;
    dropletId: pulumi.Input<string>;
    id: pulumi.Input<string>;
    name: pulumi.Input<string>;
    status: pulumi.Input<string>;
    updatedAt: pulumi.Input<string>;
}

export interface KubernetesClusterNodePoolTaint {
    effect: pulumi.Input<string>;
    key: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface KubernetesClusterTimeouts {
    create?: pulumi.Input<string>;
}

export interface KubernetesNodePoolNode {
    createdAt: pulumi.Input<string>;
    dropletId: pulumi.Input<string>;
    id: pulumi.Input<string>;
    name: pulumi.Input<string>;
    status: pulumi.Input<string>;
    updatedAt: pulumi.Input<string>;
}

export interface KubernetesNodePoolTaint {
    effect: pulumi.Input<string>;
    key: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface KubernetesNodePoolTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
}

export interface LoadbalancerDomain {
    /**
     * name of certificate required for TLS handshaking
     */
    certificateName?: pulumi.Input<string>;
    /**
     * flag indicating if domain is managed by DigitalOcean
     */
    isManaged?: pulumi.Input<boolean>;
    /**
     * domain name
     */
    name: pulumi.Input<string>;
    /**
     * list of domain SSL validation errors
     */
    sslValidationErrorReasons?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * list of domain verification errors
     */
    verificationErrorReasons?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface LoadbalancerFirewall {
    /**
     * the rules for ALLOWING traffic to the LB (strings in the form: 'ip:1.2.3.4' or 'cidr:1.2.0.0/16')
     */
    allows?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * the rules for DENYING traffic to the LB (strings in the form: 'ip:1.2.3.4' or 'cidr:1.2.0.0/16')
     */
    denies?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface LoadbalancerForwardingRule {
    /**
     * @deprecated Deprecated
     */
    certificateId?: pulumi.Input<string>;
    certificateName?: pulumi.Input<string>;
    entryPort: pulumi.Input<number>;
    entryProtocol: pulumi.Input<string>;
    targetPort: pulumi.Input<number>;
    targetProtocol: pulumi.Input<string>;
    tlsPassthrough?: pulumi.Input<boolean>;
}

export interface LoadbalancerGlbSettings {
    /**
     * CDN specific configurations
     */
    cdn?: pulumi.Input<inputs.LoadbalancerGlbSettingsCdn>;
    /**
     * fail-over threshold
     */
    failoverThreshold?: pulumi.Input<number>;
    /**
     * region priority map
     */
    regionPriorities?: pulumi.Input<{[key: string]: pulumi.Input<number>}>;
    /**
     * target port rules
     */
    targetPort: pulumi.Input<number>;
    /**
     * target protocol rules
     */
    targetProtocol: pulumi.Input<string>;
}

export interface LoadbalancerGlbSettingsCdn {
    /**
     * cache enable flag
     */
    isEnabled?: pulumi.Input<boolean>;
}

export interface LoadbalancerHealthcheck {
    checkIntervalSeconds?: pulumi.Input<number>;
    healthyThreshold?: pulumi.Input<number>;
    path?: pulumi.Input<string>;
    port: pulumi.Input<number>;
    protocol: pulumi.Input<string>;
    responseTimeoutSeconds?: pulumi.Input<number>;
    unhealthyThreshold?: pulumi.Input<number>;
}

export interface LoadbalancerStickySessions {
    cookieName?: pulumi.Input<string>;
    cookieTtlSeconds?: pulumi.Input<number>;
    type?: pulumi.Input<string>;
}

export interface MonitorAlertAlerts {
    /**
     * List of email addresses to sent notifications to
     */
    emails?: pulumi.Input<pulumi.Input<string>[]>;
    slacks?: pulumi.Input<pulumi.Input<inputs.MonitorAlertAlertsSlack>[]>;
}

export interface MonitorAlertAlertsSlack {
    /**
     * The Slack channel to send alerts to
     */
    channel: pulumi.Input<string>;
    /**
     * The webhook URL for Slack
     */
    url: pulumi.Input<string>;
}

export interface ProjectTimeouts {
    delete?: pulumi.Input<string>;
}

export interface SpacesBucketCorsConfigurationCorsRule {
    allowedHeaders?: pulumi.Input<pulumi.Input<string>[]>;
    allowedMethods: pulumi.Input<pulumi.Input<string>[]>;
    allowedOrigins: pulumi.Input<pulumi.Input<string>[]>;
    exposeHeaders?: pulumi.Input<pulumi.Input<string>[]>;
    id?: pulumi.Input<string>;
    maxAgeSeconds?: pulumi.Input<number>;
}

export interface SpacesBucketCorsRule {
    /**
     * A list of headers that will be included in the CORS preflight request's Access-Control-Request-Headers. A header may contain one wildcard (e.g. x-amz-*).
     */
    allowedHeaders?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of HTTP methods (e.g. GET) which are allowed from the specified origin.
     */
    allowedMethods: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of hosts from which requests using the specified methods are allowed. A host may contain one wildcard (e.g. http://*.example.com).
     */
    allowedOrigins: pulumi.Input<pulumi.Input<string>[]>;
    maxAgeSeconds?: pulumi.Input<number>;
}

export interface SpacesBucketLifecycleRule {
    abortIncompleteMultipartUploadDays?: pulumi.Input<number>;
    enabled: pulumi.Input<boolean>;
    expiration?: pulumi.Input<inputs.SpacesBucketLifecycleRuleExpiration>;
    id?: pulumi.Input<string>;
    noncurrentVersionExpiration?: pulumi.Input<inputs.SpacesBucketLifecycleRuleNoncurrentVersionExpiration>;
    prefix?: pulumi.Input<string>;
}

export interface SpacesBucketLifecycleRuleExpiration {
    date?: pulumi.Input<string>;
    days?: pulumi.Input<number>;
    expiredObjectDeleteMarker?: pulumi.Input<boolean>;
}

export interface SpacesBucketLifecycleRuleNoncurrentVersionExpiration {
    days?: pulumi.Input<number>;
}

export interface SpacesBucketVersioning {
    enabled?: pulumi.Input<boolean>;
}

export interface UptimeAlertNotification {
    /**
     * List of email addresses to sent notifications to
     */
    emails?: pulumi.Input<pulumi.Input<string>[]>;
    slacks?: pulumi.Input<pulumi.Input<inputs.UptimeAlertNotificationSlack>[]>;
}

export interface UptimeAlertNotificationSlack {
    /**
     * The Slack channel to send alerts to
     */
    channel: pulumi.Input<string>;
    /**
     * The webhook URL for Slack
     */
    url: pulumi.Input<string>;
}

export interface VpcPeeringTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
}

export interface VpcTimeouts {
    delete?: pulumi.Input<string>;
}
