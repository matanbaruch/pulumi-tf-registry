// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getDatabaseCluster(args: GetDatabaseClusterArgs, opts?: pulumi.InvokeOptions): Promise<GetDatabaseClusterResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("digitalocean:index/getDatabaseCluster:getDatabaseCluster", {
        "id": args.id,
        "name": args.name,
        "tags": args.tags,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getDatabaseCluster.
 */
export interface GetDatabaseClusterArgs {
    id?: string;
    name: string;
    tags?: string[];
}

/**
 * A collection of values returned by getDatabaseCluster.
 */
export interface GetDatabaseClusterResult {
    readonly database: string;
    readonly engine: string;
    readonly host: string;
    readonly id: string;
    readonly maintenanceWindows: outputs.GetDatabaseClusterMaintenanceWindow[];
    readonly name: string;
    readonly nodeCount: number;
    readonly password: string;
    readonly port: number;
    readonly privateHost: string;
    readonly privateNetworkUuid: string;
    readonly privateUri: string;
    readonly projectId: string;
    readonly region: string;
    readonly size: string;
    readonly storageSizeMib: string;
    readonly tags?: string[];
    readonly uiDatabase: string;
    readonly uiHost: string;
    readonly uiPassword: string;
    readonly uiPort: number;
    readonly uiUri: string;
    readonly uiUser: string;
    readonly uri: string;
    readonly urn: string;
    readonly user: string;
    readonly version: string;
}
export function getDatabaseClusterOutput(args: GetDatabaseClusterOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDatabaseClusterResult> {
    return pulumi.output(args).apply((a: any) => getDatabaseCluster(a, opts))
}

/**
 * A collection of arguments for invoking getDatabaseCluster.
 */
export interface GetDatabaseClusterOutputArgs {
    id?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}
