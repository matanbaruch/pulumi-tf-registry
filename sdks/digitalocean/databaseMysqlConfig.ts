// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class DatabaseMysqlConfig extends pulumi.CustomResource {
    /**
     * Get an existing DatabaseMysqlConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DatabaseMysqlConfigState, opts?: pulumi.CustomResourceOptions): DatabaseMysqlConfig {
        return new DatabaseMysqlConfig(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'digitalocean:index/databaseMysqlConfig:DatabaseMysqlConfig';

    /**
     * Returns true if the given object is an instance of DatabaseMysqlConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DatabaseMysqlConfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DatabaseMysqlConfig.__pulumiType;
    }

    public readonly backupHour!: pulumi.Output<number>;
    public readonly backupMinute!: pulumi.Output<number>;
    public readonly binlogRetentionPeriod!: pulumi.Output<number>;
    public readonly clusterId!: pulumi.Output<string>;
    public readonly connectTimeout!: pulumi.Output<number>;
    public readonly defaultTimeZone!: pulumi.Output<string>;
    public readonly groupConcatMaxLen!: pulumi.Output<number>;
    public readonly informationSchemaStatsExpiry!: pulumi.Output<number>;
    public readonly innodbFtMinTokenSize!: pulumi.Output<number>;
    public readonly innodbFtServerStopwordTable!: pulumi.Output<string>;
    public readonly innodbLockWaitTimeout!: pulumi.Output<number>;
    public readonly innodbLogBufferSize!: pulumi.Output<number>;
    public readonly innodbOnlineAlterLogMaxSize!: pulumi.Output<number>;
    public readonly innodbPrintAllDeadlocks!: pulumi.Output<boolean>;
    public readonly innodbRollbackOnTimeout!: pulumi.Output<boolean>;
    public readonly interactiveTimeout!: pulumi.Output<number>;
    public readonly internalTmpMemStorageEngine!: pulumi.Output<string>;
    public readonly longQueryTime!: pulumi.Output<number>;
    public readonly maxAllowedPacket!: pulumi.Output<number>;
    public readonly maxHeapTableSize!: pulumi.Output<number>;
    public readonly netReadTimeout!: pulumi.Output<number>;
    public readonly netWriteTimeout!: pulumi.Output<number>;
    public readonly slowQueryLog!: pulumi.Output<boolean>;
    public readonly sortBufferSize!: pulumi.Output<number>;
    public readonly sqlMode!: pulumi.Output<string>;
    public readonly sqlRequirePrimaryKey!: pulumi.Output<boolean>;
    public readonly tmpTableSize!: pulumi.Output<number>;
    public readonly waitTimeout!: pulumi.Output<number>;

    /**
     * Create a DatabaseMysqlConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatabaseMysqlConfigArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DatabaseMysqlConfigArgs | DatabaseMysqlConfigState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DatabaseMysqlConfigState | undefined;
            resourceInputs["backupHour"] = state ? state.backupHour : undefined;
            resourceInputs["backupMinute"] = state ? state.backupMinute : undefined;
            resourceInputs["binlogRetentionPeriod"] = state ? state.binlogRetentionPeriod : undefined;
            resourceInputs["clusterId"] = state ? state.clusterId : undefined;
            resourceInputs["connectTimeout"] = state ? state.connectTimeout : undefined;
            resourceInputs["defaultTimeZone"] = state ? state.defaultTimeZone : undefined;
            resourceInputs["groupConcatMaxLen"] = state ? state.groupConcatMaxLen : undefined;
            resourceInputs["informationSchemaStatsExpiry"] = state ? state.informationSchemaStatsExpiry : undefined;
            resourceInputs["innodbFtMinTokenSize"] = state ? state.innodbFtMinTokenSize : undefined;
            resourceInputs["innodbFtServerStopwordTable"] = state ? state.innodbFtServerStopwordTable : undefined;
            resourceInputs["innodbLockWaitTimeout"] = state ? state.innodbLockWaitTimeout : undefined;
            resourceInputs["innodbLogBufferSize"] = state ? state.innodbLogBufferSize : undefined;
            resourceInputs["innodbOnlineAlterLogMaxSize"] = state ? state.innodbOnlineAlterLogMaxSize : undefined;
            resourceInputs["innodbPrintAllDeadlocks"] = state ? state.innodbPrintAllDeadlocks : undefined;
            resourceInputs["innodbRollbackOnTimeout"] = state ? state.innodbRollbackOnTimeout : undefined;
            resourceInputs["interactiveTimeout"] = state ? state.interactiveTimeout : undefined;
            resourceInputs["internalTmpMemStorageEngine"] = state ? state.internalTmpMemStorageEngine : undefined;
            resourceInputs["longQueryTime"] = state ? state.longQueryTime : undefined;
            resourceInputs["maxAllowedPacket"] = state ? state.maxAllowedPacket : undefined;
            resourceInputs["maxHeapTableSize"] = state ? state.maxHeapTableSize : undefined;
            resourceInputs["netReadTimeout"] = state ? state.netReadTimeout : undefined;
            resourceInputs["netWriteTimeout"] = state ? state.netWriteTimeout : undefined;
            resourceInputs["slowQueryLog"] = state ? state.slowQueryLog : undefined;
            resourceInputs["sortBufferSize"] = state ? state.sortBufferSize : undefined;
            resourceInputs["sqlMode"] = state ? state.sqlMode : undefined;
            resourceInputs["sqlRequirePrimaryKey"] = state ? state.sqlRequirePrimaryKey : undefined;
            resourceInputs["tmpTableSize"] = state ? state.tmpTableSize : undefined;
            resourceInputs["waitTimeout"] = state ? state.waitTimeout : undefined;
        } else {
            const args = argsOrState as DatabaseMysqlConfigArgs | undefined;
            if ((!args || args.clusterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            resourceInputs["backupHour"] = args ? args.backupHour : undefined;
            resourceInputs["backupMinute"] = args ? args.backupMinute : undefined;
            resourceInputs["binlogRetentionPeriod"] = args ? args.binlogRetentionPeriod : undefined;
            resourceInputs["clusterId"] = args ? args.clusterId : undefined;
            resourceInputs["connectTimeout"] = args ? args.connectTimeout : undefined;
            resourceInputs["defaultTimeZone"] = args ? args.defaultTimeZone : undefined;
            resourceInputs["groupConcatMaxLen"] = args ? args.groupConcatMaxLen : undefined;
            resourceInputs["informationSchemaStatsExpiry"] = args ? args.informationSchemaStatsExpiry : undefined;
            resourceInputs["innodbFtMinTokenSize"] = args ? args.innodbFtMinTokenSize : undefined;
            resourceInputs["innodbFtServerStopwordTable"] = args ? args.innodbFtServerStopwordTable : undefined;
            resourceInputs["innodbLockWaitTimeout"] = args ? args.innodbLockWaitTimeout : undefined;
            resourceInputs["innodbLogBufferSize"] = args ? args.innodbLogBufferSize : undefined;
            resourceInputs["innodbOnlineAlterLogMaxSize"] = args ? args.innodbOnlineAlterLogMaxSize : undefined;
            resourceInputs["innodbPrintAllDeadlocks"] = args ? args.innodbPrintAllDeadlocks : undefined;
            resourceInputs["innodbRollbackOnTimeout"] = args ? args.innodbRollbackOnTimeout : undefined;
            resourceInputs["interactiveTimeout"] = args ? args.interactiveTimeout : undefined;
            resourceInputs["internalTmpMemStorageEngine"] = args ? args.internalTmpMemStorageEngine : undefined;
            resourceInputs["longQueryTime"] = args ? args.longQueryTime : undefined;
            resourceInputs["maxAllowedPacket"] = args ? args.maxAllowedPacket : undefined;
            resourceInputs["maxHeapTableSize"] = args ? args.maxHeapTableSize : undefined;
            resourceInputs["netReadTimeout"] = args ? args.netReadTimeout : undefined;
            resourceInputs["netWriteTimeout"] = args ? args.netWriteTimeout : undefined;
            resourceInputs["slowQueryLog"] = args ? args.slowQueryLog : undefined;
            resourceInputs["sortBufferSize"] = args ? args.sortBufferSize : undefined;
            resourceInputs["sqlMode"] = args ? args.sqlMode : undefined;
            resourceInputs["sqlRequirePrimaryKey"] = args ? args.sqlRequirePrimaryKey : undefined;
            resourceInputs["tmpTableSize"] = args ? args.tmpTableSize : undefined;
            resourceInputs["waitTimeout"] = args ? args.waitTimeout : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DatabaseMysqlConfig.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DatabaseMysqlConfig resources.
 */
export interface DatabaseMysqlConfigState {
    backupHour?: pulumi.Input<number>;
    backupMinute?: pulumi.Input<number>;
    binlogRetentionPeriod?: pulumi.Input<number>;
    clusterId?: pulumi.Input<string>;
    connectTimeout?: pulumi.Input<number>;
    defaultTimeZone?: pulumi.Input<string>;
    groupConcatMaxLen?: pulumi.Input<number>;
    informationSchemaStatsExpiry?: pulumi.Input<number>;
    innodbFtMinTokenSize?: pulumi.Input<number>;
    innodbFtServerStopwordTable?: pulumi.Input<string>;
    innodbLockWaitTimeout?: pulumi.Input<number>;
    innodbLogBufferSize?: pulumi.Input<number>;
    innodbOnlineAlterLogMaxSize?: pulumi.Input<number>;
    innodbPrintAllDeadlocks?: pulumi.Input<boolean>;
    innodbRollbackOnTimeout?: pulumi.Input<boolean>;
    interactiveTimeout?: pulumi.Input<number>;
    internalTmpMemStorageEngine?: pulumi.Input<string>;
    longQueryTime?: pulumi.Input<number>;
    maxAllowedPacket?: pulumi.Input<number>;
    maxHeapTableSize?: pulumi.Input<number>;
    netReadTimeout?: pulumi.Input<number>;
    netWriteTimeout?: pulumi.Input<number>;
    slowQueryLog?: pulumi.Input<boolean>;
    sortBufferSize?: pulumi.Input<number>;
    sqlMode?: pulumi.Input<string>;
    sqlRequirePrimaryKey?: pulumi.Input<boolean>;
    tmpTableSize?: pulumi.Input<number>;
    waitTimeout?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a DatabaseMysqlConfig resource.
 */
export interface DatabaseMysqlConfigArgs {
    backupHour?: pulumi.Input<number>;
    backupMinute?: pulumi.Input<number>;
    binlogRetentionPeriod?: pulumi.Input<number>;
    clusterId: pulumi.Input<string>;
    connectTimeout?: pulumi.Input<number>;
    defaultTimeZone?: pulumi.Input<string>;
    groupConcatMaxLen?: pulumi.Input<number>;
    informationSchemaStatsExpiry?: pulumi.Input<number>;
    innodbFtMinTokenSize?: pulumi.Input<number>;
    innodbFtServerStopwordTable?: pulumi.Input<string>;
    innodbLockWaitTimeout?: pulumi.Input<number>;
    innodbLogBufferSize?: pulumi.Input<number>;
    innodbOnlineAlterLogMaxSize?: pulumi.Input<number>;
    innodbPrintAllDeadlocks?: pulumi.Input<boolean>;
    innodbRollbackOnTimeout?: pulumi.Input<boolean>;
    interactiveTimeout?: pulumi.Input<number>;
    internalTmpMemStorageEngine?: pulumi.Input<string>;
    longQueryTime?: pulumi.Input<number>;
    maxAllowedPacket?: pulumi.Input<number>;
    maxHeapTableSize?: pulumi.Input<number>;
    netReadTimeout?: pulumi.Input<number>;
    netWriteTimeout?: pulumi.Input<number>;
    slowQueryLog?: pulumi.Input<boolean>;
    sortBufferSize?: pulumi.Input<number>;
    sqlMode?: pulumi.Input<string>;
    sqlRequirePrimaryKey?: pulumi.Input<boolean>;
    tmpTableSize?: pulumi.Input<number>;
    waitTimeout?: pulumi.Input<number>;
}
