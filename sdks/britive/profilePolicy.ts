// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ProfilePolicy extends pulumi.CustomResource {
    /**
     * Get an existing ProfilePolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProfilePolicyState, opts?: pulumi.CustomResourceOptions): ProfilePolicy {
        return new ProfilePolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'britive:index/profilePolicy:ProfilePolicy';

    /**
     * Returns true if the given object is an instance of ProfilePolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ProfilePolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ProfilePolicy.__pulumiType;
    }

    /**
     * Type of access for the policy
     */
    public readonly accessType!: pulumi.Output<string | undefined>;
    /**
     * Condition of the policy
     */
    public readonly condition!: pulumi.Output<string | undefined>;
    /**
     * The consumer service
     */
    public readonly consumer!: pulumi.Output<string | undefined>;
    /**
     * The description of the profile policy
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Is the policy active
     */
    public readonly isActive!: pulumi.Output<boolean | undefined>;
    /**
     * Is the policy a draft
     */
    public readonly isDraft!: pulumi.Output<boolean | undefined>;
    /**
     * Is the policy read only
     */
    public readonly isReadOnly!: pulumi.Output<boolean | undefined>;
    /**
     * Members of the policy
     */
    public readonly members!: pulumi.Output<string | undefined>;
    /**
     * The policy associated with the profile
     */
    public readonly policyName!: pulumi.Output<string>;
    /**
     * The identifier of the profile
     */
    public readonly profileId!: pulumi.Output<string>;

    /**
     * Create a ProfilePolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProfilePolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProfilePolicyArgs | ProfilePolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ProfilePolicyState | undefined;
            resourceInputs["accessType"] = state ? state.accessType : undefined;
            resourceInputs["condition"] = state ? state.condition : undefined;
            resourceInputs["consumer"] = state ? state.consumer : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["isActive"] = state ? state.isActive : undefined;
            resourceInputs["isDraft"] = state ? state.isDraft : undefined;
            resourceInputs["isReadOnly"] = state ? state.isReadOnly : undefined;
            resourceInputs["members"] = state ? state.members : undefined;
            resourceInputs["policyName"] = state ? state.policyName : undefined;
            resourceInputs["profileId"] = state ? state.profileId : undefined;
        } else {
            const args = argsOrState as ProfilePolicyArgs | undefined;
            if ((!args || args.policyName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'policyName'");
            }
            if ((!args || args.profileId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'profileId'");
            }
            resourceInputs["accessType"] = args ? args.accessType : undefined;
            resourceInputs["condition"] = args ? args.condition : undefined;
            resourceInputs["consumer"] = args ? args.consumer : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["isActive"] = args ? args.isActive : undefined;
            resourceInputs["isDraft"] = args ? args.isDraft : undefined;
            resourceInputs["isReadOnly"] = args ? args.isReadOnly : undefined;
            resourceInputs["members"] = args ? args.members : undefined;
            resourceInputs["policyName"] = args ? args.policyName : undefined;
            resourceInputs["profileId"] = args ? args.profileId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ProfilePolicy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ProfilePolicy resources.
 */
export interface ProfilePolicyState {
    /**
     * Type of access for the policy
     */
    accessType?: pulumi.Input<string>;
    /**
     * Condition of the policy
     */
    condition?: pulumi.Input<string>;
    /**
     * The consumer service
     */
    consumer?: pulumi.Input<string>;
    /**
     * The description of the profile policy
     */
    description?: pulumi.Input<string>;
    /**
     * Is the policy active
     */
    isActive?: pulumi.Input<boolean>;
    /**
     * Is the policy a draft
     */
    isDraft?: pulumi.Input<boolean>;
    /**
     * Is the policy read only
     */
    isReadOnly?: pulumi.Input<boolean>;
    /**
     * Members of the policy
     */
    members?: pulumi.Input<string>;
    /**
     * The policy associated with the profile
     */
    policyName?: pulumi.Input<string>;
    /**
     * The identifier of the profile
     */
    profileId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ProfilePolicy resource.
 */
export interface ProfilePolicyArgs {
    /**
     * Type of access for the policy
     */
    accessType?: pulumi.Input<string>;
    /**
     * Condition of the policy
     */
    condition?: pulumi.Input<string>;
    /**
     * The consumer service
     */
    consumer?: pulumi.Input<string>;
    /**
     * The description of the profile policy
     */
    description?: pulumi.Input<string>;
    /**
     * Is the policy active
     */
    isActive?: pulumi.Input<boolean>;
    /**
     * Is the policy a draft
     */
    isDraft?: pulumi.Input<boolean>;
    /**
     * Is the policy read only
     */
    isReadOnly?: pulumi.Input<boolean>;
    /**
     * Members of the policy
     */
    members?: pulumi.Input<string>;
    /**
     * The policy associated with the profile
     */
    policyName: pulumi.Input<string>;
    /**
     * The identifier of the profile
     */
    profileId: pulumi.Input<string>;
}
