// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Profile extends pulumi.CustomResource {
    /**
     * Get an existing Profile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProfileState, opts?: pulumi.CustomResourceOptions): Profile {
        return new Profile(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'britive:index/profile:Profile';

    /**
     * Returns true if the given object is an instance of Profile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Profile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Profile.__pulumiType;
    }

    /**
     * The identity of the Britive application
     */
    public readonly appContainerId!: pulumi.Output<string>;
    /**
     * The name of the Britive application
     */
    public readonly appName!: pulumi.Output<string>;
    /**
     * The list of associations for the Britive profile
     */
    public readonly associations!: pulumi.Output<outputs.ProfileAssociation[]>;
    /**
     * The description of the Britive profile
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The destination url to redirect user after checkout
     */
    public readonly destinationUrl!: pulumi.Output<string | undefined>;
    /**
     * To disable the Britive profile
     */
    public readonly disabled!: pulumi.Output<boolean | undefined>;
    /**
     * The expiration time for the Britive profile
     */
    public readonly expirationDuration!: pulumi.Output<string>;
    /**
     * The Boolean flag that indicates whether profile expiry is extendable or not
     */
    public readonly extendable!: pulumi.Output<boolean | undefined>;
    /**
     * The profile expiry extension as a time value
     */
    public readonly extensionDuration!: pulumi.Output<string | undefined>;
    /**
     * The repetition limit for extending the profile expiry
     */
    public readonly extensionLimit!: pulumi.Output<number | undefined>;
    /**
     * The name of the Britive profile
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * he profile expiry notification as a time value
     */
    public readonly notificationPriorToExpiration!: pulumi.Output<string | undefined>;

    /**
     * Create a Profile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProfileArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProfileArgs | ProfileState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ProfileState | undefined;
            resourceInputs["appContainerId"] = state ? state.appContainerId : undefined;
            resourceInputs["appName"] = state ? state.appName : undefined;
            resourceInputs["associations"] = state ? state.associations : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["destinationUrl"] = state ? state.destinationUrl : undefined;
            resourceInputs["disabled"] = state ? state.disabled : undefined;
            resourceInputs["expirationDuration"] = state ? state.expirationDuration : undefined;
            resourceInputs["extendable"] = state ? state.extendable : undefined;
            resourceInputs["extensionDuration"] = state ? state.extensionDuration : undefined;
            resourceInputs["extensionLimit"] = state ? state.extensionLimit : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notificationPriorToExpiration"] = state ? state.notificationPriorToExpiration : undefined;
        } else {
            const args = argsOrState as ProfileArgs | undefined;
            if ((!args || args.appContainerId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'appContainerId'");
            }
            if ((!args || args.associations === undefined) && !opts.urn) {
                throw new Error("Missing required property 'associations'");
            }
            if ((!args || args.expirationDuration === undefined) && !opts.urn) {
                throw new Error("Missing required property 'expirationDuration'");
            }
            resourceInputs["appContainerId"] = args ? args.appContainerId : undefined;
            resourceInputs["appName"] = args ? args.appName : undefined;
            resourceInputs["associations"] = args ? args.associations : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["destinationUrl"] = args ? args.destinationUrl : undefined;
            resourceInputs["disabled"] = args ? args.disabled : undefined;
            resourceInputs["expirationDuration"] = args ? args.expirationDuration : undefined;
            resourceInputs["extendable"] = args ? args.extendable : undefined;
            resourceInputs["extensionDuration"] = args ? args.extensionDuration : undefined;
            resourceInputs["extensionLimit"] = args ? args.extensionLimit : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["notificationPriorToExpiration"] = args ? args.notificationPriorToExpiration : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Profile.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Profile resources.
 */
export interface ProfileState {
    /**
     * The identity of the Britive application
     */
    appContainerId?: pulumi.Input<string>;
    /**
     * The name of the Britive application
     */
    appName?: pulumi.Input<string>;
    /**
     * The list of associations for the Britive profile
     */
    associations?: pulumi.Input<pulumi.Input<inputs.ProfileAssociation>[]>;
    /**
     * The description of the Britive profile
     */
    description?: pulumi.Input<string>;
    /**
     * The destination url to redirect user after checkout
     */
    destinationUrl?: pulumi.Input<string>;
    /**
     * To disable the Britive profile
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * The expiration time for the Britive profile
     */
    expirationDuration?: pulumi.Input<string>;
    /**
     * The Boolean flag that indicates whether profile expiry is extendable or not
     */
    extendable?: pulumi.Input<boolean>;
    /**
     * The profile expiry extension as a time value
     */
    extensionDuration?: pulumi.Input<string>;
    /**
     * The repetition limit for extending the profile expiry
     */
    extensionLimit?: pulumi.Input<number>;
    /**
     * The name of the Britive profile
     */
    name?: pulumi.Input<string>;
    /**
     * he profile expiry notification as a time value
     */
    notificationPriorToExpiration?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Profile resource.
 */
export interface ProfileArgs {
    /**
     * The identity of the Britive application
     */
    appContainerId: pulumi.Input<string>;
    /**
     * The name of the Britive application
     */
    appName?: pulumi.Input<string>;
    /**
     * The list of associations for the Britive profile
     */
    associations: pulumi.Input<pulumi.Input<inputs.ProfileAssociation>[]>;
    /**
     * The description of the Britive profile
     */
    description?: pulumi.Input<string>;
    /**
     * The destination url to redirect user after checkout
     */
    destinationUrl?: pulumi.Input<string>;
    /**
     * To disable the Britive profile
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * The expiration time for the Britive profile
     */
    expirationDuration: pulumi.Input<string>;
    /**
     * The Boolean flag that indicates whether profile expiry is extendable or not
     */
    extendable?: pulumi.Input<boolean>;
    /**
     * The profile expiry extension as a time value
     */
    extensionDuration?: pulumi.Input<string>;
    /**
     * The repetition limit for extending the profile expiry
     */
    extensionLimit?: pulumi.Input<number>;
    /**
     * The name of the Britive profile
     */
    name?: pulumi.Input<string>;
    /**
     * he profile expiry notification as a time value
     */
    notificationPriorToExpiration?: pulumi.Input<string>;
}
