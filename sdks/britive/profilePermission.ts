// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ProfilePermission extends pulumi.CustomResource {
    /**
     * Get an existing ProfilePermission resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProfilePermissionState, opts?: pulumi.CustomResourceOptions): ProfilePermission {
        return new ProfilePermission(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'britive:index/profilePermission:ProfilePermission';

    /**
     * Returns true if the given object is an instance of ProfilePermission.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ProfilePermission {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ProfilePermission.__pulumiType;
    }

    /**
     * The application name of the application, profile is assciated with
     */
    public readonly appName!: pulumi.Output<string>;
    /**
     * The name of permission
     */
    public readonly permissionName!: pulumi.Output<string>;
    /**
     * The type of permission
     */
    public readonly permissionType!: pulumi.Output<string>;
    /**
     * The identifier of the profile
     */
    public readonly profileId!: pulumi.Output<string>;
    /**
     * The name of the profile
     */
    public readonly profileName!: pulumi.Output<string>;

    /**
     * Create a ProfilePermission resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProfilePermissionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProfilePermissionArgs | ProfilePermissionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ProfilePermissionState | undefined;
            resourceInputs["appName"] = state ? state.appName : undefined;
            resourceInputs["permissionName"] = state ? state.permissionName : undefined;
            resourceInputs["permissionType"] = state ? state.permissionType : undefined;
            resourceInputs["profileId"] = state ? state.profileId : undefined;
            resourceInputs["profileName"] = state ? state.profileName : undefined;
        } else {
            const args = argsOrState as ProfilePermissionArgs | undefined;
            if ((!args || args.permissionName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'permissionName'");
            }
            if ((!args || args.permissionType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'permissionType'");
            }
            if ((!args || args.profileId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'profileId'");
            }
            resourceInputs["appName"] = args ? args.appName : undefined;
            resourceInputs["permissionName"] = args ? args.permissionName : undefined;
            resourceInputs["permissionType"] = args ? args.permissionType : undefined;
            resourceInputs["profileId"] = args ? args.profileId : undefined;
            resourceInputs["profileName"] = args ? args.profileName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ProfilePermission.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ProfilePermission resources.
 */
export interface ProfilePermissionState {
    /**
     * The application name of the application, profile is assciated with
     */
    appName?: pulumi.Input<string>;
    /**
     * The name of permission
     */
    permissionName?: pulumi.Input<string>;
    /**
     * The type of permission
     */
    permissionType?: pulumi.Input<string>;
    /**
     * The identifier of the profile
     */
    profileId?: pulumi.Input<string>;
    /**
     * The name of the profile
     */
    profileName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ProfilePermission resource.
 */
export interface ProfilePermissionArgs {
    /**
     * The application name of the application, profile is assciated with
     */
    appName?: pulumi.Input<string>;
    /**
     * The name of permission
     */
    permissionName: pulumi.Input<string>;
    /**
     * The type of permission
     */
    permissionType: pulumi.Input<string>;
    /**
     * The identifier of the profile
     */
    profileId: pulumi.Input<string>;
    /**
     * The name of the profile
     */
    profileName?: pulumi.Input<string>;
}
