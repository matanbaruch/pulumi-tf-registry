// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { GetApplicationArgs, GetApplicationResult, GetApplicationOutputArgs } from "./getApplication";
export const getApplication: typeof import("./getApplication").getApplication = null as any;
export const getApplicationOutput: typeof import("./getApplication").getApplicationOutput = null as any;
utilities.lazyLoad(exports, ["getApplication","getApplicationOutput"], () => require("./getApplication"));

export { GetIdentityProviderArgs, GetIdentityProviderResult, GetIdentityProviderOutputArgs } from "./getIdentityProvider";
export const getIdentityProvider: typeof import("./getIdentityProvider").getIdentityProvider = null as any;
export const getIdentityProviderOutput: typeof import("./getIdentityProvider").getIdentityProviderOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityProvider","getIdentityProviderOutput"], () => require("./getIdentityProvider"));

export { PermissionArgs, PermissionState } from "./permission";
export type Permission = import("./permission").Permission;
export const Permission: typeof import("./permission").Permission = null as any;
utilities.lazyLoad(exports, ["Permission"], () => require("./permission"));

export { PolicyArgs, PolicyState } from "./policy";
export type Policy = import("./policy").Policy;
export const Policy: typeof import("./policy").Policy = null as any;
utilities.lazyLoad(exports, ["Policy"], () => require("./policy"));

export { ProfileArgs, ProfileState } from "./profile";
export type Profile = import("./profile").Profile;
export const Profile: typeof import("./profile").Profile = null as any;
utilities.lazyLoad(exports, ["Profile"], () => require("./profile"));

export { ProfilePermissionArgs, ProfilePermissionState } from "./profilePermission";
export type ProfilePermission = import("./profilePermission").ProfilePermission;
export const ProfilePermission: typeof import("./profilePermission").ProfilePermission = null as any;
utilities.lazyLoad(exports, ["ProfilePermission"], () => require("./profilePermission"));

export { ProfilePolicyArgs, ProfilePolicyState } from "./profilePolicy";
export type ProfilePolicy = import("./profilePolicy").ProfilePolicy;
export const ProfilePolicy: typeof import("./profilePolicy").ProfilePolicy = null as any;
utilities.lazyLoad(exports, ["ProfilePolicy"], () => require("./profilePolicy"));

export { ProfileSessionAttributeArgs, ProfileSessionAttributeState } from "./profileSessionAttribute";
export type ProfileSessionAttribute = import("./profileSessionAttribute").ProfileSessionAttribute;
export const ProfileSessionAttribute: typeof import("./profileSessionAttribute").ProfileSessionAttribute = null as any;
utilities.lazyLoad(exports, ["ProfileSessionAttribute"], () => require("./profileSessionAttribute"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { RoleArgs, RoleState } from "./role";
export type Role = import("./role").Role;
export const Role: typeof import("./role").Role = null as any;
utilities.lazyLoad(exports, ["Role"], () => require("./role"));

export { TagArgs, TagState } from "./tag";
export type Tag = import("./tag").Tag;
export const Tag: typeof import("./tag").Tag = null as any;
utilities.lazyLoad(exports, ["Tag"], () => require("./tag"));

export { TagMemberArgs, TagMemberState } from "./tagMember";
export type TagMember = import("./tagMember").TagMember;
export const TagMember: typeof import("./tagMember").TagMember = null as any;
utilities.lazyLoad(exports, ["TagMember"], () => require("./tagMember"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "britive:index/permission:Permission":
                return new Permission(name, <any>undefined, { urn })
            case "britive:index/policy:Policy":
                return new Policy(name, <any>undefined, { urn })
            case "britive:index/profile:Profile":
                return new Profile(name, <any>undefined, { urn })
            case "britive:index/profilePermission:ProfilePermission":
                return new ProfilePermission(name, <any>undefined, { urn })
            case "britive:index/profilePolicy:ProfilePolicy":
                return new ProfilePolicy(name, <any>undefined, { urn })
            case "britive:index/profileSessionAttribute:ProfileSessionAttribute":
                return new ProfileSessionAttribute(name, <any>undefined, { urn })
            case "britive:index/role:Role":
                return new Role(name, <any>undefined, { urn })
            case "britive:index/tag:Tag":
                return new Tag(name, <any>undefined, { urn })
            case "britive:index/tagMember:TagMember":
                return new TagMember(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("britive", "index/permission", _module)
pulumi.runtime.registerResourceModule("britive", "index/policy", _module)
pulumi.runtime.registerResourceModule("britive", "index/profile", _module)
pulumi.runtime.registerResourceModule("britive", "index/profilePermission", _module)
pulumi.runtime.registerResourceModule("britive", "index/profilePolicy", _module)
pulumi.runtime.registerResourceModule("britive", "index/profileSessionAttribute", _module)
pulumi.runtime.registerResourceModule("britive", "index/role", _module)
pulumi.runtime.registerResourceModule("britive", "index/tag", _module)
pulumi.runtime.registerResourceModule("britive", "index/tagMember", _module)
pulumi.runtime.registerResourcePackage("britive", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:britive") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
