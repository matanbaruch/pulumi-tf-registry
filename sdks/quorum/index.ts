// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { BootstrapAccountArgs, BootstrapAccountState } from "./bootstrapAccount";
export type BootstrapAccount = import("./bootstrapAccount").BootstrapAccount;
export const BootstrapAccount: typeof import("./bootstrapAccount").BootstrapAccount = null as any;
utilities.lazyLoad(exports, ["BootstrapAccount"], () => require("./bootstrapAccount"));

export { BootstrapDataDirArgs, BootstrapDataDirState } from "./bootstrapDataDir";
export type BootstrapDataDir = import("./bootstrapDataDir").BootstrapDataDir;
export const BootstrapDataDir: typeof import("./bootstrapDataDir").BootstrapDataDir = null as any;
utilities.lazyLoad(exports, ["BootstrapDataDir"], () => require("./bootstrapDataDir"));

export { BootstrapIstanbulExtradataArgs, BootstrapIstanbulExtradataState } from "./bootstrapIstanbulExtradata";
export type BootstrapIstanbulExtradata = import("./bootstrapIstanbulExtradata").BootstrapIstanbulExtradata;
export const BootstrapIstanbulExtradata: typeof import("./bootstrapIstanbulExtradata").BootstrapIstanbulExtradata = null as any;
utilities.lazyLoad(exports, ["BootstrapIstanbulExtradata"], () => require("./bootstrapIstanbulExtradata"));

export { BootstrapKeystoreArgs, BootstrapKeystoreState } from "./bootstrapKeystore";
export type BootstrapKeystore = import("./bootstrapKeystore").BootstrapKeystore;
export const BootstrapKeystore: typeof import("./bootstrapKeystore").BootstrapKeystore = null as any;
utilities.lazyLoad(exports, ["BootstrapKeystore"], () => require("./bootstrapKeystore"));

export { BootstrapNetworkArgs, BootstrapNetworkState } from "./bootstrapNetwork";
export type BootstrapNetwork = import("./bootstrapNetwork").BootstrapNetwork;
export const BootstrapNetwork: typeof import("./bootstrapNetwork").BootstrapNetwork = null as any;
utilities.lazyLoad(exports, ["BootstrapNetwork"], () => require("./bootstrapNetwork"));

export { BootstrapNodeKeyArgs, BootstrapNodeKeyState } from "./bootstrapNodeKey";
export type BootstrapNodeKey = import("./bootstrapNodeKey").BootstrapNodeKey;
export const BootstrapNodeKey: typeof import("./bootstrapNodeKey").BootstrapNodeKey = null as any;
utilities.lazyLoad(exports, ["BootstrapNodeKey"], () => require("./bootstrapNodeKey"));

export { GetBootstrapGenesisMixhashArgs, GetBootstrapGenesisMixhashResult, GetBootstrapGenesisMixhashOutputArgs } from "./getBootstrapGenesisMixhash";
export const getBootstrapGenesisMixhash: typeof import("./getBootstrapGenesisMixhash").getBootstrapGenesisMixhash = null as any;
export const getBootstrapGenesisMixhashOutput: typeof import("./getBootstrapGenesisMixhash").getBootstrapGenesisMixhashOutput = null as any;
utilities.lazyLoad(exports, ["getBootstrapGenesisMixhash","getBootstrapGenesisMixhashOutput"], () => require("./getBootstrapGenesisMixhash"));

export { GetBootstrapNodeKeyArgs, GetBootstrapNodeKeyResult, GetBootstrapNodeKeyOutputArgs } from "./getBootstrapNodeKey";
export const getBootstrapNodeKey: typeof import("./getBootstrapNodeKey").getBootstrapNodeKey = null as any;
export const getBootstrapNodeKeyOutput: typeof import("./getBootstrapNodeKey").getBootstrapNodeKeyOutput = null as any;
utilities.lazyLoad(exports, ["getBootstrapNodeKey","getBootstrapNodeKeyOutput"], () => require("./getBootstrapNodeKey"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { TransactionManagerKeypairArgs, TransactionManagerKeypairState } from "./transactionManagerKeypair";
export type TransactionManagerKeypair = import("./transactionManagerKeypair").TransactionManagerKeypair;
export const TransactionManagerKeypair: typeof import("./transactionManagerKeypair").TransactionManagerKeypair = null as any;
utilities.lazyLoad(exports, ["TransactionManagerKeypair"], () => require("./transactionManagerKeypair"));


// Export sub-modules:
import * as types from "./types";

export {
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "quorum:index/bootstrapAccount:BootstrapAccount":
                return new BootstrapAccount(name, <any>undefined, { urn })
            case "quorum:index/bootstrapDataDir:BootstrapDataDir":
                return new BootstrapDataDir(name, <any>undefined, { urn })
            case "quorum:index/bootstrapIstanbulExtradata:BootstrapIstanbulExtradata":
                return new BootstrapIstanbulExtradata(name, <any>undefined, { urn })
            case "quorum:index/bootstrapKeystore:BootstrapKeystore":
                return new BootstrapKeystore(name, <any>undefined, { urn })
            case "quorum:index/bootstrapNetwork:BootstrapNetwork":
                return new BootstrapNetwork(name, <any>undefined, { urn })
            case "quorum:index/bootstrapNodeKey:BootstrapNodeKey":
                return new BootstrapNodeKey(name, <any>undefined, { urn })
            case "quorum:index/transactionManagerKeypair:TransactionManagerKeypair":
                return new TransactionManagerKeypair(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("quorum", "index/bootstrapAccount", _module)
pulumi.runtime.registerResourceModule("quorum", "index/bootstrapDataDir", _module)
pulumi.runtime.registerResourceModule("quorum", "index/bootstrapIstanbulExtradata", _module)
pulumi.runtime.registerResourceModule("quorum", "index/bootstrapKeystore", _module)
pulumi.runtime.registerResourceModule("quorum", "index/bootstrapNetwork", _module)
pulumi.runtime.registerResourceModule("quorum", "index/bootstrapNodeKey", _module)
pulumi.runtime.registerResourceModule("quorum", "index/transactionManagerKeypair", _module)
pulumi.runtime.registerResourcePackage("quorum", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:quorum") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
