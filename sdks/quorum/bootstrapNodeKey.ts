// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class BootstrapNodeKey extends pulumi.CustomResource {
    /**
     * Get an existing BootstrapNodeKey resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BootstrapNodeKeyState, opts?: pulumi.CustomResourceOptions): BootstrapNodeKey {
        return new BootstrapNodeKey(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'quorum:index/bootstrapNodeKey:BootstrapNodeKey';

    /**
     * Returns true if the given object is an instance of BootstrapNodeKey.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BootstrapNodeKey {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BootstrapNodeKey.__pulumiType;
    }

    /**
     * 64-byte hex value represents node ID which is seen being encoded in the username portion of enode URL. E.g.:
     * `enode://[hex node id]@localhost:22000`
     */
    public /*out*/ readonly hexNodeId!: pulumi.Output<string>;
    /**
     * Address representing public key for the newly created node key. This is mainly used to construct the initial validators
     * set encoded in `extradata` field of the genesis file
     */
    public /*out*/ readonly istanbulAddress!: pulumi.Output<string>;
    /**
     * 32-byte hex value represents the unique identifier for a node
     */
    public /*out*/ readonly nodeId!: pulumi.Output<string>;
    /**
     * Node key as hex. This can be used to populate `--nodekeyhex` CLI parameter
     */
    public /*out*/ readonly nodeKeyHex!: pulumi.Output<string>;

    /**
     * Create a BootstrapNodeKey resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: BootstrapNodeKeyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BootstrapNodeKeyArgs | BootstrapNodeKeyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BootstrapNodeKeyState | undefined;
            resourceInputs["hexNodeId"] = state ? state.hexNodeId : undefined;
            resourceInputs["istanbulAddress"] = state ? state.istanbulAddress : undefined;
            resourceInputs["nodeId"] = state ? state.nodeId : undefined;
            resourceInputs["nodeKeyHex"] = state ? state.nodeKeyHex : undefined;
        } else {
            const args = argsOrState as BootstrapNodeKeyArgs | undefined;
            resourceInputs["hexNodeId"] = undefined /*out*/;
            resourceInputs["istanbulAddress"] = undefined /*out*/;
            resourceInputs["nodeId"] = undefined /*out*/;
            resourceInputs["nodeKeyHex"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["nodeKeyHex"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(BootstrapNodeKey.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering BootstrapNodeKey resources.
 */
export interface BootstrapNodeKeyState {
    /**
     * 64-byte hex value represents node ID which is seen being encoded in the username portion of enode URL. E.g.:
     * `enode://[hex node id]@localhost:22000`
     */
    hexNodeId?: pulumi.Input<string>;
    /**
     * Address representing public key for the newly created node key. This is mainly used to construct the initial validators
     * set encoded in `extradata` field of the genesis file
     */
    istanbulAddress?: pulumi.Input<string>;
    /**
     * 32-byte hex value represents the unique identifier for a node
     */
    nodeId?: pulumi.Input<string>;
    /**
     * Node key as hex. This can be used to populate `--nodekeyhex` CLI parameter
     */
    nodeKeyHex?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a BootstrapNodeKey resource.
 */
export interface BootstrapNodeKeyArgs {
}
