// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class BootstrapIstanbulExtradata extends pulumi.CustomResource {
    /**
     * Get an existing BootstrapIstanbulExtradata resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BootstrapIstanbulExtradataState, opts?: pulumi.CustomResourceOptions): BootstrapIstanbulExtradata {
        return new BootstrapIstanbulExtradata(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'quorum:index/bootstrapIstanbulExtradata:BootstrapIstanbulExtradata';

    /**
     * Returns true if the given object is an instance of BootstrapIstanbulExtradata.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BootstrapIstanbulExtradata {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BootstrapIstanbulExtradata.__pulumiType;
    }

    /**
     * Computed value which can be used in genesis file
     */
    public /*out*/ readonly extradata!: pulumi.Output<string>;
    /**
     * list of Istanbul address to construct extradata
     */
    public readonly istanbulAddresses!: pulumi.Output<string[]>;
    /**
     * generate extradata using RLP encoding mode. Supported: ibft1 and ibft2. Default is ibft1
     */
    public readonly mode!: pulumi.Output<string | undefined>;
    /**
     * Vanity Hex Value to be included in the extradata
     */
    public readonly vanity!: pulumi.Output<string | undefined>;

    /**
     * Create a BootstrapIstanbulExtradata resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BootstrapIstanbulExtradataArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BootstrapIstanbulExtradataArgs | BootstrapIstanbulExtradataState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BootstrapIstanbulExtradataState | undefined;
            resourceInputs["extradata"] = state ? state.extradata : undefined;
            resourceInputs["istanbulAddresses"] = state ? state.istanbulAddresses : undefined;
            resourceInputs["mode"] = state ? state.mode : undefined;
            resourceInputs["vanity"] = state ? state.vanity : undefined;
        } else {
            const args = argsOrState as BootstrapIstanbulExtradataArgs | undefined;
            if ((!args || args.istanbulAddresses === undefined) && !opts.urn) {
                throw new Error("Missing required property 'istanbulAddresses'");
            }
            resourceInputs["istanbulAddresses"] = args ? args.istanbulAddresses : undefined;
            resourceInputs["mode"] = args ? args.mode : undefined;
            resourceInputs["vanity"] = args ? args.vanity : undefined;
            resourceInputs["extradata"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BootstrapIstanbulExtradata.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering BootstrapIstanbulExtradata resources.
 */
export interface BootstrapIstanbulExtradataState {
    /**
     * Computed value which can be used in genesis file
     */
    extradata?: pulumi.Input<string>;
    /**
     * list of Istanbul address to construct extradata
     */
    istanbulAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * generate extradata using RLP encoding mode. Supported: ibft1 and ibft2. Default is ibft1
     */
    mode?: pulumi.Input<string>;
    /**
     * Vanity Hex Value to be included in the extradata
     */
    vanity?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a BootstrapIstanbulExtradata resource.
 */
export interface BootstrapIstanbulExtradataArgs {
    /**
     * list of Istanbul address to construct extradata
     */
    istanbulAddresses: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * generate extradata using RLP encoding mode. Supported: ibft1 and ibft2. Default is ibft1
     */
    mode?: pulumi.Input<string>;
    /**
     * Vanity Hex Value to be included in the extradata
     */
    vanity?: pulumi.Input<string>;
}
