// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class BootstrapDataDir extends pulumi.CustomResource {
    /**
     * Get an existing BootstrapDataDir resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BootstrapDataDirState, opts?: pulumi.CustomResourceOptions): BootstrapDataDir {
        return new BootstrapDataDir(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'quorum:index/bootstrapDataDir:BootstrapDataDir';

    /**
     * Returns true if the given object is an instance of BootstrapDataDir.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BootstrapDataDir {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BootstrapDataDir.__pulumiType;
    }

    /**
     * Directory to intialize a genesis block
     */
    public readonly dataDir!: pulumi.Output<string>;
    /**
     * Absolute path to the data dir
     */
    public /*out*/ readonly dataDirAbs!: pulumi.Output<string>;
    /**
     * Genesis file content in JSON format
     */
    public readonly genesis!: pulumi.Output<string>;
    /**
     * The instance name of the node. This must be the same as the value in geth node config. Default is `geth`
     */
    public readonly instanceName!: pulumi.Output<string | undefined>;

    /**
     * Create a BootstrapDataDir resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BootstrapDataDirArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BootstrapDataDirArgs | BootstrapDataDirState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BootstrapDataDirState | undefined;
            resourceInputs["dataDir"] = state ? state.dataDir : undefined;
            resourceInputs["dataDirAbs"] = state ? state.dataDirAbs : undefined;
            resourceInputs["genesis"] = state ? state.genesis : undefined;
            resourceInputs["instanceName"] = state ? state.instanceName : undefined;
        } else {
            const args = argsOrState as BootstrapDataDirArgs | undefined;
            if ((!args || args.dataDir === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dataDir'");
            }
            if ((!args || args.genesis === undefined) && !opts.urn) {
                throw new Error("Missing required property 'genesis'");
            }
            resourceInputs["dataDir"] = args ? args.dataDir : undefined;
            resourceInputs["genesis"] = args ? args.genesis : undefined;
            resourceInputs["instanceName"] = args ? args.instanceName : undefined;
            resourceInputs["dataDirAbs"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BootstrapDataDir.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering BootstrapDataDir resources.
 */
export interface BootstrapDataDirState {
    /**
     * Directory to intialize a genesis block
     */
    dataDir?: pulumi.Input<string>;
    /**
     * Absolute path to the data dir
     */
    dataDirAbs?: pulumi.Input<string>;
    /**
     * Genesis file content in JSON format
     */
    genesis?: pulumi.Input<string>;
    /**
     * The instance name of the node. This must be the same as the value in geth node config. Default is `geth`
     */
    instanceName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a BootstrapDataDir resource.
 */
export interface BootstrapDataDirArgs {
    /**
     * Directory to intialize a genesis block
     */
    dataDir: pulumi.Input<string>;
    /**
     * Genesis file content in JSON format
     */
    genesis: pulumi.Input<string>;
    /**
     * The instance name of the node. This must be the same as the value in geth node config. Default is `geth`
     */
    instanceName?: pulumi.Input<string>;
}
