// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class BootstrapAccount extends pulumi.CustomResource {
    /**
     * Get an existing BootstrapAccount resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BootstrapAccountState, opts?: pulumi.CustomResourceOptions): BootstrapAccount {
        return new BootstrapAccount(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'quorum:index/bootstrapAccount:BootstrapAccount';

    /**
     * Returns true if the given object is an instance of BootstrapAccount.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BootstrapAccount {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BootstrapAccount.__pulumiType;
    }

    /**
     * URL of the newly generated account
     */
    public /*out*/ readonly accountUrl!: pulumi.Output<string>;
    /**
     * Address of the newly generated account
     */
    public /*out*/ readonly address!: pulumi.Output<string>;
    /**
     * A place holder to keep account initial balance for referencing
     */
    public readonly balance!: pulumi.Output<string | undefined>;
    /**
     * Passphrase to lock/unlock the account. Default is empty
     */
    public readonly passphrase!: pulumi.Output<string | undefined>;
    /**
     * ID of a wallet storing the newly created account. For keystore, it's the keystore resource id
     */
    public readonly walletId!: pulumi.Output<string>;

    /**
     * Create a BootstrapAccount resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BootstrapAccountArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BootstrapAccountArgs | BootstrapAccountState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BootstrapAccountState | undefined;
            resourceInputs["accountUrl"] = state ? state.accountUrl : undefined;
            resourceInputs["address"] = state ? state.address : undefined;
            resourceInputs["balance"] = state ? state.balance : undefined;
            resourceInputs["passphrase"] = state ? state.passphrase : undefined;
            resourceInputs["walletId"] = state ? state.walletId : undefined;
        } else {
            const args = argsOrState as BootstrapAccountArgs | undefined;
            if ((!args || args.walletId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'walletId'");
            }
            resourceInputs["balance"] = args ? args.balance : undefined;
            resourceInputs["passphrase"] = args?.passphrase ? pulumi.secret(args.passphrase) : undefined;
            resourceInputs["walletId"] = args ? args.walletId : undefined;
            resourceInputs["accountUrl"] = undefined /*out*/;
            resourceInputs["address"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["passphrase"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(BootstrapAccount.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering BootstrapAccount resources.
 */
export interface BootstrapAccountState {
    /**
     * URL of the newly generated account
     */
    accountUrl?: pulumi.Input<string>;
    /**
     * Address of the newly generated account
     */
    address?: pulumi.Input<string>;
    /**
     * A place holder to keep account initial balance for referencing
     */
    balance?: pulumi.Input<string>;
    /**
     * Passphrase to lock/unlock the account. Default is empty
     */
    passphrase?: pulumi.Input<string>;
    /**
     * ID of a wallet storing the newly created account. For keystore, it's the keystore resource id
     */
    walletId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a BootstrapAccount resource.
 */
export interface BootstrapAccountArgs {
    /**
     * A place holder to keep account initial balance for referencing
     */
    balance?: pulumi.Input<string>;
    /**
     * Passphrase to lock/unlock the account. Default is empty
     */
    passphrase?: pulumi.Input<string>;
    /**
     * ID of a wallet storing the newly created account. For keystore, it's the keystore resource id
     */
    walletId: pulumi.Input<string>;
}
