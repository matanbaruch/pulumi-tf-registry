// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class TransactionManagerKeypair extends pulumi.CustomResource {
    /**
     * Get an existing TransactionManagerKeypair resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TransactionManagerKeypairState, opts?: pulumi.CustomResourceOptions): TransactionManagerKeypair {
        return new TransactionManagerKeypair(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'quorum:index/transactionManagerKeypair:TransactionManagerKeypair';

    /**
     * Returns true if the given object is an instance of TransactionManagerKeypair.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TransactionManagerKeypair {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TransactionManagerKeypair.__pulumiType;
    }

    public readonly config!: pulumi.Output<outputs.TransactionManagerKeypairConfig | undefined>;
    /**
     * Key Data in JSON format to be used by Private Transaction Manager
     */
    public /*out*/ readonly keyData!: pulumi.Output<string>;
    /**
     * A password to protect the keypair
     */
    public readonly password!: pulumi.Output<string | undefined>;
    /**
     * Private key in JSON representation
     */
    public /*out*/ readonly privateKeyJson!: pulumi.Output<string>;
    /**
     * Public key in standard base64 encoding
     */
    public /*out*/ readonly publicKeyB64!: pulumi.Output<string>;

    /**
     * Create a TransactionManagerKeypair resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: TransactionManagerKeypairArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TransactionManagerKeypairArgs | TransactionManagerKeypairState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TransactionManagerKeypairState | undefined;
            resourceInputs["config"] = state ? state.config : undefined;
            resourceInputs["keyData"] = state ? state.keyData : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["privateKeyJson"] = state ? state.privateKeyJson : undefined;
            resourceInputs["publicKeyB64"] = state ? state.publicKeyB64 : undefined;
        } else {
            const args = argsOrState as TransactionManagerKeypairArgs | undefined;
            resourceInputs["config"] = args ? args.config : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["keyData"] = undefined /*out*/;
            resourceInputs["privateKeyJson"] = undefined /*out*/;
            resourceInputs["publicKeyB64"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["keyData", "password", "privateKeyJson"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(TransactionManagerKeypair.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering TransactionManagerKeypair resources.
 */
export interface TransactionManagerKeypairState {
    config?: pulumi.Input<inputs.TransactionManagerKeypairConfig>;
    /**
     * Key Data in JSON format to be used by Private Transaction Manager
     */
    keyData?: pulumi.Input<string>;
    /**
     * A password to protect the keypair
     */
    password?: pulumi.Input<string>;
    /**
     * Private key in JSON representation
     */
    privateKeyJson?: pulumi.Input<string>;
    /**
     * Public key in standard base64 encoding
     */
    publicKeyB64?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a TransactionManagerKeypair resource.
 */
export interface TransactionManagerKeypairArgs {
    config?: pulumi.Input<inputs.TransactionManagerKeypairConfig>;
    /**
     * A password to protect the keypair
     */
    password?: pulumi.Input<string>;
}
