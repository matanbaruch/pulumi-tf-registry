// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class BootstrapKeystore extends pulumi.CustomResource {
    /**
     * Get an existing BootstrapKeystore resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BootstrapKeystoreState, opts?: pulumi.CustomResourceOptions): BootstrapKeystore {
        return new BootstrapKeystore(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'quorum:index/bootstrapKeystore:BootstrapKeystore';

    /**
     * Returns true if the given object is an instance of BootstrapKeystore.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BootstrapKeystore {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BootstrapKeystore.__pulumiType;
    }

    /**
     * Account being created under this keystore
     */
    public readonly accounts!: pulumi.Output<outputs.BootstrapKeystoreAccount[] | undefined>;
    /**
     * Directory contains private keys
     */
    public readonly keystoreDir!: pulumi.Output<string>;
    /**
     * Absolute path of the keystore directory
     */
    public /*out*/ readonly keystoreDirAbs!: pulumi.Output<string>;
    /**
     * True to lower the memory and CPU requirements of the key store scrypt KDF at the expense of security
     */
    public readonly useLightWeightKdf!: pulumi.Output<boolean | undefined>;

    /**
     * Create a BootstrapKeystore resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BootstrapKeystoreArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BootstrapKeystoreArgs | BootstrapKeystoreState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BootstrapKeystoreState | undefined;
            resourceInputs["accounts"] = state ? state.accounts : undefined;
            resourceInputs["keystoreDir"] = state ? state.keystoreDir : undefined;
            resourceInputs["keystoreDirAbs"] = state ? state.keystoreDirAbs : undefined;
            resourceInputs["useLightWeightKdf"] = state ? state.useLightWeightKdf : undefined;
        } else {
            const args = argsOrState as BootstrapKeystoreArgs | undefined;
            if ((!args || args.keystoreDir === undefined) && !opts.urn) {
                throw new Error("Missing required property 'keystoreDir'");
            }
            resourceInputs["accounts"] = args ? args.accounts : undefined;
            resourceInputs["keystoreDir"] = args ? args.keystoreDir : undefined;
            resourceInputs["useLightWeightKdf"] = args ? args.useLightWeightKdf : undefined;
            resourceInputs["keystoreDirAbs"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BootstrapKeystore.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering BootstrapKeystore resources.
 */
export interface BootstrapKeystoreState {
    /**
     * Account being created under this keystore
     */
    accounts?: pulumi.Input<pulumi.Input<inputs.BootstrapKeystoreAccount>[]>;
    /**
     * Directory contains private keys
     */
    keystoreDir?: pulumi.Input<string>;
    /**
     * Absolute path of the keystore directory
     */
    keystoreDirAbs?: pulumi.Input<string>;
    /**
     * True to lower the memory and CPU requirements of the key store scrypt KDF at the expense of security
     */
    useLightWeightKdf?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a BootstrapKeystore resource.
 */
export interface BootstrapKeystoreArgs {
    /**
     * Account being created under this keystore
     */
    accounts?: pulumi.Input<pulumi.Input<inputs.BootstrapKeystoreAccount>[]>;
    /**
     * Directory contains private keys
     */
    keystoreDir: pulumi.Input<string>;
    /**
     * True to lower the memory and CPU requirements of the key store scrypt KDF at the expense of security
     */
    useLightWeightKdf?: pulumi.Input<boolean>;
}
