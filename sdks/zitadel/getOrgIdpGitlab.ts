// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getOrgIdpGitlab(args: GetOrgIdpGitlabArgs, opts?: pulumi.InvokeOptions): Promise<GetOrgIdpGitlabResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("zitadel:index/getOrgIdpGitlab:getOrgIdpGitlab", {
        "id": args.id,
        "orgId": args.orgId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getOrgIdpGitlab.
 */
export interface GetOrgIdpGitlabArgs {
    id: string;
    orgId?: string;
}

/**
 * A collection of values returned by getOrgIdpGitlab.
 */
export interface GetOrgIdpGitlabResult {
    readonly clientId: string;
    readonly clientSecret: string;
    readonly id: string;
    readonly isAutoCreation: boolean;
    readonly isAutoUpdate: boolean;
    readonly isCreationAllowed: boolean;
    readonly isLinkingAllowed: boolean;
    readonly name: string;
    readonly orgId?: string;
    readonly scopes: string[];
}
export function getOrgIdpGitlabOutput(args: GetOrgIdpGitlabOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetOrgIdpGitlabResult> {
    return pulumi.output(args).apply((a: any) => getOrgIdpGitlab(a, opts))
}

/**
 * A collection of arguments for invoking getOrgIdpGitlab.
 */
export interface GetOrgIdpGitlabOutputArgs {
    id: pulumi.Input<string>;
    orgId?: pulumi.Input<string>;
}
