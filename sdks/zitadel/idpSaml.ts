// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class IdpSaml extends pulumi.CustomResource {
    /**
     * Get an existing IdpSaml resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IdpSamlState, opts?: pulumi.CustomResourceOptions): IdpSaml {
        return new IdpSaml(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'zitadel:index/idpSaml:IdpSaml';

    /**
     * Returns true if the given object is an instance of IdpSaml.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IdpSaml {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IdpSaml.__pulumiType;
    }

    /**
     * The binding, supported values: SAML_BINDING_UNSPECIFIED, SAML_BINDING_POST, SAML_BINDING_REDIRECT, SAML_BINDING_ARTIFACT
     */
    public readonly binding!: pulumi.Output<string | undefined>;
    /**
     * enable if a new account in ZITADEL should be created automatically on login with an external account
     */
    public readonly isAutoCreation!: pulumi.Output<boolean>;
    /**
     * enable if a the ZITADEL account fields should be updated automatically on each login
     */
    public readonly isAutoUpdate!: pulumi.Output<boolean>;
    /**
     * enable if users should be able to create a new account in ZITADEL when using an external account
     */
    public readonly isCreationAllowed!: pulumi.Output<boolean>;
    /**
     * enable if users should be able to link an existing ZITADEL user with an external account
     */
    public readonly isLinkingAllowed!: pulumi.Output<boolean>;
    /**
     * The metadata XML as plain string
     */
    public readonly metadataXml!: pulumi.Output<string>;
    /**
     * Name of the IDP
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Whether the SAML IDP requires signed requests
     */
    public readonly withSignedRequest!: pulumi.Output<boolean | undefined>;

    /**
     * Create a IdpSaml resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IdpSamlArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IdpSamlArgs | IdpSamlState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IdpSamlState | undefined;
            resourceInputs["binding"] = state ? state.binding : undefined;
            resourceInputs["isAutoCreation"] = state ? state.isAutoCreation : undefined;
            resourceInputs["isAutoUpdate"] = state ? state.isAutoUpdate : undefined;
            resourceInputs["isCreationAllowed"] = state ? state.isCreationAllowed : undefined;
            resourceInputs["isLinkingAllowed"] = state ? state.isLinkingAllowed : undefined;
            resourceInputs["metadataXml"] = state ? state.metadataXml : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["withSignedRequest"] = state ? state.withSignedRequest : undefined;
        } else {
            const args = argsOrState as IdpSamlArgs | undefined;
            if ((!args || args.isAutoCreation === undefined) && !opts.urn) {
                throw new Error("Missing required property 'isAutoCreation'");
            }
            if ((!args || args.isAutoUpdate === undefined) && !opts.urn) {
                throw new Error("Missing required property 'isAutoUpdate'");
            }
            if ((!args || args.isCreationAllowed === undefined) && !opts.urn) {
                throw new Error("Missing required property 'isCreationAllowed'");
            }
            if ((!args || args.isLinkingAllowed === undefined) && !opts.urn) {
                throw new Error("Missing required property 'isLinkingAllowed'");
            }
            if ((!args || args.metadataXml === undefined) && !opts.urn) {
                throw new Error("Missing required property 'metadataXml'");
            }
            resourceInputs["binding"] = args ? args.binding : undefined;
            resourceInputs["isAutoCreation"] = args ? args.isAutoCreation : undefined;
            resourceInputs["isAutoUpdate"] = args ? args.isAutoUpdate : undefined;
            resourceInputs["isCreationAllowed"] = args ? args.isCreationAllowed : undefined;
            resourceInputs["isLinkingAllowed"] = args ? args.isLinkingAllowed : undefined;
            resourceInputs["metadataXml"] = args ? args.metadataXml : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["withSignedRequest"] = args ? args.withSignedRequest : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IdpSaml.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering IdpSaml resources.
 */
export interface IdpSamlState {
    /**
     * The binding, supported values: SAML_BINDING_UNSPECIFIED, SAML_BINDING_POST, SAML_BINDING_REDIRECT, SAML_BINDING_ARTIFACT
     */
    binding?: pulumi.Input<string>;
    /**
     * enable if a new account in ZITADEL should be created automatically on login with an external account
     */
    isAutoCreation?: pulumi.Input<boolean>;
    /**
     * enable if a the ZITADEL account fields should be updated automatically on each login
     */
    isAutoUpdate?: pulumi.Input<boolean>;
    /**
     * enable if users should be able to create a new account in ZITADEL when using an external account
     */
    isCreationAllowed?: pulumi.Input<boolean>;
    /**
     * enable if users should be able to link an existing ZITADEL user with an external account
     */
    isLinkingAllowed?: pulumi.Input<boolean>;
    /**
     * The metadata XML as plain string
     */
    metadataXml?: pulumi.Input<string>;
    /**
     * Name of the IDP
     */
    name?: pulumi.Input<string>;
    /**
     * Whether the SAML IDP requires signed requests
     */
    withSignedRequest?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a IdpSaml resource.
 */
export interface IdpSamlArgs {
    /**
     * The binding, supported values: SAML_BINDING_UNSPECIFIED, SAML_BINDING_POST, SAML_BINDING_REDIRECT, SAML_BINDING_ARTIFACT
     */
    binding?: pulumi.Input<string>;
    /**
     * enable if a new account in ZITADEL should be created automatically on login with an external account
     */
    isAutoCreation: pulumi.Input<boolean>;
    /**
     * enable if a the ZITADEL account fields should be updated automatically on each login
     */
    isAutoUpdate: pulumi.Input<boolean>;
    /**
     * enable if users should be able to create a new account in ZITADEL when using an external account
     */
    isCreationAllowed: pulumi.Input<boolean>;
    /**
     * enable if users should be able to link an existing ZITADEL user with an external account
     */
    isLinkingAllowed: pulumi.Input<boolean>;
    /**
     * The metadata XML as plain string
     */
    metadataXml: pulumi.Input<string>;
    /**
     * Name of the IDP
     */
    name?: pulumi.Input<string>;
    /**
     * Whether the SAML IDP requires signed requests
     */
    withSignedRequest?: pulumi.Input<boolean>;
}
