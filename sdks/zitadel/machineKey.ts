// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class MachineKey extends pulumi.CustomResource {
    /**
     * Get an existing MachineKey resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MachineKeyState, opts?: pulumi.CustomResourceOptions): MachineKey {
        return new MachineKey(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'zitadel:index/machineKey:MachineKey';

    /**
     * Returns true if the given object is an instance of MachineKey.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MachineKey {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MachineKey.__pulumiType;
    }

    /**
     * Expiration date of the machine key in the RFC3339 format
     */
    public readonly expirationDate!: pulumi.Output<string>;
    /**
     * Value of the machine key
     */
    public /*out*/ readonly keyDetails!: pulumi.Output<string>;
    /**
     * Type of the machine key, supported values: KEY_TYPE_UNSPECIFIED, KEY_TYPE_JSON
     */
    public readonly keyType!: pulumi.Output<string>;
    /**
     * ID of the organization
     */
    public readonly orgId!: pulumi.Output<string | undefined>;
    /**
     * ID of the user
     */
    public readonly userId!: pulumi.Output<string>;

    /**
     * Create a MachineKey resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MachineKeyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MachineKeyArgs | MachineKeyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MachineKeyState | undefined;
            resourceInputs["expirationDate"] = state ? state.expirationDate : undefined;
            resourceInputs["keyDetails"] = state ? state.keyDetails : undefined;
            resourceInputs["keyType"] = state ? state.keyType : undefined;
            resourceInputs["orgId"] = state ? state.orgId : undefined;
            resourceInputs["userId"] = state ? state.userId : undefined;
        } else {
            const args = argsOrState as MachineKeyArgs | undefined;
            if ((!args || args.keyType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'keyType'");
            }
            if ((!args || args.userId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userId'");
            }
            resourceInputs["expirationDate"] = args ? args.expirationDate : undefined;
            resourceInputs["keyType"] = args ? args.keyType : undefined;
            resourceInputs["orgId"] = args ? args.orgId : undefined;
            resourceInputs["userId"] = args ? args.userId : undefined;
            resourceInputs["keyDetails"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["keyDetails"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(MachineKey.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering MachineKey resources.
 */
export interface MachineKeyState {
    /**
     * Expiration date of the machine key in the RFC3339 format
     */
    expirationDate?: pulumi.Input<string>;
    /**
     * Value of the machine key
     */
    keyDetails?: pulumi.Input<string>;
    /**
     * Type of the machine key, supported values: KEY_TYPE_UNSPECIFIED, KEY_TYPE_JSON
     */
    keyType?: pulumi.Input<string>;
    /**
     * ID of the organization
     */
    orgId?: pulumi.Input<string>;
    /**
     * ID of the user
     */
    userId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a MachineKey resource.
 */
export interface MachineKeyArgs {
    /**
     * Expiration date of the machine key in the RFC3339 format
     */
    expirationDate?: pulumi.Input<string>;
    /**
     * Type of the machine key, supported values: KEY_TYPE_UNSPECIFIED, KEY_TYPE_JSON
     */
    keyType: pulumi.Input<string>;
    /**
     * ID of the organization
     */
    orgId?: pulumi.Input<string>;
    /**
     * ID of the user
     */
    userId: pulumi.Input<string>;
}
