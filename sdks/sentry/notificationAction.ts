// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class NotificationAction extends pulumi.CustomResource {
    /**
     * Get an existing NotificationAction resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NotificationActionState, opts?: pulumi.CustomResourceOptions): NotificationAction {
        return new NotificationAction(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sentry:index/notificationAction:NotificationAction';

    /**
     * Returns true if the given object is an instance of NotificationAction.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NotificationAction {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NotificationAction.__pulumiType;
    }

    /**
     * The ID of the integration that is used for sending the notification. Use the `sentry.getOrganizationIntegration` data
     * source to retrieve an integration. Required if `service_type` is `slack`, `pagerduty` or `opsgenie`.
     */
    public readonly integrationId!: pulumi.Output<string | undefined>;
    /**
     * The slug of the organization the project belongs to.
     */
    public readonly organization!: pulumi.Output<string>;
    /**
     * The list of project slugs that the Notification Action is created for.
     */
    public readonly projects!: pulumi.Output<string[]>;
    /**
     * The service that is used for sending the notification.
     */
    public readonly serviceType!: pulumi.Output<string>;
    /**
     * The display name of the target that is used for sending the notification (e.g. Slack channel name). Required if
     * `service_type` is `slack` or `opsgenie`.
     */
    public readonly targetDisplay!: pulumi.Output<string | undefined>;
    /**
     * The identifier of the target that is used for sending the notification (e.g. Slack channel ID). Required if
     * `service_type` is `slack` or `opsgenie`.
     */
    public readonly targetIdentifier!: pulumi.Output<string | undefined>;
    /**
     * The type of trigger that will activate this action. Valid values are `spike-protection`.
     */
    public readonly triggerType!: pulumi.Output<string>;

    /**
     * Create a NotificationAction resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NotificationActionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NotificationActionArgs | NotificationActionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NotificationActionState | undefined;
            resourceInputs["integrationId"] = state ? state.integrationId : undefined;
            resourceInputs["organization"] = state ? state.organization : undefined;
            resourceInputs["projects"] = state ? state.projects : undefined;
            resourceInputs["serviceType"] = state ? state.serviceType : undefined;
            resourceInputs["targetDisplay"] = state ? state.targetDisplay : undefined;
            resourceInputs["targetIdentifier"] = state ? state.targetIdentifier : undefined;
            resourceInputs["triggerType"] = state ? state.triggerType : undefined;
        } else {
            const args = argsOrState as NotificationActionArgs | undefined;
            if ((!args || args.organization === undefined) && !opts.urn) {
                throw new Error("Missing required property 'organization'");
            }
            if ((!args || args.projects === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projects'");
            }
            if ((!args || args.serviceType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceType'");
            }
            if ((!args || args.triggerType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'triggerType'");
            }
            resourceInputs["integrationId"] = args ? args.integrationId : undefined;
            resourceInputs["organization"] = args ? args.organization : undefined;
            resourceInputs["projects"] = args ? args.projects : undefined;
            resourceInputs["serviceType"] = args ? args.serviceType : undefined;
            resourceInputs["targetDisplay"] = args ? args.targetDisplay : undefined;
            resourceInputs["targetIdentifier"] = args ? args.targetIdentifier : undefined;
            resourceInputs["triggerType"] = args ? args.triggerType : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NotificationAction.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering NotificationAction resources.
 */
export interface NotificationActionState {
    /**
     * The ID of the integration that is used for sending the notification. Use the `sentry.getOrganizationIntegration` data
     * source to retrieve an integration. Required if `service_type` is `slack`, `pagerduty` or `opsgenie`.
     */
    integrationId?: pulumi.Input<string>;
    /**
     * The slug of the organization the project belongs to.
     */
    organization?: pulumi.Input<string>;
    /**
     * The list of project slugs that the Notification Action is created for.
     */
    projects?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The service that is used for sending the notification.
     */
    serviceType?: pulumi.Input<string>;
    /**
     * The display name of the target that is used for sending the notification (e.g. Slack channel name). Required if
     * `service_type` is `slack` or `opsgenie`.
     */
    targetDisplay?: pulumi.Input<string>;
    /**
     * The identifier of the target that is used for sending the notification (e.g. Slack channel ID). Required if
     * `service_type` is `slack` or `opsgenie`.
     */
    targetIdentifier?: pulumi.Input<string>;
    /**
     * The type of trigger that will activate this action. Valid values are `spike-protection`.
     */
    triggerType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NotificationAction resource.
 */
export interface NotificationActionArgs {
    /**
     * The ID of the integration that is used for sending the notification. Use the `sentry.getOrganizationIntegration` data
     * source to retrieve an integration. Required if `service_type` is `slack`, `pagerduty` or `opsgenie`.
     */
    integrationId?: pulumi.Input<string>;
    /**
     * The slug of the organization the project belongs to.
     */
    organization: pulumi.Input<string>;
    /**
     * The list of project slugs that the Notification Action is created for.
     */
    projects: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The service that is used for sending the notification.
     */
    serviceType: pulumi.Input<string>;
    /**
     * The display name of the target that is used for sending the notification (e.g. Slack channel name). Required if
     * `service_type` is `slack` or `opsgenie`.
     */
    targetDisplay?: pulumi.Input<string>;
    /**
     * The identifier of the target that is used for sending the notification (e.g. Slack channel ID). Required if
     * `service_type` is `slack` or `opsgenie`.
     */
    targetIdentifier?: pulumi.Input<string>;
    /**
     * The type of trigger that will activate this action. Valid values are `spike-protection`.
     */
    triggerType: pulumi.Input<string>;
}
