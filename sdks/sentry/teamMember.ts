// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class TeamMember extends pulumi.CustomResource {
    /**
     * Get an existing TeamMember resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TeamMemberState, opts?: pulumi.CustomResourceOptions): TeamMember {
        return new TeamMember(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sentry:index/teamMember:TeamMember';

    /**
     * Returns true if the given object is an instance of TeamMember.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TeamMember {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TeamMember.__pulumiType;
    }

    /**
     * The effective role of the member in the team. This represents the highest role, determined by comparing the lower role
     * assigned by the member's organizational role with the role assigned by the member's team role.
     */
    public /*out*/ readonly effectiveRole!: pulumi.Output<string>;
    /**
     * The ID of the member to add to the team.
     */
    public readonly memberId!: pulumi.Output<string>;
    /**
     * The slug of the organization the team should be created for.
     */
    public readonly organization!: pulumi.Output<string>;
    /**
     * The role of the member in the team. When not set, resolve to the minimum team role given by this member's organization
     * role.
     */
    public readonly role!: pulumi.Output<string | undefined>;
    /**
     * The slug of the team to add the member to.
     */
    public readonly team!: pulumi.Output<string>;

    /**
     * Create a TeamMember resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TeamMemberArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TeamMemberArgs | TeamMemberState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TeamMemberState | undefined;
            resourceInputs["effectiveRole"] = state ? state.effectiveRole : undefined;
            resourceInputs["memberId"] = state ? state.memberId : undefined;
            resourceInputs["organization"] = state ? state.organization : undefined;
            resourceInputs["role"] = state ? state.role : undefined;
            resourceInputs["team"] = state ? state.team : undefined;
        } else {
            const args = argsOrState as TeamMemberArgs | undefined;
            if ((!args || args.memberId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'memberId'");
            }
            if ((!args || args.organization === undefined) && !opts.urn) {
                throw new Error("Missing required property 'organization'");
            }
            if ((!args || args.team === undefined) && !opts.urn) {
                throw new Error("Missing required property 'team'");
            }
            resourceInputs["memberId"] = args ? args.memberId : undefined;
            resourceInputs["organization"] = args ? args.organization : undefined;
            resourceInputs["role"] = args ? args.role : undefined;
            resourceInputs["team"] = args ? args.team : undefined;
            resourceInputs["effectiveRole"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TeamMember.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering TeamMember resources.
 */
export interface TeamMemberState {
    /**
     * The effective role of the member in the team. This represents the highest role, determined by comparing the lower role
     * assigned by the member's organizational role with the role assigned by the member's team role.
     */
    effectiveRole?: pulumi.Input<string>;
    /**
     * The ID of the member to add to the team.
     */
    memberId?: pulumi.Input<string>;
    /**
     * The slug of the organization the team should be created for.
     */
    organization?: pulumi.Input<string>;
    /**
     * The role of the member in the team. When not set, resolve to the minimum team role given by this member's organization
     * role.
     */
    role?: pulumi.Input<string>;
    /**
     * The slug of the team to add the member to.
     */
    team?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a TeamMember resource.
 */
export interface TeamMemberArgs {
    /**
     * The ID of the member to add to the team.
     */
    memberId: pulumi.Input<string>;
    /**
     * The slug of the organization the team should be created for.
     */
    organization: pulumi.Input<string>;
    /**
     * The role of the member in the team. When not set, resolve to the minimum team role given by this member's organization
     * role.
     */
    role?: pulumi.Input<string>;
    /**
     * The slug of the team to add the member to.
     */
    team: pulumi.Input<string>;
}
