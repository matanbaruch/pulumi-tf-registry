// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AllProjectsSpikeProtectionArgs, AllProjectsSpikeProtectionState } from "./allProjectsSpikeProtection";
export type AllProjectsSpikeProtection = import("./allProjectsSpikeProtection").AllProjectsSpikeProtection;
export const AllProjectsSpikeProtection: typeof import("./allProjectsSpikeProtection").AllProjectsSpikeProtection = null as any;
utilities.lazyLoad(exports, ["AllProjectsSpikeProtection"], () => require("./allProjectsSpikeProtection"));

export { DashboardArgs, DashboardState } from "./dashboard";
export type Dashboard = import("./dashboard").Dashboard;
export const Dashboard: typeof import("./dashboard").Dashboard = null as any;
utilities.lazyLoad(exports, ["Dashboard"], () => require("./dashboard"));

export { GetAllKeysArgs, GetAllKeysResult, GetAllKeysOutputArgs } from "./getAllKeys";
export const getAllKeys: typeof import("./getAllKeys").getAllKeys = null as any;
export const getAllKeysOutput: typeof import("./getAllKeys").getAllKeysOutput = null as any;
utilities.lazyLoad(exports, ["getAllKeys","getAllKeysOutput"], () => require("./getAllKeys"));

export { GetAllProjectsArgs, GetAllProjectsResult, GetAllProjectsOutputArgs } from "./getAllProjects";
export const getAllProjects: typeof import("./getAllProjects").getAllProjects = null as any;
export const getAllProjectsOutput: typeof import("./getAllProjects").getAllProjectsOutput = null as any;
utilities.lazyLoad(exports, ["getAllProjects","getAllProjectsOutput"], () => require("./getAllProjects"));

export { GetDashboardArgs, GetDashboardResult, GetDashboardOutputArgs } from "./getDashboard";
export const getDashboard: typeof import("./getDashboard").getDashboard = null as any;
export const getDashboardOutput: typeof import("./getDashboard").getDashboardOutput = null as any;
utilities.lazyLoad(exports, ["getDashboard","getDashboardOutput"], () => require("./getDashboard"));

export { GetIssueAlertArgs, GetIssueAlertResult, GetIssueAlertOutputArgs } from "./getIssueAlert";
export const getIssueAlert: typeof import("./getIssueAlert").getIssueAlert = null as any;
export const getIssueAlertOutput: typeof import("./getIssueAlert").getIssueAlertOutput = null as any;
utilities.lazyLoad(exports, ["getIssueAlert","getIssueAlertOutput"], () => require("./getIssueAlert"));

export { GetKeyArgs, GetKeyResult, GetKeyOutputArgs } from "./getKey";
export const getKey: typeof import("./getKey").getKey = null as any;
export const getKeyOutput: typeof import("./getKey").getKeyOutput = null as any;
utilities.lazyLoad(exports, ["getKey","getKeyOutput"], () => require("./getKey"));

export { GetMetricAlertArgs, GetMetricAlertResult, GetMetricAlertOutputArgs } from "./getMetricAlert";
export const getMetricAlert: typeof import("./getMetricAlert").getMetricAlert = null as any;
export const getMetricAlertOutput: typeof import("./getMetricAlert").getMetricAlertOutput = null as any;
utilities.lazyLoad(exports, ["getMetricAlert","getMetricAlertOutput"], () => require("./getMetricAlert"));

export { GetOrganizationArgs, GetOrganizationResult, GetOrganizationOutputArgs } from "./getOrganization";
export const getOrganization: typeof import("./getOrganization").getOrganization = null as any;
export const getOrganizationOutput: typeof import("./getOrganization").getOrganizationOutput = null as any;
utilities.lazyLoad(exports, ["getOrganization","getOrganizationOutput"], () => require("./getOrganization"));

export { GetOrganizationIntegrationArgs, GetOrganizationIntegrationResult, GetOrganizationIntegrationOutputArgs } from "./getOrganizationIntegration";
export const getOrganizationIntegration: typeof import("./getOrganizationIntegration").getOrganizationIntegration = null as any;
export const getOrganizationIntegrationOutput: typeof import("./getOrganizationIntegration").getOrganizationIntegrationOutput = null as any;
utilities.lazyLoad(exports, ["getOrganizationIntegration","getOrganizationIntegrationOutput"], () => require("./getOrganizationIntegration"));

export { GetOrganizationMemberArgs, GetOrganizationMemberResult, GetOrganizationMemberOutputArgs } from "./getOrganizationMember";
export const getOrganizationMember: typeof import("./getOrganizationMember").getOrganizationMember = null as any;
export const getOrganizationMemberOutput: typeof import("./getOrganizationMember").getOrganizationMemberOutput = null as any;
utilities.lazyLoad(exports, ["getOrganizationMember","getOrganizationMemberOutput"], () => require("./getOrganizationMember"));

export { GetProjectArgs, GetProjectResult, GetProjectOutputArgs } from "./getProject";
export const getProject: typeof import("./getProject").getProject = null as any;
export const getProjectOutput: typeof import("./getProject").getProjectOutput = null as any;
utilities.lazyLoad(exports, ["getProject","getProjectOutput"], () => require("./getProject"));

export { GetTeamArgs, GetTeamResult, GetTeamOutputArgs } from "./getTeam";
export const getTeam: typeof import("./getTeam").getTeam = null as any;
export const getTeamOutput: typeof import("./getTeam").getTeamOutput = null as any;
utilities.lazyLoad(exports, ["getTeam","getTeamOutput"], () => require("./getTeam"));

export { IntegrationOpsgenieArgs, IntegrationOpsgenieState } from "./integrationOpsgenie";
export type IntegrationOpsgenie = import("./integrationOpsgenie").IntegrationOpsgenie;
export const IntegrationOpsgenie: typeof import("./integrationOpsgenie").IntegrationOpsgenie = null as any;
utilities.lazyLoad(exports, ["IntegrationOpsgenie"], () => require("./integrationOpsgenie"));

export { IntegrationPagerdutyArgs, IntegrationPagerdutyState } from "./integrationPagerduty";
export type IntegrationPagerduty = import("./integrationPagerduty").IntegrationPagerduty;
export const IntegrationPagerduty: typeof import("./integrationPagerduty").IntegrationPagerduty = null as any;
utilities.lazyLoad(exports, ["IntegrationPagerduty"], () => require("./integrationPagerduty"));

export { IssueAlertArgs, IssueAlertState } from "./issueAlert";
export type IssueAlert = import("./issueAlert").IssueAlert;
export const IssueAlert: typeof import("./issueAlert").IssueAlert = null as any;
utilities.lazyLoad(exports, ["IssueAlert"], () => require("./issueAlert"));

export { KeyArgs, KeyState } from "./key";
export type Key = import("./key").Key;
export const Key: typeof import("./key").Key = null as any;
utilities.lazyLoad(exports, ["Key"], () => require("./key"));

export { MetricAlertArgs, MetricAlertState } from "./metricAlert";
export type MetricAlert = import("./metricAlert").MetricAlert;
export const MetricAlert: typeof import("./metricAlert").MetricAlert = null as any;
utilities.lazyLoad(exports, ["MetricAlert"], () => require("./metricAlert"));

export { NotificationActionArgs, NotificationActionState } from "./notificationAction";
export type NotificationAction = import("./notificationAction").NotificationAction;
export const NotificationAction: typeof import("./notificationAction").NotificationAction = null as any;
utilities.lazyLoad(exports, ["NotificationAction"], () => require("./notificationAction"));

export { OrganizationArgs, OrganizationState } from "./organization";
export type Organization = import("./organization").Organization;
export const Organization: typeof import("./organization").Organization = null as any;
utilities.lazyLoad(exports, ["Organization"], () => require("./organization"));

export { OrganizationCodeMappingArgs, OrganizationCodeMappingState } from "./organizationCodeMapping";
export type OrganizationCodeMapping = import("./organizationCodeMapping").OrganizationCodeMapping;
export const OrganizationCodeMapping: typeof import("./organizationCodeMapping").OrganizationCodeMapping = null as any;
utilities.lazyLoad(exports, ["OrganizationCodeMapping"], () => require("./organizationCodeMapping"));

export { OrganizationMemberArgs, OrganizationMemberState } from "./organizationMember";
export type OrganizationMember = import("./organizationMember").OrganizationMember;
export const OrganizationMember: typeof import("./organizationMember").OrganizationMember = null as any;
utilities.lazyLoad(exports, ["OrganizationMember"], () => require("./organizationMember"));

export { OrganizationRepositoryGithubArgs, OrganizationRepositoryGithubState } from "./organizationRepositoryGithub";
export type OrganizationRepositoryGithub = import("./organizationRepositoryGithub").OrganizationRepositoryGithub;
export const OrganizationRepositoryGithub: typeof import("./organizationRepositoryGithub").OrganizationRepositoryGithub = null as any;
utilities.lazyLoad(exports, ["OrganizationRepositoryGithub"], () => require("./organizationRepositoryGithub"));

export { PluginArgs, PluginState } from "./plugin";
export type Plugin = import("./plugin").Plugin;
export const Plugin: typeof import("./plugin").Plugin = null as any;
utilities.lazyLoad(exports, ["Plugin"], () => require("./plugin"));

export { ProjectArgs, ProjectState } from "./project";
export type Project = import("./project").Project;
export const Project: typeof import("./project").Project = null as any;
utilities.lazyLoad(exports, ["Project"], () => require("./project"));

export { ProjectInboundDataFilterArgs, ProjectInboundDataFilterState } from "./projectInboundDataFilter";
export type ProjectInboundDataFilter = import("./projectInboundDataFilter").ProjectInboundDataFilter;
export const ProjectInboundDataFilter: typeof import("./projectInboundDataFilter").ProjectInboundDataFilter = null as any;
utilities.lazyLoad(exports, ["ProjectInboundDataFilter"], () => require("./projectInboundDataFilter"));

export { ProjectSpikeProtectionArgs, ProjectSpikeProtectionState } from "./projectSpikeProtection";
export type ProjectSpikeProtection = import("./projectSpikeProtection").ProjectSpikeProtection;
export const ProjectSpikeProtection: typeof import("./projectSpikeProtection").ProjectSpikeProtection = null as any;
utilities.lazyLoad(exports, ["ProjectSpikeProtection"], () => require("./projectSpikeProtection"));

export { ProjectSymbolSourceArgs, ProjectSymbolSourceState } from "./projectSymbolSource";
export type ProjectSymbolSource = import("./projectSymbolSource").ProjectSymbolSource;
export const ProjectSymbolSource: typeof import("./projectSymbolSource").ProjectSymbolSource = null as any;
utilities.lazyLoad(exports, ["ProjectSymbolSource"], () => require("./projectSymbolSource"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { TeamArgs, TeamState } from "./team";
export type Team = import("./team").Team;
export const Team: typeof import("./team").Team = null as any;
utilities.lazyLoad(exports, ["Team"], () => require("./team"));

export { TeamMemberArgs, TeamMemberState } from "./teamMember";
export type TeamMember = import("./teamMember").TeamMember;
export const TeamMember: typeof import("./teamMember").TeamMember = null as any;
utilities.lazyLoad(exports, ["TeamMember"], () => require("./teamMember"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "sentry:index/allProjectsSpikeProtection:AllProjectsSpikeProtection":
                return new AllProjectsSpikeProtection(name, <any>undefined, { urn })
            case "sentry:index/dashboard:Dashboard":
                return new Dashboard(name, <any>undefined, { urn })
            case "sentry:index/integrationOpsgenie:IntegrationOpsgenie":
                return new IntegrationOpsgenie(name, <any>undefined, { urn })
            case "sentry:index/integrationPagerduty:IntegrationPagerduty":
                return new IntegrationPagerduty(name, <any>undefined, { urn })
            case "sentry:index/issueAlert:IssueAlert":
                return new IssueAlert(name, <any>undefined, { urn })
            case "sentry:index/key:Key":
                return new Key(name, <any>undefined, { urn })
            case "sentry:index/metricAlert:MetricAlert":
                return new MetricAlert(name, <any>undefined, { urn })
            case "sentry:index/notificationAction:NotificationAction":
                return new NotificationAction(name, <any>undefined, { urn })
            case "sentry:index/organization:Organization":
                return new Organization(name, <any>undefined, { urn })
            case "sentry:index/organizationCodeMapping:OrganizationCodeMapping":
                return new OrganizationCodeMapping(name, <any>undefined, { urn })
            case "sentry:index/organizationMember:OrganizationMember":
                return new OrganizationMember(name, <any>undefined, { urn })
            case "sentry:index/organizationRepositoryGithub:OrganizationRepositoryGithub":
                return new OrganizationRepositoryGithub(name, <any>undefined, { urn })
            case "sentry:index/plugin:Plugin":
                return new Plugin(name, <any>undefined, { urn })
            case "sentry:index/project:Project":
                return new Project(name, <any>undefined, { urn })
            case "sentry:index/projectInboundDataFilter:ProjectInboundDataFilter":
                return new ProjectInboundDataFilter(name, <any>undefined, { urn })
            case "sentry:index/projectSpikeProtection:ProjectSpikeProtection":
                return new ProjectSpikeProtection(name, <any>undefined, { urn })
            case "sentry:index/projectSymbolSource:ProjectSymbolSource":
                return new ProjectSymbolSource(name, <any>undefined, { urn })
            case "sentry:index/team:Team":
                return new Team(name, <any>undefined, { urn })
            case "sentry:index/teamMember:TeamMember":
                return new TeamMember(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("sentry", "index/allProjectsSpikeProtection", _module)
pulumi.runtime.registerResourceModule("sentry", "index/dashboard", _module)
pulumi.runtime.registerResourceModule("sentry", "index/integrationOpsgenie", _module)
pulumi.runtime.registerResourceModule("sentry", "index/integrationPagerduty", _module)
pulumi.runtime.registerResourceModule("sentry", "index/issueAlert", _module)
pulumi.runtime.registerResourceModule("sentry", "index/key", _module)
pulumi.runtime.registerResourceModule("sentry", "index/metricAlert", _module)
pulumi.runtime.registerResourceModule("sentry", "index/notificationAction", _module)
pulumi.runtime.registerResourceModule("sentry", "index/organization", _module)
pulumi.runtime.registerResourceModule("sentry", "index/organizationCodeMapping", _module)
pulumi.runtime.registerResourceModule("sentry", "index/organizationMember", _module)
pulumi.runtime.registerResourceModule("sentry", "index/organizationRepositoryGithub", _module)
pulumi.runtime.registerResourceModule("sentry", "index/plugin", _module)
pulumi.runtime.registerResourceModule("sentry", "index/project", _module)
pulumi.runtime.registerResourceModule("sentry", "index/projectInboundDataFilter", _module)
pulumi.runtime.registerResourceModule("sentry", "index/projectSpikeProtection", _module)
pulumi.runtime.registerResourceModule("sentry", "index/projectSymbolSource", _module)
pulumi.runtime.registerResourceModule("sentry", "index/team", _module)
pulumi.runtime.registerResourceModule("sentry", "index/teamMember", _module)
pulumi.runtime.registerResourcePackage("sentry", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:sentry") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
