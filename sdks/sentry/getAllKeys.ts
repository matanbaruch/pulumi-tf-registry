// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getAllKeys(args: GetAllKeysArgs, opts?: pulumi.InvokeOptions): Promise<GetAllKeysResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("sentry:index/getAllKeys:getAllKeys", {
        "filterStatus": args.filterStatus,
        "organization": args.organization,
        "project": args.project,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getAllKeys.
 */
export interface GetAllKeysArgs {
    filterStatus?: string;
    organization: string;
    project: string;
}

/**
 * A collection of values returned by getAllKeys.
 */
export interface GetAllKeysResult {
    readonly filterStatus?: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly keys: outputs.GetAllKeysKey[];
    readonly organization: string;
    readonly project: string;
}
export function getAllKeysOutput(args: GetAllKeysOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetAllKeysResult> {
    return pulumi.output(args).apply((a: any) => getAllKeys(a, opts))
}

/**
 * A collection of arguments for invoking getAllKeys.
 */
export interface GetAllKeysOutputArgs {
    filterStatus?: pulumi.Input<string>;
    organization: pulumi.Input<string>;
    project: pulumi.Input<string>;
}
