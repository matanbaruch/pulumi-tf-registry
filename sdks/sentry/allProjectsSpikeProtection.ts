// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class AllProjectsSpikeProtection extends pulumi.CustomResource {
    /**
     * Get an existing AllProjectsSpikeProtection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AllProjectsSpikeProtectionState, opts?: pulumi.CustomResourceOptions): AllProjectsSpikeProtection {
        return new AllProjectsSpikeProtection(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sentry:index/allProjectsSpikeProtection:AllProjectsSpikeProtection';

    /**
     * Returns true if the given object is an instance of AllProjectsSpikeProtection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AllProjectsSpikeProtection {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AllProjectsSpikeProtection.__pulumiType;
    }

    /**
     * Toggle the browser-extensions, localhost, filtered-transaction, or web-crawlers filter on or off for all projects.
     */
    public readonly enabled!: pulumi.Output<boolean>;
    /**
     * The slug of the organization the resource belongs to.
     */
    public readonly organization!: pulumi.Output<string>;
    /**
     * The slugs of the projects to enable or disable spike protection for.
     */
    public readonly projects!: pulumi.Output<string[]>;

    /**
     * Create a AllProjectsSpikeProtection resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AllProjectsSpikeProtectionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AllProjectsSpikeProtectionArgs | AllProjectsSpikeProtectionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AllProjectsSpikeProtectionState | undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["organization"] = state ? state.organization : undefined;
            resourceInputs["projects"] = state ? state.projects : undefined;
        } else {
            const args = argsOrState as AllProjectsSpikeProtectionArgs | undefined;
            if ((!args || args.enabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enabled'");
            }
            if ((!args || args.organization === undefined) && !opts.urn) {
                throw new Error("Missing required property 'organization'");
            }
            if ((!args || args.projects === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projects'");
            }
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["organization"] = args ? args.organization : undefined;
            resourceInputs["projects"] = args ? args.projects : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AllProjectsSpikeProtection.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AllProjectsSpikeProtection resources.
 */
export interface AllProjectsSpikeProtectionState {
    /**
     * Toggle the browser-extensions, localhost, filtered-transaction, or web-crawlers filter on or off for all projects.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The slug of the organization the resource belongs to.
     */
    organization?: pulumi.Input<string>;
    /**
     * The slugs of the projects to enable or disable spike protection for.
     */
    projects?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a AllProjectsSpikeProtection resource.
 */
export interface AllProjectsSpikeProtectionArgs {
    /**
     * Toggle the browser-extensions, localhost, filtered-transaction, or web-crawlers filter on or off for all projects.
     */
    enabled: pulumi.Input<boolean>;
    /**
     * The slug of the organization the resource belongs to.
     */
    organization: pulumi.Input<string>;
    /**
     * The slugs of the projects to enable or disable spike protection for.
     */
    projects: pulumi.Input<pulumi.Input<string>[]>;
}
