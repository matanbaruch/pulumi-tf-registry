// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AccountArgs, AccountState } from "./account";
export type Account = import("./account").Account;
export const Account: typeof import("./account").Account = null as any;
utilities.lazyLoad(exports, ["Account"], () => require("./account"));

export { InitiatorArgs, InitiatorState } from "./initiator";
export type Initiator = import("./initiator").Initiator;
export const Initiator: typeof import("./initiator").Initiator = null as any;
utilities.lazyLoad(exports, ["Initiator"], () => require("./initiator"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { VolumeArgs, VolumeState } from "./volume";
export type Volume = import("./volume").Volume;
export const Volume: typeof import("./volume").Volume = null as any;
utilities.lazyLoad(exports, ["Volume"], () => require("./volume"));

export { VolumeAccessGroupArgs, VolumeAccessGroupState } from "./volumeAccessGroup";
export type VolumeAccessGroup = import("./volumeAccessGroup").VolumeAccessGroup;
export const VolumeAccessGroup: typeof import("./volumeAccessGroup").VolumeAccessGroup = null as any;
utilities.lazyLoad(exports, ["VolumeAccessGroup"], () => require("./volumeAccessGroup"));


// Export sub-modules:
import * as config from "./config";

export {
    config,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "netapp-elementsw:index/account:Account":
                return new Account(name, <any>undefined, { urn })
            case "netapp-elementsw:index/initiator:Initiator":
                return new Initiator(name, <any>undefined, { urn })
            case "netapp-elementsw:index/volume:Volume":
                return new Volume(name, <any>undefined, { urn })
            case "netapp-elementsw:index/volumeAccessGroup:VolumeAccessGroup":
                return new VolumeAccessGroup(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("netapp-elementsw", "index/account", _module)
pulumi.runtime.registerResourceModule("netapp-elementsw", "index/initiator", _module)
pulumi.runtime.registerResourceModule("netapp-elementsw", "index/volume", _module)
pulumi.runtime.registerResourceModule("netapp-elementsw", "index/volumeAccessGroup", _module)
pulumi.runtime.registerResourcePackage("netapp-elementsw", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:netapp-elementsw") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
