// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { ApiKeyArgs, ApiKeyState } from "./apiKey";
export type ApiKey = import("./apiKey").ApiKey;
export const ApiKey: typeof import("./apiKey").ApiKey = null as any;
utilities.lazyLoad(exports, ["ApiKey"], () => require("./apiKey"));

export { As2PartnerArgs, As2PartnerState } from "./as2Partner";
export type As2Partner = import("./as2Partner").As2Partner;
export const As2Partner: typeof import("./as2Partner").As2Partner = null as any;
utilities.lazyLoad(exports, ["As2Partner"], () => require("./as2Partner"));

export { As2StationArgs, As2StationState } from "./as2Station";
export type As2Station = import("./as2Station").As2Station;
export const As2Station: typeof import("./as2Station").As2Station = null as any;
utilities.lazyLoad(exports, ["As2Station"], () => require("./as2Station"));

export { AutomationArgs, AutomationState } from "./automation";
export type Automation = import("./automation").Automation;
export const Automation: typeof import("./automation").Automation = null as any;
utilities.lazyLoad(exports, ["Automation"], () => require("./automation"));

export { BehaviorArgs, BehaviorState } from "./behavior";
export type Behavior = import("./behavior").Behavior;
export const Behavior: typeof import("./behavior").Behavior = null as any;
utilities.lazyLoad(exports, ["Behavior"], () => require("./behavior"));

export { BundleArgs, BundleState } from "./bundle";
export type Bundle = import("./bundle").Bundle;
export const Bundle: typeof import("./bundle").Bundle = null as any;
utilities.lazyLoad(exports, ["Bundle"], () => require("./bundle"));

export { BundleNotificationArgs, BundleNotificationState } from "./bundleNotification";
export type BundleNotification = import("./bundleNotification").BundleNotification;
export const BundleNotification: typeof import("./bundleNotification").BundleNotification = null as any;
utilities.lazyLoad(exports, ["BundleNotification"], () => require("./bundleNotification"));

export { ClickwrapArgs, ClickwrapState } from "./clickwrap";
export type Clickwrap = import("./clickwrap").Clickwrap;
export const Clickwrap: typeof import("./clickwrap").Clickwrap = null as any;
utilities.lazyLoad(exports, ["Clickwrap"], () => require("./clickwrap"));

export { FileArgs, FileState } from "./file";
export type File = import("./file").File;
export const File: typeof import("./file").File = null as any;
utilities.lazyLoad(exports, ["File"], () => require("./file"));

export { FileCommentArgs, FileCommentState } from "./fileComment";
export type FileComment = import("./fileComment").FileComment;
export const FileComment: typeof import("./fileComment").FileComment = null as any;
utilities.lazyLoad(exports, ["FileComment"], () => require("./fileComment"));

export { FolderArgs, FolderState } from "./folder";
export type Folder = import("./folder").Folder;
export const Folder: typeof import("./folder").Folder = null as any;
utilities.lazyLoad(exports, ["Folder"], () => require("./folder"));

export { FormFieldSetArgs, FormFieldSetState } from "./formFieldSet";
export type FormFieldSet = import("./formFieldSet").FormFieldSet;
export const FormFieldSet: typeof import("./formFieldSet").FormFieldSet = null as any;
utilities.lazyLoad(exports, ["FormFieldSet"], () => require("./formFieldSet"));

export { GetActionNotificationExportArgs, GetActionNotificationExportResult, GetActionNotificationExportOutputArgs } from "./getActionNotificationExport";
export const getActionNotificationExport: typeof import("./getActionNotificationExport").getActionNotificationExport = null as any;
export const getActionNotificationExportOutput: typeof import("./getActionNotificationExport").getActionNotificationExportOutput = null as any;
utilities.lazyLoad(exports, ["getActionNotificationExport","getActionNotificationExportOutput"], () => require("./getActionNotificationExport"));

export { GetApiKeyArgs, GetApiKeyResult, GetApiKeyOutputArgs } from "./getApiKey";
export const getApiKey: typeof import("./getApiKey").getApiKey = null as any;
export const getApiKeyOutput: typeof import("./getApiKey").getApiKeyOutput = null as any;
utilities.lazyLoad(exports, ["getApiKey","getApiKeyOutput"], () => require("./getApiKey"));

export { GetAs2PartnerArgs, GetAs2PartnerResult, GetAs2PartnerOutputArgs } from "./getAs2Partner";
export const getAs2Partner: typeof import("./getAs2Partner").getAs2Partner = null as any;
export const getAs2PartnerOutput: typeof import("./getAs2Partner").getAs2PartnerOutput = null as any;
utilities.lazyLoad(exports, ["getAs2Partner","getAs2PartnerOutput"], () => require("./getAs2Partner"));

export { GetAs2StationArgs, GetAs2StationResult, GetAs2StationOutputArgs } from "./getAs2Station";
export const getAs2Station: typeof import("./getAs2Station").getAs2Station = null as any;
export const getAs2StationOutput: typeof import("./getAs2Station").getAs2StationOutput = null as any;
utilities.lazyLoad(exports, ["getAs2Station","getAs2StationOutput"], () => require("./getAs2Station"));

export { GetAutomationArgs, GetAutomationResult, GetAutomationOutputArgs } from "./getAutomation";
export const getAutomation: typeof import("./getAutomation").getAutomation = null as any;
export const getAutomationOutput: typeof import("./getAutomation").getAutomationOutput = null as any;
utilities.lazyLoad(exports, ["getAutomation","getAutomationOutput"], () => require("./getAutomation"));

export { GetAutomationRunArgs, GetAutomationRunResult, GetAutomationRunOutputArgs } from "./getAutomationRun";
export const getAutomationRun: typeof import("./getAutomationRun").getAutomationRun = null as any;
export const getAutomationRunOutput: typeof import("./getAutomationRun").getAutomationRunOutput = null as any;
utilities.lazyLoad(exports, ["getAutomationRun","getAutomationRunOutput"], () => require("./getAutomationRun"));

export { GetBehaviorArgs, GetBehaviorResult, GetBehaviorOutputArgs } from "./getBehavior";
export const getBehavior: typeof import("./getBehavior").getBehavior = null as any;
export const getBehaviorOutput: typeof import("./getBehavior").getBehaviorOutput = null as any;
utilities.lazyLoad(exports, ["getBehavior","getBehaviorOutput"], () => require("./getBehavior"));

export { GetBundleArgs, GetBundleResult, GetBundleOutputArgs } from "./getBundle";
export const getBundle: typeof import("./getBundle").getBundle = null as any;
export const getBundleOutput: typeof import("./getBundle").getBundleOutput = null as any;
utilities.lazyLoad(exports, ["getBundle","getBundleOutput"], () => require("./getBundle"));

export { GetBundleNotificationArgs, GetBundleNotificationResult, GetBundleNotificationOutputArgs } from "./getBundleNotification";
export const getBundleNotification: typeof import("./getBundleNotification").getBundleNotification = null as any;
export const getBundleNotificationOutput: typeof import("./getBundleNotification").getBundleNotificationOutput = null as any;
utilities.lazyLoad(exports, ["getBundleNotification","getBundleNotificationOutput"], () => require("./getBundleNotification"));

export { GetClickwrapArgs, GetClickwrapResult, GetClickwrapOutputArgs } from "./getClickwrap";
export const getClickwrap: typeof import("./getClickwrap").getClickwrap = null as any;
export const getClickwrapOutput: typeof import("./getClickwrap").getClickwrapOutput = null as any;
utilities.lazyLoad(exports, ["getClickwrap","getClickwrapOutput"], () => require("./getClickwrap"));

export { GetExternalEventArgs, GetExternalEventResult, GetExternalEventOutputArgs } from "./getExternalEvent";
export const getExternalEvent: typeof import("./getExternalEvent").getExternalEvent = null as any;
export const getExternalEventOutput: typeof import("./getExternalEvent").getExternalEventOutput = null as any;
utilities.lazyLoad(exports, ["getExternalEvent","getExternalEventOutput"], () => require("./getExternalEvent"));

export { GetFileArgs, GetFileResult, GetFileOutputArgs } from "./getFile";
export const getFile: typeof import("./getFile").getFile = null as any;
export const getFileOutput: typeof import("./getFile").getFileOutput = null as any;
utilities.lazyLoad(exports, ["getFile","getFileOutput"], () => require("./getFile"));

export { GetFileCommentArgs, GetFileCommentResult, GetFileCommentOutputArgs } from "./getFileComment";
export const getFileComment: typeof import("./getFileComment").getFileComment = null as any;
export const getFileCommentOutput: typeof import("./getFileComment").getFileCommentOutput = null as any;
utilities.lazyLoad(exports, ["getFileComment","getFileCommentOutput"], () => require("./getFileComment"));

export { GetFileMigrationArgs, GetFileMigrationResult, GetFileMigrationOutputArgs } from "./getFileMigration";
export const getFileMigration: typeof import("./getFileMigration").getFileMigration = null as any;
export const getFileMigrationOutput: typeof import("./getFileMigration").getFileMigrationOutput = null as any;
utilities.lazyLoad(exports, ["getFileMigration","getFileMigrationOutput"], () => require("./getFileMigration"));

export { GetFolderArgs, GetFolderResult, GetFolderOutputArgs } from "./getFolder";
export const getFolder: typeof import("./getFolder").getFolder = null as any;
export const getFolderOutput: typeof import("./getFolder").getFolderOutput = null as any;
utilities.lazyLoad(exports, ["getFolder","getFolderOutput"], () => require("./getFolder"));

export { GetFormFieldSetArgs, GetFormFieldSetResult, GetFormFieldSetOutputArgs } from "./getFormFieldSet";
export const getFormFieldSet: typeof import("./getFormFieldSet").getFormFieldSet = null as any;
export const getFormFieldSetOutput: typeof import("./getFormFieldSet").getFormFieldSetOutput = null as any;
utilities.lazyLoad(exports, ["getFormFieldSet","getFormFieldSetOutput"], () => require("./getFormFieldSet"));

export { GetGpgKeyArgs, GetGpgKeyResult, GetGpgKeyOutputArgs } from "./getGpgKey";
export const getGpgKey: typeof import("./getGpgKey").getGpgKey = null as any;
export const getGpgKeyOutput: typeof import("./getGpgKey").getGpgKeyOutput = null as any;
utilities.lazyLoad(exports, ["getGpgKey","getGpgKeyOutput"], () => require("./getGpgKey"));

export { GetGroupArgs, GetGroupResult, GetGroupOutputArgs } from "./getGroup";
export const getGroup: typeof import("./getGroup").getGroup = null as any;
export const getGroupOutput: typeof import("./getGroup").getGroupOutput = null as any;
utilities.lazyLoad(exports, ["getGroup","getGroupOutput"], () => require("./getGroup"));

export { GetGroupUserArgs, GetGroupUserResult, GetGroupUserOutputArgs } from "./getGroupUser";
export const getGroupUser: typeof import("./getGroupUser").getGroupUser = null as any;
export const getGroupUserOutput: typeof import("./getGroupUser").getGroupUserOutput = null as any;
utilities.lazyLoad(exports, ["getGroupUser","getGroupUserOutput"], () => require("./getGroupUser"));

export { GetHistoryExportArgs, GetHistoryExportResult, GetHistoryExportOutputArgs } from "./getHistoryExport";
export const getHistoryExport: typeof import("./getHistoryExport").getHistoryExport = null as any;
export const getHistoryExportOutput: typeof import("./getHistoryExport").getHistoryExportOutput = null as any;
utilities.lazyLoad(exports, ["getHistoryExport","getHistoryExportOutput"], () => require("./getHistoryExport"));

export { GetInvoiceArgs, GetInvoiceResult, GetInvoiceOutputArgs } from "./getInvoice";
export const getInvoice: typeof import("./getInvoice").getInvoice = null as any;
export const getInvoiceOutput: typeof import("./getInvoice").getInvoiceOutput = null as any;
utilities.lazyLoad(exports, ["getInvoice","getInvoiceOutput"], () => require("./getInvoice"));

export { GetLockArgs, GetLockResult, GetLockOutputArgs } from "./getLock";
export const getLock: typeof import("./getLock").getLock = null as any;
export const getLockOutput: typeof import("./getLock").getLockOutput = null as any;
utilities.lazyLoad(exports, ["getLock","getLockOutput"], () => require("./getLock"));

export { GetMessageArgs, GetMessageResult, GetMessageOutputArgs } from "./getMessage";
export const getMessage: typeof import("./getMessage").getMessage = null as any;
export const getMessageOutput: typeof import("./getMessage").getMessageOutput = null as any;
utilities.lazyLoad(exports, ["getMessage","getMessageOutput"], () => require("./getMessage"));

export { GetMessageCommentArgs, GetMessageCommentResult, GetMessageCommentOutputArgs } from "./getMessageComment";
export const getMessageComment: typeof import("./getMessageComment").getMessageComment = null as any;
export const getMessageCommentOutput: typeof import("./getMessageComment").getMessageCommentOutput = null as any;
utilities.lazyLoad(exports, ["getMessageComment","getMessageCommentOutput"], () => require("./getMessageComment"));

export { GetMessageCommentReactionArgs, GetMessageCommentReactionResult, GetMessageCommentReactionOutputArgs } from "./getMessageCommentReaction";
export const getMessageCommentReaction: typeof import("./getMessageCommentReaction").getMessageCommentReaction = null as any;
export const getMessageCommentReactionOutput: typeof import("./getMessageCommentReaction").getMessageCommentReactionOutput = null as any;
utilities.lazyLoad(exports, ["getMessageCommentReaction","getMessageCommentReactionOutput"], () => require("./getMessageCommentReaction"));

export { GetMessageReactionArgs, GetMessageReactionResult, GetMessageReactionOutputArgs } from "./getMessageReaction";
export const getMessageReaction: typeof import("./getMessageReaction").getMessageReaction = null as any;
export const getMessageReactionOutput: typeof import("./getMessageReaction").getMessageReactionOutput = null as any;
utilities.lazyLoad(exports, ["getMessageReaction","getMessageReactionOutput"], () => require("./getMessageReaction"));

export { GetNotificationArgs, GetNotificationResult, GetNotificationOutputArgs } from "./getNotification";
export const getNotification: typeof import("./getNotification").getNotification = null as any;
export const getNotificationOutput: typeof import("./getNotification").getNotificationOutput = null as any;
utilities.lazyLoad(exports, ["getNotification","getNotificationOutput"], () => require("./getNotification"));

export { GetPaymentArgs, GetPaymentResult, GetPaymentOutputArgs } from "./getPayment";
export const getPayment: typeof import("./getPayment").getPayment = null as any;
export const getPaymentOutput: typeof import("./getPayment").getPaymentOutput = null as any;
utilities.lazyLoad(exports, ["getPayment","getPaymentOutput"], () => require("./getPayment"));

export { GetPermissionArgs, GetPermissionResult, GetPermissionOutputArgs } from "./getPermission";
export const getPermission: typeof import("./getPermission").getPermission = null as any;
export const getPermissionOutput: typeof import("./getPermission").getPermissionOutput = null as any;
utilities.lazyLoad(exports, ["getPermission","getPermissionOutput"], () => require("./getPermission"));

export { GetPriorityArgs, GetPriorityResult, GetPriorityOutputArgs } from "./getPriority";
export const getPriority: typeof import("./getPriority").getPriority = null as any;
export const getPriorityOutput: typeof import("./getPriority").getPriorityOutput = null as any;
utilities.lazyLoad(exports, ["getPriority","getPriorityOutput"], () => require("./getPriority"));

export { GetProjectArgs, GetProjectResult, GetProjectOutputArgs } from "./getProject";
export const getProject: typeof import("./getProject").getProject = null as any;
export const getProjectOutput: typeof import("./getProject").getProjectOutput = null as any;
utilities.lazyLoad(exports, ["getProject","getProjectOutput"], () => require("./getProject"));

export { GetPublicKeyArgs, GetPublicKeyResult, GetPublicKeyOutputArgs } from "./getPublicKey";
export const getPublicKey: typeof import("./getPublicKey").getPublicKey = null as any;
export const getPublicKeyOutput: typeof import("./getPublicKey").getPublicKeyOutput = null as any;
utilities.lazyLoad(exports, ["getPublicKey","getPublicKeyOutput"], () => require("./getPublicKey"));

export { GetRemoteServerArgs, GetRemoteServerResult, GetRemoteServerOutputArgs } from "./getRemoteServer";
export const getRemoteServer: typeof import("./getRemoteServer").getRemoteServer = null as any;
export const getRemoteServerOutput: typeof import("./getRemoteServer").getRemoteServerOutput = null as any;
utilities.lazyLoad(exports, ["getRemoteServer","getRemoteServerOutput"], () => require("./getRemoteServer"));

export { GetRequestArgs, GetRequestResult, GetRequestOutputArgs } from "./getRequest";
export const getRequest: typeof import("./getRequest").getRequest = null as any;
export const getRequestOutput: typeof import("./getRequest").getRequestOutput = null as any;
utilities.lazyLoad(exports, ["getRequest","getRequestOutput"], () => require("./getRequest"));

export { GetSftpHostKeyArgs, GetSftpHostKeyResult, GetSftpHostKeyOutputArgs } from "./getSftpHostKey";
export const getSftpHostKey: typeof import("./getSftpHostKey").getSftpHostKey = null as any;
export const getSftpHostKeyOutput: typeof import("./getSftpHostKey").getSftpHostKeyOutput = null as any;
utilities.lazyLoad(exports, ["getSftpHostKey","getSftpHostKeyOutput"], () => require("./getSftpHostKey"));

export { GetShareGroupArgs, GetShareGroupResult, GetShareGroupOutputArgs } from "./getShareGroup";
export const getShareGroup: typeof import("./getShareGroup").getShareGroup = null as any;
export const getShareGroupOutput: typeof import("./getShareGroup").getShareGroupOutput = null as any;
utilities.lazyLoad(exports, ["getShareGroup","getShareGroupOutput"], () => require("./getShareGroup"));

export { GetSiteResult } from "./getSite";
export const getSite: typeof import("./getSite").getSite = null as any;
export const getSiteOutput: typeof import("./getSite").getSiteOutput = null as any;
utilities.lazyLoad(exports, ["getSite","getSiteOutput"], () => require("./getSite"));

export { GetSnapshotArgs, GetSnapshotResult, GetSnapshotOutputArgs } from "./getSnapshot";
export const getSnapshot: typeof import("./getSnapshot").getSnapshot = null as any;
export const getSnapshotOutput: typeof import("./getSnapshot").getSnapshotOutput = null as any;
utilities.lazyLoad(exports, ["getSnapshot","getSnapshotOutput"], () => require("./getSnapshot"));

export { GetSsoStrategyArgs, GetSsoStrategyResult, GetSsoStrategyOutputArgs } from "./getSsoStrategy";
export const getSsoStrategy: typeof import("./getSsoStrategy").getSsoStrategy = null as any;
export const getSsoStrategyOutput: typeof import("./getSsoStrategy").getSsoStrategyOutput = null as any;
utilities.lazyLoad(exports, ["getSsoStrategy","getSsoStrategyOutput"], () => require("./getSsoStrategy"));

export { GetStyleArgs, GetStyleResult, GetStyleOutputArgs } from "./getStyle";
export const getStyle: typeof import("./getStyle").getStyle = null as any;
export const getStyleOutput: typeof import("./getStyle").getStyleOutput = null as any;
utilities.lazyLoad(exports, ["getStyle","getStyleOutput"], () => require("./getStyle"));

export { GetUserArgs, GetUserResult, GetUserOutputArgs } from "./getUser";
export const getUser: typeof import("./getUser").getUser = null as any;
export const getUserOutput: typeof import("./getUser").getUserOutput = null as any;
utilities.lazyLoad(exports, ["getUser","getUserOutput"], () => require("./getUser"));

export { GetUserRequestArgs, GetUserRequestResult, GetUserRequestOutputArgs } from "./getUserRequest";
export const getUserRequest: typeof import("./getUserRequest").getUserRequest = null as any;
export const getUserRequestOutput: typeof import("./getUserRequest").getUserRequestOutput = null as any;
utilities.lazyLoad(exports, ["getUserRequest","getUserRequestOutput"], () => require("./getUserRequest"));

export { GpgKeyArgs, GpgKeyState } from "./gpgKey";
export type GpgKey = import("./gpgKey").GpgKey;
export const GpgKey: typeof import("./gpgKey").GpgKey = null as any;
utilities.lazyLoad(exports, ["GpgKey"], () => require("./gpgKey"));

export { GroupArgs, GroupState } from "./group";
export type Group = import("./group").Group;
export const Group: typeof import("./group").Group = null as any;
utilities.lazyLoad(exports, ["Group"], () => require("./group"));

export { GroupUserArgs, GroupUserState } from "./groupUser";
export type GroupUser = import("./groupUser").GroupUser;
export const GroupUser: typeof import("./groupUser").GroupUser = null as any;
utilities.lazyLoad(exports, ["GroupUser"], () => require("./groupUser"));

export { LockArgs, LockState } from "./lock";
export type Lock = import("./lock").Lock;
export const Lock: typeof import("./lock").Lock = null as any;
utilities.lazyLoad(exports, ["Lock"], () => require("./lock"));

export { MessageArgs, MessageState } from "./message";
export type Message = import("./message").Message;
export const Message: typeof import("./message").Message = null as any;
utilities.lazyLoad(exports, ["Message"], () => require("./message"));

export { MessageCommentArgs, MessageCommentState } from "./messageComment";
export type MessageComment = import("./messageComment").MessageComment;
export const MessageComment: typeof import("./messageComment").MessageComment = null as any;
utilities.lazyLoad(exports, ["MessageComment"], () => require("./messageComment"));

export { MessageCommentReactionArgs, MessageCommentReactionState } from "./messageCommentReaction";
export type MessageCommentReaction = import("./messageCommentReaction").MessageCommentReaction;
export const MessageCommentReaction: typeof import("./messageCommentReaction").MessageCommentReaction = null as any;
utilities.lazyLoad(exports, ["MessageCommentReaction"], () => require("./messageCommentReaction"));

export { MessageReactionArgs, MessageReactionState } from "./messageReaction";
export type MessageReaction = import("./messageReaction").MessageReaction;
export const MessageReaction: typeof import("./messageReaction").MessageReaction = null as any;
utilities.lazyLoad(exports, ["MessageReaction"], () => require("./messageReaction"));

export { NotificationArgs, NotificationState } from "./notification";
export type Notification = import("./notification").Notification;
export const Notification: typeof import("./notification").Notification = null as any;
utilities.lazyLoad(exports, ["Notification"], () => require("./notification"));

export { PermissionArgs, PermissionState } from "./permission";
export type Permission = import("./permission").Permission;
export const Permission: typeof import("./permission").Permission = null as any;
utilities.lazyLoad(exports, ["Permission"], () => require("./permission"));

export { ProjectArgs, ProjectState } from "./project";
export type Project = import("./project").Project;
export const Project: typeof import("./project").Project = null as any;
utilities.lazyLoad(exports, ["Project"], () => require("./project"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { PublicKeyArgs, PublicKeyState } from "./publicKey";
export type PublicKey = import("./publicKey").PublicKey;
export const PublicKey: typeof import("./publicKey").PublicKey = null as any;
utilities.lazyLoad(exports, ["PublicKey"], () => require("./publicKey"));

export { RemoteServerArgs, RemoteServerState } from "./remoteServer";
export type RemoteServer = import("./remoteServer").RemoteServer;
export const RemoteServer: typeof import("./remoteServer").RemoteServer = null as any;
utilities.lazyLoad(exports, ["RemoteServer"], () => require("./remoteServer"));

export { RequestArgs, RequestState } from "./request";
export type Request = import("./request").Request;
export const Request: typeof import("./request").Request = null as any;
utilities.lazyLoad(exports, ["Request"], () => require("./request"));

export { SftpHostKeyArgs, SftpHostKeyState } from "./sftpHostKey";
export type SftpHostKey = import("./sftpHostKey").SftpHostKey;
export const SftpHostKey: typeof import("./sftpHostKey").SftpHostKey = null as any;
utilities.lazyLoad(exports, ["SftpHostKey"], () => require("./sftpHostKey"));

export { ShareGroupArgs, ShareGroupState } from "./shareGroup";
export type ShareGroup = import("./shareGroup").ShareGroup;
export const ShareGroup: typeof import("./shareGroup").ShareGroup = null as any;
utilities.lazyLoad(exports, ["ShareGroup"], () => require("./shareGroup"));

export { SnapshotArgs, SnapshotState } from "./snapshot";
export type Snapshot = import("./snapshot").Snapshot;
export const Snapshot: typeof import("./snapshot").Snapshot = null as any;
utilities.lazyLoad(exports, ["Snapshot"], () => require("./snapshot"));

export { UserArgs, UserState } from "./user";
export type User = import("./user").User;
export const User: typeof import("./user").User = null as any;
utilities.lazyLoad(exports, ["User"], () => require("./user"));

export { UserRequestArgs, UserRequestState } from "./userRequest";
export type UserRequest = import("./userRequest").UserRequest;
export const UserRequest: typeof import("./userRequest").UserRequest = null as any;
utilities.lazyLoad(exports, ["UserRequest"], () => require("./userRequest"));


// Export sub-modules:
import * as config from "./config";

export {
    config,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "files:index/apiKey:ApiKey":
                return new ApiKey(name, <any>undefined, { urn })
            case "files:index/as2Partner:As2Partner":
                return new As2Partner(name, <any>undefined, { urn })
            case "files:index/as2Station:As2Station":
                return new As2Station(name, <any>undefined, { urn })
            case "files:index/automation:Automation":
                return new Automation(name, <any>undefined, { urn })
            case "files:index/behavior:Behavior":
                return new Behavior(name, <any>undefined, { urn })
            case "files:index/bundle:Bundle":
                return new Bundle(name, <any>undefined, { urn })
            case "files:index/bundleNotification:BundleNotification":
                return new BundleNotification(name, <any>undefined, { urn })
            case "files:index/clickwrap:Clickwrap":
                return new Clickwrap(name, <any>undefined, { urn })
            case "files:index/file:File":
                return new File(name, <any>undefined, { urn })
            case "files:index/fileComment:FileComment":
                return new FileComment(name, <any>undefined, { urn })
            case "files:index/folder:Folder":
                return new Folder(name, <any>undefined, { urn })
            case "files:index/formFieldSet:FormFieldSet":
                return new FormFieldSet(name, <any>undefined, { urn })
            case "files:index/gpgKey:GpgKey":
                return new GpgKey(name, <any>undefined, { urn })
            case "files:index/group:Group":
                return new Group(name, <any>undefined, { urn })
            case "files:index/groupUser:GroupUser":
                return new GroupUser(name, <any>undefined, { urn })
            case "files:index/lock:Lock":
                return new Lock(name, <any>undefined, { urn })
            case "files:index/message:Message":
                return new Message(name, <any>undefined, { urn })
            case "files:index/messageComment:MessageComment":
                return new MessageComment(name, <any>undefined, { urn })
            case "files:index/messageCommentReaction:MessageCommentReaction":
                return new MessageCommentReaction(name, <any>undefined, { urn })
            case "files:index/messageReaction:MessageReaction":
                return new MessageReaction(name, <any>undefined, { urn })
            case "files:index/notification:Notification":
                return new Notification(name, <any>undefined, { urn })
            case "files:index/permission:Permission":
                return new Permission(name, <any>undefined, { urn })
            case "files:index/project:Project":
                return new Project(name, <any>undefined, { urn })
            case "files:index/publicKey:PublicKey":
                return new PublicKey(name, <any>undefined, { urn })
            case "files:index/remoteServer:RemoteServer":
                return new RemoteServer(name, <any>undefined, { urn })
            case "files:index/request:Request":
                return new Request(name, <any>undefined, { urn })
            case "files:index/sftpHostKey:SftpHostKey":
                return new SftpHostKey(name, <any>undefined, { urn })
            case "files:index/shareGroup:ShareGroup":
                return new ShareGroup(name, <any>undefined, { urn })
            case "files:index/snapshot:Snapshot":
                return new Snapshot(name, <any>undefined, { urn })
            case "files:index/user:User":
                return new User(name, <any>undefined, { urn })
            case "files:index/userRequest:UserRequest":
                return new UserRequest(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("files", "index/apiKey", _module)
pulumi.runtime.registerResourceModule("files", "index/as2Partner", _module)
pulumi.runtime.registerResourceModule("files", "index/as2Station", _module)
pulumi.runtime.registerResourceModule("files", "index/automation", _module)
pulumi.runtime.registerResourceModule("files", "index/behavior", _module)
pulumi.runtime.registerResourceModule("files", "index/bundle", _module)
pulumi.runtime.registerResourceModule("files", "index/bundleNotification", _module)
pulumi.runtime.registerResourceModule("files", "index/clickwrap", _module)
pulumi.runtime.registerResourceModule("files", "index/file", _module)
pulumi.runtime.registerResourceModule("files", "index/fileComment", _module)
pulumi.runtime.registerResourceModule("files", "index/folder", _module)
pulumi.runtime.registerResourceModule("files", "index/formFieldSet", _module)
pulumi.runtime.registerResourceModule("files", "index/gpgKey", _module)
pulumi.runtime.registerResourceModule("files", "index/group", _module)
pulumi.runtime.registerResourceModule("files", "index/groupUser", _module)
pulumi.runtime.registerResourceModule("files", "index/lock", _module)
pulumi.runtime.registerResourceModule("files", "index/message", _module)
pulumi.runtime.registerResourceModule("files", "index/messageComment", _module)
pulumi.runtime.registerResourceModule("files", "index/messageCommentReaction", _module)
pulumi.runtime.registerResourceModule("files", "index/messageReaction", _module)
pulumi.runtime.registerResourceModule("files", "index/notification", _module)
pulumi.runtime.registerResourceModule("files", "index/permission", _module)
pulumi.runtime.registerResourceModule("files", "index/project", _module)
pulumi.runtime.registerResourceModule("files", "index/publicKey", _module)
pulumi.runtime.registerResourceModule("files", "index/remoteServer", _module)
pulumi.runtime.registerResourceModule("files", "index/request", _module)
pulumi.runtime.registerResourceModule("files", "index/sftpHostKey", _module)
pulumi.runtime.registerResourceModule("files", "index/shareGroup", _module)
pulumi.runtime.registerResourceModule("files", "index/snapshot", _module)
pulumi.runtime.registerResourceModule("files", "index/user", _module)
pulumi.runtime.registerResourceModule("files", "index/userRequest", _module)
pulumi.runtime.registerResourcePackage("files", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:files") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
