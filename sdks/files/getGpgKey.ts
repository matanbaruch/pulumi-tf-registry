// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getGpgKey(args: GetGpgKeyArgs, opts?: pulumi.InvokeOptions): Promise<GetGpgKeyResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("files:index/getGpgKey:getGpgKey", {
        "id": args.id,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getGpgKey.
 */
export interface GetGpgKeyArgs {
    id: number;
}

/**
 * A collection of values returned by getGpgKey.
 */
export interface GetGpgKeyResult {
    readonly expiresAt: string;
    readonly id: number;
    readonly name: string;
    readonly privateKey: string;
    readonly privateKeyHash: string;
    readonly privateKeyPassword: string;
    readonly privateKeyPasswordHash: string;
    readonly publicKey: string;
    readonly publicKeyHash: string;
    readonly userId: number;
}
export function getGpgKeyOutput(args: GetGpgKeyOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetGpgKeyResult> {
    return pulumi.output(args).apply((a: any) => getGpgKey(a, opts))
}

/**
 * A collection of arguments for invoking getGpgKey.
 */
export interface GetGpgKeyOutputArgs {
    id: pulumi.Input<number>;
}
