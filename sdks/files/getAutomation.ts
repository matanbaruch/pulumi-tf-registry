// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getAutomation(args: GetAutomationArgs, opts?: pulumi.InvokeOptions): Promise<GetAutomationResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("files:index/getAutomation:getAutomation", {
        "id": args.id,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getAutomation.
 */
export interface GetAutomationArgs {
    id: number;
}

/**
 * A collection of values returned by getAutomation.
 */
export interface GetAutomationResult {
    readonly alwaysOverwriteSizeMatchingFiles: boolean;
    readonly automation: string;
    readonly deleted: boolean;
    readonly description: string;
    readonly destinationReplaceFrom: string;
    readonly destinationReplaceTo: string;
    readonly destinations: string[];
    readonly disabled: boolean;
    readonly flattenDestinationStructure: boolean;
    readonly groupIds: number[];
    readonly humanReadableSchedule: string;
    readonly id: number;
    readonly ignoreLockedFolders: boolean;
    readonly interval: string;
    readonly lastModifiedAt: string;
    readonly legacyFolderMatching: boolean;
    readonly name: string;
    readonly overwriteFiles: boolean;
    readonly path: string;
    readonly pathTimeZone: string;
    readonly recurringDay: number;
    readonly schedule: any;
    readonly scheduleDaysOfWeeks: number[];
    readonly scheduleTimeZone: string;
    readonly scheduleTimesOfDays: string[];
    readonly source: string;
    readonly syncIds: number[];
    readonly trigger: string;
    readonly triggerActions: string[];
    readonly userId: number;
    readonly userIds: number[];
    readonly value: any;
    readonly webhookUrl: string;
}
export function getAutomationOutput(args: GetAutomationOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetAutomationResult> {
    return pulumi.output(args).apply((a: any) => getAutomation(a, opts))
}

/**
 * A collection of arguments for invoking getAutomation.
 */
export interface GetAutomationOutputArgs {
    id: pulumi.Input<number>;
}
