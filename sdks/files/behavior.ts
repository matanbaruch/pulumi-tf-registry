// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Behavior extends pulumi.CustomResource {
    /**
     * Get an existing Behavior resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BehaviorState, opts?: pulumi.CustomResourceOptions): Behavior {
        return new Behavior(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'files:index/behavior:Behavior';

    /**
     * Returns true if the given object is an instance of Behavior.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Behavior {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Behavior.__pulumiType;
    }

    /**
     * URL for attached file
     */
    public /*out*/ readonly attachmentUrl!: pulumi.Output<string>;
    /**
     * Behavior type.
     */
    public readonly behavior!: pulumi.Output<string>;
    /**
     * Description for this behavior.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * If true, the parent folder's behavior will be disabled for this folder and its children.
     */
    public readonly disableParentFolderBehavior!: pulumi.Output<boolean>;
    /**
     * Name for this behavior.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Folder path. Note that Behavior paths cannot be updated once initially set. You will need to remove and re-create the
     * behavior on the new path. This must be slash-delimited, but it must neither start nor end with a slash. Maximum of 5000
     * characters.
     */
    public readonly path!: pulumi.Output<string>;
    /**
     * Is behavior recursive?
     */
    public readonly recursive!: pulumi.Output<boolean>;
    /**
     * Settings for this behavior. See the section above for an example value to provide here. Formatting is different for each
     * Behavior type. May be sent as nested JSON or a single JSON-encoded string. If using XML encoding for the API call, this
     * data must be sent as a JSON-encoded string.
     */
    public readonly value!: pulumi.Output<any>;

    /**
     * Create a Behavior resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BehaviorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BehaviorArgs | BehaviorState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BehaviorState | undefined;
            resourceInputs["attachmentUrl"] = state ? state.attachmentUrl : undefined;
            resourceInputs["behavior"] = state ? state.behavior : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["disableParentFolderBehavior"] = state ? state.disableParentFolderBehavior : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["path"] = state ? state.path : undefined;
            resourceInputs["recursive"] = state ? state.recursive : undefined;
            resourceInputs["value"] = state ? state.value : undefined;
        } else {
            const args = argsOrState as BehaviorArgs | undefined;
            if ((!args || args.behavior === undefined) && !opts.urn) {
                throw new Error("Missing required property 'behavior'");
            }
            if ((!args || args.path === undefined) && !opts.urn) {
                throw new Error("Missing required property 'path'");
            }
            resourceInputs["behavior"] = args ? args.behavior : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["disableParentFolderBehavior"] = args ? args.disableParentFolderBehavior : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["path"] = args ? args.path : undefined;
            resourceInputs["recursive"] = args ? args.recursive : undefined;
            resourceInputs["value"] = args ? args.value : undefined;
            resourceInputs["attachmentUrl"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Behavior.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Behavior resources.
 */
export interface BehaviorState {
    /**
     * URL for attached file
     */
    attachmentUrl?: pulumi.Input<string>;
    /**
     * Behavior type.
     */
    behavior?: pulumi.Input<string>;
    /**
     * Description for this behavior.
     */
    description?: pulumi.Input<string>;
    /**
     * If true, the parent folder's behavior will be disabled for this folder and its children.
     */
    disableParentFolderBehavior?: pulumi.Input<boolean>;
    /**
     * Name for this behavior.
     */
    name?: pulumi.Input<string>;
    /**
     * Folder path. Note that Behavior paths cannot be updated once initially set. You will need to remove and re-create the
     * behavior on the new path. This must be slash-delimited, but it must neither start nor end with a slash. Maximum of 5000
     * characters.
     */
    path?: pulumi.Input<string>;
    /**
     * Is behavior recursive?
     */
    recursive?: pulumi.Input<boolean>;
    /**
     * Settings for this behavior. See the section above for an example value to provide here. Formatting is different for each
     * Behavior type. May be sent as nested JSON or a single JSON-encoded string. If using XML encoding for the API call, this
     * data must be sent as a JSON-encoded string.
     */
    value?: any;
}

/**
 * The set of arguments for constructing a Behavior resource.
 */
export interface BehaviorArgs {
    /**
     * Behavior type.
     */
    behavior: pulumi.Input<string>;
    /**
     * Description for this behavior.
     */
    description?: pulumi.Input<string>;
    /**
     * If true, the parent folder's behavior will be disabled for this folder and its children.
     */
    disableParentFolderBehavior?: pulumi.Input<boolean>;
    /**
     * Name for this behavior.
     */
    name?: pulumi.Input<string>;
    /**
     * Folder path. Note that Behavior paths cannot be updated once initially set. You will need to remove and re-create the
     * behavior on the new path. This must be slash-delimited, but it must neither start nor end with a slash. Maximum of 5000
     * characters.
     */
    path: pulumi.Input<string>;
    /**
     * Is behavior recursive?
     */
    recursive?: pulumi.Input<boolean>;
    /**
     * Settings for this behavior. See the section above for an example value to provide here. Formatting is different for each
     * Behavior type. May be sent as nested JSON or a single JSON-encoded string. If using XML encoding for the API call, this
     * data must be sent as a JSON-encoded string.
     */
    value?: any;
}
