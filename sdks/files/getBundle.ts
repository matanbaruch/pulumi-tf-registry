// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getBundle(args: GetBundleArgs, opts?: pulumi.InvokeOptions): Promise<GetBundleResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("files:index/getBundle:getBundle", {
        "id": args.id,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getBundle.
 */
export interface GetBundleArgs {
    id: number;
}

/**
 * A collection of values returned by getBundle.
 */
export interface GetBundleResult {
    readonly bundlepaths: any;
    readonly clickwrapBody: string;
    readonly clickwrapId: number;
    readonly code: string;
    readonly colorLeft: string;
    readonly colorLink: string;
    readonly colorText: string;
    readonly colorTop: string;
    readonly colorTopText: string;
    readonly createdAt: string;
    readonly description: string;
    readonly dontSeparateSubmissionsByFolder: boolean;
    readonly expiresAt: string;
    readonly formFieldSet: string;
    readonly hasInbox: boolean;
    readonly id: number;
    readonly inboxId: number;
    readonly maxUses: number;
    readonly note: string;
    readonly passwordProtected: boolean;
    readonly pathTemplate: string;
    readonly pathTemplateTimeZone: string;
    readonly paths: string[];
    readonly permissions: string;
    readonly previewOnly: boolean;
    readonly requireLogout: boolean;
    readonly requireRegistration: boolean;
    readonly requireShareRecipient: boolean;
    readonly sendEmailReceiptToUploader: boolean;
    readonly skipCompany: boolean;
    readonly skipEmail: boolean;
    readonly skipName: boolean;
    readonly snapshotId: number;
    readonly startAccessOnDate: string;
    readonly url: string;
    readonly userId: number;
    readonly username: string;
    readonly watermarkAttachment: string;
    readonly watermarkValue: any;
}
export function getBundleOutput(args: GetBundleOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetBundleResult> {
    return pulumi.output(args).apply((a: any) => getBundle(a, opts))
}

/**
 * A collection of arguments for invoking getBundle.
 */
export interface GetBundleOutputArgs {
    id: pulumi.Input<number>;
}
