// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class RemoteServer extends pulumi.CustomResource {
    /**
     * Get an existing RemoteServer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RemoteServerState, opts?: pulumi.CustomResourceOptions): RemoteServer {
        return new RemoteServer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'files:index/remoteServer:RemoteServer';

    /**
     * Returns true if the given object is an instance of RemoteServer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RemoteServer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RemoteServer.__pulumiType;
    }

    /**
     * Describes the authorized account
     */
    public /*out*/ readonly authAccountName!: pulumi.Output<string>;
    /**
     * Returns link to login with an Oauth provider
     */
    public /*out*/ readonly authSetupLink!: pulumi.Output<string>;
    /**
     * Either `in_setup` or `complete`
     */
    public /*out*/ readonly authStatus!: pulumi.Output<string>;
    /**
     * Type of authentication method
     */
    public /*out*/ readonly authenticationMethod!: pulumi.Output<string>;
    /**
     * AWS Access Key.
     */
    public readonly awsAccessKey!: pulumi.Output<string>;
    /**
     * AWS secret key.
     */
    public readonly awsSecretKey!: pulumi.Output<string | undefined>;
    /**
     * Azure Blob Storage secret key.
     */
    public readonly azureBlobStorageAccessKey!: pulumi.Output<string | undefined>;
    /**
     * Azure Blob Storage Account name
     */
    public readonly azureBlobStorageAccount!: pulumi.Output<string>;
    /**
     * Azure Blob Storage Container name
     */
    public readonly azureBlobStorageContainer!: pulumi.Output<string>;
    /**
     * Enable when storage account has hierarchical namespace feature enabled
     */
    public readonly azureBlobStorageHierarchicalNamespace!: pulumi.Output<boolean>;
    /**
     * Shared Access Signature (SAS) token
     */
    public readonly azureBlobStorageSasToken!: pulumi.Output<string | undefined>;
    /**
     * Azure File Storage access key.
     */
    public readonly azureFilesStorageAccessKey!: pulumi.Output<string | undefined>;
    /**
     * Azure File Storage Account name
     */
    public readonly azureFilesStorageAccount!: pulumi.Output<string>;
    /**
     * Shared Access Signature (SAS) token
     */
    public readonly azureFilesStorageSasToken!: pulumi.Output<string | undefined>;
    /**
     * Azure File Storage Share name
     */
    public readonly azureFilesStorageShareName!: pulumi.Output<string>;
    /**
     * Backblaze B2 Cloud Storage applicationKey.
     */
    public readonly backblazeB2ApplicationKey!: pulumi.Output<string | undefined>;
    /**
     * Backblaze B2 Cloud Storage Bucket name
     */
    public readonly backblazeB2Bucket!: pulumi.Output<string>;
    /**
     * Backblaze B2 Cloud Storage keyID.
     */
    public readonly backblazeB2KeyId!: pulumi.Output<string | undefined>;
    /**
     * Backblaze B2 Cloud Storage S3 Endpoint
     */
    public readonly backblazeB2S3Endpoint!: pulumi.Output<string>;
    /**
     * Cloudflare Access Key.
     */
    public readonly cloudflareAccessKey!: pulumi.Output<string>;
    /**
     * Cloudflare Bucket name
     */
    public readonly cloudflareBucket!: pulumi.Output<string>;
    /**
     * Cloudflare endpoint
     */
    public readonly cloudflareEndpoint!: pulumi.Output<string>;
    /**
     * Cloudflare secret key
     */
    public readonly cloudflareSecretKey!: pulumi.Output<string | undefined>;
    /**
     * If true, this server has been disabled due to failures. Make any change or set disabled to false to clear this flag.
     */
    public /*out*/ readonly disabled!: pulumi.Output<boolean>;
    /**
     * List Team folders in root
     */
    public readonly dropboxTeams!: pulumi.Output<boolean>;
    /**
     * `true` if remote server only accepts connections from dedicated IPs
     */
    public readonly enableDedicatedIps!: pulumi.Output<boolean>;
    /**
     * Filebase Access Key.
     */
    public readonly filebaseAccessKey!: pulumi.Output<string>;
    /**
     * Filebase Bucket name
     */
    public readonly filebaseBucket!: pulumi.Output<string>;
    /**
     * Filebase secret key
     */
    public readonly filebaseSecretKey!: pulumi.Output<string | undefined>;
    /**
     * Files Agent API Token
     */
    public /*out*/ readonly filesAgentApiToken!: pulumi.Output<string>;
    /**
     * Local permissions for files agent. read_only, write_only, or read_write
     */
    public readonly filesAgentPermissionSet!: pulumi.Output<string>;
    /**
     * Agent local root path
     */
    public readonly filesAgentRoot!: pulumi.Output<string>;
    /**
     * Files Agent version
     */
    public readonly filesAgentVersion!: pulumi.Output<string>;
    /**
     * Google Cloud Storage bucket name
     */
    public readonly googleCloudStorageBucket!: pulumi.Output<string>;
    /**
     * A JSON file that contains the private key. To generate see
     * https://cloud.google.com/storage/docs/json_api/v1/how-tos/authorizing#APIKey
     */
    public readonly googleCloudStorageCredentialsJson!: pulumi.Output<string | undefined>;
    /**
     * Google Cloud Project ID
     */
    public readonly googleCloudStorageProjectId!: pulumi.Output<string>;
    /**
     * Hostname or IP address
     */
    public readonly hostname!: pulumi.Output<string>;
    /**
     * Linode Access Key.
     */
    public readonly linodeAccessKey!: pulumi.Output<string>;
    /**
     * Linode Bucket name
     */
    public readonly linodeBucket!: pulumi.Output<string>;
    /**
     * Linode region
     */
    public readonly linodeRegion!: pulumi.Output<string>;
    /**
     * Linode secret key
     */
    public readonly linodeSecretKey!: pulumi.Output<string | undefined>;
    /**
     * Max number of parallel connections. Ignored for S3 connections (we will parallelize these as much as possible).
     */
    public readonly maxConnections!: pulumi.Output<number>;
    /**
     * Internal name for your reference
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Either personal or business_other account types
     */
    public readonly oneDriveAccountType!: pulumi.Output<string>;
    /**
     * Password if needed.
     */
    public readonly password!: pulumi.Output<string | undefined>;
    /**
     * If true, we will ensure that all communications with this remote server are made through the primary region of the site.
     * This setting can also be overridden by a sitewide setting which will force it to true.
     */
    public readonly pinToSiteRegion!: pulumi.Output<boolean>;
    /**
     * If set, all communciations with this remote server are made through the provided region.
     */
    public /*out*/ readonly pinnedRegion!: pulumi.Output<string>;
    /**
     * Port for remote server. Not needed for S3.
     */
    public readonly port!: pulumi.Output<number>;
    /**
     * Private key if needed.
     */
    public readonly privateKey!: pulumi.Output<string | undefined>;
    /**
     * Passphrase for private key if needed.
     */
    public readonly privateKeyPassphrase!: pulumi.Output<string | undefined>;
    /**
     * Rackspace API key from the Rackspace Cloud Control Panel.
     */
    public readonly rackspaceApiKey!: pulumi.Output<string | undefined>;
    /**
     * The name of the container (top level directory) where files will sync.
     */
    public readonly rackspaceContainer!: pulumi.Output<string>;
    /**
     * Three letter airport code for Rackspace region. See https://support.rackspace.com/how-to/about-regions/
     */
    public readonly rackspaceRegion!: pulumi.Output<string>;
    /**
     * Rackspace username used to login to the Rackspace Cloud Control Panel.
     */
    public readonly rackspaceUsername!: pulumi.Output<string>;
    /**
     * Initial home folder on remote server
     */
    public /*out*/ readonly remoteHomePath!: pulumi.Output<string>;
    /**
     * Reset authenticated account
     */
    public readonly resetAuthentication!: pulumi.Output<boolean | undefined>;
    /**
     * S3 bucket name
     */
    public readonly s3Bucket!: pulumi.Output<string>;
    /**
     * S3-compatible Access Key.
     */
    public readonly s3CompatibleAccessKey!: pulumi.Output<string>;
    /**
     * S3-compatible Bucket name
     */
    public readonly s3CompatibleBucket!: pulumi.Output<string>;
    /**
     * S3-compatible endpoint
     */
    public readonly s3CompatibleEndpoint!: pulumi.Output<string>;
    /**
     * S3-compatible endpoint
     */
    public readonly s3CompatibleRegion!: pulumi.Output<string>;
    /**
     * S3-compatible secret key
     */
    public readonly s3CompatibleSecretKey!: pulumi.Output<string | undefined>;
    /**
     * S3 region
     */
    public readonly s3Region!: pulumi.Output<string>;
    /**
     * Remote server certificate
     */
    public readonly serverCertificate!: pulumi.Output<string>;
    /**
     * Remote server SSH Host Key. If provided, we will require that the server host key matches the provided key. Uses OpenSSH
     * format similar to what would go into ~/.ssh/known_hosts
     */
    public readonly serverHostKey!: pulumi.Output<string>;
    /**
     * Remote server type.
     */
    public readonly serverType!: pulumi.Output<string>;
    /**
     * Should we require SSL?
     */
    public readonly ssl!: pulumi.Output<string>;
    /**
     * SSL client certificate.
     */
    public readonly sslCertificate!: pulumi.Output<string | undefined>;
    /**
     * If true, this remote server supports file versioning. This value is determined automatically by Files.com.
     */
    public /*out*/ readonly supportsVersioning!: pulumi.Output<boolean>;
    /**
     * Remote server username. Not needed for S3 buckets.
     */
    public readonly username!: pulumi.Output<string>;
    /**
     * Wasabi access key.
     */
    public readonly wasabiAccessKey!: pulumi.Output<string>;
    /**
     * Wasabi Bucket name
     */
    public readonly wasabiBucket!: pulumi.Output<string>;
    /**
     * Wasabi region
     */
    public readonly wasabiRegion!: pulumi.Output<string>;
    /**
     * Wasabi secret key.
     */
    public readonly wasabiSecretKey!: pulumi.Output<string | undefined>;

    /**
     * Create a RemoteServer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: RemoteServerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RemoteServerArgs | RemoteServerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RemoteServerState | undefined;
            resourceInputs["authAccountName"] = state ? state.authAccountName : undefined;
            resourceInputs["authSetupLink"] = state ? state.authSetupLink : undefined;
            resourceInputs["authStatus"] = state ? state.authStatus : undefined;
            resourceInputs["authenticationMethod"] = state ? state.authenticationMethod : undefined;
            resourceInputs["awsAccessKey"] = state ? state.awsAccessKey : undefined;
            resourceInputs["awsSecretKey"] = state ? state.awsSecretKey : undefined;
            resourceInputs["azureBlobStorageAccessKey"] = state ? state.azureBlobStorageAccessKey : undefined;
            resourceInputs["azureBlobStorageAccount"] = state ? state.azureBlobStorageAccount : undefined;
            resourceInputs["azureBlobStorageContainer"] = state ? state.azureBlobStorageContainer : undefined;
            resourceInputs["azureBlobStorageHierarchicalNamespace"] = state ? state.azureBlobStorageHierarchicalNamespace : undefined;
            resourceInputs["azureBlobStorageSasToken"] = state ? state.azureBlobStorageSasToken : undefined;
            resourceInputs["azureFilesStorageAccessKey"] = state ? state.azureFilesStorageAccessKey : undefined;
            resourceInputs["azureFilesStorageAccount"] = state ? state.azureFilesStorageAccount : undefined;
            resourceInputs["azureFilesStorageSasToken"] = state ? state.azureFilesStorageSasToken : undefined;
            resourceInputs["azureFilesStorageShareName"] = state ? state.azureFilesStorageShareName : undefined;
            resourceInputs["backblazeB2ApplicationKey"] = state ? state.backblazeB2ApplicationKey : undefined;
            resourceInputs["backblazeB2Bucket"] = state ? state.backblazeB2Bucket : undefined;
            resourceInputs["backblazeB2KeyId"] = state ? state.backblazeB2KeyId : undefined;
            resourceInputs["backblazeB2S3Endpoint"] = state ? state.backblazeB2S3Endpoint : undefined;
            resourceInputs["cloudflareAccessKey"] = state ? state.cloudflareAccessKey : undefined;
            resourceInputs["cloudflareBucket"] = state ? state.cloudflareBucket : undefined;
            resourceInputs["cloudflareEndpoint"] = state ? state.cloudflareEndpoint : undefined;
            resourceInputs["cloudflareSecretKey"] = state ? state.cloudflareSecretKey : undefined;
            resourceInputs["disabled"] = state ? state.disabled : undefined;
            resourceInputs["dropboxTeams"] = state ? state.dropboxTeams : undefined;
            resourceInputs["enableDedicatedIps"] = state ? state.enableDedicatedIps : undefined;
            resourceInputs["filebaseAccessKey"] = state ? state.filebaseAccessKey : undefined;
            resourceInputs["filebaseBucket"] = state ? state.filebaseBucket : undefined;
            resourceInputs["filebaseSecretKey"] = state ? state.filebaseSecretKey : undefined;
            resourceInputs["filesAgentApiToken"] = state ? state.filesAgentApiToken : undefined;
            resourceInputs["filesAgentPermissionSet"] = state ? state.filesAgentPermissionSet : undefined;
            resourceInputs["filesAgentRoot"] = state ? state.filesAgentRoot : undefined;
            resourceInputs["filesAgentVersion"] = state ? state.filesAgentVersion : undefined;
            resourceInputs["googleCloudStorageBucket"] = state ? state.googleCloudStorageBucket : undefined;
            resourceInputs["googleCloudStorageCredentialsJson"] = state ? state.googleCloudStorageCredentialsJson : undefined;
            resourceInputs["googleCloudStorageProjectId"] = state ? state.googleCloudStorageProjectId : undefined;
            resourceInputs["hostname"] = state ? state.hostname : undefined;
            resourceInputs["linodeAccessKey"] = state ? state.linodeAccessKey : undefined;
            resourceInputs["linodeBucket"] = state ? state.linodeBucket : undefined;
            resourceInputs["linodeRegion"] = state ? state.linodeRegion : undefined;
            resourceInputs["linodeSecretKey"] = state ? state.linodeSecretKey : undefined;
            resourceInputs["maxConnections"] = state ? state.maxConnections : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["oneDriveAccountType"] = state ? state.oneDriveAccountType : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["pinToSiteRegion"] = state ? state.pinToSiteRegion : undefined;
            resourceInputs["pinnedRegion"] = state ? state.pinnedRegion : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["privateKey"] = state ? state.privateKey : undefined;
            resourceInputs["privateKeyPassphrase"] = state ? state.privateKeyPassphrase : undefined;
            resourceInputs["rackspaceApiKey"] = state ? state.rackspaceApiKey : undefined;
            resourceInputs["rackspaceContainer"] = state ? state.rackspaceContainer : undefined;
            resourceInputs["rackspaceRegion"] = state ? state.rackspaceRegion : undefined;
            resourceInputs["rackspaceUsername"] = state ? state.rackspaceUsername : undefined;
            resourceInputs["remoteHomePath"] = state ? state.remoteHomePath : undefined;
            resourceInputs["resetAuthentication"] = state ? state.resetAuthentication : undefined;
            resourceInputs["s3Bucket"] = state ? state.s3Bucket : undefined;
            resourceInputs["s3CompatibleAccessKey"] = state ? state.s3CompatibleAccessKey : undefined;
            resourceInputs["s3CompatibleBucket"] = state ? state.s3CompatibleBucket : undefined;
            resourceInputs["s3CompatibleEndpoint"] = state ? state.s3CompatibleEndpoint : undefined;
            resourceInputs["s3CompatibleRegion"] = state ? state.s3CompatibleRegion : undefined;
            resourceInputs["s3CompatibleSecretKey"] = state ? state.s3CompatibleSecretKey : undefined;
            resourceInputs["s3Region"] = state ? state.s3Region : undefined;
            resourceInputs["serverCertificate"] = state ? state.serverCertificate : undefined;
            resourceInputs["serverHostKey"] = state ? state.serverHostKey : undefined;
            resourceInputs["serverType"] = state ? state.serverType : undefined;
            resourceInputs["ssl"] = state ? state.ssl : undefined;
            resourceInputs["sslCertificate"] = state ? state.sslCertificate : undefined;
            resourceInputs["supportsVersioning"] = state ? state.supportsVersioning : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
            resourceInputs["wasabiAccessKey"] = state ? state.wasabiAccessKey : undefined;
            resourceInputs["wasabiBucket"] = state ? state.wasabiBucket : undefined;
            resourceInputs["wasabiRegion"] = state ? state.wasabiRegion : undefined;
            resourceInputs["wasabiSecretKey"] = state ? state.wasabiSecretKey : undefined;
        } else {
            const args = argsOrState as RemoteServerArgs | undefined;
            resourceInputs["awsAccessKey"] = args ? args.awsAccessKey : undefined;
            resourceInputs["awsSecretKey"] = args ? args.awsSecretKey : undefined;
            resourceInputs["azureBlobStorageAccessKey"] = args ? args.azureBlobStorageAccessKey : undefined;
            resourceInputs["azureBlobStorageAccount"] = args ? args.azureBlobStorageAccount : undefined;
            resourceInputs["azureBlobStorageContainer"] = args ? args.azureBlobStorageContainer : undefined;
            resourceInputs["azureBlobStorageHierarchicalNamespace"] = args ? args.azureBlobStorageHierarchicalNamespace : undefined;
            resourceInputs["azureBlobStorageSasToken"] = args ? args.azureBlobStorageSasToken : undefined;
            resourceInputs["azureFilesStorageAccessKey"] = args ? args.azureFilesStorageAccessKey : undefined;
            resourceInputs["azureFilesStorageAccount"] = args ? args.azureFilesStorageAccount : undefined;
            resourceInputs["azureFilesStorageSasToken"] = args ? args.azureFilesStorageSasToken : undefined;
            resourceInputs["azureFilesStorageShareName"] = args ? args.azureFilesStorageShareName : undefined;
            resourceInputs["backblazeB2ApplicationKey"] = args ? args.backblazeB2ApplicationKey : undefined;
            resourceInputs["backblazeB2Bucket"] = args ? args.backblazeB2Bucket : undefined;
            resourceInputs["backblazeB2KeyId"] = args ? args.backblazeB2KeyId : undefined;
            resourceInputs["backblazeB2S3Endpoint"] = args ? args.backblazeB2S3Endpoint : undefined;
            resourceInputs["cloudflareAccessKey"] = args ? args.cloudflareAccessKey : undefined;
            resourceInputs["cloudflareBucket"] = args ? args.cloudflareBucket : undefined;
            resourceInputs["cloudflareEndpoint"] = args ? args.cloudflareEndpoint : undefined;
            resourceInputs["cloudflareSecretKey"] = args ? args.cloudflareSecretKey : undefined;
            resourceInputs["dropboxTeams"] = args ? args.dropboxTeams : undefined;
            resourceInputs["enableDedicatedIps"] = args ? args.enableDedicatedIps : undefined;
            resourceInputs["filebaseAccessKey"] = args ? args.filebaseAccessKey : undefined;
            resourceInputs["filebaseBucket"] = args ? args.filebaseBucket : undefined;
            resourceInputs["filebaseSecretKey"] = args ? args.filebaseSecretKey : undefined;
            resourceInputs["filesAgentPermissionSet"] = args ? args.filesAgentPermissionSet : undefined;
            resourceInputs["filesAgentRoot"] = args ? args.filesAgentRoot : undefined;
            resourceInputs["filesAgentVersion"] = args ? args.filesAgentVersion : undefined;
            resourceInputs["googleCloudStorageBucket"] = args ? args.googleCloudStorageBucket : undefined;
            resourceInputs["googleCloudStorageCredentialsJson"] = args ? args.googleCloudStorageCredentialsJson : undefined;
            resourceInputs["googleCloudStorageProjectId"] = args ? args.googleCloudStorageProjectId : undefined;
            resourceInputs["hostname"] = args ? args.hostname : undefined;
            resourceInputs["linodeAccessKey"] = args ? args.linodeAccessKey : undefined;
            resourceInputs["linodeBucket"] = args ? args.linodeBucket : undefined;
            resourceInputs["linodeRegion"] = args ? args.linodeRegion : undefined;
            resourceInputs["linodeSecretKey"] = args ? args.linodeSecretKey : undefined;
            resourceInputs["maxConnections"] = args ? args.maxConnections : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["oneDriveAccountType"] = args ? args.oneDriveAccountType : undefined;
            resourceInputs["password"] = args ? args.password : undefined;
            resourceInputs["pinToSiteRegion"] = args ? args.pinToSiteRegion : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["privateKey"] = args ? args.privateKey : undefined;
            resourceInputs["privateKeyPassphrase"] = args ? args.privateKeyPassphrase : undefined;
            resourceInputs["rackspaceApiKey"] = args ? args.rackspaceApiKey : undefined;
            resourceInputs["rackspaceContainer"] = args ? args.rackspaceContainer : undefined;
            resourceInputs["rackspaceRegion"] = args ? args.rackspaceRegion : undefined;
            resourceInputs["rackspaceUsername"] = args ? args.rackspaceUsername : undefined;
            resourceInputs["resetAuthentication"] = args ? args.resetAuthentication : undefined;
            resourceInputs["s3Bucket"] = args ? args.s3Bucket : undefined;
            resourceInputs["s3CompatibleAccessKey"] = args ? args.s3CompatibleAccessKey : undefined;
            resourceInputs["s3CompatibleBucket"] = args ? args.s3CompatibleBucket : undefined;
            resourceInputs["s3CompatibleEndpoint"] = args ? args.s3CompatibleEndpoint : undefined;
            resourceInputs["s3CompatibleRegion"] = args ? args.s3CompatibleRegion : undefined;
            resourceInputs["s3CompatibleSecretKey"] = args ? args.s3CompatibleSecretKey : undefined;
            resourceInputs["s3Region"] = args ? args.s3Region : undefined;
            resourceInputs["serverCertificate"] = args ? args.serverCertificate : undefined;
            resourceInputs["serverHostKey"] = args ? args.serverHostKey : undefined;
            resourceInputs["serverType"] = args ? args.serverType : undefined;
            resourceInputs["ssl"] = args ? args.ssl : undefined;
            resourceInputs["sslCertificate"] = args ? args.sslCertificate : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
            resourceInputs["wasabiAccessKey"] = args ? args.wasabiAccessKey : undefined;
            resourceInputs["wasabiBucket"] = args ? args.wasabiBucket : undefined;
            resourceInputs["wasabiRegion"] = args ? args.wasabiRegion : undefined;
            resourceInputs["wasabiSecretKey"] = args ? args.wasabiSecretKey : undefined;
            resourceInputs["authAccountName"] = undefined /*out*/;
            resourceInputs["authSetupLink"] = undefined /*out*/;
            resourceInputs["authStatus"] = undefined /*out*/;
            resourceInputs["authenticationMethod"] = undefined /*out*/;
            resourceInputs["disabled"] = undefined /*out*/;
            resourceInputs["filesAgentApiToken"] = undefined /*out*/;
            resourceInputs["pinnedRegion"] = undefined /*out*/;
            resourceInputs["remoteHomePath"] = undefined /*out*/;
            resourceInputs["supportsVersioning"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RemoteServer.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering RemoteServer resources.
 */
export interface RemoteServerState {
    /**
     * Describes the authorized account
     */
    authAccountName?: pulumi.Input<string>;
    /**
     * Returns link to login with an Oauth provider
     */
    authSetupLink?: pulumi.Input<string>;
    /**
     * Either `in_setup` or `complete`
     */
    authStatus?: pulumi.Input<string>;
    /**
     * Type of authentication method
     */
    authenticationMethod?: pulumi.Input<string>;
    /**
     * AWS Access Key.
     */
    awsAccessKey?: pulumi.Input<string>;
    /**
     * AWS secret key.
     */
    awsSecretKey?: pulumi.Input<string>;
    /**
     * Azure Blob Storage secret key.
     */
    azureBlobStorageAccessKey?: pulumi.Input<string>;
    /**
     * Azure Blob Storage Account name
     */
    azureBlobStorageAccount?: pulumi.Input<string>;
    /**
     * Azure Blob Storage Container name
     */
    azureBlobStorageContainer?: pulumi.Input<string>;
    /**
     * Enable when storage account has hierarchical namespace feature enabled
     */
    azureBlobStorageHierarchicalNamespace?: pulumi.Input<boolean>;
    /**
     * Shared Access Signature (SAS) token
     */
    azureBlobStorageSasToken?: pulumi.Input<string>;
    /**
     * Azure File Storage access key.
     */
    azureFilesStorageAccessKey?: pulumi.Input<string>;
    /**
     * Azure File Storage Account name
     */
    azureFilesStorageAccount?: pulumi.Input<string>;
    /**
     * Shared Access Signature (SAS) token
     */
    azureFilesStorageSasToken?: pulumi.Input<string>;
    /**
     * Azure File Storage Share name
     */
    azureFilesStorageShareName?: pulumi.Input<string>;
    /**
     * Backblaze B2 Cloud Storage applicationKey.
     */
    backblazeB2ApplicationKey?: pulumi.Input<string>;
    /**
     * Backblaze B2 Cloud Storage Bucket name
     */
    backblazeB2Bucket?: pulumi.Input<string>;
    /**
     * Backblaze B2 Cloud Storage keyID.
     */
    backblazeB2KeyId?: pulumi.Input<string>;
    /**
     * Backblaze B2 Cloud Storage S3 Endpoint
     */
    backblazeB2S3Endpoint?: pulumi.Input<string>;
    /**
     * Cloudflare Access Key.
     */
    cloudflareAccessKey?: pulumi.Input<string>;
    /**
     * Cloudflare Bucket name
     */
    cloudflareBucket?: pulumi.Input<string>;
    /**
     * Cloudflare endpoint
     */
    cloudflareEndpoint?: pulumi.Input<string>;
    /**
     * Cloudflare secret key
     */
    cloudflareSecretKey?: pulumi.Input<string>;
    /**
     * If true, this server has been disabled due to failures. Make any change or set disabled to false to clear this flag.
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * List Team folders in root
     */
    dropboxTeams?: pulumi.Input<boolean>;
    /**
     * `true` if remote server only accepts connections from dedicated IPs
     */
    enableDedicatedIps?: pulumi.Input<boolean>;
    /**
     * Filebase Access Key.
     */
    filebaseAccessKey?: pulumi.Input<string>;
    /**
     * Filebase Bucket name
     */
    filebaseBucket?: pulumi.Input<string>;
    /**
     * Filebase secret key
     */
    filebaseSecretKey?: pulumi.Input<string>;
    /**
     * Files Agent API Token
     */
    filesAgentApiToken?: pulumi.Input<string>;
    /**
     * Local permissions for files agent. read_only, write_only, or read_write
     */
    filesAgentPermissionSet?: pulumi.Input<string>;
    /**
     * Agent local root path
     */
    filesAgentRoot?: pulumi.Input<string>;
    /**
     * Files Agent version
     */
    filesAgentVersion?: pulumi.Input<string>;
    /**
     * Google Cloud Storage bucket name
     */
    googleCloudStorageBucket?: pulumi.Input<string>;
    /**
     * A JSON file that contains the private key. To generate see
     * https://cloud.google.com/storage/docs/json_api/v1/how-tos/authorizing#APIKey
     */
    googleCloudStorageCredentialsJson?: pulumi.Input<string>;
    /**
     * Google Cloud Project ID
     */
    googleCloudStorageProjectId?: pulumi.Input<string>;
    /**
     * Hostname or IP address
     */
    hostname?: pulumi.Input<string>;
    /**
     * Linode Access Key.
     */
    linodeAccessKey?: pulumi.Input<string>;
    /**
     * Linode Bucket name
     */
    linodeBucket?: pulumi.Input<string>;
    /**
     * Linode region
     */
    linodeRegion?: pulumi.Input<string>;
    /**
     * Linode secret key
     */
    linodeSecretKey?: pulumi.Input<string>;
    /**
     * Max number of parallel connections. Ignored for S3 connections (we will parallelize these as much as possible).
     */
    maxConnections?: pulumi.Input<number>;
    /**
     * Internal name for your reference
     */
    name?: pulumi.Input<string>;
    /**
     * Either personal or business_other account types
     */
    oneDriveAccountType?: pulumi.Input<string>;
    /**
     * Password if needed.
     */
    password?: pulumi.Input<string>;
    /**
     * If true, we will ensure that all communications with this remote server are made through the primary region of the site.
     * This setting can also be overridden by a sitewide setting which will force it to true.
     */
    pinToSiteRegion?: pulumi.Input<boolean>;
    /**
     * If set, all communciations with this remote server are made through the provided region.
     */
    pinnedRegion?: pulumi.Input<string>;
    /**
     * Port for remote server. Not needed for S3.
     */
    port?: pulumi.Input<number>;
    /**
     * Private key if needed.
     */
    privateKey?: pulumi.Input<string>;
    /**
     * Passphrase for private key if needed.
     */
    privateKeyPassphrase?: pulumi.Input<string>;
    /**
     * Rackspace API key from the Rackspace Cloud Control Panel.
     */
    rackspaceApiKey?: pulumi.Input<string>;
    /**
     * The name of the container (top level directory) where files will sync.
     */
    rackspaceContainer?: pulumi.Input<string>;
    /**
     * Three letter airport code for Rackspace region. See https://support.rackspace.com/how-to/about-regions/
     */
    rackspaceRegion?: pulumi.Input<string>;
    /**
     * Rackspace username used to login to the Rackspace Cloud Control Panel.
     */
    rackspaceUsername?: pulumi.Input<string>;
    /**
     * Initial home folder on remote server
     */
    remoteHomePath?: pulumi.Input<string>;
    /**
     * Reset authenticated account
     */
    resetAuthentication?: pulumi.Input<boolean>;
    /**
     * S3 bucket name
     */
    s3Bucket?: pulumi.Input<string>;
    /**
     * S3-compatible Access Key.
     */
    s3CompatibleAccessKey?: pulumi.Input<string>;
    /**
     * S3-compatible Bucket name
     */
    s3CompatibleBucket?: pulumi.Input<string>;
    /**
     * S3-compatible endpoint
     */
    s3CompatibleEndpoint?: pulumi.Input<string>;
    /**
     * S3-compatible endpoint
     */
    s3CompatibleRegion?: pulumi.Input<string>;
    /**
     * S3-compatible secret key
     */
    s3CompatibleSecretKey?: pulumi.Input<string>;
    /**
     * S3 region
     */
    s3Region?: pulumi.Input<string>;
    /**
     * Remote server certificate
     */
    serverCertificate?: pulumi.Input<string>;
    /**
     * Remote server SSH Host Key. If provided, we will require that the server host key matches the provided key. Uses OpenSSH
     * format similar to what would go into ~/.ssh/known_hosts
     */
    serverHostKey?: pulumi.Input<string>;
    /**
     * Remote server type.
     */
    serverType?: pulumi.Input<string>;
    /**
     * Should we require SSL?
     */
    ssl?: pulumi.Input<string>;
    /**
     * SSL client certificate.
     */
    sslCertificate?: pulumi.Input<string>;
    /**
     * If true, this remote server supports file versioning. This value is determined automatically by Files.com.
     */
    supportsVersioning?: pulumi.Input<boolean>;
    /**
     * Remote server username. Not needed for S3 buckets.
     */
    username?: pulumi.Input<string>;
    /**
     * Wasabi access key.
     */
    wasabiAccessKey?: pulumi.Input<string>;
    /**
     * Wasabi Bucket name
     */
    wasabiBucket?: pulumi.Input<string>;
    /**
     * Wasabi region
     */
    wasabiRegion?: pulumi.Input<string>;
    /**
     * Wasabi secret key.
     */
    wasabiSecretKey?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RemoteServer resource.
 */
export interface RemoteServerArgs {
    /**
     * AWS Access Key.
     */
    awsAccessKey?: pulumi.Input<string>;
    /**
     * AWS secret key.
     */
    awsSecretKey?: pulumi.Input<string>;
    /**
     * Azure Blob Storage secret key.
     */
    azureBlobStorageAccessKey?: pulumi.Input<string>;
    /**
     * Azure Blob Storage Account name
     */
    azureBlobStorageAccount?: pulumi.Input<string>;
    /**
     * Azure Blob Storage Container name
     */
    azureBlobStorageContainer?: pulumi.Input<string>;
    /**
     * Enable when storage account has hierarchical namespace feature enabled
     */
    azureBlobStorageHierarchicalNamespace?: pulumi.Input<boolean>;
    /**
     * Shared Access Signature (SAS) token
     */
    azureBlobStorageSasToken?: pulumi.Input<string>;
    /**
     * Azure File Storage access key.
     */
    azureFilesStorageAccessKey?: pulumi.Input<string>;
    /**
     * Azure File Storage Account name
     */
    azureFilesStorageAccount?: pulumi.Input<string>;
    /**
     * Shared Access Signature (SAS) token
     */
    azureFilesStorageSasToken?: pulumi.Input<string>;
    /**
     * Azure File Storage Share name
     */
    azureFilesStorageShareName?: pulumi.Input<string>;
    /**
     * Backblaze B2 Cloud Storage applicationKey.
     */
    backblazeB2ApplicationKey?: pulumi.Input<string>;
    /**
     * Backblaze B2 Cloud Storage Bucket name
     */
    backblazeB2Bucket?: pulumi.Input<string>;
    /**
     * Backblaze B2 Cloud Storage keyID.
     */
    backblazeB2KeyId?: pulumi.Input<string>;
    /**
     * Backblaze B2 Cloud Storage S3 Endpoint
     */
    backblazeB2S3Endpoint?: pulumi.Input<string>;
    /**
     * Cloudflare Access Key.
     */
    cloudflareAccessKey?: pulumi.Input<string>;
    /**
     * Cloudflare Bucket name
     */
    cloudflareBucket?: pulumi.Input<string>;
    /**
     * Cloudflare endpoint
     */
    cloudflareEndpoint?: pulumi.Input<string>;
    /**
     * Cloudflare secret key
     */
    cloudflareSecretKey?: pulumi.Input<string>;
    /**
     * List Team folders in root
     */
    dropboxTeams?: pulumi.Input<boolean>;
    /**
     * `true` if remote server only accepts connections from dedicated IPs
     */
    enableDedicatedIps?: pulumi.Input<boolean>;
    /**
     * Filebase Access Key.
     */
    filebaseAccessKey?: pulumi.Input<string>;
    /**
     * Filebase Bucket name
     */
    filebaseBucket?: pulumi.Input<string>;
    /**
     * Filebase secret key
     */
    filebaseSecretKey?: pulumi.Input<string>;
    /**
     * Local permissions for files agent. read_only, write_only, or read_write
     */
    filesAgentPermissionSet?: pulumi.Input<string>;
    /**
     * Agent local root path
     */
    filesAgentRoot?: pulumi.Input<string>;
    /**
     * Files Agent version
     */
    filesAgentVersion?: pulumi.Input<string>;
    /**
     * Google Cloud Storage bucket name
     */
    googleCloudStorageBucket?: pulumi.Input<string>;
    /**
     * A JSON file that contains the private key. To generate see
     * https://cloud.google.com/storage/docs/json_api/v1/how-tos/authorizing#APIKey
     */
    googleCloudStorageCredentialsJson?: pulumi.Input<string>;
    /**
     * Google Cloud Project ID
     */
    googleCloudStorageProjectId?: pulumi.Input<string>;
    /**
     * Hostname or IP address
     */
    hostname?: pulumi.Input<string>;
    /**
     * Linode Access Key.
     */
    linodeAccessKey?: pulumi.Input<string>;
    /**
     * Linode Bucket name
     */
    linodeBucket?: pulumi.Input<string>;
    /**
     * Linode region
     */
    linodeRegion?: pulumi.Input<string>;
    /**
     * Linode secret key
     */
    linodeSecretKey?: pulumi.Input<string>;
    /**
     * Max number of parallel connections. Ignored for S3 connections (we will parallelize these as much as possible).
     */
    maxConnections?: pulumi.Input<number>;
    /**
     * Internal name for your reference
     */
    name?: pulumi.Input<string>;
    /**
     * Either personal or business_other account types
     */
    oneDriveAccountType?: pulumi.Input<string>;
    /**
     * Password if needed.
     */
    password?: pulumi.Input<string>;
    /**
     * If true, we will ensure that all communications with this remote server are made through the primary region of the site.
     * This setting can also be overridden by a sitewide setting which will force it to true.
     */
    pinToSiteRegion?: pulumi.Input<boolean>;
    /**
     * Port for remote server. Not needed for S3.
     */
    port?: pulumi.Input<number>;
    /**
     * Private key if needed.
     */
    privateKey?: pulumi.Input<string>;
    /**
     * Passphrase for private key if needed.
     */
    privateKeyPassphrase?: pulumi.Input<string>;
    /**
     * Rackspace API key from the Rackspace Cloud Control Panel.
     */
    rackspaceApiKey?: pulumi.Input<string>;
    /**
     * The name of the container (top level directory) where files will sync.
     */
    rackspaceContainer?: pulumi.Input<string>;
    /**
     * Three letter airport code for Rackspace region. See https://support.rackspace.com/how-to/about-regions/
     */
    rackspaceRegion?: pulumi.Input<string>;
    /**
     * Rackspace username used to login to the Rackspace Cloud Control Panel.
     */
    rackspaceUsername?: pulumi.Input<string>;
    /**
     * Reset authenticated account
     */
    resetAuthentication?: pulumi.Input<boolean>;
    /**
     * S3 bucket name
     */
    s3Bucket?: pulumi.Input<string>;
    /**
     * S3-compatible Access Key.
     */
    s3CompatibleAccessKey?: pulumi.Input<string>;
    /**
     * S3-compatible Bucket name
     */
    s3CompatibleBucket?: pulumi.Input<string>;
    /**
     * S3-compatible endpoint
     */
    s3CompatibleEndpoint?: pulumi.Input<string>;
    /**
     * S3-compatible endpoint
     */
    s3CompatibleRegion?: pulumi.Input<string>;
    /**
     * S3-compatible secret key
     */
    s3CompatibleSecretKey?: pulumi.Input<string>;
    /**
     * S3 region
     */
    s3Region?: pulumi.Input<string>;
    /**
     * Remote server certificate
     */
    serverCertificate?: pulumi.Input<string>;
    /**
     * Remote server SSH Host Key. If provided, we will require that the server host key matches the provided key. Uses OpenSSH
     * format similar to what would go into ~/.ssh/known_hosts
     */
    serverHostKey?: pulumi.Input<string>;
    /**
     * Remote server type.
     */
    serverType?: pulumi.Input<string>;
    /**
     * Should we require SSL?
     */
    ssl?: pulumi.Input<string>;
    /**
     * SSL client certificate.
     */
    sslCertificate?: pulumi.Input<string>;
    /**
     * Remote server username. Not needed for S3 buckets.
     */
    username?: pulumi.Input<string>;
    /**
     * Wasabi access key.
     */
    wasabiAccessKey?: pulumi.Input<string>;
    /**
     * Wasabi Bucket name
     */
    wasabiBucket?: pulumi.Input<string>;
    /**
     * Wasabi region
     */
    wasabiRegion?: pulumi.Input<string>;
    /**
     * Wasabi secret key.
     */
    wasabiSecretKey?: pulumi.Input<string>;
}
