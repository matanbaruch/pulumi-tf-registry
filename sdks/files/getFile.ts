// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getFile(args: GetFileArgs, opts?: pulumi.InvokeOptions): Promise<GetFileResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("files:index/getFile:getFile", {
        "path": args.path,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getFile.
 */
export interface GetFileArgs {
    path: string;
}

/**
 * A collection of values returned by getFile.
 */
export interface GetFileResult {
    readonly crc32: string;
    readonly createdAt: string;
    readonly createdByApiKeyId: number;
    readonly createdByAs2IncomingMessageId: number;
    readonly createdByAutomationId: number;
    readonly createdByBundleRegistrationId: number;
    readonly createdById: number;
    readonly createdByInboxId: number;
    readonly createdByRemoteServerId: number;
    readonly createdByRemoteServerSyncId: number;
    readonly customMetadata: any;
    readonly displayName: string;
    readonly downloadUri: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly isLocked: boolean;
    readonly lastModifiedByApiKeyId: number;
    readonly lastModifiedByAutomationId: number;
    readonly lastModifiedByBundleRegistrationId: number;
    readonly lastModifiedById: number;
    readonly lastModifiedByRemoteServerId: number;
    readonly lastModifiedByRemoteServerSyncId: number;
    readonly md5: string;
    readonly mimeType: string;
    readonly mtime: string;
    readonly path: string;
    readonly permissions: string;
    readonly preview: string;
    readonly previewId: number;
    readonly priorityColor: string;
    readonly providedMtime: string;
    readonly region: string;
    readonly size: number;
    readonly subfoldersLocked: boolean;
    readonly type: string;
}
export function getFileOutput(args: GetFileOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetFileResult> {
    return pulumi.output(args).apply((a: any) => getFile(a, opts))
}

/**
 * A collection of arguments for invoking getFile.
 */
export interface GetFileOutputArgs {
    path: pulumi.Input<string>;
}
