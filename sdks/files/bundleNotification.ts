// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class BundleNotification extends pulumi.CustomResource {
    /**
     * Get an existing BundleNotification resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BundleNotificationState, opts?: pulumi.CustomResourceOptions): BundleNotification {
        return new BundleNotification(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'files:index/bundleNotification:BundleNotification';

    /**
     * Returns true if the given object is an instance of BundleNotification.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BundleNotification {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BundleNotification.__pulumiType;
    }

    /**
     * Bundle ID to notify on
     */
    public readonly bundleId!: pulumi.Output<number>;
    /**
     * Triggers bundle notification when a registration action occurs for it.
     */
    public readonly notifyOnRegistration!: pulumi.Output<boolean>;
    /**
     * Triggers bundle notification when a upload action occurs for it.
     */
    public readonly notifyOnUpload!: pulumi.Output<boolean>;
    /**
     * The id of the user to notify.
     */
    public readonly userId!: pulumi.Output<number>;

    /**
     * Create a BundleNotification resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BundleNotificationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BundleNotificationArgs | BundleNotificationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BundleNotificationState | undefined;
            resourceInputs["bundleId"] = state ? state.bundleId : undefined;
            resourceInputs["notifyOnRegistration"] = state ? state.notifyOnRegistration : undefined;
            resourceInputs["notifyOnUpload"] = state ? state.notifyOnUpload : undefined;
            resourceInputs["userId"] = state ? state.userId : undefined;
        } else {
            const args = argsOrState as BundleNotificationArgs | undefined;
            if ((!args || args.bundleId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bundleId'");
            }
            resourceInputs["bundleId"] = args ? args.bundleId : undefined;
            resourceInputs["notifyOnRegistration"] = args ? args.notifyOnRegistration : undefined;
            resourceInputs["notifyOnUpload"] = args ? args.notifyOnUpload : undefined;
            resourceInputs["userId"] = args ? args.userId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BundleNotification.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering BundleNotification resources.
 */
export interface BundleNotificationState {
    /**
     * Bundle ID to notify on
     */
    bundleId?: pulumi.Input<number>;
    /**
     * Triggers bundle notification when a registration action occurs for it.
     */
    notifyOnRegistration?: pulumi.Input<boolean>;
    /**
     * Triggers bundle notification when a upload action occurs for it.
     */
    notifyOnUpload?: pulumi.Input<boolean>;
    /**
     * The id of the user to notify.
     */
    userId?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a BundleNotification resource.
 */
export interface BundleNotificationArgs {
    /**
     * Bundle ID to notify on
     */
    bundleId: pulumi.Input<number>;
    /**
     * Triggers bundle notification when a registration action occurs for it.
     */
    notifyOnRegistration?: pulumi.Input<boolean>;
    /**
     * Triggers bundle notification when a upload action occurs for it.
     */
    notifyOnUpload?: pulumi.Input<boolean>;
    /**
     * The id of the user to notify.
     */
    userId?: pulumi.Input<number>;
}
