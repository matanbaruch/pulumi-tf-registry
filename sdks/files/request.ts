// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Request extends pulumi.CustomResource {
    /**
     * Get an existing Request resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RequestState, opts?: pulumi.CustomResourceOptions): Request {
        return new Request(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'files:index/request:Request';

    /**
     * Returns true if the given object is an instance of Request.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Request {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Request.__pulumiType;
    }

    /**
     * ID of automation that created request
     */
    public /*out*/ readonly automationId!: pulumi.Output<string>;
    /**
     * Destination filename
     */
    public readonly destination!: pulumi.Output<string>;
    /**
     * A list of group IDs to request the file from. If sent as a string, it should be comma-delimited.
     */
    public readonly groupIds!: pulumi.Output<string | undefined>;
    /**
     * Folder path. This must be slash-delimited, but it must neither start nor end with a slash. Maximum of 5000 characters.
     */
    public readonly path!: pulumi.Output<string>;
    /**
     * Source filename, if applicable
     */
    public /*out*/ readonly source!: pulumi.Output<string>;
    /**
     * User making the request (if applicable)
     */
    public /*out*/ readonly userDisplayName!: pulumi.Output<string>;
    /**
     * A list of user IDs to request the file from. If sent as a string, it should be comma-delimited.
     */
    public readonly userIds!: pulumi.Output<string | undefined>;

    /**
     * Create a Request resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RequestArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RequestArgs | RequestState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RequestState | undefined;
            resourceInputs["automationId"] = state ? state.automationId : undefined;
            resourceInputs["destination"] = state ? state.destination : undefined;
            resourceInputs["groupIds"] = state ? state.groupIds : undefined;
            resourceInputs["path"] = state ? state.path : undefined;
            resourceInputs["source"] = state ? state.source : undefined;
            resourceInputs["userDisplayName"] = state ? state.userDisplayName : undefined;
            resourceInputs["userIds"] = state ? state.userIds : undefined;
        } else {
            const args = argsOrState as RequestArgs | undefined;
            if ((!args || args.destination === undefined) && !opts.urn) {
                throw new Error("Missing required property 'destination'");
            }
            if ((!args || args.path === undefined) && !opts.urn) {
                throw new Error("Missing required property 'path'");
            }
            resourceInputs["destination"] = args ? args.destination : undefined;
            resourceInputs["groupIds"] = args ? args.groupIds : undefined;
            resourceInputs["path"] = args ? args.path : undefined;
            resourceInputs["userIds"] = args ? args.userIds : undefined;
            resourceInputs["automationId"] = undefined /*out*/;
            resourceInputs["source"] = undefined /*out*/;
            resourceInputs["userDisplayName"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Request.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Request resources.
 */
export interface RequestState {
    /**
     * ID of automation that created request
     */
    automationId?: pulumi.Input<string>;
    /**
     * Destination filename
     */
    destination?: pulumi.Input<string>;
    /**
     * A list of group IDs to request the file from. If sent as a string, it should be comma-delimited.
     */
    groupIds?: pulumi.Input<string>;
    /**
     * Folder path. This must be slash-delimited, but it must neither start nor end with a slash. Maximum of 5000 characters.
     */
    path?: pulumi.Input<string>;
    /**
     * Source filename, if applicable
     */
    source?: pulumi.Input<string>;
    /**
     * User making the request (if applicable)
     */
    userDisplayName?: pulumi.Input<string>;
    /**
     * A list of user IDs to request the file from. If sent as a string, it should be comma-delimited.
     */
    userIds?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Request resource.
 */
export interface RequestArgs {
    /**
     * Destination filename
     */
    destination: pulumi.Input<string>;
    /**
     * A list of group IDs to request the file from. If sent as a string, it should be comma-delimited.
     */
    groupIds?: pulumi.Input<string>;
    /**
     * Folder path. This must be slash-delimited, but it must neither start nor end with a slash. Maximum of 5000 characters.
     */
    path: pulumi.Input<string>;
    /**
     * A list of user IDs to request the file from. If sent as a string, it should be comma-delimited.
     */
    userIds?: pulumi.Input<string>;
}
