// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ApiKey extends pulumi.CustomResource {
    /**
     * Get an existing ApiKey resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ApiKeyState, opts?: pulumi.CustomResourceOptions): ApiKey {
        return new ApiKey(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'files:index/apiKey:ApiKey';

    /**
     * Returns true if the given object is an instance of ApiKey.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ApiKey {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ApiKey.__pulumiType;
    }

    /**
     * Time which API Key was created
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * User-supplied description of API key.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * Unique label that describes this API key. Useful for external systems where you may have API keys from multiple accounts
     * and want a human-readable label for each key.
     */
    public /*out*/ readonly descriptiveLabel!: pulumi.Output<string>;
    /**
     * API Key expiration date
     */
    public readonly expiresAt!: pulumi.Output<string>;
    /**
     * API Key actual key string
     */
    public /*out*/ readonly key!: pulumi.Output<string>;
    /**
     * API Key last used - note this value is only updated once per 3 hour period, so the 'actual' time of last use may be up
     * to 3 hours later than this timestamp.
     */
    public /*out*/ readonly lastUseAt!: pulumi.Output<string>;
    /**
     * Internal name for the API Key. For your use.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Folder path restriction for `office_integration` permission set API keys.
     */
    public readonly path!: pulumi.Output<string | undefined>;
    /**
     * Permissions for this API Key. It must be full for site-wide API Keys. Keys with the `desktop_app` permission set only
     * have the ability to do the functions provided in our Desktop App (File and Share Link operations). Keys with the
     * `office_integration` permission set are auto generated, and automatically expire, to allow users to interact with office
     * integration platforms. Additional permission sets may become available in the future, such as for a Site Admin to give a
     * key with no administrator privileges. If you have ideas for permission sets, please let us know.
     */
    public readonly permissionSet!: pulumi.Output<string>;
    /**
     * If this API key represents a Desktop app, what platform was it created on?
     */
    public /*out*/ readonly platform!: pulumi.Output<string>;
    /**
     * URL for API host.
     */
    public /*out*/ readonly url!: pulumi.Output<string>;
    /**
     * User ID for the owner of this API Key. May be blank for Site-wide API Keys.
     */
    public readonly userId!: pulumi.Output<number>;

    /**
     * Create a ApiKey resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ApiKeyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ApiKeyArgs | ApiKeyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ApiKeyState | undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["descriptiveLabel"] = state ? state.descriptiveLabel : undefined;
            resourceInputs["expiresAt"] = state ? state.expiresAt : undefined;
            resourceInputs["key"] = state ? state.key : undefined;
            resourceInputs["lastUseAt"] = state ? state.lastUseAt : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["path"] = state ? state.path : undefined;
            resourceInputs["permissionSet"] = state ? state.permissionSet : undefined;
            resourceInputs["platform"] = state ? state.platform : undefined;
            resourceInputs["url"] = state ? state.url : undefined;
            resourceInputs["userId"] = state ? state.userId : undefined;
        } else {
            const args = argsOrState as ApiKeyArgs | undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["expiresAt"] = args ? args.expiresAt : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["path"] = args ? args.path : undefined;
            resourceInputs["permissionSet"] = args ? args.permissionSet : undefined;
            resourceInputs["userId"] = args ? args.userId : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["descriptiveLabel"] = undefined /*out*/;
            resourceInputs["key"] = undefined /*out*/;
            resourceInputs["lastUseAt"] = undefined /*out*/;
            resourceInputs["platform"] = undefined /*out*/;
            resourceInputs["url"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ApiKey.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ApiKey resources.
 */
export interface ApiKeyState {
    /**
     * Time which API Key was created
     */
    createdAt?: pulumi.Input<string>;
    /**
     * User-supplied description of API key.
     */
    description?: pulumi.Input<string>;
    /**
     * Unique label that describes this API key. Useful for external systems where you may have API keys from multiple accounts
     * and want a human-readable label for each key.
     */
    descriptiveLabel?: pulumi.Input<string>;
    /**
     * API Key expiration date
     */
    expiresAt?: pulumi.Input<string>;
    /**
     * API Key actual key string
     */
    key?: pulumi.Input<string>;
    /**
     * API Key last used - note this value is only updated once per 3 hour period, so the 'actual' time of last use may be up
     * to 3 hours later than this timestamp.
     */
    lastUseAt?: pulumi.Input<string>;
    /**
     * Internal name for the API Key. For your use.
     */
    name?: pulumi.Input<string>;
    /**
     * Folder path restriction for `office_integration` permission set API keys.
     */
    path?: pulumi.Input<string>;
    /**
     * Permissions for this API Key. It must be full for site-wide API Keys. Keys with the `desktop_app` permission set only
     * have the ability to do the functions provided in our Desktop App (File and Share Link operations). Keys with the
     * `office_integration` permission set are auto generated, and automatically expire, to allow users to interact with office
     * integration platforms. Additional permission sets may become available in the future, such as for a Site Admin to give a
     * key with no administrator privileges. If you have ideas for permission sets, please let us know.
     */
    permissionSet?: pulumi.Input<string>;
    /**
     * If this API key represents a Desktop app, what platform was it created on?
     */
    platform?: pulumi.Input<string>;
    /**
     * URL for API host.
     */
    url?: pulumi.Input<string>;
    /**
     * User ID for the owner of this API Key. May be blank for Site-wide API Keys.
     */
    userId?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a ApiKey resource.
 */
export interface ApiKeyArgs {
    /**
     * User-supplied description of API key.
     */
    description?: pulumi.Input<string>;
    /**
     * API Key expiration date
     */
    expiresAt?: pulumi.Input<string>;
    /**
     * Internal name for the API Key. For your use.
     */
    name?: pulumi.Input<string>;
    /**
     * Folder path restriction for `office_integration` permission set API keys.
     */
    path?: pulumi.Input<string>;
    /**
     * Permissions for this API Key. It must be full for site-wide API Keys. Keys with the `desktop_app` permission set only
     * have the ability to do the functions provided in our Desktop App (File and Share Link operations). Keys with the
     * `office_integration` permission set are auto generated, and automatically expire, to allow users to interact with office
     * integration platforms. Additional permission sets may become available in the future, such as for a Site Admin to give a
     * key with no administrator privileges. If you have ideas for permission sets, please let us know.
     */
    permissionSet?: pulumi.Input<string>;
    /**
     * User ID for the owner of this API Key. May be blank for Site-wide API Keys.
     */
    userId?: pulumi.Input<number>;
}
