// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Lock extends pulumi.CustomResource {
    /**
     * Get an existing Lock resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LockState, opts?: pulumi.CustomResourceOptions): Lock {
        return new Lock(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'files:index/lock:Lock';

    /**
     * Returns true if the given object is an instance of Lock.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Lock {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Lock.__pulumiType;
    }

    /**
     * Can lock be modified by users other than its creator?
     */
    public readonly allowAccessByAnyUser!: pulumi.Output<boolean>;
    public /*out*/ readonly depth!: pulumi.Output<string>;
    /**
     * Is lock exclusive?
     */
    public readonly exclusive!: pulumi.Output<boolean>;
    /**
     * Owner of the lock. This can be any arbitrary string.
     */
    public /*out*/ readonly owner!: pulumi.Output<string>;
    /**
     * Path. This must be slash-delimited, but it must neither start nor end with a slash. Maximum of 5000 characters.
     */
    public readonly path!: pulumi.Output<string>;
    /**
     * Does lock apply to subfolders?
     */
    public readonly recursive!: pulumi.Output<boolean>;
    public /*out*/ readonly scope!: pulumi.Output<string>;
    /**
     * Lock timeout in seconds
     */
    public readonly timeout!: pulumi.Output<number>;
    /**
     * Lock token. Use to release lock.
     */
    public /*out*/ readonly token!: pulumi.Output<string>;
    public /*out*/ readonly type!: pulumi.Output<string>;
    /**
     * Lock creator user ID
     */
    public /*out*/ readonly userId!: pulumi.Output<number>;
    /**
     * Lock creator username
     */
    public /*out*/ readonly username!: pulumi.Output<string>;

    /**
     * Create a Lock resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LockArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LockArgs | LockState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LockState | undefined;
            resourceInputs["allowAccessByAnyUser"] = state ? state.allowAccessByAnyUser : undefined;
            resourceInputs["depth"] = state ? state.depth : undefined;
            resourceInputs["exclusive"] = state ? state.exclusive : undefined;
            resourceInputs["owner"] = state ? state.owner : undefined;
            resourceInputs["path"] = state ? state.path : undefined;
            resourceInputs["recursive"] = state ? state.recursive : undefined;
            resourceInputs["scope"] = state ? state.scope : undefined;
            resourceInputs["timeout"] = state ? state.timeout : undefined;
            resourceInputs["token"] = state ? state.token : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["userId"] = state ? state.userId : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
        } else {
            const args = argsOrState as LockArgs | undefined;
            if ((!args || args.path === undefined) && !opts.urn) {
                throw new Error("Missing required property 'path'");
            }
            resourceInputs["allowAccessByAnyUser"] = args ? args.allowAccessByAnyUser : undefined;
            resourceInputs["exclusive"] = args ? args.exclusive : undefined;
            resourceInputs["path"] = args ? args.path : undefined;
            resourceInputs["recursive"] = args ? args.recursive : undefined;
            resourceInputs["timeout"] = args ? args.timeout : undefined;
            resourceInputs["depth"] = undefined /*out*/;
            resourceInputs["owner"] = undefined /*out*/;
            resourceInputs["scope"] = undefined /*out*/;
            resourceInputs["token"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
            resourceInputs["userId"] = undefined /*out*/;
            resourceInputs["username"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Lock.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Lock resources.
 */
export interface LockState {
    /**
     * Can lock be modified by users other than its creator?
     */
    allowAccessByAnyUser?: pulumi.Input<boolean>;
    depth?: pulumi.Input<string>;
    /**
     * Is lock exclusive?
     */
    exclusive?: pulumi.Input<boolean>;
    /**
     * Owner of the lock. This can be any arbitrary string.
     */
    owner?: pulumi.Input<string>;
    /**
     * Path. This must be slash-delimited, but it must neither start nor end with a slash. Maximum of 5000 characters.
     */
    path?: pulumi.Input<string>;
    /**
     * Does lock apply to subfolders?
     */
    recursive?: pulumi.Input<boolean>;
    scope?: pulumi.Input<string>;
    /**
     * Lock timeout in seconds
     */
    timeout?: pulumi.Input<number>;
    /**
     * Lock token. Use to release lock.
     */
    token?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    /**
     * Lock creator user ID
     */
    userId?: pulumi.Input<number>;
    /**
     * Lock creator username
     */
    username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Lock resource.
 */
export interface LockArgs {
    /**
     * Can lock be modified by users other than its creator?
     */
    allowAccessByAnyUser?: pulumi.Input<boolean>;
    /**
     * Is lock exclusive?
     */
    exclusive?: pulumi.Input<boolean>;
    /**
     * Path. This must be slash-delimited, but it must neither start nor end with a slash. Maximum of 5000 characters.
     */
    path: pulumi.Input<string>;
    /**
     * Does lock apply to subfolders?
     */
    recursive?: pulumi.Input<boolean>;
    /**
     * Lock timeout in seconds
     */
    timeout?: pulumi.Input<number>;
}
