// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class User extends pulumi.CustomResource {
    /**
     * Get an existing User resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UserState, opts?: pulumi.CustomResourceOptions): User {
        return new User(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'files:index/user:User';

    /**
     * Returns true if the given object is an instance of User.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is User {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === User.__pulumiType;
    }

    /**
     * Is 2fa active for the user?
     */
    public /*out*/ readonly active2fa!: pulumi.Output<boolean>;
    /**
     * List of group IDs of which this user is an administrator
     */
    public /*out*/ readonly adminGroupIds!: pulumi.Output<number[]>;
    /**
     * A list of allowed IPs if applicable. Newline delimited
     */
    public readonly allowedIps!: pulumi.Output<string>;
    /**
     * Signifies that the user has read all the announcements in the UI.
     */
    public readonly announcementsRead!: pulumi.Output<boolean | undefined>;
    /**
     * Number of API keys associated with this user
     */
    public /*out*/ readonly apiKeysCount!: pulumi.Output<number>;
    /**
     * If `true`, the user can user create Bundles (aka Share Links). Use the bundle permission instead.
     */
    public readonly attachmentsPermission!: pulumi.Output<boolean>;
    /**
     * Scheduled Date/Time at which user will be deactivated
     */
    public readonly authenticateUntil!: pulumi.Output<string>;
    /**
     * How is this user authenticated?
     */
    public readonly authenticationMethod!: pulumi.Output<string>;
    /**
     * If true, the avatar will be deleted.
     */
    public readonly avatarDelete!: pulumi.Output<boolean | undefined>;
    /**
     * URL holding the user's avatar
     */
    public /*out*/ readonly avatarUrl!: pulumi.Output<string>;
    /**
     * Allow this user to perform operations on the account, payments, and invoices?
     */
    public readonly billingPermission!: pulumi.Output<boolean>;
    /**
     * Exempt this user from being disabled based on inactivity?
     */
    public readonly bypassInactiveDisable!: pulumi.Output<boolean>;
    /**
     * Allow this user to skip site-wide IP blacklists?
     */
    public readonly bypassSiteAllowedIps!: pulumi.Output<boolean>;
    /**
     * Used for changing a password on an existing user.
     */
    public readonly changePassword!: pulumi.Output<string | undefined>;
    /**
     * Optional, but if provided, we will ensure that it matches the value sent in `change_password`.
     */
    public readonly changePasswordConfirmation!: pulumi.Output<string | undefined>;
    /**
     * User's company
     */
    public readonly company!: pulumi.Output<string>;
    /**
     * When this user was created
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * Can the user connect with WebDAV?
     */
    public readonly davPermission!: pulumi.Output<boolean>;
    /**
     * Number of days remaining until password expires
     */
    public /*out*/ readonly daysRemainingUntilPasswordExpire!: pulumi.Output<number>;
    /**
     * Is user disabled? Disabled users cannot log in, and do not count for billing purposes. Users can be automatically
     * disabled after an inactivity period via a Site setting or schedule to be deactivated after specific date.
     */
    public readonly disabled!: pulumi.Output<boolean>;
    /**
     * Computed property that returns true if user disabled or expired or inactive.
     */
    public /*out*/ readonly disabledExpiredOrInactive!: pulumi.Output<boolean>;
    /**
     * User email address
     */
    public readonly email!: pulumi.Output<string>;
    /**
     * Is this user managed by a SsoStrategy?
     */
    public /*out*/ readonly externallyManaged!: pulumi.Output<boolean>;
    /**
     * User's first login time
     */
    public /*out*/ readonly firstLoginAt!: pulumi.Output<string>;
    /**
     * Can the user access with FTP/FTPS?
     */
    public readonly ftpPermission!: pulumi.Output<boolean>;
    /**
     * Permission to grant on the user root. Can be blank or `full`, `read`, `write`, `list`, `read+write`, or `list+write`
     */
    public readonly grantPermission!: pulumi.Output<string | undefined>;
    /**
     * Group ID to associate this user with.
     */
    public readonly groupId!: pulumi.Output<number | undefined>;
    /**
     * Comma-separated list of group IDs of which this user is a member
     */
    public readonly groupIds!: pulumi.Output<string>;
    /**
     * Text to display to the user in the header of the UI
     */
    public readonly headerText!: pulumi.Output<string>;
    /**
     * Pre-calculated hash of the user's password. If supplied, this will be used to authenticate the user on first login.
     * Supported hash methods are MD5, SHA1, and SHA256.
     */
    public readonly importedPasswordHash!: pulumi.Output<string | undefined>;
    /**
     * Preferred language
     */
    public readonly language!: pulumi.Output<string>;
    /**
     * User's most recent activity time, which is the latest of most recent login, most recent API use, enablement, or creation
     */
    public /*out*/ readonly lastActiveAt!: pulumi.Output<string>;
    /**
     * User's most recent API use time
     */
    public /*out*/ readonly lastApiUseAt!: pulumi.Output<string>;
    /**
     * User's most recent login time via WebDAV
     */
    public /*out*/ readonly lastDavLoginAt!: pulumi.Output<string>;
    /**
     * User's most recent login time via Desktop app
     */
    public /*out*/ readonly lastDesktopLoginAt!: pulumi.Output<string>;
    /**
     * User's most recent login time via FTP
     */
    public /*out*/ readonly lastFtpLoginAt!: pulumi.Output<string>;
    /**
     * User's most recent login time via any protocol
     */
    public /*out*/ readonly lastLoginAt!: pulumi.Output<string>;
    /**
     * The most recent protocol and cipher used
     */
    public /*out*/ readonly lastProtocolCipher!: pulumi.Output<string>;
    /**
     * User's most recent login time via Rest API
     */
    public /*out*/ readonly lastRestapiLoginAt!: pulumi.Output<string>;
    /**
     * User's most recent login time via SFTP
     */
    public /*out*/ readonly lastSftpLoginAt!: pulumi.Output<string>;
    /**
     * User's most recent login time via web
     */
    public /*out*/ readonly lastWebLoginAt!: pulumi.Output<string>;
    /**
     * Time in the future that the user will no longer be locked out if applicable
     */
    public /*out*/ readonly lockoutExpires!: pulumi.Output<string>;
    /**
     * User's full name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Any internal notes on the user
     */
    public readonly notes!: pulumi.Output<string>;
    /**
     * Hour of the day at which daily notifications should be sent. Can be in range 0 to 23
     */
    public readonly notificationDailySendTime!: pulumi.Output<number>;
    /**
     * Enable integration with Office for the web?
     */
    public readonly officeIntegrationEnabled!: pulumi.Output<boolean>;
    /**
     * User password.
     */
    public readonly password!: pulumi.Output<string | undefined>;
    /**
     * Optional, but if provided, we will ensure that it matches the value sent in `password`.
     */
    public readonly passwordConfirmation!: pulumi.Output<string | undefined>;
    /**
     * Password expiration datetime
     */
    public /*out*/ readonly passwordExpireAt!: pulumi.Output<string>;
    /**
     * Is user's password expired?
     */
    public /*out*/ readonly passwordExpired!: pulumi.Output<boolean>;
    /**
     * Last time the user's password was set
     */
    public /*out*/ readonly passwordSetAt!: pulumi.Output<string>;
    /**
     * Number of days to allow user to use the same password
     */
    public readonly passwordValidityDays!: pulumi.Output<number>;
    /**
     * Number of public keys associated with this user
     */
    public /*out*/ readonly publicKeysCount!: pulumi.Output<number>;
    /**
     * Is the user an allowed to view all (non-billing) site configuration for this site?
     */
    public readonly readonlySiteAdmin!: pulumi.Output<boolean>;
    /**
     * Should the user receive admin alerts such a certificate expiration notifications and overages?
     */
    public readonly receiveAdminAlerts!: pulumi.Output<boolean>;
    /**
     * 2FA required setting
     */
    public readonly require2fa!: pulumi.Output<string>;
    /**
     * Require user to login by specified date otherwise it will be disabled.
     */
    public readonly requireLoginBy!: pulumi.Output<string>;
    /**
     * Is a password change required upon next user login?
     */
    public readonly requirePasswordChange!: pulumi.Output<boolean>;
    /**
     * Can this user access the Web app, Desktop app, SDKs, or REST API? (All of these tools use the API internally, so this is
     * one unified permission set.)
     */
    public readonly restapiPermission!: pulumi.Output<boolean>;
    /**
     * Does this user manage it's own credentials or is it a shared/bot user?
     */
    public readonly selfManaged!: pulumi.Output<boolean>;
    /**
     * Can the user access with SFTP?
     */
    public readonly sftpPermission!: pulumi.Output<boolean>;
    /**
     * Is the user an administrator for this site?
     */
    public readonly siteAdmin!: pulumi.Output<boolean>;
    /**
     * Skip Welcome page in the UI?
     */
    public readonly skipWelcomeScreen!: pulumi.Output<boolean>;
    /**
     * SSL required setting
     */
    public readonly sslRequired!: pulumi.Output<string>;
    /**
     * SSO (Single Sign On) strategy ID for the user, if applicable.
     */
    public readonly ssoStrategyId!: pulumi.Output<number>;
    /**
     * Is the user subscribed to the newsletter?
     */
    public readonly subscribeToNewsletter!: pulumi.Output<boolean>;
    /**
     * User time zone
     */
    public readonly timeZone!: pulumi.Output<string>;
    /**
     * Type(s) of 2FA methods in use, for programmatic use. Will be either `sms`, `totp`, `u2f`, `yubi`, or multiple values
     * sorted alphabetically and joined by an underscore. Does not specify whether user has more than one of a given method.
     */
    public /*out*/ readonly typeOf2fa!: pulumi.Output<string>;
    /**
     * Type(s) of 2FA methods in use, formatted for displaying in the UI. Unlike `type_of_2fa`, this value will make clear when
     * a user has more than 1 of the same type of method.
     */
    public /*out*/ readonly typeOf2faForDisplay!: pulumi.Output<string>;
    /**
     * Root folder for FTP (and optionally SFTP if the appropriate site-wide setting is set.) Note that this is not used for
     * API, Desktop, or Web interface.
     */
    public readonly userRoot!: pulumi.Output<string>;
    /**
     * User's username
     */
    public readonly username!: pulumi.Output<string>;

    /**
     * Create a User resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UserArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UserArgs | UserState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UserState | undefined;
            resourceInputs["active2fa"] = state ? state.active2fa : undefined;
            resourceInputs["adminGroupIds"] = state ? state.adminGroupIds : undefined;
            resourceInputs["allowedIps"] = state ? state.allowedIps : undefined;
            resourceInputs["announcementsRead"] = state ? state.announcementsRead : undefined;
            resourceInputs["apiKeysCount"] = state ? state.apiKeysCount : undefined;
            resourceInputs["attachmentsPermission"] = state ? state.attachmentsPermission : undefined;
            resourceInputs["authenticateUntil"] = state ? state.authenticateUntil : undefined;
            resourceInputs["authenticationMethod"] = state ? state.authenticationMethod : undefined;
            resourceInputs["avatarDelete"] = state ? state.avatarDelete : undefined;
            resourceInputs["avatarUrl"] = state ? state.avatarUrl : undefined;
            resourceInputs["billingPermission"] = state ? state.billingPermission : undefined;
            resourceInputs["bypassInactiveDisable"] = state ? state.bypassInactiveDisable : undefined;
            resourceInputs["bypassSiteAllowedIps"] = state ? state.bypassSiteAllowedIps : undefined;
            resourceInputs["changePassword"] = state ? state.changePassword : undefined;
            resourceInputs["changePasswordConfirmation"] = state ? state.changePasswordConfirmation : undefined;
            resourceInputs["company"] = state ? state.company : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["davPermission"] = state ? state.davPermission : undefined;
            resourceInputs["daysRemainingUntilPasswordExpire"] = state ? state.daysRemainingUntilPasswordExpire : undefined;
            resourceInputs["disabled"] = state ? state.disabled : undefined;
            resourceInputs["disabledExpiredOrInactive"] = state ? state.disabledExpiredOrInactive : undefined;
            resourceInputs["email"] = state ? state.email : undefined;
            resourceInputs["externallyManaged"] = state ? state.externallyManaged : undefined;
            resourceInputs["firstLoginAt"] = state ? state.firstLoginAt : undefined;
            resourceInputs["ftpPermission"] = state ? state.ftpPermission : undefined;
            resourceInputs["grantPermission"] = state ? state.grantPermission : undefined;
            resourceInputs["groupId"] = state ? state.groupId : undefined;
            resourceInputs["groupIds"] = state ? state.groupIds : undefined;
            resourceInputs["headerText"] = state ? state.headerText : undefined;
            resourceInputs["importedPasswordHash"] = state ? state.importedPasswordHash : undefined;
            resourceInputs["language"] = state ? state.language : undefined;
            resourceInputs["lastActiveAt"] = state ? state.lastActiveAt : undefined;
            resourceInputs["lastApiUseAt"] = state ? state.lastApiUseAt : undefined;
            resourceInputs["lastDavLoginAt"] = state ? state.lastDavLoginAt : undefined;
            resourceInputs["lastDesktopLoginAt"] = state ? state.lastDesktopLoginAt : undefined;
            resourceInputs["lastFtpLoginAt"] = state ? state.lastFtpLoginAt : undefined;
            resourceInputs["lastLoginAt"] = state ? state.lastLoginAt : undefined;
            resourceInputs["lastProtocolCipher"] = state ? state.lastProtocolCipher : undefined;
            resourceInputs["lastRestapiLoginAt"] = state ? state.lastRestapiLoginAt : undefined;
            resourceInputs["lastSftpLoginAt"] = state ? state.lastSftpLoginAt : undefined;
            resourceInputs["lastWebLoginAt"] = state ? state.lastWebLoginAt : undefined;
            resourceInputs["lockoutExpires"] = state ? state.lockoutExpires : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notes"] = state ? state.notes : undefined;
            resourceInputs["notificationDailySendTime"] = state ? state.notificationDailySendTime : undefined;
            resourceInputs["officeIntegrationEnabled"] = state ? state.officeIntegrationEnabled : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["passwordConfirmation"] = state ? state.passwordConfirmation : undefined;
            resourceInputs["passwordExpireAt"] = state ? state.passwordExpireAt : undefined;
            resourceInputs["passwordExpired"] = state ? state.passwordExpired : undefined;
            resourceInputs["passwordSetAt"] = state ? state.passwordSetAt : undefined;
            resourceInputs["passwordValidityDays"] = state ? state.passwordValidityDays : undefined;
            resourceInputs["publicKeysCount"] = state ? state.publicKeysCount : undefined;
            resourceInputs["readonlySiteAdmin"] = state ? state.readonlySiteAdmin : undefined;
            resourceInputs["receiveAdminAlerts"] = state ? state.receiveAdminAlerts : undefined;
            resourceInputs["require2fa"] = state ? state.require2fa : undefined;
            resourceInputs["requireLoginBy"] = state ? state.requireLoginBy : undefined;
            resourceInputs["requirePasswordChange"] = state ? state.requirePasswordChange : undefined;
            resourceInputs["restapiPermission"] = state ? state.restapiPermission : undefined;
            resourceInputs["selfManaged"] = state ? state.selfManaged : undefined;
            resourceInputs["sftpPermission"] = state ? state.sftpPermission : undefined;
            resourceInputs["siteAdmin"] = state ? state.siteAdmin : undefined;
            resourceInputs["skipWelcomeScreen"] = state ? state.skipWelcomeScreen : undefined;
            resourceInputs["sslRequired"] = state ? state.sslRequired : undefined;
            resourceInputs["ssoStrategyId"] = state ? state.ssoStrategyId : undefined;
            resourceInputs["subscribeToNewsletter"] = state ? state.subscribeToNewsletter : undefined;
            resourceInputs["timeZone"] = state ? state.timeZone : undefined;
            resourceInputs["typeOf2fa"] = state ? state.typeOf2fa : undefined;
            resourceInputs["typeOf2faForDisplay"] = state ? state.typeOf2faForDisplay : undefined;
            resourceInputs["userRoot"] = state ? state.userRoot : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
        } else {
            const args = argsOrState as UserArgs | undefined;
            if ((!args || args.username === undefined) && !opts.urn) {
                throw new Error("Missing required property 'username'");
            }
            resourceInputs["allowedIps"] = args ? args.allowedIps : undefined;
            resourceInputs["announcementsRead"] = args ? args.announcementsRead : undefined;
            resourceInputs["attachmentsPermission"] = args ? args.attachmentsPermission : undefined;
            resourceInputs["authenticateUntil"] = args ? args.authenticateUntil : undefined;
            resourceInputs["authenticationMethod"] = args ? args.authenticationMethod : undefined;
            resourceInputs["avatarDelete"] = args ? args.avatarDelete : undefined;
            resourceInputs["billingPermission"] = args ? args.billingPermission : undefined;
            resourceInputs["bypassInactiveDisable"] = args ? args.bypassInactiveDisable : undefined;
            resourceInputs["bypassSiteAllowedIps"] = args ? args.bypassSiteAllowedIps : undefined;
            resourceInputs["changePassword"] = args ? args.changePassword : undefined;
            resourceInputs["changePasswordConfirmation"] = args ? args.changePasswordConfirmation : undefined;
            resourceInputs["company"] = args ? args.company : undefined;
            resourceInputs["davPermission"] = args ? args.davPermission : undefined;
            resourceInputs["disabled"] = args ? args.disabled : undefined;
            resourceInputs["email"] = args ? args.email : undefined;
            resourceInputs["ftpPermission"] = args ? args.ftpPermission : undefined;
            resourceInputs["grantPermission"] = args ? args.grantPermission : undefined;
            resourceInputs["groupId"] = args ? args.groupId : undefined;
            resourceInputs["groupIds"] = args ? args.groupIds : undefined;
            resourceInputs["headerText"] = args ? args.headerText : undefined;
            resourceInputs["importedPasswordHash"] = args ? args.importedPasswordHash : undefined;
            resourceInputs["language"] = args ? args.language : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["notes"] = args ? args.notes : undefined;
            resourceInputs["notificationDailySendTime"] = args ? args.notificationDailySendTime : undefined;
            resourceInputs["officeIntegrationEnabled"] = args ? args.officeIntegrationEnabled : undefined;
            resourceInputs["password"] = args ? args.password : undefined;
            resourceInputs["passwordConfirmation"] = args ? args.passwordConfirmation : undefined;
            resourceInputs["passwordValidityDays"] = args ? args.passwordValidityDays : undefined;
            resourceInputs["readonlySiteAdmin"] = args ? args.readonlySiteAdmin : undefined;
            resourceInputs["receiveAdminAlerts"] = args ? args.receiveAdminAlerts : undefined;
            resourceInputs["require2fa"] = args ? args.require2fa : undefined;
            resourceInputs["requireLoginBy"] = args ? args.requireLoginBy : undefined;
            resourceInputs["requirePasswordChange"] = args ? args.requirePasswordChange : undefined;
            resourceInputs["restapiPermission"] = args ? args.restapiPermission : undefined;
            resourceInputs["selfManaged"] = args ? args.selfManaged : undefined;
            resourceInputs["sftpPermission"] = args ? args.sftpPermission : undefined;
            resourceInputs["siteAdmin"] = args ? args.siteAdmin : undefined;
            resourceInputs["skipWelcomeScreen"] = args ? args.skipWelcomeScreen : undefined;
            resourceInputs["sslRequired"] = args ? args.sslRequired : undefined;
            resourceInputs["ssoStrategyId"] = args ? args.ssoStrategyId : undefined;
            resourceInputs["subscribeToNewsletter"] = args ? args.subscribeToNewsletter : undefined;
            resourceInputs["timeZone"] = args ? args.timeZone : undefined;
            resourceInputs["userRoot"] = args ? args.userRoot : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
            resourceInputs["active2fa"] = undefined /*out*/;
            resourceInputs["adminGroupIds"] = undefined /*out*/;
            resourceInputs["apiKeysCount"] = undefined /*out*/;
            resourceInputs["avatarUrl"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["daysRemainingUntilPasswordExpire"] = undefined /*out*/;
            resourceInputs["disabledExpiredOrInactive"] = undefined /*out*/;
            resourceInputs["externallyManaged"] = undefined /*out*/;
            resourceInputs["firstLoginAt"] = undefined /*out*/;
            resourceInputs["lastActiveAt"] = undefined /*out*/;
            resourceInputs["lastApiUseAt"] = undefined /*out*/;
            resourceInputs["lastDavLoginAt"] = undefined /*out*/;
            resourceInputs["lastDesktopLoginAt"] = undefined /*out*/;
            resourceInputs["lastFtpLoginAt"] = undefined /*out*/;
            resourceInputs["lastLoginAt"] = undefined /*out*/;
            resourceInputs["lastProtocolCipher"] = undefined /*out*/;
            resourceInputs["lastRestapiLoginAt"] = undefined /*out*/;
            resourceInputs["lastSftpLoginAt"] = undefined /*out*/;
            resourceInputs["lastWebLoginAt"] = undefined /*out*/;
            resourceInputs["lockoutExpires"] = undefined /*out*/;
            resourceInputs["passwordExpireAt"] = undefined /*out*/;
            resourceInputs["passwordExpired"] = undefined /*out*/;
            resourceInputs["passwordSetAt"] = undefined /*out*/;
            resourceInputs["publicKeysCount"] = undefined /*out*/;
            resourceInputs["typeOf2fa"] = undefined /*out*/;
            resourceInputs["typeOf2faForDisplay"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(User.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering User resources.
 */
export interface UserState {
    /**
     * Is 2fa active for the user?
     */
    active2fa?: pulumi.Input<boolean>;
    /**
     * List of group IDs of which this user is an administrator
     */
    adminGroupIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * A list of allowed IPs if applicable. Newline delimited
     */
    allowedIps?: pulumi.Input<string>;
    /**
     * Signifies that the user has read all the announcements in the UI.
     */
    announcementsRead?: pulumi.Input<boolean>;
    /**
     * Number of API keys associated with this user
     */
    apiKeysCount?: pulumi.Input<number>;
    /**
     * If `true`, the user can user create Bundles (aka Share Links). Use the bundle permission instead.
     */
    attachmentsPermission?: pulumi.Input<boolean>;
    /**
     * Scheduled Date/Time at which user will be deactivated
     */
    authenticateUntil?: pulumi.Input<string>;
    /**
     * How is this user authenticated?
     */
    authenticationMethod?: pulumi.Input<string>;
    /**
     * If true, the avatar will be deleted.
     */
    avatarDelete?: pulumi.Input<boolean>;
    /**
     * URL holding the user's avatar
     */
    avatarUrl?: pulumi.Input<string>;
    /**
     * Allow this user to perform operations on the account, payments, and invoices?
     */
    billingPermission?: pulumi.Input<boolean>;
    /**
     * Exempt this user from being disabled based on inactivity?
     */
    bypassInactiveDisable?: pulumi.Input<boolean>;
    /**
     * Allow this user to skip site-wide IP blacklists?
     */
    bypassSiteAllowedIps?: pulumi.Input<boolean>;
    /**
     * Used for changing a password on an existing user.
     */
    changePassword?: pulumi.Input<string>;
    /**
     * Optional, but if provided, we will ensure that it matches the value sent in `change_password`.
     */
    changePasswordConfirmation?: pulumi.Input<string>;
    /**
     * User's company
     */
    company?: pulumi.Input<string>;
    /**
     * When this user was created
     */
    createdAt?: pulumi.Input<string>;
    /**
     * Can the user connect with WebDAV?
     */
    davPermission?: pulumi.Input<boolean>;
    /**
     * Number of days remaining until password expires
     */
    daysRemainingUntilPasswordExpire?: pulumi.Input<number>;
    /**
     * Is user disabled? Disabled users cannot log in, and do not count for billing purposes. Users can be automatically
     * disabled after an inactivity period via a Site setting or schedule to be deactivated after specific date.
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * Computed property that returns true if user disabled or expired or inactive.
     */
    disabledExpiredOrInactive?: pulumi.Input<boolean>;
    /**
     * User email address
     */
    email?: pulumi.Input<string>;
    /**
     * Is this user managed by a SsoStrategy?
     */
    externallyManaged?: pulumi.Input<boolean>;
    /**
     * User's first login time
     */
    firstLoginAt?: pulumi.Input<string>;
    /**
     * Can the user access with FTP/FTPS?
     */
    ftpPermission?: pulumi.Input<boolean>;
    /**
     * Permission to grant on the user root. Can be blank or `full`, `read`, `write`, `list`, `read+write`, or `list+write`
     */
    grantPermission?: pulumi.Input<string>;
    /**
     * Group ID to associate this user with.
     */
    groupId?: pulumi.Input<number>;
    /**
     * Comma-separated list of group IDs of which this user is a member
     */
    groupIds?: pulumi.Input<string>;
    /**
     * Text to display to the user in the header of the UI
     */
    headerText?: pulumi.Input<string>;
    /**
     * Pre-calculated hash of the user's password. If supplied, this will be used to authenticate the user on first login.
     * Supported hash methods are MD5, SHA1, and SHA256.
     */
    importedPasswordHash?: pulumi.Input<string>;
    /**
     * Preferred language
     */
    language?: pulumi.Input<string>;
    /**
     * User's most recent activity time, which is the latest of most recent login, most recent API use, enablement, or creation
     */
    lastActiveAt?: pulumi.Input<string>;
    /**
     * User's most recent API use time
     */
    lastApiUseAt?: pulumi.Input<string>;
    /**
     * User's most recent login time via WebDAV
     */
    lastDavLoginAt?: pulumi.Input<string>;
    /**
     * User's most recent login time via Desktop app
     */
    lastDesktopLoginAt?: pulumi.Input<string>;
    /**
     * User's most recent login time via FTP
     */
    lastFtpLoginAt?: pulumi.Input<string>;
    /**
     * User's most recent login time via any protocol
     */
    lastLoginAt?: pulumi.Input<string>;
    /**
     * The most recent protocol and cipher used
     */
    lastProtocolCipher?: pulumi.Input<string>;
    /**
     * User's most recent login time via Rest API
     */
    lastRestapiLoginAt?: pulumi.Input<string>;
    /**
     * User's most recent login time via SFTP
     */
    lastSftpLoginAt?: pulumi.Input<string>;
    /**
     * User's most recent login time via web
     */
    lastWebLoginAt?: pulumi.Input<string>;
    /**
     * Time in the future that the user will no longer be locked out if applicable
     */
    lockoutExpires?: pulumi.Input<string>;
    /**
     * User's full name
     */
    name?: pulumi.Input<string>;
    /**
     * Any internal notes on the user
     */
    notes?: pulumi.Input<string>;
    /**
     * Hour of the day at which daily notifications should be sent. Can be in range 0 to 23
     */
    notificationDailySendTime?: pulumi.Input<number>;
    /**
     * Enable integration with Office for the web?
     */
    officeIntegrationEnabled?: pulumi.Input<boolean>;
    /**
     * User password.
     */
    password?: pulumi.Input<string>;
    /**
     * Optional, but if provided, we will ensure that it matches the value sent in `password`.
     */
    passwordConfirmation?: pulumi.Input<string>;
    /**
     * Password expiration datetime
     */
    passwordExpireAt?: pulumi.Input<string>;
    /**
     * Is user's password expired?
     */
    passwordExpired?: pulumi.Input<boolean>;
    /**
     * Last time the user's password was set
     */
    passwordSetAt?: pulumi.Input<string>;
    /**
     * Number of days to allow user to use the same password
     */
    passwordValidityDays?: pulumi.Input<number>;
    /**
     * Number of public keys associated with this user
     */
    publicKeysCount?: pulumi.Input<number>;
    /**
     * Is the user an allowed to view all (non-billing) site configuration for this site?
     */
    readonlySiteAdmin?: pulumi.Input<boolean>;
    /**
     * Should the user receive admin alerts such a certificate expiration notifications and overages?
     */
    receiveAdminAlerts?: pulumi.Input<boolean>;
    /**
     * 2FA required setting
     */
    require2fa?: pulumi.Input<string>;
    /**
     * Require user to login by specified date otherwise it will be disabled.
     */
    requireLoginBy?: pulumi.Input<string>;
    /**
     * Is a password change required upon next user login?
     */
    requirePasswordChange?: pulumi.Input<boolean>;
    /**
     * Can this user access the Web app, Desktop app, SDKs, or REST API? (All of these tools use the API internally, so this is
     * one unified permission set.)
     */
    restapiPermission?: pulumi.Input<boolean>;
    /**
     * Does this user manage it's own credentials or is it a shared/bot user?
     */
    selfManaged?: pulumi.Input<boolean>;
    /**
     * Can the user access with SFTP?
     */
    sftpPermission?: pulumi.Input<boolean>;
    /**
     * Is the user an administrator for this site?
     */
    siteAdmin?: pulumi.Input<boolean>;
    /**
     * Skip Welcome page in the UI?
     */
    skipWelcomeScreen?: pulumi.Input<boolean>;
    /**
     * SSL required setting
     */
    sslRequired?: pulumi.Input<string>;
    /**
     * SSO (Single Sign On) strategy ID for the user, if applicable.
     */
    ssoStrategyId?: pulumi.Input<number>;
    /**
     * Is the user subscribed to the newsletter?
     */
    subscribeToNewsletter?: pulumi.Input<boolean>;
    /**
     * User time zone
     */
    timeZone?: pulumi.Input<string>;
    /**
     * Type(s) of 2FA methods in use, for programmatic use. Will be either `sms`, `totp`, `u2f`, `yubi`, or multiple values
     * sorted alphabetically and joined by an underscore. Does not specify whether user has more than one of a given method.
     */
    typeOf2fa?: pulumi.Input<string>;
    /**
     * Type(s) of 2FA methods in use, formatted for displaying in the UI. Unlike `type_of_2fa`, this value will make clear when
     * a user has more than 1 of the same type of method.
     */
    typeOf2faForDisplay?: pulumi.Input<string>;
    /**
     * Root folder for FTP (and optionally SFTP if the appropriate site-wide setting is set.) Note that this is not used for
     * API, Desktop, or Web interface.
     */
    userRoot?: pulumi.Input<string>;
    /**
     * User's username
     */
    username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a User resource.
 */
export interface UserArgs {
    /**
     * A list of allowed IPs if applicable. Newline delimited
     */
    allowedIps?: pulumi.Input<string>;
    /**
     * Signifies that the user has read all the announcements in the UI.
     */
    announcementsRead?: pulumi.Input<boolean>;
    /**
     * If `true`, the user can user create Bundles (aka Share Links). Use the bundle permission instead.
     */
    attachmentsPermission?: pulumi.Input<boolean>;
    /**
     * Scheduled Date/Time at which user will be deactivated
     */
    authenticateUntil?: pulumi.Input<string>;
    /**
     * How is this user authenticated?
     */
    authenticationMethod?: pulumi.Input<string>;
    /**
     * If true, the avatar will be deleted.
     */
    avatarDelete?: pulumi.Input<boolean>;
    /**
     * Allow this user to perform operations on the account, payments, and invoices?
     */
    billingPermission?: pulumi.Input<boolean>;
    /**
     * Exempt this user from being disabled based on inactivity?
     */
    bypassInactiveDisable?: pulumi.Input<boolean>;
    /**
     * Allow this user to skip site-wide IP blacklists?
     */
    bypassSiteAllowedIps?: pulumi.Input<boolean>;
    /**
     * Used for changing a password on an existing user.
     */
    changePassword?: pulumi.Input<string>;
    /**
     * Optional, but if provided, we will ensure that it matches the value sent in `change_password`.
     */
    changePasswordConfirmation?: pulumi.Input<string>;
    /**
     * User's company
     */
    company?: pulumi.Input<string>;
    /**
     * Can the user connect with WebDAV?
     */
    davPermission?: pulumi.Input<boolean>;
    /**
     * Is user disabled? Disabled users cannot log in, and do not count for billing purposes. Users can be automatically
     * disabled after an inactivity period via a Site setting or schedule to be deactivated after specific date.
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * User email address
     */
    email?: pulumi.Input<string>;
    /**
     * Can the user access with FTP/FTPS?
     */
    ftpPermission?: pulumi.Input<boolean>;
    /**
     * Permission to grant on the user root. Can be blank or `full`, `read`, `write`, `list`, `read+write`, or `list+write`
     */
    grantPermission?: pulumi.Input<string>;
    /**
     * Group ID to associate this user with.
     */
    groupId?: pulumi.Input<number>;
    /**
     * Comma-separated list of group IDs of which this user is a member
     */
    groupIds?: pulumi.Input<string>;
    /**
     * Text to display to the user in the header of the UI
     */
    headerText?: pulumi.Input<string>;
    /**
     * Pre-calculated hash of the user's password. If supplied, this will be used to authenticate the user on first login.
     * Supported hash methods are MD5, SHA1, and SHA256.
     */
    importedPasswordHash?: pulumi.Input<string>;
    /**
     * Preferred language
     */
    language?: pulumi.Input<string>;
    /**
     * User's full name
     */
    name?: pulumi.Input<string>;
    /**
     * Any internal notes on the user
     */
    notes?: pulumi.Input<string>;
    /**
     * Hour of the day at which daily notifications should be sent. Can be in range 0 to 23
     */
    notificationDailySendTime?: pulumi.Input<number>;
    /**
     * Enable integration with Office for the web?
     */
    officeIntegrationEnabled?: pulumi.Input<boolean>;
    /**
     * User password.
     */
    password?: pulumi.Input<string>;
    /**
     * Optional, but if provided, we will ensure that it matches the value sent in `password`.
     */
    passwordConfirmation?: pulumi.Input<string>;
    /**
     * Number of days to allow user to use the same password
     */
    passwordValidityDays?: pulumi.Input<number>;
    /**
     * Is the user an allowed to view all (non-billing) site configuration for this site?
     */
    readonlySiteAdmin?: pulumi.Input<boolean>;
    /**
     * Should the user receive admin alerts such a certificate expiration notifications and overages?
     */
    receiveAdminAlerts?: pulumi.Input<boolean>;
    /**
     * 2FA required setting
     */
    require2fa?: pulumi.Input<string>;
    /**
     * Require user to login by specified date otherwise it will be disabled.
     */
    requireLoginBy?: pulumi.Input<string>;
    /**
     * Is a password change required upon next user login?
     */
    requirePasswordChange?: pulumi.Input<boolean>;
    /**
     * Can this user access the Web app, Desktop app, SDKs, or REST API? (All of these tools use the API internally, so this is
     * one unified permission set.)
     */
    restapiPermission?: pulumi.Input<boolean>;
    /**
     * Does this user manage it's own credentials or is it a shared/bot user?
     */
    selfManaged?: pulumi.Input<boolean>;
    /**
     * Can the user access with SFTP?
     */
    sftpPermission?: pulumi.Input<boolean>;
    /**
     * Is the user an administrator for this site?
     */
    siteAdmin?: pulumi.Input<boolean>;
    /**
     * Skip Welcome page in the UI?
     */
    skipWelcomeScreen?: pulumi.Input<boolean>;
    /**
     * SSL required setting
     */
    sslRequired?: pulumi.Input<string>;
    /**
     * SSO (Single Sign On) strategy ID for the user, if applicable.
     */
    ssoStrategyId?: pulumi.Input<number>;
    /**
     * Is the user subscribed to the newsletter?
     */
    subscribeToNewsletter?: pulumi.Input<boolean>;
    /**
     * User time zone
     */
    timeZone?: pulumi.Input<string>;
    /**
     * Root folder for FTP (and optionally SFTP if the appropriate site-wide setting is set.) Note that this is not used for
     * API, Desktop, or Web interface.
     */
    userRoot?: pulumi.Input<string>;
    /**
     * User's username
     */
    username: pulumi.Input<string>;
}
