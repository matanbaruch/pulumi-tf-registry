// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Bundle extends pulumi.CustomResource {
    /**
     * Get an existing Bundle resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BundleState, opts?: pulumi.CustomResourceOptions): Bundle {
        return new Bundle(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'files:index/bundle:Bundle';

    /**
     * Returns true if the given object is an instance of Bundle.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Bundle {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Bundle.__pulumiType;
    }

    /**
     * A list of bundlepaths in this bundle. For performance reasons, this is not provided when listing bundles.
     */
    public /*out*/ readonly bundlepaths!: pulumi.Output<any>;
    /**
     * Legal text that must be agreed to prior to accessing Bundle.
     */
    public /*out*/ readonly clickwrapBody!: pulumi.Output<string>;
    /**
     * ID of the clickwrap to use with this bundle.
     */
    public readonly clickwrapId!: pulumi.Output<number>;
    /**
     * Bundle code. This code forms the end part of the Public URL.
     */
    public readonly code!: pulumi.Output<string>;
    /**
     * Page link and button color
     */
    public /*out*/ readonly colorLeft!: pulumi.Output<string>;
    /**
     * Top bar link color
     */
    public /*out*/ readonly colorLink!: pulumi.Output<string>;
    /**
     * Page link and button color
     */
    public /*out*/ readonly colorText!: pulumi.Output<string>;
    /**
     * Top bar background color
     */
    public /*out*/ readonly colorTop!: pulumi.Output<string>;
    /**
     * Top bar text color
     */
    public /*out*/ readonly colorTopText!: pulumi.Output<string>;
    /**
     * If true, create a snapshot of this bundle's contents.
     */
    public readonly createSnapshot!: pulumi.Output<boolean | undefined>;
    /**
     * Bundle created at date/time
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * Public description
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * Do not create subfolders for files uploaded to this share. Note: there are subtle security pitfalls with allowing
     * anonymous uploads from multiple users to live in the same folder. We strongly discourage use of this option unless
     * absolutely required.
     */
    public readonly dontSeparateSubmissionsByFolder!: pulumi.Output<boolean>;
    /**
     * Bundle expiration date/time
     */
    public readonly expiresAt!: pulumi.Output<string>;
    /**
     * If true, finalize the snapshot of this bundle's contents. Note that `create_snapshot` must also be true.
     */
    public readonly finalizeSnapshot!: pulumi.Output<boolean | undefined>;
    /**
     * Custom Form to use
     */
    public /*out*/ readonly formFieldSet!: pulumi.Output<string>;
    /**
     * Id of Form Field Set to use with this bundle
     */
    public readonly formFieldSetId!: pulumi.Output<number | undefined>;
    /**
     * Does this bundle have an associated inbox?
     */
    public /*out*/ readonly hasInbox!: pulumi.Output<boolean>;
    /**
     * ID of the associated inbox, if available.
     */
    public readonly inboxId!: pulumi.Output<number>;
    /**
     * Maximum number of times bundle can be accessed
     */
    public readonly maxUses!: pulumi.Output<number>;
    /**
     * Bundle internal note
     */
    public readonly note!: pulumi.Output<string>;
    /**
     * Password for this bundle.
     */
    public readonly password!: pulumi.Output<string | undefined>;
    /**
     * Is this bundle password protected?
     */
    public /*out*/ readonly passwordProtected!: pulumi.Output<boolean>;
    /**
     * Template for creating submission subfolders. Can use the uploader's name, email address, ip, company, `strftime`
     * directives, and any custom form data.
     */
    public readonly pathTemplate!: pulumi.Output<string>;
    /**
     * Timezone to use when rendering timestamps in path templates.
     */
    public readonly pathTemplateTimeZone!: pulumi.Output<string>;
    /**
     * A list of paths in this bundle. For performance reasons, this is not provided when listing bundles.
     */
    public readonly paths!: pulumi.Output<string[]>;
    /**
     * Permissions that apply to Folders in this Share Link.
     */
    public readonly permissions!: pulumi.Output<string>;
    public /*out*/ readonly previewOnly!: pulumi.Output<boolean>;
    /**
     * If true, we will hide the 'Remember Me' box on the Bundle registration page, requiring that the user logout and log back
     * in every time they visit the page.
     */
    public /*out*/ readonly requireLogout!: pulumi.Output<boolean>;
    /**
     * Show a registration page that captures the downloader's name and email address?
     */
    public readonly requireRegistration!: pulumi.Output<boolean>;
    /**
     * Only allow access to recipients who have explicitly received the share via an email sent through the Files.com UI?
     */
    public readonly requireShareRecipient!: pulumi.Output<boolean>;
    /**
     * Send delivery receipt to the uploader. Note: For writable share only
     */
    public readonly sendEmailReceiptToUploader!: pulumi.Output<boolean>;
    /**
     * BundleRegistrations can be saved without providing company?
     */
    public readonly skipCompany!: pulumi.Output<boolean>;
    /**
     * BundleRegistrations can be saved without providing email?
     */
    public readonly skipEmail!: pulumi.Output<boolean>;
    /**
     * BundleRegistrations can be saved without providing name?
     */
    public readonly skipName!: pulumi.Output<boolean>;
    /**
     * ID of the snapshot containing this bundle's contents.
     */
    public readonly snapshotId!: pulumi.Output<number>;
    /**
     * Date when share will start to be accessible. If `nil` access granted right after create.
     */
    public readonly startAccessOnDate!: pulumi.Output<string>;
    /**
     * Public URL of Share Link
     */
    public /*out*/ readonly url!: pulumi.Output<string>;
    /**
     * Bundle creator user ID
     */
    public readonly userId!: pulumi.Output<number>;
    /**
     * Bundle creator username
     */
    public /*out*/ readonly username!: pulumi.Output<string>;
    /**
     * Preview watermark image applied to all bundle items.
     */
    public /*out*/ readonly watermarkAttachment!: pulumi.Output<string>;
    /**
     * Preview watermark settings applied to all bundle items. Uses the same keys as Behavior.value
     */
    public /*out*/ readonly watermarkValue!: pulumi.Output<any>;

    /**
     * Create a Bundle resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BundleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BundleArgs | BundleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BundleState | undefined;
            resourceInputs["bundlepaths"] = state ? state.bundlepaths : undefined;
            resourceInputs["clickwrapBody"] = state ? state.clickwrapBody : undefined;
            resourceInputs["clickwrapId"] = state ? state.clickwrapId : undefined;
            resourceInputs["code"] = state ? state.code : undefined;
            resourceInputs["colorLeft"] = state ? state.colorLeft : undefined;
            resourceInputs["colorLink"] = state ? state.colorLink : undefined;
            resourceInputs["colorText"] = state ? state.colorText : undefined;
            resourceInputs["colorTop"] = state ? state.colorTop : undefined;
            resourceInputs["colorTopText"] = state ? state.colorTopText : undefined;
            resourceInputs["createSnapshot"] = state ? state.createSnapshot : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["dontSeparateSubmissionsByFolder"] = state ? state.dontSeparateSubmissionsByFolder : undefined;
            resourceInputs["expiresAt"] = state ? state.expiresAt : undefined;
            resourceInputs["finalizeSnapshot"] = state ? state.finalizeSnapshot : undefined;
            resourceInputs["formFieldSet"] = state ? state.formFieldSet : undefined;
            resourceInputs["formFieldSetId"] = state ? state.formFieldSetId : undefined;
            resourceInputs["hasInbox"] = state ? state.hasInbox : undefined;
            resourceInputs["inboxId"] = state ? state.inboxId : undefined;
            resourceInputs["maxUses"] = state ? state.maxUses : undefined;
            resourceInputs["note"] = state ? state.note : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["passwordProtected"] = state ? state.passwordProtected : undefined;
            resourceInputs["pathTemplate"] = state ? state.pathTemplate : undefined;
            resourceInputs["pathTemplateTimeZone"] = state ? state.pathTemplateTimeZone : undefined;
            resourceInputs["paths"] = state ? state.paths : undefined;
            resourceInputs["permissions"] = state ? state.permissions : undefined;
            resourceInputs["previewOnly"] = state ? state.previewOnly : undefined;
            resourceInputs["requireLogout"] = state ? state.requireLogout : undefined;
            resourceInputs["requireRegistration"] = state ? state.requireRegistration : undefined;
            resourceInputs["requireShareRecipient"] = state ? state.requireShareRecipient : undefined;
            resourceInputs["sendEmailReceiptToUploader"] = state ? state.sendEmailReceiptToUploader : undefined;
            resourceInputs["skipCompany"] = state ? state.skipCompany : undefined;
            resourceInputs["skipEmail"] = state ? state.skipEmail : undefined;
            resourceInputs["skipName"] = state ? state.skipName : undefined;
            resourceInputs["snapshotId"] = state ? state.snapshotId : undefined;
            resourceInputs["startAccessOnDate"] = state ? state.startAccessOnDate : undefined;
            resourceInputs["url"] = state ? state.url : undefined;
            resourceInputs["userId"] = state ? state.userId : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
            resourceInputs["watermarkAttachment"] = state ? state.watermarkAttachment : undefined;
            resourceInputs["watermarkValue"] = state ? state.watermarkValue : undefined;
        } else {
            const args = argsOrState as BundleArgs | undefined;
            if ((!args || args.paths === undefined) && !opts.urn) {
                throw new Error("Missing required property 'paths'");
            }
            resourceInputs["clickwrapId"] = args ? args.clickwrapId : undefined;
            resourceInputs["code"] = args ? args.code : undefined;
            resourceInputs["createSnapshot"] = args ? args.createSnapshot : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["dontSeparateSubmissionsByFolder"] = args ? args.dontSeparateSubmissionsByFolder : undefined;
            resourceInputs["expiresAt"] = args ? args.expiresAt : undefined;
            resourceInputs["finalizeSnapshot"] = args ? args.finalizeSnapshot : undefined;
            resourceInputs["formFieldSetId"] = args ? args.formFieldSetId : undefined;
            resourceInputs["inboxId"] = args ? args.inboxId : undefined;
            resourceInputs["maxUses"] = args ? args.maxUses : undefined;
            resourceInputs["note"] = args ? args.note : undefined;
            resourceInputs["password"] = args ? args.password : undefined;
            resourceInputs["pathTemplate"] = args ? args.pathTemplate : undefined;
            resourceInputs["pathTemplateTimeZone"] = args ? args.pathTemplateTimeZone : undefined;
            resourceInputs["paths"] = args ? args.paths : undefined;
            resourceInputs["permissions"] = args ? args.permissions : undefined;
            resourceInputs["requireRegistration"] = args ? args.requireRegistration : undefined;
            resourceInputs["requireShareRecipient"] = args ? args.requireShareRecipient : undefined;
            resourceInputs["sendEmailReceiptToUploader"] = args ? args.sendEmailReceiptToUploader : undefined;
            resourceInputs["skipCompany"] = args ? args.skipCompany : undefined;
            resourceInputs["skipEmail"] = args ? args.skipEmail : undefined;
            resourceInputs["skipName"] = args ? args.skipName : undefined;
            resourceInputs["snapshotId"] = args ? args.snapshotId : undefined;
            resourceInputs["startAccessOnDate"] = args ? args.startAccessOnDate : undefined;
            resourceInputs["userId"] = args ? args.userId : undefined;
            resourceInputs["bundlepaths"] = undefined /*out*/;
            resourceInputs["clickwrapBody"] = undefined /*out*/;
            resourceInputs["colorLeft"] = undefined /*out*/;
            resourceInputs["colorLink"] = undefined /*out*/;
            resourceInputs["colorText"] = undefined /*out*/;
            resourceInputs["colorTop"] = undefined /*out*/;
            resourceInputs["colorTopText"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["formFieldSet"] = undefined /*out*/;
            resourceInputs["hasInbox"] = undefined /*out*/;
            resourceInputs["passwordProtected"] = undefined /*out*/;
            resourceInputs["previewOnly"] = undefined /*out*/;
            resourceInputs["requireLogout"] = undefined /*out*/;
            resourceInputs["url"] = undefined /*out*/;
            resourceInputs["username"] = undefined /*out*/;
            resourceInputs["watermarkAttachment"] = undefined /*out*/;
            resourceInputs["watermarkValue"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Bundle.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Bundle resources.
 */
export interface BundleState {
    /**
     * A list of bundlepaths in this bundle. For performance reasons, this is not provided when listing bundles.
     */
    bundlepaths?: any;
    /**
     * Legal text that must be agreed to prior to accessing Bundle.
     */
    clickwrapBody?: pulumi.Input<string>;
    /**
     * ID of the clickwrap to use with this bundle.
     */
    clickwrapId?: pulumi.Input<number>;
    /**
     * Bundle code. This code forms the end part of the Public URL.
     */
    code?: pulumi.Input<string>;
    /**
     * Page link and button color
     */
    colorLeft?: pulumi.Input<string>;
    /**
     * Top bar link color
     */
    colorLink?: pulumi.Input<string>;
    /**
     * Page link and button color
     */
    colorText?: pulumi.Input<string>;
    /**
     * Top bar background color
     */
    colorTop?: pulumi.Input<string>;
    /**
     * Top bar text color
     */
    colorTopText?: pulumi.Input<string>;
    /**
     * If true, create a snapshot of this bundle's contents.
     */
    createSnapshot?: pulumi.Input<boolean>;
    /**
     * Bundle created at date/time
     */
    createdAt?: pulumi.Input<string>;
    /**
     * Public description
     */
    description?: pulumi.Input<string>;
    /**
     * Do not create subfolders for files uploaded to this share. Note: there are subtle security pitfalls with allowing
     * anonymous uploads from multiple users to live in the same folder. We strongly discourage use of this option unless
     * absolutely required.
     */
    dontSeparateSubmissionsByFolder?: pulumi.Input<boolean>;
    /**
     * Bundle expiration date/time
     */
    expiresAt?: pulumi.Input<string>;
    /**
     * If true, finalize the snapshot of this bundle's contents. Note that `create_snapshot` must also be true.
     */
    finalizeSnapshot?: pulumi.Input<boolean>;
    /**
     * Custom Form to use
     */
    formFieldSet?: pulumi.Input<string>;
    /**
     * Id of Form Field Set to use with this bundle
     */
    formFieldSetId?: pulumi.Input<number>;
    /**
     * Does this bundle have an associated inbox?
     */
    hasInbox?: pulumi.Input<boolean>;
    /**
     * ID of the associated inbox, if available.
     */
    inboxId?: pulumi.Input<number>;
    /**
     * Maximum number of times bundle can be accessed
     */
    maxUses?: pulumi.Input<number>;
    /**
     * Bundle internal note
     */
    note?: pulumi.Input<string>;
    /**
     * Password for this bundle.
     */
    password?: pulumi.Input<string>;
    /**
     * Is this bundle password protected?
     */
    passwordProtected?: pulumi.Input<boolean>;
    /**
     * Template for creating submission subfolders. Can use the uploader's name, email address, ip, company, `strftime`
     * directives, and any custom form data.
     */
    pathTemplate?: pulumi.Input<string>;
    /**
     * Timezone to use when rendering timestamps in path templates.
     */
    pathTemplateTimeZone?: pulumi.Input<string>;
    /**
     * A list of paths in this bundle. For performance reasons, this is not provided when listing bundles.
     */
    paths?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Permissions that apply to Folders in this Share Link.
     */
    permissions?: pulumi.Input<string>;
    previewOnly?: pulumi.Input<boolean>;
    /**
     * If true, we will hide the 'Remember Me' box on the Bundle registration page, requiring that the user logout and log back
     * in every time they visit the page.
     */
    requireLogout?: pulumi.Input<boolean>;
    /**
     * Show a registration page that captures the downloader's name and email address?
     */
    requireRegistration?: pulumi.Input<boolean>;
    /**
     * Only allow access to recipients who have explicitly received the share via an email sent through the Files.com UI?
     */
    requireShareRecipient?: pulumi.Input<boolean>;
    /**
     * Send delivery receipt to the uploader. Note: For writable share only
     */
    sendEmailReceiptToUploader?: pulumi.Input<boolean>;
    /**
     * BundleRegistrations can be saved without providing company?
     */
    skipCompany?: pulumi.Input<boolean>;
    /**
     * BundleRegistrations can be saved without providing email?
     */
    skipEmail?: pulumi.Input<boolean>;
    /**
     * BundleRegistrations can be saved without providing name?
     */
    skipName?: pulumi.Input<boolean>;
    /**
     * ID of the snapshot containing this bundle's contents.
     */
    snapshotId?: pulumi.Input<number>;
    /**
     * Date when share will start to be accessible. If `nil` access granted right after create.
     */
    startAccessOnDate?: pulumi.Input<string>;
    /**
     * Public URL of Share Link
     */
    url?: pulumi.Input<string>;
    /**
     * Bundle creator user ID
     */
    userId?: pulumi.Input<number>;
    /**
     * Bundle creator username
     */
    username?: pulumi.Input<string>;
    /**
     * Preview watermark image applied to all bundle items.
     */
    watermarkAttachment?: pulumi.Input<string>;
    /**
     * Preview watermark settings applied to all bundle items. Uses the same keys as Behavior.value
     */
    watermarkValue?: any;
}

/**
 * The set of arguments for constructing a Bundle resource.
 */
export interface BundleArgs {
    /**
     * ID of the clickwrap to use with this bundle.
     */
    clickwrapId?: pulumi.Input<number>;
    /**
     * Bundle code. This code forms the end part of the Public URL.
     */
    code?: pulumi.Input<string>;
    /**
     * If true, create a snapshot of this bundle's contents.
     */
    createSnapshot?: pulumi.Input<boolean>;
    /**
     * Public description
     */
    description?: pulumi.Input<string>;
    /**
     * Do not create subfolders for files uploaded to this share. Note: there are subtle security pitfalls with allowing
     * anonymous uploads from multiple users to live in the same folder. We strongly discourage use of this option unless
     * absolutely required.
     */
    dontSeparateSubmissionsByFolder?: pulumi.Input<boolean>;
    /**
     * Bundle expiration date/time
     */
    expiresAt?: pulumi.Input<string>;
    /**
     * If true, finalize the snapshot of this bundle's contents. Note that `create_snapshot` must also be true.
     */
    finalizeSnapshot?: pulumi.Input<boolean>;
    /**
     * Id of Form Field Set to use with this bundle
     */
    formFieldSetId?: pulumi.Input<number>;
    /**
     * ID of the associated inbox, if available.
     */
    inboxId?: pulumi.Input<number>;
    /**
     * Maximum number of times bundle can be accessed
     */
    maxUses?: pulumi.Input<number>;
    /**
     * Bundle internal note
     */
    note?: pulumi.Input<string>;
    /**
     * Password for this bundle.
     */
    password?: pulumi.Input<string>;
    /**
     * Template for creating submission subfolders. Can use the uploader's name, email address, ip, company, `strftime`
     * directives, and any custom form data.
     */
    pathTemplate?: pulumi.Input<string>;
    /**
     * Timezone to use when rendering timestamps in path templates.
     */
    pathTemplateTimeZone?: pulumi.Input<string>;
    /**
     * A list of paths in this bundle. For performance reasons, this is not provided when listing bundles.
     */
    paths: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Permissions that apply to Folders in this Share Link.
     */
    permissions?: pulumi.Input<string>;
    /**
     * Show a registration page that captures the downloader's name and email address?
     */
    requireRegistration?: pulumi.Input<boolean>;
    /**
     * Only allow access to recipients who have explicitly received the share via an email sent through the Files.com UI?
     */
    requireShareRecipient?: pulumi.Input<boolean>;
    /**
     * Send delivery receipt to the uploader. Note: For writable share only
     */
    sendEmailReceiptToUploader?: pulumi.Input<boolean>;
    /**
     * BundleRegistrations can be saved without providing company?
     */
    skipCompany?: pulumi.Input<boolean>;
    /**
     * BundleRegistrations can be saved without providing email?
     */
    skipEmail?: pulumi.Input<boolean>;
    /**
     * BundleRegistrations can be saved without providing name?
     */
    skipName?: pulumi.Input<boolean>;
    /**
     * ID of the snapshot containing this bundle's contents.
     */
    snapshotId?: pulumi.Input<number>;
    /**
     * Date when share will start to be accessible. If `nil` access granted right after create.
     */
    startAccessOnDate?: pulumi.Input<string>;
    /**
     * Bundle creator user ID
     */
    userId?: pulumi.Input<number>;
}
