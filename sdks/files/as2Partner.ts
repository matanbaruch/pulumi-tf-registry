// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class As2Partner extends pulumi.CustomResource {
    /**
     * Get an existing As2Partner resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: As2PartnerState, opts?: pulumi.CustomResourceOptions): As2Partner {
        return new As2Partner(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'files:index/as2Partner:As2Partner';

    /**
     * Returns true if the given object is an instance of As2Partner.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is As2Partner {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === As2Partner.__pulumiType;
    }

    /**
     * ID of the AS2 Station associated with this partner.
     */
    public readonly as2StationId!: pulumi.Output<number>;
    /**
     * If `true`, we will use your site's dedicated IPs for all outbound connections to this AS2 PArtner.
     */
    public readonly enableDedicatedIps!: pulumi.Output<boolean>;
    /**
     * Serial of public certificate used for message security in hex format.
     */
    public /*out*/ readonly hexPublicCertificateSerial!: pulumi.Output<string>;
    /**
     * Password to send to server for HTTP Authentication.
     */
    public readonly httpAuthPassword!: pulumi.Output<string | undefined>;
    /**
     * Username to send to server for HTTP Authentication.
     */
    public readonly httpAuthUsername!: pulumi.Output<string>;
    /**
     * How should Files.com evaluate message transfer success based on a partner's MDN response? This setting does not affect
     * MDN storage; all MDNs received from a partner are always stored. `none`: MDN is stored for informational purposes only,
     * a successful HTTPS transfer is a successful AS2 transfer. `weak`: Inspect the MDN for MIC and Disposition only.
     * `normal`: `weak` plus validate MDN signature matches body, `strict`: `normal` but do not allow signatures from
     * self-signed or incorrectly purposed certificates.
     */
    public readonly mdnValidationLevel!: pulumi.Output<string>;
    /**
     * The partner's formal AS2 name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Public certificate for AS2 Partner. Note: This is the certificate for AS2 message security, not a certificate used for
     * HTTPS authentication.
     */
    public readonly publicCertificate!: pulumi.Output<string>;
    /**
     * Issuer of public certificate used for message security.
     */
    public /*out*/ readonly publicCertificateIssuer!: pulumi.Output<string>;
    /**
     * MD5 hash of public certificate used for message security.
     */
    public /*out*/ readonly publicCertificateMd5!: pulumi.Output<string>;
    /**
     * Not after value of public certificate used for message security.
     */
    public /*out*/ readonly publicCertificateNotAfter!: pulumi.Output<string>;
    /**
     * Not before value of public certificate used for message security.
     */
    public /*out*/ readonly publicCertificateNotBefore!: pulumi.Output<string>;
    /**
     * Serial of public certificate used for message security.
     */
    public /*out*/ readonly publicCertificateSerial!: pulumi.Output<string>;
    /**
     * Subject of public certificate used for message security.
     */
    public /*out*/ readonly publicCertificateSubject!: pulumi.Output<string>;
    /**
     * Should we require that the remote HTTP server have a valid SSL Certificate for HTTPS?
     */
    public readonly serverCertificate!: pulumi.Output<string>;
    /**
     * Public URI where we will send the AS2 messages (via HTTP/HTTPS).
     */
    public readonly uri!: pulumi.Output<string>;

    /**
     * Create a As2Partner resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: As2PartnerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: As2PartnerArgs | As2PartnerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as As2PartnerState | undefined;
            resourceInputs["as2StationId"] = state ? state.as2StationId : undefined;
            resourceInputs["enableDedicatedIps"] = state ? state.enableDedicatedIps : undefined;
            resourceInputs["hexPublicCertificateSerial"] = state ? state.hexPublicCertificateSerial : undefined;
            resourceInputs["httpAuthPassword"] = state ? state.httpAuthPassword : undefined;
            resourceInputs["httpAuthUsername"] = state ? state.httpAuthUsername : undefined;
            resourceInputs["mdnValidationLevel"] = state ? state.mdnValidationLevel : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["publicCertificate"] = state ? state.publicCertificate : undefined;
            resourceInputs["publicCertificateIssuer"] = state ? state.publicCertificateIssuer : undefined;
            resourceInputs["publicCertificateMd5"] = state ? state.publicCertificateMd5 : undefined;
            resourceInputs["publicCertificateNotAfter"] = state ? state.publicCertificateNotAfter : undefined;
            resourceInputs["publicCertificateNotBefore"] = state ? state.publicCertificateNotBefore : undefined;
            resourceInputs["publicCertificateSerial"] = state ? state.publicCertificateSerial : undefined;
            resourceInputs["publicCertificateSubject"] = state ? state.publicCertificateSubject : undefined;
            resourceInputs["serverCertificate"] = state ? state.serverCertificate : undefined;
            resourceInputs["uri"] = state ? state.uri : undefined;
        } else {
            const args = argsOrState as As2PartnerArgs | undefined;
            if ((!args || args.as2StationId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'as2StationId'");
            }
            if ((!args || args.publicCertificate === undefined) && !opts.urn) {
                throw new Error("Missing required property 'publicCertificate'");
            }
            if ((!args || args.uri === undefined) && !opts.urn) {
                throw new Error("Missing required property 'uri'");
            }
            resourceInputs["as2StationId"] = args ? args.as2StationId : undefined;
            resourceInputs["enableDedicatedIps"] = args ? args.enableDedicatedIps : undefined;
            resourceInputs["httpAuthPassword"] = args ? args.httpAuthPassword : undefined;
            resourceInputs["httpAuthUsername"] = args ? args.httpAuthUsername : undefined;
            resourceInputs["mdnValidationLevel"] = args ? args.mdnValidationLevel : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["publicCertificate"] = args ? args.publicCertificate : undefined;
            resourceInputs["serverCertificate"] = args ? args.serverCertificate : undefined;
            resourceInputs["uri"] = args ? args.uri : undefined;
            resourceInputs["hexPublicCertificateSerial"] = undefined /*out*/;
            resourceInputs["publicCertificateIssuer"] = undefined /*out*/;
            resourceInputs["publicCertificateMd5"] = undefined /*out*/;
            resourceInputs["publicCertificateNotAfter"] = undefined /*out*/;
            resourceInputs["publicCertificateNotBefore"] = undefined /*out*/;
            resourceInputs["publicCertificateSerial"] = undefined /*out*/;
            resourceInputs["publicCertificateSubject"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(As2Partner.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering As2Partner resources.
 */
export interface As2PartnerState {
    /**
     * ID of the AS2 Station associated with this partner.
     */
    as2StationId?: pulumi.Input<number>;
    /**
     * If `true`, we will use your site's dedicated IPs for all outbound connections to this AS2 PArtner.
     */
    enableDedicatedIps?: pulumi.Input<boolean>;
    /**
     * Serial of public certificate used for message security in hex format.
     */
    hexPublicCertificateSerial?: pulumi.Input<string>;
    /**
     * Password to send to server for HTTP Authentication.
     */
    httpAuthPassword?: pulumi.Input<string>;
    /**
     * Username to send to server for HTTP Authentication.
     */
    httpAuthUsername?: pulumi.Input<string>;
    /**
     * How should Files.com evaluate message transfer success based on a partner's MDN response? This setting does not affect
     * MDN storage; all MDNs received from a partner are always stored. `none`: MDN is stored for informational purposes only,
     * a successful HTTPS transfer is a successful AS2 transfer. `weak`: Inspect the MDN for MIC and Disposition only.
     * `normal`: `weak` plus validate MDN signature matches body, `strict`: `normal` but do not allow signatures from
     * self-signed or incorrectly purposed certificates.
     */
    mdnValidationLevel?: pulumi.Input<string>;
    /**
     * The partner's formal AS2 name.
     */
    name?: pulumi.Input<string>;
    /**
     * Public certificate for AS2 Partner. Note: This is the certificate for AS2 message security, not a certificate used for
     * HTTPS authentication.
     */
    publicCertificate?: pulumi.Input<string>;
    /**
     * Issuer of public certificate used for message security.
     */
    publicCertificateIssuer?: pulumi.Input<string>;
    /**
     * MD5 hash of public certificate used for message security.
     */
    publicCertificateMd5?: pulumi.Input<string>;
    /**
     * Not after value of public certificate used for message security.
     */
    publicCertificateNotAfter?: pulumi.Input<string>;
    /**
     * Not before value of public certificate used for message security.
     */
    publicCertificateNotBefore?: pulumi.Input<string>;
    /**
     * Serial of public certificate used for message security.
     */
    publicCertificateSerial?: pulumi.Input<string>;
    /**
     * Subject of public certificate used for message security.
     */
    publicCertificateSubject?: pulumi.Input<string>;
    /**
     * Should we require that the remote HTTP server have a valid SSL Certificate for HTTPS?
     */
    serverCertificate?: pulumi.Input<string>;
    /**
     * Public URI where we will send the AS2 messages (via HTTP/HTTPS).
     */
    uri?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a As2Partner resource.
 */
export interface As2PartnerArgs {
    /**
     * ID of the AS2 Station associated with this partner.
     */
    as2StationId: pulumi.Input<number>;
    /**
     * If `true`, we will use your site's dedicated IPs for all outbound connections to this AS2 PArtner.
     */
    enableDedicatedIps?: pulumi.Input<boolean>;
    /**
     * Password to send to server for HTTP Authentication.
     */
    httpAuthPassword?: pulumi.Input<string>;
    /**
     * Username to send to server for HTTP Authentication.
     */
    httpAuthUsername?: pulumi.Input<string>;
    /**
     * How should Files.com evaluate message transfer success based on a partner's MDN response? This setting does not affect
     * MDN storage; all MDNs received from a partner are always stored. `none`: MDN is stored for informational purposes only,
     * a successful HTTPS transfer is a successful AS2 transfer. `weak`: Inspect the MDN for MIC and Disposition only.
     * `normal`: `weak` plus validate MDN signature matches body, `strict`: `normal` but do not allow signatures from
     * self-signed or incorrectly purposed certificates.
     */
    mdnValidationLevel?: pulumi.Input<string>;
    /**
     * The partner's formal AS2 name.
     */
    name?: pulumi.Input<string>;
    /**
     * Public certificate for AS2 Partner. Note: This is the certificate for AS2 message security, not a certificate used for
     * HTTPS authentication.
     */
    publicCertificate: pulumi.Input<string>;
    /**
     * Should we require that the remote HTTP server have a valid SSL Certificate for HTTPS?
     */
    serverCertificate?: pulumi.Input<string>;
    /**
     * Public URI where we will send the AS2 messages (via HTTP/HTTPS).
     */
    uri: pulumi.Input<string>;
}
