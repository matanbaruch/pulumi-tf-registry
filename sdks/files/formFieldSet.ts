// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class FormFieldSet extends pulumi.CustomResource {
    /**
     * Get an existing FormFieldSet resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FormFieldSetState, opts?: pulumi.CustomResourceOptions): FormFieldSet {
        return new FormFieldSet(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'files:index/formFieldSet:FormFieldSet';

    /**
     * Returns true if the given object is an instance of FormFieldSet.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FormFieldSet {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FormFieldSet.__pulumiType;
    }

    /**
     * Associated form fields
     */
    public readonly formFields!: pulumi.Output<any>;
    /**
     * Layout of the form
     */
    public /*out*/ readonly formLayouts!: pulumi.Output<number[]>;
    /**
     * Any associated InboxRegistrations or BundleRegistrations can be saved without providing company
     */
    public readonly skipCompany!: pulumi.Output<boolean>;
    /**
     * Any associated InboxRegistrations or BundleRegistrations can be saved without providing email
     */
    public readonly skipEmail!: pulumi.Output<boolean>;
    /**
     * Any associated InboxRegistrations or BundleRegistrations can be saved without providing name
     */
    public readonly skipName!: pulumi.Output<boolean>;
    /**
     * Title to be displayed
     */
    public readonly title!: pulumi.Output<string>;
    /**
     * User ID. Provide a value of `0` to operate the current session's user.
     */
    public readonly userId!: pulumi.Output<number | undefined>;

    /**
     * Create a FormFieldSet resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: FormFieldSetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FormFieldSetArgs | FormFieldSetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FormFieldSetState | undefined;
            resourceInputs["formFields"] = state ? state.formFields : undefined;
            resourceInputs["formLayouts"] = state ? state.formLayouts : undefined;
            resourceInputs["skipCompany"] = state ? state.skipCompany : undefined;
            resourceInputs["skipEmail"] = state ? state.skipEmail : undefined;
            resourceInputs["skipName"] = state ? state.skipName : undefined;
            resourceInputs["title"] = state ? state.title : undefined;
            resourceInputs["userId"] = state ? state.userId : undefined;
        } else {
            const args = argsOrState as FormFieldSetArgs | undefined;
            resourceInputs["formFields"] = args ? args.formFields : undefined;
            resourceInputs["skipCompany"] = args ? args.skipCompany : undefined;
            resourceInputs["skipEmail"] = args ? args.skipEmail : undefined;
            resourceInputs["skipName"] = args ? args.skipName : undefined;
            resourceInputs["title"] = args ? args.title : undefined;
            resourceInputs["userId"] = args ? args.userId : undefined;
            resourceInputs["formLayouts"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FormFieldSet.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering FormFieldSet resources.
 */
export interface FormFieldSetState {
    /**
     * Associated form fields
     */
    formFields?: any;
    /**
     * Layout of the form
     */
    formLayouts?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Any associated InboxRegistrations or BundleRegistrations can be saved without providing company
     */
    skipCompany?: pulumi.Input<boolean>;
    /**
     * Any associated InboxRegistrations or BundleRegistrations can be saved without providing email
     */
    skipEmail?: pulumi.Input<boolean>;
    /**
     * Any associated InboxRegistrations or BundleRegistrations can be saved without providing name
     */
    skipName?: pulumi.Input<boolean>;
    /**
     * Title to be displayed
     */
    title?: pulumi.Input<string>;
    /**
     * User ID. Provide a value of `0` to operate the current session's user.
     */
    userId?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a FormFieldSet resource.
 */
export interface FormFieldSetArgs {
    /**
     * Associated form fields
     */
    formFields?: any;
    /**
     * Any associated InboxRegistrations or BundleRegistrations can be saved without providing company
     */
    skipCompany?: pulumi.Input<boolean>;
    /**
     * Any associated InboxRegistrations or BundleRegistrations can be saved without providing email
     */
    skipEmail?: pulumi.Input<boolean>;
    /**
     * Any associated InboxRegistrations or BundleRegistrations can be saved without providing name
     */
    skipName?: pulumi.Input<boolean>;
    /**
     * Title to be displayed
     */
    title?: pulumi.Input<string>;
    /**
     * User ID. Provide a value of `0` to operate the current session's user.
     */
    userId?: pulumi.Input<number>;
}
