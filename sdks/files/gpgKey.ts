// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class GpgKey extends pulumi.CustomResource {
    /**
     * Get an existing GpgKey resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GpgKeyState, opts?: pulumi.CustomResourceOptions): GpgKey {
        return new GpgKey(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'files:index/gpgKey:GpgKey';

    /**
     * Returns true if the given object is an instance of GpgKey.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GpgKey {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GpgKey.__pulumiType;
    }

    /**
     * Your GPG key expiration date.
     */
    public /*out*/ readonly expiresAt!: pulumi.Output<string>;
    /**
     * Your GPG key name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Your GPG private key.
     */
    public readonly privateKey!: pulumi.Output<string>;
    public /*out*/ readonly privateKeyHash!: pulumi.Output<string>;
    /**
     * Your GPG private key password. Only required for password protected keys.
     */
    public readonly privateKeyPassword!: pulumi.Output<string>;
    public /*out*/ readonly privateKeyPasswordHash!: pulumi.Output<string>;
    /**
     * Your GPG public key
     */
    public readonly publicKey!: pulumi.Output<string>;
    public /*out*/ readonly publicKeyHash!: pulumi.Output<string>;
    /**
     * GPG owner's user id
     */
    public readonly userId!: pulumi.Output<number>;

    /**
     * Create a GpgKey resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: GpgKeyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GpgKeyArgs | GpgKeyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GpgKeyState | undefined;
            resourceInputs["expiresAt"] = state ? state.expiresAt : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["privateKey"] = state ? state.privateKey : undefined;
            resourceInputs["privateKeyHash"] = state ? state.privateKeyHash : undefined;
            resourceInputs["privateKeyPassword"] = state ? state.privateKeyPassword : undefined;
            resourceInputs["privateKeyPasswordHash"] = state ? state.privateKeyPasswordHash : undefined;
            resourceInputs["publicKey"] = state ? state.publicKey : undefined;
            resourceInputs["publicKeyHash"] = state ? state.publicKeyHash : undefined;
            resourceInputs["userId"] = state ? state.userId : undefined;
        } else {
            const args = argsOrState as GpgKeyArgs | undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["privateKey"] = args ? args.privateKey : undefined;
            resourceInputs["privateKeyPassword"] = args ? args.privateKeyPassword : undefined;
            resourceInputs["publicKey"] = args ? args.publicKey : undefined;
            resourceInputs["userId"] = args ? args.userId : undefined;
            resourceInputs["expiresAt"] = undefined /*out*/;
            resourceInputs["privateKeyHash"] = undefined /*out*/;
            resourceInputs["privateKeyPasswordHash"] = undefined /*out*/;
            resourceInputs["publicKeyHash"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GpgKey.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering GpgKey resources.
 */
export interface GpgKeyState {
    /**
     * Your GPG key expiration date.
     */
    expiresAt?: pulumi.Input<string>;
    /**
     * Your GPG key name.
     */
    name?: pulumi.Input<string>;
    /**
     * Your GPG private key.
     */
    privateKey?: pulumi.Input<string>;
    privateKeyHash?: pulumi.Input<string>;
    /**
     * Your GPG private key password. Only required for password protected keys.
     */
    privateKeyPassword?: pulumi.Input<string>;
    privateKeyPasswordHash?: pulumi.Input<string>;
    /**
     * Your GPG public key
     */
    publicKey?: pulumi.Input<string>;
    publicKeyHash?: pulumi.Input<string>;
    /**
     * GPG owner's user id
     */
    userId?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a GpgKey resource.
 */
export interface GpgKeyArgs {
    /**
     * Your GPG key name.
     */
    name?: pulumi.Input<string>;
    /**
     * Your GPG private key.
     */
    privateKey?: pulumi.Input<string>;
    /**
     * Your GPG private key password. Only required for password protected keys.
     */
    privateKeyPassword?: pulumi.Input<string>;
    /**
     * Your GPG public key
     */
    publicKey?: pulumi.Input<string>;
    /**
     * GPG owner's user id
     */
    userId?: pulumi.Input<number>;
}
