// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getRemoteServer(args: GetRemoteServerArgs, opts?: pulumi.InvokeOptions): Promise<GetRemoteServerResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("files:index/getRemoteServer:getRemoteServer", {
        "id": args.id,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getRemoteServer.
 */
export interface GetRemoteServerArgs {
    id: number;
}

/**
 * A collection of values returned by getRemoteServer.
 */
export interface GetRemoteServerResult {
    readonly authAccountName: string;
    readonly authSetupLink: string;
    readonly authStatus: string;
    readonly authenticationMethod: string;
    readonly awsAccessKey: string;
    readonly azureBlobStorageAccount: string;
    readonly azureBlobStorageContainer: string;
    readonly azureBlobStorageHierarchicalNamespace: boolean;
    readonly azureFilesStorageAccount: string;
    readonly azureFilesStorageShareName: string;
    readonly backblazeB2Bucket: string;
    readonly backblazeB2S3Endpoint: string;
    readonly cloudflareAccessKey: string;
    readonly cloudflareBucket: string;
    readonly cloudflareEndpoint: string;
    readonly disabled: boolean;
    readonly dropboxTeams: boolean;
    readonly enableDedicatedIps: boolean;
    readonly filebaseAccessKey: string;
    readonly filebaseBucket: string;
    readonly filesAgentApiToken: string;
    readonly filesAgentPermissionSet: string;
    readonly filesAgentRoot: string;
    readonly filesAgentVersion: string;
    readonly googleCloudStorageBucket: string;
    readonly googleCloudStorageProjectId: string;
    readonly hostname: string;
    readonly id: number;
    readonly linodeAccessKey: string;
    readonly linodeBucket: string;
    readonly linodeRegion: string;
    readonly maxConnections: number;
    readonly name: string;
    readonly oneDriveAccountType: string;
    readonly pinToSiteRegion: boolean;
    readonly pinnedRegion: string;
    readonly port: number;
    readonly rackspaceContainer: string;
    readonly rackspaceRegion: string;
    readonly rackspaceUsername: string;
    readonly remoteHomePath: string;
    readonly s3Bucket: string;
    readonly s3CompatibleAccessKey: string;
    readonly s3CompatibleBucket: string;
    readonly s3CompatibleEndpoint: string;
    readonly s3CompatibleRegion: string;
    readonly s3Region: string;
    readonly serverCertificate: string;
    readonly serverHostKey: string;
    readonly serverType: string;
    readonly ssl: string;
    readonly supportsVersioning: boolean;
    readonly username: string;
    readonly wasabiAccessKey: string;
    readonly wasabiBucket: string;
    readonly wasabiRegion: string;
}
export function getRemoteServerOutput(args: GetRemoteServerOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetRemoteServerResult> {
    return pulumi.output(args).apply((a: any) => getRemoteServer(a, opts))
}

/**
 * A collection of arguments for invoking getRemoteServer.
 */
export interface GetRemoteServerOutputArgs {
    id: pulumi.Input<number>;
}
