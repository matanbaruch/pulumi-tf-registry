// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Automation extends pulumi.CustomResource {
    /**
     * Get an existing Automation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AutomationState, opts?: pulumi.CustomResourceOptions): Automation {
        return new Automation(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'files:index/automation:Automation';

    /**
     * Returns true if the given object is an instance of Automation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Automation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Automation.__pulumiType;
    }

    /**
     * Ordinarily, files with identical size in the source and destination will be skipped from copy operations to prevent
     * wasted transfer. If this flag is `true` we will overwrite the destination file always. Note that this may cause large
     * amounts of wasted transfer usage.
     */
    public readonly alwaysOverwriteSizeMatchingFiles!: pulumi.Output<boolean>;
    /**
     * Automation type
     */
    public readonly automation!: pulumi.Output<string>;
    /**
     * Indicates if the automation has been deleted.
     */
    public /*out*/ readonly deleted!: pulumi.Output<boolean>;
    /**
     * Description for the this Automation.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * If set, this string in the destination path will be replaced with the value in `destination_replace_to`.
     */
    public readonly destinationReplaceFrom!: pulumi.Output<string>;
    /**
     * If set, this string will replace the value `destination_replace_from` in the destination filename. You can use special
     * patterns here.
     */
    public readonly destinationReplaceTo!: pulumi.Output<string>;
    /**
     * Destination Paths
     */
    public readonly destinations!: pulumi.Output<string[]>;
    /**
     * If true, this automation will not run.
     */
    public readonly disabled!: pulumi.Output<boolean>;
    /**
     * Normally copy and move automations that use globs will implicitly preserve the source folder structure in the
     * destination. If this flag is `true`, the source folder structure will be flattened in the destination. This is useful
     * for copying or moving files from multiple folders into a single destination folder.
     */
    public readonly flattenDestinationStructure!: pulumi.Output<boolean>;
    /**
     * IDs of Groups for the Automation (i.e. who to Request File from)
     */
    public readonly groupIds!: pulumi.Output<number[]>;
    /**
     * If trigger is `custom_schedule`, Human readable Custom schedule description for when the automation should be run.
     */
    public /*out*/ readonly humanReadableSchedule!: pulumi.Output<string>;
    /**
     * If true, the Lock Folders behavior will be disregarded for automated actions.
     */
    public readonly ignoreLockedFolders!: pulumi.Output<boolean>;
    /**
     * If trigger is `daily`, this specifies how often to run this automation. One of: `day`, `week`, `week_end`, `month`,
     * `month_end`, `quarter`, `quarter_end`, `year`, `year_end`
     */
    public readonly interval!: pulumi.Output<string>;
    /**
     * Time when automation was last modified. Does not change for name or description updates.
     */
    public /*out*/ readonly lastModifiedAt!: pulumi.Output<string>;
    /**
     * If `true`, use the legacy behavior for this automation, where it can operate on folders in addition to just files. This
     * behavior no longer works and should not be used.
     */
    public readonly legacyFolderMatching!: pulumi.Output<boolean>;
    /**
     * Name for this automation.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * If true, existing files will be overwritten with new files on Move/Copy automations. Note: by default files will not be
     * overwritten if they appear to be the same file size as the newly incoming file. Use the
     * `:always_overwrite_size_matching_files` option to override this.
     */
    public readonly overwriteFiles!: pulumi.Output<boolean>;
    /**
     * Path on which this Automation runs. Supports globs, except on remote mounts. This must be slash-delimited, but it must
     * neither start nor end with a slash. Maximum of 5000 characters.
     */
    public readonly path!: pulumi.Output<string>;
    /**
     * Timezone to use when rendering timestamps in paths.
     */
    public readonly pathTimeZone!: pulumi.Output<string>;
    /**
     * If trigger type is `daily`, this specifies a day number to run in one of the supported intervals: `week`, `month`,
     * `quarter`, `year`.
     */
    public readonly recurringDay!: pulumi.Output<number>;
    /**
     * If trigger is `custom_schedule`, Custom schedule description for when the automation should be run in json format.
     */
    public /*out*/ readonly schedule!: pulumi.Output<any>;
    /**
     * If trigger is `custom_schedule`, Custom schedule description for when the automation should be run. 0-based days of the
     * week. 0 is Sunday, 1 is Monday, etc.
     */
    public readonly scheduleDaysOfWeeks!: pulumi.Output<number[]>;
    /**
     * If trigger is `custom_schedule`, Custom schedule Time Zone for when the automation should be run.
     */
    public readonly scheduleTimeZone!: pulumi.Output<string>;
    /**
     * If trigger is `custom_schedule`, Custom schedule description for when the automation should be run. Times of day in
     * HH:MM format.
     */
    public readonly scheduleTimesOfDays!: pulumi.Output<string[]>;
    /**
     * Source Path
     */
    public readonly source!: pulumi.Output<string>;
    /**
     * IDs of remote sync folder behaviors to run by this Automation
     */
    public readonly syncIds!: pulumi.Output<number[]>;
    /**
     * How this automation is triggered to run.
     */
    public readonly trigger!: pulumi.Output<string>;
    /**
     * If trigger is `action`, this is the list of action types on which to trigger the automation. Valid actions are create,
     * read, update, destroy, move, copy
     */
    public readonly triggerActions!: pulumi.Output<string[]>;
    /**
     * User ID of the Automation's creator.
     */
    public /*out*/ readonly userId!: pulumi.Output<number>;
    /**
     * IDs of Users for the Automation (i.e. who to Request File from)
     */
    public readonly userIds!: pulumi.Output<number[]>;
    /**
     * A Hash of attributes specific to the automation type.
     */
    public readonly value!: pulumi.Output<any>;
    /**
     * If trigger is `webhook`, this is the URL of the webhook to trigger the Automation.
     */
    public /*out*/ readonly webhookUrl!: pulumi.Output<string>;

    /**
     * Create a Automation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AutomationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AutomationArgs | AutomationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AutomationState | undefined;
            resourceInputs["alwaysOverwriteSizeMatchingFiles"] = state ? state.alwaysOverwriteSizeMatchingFiles : undefined;
            resourceInputs["automation"] = state ? state.automation : undefined;
            resourceInputs["deleted"] = state ? state.deleted : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["destinationReplaceFrom"] = state ? state.destinationReplaceFrom : undefined;
            resourceInputs["destinationReplaceTo"] = state ? state.destinationReplaceTo : undefined;
            resourceInputs["destinations"] = state ? state.destinations : undefined;
            resourceInputs["disabled"] = state ? state.disabled : undefined;
            resourceInputs["flattenDestinationStructure"] = state ? state.flattenDestinationStructure : undefined;
            resourceInputs["groupIds"] = state ? state.groupIds : undefined;
            resourceInputs["humanReadableSchedule"] = state ? state.humanReadableSchedule : undefined;
            resourceInputs["ignoreLockedFolders"] = state ? state.ignoreLockedFolders : undefined;
            resourceInputs["interval"] = state ? state.interval : undefined;
            resourceInputs["lastModifiedAt"] = state ? state.lastModifiedAt : undefined;
            resourceInputs["legacyFolderMatching"] = state ? state.legacyFolderMatching : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["overwriteFiles"] = state ? state.overwriteFiles : undefined;
            resourceInputs["path"] = state ? state.path : undefined;
            resourceInputs["pathTimeZone"] = state ? state.pathTimeZone : undefined;
            resourceInputs["recurringDay"] = state ? state.recurringDay : undefined;
            resourceInputs["schedule"] = state ? state.schedule : undefined;
            resourceInputs["scheduleDaysOfWeeks"] = state ? state.scheduleDaysOfWeeks : undefined;
            resourceInputs["scheduleTimeZone"] = state ? state.scheduleTimeZone : undefined;
            resourceInputs["scheduleTimesOfDays"] = state ? state.scheduleTimesOfDays : undefined;
            resourceInputs["source"] = state ? state.source : undefined;
            resourceInputs["syncIds"] = state ? state.syncIds : undefined;
            resourceInputs["trigger"] = state ? state.trigger : undefined;
            resourceInputs["triggerActions"] = state ? state.triggerActions : undefined;
            resourceInputs["userId"] = state ? state.userId : undefined;
            resourceInputs["userIds"] = state ? state.userIds : undefined;
            resourceInputs["value"] = state ? state.value : undefined;
            resourceInputs["webhookUrl"] = state ? state.webhookUrl : undefined;
        } else {
            const args = argsOrState as AutomationArgs | undefined;
            if ((!args || args.automation === undefined) && !opts.urn) {
                throw new Error("Missing required property 'automation'");
            }
            resourceInputs["alwaysOverwriteSizeMatchingFiles"] = args ? args.alwaysOverwriteSizeMatchingFiles : undefined;
            resourceInputs["automation"] = args ? args.automation : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["destinationReplaceFrom"] = args ? args.destinationReplaceFrom : undefined;
            resourceInputs["destinationReplaceTo"] = args ? args.destinationReplaceTo : undefined;
            resourceInputs["destinations"] = args ? args.destinations : undefined;
            resourceInputs["disabled"] = args ? args.disabled : undefined;
            resourceInputs["flattenDestinationStructure"] = args ? args.flattenDestinationStructure : undefined;
            resourceInputs["groupIds"] = args ? args.groupIds : undefined;
            resourceInputs["ignoreLockedFolders"] = args ? args.ignoreLockedFolders : undefined;
            resourceInputs["interval"] = args ? args.interval : undefined;
            resourceInputs["legacyFolderMatching"] = args ? args.legacyFolderMatching : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["overwriteFiles"] = args ? args.overwriteFiles : undefined;
            resourceInputs["path"] = args ? args.path : undefined;
            resourceInputs["pathTimeZone"] = args ? args.pathTimeZone : undefined;
            resourceInputs["recurringDay"] = args ? args.recurringDay : undefined;
            resourceInputs["scheduleDaysOfWeeks"] = args ? args.scheduleDaysOfWeeks : undefined;
            resourceInputs["scheduleTimeZone"] = args ? args.scheduleTimeZone : undefined;
            resourceInputs["scheduleTimesOfDays"] = args ? args.scheduleTimesOfDays : undefined;
            resourceInputs["source"] = args ? args.source : undefined;
            resourceInputs["syncIds"] = args ? args.syncIds : undefined;
            resourceInputs["trigger"] = args ? args.trigger : undefined;
            resourceInputs["triggerActions"] = args ? args.triggerActions : undefined;
            resourceInputs["userIds"] = args ? args.userIds : undefined;
            resourceInputs["value"] = args ? args.value : undefined;
            resourceInputs["deleted"] = undefined /*out*/;
            resourceInputs["humanReadableSchedule"] = undefined /*out*/;
            resourceInputs["lastModifiedAt"] = undefined /*out*/;
            resourceInputs["schedule"] = undefined /*out*/;
            resourceInputs["userId"] = undefined /*out*/;
            resourceInputs["webhookUrl"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Automation.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Automation resources.
 */
export interface AutomationState {
    /**
     * Ordinarily, files with identical size in the source and destination will be skipped from copy operations to prevent
     * wasted transfer. If this flag is `true` we will overwrite the destination file always. Note that this may cause large
     * amounts of wasted transfer usage.
     */
    alwaysOverwriteSizeMatchingFiles?: pulumi.Input<boolean>;
    /**
     * Automation type
     */
    automation?: pulumi.Input<string>;
    /**
     * Indicates if the automation has been deleted.
     */
    deleted?: pulumi.Input<boolean>;
    /**
     * Description for the this Automation.
     */
    description?: pulumi.Input<string>;
    /**
     * If set, this string in the destination path will be replaced with the value in `destination_replace_to`.
     */
    destinationReplaceFrom?: pulumi.Input<string>;
    /**
     * If set, this string will replace the value `destination_replace_from` in the destination filename. You can use special
     * patterns here.
     */
    destinationReplaceTo?: pulumi.Input<string>;
    /**
     * Destination Paths
     */
    destinations?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * If true, this automation will not run.
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * Normally copy and move automations that use globs will implicitly preserve the source folder structure in the
     * destination. If this flag is `true`, the source folder structure will be flattened in the destination. This is useful
     * for copying or moving files from multiple folders into a single destination folder.
     */
    flattenDestinationStructure?: pulumi.Input<boolean>;
    /**
     * IDs of Groups for the Automation (i.e. who to Request File from)
     */
    groupIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * If trigger is `custom_schedule`, Human readable Custom schedule description for when the automation should be run.
     */
    humanReadableSchedule?: pulumi.Input<string>;
    /**
     * If true, the Lock Folders behavior will be disregarded for automated actions.
     */
    ignoreLockedFolders?: pulumi.Input<boolean>;
    /**
     * If trigger is `daily`, this specifies how often to run this automation. One of: `day`, `week`, `week_end`, `month`,
     * `month_end`, `quarter`, `quarter_end`, `year`, `year_end`
     */
    interval?: pulumi.Input<string>;
    /**
     * Time when automation was last modified. Does not change for name or description updates.
     */
    lastModifiedAt?: pulumi.Input<string>;
    /**
     * If `true`, use the legacy behavior for this automation, where it can operate on folders in addition to just files. This
     * behavior no longer works and should not be used.
     */
    legacyFolderMatching?: pulumi.Input<boolean>;
    /**
     * Name for this automation.
     */
    name?: pulumi.Input<string>;
    /**
     * If true, existing files will be overwritten with new files on Move/Copy automations. Note: by default files will not be
     * overwritten if they appear to be the same file size as the newly incoming file. Use the
     * `:always_overwrite_size_matching_files` option to override this.
     */
    overwriteFiles?: pulumi.Input<boolean>;
    /**
     * Path on which this Automation runs. Supports globs, except on remote mounts. This must be slash-delimited, but it must
     * neither start nor end with a slash. Maximum of 5000 characters.
     */
    path?: pulumi.Input<string>;
    /**
     * Timezone to use when rendering timestamps in paths.
     */
    pathTimeZone?: pulumi.Input<string>;
    /**
     * If trigger type is `daily`, this specifies a day number to run in one of the supported intervals: `week`, `month`,
     * `quarter`, `year`.
     */
    recurringDay?: pulumi.Input<number>;
    /**
     * If trigger is `custom_schedule`, Custom schedule description for when the automation should be run in json format.
     */
    schedule?: any;
    /**
     * If trigger is `custom_schedule`, Custom schedule description for when the automation should be run. 0-based days of the
     * week. 0 is Sunday, 1 is Monday, etc.
     */
    scheduleDaysOfWeeks?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * If trigger is `custom_schedule`, Custom schedule Time Zone for when the automation should be run.
     */
    scheduleTimeZone?: pulumi.Input<string>;
    /**
     * If trigger is `custom_schedule`, Custom schedule description for when the automation should be run. Times of day in
     * HH:MM format.
     */
    scheduleTimesOfDays?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Source Path
     */
    source?: pulumi.Input<string>;
    /**
     * IDs of remote sync folder behaviors to run by this Automation
     */
    syncIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * How this automation is triggered to run.
     */
    trigger?: pulumi.Input<string>;
    /**
     * If trigger is `action`, this is the list of action types on which to trigger the automation. Valid actions are create,
     * read, update, destroy, move, copy
     */
    triggerActions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * User ID of the Automation's creator.
     */
    userId?: pulumi.Input<number>;
    /**
     * IDs of Users for the Automation (i.e. who to Request File from)
     */
    userIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * A Hash of attributes specific to the automation type.
     */
    value?: any;
    /**
     * If trigger is `webhook`, this is the URL of the webhook to trigger the Automation.
     */
    webhookUrl?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Automation resource.
 */
export interface AutomationArgs {
    /**
     * Ordinarily, files with identical size in the source and destination will be skipped from copy operations to prevent
     * wasted transfer. If this flag is `true` we will overwrite the destination file always. Note that this may cause large
     * amounts of wasted transfer usage.
     */
    alwaysOverwriteSizeMatchingFiles?: pulumi.Input<boolean>;
    /**
     * Automation type
     */
    automation: pulumi.Input<string>;
    /**
     * Description for the this Automation.
     */
    description?: pulumi.Input<string>;
    /**
     * If set, this string in the destination path will be replaced with the value in `destination_replace_to`.
     */
    destinationReplaceFrom?: pulumi.Input<string>;
    /**
     * If set, this string will replace the value `destination_replace_from` in the destination filename. You can use special
     * patterns here.
     */
    destinationReplaceTo?: pulumi.Input<string>;
    /**
     * Destination Paths
     */
    destinations?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * If true, this automation will not run.
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * Normally copy and move automations that use globs will implicitly preserve the source folder structure in the
     * destination. If this flag is `true`, the source folder structure will be flattened in the destination. This is useful
     * for copying or moving files from multiple folders into a single destination folder.
     */
    flattenDestinationStructure?: pulumi.Input<boolean>;
    /**
     * IDs of Groups for the Automation (i.e. who to Request File from)
     */
    groupIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * If true, the Lock Folders behavior will be disregarded for automated actions.
     */
    ignoreLockedFolders?: pulumi.Input<boolean>;
    /**
     * If trigger is `daily`, this specifies how often to run this automation. One of: `day`, `week`, `week_end`, `month`,
     * `month_end`, `quarter`, `quarter_end`, `year`, `year_end`
     */
    interval?: pulumi.Input<string>;
    /**
     * If `true`, use the legacy behavior for this automation, where it can operate on folders in addition to just files. This
     * behavior no longer works and should not be used.
     */
    legacyFolderMatching?: pulumi.Input<boolean>;
    /**
     * Name for this automation.
     */
    name?: pulumi.Input<string>;
    /**
     * If true, existing files will be overwritten with new files on Move/Copy automations. Note: by default files will not be
     * overwritten if they appear to be the same file size as the newly incoming file. Use the
     * `:always_overwrite_size_matching_files` option to override this.
     */
    overwriteFiles?: pulumi.Input<boolean>;
    /**
     * Path on which this Automation runs. Supports globs, except on remote mounts. This must be slash-delimited, but it must
     * neither start nor end with a slash. Maximum of 5000 characters.
     */
    path?: pulumi.Input<string>;
    /**
     * Timezone to use when rendering timestamps in paths.
     */
    pathTimeZone?: pulumi.Input<string>;
    /**
     * If trigger type is `daily`, this specifies a day number to run in one of the supported intervals: `week`, `month`,
     * `quarter`, `year`.
     */
    recurringDay?: pulumi.Input<number>;
    /**
     * If trigger is `custom_schedule`, Custom schedule description for when the automation should be run. 0-based days of the
     * week. 0 is Sunday, 1 is Monday, etc.
     */
    scheduleDaysOfWeeks?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * If trigger is `custom_schedule`, Custom schedule Time Zone for when the automation should be run.
     */
    scheduleTimeZone?: pulumi.Input<string>;
    /**
     * If trigger is `custom_schedule`, Custom schedule description for when the automation should be run. Times of day in
     * HH:MM format.
     */
    scheduleTimesOfDays?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Source Path
     */
    source?: pulumi.Input<string>;
    /**
     * IDs of remote sync folder behaviors to run by this Automation
     */
    syncIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * How this automation is triggered to run.
     */
    trigger?: pulumi.Input<string>;
    /**
     * If trigger is `action`, this is the list of action types on which to trigger the automation. Valid actions are create,
     * read, update, destroy, move, copy
     */
    triggerActions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * IDs of Users for the Automation (i.e. who to Request File from)
     */
    userIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * A Hash of attributes specific to the automation type.
     */
    value?: any;
}
