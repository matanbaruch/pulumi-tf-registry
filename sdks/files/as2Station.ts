// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class As2Station extends pulumi.CustomResource {
    /**
     * Get an existing As2Station resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: As2StationState, opts?: pulumi.CustomResourceOptions): As2Station {
        return new As2Station(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'files:index/as2Station:As2Station';

    /**
     * Returns true if the given object is an instance of As2Station.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is As2Station {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === As2Station.__pulumiType;
    }

    /**
     * The station's AS2 domain name.
     */
    public /*out*/ readonly domain!: pulumi.Output<string>;
    /**
     * Serial of public certificate used for message security in hex format.
     */
    public /*out*/ readonly hexPublicCertificateSerial!: pulumi.Output<string>;
    /**
     * The station's formal AS2 name.
     */
    public readonly name!: pulumi.Output<string>;
    public readonly privateKey!: pulumi.Output<string>;
    /**
     * MD5 hash of private key used for message security.
     */
    public /*out*/ readonly privateKeyMd5!: pulumi.Output<string>;
    public readonly privateKeyPassword!: pulumi.Output<string | undefined>;
    /**
     * MD5 hash of private key password used for message security.
     */
    public /*out*/ readonly privateKeyPasswordMd5!: pulumi.Output<string>;
    public readonly publicCertificate!: pulumi.Output<string>;
    /**
     * Issuer of public certificate used for message security.
     */
    public /*out*/ readonly publicCertificateIssuer!: pulumi.Output<string>;
    /**
     * MD5 hash of public certificate used for message security.
     */
    public /*out*/ readonly publicCertificateMd5!: pulumi.Output<string>;
    /**
     * Not after value of public certificate used for message security.
     */
    public /*out*/ readonly publicCertificateNotAfter!: pulumi.Output<string>;
    /**
     * Not before value of public certificate used for message security.
     */
    public /*out*/ readonly publicCertificateNotBefore!: pulumi.Output<string>;
    /**
     * Serial of public certificate used for message security.
     */
    public /*out*/ readonly publicCertificateSerial!: pulumi.Output<string>;
    /**
     * Subject of public certificate used for message security.
     */
    public /*out*/ readonly publicCertificateSubject!: pulumi.Output<string>;
    /**
     * Public URI for sending AS2 message to.
     */
    public /*out*/ readonly uri!: pulumi.Output<string>;

    /**
     * Create a As2Station resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: As2StationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: As2StationArgs | As2StationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as As2StationState | undefined;
            resourceInputs["domain"] = state ? state.domain : undefined;
            resourceInputs["hexPublicCertificateSerial"] = state ? state.hexPublicCertificateSerial : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["privateKey"] = state ? state.privateKey : undefined;
            resourceInputs["privateKeyMd5"] = state ? state.privateKeyMd5 : undefined;
            resourceInputs["privateKeyPassword"] = state ? state.privateKeyPassword : undefined;
            resourceInputs["privateKeyPasswordMd5"] = state ? state.privateKeyPasswordMd5 : undefined;
            resourceInputs["publicCertificate"] = state ? state.publicCertificate : undefined;
            resourceInputs["publicCertificateIssuer"] = state ? state.publicCertificateIssuer : undefined;
            resourceInputs["publicCertificateMd5"] = state ? state.publicCertificateMd5 : undefined;
            resourceInputs["publicCertificateNotAfter"] = state ? state.publicCertificateNotAfter : undefined;
            resourceInputs["publicCertificateNotBefore"] = state ? state.publicCertificateNotBefore : undefined;
            resourceInputs["publicCertificateSerial"] = state ? state.publicCertificateSerial : undefined;
            resourceInputs["publicCertificateSubject"] = state ? state.publicCertificateSubject : undefined;
            resourceInputs["uri"] = state ? state.uri : undefined;
        } else {
            const args = argsOrState as As2StationArgs | undefined;
            if ((!args || args.privateKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'privateKey'");
            }
            if ((!args || args.publicCertificate === undefined) && !opts.urn) {
                throw new Error("Missing required property 'publicCertificate'");
            }
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["privateKey"] = args ? args.privateKey : undefined;
            resourceInputs["privateKeyPassword"] = args ? args.privateKeyPassword : undefined;
            resourceInputs["publicCertificate"] = args ? args.publicCertificate : undefined;
            resourceInputs["domain"] = undefined /*out*/;
            resourceInputs["hexPublicCertificateSerial"] = undefined /*out*/;
            resourceInputs["privateKeyMd5"] = undefined /*out*/;
            resourceInputs["privateKeyPasswordMd5"] = undefined /*out*/;
            resourceInputs["publicCertificateIssuer"] = undefined /*out*/;
            resourceInputs["publicCertificateMd5"] = undefined /*out*/;
            resourceInputs["publicCertificateNotAfter"] = undefined /*out*/;
            resourceInputs["publicCertificateNotBefore"] = undefined /*out*/;
            resourceInputs["publicCertificateSerial"] = undefined /*out*/;
            resourceInputs["publicCertificateSubject"] = undefined /*out*/;
            resourceInputs["uri"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(As2Station.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering As2Station resources.
 */
export interface As2StationState {
    /**
     * The station's AS2 domain name.
     */
    domain?: pulumi.Input<string>;
    /**
     * Serial of public certificate used for message security in hex format.
     */
    hexPublicCertificateSerial?: pulumi.Input<string>;
    /**
     * The station's formal AS2 name.
     */
    name?: pulumi.Input<string>;
    privateKey?: pulumi.Input<string>;
    /**
     * MD5 hash of private key used for message security.
     */
    privateKeyMd5?: pulumi.Input<string>;
    privateKeyPassword?: pulumi.Input<string>;
    /**
     * MD5 hash of private key password used for message security.
     */
    privateKeyPasswordMd5?: pulumi.Input<string>;
    publicCertificate?: pulumi.Input<string>;
    /**
     * Issuer of public certificate used for message security.
     */
    publicCertificateIssuer?: pulumi.Input<string>;
    /**
     * MD5 hash of public certificate used for message security.
     */
    publicCertificateMd5?: pulumi.Input<string>;
    /**
     * Not after value of public certificate used for message security.
     */
    publicCertificateNotAfter?: pulumi.Input<string>;
    /**
     * Not before value of public certificate used for message security.
     */
    publicCertificateNotBefore?: pulumi.Input<string>;
    /**
     * Serial of public certificate used for message security.
     */
    publicCertificateSerial?: pulumi.Input<string>;
    /**
     * Subject of public certificate used for message security.
     */
    publicCertificateSubject?: pulumi.Input<string>;
    /**
     * Public URI for sending AS2 message to.
     */
    uri?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a As2Station resource.
 */
export interface As2StationArgs {
    /**
     * The station's formal AS2 name.
     */
    name?: pulumi.Input<string>;
    privateKey: pulumi.Input<string>;
    privateKeyPassword?: pulumi.Input<string>;
    publicCertificate: pulumi.Input<string>;
}
