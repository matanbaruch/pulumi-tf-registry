// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Permission extends pulumi.CustomResource {
    /**
     * Get an existing Permission resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PermissionState, opts?: pulumi.CustomResourceOptions): Permission {
        return new Permission(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'files:index/permission:Permission';

    /**
     * Returns true if the given object is an instance of Permission.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Permission {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Permission.__pulumiType;
    }

    /**
     * Group ID
     */
    public readonly groupId!: pulumi.Output<number>;
    /**
     * Group name if applicable
     */
    public /*out*/ readonly groupName!: pulumi.Output<string>;
    /**
     * Folder path. This must be slash-delimited, but it must neither start nor end with a slash. Maximum of 5000 characters.
     */
    public readonly path!: pulumi.Output<string>;
    /**
     * Permission type
     */
    public readonly permission!: pulumi.Output<string>;
    /**
     * Does this permission apply to subfolders?
     */
    public readonly recursive!: pulumi.Output<boolean>;
    /**
     * User ID
     */
    public readonly userId!: pulumi.Output<number>;
    /**
     * User's username
     */
    public readonly username!: pulumi.Output<string>;

    /**
     * Create a Permission resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: PermissionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PermissionArgs | PermissionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PermissionState | undefined;
            resourceInputs["groupId"] = state ? state.groupId : undefined;
            resourceInputs["groupName"] = state ? state.groupName : undefined;
            resourceInputs["path"] = state ? state.path : undefined;
            resourceInputs["permission"] = state ? state.permission : undefined;
            resourceInputs["recursive"] = state ? state.recursive : undefined;
            resourceInputs["userId"] = state ? state.userId : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
        } else {
            const args = argsOrState as PermissionArgs | undefined;
            resourceInputs["groupId"] = args ? args.groupId : undefined;
            resourceInputs["path"] = args ? args.path : undefined;
            resourceInputs["permission"] = args ? args.permission : undefined;
            resourceInputs["recursive"] = args ? args.recursive : undefined;
            resourceInputs["userId"] = args ? args.userId : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
            resourceInputs["groupName"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Permission.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Permission resources.
 */
export interface PermissionState {
    /**
     * Group ID
     */
    groupId?: pulumi.Input<number>;
    /**
     * Group name if applicable
     */
    groupName?: pulumi.Input<string>;
    /**
     * Folder path. This must be slash-delimited, but it must neither start nor end with a slash. Maximum of 5000 characters.
     */
    path?: pulumi.Input<string>;
    /**
     * Permission type
     */
    permission?: pulumi.Input<string>;
    /**
     * Does this permission apply to subfolders?
     */
    recursive?: pulumi.Input<boolean>;
    /**
     * User ID
     */
    userId?: pulumi.Input<number>;
    /**
     * User's username
     */
    username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Permission resource.
 */
export interface PermissionArgs {
    /**
     * Group ID
     */
    groupId?: pulumi.Input<number>;
    /**
     * Folder path. This must be slash-delimited, but it must neither start nor end with a slash. Maximum of 5000 characters.
     */
    path?: pulumi.Input<string>;
    /**
     * Permission type
     */
    permission?: pulumi.Input<string>;
    /**
     * Does this permission apply to subfolders?
     */
    recursive?: pulumi.Input<boolean>;
    /**
     * User ID
     */
    userId?: pulumi.Input<number>;
    /**
     * User's username
     */
    username?: pulumi.Input<string>;
}
