// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class PrivilegedAccessGroupAssignmentSchedule extends pulumi.CustomResource {
    /**
     * Get an existing PrivilegedAccessGroupAssignmentSchedule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PrivilegedAccessGroupAssignmentScheduleState, opts?: pulumi.CustomResourceOptions): PrivilegedAccessGroupAssignmentSchedule {
        return new PrivilegedAccessGroupAssignmentSchedule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azuread:index/privilegedAccessGroupAssignmentSchedule:PrivilegedAccessGroupAssignmentSchedule';

    /**
     * Returns true if the given object is an instance of PrivilegedAccessGroupAssignmentSchedule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PrivilegedAccessGroupAssignmentSchedule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PrivilegedAccessGroupAssignmentSchedule.__pulumiType;
    }

    /**
     * The ID of the assignment to the group
     */
    public readonly assignmentType!: pulumi.Output<string>;
    /**
     * The duration of the assignment, formatted as an ISO8601 duration string (e.g. P3D for 3 days)
     */
    public readonly duration!: pulumi.Output<string | undefined>;
    /**
     * The date that this assignment expires, formatted as an RFC3339 date string in UTC (e.g. 2018-01-01T01:02:03Z)
     */
    public readonly expirationDate!: pulumi.Output<string>;
    /**
     * The ID of the Group representing the scope of the assignment
     */
    public readonly groupId!: pulumi.Output<string>;
    /**
     * The justification for the assignment
     */
    public readonly justification!: pulumi.Output<string | undefined>;
    /**
     * Is the assignment permanent
     */
    public readonly permanentAssignment!: pulumi.Output<boolean>;
    /**
     * The ID of the Principal assigned to the schedule
     */
    public readonly principalId!: pulumi.Output<string>;
    /**
     * The date that this assignment starts, formatted as an RFC3339 date string in UTC (e.g. 2018-01-01T01:02:03Z)
     */
    public readonly startDate!: pulumi.Output<string>;
    /**
     * The status of the schedule
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * The ticket number authorising the assignment
     */
    public readonly ticketNumber!: pulumi.Output<string | undefined>;
    /**
     * The ticket system authorising the assignment
     */
    public readonly ticketSystem!: pulumi.Output<string | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.PrivilegedAccessGroupAssignmentScheduleTimeouts | undefined>;

    /**
     * Create a PrivilegedAccessGroupAssignmentSchedule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PrivilegedAccessGroupAssignmentScheduleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PrivilegedAccessGroupAssignmentScheduleArgs | PrivilegedAccessGroupAssignmentScheduleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PrivilegedAccessGroupAssignmentScheduleState | undefined;
            resourceInputs["assignmentType"] = state ? state.assignmentType : undefined;
            resourceInputs["duration"] = state ? state.duration : undefined;
            resourceInputs["expirationDate"] = state ? state.expirationDate : undefined;
            resourceInputs["groupId"] = state ? state.groupId : undefined;
            resourceInputs["justification"] = state ? state.justification : undefined;
            resourceInputs["permanentAssignment"] = state ? state.permanentAssignment : undefined;
            resourceInputs["principalId"] = state ? state.principalId : undefined;
            resourceInputs["startDate"] = state ? state.startDate : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["ticketNumber"] = state ? state.ticketNumber : undefined;
            resourceInputs["ticketSystem"] = state ? state.ticketSystem : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as PrivilegedAccessGroupAssignmentScheduleArgs | undefined;
            if ((!args || args.assignmentType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'assignmentType'");
            }
            if ((!args || args.groupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'groupId'");
            }
            if ((!args || args.principalId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'principalId'");
            }
            resourceInputs["assignmentType"] = args ? args.assignmentType : undefined;
            resourceInputs["duration"] = args ? args.duration : undefined;
            resourceInputs["expirationDate"] = args ? args.expirationDate : undefined;
            resourceInputs["groupId"] = args ? args.groupId : undefined;
            resourceInputs["justification"] = args ? args.justification : undefined;
            resourceInputs["permanentAssignment"] = args ? args.permanentAssignment : undefined;
            resourceInputs["principalId"] = args ? args.principalId : undefined;
            resourceInputs["startDate"] = args ? args.startDate : undefined;
            resourceInputs["ticketNumber"] = args ? args.ticketNumber : undefined;
            resourceInputs["ticketSystem"] = args ? args.ticketSystem : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PrivilegedAccessGroupAssignmentSchedule.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering PrivilegedAccessGroupAssignmentSchedule resources.
 */
export interface PrivilegedAccessGroupAssignmentScheduleState {
    /**
     * The ID of the assignment to the group
     */
    assignmentType?: pulumi.Input<string>;
    /**
     * The duration of the assignment, formatted as an ISO8601 duration string (e.g. P3D for 3 days)
     */
    duration?: pulumi.Input<string>;
    /**
     * The date that this assignment expires, formatted as an RFC3339 date string in UTC (e.g. 2018-01-01T01:02:03Z)
     */
    expirationDate?: pulumi.Input<string>;
    /**
     * The ID of the Group representing the scope of the assignment
     */
    groupId?: pulumi.Input<string>;
    /**
     * The justification for the assignment
     */
    justification?: pulumi.Input<string>;
    /**
     * Is the assignment permanent
     */
    permanentAssignment?: pulumi.Input<boolean>;
    /**
     * The ID of the Principal assigned to the schedule
     */
    principalId?: pulumi.Input<string>;
    /**
     * The date that this assignment starts, formatted as an RFC3339 date string in UTC (e.g. 2018-01-01T01:02:03Z)
     */
    startDate?: pulumi.Input<string>;
    /**
     * The status of the schedule
     */
    status?: pulumi.Input<string>;
    /**
     * The ticket number authorising the assignment
     */
    ticketNumber?: pulumi.Input<string>;
    /**
     * The ticket system authorising the assignment
     */
    ticketSystem?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.PrivilegedAccessGroupAssignmentScheduleTimeouts>;
}

/**
 * The set of arguments for constructing a PrivilegedAccessGroupAssignmentSchedule resource.
 */
export interface PrivilegedAccessGroupAssignmentScheduleArgs {
    /**
     * The ID of the assignment to the group
     */
    assignmentType: pulumi.Input<string>;
    /**
     * The duration of the assignment, formatted as an ISO8601 duration string (e.g. P3D for 3 days)
     */
    duration?: pulumi.Input<string>;
    /**
     * The date that this assignment expires, formatted as an RFC3339 date string in UTC (e.g. 2018-01-01T01:02:03Z)
     */
    expirationDate?: pulumi.Input<string>;
    /**
     * The ID of the Group representing the scope of the assignment
     */
    groupId: pulumi.Input<string>;
    /**
     * The justification for the assignment
     */
    justification?: pulumi.Input<string>;
    /**
     * Is the assignment permanent
     */
    permanentAssignment?: pulumi.Input<boolean>;
    /**
     * The ID of the Principal assigned to the schedule
     */
    principalId: pulumi.Input<string>;
    /**
     * The date that this assignment starts, formatted as an RFC3339 date string in UTC (e.g. 2018-01-01T01:02:03Z)
     */
    startDate?: pulumi.Input<string>;
    /**
     * The ticket number authorising the assignment
     */
    ticketNumber?: pulumi.Input<string>;
    /**
     * The ticket system authorising the assignment
     */
    ticketSystem?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.PrivilegedAccessGroupAssignmentScheduleTimeouts>;
}
