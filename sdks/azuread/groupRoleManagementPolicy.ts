// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class GroupRoleManagementPolicy extends pulumi.CustomResource {
    /**
     * Get an existing GroupRoleManagementPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GroupRoleManagementPolicyState, opts?: pulumi.CustomResourceOptions): GroupRoleManagementPolicy {
        return new GroupRoleManagementPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azuread:index/groupRoleManagementPolicy:GroupRoleManagementPolicy';

    /**
     * Returns true if the given object is an instance of GroupRoleManagementPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GroupRoleManagementPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GroupRoleManagementPolicy.__pulumiType;
    }

    /**
     * The activation rules of the policy
     */
    public readonly activationRules!: pulumi.Output<outputs.GroupRoleManagementPolicyActivationRules | undefined>;
    /**
     * The rules for active assignment of the policy
     */
    public readonly activeAssignmentRules!: pulumi.Output<outputs.GroupRoleManagementPolicyActiveAssignmentRules | undefined>;
    /**
     * Description of the policy
     */
    public /*out*/ readonly description!: pulumi.Output<string>;
    /**
     * The display name of the policy
     */
    public /*out*/ readonly displayName!: pulumi.Output<string>;
    /**
     * The rules for eligible assignment of the policy
     */
    public readonly eligibleAssignmentRules!: pulumi.Output<outputs.GroupRoleManagementPolicyEligibleAssignmentRules | undefined>;
    /**
     * ID of the group to which this policy is assigned
     */
    public readonly groupId!: pulumi.Output<string>;
    /**
     * The notification rules of the policy
     */
    public readonly notificationRules!: pulumi.Output<outputs.GroupRoleManagementPolicyNotificationRules | undefined>;
    /**
     * The ID of the role of this policy to the group
     */
    public readonly roleId!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.GroupRoleManagementPolicyTimeouts | undefined>;

    /**
     * Create a GroupRoleManagementPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GroupRoleManagementPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GroupRoleManagementPolicyArgs | GroupRoleManagementPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GroupRoleManagementPolicyState | undefined;
            resourceInputs["activationRules"] = state ? state.activationRules : undefined;
            resourceInputs["activeAssignmentRules"] = state ? state.activeAssignmentRules : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["eligibleAssignmentRules"] = state ? state.eligibleAssignmentRules : undefined;
            resourceInputs["groupId"] = state ? state.groupId : undefined;
            resourceInputs["notificationRules"] = state ? state.notificationRules : undefined;
            resourceInputs["roleId"] = state ? state.roleId : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as GroupRoleManagementPolicyArgs | undefined;
            if ((!args || args.groupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'groupId'");
            }
            if ((!args || args.roleId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roleId'");
            }
            resourceInputs["activationRules"] = args ? args.activationRules : undefined;
            resourceInputs["activeAssignmentRules"] = args ? args.activeAssignmentRules : undefined;
            resourceInputs["eligibleAssignmentRules"] = args ? args.eligibleAssignmentRules : undefined;
            resourceInputs["groupId"] = args ? args.groupId : undefined;
            resourceInputs["notificationRules"] = args ? args.notificationRules : undefined;
            resourceInputs["roleId"] = args ? args.roleId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["displayName"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GroupRoleManagementPolicy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering GroupRoleManagementPolicy resources.
 */
export interface GroupRoleManagementPolicyState {
    /**
     * The activation rules of the policy
     */
    activationRules?: pulumi.Input<inputs.GroupRoleManagementPolicyActivationRules>;
    /**
     * The rules for active assignment of the policy
     */
    activeAssignmentRules?: pulumi.Input<inputs.GroupRoleManagementPolicyActiveAssignmentRules>;
    /**
     * Description of the policy
     */
    description?: pulumi.Input<string>;
    /**
     * The display name of the policy
     */
    displayName?: pulumi.Input<string>;
    /**
     * The rules for eligible assignment of the policy
     */
    eligibleAssignmentRules?: pulumi.Input<inputs.GroupRoleManagementPolicyEligibleAssignmentRules>;
    /**
     * ID of the group to which this policy is assigned
     */
    groupId?: pulumi.Input<string>;
    /**
     * The notification rules of the policy
     */
    notificationRules?: pulumi.Input<inputs.GroupRoleManagementPolicyNotificationRules>;
    /**
     * The ID of the role of this policy to the group
     */
    roleId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.GroupRoleManagementPolicyTimeouts>;
}

/**
 * The set of arguments for constructing a GroupRoleManagementPolicy resource.
 */
export interface GroupRoleManagementPolicyArgs {
    /**
     * The activation rules of the policy
     */
    activationRules?: pulumi.Input<inputs.GroupRoleManagementPolicyActivationRules>;
    /**
     * The rules for active assignment of the policy
     */
    activeAssignmentRules?: pulumi.Input<inputs.GroupRoleManagementPolicyActiveAssignmentRules>;
    /**
     * The rules for eligible assignment of the policy
     */
    eligibleAssignmentRules?: pulumi.Input<inputs.GroupRoleManagementPolicyEligibleAssignmentRules>;
    /**
     * ID of the group to which this policy is assigned
     */
    groupId: pulumi.Input<string>;
    /**
     * The notification rules of the policy
     */
    notificationRules?: pulumi.Input<inputs.GroupRoleManagementPolicyNotificationRules>;
    /**
     * The ID of the role of this policy to the group
     */
    roleId: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.GroupRoleManagementPolicyTimeouts>;
}
