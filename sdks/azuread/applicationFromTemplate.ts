// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ApplicationFromTemplate extends pulumi.CustomResource {
    /**
     * Get an existing ApplicationFromTemplate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ApplicationFromTemplateState, opts?: pulumi.CustomResourceOptions): ApplicationFromTemplate {
        return new ApplicationFromTemplate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azuread:index/applicationFromTemplate:ApplicationFromTemplate';

    /**
     * Returns true if the given object is an instance of ApplicationFromTemplate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ApplicationFromTemplate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ApplicationFromTemplate.__pulumiType;
    }

    /**
     * The resource ID for this application
     */
    public /*out*/ readonly applicationId!: pulumi.Output<string>;
    /**
     * The object ID for this application
     */
    public /*out*/ readonly applicationObjectId!: pulumi.Output<string>;
    /**
     * The display name for the application
     */
    public readonly displayName!: pulumi.Output<string>;
    /**
     * The resource ID for this service principal
     */
    public /*out*/ readonly servicePrincipalId!: pulumi.Output<string>;
    /**
     * The object ID for this service principal
     */
    public /*out*/ readonly servicePrincipalObjectId!: pulumi.Output<string>;
    /**
     * The UUID of the template to instantiate for this application
     */
    public readonly templateId!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.ApplicationFromTemplateTimeouts | undefined>;

    /**
     * Create a ApplicationFromTemplate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ApplicationFromTemplateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ApplicationFromTemplateArgs | ApplicationFromTemplateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ApplicationFromTemplateState | undefined;
            resourceInputs["applicationId"] = state ? state.applicationId : undefined;
            resourceInputs["applicationObjectId"] = state ? state.applicationObjectId : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["servicePrincipalId"] = state ? state.servicePrincipalId : undefined;
            resourceInputs["servicePrincipalObjectId"] = state ? state.servicePrincipalObjectId : undefined;
            resourceInputs["templateId"] = state ? state.templateId : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as ApplicationFromTemplateArgs | undefined;
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if ((!args || args.templateId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'templateId'");
            }
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["templateId"] = args ? args.templateId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["applicationId"] = undefined /*out*/;
            resourceInputs["applicationObjectId"] = undefined /*out*/;
            resourceInputs["servicePrincipalId"] = undefined /*out*/;
            resourceInputs["servicePrincipalObjectId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ApplicationFromTemplate.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ApplicationFromTemplate resources.
 */
export interface ApplicationFromTemplateState {
    /**
     * The resource ID for this application
     */
    applicationId?: pulumi.Input<string>;
    /**
     * The object ID for this application
     */
    applicationObjectId?: pulumi.Input<string>;
    /**
     * The display name for the application
     */
    displayName?: pulumi.Input<string>;
    /**
     * The resource ID for this service principal
     */
    servicePrincipalId?: pulumi.Input<string>;
    /**
     * The object ID for this service principal
     */
    servicePrincipalObjectId?: pulumi.Input<string>;
    /**
     * The UUID of the template to instantiate for this application
     */
    templateId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ApplicationFromTemplateTimeouts>;
}

/**
 * The set of arguments for constructing a ApplicationFromTemplate resource.
 */
export interface ApplicationFromTemplateArgs {
    /**
     * The display name for the application
     */
    displayName: pulumi.Input<string>;
    /**
     * The UUID of the template to instantiate for this application
     */
    templateId: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ApplicationFromTemplateTimeouts>;
}
