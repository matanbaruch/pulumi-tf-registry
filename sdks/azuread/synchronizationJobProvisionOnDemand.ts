// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SynchronizationJobProvisionOnDemand extends pulumi.CustomResource {
    /**
     * Get an existing SynchronizationJobProvisionOnDemand resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SynchronizationJobProvisionOnDemandState, opts?: pulumi.CustomResourceOptions): SynchronizationJobProvisionOnDemand {
        return new SynchronizationJobProvisionOnDemand(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azuread:index/synchronizationJobProvisionOnDemand:SynchronizationJobProvisionOnDemand';

    /**
     * Returns true if the given object is an instance of SynchronizationJobProvisionOnDemand.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SynchronizationJobProvisionOnDemand {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SynchronizationJobProvisionOnDemand.__pulumiType;
    }

    /**
     * Represents the objects that will be provisioned and the synchronization rules executed. The resource is primarily used
     * for on-demand provisioning.
     */
    public readonly parameters!: pulumi.Output<outputs.SynchronizationJobProvisionOnDemandParameter[]>;
    /**
     * The object ID of the service principal for which this synchronization job should be provisioned
     */
    public readonly servicePrincipalId!: pulumi.Output<string>;
    /**
     * The identifier for the synchronization jop.
     */
    public readonly synchronizationJobId!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.SynchronizationJobProvisionOnDemandTimeouts | undefined>;
    public readonly triggers!: pulumi.Output<{[key: string]: string} | undefined>;

    /**
     * Create a SynchronizationJobProvisionOnDemand resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SynchronizationJobProvisionOnDemandArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SynchronizationJobProvisionOnDemandArgs | SynchronizationJobProvisionOnDemandState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SynchronizationJobProvisionOnDemandState | undefined;
            resourceInputs["parameters"] = state ? state.parameters : undefined;
            resourceInputs["servicePrincipalId"] = state ? state.servicePrincipalId : undefined;
            resourceInputs["synchronizationJobId"] = state ? state.synchronizationJobId : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["triggers"] = state ? state.triggers : undefined;
        } else {
            const args = argsOrState as SynchronizationJobProvisionOnDemandArgs | undefined;
            if ((!args || args.parameters === undefined) && !opts.urn) {
                throw new Error("Missing required property 'parameters'");
            }
            if ((!args || args.servicePrincipalId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'servicePrincipalId'");
            }
            if ((!args || args.synchronizationJobId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'synchronizationJobId'");
            }
            resourceInputs["parameters"] = args ? args.parameters : undefined;
            resourceInputs["servicePrincipalId"] = args ? args.servicePrincipalId : undefined;
            resourceInputs["synchronizationJobId"] = args ? args.synchronizationJobId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["triggers"] = args ? args.triggers : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SynchronizationJobProvisionOnDemand.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SynchronizationJobProvisionOnDemand resources.
 */
export interface SynchronizationJobProvisionOnDemandState {
    /**
     * Represents the objects that will be provisioned and the synchronization rules executed. The resource is primarily used
     * for on-demand provisioning.
     */
    parameters?: pulumi.Input<pulumi.Input<inputs.SynchronizationJobProvisionOnDemandParameter>[]>;
    /**
     * The object ID of the service principal for which this synchronization job should be provisioned
     */
    servicePrincipalId?: pulumi.Input<string>;
    /**
     * The identifier for the synchronization jop.
     */
    synchronizationJobId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.SynchronizationJobProvisionOnDemandTimeouts>;
    triggers?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a SynchronizationJobProvisionOnDemand resource.
 */
export interface SynchronizationJobProvisionOnDemandArgs {
    /**
     * Represents the objects that will be provisioned and the synchronization rules executed. The resource is primarily used
     * for on-demand provisioning.
     */
    parameters: pulumi.Input<pulumi.Input<inputs.SynchronizationJobProvisionOnDemandParameter>[]>;
    /**
     * The object ID of the service principal for which this synchronization job should be provisioned
     */
    servicePrincipalId: pulumi.Input<string>;
    /**
     * The identifier for the synchronization jop.
     */
    synchronizationJobId: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.SynchronizationJobProvisionOnDemandTimeouts>;
    triggers?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
