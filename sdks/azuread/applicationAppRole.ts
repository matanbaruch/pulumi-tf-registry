// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ApplicationAppRole extends pulumi.CustomResource {
    /**
     * Get an existing ApplicationAppRole resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ApplicationAppRoleState, opts?: pulumi.CustomResourceOptions): ApplicationAppRole {
        return new ApplicationAppRole(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azuread:index/applicationAppRole:ApplicationAppRole';

    /**
     * Returns true if the given object is an instance of ApplicationAppRole.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ApplicationAppRole {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ApplicationAppRole.__pulumiType;
    }

    /**
     * Specifies whether this app role definition can be assigned to users and groups by setting to `User`, or to other
     * applications (that are accessing this application in a standalone scenario) by setting to `Application`, or to both
     */
    public readonly allowedMemberTypes!: pulumi.Output<string[]>;
    /**
     * The resource ID of the application to which this app role should be applied
     */
    public readonly applicationId!: pulumi.Output<string>;
    /**
     * Description of the app role that appears when the role is being assigned and, if the role functions as an application
     * permissions, during the consent experiences
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * Display name for the app role that appears during app role assignment and in consent experiences
     */
    public readonly displayName!: pulumi.Output<string>;
    /**
     * The unique identifier of the app role
     */
    public readonly roleId!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.ApplicationAppRoleTimeouts | undefined>;
    /**
     * The value that is used for the `roles` claim in ID tokens and OAuth access tokens that are authenticating an assigned
     * service or user principal
     */
    public readonly value!: pulumi.Output<string | undefined>;

    /**
     * Create a ApplicationAppRole resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ApplicationAppRoleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ApplicationAppRoleArgs | ApplicationAppRoleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ApplicationAppRoleState | undefined;
            resourceInputs["allowedMemberTypes"] = state ? state.allowedMemberTypes : undefined;
            resourceInputs["applicationId"] = state ? state.applicationId : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["roleId"] = state ? state.roleId : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["value"] = state ? state.value : undefined;
        } else {
            const args = argsOrState as ApplicationAppRoleArgs | undefined;
            if ((!args || args.allowedMemberTypes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'allowedMemberTypes'");
            }
            if ((!args || args.applicationId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'applicationId'");
            }
            if ((!args || args.description === undefined) && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if ((!args || args.roleId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roleId'");
            }
            resourceInputs["allowedMemberTypes"] = args ? args.allowedMemberTypes : undefined;
            resourceInputs["applicationId"] = args ? args.applicationId : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["roleId"] = args ? args.roleId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["value"] = args ? args.value : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ApplicationAppRole.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ApplicationAppRole resources.
 */
export interface ApplicationAppRoleState {
    /**
     * Specifies whether this app role definition can be assigned to users and groups by setting to `User`, or to other
     * applications (that are accessing this application in a standalone scenario) by setting to `Application`, or to both
     */
    allowedMemberTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The resource ID of the application to which this app role should be applied
     */
    applicationId?: pulumi.Input<string>;
    /**
     * Description of the app role that appears when the role is being assigned and, if the role functions as an application
     * permissions, during the consent experiences
     */
    description?: pulumi.Input<string>;
    /**
     * Display name for the app role that appears during app role assignment and in consent experiences
     */
    displayName?: pulumi.Input<string>;
    /**
     * The unique identifier of the app role
     */
    roleId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ApplicationAppRoleTimeouts>;
    /**
     * The value that is used for the `roles` claim in ID tokens and OAuth access tokens that are authenticating an assigned
     * service or user principal
     */
    value?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ApplicationAppRole resource.
 */
export interface ApplicationAppRoleArgs {
    /**
     * Specifies whether this app role definition can be assigned to users and groups by setting to `User`, or to other
     * applications (that are accessing this application in a standalone scenario) by setting to `Application`, or to both
     */
    allowedMemberTypes: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The resource ID of the application to which this app role should be applied
     */
    applicationId: pulumi.Input<string>;
    /**
     * Description of the app role that appears when the role is being assigned and, if the role functions as an application
     * permissions, during the consent experiences
     */
    description: pulumi.Input<string>;
    /**
     * Display name for the app role that appears during app role assignment and in consent experiences
     */
    displayName: pulumi.Input<string>;
    /**
     * The unique identifier of the app role
     */
    roleId: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ApplicationAppRoleTimeouts>;
    /**
     * The value that is used for the `roles` claim in ID tokens and OAuth access tokens that are authenticating an assigned
     * service or user principal
     */
    value?: pulumi.Input<string>;
}
