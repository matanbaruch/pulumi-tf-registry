// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DirectoryRoleEligibilityScheduleRequest extends pulumi.CustomResource {
    /**
     * Get an existing DirectoryRoleEligibilityScheduleRequest resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DirectoryRoleEligibilityScheduleRequestState, opts?: pulumi.CustomResourceOptions): DirectoryRoleEligibilityScheduleRequest {
        return new DirectoryRoleEligibilityScheduleRequest(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azuread:index/directoryRoleEligibilityScheduleRequest:DirectoryRoleEligibilityScheduleRequest';

    /**
     * Returns true if the given object is an instance of DirectoryRoleEligibilityScheduleRequest.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DirectoryRoleEligibilityScheduleRequest {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DirectoryRoleEligibilityScheduleRequest.__pulumiType;
    }

    /**
     * Identifier of the directory object representing the scope of the role eligibility schedule request
     */
    public readonly directoryScopeId!: pulumi.Output<string>;
    /**
     * Justification for why the role is assigned
     */
    public readonly justification!: pulumi.Output<string>;
    /**
     * The object ID of the member principal
     */
    public readonly principalId!: pulumi.Output<string>;
    /**
     * The object ID of the directory role for this role eligibility schedule request
     */
    public readonly roleDefinitionId!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.DirectoryRoleEligibilityScheduleRequestTimeouts | undefined>;

    /**
     * Create a DirectoryRoleEligibilityScheduleRequest resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DirectoryRoleEligibilityScheduleRequestArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DirectoryRoleEligibilityScheduleRequestArgs | DirectoryRoleEligibilityScheduleRequestState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DirectoryRoleEligibilityScheduleRequestState | undefined;
            resourceInputs["directoryScopeId"] = state ? state.directoryScopeId : undefined;
            resourceInputs["justification"] = state ? state.justification : undefined;
            resourceInputs["principalId"] = state ? state.principalId : undefined;
            resourceInputs["roleDefinitionId"] = state ? state.roleDefinitionId : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as DirectoryRoleEligibilityScheduleRequestArgs | undefined;
            if ((!args || args.directoryScopeId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'directoryScopeId'");
            }
            if ((!args || args.justification === undefined) && !opts.urn) {
                throw new Error("Missing required property 'justification'");
            }
            if ((!args || args.principalId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'principalId'");
            }
            if ((!args || args.roleDefinitionId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roleDefinitionId'");
            }
            resourceInputs["directoryScopeId"] = args ? args.directoryScopeId : undefined;
            resourceInputs["justification"] = args ? args.justification : undefined;
            resourceInputs["principalId"] = args ? args.principalId : undefined;
            resourceInputs["roleDefinitionId"] = args ? args.roleDefinitionId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DirectoryRoleEligibilityScheduleRequest.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DirectoryRoleEligibilityScheduleRequest resources.
 */
export interface DirectoryRoleEligibilityScheduleRequestState {
    /**
     * Identifier of the directory object representing the scope of the role eligibility schedule request
     */
    directoryScopeId?: pulumi.Input<string>;
    /**
     * Justification for why the role is assigned
     */
    justification?: pulumi.Input<string>;
    /**
     * The object ID of the member principal
     */
    principalId?: pulumi.Input<string>;
    /**
     * The object ID of the directory role for this role eligibility schedule request
     */
    roleDefinitionId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.DirectoryRoleEligibilityScheduleRequestTimeouts>;
}

/**
 * The set of arguments for constructing a DirectoryRoleEligibilityScheduleRequest resource.
 */
export interface DirectoryRoleEligibilityScheduleRequestArgs {
    /**
     * Identifier of the directory object representing the scope of the role eligibility schedule request
     */
    directoryScopeId: pulumi.Input<string>;
    /**
     * Justification for why the role is assigned
     */
    justification: pulumi.Input<string>;
    /**
     * The object ID of the member principal
     */
    principalId: pulumi.Input<string>;
    /**
     * The object ID of the directory role for this role eligibility schedule request
     */
    roleDefinitionId: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.DirectoryRoleEligibilityScheduleRequestTimeouts>;
}
