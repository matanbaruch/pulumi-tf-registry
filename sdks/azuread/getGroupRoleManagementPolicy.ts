// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getGroupRoleManagementPolicy(args: GetGroupRoleManagementPolicyArgs, opts?: pulumi.InvokeOptions): Promise<GetGroupRoleManagementPolicyResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("azuread:index/getGroupRoleManagementPolicy:getGroupRoleManagementPolicy", {
        "groupId": args.groupId,
        "id": args.id,
        "roleId": args.roleId,
        "timeouts": args.timeouts,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getGroupRoleManagementPolicy.
 */
export interface GetGroupRoleManagementPolicyArgs {
    groupId: string;
    id?: string;
    roleId: string;
    timeouts?: inputs.GetGroupRoleManagementPolicyTimeouts;
}

/**
 * A collection of values returned by getGroupRoleManagementPolicy.
 */
export interface GetGroupRoleManagementPolicyResult {
    readonly description: string;
    readonly displayName: string;
    readonly groupId: string;
    readonly id: string;
    readonly roleId: string;
    readonly timeouts?: outputs.GetGroupRoleManagementPolicyTimeouts;
}
export function getGroupRoleManagementPolicyOutput(args: GetGroupRoleManagementPolicyOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetGroupRoleManagementPolicyResult> {
    return pulumi.output(args).apply((a: any) => getGroupRoleManagementPolicy(a, opts))
}

/**
 * A collection of arguments for invoking getGroupRoleManagementPolicy.
 */
export interface GetGroupRoleManagementPolicyOutputArgs {
    groupId: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    roleId: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.GetGroupRoleManagementPolicyTimeoutsArgs>;
}
