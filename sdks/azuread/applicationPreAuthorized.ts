// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ApplicationPreAuthorized extends pulumi.CustomResource {
    /**
     * Get an existing ApplicationPreAuthorized resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ApplicationPreAuthorizedState, opts?: pulumi.CustomResourceOptions): ApplicationPreAuthorized {
        return new ApplicationPreAuthorized(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azuread:index/applicationPreAuthorized:ApplicationPreAuthorized';

    /**
     * Returns true if the given object is an instance of ApplicationPreAuthorized.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ApplicationPreAuthorized {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ApplicationPreAuthorized.__pulumiType;
    }

    /**
     * The resource ID of the application to which this pre-authorized application should be added
     */
    public readonly applicationId!: pulumi.Output<string>;
    /**
     * The object ID of the application to which this pre-authorized application should be added
     *
     * @deprecated Deprecated
     */
    public readonly applicationObjectId!: pulumi.Output<string>;
    /**
     * The application ID of the pre-authorized application
     *
     * @deprecated Deprecated
     */
    public readonly authorizedAppId!: pulumi.Output<string>;
    /**
     * The client ID of the pre-authorized application
     */
    public readonly authorizedClientId!: pulumi.Output<string>;
    /**
     * The IDs of the permission scopes required by the pre-authorized application
     */
    public readonly permissionIds!: pulumi.Output<string[]>;
    public readonly timeouts!: pulumi.Output<outputs.ApplicationPreAuthorizedTimeouts | undefined>;

    /**
     * Create a ApplicationPreAuthorized resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ApplicationPreAuthorizedArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ApplicationPreAuthorizedArgs | ApplicationPreAuthorizedState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ApplicationPreAuthorizedState | undefined;
            resourceInputs["applicationId"] = state ? state.applicationId : undefined;
            resourceInputs["applicationObjectId"] = state ? state.applicationObjectId : undefined;
            resourceInputs["authorizedAppId"] = state ? state.authorizedAppId : undefined;
            resourceInputs["authorizedClientId"] = state ? state.authorizedClientId : undefined;
            resourceInputs["permissionIds"] = state ? state.permissionIds : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as ApplicationPreAuthorizedArgs | undefined;
            if ((!args || args.permissionIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'permissionIds'");
            }
            resourceInputs["applicationId"] = args ? args.applicationId : undefined;
            resourceInputs["applicationObjectId"] = args ? args.applicationObjectId : undefined;
            resourceInputs["authorizedAppId"] = args ? args.authorizedAppId : undefined;
            resourceInputs["authorizedClientId"] = args ? args.authorizedClientId : undefined;
            resourceInputs["permissionIds"] = args ? args.permissionIds : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ApplicationPreAuthorized.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ApplicationPreAuthorized resources.
 */
export interface ApplicationPreAuthorizedState {
    /**
     * The resource ID of the application to which this pre-authorized application should be added
     */
    applicationId?: pulumi.Input<string>;
    /**
     * The object ID of the application to which this pre-authorized application should be added
     *
     * @deprecated Deprecated
     */
    applicationObjectId?: pulumi.Input<string>;
    /**
     * The application ID of the pre-authorized application
     *
     * @deprecated Deprecated
     */
    authorizedAppId?: pulumi.Input<string>;
    /**
     * The client ID of the pre-authorized application
     */
    authorizedClientId?: pulumi.Input<string>;
    /**
     * The IDs of the permission scopes required by the pre-authorized application
     */
    permissionIds?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.ApplicationPreAuthorizedTimeouts>;
}

/**
 * The set of arguments for constructing a ApplicationPreAuthorized resource.
 */
export interface ApplicationPreAuthorizedArgs {
    /**
     * The resource ID of the application to which this pre-authorized application should be added
     */
    applicationId?: pulumi.Input<string>;
    /**
     * The object ID of the application to which this pre-authorized application should be added
     *
     * @deprecated Deprecated
     */
    applicationObjectId?: pulumi.Input<string>;
    /**
     * The application ID of the pre-authorized application
     *
     * @deprecated Deprecated
     */
    authorizedAppId?: pulumi.Input<string>;
    /**
     * The client ID of the pre-authorized application
     */
    authorizedClientId?: pulumi.Input<string>;
    /**
     * The IDs of the permission scopes required by the pre-authorized application
     */
    permissionIds: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.ApplicationPreAuthorizedTimeouts>;
}
