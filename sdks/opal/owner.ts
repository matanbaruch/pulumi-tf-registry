// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Owner extends pulumi.CustomResource {
    /**
     * Get an existing Owner resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OwnerState, opts?: pulumi.CustomResourceOptions): Owner {
        return new Owner(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'opal:index/owner:Owner';

    /**
     * Returns true if the given object is an instance of Owner.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Owner {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Owner.__pulumiType;
    }

    /**
     * The amount of time (in minutes) before the next reviewer is notified. Use 0 to remove escalation policy.
     */
    public readonly accessRequestEscalationPeriod!: pulumi.Output<number>;
    /**
     * A description of the owner.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * The name of the owner.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The message channel id for the reviewer channel.
     */
    public readonly reviewerMessageChannelId!: pulumi.Output<string>;
    /**
     * Sync this owner's user list with a source group.
     */
    public readonly sourceGroupId!: pulumi.Output<string>;
    /**
     * Users to add to the created owner. If setting a source_group_id this list must be empty.
     */
    public readonly userIds!: pulumi.Output<string[]>;

    /**
     * Create a Owner resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OwnerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OwnerArgs | OwnerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OwnerState | undefined;
            resourceInputs["accessRequestEscalationPeriod"] = state ? state.accessRequestEscalationPeriod : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["reviewerMessageChannelId"] = state ? state.reviewerMessageChannelId : undefined;
            resourceInputs["sourceGroupId"] = state ? state.sourceGroupId : undefined;
            resourceInputs["userIds"] = state ? state.userIds : undefined;
        } else {
            const args = argsOrState as OwnerArgs | undefined;
            if ((!args || args.userIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userIds'");
            }
            resourceInputs["accessRequestEscalationPeriod"] = args ? args.accessRequestEscalationPeriod : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["reviewerMessageChannelId"] = args ? args.reviewerMessageChannelId : undefined;
            resourceInputs["sourceGroupId"] = args ? args.sourceGroupId : undefined;
            resourceInputs["userIds"] = args ? args.userIds : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Owner.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Owner resources.
 */
export interface OwnerState {
    /**
     * The amount of time (in minutes) before the next reviewer is notified. Use 0 to remove escalation policy.
     */
    accessRequestEscalationPeriod?: pulumi.Input<number>;
    /**
     * A description of the owner.
     */
    description?: pulumi.Input<string>;
    /**
     * The name of the owner.
     */
    name?: pulumi.Input<string>;
    /**
     * The message channel id for the reviewer channel.
     */
    reviewerMessageChannelId?: pulumi.Input<string>;
    /**
     * Sync this owner's user list with a source group.
     */
    sourceGroupId?: pulumi.Input<string>;
    /**
     * Users to add to the created owner. If setting a source_group_id this list must be empty.
     */
    userIds?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a Owner resource.
 */
export interface OwnerArgs {
    /**
     * The amount of time (in minutes) before the next reviewer is notified. Use 0 to remove escalation policy.
     */
    accessRequestEscalationPeriod?: pulumi.Input<number>;
    /**
     * A description of the owner.
     */
    description?: pulumi.Input<string>;
    /**
     * The name of the owner.
     */
    name?: pulumi.Input<string>;
    /**
     * The message channel id for the reviewer channel.
     */
    reviewerMessageChannelId?: pulumi.Input<string>;
    /**
     * Sync this owner's user list with a source group.
     */
    sourceGroupId?: pulumi.Input<string>;
    /**
     * Users to add to the created owner. If setting a source_group_id this list must be empty.
     */
    userIds: pulumi.Input<pulumi.Input<string>[]>;
}
