// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface ConfigurationTemplateRequestConfiguration {
    /**
     * A bool representing whether or not to allow requests for this resource.
     */
    allowRequests: boolean;
    /**
     * A bool representing whether or not to automatically approve requests for this resource.
     */
    autoApproval: boolean;
    condition?: outputs.ConfigurationTemplateRequestConfigurationCondition;
    /**
     * The maximum duration for which the resource can be requested (in minutes).
     */
    maxDuration?: number;
    /**
     * The priority of the request configuration.
     */
    priority: number;
    /**
     * The recommended duration for which the resource should be requested (in minutes). -1 represents an indefinite duration.
     */
    recommendedDuration?: number;
    /**
     * The ID of the associated request template.
     */
    requestTemplateId?: string;
    /**
     * A bool representing whether or not to require MFA for requesting access to this resource.
     */
    requireMfaToRequest: boolean;
    /**
     * A bool representing whether or not access requests to the resource require an access ticket.
     */
    requireSupportTicket: boolean;
    /**
     * The list of reviewer stages for the request configuration.
     */
    reviewerStages?: outputs.ConfigurationTemplateRequestConfigurationReviewerStage[];
}

export interface ConfigurationTemplateRequestConfigurationCondition {
    /**
     * The list of group IDs to match.
     */
    groupIds?: string[];
    /**
     * The list of role remote IDs to match.
     */
    roleRemoteIds?: string[];
}

export interface ConfigurationTemplateRequestConfigurationReviewerStage {
    /**
     * The operator of the reviewer stage. Admin and manager approval are also treated as reviewers. must be one of ["AND", "OR"]; Default: "AND"
     */
    operator: string;
    ownerIds: string[];
    /**
     * Whether this reviewer stage should require admin approval.
     */
    requireAdminApproval?: boolean;
    /**
     * Whether this reviewer stage should require manager approval.
     */
    requireManagerApproval: boolean;
}

export interface ConfigurationTemplateTicketPropagation {
    /**
     * Not Null
     */
    enabledOnGrant: boolean;
    /**
     * Not Null
     */
    enabledOnRevocation: boolean;
    ticketProjectId: string;
    /**
     * The third party ticketing platform provider. must be one of ["JIRA", "LINEAR", "SERVICE_NOW"]
     */
    ticketProvider: string;
}

export interface ConfigurationTemplateVisibility {
    /**
     * The visibility level of the entity. must be one of ["GLOBAL", "LIMITED"]
     */
    visibility: string;
    visibilityGroupIds: string[];
}

export interface GetAppsApp {
    /**
     * The ID of the owner of the app.
     */
    adminOwnerId: string;
    /**
     * A description of the app.
     */
    description: string;
    /**
     * The ID of the app.
     */
    id: string;
    /**
     * The name of the app.
     */
    name: string;
    /**
     * The type of an app.
     */
    type: string;
}

export interface GetConfigurationTemplateListResult {
    /**
     * The ID of the owner of the configuration template.
     */
    adminOwnerId: string;
    /**
     * The IDs of the break glass users linked to the configuration template.
     */
    breakGlassUserIds: string[];
    /**
     * The ID of the configuration template.
     */
    configurationTemplateId: string;
    /**
     * The IDs of the audit message channels linked to the configuration template.
     */
    linkedAuditMessageChannelIds: string[];
    /**
     * The IDs of the on-call schedules linked to the configuration template.
     */
    memberOncallScheduleIds: string[];
    /**
     * The name of the configuration template.
     */
    name: string;
    /**
     * The ID of the request configuration linked to the configuration template.
     */
    requestConfigurationId: string;
    /**
     * A bool representing whether or not to require MFA for reviewers to approve requests for this configuration template.
     */
    requireMfaToApprove: boolean;
    /**
     * A bool representing whether or not to require MFA to connect to resources associated with this configuration template.
     */
    requireMfaToConnect: boolean;
    /**
     * Configuration for ticket propagation, when enabled, a ticket will be created for access changes related to the users in this resource.
     */
    ticketPropagation: outputs.GetConfigurationTemplateListResultTicketPropagation;
    /**
     * Visibility infomation of an entity.
     */
    visibility: outputs.GetConfigurationTemplateListResultVisibility;
}

export interface GetConfigurationTemplateListResultTicketPropagation {
    enabledOnGrant: boolean;
    enabledOnRevocation: boolean;
    ticketProjectId: string;
    /**
     * The third party ticketing platform provider. must be one of ["JIRA", "LINEAR", "SERVICE_NOW"]
     */
    ticketProvider: string;
}

export interface GetConfigurationTemplateListResultVisibility {
    /**
     * The visibility level of the entity. must be one of ["GLOBAL", "LIMITED"]
     */
    visibility: string;
    visibilityGroupIds: string[];
}

export interface GetEventsResult {
    /**
     * The email of the actor user.
     */
    actorEmail: string;
    /**
     * The IP address of the event actor.
     */
    actorIpAddress: string;
    /**
     * The name of the actor user. Parsed as JSON.
     */
    actorName: string;
    /**
     * The ID of the actor user.
     */
    actorUserId: string;
    /**
     * The name of the API token used to create the event.
     */
    apiTokenName: string;
    /**
     * The preview of the API token used to create the event.
     */
    apiTokenPreview: string;
    /**
     * The day and time the event was created.
     */
    createdAt: string;
    /**
     * The ID of the event.
     */
    eventId: string;
    /**
     * The event type.
     */
    eventType: string;
    subEvents: outputs.GetEventsResultSubEvent[];
}

export interface GetEventsResultSubEvent {
    /**
     * Parsed as JSON.
     */
    additionalProperties: string;
    /**
     * The subevent type.
     */
    subEventType: string;
}

export interface GetGroupListResult {
    /**
     * The ID of the owner of the group.
     */
    adminOwnerId: string;
    /**
     * The ID of the group's app.
     */
    appId: string;
    /**
     * A description of the group.
     */
    description: string;
    /**
     * The ID of the associated group binding.
     */
    groupBindingId: string;
    /**
     * A list of User IDs for the group leaders of the group
     */
    groupLeaderUserIds: string[];
    /**
     * The type of the group. must be one of ["ACTIVE_DIRECTORY_GROUP", "AWS_SSO_GROUP", "DUO_GROUP", "GIT_HUB_TEAM", "GIT_LAB_GROUP", "GOOGLE_GROUPS_GROUP", "LDAP_GROUP", "OKTA_GROUP", "OPAL_GROUP", "AZURE_AD_SECURITY_GROUP", "AZURE_AD_MICROSOFT_365_GROUP"]
     */
    groupType: string;
    /**
     * The ID of the group.
     */
    id: string;
    /**
     * The name of the group.
     */
    name: string;
    /**
     * Information that defines the remote group. This replaces the deprecated remote_id and metadata fields.
     */
    remoteInfo: outputs.GetGroupListResultRemoteInfo;
    /**
     * The name of the remote.
     */
    remoteName: string;
    /**
     * A list of request configurations for this group.
     */
    requestConfigurations: outputs.GetGroupListResultRequestConfiguration[];
    /**
     * A bool representing whether or not to require MFA for reviewers to approve requests for this group.
     */
    requireMfaToApprove: boolean;
}

export interface GetGroupListResultRemoteInfo {
    /**
     * Remote info for Active Directory group.
     */
    activeDirectoryGroup: outputs.GetGroupListResultRemoteInfoActiveDirectoryGroup;
    /**
     * Remote info for Microsoft Entra ID Microsoft 365 group.
     */
    azureAdMicrosoft365Group: outputs.GetGroupListResultRemoteInfoAzureAdMicrosoft365Group;
    /**
     * Remote info for Microsoft Entra ID Security group.
     */
    azureAdSecurityGroup: outputs.GetGroupListResultRemoteInfoAzureAdSecurityGroup;
    /**
     * Remote info for Duo Security group.
     */
    duoGroup: outputs.GetGroupListResultRemoteInfoDuoGroup;
    /**
     * Remote info for GitHub team.
     */
    githubTeam: outputs.GetGroupListResultRemoteInfoGithubTeam;
    /**
     * Remote info for Gitlab group.
     */
    gitlabGroup: outputs.GetGroupListResultRemoteInfoGitlabGroup;
    /**
     * Remote info for Google group.
     */
    googleGroup: outputs.GetGroupListResultRemoteInfoGoogleGroup;
    /**
     * Remote info for LDAP group.
     */
    ldapGroup: outputs.GetGroupListResultRemoteInfoLdapGroup;
    /**
     * Remote info for Okta Directory group.
     */
    oktaGroup: outputs.GetGroupListResultRemoteInfoOktaGroup;
}

export interface GetGroupListResultRemoteInfoActiveDirectoryGroup {
    /**
     * The id of the Google group.
     */
    groupId: string;
}

export interface GetGroupListResultRemoteInfoAzureAdMicrosoft365Group {
    /**
     * The id of the Microsoft Entra ID Microsoft 365 group.
     */
    groupId: string;
}

export interface GetGroupListResultRemoteInfoAzureAdSecurityGroup {
    /**
     * The id of the Microsoft Entra ID Security group.
     */
    groupId: string;
}

export interface GetGroupListResultRemoteInfoDuoGroup {
    /**
     * The id of the Duo Security group.
     */
    groupId: string;
}

export interface GetGroupListResultRemoteInfoGithubTeam {
    /**
     * The slug of the GitHub team.
     */
    teamSlug: string;
}

export interface GetGroupListResultRemoteInfoGitlabGroup {
    /**
     * The id of the Gitlab group.
     */
    groupId: string;
}

export interface GetGroupListResultRemoteInfoGoogleGroup {
    /**
     * The id of the Google group.
     */
    groupId: string;
}

export interface GetGroupListResultRemoteInfoLdapGroup {
    /**
     * The id of the LDAP group.
     */
    groupId: string;
}

export interface GetGroupListResultRemoteInfoOktaGroup {
    /**
     * The id of the Okta Directory group.
     */
    groupId: string;
}

export interface GetGroupListResultRequestConfiguration {
    /**
     * A bool representing whether or not to allow requests for this resource.
     */
    allowRequests: boolean;
    /**
     * A bool representing whether or not to automatically approve requests for this resource.
     */
    autoApproval: boolean;
    condition: outputs.GetGroupListResultRequestConfigurationCondition;
    /**
     * The maximum duration for which the resource can be requested (in minutes).
     */
    maxDuration: number;
    /**
     * The priority of the request configuration.
     */
    priority: number;
    /**
     * The recommended duration for which the resource should be requested (in minutes). -1 represents an indefinite duration.
     */
    recommendedDuration: number;
    /**
     * The ID of the associated request template.
     */
    requestTemplateId: string;
    /**
     * A bool representing whether or not to require MFA for requesting access to this resource.
     */
    requireMfaToRequest: boolean;
    /**
     * A bool representing whether or not access requests to the resource require an access ticket.
     */
    requireSupportTicket: boolean;
    /**
     * The list of reviewer stages for the request configuration.
     */
    reviewerStages: outputs.GetGroupListResultRequestConfigurationReviewerStage[];
}

export interface GetGroupListResultRequestConfigurationCondition {
    /**
     * The list of group IDs to match.
     */
    groupIds: string[];
    /**
     * The list of role remote IDs to match.
     */
    roleRemoteIds: string[];
}

export interface GetGroupListResultRequestConfigurationReviewerStage {
    /**
     * The operator of the reviewer stage. Admin and manager approval are also treated as reviewers. must be one of ["AND", "OR"]
     */
    operator: string;
    ownerIds: string[];
    /**
     * Whether this reviewer stage should require admin approval.
     */
    requireAdminApproval: boolean;
    /**
     * Whether this reviewer stage should require manager approval.
     */
    requireManagerApproval: boolean;
}

export interface GetGroupMessageChannels {
    channels: outputs.GetGroupMessageChannelsChannel[];
}

export interface GetGroupMessageChannelsChannel {
    /**
     * The ID of the message channel.
     */
    id: string;
    /**
     * A bool representing whether or not the message channel is private.
     */
    isPrivate: boolean;
    /**
     * The name of the message channel.
     */
    name: string;
    /**
     * The remote ID of the message channel
     */
    remoteId: string;
    /**
     * The third party provider of the message channel. must be one of ["SLACK"]
     */
    thirdPartyProvider: string;
}

export interface GetGroupOncallSchedules {
    /**
     * The ID of the on-call schedule.
     */
    id: string;
    /**
     * The name of the on call schedule.
     */
    name: string;
    /**
     * The remote ID of the on call schedule
     */
    remoteId: string;
    /**
     * The third party provider of the on call schedule. must be one of ["OPSGENIE", "PAGER_DUTY"]
     */
    thirdPartyProvider: string;
}

export interface GetGroupRemoteInfo {
    /**
     * Remote info for Active Directory group.
     */
    activeDirectoryGroup: outputs.GetGroupRemoteInfoActiveDirectoryGroup;
    /**
     * Remote info for Microsoft Entra ID Microsoft 365 group.
     */
    azureAdMicrosoft365Group: outputs.GetGroupRemoteInfoAzureAdMicrosoft365Group;
    /**
     * Remote info for Microsoft Entra ID Security group.
     */
    azureAdSecurityGroup: outputs.GetGroupRemoteInfoAzureAdSecurityGroup;
    /**
     * Remote info for Duo Security group.
     */
    duoGroup: outputs.GetGroupRemoteInfoDuoGroup;
    /**
     * Remote info for GitHub team.
     */
    githubTeam: outputs.GetGroupRemoteInfoGithubTeam;
    /**
     * Remote info for Gitlab group.
     */
    gitlabGroup: outputs.GetGroupRemoteInfoGitlabGroup;
    /**
     * Remote info for Google group.
     */
    googleGroup: outputs.GetGroupRemoteInfoGoogleGroup;
    /**
     * Remote info for LDAP group.
     */
    ldapGroup: outputs.GetGroupRemoteInfoLdapGroup;
    /**
     * Remote info for Okta Directory group.
     */
    oktaGroup: outputs.GetGroupRemoteInfoOktaGroup;
}

export interface GetGroupRemoteInfoActiveDirectoryGroup {
    /**
     * The id of the Google group.
     */
    groupId: string;
}

export interface GetGroupRemoteInfoAzureAdMicrosoft365Group {
    /**
     * The id of the Microsoft Entra ID Microsoft 365 group.
     */
    groupId: string;
}

export interface GetGroupRemoteInfoAzureAdSecurityGroup {
    /**
     * The id of the Microsoft Entra ID Security group.
     */
    groupId: string;
}

export interface GetGroupRemoteInfoDuoGroup {
    /**
     * The id of the Duo Security group.
     */
    groupId: string;
}

export interface GetGroupRemoteInfoGithubTeam {
    /**
     * The slug of the GitHub team.
     */
    teamSlug: string;
}

export interface GetGroupRemoteInfoGitlabGroup {
    /**
     * The id of the Gitlab group.
     */
    groupId: string;
}

export interface GetGroupRemoteInfoGoogleGroup {
    /**
     * The id of the Google group.
     */
    groupId: string;
}

export interface GetGroupRemoteInfoLdapGroup {
    /**
     * The id of the LDAP group.
     */
    groupId: string;
}

export interface GetGroupRemoteInfoOktaGroup {
    /**
     * The id of the Okta Directory group.
     */
    groupId: string;
}

export interface GetGroupRequestConfiguration {
    /**
     * A bool representing whether or not to allow requests for this resource.
     */
    allowRequests: boolean;
    /**
     * A bool representing whether or not to automatically approve requests for this resource.
     */
    autoApproval: boolean;
    condition: outputs.GetGroupRequestConfigurationCondition;
    /**
     * The maximum duration for which the resource can be requested (in minutes).
     */
    maxDuration: number;
    /**
     * The priority of the request configuration.
     */
    priority: number;
    /**
     * The recommended duration for which the resource should be requested (in minutes). -1 represents an indefinite duration.
     */
    recommendedDuration: number;
    /**
     * The ID of the associated request template.
     */
    requestTemplateId: string;
    /**
     * A bool representing whether or not to require MFA for requesting access to this resource.
     */
    requireMfaToRequest: boolean;
    /**
     * A bool representing whether or not access requests to the resource require an access ticket.
     */
    requireSupportTicket: boolean;
    /**
     * The list of reviewer stages for the request configuration.
     */
    reviewerStages: outputs.GetGroupRequestConfigurationReviewerStage[];
}

export interface GetGroupRequestConfigurationCondition {
    /**
     * The list of group IDs to match.
     */
    groupIds: string[];
    /**
     * The list of role remote IDs to match.
     */
    roleRemoteIds: string[];
}

export interface GetGroupRequestConfigurationReviewerStage {
    /**
     * The operator of the reviewer stage. Admin and manager approval are also treated as reviewers. must be one of ["AND", "OR"]
     */
    operator: string;
    ownerIds: string[];
    /**
     * Whether this reviewer stage should require admin approval.
     */
    requireAdminApproval: boolean;
    /**
     * Whether this reviewer stage should require manager approval.
     */
    requireManagerApproval: boolean;
}

export interface GetGroupResourceListGroupResource {
    /**
     * # Access Level Object
     * ### Description
     * The `ResourceAccessLevel` object is used to represent the level of access that a user has to a resource or a resource has to a group. The "default" access
     * level is a `ResourceAccessLevel` object whose fields are all empty strings.
     *
     * ### Usage Example
     * View the `ResourceAccessLevel` of a resource/user or resource/group pair to see the level of access granted to the resource.
     */
    accessLevel: outputs.GetGroupResourceListGroupResourceAccessLevel;
    /**
     * The ID of the group.
     */
    groupId: string;
    /**
     * The ID of the resource.
     */
    resourceId: string;
}

export interface GetGroupResourceListGroupResourceAccessLevel {
    /**
     * The human-readable name of the access level.
     */
    accessLevelName: string;
    /**
     * The machine-readable identifier of the access level.
     */
    accessLevelRemoteId: string;
}

export interface GetGroupReviewersStagesListData {
    /**
     * The operator of the reviewer stage. Admin and manager approval are also treated as reviewers. must be one of ["AND", "OR"]
     */
    operator: string;
    ownerIds: string[];
    /**
     * Whether this reviewer stage should require admin approval.
     */
    requireAdminApproval: boolean;
    /**
     * Whether this reviewer stage should require manager approval.
     */
    requireManagerApproval: boolean;
}

export interface GetGroupTagsTag {
    /**
     * The date the tag was created.
     */
    createdAt: string;
    /**
     * The ID of the tag.
     */
    id: string;
    /**
     * The key of the tag.
     */
    key: string;
    /**
     * The date the tag was last updated.
     */
    updatedAt: string;
    /**
     * The ID of the user that created the tag.
     */
    userCreatorId: string;
    /**
     * The value of the tag.
     */
    value: string;
}

export interface GetGroupUsersResult {
    /**
     * # Access Level Object
     * ### Description
     * The `GroupAccessLevel` object is used to represent the level of access that a user has to a group or a group has to a group. The "default" access
     * level is a `GroupAccessLevel` object whose fields are all empty strings.
     *
     * ### Usage Example
     * View the `GroupAccessLevel` of a group/user or group/group pair to see the level of access granted to the group.
     */
    accessLevel: outputs.GetGroupUsersResultAccessLevel;
    /**
     * The user's email.
     */
    email: string;
    /**
     * The day and time the user's access will expire.
     */
    expirationDate: string;
    /**
     * The user's full name.
     */
    fullName: string;
    /**
     * The ID of the group.
     */
    groupId: string;
    /**
     * The ID of the user.
     */
    userId: string;
}

export interface GetGroupUsersResultAccessLevel {
    /**
     * The human-readable name of the access level.
     */
    accessLevelName: string;
    /**
     * The machine-readable identifier of the access level.
     */
    accessLevelRemoteId: string;
}

export interface GetMessageChannelListChannel {
    /**
     * The ID of the message channel.
     */
    id: string;
    /**
     * A bool representing whether or not the message channel is private.
     */
    isPrivate: boolean;
    /**
     * The name of the message channel.
     */
    name: string;
    /**
     * The remote ID of the message channel
     */
    remoteId: string;
    /**
     * The third party provider of the message channel. must be one of ["SLACK"]
     */
    thirdPartyProvider: string;
}

export interface GetOnCallScheduleListOnCallSchedule {
    /**
     * The ID of the on-call schedule.
     */
    id: string;
    /**
     * The name of the on call schedule.
     */
    name: string;
    /**
     * The remote ID of the on call schedule
     */
    remoteId: string;
    /**
     * The third party provider of the on call schedule. must be one of ["OPSGENIE", "PAGER_DUTY"]
     */
    thirdPartyProvider: string;
}

export interface GetOwnersResult {
    /**
     * The amount of time (in minutes) before the next reviewer is notified. Use 0 to remove escalation policy.
     */
    accessRequestEscalationPeriod: number;
    /**
     * A description of the owner.
     */
    description: string;
    /**
     * The ID of the owner.
     */
    id: string;
    /**
     * The name of the owner.
     */
    name: string;
    reviewerMessageChannelId: string;
    sourceGroupId: string;
}

export interface GetRequestsRequest {
    /**
     * The date and time the request was created.
     */
    createdAt: string;
    /**
     * The responses given to the custom fields associated to the request
     */
    customFieldsResponses: outputs.GetRequestsRequestCustomFieldsResponse[];
    /**
     * The duration of the request in minutes.
     */
    durationMinutes: number;
    /**
     * The unique identifier of the request.
     */
    id: string;
    /**
     * The reason for the request.
     */
    reason: string;
    /**
     * The list of targets for the request.
     */
    requestedItemsLists: outputs.GetRequestsRequestRequestedItemsList[];
    /**
     * The unique identifier of the user who created the request.
     */
    requesterId: string;
    /**
     * # Request Status
     * ### Description
     * The `RequestStatus` enum is used to represent the status of a request.
     *
     * ### Usage Example
     * Returned from the `GET Requests` endpoint.
     * must be one of ["pending", "approved", "denied", "canceled"]
     */
    status: string;
    /**
     * The unique identifier of the group who is the target of the request.
     */
    targetGroupId: string;
    /**
     * The unique identifier of the user who is the target of the request.
     */
    targetUserId: string;
    /**
     * The date and time the request was last updated.
     */
    updatedAt: string;
}

export interface GetRequestsRequestCustomFieldsResponse {
    fieldName: string;
    /**
     * The type of the custom request field. must be one of ["SHORT_TEXT", "LONG_TEXT", "BOOLEAN", "MULTI_CHOICE"]
     */
    fieldType: string;
    fieldValue: outputs.GetRequestsRequestCustomFieldsResponseFieldValue;
}

export interface GetRequestsRequestCustomFieldsResponseFieldValue {
    boolean: boolean;
    str: string;
}

export interface GetRequestsRequestRequestedItemsList {
    /**
     * The name of the access level requested.
     */
    accessLevelName: string;
    /**
     * The ID of the access level requested on the remote system.
     */
    accessLevelRemoteId: string;
    /**
     * The ID of the group requested.
     */
    groupId: string;
    /**
     * The name of the target.
     */
    name: string;
    /**
     * The ID of the resource requested.
     */
    resourceId: string;
}

export interface GetResourceMessageChannelListChannel {
    /**
     * The ID of the message channel.
     */
    id: string;
    /**
     * A bool representing whether or not the message channel is private.
     */
    isPrivate: boolean;
    /**
     * The name of the message channel.
     */
    name: string;
    /**
     * The remote ID of the message channel
     */
    remoteId: string;
    /**
     * The third party provider of the message channel. must be one of ["SLACK"]
     */
    thirdPartyProvider: string;
}

export interface GetResourceRemoteInfo {
    /**
     * Remote info for AWS account.
     */
    awsAccount: outputs.GetResourceRemoteInfoAwsAccount;
    /**
     * Remote info for AWS EC2 instance.
     */
    awsEc2Instance: outputs.GetResourceRemoteInfoAwsEc2Instance;
    /**
     * Remote info for AWS EKS cluster.
     */
    awsEksCluster: outputs.GetResourceRemoteInfoAwsEksCluster;
    /**
     * Remote info for AWS IAM role.
     */
    awsIamRole: outputs.GetResourceRemoteInfoAwsIamRole;
    /**
     * Remote info for AWS Identity Center permission set.
     */
    awsPermissionSet: outputs.GetResourceRemoteInfoAwsPermissionSet;
    /**
     * Remote info for AWS RDS instance.
     */
    awsRdsInstance: outputs.GetResourceRemoteInfoAwsRdsInstance;
    /**
     * Remote info for GCP BigQuery Dataset.
     */
    gcpBigQueryDataset: outputs.GetResourceRemoteInfoGcpBigQueryDataset;
    /**
     * Remote info for GCP BigQuery Table.
     */
    gcpBigQueryTable: outputs.GetResourceRemoteInfoGcpBigQueryTable;
    /**
     * Remote info for GCP bucket.
     */
    gcpBucket: outputs.GetResourceRemoteInfoGcpBucket;
    /**
     * Remote info for GCP compute instance.
     */
    gcpComputeInstance: outputs.GetResourceRemoteInfoGcpComputeInstance;
    /**
     * Remote info for GCP folder.
     */
    gcpFolder: outputs.GetResourceRemoteInfoGcpFolder;
    /**
     * Remote info for GCP GKE cluster.
     */
    gcpGkeCluster: outputs.GetResourceRemoteInfoGcpGkeCluster;
    /**
     * Remote info for GCP organization.
     */
    gcpOrganization: outputs.GetResourceRemoteInfoGcpOrganization;
    /**
     * Remote info for GCP project.
     */
    gcpProject: outputs.GetResourceRemoteInfoGcpProject;
    /**
     * Remote info for GCP SQL instance.
     */
    gcpSqlInstance: outputs.GetResourceRemoteInfoGcpSqlInstance;
    /**
     * Remote info for GitHub repository.
     */
    githubRepo: outputs.GetResourceRemoteInfoGithubRepo;
    /**
     * Remote info for Gitlab project.
     */
    gitlabProject: outputs.GetResourceRemoteInfoGitlabProject;
    /**
     * Remote info for Okta directory app.
     */
    oktaApp: outputs.GetResourceRemoteInfoOktaApp;
    /**
     * Remote info for Okta directory custom role.
     */
    oktaCustomRole: outputs.GetResourceRemoteInfoOktaCustomRole;
    /**
     * Remote info for Okta directory standard role.
     */
    oktaStandardRole: outputs.GetResourceRemoteInfoOktaStandardRole;
    /**
     * Remote info for Pagerduty role.
     */
    pagerdutyRole: outputs.GetResourceRemoteInfoPagerdutyRole;
    /**
     * Remote info for Salesforce permission set.
     */
    salesforcePermissionSet: outputs.GetResourceRemoteInfoSalesforcePermissionSet;
    /**
     * Remote info for Salesforce profile.
     */
    salesforceProfile: outputs.GetResourceRemoteInfoSalesforceProfile;
    /**
     * Remote info for Salesforce role.
     */
    salesforceRole: outputs.GetResourceRemoteInfoSalesforceRole;
    /**
     * Remote info for Teleport role.
     */
    teleportRole: outputs.GetResourceRemoteInfoTeleportRole;
}

export interface GetResourceRemoteInfoAwsAccount {
    /**
     * The id of the AWS account.
     */
    accountId: string;
}

export interface GetResourceRemoteInfoAwsEc2Instance {
    /**
     * The id of the AWS account. Required for AWS Organizations.
     */
    accountId: string;
    /**
     * The instanceId of the EC2 instance.
     */
    instanceId: string;
    /**
     * The region of the EC2 instance.
     */
    region: string;
}

export interface GetResourceRemoteInfoAwsEksCluster {
    /**
     * The id of the AWS account. Required for AWS Organizations.
     */
    accountId: string;
    /**
     * The ARN of the EKS cluster.
     */
    arn: string;
}

export interface GetResourceRemoteInfoAwsIamRole {
    /**
     * The id of the AWS account. Required for AWS Organizations.
     */
    accountId: string;
    /**
     * The ARN of the IAM role.
     */
    arn: string;
}

export interface GetResourceRemoteInfoAwsPermissionSet {
    /**
     * The ID of an AWS account to which this permission set is provisioned.
     */
    accountId: string;
    /**
     * The ARN of the permission set.
     */
    arn: string;
}

export interface GetResourceRemoteInfoAwsRdsInstance {
    /**
     * The id of the AWS account. Required for AWS Organizations.
     */
    accountId: string;
    /**
     * The instanceId of the RDS instance.
     */
    instanceId: string;
    /**
     * The region of the RDS instance.
     */
    region: string;
    /**
     * The resourceId of the RDS instance.
     */
    resourceId: string;
}

export interface GetResourceRemoteInfoGcpBigQueryDataset {
    /**
     * The id of the dataset.
     */
    datasetId: string;
    /**
     * The id of the project the dataset is in.
     */
    projectId: string;
}

export interface GetResourceRemoteInfoGcpBigQueryTable {
    /**
     * The id of the dataset the table is in.
     */
    datasetId: string;
    /**
     * The id of the project the table is in.
     */
    projectId: string;
    /**
     * The id of the table.
     */
    tableId: string;
}

export interface GetResourceRemoteInfoGcpBucket {
    /**
     * The id of the bucket.
     */
    bucketId: string;
}

export interface GetResourceRemoteInfoGcpComputeInstance {
    /**
     * The id of the instance.
     */
    instanceId: string;
    /**
     * The id of the project the instance is in.
     */
    projectId: string;
    /**
     * The zone the instance is in.
     */
    zone: string;
}

export interface GetResourceRemoteInfoGcpFolder {
    /**
     * The id of the folder.
     */
    folderId: string;
}

export interface GetResourceRemoteInfoGcpGkeCluster {
    /**
     * The name of the GKE cluster.
     */
    clusterName: string;
}

export interface GetResourceRemoteInfoGcpOrganization {
    /**
     * The id of the organization.
     */
    organizationId: string;
}

export interface GetResourceRemoteInfoGcpProject {
    /**
     * The id of the project.
     */
    projectId: string;
}

export interface GetResourceRemoteInfoGcpSqlInstance {
    /**
     * The id of the SQL instance.
     */
    instanceId: string;
    /**
     * The id of the project the instance is in.
     */
    projectId: string;
}

export interface GetResourceRemoteInfoGithubRepo {
    /**
     * The name of the repository.
     */
    repoName: string;
}

export interface GetResourceRemoteInfoGitlabProject {
    /**
     * The id of the project.
     */
    projectId: string;
}

export interface GetResourceRemoteInfoOktaApp {
    /**
     * The id of the app.
     */
    appId: string;
}

export interface GetResourceRemoteInfoOktaCustomRole {
    /**
     * The id of the custom role.
     */
    roleId: string;
}

export interface GetResourceRemoteInfoOktaStandardRole {
    /**
     * The type of the standard role.
     */
    roleType: string;
}

export interface GetResourceRemoteInfoPagerdutyRole {
    /**
     * The name of the role.
     */
    roleName: string;
}

export interface GetResourceRemoteInfoSalesforcePermissionSet {
    /**
     * The id of the permission set.
     */
    permissionSetId: string;
}

export interface GetResourceRemoteInfoSalesforceProfile {
    /**
     * The id of the permission set.
     */
    profileId: string;
    /**
     * The id of the user license.
     */
    userLicenseId: string;
}

export interface GetResourceRemoteInfoSalesforceRole {
    /**
     * The id of the role.
     */
    roleId: string;
}

export interface GetResourceRemoteInfoTeleportRole {
    /**
     * The name role.
     */
    roleName: string;
}

export interface GetResourceRequestConfiguration {
    /**
     * A bool representing whether or not to allow requests for this resource.
     */
    allowRequests: boolean;
    /**
     * A bool representing whether or not to automatically approve requests for this resource.
     */
    autoApproval: boolean;
    condition: outputs.GetResourceRequestConfigurationCondition;
    /**
     * The maximum duration for which the resource can be requested (in minutes).
     */
    maxDuration: number;
    /**
     * The priority of the request configuration.
     */
    priority: number;
    /**
     * The recommended duration for which the resource should be requested (in minutes). -1 represents an indefinite duration.
     */
    recommendedDuration: number;
    /**
     * The ID of the associated request template.
     */
    requestTemplateId: string;
    /**
     * A bool representing whether or not to require MFA for requesting access to this resource.
     */
    requireMfaToRequest: boolean;
    /**
     * A bool representing whether or not access requests to the resource require an access ticket.
     */
    requireSupportTicket: boolean;
    /**
     * The list of reviewer stages for the request configuration.
     */
    reviewerStages: outputs.GetResourceRequestConfigurationReviewerStage[];
}

export interface GetResourceRequestConfigurationCondition {
    /**
     * The list of group IDs to match.
     */
    groupIds: string[];
    /**
     * The list of role remote IDs to match.
     */
    roleRemoteIds: string[];
}

export interface GetResourceRequestConfigurationReviewerStage {
    /**
     * The operator of the reviewer stage. Admin and manager approval are also treated as reviewers. must be one of ["AND", "OR"]
     */
    operator: string;
    ownerIds: string[];
    /**
     * Whether this reviewer stage should require admin approval.
     */
    requireAdminApproval: boolean;
    /**
     * Whether this reviewer stage should require manager approval.
     */
    requireManagerApproval: boolean;
}

export interface GetResourceTagsTag {
    /**
     * The date the tag was created.
     */
    createdAt: string;
    /**
     * The ID of the tag.
     */
    id: string;
    /**
     * The key of the tag.
     */
    key: string;
    /**
     * The date the tag was last updated.
     */
    updatedAt: string;
    /**
     * The ID of the user that created the tag.
     */
    userCreatorId: string;
    /**
     * The value of the tag.
     */
    value: string;
}

export interface GetResourceTicketPropagation {
    enabledOnGrant: boolean;
    enabledOnRevocation: boolean;
    ticketProjectId: string;
    /**
     * The third party ticketing platform provider. must be one of ["JIRA", "LINEAR", "SERVICE_NOW"]
     */
    ticketProvider: string;
}

export interface GetResourcesAccessStatusAccessLevel {
    /**
     * The human-readable name of the access level.
     */
    accessLevelName: string;
    /**
     * The machine-readable identifier of the access level.
     */
    accessLevelRemoteId: string;
}

export interface GetResourcesListResult {
    /**
     * The ID of the owner of the resource.
     */
    adminOwnerId: string;
    /**
     * The ID of the app.
     */
    appId: string;
    /**
     * A description of the resource.
     */
    description: string;
    /**
     * The ID of the resource.
     */
    id: string;
    /**
     * The name of the resource.
     */
    name: string;
    /**
     * The ID of the parent resource.
     */
    parentResourceId: string;
    /**
     * Information that defines the remote resource. This replaces the deprecated remote_id and metadata fields.
     */
    remoteInfo: outputs.GetResourcesListResultRemoteInfo;
    /**
     * A list of configurations for requests to this resource.
     */
    requestConfigurations: outputs.GetResourcesListResultRequestConfiguration[];
    /**
     * A bool representing whether or not to require MFA for reviewers to approve requests for this resource.
     */
    requireMfaToApprove: boolean;
    /**
     * A bool representing whether or not to require MFA to connect to this resource.
     */
    requireMfaToConnect: boolean;
    /**
     * The type of the resource. must be one of ["AWS_IAM_ROLE", "AWS_EC2_INSTANCE", "AWS_EKS_CLUSTER", "AWS_RDS_POSTGRES_INSTANCE", "AWS_RDS_MYSQL_INSTANCE", "AWS_ACCOUNT", "AWS_SSO_PERMISSION_SET", "CUSTOM", "GCP_BUCKET", "GCP_COMPUTE_INSTANCE", "GCP_FOLDER", "GCP_GKE_CLUSTER", "GCP_PROJECT", "GCP_CLOUD_SQL_POSTGRES_INSTANCE", "GCP_CLOUD_SQL_MYSQL_INSTANCE", "GIT_HUB_REPO", "GIT_LAB_PROJECT", "GOOGLE_WORKSPACE_ROLE", "MONGO_INSTANCE", "MONGO_ATLAS_INSTANCE", "OKTA_APP", "OKTA_ROLE", "OPAL_ROLE", "PAGERDUTY_ROLE", "TAILSCALE_SSH", "SALESFORCE_PERMISSION_SET", "SALESFORCE_PROFILE", "SALESFORCE_ROLE", "WORKDAY_ROLE", "MYSQL_INSTANCE", "MARIADB_INSTANCE", "TELEPORT_ROLE"]
     */
    resourceType: string;
    /**
     * Configuration for ticket propagation, when enabled, a ticket will be created for access changes related to the users in this resource.
     */
    ticketPropagation: outputs.GetResourcesListResultTicketPropagation;
}

export interface GetResourcesListResultRemoteInfo {
    /**
     * Remote info for AWS account.
     */
    awsAccount: outputs.GetResourcesListResultRemoteInfoAwsAccount;
    /**
     * Remote info for AWS EC2 instance.
     */
    awsEc2Instance: outputs.GetResourcesListResultRemoteInfoAwsEc2Instance;
    /**
     * Remote info for AWS EKS cluster.
     */
    awsEksCluster: outputs.GetResourcesListResultRemoteInfoAwsEksCluster;
    /**
     * Remote info for AWS IAM role.
     */
    awsIamRole: outputs.GetResourcesListResultRemoteInfoAwsIamRole;
    /**
     * Remote info for AWS Identity Center permission set.
     */
    awsPermissionSet: outputs.GetResourcesListResultRemoteInfoAwsPermissionSet;
    /**
     * Remote info for AWS RDS instance.
     */
    awsRdsInstance: outputs.GetResourcesListResultRemoteInfoAwsRdsInstance;
    /**
     * Remote info for GCP BigQuery Dataset.
     */
    gcpBigQueryDataset: outputs.GetResourcesListResultRemoteInfoGcpBigQueryDataset;
    /**
     * Remote info for GCP BigQuery Table.
     */
    gcpBigQueryTable: outputs.GetResourcesListResultRemoteInfoGcpBigQueryTable;
    /**
     * Remote info for GCP bucket.
     */
    gcpBucket: outputs.GetResourcesListResultRemoteInfoGcpBucket;
    /**
     * Remote info for GCP compute instance.
     */
    gcpComputeInstance: outputs.GetResourcesListResultRemoteInfoGcpComputeInstance;
    /**
     * Remote info for GCP folder.
     */
    gcpFolder: outputs.GetResourcesListResultRemoteInfoGcpFolder;
    /**
     * Remote info for GCP GKE cluster.
     */
    gcpGkeCluster: outputs.GetResourcesListResultRemoteInfoGcpGkeCluster;
    /**
     * Remote info for GCP organization.
     */
    gcpOrganization: outputs.GetResourcesListResultRemoteInfoGcpOrganization;
    /**
     * Remote info for GCP project.
     */
    gcpProject: outputs.GetResourcesListResultRemoteInfoGcpProject;
    /**
     * Remote info for GCP SQL instance.
     */
    gcpSqlInstance: outputs.GetResourcesListResultRemoteInfoGcpSqlInstance;
    /**
     * Remote info for GitHub repository.
     */
    githubRepo: outputs.GetResourcesListResultRemoteInfoGithubRepo;
    /**
     * Remote info for Gitlab project.
     */
    gitlabProject: outputs.GetResourcesListResultRemoteInfoGitlabProject;
    /**
     * Remote info for Okta directory app.
     */
    oktaApp: outputs.GetResourcesListResultRemoteInfoOktaApp;
    /**
     * Remote info for Okta directory custom role.
     */
    oktaCustomRole: outputs.GetResourcesListResultRemoteInfoOktaCustomRole;
    /**
     * Remote info for Okta directory standard role.
     */
    oktaStandardRole: outputs.GetResourcesListResultRemoteInfoOktaStandardRole;
    /**
     * Remote info for Pagerduty role.
     */
    pagerdutyRole: outputs.GetResourcesListResultRemoteInfoPagerdutyRole;
    /**
     * Remote info for Salesforce permission set.
     */
    salesforcePermissionSet: outputs.GetResourcesListResultRemoteInfoSalesforcePermissionSet;
    /**
     * Remote info for Salesforce profile.
     */
    salesforceProfile: outputs.GetResourcesListResultRemoteInfoSalesforceProfile;
    /**
     * Remote info for Salesforce role.
     */
    salesforceRole: outputs.GetResourcesListResultRemoteInfoSalesforceRole;
    /**
     * Remote info for Teleport role.
     */
    teleportRole: outputs.GetResourcesListResultRemoteInfoTeleportRole;
}

export interface GetResourcesListResultRemoteInfoAwsAccount {
    /**
     * The id of the AWS account.
     */
    accountId: string;
}

export interface GetResourcesListResultRemoteInfoAwsEc2Instance {
    /**
     * The id of the AWS account. Required for AWS Organizations.
     */
    accountId: string;
    /**
     * The instanceId of the EC2 instance.
     */
    instanceId: string;
    /**
     * The region of the EC2 instance.
     */
    region: string;
}

export interface GetResourcesListResultRemoteInfoAwsEksCluster {
    /**
     * The id of the AWS account. Required for AWS Organizations.
     */
    accountId: string;
    /**
     * The ARN of the EKS cluster.
     */
    arn: string;
}

export interface GetResourcesListResultRemoteInfoAwsIamRole {
    /**
     * The id of the AWS account. Required for AWS Organizations.
     */
    accountId: string;
    /**
     * The ARN of the IAM role.
     */
    arn: string;
}

export interface GetResourcesListResultRemoteInfoAwsPermissionSet {
    /**
     * The ID of an AWS account to which this permission set is provisioned.
     */
    accountId: string;
    /**
     * The ARN of the permission set.
     */
    arn: string;
}

export interface GetResourcesListResultRemoteInfoAwsRdsInstance {
    /**
     * The id of the AWS account. Required for AWS Organizations.
     */
    accountId: string;
    /**
     * The instanceId of the RDS instance.
     */
    instanceId: string;
    /**
     * The region of the RDS instance.
     */
    region: string;
    /**
     * The resourceId of the RDS instance.
     */
    resourceId: string;
}

export interface GetResourcesListResultRemoteInfoGcpBigQueryDataset {
    /**
     * The id of the dataset.
     */
    datasetId: string;
    /**
     * The id of the project the dataset is in.
     */
    projectId: string;
}

export interface GetResourcesListResultRemoteInfoGcpBigQueryTable {
    /**
     * The id of the dataset the table is in.
     */
    datasetId: string;
    /**
     * The id of the project the table is in.
     */
    projectId: string;
    /**
     * The id of the table.
     */
    tableId: string;
}

export interface GetResourcesListResultRemoteInfoGcpBucket {
    /**
     * The id of the bucket.
     */
    bucketId: string;
}

export interface GetResourcesListResultRemoteInfoGcpComputeInstance {
    /**
     * The id of the instance.
     */
    instanceId: string;
    /**
     * The id of the project the instance is in.
     */
    projectId: string;
    /**
     * The zone the instance is in.
     */
    zone: string;
}

export interface GetResourcesListResultRemoteInfoGcpFolder {
    /**
     * The id of the folder.
     */
    folderId: string;
}

export interface GetResourcesListResultRemoteInfoGcpGkeCluster {
    /**
     * The name of the GKE cluster.
     */
    clusterName: string;
}

export interface GetResourcesListResultRemoteInfoGcpOrganization {
    /**
     * The id of the organization.
     */
    organizationId: string;
}

export interface GetResourcesListResultRemoteInfoGcpProject {
    /**
     * The id of the project.
     */
    projectId: string;
}

export interface GetResourcesListResultRemoteInfoGcpSqlInstance {
    /**
     * The id of the SQL instance.
     */
    instanceId: string;
    /**
     * The id of the project the instance is in.
     */
    projectId: string;
}

export interface GetResourcesListResultRemoteInfoGithubRepo {
    /**
     * The name of the repository.
     */
    repoName: string;
}

export interface GetResourcesListResultRemoteInfoGitlabProject {
    /**
     * The id of the project.
     */
    projectId: string;
}

export interface GetResourcesListResultRemoteInfoOktaApp {
    /**
     * The id of the app.
     */
    appId: string;
}

export interface GetResourcesListResultRemoteInfoOktaCustomRole {
    /**
     * The id of the custom role.
     */
    roleId: string;
}

export interface GetResourcesListResultRemoteInfoOktaStandardRole {
    /**
     * The type of the standard role.
     */
    roleType: string;
}

export interface GetResourcesListResultRemoteInfoPagerdutyRole {
    /**
     * The name of the role.
     */
    roleName: string;
}

export interface GetResourcesListResultRemoteInfoSalesforcePermissionSet {
    /**
     * The id of the permission set.
     */
    permissionSetId: string;
}

export interface GetResourcesListResultRemoteInfoSalesforceProfile {
    /**
     * The id of the permission set.
     */
    profileId: string;
    /**
     * The id of the user license.
     */
    userLicenseId: string;
}

export interface GetResourcesListResultRemoteInfoSalesforceRole {
    /**
     * The id of the role.
     */
    roleId: string;
}

export interface GetResourcesListResultRemoteInfoTeleportRole {
    /**
     * The name role.
     */
    roleName: string;
}

export interface GetResourcesListResultRequestConfiguration {
    /**
     * A bool representing whether or not to allow requests for this resource.
     */
    allowRequests: boolean;
    /**
     * A bool representing whether or not to automatically approve requests for this resource.
     */
    autoApproval: boolean;
    condition: outputs.GetResourcesListResultRequestConfigurationCondition;
    /**
     * The maximum duration for which the resource can be requested (in minutes).
     */
    maxDuration: number;
    /**
     * The priority of the request configuration.
     */
    priority: number;
    /**
     * The recommended duration for which the resource should be requested (in minutes). -1 represents an indefinite duration.
     */
    recommendedDuration: number;
    /**
     * The ID of the associated request template.
     */
    requestTemplateId: string;
    /**
     * A bool representing whether or not to require MFA for requesting access to this resource.
     */
    requireMfaToRequest: boolean;
    /**
     * A bool representing whether or not access requests to the resource require an access ticket.
     */
    requireSupportTicket: boolean;
    /**
     * The list of reviewer stages for the request configuration.
     */
    reviewerStages: outputs.GetResourcesListResultRequestConfigurationReviewerStage[];
}

export interface GetResourcesListResultRequestConfigurationCondition {
    /**
     * The list of group IDs to match.
     */
    groupIds: string[];
    /**
     * The list of role remote IDs to match.
     */
    roleRemoteIds: string[];
}

export interface GetResourcesListResultRequestConfigurationReviewerStage {
    /**
     * The operator of the reviewer stage. Admin and manager approval are also treated as reviewers. must be one of ["AND", "OR"]
     */
    operator: string;
    ownerIds: string[];
    /**
     * Whether this reviewer stage should require admin approval.
     */
    requireAdminApproval: boolean;
    /**
     * Whether this reviewer stage should require manager approval.
     */
    requireManagerApproval: boolean;
}

export interface GetResourcesListResultTicketPropagation {
    enabledOnGrant: boolean;
    enabledOnRevocation: boolean;
    ticketProjectId: string;
    /**
     * The third party ticketing platform provider. must be one of ["JIRA", "LINEAR", "SERVICE_NOW"]
     */
    ticketProvider: string;
}

export interface GetResourcesUsersListResult {
    /**
     * # Access Level Object
     * ### Description
     * The `ResourceAccessLevel` object is used to represent the level of access that a user has to a resource or a resource has to a group. The "default" access
     * level is a `ResourceAccessLevel` object whose fields are all empty strings.
     *
     * ### Usage Example
     * View the `ResourceAccessLevel` of a resource/user or resource/group pair to see the level of access granted to the resource.
     */
    accessLevel: outputs.GetResourcesUsersListResultAccessLevel;
    /**
     * The user's email.
     */
    email: string;
    /**
     * The day and time the user's access will expire.
     */
    expirationDate: string;
    /**
     * The user's full name.
     */
    fullName: string;
    /**
     * The user has direct access to this resources (vs. indirectly, like through a group).
     */
    hasDirectAccess: boolean;
    /**
     * The number of ways in which the user has access through this resource (directly and indirectly).
     */
    numAccessPaths: number;
    /**
     * The ID of the resource.
     */
    resourceId: string;
    /**
     * The ID of the user.
     */
    userId: string;
}

export interface GetResourcesUsersListResultAccessLevel {
    /**
     * The human-readable name of the access level.
     */
    accessLevelName: string;
    /**
     * The machine-readable identifier of the access level.
     */
    accessLevelRemoteId: string;
}

export interface GetSessionsResult {
    /**
     * # Access Level Object
     * ### Description
     * The `ResourceAccessLevel` object is used to represent the level of access that a user has to a resource or a resource has to a group. The "default" access
     * level is a `ResourceAccessLevel` object whose fields are all empty strings.
     *
     * ### Usage Example
     * View the `ResourceAccessLevel` of a resource/user or resource/group pair to see the level of access granted to the resource.
     */
    accessLevel: outputs.GetSessionsResultAccessLevel;
    /**
     * The ID of the connection.
     */
    connectionId: string;
    /**
     * The day and time the user's access will expire.
     */
    expirationDate: string;
    /**
     * The ID of the resource.
     */
    resourceId: string;
    /**
     * The ID of the user.
     */
    userId: string;
}

export interface GetSessionsResultAccessLevel {
    /**
     * The human-readable name of the access level.
     */
    accessLevelName: string;
    /**
     * The machine-readable identifier of the access level.
     */
    accessLevelRemoteId: string;
}

export interface GetTagsListResult {
    /**
     * The date the tag was created.
     */
    createdAt: string;
    /**
     * The ID of the tag.
     */
    id: string;
    /**
     * The key of the tag.
     */
    key: string;
    /**
     * The date the tag was last updated.
     */
    updatedAt: string;
    /**
     * The ID of the user that created the tag.
     */
    userCreatorId: string;
    /**
     * The value of the tag.
     */
    value: string;
}

export interface GetUarUarScope {
    /**
     * This access review will include resources and groups who are owned by one of the owners corresponding to the given IDs.
     */
    admins: string[];
    /**
     * This access review will include items in the specified applications
     */
    apps: string[];
    /**
     * This access review will include resources and groups with ids in the given strings.
     */
    entities: string[];
    /**
     * Specifies whether entities must match all (AND) or any (OR) of the filters. must be one of ["ANY", "ALL"]
     */
    filterOperator: string;
    /**
     * This access review will include items of the specified group types
     */
    groupTypes: string[];
    /**
     * Specifies what users can see during an Access Review. must be one of ["STRICT", "VIEW_VISIBLE_AND_ASSIGNED", "VIEW_ALL"]
     */
    groupVisibility: string;
    includeGroupBindings: boolean;
    /**
     * This access review will include resources and groups whose name contains one of the given strings.
     */
    names: string[];
    /**
     * This access review will include items of the specified resource types
     */
    resourceTypes: string[];
    /**
     * This access review will include resources and groups who are tagged with one of the given tags.
     */
    tags: outputs.GetUarUarScopeTag[];
    /**
     * The access review will only include the following users. If any users are selected, any entity filters will be applied to only the entities that the selected users have access to.
     */
    users: string[];
}

export interface GetUarUarScopeTag {
    /**
     * The key of the tag.
     */
    key: string;
    /**
     * The value of the tag.
     */
    value: string;
}

export interface GetUarsListResult {
    /**
     * The last day for reviewers to complete their access reviews.
     */
    deadline: string;
    /**
     * The name of the UAR.
     */
    name: string;
    /**
     * A policy for auto-assigning reviewers. If auto-assignment is on, specific assignments can still be manually adjusted after the access review is started. Default is Manually. must be one of ["MANUALLY", "BY_OWNING_TEAM_ADMIN", "BY_MANAGER"]
     */
    reviewerAssignmentPolicy: string;
    /**
     * A bool representing whether to present a warning when a user is the only reviewer for themself. Default is False.
     */
    selfReviewAllowed: boolean;
    /**
     * A bool representing whether to send a notification to reviewers when they're assigned a new review. Default is False.
     */
    sendReviewerAssignmentNotification: boolean;
    /**
     * The time zone name (as defined by the IANA Time Zone database) used in the access review deadline and exported audit report. Default is America/Los_Angeles.
     */
    timeZone: string;
    /**
     * The ID of the UAR.
     */
    uarId: string;
    /**
     * If set, the access review will only contain resources and groups that match at least one of the filters in scope.
     */
    uarScope: outputs.GetUarsListResultUarScope;
}

export interface GetUarsListResultUarScope {
    /**
     * This access review will include resources and groups who are owned by one of the owners corresponding to the given IDs.
     */
    admins: string[];
    /**
     * This access review will include items in the specified applications
     */
    apps: string[];
    /**
     * This access review will include resources and groups with ids in the given strings.
     */
    entities: string[];
    /**
     * Specifies whether entities must match all (AND) or any (OR) of the filters. must be one of ["ANY", "ALL"]
     */
    filterOperator: string;
    /**
     * This access review will include items of the specified group types
     */
    groupTypes: string[];
    /**
     * Specifies what users can see during an Access Review. must be one of ["STRICT", "VIEW_VISIBLE_AND_ASSIGNED", "VIEW_ALL"]
     */
    groupVisibility: string;
    includeGroupBindings: boolean;
    /**
     * This access review will include resources and groups whose name contains one of the given strings.
     */
    names: string[];
    /**
     * This access review will include items of the specified resource types
     */
    resourceTypes: string[];
    /**
     * This access review will include resources and groups who are tagged with one of the given tags.
     */
    tags: outputs.GetUarsListResultUarScopeTag[];
    /**
     * The access review will only include the following users. If any users are selected, any entity filters will be applied to only the entities that the selected users have access to.
     */
    users: string[];
}

export interface GetUarsListResultUarScopeTag {
    /**
     * The key of the tag.
     */
    key: string;
    /**
     * The value of the tag.
     */
    value: string;
}

export interface GetUserTagsTag {
    /**
     * The date the tag was created.
     */
    createdAt: string;
    /**
     * The ID of the tag.
     */
    id: string;
    /**
     * The key of the tag.
     */
    key: string;
    /**
     * The date the tag was last updated.
     */
    updatedAt: string;
    /**
     * The ID of the user that created the tag.
     */
    userCreatorId: string;
    /**
     * The value of the tag.
     */
    value: string;
}

export interface GetUsersResult {
    /**
     * The email of the user.
     */
    email: string;
    /**
     * The first name of the user.
     */
    firstName: string;
    /**
     * User status pulled from an HR/IDP provider. must be one of ["ACTIVE", "SUSPENDED", "DEPROVISIONED", "DELETED", "NOT_FOUND"]
     */
    hrIdpStatus: string;
    /**
     * The ID of the user.
     */
    id: string;
    /**
     * The last name of the user.
     */
    lastName: string;
    /**
     * The full name of the user.
     */
    name: string;
    /**
     * The user's position.
     */
    position: string;
}

export interface GroupMessageChannels {
    channels: outputs.GroupMessageChannelsChannel[];
}

export interface GroupMessageChannelsChannel {
    /**
     * The ID of the message channel.
     */
    id: string;
    /**
     * A bool representing whether or not the message channel is private.
     */
    isPrivate: boolean;
    /**
     * The name of the message channel.
     */
    name: string;
    /**
     * The remote ID of the message channel
     */
    remoteId: string;
    /**
     * The third party provider of the message channel. must be one of ["SLACK"]
     */
    thirdPartyProvider: string;
}

export interface GroupOncallSchedules {
    /**
     * The ID of the on-call schedule.
     */
    id: string;
    /**
     * The name of the on call schedule.
     */
    name: string;
    /**
     * The remote ID of the on call schedule
     */
    remoteId: string;
    /**
     * The third party provider of the on call schedule. must be one of ["OPSGENIE", "PAGER_DUTY"]
     */
    thirdPartyProvider: string;
}

export interface GroupRemoteInfo {
    /**
     * Remote info for Active Directory group. Requires replacement if changed.
     */
    activeDirectoryGroup: outputs.GroupRemoteInfoActiveDirectoryGroup;
    /**
     * Remote info for Microsoft Entra ID Microsoft 365 group. Requires replacement if changed.
     */
    azureAdMicrosoft365Group: outputs.GroupRemoteInfoAzureAdMicrosoft365Group;
    /**
     * Remote info for Microsoft Entra ID Security group. Requires replacement if changed.
     */
    azureAdSecurityGroup: outputs.GroupRemoteInfoAzureAdSecurityGroup;
    /**
     * Remote info for Duo Security group. Requires replacement if changed.
     */
    duoGroup: outputs.GroupRemoteInfoDuoGroup;
    /**
     * Remote info for GitHub team. Requires replacement if changed.
     */
    githubTeam: outputs.GroupRemoteInfoGithubTeam;
    /**
     * Remote info for Gitlab group. Requires replacement if changed.
     */
    gitlabGroup: outputs.GroupRemoteInfoGitlabGroup;
    /**
     * Remote info for Google group. Requires replacement if changed.
     */
    googleGroup: outputs.GroupRemoteInfoGoogleGroup;
    /**
     * Remote info for LDAP group. Requires replacement if changed.
     */
    ldapGroup: outputs.GroupRemoteInfoLdapGroup;
    /**
     * Remote info for Okta Directory group. Requires replacement if changed.
     */
    oktaGroup: outputs.GroupRemoteInfoOktaGroup;
}

export interface GroupRemoteInfoActiveDirectoryGroup {
    /**
     * The id of the Google group. Requires replacement if changed. ; Not Null
     */
    groupId: string;
}

export interface GroupRemoteInfoAzureAdMicrosoft365Group {
    /**
     * The id of the Microsoft Entra ID Microsoft 365 group. Requires replacement if changed. ; Not Null
     */
    groupId: string;
}

export interface GroupRemoteInfoAzureAdSecurityGroup {
    /**
     * The id of the Microsoft Entra ID Security group. Requires replacement if changed. ; Not Null
     */
    groupId: string;
}

export interface GroupRemoteInfoDuoGroup {
    /**
     * The id of the Duo Security group. Requires replacement if changed. ; Not Null
     */
    groupId: string;
}

export interface GroupRemoteInfoGithubTeam {
    /**
     * The slug of the GitHub team. Requires replacement if changed. ; Not Null
     */
    teamSlug: string;
}

export interface GroupRemoteInfoGitlabGroup {
    /**
     * The id of the Gitlab group. Requires replacement if changed. ; Not Null
     */
    groupId: string;
}

export interface GroupRemoteInfoGoogleGroup {
    /**
     * The id of the Google group. Requires replacement if changed. ; Not Null
     */
    groupId: string;
}

export interface GroupRemoteInfoLdapGroup {
    /**
     * The id of the LDAP group. Requires replacement if changed. ; Not Null
     */
    groupId: string;
}

export interface GroupRemoteInfoOktaGroup {
    /**
     * The id of the Okta Directory group. Requires replacement if changed. ; Not Null
     */
    groupId: string;
}

export interface GroupRequestConfiguration {
    /**
     * A bool representing whether or not to allow requests for this resource. Not Null
     */
    allowRequests: boolean;
    /**
     * A bool representing whether or not to automatically approve requests for this resource. Not Null
     */
    autoApproval: boolean;
    condition: outputs.GroupRequestConfigurationCondition;
    /**
     * The maximum duration for which the resource can be requested (in minutes).
     */
    maxDuration: number;
    /**
     * The priority of the request configuration. Not Null
     */
    priority: number;
    /**
     * The recommended duration for which the resource should be requested (in minutes). -1 represents an indefinite duration.
     */
    recommendedDuration: number;
    /**
     * The ID of the associated request template.
     */
    requestTemplateId: string;
    /**
     * A bool representing whether or not to require MFA for requesting access to this resource. Not Null
     */
    requireMfaToRequest: boolean;
    /**
     * A bool representing whether or not access requests to the resource require an access ticket. Not Null
     */
    requireSupportTicket: boolean;
    /**
     * The list of reviewer stages for the request configuration.
     */
    reviewerStages: outputs.GroupRequestConfigurationReviewerStage[];
}

export interface GroupRequestConfigurationCondition {
    /**
     * The list of group IDs to match.
     */
    groupIds: string[];
    /**
     * The list of role remote IDs to match.
     */
    roleRemoteIds: string[];
}

export interface GroupRequestConfigurationReviewerStage {
    /**
     * The operator of the reviewer stage. Admin and manager approval are also treated as reviewers. must be one of ["AND", "OR"]; Default: "AND"
     */
    operator: string;
    /**
     * Not Null
     */
    ownerIds: string[];
    /**
     * Whether this reviewer stage should require admin approval.
     */
    requireAdminApproval: boolean;
    /**
     * Whether this reviewer stage should require manager approval. Not Null
     */
    requireManagerApproval: boolean;
}

export interface GroupResourceListGroupResource {
    /**
     * # Access Level Object
     * ### Description
     * The `ResourceAccessLevel` object is used to represent the level of access that a user has to a resource or a resource has to a group. The "default" access
     * level is a `ResourceAccessLevel` object whose fields are all empty strings.
     *
     * ### Usage Example
     * View the `ResourceAccessLevel` of a resource/user or resource/group pair to see the level of access granted to the resource.
     */
    accessLevel: outputs.GroupResourceListGroupResourceAccessLevel;
    /**
     * The ID of the group.
     */
    groupId: string;
    /**
     * The ID of the resource.
     */
    resourceId: string;
}

export interface GroupResourceListGroupResourceAccessLevel {
    /**
     * The human-readable name of the access level.
     */
    accessLevelName: string;
    /**
     * The machine-readable identifier of the access level.
     */
    accessLevelRemoteId: string;
}

export interface GroupResourceListResource {
    /**
     * The ID of the resource.
     */
    accessLevelRemoteId?: string;
    /**
     * The ID of the resource.
     */
    resourceId: string;
}

export interface GroupUserAccessLevel {
    /**
     * The human-readable name of the access level.
     */
    accessLevelName: string;
    /**
     * The machine-readable identifier of the access level.
     */
    accessLevelRemoteId: string;
}

export interface ResourceRemoteInfo {
    /**
     * Remote info for AWS account. Requires replacement if changed.
     */
    awsAccount: outputs.ResourceRemoteInfoAwsAccount;
    /**
     * Remote info for AWS EC2 instance. Requires replacement if changed.
     */
    awsEc2Instance: outputs.ResourceRemoteInfoAwsEc2Instance;
    /**
     * Remote info for AWS EKS cluster. Requires replacement if changed.
     */
    awsEksCluster: outputs.ResourceRemoteInfoAwsEksCluster;
    /**
     * Remote info for AWS IAM role. Requires replacement if changed.
     */
    awsIamRole: outputs.ResourceRemoteInfoAwsIamRole;
    /**
     * Remote info for AWS Identity Center permission set. Requires replacement if changed.
     */
    awsPermissionSet: outputs.ResourceRemoteInfoAwsPermissionSet;
    /**
     * Remote info for AWS RDS instance. Requires replacement if changed.
     */
    awsRdsInstance: outputs.ResourceRemoteInfoAwsRdsInstance;
    /**
     * Remote info for GCP BigQuery Dataset. Requires replacement if changed.
     */
    gcpBigQueryDataset: outputs.ResourceRemoteInfoGcpBigQueryDataset;
    /**
     * Remote info for GCP BigQuery Table. Requires replacement if changed.
     */
    gcpBigQueryTable: outputs.ResourceRemoteInfoGcpBigQueryTable;
    /**
     * Remote info for GCP bucket. Requires replacement if changed.
     */
    gcpBucket: outputs.ResourceRemoteInfoGcpBucket;
    /**
     * Remote info for GCP compute instance. Requires replacement if changed.
     */
    gcpComputeInstance: outputs.ResourceRemoteInfoGcpComputeInstance;
    /**
     * Remote info for GCP folder. Requires replacement if changed.
     */
    gcpFolder: outputs.ResourceRemoteInfoGcpFolder;
    /**
     * Remote info for GCP GKE cluster. Requires replacement if changed.
     */
    gcpGkeCluster: outputs.ResourceRemoteInfoGcpGkeCluster;
    /**
     * Remote info for GCP organization. Requires replacement if changed.
     */
    gcpOrganization: outputs.ResourceRemoteInfoGcpOrganization;
    /**
     * Remote info for GCP project. Requires replacement if changed.
     */
    gcpProject: outputs.ResourceRemoteInfoGcpProject;
    /**
     * Remote info for GCP SQL instance. Requires replacement if changed.
     */
    gcpSqlInstance: outputs.ResourceRemoteInfoGcpSqlInstance;
    /**
     * Remote info for GitHub repository. Requires replacement if changed.
     */
    githubRepo: outputs.ResourceRemoteInfoGithubRepo;
    /**
     * Remote info for Gitlab project. Requires replacement if changed.
     */
    gitlabProject: outputs.ResourceRemoteInfoGitlabProject;
    /**
     * Remote info for Okta directory app. Requires replacement if changed.
     */
    oktaApp: outputs.ResourceRemoteInfoOktaApp;
    /**
     * Remote info for Okta directory custom role. Requires replacement if changed.
     */
    oktaCustomRole: outputs.ResourceRemoteInfoOktaCustomRole;
    /**
     * Remote info for Okta directory standard role. Requires replacement if changed.
     */
    oktaStandardRole: outputs.ResourceRemoteInfoOktaStandardRole;
    /**
     * Remote info for Pagerduty role. Requires replacement if changed.
     */
    pagerdutyRole: outputs.ResourceRemoteInfoPagerdutyRole;
    /**
     * Remote info for Salesforce permission set. Requires replacement if changed.
     */
    salesforcePermissionSet: outputs.ResourceRemoteInfoSalesforcePermissionSet;
    /**
     * Remote info for Salesforce profile. Requires replacement if changed.
     */
    salesforceProfile: outputs.ResourceRemoteInfoSalesforceProfile;
    /**
     * Remote info for Salesforce role. Requires replacement if changed.
     */
    salesforceRole: outputs.ResourceRemoteInfoSalesforceRole;
    /**
     * Remote info for Teleport role. Requires replacement if changed.
     */
    teleportRole: outputs.ResourceRemoteInfoTeleportRole;
}

export interface ResourceRemoteInfoAwsAccount {
    /**
     * The id of the AWS account. Requires replacement if changed. ; Not Null
     */
    accountId: string;
}

export interface ResourceRemoteInfoAwsEc2Instance {
    /**
     * The id of the AWS account. Required for AWS Organizations. Requires replacement if changed.
     */
    accountId: string;
    /**
     * The instanceId of the EC2 instance. Requires replacement if changed. ; Not Null
     */
    instanceId: string;
    /**
     * The region of the EC2 instance. Requires replacement if changed. ; Not Null
     */
    region: string;
}

export interface ResourceRemoteInfoAwsEksCluster {
    /**
     * The id of the AWS account. Required for AWS Organizations. Requires replacement if changed.
     */
    accountId: string;
    /**
     * The ARN of the EKS cluster. Requires replacement if changed. ; Not Null
     */
    arn: string;
}

export interface ResourceRemoteInfoAwsIamRole {
    /**
     * The id of the AWS account. Required for AWS Organizations. Requires replacement if changed.
     */
    accountId: string;
    /**
     * The ARN of the IAM role. Requires replacement if changed. ; Not Null
     */
    arn: string;
}

export interface ResourceRemoteInfoAwsPermissionSet {
    /**
     * The ID of an AWS account to which this permission set is provisioned. Requires replacement if changed. ; Not Null
     */
    accountId: string;
    /**
     * The ARN of the permission set. Requires replacement if changed. ; Not Null
     */
    arn: string;
}

export interface ResourceRemoteInfoAwsRdsInstance {
    /**
     * The id of the AWS account. Required for AWS Organizations. Requires replacement if changed.
     */
    accountId: string;
    /**
     * The instanceId of the RDS instance. Requires replacement if changed. ; Not Null
     */
    instanceId: string;
    /**
     * The region of the RDS instance. Requires replacement if changed. ; Not Null
     */
    region: string;
    /**
     * The resourceId of the RDS instance. Requires replacement if changed. ; Not Null
     */
    resourceId: string;
}

export interface ResourceRemoteInfoGcpBigQueryDataset {
    /**
     * The id of the dataset. Requires replacement if changed. ; Not Null
     */
    datasetId: string;
    /**
     * The id of the project the dataset is in. Requires replacement if changed. ; Not Null
     */
    projectId: string;
}

export interface ResourceRemoteInfoGcpBigQueryTable {
    /**
     * The id of the dataset the table is in. Requires replacement if changed. ; Not Null
     */
    datasetId: string;
    /**
     * The id of the project the table is in. Requires replacement if changed. ; Not Null
     */
    projectId: string;
    /**
     * The id of the table. Requires replacement if changed. ; Not Null
     */
    tableId: string;
}

export interface ResourceRemoteInfoGcpBucket {
    /**
     * The id of the bucket. Requires replacement if changed. ; Not Null
     */
    bucketId: string;
}

export interface ResourceRemoteInfoGcpComputeInstance {
    /**
     * The id of the instance. Requires replacement if changed. ; Not Null
     */
    instanceId: string;
    /**
     * The id of the project the instance is in. Requires replacement if changed. ; Not Null
     */
    projectId: string;
    /**
     * The zone the instance is in. Requires replacement if changed. ; Not Null
     */
    zone: string;
}

export interface ResourceRemoteInfoGcpFolder {
    /**
     * The id of the folder. Requires replacement if changed. ; Not Null
     */
    folderId: string;
}

export interface ResourceRemoteInfoGcpGkeCluster {
    /**
     * The name of the GKE cluster. Requires replacement if changed. ; Not Null
     */
    clusterName: string;
}

export interface ResourceRemoteInfoGcpOrganization {
    /**
     * The id of the organization. Requires replacement if changed. ; Not Null
     */
    organizationId: string;
}

export interface ResourceRemoteInfoGcpProject {
    /**
     * The id of the project. Requires replacement if changed. ; Not Null
     */
    projectId: string;
}

export interface ResourceRemoteInfoGcpSqlInstance {
    /**
     * The id of the SQL instance. Requires replacement if changed. ; Not Null
     */
    instanceId: string;
    /**
     * The id of the project the instance is in. Requires replacement if changed. ; Not Null
     */
    projectId: string;
}

export interface ResourceRemoteInfoGithubRepo {
    /**
     * The name of the repository. Requires replacement if changed. ; Not Null
     */
    repoName: string;
}

export interface ResourceRemoteInfoGitlabProject {
    /**
     * The id of the project. Requires replacement if changed. ; Not Null
     */
    projectId: string;
}

export interface ResourceRemoteInfoOktaApp {
    /**
     * The id of the app. Requires replacement if changed. ; Not Null
     */
    appId: string;
}

export interface ResourceRemoteInfoOktaCustomRole {
    /**
     * The id of the custom role. Requires replacement if changed. ; Not Null
     */
    roleId: string;
}

export interface ResourceRemoteInfoOktaStandardRole {
    /**
     * The type of the standard role. Requires replacement if changed. ; Not Null
     */
    roleType: string;
}

export interface ResourceRemoteInfoPagerdutyRole {
    /**
     * The name of the role. Requires replacement if changed. ; Not Null
     */
    roleName: string;
}

export interface ResourceRemoteInfoSalesforcePermissionSet {
    /**
     * The id of the permission set. Requires replacement if changed. ; Not Null
     */
    permissionSetId: string;
}

export interface ResourceRemoteInfoSalesforceProfile {
    /**
     * The id of the permission set. Requires replacement if changed. ; Not Null
     */
    profileId: string;
    /**
     * The id of the user license. Requires replacement if changed. ; Not Null
     */
    userLicenseId: string;
}

export interface ResourceRemoteInfoSalesforceRole {
    /**
     * The id of the role. Requires replacement if changed. ; Not Null
     */
    roleId: string;
}

export interface ResourceRemoteInfoTeleportRole {
    /**
     * The name role. Requires replacement if changed. ; Not Null
     */
    roleName: string;
}

export interface ResourceRequestConfiguration {
    /**
     * A bool representing whether or not to allow requests for this resource. Not Null
     */
    allowRequests: boolean;
    /**
     * A bool representing whether or not to automatically approve requests for this resource. Not Null
     */
    autoApproval: boolean;
    condition: outputs.ResourceRequestConfigurationCondition;
    /**
     * The maximum duration for which the resource can be requested (in minutes).
     */
    maxDuration: number;
    /**
     * The priority of the request configuration. Not Null
     */
    priority: number;
    /**
     * The recommended duration for which the resource should be requested (in minutes). -1 represents an indefinite duration.
     */
    recommendedDuration: number;
    /**
     * The ID of the associated request template.
     */
    requestTemplateId: string;
    /**
     * A bool representing whether or not to require MFA for requesting access to this resource. Not Null
     */
    requireMfaToRequest: boolean;
    /**
     * A bool representing whether or not access requests to the resource require an access ticket. Not Null
     */
    requireSupportTicket: boolean;
    /**
     * The list of reviewer stages for the request configuration.
     */
    reviewerStages: outputs.ResourceRequestConfigurationReviewerStage[];
}

export interface ResourceRequestConfigurationCondition {
    /**
     * The list of group IDs to match.
     */
    groupIds: string[];
    /**
     * The list of role remote IDs to match.
     */
    roleRemoteIds: string[];
}

export interface ResourceRequestConfigurationReviewerStage {
    /**
     * The operator of the reviewer stage. Admin and manager approval are also treated as reviewers. must be one of ["AND", "OR"]; Default: "AND"
     */
    operator: string;
    /**
     * Not Null
     */
    ownerIds: string[];
    /**
     * Whether this reviewer stage should require admin approval.
     */
    requireAdminApproval: boolean;
    /**
     * Whether this reviewer stage should require manager approval. Not Null
     */
    requireManagerApproval: boolean;
}

export interface ResourceTicketPropagation {
    /**
     * Not Null
     */
    enabledOnGrant: boolean;
    /**
     * Not Null
     */
    enabledOnRevocation: boolean;
    ticketProjectId: string;
    /**
     * The third party ticketing platform provider. must be one of ["JIRA", "LINEAR", "SERVICE_NOW"]
     */
    ticketProvider: string;
}

