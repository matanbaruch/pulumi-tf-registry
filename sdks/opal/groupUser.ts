// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class GroupUser extends pulumi.CustomResource {
    /**
     * Get an existing GroupUser resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GroupUserState, opts?: pulumi.CustomResourceOptions): GroupUser {
        return new GroupUser(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'opal:index/groupUser:GroupUser';

    /**
     * Returns true if the given object is an instance of GroupUser.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GroupUser {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GroupUser.__pulumiType;
    }

    /**
     * # Access Level Object ### Description The `GroupAccessLevel` object is used to represent the level of access that a user
     * has to a group or a group has to a group. The "default" access level is a `GroupAccessLevel` object whose fields are all
     * empty strings. ### Usage Example View the `GroupAccessLevel` of a group/user or group/group pair to see the level of
     * access granted to the group.
     */
    public /*out*/ readonly accessLevel!: pulumi.Output<outputs.GroupUserAccessLevel>;
    /**
     * The remote ID of the access level to grant to this user. If omitted, the default access level remote ID value (empty
     * string) is used. Requires replacement if changed.
     */
    public readonly accessLevelRemoteId!: pulumi.Output<string | undefined>;
    public readonly durationMinutes!: pulumi.Output<number>;
    /**
     * The user's email.
     */
    public /*out*/ readonly email!: pulumi.Output<string>;
    /**
     * The day and time the user's access will expire.
     */
    public /*out*/ readonly expirationDate!: pulumi.Output<string>;
    /**
     * The user's full name.
     */
    public /*out*/ readonly fullName!: pulumi.Output<string>;
    /**
     * The ID of the group. Requires replacement if changed.
     */
    public readonly groupId!: pulumi.Output<string>;
    /**
     * The ID of the user to add. Requires replacement if changed.
     */
    public readonly userId!: pulumi.Output<string>;

    /**
     * Create a GroupUser resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GroupUserArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GroupUserArgs | GroupUserState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GroupUserState | undefined;
            resourceInputs["accessLevel"] = state ? state.accessLevel : undefined;
            resourceInputs["accessLevelRemoteId"] = state ? state.accessLevelRemoteId : undefined;
            resourceInputs["durationMinutes"] = state ? state.durationMinutes : undefined;
            resourceInputs["email"] = state ? state.email : undefined;
            resourceInputs["expirationDate"] = state ? state.expirationDate : undefined;
            resourceInputs["fullName"] = state ? state.fullName : undefined;
            resourceInputs["groupId"] = state ? state.groupId : undefined;
            resourceInputs["userId"] = state ? state.userId : undefined;
        } else {
            const args = argsOrState as GroupUserArgs | undefined;
            if ((!args || args.groupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'groupId'");
            }
            if ((!args || args.userId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userId'");
            }
            resourceInputs["accessLevelRemoteId"] = args ? args.accessLevelRemoteId : undefined;
            resourceInputs["durationMinutes"] = args ? args.durationMinutes : undefined;
            resourceInputs["groupId"] = args ? args.groupId : undefined;
            resourceInputs["userId"] = args ? args.userId : undefined;
            resourceInputs["accessLevel"] = undefined /*out*/;
            resourceInputs["email"] = undefined /*out*/;
            resourceInputs["expirationDate"] = undefined /*out*/;
            resourceInputs["fullName"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GroupUser.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering GroupUser resources.
 */
export interface GroupUserState {
    /**
     * # Access Level Object ### Description The `GroupAccessLevel` object is used to represent the level of access that a user
     * has to a group or a group has to a group. The "default" access level is a `GroupAccessLevel` object whose fields are all
     * empty strings. ### Usage Example View the `GroupAccessLevel` of a group/user or group/group pair to see the level of
     * access granted to the group.
     */
    accessLevel?: pulumi.Input<inputs.GroupUserAccessLevel>;
    /**
     * The remote ID of the access level to grant to this user. If omitted, the default access level remote ID value (empty
     * string) is used. Requires replacement if changed.
     */
    accessLevelRemoteId?: pulumi.Input<string>;
    durationMinutes?: pulumi.Input<number>;
    /**
     * The user's email.
     */
    email?: pulumi.Input<string>;
    /**
     * The day and time the user's access will expire.
     */
    expirationDate?: pulumi.Input<string>;
    /**
     * The user's full name.
     */
    fullName?: pulumi.Input<string>;
    /**
     * The ID of the group. Requires replacement if changed.
     */
    groupId?: pulumi.Input<string>;
    /**
     * The ID of the user to add. Requires replacement if changed.
     */
    userId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a GroupUser resource.
 */
export interface GroupUserArgs {
    /**
     * The remote ID of the access level to grant to this user. If omitted, the default access level remote ID value (empty
     * string) is used. Requires replacement if changed.
     */
    accessLevelRemoteId?: pulumi.Input<string>;
    durationMinutes?: pulumi.Input<number>;
    /**
     * The ID of the group. Requires replacement if changed.
     */
    groupId: pulumi.Input<string>;
    /**
     * The ID of the user to add. Requires replacement if changed.
     */
    userId: pulumi.Input<string>;
}
