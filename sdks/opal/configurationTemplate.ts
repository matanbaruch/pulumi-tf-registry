// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ConfigurationTemplate extends pulumi.CustomResource {
    /**
     * Get an existing ConfigurationTemplate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ConfigurationTemplateState, opts?: pulumi.CustomResourceOptions): ConfigurationTemplate {
        return new ConfigurationTemplate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'opal:index/configurationTemplate:ConfigurationTemplate';

    /**
     * Returns true if the given object is an instance of ConfigurationTemplate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ConfigurationTemplate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ConfigurationTemplate.__pulumiType;
    }

    /**
     * The ID of the owner of the configuration template.
     */
    public readonly adminOwnerId!: pulumi.Output<string>;
    /**
     * The IDs of the break glass users linked to the configuration template.
     */
    public readonly breakGlassUserIds!: pulumi.Output<string[]>;
    /**
     * The ID of the configuration template.
     */
    public /*out*/ readonly configurationTemplateId!: pulumi.Output<string>;
    /**
     * The IDs of the audit message channels linked to the configuration template.
     */
    public readonly linkedAuditMessageChannelIds!: pulumi.Output<string[]>;
    /**
     * The IDs of the on-call schedules linked to the configuration template.
     */
    public readonly memberOncallScheduleIds!: pulumi.Output<string[]>;
    /**
     * The name of the configuration template.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The ID of the request configuration linked to the configuration template.
     */
    public /*out*/ readonly requestConfigurationId!: pulumi.Output<string>;
    /**
     * The request configuration list of the configuration template. If not provided, the default request configuration will be
     * used.
     */
    public readonly requestConfigurations!: pulumi.Output<outputs.ConfigurationTemplateRequestConfiguration[] | undefined>;
    /**
     * A bool representing whether or not to require MFA for reviewers to approve requests for this configuration template.
     */
    public readonly requireMfaToApprove!: pulumi.Output<boolean>;
    /**
     * A bool representing whether or not to require MFA to connect to resources associated with this configuration template.
     */
    public readonly requireMfaToConnect!: pulumi.Output<boolean>;
    /**
     * Configuration for ticket propagation, when enabled, a ticket will be created for access changes related to the users in
     * this resource.
     */
    public readonly ticketPropagation!: pulumi.Output<outputs.ConfigurationTemplateTicketPropagation>;
    /**
     * Visibility infomation of an entity.
     */
    public readonly visibility!: pulumi.Output<outputs.ConfigurationTemplateVisibility>;

    /**
     * Create a ConfigurationTemplate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ConfigurationTemplateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ConfigurationTemplateArgs | ConfigurationTemplateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ConfigurationTemplateState | undefined;
            resourceInputs["adminOwnerId"] = state ? state.adminOwnerId : undefined;
            resourceInputs["breakGlassUserIds"] = state ? state.breakGlassUserIds : undefined;
            resourceInputs["configurationTemplateId"] = state ? state.configurationTemplateId : undefined;
            resourceInputs["linkedAuditMessageChannelIds"] = state ? state.linkedAuditMessageChannelIds : undefined;
            resourceInputs["memberOncallScheduleIds"] = state ? state.memberOncallScheduleIds : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["requestConfigurationId"] = state ? state.requestConfigurationId : undefined;
            resourceInputs["requestConfigurations"] = state ? state.requestConfigurations : undefined;
            resourceInputs["requireMfaToApprove"] = state ? state.requireMfaToApprove : undefined;
            resourceInputs["requireMfaToConnect"] = state ? state.requireMfaToConnect : undefined;
            resourceInputs["ticketPropagation"] = state ? state.ticketPropagation : undefined;
            resourceInputs["visibility"] = state ? state.visibility : undefined;
        } else {
            const args = argsOrState as ConfigurationTemplateArgs | undefined;
            if ((!args || args.adminOwnerId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'adminOwnerId'");
            }
            if ((!args || args.requireMfaToApprove === undefined) && !opts.urn) {
                throw new Error("Missing required property 'requireMfaToApprove'");
            }
            if ((!args || args.requireMfaToConnect === undefined) && !opts.urn) {
                throw new Error("Missing required property 'requireMfaToConnect'");
            }
            if ((!args || args.visibility === undefined) && !opts.urn) {
                throw new Error("Missing required property 'visibility'");
            }
            resourceInputs["adminOwnerId"] = args ? args.adminOwnerId : undefined;
            resourceInputs["breakGlassUserIds"] = args ? args.breakGlassUserIds : undefined;
            resourceInputs["linkedAuditMessageChannelIds"] = args ? args.linkedAuditMessageChannelIds : undefined;
            resourceInputs["memberOncallScheduleIds"] = args ? args.memberOncallScheduleIds : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["requestConfigurations"] = args ? args.requestConfigurations : undefined;
            resourceInputs["requireMfaToApprove"] = args ? args.requireMfaToApprove : undefined;
            resourceInputs["requireMfaToConnect"] = args ? args.requireMfaToConnect : undefined;
            resourceInputs["ticketPropagation"] = args ? args.ticketPropagation : undefined;
            resourceInputs["visibility"] = args ? args.visibility : undefined;
            resourceInputs["configurationTemplateId"] = undefined /*out*/;
            resourceInputs["requestConfigurationId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ConfigurationTemplate.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ConfigurationTemplate resources.
 */
export interface ConfigurationTemplateState {
    /**
     * The ID of the owner of the configuration template.
     */
    adminOwnerId?: pulumi.Input<string>;
    /**
     * The IDs of the break glass users linked to the configuration template.
     */
    breakGlassUserIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of the configuration template.
     */
    configurationTemplateId?: pulumi.Input<string>;
    /**
     * The IDs of the audit message channels linked to the configuration template.
     */
    linkedAuditMessageChannelIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The IDs of the on-call schedules linked to the configuration template.
     */
    memberOncallScheduleIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the configuration template.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the request configuration linked to the configuration template.
     */
    requestConfigurationId?: pulumi.Input<string>;
    /**
     * The request configuration list of the configuration template. If not provided, the default request configuration will be
     * used.
     */
    requestConfigurations?: pulumi.Input<pulumi.Input<inputs.ConfigurationTemplateRequestConfiguration>[]>;
    /**
     * A bool representing whether or not to require MFA for reviewers to approve requests for this configuration template.
     */
    requireMfaToApprove?: pulumi.Input<boolean>;
    /**
     * A bool representing whether or not to require MFA to connect to resources associated with this configuration template.
     */
    requireMfaToConnect?: pulumi.Input<boolean>;
    /**
     * Configuration for ticket propagation, when enabled, a ticket will be created for access changes related to the users in
     * this resource.
     */
    ticketPropagation?: pulumi.Input<inputs.ConfigurationTemplateTicketPropagation>;
    /**
     * Visibility infomation of an entity.
     */
    visibility?: pulumi.Input<inputs.ConfigurationTemplateVisibility>;
}

/**
 * The set of arguments for constructing a ConfigurationTemplate resource.
 */
export interface ConfigurationTemplateArgs {
    /**
     * The ID of the owner of the configuration template.
     */
    adminOwnerId: pulumi.Input<string>;
    /**
     * The IDs of the break glass users linked to the configuration template.
     */
    breakGlassUserIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The IDs of the audit message channels linked to the configuration template.
     */
    linkedAuditMessageChannelIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The IDs of the on-call schedules linked to the configuration template.
     */
    memberOncallScheduleIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the configuration template.
     */
    name?: pulumi.Input<string>;
    /**
     * The request configuration list of the configuration template. If not provided, the default request configuration will be
     * used.
     */
    requestConfigurations?: pulumi.Input<pulumi.Input<inputs.ConfigurationTemplateRequestConfiguration>[]>;
    /**
     * A bool representing whether or not to require MFA for reviewers to approve requests for this configuration template.
     */
    requireMfaToApprove: pulumi.Input<boolean>;
    /**
     * A bool representing whether or not to require MFA to connect to resources associated with this configuration template.
     */
    requireMfaToConnect: pulumi.Input<boolean>;
    /**
     * Configuration for ticket propagation, when enabled, a ticket will be created for access changes related to the users in
     * this resource.
     */
    ticketPropagation?: pulumi.Input<inputs.ConfigurationTemplateTicketPropagation>;
    /**
     * Visibility infomation of an entity.
     */
    visibility: pulumi.Input<inputs.ConfigurationTemplateVisibility>;
}
