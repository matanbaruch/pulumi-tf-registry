// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getGroupList(args?: GetGroupListArgs, opts?: pulumi.InvokeOptions): Promise<GetGroupListResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("opal:index/getGroupList:getGroupList", {
        "groupIds": args.groupIds,
        "groupName": args.groupName,
        "groupTypeFilter": args.groupTypeFilter,
        "pageSize": args.pageSize,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getGroupList.
 */
export interface GetGroupListArgs {
    groupIds?: string[];
    groupName?: string;
    groupTypeFilter?: string;
    pageSize?: number;
}

/**
 * A collection of values returned by getGroupList.
 */
export interface GetGroupListResult {
    readonly groupIds?: string[];
    readonly groupName?: string;
    readonly groupTypeFilter?: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly pageSize?: number;
    readonly results: outputs.GetGroupListResult[];
}
export function getGroupListOutput(args?: GetGroupListOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetGroupListResult> {
    return pulumi.output(args).apply((a: any) => getGroupList(a, opts))
}

/**
 * A collection of arguments for invoking getGroupList.
 */
export interface GetGroupListOutputArgs {
    groupIds?: pulumi.Input<pulumi.Input<string>[]>;
    groupName?: pulumi.Input<string>;
    groupTypeFilter?: pulumi.Input<string>;
    pageSize?: pulumi.Input<number>;
}
