// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getEvents(args?: GetEventsArgs, opts?: pulumi.InvokeOptions): Promise<GetEventsResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("opal:index/getEvents:getEvents", {
        "actorFilter": args.actorFilter,
        "apiTokenFilter": args.apiTokenFilter,
        "cursor": args.cursor,
        "endDateFilter": args.endDateFilter,
        "eventTypeFilter": args.eventTypeFilter,
        "objectFilter": args.objectFilter,
        "pageSize": args.pageSize,
        "startDateFilter": args.startDateFilter,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getEvents.
 */
export interface GetEventsArgs {
    actorFilter?: string;
    apiTokenFilter?: string;
    cursor?: string;
    endDateFilter?: string;
    eventTypeFilter?: string;
    objectFilter?: string;
    pageSize?: number;
    startDateFilter?: string;
}

/**
 * A collection of values returned by getEvents.
 */
export interface GetEventsResult {
    readonly actorFilter?: string;
    readonly apiTokenFilter?: string;
    readonly cursor?: string;
    readonly endDateFilter?: string;
    readonly eventTypeFilter?: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly next: string;
    readonly objectFilter?: string;
    readonly pageSize?: number;
    readonly previous: string;
    readonly results: outputs.GetEventsResult[];
    readonly startDateFilter?: string;
}
export function getEventsOutput(args?: GetEventsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetEventsResult> {
    return pulumi.output(args).apply((a: any) => getEvents(a, opts))
}

/**
 * A collection of arguments for invoking getEvents.
 */
export interface GetEventsOutputArgs {
    actorFilter?: pulumi.Input<string>;
    apiTokenFilter?: pulumi.Input<string>;
    cursor?: pulumi.Input<string>;
    endDateFilter?: pulumi.Input<string>;
    eventTypeFilter?: pulumi.Input<string>;
    objectFilter?: pulumi.Input<string>;
    pageSize?: pulumi.Input<number>;
    startDateFilter?: pulumi.Input<string>;
}
