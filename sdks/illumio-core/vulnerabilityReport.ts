// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class VulnerabilityReport extends pulumi.CustomResource {
    /**
     * Get an existing VulnerabilityReport resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VulnerabilityReportState, opts?: pulumi.CustomResourceOptions): VulnerabilityReport {
        return new VulnerabilityReport(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'illumio-core:index/vulnerabilityReport:VulnerabilityReport';

    /**
     * Returns true if the given object is an instance of VulnerabilityReport.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VulnerabilityReport {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VulnerabilityReport.__pulumiType;
    }

    /**
     * Boolean value specifies whether a report is authoritative (or) not. Default value: false
     */
    public readonly authoritative!: pulumi.Output<boolean | undefined>;
    /**
     * The time (rfc3339 timestamp) at which this report was created
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * The Href of the user who created this report
     */
    public /*out*/ readonly createdBy!: pulumi.Output<{[key: string]: string}>;
    /**
     * detected_vulnerabilities for Vulnerability report. Max Items allowed: 100000
     */
    public readonly detectedVulnerabilities!: pulumi.Output<outputs.VulnerabilityReportDetectedVulnerability[] | undefined>;
    /**
     * The timestamp (rfc3339 timestamp) at which this report was exported
     */
    public readonly exportedAt!: pulumi.Output<string | undefined>;
    /**
     * The resource(URI) representation of the vulnerability report
     */
    public /*out*/ readonly href!: pulumi.Output<string>;
    /**
     * User-generated name of the vulnerability report. The name should be up to 255 characters
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Number of vulnerabilities that belong to this report
     */
    public /*out*/ readonly numVulnerabilities!: pulumi.Output<number>;
    /**
     * Vulnerability Report ID
     */
    public readonly referenceId!: pulumi.Output<string>;
    /**
     * A string representing the type of the report
     */
    public readonly reportType!: pulumi.Output<string>;
    /**
     * The IPs on which the scan was performed. IPv6 and IPv4. Max Items allowed: 100000
     */
    public readonly scannedIps!: pulumi.Output<string[] | undefined>;
    /**
     * The time (rfc3339 timestamp) at which this report was last updated
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;
    /**
     * The Href of the user who last updated this report
     */
    public /*out*/ readonly updatedBy!: pulumi.Output<{[key: string]: string}>;

    /**
     * Create a VulnerabilityReport resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VulnerabilityReportArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VulnerabilityReportArgs | VulnerabilityReportState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VulnerabilityReportState | undefined;
            resourceInputs["authoritative"] = state ? state.authoritative : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["createdBy"] = state ? state.createdBy : undefined;
            resourceInputs["detectedVulnerabilities"] = state ? state.detectedVulnerabilities : undefined;
            resourceInputs["exportedAt"] = state ? state.exportedAt : undefined;
            resourceInputs["href"] = state ? state.href : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["numVulnerabilities"] = state ? state.numVulnerabilities : undefined;
            resourceInputs["referenceId"] = state ? state.referenceId : undefined;
            resourceInputs["reportType"] = state ? state.reportType : undefined;
            resourceInputs["scannedIps"] = state ? state.scannedIps : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
            resourceInputs["updatedBy"] = state ? state.updatedBy : undefined;
        } else {
            const args = argsOrState as VulnerabilityReportArgs | undefined;
            if ((!args || args.referenceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'referenceId'");
            }
            if ((!args || args.reportType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'reportType'");
            }
            resourceInputs["authoritative"] = args ? args.authoritative : undefined;
            resourceInputs["detectedVulnerabilities"] = args ? args.detectedVulnerabilities : undefined;
            resourceInputs["exportedAt"] = args ? args.exportedAt : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["referenceId"] = args ? args.referenceId : undefined;
            resourceInputs["reportType"] = args ? args.reportType : undefined;
            resourceInputs["scannedIps"] = args ? args.scannedIps : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["createdBy"] = undefined /*out*/;
            resourceInputs["href"] = undefined /*out*/;
            resourceInputs["numVulnerabilities"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
            resourceInputs["updatedBy"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VulnerabilityReport.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VulnerabilityReport resources.
 */
export interface VulnerabilityReportState {
    /**
     * Boolean value specifies whether a report is authoritative (or) not. Default value: false
     */
    authoritative?: pulumi.Input<boolean>;
    /**
     * The time (rfc3339 timestamp) at which this report was created
     */
    createdAt?: pulumi.Input<string>;
    /**
     * The Href of the user who created this report
     */
    createdBy?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * detected_vulnerabilities for Vulnerability report. Max Items allowed: 100000
     */
    detectedVulnerabilities?: pulumi.Input<pulumi.Input<inputs.VulnerabilityReportDetectedVulnerability>[]>;
    /**
     * The timestamp (rfc3339 timestamp) at which this report was exported
     */
    exportedAt?: pulumi.Input<string>;
    /**
     * The resource(URI) representation of the vulnerability report
     */
    href?: pulumi.Input<string>;
    /**
     * User-generated name of the vulnerability report. The name should be up to 255 characters
     */
    name?: pulumi.Input<string>;
    /**
     * Number of vulnerabilities that belong to this report
     */
    numVulnerabilities?: pulumi.Input<number>;
    /**
     * Vulnerability Report ID
     */
    referenceId?: pulumi.Input<string>;
    /**
     * A string representing the type of the report
     */
    reportType?: pulumi.Input<string>;
    /**
     * The IPs on which the scan was performed. IPv6 and IPv4. Max Items allowed: 100000
     */
    scannedIps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The time (rfc3339 timestamp) at which this report was last updated
     */
    updatedAt?: pulumi.Input<string>;
    /**
     * The Href of the user who last updated this report
     */
    updatedBy?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a VulnerabilityReport resource.
 */
export interface VulnerabilityReportArgs {
    /**
     * Boolean value specifies whether a report is authoritative (or) not. Default value: false
     */
    authoritative?: pulumi.Input<boolean>;
    /**
     * detected_vulnerabilities for Vulnerability report. Max Items allowed: 100000
     */
    detectedVulnerabilities?: pulumi.Input<pulumi.Input<inputs.VulnerabilityReportDetectedVulnerability>[]>;
    /**
     * The timestamp (rfc3339 timestamp) at which this report was exported
     */
    exportedAt?: pulumi.Input<string>;
    /**
     * User-generated name of the vulnerability report. The name should be up to 255 characters
     */
    name?: pulumi.Input<string>;
    /**
     * Vulnerability Report ID
     */
    referenceId: pulumi.Input<string>;
    /**
     * A string representing the type of the report
     */
    reportType: pulumi.Input<string>;
    /**
     * The IPs on which the scan was performed. IPv6 and IPv4. Max Items allowed: 100000
     */
    scannedIps?: pulumi.Input<pulumi.Input<string>[]>;
}
