// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class FirewallSettings extends pulumi.CustomResource {
    /**
     * Get an existing FirewallSettings resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FirewallSettingsState, opts?: pulumi.CustomResourceOptions): FirewallSettings {
        return new FirewallSettings(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'illumio-core:index/firewallSettings:FirewallSettings';

    /**
     * Returns true if the given object is an instance of FirewallSettings.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FirewallSettings {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FirewallSettings.__pulumiType;
    }

    /**
     * scopes for reject connections. Either label or label_group can be specified
     */
    public readonly blockedConnectionRejectScopes!: pulumi.Output<outputs.FirewallSettingsBlockedConnectionRejectScope[] | undefined>;
    /**
     * scopes for container inherit host policy. Either label or label_group can be specified
     */
    public readonly containersInheritHostPolicyScopes!: pulumi.Output<outputs.FirewallSettingsContainersInheritHostPolicyScope[] | undefined>;
    /**
     * Timestamp when these firewall settings were first created
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * User who created this resource
     */
    public /*out*/ readonly createdBy!: pulumi.Output<{[key: string]: string}>;
    /**
     * Timestamp when these firewall settings were deleted
     */
    public /*out*/ readonly deletedAt!: pulumi.Output<string>;
    /**
     * User who deleted this resource
     */
    public /*out*/ readonly deletedBy!: pulumi.Output<{[key: string]: string}>;
    /**
     * Firewall coexistence configuration
     */
    public readonly firewallCoexistences!: pulumi.Output<outputs.FirewallSettingsFirewallCoexistence[] | undefined>;
    /**
     * URI of Firewall Settings
     */
    public /*out*/ readonly href!: pulumi.Output<string>;
    /**
     * IKE authentication type to use for IPsec (SecureConnect and Machine Authentication). Allowed values are "psk" and
     * "certificate"
     */
    public readonly ikeAuthenticationType!: pulumi.Output<string>;
    /**
     * scopes for loopback interface. Either label or label_group can be specified
     */
    public readonly loopbackInterfacesInPolicyScopes!: pulumi.Output<outputs.FirewallSettingsLoopbackInterfacesInPolicyScope[] | undefined>;
    /**
     * scopes for static policy. Either label or label_group can be specified
     */
    public readonly staticPolicyScopes!: pulumi.Output<outputs.FirewallSettingsStaticPolicyScope[] | undefined>;
    /**
     * Type of Update
     */
    public /*out*/ readonly updateType!: pulumi.Output<string>;
    /**
     * Timestamp when these firewall settings were last updated
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;
    /**
     * User who last updated this resource
     */
    public /*out*/ readonly updatedBy!: pulumi.Output<{[key: string]: string}>;

    /**
     * Create a FirewallSettings resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: FirewallSettingsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FirewallSettingsArgs | FirewallSettingsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FirewallSettingsState | undefined;
            resourceInputs["blockedConnectionRejectScopes"] = state ? state.blockedConnectionRejectScopes : undefined;
            resourceInputs["containersInheritHostPolicyScopes"] = state ? state.containersInheritHostPolicyScopes : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["createdBy"] = state ? state.createdBy : undefined;
            resourceInputs["deletedAt"] = state ? state.deletedAt : undefined;
            resourceInputs["deletedBy"] = state ? state.deletedBy : undefined;
            resourceInputs["firewallCoexistences"] = state ? state.firewallCoexistences : undefined;
            resourceInputs["href"] = state ? state.href : undefined;
            resourceInputs["ikeAuthenticationType"] = state ? state.ikeAuthenticationType : undefined;
            resourceInputs["loopbackInterfacesInPolicyScopes"] = state ? state.loopbackInterfacesInPolicyScopes : undefined;
            resourceInputs["staticPolicyScopes"] = state ? state.staticPolicyScopes : undefined;
            resourceInputs["updateType"] = state ? state.updateType : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
            resourceInputs["updatedBy"] = state ? state.updatedBy : undefined;
        } else {
            const args = argsOrState as FirewallSettingsArgs | undefined;
            resourceInputs["blockedConnectionRejectScopes"] = args ? args.blockedConnectionRejectScopes : undefined;
            resourceInputs["containersInheritHostPolicyScopes"] = args ? args.containersInheritHostPolicyScopes : undefined;
            resourceInputs["firewallCoexistences"] = args ? args.firewallCoexistences : undefined;
            resourceInputs["ikeAuthenticationType"] = args ? args.ikeAuthenticationType : undefined;
            resourceInputs["loopbackInterfacesInPolicyScopes"] = args ? args.loopbackInterfacesInPolicyScopes : undefined;
            resourceInputs["staticPolicyScopes"] = args ? args.staticPolicyScopes : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["createdBy"] = undefined /*out*/;
            resourceInputs["deletedAt"] = undefined /*out*/;
            resourceInputs["deletedBy"] = undefined /*out*/;
            resourceInputs["href"] = undefined /*out*/;
            resourceInputs["updateType"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
            resourceInputs["updatedBy"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FirewallSettings.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering FirewallSettings resources.
 */
export interface FirewallSettingsState {
    /**
     * scopes for reject connections. Either label or label_group can be specified
     */
    blockedConnectionRejectScopes?: pulumi.Input<pulumi.Input<inputs.FirewallSettingsBlockedConnectionRejectScope>[]>;
    /**
     * scopes for container inherit host policy. Either label or label_group can be specified
     */
    containersInheritHostPolicyScopes?: pulumi.Input<pulumi.Input<inputs.FirewallSettingsContainersInheritHostPolicyScope>[]>;
    /**
     * Timestamp when these firewall settings were first created
     */
    createdAt?: pulumi.Input<string>;
    /**
     * User who created this resource
     */
    createdBy?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Timestamp when these firewall settings were deleted
     */
    deletedAt?: pulumi.Input<string>;
    /**
     * User who deleted this resource
     */
    deletedBy?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Firewall coexistence configuration
     */
    firewallCoexistences?: pulumi.Input<pulumi.Input<inputs.FirewallSettingsFirewallCoexistence>[]>;
    /**
     * URI of Firewall Settings
     */
    href?: pulumi.Input<string>;
    /**
     * IKE authentication type to use for IPsec (SecureConnect and Machine Authentication). Allowed values are "psk" and
     * "certificate"
     */
    ikeAuthenticationType?: pulumi.Input<string>;
    /**
     * scopes for loopback interface. Either label or label_group can be specified
     */
    loopbackInterfacesInPolicyScopes?: pulumi.Input<pulumi.Input<inputs.FirewallSettingsLoopbackInterfacesInPolicyScope>[]>;
    /**
     * scopes for static policy. Either label or label_group can be specified
     */
    staticPolicyScopes?: pulumi.Input<pulumi.Input<inputs.FirewallSettingsStaticPolicyScope>[]>;
    /**
     * Type of Update
     */
    updateType?: pulumi.Input<string>;
    /**
     * Timestamp when these firewall settings were last updated
     */
    updatedAt?: pulumi.Input<string>;
    /**
     * User who last updated this resource
     */
    updatedBy?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a FirewallSettings resource.
 */
export interface FirewallSettingsArgs {
    /**
     * scopes for reject connections. Either label or label_group can be specified
     */
    blockedConnectionRejectScopes?: pulumi.Input<pulumi.Input<inputs.FirewallSettingsBlockedConnectionRejectScope>[]>;
    /**
     * scopes for container inherit host policy. Either label or label_group can be specified
     */
    containersInheritHostPolicyScopes?: pulumi.Input<pulumi.Input<inputs.FirewallSettingsContainersInheritHostPolicyScope>[]>;
    /**
     * Firewall coexistence configuration
     */
    firewallCoexistences?: pulumi.Input<pulumi.Input<inputs.FirewallSettingsFirewallCoexistence>[]>;
    /**
     * IKE authentication type to use for IPsec (SecureConnect and Machine Authentication). Allowed values are "psk" and
     * "certificate"
     */
    ikeAuthenticationType?: pulumi.Input<string>;
    /**
     * scopes for loopback interface. Either label or label_group can be specified
     */
    loopbackInterfacesInPolicyScopes?: pulumi.Input<pulumi.Input<inputs.FirewallSettingsLoopbackInterfacesInPolicyScope>[]>;
    /**
     * scopes for static policy. Either label or label_group can be specified
     */
    staticPolicyScopes?: pulumi.Input<pulumi.Input<inputs.FirewallSettingsStaticPolicyScope>[]>;
}
