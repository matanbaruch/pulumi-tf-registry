// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getWorkload(args: GetWorkloadArgs, opts?: pulumi.InvokeOptions): Promise<GetWorkloadResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("illumio-core:index/getWorkload:getWorkload", {
        "href": args.href,
        "id": args.id,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getWorkload.
 */
export interface GetWorkloadArgs {
    href: string;
    id?: string;
}

/**
 * A collection of values returned by getWorkload.
 */
export interface GetWorkloadResult {
    readonly agentToPceCertificateAuthenticationId: string;
    readonly blockedConnectionAction: string;
    readonly caps: string[];
    readonly containerClusters: outputs.GetWorkloadContainerCluster[];
    readonly containersInheritHostPolicy: boolean;
    readonly createdAt: string;
    readonly createdBy: {[key: string]: string};
    readonly dataCenter: string;
    readonly dataCenterZone: string;
    readonly deleted: boolean;
    readonly deletedAt: string;
    readonly deletedBy: {[key: string]: string};
    readonly description: string;
    readonly detectedVulnerabilities: outputs.GetWorkloadDetectedVulnerability[];
    readonly distinguishedName: string;
    readonly enforcementMode: string;
    readonly externalDataReference: string;
    readonly externalDataSet: string;
    readonly firewallCoexistences: outputs.GetWorkloadFirewallCoexistence[];
    readonly hostname: string;
    readonly href: string;
    readonly id: string;
    readonly ignoredInterfaceNames: string[];
    readonly ikeAuthenticationCertificate: {[key: string]: string};
    readonly interfaces: outputs.GetWorkloadInterface[];
    readonly labels: outputs.GetWorkloadLabel[];
    readonly name: string;
    readonly online: boolean;
    readonly osDetail: string;
    readonly osId: string;
    readonly publicIp: string;
    readonly selectivelyEnforcedServices: outputs.GetWorkloadSelectivelyEnforcedService[];
    readonly servicePrincipalName: string;
    readonly serviceProvider: string;
    readonly services: outputs.GetWorkloadService[];
    readonly updatedAt: string;
    readonly updatedBy: {[key: string]: string};
    readonly ven: {[key: string]: string};
    readonly visibilityLevel: string;
    readonly vulnerabilitiesSummaries: outputs.GetWorkloadVulnerabilitiesSummary[];
}
export function getWorkloadOutput(args: GetWorkloadOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetWorkloadResult> {
    return pulumi.output(args).apply((a: any) => getWorkload(a, opts))
}

/**
 * A collection of arguments for invoking getWorkload.
 */
export interface GetWorkloadOutputArgs {
    href: pulumi.Input<string>;
    id?: pulumi.Input<string>;
}
