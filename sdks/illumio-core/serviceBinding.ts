// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ServiceBinding extends pulumi.CustomResource {
    /**
     * Get an existing ServiceBinding resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServiceBindingState, opts?: pulumi.CustomResourceOptions): ServiceBinding {
        return new ServiceBinding(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'illumio-core:index/serviceBinding:ServiceBinding';

    /**
     * Returns true if the given object is an instance of ServiceBinding.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServiceBinding {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServiceBinding.__pulumiType;
    }

    /**
     * Bound service href
     */
    public /*out*/ readonly boundService!: pulumi.Output<{[key: string]: string}>;
    /**
     * Container Workload href
     */
    public readonly containerWorkload!: pulumi.Output<outputs.ServiceBindingContainerWorkload | undefined>;
    /**
     * External Data reference identifier
     */
    public readonly externalDataReference!: pulumi.Output<string | undefined>;
    /**
     * External Data Set identifier
     */
    public readonly externalDataSet!: pulumi.Output<string | undefined>;
    /**
     * URI of the Service Binding
     */
    public /*out*/ readonly href!: pulumi.Output<string>;
    /**
     * Port Overrides for Service Bindings
     */
    public readonly portOverrides!: pulumi.Output<outputs.ServiceBindingPortOverride[] | undefined>;
    /**
     * Virtual service href
     */
    public readonly virtualService!: pulumi.Output<outputs.ServiceBindingVirtualService>;
    /**
     * Workload Object for Service Bindings
     */
    public readonly workload!: pulumi.Output<outputs.ServiceBindingWorkload | undefined>;

    /**
     * Create a ServiceBinding resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServiceBindingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServiceBindingArgs | ServiceBindingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServiceBindingState | undefined;
            resourceInputs["boundService"] = state ? state.boundService : undefined;
            resourceInputs["containerWorkload"] = state ? state.containerWorkload : undefined;
            resourceInputs["externalDataReference"] = state ? state.externalDataReference : undefined;
            resourceInputs["externalDataSet"] = state ? state.externalDataSet : undefined;
            resourceInputs["href"] = state ? state.href : undefined;
            resourceInputs["portOverrides"] = state ? state.portOverrides : undefined;
            resourceInputs["virtualService"] = state ? state.virtualService : undefined;
            resourceInputs["workload"] = state ? state.workload : undefined;
        } else {
            const args = argsOrState as ServiceBindingArgs | undefined;
            if ((!args || args.virtualService === undefined) && !opts.urn) {
                throw new Error("Missing required property 'virtualService'");
            }
            resourceInputs["containerWorkload"] = args ? args.containerWorkload : undefined;
            resourceInputs["externalDataReference"] = args ? args.externalDataReference : undefined;
            resourceInputs["externalDataSet"] = args ? args.externalDataSet : undefined;
            resourceInputs["portOverrides"] = args ? args.portOverrides : undefined;
            resourceInputs["virtualService"] = args ? args.virtualService : undefined;
            resourceInputs["workload"] = args ? args.workload : undefined;
            resourceInputs["boundService"] = undefined /*out*/;
            resourceInputs["href"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ServiceBinding.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ServiceBinding resources.
 */
export interface ServiceBindingState {
    /**
     * Bound service href
     */
    boundService?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Container Workload href
     */
    containerWorkload?: pulumi.Input<inputs.ServiceBindingContainerWorkload>;
    /**
     * External Data reference identifier
     */
    externalDataReference?: pulumi.Input<string>;
    /**
     * External Data Set identifier
     */
    externalDataSet?: pulumi.Input<string>;
    /**
     * URI of the Service Binding
     */
    href?: pulumi.Input<string>;
    /**
     * Port Overrides for Service Bindings
     */
    portOverrides?: pulumi.Input<pulumi.Input<inputs.ServiceBindingPortOverride>[]>;
    /**
     * Virtual service href
     */
    virtualService?: pulumi.Input<inputs.ServiceBindingVirtualService>;
    /**
     * Workload Object for Service Bindings
     */
    workload?: pulumi.Input<inputs.ServiceBindingWorkload>;
}

/**
 * The set of arguments for constructing a ServiceBinding resource.
 */
export interface ServiceBindingArgs {
    /**
     * Container Workload href
     */
    containerWorkload?: pulumi.Input<inputs.ServiceBindingContainerWorkload>;
    /**
     * External Data reference identifier
     */
    externalDataReference?: pulumi.Input<string>;
    /**
     * External Data Set identifier
     */
    externalDataSet?: pulumi.Input<string>;
    /**
     * Port Overrides for Service Bindings
     */
    portOverrides?: pulumi.Input<pulumi.Input<inputs.ServiceBindingPortOverride>[]>;
    /**
     * Virtual service href
     */
    virtualService: pulumi.Input<inputs.ServiceBindingVirtualService>;
    /**
     * Workload Object for Service Bindings
     */
    workload?: pulumi.Input<inputs.ServiceBindingWorkload>;
}
