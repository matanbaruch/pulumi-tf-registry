// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class VirtualService extends pulumi.CustomResource {
    /**
     * Get an existing VirtualService resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VirtualServiceState, opts?: pulumi.CustomResourceOptions): VirtualService {
        return new VirtualService(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'illumio-core:index/virtualService:VirtualService';

    /**
     * Returns true if the given object is an instance of VirtualService.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VirtualService {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VirtualService.__pulumiType;
    }

    /**
     * Name of the virtual service. Allowed values are "host_only" and "internal_bridge_network"
     */
    public readonly applyTo!: pulumi.Output<string>;
    /**
     * User permissions for the object
     */
    public /*out*/ readonly caps!: pulumi.Output<string[]>;
    /**
     * Timestamp when this virtual service was first created
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * User who created this virtual service
     */
    public /*out*/ readonly createdBy!: pulumi.Output<{[key: string]: string}>;
    /**
     * Timestamp when this virtual service was last deleted
     */
    public /*out*/ readonly deletedAt!: pulumi.Output<string>;
    /**
     * User who deleted this virtual service
     */
    public /*out*/ readonly deletedBy!: pulumi.Output<{[key: string]: string}>;
    /**
     * The long description of the virtual service
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * A unique identifier within the external data source
     */
    public readonly externalDataReference!: pulumi.Output<string | undefined>;
    /**
     * The data source from which a resource originates
     */
    public readonly externalDataSet!: pulumi.Output<string | undefined>;
    /**
     * URI of Virtual Service
     */
    public /*out*/ readonly href!: pulumi.Output<string>;
    /**
     * Array of IPs or CIDRs as IP overrides
     */
    public readonly ipOverrides!: pulumi.Output<string[] | undefined>;
    /**
     * Contained labels
     */
    public readonly labels!: pulumi.Output<outputs.VirtualServiceLabel[] | undefined>;
    /**
     * Name of the virtual service. The name should be between 1 to 255 characters
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * PCE FQDN for this container cluster. Used in Supercluster only
     */
    public /*out*/ readonly pceFqdn!: pulumi.Output<string>;
    /**
     * Associated service
     */
    public readonly service!: pulumi.Output<outputs.VirtualServiceService | undefined>;
    /**
     * List of service address. Specify one of the combination {fqdn, description, port}, {ip, network} or {ip, port}
     */
    public readonly serviceAddresses!: pulumi.Output<outputs.VirtualServiceServiceAddress[] | undefined>;
    /**
     * URI of associated service
     */
    public readonly servicePorts!: pulumi.Output<outputs.VirtualServiceServicePort[] | undefined>;
    /**
     * Update type
     */
    public /*out*/ readonly updateType!: pulumi.Output<string>;
    /**
     * Timestamp when this virtual service was last updated
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;
    /**
     * User who last updated this virtual service
     */
    public /*out*/ readonly updatedBy!: pulumi.Output<{[key: string]: string}>;

    /**
     * Create a VirtualService resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VirtualServiceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VirtualServiceArgs | VirtualServiceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VirtualServiceState | undefined;
            resourceInputs["applyTo"] = state ? state.applyTo : undefined;
            resourceInputs["caps"] = state ? state.caps : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["createdBy"] = state ? state.createdBy : undefined;
            resourceInputs["deletedAt"] = state ? state.deletedAt : undefined;
            resourceInputs["deletedBy"] = state ? state.deletedBy : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["externalDataReference"] = state ? state.externalDataReference : undefined;
            resourceInputs["externalDataSet"] = state ? state.externalDataSet : undefined;
            resourceInputs["href"] = state ? state.href : undefined;
            resourceInputs["ipOverrides"] = state ? state.ipOverrides : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["pceFqdn"] = state ? state.pceFqdn : undefined;
            resourceInputs["service"] = state ? state.service : undefined;
            resourceInputs["serviceAddresses"] = state ? state.serviceAddresses : undefined;
            resourceInputs["servicePorts"] = state ? state.servicePorts : undefined;
            resourceInputs["updateType"] = state ? state.updateType : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
            resourceInputs["updatedBy"] = state ? state.updatedBy : undefined;
        } else {
            const args = argsOrState as VirtualServiceArgs | undefined;
            if ((!args || args.applyTo === undefined) && !opts.urn) {
                throw new Error("Missing required property 'applyTo'");
            }
            resourceInputs["applyTo"] = args ? args.applyTo : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["externalDataReference"] = args ? args.externalDataReference : undefined;
            resourceInputs["externalDataSet"] = args ? args.externalDataSet : undefined;
            resourceInputs["ipOverrides"] = args ? args.ipOverrides : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["service"] = args ? args.service : undefined;
            resourceInputs["serviceAddresses"] = args ? args.serviceAddresses : undefined;
            resourceInputs["servicePorts"] = args ? args.servicePorts : undefined;
            resourceInputs["caps"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["createdBy"] = undefined /*out*/;
            resourceInputs["deletedAt"] = undefined /*out*/;
            resourceInputs["deletedBy"] = undefined /*out*/;
            resourceInputs["href"] = undefined /*out*/;
            resourceInputs["pceFqdn"] = undefined /*out*/;
            resourceInputs["updateType"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
            resourceInputs["updatedBy"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VirtualService.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VirtualService resources.
 */
export interface VirtualServiceState {
    /**
     * Name of the virtual service. Allowed values are "host_only" and "internal_bridge_network"
     */
    applyTo?: pulumi.Input<string>;
    /**
     * User permissions for the object
     */
    caps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Timestamp when this virtual service was first created
     */
    createdAt?: pulumi.Input<string>;
    /**
     * User who created this virtual service
     */
    createdBy?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Timestamp when this virtual service was last deleted
     */
    deletedAt?: pulumi.Input<string>;
    /**
     * User who deleted this virtual service
     */
    deletedBy?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The long description of the virtual service
     */
    description?: pulumi.Input<string>;
    /**
     * A unique identifier within the external data source
     */
    externalDataReference?: pulumi.Input<string>;
    /**
     * The data source from which a resource originates
     */
    externalDataSet?: pulumi.Input<string>;
    /**
     * URI of Virtual Service
     */
    href?: pulumi.Input<string>;
    /**
     * Array of IPs or CIDRs as IP overrides
     */
    ipOverrides?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Contained labels
     */
    labels?: pulumi.Input<pulumi.Input<inputs.VirtualServiceLabel>[]>;
    /**
     * Name of the virtual service. The name should be between 1 to 255 characters
     */
    name?: pulumi.Input<string>;
    /**
     * PCE FQDN for this container cluster. Used in Supercluster only
     */
    pceFqdn?: pulumi.Input<string>;
    /**
     * Associated service
     */
    service?: pulumi.Input<inputs.VirtualServiceService>;
    /**
     * List of service address. Specify one of the combination {fqdn, description, port}, {ip, network} or {ip, port}
     */
    serviceAddresses?: pulumi.Input<pulumi.Input<inputs.VirtualServiceServiceAddress>[]>;
    /**
     * URI of associated service
     */
    servicePorts?: pulumi.Input<pulumi.Input<inputs.VirtualServiceServicePort>[]>;
    /**
     * Update type
     */
    updateType?: pulumi.Input<string>;
    /**
     * Timestamp when this virtual service was last updated
     */
    updatedAt?: pulumi.Input<string>;
    /**
     * User who last updated this virtual service
     */
    updatedBy?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a VirtualService resource.
 */
export interface VirtualServiceArgs {
    /**
     * Name of the virtual service. Allowed values are "host_only" and "internal_bridge_network"
     */
    applyTo: pulumi.Input<string>;
    /**
     * The long description of the virtual service
     */
    description?: pulumi.Input<string>;
    /**
     * A unique identifier within the external data source
     */
    externalDataReference?: pulumi.Input<string>;
    /**
     * The data source from which a resource originates
     */
    externalDataSet?: pulumi.Input<string>;
    /**
     * Array of IPs or CIDRs as IP overrides
     */
    ipOverrides?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Contained labels
     */
    labels?: pulumi.Input<pulumi.Input<inputs.VirtualServiceLabel>[]>;
    /**
     * Name of the virtual service. The name should be between 1 to 255 characters
     */
    name?: pulumi.Input<string>;
    /**
     * Associated service
     */
    service?: pulumi.Input<inputs.VirtualServiceService>;
    /**
     * List of service address. Specify one of the combination {fqdn, description, port}, {ip, network} or {ip, port}
     */
    serviceAddresses?: pulumi.Input<pulumi.Input<inputs.VirtualServiceServiceAddress>[]>;
    /**
     * URI of associated service
     */
    servicePorts?: pulumi.Input<pulumi.Input<inputs.VirtualServiceServicePort>[]>;
}
