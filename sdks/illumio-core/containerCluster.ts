// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ContainerCluster extends pulumi.CustomResource {
    /**
     * Get an existing ContainerCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ContainerClusterState, opts?: pulumi.CustomResourceOptions): ContainerCluster {
        return new ContainerCluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'illumio-core:index/containerCluster:ContainerCluster';

    /**
     * Returns true if the given object is an instance of ContainerCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ContainerCluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ContainerCluster.__pulumiType;
    }

    /**
     * User permissions for the object
     */
    public /*out*/ readonly caps!: pulumi.Output<string[]>;
    /**
     * Convenience variable for the cluster UUID contained in the HREF
     */
    public /*out*/ readonly containerClusterId!: pulumi.Output<string>;
    /**
     * The pairing token for the cluster. Only returned when a cluster is first created
     */
    public /*out*/ readonly containerClusterToken!: pulumi.Output<string>;
    /**
     * The Container Runtime used in this Cluster
     */
    public /*out*/ readonly containerRuntime!: pulumi.Output<string>;
    /**
     * Description of the Cluster
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Errors for Cluster
     */
    public /*out*/ readonly errors!: pulumi.Output<outputs.ContainerClusterError[]>;
    /**
     * URI of the Cluster
     */
    public /*out*/ readonly href!: pulumi.Output<string>;
    /**
     * Kubelink software version string for Cluster
     */
    public /*out*/ readonly kubelinkVersion!: pulumi.Output<string>;
    /**
     * Time the Cluster last connected to
     */
    public /*out*/ readonly lastConnected!: pulumi.Output<string>;
    /**
     * Manager for this Cluster (and version)
     */
    public /*out*/ readonly managerType!: pulumi.Output<string>;
    /**
     * Name of the Cluster. The name should be up to 255 characters
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Nodes of the Cluster
     */
    public /*out*/ readonly nodes!: pulumi.Output<outputs.ContainerClusterNode[]>;
    /**
     * Whether the Cluster is online or not
     */
    public /*out*/ readonly online!: pulumi.Output<boolean>;
    /**
     * PCE FQDN for this container cluster. Used in Supercluster only
     */
    public /*out*/ readonly pceFqdn!: pulumi.Output<string>;

    /**
     * Create a ContainerCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ContainerClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ContainerClusterArgs | ContainerClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ContainerClusterState | undefined;
            resourceInputs["caps"] = state ? state.caps : undefined;
            resourceInputs["containerClusterId"] = state ? state.containerClusterId : undefined;
            resourceInputs["containerClusterToken"] = state ? state.containerClusterToken : undefined;
            resourceInputs["containerRuntime"] = state ? state.containerRuntime : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["errors"] = state ? state.errors : undefined;
            resourceInputs["href"] = state ? state.href : undefined;
            resourceInputs["kubelinkVersion"] = state ? state.kubelinkVersion : undefined;
            resourceInputs["lastConnected"] = state ? state.lastConnected : undefined;
            resourceInputs["managerType"] = state ? state.managerType : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nodes"] = state ? state.nodes : undefined;
            resourceInputs["online"] = state ? state.online : undefined;
            resourceInputs["pceFqdn"] = state ? state.pceFqdn : undefined;
        } else {
            const args = argsOrState as ContainerClusterArgs | undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["caps"] = undefined /*out*/;
            resourceInputs["containerClusterId"] = undefined /*out*/;
            resourceInputs["containerClusterToken"] = undefined /*out*/;
            resourceInputs["containerRuntime"] = undefined /*out*/;
            resourceInputs["errors"] = undefined /*out*/;
            resourceInputs["href"] = undefined /*out*/;
            resourceInputs["kubelinkVersion"] = undefined /*out*/;
            resourceInputs["lastConnected"] = undefined /*out*/;
            resourceInputs["managerType"] = undefined /*out*/;
            resourceInputs["nodes"] = undefined /*out*/;
            resourceInputs["online"] = undefined /*out*/;
            resourceInputs["pceFqdn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["containerClusterToken"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ContainerCluster.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ContainerCluster resources.
 */
export interface ContainerClusterState {
    /**
     * User permissions for the object
     */
    caps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Convenience variable for the cluster UUID contained in the HREF
     */
    containerClusterId?: pulumi.Input<string>;
    /**
     * The pairing token for the cluster. Only returned when a cluster is first created
     */
    containerClusterToken?: pulumi.Input<string>;
    /**
     * The Container Runtime used in this Cluster
     */
    containerRuntime?: pulumi.Input<string>;
    /**
     * Description of the Cluster
     */
    description?: pulumi.Input<string>;
    /**
     * Errors for Cluster
     */
    errors?: pulumi.Input<pulumi.Input<inputs.ContainerClusterError>[]>;
    /**
     * URI of the Cluster
     */
    href?: pulumi.Input<string>;
    /**
     * Kubelink software version string for Cluster
     */
    kubelinkVersion?: pulumi.Input<string>;
    /**
     * Time the Cluster last connected to
     */
    lastConnected?: pulumi.Input<string>;
    /**
     * Manager for this Cluster (and version)
     */
    managerType?: pulumi.Input<string>;
    /**
     * Name of the Cluster. The name should be up to 255 characters
     */
    name?: pulumi.Input<string>;
    /**
     * Nodes of the Cluster
     */
    nodes?: pulumi.Input<pulumi.Input<inputs.ContainerClusterNode>[]>;
    /**
     * Whether the Cluster is online or not
     */
    online?: pulumi.Input<boolean>;
    /**
     * PCE FQDN for this container cluster. Used in Supercluster only
     */
    pceFqdn?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ContainerCluster resource.
 */
export interface ContainerClusterArgs {
    /**
     * Description of the Cluster
     */
    description?: pulumi.Input<string>;
    /**
     * Name of the Cluster. The name should be up to 255 characters
     */
    name?: pulumi.Input<string>;
}
