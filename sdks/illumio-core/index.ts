// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { ContainerClusterArgs, ContainerClusterState } from "./containerCluster";
export type ContainerCluster = import("./containerCluster").ContainerCluster;
export const ContainerCluster: typeof import("./containerCluster").ContainerCluster = null as any;
utilities.lazyLoad(exports, ["ContainerCluster"], () => require("./containerCluster"));

export { ContainerClusterWorkloadProfileArgs, ContainerClusterWorkloadProfileState } from "./containerClusterWorkloadProfile";
export type ContainerClusterWorkloadProfile = import("./containerClusterWorkloadProfile").ContainerClusterWorkloadProfile;
export const ContainerClusterWorkloadProfile: typeof import("./containerClusterWorkloadProfile").ContainerClusterWorkloadProfile = null as any;
utilities.lazyLoad(exports, ["ContainerClusterWorkloadProfile"], () => require("./containerClusterWorkloadProfile"));

export { EnforcementBoundaryArgs, EnforcementBoundaryState } from "./enforcementBoundary";
export type EnforcementBoundary = import("./enforcementBoundary").EnforcementBoundary;
export const EnforcementBoundary: typeof import("./enforcementBoundary").EnforcementBoundary = null as any;
utilities.lazyLoad(exports, ["EnforcementBoundary"], () => require("./enforcementBoundary"));

export { FirewallSettingsArgs, FirewallSettingsState } from "./firewallSettings";
export type FirewallSettings = import("./firewallSettings").FirewallSettings;
export const FirewallSettings: typeof import("./firewallSettings").FirewallSettings = null as any;
utilities.lazyLoad(exports, ["FirewallSettings"], () => require("./firewallSettings"));

export { GetContainerClusterArgs, GetContainerClusterResult, GetContainerClusterOutputArgs } from "./getContainerCluster";
export const getContainerCluster: typeof import("./getContainerCluster").getContainerCluster = null as any;
export const getContainerClusterOutput: typeof import("./getContainerCluster").getContainerClusterOutput = null as any;
utilities.lazyLoad(exports, ["getContainerCluster","getContainerClusterOutput"], () => require("./getContainerCluster"));

export { GetContainerClusterServiceBackendsArgs, GetContainerClusterServiceBackendsResult, GetContainerClusterServiceBackendsOutputArgs } from "./getContainerClusterServiceBackends";
export const getContainerClusterServiceBackends: typeof import("./getContainerClusterServiceBackends").getContainerClusterServiceBackends = null as any;
export const getContainerClusterServiceBackendsOutput: typeof import("./getContainerClusterServiceBackends").getContainerClusterServiceBackendsOutput = null as any;
utilities.lazyLoad(exports, ["getContainerClusterServiceBackends","getContainerClusterServiceBackendsOutput"], () => require("./getContainerClusterServiceBackends"));

export { GetContainerClusterWorkloadProfileArgs, GetContainerClusterWorkloadProfileResult, GetContainerClusterWorkloadProfileOutputArgs } from "./getContainerClusterWorkloadProfile";
export const getContainerClusterWorkloadProfile: typeof import("./getContainerClusterWorkloadProfile").getContainerClusterWorkloadProfile = null as any;
export const getContainerClusterWorkloadProfileOutput: typeof import("./getContainerClusterWorkloadProfile").getContainerClusterWorkloadProfileOutput = null as any;
utilities.lazyLoad(exports, ["getContainerClusterWorkloadProfile","getContainerClusterWorkloadProfileOutput"], () => require("./getContainerClusterWorkloadProfile"));

export { GetContainerClusterWorkloadProfilesArgs, GetContainerClusterWorkloadProfilesResult, GetContainerClusterWorkloadProfilesOutputArgs } from "./getContainerClusterWorkloadProfiles";
export const getContainerClusterWorkloadProfiles: typeof import("./getContainerClusterWorkloadProfiles").getContainerClusterWorkloadProfiles = null as any;
export const getContainerClusterWorkloadProfilesOutput: typeof import("./getContainerClusterWorkloadProfiles").getContainerClusterWorkloadProfilesOutput = null as any;
utilities.lazyLoad(exports, ["getContainerClusterWorkloadProfiles","getContainerClusterWorkloadProfilesOutput"], () => require("./getContainerClusterWorkloadProfiles"));

export { GetContainerClustersArgs, GetContainerClustersResult, GetContainerClustersOutputArgs } from "./getContainerClusters";
export const getContainerClusters: typeof import("./getContainerClusters").getContainerClusters = null as any;
export const getContainerClustersOutput: typeof import("./getContainerClusters").getContainerClustersOutput = null as any;
utilities.lazyLoad(exports, ["getContainerClusters","getContainerClustersOutput"], () => require("./getContainerClusters"));

export { GetEnforcementBoundariesArgs, GetEnforcementBoundariesResult, GetEnforcementBoundariesOutputArgs } from "./getEnforcementBoundaries";
export const getEnforcementBoundaries: typeof import("./getEnforcementBoundaries").getEnforcementBoundaries = null as any;
export const getEnforcementBoundariesOutput: typeof import("./getEnforcementBoundaries").getEnforcementBoundariesOutput = null as any;
utilities.lazyLoad(exports, ["getEnforcementBoundaries","getEnforcementBoundariesOutput"], () => require("./getEnforcementBoundaries"));

export { GetEnforcementBoundaryArgs, GetEnforcementBoundaryResult, GetEnforcementBoundaryOutputArgs } from "./getEnforcementBoundary";
export const getEnforcementBoundary: typeof import("./getEnforcementBoundary").getEnforcementBoundary = null as any;
export const getEnforcementBoundaryOutput: typeof import("./getEnforcementBoundary").getEnforcementBoundaryOutput = null as any;
utilities.lazyLoad(exports, ["getEnforcementBoundary","getEnforcementBoundaryOutput"], () => require("./getEnforcementBoundary"));

export { GetFirewallSettingsArgs, GetFirewallSettingsResult, GetFirewallSettingsOutputArgs } from "./getFirewallSettings";
export const getFirewallSettings: typeof import("./getFirewallSettings").getFirewallSettings = null as any;
export const getFirewallSettingsOutput: typeof import("./getFirewallSettings").getFirewallSettingsOutput = null as any;
utilities.lazyLoad(exports, ["getFirewallSettings","getFirewallSettingsOutput"], () => require("./getFirewallSettings"));

export { GetIpListArgs, GetIpListResult, GetIpListOutputArgs } from "./getIpList";
export const getIpList: typeof import("./getIpList").getIpList = null as any;
export const getIpListOutput: typeof import("./getIpList").getIpListOutput = null as any;
utilities.lazyLoad(exports, ["getIpList","getIpListOutput"], () => require("./getIpList"));

export { GetIpListsArgs, GetIpListsResult, GetIpListsOutputArgs } from "./getIpLists";
export const getIpLists: typeof import("./getIpLists").getIpLists = null as any;
export const getIpListsOutput: typeof import("./getIpLists").getIpListsOutput = null as any;
utilities.lazyLoad(exports, ["getIpLists","getIpListsOutput"], () => require("./getIpLists"));

export { GetLabelArgs, GetLabelResult, GetLabelOutputArgs } from "./getLabel";
export const getLabel: typeof import("./getLabel").getLabel = null as any;
export const getLabelOutput: typeof import("./getLabel").getLabelOutput = null as any;
utilities.lazyLoad(exports, ["getLabel","getLabelOutput"], () => require("./getLabel"));

export { GetLabelGroupArgs, GetLabelGroupResult, GetLabelGroupOutputArgs } from "./getLabelGroup";
export const getLabelGroup: typeof import("./getLabelGroup").getLabelGroup = null as any;
export const getLabelGroupOutput: typeof import("./getLabelGroup").getLabelGroupOutput = null as any;
utilities.lazyLoad(exports, ["getLabelGroup","getLabelGroupOutput"], () => require("./getLabelGroup"));

export { GetLabelGroupsArgs, GetLabelGroupsResult, GetLabelGroupsOutputArgs } from "./getLabelGroups";
export const getLabelGroups: typeof import("./getLabelGroups").getLabelGroups = null as any;
export const getLabelGroupsOutput: typeof import("./getLabelGroups").getLabelGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getLabelGroups","getLabelGroupsOutput"], () => require("./getLabelGroups"));

export { GetLabelTypeArgs, GetLabelTypeResult, GetLabelTypeOutputArgs } from "./getLabelType";
export const getLabelType: typeof import("./getLabelType").getLabelType = null as any;
export const getLabelTypeOutput: typeof import("./getLabelType").getLabelTypeOutput = null as any;
utilities.lazyLoad(exports, ["getLabelType","getLabelTypeOutput"], () => require("./getLabelType"));

export { GetLabelTypesArgs, GetLabelTypesResult, GetLabelTypesOutputArgs } from "./getLabelTypes";
export const getLabelTypes: typeof import("./getLabelTypes").getLabelTypes = null as any;
export const getLabelTypesOutput: typeof import("./getLabelTypes").getLabelTypesOutput = null as any;
utilities.lazyLoad(exports, ["getLabelTypes","getLabelTypesOutput"], () => require("./getLabelTypes"));

export { GetLabelsArgs, GetLabelsResult, GetLabelsOutputArgs } from "./getLabels";
export const getLabels: typeof import("./getLabels").getLabels = null as any;
export const getLabelsOutput: typeof import("./getLabels").getLabelsOutput = null as any;
utilities.lazyLoad(exports, ["getLabels","getLabelsOutput"], () => require("./getLabels"));

export { GetOrganizationSettingsArgs, GetOrganizationSettingsResult, GetOrganizationSettingsOutputArgs } from "./getOrganizationSettings";
export const getOrganizationSettings: typeof import("./getOrganizationSettings").getOrganizationSettings = null as any;
export const getOrganizationSettingsOutput: typeof import("./getOrganizationSettings").getOrganizationSettingsOutput = null as any;
utilities.lazyLoad(exports, ["getOrganizationSettings","getOrganizationSettingsOutput"], () => require("./getOrganizationSettings"));

export { GetPairingProfileArgs, GetPairingProfileResult, GetPairingProfileOutputArgs } from "./getPairingProfile";
export const getPairingProfile: typeof import("./getPairingProfile").getPairingProfile = null as any;
export const getPairingProfileOutput: typeof import("./getPairingProfile").getPairingProfileOutput = null as any;
utilities.lazyLoad(exports, ["getPairingProfile","getPairingProfileOutput"], () => require("./getPairingProfile"));

export { GetPairingProfilesArgs, GetPairingProfilesResult, GetPairingProfilesOutputArgs } from "./getPairingProfiles";
export const getPairingProfiles: typeof import("./getPairingProfiles").getPairingProfiles = null as any;
export const getPairingProfilesOutput: typeof import("./getPairingProfiles").getPairingProfilesOutput = null as any;
utilities.lazyLoad(exports, ["getPairingProfiles","getPairingProfilesOutput"], () => require("./getPairingProfiles"));

export { GetRuleSetArgs, GetRuleSetResult, GetRuleSetOutputArgs } from "./getRuleSet";
export const getRuleSet: typeof import("./getRuleSet").getRuleSet = null as any;
export const getRuleSetOutput: typeof import("./getRuleSet").getRuleSetOutput = null as any;
utilities.lazyLoad(exports, ["getRuleSet","getRuleSetOutput"], () => require("./getRuleSet"));

export { GetRuleSetsArgs, GetRuleSetsResult, GetRuleSetsOutputArgs } from "./getRuleSets";
export const getRuleSets: typeof import("./getRuleSets").getRuleSets = null as any;
export const getRuleSetsOutput: typeof import("./getRuleSets").getRuleSetsOutput = null as any;
utilities.lazyLoad(exports, ["getRuleSets","getRuleSetsOutput"], () => require("./getRuleSets"));

export { GetSecurityRuleArgs, GetSecurityRuleResult, GetSecurityRuleOutputArgs } from "./getSecurityRule";
export const getSecurityRule: typeof import("./getSecurityRule").getSecurityRule = null as any;
export const getSecurityRuleOutput: typeof import("./getSecurityRule").getSecurityRuleOutput = null as any;
utilities.lazyLoad(exports, ["getSecurityRule","getSecurityRuleOutput"], () => require("./getSecurityRule"));

export { GetSecurityRulesArgs, GetSecurityRulesResult, GetSecurityRulesOutputArgs } from "./getSecurityRules";
export const getSecurityRules: typeof import("./getSecurityRules").getSecurityRules = null as any;
export const getSecurityRulesOutput: typeof import("./getSecurityRules").getSecurityRulesOutput = null as any;
utilities.lazyLoad(exports, ["getSecurityRules","getSecurityRulesOutput"], () => require("./getSecurityRules"));

export { GetServiceArgs, GetServiceResult, GetServiceOutputArgs } from "./getService";
export const getService: typeof import("./getService").getService = null as any;
export const getServiceOutput: typeof import("./getService").getServiceOutput = null as any;
utilities.lazyLoad(exports, ["getService","getServiceOutput"], () => require("./getService"));

export { GetServiceBindingArgs, GetServiceBindingResult, GetServiceBindingOutputArgs } from "./getServiceBinding";
export const getServiceBinding: typeof import("./getServiceBinding").getServiceBinding = null as any;
export const getServiceBindingOutput: typeof import("./getServiceBinding").getServiceBindingOutput = null as any;
utilities.lazyLoad(exports, ["getServiceBinding","getServiceBindingOutput"], () => require("./getServiceBinding"));

export { GetServiceBindingsArgs, GetServiceBindingsResult, GetServiceBindingsOutputArgs } from "./getServiceBindings";
export const getServiceBindings: typeof import("./getServiceBindings").getServiceBindings = null as any;
export const getServiceBindingsOutput: typeof import("./getServiceBindings").getServiceBindingsOutput = null as any;
utilities.lazyLoad(exports, ["getServiceBindings","getServiceBindingsOutput"], () => require("./getServiceBindings"));

export { GetServicesArgs, GetServicesResult, GetServicesOutputArgs } from "./getServices";
export const getServices: typeof import("./getServices").getServices = null as any;
export const getServicesOutput: typeof import("./getServices").getServicesOutput = null as any;
utilities.lazyLoad(exports, ["getServices","getServicesOutput"], () => require("./getServices"));

export { GetSyslogDestinationArgs, GetSyslogDestinationResult, GetSyslogDestinationOutputArgs } from "./getSyslogDestination";
export const getSyslogDestination: typeof import("./getSyslogDestination").getSyslogDestination = null as any;
export const getSyslogDestinationOutput: typeof import("./getSyslogDestination").getSyslogDestinationOutput = null as any;
utilities.lazyLoad(exports, ["getSyslogDestination","getSyslogDestinationOutput"], () => require("./getSyslogDestination"));

export { GetSyslogDestinationsArgs, GetSyslogDestinationsResult, GetSyslogDestinationsOutputArgs } from "./getSyslogDestinations";
export const getSyslogDestinations: typeof import("./getSyslogDestinations").getSyslogDestinations = null as any;
export const getSyslogDestinationsOutput: typeof import("./getSyslogDestinations").getSyslogDestinationsOutput = null as any;
utilities.lazyLoad(exports, ["getSyslogDestinations","getSyslogDestinationsOutput"], () => require("./getSyslogDestinations"));

export { GetTrafficCollectorSettingsArgs, GetTrafficCollectorSettingsResult, GetTrafficCollectorSettingsOutputArgs } from "./getTrafficCollectorSettings";
export const getTrafficCollectorSettings: typeof import("./getTrafficCollectorSettings").getTrafficCollectorSettings = null as any;
export const getTrafficCollectorSettingsOutput: typeof import("./getTrafficCollectorSettings").getTrafficCollectorSettingsOutput = null as any;
utilities.lazyLoad(exports, ["getTrafficCollectorSettings","getTrafficCollectorSettingsOutput"], () => require("./getTrafficCollectorSettings"));

export { GetTrafficCollectorSettingsListArgs, GetTrafficCollectorSettingsListResult, GetTrafficCollectorSettingsListOutputArgs } from "./getTrafficCollectorSettingsList";
export const getTrafficCollectorSettingsList: typeof import("./getTrafficCollectorSettingsList").getTrafficCollectorSettingsList = null as any;
export const getTrafficCollectorSettingsListOutput: typeof import("./getTrafficCollectorSettingsList").getTrafficCollectorSettingsListOutput = null as any;
utilities.lazyLoad(exports, ["getTrafficCollectorSettingsList","getTrafficCollectorSettingsListOutput"], () => require("./getTrafficCollectorSettingsList"));

export { GetVenArgs, GetVenResult, GetVenOutputArgs } from "./getVen";
export const getVen: typeof import("./getVen").getVen = null as any;
export const getVenOutput: typeof import("./getVen").getVenOutput = null as any;
utilities.lazyLoad(exports, ["getVen","getVenOutput"], () => require("./getVen"));

export { GetVensArgs, GetVensResult, GetVensOutputArgs } from "./getVens";
export const getVens: typeof import("./getVens").getVens = null as any;
export const getVensOutput: typeof import("./getVens").getVensOutput = null as any;
utilities.lazyLoad(exports, ["getVens","getVensOutput"], () => require("./getVens"));

export { GetVirtualServiceArgs, GetVirtualServiceResult, GetVirtualServiceOutputArgs } from "./getVirtualService";
export const getVirtualService: typeof import("./getVirtualService").getVirtualService = null as any;
export const getVirtualServiceOutput: typeof import("./getVirtualService").getVirtualServiceOutput = null as any;
utilities.lazyLoad(exports, ["getVirtualService","getVirtualServiceOutput"], () => require("./getVirtualService"));

export { GetVirtualServicesArgs, GetVirtualServicesResult, GetVirtualServicesOutputArgs } from "./getVirtualServices";
export const getVirtualServices: typeof import("./getVirtualServices").getVirtualServices = null as any;
export const getVirtualServicesOutput: typeof import("./getVirtualServices").getVirtualServicesOutput = null as any;
utilities.lazyLoad(exports, ["getVirtualServices","getVirtualServicesOutput"], () => require("./getVirtualServices"));

export { GetVulnerabilitiesArgs, GetVulnerabilitiesResult, GetVulnerabilitiesOutputArgs } from "./getVulnerabilities";
export const getVulnerabilities: typeof import("./getVulnerabilities").getVulnerabilities = null as any;
export const getVulnerabilitiesOutput: typeof import("./getVulnerabilities").getVulnerabilitiesOutput = null as any;
utilities.lazyLoad(exports, ["getVulnerabilities","getVulnerabilitiesOutput"], () => require("./getVulnerabilities"));

export { GetVulnerabilityArgs, GetVulnerabilityResult, GetVulnerabilityOutputArgs } from "./getVulnerability";
export const getVulnerability: typeof import("./getVulnerability").getVulnerability = null as any;
export const getVulnerabilityOutput: typeof import("./getVulnerability").getVulnerabilityOutput = null as any;
utilities.lazyLoad(exports, ["getVulnerability","getVulnerabilityOutput"], () => require("./getVulnerability"));

export { GetVulnerabilityReportArgs, GetVulnerabilityReportResult, GetVulnerabilityReportOutputArgs } from "./getVulnerabilityReport";
export const getVulnerabilityReport: typeof import("./getVulnerabilityReport").getVulnerabilityReport = null as any;
export const getVulnerabilityReportOutput: typeof import("./getVulnerabilityReport").getVulnerabilityReportOutput = null as any;
utilities.lazyLoad(exports, ["getVulnerabilityReport","getVulnerabilityReportOutput"], () => require("./getVulnerabilityReport"));

export { GetVulnerabilityReportsArgs, GetVulnerabilityReportsResult, GetVulnerabilityReportsOutputArgs } from "./getVulnerabilityReports";
export const getVulnerabilityReports: typeof import("./getVulnerabilityReports").getVulnerabilityReports = null as any;
export const getVulnerabilityReportsOutput: typeof import("./getVulnerabilityReports").getVulnerabilityReportsOutput = null as any;
utilities.lazyLoad(exports, ["getVulnerabilityReports","getVulnerabilityReportsOutput"], () => require("./getVulnerabilityReports"));

export { GetWorkloadArgs, GetWorkloadResult, GetWorkloadOutputArgs } from "./getWorkload";
export const getWorkload: typeof import("./getWorkload").getWorkload = null as any;
export const getWorkloadOutput: typeof import("./getWorkload").getWorkloadOutput = null as any;
utilities.lazyLoad(exports, ["getWorkload","getWorkloadOutput"], () => require("./getWorkload"));

export { GetWorkloadInterfacesArgs, GetWorkloadInterfacesResult, GetWorkloadInterfacesOutputArgs } from "./getWorkloadInterfaces";
export const getWorkloadInterfaces: typeof import("./getWorkloadInterfaces").getWorkloadInterfaces = null as any;
export const getWorkloadInterfacesOutput: typeof import("./getWorkloadInterfaces").getWorkloadInterfacesOutput = null as any;
utilities.lazyLoad(exports, ["getWorkloadInterfaces","getWorkloadInterfacesOutput"], () => require("./getWorkloadInterfaces"));

export { GetWorkloadSettingsArgs, GetWorkloadSettingsResult, GetWorkloadSettingsOutputArgs } from "./getWorkloadSettings";
export const getWorkloadSettings: typeof import("./getWorkloadSettings").getWorkloadSettings = null as any;
export const getWorkloadSettingsOutput: typeof import("./getWorkloadSettings").getWorkloadSettingsOutput = null as any;
utilities.lazyLoad(exports, ["getWorkloadSettings","getWorkloadSettingsOutput"], () => require("./getWorkloadSettings"));

export { GetWorkloadsArgs, GetWorkloadsResult, GetWorkloadsOutputArgs } from "./getWorkloads";
export const getWorkloads: typeof import("./getWorkloads").getWorkloads = null as any;
export const getWorkloadsOutput: typeof import("./getWorkloads").getWorkloadsOutput = null as any;
utilities.lazyLoad(exports, ["getWorkloads","getWorkloadsOutput"], () => require("./getWorkloads"));

export { IpListArgs, IpListState } from "./ipList";
export type IpList = import("./ipList").IpList;
export const IpList: typeof import("./ipList").IpList = null as any;
utilities.lazyLoad(exports, ["IpList"], () => require("./ipList"));

export { LabelArgs, LabelState } from "./label";
export type Label = import("./label").Label;
export const Label: typeof import("./label").Label = null as any;
utilities.lazyLoad(exports, ["Label"], () => require("./label"));

export { LabelGroupArgs, LabelGroupState } from "./labelGroup";
export type LabelGroup = import("./labelGroup").LabelGroup;
export const LabelGroup: typeof import("./labelGroup").LabelGroup = null as any;
utilities.lazyLoad(exports, ["LabelGroup"], () => require("./labelGroup"));

export { LabelTypeArgs, LabelTypeState } from "./labelType";
export type LabelType = import("./labelType").LabelType;
export const LabelType: typeof import("./labelType").LabelType = null as any;
utilities.lazyLoad(exports, ["LabelType"], () => require("./labelType"));

export { ManagedWorkloadArgs, ManagedWorkloadState } from "./managedWorkload";
export type ManagedWorkload = import("./managedWorkload").ManagedWorkload;
export const ManagedWorkload: typeof import("./managedWorkload").ManagedWorkload = null as any;
utilities.lazyLoad(exports, ["ManagedWorkload"], () => require("./managedWorkload"));

export { OrganizationSettingsArgs, OrganizationSettingsState } from "./organizationSettings";
export type OrganizationSettings = import("./organizationSettings").OrganizationSettings;
export const OrganizationSettings: typeof import("./organizationSettings").OrganizationSettings = null as any;
utilities.lazyLoad(exports, ["OrganizationSettings"], () => require("./organizationSettings"));

export { PairingKeysArgs, PairingKeysState } from "./pairingKeys";
export type PairingKeys = import("./pairingKeys").PairingKeys;
export const PairingKeys: typeof import("./pairingKeys").PairingKeys = null as any;
utilities.lazyLoad(exports, ["PairingKeys"], () => require("./pairingKeys"));

export { PairingProfileArgs, PairingProfileState } from "./pairingProfile";
export type PairingProfile = import("./pairingProfile").PairingProfile;
export const PairingProfile: typeof import("./pairingProfile").PairingProfile = null as any;
utilities.lazyLoad(exports, ["PairingProfile"], () => require("./pairingProfile"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { RuleSetArgs, RuleSetState } from "./ruleSet";
export type RuleSet = import("./ruleSet").RuleSet;
export const RuleSet: typeof import("./ruleSet").RuleSet = null as any;
utilities.lazyLoad(exports, ["RuleSet"], () => require("./ruleSet"));

export { SecurityRuleArgs, SecurityRuleState } from "./securityRule";
export type SecurityRule = import("./securityRule").SecurityRule;
export const SecurityRule: typeof import("./securityRule").SecurityRule = null as any;
utilities.lazyLoad(exports, ["SecurityRule"], () => require("./securityRule"));

export { ServiceArgs, ServiceState } from "./service";
export type Service = import("./service").Service;
export const Service: typeof import("./service").Service = null as any;
utilities.lazyLoad(exports, ["Service"], () => require("./service"));

export { ServiceBindingArgs, ServiceBindingState } from "./serviceBinding";
export type ServiceBinding = import("./serviceBinding").ServiceBinding;
export const ServiceBinding: typeof import("./serviceBinding").ServiceBinding = null as any;
utilities.lazyLoad(exports, ["ServiceBinding"], () => require("./serviceBinding"));

export { SyslogDestinationArgs, SyslogDestinationState } from "./syslogDestination";
export type SyslogDestination = import("./syslogDestination").SyslogDestination;
export const SyslogDestination: typeof import("./syslogDestination").SyslogDestination = null as any;
utilities.lazyLoad(exports, ["SyslogDestination"], () => require("./syslogDestination"));

export { TrafficCollectorSettingsArgs, TrafficCollectorSettingsState } from "./trafficCollectorSettings";
export type TrafficCollectorSettings = import("./trafficCollectorSettings").TrafficCollectorSettings;
export const TrafficCollectorSettings: typeof import("./trafficCollectorSettings").TrafficCollectorSettings = null as any;
utilities.lazyLoad(exports, ["TrafficCollectorSettings"], () => require("./trafficCollectorSettings"));

export { UnmanagedWorkloadArgs, UnmanagedWorkloadState } from "./unmanagedWorkload";
export type UnmanagedWorkload = import("./unmanagedWorkload").UnmanagedWorkload;
export const UnmanagedWorkload: typeof import("./unmanagedWorkload").UnmanagedWorkload = null as any;
utilities.lazyLoad(exports, ["UnmanagedWorkload"], () => require("./unmanagedWorkload"));

export { VenArgs, VenState } from "./ven";
export type Ven = import("./ven").Ven;
export const Ven: typeof import("./ven").Ven = null as any;
utilities.lazyLoad(exports, ["Ven"], () => require("./ven"));

export { VirtualServiceArgs, VirtualServiceState } from "./virtualService";
export type VirtualService = import("./virtualService").VirtualService;
export const VirtualService: typeof import("./virtualService").VirtualService = null as any;
utilities.lazyLoad(exports, ["VirtualService"], () => require("./virtualService"));

export { VulnerabilitiesArgs, VulnerabilitiesState } from "./vulnerabilities";
export type Vulnerabilities = import("./vulnerabilities").Vulnerabilities;
export const Vulnerabilities: typeof import("./vulnerabilities").Vulnerabilities = null as any;
utilities.lazyLoad(exports, ["Vulnerabilities"], () => require("./vulnerabilities"));

export { VulnerabilityReportArgs, VulnerabilityReportState } from "./vulnerabilityReport";
export type VulnerabilityReport = import("./vulnerabilityReport").VulnerabilityReport;
export const VulnerabilityReport: typeof import("./vulnerabilityReport").VulnerabilityReport = null as any;
utilities.lazyLoad(exports, ["VulnerabilityReport"], () => require("./vulnerabilityReport"));

export { WorkloadSettingsArgs, WorkloadSettingsState } from "./workloadSettings";
export type WorkloadSettings = import("./workloadSettings").WorkloadSettings;
export const WorkloadSettings: typeof import("./workloadSettings").WorkloadSettings = null as any;
utilities.lazyLoad(exports, ["WorkloadSettings"], () => require("./workloadSettings"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "illumio-core:index/containerCluster:ContainerCluster":
                return new ContainerCluster(name, <any>undefined, { urn })
            case "illumio-core:index/containerClusterWorkloadProfile:ContainerClusterWorkloadProfile":
                return new ContainerClusterWorkloadProfile(name, <any>undefined, { urn })
            case "illumio-core:index/enforcementBoundary:EnforcementBoundary":
                return new EnforcementBoundary(name, <any>undefined, { urn })
            case "illumio-core:index/firewallSettings:FirewallSettings":
                return new FirewallSettings(name, <any>undefined, { urn })
            case "illumio-core:index/ipList:IpList":
                return new IpList(name, <any>undefined, { urn })
            case "illumio-core:index/label:Label":
                return new Label(name, <any>undefined, { urn })
            case "illumio-core:index/labelGroup:LabelGroup":
                return new LabelGroup(name, <any>undefined, { urn })
            case "illumio-core:index/labelType:LabelType":
                return new LabelType(name, <any>undefined, { urn })
            case "illumio-core:index/managedWorkload:ManagedWorkload":
                return new ManagedWorkload(name, <any>undefined, { urn })
            case "illumio-core:index/organizationSettings:OrganizationSettings":
                return new OrganizationSettings(name, <any>undefined, { urn })
            case "illumio-core:index/pairingKeys:PairingKeys":
                return new PairingKeys(name, <any>undefined, { urn })
            case "illumio-core:index/pairingProfile:PairingProfile":
                return new PairingProfile(name, <any>undefined, { urn })
            case "illumio-core:index/ruleSet:RuleSet":
                return new RuleSet(name, <any>undefined, { urn })
            case "illumio-core:index/securityRule:SecurityRule":
                return new SecurityRule(name, <any>undefined, { urn })
            case "illumio-core:index/service:Service":
                return new Service(name, <any>undefined, { urn })
            case "illumio-core:index/serviceBinding:ServiceBinding":
                return new ServiceBinding(name, <any>undefined, { urn })
            case "illumio-core:index/syslogDestination:SyslogDestination":
                return new SyslogDestination(name, <any>undefined, { urn })
            case "illumio-core:index/trafficCollectorSettings:TrafficCollectorSettings":
                return new TrafficCollectorSettings(name, <any>undefined, { urn })
            case "illumio-core:index/unmanagedWorkload:UnmanagedWorkload":
                return new UnmanagedWorkload(name, <any>undefined, { urn })
            case "illumio-core:index/ven:Ven":
                return new Ven(name, <any>undefined, { urn })
            case "illumio-core:index/virtualService:VirtualService":
                return new VirtualService(name, <any>undefined, { urn })
            case "illumio-core:index/vulnerabilities:Vulnerabilities":
                return new Vulnerabilities(name, <any>undefined, { urn })
            case "illumio-core:index/vulnerabilityReport:VulnerabilityReport":
                return new VulnerabilityReport(name, <any>undefined, { urn })
            case "illumio-core:index/workloadSettings:WorkloadSettings":
                return new WorkloadSettings(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("illumio-core", "index/containerCluster", _module)
pulumi.runtime.registerResourceModule("illumio-core", "index/containerClusterWorkloadProfile", _module)
pulumi.runtime.registerResourceModule("illumio-core", "index/enforcementBoundary", _module)
pulumi.runtime.registerResourceModule("illumio-core", "index/firewallSettings", _module)
pulumi.runtime.registerResourceModule("illumio-core", "index/ipList", _module)
pulumi.runtime.registerResourceModule("illumio-core", "index/label", _module)
pulumi.runtime.registerResourceModule("illumio-core", "index/labelGroup", _module)
pulumi.runtime.registerResourceModule("illumio-core", "index/labelType", _module)
pulumi.runtime.registerResourceModule("illumio-core", "index/managedWorkload", _module)
pulumi.runtime.registerResourceModule("illumio-core", "index/organizationSettings", _module)
pulumi.runtime.registerResourceModule("illumio-core", "index/pairingKeys", _module)
pulumi.runtime.registerResourceModule("illumio-core", "index/pairingProfile", _module)
pulumi.runtime.registerResourceModule("illumio-core", "index/ruleSet", _module)
pulumi.runtime.registerResourceModule("illumio-core", "index/securityRule", _module)
pulumi.runtime.registerResourceModule("illumio-core", "index/service", _module)
pulumi.runtime.registerResourceModule("illumio-core", "index/serviceBinding", _module)
pulumi.runtime.registerResourceModule("illumio-core", "index/syslogDestination", _module)
pulumi.runtime.registerResourceModule("illumio-core", "index/trafficCollectorSettings", _module)
pulumi.runtime.registerResourceModule("illumio-core", "index/unmanagedWorkload", _module)
pulumi.runtime.registerResourceModule("illumio-core", "index/ven", _module)
pulumi.runtime.registerResourceModule("illumio-core", "index/virtualService", _module)
pulumi.runtime.registerResourceModule("illumio-core", "index/vulnerabilities", _module)
pulumi.runtime.registerResourceModule("illumio-core", "index/vulnerabilityReport", _module)
pulumi.runtime.registerResourceModule("illumio-core", "index/workloadSettings", _module)
pulumi.runtime.registerResourcePackage("illumio-core", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:illumio-core") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
