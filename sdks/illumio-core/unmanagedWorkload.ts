// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class UnmanagedWorkload extends pulumi.CustomResource {
    /**
     * Get an existing UnmanagedWorkload resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UnmanagedWorkloadState, opts?: pulumi.CustomResourceOptions): UnmanagedWorkload {
        return new UnmanagedWorkload(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'illumio-core:index/unmanagedWorkload:UnmanagedWorkload';

    /**
     * Returns true if the given object is an instance of UnmanagedWorkload.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is UnmanagedWorkload {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === UnmanagedWorkload.__pulumiType;
    }

    /**
     * PKI Certificate identifier to be used by the PCE for authenticating the VEN. The ID should be between 1 to 255
     * characters
     */
    public readonly agentToPceCertificateAuthenticationId!: pulumi.Output<string | undefined>;
    /**
     * Blocked Connection Action for Workload
     */
    public /*out*/ readonly blockedConnectionAction!: pulumi.Output<string>;
    /**
     * User permissions for the object
     */
    public /*out*/ readonly caps!: pulumi.Output<string[]>;
    /**
     * Container Cluster for Workload
     */
    public /*out*/ readonly containerClusters!: pulumi.Output<outputs.UnmanagedWorkloadContainerCluster[]>;
    /**
     * This workload will apply the policy it receives both to itself and the containers hosted by it
     */
    public /*out*/ readonly containersInheritHostPolicy!: pulumi.Output<boolean>;
    /**
     * Timestamp when this workload was first created
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * User who created this workload
     */
    public /*out*/ readonly createdBy!: pulumi.Output<{[key: string]: string}>;
    /**
     * Data center for Workload. The data_center should be up to 255 characters
     */
    public readonly dataCenter!: pulumi.Output<string | undefined>;
    /**
     * Data center Zone for Workload. The data_center_zone should be up to 255 characters
     */
    public readonly dataCenterZone!: pulumi.Output<string | undefined>;
    /**
     * This indicates that the workload has been deleted
     */
    public /*out*/ readonly deleted!: pulumi.Output<boolean>;
    /**
     * Timestamp when this workload was last deleted
     */
    public /*out*/ readonly deletedAt!: pulumi.Output<string>;
    /**
     * User who deleted this workload
     */
    public /*out*/ readonly deletedBy!: pulumi.Output<{[key: string]: string}>;
    /**
     * The long description of the workload
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Detected Vulnerabilities for Workload
     */
    public /*out*/ readonly detectedVulnerabilities!: pulumi.Output<outputs.UnmanagedWorkloadDetectedVulnerability[]>;
    /**
     * X.509 Subject distinguished name. The name should be up to 255 characters
     */
    public readonly distinguishedName!: pulumi.Output<string | undefined>;
    /**
     * Enforcement mode of workload(s) to return. Allowed values for enforcement modes are "idle","visibility_only","full", and
     * "selective". Default value: "visibility_only"
     */
    public readonly enforcementMode!: pulumi.Output<string | undefined>;
    /**
     * A unique identifier within the external data source
     */
    public readonly externalDataReference!: pulumi.Output<string | undefined>;
    /**
     * The data source from which a resource originates
     */
    public readonly externalDataSet!: pulumi.Output<string | undefined>;
    /**
     * Firewall coexistence mode for Workload
     */
    public /*out*/ readonly firewallCoexistences!: pulumi.Output<outputs.UnmanagedWorkloadFirewallCoexistence[]>;
    /**
     * The hostname of this workload. The hostname should be up to 255 characters
     */
    public readonly hostname!: pulumi.Output<string | undefined>;
    /**
     * URI of the Workload
     */
    public /*out*/ readonly href!: pulumi.Output<string>;
    /**
     * Ignored Interface Names for Workload
     */
    public /*out*/ readonly ignoredInterfaceNames!: pulumi.Output<string[]>;
    /**
     * IKE authentication certificate for certificate-based Secure Connect and Machine Auth
     */
    public /*out*/ readonly ikeAuthenticationCertificate!: pulumi.Output<{[key: string]: string}>;
    /**
     * Workload network interfaces
     */
    public readonly interfaces!: pulumi.Output<outputs.UnmanagedWorkloadInterface[] | undefined>;
    /**
     * Assigned labels for workload
     */
    public readonly labels!: pulumi.Output<outputs.UnmanagedWorkloadLabel[] | undefined>;
    /**
     * Name of the Workload. The name should be up to 255 characters
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Determines if this workload is online. Default value: true
     */
    public readonly online!: pulumi.Output<boolean | undefined>;
    /**
     * Additional OS details - just displayed to end-user. The os_details should be up to 255 characters
     */
    public readonly osDetail!: pulumi.Output<string | undefined>;
    /**
     * OS identifier for Workload. The os_id should be up to 255 characters
     */
    public readonly osId!: pulumi.Output<string | undefined>;
    /**
     * The public IP address of the server. The public IP should in the IPv4 or IPv6 format
     */
    public readonly publicIp!: pulumi.Output<string>;
    /**
     * Selectively Enforced Services for Workload
     */
    public /*out*/ readonly selectivelyEnforcedServices!: pulumi.Output<outputs.UnmanagedWorkloadSelectivelyEnforcedService[]>;
    /**
     * The Kerberos Service Principal Name (SPN). The SPN should be between 1 to 255 characters
     */
    public readonly servicePrincipalName!: pulumi.Output<string | undefined>;
    /**
     * Service provider for Workload. The service_provider should be up to 255 characters
     */
    public readonly serviceProvider!: pulumi.Output<string | undefined>;
    /**
     * Service report for Workload
     */
    public /*out*/ readonly services!: pulumi.Output<outputs.UnmanagedWorkloadService[]>;
    /**
     * Timestamp when this workload was last updated
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;
    /**
     * User who last updated this workload
     */
    public /*out*/ readonly updatedBy!: pulumi.Output<{[key: string]: string}>;
    /**
     * VENS for Workload
     */
    public /*out*/ readonly ven!: pulumi.Output<{[key: string]: string}>;
    /**
     * Visibility Level of workload(s) to return
     */
    public /*out*/ readonly visibilityLevel!: pulumi.Output<string>;
    /**
     * Vulnerabilities summary associated with the workload
     */
    public /*out*/ readonly vulnerabilitiesSummaries!: pulumi.Output<outputs.UnmanagedWorkloadVulnerabilitiesSummary[]>;

    /**
     * Create a UnmanagedWorkload resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: UnmanagedWorkloadArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UnmanagedWorkloadArgs | UnmanagedWorkloadState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UnmanagedWorkloadState | undefined;
            resourceInputs["agentToPceCertificateAuthenticationId"] = state ? state.agentToPceCertificateAuthenticationId : undefined;
            resourceInputs["blockedConnectionAction"] = state ? state.blockedConnectionAction : undefined;
            resourceInputs["caps"] = state ? state.caps : undefined;
            resourceInputs["containerClusters"] = state ? state.containerClusters : undefined;
            resourceInputs["containersInheritHostPolicy"] = state ? state.containersInheritHostPolicy : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["createdBy"] = state ? state.createdBy : undefined;
            resourceInputs["dataCenter"] = state ? state.dataCenter : undefined;
            resourceInputs["dataCenterZone"] = state ? state.dataCenterZone : undefined;
            resourceInputs["deleted"] = state ? state.deleted : undefined;
            resourceInputs["deletedAt"] = state ? state.deletedAt : undefined;
            resourceInputs["deletedBy"] = state ? state.deletedBy : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["detectedVulnerabilities"] = state ? state.detectedVulnerabilities : undefined;
            resourceInputs["distinguishedName"] = state ? state.distinguishedName : undefined;
            resourceInputs["enforcementMode"] = state ? state.enforcementMode : undefined;
            resourceInputs["externalDataReference"] = state ? state.externalDataReference : undefined;
            resourceInputs["externalDataSet"] = state ? state.externalDataSet : undefined;
            resourceInputs["firewallCoexistences"] = state ? state.firewallCoexistences : undefined;
            resourceInputs["hostname"] = state ? state.hostname : undefined;
            resourceInputs["href"] = state ? state.href : undefined;
            resourceInputs["ignoredInterfaceNames"] = state ? state.ignoredInterfaceNames : undefined;
            resourceInputs["ikeAuthenticationCertificate"] = state ? state.ikeAuthenticationCertificate : undefined;
            resourceInputs["interfaces"] = state ? state.interfaces : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["online"] = state ? state.online : undefined;
            resourceInputs["osDetail"] = state ? state.osDetail : undefined;
            resourceInputs["osId"] = state ? state.osId : undefined;
            resourceInputs["publicIp"] = state ? state.publicIp : undefined;
            resourceInputs["selectivelyEnforcedServices"] = state ? state.selectivelyEnforcedServices : undefined;
            resourceInputs["servicePrincipalName"] = state ? state.servicePrincipalName : undefined;
            resourceInputs["serviceProvider"] = state ? state.serviceProvider : undefined;
            resourceInputs["services"] = state ? state.services : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
            resourceInputs["updatedBy"] = state ? state.updatedBy : undefined;
            resourceInputs["ven"] = state ? state.ven : undefined;
            resourceInputs["visibilityLevel"] = state ? state.visibilityLevel : undefined;
            resourceInputs["vulnerabilitiesSummaries"] = state ? state.vulnerabilitiesSummaries : undefined;
        } else {
            const args = argsOrState as UnmanagedWorkloadArgs | undefined;
            resourceInputs["agentToPceCertificateAuthenticationId"] = args ? args.agentToPceCertificateAuthenticationId : undefined;
            resourceInputs["dataCenter"] = args ? args.dataCenter : undefined;
            resourceInputs["dataCenterZone"] = args ? args.dataCenterZone : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["distinguishedName"] = args ? args.distinguishedName : undefined;
            resourceInputs["enforcementMode"] = args ? args.enforcementMode : undefined;
            resourceInputs["externalDataReference"] = args ? args.externalDataReference : undefined;
            resourceInputs["externalDataSet"] = args ? args.externalDataSet : undefined;
            resourceInputs["hostname"] = args ? args.hostname : undefined;
            resourceInputs["interfaces"] = args ? args.interfaces : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["online"] = args ? args.online : undefined;
            resourceInputs["osDetail"] = args ? args.osDetail : undefined;
            resourceInputs["osId"] = args ? args.osId : undefined;
            resourceInputs["publicIp"] = args ? args.publicIp : undefined;
            resourceInputs["servicePrincipalName"] = args ? args.servicePrincipalName : undefined;
            resourceInputs["serviceProvider"] = args ? args.serviceProvider : undefined;
            resourceInputs["blockedConnectionAction"] = undefined /*out*/;
            resourceInputs["caps"] = undefined /*out*/;
            resourceInputs["containerClusters"] = undefined /*out*/;
            resourceInputs["containersInheritHostPolicy"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["createdBy"] = undefined /*out*/;
            resourceInputs["deleted"] = undefined /*out*/;
            resourceInputs["deletedAt"] = undefined /*out*/;
            resourceInputs["deletedBy"] = undefined /*out*/;
            resourceInputs["detectedVulnerabilities"] = undefined /*out*/;
            resourceInputs["firewallCoexistences"] = undefined /*out*/;
            resourceInputs["href"] = undefined /*out*/;
            resourceInputs["ignoredInterfaceNames"] = undefined /*out*/;
            resourceInputs["ikeAuthenticationCertificate"] = undefined /*out*/;
            resourceInputs["selectivelyEnforcedServices"] = undefined /*out*/;
            resourceInputs["services"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
            resourceInputs["updatedBy"] = undefined /*out*/;
            resourceInputs["ven"] = undefined /*out*/;
            resourceInputs["visibilityLevel"] = undefined /*out*/;
            resourceInputs["vulnerabilitiesSummaries"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(UnmanagedWorkload.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering UnmanagedWorkload resources.
 */
export interface UnmanagedWorkloadState {
    /**
     * PKI Certificate identifier to be used by the PCE for authenticating the VEN. The ID should be between 1 to 255
     * characters
     */
    agentToPceCertificateAuthenticationId?: pulumi.Input<string>;
    /**
     * Blocked Connection Action for Workload
     */
    blockedConnectionAction?: pulumi.Input<string>;
    /**
     * User permissions for the object
     */
    caps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Container Cluster for Workload
     */
    containerClusters?: pulumi.Input<pulumi.Input<inputs.UnmanagedWorkloadContainerCluster>[]>;
    /**
     * This workload will apply the policy it receives both to itself and the containers hosted by it
     */
    containersInheritHostPolicy?: pulumi.Input<boolean>;
    /**
     * Timestamp when this workload was first created
     */
    createdAt?: pulumi.Input<string>;
    /**
     * User who created this workload
     */
    createdBy?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Data center for Workload. The data_center should be up to 255 characters
     */
    dataCenter?: pulumi.Input<string>;
    /**
     * Data center Zone for Workload. The data_center_zone should be up to 255 characters
     */
    dataCenterZone?: pulumi.Input<string>;
    /**
     * This indicates that the workload has been deleted
     */
    deleted?: pulumi.Input<boolean>;
    /**
     * Timestamp when this workload was last deleted
     */
    deletedAt?: pulumi.Input<string>;
    /**
     * User who deleted this workload
     */
    deletedBy?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The long description of the workload
     */
    description?: pulumi.Input<string>;
    /**
     * Detected Vulnerabilities for Workload
     */
    detectedVulnerabilities?: pulumi.Input<pulumi.Input<inputs.UnmanagedWorkloadDetectedVulnerability>[]>;
    /**
     * X.509 Subject distinguished name. The name should be up to 255 characters
     */
    distinguishedName?: pulumi.Input<string>;
    /**
     * Enforcement mode of workload(s) to return. Allowed values for enforcement modes are "idle","visibility_only","full", and
     * "selective". Default value: "visibility_only"
     */
    enforcementMode?: pulumi.Input<string>;
    /**
     * A unique identifier within the external data source
     */
    externalDataReference?: pulumi.Input<string>;
    /**
     * The data source from which a resource originates
     */
    externalDataSet?: pulumi.Input<string>;
    /**
     * Firewall coexistence mode for Workload
     */
    firewallCoexistences?: pulumi.Input<pulumi.Input<inputs.UnmanagedWorkloadFirewallCoexistence>[]>;
    /**
     * The hostname of this workload. The hostname should be up to 255 characters
     */
    hostname?: pulumi.Input<string>;
    /**
     * URI of the Workload
     */
    href?: pulumi.Input<string>;
    /**
     * Ignored Interface Names for Workload
     */
    ignoredInterfaceNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * IKE authentication certificate for certificate-based Secure Connect and Machine Auth
     */
    ikeAuthenticationCertificate?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Workload network interfaces
     */
    interfaces?: pulumi.Input<pulumi.Input<inputs.UnmanagedWorkloadInterface>[]>;
    /**
     * Assigned labels for workload
     */
    labels?: pulumi.Input<pulumi.Input<inputs.UnmanagedWorkloadLabel>[]>;
    /**
     * Name of the Workload. The name should be up to 255 characters
     */
    name?: pulumi.Input<string>;
    /**
     * Determines if this workload is online. Default value: true
     */
    online?: pulumi.Input<boolean>;
    /**
     * Additional OS details - just displayed to end-user. The os_details should be up to 255 characters
     */
    osDetail?: pulumi.Input<string>;
    /**
     * OS identifier for Workload. The os_id should be up to 255 characters
     */
    osId?: pulumi.Input<string>;
    /**
     * The public IP address of the server. The public IP should in the IPv4 or IPv6 format
     */
    publicIp?: pulumi.Input<string>;
    /**
     * Selectively Enforced Services for Workload
     */
    selectivelyEnforcedServices?: pulumi.Input<pulumi.Input<inputs.UnmanagedWorkloadSelectivelyEnforcedService>[]>;
    /**
     * The Kerberos Service Principal Name (SPN). The SPN should be between 1 to 255 characters
     */
    servicePrincipalName?: pulumi.Input<string>;
    /**
     * Service provider for Workload. The service_provider should be up to 255 characters
     */
    serviceProvider?: pulumi.Input<string>;
    /**
     * Service report for Workload
     */
    services?: pulumi.Input<pulumi.Input<inputs.UnmanagedWorkloadService>[]>;
    /**
     * Timestamp when this workload was last updated
     */
    updatedAt?: pulumi.Input<string>;
    /**
     * User who last updated this workload
     */
    updatedBy?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * VENS for Workload
     */
    ven?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Visibility Level of workload(s) to return
     */
    visibilityLevel?: pulumi.Input<string>;
    /**
     * Vulnerabilities summary associated with the workload
     */
    vulnerabilitiesSummaries?: pulumi.Input<pulumi.Input<inputs.UnmanagedWorkloadVulnerabilitiesSummary>[]>;
}

/**
 * The set of arguments for constructing a UnmanagedWorkload resource.
 */
export interface UnmanagedWorkloadArgs {
    /**
     * PKI Certificate identifier to be used by the PCE for authenticating the VEN. The ID should be between 1 to 255
     * characters
     */
    agentToPceCertificateAuthenticationId?: pulumi.Input<string>;
    /**
     * Data center for Workload. The data_center should be up to 255 characters
     */
    dataCenter?: pulumi.Input<string>;
    /**
     * Data center Zone for Workload. The data_center_zone should be up to 255 characters
     */
    dataCenterZone?: pulumi.Input<string>;
    /**
     * The long description of the workload
     */
    description?: pulumi.Input<string>;
    /**
     * X.509 Subject distinguished name. The name should be up to 255 characters
     */
    distinguishedName?: pulumi.Input<string>;
    /**
     * Enforcement mode of workload(s) to return. Allowed values for enforcement modes are "idle","visibility_only","full", and
     * "selective". Default value: "visibility_only"
     */
    enforcementMode?: pulumi.Input<string>;
    /**
     * A unique identifier within the external data source
     */
    externalDataReference?: pulumi.Input<string>;
    /**
     * The data source from which a resource originates
     */
    externalDataSet?: pulumi.Input<string>;
    /**
     * The hostname of this workload. The hostname should be up to 255 characters
     */
    hostname?: pulumi.Input<string>;
    /**
     * Workload network interfaces
     */
    interfaces?: pulumi.Input<pulumi.Input<inputs.UnmanagedWorkloadInterface>[]>;
    /**
     * Assigned labels for workload
     */
    labels?: pulumi.Input<pulumi.Input<inputs.UnmanagedWorkloadLabel>[]>;
    /**
     * Name of the Workload. The name should be up to 255 characters
     */
    name?: pulumi.Input<string>;
    /**
     * Determines if this workload is online. Default value: true
     */
    online?: pulumi.Input<boolean>;
    /**
     * Additional OS details - just displayed to end-user. The os_details should be up to 255 characters
     */
    osDetail?: pulumi.Input<string>;
    /**
     * OS identifier for Workload. The os_id should be up to 255 characters
     */
    osId?: pulumi.Input<string>;
    /**
     * The public IP address of the server. The public IP should in the IPv4 or IPv6 format
     */
    publicIp?: pulumi.Input<string>;
    /**
     * The Kerberos Service Principal Name (SPN). The SPN should be between 1 to 255 characters
     */
    servicePrincipalName?: pulumi.Input<string>;
    /**
     * Service provider for Workload. The service_provider should be up to 255 characters
     */
    serviceProvider?: pulumi.Input<string>;
}
