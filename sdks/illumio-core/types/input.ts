// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface ContainerClusterError {
    auditEvent: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    duplicateIds: pulumi.Input<pulumi.Input<string>[]>;
    errorType: pulumi.Input<string>;
}

export interface ContainerClusterNode {
    podSubnet: pulumi.Input<string>;
}

export interface ContainerClusterWorkloadProfileAssignLabel {
    /**
     * URI of the assigned label
     */
    href: pulumi.Input<string>;
}

export interface ContainerClusterWorkloadProfileLabel {
    /**
     * The label href to set. Single element list
     */
    assignment?: pulumi.Input<inputs.ContainerClusterWorkloadProfileLabelAssignment>;
    /**
     * Key of the Label. The value must be a string between 1 and 64 characters long
     */
    key: pulumi.Input<string>;
    /**
     * The list of allowed label hrefs
     */
    restrictions?: pulumi.Input<pulumi.Input<inputs.ContainerClusterWorkloadProfileLabelRestriction>[]>;
}

export interface ContainerClusterWorkloadProfileLabelAssignment {
    /**
     * URI of label
     */
    href: pulumi.Input<string>;
    /**
     * Name of label
     */
    value?: pulumi.Input<string>;
}

export interface ContainerClusterWorkloadProfileLabelRestriction {
    /**
     * URI of label
     */
    href: pulumi.Input<string>;
    /**
     * Name of label
     */
    value?: pulumi.Input<string>;
}

export interface EnforcementBoundaryConsumer {
    /**
     * actors for consumers parameter. Allowed values is "ams"
     */
    actors?: pulumi.Input<string>;
    /**
     * Href of IP List
     */
    ipList?: pulumi.Input<inputs.EnforcementBoundaryConsumerIpList>;
    /**
     * Href of Label
     */
    label?: pulumi.Input<inputs.EnforcementBoundaryConsumerLabel>;
    /**
     * Href of Label Group
     */
    labelGroup?: pulumi.Input<inputs.EnforcementBoundaryConsumerLabelGroup>;
}

export interface EnforcementBoundaryConsumerIpList {
    /**
     * URI of IP List
     */
    href: pulumi.Input<string>;
}

export interface EnforcementBoundaryConsumerLabel {
    /**
     * URI of Label
     */
    href: pulumi.Input<string>;
}

export interface EnforcementBoundaryConsumerLabelGroup {
    /**
     * URI of Label Group
     */
    href: pulumi.Input<string>;
}

export interface EnforcementBoundaryIngressService {
    /**
     * URI of Service
     */
    href?: pulumi.Input<string>;
    /**
     * Port number used with protocol or starting port when specifying a range. Allowed range is 0-65535
     */
    port?: pulumi.Input<string>;
    /**
     * Protocol number. Allowed values are 6 (TCP) and 17 (UDP)
     */
    proto?: pulumi.Input<string>;
    /**
     * Upper end of port range. Allowed range is 0-65535
     */
    toPort?: pulumi.Input<string>;
}

export interface EnforcementBoundaryProvider {
    /**
     * actors for providers. Valid value is "ams"
     */
    actors?: pulumi.Input<string>;
    /**
     * Href of IP List
     */
    ipList?: pulumi.Input<inputs.EnforcementBoundaryProviderIpList>;
    /**
     * Href of Label
     */
    label?: pulumi.Input<inputs.EnforcementBoundaryProviderLabel>;
    /**
     * Href of Label Group
     */
    labelGroup?: pulumi.Input<inputs.EnforcementBoundaryProviderLabelGroup>;
}

export interface EnforcementBoundaryProviderIpList {
    /**
     * URI of IP List
     */
    href: pulumi.Input<string>;
}

export interface EnforcementBoundaryProviderLabel {
    /**
     * URI of Label
     */
    href: pulumi.Input<string>;
}

export interface EnforcementBoundaryProviderLabelGroup {
    /**
     * URI of Label Group
     */
    href: pulumi.Input<string>;
}

export interface FirewallSettingsBlockedConnectionRejectScope {
    /**
     * Href of Label Group
     */
    labelGroups?: pulumi.Input<pulumi.Input<inputs.FirewallSettingsBlockedConnectionRejectScopeLabelGroup>[]>;
    /**
     * Href of Label
     */
    labels?: pulumi.Input<pulumi.Input<inputs.FirewallSettingsBlockedConnectionRejectScopeLabel>[]>;
}

export interface FirewallSettingsBlockedConnectionRejectScopeLabel {
    /**
     * URI of Label
     */
    href: pulumi.Input<string>;
}

export interface FirewallSettingsBlockedConnectionRejectScopeLabelGroup {
    /**
     * URI of Label Group
     */
    href: pulumi.Input<string>;
}

export interface FirewallSettingsContainersInheritHostPolicyScope {
    /**
     * Href of Label Group
     */
    labelGroups?: pulumi.Input<pulumi.Input<inputs.FirewallSettingsContainersInheritHostPolicyScopeLabelGroup>[]>;
    /**
     * Href of Label
     */
    labels?: pulumi.Input<pulumi.Input<inputs.FirewallSettingsContainersInheritHostPolicyScopeLabel>[]>;
}

export interface FirewallSettingsContainersInheritHostPolicyScopeLabel {
    /**
     * URI of Label
     */
    href: pulumi.Input<string>;
}

export interface FirewallSettingsContainersInheritHostPolicyScopeLabelGroup {
    /**
     * URI of Label Group
     */
    href: pulumi.Input<string>;
}

export interface FirewallSettingsFirewallCoexistence {
    /**
     * Whether Illumio is primary firewall or not
     */
    illumioPrimary: pulumi.Input<boolean>;
    /**
     * List of Href of label
     */
    scopes: pulumi.Input<pulumi.Input<inputs.FirewallSettingsFirewallCoexistenceScope>[]>;
    /**
     * Match criteria to select workload(s). Allowed values are "enforced" and "illuminated"
     */
    workloadMode?: pulumi.Input<string>;
}

export interface FirewallSettingsFirewallCoexistenceScope {
    /**
     * Href of Label
     */
    href: pulumi.Input<string>;
}

export interface FirewallSettingsLoopbackInterfacesInPolicyScope {
    /**
     * Href of Label Group
     */
    labelGroups?: pulumi.Input<pulumi.Input<inputs.FirewallSettingsLoopbackInterfacesInPolicyScopeLabelGroup>[]>;
    /**
     * Href of Label
     */
    labels?: pulumi.Input<pulumi.Input<inputs.FirewallSettingsLoopbackInterfacesInPolicyScopeLabel>[]>;
}

export interface FirewallSettingsLoopbackInterfacesInPolicyScopeLabel {
    /**
     * URI of Label
     */
    href: pulumi.Input<string>;
}

export interface FirewallSettingsLoopbackInterfacesInPolicyScopeLabelGroup {
    /**
     * URI of Label Group
     */
    href: pulumi.Input<string>;
}

export interface FirewallSettingsStaticPolicyScope {
    /**
     * Href of Label Group
     */
    labelGroups?: pulumi.Input<pulumi.Input<inputs.FirewallSettingsStaticPolicyScopeLabelGroup>[]>;
    /**
     * Href of Label
     */
    labels?: pulumi.Input<pulumi.Input<inputs.FirewallSettingsStaticPolicyScopeLabel>[]>;
}

export interface FirewallSettingsStaticPolicyScopeLabel {
    /**
     * URI of Label
     */
    href: pulumi.Input<string>;
}

export interface FirewallSettingsStaticPolicyScopeLabelGroup {
    /**
     * URI of Label Group
     */
    href: pulumi.Input<string>;
}

export interface GetEnforcementBoundaryProvider {
    /**
     * actors for providers
     */
    actors?: string;
    /**
     * Href of IP List
     */
    ipLists?: inputs.GetEnforcementBoundaryProviderIpList[];
    /**
     * Href of Label Group
     */
    labelGroups?: inputs.GetEnforcementBoundaryProviderLabelGroup[];
    /**
     * Href of Label
     */
    labels?: inputs.GetEnforcementBoundaryProviderLabel[];
}

export interface GetEnforcementBoundaryProviderArgs {
    /**
     * actors for providers
     */
    actors?: pulumi.Input<string>;
    /**
     * Href of IP List
     */
    ipLists?: pulumi.Input<pulumi.Input<inputs.GetEnforcementBoundaryProviderIpListArgs>[]>;
    /**
     * Href of Label Group
     */
    labelGroups?: pulumi.Input<pulumi.Input<inputs.GetEnforcementBoundaryProviderLabelGroupArgs>[]>;
    /**
     * Href of Label
     */
    labels?: pulumi.Input<pulumi.Input<inputs.GetEnforcementBoundaryProviderLabelArgs>[]>;
}

export interface GetEnforcementBoundaryProviderIpList {
    href: string;
}

export interface GetEnforcementBoundaryProviderIpListArgs {
    href: pulumi.Input<string>;
}

export interface GetEnforcementBoundaryProviderLabel {
    href: string;
}

export interface GetEnforcementBoundaryProviderLabelArgs {
    href: pulumi.Input<string>;
}

export interface GetEnforcementBoundaryProviderLabelGroup {
    href: string;
}

export interface GetEnforcementBoundaryProviderLabelGroupArgs {
    href: pulumi.Input<string>;
}

export interface IpListFqdn {
    /**
     * Description of FQDN
     */
    description?: pulumi.Input<string>;
    /**
     * Fully Qualified Domain Name for IP List. Supported formats are hostname, IP, and URI
     */
    fqdn: pulumi.Input<string>;
}

export interface IpListIpRange {
    /**
     * Description of IP Range
     */
    description?: pulumi.Input<string>;
    /**
     * Whether this IP address is an exclusion. Exclusions must be a strict subset of inclusive IP addresses
     */
    exclusion?: pulumi.Input<boolean>;
    /**
     * IP address or a low end of IP range. Might be specified with CIDR notation. The IP given should be in CIDR format example "0.0.0.0/0"
     */
    fromIp: pulumi.Input<string>;
    /**
     * High end of an IP range
     */
    toIp?: pulumi.Input<string>;
}

export interface LabelGroupLabel {
    /**
     * URI of label
     */
    href: pulumi.Input<string>;
    /**
     * Key in key-value pair
     */
    key?: pulumi.Input<string>;
    /**
     * Value in key-value pair
     */
    value?: pulumi.Input<string>;
}

export interface LabelGroupSubGroup {
    /**
     * URI of label group
     */
    href: pulumi.Input<string>;
    /**
     * Key in key-value pair
     */
    name?: pulumi.Input<string>;
}

export interface LabelTypeDisplayInfo {
    /**
     * Background color in hexadecimal for UI display
     */
    backgroundColor?: pulumi.Input<string>;
    /**
     * Optional pluralized form of the display name for the label type
     */
    displayNamePlural?: pulumi.Input<string>;
    /**
     * Foreground color in hexadecimal for UI display
     */
    foregroundColor?: pulumi.Input<string>;
    /**
     * Icon for use in the UI display
     */
    icon?: pulumi.Input<string>;
    /**
     * 1-2 initial characters for use in the UI display. Defaults to the first letter of the label type's display_name
     */
    initial?: pulumi.Input<string>;
    /**
     * Optional user provided sort order for label type
     */
    sortOrdinal?: pulumi.Input<string>;
}

export interface ManagedWorkloadContainerCluster {
    href: pulumi.Input<string>;
    name: pulumi.Input<string>;
}

export interface ManagedWorkloadDetectedVulnerability {
    ipAddress: pulumi.Input<string>;
    port: pulumi.Input<number>;
    portExposure: pulumi.Input<number>;
    portWideExposures: pulumi.Input<pulumi.Input<inputs.ManagedWorkloadDetectedVulnerabilityPortWideExposure>[]>;
    proto: pulumi.Input<number>;
    vulnerabilities: pulumi.Input<pulumi.Input<inputs.ManagedWorkloadDetectedVulnerabilityVulnerability>[]>;
    vulnerabilityReports: pulumi.Input<pulumi.Input<inputs.ManagedWorkloadDetectedVulnerabilityVulnerabilityReport>[]>;
    workloads: pulumi.Input<pulumi.Input<inputs.ManagedWorkloadDetectedVulnerabilityWorkload>[]>;
}

export interface ManagedWorkloadDetectedVulnerabilityPortWideExposure {
    any: pulumi.Input<boolean>;
    ipList: pulumi.Input<boolean>;
}

export interface ManagedWorkloadDetectedVulnerabilityVulnerability {
    href: pulumi.Input<string>;
    name: pulumi.Input<string>;
    score: pulumi.Input<number>;
}

export interface ManagedWorkloadDetectedVulnerabilityVulnerabilityReport {
    href: pulumi.Input<string>;
}

export interface ManagedWorkloadDetectedVulnerabilityWorkload {
    href: pulumi.Input<string>;
}

export interface ManagedWorkloadFirewallCoexistence {
    illumioPrimary: pulumi.Input<boolean>;
}

export interface ManagedWorkloadInterface {
    address: pulumi.Input<string>;
    cidrBlock: pulumi.Input<number>;
    defaultGatewayAddress: pulumi.Input<string>;
    friendlyName: pulumi.Input<string>;
    linkState: pulumi.Input<string>;
    loopback: pulumi.Input<boolean>;
    name: pulumi.Input<string>;
    network: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    networkDetectionMode: pulumi.Input<string>;
}

export interface ManagedWorkloadLabel {
    /**
     * URI of label
     */
    href: pulumi.Input<string>;
}

export interface ManagedWorkloadSelectivelyEnforcedService {
    href: pulumi.Input<string>;
    port: pulumi.Input<number>;
    proto: pulumi.Input<number>;
    toPort: pulumi.Input<number>;
}

export interface ManagedWorkloadService {
    createdAt: pulumi.Input<string>;
    openServicePorts: pulumi.Input<pulumi.Input<inputs.ManagedWorkloadServiceOpenServicePort>[]>;
    uptimeSeconds: pulumi.Input<number>;
}

export interface ManagedWorkloadServiceOpenServicePort {
    address: pulumi.Input<string>;
    package: pulumi.Input<string>;
    port: pulumi.Input<number>;
    processName: pulumi.Input<string>;
    protocol: pulumi.Input<number>;
    user: pulumi.Input<string>;
    winServiceName: pulumi.Input<string>;
}

export interface ManagedWorkloadVulnerabilitiesSummary {
    maxVulnerabilityScore: pulumi.Input<number>;
    numVulnerabilities: pulumi.Input<number>;
    vulnerabilityExposureScore: pulumi.Input<number>;
    vulnerabilityScore: pulumi.Input<number>;
    vulnerablePortExposure: pulumi.Input<number>;
    vulnerablePortWideExposures: pulumi.Input<pulumi.Input<inputs.ManagedWorkloadVulnerabilitiesSummaryVulnerablePortWideExposure>[]>;
}

export interface ManagedWorkloadVulnerabilitiesSummaryVulnerablePortWideExposure {
    any: pulumi.Input<boolean>;
    ipList: pulumi.Input<boolean>;
}

export interface PairingKeysActivationToken {
    activationToken: pulumi.Input<string>;
    nonce: pulumi.Input<string>;
}

export interface PairingProfileLabel {
    /**
     * Label URI
     */
    href: pulumi.Input<string>;
}

export interface RuleSetIpTablesRule {
    /**
     * actors for IP Table Rule
     */
    actors: pulumi.Input<pulumi.Input<inputs.RuleSetIpTablesRuleActor>[]>;
    /**
     * Timestamp when this IP Table Rule was first created
     */
    createdAt?: pulumi.Input<string>;
    /**
     * User who created this IP Table Rule
     */
    createdBy?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Timestamp when this IP Table Rule was deleted
     */
    deletedAt?: pulumi.Input<string>;
    /**
     * User who deleted this IP Table Rule
     */
    deletedBy?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Description of the IP Tables Rules
     */
    description?: pulumi.Input<string>;
    /**
     * Enabled flag. Determines whether this IP Tables Rule is enabled or not
     */
    enabled: pulumi.Input<boolean>;
    /**
     * URI of the Ip Tables Rules
     */
    href?: pulumi.Input<string>;
    /**
     * IP version for the rules to be applied to. Allowed values are "4" and "6"
     */
    ipVersion: pulumi.Input<string>;
    /**
     * statements for this IP Tables Rule
     */
    statements: pulumi.Input<pulumi.Input<inputs.RuleSetIpTablesRuleStatement>[]>;
    /**
     * Type of update for IP Table Rule
     */
    updateType?: pulumi.Input<string>;
    /**
     * Timestamp when this IP Table Rule was last updated
     */
    updatedAt?: pulumi.Input<string>;
    /**
     * User who last updated this IP Table Rule
     */
    updatedBy?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface RuleSetIpTablesRuleActor {
    /**
     * Set this if rule actors are all workloads. Allowed value is "ams"
     */
    actors?: pulumi.Input<string>;
    /**
     * Href of Label
     */
    label?: pulumi.Input<inputs.RuleSetIpTablesRuleActorLabel>;
    /**
     * Href of Label Group
     */
    labelGroup?: pulumi.Input<inputs.RuleSetIpTablesRuleActorLabelGroup>;
    /**
     * Href of Workload
     */
    workload?: pulumi.Input<inputs.RuleSetIpTablesRuleActorWorkload>;
}

export interface RuleSetIpTablesRuleActorLabel {
    /**
     * Label URI
     */
    href: pulumi.Input<string>;
    /**
     * Label key
     */
    key?: pulumi.Input<string>;
    /**
     * Label value
     */
    value?: pulumi.Input<string>;
}

export interface RuleSetIpTablesRuleActorLabelGroup {
    /**
     * URI of Label Group
     */
    href: pulumi.Input<string>;
}

export interface RuleSetIpTablesRuleActorWorkload {
    /**
     * URI of Workload
     */
    href: pulumi.Input<string>;
}

export interface RuleSetIpTablesRuleStatement {
    /**
     * Chain name for statement. Allowed values are "PREROUTING", "INPUT" and "OUTPUT"
     */
    chainName: pulumi.Input<string>;
    /**
     * Parameters of statements
     */
    parameters: pulumi.Input<string>;
    /**
     * Name of the table. Allowed values are "nat", "mangle" and "filter"
     */
    tableName: pulumi.Input<string>;
}

export interface RuleSetScope {
    /**
     * Boolean to specify whether or not the scope is an exclusion
     */
    exclusion?: pulumi.Input<boolean>;
    /**
     * Href of Label Group
     */
    labelGroups?: pulumi.Input<pulumi.Input<inputs.RuleSetScopeLabelGroup>[]>;
    /**
     * Href of Label
     */
    labels?: pulumi.Input<pulumi.Input<inputs.RuleSetScopeLabel>[]>;
}

export interface RuleSetScopeLabel {
    /**
     * Label URI
     */
    href: pulumi.Input<string>;
    /**
     * Label key
     */
    key?: pulumi.Input<string>;
    /**
     * Label value
     */
    value?: pulumi.Input<string>;
}

export interface RuleSetScopeLabelGroup {
    /**
     * Label Group URI
     */
    href: pulumi.Input<string>;
    /**
     * Label Group key
     */
    key?: pulumi.Input<string>;
    /**
     * Label Group name
     */
    name?: pulumi.Input<string>;
}

export interface SecurityRuleConsumer {
    /**
     * Consumer workloads filter. Allowed values are "ams" and "container_host"
     */
    actors?: pulumi.Input<string>;
    /**
     * Boolean to specify whether or not the actor is an exclusion - only for labels and label groups. Requires PCE v22.5+
     */
    exclusion?: pulumi.Input<boolean>;
    /**
     * IP List consumer filter
     */
    ipList?: pulumi.Input<inputs.SecurityRuleConsumerIpList>;
    /**
     * Label consumer filter
     */
    label?: pulumi.Input<inputs.SecurityRuleConsumerLabel>;
    /**
     * Label Group consumer filter
     */
    labelGroup?: pulumi.Input<inputs.SecurityRuleConsumerLabelGroup>;
    /**
     * Virtual Service consumer filter
     */
    virtualService?: pulumi.Input<inputs.SecurityRuleConsumerVirtualService>;
    /**
     * Workload consumer filter
     */
    workload?: pulumi.Input<inputs.SecurityRuleConsumerWorkload>;
}

export interface SecurityRuleConsumerIpList {
    /**
     * Timestamp when this IP List was first created
     */
    createdAt?: pulumi.Input<string>;
    /**
     * User who created this IP List
     */
    createdBy?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Timestamp when this IP List was deleted
     */
    deletedAt?: pulumi.Input<string>;
    /**
     * User who deleted this IP List
     */
    deletedBy?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Description of the IP List
     */
    description?: pulumi.Input<string>;
    /**
     * A unique identifier within the external data source
     */
    externalDataReference?: pulumi.Input<string>;
    /**
     * The data source from which a resource originates
     */
    externalDataSet?: pulumi.Input<string>;
    /**
     * Collection of Fully Qualified Domain Names
     */
    fqdns?: pulumi.Input<pulumi.Input<inputs.SecurityRuleConsumerIpListFqdn>[]>;
    /**
     * URI of this IP List
     */
    href: pulumi.Input<string>;
    /**
     * IP addresses or ranges
     */
    ipRanges?: pulumi.Input<pulumi.Input<inputs.SecurityRuleConsumerIpListIpRange>[]>;
    /**
     * Name of the IP List
     */
    name?: pulumi.Input<string>;
    /**
     * Timestamp when this IP List was last updated
     */
    updatedAt?: pulumi.Input<string>;
    /**
     * User who last updated this IP List
     */
    updatedBy?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface SecurityRuleConsumerIpListFqdn {
    description: pulumi.Input<string>;
    fqdn: pulumi.Input<string>;
}

export interface SecurityRuleConsumerIpListIpRange {
    description: pulumi.Input<string>;
    exclusion: pulumi.Input<boolean>;
    fromIp: pulumi.Input<string>;
    toIp: pulumi.Input<string>;
}

export interface SecurityRuleConsumerLabel {
    /**
     * Label URI
     */
    href: pulumi.Input<string>;
    /**
     * Label key
     */
    key?: pulumi.Input<string>;
    /**
     * Label value
     */
    value?: pulumi.Input<string>;
}

export interface SecurityRuleConsumerLabelGroup {
    /**
     * URI of Label Group
     */
    href: pulumi.Input<string>;
}

export interface SecurityRuleConsumerVirtualService {
    /**
     * URI of Virtual Service
     */
    href: pulumi.Input<string>;
}

export interface SecurityRuleConsumerWorkload {
    /**
     * Whether the workload has been deleted in the PCE
     */
    deleted?: pulumi.Input<boolean>;
    /**
     * Workload hostname
     */
    hostname?: pulumi.Input<string>;
    /**
     * Workload URI
     */
    href: pulumi.Input<string>;
    /**
     * Workload name
     */
    name?: pulumi.Input<string>;
}

export interface SecurityRuleIngressService {
    /**
     * URI of Service
     */
    href?: pulumi.Input<string>;
    /**
     * Port number used with protocol or starting port when specifying a range. Allowed range is 0-65535
     */
    port?: pulumi.Input<string>;
    /**
     * Protocol number. Allowed values are 6 (TCP) and 17 (UDP)
     */
    proto?: pulumi.Input<string>;
    /**
     * Upper end of port range. Allowed range is 0-65535
     */
    toPort?: pulumi.Input<string>;
}

export interface SecurityRuleProvider {
    /**
     * All workloads provider filter. If specified, must have value "ams"
     */
    actors?: pulumi.Input<string>;
    /**
     * Boolean to specify whether or not the actor is an exclusion - only for labels and label groups. Requires PCE v22.5+
     */
    exclusion?: pulumi.Input<boolean>;
    /**
     * IP List provider filter
     */
    ipList?: pulumi.Input<inputs.SecurityRuleProviderIpList>;
    /**
     * Label provider filter
     */
    label?: pulumi.Input<inputs.SecurityRuleProviderLabel>;
    /**
     * Label Group provider filter
     */
    labelGroup?: pulumi.Input<inputs.SecurityRuleProviderLabelGroup>;
    /**
     * Virtual Server provider filter
     */
    virtualServer?: pulumi.Input<inputs.SecurityRuleProviderVirtualServer>;
    /**
     * Virtual Service provider filter
     */
    virtualService?: pulumi.Input<inputs.SecurityRuleProviderVirtualService>;
    /**
     * Workload provider filter
     */
    workload?: pulumi.Input<inputs.SecurityRuleProviderWorkload>;
}

export interface SecurityRuleProviderIpList {
    /**
     * Timestamp when this IP List was first created
     */
    createdAt?: pulumi.Input<string>;
    /**
     * User who created this IP List
     */
    createdBy?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Timestamp when this IP List was deleted
     */
    deletedAt?: pulumi.Input<string>;
    /**
     * User who deleted this IP List
     */
    deletedBy?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Description of the IP List
     */
    description?: pulumi.Input<string>;
    /**
     * A unique identifier within the external data source
     */
    externalDataReference?: pulumi.Input<string>;
    /**
     * The data source from which a resource originates
     */
    externalDataSet?: pulumi.Input<string>;
    /**
     * Collection of Fully Qualified Domain Names
     */
    fqdns?: pulumi.Input<pulumi.Input<inputs.SecurityRuleProviderIpListFqdn>[]>;
    /**
     * URI of this IP List
     */
    href: pulumi.Input<string>;
    /**
     * IP addresses or ranges
     */
    ipRanges?: pulumi.Input<pulumi.Input<inputs.SecurityRuleProviderIpListIpRange>[]>;
    /**
     * Name of the IP List
     */
    name?: pulumi.Input<string>;
    /**
     * Timestamp when this IP List was last updated
     */
    updatedAt?: pulumi.Input<string>;
    /**
     * User who last updated this IP List
     */
    updatedBy?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface SecurityRuleProviderIpListFqdn {
    description: pulumi.Input<string>;
    fqdn: pulumi.Input<string>;
}

export interface SecurityRuleProviderIpListIpRange {
    description: pulumi.Input<string>;
    exclusion: pulumi.Input<boolean>;
    fromIp: pulumi.Input<string>;
    toIp: pulumi.Input<string>;
}

export interface SecurityRuleProviderLabel {
    /**
     * Label URI
     */
    href: pulumi.Input<string>;
    /**
     * Label key
     */
    key?: pulumi.Input<string>;
    /**
     * Label value
     */
    value?: pulumi.Input<string>;
}

export interface SecurityRuleProviderLabelGroup {
    /**
     * URI of Label Group
     */
    href: pulumi.Input<string>;
}

export interface SecurityRuleProviderVirtualServer {
    /**
     * URI of Virtual Server
     */
    href: pulumi.Input<string>;
}

export interface SecurityRuleProviderVirtualService {
    /**
     * Virtual Service URI
     */
    href: pulumi.Input<string>;
    /**
     * Virtual Service name
     */
    name?: pulumi.Input<string>;
}

export interface SecurityRuleProviderWorkload {
    /**
     * Whether the workload has been deleted in the PCE
     */
    deleted?: pulumi.Input<boolean>;
    /**
     * Workload hostname
     */
    hostname?: pulumi.Input<string>;
    /**
     * Workload URI
     */
    href: pulumi.Input<string>;
    /**
     * Workload name
     */
    name?: pulumi.Input<string>;
}

export interface SecurityRuleResolveLabelsAs {
    /**
     * consumers for resolve_labels_as. Allowed values are "workloads", "virtual_services"
     */
    consumers: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * providers for resolve_labels_as. Allowed values are "workloads", "virtual_services"
     */
    providers: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ServiceBindingContainerWorkload {
    /**
     * Container Workload URI
     */
    href: pulumi.Input<string>;
}

export interface ServiceBindingPortOverride {
    /**
     * Overriding port number (or starting point when specifying a range). Allowed range is 0 - 65535
     */
    newPort: pulumi.Input<number>;
    /**
     * Overriding port range ending port. Allowed range is 0 - 65535
     */
    newToPort?: pulumi.Input<number>;
    /**
     * Port Number in the original service which to override (integer 0-65535). Starting port when specifying a range
     */
    port?: pulumi.Input<number>;
    /**
     * Transport protocol in the original service which to override. Allowed values are 6 (TCP) and 17 (UDP)
     */
    proto?: pulumi.Input<number>;
}

export interface ServiceBindingVirtualService {
    /**
     * Virtual Service URI
     */
    href: pulumi.Input<string>;
}

export interface ServiceBindingWorkload {
    /**
     * Determines whether the workload is deleted
     */
    deleted?: pulumi.Input<boolean>;
    /**
     * Workload Hostname
     */
    hostname?: pulumi.Input<string>;
    /**
     * Workload URI
     */
    href: pulumi.Input<string>;
    /**
     * Workload Name
     */
    name?: pulumi.Input<string>;
}

export interface ServiceServicePort {
    /**
     * ICMP Code. Allowed when proto is 1 (ICMP) or 58 (ICMPv6). Allowed range is 0 - 15
     */
    icmpCode?: pulumi.Input<string>;
    /**
     * ICMP Type. Allowed when proto is 1 (ICMP) or 58 (ICMPv6). Allowed range is 0 - 255
     */
    icmpType?: pulumi.Input<string>;
    /**
     * Port Number. Also, the starting port when specifying a range. Allowed when value of proto is 6 or 17. Allowed range is 0 - 65535
     */
    port?: pulumi.Input<string>;
    /**
     * Transport protocol. IANA protocol numbers between 0-255 are permitted, and -1 represents all services
     */
    proto: pulumi.Input<string>;
    /**
     * High end of port range if specifying a range. Allowed range is 0 - 65535
     */
    toPort?: pulumi.Input<string>;
}

export interface ServiceWindowsEgressService {
    /**
     * Name of running process
     */
    processName?: pulumi.Input<string>;
    /**
     * Name of Windows Service
     */
    serviceName?: pulumi.Input<string>;
}

export interface ServiceWindowsService {
    /**
     * ICMP Code. Allowed when proto is 1 (ICMP) or 58 (ICMPv6). Allowed range 0 - 15
     */
    icmpCode?: pulumi.Input<string>;
    /**
     * ICMP Type. Allowed when proto is 1 (ICMP) or 58 (ICMPv6). Allowed range is 0 - 255
     */
    icmpType?: pulumi.Input<string>;
    /**
     * Port Number. Also, the starting port when specifying a range. Allowed when value of proto is 6 or 17. Allowed range is 0 - 65535
     */
    port?: pulumi.Input<string>;
    /**
     * Name of running process
     */
    processName?: pulumi.Input<string>;
    /**
     * Transport protocol. IANA protocol numbers between 0-255 are permitted, and -1 represents all services.
     */
    proto?: pulumi.Input<string>;
    /**
     * Name of Windows Service
     */
    serviceName?: pulumi.Input<string>;
    /**
     * High end of port range if specifying a range. Allowed range is 0 - 65535
     */
    toPort?: pulumi.Input<string>;
}

export interface SyslogDestinationAuditEventLogger {
    /**
     * Configuration (Northbound) auditable events
     */
    configurationEventIncluded: pulumi.Input<boolean>;
    /**
     * Minimum severity level of audit event messages. Allowed values are "error", "warning" and "informational"
     */
    minSeverity: pulumi.Input<string>;
    /**
     * System (PCE) auditable events
     */
    systemEventIncluded: pulumi.Input<boolean>;
}

export interface SyslogDestinationNodeStatusLogger {
    /**
     * Syslog messages regarding status of the nodes
     */
    nodeStatusIncluded: pulumi.Input<boolean>;
}

export interface SyslogDestinationRemoteSyslog {
    /**
     * The remote syslog IP or DNS address
     */
    address: pulumi.Input<string>;
    /**
     * The remote syslog port
     */
    port: pulumi.Input<number>;
    /**
     * The protocol for streaming syslog messages. Allowed values are 6 and 17
     */
    protocol: pulumi.Input<number>;
    /**
     * Trustee CA bundle
     */
    tlsCaBundle?: pulumi.Input<string>;
    /**
     * To enable TLS
     */
    tlsEnabled: pulumi.Input<boolean>;
    /**
     * Perform TLS verification
     */
    tlsVerifyCert: pulumi.Input<boolean>;
}

export interface SyslogDestinationTrafficEventLogger {
    /**
     * Set to enable traffic flow events
     */
    trafficFlowAllowedEventIncluded: pulumi.Input<boolean>;
    /**
     * Set to enable traffic flow events
     */
    trafficFlowBlockedEventIncluded: pulumi.Input<boolean>;
    /**
     * Set to enable traffic flow events
     */
    trafficFlowPotentiallyBlockedEventIncluded: pulumi.Input<boolean>;
}

export interface TrafficCollectorSettingsTarget {
    /**
     * single IP address or CIDR. Default value: "0.0.0.0/0"
     */
    dstIp?: pulumi.Input<string>;
    /**
     * destination port for target. Allowed range is -1 to 65535. Default value: -1
     */
    dstPort?: pulumi.Input<number>;
    /**
     * protocol for target. Allowed values are 6 (TCP), 17 (UDP), 1 (ICMP) and 58 (ICMPv6)
     */
    proto: pulumi.Input<number>;
}

export interface UnmanagedWorkloadContainerCluster {
    href: pulumi.Input<string>;
    name: pulumi.Input<string>;
}

export interface UnmanagedWorkloadDetectedVulnerability {
    ipAddress: pulumi.Input<string>;
    port: pulumi.Input<number>;
    portExposure: pulumi.Input<number>;
    portWideExposures: pulumi.Input<pulumi.Input<inputs.UnmanagedWorkloadDetectedVulnerabilityPortWideExposure>[]>;
    proto: pulumi.Input<number>;
    vulnerabilities: pulumi.Input<pulumi.Input<inputs.UnmanagedWorkloadDetectedVulnerabilityVulnerability>[]>;
    vulnerabilityReports: pulumi.Input<pulumi.Input<inputs.UnmanagedWorkloadDetectedVulnerabilityVulnerabilityReport>[]>;
    workloads: pulumi.Input<pulumi.Input<inputs.UnmanagedWorkloadDetectedVulnerabilityWorkload>[]>;
}

export interface UnmanagedWorkloadDetectedVulnerabilityPortWideExposure {
    any: pulumi.Input<boolean>;
    ipList: pulumi.Input<boolean>;
}

export interface UnmanagedWorkloadDetectedVulnerabilityVulnerability {
    href: pulumi.Input<string>;
    name: pulumi.Input<string>;
    score: pulumi.Input<number>;
}

export interface UnmanagedWorkloadDetectedVulnerabilityVulnerabilityReport {
    href: pulumi.Input<string>;
}

export interface UnmanagedWorkloadDetectedVulnerabilityWorkload {
    href: pulumi.Input<string>;
}

export interface UnmanagedWorkloadFirewallCoexistence {
    illumioPrimary: pulumi.Input<boolean>;
}

export interface UnmanagedWorkloadInterface {
    /**
     * Interface IP address. Must be in IPv4 or IPv6 format
     */
    address: pulumi.Input<string>;
    /**
     * Interface CIDR block bits
     */
    cidrBlock?: pulumi.Input<number>;
    /**
     * Interface Default Gateway IP address. Must be in IPv4 or IPv6 format
     */
    defaultGatewayAddress?: pulumi.Input<string>;
    /**
     * User-friendly interface name. Can be up to 255 characters
     */
    friendlyName?: pulumi.Input<string>;
    /**
     * Interface link state. Allowed values are "up", "down", and "unknown"
     */
    linkState?: pulumi.Input<string>;
    /**
     * Whether or not the interface represents a loopback address on the workload
     */
    loopback?: pulumi.Input<boolean>;
    /**
     * Interface name. Can be up to 255 characters
     */
    name: pulumi.Input<string>;
    /**
     * Interface Network HREFs
     */
    network?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Interface Network Detection Mode
     */
    networkDetectionMode?: pulumi.Input<string>;
}

export interface UnmanagedWorkloadLabel {
    /**
     * URI of label
     */
    href: pulumi.Input<string>;
    /**
     * Workload Label key
     */
    key?: pulumi.Input<string>;
    /**
     * Workload Label value
     */
    value?: pulumi.Input<string>;
}

export interface UnmanagedWorkloadSelectivelyEnforcedService {
    href: pulumi.Input<string>;
    port: pulumi.Input<number>;
    proto: pulumi.Input<number>;
    toPort: pulumi.Input<number>;
}

export interface UnmanagedWorkloadService {
    createdAt: pulumi.Input<string>;
    openServicePorts: pulumi.Input<pulumi.Input<inputs.UnmanagedWorkloadServiceOpenServicePort>[]>;
    uptimeSeconds: pulumi.Input<number>;
}

export interface UnmanagedWorkloadServiceOpenServicePort {
    address: pulumi.Input<string>;
    package: pulumi.Input<string>;
    port: pulumi.Input<number>;
    processName: pulumi.Input<string>;
    protocol: pulumi.Input<number>;
    user: pulumi.Input<string>;
    winServiceName: pulumi.Input<string>;
}

export interface UnmanagedWorkloadVulnerabilitiesSummary {
    maxVulnerabilityScore: pulumi.Input<number>;
    numVulnerabilities: pulumi.Input<number>;
    vulnerabilityExposureScore: pulumi.Input<number>;
    vulnerabilityScore: pulumi.Input<number>;
    vulnerablePortExposure: pulumi.Input<number>;
    vulnerablePortWideExposures: pulumi.Input<pulumi.Input<inputs.UnmanagedWorkloadVulnerabilitiesSummaryVulnerablePortWideExposure>[]>;
}

export interface UnmanagedWorkloadVulnerabilitiesSummaryVulnerablePortWideExposure {
    any: pulumi.Input<boolean>;
    ipList: pulumi.Input<boolean>;
}

export interface VenCondition {
    firstReportedTimestamp: pulumi.Input<string>;
    latestEvents: pulumi.Input<pulumi.Input<inputs.VenConditionLatestEvent>[]>;
}

export interface VenConditionLatestEvent {
    href: pulumi.Input<string>;
    infos: pulumi.Input<pulumi.Input<inputs.VenConditionLatestEventInfo>[]>;
    notificationType: pulumi.Input<string>;
    severity: pulumi.Input<string>;
    timestamp: pulumi.Input<string>;
}

export interface VenConditionLatestEventInfo {
    agent: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface VenContainerCluster {
    href: pulumi.Input<string>;
    name: pulumi.Input<string>;
}

export interface VenInterface {
    address: pulumi.Input<string>;
    cidrBlock: pulumi.Input<number>;
    defaultGatewayAddress: pulumi.Input<string>;
    friendlyName: pulumi.Input<string>;
    href: pulumi.Input<string>;
    linkState: pulumi.Input<string>;
    loopback: pulumi.Input<boolean>;
    name: pulumi.Input<string>;
    network: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    networkDetectionMode: pulumi.Input<string>;
}

export interface VenLabel {
    href: pulumi.Input<string>;
    key: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface VenSecureConnect {
    matchingIssuerName: pulumi.Input<string>;
}

export interface VenWorkload {
    enforcementMode: pulumi.Input<string>;
    hostname: pulumi.Input<string>;
    href: pulumi.Input<string>;
    interfaces: pulumi.Input<pulumi.Input<inputs.VenWorkloadInterface>[]>;
    labels: pulumi.Input<pulumi.Input<inputs.VenWorkloadLabel>[]>;
    mode: pulumi.Input<string>;
    name: pulumi.Input<string>;
    online: pulumi.Input<boolean>;
    osDetail: pulumi.Input<string>;
    osId: pulumi.Input<string>;
    publicIp: pulumi.Input<string>;
    securityPolicyAppliedAt: pulumi.Input<string>;
    securityPolicyReceivedAt: pulumi.Input<string>;
    visibilityLevel: pulumi.Input<string>;
}

export interface VenWorkloadInterface {
    address: pulumi.Input<string>;
    cidrBlock: pulumi.Input<number>;
    defaultGatewayAddress: pulumi.Input<string>;
    friendlyName: pulumi.Input<string>;
    linkState: pulumi.Input<string>;
    loopback: pulumi.Input<boolean>;
    name: pulumi.Input<string>;
    network: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    networkDetectionMode: pulumi.Input<string>;
}

export interface VenWorkloadLabel {
    href: pulumi.Input<string>;
    key: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface VirtualServiceLabel {
    /**
     * URI of label
     */
    href: pulumi.Input<string>;
    /**
     * Key in key-value pair
     */
    key?: pulumi.Input<string>;
    /**
     * Value in key-value pair
     */
    value?: pulumi.Input<string>;
}

export interface VirtualServiceService {
    /**
     * URI of associated service
     */
    href: pulumi.Input<string>;
}

export interface VirtualServiceServiceAddress {
    /**
     * Description for given fqdn
     */
    description?: pulumi.Input<string>;
    /**
     * FQDN to assign to the virtual service.  Allowed formats: hostname, IP, or URI
     */
    fqdn?: pulumi.Input<string>;
    /**
     * IP address to assign to the virtual service
     */
    ip?: pulumi.Input<string>;
    /**
     * Network URI for this IP address
     */
    network?: pulumi.Input<inputs.VirtualServiceServiceAddressNetwork>;
    /**
     * Port number of the service. Allowed range is -1 - 65535
     */
    port?: pulumi.Input<string>;
}

export interface VirtualServiceServiceAddressNetwork {
    /**
     * URI of associated service
     */
    href: pulumi.Input<string>;
}

export interface VirtualServiceServicePort {
    /**
     * Port Number. Also, the starting port when specifying a range. Allowed range is -1 - 65535
     */
    port?: pulumi.Input<string>;
    /**
     * Transport protocol. Allowed values are 6 (TCP) and 17 (UDP)
     */
    proto: pulumi.Input<string>;
    /**
     * High end of port range inclusive if specifying a range. Allowed range is 0 - 65535
     */
    toPort?: pulumi.Input<string>;
}

export interface VulnerabilitiesVulnerability {
    /**
     * The cve_ids for the vulnerability
     */
    cveIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * An arbitrary field to store some details of the vulnerability class
     */
    description?: pulumi.Input<string>;
    /**
     * The title/name of the vulnerability
     */
    name: pulumi.Input<string>;
    /**
     * reference id of vulnerability
     */
    referenceId: pulumi.Input<string>;
    /**
     * The normalized score of the vulnerability within the range of 0 to 100. CVSS Score can be used here with a 10x multiplier
     */
    score: pulumi.Input<number>;
}

export interface VulnerabilityReportDetectedVulnerability {
    /**
     * external data reference json string for vulnerability
     */
    externalDataReference?: pulumi.Input<string>;
    /**
     * The IP address of the host where the vulnerability is found. IPv4 or IPv6
     */
    ipAddress: pulumi.Input<string>;
    /**
     * The port that is associated with the vulnerability
     */
    port?: pulumi.Input<string>;
    /**
     * The protocol that is associated with the vulnerability
     */
    proto?: pulumi.Input<string>;
    /**
     * Detected vulnerability state. Allowed values are "active", and "fixed". Default value: "active"
     */
    state?: pulumi.Input<string>;
    /**
     * The Href of the vulnerability class to which this vulnerability belongs
     */
    vulnerability: pulumi.Input<inputs.VulnerabilityReportDetectedVulnerabilityVulnerability>;
    /**
     * The Href of the workload to which this vulnerability belongs
     */
    workload: pulumi.Input<inputs.VulnerabilityReportDetectedVulnerabilityWorkload>;
}

export interface VulnerabilityReportDetectedVulnerabilityVulnerability {
    /**
     * URI of Vulnerability
     */
    href: pulumi.Input<string>;
}

export interface VulnerabilityReportDetectedVulnerabilityWorkload {
    /**
     * URI of Workload
     */
    href: pulumi.Input<string>;
}

export interface WorkloadSettingsWorkloadDisconnectedTimeoutSecond {
    /**
     * Assigned labels for Workload Disconnected Timeout Seconds
     */
    scopes?: pulumi.Input<pulumi.Input<inputs.WorkloadSettingsWorkloadDisconnectedTimeoutSecondScope>[]>;
    /**
     * Property value associated with the scope. Allowed range is 300 - 2147483647 or -1
     */
    value?: pulumi.Input<number>;
    /**
     * The VEN type that this property is applicable to. Must be "server" or "endpoint". An empty or missing value will default to "server" on the PCE
     */
    venType?: pulumi.Input<string>;
}

export interface WorkloadSettingsWorkloadDisconnectedTimeoutSecondScope {
    /**
     * Label URI
     */
    href?: pulumi.Input<string>;
}

export interface WorkloadSettingsWorkloadGoodbyeTimeoutSecond {
    /**
     * Assigned labels for Workload Goodbye Timeout Seconds
     */
    scopes?: pulumi.Input<pulumi.Input<inputs.WorkloadSettingsWorkloadGoodbyeTimeoutSecondScope>[]>;
    /**
     * Property value associated with the scope. Allowed range is 300 - 2147483647 or -1
     */
    value?: pulumi.Input<number>;
    /**
     * The VEN type that this property is applicable to. Must be "server" or "endpoint". An empty or missing value will default to "server" on the PCE
     */
    venType?: pulumi.Input<string>;
}

export interface WorkloadSettingsWorkloadGoodbyeTimeoutSecondScope {
    /**
     * Label URI
     */
    href?: pulumi.Input<string>;
}
