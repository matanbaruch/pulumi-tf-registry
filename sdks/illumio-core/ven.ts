// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Ven extends pulumi.CustomResource {
    /**
     * Get an existing Ven resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VenState, opts?: pulumi.CustomResourceOptions): Ven {
        return new Ven(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'illumio-core:index/ven:Ven';

    /**
     * Returns true if the given object is an instance of Ven.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Ven {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Ven.__pulumiType;
    }

    /**
     * The method by which the VEN was activated
     */
    public /*out*/ readonly activationType!: pulumi.Output<string>;
    /**
     * The FQDN of the PCE that the VEN last connected to
     */
    public /*out*/ readonly activePceFqdn!: pulumi.Output<string>;
    /**
     * User permissions for the object
     */
    public /*out*/ readonly caps!: pulumi.Output<string[]>;
    public /*out*/ readonly conditions!: pulumi.Output<outputs.VenCondition[]>;
    /**
     * container_cluster details for ven. Single element list
     */
    public /*out*/ readonly containerClusters!: pulumi.Output<outputs.VenContainerCluster[]>;
    /**
     * The time (rfc3339 timestamp) at which this VEN was created
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * The href of the user who created this VEN
     */
    public /*out*/ readonly createdBy!: pulumi.Output<{[key: string]: string}>;
    /**
     * The description of the VEN
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The hostname of the host managed by the VEN
     */
    public /*out*/ readonly hostname!: pulumi.Output<string>;
    /**
     * URI of VEN
     */
    public /*out*/ readonly href!: pulumi.Output<string>;
    /**
     * Network interfaces of the host managed by the VEN
     */
    public /*out*/ readonly interfaces!: pulumi.Output<outputs.VenInterface[]>;
    /**
     * Labels assigned to the host managed by the VEN
     */
    public /*out*/ readonly labels!: pulumi.Output<outputs.VenLabel[]>;
    /**
     * The time (rfc3339 timestamp) of the last goodbye from the VEN
     */
    public /*out*/ readonly lastGoodbyeAt!: pulumi.Output<string>;
    /**
     * The last time (rfc3339 timestamp) a heartbeat was received from this VEN
     */
    public /*out*/ readonly lastHeartbeatAt!: pulumi.Output<string>;
    /**
     * Friendly name for the VEN. The name should be up to 255 characters
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Additional OS details from the host managed by the VEN
     */
    public /*out*/ readonly osDetail!: pulumi.Output<string>;
    /**
     * OS identifier of the host managed by the VEN
     */
    public /*out*/ readonly osId!: pulumi.Output<string>;
    /**
     * OS platform of the host managed by the VEN
     */
    public /*out*/ readonly osPlatform!: pulumi.Output<string>;
    /**
     * secure_connect details for vens
     */
    public /*out*/ readonly secureConnects!: pulumi.Output<outputs.VenSecureConnect[]>;
    /**
     * Status of the VEN. Allowed values are "active", and "suspended"
     */
    public readonly status!: pulumi.Output<string>;
    /**
     * The FQDN of the PCE that the VEN will use for future connections
     */
    public readonly targetPceFqdn!: pulumi.Output<string | undefined>;
    /**
     * The unique ID of the host managed by the VEN
     */
    public /*out*/ readonly uid!: pulumi.Output<string>;
    public /*out*/ readonly unpairAllowed!: pulumi.Output<boolean>;
    /**
     * The time (rfc3339 timestamp) at which this VEN was last updated
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;
    /**
     * The href of the user who last updated this VEN
     */
    public /*out*/ readonly updatedBy!: pulumi.Output<{[key: string]: string}>;
    /**
     * Software version of the VEN
     */
    public /*out*/ readonly version!: pulumi.Output<string>;
    public /*out*/ readonly workloads!: pulumi.Output<outputs.VenWorkload[]>;

    /**
     * Create a Ven resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VenArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VenArgs | VenState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VenState | undefined;
            resourceInputs["activationType"] = state ? state.activationType : undefined;
            resourceInputs["activePceFqdn"] = state ? state.activePceFqdn : undefined;
            resourceInputs["caps"] = state ? state.caps : undefined;
            resourceInputs["conditions"] = state ? state.conditions : undefined;
            resourceInputs["containerClusters"] = state ? state.containerClusters : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["createdBy"] = state ? state.createdBy : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["hostname"] = state ? state.hostname : undefined;
            resourceInputs["href"] = state ? state.href : undefined;
            resourceInputs["interfaces"] = state ? state.interfaces : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["lastGoodbyeAt"] = state ? state.lastGoodbyeAt : undefined;
            resourceInputs["lastHeartbeatAt"] = state ? state.lastHeartbeatAt : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["osDetail"] = state ? state.osDetail : undefined;
            resourceInputs["osId"] = state ? state.osId : undefined;
            resourceInputs["osPlatform"] = state ? state.osPlatform : undefined;
            resourceInputs["secureConnects"] = state ? state.secureConnects : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["targetPceFqdn"] = state ? state.targetPceFqdn : undefined;
            resourceInputs["uid"] = state ? state.uid : undefined;
            resourceInputs["unpairAllowed"] = state ? state.unpairAllowed : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
            resourceInputs["updatedBy"] = state ? state.updatedBy : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
            resourceInputs["workloads"] = state ? state.workloads : undefined;
        } else {
            const args = argsOrState as VenArgs | undefined;
            if ((!args || args.status === undefined) && !opts.urn) {
                throw new Error("Missing required property 'status'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["targetPceFqdn"] = args ? args.targetPceFqdn : undefined;
            resourceInputs["activationType"] = undefined /*out*/;
            resourceInputs["activePceFqdn"] = undefined /*out*/;
            resourceInputs["caps"] = undefined /*out*/;
            resourceInputs["conditions"] = undefined /*out*/;
            resourceInputs["containerClusters"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["createdBy"] = undefined /*out*/;
            resourceInputs["hostname"] = undefined /*out*/;
            resourceInputs["href"] = undefined /*out*/;
            resourceInputs["interfaces"] = undefined /*out*/;
            resourceInputs["labels"] = undefined /*out*/;
            resourceInputs["lastGoodbyeAt"] = undefined /*out*/;
            resourceInputs["lastHeartbeatAt"] = undefined /*out*/;
            resourceInputs["osDetail"] = undefined /*out*/;
            resourceInputs["osId"] = undefined /*out*/;
            resourceInputs["osPlatform"] = undefined /*out*/;
            resourceInputs["secureConnects"] = undefined /*out*/;
            resourceInputs["uid"] = undefined /*out*/;
            resourceInputs["unpairAllowed"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
            resourceInputs["updatedBy"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
            resourceInputs["workloads"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Ven.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Ven resources.
 */
export interface VenState {
    /**
     * The method by which the VEN was activated
     */
    activationType?: pulumi.Input<string>;
    /**
     * The FQDN of the PCE that the VEN last connected to
     */
    activePceFqdn?: pulumi.Input<string>;
    /**
     * User permissions for the object
     */
    caps?: pulumi.Input<pulumi.Input<string>[]>;
    conditions?: pulumi.Input<pulumi.Input<inputs.VenCondition>[]>;
    /**
     * container_cluster details for ven. Single element list
     */
    containerClusters?: pulumi.Input<pulumi.Input<inputs.VenContainerCluster>[]>;
    /**
     * The time (rfc3339 timestamp) at which this VEN was created
     */
    createdAt?: pulumi.Input<string>;
    /**
     * The href of the user who created this VEN
     */
    createdBy?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The description of the VEN
     */
    description?: pulumi.Input<string>;
    /**
     * The hostname of the host managed by the VEN
     */
    hostname?: pulumi.Input<string>;
    /**
     * URI of VEN
     */
    href?: pulumi.Input<string>;
    /**
     * Network interfaces of the host managed by the VEN
     */
    interfaces?: pulumi.Input<pulumi.Input<inputs.VenInterface>[]>;
    /**
     * Labels assigned to the host managed by the VEN
     */
    labels?: pulumi.Input<pulumi.Input<inputs.VenLabel>[]>;
    /**
     * The time (rfc3339 timestamp) of the last goodbye from the VEN
     */
    lastGoodbyeAt?: pulumi.Input<string>;
    /**
     * The last time (rfc3339 timestamp) a heartbeat was received from this VEN
     */
    lastHeartbeatAt?: pulumi.Input<string>;
    /**
     * Friendly name for the VEN. The name should be up to 255 characters
     */
    name?: pulumi.Input<string>;
    /**
     * Additional OS details from the host managed by the VEN
     */
    osDetail?: pulumi.Input<string>;
    /**
     * OS identifier of the host managed by the VEN
     */
    osId?: pulumi.Input<string>;
    /**
     * OS platform of the host managed by the VEN
     */
    osPlatform?: pulumi.Input<string>;
    /**
     * secure_connect details for vens
     */
    secureConnects?: pulumi.Input<pulumi.Input<inputs.VenSecureConnect>[]>;
    /**
     * Status of the VEN. Allowed values are "active", and "suspended"
     */
    status?: pulumi.Input<string>;
    /**
     * The FQDN of the PCE that the VEN will use for future connections
     */
    targetPceFqdn?: pulumi.Input<string>;
    /**
     * The unique ID of the host managed by the VEN
     */
    uid?: pulumi.Input<string>;
    unpairAllowed?: pulumi.Input<boolean>;
    /**
     * The time (rfc3339 timestamp) at which this VEN was last updated
     */
    updatedAt?: pulumi.Input<string>;
    /**
     * The href of the user who last updated this VEN
     */
    updatedBy?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Software version of the VEN
     */
    version?: pulumi.Input<string>;
    workloads?: pulumi.Input<pulumi.Input<inputs.VenWorkload>[]>;
}

/**
 * The set of arguments for constructing a Ven resource.
 */
export interface VenArgs {
    /**
     * The description of the VEN
     */
    description?: pulumi.Input<string>;
    /**
     * Friendly name for the VEN. The name should be up to 255 characters
     */
    name?: pulumi.Input<string>;
    /**
     * Status of the VEN. Allowed values are "active", and "suspended"
     */
    status: pulumi.Input<string>;
    /**
     * The FQDN of the PCE that the VEN will use for future connections
     */
    targetPceFqdn?: pulumi.Input<string>;
}
