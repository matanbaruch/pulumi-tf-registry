// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ContainerClusterWorkloadProfile extends pulumi.CustomResource {
    /**
     * Get an existing ContainerClusterWorkloadProfile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ContainerClusterWorkloadProfileState, opts?: pulumi.CustomResourceOptions): ContainerClusterWorkloadProfile {
        return new ContainerClusterWorkloadProfile(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'illumio-core:index/containerClusterWorkloadProfile:ContainerClusterWorkloadProfile';

    /**
     * Returns true if the given object is an instance of ContainerClusterWorkloadProfile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ContainerClusterWorkloadProfile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ContainerClusterWorkloadProfile.__pulumiType;
    }

    /**
     * Assigned labels container workload profile
     *
     * @deprecated Deprecated
     */
    public readonly assignLabels!: pulumi.Output<outputs.ContainerClusterWorkloadProfileAssignLabel[] | undefined>;
    /**
     * URI of Container Cluster
     */
    public readonly containerClusterHref!: pulumi.Output<string>;
    /**
     * Timestamp when this container workload profile was first created
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * User who created this container workload profile
     */
    public /*out*/ readonly createdBy!: pulumi.Output<{[key: string]: string}>;
    /**
     * Description of the container workload profile
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Enforcement mode of container workload profiles to return. Allowed values for enforcement modes are "idle",
     * "visibility_only", "full", and "selective". Default value: "idle"
     */
    public readonly enforcementMode!: pulumi.Output<string | undefined>;
    /**
     * URI of the container workload profile
     */
    public /*out*/ readonly href!: pulumi.Output<string>;
    /**
     * Labels to assign to the workload that matches the namespace
     */
    public readonly labels!: pulumi.Output<outputs.ContainerClusterWorkloadProfileLabel[] | undefined>;
    /**
     * True if the namespace exists in the cluster and is reported by Kubelink
     */
    public /*out*/ readonly linked!: pulumi.Output<boolean>;
    /**
     * If the namespace is managed or not
     */
    public readonly managed!: pulumi.Output<boolean | undefined>;
    /**
     * A friendly name given to a profile if the namespace is not user-friendly. The name should be up to 255 characters
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Namespace name of the container workload profile
     */
    public /*out*/ readonly namespace!: pulumi.Output<string>;
    /**
     * Timestamp when this container workload profile was last updated
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;
    /**
     * User who last updated this container workload profile
     */
    public /*out*/ readonly updatedBy!: pulumi.Output<{[key: string]: string}>;
    /**
     * Visibility Level of the container cluster workload profile
     */
    public /*out*/ readonly visibilityLevel!: pulumi.Output<string>;

    /**
     * Create a ContainerClusterWorkloadProfile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ContainerClusterWorkloadProfileArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ContainerClusterWorkloadProfileArgs | ContainerClusterWorkloadProfileState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ContainerClusterWorkloadProfileState | undefined;
            resourceInputs["assignLabels"] = state ? state.assignLabels : undefined;
            resourceInputs["containerClusterHref"] = state ? state.containerClusterHref : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["createdBy"] = state ? state.createdBy : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["enforcementMode"] = state ? state.enforcementMode : undefined;
            resourceInputs["href"] = state ? state.href : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["linked"] = state ? state.linked : undefined;
            resourceInputs["managed"] = state ? state.managed : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
            resourceInputs["updatedBy"] = state ? state.updatedBy : undefined;
            resourceInputs["visibilityLevel"] = state ? state.visibilityLevel : undefined;
        } else {
            const args = argsOrState as ContainerClusterWorkloadProfileArgs | undefined;
            if ((!args || args.containerClusterHref === undefined) && !opts.urn) {
                throw new Error("Missing required property 'containerClusterHref'");
            }
            resourceInputs["assignLabels"] = args ? args.assignLabels : undefined;
            resourceInputs["containerClusterHref"] = args ? args.containerClusterHref : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["enforcementMode"] = args ? args.enforcementMode : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["managed"] = args ? args.managed : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["createdBy"] = undefined /*out*/;
            resourceInputs["href"] = undefined /*out*/;
            resourceInputs["linked"] = undefined /*out*/;
            resourceInputs["namespace"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
            resourceInputs["updatedBy"] = undefined /*out*/;
            resourceInputs["visibilityLevel"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ContainerClusterWorkloadProfile.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ContainerClusterWorkloadProfile resources.
 */
export interface ContainerClusterWorkloadProfileState {
    /**
     * Assigned labels container workload profile
     *
     * @deprecated Deprecated
     */
    assignLabels?: pulumi.Input<pulumi.Input<inputs.ContainerClusterWorkloadProfileAssignLabel>[]>;
    /**
     * URI of Container Cluster
     */
    containerClusterHref?: pulumi.Input<string>;
    /**
     * Timestamp when this container workload profile was first created
     */
    createdAt?: pulumi.Input<string>;
    /**
     * User who created this container workload profile
     */
    createdBy?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Description of the container workload profile
     */
    description?: pulumi.Input<string>;
    /**
     * Enforcement mode of container workload profiles to return. Allowed values for enforcement modes are "idle",
     * "visibility_only", "full", and "selective". Default value: "idle"
     */
    enforcementMode?: pulumi.Input<string>;
    /**
     * URI of the container workload profile
     */
    href?: pulumi.Input<string>;
    /**
     * Labels to assign to the workload that matches the namespace
     */
    labels?: pulumi.Input<pulumi.Input<inputs.ContainerClusterWorkloadProfileLabel>[]>;
    /**
     * True if the namespace exists in the cluster and is reported by Kubelink
     */
    linked?: pulumi.Input<boolean>;
    /**
     * If the namespace is managed or not
     */
    managed?: pulumi.Input<boolean>;
    /**
     * A friendly name given to a profile if the namespace is not user-friendly. The name should be up to 255 characters
     */
    name?: pulumi.Input<string>;
    /**
     * Namespace name of the container workload profile
     */
    namespace?: pulumi.Input<string>;
    /**
     * Timestamp when this container workload profile was last updated
     */
    updatedAt?: pulumi.Input<string>;
    /**
     * User who last updated this container workload profile
     */
    updatedBy?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Visibility Level of the container cluster workload profile
     */
    visibilityLevel?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ContainerClusterWorkloadProfile resource.
 */
export interface ContainerClusterWorkloadProfileArgs {
    /**
     * Assigned labels container workload profile
     *
     * @deprecated Deprecated
     */
    assignLabels?: pulumi.Input<pulumi.Input<inputs.ContainerClusterWorkloadProfileAssignLabel>[]>;
    /**
     * URI of Container Cluster
     */
    containerClusterHref: pulumi.Input<string>;
    /**
     * Description of the container workload profile
     */
    description?: pulumi.Input<string>;
    /**
     * Enforcement mode of container workload profiles to return. Allowed values for enforcement modes are "idle",
     * "visibility_only", "full", and "selective". Default value: "idle"
     */
    enforcementMode?: pulumi.Input<string>;
    /**
     * Labels to assign to the workload that matches the namespace
     */
    labels?: pulumi.Input<pulumi.Input<inputs.ContainerClusterWorkloadProfileLabel>[]>;
    /**
     * If the namespace is managed or not
     */
    managed?: pulumi.Input<boolean>;
    /**
     * A friendly name given to a profile if the namespace is not user-friendly. The name should be up to 255 characters
     */
    name?: pulumi.Input<string>;
}
