// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SyslogDestination extends pulumi.CustomResource {
    /**
     * Get an existing SyslogDestination resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SyslogDestinationState, opts?: pulumi.CustomResourceOptions): SyslogDestination {
        return new SyslogDestination(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'illumio-core:index/syslogDestination:SyslogDestination';

    /**
     * Returns true if the given object is an instance of SyslogDestination.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SyslogDestination {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SyslogDestination.__pulumiType;
    }

    /**
     * audit_event_logger details for destination
     */
    public readonly auditEventLogger!: pulumi.Output<outputs.SyslogDestinationAuditEventLogger>;
    /**
     * Description of the destination
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * URI of the destination
     */
    public /*out*/ readonly href!: pulumi.Output<string>;
    /**
     * node_status_logger details for destination
     */
    public readonly nodeStatusLogger!: pulumi.Output<outputs.SyslogDestinationNodeStatusLogger>;
    /**
     * pce_scope for destination
     */
    public readonly pceScopes!: pulumi.Output<string[]>;
    /**
     * remote_syslog details for destination. Required when type is set to "remote_syslog"
     */
    public readonly remoteSyslog!: pulumi.Output<outputs.SyslogDestinationRemoteSyslog | undefined>;
    /**
     * traffic_event_logger details for destination
     */
    public readonly trafficEventLogger!: pulumi.Output<outputs.SyslogDestinationTrafficEventLogger>;
    /**
     * Destination type. Allowed values are "local_syslog" and "remote_syslog"
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a SyslogDestination resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SyslogDestinationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SyslogDestinationArgs | SyslogDestinationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SyslogDestinationState | undefined;
            resourceInputs["auditEventLogger"] = state ? state.auditEventLogger : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["href"] = state ? state.href : undefined;
            resourceInputs["nodeStatusLogger"] = state ? state.nodeStatusLogger : undefined;
            resourceInputs["pceScopes"] = state ? state.pceScopes : undefined;
            resourceInputs["remoteSyslog"] = state ? state.remoteSyslog : undefined;
            resourceInputs["trafficEventLogger"] = state ? state.trafficEventLogger : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as SyslogDestinationArgs | undefined;
            if ((!args || args.auditEventLogger === undefined) && !opts.urn) {
                throw new Error("Missing required property 'auditEventLogger'");
            }
            if ((!args || args.description === undefined) && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if ((!args || args.nodeStatusLogger === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nodeStatusLogger'");
            }
            if ((!args || args.pceScopes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'pceScopes'");
            }
            if ((!args || args.trafficEventLogger === undefined) && !opts.urn) {
                throw new Error("Missing required property 'trafficEventLogger'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["auditEventLogger"] = args ? args.auditEventLogger : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["nodeStatusLogger"] = args ? args.nodeStatusLogger : undefined;
            resourceInputs["pceScopes"] = args ? args.pceScopes : undefined;
            resourceInputs["remoteSyslog"] = args ? args.remoteSyslog : undefined;
            resourceInputs["trafficEventLogger"] = args ? args.trafficEventLogger : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["href"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SyslogDestination.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SyslogDestination resources.
 */
export interface SyslogDestinationState {
    /**
     * audit_event_logger details for destination
     */
    auditEventLogger?: pulumi.Input<inputs.SyslogDestinationAuditEventLogger>;
    /**
     * Description of the destination
     */
    description?: pulumi.Input<string>;
    /**
     * URI of the destination
     */
    href?: pulumi.Input<string>;
    /**
     * node_status_logger details for destination
     */
    nodeStatusLogger?: pulumi.Input<inputs.SyslogDestinationNodeStatusLogger>;
    /**
     * pce_scope for destination
     */
    pceScopes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * remote_syslog details for destination. Required when type is set to "remote_syslog"
     */
    remoteSyslog?: pulumi.Input<inputs.SyslogDestinationRemoteSyslog>;
    /**
     * traffic_event_logger details for destination
     */
    trafficEventLogger?: pulumi.Input<inputs.SyslogDestinationTrafficEventLogger>;
    /**
     * Destination type. Allowed values are "local_syslog" and "remote_syslog"
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SyslogDestination resource.
 */
export interface SyslogDestinationArgs {
    /**
     * audit_event_logger details for destination
     */
    auditEventLogger: pulumi.Input<inputs.SyslogDestinationAuditEventLogger>;
    /**
     * Description of the destination
     */
    description: pulumi.Input<string>;
    /**
     * node_status_logger details for destination
     */
    nodeStatusLogger: pulumi.Input<inputs.SyslogDestinationNodeStatusLogger>;
    /**
     * pce_scope for destination
     */
    pceScopes: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * remote_syslog details for destination. Required when type is set to "remote_syslog"
     */
    remoteSyslog?: pulumi.Input<inputs.SyslogDestinationRemoteSyslog>;
    /**
     * traffic_event_logger details for destination
     */
    trafficEventLogger: pulumi.Input<inputs.SyslogDestinationTrafficEventLogger>;
    /**
     * Destination type. Allowed values are "local_syslog" and "remote_syslog"
     */
    type: pulumi.Input<string>;
}
