// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class PairingProfile extends pulumi.CustomResource {
    /**
     * Get an existing PairingProfile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PairingProfileState, opts?: pulumi.CustomResourceOptions): PairingProfile {
        return new PairingProfile(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'illumio-core:index/pairingProfile:PairingProfile';

    /**
     * Returns true if the given object is an instance of PairingProfile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PairingProfile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PairingProfile.__pulumiType;
    }

    /**
     * Agent software release associated with this paring profile
     */
    public readonly agentSoftwareRelease!: pulumi.Output<string>;
    /**
     * The number of times pairing profile keys can be usedd. Allowed values are range(1-2147483647) and "unlimited". Default
     * value: "unlimited"
     */
    public readonly allowedUsesPerKey!: pulumi.Output<string | undefined>;
    /**
     * Flag that controls whether app label can be overridden from pairing script. Default value: true
     */
    public readonly appLabelLock!: pulumi.Output<boolean | undefined>;
    /**
     * User permissions for the object
     */
    public /*out*/ readonly caps!: pulumi.Output<string[]>;
    /**
     * Timestamp when this pairing profile was first created
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * User who created this pairing profile
     */
    public /*out*/ readonly createdBy!: pulumi.Output<{[key: string]: string}>;
    /**
     * The long description of the pairing profile
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The enabled flag of the pairing profile
     */
    public readonly enabled!: pulumi.Output<boolean>;
    /**
     * Flag that controls whether mode can be overridden from pairing script. Allowed values are "idle", "visibility_only",
     * "full" and "selective". Default value: "visibility_only"
     */
    public readonly enforcementMode!: pulumi.Output<string | undefined>;
    /**
     * Flag that controls whether enforcement mode can be overridden from pairing script, Default value: true
     */
    public readonly enforcementModeLock!: pulumi.Output<boolean | undefined>;
    /**
     * Flag that controls whether env label can be overridden from pairing script. Default value: true
     */
    public readonly envLabelLock!: pulumi.Output<boolean | undefined>;
    /**
     * A unique identifier within the external data source
     */
    public readonly externalDataReference!: pulumi.Output<string | undefined>;
    /**
     * The data source from which a resource originates
     */
    public readonly externalDataSet!: pulumi.Output<string | undefined>;
    /**
     * URI of this pairing profile
     */
    public /*out*/ readonly href!: pulumi.Output<string>;
    /**
     * Flag indicating this is default auto-created pairing profile
     */
    public /*out*/ readonly isDefault!: pulumi.Output<boolean>;
    /**
     * Number of seconds pairing profile keys will be valid for. Allowed values are range(1-2147483647) and "unlimited".
     * Default value: "unlimited"
     */
    public readonly keyLifespan!: pulumi.Output<string | undefined>;
    /**
     * Assigned labels
     */
    public readonly labels!: pulumi.Output<outputs.PairingProfileLabel[] | undefined>;
    /**
     * Timestamp when this pairing profile was last used for pairing a workload
     */
    public /*out*/ readonly lastPairingAt!: pulumi.Output<string>;
    /**
     * Flag that controls whether loc label can be overridden from pairing script. Default value: true
     */
    public readonly locLabelLock!: pulumi.Output<boolean | undefined>;
    /**
     * Status of VEN(alternative of status). Default value: false
     */
    public readonly logTraffic!: pulumi.Output<boolean | undefined>;
    /**
     * Flag that controls whether log_traffic can be overridden from pairing script. Default value: true
     */
    public readonly logTrafficLock!: pulumi.Output<boolean | undefined>;
    /**
     * The short friendly name of the pairing profile. The name should be between 1 to 255 characters
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Flag that controls whether role label can be overridden from pairing script. Default value: true
     */
    public readonly roleLabelLock!: pulumi.Output<boolean | undefined>;
    /**
     * State of VEN
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * Flag that controls whether status can be overridden from pairing script
     */
    public /*out*/ readonly statusLock!: pulumi.Output<boolean>;
    /**
     * The number of times the pairing profile has been used
     */
    public /*out*/ readonly totalUseCount!: pulumi.Output<number>;
    /**
     * Timestamp when this pairing profile was last updated
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;
    /**
     * User who last updated this pairing profile
     */
    public /*out*/ readonly updatedBy!: pulumi.Output<{[key: string]: string}>;
    /**
     * Visibility level of the agent. Allowed values are "flow_full_detail", "flow_summary", "flow_drops", "flow_off" and
     * "enhanced_data_collection". Default value: "flow_summary"
     */
    public readonly visibilityLevel!: pulumi.Output<string | undefined>;
    /**
     * Flag that controls whether visibility_level can be overridden from pairing script. Default value: true
     */
    public readonly visibilityLevelLock!: pulumi.Output<boolean | undefined>;

    /**
     * Create a PairingProfile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PairingProfileArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PairingProfileArgs | PairingProfileState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PairingProfileState | undefined;
            resourceInputs["agentSoftwareRelease"] = state ? state.agentSoftwareRelease : undefined;
            resourceInputs["allowedUsesPerKey"] = state ? state.allowedUsesPerKey : undefined;
            resourceInputs["appLabelLock"] = state ? state.appLabelLock : undefined;
            resourceInputs["caps"] = state ? state.caps : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["createdBy"] = state ? state.createdBy : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["enforcementMode"] = state ? state.enforcementMode : undefined;
            resourceInputs["enforcementModeLock"] = state ? state.enforcementModeLock : undefined;
            resourceInputs["envLabelLock"] = state ? state.envLabelLock : undefined;
            resourceInputs["externalDataReference"] = state ? state.externalDataReference : undefined;
            resourceInputs["externalDataSet"] = state ? state.externalDataSet : undefined;
            resourceInputs["href"] = state ? state.href : undefined;
            resourceInputs["isDefault"] = state ? state.isDefault : undefined;
            resourceInputs["keyLifespan"] = state ? state.keyLifespan : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["lastPairingAt"] = state ? state.lastPairingAt : undefined;
            resourceInputs["locLabelLock"] = state ? state.locLabelLock : undefined;
            resourceInputs["logTraffic"] = state ? state.logTraffic : undefined;
            resourceInputs["logTrafficLock"] = state ? state.logTrafficLock : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["roleLabelLock"] = state ? state.roleLabelLock : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["statusLock"] = state ? state.statusLock : undefined;
            resourceInputs["totalUseCount"] = state ? state.totalUseCount : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
            resourceInputs["updatedBy"] = state ? state.updatedBy : undefined;
            resourceInputs["visibilityLevel"] = state ? state.visibilityLevel : undefined;
            resourceInputs["visibilityLevelLock"] = state ? state.visibilityLevelLock : undefined;
        } else {
            const args = argsOrState as PairingProfileArgs | undefined;
            if ((!args || args.enabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enabled'");
            }
            resourceInputs["agentSoftwareRelease"] = args ? args.agentSoftwareRelease : undefined;
            resourceInputs["allowedUsesPerKey"] = args ? args.allowedUsesPerKey : undefined;
            resourceInputs["appLabelLock"] = args ? args.appLabelLock : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["enforcementMode"] = args ? args.enforcementMode : undefined;
            resourceInputs["enforcementModeLock"] = args ? args.enforcementModeLock : undefined;
            resourceInputs["envLabelLock"] = args ? args.envLabelLock : undefined;
            resourceInputs["externalDataReference"] = args ? args.externalDataReference : undefined;
            resourceInputs["externalDataSet"] = args ? args.externalDataSet : undefined;
            resourceInputs["keyLifespan"] = args ? args.keyLifespan : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["locLabelLock"] = args ? args.locLabelLock : undefined;
            resourceInputs["logTraffic"] = args ? args.logTraffic : undefined;
            resourceInputs["logTrafficLock"] = args ? args.logTrafficLock : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["roleLabelLock"] = args ? args.roleLabelLock : undefined;
            resourceInputs["visibilityLevel"] = args ? args.visibilityLevel : undefined;
            resourceInputs["visibilityLevelLock"] = args ? args.visibilityLevelLock : undefined;
            resourceInputs["caps"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["createdBy"] = undefined /*out*/;
            resourceInputs["href"] = undefined /*out*/;
            resourceInputs["isDefault"] = undefined /*out*/;
            resourceInputs["lastPairingAt"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["statusLock"] = undefined /*out*/;
            resourceInputs["totalUseCount"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
            resourceInputs["updatedBy"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PairingProfile.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering PairingProfile resources.
 */
export interface PairingProfileState {
    /**
     * Agent software release associated with this paring profile
     */
    agentSoftwareRelease?: pulumi.Input<string>;
    /**
     * The number of times pairing profile keys can be usedd. Allowed values are range(1-2147483647) and "unlimited". Default
     * value: "unlimited"
     */
    allowedUsesPerKey?: pulumi.Input<string>;
    /**
     * Flag that controls whether app label can be overridden from pairing script. Default value: true
     */
    appLabelLock?: pulumi.Input<boolean>;
    /**
     * User permissions for the object
     */
    caps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Timestamp when this pairing profile was first created
     */
    createdAt?: pulumi.Input<string>;
    /**
     * User who created this pairing profile
     */
    createdBy?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The long description of the pairing profile
     */
    description?: pulumi.Input<string>;
    /**
     * The enabled flag of the pairing profile
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Flag that controls whether mode can be overridden from pairing script. Allowed values are "idle", "visibility_only",
     * "full" and "selective". Default value: "visibility_only"
     */
    enforcementMode?: pulumi.Input<string>;
    /**
     * Flag that controls whether enforcement mode can be overridden from pairing script, Default value: true
     */
    enforcementModeLock?: pulumi.Input<boolean>;
    /**
     * Flag that controls whether env label can be overridden from pairing script. Default value: true
     */
    envLabelLock?: pulumi.Input<boolean>;
    /**
     * A unique identifier within the external data source
     */
    externalDataReference?: pulumi.Input<string>;
    /**
     * The data source from which a resource originates
     */
    externalDataSet?: pulumi.Input<string>;
    /**
     * URI of this pairing profile
     */
    href?: pulumi.Input<string>;
    /**
     * Flag indicating this is default auto-created pairing profile
     */
    isDefault?: pulumi.Input<boolean>;
    /**
     * Number of seconds pairing profile keys will be valid for. Allowed values are range(1-2147483647) and "unlimited".
     * Default value: "unlimited"
     */
    keyLifespan?: pulumi.Input<string>;
    /**
     * Assigned labels
     */
    labels?: pulumi.Input<pulumi.Input<inputs.PairingProfileLabel>[]>;
    /**
     * Timestamp when this pairing profile was last used for pairing a workload
     */
    lastPairingAt?: pulumi.Input<string>;
    /**
     * Flag that controls whether loc label can be overridden from pairing script. Default value: true
     */
    locLabelLock?: pulumi.Input<boolean>;
    /**
     * Status of VEN(alternative of status). Default value: false
     */
    logTraffic?: pulumi.Input<boolean>;
    /**
     * Flag that controls whether log_traffic can be overridden from pairing script. Default value: true
     */
    logTrafficLock?: pulumi.Input<boolean>;
    /**
     * The short friendly name of the pairing profile. The name should be between 1 to 255 characters
     */
    name?: pulumi.Input<string>;
    /**
     * Flag that controls whether role label can be overridden from pairing script. Default value: true
     */
    roleLabelLock?: pulumi.Input<boolean>;
    /**
     * State of VEN
     */
    status?: pulumi.Input<string>;
    /**
     * Flag that controls whether status can be overridden from pairing script
     */
    statusLock?: pulumi.Input<boolean>;
    /**
     * The number of times the pairing profile has been used
     */
    totalUseCount?: pulumi.Input<number>;
    /**
     * Timestamp when this pairing profile was last updated
     */
    updatedAt?: pulumi.Input<string>;
    /**
     * User who last updated this pairing profile
     */
    updatedBy?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Visibility level of the agent. Allowed values are "flow_full_detail", "flow_summary", "flow_drops", "flow_off" and
     * "enhanced_data_collection". Default value: "flow_summary"
     */
    visibilityLevel?: pulumi.Input<string>;
    /**
     * Flag that controls whether visibility_level can be overridden from pairing script. Default value: true
     */
    visibilityLevelLock?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a PairingProfile resource.
 */
export interface PairingProfileArgs {
    /**
     * Agent software release associated with this paring profile
     */
    agentSoftwareRelease?: pulumi.Input<string>;
    /**
     * The number of times pairing profile keys can be usedd. Allowed values are range(1-2147483647) and "unlimited". Default
     * value: "unlimited"
     */
    allowedUsesPerKey?: pulumi.Input<string>;
    /**
     * Flag that controls whether app label can be overridden from pairing script. Default value: true
     */
    appLabelLock?: pulumi.Input<boolean>;
    /**
     * The long description of the pairing profile
     */
    description?: pulumi.Input<string>;
    /**
     * The enabled flag of the pairing profile
     */
    enabled: pulumi.Input<boolean>;
    /**
     * Flag that controls whether mode can be overridden from pairing script. Allowed values are "idle", "visibility_only",
     * "full" and "selective". Default value: "visibility_only"
     */
    enforcementMode?: pulumi.Input<string>;
    /**
     * Flag that controls whether enforcement mode can be overridden from pairing script, Default value: true
     */
    enforcementModeLock?: pulumi.Input<boolean>;
    /**
     * Flag that controls whether env label can be overridden from pairing script. Default value: true
     */
    envLabelLock?: pulumi.Input<boolean>;
    /**
     * A unique identifier within the external data source
     */
    externalDataReference?: pulumi.Input<string>;
    /**
     * The data source from which a resource originates
     */
    externalDataSet?: pulumi.Input<string>;
    /**
     * Number of seconds pairing profile keys will be valid for. Allowed values are range(1-2147483647) and "unlimited".
     * Default value: "unlimited"
     */
    keyLifespan?: pulumi.Input<string>;
    /**
     * Assigned labels
     */
    labels?: pulumi.Input<pulumi.Input<inputs.PairingProfileLabel>[]>;
    /**
     * Flag that controls whether loc label can be overridden from pairing script. Default value: true
     */
    locLabelLock?: pulumi.Input<boolean>;
    /**
     * Status of VEN(alternative of status). Default value: false
     */
    logTraffic?: pulumi.Input<boolean>;
    /**
     * Flag that controls whether log_traffic can be overridden from pairing script. Default value: true
     */
    logTrafficLock?: pulumi.Input<boolean>;
    /**
     * The short friendly name of the pairing profile. The name should be between 1 to 255 characters
     */
    name?: pulumi.Input<string>;
    /**
     * Flag that controls whether role label can be overridden from pairing script. Default value: true
     */
    roleLabelLock?: pulumi.Input<boolean>;
    /**
     * Visibility level of the agent. Allowed values are "flow_full_detail", "flow_summary", "flow_drops", "flow_off" and
     * "enhanced_data_collection". Default value: "flow_summary"
     */
    visibilityLevel?: pulumi.Input<string>;
    /**
     * Flag that controls whether visibility_level can be overridden from pairing script. Default value: true
     */
    visibilityLevelLock?: pulumi.Input<boolean>;
}
