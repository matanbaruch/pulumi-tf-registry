// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class PairingKeys extends pulumi.CustomResource {
    /**
     * Get an existing PairingKeys resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PairingKeysState, opts?: pulumi.CustomResourceOptions): PairingKeys {
        return new PairingKeys(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'illumio-core:index/pairingKeys:PairingKeys';

    /**
     * Returns true if the given object is an instance of PairingKeys.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PairingKeys {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PairingKeys.__pulumiType;
    }

    /**
     * List of activation tokens
     */
    public /*out*/ readonly activationTokens!: pulumi.Output<outputs.PairingKeysActivationToken[]>;
    /**
     * Href of pairing profile
     */
    public readonly pairingProfileHref!: pulumi.Output<string>;
    /**
     * Count of token to generate/maintain. It can be accessed in `activation_tokens` On increasing the count, new activation
     * tokens will be generated. On decreasing the count `activation_tokens` list will shrink to that size and extra keys will
     * be discarded. Allowed range is 1 to 5
     */
    public readonly tokenCount!: pulumi.Output<number>;

    /**
     * Create a PairingKeys resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PairingKeysArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PairingKeysArgs | PairingKeysState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PairingKeysState | undefined;
            resourceInputs["activationTokens"] = state ? state.activationTokens : undefined;
            resourceInputs["pairingProfileHref"] = state ? state.pairingProfileHref : undefined;
            resourceInputs["tokenCount"] = state ? state.tokenCount : undefined;
        } else {
            const args = argsOrState as PairingKeysArgs | undefined;
            if ((!args || args.pairingProfileHref === undefined) && !opts.urn) {
                throw new Error("Missing required property 'pairingProfileHref'");
            }
            if ((!args || args.tokenCount === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tokenCount'");
            }
            resourceInputs["pairingProfileHref"] = args ? args.pairingProfileHref : undefined;
            resourceInputs["tokenCount"] = args ? args.tokenCount : undefined;
            resourceInputs["activationTokens"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PairingKeys.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering PairingKeys resources.
 */
export interface PairingKeysState {
    /**
     * List of activation tokens
     */
    activationTokens?: pulumi.Input<pulumi.Input<inputs.PairingKeysActivationToken>[]>;
    /**
     * Href of pairing profile
     */
    pairingProfileHref?: pulumi.Input<string>;
    /**
     * Count of token to generate/maintain. It can be accessed in `activation_tokens` On increasing the count, new activation
     * tokens will be generated. On decreasing the count `activation_tokens` list will shrink to that size and extra keys will
     * be discarded. Allowed range is 1 to 5
     */
    tokenCount?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a PairingKeys resource.
 */
export interface PairingKeysArgs {
    /**
     * Href of pairing profile
     */
    pairingProfileHref: pulumi.Input<string>;
    /**
     * Count of token to generate/maintain. It can be accessed in `activation_tokens` On increasing the count, new activation
     * tokens will be generated. On decreasing the count `activation_tokens` list will shrink to that size and extra keys will
     * be discarded. Allowed range is 1 to 5
     */
    tokenCount: pulumi.Input<number>;
}
