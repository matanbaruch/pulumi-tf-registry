// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class TrafficCollectorSettings extends pulumi.CustomResource {
    /**
     * Get an existing TrafficCollectorSettings resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TrafficCollectorSettingsState, opts?: pulumi.CustomResourceOptions): TrafficCollectorSettings {
        return new TrafficCollectorSettings(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'illumio-core:index/trafficCollectorSettings:TrafficCollectorSettings';

    /**
     * Returns true if the given object is an instance of TrafficCollectorSettings.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TrafficCollectorSettings {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TrafficCollectorSettings.__pulumiType;
    }

    /**
     * action for target traffic. Allowed values are "drop" or "aggregate"
     */
    public readonly action!: pulumi.Output<string>;
    /**
     * URI of traffic collecter settings
     */
    public /*out*/ readonly href!: pulumi.Output<string>;
    /**
     * target for traffic collector settings. Required if value of action is "drop"
     */
    public readonly target!: pulumi.Output<outputs.TrafficCollectorSettingsTarget | undefined>;
    /**
     * transmission type. Allowed values are "broadcast" and "multicast"
     */
    public readonly transmission!: pulumi.Output<string>;

    /**
     * Create a TrafficCollectorSettings resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TrafficCollectorSettingsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TrafficCollectorSettingsArgs | TrafficCollectorSettingsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TrafficCollectorSettingsState | undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["href"] = state ? state.href : undefined;
            resourceInputs["target"] = state ? state.target : undefined;
            resourceInputs["transmission"] = state ? state.transmission : undefined;
        } else {
            const args = argsOrState as TrafficCollectorSettingsArgs | undefined;
            if ((!args || args.action === undefined) && !opts.urn) {
                throw new Error("Missing required property 'action'");
            }
            if ((!args || args.transmission === undefined) && !opts.urn) {
                throw new Error("Missing required property 'transmission'");
            }
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["target"] = args ? args.target : undefined;
            resourceInputs["transmission"] = args ? args.transmission : undefined;
            resourceInputs["href"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TrafficCollectorSettings.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering TrafficCollectorSettings resources.
 */
export interface TrafficCollectorSettingsState {
    /**
     * action for target traffic. Allowed values are "drop" or "aggregate"
     */
    action?: pulumi.Input<string>;
    /**
     * URI of traffic collecter settings
     */
    href?: pulumi.Input<string>;
    /**
     * target for traffic collector settings. Required if value of action is "drop"
     */
    target?: pulumi.Input<inputs.TrafficCollectorSettingsTarget>;
    /**
     * transmission type. Allowed values are "broadcast" and "multicast"
     */
    transmission?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a TrafficCollectorSettings resource.
 */
export interface TrafficCollectorSettingsArgs {
    /**
     * action for target traffic. Allowed values are "drop" or "aggregate"
     */
    action: pulumi.Input<string>;
    /**
     * target for traffic collector settings. Required if value of action is "drop"
     */
    target?: pulumi.Input<inputs.TrafficCollectorSettingsTarget>;
    /**
     * transmission type. Allowed values are "broadcast" and "multicast"
     */
    transmission: pulumi.Input<string>;
}
