// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getPairingProfile(args: GetPairingProfileArgs, opts?: pulumi.InvokeOptions): Promise<GetPairingProfileResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("illumio-core:index/getPairingProfile:getPairingProfile", {
        "href": args.href,
        "id": args.id,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getPairingProfile.
 */
export interface GetPairingProfileArgs {
    href: string;
    id?: string;
}

/**
 * A collection of values returned by getPairingProfile.
 */
export interface GetPairingProfileResult {
    readonly agentSoftwareRelease: string;
    readonly allowedUsesPerKey: string;
    readonly appLabelLock: boolean;
    readonly caps: string[];
    readonly createdAt: string;
    readonly createdBy: {[key: string]: string};
    readonly description: string;
    readonly enabled: boolean;
    readonly enforcementMode: string;
    readonly enforcementModeLock: boolean;
    readonly envLabelLock: boolean;
    readonly externalDataReference: string;
    readonly externalDataSet: string;
    readonly href: string;
    readonly id: string;
    readonly isDefault: boolean;
    readonly keyLifespan: string;
    readonly labels: outputs.GetPairingProfileLabel[];
    readonly lastPairingAt: string;
    readonly locLabelLock: boolean;
    readonly logTraffic: boolean;
    readonly logTrafficLock: boolean;
    readonly name: string;
    readonly roleLabelLock: boolean;
    readonly status: string;
    readonly statusLock: boolean;
    readonly totalUseCount: number;
    readonly updatedAt: string;
    readonly updatedBy: {[key: string]: string};
    readonly visibilityLevel: string;
    readonly visibilityLevelLock: boolean;
}
export function getPairingProfileOutput(args: GetPairingProfileOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetPairingProfileResult> {
    return pulumi.output(args).apply((a: any) => getPairingProfile(a, opts))
}

/**
 * A collection of arguments for invoking getPairingProfile.
 */
export interface GetPairingProfileOutputArgs {
    href: pulumi.Input<string>;
    id?: pulumi.Input<string>;
}
