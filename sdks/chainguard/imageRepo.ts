// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ImageRepo extends pulumi.CustomResource {
    /**
     * Get an existing ImageRepo resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ImageRepoState, opts?: pulumi.CustomResourceOptions): ImageRepo {
        return new ImageRepo(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'chainguard:index/imageRepo:ImageRepo';

    /**
     * Returns true if the given object is an instance of ImageRepo.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ImageRepo {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ImageRepo.__pulumiType;
    }

    /**
     * List of bundles associated with this repo (a-z freeform keywords for sales purposes).
     */
    public readonly bundles!: pulumi.Output<string[] | undefined>;
    /**
     * The name of this repo.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The group that owns the repo.
     */
    public readonly parentId!: pulumi.Output<string>;
    /**
     * The README for this repo.
     */
    public readonly readme!: pulumi.Output<string | undefined>;
    /**
     * Configuration for catalog syncing.
     */
    public readonly syncConfig!: pulumi.Output<outputs.ImageRepoSyncConfig | undefined>;
    /**
     * Image tier associated with this repo.
     */
    public readonly tier!: pulumi.Output<string | undefined>;

    /**
     * Create a ImageRepo resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ImageRepoArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ImageRepoArgs | ImageRepoState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ImageRepoState | undefined;
            resourceInputs["bundles"] = state ? state.bundles : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["parentId"] = state ? state.parentId : undefined;
            resourceInputs["readme"] = state ? state.readme : undefined;
            resourceInputs["syncConfig"] = state ? state.syncConfig : undefined;
            resourceInputs["tier"] = state ? state.tier : undefined;
        } else {
            const args = argsOrState as ImageRepoArgs | undefined;
            if ((!args || args.parentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'parentId'");
            }
            resourceInputs["bundles"] = args ? args.bundles : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["parentId"] = args ? args.parentId : undefined;
            resourceInputs["readme"] = args ? args.readme : undefined;
            resourceInputs["syncConfig"] = args ? args.syncConfig : undefined;
            resourceInputs["tier"] = args ? args.tier : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ImageRepo.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ImageRepo resources.
 */
export interface ImageRepoState {
    /**
     * List of bundles associated with this repo (a-z freeform keywords for sales purposes).
     */
    bundles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of this repo.
     */
    name?: pulumi.Input<string>;
    /**
     * The group that owns the repo.
     */
    parentId?: pulumi.Input<string>;
    /**
     * The README for this repo.
     */
    readme?: pulumi.Input<string>;
    /**
     * Configuration for catalog syncing.
     */
    syncConfig?: pulumi.Input<inputs.ImageRepoSyncConfig>;
    /**
     * Image tier associated with this repo.
     */
    tier?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ImageRepo resource.
 */
export interface ImageRepoArgs {
    /**
     * List of bundles associated with this repo (a-z freeform keywords for sales purposes).
     */
    bundles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of this repo.
     */
    name?: pulumi.Input<string>;
    /**
     * The group that owns the repo.
     */
    parentId: pulumi.Input<string>;
    /**
     * The README for this repo.
     */
    readme?: pulumi.Input<string>;
    /**
     * Configuration for catalog syncing.
     */
    syncConfig?: pulumi.Input<inputs.ImageRepoSyncConfig>;
    /**
     * Image tier associated with this repo.
     */
    tier?: pulumi.Input<string>;
}
