// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class AccountAssociations extends pulumi.CustomResource {
    /**
     * Get an existing AccountAssociations resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AccountAssociationsState, opts?: pulumi.CustomResourceOptions): AccountAssociations {
        return new AccountAssociations(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'chainguard:index/accountAssociations:AccountAssociations';

    /**
     * Returns true if the given object is an instance of AccountAssociations.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AccountAssociations {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AccountAssociations.__pulumiType;
    }

    /**
     * Amazon account configuration
     */
    public readonly amazon!: pulumi.Output<outputs.AccountAssociationsAmazon | undefined>;
    /**
     * Association of Chainguard services to the service principals they should assume when talking to Chainguard APIs.
     */
    public readonly chainguard!: pulumi.Output<outputs.AccountAssociationsChainguard | undefined>;
    /**
     * Description of the account association.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Google Cloud Platform account association configuration
     */
    public readonly google!: pulumi.Output<outputs.AccountAssociationsGoogle | undefined>;
    /**
     * The UIDP of the IAM group to associate to cloud accounts.
     */
    public readonly group!: pulumi.Output<string>;
    /**
     * Name of the account association.
     */
    public readonly name!: pulumi.Output<string>;

    /**
     * Create a AccountAssociations resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AccountAssociationsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AccountAssociationsArgs | AccountAssociationsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AccountAssociationsState | undefined;
            resourceInputs["amazon"] = state ? state.amazon : undefined;
            resourceInputs["chainguard"] = state ? state.chainguard : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["google"] = state ? state.google : undefined;
            resourceInputs["group"] = state ? state.group : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
        } else {
            const args = argsOrState as AccountAssociationsArgs | undefined;
            if ((!args || args.group === undefined) && !opts.urn) {
                throw new Error("Missing required property 'group'");
            }
            resourceInputs["amazon"] = args ? args.amazon : undefined;
            resourceInputs["chainguard"] = args ? args.chainguard : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["google"] = args ? args.google : undefined;
            resourceInputs["group"] = args ? args.group : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AccountAssociations.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AccountAssociations resources.
 */
export interface AccountAssociationsState {
    /**
     * Amazon account configuration
     */
    amazon?: pulumi.Input<inputs.AccountAssociationsAmazon>;
    /**
     * Association of Chainguard services to the service principals they should assume when talking to Chainguard APIs.
     */
    chainguard?: pulumi.Input<inputs.AccountAssociationsChainguard>;
    /**
     * Description of the account association.
     */
    description?: pulumi.Input<string>;
    /**
     * Google Cloud Platform account association configuration
     */
    google?: pulumi.Input<inputs.AccountAssociationsGoogle>;
    /**
     * The UIDP of the IAM group to associate to cloud accounts.
     */
    group?: pulumi.Input<string>;
    /**
     * Name of the account association.
     */
    name?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AccountAssociations resource.
 */
export interface AccountAssociationsArgs {
    /**
     * Amazon account configuration
     */
    amazon?: pulumi.Input<inputs.AccountAssociationsAmazon>;
    /**
     * Association of Chainguard services to the service principals they should assume when talking to Chainguard APIs.
     */
    chainguard?: pulumi.Input<inputs.AccountAssociationsChainguard>;
    /**
     * Description of the account association.
     */
    description?: pulumi.Input<string>;
    /**
     * Google Cloud Platform account association configuration
     */
    google?: pulumi.Input<inputs.AccountAssociationsGoogle>;
    /**
     * The UIDP of the IAM group to associate to cloud accounts.
     */
    group: pulumi.Input<string>;
    /**
     * Name of the account association.
     */
    name?: pulumi.Input<string>;
}
