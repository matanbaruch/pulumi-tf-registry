// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AccountAssociationsArgs, AccountAssociationsState } from "./accountAssociations";
export type AccountAssociations = import("./accountAssociations").AccountAssociations;
export const AccountAssociations: typeof import("./accountAssociations").AccountAssociations = null as any;
utilities.lazyLoad(exports, ["AccountAssociations"], () => require("./accountAssociations"));

export { GetGroupArgs, GetGroupResult, GetGroupOutputArgs } from "./getGroup";
export const getGroup: typeof import("./getGroup").getGroup = null as any;
export const getGroupOutput: typeof import("./getGroup").getGroupOutput = null as any;
utilities.lazyLoad(exports, ["getGroup","getGroupOutput"], () => require("./getGroup"));

export { GetIdentityArgs, GetIdentityResult, GetIdentityOutputArgs } from "./getIdentity";
export const getIdentity: typeof import("./getIdentity").getIdentity = null as any;
export const getIdentityOutput: typeof import("./getIdentity").getIdentityOutput = null as any;
utilities.lazyLoad(exports, ["getIdentity","getIdentityOutput"], () => require("./getIdentity"));

export { GetRoleArgs, GetRoleResult, GetRoleOutputArgs } from "./getRole";
export const getRole: typeof import("./getRole").getRole = null as any;
export const getRoleOutput: typeof import("./getRole").getRoleOutput = null as any;
utilities.lazyLoad(exports, ["getRole","getRoleOutput"], () => require("./getRole"));

export { GroupArgs, GroupState } from "./group";
export type Group = import("./group").Group;
export const Group: typeof import("./group").Group = null as any;
utilities.lazyLoad(exports, ["Group"], () => require("./group"));

export { GroupInviteArgs, GroupInviteState } from "./groupInvite";
export type GroupInvite = import("./groupInvite").GroupInvite;
export const GroupInvite: typeof import("./groupInvite").GroupInvite = null as any;
utilities.lazyLoad(exports, ["GroupInvite"], () => require("./groupInvite"));

export { IdentityArgs, IdentityState } from "./identity";
export type Identity = import("./identity").Identity;
export const Identity: typeof import("./identity").Identity = null as any;
utilities.lazyLoad(exports, ["Identity"], () => require("./identity"));

export { IdentityProviderArgs, IdentityProviderState } from "./identityProvider";
export type IdentityProvider = import("./identityProvider").IdentityProvider;
export const IdentityProvider: typeof import("./identityProvider").IdentityProvider = null as any;
utilities.lazyLoad(exports, ["IdentityProvider"], () => require("./identityProvider"));

export { ImageRepoArgs, ImageRepoState } from "./imageRepo";
export type ImageRepo = import("./imageRepo").ImageRepo;
export const ImageRepo: typeof import("./imageRepo").ImageRepo = null as any;
utilities.lazyLoad(exports, ["ImageRepo"], () => require("./imageRepo"));

export { ImageTagArgs, ImageTagState } from "./imageTag";
export type ImageTag = import("./imageTag").ImageTag;
export const ImageTag: typeof import("./imageTag").ImageTag = null as any;
utilities.lazyLoad(exports, ["ImageTag"], () => require("./imageTag"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { RoleArgs, RoleState } from "./role";
export type Role = import("./role").Role;
export const Role: typeof import("./role").Role = null as any;
utilities.lazyLoad(exports, ["Role"], () => require("./role"));

export { RolebindingArgs, RolebindingState } from "./rolebinding";
export type Rolebinding = import("./rolebinding").Rolebinding;
export const Rolebinding: typeof import("./rolebinding").Rolebinding = null as any;
utilities.lazyLoad(exports, ["Rolebinding"], () => require("./rolebinding"));

export { SubscriptionArgs, SubscriptionState } from "./subscription";
export type Subscription = import("./subscription").Subscription;
export const Subscription: typeof import("./subscription").Subscription = null as any;
utilities.lazyLoad(exports, ["Subscription"], () => require("./subscription"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "chainguard:index/accountAssociations:AccountAssociations":
                return new AccountAssociations(name, <any>undefined, { urn })
            case "chainguard:index/group:Group":
                return new Group(name, <any>undefined, { urn })
            case "chainguard:index/groupInvite:GroupInvite":
                return new GroupInvite(name, <any>undefined, { urn })
            case "chainguard:index/identity:Identity":
                return new Identity(name, <any>undefined, { urn })
            case "chainguard:index/identityProvider:IdentityProvider":
                return new IdentityProvider(name, <any>undefined, { urn })
            case "chainguard:index/imageRepo:ImageRepo":
                return new ImageRepo(name, <any>undefined, { urn })
            case "chainguard:index/imageTag:ImageTag":
                return new ImageTag(name, <any>undefined, { urn })
            case "chainguard:index/role:Role":
                return new Role(name, <any>undefined, { urn })
            case "chainguard:index/rolebinding:Rolebinding":
                return new Rolebinding(name, <any>undefined, { urn })
            case "chainguard:index/subscription:Subscription":
                return new Subscription(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("chainguard", "index/accountAssociations", _module)
pulumi.runtime.registerResourceModule("chainguard", "index/group", _module)
pulumi.runtime.registerResourceModule("chainguard", "index/groupInvite", _module)
pulumi.runtime.registerResourceModule("chainguard", "index/identity", _module)
pulumi.runtime.registerResourceModule("chainguard", "index/identityProvider", _module)
pulumi.runtime.registerResourceModule("chainguard", "index/imageRepo", _module)
pulumi.runtime.registerResourceModule("chainguard", "index/imageTag", _module)
pulumi.runtime.registerResourceModule("chainguard", "index/role", _module)
pulumi.runtime.registerResourceModule("chainguard", "index/rolebinding", _module)
pulumi.runtime.registerResourceModule("chainguard", "index/subscription", _module)
pulumi.runtime.registerResourcePackage("chainguard", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:chainguard") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
