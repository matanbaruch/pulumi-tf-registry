// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface AccountAssociationsAmazon {
    /**
     * AWS account ID
     */
    account?: string;
}

export interface AccountAssociationsChainguard {
    /**
     * A map of service bindings where the key is the service name and the value is the Id of the service principal identity.
     */
    serviceBindings?: {[key: string]: string};
}

export interface AccountAssociationsGoogle {
    /**
     * GCP project id
     */
    projectId?: string;
    /**
     * GCP project number
     */
    projectNumber?: string;
}

export interface GetRoleItem {
    /**
     * The capabilities granted to this role.
     */
    capabilities: string[];
    /**
     * The description of this role.
     */
    description: string;
    /**
     * The UIDP of this role.
     */
    id: string;
    /**
     * The name of this role.
     */
    name: string;
}

export interface IdentityAwsIdentity {
    /**
     * AWS Account ID of AWS user
     */
    awsAccount?: string;
    /**
     * The exact Arn that must appear in GetCallerIdentity to assume this identity.
     */
    awsArn?: string;
    /**
     * A pattern for matching acceptable Arn that must appear in GetCallerIdentity response to assume this identity.
     */
    awsArnPattern?: string;
    /**
     * The exact UserId that must appear in GetCallerIdentity to assume this identity.
     */
    awsUserId?: string;
    /**
     * A pattern for matching acceptable UserID that must appear in GetCallerIdentity response to assume this identity.
     */
    awsUserIdPattern?: string;
}

export interface IdentityClaimMatch {
    /**
     * The exact audience that must appear in tokens to assume this identity.
     */
    audience?: string;
    /**
     * A pattern for matching acceptable audiences that appear in tokens to assume this identity.
     */
    audiencePattern?: string;
    /**
     * The custom claim patterns for matching acceptable custom claims that appear in tokens to assume this identity.
     */
    claimPatterns?: {[key: string]: string};
    /**
     * The exact custom claims that appear in tokens to assume this identity.
     */
    claims?: {[key: string]: string};
    /**
     * The exact issuer that must appear in tokens to assume this identity.
     */
    issuer?: string;
    /**
     * A pattern for matching acceptable issuers that appear in tokens to assume this identity.
     */
    issuerPattern?: string;
    /**
     * The exact subject that must appear in tokens to assume this identity.
     */
    subject?: string;
    /**
     * A pattern for matching acceptable subjects that appear in tokens to assume this identity.
     */
    subjectPattern?: string;
}

export interface IdentityProviderOidc {
    /**
     * List of scopes to request
     */
    additionalScopes?: string[];
    /**
     * Client ID for OIDC identity provider
     */
    clientId?: string;
    /**
     * Client secret for OIDC identity provider
     */
    clientSecret?: string;
    /**
     * Issuer URL
     */
    issuer?: string;
}

export interface IdentityStatic {
    /**
     * The RFC3339 encoded date and time at which this identity will no longer be valid.
     */
    expiration?: string;
    /**
     * The exact issuer that must appear in tokens to assume this identity.
     */
    issuer?: string;
    /**
     * The JSON web key set (JWKS) of the OIDC issuer that should be used to verify tokens.
     */
    issuerKeys?: string;
    /**
     * The exact subject that must appear in tokens to assume this identity.
     */
    subject?: string;
}

export interface ImageRepoSyncConfig {
    /**
     * A json-encoded APKO configuration to overlay on rebuilds of images being synced.
     */
    apkoOverlay?: string;
    /**
     * The RFC3339 encoded date and time at which this entitlement will expire.
     */
    expiration?: string;
    /**
     * The UIDP of the repository to sync images from.
     */
    source?: string;
    /**
     * Whether the APKs for each image should also be synchronized.
     */
    syncApks?: boolean;
    /**
     * Whether each synchronized tag should be suffixed with the image timestamp.
     */
    uniqueTags?: boolean;
}

export namespace config {
    export interface LoginOptions {
        /**
         * Auth0 social connection to use by default for OIDC token. Must be one of: google-oauth2, gitlab, github
         */
        auth0Connection?: string;
        /**
         * Disable automatic login when Chainguard token is expired.
         */
        disabled?: boolean;
        /**
         * Enable to use of refresh tokens when authenticating with an IdP (not compatible with identity_token authentication).
         */
        enableRefreshTokens?: boolean;
        /**
         * UIDP of the identity to assume when exchanging OIDC token for Chainguard token.
         */
        identityId?: string;
        /**
         * UIDP of the identity provider authenticate with for OIDC token.
         */
        identityProviderId?: string;
        /**
         * A path to an OIDC identity token, or explicit identity token.
         */
        identityToken?: string;
        /**
         * Verified organization name for determining identity provider to obtain OIDC token.
         */
        organizationName?: string;
    }

}
