// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class PolicyMetadataProxy extends pulumi.CustomResource {
    /**
     * Get an existing PolicyMetadataProxy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PolicyMetadataProxyState, opts?: pulumi.CustomResourceOptions): PolicyMetadataProxy {
        return new PolicyMetadataProxy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nsxt:index/policyMetadataProxy:PolicyMetadataProxy';

    /**
     * Returns true if the given object is an instance of PolicyMetadataProxy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PolicyMetadataProxy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PolicyMetadataProxy.__pulumiType;
    }

    /**
     * Metadata proxy supported cryptographic protocols
     */
    public readonly cryptoProtocols!: pulumi.Output<string[]>;
    /**
     * Description for this resource
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Display name for this resource
     */
    public readonly displayName!: pulumi.Output<string>;
    /**
     * Policy path to Edge Cluster
     */
    public readonly edgeClusterPath!: pulumi.Output<string>;
    /**
     * Flag to enable standby relocation
     */
    public readonly enableStandbyRelocation!: pulumi.Output<boolean | undefined>;
    /**
     * NSX ID for this resource
     */
    public readonly nsxId!: pulumi.Output<string>;
    /**
     * Policy path for this resource
     */
    public /*out*/ readonly path!: pulumi.Output<string>;
    /**
     * Preferred Edge Paths
     */
    public readonly preferredEdgePaths!: pulumi.Output<string[] | undefined>;
    /**
     * The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's
     * changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET
     * operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
     */
    public /*out*/ readonly revision!: pulumi.Output<number>;
    /**
     * Secret
     */
    public readonly secret!: pulumi.Output<string>;
    /**
     * Server Address
     */
    public readonly serverAddress!: pulumi.Output<string>;
    /**
     * Policy paths to Certificate Authority (CA) certificates
     */
    public readonly serverCertificates!: pulumi.Output<string[] | undefined>;
    /**
     * Set of opaque identifiers meaningful to the user
     */
    public readonly tags!: pulumi.Output<outputs.PolicyMetadataProxyTag[] | undefined>;

    /**
     * Create a PolicyMetadataProxy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PolicyMetadataProxyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PolicyMetadataProxyArgs | PolicyMetadataProxyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PolicyMetadataProxyState | undefined;
            resourceInputs["cryptoProtocols"] = state ? state.cryptoProtocols : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["edgeClusterPath"] = state ? state.edgeClusterPath : undefined;
            resourceInputs["enableStandbyRelocation"] = state ? state.enableStandbyRelocation : undefined;
            resourceInputs["nsxId"] = state ? state.nsxId : undefined;
            resourceInputs["path"] = state ? state.path : undefined;
            resourceInputs["preferredEdgePaths"] = state ? state.preferredEdgePaths : undefined;
            resourceInputs["revision"] = state ? state.revision : undefined;
            resourceInputs["secret"] = state ? state.secret : undefined;
            resourceInputs["serverAddress"] = state ? state.serverAddress : undefined;
            resourceInputs["serverCertificates"] = state ? state.serverCertificates : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as PolicyMetadataProxyArgs | undefined;
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if ((!args || args.edgeClusterPath === undefined) && !opts.urn) {
                throw new Error("Missing required property 'edgeClusterPath'");
            }
            if ((!args || args.secret === undefined) && !opts.urn) {
                throw new Error("Missing required property 'secret'");
            }
            if ((!args || args.serverAddress === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serverAddress'");
            }
            resourceInputs["cryptoProtocols"] = args ? args.cryptoProtocols : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["edgeClusterPath"] = args ? args.edgeClusterPath : undefined;
            resourceInputs["enableStandbyRelocation"] = args ? args.enableStandbyRelocation : undefined;
            resourceInputs["nsxId"] = args ? args.nsxId : undefined;
            resourceInputs["preferredEdgePaths"] = args ? args.preferredEdgePaths : undefined;
            resourceInputs["secret"] = args?.secret ? pulumi.secret(args.secret) : undefined;
            resourceInputs["serverAddress"] = args ? args.serverAddress : undefined;
            resourceInputs["serverCertificates"] = args?.serverCertificates ? pulumi.secret(args.serverCertificates) : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["path"] = undefined /*out*/;
            resourceInputs["revision"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["secret", "serverCertificates"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(PolicyMetadataProxy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering PolicyMetadataProxy resources.
 */
export interface PolicyMetadataProxyState {
    /**
     * Metadata proxy supported cryptographic protocols
     */
    cryptoProtocols?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Description for this resource
     */
    description?: pulumi.Input<string>;
    /**
     * Display name for this resource
     */
    displayName?: pulumi.Input<string>;
    /**
     * Policy path to Edge Cluster
     */
    edgeClusterPath?: pulumi.Input<string>;
    /**
     * Flag to enable standby relocation
     */
    enableStandbyRelocation?: pulumi.Input<boolean>;
    /**
     * NSX ID for this resource
     */
    nsxId?: pulumi.Input<string>;
    /**
     * Policy path for this resource
     */
    path?: pulumi.Input<string>;
    /**
     * Preferred Edge Paths
     */
    preferredEdgePaths?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's
     * changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET
     * operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
     */
    revision?: pulumi.Input<number>;
    /**
     * Secret
     */
    secret?: pulumi.Input<string>;
    /**
     * Server Address
     */
    serverAddress?: pulumi.Input<string>;
    /**
     * Policy paths to Certificate Authority (CA) certificates
     */
    serverCertificates?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Set of opaque identifiers meaningful to the user
     */
    tags?: pulumi.Input<pulumi.Input<inputs.PolicyMetadataProxyTag>[]>;
}

/**
 * The set of arguments for constructing a PolicyMetadataProxy resource.
 */
export interface PolicyMetadataProxyArgs {
    /**
     * Metadata proxy supported cryptographic protocols
     */
    cryptoProtocols?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Description for this resource
     */
    description?: pulumi.Input<string>;
    /**
     * Display name for this resource
     */
    displayName: pulumi.Input<string>;
    /**
     * Policy path to Edge Cluster
     */
    edgeClusterPath: pulumi.Input<string>;
    /**
     * Flag to enable standby relocation
     */
    enableStandbyRelocation?: pulumi.Input<boolean>;
    /**
     * NSX ID for this resource
     */
    nsxId?: pulumi.Input<string>;
    /**
     * Preferred Edge Paths
     */
    preferredEdgePaths?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Secret
     */
    secret: pulumi.Input<string>;
    /**
     * Server Address
     */
    serverAddress: pulumi.Input<string>;
    /**
     * Policy paths to Certificate Authority (CA) certificates
     */
    serverCertificates?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Set of opaque identifiers meaningful to the user
     */
    tags?: pulumi.Input<pulumi.Input<inputs.PolicyMetadataProxyTag>[]>;
}
