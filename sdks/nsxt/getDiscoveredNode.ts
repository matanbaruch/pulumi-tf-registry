// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getDiscoveredNode(args?: GetDiscoveredNodeArgs, opts?: pulumi.InvokeOptions): Promise<GetDiscoveredNodeResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("nsxt:index/getDiscoveredNode:getDiscoveredNode", {
        "computeManagerState": args.computeManagerState,
        "id": args.id,
        "ipAddress": args.ipAddress,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getDiscoveredNode.
 */
export interface GetDiscoveredNodeArgs {
    computeManagerState?: string;
    id?: string;
    ipAddress?: string;
}

/**
 * A collection of values returned by getDiscoveredNode.
 */
export interface GetDiscoveredNodeResult {
    readonly computeManagerState?: string;
    readonly id: string;
    readonly ipAddress: string;
}
export function getDiscoveredNodeOutput(args?: GetDiscoveredNodeOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDiscoveredNodeResult> {
    return pulumi.output(args).apply((a: any) => getDiscoveredNode(a, opts))
}

/**
 * A collection of arguments for invoking getDiscoveredNode.
 */
export interface GetDiscoveredNodeOutputArgs {
    computeManagerState?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    ipAddress?: pulumi.Input<string>;
}
