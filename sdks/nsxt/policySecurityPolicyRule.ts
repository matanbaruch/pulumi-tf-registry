// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class PolicySecurityPolicyRule extends pulumi.CustomResource {
    /**
     * Get an existing PolicySecurityPolicyRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PolicySecurityPolicyRuleState, opts?: pulumi.CustomResourceOptions): PolicySecurityPolicyRule {
        return new PolicySecurityPolicyRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nsxt:index/policySecurityPolicyRule:PolicySecurityPolicyRule';

    /**
     * Returns true if the given object is an instance of PolicySecurityPolicyRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PolicySecurityPolicyRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PolicySecurityPolicyRule.__pulumiType;
    }

    /**
     * Action
     */
    public readonly action!: pulumi.Output<string | undefined>;
    /**
     * Resource context
     */
    public readonly context!: pulumi.Output<outputs.PolicySecurityPolicyRuleContext | undefined>;
    /**
     * Description for this resource
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * List of destination groups
     */
    public readonly destinationGroups!: pulumi.Output<string[] | undefined>;
    /**
     * Negation of destination groups
     */
    public readonly destinationsExcluded!: pulumi.Output<boolean | undefined>;
    /**
     * Traffic direction
     */
    public readonly direction!: pulumi.Output<string | undefined>;
    /**
     * Flag to disable the rule
     */
    public readonly disabled!: pulumi.Output<boolean | undefined>;
    /**
     * Display name for this resource
     */
    public readonly displayName!: pulumi.Output<string>;
    /**
     * IP version
     */
    public readonly ipVersion!: pulumi.Output<string | undefined>;
    /**
     * Additional information (string) which will be propagated to the rule syslog
     */
    public readonly logLabel!: pulumi.Output<string | undefined>;
    /**
     * Flag to enable packet logging
     */
    public readonly logged!: pulumi.Output<boolean | undefined>;
    /**
     * Text for additional notes on changes
     */
    public readonly notes!: pulumi.Output<string | undefined>;
    /**
     * NSX ID for this resource
     */
    public /*out*/ readonly nsxId!: pulumi.Output<string>;
    /**
     * Policy path for this resource
     */
    public /*out*/ readonly path!: pulumi.Output<string>;
    /**
     * Security Policy path
     */
    public readonly policyPath!: pulumi.Output<string>;
    /**
     * List of profiles
     */
    public readonly profiles!: pulumi.Output<string[] | undefined>;
    /**
     * The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's
     * changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET
     * operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
     */
    public /*out*/ readonly revision!: pulumi.Output<number>;
    /**
     * Unique positive number that is assigned by the system and is useful for debugging
     */
    public /*out*/ readonly ruleId!: pulumi.Output<number>;
    /**
     * List of policy paths where the rule is applied
     */
    public readonly scopes!: pulumi.Output<string[] | undefined>;
    /**
     * Sequence number of the this rule
     */
    public readonly sequenceNumber!: pulumi.Output<number>;
    /**
     * List of services to match
     */
    public readonly services!: pulumi.Output<string[] | undefined>;
    /**
     * List of source groups
     */
    public readonly sourceGroups!: pulumi.Output<string[] | undefined>;
    /**
     * Negation of source groups
     */
    public readonly sourcesExcluded!: pulumi.Output<boolean | undefined>;
    /**
     * Set of opaque identifiers meaningful to the user
     */
    public readonly tags!: pulumi.Output<outputs.PolicySecurityPolicyRuleTag[] | undefined>;

    /**
     * Create a PolicySecurityPolicyRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PolicySecurityPolicyRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PolicySecurityPolicyRuleArgs | PolicySecurityPolicyRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PolicySecurityPolicyRuleState | undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["context"] = state ? state.context : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["destinationGroups"] = state ? state.destinationGroups : undefined;
            resourceInputs["destinationsExcluded"] = state ? state.destinationsExcluded : undefined;
            resourceInputs["direction"] = state ? state.direction : undefined;
            resourceInputs["disabled"] = state ? state.disabled : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["ipVersion"] = state ? state.ipVersion : undefined;
            resourceInputs["logLabel"] = state ? state.logLabel : undefined;
            resourceInputs["logged"] = state ? state.logged : undefined;
            resourceInputs["notes"] = state ? state.notes : undefined;
            resourceInputs["nsxId"] = state ? state.nsxId : undefined;
            resourceInputs["path"] = state ? state.path : undefined;
            resourceInputs["policyPath"] = state ? state.policyPath : undefined;
            resourceInputs["profiles"] = state ? state.profiles : undefined;
            resourceInputs["revision"] = state ? state.revision : undefined;
            resourceInputs["ruleId"] = state ? state.ruleId : undefined;
            resourceInputs["scopes"] = state ? state.scopes : undefined;
            resourceInputs["sequenceNumber"] = state ? state.sequenceNumber : undefined;
            resourceInputs["services"] = state ? state.services : undefined;
            resourceInputs["sourceGroups"] = state ? state.sourceGroups : undefined;
            resourceInputs["sourcesExcluded"] = state ? state.sourcesExcluded : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as PolicySecurityPolicyRuleArgs | undefined;
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if ((!args || args.policyPath === undefined) && !opts.urn) {
                throw new Error("Missing required property 'policyPath'");
            }
            if ((!args || args.sequenceNumber === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sequenceNumber'");
            }
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["context"] = args ? args.context : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["destinationGroups"] = args ? args.destinationGroups : undefined;
            resourceInputs["destinationsExcluded"] = args ? args.destinationsExcluded : undefined;
            resourceInputs["direction"] = args ? args.direction : undefined;
            resourceInputs["disabled"] = args ? args.disabled : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["ipVersion"] = args ? args.ipVersion : undefined;
            resourceInputs["logLabel"] = args ? args.logLabel : undefined;
            resourceInputs["logged"] = args ? args.logged : undefined;
            resourceInputs["notes"] = args ? args.notes : undefined;
            resourceInputs["policyPath"] = args ? args.policyPath : undefined;
            resourceInputs["profiles"] = args ? args.profiles : undefined;
            resourceInputs["scopes"] = args ? args.scopes : undefined;
            resourceInputs["sequenceNumber"] = args ? args.sequenceNumber : undefined;
            resourceInputs["services"] = args ? args.services : undefined;
            resourceInputs["sourceGroups"] = args ? args.sourceGroups : undefined;
            resourceInputs["sourcesExcluded"] = args ? args.sourcesExcluded : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["nsxId"] = undefined /*out*/;
            resourceInputs["path"] = undefined /*out*/;
            resourceInputs["revision"] = undefined /*out*/;
            resourceInputs["ruleId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PolicySecurityPolicyRule.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering PolicySecurityPolicyRule resources.
 */
export interface PolicySecurityPolicyRuleState {
    /**
     * Action
     */
    action?: pulumi.Input<string>;
    /**
     * Resource context
     */
    context?: pulumi.Input<inputs.PolicySecurityPolicyRuleContext>;
    /**
     * Description for this resource
     */
    description?: pulumi.Input<string>;
    /**
     * List of destination groups
     */
    destinationGroups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Negation of destination groups
     */
    destinationsExcluded?: pulumi.Input<boolean>;
    /**
     * Traffic direction
     */
    direction?: pulumi.Input<string>;
    /**
     * Flag to disable the rule
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * Display name for this resource
     */
    displayName?: pulumi.Input<string>;
    /**
     * IP version
     */
    ipVersion?: pulumi.Input<string>;
    /**
     * Additional information (string) which will be propagated to the rule syslog
     */
    logLabel?: pulumi.Input<string>;
    /**
     * Flag to enable packet logging
     */
    logged?: pulumi.Input<boolean>;
    /**
     * Text for additional notes on changes
     */
    notes?: pulumi.Input<string>;
    /**
     * NSX ID for this resource
     */
    nsxId?: pulumi.Input<string>;
    /**
     * Policy path for this resource
     */
    path?: pulumi.Input<string>;
    /**
     * Security Policy path
     */
    policyPath?: pulumi.Input<string>;
    /**
     * List of profiles
     */
    profiles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's
     * changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET
     * operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
     */
    revision?: pulumi.Input<number>;
    /**
     * Unique positive number that is assigned by the system and is useful for debugging
     */
    ruleId?: pulumi.Input<number>;
    /**
     * List of policy paths where the rule is applied
     */
    scopes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Sequence number of the this rule
     */
    sequenceNumber?: pulumi.Input<number>;
    /**
     * List of services to match
     */
    services?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of source groups
     */
    sourceGroups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Negation of source groups
     */
    sourcesExcluded?: pulumi.Input<boolean>;
    /**
     * Set of opaque identifiers meaningful to the user
     */
    tags?: pulumi.Input<pulumi.Input<inputs.PolicySecurityPolicyRuleTag>[]>;
}

/**
 * The set of arguments for constructing a PolicySecurityPolicyRule resource.
 */
export interface PolicySecurityPolicyRuleArgs {
    /**
     * Action
     */
    action?: pulumi.Input<string>;
    /**
     * Resource context
     */
    context?: pulumi.Input<inputs.PolicySecurityPolicyRuleContext>;
    /**
     * Description for this resource
     */
    description?: pulumi.Input<string>;
    /**
     * List of destination groups
     */
    destinationGroups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Negation of destination groups
     */
    destinationsExcluded?: pulumi.Input<boolean>;
    /**
     * Traffic direction
     */
    direction?: pulumi.Input<string>;
    /**
     * Flag to disable the rule
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * Display name for this resource
     */
    displayName: pulumi.Input<string>;
    /**
     * IP version
     */
    ipVersion?: pulumi.Input<string>;
    /**
     * Additional information (string) which will be propagated to the rule syslog
     */
    logLabel?: pulumi.Input<string>;
    /**
     * Flag to enable packet logging
     */
    logged?: pulumi.Input<boolean>;
    /**
     * Text for additional notes on changes
     */
    notes?: pulumi.Input<string>;
    /**
     * Security Policy path
     */
    policyPath: pulumi.Input<string>;
    /**
     * List of profiles
     */
    profiles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of policy paths where the rule is applied
     */
    scopes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Sequence number of the this rule
     */
    sequenceNumber: pulumi.Input<number>;
    /**
     * List of services to match
     */
    services?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of source groups
     */
    sourceGroups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Negation of source groups
     */
    sourcesExcluded?: pulumi.Input<boolean>;
    /**
     * Set of opaque identifiers meaningful to the user
     */
    tags?: pulumi.Input<pulumi.Input<inputs.PolicySecurityPolicyRuleTag>[]>;
}
