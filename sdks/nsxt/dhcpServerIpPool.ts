// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DhcpServerIpPool extends pulumi.CustomResource {
    /**
     * Get an existing DhcpServerIpPool resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DhcpServerIpPoolState, opts?: pulumi.CustomResourceOptions): DhcpServerIpPool {
        return new DhcpServerIpPool(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nsxt:index/dhcpServerIpPool:DhcpServerIpPool';

    /**
     * Returns true if the given object is an instance of DhcpServerIpPool.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DhcpServerIpPool {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DhcpServerIpPool.__pulumiType;
    }

    /**
     * Description of this resource
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Generic DHCP options
     */
    public readonly dhcpGenericOptions!: pulumi.Output<outputs.DhcpServerIpPoolDhcpGenericOption[] | undefined>;
    /**
     * DHCP classless static routes
     */
    public readonly dhcpOption121s!: pulumi.Output<outputs.DhcpServerIpPoolDhcpOption121[] | undefined>;
    /**
     * The display name of this resource. Defaults to ID if not set
     */
    public readonly displayName!: pulumi.Output<string>;
    /**
     * Error threshold
     */
    public readonly errorThreshold!: pulumi.Output<number | undefined>;
    /**
     * Gateway ip
     */
    public readonly gatewayIp!: pulumi.Output<string | undefined>;
    /**
     * List of IP Ranges
     */
    public readonly ipRanges!: pulumi.Output<outputs.DhcpServerIpPoolIpRange[] | undefined>;
    /**
     * Lease time, in seconds
     */
    public readonly leaseTime!: pulumi.Output<number | undefined>;
    /**
     * Id of dhcp server this pool is serving
     */
    public readonly logicalDhcpServerId!: pulumi.Output<string>;
    /**
     * The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's
     * changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET
     * operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
     */
    public /*out*/ readonly revision!: pulumi.Output<number>;
    /**
     * Set of opaque identifiers meaningful to the user
     */
    public readonly tags!: pulumi.Output<outputs.DhcpServerIpPoolTag[] | undefined>;
    /**
     * Warning threshold
     */
    public readonly warningThreshold!: pulumi.Output<number | undefined>;

    /**
     * Create a DhcpServerIpPool resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DhcpServerIpPoolArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DhcpServerIpPoolArgs | DhcpServerIpPoolState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DhcpServerIpPoolState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["dhcpGenericOptions"] = state ? state.dhcpGenericOptions : undefined;
            resourceInputs["dhcpOption121s"] = state ? state.dhcpOption121s : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["errorThreshold"] = state ? state.errorThreshold : undefined;
            resourceInputs["gatewayIp"] = state ? state.gatewayIp : undefined;
            resourceInputs["ipRanges"] = state ? state.ipRanges : undefined;
            resourceInputs["leaseTime"] = state ? state.leaseTime : undefined;
            resourceInputs["logicalDhcpServerId"] = state ? state.logicalDhcpServerId : undefined;
            resourceInputs["revision"] = state ? state.revision : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["warningThreshold"] = state ? state.warningThreshold : undefined;
        } else {
            const args = argsOrState as DhcpServerIpPoolArgs | undefined;
            if ((!args || args.logicalDhcpServerId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'logicalDhcpServerId'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["dhcpGenericOptions"] = args ? args.dhcpGenericOptions : undefined;
            resourceInputs["dhcpOption121s"] = args ? args.dhcpOption121s : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["errorThreshold"] = args ? args.errorThreshold : undefined;
            resourceInputs["gatewayIp"] = args ? args.gatewayIp : undefined;
            resourceInputs["ipRanges"] = args ? args.ipRanges : undefined;
            resourceInputs["leaseTime"] = args ? args.leaseTime : undefined;
            resourceInputs["logicalDhcpServerId"] = args ? args.logicalDhcpServerId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["warningThreshold"] = args ? args.warningThreshold : undefined;
            resourceInputs["revision"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DhcpServerIpPool.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DhcpServerIpPool resources.
 */
export interface DhcpServerIpPoolState {
    /**
     * Description of this resource
     */
    description?: pulumi.Input<string>;
    /**
     * Generic DHCP options
     */
    dhcpGenericOptions?: pulumi.Input<pulumi.Input<inputs.DhcpServerIpPoolDhcpGenericOption>[]>;
    /**
     * DHCP classless static routes
     */
    dhcpOption121s?: pulumi.Input<pulumi.Input<inputs.DhcpServerIpPoolDhcpOption121>[]>;
    /**
     * The display name of this resource. Defaults to ID if not set
     */
    displayName?: pulumi.Input<string>;
    /**
     * Error threshold
     */
    errorThreshold?: pulumi.Input<number>;
    /**
     * Gateway ip
     */
    gatewayIp?: pulumi.Input<string>;
    /**
     * List of IP Ranges
     */
    ipRanges?: pulumi.Input<pulumi.Input<inputs.DhcpServerIpPoolIpRange>[]>;
    /**
     * Lease time, in seconds
     */
    leaseTime?: pulumi.Input<number>;
    /**
     * Id of dhcp server this pool is serving
     */
    logicalDhcpServerId?: pulumi.Input<string>;
    /**
     * The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's
     * changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET
     * operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
     */
    revision?: pulumi.Input<number>;
    /**
     * Set of opaque identifiers meaningful to the user
     */
    tags?: pulumi.Input<pulumi.Input<inputs.DhcpServerIpPoolTag>[]>;
    /**
     * Warning threshold
     */
    warningThreshold?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a DhcpServerIpPool resource.
 */
export interface DhcpServerIpPoolArgs {
    /**
     * Description of this resource
     */
    description?: pulumi.Input<string>;
    /**
     * Generic DHCP options
     */
    dhcpGenericOptions?: pulumi.Input<pulumi.Input<inputs.DhcpServerIpPoolDhcpGenericOption>[]>;
    /**
     * DHCP classless static routes
     */
    dhcpOption121s?: pulumi.Input<pulumi.Input<inputs.DhcpServerIpPoolDhcpOption121>[]>;
    /**
     * The display name of this resource. Defaults to ID if not set
     */
    displayName?: pulumi.Input<string>;
    /**
     * Error threshold
     */
    errorThreshold?: pulumi.Input<number>;
    /**
     * Gateway ip
     */
    gatewayIp?: pulumi.Input<string>;
    /**
     * List of IP Ranges
     */
    ipRanges?: pulumi.Input<pulumi.Input<inputs.DhcpServerIpPoolIpRange>[]>;
    /**
     * Lease time, in seconds
     */
    leaseTime?: pulumi.Input<number>;
    /**
     * Id of dhcp server this pool is serving
     */
    logicalDhcpServerId: pulumi.Input<string>;
    /**
     * Set of opaque identifiers meaningful to the user
     */
    tags?: pulumi.Input<pulumi.Input<inputs.DhcpServerIpPoolTag>[]>;
    /**
     * Warning threshold
     */
    warningThreshold?: pulumi.Input<number>;
}
