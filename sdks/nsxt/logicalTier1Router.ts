// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class LogicalTier1Router extends pulumi.CustomResource {
    /**
     * Get an existing LogicalTier1Router resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LogicalTier1RouterState, opts?: pulumi.CustomResourceOptions): LogicalTier1Router {
        return new LogicalTier1Router(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nsxt:index/logicalTier1Router:LogicalTier1Router';

    /**
     * Returns true if the given object is an instance of LogicalTier1Router.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LogicalTier1Router {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LogicalTier1Router.__pulumiType;
    }

    /**
     * The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's
     * changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET
     * operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
     */
    public /*out*/ readonly advertiseConfigRevision!: pulumi.Output<number>;
    /**
     * Enable connected NSX routes advertisement
     */
    public readonly advertiseConnectedRoutes!: pulumi.Output<boolean | undefined>;
    /**
     * Enable LB SNAT IP routes advertisement
     */
    public readonly advertiseLbSnatIpRoutes!: pulumi.Output<boolean | undefined>;
    /**
     * Enable LB VIP routes advertisement
     */
    public readonly advertiseLbVipRoutes!: pulumi.Output<boolean | undefined>;
    /**
     * Enable NAT routes advertisement
     */
    public readonly advertiseNatRoutes!: pulumi.Output<boolean | undefined>;
    /**
     * Enable static routes advertisement
     */
    public readonly advertiseStaticRoutes!: pulumi.Output<boolean | undefined>;
    /**
     * Description of this resource
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The display name of this resource. Defaults to ID if not set
     */
    public readonly displayName!: pulumi.Output<string>;
    /**
     * Edge Cluster Id
     */
    public readonly edgeClusterId!: pulumi.Output<string | undefined>;
    /**
     * Enable router advertisement
     */
    public readonly enableRouterAdvertisement!: pulumi.Output<boolean | undefined>;
    /**
     * Failover mode which determines whether the preferred service router instance for given logical router will preempt the
     * peer
     */
    public readonly failoverMode!: pulumi.Output<string | undefined>;
    /**
     * List of Firewall sections related to the logical router
     */
    public readonly firewallSections!: pulumi.Output<outputs.LogicalTier1RouterFirewallSection[] | undefined>;
    /**
     * The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's
     * changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET
     * operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
     */
    public /*out*/ readonly revision!: pulumi.Output<number>;
    /**
     * Set of opaque identifiers meaningful to the user
     */
    public readonly tags!: pulumi.Output<outputs.LogicalTier1RouterTag[] | undefined>;

    /**
     * Create a LogicalTier1Router resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: LogicalTier1RouterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LogicalTier1RouterArgs | LogicalTier1RouterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LogicalTier1RouterState | undefined;
            resourceInputs["advertiseConfigRevision"] = state ? state.advertiseConfigRevision : undefined;
            resourceInputs["advertiseConnectedRoutes"] = state ? state.advertiseConnectedRoutes : undefined;
            resourceInputs["advertiseLbSnatIpRoutes"] = state ? state.advertiseLbSnatIpRoutes : undefined;
            resourceInputs["advertiseLbVipRoutes"] = state ? state.advertiseLbVipRoutes : undefined;
            resourceInputs["advertiseNatRoutes"] = state ? state.advertiseNatRoutes : undefined;
            resourceInputs["advertiseStaticRoutes"] = state ? state.advertiseStaticRoutes : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["edgeClusterId"] = state ? state.edgeClusterId : undefined;
            resourceInputs["enableRouterAdvertisement"] = state ? state.enableRouterAdvertisement : undefined;
            resourceInputs["failoverMode"] = state ? state.failoverMode : undefined;
            resourceInputs["firewallSections"] = state ? state.firewallSections : undefined;
            resourceInputs["revision"] = state ? state.revision : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as LogicalTier1RouterArgs | undefined;
            resourceInputs["advertiseConnectedRoutes"] = args ? args.advertiseConnectedRoutes : undefined;
            resourceInputs["advertiseLbSnatIpRoutes"] = args ? args.advertiseLbSnatIpRoutes : undefined;
            resourceInputs["advertiseLbVipRoutes"] = args ? args.advertiseLbVipRoutes : undefined;
            resourceInputs["advertiseNatRoutes"] = args ? args.advertiseNatRoutes : undefined;
            resourceInputs["advertiseStaticRoutes"] = args ? args.advertiseStaticRoutes : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["edgeClusterId"] = args ? args.edgeClusterId : undefined;
            resourceInputs["enableRouterAdvertisement"] = args ? args.enableRouterAdvertisement : undefined;
            resourceInputs["failoverMode"] = args ? args.failoverMode : undefined;
            resourceInputs["firewallSections"] = args ? args.firewallSections : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["advertiseConfigRevision"] = undefined /*out*/;
            resourceInputs["revision"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LogicalTier1Router.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LogicalTier1Router resources.
 */
export interface LogicalTier1RouterState {
    /**
     * The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's
     * changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET
     * operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
     */
    advertiseConfigRevision?: pulumi.Input<number>;
    /**
     * Enable connected NSX routes advertisement
     */
    advertiseConnectedRoutes?: pulumi.Input<boolean>;
    /**
     * Enable LB SNAT IP routes advertisement
     */
    advertiseLbSnatIpRoutes?: pulumi.Input<boolean>;
    /**
     * Enable LB VIP routes advertisement
     */
    advertiseLbVipRoutes?: pulumi.Input<boolean>;
    /**
     * Enable NAT routes advertisement
     */
    advertiseNatRoutes?: pulumi.Input<boolean>;
    /**
     * Enable static routes advertisement
     */
    advertiseStaticRoutes?: pulumi.Input<boolean>;
    /**
     * Description of this resource
     */
    description?: pulumi.Input<string>;
    /**
     * The display name of this resource. Defaults to ID if not set
     */
    displayName?: pulumi.Input<string>;
    /**
     * Edge Cluster Id
     */
    edgeClusterId?: pulumi.Input<string>;
    /**
     * Enable router advertisement
     */
    enableRouterAdvertisement?: pulumi.Input<boolean>;
    /**
     * Failover mode which determines whether the preferred service router instance for given logical router will preempt the
     * peer
     */
    failoverMode?: pulumi.Input<string>;
    /**
     * List of Firewall sections related to the logical router
     */
    firewallSections?: pulumi.Input<pulumi.Input<inputs.LogicalTier1RouterFirewallSection>[]>;
    /**
     * The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's
     * changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET
     * operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
     */
    revision?: pulumi.Input<number>;
    /**
     * Set of opaque identifiers meaningful to the user
     */
    tags?: pulumi.Input<pulumi.Input<inputs.LogicalTier1RouterTag>[]>;
}

/**
 * The set of arguments for constructing a LogicalTier1Router resource.
 */
export interface LogicalTier1RouterArgs {
    /**
     * Enable connected NSX routes advertisement
     */
    advertiseConnectedRoutes?: pulumi.Input<boolean>;
    /**
     * Enable LB SNAT IP routes advertisement
     */
    advertiseLbSnatIpRoutes?: pulumi.Input<boolean>;
    /**
     * Enable LB VIP routes advertisement
     */
    advertiseLbVipRoutes?: pulumi.Input<boolean>;
    /**
     * Enable NAT routes advertisement
     */
    advertiseNatRoutes?: pulumi.Input<boolean>;
    /**
     * Enable static routes advertisement
     */
    advertiseStaticRoutes?: pulumi.Input<boolean>;
    /**
     * Description of this resource
     */
    description?: pulumi.Input<string>;
    /**
     * The display name of this resource. Defaults to ID if not set
     */
    displayName?: pulumi.Input<string>;
    /**
     * Edge Cluster Id
     */
    edgeClusterId?: pulumi.Input<string>;
    /**
     * Enable router advertisement
     */
    enableRouterAdvertisement?: pulumi.Input<boolean>;
    /**
     * Failover mode which determines whether the preferred service router instance for given logical router will preempt the
     * peer
     */
    failoverMode?: pulumi.Input<string>;
    /**
     * List of Firewall sections related to the logical router
     */
    firewallSections?: pulumi.Input<pulumi.Input<inputs.LogicalTier1RouterFirewallSection>[]>;
    /**
     * Set of opaque identifiers meaningful to the user
     */
    tags?: pulumi.Input<pulumi.Input<inputs.LogicalTier1RouterTag>[]>;
}
