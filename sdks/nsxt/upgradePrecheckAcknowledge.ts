// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class UpgradePrecheckAcknowledge extends pulumi.CustomResource {
    /**
     * Get an existing UpgradePrecheckAcknowledge resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UpgradePrecheckAcknowledgeState, opts?: pulumi.CustomResourceOptions): UpgradePrecheckAcknowledge {
        return new UpgradePrecheckAcknowledge(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nsxt:index/upgradePrecheckAcknowledge:UpgradePrecheckAcknowledge';

    /**
     * Returns true if the given object is an instance of UpgradePrecheckAcknowledge.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is UpgradePrecheckAcknowledge {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === UpgradePrecheckAcknowledge.__pulumiType;
    }

    /**
     * IDs of precheck warnings that need to be acknowledged
     */
    public readonly precheckIds!: pulumi.Output<string[]>;
    /**
     * List of warnings from precheck
     */
    public /*out*/ readonly precheckWarnings!: pulumi.Output<outputs.UpgradePrecheckAcknowledgePrecheckWarning[]>;

    /**
     * Create a UpgradePrecheckAcknowledge resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UpgradePrecheckAcknowledgeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UpgradePrecheckAcknowledgeArgs | UpgradePrecheckAcknowledgeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UpgradePrecheckAcknowledgeState | undefined;
            resourceInputs["precheckIds"] = state ? state.precheckIds : undefined;
            resourceInputs["precheckWarnings"] = state ? state.precheckWarnings : undefined;
        } else {
            const args = argsOrState as UpgradePrecheckAcknowledgeArgs | undefined;
            if ((!args || args.precheckIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'precheckIds'");
            }
            resourceInputs["precheckIds"] = args ? args.precheckIds : undefined;
            resourceInputs["precheckWarnings"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(UpgradePrecheckAcknowledge.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering UpgradePrecheckAcknowledge resources.
 */
export interface UpgradePrecheckAcknowledgeState {
    /**
     * IDs of precheck warnings that need to be acknowledged
     */
    precheckIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of warnings from precheck
     */
    precheckWarnings?: pulumi.Input<pulumi.Input<inputs.UpgradePrecheckAcknowledgePrecheckWarning>[]>;
}

/**
 * The set of arguments for constructing a UpgradePrecheckAcknowledge resource.
 */
export interface UpgradePrecheckAcknowledgeArgs {
    /**
     * IDs of precheck warnings that need to be acknowledged
     */
    precheckIds: pulumi.Input<pulumi.Input<string>[]>;
}
