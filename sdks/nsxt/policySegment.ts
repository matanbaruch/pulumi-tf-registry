// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class PolicySegment extends pulumi.CustomResource {
    /**
     * Get an existing PolicySegment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PolicySegmentState, opts?: pulumi.CustomResourceOptions): PolicySegment {
        return new PolicySegment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nsxt:index/policySegment:PolicySegment';

    /**
     * Returns true if the given object is an instance of PolicySegment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PolicySegment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PolicySegment.__pulumiType;
    }

    /**
     * Advanced segment configuration
     */
    public readonly advancedConfig!: pulumi.Output<outputs.PolicySegmentAdvancedConfig | undefined>;
    /**
     * Bridge configuration
     */
    public readonly bridgeConfigs!: pulumi.Output<outputs.PolicySegmentBridgeConfig[] | undefined>;
    /**
     * Policy path to the connecting Tier-0 or Tier-1
     */
    public readonly connectivityPath!: pulumi.Output<string | undefined>;
    /**
     * Resource context
     */
    public readonly context!: pulumi.Output<outputs.PolicySegmentContext | undefined>;
    /**
     * Description for this resource
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Policy path to DHCP server or relay configuration to use for subnets configured on this segment
     */
    public readonly dhcpConfigPath!: pulumi.Output<string | undefined>;
    /**
     * IP and MAC discovery profiles for this segment
     */
    public readonly discoveryProfile!: pulumi.Output<outputs.PolicySegmentDiscoveryProfile | undefined>;
    /**
     * Display name for this resource
     */
    public readonly displayName!: pulumi.Output<string>;
    /**
     * DNS domain names
     */
    public readonly domainName!: pulumi.Output<string | undefined>;
    /**
     * Configuration for extending Segment through L2 VPN
     */
    public readonly l2Extension!: pulumi.Output<outputs.PolicySegmentL2Extension | undefined>;
    /**
     * Metadata Proxy Configuration Paths
     */
    public readonly metadataProxyPaths!: pulumi.Output<string[] | undefined>;
    /**
     * NSX ID for this resource
     */
    public readonly nsxId!: pulumi.Output<string>;
    /**
     * Overlay connectivity ID for this Segment
     */
    public readonly overlayId!: pulumi.Output<number>;
    /**
     * Policy path for this resource
     */
    public /*out*/ readonly path!: pulumi.Output<string>;
    /**
     * QoS profiles for this segment
     */
    public readonly qosProfile!: pulumi.Output<outputs.PolicySegmentQosProfile | undefined>;
    /**
     * Replication mode - MTEP or SOURCE
     */
    public readonly replicationMode!: pulumi.Output<string | undefined>;
    /**
     * The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's
     * changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET
     * operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
     */
    public /*out*/ readonly revision!: pulumi.Output<number>;
    /**
     * Security profiles for this segment
     */
    public readonly securityProfile!: pulumi.Output<outputs.PolicySegmentSecurityProfile | undefined>;
    /**
     * Subnet configuration with at most 1 IPv4 CIDR and multiple IPv6 CIDRs
     */
    public readonly subnets!: pulumi.Output<outputs.PolicySegmentSubnet[] | undefined>;
    /**
     * Set of opaque identifiers meaningful to the user
     */
    public readonly tags!: pulumi.Output<outputs.PolicySegmentTag[] | undefined>;
    /**
     * Policy path to the transport zone
     */
    public readonly transportZonePath!: pulumi.Output<string>;
    /**
     * VLAN IDs for VLAN backed Segment
     */
    public readonly vlanIds!: pulumi.Output<string[] | undefined>;

    /**
     * Create a PolicySegment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PolicySegmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PolicySegmentArgs | PolicySegmentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PolicySegmentState | undefined;
            resourceInputs["advancedConfig"] = state ? state.advancedConfig : undefined;
            resourceInputs["bridgeConfigs"] = state ? state.bridgeConfigs : undefined;
            resourceInputs["connectivityPath"] = state ? state.connectivityPath : undefined;
            resourceInputs["context"] = state ? state.context : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["dhcpConfigPath"] = state ? state.dhcpConfigPath : undefined;
            resourceInputs["discoveryProfile"] = state ? state.discoveryProfile : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["domainName"] = state ? state.domainName : undefined;
            resourceInputs["l2Extension"] = state ? state.l2Extension : undefined;
            resourceInputs["metadataProxyPaths"] = state ? state.metadataProxyPaths : undefined;
            resourceInputs["nsxId"] = state ? state.nsxId : undefined;
            resourceInputs["overlayId"] = state ? state.overlayId : undefined;
            resourceInputs["path"] = state ? state.path : undefined;
            resourceInputs["qosProfile"] = state ? state.qosProfile : undefined;
            resourceInputs["replicationMode"] = state ? state.replicationMode : undefined;
            resourceInputs["revision"] = state ? state.revision : undefined;
            resourceInputs["securityProfile"] = state ? state.securityProfile : undefined;
            resourceInputs["subnets"] = state ? state.subnets : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["transportZonePath"] = state ? state.transportZonePath : undefined;
            resourceInputs["vlanIds"] = state ? state.vlanIds : undefined;
        } else {
            const args = argsOrState as PolicySegmentArgs | undefined;
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            resourceInputs["advancedConfig"] = args ? args.advancedConfig : undefined;
            resourceInputs["bridgeConfigs"] = args ? args.bridgeConfigs : undefined;
            resourceInputs["connectivityPath"] = args ? args.connectivityPath : undefined;
            resourceInputs["context"] = args ? args.context : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["dhcpConfigPath"] = args ? args.dhcpConfigPath : undefined;
            resourceInputs["discoveryProfile"] = args ? args.discoveryProfile : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["domainName"] = args ? args.domainName : undefined;
            resourceInputs["l2Extension"] = args ? args.l2Extension : undefined;
            resourceInputs["metadataProxyPaths"] = args ? args.metadataProxyPaths : undefined;
            resourceInputs["nsxId"] = args ? args.nsxId : undefined;
            resourceInputs["overlayId"] = args ? args.overlayId : undefined;
            resourceInputs["qosProfile"] = args ? args.qosProfile : undefined;
            resourceInputs["replicationMode"] = args ? args.replicationMode : undefined;
            resourceInputs["securityProfile"] = args ? args.securityProfile : undefined;
            resourceInputs["subnets"] = args ? args.subnets : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["transportZonePath"] = args ? args.transportZonePath : undefined;
            resourceInputs["vlanIds"] = args ? args.vlanIds : undefined;
            resourceInputs["path"] = undefined /*out*/;
            resourceInputs["revision"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PolicySegment.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering PolicySegment resources.
 */
export interface PolicySegmentState {
    /**
     * Advanced segment configuration
     */
    advancedConfig?: pulumi.Input<inputs.PolicySegmentAdvancedConfig>;
    /**
     * Bridge configuration
     */
    bridgeConfigs?: pulumi.Input<pulumi.Input<inputs.PolicySegmentBridgeConfig>[]>;
    /**
     * Policy path to the connecting Tier-0 or Tier-1
     */
    connectivityPath?: pulumi.Input<string>;
    /**
     * Resource context
     */
    context?: pulumi.Input<inputs.PolicySegmentContext>;
    /**
     * Description for this resource
     */
    description?: pulumi.Input<string>;
    /**
     * Policy path to DHCP server or relay configuration to use for subnets configured on this segment
     */
    dhcpConfigPath?: pulumi.Input<string>;
    /**
     * IP and MAC discovery profiles for this segment
     */
    discoveryProfile?: pulumi.Input<inputs.PolicySegmentDiscoveryProfile>;
    /**
     * Display name for this resource
     */
    displayName?: pulumi.Input<string>;
    /**
     * DNS domain names
     */
    domainName?: pulumi.Input<string>;
    /**
     * Configuration for extending Segment through L2 VPN
     */
    l2Extension?: pulumi.Input<inputs.PolicySegmentL2Extension>;
    /**
     * Metadata Proxy Configuration Paths
     */
    metadataProxyPaths?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * NSX ID for this resource
     */
    nsxId?: pulumi.Input<string>;
    /**
     * Overlay connectivity ID for this Segment
     */
    overlayId?: pulumi.Input<number>;
    /**
     * Policy path for this resource
     */
    path?: pulumi.Input<string>;
    /**
     * QoS profiles for this segment
     */
    qosProfile?: pulumi.Input<inputs.PolicySegmentQosProfile>;
    /**
     * Replication mode - MTEP or SOURCE
     */
    replicationMode?: pulumi.Input<string>;
    /**
     * The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's
     * changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET
     * operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
     */
    revision?: pulumi.Input<number>;
    /**
     * Security profiles for this segment
     */
    securityProfile?: pulumi.Input<inputs.PolicySegmentSecurityProfile>;
    /**
     * Subnet configuration with at most 1 IPv4 CIDR and multiple IPv6 CIDRs
     */
    subnets?: pulumi.Input<pulumi.Input<inputs.PolicySegmentSubnet>[]>;
    /**
     * Set of opaque identifiers meaningful to the user
     */
    tags?: pulumi.Input<pulumi.Input<inputs.PolicySegmentTag>[]>;
    /**
     * Policy path to the transport zone
     */
    transportZonePath?: pulumi.Input<string>;
    /**
     * VLAN IDs for VLAN backed Segment
     */
    vlanIds?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a PolicySegment resource.
 */
export interface PolicySegmentArgs {
    /**
     * Advanced segment configuration
     */
    advancedConfig?: pulumi.Input<inputs.PolicySegmentAdvancedConfig>;
    /**
     * Bridge configuration
     */
    bridgeConfigs?: pulumi.Input<pulumi.Input<inputs.PolicySegmentBridgeConfig>[]>;
    /**
     * Policy path to the connecting Tier-0 or Tier-1
     */
    connectivityPath?: pulumi.Input<string>;
    /**
     * Resource context
     */
    context?: pulumi.Input<inputs.PolicySegmentContext>;
    /**
     * Description for this resource
     */
    description?: pulumi.Input<string>;
    /**
     * Policy path to DHCP server or relay configuration to use for subnets configured on this segment
     */
    dhcpConfigPath?: pulumi.Input<string>;
    /**
     * IP and MAC discovery profiles for this segment
     */
    discoveryProfile?: pulumi.Input<inputs.PolicySegmentDiscoveryProfile>;
    /**
     * Display name for this resource
     */
    displayName: pulumi.Input<string>;
    /**
     * DNS domain names
     */
    domainName?: pulumi.Input<string>;
    /**
     * Configuration for extending Segment through L2 VPN
     */
    l2Extension?: pulumi.Input<inputs.PolicySegmentL2Extension>;
    /**
     * Metadata Proxy Configuration Paths
     */
    metadataProxyPaths?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * NSX ID for this resource
     */
    nsxId?: pulumi.Input<string>;
    /**
     * Overlay connectivity ID for this Segment
     */
    overlayId?: pulumi.Input<number>;
    /**
     * QoS profiles for this segment
     */
    qosProfile?: pulumi.Input<inputs.PolicySegmentQosProfile>;
    /**
     * Replication mode - MTEP or SOURCE
     */
    replicationMode?: pulumi.Input<string>;
    /**
     * Security profiles for this segment
     */
    securityProfile?: pulumi.Input<inputs.PolicySegmentSecurityProfile>;
    /**
     * Subnet configuration with at most 1 IPv4 CIDR and multiple IPv6 CIDRs
     */
    subnets?: pulumi.Input<pulumi.Input<inputs.PolicySegmentSubnet>[]>;
    /**
     * Set of opaque identifiers meaningful to the user
     */
    tags?: pulumi.Input<pulumi.Input<inputs.PolicySegmentTag>[]>;
    /**
     * Policy path to the transport zone
     */
    transportZonePath?: pulumi.Input<string>;
    /**
     * VLAN IDs for VLAN backed Segment
     */
    vlanIds?: pulumi.Input<pulumi.Input<string>[]>;
}
