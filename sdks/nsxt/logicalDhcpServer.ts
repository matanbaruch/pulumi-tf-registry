// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class LogicalDhcpServer extends pulumi.CustomResource {
    /**
     * Get an existing LogicalDhcpServer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LogicalDhcpServerState, opts?: pulumi.CustomResourceOptions): LogicalDhcpServer {
        return new LogicalDhcpServer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nsxt:index/logicalDhcpServer:LogicalDhcpServer';

    /**
     * Returns true if the given object is an instance of LogicalDhcpServer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LogicalDhcpServer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LogicalDhcpServer.__pulumiType;
    }

    /**
     * Id of attached logical port
     */
    public /*out*/ readonly attachedLogicalPortId!: pulumi.Output<string>;
    /**
     * Description of this resource
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Generic DHCP options
     */
    public readonly dhcpGenericOptions!: pulumi.Output<outputs.LogicalDhcpServerDhcpGenericOption[] | undefined>;
    /**
     * DHCP classless static routes
     */
    public readonly dhcpOption121s!: pulumi.Output<outputs.LogicalDhcpServerDhcpOption121[] | undefined>;
    /**
     * DHCP profile uuid
     */
    public readonly dhcpProfileId!: pulumi.Output<string>;
    /**
     * DHCP server ip in cidr format
     */
    public readonly dhcpServerIp!: pulumi.Output<string>;
    /**
     * The display name of this resource. Defaults to ID if not set
     */
    public readonly displayName!: pulumi.Output<string>;
    /**
     * DNS IPs
     */
    public readonly dnsNameServers!: pulumi.Output<string[] | undefined>;
    /**
     * Domain name
     */
    public readonly domainName!: pulumi.Output<string | undefined>;
    /**
     * Gateway IP
     */
    public readonly gatewayIp!: pulumi.Output<string | undefined>;
    /**
     * The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's
     * changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET
     * operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
     */
    public /*out*/ readonly revision!: pulumi.Output<number>;
    /**
     * Set of opaque identifiers meaningful to the user
     */
    public readonly tags!: pulumi.Output<outputs.LogicalDhcpServerTag[] | undefined>;

    /**
     * Create a LogicalDhcpServer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LogicalDhcpServerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LogicalDhcpServerArgs | LogicalDhcpServerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LogicalDhcpServerState | undefined;
            resourceInputs["attachedLogicalPortId"] = state ? state.attachedLogicalPortId : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["dhcpGenericOptions"] = state ? state.dhcpGenericOptions : undefined;
            resourceInputs["dhcpOption121s"] = state ? state.dhcpOption121s : undefined;
            resourceInputs["dhcpProfileId"] = state ? state.dhcpProfileId : undefined;
            resourceInputs["dhcpServerIp"] = state ? state.dhcpServerIp : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["dnsNameServers"] = state ? state.dnsNameServers : undefined;
            resourceInputs["domainName"] = state ? state.domainName : undefined;
            resourceInputs["gatewayIp"] = state ? state.gatewayIp : undefined;
            resourceInputs["revision"] = state ? state.revision : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as LogicalDhcpServerArgs | undefined;
            if ((!args || args.dhcpProfileId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dhcpProfileId'");
            }
            if ((!args || args.dhcpServerIp === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dhcpServerIp'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["dhcpGenericOptions"] = args ? args.dhcpGenericOptions : undefined;
            resourceInputs["dhcpOption121s"] = args ? args.dhcpOption121s : undefined;
            resourceInputs["dhcpProfileId"] = args ? args.dhcpProfileId : undefined;
            resourceInputs["dhcpServerIp"] = args ? args.dhcpServerIp : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["dnsNameServers"] = args ? args.dnsNameServers : undefined;
            resourceInputs["domainName"] = args ? args.domainName : undefined;
            resourceInputs["gatewayIp"] = args ? args.gatewayIp : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["attachedLogicalPortId"] = undefined /*out*/;
            resourceInputs["revision"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LogicalDhcpServer.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LogicalDhcpServer resources.
 */
export interface LogicalDhcpServerState {
    /**
     * Id of attached logical port
     */
    attachedLogicalPortId?: pulumi.Input<string>;
    /**
     * Description of this resource
     */
    description?: pulumi.Input<string>;
    /**
     * Generic DHCP options
     */
    dhcpGenericOptions?: pulumi.Input<pulumi.Input<inputs.LogicalDhcpServerDhcpGenericOption>[]>;
    /**
     * DHCP classless static routes
     */
    dhcpOption121s?: pulumi.Input<pulumi.Input<inputs.LogicalDhcpServerDhcpOption121>[]>;
    /**
     * DHCP profile uuid
     */
    dhcpProfileId?: pulumi.Input<string>;
    /**
     * DHCP server ip in cidr format
     */
    dhcpServerIp?: pulumi.Input<string>;
    /**
     * The display name of this resource. Defaults to ID if not set
     */
    displayName?: pulumi.Input<string>;
    /**
     * DNS IPs
     */
    dnsNameServers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Domain name
     */
    domainName?: pulumi.Input<string>;
    /**
     * Gateway IP
     */
    gatewayIp?: pulumi.Input<string>;
    /**
     * The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's
     * changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET
     * operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
     */
    revision?: pulumi.Input<number>;
    /**
     * Set of opaque identifiers meaningful to the user
     */
    tags?: pulumi.Input<pulumi.Input<inputs.LogicalDhcpServerTag>[]>;
}

/**
 * The set of arguments for constructing a LogicalDhcpServer resource.
 */
export interface LogicalDhcpServerArgs {
    /**
     * Description of this resource
     */
    description?: pulumi.Input<string>;
    /**
     * Generic DHCP options
     */
    dhcpGenericOptions?: pulumi.Input<pulumi.Input<inputs.LogicalDhcpServerDhcpGenericOption>[]>;
    /**
     * DHCP classless static routes
     */
    dhcpOption121s?: pulumi.Input<pulumi.Input<inputs.LogicalDhcpServerDhcpOption121>[]>;
    /**
     * DHCP profile uuid
     */
    dhcpProfileId: pulumi.Input<string>;
    /**
     * DHCP server ip in cidr format
     */
    dhcpServerIp: pulumi.Input<string>;
    /**
     * The display name of this resource. Defaults to ID if not set
     */
    displayName?: pulumi.Input<string>;
    /**
     * DNS IPs
     */
    dnsNameServers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Domain name
     */
    domainName?: pulumi.Input<string>;
    /**
     * Gateway IP
     */
    gatewayIp?: pulumi.Input<string>;
    /**
     * Set of opaque identifiers meaningful to the user
     */
    tags?: pulumi.Input<pulumi.Input<inputs.LogicalDhcpServerTag>[]>;
}
