// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

declare var exports: any;
const __config = new pulumi.Config("nsxt");

export declare const allowUnverifiedSsl: boolean | undefined;
Object.defineProperty(exports, "allowUnverifiedSsl", {
    get() {
        return __config.getObject<boolean>("allowUnverifiedSsl");
    },
    enumerable: true,
});

/**
 * CA certificate passed as string
 */
export declare const ca: string | undefined;
Object.defineProperty(exports, "ca", {
    get() {
        return __config.get("ca");
    },
    enumerable: true,
});

export declare const caFile: string | undefined;
Object.defineProperty(exports, "caFile", {
    get() {
        return __config.get("caFile");
    },
    enumerable: true,
});

/**
 * Client certificate passed as string
 */
export declare const clientAuthCert: string | undefined;
Object.defineProperty(exports, "clientAuthCert", {
    get() {
        return __config.get("clientAuthCert");
    },
    enumerable: true,
});

export declare const clientAuthCertFile: string | undefined;
Object.defineProperty(exports, "clientAuthCertFile", {
    get() {
        return __config.get("clientAuthCertFile");
    },
    enumerable: true,
});

/**
 * Client certificate key passed as string
 */
export declare const clientAuthKey: string | undefined;
Object.defineProperty(exports, "clientAuthKey", {
    get() {
        return __config.get("clientAuthKey");
    },
    enumerable: true,
});

export declare const clientAuthKeyFile: string | undefined;
Object.defineProperty(exports, "clientAuthKeyFile", {
    get() {
        return __config.get("clientAuthKeyFile");
    },
    enumerable: true,
});

/**
 * Enforcement Point for NSXT Policy
 */
export declare const enforcementPoint: string | undefined;
Object.defineProperty(exports, "enforcementPoint", {
    get() {
        return __config.get("enforcementPoint");
    },
    enumerable: true,
});

/**
 * Is this a policy global manager endpoint
 */
export declare const globalManager: boolean | undefined;
Object.defineProperty(exports, "globalManager", {
    get() {
        return __config.getObject<boolean>("globalManager");
    },
    enumerable: true,
});

/**
 * The hostname or IP address of the NSX manager.
 */
export declare const host: string | undefined;
Object.defineProperty(exports, "host", {
    get() {
        return __config.get("host");
    },
    enumerable: true,
});

/**
 * license keys
 */
export declare const licenseKeys: string[] | undefined;
Object.defineProperty(exports, "licenseKeys", {
    get() {
        return __config.getObject<string[]>("licenseKeys");
    },
    enumerable: true,
});

/**
 * Maximum number of HTTP client retries
 */
export declare const maxRetries: number | undefined;
Object.defineProperty(exports, "maxRetries", {
    get() {
        return __config.getObject<number>("maxRetries");
    },
    enumerable: true,
});

/**
 * Avoid initializing NSX connection on startup
 */
export declare const onDemandConnection: boolean | undefined;
Object.defineProperty(exports, "onDemandConnection", {
    get() {
        return __config.getObject<boolean>("onDemandConnection");
    },
    enumerable: true,
});

export declare const password: string | undefined;
Object.defineProperty(exports, "password", {
    get() {
        return __config.get("password");
    },
    enumerable: true,
});

export declare const remoteAuth: boolean | undefined;
Object.defineProperty(exports, "remoteAuth", {
    get() {
        return __config.getObject<boolean>("remoteAuth");
    },
    enumerable: true,
});

/**
 * Maximum delay in milliseconds between retries of a request
 */
export declare const retryMaxDelay: number | undefined;
Object.defineProperty(exports, "retryMaxDelay", {
    get() {
        return __config.getObject<number>("retryMaxDelay");
    },
    enumerable: true,
});

/**
 * Minimum delay in milliseconds between retries of a request
 */
export declare const retryMinDelay: number | undefined;
Object.defineProperty(exports, "retryMinDelay", {
    get() {
        return __config.getObject<number>("retryMinDelay");
    },
    enumerable: true,
});

/**
 * HTTP replies status codes to retry on
 */
export declare const retryOnStatusCodes: number[] | undefined;
Object.defineProperty(exports, "retryOnStatusCodes", {
    get() {
        return __config.getObject<number[]>("retryOnStatusCodes");
    },
    enumerable: true,
});

export declare const sessionAuth: boolean | undefined;
Object.defineProperty(exports, "sessionAuth", {
    get() {
        return __config.getObject<boolean>("sessionAuth");
    },
    enumerable: true,
});

/**
 * Treat partial success status as success
 */
export declare const toleratePartialSuccess: boolean | undefined;
Object.defineProperty(exports, "toleratePartialSuccess", {
    get() {
        return __config.getObject<boolean>("toleratePartialSuccess");
    },
    enumerable: true,
});

export declare const username: string | undefined;
Object.defineProperty(exports, "username", {
    get() {
        return __config.get("username");
    },
    enumerable: true,
});

/**
 * URL for VMC authorization service (CSP)
 */
export declare const vmcAuthHost: string | undefined;
Object.defineProperty(exports, "vmcAuthHost", {
    get() {
        return __config.get("vmcAuthHost");
    },
    enumerable: true,
});

/**
 * Mode for VMC authorization
 */
export declare const vmcAuthMode: string | undefined;
Object.defineProperty(exports, "vmcAuthMode", {
    get() {
        return __config.get("vmcAuthMode");
    },
    enumerable: true,
});

/**
 * ID of OAuth App associated with the VMC organization
 */
export declare const vmcClientId: string | undefined;
Object.defineProperty(exports, "vmcClientId", {
    get() {
        return __config.get("vmcClientId");
    },
    enumerable: true,
});

/**
 * Secret of OAuth App associated with the VMC organization
 */
export declare const vmcClientSecret: string | undefined;
Object.defineProperty(exports, "vmcClientSecret", {
    get() {
        return __config.get("vmcClientSecret");
    },
    enumerable: true,
});

/**
 * Long-living API token for VMC authorization
 */
export declare const vmcToken: string | undefined;
Object.defineProperty(exports, "vmcToken", {
    get() {
        return __config.get("vmcToken");
    },
    enumerable: true,
});

