// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class NodeUser extends pulumi.CustomResource {
    /**
     * Get an existing NodeUser resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NodeUserState, opts?: pulumi.CustomResourceOptions): NodeUser {
        return new NodeUser(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nsxt:index/nodeUser:NodeUser';

    /**
     * Returns true if the given object is an instance of NodeUser.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NodeUser {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NodeUser.__pulumiType;
    }

    /**
     * Boolean value that states if the user account is activated
     */
    public readonly active!: pulumi.Output<boolean | undefined>;
    /**
     * Full name for the user
     */
    public readonly fullName!: pulumi.Output<string>;
    /**
     * Number of days since password was last changed
     */
    public /*out*/ readonly lastPasswordChange!: pulumi.Output<number>;
    /**
     * Password for the user
     */
    public readonly password!: pulumi.Output<string | undefined>;
    /**
     * Number of days password is valid before it must be changed
     */
    public readonly passwordChangeFrequency!: pulumi.Output<number | undefined>;
    /**
     * Number of days before user receives warning message of password expiration
     */
    public readonly passwordChangeWarning!: pulumi.Output<number | undefined>;
    /**
     * Boolean value that states if a password reset is required
     */
    public /*out*/ readonly passwordResetRequired!: pulumi.Output<boolean>;
    /**
     * User status
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * Numeric id for the user
     */
    public /*out*/ readonly userId!: pulumi.Output<number>;
    /**
     * User login name
     */
    public readonly username!: pulumi.Output<string>;

    /**
     * Create a NodeUser resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NodeUserArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NodeUserArgs | NodeUserState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NodeUserState | undefined;
            resourceInputs["active"] = state ? state.active : undefined;
            resourceInputs["fullName"] = state ? state.fullName : undefined;
            resourceInputs["lastPasswordChange"] = state ? state.lastPasswordChange : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["passwordChangeFrequency"] = state ? state.passwordChangeFrequency : undefined;
            resourceInputs["passwordChangeWarning"] = state ? state.passwordChangeWarning : undefined;
            resourceInputs["passwordResetRequired"] = state ? state.passwordResetRequired : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["userId"] = state ? state.userId : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
        } else {
            const args = argsOrState as NodeUserArgs | undefined;
            if ((!args || args.fullName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'fullName'");
            }
            if ((!args || args.username === undefined) && !opts.urn) {
                throw new Error("Missing required property 'username'");
            }
            resourceInputs["active"] = args ? args.active : undefined;
            resourceInputs["fullName"] = args ? args.fullName : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["passwordChangeFrequency"] = args ? args.passwordChangeFrequency : undefined;
            resourceInputs["passwordChangeWarning"] = args ? args.passwordChangeWarning : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
            resourceInputs["lastPasswordChange"] = undefined /*out*/;
            resourceInputs["passwordResetRequired"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["userId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(NodeUser.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering NodeUser resources.
 */
export interface NodeUserState {
    /**
     * Boolean value that states if the user account is activated
     */
    active?: pulumi.Input<boolean>;
    /**
     * Full name for the user
     */
    fullName?: pulumi.Input<string>;
    /**
     * Number of days since password was last changed
     */
    lastPasswordChange?: pulumi.Input<number>;
    /**
     * Password for the user
     */
    password?: pulumi.Input<string>;
    /**
     * Number of days password is valid before it must be changed
     */
    passwordChangeFrequency?: pulumi.Input<number>;
    /**
     * Number of days before user receives warning message of password expiration
     */
    passwordChangeWarning?: pulumi.Input<number>;
    /**
     * Boolean value that states if a password reset is required
     */
    passwordResetRequired?: pulumi.Input<boolean>;
    /**
     * User status
     */
    status?: pulumi.Input<string>;
    /**
     * Numeric id for the user
     */
    userId?: pulumi.Input<number>;
    /**
     * User login name
     */
    username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NodeUser resource.
 */
export interface NodeUserArgs {
    /**
     * Boolean value that states if the user account is activated
     */
    active?: pulumi.Input<boolean>;
    /**
     * Full name for the user
     */
    fullName: pulumi.Input<string>;
    /**
     * Password for the user
     */
    password?: pulumi.Input<string>;
    /**
     * Number of days password is valid before it must be changed
     */
    passwordChangeFrequency?: pulumi.Input<number>;
    /**
     * Number of days before user receives warning message of password expiration
     */
    passwordChangeWarning?: pulumi.Input<number>;
    /**
     * User login name
     */
    username: pulumi.Input<string>;
}
