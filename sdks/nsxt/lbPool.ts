// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class LbPool extends pulumi.CustomResource {
    /**
     * Get an existing LbPool resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LbPoolState, opts?: pulumi.CustomResourceOptions): LbPool {
        return new LbPool(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nsxt:index/lbPool:LbPool';

    /**
     * Returns true if the given object is an instance of LbPool.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LbPool {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LbPool.__pulumiType;
    }

    /**
     * Active health monitor Id. If one is not set, the active healthchecks will be disabled
     */
    public readonly activeMonitorId!: pulumi.Output<string | undefined>;
    /**
     * Load balancing algorithm controls how the incoming connections are distributed among the members
     */
    public readonly algorithm!: pulumi.Output<string | undefined>;
    /**
     * Description of this resource
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The display name of this resource. Defaults to ID if not set
     */
    public readonly displayName!: pulumi.Output<string>;
    /**
     * Dynamic pool members for the loadbalancing pool. When member group is defined, members setting should not be specified
     */
    public readonly memberGroup!: pulumi.Output<outputs.LbPoolMemberGroup | undefined>;
    /**
     * List of server pool members. Each pool member is identified, typically, by an IP address and a port
     */
    public readonly members!: pulumi.Output<outputs.LbPoolMember[] | undefined>;
    /**
     * The minimum number of members for the pool to be considered active
     */
    public readonly minActiveMembers!: pulumi.Output<number | undefined>;
    /**
     * Passive health monitor Id. If one is not set, the passive healthchecks will be disabled
     */
    public readonly passiveMonitorId!: pulumi.Output<string | undefined>;
    /**
     * The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's
     * changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET
     * operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
     */
    public /*out*/ readonly revision!: pulumi.Output<number>;
    /**
     * SNAT translation configuration
     */
    public readonly snatTranslation!: pulumi.Output<outputs.LbPoolSnatTranslation | undefined>;
    /**
     * Set of opaque identifiers meaningful to the user
     */
    public readonly tags!: pulumi.Output<outputs.LbPoolTag[] | undefined>;
    /**
     * TCP multiplexing allows the same TCP connection between load balancer and the backend server to be used for sending
     * multiple client requests from different client TCP connections
     */
    public readonly tcpMultiplexingEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * The maximum number of TCP connections per pool that are idly kept alive for sending future client requests
     */
    public readonly tcpMultiplexingNumber!: pulumi.Output<number | undefined>;

    /**
     * Create a LbPool resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: LbPoolArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LbPoolArgs | LbPoolState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LbPoolState | undefined;
            resourceInputs["activeMonitorId"] = state ? state.activeMonitorId : undefined;
            resourceInputs["algorithm"] = state ? state.algorithm : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["memberGroup"] = state ? state.memberGroup : undefined;
            resourceInputs["members"] = state ? state.members : undefined;
            resourceInputs["minActiveMembers"] = state ? state.minActiveMembers : undefined;
            resourceInputs["passiveMonitorId"] = state ? state.passiveMonitorId : undefined;
            resourceInputs["revision"] = state ? state.revision : undefined;
            resourceInputs["snatTranslation"] = state ? state.snatTranslation : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tcpMultiplexingEnabled"] = state ? state.tcpMultiplexingEnabled : undefined;
            resourceInputs["tcpMultiplexingNumber"] = state ? state.tcpMultiplexingNumber : undefined;
        } else {
            const args = argsOrState as LbPoolArgs | undefined;
            resourceInputs["activeMonitorId"] = args ? args.activeMonitorId : undefined;
            resourceInputs["algorithm"] = args ? args.algorithm : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["memberGroup"] = args ? args.memberGroup : undefined;
            resourceInputs["members"] = args ? args.members : undefined;
            resourceInputs["minActiveMembers"] = args ? args.minActiveMembers : undefined;
            resourceInputs["passiveMonitorId"] = args ? args.passiveMonitorId : undefined;
            resourceInputs["snatTranslation"] = args ? args.snatTranslation : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tcpMultiplexingEnabled"] = args ? args.tcpMultiplexingEnabled : undefined;
            resourceInputs["tcpMultiplexingNumber"] = args ? args.tcpMultiplexingNumber : undefined;
            resourceInputs["revision"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LbPool.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LbPool resources.
 */
export interface LbPoolState {
    /**
     * Active health monitor Id. If one is not set, the active healthchecks will be disabled
     */
    activeMonitorId?: pulumi.Input<string>;
    /**
     * Load balancing algorithm controls how the incoming connections are distributed among the members
     */
    algorithm?: pulumi.Input<string>;
    /**
     * Description of this resource
     */
    description?: pulumi.Input<string>;
    /**
     * The display name of this resource. Defaults to ID if not set
     */
    displayName?: pulumi.Input<string>;
    /**
     * Dynamic pool members for the loadbalancing pool. When member group is defined, members setting should not be specified
     */
    memberGroup?: pulumi.Input<inputs.LbPoolMemberGroup>;
    /**
     * List of server pool members. Each pool member is identified, typically, by an IP address and a port
     */
    members?: pulumi.Input<pulumi.Input<inputs.LbPoolMember>[]>;
    /**
     * The minimum number of members for the pool to be considered active
     */
    minActiveMembers?: pulumi.Input<number>;
    /**
     * Passive health monitor Id. If one is not set, the passive healthchecks will be disabled
     */
    passiveMonitorId?: pulumi.Input<string>;
    /**
     * The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's
     * changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET
     * operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
     */
    revision?: pulumi.Input<number>;
    /**
     * SNAT translation configuration
     */
    snatTranslation?: pulumi.Input<inputs.LbPoolSnatTranslation>;
    /**
     * Set of opaque identifiers meaningful to the user
     */
    tags?: pulumi.Input<pulumi.Input<inputs.LbPoolTag>[]>;
    /**
     * TCP multiplexing allows the same TCP connection between load balancer and the backend server to be used for sending
     * multiple client requests from different client TCP connections
     */
    tcpMultiplexingEnabled?: pulumi.Input<boolean>;
    /**
     * The maximum number of TCP connections per pool that are idly kept alive for sending future client requests
     */
    tcpMultiplexingNumber?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a LbPool resource.
 */
export interface LbPoolArgs {
    /**
     * Active health monitor Id. If one is not set, the active healthchecks will be disabled
     */
    activeMonitorId?: pulumi.Input<string>;
    /**
     * Load balancing algorithm controls how the incoming connections are distributed among the members
     */
    algorithm?: pulumi.Input<string>;
    /**
     * Description of this resource
     */
    description?: pulumi.Input<string>;
    /**
     * The display name of this resource. Defaults to ID if not set
     */
    displayName?: pulumi.Input<string>;
    /**
     * Dynamic pool members for the loadbalancing pool. When member group is defined, members setting should not be specified
     */
    memberGroup?: pulumi.Input<inputs.LbPoolMemberGroup>;
    /**
     * List of server pool members. Each pool member is identified, typically, by an IP address and a port
     */
    members?: pulumi.Input<pulumi.Input<inputs.LbPoolMember>[]>;
    /**
     * The minimum number of members for the pool to be considered active
     */
    minActiveMembers?: pulumi.Input<number>;
    /**
     * Passive health monitor Id. If one is not set, the passive healthchecks will be disabled
     */
    passiveMonitorId?: pulumi.Input<string>;
    /**
     * SNAT translation configuration
     */
    snatTranslation?: pulumi.Input<inputs.LbPoolSnatTranslation>;
    /**
     * Set of opaque identifiers meaningful to the user
     */
    tags?: pulumi.Input<pulumi.Input<inputs.LbPoolTag>[]>;
    /**
     * TCP multiplexing allows the same TCP connection between load balancer and the backend server to be used for sending
     * multiple client requests from different client TCP connections
     */
    tcpMultiplexingEnabled?: pulumi.Input<boolean>;
    /**
     * The maximum number of TCP connections per pool that are idly kept alive for sending future client requests
     */
    tcpMultiplexingNumber?: pulumi.Input<number>;
}
