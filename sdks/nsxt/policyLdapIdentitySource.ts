// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class PolicyLdapIdentitySource extends pulumi.CustomResource {
    /**
     * Get an existing PolicyLdapIdentitySource resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PolicyLdapIdentitySourceState, opts?: pulumi.CustomResourceOptions): PolicyLdapIdentitySource {
        return new PolicyLdapIdentitySource(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nsxt:index/policyLdapIdentitySource:PolicyLdapIdentitySource';

    /**
     * Returns true if the given object is an instance of PolicyLdapIdentitySource.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PolicyLdapIdentitySource {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PolicyLdapIdentitySource.__pulumiType;
    }

    /**
     * Additional domains to be directed to this identity source
     */
    public readonly alternativeDomainNames!: pulumi.Output<string[] | undefined>;
    /**
     * DN of subtree for user and group searches
     */
    public readonly baseDn!: pulumi.Output<string>;
    /**
     * Description for this resource
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Authentication domain name
     */
    public readonly domainName!: pulumi.Output<string>;
    /**
     * LDAP servers for this identity source
     */
    public readonly ldapServer!: pulumi.Output<outputs.PolicyLdapIdentitySourceLdapServer>;
    /**
     * NSX ID for this resource
     */
    public readonly nsxId!: pulumi.Output<string>;
    /**
     * The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's
     * changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET
     * operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
     */
    public /*out*/ readonly revision!: pulumi.Output<number>;
    /**
     * Set of opaque identifiers meaningful to the user
     */
    public readonly tags!: pulumi.Output<outputs.PolicyLdapIdentitySourceTag[] | undefined>;
    /**
     * Indicates the type of LDAP server
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a PolicyLdapIdentitySource resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PolicyLdapIdentitySourceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PolicyLdapIdentitySourceArgs | PolicyLdapIdentitySourceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PolicyLdapIdentitySourceState | undefined;
            resourceInputs["alternativeDomainNames"] = state ? state.alternativeDomainNames : undefined;
            resourceInputs["baseDn"] = state ? state.baseDn : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["domainName"] = state ? state.domainName : undefined;
            resourceInputs["ldapServer"] = state ? state.ldapServer : undefined;
            resourceInputs["nsxId"] = state ? state.nsxId : undefined;
            resourceInputs["revision"] = state ? state.revision : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as PolicyLdapIdentitySourceArgs | undefined;
            if ((!args || args.baseDn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'baseDn'");
            }
            if ((!args || args.domainName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domainName'");
            }
            if ((!args || args.ldapServer === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ldapServer'");
            }
            if ((!args || args.nsxId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nsxId'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["alternativeDomainNames"] = args ? args.alternativeDomainNames : undefined;
            resourceInputs["baseDn"] = args ? args.baseDn : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["domainName"] = args ? args.domainName : undefined;
            resourceInputs["ldapServer"] = args ? args.ldapServer : undefined;
            resourceInputs["nsxId"] = args ? args.nsxId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["revision"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PolicyLdapIdentitySource.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering PolicyLdapIdentitySource resources.
 */
export interface PolicyLdapIdentitySourceState {
    /**
     * Additional domains to be directed to this identity source
     */
    alternativeDomainNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * DN of subtree for user and group searches
     */
    baseDn?: pulumi.Input<string>;
    /**
     * Description for this resource
     */
    description?: pulumi.Input<string>;
    /**
     * Authentication domain name
     */
    domainName?: pulumi.Input<string>;
    /**
     * LDAP servers for this identity source
     */
    ldapServer?: pulumi.Input<inputs.PolicyLdapIdentitySourceLdapServer>;
    /**
     * NSX ID for this resource
     */
    nsxId?: pulumi.Input<string>;
    /**
     * The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's
     * changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET
     * operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
     */
    revision?: pulumi.Input<number>;
    /**
     * Set of opaque identifiers meaningful to the user
     */
    tags?: pulumi.Input<pulumi.Input<inputs.PolicyLdapIdentitySourceTag>[]>;
    /**
     * Indicates the type of LDAP server
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a PolicyLdapIdentitySource resource.
 */
export interface PolicyLdapIdentitySourceArgs {
    /**
     * Additional domains to be directed to this identity source
     */
    alternativeDomainNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * DN of subtree for user and group searches
     */
    baseDn: pulumi.Input<string>;
    /**
     * Description for this resource
     */
    description?: pulumi.Input<string>;
    /**
     * Authentication domain name
     */
    domainName: pulumi.Input<string>;
    /**
     * LDAP servers for this identity source
     */
    ldapServer: pulumi.Input<inputs.PolicyLdapIdentitySourceLdapServer>;
    /**
     * NSX ID for this resource
     */
    nsxId: pulumi.Input<string>;
    /**
     * Set of opaque identifiers meaningful to the user
     */
    tags?: pulumi.Input<pulumi.Input<inputs.PolicyLdapIdentitySourceTag>[]>;
    /**
     * Indicates the type of LDAP server
     */
    type: pulumi.Input<string>;
}
