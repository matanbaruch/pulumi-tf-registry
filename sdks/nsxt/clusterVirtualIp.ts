// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ClusterVirtualIp extends pulumi.CustomResource {
    /**
     * Get an existing ClusterVirtualIp resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ClusterVirtualIpState, opts?: pulumi.CustomResourceOptions): ClusterVirtualIp {
        return new ClusterVirtualIp(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nsxt:index/clusterVirtualIp:ClusterVirtualIp';

    /**
     * Returns true if the given object is an instance of ClusterVirtualIp.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ClusterVirtualIp {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ClusterVirtualIp.__pulumiType;
    }

    /**
     * On enable it ignores duplicate address detection and DNS lookup validation check
     */
    public readonly force!: pulumi.Output<boolean | undefined>;
    /**
     * Virtual IPv4 address
     */
    public readonly ipAddress!: pulumi.Output<string | undefined>;
    /**
     * Virtual IPv6 address
     */
    public readonly ipv6Address!: pulumi.Output<string | undefined>;

    /**
     * Create a ClusterVirtualIp resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ClusterVirtualIpArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ClusterVirtualIpArgs | ClusterVirtualIpState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ClusterVirtualIpState | undefined;
            resourceInputs["force"] = state ? state.force : undefined;
            resourceInputs["ipAddress"] = state ? state.ipAddress : undefined;
            resourceInputs["ipv6Address"] = state ? state.ipv6Address : undefined;
        } else {
            const args = argsOrState as ClusterVirtualIpArgs | undefined;
            resourceInputs["force"] = args ? args.force : undefined;
            resourceInputs["ipAddress"] = args ? args.ipAddress : undefined;
            resourceInputs["ipv6Address"] = args ? args.ipv6Address : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ClusterVirtualIp.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ClusterVirtualIp resources.
 */
export interface ClusterVirtualIpState {
    /**
     * On enable it ignores duplicate address detection and DNS lookup validation check
     */
    force?: pulumi.Input<boolean>;
    /**
     * Virtual IPv4 address
     */
    ipAddress?: pulumi.Input<string>;
    /**
     * Virtual IPv6 address
     */
    ipv6Address?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ClusterVirtualIp resource.
 */
export interface ClusterVirtualIpArgs {
    /**
     * On enable it ignores duplicate address detection and DNS lookup validation check
     */
    force?: pulumi.Input<boolean>;
    /**
     * Virtual IPv4 address
     */
    ipAddress?: pulumi.Input<string>;
    /**
     * Virtual IPv6 address
     */
    ipv6Address?: pulumi.Input<string>;
}
