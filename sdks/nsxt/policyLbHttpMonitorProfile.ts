// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class PolicyLbHttpMonitorProfile extends pulumi.CustomResource {
    /**
     * Get an existing PolicyLbHttpMonitorProfile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PolicyLbHttpMonitorProfileState, opts?: pulumi.CustomResourceOptions): PolicyLbHttpMonitorProfile {
        return new PolicyLbHttpMonitorProfile(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nsxt:index/policyLbHttpMonitorProfile:PolicyLbHttpMonitorProfile';

    /**
     * Returns true if the given object is an instance of PolicyLbHttpMonitorProfile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PolicyLbHttpMonitorProfile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PolicyLbHttpMonitorProfile.__pulumiType;
    }

    /**
     * Description for this resource
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Display name for this resource
     */
    public readonly displayName!: pulumi.Output<string>;
    /**
     * Number of consecutive checks that must fail before marking it down
     */
    public readonly fallCount!: pulumi.Output<number | undefined>;
    /**
     * The frequency at which the system issues the monitor check (in seconds)
     */
    public readonly interval!: pulumi.Output<number | undefined>;
    /**
     * If the monitor port is specified, it would override pool member port setting for healthcheck. A port range is not
     * supported
     */
    public readonly monitorPort!: pulumi.Output<number | undefined>;
    /**
     * NSX ID for this resource
     */
    public readonly nsxId!: pulumi.Output<string>;
    /**
     * Policy path for this resource
     */
    public /*out*/ readonly path!: pulumi.Output<string>;
    /**
     * String to send as HTTP health check request body. Valid only for certain HTTP methods like POST
     */
    public readonly requestBody!: pulumi.Output<string | undefined>;
    /**
     * Array of HTTP request headers
     */
    public readonly requestHeaders!: pulumi.Output<outputs.PolicyLbHttpMonitorProfileRequestHeader[] | undefined>;
    /**
     * Health check method for HTTP monitor type
     */
    public readonly requestMethod!: pulumi.Output<string | undefined>;
    /**
     * URL used for HTTP monitor
     */
    public readonly requestUrl!: pulumi.Output<string | undefined>;
    /**
     * HTTP request version
     */
    public readonly requestVersion!: pulumi.Output<string | undefined>;
    /**
     * If HTTP specified, healthcheck HTTP response body is matched against the specified string (regular expressions not
     * supported), and succeeds only if there is a match
     */
    public readonly responseBody!: pulumi.Output<string | undefined>;
    /**
     * The HTTP response status code should be a valid HTTP status code
     */
    public readonly responseStatusCodes!: pulumi.Output<number[]>;
    /**
     * The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's
     * changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET
     * operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
     */
    public /*out*/ readonly revision!: pulumi.Output<number>;
    /**
     * Number of consecutive checks that must pass before marking it up
     */
    public readonly riseCount!: pulumi.Output<number | undefined>;
    /**
     * Set of opaque identifiers meaningful to the user
     */
    public readonly tags!: pulumi.Output<outputs.PolicyLbHttpMonitorProfileTag[] | undefined>;
    /**
     * Number of seconds the target has to respond to the monitor request
     */
    public readonly timeout!: pulumi.Output<number | undefined>;

    /**
     * Create a PolicyLbHttpMonitorProfile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PolicyLbHttpMonitorProfileArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PolicyLbHttpMonitorProfileArgs | PolicyLbHttpMonitorProfileState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PolicyLbHttpMonitorProfileState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["fallCount"] = state ? state.fallCount : undefined;
            resourceInputs["interval"] = state ? state.interval : undefined;
            resourceInputs["monitorPort"] = state ? state.monitorPort : undefined;
            resourceInputs["nsxId"] = state ? state.nsxId : undefined;
            resourceInputs["path"] = state ? state.path : undefined;
            resourceInputs["requestBody"] = state ? state.requestBody : undefined;
            resourceInputs["requestHeaders"] = state ? state.requestHeaders : undefined;
            resourceInputs["requestMethod"] = state ? state.requestMethod : undefined;
            resourceInputs["requestUrl"] = state ? state.requestUrl : undefined;
            resourceInputs["requestVersion"] = state ? state.requestVersion : undefined;
            resourceInputs["responseBody"] = state ? state.responseBody : undefined;
            resourceInputs["responseStatusCodes"] = state ? state.responseStatusCodes : undefined;
            resourceInputs["revision"] = state ? state.revision : undefined;
            resourceInputs["riseCount"] = state ? state.riseCount : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeout"] = state ? state.timeout : undefined;
        } else {
            const args = argsOrState as PolicyLbHttpMonitorProfileArgs | undefined;
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["fallCount"] = args ? args.fallCount : undefined;
            resourceInputs["interval"] = args ? args.interval : undefined;
            resourceInputs["monitorPort"] = args ? args.monitorPort : undefined;
            resourceInputs["nsxId"] = args ? args.nsxId : undefined;
            resourceInputs["requestBody"] = args ? args.requestBody : undefined;
            resourceInputs["requestHeaders"] = args ? args.requestHeaders : undefined;
            resourceInputs["requestMethod"] = args ? args.requestMethod : undefined;
            resourceInputs["requestUrl"] = args ? args.requestUrl : undefined;
            resourceInputs["requestVersion"] = args ? args.requestVersion : undefined;
            resourceInputs["responseBody"] = args ? args.responseBody : undefined;
            resourceInputs["responseStatusCodes"] = args ? args.responseStatusCodes : undefined;
            resourceInputs["riseCount"] = args ? args.riseCount : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeout"] = args ? args.timeout : undefined;
            resourceInputs["path"] = undefined /*out*/;
            resourceInputs["revision"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PolicyLbHttpMonitorProfile.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering PolicyLbHttpMonitorProfile resources.
 */
export interface PolicyLbHttpMonitorProfileState {
    /**
     * Description for this resource
     */
    description?: pulumi.Input<string>;
    /**
     * Display name for this resource
     */
    displayName?: pulumi.Input<string>;
    /**
     * Number of consecutive checks that must fail before marking it down
     */
    fallCount?: pulumi.Input<number>;
    /**
     * The frequency at which the system issues the monitor check (in seconds)
     */
    interval?: pulumi.Input<number>;
    /**
     * If the monitor port is specified, it would override pool member port setting for healthcheck. A port range is not
     * supported
     */
    monitorPort?: pulumi.Input<number>;
    /**
     * NSX ID for this resource
     */
    nsxId?: pulumi.Input<string>;
    /**
     * Policy path for this resource
     */
    path?: pulumi.Input<string>;
    /**
     * String to send as HTTP health check request body. Valid only for certain HTTP methods like POST
     */
    requestBody?: pulumi.Input<string>;
    /**
     * Array of HTTP request headers
     */
    requestHeaders?: pulumi.Input<pulumi.Input<inputs.PolicyLbHttpMonitorProfileRequestHeader>[]>;
    /**
     * Health check method for HTTP monitor type
     */
    requestMethod?: pulumi.Input<string>;
    /**
     * URL used for HTTP monitor
     */
    requestUrl?: pulumi.Input<string>;
    /**
     * HTTP request version
     */
    requestVersion?: pulumi.Input<string>;
    /**
     * If HTTP specified, healthcheck HTTP response body is matched against the specified string (regular expressions not
     * supported), and succeeds only if there is a match
     */
    responseBody?: pulumi.Input<string>;
    /**
     * The HTTP response status code should be a valid HTTP status code
     */
    responseStatusCodes?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's
     * changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET
     * operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
     */
    revision?: pulumi.Input<number>;
    /**
     * Number of consecutive checks that must pass before marking it up
     */
    riseCount?: pulumi.Input<number>;
    /**
     * Set of opaque identifiers meaningful to the user
     */
    tags?: pulumi.Input<pulumi.Input<inputs.PolicyLbHttpMonitorProfileTag>[]>;
    /**
     * Number of seconds the target has to respond to the monitor request
     */
    timeout?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a PolicyLbHttpMonitorProfile resource.
 */
export interface PolicyLbHttpMonitorProfileArgs {
    /**
     * Description for this resource
     */
    description?: pulumi.Input<string>;
    /**
     * Display name for this resource
     */
    displayName: pulumi.Input<string>;
    /**
     * Number of consecutive checks that must fail before marking it down
     */
    fallCount?: pulumi.Input<number>;
    /**
     * The frequency at which the system issues the monitor check (in seconds)
     */
    interval?: pulumi.Input<number>;
    /**
     * If the monitor port is specified, it would override pool member port setting for healthcheck. A port range is not
     * supported
     */
    monitorPort?: pulumi.Input<number>;
    /**
     * NSX ID for this resource
     */
    nsxId?: pulumi.Input<string>;
    /**
     * String to send as HTTP health check request body. Valid only for certain HTTP methods like POST
     */
    requestBody?: pulumi.Input<string>;
    /**
     * Array of HTTP request headers
     */
    requestHeaders?: pulumi.Input<pulumi.Input<inputs.PolicyLbHttpMonitorProfileRequestHeader>[]>;
    /**
     * Health check method for HTTP monitor type
     */
    requestMethod?: pulumi.Input<string>;
    /**
     * URL used for HTTP monitor
     */
    requestUrl?: pulumi.Input<string>;
    /**
     * HTTP request version
     */
    requestVersion?: pulumi.Input<string>;
    /**
     * If HTTP specified, healthcheck HTTP response body is matched against the specified string (regular expressions not
     * supported), and succeeds only if there is a match
     */
    responseBody?: pulumi.Input<string>;
    /**
     * The HTTP response status code should be a valid HTTP status code
     */
    responseStatusCodes?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Number of consecutive checks that must pass before marking it up
     */
    riseCount?: pulumi.Input<number>;
    /**
     * Set of opaque identifiers meaningful to the user
     */
    tags?: pulumi.Input<pulumi.Input<inputs.PolicyLbHttpMonitorProfileTag>[]>;
    /**
     * Number of seconds the target has to respond to the monitor request
     */
    timeout?: pulumi.Input<number>;
}
