// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class LbTcpVirtualServer extends pulumi.CustomResource {
    /**
     * Get an existing LbTcpVirtualServer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LbTcpVirtualServerState, opts?: pulumi.CustomResourceOptions): LbTcpVirtualServer {
        return new LbTcpVirtualServer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nsxt:index/lbTcpVirtualServer:LbTcpVirtualServer';

    /**
     * Returns true if the given object is an instance of LbTcpVirtualServer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LbTcpVirtualServer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LbTcpVirtualServer.__pulumiType;
    }

    /**
     * Whether access log is enabled
     */
    public readonly accessLogEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * The tcp application profile defines the application protocol characteristics
     */
    public readonly applicationProfileId!: pulumi.Output<string>;
    /**
     * Default pool member ports or port range
     */
    public readonly defaultPoolMemberPorts!: pulumi.Output<string[] | undefined>;
    /**
     * Description of this resource
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The display name of this resource. Defaults to ID if not set
     */
    public readonly displayName!: pulumi.Output<string>;
    /**
     * whether the virtual server is enabled
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * virtual server IP address
     */
    public readonly ipAddress!: pulumi.Output<string>;
    /**
     * If not specified, connections are unlimited
     */
    public readonly maxConcurrentConnections!: pulumi.Output<number | undefined>;
    /**
     * If not specified, connection rate is unlimited
     */
    public readonly maxNewConnectionRate!: pulumi.Output<number | undefined>;
    /**
     * Persistence profile is used to allow related client connections to be sent to the same backend server. Source ip
     * persistence is supported.
     */
    public readonly persistenceProfileId!: pulumi.Output<string | undefined>;
    /**
     * Server pool for backend connections
     */
    public readonly poolId!: pulumi.Output<string | undefined>;
    /**
     * Single port, multiple ports or port ranges
     */
    public readonly ports!: pulumi.Output<string[]>;
    /**
     * The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's
     * changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET
     * operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
     */
    public /*out*/ readonly revision!: pulumi.Output<number>;
    /**
     * When load balancer can not select a backend server to serve the request in default pool, the request would be served by
     * sorry server pool
     */
    public readonly sorryPoolId!: pulumi.Output<string | undefined>;
    /**
     * Set of opaque identifiers meaningful to the user
     */
    public readonly tags!: pulumi.Output<outputs.LbTcpVirtualServerTag[] | undefined>;

    /**
     * Create a LbTcpVirtualServer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LbTcpVirtualServerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LbTcpVirtualServerArgs | LbTcpVirtualServerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LbTcpVirtualServerState | undefined;
            resourceInputs["accessLogEnabled"] = state ? state.accessLogEnabled : undefined;
            resourceInputs["applicationProfileId"] = state ? state.applicationProfileId : undefined;
            resourceInputs["defaultPoolMemberPorts"] = state ? state.defaultPoolMemberPorts : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["ipAddress"] = state ? state.ipAddress : undefined;
            resourceInputs["maxConcurrentConnections"] = state ? state.maxConcurrentConnections : undefined;
            resourceInputs["maxNewConnectionRate"] = state ? state.maxNewConnectionRate : undefined;
            resourceInputs["persistenceProfileId"] = state ? state.persistenceProfileId : undefined;
            resourceInputs["poolId"] = state ? state.poolId : undefined;
            resourceInputs["ports"] = state ? state.ports : undefined;
            resourceInputs["revision"] = state ? state.revision : undefined;
            resourceInputs["sorryPoolId"] = state ? state.sorryPoolId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as LbTcpVirtualServerArgs | undefined;
            if ((!args || args.applicationProfileId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'applicationProfileId'");
            }
            if ((!args || args.ipAddress === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ipAddress'");
            }
            if ((!args || args.ports === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ports'");
            }
            resourceInputs["accessLogEnabled"] = args ? args.accessLogEnabled : undefined;
            resourceInputs["applicationProfileId"] = args ? args.applicationProfileId : undefined;
            resourceInputs["defaultPoolMemberPorts"] = args ? args.defaultPoolMemberPorts : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["ipAddress"] = args ? args.ipAddress : undefined;
            resourceInputs["maxConcurrentConnections"] = args ? args.maxConcurrentConnections : undefined;
            resourceInputs["maxNewConnectionRate"] = args ? args.maxNewConnectionRate : undefined;
            resourceInputs["persistenceProfileId"] = args ? args.persistenceProfileId : undefined;
            resourceInputs["poolId"] = args ? args.poolId : undefined;
            resourceInputs["ports"] = args ? args.ports : undefined;
            resourceInputs["sorryPoolId"] = args ? args.sorryPoolId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["revision"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LbTcpVirtualServer.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LbTcpVirtualServer resources.
 */
export interface LbTcpVirtualServerState {
    /**
     * Whether access log is enabled
     */
    accessLogEnabled?: pulumi.Input<boolean>;
    /**
     * The tcp application profile defines the application protocol characteristics
     */
    applicationProfileId?: pulumi.Input<string>;
    /**
     * Default pool member ports or port range
     */
    defaultPoolMemberPorts?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Description of this resource
     */
    description?: pulumi.Input<string>;
    /**
     * The display name of this resource. Defaults to ID if not set
     */
    displayName?: pulumi.Input<string>;
    /**
     * whether the virtual server is enabled
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * virtual server IP address
     */
    ipAddress?: pulumi.Input<string>;
    /**
     * If not specified, connections are unlimited
     */
    maxConcurrentConnections?: pulumi.Input<number>;
    /**
     * If not specified, connection rate is unlimited
     */
    maxNewConnectionRate?: pulumi.Input<number>;
    /**
     * Persistence profile is used to allow related client connections to be sent to the same backend server. Source ip
     * persistence is supported.
     */
    persistenceProfileId?: pulumi.Input<string>;
    /**
     * Server pool for backend connections
     */
    poolId?: pulumi.Input<string>;
    /**
     * Single port, multiple ports or port ranges
     */
    ports?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's
     * changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET
     * operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
     */
    revision?: pulumi.Input<number>;
    /**
     * When load balancer can not select a backend server to serve the request in default pool, the request would be served by
     * sorry server pool
     */
    sorryPoolId?: pulumi.Input<string>;
    /**
     * Set of opaque identifiers meaningful to the user
     */
    tags?: pulumi.Input<pulumi.Input<inputs.LbTcpVirtualServerTag>[]>;
}

/**
 * The set of arguments for constructing a LbTcpVirtualServer resource.
 */
export interface LbTcpVirtualServerArgs {
    /**
     * Whether access log is enabled
     */
    accessLogEnabled?: pulumi.Input<boolean>;
    /**
     * The tcp application profile defines the application protocol characteristics
     */
    applicationProfileId: pulumi.Input<string>;
    /**
     * Default pool member ports or port range
     */
    defaultPoolMemberPorts?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Description of this resource
     */
    description?: pulumi.Input<string>;
    /**
     * The display name of this resource. Defaults to ID if not set
     */
    displayName?: pulumi.Input<string>;
    /**
     * whether the virtual server is enabled
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * virtual server IP address
     */
    ipAddress: pulumi.Input<string>;
    /**
     * If not specified, connections are unlimited
     */
    maxConcurrentConnections?: pulumi.Input<number>;
    /**
     * If not specified, connection rate is unlimited
     */
    maxNewConnectionRate?: pulumi.Input<number>;
    /**
     * Persistence profile is used to allow related client connections to be sent to the same backend server. Source ip
     * persistence is supported.
     */
    persistenceProfileId?: pulumi.Input<string>;
    /**
     * Server pool for backend connections
     */
    poolId?: pulumi.Input<string>;
    /**
     * Single port, multiple ports or port ranges
     */
    ports: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * When load balancer can not select a backend server to serve the request in default pool, the request would be served by
     * sorry server pool
     */
    sorryPoolId?: pulumi.Input<string>;
    /**
     * Set of opaque identifiers meaningful to the user
     */
    tags?: pulumi.Input<pulumi.Input<inputs.LbTcpVirtualServerTag>[]>;
}
