// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AlgorithmTypeNsServiceArgs, AlgorithmTypeNsServiceState } from "./algorithmTypeNsService";
export type AlgorithmTypeNsService = import("./algorithmTypeNsService").AlgorithmTypeNsService;
export const AlgorithmTypeNsService: typeof import("./algorithmTypeNsService").AlgorithmTypeNsService = null as any;
utilities.lazyLoad(exports, ["AlgorithmTypeNsService"], () => require("./algorithmTypeNsService"));

export { ClusterVirtualIpArgs, ClusterVirtualIpState } from "./clusterVirtualIp";
export type ClusterVirtualIp = import("./clusterVirtualIp").ClusterVirtualIp;
export const ClusterVirtualIp: typeof import("./clusterVirtualIp").ClusterVirtualIp = null as any;
utilities.lazyLoad(exports, ["ClusterVirtualIp"], () => require("./clusterVirtualIp"));

export { ComputeManagerArgs, ComputeManagerState } from "./computeManager";
export type ComputeManager = import("./computeManager").ComputeManager;
export const ComputeManager: typeof import("./computeManager").ComputeManager = null as any;
utilities.lazyLoad(exports, ["ComputeManager"], () => require("./computeManager"));

export { DhcpRelayProfileArgs, DhcpRelayProfileState } from "./dhcpRelayProfile";
export type DhcpRelayProfile = import("./dhcpRelayProfile").DhcpRelayProfile;
export const DhcpRelayProfile: typeof import("./dhcpRelayProfile").DhcpRelayProfile = null as any;
utilities.lazyLoad(exports, ["DhcpRelayProfile"], () => require("./dhcpRelayProfile"));

export { DhcpRelayServiceArgs, DhcpRelayServiceState } from "./dhcpRelayService";
export type DhcpRelayService = import("./dhcpRelayService").DhcpRelayService;
export const DhcpRelayService: typeof import("./dhcpRelayService").DhcpRelayService = null as any;
utilities.lazyLoad(exports, ["DhcpRelayService"], () => require("./dhcpRelayService"));

export { DhcpServerIpPoolArgs, DhcpServerIpPoolState } from "./dhcpServerIpPool";
export type DhcpServerIpPool = import("./dhcpServerIpPool").DhcpServerIpPool;
export const DhcpServerIpPool: typeof import("./dhcpServerIpPool").DhcpServerIpPool = null as any;
utilities.lazyLoad(exports, ["DhcpServerIpPool"], () => require("./dhcpServerIpPool"));

export { DhcpServerProfileArgs, DhcpServerProfileState } from "./dhcpServerProfile";
export type DhcpServerProfile = import("./dhcpServerProfile").DhcpServerProfile;
export const DhcpServerProfile: typeof import("./dhcpServerProfile").DhcpServerProfile = null as any;
utilities.lazyLoad(exports, ["DhcpServerProfile"], () => require("./dhcpServerProfile"));

export { EdgeClusterArgs, EdgeClusterState } from "./edgeCluster";
export type EdgeCluster = import("./edgeCluster").EdgeCluster;
export const EdgeCluster: typeof import("./edgeCluster").EdgeCluster = null as any;
utilities.lazyLoad(exports, ["EdgeCluster"], () => require("./edgeCluster"));

export { EdgeHighAvailabilityProfileArgs, EdgeHighAvailabilityProfileState } from "./edgeHighAvailabilityProfile";
export type EdgeHighAvailabilityProfile = import("./edgeHighAvailabilityProfile").EdgeHighAvailabilityProfile;
export const EdgeHighAvailabilityProfile: typeof import("./edgeHighAvailabilityProfile").EdgeHighAvailabilityProfile = null as any;
utilities.lazyLoad(exports, ["EdgeHighAvailabilityProfile"], () => require("./edgeHighAvailabilityProfile"));

export { EdgeTransportNodeArgs, EdgeTransportNodeState } from "./edgeTransportNode";
export type EdgeTransportNode = import("./edgeTransportNode").EdgeTransportNode;
export const EdgeTransportNode: typeof import("./edgeTransportNode").EdgeTransportNode = null as any;
utilities.lazyLoad(exports, ["EdgeTransportNode"], () => require("./edgeTransportNode"));

export { EdgeTransportNodeRtepArgs, EdgeTransportNodeRtepState } from "./edgeTransportNodeRtep";
export type EdgeTransportNodeRtep = import("./edgeTransportNodeRtep").EdgeTransportNodeRtep;
export const EdgeTransportNodeRtep: typeof import("./edgeTransportNodeRtep").EdgeTransportNodeRtep = null as any;
utilities.lazyLoad(exports, ["EdgeTransportNodeRtep"], () => require("./edgeTransportNodeRtep"));

export { EtherTypeNsServiceArgs, EtherTypeNsServiceState } from "./etherTypeNsService";
export type EtherTypeNsService = import("./etherTypeNsService").EtherTypeNsService;
export const EtherTypeNsService: typeof import("./etherTypeNsService").EtherTypeNsService = null as any;
utilities.lazyLoad(exports, ["EtherTypeNsService"], () => require("./etherTypeNsService"));

export { FailureDomainArgs, FailureDomainState } from "./failureDomain";
export type FailureDomain = import("./failureDomain").FailureDomain;
export const FailureDomain: typeof import("./failureDomain").FailureDomain = null as any;
utilities.lazyLoad(exports, ["FailureDomain"], () => require("./failureDomain"));

export { FirewallSectionArgs, FirewallSectionState } from "./firewallSection";
export type FirewallSection = import("./firewallSection").FirewallSection;
export const FirewallSection: typeof import("./firewallSection").FirewallSection = null as any;
utilities.lazyLoad(exports, ["FirewallSection"], () => require("./firewallSection"));

export { GetCertificateArgs, GetCertificateResult, GetCertificateOutputArgs } from "./getCertificate";
export const getCertificate: typeof import("./getCertificate").getCertificate = null as any;
export const getCertificateOutput: typeof import("./getCertificate").getCertificateOutput = null as any;
utilities.lazyLoad(exports, ["getCertificate","getCertificateOutput"], () => require("./getCertificate"));

export { GetComputeCollectionArgs, GetComputeCollectionResult, GetComputeCollectionOutputArgs } from "./getComputeCollection";
export const getComputeCollection: typeof import("./getComputeCollection").getComputeCollection = null as any;
export const getComputeCollectionOutput: typeof import("./getComputeCollection").getComputeCollectionOutput = null as any;
utilities.lazyLoad(exports, ["getComputeCollection","getComputeCollectionOutput"], () => require("./getComputeCollection"));

export { GetComputeManagerArgs, GetComputeManagerResult, GetComputeManagerOutputArgs } from "./getComputeManager";
export const getComputeManager: typeof import("./getComputeManager").getComputeManager = null as any;
export const getComputeManagerOutput: typeof import("./getComputeManager").getComputeManagerOutput = null as any;
utilities.lazyLoad(exports, ["getComputeManager","getComputeManagerOutput"], () => require("./getComputeManager"));

export { GetComputeManagerRealizationArgs, GetComputeManagerRealizationResult, GetComputeManagerRealizationOutputArgs } from "./getComputeManagerRealization";
export const getComputeManagerRealization: typeof import("./getComputeManagerRealization").getComputeManagerRealization = null as any;
export const getComputeManagerRealizationOutput: typeof import("./getComputeManagerRealization").getComputeManagerRealizationOutput = null as any;
utilities.lazyLoad(exports, ["getComputeManagerRealization","getComputeManagerRealizationOutput"], () => require("./getComputeManagerRealization"));

export { GetDiscoveredNodeArgs, GetDiscoveredNodeResult, GetDiscoveredNodeOutputArgs } from "./getDiscoveredNode";
export const getDiscoveredNode: typeof import("./getDiscoveredNode").getDiscoveredNode = null as any;
export const getDiscoveredNodeOutput: typeof import("./getDiscoveredNode").getDiscoveredNodeOutput = null as any;
utilities.lazyLoad(exports, ["getDiscoveredNode","getDiscoveredNodeOutput"], () => require("./getDiscoveredNode"));

export { GetEdgeClusterArgs, GetEdgeClusterResult, GetEdgeClusterOutputArgs } from "./getEdgeCluster";
export const getEdgeCluster: typeof import("./getEdgeCluster").getEdgeCluster = null as any;
export const getEdgeClusterOutput: typeof import("./getEdgeCluster").getEdgeClusterOutput = null as any;
utilities.lazyLoad(exports, ["getEdgeCluster","getEdgeClusterOutput"], () => require("./getEdgeCluster"));

export { GetEdgeUpgradeGroupArgs, GetEdgeUpgradeGroupResult, GetEdgeUpgradeGroupOutputArgs } from "./getEdgeUpgradeGroup";
export const getEdgeUpgradeGroup: typeof import("./getEdgeUpgradeGroup").getEdgeUpgradeGroup = null as any;
export const getEdgeUpgradeGroupOutput: typeof import("./getEdgeUpgradeGroup").getEdgeUpgradeGroupOutput = null as any;
utilities.lazyLoad(exports, ["getEdgeUpgradeGroup","getEdgeUpgradeGroupOutput"], () => require("./getEdgeUpgradeGroup"));

export { GetFailureDomainArgs, GetFailureDomainResult, GetFailureDomainOutputArgs } from "./getFailureDomain";
export const getFailureDomain: typeof import("./getFailureDomain").getFailureDomain = null as any;
export const getFailureDomainOutput: typeof import("./getFailureDomain").getFailureDomainOutput = null as any;
utilities.lazyLoad(exports, ["getFailureDomain","getFailureDomainOutput"], () => require("./getFailureDomain"));

export { GetFirewallSectionArgs, GetFirewallSectionResult, GetFirewallSectionOutputArgs } from "./getFirewallSection";
export const getFirewallSection: typeof import("./getFirewallSection").getFirewallSection = null as any;
export const getFirewallSectionOutput: typeof import("./getFirewallSection").getFirewallSectionOutput = null as any;
utilities.lazyLoad(exports, ["getFirewallSection","getFirewallSectionOutput"], () => require("./getFirewallSection"));

export { GetHostUpgradeGroupArgs, GetHostUpgradeGroupResult, GetHostUpgradeGroupOutputArgs } from "./getHostUpgradeGroup";
export const getHostUpgradeGroup: typeof import("./getHostUpgradeGroup").getHostUpgradeGroup = null as any;
export const getHostUpgradeGroupOutput: typeof import("./getHostUpgradeGroup").getHostUpgradeGroupOutput = null as any;
utilities.lazyLoad(exports, ["getHostUpgradeGroup","getHostUpgradeGroupOutput"], () => require("./getHostUpgradeGroup"));

export { GetIpPoolArgs, GetIpPoolResult, GetIpPoolOutputArgs } from "./getIpPool";
export const getIpPool: typeof import("./getIpPool").getIpPool = null as any;
export const getIpPoolOutput: typeof import("./getIpPool").getIpPoolOutput = null as any;
utilities.lazyLoad(exports, ["getIpPool","getIpPoolOutput"], () => require("./getIpPool"));

export { GetLogicalTier0RouterArgs, GetLogicalTier0RouterResult, GetLogicalTier0RouterOutputArgs } from "./getLogicalTier0Router";
export const getLogicalTier0Router: typeof import("./getLogicalTier0Router").getLogicalTier0Router = null as any;
export const getLogicalTier0RouterOutput: typeof import("./getLogicalTier0Router").getLogicalTier0RouterOutput = null as any;
utilities.lazyLoad(exports, ["getLogicalTier0Router","getLogicalTier0RouterOutput"], () => require("./getLogicalTier0Router"));

export { GetLogicalTier1RouterArgs, GetLogicalTier1RouterResult, GetLogicalTier1RouterOutputArgs } from "./getLogicalTier1Router";
export const getLogicalTier1Router: typeof import("./getLogicalTier1Router").getLogicalTier1Router = null as any;
export const getLogicalTier1RouterOutput: typeof import("./getLogicalTier1Router").getLogicalTier1RouterOutput = null as any;
utilities.lazyLoad(exports, ["getLogicalTier1Router","getLogicalTier1RouterOutput"], () => require("./getLogicalTier1Router"));

export { GetMacPoolArgs, GetMacPoolResult, GetMacPoolOutputArgs } from "./getMacPool";
export const getMacPool: typeof import("./getMacPool").getMacPool = null as any;
export const getMacPoolOutput: typeof import("./getMacPool").getMacPoolOutput = null as any;
utilities.lazyLoad(exports, ["getMacPool","getMacPoolOutput"], () => require("./getMacPool"));

export { GetManagementClusterResult } from "./getManagementCluster";
export const getManagementCluster: typeof import("./getManagementCluster").getManagementCluster = null as any;
export const getManagementClusterOutput: typeof import("./getManagementCluster").getManagementClusterOutput = null as any;
utilities.lazyLoad(exports, ["getManagementCluster","getManagementClusterOutput"], () => require("./getManagementCluster"));

export { GetManagerClusterNodeArgs, GetManagerClusterNodeResult, GetManagerClusterNodeOutputArgs } from "./getManagerClusterNode";
export const getManagerClusterNode: typeof import("./getManagerClusterNode").getManagerClusterNode = null as any;
export const getManagerClusterNodeOutput: typeof import("./getManagerClusterNode").getManagerClusterNodeOutput = null as any;
utilities.lazyLoad(exports, ["getManagerClusterNode","getManagerClusterNodeOutput"], () => require("./getManagerClusterNode"));

export { GetNsGroupArgs, GetNsGroupResult, GetNsGroupOutputArgs } from "./getNsGroup";
export const getNsGroup: typeof import("./getNsGroup").getNsGroup = null as any;
export const getNsGroupOutput: typeof import("./getNsGroup").getNsGroupOutput = null as any;
utilities.lazyLoad(exports, ["getNsGroup","getNsGroupOutput"], () => require("./getNsGroup"));

export { GetNsGroupsArgs, GetNsGroupsResult, GetNsGroupsOutputArgs } from "./getNsGroups";
export const getNsGroups: typeof import("./getNsGroups").getNsGroups = null as any;
export const getNsGroupsOutput: typeof import("./getNsGroups").getNsGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getNsGroups","getNsGroupsOutput"], () => require("./getNsGroups"));

export { GetNsServiceArgs, GetNsServiceResult, GetNsServiceOutputArgs } from "./getNsService";
export const getNsService: typeof import("./getNsService").getNsService = null as any;
export const getNsServiceOutput: typeof import("./getNsService").getNsServiceOutput = null as any;
utilities.lazyLoad(exports, ["getNsService","getNsServiceOutput"], () => require("./getNsService"));

export { GetNsServicesArgs, GetNsServicesResult, GetNsServicesOutputArgs } from "./getNsServices";
export const getNsServices: typeof import("./getNsServices").getNsServices = null as any;
export const getNsServicesOutput: typeof import("./getNsServices").getNsServicesOutput = null as any;
utilities.lazyLoad(exports, ["getNsServices","getNsServicesOutput"], () => require("./getNsServices"));

export { GetPolicyBfdProfileArgs, GetPolicyBfdProfileResult, GetPolicyBfdProfileOutputArgs } from "./getPolicyBfdProfile";
export const getPolicyBfdProfile: typeof import("./getPolicyBfdProfile").getPolicyBfdProfile = null as any;
export const getPolicyBfdProfileOutput: typeof import("./getPolicyBfdProfile").getPolicyBfdProfileOutput = null as any;
utilities.lazyLoad(exports, ["getPolicyBfdProfile","getPolicyBfdProfileOutput"], () => require("./getPolicyBfdProfile"));

export { GetPolicyBridgeProfileArgs, GetPolicyBridgeProfileResult, GetPolicyBridgeProfileOutputArgs } from "./getPolicyBridgeProfile";
export const getPolicyBridgeProfile: typeof import("./getPolicyBridgeProfile").getPolicyBridgeProfile = null as any;
export const getPolicyBridgeProfileOutput: typeof import("./getPolicyBridgeProfile").getPolicyBridgeProfileOutput = null as any;
utilities.lazyLoad(exports, ["getPolicyBridgeProfile","getPolicyBridgeProfileOutput"], () => require("./getPolicyBridgeProfile"));

export { GetPolicyCertificateArgs, GetPolicyCertificateResult, GetPolicyCertificateOutputArgs } from "./getPolicyCertificate";
export const getPolicyCertificate: typeof import("./getPolicyCertificate").getPolicyCertificate = null as any;
export const getPolicyCertificateOutput: typeof import("./getPolicyCertificate").getPolicyCertificateOutput = null as any;
utilities.lazyLoad(exports, ["getPolicyCertificate","getPolicyCertificateOutput"], () => require("./getPolicyCertificate"));

export { GetPolicyContextProfileArgs, GetPolicyContextProfileResult, GetPolicyContextProfileOutputArgs } from "./getPolicyContextProfile";
export const getPolicyContextProfile: typeof import("./getPolicyContextProfile").getPolicyContextProfile = null as any;
export const getPolicyContextProfileOutput: typeof import("./getPolicyContextProfile").getPolicyContextProfileOutput = null as any;
utilities.lazyLoad(exports, ["getPolicyContextProfile","getPolicyContextProfileOutput"], () => require("./getPolicyContextProfile"));

export { GetPolicyDhcpServerArgs, GetPolicyDhcpServerResult, GetPolicyDhcpServerOutputArgs } from "./getPolicyDhcpServer";
export const getPolicyDhcpServer: typeof import("./getPolicyDhcpServer").getPolicyDhcpServer = null as any;
export const getPolicyDhcpServerOutput: typeof import("./getPolicyDhcpServer").getPolicyDhcpServerOutput = null as any;
utilities.lazyLoad(exports, ["getPolicyDhcpServer","getPolicyDhcpServerOutput"], () => require("./getPolicyDhcpServer"));

export { GetPolicyDistributedFloodProtectionProfileArgs, GetPolicyDistributedFloodProtectionProfileResult, GetPolicyDistributedFloodProtectionProfileOutputArgs } from "./getPolicyDistributedFloodProtectionProfile";
export const getPolicyDistributedFloodProtectionProfile: typeof import("./getPolicyDistributedFloodProtectionProfile").getPolicyDistributedFloodProtectionProfile = null as any;
export const getPolicyDistributedFloodProtectionProfileOutput: typeof import("./getPolicyDistributedFloodProtectionProfile").getPolicyDistributedFloodProtectionProfileOutput = null as any;
utilities.lazyLoad(exports, ["getPolicyDistributedFloodProtectionProfile","getPolicyDistributedFloodProtectionProfileOutput"], () => require("./getPolicyDistributedFloodProtectionProfile"));

export { GetPolicyEdgeClusterArgs, GetPolicyEdgeClusterResult, GetPolicyEdgeClusterOutputArgs } from "./getPolicyEdgeCluster";
export const getPolicyEdgeCluster: typeof import("./getPolicyEdgeCluster").getPolicyEdgeCluster = null as any;
export const getPolicyEdgeClusterOutput: typeof import("./getPolicyEdgeCluster").getPolicyEdgeClusterOutput = null as any;
utilities.lazyLoad(exports, ["getPolicyEdgeCluster","getPolicyEdgeClusterOutput"], () => require("./getPolicyEdgeCluster"));

export { GetPolicyEdgeNodeArgs, GetPolicyEdgeNodeResult, GetPolicyEdgeNodeOutputArgs } from "./getPolicyEdgeNode";
export const getPolicyEdgeNode: typeof import("./getPolicyEdgeNode").getPolicyEdgeNode = null as any;
export const getPolicyEdgeNodeOutput: typeof import("./getPolicyEdgeNode").getPolicyEdgeNodeOutput = null as any;
utilities.lazyLoad(exports, ["getPolicyEdgeNode","getPolicyEdgeNodeOutput"], () => require("./getPolicyEdgeNode"));

export { GetPolicyGatewayDnsForwarderArgs, GetPolicyGatewayDnsForwarderResult, GetPolicyGatewayDnsForwarderOutputArgs } from "./getPolicyGatewayDnsForwarder";
export const getPolicyGatewayDnsForwarder: typeof import("./getPolicyGatewayDnsForwarder").getPolicyGatewayDnsForwarder = null as any;
export const getPolicyGatewayDnsForwarderOutput: typeof import("./getPolicyGatewayDnsForwarder").getPolicyGatewayDnsForwarderOutput = null as any;
utilities.lazyLoad(exports, ["getPolicyGatewayDnsForwarder","getPolicyGatewayDnsForwarderOutput"], () => require("./getPolicyGatewayDnsForwarder"));

export { GetPolicyGatewayFloodProtectionProfileArgs, GetPolicyGatewayFloodProtectionProfileResult, GetPolicyGatewayFloodProtectionProfileOutputArgs } from "./getPolicyGatewayFloodProtectionProfile";
export const getPolicyGatewayFloodProtectionProfile: typeof import("./getPolicyGatewayFloodProtectionProfile").getPolicyGatewayFloodProtectionProfile = null as any;
export const getPolicyGatewayFloodProtectionProfileOutput: typeof import("./getPolicyGatewayFloodProtectionProfile").getPolicyGatewayFloodProtectionProfileOutput = null as any;
utilities.lazyLoad(exports, ["getPolicyGatewayFloodProtectionProfile","getPolicyGatewayFloodProtectionProfileOutput"], () => require("./getPolicyGatewayFloodProtectionProfile"));

export { GetPolicyGatewayInterfaceRealizationArgs, GetPolicyGatewayInterfaceRealizationResult, GetPolicyGatewayInterfaceRealizationOutputArgs } from "./getPolicyGatewayInterfaceRealization";
export const getPolicyGatewayInterfaceRealization: typeof import("./getPolicyGatewayInterfaceRealization").getPolicyGatewayInterfaceRealization = null as any;
export const getPolicyGatewayInterfaceRealizationOutput: typeof import("./getPolicyGatewayInterfaceRealization").getPolicyGatewayInterfaceRealizationOutput = null as any;
utilities.lazyLoad(exports, ["getPolicyGatewayInterfaceRealization","getPolicyGatewayInterfaceRealizationOutput"], () => require("./getPolicyGatewayInterfaceRealization"));

export { GetPolicyGatewayLocaleServiceArgs, GetPolicyGatewayLocaleServiceResult, GetPolicyGatewayLocaleServiceOutputArgs } from "./getPolicyGatewayLocaleService";
export const getPolicyGatewayLocaleService: typeof import("./getPolicyGatewayLocaleService").getPolicyGatewayLocaleService = null as any;
export const getPolicyGatewayLocaleServiceOutput: typeof import("./getPolicyGatewayLocaleService").getPolicyGatewayLocaleServiceOutput = null as any;
utilities.lazyLoad(exports, ["getPolicyGatewayLocaleService","getPolicyGatewayLocaleServiceOutput"], () => require("./getPolicyGatewayLocaleService"));

export { GetPolicyGatewayPolicyArgs, GetPolicyGatewayPolicyResult, GetPolicyGatewayPolicyOutputArgs } from "./getPolicyGatewayPolicy";
export const getPolicyGatewayPolicy: typeof import("./getPolicyGatewayPolicy").getPolicyGatewayPolicy = null as any;
export const getPolicyGatewayPolicyOutput: typeof import("./getPolicyGatewayPolicy").getPolicyGatewayPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getPolicyGatewayPolicy","getPolicyGatewayPolicyOutput"], () => require("./getPolicyGatewayPolicy"));

export { GetPolicyGatewayPrefixListArgs, GetPolicyGatewayPrefixListResult, GetPolicyGatewayPrefixListOutputArgs } from "./getPolicyGatewayPrefixList";
export const getPolicyGatewayPrefixList: typeof import("./getPolicyGatewayPrefixList").getPolicyGatewayPrefixList = null as any;
export const getPolicyGatewayPrefixListOutput: typeof import("./getPolicyGatewayPrefixList").getPolicyGatewayPrefixListOutput = null as any;
utilities.lazyLoad(exports, ["getPolicyGatewayPrefixList","getPolicyGatewayPrefixListOutput"], () => require("./getPolicyGatewayPrefixList"));

export { GetPolicyGatewayQosProfileArgs, GetPolicyGatewayQosProfileResult, GetPolicyGatewayQosProfileOutputArgs } from "./getPolicyGatewayQosProfile";
export const getPolicyGatewayQosProfile: typeof import("./getPolicyGatewayQosProfile").getPolicyGatewayQosProfile = null as any;
export const getPolicyGatewayQosProfileOutput: typeof import("./getPolicyGatewayQosProfile").getPolicyGatewayQosProfileOutput = null as any;
utilities.lazyLoad(exports, ["getPolicyGatewayQosProfile","getPolicyGatewayQosProfileOutput"], () => require("./getPolicyGatewayQosProfile"));

export { GetPolicyGatewayRouteMapArgs, GetPolicyGatewayRouteMapResult, GetPolicyGatewayRouteMapOutputArgs } from "./getPolicyGatewayRouteMap";
export const getPolicyGatewayRouteMap: typeof import("./getPolicyGatewayRouteMap").getPolicyGatewayRouteMap = null as any;
export const getPolicyGatewayRouteMapOutput: typeof import("./getPolicyGatewayRouteMap").getPolicyGatewayRouteMapOutput = null as any;
utilities.lazyLoad(exports, ["getPolicyGatewayRouteMap","getPolicyGatewayRouteMapOutput"], () => require("./getPolicyGatewayRouteMap"));

export { GetPolicyGroupArgs, GetPolicyGroupResult, GetPolicyGroupOutputArgs } from "./getPolicyGroup";
export const getPolicyGroup: typeof import("./getPolicyGroup").getPolicyGroup = null as any;
export const getPolicyGroupOutput: typeof import("./getPolicyGroup").getPolicyGroupOutput = null as any;
utilities.lazyLoad(exports, ["getPolicyGroup","getPolicyGroupOutput"], () => require("./getPolicyGroup"));

export { GetPolicyHostTransportNodeArgs, GetPolicyHostTransportNodeResult, GetPolicyHostTransportNodeOutputArgs } from "./getPolicyHostTransportNode";
export const getPolicyHostTransportNode: typeof import("./getPolicyHostTransportNode").getPolicyHostTransportNode = null as any;
export const getPolicyHostTransportNodeOutput: typeof import("./getPolicyHostTransportNode").getPolicyHostTransportNodeOutput = null as any;
utilities.lazyLoad(exports, ["getPolicyHostTransportNode","getPolicyHostTransportNodeOutput"], () => require("./getPolicyHostTransportNode"));

export { GetPolicyHostTransportNodeCollectionArgs, GetPolicyHostTransportNodeCollectionResult, GetPolicyHostTransportNodeCollectionOutputArgs } from "./getPolicyHostTransportNodeCollection";
export const getPolicyHostTransportNodeCollection: typeof import("./getPolicyHostTransportNodeCollection").getPolicyHostTransportNodeCollection = null as any;
export const getPolicyHostTransportNodeCollectionOutput: typeof import("./getPolicyHostTransportNodeCollection").getPolicyHostTransportNodeCollectionOutput = null as any;
utilities.lazyLoad(exports, ["getPolicyHostTransportNodeCollection","getPolicyHostTransportNodeCollectionOutput"], () => require("./getPolicyHostTransportNodeCollection"));

export { GetPolicyHostTransportNodeCollectionRealizationArgs, GetPolicyHostTransportNodeCollectionRealizationResult, GetPolicyHostTransportNodeCollectionRealizationOutputArgs } from "./getPolicyHostTransportNodeCollectionRealization";
export const getPolicyHostTransportNodeCollectionRealization: typeof import("./getPolicyHostTransportNodeCollectionRealization").getPolicyHostTransportNodeCollectionRealization = null as any;
export const getPolicyHostTransportNodeCollectionRealizationOutput: typeof import("./getPolicyHostTransportNodeCollectionRealization").getPolicyHostTransportNodeCollectionRealizationOutput = null as any;
utilities.lazyLoad(exports, ["getPolicyHostTransportNodeCollectionRealization","getPolicyHostTransportNodeCollectionRealizationOutput"], () => require("./getPolicyHostTransportNodeCollectionRealization"));

export { GetPolicyHostTransportNodeProfileArgs, GetPolicyHostTransportNodeProfileResult, GetPolicyHostTransportNodeProfileOutputArgs } from "./getPolicyHostTransportNodeProfile";
export const getPolicyHostTransportNodeProfile: typeof import("./getPolicyHostTransportNodeProfile").getPolicyHostTransportNodeProfile = null as any;
export const getPolicyHostTransportNodeProfileOutput: typeof import("./getPolicyHostTransportNodeProfile").getPolicyHostTransportNodeProfileOutput = null as any;
utilities.lazyLoad(exports, ["getPolicyHostTransportNodeProfile","getPolicyHostTransportNodeProfileOutput"], () => require("./getPolicyHostTransportNodeProfile"));

export { GetPolicyIntrusionServiceProfileArgs, GetPolicyIntrusionServiceProfileResult, GetPolicyIntrusionServiceProfileOutputArgs } from "./getPolicyIntrusionServiceProfile";
export const getPolicyIntrusionServiceProfile: typeof import("./getPolicyIntrusionServiceProfile").getPolicyIntrusionServiceProfile = null as any;
export const getPolicyIntrusionServiceProfileOutput: typeof import("./getPolicyIntrusionServiceProfile").getPolicyIntrusionServiceProfileOutput = null as any;
utilities.lazyLoad(exports, ["getPolicyIntrusionServiceProfile","getPolicyIntrusionServiceProfileOutput"], () => require("./getPolicyIntrusionServiceProfile"));

export { GetPolicyIpBlockArgs, GetPolicyIpBlockResult, GetPolicyIpBlockOutputArgs } from "./getPolicyIpBlock";
export const getPolicyIpBlock: typeof import("./getPolicyIpBlock").getPolicyIpBlock = null as any;
export const getPolicyIpBlockOutput: typeof import("./getPolicyIpBlock").getPolicyIpBlockOutput = null as any;
utilities.lazyLoad(exports, ["getPolicyIpBlock","getPolicyIpBlockOutput"], () => require("./getPolicyIpBlock"));

export { GetPolicyIpDiscoveryProfileArgs, GetPolicyIpDiscoveryProfileResult, GetPolicyIpDiscoveryProfileOutputArgs } from "./getPolicyIpDiscoveryProfile";
export const getPolicyIpDiscoveryProfile: typeof import("./getPolicyIpDiscoveryProfile").getPolicyIpDiscoveryProfile = null as any;
export const getPolicyIpDiscoveryProfileOutput: typeof import("./getPolicyIpDiscoveryProfile").getPolicyIpDiscoveryProfileOutput = null as any;
utilities.lazyLoad(exports, ["getPolicyIpDiscoveryProfile","getPolicyIpDiscoveryProfileOutput"], () => require("./getPolicyIpDiscoveryProfile"));

export { GetPolicyIpPoolArgs, GetPolicyIpPoolResult, GetPolicyIpPoolOutputArgs } from "./getPolicyIpPool";
export const getPolicyIpPool: typeof import("./getPolicyIpPool").getPolicyIpPool = null as any;
export const getPolicyIpPoolOutput: typeof import("./getPolicyIpPool").getPolicyIpPoolOutput = null as any;
utilities.lazyLoad(exports, ["getPolicyIpPool","getPolicyIpPoolOutput"], () => require("./getPolicyIpPool"));

export { GetPolicyIpsecVpnLocalEndpointArgs, GetPolicyIpsecVpnLocalEndpointResult, GetPolicyIpsecVpnLocalEndpointOutputArgs } from "./getPolicyIpsecVpnLocalEndpoint";
export const getPolicyIpsecVpnLocalEndpoint: typeof import("./getPolicyIpsecVpnLocalEndpoint").getPolicyIpsecVpnLocalEndpoint = null as any;
export const getPolicyIpsecVpnLocalEndpointOutput: typeof import("./getPolicyIpsecVpnLocalEndpoint").getPolicyIpsecVpnLocalEndpointOutput = null as any;
utilities.lazyLoad(exports, ["getPolicyIpsecVpnLocalEndpoint","getPolicyIpsecVpnLocalEndpointOutput"], () => require("./getPolicyIpsecVpnLocalEndpoint"));

export { GetPolicyIpsecVpnServiceArgs, GetPolicyIpsecVpnServiceResult, GetPolicyIpsecVpnServiceOutputArgs } from "./getPolicyIpsecVpnService";
export const getPolicyIpsecVpnService: typeof import("./getPolicyIpsecVpnService").getPolicyIpsecVpnService = null as any;
export const getPolicyIpsecVpnServiceOutput: typeof import("./getPolicyIpsecVpnService").getPolicyIpsecVpnServiceOutput = null as any;
utilities.lazyLoad(exports, ["getPolicyIpsecVpnService","getPolicyIpsecVpnServiceOutput"], () => require("./getPolicyIpsecVpnService"));

export { GetPolicyIpv6DadProfileArgs, GetPolicyIpv6DadProfileResult, GetPolicyIpv6DadProfileOutputArgs } from "./getPolicyIpv6DadProfile";
export const getPolicyIpv6DadProfile: typeof import("./getPolicyIpv6DadProfile").getPolicyIpv6DadProfile = null as any;
export const getPolicyIpv6DadProfileOutput: typeof import("./getPolicyIpv6DadProfile").getPolicyIpv6DadProfileOutput = null as any;
utilities.lazyLoad(exports, ["getPolicyIpv6DadProfile","getPolicyIpv6DadProfileOutput"], () => require("./getPolicyIpv6DadProfile"));

export { GetPolicyIpv6NdraProfileArgs, GetPolicyIpv6NdraProfileResult, GetPolicyIpv6NdraProfileOutputArgs } from "./getPolicyIpv6NdraProfile";
export const getPolicyIpv6NdraProfile: typeof import("./getPolicyIpv6NdraProfile").getPolicyIpv6NdraProfile = null as any;
export const getPolicyIpv6NdraProfileOutput: typeof import("./getPolicyIpv6NdraProfile").getPolicyIpv6NdraProfileOutput = null as any;
utilities.lazyLoad(exports, ["getPolicyIpv6NdraProfile","getPolicyIpv6NdraProfileOutput"], () => require("./getPolicyIpv6NdraProfile"));

export { GetPolicyL2VpnServiceArgs, GetPolicyL2VpnServiceResult, GetPolicyL2VpnServiceOutputArgs } from "./getPolicyL2VpnService";
export const getPolicyL2VpnService: typeof import("./getPolicyL2VpnService").getPolicyL2VpnService = null as any;
export const getPolicyL2VpnServiceOutput: typeof import("./getPolicyL2VpnService").getPolicyL2VpnServiceOutput = null as any;
utilities.lazyLoad(exports, ["getPolicyL2VpnService","getPolicyL2VpnServiceOutput"], () => require("./getPolicyL2VpnService"));

export { GetPolicyLbAppProfileArgs, GetPolicyLbAppProfileResult, GetPolicyLbAppProfileOutputArgs } from "./getPolicyLbAppProfile";
export const getPolicyLbAppProfile: typeof import("./getPolicyLbAppProfile").getPolicyLbAppProfile = null as any;
export const getPolicyLbAppProfileOutput: typeof import("./getPolicyLbAppProfile").getPolicyLbAppProfileOutput = null as any;
utilities.lazyLoad(exports, ["getPolicyLbAppProfile","getPolicyLbAppProfileOutput"], () => require("./getPolicyLbAppProfile"));

export { GetPolicyLbClientSslProfileArgs, GetPolicyLbClientSslProfileResult, GetPolicyLbClientSslProfileOutputArgs } from "./getPolicyLbClientSslProfile";
export const getPolicyLbClientSslProfile: typeof import("./getPolicyLbClientSslProfile").getPolicyLbClientSslProfile = null as any;
export const getPolicyLbClientSslProfileOutput: typeof import("./getPolicyLbClientSslProfile").getPolicyLbClientSslProfileOutput = null as any;
utilities.lazyLoad(exports, ["getPolicyLbClientSslProfile","getPolicyLbClientSslProfileOutput"], () => require("./getPolicyLbClientSslProfile"));

export { GetPolicyLbMonitorArgs, GetPolicyLbMonitorResult, GetPolicyLbMonitorOutputArgs } from "./getPolicyLbMonitor";
export const getPolicyLbMonitor: typeof import("./getPolicyLbMonitor").getPolicyLbMonitor = null as any;
export const getPolicyLbMonitorOutput: typeof import("./getPolicyLbMonitor").getPolicyLbMonitorOutput = null as any;
utilities.lazyLoad(exports, ["getPolicyLbMonitor","getPolicyLbMonitorOutput"], () => require("./getPolicyLbMonitor"));

export { GetPolicyLbPersistenceProfileArgs, GetPolicyLbPersistenceProfileResult, GetPolicyLbPersistenceProfileOutputArgs } from "./getPolicyLbPersistenceProfile";
export const getPolicyLbPersistenceProfile: typeof import("./getPolicyLbPersistenceProfile").getPolicyLbPersistenceProfile = null as any;
export const getPolicyLbPersistenceProfileOutput: typeof import("./getPolicyLbPersistenceProfile").getPolicyLbPersistenceProfileOutput = null as any;
utilities.lazyLoad(exports, ["getPolicyLbPersistenceProfile","getPolicyLbPersistenceProfileOutput"], () => require("./getPolicyLbPersistenceProfile"));

export { GetPolicyLbServerSslProfileArgs, GetPolicyLbServerSslProfileResult, GetPolicyLbServerSslProfileOutputArgs } from "./getPolicyLbServerSslProfile";
export const getPolicyLbServerSslProfile: typeof import("./getPolicyLbServerSslProfile").getPolicyLbServerSslProfile = null as any;
export const getPolicyLbServerSslProfileOutput: typeof import("./getPolicyLbServerSslProfile").getPolicyLbServerSslProfileOutput = null as any;
utilities.lazyLoad(exports, ["getPolicyLbServerSslProfile","getPolicyLbServerSslProfileOutput"], () => require("./getPolicyLbServerSslProfile"));

export { GetPolicyLbServiceArgs, GetPolicyLbServiceResult, GetPolicyLbServiceOutputArgs } from "./getPolicyLbService";
export const getPolicyLbService: typeof import("./getPolicyLbService").getPolicyLbService = null as any;
export const getPolicyLbServiceOutput: typeof import("./getPolicyLbService").getPolicyLbServiceOutput = null as any;
utilities.lazyLoad(exports, ["getPolicyLbService","getPolicyLbServiceOutput"], () => require("./getPolicyLbService"));

export { GetPolicyMacDiscoveryProfileArgs, GetPolicyMacDiscoveryProfileResult, GetPolicyMacDiscoveryProfileOutputArgs } from "./getPolicyMacDiscoveryProfile";
export const getPolicyMacDiscoveryProfile: typeof import("./getPolicyMacDiscoveryProfile").getPolicyMacDiscoveryProfile = null as any;
export const getPolicyMacDiscoveryProfileOutput: typeof import("./getPolicyMacDiscoveryProfile").getPolicyMacDiscoveryProfileOutput = null as any;
utilities.lazyLoad(exports, ["getPolicyMacDiscoveryProfile","getPolicyMacDiscoveryProfileOutput"], () => require("./getPolicyMacDiscoveryProfile"));

export { GetPolicyProjectArgs, GetPolicyProjectResult, GetPolicyProjectOutputArgs } from "./getPolicyProject";
export const getPolicyProject: typeof import("./getPolicyProject").getPolicyProject = null as any;
export const getPolicyProjectOutput: typeof import("./getPolicyProject").getPolicyProjectOutput = null as any;
utilities.lazyLoad(exports, ["getPolicyProject","getPolicyProjectOutput"], () => require("./getPolicyProject"));

export { GetPolicyQosProfileArgs, GetPolicyQosProfileResult, GetPolicyQosProfileOutputArgs } from "./getPolicyQosProfile";
export const getPolicyQosProfile: typeof import("./getPolicyQosProfile").getPolicyQosProfile = null as any;
export const getPolicyQosProfileOutput: typeof import("./getPolicyQosProfile").getPolicyQosProfileOutput = null as any;
utilities.lazyLoad(exports, ["getPolicyQosProfile","getPolicyQosProfileOutput"], () => require("./getPolicyQosProfile"));

export { GetPolicyRealizationInfoArgs, GetPolicyRealizationInfoResult, GetPolicyRealizationInfoOutputArgs } from "./getPolicyRealizationInfo";
export const getPolicyRealizationInfo: typeof import("./getPolicyRealizationInfo").getPolicyRealizationInfo = null as any;
export const getPolicyRealizationInfoOutput: typeof import("./getPolicyRealizationInfo").getPolicyRealizationInfoOutput = null as any;
utilities.lazyLoad(exports, ["getPolicyRealizationInfo","getPolicyRealizationInfoOutput"], () => require("./getPolicyRealizationInfo"));

export { GetPolicySecurityPolicyArgs, GetPolicySecurityPolicyResult, GetPolicySecurityPolicyOutputArgs } from "./getPolicySecurityPolicy";
export const getPolicySecurityPolicy: typeof import("./getPolicySecurityPolicy").getPolicySecurityPolicy = null as any;
export const getPolicySecurityPolicyOutput: typeof import("./getPolicySecurityPolicy").getPolicySecurityPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getPolicySecurityPolicy","getPolicySecurityPolicyOutput"], () => require("./getPolicySecurityPolicy"));

export { GetPolicySegmentArgs, GetPolicySegmentResult, GetPolicySegmentOutputArgs } from "./getPolicySegment";
export const getPolicySegment: typeof import("./getPolicySegment").getPolicySegment = null as any;
export const getPolicySegmentOutput: typeof import("./getPolicySegment").getPolicySegmentOutput = null as any;
utilities.lazyLoad(exports, ["getPolicySegment","getPolicySegmentOutput"], () => require("./getPolicySegment"));

export { GetPolicySegmentRealizationArgs, GetPolicySegmentRealizationResult, GetPolicySegmentRealizationOutputArgs } from "./getPolicySegmentRealization";
export const getPolicySegmentRealization: typeof import("./getPolicySegmentRealization").getPolicySegmentRealization = null as any;
export const getPolicySegmentRealizationOutput: typeof import("./getPolicySegmentRealization").getPolicySegmentRealizationOutput = null as any;
utilities.lazyLoad(exports, ["getPolicySegmentRealization","getPolicySegmentRealizationOutput"], () => require("./getPolicySegmentRealization"));

export { GetPolicySegmentSecurityProfileArgs, GetPolicySegmentSecurityProfileResult, GetPolicySegmentSecurityProfileOutputArgs } from "./getPolicySegmentSecurityProfile";
export const getPolicySegmentSecurityProfile: typeof import("./getPolicySegmentSecurityProfile").getPolicySegmentSecurityProfile = null as any;
export const getPolicySegmentSecurityProfileOutput: typeof import("./getPolicySegmentSecurityProfile").getPolicySegmentSecurityProfileOutput = null as any;
utilities.lazyLoad(exports, ["getPolicySegmentSecurityProfile","getPolicySegmentSecurityProfileOutput"], () => require("./getPolicySegmentSecurityProfile"));

export { GetPolicyServiceArgs, GetPolicyServiceResult, GetPolicyServiceOutputArgs } from "./getPolicyService";
export const getPolicyService: typeof import("./getPolicyService").getPolicyService = null as any;
export const getPolicyServiceOutput: typeof import("./getPolicyService").getPolicyServiceOutput = null as any;
utilities.lazyLoad(exports, ["getPolicyService","getPolicyServiceOutput"], () => require("./getPolicyService"));

export { GetPolicySiteArgs, GetPolicySiteResult, GetPolicySiteOutputArgs } from "./getPolicySite";
export const getPolicySite: typeof import("./getPolicySite").getPolicySite = null as any;
export const getPolicySiteOutput: typeof import("./getPolicySite").getPolicySiteOutput = null as any;
utilities.lazyLoad(exports, ["getPolicySite","getPolicySiteOutput"], () => require("./getPolicySite"));

export { GetPolicySpoofguardProfileArgs, GetPolicySpoofguardProfileResult, GetPolicySpoofguardProfileOutputArgs } from "./getPolicySpoofguardProfile";
export const getPolicySpoofguardProfile: typeof import("./getPolicySpoofguardProfile").getPolicySpoofguardProfile = null as any;
export const getPolicySpoofguardProfileOutput: typeof import("./getPolicySpoofguardProfile").getPolicySpoofguardProfileOutput = null as any;
utilities.lazyLoad(exports, ["getPolicySpoofguardProfile","getPolicySpoofguardProfileOutput"], () => require("./getPolicySpoofguardProfile"));

export { GetPolicyTier0GatewayArgs, GetPolicyTier0GatewayResult, GetPolicyTier0GatewayOutputArgs } from "./getPolicyTier0Gateway";
export const getPolicyTier0Gateway: typeof import("./getPolicyTier0Gateway").getPolicyTier0Gateway = null as any;
export const getPolicyTier0GatewayOutput: typeof import("./getPolicyTier0Gateway").getPolicyTier0GatewayOutput = null as any;
utilities.lazyLoad(exports, ["getPolicyTier0Gateway","getPolicyTier0GatewayOutput"], () => require("./getPolicyTier0Gateway"));

export { GetPolicyTier1GatewayArgs, GetPolicyTier1GatewayResult, GetPolicyTier1GatewayOutputArgs } from "./getPolicyTier1Gateway";
export const getPolicyTier1Gateway: typeof import("./getPolicyTier1Gateway").getPolicyTier1Gateway = null as any;
export const getPolicyTier1GatewayOutput: typeof import("./getPolicyTier1Gateway").getPolicyTier1GatewayOutput = null as any;
utilities.lazyLoad(exports, ["getPolicyTier1Gateway","getPolicyTier1GatewayOutput"], () => require("./getPolicyTier1Gateway"));

export { GetPolicyTransportZoneArgs, GetPolicyTransportZoneResult, GetPolicyTransportZoneOutputArgs } from "./getPolicyTransportZone";
export const getPolicyTransportZone: typeof import("./getPolicyTransportZone").getPolicyTransportZone = null as any;
export const getPolicyTransportZoneOutput: typeof import("./getPolicyTransportZone").getPolicyTransportZoneOutput = null as any;
utilities.lazyLoad(exports, ["getPolicyTransportZone","getPolicyTransportZoneOutput"], () => require("./getPolicyTransportZone"));

export { GetPolicyUplinkHostSwitchProfileArgs, GetPolicyUplinkHostSwitchProfileResult, GetPolicyUplinkHostSwitchProfileOutputArgs } from "./getPolicyUplinkHostSwitchProfile";
export const getPolicyUplinkHostSwitchProfile: typeof import("./getPolicyUplinkHostSwitchProfile").getPolicyUplinkHostSwitchProfile = null as any;
export const getPolicyUplinkHostSwitchProfileOutput: typeof import("./getPolicyUplinkHostSwitchProfile").getPolicyUplinkHostSwitchProfileOutput = null as any;
utilities.lazyLoad(exports, ["getPolicyUplinkHostSwitchProfile","getPolicyUplinkHostSwitchProfileOutput"], () => require("./getPolicyUplinkHostSwitchProfile"));

export { GetPolicyVmArgs, GetPolicyVmResult, GetPolicyVmOutputArgs } from "./getPolicyVm";
export const getPolicyVm: typeof import("./getPolicyVm").getPolicyVm = null as any;
export const getPolicyVmOutput: typeof import("./getPolicyVm").getPolicyVmOutput = null as any;
utilities.lazyLoad(exports, ["getPolicyVm","getPolicyVmOutput"], () => require("./getPolicyVm"));

export { GetPolicyVmsArgs, GetPolicyVmsResult, GetPolicyVmsOutputArgs } from "./getPolicyVms";
export const getPolicyVms: typeof import("./getPolicyVms").getPolicyVms = null as any;
export const getPolicyVmsOutput: typeof import("./getPolicyVms").getPolicyVmsOutput = null as any;
utilities.lazyLoad(exports, ["getPolicyVms","getPolicyVmsOutput"], () => require("./getPolicyVms"));

export { GetPolicyVniPoolArgs, GetPolicyVniPoolResult, GetPolicyVniPoolOutputArgs } from "./getPolicyVniPool";
export const getPolicyVniPool: typeof import("./getPolicyVniPool").getPolicyVniPool = null as any;
export const getPolicyVniPoolOutput: typeof import("./getPolicyVniPool").getPolicyVniPoolOutput = null as any;
utilities.lazyLoad(exports, ["getPolicyVniPool","getPolicyVniPoolOutput"], () => require("./getPolicyVniPool"));

export { GetPolicyVtepHaHostSwitchProfileArgs, GetPolicyVtepHaHostSwitchProfileResult, GetPolicyVtepHaHostSwitchProfileOutputArgs } from "./getPolicyVtepHaHostSwitchProfile";
export const getPolicyVtepHaHostSwitchProfile: typeof import("./getPolicyVtepHaHostSwitchProfile").getPolicyVtepHaHostSwitchProfile = null as any;
export const getPolicyVtepHaHostSwitchProfileOutput: typeof import("./getPolicyVtepHaHostSwitchProfile").getPolicyVtepHaHostSwitchProfileOutput = null as any;
utilities.lazyLoad(exports, ["getPolicyVtepHaHostSwitchProfile","getPolicyVtepHaHostSwitchProfileOutput"], () => require("./getPolicyVtepHaHostSwitchProfile"));

export { GetProviderInfoArgs, GetProviderInfoResult, GetProviderInfoOutputArgs } from "./getProviderInfo";
export const getProviderInfo: typeof import("./getProviderInfo").getProviderInfo = null as any;
export const getProviderInfoOutput: typeof import("./getProviderInfo").getProviderInfoOutput = null as any;
utilities.lazyLoad(exports, ["getProviderInfo","getProviderInfoOutput"], () => require("./getProviderInfo"));

export { GetSwitchingProfileArgs, GetSwitchingProfileResult, GetSwitchingProfileOutputArgs } from "./getSwitchingProfile";
export const getSwitchingProfile: typeof import("./getSwitchingProfile").getSwitchingProfile = null as any;
export const getSwitchingProfileOutput: typeof import("./getSwitchingProfile").getSwitchingProfileOutput = null as any;
utilities.lazyLoad(exports, ["getSwitchingProfile","getSwitchingProfileOutput"], () => require("./getSwitchingProfile"));

export { GetTransportNodeArgs, GetTransportNodeResult, GetTransportNodeOutputArgs } from "./getTransportNode";
export const getTransportNode: typeof import("./getTransportNode").getTransportNode = null as any;
export const getTransportNodeOutput: typeof import("./getTransportNode").getTransportNodeOutput = null as any;
utilities.lazyLoad(exports, ["getTransportNode","getTransportNodeOutput"], () => require("./getTransportNode"));

export { GetTransportNodeRealizationArgs, GetTransportNodeRealizationResult, GetTransportNodeRealizationOutputArgs } from "./getTransportNodeRealization";
export const getTransportNodeRealization: typeof import("./getTransportNodeRealization").getTransportNodeRealization = null as any;
export const getTransportNodeRealizationOutput: typeof import("./getTransportNodeRealization").getTransportNodeRealizationOutput = null as any;
utilities.lazyLoad(exports, ["getTransportNodeRealization","getTransportNodeRealizationOutput"], () => require("./getTransportNodeRealization"));

export { GetTransportZoneArgs, GetTransportZoneResult, GetTransportZoneOutputArgs } from "./getTransportZone";
export const getTransportZone: typeof import("./getTransportZone").getTransportZone = null as any;
export const getTransportZoneOutput: typeof import("./getTransportZone").getTransportZoneOutput = null as any;
utilities.lazyLoad(exports, ["getTransportZone","getTransportZoneOutput"], () => require("./getTransportZone"));

export { GetUpgradePostcheckArgs, GetUpgradePostcheckResult, GetUpgradePostcheckOutputArgs } from "./getUpgradePostcheck";
export const getUpgradePostcheck: typeof import("./getUpgradePostcheck").getUpgradePostcheck = null as any;
export const getUpgradePostcheckOutput: typeof import("./getUpgradePostcheck").getUpgradePostcheckOutput = null as any;
utilities.lazyLoad(exports, ["getUpgradePostcheck","getUpgradePostcheckOutput"], () => require("./getUpgradePostcheck"));

export { GetUpgradePrepareReadyArgs, GetUpgradePrepareReadyResult, GetUpgradePrepareReadyOutputArgs } from "./getUpgradePrepareReady";
export const getUpgradePrepareReady: typeof import("./getUpgradePrepareReady").getUpgradePrepareReady = null as any;
export const getUpgradePrepareReadyOutput: typeof import("./getUpgradePrepareReady").getUpgradePrepareReadyOutput = null as any;
utilities.lazyLoad(exports, ["getUpgradePrepareReady","getUpgradePrepareReadyOutput"], () => require("./getUpgradePrepareReady"));

export { IcmpTypeNsServiceArgs, IcmpTypeNsServiceState } from "./icmpTypeNsService";
export type IcmpTypeNsService = import("./icmpTypeNsService").IcmpTypeNsService;
export const IcmpTypeNsService: typeof import("./icmpTypeNsService").IcmpTypeNsService = null as any;
utilities.lazyLoad(exports, ["IcmpTypeNsService"], () => require("./icmpTypeNsService"));

export { IgmpTypeNsServiceArgs, IgmpTypeNsServiceState } from "./igmpTypeNsService";
export type IgmpTypeNsService = import("./igmpTypeNsService").IgmpTypeNsService;
export const IgmpTypeNsService: typeof import("./igmpTypeNsService").IgmpTypeNsService = null as any;
utilities.lazyLoad(exports, ["IgmpTypeNsService"], () => require("./igmpTypeNsService"));

export { IpBlockArgs, IpBlockState } from "./ipBlock";
export type IpBlock = import("./ipBlock").IpBlock;
export const IpBlock: typeof import("./ipBlock").IpBlock = null as any;
utilities.lazyLoad(exports, ["IpBlock"], () => require("./ipBlock"));

export { IpBlockSubnetArgs, IpBlockSubnetState } from "./ipBlockSubnet";
export type IpBlockSubnet = import("./ipBlockSubnet").IpBlockSubnet;
export const IpBlockSubnet: typeof import("./ipBlockSubnet").IpBlockSubnet = null as any;
utilities.lazyLoad(exports, ["IpBlockSubnet"], () => require("./ipBlockSubnet"));

export { IpDiscoverySwitchingProfileArgs, IpDiscoverySwitchingProfileState } from "./ipDiscoverySwitchingProfile";
export type IpDiscoverySwitchingProfile = import("./ipDiscoverySwitchingProfile").IpDiscoverySwitchingProfile;
export const IpDiscoverySwitchingProfile: typeof import("./ipDiscoverySwitchingProfile").IpDiscoverySwitchingProfile = null as any;
utilities.lazyLoad(exports, ["IpDiscoverySwitchingProfile"], () => require("./ipDiscoverySwitchingProfile"));

export { IpPoolArgs, IpPoolState } from "./ipPool";
export type IpPool = import("./ipPool").IpPool;
export const IpPool: typeof import("./ipPool").IpPool = null as any;
utilities.lazyLoad(exports, ["IpPool"], () => require("./ipPool"));

export { IpPoolAllocationIpAddressArgs, IpPoolAllocationIpAddressState } from "./ipPoolAllocationIpAddress";
export type IpPoolAllocationIpAddress = import("./ipPoolAllocationIpAddress").IpPoolAllocationIpAddress;
export const IpPoolAllocationIpAddress: typeof import("./ipPoolAllocationIpAddress").IpPoolAllocationIpAddress = null as any;
utilities.lazyLoad(exports, ["IpPoolAllocationIpAddress"], () => require("./ipPoolAllocationIpAddress"));

export { IpProtocolNsServiceArgs, IpProtocolNsServiceState } from "./ipProtocolNsService";
export type IpProtocolNsService = import("./ipProtocolNsService").IpProtocolNsService;
export const IpProtocolNsService: typeof import("./ipProtocolNsService").IpProtocolNsService = null as any;
utilities.lazyLoad(exports, ["IpProtocolNsService"], () => require("./ipProtocolNsService"));

export { IpSetArgs, IpSetState } from "./ipSet";
export type IpSet = import("./ipSet").IpSet;
export const IpSet: typeof import("./ipSet").IpSet = null as any;
utilities.lazyLoad(exports, ["IpSet"], () => require("./ipSet"));

export { L4PortSetNsServiceArgs, L4PortSetNsServiceState } from "./l4portSetNsService";
export type L4PortSetNsService = import("./l4portSetNsService").L4PortSetNsService;
export const L4PortSetNsService: typeof import("./l4portSetNsService").L4PortSetNsService = null as any;
utilities.lazyLoad(exports, ["L4PortSetNsService"], () => require("./l4portSetNsService"));

export { LbClientSslProfileArgs, LbClientSslProfileState } from "./lbClientSslProfile";
export type LbClientSslProfile = import("./lbClientSslProfile").LbClientSslProfile;
export const LbClientSslProfile: typeof import("./lbClientSslProfile").LbClientSslProfile = null as any;
utilities.lazyLoad(exports, ["LbClientSslProfile"], () => require("./lbClientSslProfile"));

export { LbCookiePersistenceProfileArgs, LbCookiePersistenceProfileState } from "./lbCookiePersistenceProfile";
export type LbCookiePersistenceProfile = import("./lbCookiePersistenceProfile").LbCookiePersistenceProfile;
export const LbCookiePersistenceProfile: typeof import("./lbCookiePersistenceProfile").LbCookiePersistenceProfile = null as any;
utilities.lazyLoad(exports, ["LbCookiePersistenceProfile"], () => require("./lbCookiePersistenceProfile"));

export { LbFastTcpApplicationProfileArgs, LbFastTcpApplicationProfileState } from "./lbFastTcpApplicationProfile";
export type LbFastTcpApplicationProfile = import("./lbFastTcpApplicationProfile").LbFastTcpApplicationProfile;
export const LbFastTcpApplicationProfile: typeof import("./lbFastTcpApplicationProfile").LbFastTcpApplicationProfile = null as any;
utilities.lazyLoad(exports, ["LbFastTcpApplicationProfile"], () => require("./lbFastTcpApplicationProfile"));

export { LbFastUdpApplicationProfileArgs, LbFastUdpApplicationProfileState } from "./lbFastUdpApplicationProfile";
export type LbFastUdpApplicationProfile = import("./lbFastUdpApplicationProfile").LbFastUdpApplicationProfile;
export const LbFastUdpApplicationProfile: typeof import("./lbFastUdpApplicationProfile").LbFastUdpApplicationProfile = null as any;
utilities.lazyLoad(exports, ["LbFastUdpApplicationProfile"], () => require("./lbFastUdpApplicationProfile"));

export { LbHttpApplicationProfileArgs, LbHttpApplicationProfileState } from "./lbHttpApplicationProfile";
export type LbHttpApplicationProfile = import("./lbHttpApplicationProfile").LbHttpApplicationProfile;
export const LbHttpApplicationProfile: typeof import("./lbHttpApplicationProfile").LbHttpApplicationProfile = null as any;
utilities.lazyLoad(exports, ["LbHttpApplicationProfile"], () => require("./lbHttpApplicationProfile"));

export { LbHttpForwardingRuleArgs, LbHttpForwardingRuleState } from "./lbHttpForwardingRule";
export type LbHttpForwardingRule = import("./lbHttpForwardingRule").LbHttpForwardingRule;
export const LbHttpForwardingRule: typeof import("./lbHttpForwardingRule").LbHttpForwardingRule = null as any;
utilities.lazyLoad(exports, ["LbHttpForwardingRule"], () => require("./lbHttpForwardingRule"));

export { LbHttpMonitorArgs, LbHttpMonitorState } from "./lbHttpMonitor";
export type LbHttpMonitor = import("./lbHttpMonitor").LbHttpMonitor;
export const LbHttpMonitor: typeof import("./lbHttpMonitor").LbHttpMonitor = null as any;
utilities.lazyLoad(exports, ["LbHttpMonitor"], () => require("./lbHttpMonitor"));

export { LbHttpRequestRewriteRuleArgs, LbHttpRequestRewriteRuleState } from "./lbHttpRequestRewriteRule";
export type LbHttpRequestRewriteRule = import("./lbHttpRequestRewriteRule").LbHttpRequestRewriteRule;
export const LbHttpRequestRewriteRule: typeof import("./lbHttpRequestRewriteRule").LbHttpRequestRewriteRule = null as any;
utilities.lazyLoad(exports, ["LbHttpRequestRewriteRule"], () => require("./lbHttpRequestRewriteRule"));

export { LbHttpResponseRewriteRuleArgs, LbHttpResponseRewriteRuleState } from "./lbHttpResponseRewriteRule";
export type LbHttpResponseRewriteRule = import("./lbHttpResponseRewriteRule").LbHttpResponseRewriteRule;
export const LbHttpResponseRewriteRule: typeof import("./lbHttpResponseRewriteRule").LbHttpResponseRewriteRule = null as any;
utilities.lazyLoad(exports, ["LbHttpResponseRewriteRule"], () => require("./lbHttpResponseRewriteRule"));

export { LbHttpVirtualServerArgs, LbHttpVirtualServerState } from "./lbHttpVirtualServer";
export type LbHttpVirtualServer = import("./lbHttpVirtualServer").LbHttpVirtualServer;
export const LbHttpVirtualServer: typeof import("./lbHttpVirtualServer").LbHttpVirtualServer = null as any;
utilities.lazyLoad(exports, ["LbHttpVirtualServer"], () => require("./lbHttpVirtualServer"));

export { LbHttpsMonitorArgs, LbHttpsMonitorState } from "./lbHttpsMonitor";
export type LbHttpsMonitor = import("./lbHttpsMonitor").LbHttpsMonitor;
export const LbHttpsMonitor: typeof import("./lbHttpsMonitor").LbHttpsMonitor = null as any;
utilities.lazyLoad(exports, ["LbHttpsMonitor"], () => require("./lbHttpsMonitor"));

export { LbIcmpMonitorArgs, LbIcmpMonitorState } from "./lbIcmpMonitor";
export type LbIcmpMonitor = import("./lbIcmpMonitor").LbIcmpMonitor;
export const LbIcmpMonitor: typeof import("./lbIcmpMonitor").LbIcmpMonitor = null as any;
utilities.lazyLoad(exports, ["LbIcmpMonitor"], () => require("./lbIcmpMonitor"));

export { LbPassiveMonitorArgs, LbPassiveMonitorState } from "./lbPassiveMonitor";
export type LbPassiveMonitor = import("./lbPassiveMonitor").LbPassiveMonitor;
export const LbPassiveMonitor: typeof import("./lbPassiveMonitor").LbPassiveMonitor = null as any;
utilities.lazyLoad(exports, ["LbPassiveMonitor"], () => require("./lbPassiveMonitor"));

export { LbPoolArgs, LbPoolState } from "./lbPool";
export type LbPool = import("./lbPool").LbPool;
export const LbPool: typeof import("./lbPool").LbPool = null as any;
utilities.lazyLoad(exports, ["LbPool"], () => require("./lbPool"));

export { LbServerSslProfileArgs, LbServerSslProfileState } from "./lbServerSslProfile";
export type LbServerSslProfile = import("./lbServerSslProfile").LbServerSslProfile;
export const LbServerSslProfile: typeof import("./lbServerSslProfile").LbServerSslProfile = null as any;
utilities.lazyLoad(exports, ["LbServerSslProfile"], () => require("./lbServerSslProfile"));

export { LbServiceArgs, LbServiceState } from "./lbService";
export type LbService = import("./lbService").LbService;
export const LbService: typeof import("./lbService").LbService = null as any;
utilities.lazyLoad(exports, ["LbService"], () => require("./lbService"));

export { LbSourceIpPersistenceProfileArgs, LbSourceIpPersistenceProfileState } from "./lbSourceIpPersistenceProfile";
export type LbSourceIpPersistenceProfile = import("./lbSourceIpPersistenceProfile").LbSourceIpPersistenceProfile;
export const LbSourceIpPersistenceProfile: typeof import("./lbSourceIpPersistenceProfile").LbSourceIpPersistenceProfile = null as any;
utilities.lazyLoad(exports, ["LbSourceIpPersistenceProfile"], () => require("./lbSourceIpPersistenceProfile"));

export { LbTcpMonitorArgs, LbTcpMonitorState } from "./lbTcpMonitor";
export type LbTcpMonitor = import("./lbTcpMonitor").LbTcpMonitor;
export const LbTcpMonitor: typeof import("./lbTcpMonitor").LbTcpMonitor = null as any;
utilities.lazyLoad(exports, ["LbTcpMonitor"], () => require("./lbTcpMonitor"));

export { LbTcpVirtualServerArgs, LbTcpVirtualServerState } from "./lbTcpVirtualServer";
export type LbTcpVirtualServer = import("./lbTcpVirtualServer").LbTcpVirtualServer;
export const LbTcpVirtualServer: typeof import("./lbTcpVirtualServer").LbTcpVirtualServer = null as any;
utilities.lazyLoad(exports, ["LbTcpVirtualServer"], () => require("./lbTcpVirtualServer"));

export { LbUdpMonitorArgs, LbUdpMonitorState } from "./lbUdpMonitor";
export type LbUdpMonitor = import("./lbUdpMonitor").LbUdpMonitor;
export const LbUdpMonitor: typeof import("./lbUdpMonitor").LbUdpMonitor = null as any;
utilities.lazyLoad(exports, ["LbUdpMonitor"], () => require("./lbUdpMonitor"));

export { LbUdpVirtualServerArgs, LbUdpVirtualServerState } from "./lbUdpVirtualServer";
export type LbUdpVirtualServer = import("./lbUdpVirtualServer").LbUdpVirtualServer;
export const LbUdpVirtualServer: typeof import("./lbUdpVirtualServer").LbUdpVirtualServer = null as any;
utilities.lazyLoad(exports, ["LbUdpVirtualServer"], () => require("./lbUdpVirtualServer"));

export { LogicalDhcpPortArgs, LogicalDhcpPortState } from "./logicalDhcpPort";
export type LogicalDhcpPort = import("./logicalDhcpPort").LogicalDhcpPort;
export const LogicalDhcpPort: typeof import("./logicalDhcpPort").LogicalDhcpPort = null as any;
utilities.lazyLoad(exports, ["LogicalDhcpPort"], () => require("./logicalDhcpPort"));

export { LogicalDhcpServerArgs, LogicalDhcpServerState } from "./logicalDhcpServer";
export type LogicalDhcpServer = import("./logicalDhcpServer").LogicalDhcpServer;
export const LogicalDhcpServer: typeof import("./logicalDhcpServer").LogicalDhcpServer = null as any;
utilities.lazyLoad(exports, ["LogicalDhcpServer"], () => require("./logicalDhcpServer"));

export { LogicalPortArgs, LogicalPortState } from "./logicalPort";
export type LogicalPort = import("./logicalPort").LogicalPort;
export const LogicalPort: typeof import("./logicalPort").LogicalPort = null as any;
utilities.lazyLoad(exports, ["LogicalPort"], () => require("./logicalPort"));

export { LogicalRouterCentralizedServicePortArgs, LogicalRouterCentralizedServicePortState } from "./logicalRouterCentralizedServicePort";
export type LogicalRouterCentralizedServicePort = import("./logicalRouterCentralizedServicePort").LogicalRouterCentralizedServicePort;
export const LogicalRouterCentralizedServicePort: typeof import("./logicalRouterCentralizedServicePort").LogicalRouterCentralizedServicePort = null as any;
utilities.lazyLoad(exports, ["LogicalRouterCentralizedServicePort"], () => require("./logicalRouterCentralizedServicePort"));

export { LogicalRouterDownlinkPortArgs, LogicalRouterDownlinkPortState } from "./logicalRouterDownlinkPort";
export type LogicalRouterDownlinkPort = import("./logicalRouterDownlinkPort").LogicalRouterDownlinkPort;
export const LogicalRouterDownlinkPort: typeof import("./logicalRouterDownlinkPort").LogicalRouterDownlinkPort = null as any;
utilities.lazyLoad(exports, ["LogicalRouterDownlinkPort"], () => require("./logicalRouterDownlinkPort"));

export { LogicalRouterLinkPortOnTier0Args, LogicalRouterLinkPortOnTier0State } from "./logicalRouterLinkPortOnTier0";
export type LogicalRouterLinkPortOnTier0 = import("./logicalRouterLinkPortOnTier0").LogicalRouterLinkPortOnTier0;
export const LogicalRouterLinkPortOnTier0: typeof import("./logicalRouterLinkPortOnTier0").LogicalRouterLinkPortOnTier0 = null as any;
utilities.lazyLoad(exports, ["LogicalRouterLinkPortOnTier0"], () => require("./logicalRouterLinkPortOnTier0"));

export { LogicalRouterLinkPortOnTier1Args, LogicalRouterLinkPortOnTier1State } from "./logicalRouterLinkPortOnTier1";
export type LogicalRouterLinkPortOnTier1 = import("./logicalRouterLinkPortOnTier1").LogicalRouterLinkPortOnTier1;
export const LogicalRouterLinkPortOnTier1: typeof import("./logicalRouterLinkPortOnTier1").LogicalRouterLinkPortOnTier1 = null as any;
utilities.lazyLoad(exports, ["LogicalRouterLinkPortOnTier1"], () => require("./logicalRouterLinkPortOnTier1"));

export { LogicalSwitchArgs, LogicalSwitchState } from "./logicalSwitch";
export type LogicalSwitch = import("./logicalSwitch").LogicalSwitch;
export const LogicalSwitch: typeof import("./logicalSwitch").LogicalSwitch = null as any;
utilities.lazyLoad(exports, ["LogicalSwitch"], () => require("./logicalSwitch"));

export { LogicalTier0RouterArgs, LogicalTier0RouterState } from "./logicalTier0Router";
export type LogicalTier0Router = import("./logicalTier0Router").LogicalTier0Router;
export const LogicalTier0Router: typeof import("./logicalTier0Router").LogicalTier0Router = null as any;
utilities.lazyLoad(exports, ["LogicalTier0Router"], () => require("./logicalTier0Router"));

export { LogicalTier1RouterArgs, LogicalTier1RouterState } from "./logicalTier1Router";
export type LogicalTier1Router = import("./logicalTier1Router").LogicalTier1Router;
export const LogicalTier1Router: typeof import("./logicalTier1Router").LogicalTier1Router = null as any;
utilities.lazyLoad(exports, ["LogicalTier1Router"], () => require("./logicalTier1Router"));

export { MacManagementSwitchingProfileArgs, MacManagementSwitchingProfileState } from "./macManagementSwitchingProfile";
export type MacManagementSwitchingProfile = import("./macManagementSwitchingProfile").MacManagementSwitchingProfile;
export const MacManagementSwitchingProfile: typeof import("./macManagementSwitchingProfile").MacManagementSwitchingProfile = null as any;
utilities.lazyLoad(exports, ["MacManagementSwitchingProfile"], () => require("./macManagementSwitchingProfile"));

export { ManagerClusterArgs, ManagerClusterState } from "./managerCluster";
export type ManagerCluster = import("./managerCluster").ManagerCluster;
export const ManagerCluster: typeof import("./managerCluster").ManagerCluster = null as any;
utilities.lazyLoad(exports, ["ManagerCluster"], () => require("./managerCluster"));

export { NatRuleArgs, NatRuleState } from "./natRule";
export type NatRule = import("./natRule").NatRule;
export const NatRule: typeof import("./natRule").NatRule = null as any;
utilities.lazyLoad(exports, ["NatRule"], () => require("./natRule"));

export { NodeUserArgs, NodeUserState } from "./nodeUser";
export type NodeUser = import("./nodeUser").NodeUser;
export const NodeUser: typeof import("./nodeUser").NodeUser = null as any;
utilities.lazyLoad(exports, ["NodeUser"], () => require("./nodeUser"));

export { NsGroupArgs, NsGroupState } from "./nsGroup";
export type NsGroup = import("./nsGroup").NsGroup;
export const NsGroup: typeof import("./nsGroup").NsGroup = null as any;
utilities.lazyLoad(exports, ["NsGroup"], () => require("./nsGroup"));

export { NsServiceGroupArgs, NsServiceGroupState } from "./nsServiceGroup";
export type NsServiceGroup = import("./nsServiceGroup").NsServiceGroup;
export const NsServiceGroup: typeof import("./nsServiceGroup").NsServiceGroup = null as any;
utilities.lazyLoad(exports, ["NsServiceGroup"], () => require("./nsServiceGroup"));

export { PolicyBgpConfigArgs, PolicyBgpConfigState } from "./policyBgpConfig";
export type PolicyBgpConfig = import("./policyBgpConfig").PolicyBgpConfig;
export const PolicyBgpConfig: typeof import("./policyBgpConfig").PolicyBgpConfig = null as any;
utilities.lazyLoad(exports, ["PolicyBgpConfig"], () => require("./policyBgpConfig"));

export { PolicyBgpNeighborArgs, PolicyBgpNeighborState } from "./policyBgpNeighbor";
export type PolicyBgpNeighbor = import("./policyBgpNeighbor").PolicyBgpNeighbor;
export const PolicyBgpNeighbor: typeof import("./policyBgpNeighbor").PolicyBgpNeighbor = null as any;
utilities.lazyLoad(exports, ["PolicyBgpNeighbor"], () => require("./policyBgpNeighbor"));

export { PolicyComputeSubClusterArgs, PolicyComputeSubClusterState } from "./policyComputeSubCluster";
export type PolicyComputeSubCluster = import("./policyComputeSubCluster").PolicyComputeSubCluster;
export const PolicyComputeSubCluster: typeof import("./policyComputeSubCluster").PolicyComputeSubCluster = null as any;
utilities.lazyLoad(exports, ["PolicyComputeSubCluster"], () => require("./policyComputeSubCluster"));

export { PolicyContextProfileArgs, PolicyContextProfileState } from "./policyContextProfile";
export type PolicyContextProfile = import("./policyContextProfile").PolicyContextProfile;
export const PolicyContextProfile: typeof import("./policyContextProfile").PolicyContextProfile = null as any;
utilities.lazyLoad(exports, ["PolicyContextProfile"], () => require("./policyContextProfile"));

export { PolicyContextProfileCustomAttributeArgs, PolicyContextProfileCustomAttributeState } from "./policyContextProfileCustomAttribute";
export type PolicyContextProfileCustomAttribute = import("./policyContextProfileCustomAttribute").PolicyContextProfileCustomAttribute;
export const PolicyContextProfileCustomAttribute: typeof import("./policyContextProfileCustomAttribute").PolicyContextProfileCustomAttribute = null as any;
utilities.lazyLoad(exports, ["PolicyContextProfileCustomAttribute"], () => require("./policyContextProfileCustomAttribute"));

export { PolicyDhcpRelayArgs, PolicyDhcpRelayState } from "./policyDhcpRelay";
export type PolicyDhcpRelay = import("./policyDhcpRelay").PolicyDhcpRelay;
export const PolicyDhcpRelay: typeof import("./policyDhcpRelay").PolicyDhcpRelay = null as any;
utilities.lazyLoad(exports, ["PolicyDhcpRelay"], () => require("./policyDhcpRelay"));

export { PolicyDhcpServerArgs, PolicyDhcpServerState } from "./policyDhcpServer";
export type PolicyDhcpServer = import("./policyDhcpServer").PolicyDhcpServer;
export const PolicyDhcpServer: typeof import("./policyDhcpServer").PolicyDhcpServer = null as any;
utilities.lazyLoad(exports, ["PolicyDhcpServer"], () => require("./policyDhcpServer"));

export { PolicyDhcpV4StaticBindingArgs, PolicyDhcpV4StaticBindingState } from "./policyDhcpV4StaticBinding";
export type PolicyDhcpV4StaticBinding = import("./policyDhcpV4StaticBinding").PolicyDhcpV4StaticBinding;
export const PolicyDhcpV4StaticBinding: typeof import("./policyDhcpV4StaticBinding").PolicyDhcpV4StaticBinding = null as any;
utilities.lazyLoad(exports, ["PolicyDhcpV4StaticBinding"], () => require("./policyDhcpV4StaticBinding"));

export { PolicyDhcpV6StaticBindingArgs, PolicyDhcpV6StaticBindingState } from "./policyDhcpV6StaticBinding";
export type PolicyDhcpV6StaticBinding = import("./policyDhcpV6StaticBinding").PolicyDhcpV6StaticBinding;
export const PolicyDhcpV6StaticBinding: typeof import("./policyDhcpV6StaticBinding").PolicyDhcpV6StaticBinding = null as any;
utilities.lazyLoad(exports, ["PolicyDhcpV6StaticBinding"], () => require("./policyDhcpV6StaticBinding"));

export { PolicyDistributedFloodProtectionProfileArgs, PolicyDistributedFloodProtectionProfileState } from "./policyDistributedFloodProtectionProfile";
export type PolicyDistributedFloodProtectionProfile = import("./policyDistributedFloodProtectionProfile").PolicyDistributedFloodProtectionProfile;
export const PolicyDistributedFloodProtectionProfile: typeof import("./policyDistributedFloodProtectionProfile").PolicyDistributedFloodProtectionProfile = null as any;
utilities.lazyLoad(exports, ["PolicyDistributedFloodProtectionProfile"], () => require("./policyDistributedFloodProtectionProfile"));

export { PolicyDistributedFloodProtectionProfileBindingArgs, PolicyDistributedFloodProtectionProfileBindingState } from "./policyDistributedFloodProtectionProfileBinding";
export type PolicyDistributedFloodProtectionProfileBinding = import("./policyDistributedFloodProtectionProfileBinding").PolicyDistributedFloodProtectionProfileBinding;
export const PolicyDistributedFloodProtectionProfileBinding: typeof import("./policyDistributedFloodProtectionProfileBinding").PolicyDistributedFloodProtectionProfileBinding = null as any;
utilities.lazyLoad(exports, ["PolicyDistributedFloodProtectionProfileBinding"], () => require("./policyDistributedFloodProtectionProfileBinding"));

export { PolicyDnsForwarderZoneArgs, PolicyDnsForwarderZoneState } from "./policyDnsForwarderZone";
export type PolicyDnsForwarderZone = import("./policyDnsForwarderZone").PolicyDnsForwarderZone;
export const PolicyDnsForwarderZone: typeof import("./policyDnsForwarderZone").PolicyDnsForwarderZone = null as any;
utilities.lazyLoad(exports, ["PolicyDnsForwarderZone"], () => require("./policyDnsForwarderZone"));

export { PolicyDomainArgs, PolicyDomainState } from "./policyDomain";
export type PolicyDomain = import("./policyDomain").PolicyDomain;
export const PolicyDomain: typeof import("./policyDomain").PolicyDomain = null as any;
utilities.lazyLoad(exports, ["PolicyDomain"], () => require("./policyDomain"));

export { PolicyEvpnConfigArgs, PolicyEvpnConfigState } from "./policyEvpnConfig";
export type PolicyEvpnConfig = import("./policyEvpnConfig").PolicyEvpnConfig;
export const PolicyEvpnConfig: typeof import("./policyEvpnConfig").PolicyEvpnConfig = null as any;
utilities.lazyLoad(exports, ["PolicyEvpnConfig"], () => require("./policyEvpnConfig"));

export { PolicyEvpnTenantArgs, PolicyEvpnTenantState } from "./policyEvpnTenant";
export type PolicyEvpnTenant = import("./policyEvpnTenant").PolicyEvpnTenant;
export const PolicyEvpnTenant: typeof import("./policyEvpnTenant").PolicyEvpnTenant = null as any;
utilities.lazyLoad(exports, ["PolicyEvpnTenant"], () => require("./policyEvpnTenant"));

export { PolicyEvpnTunnelEndpointArgs, PolicyEvpnTunnelEndpointState } from "./policyEvpnTunnelEndpoint";
export type PolicyEvpnTunnelEndpoint = import("./policyEvpnTunnelEndpoint").PolicyEvpnTunnelEndpoint;
export const PolicyEvpnTunnelEndpoint: typeof import("./policyEvpnTunnelEndpoint").PolicyEvpnTunnelEndpoint = null as any;
utilities.lazyLoad(exports, ["PolicyEvpnTunnelEndpoint"], () => require("./policyEvpnTunnelEndpoint"));

export { PolicyFirewallExcludeListMemberArgs, PolicyFirewallExcludeListMemberState } from "./policyFirewallExcludeListMember";
export type PolicyFirewallExcludeListMember = import("./policyFirewallExcludeListMember").PolicyFirewallExcludeListMember;
export const PolicyFirewallExcludeListMember: typeof import("./policyFirewallExcludeListMember").PolicyFirewallExcludeListMember = null as any;
utilities.lazyLoad(exports, ["PolicyFirewallExcludeListMember"], () => require("./policyFirewallExcludeListMember"));

export { PolicyFixedSegmentArgs, PolicyFixedSegmentState } from "./policyFixedSegment";
export type PolicyFixedSegment = import("./policyFixedSegment").PolicyFixedSegment;
export const PolicyFixedSegment: typeof import("./policyFixedSegment").PolicyFixedSegment = null as any;
utilities.lazyLoad(exports, ["PolicyFixedSegment"], () => require("./policyFixedSegment"));

export { PolicyGatewayCommunityListArgs, PolicyGatewayCommunityListState } from "./policyGatewayCommunityList";
export type PolicyGatewayCommunityList = import("./policyGatewayCommunityList").PolicyGatewayCommunityList;
export const PolicyGatewayCommunityList: typeof import("./policyGatewayCommunityList").PolicyGatewayCommunityList = null as any;
utilities.lazyLoad(exports, ["PolicyGatewayCommunityList"], () => require("./policyGatewayCommunityList"));

export { PolicyGatewayDnsForwarderArgs, PolicyGatewayDnsForwarderState } from "./policyGatewayDnsForwarder";
export type PolicyGatewayDnsForwarder = import("./policyGatewayDnsForwarder").PolicyGatewayDnsForwarder;
export const PolicyGatewayDnsForwarder: typeof import("./policyGatewayDnsForwarder").PolicyGatewayDnsForwarder = null as any;
utilities.lazyLoad(exports, ["PolicyGatewayDnsForwarder"], () => require("./policyGatewayDnsForwarder"));

export { PolicyGatewayFloodProtectionProfileArgs, PolicyGatewayFloodProtectionProfileState } from "./policyGatewayFloodProtectionProfile";
export type PolicyGatewayFloodProtectionProfile = import("./policyGatewayFloodProtectionProfile").PolicyGatewayFloodProtectionProfile;
export const PolicyGatewayFloodProtectionProfile: typeof import("./policyGatewayFloodProtectionProfile").PolicyGatewayFloodProtectionProfile = null as any;
utilities.lazyLoad(exports, ["PolicyGatewayFloodProtectionProfile"], () => require("./policyGatewayFloodProtectionProfile"));

export { PolicyGatewayFloodProtectionProfileBindingArgs, PolicyGatewayFloodProtectionProfileBindingState } from "./policyGatewayFloodProtectionProfileBinding";
export type PolicyGatewayFloodProtectionProfileBinding = import("./policyGatewayFloodProtectionProfileBinding").PolicyGatewayFloodProtectionProfileBinding;
export const PolicyGatewayFloodProtectionProfileBinding: typeof import("./policyGatewayFloodProtectionProfileBinding").PolicyGatewayFloodProtectionProfileBinding = null as any;
utilities.lazyLoad(exports, ["PolicyGatewayFloodProtectionProfileBinding"], () => require("./policyGatewayFloodProtectionProfileBinding"));

export { PolicyGatewayPolicyArgs, PolicyGatewayPolicyState } from "./policyGatewayPolicy";
export type PolicyGatewayPolicy = import("./policyGatewayPolicy").PolicyGatewayPolicy;
export const PolicyGatewayPolicy: typeof import("./policyGatewayPolicy").PolicyGatewayPolicy = null as any;
utilities.lazyLoad(exports, ["PolicyGatewayPolicy"], () => require("./policyGatewayPolicy"));

export { PolicyGatewayPrefixListArgs, PolicyGatewayPrefixListState } from "./policyGatewayPrefixList";
export type PolicyGatewayPrefixList = import("./policyGatewayPrefixList").PolicyGatewayPrefixList;
export const PolicyGatewayPrefixList: typeof import("./policyGatewayPrefixList").PolicyGatewayPrefixList = null as any;
utilities.lazyLoad(exports, ["PolicyGatewayPrefixList"], () => require("./policyGatewayPrefixList"));

export { PolicyGatewayQosProfileArgs, PolicyGatewayQosProfileState } from "./policyGatewayQosProfile";
export type PolicyGatewayQosProfile = import("./policyGatewayQosProfile").PolicyGatewayQosProfile;
export const PolicyGatewayQosProfile: typeof import("./policyGatewayQosProfile").PolicyGatewayQosProfile = null as any;
utilities.lazyLoad(exports, ["PolicyGatewayQosProfile"], () => require("./policyGatewayQosProfile"));

export { PolicyGatewayRedistributionConfigArgs, PolicyGatewayRedistributionConfigState } from "./policyGatewayRedistributionConfig";
export type PolicyGatewayRedistributionConfig = import("./policyGatewayRedistributionConfig").PolicyGatewayRedistributionConfig;
export const PolicyGatewayRedistributionConfig: typeof import("./policyGatewayRedistributionConfig").PolicyGatewayRedistributionConfig = null as any;
utilities.lazyLoad(exports, ["PolicyGatewayRedistributionConfig"], () => require("./policyGatewayRedistributionConfig"));

export { PolicyGatewayRouteMapArgs, PolicyGatewayRouteMapState } from "./policyGatewayRouteMap";
export type PolicyGatewayRouteMap = import("./policyGatewayRouteMap").PolicyGatewayRouteMap;
export const PolicyGatewayRouteMap: typeof import("./policyGatewayRouteMap").PolicyGatewayRouteMap = null as any;
utilities.lazyLoad(exports, ["PolicyGatewayRouteMap"], () => require("./policyGatewayRouteMap"));

export { PolicyGlobalManagerArgs, PolicyGlobalManagerState } from "./policyGlobalManager";
export type PolicyGlobalManager = import("./policyGlobalManager").PolicyGlobalManager;
export const PolicyGlobalManager: typeof import("./policyGlobalManager").PolicyGlobalManager = null as any;
utilities.lazyLoad(exports, ["PolicyGlobalManager"], () => require("./policyGlobalManager"));

export { PolicyGroupArgs, PolicyGroupState } from "./policyGroup";
export type PolicyGroup = import("./policyGroup").PolicyGroup;
export const PolicyGroup: typeof import("./policyGroup").PolicyGroup = null as any;
utilities.lazyLoad(exports, ["PolicyGroup"], () => require("./policyGroup"));

export { PolicyHostTransportNodeArgs, PolicyHostTransportNodeState } from "./policyHostTransportNode";
export type PolicyHostTransportNode = import("./policyHostTransportNode").PolicyHostTransportNode;
export const PolicyHostTransportNode: typeof import("./policyHostTransportNode").PolicyHostTransportNode = null as any;
utilities.lazyLoad(exports, ["PolicyHostTransportNode"], () => require("./policyHostTransportNode"));

export { PolicyHostTransportNodeCollectionArgs, PolicyHostTransportNodeCollectionState } from "./policyHostTransportNodeCollection";
export type PolicyHostTransportNodeCollection = import("./policyHostTransportNodeCollection").PolicyHostTransportNodeCollection;
export const PolicyHostTransportNodeCollection: typeof import("./policyHostTransportNodeCollection").PolicyHostTransportNodeCollection = null as any;
utilities.lazyLoad(exports, ["PolicyHostTransportNodeCollection"], () => require("./policyHostTransportNodeCollection"));

export { PolicyHostTransportNodeProfileArgs, PolicyHostTransportNodeProfileState } from "./policyHostTransportNodeProfile";
export type PolicyHostTransportNodeProfile = import("./policyHostTransportNodeProfile").PolicyHostTransportNodeProfile;
export const PolicyHostTransportNodeProfile: typeof import("./policyHostTransportNodeProfile").PolicyHostTransportNodeProfile = null as any;
utilities.lazyLoad(exports, ["PolicyHostTransportNodeProfile"], () => require("./policyHostTransportNodeProfile"));

export { PolicyIntrusionServicePolicyArgs, PolicyIntrusionServicePolicyState } from "./policyIntrusionServicePolicy";
export type PolicyIntrusionServicePolicy = import("./policyIntrusionServicePolicy").PolicyIntrusionServicePolicy;
export const PolicyIntrusionServicePolicy: typeof import("./policyIntrusionServicePolicy").PolicyIntrusionServicePolicy = null as any;
utilities.lazyLoad(exports, ["PolicyIntrusionServicePolicy"], () => require("./policyIntrusionServicePolicy"));

export { PolicyIntrusionServiceProfileArgs, PolicyIntrusionServiceProfileState } from "./policyIntrusionServiceProfile";
export type PolicyIntrusionServiceProfile = import("./policyIntrusionServiceProfile").PolicyIntrusionServiceProfile;
export const PolicyIntrusionServiceProfile: typeof import("./policyIntrusionServiceProfile").PolicyIntrusionServiceProfile = null as any;
utilities.lazyLoad(exports, ["PolicyIntrusionServiceProfile"], () => require("./policyIntrusionServiceProfile"));

export { PolicyIpAddressAllocationArgs, PolicyIpAddressAllocationState } from "./policyIpAddressAllocation";
export type PolicyIpAddressAllocation = import("./policyIpAddressAllocation").PolicyIpAddressAllocation;
export const PolicyIpAddressAllocation: typeof import("./policyIpAddressAllocation").PolicyIpAddressAllocation = null as any;
utilities.lazyLoad(exports, ["PolicyIpAddressAllocation"], () => require("./policyIpAddressAllocation"));

export { PolicyIpBlockArgs, PolicyIpBlockState } from "./policyIpBlock";
export type PolicyIpBlock = import("./policyIpBlock").PolicyIpBlock;
export const PolicyIpBlock: typeof import("./policyIpBlock").PolicyIpBlock = null as any;
utilities.lazyLoad(exports, ["PolicyIpBlock"], () => require("./policyIpBlock"));

export { PolicyIpDiscoveryProfileArgs, PolicyIpDiscoveryProfileState } from "./policyIpDiscoveryProfile";
export type PolicyIpDiscoveryProfile = import("./policyIpDiscoveryProfile").PolicyIpDiscoveryProfile;
export const PolicyIpDiscoveryProfile: typeof import("./policyIpDiscoveryProfile").PolicyIpDiscoveryProfile = null as any;
utilities.lazyLoad(exports, ["PolicyIpDiscoveryProfile"], () => require("./policyIpDiscoveryProfile"));

export { PolicyIpPoolArgs, PolicyIpPoolState } from "./policyIpPool";
export type PolicyIpPool = import("./policyIpPool").PolicyIpPool;
export const PolicyIpPool: typeof import("./policyIpPool").PolicyIpPool = null as any;
utilities.lazyLoad(exports, ["PolicyIpPool"], () => require("./policyIpPool"));

export { PolicyIpPoolBlockSubnetArgs, PolicyIpPoolBlockSubnetState } from "./policyIpPoolBlockSubnet";
export type PolicyIpPoolBlockSubnet = import("./policyIpPoolBlockSubnet").PolicyIpPoolBlockSubnet;
export const PolicyIpPoolBlockSubnet: typeof import("./policyIpPoolBlockSubnet").PolicyIpPoolBlockSubnet = null as any;
utilities.lazyLoad(exports, ["PolicyIpPoolBlockSubnet"], () => require("./policyIpPoolBlockSubnet"));

export { PolicyIpPoolStaticSubnetArgs, PolicyIpPoolStaticSubnetState } from "./policyIpPoolStaticSubnet";
export type PolicyIpPoolStaticSubnet = import("./policyIpPoolStaticSubnet").PolicyIpPoolStaticSubnet;
export const PolicyIpPoolStaticSubnet: typeof import("./policyIpPoolStaticSubnet").PolicyIpPoolStaticSubnet = null as any;
utilities.lazyLoad(exports, ["PolicyIpPoolStaticSubnet"], () => require("./policyIpPoolStaticSubnet"));

export { PolicyIpsecVpnDpdProfileArgs, PolicyIpsecVpnDpdProfileState } from "./policyIpsecVpnDpdProfile";
export type PolicyIpsecVpnDpdProfile = import("./policyIpsecVpnDpdProfile").PolicyIpsecVpnDpdProfile;
export const PolicyIpsecVpnDpdProfile: typeof import("./policyIpsecVpnDpdProfile").PolicyIpsecVpnDpdProfile = null as any;
utilities.lazyLoad(exports, ["PolicyIpsecVpnDpdProfile"], () => require("./policyIpsecVpnDpdProfile"));

export { PolicyIpsecVpnIkeProfileArgs, PolicyIpsecVpnIkeProfileState } from "./policyIpsecVpnIkeProfile";
export type PolicyIpsecVpnIkeProfile = import("./policyIpsecVpnIkeProfile").PolicyIpsecVpnIkeProfile;
export const PolicyIpsecVpnIkeProfile: typeof import("./policyIpsecVpnIkeProfile").PolicyIpsecVpnIkeProfile = null as any;
utilities.lazyLoad(exports, ["PolicyIpsecVpnIkeProfile"], () => require("./policyIpsecVpnIkeProfile"));

export { PolicyIpsecVpnLocalEndpointArgs, PolicyIpsecVpnLocalEndpointState } from "./policyIpsecVpnLocalEndpoint";
export type PolicyIpsecVpnLocalEndpoint = import("./policyIpsecVpnLocalEndpoint").PolicyIpsecVpnLocalEndpoint;
export const PolicyIpsecVpnLocalEndpoint: typeof import("./policyIpsecVpnLocalEndpoint").PolicyIpsecVpnLocalEndpoint = null as any;
utilities.lazyLoad(exports, ["PolicyIpsecVpnLocalEndpoint"], () => require("./policyIpsecVpnLocalEndpoint"));

export { PolicyIpsecVpnServiceArgs, PolicyIpsecVpnServiceState } from "./policyIpsecVpnService";
export type PolicyIpsecVpnService = import("./policyIpsecVpnService").PolicyIpsecVpnService;
export const PolicyIpsecVpnService: typeof import("./policyIpsecVpnService").PolicyIpsecVpnService = null as any;
utilities.lazyLoad(exports, ["PolicyIpsecVpnService"], () => require("./policyIpsecVpnService"));

export { PolicyIpsecVpnSessionArgs, PolicyIpsecVpnSessionState } from "./policyIpsecVpnSession";
export type PolicyIpsecVpnSession = import("./policyIpsecVpnSession").PolicyIpsecVpnSession;
export const PolicyIpsecVpnSession: typeof import("./policyIpsecVpnSession").PolicyIpsecVpnSession = null as any;
utilities.lazyLoad(exports, ["PolicyIpsecVpnSession"], () => require("./policyIpsecVpnSession"));

export { PolicyIpsecVpnTunnelProfileArgs, PolicyIpsecVpnTunnelProfileState } from "./policyIpsecVpnTunnelProfile";
export type PolicyIpsecVpnTunnelProfile = import("./policyIpsecVpnTunnelProfile").PolicyIpsecVpnTunnelProfile;
export const PolicyIpsecVpnTunnelProfile: typeof import("./policyIpsecVpnTunnelProfile").PolicyIpsecVpnTunnelProfile = null as any;
utilities.lazyLoad(exports, ["PolicyIpsecVpnTunnelProfile"], () => require("./policyIpsecVpnTunnelProfile"));

export { PolicyL2VpnServiceArgs, PolicyL2VpnServiceState } from "./policyL2VpnService";
export type PolicyL2VpnService = import("./policyL2VpnService").PolicyL2VpnService;
export const PolicyL2VpnService: typeof import("./policyL2VpnService").PolicyL2VpnService = null as any;
utilities.lazyLoad(exports, ["PolicyL2VpnService"], () => require("./policyL2VpnService"));

export { PolicyL2VpnSessionArgs, PolicyL2VpnSessionState } from "./policyL2VpnSession";
export type PolicyL2VpnSession = import("./policyL2VpnSession").PolicyL2VpnSession;
export const PolicyL2VpnSession: typeof import("./policyL2VpnSession").PolicyL2VpnSession = null as any;
utilities.lazyLoad(exports, ["PolicyL2VpnSession"], () => require("./policyL2VpnSession"));

export { PolicyLbClientSslProfileArgs, PolicyLbClientSslProfileState } from "./policyLbClientSslProfile";
export type PolicyLbClientSslProfile = import("./policyLbClientSslProfile").PolicyLbClientSslProfile;
export const PolicyLbClientSslProfile: typeof import("./policyLbClientSslProfile").PolicyLbClientSslProfile = null as any;
utilities.lazyLoad(exports, ["PolicyLbClientSslProfile"], () => require("./policyLbClientSslProfile"));

export { PolicyLbHttpApplicationProfileArgs, PolicyLbHttpApplicationProfileState } from "./policyLbHttpApplicationProfile";
export type PolicyLbHttpApplicationProfile = import("./policyLbHttpApplicationProfile").PolicyLbHttpApplicationProfile;
export const PolicyLbHttpApplicationProfile: typeof import("./policyLbHttpApplicationProfile").PolicyLbHttpApplicationProfile = null as any;
utilities.lazyLoad(exports, ["PolicyLbHttpApplicationProfile"], () => require("./policyLbHttpApplicationProfile"));

export { PolicyLbHttpMonitorProfileArgs, PolicyLbHttpMonitorProfileState } from "./policyLbHttpMonitorProfile";
export type PolicyLbHttpMonitorProfile = import("./policyLbHttpMonitorProfile").PolicyLbHttpMonitorProfile;
export const PolicyLbHttpMonitorProfile: typeof import("./policyLbHttpMonitorProfile").PolicyLbHttpMonitorProfile = null as any;
utilities.lazyLoad(exports, ["PolicyLbHttpMonitorProfile"], () => require("./policyLbHttpMonitorProfile"));

export { PolicyLbHttpsMonitorProfileArgs, PolicyLbHttpsMonitorProfileState } from "./policyLbHttpsMonitorProfile";
export type PolicyLbHttpsMonitorProfile = import("./policyLbHttpsMonitorProfile").PolicyLbHttpsMonitorProfile;
export const PolicyLbHttpsMonitorProfile: typeof import("./policyLbHttpsMonitorProfile").PolicyLbHttpsMonitorProfile = null as any;
utilities.lazyLoad(exports, ["PolicyLbHttpsMonitorProfile"], () => require("./policyLbHttpsMonitorProfile"));

export { PolicyLbIcmpMonitorProfileArgs, PolicyLbIcmpMonitorProfileState } from "./policyLbIcmpMonitorProfile";
export type PolicyLbIcmpMonitorProfile = import("./policyLbIcmpMonitorProfile").PolicyLbIcmpMonitorProfile;
export const PolicyLbIcmpMonitorProfile: typeof import("./policyLbIcmpMonitorProfile").PolicyLbIcmpMonitorProfile = null as any;
utilities.lazyLoad(exports, ["PolicyLbIcmpMonitorProfile"], () => require("./policyLbIcmpMonitorProfile"));

export { PolicyLbPassiveMonitorProfileArgs, PolicyLbPassiveMonitorProfileState } from "./policyLbPassiveMonitorProfile";
export type PolicyLbPassiveMonitorProfile = import("./policyLbPassiveMonitorProfile").PolicyLbPassiveMonitorProfile;
export const PolicyLbPassiveMonitorProfile: typeof import("./policyLbPassiveMonitorProfile").PolicyLbPassiveMonitorProfile = null as any;
utilities.lazyLoad(exports, ["PolicyLbPassiveMonitorProfile"], () => require("./policyLbPassiveMonitorProfile"));

export { PolicyLbPoolArgs, PolicyLbPoolState } from "./policyLbPool";
export type PolicyLbPool = import("./policyLbPool").PolicyLbPool;
export const PolicyLbPool: typeof import("./policyLbPool").PolicyLbPool = null as any;
utilities.lazyLoad(exports, ["PolicyLbPool"], () => require("./policyLbPool"));

export { PolicyLbServiceArgs, PolicyLbServiceState } from "./policyLbService";
export type PolicyLbService = import("./policyLbService").PolicyLbService;
export const PolicyLbService: typeof import("./policyLbService").PolicyLbService = null as any;
utilities.lazyLoad(exports, ["PolicyLbService"], () => require("./policyLbService"));

export { PolicyLbTcpMonitorProfileArgs, PolicyLbTcpMonitorProfileState } from "./policyLbTcpMonitorProfile";
export type PolicyLbTcpMonitorProfile = import("./policyLbTcpMonitorProfile").PolicyLbTcpMonitorProfile;
export const PolicyLbTcpMonitorProfile: typeof import("./policyLbTcpMonitorProfile").PolicyLbTcpMonitorProfile = null as any;
utilities.lazyLoad(exports, ["PolicyLbTcpMonitorProfile"], () => require("./policyLbTcpMonitorProfile"));

export { PolicyLbUdpMonitorProfileArgs, PolicyLbUdpMonitorProfileState } from "./policyLbUdpMonitorProfile";
export type PolicyLbUdpMonitorProfile = import("./policyLbUdpMonitorProfile").PolicyLbUdpMonitorProfile;
export const PolicyLbUdpMonitorProfile: typeof import("./policyLbUdpMonitorProfile").PolicyLbUdpMonitorProfile = null as any;
utilities.lazyLoad(exports, ["PolicyLbUdpMonitorProfile"], () => require("./policyLbUdpMonitorProfile"));

export { PolicyLbVirtualServerArgs, PolicyLbVirtualServerState } from "./policyLbVirtualServer";
export type PolicyLbVirtualServer = import("./policyLbVirtualServer").PolicyLbVirtualServer;
export const PolicyLbVirtualServer: typeof import("./policyLbVirtualServer").PolicyLbVirtualServer = null as any;
utilities.lazyLoad(exports, ["PolicyLbVirtualServer"], () => require("./policyLbVirtualServer"));

export { PolicyLdapIdentitySourceArgs, PolicyLdapIdentitySourceState } from "./policyLdapIdentitySource";
export type PolicyLdapIdentitySource = import("./policyLdapIdentitySource").PolicyLdapIdentitySource;
export const PolicyLdapIdentitySource: typeof import("./policyLdapIdentitySource").PolicyLdapIdentitySource = null as any;
utilities.lazyLoad(exports, ["PolicyLdapIdentitySource"], () => require("./policyLdapIdentitySource"));

export { PolicyMacDiscoveryProfileArgs, PolicyMacDiscoveryProfileState } from "./policyMacDiscoveryProfile";
export type PolicyMacDiscoveryProfile = import("./policyMacDiscoveryProfile").PolicyMacDiscoveryProfile;
export const PolicyMacDiscoveryProfile: typeof import("./policyMacDiscoveryProfile").PolicyMacDiscoveryProfile = null as any;
utilities.lazyLoad(exports, ["PolicyMacDiscoveryProfile"], () => require("./policyMacDiscoveryProfile"));

export { PolicyMetadataProxyArgs, PolicyMetadataProxyState } from "./policyMetadataProxy";
export type PolicyMetadataProxy = import("./policyMetadataProxy").PolicyMetadataProxy;
export const PolicyMetadataProxy: typeof import("./policyMetadataProxy").PolicyMetadataProxy = null as any;
utilities.lazyLoad(exports, ["PolicyMetadataProxy"], () => require("./policyMetadataProxy"));

export { PolicyNatRuleArgs, PolicyNatRuleState } from "./policyNatRule";
export type PolicyNatRule = import("./policyNatRule").PolicyNatRule;
export const PolicyNatRule: typeof import("./policyNatRule").PolicyNatRule = null as any;
utilities.lazyLoad(exports, ["PolicyNatRule"], () => require("./policyNatRule"));

export { PolicyOspfAreaArgs, PolicyOspfAreaState } from "./policyOspfArea";
export type PolicyOspfArea = import("./policyOspfArea").PolicyOspfArea;
export const PolicyOspfArea: typeof import("./policyOspfArea").PolicyOspfArea = null as any;
utilities.lazyLoad(exports, ["PolicyOspfArea"], () => require("./policyOspfArea"));

export { PolicyOspfConfigArgs, PolicyOspfConfigState } from "./policyOspfConfig";
export type PolicyOspfConfig = import("./policyOspfConfig").PolicyOspfConfig;
export const PolicyOspfConfig: typeof import("./policyOspfConfig").PolicyOspfConfig = null as any;
utilities.lazyLoad(exports, ["PolicyOspfConfig"], () => require("./policyOspfConfig"));

export { PolicyParentSecurityPolicyArgs, PolicyParentSecurityPolicyState } from "./policyParentSecurityPolicy";
export type PolicyParentSecurityPolicy = import("./policyParentSecurityPolicy").PolicyParentSecurityPolicy;
export const PolicyParentSecurityPolicy: typeof import("./policyParentSecurityPolicy").PolicyParentSecurityPolicy = null as any;
utilities.lazyLoad(exports, ["PolicyParentSecurityPolicy"], () => require("./policyParentSecurityPolicy"));

export { PolicyPredefinedGatewayPolicyArgs, PolicyPredefinedGatewayPolicyState } from "./policyPredefinedGatewayPolicy";
export type PolicyPredefinedGatewayPolicy = import("./policyPredefinedGatewayPolicy").PolicyPredefinedGatewayPolicy;
export const PolicyPredefinedGatewayPolicy: typeof import("./policyPredefinedGatewayPolicy").PolicyPredefinedGatewayPolicy = null as any;
utilities.lazyLoad(exports, ["PolicyPredefinedGatewayPolicy"], () => require("./policyPredefinedGatewayPolicy"));

export { PolicyPredefinedSecurityPolicyArgs, PolicyPredefinedSecurityPolicyState } from "./policyPredefinedSecurityPolicy";
export type PolicyPredefinedSecurityPolicy = import("./policyPredefinedSecurityPolicy").PolicyPredefinedSecurityPolicy;
export const PolicyPredefinedSecurityPolicy: typeof import("./policyPredefinedSecurityPolicy").PolicyPredefinedSecurityPolicy = null as any;
utilities.lazyLoad(exports, ["PolicyPredefinedSecurityPolicy"], () => require("./policyPredefinedSecurityPolicy"));

export { PolicyProjectArgs, PolicyProjectState } from "./policyProject";
export type PolicyProject = import("./policyProject").PolicyProject;
export const PolicyProject: typeof import("./policyProject").PolicyProject = null as any;
utilities.lazyLoad(exports, ["PolicyProject"], () => require("./policyProject"));

export { PolicyQosProfileArgs, PolicyQosProfileState } from "./policyQosProfile";
export type PolicyQosProfile = import("./policyQosProfile").PolicyQosProfile;
export const PolicyQosProfile: typeof import("./policyQosProfile").PolicyQosProfile = null as any;
utilities.lazyLoad(exports, ["PolicyQosProfile"], () => require("./policyQosProfile"));

export { PolicySecurityPolicyArgs, PolicySecurityPolicyState } from "./policySecurityPolicy";
export type PolicySecurityPolicy = import("./policySecurityPolicy").PolicySecurityPolicy;
export const PolicySecurityPolicy: typeof import("./policySecurityPolicy").PolicySecurityPolicy = null as any;
utilities.lazyLoad(exports, ["PolicySecurityPolicy"], () => require("./policySecurityPolicy"));

export { PolicySecurityPolicyRuleArgs, PolicySecurityPolicyRuleState } from "./policySecurityPolicyRule";
export type PolicySecurityPolicyRule = import("./policySecurityPolicyRule").PolicySecurityPolicyRule;
export const PolicySecurityPolicyRule: typeof import("./policySecurityPolicyRule").PolicySecurityPolicyRule = null as any;
utilities.lazyLoad(exports, ["PolicySecurityPolicyRule"], () => require("./policySecurityPolicyRule"));

export { PolicySegmentArgs, PolicySegmentState } from "./policySegment";
export type PolicySegment = import("./policySegment").PolicySegment;
export const PolicySegment: typeof import("./policySegment").PolicySegment = null as any;
utilities.lazyLoad(exports, ["PolicySegment"], () => require("./policySegment"));

export { PolicySegmentSecurityProfileArgs, PolicySegmentSecurityProfileState } from "./policySegmentSecurityProfile";
export type PolicySegmentSecurityProfile = import("./policySegmentSecurityProfile").PolicySegmentSecurityProfile;
export const PolicySegmentSecurityProfile: typeof import("./policySegmentSecurityProfile").PolicySegmentSecurityProfile = null as any;
utilities.lazyLoad(exports, ["PolicySegmentSecurityProfile"], () => require("./policySegmentSecurityProfile"));

export { PolicyServiceArgs, PolicyServiceState } from "./policyService";
export type PolicyService = import("./policyService").PolicyService;
export const PolicyService: typeof import("./policyService").PolicyService = null as any;
utilities.lazyLoad(exports, ["PolicyService"], () => require("./policyService"));

export { PolicySiteArgs, PolicySiteState } from "./policySite";
export type PolicySite = import("./policySite").PolicySite;
export const PolicySite: typeof import("./policySite").PolicySite = null as any;
utilities.lazyLoad(exports, ["PolicySite"], () => require("./policySite"));

export { PolicySpoofGuardProfileArgs, PolicySpoofGuardProfileState } from "./policySpoofGuardProfile";
export type PolicySpoofGuardProfile = import("./policySpoofGuardProfile").PolicySpoofGuardProfile;
export const PolicySpoofGuardProfile: typeof import("./policySpoofGuardProfile").PolicySpoofGuardProfile = null as any;
utilities.lazyLoad(exports, ["PolicySpoofGuardProfile"], () => require("./policySpoofGuardProfile"));

export { PolicyStaticRouteArgs, PolicyStaticRouteState } from "./policyStaticRoute";
export type PolicyStaticRoute = import("./policyStaticRoute").PolicyStaticRoute;
export const PolicyStaticRoute: typeof import("./policyStaticRoute").PolicyStaticRoute = null as any;
utilities.lazyLoad(exports, ["PolicyStaticRoute"], () => require("./policyStaticRoute"));

export { PolicyStaticRouteBfdPeerArgs, PolicyStaticRouteBfdPeerState } from "./policyStaticRouteBfdPeer";
export type PolicyStaticRouteBfdPeer = import("./policyStaticRouteBfdPeer").PolicyStaticRouteBfdPeer;
export const PolicyStaticRouteBfdPeer: typeof import("./policyStaticRouteBfdPeer").PolicyStaticRouteBfdPeer = null as any;
utilities.lazyLoad(exports, ["PolicyStaticRouteBfdPeer"], () => require("./policyStaticRouteBfdPeer"));

export { PolicyTier0GatewayArgs, PolicyTier0GatewayState } from "./policyTier0Gateway";
export type PolicyTier0Gateway = import("./policyTier0Gateway").PolicyTier0Gateway;
export const PolicyTier0Gateway: typeof import("./policyTier0Gateway").PolicyTier0Gateway = null as any;
utilities.lazyLoad(exports, ["PolicyTier0Gateway"], () => require("./policyTier0Gateway"));

export { PolicyTier0GatewayGreTunnelArgs, PolicyTier0GatewayGreTunnelState } from "./policyTier0GatewayGreTunnel";
export type PolicyTier0GatewayGreTunnel = import("./policyTier0GatewayGreTunnel").PolicyTier0GatewayGreTunnel;
export const PolicyTier0GatewayGreTunnel: typeof import("./policyTier0GatewayGreTunnel").PolicyTier0GatewayGreTunnel = null as any;
utilities.lazyLoad(exports, ["PolicyTier0GatewayGreTunnel"], () => require("./policyTier0GatewayGreTunnel"));

export { PolicyTier0GatewayHaVipConfigArgs, PolicyTier0GatewayHaVipConfigState } from "./policyTier0GatewayHaVipConfig";
export type PolicyTier0GatewayHaVipConfig = import("./policyTier0GatewayHaVipConfig").PolicyTier0GatewayHaVipConfig;
export const PolicyTier0GatewayHaVipConfig: typeof import("./policyTier0GatewayHaVipConfig").PolicyTier0GatewayHaVipConfig = null as any;
utilities.lazyLoad(exports, ["PolicyTier0GatewayHaVipConfig"], () => require("./policyTier0GatewayHaVipConfig"));

export { PolicyTier0GatewayInterfaceArgs, PolicyTier0GatewayInterfaceState } from "./policyTier0GatewayInterface";
export type PolicyTier0GatewayInterface = import("./policyTier0GatewayInterface").PolicyTier0GatewayInterface;
export const PolicyTier0GatewayInterface: typeof import("./policyTier0GatewayInterface").PolicyTier0GatewayInterface = null as any;
utilities.lazyLoad(exports, ["PolicyTier0GatewayInterface"], () => require("./policyTier0GatewayInterface"));

export { PolicyTier0InterVrfRoutingArgs, PolicyTier0InterVrfRoutingState } from "./policyTier0InterVrfRouting";
export type PolicyTier0InterVrfRouting = import("./policyTier0InterVrfRouting").PolicyTier0InterVrfRouting;
export const PolicyTier0InterVrfRouting: typeof import("./policyTier0InterVrfRouting").PolicyTier0InterVrfRouting = null as any;
utilities.lazyLoad(exports, ["PolicyTier0InterVrfRouting"], () => require("./policyTier0InterVrfRouting"));

export { PolicyTier1GatewayArgs, PolicyTier1GatewayState } from "./policyTier1Gateway";
export type PolicyTier1Gateway = import("./policyTier1Gateway").PolicyTier1Gateway;
export const PolicyTier1Gateway: typeof import("./policyTier1Gateway").PolicyTier1Gateway = null as any;
utilities.lazyLoad(exports, ["PolicyTier1Gateway"], () => require("./policyTier1Gateway"));

export { PolicyTier1GatewayInterfaceArgs, PolicyTier1GatewayInterfaceState } from "./policyTier1GatewayInterface";
export type PolicyTier1GatewayInterface = import("./policyTier1GatewayInterface").PolicyTier1GatewayInterface;
export const PolicyTier1GatewayInterface: typeof import("./policyTier1GatewayInterface").PolicyTier1GatewayInterface = null as any;
utilities.lazyLoad(exports, ["PolicyTier1GatewayInterface"], () => require("./policyTier1GatewayInterface"));

export { PolicyTransportZoneArgs, PolicyTransportZoneState } from "./policyTransportZone";
export type PolicyTransportZone = import("./policyTransportZone").PolicyTransportZone;
export const PolicyTransportZone: typeof import("./policyTransportZone").PolicyTransportZone = null as any;
utilities.lazyLoad(exports, ["PolicyTransportZone"], () => require("./policyTransportZone"));

export { PolicyUplinkHostSwitchProfileArgs, PolicyUplinkHostSwitchProfileState } from "./policyUplinkHostSwitchProfile";
export type PolicyUplinkHostSwitchProfile = import("./policyUplinkHostSwitchProfile").PolicyUplinkHostSwitchProfile;
export const PolicyUplinkHostSwitchProfile: typeof import("./policyUplinkHostSwitchProfile").PolicyUplinkHostSwitchProfile = null as any;
utilities.lazyLoad(exports, ["PolicyUplinkHostSwitchProfile"], () => require("./policyUplinkHostSwitchProfile"));

export { PolicyUserManagementRoleArgs, PolicyUserManagementRoleState } from "./policyUserManagementRole";
export type PolicyUserManagementRole = import("./policyUserManagementRole").PolicyUserManagementRole;
export const PolicyUserManagementRole: typeof import("./policyUserManagementRole").PolicyUserManagementRole = null as any;
utilities.lazyLoad(exports, ["PolicyUserManagementRole"], () => require("./policyUserManagementRole"));

export { PolicyUserManagementRoleBindingArgs, PolicyUserManagementRoleBindingState } from "./policyUserManagementRoleBinding";
export type PolicyUserManagementRoleBinding = import("./policyUserManagementRoleBinding").PolicyUserManagementRoleBinding;
export const PolicyUserManagementRoleBinding: typeof import("./policyUserManagementRoleBinding").PolicyUserManagementRoleBinding = null as any;
utilities.lazyLoad(exports, ["PolicyUserManagementRoleBinding"], () => require("./policyUserManagementRoleBinding"));

export { PolicyVlanSegmentArgs, PolicyVlanSegmentState } from "./policyVlanSegment";
export type PolicyVlanSegment = import("./policyVlanSegment").PolicyVlanSegment;
export const PolicyVlanSegment: typeof import("./policyVlanSegment").PolicyVlanSegment = null as any;
utilities.lazyLoad(exports, ["PolicyVlanSegment"], () => require("./policyVlanSegment"));

export { PolicyVmTagsArgs, PolicyVmTagsState } from "./policyVmTags";
export type PolicyVmTags = import("./policyVmTags").PolicyVmTags;
export const PolicyVmTags: typeof import("./policyVmTags").PolicyVmTags = null as any;
utilities.lazyLoad(exports, ["PolicyVmTags"], () => require("./policyVmTags"));

export { PolicyVniPoolArgs, PolicyVniPoolState } from "./policyVniPool";
export type PolicyVniPool = import("./policyVniPool").PolicyVniPool;
export const PolicyVniPool: typeof import("./policyVniPool").PolicyVniPool = null as any;
utilities.lazyLoad(exports, ["PolicyVniPool"], () => require("./policyVniPool"));

export { PolicyVtepHaHostSwitchProfileArgs, PolicyVtepHaHostSwitchProfileState } from "./policyVtepHaHostSwitchProfile";
export type PolicyVtepHaHostSwitchProfile = import("./policyVtepHaHostSwitchProfile").PolicyVtepHaHostSwitchProfile;
export const PolicyVtepHaHostSwitchProfile: typeof import("./policyVtepHaHostSwitchProfile").PolicyVtepHaHostSwitchProfile = null as any;
utilities.lazyLoad(exports, ["PolicyVtepHaHostSwitchProfile"], () => require("./policyVtepHaHostSwitchProfile"));

export { PrincipalIdentityArgs, PrincipalIdentityState } from "./principalIdentity";
export type PrincipalIdentity = import("./principalIdentity").PrincipalIdentity;
export const PrincipalIdentity: typeof import("./principalIdentity").PrincipalIdentity = null as any;
utilities.lazyLoad(exports, ["PrincipalIdentity"], () => require("./principalIdentity"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { QosSwitchingProfileArgs, QosSwitchingProfileState } from "./qosSwitchingProfile";
export type QosSwitchingProfile = import("./qosSwitchingProfile").QosSwitchingProfile;
export const QosSwitchingProfile: typeof import("./qosSwitchingProfile").QosSwitchingProfile = null as any;
utilities.lazyLoad(exports, ["QosSwitchingProfile"], () => require("./qosSwitchingProfile"));

export { SpoofguardSwitchingProfileArgs, SpoofguardSwitchingProfileState } from "./spoofguardSwitchingProfile";
export type SpoofguardSwitchingProfile = import("./spoofguardSwitchingProfile").SpoofguardSwitchingProfile;
export const SpoofguardSwitchingProfile: typeof import("./spoofguardSwitchingProfile").SpoofguardSwitchingProfile = null as any;
utilities.lazyLoad(exports, ["SpoofguardSwitchingProfile"], () => require("./spoofguardSwitchingProfile"));

export { StaticRouteArgs, StaticRouteState } from "./staticRoute";
export type StaticRoute = import("./staticRoute").StaticRoute;
export const StaticRoute: typeof import("./staticRoute").StaticRoute = null as any;
utilities.lazyLoad(exports, ["StaticRoute"], () => require("./staticRoute"));

export { SwitchSecuritySwitchingProfileArgs, SwitchSecuritySwitchingProfileState } from "./switchSecuritySwitchingProfile";
export type SwitchSecuritySwitchingProfile = import("./switchSecuritySwitchingProfile").SwitchSecuritySwitchingProfile;
export const SwitchSecuritySwitchingProfile: typeof import("./switchSecuritySwitchingProfile").SwitchSecuritySwitchingProfile = null as any;
utilities.lazyLoad(exports, ["SwitchSecuritySwitchingProfile"], () => require("./switchSecuritySwitchingProfile"));

export { UpgradePrecheckAcknowledgeArgs, UpgradePrecheckAcknowledgeState } from "./upgradePrecheckAcknowledge";
export type UpgradePrecheckAcknowledge = import("./upgradePrecheckAcknowledge").UpgradePrecheckAcknowledge;
export const UpgradePrecheckAcknowledge: typeof import("./upgradePrecheckAcknowledge").UpgradePrecheckAcknowledge = null as any;
utilities.lazyLoad(exports, ["UpgradePrecheckAcknowledge"], () => require("./upgradePrecheckAcknowledge"));

export { UpgradePrepareArgs, UpgradePrepareState } from "./upgradePrepare";
export type UpgradePrepare = import("./upgradePrepare").UpgradePrepare;
export const UpgradePrepare: typeof import("./upgradePrepare").UpgradePrepare = null as any;
utilities.lazyLoad(exports, ["UpgradePrepare"], () => require("./upgradePrepare"));

export { UpgradeRunArgs, UpgradeRunState } from "./upgradeRun";
export type UpgradeRun = import("./upgradeRun").UpgradeRun;
export const UpgradeRun: typeof import("./upgradeRun").UpgradeRun = null as any;
utilities.lazyLoad(exports, ["UpgradeRun"], () => require("./upgradeRun"));

export { VlanLogicalSwitchArgs, VlanLogicalSwitchState } from "./vlanLogicalSwitch";
export type VlanLogicalSwitch = import("./vlanLogicalSwitch").VlanLogicalSwitch;
export const VlanLogicalSwitch: typeof import("./vlanLogicalSwitch").VlanLogicalSwitch = null as any;
utilities.lazyLoad(exports, ["VlanLogicalSwitch"], () => require("./vlanLogicalSwitch"));

export { VmTagsArgs, VmTagsState } from "./vmTags";
export type VmTags = import("./vmTags").VmTags;
export const VmTags: typeof import("./vmTags").VmTags = null as any;
utilities.lazyLoad(exports, ["VmTags"], () => require("./vmTags"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "nsxt:index/algorithmTypeNsService:AlgorithmTypeNsService":
                return new AlgorithmTypeNsService(name, <any>undefined, { urn })
            case "nsxt:index/clusterVirtualIp:ClusterVirtualIp":
                return new ClusterVirtualIp(name, <any>undefined, { urn })
            case "nsxt:index/computeManager:ComputeManager":
                return new ComputeManager(name, <any>undefined, { urn })
            case "nsxt:index/dhcpRelayProfile:DhcpRelayProfile":
                return new DhcpRelayProfile(name, <any>undefined, { urn })
            case "nsxt:index/dhcpRelayService:DhcpRelayService":
                return new DhcpRelayService(name, <any>undefined, { urn })
            case "nsxt:index/dhcpServerIpPool:DhcpServerIpPool":
                return new DhcpServerIpPool(name, <any>undefined, { urn })
            case "nsxt:index/dhcpServerProfile:DhcpServerProfile":
                return new DhcpServerProfile(name, <any>undefined, { urn })
            case "nsxt:index/edgeCluster:EdgeCluster":
                return new EdgeCluster(name, <any>undefined, { urn })
            case "nsxt:index/edgeHighAvailabilityProfile:EdgeHighAvailabilityProfile":
                return new EdgeHighAvailabilityProfile(name, <any>undefined, { urn })
            case "nsxt:index/edgeTransportNode:EdgeTransportNode":
                return new EdgeTransportNode(name, <any>undefined, { urn })
            case "nsxt:index/edgeTransportNodeRtep:EdgeTransportNodeRtep":
                return new EdgeTransportNodeRtep(name, <any>undefined, { urn })
            case "nsxt:index/etherTypeNsService:EtherTypeNsService":
                return new EtherTypeNsService(name, <any>undefined, { urn })
            case "nsxt:index/failureDomain:FailureDomain":
                return new FailureDomain(name, <any>undefined, { urn })
            case "nsxt:index/firewallSection:FirewallSection":
                return new FirewallSection(name, <any>undefined, { urn })
            case "nsxt:index/icmpTypeNsService:IcmpTypeNsService":
                return new IcmpTypeNsService(name, <any>undefined, { urn })
            case "nsxt:index/igmpTypeNsService:IgmpTypeNsService":
                return new IgmpTypeNsService(name, <any>undefined, { urn })
            case "nsxt:index/ipBlock:IpBlock":
                return new IpBlock(name, <any>undefined, { urn })
            case "nsxt:index/ipBlockSubnet:IpBlockSubnet":
                return new IpBlockSubnet(name, <any>undefined, { urn })
            case "nsxt:index/ipDiscoverySwitchingProfile:IpDiscoverySwitchingProfile":
                return new IpDiscoverySwitchingProfile(name, <any>undefined, { urn })
            case "nsxt:index/ipPool:IpPool":
                return new IpPool(name, <any>undefined, { urn })
            case "nsxt:index/ipPoolAllocationIpAddress:IpPoolAllocationIpAddress":
                return new IpPoolAllocationIpAddress(name, <any>undefined, { urn })
            case "nsxt:index/ipProtocolNsService:IpProtocolNsService":
                return new IpProtocolNsService(name, <any>undefined, { urn })
            case "nsxt:index/ipSet:IpSet":
                return new IpSet(name, <any>undefined, { urn })
            case "nsxt:index/l4PortSetNsService:L4PortSetNsService":
                return new L4PortSetNsService(name, <any>undefined, { urn })
            case "nsxt:index/lbClientSslProfile:LbClientSslProfile":
                return new LbClientSslProfile(name, <any>undefined, { urn })
            case "nsxt:index/lbCookiePersistenceProfile:LbCookiePersistenceProfile":
                return new LbCookiePersistenceProfile(name, <any>undefined, { urn })
            case "nsxt:index/lbFastTcpApplicationProfile:LbFastTcpApplicationProfile":
                return new LbFastTcpApplicationProfile(name, <any>undefined, { urn })
            case "nsxt:index/lbFastUdpApplicationProfile:LbFastUdpApplicationProfile":
                return new LbFastUdpApplicationProfile(name, <any>undefined, { urn })
            case "nsxt:index/lbHttpApplicationProfile:LbHttpApplicationProfile":
                return new LbHttpApplicationProfile(name, <any>undefined, { urn })
            case "nsxt:index/lbHttpForwardingRule:LbHttpForwardingRule":
                return new LbHttpForwardingRule(name, <any>undefined, { urn })
            case "nsxt:index/lbHttpMonitor:LbHttpMonitor":
                return new LbHttpMonitor(name, <any>undefined, { urn })
            case "nsxt:index/lbHttpRequestRewriteRule:LbHttpRequestRewriteRule":
                return new LbHttpRequestRewriteRule(name, <any>undefined, { urn })
            case "nsxt:index/lbHttpResponseRewriteRule:LbHttpResponseRewriteRule":
                return new LbHttpResponseRewriteRule(name, <any>undefined, { urn })
            case "nsxt:index/lbHttpVirtualServer:LbHttpVirtualServer":
                return new LbHttpVirtualServer(name, <any>undefined, { urn })
            case "nsxt:index/lbHttpsMonitor:LbHttpsMonitor":
                return new LbHttpsMonitor(name, <any>undefined, { urn })
            case "nsxt:index/lbIcmpMonitor:LbIcmpMonitor":
                return new LbIcmpMonitor(name, <any>undefined, { urn })
            case "nsxt:index/lbPassiveMonitor:LbPassiveMonitor":
                return new LbPassiveMonitor(name, <any>undefined, { urn })
            case "nsxt:index/lbPool:LbPool":
                return new LbPool(name, <any>undefined, { urn })
            case "nsxt:index/lbServerSslProfile:LbServerSslProfile":
                return new LbServerSslProfile(name, <any>undefined, { urn })
            case "nsxt:index/lbService:LbService":
                return new LbService(name, <any>undefined, { urn })
            case "nsxt:index/lbSourceIpPersistenceProfile:LbSourceIpPersistenceProfile":
                return new LbSourceIpPersistenceProfile(name, <any>undefined, { urn })
            case "nsxt:index/lbTcpMonitor:LbTcpMonitor":
                return new LbTcpMonitor(name, <any>undefined, { urn })
            case "nsxt:index/lbTcpVirtualServer:LbTcpVirtualServer":
                return new LbTcpVirtualServer(name, <any>undefined, { urn })
            case "nsxt:index/lbUdpMonitor:LbUdpMonitor":
                return new LbUdpMonitor(name, <any>undefined, { urn })
            case "nsxt:index/lbUdpVirtualServer:LbUdpVirtualServer":
                return new LbUdpVirtualServer(name, <any>undefined, { urn })
            case "nsxt:index/logicalDhcpPort:LogicalDhcpPort":
                return new LogicalDhcpPort(name, <any>undefined, { urn })
            case "nsxt:index/logicalDhcpServer:LogicalDhcpServer":
                return new LogicalDhcpServer(name, <any>undefined, { urn })
            case "nsxt:index/logicalPort:LogicalPort":
                return new LogicalPort(name, <any>undefined, { urn })
            case "nsxt:index/logicalRouterCentralizedServicePort:LogicalRouterCentralizedServicePort":
                return new LogicalRouterCentralizedServicePort(name, <any>undefined, { urn })
            case "nsxt:index/logicalRouterDownlinkPort:LogicalRouterDownlinkPort":
                return new LogicalRouterDownlinkPort(name, <any>undefined, { urn })
            case "nsxt:index/logicalRouterLinkPortOnTier0:LogicalRouterLinkPortOnTier0":
                return new LogicalRouterLinkPortOnTier0(name, <any>undefined, { urn })
            case "nsxt:index/logicalRouterLinkPortOnTier1:LogicalRouterLinkPortOnTier1":
                return new LogicalRouterLinkPortOnTier1(name, <any>undefined, { urn })
            case "nsxt:index/logicalSwitch:LogicalSwitch":
                return new LogicalSwitch(name, <any>undefined, { urn })
            case "nsxt:index/logicalTier0Router:LogicalTier0Router":
                return new LogicalTier0Router(name, <any>undefined, { urn })
            case "nsxt:index/logicalTier1Router:LogicalTier1Router":
                return new LogicalTier1Router(name, <any>undefined, { urn })
            case "nsxt:index/macManagementSwitchingProfile:MacManagementSwitchingProfile":
                return new MacManagementSwitchingProfile(name, <any>undefined, { urn })
            case "nsxt:index/managerCluster:ManagerCluster":
                return new ManagerCluster(name, <any>undefined, { urn })
            case "nsxt:index/natRule:NatRule":
                return new NatRule(name, <any>undefined, { urn })
            case "nsxt:index/nodeUser:NodeUser":
                return new NodeUser(name, <any>undefined, { urn })
            case "nsxt:index/nsGroup:NsGroup":
                return new NsGroup(name, <any>undefined, { urn })
            case "nsxt:index/nsServiceGroup:NsServiceGroup":
                return new NsServiceGroup(name, <any>undefined, { urn })
            case "nsxt:index/policyBgpConfig:PolicyBgpConfig":
                return new PolicyBgpConfig(name, <any>undefined, { urn })
            case "nsxt:index/policyBgpNeighbor:PolicyBgpNeighbor":
                return new PolicyBgpNeighbor(name, <any>undefined, { urn })
            case "nsxt:index/policyComputeSubCluster:PolicyComputeSubCluster":
                return new PolicyComputeSubCluster(name, <any>undefined, { urn })
            case "nsxt:index/policyContextProfile:PolicyContextProfile":
                return new PolicyContextProfile(name, <any>undefined, { urn })
            case "nsxt:index/policyContextProfileCustomAttribute:PolicyContextProfileCustomAttribute":
                return new PolicyContextProfileCustomAttribute(name, <any>undefined, { urn })
            case "nsxt:index/policyDhcpRelay:PolicyDhcpRelay":
                return new PolicyDhcpRelay(name, <any>undefined, { urn })
            case "nsxt:index/policyDhcpServer:PolicyDhcpServer":
                return new PolicyDhcpServer(name, <any>undefined, { urn })
            case "nsxt:index/policyDhcpV4StaticBinding:PolicyDhcpV4StaticBinding":
                return new PolicyDhcpV4StaticBinding(name, <any>undefined, { urn })
            case "nsxt:index/policyDhcpV6StaticBinding:PolicyDhcpV6StaticBinding":
                return new PolicyDhcpV6StaticBinding(name, <any>undefined, { urn })
            case "nsxt:index/policyDistributedFloodProtectionProfile:PolicyDistributedFloodProtectionProfile":
                return new PolicyDistributedFloodProtectionProfile(name, <any>undefined, { urn })
            case "nsxt:index/policyDistributedFloodProtectionProfileBinding:PolicyDistributedFloodProtectionProfileBinding":
                return new PolicyDistributedFloodProtectionProfileBinding(name, <any>undefined, { urn })
            case "nsxt:index/policyDnsForwarderZone:PolicyDnsForwarderZone":
                return new PolicyDnsForwarderZone(name, <any>undefined, { urn })
            case "nsxt:index/policyDomain:PolicyDomain":
                return new PolicyDomain(name, <any>undefined, { urn })
            case "nsxt:index/policyEvpnConfig:PolicyEvpnConfig":
                return new PolicyEvpnConfig(name, <any>undefined, { urn })
            case "nsxt:index/policyEvpnTenant:PolicyEvpnTenant":
                return new PolicyEvpnTenant(name, <any>undefined, { urn })
            case "nsxt:index/policyEvpnTunnelEndpoint:PolicyEvpnTunnelEndpoint":
                return new PolicyEvpnTunnelEndpoint(name, <any>undefined, { urn })
            case "nsxt:index/policyFirewallExcludeListMember:PolicyFirewallExcludeListMember":
                return new PolicyFirewallExcludeListMember(name, <any>undefined, { urn })
            case "nsxt:index/policyFixedSegment:PolicyFixedSegment":
                return new PolicyFixedSegment(name, <any>undefined, { urn })
            case "nsxt:index/policyGatewayCommunityList:PolicyGatewayCommunityList":
                return new PolicyGatewayCommunityList(name, <any>undefined, { urn })
            case "nsxt:index/policyGatewayDnsForwarder:PolicyGatewayDnsForwarder":
                return new PolicyGatewayDnsForwarder(name, <any>undefined, { urn })
            case "nsxt:index/policyGatewayFloodProtectionProfile:PolicyGatewayFloodProtectionProfile":
                return new PolicyGatewayFloodProtectionProfile(name, <any>undefined, { urn })
            case "nsxt:index/policyGatewayFloodProtectionProfileBinding:PolicyGatewayFloodProtectionProfileBinding":
                return new PolicyGatewayFloodProtectionProfileBinding(name, <any>undefined, { urn })
            case "nsxt:index/policyGatewayPolicy:PolicyGatewayPolicy":
                return new PolicyGatewayPolicy(name, <any>undefined, { urn })
            case "nsxt:index/policyGatewayPrefixList:PolicyGatewayPrefixList":
                return new PolicyGatewayPrefixList(name, <any>undefined, { urn })
            case "nsxt:index/policyGatewayQosProfile:PolicyGatewayQosProfile":
                return new PolicyGatewayQosProfile(name, <any>undefined, { urn })
            case "nsxt:index/policyGatewayRedistributionConfig:PolicyGatewayRedistributionConfig":
                return new PolicyGatewayRedistributionConfig(name, <any>undefined, { urn })
            case "nsxt:index/policyGatewayRouteMap:PolicyGatewayRouteMap":
                return new PolicyGatewayRouteMap(name, <any>undefined, { urn })
            case "nsxt:index/policyGlobalManager:PolicyGlobalManager":
                return new PolicyGlobalManager(name, <any>undefined, { urn })
            case "nsxt:index/policyGroup:PolicyGroup":
                return new PolicyGroup(name, <any>undefined, { urn })
            case "nsxt:index/policyHostTransportNode:PolicyHostTransportNode":
                return new PolicyHostTransportNode(name, <any>undefined, { urn })
            case "nsxt:index/policyHostTransportNodeCollection:PolicyHostTransportNodeCollection":
                return new PolicyHostTransportNodeCollection(name, <any>undefined, { urn })
            case "nsxt:index/policyHostTransportNodeProfile:PolicyHostTransportNodeProfile":
                return new PolicyHostTransportNodeProfile(name, <any>undefined, { urn })
            case "nsxt:index/policyIntrusionServicePolicy:PolicyIntrusionServicePolicy":
                return new PolicyIntrusionServicePolicy(name, <any>undefined, { urn })
            case "nsxt:index/policyIntrusionServiceProfile:PolicyIntrusionServiceProfile":
                return new PolicyIntrusionServiceProfile(name, <any>undefined, { urn })
            case "nsxt:index/policyIpAddressAllocation:PolicyIpAddressAllocation":
                return new PolicyIpAddressAllocation(name, <any>undefined, { urn })
            case "nsxt:index/policyIpBlock:PolicyIpBlock":
                return new PolicyIpBlock(name, <any>undefined, { urn })
            case "nsxt:index/policyIpDiscoveryProfile:PolicyIpDiscoveryProfile":
                return new PolicyIpDiscoveryProfile(name, <any>undefined, { urn })
            case "nsxt:index/policyIpPool:PolicyIpPool":
                return new PolicyIpPool(name, <any>undefined, { urn })
            case "nsxt:index/policyIpPoolBlockSubnet:PolicyIpPoolBlockSubnet":
                return new PolicyIpPoolBlockSubnet(name, <any>undefined, { urn })
            case "nsxt:index/policyIpPoolStaticSubnet:PolicyIpPoolStaticSubnet":
                return new PolicyIpPoolStaticSubnet(name, <any>undefined, { urn })
            case "nsxt:index/policyIpsecVpnDpdProfile:PolicyIpsecVpnDpdProfile":
                return new PolicyIpsecVpnDpdProfile(name, <any>undefined, { urn })
            case "nsxt:index/policyIpsecVpnIkeProfile:PolicyIpsecVpnIkeProfile":
                return new PolicyIpsecVpnIkeProfile(name, <any>undefined, { urn })
            case "nsxt:index/policyIpsecVpnLocalEndpoint:PolicyIpsecVpnLocalEndpoint":
                return new PolicyIpsecVpnLocalEndpoint(name, <any>undefined, { urn })
            case "nsxt:index/policyIpsecVpnService:PolicyIpsecVpnService":
                return new PolicyIpsecVpnService(name, <any>undefined, { urn })
            case "nsxt:index/policyIpsecVpnSession:PolicyIpsecVpnSession":
                return new PolicyIpsecVpnSession(name, <any>undefined, { urn })
            case "nsxt:index/policyIpsecVpnTunnelProfile:PolicyIpsecVpnTunnelProfile":
                return new PolicyIpsecVpnTunnelProfile(name, <any>undefined, { urn })
            case "nsxt:index/policyL2VpnService:PolicyL2VpnService":
                return new PolicyL2VpnService(name, <any>undefined, { urn })
            case "nsxt:index/policyL2VpnSession:PolicyL2VpnSession":
                return new PolicyL2VpnSession(name, <any>undefined, { urn })
            case "nsxt:index/policyLbClientSslProfile:PolicyLbClientSslProfile":
                return new PolicyLbClientSslProfile(name, <any>undefined, { urn })
            case "nsxt:index/policyLbHttpApplicationProfile:PolicyLbHttpApplicationProfile":
                return new PolicyLbHttpApplicationProfile(name, <any>undefined, { urn })
            case "nsxt:index/policyLbHttpMonitorProfile:PolicyLbHttpMonitorProfile":
                return new PolicyLbHttpMonitorProfile(name, <any>undefined, { urn })
            case "nsxt:index/policyLbHttpsMonitorProfile:PolicyLbHttpsMonitorProfile":
                return new PolicyLbHttpsMonitorProfile(name, <any>undefined, { urn })
            case "nsxt:index/policyLbIcmpMonitorProfile:PolicyLbIcmpMonitorProfile":
                return new PolicyLbIcmpMonitorProfile(name, <any>undefined, { urn })
            case "nsxt:index/policyLbPassiveMonitorProfile:PolicyLbPassiveMonitorProfile":
                return new PolicyLbPassiveMonitorProfile(name, <any>undefined, { urn })
            case "nsxt:index/policyLbPool:PolicyLbPool":
                return new PolicyLbPool(name, <any>undefined, { urn })
            case "nsxt:index/policyLbService:PolicyLbService":
                return new PolicyLbService(name, <any>undefined, { urn })
            case "nsxt:index/policyLbTcpMonitorProfile:PolicyLbTcpMonitorProfile":
                return new PolicyLbTcpMonitorProfile(name, <any>undefined, { urn })
            case "nsxt:index/policyLbUdpMonitorProfile:PolicyLbUdpMonitorProfile":
                return new PolicyLbUdpMonitorProfile(name, <any>undefined, { urn })
            case "nsxt:index/policyLbVirtualServer:PolicyLbVirtualServer":
                return new PolicyLbVirtualServer(name, <any>undefined, { urn })
            case "nsxt:index/policyLdapIdentitySource:PolicyLdapIdentitySource":
                return new PolicyLdapIdentitySource(name, <any>undefined, { urn })
            case "nsxt:index/policyMacDiscoveryProfile:PolicyMacDiscoveryProfile":
                return new PolicyMacDiscoveryProfile(name, <any>undefined, { urn })
            case "nsxt:index/policyMetadataProxy:PolicyMetadataProxy":
                return new PolicyMetadataProxy(name, <any>undefined, { urn })
            case "nsxt:index/policyNatRule:PolicyNatRule":
                return new PolicyNatRule(name, <any>undefined, { urn })
            case "nsxt:index/policyOspfArea:PolicyOspfArea":
                return new PolicyOspfArea(name, <any>undefined, { urn })
            case "nsxt:index/policyOspfConfig:PolicyOspfConfig":
                return new PolicyOspfConfig(name, <any>undefined, { urn })
            case "nsxt:index/policyParentSecurityPolicy:PolicyParentSecurityPolicy":
                return new PolicyParentSecurityPolicy(name, <any>undefined, { urn })
            case "nsxt:index/policyPredefinedGatewayPolicy:PolicyPredefinedGatewayPolicy":
                return new PolicyPredefinedGatewayPolicy(name, <any>undefined, { urn })
            case "nsxt:index/policyPredefinedSecurityPolicy:PolicyPredefinedSecurityPolicy":
                return new PolicyPredefinedSecurityPolicy(name, <any>undefined, { urn })
            case "nsxt:index/policyProject:PolicyProject":
                return new PolicyProject(name, <any>undefined, { urn })
            case "nsxt:index/policyQosProfile:PolicyQosProfile":
                return new PolicyQosProfile(name, <any>undefined, { urn })
            case "nsxt:index/policySecurityPolicy:PolicySecurityPolicy":
                return new PolicySecurityPolicy(name, <any>undefined, { urn })
            case "nsxt:index/policySecurityPolicyRule:PolicySecurityPolicyRule":
                return new PolicySecurityPolicyRule(name, <any>undefined, { urn })
            case "nsxt:index/policySegment:PolicySegment":
                return new PolicySegment(name, <any>undefined, { urn })
            case "nsxt:index/policySegmentSecurityProfile:PolicySegmentSecurityProfile":
                return new PolicySegmentSecurityProfile(name, <any>undefined, { urn })
            case "nsxt:index/policyService:PolicyService":
                return new PolicyService(name, <any>undefined, { urn })
            case "nsxt:index/policySite:PolicySite":
                return new PolicySite(name, <any>undefined, { urn })
            case "nsxt:index/policySpoofGuardProfile:PolicySpoofGuardProfile":
                return new PolicySpoofGuardProfile(name, <any>undefined, { urn })
            case "nsxt:index/policyStaticRoute:PolicyStaticRoute":
                return new PolicyStaticRoute(name, <any>undefined, { urn })
            case "nsxt:index/policyStaticRouteBfdPeer:PolicyStaticRouteBfdPeer":
                return new PolicyStaticRouteBfdPeer(name, <any>undefined, { urn })
            case "nsxt:index/policyTier0Gateway:PolicyTier0Gateway":
                return new PolicyTier0Gateway(name, <any>undefined, { urn })
            case "nsxt:index/policyTier0GatewayGreTunnel:PolicyTier0GatewayGreTunnel":
                return new PolicyTier0GatewayGreTunnel(name, <any>undefined, { urn })
            case "nsxt:index/policyTier0GatewayHaVipConfig:PolicyTier0GatewayHaVipConfig":
                return new PolicyTier0GatewayHaVipConfig(name, <any>undefined, { urn })
            case "nsxt:index/policyTier0GatewayInterface:PolicyTier0GatewayInterface":
                return new PolicyTier0GatewayInterface(name, <any>undefined, { urn })
            case "nsxt:index/policyTier0InterVrfRouting:PolicyTier0InterVrfRouting":
                return new PolicyTier0InterVrfRouting(name, <any>undefined, { urn })
            case "nsxt:index/policyTier1Gateway:PolicyTier1Gateway":
                return new PolicyTier1Gateway(name, <any>undefined, { urn })
            case "nsxt:index/policyTier1GatewayInterface:PolicyTier1GatewayInterface":
                return new PolicyTier1GatewayInterface(name, <any>undefined, { urn })
            case "nsxt:index/policyTransportZone:PolicyTransportZone":
                return new PolicyTransportZone(name, <any>undefined, { urn })
            case "nsxt:index/policyUplinkHostSwitchProfile:PolicyUplinkHostSwitchProfile":
                return new PolicyUplinkHostSwitchProfile(name, <any>undefined, { urn })
            case "nsxt:index/policyUserManagementRole:PolicyUserManagementRole":
                return new PolicyUserManagementRole(name, <any>undefined, { urn })
            case "nsxt:index/policyUserManagementRoleBinding:PolicyUserManagementRoleBinding":
                return new PolicyUserManagementRoleBinding(name, <any>undefined, { urn })
            case "nsxt:index/policyVlanSegment:PolicyVlanSegment":
                return new PolicyVlanSegment(name, <any>undefined, { urn })
            case "nsxt:index/policyVmTags:PolicyVmTags":
                return new PolicyVmTags(name, <any>undefined, { urn })
            case "nsxt:index/policyVniPool:PolicyVniPool":
                return new PolicyVniPool(name, <any>undefined, { urn })
            case "nsxt:index/policyVtepHaHostSwitchProfile:PolicyVtepHaHostSwitchProfile":
                return new PolicyVtepHaHostSwitchProfile(name, <any>undefined, { urn })
            case "nsxt:index/principalIdentity:PrincipalIdentity":
                return new PrincipalIdentity(name, <any>undefined, { urn })
            case "nsxt:index/qosSwitchingProfile:QosSwitchingProfile":
                return new QosSwitchingProfile(name, <any>undefined, { urn })
            case "nsxt:index/spoofguardSwitchingProfile:SpoofguardSwitchingProfile":
                return new SpoofguardSwitchingProfile(name, <any>undefined, { urn })
            case "nsxt:index/staticRoute:StaticRoute":
                return new StaticRoute(name, <any>undefined, { urn })
            case "nsxt:index/switchSecuritySwitchingProfile:SwitchSecuritySwitchingProfile":
                return new SwitchSecuritySwitchingProfile(name, <any>undefined, { urn })
            case "nsxt:index/upgradePrecheckAcknowledge:UpgradePrecheckAcknowledge":
                return new UpgradePrecheckAcknowledge(name, <any>undefined, { urn })
            case "nsxt:index/upgradePrepare:UpgradePrepare":
                return new UpgradePrepare(name, <any>undefined, { urn })
            case "nsxt:index/upgradeRun:UpgradeRun":
                return new UpgradeRun(name, <any>undefined, { urn })
            case "nsxt:index/vlanLogicalSwitch:VlanLogicalSwitch":
                return new VlanLogicalSwitch(name, <any>undefined, { urn })
            case "nsxt:index/vmTags:VmTags":
                return new VmTags(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("nsxt", "index/algorithmTypeNsService", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/clusterVirtualIp", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/computeManager", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/dhcpRelayProfile", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/dhcpRelayService", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/dhcpServerIpPool", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/dhcpServerProfile", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/edgeCluster", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/edgeHighAvailabilityProfile", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/edgeTransportNode", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/edgeTransportNodeRtep", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/etherTypeNsService", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/failureDomain", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/firewallSection", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/icmpTypeNsService", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/igmpTypeNsService", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/ipBlock", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/ipBlockSubnet", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/ipDiscoverySwitchingProfile", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/ipPool", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/ipPoolAllocationIpAddress", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/ipProtocolNsService", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/ipSet", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/l4PortSetNsService", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/lbClientSslProfile", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/lbCookiePersistenceProfile", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/lbFastTcpApplicationProfile", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/lbFastUdpApplicationProfile", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/lbHttpApplicationProfile", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/lbHttpForwardingRule", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/lbHttpMonitor", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/lbHttpRequestRewriteRule", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/lbHttpResponseRewriteRule", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/lbHttpVirtualServer", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/lbHttpsMonitor", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/lbIcmpMonitor", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/lbPassiveMonitor", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/lbPool", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/lbServerSslProfile", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/lbService", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/lbSourceIpPersistenceProfile", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/lbTcpMonitor", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/lbTcpVirtualServer", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/lbUdpMonitor", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/lbUdpVirtualServer", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/logicalDhcpPort", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/logicalDhcpServer", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/logicalPort", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/logicalRouterCentralizedServicePort", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/logicalRouterDownlinkPort", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/logicalRouterLinkPortOnTier0", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/logicalRouterLinkPortOnTier1", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/logicalSwitch", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/logicalTier0Router", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/logicalTier1Router", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/macManagementSwitchingProfile", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/managerCluster", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/natRule", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/nodeUser", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/nsGroup", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/nsServiceGroup", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/policyBgpConfig", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/policyBgpNeighbor", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/policyComputeSubCluster", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/policyContextProfile", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/policyContextProfileCustomAttribute", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/policyDhcpRelay", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/policyDhcpServer", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/policyDhcpV4StaticBinding", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/policyDhcpV6StaticBinding", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/policyDistributedFloodProtectionProfile", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/policyDistributedFloodProtectionProfileBinding", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/policyDnsForwarderZone", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/policyDomain", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/policyEvpnConfig", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/policyEvpnTenant", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/policyEvpnTunnelEndpoint", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/policyFirewallExcludeListMember", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/policyFixedSegment", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/policyGatewayCommunityList", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/policyGatewayDnsForwarder", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/policyGatewayFloodProtectionProfile", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/policyGatewayFloodProtectionProfileBinding", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/policyGatewayPolicy", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/policyGatewayPrefixList", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/policyGatewayQosProfile", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/policyGatewayRedistributionConfig", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/policyGatewayRouteMap", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/policyGlobalManager", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/policyGroup", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/policyHostTransportNode", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/policyHostTransportNodeCollection", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/policyHostTransportNodeProfile", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/policyIntrusionServicePolicy", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/policyIntrusionServiceProfile", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/policyIpAddressAllocation", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/policyIpBlock", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/policyIpDiscoveryProfile", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/policyIpPool", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/policyIpPoolBlockSubnet", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/policyIpPoolStaticSubnet", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/policyIpsecVpnDpdProfile", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/policyIpsecVpnIkeProfile", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/policyIpsecVpnLocalEndpoint", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/policyIpsecVpnService", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/policyIpsecVpnSession", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/policyIpsecVpnTunnelProfile", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/policyL2VpnService", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/policyL2VpnSession", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/policyLbClientSslProfile", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/policyLbHttpApplicationProfile", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/policyLbHttpMonitorProfile", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/policyLbHttpsMonitorProfile", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/policyLbIcmpMonitorProfile", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/policyLbPassiveMonitorProfile", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/policyLbPool", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/policyLbService", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/policyLbTcpMonitorProfile", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/policyLbUdpMonitorProfile", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/policyLbVirtualServer", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/policyLdapIdentitySource", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/policyMacDiscoveryProfile", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/policyMetadataProxy", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/policyNatRule", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/policyOspfArea", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/policyOspfConfig", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/policyParentSecurityPolicy", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/policyPredefinedGatewayPolicy", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/policyPredefinedSecurityPolicy", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/policyProject", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/policyQosProfile", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/policySecurityPolicy", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/policySecurityPolicyRule", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/policySegment", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/policySegmentSecurityProfile", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/policyService", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/policySite", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/policySpoofGuardProfile", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/policyStaticRoute", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/policyStaticRouteBfdPeer", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/policyTier0Gateway", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/policyTier0GatewayGreTunnel", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/policyTier0GatewayHaVipConfig", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/policyTier0GatewayInterface", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/policyTier0InterVrfRouting", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/policyTier1Gateway", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/policyTier1GatewayInterface", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/policyTransportZone", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/policyUplinkHostSwitchProfile", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/policyUserManagementRole", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/policyUserManagementRoleBinding", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/policyVlanSegment", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/policyVmTags", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/policyVniPool", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/policyVtepHaHostSwitchProfile", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/principalIdentity", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/qosSwitchingProfile", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/spoofguardSwitchingProfile", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/staticRoute", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/switchSecuritySwitchingProfile", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/upgradePrecheckAcknowledge", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/upgradePrepare", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/upgradeRun", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/vlanLogicalSwitch", _module)
pulumi.runtime.registerResourceModule("nsxt", "index/vmTags", _module)
pulumi.runtime.registerResourcePackage("nsxt", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:nsxt") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
