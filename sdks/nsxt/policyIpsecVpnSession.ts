// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class PolicyIpsecVpnSession extends pulumi.CustomResource {
    /**
     * Get an existing PolicyIpsecVpnSession resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PolicyIpsecVpnSessionState, opts?: pulumi.CustomResourceOptions): PolicyIpsecVpnSession {
        return new PolicyIpsecVpnSession(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nsxt:index/policyIpsecVpnSession:PolicyIpsecVpnSession';

    /**
     * Returns true if the given object is an instance of PolicyIpsecVpnSession.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PolicyIpsecVpnSession {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PolicyIpsecVpnSession.__pulumiType;
    }

    /**
     * Peer authentication mode. PSK - In this mode a secret key shared between local and peer sites is to be used for
     * authentication. The secret key can be a string with a maximum length of 128 characters. CERTIFICATE - In this mode a
     * certificate defined at the global level is to be used for authentication.
     */
    public readonly authenticationMode!: pulumi.Output<string | undefined>;
    /**
     * Compliance suite.
     */
    public readonly complianceSuite!: pulumi.Output<string | undefined>;
    /**
     * Connection initiation mode used by local endpoint to establish ike connection with peer site. INITIATOR - In this mode
     * local endpoint initiates tunnel setup and will also respond to incoming tunnel setup requests from peer gateway.
     * RESPOND_ONLY - In this mode, local endpoint shall only respond to incoming tunnel setup requests. It shall not initiate
     * the tunnel setup. ON_DEMAND - In this mode local endpoint will initiate tunnel creation once first packet matching the
     * policy rule is received and will also respond to incoming initiation request.
     */
    public readonly connectionInitiationMode!: pulumi.Output<string | undefined>;
    /**
     * Description for this resource
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The traffic direction apply to the MSS clamping
     */
    public readonly direction!: pulumi.Output<string | undefined>;
    /**
     * Display name for this resource
     */
    public readonly displayName!: pulumi.Output<string>;
    /**
     * Policy path referencing dpd profile.
     */
    public readonly dpdProfilePath!: pulumi.Output<string>;
    /**
     * Enable/Disable IPSec VPN session.
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * Policy path referencing Ike profile.
     */
    public readonly ikeProfilePath!: pulumi.Output<string>;
    /**
     * IP Tunnel interface (commonly referred as VTI) ip addresses.
     */
    public readonly ipAddresses!: pulumi.Output<string[] | undefined>;
    /**
     * Policy path referencing Local endpoint.
     */
    public readonly localEndpointPath!: pulumi.Output<string>;
    /**
     * Maximum amount of data the host will accept in a Tcp segment.
     */
    public readonly maxSegmentSize!: pulumi.Output<number>;
    /**
     * NSX ID for this resource
     */
    public readonly nsxId!: pulumi.Output<string>;
    /**
     * Policy path for this resource
     */
    public /*out*/ readonly path!: pulumi.Output<string>;
    /**
     * Public IPV4 address of the remote device terminating the VPN connection.
     */
    public readonly peerAddress!: pulumi.Output<string>;
    /**
     * Peer ID to uniquely identify the peer site. The peer ID is the public IP address of the remote device terminating the
     * VPN tunnel. When NAT is configured for the peer, enter the private IP address of the peer.
     */
    public readonly peerId!: pulumi.Output<string>;
    /**
     * Subnet Prefix Length.
     */
    public readonly prefixLength!: pulumi.Output<number | undefined>;
    /**
     * IPSec Pre-shared key. Maximum length of this field is 128 characters.
     */
    public readonly psk!: pulumi.Output<string | undefined>;
    /**
     * The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's
     * changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET
     * operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
     */
    public /*out*/ readonly revision!: pulumi.Output<number>;
    /**
     * For policy-based IPsec VPNs, a security policy specifies as its action the VPN tunnel to be used for transit traffic
     * that meets the policy match criteria
     */
    public readonly rules!: pulumi.Output<outputs.PolicyIpsecVpnSessionRule[] | undefined>;
    /**
     * Policy path for IPSec VPN service
     */
    public readonly servicePath!: pulumi.Output<string>;
    /**
     * Set of opaque identifiers meaningful to the user
     */
    public readonly tags!: pulumi.Output<outputs.PolicyIpsecVpnSessionTag[] | undefined>;
    /**
     * Policy path referencing tunnel profile.
     */
    public readonly tunnelProfilePath!: pulumi.Output<string>;
    /**
     * A Policy Based VPN requires to define protect rules that match local and peer subnets. IPSec security associations is
     * negotiated for each pair of local and peer subnet. A Route Based VPN is more flexible, more powerful and recommended
     * over policy based VPN. IP Tunnel port is created and all traffic routed via tunnel port is protected. Routes can be
     * configured statically or can be learned through BGP. A route based VPN is must for establishing redundant VPN session to
     * remote site.
     */
    public readonly vpnType!: pulumi.Output<string>;

    /**
     * Create a PolicyIpsecVpnSession resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PolicyIpsecVpnSessionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PolicyIpsecVpnSessionArgs | PolicyIpsecVpnSessionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PolicyIpsecVpnSessionState | undefined;
            resourceInputs["authenticationMode"] = state ? state.authenticationMode : undefined;
            resourceInputs["complianceSuite"] = state ? state.complianceSuite : undefined;
            resourceInputs["connectionInitiationMode"] = state ? state.connectionInitiationMode : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["direction"] = state ? state.direction : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["dpdProfilePath"] = state ? state.dpdProfilePath : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["ikeProfilePath"] = state ? state.ikeProfilePath : undefined;
            resourceInputs["ipAddresses"] = state ? state.ipAddresses : undefined;
            resourceInputs["localEndpointPath"] = state ? state.localEndpointPath : undefined;
            resourceInputs["maxSegmentSize"] = state ? state.maxSegmentSize : undefined;
            resourceInputs["nsxId"] = state ? state.nsxId : undefined;
            resourceInputs["path"] = state ? state.path : undefined;
            resourceInputs["peerAddress"] = state ? state.peerAddress : undefined;
            resourceInputs["peerId"] = state ? state.peerId : undefined;
            resourceInputs["prefixLength"] = state ? state.prefixLength : undefined;
            resourceInputs["psk"] = state ? state.psk : undefined;
            resourceInputs["revision"] = state ? state.revision : undefined;
            resourceInputs["rules"] = state ? state.rules : undefined;
            resourceInputs["servicePath"] = state ? state.servicePath : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tunnelProfilePath"] = state ? state.tunnelProfilePath : undefined;
            resourceInputs["vpnType"] = state ? state.vpnType : undefined;
        } else {
            const args = argsOrState as PolicyIpsecVpnSessionArgs | undefined;
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if ((!args || args.localEndpointPath === undefined) && !opts.urn) {
                throw new Error("Missing required property 'localEndpointPath'");
            }
            if ((!args || args.peerAddress === undefined) && !opts.urn) {
                throw new Error("Missing required property 'peerAddress'");
            }
            if ((!args || args.peerId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'peerId'");
            }
            if ((!args || args.servicePath === undefined) && !opts.urn) {
                throw new Error("Missing required property 'servicePath'");
            }
            if ((!args || args.vpnType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpnType'");
            }
            resourceInputs["authenticationMode"] = args ? args.authenticationMode : undefined;
            resourceInputs["complianceSuite"] = args ? args.complianceSuite : undefined;
            resourceInputs["connectionInitiationMode"] = args ? args.connectionInitiationMode : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["direction"] = args ? args.direction : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["dpdProfilePath"] = args ? args.dpdProfilePath : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["ikeProfilePath"] = args ? args.ikeProfilePath : undefined;
            resourceInputs["ipAddresses"] = args ? args.ipAddresses : undefined;
            resourceInputs["localEndpointPath"] = args ? args.localEndpointPath : undefined;
            resourceInputs["maxSegmentSize"] = args ? args.maxSegmentSize : undefined;
            resourceInputs["nsxId"] = args ? args.nsxId : undefined;
            resourceInputs["peerAddress"] = args ? args.peerAddress : undefined;
            resourceInputs["peerId"] = args ? args.peerId : undefined;
            resourceInputs["prefixLength"] = args ? args.prefixLength : undefined;
            resourceInputs["psk"] = args?.psk ? pulumi.secret(args.psk) : undefined;
            resourceInputs["rules"] = args ? args.rules : undefined;
            resourceInputs["servicePath"] = args ? args.servicePath : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tunnelProfilePath"] = args ? args.tunnelProfilePath : undefined;
            resourceInputs["vpnType"] = args ? args.vpnType : undefined;
            resourceInputs["path"] = undefined /*out*/;
            resourceInputs["revision"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["psk"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(PolicyIpsecVpnSession.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering PolicyIpsecVpnSession resources.
 */
export interface PolicyIpsecVpnSessionState {
    /**
     * Peer authentication mode. PSK - In this mode a secret key shared between local and peer sites is to be used for
     * authentication. The secret key can be a string with a maximum length of 128 characters. CERTIFICATE - In this mode a
     * certificate defined at the global level is to be used for authentication.
     */
    authenticationMode?: pulumi.Input<string>;
    /**
     * Compliance suite.
     */
    complianceSuite?: pulumi.Input<string>;
    /**
     * Connection initiation mode used by local endpoint to establish ike connection with peer site. INITIATOR - In this mode
     * local endpoint initiates tunnel setup and will also respond to incoming tunnel setup requests from peer gateway.
     * RESPOND_ONLY - In this mode, local endpoint shall only respond to incoming tunnel setup requests. It shall not initiate
     * the tunnel setup. ON_DEMAND - In this mode local endpoint will initiate tunnel creation once first packet matching the
     * policy rule is received and will also respond to incoming initiation request.
     */
    connectionInitiationMode?: pulumi.Input<string>;
    /**
     * Description for this resource
     */
    description?: pulumi.Input<string>;
    /**
     * The traffic direction apply to the MSS clamping
     */
    direction?: pulumi.Input<string>;
    /**
     * Display name for this resource
     */
    displayName?: pulumi.Input<string>;
    /**
     * Policy path referencing dpd profile.
     */
    dpdProfilePath?: pulumi.Input<string>;
    /**
     * Enable/Disable IPSec VPN session.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Policy path referencing Ike profile.
     */
    ikeProfilePath?: pulumi.Input<string>;
    /**
     * IP Tunnel interface (commonly referred as VTI) ip addresses.
     */
    ipAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Policy path referencing Local endpoint.
     */
    localEndpointPath?: pulumi.Input<string>;
    /**
     * Maximum amount of data the host will accept in a Tcp segment.
     */
    maxSegmentSize?: pulumi.Input<number>;
    /**
     * NSX ID for this resource
     */
    nsxId?: pulumi.Input<string>;
    /**
     * Policy path for this resource
     */
    path?: pulumi.Input<string>;
    /**
     * Public IPV4 address of the remote device terminating the VPN connection.
     */
    peerAddress?: pulumi.Input<string>;
    /**
     * Peer ID to uniquely identify the peer site. The peer ID is the public IP address of the remote device terminating the
     * VPN tunnel. When NAT is configured for the peer, enter the private IP address of the peer.
     */
    peerId?: pulumi.Input<string>;
    /**
     * Subnet Prefix Length.
     */
    prefixLength?: pulumi.Input<number>;
    /**
     * IPSec Pre-shared key. Maximum length of this field is 128 characters.
     */
    psk?: pulumi.Input<string>;
    /**
     * The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's
     * changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET
     * operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
     */
    revision?: pulumi.Input<number>;
    /**
     * For policy-based IPsec VPNs, a security policy specifies as its action the VPN tunnel to be used for transit traffic
     * that meets the policy match criteria
     */
    rules?: pulumi.Input<pulumi.Input<inputs.PolicyIpsecVpnSessionRule>[]>;
    /**
     * Policy path for IPSec VPN service
     */
    servicePath?: pulumi.Input<string>;
    /**
     * Set of opaque identifiers meaningful to the user
     */
    tags?: pulumi.Input<pulumi.Input<inputs.PolicyIpsecVpnSessionTag>[]>;
    /**
     * Policy path referencing tunnel profile.
     */
    tunnelProfilePath?: pulumi.Input<string>;
    /**
     * A Policy Based VPN requires to define protect rules that match local and peer subnets. IPSec security associations is
     * negotiated for each pair of local and peer subnet. A Route Based VPN is more flexible, more powerful and recommended
     * over policy based VPN. IP Tunnel port is created and all traffic routed via tunnel port is protected. Routes can be
     * configured statically or can be learned through BGP. A route based VPN is must for establishing redundant VPN session to
     * remote site.
     */
    vpnType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a PolicyIpsecVpnSession resource.
 */
export interface PolicyIpsecVpnSessionArgs {
    /**
     * Peer authentication mode. PSK - In this mode a secret key shared between local and peer sites is to be used for
     * authentication. The secret key can be a string with a maximum length of 128 characters. CERTIFICATE - In this mode a
     * certificate defined at the global level is to be used for authentication.
     */
    authenticationMode?: pulumi.Input<string>;
    /**
     * Compliance suite.
     */
    complianceSuite?: pulumi.Input<string>;
    /**
     * Connection initiation mode used by local endpoint to establish ike connection with peer site. INITIATOR - In this mode
     * local endpoint initiates tunnel setup and will also respond to incoming tunnel setup requests from peer gateway.
     * RESPOND_ONLY - In this mode, local endpoint shall only respond to incoming tunnel setup requests. It shall not initiate
     * the tunnel setup. ON_DEMAND - In this mode local endpoint will initiate tunnel creation once first packet matching the
     * policy rule is received and will also respond to incoming initiation request.
     */
    connectionInitiationMode?: pulumi.Input<string>;
    /**
     * Description for this resource
     */
    description?: pulumi.Input<string>;
    /**
     * The traffic direction apply to the MSS clamping
     */
    direction?: pulumi.Input<string>;
    /**
     * Display name for this resource
     */
    displayName: pulumi.Input<string>;
    /**
     * Policy path referencing dpd profile.
     */
    dpdProfilePath?: pulumi.Input<string>;
    /**
     * Enable/Disable IPSec VPN session.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Policy path referencing Ike profile.
     */
    ikeProfilePath?: pulumi.Input<string>;
    /**
     * IP Tunnel interface (commonly referred as VTI) ip addresses.
     */
    ipAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Policy path referencing Local endpoint.
     */
    localEndpointPath: pulumi.Input<string>;
    /**
     * Maximum amount of data the host will accept in a Tcp segment.
     */
    maxSegmentSize?: pulumi.Input<number>;
    /**
     * NSX ID for this resource
     */
    nsxId?: pulumi.Input<string>;
    /**
     * Public IPV4 address of the remote device terminating the VPN connection.
     */
    peerAddress: pulumi.Input<string>;
    /**
     * Peer ID to uniquely identify the peer site. The peer ID is the public IP address of the remote device terminating the
     * VPN tunnel. When NAT is configured for the peer, enter the private IP address of the peer.
     */
    peerId: pulumi.Input<string>;
    /**
     * Subnet Prefix Length.
     */
    prefixLength?: pulumi.Input<number>;
    /**
     * IPSec Pre-shared key. Maximum length of this field is 128 characters.
     */
    psk?: pulumi.Input<string>;
    /**
     * For policy-based IPsec VPNs, a security policy specifies as its action the VPN tunnel to be used for transit traffic
     * that meets the policy match criteria
     */
    rules?: pulumi.Input<pulumi.Input<inputs.PolicyIpsecVpnSessionRule>[]>;
    /**
     * Policy path for IPSec VPN service
     */
    servicePath: pulumi.Input<string>;
    /**
     * Set of opaque identifiers meaningful to the user
     */
    tags?: pulumi.Input<pulumi.Input<inputs.PolicyIpsecVpnSessionTag>[]>;
    /**
     * Policy path referencing tunnel profile.
     */
    tunnelProfilePath?: pulumi.Input<string>;
    /**
     * A Policy Based VPN requires to define protect rules that match local and peer subnets. IPSec security associations is
     * negotiated for each pair of local and peer subnet. A Route Based VPN is more flexible, more powerful and recommended
     * over policy based VPN. IP Tunnel port is created and all traffic routed via tunnel port is protected. Routes can be
     * configured statically or can be learned through BGP. A route based VPN is must for establishing redundant VPN session to
     * remote site.
     */
    vpnType: pulumi.Input<string>;
}
