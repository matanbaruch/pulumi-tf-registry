// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ComputeManager extends pulumi.CustomResource {
    /**
     * Get an existing ComputeManager resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ComputeManagerState, opts?: pulumi.CustomResourceOptions): ComputeManager {
        return new ComputeManager(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nsxt:index/computeManager:ComputeManager';

    /**
     * Returns true if the given object is an instance of ComputeManager.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ComputeManager {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ComputeManager.__pulumiType;
    }

    /**
     * Specifies access level to NSX from the compute manager
     */
    public readonly accessLevelForOidc!: pulumi.Output<string | undefined>;
    /**
     * Specifies whether service account is created or not on compute manager
     */
    public readonly createServiceAccount!: pulumi.Output<boolean | undefined>;
    /**
     * Login credentials for the compute manager
     */
    public readonly credential!: pulumi.Output<outputs.ComputeManagerCredential>;
    /**
     * Description for this resource
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Display name for this resource
     */
    public readonly displayName!: pulumi.Output<string>;
    /**
     * Specifies certificate for compute manager extension
     */
    public readonly extensionCertificate!: pulumi.Output<outputs.ComputeManagerExtensionCertificate | undefined>;
    /**
     * Specifies whether multi nsx feature is enabled for compute manager
     */
    public readonly multiNsx!: pulumi.Output<boolean | undefined>;
    /**
     * Compute manager type like vCenter
     */
    public readonly originType!: pulumi.Output<string | undefined>;
    /**
     * Proxy https port of compute manager
     */
    public readonly reverseProxyHttpsPort!: pulumi.Output<number | undefined>;
    /**
     * The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's
     * changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET
     * operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
     */
    public /*out*/ readonly revision!: pulumi.Output<number>;
    /**
     * IP address or hostname of compute manager
     */
    public readonly server!: pulumi.Output<string>;
    /**
     * Specifies whether compute manager has been set as OIDC provider
     */
    public readonly setAsOidcProvider!: pulumi.Output<boolean>;
    /**
     * Set of opaque identifiers meaningful to the user
     */
    public readonly tags!: pulumi.Output<outputs.ComputeManagerTag[] | undefined>;

    /**
     * Create a ComputeManager resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ComputeManagerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ComputeManagerArgs | ComputeManagerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ComputeManagerState | undefined;
            resourceInputs["accessLevelForOidc"] = state ? state.accessLevelForOidc : undefined;
            resourceInputs["createServiceAccount"] = state ? state.createServiceAccount : undefined;
            resourceInputs["credential"] = state ? state.credential : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["extensionCertificate"] = state ? state.extensionCertificate : undefined;
            resourceInputs["multiNsx"] = state ? state.multiNsx : undefined;
            resourceInputs["originType"] = state ? state.originType : undefined;
            resourceInputs["reverseProxyHttpsPort"] = state ? state.reverseProxyHttpsPort : undefined;
            resourceInputs["revision"] = state ? state.revision : undefined;
            resourceInputs["server"] = state ? state.server : undefined;
            resourceInputs["setAsOidcProvider"] = state ? state.setAsOidcProvider : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as ComputeManagerArgs | undefined;
            if ((!args || args.credential === undefined) && !opts.urn) {
                throw new Error("Missing required property 'credential'");
            }
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if ((!args || args.server === undefined) && !opts.urn) {
                throw new Error("Missing required property 'server'");
            }
            resourceInputs["accessLevelForOidc"] = args ? args.accessLevelForOidc : undefined;
            resourceInputs["createServiceAccount"] = args ? args.createServiceAccount : undefined;
            resourceInputs["credential"] = args ? args.credential : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["extensionCertificate"] = args ? args.extensionCertificate : undefined;
            resourceInputs["multiNsx"] = args ? args.multiNsx : undefined;
            resourceInputs["originType"] = args ? args.originType : undefined;
            resourceInputs["reverseProxyHttpsPort"] = args ? args.reverseProxyHttpsPort : undefined;
            resourceInputs["server"] = args ? args.server : undefined;
            resourceInputs["setAsOidcProvider"] = args ? args.setAsOidcProvider : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["revision"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ComputeManager.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ComputeManager resources.
 */
export interface ComputeManagerState {
    /**
     * Specifies access level to NSX from the compute manager
     */
    accessLevelForOidc?: pulumi.Input<string>;
    /**
     * Specifies whether service account is created or not on compute manager
     */
    createServiceAccount?: pulumi.Input<boolean>;
    /**
     * Login credentials for the compute manager
     */
    credential?: pulumi.Input<inputs.ComputeManagerCredential>;
    /**
     * Description for this resource
     */
    description?: pulumi.Input<string>;
    /**
     * Display name for this resource
     */
    displayName?: pulumi.Input<string>;
    /**
     * Specifies certificate for compute manager extension
     */
    extensionCertificate?: pulumi.Input<inputs.ComputeManagerExtensionCertificate>;
    /**
     * Specifies whether multi nsx feature is enabled for compute manager
     */
    multiNsx?: pulumi.Input<boolean>;
    /**
     * Compute manager type like vCenter
     */
    originType?: pulumi.Input<string>;
    /**
     * Proxy https port of compute manager
     */
    reverseProxyHttpsPort?: pulumi.Input<number>;
    /**
     * The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's
     * changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET
     * operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
     */
    revision?: pulumi.Input<number>;
    /**
     * IP address or hostname of compute manager
     */
    server?: pulumi.Input<string>;
    /**
     * Specifies whether compute manager has been set as OIDC provider
     */
    setAsOidcProvider?: pulumi.Input<boolean>;
    /**
     * Set of opaque identifiers meaningful to the user
     */
    tags?: pulumi.Input<pulumi.Input<inputs.ComputeManagerTag>[]>;
}

/**
 * The set of arguments for constructing a ComputeManager resource.
 */
export interface ComputeManagerArgs {
    /**
     * Specifies access level to NSX from the compute manager
     */
    accessLevelForOidc?: pulumi.Input<string>;
    /**
     * Specifies whether service account is created or not on compute manager
     */
    createServiceAccount?: pulumi.Input<boolean>;
    /**
     * Login credentials for the compute manager
     */
    credential: pulumi.Input<inputs.ComputeManagerCredential>;
    /**
     * Description for this resource
     */
    description?: pulumi.Input<string>;
    /**
     * Display name for this resource
     */
    displayName: pulumi.Input<string>;
    /**
     * Specifies certificate for compute manager extension
     */
    extensionCertificate?: pulumi.Input<inputs.ComputeManagerExtensionCertificate>;
    /**
     * Specifies whether multi nsx feature is enabled for compute manager
     */
    multiNsx?: pulumi.Input<boolean>;
    /**
     * Compute manager type like vCenter
     */
    originType?: pulumi.Input<string>;
    /**
     * Proxy https port of compute manager
     */
    reverseProxyHttpsPort?: pulumi.Input<number>;
    /**
     * IP address or hostname of compute manager
     */
    server: pulumi.Input<string>;
    /**
     * Specifies whether compute manager has been set as OIDC provider
     */
    setAsOidcProvider?: pulumi.Input<boolean>;
    /**
     * Set of opaque identifiers meaningful to the user
     */
    tags?: pulumi.Input<pulumi.Input<inputs.ComputeManagerTag>[]>;
}
