// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class PolicyService extends pulumi.CustomResource {
    /**
     * Get an existing PolicyService resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PolicyServiceState, opts?: pulumi.CustomResourceOptions): PolicyService {
        return new PolicyService(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nsxt:index/policyService:PolicyService';

    /**
     * Returns true if the given object is an instance of PolicyService.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PolicyService {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PolicyService.__pulumiType;
    }

    /**
     * Algorithm type service entry
     */
    public readonly algorithmEntries!: pulumi.Output<outputs.PolicyServiceAlgorithmEntry[] | undefined>;
    /**
     * Resource context
     */
    public readonly context!: pulumi.Output<outputs.PolicyServiceContext | undefined>;
    /**
     * Description for this resource
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Display name for this resource
     */
    public readonly displayName!: pulumi.Output<string>;
    /**
     * Ether type service entry
     */
    public readonly etherTypeEntries!: pulumi.Output<outputs.PolicyServiceEtherTypeEntry[] | undefined>;
    /**
     * ICMP type service entry
     */
    public readonly icmpEntries!: pulumi.Output<outputs.PolicyServiceIcmpEntry[] | undefined>;
    /**
     * IGMP type service entry
     */
    public readonly igmpEntries!: pulumi.Output<outputs.PolicyServiceIgmpEntry[] | undefined>;
    /**
     * IP Protocol type service entry
     */
    public readonly ipProtocolEntries!: pulumi.Output<outputs.PolicyServiceIpProtocolEntry[] | undefined>;
    /**
     * L4 port set type service entry
     */
    public readonly l4PortSetEntries!: pulumi.Output<outputs.PolicyServiceL4PortSetEntry[] | undefined>;
    /**
     * Nested service service entry
     */
    public readonly nestedServiceEntries!: pulumi.Output<outputs.PolicyServiceNestedServiceEntry[] | undefined>;
    /**
     * NSX ID for this resource
     */
    public readonly nsxId!: pulumi.Output<string>;
    /**
     * Policy path for this resource
     */
    public /*out*/ readonly path!: pulumi.Output<string>;
    /**
     * The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's
     * changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET
     * operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
     */
    public /*out*/ readonly revision!: pulumi.Output<number>;
    /**
     * Set of opaque identifiers meaningful to the user
     */
    public readonly tags!: pulumi.Output<outputs.PolicyServiceTag[] | undefined>;

    /**
     * Create a PolicyService resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PolicyServiceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PolicyServiceArgs | PolicyServiceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PolicyServiceState | undefined;
            resourceInputs["algorithmEntries"] = state ? state.algorithmEntries : undefined;
            resourceInputs["context"] = state ? state.context : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["etherTypeEntries"] = state ? state.etherTypeEntries : undefined;
            resourceInputs["icmpEntries"] = state ? state.icmpEntries : undefined;
            resourceInputs["igmpEntries"] = state ? state.igmpEntries : undefined;
            resourceInputs["ipProtocolEntries"] = state ? state.ipProtocolEntries : undefined;
            resourceInputs["l4PortSetEntries"] = state ? state.l4PortSetEntries : undefined;
            resourceInputs["nestedServiceEntries"] = state ? state.nestedServiceEntries : undefined;
            resourceInputs["nsxId"] = state ? state.nsxId : undefined;
            resourceInputs["path"] = state ? state.path : undefined;
            resourceInputs["revision"] = state ? state.revision : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as PolicyServiceArgs | undefined;
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            resourceInputs["algorithmEntries"] = args ? args.algorithmEntries : undefined;
            resourceInputs["context"] = args ? args.context : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["etherTypeEntries"] = args ? args.etherTypeEntries : undefined;
            resourceInputs["icmpEntries"] = args ? args.icmpEntries : undefined;
            resourceInputs["igmpEntries"] = args ? args.igmpEntries : undefined;
            resourceInputs["ipProtocolEntries"] = args ? args.ipProtocolEntries : undefined;
            resourceInputs["l4PortSetEntries"] = args ? args.l4PortSetEntries : undefined;
            resourceInputs["nestedServiceEntries"] = args ? args.nestedServiceEntries : undefined;
            resourceInputs["nsxId"] = args ? args.nsxId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["path"] = undefined /*out*/;
            resourceInputs["revision"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PolicyService.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering PolicyService resources.
 */
export interface PolicyServiceState {
    /**
     * Algorithm type service entry
     */
    algorithmEntries?: pulumi.Input<pulumi.Input<inputs.PolicyServiceAlgorithmEntry>[]>;
    /**
     * Resource context
     */
    context?: pulumi.Input<inputs.PolicyServiceContext>;
    /**
     * Description for this resource
     */
    description?: pulumi.Input<string>;
    /**
     * Display name for this resource
     */
    displayName?: pulumi.Input<string>;
    /**
     * Ether type service entry
     */
    etherTypeEntries?: pulumi.Input<pulumi.Input<inputs.PolicyServiceEtherTypeEntry>[]>;
    /**
     * ICMP type service entry
     */
    icmpEntries?: pulumi.Input<pulumi.Input<inputs.PolicyServiceIcmpEntry>[]>;
    /**
     * IGMP type service entry
     */
    igmpEntries?: pulumi.Input<pulumi.Input<inputs.PolicyServiceIgmpEntry>[]>;
    /**
     * IP Protocol type service entry
     */
    ipProtocolEntries?: pulumi.Input<pulumi.Input<inputs.PolicyServiceIpProtocolEntry>[]>;
    /**
     * L4 port set type service entry
     */
    l4PortSetEntries?: pulumi.Input<pulumi.Input<inputs.PolicyServiceL4PortSetEntry>[]>;
    /**
     * Nested service service entry
     */
    nestedServiceEntries?: pulumi.Input<pulumi.Input<inputs.PolicyServiceNestedServiceEntry>[]>;
    /**
     * NSX ID for this resource
     */
    nsxId?: pulumi.Input<string>;
    /**
     * Policy path for this resource
     */
    path?: pulumi.Input<string>;
    /**
     * The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's
     * changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET
     * operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
     */
    revision?: pulumi.Input<number>;
    /**
     * Set of opaque identifiers meaningful to the user
     */
    tags?: pulumi.Input<pulumi.Input<inputs.PolicyServiceTag>[]>;
}

/**
 * The set of arguments for constructing a PolicyService resource.
 */
export interface PolicyServiceArgs {
    /**
     * Algorithm type service entry
     */
    algorithmEntries?: pulumi.Input<pulumi.Input<inputs.PolicyServiceAlgorithmEntry>[]>;
    /**
     * Resource context
     */
    context?: pulumi.Input<inputs.PolicyServiceContext>;
    /**
     * Description for this resource
     */
    description?: pulumi.Input<string>;
    /**
     * Display name for this resource
     */
    displayName: pulumi.Input<string>;
    /**
     * Ether type service entry
     */
    etherTypeEntries?: pulumi.Input<pulumi.Input<inputs.PolicyServiceEtherTypeEntry>[]>;
    /**
     * ICMP type service entry
     */
    icmpEntries?: pulumi.Input<pulumi.Input<inputs.PolicyServiceIcmpEntry>[]>;
    /**
     * IGMP type service entry
     */
    igmpEntries?: pulumi.Input<pulumi.Input<inputs.PolicyServiceIgmpEntry>[]>;
    /**
     * IP Protocol type service entry
     */
    ipProtocolEntries?: pulumi.Input<pulumi.Input<inputs.PolicyServiceIpProtocolEntry>[]>;
    /**
     * L4 port set type service entry
     */
    l4PortSetEntries?: pulumi.Input<pulumi.Input<inputs.PolicyServiceL4PortSetEntry>[]>;
    /**
     * Nested service service entry
     */
    nestedServiceEntries?: pulumi.Input<pulumi.Input<inputs.PolicyServiceNestedServiceEntry>[]>;
    /**
     * NSX ID for this resource
     */
    nsxId?: pulumi.Input<string>;
    /**
     * Set of opaque identifiers meaningful to the user
     */
    tags?: pulumi.Input<pulumi.Input<inputs.PolicyServiceTag>[]>;
}
