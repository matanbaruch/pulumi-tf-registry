// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class UpgradeRun extends pulumi.CustomResource {
    /**
     * Get an existing UpgradeRun resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UpgradeRunState, opts?: pulumi.CustomResourceOptions): UpgradeRun {
        return new UpgradeRun(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nsxt:index/upgradeRun:UpgradeRun';

    /**
     * Returns true if the given object is an instance of UpgradeRun.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is UpgradeRun {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === UpgradeRun.__pulumiType;
    }

    /**
     * Initial delay to start upgrade status checks in seconds
     */
    public readonly delay!: pulumi.Output<number | undefined>;
    /**
     * Upgrade group for this upgrade
     */
    public readonly edgeGroups!: pulumi.Output<outputs.UpgradeRunEdgeGroup[] | undefined>;
    /**
     * Upgrade plan setting for component
     */
    public readonly edgeUpgradeSetting!: pulumi.Output<outputs.UpgradeRunEdgeUpgradeSetting | undefined>;
    /**
     * Upgrade group for this upgrade
     */
    public readonly hostGroups!: pulumi.Output<outputs.UpgradeRunHostGroup[] | undefined>;
    /**
     * Upgrade plan setting for component
     */
    public readonly hostUpgradeSetting!: pulumi.Output<outputs.UpgradeRunHostUpgradeSetting | undefined>;
    /**
     * Interval to check upgrade status in seconds
     */
    public readonly interval!: pulumi.Output<number | undefined>;
    /**
     * Upgrade states
     */
    public /*out*/ readonly states!: pulumi.Output<outputs.UpgradeRunState[]>;
    /**
     * Upgrade status check timeout in seconds
     */
    public readonly timeout!: pulumi.Output<number | undefined>;
    /**
     * Upgrade plan for this upgrade
     */
    public readonly upgradeGroupPlans!: pulumi.Output<outputs.UpgradeRunUpgradeGroupPlan[] | undefined>;
    /**
     * ID of corresponding nsxt.getUpgradePrepareReady resource
     */
    public readonly upgradePrepareReadyId!: pulumi.Output<string>;

    /**
     * Create a UpgradeRun resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UpgradeRunArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UpgradeRunArgs | UpgradeRunState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UpgradeRunState | undefined;
            resourceInputs["delay"] = state ? state.delay : undefined;
            resourceInputs["edgeGroups"] = state ? state.edgeGroups : undefined;
            resourceInputs["edgeUpgradeSetting"] = state ? state.edgeUpgradeSetting : undefined;
            resourceInputs["hostGroups"] = state ? state.hostGroups : undefined;
            resourceInputs["hostUpgradeSetting"] = state ? state.hostUpgradeSetting : undefined;
            resourceInputs["interval"] = state ? state.interval : undefined;
            resourceInputs["states"] = state ? state.states : undefined;
            resourceInputs["timeout"] = state ? state.timeout : undefined;
            resourceInputs["upgradeGroupPlans"] = state ? state.upgradeGroupPlans : undefined;
            resourceInputs["upgradePrepareReadyId"] = state ? state.upgradePrepareReadyId : undefined;
        } else {
            const args = argsOrState as UpgradeRunArgs | undefined;
            if ((!args || args.upgradePrepareReadyId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'upgradePrepareReadyId'");
            }
            resourceInputs["delay"] = args ? args.delay : undefined;
            resourceInputs["edgeGroups"] = args ? args.edgeGroups : undefined;
            resourceInputs["edgeUpgradeSetting"] = args ? args.edgeUpgradeSetting : undefined;
            resourceInputs["hostGroups"] = args ? args.hostGroups : undefined;
            resourceInputs["hostUpgradeSetting"] = args ? args.hostUpgradeSetting : undefined;
            resourceInputs["interval"] = args ? args.interval : undefined;
            resourceInputs["timeout"] = args ? args.timeout : undefined;
            resourceInputs["upgradeGroupPlans"] = args ? args.upgradeGroupPlans : undefined;
            resourceInputs["upgradePrepareReadyId"] = args ? args.upgradePrepareReadyId : undefined;
            resourceInputs["states"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(UpgradeRun.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering UpgradeRun resources.
 */
export interface UpgradeRunState {
    /**
     * Initial delay to start upgrade status checks in seconds
     */
    delay?: pulumi.Input<number>;
    /**
     * Upgrade group for this upgrade
     */
    edgeGroups?: pulumi.Input<pulumi.Input<inputs.UpgradeRunEdgeGroup>[]>;
    /**
     * Upgrade plan setting for component
     */
    edgeUpgradeSetting?: pulumi.Input<inputs.UpgradeRunEdgeUpgradeSetting>;
    /**
     * Upgrade group for this upgrade
     */
    hostGroups?: pulumi.Input<pulumi.Input<inputs.UpgradeRunHostGroup>[]>;
    /**
     * Upgrade plan setting for component
     */
    hostUpgradeSetting?: pulumi.Input<inputs.UpgradeRunHostUpgradeSetting>;
    /**
     * Interval to check upgrade status in seconds
     */
    interval?: pulumi.Input<number>;
    /**
     * Upgrade states
     */
    states?: pulumi.Input<pulumi.Input<inputs.UpgradeRunState>[]>;
    /**
     * Upgrade status check timeout in seconds
     */
    timeout?: pulumi.Input<number>;
    /**
     * Upgrade plan for this upgrade
     */
    upgradeGroupPlans?: pulumi.Input<pulumi.Input<inputs.UpgradeRunUpgradeGroupPlan>[]>;
    /**
     * ID of corresponding nsxt.getUpgradePrepareReady resource
     */
    upgradePrepareReadyId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a UpgradeRun resource.
 */
export interface UpgradeRunArgs {
    /**
     * Initial delay to start upgrade status checks in seconds
     */
    delay?: pulumi.Input<number>;
    /**
     * Upgrade group for this upgrade
     */
    edgeGroups?: pulumi.Input<pulumi.Input<inputs.UpgradeRunEdgeGroup>[]>;
    /**
     * Upgrade plan setting for component
     */
    edgeUpgradeSetting?: pulumi.Input<inputs.UpgradeRunEdgeUpgradeSetting>;
    /**
     * Upgrade group for this upgrade
     */
    hostGroups?: pulumi.Input<pulumi.Input<inputs.UpgradeRunHostGroup>[]>;
    /**
     * Upgrade plan setting for component
     */
    hostUpgradeSetting?: pulumi.Input<inputs.UpgradeRunHostUpgradeSetting>;
    /**
     * Interval to check upgrade status in seconds
     */
    interval?: pulumi.Input<number>;
    /**
     * Upgrade status check timeout in seconds
     */
    timeout?: pulumi.Input<number>;
    /**
     * Upgrade plan for this upgrade
     */
    upgradeGroupPlans?: pulumi.Input<pulumi.Input<inputs.UpgradeRunUpgradeGroupPlan>[]>;
    /**
     * ID of corresponding nsxt.getUpgradePrepareReady resource
     */
    upgradePrepareReadyId: pulumi.Input<string>;
}
