// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class File extends pulumi.CustomResource {
    /**
     * Get an existing File resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FileState, opts?: pulumi.CustomResourceOptions): File {
        return new File(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'template:index/file:File';

    /**
     * Returns true if the given object is an instance of File.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is File {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === File.__pulumiType;
    }

    public readonly filename!: pulumi.Output<string | undefined>;
    /**
     * rendered template
     */
    public /*out*/ readonly rendered!: pulumi.Output<string>;
    /**
     * Contents of the template
     */
    public readonly template!: pulumi.Output<string | undefined>;
    /**
     * variables to substitute
     */
    public readonly vars!: pulumi.Output<{[key: string]: string} | undefined>;

    /**
     * Create a File resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: FileArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FileArgs | FileState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FileState | undefined;
            resourceInputs["filename"] = state ? state.filename : undefined;
            resourceInputs["rendered"] = state ? state.rendered : undefined;
            resourceInputs["template"] = state ? state.template : undefined;
            resourceInputs["vars"] = state ? state.vars : undefined;
        } else {
            const args = argsOrState as FileArgs | undefined;
            resourceInputs["filename"] = args ? args.filename : undefined;
            resourceInputs["template"] = args ? args.template : undefined;
            resourceInputs["vars"] = args ? args.vars : undefined;
            resourceInputs["rendered"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(File.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering File resources.
 */
export interface FileState {
    filename?: pulumi.Input<string>;
    /**
     * rendered template
     */
    rendered?: pulumi.Input<string>;
    /**
     * Contents of the template
     */
    template?: pulumi.Input<string>;
    /**
     * variables to substitute
     */
    vars?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a File resource.
 */
export interface FileArgs {
    filename?: pulumi.Input<string>;
    /**
     * Contents of the template
     */
    template?: pulumi.Input<string>;
    /**
     * variables to substitute
     */
    vars?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
