// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Dir extends pulumi.CustomResource {
    /**
     * Get an existing Dir resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DirState, opts?: pulumi.CustomResourceOptions): Dir {
        return new Dir(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'template:index/dir:Dir';

    /**
     * Returns true if the given object is an instance of Dir.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Dir {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Dir.__pulumiType;
    }

    /**
     * Path to the directory where the templated files will be written
     */
    public readonly destinationDir!: pulumi.Output<string>;
    /**
     * Path to the directory where the files to template reside
     */
    public readonly sourceDir!: pulumi.Output<string>;
    /**
     * Variables to substitute
     */
    public readonly vars!: pulumi.Output<{[key: string]: string} | undefined>;

    /**
     * Create a Dir resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DirArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DirArgs | DirState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DirState | undefined;
            resourceInputs["destinationDir"] = state ? state.destinationDir : undefined;
            resourceInputs["sourceDir"] = state ? state.sourceDir : undefined;
            resourceInputs["vars"] = state ? state.vars : undefined;
        } else {
            const args = argsOrState as DirArgs | undefined;
            if ((!args || args.destinationDir === undefined) && !opts.urn) {
                throw new Error("Missing required property 'destinationDir'");
            }
            if ((!args || args.sourceDir === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceDir'");
            }
            resourceInputs["destinationDir"] = args ? args.destinationDir : undefined;
            resourceInputs["sourceDir"] = args ? args.sourceDir : undefined;
            resourceInputs["vars"] = args ? args.vars : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Dir.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Dir resources.
 */
export interface DirState {
    /**
     * Path to the directory where the templated files will be written
     */
    destinationDir?: pulumi.Input<string>;
    /**
     * Path to the directory where the files to template reside
     */
    sourceDir?: pulumi.Input<string>;
    /**
     * Variables to substitute
     */
    vars?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a Dir resource.
 */
export interface DirArgs {
    /**
     * Path to the directory where the templated files will be written
     */
    destinationDir: pulumi.Input<string>;
    /**
     * Path to the directory where the files to template reside
     */
    sourceDir: pulumi.Input<string>;
    /**
     * Variables to substitute
     */
    vars?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
