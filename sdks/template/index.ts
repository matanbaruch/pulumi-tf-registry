// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { CloudinitConfigArgs, CloudinitConfigState } from "./cloudinitConfig";
export type CloudinitConfig = import("./cloudinitConfig").CloudinitConfig;
export const CloudinitConfig: typeof import("./cloudinitConfig").CloudinitConfig = null as any;
utilities.lazyLoad(exports, ["CloudinitConfig"], () => require("./cloudinitConfig"));

export { DirArgs, DirState } from "./dir";
export type Dir = import("./dir").Dir;
export const Dir: typeof import("./dir").Dir = null as any;
utilities.lazyLoad(exports, ["Dir"], () => require("./dir"));

export { FileArgs, FileState } from "./file";
export type File = import("./file").File;
export const File: typeof import("./file").File = null as any;
utilities.lazyLoad(exports, ["File"], () => require("./file"));

export { GetCloudinitConfigArgs, GetCloudinitConfigResult, GetCloudinitConfigOutputArgs } from "./getCloudinitConfig";
export const getCloudinitConfig: typeof import("./getCloudinitConfig").getCloudinitConfig = null as any;
export const getCloudinitConfigOutput: typeof import("./getCloudinitConfig").getCloudinitConfigOutput = null as any;
utilities.lazyLoad(exports, ["getCloudinitConfig","getCloudinitConfigOutput"], () => require("./getCloudinitConfig"));

export { GetFileArgs, GetFileResult, GetFileOutputArgs } from "./getFile";
export const getFile: typeof import("./getFile").getFile = null as any;
export const getFileOutput: typeof import("./getFile").getFileOutput = null as any;
utilities.lazyLoad(exports, ["getFile","getFileOutput"], () => require("./getFile"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));


// Export sub-modules:
import * as types from "./types";

export {
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "template:index/cloudinitConfig:CloudinitConfig":
                return new CloudinitConfig(name, <any>undefined, { urn })
            case "template:index/dir:Dir":
                return new Dir(name, <any>undefined, { urn })
            case "template:index/file:File":
                return new File(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("template", "index/cloudinitConfig", _module)
pulumi.runtime.registerResourceModule("template", "index/dir", _module)
pulumi.runtime.registerResourceModule("template", "index/file", _module)
pulumi.runtime.registerResourcePackage("template", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:template") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
