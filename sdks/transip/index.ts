// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { DnsRecordArgs, DnsRecordState } from "./dnsRecord";
export type DnsRecord = import("./dnsRecord").DnsRecord;
export const DnsRecord: typeof import("./dnsRecord").DnsRecord = null as any;
utilities.lazyLoad(exports, ["DnsRecord"], () => require("./dnsRecord"));

export { DomainArgs, DomainState } from "./domain";
export type Domain = import("./domain").Domain;
export const Domain: typeof import("./domain").Domain = null as any;
utilities.lazyLoad(exports, ["Domain"], () => require("./domain"));

export { DomainDnssecArgs, DomainDnssecState } from "./domainDnssec";
export type DomainDnssec = import("./domainDnssec").DomainDnssec;
export const DomainDnssec: typeof import("./domainDnssec").DomainDnssec = null as any;
utilities.lazyLoad(exports, ["DomainDnssec"], () => require("./domainDnssec"));

export { DomainNameserversArgs, DomainNameserversState } from "./domainNameservers";
export type DomainNameservers = import("./domainNameservers").DomainNameservers;
export const DomainNameservers: typeof import("./domainNameservers").DomainNameservers = null as any;
utilities.lazyLoad(exports, ["DomainNameservers"], () => require("./domainNameservers"));

export { GetDomainArgs, GetDomainResult, GetDomainOutputArgs } from "./getDomain";
export const getDomain: typeof import("./getDomain").getDomain = null as any;
export const getDomainOutput: typeof import("./getDomain").getDomainOutput = null as any;
utilities.lazyLoad(exports, ["getDomain","getDomainOutput"], () => require("./getDomain"));

export { GetDomainsArgs, GetDomainsResult, GetDomainsOutputArgs } from "./getDomains";
export const getDomains: typeof import("./getDomains").getDomains = null as any;
export const getDomainsOutput: typeof import("./getDomains").getDomainsOutput = null as any;
utilities.lazyLoad(exports, ["getDomains","getDomainsOutput"], () => require("./getDomains"));

export { GetOpenstackProjectArgs, GetOpenstackProjectResult, GetOpenstackProjectOutputArgs } from "./getOpenstackProject";
export const getOpenstackProject: typeof import("./getOpenstackProject").getOpenstackProject = null as any;
export const getOpenstackProjectOutput: typeof import("./getOpenstackProject").getOpenstackProjectOutput = null as any;
utilities.lazyLoad(exports, ["getOpenstackProject","getOpenstackProjectOutput"], () => require("./getOpenstackProject"));

export { GetOpenstackUserArgs, GetOpenstackUserResult, GetOpenstackUserOutputArgs } from "./getOpenstackUser";
export const getOpenstackUser: typeof import("./getOpenstackUser").getOpenstackUser = null as any;
export const getOpenstackUserOutput: typeof import("./getOpenstackUser").getOpenstackUserOutput = null as any;
utilities.lazyLoad(exports, ["getOpenstackUser","getOpenstackUserOutput"], () => require("./getOpenstackUser"));

export { GetPrivateNetworkArgs, GetPrivateNetworkResult, GetPrivateNetworkOutputArgs } from "./getPrivateNetwork";
export const getPrivateNetwork: typeof import("./getPrivateNetwork").getPrivateNetwork = null as any;
export const getPrivateNetworkOutput: typeof import("./getPrivateNetwork").getPrivateNetworkOutput = null as any;
utilities.lazyLoad(exports, ["getPrivateNetwork","getPrivateNetworkOutput"], () => require("./getPrivateNetwork"));

export { GetSshkeyArgs, GetSshkeyResult, GetSshkeyOutputArgs } from "./getSshkey";
export const getSshkey: typeof import("./getSshkey").getSshkey = null as any;
export const getSshkeyOutput: typeof import("./getSshkey").getSshkeyOutput = null as any;
utilities.lazyLoad(exports, ["getSshkey","getSshkeyOutput"], () => require("./getSshkey"));

export { GetVpsArgs, GetVpsResult, GetVpsOutputArgs } from "./getVps";
export const getVps: typeof import("./getVps").getVps = null as any;
export const getVpsOutput: typeof import("./getVps").getVpsOutput = null as any;
utilities.lazyLoad(exports, ["getVps","getVpsOutput"], () => require("./getVps"));

export { OpenstackProjectArgs, OpenstackProjectState } from "./openstackProject";
export type OpenstackProject = import("./openstackProject").OpenstackProject;
export const OpenstackProject: typeof import("./openstackProject").OpenstackProject = null as any;
utilities.lazyLoad(exports, ["OpenstackProject"], () => require("./openstackProject"));

export { OpenstackUserArgs, OpenstackUserState } from "./openstackUser";
export type OpenstackUser = import("./openstackUser").OpenstackUser;
export const OpenstackUser: typeof import("./openstackUser").OpenstackUser = null as any;
utilities.lazyLoad(exports, ["OpenstackUser"], () => require("./openstackUser"));

export { PrivateNetworkArgs, PrivateNetworkState } from "./privateNetwork";
export type PrivateNetwork = import("./privateNetwork").PrivateNetwork;
export const PrivateNetwork: typeof import("./privateNetwork").PrivateNetwork = null as any;
utilities.lazyLoad(exports, ["PrivateNetwork"], () => require("./privateNetwork"));

export { PrivateNetworkAttachmentArgs, PrivateNetworkAttachmentState } from "./privateNetworkAttachment";
export type PrivateNetworkAttachment = import("./privateNetworkAttachment").PrivateNetworkAttachment;
export const PrivateNetworkAttachment: typeof import("./privateNetworkAttachment").PrivateNetworkAttachment = null as any;
utilities.lazyLoad(exports, ["PrivateNetworkAttachment"], () => require("./privateNetworkAttachment"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { SshkeyArgs, SshkeyState } from "./sshkey";
export type Sshkey = import("./sshkey").Sshkey;
export const Sshkey: typeof import("./sshkey").Sshkey = null as any;
utilities.lazyLoad(exports, ["Sshkey"], () => require("./sshkey"));

export { VpsArgs, VpsState } from "./vps";
export type Vps = import("./vps").Vps;
export const Vps: typeof import("./vps").Vps = null as any;
utilities.lazyLoad(exports, ["Vps"], () => require("./vps"));

export { VpsFirewallArgs, VpsFirewallState } from "./vpsFirewall";
export type VpsFirewall = import("./vpsFirewall").VpsFirewall;
export const VpsFirewall: typeof import("./vpsFirewall").VpsFirewall = null as any;
utilities.lazyLoad(exports, ["VpsFirewall"], () => require("./vpsFirewall"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "transip:index/dnsRecord:DnsRecord":
                return new DnsRecord(name, <any>undefined, { urn })
            case "transip:index/domain:Domain":
                return new Domain(name, <any>undefined, { urn })
            case "transip:index/domainDnssec:DomainDnssec":
                return new DomainDnssec(name, <any>undefined, { urn })
            case "transip:index/domainNameservers:DomainNameservers":
                return new DomainNameservers(name, <any>undefined, { urn })
            case "transip:index/openstackProject:OpenstackProject":
                return new OpenstackProject(name, <any>undefined, { urn })
            case "transip:index/openstackUser:OpenstackUser":
                return new OpenstackUser(name, <any>undefined, { urn })
            case "transip:index/privateNetwork:PrivateNetwork":
                return new PrivateNetwork(name, <any>undefined, { urn })
            case "transip:index/privateNetworkAttachment:PrivateNetworkAttachment":
                return new PrivateNetworkAttachment(name, <any>undefined, { urn })
            case "transip:index/sshkey:Sshkey":
                return new Sshkey(name, <any>undefined, { urn })
            case "transip:index/vps:Vps":
                return new Vps(name, <any>undefined, { urn })
            case "transip:index/vpsFirewall:VpsFirewall":
                return new VpsFirewall(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("transip", "index/dnsRecord", _module)
pulumi.runtime.registerResourceModule("transip", "index/domain", _module)
pulumi.runtime.registerResourceModule("transip", "index/domainDnssec", _module)
pulumi.runtime.registerResourceModule("transip", "index/domainNameservers", _module)
pulumi.runtime.registerResourceModule("transip", "index/openstackProject", _module)
pulumi.runtime.registerResourceModule("transip", "index/openstackUser", _module)
pulumi.runtime.registerResourceModule("transip", "index/privateNetwork", _module)
pulumi.runtime.registerResourceModule("transip", "index/privateNetworkAttachment", _module)
pulumi.runtime.registerResourceModule("transip", "index/sshkey", _module)
pulumi.runtime.registerResourceModule("transip", "index/vps", _module)
pulumi.runtime.registerResourceModule("transip", "index/vpsFirewall", _module)
pulumi.runtime.registerResourcePackage("transip", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:transip") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
