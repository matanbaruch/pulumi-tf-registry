// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getOpenstackUser(args: GetOpenstackUserArgs, opts?: pulumi.InvokeOptions): Promise<GetOpenstackUserResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("transip:index/getOpenstackUser:getOpenstackUser", {
        "description": args.description,
        "email": args.email,
        "id": args.id,
        "username": args.username,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getOpenstackUser.
 */
export interface GetOpenstackUserArgs {
    description?: string;
    email?: string;
    id?: string;
    username: string;
}

/**
 * A collection of values returned by getOpenstackUser.
 */
export interface GetOpenstackUserResult {
    readonly description?: string;
    readonly email?: string;
    readonly id: string;
    readonly username: string;
}
export function getOpenstackUserOutput(args: GetOpenstackUserOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetOpenstackUserResult> {
    return pulumi.output(args).apply((a: any) => getOpenstackUser(a, opts))
}

/**
 * A collection of arguments for invoking getOpenstackUser.
 */
export interface GetOpenstackUserOutputArgs {
    description?: pulumi.Input<string>;
    email?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    username: pulumi.Input<string>;
}
