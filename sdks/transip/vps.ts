// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Vps extends pulumi.CustomResource {
    /**
     * Get an existing Vps resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VpsState, opts?: pulumi.CustomResourceOptions): Vps {
        return new Vps(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'transip:index/vps:Vps';

    /**
     * Returns true if the given object is an instance of Vps.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Vps {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Vps.__pulumiType;
    }

    /**
     * The name of the availability zone the VPS is in.
     */
    public readonly availabilityZone!: pulumi.Output<string | undefined>;
    /**
     * The VPS cpu count.
     */
    public /*out*/ readonly cpus!: pulumi.Output<number>;
    /**
     * The name that can be set by customer.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The VPS disk size in kB.
     */
    public /*out*/ readonly diskSize!: pulumi.Output<number>;
    /**
     * The flavour of OS installation: 'installer', 'preinstallable' or 'cloudinit'.
     */
    public readonly installFlavour!: pulumi.Output<string | undefined>;
    /**
     * Base64 encoded preseed / kickstart / cloudinit instructions, when installing unattended.
     */
    public readonly installText!: pulumi.Output<string | undefined>;
    /**
     * The VPS main ipAddress.
     */
    public /*out*/ readonly ipAddress!: pulumi.Output<string>;
    /**
     * All IPV4 addresses associated with this VPS.
     */
    public /*out*/ readonly ipv4Addresses!: pulumi.Output<string[]>;
    /**
     * All IPV6 addresses associated with this VPS.
     */
    public /*out*/ readonly ipv6Addresses!: pulumi.Output<string[]>;
    /**
     * If the VPS is administratively blocked.
     */
    public /*out*/ readonly isBlocked!: pulumi.Output<boolean>;
    /**
     * If this VPS is locked by the customer.
     */
    public /*out*/ readonly isCustomerLocked!: pulumi.Output<boolean>;
    /**
     * The VPS macaddress.
     */
    public /*out*/ readonly macAddress!: pulumi.Output<string>;
    /**
     * The VPS memory size in kB.
     */
    public /*out*/ readonly memorySize!: pulumi.Output<number>;
    /**
     * The unique VPS name.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * The VPS OperatingSystem.
     */
    public readonly operatingSystem!: pulumi.Output<string>;
    /**
     * The product name.
     */
    public readonly productName!: pulumi.Output<string>;
    /**
     * The VPS status, either 'created', 'installing', 'running', 'stopped' or 'paused'.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * The custom tags added to this VPS.
     */
    public /*out*/ readonly tags!: pulumi.Output<string[]>;

    /**
     * Create a Vps resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VpsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VpsArgs | VpsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VpsState | undefined;
            resourceInputs["availabilityZone"] = state ? state.availabilityZone : undefined;
            resourceInputs["cpus"] = state ? state.cpus : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["diskSize"] = state ? state.diskSize : undefined;
            resourceInputs["installFlavour"] = state ? state.installFlavour : undefined;
            resourceInputs["installText"] = state ? state.installText : undefined;
            resourceInputs["ipAddress"] = state ? state.ipAddress : undefined;
            resourceInputs["ipv4Addresses"] = state ? state.ipv4Addresses : undefined;
            resourceInputs["ipv6Addresses"] = state ? state.ipv6Addresses : undefined;
            resourceInputs["isBlocked"] = state ? state.isBlocked : undefined;
            resourceInputs["isCustomerLocked"] = state ? state.isCustomerLocked : undefined;
            resourceInputs["macAddress"] = state ? state.macAddress : undefined;
            resourceInputs["memorySize"] = state ? state.memorySize : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["operatingSystem"] = state ? state.operatingSystem : undefined;
            resourceInputs["productName"] = state ? state.productName : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as VpsArgs | undefined;
            if ((!args || args.operatingSystem === undefined) && !opts.urn) {
                throw new Error("Missing required property 'operatingSystem'");
            }
            if ((!args || args.productName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'productName'");
            }
            resourceInputs["availabilityZone"] = args ? args.availabilityZone : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["installFlavour"] = args ? args.installFlavour : undefined;
            resourceInputs["installText"] = args ? args.installText : undefined;
            resourceInputs["operatingSystem"] = args ? args.operatingSystem : undefined;
            resourceInputs["productName"] = args ? args.productName : undefined;
            resourceInputs["cpus"] = undefined /*out*/;
            resourceInputs["diskSize"] = undefined /*out*/;
            resourceInputs["ipAddress"] = undefined /*out*/;
            resourceInputs["ipv4Addresses"] = undefined /*out*/;
            resourceInputs["ipv6Addresses"] = undefined /*out*/;
            resourceInputs["isBlocked"] = undefined /*out*/;
            resourceInputs["isCustomerLocked"] = undefined /*out*/;
            resourceInputs["macAddress"] = undefined /*out*/;
            resourceInputs["memorySize"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Vps.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Vps resources.
 */
export interface VpsState {
    /**
     * The name of the availability zone the VPS is in.
     */
    availabilityZone?: pulumi.Input<string>;
    /**
     * The VPS cpu count.
     */
    cpus?: pulumi.Input<number>;
    /**
     * The name that can be set by customer.
     */
    description?: pulumi.Input<string>;
    /**
     * The VPS disk size in kB.
     */
    diskSize?: pulumi.Input<number>;
    /**
     * The flavour of OS installation: 'installer', 'preinstallable' or 'cloudinit'.
     */
    installFlavour?: pulumi.Input<string>;
    /**
     * Base64 encoded preseed / kickstart / cloudinit instructions, when installing unattended.
     */
    installText?: pulumi.Input<string>;
    /**
     * The VPS main ipAddress.
     */
    ipAddress?: pulumi.Input<string>;
    /**
     * All IPV4 addresses associated with this VPS.
     */
    ipv4Addresses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * All IPV6 addresses associated with this VPS.
     */
    ipv6Addresses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * If the VPS is administratively blocked.
     */
    isBlocked?: pulumi.Input<boolean>;
    /**
     * If this VPS is locked by the customer.
     */
    isCustomerLocked?: pulumi.Input<boolean>;
    /**
     * The VPS macaddress.
     */
    macAddress?: pulumi.Input<string>;
    /**
     * The VPS memory size in kB.
     */
    memorySize?: pulumi.Input<number>;
    /**
     * The unique VPS name.
     */
    name?: pulumi.Input<string>;
    /**
     * The VPS OperatingSystem.
     */
    operatingSystem?: pulumi.Input<string>;
    /**
     * The product name.
     */
    productName?: pulumi.Input<string>;
    /**
     * The VPS status, either 'created', 'installing', 'running', 'stopped' or 'paused'.
     */
    status?: pulumi.Input<string>;
    /**
     * The custom tags added to this VPS.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a Vps resource.
 */
export interface VpsArgs {
    /**
     * The name of the availability zone the VPS is in.
     */
    availabilityZone?: pulumi.Input<string>;
    /**
     * The name that can be set by customer.
     */
    description?: pulumi.Input<string>;
    /**
     * The flavour of OS installation: 'installer', 'preinstallable' or 'cloudinit'.
     */
    installFlavour?: pulumi.Input<string>;
    /**
     * Base64 encoded preseed / kickstart / cloudinit instructions, when installing unattended.
     */
    installText?: pulumi.Input<string>;
    /**
     * The VPS OperatingSystem.
     */
    operatingSystem: pulumi.Input<string>;
    /**
     * The product name.
     */
    productName: pulumi.Input<string>;
}
