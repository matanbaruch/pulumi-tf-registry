// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class VpsFirewall extends pulumi.CustomResource {
    /**
     * Get an existing VpsFirewall resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VpsFirewallState, opts?: pulumi.CustomResourceOptions): VpsFirewall {
        return new VpsFirewall(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'transip:index/vpsFirewall:VpsFirewall';

    /**
     * Returns true if the given object is an instance of VpsFirewall.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VpsFirewall {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VpsFirewall.__pulumiType;
    }

    /**
     * Firewall rules
     */
    public readonly inboundRules!: pulumi.Output<outputs.VpsFirewallInboundRule[] | undefined>;
    /**
     * Whether the firewall is enabled for this VPS
     */
    public readonly isEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * Name of the VPS
     */
    public readonly vpsName!: pulumi.Output<string>;

    /**
     * Create a VpsFirewall resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VpsFirewallArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VpsFirewallArgs | VpsFirewallState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VpsFirewallState | undefined;
            resourceInputs["inboundRules"] = state ? state.inboundRules : undefined;
            resourceInputs["isEnabled"] = state ? state.isEnabled : undefined;
            resourceInputs["vpsName"] = state ? state.vpsName : undefined;
        } else {
            const args = argsOrState as VpsFirewallArgs | undefined;
            if ((!args || args.vpsName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpsName'");
            }
            resourceInputs["inboundRules"] = args ? args.inboundRules : undefined;
            resourceInputs["isEnabled"] = args ? args.isEnabled : undefined;
            resourceInputs["vpsName"] = args ? args.vpsName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VpsFirewall.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VpsFirewall resources.
 */
export interface VpsFirewallState {
    /**
     * Firewall rules
     */
    inboundRules?: pulumi.Input<pulumi.Input<inputs.VpsFirewallInboundRule>[]>;
    /**
     * Whether the firewall is enabled for this VPS
     */
    isEnabled?: pulumi.Input<boolean>;
    /**
     * Name of the VPS
     */
    vpsName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VpsFirewall resource.
 */
export interface VpsFirewallArgs {
    /**
     * Firewall rules
     */
    inboundRules?: pulumi.Input<pulumi.Input<inputs.VpsFirewallInboundRule>[]>;
    /**
     * Whether the firewall is enabled for this VPS
     */
    isEnabled?: pulumi.Input<boolean>;
    /**
     * Name of the VPS
     */
    vpsName: pulumi.Input<string>;
}
