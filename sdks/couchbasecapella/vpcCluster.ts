// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class VpcCluster extends pulumi.CustomResource {
    /**
     * Get an existing VpcCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VpcClusterState, opts?: pulumi.CustomResourceOptions): VpcCluster {
        return new VpcCluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'couchbasecapella:index/vpcCluster:VpcCluster';

    /**
     * Returns true if the given object is an instance of VpcCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VpcCluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VpcCluster.__pulumiType;
    }

    /**
     * ID of the Cloud the Cluster will be deployed in
     */
    public readonly cloudId!: pulumi.Output<string>;
    /**
     * Name of the Cluster
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * ID of the Project
     */
    public readonly projectId!: pulumi.Output<string>;
    /**
     * Server Configuration of the Cluster
     */
    public readonly servers!: pulumi.Output<outputs.VpcClusterServer[]>;
    public readonly timeouts!: pulumi.Output<outputs.VpcClusterTimeouts | undefined>;

    /**
     * Create a VpcCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VpcClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VpcClusterArgs | VpcClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VpcClusterState | undefined;
            resourceInputs["cloudId"] = state ? state.cloudId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["servers"] = state ? state.servers : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as VpcClusterArgs | undefined;
            if ((!args || args.cloudId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cloudId'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            if ((!args || args.servers === undefined) && !opts.urn) {
                throw new Error("Missing required property 'servers'");
            }
            resourceInputs["cloudId"] = args ? args.cloudId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["servers"] = args ? args.servers : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VpcCluster.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VpcCluster resources.
 */
export interface VpcClusterState {
    /**
     * ID of the Cloud the Cluster will be deployed in
     */
    cloudId?: pulumi.Input<string>;
    /**
     * Name of the Cluster
     */
    name?: pulumi.Input<string>;
    /**
     * ID of the Project
     */
    projectId?: pulumi.Input<string>;
    /**
     * Server Configuration of the Cluster
     */
    servers?: pulumi.Input<pulumi.Input<inputs.VpcClusterServer>[]>;
    timeouts?: pulumi.Input<inputs.VpcClusterTimeouts>;
}

/**
 * The set of arguments for constructing a VpcCluster resource.
 */
export interface VpcClusterArgs {
    /**
     * ID of the Cloud the Cluster will be deployed in
     */
    cloudId: pulumi.Input<string>;
    /**
     * Name of the Cluster
     */
    name?: pulumi.Input<string>;
    /**
     * ID of the Project
     */
    projectId: pulumi.Input<string>;
    /**
     * Server Configuration of the Cluster
     */
    servers: pulumi.Input<pulumi.Input<inputs.VpcClusterServer>[]>;
    timeouts?: pulumi.Input<inputs.VpcClusterTimeouts>;
}
