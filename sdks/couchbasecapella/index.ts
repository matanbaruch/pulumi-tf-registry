// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { BucketArgs, BucketState } from "./bucket";
export type Bucket = import("./bucket").Bucket;
export const Bucket: typeof import("./bucket").Bucket = null as any;
utilities.lazyLoad(exports, ["Bucket"], () => require("./bucket"));

export { DatabaseUserArgs, DatabaseUserState } from "./databaseUser";
export type DatabaseUser = import("./databaseUser").DatabaseUser;
export const DatabaseUser: typeof import("./databaseUser").DatabaseUser = null as any;
utilities.lazyLoad(exports, ["DatabaseUser"], () => require("./databaseUser"));

export { HostedClusterArgs, HostedClusterState } from "./hostedCluster";
export type HostedCluster = import("./hostedCluster").HostedCluster;
export const HostedCluster: typeof import("./hostedCluster").HostedCluster = null as any;
utilities.lazyLoad(exports, ["HostedCluster"], () => require("./hostedCluster"));

export { ProjectArgs, ProjectState } from "./project";
export type Project = import("./project").Project;
export const Project: typeof import("./project").Project = null as any;
utilities.lazyLoad(exports, ["Project"], () => require("./project"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { VpcClusterArgs, VpcClusterState } from "./vpcCluster";
export type VpcCluster = import("./vpcCluster").VpcCluster;
export const VpcCluster: typeof import("./vpcCluster").VpcCluster = null as any;
utilities.lazyLoad(exports, ["VpcCluster"], () => require("./vpcCluster"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "couchbasecapella:index/bucket:Bucket":
                return new Bucket(name, <any>undefined, { urn })
            case "couchbasecapella:index/databaseUser:DatabaseUser":
                return new DatabaseUser(name, <any>undefined, { urn })
            case "couchbasecapella:index/hostedCluster:HostedCluster":
                return new HostedCluster(name, <any>undefined, { urn })
            case "couchbasecapella:index/project:Project":
                return new Project(name, <any>undefined, { urn })
            case "couchbasecapella:index/vpcCluster:VpcCluster":
                return new VpcCluster(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("couchbasecapella", "index/bucket", _module)
pulumi.runtime.registerResourceModule("couchbasecapella", "index/databaseUser", _module)
pulumi.runtime.registerResourceModule("couchbasecapella", "index/hostedCluster", _module)
pulumi.runtime.registerResourceModule("couchbasecapella", "index/project", _module)
pulumi.runtime.registerResourceModule("couchbasecapella", "index/vpcCluster", _module)
pulumi.runtime.registerResourcePackage("couchbasecapella", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:couchbasecapella") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
