// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class HostedCluster extends pulumi.CustomResource {
    /**
     * Get an existing HostedCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: HostedClusterState, opts?: pulumi.CustomResourceOptions): HostedCluster {
        return new HostedCluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'couchbasecapella:index/hostedCluster:HostedCluster';

    /**
     * Returns true if the given object is an instance of HostedCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is HostedCluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === HostedCluster.__pulumiType;
    }

    /**
     * A description for the Cluster
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Name of the Cluster
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The place where the Cluster is deployed
     */
    public readonly places!: pulumi.Output<outputs.HostedClusterPlace[]>;
    /**
     * ID of the Project the Cluster is contained in
     */
    public readonly projectId!: pulumi.Output<string>;
    /**
     * Configuration of the servers in Cluster
     */
    public readonly servers!: pulumi.Output<outputs.HostedClusterServer[]>;
    /**
     * Support Package for the Cluster
     */
    public readonly supportPackages!: pulumi.Output<outputs.HostedClusterSupportPackage[]>;
    public readonly timeouts!: pulumi.Output<outputs.HostedClusterTimeouts | undefined>;

    /**
     * Create a HostedCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: HostedClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: HostedClusterArgs | HostedClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as HostedClusterState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["places"] = state ? state.places : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["servers"] = state ? state.servers : undefined;
            resourceInputs["supportPackages"] = state ? state.supportPackages : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as HostedClusterArgs | undefined;
            if ((!args || args.places === undefined) && !opts.urn) {
                throw new Error("Missing required property 'places'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            if ((!args || args.servers === undefined) && !opts.urn) {
                throw new Error("Missing required property 'servers'");
            }
            if ((!args || args.supportPackages === undefined) && !opts.urn) {
                throw new Error("Missing required property 'supportPackages'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["places"] = args ? args.places : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["servers"] = args ? args.servers : undefined;
            resourceInputs["supportPackages"] = args ? args.supportPackages : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(HostedCluster.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering HostedCluster resources.
 */
export interface HostedClusterState {
    /**
     * A description for the Cluster
     */
    description?: pulumi.Input<string>;
    /**
     * Name of the Cluster
     */
    name?: pulumi.Input<string>;
    /**
     * The place where the Cluster is deployed
     */
    places?: pulumi.Input<pulumi.Input<inputs.HostedClusterPlace>[]>;
    /**
     * ID of the Project the Cluster is contained in
     */
    projectId?: pulumi.Input<string>;
    /**
     * Configuration of the servers in Cluster
     */
    servers?: pulumi.Input<pulumi.Input<inputs.HostedClusterServer>[]>;
    /**
     * Support Package for the Cluster
     */
    supportPackages?: pulumi.Input<pulumi.Input<inputs.HostedClusterSupportPackage>[]>;
    timeouts?: pulumi.Input<inputs.HostedClusterTimeouts>;
}

/**
 * The set of arguments for constructing a HostedCluster resource.
 */
export interface HostedClusterArgs {
    /**
     * A description for the Cluster
     */
    description?: pulumi.Input<string>;
    /**
     * Name of the Cluster
     */
    name?: pulumi.Input<string>;
    /**
     * The place where the Cluster is deployed
     */
    places: pulumi.Input<pulumi.Input<inputs.HostedClusterPlace>[]>;
    /**
     * ID of the Project the Cluster is contained in
     */
    projectId: pulumi.Input<string>;
    /**
     * Configuration of the servers in Cluster
     */
    servers: pulumi.Input<pulumi.Input<inputs.HostedClusterServer>[]>;
    /**
     * Support Package for the Cluster
     */
    supportPackages: pulumi.Input<pulumi.Input<inputs.HostedClusterSupportPackage>[]>;
    timeouts?: pulumi.Input<inputs.HostedClusterTimeouts>;
}
