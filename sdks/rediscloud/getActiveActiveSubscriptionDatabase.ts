// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getActiveActiveSubscriptionDatabase(args: GetActiveActiveSubscriptionDatabaseArgs, opts?: pulumi.InvokeOptions): Promise<GetActiveActiveSubscriptionDatabaseResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("rediscloud:index/getActiveActiveSubscriptionDatabase:getActiveActiveSubscriptionDatabase", {
        "dbId": args.dbId,
        "id": args.id,
        "name": args.name,
        "subscriptionId": args.subscriptionId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getActiveActiveSubscriptionDatabase.
 */
export interface GetActiveActiveSubscriptionDatabaseArgs {
    dbId?: number;
    id?: string;
    name?: string;
    subscriptionId: number;
}

/**
 * A collection of values returned by getActiveActiveSubscriptionDatabase.
 */
export interface GetActiveActiveSubscriptionDatabaseResult {
    readonly dataEviction: string;
    readonly dbId: number;
    readonly enableTls: boolean;
    readonly externalEndpointForOssClusterApi: boolean;
    readonly globalModules: string[];
    readonly id: string;
    readonly latestBackupStatuses: outputs.GetActiveActiveSubscriptionDatabaseLatestBackupStatus[];
    readonly latestImportStatuses: outputs.GetActiveActiveSubscriptionDatabaseLatestImportStatus[];
    readonly memoryLimitInGb: number;
    readonly name: string;
    readonly privateEndpoint: {[key: string]: string};
    readonly publicEndpoint: {[key: string]: string};
    readonly subscriptionId: number;
    readonly supportOssClusterApi: boolean;
}
export function getActiveActiveSubscriptionDatabaseOutput(args: GetActiveActiveSubscriptionDatabaseOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetActiveActiveSubscriptionDatabaseResult> {
    return pulumi.output(args).apply((a: any) => getActiveActiveSubscriptionDatabase(a, opts))
}

/**
 * A collection of arguments for invoking getActiveActiveSubscriptionDatabase.
 */
export interface GetActiveActiveSubscriptionDatabaseOutputArgs {
    dbId?: pulumi.Input<number>;
    id?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    subscriptionId: pulumi.Input<number>;
}
