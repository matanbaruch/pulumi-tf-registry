// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getSubscriptionPeerings(args: GetSubscriptionPeeringsArgs, opts?: pulumi.InvokeOptions): Promise<GetSubscriptionPeeringsResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("rediscloud:index/getSubscriptionPeerings:getSubscriptionPeerings", {
        "id": args.id,
        "status": args.status,
        "subscriptionId": args.subscriptionId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getSubscriptionPeerings.
 */
export interface GetSubscriptionPeeringsArgs {
    id?: string;
    status?: string;
    subscriptionId: string;
}

/**
 * A collection of values returned by getSubscriptionPeerings.
 */
export interface GetSubscriptionPeeringsResult {
    readonly id: string;
    readonly peerings: outputs.GetSubscriptionPeeringsPeering[];
    readonly status?: string;
    readonly subscriptionId: string;
}
export function getSubscriptionPeeringsOutput(args: GetSubscriptionPeeringsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetSubscriptionPeeringsResult> {
    return pulumi.output(args).apply((a: any) => getSubscriptionPeerings(a, opts))
}

/**
 * A collection of arguments for invoking getSubscriptionPeerings.
 */
export interface GetSubscriptionPeeringsOutputArgs {
    id?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    subscriptionId: pulumi.Input<string>;
}
