// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AclRoleArgs, AclRoleState } from "./aclRole";
export type AclRole = import("./aclRole").AclRole;
export const AclRole: typeof import("./aclRole").AclRole = null as any;
utilities.lazyLoad(exports, ["AclRole"], () => require("./aclRole"));

export { AclRuleArgs, AclRuleState } from "./aclRule";
export type AclRule = import("./aclRule").AclRule;
export const AclRule: typeof import("./aclRule").AclRule = null as any;
utilities.lazyLoad(exports, ["AclRule"], () => require("./aclRule"));

export { AclUserArgs, AclUserState } from "./aclUser";
export type AclUser = import("./aclUser").AclUser;
export const AclUser: typeof import("./aclUser").AclUser = null as any;
utilities.lazyLoad(exports, ["AclUser"], () => require("./aclUser"));

export { ActiveActiveSubscriptionArgs, ActiveActiveSubscriptionState } from "./activeActiveSubscription";
export type ActiveActiveSubscription = import("./activeActiveSubscription").ActiveActiveSubscription;
export const ActiveActiveSubscription: typeof import("./activeActiveSubscription").ActiveActiveSubscription = null as any;
utilities.lazyLoad(exports, ["ActiveActiveSubscription"], () => require("./activeActiveSubscription"));

export { ActiveActiveSubscriptionDatabaseArgs, ActiveActiveSubscriptionDatabaseState } from "./activeActiveSubscriptionDatabase";
export type ActiveActiveSubscriptionDatabase = import("./activeActiveSubscriptionDatabase").ActiveActiveSubscriptionDatabase;
export const ActiveActiveSubscriptionDatabase: typeof import("./activeActiveSubscriptionDatabase").ActiveActiveSubscriptionDatabase = null as any;
utilities.lazyLoad(exports, ["ActiveActiveSubscriptionDatabase"], () => require("./activeActiveSubscriptionDatabase"));

export { ActiveActiveSubscriptionPeeringArgs, ActiveActiveSubscriptionPeeringState } from "./activeActiveSubscriptionPeering";
export type ActiveActiveSubscriptionPeering = import("./activeActiveSubscriptionPeering").ActiveActiveSubscriptionPeering;
export const ActiveActiveSubscriptionPeering: typeof import("./activeActiveSubscriptionPeering").ActiveActiveSubscriptionPeering = null as any;
utilities.lazyLoad(exports, ["ActiveActiveSubscriptionPeering"], () => require("./activeActiveSubscriptionPeering"));

export { ActiveActiveSubscriptionRegionsArgs, ActiveActiveSubscriptionRegionsState } from "./activeActiveSubscriptionRegions";
export type ActiveActiveSubscriptionRegions = import("./activeActiveSubscriptionRegions").ActiveActiveSubscriptionRegions;
export const ActiveActiveSubscriptionRegions: typeof import("./activeActiveSubscriptionRegions").ActiveActiveSubscriptionRegions = null as any;
utilities.lazyLoad(exports, ["ActiveActiveSubscriptionRegions"], () => require("./activeActiveSubscriptionRegions"));

export { ActiveActiveTransitGatewayAttachmentArgs, ActiveActiveTransitGatewayAttachmentState } from "./activeActiveTransitGatewayAttachment";
export type ActiveActiveTransitGatewayAttachment = import("./activeActiveTransitGatewayAttachment").ActiveActiveTransitGatewayAttachment;
export const ActiveActiveTransitGatewayAttachment: typeof import("./activeActiveTransitGatewayAttachment").ActiveActiveTransitGatewayAttachment = null as any;
utilities.lazyLoad(exports, ["ActiveActiveTransitGatewayAttachment"], () => require("./activeActiveTransitGatewayAttachment"));

export { CloudAccountArgs, CloudAccountState } from "./cloudAccount";
export type CloudAccount = import("./cloudAccount").CloudAccount;
export const CloudAccount: typeof import("./cloudAccount").CloudAccount = null as any;
utilities.lazyLoad(exports, ["CloudAccount"], () => require("./cloudAccount"));

export { EssentialsDatabaseArgs, EssentialsDatabaseState } from "./essentialsDatabase";
export type EssentialsDatabase = import("./essentialsDatabase").EssentialsDatabase;
export const EssentialsDatabase: typeof import("./essentialsDatabase").EssentialsDatabase = null as any;
utilities.lazyLoad(exports, ["EssentialsDatabase"], () => require("./essentialsDatabase"));

export { EssentialsSubscriptionArgs, EssentialsSubscriptionState } from "./essentialsSubscription";
export type EssentialsSubscription = import("./essentialsSubscription").EssentialsSubscription;
export const EssentialsSubscription: typeof import("./essentialsSubscription").EssentialsSubscription = null as any;
utilities.lazyLoad(exports, ["EssentialsSubscription"], () => require("./essentialsSubscription"));

export { GetAclRoleArgs, GetAclRoleResult, GetAclRoleOutputArgs } from "./getAclRole";
export const getAclRole: typeof import("./getAclRole").getAclRole = null as any;
export const getAclRoleOutput: typeof import("./getAclRole").getAclRoleOutput = null as any;
utilities.lazyLoad(exports, ["getAclRole","getAclRoleOutput"], () => require("./getAclRole"));

export { GetAclRuleArgs, GetAclRuleResult, GetAclRuleOutputArgs } from "./getAclRule";
export const getAclRule: typeof import("./getAclRule").getAclRule = null as any;
export const getAclRuleOutput: typeof import("./getAclRule").getAclRuleOutput = null as any;
utilities.lazyLoad(exports, ["getAclRule","getAclRuleOutput"], () => require("./getAclRule"));

export { GetAclUserArgs, GetAclUserResult, GetAclUserOutputArgs } from "./getAclUser";
export const getAclUser: typeof import("./getAclUser").getAclUser = null as any;
export const getAclUserOutput: typeof import("./getAclUser").getAclUserOutput = null as any;
utilities.lazyLoad(exports, ["getAclUser","getAclUserOutput"], () => require("./getAclUser"));

export { GetActiveActiveSubscriptionArgs, GetActiveActiveSubscriptionResult, GetActiveActiveSubscriptionOutputArgs } from "./getActiveActiveSubscription";
export const getActiveActiveSubscription: typeof import("./getActiveActiveSubscription").getActiveActiveSubscription = null as any;
export const getActiveActiveSubscriptionOutput: typeof import("./getActiveActiveSubscription").getActiveActiveSubscriptionOutput = null as any;
utilities.lazyLoad(exports, ["getActiveActiveSubscription","getActiveActiveSubscriptionOutput"], () => require("./getActiveActiveSubscription"));

export { GetActiveActiveSubscriptionDatabaseArgs, GetActiveActiveSubscriptionDatabaseResult, GetActiveActiveSubscriptionDatabaseOutputArgs } from "./getActiveActiveSubscriptionDatabase";
export const getActiveActiveSubscriptionDatabase: typeof import("./getActiveActiveSubscriptionDatabase").getActiveActiveSubscriptionDatabase = null as any;
export const getActiveActiveSubscriptionDatabaseOutput: typeof import("./getActiveActiveSubscriptionDatabase").getActiveActiveSubscriptionDatabaseOutput = null as any;
utilities.lazyLoad(exports, ["getActiveActiveSubscriptionDatabase","getActiveActiveSubscriptionDatabaseOutput"], () => require("./getActiveActiveSubscriptionDatabase"));

export { GetActiveActiveTransitGatewayArgs, GetActiveActiveTransitGatewayResult, GetActiveActiveTransitGatewayOutputArgs } from "./getActiveActiveTransitGateway";
export const getActiveActiveTransitGateway: typeof import("./getActiveActiveTransitGateway").getActiveActiveTransitGateway = null as any;
export const getActiveActiveTransitGatewayOutput: typeof import("./getActiveActiveTransitGateway").getActiveActiveTransitGatewayOutput = null as any;
utilities.lazyLoad(exports, ["getActiveActiveTransitGateway","getActiveActiveTransitGatewayOutput"], () => require("./getActiveActiveTransitGateway"));

export { GetCloudAccountArgs, GetCloudAccountResult, GetCloudAccountOutputArgs } from "./getCloudAccount";
export const getCloudAccount: typeof import("./getCloudAccount").getCloudAccount = null as any;
export const getCloudAccountOutput: typeof import("./getCloudAccount").getCloudAccountOutput = null as any;
utilities.lazyLoad(exports, ["getCloudAccount","getCloudAccountOutput"], () => require("./getCloudAccount"));

export { GetDataPersistenceArgs, GetDataPersistenceResult, GetDataPersistenceOutputArgs } from "./getDataPersistence";
export const getDataPersistence: typeof import("./getDataPersistence").getDataPersistence = null as any;
export const getDataPersistenceOutput: typeof import("./getDataPersistence").getDataPersistenceOutput = null as any;
utilities.lazyLoad(exports, ["getDataPersistence","getDataPersistenceOutput"], () => require("./getDataPersistence"));

export { GetDatabaseArgs, GetDatabaseResult, GetDatabaseOutputArgs } from "./getDatabase";
export const getDatabase: typeof import("./getDatabase").getDatabase = null as any;
export const getDatabaseOutput: typeof import("./getDatabase").getDatabaseOutput = null as any;
utilities.lazyLoad(exports, ["getDatabase","getDatabaseOutput"], () => require("./getDatabase"));

export { GetDatabaseModulesArgs, GetDatabaseModulesResult, GetDatabaseModulesOutputArgs } from "./getDatabaseModules";
export const getDatabaseModules: typeof import("./getDatabaseModules").getDatabaseModules = null as any;
export const getDatabaseModulesOutput: typeof import("./getDatabaseModules").getDatabaseModulesOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseModules","getDatabaseModulesOutput"], () => require("./getDatabaseModules"));

export { GetEssentialsDatabaseArgs, GetEssentialsDatabaseResult, GetEssentialsDatabaseOutputArgs } from "./getEssentialsDatabase";
export const getEssentialsDatabase: typeof import("./getEssentialsDatabase").getEssentialsDatabase = null as any;
export const getEssentialsDatabaseOutput: typeof import("./getEssentialsDatabase").getEssentialsDatabaseOutput = null as any;
utilities.lazyLoad(exports, ["getEssentialsDatabase","getEssentialsDatabaseOutput"], () => require("./getEssentialsDatabase"));

export { GetEssentialsPlanArgs, GetEssentialsPlanResult, GetEssentialsPlanOutputArgs } from "./getEssentialsPlan";
export const getEssentialsPlan: typeof import("./getEssentialsPlan").getEssentialsPlan = null as any;
export const getEssentialsPlanOutput: typeof import("./getEssentialsPlan").getEssentialsPlanOutput = null as any;
utilities.lazyLoad(exports, ["getEssentialsPlan","getEssentialsPlanOutput"], () => require("./getEssentialsPlan"));

export { GetEssentialsSubscriptionArgs, GetEssentialsSubscriptionResult, GetEssentialsSubscriptionOutputArgs } from "./getEssentialsSubscription";
export const getEssentialsSubscription: typeof import("./getEssentialsSubscription").getEssentialsSubscription = null as any;
export const getEssentialsSubscriptionOutput: typeof import("./getEssentialsSubscription").getEssentialsSubscriptionOutput = null as any;
utilities.lazyLoad(exports, ["getEssentialsSubscription","getEssentialsSubscriptionOutput"], () => require("./getEssentialsSubscription"));

export { GetPaymentMethodArgs, GetPaymentMethodResult, GetPaymentMethodOutputArgs } from "./getPaymentMethod";
export const getPaymentMethod: typeof import("./getPaymentMethod").getPaymentMethod = null as any;
export const getPaymentMethodOutput: typeof import("./getPaymentMethod").getPaymentMethodOutput = null as any;
utilities.lazyLoad(exports, ["getPaymentMethod","getPaymentMethodOutput"], () => require("./getPaymentMethod"));

export { GetRegionsArgs, GetRegionsResult, GetRegionsOutputArgs } from "./getRegions";
export const getRegions: typeof import("./getRegions").getRegions = null as any;
export const getRegionsOutput: typeof import("./getRegions").getRegionsOutput = null as any;
utilities.lazyLoad(exports, ["getRegions","getRegionsOutput"], () => require("./getRegions"));

export { GetSubscriptionArgs, GetSubscriptionResult, GetSubscriptionOutputArgs } from "./getSubscription";
export const getSubscription: typeof import("./getSubscription").getSubscription = null as any;
export const getSubscriptionOutput: typeof import("./getSubscription").getSubscriptionOutput = null as any;
utilities.lazyLoad(exports, ["getSubscription","getSubscriptionOutput"], () => require("./getSubscription"));

export { GetSubscriptionPeeringsArgs, GetSubscriptionPeeringsResult, GetSubscriptionPeeringsOutputArgs } from "./getSubscriptionPeerings";
export const getSubscriptionPeerings: typeof import("./getSubscriptionPeerings").getSubscriptionPeerings = null as any;
export const getSubscriptionPeeringsOutput: typeof import("./getSubscriptionPeerings").getSubscriptionPeeringsOutput = null as any;
utilities.lazyLoad(exports, ["getSubscriptionPeerings","getSubscriptionPeeringsOutput"], () => require("./getSubscriptionPeerings"));

export { GetTransitGatewayArgs, GetTransitGatewayResult, GetTransitGatewayOutputArgs } from "./getTransitGateway";
export const getTransitGateway: typeof import("./getTransitGateway").getTransitGateway = null as any;
export const getTransitGatewayOutput: typeof import("./getTransitGateway").getTransitGatewayOutput = null as any;
utilities.lazyLoad(exports, ["getTransitGateway","getTransitGatewayOutput"], () => require("./getTransitGateway"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { SubscriptionArgs, SubscriptionState } from "./subscription";
export type Subscription = import("./subscription").Subscription;
export const Subscription: typeof import("./subscription").Subscription = null as any;
utilities.lazyLoad(exports, ["Subscription"], () => require("./subscription"));

export { SubscriptionDatabaseArgs, SubscriptionDatabaseState } from "./subscriptionDatabase";
export type SubscriptionDatabase = import("./subscriptionDatabase").SubscriptionDatabase;
export const SubscriptionDatabase: typeof import("./subscriptionDatabase").SubscriptionDatabase = null as any;
utilities.lazyLoad(exports, ["SubscriptionDatabase"], () => require("./subscriptionDatabase"));

export { SubscriptionPeeringArgs, SubscriptionPeeringState } from "./subscriptionPeering";
export type SubscriptionPeering = import("./subscriptionPeering").SubscriptionPeering;
export const SubscriptionPeering: typeof import("./subscriptionPeering").SubscriptionPeering = null as any;
utilities.lazyLoad(exports, ["SubscriptionPeering"], () => require("./subscriptionPeering"));

export { TransitGatewayAttachmentArgs, TransitGatewayAttachmentState } from "./transitGatewayAttachment";
export type TransitGatewayAttachment = import("./transitGatewayAttachment").TransitGatewayAttachment;
export const TransitGatewayAttachment: typeof import("./transitGatewayAttachment").TransitGatewayAttachment = null as any;
utilities.lazyLoad(exports, ["TransitGatewayAttachment"], () => require("./transitGatewayAttachment"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "rediscloud:index/aclRole:AclRole":
                return new AclRole(name, <any>undefined, { urn })
            case "rediscloud:index/aclRule:AclRule":
                return new AclRule(name, <any>undefined, { urn })
            case "rediscloud:index/aclUser:AclUser":
                return new AclUser(name, <any>undefined, { urn })
            case "rediscloud:index/activeActiveSubscription:ActiveActiveSubscription":
                return new ActiveActiveSubscription(name, <any>undefined, { urn })
            case "rediscloud:index/activeActiveSubscriptionDatabase:ActiveActiveSubscriptionDatabase":
                return new ActiveActiveSubscriptionDatabase(name, <any>undefined, { urn })
            case "rediscloud:index/activeActiveSubscriptionPeering:ActiveActiveSubscriptionPeering":
                return new ActiveActiveSubscriptionPeering(name, <any>undefined, { urn })
            case "rediscloud:index/activeActiveSubscriptionRegions:ActiveActiveSubscriptionRegions":
                return new ActiveActiveSubscriptionRegions(name, <any>undefined, { urn })
            case "rediscloud:index/activeActiveTransitGatewayAttachment:ActiveActiveTransitGatewayAttachment":
                return new ActiveActiveTransitGatewayAttachment(name, <any>undefined, { urn })
            case "rediscloud:index/cloudAccount:CloudAccount":
                return new CloudAccount(name, <any>undefined, { urn })
            case "rediscloud:index/essentialsDatabase:EssentialsDatabase":
                return new EssentialsDatabase(name, <any>undefined, { urn })
            case "rediscloud:index/essentialsSubscription:EssentialsSubscription":
                return new EssentialsSubscription(name, <any>undefined, { urn })
            case "rediscloud:index/subscription:Subscription":
                return new Subscription(name, <any>undefined, { urn })
            case "rediscloud:index/subscriptionDatabase:SubscriptionDatabase":
                return new SubscriptionDatabase(name, <any>undefined, { urn })
            case "rediscloud:index/subscriptionPeering:SubscriptionPeering":
                return new SubscriptionPeering(name, <any>undefined, { urn })
            case "rediscloud:index/transitGatewayAttachment:TransitGatewayAttachment":
                return new TransitGatewayAttachment(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("rediscloud", "index/aclRole", _module)
pulumi.runtime.registerResourceModule("rediscloud", "index/aclRule", _module)
pulumi.runtime.registerResourceModule("rediscloud", "index/aclUser", _module)
pulumi.runtime.registerResourceModule("rediscloud", "index/activeActiveSubscription", _module)
pulumi.runtime.registerResourceModule("rediscloud", "index/activeActiveSubscriptionDatabase", _module)
pulumi.runtime.registerResourceModule("rediscloud", "index/activeActiveSubscriptionPeering", _module)
pulumi.runtime.registerResourceModule("rediscloud", "index/activeActiveSubscriptionRegions", _module)
pulumi.runtime.registerResourceModule("rediscloud", "index/activeActiveTransitGatewayAttachment", _module)
pulumi.runtime.registerResourceModule("rediscloud", "index/cloudAccount", _module)
pulumi.runtime.registerResourceModule("rediscloud", "index/essentialsDatabase", _module)
pulumi.runtime.registerResourceModule("rediscloud", "index/essentialsSubscription", _module)
pulumi.runtime.registerResourceModule("rediscloud", "index/subscription", _module)
pulumi.runtime.registerResourceModule("rediscloud", "index/subscriptionDatabase", _module)
pulumi.runtime.registerResourceModule("rediscloud", "index/subscriptionPeering", _module)
pulumi.runtime.registerResourceModule("rediscloud", "index/transitGatewayAttachment", _module)
pulumi.runtime.registerResourcePackage("rediscloud", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:rediscloud") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
