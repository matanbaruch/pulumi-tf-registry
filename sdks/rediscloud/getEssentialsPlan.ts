// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getEssentialsPlan(args?: GetEssentialsPlanArgs, opts?: pulumi.InvokeOptions): Promise<GetEssentialsPlanResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("rediscloud:index/getEssentialsPlan:getEssentialsPlan", {
        "availability": args.availability,
        "cloudProvider": args.cloudProvider,
        "id": args.id,
        "name": args.name,
        "region": args.region,
        "size": args.size,
        "sizeMeasurementUnit": args.sizeMeasurementUnit,
        "subscriptionId": args.subscriptionId,
        "supportDataPersistence": args.supportDataPersistence,
        "supportReplication": args.supportReplication,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getEssentialsPlan.
 */
export interface GetEssentialsPlanArgs {
    availability?: string;
    cloudProvider?: string;
    id?: number;
    name?: string;
    region?: string;
    size?: number;
    sizeMeasurementUnit?: string;
    subscriptionId?: number;
    supportDataPersistence?: boolean;
    supportReplication?: boolean;
}

/**
 * A collection of values returned by getEssentialsPlan.
 */
export interface GetEssentialsPlanResult {
    readonly availability: string;
    readonly cidrAllowRules: number;
    readonly cloudProvider: string;
    readonly connections: string;
    readonly customerSupport: string;
    readonly id: number;
    readonly maximumBandwidthInGb: number;
    readonly maximumDatabases: number;
    readonly maximumThroughput: number;
    readonly name: string;
    readonly price: number;
    readonly priceCurrency: string;
    readonly pricePeriod: string;
    readonly region: string;
    readonly regionId: number;
    readonly size: number;
    readonly sizeMeasurementUnit: string;
    readonly subscriptionId?: number;
    readonly supportClustering: boolean;
    readonly supportDataPersistence: boolean;
    readonly supportInstantAndDailyBackups: boolean;
    readonly supportReplication: boolean;
    readonly supportedAlerts: string[];
}
export function getEssentialsPlanOutput(args?: GetEssentialsPlanOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetEssentialsPlanResult> {
    return pulumi.output(args).apply((a: any) => getEssentialsPlan(a, opts))
}

/**
 * A collection of arguments for invoking getEssentialsPlan.
 */
export interface GetEssentialsPlanOutputArgs {
    availability?: pulumi.Input<string>;
    cloudProvider?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    size?: pulumi.Input<number>;
    sizeMeasurementUnit?: pulumi.Input<string>;
    subscriptionId?: pulumi.Input<number>;
    supportDataPersistence?: pulumi.Input<boolean>;
    supportReplication?: pulumi.Input<boolean>;
}
