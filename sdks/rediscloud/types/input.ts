// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface AclRoleRule {
    /**
     * A set of databases to whom this rule applies within the role
     */
    databases: pulumi.Input<pulumi.Input<inputs.AclRoleRuleDatabase>[]>;
    /**
     * The name of the rule
     */
    name: pulumi.Input<string>;
}

export interface AclRoleRuleDatabase {
    /**
     * The database (id)
     */
    database: pulumi.Input<number>;
    /**
     * For ActiveActive databases only
     */
    regions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The subscription (id) to which the database belongs
     */
    subscription: pulumi.Input<number>;
}

export interface AclRoleTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface AclRuleTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface AclUserTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface ActiveActiveSubscriptionCreationPlan {
    /**
     * Maximum memory usage for each database
     */
    memoryLimitInGb: pulumi.Input<number>;
    /**
     * Modules that will be used by the databases in this subscription.
     */
    modules?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The planned number of databases
     */
    quantity: pulumi.Input<number>;
    /**
     * Cloud networking details, per region (multiple regions for Active-Active cluster)
     */
    regions: pulumi.Input<pulumi.Input<inputs.ActiveActiveSubscriptionCreationPlanRegion>[]>;
}

export interface ActiveActiveSubscriptionCreationPlanRegion {
    /**
     * Deployment CIDR mask
     */
    networkingDeploymentCidr: pulumi.Input<string>;
    /**
     * Write operations per second for creation plan databases
     */
    readOperationsPerSecond: pulumi.Input<number>;
    /**
     * Deployment region as defined by cloud provider
     */
    region: pulumi.Input<string>;
    /**
     * Write operations per second for creation plan databases
     */
    writeOperationsPerSecond: pulumi.Input<number>;
}

export interface ActiveActiveSubscriptionDatabaseGlobalAlert {
    /**
     * Alert name
     */
    name: pulumi.Input<string>;
    /**
     * Alert value
     */
    value: pulumi.Input<number>;
}

export interface ActiveActiveSubscriptionDatabaseLatestImportStatus {
    errors: pulumi.Input<pulumi.Input<inputs.ActiveActiveSubscriptionDatabaseLatestImportStatusError>[]>;
    responses: pulumi.Input<pulumi.Input<inputs.ActiveActiveSubscriptionDatabaseLatestImportStatusResponse>[]>;
}

export interface ActiveActiveSubscriptionDatabaseLatestImportStatusError {
    description: pulumi.Input<string>;
    status: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface ActiveActiveSubscriptionDatabaseLatestImportStatusResponse {
    failureReason: pulumi.Input<string>;
    failureReasonParams: pulumi.Input<pulumi.Input<inputs.ActiveActiveSubscriptionDatabaseLatestImportStatusResponseFailureReasonParam>[]>;
    lastImportTime: pulumi.Input<string>;
    status: pulumi.Input<string>;
}

export interface ActiveActiveSubscriptionDatabaseLatestImportStatusResponseFailureReasonParam {
    key: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface ActiveActiveSubscriptionDatabaseOverrideRegion {
    /**
     * Details about the last backups that took place across all regions for this active-active database
     */
    latestBackupStatuses?: pulumi.Input<pulumi.Input<inputs.ActiveActiveSubscriptionDatabaseOverrideRegionLatestBackupStatus>[]>;
    /**
     * Region name
     */
    name: pulumi.Input<string>;
    /**
     * Set of alerts to enable on the database
     */
    overrideGlobalAlerts?: pulumi.Input<pulumi.Input<inputs.ActiveActiveSubscriptionDatabaseOverrideRegionOverrideGlobalAlert>[]>;
    /**
     * Rate of database data persistence (in persistent storage)
     */
    overrideGlobalDataPersistence?: pulumi.Input<string>;
    /**
     * Password used to access the database. If left empty, the password will be generated automatically
     */
    overrideGlobalPassword?: pulumi.Input<string>;
    /**
     * Set of CIDR addresses to allow access to the database
     */
    overrideGlobalSourceIps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * An object that specifies the backup options for the database in this region
     */
    remoteBackup?: pulumi.Input<inputs.ActiveActiveSubscriptionDatabaseOverrideRegionRemoteBackup>;
}

export interface ActiveActiveSubscriptionDatabaseOverrideRegionLatestBackupStatus {
    errors: pulumi.Input<pulumi.Input<inputs.ActiveActiveSubscriptionDatabaseOverrideRegionLatestBackupStatusError>[]>;
    responses: pulumi.Input<pulumi.Input<inputs.ActiveActiveSubscriptionDatabaseOverrideRegionLatestBackupStatusResponse>[]>;
}

export interface ActiveActiveSubscriptionDatabaseOverrideRegionLatestBackupStatusError {
    description: pulumi.Input<string>;
    status: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface ActiveActiveSubscriptionDatabaseOverrideRegionLatestBackupStatusResponse {
    failureReason: pulumi.Input<string>;
    lastBackupTime: pulumi.Input<string>;
    status: pulumi.Input<string>;
}

export interface ActiveActiveSubscriptionDatabaseOverrideRegionOverrideGlobalAlert {
    /**
     * Alert name
     */
    name: pulumi.Input<string>;
    /**
     * Alert value
     */
    value: pulumi.Input<number>;
}

export interface ActiveActiveSubscriptionDatabaseOverrideRegionRemoteBackup {
    /**
     * Defines the frequency of the automatic backup
     */
    interval: pulumi.Input<string>;
    /**
     * Defines a URI representing the backup storage location
     */
    storagePath: pulumi.Input<string>;
    /**
     * Defines the provider of the storage location
     */
    storageType: pulumi.Input<string>;
    /**
     * Defines the hour automatic backups are made - only applicable when interval is `every-12-hours` or `every-24-hours`
     */
    timeUtc?: pulumi.Input<string>;
}

export interface ActiveActiveSubscriptionDatabaseTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface ActiveActiveSubscriptionMaintenanceWindows {
    /**
     * Either automatic (Redis specified) or manual (User specified)
     */
    mode: pulumi.Input<string>;
    /**
     * A list of maintenance windows for manual-mode
     */
    windows?: pulumi.Input<pulumi.Input<inputs.ActiveActiveSubscriptionMaintenanceWindowsWindow>[]>;
}

export interface ActiveActiveSubscriptionMaintenanceWindowsWindow {
    /**
     * A list of days on which the window is open ('Monday', 'Tuesday' etc)
     */
    days: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * How long maintenance may take
     */
    durationInHours: pulumi.Input<number>;
    /**
     * What hour in the day (0-23) may maintenance start
     */
    startHour: pulumi.Input<number>;
}

export interface ActiveActiveSubscriptionPeeringTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
}

export interface ActiveActiveSubscriptionPricing {
    databaseName: pulumi.Input<string>;
    priceCurrency: pulumi.Input<string>;
    pricePerUnit: pulumi.Input<number>;
    pricePeriod: pulumi.Input<string>;
    quantity: pulumi.Input<number>;
    quantityMeasurement: pulumi.Input<string>;
    region: pulumi.Input<string>;
    type: pulumi.Input<string>;
    typeDetails: pulumi.Input<string>;
}

export interface ActiveActiveSubscriptionRegionsRegion {
    /**
     * The database resource
     */
    databases: pulumi.Input<pulumi.Input<inputs.ActiveActiveSubscriptionRegionsRegionDatabase>[]>;
    /**
     * The initial RESP version for all databases provisioned under this region.
     */
    localRespVersion?: pulumi.Input<string>;
    /**
     * Deployment CIDR mask
     */
    networkingDeploymentCidr: pulumi.Input<string>;
    /**
     * Defines whether the regions should be re-created
     */
    recreateRegion?: pulumi.Input<boolean>;
    /**
     * Deployment region as defined by cloud provider
     */
    region: pulumi.Input<string>;
    /**
     * The region id
     */
    regionId?: pulumi.Input<number>;
    /**
     * Identifier of the VPC to be peered
     */
    vpcId?: pulumi.Input<string>;
}

export interface ActiveActiveSubscriptionRegionsRegionDatabase {
    /**
     * A numeric id for the database
     */
    databaseId: pulumi.Input<number>;
    /**
     * A meaningful name to identify the database
     */
    databaseName: pulumi.Input<string>;
    /**
     * Details about the last backup that took place for this database
     */
    latestBackupStatuses?: pulumi.Input<pulumi.Input<inputs.ActiveActiveSubscriptionRegionsRegionDatabaseLatestBackupStatus>[]>;
    /**
     * Write operations per second for creation plan databases
     */
    localReadOperationsPerSecond: pulumi.Input<number>;
    /**
     * Write operations per second for creation plan databases
     */
    localWriteOperationsPerSecond: pulumi.Input<number>;
}

export interface ActiveActiveSubscriptionRegionsRegionDatabaseLatestBackupStatus {
    errors: pulumi.Input<pulumi.Input<inputs.ActiveActiveSubscriptionRegionsRegionDatabaseLatestBackupStatusError>[]>;
    responses: pulumi.Input<pulumi.Input<inputs.ActiveActiveSubscriptionRegionsRegionDatabaseLatestBackupStatusResponse>[]>;
}

export interface ActiveActiveSubscriptionRegionsRegionDatabaseLatestBackupStatusError {
    description: pulumi.Input<string>;
    status: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface ActiveActiveSubscriptionRegionsRegionDatabaseLatestBackupStatusResponse {
    failureReason: pulumi.Input<string>;
    lastBackupTime: pulumi.Input<string>;
    status: pulumi.Input<string>;
}

export interface ActiveActiveSubscriptionRegionsTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface ActiveActiveSubscriptionTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface ActiveActiveTransitGatewayAttachmentTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface CloudAccountTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface EssentialsDatabaseAlert {
    /**
     * Alert name
     */
    name: pulumi.Input<string>;
    /**
     * Alert value
     */
    value: pulumi.Input<number>;
}

export interface EssentialsDatabaseLatestBackupStatus {
    errors: pulumi.Input<pulumi.Input<inputs.EssentialsDatabaseLatestBackupStatusError>[]>;
    responses: pulumi.Input<pulumi.Input<inputs.EssentialsDatabaseLatestBackupStatusResponse>[]>;
}

export interface EssentialsDatabaseLatestBackupStatusError {
    description: pulumi.Input<string>;
    status: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface EssentialsDatabaseLatestBackupStatusResponse {
    failureReason: pulumi.Input<string>;
    lastBackupTime: pulumi.Input<string>;
    status: pulumi.Input<string>;
}

export interface EssentialsDatabaseLatestImportStatus {
    errors: pulumi.Input<pulumi.Input<inputs.EssentialsDatabaseLatestImportStatusError>[]>;
    responses: pulumi.Input<pulumi.Input<inputs.EssentialsDatabaseLatestImportStatusResponse>[]>;
}

export interface EssentialsDatabaseLatestImportStatusError {
    description: pulumi.Input<string>;
    status: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface EssentialsDatabaseLatestImportStatusResponse {
    failureReason: pulumi.Input<string>;
    failureReasonParams: pulumi.Input<pulumi.Input<inputs.EssentialsDatabaseLatestImportStatusResponseFailureReasonParam>[]>;
    lastImportTime: pulumi.Input<string>;
    status: pulumi.Input<string>;
}

export interface EssentialsDatabaseLatestImportStatusResponseFailureReasonParam {
    key: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface EssentialsDatabaseModule {
    name: pulumi.Input<string>;
}

export interface EssentialsDatabaseReplica {
    /**
     * A source database to replicate here
     */
    syncSources: pulumi.Input<pulumi.Input<inputs.EssentialsDatabaseReplicaSyncSource>[]>;
}

export interface EssentialsDatabaseReplicaSyncSource {
    /**
     * Defines if encryption should be used to connect to the sync source. If not provided and if the source is a Redis Cloud instance, it will automatically detect if the source uses encryption
     */
    encryption?: pulumi.Input<boolean>;
    /**
     * A Redis URI (sample format: 'redis://user:password@host:port)'. If the URI provided is Redis Cloud instance, only host and port should be provided (using the format: ['redis://endpoint1:6379', 'redis://endpoint2:6380'])
     */
    endpoint: pulumi.Input<string>;
    /**
     * TLS/SSL certificate chain of the sync source. If left null and if the source is a Redis Cloud instance, it will automatically detect the certificate to use
     */
    serverCert?: pulumi.Input<string>;
}

export interface EssentialsDatabaseTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface EssentialsSubscriptionTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface SubscriptionAllowlist {
    /**
     * Set of CIDR ranges that are allowed to access the databases associated with this subscription
     */
    cidrs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Set of security groups that are allowed to access the databases associated with this subscription
     */
    securityGroupIds: pulumi.Input<pulumi.Input<string>[]>;
}

export interface SubscriptionCloudProvider {
    /**
     * Cloud account identifier. Default: Redis Labs internal cloud account (using Cloud Account Id = 1 implies using Redis Labs internal cloud account). Note that a GCP subscription can be created only with Redis Labs internal cloud account
     */
    cloudAccountId?: pulumi.Input<string>;
    /**
     * The cloud provider to use with the subscription, (either `AWS` or `GCP`)
     */
    provider?: pulumi.Input<string>;
    /**
     * Cloud networking details, per region (single region or multiple regions for Active-Active cluster only)
     */
    regions: pulumi.Input<pulumi.Input<inputs.SubscriptionCloudProviderRegion>[]>;
}

export interface SubscriptionCloudProviderRegion {
    /**
     * Support deployment on multiple availability zones within the selected region
     */
    multipleAvailabilityZones?: pulumi.Input<boolean>;
    /**
     * Deployment CIDR mask
     */
    networkingDeploymentCidr: pulumi.Input<string>;
    /**
     * Either an existing VPC Id (already exists in the specific region) or create a new VPC (if no VPC is specified)
     */
    networkingVpcId?: pulumi.Input<string>;
    /**
     * List of networks used
     */
    networks?: pulumi.Input<pulumi.Input<inputs.SubscriptionCloudProviderRegionNetwork>[]>;
    /**
     * List of availability zones used
     */
    preferredAvailabilityZones?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Deployment region as defined by cloud provider
     */
    region: pulumi.Input<string>;
}

export interface SubscriptionCloudProviderRegionNetwork {
    networkingDeploymentCidr: pulumi.Input<string>;
    networkingSubnetId: pulumi.Input<string>;
    networkingVpcId: pulumi.Input<string>;
}

export interface SubscriptionCreationPlan {
    /**
     * Relevant only to ram-and-flash clusters. Estimated average size (measured in bytes) of the items stored in the database
     */
    averageItemSizeInBytes?: pulumi.Input<number>;
    /**
     * Maximum memory usage for each database
     */
    memoryLimitInGb: pulumi.Input<number>;
    /**
     * Modules that will be used by the databases in this subscription.
     */
    modules?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The planned number of databases
     */
    quantity: pulumi.Input<number>;
    /**
     * Databases replication
     */
    replication: pulumi.Input<boolean>;
    /**
     * Support Redis open-source (OSS) Cluster API
     */
    supportOssClusterApi?: pulumi.Input<boolean>;
    /**
     * Throughput measurement method, (either ‘number-of-shards’ or ‘operations-per-second’)
     */
    throughputMeasurementBy: pulumi.Input<string>;
    /**
     * Throughput value (as applies to selected measurement method)
     */
    throughputMeasurementValue: pulumi.Input<number>;
}

export interface SubscriptionDatabaseAlert {
    /**
     * Alert name
     */
    name: pulumi.Input<string>;
    /**
     * Alert value
     */
    value: pulumi.Input<number>;
}

export interface SubscriptionDatabaseLatestBackupStatus {
    errors: pulumi.Input<pulumi.Input<inputs.SubscriptionDatabaseLatestBackupStatusError>[]>;
    responses: pulumi.Input<pulumi.Input<inputs.SubscriptionDatabaseLatestBackupStatusResponse>[]>;
}

export interface SubscriptionDatabaseLatestBackupStatusError {
    description: pulumi.Input<string>;
    status: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface SubscriptionDatabaseLatestBackupStatusResponse {
    failureReason: pulumi.Input<string>;
    lastBackupTime: pulumi.Input<string>;
    status: pulumi.Input<string>;
}

export interface SubscriptionDatabaseLatestImportStatus {
    errors: pulumi.Input<pulumi.Input<inputs.SubscriptionDatabaseLatestImportStatusError>[]>;
    responses: pulumi.Input<pulumi.Input<inputs.SubscriptionDatabaseLatestImportStatusResponse>[]>;
}

export interface SubscriptionDatabaseLatestImportStatusError {
    description: pulumi.Input<string>;
    status: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface SubscriptionDatabaseLatestImportStatusResponse {
    failureReason: pulumi.Input<string>;
    failureReasonParams: pulumi.Input<pulumi.Input<inputs.SubscriptionDatabaseLatestImportStatusResponseFailureReasonParam>[]>;
    lastImportTime: pulumi.Input<string>;
    status: pulumi.Input<string>;
}

export interface SubscriptionDatabaseLatestImportStatusResponseFailureReasonParam {
    key: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface SubscriptionDatabaseModule {
    name: pulumi.Input<string>;
}

export interface SubscriptionDatabaseRemoteBackup {
    /**
     * Defines the frequency of the automatic backup
     */
    interval: pulumi.Input<string>;
    /**
     * Defines a URI representing the backup storage location
     */
    storagePath: pulumi.Input<string>;
    /**
     * Defines the provider of the storage location
     */
    storageType: pulumi.Input<string>;
    /**
     * Defines the hour automatic backups are made - only applicable when interval is `every-12-hours` or `every-24-hours`
     */
    timeUtc?: pulumi.Input<string>;
}

export interface SubscriptionDatabaseTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface SubscriptionMaintenanceWindows {
    /**
     * Either automatic (Redis specified) or manual (User specified)
     */
    mode: pulumi.Input<string>;
    /**
     * A list of maintenance windows for manual-mode
     */
    windows?: pulumi.Input<pulumi.Input<inputs.SubscriptionMaintenanceWindowsWindow>[]>;
}

export interface SubscriptionMaintenanceWindowsWindow {
    /**
     * A list of days on which the window is open ('Monday', 'Tuesday' etc)
     */
    days: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * How long maintenance may take
     */
    durationInHours: pulumi.Input<number>;
    /**
     * What hour in the day (0-23) may maintenance start
     */
    startHour: pulumi.Input<number>;
}

export interface SubscriptionPeeringTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
}

export interface SubscriptionPricing {
    databaseName: pulumi.Input<string>;
    priceCurrency: pulumi.Input<string>;
    pricePerUnit: pulumi.Input<number>;
    pricePeriod: pulumi.Input<string>;
    quantity: pulumi.Input<number>;
    quantityMeasurement: pulumi.Input<string>;
    region: pulumi.Input<string>;
    type: pulumi.Input<string>;
    typeDetails: pulumi.Input<string>;
}

export interface SubscriptionTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface TransitGatewayAttachmentTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}
