// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ActiveActiveSubscription extends pulumi.CustomResource {
    /**
     * Get an existing ActiveActiveSubscription resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ActiveActiveSubscriptionState, opts?: pulumi.CustomResourceOptions): ActiveActiveSubscription {
        return new ActiveActiveSubscription(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'rediscloud:index/activeActiveSubscription:ActiveActiveSubscription';

    /**
     * Returns true if the given object is an instance of ActiveActiveSubscription.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ActiveActiveSubscription {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ActiveActiveSubscription.__pulumiType;
    }

    /**
     * A cloud provider string either GCP or AWS
     */
    public readonly cloudProvider!: pulumi.Output<string | undefined>;
    /**
     * Information about the planned databases used to optimise the database infrastructure. This information is only used when
     * creating a new subscription and any changes will be ignored after this.
     */
    public readonly creationPlan!: pulumi.Output<outputs.ActiveActiveSubscriptionCreationPlan | undefined>;
    /**
     * Specify the subscription's maintenance windows
     */
    public readonly maintenanceWindows!: pulumi.Output<outputs.ActiveActiveSubscriptionMaintenanceWindows | undefined>;
    /**
     * A meaningful name to identify the subscription
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Payment method for the requested subscription. If credit card is specified, the payment method id must be defined. This
     * information is only used when creating a new subscription and any changes will be ignored after this.
     */
    public readonly paymentMethod!: pulumi.Output<string | undefined>;
    /**
     * A valid payment method pre-defined in the current account
     */
    public readonly paymentMethodId!: pulumi.Output<string>;
    /**
     * Pricing details totalled over this Subscription
     */
    public /*out*/ readonly pricings!: pulumi.Output<outputs.ActiveActiveSubscriptionPricing[]>;
    /**
     * Version of Redis to create
     */
    public readonly redisVersion!: pulumi.Output<string | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.ActiveActiveSubscriptionTimeouts | undefined>;

    /**
     * Create a ActiveActiveSubscription resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ActiveActiveSubscriptionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ActiveActiveSubscriptionArgs | ActiveActiveSubscriptionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ActiveActiveSubscriptionState | undefined;
            resourceInputs["cloudProvider"] = state ? state.cloudProvider : undefined;
            resourceInputs["creationPlan"] = state ? state.creationPlan : undefined;
            resourceInputs["maintenanceWindows"] = state ? state.maintenanceWindows : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["paymentMethod"] = state ? state.paymentMethod : undefined;
            resourceInputs["paymentMethodId"] = state ? state.paymentMethodId : undefined;
            resourceInputs["pricings"] = state ? state.pricings : undefined;
            resourceInputs["redisVersion"] = state ? state.redisVersion : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as ActiveActiveSubscriptionArgs | undefined;
            resourceInputs["cloudProvider"] = args ? args.cloudProvider : undefined;
            resourceInputs["creationPlan"] = args ? args.creationPlan : undefined;
            resourceInputs["maintenanceWindows"] = args ? args.maintenanceWindows : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["paymentMethod"] = args ? args.paymentMethod : undefined;
            resourceInputs["paymentMethodId"] = args ? args.paymentMethodId : undefined;
            resourceInputs["redisVersion"] = args ? args.redisVersion : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["pricings"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ActiveActiveSubscription.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ActiveActiveSubscription resources.
 */
export interface ActiveActiveSubscriptionState {
    /**
     * A cloud provider string either GCP or AWS
     */
    cloudProvider?: pulumi.Input<string>;
    /**
     * Information about the planned databases used to optimise the database infrastructure. This information is only used when
     * creating a new subscription and any changes will be ignored after this.
     */
    creationPlan?: pulumi.Input<inputs.ActiveActiveSubscriptionCreationPlan>;
    /**
     * Specify the subscription's maintenance windows
     */
    maintenanceWindows?: pulumi.Input<inputs.ActiveActiveSubscriptionMaintenanceWindows>;
    /**
     * A meaningful name to identify the subscription
     */
    name?: pulumi.Input<string>;
    /**
     * Payment method for the requested subscription. If credit card is specified, the payment method id must be defined. This
     * information is only used when creating a new subscription and any changes will be ignored after this.
     */
    paymentMethod?: pulumi.Input<string>;
    /**
     * A valid payment method pre-defined in the current account
     */
    paymentMethodId?: pulumi.Input<string>;
    /**
     * Pricing details totalled over this Subscription
     */
    pricings?: pulumi.Input<pulumi.Input<inputs.ActiveActiveSubscriptionPricing>[]>;
    /**
     * Version of Redis to create
     */
    redisVersion?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ActiveActiveSubscriptionTimeouts>;
}

/**
 * The set of arguments for constructing a ActiveActiveSubscription resource.
 */
export interface ActiveActiveSubscriptionArgs {
    /**
     * A cloud provider string either GCP or AWS
     */
    cloudProvider?: pulumi.Input<string>;
    /**
     * Information about the planned databases used to optimise the database infrastructure. This information is only used when
     * creating a new subscription and any changes will be ignored after this.
     */
    creationPlan?: pulumi.Input<inputs.ActiveActiveSubscriptionCreationPlan>;
    /**
     * Specify the subscription's maintenance windows
     */
    maintenanceWindows?: pulumi.Input<inputs.ActiveActiveSubscriptionMaintenanceWindows>;
    /**
     * A meaningful name to identify the subscription
     */
    name?: pulumi.Input<string>;
    /**
     * Payment method for the requested subscription. If credit card is specified, the payment method id must be defined. This
     * information is only used when creating a new subscription and any changes will be ignored after this.
     */
    paymentMethod?: pulumi.Input<string>;
    /**
     * A valid payment method pre-defined in the current account
     */
    paymentMethodId?: pulumi.Input<string>;
    /**
     * Version of Redis to create
     */
    redisVersion?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ActiveActiveSubscriptionTimeouts>;
}
