// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ActiveActiveSubscriptionDatabase extends pulumi.CustomResource {
    /**
     * Get an existing ActiveActiveSubscriptionDatabase resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ActiveActiveSubscriptionDatabaseState, opts?: pulumi.CustomResourceOptions): ActiveActiveSubscriptionDatabase {
        return new ActiveActiveSubscriptionDatabase(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'rediscloud:index/activeActiveSubscriptionDatabase:ActiveActiveSubscriptionDatabase';

    /**
     * Returns true if the given object is an instance of ActiveActiveSubscriptionDatabase.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ActiveActiveSubscriptionDatabase {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ActiveActiveSubscriptionDatabase.__pulumiType;
    }

    /**
     * SSL certificate to authenticate user connections.
     */
    public readonly clientSslCertificate!: pulumi.Output<string | undefined>;
    /**
     * TLS certificates to authenticate user connections
     */
    public readonly clientTlsCertificates!: pulumi.Output<string[] | undefined>;
    /**
     * Data eviction items policy
     */
    public readonly dataEviction!: pulumi.Output<string | undefined>;
    /**
     * Identifier of the database created
     */
    public /*out*/ readonly dbId!: pulumi.Output<number>;
    /**
     * Use TLS for authentication.
     */
    public readonly enableTls!: pulumi.Output<boolean | undefined>;
    /**
     * Should use the external endpoint for open-source (OSS) Cluster API
     */
    public readonly externalEndpointForOssClusterApi!: pulumi.Output<boolean | undefined>;
    /**
     * Set of alerts to enable on the database
     */
    public readonly globalAlerts!: pulumi.Output<outputs.ActiveActiveSubscriptionDatabaseGlobalAlert[] | undefined>;
    /**
     * Rate of database data persistence (in persistent storage)
     */
    public readonly globalDataPersistence!: pulumi.Output<string | undefined>;
    /**
     * List of modules to enable on the database. This information is only used when creating a new database and any changes
     * will be ignored after this.
     */
    public readonly globalModules!: pulumi.Output<string[] | undefined>;
    /**
     * Password used to access the database. If left empty, the password will be generated automatically
     */
    public readonly globalPassword!: pulumi.Output<string>;
    /**
     * The initial RESP version for all databases provisioned under this AA database. This information is only used when
     * creating a new database and any changes will be ignored after this.
     */
    public readonly globalRespVersion!: pulumi.Output<string | undefined>;
    /**
     * Set of CIDR addresses to allow access to the database
     */
    public readonly globalSourceIps!: pulumi.Output<string[] | undefined>;
    /**
     * Details about the last import that took place for this active-active database
     */
    public /*out*/ readonly latestImportStatuses!: pulumi.Output<outputs.ActiveActiveSubscriptionDatabaseLatestImportStatus[]>;
    /**
     * Maximum memory usage for this specific database
     */
    public readonly memoryLimitInGb!: pulumi.Output<number>;
    /**
     * A meaningful name to identify the database
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Region-specific configuration parameters to override the global configuration
     */
    public readonly overrideRegions!: pulumi.Output<outputs.ActiveActiveSubscriptionDatabaseOverrideRegion[] | undefined>;
    /**
     * TCP port on which the database is available
     */
    public readonly port!: pulumi.Output<number | undefined>;
    /**
     * Region public and private endpoints to access the database
     */
    public /*out*/ readonly privateEndpoint!: pulumi.Output<{[key: string]: string}>;
    /**
     * Region public and private endpoints to access the database
     */
    public /*out*/ readonly publicEndpoint!: pulumi.Output<{[key: string]: string}>;
    /**
     * Identifier of the subscription
     */
    public readonly subscriptionId!: pulumi.Output<number>;
    /**
     * Support Redis open-source (OSS) Cluster API
     */
    public readonly supportOssClusterApi!: pulumi.Output<boolean | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.ActiveActiveSubscriptionDatabaseTimeouts | undefined>;

    /**
     * Create a ActiveActiveSubscriptionDatabase resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ActiveActiveSubscriptionDatabaseArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ActiveActiveSubscriptionDatabaseArgs | ActiveActiveSubscriptionDatabaseState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ActiveActiveSubscriptionDatabaseState | undefined;
            resourceInputs["clientSslCertificate"] = state ? state.clientSslCertificate : undefined;
            resourceInputs["clientTlsCertificates"] = state ? state.clientTlsCertificates : undefined;
            resourceInputs["dataEviction"] = state ? state.dataEviction : undefined;
            resourceInputs["dbId"] = state ? state.dbId : undefined;
            resourceInputs["enableTls"] = state ? state.enableTls : undefined;
            resourceInputs["externalEndpointForOssClusterApi"] = state ? state.externalEndpointForOssClusterApi : undefined;
            resourceInputs["globalAlerts"] = state ? state.globalAlerts : undefined;
            resourceInputs["globalDataPersistence"] = state ? state.globalDataPersistence : undefined;
            resourceInputs["globalModules"] = state ? state.globalModules : undefined;
            resourceInputs["globalPassword"] = state ? state.globalPassword : undefined;
            resourceInputs["globalRespVersion"] = state ? state.globalRespVersion : undefined;
            resourceInputs["globalSourceIps"] = state ? state.globalSourceIps : undefined;
            resourceInputs["latestImportStatuses"] = state ? state.latestImportStatuses : undefined;
            resourceInputs["memoryLimitInGb"] = state ? state.memoryLimitInGb : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["overrideRegions"] = state ? state.overrideRegions : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["privateEndpoint"] = state ? state.privateEndpoint : undefined;
            resourceInputs["publicEndpoint"] = state ? state.publicEndpoint : undefined;
            resourceInputs["subscriptionId"] = state ? state.subscriptionId : undefined;
            resourceInputs["supportOssClusterApi"] = state ? state.supportOssClusterApi : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as ActiveActiveSubscriptionDatabaseArgs | undefined;
            if ((!args || args.memoryLimitInGb === undefined) && !opts.urn) {
                throw new Error("Missing required property 'memoryLimitInGb'");
            }
            if ((!args || args.subscriptionId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subscriptionId'");
            }
            resourceInputs["clientSslCertificate"] = args ? args.clientSslCertificate : undefined;
            resourceInputs["clientTlsCertificates"] = args ? args.clientTlsCertificates : undefined;
            resourceInputs["dataEviction"] = args ? args.dataEviction : undefined;
            resourceInputs["enableTls"] = args ? args.enableTls : undefined;
            resourceInputs["externalEndpointForOssClusterApi"] = args ? args.externalEndpointForOssClusterApi : undefined;
            resourceInputs["globalAlerts"] = args ? args.globalAlerts : undefined;
            resourceInputs["globalDataPersistence"] = args ? args.globalDataPersistence : undefined;
            resourceInputs["globalModules"] = args ? args.globalModules : undefined;
            resourceInputs["globalPassword"] = args?.globalPassword ? pulumi.secret(args.globalPassword) : undefined;
            resourceInputs["globalRespVersion"] = args ? args.globalRespVersion : undefined;
            resourceInputs["globalSourceIps"] = args ? args.globalSourceIps : undefined;
            resourceInputs["memoryLimitInGb"] = args ? args.memoryLimitInGb : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["overrideRegions"] = args ? args.overrideRegions : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["subscriptionId"] = args ? args.subscriptionId : undefined;
            resourceInputs["supportOssClusterApi"] = args ? args.supportOssClusterApi : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["dbId"] = undefined /*out*/;
            resourceInputs["latestImportStatuses"] = undefined /*out*/;
            resourceInputs["privateEndpoint"] = undefined /*out*/;
            resourceInputs["publicEndpoint"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["globalPassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ActiveActiveSubscriptionDatabase.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ActiveActiveSubscriptionDatabase resources.
 */
export interface ActiveActiveSubscriptionDatabaseState {
    /**
     * SSL certificate to authenticate user connections.
     */
    clientSslCertificate?: pulumi.Input<string>;
    /**
     * TLS certificates to authenticate user connections
     */
    clientTlsCertificates?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Data eviction items policy
     */
    dataEviction?: pulumi.Input<string>;
    /**
     * Identifier of the database created
     */
    dbId?: pulumi.Input<number>;
    /**
     * Use TLS for authentication.
     */
    enableTls?: pulumi.Input<boolean>;
    /**
     * Should use the external endpoint for open-source (OSS) Cluster API
     */
    externalEndpointForOssClusterApi?: pulumi.Input<boolean>;
    /**
     * Set of alerts to enable on the database
     */
    globalAlerts?: pulumi.Input<pulumi.Input<inputs.ActiveActiveSubscriptionDatabaseGlobalAlert>[]>;
    /**
     * Rate of database data persistence (in persistent storage)
     */
    globalDataPersistence?: pulumi.Input<string>;
    /**
     * List of modules to enable on the database. This information is only used when creating a new database and any changes
     * will be ignored after this.
     */
    globalModules?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Password used to access the database. If left empty, the password will be generated automatically
     */
    globalPassword?: pulumi.Input<string>;
    /**
     * The initial RESP version for all databases provisioned under this AA database. This information is only used when
     * creating a new database and any changes will be ignored after this.
     */
    globalRespVersion?: pulumi.Input<string>;
    /**
     * Set of CIDR addresses to allow access to the database
     */
    globalSourceIps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Details about the last import that took place for this active-active database
     */
    latestImportStatuses?: pulumi.Input<pulumi.Input<inputs.ActiveActiveSubscriptionDatabaseLatestImportStatus>[]>;
    /**
     * Maximum memory usage for this specific database
     */
    memoryLimitInGb?: pulumi.Input<number>;
    /**
     * A meaningful name to identify the database
     */
    name?: pulumi.Input<string>;
    /**
     * Region-specific configuration parameters to override the global configuration
     */
    overrideRegions?: pulumi.Input<pulumi.Input<inputs.ActiveActiveSubscriptionDatabaseOverrideRegion>[]>;
    /**
     * TCP port on which the database is available
     */
    port?: pulumi.Input<number>;
    /**
     * Region public and private endpoints to access the database
     */
    privateEndpoint?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Region public and private endpoints to access the database
     */
    publicEndpoint?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Identifier of the subscription
     */
    subscriptionId?: pulumi.Input<number>;
    /**
     * Support Redis open-source (OSS) Cluster API
     */
    supportOssClusterApi?: pulumi.Input<boolean>;
    timeouts?: pulumi.Input<inputs.ActiveActiveSubscriptionDatabaseTimeouts>;
}

/**
 * The set of arguments for constructing a ActiveActiveSubscriptionDatabase resource.
 */
export interface ActiveActiveSubscriptionDatabaseArgs {
    /**
     * SSL certificate to authenticate user connections.
     */
    clientSslCertificate?: pulumi.Input<string>;
    /**
     * TLS certificates to authenticate user connections
     */
    clientTlsCertificates?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Data eviction items policy
     */
    dataEviction?: pulumi.Input<string>;
    /**
     * Use TLS for authentication.
     */
    enableTls?: pulumi.Input<boolean>;
    /**
     * Should use the external endpoint for open-source (OSS) Cluster API
     */
    externalEndpointForOssClusterApi?: pulumi.Input<boolean>;
    /**
     * Set of alerts to enable on the database
     */
    globalAlerts?: pulumi.Input<pulumi.Input<inputs.ActiveActiveSubscriptionDatabaseGlobalAlert>[]>;
    /**
     * Rate of database data persistence (in persistent storage)
     */
    globalDataPersistence?: pulumi.Input<string>;
    /**
     * List of modules to enable on the database. This information is only used when creating a new database and any changes
     * will be ignored after this.
     */
    globalModules?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Password used to access the database. If left empty, the password will be generated automatically
     */
    globalPassword?: pulumi.Input<string>;
    /**
     * The initial RESP version for all databases provisioned under this AA database. This information is only used when
     * creating a new database and any changes will be ignored after this.
     */
    globalRespVersion?: pulumi.Input<string>;
    /**
     * Set of CIDR addresses to allow access to the database
     */
    globalSourceIps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Maximum memory usage for this specific database
     */
    memoryLimitInGb: pulumi.Input<number>;
    /**
     * A meaningful name to identify the database
     */
    name?: pulumi.Input<string>;
    /**
     * Region-specific configuration parameters to override the global configuration
     */
    overrideRegions?: pulumi.Input<pulumi.Input<inputs.ActiveActiveSubscriptionDatabaseOverrideRegion>[]>;
    /**
     * TCP port on which the database is available
     */
    port?: pulumi.Input<number>;
    /**
     * Identifier of the subscription
     */
    subscriptionId: pulumi.Input<number>;
    /**
     * Support Redis open-source (OSS) Cluster API
     */
    supportOssClusterApi?: pulumi.Input<boolean>;
    timeouts?: pulumi.Input<inputs.ActiveActiveSubscriptionDatabaseTimeouts>;
}
