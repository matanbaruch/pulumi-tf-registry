// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CloudAccount extends pulumi.CustomResource {
    /**
     * Get an existing CloudAccount resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CloudAccountState, opts?: pulumi.CustomResourceOptions): CloudAccount {
        return new CloudAccount(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'rediscloud:index/cloudAccount:CloudAccount';

    /**
     * Returns true if the given object is an instance of CloudAccount.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CloudAccount {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CloudAccount.__pulumiType;
    }

    /**
     * Cloud provider access key
     */
    public readonly accessKeyId!: pulumi.Output<string>;
    /**
     * Cloud provider secret key
     */
    public readonly accessSecretKey!: pulumi.Output<string>;
    /**
     * Cloud provider management console password
     */
    public readonly consolePassword!: pulumi.Output<string>;
    /**
     * Cloud provider management console username
     */
    public readonly consoleUsername!: pulumi.Output<string>;
    /**
     * Display name of the account
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Cloud provider type - either `AWS` or `GCP`
     */
    public readonly providerType!: pulumi.Output<string>;
    /**
     * Cloud provider management console login URL
     */
    public readonly signInLoginUrl!: pulumi.Output<string>;
    /**
     * The current status of the account - `draft`, `pending` or `active`
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.CloudAccountTimeouts | undefined>;

    /**
     * Create a CloudAccount resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CloudAccountArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CloudAccountArgs | CloudAccountState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CloudAccountState | undefined;
            resourceInputs["accessKeyId"] = state ? state.accessKeyId : undefined;
            resourceInputs["accessSecretKey"] = state ? state.accessSecretKey : undefined;
            resourceInputs["consolePassword"] = state ? state.consolePassword : undefined;
            resourceInputs["consoleUsername"] = state ? state.consoleUsername : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["providerType"] = state ? state.providerType : undefined;
            resourceInputs["signInLoginUrl"] = state ? state.signInLoginUrl : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as CloudAccountArgs | undefined;
            if ((!args || args.accessKeyId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accessKeyId'");
            }
            if ((!args || args.accessSecretKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accessSecretKey'");
            }
            if ((!args || args.consolePassword === undefined) && !opts.urn) {
                throw new Error("Missing required property 'consolePassword'");
            }
            if ((!args || args.consoleUsername === undefined) && !opts.urn) {
                throw new Error("Missing required property 'consoleUsername'");
            }
            if ((!args || args.providerType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'providerType'");
            }
            if ((!args || args.signInLoginUrl === undefined) && !opts.urn) {
                throw new Error("Missing required property 'signInLoginUrl'");
            }
            resourceInputs["accessKeyId"] = args ? args.accessKeyId : undefined;
            resourceInputs["accessSecretKey"] = args?.accessSecretKey ? pulumi.secret(args.accessSecretKey) : undefined;
            resourceInputs["consolePassword"] = args?.consolePassword ? pulumi.secret(args.consolePassword) : undefined;
            resourceInputs["consoleUsername"] = args ? args.consoleUsername : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["providerType"] = args ? args.providerType : undefined;
            resourceInputs["signInLoginUrl"] = args ? args.signInLoginUrl : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["accessSecretKey", "consolePassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(CloudAccount.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CloudAccount resources.
 */
export interface CloudAccountState {
    /**
     * Cloud provider access key
     */
    accessKeyId?: pulumi.Input<string>;
    /**
     * Cloud provider secret key
     */
    accessSecretKey?: pulumi.Input<string>;
    /**
     * Cloud provider management console password
     */
    consolePassword?: pulumi.Input<string>;
    /**
     * Cloud provider management console username
     */
    consoleUsername?: pulumi.Input<string>;
    /**
     * Display name of the account
     */
    name?: pulumi.Input<string>;
    /**
     * Cloud provider type - either `AWS` or `GCP`
     */
    providerType?: pulumi.Input<string>;
    /**
     * Cloud provider management console login URL
     */
    signInLoginUrl?: pulumi.Input<string>;
    /**
     * The current status of the account - `draft`, `pending` or `active`
     */
    status?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.CloudAccountTimeouts>;
}

/**
 * The set of arguments for constructing a CloudAccount resource.
 */
export interface CloudAccountArgs {
    /**
     * Cloud provider access key
     */
    accessKeyId: pulumi.Input<string>;
    /**
     * Cloud provider secret key
     */
    accessSecretKey: pulumi.Input<string>;
    /**
     * Cloud provider management console password
     */
    consolePassword: pulumi.Input<string>;
    /**
     * Cloud provider management console username
     */
    consoleUsername: pulumi.Input<string>;
    /**
     * Display name of the account
     */
    name?: pulumi.Input<string>;
    /**
     * Cloud provider type - either `AWS` or `GCP`
     */
    providerType: pulumi.Input<string>;
    /**
     * Cloud provider management console login URL
     */
    signInLoginUrl: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.CloudAccountTimeouts>;
}
