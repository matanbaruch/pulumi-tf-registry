// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class EssentialsDatabase extends pulumi.CustomResource {
    /**
     * Get an existing EssentialsDatabase resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EssentialsDatabaseState, opts?: pulumi.CustomResourceOptions): EssentialsDatabase {
        return new EssentialsDatabase(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'rediscloud:index/essentialsDatabase:EssentialsDatabase';

    /**
     * Returns true if the given object is an instance of EssentialsDatabase.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EssentialsDatabase {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EssentialsDatabase.__pulumiType;
    }

    /**
     * When this database was activated
     */
    public /*out*/ readonly activatedOn!: pulumi.Output<string>;
    /**
     * Set of alerts to enable on the database
     */
    public readonly alerts!: pulumi.Output<outputs.EssentialsDatabaseAlert[] | undefined>;
    public readonly clientTlsCertificates!: pulumi.Output<string[] | undefined>;
    /**
     * The Cloud Provider hosting this database
     */
    public /*out*/ readonly cloudProvider!: pulumi.Output<string>;
    /**
     * The data items eviction policy (either: 'allkeys-lru', 'allkeys-lfu', 'allkeys-random', 'volatile-lru', 'volatile-lfu',
     * 'volatile-random', 'volatile-ttl' or 'noeviction'. Default: 'volatile-lru')
     */
    public readonly dataEviction!: pulumi.Output<string | undefined>;
    /**
     * Rate of database data persistence (in persistent storage).
     */
    public readonly dataPersistence!: pulumi.Output<string>;
    /**
     * Identifier of the database created
     */
    public /*out*/ readonly dbId!: pulumi.Output<number>;
    /**
     * Distributes database data to different cloud instances
     */
    public readonly enableDatabaseClustering!: pulumi.Output<boolean | undefined>;
    /**
     * When 'true', enables connecting to the database with the 'default' user. Default: 'true'
     */
    public readonly enableDefaultUser!: pulumi.Output<boolean | undefined>;
    /**
     * Enable features for PAYG databases
     */
    public readonly enablePaygFeatures!: pulumi.Output<boolean | undefined>;
    /**
     * Use TLS for authentication
     */
    public readonly enableTls!: pulumi.Output<boolean | undefined>;
    /**
     * Should use the external endpoint for open-source (OSS) Cluster API
     */
    public readonly externalEndpointForOssClusterApi!: pulumi.Output<boolean | undefined>;
    /**
     * Details about the last backup that took place for this database
     */
    public /*out*/ readonly latestBackupStatuses!: pulumi.Output<outputs.EssentialsDatabaseLatestBackupStatus[]>;
    /**
     * Details about the last import that took place for this active-active database
     */
    public /*out*/ readonly latestImportStatuses!: pulumi.Output<outputs.EssentialsDatabaseLatestImportStatus[]>;
    /**
     * Maximum memory usage for this specific database
     */
    public readonly memoryLimitInGb!: pulumi.Output<number | undefined>;
    /**
     * Modules to be provisioned in the database
     */
    public readonly modules!: pulumi.Output<outputs.EssentialsDatabaseModule[]>;
    /**
     * A meaningful name to identify the database
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Password used to access the database. If left empty, the password will be generated automatically
     */
    public readonly password!: pulumi.Output<string>;
    /**
     * Path that will be used to store database backup files
     */
    public readonly periodicBackupPath!: pulumi.Output<string | undefined>;
    /**
     * Private endpoint to access the database
     */
    public /*out*/ readonly privateEndpoint!: pulumi.Output<string>;
    /**
     * The protocol that will be used to access the database, (either 'redis', 'memcached' or 'stack')
     */
    public readonly protocol!: pulumi.Output<string>;
    /**
     * Public endpoint to access the database
     */
    public /*out*/ readonly publicEndpoint!: pulumi.Output<string>;
    /**
     * The compliance level (redis version) of this database
     */
    public /*out*/ readonly redisVersionCompliance!: pulumi.Output<string>;
    /**
     * Shard regex rules. Relevant only for a sharded database. Supported only for 'Pay-As-You-Go' subscriptions
     */
    public readonly regexRules!: pulumi.Output<string[]>;
    /**
     * The region within the Cloud Provider where this database is hosted
     */
    public /*out*/ readonly region!: pulumi.Output<string>;
    /**
     * Details of database replication
     */
    public readonly replica!: pulumi.Output<outputs.EssentialsDatabaseReplica | undefined>;
    /**
     * Database's replication
     */
    public readonly replication!: pulumi.Output<boolean>;
    /**
     * RESP version must be compatible with Redis version.
     */
    public readonly respVersion!: pulumi.Output<string>;
    /**
     * Set of CIDR addresses to allow access to the database
     */
    public readonly sourceIps!: pulumi.Output<string[] | undefined>;
    /**
     * Identifier of the essentials subscription
     */
    public readonly subscriptionId!: pulumi.Output<number>;
    /**
     * Support Redis open-source (OSS) Cluster API
     */
    public readonly supportOssClusterApi!: pulumi.Output<boolean | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.EssentialsDatabaseTimeouts | undefined>;

    /**
     * Create a EssentialsDatabase resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EssentialsDatabaseArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EssentialsDatabaseArgs | EssentialsDatabaseState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EssentialsDatabaseState | undefined;
            resourceInputs["activatedOn"] = state ? state.activatedOn : undefined;
            resourceInputs["alerts"] = state ? state.alerts : undefined;
            resourceInputs["clientTlsCertificates"] = state ? state.clientTlsCertificates : undefined;
            resourceInputs["cloudProvider"] = state ? state.cloudProvider : undefined;
            resourceInputs["dataEviction"] = state ? state.dataEviction : undefined;
            resourceInputs["dataPersistence"] = state ? state.dataPersistence : undefined;
            resourceInputs["dbId"] = state ? state.dbId : undefined;
            resourceInputs["enableDatabaseClustering"] = state ? state.enableDatabaseClustering : undefined;
            resourceInputs["enableDefaultUser"] = state ? state.enableDefaultUser : undefined;
            resourceInputs["enablePaygFeatures"] = state ? state.enablePaygFeatures : undefined;
            resourceInputs["enableTls"] = state ? state.enableTls : undefined;
            resourceInputs["externalEndpointForOssClusterApi"] = state ? state.externalEndpointForOssClusterApi : undefined;
            resourceInputs["latestBackupStatuses"] = state ? state.latestBackupStatuses : undefined;
            resourceInputs["latestImportStatuses"] = state ? state.latestImportStatuses : undefined;
            resourceInputs["memoryLimitInGb"] = state ? state.memoryLimitInGb : undefined;
            resourceInputs["modules"] = state ? state.modules : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["periodicBackupPath"] = state ? state.periodicBackupPath : undefined;
            resourceInputs["privateEndpoint"] = state ? state.privateEndpoint : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["publicEndpoint"] = state ? state.publicEndpoint : undefined;
            resourceInputs["redisVersionCompliance"] = state ? state.redisVersionCompliance : undefined;
            resourceInputs["regexRules"] = state ? state.regexRules : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["replica"] = state ? state.replica : undefined;
            resourceInputs["replication"] = state ? state.replication : undefined;
            resourceInputs["respVersion"] = state ? state.respVersion : undefined;
            resourceInputs["sourceIps"] = state ? state.sourceIps : undefined;
            resourceInputs["subscriptionId"] = state ? state.subscriptionId : undefined;
            resourceInputs["supportOssClusterApi"] = state ? state.supportOssClusterApi : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as EssentialsDatabaseArgs | undefined;
            if ((!args || args.dataPersistence === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dataPersistence'");
            }
            if ((!args || args.replication === undefined) && !opts.urn) {
                throw new Error("Missing required property 'replication'");
            }
            if ((!args || args.subscriptionId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subscriptionId'");
            }
            resourceInputs["alerts"] = args ? args.alerts : undefined;
            resourceInputs["clientTlsCertificates"] = args ? args.clientTlsCertificates : undefined;
            resourceInputs["dataEviction"] = args ? args.dataEviction : undefined;
            resourceInputs["dataPersistence"] = args ? args.dataPersistence : undefined;
            resourceInputs["enableDatabaseClustering"] = args ? args.enableDatabaseClustering : undefined;
            resourceInputs["enableDefaultUser"] = args ? args.enableDefaultUser : undefined;
            resourceInputs["enablePaygFeatures"] = args ? args.enablePaygFeatures : undefined;
            resourceInputs["enableTls"] = args ? args.enableTls : undefined;
            resourceInputs["externalEndpointForOssClusterApi"] = args ? args.externalEndpointForOssClusterApi : undefined;
            resourceInputs["memoryLimitInGb"] = args ? args.memoryLimitInGb : undefined;
            resourceInputs["modules"] = args ? args.modules : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["periodicBackupPath"] = args ? args.periodicBackupPath : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["regexRules"] = args ? args.regexRules : undefined;
            resourceInputs["replica"] = args ? args.replica : undefined;
            resourceInputs["replication"] = args ? args.replication : undefined;
            resourceInputs["respVersion"] = args ? args.respVersion : undefined;
            resourceInputs["sourceIps"] = args ? args.sourceIps : undefined;
            resourceInputs["subscriptionId"] = args ? args.subscriptionId : undefined;
            resourceInputs["supportOssClusterApi"] = args ? args.supportOssClusterApi : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["activatedOn"] = undefined /*out*/;
            resourceInputs["cloudProvider"] = undefined /*out*/;
            resourceInputs["dbId"] = undefined /*out*/;
            resourceInputs["latestBackupStatuses"] = undefined /*out*/;
            resourceInputs["latestImportStatuses"] = undefined /*out*/;
            resourceInputs["privateEndpoint"] = undefined /*out*/;
            resourceInputs["publicEndpoint"] = undefined /*out*/;
            resourceInputs["redisVersionCompliance"] = undefined /*out*/;
            resourceInputs["region"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(EssentialsDatabase.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering EssentialsDatabase resources.
 */
export interface EssentialsDatabaseState {
    /**
     * When this database was activated
     */
    activatedOn?: pulumi.Input<string>;
    /**
     * Set of alerts to enable on the database
     */
    alerts?: pulumi.Input<pulumi.Input<inputs.EssentialsDatabaseAlert>[]>;
    clientTlsCertificates?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The Cloud Provider hosting this database
     */
    cloudProvider?: pulumi.Input<string>;
    /**
     * The data items eviction policy (either: 'allkeys-lru', 'allkeys-lfu', 'allkeys-random', 'volatile-lru', 'volatile-lfu',
     * 'volatile-random', 'volatile-ttl' or 'noeviction'. Default: 'volatile-lru')
     */
    dataEviction?: pulumi.Input<string>;
    /**
     * Rate of database data persistence (in persistent storage).
     */
    dataPersistence?: pulumi.Input<string>;
    /**
     * Identifier of the database created
     */
    dbId?: pulumi.Input<number>;
    /**
     * Distributes database data to different cloud instances
     */
    enableDatabaseClustering?: pulumi.Input<boolean>;
    /**
     * When 'true', enables connecting to the database with the 'default' user. Default: 'true'
     */
    enableDefaultUser?: pulumi.Input<boolean>;
    /**
     * Enable features for PAYG databases
     */
    enablePaygFeatures?: pulumi.Input<boolean>;
    /**
     * Use TLS for authentication
     */
    enableTls?: pulumi.Input<boolean>;
    /**
     * Should use the external endpoint for open-source (OSS) Cluster API
     */
    externalEndpointForOssClusterApi?: pulumi.Input<boolean>;
    /**
     * Details about the last backup that took place for this database
     */
    latestBackupStatuses?: pulumi.Input<pulumi.Input<inputs.EssentialsDatabaseLatestBackupStatus>[]>;
    /**
     * Details about the last import that took place for this active-active database
     */
    latestImportStatuses?: pulumi.Input<pulumi.Input<inputs.EssentialsDatabaseLatestImportStatus>[]>;
    /**
     * Maximum memory usage for this specific database
     */
    memoryLimitInGb?: pulumi.Input<number>;
    /**
     * Modules to be provisioned in the database
     */
    modules?: pulumi.Input<pulumi.Input<inputs.EssentialsDatabaseModule>[]>;
    /**
     * A meaningful name to identify the database
     */
    name?: pulumi.Input<string>;
    /**
     * Password used to access the database. If left empty, the password will be generated automatically
     */
    password?: pulumi.Input<string>;
    /**
     * Path that will be used to store database backup files
     */
    periodicBackupPath?: pulumi.Input<string>;
    /**
     * Private endpoint to access the database
     */
    privateEndpoint?: pulumi.Input<string>;
    /**
     * The protocol that will be used to access the database, (either 'redis', 'memcached' or 'stack')
     */
    protocol?: pulumi.Input<string>;
    /**
     * Public endpoint to access the database
     */
    publicEndpoint?: pulumi.Input<string>;
    /**
     * The compliance level (redis version) of this database
     */
    redisVersionCompliance?: pulumi.Input<string>;
    /**
     * Shard regex rules. Relevant only for a sharded database. Supported only for 'Pay-As-You-Go' subscriptions
     */
    regexRules?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The region within the Cloud Provider where this database is hosted
     */
    region?: pulumi.Input<string>;
    /**
     * Details of database replication
     */
    replica?: pulumi.Input<inputs.EssentialsDatabaseReplica>;
    /**
     * Database's replication
     */
    replication?: pulumi.Input<boolean>;
    /**
     * RESP version must be compatible with Redis version.
     */
    respVersion?: pulumi.Input<string>;
    /**
     * Set of CIDR addresses to allow access to the database
     */
    sourceIps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Identifier of the essentials subscription
     */
    subscriptionId?: pulumi.Input<number>;
    /**
     * Support Redis open-source (OSS) Cluster API
     */
    supportOssClusterApi?: pulumi.Input<boolean>;
    timeouts?: pulumi.Input<inputs.EssentialsDatabaseTimeouts>;
}

/**
 * The set of arguments for constructing a EssentialsDatabase resource.
 */
export interface EssentialsDatabaseArgs {
    /**
     * Set of alerts to enable on the database
     */
    alerts?: pulumi.Input<pulumi.Input<inputs.EssentialsDatabaseAlert>[]>;
    clientTlsCertificates?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The data items eviction policy (either: 'allkeys-lru', 'allkeys-lfu', 'allkeys-random', 'volatile-lru', 'volatile-lfu',
     * 'volatile-random', 'volatile-ttl' or 'noeviction'. Default: 'volatile-lru')
     */
    dataEviction?: pulumi.Input<string>;
    /**
     * Rate of database data persistence (in persistent storage).
     */
    dataPersistence: pulumi.Input<string>;
    /**
     * Distributes database data to different cloud instances
     */
    enableDatabaseClustering?: pulumi.Input<boolean>;
    /**
     * When 'true', enables connecting to the database with the 'default' user. Default: 'true'
     */
    enableDefaultUser?: pulumi.Input<boolean>;
    /**
     * Enable features for PAYG databases
     */
    enablePaygFeatures?: pulumi.Input<boolean>;
    /**
     * Use TLS for authentication
     */
    enableTls?: pulumi.Input<boolean>;
    /**
     * Should use the external endpoint for open-source (OSS) Cluster API
     */
    externalEndpointForOssClusterApi?: pulumi.Input<boolean>;
    /**
     * Maximum memory usage for this specific database
     */
    memoryLimitInGb?: pulumi.Input<number>;
    /**
     * Modules to be provisioned in the database
     */
    modules?: pulumi.Input<pulumi.Input<inputs.EssentialsDatabaseModule>[]>;
    /**
     * A meaningful name to identify the database
     */
    name?: pulumi.Input<string>;
    /**
     * Password used to access the database. If left empty, the password will be generated automatically
     */
    password?: pulumi.Input<string>;
    /**
     * Path that will be used to store database backup files
     */
    periodicBackupPath?: pulumi.Input<string>;
    /**
     * The protocol that will be used to access the database, (either 'redis', 'memcached' or 'stack')
     */
    protocol?: pulumi.Input<string>;
    /**
     * Shard regex rules. Relevant only for a sharded database. Supported only for 'Pay-As-You-Go' subscriptions
     */
    regexRules?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Details of database replication
     */
    replica?: pulumi.Input<inputs.EssentialsDatabaseReplica>;
    /**
     * Database's replication
     */
    replication: pulumi.Input<boolean>;
    /**
     * RESP version must be compatible with Redis version.
     */
    respVersion?: pulumi.Input<string>;
    /**
     * Set of CIDR addresses to allow access to the database
     */
    sourceIps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Identifier of the essentials subscription
     */
    subscriptionId: pulumi.Input<number>;
    /**
     * Support Redis open-source (OSS) Cluster API
     */
    supportOssClusterApi?: pulumi.Input<boolean>;
    timeouts?: pulumi.Input<inputs.EssentialsDatabaseTimeouts>;
}
