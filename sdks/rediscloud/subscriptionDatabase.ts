// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SubscriptionDatabase extends pulumi.CustomResource {
    /**
     * Get an existing SubscriptionDatabase resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SubscriptionDatabaseState, opts?: pulumi.CustomResourceOptions): SubscriptionDatabase {
        return new SubscriptionDatabase(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'rediscloud:index/subscriptionDatabase:SubscriptionDatabase';

    /**
     * Returns true if the given object is an instance of SubscriptionDatabase.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SubscriptionDatabase {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SubscriptionDatabase.__pulumiType;
    }

    /**
     * Set of alerts to enable on the database
     */
    public readonly alerts!: pulumi.Output<outputs.SubscriptionDatabaseAlert[] | undefined>;
    /**
     * Relevant only to ram-and-flash clusters. Estimated average size (measured in bytes) of the items stored in the database
     */
    public readonly averageItemSizeInBytes!: pulumi.Output<number | undefined>;
    /**
     * SSL certificate to authenticate user connections
     */
    public readonly clientSslCertificate!: pulumi.Output<string | undefined>;
    /**
     * TLS certificates to authenticate user connections
     */
    public readonly clientTlsCertificates!: pulumi.Output<string[] | undefined>;
    /**
     * (Optional) The data items eviction policy (either: 'allkeys-lru', 'allkeys-lfu', 'allkeys-random', 'volatile-lru',
     * 'volatile-lfu', 'volatile-random', 'volatile-ttl' or 'noeviction'. Default: 'volatile-lru')
     */
    public readonly dataEviction!: pulumi.Output<string | undefined>;
    /**
     * Rate of database data persistence (in persistent storage)
     */
    public readonly dataPersistence!: pulumi.Output<string | undefined>;
    /**
     * Identifier of the database created
     */
    public /*out*/ readonly dbId!: pulumi.Output<number>;
    /**
     * When 'true', enables connecting to the database with the 'default' user. Default: 'true'
     */
    public readonly enableDefaultUser!: pulumi.Output<boolean | undefined>;
    /**
     * Use TLS for authentication
     */
    public readonly enableTls!: pulumi.Output<boolean | undefined>;
    /**
     * Should use the external endpoint for open-source (OSS) Cluster API
     */
    public readonly externalEndpointForOssClusterApi!: pulumi.Output<boolean | undefined>;
    /**
     * List of regular expression rules to shard the database by. See the documentation on clustering for more information on
     * the hashing policy - https://docs.redislabs.com/latest/rc/concepts/clustering/
     */
    public readonly hashingPolicies!: pulumi.Output<string[]>;
    /**
     * Details about the last backup that took place for this database
     */
    public /*out*/ readonly latestBackupStatuses!: pulumi.Output<outputs.SubscriptionDatabaseLatestBackupStatus[]>;
    /**
     * Details about the last import that took place for this active-active database
     */
    public /*out*/ readonly latestImportStatuses!: pulumi.Output<outputs.SubscriptionDatabaseLatestImportStatus[]>;
    /**
     * Maximum memory usage for this specific database
     */
    public readonly memoryLimitInGb!: pulumi.Output<number>;
    /**
     * Modules to be provisioned in the database
     */
    public readonly modules!: pulumi.Output<outputs.SubscriptionDatabaseModule[] | undefined>;
    /**
     * A meaningful name to identify the database
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Password used to access the database. If left empty, the password will be generated automatically
     */
    public readonly password!: pulumi.Output<string>;
    /**
     * Path that will be used to store database backup files
     *
     * @deprecated Deprecated
     */
    public readonly periodicBackupPath!: pulumi.Output<string | undefined>;
    /**
     * TCP port on which the database is available
     */
    public readonly port!: pulumi.Output<number | undefined>;
    /**
     * Private endpoint to access the database
     */
    public /*out*/ readonly privateEndpoint!: pulumi.Output<string>;
    /**
     * The protocol that will be used to access the database, (either ‘redis’ or 'memcached’)
     */
    public readonly protocol!: pulumi.Output<string | undefined>;
    /**
     * Public endpoint to access the database
     */
    public /*out*/ readonly publicEndpoint!: pulumi.Output<string>;
    /**
     * An object that specifies the backup options for the database
     */
    public readonly remoteBackup!: pulumi.Output<outputs.SubscriptionDatabaseRemoteBackup | undefined>;
    /**
     * Set of Redis database URIs, in the format `redis://user:password@host:port`, that this database will be a replica of. If
     * the URI provided is Redis Labs Cloud instance, only host and port should be provided
     */
    public readonly replicaOfs!: pulumi.Output<string[] | undefined>;
    /**
     * Databases replication
     */
    public readonly replication!: pulumi.Output<boolean | undefined>;
    /**
     * The database's RESP version
     */
    public readonly respVersion!: pulumi.Output<string>;
    /**
     * Set of CIDR addresses to allow access to the database
     */
    public readonly sourceIps!: pulumi.Output<string[] | undefined>;
    /**
     * Identifier of the pro subscription
     */
    public readonly subscriptionId!: pulumi.Output<number>;
    /**
     * Support Redis open-source (OSS) Cluster API
     */
    public readonly supportOssClusterApi!: pulumi.Output<boolean | undefined>;
    /**
     * Throughput measurement method, (either ‘number-of-shards’ or ‘operations-per-second’)
     */
    public readonly throughputMeasurementBy!: pulumi.Output<string>;
    /**
     * Throughput value (as applies to selected measurement method)
     */
    public readonly throughputMeasurementValue!: pulumi.Output<number>;
    public readonly timeouts!: pulumi.Output<outputs.SubscriptionDatabaseTimeouts | undefined>;

    /**
     * Create a SubscriptionDatabase resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SubscriptionDatabaseArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SubscriptionDatabaseArgs | SubscriptionDatabaseState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SubscriptionDatabaseState | undefined;
            resourceInputs["alerts"] = state ? state.alerts : undefined;
            resourceInputs["averageItemSizeInBytes"] = state ? state.averageItemSizeInBytes : undefined;
            resourceInputs["clientSslCertificate"] = state ? state.clientSslCertificate : undefined;
            resourceInputs["clientTlsCertificates"] = state ? state.clientTlsCertificates : undefined;
            resourceInputs["dataEviction"] = state ? state.dataEviction : undefined;
            resourceInputs["dataPersistence"] = state ? state.dataPersistence : undefined;
            resourceInputs["dbId"] = state ? state.dbId : undefined;
            resourceInputs["enableDefaultUser"] = state ? state.enableDefaultUser : undefined;
            resourceInputs["enableTls"] = state ? state.enableTls : undefined;
            resourceInputs["externalEndpointForOssClusterApi"] = state ? state.externalEndpointForOssClusterApi : undefined;
            resourceInputs["hashingPolicies"] = state ? state.hashingPolicies : undefined;
            resourceInputs["latestBackupStatuses"] = state ? state.latestBackupStatuses : undefined;
            resourceInputs["latestImportStatuses"] = state ? state.latestImportStatuses : undefined;
            resourceInputs["memoryLimitInGb"] = state ? state.memoryLimitInGb : undefined;
            resourceInputs["modules"] = state ? state.modules : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["periodicBackupPath"] = state ? state.periodicBackupPath : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["privateEndpoint"] = state ? state.privateEndpoint : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["publicEndpoint"] = state ? state.publicEndpoint : undefined;
            resourceInputs["remoteBackup"] = state ? state.remoteBackup : undefined;
            resourceInputs["replicaOfs"] = state ? state.replicaOfs : undefined;
            resourceInputs["replication"] = state ? state.replication : undefined;
            resourceInputs["respVersion"] = state ? state.respVersion : undefined;
            resourceInputs["sourceIps"] = state ? state.sourceIps : undefined;
            resourceInputs["subscriptionId"] = state ? state.subscriptionId : undefined;
            resourceInputs["supportOssClusterApi"] = state ? state.supportOssClusterApi : undefined;
            resourceInputs["throughputMeasurementBy"] = state ? state.throughputMeasurementBy : undefined;
            resourceInputs["throughputMeasurementValue"] = state ? state.throughputMeasurementValue : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as SubscriptionDatabaseArgs | undefined;
            if ((!args || args.memoryLimitInGb === undefined) && !opts.urn) {
                throw new Error("Missing required property 'memoryLimitInGb'");
            }
            if ((!args || args.subscriptionId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subscriptionId'");
            }
            if ((!args || args.throughputMeasurementBy === undefined) && !opts.urn) {
                throw new Error("Missing required property 'throughputMeasurementBy'");
            }
            if ((!args || args.throughputMeasurementValue === undefined) && !opts.urn) {
                throw new Error("Missing required property 'throughputMeasurementValue'");
            }
            resourceInputs["alerts"] = args ? args.alerts : undefined;
            resourceInputs["averageItemSizeInBytes"] = args ? args.averageItemSizeInBytes : undefined;
            resourceInputs["clientSslCertificate"] = args ? args.clientSslCertificate : undefined;
            resourceInputs["clientTlsCertificates"] = args ? args.clientTlsCertificates : undefined;
            resourceInputs["dataEviction"] = args ? args.dataEviction : undefined;
            resourceInputs["dataPersistence"] = args ? args.dataPersistence : undefined;
            resourceInputs["enableDefaultUser"] = args ? args.enableDefaultUser : undefined;
            resourceInputs["enableTls"] = args ? args.enableTls : undefined;
            resourceInputs["externalEndpointForOssClusterApi"] = args ? args.externalEndpointForOssClusterApi : undefined;
            resourceInputs["hashingPolicies"] = args ? args.hashingPolicies : undefined;
            resourceInputs["memoryLimitInGb"] = args ? args.memoryLimitInGb : undefined;
            resourceInputs["modules"] = args ? args.modules : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["periodicBackupPath"] = args ? args.periodicBackupPath : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["remoteBackup"] = args ? args.remoteBackup : undefined;
            resourceInputs["replicaOfs"] = args ? args.replicaOfs : undefined;
            resourceInputs["replication"] = args ? args.replication : undefined;
            resourceInputs["respVersion"] = args ? args.respVersion : undefined;
            resourceInputs["sourceIps"] = args ? args.sourceIps : undefined;
            resourceInputs["subscriptionId"] = args ? args.subscriptionId : undefined;
            resourceInputs["supportOssClusterApi"] = args ? args.supportOssClusterApi : undefined;
            resourceInputs["throughputMeasurementBy"] = args ? args.throughputMeasurementBy : undefined;
            resourceInputs["throughputMeasurementValue"] = args ? args.throughputMeasurementValue : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["dbId"] = undefined /*out*/;
            resourceInputs["latestBackupStatuses"] = undefined /*out*/;
            resourceInputs["latestImportStatuses"] = undefined /*out*/;
            resourceInputs["privateEndpoint"] = undefined /*out*/;
            resourceInputs["publicEndpoint"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(SubscriptionDatabase.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SubscriptionDatabase resources.
 */
export interface SubscriptionDatabaseState {
    /**
     * Set of alerts to enable on the database
     */
    alerts?: pulumi.Input<pulumi.Input<inputs.SubscriptionDatabaseAlert>[]>;
    /**
     * Relevant only to ram-and-flash clusters. Estimated average size (measured in bytes) of the items stored in the database
     */
    averageItemSizeInBytes?: pulumi.Input<number>;
    /**
     * SSL certificate to authenticate user connections
     */
    clientSslCertificate?: pulumi.Input<string>;
    /**
     * TLS certificates to authenticate user connections
     */
    clientTlsCertificates?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * (Optional) The data items eviction policy (either: 'allkeys-lru', 'allkeys-lfu', 'allkeys-random', 'volatile-lru',
     * 'volatile-lfu', 'volatile-random', 'volatile-ttl' or 'noeviction'. Default: 'volatile-lru')
     */
    dataEviction?: pulumi.Input<string>;
    /**
     * Rate of database data persistence (in persistent storage)
     */
    dataPersistence?: pulumi.Input<string>;
    /**
     * Identifier of the database created
     */
    dbId?: pulumi.Input<number>;
    /**
     * When 'true', enables connecting to the database with the 'default' user. Default: 'true'
     */
    enableDefaultUser?: pulumi.Input<boolean>;
    /**
     * Use TLS for authentication
     */
    enableTls?: pulumi.Input<boolean>;
    /**
     * Should use the external endpoint for open-source (OSS) Cluster API
     */
    externalEndpointForOssClusterApi?: pulumi.Input<boolean>;
    /**
     * List of regular expression rules to shard the database by. See the documentation on clustering for more information on
     * the hashing policy - https://docs.redislabs.com/latest/rc/concepts/clustering/
     */
    hashingPolicies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Details about the last backup that took place for this database
     */
    latestBackupStatuses?: pulumi.Input<pulumi.Input<inputs.SubscriptionDatabaseLatestBackupStatus>[]>;
    /**
     * Details about the last import that took place for this active-active database
     */
    latestImportStatuses?: pulumi.Input<pulumi.Input<inputs.SubscriptionDatabaseLatestImportStatus>[]>;
    /**
     * Maximum memory usage for this specific database
     */
    memoryLimitInGb?: pulumi.Input<number>;
    /**
     * Modules to be provisioned in the database
     */
    modules?: pulumi.Input<pulumi.Input<inputs.SubscriptionDatabaseModule>[]>;
    /**
     * A meaningful name to identify the database
     */
    name?: pulumi.Input<string>;
    /**
     * Password used to access the database. If left empty, the password will be generated automatically
     */
    password?: pulumi.Input<string>;
    /**
     * Path that will be used to store database backup files
     *
     * @deprecated Deprecated
     */
    periodicBackupPath?: pulumi.Input<string>;
    /**
     * TCP port on which the database is available
     */
    port?: pulumi.Input<number>;
    /**
     * Private endpoint to access the database
     */
    privateEndpoint?: pulumi.Input<string>;
    /**
     * The protocol that will be used to access the database, (either ‘redis’ or 'memcached’)
     */
    protocol?: pulumi.Input<string>;
    /**
     * Public endpoint to access the database
     */
    publicEndpoint?: pulumi.Input<string>;
    /**
     * An object that specifies the backup options for the database
     */
    remoteBackup?: pulumi.Input<inputs.SubscriptionDatabaseRemoteBackup>;
    /**
     * Set of Redis database URIs, in the format `redis://user:password@host:port`, that this database will be a replica of. If
     * the URI provided is Redis Labs Cloud instance, only host and port should be provided
     */
    replicaOfs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Databases replication
     */
    replication?: pulumi.Input<boolean>;
    /**
     * The database's RESP version
     */
    respVersion?: pulumi.Input<string>;
    /**
     * Set of CIDR addresses to allow access to the database
     */
    sourceIps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Identifier of the pro subscription
     */
    subscriptionId?: pulumi.Input<number>;
    /**
     * Support Redis open-source (OSS) Cluster API
     */
    supportOssClusterApi?: pulumi.Input<boolean>;
    /**
     * Throughput measurement method, (either ‘number-of-shards’ or ‘operations-per-second’)
     */
    throughputMeasurementBy?: pulumi.Input<string>;
    /**
     * Throughput value (as applies to selected measurement method)
     */
    throughputMeasurementValue?: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.SubscriptionDatabaseTimeouts>;
}

/**
 * The set of arguments for constructing a SubscriptionDatabase resource.
 */
export interface SubscriptionDatabaseArgs {
    /**
     * Set of alerts to enable on the database
     */
    alerts?: pulumi.Input<pulumi.Input<inputs.SubscriptionDatabaseAlert>[]>;
    /**
     * Relevant only to ram-and-flash clusters. Estimated average size (measured in bytes) of the items stored in the database
     */
    averageItemSizeInBytes?: pulumi.Input<number>;
    /**
     * SSL certificate to authenticate user connections
     */
    clientSslCertificate?: pulumi.Input<string>;
    /**
     * TLS certificates to authenticate user connections
     */
    clientTlsCertificates?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * (Optional) The data items eviction policy (either: 'allkeys-lru', 'allkeys-lfu', 'allkeys-random', 'volatile-lru',
     * 'volatile-lfu', 'volatile-random', 'volatile-ttl' or 'noeviction'. Default: 'volatile-lru')
     */
    dataEviction?: pulumi.Input<string>;
    /**
     * Rate of database data persistence (in persistent storage)
     */
    dataPersistence?: pulumi.Input<string>;
    /**
     * When 'true', enables connecting to the database with the 'default' user. Default: 'true'
     */
    enableDefaultUser?: pulumi.Input<boolean>;
    /**
     * Use TLS for authentication
     */
    enableTls?: pulumi.Input<boolean>;
    /**
     * Should use the external endpoint for open-source (OSS) Cluster API
     */
    externalEndpointForOssClusterApi?: pulumi.Input<boolean>;
    /**
     * List of regular expression rules to shard the database by. See the documentation on clustering for more information on
     * the hashing policy - https://docs.redislabs.com/latest/rc/concepts/clustering/
     */
    hashingPolicies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Maximum memory usage for this specific database
     */
    memoryLimitInGb: pulumi.Input<number>;
    /**
     * Modules to be provisioned in the database
     */
    modules?: pulumi.Input<pulumi.Input<inputs.SubscriptionDatabaseModule>[]>;
    /**
     * A meaningful name to identify the database
     */
    name?: pulumi.Input<string>;
    /**
     * Password used to access the database. If left empty, the password will be generated automatically
     */
    password?: pulumi.Input<string>;
    /**
     * Path that will be used to store database backup files
     *
     * @deprecated Deprecated
     */
    periodicBackupPath?: pulumi.Input<string>;
    /**
     * TCP port on which the database is available
     */
    port?: pulumi.Input<number>;
    /**
     * The protocol that will be used to access the database, (either ‘redis’ or 'memcached’)
     */
    protocol?: pulumi.Input<string>;
    /**
     * An object that specifies the backup options for the database
     */
    remoteBackup?: pulumi.Input<inputs.SubscriptionDatabaseRemoteBackup>;
    /**
     * Set of Redis database URIs, in the format `redis://user:password@host:port`, that this database will be a replica of. If
     * the URI provided is Redis Labs Cloud instance, only host and port should be provided
     */
    replicaOfs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Databases replication
     */
    replication?: pulumi.Input<boolean>;
    /**
     * The database's RESP version
     */
    respVersion?: pulumi.Input<string>;
    /**
     * Set of CIDR addresses to allow access to the database
     */
    sourceIps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Identifier of the pro subscription
     */
    subscriptionId: pulumi.Input<number>;
    /**
     * Support Redis open-source (OSS) Cluster API
     */
    supportOssClusterApi?: pulumi.Input<boolean>;
    /**
     * Throughput measurement method, (either ‘number-of-shards’ or ‘operations-per-second’)
     */
    throughputMeasurementBy: pulumi.Input<string>;
    /**
     * Throughput value (as applies to selected measurement method)
     */
    throughputMeasurementValue: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.SubscriptionDatabaseTimeouts>;
}
