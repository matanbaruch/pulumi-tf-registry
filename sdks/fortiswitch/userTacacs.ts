// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class UserTacacs extends pulumi.CustomResource {
    /**
     * Get an existing UserTacacs resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UserTacacsState, opts?: pulumi.CustomResourceOptions): UserTacacs {
        return new UserTacacs(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortiswitch:index/userTacacs:UserTacacs';

    /**
     * Returns true if the given object is an instance of UserTacacs.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is UserTacacs {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === UserTacacs.__pulumiType;
    }

    public readonly authenType!: pulumi.Output<string>;
    public readonly authorization!: pulumi.Output<string>;
    public readonly key!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly port!: pulumi.Output<number>;
    public readonly server!: pulumi.Output<string>;
    public readonly sourceIp!: pulumi.Output<string>;

    /**
     * Create a UserTacacs resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: UserTacacsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UserTacacsArgs | UserTacacsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UserTacacsState | undefined;
            resourceInputs["authenType"] = state ? state.authenType : undefined;
            resourceInputs["authorization"] = state ? state.authorization : undefined;
            resourceInputs["key"] = state ? state.key : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["server"] = state ? state.server : undefined;
            resourceInputs["sourceIp"] = state ? state.sourceIp : undefined;
        } else {
            const args = argsOrState as UserTacacsArgs | undefined;
            resourceInputs["authenType"] = args ? args.authenType : undefined;
            resourceInputs["authorization"] = args ? args.authorization : undefined;
            resourceInputs["key"] = args?.key ? pulumi.secret(args.key) : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["server"] = args ? args.server : undefined;
            resourceInputs["sourceIp"] = args ? args.sourceIp : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["key"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(UserTacacs.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering UserTacacs resources.
 */
export interface UserTacacsState {
    authenType?: pulumi.Input<string>;
    authorization?: pulumi.Input<string>;
    key?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    server?: pulumi.Input<string>;
    sourceIp?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a UserTacacs resource.
 */
export interface UserTacacsArgs {
    authenType?: pulumi.Input<string>;
    authorization?: pulumi.Input<string>;
    key?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    server?: pulumi.Input<string>;
    sourceIp?: pulumi.Input<string>;
}
