// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SystemEmailserver extends pulumi.CustomResource {
    /**
     * Get an existing SystemEmailserver resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SystemEmailserverState, opts?: pulumi.CustomResourceOptions): SystemEmailserver {
        return new SystemEmailserver(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortiswitch:index/systemEmailserver:SystemEmailserver';

    /**
     * Returns true if the given object is an instance of SystemEmailserver.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SystemEmailserver {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SystemEmailserver.__pulumiType;
    }

    public readonly authenticate!: pulumi.Output<string>;
    public readonly password!: pulumi.Output<string | undefined>;
    public readonly port!: pulumi.Output<number>;
    public readonly replyTo!: pulumi.Output<string>;
    public readonly security!: pulumi.Output<string>;
    public readonly server!: pulumi.Output<string>;
    public readonly sourceIp!: pulumi.Output<string>;
    public readonly sourceIp6!: pulumi.Output<string>;
    public readonly sslMinProtoVersion!: pulumi.Output<string>;
    public readonly username!: pulumi.Output<string>;
    public readonly validateServer!: pulumi.Output<string>;

    /**
     * Create a SystemEmailserver resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SystemEmailserverArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SystemEmailserverArgs | SystemEmailserverState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SystemEmailserverState | undefined;
            resourceInputs["authenticate"] = state ? state.authenticate : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["replyTo"] = state ? state.replyTo : undefined;
            resourceInputs["security"] = state ? state.security : undefined;
            resourceInputs["server"] = state ? state.server : undefined;
            resourceInputs["sourceIp"] = state ? state.sourceIp : undefined;
            resourceInputs["sourceIp6"] = state ? state.sourceIp6 : undefined;
            resourceInputs["sslMinProtoVersion"] = state ? state.sslMinProtoVersion : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
            resourceInputs["validateServer"] = state ? state.validateServer : undefined;
        } else {
            const args = argsOrState as SystemEmailserverArgs | undefined;
            resourceInputs["authenticate"] = args ? args.authenticate : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["replyTo"] = args ? args.replyTo : undefined;
            resourceInputs["security"] = args ? args.security : undefined;
            resourceInputs["server"] = args ? args.server : undefined;
            resourceInputs["sourceIp"] = args ? args.sourceIp : undefined;
            resourceInputs["sourceIp6"] = args ? args.sourceIp6 : undefined;
            resourceInputs["sslMinProtoVersion"] = args ? args.sslMinProtoVersion : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
            resourceInputs["validateServer"] = args ? args.validateServer : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(SystemEmailserver.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SystemEmailserver resources.
 */
export interface SystemEmailserverState {
    authenticate?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    replyTo?: pulumi.Input<string>;
    security?: pulumi.Input<string>;
    server?: pulumi.Input<string>;
    sourceIp?: pulumi.Input<string>;
    sourceIp6?: pulumi.Input<string>;
    sslMinProtoVersion?: pulumi.Input<string>;
    username?: pulumi.Input<string>;
    validateServer?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SystemEmailserver resource.
 */
export interface SystemEmailserverArgs {
    authenticate?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    replyTo?: pulumi.Input<string>;
    security?: pulumi.Input<string>;
    server?: pulumi.Input<string>;
    sourceIp?: pulumi.Input<string>;
    sourceIp6?: pulumi.Input<string>;
    sslMinProtoVersion?: pulumi.Input<string>;
    username?: pulumi.Input<string>;
    validateServer?: pulumi.Input<string>;
}
