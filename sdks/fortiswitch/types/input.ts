// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface RouterAccesslist6Rule {
    action?: pulumi.Input<string>;
    exactMatch?: pulumi.Input<string>;
    flags?: pulumi.Input<number>;
    id?: pulumi.Input<number>;
    prefix6?: pulumi.Input<string>;
}

export interface RouterAccesslistRule {
    action?: pulumi.Input<string>;
    exactMatch?: pulumi.Input<string>;
    flags?: pulumi.Input<number>;
    id?: pulumi.Input<number>;
    prefix?: pulumi.Input<string>;
    wildcard?: pulumi.Input<string>;
}

export interface RouterAspathlistRule {
    action?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    regexp?: pulumi.Input<string>;
}

export interface RouterBgpAdminDistance {
    distance?: pulumi.Input<number>;
    id?: pulumi.Input<number>;
    neighbourPrefix?: pulumi.Input<string>;
    routeList?: pulumi.Input<string>;
}

export interface RouterBgpAdminDistance6 {
    distance?: pulumi.Input<number>;
    id?: pulumi.Input<number>;
    neighbourPrefix6?: pulumi.Input<string>;
    route6List?: pulumi.Input<string>;
}

export interface RouterBgpAggregateAddress {
    asSet?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    prefix?: pulumi.Input<string>;
    summaryOnly?: pulumi.Input<string>;
}

export interface RouterBgpAggregateAddress6 {
    id?: pulumi.Input<number>;
    prefix6?: pulumi.Input<string>;
    summaryOnly?: pulumi.Input<string>;
}

export interface RouterBgpConfederationPeer {
    peer?: pulumi.Input<string>;
}

export interface RouterBgpNeighbor {
    activate?: pulumi.Input<string>;
    activate6?: pulumi.Input<string>;
    activateEvpn?: pulumi.Input<string>;
    advertisementInterval?: pulumi.Input<number>;
    allowasIn?: pulumi.Input<number>;
    allowasIn6?: pulumi.Input<number>;
    allowasInEnable?: pulumi.Input<string>;
    allowasInEnable6?: pulumi.Input<string>;
    allowasInEnableEvpn?: pulumi.Input<string>;
    asOverride?: pulumi.Input<string>;
    asOverride6?: pulumi.Input<string>;
    attributeUnchanged?: pulumi.Input<string>;
    attributeUnchanged6?: pulumi.Input<string>;
    attributeUnchangedEvpn?: pulumi.Input<string>;
    bfd?: pulumi.Input<string>;
    bfdSessionMode?: pulumi.Input<string>;
    capabilityDefaultOriginate?: pulumi.Input<string>;
    capabilityDefaultOriginate6?: pulumi.Input<string>;
    capabilityDynamic?: pulumi.Input<string>;
    capabilityOrf?: pulumi.Input<string>;
    capabilityOrf6?: pulumi.Input<string>;
    connectTimer?: pulumi.Input<number>;
    defaultOriginateRoutemap?: pulumi.Input<string>;
    defaultOriginateRoutemap6?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    distributeListIn?: pulumi.Input<string>;
    distributeListIn6?: pulumi.Input<string>;
    distributeListOut?: pulumi.Input<string>;
    distributeListOut6?: pulumi.Input<string>;
    dontCapabilityNegotiate?: pulumi.Input<string>;
    ebgpEnforceMultihop?: pulumi.Input<string>;
    ebgpMultihopTtl?: pulumi.Input<number>;
    ebgpTtlSecurityHops?: pulumi.Input<number>;
    enforceFirstAs?: pulumi.Input<string>;
    filterListIn?: pulumi.Input<string>;
    filterListIn6?: pulumi.Input<string>;
    filterListOut?: pulumi.Input<string>;
    filterListOut6?: pulumi.Input<string>;
    holdtimeTimer?: pulumi.Input<number>;
    interface?: pulumi.Input<string>;
    ip?: pulumi.Input<string>;
    keepAliveTimer?: pulumi.Input<number>;
    maximumPrefix?: pulumi.Input<number>;
    maximumPrefix6?: pulumi.Input<number>;
    maximumPrefixThreshold?: pulumi.Input<number>;
    maximumPrefixThreshold6?: pulumi.Input<number>;
    maximumPrefixWarningOnly?: pulumi.Input<string>;
    maximumPrefixWarningOnly6?: pulumi.Input<string>;
    nextHopSelf?: pulumi.Input<string>;
    nextHopSelf6?: pulumi.Input<string>;
    overrideCapability?: pulumi.Input<string>;
    passive?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    prefixListIn?: pulumi.Input<string>;
    prefixListIn6?: pulumi.Input<string>;
    prefixListOut?: pulumi.Input<string>;
    prefixListOut6?: pulumi.Input<string>;
    remoteAs?: pulumi.Input<number>;
    removePrivateAs?: pulumi.Input<string>;
    removePrivateAs6?: pulumi.Input<string>;
    routeMapIn?: pulumi.Input<string>;
    routeMapIn6?: pulumi.Input<string>;
    routeMapInEvpn?: pulumi.Input<string>;
    routeMapOut?: pulumi.Input<string>;
    routeMapOut6?: pulumi.Input<string>;
    routeMapOutEvpn?: pulumi.Input<string>;
    routeReflectorClient?: pulumi.Input<string>;
    routeReflectorClient6?: pulumi.Input<string>;
    routeReflectorClientEvpn?: pulumi.Input<string>;
    routeServerClient?: pulumi.Input<string>;
    routeServerClient6?: pulumi.Input<string>;
    sendCommunity?: pulumi.Input<string>;
    sendCommunity6?: pulumi.Input<string>;
    shutdown?: pulumi.Input<string>;
    softReconfiguration?: pulumi.Input<string>;
    softReconfiguration6?: pulumi.Input<string>;
    softReconfigurationEvpn?: pulumi.Input<string>;
    strictCapabilityMatch?: pulumi.Input<string>;
    unsuppressMap?: pulumi.Input<string>;
    unsuppressMap6?: pulumi.Input<string>;
    updateSource?: pulumi.Input<string>;
    weight?: pulumi.Input<number>;
}

export interface RouterBgpNetwork {
    backdoor?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    prefix?: pulumi.Input<string>;
    routeMap?: pulumi.Input<string>;
}

export interface RouterBgpNetwork6 {
    id?: pulumi.Input<number>;
    prefix6?: pulumi.Input<string>;
    routeMap?: pulumi.Input<string>;
}

export interface RouterBgpRedistribute {
    name?: pulumi.Input<string>;
    routeMap?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface RouterBgpRedistribute6 {
    name?: pulumi.Input<string>;
    routeMap?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface RouterCommunitylistRule {
    action?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    match?: pulumi.Input<string>;
    regexp?: pulumi.Input<string>;
}

export interface RouterGwdetectServer {
    address?: pulumi.Input<string>;
}

export interface RouterIsisInterface {
    authKeychainHello?: pulumi.Input<string>;
    authModeHello?: pulumi.Input<string>;
    authPasswordHello?: pulumi.Input<string>;
    bfd?: pulumi.Input<string>;
    bfd6?: pulumi.Input<string>;
    circuitType?: pulumi.Input<string>;
    csnpIntervalL1?: pulumi.Input<number>;
    csnpIntervalL2?: pulumi.Input<number>;
    helloIntervalL1?: pulumi.Input<number>;
    helloIntervalL2?: pulumi.Input<number>;
    helloMultiplierL1?: pulumi.Input<number>;
    helloMultiplierL2?: pulumi.Input<number>;
    helloPadding?: pulumi.Input<string>;
    metricL1?: pulumi.Input<number>;
    metricL2?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    passive?: pulumi.Input<string>;
    priorityL1?: pulumi.Input<number>;
    priorityL2?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    status6?: pulumi.Input<string>;
    wideMetricL1?: pulumi.Input<number>;
    wideMetricL2?: pulumi.Input<number>;
}

export interface RouterIsisNet {
    net?: pulumi.Input<string>;
}

export interface RouterIsisRedistribute {
    level?: pulumi.Input<string>;
    metric?: pulumi.Input<number>;
    metricType?: pulumi.Input<string>;
    protocol?: pulumi.Input<string>;
    routemap?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface RouterIsisRedistribute6 {
    level?: pulumi.Input<string>;
    metric?: pulumi.Input<number>;
    protocol?: pulumi.Input<string>;
    routemap?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface RouterIsisSummaryAddress {
    id?: pulumi.Input<number>;
    level?: pulumi.Input<string>;
    prefix?: pulumi.Input<string>;
}

export interface RouterIsisSummaryAddress6 {
    id?: pulumi.Input<number>;
    level?: pulumi.Input<string>;
    prefix6?: pulumi.Input<string>;
}

export interface RouterKeychainKey {
    acceptLifetime?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    keyString?: pulumi.Input<string>;
    sendLifetime?: pulumi.Input<string>;
}

export interface RouterMulticastInterface {
    drPriority?: pulumi.Input<number>;
    helloInterval?: pulumi.Input<number>;
    igmp?: pulumi.Input<inputs.RouterMulticastInterfaceIgmp>;
    multicastFlow?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    pimMode?: pulumi.Input<string>;
}

export interface RouterMulticastInterfaceIgmp {
    queryInterval?: pulumi.Input<number>;
    queryMaxResponseTime?: pulumi.Input<number>;
}

export interface RouterMulticastflowFlow {
    groupAddr?: pulumi.Input<string>;
    groupAddrEnd?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    sourceAddr?: pulumi.Input<string>;
}

export interface RouterOspf6Area {
    filterLists?: pulumi.Input<pulumi.Input<inputs.RouterOspf6AreaFilterList>[]>;
    id?: pulumi.Input<string>;
    ranges?: pulumi.Input<pulumi.Input<inputs.RouterOspf6AreaRange>[]>;
    stubType?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface RouterOspf6AreaFilterList {
    direction?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    list?: pulumi.Input<string>;
}

export interface RouterOspf6AreaRange {
    advertise?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    prefix6?: pulumi.Input<string>;
}

export interface RouterOspf6Interface {
    areaId?: pulumi.Input<string>;
    bfd?: pulumi.Input<string>;
    cost?: pulumi.Input<number>;
    deadInterval?: pulumi.Input<number>;
    helloInterval?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    passive?: pulumi.Input<string>;
    priority?: pulumi.Input<number>;
    retransmitInterval?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    transmitDelay?: pulumi.Input<number>;
}

export interface RouterOspf6Redistribute {
    metric?: pulumi.Input<number>;
    metricType?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    routemap?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface RouterOspfArea {
    defaultCost?: pulumi.Input<number>;
    filterLists?: pulumi.Input<pulumi.Input<inputs.RouterOspfAreaFilterList>[]>;
    id?: pulumi.Input<string>;
    nssaTranslatorRole?: pulumi.Input<string>;
    ranges?: pulumi.Input<pulumi.Input<inputs.RouterOspfAreaRange>[]>;
    shortcut?: pulumi.Input<string>;
    stubType?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    virtualLinks?: pulumi.Input<pulumi.Input<inputs.RouterOspfAreaVirtualLink>[]>;
}

export interface RouterOspfAreaFilterList {
    direction?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    list?: pulumi.Input<string>;
}

export interface RouterOspfAreaRange {
    advertise?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    prefix?: pulumi.Input<string>;
    substitute?: pulumi.Input<string>;
    substituteStatus?: pulumi.Input<string>;
}

export interface RouterOspfAreaVirtualLink {
    authentication?: pulumi.Input<string>;
    authenticationKey?: pulumi.Input<string>;
    deadInterval?: pulumi.Input<number>;
    helloInterval?: pulumi.Input<number>;
    md5Keys?: pulumi.Input<pulumi.Input<inputs.RouterOspfAreaVirtualLinkMd5Key>[]>;
    name?: pulumi.Input<string>;
    peer?: pulumi.Input<string>;
    retransmitInterval?: pulumi.Input<number>;
    transmitDelay?: pulumi.Input<number>;
}

export interface RouterOspfAreaVirtualLinkMd5Key {
    id?: pulumi.Input<number>;
    key?: pulumi.Input<string>;
}

export interface RouterOspfDistributeList {
    accessList?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    protocol?: pulumi.Input<string>;
}

export interface RouterOspfInterface {
    authentication?: pulumi.Input<string>;
    authenticationKey?: pulumi.Input<string>;
    bfd?: pulumi.Input<string>;
    cost?: pulumi.Input<number>;
    deadInterval?: pulumi.Input<number>;
    helloInterval?: pulumi.Input<number>;
    helloMultiplier?: pulumi.Input<number>;
    md5Keys?: pulumi.Input<pulumi.Input<inputs.RouterOspfInterfaceMd5Key>[]>;
    mtu?: pulumi.Input<number>;
    mtuIgnore?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    priority?: pulumi.Input<number>;
    retransmitInterval?: pulumi.Input<number>;
    transmitDelay?: pulumi.Input<number>;
    ttl?: pulumi.Input<number>;
    ucastTtl?: pulumi.Input<number>;
}

export interface RouterOspfInterfaceMd5Key {
    id?: pulumi.Input<number>;
    key?: pulumi.Input<string>;
}

export interface RouterOspfNetwork {
    area?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    prefix?: pulumi.Input<string>;
}

export interface RouterOspfPassiveInterface {
    name?: pulumi.Input<string>;
}

export interface RouterOspfRedistribute {
    metric?: pulumi.Input<number>;
    metricType?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    routemap?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    tag?: pulumi.Input<number>;
}

export interface RouterOspfSummaryAddress {
    id?: pulumi.Input<number>;
    prefix?: pulumi.Input<string>;
    tag?: pulumi.Input<number>;
}

export interface RouterOspfVrf {
    abrType?: pulumi.Input<string>;
    areas?: pulumi.Input<pulumi.Input<inputs.RouterOspfVrfArea>[]>;
    databaseOverflow?: pulumi.Input<string>;
    databaseOverflowMaxExternalLsa?: pulumi.Input<number>;
    databaseOverflowTimeToRecover?: pulumi.Input<number>;
    defaultInformationMetric?: pulumi.Input<number>;
    defaultInformationMetricType?: pulumi.Input<string>;
    defaultInformationOriginate?: pulumi.Input<string>;
    distance?: pulumi.Input<number>;
    distanceExternal?: pulumi.Input<number>;
    distanceInterArea?: pulumi.Input<number>;
    distanceIntraArea?: pulumi.Input<number>;
    distributeLists?: pulumi.Input<pulumi.Input<inputs.RouterOspfVrfDistributeList>[]>;
    interfaces?: pulumi.Input<pulumi.Input<inputs.RouterOspfVrfInterface>[]>;
    logNeighbourChanges?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    networks?: pulumi.Input<pulumi.Input<inputs.RouterOspfVrfNetwork>[]>;
    passiveInterfaces?: pulumi.Input<pulumi.Input<inputs.RouterOspfVrfPassiveInterface>[]>;
    redistributes?: pulumi.Input<pulumi.Input<inputs.RouterOspfVrfRedistribute>[]>;
    rfc1583Compatible?: pulumi.Input<string>;
    routerId?: pulumi.Input<string>;
    spfTimers?: pulumi.Input<string>;
    summaryAddresses?: pulumi.Input<pulumi.Input<inputs.RouterOspfVrfSummaryAddress>[]>;
}

export interface RouterOspfVrfArea {
    defaultCost?: pulumi.Input<number>;
    filterLists?: pulumi.Input<pulumi.Input<inputs.RouterOspfVrfAreaFilterList>[]>;
    id?: pulumi.Input<string>;
    nssaTranslatorRole?: pulumi.Input<string>;
    ranges?: pulumi.Input<pulumi.Input<inputs.RouterOspfVrfAreaRange>[]>;
    shortcut?: pulumi.Input<string>;
    stubType?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    virtualLinks?: pulumi.Input<pulumi.Input<inputs.RouterOspfVrfAreaVirtualLink>[]>;
}

export interface RouterOspfVrfAreaFilterList {
    direction?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    list?: pulumi.Input<string>;
}

export interface RouterOspfVrfAreaRange {
    advertise?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    prefix?: pulumi.Input<string>;
    substitute?: pulumi.Input<string>;
    substituteStatus?: pulumi.Input<string>;
}

export interface RouterOspfVrfAreaVirtualLink {
    authentication?: pulumi.Input<string>;
    authenticationKey?: pulumi.Input<string>;
    deadInterval?: pulumi.Input<number>;
    helloInterval?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    peer?: pulumi.Input<string>;
    retransmitInterval?: pulumi.Input<number>;
    transmitDelay?: pulumi.Input<number>;
}

export interface RouterOspfVrfDistributeList {
    accessList?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    protocol?: pulumi.Input<string>;
}

export interface RouterOspfVrfInterface {
    authentication?: pulumi.Input<string>;
    authenticationKey?: pulumi.Input<string>;
    cost?: pulumi.Input<number>;
    deadInterval?: pulumi.Input<number>;
    helloInterval?: pulumi.Input<number>;
    helloMultiplier?: pulumi.Input<number>;
    md5Keys?: pulumi.Input<pulumi.Input<inputs.RouterOspfVrfInterfaceMd5Key>[]>;
    mtu?: pulumi.Input<number>;
    mtuIgnore?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    priority?: pulumi.Input<number>;
    retransmitInterval?: pulumi.Input<number>;
    transmitDelay?: pulumi.Input<number>;
    ttl?: pulumi.Input<number>;
    ucastTtl?: pulumi.Input<number>;
}

export interface RouterOspfVrfInterfaceMd5Key {
    id?: pulumi.Input<number>;
    key?: pulumi.Input<string>;
}

export interface RouterOspfVrfNetwork {
    area?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    prefix?: pulumi.Input<string>;
}

export interface RouterOspfVrfPassiveInterface {
    name?: pulumi.Input<string>;
}

export interface RouterOspfVrfRedistribute {
    metric?: pulumi.Input<number>;
    metricType?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    routemap?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    tag?: pulumi.Input<number>;
}

export interface RouterOspfVrfSummaryAddress {
    id?: pulumi.Input<number>;
    prefix?: pulumi.Input<string>;
    tag?: pulumi.Input<number>;
}

export interface RouterPolicyInterface {
    name?: pulumi.Input<string>;
    pbrMapName?: pulumi.Input<string>;
}

export interface RouterPolicyNexthopGroup {
    name?: pulumi.Input<string>;
    nexthops?: pulumi.Input<pulumi.Input<inputs.RouterPolicyNexthopGroupNexthop>[]>;
}

export interface RouterPolicyNexthopGroupNexthop {
    id?: pulumi.Input<number>;
    nexthopIp?: pulumi.Input<string>;
    nexthopVrfName?: pulumi.Input<string>;
}

export interface RouterPolicyPbrMap {
    comments?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    rules?: pulumi.Input<pulumi.Input<inputs.RouterPolicyPbrMapRule>[]>;
}

export interface RouterPolicyPbrMapRule {
    dst?: pulumi.Input<string>;
    nexthopGroupName?: pulumi.Input<string>;
    nexthopIp?: pulumi.Input<string>;
    nexthopVrfName?: pulumi.Input<string>;
    seqNum?: pulumi.Input<number>;
    src?: pulumi.Input<string>;
}

export interface RouterPrefixlist6Rule {
    action?: pulumi.Input<string>;
    flags?: pulumi.Input<number>;
    ge?: pulumi.Input<number>;
    id?: pulumi.Input<number>;
    le?: pulumi.Input<number>;
    prefix6?: pulumi.Input<string>;
}

export interface RouterPrefixlistRule {
    action?: pulumi.Input<string>;
    flags?: pulumi.Input<number>;
    ge?: pulumi.Input<number>;
    id?: pulumi.Input<number>;
    le?: pulumi.Input<number>;
    prefix?: pulumi.Input<string>;
}

export interface RouterRipDistance {
    accessList?: pulumi.Input<string>;
    distance?: pulumi.Input<number>;
    id?: pulumi.Input<number>;
    prefix?: pulumi.Input<string>;
}

export interface RouterRipDistributeList {
    direction?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    interface?: pulumi.Input<string>;
    listname?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface RouterRipInterface {
    authKeychain?: pulumi.Input<string>;
    authMode?: pulumi.Input<string>;
    authString?: pulumi.Input<string>;
    flags?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    receiveVersion?: pulumi.Input<string>;
    sendVersion?: pulumi.Input<string>;
    sendVersion2Broadcast?: pulumi.Input<string>;
    splitHorizon?: pulumi.Input<string>;
    splitHorizonStatus?: pulumi.Input<string>;
}

export interface RouterRipNeighbor {
    id?: pulumi.Input<number>;
    ip?: pulumi.Input<string>;
}

export interface RouterRipNetwork {
    id?: pulumi.Input<number>;
    prefix?: pulumi.Input<string>;
}

export interface RouterRipOffsetList {
    accessList?: pulumi.Input<string>;
    direction?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    interface?: pulumi.Input<string>;
    offset?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
}

export interface RouterRipPassiveInterface {
    name?: pulumi.Input<string>;
}

export interface RouterRipRedistribute {
    flags?: pulumi.Input<number>;
    metric?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    routemap?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface RouterRipVrf {
    defaultInformationOriginate?: pulumi.Input<string>;
    defaultMetric?: pulumi.Input<number>;
    distances?: pulumi.Input<pulumi.Input<inputs.RouterRipVrfDistance>[]>;
    distributeLists?: pulumi.Input<pulumi.Input<inputs.RouterRipVrfDistributeList>[]>;
    garbageTimer?: pulumi.Input<number>;
    interfaces?: pulumi.Input<pulumi.Input<inputs.RouterRipVrfInterface>[]>;
    name?: pulumi.Input<string>;
    neighbors?: pulumi.Input<pulumi.Input<inputs.RouterRipVrfNeighbor>[]>;
    networks?: pulumi.Input<pulumi.Input<inputs.RouterRipVrfNetwork>[]>;
    offsetLists?: pulumi.Input<pulumi.Input<inputs.RouterRipVrfOffsetList>[]>;
    passiveInterfaces?: pulumi.Input<pulumi.Input<inputs.RouterRipVrfPassiveInterface>[]>;
    recvBufferSize?: pulumi.Input<number>;
    redistributes?: pulumi.Input<pulumi.Input<inputs.RouterRipVrfRedistribute>[]>;
    timeoutTimer?: pulumi.Input<number>;
    updateTimer?: pulumi.Input<number>;
    version?: pulumi.Input<string>;
}

export interface RouterRipVrfDistance {
    accessList?: pulumi.Input<string>;
    distance?: pulumi.Input<number>;
    id?: pulumi.Input<number>;
    prefix?: pulumi.Input<string>;
}

export interface RouterRipVrfDistributeList {
    direction?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    interface?: pulumi.Input<string>;
    listname?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface RouterRipVrfInterface {
    authKeychain?: pulumi.Input<string>;
    authMode?: pulumi.Input<string>;
    authString?: pulumi.Input<string>;
    flags?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    receiveVersion?: pulumi.Input<string>;
    sendVersion?: pulumi.Input<string>;
    sendVersion2Broadcast?: pulumi.Input<string>;
    splitHorizon?: pulumi.Input<string>;
    splitHorizonStatus?: pulumi.Input<string>;
}

export interface RouterRipVrfNeighbor {
    id?: pulumi.Input<number>;
    ip?: pulumi.Input<string>;
}

export interface RouterRipVrfNetwork {
    id?: pulumi.Input<number>;
    prefix?: pulumi.Input<string>;
}

export interface RouterRipVrfOffsetList {
    accessList?: pulumi.Input<string>;
    direction?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    interface?: pulumi.Input<string>;
    offset?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
}

export interface RouterRipVrfPassiveInterface {
    name?: pulumi.Input<string>;
}

export interface RouterRipVrfRedistribute {
    flags?: pulumi.Input<number>;
    metric?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    routemap?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface RouterRipngAggregateAddress {
    id?: pulumi.Input<number>;
    prefix6?: pulumi.Input<string>;
}

export interface RouterRipngDistributeList {
    direction?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    interface?: pulumi.Input<string>;
    listname?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface RouterRipngInterface {
    flags?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    passive?: pulumi.Input<string>;
    splitHorizon?: pulumi.Input<string>;
    splitHorizonStatus?: pulumi.Input<string>;
}

export interface RouterRipngOffsetList {
    accessList6?: pulumi.Input<string>;
    direction?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    interface?: pulumi.Input<string>;
    offset?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
}

export interface RouterRipngRedistribute {
    flags?: pulumi.Input<number>;
    metric?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    routemap?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface RouterRoutemapRule {
    action?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    matchAsPath?: pulumi.Input<string>;
    matchCommunity?: pulumi.Input<string>;
    matchCommunityExact?: pulumi.Input<string>;
    matchFlags?: pulumi.Input<number>;
    matchInterface?: pulumi.Input<string>;
    matchIp6Address?: pulumi.Input<string>;
    matchIpAddress?: pulumi.Input<string>;
    matchIpNexthop?: pulumi.Input<string>;
    matchMetric?: pulumi.Input<number>;
    matchOrigin?: pulumi.Input<string>;
    matchRouteType?: pulumi.Input<string>;
    matchTag?: pulumi.Input<number>;
    setAggregatorAs?: pulumi.Input<number>;
    setAggregatorIp?: pulumi.Input<string>;
    setAspaths?: pulumi.Input<pulumi.Input<inputs.RouterRoutemapRuleSetAspath>[]>;
    setAtomicAggregate?: pulumi.Input<string>;
    setCommunities?: pulumi.Input<pulumi.Input<inputs.RouterRoutemapRuleSetCommunity>[]>;
    setCommunityAdditive?: pulumi.Input<string>;
    setCommunityDelete?: pulumi.Input<string>;
    setExtcommunityRts?: pulumi.Input<pulumi.Input<inputs.RouterRoutemapRuleSetExtcommunityRt>[]>;
    setExtcommunitySoos?: pulumi.Input<pulumi.Input<inputs.RouterRoutemapRuleSetExtcommunitySoo>[]>;
    setFlags?: pulumi.Input<number>;
    setIp6Nexthop?: pulumi.Input<string>;
    setIp6NexthopLocal?: pulumi.Input<string>;
    setIpNexthop?: pulumi.Input<string>;
    setLocalPreference?: pulumi.Input<number>;
    setMetric?: pulumi.Input<number>;
    setMetricType?: pulumi.Input<string>;
    setOrigin?: pulumi.Input<string>;
    setOriginatorId?: pulumi.Input<string>;
    setTag?: pulumi.Input<number>;
    setWeight?: pulumi.Input<number>;
}

export interface RouterRoutemapRuleSetAspath {
    as?: pulumi.Input<string>;
}

export interface RouterRoutemapRuleSetCommunity {
    community?: pulumi.Input<string>;
}

export interface RouterRoutemapRuleSetExtcommunityRt {
    community?: pulumi.Input<string>;
}

export interface RouterRoutemapRuleSetExtcommunitySoo {
    community?: pulumi.Input<string>;
}

export interface RouterSettingFilterList {
    id?: pulumi.Input<number>;
    protocol?: pulumi.Input<string>;
    routeMap?: pulumi.Input<string>;
}

export interface Routerospf6AreaFilterList {
    direction?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    list?: pulumi.Input<string>;
}

export interface Routerospf6AreaRange {
    advertise?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    prefix6?: pulumi.Input<string>;
}

export interface RouterospfAreaFilterList {
    direction?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    list?: pulumi.Input<string>;
}

export interface RouterospfAreaRange {
    advertise?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    prefix?: pulumi.Input<string>;
    substitute?: pulumi.Input<string>;
    substituteStatus?: pulumi.Input<string>;
}

export interface RouterospfAreaVirtualLink {
    authentication?: pulumi.Input<string>;
    authenticationKey?: pulumi.Input<string>;
    deadInterval?: pulumi.Input<number>;
    helloInterval?: pulumi.Input<number>;
    md5Keys?: pulumi.Input<pulumi.Input<inputs.RouterospfAreaVirtualLinkMd5Key>[]>;
    name?: pulumi.Input<string>;
    peer?: pulumi.Input<string>;
    retransmitInterval?: pulumi.Input<number>;
    transmitDelay?: pulumi.Input<number>;
}

export interface RouterospfAreaVirtualLinkMd5Key {
    id?: pulumi.Input<number>;
    key?: pulumi.Input<string>;
}

export interface RouterospfInterfaceMd5Key {
    id?: pulumi.Input<number>;
    key?: pulumi.Input<string>;
}

export interface SwitchAutoislportgroupMember {
    memberName?: pulumi.Input<string>;
}

export interface SwitchGlobalPortSecurity {
    linkDownAuth?: pulumi.Input<string>;
    mabEntryAs?: pulumi.Input<string>;
    mabReauth?: pulumi.Input<string>;
    macCalledStationDelimiter?: pulumi.Input<string>;
    macCallingStationDelimiter?: pulumi.Input<string>;
    macCase?: pulumi.Input<string>;
    macPasswordDelimiter?: pulumi.Input<string>;
    macUsernameDelimiter?: pulumi.Input<string>;
    maxReauthAttempt?: pulumi.Input<number>;
    quarantineVlan?: pulumi.Input<string>;
    reauthPeriod?: pulumi.Input<number>;
    txPeriod?: pulumi.Input<number>;
}

export interface SwitchInterfaceDhcpSnoopOption82Override {
    circuitId?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    remoteId?: pulumi.Input<string>;
}

export interface SwitchInterfacePortSecurity {
    allowMacMove?: pulumi.Input<string>;
    allowMacMoveTo?: pulumi.Input<string>;
    authFailVlan?: pulumi.Input<string>;
    authFailVlanid?: pulumi.Input<number>;
    authOrder?: pulumi.Input<string>;
    authPriority?: pulumi.Input<string>;
    authserverTimeoutPeriod?: pulumi.Input<number>;
    authserverTimeoutVlan?: pulumi.Input<string>;
    authserverTimeoutVlanid?: pulumi.Input<number>;
    dacl?: pulumi.Input<string>;
    eapAutoUntaggedVlans?: pulumi.Input<string>;
    eapEgressTagged?: pulumi.Input<string>;
    eapPassthru?: pulumi.Input<string>;
    framevidApply?: pulumi.Input<string>;
    guestAuthDelay?: pulumi.Input<number>;
    guestVlan?: pulumi.Input<string>;
    guestVlanid?: pulumi.Input<number>;
    mabEapolRequest?: pulumi.Input<number>;
    macAuthBypass?: pulumi.Input<string>;
    macsecPaeMode?: pulumi.Input<string>;
    macsecProfile?: pulumi.Input<string>;
    openAuth?: pulumi.Input<string>;
    portSecurityMode?: pulumi.Input<string>;
    quarantineVlan?: pulumi.Input<string>;
    radiusTimeoutOverwrite?: pulumi.Input<string>;
}

export interface SwitchInterfaceQnq {
    addInner?: pulumi.Input<number>;
    edgeType?: pulumi.Input<string>;
    priority?: pulumi.Input<string>;
    removeInner?: pulumi.Input<string>;
    sTagPriority?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    stpQnqAdmin?: pulumi.Input<string>;
    untaggedSVlan?: pulumi.Input<number>;
    vlanMappingMissDrop?: pulumi.Input<string>;
    vlanMappings?: pulumi.Input<pulumi.Input<inputs.SwitchInterfaceQnqVlanMapping>[]>;
}

export interface SwitchInterfaceQnqVlanMapping {
    description?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    matchCVlan?: pulumi.Input<number>;
    newSVlan?: pulumi.Input<number>;
}

export interface SwitchInterfaceRaguard {
    id?: pulumi.Input<number>;
    raguardPolicy?: pulumi.Input<string>;
    vlanList?: pulumi.Input<string>;
}

export interface SwitchInterfaceSecurityGroup {
    name?: pulumi.Input<string>;
}

export interface SwitchInterfaceVlanMapping {
    action?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    direction?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    matchCVlan?: pulumi.Input<number>;
    matchSVlan?: pulumi.Input<number>;
    newSVlan?: pulumi.Input<number>;
}

export interface SwitchMirrorSrcEgress {
    name?: pulumi.Input<string>;
}

export interface SwitchMirrorSrcIngress {
    name?: pulumi.Input<string>;
}

export interface SwitchPhysicalportStormControl {
    broadcast?: pulumi.Input<string>;
    burstSizeLevel?: pulumi.Input<number>;
    rate?: pulumi.Input<number>;
    unknownMulticast?: pulumi.Input<string>;
    unknownUnicast?: pulumi.Input<string>;
}

export interface SwitchTrunkMember {
    memberName?: pulumi.Input<string>;
}

export interface SwitchVlanDhcpServerAccessList {
    name?: pulumi.Input<string>;
    serverIp?: pulumi.Input<string>;
    serverIp6?: pulumi.Input<string>;
}

export interface SwitchVlanDhcpSnoopingStaticClient {
    ipAddr?: pulumi.Input<string>;
    macAddr?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    switchInterface?: pulumi.Input<string>;
}

export interface SwitchVlanIgmpSnoopingStaticGroup {
    ignoreReports?: pulumi.Input<string>;
    mcastAddr?: pulumi.Input<string>;
    members?: pulumi.Input<pulumi.Input<inputs.SwitchVlanIgmpSnoopingStaticGroupMember>[]>;
    name?: pulumi.Input<string>;
}

export interface SwitchVlanIgmpSnoopingStaticGroupMember {
    memberName?: pulumi.Input<string>;
}

export interface SwitchVlanMemberByIpv4 {
    address?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
}

export interface SwitchVlanMemberByIpv6 {
    description?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    prefix?: pulumi.Input<string>;
}

export interface SwitchVlanMemberByMac {
    description?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    mac?: pulumi.Input<string>;
}

export interface SwitchVlanMemberByProto {
    description?: pulumi.Input<string>;
    frametypes?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    protocol?: pulumi.Input<number>;
}

export interface SwitchVlanMldSnoopingStaticGroup {
    ignoreReports?: pulumi.Input<string>;
    mcastAddr?: pulumi.Input<string>;
    members?: pulumi.Input<pulumi.Input<inputs.SwitchVlanMldSnoopingStaticGroupMember>[]>;
    name?: pulumi.Input<string>;
}

export interface SwitchVlanMldSnoopingStaticGroupMember {
    memberName?: pulumi.Input<string>;
}

export interface SwitchVlanMrouterPort {
    memberName?: pulumi.Input<string>;
}

export interface Switchacl8021XAccessListEntry {
    action?: pulumi.Input<inputs.Switchacl8021XAccessListEntryAction>;
    classifier?: pulumi.Input<inputs.Switchacl8021XAccessListEntryClassifier>;
    description?: pulumi.Input<string>;
    group?: pulumi.Input<number>;
    id?: pulumi.Input<number>;
}

export interface Switchacl8021XAccessListEntryAction {
    count?: pulumi.Input<string>;
    drop?: pulumi.Input<string>;
}

export interface Switchacl8021XAccessListEntryClassifier {
    dstIpPrefix?: pulumi.Input<string>;
    dstMac?: pulumi.Input<string>;
    etherType?: pulumi.Input<number>;
    service?: pulumi.Input<string>;
    srcIpPrefix?: pulumi.Input<string>;
    srcMac?: pulumi.Input<string>;
    vlanId?: pulumi.Input<number>;
}

export interface SwitchaclEgressAction {
    count?: pulumi.Input<string>;
    countType?: pulumi.Input<string>;
    drop?: pulumi.Input<string>;
    mirror?: pulumi.Input<string>;
    outerVlanTag?: pulumi.Input<number>;
    policer?: pulumi.Input<number>;
    redirect?: pulumi.Input<string>;
    remarkDscp?: pulumi.Input<number>;
}

export interface SwitchaclEgressClassifier {
    cos?: pulumi.Input<number>;
    dscp?: pulumi.Input<number>;
    dstIpPrefix?: pulumi.Input<string>;
    dstMac?: pulumi.Input<string>;
    etherType?: pulumi.Input<number>;
    service?: pulumi.Input<string>;
    srcIpPrefix?: pulumi.Input<string>;
    srcMac?: pulumi.Input<string>;
    vlanId?: pulumi.Input<number>;
}

export interface SwitchaclEgressSchedule {
    scheduleName?: pulumi.Input<string>;
}

export interface SwitchaclIngressAction {
    cosQueue?: pulumi.Input<number>;
    count?: pulumi.Input<string>;
    countType?: pulumi.Input<string>;
    cpuCosQueue?: pulumi.Input<string>;
    drop?: pulumi.Input<string>;
    egressMasks?: pulumi.Input<pulumi.Input<inputs.SwitchaclIngressActionEgressMask>[]>;
    mirror?: pulumi.Input<string>;
    outerVlanTag?: pulumi.Input<number>;
    policer?: pulumi.Input<number>;
    redirect?: pulumi.Input<string>;
    redirectBcastCpu?: pulumi.Input<string>;
    redirectBcastNoCpu?: pulumi.Input<string>;
    redirectPhysicalPorts?: pulumi.Input<pulumi.Input<inputs.SwitchaclIngressActionRedirectPhysicalPort>[]>;
    remarkCos?: pulumi.Input<number>;
    remarkDscp?: pulumi.Input<number>;
}

export interface SwitchaclIngressActionEgressMask {
    memberName?: pulumi.Input<string>;
}

export interface SwitchaclIngressActionRedirectPhysicalPort {
    memberName?: pulumi.Input<string>;
}

export interface SwitchaclIngressClassifier {
    cos?: pulumi.Input<number>;
    dscp?: pulumi.Input<number>;
    dstIp6Prefix?: pulumi.Input<string>;
    dstIpPrefix?: pulumi.Input<string>;
    dstMac?: pulumi.Input<string>;
    etherType?: pulumi.Input<number>;
    service?: pulumi.Input<string>;
    srcIp6Prefix?: pulumi.Input<string>;
    srcIpPrefix?: pulumi.Input<string>;
    srcMac?: pulumi.Input<string>;
    vlanId?: pulumi.Input<number>;
}

export interface SwitchaclIngressIngressInterface {
    memberName?: pulumi.Input<string>;
}

export interface SwitchaclIngressSchedule {
    scheduleName?: pulumi.Input<string>;
}

export interface SwitchaclPrelookupAction {
    cosQueue?: pulumi.Input<number>;
    count?: pulumi.Input<string>;
    drop?: pulumi.Input<string>;
    outerVlanTag?: pulumi.Input<number>;
    remarkCos?: pulumi.Input<number>;
}

export interface SwitchaclPrelookupClassifier {
    cos?: pulumi.Input<number>;
    dscp?: pulumi.Input<number>;
    dstIpPrefix?: pulumi.Input<string>;
    dstMac?: pulumi.Input<string>;
    etherType?: pulumi.Input<number>;
    service?: pulumi.Input<string>;
    srcIpPrefix?: pulumi.Input<string>;
    srcMac?: pulumi.Input<string>;
    vlanId?: pulumi.Input<number>;
}

export interface SwitchaclPrelookupSchedule {
    scheduleName?: pulumi.Input<string>;
}

export interface SwitchcontrollerGlobalAcList {
    id?: pulumi.Input<number>;
    ipv4Address?: pulumi.Input<string>;
    ipv6Address?: pulumi.Input<string>;
}

export interface SwitchlldpProfileCustomTlv {
    informationString?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    oui?: pulumi.Input<string>;
    subtype?: pulumi.Input<number>;
}

export interface SwitchlldpProfileMedLocationService {
    name?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    sysLocationId?: pulumi.Input<string>;
}

export interface SwitchlldpProfileMedNetworkPolicy {
    assignVlan?: pulumi.Input<string>;
    dscp?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    priority?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    vlan?: pulumi.Input<number>;
}

export interface SwitchmacsecProfileMkaPsk {
    cryptoAlg?: pulumi.Input<string>;
    mkaCak?: pulumi.Input<string>;
    mkaCkn?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface SwitchmacsecProfileTrafficPolicy {
    excludeProtocol?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    securityPolicy?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface SwitchqosIpdscpmapMap {
    cosQueue?: pulumi.Input<number>;
    diffserv?: pulumi.Input<string>;
    entryName?: pulumi.Input<string>;
    ipPrecedence?: pulumi.Input<string>;
    type?: pulumi.Input<number>;
    value?: pulumi.Input<string>;
}

export interface SwitchqosQospolicyCosQueue {
    description?: pulumi.Input<string>;
    dropPolicy?: pulumi.Input<string>;
    ecn?: pulumi.Input<string>;
    maxRate?: pulumi.Input<number>;
    maxRatePercent?: pulumi.Input<number>;
    minRate?: pulumi.Input<number>;
    minRatePercent?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    weight?: pulumi.Input<number>;
    wredSlope?: pulumi.Input<number>;
}

export interface SwitchstpInstanceStpPort {
    cost?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    priority?: pulumi.Input<string>;
}

export interface SystemAccprofileAliasCommand {
    commandName?: pulumi.Input<string>;
}

export interface SystemAlarmGroup {
    adminAuthFailureThreshold?: pulumi.Input<number>;
    adminAuthLockoutThreshold?: pulumi.Input<number>;
    decryptionFailureThreshold?: pulumi.Input<number>;
    encryptionFailureThreshold?: pulumi.Input<number>;
    fwPolicyId?: pulumi.Input<number>;
    fwPolicyIdThreshold?: pulumi.Input<number>;
    fwPolicyViolations?: pulumi.Input<pulumi.Input<inputs.SystemAlarmGroupFwPolicyViolation>[]>;
    id?: pulumi.Input<number>;
    logFullWarningThreshold?: pulumi.Input<number>;
    period?: pulumi.Input<number>;
    replayAttemptThreshold?: pulumi.Input<number>;
    selfTestFailureThreshold?: pulumi.Input<number>;
    userAuthFailureThreshold?: pulumi.Input<number>;
    userAuthLockoutThreshold?: pulumi.Input<number>;
}

export interface SystemAlarmGroupFwPolicyViolation {
    dstIp?: pulumi.Input<string>;
    dstPort?: pulumi.Input<number>;
    srcIp?: pulumi.Input<string>;
    srcPort?: pulumi.Input<number>;
    threshold?: pulumi.Input<number>;
}

export interface SystemAutomationactionEmailTo {
    name?: pulumi.Input<string>;
}

export interface SystemAutomationactionHeader {
    header?: pulumi.Input<string>;
}

export interface SystemAutomationdestinationDestination {
    name?: pulumi.Input<string>;
}

export interface SystemAutomationstitchAction {
    name?: pulumi.Input<string>;
}

export interface SystemAutomationtriggerField {
    id?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface SystemDnsdatabaseDnsEntry {
    canonicalName?: pulumi.Input<string>;
    hostname?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    ip?: pulumi.Input<string>;
    ipv6?: pulumi.Input<string>;
    preference?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    ttl?: pulumi.Input<number>;
    type?: pulumi.Input<string>;
}

export interface SystemFlowexportAggregate {
    id?: pulumi.Input<number>;
    ip?: pulumi.Input<string>;
}

export interface SystemFlowexportCollector {
    ip?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    transport?: pulumi.Input<string>;
}

export interface SystemFortiguardSrvOvrdList {
    addrType?: pulumi.Input<string>;
    ip?: pulumi.Input<string>;
    ip6?: pulumi.Input<string>;
}

export interface SystemInterfaceIpv6 {
    autoconf?: pulumi.Input<string>;
    dhcp6InformationRequest?: pulumi.Input<string>;
    ip6Address?: pulumi.Input<string>;
    ip6Allowaccess?: pulumi.Input<string>;
    ip6DefaultLife?: pulumi.Input<number>;
    ip6DnsServerOverride?: pulumi.Input<string>;
    ip6ExtraAddrs?: pulumi.Input<pulumi.Input<inputs.SystemInterfaceIpv6Ip6ExtraAddr>[]>;
    ip6HopLimit?: pulumi.Input<number>;
    ip6LinkMtu?: pulumi.Input<number>;
    ip6ManageFlag?: pulumi.Input<string>;
    ip6MaxInterval?: pulumi.Input<number>;
    ip6MinInterval?: pulumi.Input<number>;
    ip6Mode?: pulumi.Input<string>;
    ip6OtherFlag?: pulumi.Input<string>;
    ip6PrefixLists?: pulumi.Input<pulumi.Input<inputs.SystemInterfaceIpv6Ip6PrefixList>[]>;
    ip6ReachableTime?: pulumi.Input<number>;
    ip6RetransTime?: pulumi.Input<number>;
    ip6SendAdv?: pulumi.Input<string>;
    ip6UnknownMcastToCpu?: pulumi.Input<string>;
    vrip6LinkLocal?: pulumi.Input<string>;
    vrrp6s?: pulumi.Input<pulumi.Input<inputs.SystemInterfaceIpv6Vrrp6>[]>;
    vrrpVirtualMac6?: pulumi.Input<string>;
}

export interface SystemInterfaceIpv6Ip6ExtraAddr {
    prefix?: pulumi.Input<string>;
}

export interface SystemInterfaceIpv6Ip6PrefixList {
    autonomousFlag?: pulumi.Input<string>;
    onlinkFlag?: pulumi.Input<string>;
    preferredLifeTime?: pulumi.Input<number>;
    prefix?: pulumi.Input<string>;
    validLifeTime?: pulumi.Input<number>;
}

export interface SystemInterfaceIpv6Vrrp6 {
    acceptMode?: pulumi.Input<string>;
    advInterval?: pulumi.Input<number>;
    preempt?: pulumi.Input<string>;
    priority?: pulumi.Input<number>;
    startTime?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    vrdst6?: pulumi.Input<string>;
    vrgrp?: pulumi.Input<number>;
    vrid?: pulumi.Input<number>;
    vrip6?: pulumi.Input<string>;
}

export interface SystemInterfaceSecondaryip {
    allowaccess?: pulumi.Input<string>;
    detectprotocol?: pulumi.Input<string>;
    detectserver?: pulumi.Input<string>;
    gwdetect?: pulumi.Input<string>;
    haPriority?: pulumi.Input<number>;
    id?: pulumi.Input<number>;
    ip?: pulumi.Input<string>;
    pingServStatus?: pulumi.Input<number>;
}

export interface SystemInterfaceSwitchMember {
    memberName?: pulumi.Input<string>;
}

export interface SystemInterfaceVrrp {
    advInterval?: pulumi.Input<number>;
    backupVmacFwd?: pulumi.Input<string>;
    preempt?: pulumi.Input<string>;
    priority?: pulumi.Input<number>;
    startTime?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    version?: pulumi.Input<string>;
    vrdst?: pulumi.Input<string>;
    vrgrp?: pulumi.Input<number>;
    vrid?: pulumi.Input<number>;
    vrip?: pulumi.Input<string>;
}

export interface SystemLinkmonitorServer {
    address?: pulumi.Input<string>;
}

export interface SystemLocationAddressCivic {
    additional?: pulumi.Input<string>;
    additionalCode?: pulumi.Input<string>;
    block?: pulumi.Input<string>;
    branchRoad?: pulumi.Input<string>;
    building?: pulumi.Input<string>;
    city?: pulumi.Input<string>;
    cityDivision?: pulumi.Input<string>;
    country?: pulumi.Input<string>;
    countrySubdivision?: pulumi.Input<string>;
    county?: pulumi.Input<string>;
    direction?: pulumi.Input<string>;
    floor?: pulumi.Input<string>;
    landmark?: pulumi.Input<string>;
    language?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    number?: pulumi.Input<string>;
    numberSuffix?: pulumi.Input<string>;
    placeType?: pulumi.Input<string>;
    postOfficeBox?: pulumi.Input<string>;
    postalCommunity?: pulumi.Input<string>;
    primaryRoad?: pulumi.Input<string>;
    roadSection?: pulumi.Input<string>;
    room?: pulumi.Input<string>;
    script?: pulumi.Input<string>;
    seat?: pulumi.Input<string>;
    street?: pulumi.Input<string>;
    streetNamePostMod?: pulumi.Input<string>;
    streetNamePreMod?: pulumi.Input<string>;
    streetSuffix?: pulumi.Input<string>;
    subBranchRoad?: pulumi.Input<string>;
    trailingStrSuffix?: pulumi.Input<string>;
    unit?: pulumi.Input<string>;
    zip?: pulumi.Input<string>;
}

export interface SystemLocationCoordinates {
    altitude?: pulumi.Input<string>;
    altitudeUnit?: pulumi.Input<string>;
    datum?: pulumi.Input<string>;
    latitude?: pulumi.Input<string>;
    longitude?: pulumi.Input<string>;
}

export interface SystemLocationElinNumber {
    elinNumber?: pulumi.Input<string>;
}

export interface SystemNtpNtpserver {
    authentication?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    key?: pulumi.Input<string>;
    keyId?: pulumi.Input<number>;
    ntpv3?: pulumi.Input<string>;
    server?: pulumi.Input<string>;
}

export interface SystemPortpairMember {
    interfaceName?: pulumi.Input<string>;
}

export interface SystemSessionttlPort {
    endPort?: pulumi.Input<number>;
    id?: pulumi.Input<number>;
    protocol?: pulumi.Input<number>;
    startPort?: pulumi.Input<number>;
    timeout?: pulumi.Input<string>;
}

export interface SystemSflowCollector {
    ip?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
}

export interface SystemVxlanRemoteIp {
    ip?: pulumi.Input<string>;
}

export interface SystemZoneInterface {
    interfaceName?: pulumi.Input<string>;
}

export interface SystemaliasCommandReadOnlyAttribute {
    attributeName?: pulumi.Input<string>;
}

export interface SystemaliasCommandScriptArgument {
    allowedValues?: pulumi.Input<pulumi.Input<inputs.SystemaliasCommandScriptArgumentAllowedValue>[]>;
    help?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    optional?: pulumi.Input<string>;
    range?: pulumi.Input<string>;
    rangeDelay?: pulumi.Input<number>;
    tablePath?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface SystemaliasCommandScriptArgumentAllowedValue {
    value?: pulumi.Input<string>;
}

export interface SystemaliasCommandTableIdsAllowed {
    entryId?: pulumi.Input<string>;
}

export interface SystemaliasGroupCommand {
    commandName?: pulumi.Input<string>;
}

export interface SystemdhcpServerExcludeRange {
    endIp?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    startIp?: pulumi.Input<string>;
}

export interface SystemdhcpServerIpRange {
    endIp?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    startIp?: pulumi.Input<string>;
}

export interface SystemdhcpServerOption {
    code?: pulumi.Input<number>;
    id?: pulumi.Input<number>;
    ip?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface SystemdhcpServerReservedAddress {
    action?: pulumi.Input<string>;
    circuitId?: pulumi.Input<string>;
    circuitIdType?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    ip?: pulumi.Input<string>;
    mac?: pulumi.Input<string>;
    remoteId?: pulumi.Input<string>;
    remoteIdType?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface SystemdhcpServerTftpServer {
    tftpServer?: pulumi.Input<string>;
}

export interface SystemdhcpServerVciString {
    vciString?: pulumi.Input<string>;
}

export interface SystemscheduleGroupMember {
    name?: pulumi.Input<string>;
}

export interface SystemsnmpCommunityHost {
    id?: pulumi.Input<number>;
    interface?: pulumi.Input<string>;
    ip?: pulumi.Input<string>;
    sourceIp?: pulumi.Input<string>;
}

export interface SystemsnmpCommunityHosts6 {
    id?: pulumi.Input<number>;
    interface?: pulumi.Input<string>;
    ipv6?: pulumi.Input<string>;
    sourceIpv6?: pulumi.Input<string>;
}

export interface UserGroupMatch {
    groupName?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    serverName?: pulumi.Input<string>;
}

export interface UserGroupMember {
    name?: pulumi.Input<string>;
}

export interface UserPeergrpMember {
    name?: pulumi.Input<string>;
}

export interface UserRadiusAcctServer {
    id?: pulumi.Input<number>;
    port?: pulumi.Input<number>;
    secret?: pulumi.Input<string>;
    server?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface UserSettingAuthPort {
    id?: pulumi.Input<number>;
    port?: pulumi.Input<number>;
    type?: pulumi.Input<string>;
}
