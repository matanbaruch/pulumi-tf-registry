// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface GetRouterAccesslist6Rule {
    action: string;
    exactMatch: string;
    flags: number;
    id: number;
    prefix6: string;
}

export interface GetRouterAccesslistRule {
    action: string;
    exactMatch: string;
    flags: number;
    id: number;
    prefix: string;
    wildcard: string;
}

export interface GetRouterAspathlistRule {
    action: string;
    id: number;
    regexp: string;
}

export interface GetRouterBgpAdminDistance {
    distance: number;
    id: number;
    neighbourPrefix: string;
    routeList: string;
}

export interface GetRouterBgpAdminDistance6 {
    distance: number;
    id: number;
    neighbourPrefix6: string;
    route6List: string;
}

export interface GetRouterBgpAggregateAddress {
    asSet: string;
    id: number;
    prefix: string;
    summaryOnly: string;
}

export interface GetRouterBgpAggregateAddress6 {
    id: number;
    prefix6: string;
    summaryOnly: string;
}

export interface GetRouterBgpConfederationPeer {
    peer: string;
}

export interface GetRouterBgpNeighbor {
    activate: string;
    activate6: string;
    activateEvpn: string;
    advertisementInterval: number;
    allowasIn: number;
    allowasIn6: number;
    allowasInEnable: string;
    allowasInEnable6: string;
    allowasInEnableEvpn: string;
    asOverride: string;
    asOverride6: string;
    attributeUnchanged: string;
    attributeUnchanged6: string;
    attributeUnchangedEvpn: string;
    bfd: string;
    bfdSessionMode: string;
    capabilityDefaultOriginate: string;
    capabilityDefaultOriginate6: string;
    capabilityDynamic: string;
    capabilityOrf: string;
    capabilityOrf6: string;
    connectTimer: number;
    defaultOriginateRoutemap: string;
    defaultOriginateRoutemap6: string;
    description: string;
    distributeListIn: string;
    distributeListIn6: string;
    distributeListOut: string;
    distributeListOut6: string;
    dontCapabilityNegotiate: string;
    ebgpEnforceMultihop: string;
    ebgpMultihopTtl: number;
    ebgpTtlSecurityHops: number;
    enforceFirstAs: string;
    filterListIn: string;
    filterListIn6: string;
    filterListOut: string;
    filterListOut6: string;
    holdtimeTimer: number;
    interface: string;
    ip: string;
    keepAliveTimer: number;
    maximumPrefix: number;
    maximumPrefix6: number;
    maximumPrefixThreshold: number;
    maximumPrefixThreshold6: number;
    maximumPrefixWarningOnly: string;
    maximumPrefixWarningOnly6: string;
    nextHopSelf: string;
    nextHopSelf6: string;
    overrideCapability: string;
    passive: string;
    password: string;
    prefixListIn: string;
    prefixListIn6: string;
    prefixListOut: string;
    prefixListOut6: string;
    remoteAs: number;
    removePrivateAs: string;
    removePrivateAs6: string;
    routeMapIn: string;
    routeMapIn6: string;
    routeMapInEvpn: string;
    routeMapOut: string;
    routeMapOut6: string;
    routeMapOutEvpn: string;
    routeReflectorClient: string;
    routeReflectorClient6: string;
    routeReflectorClientEvpn: string;
    routeServerClient: string;
    routeServerClient6: string;
    sendCommunity: string;
    sendCommunity6: string;
    shutdown: string;
    softReconfiguration: string;
    softReconfiguration6: string;
    softReconfigurationEvpn: string;
    strictCapabilityMatch: string;
    unsuppressMap: string;
    unsuppressMap6: string;
    updateSource: string;
    weight: number;
}

export interface GetRouterBgpNetwork {
    backdoor: string;
    id: number;
    prefix: string;
    routeMap: string;
}

export interface GetRouterBgpNetwork6 {
    id: number;
    prefix6: string;
    routeMap: string;
}

export interface GetRouterBgpRedistribute {
    name: string;
    routeMap: string;
    status: string;
}

export interface GetRouterBgpRedistribute6 {
    name: string;
    routeMap: string;
    status: string;
}

export interface GetRouterCommunitylistRule {
    action: string;
    id: number;
    match: string;
    regexp: string;
}

export interface GetRouterIsisInterface {
    authKeychainHello: string;
    authModeHello: string;
    authPasswordHello: string;
    bfd: string;
    bfd6: string;
    circuitType: string;
    csnpIntervalL1: number;
    csnpIntervalL2: number;
    helloIntervalL1: number;
    helloIntervalL2: number;
    helloMultiplierL1: number;
    helloMultiplierL2: number;
    helloPadding: string;
    metricL1: number;
    metricL2: number;
    name: string;
    passive: string;
    priorityL1: number;
    priorityL2: number;
    status: string;
    status6: string;
    wideMetricL1: number;
    wideMetricL2: number;
}

export interface GetRouterIsisNet {
    net: string;
}

export interface GetRouterIsisRedistribute {
    level: string;
    metric: number;
    metricType: string;
    protocol: string;
    routemap: string;
    status: string;
}

export interface GetRouterIsisRedistribute6 {
    level: string;
    metric: number;
    protocol: string;
    routemap: string;
    status: string;
}

export interface GetRouterIsisSummaryAddress {
    id: number;
    level: string;
    prefix: string;
}

export interface GetRouterIsisSummaryAddress6 {
    id: number;
    level: string;
    prefix6: string;
}

export interface GetRouterKeychainKey {
    acceptLifetime: string;
    id: number;
    keyString: string;
    sendLifetime: string;
}

export interface GetRouterMulticastInterface {
    drPriority: number;
    helloInterval: number;
    igmps: outputs.GetRouterMulticastInterfaceIgmp[];
    multicastFlow: string;
    name: string;
    pimMode: string;
}

export interface GetRouterMulticastInterfaceIgmp {
    queryInterval: number;
    queryMaxResponseTime: number;
}

export interface GetRouterMulticastflowFlow {
    groupAddr: string;
    groupAddrEnd: string;
    id: number;
    sourceAddr: string;
}

export interface GetRouterOspf6Area {
    filterLists: outputs.GetRouterOspf6AreaFilterList[];
    id: string;
    ranges: outputs.GetRouterOspf6AreaRange[];
    stubType: string;
    type: string;
}

export interface GetRouterOspf6AreaFilterList {
    direction: string;
    id: number;
    list: string;
}

export interface GetRouterOspf6AreaRange {
    advertise: string;
    id: number;
    prefix6: string;
}

export interface GetRouterOspf6Interface {
    areaId: string;
    bfd: string;
    cost: number;
    deadInterval: number;
    helloInterval: number;
    name: string;
    passive: string;
    priority: number;
    retransmitInterval: number;
    status: string;
    transmitDelay: number;
}

export interface GetRouterOspf6Redistribute {
    metric: number;
    metricType: string;
    name: string;
    routemap: string;
    status: string;
}

export interface GetRouterOspfArea {
    defaultCost: number;
    filterLists: outputs.GetRouterOspfAreaFilterList[];
    id: string;
    nssaTranslatorRole: string;
    ranges: outputs.GetRouterOspfAreaRange[];
    shortcut: string;
    stubType: string;
    type: string;
    virtualLinks: outputs.GetRouterOspfAreaVirtualLink[];
}

export interface GetRouterOspfAreaFilterList {
    direction: string;
    id: number;
    list: string;
}

export interface GetRouterOspfAreaRange {
    advertise: string;
    id: number;
    prefix: string;
    substitute: string;
    substituteStatus: string;
}

export interface GetRouterOspfAreaVirtualLink {
    authentication: string;
    authenticationKey: string;
    deadInterval: number;
    helloInterval: number;
    md5Keys: outputs.GetRouterOspfAreaVirtualLinkMd5Key[];
    name: string;
    peer: string;
    retransmitInterval: number;
    transmitDelay: number;
}

export interface GetRouterOspfAreaVirtualLinkMd5Key {
    id: number;
    key: string;
}

export interface GetRouterOspfDistributeList {
    accessList: string;
    id: number;
    protocol: string;
}

export interface GetRouterOspfInterface {
    authentication: string;
    authenticationKey: string;
    bfd: string;
    cost: number;
    deadInterval: number;
    helloInterval: number;
    helloMultiplier: number;
    md5Keys: outputs.GetRouterOspfInterfaceMd5Key[];
    mtu: number;
    mtuIgnore: string;
    name: string;
    priority: number;
    retransmitInterval: number;
    transmitDelay: number;
    ttl: number;
    ucastTtl: number;
}

export interface GetRouterOspfInterfaceMd5Key {
    id: number;
    key: string;
}

export interface GetRouterOspfNetwork {
    area: string;
    id: number;
    prefix: string;
}

export interface GetRouterOspfPassiveInterface {
    name: string;
}

export interface GetRouterOspfRedistribute {
    metric: number;
    metricType: string;
    name: string;
    routemap: string;
    status: string;
    tag: number;
}

export interface GetRouterOspfSummaryAddress {
    id: number;
    prefix: string;
    tag: number;
}

export interface GetRouterOspfVrf {
    abrType: string;
    areas: outputs.GetRouterOspfVrfArea[];
    databaseOverflow: string;
    databaseOverflowMaxExternalLsa: number;
    databaseOverflowTimeToRecover: number;
    defaultInformationMetric: number;
    defaultInformationMetricType: string;
    defaultInformationOriginate: string;
    distance: number;
    distanceExternal: number;
    distanceInterArea: number;
    distanceIntraArea: number;
    distributeLists: outputs.GetRouterOspfVrfDistributeList[];
    interfaces: outputs.GetRouterOspfVrfInterface[];
    logNeighbourChanges: string;
    name: string;
    networks: outputs.GetRouterOspfVrfNetwork[];
    passiveInterfaces: outputs.GetRouterOspfVrfPassiveInterface[];
    redistributes: outputs.GetRouterOspfVrfRedistribute[];
    rfc1583Compatible: string;
    routerId: string;
    spfTimers: string;
    summaryAddresses: outputs.GetRouterOspfVrfSummaryAddress[];
}

export interface GetRouterOspfVrfArea {
    defaultCost: number;
    filterLists: outputs.GetRouterOspfVrfAreaFilterList[];
    id: string;
    nssaTranslatorRole: string;
    ranges: outputs.GetRouterOspfVrfAreaRange[];
    shortcut: string;
    stubType: string;
    type: string;
    virtualLinks: outputs.GetRouterOspfVrfAreaVirtualLink[];
}

export interface GetRouterOspfVrfAreaFilterList {
    direction: string;
    id: number;
    list: string;
}

export interface GetRouterOspfVrfAreaRange {
    advertise: string;
    id: number;
    prefix: string;
    substitute: string;
    substituteStatus: string;
}

export interface GetRouterOspfVrfAreaVirtualLink {
    authentication: string;
    authenticationKey: string;
    deadInterval: number;
    helloInterval: number;
    name: string;
    peer: string;
    retransmitInterval: number;
    transmitDelay: number;
}

export interface GetRouterOspfVrfDistributeList {
    accessList: string;
    id: number;
    protocol: string;
}

export interface GetRouterOspfVrfInterface {
    authentication: string;
    authenticationKey: string;
    cost: number;
    deadInterval: number;
    helloInterval: number;
    helloMultiplier: number;
    md5Keys: outputs.GetRouterOspfVrfInterfaceMd5Key[];
    mtu: number;
    mtuIgnore: string;
    name: string;
    priority: number;
    retransmitInterval: number;
    transmitDelay: number;
    ttl: number;
    ucastTtl: number;
}

export interface GetRouterOspfVrfInterfaceMd5Key {
    id: number;
    key: string;
}

export interface GetRouterOspfVrfNetwork {
    area: string;
    id: number;
    prefix: string;
}

export interface GetRouterOspfVrfPassiveInterface {
    name: string;
}

export interface GetRouterOspfVrfRedistribute {
    metric: number;
    metricType: string;
    name: string;
    routemap: string;
    status: string;
    tag: number;
}

export interface GetRouterOspfVrfSummaryAddress {
    id: number;
    prefix: string;
    tag: number;
}

export interface GetRouterPolicyInterface {
    name: string;
    pbrMapName: string;
}

export interface GetRouterPolicyNexthopGroup {
    name: string;
    nexthops: outputs.GetRouterPolicyNexthopGroupNexthop[];
}

export interface GetRouterPolicyNexthopGroupNexthop {
    id: number;
    nexthopIp: string;
    nexthopVrfName: string;
}

export interface GetRouterPolicyPbrMap {
    comments: string;
    name: string;
    rules: outputs.GetRouterPolicyPbrMapRule[];
}

export interface GetRouterPolicyPbrMapRule {
    dst: string;
    nexthopGroupName: string;
    nexthopIp: string;
    nexthopVrfName: string;
    seqNum: number;
    src: string;
}

export interface GetRouterPrefixlist6Rule {
    action: string;
    flags: number;
    ge: number;
    id: number;
    le: number;
    prefix6: string;
}

export interface GetRouterPrefixlistRule {
    action: string;
    flags: number;
    ge: number;
    id: number;
    le: number;
    prefix: string;
}

export interface GetRouterRipDistance {
    accessList: string;
    distance: number;
    id: number;
    prefix: string;
}

export interface GetRouterRipDistributeList {
    direction: string;
    id: number;
    interface: string;
    listname: string;
    status: string;
}

export interface GetRouterRipInterface {
    authKeychain: string;
    authMode: string;
    authString: string;
    flags: number;
    name: string;
    receiveVersion: string;
    sendVersion: string;
    sendVersion2Broadcast: string;
    splitHorizon: string;
    splitHorizonStatus: string;
}

export interface GetRouterRipNeighbor {
    id: number;
    ip: string;
}

export interface GetRouterRipNetwork {
    id: number;
    prefix: string;
}

export interface GetRouterRipOffsetList {
    accessList: string;
    direction: string;
    id: number;
    interface: string;
    offset: number;
    status: string;
}

export interface GetRouterRipPassiveInterface {
    name: string;
}

export interface GetRouterRipRedistribute {
    flags: number;
    metric: number;
    name: string;
    routemap: string;
    status: string;
}

export interface GetRouterRipVrf {
    defaultInformationOriginate: string;
    defaultMetric: number;
    distances: outputs.GetRouterRipVrfDistance[];
    distributeLists: outputs.GetRouterRipVrfDistributeList[];
    garbageTimer: number;
    interfaces: outputs.GetRouterRipVrfInterface[];
    name: string;
    neighbors: outputs.GetRouterRipVrfNeighbor[];
    networks: outputs.GetRouterRipVrfNetwork[];
    offsetLists: outputs.GetRouterRipVrfOffsetList[];
    passiveInterfaces: outputs.GetRouterRipVrfPassiveInterface[];
    recvBufferSize: number;
    redistributes: outputs.GetRouterRipVrfRedistribute[];
    timeoutTimer: number;
    updateTimer: number;
    version: string;
}

export interface GetRouterRipVrfDistance {
    accessList: string;
    distance: number;
    id: number;
    prefix: string;
}

export interface GetRouterRipVrfDistributeList {
    direction: string;
    id: number;
    interface: string;
    listname: string;
    status: string;
}

export interface GetRouterRipVrfInterface {
    authKeychain: string;
    authMode: string;
    authString: string;
    flags: number;
    name: string;
    receiveVersion: string;
    sendVersion: string;
    sendVersion2Broadcast: string;
    splitHorizon: string;
    splitHorizonStatus: string;
}

export interface GetRouterRipVrfNeighbor {
    id: number;
    ip: string;
}

export interface GetRouterRipVrfNetwork {
    id: number;
    prefix: string;
}

export interface GetRouterRipVrfOffsetList {
    accessList: string;
    direction: string;
    id: number;
    interface: string;
    offset: number;
    status: string;
}

export interface GetRouterRipVrfPassiveInterface {
    name: string;
}

export interface GetRouterRipVrfRedistribute {
    flags: number;
    metric: number;
    name: string;
    routemap: string;
    status: string;
}

export interface GetRouterRipngAggregateAddress {
    id: number;
    prefix6: string;
}

export interface GetRouterRipngDistributeList {
    direction: string;
    id: number;
    interface: string;
    listname: string;
    status: string;
}

export interface GetRouterRipngInterface {
    flags: number;
    name: string;
    passive: string;
    splitHorizon: string;
    splitHorizonStatus: string;
}

export interface GetRouterRipngOffsetList {
    accessList6: string;
    direction: string;
    id: number;
    interface: string;
    offset: number;
    status: string;
}

export interface GetRouterRipngRedistribute {
    flags: number;
    metric: number;
    name: string;
    routemap: string;
    status: string;
}

export interface GetRouterRoutemapRule {
    action: string;
    id: number;
    matchAsPath: string;
    matchCommunity: string;
    matchCommunityExact: string;
    matchFlags: number;
    matchInterface: string;
    matchIp6Address: string;
    matchIpAddress: string;
    matchIpNexthop: string;
    matchMetric: number;
    matchOrigin: string;
    matchRouteType: string;
    matchTag: number;
    setAggregatorAs: number;
    setAggregatorIp: string;
    setAspaths: outputs.GetRouterRoutemapRuleSetAspath[];
    setAtomicAggregate: string;
    setCommunities: outputs.GetRouterRoutemapRuleSetCommunity[];
    setCommunityAdditive: string;
    setCommunityDelete: string;
    setExtcommunityRts: outputs.GetRouterRoutemapRuleSetExtcommunityRt[];
    setExtcommunitySoos: outputs.GetRouterRoutemapRuleSetExtcommunitySoo[];
    setFlags: number;
    setIp6Nexthop: string;
    setIp6NexthopLocal: string;
    setIpNexthop: string;
    setLocalPreference: number;
    setMetric: number;
    setMetricType: string;
    setOrigin: string;
    setOriginatorId: string;
    setTag: number;
    setWeight: number;
}

export interface GetRouterRoutemapRuleSetAspath {
    as: string;
}

export interface GetRouterRoutemapRuleSetCommunity {
    community: string;
}

export interface GetRouterRoutemapRuleSetExtcommunityRt {
    community: string;
}

export interface GetRouterRoutemapRuleSetExtcommunitySoo {
    community: string;
}

export interface GetRouterSettingFilterList {
    id: number;
    protocol: string;
    routeMap: string;
}

export interface GetSystemAccprofileAliasCommand {
    commandName: string;
}

export interface GetSystemAutomationactionEmailTo {
    name: string;
}

export interface GetSystemAutomationactionHeader {
    header: string;
}

export interface GetSystemAutomationdestinationDestination {
    name: string;
}

export interface GetSystemAutomationtriggerField {
    id: number;
    name: string;
    value: string;
}

export interface GetSystemDnsdatabaseDnsEntry {
    canonicalName: string;
    hostname: string;
    id: number;
    ip: string;
    ipv6: string;
    preference: number;
    status: string;
    ttl: number;
    type: string;
}

export interface GetSystemFortiguardSrvOvrdList {
    addrType: string;
    ip: string;
    ip6: string;
}

export interface GetSystemInterfaceIpv6 {
    autoconf: string;
    dhcp6InformationRequest: string;
    ip6Address: string;
    ip6Allowaccess: string;
    ip6DefaultLife: number;
    ip6DnsServerOverride: string;
    ip6ExtraAddrs: outputs.GetSystemInterfaceIpv6Ip6ExtraAddr[];
    ip6HopLimit: number;
    ip6LinkMtu: number;
    ip6ManageFlag: string;
    ip6MaxInterval: number;
    ip6MinInterval: number;
    ip6Mode: string;
    ip6OtherFlag: string;
    ip6PrefixLists: outputs.GetSystemInterfaceIpv6Ip6PrefixList[];
    ip6ReachableTime: number;
    ip6RetransTime: number;
    ip6SendAdv: string;
    ip6UnknownMcastToCpu: string;
    vrip6LinkLocal: string;
    vrrp6s: outputs.GetSystemInterfaceIpv6Vrrp6[];
    vrrpVirtualMac6: string;
}

export interface GetSystemInterfaceIpv6Ip6ExtraAddr {
    prefix: string;
}

export interface GetSystemInterfaceIpv6Ip6PrefixList {
    autonomousFlag: string;
    onlinkFlag: string;
    preferredLifeTime: number;
    prefix: string;
    validLifeTime: number;
}

export interface GetSystemInterfaceIpv6Vrrp6 {
    acceptMode: string;
    advInterval: number;
    preempt: string;
    priority: number;
    startTime: number;
    status: string;
    vrdst6: string;
    vrgrp: number;
    vrid: number;
    vrip6: string;
}

export interface GetSystemInterfaceSecondaryip {
    allowaccess: string;
    detectprotocol: string;
    detectserver: string;
    gwdetect: string;
    haPriority: number;
    id: number;
    ip: string;
    pingServStatus: number;
}

export interface GetSystemInterfaceSwitchMember {
    memberName: string;
}

export interface GetSystemInterfaceVrrp {
    advInterval: number;
    backupVmacFwd: string;
    preempt: string;
    priority: number;
    startTime: number;
    status: string;
    version: string;
    vrdst: string;
    vrgrp: number;
    vrid: number;
    vrip: string;
}

export interface GetSystemNtpNtpserver {
    authentication: string;
    id: number;
    key: string;
    keyId: number;
    ntpv3: string;
    server: string;
}

export interface GetSystemSessionttlPort {
    endPort: number;
    id: number;
    protocol: number;
    startPort: number;
    timeout: string;
}

export interface GetSystemSflowCollector {
    ip: string;
    name: string;
    port: number;
}

export interface GetSystemVxlanRemoteIp {
    ip: string;
}

export interface GetSystemZoneInterface {
    interfaceName: string;
}

export interface GetSystemdhcpServerExcludeRange {
    endIp: string;
    id: number;
    startIp: string;
}

export interface GetSystemdhcpServerIpRange {
    endIp: string;
    id: number;
    startIp: string;
}

export interface GetSystemdhcpServerOption {
    code: number;
    id: number;
    ip: string;
    type: string;
    value: string;
}

export interface GetSystemdhcpServerReservedAddress {
    action: string;
    circuitId: string;
    circuitIdType: string;
    description: string;
    id: number;
    ip: string;
    mac: string;
    remoteId: string;
    remoteIdType: string;
    type: string;
}

export interface GetSystemdhcpServerTftpServer {
    tftpServer: string;
}

export interface GetSystemdhcpServerVciString {
    vciString: string;
}

export interface GetSystemsnmpCommunityHost {
    id: number;
    interface: string;
    ip: string;
    sourceIp: string;
}

export interface GetSystemsnmpCommunityHosts6 {
    id: number;
    interface: string;
    ipv6: string;
    sourceIpv6: string;
}

export interface RouterAccesslist6Rule {
    action: string;
    exactMatch: string;
    flags: number;
    id: number;
    prefix6: string;
}

export interface RouterAccesslistRule {
    action: string;
    exactMatch: string;
    flags: number;
    id: number;
    prefix: string;
    wildcard: string;
}

export interface RouterAspathlistRule {
    action: string;
    id: number;
    regexp: string;
}

export interface RouterBgpAdminDistance {
    distance: number;
    id: number;
    neighbourPrefix: string;
    routeList: string;
}

export interface RouterBgpAdminDistance6 {
    distance: number;
    id: number;
    neighbourPrefix6: string;
    route6List: string;
}

export interface RouterBgpAggregateAddress {
    asSet: string;
    id: number;
    prefix: string;
    summaryOnly: string;
}

export interface RouterBgpAggregateAddress6 {
    id: number;
    prefix6: string;
    summaryOnly: string;
}

export interface RouterBgpConfederationPeer {
    peer: string;
}

export interface RouterBgpNeighbor {
    activate: string;
    activate6: string;
    activateEvpn: string;
    advertisementInterval: number;
    allowasIn: number;
    allowasIn6: number;
    allowasInEnable: string;
    allowasInEnable6: string;
    allowasInEnableEvpn: string;
    asOverride: string;
    asOverride6: string;
    attributeUnchanged: string;
    attributeUnchanged6: string;
    attributeUnchangedEvpn: string;
    bfd: string;
    bfdSessionMode: string;
    capabilityDefaultOriginate: string;
    capabilityDefaultOriginate6: string;
    capabilityDynamic: string;
    capabilityOrf: string;
    capabilityOrf6: string;
    connectTimer: number;
    defaultOriginateRoutemap: string;
    defaultOriginateRoutemap6: string;
    description: string;
    distributeListIn: string;
    distributeListIn6: string;
    distributeListOut: string;
    distributeListOut6: string;
    dontCapabilityNegotiate: string;
    ebgpEnforceMultihop: string;
    ebgpMultihopTtl: number;
    ebgpTtlSecurityHops: number;
    enforceFirstAs: string;
    filterListIn: string;
    filterListIn6: string;
    filterListOut: string;
    filterListOut6: string;
    holdtimeTimer: number;
    interface: string;
    ip: string;
    keepAliveTimer: number;
    maximumPrefix: number;
    maximumPrefix6: number;
    maximumPrefixThreshold: number;
    maximumPrefixThreshold6: number;
    maximumPrefixWarningOnly: string;
    maximumPrefixWarningOnly6: string;
    nextHopSelf: string;
    nextHopSelf6: string;
    overrideCapability: string;
    passive: string;
    password: string;
    prefixListIn: string;
    prefixListIn6: string;
    prefixListOut: string;
    prefixListOut6: string;
    remoteAs: number;
    removePrivateAs: string;
    removePrivateAs6: string;
    routeMapIn: string;
    routeMapIn6: string;
    routeMapInEvpn: string;
    routeMapOut: string;
    routeMapOut6: string;
    routeMapOutEvpn: string;
    routeReflectorClient: string;
    routeReflectorClient6: string;
    routeReflectorClientEvpn: string;
    routeServerClient: string;
    routeServerClient6: string;
    sendCommunity: string;
    sendCommunity6: string;
    shutdown: string;
    softReconfiguration: string;
    softReconfiguration6: string;
    softReconfigurationEvpn: string;
    strictCapabilityMatch: string;
    unsuppressMap: string;
    unsuppressMap6: string;
    updateSource: string;
    weight: number;
}

export interface RouterBgpNetwork {
    backdoor: string;
    id: number;
    prefix: string;
    routeMap: string;
}

export interface RouterBgpNetwork6 {
    id: number;
    prefix6: string;
    routeMap: string;
}

export interface RouterBgpRedistribute {
    name: string;
    routeMap: string;
    status: string;
}

export interface RouterBgpRedistribute6 {
    name: string;
    routeMap: string;
    status: string;
}

export interface RouterCommunitylistRule {
    action: string;
    id: number;
    match: string;
    regexp: string;
}

export interface RouterGwdetectServer {
    address: string;
}

export interface RouterIsisInterface {
    authKeychainHello: string;
    authModeHello: string;
    authPasswordHello?: string;
    bfd: string;
    bfd6: string;
    circuitType: string;
    csnpIntervalL1: number;
    csnpIntervalL2: number;
    helloIntervalL1: number;
    helloIntervalL2: number;
    helloMultiplierL1: number;
    helloMultiplierL2: number;
    helloPadding: string;
    metricL1: number;
    metricL2: number;
    name: string;
    passive: string;
    priorityL1: number;
    priorityL2: number;
    status: string;
    status6: string;
    wideMetricL1: number;
    wideMetricL2: number;
}

export interface RouterIsisNet {
    net: string;
}

export interface RouterIsisRedistribute {
    level: string;
    metric: number;
    metricType: string;
    protocol: string;
    routemap: string;
    status: string;
}

export interface RouterIsisRedistribute6 {
    level: string;
    metric: number;
    protocol: string;
    routemap: string;
    status: string;
}

export interface RouterIsisSummaryAddress {
    id: number;
    level: string;
    prefix: string;
}

export interface RouterIsisSummaryAddress6 {
    id: number;
    level: string;
    prefix6: string;
}

export interface RouterKeychainKey {
    acceptLifetime: string;
    id: number;
    keyString: string;
    sendLifetime: string;
}

export interface RouterMulticastInterface {
    drPriority: number;
    helloInterval: number;
    igmp?: outputs.RouterMulticastInterfaceIgmp;
    multicastFlow: string;
    name: string;
    pimMode: string;
}

export interface RouterMulticastInterfaceIgmp {
    queryInterval: number;
    queryMaxResponseTime: number;
}

export interface RouterMulticastflowFlow {
    groupAddr: string;
    groupAddrEnd: string;
    id: number;
    sourceAddr: string;
}

export interface RouterOspf6Area {
    filterLists?: outputs.RouterOspf6AreaFilterList[];
    id: string;
    ranges?: outputs.RouterOspf6AreaRange[];
    stubType: string;
    type: string;
}

export interface RouterOspf6AreaFilterList {
    direction: string;
    id: number;
    list: string;
}

export interface RouterOspf6AreaRange {
    advertise: string;
    id: number;
    prefix6: string;
}

export interface RouterOspf6Interface {
    areaId: string;
    bfd: string;
    cost: number;
    deadInterval: number;
    helloInterval: number;
    name: string;
    passive: string;
    priority: number;
    retransmitInterval: number;
    status: string;
    transmitDelay: number;
}

export interface RouterOspf6Redistribute {
    metric: number;
    metricType: string;
    name: string;
    routemap: string;
    status: string;
}

export interface RouterOspfArea {
    defaultCost: number;
    filterLists?: outputs.RouterOspfAreaFilterList[];
    id: string;
    nssaTranslatorRole: string;
    ranges?: outputs.RouterOspfAreaRange[];
    shortcut: string;
    stubType: string;
    type: string;
    virtualLinks?: outputs.RouterOspfAreaVirtualLink[];
}

export interface RouterOspfAreaFilterList {
    direction: string;
    id: number;
    list: string;
}

export interface RouterOspfAreaRange {
    advertise: string;
    id: number;
    prefix: string;
    substitute: string;
    substituteStatus: string;
}

export interface RouterOspfAreaVirtualLink {
    authentication: string;
    authenticationKey?: string;
    deadInterval: number;
    helloInterval: number;
    md5Keys?: outputs.RouterOspfAreaVirtualLinkMd5Key[];
    name: string;
    peer: string;
    retransmitInterval: number;
    transmitDelay: number;
}

export interface RouterOspfAreaVirtualLinkMd5Key {
    id: number;
    key?: string;
}

export interface RouterOspfDistributeList {
    accessList: string;
    id: number;
    protocol: string;
}

export interface RouterOspfInterface {
    authentication: string;
    authenticationKey?: string;
    bfd: string;
    cost: number;
    deadInterval: number;
    helloInterval: number;
    helloMultiplier: number;
    md5Keys?: outputs.RouterOspfInterfaceMd5Key[];
    mtu: number;
    mtuIgnore: string;
    name: string;
    priority: number;
    retransmitInterval: number;
    transmitDelay: number;
    ttl: number;
    ucastTtl: number;
}

export interface RouterOspfInterfaceMd5Key {
    id: number;
    key?: string;
}

export interface RouterOspfNetwork {
    area: string;
    id: number;
    prefix: string;
}

export interface RouterOspfPassiveInterface {
    name: string;
}

export interface RouterOspfRedistribute {
    metric: number;
    metricType: string;
    name: string;
    routemap: string;
    status: string;
    tag: number;
}

export interface RouterOspfSummaryAddress {
    id: number;
    prefix: string;
    tag: number;
}

export interface RouterOspfVrf {
    abrType: string;
    areas?: outputs.RouterOspfVrfArea[];
    databaseOverflow: string;
    databaseOverflowMaxExternalLsa: number;
    databaseOverflowTimeToRecover: number;
    defaultInformationMetric: number;
    defaultInformationMetricType: string;
    defaultInformationOriginate: string;
    distance: number;
    distanceExternal: number;
    distanceInterArea: number;
    distanceIntraArea: number;
    distributeLists?: outputs.RouterOspfVrfDistributeList[];
    interfaces?: outputs.RouterOspfVrfInterface[];
    logNeighbourChanges: string;
    name: string;
    networks?: outputs.RouterOspfVrfNetwork[];
    passiveInterfaces?: outputs.RouterOspfVrfPassiveInterface[];
    redistributes?: outputs.RouterOspfVrfRedistribute[];
    rfc1583Compatible: string;
    routerId: string;
    spfTimers: string;
    summaryAddresses?: outputs.RouterOspfVrfSummaryAddress[];
}

export interface RouterOspfVrfArea {
    defaultCost: number;
    filterLists?: outputs.RouterOspfVrfAreaFilterList[];
    id: string;
    nssaTranslatorRole: string;
    ranges?: outputs.RouterOspfVrfAreaRange[];
    shortcut: string;
    stubType: string;
    type: string;
    virtualLinks?: outputs.RouterOspfVrfAreaVirtualLink[];
}

export interface RouterOspfVrfAreaFilterList {
    direction: string;
    id: number;
    list: string;
}

export interface RouterOspfVrfAreaRange {
    advertise: string;
    id: number;
    prefix: string;
    substitute: string;
    substituteStatus: string;
}

export interface RouterOspfVrfAreaVirtualLink {
    authentication: string;
    authenticationKey?: string;
    deadInterval: number;
    helloInterval: number;
    name: string;
    peer: string;
    retransmitInterval: number;
    transmitDelay: number;
}

export interface RouterOspfVrfDistributeList {
    accessList: string;
    id: number;
    protocol: string;
}

export interface RouterOspfVrfInterface {
    authentication: string;
    authenticationKey?: string;
    cost: number;
    deadInterval: number;
    helloInterval: number;
    helloMultiplier: number;
    md5Keys?: outputs.RouterOspfVrfInterfaceMd5Key[];
    mtu: number;
    mtuIgnore: string;
    name: string;
    priority: number;
    retransmitInterval: number;
    transmitDelay: number;
    ttl: number;
    ucastTtl: number;
}

export interface RouterOspfVrfInterfaceMd5Key {
    id: number;
    key?: string;
}

export interface RouterOspfVrfNetwork {
    area: string;
    id: number;
    prefix: string;
}

export interface RouterOspfVrfPassiveInterface {
    name: string;
}

export interface RouterOspfVrfRedistribute {
    metric: number;
    metricType: string;
    name: string;
    routemap: string;
    status: string;
    tag: number;
}

export interface RouterOspfVrfSummaryAddress {
    id: number;
    prefix: string;
    tag: number;
}

export interface RouterPolicyInterface {
    name: string;
    pbrMapName: string;
}

export interface RouterPolicyNexthopGroup {
    name: string;
    nexthops?: outputs.RouterPolicyNexthopGroupNexthop[];
}

export interface RouterPolicyNexthopGroupNexthop {
    id: number;
    nexthopIp: string;
    nexthopVrfName: string;
}

export interface RouterPolicyPbrMap {
    comments: string;
    name: string;
    rules?: outputs.RouterPolicyPbrMapRule[];
}

export interface RouterPolicyPbrMapRule {
    dst: string;
    nexthopGroupName: string;
    nexthopIp: string;
    nexthopVrfName: string;
    seqNum: number;
    src: string;
}

export interface RouterPrefixlist6Rule {
    action: string;
    flags: number;
    ge: number;
    id: number;
    le: number;
    prefix6: string;
}

export interface RouterPrefixlistRule {
    action: string;
    flags: number;
    ge: number;
    id: number;
    le: number;
    prefix: string;
}

export interface RouterRipDistance {
    accessList: string;
    distance: number;
    id: number;
    prefix: string;
}

export interface RouterRipDistributeList {
    direction: string;
    id: number;
    interface: string;
    listname: string;
    status: string;
}

export interface RouterRipInterface {
    authKeychain: string;
    authMode: string;
    authString?: string;
    flags: number;
    name: string;
    receiveVersion: string;
    sendVersion: string;
    sendVersion2Broadcast: string;
    splitHorizon: string;
    splitHorizonStatus: string;
}

export interface RouterRipNeighbor {
    id: number;
    ip: string;
}

export interface RouterRipNetwork {
    id: number;
    prefix: string;
}

export interface RouterRipOffsetList {
    accessList: string;
    direction: string;
    id: number;
    interface: string;
    offset: number;
    status: string;
}

export interface RouterRipPassiveInterface {
    name: string;
}

export interface RouterRipRedistribute {
    flags: number;
    metric: number;
    name: string;
    routemap: string;
    status: string;
}

export interface RouterRipVrf {
    defaultInformationOriginate: string;
    defaultMetric: number;
    distances?: outputs.RouterRipVrfDistance[];
    distributeLists?: outputs.RouterRipVrfDistributeList[];
    garbageTimer: number;
    interfaces?: outputs.RouterRipVrfInterface[];
    name: string;
    neighbors?: outputs.RouterRipVrfNeighbor[];
    networks?: outputs.RouterRipVrfNetwork[];
    offsetLists?: outputs.RouterRipVrfOffsetList[];
    passiveInterfaces?: outputs.RouterRipVrfPassiveInterface[];
    recvBufferSize: number;
    redistributes?: outputs.RouterRipVrfRedistribute[];
    timeoutTimer: number;
    updateTimer: number;
    version: string;
}

export interface RouterRipVrfDistance {
    accessList: string;
    distance: number;
    id: number;
    prefix: string;
}

export interface RouterRipVrfDistributeList {
    direction: string;
    id: number;
    interface: string;
    listname: string;
    status: string;
}

export interface RouterRipVrfInterface {
    authKeychain: string;
    authMode: string;
    authString?: string;
    flags: number;
    name: string;
    receiveVersion: string;
    sendVersion: string;
    sendVersion2Broadcast: string;
    splitHorizon: string;
    splitHorizonStatus: string;
}

export interface RouterRipVrfNeighbor {
    id: number;
    ip: string;
}

export interface RouterRipVrfNetwork {
    id: number;
    prefix: string;
}

export interface RouterRipVrfOffsetList {
    accessList: string;
    direction: string;
    id: number;
    interface: string;
    offset: number;
    status: string;
}

export interface RouterRipVrfPassiveInterface {
    name: string;
}

export interface RouterRipVrfRedistribute {
    flags: number;
    metric: number;
    name: string;
    routemap: string;
    status: string;
}

export interface RouterRipngAggregateAddress {
    id: number;
    prefix6: string;
}

export interface RouterRipngDistributeList {
    direction: string;
    id: number;
    interface: string;
    listname: string;
    status: string;
}

export interface RouterRipngInterface {
    flags: number;
    name: string;
    passive: string;
    splitHorizon: string;
    splitHorizonStatus: string;
}

export interface RouterRipngOffsetList {
    accessList6: string;
    direction: string;
    id: number;
    interface: string;
    offset: number;
    status: string;
}

export interface RouterRipngRedistribute {
    flags: number;
    metric: number;
    name: string;
    routemap: string;
    status: string;
}

export interface RouterRoutemapRule {
    action: string;
    id: number;
    matchAsPath: string;
    matchCommunity: string;
    matchCommunityExact: string;
    matchFlags: number;
    matchInterface: string;
    matchIp6Address: string;
    matchIpAddress: string;
    matchIpNexthop: string;
    matchMetric: number;
    matchOrigin: string;
    matchRouteType: string;
    matchTag: number;
    setAggregatorAs: number;
    setAggregatorIp: string;
    setAspaths?: outputs.RouterRoutemapRuleSetAspath[];
    setAtomicAggregate: string;
    setCommunities?: outputs.RouterRoutemapRuleSetCommunity[];
    setCommunityAdditive: string;
    setCommunityDelete: string;
    setExtcommunityRts?: outputs.RouterRoutemapRuleSetExtcommunityRt[];
    setExtcommunitySoos?: outputs.RouterRoutemapRuleSetExtcommunitySoo[];
    setFlags: number;
    setIp6Nexthop: string;
    setIp6NexthopLocal: string;
    setIpNexthop: string;
    setLocalPreference: number;
    setMetric: number;
    setMetricType: string;
    setOrigin: string;
    setOriginatorId: string;
    setTag: number;
    setWeight: number;
}

export interface RouterRoutemapRuleSetAspath {
    as: string;
}

export interface RouterRoutemapRuleSetCommunity {
    community: string;
}

export interface RouterRoutemapRuleSetExtcommunityRt {
    community: string;
}

export interface RouterRoutemapRuleSetExtcommunitySoo {
    community: string;
}

export interface RouterSettingFilterList {
    id: number;
    protocol: string;
    routeMap: string;
}

export interface Routerospf6AreaFilterList {
    direction: string;
    id: number;
    list: string;
}

export interface Routerospf6AreaRange {
    advertise: string;
    id: number;
    prefix6: string;
}

export interface RouterospfAreaFilterList {
    direction: string;
    id: number;
    list: string;
}

export interface RouterospfAreaRange {
    advertise: string;
    id: number;
    prefix: string;
    substitute: string;
    substituteStatus: string;
}

export interface RouterospfAreaVirtualLink {
    authentication: string;
    authenticationKey?: string;
    deadInterval: number;
    helloInterval: number;
    md5Keys?: outputs.RouterospfAreaVirtualLinkMd5Key[];
    name: string;
    peer: string;
    retransmitInterval: number;
    transmitDelay: number;
}

export interface RouterospfAreaVirtualLinkMd5Key {
    id: number;
    key?: string;
}

export interface RouterospfInterfaceMd5Key {
    id: number;
    key?: string;
}

export interface SwitchAutoislportgroupMember {
    memberName: string;
}

export interface SwitchGlobalPortSecurity {
    linkDownAuth: string;
    mabEntryAs: string;
    mabReauth: string;
    macCalledStationDelimiter: string;
    macCallingStationDelimiter: string;
    macCase: string;
    macPasswordDelimiter: string;
    macUsernameDelimiter: string;
    maxReauthAttempt: number;
    quarantineVlan: string;
    reauthPeriod: number;
    txPeriod: number;
}

export interface SwitchInterfaceDhcpSnoopOption82Override {
    circuitId: string;
    id: number;
    remoteId: string;
}

export interface SwitchInterfacePortSecurity {
    allowMacMove: string;
    allowMacMoveTo: string;
    authFailVlan: string;
    authFailVlanid: number;
    authOrder: string;
    authPriority: string;
    authserverTimeoutPeriod: number;
    authserverTimeoutVlan: string;
    authserverTimeoutVlanid: number;
    dacl: string;
    eapAutoUntaggedVlans: string;
    eapEgressTagged: string;
    eapPassthru: string;
    framevidApply: string;
    guestAuthDelay: number;
    guestVlan: string;
    guestVlanid: number;
    mabEapolRequest: number;
    macAuthBypass: string;
    macsecPaeMode: string;
    macsecProfile: string;
    openAuth: string;
    portSecurityMode: string;
    quarantineVlan: string;
    radiusTimeoutOverwrite: string;
}

export interface SwitchInterfaceQnq {
    addInner: number;
    edgeType: string;
    priority: string;
    removeInner: string;
    sTagPriority: number;
    status: string;
    stpQnqAdmin: string;
    untaggedSVlan: number;
    vlanMappingMissDrop: string;
    vlanMappings?: outputs.SwitchInterfaceQnqVlanMapping[];
}

export interface SwitchInterfaceQnqVlanMapping {
    description: string;
    id: number;
    matchCVlan: number;
    newSVlan: number;
}

export interface SwitchInterfaceRaguard {
    id: number;
    raguardPolicy: string;
    vlanList: string;
}

export interface SwitchInterfaceSecurityGroup {
    name: string;
}

export interface SwitchInterfaceVlanMapping {
    action: string;
    description: string;
    direction: string;
    id: number;
    matchCVlan: number;
    matchSVlan: number;
    newSVlan: number;
}

export interface SwitchMirrorSrcEgress {
    name: string;
}

export interface SwitchMirrorSrcIngress {
    name: string;
}

export interface SwitchPhysicalportStormControl {
    broadcast: string;
    burstSizeLevel: number;
    rate: number;
    unknownMulticast: string;
    unknownUnicast: string;
}

export interface SwitchTrunkMember {
    memberName: string;
}

export interface SwitchVlanDhcpServerAccessList {
    name: string;
    serverIp: string;
    serverIp6: string;
}

export interface SwitchVlanDhcpSnoopingStaticClient {
    ipAddr: string;
    macAddr: string;
    name: string;
    switchInterface: string;
}

export interface SwitchVlanIgmpSnoopingStaticGroup {
    ignoreReports: string;
    mcastAddr: string;
    members?: outputs.SwitchVlanIgmpSnoopingStaticGroupMember[];
    name: string;
}

export interface SwitchVlanIgmpSnoopingStaticGroupMember {
    memberName: string;
}

export interface SwitchVlanMemberByIpv4 {
    address: string;
    description: string;
    id: number;
}

export interface SwitchVlanMemberByIpv6 {
    description: string;
    id: number;
    prefix: string;
}

export interface SwitchVlanMemberByMac {
    description: string;
    id: number;
    mac: string;
}

export interface SwitchVlanMemberByProto {
    description: string;
    frametypes: string;
    id: number;
    protocol: number;
}

export interface SwitchVlanMldSnoopingStaticGroup {
    ignoreReports: string;
    mcastAddr: string;
    members?: outputs.SwitchVlanMldSnoopingStaticGroupMember[];
    name: string;
}

export interface SwitchVlanMldSnoopingStaticGroupMember {
    memberName: string;
}

export interface SwitchVlanMrouterPort {
    memberName: string;
}

export interface Switchacl8021XAccessListEntry {
    action?: outputs.Switchacl8021XAccessListEntryAction;
    classifier?: outputs.Switchacl8021XAccessListEntryClassifier;
    description: string;
    group: number;
    id: number;
}

export interface Switchacl8021XAccessListEntryAction {
    count: string;
    drop: string;
}

export interface Switchacl8021XAccessListEntryClassifier {
    dstIpPrefix: string;
    dstMac: string;
    etherType: number;
    service: string;
    srcIpPrefix: string;
    srcMac: string;
    vlanId: number;
}

export interface SwitchaclEgressAction {
    count: string;
    countType: string;
    drop: string;
    mirror: string;
    outerVlanTag: number;
    policer: number;
    redirect: string;
    remarkDscp: number;
}

export interface SwitchaclEgressClassifier {
    cos: number;
    dscp: number;
    dstIpPrefix: string;
    dstMac: string;
    etherType: number;
    service: string;
    srcIpPrefix: string;
    srcMac: string;
    vlanId: number;
}

export interface SwitchaclEgressSchedule {
    scheduleName: string;
}

export interface SwitchaclIngressAction {
    cosQueue: number;
    count: string;
    countType: string;
    cpuCosQueue: string;
    drop: string;
    egressMasks?: outputs.SwitchaclIngressActionEgressMask[];
    mirror: string;
    outerVlanTag: number;
    policer: number;
    redirect: string;
    redirectBcastCpu: string;
    redirectBcastNoCpu: string;
    redirectPhysicalPorts?: outputs.SwitchaclIngressActionRedirectPhysicalPort[];
    remarkCos: number;
    remarkDscp: number;
}

export interface SwitchaclIngressActionEgressMask {
    memberName: string;
}

export interface SwitchaclIngressActionRedirectPhysicalPort {
    memberName: string;
}

export interface SwitchaclIngressClassifier {
    cos: number;
    dscp: number;
    dstIp6Prefix: string;
    dstIpPrefix: string;
    dstMac: string;
    etherType: number;
    service: string;
    srcIp6Prefix: string;
    srcIpPrefix: string;
    srcMac: string;
    vlanId: number;
}

export interface SwitchaclIngressIngressInterface {
    memberName: string;
}

export interface SwitchaclIngressSchedule {
    scheduleName: string;
}

export interface SwitchaclPrelookupAction {
    cosQueue: number;
    count: string;
    drop: string;
    outerVlanTag: number;
    remarkCos: number;
}

export interface SwitchaclPrelookupClassifier {
    cos: number;
    dscp: number;
    dstIpPrefix: string;
    dstMac: string;
    etherType: number;
    service: string;
    srcIpPrefix: string;
    srcMac: string;
    vlanId: number;
}

export interface SwitchaclPrelookupSchedule {
    scheduleName: string;
}

export interface SwitchcontrollerGlobalAcList {
    id: number;
    ipv4Address: string;
    ipv6Address: string;
}

export interface SwitchlldpProfileCustomTlv {
    informationString: string;
    name: string;
    oui: string;
    subtype: number;
}

export interface SwitchlldpProfileMedLocationService {
    name: string;
    status: string;
    sysLocationId: string;
}

export interface SwitchlldpProfileMedNetworkPolicy {
    assignVlan: string;
    dscp: number;
    name: string;
    priority: number;
    status: string;
    vlan: number;
}

export interface SwitchmacsecProfileMkaPsk {
    cryptoAlg: string;
    mkaCak: string;
    mkaCkn: string;
    name: string;
    status: string;
}

export interface SwitchmacsecProfileTrafficPolicy {
    excludeProtocol: string;
    name: string;
    securityPolicy: string;
    status: string;
}

export interface SwitchqosIpdscpmapMap {
    cosQueue: number;
    diffserv: string;
    entryName: string;
    ipPrecedence: string;
    type: number;
    value: string;
}

export interface SwitchqosQospolicyCosQueue {
    description: string;
    dropPolicy: string;
    ecn: string;
    maxRate: number;
    maxRatePercent: number;
    minRate: number;
    minRatePercent: number;
    name: string;
    weight: number;
    wredSlope: number;
}

export interface SwitchstpInstanceStpPort {
    cost: number;
    name: string;
    priority: string;
}

export interface SystemAccprofileAliasCommand {
    commandName: string;
}

export interface SystemAlarmGroup {
    adminAuthFailureThreshold: number;
    adminAuthLockoutThreshold: number;
    decryptionFailureThreshold: number;
    encryptionFailureThreshold: number;
    fwPolicyId: number;
    fwPolicyIdThreshold: number;
    fwPolicyViolations?: outputs.SystemAlarmGroupFwPolicyViolation[];
    id: number;
    logFullWarningThreshold: number;
    period: number;
    replayAttemptThreshold: number;
    selfTestFailureThreshold: number;
    userAuthFailureThreshold: number;
    userAuthLockoutThreshold: number;
}

export interface SystemAlarmGroupFwPolicyViolation {
    dstIp: string;
    dstPort: number;
    srcIp: string;
    srcPort: number;
    threshold: number;
}

export interface SystemAutomationactionEmailTo {
    name: string;
}

export interface SystemAutomationactionHeader {
    header: string;
}

export interface SystemAutomationdestinationDestination {
    name: string;
}

export interface SystemAutomationstitchAction {
    name: string;
}

export interface SystemAutomationtriggerField {
    id: number;
    name: string;
    value: string;
}

export interface SystemDnsdatabaseDnsEntry {
    canonicalName: string;
    hostname: string;
    id: number;
    ip: string;
    ipv6: string;
    preference: number;
    status: string;
    ttl: number;
    type: string;
}

export interface SystemFlowexportAggregate {
    id: number;
    ip: string;
}

export interface SystemFlowexportCollector {
    ip: string;
    name: string;
    port: number;
    transport: string;
}

export interface SystemFortiguardSrvOvrdList {
    addrType: string;
    ip: string;
    ip6: string;
}

export interface SystemInterfaceIpv6 {
    autoconf: string;
    dhcp6InformationRequest: string;
    ip6Address: string;
    ip6Allowaccess: string;
    ip6DefaultLife: number;
    ip6DnsServerOverride: string;
    ip6ExtraAddrs?: outputs.SystemInterfaceIpv6Ip6ExtraAddr[];
    ip6HopLimit: number;
    ip6LinkMtu: number;
    ip6ManageFlag: string;
    ip6MaxInterval: number;
    ip6MinInterval: number;
    ip6Mode: string;
    ip6OtherFlag: string;
    ip6PrefixLists?: outputs.SystemInterfaceIpv6Ip6PrefixList[];
    ip6ReachableTime: number;
    ip6RetransTime: number;
    ip6SendAdv: string;
    ip6UnknownMcastToCpu: string;
    vrip6LinkLocal: string;
    vrrp6s?: outputs.SystemInterfaceIpv6Vrrp6[];
    vrrpVirtualMac6: string;
}

export interface SystemInterfaceIpv6Ip6ExtraAddr {
    prefix: string;
}

export interface SystemInterfaceIpv6Ip6PrefixList {
    autonomousFlag: string;
    onlinkFlag: string;
    preferredLifeTime: number;
    prefix: string;
    validLifeTime: number;
}

export interface SystemInterfaceIpv6Vrrp6 {
    acceptMode: string;
    advInterval: number;
    preempt: string;
    priority: number;
    startTime: number;
    status: string;
    vrdst6: string;
    vrgrp: number;
    vrid: number;
    vrip6: string;
}

export interface SystemInterfaceSecondaryip {
    allowaccess: string;
    detectprotocol: string;
    detectserver: string;
    gwdetect: string;
    haPriority: number;
    id: number;
    ip: string;
    pingServStatus: number;
}

export interface SystemInterfaceSwitchMember {
    memberName: string;
}

export interface SystemInterfaceVrrp {
    advInterval: number;
    backupVmacFwd: string;
    preempt: string;
    priority: number;
    startTime: number;
    status: string;
    version: string;
    vrdst: string;
    vrgrp: number;
    vrid: number;
    vrip: string;
}

export interface SystemLinkmonitorServer {
    address: string;
}

export interface SystemLocationAddressCivic {
    additional: string;
    additionalCode: string;
    block: string;
    branchRoad: string;
    building: string;
    city: string;
    cityDivision: string;
    country: string;
    countrySubdivision: string;
    county: string;
    direction: string;
    floor: string;
    landmark: string;
    language: string;
    name: string;
    number: string;
    numberSuffix: string;
    placeType: string;
    postOfficeBox: string;
    postalCommunity: string;
    primaryRoad: string;
    roadSection: string;
    room: string;
    script: string;
    seat: string;
    street: string;
    streetNamePostMod: string;
    streetNamePreMod: string;
    streetSuffix: string;
    subBranchRoad: string;
    trailingStrSuffix: string;
    unit: string;
    zip: string;
}

export interface SystemLocationCoordinates {
    altitude: string;
    altitudeUnit: string;
    datum: string;
    latitude: string;
    longitude: string;
}

export interface SystemLocationElinNumber {
    elinNumber: string;
}

export interface SystemNtpNtpserver {
    authentication: string;
    id: number;
    key?: string;
    keyId: number;
    ntpv3: string;
    server: string;
}

export interface SystemPortpairMember {
    interfaceName: string;
}

export interface SystemSessionttlPort {
    endPort: number;
    id: number;
    protocol: number;
    startPort: number;
    timeout: string;
}

export interface SystemSflowCollector {
    ip: string;
    name: string;
    port: number;
}

export interface SystemVxlanRemoteIp {
    ip: string;
}

export interface SystemZoneInterface {
    interfaceName: string;
}

export interface SystemaliasCommandReadOnlyAttribute {
    attributeName: string;
}

export interface SystemaliasCommandScriptArgument {
    allowedValues?: outputs.SystemaliasCommandScriptArgumentAllowedValue[];
    help: string;
    id: number;
    name: string;
    optional: string;
    range: string;
    rangeDelay: number;
    tablePath: string;
    type: string;
}

export interface SystemaliasCommandScriptArgumentAllowedValue {
    value: string;
}

export interface SystemaliasCommandTableIdsAllowed {
    entryId: string;
}

export interface SystemaliasGroupCommand {
    commandName: string;
}

export interface SystemdhcpServerExcludeRange {
    endIp: string;
    id: number;
    startIp: string;
}

export interface SystemdhcpServerIpRange {
    endIp: string;
    id: number;
    startIp: string;
}

export interface SystemdhcpServerOption {
    code: number;
    id: number;
    ip: string;
    type: string;
    value: string;
}

export interface SystemdhcpServerReservedAddress {
    action: string;
    circuitId: string;
    circuitIdType: string;
    description: string;
    id: number;
    ip: string;
    mac: string;
    remoteId: string;
    remoteIdType: string;
    type: string;
}

export interface SystemdhcpServerTftpServer {
    tftpServer: string;
}

export interface SystemdhcpServerVciString {
    vciString: string;
}

export interface SystemscheduleGroupMember {
    name: string;
}

export interface SystemsnmpCommunityHost {
    id: number;
    interface: string;
    ip: string;
    sourceIp: string;
}

export interface SystemsnmpCommunityHosts6 {
    id: number;
    interface: string;
    ipv6: string;
    sourceIpv6: string;
}

export interface UserGroupMatch {
    groupName: string;
    id: number;
    serverName: string;
}

export interface UserGroupMember {
    name: string;
}

export interface UserPeergrpMember {
    name: string;
}

export interface UserRadiusAcctServer {
    id: number;
    port: number;
    secret?: string;
    server: string;
    status: string;
}

export interface UserSettingAuthPort {
    id: number;
    port: number;
    type: string;
}

