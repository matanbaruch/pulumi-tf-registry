// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class RouterPolicy extends pulumi.CustomResource {
    /**
     * Get an existing RouterPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RouterPolicyState, opts?: pulumi.CustomResourceOptions): RouterPolicy {
        return new RouterPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortiswitch:index/routerPolicy:RouterPolicy';

    /**
     * Returns true if the given object is an instance of RouterPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RouterPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RouterPolicy.__pulumiType;
    }

    public readonly comments!: pulumi.Output<string>;
    public readonly dst!: pulumi.Output<string>;
    public readonly dynamicSortSubtable!: pulumi.Output<string | undefined>;
    public readonly endPort!: pulumi.Output<number>;
    public readonly gateway!: pulumi.Output<string>;
    public readonly inputDevice!: pulumi.Output<string>;
    public readonly interfaces!: pulumi.Output<outputs.RouterPolicyInterface[] | undefined>;
    public readonly nexthopGroups!: pulumi.Output<outputs.RouterPolicyNexthopGroup[] | undefined>;
    public readonly outputDevice!: pulumi.Output<string>;
    public readonly pbrMaps!: pulumi.Output<outputs.RouterPolicyPbrMap[] | undefined>;
    public readonly protocol!: pulumi.Output<number>;
    public readonly seqNum!: pulumi.Output<number>;
    public readonly src!: pulumi.Output<string>;
    public readonly startPort!: pulumi.Output<number>;
    public readonly tos!: pulumi.Output<string>;
    public readonly tosMask!: pulumi.Output<string>;

    /**
     * Create a RouterPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: RouterPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RouterPolicyArgs | RouterPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RouterPolicyState | undefined;
            resourceInputs["comments"] = state ? state.comments : undefined;
            resourceInputs["dst"] = state ? state.dst : undefined;
            resourceInputs["dynamicSortSubtable"] = state ? state.dynamicSortSubtable : undefined;
            resourceInputs["endPort"] = state ? state.endPort : undefined;
            resourceInputs["gateway"] = state ? state.gateway : undefined;
            resourceInputs["inputDevice"] = state ? state.inputDevice : undefined;
            resourceInputs["interfaces"] = state ? state.interfaces : undefined;
            resourceInputs["nexthopGroups"] = state ? state.nexthopGroups : undefined;
            resourceInputs["outputDevice"] = state ? state.outputDevice : undefined;
            resourceInputs["pbrMaps"] = state ? state.pbrMaps : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["seqNum"] = state ? state.seqNum : undefined;
            resourceInputs["src"] = state ? state.src : undefined;
            resourceInputs["startPort"] = state ? state.startPort : undefined;
            resourceInputs["tos"] = state ? state.tos : undefined;
            resourceInputs["tosMask"] = state ? state.tosMask : undefined;
        } else {
            const args = argsOrState as RouterPolicyArgs | undefined;
            resourceInputs["comments"] = args ? args.comments : undefined;
            resourceInputs["dst"] = args ? args.dst : undefined;
            resourceInputs["dynamicSortSubtable"] = args ? args.dynamicSortSubtable : undefined;
            resourceInputs["endPort"] = args ? args.endPort : undefined;
            resourceInputs["gateway"] = args ? args.gateway : undefined;
            resourceInputs["inputDevice"] = args ? args.inputDevice : undefined;
            resourceInputs["interfaces"] = args ? args.interfaces : undefined;
            resourceInputs["nexthopGroups"] = args ? args.nexthopGroups : undefined;
            resourceInputs["outputDevice"] = args ? args.outputDevice : undefined;
            resourceInputs["pbrMaps"] = args ? args.pbrMaps : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["seqNum"] = args ? args.seqNum : undefined;
            resourceInputs["src"] = args ? args.src : undefined;
            resourceInputs["startPort"] = args ? args.startPort : undefined;
            resourceInputs["tos"] = args ? args.tos : undefined;
            resourceInputs["tosMask"] = args ? args.tosMask : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RouterPolicy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering RouterPolicy resources.
 */
export interface RouterPolicyState {
    comments?: pulumi.Input<string>;
    dst?: pulumi.Input<string>;
    dynamicSortSubtable?: pulumi.Input<string>;
    endPort?: pulumi.Input<number>;
    gateway?: pulumi.Input<string>;
    inputDevice?: pulumi.Input<string>;
    interfaces?: pulumi.Input<pulumi.Input<inputs.RouterPolicyInterface>[]>;
    nexthopGroups?: pulumi.Input<pulumi.Input<inputs.RouterPolicyNexthopGroup>[]>;
    outputDevice?: pulumi.Input<string>;
    pbrMaps?: pulumi.Input<pulumi.Input<inputs.RouterPolicyPbrMap>[]>;
    protocol?: pulumi.Input<number>;
    seqNum?: pulumi.Input<number>;
    src?: pulumi.Input<string>;
    startPort?: pulumi.Input<number>;
    tos?: pulumi.Input<string>;
    tosMask?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RouterPolicy resource.
 */
export interface RouterPolicyArgs {
    comments?: pulumi.Input<string>;
    dst?: pulumi.Input<string>;
    dynamicSortSubtable?: pulumi.Input<string>;
    endPort?: pulumi.Input<number>;
    gateway?: pulumi.Input<string>;
    inputDevice?: pulumi.Input<string>;
    interfaces?: pulumi.Input<pulumi.Input<inputs.RouterPolicyInterface>[]>;
    nexthopGroups?: pulumi.Input<pulumi.Input<inputs.RouterPolicyNexthopGroup>[]>;
    outputDevice?: pulumi.Input<string>;
    pbrMaps?: pulumi.Input<pulumi.Input<inputs.RouterPolicyPbrMap>[]>;
    protocol?: pulumi.Input<number>;
    seqNum?: pulumi.Input<number>;
    src?: pulumi.Input<string>;
    startPort?: pulumi.Input<number>;
    tos?: pulumi.Input<string>;
    tosMask?: pulumi.Input<string>;
}
