// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SwitchPhysicalport extends pulumi.CustomResource {
    /**
     * Get an existing SwitchPhysicalport resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SwitchPhysicalportState, opts?: pulumi.CustomResourceOptions): SwitchPhysicalport {
        return new SwitchPhysicalport(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortiswitch:index/switchPhysicalport:SwitchPhysicalport';

    /**
     * Returns true if the given object is an instance of SwitchPhysicalport.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SwitchPhysicalport {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SwitchPhysicalport.__pulumiType;
    }

    public readonly cdpStatus!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string>;
    public readonly dmiStatus!: pulumi.Output<string>;
    public readonly eeeTxIdleTime!: pulumi.Output<number>;
    public readonly eeeTxWakeTime!: pulumi.Output<number>;
    public readonly egressDropMode!: pulumi.Output<string>;
    public readonly energyEfficientEthernet!: pulumi.Output<string>;
    public readonly flapDuration!: pulumi.Output<number>;
    public readonly flapRate!: pulumi.Output<number>;
    public readonly flapTimeout!: pulumi.Output<number>;
    public readonly flapTrig!: pulumi.Output<number>;
    public readonly flapguard!: pulumi.Output<string>;
    public readonly flapguardState!: pulumi.Output<string>;
    public readonly flowControl!: pulumi.Output<string>;
    public readonly fortilinkP2p!: pulumi.Output<string>;
    public readonly l2Learning!: pulumi.Output<string>;
    public readonly l2SaUnknown!: pulumi.Output<string>;
    public readonly linkStatus!: pulumi.Output<string>;
    public readonly lldpProfile!: pulumi.Output<string>;
    public readonly lldpStatus!: pulumi.Output<string>;
    public readonly loopback!: pulumi.Output<string>;
    public readonly macsecPaeMode!: pulumi.Output<string>;
    public readonly macsecProfile!: pulumi.Output<string>;
    public readonly maxFrameSize!: pulumi.Output<number>;
    public readonly medium!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly owningInterface!: pulumi.Output<string>;
    public readonly pauseMeterRate!: pulumi.Output<number>;
    public readonly pauseResume!: pulumi.Output<string>;
    public readonly poePortMode!: pulumi.Output<string>;
    public readonly poePortPriority!: pulumi.Output<string>;
    public readonly poeStatus!: pulumi.Output<string>;
    public readonly portIndex!: pulumi.Output<number>;
    public readonly priorityBasedFlowControl!: pulumi.Output<string>;
    public readonly qsfpLowPowerMode!: pulumi.Output<string>;
    public readonly securityMode!: pulumi.Output<string>;
    public readonly speed!: pulumi.Output<string>;
    public readonly status!: pulumi.Output<string>;
    public readonly stormControl!: pulumi.Output<outputs.SwitchPhysicalportStormControl | undefined>;
    public readonly stormControlMode!: pulumi.Output<string>;

    /**
     * Create a SwitchPhysicalport resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SwitchPhysicalportArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SwitchPhysicalportArgs | SwitchPhysicalportState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SwitchPhysicalportState | undefined;
            resourceInputs["cdpStatus"] = state ? state.cdpStatus : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["dmiStatus"] = state ? state.dmiStatus : undefined;
            resourceInputs["eeeTxIdleTime"] = state ? state.eeeTxIdleTime : undefined;
            resourceInputs["eeeTxWakeTime"] = state ? state.eeeTxWakeTime : undefined;
            resourceInputs["egressDropMode"] = state ? state.egressDropMode : undefined;
            resourceInputs["energyEfficientEthernet"] = state ? state.energyEfficientEthernet : undefined;
            resourceInputs["flapDuration"] = state ? state.flapDuration : undefined;
            resourceInputs["flapRate"] = state ? state.flapRate : undefined;
            resourceInputs["flapTimeout"] = state ? state.flapTimeout : undefined;
            resourceInputs["flapTrig"] = state ? state.flapTrig : undefined;
            resourceInputs["flapguard"] = state ? state.flapguard : undefined;
            resourceInputs["flapguardState"] = state ? state.flapguardState : undefined;
            resourceInputs["flowControl"] = state ? state.flowControl : undefined;
            resourceInputs["fortilinkP2p"] = state ? state.fortilinkP2p : undefined;
            resourceInputs["l2Learning"] = state ? state.l2Learning : undefined;
            resourceInputs["l2SaUnknown"] = state ? state.l2SaUnknown : undefined;
            resourceInputs["linkStatus"] = state ? state.linkStatus : undefined;
            resourceInputs["lldpProfile"] = state ? state.lldpProfile : undefined;
            resourceInputs["lldpStatus"] = state ? state.lldpStatus : undefined;
            resourceInputs["loopback"] = state ? state.loopback : undefined;
            resourceInputs["macsecPaeMode"] = state ? state.macsecPaeMode : undefined;
            resourceInputs["macsecProfile"] = state ? state.macsecProfile : undefined;
            resourceInputs["maxFrameSize"] = state ? state.maxFrameSize : undefined;
            resourceInputs["medium"] = state ? state.medium : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["owningInterface"] = state ? state.owningInterface : undefined;
            resourceInputs["pauseMeterRate"] = state ? state.pauseMeterRate : undefined;
            resourceInputs["pauseResume"] = state ? state.pauseResume : undefined;
            resourceInputs["poePortMode"] = state ? state.poePortMode : undefined;
            resourceInputs["poePortPriority"] = state ? state.poePortPriority : undefined;
            resourceInputs["poeStatus"] = state ? state.poeStatus : undefined;
            resourceInputs["portIndex"] = state ? state.portIndex : undefined;
            resourceInputs["priorityBasedFlowControl"] = state ? state.priorityBasedFlowControl : undefined;
            resourceInputs["qsfpLowPowerMode"] = state ? state.qsfpLowPowerMode : undefined;
            resourceInputs["securityMode"] = state ? state.securityMode : undefined;
            resourceInputs["speed"] = state ? state.speed : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["stormControl"] = state ? state.stormControl : undefined;
            resourceInputs["stormControlMode"] = state ? state.stormControlMode : undefined;
        } else {
            const args = argsOrState as SwitchPhysicalportArgs | undefined;
            resourceInputs["cdpStatus"] = args ? args.cdpStatus : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["dmiStatus"] = args ? args.dmiStatus : undefined;
            resourceInputs["eeeTxIdleTime"] = args ? args.eeeTxIdleTime : undefined;
            resourceInputs["eeeTxWakeTime"] = args ? args.eeeTxWakeTime : undefined;
            resourceInputs["egressDropMode"] = args ? args.egressDropMode : undefined;
            resourceInputs["energyEfficientEthernet"] = args ? args.energyEfficientEthernet : undefined;
            resourceInputs["flapDuration"] = args ? args.flapDuration : undefined;
            resourceInputs["flapRate"] = args ? args.flapRate : undefined;
            resourceInputs["flapTimeout"] = args ? args.flapTimeout : undefined;
            resourceInputs["flapTrig"] = args ? args.flapTrig : undefined;
            resourceInputs["flapguard"] = args ? args.flapguard : undefined;
            resourceInputs["flapguardState"] = args ? args.flapguardState : undefined;
            resourceInputs["flowControl"] = args ? args.flowControl : undefined;
            resourceInputs["fortilinkP2p"] = args ? args.fortilinkP2p : undefined;
            resourceInputs["l2Learning"] = args ? args.l2Learning : undefined;
            resourceInputs["l2SaUnknown"] = args ? args.l2SaUnknown : undefined;
            resourceInputs["linkStatus"] = args ? args.linkStatus : undefined;
            resourceInputs["lldpProfile"] = args ? args.lldpProfile : undefined;
            resourceInputs["lldpStatus"] = args ? args.lldpStatus : undefined;
            resourceInputs["loopback"] = args ? args.loopback : undefined;
            resourceInputs["macsecPaeMode"] = args ? args.macsecPaeMode : undefined;
            resourceInputs["macsecProfile"] = args ? args.macsecProfile : undefined;
            resourceInputs["maxFrameSize"] = args ? args.maxFrameSize : undefined;
            resourceInputs["medium"] = args ? args.medium : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["owningInterface"] = args ? args.owningInterface : undefined;
            resourceInputs["pauseMeterRate"] = args ? args.pauseMeterRate : undefined;
            resourceInputs["pauseResume"] = args ? args.pauseResume : undefined;
            resourceInputs["poePortMode"] = args ? args.poePortMode : undefined;
            resourceInputs["poePortPriority"] = args ? args.poePortPriority : undefined;
            resourceInputs["poeStatus"] = args ? args.poeStatus : undefined;
            resourceInputs["portIndex"] = args ? args.portIndex : undefined;
            resourceInputs["priorityBasedFlowControl"] = args ? args.priorityBasedFlowControl : undefined;
            resourceInputs["qsfpLowPowerMode"] = args ? args.qsfpLowPowerMode : undefined;
            resourceInputs["securityMode"] = args ? args.securityMode : undefined;
            resourceInputs["speed"] = args ? args.speed : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["stormControl"] = args ? args.stormControl : undefined;
            resourceInputs["stormControlMode"] = args ? args.stormControlMode : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SwitchPhysicalport.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SwitchPhysicalport resources.
 */
export interface SwitchPhysicalportState {
    cdpStatus?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    dmiStatus?: pulumi.Input<string>;
    eeeTxIdleTime?: pulumi.Input<number>;
    eeeTxWakeTime?: pulumi.Input<number>;
    egressDropMode?: pulumi.Input<string>;
    energyEfficientEthernet?: pulumi.Input<string>;
    flapDuration?: pulumi.Input<number>;
    flapRate?: pulumi.Input<number>;
    flapTimeout?: pulumi.Input<number>;
    flapTrig?: pulumi.Input<number>;
    flapguard?: pulumi.Input<string>;
    flapguardState?: pulumi.Input<string>;
    flowControl?: pulumi.Input<string>;
    fortilinkP2p?: pulumi.Input<string>;
    l2Learning?: pulumi.Input<string>;
    l2SaUnknown?: pulumi.Input<string>;
    linkStatus?: pulumi.Input<string>;
    lldpProfile?: pulumi.Input<string>;
    lldpStatus?: pulumi.Input<string>;
    loopback?: pulumi.Input<string>;
    macsecPaeMode?: pulumi.Input<string>;
    macsecProfile?: pulumi.Input<string>;
    maxFrameSize?: pulumi.Input<number>;
    medium?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    owningInterface?: pulumi.Input<string>;
    pauseMeterRate?: pulumi.Input<number>;
    pauseResume?: pulumi.Input<string>;
    poePortMode?: pulumi.Input<string>;
    poePortPriority?: pulumi.Input<string>;
    poeStatus?: pulumi.Input<string>;
    portIndex?: pulumi.Input<number>;
    priorityBasedFlowControl?: pulumi.Input<string>;
    qsfpLowPowerMode?: pulumi.Input<string>;
    securityMode?: pulumi.Input<string>;
    speed?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    stormControl?: pulumi.Input<inputs.SwitchPhysicalportStormControl>;
    stormControlMode?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SwitchPhysicalport resource.
 */
export interface SwitchPhysicalportArgs {
    cdpStatus?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    dmiStatus?: pulumi.Input<string>;
    eeeTxIdleTime?: pulumi.Input<number>;
    eeeTxWakeTime?: pulumi.Input<number>;
    egressDropMode?: pulumi.Input<string>;
    energyEfficientEthernet?: pulumi.Input<string>;
    flapDuration?: pulumi.Input<number>;
    flapRate?: pulumi.Input<number>;
    flapTimeout?: pulumi.Input<number>;
    flapTrig?: pulumi.Input<number>;
    flapguard?: pulumi.Input<string>;
    flapguardState?: pulumi.Input<string>;
    flowControl?: pulumi.Input<string>;
    fortilinkP2p?: pulumi.Input<string>;
    l2Learning?: pulumi.Input<string>;
    l2SaUnknown?: pulumi.Input<string>;
    linkStatus?: pulumi.Input<string>;
    lldpProfile?: pulumi.Input<string>;
    lldpStatus?: pulumi.Input<string>;
    loopback?: pulumi.Input<string>;
    macsecPaeMode?: pulumi.Input<string>;
    macsecProfile?: pulumi.Input<string>;
    maxFrameSize?: pulumi.Input<number>;
    medium?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    owningInterface?: pulumi.Input<string>;
    pauseMeterRate?: pulumi.Input<number>;
    pauseResume?: pulumi.Input<string>;
    poePortMode?: pulumi.Input<string>;
    poePortPriority?: pulumi.Input<string>;
    poeStatus?: pulumi.Input<string>;
    portIndex?: pulumi.Input<number>;
    priorityBasedFlowControl?: pulumi.Input<string>;
    qsfpLowPowerMode?: pulumi.Input<string>;
    securityMode?: pulumi.Input<string>;
    speed?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    stormControl?: pulumi.Input<inputs.SwitchPhysicalportStormControl>;
    stormControlMode?: pulumi.Input<string>;
}
