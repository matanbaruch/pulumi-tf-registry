// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class RouterStatic extends pulumi.CustomResource {
    /**
     * Get an existing RouterStatic resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RouterStaticState, opts?: pulumi.CustomResourceOptions): RouterStatic {
        return new RouterStatic(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortiswitch:index/routerStatic:RouterStatic';

    /**
     * Returns true if the given object is an instance of RouterStatic.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RouterStatic {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RouterStatic.__pulumiType;
    }

    public readonly bfd!: pulumi.Output<string>;
    public readonly blackhole!: pulumi.Output<string>;
    public readonly comment!: pulumi.Output<string>;
    public readonly device!: pulumi.Output<string>;
    public readonly distance!: pulumi.Output<number>;
    public readonly dst!: pulumi.Output<string>;
    public readonly dynamicGateway!: pulumi.Output<string>;
    public readonly gateway!: pulumi.Output<string>;
    public readonly gwL2Switch!: pulumi.Output<string>;
    public readonly priority!: pulumi.Output<number>;
    public readonly seqNum!: pulumi.Output<number>;
    public readonly status!: pulumi.Output<string>;
    public readonly vrf!: pulumi.Output<string>;
    public readonly weight!: pulumi.Output<number>;

    /**
     * Create a RouterStatic resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: RouterStaticArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RouterStaticArgs | RouterStaticState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RouterStaticState | undefined;
            resourceInputs["bfd"] = state ? state.bfd : undefined;
            resourceInputs["blackhole"] = state ? state.blackhole : undefined;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["device"] = state ? state.device : undefined;
            resourceInputs["distance"] = state ? state.distance : undefined;
            resourceInputs["dst"] = state ? state.dst : undefined;
            resourceInputs["dynamicGateway"] = state ? state.dynamicGateway : undefined;
            resourceInputs["gateway"] = state ? state.gateway : undefined;
            resourceInputs["gwL2Switch"] = state ? state.gwL2Switch : undefined;
            resourceInputs["priority"] = state ? state.priority : undefined;
            resourceInputs["seqNum"] = state ? state.seqNum : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["vrf"] = state ? state.vrf : undefined;
            resourceInputs["weight"] = state ? state.weight : undefined;
        } else {
            const args = argsOrState as RouterStaticArgs | undefined;
            resourceInputs["bfd"] = args ? args.bfd : undefined;
            resourceInputs["blackhole"] = args ? args.blackhole : undefined;
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["device"] = args ? args.device : undefined;
            resourceInputs["distance"] = args ? args.distance : undefined;
            resourceInputs["dst"] = args ? args.dst : undefined;
            resourceInputs["dynamicGateway"] = args ? args.dynamicGateway : undefined;
            resourceInputs["gateway"] = args ? args.gateway : undefined;
            resourceInputs["gwL2Switch"] = args ? args.gwL2Switch : undefined;
            resourceInputs["priority"] = args ? args.priority : undefined;
            resourceInputs["seqNum"] = args ? args.seqNum : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["vrf"] = args ? args.vrf : undefined;
            resourceInputs["weight"] = args ? args.weight : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RouterStatic.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering RouterStatic resources.
 */
export interface RouterStaticState {
    bfd?: pulumi.Input<string>;
    blackhole?: pulumi.Input<string>;
    comment?: pulumi.Input<string>;
    device?: pulumi.Input<string>;
    distance?: pulumi.Input<number>;
    dst?: pulumi.Input<string>;
    dynamicGateway?: pulumi.Input<string>;
    gateway?: pulumi.Input<string>;
    gwL2Switch?: pulumi.Input<string>;
    priority?: pulumi.Input<number>;
    seqNum?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    vrf?: pulumi.Input<string>;
    weight?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a RouterStatic resource.
 */
export interface RouterStaticArgs {
    bfd?: pulumi.Input<string>;
    blackhole?: pulumi.Input<string>;
    comment?: pulumi.Input<string>;
    device?: pulumi.Input<string>;
    distance?: pulumi.Input<number>;
    dst?: pulumi.Input<string>;
    dynamicGateway?: pulumi.Input<string>;
    gateway?: pulumi.Input<string>;
    gwL2Switch?: pulumi.Input<string>;
    priority?: pulumi.Input<number>;
    seqNum?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    vrf?: pulumi.Input<string>;
    weight?: pulumi.Input<number>;
}
