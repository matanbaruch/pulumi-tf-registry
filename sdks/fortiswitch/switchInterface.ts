// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SwitchInterface extends pulumi.CustomResource {
    /**
     * Get an existing SwitchInterface resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SwitchInterfaceState, opts?: pulumi.CustomResourceOptions): SwitchInterface {
        return new SwitchInterface(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortiswitch:index/switchInterface:SwitchInterface';

    /**
     * Returns true if the given object is an instance of SwitchInterface.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SwitchInterface {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SwitchInterface.__pulumiType;
    }

    public readonly allowedSubVlans!: pulumi.Output<string>;
    public readonly allowedVlans!: pulumi.Output<string>;
    public readonly arpInspectionTrust!: pulumi.Output<string>;
    public readonly autoDiscoveryFortilink!: pulumi.Output<string>;
    public readonly autoDiscoveryFortilinkPacketInterval!: pulumi.Output<number>;
    public readonly defaultCos!: pulumi.Output<number>;
    public readonly description!: pulumi.Output<string>;
    public readonly dhcpSnoopLearningLimit!: pulumi.Output<number>;
    public readonly dhcpSnoopLearningLimitCheck!: pulumi.Output<string>;
    public readonly dhcpSnoopOption82Overrides!: pulumi.Output<outputs.SwitchInterfaceDhcpSnoopOption82Override[] | undefined>;
    public readonly dhcpSnoopOption82Trust!: pulumi.Output<string>;
    public readonly dhcpSnooping!: pulumi.Output<string>;
    public readonly discardMode!: pulumi.Output<string>;
    public readonly dynamicSortSubtable!: pulumi.Output<string | undefined>;
    public readonly edgePort!: pulumi.Output<string>;
    public readonly filterSubVlans!: pulumi.Output<string>;
    public readonly fortilinkL3Mode!: pulumi.Output<string>;
    public readonly igmpSnoopingFloodReports!: pulumi.Output<string>;
    public readonly interfaceMode!: pulumi.Output<string>;
    public readonly ipMacBinding!: pulumi.Output<string>;
    public readonly learningLimit!: pulumi.Output<number>;
    public readonly learningLimitAction!: pulumi.Output<string>;
    public readonly logMacEvent!: pulumi.Output<string>;
    public readonly loopGuard!: pulumi.Output<string>;
    public readonly loopGuardMacMoveThreshold!: pulumi.Output<number>;
    public readonly loopGuardTimeout!: pulumi.Output<number>;
    public readonly mcastSnoopingFloodTraffic!: pulumi.Output<string>;
    public readonly mldSnoopingFloodReports!: pulumi.Output<string>;
    public readonly nac!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly nativeVlan!: pulumi.Output<number>;
    public readonly packetSampleRate!: pulumi.Output<number>;
    public readonly packetSampler!: pulumi.Output<string>;
    public readonly portSecurity!: pulumi.Output<outputs.SwitchInterfacePortSecurity | undefined>;
    public readonly primaryVlan!: pulumi.Output<number>;
    public readonly privateVlan!: pulumi.Output<string>;
    public readonly privateVlanPortType!: pulumi.Output<number>;
    public readonly ptpPolicy!: pulumi.Output<string>;
    public readonly ptpStatus!: pulumi.Output<string>;
    public readonly qnq!: pulumi.Output<outputs.SwitchInterfaceQnq | undefined>;
    public readonly qosPolicy!: pulumi.Output<string>;
    public readonly raguards!: pulumi.Output<outputs.SwitchInterfaceRaguard[] | undefined>;
    public readonly rpvstPort!: pulumi.Output<string>;
    public readonly sampleDirection!: pulumi.Output<string>;
    public readonly securityGroups!: pulumi.Output<outputs.SwitchInterfaceSecurityGroup[] | undefined>;
    public readonly sflowCounterInterval!: pulumi.Output<number>;
    public readonly snmpIndex!: pulumi.Output<number>;
    public readonly stickyMac!: pulumi.Output<string>;
    public readonly stpBpduGuard!: pulumi.Output<string>;
    public readonly stpBpduGuardTimeout!: pulumi.Output<number>;
    public readonly stpLoopProtection!: pulumi.Output<string>;
    public readonly stpRootGuard!: pulumi.Output<string>;
    public readonly stpState!: pulumi.Output<string>;
    public readonly subVlan!: pulumi.Output<number>;
    public readonly switchPortMode!: pulumi.Output<string>;
    public readonly trustDot1pMap!: pulumi.Output<string>;
    public readonly trustIpDscpMap!: pulumi.Output<string>;
    public readonly type!: pulumi.Output<string>;
    public readonly untaggedVlans!: pulumi.Output<string>;
    public readonly vlanMappingMissDrop!: pulumi.Output<string>;
    public readonly vlanMappings!: pulumi.Output<outputs.SwitchInterfaceVlanMapping[] | undefined>;
    public readonly vlanTpid!: pulumi.Output<string>;
    public readonly vlanTrafficType!: pulumi.Output<string>;

    /**
     * Create a SwitchInterface resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SwitchInterfaceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SwitchInterfaceArgs | SwitchInterfaceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SwitchInterfaceState | undefined;
            resourceInputs["allowedSubVlans"] = state ? state.allowedSubVlans : undefined;
            resourceInputs["allowedVlans"] = state ? state.allowedVlans : undefined;
            resourceInputs["arpInspectionTrust"] = state ? state.arpInspectionTrust : undefined;
            resourceInputs["autoDiscoveryFortilink"] = state ? state.autoDiscoveryFortilink : undefined;
            resourceInputs["autoDiscoveryFortilinkPacketInterval"] = state ? state.autoDiscoveryFortilinkPacketInterval : undefined;
            resourceInputs["defaultCos"] = state ? state.defaultCos : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["dhcpSnoopLearningLimit"] = state ? state.dhcpSnoopLearningLimit : undefined;
            resourceInputs["dhcpSnoopLearningLimitCheck"] = state ? state.dhcpSnoopLearningLimitCheck : undefined;
            resourceInputs["dhcpSnoopOption82Overrides"] = state ? state.dhcpSnoopOption82Overrides : undefined;
            resourceInputs["dhcpSnoopOption82Trust"] = state ? state.dhcpSnoopOption82Trust : undefined;
            resourceInputs["dhcpSnooping"] = state ? state.dhcpSnooping : undefined;
            resourceInputs["discardMode"] = state ? state.discardMode : undefined;
            resourceInputs["dynamicSortSubtable"] = state ? state.dynamicSortSubtable : undefined;
            resourceInputs["edgePort"] = state ? state.edgePort : undefined;
            resourceInputs["filterSubVlans"] = state ? state.filterSubVlans : undefined;
            resourceInputs["fortilinkL3Mode"] = state ? state.fortilinkL3Mode : undefined;
            resourceInputs["igmpSnoopingFloodReports"] = state ? state.igmpSnoopingFloodReports : undefined;
            resourceInputs["interfaceMode"] = state ? state.interfaceMode : undefined;
            resourceInputs["ipMacBinding"] = state ? state.ipMacBinding : undefined;
            resourceInputs["learningLimit"] = state ? state.learningLimit : undefined;
            resourceInputs["learningLimitAction"] = state ? state.learningLimitAction : undefined;
            resourceInputs["logMacEvent"] = state ? state.logMacEvent : undefined;
            resourceInputs["loopGuard"] = state ? state.loopGuard : undefined;
            resourceInputs["loopGuardMacMoveThreshold"] = state ? state.loopGuardMacMoveThreshold : undefined;
            resourceInputs["loopGuardTimeout"] = state ? state.loopGuardTimeout : undefined;
            resourceInputs["mcastSnoopingFloodTraffic"] = state ? state.mcastSnoopingFloodTraffic : undefined;
            resourceInputs["mldSnoopingFloodReports"] = state ? state.mldSnoopingFloodReports : undefined;
            resourceInputs["nac"] = state ? state.nac : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nativeVlan"] = state ? state.nativeVlan : undefined;
            resourceInputs["packetSampleRate"] = state ? state.packetSampleRate : undefined;
            resourceInputs["packetSampler"] = state ? state.packetSampler : undefined;
            resourceInputs["portSecurity"] = state ? state.portSecurity : undefined;
            resourceInputs["primaryVlan"] = state ? state.primaryVlan : undefined;
            resourceInputs["privateVlan"] = state ? state.privateVlan : undefined;
            resourceInputs["privateVlanPortType"] = state ? state.privateVlanPortType : undefined;
            resourceInputs["ptpPolicy"] = state ? state.ptpPolicy : undefined;
            resourceInputs["ptpStatus"] = state ? state.ptpStatus : undefined;
            resourceInputs["qnq"] = state ? state.qnq : undefined;
            resourceInputs["qosPolicy"] = state ? state.qosPolicy : undefined;
            resourceInputs["raguards"] = state ? state.raguards : undefined;
            resourceInputs["rpvstPort"] = state ? state.rpvstPort : undefined;
            resourceInputs["sampleDirection"] = state ? state.sampleDirection : undefined;
            resourceInputs["securityGroups"] = state ? state.securityGroups : undefined;
            resourceInputs["sflowCounterInterval"] = state ? state.sflowCounterInterval : undefined;
            resourceInputs["snmpIndex"] = state ? state.snmpIndex : undefined;
            resourceInputs["stickyMac"] = state ? state.stickyMac : undefined;
            resourceInputs["stpBpduGuard"] = state ? state.stpBpduGuard : undefined;
            resourceInputs["stpBpduGuardTimeout"] = state ? state.stpBpduGuardTimeout : undefined;
            resourceInputs["stpLoopProtection"] = state ? state.stpLoopProtection : undefined;
            resourceInputs["stpRootGuard"] = state ? state.stpRootGuard : undefined;
            resourceInputs["stpState"] = state ? state.stpState : undefined;
            resourceInputs["subVlan"] = state ? state.subVlan : undefined;
            resourceInputs["switchPortMode"] = state ? state.switchPortMode : undefined;
            resourceInputs["trustDot1pMap"] = state ? state.trustDot1pMap : undefined;
            resourceInputs["trustIpDscpMap"] = state ? state.trustIpDscpMap : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["untaggedVlans"] = state ? state.untaggedVlans : undefined;
            resourceInputs["vlanMappingMissDrop"] = state ? state.vlanMappingMissDrop : undefined;
            resourceInputs["vlanMappings"] = state ? state.vlanMappings : undefined;
            resourceInputs["vlanTpid"] = state ? state.vlanTpid : undefined;
            resourceInputs["vlanTrafficType"] = state ? state.vlanTrafficType : undefined;
        } else {
            const args = argsOrState as SwitchInterfaceArgs | undefined;
            resourceInputs["allowedSubVlans"] = args ? args.allowedSubVlans : undefined;
            resourceInputs["allowedVlans"] = args ? args.allowedVlans : undefined;
            resourceInputs["arpInspectionTrust"] = args ? args.arpInspectionTrust : undefined;
            resourceInputs["autoDiscoveryFortilink"] = args ? args.autoDiscoveryFortilink : undefined;
            resourceInputs["autoDiscoveryFortilinkPacketInterval"] = args ? args.autoDiscoveryFortilinkPacketInterval : undefined;
            resourceInputs["defaultCos"] = args ? args.defaultCos : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["dhcpSnoopLearningLimit"] = args ? args.dhcpSnoopLearningLimit : undefined;
            resourceInputs["dhcpSnoopLearningLimitCheck"] = args ? args.dhcpSnoopLearningLimitCheck : undefined;
            resourceInputs["dhcpSnoopOption82Overrides"] = args ? args.dhcpSnoopOption82Overrides : undefined;
            resourceInputs["dhcpSnoopOption82Trust"] = args ? args.dhcpSnoopOption82Trust : undefined;
            resourceInputs["dhcpSnooping"] = args ? args.dhcpSnooping : undefined;
            resourceInputs["discardMode"] = args ? args.discardMode : undefined;
            resourceInputs["dynamicSortSubtable"] = args ? args.dynamicSortSubtable : undefined;
            resourceInputs["edgePort"] = args ? args.edgePort : undefined;
            resourceInputs["filterSubVlans"] = args ? args.filterSubVlans : undefined;
            resourceInputs["fortilinkL3Mode"] = args ? args.fortilinkL3Mode : undefined;
            resourceInputs["igmpSnoopingFloodReports"] = args ? args.igmpSnoopingFloodReports : undefined;
            resourceInputs["interfaceMode"] = args ? args.interfaceMode : undefined;
            resourceInputs["ipMacBinding"] = args ? args.ipMacBinding : undefined;
            resourceInputs["learningLimit"] = args ? args.learningLimit : undefined;
            resourceInputs["learningLimitAction"] = args ? args.learningLimitAction : undefined;
            resourceInputs["logMacEvent"] = args ? args.logMacEvent : undefined;
            resourceInputs["loopGuard"] = args ? args.loopGuard : undefined;
            resourceInputs["loopGuardMacMoveThreshold"] = args ? args.loopGuardMacMoveThreshold : undefined;
            resourceInputs["loopGuardTimeout"] = args ? args.loopGuardTimeout : undefined;
            resourceInputs["mcastSnoopingFloodTraffic"] = args ? args.mcastSnoopingFloodTraffic : undefined;
            resourceInputs["mldSnoopingFloodReports"] = args ? args.mldSnoopingFloodReports : undefined;
            resourceInputs["nac"] = args ? args.nac : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nativeVlan"] = args ? args.nativeVlan : undefined;
            resourceInputs["packetSampleRate"] = args ? args.packetSampleRate : undefined;
            resourceInputs["packetSampler"] = args ? args.packetSampler : undefined;
            resourceInputs["portSecurity"] = args ? args.portSecurity : undefined;
            resourceInputs["primaryVlan"] = args ? args.primaryVlan : undefined;
            resourceInputs["privateVlan"] = args ? args.privateVlan : undefined;
            resourceInputs["privateVlanPortType"] = args ? args.privateVlanPortType : undefined;
            resourceInputs["ptpPolicy"] = args ? args.ptpPolicy : undefined;
            resourceInputs["ptpStatus"] = args ? args.ptpStatus : undefined;
            resourceInputs["qnq"] = args ? args.qnq : undefined;
            resourceInputs["qosPolicy"] = args ? args.qosPolicy : undefined;
            resourceInputs["raguards"] = args ? args.raguards : undefined;
            resourceInputs["rpvstPort"] = args ? args.rpvstPort : undefined;
            resourceInputs["sampleDirection"] = args ? args.sampleDirection : undefined;
            resourceInputs["securityGroups"] = args ? args.securityGroups : undefined;
            resourceInputs["sflowCounterInterval"] = args ? args.sflowCounterInterval : undefined;
            resourceInputs["snmpIndex"] = args ? args.snmpIndex : undefined;
            resourceInputs["stickyMac"] = args ? args.stickyMac : undefined;
            resourceInputs["stpBpduGuard"] = args ? args.stpBpduGuard : undefined;
            resourceInputs["stpBpduGuardTimeout"] = args ? args.stpBpduGuardTimeout : undefined;
            resourceInputs["stpLoopProtection"] = args ? args.stpLoopProtection : undefined;
            resourceInputs["stpRootGuard"] = args ? args.stpRootGuard : undefined;
            resourceInputs["stpState"] = args ? args.stpState : undefined;
            resourceInputs["subVlan"] = args ? args.subVlan : undefined;
            resourceInputs["switchPortMode"] = args ? args.switchPortMode : undefined;
            resourceInputs["trustDot1pMap"] = args ? args.trustDot1pMap : undefined;
            resourceInputs["trustIpDscpMap"] = args ? args.trustIpDscpMap : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["untaggedVlans"] = args ? args.untaggedVlans : undefined;
            resourceInputs["vlanMappingMissDrop"] = args ? args.vlanMappingMissDrop : undefined;
            resourceInputs["vlanMappings"] = args ? args.vlanMappings : undefined;
            resourceInputs["vlanTpid"] = args ? args.vlanTpid : undefined;
            resourceInputs["vlanTrafficType"] = args ? args.vlanTrafficType : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SwitchInterface.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SwitchInterface resources.
 */
export interface SwitchInterfaceState {
    allowedSubVlans?: pulumi.Input<string>;
    allowedVlans?: pulumi.Input<string>;
    arpInspectionTrust?: pulumi.Input<string>;
    autoDiscoveryFortilink?: pulumi.Input<string>;
    autoDiscoveryFortilinkPacketInterval?: pulumi.Input<number>;
    defaultCos?: pulumi.Input<number>;
    description?: pulumi.Input<string>;
    dhcpSnoopLearningLimit?: pulumi.Input<number>;
    dhcpSnoopLearningLimitCheck?: pulumi.Input<string>;
    dhcpSnoopOption82Overrides?: pulumi.Input<pulumi.Input<inputs.SwitchInterfaceDhcpSnoopOption82Override>[]>;
    dhcpSnoopOption82Trust?: pulumi.Input<string>;
    dhcpSnooping?: pulumi.Input<string>;
    discardMode?: pulumi.Input<string>;
    dynamicSortSubtable?: pulumi.Input<string>;
    edgePort?: pulumi.Input<string>;
    filterSubVlans?: pulumi.Input<string>;
    fortilinkL3Mode?: pulumi.Input<string>;
    igmpSnoopingFloodReports?: pulumi.Input<string>;
    interfaceMode?: pulumi.Input<string>;
    ipMacBinding?: pulumi.Input<string>;
    learningLimit?: pulumi.Input<number>;
    learningLimitAction?: pulumi.Input<string>;
    logMacEvent?: pulumi.Input<string>;
    loopGuard?: pulumi.Input<string>;
    loopGuardMacMoveThreshold?: pulumi.Input<number>;
    loopGuardTimeout?: pulumi.Input<number>;
    mcastSnoopingFloodTraffic?: pulumi.Input<string>;
    mldSnoopingFloodReports?: pulumi.Input<string>;
    nac?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nativeVlan?: pulumi.Input<number>;
    packetSampleRate?: pulumi.Input<number>;
    packetSampler?: pulumi.Input<string>;
    portSecurity?: pulumi.Input<inputs.SwitchInterfacePortSecurity>;
    primaryVlan?: pulumi.Input<number>;
    privateVlan?: pulumi.Input<string>;
    privateVlanPortType?: pulumi.Input<number>;
    ptpPolicy?: pulumi.Input<string>;
    ptpStatus?: pulumi.Input<string>;
    qnq?: pulumi.Input<inputs.SwitchInterfaceQnq>;
    qosPolicy?: pulumi.Input<string>;
    raguards?: pulumi.Input<pulumi.Input<inputs.SwitchInterfaceRaguard>[]>;
    rpvstPort?: pulumi.Input<string>;
    sampleDirection?: pulumi.Input<string>;
    securityGroups?: pulumi.Input<pulumi.Input<inputs.SwitchInterfaceSecurityGroup>[]>;
    sflowCounterInterval?: pulumi.Input<number>;
    snmpIndex?: pulumi.Input<number>;
    stickyMac?: pulumi.Input<string>;
    stpBpduGuard?: pulumi.Input<string>;
    stpBpduGuardTimeout?: pulumi.Input<number>;
    stpLoopProtection?: pulumi.Input<string>;
    stpRootGuard?: pulumi.Input<string>;
    stpState?: pulumi.Input<string>;
    subVlan?: pulumi.Input<number>;
    switchPortMode?: pulumi.Input<string>;
    trustDot1pMap?: pulumi.Input<string>;
    trustIpDscpMap?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    untaggedVlans?: pulumi.Input<string>;
    vlanMappingMissDrop?: pulumi.Input<string>;
    vlanMappings?: pulumi.Input<pulumi.Input<inputs.SwitchInterfaceVlanMapping>[]>;
    vlanTpid?: pulumi.Input<string>;
    vlanTrafficType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SwitchInterface resource.
 */
export interface SwitchInterfaceArgs {
    allowedSubVlans?: pulumi.Input<string>;
    allowedVlans?: pulumi.Input<string>;
    arpInspectionTrust?: pulumi.Input<string>;
    autoDiscoveryFortilink?: pulumi.Input<string>;
    autoDiscoveryFortilinkPacketInterval?: pulumi.Input<number>;
    defaultCos?: pulumi.Input<number>;
    description?: pulumi.Input<string>;
    dhcpSnoopLearningLimit?: pulumi.Input<number>;
    dhcpSnoopLearningLimitCheck?: pulumi.Input<string>;
    dhcpSnoopOption82Overrides?: pulumi.Input<pulumi.Input<inputs.SwitchInterfaceDhcpSnoopOption82Override>[]>;
    dhcpSnoopOption82Trust?: pulumi.Input<string>;
    dhcpSnooping?: pulumi.Input<string>;
    discardMode?: pulumi.Input<string>;
    dynamicSortSubtable?: pulumi.Input<string>;
    edgePort?: pulumi.Input<string>;
    filterSubVlans?: pulumi.Input<string>;
    fortilinkL3Mode?: pulumi.Input<string>;
    igmpSnoopingFloodReports?: pulumi.Input<string>;
    interfaceMode?: pulumi.Input<string>;
    ipMacBinding?: pulumi.Input<string>;
    learningLimit?: pulumi.Input<number>;
    learningLimitAction?: pulumi.Input<string>;
    logMacEvent?: pulumi.Input<string>;
    loopGuard?: pulumi.Input<string>;
    loopGuardMacMoveThreshold?: pulumi.Input<number>;
    loopGuardTimeout?: pulumi.Input<number>;
    mcastSnoopingFloodTraffic?: pulumi.Input<string>;
    mldSnoopingFloodReports?: pulumi.Input<string>;
    nac?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nativeVlan?: pulumi.Input<number>;
    packetSampleRate?: pulumi.Input<number>;
    packetSampler?: pulumi.Input<string>;
    portSecurity?: pulumi.Input<inputs.SwitchInterfacePortSecurity>;
    primaryVlan?: pulumi.Input<number>;
    privateVlan?: pulumi.Input<string>;
    privateVlanPortType?: pulumi.Input<number>;
    ptpPolicy?: pulumi.Input<string>;
    ptpStatus?: pulumi.Input<string>;
    qnq?: pulumi.Input<inputs.SwitchInterfaceQnq>;
    qosPolicy?: pulumi.Input<string>;
    raguards?: pulumi.Input<pulumi.Input<inputs.SwitchInterfaceRaguard>[]>;
    rpvstPort?: pulumi.Input<string>;
    sampleDirection?: pulumi.Input<string>;
    securityGroups?: pulumi.Input<pulumi.Input<inputs.SwitchInterfaceSecurityGroup>[]>;
    sflowCounterInterval?: pulumi.Input<number>;
    snmpIndex?: pulumi.Input<number>;
    stickyMac?: pulumi.Input<string>;
    stpBpduGuard?: pulumi.Input<string>;
    stpBpduGuardTimeout?: pulumi.Input<number>;
    stpLoopProtection?: pulumi.Input<string>;
    stpRootGuard?: pulumi.Input<string>;
    stpState?: pulumi.Input<string>;
    subVlan?: pulumi.Input<number>;
    switchPortMode?: pulumi.Input<string>;
    trustDot1pMap?: pulumi.Input<string>;
    trustIpDscpMap?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    untaggedVlans?: pulumi.Input<string>;
    vlanMappingMissDrop?: pulumi.Input<string>;
    vlanMappings?: pulumi.Input<pulumi.Input<inputs.SwitchInterfaceVlanMapping>[]>;
    vlanTpid?: pulumi.Input<string>;
    vlanTrafficType?: pulumi.Input<string>;
}
