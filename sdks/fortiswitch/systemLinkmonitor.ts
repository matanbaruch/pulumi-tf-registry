// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SystemLinkmonitor extends pulumi.CustomResource {
    /**
     * Get an existing SystemLinkmonitor resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SystemLinkmonitorState, opts?: pulumi.CustomResourceOptions): SystemLinkmonitor {
        return new SystemLinkmonitor(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortiswitch:index/systemLinkmonitor:SystemLinkmonitor';

    /**
     * Returns true if the given object is an instance of SystemLinkmonitor.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SystemLinkmonitor {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SystemLinkmonitor.__pulumiType;
    }

    public readonly addrMode!: pulumi.Output<string>;
    public readonly dynamicSortSubtable!: pulumi.Output<string | undefined>;
    public readonly failtime!: pulumi.Output<number>;
    public readonly gatewayIp!: pulumi.Output<string>;
    public readonly gatewayIp6!: pulumi.Output<string>;
    public readonly httpGet!: pulumi.Output<string>;
    public readonly httpMatch!: pulumi.Output<string>;
    public readonly interval!: pulumi.Output<number>;
    public readonly name!: pulumi.Output<string>;
    public readonly packetSize!: pulumi.Output<number>;
    public readonly password!: pulumi.Output<string | undefined>;
    public readonly port!: pulumi.Output<number>;
    public readonly protocol!: pulumi.Output<string>;
    public readonly recoverytime!: pulumi.Output<number>;
    public readonly securityMode!: pulumi.Output<string>;
    public readonly servers!: pulumi.Output<outputs.SystemLinkmonitorServer[] | undefined>;
    public readonly sourceIp!: pulumi.Output<string>;
    public readonly sourceIp6!: pulumi.Output<string>;
    public readonly srcintf!: pulumi.Output<string>;
    public readonly status!: pulumi.Output<string>;
    public readonly timeout!: pulumi.Output<number>;
    public readonly updateCascadeInterface!: pulumi.Output<string>;
    public readonly updateStaticRoute!: pulumi.Output<string>;

    /**
     * Create a SystemLinkmonitor resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SystemLinkmonitorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SystemLinkmonitorArgs | SystemLinkmonitorState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SystemLinkmonitorState | undefined;
            resourceInputs["addrMode"] = state ? state.addrMode : undefined;
            resourceInputs["dynamicSortSubtable"] = state ? state.dynamicSortSubtable : undefined;
            resourceInputs["failtime"] = state ? state.failtime : undefined;
            resourceInputs["gatewayIp"] = state ? state.gatewayIp : undefined;
            resourceInputs["gatewayIp6"] = state ? state.gatewayIp6 : undefined;
            resourceInputs["httpGet"] = state ? state.httpGet : undefined;
            resourceInputs["httpMatch"] = state ? state.httpMatch : undefined;
            resourceInputs["interval"] = state ? state.interval : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["packetSize"] = state ? state.packetSize : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["recoverytime"] = state ? state.recoverytime : undefined;
            resourceInputs["securityMode"] = state ? state.securityMode : undefined;
            resourceInputs["servers"] = state ? state.servers : undefined;
            resourceInputs["sourceIp"] = state ? state.sourceIp : undefined;
            resourceInputs["sourceIp6"] = state ? state.sourceIp6 : undefined;
            resourceInputs["srcintf"] = state ? state.srcintf : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["timeout"] = state ? state.timeout : undefined;
            resourceInputs["updateCascadeInterface"] = state ? state.updateCascadeInterface : undefined;
            resourceInputs["updateStaticRoute"] = state ? state.updateStaticRoute : undefined;
        } else {
            const args = argsOrState as SystemLinkmonitorArgs | undefined;
            resourceInputs["addrMode"] = args ? args.addrMode : undefined;
            resourceInputs["dynamicSortSubtable"] = args ? args.dynamicSortSubtable : undefined;
            resourceInputs["failtime"] = args ? args.failtime : undefined;
            resourceInputs["gatewayIp"] = args ? args.gatewayIp : undefined;
            resourceInputs["gatewayIp6"] = args ? args.gatewayIp6 : undefined;
            resourceInputs["httpGet"] = args ? args.httpGet : undefined;
            resourceInputs["httpMatch"] = args ? args.httpMatch : undefined;
            resourceInputs["interval"] = args ? args.interval : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["packetSize"] = args ? args.packetSize : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["recoverytime"] = args ? args.recoverytime : undefined;
            resourceInputs["securityMode"] = args ? args.securityMode : undefined;
            resourceInputs["servers"] = args ? args.servers : undefined;
            resourceInputs["sourceIp"] = args ? args.sourceIp : undefined;
            resourceInputs["sourceIp6"] = args ? args.sourceIp6 : undefined;
            resourceInputs["srcintf"] = args ? args.srcintf : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["timeout"] = args ? args.timeout : undefined;
            resourceInputs["updateCascadeInterface"] = args ? args.updateCascadeInterface : undefined;
            resourceInputs["updateStaticRoute"] = args ? args.updateStaticRoute : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(SystemLinkmonitor.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SystemLinkmonitor resources.
 */
export interface SystemLinkmonitorState {
    addrMode?: pulumi.Input<string>;
    dynamicSortSubtable?: pulumi.Input<string>;
    failtime?: pulumi.Input<number>;
    gatewayIp?: pulumi.Input<string>;
    gatewayIp6?: pulumi.Input<string>;
    httpGet?: pulumi.Input<string>;
    httpMatch?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    packetSize?: pulumi.Input<number>;
    password?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    protocol?: pulumi.Input<string>;
    recoverytime?: pulumi.Input<number>;
    securityMode?: pulumi.Input<string>;
    servers?: pulumi.Input<pulumi.Input<inputs.SystemLinkmonitorServer>[]>;
    sourceIp?: pulumi.Input<string>;
    sourceIp6?: pulumi.Input<string>;
    srcintf?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    timeout?: pulumi.Input<number>;
    updateCascadeInterface?: pulumi.Input<string>;
    updateStaticRoute?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SystemLinkmonitor resource.
 */
export interface SystemLinkmonitorArgs {
    addrMode?: pulumi.Input<string>;
    dynamicSortSubtable?: pulumi.Input<string>;
    failtime?: pulumi.Input<number>;
    gatewayIp?: pulumi.Input<string>;
    gatewayIp6?: pulumi.Input<string>;
    httpGet?: pulumi.Input<string>;
    httpMatch?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    packetSize?: pulumi.Input<number>;
    password?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    protocol?: pulumi.Input<string>;
    recoverytime?: pulumi.Input<number>;
    securityMode?: pulumi.Input<string>;
    servers?: pulumi.Input<pulumi.Input<inputs.SystemLinkmonitorServer>[]>;
    sourceIp?: pulumi.Input<string>;
    sourceIp6?: pulumi.Input<string>;
    srcintf?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    timeout?: pulumi.Input<number>;
    updateCascadeInterface?: pulumi.Input<string>;
    updateStaticRoute?: pulumi.Input<string>;
}
