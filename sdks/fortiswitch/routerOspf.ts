// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class RouterOspf extends pulumi.CustomResource {
    /**
     * Get an existing RouterOspf resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RouterOspfState, opts?: pulumi.CustomResourceOptions): RouterOspf {
        return new RouterOspf(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortiswitch:index/routerOspf:RouterOspf';

    /**
     * Returns true if the given object is an instance of RouterOspf.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RouterOspf {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RouterOspf.__pulumiType;
    }

    public readonly abrType!: pulumi.Output<string>;
    public readonly areas!: pulumi.Output<outputs.RouterOspfArea[] | undefined>;
    public readonly databaseOverflow!: pulumi.Output<string>;
    public readonly databaseOverflowMaxExternalLsa!: pulumi.Output<number>;
    public readonly databaseOverflowTimeToRecover!: pulumi.Output<number>;
    public readonly defaultInformationMetric!: pulumi.Output<number>;
    public readonly defaultInformationMetricType!: pulumi.Output<string>;
    public readonly defaultInformationOriginate!: pulumi.Output<string>;
    public readonly distance!: pulumi.Output<number>;
    public readonly distanceExternal!: pulumi.Output<number>;
    public readonly distanceInterArea!: pulumi.Output<number>;
    public readonly distanceIntraArea!: pulumi.Output<number>;
    public readonly distributeLists!: pulumi.Output<outputs.RouterOspfDistributeList[] | undefined>;
    public readonly dynamicSortSubtable!: pulumi.Output<string | undefined>;
    public readonly interfaces!: pulumi.Output<outputs.RouterOspfInterface[] | undefined>;
    public readonly logNeighbourChanges!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly networks!: pulumi.Output<outputs.RouterOspfNetwork[] | undefined>;
    public readonly passiveInterfaces!: pulumi.Output<outputs.RouterOspfPassiveInterface[] | undefined>;
    public readonly redistributes!: pulumi.Output<outputs.RouterOspfRedistribute[] | undefined>;
    public readonly rfc1583Compatible!: pulumi.Output<string>;
    public readonly routerId!: pulumi.Output<string>;
    public readonly spfTimers!: pulumi.Output<string>;
    public readonly summaryAddresses!: pulumi.Output<outputs.RouterOspfSummaryAddress[] | undefined>;
    public readonly vrves!: pulumi.Output<outputs.RouterOspfVrf[] | undefined>;

    /**
     * Create a RouterOspf resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: RouterOspfArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RouterOspfArgs | RouterOspfState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RouterOspfState | undefined;
            resourceInputs["abrType"] = state ? state.abrType : undefined;
            resourceInputs["areas"] = state ? state.areas : undefined;
            resourceInputs["databaseOverflow"] = state ? state.databaseOverflow : undefined;
            resourceInputs["databaseOverflowMaxExternalLsa"] = state ? state.databaseOverflowMaxExternalLsa : undefined;
            resourceInputs["databaseOverflowTimeToRecover"] = state ? state.databaseOverflowTimeToRecover : undefined;
            resourceInputs["defaultInformationMetric"] = state ? state.defaultInformationMetric : undefined;
            resourceInputs["defaultInformationMetricType"] = state ? state.defaultInformationMetricType : undefined;
            resourceInputs["defaultInformationOriginate"] = state ? state.defaultInformationOriginate : undefined;
            resourceInputs["distance"] = state ? state.distance : undefined;
            resourceInputs["distanceExternal"] = state ? state.distanceExternal : undefined;
            resourceInputs["distanceInterArea"] = state ? state.distanceInterArea : undefined;
            resourceInputs["distanceIntraArea"] = state ? state.distanceIntraArea : undefined;
            resourceInputs["distributeLists"] = state ? state.distributeLists : undefined;
            resourceInputs["dynamicSortSubtable"] = state ? state.dynamicSortSubtable : undefined;
            resourceInputs["interfaces"] = state ? state.interfaces : undefined;
            resourceInputs["logNeighbourChanges"] = state ? state.logNeighbourChanges : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networks"] = state ? state.networks : undefined;
            resourceInputs["passiveInterfaces"] = state ? state.passiveInterfaces : undefined;
            resourceInputs["redistributes"] = state ? state.redistributes : undefined;
            resourceInputs["rfc1583Compatible"] = state ? state.rfc1583Compatible : undefined;
            resourceInputs["routerId"] = state ? state.routerId : undefined;
            resourceInputs["spfTimers"] = state ? state.spfTimers : undefined;
            resourceInputs["summaryAddresses"] = state ? state.summaryAddresses : undefined;
            resourceInputs["vrves"] = state ? state.vrves : undefined;
        } else {
            const args = argsOrState as RouterOspfArgs | undefined;
            resourceInputs["abrType"] = args ? args.abrType : undefined;
            resourceInputs["areas"] = args ? args.areas : undefined;
            resourceInputs["databaseOverflow"] = args ? args.databaseOverflow : undefined;
            resourceInputs["databaseOverflowMaxExternalLsa"] = args ? args.databaseOverflowMaxExternalLsa : undefined;
            resourceInputs["databaseOverflowTimeToRecover"] = args ? args.databaseOverflowTimeToRecover : undefined;
            resourceInputs["defaultInformationMetric"] = args ? args.defaultInformationMetric : undefined;
            resourceInputs["defaultInformationMetricType"] = args ? args.defaultInformationMetricType : undefined;
            resourceInputs["defaultInformationOriginate"] = args ? args.defaultInformationOriginate : undefined;
            resourceInputs["distance"] = args ? args.distance : undefined;
            resourceInputs["distanceExternal"] = args ? args.distanceExternal : undefined;
            resourceInputs["distanceInterArea"] = args ? args.distanceInterArea : undefined;
            resourceInputs["distanceIntraArea"] = args ? args.distanceIntraArea : undefined;
            resourceInputs["distributeLists"] = args ? args.distributeLists : undefined;
            resourceInputs["dynamicSortSubtable"] = args ? args.dynamicSortSubtable : undefined;
            resourceInputs["interfaces"] = args ? args.interfaces : undefined;
            resourceInputs["logNeighbourChanges"] = args ? args.logNeighbourChanges : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networks"] = args ? args.networks : undefined;
            resourceInputs["passiveInterfaces"] = args ? args.passiveInterfaces : undefined;
            resourceInputs["redistributes"] = args ? args.redistributes : undefined;
            resourceInputs["rfc1583Compatible"] = args ? args.rfc1583Compatible : undefined;
            resourceInputs["routerId"] = args ? args.routerId : undefined;
            resourceInputs["spfTimers"] = args ? args.spfTimers : undefined;
            resourceInputs["summaryAddresses"] = args ? args.summaryAddresses : undefined;
            resourceInputs["vrves"] = args ? args.vrves : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RouterOspf.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering RouterOspf resources.
 */
export interface RouterOspfState {
    abrType?: pulumi.Input<string>;
    areas?: pulumi.Input<pulumi.Input<inputs.RouterOspfArea>[]>;
    databaseOverflow?: pulumi.Input<string>;
    databaseOverflowMaxExternalLsa?: pulumi.Input<number>;
    databaseOverflowTimeToRecover?: pulumi.Input<number>;
    defaultInformationMetric?: pulumi.Input<number>;
    defaultInformationMetricType?: pulumi.Input<string>;
    defaultInformationOriginate?: pulumi.Input<string>;
    distance?: pulumi.Input<number>;
    distanceExternal?: pulumi.Input<number>;
    distanceInterArea?: pulumi.Input<number>;
    distanceIntraArea?: pulumi.Input<number>;
    distributeLists?: pulumi.Input<pulumi.Input<inputs.RouterOspfDistributeList>[]>;
    dynamicSortSubtable?: pulumi.Input<string>;
    interfaces?: pulumi.Input<pulumi.Input<inputs.RouterOspfInterface>[]>;
    logNeighbourChanges?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    networks?: pulumi.Input<pulumi.Input<inputs.RouterOspfNetwork>[]>;
    passiveInterfaces?: pulumi.Input<pulumi.Input<inputs.RouterOspfPassiveInterface>[]>;
    redistributes?: pulumi.Input<pulumi.Input<inputs.RouterOspfRedistribute>[]>;
    rfc1583Compatible?: pulumi.Input<string>;
    routerId?: pulumi.Input<string>;
    spfTimers?: pulumi.Input<string>;
    summaryAddresses?: pulumi.Input<pulumi.Input<inputs.RouterOspfSummaryAddress>[]>;
    vrves?: pulumi.Input<pulumi.Input<inputs.RouterOspfVrf>[]>;
}

/**
 * The set of arguments for constructing a RouterOspf resource.
 */
export interface RouterOspfArgs {
    abrType?: pulumi.Input<string>;
    areas?: pulumi.Input<pulumi.Input<inputs.RouterOspfArea>[]>;
    databaseOverflow?: pulumi.Input<string>;
    databaseOverflowMaxExternalLsa?: pulumi.Input<number>;
    databaseOverflowTimeToRecover?: pulumi.Input<number>;
    defaultInformationMetric?: pulumi.Input<number>;
    defaultInformationMetricType?: pulumi.Input<string>;
    defaultInformationOriginate?: pulumi.Input<string>;
    distance?: pulumi.Input<number>;
    distanceExternal?: pulumi.Input<number>;
    distanceInterArea?: pulumi.Input<number>;
    distanceIntraArea?: pulumi.Input<number>;
    distributeLists?: pulumi.Input<pulumi.Input<inputs.RouterOspfDistributeList>[]>;
    dynamicSortSubtable?: pulumi.Input<string>;
    interfaces?: pulumi.Input<pulumi.Input<inputs.RouterOspfInterface>[]>;
    logNeighbourChanges?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    networks?: pulumi.Input<pulumi.Input<inputs.RouterOspfNetwork>[]>;
    passiveInterfaces?: pulumi.Input<pulumi.Input<inputs.RouterOspfPassiveInterface>[]>;
    redistributes?: pulumi.Input<pulumi.Input<inputs.RouterOspfRedistribute>[]>;
    rfc1583Compatible?: pulumi.Input<string>;
    routerId?: pulumi.Input<string>;
    spfTimers?: pulumi.Input<string>;
    summaryAddresses?: pulumi.Input<pulumi.Input<inputs.RouterOspfSummaryAddress>[]>;
    vrves?: pulumi.Input<pulumi.Input<inputs.RouterOspfVrf>[]>;
}
