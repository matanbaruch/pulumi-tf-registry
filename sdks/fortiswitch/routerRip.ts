// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class RouterRip extends pulumi.CustomResource {
    /**
     * Get an existing RouterRip resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RouterRipState, opts?: pulumi.CustomResourceOptions): RouterRip {
        return new RouterRip(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortiswitch:index/routerRip:RouterRip';

    /**
     * Returns true if the given object is an instance of RouterRip.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RouterRip {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RouterRip.__pulumiType;
    }

    public readonly bfd!: pulumi.Output<string>;
    public readonly defaultInformationOriginate!: pulumi.Output<string>;
    public readonly defaultMetric!: pulumi.Output<number>;
    public readonly distances!: pulumi.Output<outputs.RouterRipDistance[] | undefined>;
    public readonly distributeLists!: pulumi.Output<outputs.RouterRipDistributeList[] | undefined>;
    public readonly dynamicSortSubtable!: pulumi.Output<string | undefined>;
    public readonly garbageTimer!: pulumi.Output<number>;
    public readonly interfaces!: pulumi.Output<outputs.RouterRipInterface[] | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly neighbors!: pulumi.Output<outputs.RouterRipNeighbor[] | undefined>;
    public readonly networks!: pulumi.Output<outputs.RouterRipNetwork[] | undefined>;
    public readonly offsetLists!: pulumi.Output<outputs.RouterRipOffsetList[] | undefined>;
    public readonly passiveInterfaces!: pulumi.Output<outputs.RouterRipPassiveInterface[] | undefined>;
    public readonly recvBufferSize!: pulumi.Output<number>;
    public readonly redistributes!: pulumi.Output<outputs.RouterRipRedistribute[] | undefined>;
    public readonly timeoutTimer!: pulumi.Output<number>;
    public readonly updateTimer!: pulumi.Output<number>;
    public readonly version!: pulumi.Output<string>;
    public readonly vrves!: pulumi.Output<outputs.RouterRipVrf[] | undefined>;

    /**
     * Create a RouterRip resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: RouterRipArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RouterRipArgs | RouterRipState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RouterRipState | undefined;
            resourceInputs["bfd"] = state ? state.bfd : undefined;
            resourceInputs["defaultInformationOriginate"] = state ? state.defaultInformationOriginate : undefined;
            resourceInputs["defaultMetric"] = state ? state.defaultMetric : undefined;
            resourceInputs["distances"] = state ? state.distances : undefined;
            resourceInputs["distributeLists"] = state ? state.distributeLists : undefined;
            resourceInputs["dynamicSortSubtable"] = state ? state.dynamicSortSubtable : undefined;
            resourceInputs["garbageTimer"] = state ? state.garbageTimer : undefined;
            resourceInputs["interfaces"] = state ? state.interfaces : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["neighbors"] = state ? state.neighbors : undefined;
            resourceInputs["networks"] = state ? state.networks : undefined;
            resourceInputs["offsetLists"] = state ? state.offsetLists : undefined;
            resourceInputs["passiveInterfaces"] = state ? state.passiveInterfaces : undefined;
            resourceInputs["recvBufferSize"] = state ? state.recvBufferSize : undefined;
            resourceInputs["redistributes"] = state ? state.redistributes : undefined;
            resourceInputs["timeoutTimer"] = state ? state.timeoutTimer : undefined;
            resourceInputs["updateTimer"] = state ? state.updateTimer : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
            resourceInputs["vrves"] = state ? state.vrves : undefined;
        } else {
            const args = argsOrState as RouterRipArgs | undefined;
            resourceInputs["bfd"] = args ? args.bfd : undefined;
            resourceInputs["defaultInformationOriginate"] = args ? args.defaultInformationOriginate : undefined;
            resourceInputs["defaultMetric"] = args ? args.defaultMetric : undefined;
            resourceInputs["distances"] = args ? args.distances : undefined;
            resourceInputs["distributeLists"] = args ? args.distributeLists : undefined;
            resourceInputs["dynamicSortSubtable"] = args ? args.dynamicSortSubtable : undefined;
            resourceInputs["garbageTimer"] = args ? args.garbageTimer : undefined;
            resourceInputs["interfaces"] = args ? args.interfaces : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["neighbors"] = args ? args.neighbors : undefined;
            resourceInputs["networks"] = args ? args.networks : undefined;
            resourceInputs["offsetLists"] = args ? args.offsetLists : undefined;
            resourceInputs["passiveInterfaces"] = args ? args.passiveInterfaces : undefined;
            resourceInputs["recvBufferSize"] = args ? args.recvBufferSize : undefined;
            resourceInputs["redistributes"] = args ? args.redistributes : undefined;
            resourceInputs["timeoutTimer"] = args ? args.timeoutTimer : undefined;
            resourceInputs["updateTimer"] = args ? args.updateTimer : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
            resourceInputs["vrves"] = args ? args.vrves : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RouterRip.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering RouterRip resources.
 */
export interface RouterRipState {
    bfd?: pulumi.Input<string>;
    defaultInformationOriginate?: pulumi.Input<string>;
    defaultMetric?: pulumi.Input<number>;
    distances?: pulumi.Input<pulumi.Input<inputs.RouterRipDistance>[]>;
    distributeLists?: pulumi.Input<pulumi.Input<inputs.RouterRipDistributeList>[]>;
    dynamicSortSubtable?: pulumi.Input<string>;
    garbageTimer?: pulumi.Input<number>;
    interfaces?: pulumi.Input<pulumi.Input<inputs.RouterRipInterface>[]>;
    name?: pulumi.Input<string>;
    neighbors?: pulumi.Input<pulumi.Input<inputs.RouterRipNeighbor>[]>;
    networks?: pulumi.Input<pulumi.Input<inputs.RouterRipNetwork>[]>;
    offsetLists?: pulumi.Input<pulumi.Input<inputs.RouterRipOffsetList>[]>;
    passiveInterfaces?: pulumi.Input<pulumi.Input<inputs.RouterRipPassiveInterface>[]>;
    recvBufferSize?: pulumi.Input<number>;
    redistributes?: pulumi.Input<pulumi.Input<inputs.RouterRipRedistribute>[]>;
    timeoutTimer?: pulumi.Input<number>;
    updateTimer?: pulumi.Input<number>;
    version?: pulumi.Input<string>;
    vrves?: pulumi.Input<pulumi.Input<inputs.RouterRipVrf>[]>;
}

/**
 * The set of arguments for constructing a RouterRip resource.
 */
export interface RouterRipArgs {
    bfd?: pulumi.Input<string>;
    defaultInformationOriginate?: pulumi.Input<string>;
    defaultMetric?: pulumi.Input<number>;
    distances?: pulumi.Input<pulumi.Input<inputs.RouterRipDistance>[]>;
    distributeLists?: pulumi.Input<pulumi.Input<inputs.RouterRipDistributeList>[]>;
    dynamicSortSubtable?: pulumi.Input<string>;
    garbageTimer?: pulumi.Input<number>;
    interfaces?: pulumi.Input<pulumi.Input<inputs.RouterRipInterface>[]>;
    name?: pulumi.Input<string>;
    neighbors?: pulumi.Input<pulumi.Input<inputs.RouterRipNeighbor>[]>;
    networks?: pulumi.Input<pulumi.Input<inputs.RouterRipNetwork>[]>;
    offsetLists?: pulumi.Input<pulumi.Input<inputs.RouterRipOffsetList>[]>;
    passiveInterfaces?: pulumi.Input<pulumi.Input<inputs.RouterRipPassiveInterface>[]>;
    recvBufferSize?: pulumi.Input<number>;
    redistributes?: pulumi.Input<pulumi.Input<inputs.RouterRipRedistribute>[]>;
    timeoutTimer?: pulumi.Input<number>;
    updateTimer?: pulumi.Input<number>;
    version?: pulumi.Input<string>;
    vrves?: pulumi.Input<pulumi.Input<inputs.RouterRipVrf>[]>;
}
