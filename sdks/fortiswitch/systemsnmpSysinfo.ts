// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SystemsnmpSysinfo extends pulumi.CustomResource {
    /**
     * Get an existing SystemsnmpSysinfo resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SystemsnmpSysinfoState, opts?: pulumi.CustomResourceOptions): SystemsnmpSysinfo {
        return new SystemsnmpSysinfo(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortiswitch:index/systemsnmpSysinfo:SystemsnmpSysinfo';

    /**
     * Returns true if the given object is an instance of SystemsnmpSysinfo.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SystemsnmpSysinfo {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SystemsnmpSysinfo.__pulumiType;
    }

    public readonly contactInfo!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string>;
    public readonly engineId!: pulumi.Output<string>;
    public readonly location!: pulumi.Output<string>;
    public readonly status!: pulumi.Output<string>;
    public readonly trapHighCpuInterval!: pulumi.Output<string>;
    public readonly trapHighCpuThreshold!: pulumi.Output<number>;
    public readonly trapLogFullThreshold!: pulumi.Output<number>;
    public readonly trapLowMemoryThreshold!: pulumi.Output<number>;
    public readonly trapTempAlarmThreshold!: pulumi.Output<number>;
    public readonly trapTempWarningThreshold!: pulumi.Output<number>;

    /**
     * Create a SystemsnmpSysinfo resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SystemsnmpSysinfoArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SystemsnmpSysinfoArgs | SystemsnmpSysinfoState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SystemsnmpSysinfoState | undefined;
            resourceInputs["contactInfo"] = state ? state.contactInfo : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["engineId"] = state ? state.engineId : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["trapHighCpuInterval"] = state ? state.trapHighCpuInterval : undefined;
            resourceInputs["trapHighCpuThreshold"] = state ? state.trapHighCpuThreshold : undefined;
            resourceInputs["trapLogFullThreshold"] = state ? state.trapLogFullThreshold : undefined;
            resourceInputs["trapLowMemoryThreshold"] = state ? state.trapLowMemoryThreshold : undefined;
            resourceInputs["trapTempAlarmThreshold"] = state ? state.trapTempAlarmThreshold : undefined;
            resourceInputs["trapTempWarningThreshold"] = state ? state.trapTempWarningThreshold : undefined;
        } else {
            const args = argsOrState as SystemsnmpSysinfoArgs | undefined;
            resourceInputs["contactInfo"] = args ? args.contactInfo : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["engineId"] = args ? args.engineId : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["trapHighCpuInterval"] = args ? args.trapHighCpuInterval : undefined;
            resourceInputs["trapHighCpuThreshold"] = args ? args.trapHighCpuThreshold : undefined;
            resourceInputs["trapLogFullThreshold"] = args ? args.trapLogFullThreshold : undefined;
            resourceInputs["trapLowMemoryThreshold"] = args ? args.trapLowMemoryThreshold : undefined;
            resourceInputs["trapTempAlarmThreshold"] = args ? args.trapTempAlarmThreshold : undefined;
            resourceInputs["trapTempWarningThreshold"] = args ? args.trapTempWarningThreshold : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SystemsnmpSysinfo.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SystemsnmpSysinfo resources.
 */
export interface SystemsnmpSysinfoState {
    contactInfo?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    engineId?: pulumi.Input<string>;
    location?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    trapHighCpuInterval?: pulumi.Input<string>;
    trapHighCpuThreshold?: pulumi.Input<number>;
    trapLogFullThreshold?: pulumi.Input<number>;
    trapLowMemoryThreshold?: pulumi.Input<number>;
    trapTempAlarmThreshold?: pulumi.Input<number>;
    trapTempWarningThreshold?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a SystemsnmpSysinfo resource.
 */
export interface SystemsnmpSysinfoArgs {
    contactInfo?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    engineId?: pulumi.Input<string>;
    location?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    trapHighCpuInterval?: pulumi.Input<string>;
    trapHighCpuThreshold?: pulumi.Input<number>;
    trapLogFullThreshold?: pulumi.Input<number>;
    trapLowMemoryThreshold?: pulumi.Input<number>;
    trapTempAlarmThreshold?: pulumi.Input<number>;
    trapTempWarningThreshold?: pulumi.Input<number>;
}
