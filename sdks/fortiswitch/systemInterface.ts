// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SystemInterface extends pulumi.CustomResource {
    /**
     * Get an existing SystemInterface resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SystemInterfaceState, opts?: pulumi.CustomResourceOptions): SystemInterface {
        return new SystemInterface(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortiswitch:index/systemInterface:SystemInterface';

    /**
     * Returns true if the given object is an instance of SystemInterface.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SystemInterface {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SystemInterface.__pulumiType;
    }

    public readonly alias!: pulumi.Output<string>;
    public readonly allowaccess!: pulumi.Output<string>;
    public readonly authType!: pulumi.Output<string>;
    public readonly autogenerated!: pulumi.Output<string>;
    public readonly bfd!: pulumi.Output<string>;
    public readonly bfdDesiredMinTx!: pulumi.Output<number>;
    public readonly bfdDetectMult!: pulumi.Output<number>;
    public readonly bfdRequiredMinRx!: pulumi.Output<number>;
    public readonly cliConnStatus!: pulumi.Output<string>;
    public readonly defaultgw!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string>;
    public readonly detectprotocol!: pulumi.Output<string>;
    public readonly detectserver!: pulumi.Output<string>;
    public readonly dhcpClientIdentifier!: pulumi.Output<string>;
    public readonly dhcpClientStatus!: pulumi.Output<string>;
    public readonly dhcpExpire!: pulumi.Output<number>;
    public readonly dhcpRelayIp!: pulumi.Output<string>;
    public readonly dhcpRelayOption82!: pulumi.Output<string>;
    public readonly dhcpRelayService!: pulumi.Output<string>;
    public readonly dhcpVendorSpecificOption!: pulumi.Output<string>;
    public readonly distance!: pulumi.Output<number>;
    public readonly dnsServerOverride!: pulumi.Output<string>;
    public readonly dynamicDns1!: pulumi.Output<string>;
    public readonly dynamicDns2!: pulumi.Output<string>;
    public readonly dynamicSortSubtable!: pulumi.Output<string | undefined>;
    public readonly dynamicgw!: pulumi.Output<string>;
    public readonly forwardDomain!: pulumi.Output<number>;
    public readonly gwdetect!: pulumi.Output<string>;
    public readonly haPriority!: pulumi.Output<number>;
    public readonly icmpRedirect!: pulumi.Output<string>;
    public readonly interface!: pulumi.Output<string>;
    public readonly ip!: pulumi.Output<string>;
    public readonly ipv6!: pulumi.Output<outputs.SystemInterfaceIpv6 | undefined>;
    public readonly l2Interface!: pulumi.Output<string>;
    public readonly macaddr!: pulumi.Output<string>;
    public readonly mode!: pulumi.Output<string>;
    public readonly mtu!: pulumi.Output<number>;
    public readonly mtuOverride!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly pingServStatus!: pulumi.Output<number>;
    public readonly priority!: pulumi.Output<number>;
    public readonly remoteIp!: pulumi.Output<string>;
    public readonly secondaryIp!: pulumi.Output<string>;
    public readonly secondaryips!: pulumi.Output<outputs.SystemInterfaceSecondaryip[] | undefined>;
    public readonly snmpIndex!: pulumi.Output<number>;
    public readonly speed!: pulumi.Output<string>;
    public readonly srcCheck!: pulumi.Output<string>;
    public readonly srcCheckAllowDefault!: pulumi.Output<string>;
    public readonly status!: pulumi.Output<string>;
    public readonly switch!: pulumi.Output<string>;
    public readonly switchMembers!: pulumi.Output<outputs.SystemInterfaceSwitchMember[] | undefined>;
    public readonly type!: pulumi.Output<string>;
    public readonly vdom!: pulumi.Output<string>;
    public readonly vlanforward!: pulumi.Output<string>;
    public readonly vlanid!: pulumi.Output<number>;
    public readonly vrf!: pulumi.Output<string>;
    public readonly vrrpVirtualMac!: pulumi.Output<string>;
    public readonly vrrps!: pulumi.Output<outputs.SystemInterfaceVrrp[] | undefined>;
    public readonly weight!: pulumi.Output<number>;

    /**
     * Create a SystemInterface resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SystemInterfaceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SystemInterfaceArgs | SystemInterfaceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SystemInterfaceState | undefined;
            resourceInputs["alias"] = state ? state.alias : undefined;
            resourceInputs["allowaccess"] = state ? state.allowaccess : undefined;
            resourceInputs["authType"] = state ? state.authType : undefined;
            resourceInputs["autogenerated"] = state ? state.autogenerated : undefined;
            resourceInputs["bfd"] = state ? state.bfd : undefined;
            resourceInputs["bfdDesiredMinTx"] = state ? state.bfdDesiredMinTx : undefined;
            resourceInputs["bfdDetectMult"] = state ? state.bfdDetectMult : undefined;
            resourceInputs["bfdRequiredMinRx"] = state ? state.bfdRequiredMinRx : undefined;
            resourceInputs["cliConnStatus"] = state ? state.cliConnStatus : undefined;
            resourceInputs["defaultgw"] = state ? state.defaultgw : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["detectprotocol"] = state ? state.detectprotocol : undefined;
            resourceInputs["detectserver"] = state ? state.detectserver : undefined;
            resourceInputs["dhcpClientIdentifier"] = state ? state.dhcpClientIdentifier : undefined;
            resourceInputs["dhcpClientStatus"] = state ? state.dhcpClientStatus : undefined;
            resourceInputs["dhcpExpire"] = state ? state.dhcpExpire : undefined;
            resourceInputs["dhcpRelayIp"] = state ? state.dhcpRelayIp : undefined;
            resourceInputs["dhcpRelayOption82"] = state ? state.dhcpRelayOption82 : undefined;
            resourceInputs["dhcpRelayService"] = state ? state.dhcpRelayService : undefined;
            resourceInputs["dhcpVendorSpecificOption"] = state ? state.dhcpVendorSpecificOption : undefined;
            resourceInputs["distance"] = state ? state.distance : undefined;
            resourceInputs["dnsServerOverride"] = state ? state.dnsServerOverride : undefined;
            resourceInputs["dynamicDns1"] = state ? state.dynamicDns1 : undefined;
            resourceInputs["dynamicDns2"] = state ? state.dynamicDns2 : undefined;
            resourceInputs["dynamicSortSubtable"] = state ? state.dynamicSortSubtable : undefined;
            resourceInputs["dynamicgw"] = state ? state.dynamicgw : undefined;
            resourceInputs["forwardDomain"] = state ? state.forwardDomain : undefined;
            resourceInputs["gwdetect"] = state ? state.gwdetect : undefined;
            resourceInputs["haPriority"] = state ? state.haPriority : undefined;
            resourceInputs["icmpRedirect"] = state ? state.icmpRedirect : undefined;
            resourceInputs["interface"] = state ? state.interface : undefined;
            resourceInputs["ip"] = state ? state.ip : undefined;
            resourceInputs["ipv6"] = state ? state.ipv6 : undefined;
            resourceInputs["l2Interface"] = state ? state.l2Interface : undefined;
            resourceInputs["macaddr"] = state ? state.macaddr : undefined;
            resourceInputs["mode"] = state ? state.mode : undefined;
            resourceInputs["mtu"] = state ? state.mtu : undefined;
            resourceInputs["mtuOverride"] = state ? state.mtuOverride : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["pingServStatus"] = state ? state.pingServStatus : undefined;
            resourceInputs["priority"] = state ? state.priority : undefined;
            resourceInputs["remoteIp"] = state ? state.remoteIp : undefined;
            resourceInputs["secondaryIp"] = state ? state.secondaryIp : undefined;
            resourceInputs["secondaryips"] = state ? state.secondaryips : undefined;
            resourceInputs["snmpIndex"] = state ? state.snmpIndex : undefined;
            resourceInputs["speed"] = state ? state.speed : undefined;
            resourceInputs["srcCheck"] = state ? state.srcCheck : undefined;
            resourceInputs["srcCheckAllowDefault"] = state ? state.srcCheckAllowDefault : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["switch"] = state ? state.switch : undefined;
            resourceInputs["switchMembers"] = state ? state.switchMembers : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["vdom"] = state ? state.vdom : undefined;
            resourceInputs["vlanforward"] = state ? state.vlanforward : undefined;
            resourceInputs["vlanid"] = state ? state.vlanid : undefined;
            resourceInputs["vrf"] = state ? state.vrf : undefined;
            resourceInputs["vrrpVirtualMac"] = state ? state.vrrpVirtualMac : undefined;
            resourceInputs["vrrps"] = state ? state.vrrps : undefined;
            resourceInputs["weight"] = state ? state.weight : undefined;
        } else {
            const args = argsOrState as SystemInterfaceArgs | undefined;
            resourceInputs["alias"] = args ? args.alias : undefined;
            resourceInputs["allowaccess"] = args ? args.allowaccess : undefined;
            resourceInputs["authType"] = args ? args.authType : undefined;
            resourceInputs["autogenerated"] = args ? args.autogenerated : undefined;
            resourceInputs["bfd"] = args ? args.bfd : undefined;
            resourceInputs["bfdDesiredMinTx"] = args ? args.bfdDesiredMinTx : undefined;
            resourceInputs["bfdDetectMult"] = args ? args.bfdDetectMult : undefined;
            resourceInputs["bfdRequiredMinRx"] = args ? args.bfdRequiredMinRx : undefined;
            resourceInputs["cliConnStatus"] = args ? args.cliConnStatus : undefined;
            resourceInputs["defaultgw"] = args ? args.defaultgw : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["detectprotocol"] = args ? args.detectprotocol : undefined;
            resourceInputs["detectserver"] = args ? args.detectserver : undefined;
            resourceInputs["dhcpClientIdentifier"] = args ? args.dhcpClientIdentifier : undefined;
            resourceInputs["dhcpClientStatus"] = args ? args.dhcpClientStatus : undefined;
            resourceInputs["dhcpExpire"] = args ? args.dhcpExpire : undefined;
            resourceInputs["dhcpRelayIp"] = args ? args.dhcpRelayIp : undefined;
            resourceInputs["dhcpRelayOption82"] = args ? args.dhcpRelayOption82 : undefined;
            resourceInputs["dhcpRelayService"] = args ? args.dhcpRelayService : undefined;
            resourceInputs["dhcpVendorSpecificOption"] = args ? args.dhcpVendorSpecificOption : undefined;
            resourceInputs["distance"] = args ? args.distance : undefined;
            resourceInputs["dnsServerOverride"] = args ? args.dnsServerOverride : undefined;
            resourceInputs["dynamicDns1"] = args ? args.dynamicDns1 : undefined;
            resourceInputs["dynamicDns2"] = args ? args.dynamicDns2 : undefined;
            resourceInputs["dynamicSortSubtable"] = args ? args.dynamicSortSubtable : undefined;
            resourceInputs["dynamicgw"] = args ? args.dynamicgw : undefined;
            resourceInputs["forwardDomain"] = args ? args.forwardDomain : undefined;
            resourceInputs["gwdetect"] = args ? args.gwdetect : undefined;
            resourceInputs["haPriority"] = args ? args.haPriority : undefined;
            resourceInputs["icmpRedirect"] = args ? args.icmpRedirect : undefined;
            resourceInputs["interface"] = args ? args.interface : undefined;
            resourceInputs["ip"] = args ? args.ip : undefined;
            resourceInputs["ipv6"] = args ? args.ipv6 : undefined;
            resourceInputs["l2Interface"] = args ? args.l2Interface : undefined;
            resourceInputs["macaddr"] = args ? args.macaddr : undefined;
            resourceInputs["mode"] = args ? args.mode : undefined;
            resourceInputs["mtu"] = args ? args.mtu : undefined;
            resourceInputs["mtuOverride"] = args ? args.mtuOverride : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["pingServStatus"] = args ? args.pingServStatus : undefined;
            resourceInputs["priority"] = args ? args.priority : undefined;
            resourceInputs["remoteIp"] = args ? args.remoteIp : undefined;
            resourceInputs["secondaryIp"] = args ? args.secondaryIp : undefined;
            resourceInputs["secondaryips"] = args ? args.secondaryips : undefined;
            resourceInputs["snmpIndex"] = args ? args.snmpIndex : undefined;
            resourceInputs["speed"] = args ? args.speed : undefined;
            resourceInputs["srcCheck"] = args ? args.srcCheck : undefined;
            resourceInputs["srcCheckAllowDefault"] = args ? args.srcCheckAllowDefault : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["switch"] = args ? args.switch : undefined;
            resourceInputs["switchMembers"] = args ? args.switchMembers : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["vdom"] = args ? args.vdom : undefined;
            resourceInputs["vlanforward"] = args ? args.vlanforward : undefined;
            resourceInputs["vlanid"] = args ? args.vlanid : undefined;
            resourceInputs["vrf"] = args ? args.vrf : undefined;
            resourceInputs["vrrpVirtualMac"] = args ? args.vrrpVirtualMac : undefined;
            resourceInputs["vrrps"] = args ? args.vrrps : undefined;
            resourceInputs["weight"] = args ? args.weight : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SystemInterface.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SystemInterface resources.
 */
export interface SystemInterfaceState {
    alias?: pulumi.Input<string>;
    allowaccess?: pulumi.Input<string>;
    authType?: pulumi.Input<string>;
    autogenerated?: pulumi.Input<string>;
    bfd?: pulumi.Input<string>;
    bfdDesiredMinTx?: pulumi.Input<number>;
    bfdDetectMult?: pulumi.Input<number>;
    bfdRequiredMinRx?: pulumi.Input<number>;
    cliConnStatus?: pulumi.Input<string>;
    defaultgw?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    detectprotocol?: pulumi.Input<string>;
    detectserver?: pulumi.Input<string>;
    dhcpClientIdentifier?: pulumi.Input<string>;
    dhcpClientStatus?: pulumi.Input<string>;
    dhcpExpire?: pulumi.Input<number>;
    dhcpRelayIp?: pulumi.Input<string>;
    dhcpRelayOption82?: pulumi.Input<string>;
    dhcpRelayService?: pulumi.Input<string>;
    dhcpVendorSpecificOption?: pulumi.Input<string>;
    distance?: pulumi.Input<number>;
    dnsServerOverride?: pulumi.Input<string>;
    dynamicDns1?: pulumi.Input<string>;
    dynamicDns2?: pulumi.Input<string>;
    dynamicSortSubtable?: pulumi.Input<string>;
    dynamicgw?: pulumi.Input<string>;
    forwardDomain?: pulumi.Input<number>;
    gwdetect?: pulumi.Input<string>;
    haPriority?: pulumi.Input<number>;
    icmpRedirect?: pulumi.Input<string>;
    interface?: pulumi.Input<string>;
    ip?: pulumi.Input<string>;
    ipv6?: pulumi.Input<inputs.SystemInterfaceIpv6>;
    l2Interface?: pulumi.Input<string>;
    macaddr?: pulumi.Input<string>;
    mode?: pulumi.Input<string>;
    mtu?: pulumi.Input<number>;
    mtuOverride?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    pingServStatus?: pulumi.Input<number>;
    priority?: pulumi.Input<number>;
    remoteIp?: pulumi.Input<string>;
    secondaryIp?: pulumi.Input<string>;
    secondaryips?: pulumi.Input<pulumi.Input<inputs.SystemInterfaceSecondaryip>[]>;
    snmpIndex?: pulumi.Input<number>;
    speed?: pulumi.Input<string>;
    srcCheck?: pulumi.Input<string>;
    srcCheckAllowDefault?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    switch?: pulumi.Input<string>;
    switchMembers?: pulumi.Input<pulumi.Input<inputs.SystemInterfaceSwitchMember>[]>;
    type?: pulumi.Input<string>;
    vdom?: pulumi.Input<string>;
    vlanforward?: pulumi.Input<string>;
    vlanid?: pulumi.Input<number>;
    vrf?: pulumi.Input<string>;
    vrrpVirtualMac?: pulumi.Input<string>;
    vrrps?: pulumi.Input<pulumi.Input<inputs.SystemInterfaceVrrp>[]>;
    weight?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a SystemInterface resource.
 */
export interface SystemInterfaceArgs {
    alias?: pulumi.Input<string>;
    allowaccess?: pulumi.Input<string>;
    authType?: pulumi.Input<string>;
    autogenerated?: pulumi.Input<string>;
    bfd?: pulumi.Input<string>;
    bfdDesiredMinTx?: pulumi.Input<number>;
    bfdDetectMult?: pulumi.Input<number>;
    bfdRequiredMinRx?: pulumi.Input<number>;
    cliConnStatus?: pulumi.Input<string>;
    defaultgw?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    detectprotocol?: pulumi.Input<string>;
    detectserver?: pulumi.Input<string>;
    dhcpClientIdentifier?: pulumi.Input<string>;
    dhcpClientStatus?: pulumi.Input<string>;
    dhcpExpire?: pulumi.Input<number>;
    dhcpRelayIp?: pulumi.Input<string>;
    dhcpRelayOption82?: pulumi.Input<string>;
    dhcpRelayService?: pulumi.Input<string>;
    dhcpVendorSpecificOption?: pulumi.Input<string>;
    distance?: pulumi.Input<number>;
    dnsServerOverride?: pulumi.Input<string>;
    dynamicDns1?: pulumi.Input<string>;
    dynamicDns2?: pulumi.Input<string>;
    dynamicSortSubtable?: pulumi.Input<string>;
    dynamicgw?: pulumi.Input<string>;
    forwardDomain?: pulumi.Input<number>;
    gwdetect?: pulumi.Input<string>;
    haPriority?: pulumi.Input<number>;
    icmpRedirect?: pulumi.Input<string>;
    interface?: pulumi.Input<string>;
    ip?: pulumi.Input<string>;
    ipv6?: pulumi.Input<inputs.SystemInterfaceIpv6>;
    l2Interface?: pulumi.Input<string>;
    macaddr?: pulumi.Input<string>;
    mode?: pulumi.Input<string>;
    mtu?: pulumi.Input<number>;
    mtuOverride?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    pingServStatus?: pulumi.Input<number>;
    priority?: pulumi.Input<number>;
    remoteIp?: pulumi.Input<string>;
    secondaryIp?: pulumi.Input<string>;
    secondaryips?: pulumi.Input<pulumi.Input<inputs.SystemInterfaceSecondaryip>[]>;
    snmpIndex?: pulumi.Input<number>;
    speed?: pulumi.Input<string>;
    srcCheck?: pulumi.Input<string>;
    srcCheckAllowDefault?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    switch?: pulumi.Input<string>;
    switchMembers?: pulumi.Input<pulumi.Input<inputs.SystemInterfaceSwitchMember>[]>;
    type?: pulumi.Input<string>;
    vdom?: pulumi.Input<string>;
    vlanforward?: pulumi.Input<string>;
    vlanid?: pulumi.Input<number>;
    vrf?: pulumi.Input<string>;
    vrrpVirtualMac?: pulumi.Input<string>;
    vrrps?: pulumi.Input<pulumi.Input<inputs.SystemInterfaceVrrp>[]>;
    weight?: pulumi.Input<number>;
}
