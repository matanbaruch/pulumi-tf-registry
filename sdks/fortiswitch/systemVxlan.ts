// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SystemVxlan extends pulumi.CustomResource {
    /**
     * Get an existing SystemVxlan resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SystemVxlanState, opts?: pulumi.CustomResourceOptions): SystemVxlan {
        return new SystemVxlan(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortiswitch:index/systemVxlan:SystemVxlan';

    /**
     * Returns true if the given object is an instance of SystemVxlan.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SystemVxlan {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SystemVxlan.__pulumiType;
    }

    public readonly dynamicSortSubtable!: pulumi.Output<string | undefined>;
    public readonly interface!: pulumi.Output<string>;
    public readonly ipVersion!: pulumi.Output<string>;
    public readonly multicastTtl!: pulumi.Output<number>;
    public readonly name!: pulumi.Output<string>;
    public readonly remoteIps!: pulumi.Output<outputs.SystemVxlanRemoteIp[] | undefined>;
    public readonly taggedVlans!: pulumi.Output<string>;
    public readonly vlanid!: pulumi.Output<number>;
    public readonly vni!: pulumi.Output<number>;

    /**
     * Create a SystemVxlan resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SystemVxlanArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SystemVxlanArgs | SystemVxlanState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SystemVxlanState | undefined;
            resourceInputs["dynamicSortSubtable"] = state ? state.dynamicSortSubtable : undefined;
            resourceInputs["interface"] = state ? state.interface : undefined;
            resourceInputs["ipVersion"] = state ? state.ipVersion : undefined;
            resourceInputs["multicastTtl"] = state ? state.multicastTtl : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["remoteIps"] = state ? state.remoteIps : undefined;
            resourceInputs["taggedVlans"] = state ? state.taggedVlans : undefined;
            resourceInputs["vlanid"] = state ? state.vlanid : undefined;
            resourceInputs["vni"] = state ? state.vni : undefined;
        } else {
            const args = argsOrState as SystemVxlanArgs | undefined;
            resourceInputs["dynamicSortSubtable"] = args ? args.dynamicSortSubtable : undefined;
            resourceInputs["interface"] = args ? args.interface : undefined;
            resourceInputs["ipVersion"] = args ? args.ipVersion : undefined;
            resourceInputs["multicastTtl"] = args ? args.multicastTtl : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["remoteIps"] = args ? args.remoteIps : undefined;
            resourceInputs["taggedVlans"] = args ? args.taggedVlans : undefined;
            resourceInputs["vlanid"] = args ? args.vlanid : undefined;
            resourceInputs["vni"] = args ? args.vni : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SystemVxlan.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SystemVxlan resources.
 */
export interface SystemVxlanState {
    dynamicSortSubtable?: pulumi.Input<string>;
    interface?: pulumi.Input<string>;
    ipVersion?: pulumi.Input<string>;
    multicastTtl?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    remoteIps?: pulumi.Input<pulumi.Input<inputs.SystemVxlanRemoteIp>[]>;
    taggedVlans?: pulumi.Input<string>;
    vlanid?: pulumi.Input<number>;
    vni?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a SystemVxlan resource.
 */
export interface SystemVxlanArgs {
    dynamicSortSubtable?: pulumi.Input<string>;
    interface?: pulumi.Input<string>;
    ipVersion?: pulumi.Input<string>;
    multicastTtl?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    remoteIps?: pulumi.Input<pulumi.Input<inputs.SystemVxlanRemoteIp>[]>;
    taggedVlans?: pulumi.Input<string>;
    vlanid?: pulumi.Input<number>;
    vni?: pulumi.Input<number>;
}
