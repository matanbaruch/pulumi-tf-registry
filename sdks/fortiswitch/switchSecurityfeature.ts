// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SwitchSecurityfeature extends pulumi.CustomResource {
    /**
     * Get an existing SwitchSecurityfeature resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SwitchSecurityfeatureState, opts?: pulumi.CustomResourceOptions): SwitchSecurityfeature {
        return new SwitchSecurityfeature(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortiswitch:index/switchSecurityfeature:SwitchSecurityfeature';

    /**
     * Returns true if the given object is an instance of SwitchSecurityfeature.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SwitchSecurityfeature {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SwitchSecurityfeature.__pulumiType;
    }

    public readonly allowMcastSa!: pulumi.Output<string>;
    public readonly allowSaMacAllZero!: pulumi.Output<string>;
    public readonly macsaEqMacda!: pulumi.Output<string>;
    public readonly sipEqDip!: pulumi.Output<string>;
    public readonly tcpFlag!: pulumi.Output<string>;
    public readonly tcpFlagFup!: pulumi.Output<string>;
    public readonly tcpFlagSf!: pulumi.Output<string>;
    public readonly tcpHdrPartial!: pulumi.Output<string>;
    public readonly tcpPortEq!: pulumi.Output<string>;
    public readonly udpPortEq!: pulumi.Output<string>;
    public readonly v4FirstFrag!: pulumi.Output<string>;

    /**
     * Create a SwitchSecurityfeature resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SwitchSecurityfeatureArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SwitchSecurityfeatureArgs | SwitchSecurityfeatureState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SwitchSecurityfeatureState | undefined;
            resourceInputs["allowMcastSa"] = state ? state.allowMcastSa : undefined;
            resourceInputs["allowSaMacAllZero"] = state ? state.allowSaMacAllZero : undefined;
            resourceInputs["macsaEqMacda"] = state ? state.macsaEqMacda : undefined;
            resourceInputs["sipEqDip"] = state ? state.sipEqDip : undefined;
            resourceInputs["tcpFlag"] = state ? state.tcpFlag : undefined;
            resourceInputs["tcpFlagFup"] = state ? state.tcpFlagFup : undefined;
            resourceInputs["tcpFlagSf"] = state ? state.tcpFlagSf : undefined;
            resourceInputs["tcpHdrPartial"] = state ? state.tcpHdrPartial : undefined;
            resourceInputs["tcpPortEq"] = state ? state.tcpPortEq : undefined;
            resourceInputs["udpPortEq"] = state ? state.udpPortEq : undefined;
            resourceInputs["v4FirstFrag"] = state ? state.v4FirstFrag : undefined;
        } else {
            const args = argsOrState as SwitchSecurityfeatureArgs | undefined;
            resourceInputs["allowMcastSa"] = args ? args.allowMcastSa : undefined;
            resourceInputs["allowSaMacAllZero"] = args ? args.allowSaMacAllZero : undefined;
            resourceInputs["macsaEqMacda"] = args ? args.macsaEqMacda : undefined;
            resourceInputs["sipEqDip"] = args ? args.sipEqDip : undefined;
            resourceInputs["tcpFlag"] = args ? args.tcpFlag : undefined;
            resourceInputs["tcpFlagFup"] = args ? args.tcpFlagFup : undefined;
            resourceInputs["tcpFlagSf"] = args ? args.tcpFlagSf : undefined;
            resourceInputs["tcpHdrPartial"] = args ? args.tcpHdrPartial : undefined;
            resourceInputs["tcpPortEq"] = args ? args.tcpPortEq : undefined;
            resourceInputs["udpPortEq"] = args ? args.udpPortEq : undefined;
            resourceInputs["v4FirstFrag"] = args ? args.v4FirstFrag : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SwitchSecurityfeature.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SwitchSecurityfeature resources.
 */
export interface SwitchSecurityfeatureState {
    allowMcastSa?: pulumi.Input<string>;
    allowSaMacAllZero?: pulumi.Input<string>;
    macsaEqMacda?: pulumi.Input<string>;
    sipEqDip?: pulumi.Input<string>;
    tcpFlag?: pulumi.Input<string>;
    tcpFlagFup?: pulumi.Input<string>;
    tcpFlagSf?: pulumi.Input<string>;
    tcpHdrPartial?: pulumi.Input<string>;
    tcpPortEq?: pulumi.Input<string>;
    udpPortEq?: pulumi.Input<string>;
    v4FirstFrag?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SwitchSecurityfeature resource.
 */
export interface SwitchSecurityfeatureArgs {
    allowMcastSa?: pulumi.Input<string>;
    allowSaMacAllZero?: pulumi.Input<string>;
    macsaEqMacda?: pulumi.Input<string>;
    sipEqDip?: pulumi.Input<string>;
    tcpFlag?: pulumi.Input<string>;
    tcpFlagFup?: pulumi.Input<string>;
    tcpFlagSf?: pulumi.Input<string>;
    tcpHdrPartial?: pulumi.Input<string>;
    tcpPortEq?: pulumi.Input<string>;
    udpPortEq?: pulumi.Input<string>;
    v4FirstFrag?: pulumi.Input<string>;
}
