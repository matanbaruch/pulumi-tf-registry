// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SwitchRaguardpolicy extends pulumi.CustomResource {
    /**
     * Get an existing SwitchRaguardpolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SwitchRaguardpolicyState, opts?: pulumi.CustomResourceOptions): SwitchRaguardpolicy {
        return new SwitchRaguardpolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortiswitch:index/switchRaguardpolicy:SwitchRaguardpolicy';

    /**
     * Returns true if the given object is an instance of SwitchRaguardpolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SwitchRaguardpolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SwitchRaguardpolicy.__pulumiType;
    }

    public readonly deviceRole!: pulumi.Output<string>;
    public readonly managedFlag!: pulumi.Output<string>;
    public readonly matchPrefix!: pulumi.Output<string>;
    public readonly matchSrcAddr!: pulumi.Output<string>;
    public readonly maxHopLimit!: pulumi.Output<number>;
    public readonly maxRouterPreference!: pulumi.Output<string>;
    public readonly minHopLimit!: pulumi.Output<number>;
    public readonly name!: pulumi.Output<string>;
    public readonly otherFlag!: pulumi.Output<string>;

    /**
     * Create a SwitchRaguardpolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SwitchRaguardpolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SwitchRaguardpolicyArgs | SwitchRaguardpolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SwitchRaguardpolicyState | undefined;
            resourceInputs["deviceRole"] = state ? state.deviceRole : undefined;
            resourceInputs["managedFlag"] = state ? state.managedFlag : undefined;
            resourceInputs["matchPrefix"] = state ? state.matchPrefix : undefined;
            resourceInputs["matchSrcAddr"] = state ? state.matchSrcAddr : undefined;
            resourceInputs["maxHopLimit"] = state ? state.maxHopLimit : undefined;
            resourceInputs["maxRouterPreference"] = state ? state.maxRouterPreference : undefined;
            resourceInputs["minHopLimit"] = state ? state.minHopLimit : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["otherFlag"] = state ? state.otherFlag : undefined;
        } else {
            const args = argsOrState as SwitchRaguardpolicyArgs | undefined;
            resourceInputs["deviceRole"] = args ? args.deviceRole : undefined;
            resourceInputs["managedFlag"] = args ? args.managedFlag : undefined;
            resourceInputs["matchPrefix"] = args ? args.matchPrefix : undefined;
            resourceInputs["matchSrcAddr"] = args ? args.matchSrcAddr : undefined;
            resourceInputs["maxHopLimit"] = args ? args.maxHopLimit : undefined;
            resourceInputs["maxRouterPreference"] = args ? args.maxRouterPreference : undefined;
            resourceInputs["minHopLimit"] = args ? args.minHopLimit : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["otherFlag"] = args ? args.otherFlag : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SwitchRaguardpolicy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SwitchRaguardpolicy resources.
 */
export interface SwitchRaguardpolicyState {
    deviceRole?: pulumi.Input<string>;
    managedFlag?: pulumi.Input<string>;
    matchPrefix?: pulumi.Input<string>;
    matchSrcAddr?: pulumi.Input<string>;
    maxHopLimit?: pulumi.Input<number>;
    maxRouterPreference?: pulumi.Input<string>;
    minHopLimit?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    otherFlag?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SwitchRaguardpolicy resource.
 */
export interface SwitchRaguardpolicyArgs {
    deviceRole?: pulumi.Input<string>;
    managedFlag?: pulumi.Input<string>;
    matchPrefix?: pulumi.Input<string>;
    matchSrcAddr?: pulumi.Input<string>;
    maxHopLimit?: pulumi.Input<number>;
    maxRouterPreference?: pulumi.Input<string>;
    minHopLimit?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    otherFlag?: pulumi.Input<string>;
}
