// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AlertemailSettingArgs, AlertemailSettingState } from "./alertemailSetting";
export type AlertemailSetting = import("./alertemailSetting").AlertemailSetting;
export const AlertemailSetting: typeof import("./alertemailSetting").AlertemailSetting = null as any;
utilities.lazyLoad(exports, ["AlertemailSetting"], () => require("./alertemailSetting"));

export { GetJsonGenericApiArgs, GetJsonGenericApiResult, GetJsonGenericApiOutputArgs } from "./getJsonGenericApi";
export const getJsonGenericApi: typeof import("./getJsonGenericApi").getJsonGenericApi = null as any;
export const getJsonGenericApiOutput: typeof import("./getJsonGenericApi").getJsonGenericApiOutput = null as any;
utilities.lazyLoad(exports, ["getJsonGenericApi","getJsonGenericApiOutput"], () => require("./getJsonGenericApi"));

export { GetRouterAccesslistArgs, GetRouterAccesslistResult, GetRouterAccesslistOutputArgs } from "./getRouterAccesslist";
export const getRouterAccesslist: typeof import("./getRouterAccesslist").getRouterAccesslist = null as any;
export const getRouterAccesslistOutput: typeof import("./getRouterAccesslist").getRouterAccesslistOutput = null as any;
utilities.lazyLoad(exports, ["getRouterAccesslist","getRouterAccesslistOutput"], () => require("./getRouterAccesslist"));

export { GetRouterAccesslist6Args, GetRouterAccesslist6Result, GetRouterAccesslist6OutputArgs } from "./getRouterAccesslist6";
export const getRouterAccesslist6: typeof import("./getRouterAccesslist6").getRouterAccesslist6 = null as any;
export const getRouterAccesslist6Output: typeof import("./getRouterAccesslist6").getRouterAccesslist6Output = null as any;
utilities.lazyLoad(exports, ["getRouterAccesslist6","getRouterAccesslist6Output"], () => require("./getRouterAccesslist6"));

export { GetRouterAccesslist6listArgs, GetRouterAccesslist6listResult, GetRouterAccesslist6listOutputArgs } from "./getRouterAccesslist6list";
export const getRouterAccesslist6list: typeof import("./getRouterAccesslist6list").getRouterAccesslist6list = null as any;
export const getRouterAccesslist6listOutput: typeof import("./getRouterAccesslist6list").getRouterAccesslist6listOutput = null as any;
utilities.lazyLoad(exports, ["getRouterAccesslist6list","getRouterAccesslist6listOutput"], () => require("./getRouterAccesslist6list"));

export { GetRouterAccesslistlistArgs, GetRouterAccesslistlistResult, GetRouterAccesslistlistOutputArgs } from "./getRouterAccesslistlist";
export const getRouterAccesslistlist: typeof import("./getRouterAccesslistlist").getRouterAccesslistlist = null as any;
export const getRouterAccesslistlistOutput: typeof import("./getRouterAccesslistlist").getRouterAccesslistlistOutput = null as any;
utilities.lazyLoad(exports, ["getRouterAccesslistlist","getRouterAccesslistlistOutput"], () => require("./getRouterAccesslistlist"));

export { GetRouterAspathlistArgs, GetRouterAspathlistResult, GetRouterAspathlistOutputArgs } from "./getRouterAspathlist";
export const getRouterAspathlist: typeof import("./getRouterAspathlist").getRouterAspathlist = null as any;
export const getRouterAspathlistOutput: typeof import("./getRouterAspathlist").getRouterAspathlistOutput = null as any;
utilities.lazyLoad(exports, ["getRouterAspathlist","getRouterAspathlistOutput"], () => require("./getRouterAspathlist"));

export { GetRouterAspathlistlistArgs, GetRouterAspathlistlistResult, GetRouterAspathlistlistOutputArgs } from "./getRouterAspathlistlist";
export const getRouterAspathlistlist: typeof import("./getRouterAspathlistlist").getRouterAspathlistlist = null as any;
export const getRouterAspathlistlistOutput: typeof import("./getRouterAspathlistlist").getRouterAspathlistlistOutput = null as any;
utilities.lazyLoad(exports, ["getRouterAspathlistlist","getRouterAspathlistlistOutput"], () => require("./getRouterAspathlistlist"));

export { GetRouterAuthpathArgs, GetRouterAuthpathResult, GetRouterAuthpathOutputArgs } from "./getRouterAuthpath";
export const getRouterAuthpath: typeof import("./getRouterAuthpath").getRouterAuthpath = null as any;
export const getRouterAuthpathOutput: typeof import("./getRouterAuthpath").getRouterAuthpathOutput = null as any;
utilities.lazyLoad(exports, ["getRouterAuthpath","getRouterAuthpathOutput"], () => require("./getRouterAuthpath"));

export { GetRouterAuthpathlistArgs, GetRouterAuthpathlistResult, GetRouterAuthpathlistOutputArgs } from "./getRouterAuthpathlist";
export const getRouterAuthpathlist: typeof import("./getRouterAuthpathlist").getRouterAuthpathlist = null as any;
export const getRouterAuthpathlistOutput: typeof import("./getRouterAuthpathlist").getRouterAuthpathlistOutput = null as any;
utilities.lazyLoad(exports, ["getRouterAuthpathlist","getRouterAuthpathlistOutput"], () => require("./getRouterAuthpathlist"));

export { GetRouterBgpArgs, GetRouterBgpResult, GetRouterBgpOutputArgs } from "./getRouterBgp";
export const getRouterBgp: typeof import("./getRouterBgp").getRouterBgp = null as any;
export const getRouterBgpOutput: typeof import("./getRouterBgp").getRouterBgpOutput = null as any;
utilities.lazyLoad(exports, ["getRouterBgp","getRouterBgpOutput"], () => require("./getRouterBgp"));

export { GetRouterCommunitylistArgs, GetRouterCommunitylistResult, GetRouterCommunitylistOutputArgs } from "./getRouterCommunitylist";
export const getRouterCommunitylist: typeof import("./getRouterCommunitylist").getRouterCommunitylist = null as any;
export const getRouterCommunitylistOutput: typeof import("./getRouterCommunitylist").getRouterCommunitylistOutput = null as any;
utilities.lazyLoad(exports, ["getRouterCommunitylist","getRouterCommunitylistOutput"], () => require("./getRouterCommunitylist"));

export { GetRouterCommunitylistlistArgs, GetRouterCommunitylistlistResult, GetRouterCommunitylistlistOutputArgs } from "./getRouterCommunitylistlist";
export const getRouterCommunitylistlist: typeof import("./getRouterCommunitylistlist").getRouterCommunitylistlist = null as any;
export const getRouterCommunitylistlistOutput: typeof import("./getRouterCommunitylistlist").getRouterCommunitylistlistOutput = null as any;
utilities.lazyLoad(exports, ["getRouterCommunitylistlist","getRouterCommunitylistlistOutput"], () => require("./getRouterCommunitylistlist"));

export { GetRouterIsisArgs, GetRouterIsisResult, GetRouterIsisOutputArgs } from "./getRouterIsis";
export const getRouterIsis: typeof import("./getRouterIsis").getRouterIsis = null as any;
export const getRouterIsisOutput: typeof import("./getRouterIsis").getRouterIsisOutput = null as any;
utilities.lazyLoad(exports, ["getRouterIsis","getRouterIsisOutput"], () => require("./getRouterIsis"));

export { GetRouterKeychainArgs, GetRouterKeychainResult, GetRouterKeychainOutputArgs } from "./getRouterKeychain";
export const getRouterKeychain: typeof import("./getRouterKeychain").getRouterKeychain = null as any;
export const getRouterKeychainOutput: typeof import("./getRouterKeychain").getRouterKeychainOutput = null as any;
utilities.lazyLoad(exports, ["getRouterKeychain","getRouterKeychainOutput"], () => require("./getRouterKeychain"));

export { GetRouterKeychainlistArgs, GetRouterKeychainlistResult, GetRouterKeychainlistOutputArgs } from "./getRouterKeychainlist";
export const getRouterKeychainlist: typeof import("./getRouterKeychainlist").getRouterKeychainlist = null as any;
export const getRouterKeychainlistOutput: typeof import("./getRouterKeychainlist").getRouterKeychainlistOutput = null as any;
utilities.lazyLoad(exports, ["getRouterKeychainlist","getRouterKeychainlistOutput"], () => require("./getRouterKeychainlist"));

export { GetRouterMulticastArgs, GetRouterMulticastResult, GetRouterMulticastOutputArgs } from "./getRouterMulticast";
export const getRouterMulticast: typeof import("./getRouterMulticast").getRouterMulticast = null as any;
export const getRouterMulticastOutput: typeof import("./getRouterMulticast").getRouterMulticastOutput = null as any;
utilities.lazyLoad(exports, ["getRouterMulticast","getRouterMulticastOutput"], () => require("./getRouterMulticast"));

export { GetRouterMulticastflowArgs, GetRouterMulticastflowResult, GetRouterMulticastflowOutputArgs } from "./getRouterMulticastflow";
export const getRouterMulticastflow: typeof import("./getRouterMulticastflow").getRouterMulticastflow = null as any;
export const getRouterMulticastflowOutput: typeof import("./getRouterMulticastflow").getRouterMulticastflowOutput = null as any;
utilities.lazyLoad(exports, ["getRouterMulticastflow","getRouterMulticastflowOutput"], () => require("./getRouterMulticastflow"));

export { GetRouterMulticastflowlistArgs, GetRouterMulticastflowlistResult, GetRouterMulticastflowlistOutputArgs } from "./getRouterMulticastflowlist";
export const getRouterMulticastflowlist: typeof import("./getRouterMulticastflowlist").getRouterMulticastflowlist = null as any;
export const getRouterMulticastflowlistOutput: typeof import("./getRouterMulticastflowlist").getRouterMulticastflowlistOutput = null as any;
utilities.lazyLoad(exports, ["getRouterMulticastflowlist","getRouterMulticastflowlistOutput"], () => require("./getRouterMulticastflowlist"));

export { GetRouterOspfArgs, GetRouterOspfResult, GetRouterOspfOutputArgs } from "./getRouterOspf";
export const getRouterOspf: typeof import("./getRouterOspf").getRouterOspf = null as any;
export const getRouterOspfOutput: typeof import("./getRouterOspf").getRouterOspfOutput = null as any;
utilities.lazyLoad(exports, ["getRouterOspf","getRouterOspfOutput"], () => require("./getRouterOspf"));

export { GetRouterOspf6Args, GetRouterOspf6Result, GetRouterOspf6OutputArgs } from "./getRouterOspf6";
export const getRouterOspf6: typeof import("./getRouterOspf6").getRouterOspf6 = null as any;
export const getRouterOspf6Output: typeof import("./getRouterOspf6").getRouterOspf6Output = null as any;
utilities.lazyLoad(exports, ["getRouterOspf6","getRouterOspf6Output"], () => require("./getRouterOspf6"));

export { GetRouterPolicyArgs, GetRouterPolicyResult, GetRouterPolicyOutputArgs } from "./getRouterPolicy";
export const getRouterPolicy: typeof import("./getRouterPolicy").getRouterPolicy = null as any;
export const getRouterPolicyOutput: typeof import("./getRouterPolicy").getRouterPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getRouterPolicy","getRouterPolicyOutput"], () => require("./getRouterPolicy"));

export { GetRouterPolicylistArgs, GetRouterPolicylistResult, GetRouterPolicylistOutputArgs } from "./getRouterPolicylist";
export const getRouterPolicylist: typeof import("./getRouterPolicylist").getRouterPolicylist = null as any;
export const getRouterPolicylistOutput: typeof import("./getRouterPolicylist").getRouterPolicylistOutput = null as any;
utilities.lazyLoad(exports, ["getRouterPolicylist","getRouterPolicylistOutput"], () => require("./getRouterPolicylist"));

export { GetRouterPrefixlistArgs, GetRouterPrefixlistResult, GetRouterPrefixlistOutputArgs } from "./getRouterPrefixlist";
export const getRouterPrefixlist: typeof import("./getRouterPrefixlist").getRouterPrefixlist = null as any;
export const getRouterPrefixlistOutput: typeof import("./getRouterPrefixlist").getRouterPrefixlistOutput = null as any;
utilities.lazyLoad(exports, ["getRouterPrefixlist","getRouterPrefixlistOutput"], () => require("./getRouterPrefixlist"));

export { GetRouterPrefixlist6Args, GetRouterPrefixlist6Result, GetRouterPrefixlist6OutputArgs } from "./getRouterPrefixlist6";
export const getRouterPrefixlist6: typeof import("./getRouterPrefixlist6").getRouterPrefixlist6 = null as any;
export const getRouterPrefixlist6Output: typeof import("./getRouterPrefixlist6").getRouterPrefixlist6Output = null as any;
utilities.lazyLoad(exports, ["getRouterPrefixlist6","getRouterPrefixlist6Output"], () => require("./getRouterPrefixlist6"));

export { GetRouterPrefixlist6listArgs, GetRouterPrefixlist6listResult, GetRouterPrefixlist6listOutputArgs } from "./getRouterPrefixlist6list";
export const getRouterPrefixlist6list: typeof import("./getRouterPrefixlist6list").getRouterPrefixlist6list = null as any;
export const getRouterPrefixlist6listOutput: typeof import("./getRouterPrefixlist6list").getRouterPrefixlist6listOutput = null as any;
utilities.lazyLoad(exports, ["getRouterPrefixlist6list","getRouterPrefixlist6listOutput"], () => require("./getRouterPrefixlist6list"));

export { GetRouterPrefixlistlistArgs, GetRouterPrefixlistlistResult, GetRouterPrefixlistlistOutputArgs } from "./getRouterPrefixlistlist";
export const getRouterPrefixlistlist: typeof import("./getRouterPrefixlistlist").getRouterPrefixlistlist = null as any;
export const getRouterPrefixlistlistOutput: typeof import("./getRouterPrefixlistlist").getRouterPrefixlistlistOutput = null as any;
utilities.lazyLoad(exports, ["getRouterPrefixlistlist","getRouterPrefixlistlistOutput"], () => require("./getRouterPrefixlistlist"));

export { GetRouterRipArgs, GetRouterRipResult, GetRouterRipOutputArgs } from "./getRouterRip";
export const getRouterRip: typeof import("./getRouterRip").getRouterRip = null as any;
export const getRouterRipOutput: typeof import("./getRouterRip").getRouterRipOutput = null as any;
utilities.lazyLoad(exports, ["getRouterRip","getRouterRipOutput"], () => require("./getRouterRip"));

export { GetRouterRipngArgs, GetRouterRipngResult, GetRouterRipngOutputArgs } from "./getRouterRipng";
export const getRouterRipng: typeof import("./getRouterRipng").getRouterRipng = null as any;
export const getRouterRipngOutput: typeof import("./getRouterRipng").getRouterRipngOutput = null as any;
utilities.lazyLoad(exports, ["getRouterRipng","getRouterRipngOutput"], () => require("./getRouterRipng"));

export { GetRouterRoutemapArgs, GetRouterRoutemapResult, GetRouterRoutemapOutputArgs } from "./getRouterRoutemap";
export const getRouterRoutemap: typeof import("./getRouterRoutemap").getRouterRoutemap = null as any;
export const getRouterRoutemapOutput: typeof import("./getRouterRoutemap").getRouterRoutemapOutput = null as any;
utilities.lazyLoad(exports, ["getRouterRoutemap","getRouterRoutemapOutput"], () => require("./getRouterRoutemap"));

export { GetRouterRoutemaplistArgs, GetRouterRoutemaplistResult, GetRouterRoutemaplistOutputArgs } from "./getRouterRoutemaplist";
export const getRouterRoutemaplist: typeof import("./getRouterRoutemaplist").getRouterRoutemaplist = null as any;
export const getRouterRoutemaplistOutput: typeof import("./getRouterRoutemaplist").getRouterRoutemaplistOutput = null as any;
utilities.lazyLoad(exports, ["getRouterRoutemaplist","getRouterRoutemaplistOutput"], () => require("./getRouterRoutemaplist"));

export { GetRouterSettingArgs, GetRouterSettingResult, GetRouterSettingOutputArgs } from "./getRouterSetting";
export const getRouterSetting: typeof import("./getRouterSetting").getRouterSetting = null as any;
export const getRouterSettingOutput: typeof import("./getRouterSetting").getRouterSettingOutput = null as any;
utilities.lazyLoad(exports, ["getRouterSetting","getRouterSettingOutput"], () => require("./getRouterSetting"));

export { GetRouterStaticArgs, GetRouterStaticResult, GetRouterStaticOutputArgs } from "./getRouterStatic";
export const getRouterStatic: typeof import("./getRouterStatic").getRouterStatic = null as any;
export const getRouterStaticOutput: typeof import("./getRouterStatic").getRouterStaticOutput = null as any;
utilities.lazyLoad(exports, ["getRouterStatic","getRouterStaticOutput"], () => require("./getRouterStatic"));

export { GetRouterStatic6Args, GetRouterStatic6Result, GetRouterStatic6OutputArgs } from "./getRouterStatic6";
export const getRouterStatic6: typeof import("./getRouterStatic6").getRouterStatic6 = null as any;
export const getRouterStatic6Output: typeof import("./getRouterStatic6").getRouterStatic6Output = null as any;
utilities.lazyLoad(exports, ["getRouterStatic6","getRouterStatic6Output"], () => require("./getRouterStatic6"));

export { GetRouterStatic6listArgs, GetRouterStatic6listResult, GetRouterStatic6listOutputArgs } from "./getRouterStatic6list";
export const getRouterStatic6list: typeof import("./getRouterStatic6list").getRouterStatic6list = null as any;
export const getRouterStatic6listOutput: typeof import("./getRouterStatic6list").getRouterStatic6listOutput = null as any;
utilities.lazyLoad(exports, ["getRouterStatic6list","getRouterStatic6listOutput"], () => require("./getRouterStatic6list"));

export { GetRouterStaticlistArgs, GetRouterStaticlistResult, GetRouterStaticlistOutputArgs } from "./getRouterStaticlist";
export const getRouterStaticlist: typeof import("./getRouterStaticlist").getRouterStaticlist = null as any;
export const getRouterStaticlistOutput: typeof import("./getRouterStaticlist").getRouterStaticlistOutput = null as any;
utilities.lazyLoad(exports, ["getRouterStaticlist","getRouterStaticlistOutput"], () => require("./getRouterStaticlist"));

export { GetRouterbgpNeighborArgs, GetRouterbgpNeighborResult, GetRouterbgpNeighborOutputArgs } from "./getRouterbgpNeighbor";
export const getRouterbgpNeighbor: typeof import("./getRouterbgpNeighbor").getRouterbgpNeighbor = null as any;
export const getRouterbgpNeighborOutput: typeof import("./getRouterbgpNeighbor").getRouterbgpNeighborOutput = null as any;
utilities.lazyLoad(exports, ["getRouterbgpNeighbor","getRouterbgpNeighborOutput"], () => require("./getRouterbgpNeighbor"));

export { GetRouterbgpNeighborlistArgs, GetRouterbgpNeighborlistResult, GetRouterbgpNeighborlistOutputArgs } from "./getRouterbgpNeighborlist";
export const getRouterbgpNeighborlist: typeof import("./getRouterbgpNeighborlist").getRouterbgpNeighborlist = null as any;
export const getRouterbgpNeighborlistOutput: typeof import("./getRouterbgpNeighborlist").getRouterbgpNeighborlistOutput = null as any;
utilities.lazyLoad(exports, ["getRouterbgpNeighborlist","getRouterbgpNeighborlistOutput"], () => require("./getRouterbgpNeighborlist"));

export { GetSystemAccprofileArgs, GetSystemAccprofileResult, GetSystemAccprofileOutputArgs } from "./getSystemAccprofile";
export const getSystemAccprofile: typeof import("./getSystemAccprofile").getSystemAccprofile = null as any;
export const getSystemAccprofileOutput: typeof import("./getSystemAccprofile").getSystemAccprofileOutput = null as any;
utilities.lazyLoad(exports, ["getSystemAccprofile","getSystemAccprofileOutput"], () => require("./getSystemAccprofile"));

export { GetSystemAccprofilelistArgs, GetSystemAccprofilelistResult, GetSystemAccprofilelistOutputArgs } from "./getSystemAccprofilelist";
export const getSystemAccprofilelist: typeof import("./getSystemAccprofilelist").getSystemAccprofilelist = null as any;
export const getSystemAccprofilelistOutput: typeof import("./getSystemAccprofilelist").getSystemAccprofilelistOutput = null as any;
utilities.lazyLoad(exports, ["getSystemAccprofilelist","getSystemAccprofilelistOutput"], () => require("./getSystemAccprofilelist"));

export { GetSystemAdminArgs, GetSystemAdminResult, GetSystemAdminOutputArgs } from "./getSystemAdmin";
export const getSystemAdmin: typeof import("./getSystemAdmin").getSystemAdmin = null as any;
export const getSystemAdminOutput: typeof import("./getSystemAdmin").getSystemAdminOutput = null as any;
utilities.lazyLoad(exports, ["getSystemAdmin","getSystemAdminOutput"], () => require("./getSystemAdmin"));

export { GetSystemAdminlistArgs, GetSystemAdminlistResult, GetSystemAdminlistOutputArgs } from "./getSystemAdminlist";
export const getSystemAdminlist: typeof import("./getSystemAdminlist").getSystemAdminlist = null as any;
export const getSystemAdminlistOutput: typeof import("./getSystemAdminlist").getSystemAdminlistOutput = null as any;
utilities.lazyLoad(exports, ["getSystemAdminlist","getSystemAdminlistOutput"], () => require("./getSystemAdminlist"));

export { GetSystemArptableArgs, GetSystemArptableResult, GetSystemArptableOutputArgs } from "./getSystemArptable";
export const getSystemArptable: typeof import("./getSystemArptable").getSystemArptable = null as any;
export const getSystemArptableOutput: typeof import("./getSystemArptable").getSystemArptableOutput = null as any;
utilities.lazyLoad(exports, ["getSystemArptable","getSystemArptableOutput"], () => require("./getSystemArptable"));

export { GetSystemArptablelistArgs, GetSystemArptablelistResult, GetSystemArptablelistOutputArgs } from "./getSystemArptablelist";
export const getSystemArptablelist: typeof import("./getSystemArptablelist").getSystemArptablelist = null as any;
export const getSystemArptablelistOutput: typeof import("./getSystemArptablelist").getSystemArptablelistOutput = null as any;
utilities.lazyLoad(exports, ["getSystemArptablelist","getSystemArptablelistOutput"], () => require("./getSystemArptablelist"));

export { GetSystemAutomationactionArgs, GetSystemAutomationactionResult, GetSystemAutomationactionOutputArgs } from "./getSystemAutomationaction";
export const getSystemAutomationaction: typeof import("./getSystemAutomationaction").getSystemAutomationaction = null as any;
export const getSystemAutomationactionOutput: typeof import("./getSystemAutomationaction").getSystemAutomationactionOutput = null as any;
utilities.lazyLoad(exports, ["getSystemAutomationaction","getSystemAutomationactionOutput"], () => require("./getSystemAutomationaction"));

export { GetSystemAutomationactionlistArgs, GetSystemAutomationactionlistResult, GetSystemAutomationactionlistOutputArgs } from "./getSystemAutomationactionlist";
export const getSystemAutomationactionlist: typeof import("./getSystemAutomationactionlist").getSystemAutomationactionlist = null as any;
export const getSystemAutomationactionlistOutput: typeof import("./getSystemAutomationactionlist").getSystemAutomationactionlistOutput = null as any;
utilities.lazyLoad(exports, ["getSystemAutomationactionlist","getSystemAutomationactionlistOutput"], () => require("./getSystemAutomationactionlist"));

export { GetSystemAutomationdestinationArgs, GetSystemAutomationdestinationResult, GetSystemAutomationdestinationOutputArgs } from "./getSystemAutomationdestination";
export const getSystemAutomationdestination: typeof import("./getSystemAutomationdestination").getSystemAutomationdestination = null as any;
export const getSystemAutomationdestinationOutput: typeof import("./getSystemAutomationdestination").getSystemAutomationdestinationOutput = null as any;
utilities.lazyLoad(exports, ["getSystemAutomationdestination","getSystemAutomationdestinationOutput"], () => require("./getSystemAutomationdestination"));

export { GetSystemAutomationdestinationlistArgs, GetSystemAutomationdestinationlistResult, GetSystemAutomationdestinationlistOutputArgs } from "./getSystemAutomationdestinationlist";
export const getSystemAutomationdestinationlist: typeof import("./getSystemAutomationdestinationlist").getSystemAutomationdestinationlist = null as any;
export const getSystemAutomationdestinationlistOutput: typeof import("./getSystemAutomationdestinationlist").getSystemAutomationdestinationlistOutput = null as any;
utilities.lazyLoad(exports, ["getSystemAutomationdestinationlist","getSystemAutomationdestinationlistOutput"], () => require("./getSystemAutomationdestinationlist"));

export { GetSystemAutomationtriggerArgs, GetSystemAutomationtriggerResult, GetSystemAutomationtriggerOutputArgs } from "./getSystemAutomationtrigger";
export const getSystemAutomationtrigger: typeof import("./getSystemAutomationtrigger").getSystemAutomationtrigger = null as any;
export const getSystemAutomationtriggerOutput: typeof import("./getSystemAutomationtrigger").getSystemAutomationtriggerOutput = null as any;
utilities.lazyLoad(exports, ["getSystemAutomationtrigger","getSystemAutomationtriggerOutput"], () => require("./getSystemAutomationtrigger"));

export { GetSystemAutomationtriggerlistArgs, GetSystemAutomationtriggerlistResult, GetSystemAutomationtriggerlistOutputArgs } from "./getSystemAutomationtriggerlist";
export const getSystemAutomationtriggerlist: typeof import("./getSystemAutomationtriggerlist").getSystemAutomationtriggerlist = null as any;
export const getSystemAutomationtriggerlistOutput: typeof import("./getSystemAutomationtriggerlist").getSystemAutomationtriggerlistOutput = null as any;
utilities.lazyLoad(exports, ["getSystemAutomationtriggerlist","getSystemAutomationtriggerlistOutput"], () => require("./getSystemAutomationtriggerlist"));

export { GetSystemAutoscriptArgs, GetSystemAutoscriptResult, GetSystemAutoscriptOutputArgs } from "./getSystemAutoscript";
export const getSystemAutoscript: typeof import("./getSystemAutoscript").getSystemAutoscript = null as any;
export const getSystemAutoscriptOutput: typeof import("./getSystemAutoscript").getSystemAutoscriptOutput = null as any;
utilities.lazyLoad(exports, ["getSystemAutoscript","getSystemAutoscriptOutput"], () => require("./getSystemAutoscript"));

export { GetSystemAutoscriptlistArgs, GetSystemAutoscriptlistResult, GetSystemAutoscriptlistOutputArgs } from "./getSystemAutoscriptlist";
export const getSystemAutoscriptlist: typeof import("./getSystemAutoscriptlist").getSystemAutoscriptlist = null as any;
export const getSystemAutoscriptlistOutput: typeof import("./getSystemAutoscriptlist").getSystemAutoscriptlistOutput = null as any;
utilities.lazyLoad(exports, ["getSystemAutoscriptlist","getSystemAutoscriptlistOutput"], () => require("./getSystemAutoscriptlist"));

export { GetSystemCentralmanagementArgs, GetSystemCentralmanagementResult, GetSystemCentralmanagementOutputArgs } from "./getSystemCentralmanagement";
export const getSystemCentralmanagement: typeof import("./getSystemCentralmanagement").getSystemCentralmanagement = null as any;
export const getSystemCentralmanagementOutput: typeof import("./getSystemCentralmanagement").getSystemCentralmanagementOutput = null as any;
utilities.lazyLoad(exports, ["getSystemCentralmanagement","getSystemCentralmanagementOutput"], () => require("./getSystemCentralmanagement"));

export { GetSystemConsoleArgs, GetSystemConsoleResult, GetSystemConsoleOutputArgs } from "./getSystemConsole";
export const getSystemConsole: typeof import("./getSystemConsole").getSystemConsole = null as any;
export const getSystemConsoleOutput: typeof import("./getSystemConsole").getSystemConsoleOutput = null as any;
utilities.lazyLoad(exports, ["getSystemConsole","getSystemConsoleOutput"], () => require("./getSystemConsole"));

export { GetSystemDnsArgs, GetSystemDnsResult, GetSystemDnsOutputArgs } from "./getSystemDns";
export const getSystemDns: typeof import("./getSystemDns").getSystemDns = null as any;
export const getSystemDnsOutput: typeof import("./getSystemDns").getSystemDnsOutput = null as any;
utilities.lazyLoad(exports, ["getSystemDns","getSystemDnsOutput"], () => require("./getSystemDns"));

export { GetSystemDnsdatabaseArgs, GetSystemDnsdatabaseResult, GetSystemDnsdatabaseOutputArgs } from "./getSystemDnsdatabase";
export const getSystemDnsdatabase: typeof import("./getSystemDnsdatabase").getSystemDnsdatabase = null as any;
export const getSystemDnsdatabaseOutput: typeof import("./getSystemDnsdatabase").getSystemDnsdatabaseOutput = null as any;
utilities.lazyLoad(exports, ["getSystemDnsdatabase","getSystemDnsdatabaseOutput"], () => require("./getSystemDnsdatabase"));

export { GetSystemDnsdatabaselistArgs, GetSystemDnsdatabaselistResult, GetSystemDnsdatabaselistOutputArgs } from "./getSystemDnsdatabaselist";
export const getSystemDnsdatabaselist: typeof import("./getSystemDnsdatabaselist").getSystemDnsdatabaselist = null as any;
export const getSystemDnsdatabaselistOutput: typeof import("./getSystemDnsdatabaselist").getSystemDnsdatabaselistOutput = null as any;
utilities.lazyLoad(exports, ["getSystemDnsdatabaselist","getSystemDnsdatabaselistOutput"], () => require("./getSystemDnsdatabaselist"));

export { GetSystemDnsserverArgs, GetSystemDnsserverResult, GetSystemDnsserverOutputArgs } from "./getSystemDnsserver";
export const getSystemDnsserver: typeof import("./getSystemDnsserver").getSystemDnsserver = null as any;
export const getSystemDnsserverOutput: typeof import("./getSystemDnsserver").getSystemDnsserverOutput = null as any;
utilities.lazyLoad(exports, ["getSystemDnsserver","getSystemDnsserverOutput"], () => require("./getSystemDnsserver"));

export { GetSystemDnsserverlistArgs, GetSystemDnsserverlistResult, GetSystemDnsserverlistOutputArgs } from "./getSystemDnsserverlist";
export const getSystemDnsserverlist: typeof import("./getSystemDnsserverlist").getSystemDnsserverlist = null as any;
export const getSystemDnsserverlistOutput: typeof import("./getSystemDnsserverlist").getSystemDnsserverlistOutput = null as any;
utilities.lazyLoad(exports, ["getSystemDnsserverlist","getSystemDnsserverlistOutput"], () => require("./getSystemDnsserverlist"));

export { GetSystemEmailserverArgs, GetSystemEmailserverResult, GetSystemEmailserverOutputArgs } from "./getSystemEmailserver";
export const getSystemEmailserver: typeof import("./getSystemEmailserver").getSystemEmailserver = null as any;
export const getSystemEmailserverOutput: typeof import("./getSystemEmailserver").getSystemEmailserverOutput = null as any;
utilities.lazyLoad(exports, ["getSystemEmailserver","getSystemEmailserverOutput"], () => require("./getSystemEmailserver"));

export { GetSystemFmArgs, GetSystemFmResult, GetSystemFmOutputArgs } from "./getSystemFm";
export const getSystemFm: typeof import("./getSystemFm").getSystemFm = null as any;
export const getSystemFmOutput: typeof import("./getSystemFm").getSystemFmOutput = null as any;
utilities.lazyLoad(exports, ["getSystemFm","getSystemFmOutput"], () => require("./getSystemFm"));

export { GetSystemFortiguardArgs, GetSystemFortiguardResult, GetSystemFortiguardOutputArgs } from "./getSystemFortiguard";
export const getSystemFortiguard: typeof import("./getSystemFortiguard").getSystemFortiguard = null as any;
export const getSystemFortiguardOutput: typeof import("./getSystemFortiguard").getSystemFortiguardOutput = null as any;
utilities.lazyLoad(exports, ["getSystemFortiguard","getSystemFortiguardOutput"], () => require("./getSystemFortiguard"));

export { GetSystemFortimanagerArgs, GetSystemFortimanagerResult, GetSystemFortimanagerOutputArgs } from "./getSystemFortimanager";
export const getSystemFortimanager: typeof import("./getSystemFortimanager").getSystemFortimanager = null as any;
export const getSystemFortimanagerOutput: typeof import("./getSystemFortimanager").getSystemFortimanagerOutput = null as any;
utilities.lazyLoad(exports, ["getSystemFortimanager","getSystemFortimanagerOutput"], () => require("./getSystemFortimanager"));

export { GetSystemGlobalArgs, GetSystemGlobalResult, GetSystemGlobalOutputArgs } from "./getSystemGlobal";
export const getSystemGlobal: typeof import("./getSystemGlobal").getSystemGlobal = null as any;
export const getSystemGlobalOutput: typeof import("./getSystemGlobal").getSystemGlobalOutput = null as any;
utilities.lazyLoad(exports, ["getSystemGlobal","getSystemGlobalOutput"], () => require("./getSystemGlobal"));

export { GetSystemInterfaceArgs, GetSystemInterfaceResult, GetSystemInterfaceOutputArgs } from "./getSystemInterface";
export const getSystemInterface: typeof import("./getSystemInterface").getSystemInterface = null as any;
export const getSystemInterfaceOutput: typeof import("./getSystemInterface").getSystemInterfaceOutput = null as any;
utilities.lazyLoad(exports, ["getSystemInterface","getSystemInterfaceOutput"], () => require("./getSystemInterface"));

export { GetSystemInterfacelistArgs, GetSystemInterfacelistResult, GetSystemInterfacelistOutputArgs } from "./getSystemInterfacelist";
export const getSystemInterfacelist: typeof import("./getSystemInterfacelist").getSystemInterfacelist = null as any;
export const getSystemInterfacelistOutput: typeof import("./getSystemInterfacelist").getSystemInterfacelistOutput = null as any;
utilities.lazyLoad(exports, ["getSystemInterfacelist","getSystemInterfacelistOutput"], () => require("./getSystemInterfacelist"));

export { GetSystemIpv6neighborcacheArgs, GetSystemIpv6neighborcacheResult, GetSystemIpv6neighborcacheOutputArgs } from "./getSystemIpv6neighborcache";
export const getSystemIpv6neighborcache: typeof import("./getSystemIpv6neighborcache").getSystemIpv6neighborcache = null as any;
export const getSystemIpv6neighborcacheOutput: typeof import("./getSystemIpv6neighborcache").getSystemIpv6neighborcacheOutput = null as any;
utilities.lazyLoad(exports, ["getSystemIpv6neighborcache","getSystemIpv6neighborcacheOutput"], () => require("./getSystemIpv6neighborcache"));

export { GetSystemIpv6neighborcachelistArgs, GetSystemIpv6neighborcachelistResult, GetSystemIpv6neighborcachelistOutputArgs } from "./getSystemIpv6neighborcachelist";
export const getSystemIpv6neighborcachelist: typeof import("./getSystemIpv6neighborcachelist").getSystemIpv6neighborcachelist = null as any;
export const getSystemIpv6neighborcachelistOutput: typeof import("./getSystemIpv6neighborcachelist").getSystemIpv6neighborcachelistOutput = null as any;
utilities.lazyLoad(exports, ["getSystemIpv6neighborcachelist","getSystemIpv6neighborcachelistOutput"], () => require("./getSystemIpv6neighborcachelist"));

export { GetSystemLinkmonitorArgs, GetSystemLinkmonitorResult, GetSystemLinkmonitorOutputArgs } from "./getSystemLinkmonitor";
export const getSystemLinkmonitor: typeof import("./getSystemLinkmonitor").getSystemLinkmonitor = null as any;
export const getSystemLinkmonitorOutput: typeof import("./getSystemLinkmonitor").getSystemLinkmonitorOutput = null as any;
utilities.lazyLoad(exports, ["getSystemLinkmonitor","getSystemLinkmonitorOutput"], () => require("./getSystemLinkmonitor"));

export { GetSystemLinkmonitorlistArgs, GetSystemLinkmonitorlistResult, GetSystemLinkmonitorlistOutputArgs } from "./getSystemLinkmonitorlist";
export const getSystemLinkmonitorlist: typeof import("./getSystemLinkmonitorlist").getSystemLinkmonitorlist = null as any;
export const getSystemLinkmonitorlistOutput: typeof import("./getSystemLinkmonitorlist").getSystemLinkmonitorlistOutput = null as any;
utilities.lazyLoad(exports, ["getSystemLinkmonitorlist","getSystemLinkmonitorlistOutput"], () => require("./getSystemLinkmonitorlist"));

export { GetSystemManagementtunnelArgs, GetSystemManagementtunnelResult, GetSystemManagementtunnelOutputArgs } from "./getSystemManagementtunnel";
export const getSystemManagementtunnel: typeof import("./getSystemManagementtunnel").getSystemManagementtunnel = null as any;
export const getSystemManagementtunnelOutput: typeof import("./getSystemManagementtunnel").getSystemManagementtunnelOutput = null as any;
utilities.lazyLoad(exports, ["getSystemManagementtunnel","getSystemManagementtunnelOutput"], () => require("./getSystemManagementtunnel"));

export { GetSystemNtpArgs, GetSystemNtpResult, GetSystemNtpOutputArgs } from "./getSystemNtp";
export const getSystemNtp: typeof import("./getSystemNtp").getSystemNtp = null as any;
export const getSystemNtpOutput: typeof import("./getSystemNtp").getSystemNtpOutput = null as any;
utilities.lazyLoad(exports, ["getSystemNtp","getSystemNtpOutput"], () => require("./getSystemNtp"));

export { GetSystemPasswordpolicyArgs, GetSystemPasswordpolicyResult, GetSystemPasswordpolicyOutputArgs } from "./getSystemPasswordpolicy";
export const getSystemPasswordpolicy: typeof import("./getSystemPasswordpolicy").getSystemPasswordpolicy = null as any;
export const getSystemPasswordpolicyOutput: typeof import("./getSystemPasswordpolicy").getSystemPasswordpolicyOutput = null as any;
utilities.lazyLoad(exports, ["getSystemPasswordpolicy","getSystemPasswordpolicyOutput"], () => require("./getSystemPasswordpolicy"));

export { GetSystemProxyarpArgs, GetSystemProxyarpResult, GetSystemProxyarpOutputArgs } from "./getSystemProxyarp";
export const getSystemProxyarp: typeof import("./getSystemProxyarp").getSystemProxyarp = null as any;
export const getSystemProxyarpOutput: typeof import("./getSystemProxyarp").getSystemProxyarpOutput = null as any;
utilities.lazyLoad(exports, ["getSystemProxyarp","getSystemProxyarpOutput"], () => require("./getSystemProxyarp"));

export { GetSystemProxyarplistArgs, GetSystemProxyarplistResult, GetSystemProxyarplistOutputArgs } from "./getSystemProxyarplist";
export const getSystemProxyarplist: typeof import("./getSystemProxyarplist").getSystemProxyarplist = null as any;
export const getSystemProxyarplistOutput: typeof import("./getSystemProxyarplist").getSystemProxyarplistOutput = null as any;
utilities.lazyLoad(exports, ["getSystemProxyarplist","getSystemProxyarplistOutput"], () => require("./getSystemProxyarplist"));

export { GetSystemResourcelimitsArgs, GetSystemResourcelimitsResult, GetSystemResourcelimitsOutputArgs } from "./getSystemResourcelimits";
export const getSystemResourcelimits: typeof import("./getSystemResourcelimits").getSystemResourcelimits = null as any;
export const getSystemResourcelimitsOutput: typeof import("./getSystemResourcelimits").getSystemResourcelimitsOutput = null as any;
utilities.lazyLoad(exports, ["getSystemResourcelimits","getSystemResourcelimitsOutput"], () => require("./getSystemResourcelimits"));

export { GetSystemSessionttlArgs, GetSystemSessionttlResult, GetSystemSessionttlOutputArgs } from "./getSystemSessionttl";
export const getSystemSessionttl: typeof import("./getSystemSessionttl").getSystemSessionttl = null as any;
export const getSystemSessionttlOutput: typeof import("./getSystemSessionttl").getSystemSessionttlOutput = null as any;
utilities.lazyLoad(exports, ["getSystemSessionttl","getSystemSessionttlOutput"], () => require("./getSystemSessionttl"));

export { GetSystemSflowArgs, GetSystemSflowResult, GetSystemSflowOutputArgs } from "./getSystemSflow";
export const getSystemSflow: typeof import("./getSystemSflow").getSystemSflow = null as any;
export const getSystemSflowOutput: typeof import("./getSystemSflow").getSystemSflowOutput = null as any;
utilities.lazyLoad(exports, ["getSystemSflow","getSystemSflowOutput"], () => require("./getSystemSflow"));

export { GetSystemTosbasedpriorityArgs, GetSystemTosbasedpriorityResult, GetSystemTosbasedpriorityOutputArgs } from "./getSystemTosbasedpriority";
export const getSystemTosbasedpriority: typeof import("./getSystemTosbasedpriority").getSystemTosbasedpriority = null as any;
export const getSystemTosbasedpriorityOutput: typeof import("./getSystemTosbasedpriority").getSystemTosbasedpriorityOutput = null as any;
utilities.lazyLoad(exports, ["getSystemTosbasedpriority","getSystemTosbasedpriorityOutput"], () => require("./getSystemTosbasedpriority"));

export { GetSystemTosbasedprioritylistArgs, GetSystemTosbasedprioritylistResult, GetSystemTosbasedprioritylistOutputArgs } from "./getSystemTosbasedprioritylist";
export const getSystemTosbasedprioritylist: typeof import("./getSystemTosbasedprioritylist").getSystemTosbasedprioritylist = null as any;
export const getSystemTosbasedprioritylistOutput: typeof import("./getSystemTosbasedprioritylist").getSystemTosbasedprioritylistOutput = null as any;
utilities.lazyLoad(exports, ["getSystemTosbasedprioritylist","getSystemTosbasedprioritylistOutput"], () => require("./getSystemTosbasedprioritylist"));

export { GetSystemVxlanArgs, GetSystemVxlanResult, GetSystemVxlanOutputArgs } from "./getSystemVxlan";
export const getSystemVxlan: typeof import("./getSystemVxlan").getSystemVxlan = null as any;
export const getSystemVxlanOutput: typeof import("./getSystemVxlan").getSystemVxlanOutput = null as any;
utilities.lazyLoad(exports, ["getSystemVxlan","getSystemVxlanOutput"], () => require("./getSystemVxlan"));

export { GetSystemVxlanlistArgs, GetSystemVxlanlistResult, GetSystemVxlanlistOutputArgs } from "./getSystemVxlanlist";
export const getSystemVxlanlist: typeof import("./getSystemVxlanlist").getSystemVxlanlist = null as any;
export const getSystemVxlanlistOutput: typeof import("./getSystemVxlanlist").getSystemVxlanlistOutput = null as any;
utilities.lazyLoad(exports, ["getSystemVxlanlist","getSystemVxlanlistOutput"], () => require("./getSystemVxlanlist"));

export { GetSystemZoneArgs, GetSystemZoneResult, GetSystemZoneOutputArgs } from "./getSystemZone";
export const getSystemZone: typeof import("./getSystemZone").getSystemZone = null as any;
export const getSystemZoneOutput: typeof import("./getSystemZone").getSystemZoneOutput = null as any;
utilities.lazyLoad(exports, ["getSystemZone","getSystemZoneOutput"], () => require("./getSystemZone"));

export { GetSystemZonelistArgs, GetSystemZonelistResult, GetSystemZonelistOutputArgs } from "./getSystemZonelist";
export const getSystemZonelist: typeof import("./getSystemZonelist").getSystemZonelist = null as any;
export const getSystemZonelistOutput: typeof import("./getSystemZonelist").getSystemZonelistOutput = null as any;
utilities.lazyLoad(exports, ["getSystemZonelist","getSystemZonelistOutput"], () => require("./getSystemZonelist"));

export { GetSystemautoupdatePushupdateArgs, GetSystemautoupdatePushupdateResult, GetSystemautoupdatePushupdateOutputArgs } from "./getSystemautoupdatePushupdate";
export const getSystemautoupdatePushupdate: typeof import("./getSystemautoupdatePushupdate").getSystemautoupdatePushupdate = null as any;
export const getSystemautoupdatePushupdateOutput: typeof import("./getSystemautoupdatePushupdate").getSystemautoupdatePushupdateOutput = null as any;
utilities.lazyLoad(exports, ["getSystemautoupdatePushupdate","getSystemautoupdatePushupdateOutput"], () => require("./getSystemautoupdatePushupdate"));

export { GetSystemautoupdateScheduleArgs, GetSystemautoupdateScheduleResult, GetSystemautoupdateScheduleOutputArgs } from "./getSystemautoupdateSchedule";
export const getSystemautoupdateSchedule: typeof import("./getSystemautoupdateSchedule").getSystemautoupdateSchedule = null as any;
export const getSystemautoupdateScheduleOutput: typeof import("./getSystemautoupdateSchedule").getSystemautoupdateScheduleOutput = null as any;
utilities.lazyLoad(exports, ["getSystemautoupdateSchedule","getSystemautoupdateScheduleOutput"], () => require("./getSystemautoupdateSchedule"));

export { GetSystemautoupdateTunnelingArgs, GetSystemautoupdateTunnelingResult, GetSystemautoupdateTunnelingOutputArgs } from "./getSystemautoupdateTunneling";
export const getSystemautoupdateTunneling: typeof import("./getSystemautoupdateTunneling").getSystemautoupdateTunneling = null as any;
export const getSystemautoupdateTunnelingOutput: typeof import("./getSystemautoupdateTunneling").getSystemautoupdateTunnelingOutput = null as any;
utilities.lazyLoad(exports, ["getSystemautoupdateTunneling","getSystemautoupdateTunnelingOutput"], () => require("./getSystemautoupdateTunneling"));

export { GetSystemdhcpServerArgs, GetSystemdhcpServerResult, GetSystemdhcpServerOutputArgs } from "./getSystemdhcpServer";
export const getSystemdhcpServer: typeof import("./getSystemdhcpServer").getSystemdhcpServer = null as any;
export const getSystemdhcpServerOutput: typeof import("./getSystemdhcpServer").getSystemdhcpServerOutput = null as any;
utilities.lazyLoad(exports, ["getSystemdhcpServer","getSystemdhcpServerOutput"], () => require("./getSystemdhcpServer"));

export { GetSystemdhcpServerlistArgs, GetSystemdhcpServerlistResult, GetSystemdhcpServerlistOutputArgs } from "./getSystemdhcpServerlist";
export const getSystemdhcpServerlist: typeof import("./getSystemdhcpServerlist").getSystemdhcpServerlist = null as any;
export const getSystemdhcpServerlistOutput: typeof import("./getSystemdhcpServerlist").getSystemdhcpServerlistOutput = null as any;
utilities.lazyLoad(exports, ["getSystemdhcpServerlist","getSystemdhcpServerlistOutput"], () => require("./getSystemdhcpServerlist"));

export { GetSystemsnmpCommunityArgs, GetSystemsnmpCommunityResult, GetSystemsnmpCommunityOutputArgs } from "./getSystemsnmpCommunity";
export const getSystemsnmpCommunity: typeof import("./getSystemsnmpCommunity").getSystemsnmpCommunity = null as any;
export const getSystemsnmpCommunityOutput: typeof import("./getSystemsnmpCommunity").getSystemsnmpCommunityOutput = null as any;
utilities.lazyLoad(exports, ["getSystemsnmpCommunity","getSystemsnmpCommunityOutput"], () => require("./getSystemsnmpCommunity"));

export { GetSystemsnmpCommunitylistArgs, GetSystemsnmpCommunitylistResult, GetSystemsnmpCommunitylistOutputArgs } from "./getSystemsnmpCommunitylist";
export const getSystemsnmpCommunitylist: typeof import("./getSystemsnmpCommunitylist").getSystemsnmpCommunitylist = null as any;
export const getSystemsnmpCommunitylistOutput: typeof import("./getSystemsnmpCommunitylist").getSystemsnmpCommunitylistOutput = null as any;
utilities.lazyLoad(exports, ["getSystemsnmpCommunitylist","getSystemsnmpCommunitylistOutput"], () => require("./getSystemsnmpCommunitylist"));

export { GetSystemsnmpSysinfoArgs, GetSystemsnmpSysinfoResult, GetSystemsnmpSysinfoOutputArgs } from "./getSystemsnmpSysinfo";
export const getSystemsnmpSysinfo: typeof import("./getSystemsnmpSysinfo").getSystemsnmpSysinfo = null as any;
export const getSystemsnmpSysinfoOutput: typeof import("./getSystemsnmpSysinfo").getSystemsnmpSysinfoOutput = null as any;
utilities.lazyLoad(exports, ["getSystemsnmpSysinfo","getSystemsnmpSysinfoOutput"], () => require("./getSystemsnmpSysinfo"));

export { GetSystemsnmpUserArgs, GetSystemsnmpUserResult, GetSystemsnmpUserOutputArgs } from "./getSystemsnmpUser";
export const getSystemsnmpUser: typeof import("./getSystemsnmpUser").getSystemsnmpUser = null as any;
export const getSystemsnmpUserOutput: typeof import("./getSystemsnmpUser").getSystemsnmpUserOutput = null as any;
utilities.lazyLoad(exports, ["getSystemsnmpUser","getSystemsnmpUserOutput"], () => require("./getSystemsnmpUser"));

export { GetSystemsnmpUserlistArgs, GetSystemsnmpUserlistResult, GetSystemsnmpUserlistOutputArgs } from "./getSystemsnmpUserlist";
export const getSystemsnmpUserlist: typeof import("./getSystemsnmpUserlist").getSystemsnmpUserlist = null as any;
export const getSystemsnmpUserlistOutput: typeof import("./getSystemsnmpUserlist").getSystemsnmpUserlistOutput = null as any;
utilities.lazyLoad(exports, ["getSystemsnmpUserlist","getSystemsnmpUserlistOutput"], () => require("./getSystemsnmpUserlist"));

export { GuiConsoleArgs, GuiConsoleState } from "./guiConsole";
export type GuiConsole = import("./guiConsole").GuiConsole;
export const GuiConsole: typeof import("./guiConsole").GuiConsole = null as any;
utilities.lazyLoad(exports, ["GuiConsole"], () => require("./guiConsole"));

export { JsonGenericApiArgs, JsonGenericApiState } from "./jsonGenericApi";
export type JsonGenericApi = import("./jsonGenericApi").JsonGenericApi;
export const JsonGenericApi: typeof import("./jsonGenericApi").JsonGenericApi = null as any;
utilities.lazyLoad(exports, ["JsonGenericApi"], () => require("./jsonGenericApi"));

export { LogCustomfieldArgs, LogCustomfieldState } from "./logCustomfield";
export type LogCustomfield = import("./logCustomfield").LogCustomfield;
export const LogCustomfield: typeof import("./logCustomfield").LogCustomfield = null as any;
utilities.lazyLoad(exports, ["LogCustomfield"], () => require("./logCustomfield"));

export { LogEventfilterArgs, LogEventfilterState } from "./logEventfilter";
export type LogEventfilter = import("./logEventfilter").LogEventfilter;
export const LogEventfilter: typeof import("./logEventfilter").LogEventfilter = null as any;
utilities.lazyLoad(exports, ["LogEventfilter"], () => require("./logEventfilter"));

export { LogGuiArgs, LogGuiState } from "./logGui";
export type LogGui = import("./logGui").LogGui;
export const LogGui: typeof import("./logGui").LogGui = null as any;
utilities.lazyLoad(exports, ["LogGui"], () => require("./logGui"));

export { LogdiskFilterArgs, LogdiskFilterState } from "./logdiskFilter";
export type LogdiskFilter = import("./logdiskFilter").LogdiskFilter;
export const LogdiskFilter: typeof import("./logdiskFilter").LogdiskFilter = null as any;
utilities.lazyLoad(exports, ["LogdiskFilter"], () => require("./logdiskFilter"));

export { LogdiskSettingArgs, LogdiskSettingState } from "./logdiskSetting";
export type LogdiskSetting = import("./logdiskSetting").LogdiskSetting;
export const LogdiskSetting: typeof import("./logdiskSetting").LogdiskSetting = null as any;
utilities.lazyLoad(exports, ["LogdiskSetting"], () => require("./logdiskSetting"));

export { Logfortianalyzer2FilterArgs, Logfortianalyzer2FilterState } from "./logfortianalyzer2Filter";
export type Logfortianalyzer2Filter = import("./logfortianalyzer2Filter").Logfortianalyzer2Filter;
export const Logfortianalyzer2Filter: typeof import("./logfortianalyzer2Filter").Logfortianalyzer2Filter = null as any;
utilities.lazyLoad(exports, ["Logfortianalyzer2Filter"], () => require("./logfortianalyzer2Filter"));

export { Logfortianalyzer2SettingArgs, Logfortianalyzer2SettingState } from "./logfortianalyzer2Setting";
export type Logfortianalyzer2Setting = import("./logfortianalyzer2Setting").Logfortianalyzer2Setting;
export const Logfortianalyzer2Setting: typeof import("./logfortianalyzer2Setting").Logfortianalyzer2Setting = null as any;
utilities.lazyLoad(exports, ["Logfortianalyzer2Setting"], () => require("./logfortianalyzer2Setting"));

export { Logfortianalyzer3FilterArgs, Logfortianalyzer3FilterState } from "./logfortianalyzer3Filter";
export type Logfortianalyzer3Filter = import("./logfortianalyzer3Filter").Logfortianalyzer3Filter;
export const Logfortianalyzer3Filter: typeof import("./logfortianalyzer3Filter").Logfortianalyzer3Filter = null as any;
utilities.lazyLoad(exports, ["Logfortianalyzer3Filter"], () => require("./logfortianalyzer3Filter"));

export { Logfortianalyzer3SettingArgs, Logfortianalyzer3SettingState } from "./logfortianalyzer3Setting";
export type Logfortianalyzer3Setting = import("./logfortianalyzer3Setting").Logfortianalyzer3Setting;
export const Logfortianalyzer3Setting: typeof import("./logfortianalyzer3Setting").Logfortianalyzer3Setting = null as any;
utilities.lazyLoad(exports, ["Logfortianalyzer3Setting"], () => require("./logfortianalyzer3Setting"));

export { LogfortianalyzerFilterArgs, LogfortianalyzerFilterState } from "./logfortianalyzerFilter";
export type LogfortianalyzerFilter = import("./logfortianalyzerFilter").LogfortianalyzerFilter;
export const LogfortianalyzerFilter: typeof import("./logfortianalyzerFilter").LogfortianalyzerFilter = null as any;
utilities.lazyLoad(exports, ["LogfortianalyzerFilter"], () => require("./logfortianalyzerFilter"));

export { LogfortianalyzerOverridefilterArgs, LogfortianalyzerOverridefilterState } from "./logfortianalyzerOverridefilter";
export type LogfortianalyzerOverridefilter = import("./logfortianalyzerOverridefilter").LogfortianalyzerOverridefilter;
export const LogfortianalyzerOverridefilter: typeof import("./logfortianalyzerOverridefilter").LogfortianalyzerOverridefilter = null as any;
utilities.lazyLoad(exports, ["LogfortianalyzerOverridefilter"], () => require("./logfortianalyzerOverridefilter"));

export { LogfortianalyzerOverridesettingArgs, LogfortianalyzerOverridesettingState } from "./logfortianalyzerOverridesetting";
export type LogfortianalyzerOverridesetting = import("./logfortianalyzerOverridesetting").LogfortianalyzerOverridesetting;
export const LogfortianalyzerOverridesetting: typeof import("./logfortianalyzerOverridesetting").LogfortianalyzerOverridesetting = null as any;
utilities.lazyLoad(exports, ["LogfortianalyzerOverridesetting"], () => require("./logfortianalyzerOverridesetting"));

export { LogfortianalyzerSettingArgs, LogfortianalyzerSettingState } from "./logfortianalyzerSetting";
export type LogfortianalyzerSetting = import("./logfortianalyzerSetting").LogfortianalyzerSetting;
export const LogfortianalyzerSetting: typeof import("./logfortianalyzerSetting").LogfortianalyzerSetting = null as any;
utilities.lazyLoad(exports, ["LogfortianalyzerSetting"], () => require("./logfortianalyzerSetting"));

export { LogfortiguardSettingArgs, LogfortiguardSettingState } from "./logfortiguardSetting";
export type LogfortiguardSetting = import("./logfortiguardSetting").LogfortiguardSetting;
export const LogfortiguardSetting: typeof import("./logfortiguardSetting").LogfortiguardSetting = null as any;
utilities.lazyLoad(exports, ["LogfortiguardSetting"], () => require("./logfortiguardSetting"));

export { LogmemoryFilterArgs, LogmemoryFilterState } from "./logmemoryFilter";
export type LogmemoryFilter = import("./logmemoryFilter").LogmemoryFilter;
export const LogmemoryFilter: typeof import("./logmemoryFilter").LogmemoryFilter = null as any;
utilities.lazyLoad(exports, ["LogmemoryFilter"], () => require("./logmemoryFilter"));

export { LogmemoryGlobalsettingArgs, LogmemoryGlobalsettingState } from "./logmemoryGlobalsetting";
export type LogmemoryGlobalsetting = import("./logmemoryGlobalsetting").LogmemoryGlobalsetting;
export const LogmemoryGlobalsetting: typeof import("./logmemoryGlobalsetting").LogmemoryGlobalsetting = null as any;
utilities.lazyLoad(exports, ["LogmemoryGlobalsetting"], () => require("./logmemoryGlobalsetting"));

export { LogmemorySettingArgs, LogmemorySettingState } from "./logmemorySetting";
export type LogmemorySetting = import("./logmemorySetting").LogmemorySetting;
export const LogmemorySetting: typeof import("./logmemorySetting").LogmemorySetting = null as any;
utilities.lazyLoad(exports, ["LogmemorySetting"], () => require("./logmemorySetting"));

export { LogremoteSettingArgs, LogremoteSettingState } from "./logremoteSetting";
export type LogremoteSetting = import("./logremoteSetting").LogremoteSetting;
export const LogremoteSetting: typeof import("./logremoteSetting").LogremoteSetting = null as any;
utilities.lazyLoad(exports, ["LogremoteSetting"], () => require("./logremoteSetting"));

export { Logsyslogd2FilterArgs, Logsyslogd2FilterState } from "./logsyslogd2Filter";
export type Logsyslogd2Filter = import("./logsyslogd2Filter").Logsyslogd2Filter;
export const Logsyslogd2Filter: typeof import("./logsyslogd2Filter").Logsyslogd2Filter = null as any;
utilities.lazyLoad(exports, ["Logsyslogd2Filter"], () => require("./logsyslogd2Filter"));

export { Logsyslogd2SettingArgs, Logsyslogd2SettingState } from "./logsyslogd2Setting";
export type Logsyslogd2Setting = import("./logsyslogd2Setting").Logsyslogd2Setting;
export const Logsyslogd2Setting: typeof import("./logsyslogd2Setting").Logsyslogd2Setting = null as any;
utilities.lazyLoad(exports, ["Logsyslogd2Setting"], () => require("./logsyslogd2Setting"));

export { Logsyslogd3FilterArgs, Logsyslogd3FilterState } from "./logsyslogd3Filter";
export type Logsyslogd3Filter = import("./logsyslogd3Filter").Logsyslogd3Filter;
export const Logsyslogd3Filter: typeof import("./logsyslogd3Filter").Logsyslogd3Filter = null as any;
utilities.lazyLoad(exports, ["Logsyslogd3Filter"], () => require("./logsyslogd3Filter"));

export { Logsyslogd3SettingArgs, Logsyslogd3SettingState } from "./logsyslogd3Setting";
export type Logsyslogd3Setting = import("./logsyslogd3Setting").Logsyslogd3Setting;
export const Logsyslogd3Setting: typeof import("./logsyslogd3Setting").Logsyslogd3Setting = null as any;
utilities.lazyLoad(exports, ["Logsyslogd3Setting"], () => require("./logsyslogd3Setting"));

export { LogsyslogdFilterArgs, LogsyslogdFilterState } from "./logsyslogdFilter";
export type LogsyslogdFilter = import("./logsyslogdFilter").LogsyslogdFilter;
export const LogsyslogdFilter: typeof import("./logsyslogdFilter").LogsyslogdFilter = null as any;
utilities.lazyLoad(exports, ["LogsyslogdFilter"], () => require("./logsyslogdFilter"));

export { LogsyslogdOverridefilterArgs, LogsyslogdOverridefilterState } from "./logsyslogdOverridefilter";
export type LogsyslogdOverridefilter = import("./logsyslogdOverridefilter").LogsyslogdOverridefilter;
export const LogsyslogdOverridefilter: typeof import("./logsyslogdOverridefilter").LogsyslogdOverridefilter = null as any;
utilities.lazyLoad(exports, ["LogsyslogdOverridefilter"], () => require("./logsyslogdOverridefilter"));

export { LogsyslogdOverridesettingArgs, LogsyslogdOverridesettingState } from "./logsyslogdOverridesetting";
export type LogsyslogdOverridesetting = import("./logsyslogdOverridesetting").LogsyslogdOverridesetting;
export const LogsyslogdOverridesetting: typeof import("./logsyslogdOverridesetting").LogsyslogdOverridesetting = null as any;
utilities.lazyLoad(exports, ["LogsyslogdOverridesetting"], () => require("./logsyslogdOverridesetting"));

export { LogsyslogdSettingArgs, LogsyslogdSettingState } from "./logsyslogdSetting";
export type LogsyslogdSetting = import("./logsyslogdSetting").LogsyslogdSetting;
export const LogsyslogdSetting: typeof import("./logsyslogdSetting").LogsyslogdSetting = null as any;
utilities.lazyLoad(exports, ["LogsyslogdSetting"], () => require("./logsyslogdSetting"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { RouterAccesslistArgs, RouterAccesslistState } from "./routerAccesslist";
export type RouterAccesslist = import("./routerAccesslist").RouterAccesslist;
export const RouterAccesslist: typeof import("./routerAccesslist").RouterAccesslist = null as any;
utilities.lazyLoad(exports, ["RouterAccesslist"], () => require("./routerAccesslist"));

export { RouterAccesslist6Args, RouterAccesslist6State } from "./routerAccesslist6";
export type RouterAccesslist6 = import("./routerAccesslist6").RouterAccesslist6;
export const RouterAccesslist6: typeof import("./routerAccesslist6").RouterAccesslist6 = null as any;
utilities.lazyLoad(exports, ["RouterAccesslist6"], () => require("./routerAccesslist6"));

export { RouterAspathlistArgs, RouterAspathlistState } from "./routerAspathlist";
export type RouterAspathlist = import("./routerAspathlist").RouterAspathlist;
export const RouterAspathlist: typeof import("./routerAspathlist").RouterAspathlist = null as any;
utilities.lazyLoad(exports, ["RouterAspathlist"], () => require("./routerAspathlist"));

export { RouterAuthpathArgs, RouterAuthpathState } from "./routerAuthpath";
export type RouterAuthpath = import("./routerAuthpath").RouterAuthpath;
export const RouterAuthpath: typeof import("./routerAuthpath").RouterAuthpath = null as any;
utilities.lazyLoad(exports, ["RouterAuthpath"], () => require("./routerAuthpath"));

export { RouterBgpArgs, RouterBgpState } from "./routerBgp";
export type RouterBgp = import("./routerBgp").RouterBgp;
export const RouterBgp: typeof import("./routerBgp").RouterBgp = null as any;
utilities.lazyLoad(exports, ["RouterBgp"], () => require("./routerBgp"));

export { RouterCommunitylistArgs, RouterCommunitylistState } from "./routerCommunitylist";
export type RouterCommunitylist = import("./routerCommunitylist").RouterCommunitylist;
export const RouterCommunitylist: typeof import("./routerCommunitylist").RouterCommunitylist = null as any;
utilities.lazyLoad(exports, ["RouterCommunitylist"], () => require("./routerCommunitylist"));

export { RouterGwdetectArgs, RouterGwdetectState } from "./routerGwdetect";
export type RouterGwdetect = import("./routerGwdetect").RouterGwdetect;
export const RouterGwdetect: typeof import("./routerGwdetect").RouterGwdetect = null as any;
utilities.lazyLoad(exports, ["RouterGwdetect"], () => require("./routerGwdetect"));

export { RouterIsisArgs, RouterIsisState } from "./routerIsis";
export type RouterIsis = import("./routerIsis").RouterIsis;
export const RouterIsis: typeof import("./routerIsis").RouterIsis = null as any;
utilities.lazyLoad(exports, ["RouterIsis"], () => require("./routerIsis"));

export { RouterKeychainArgs, RouterKeychainState } from "./routerKeychain";
export type RouterKeychain = import("./routerKeychain").RouterKeychain;
export const RouterKeychain: typeof import("./routerKeychain").RouterKeychain = null as any;
utilities.lazyLoad(exports, ["RouterKeychain"], () => require("./routerKeychain"));

export { RouterMulticastArgs, RouterMulticastState } from "./routerMulticast";
export type RouterMulticast = import("./routerMulticast").RouterMulticast;
export const RouterMulticast: typeof import("./routerMulticast").RouterMulticast = null as any;
utilities.lazyLoad(exports, ["RouterMulticast"], () => require("./routerMulticast"));

export { RouterMulticastflowArgs, RouterMulticastflowState } from "./routerMulticastflow";
export type RouterMulticastflow = import("./routerMulticastflow").RouterMulticastflow;
export const RouterMulticastflow: typeof import("./routerMulticastflow").RouterMulticastflow = null as any;
utilities.lazyLoad(exports, ["RouterMulticastflow"], () => require("./routerMulticastflow"));

export { RouterOspfArgs, RouterOspfState } from "./routerOspf";
export type RouterOspf = import("./routerOspf").RouterOspf;
export const RouterOspf: typeof import("./routerOspf").RouterOspf = null as any;
utilities.lazyLoad(exports, ["RouterOspf"], () => require("./routerOspf"));

export { RouterOspf6Args, RouterOspf6State } from "./routerOspf6";
export type RouterOspf6 = import("./routerOspf6").RouterOspf6;
export const RouterOspf6: typeof import("./routerOspf6").RouterOspf6 = null as any;
utilities.lazyLoad(exports, ["RouterOspf6"], () => require("./routerOspf6"));

export { RouterPolicyArgs, RouterPolicyState } from "./routerPolicy";
export type RouterPolicy = import("./routerPolicy").RouterPolicy;
export const RouterPolicy: typeof import("./routerPolicy").RouterPolicy = null as any;
utilities.lazyLoad(exports, ["RouterPolicy"], () => require("./routerPolicy"));

export { RouterPrefixlistArgs, RouterPrefixlistState } from "./routerPrefixlist";
export type RouterPrefixlist = import("./routerPrefixlist").RouterPrefixlist;
export const RouterPrefixlist: typeof import("./routerPrefixlist").RouterPrefixlist = null as any;
utilities.lazyLoad(exports, ["RouterPrefixlist"], () => require("./routerPrefixlist"));

export { RouterPrefixlist6Args, RouterPrefixlist6State } from "./routerPrefixlist6";
export type RouterPrefixlist6 = import("./routerPrefixlist6").RouterPrefixlist6;
export const RouterPrefixlist6: typeof import("./routerPrefixlist6").RouterPrefixlist6 = null as any;
utilities.lazyLoad(exports, ["RouterPrefixlist6"], () => require("./routerPrefixlist6"));

export { RouterRipArgs, RouterRipState } from "./routerRip";
export type RouterRip = import("./routerRip").RouterRip;
export const RouterRip: typeof import("./routerRip").RouterRip = null as any;
utilities.lazyLoad(exports, ["RouterRip"], () => require("./routerRip"));

export { RouterRipngArgs, RouterRipngState } from "./routerRipng";
export type RouterRipng = import("./routerRipng").RouterRipng;
export const RouterRipng: typeof import("./routerRipng").RouterRipng = null as any;
utilities.lazyLoad(exports, ["RouterRipng"], () => require("./routerRipng"));

export { RouterRoutemapArgs, RouterRoutemapState } from "./routerRoutemap";
export type RouterRoutemap = import("./routerRoutemap").RouterRoutemap;
export const RouterRoutemap: typeof import("./routerRoutemap").RouterRoutemap = null as any;
utilities.lazyLoad(exports, ["RouterRoutemap"], () => require("./routerRoutemap"));

export { RouterSettingArgs, RouterSettingState } from "./routerSetting";
export type RouterSetting = import("./routerSetting").RouterSetting;
export const RouterSetting: typeof import("./routerSetting").RouterSetting = null as any;
utilities.lazyLoad(exports, ["RouterSetting"], () => require("./routerSetting"));

export { RouterStaticArgs, RouterStaticState } from "./routerStatic";
export type RouterStatic = import("./routerStatic").RouterStatic;
export const RouterStatic: typeof import("./routerStatic").RouterStatic = null as any;
utilities.lazyLoad(exports, ["RouterStatic"], () => require("./routerStatic"));

export { RouterStatic6Args, RouterStatic6State } from "./routerStatic6";
export type RouterStatic6 = import("./routerStatic6").RouterStatic6;
export const RouterStatic6: typeof import("./routerStatic6").RouterStatic6 = null as any;
utilities.lazyLoad(exports, ["RouterStatic6"], () => require("./routerStatic6"));

export { RouterVrfArgs, RouterVrfState } from "./routerVrf";
export type RouterVrf = import("./routerVrf").RouterVrf;
export const RouterVrf: typeof import("./routerVrf").RouterVrf = null as any;
utilities.lazyLoad(exports, ["RouterVrf"], () => require("./routerVrf"));

export { RouterbgpNeighborArgs, RouterbgpNeighborState } from "./routerbgpNeighbor";
export type RouterbgpNeighbor = import("./routerbgpNeighbor").RouterbgpNeighbor;
export const RouterbgpNeighbor: typeof import("./routerbgpNeighbor").RouterbgpNeighbor = null as any;
utilities.lazyLoad(exports, ["RouterbgpNeighbor"], () => require("./routerbgpNeighbor"));

export { RouterbgpNetworkArgs, RouterbgpNetworkState } from "./routerbgpNetwork";
export type RouterbgpNetwork = import("./routerbgpNetwork").RouterbgpNetwork;
export const RouterbgpNetwork: typeof import("./routerbgpNetwork").RouterbgpNetwork = null as any;
utilities.lazyLoad(exports, ["RouterbgpNetwork"], () => require("./routerbgpNetwork"));

export { RouterbgpNetwork6Args, RouterbgpNetwork6State } from "./routerbgpNetwork6";
export type RouterbgpNetwork6 = import("./routerbgpNetwork6").RouterbgpNetwork6;
export const RouterbgpNetwork6: typeof import("./routerbgpNetwork6").RouterbgpNetwork6 = null as any;
utilities.lazyLoad(exports, ["RouterbgpNetwork6"], () => require("./routerbgpNetwork6"));

export { Routerospf6AreaArgs, Routerospf6AreaState } from "./routerospf6Area";
export type Routerospf6Area = import("./routerospf6Area").Routerospf6Area;
export const Routerospf6Area: typeof import("./routerospf6Area").Routerospf6Area = null as any;
utilities.lazyLoad(exports, ["Routerospf6Area"], () => require("./routerospf6Area"));

export { Routerospf6InterfaceArgs, Routerospf6InterfaceState } from "./routerospf6Interface";
export type Routerospf6Interface = import("./routerospf6Interface").Routerospf6Interface;
export const Routerospf6Interface: typeof import("./routerospf6Interface").Routerospf6Interface = null as any;
utilities.lazyLoad(exports, ["Routerospf6Interface"], () => require("./routerospf6Interface"));

export { Routerospf6RedistributeArgs, Routerospf6RedistributeState } from "./routerospf6Redistribute";
export type Routerospf6Redistribute = import("./routerospf6Redistribute").Routerospf6Redistribute;
export const Routerospf6Redistribute: typeof import("./routerospf6Redistribute").Routerospf6Redistribute = null as any;
utilities.lazyLoad(exports, ["Routerospf6Redistribute"], () => require("./routerospf6Redistribute"));

export { RouterospfAreaArgs, RouterospfAreaState } from "./routerospfArea";
export type RouterospfArea = import("./routerospfArea").RouterospfArea;
export const RouterospfArea: typeof import("./routerospfArea").RouterospfArea = null as any;
utilities.lazyLoad(exports, ["RouterospfArea"], () => require("./routerospfArea"));

export { RouterospfInterfaceArgs, RouterospfInterfaceState } from "./routerospfInterface";
export type RouterospfInterface = import("./routerospfInterface").RouterospfInterface;
export const RouterospfInterface: typeof import("./routerospfInterface").RouterospfInterface = null as any;
utilities.lazyLoad(exports, ["RouterospfInterface"], () => require("./routerospfInterface"));

export { RouterospfNetworkArgs, RouterospfNetworkState } from "./routerospfNetwork";
export type RouterospfNetwork = import("./routerospfNetwork").RouterospfNetwork;
export const RouterospfNetwork: typeof import("./routerospfNetwork").RouterospfNetwork = null as any;
utilities.lazyLoad(exports, ["RouterospfNetwork"], () => require("./routerospfNetwork"));

export { SwitchAutoislportgroupArgs, SwitchAutoislportgroupState } from "./switchAutoislportgroup";
export type SwitchAutoislportgroup = import("./switchAutoislportgroup").SwitchAutoislportgroup;
export const SwitchAutoislportgroup: typeof import("./switchAutoislportgroup").SwitchAutoislportgroup = null as any;
utilities.lazyLoad(exports, ["SwitchAutoislportgroup"], () => require("./switchAutoislportgroup"));

export { SwitchAutonetworkArgs, SwitchAutonetworkState } from "./switchAutonetwork";
export type SwitchAutonetwork = import("./switchAutonetwork").SwitchAutonetwork;
export const SwitchAutonetwork: typeof import("./switchAutonetwork").SwitchAutonetwork = null as any;
utilities.lazyLoad(exports, ["SwitchAutonetwork"], () => require("./switchAutonetwork"));

export { SwitchDomainArgs, SwitchDomainState } from "./switchDomain";
export type SwitchDomain = import("./switchDomain").SwitchDomain;
export const SwitchDomain: typeof import("./switchDomain").SwitchDomain = null as any;
utilities.lazyLoad(exports, ["SwitchDomain"], () => require("./switchDomain"));

export { SwitchGlobalArgs, SwitchGlobalState } from "./switchGlobal";
export type SwitchGlobal = import("./switchGlobal").SwitchGlobal;
export const SwitchGlobal: typeof import("./switchGlobal").SwitchGlobal = null as any;
utilities.lazyLoad(exports, ["SwitchGlobal"], () => require("./switchGlobal"));

export { SwitchInterfaceArgs, SwitchInterfaceState } from "./switchInterface";
export type SwitchInterface = import("./switchInterface").SwitchInterface;
export const SwitchInterface: typeof import("./switchInterface").SwitchInterface = null as any;
utilities.lazyLoad(exports, ["SwitchInterface"], () => require("./switchInterface"));

export { SwitchIpmacbindingArgs, SwitchIpmacbindingState } from "./switchIpmacbinding";
export type SwitchIpmacbinding = import("./switchIpmacbinding").SwitchIpmacbinding;
export const SwitchIpmacbinding: typeof import("./switchIpmacbinding").SwitchIpmacbinding = null as any;
utilities.lazyLoad(exports, ["SwitchIpmacbinding"], () => require("./switchIpmacbinding"));

export { SwitchMirrorArgs, SwitchMirrorState } from "./switchMirror";
export type SwitchMirror = import("./switchMirror").SwitchMirror;
export const SwitchMirror: typeof import("./switchMirror").SwitchMirror = null as any;
utilities.lazyLoad(exports, ["SwitchMirror"], () => require("./switchMirror"));

export { SwitchPhymodeArgs, SwitchPhymodeState } from "./switchPhymode";
export type SwitchPhymode = import("./switchPhymode").SwitchPhymode;
export const SwitchPhymode: typeof import("./switchPhymode").SwitchPhymode = null as any;
utilities.lazyLoad(exports, ["SwitchPhymode"], () => require("./switchPhymode"));

export { SwitchPhysicalportArgs, SwitchPhysicalportState } from "./switchPhysicalport";
export type SwitchPhysicalport = import("./switchPhysicalport").SwitchPhysicalport;
export const SwitchPhysicalport: typeof import("./switchPhysicalport").SwitchPhysicalport = null as any;
utilities.lazyLoad(exports, ["SwitchPhysicalport"], () => require("./switchPhysicalport"));

export { SwitchQuarantineArgs, SwitchQuarantineState } from "./switchQuarantine";
export type SwitchQuarantine = import("./switchQuarantine").SwitchQuarantine;
export const SwitchQuarantine: typeof import("./switchQuarantine").SwitchQuarantine = null as any;
utilities.lazyLoad(exports, ["SwitchQuarantine"], () => require("./switchQuarantine"));

export { SwitchRaguardpolicyArgs, SwitchRaguardpolicyState } from "./switchRaguardpolicy";
export type SwitchRaguardpolicy = import("./switchRaguardpolicy").SwitchRaguardpolicy;
export const SwitchRaguardpolicy: typeof import("./switchRaguardpolicy").SwitchRaguardpolicy = null as any;
utilities.lazyLoad(exports, ["SwitchRaguardpolicy"], () => require("./switchRaguardpolicy"));

export { SwitchSecurityfeatureArgs, SwitchSecurityfeatureState } from "./switchSecurityfeature";
export type SwitchSecurityfeature = import("./switchSecurityfeature").SwitchSecurityfeature;
export const SwitchSecurityfeature: typeof import("./switchSecurityfeature").SwitchSecurityfeature = null as any;
utilities.lazyLoad(exports, ["SwitchSecurityfeature"], () => require("./switchSecurityfeature"));

export { SwitchStaticmacArgs, SwitchStaticmacState } from "./switchStaticmac";
export type SwitchStaticmac = import("./switchStaticmac").SwitchStaticmac;
export const SwitchStaticmac: typeof import("./switchStaticmac").SwitchStaticmac = null as any;
utilities.lazyLoad(exports, ["SwitchStaticmac"], () => require("./switchStaticmac"));

export { SwitchStormcontrolArgs, SwitchStormcontrolState } from "./switchStormcontrol";
export type SwitchStormcontrol = import("./switchStormcontrol").SwitchStormcontrol;
export const SwitchStormcontrol: typeof import("./switchStormcontrol").SwitchStormcontrol = null as any;
utilities.lazyLoad(exports, ["SwitchStormcontrol"], () => require("./switchStormcontrol"));

export { SwitchTrunkArgs, SwitchTrunkState } from "./switchTrunk";
export type SwitchTrunk = import("./switchTrunk").SwitchTrunk;
export const SwitchTrunk: typeof import("./switchTrunk").SwitchTrunk = null as any;
utilities.lazyLoad(exports, ["SwitchTrunk"], () => require("./switchTrunk"));

export { SwitchVirtualwireArgs, SwitchVirtualwireState } from "./switchVirtualwire";
export type SwitchVirtualwire = import("./switchVirtualwire").SwitchVirtualwire;
export const SwitchVirtualwire: typeof import("./switchVirtualwire").SwitchVirtualwire = null as any;
utilities.lazyLoad(exports, ["SwitchVirtualwire"], () => require("./switchVirtualwire"));

export { SwitchVlanArgs, SwitchVlanState } from "./switchVlan";
export type SwitchVlan = import("./switchVlan").SwitchVlan;
export const SwitchVlan: typeof import("./switchVlan").SwitchVlan = null as any;
utilities.lazyLoad(exports, ["SwitchVlan"], () => require("./switchVlan"));

export { SwitchVlantpidArgs, SwitchVlantpidState } from "./switchVlantpid";
export type SwitchVlantpid = import("./switchVlantpid").SwitchVlantpid;
export const SwitchVlantpid: typeof import("./switchVlantpid").SwitchVlantpid = null as any;
utilities.lazyLoad(exports, ["SwitchVlantpid"], () => require("./switchVlantpid"));

export { Switchacl8021XArgs, Switchacl8021XState } from "./switchacl8021X";
export type Switchacl8021X = import("./switchacl8021X").Switchacl8021X;
export const Switchacl8021X: typeof import("./switchacl8021X").Switchacl8021X = null as any;
utilities.lazyLoad(exports, ["Switchacl8021X"], () => require("./switchacl8021X"));

export { SwitchaclEgressArgs, SwitchaclEgressState } from "./switchaclEgress";
export type SwitchaclEgress = import("./switchaclEgress").SwitchaclEgress;
export const SwitchaclEgress: typeof import("./switchaclEgress").SwitchaclEgress = null as any;
utilities.lazyLoad(exports, ["SwitchaclEgress"], () => require("./switchaclEgress"));

export { SwitchaclIngressArgs, SwitchaclIngressState } from "./switchaclIngress";
export type SwitchaclIngress = import("./switchaclIngress").SwitchaclIngress;
export const SwitchaclIngress: typeof import("./switchaclIngress").SwitchaclIngress = null as any;
utilities.lazyLoad(exports, ["SwitchaclIngress"], () => require("./switchaclIngress"));

export { SwitchaclPolicerArgs, SwitchaclPolicerState } from "./switchaclPolicer";
export type SwitchaclPolicer = import("./switchaclPolicer").SwitchaclPolicer;
export const SwitchaclPolicer: typeof import("./switchaclPolicer").SwitchaclPolicer = null as any;
utilities.lazyLoad(exports, ["SwitchaclPolicer"], () => require("./switchaclPolicer"));

export { SwitchaclPrelookupArgs, SwitchaclPrelookupState } from "./switchaclPrelookup";
export type SwitchaclPrelookup = import("./switchaclPrelookup").SwitchaclPrelookup;
export const SwitchaclPrelookup: typeof import("./switchaclPrelookup").SwitchaclPrelookup = null as any;
utilities.lazyLoad(exports, ["SwitchaclPrelookup"], () => require("./switchaclPrelookup"));

export { SwitchaclSettingsArgs, SwitchaclSettingsState } from "./switchaclSettings";
export type SwitchaclSettings = import("./switchaclSettings").SwitchaclSettings;
export const SwitchaclSettings: typeof import("./switchaclSettings").SwitchaclSettings = null as any;
utilities.lazyLoad(exports, ["SwitchaclSettings"], () => require("./switchaclSettings"));

export { SwitchaclserviceCustomArgs, SwitchaclserviceCustomState } from "./switchaclserviceCustom";
export type SwitchaclserviceCustom = import("./switchaclserviceCustom").SwitchaclserviceCustom;
export const SwitchaclserviceCustom: typeof import("./switchaclserviceCustom").SwitchaclserviceCustom = null as any;
utilities.lazyLoad(exports, ["SwitchaclserviceCustom"], () => require("./switchaclserviceCustom"));

export { SwitchcontrollerGlobalArgs, SwitchcontrollerGlobalState } from "./switchcontrollerGlobal";
export type SwitchcontrollerGlobal = import("./switchcontrollerGlobal").SwitchcontrollerGlobal;
export const SwitchcontrollerGlobal: typeof import("./switchcontrollerGlobal").SwitchcontrollerGlobal = null as any;
utilities.lazyLoad(exports, ["SwitchcontrollerGlobal"], () => require("./switchcontrollerGlobal"));

export { SwitchigmpsnoopingGlobalsArgs, SwitchigmpsnoopingGlobalsState } from "./switchigmpsnoopingGlobals";
export type SwitchigmpsnoopingGlobals = import("./switchigmpsnoopingGlobals").SwitchigmpsnoopingGlobals;
export const SwitchigmpsnoopingGlobals: typeof import("./switchigmpsnoopingGlobals").SwitchigmpsnoopingGlobals = null as any;
utilities.lazyLoad(exports, ["SwitchigmpsnoopingGlobals"], () => require("./switchigmpsnoopingGlobals"));

export { SwitchlldpProfileArgs, SwitchlldpProfileState } from "./switchlldpProfile";
export type SwitchlldpProfile = import("./switchlldpProfile").SwitchlldpProfile;
export const SwitchlldpProfile: typeof import("./switchlldpProfile").SwitchlldpProfile = null as any;
utilities.lazyLoad(exports, ["SwitchlldpProfile"], () => require("./switchlldpProfile"));

export { SwitchlldpSettingsArgs, SwitchlldpSettingsState } from "./switchlldpSettings";
export type SwitchlldpSettings = import("./switchlldpSettings").SwitchlldpSettings;
export const SwitchlldpSettings: typeof import("./switchlldpSettings").SwitchlldpSettings = null as any;
utilities.lazyLoad(exports, ["SwitchlldpSettings"], () => require("./switchlldpSettings"));

export { SwitchmacsecProfileArgs, SwitchmacsecProfileState } from "./switchmacsecProfile";
export type SwitchmacsecProfile = import("./switchmacsecProfile").SwitchmacsecProfile;
export const SwitchmacsecProfile: typeof import("./switchmacsecProfile").SwitchmacsecProfile = null as any;
utilities.lazyLoad(exports, ["SwitchmacsecProfile"], () => require("./switchmacsecProfile"));

export { SwitchmldsnoopingGlobalsArgs, SwitchmldsnoopingGlobalsState } from "./switchmldsnoopingGlobals";
export type SwitchmldsnoopingGlobals = import("./switchmldsnoopingGlobals").SwitchmldsnoopingGlobals;
export const SwitchmldsnoopingGlobals: typeof import("./switchmldsnoopingGlobals").SwitchmldsnoopingGlobals = null as any;
utilities.lazyLoad(exports, ["SwitchmldsnoopingGlobals"], () => require("./switchmldsnoopingGlobals"));

export { SwitchnetworkmonitorDirectedArgs, SwitchnetworkmonitorDirectedState } from "./switchnetworkmonitorDirected";
export type SwitchnetworkmonitorDirected = import("./switchnetworkmonitorDirected").SwitchnetworkmonitorDirected;
export const SwitchnetworkmonitorDirected: typeof import("./switchnetworkmonitorDirected").SwitchnetworkmonitorDirected = null as any;
utilities.lazyLoad(exports, ["SwitchnetworkmonitorDirected"], () => require("./switchnetworkmonitorDirected"));

export { SwitchnetworkmonitorSettingsArgs, SwitchnetworkmonitorSettingsState } from "./switchnetworkmonitorSettings";
export type SwitchnetworkmonitorSettings = import("./switchnetworkmonitorSettings").SwitchnetworkmonitorSettings;
export const SwitchnetworkmonitorSettings: typeof import("./switchnetworkmonitorSettings").SwitchnetworkmonitorSettings = null as any;
utilities.lazyLoad(exports, ["SwitchnetworkmonitorSettings"], () => require("./switchnetworkmonitorSettings"));

export { SwitchptpPolicyArgs, SwitchptpPolicyState } from "./switchptpPolicy";
export type SwitchptpPolicy = import("./switchptpPolicy").SwitchptpPolicy;
export const SwitchptpPolicy: typeof import("./switchptpPolicy").SwitchptpPolicy = null as any;
utilities.lazyLoad(exports, ["SwitchptpPolicy"], () => require("./switchptpPolicy"));

export { SwitchptpSettingsArgs, SwitchptpSettingsState } from "./switchptpSettings";
export type SwitchptpSettings = import("./switchptpSettings").SwitchptpSettings;
export const SwitchptpSettings: typeof import("./switchptpSettings").SwitchptpSettings = null as any;
utilities.lazyLoad(exports, ["SwitchptpSettings"], () => require("./switchptpSettings"));

export { SwitchqosDot1pmapArgs, SwitchqosDot1pmapState } from "./switchqosDot1pmap";
export type SwitchqosDot1pmap = import("./switchqosDot1pmap").SwitchqosDot1pmap;
export const SwitchqosDot1pmap: typeof import("./switchqosDot1pmap").SwitchqosDot1pmap = null as any;
utilities.lazyLoad(exports, ["SwitchqosDot1pmap"], () => require("./switchqosDot1pmap"));

export { SwitchqosIpdscpmapArgs, SwitchqosIpdscpmapState } from "./switchqosIpdscpmap";
export type SwitchqosIpdscpmap = import("./switchqosIpdscpmap").SwitchqosIpdscpmap;
export const SwitchqosIpdscpmap: typeof import("./switchqosIpdscpmap").SwitchqosIpdscpmap = null as any;
utilities.lazyLoad(exports, ["SwitchqosIpdscpmap"], () => require("./switchqosIpdscpmap"));

export { SwitchqosQospolicyArgs, SwitchqosQospolicyState } from "./switchqosQospolicy";
export type SwitchqosQospolicy = import("./switchqosQospolicy").SwitchqosQospolicy;
export const SwitchqosQospolicy: typeof import("./switchqosQospolicy").SwitchqosQospolicy = null as any;
utilities.lazyLoad(exports, ["SwitchqosQospolicy"], () => require("./switchqosQospolicy"));

export { SwitchstpInstanceArgs, SwitchstpInstanceState } from "./switchstpInstance";
export type SwitchstpInstance = import("./switchstpInstance").SwitchstpInstance;
export const SwitchstpInstance: typeof import("./switchstpInstance").SwitchstpInstance = null as any;
utilities.lazyLoad(exports, ["SwitchstpInstance"], () => require("./switchstpInstance"));

export { SwitchstpSettingsArgs, SwitchstpSettingsState } from "./switchstpSettings";
export type SwitchstpSettings = import("./switchstpSettings").SwitchstpSettings;
export const SwitchstpSettings: typeof import("./switchstpSettings").SwitchstpSettings = null as any;
utilities.lazyLoad(exports, ["SwitchstpSettings"], () => require("./switchstpSettings"));

export { SystemAccprofileArgs, SystemAccprofileState } from "./systemAccprofile";
export type SystemAccprofile = import("./systemAccprofile").SystemAccprofile;
export const SystemAccprofile: typeof import("./systemAccprofile").SystemAccprofile = null as any;
utilities.lazyLoad(exports, ["SystemAccprofile"], () => require("./systemAccprofile"));

export { SystemAdminArgs, SystemAdminState } from "./systemAdmin";
export type SystemAdmin = import("./systemAdmin").SystemAdmin;
export const SystemAdmin: typeof import("./systemAdmin").SystemAdmin = null as any;
utilities.lazyLoad(exports, ["SystemAdmin"], () => require("./systemAdmin"));

export { SystemAlarmArgs, SystemAlarmState } from "./systemAlarm";
export type SystemAlarm = import("./systemAlarm").SystemAlarm;
export const SystemAlarm: typeof import("./systemAlarm").SystemAlarm = null as any;
utilities.lazyLoad(exports, ["SystemAlarm"], () => require("./systemAlarm"));

export { SystemAlertemailArgs, SystemAlertemailState } from "./systemAlertemail";
export type SystemAlertemail = import("./systemAlertemail").SystemAlertemail;
export const SystemAlertemail: typeof import("./systemAlertemail").SystemAlertemail = null as any;
utilities.lazyLoad(exports, ["SystemAlertemail"], () => require("./systemAlertemail"));

export { SystemArptableArgs, SystemArptableState } from "./systemArptable";
export type SystemArptable = import("./systemArptable").SystemArptable;
export const SystemArptable: typeof import("./systemArptable").SystemArptable = null as any;
utilities.lazyLoad(exports, ["SystemArptable"], () => require("./systemArptable"));

export { SystemAutomationactionArgs, SystemAutomationactionState } from "./systemAutomationaction";
export type SystemAutomationaction = import("./systemAutomationaction").SystemAutomationaction;
export const SystemAutomationaction: typeof import("./systemAutomationaction").SystemAutomationaction = null as any;
utilities.lazyLoad(exports, ["SystemAutomationaction"], () => require("./systemAutomationaction"));

export { SystemAutomationdestinationArgs, SystemAutomationdestinationState } from "./systemAutomationdestination";
export type SystemAutomationdestination = import("./systemAutomationdestination").SystemAutomationdestination;
export const SystemAutomationdestination: typeof import("./systemAutomationdestination").SystemAutomationdestination = null as any;
utilities.lazyLoad(exports, ["SystemAutomationdestination"], () => require("./systemAutomationdestination"));

export { SystemAutomationstitchArgs, SystemAutomationstitchState } from "./systemAutomationstitch";
export type SystemAutomationstitch = import("./systemAutomationstitch").SystemAutomationstitch;
export const SystemAutomationstitch: typeof import("./systemAutomationstitch").SystemAutomationstitch = null as any;
utilities.lazyLoad(exports, ["SystemAutomationstitch"], () => require("./systemAutomationstitch"));

export { SystemAutomationtriggerArgs, SystemAutomationtriggerState } from "./systemAutomationtrigger";
export type SystemAutomationtrigger = import("./systemAutomationtrigger").SystemAutomationtrigger;
export const SystemAutomationtrigger: typeof import("./systemAutomationtrigger").SystemAutomationtrigger = null as any;
utilities.lazyLoad(exports, ["SystemAutomationtrigger"], () => require("./systemAutomationtrigger"));

export { SystemAutoscriptArgs, SystemAutoscriptState } from "./systemAutoscript";
export type SystemAutoscript = import("./systemAutoscript").SystemAutoscript;
export const SystemAutoscript: typeof import("./systemAutoscript").SystemAutoscript = null as any;
utilities.lazyLoad(exports, ["SystemAutoscript"], () => require("./systemAutoscript"));

export { SystemBugreportArgs, SystemBugreportState } from "./systemBugreport";
export type SystemBugreport = import("./systemBugreport").SystemBugreport;
export const SystemBugreport: typeof import("./systemBugreport").SystemBugreport = null as any;
utilities.lazyLoad(exports, ["SystemBugreport"], () => require("./systemBugreport"));

export { SystemCentralmanagementArgs, SystemCentralmanagementState } from "./systemCentralmanagement";
export type SystemCentralmanagement = import("./systemCentralmanagement").SystemCentralmanagement;
export const SystemCentralmanagement: typeof import("./systemCentralmanagement").SystemCentralmanagement = null as any;
utilities.lazyLoad(exports, ["SystemCentralmanagement"], () => require("./systemCentralmanagement"));

export { SystemConsoleArgs, SystemConsoleState } from "./systemConsole";
export type SystemConsole = import("./systemConsole").SystemConsole;
export const SystemConsole: typeof import("./systemConsole").SystemConsole = null as any;
utilities.lazyLoad(exports, ["SystemConsole"], () => require("./systemConsole"));

export { SystemDnsArgs, SystemDnsState } from "./systemDns";
export type SystemDns = import("./systemDns").SystemDns;
export const SystemDns: typeof import("./systemDns").SystemDns = null as any;
utilities.lazyLoad(exports, ["SystemDns"], () => require("./systemDns"));

export { SystemDnsdatabaseArgs, SystemDnsdatabaseState } from "./systemDnsdatabase";
export type SystemDnsdatabase = import("./systemDnsdatabase").SystemDnsdatabase;
export const SystemDnsdatabase: typeof import("./systemDnsdatabase").SystemDnsdatabase = null as any;
utilities.lazyLoad(exports, ["SystemDnsdatabase"], () => require("./systemDnsdatabase"));

export { SystemDnsserverArgs, SystemDnsserverState } from "./systemDnsserver";
export type SystemDnsserver = import("./systemDnsserver").SystemDnsserver;
export const SystemDnsserver: typeof import("./systemDnsserver").SystemDnsserver = null as any;
utilities.lazyLoad(exports, ["SystemDnsserver"], () => require("./systemDnsserver"));

export { SystemEmailserverArgs, SystemEmailserverState } from "./systemEmailserver";
export type SystemEmailserver = import("./systemEmailserver").SystemEmailserver;
export const SystemEmailserver: typeof import("./systemEmailserver").SystemEmailserver = null as any;
utilities.lazyLoad(exports, ["SystemEmailserver"], () => require("./systemEmailserver"));

export { SystemFlancloudArgs, SystemFlancloudState } from "./systemFlancloud";
export type SystemFlancloud = import("./systemFlancloud").SystemFlancloud;
export const SystemFlancloud: typeof import("./systemFlancloud").SystemFlancloud = null as any;
utilities.lazyLoad(exports, ["SystemFlancloud"], () => require("./systemFlancloud"));

export { SystemFlowexportArgs, SystemFlowexportState } from "./systemFlowexport";
export type SystemFlowexport = import("./systemFlowexport").SystemFlowexport;
export const SystemFlowexport: typeof import("./systemFlowexport").SystemFlowexport = null as any;
utilities.lazyLoad(exports, ["SystemFlowexport"], () => require("./systemFlowexport"));

export { SystemFmArgs, SystemFmState } from "./systemFm";
export type SystemFm = import("./systemFm").SystemFm;
export const SystemFm: typeof import("./systemFm").SystemFm = null as any;
utilities.lazyLoad(exports, ["SystemFm"], () => require("./systemFm"));

export { SystemFortianalyzerArgs, SystemFortianalyzerState } from "./systemFortianalyzer";
export type SystemFortianalyzer = import("./systemFortianalyzer").SystemFortianalyzer;
export const SystemFortianalyzer: typeof import("./systemFortianalyzer").SystemFortianalyzer = null as any;
utilities.lazyLoad(exports, ["SystemFortianalyzer"], () => require("./systemFortianalyzer"));

export { SystemFortianalyzer2Args, SystemFortianalyzer2State } from "./systemFortianalyzer2";
export type SystemFortianalyzer2 = import("./systemFortianalyzer2").SystemFortianalyzer2;
export const SystemFortianalyzer2: typeof import("./systemFortianalyzer2").SystemFortianalyzer2 = null as any;
utilities.lazyLoad(exports, ["SystemFortianalyzer2"], () => require("./systemFortianalyzer2"));

export { SystemFortianalyzer3Args, SystemFortianalyzer3State } from "./systemFortianalyzer3";
export type SystemFortianalyzer3 = import("./systemFortianalyzer3").SystemFortianalyzer3;
export const SystemFortianalyzer3: typeof import("./systemFortianalyzer3").SystemFortianalyzer3 = null as any;
utilities.lazyLoad(exports, ["SystemFortianalyzer3"], () => require("./systemFortianalyzer3"));

export { SystemFortiguardArgs, SystemFortiguardState } from "./systemFortiguard";
export type SystemFortiguard = import("./systemFortiguard").SystemFortiguard;
export const SystemFortiguard: typeof import("./systemFortiguard").SystemFortiguard = null as any;
utilities.lazyLoad(exports, ["SystemFortiguard"], () => require("./systemFortiguard"));

export { SystemFortimanagerArgs, SystemFortimanagerState } from "./systemFortimanager";
export type SystemFortimanager = import("./systemFortimanager").SystemFortimanager;
export const SystemFortimanager: typeof import("./systemFortimanager").SystemFortimanager = null as any;
utilities.lazyLoad(exports, ["SystemFortimanager"], () => require("./systemFortimanager"));

export { SystemFswcloudArgs, SystemFswcloudState } from "./systemFswcloud";
export type SystemFswcloud = import("./systemFswcloud").SystemFswcloud;
export const SystemFswcloud: typeof import("./systemFswcloud").SystemFswcloud = null as any;
utilities.lazyLoad(exports, ["SystemFswcloud"], () => require("./systemFswcloud"));

export { SystemGlobalArgs, SystemGlobalState } from "./systemGlobal";
export type SystemGlobal = import("./systemGlobal").SystemGlobal;
export const SystemGlobal: typeof import("./systemGlobal").SystemGlobal = null as any;
utilities.lazyLoad(exports, ["SystemGlobal"], () => require("./systemGlobal"));

export { SystemInterfaceArgs, SystemInterfaceState } from "./systemInterface";
export type SystemInterface = import("./systemInterface").SystemInterface;
export const SystemInterface: typeof import("./systemInterface").SystemInterface = null as any;
utilities.lazyLoad(exports, ["SystemInterface"], () => require("./systemInterface"));

export { SystemIpv6neighborcacheArgs, SystemIpv6neighborcacheState } from "./systemIpv6neighborcache";
export type SystemIpv6neighborcache = import("./systemIpv6neighborcache").SystemIpv6neighborcache;
export const SystemIpv6neighborcache: typeof import("./systemIpv6neighborcache").SystemIpv6neighborcache = null as any;
utilities.lazyLoad(exports, ["SystemIpv6neighborcache"], () => require("./systemIpv6neighborcache"));

export { SystemLinkmonitorArgs, SystemLinkmonitorState } from "./systemLinkmonitor";
export type SystemLinkmonitor = import("./systemLinkmonitor").SystemLinkmonitor;
export const SystemLinkmonitor: typeof import("./systemLinkmonitor").SystemLinkmonitor = null as any;
utilities.lazyLoad(exports, ["SystemLinkmonitor"], () => require("./systemLinkmonitor"));

export { SystemLocationArgs, SystemLocationState } from "./systemLocation";
export type SystemLocation = import("./systemLocation").SystemLocation;
export const SystemLocation: typeof import("./systemLocation").SystemLocation = null as any;
utilities.lazyLoad(exports, ["SystemLocation"], () => require("./systemLocation"));

export { SystemMacaddresstableArgs, SystemMacaddresstableState } from "./systemMacaddresstable";
export type SystemMacaddresstable = import("./systemMacaddresstable").SystemMacaddresstable;
export const SystemMacaddresstable: typeof import("./systemMacaddresstable").SystemMacaddresstable = null as any;
utilities.lazyLoad(exports, ["SystemMacaddresstable"], () => require("./systemMacaddresstable"));

export { SystemManagementtunnelArgs, SystemManagementtunnelState } from "./systemManagementtunnel";
export type SystemManagementtunnel = import("./systemManagementtunnel").SystemManagementtunnel;
export const SystemManagementtunnel: typeof import("./systemManagementtunnel").SystemManagementtunnel = null as any;
utilities.lazyLoad(exports, ["SystemManagementtunnel"], () => require("./systemManagementtunnel"));

export { SystemNtpArgs, SystemNtpState } from "./systemNtp";
export type SystemNtp = import("./systemNtp").SystemNtp;
export const SystemNtp: typeof import("./systemNtp").SystemNtp = null as any;
utilities.lazyLoad(exports, ["SystemNtp"], () => require("./systemNtp"));

export { SystemObjecttagArgs, SystemObjecttagState } from "./systemObjecttag";
export type SystemObjecttag = import("./systemObjecttag").SystemObjecttag;
export const SystemObjecttag: typeof import("./systemObjecttag").SystemObjecttag = null as any;
utilities.lazyLoad(exports, ["SystemObjecttag"], () => require("./systemObjecttag"));

export { SystemPasswordpolicyArgs, SystemPasswordpolicyState } from "./systemPasswordpolicy";
export type SystemPasswordpolicy = import("./systemPasswordpolicy").SystemPasswordpolicy;
export const SystemPasswordpolicy: typeof import("./systemPasswordpolicy").SystemPasswordpolicy = null as any;
utilities.lazyLoad(exports, ["SystemPasswordpolicy"], () => require("./systemPasswordpolicy"));

export { SystemPortpairArgs, SystemPortpairState } from "./systemPortpair";
export type SystemPortpair = import("./systemPortpair").SystemPortpair;
export const SystemPortpair: typeof import("./systemPortpair").SystemPortpair = null as any;
utilities.lazyLoad(exports, ["SystemPortpair"], () => require("./systemPortpair"));

export { SystemProxyarpArgs, SystemProxyarpState } from "./systemProxyarp";
export type SystemProxyarp = import("./systemProxyarp").SystemProxyarp;
export const SystemProxyarp: typeof import("./systemProxyarp").SystemProxyarp = null as any;
utilities.lazyLoad(exports, ["SystemProxyarp"], () => require("./systemProxyarp"));

export { SystemResourcelimitsArgs, SystemResourcelimitsState } from "./systemResourcelimits";
export type SystemResourcelimits = import("./systemResourcelimits").SystemResourcelimits;
export const SystemResourcelimits: typeof import("./systemResourcelimits").SystemResourcelimits = null as any;
utilities.lazyLoad(exports, ["SystemResourcelimits"], () => require("./systemResourcelimits"));

export { SystemSessionttlArgs, SystemSessionttlState } from "./systemSessionttl";
export type SystemSessionttl = import("./systemSessionttl").SystemSessionttl;
export const SystemSessionttl: typeof import("./systemSessionttl").SystemSessionttl = null as any;
utilities.lazyLoad(exports, ["SystemSessionttl"], () => require("./systemSessionttl"));

export { SystemSettingsArgs, SystemSettingsState } from "./systemSettings";
export type SystemSettings = import("./systemSettings").SystemSettings;
export const SystemSettings: typeof import("./systemSettings").SystemSettings = null as any;
utilities.lazyLoad(exports, ["SystemSettings"], () => require("./systemSettings"));

export { SystemSflowArgs, SystemSflowState } from "./systemSflow";
export type SystemSflow = import("./systemSflow").SystemSflow;
export const SystemSflow: typeof import("./systemSflow").SystemSflow = null as any;
utilities.lazyLoad(exports, ["SystemSflow"], () => require("./systemSflow"));

export { SystemSnifferprofileArgs, SystemSnifferprofileState } from "./systemSnifferprofile";
export type SystemSnifferprofile = import("./systemSnifferprofile").SystemSnifferprofile;
export const SystemSnifferprofile: typeof import("./systemSnifferprofile").SystemSnifferprofile = null as any;
utilities.lazyLoad(exports, ["SystemSnifferprofile"], () => require("./systemSnifferprofile"));

export { SystemTosbasedpriorityArgs, SystemTosbasedpriorityState } from "./systemTosbasedpriority";
export type SystemTosbasedpriority = import("./systemTosbasedpriority").SystemTosbasedpriority;
export const SystemTosbasedpriority: typeof import("./systemTosbasedpriority").SystemTosbasedpriority = null as any;
utilities.lazyLoad(exports, ["SystemTosbasedpriority"], () => require("./systemTosbasedpriority"));

export { SystemVdomArgs, SystemVdomState } from "./systemVdom";
export type SystemVdom = import("./systemVdom").SystemVdom;
export const SystemVdom: typeof import("./systemVdom").SystemVdom = null as any;
utilities.lazyLoad(exports, ["SystemVdom"], () => require("./systemVdom"));

export { SystemVdomdnsArgs, SystemVdomdnsState } from "./systemVdomdns";
export type SystemVdomdns = import("./systemVdomdns").SystemVdomdns;
export const SystemVdomdns: typeof import("./systemVdomdns").SystemVdomdns = null as any;
utilities.lazyLoad(exports, ["SystemVdomdns"], () => require("./systemVdomdns"));

export { SystemVdompropertyArgs, SystemVdompropertyState } from "./systemVdomproperty";
export type SystemVdomproperty = import("./systemVdomproperty").SystemVdomproperty;
export const SystemVdomproperty: typeof import("./systemVdomproperty").SystemVdomproperty = null as any;
utilities.lazyLoad(exports, ["SystemVdomproperty"], () => require("./systemVdomproperty"));

export { SystemVxlanArgs, SystemVxlanState } from "./systemVxlan";
export type SystemVxlan = import("./systemVxlan").SystemVxlan;
export const SystemVxlan: typeof import("./systemVxlan").SystemVxlan = null as any;
utilities.lazyLoad(exports, ["SystemVxlan"], () => require("./systemVxlan"));

export { SystemWebArgs, SystemWebState } from "./systemWeb";
export type SystemWeb = import("./systemWeb").SystemWeb;
export const SystemWeb: typeof import("./systemWeb").SystemWeb = null as any;
utilities.lazyLoad(exports, ["SystemWeb"], () => require("./systemWeb"));

export { SystemZoneArgs, SystemZoneState } from "./systemZone";
export type SystemZone = import("./systemZone").SystemZone;
export const SystemZone: typeof import("./systemZone").SystemZone = null as any;
utilities.lazyLoad(exports, ["SystemZone"], () => require("./systemZone"));

export { SystemaliasCommandArgs, SystemaliasCommandState } from "./systemaliasCommand";
export type SystemaliasCommand = import("./systemaliasCommand").SystemaliasCommand;
export const SystemaliasCommand: typeof import("./systemaliasCommand").SystemaliasCommand = null as any;
utilities.lazyLoad(exports, ["SystemaliasCommand"], () => require("./systemaliasCommand"));

export { SystemaliasGroupArgs, SystemaliasGroupState } from "./systemaliasGroup";
export type SystemaliasGroup = import("./systemaliasGroup").SystemaliasGroup;
export const SystemaliasGroup: typeof import("./systemaliasGroup").SystemaliasGroup = null as any;
utilities.lazyLoad(exports, ["SystemaliasGroup"], () => require("./systemaliasGroup"));

export { SystemautoupdateClientoverrideArgs, SystemautoupdateClientoverrideState } from "./systemautoupdateClientoverride";
export type SystemautoupdateClientoverride = import("./systemautoupdateClientoverride").SystemautoupdateClientoverride;
export const SystemautoupdateClientoverride: typeof import("./systemautoupdateClientoverride").SystemautoupdateClientoverride = null as any;
utilities.lazyLoad(exports, ["SystemautoupdateClientoverride"], () => require("./systemautoupdateClientoverride"));

export { SystemautoupdateOverrideArgs, SystemautoupdateOverrideState } from "./systemautoupdateOverride";
export type SystemautoupdateOverride = import("./systemautoupdateOverride").SystemautoupdateOverride;
export const SystemautoupdateOverride: typeof import("./systemautoupdateOverride").SystemautoupdateOverride = null as any;
utilities.lazyLoad(exports, ["SystemautoupdateOverride"], () => require("./systemautoupdateOverride"));

export { SystemautoupdatePushupdateArgs, SystemautoupdatePushupdateState } from "./systemautoupdatePushupdate";
export type SystemautoupdatePushupdate = import("./systemautoupdatePushupdate").SystemautoupdatePushupdate;
export const SystemautoupdatePushupdate: typeof import("./systemautoupdatePushupdate").SystemautoupdatePushupdate = null as any;
utilities.lazyLoad(exports, ["SystemautoupdatePushupdate"], () => require("./systemautoupdatePushupdate"));

export { SystemautoupdateScheduleArgs, SystemautoupdateScheduleState } from "./systemautoupdateSchedule";
export type SystemautoupdateSchedule = import("./systemautoupdateSchedule").SystemautoupdateSchedule;
export const SystemautoupdateSchedule: typeof import("./systemautoupdateSchedule").SystemautoupdateSchedule = null as any;
utilities.lazyLoad(exports, ["SystemautoupdateSchedule"], () => require("./systemautoupdateSchedule"));

export { SystemautoupdateTunnelingArgs, SystemautoupdateTunnelingState } from "./systemautoupdateTunneling";
export type SystemautoupdateTunneling = import("./systemautoupdateTunneling").SystemautoupdateTunneling;
export const SystemautoupdateTunneling: typeof import("./systemautoupdateTunneling").SystemautoupdateTunneling = null as any;
utilities.lazyLoad(exports, ["SystemautoupdateTunneling"], () => require("./systemautoupdateTunneling"));

export { SystemcertificateCaArgs, SystemcertificateCaState } from "./systemcertificateCa";
export type SystemcertificateCa = import("./systemcertificateCa").SystemcertificateCa;
export const SystemcertificateCa: typeof import("./systemcertificateCa").SystemcertificateCa = null as any;
utilities.lazyLoad(exports, ["SystemcertificateCa"], () => require("./systemcertificateCa"));

export { SystemcertificateCrlArgs, SystemcertificateCrlState } from "./systemcertificateCrl";
export type SystemcertificateCrl = import("./systemcertificateCrl").SystemcertificateCrl;
export const SystemcertificateCrl: typeof import("./systemcertificateCrl").SystemcertificateCrl = null as any;
utilities.lazyLoad(exports, ["SystemcertificateCrl"], () => require("./systemcertificateCrl"));

export { SystemcertificateLocalArgs, SystemcertificateLocalState } from "./systemcertificateLocal";
export type SystemcertificateLocal = import("./systemcertificateLocal").SystemcertificateLocal;
export const SystemcertificateLocal: typeof import("./systemcertificateLocal").SystemcertificateLocal = null as any;
utilities.lazyLoad(exports, ["SystemcertificateLocal"], () => require("./systemcertificateLocal"));

export { SystemcertificateOcspArgs, SystemcertificateOcspState } from "./systemcertificateOcsp";
export type SystemcertificateOcsp = import("./systemcertificateOcsp").SystemcertificateOcsp;
export const SystemcertificateOcsp: typeof import("./systemcertificateOcsp").SystemcertificateOcsp = null as any;
utilities.lazyLoad(exports, ["SystemcertificateOcsp"], () => require("./systemcertificateOcsp"));

export { SystemcertificateRemoteArgs, SystemcertificateRemoteState } from "./systemcertificateRemote";
export type SystemcertificateRemote = import("./systemcertificateRemote").SystemcertificateRemote;
export const SystemcertificateRemote: typeof import("./systemcertificateRemote").SystemcertificateRemote = null as any;
utilities.lazyLoad(exports, ["SystemcertificateRemote"], () => require("./systemcertificateRemote"));

export { SystemdhcpServerArgs, SystemdhcpServerState } from "./systemdhcpServer";
export type SystemdhcpServer = import("./systemdhcpServer").SystemdhcpServer;
export const SystemdhcpServer: typeof import("./systemdhcpServer").SystemdhcpServer = null as any;
utilities.lazyLoad(exports, ["SystemdhcpServer"], () => require("./systemdhcpServer"));

export { SystemptpInterfacepolicyArgs, SystemptpInterfacepolicyState } from "./systemptpInterfacepolicy";
export type SystemptpInterfacepolicy = import("./systemptpInterfacepolicy").SystemptpInterfacepolicy;
export const SystemptpInterfacepolicy: typeof import("./systemptpInterfacepolicy").SystemptpInterfacepolicy = null as any;
utilities.lazyLoad(exports, ["SystemptpInterfacepolicy"], () => require("./systemptpInterfacepolicy"));

export { SystemptpProfileArgs, SystemptpProfileState } from "./systemptpProfile";
export type SystemptpProfile = import("./systemptpProfile").SystemptpProfile;
export const SystemptpProfile: typeof import("./systemptpProfile").SystemptpProfile = null as any;
utilities.lazyLoad(exports, ["SystemptpProfile"], () => require("./systemptpProfile"));

export { SystemscheduleGroupArgs, SystemscheduleGroupState } from "./systemscheduleGroup";
export type SystemscheduleGroup = import("./systemscheduleGroup").SystemscheduleGroup;
export const SystemscheduleGroup: typeof import("./systemscheduleGroup").SystemscheduleGroup = null as any;
utilities.lazyLoad(exports, ["SystemscheduleGroup"], () => require("./systemscheduleGroup"));

export { SystemscheduleOnetimeArgs, SystemscheduleOnetimeState } from "./systemscheduleOnetime";
export type SystemscheduleOnetime = import("./systemscheduleOnetime").SystemscheduleOnetime;
export const SystemscheduleOnetime: typeof import("./systemscheduleOnetime").SystemscheduleOnetime = null as any;
utilities.lazyLoad(exports, ["SystemscheduleOnetime"], () => require("./systemscheduleOnetime"));

export { SystemscheduleRecurringArgs, SystemscheduleRecurringState } from "./systemscheduleRecurring";
export type SystemscheduleRecurring = import("./systemscheduleRecurring").SystemscheduleRecurring;
export const SystemscheduleRecurring: typeof import("./systemscheduleRecurring").SystemscheduleRecurring = null as any;
utilities.lazyLoad(exports, ["SystemscheduleRecurring"], () => require("./systemscheduleRecurring"));

export { SystemsnmpCommunityArgs, SystemsnmpCommunityState } from "./systemsnmpCommunity";
export type SystemsnmpCommunity = import("./systemsnmpCommunity").SystemsnmpCommunity;
export const SystemsnmpCommunity: typeof import("./systemsnmpCommunity").SystemsnmpCommunity = null as any;
utilities.lazyLoad(exports, ["SystemsnmpCommunity"], () => require("./systemsnmpCommunity"));

export { SystemsnmpSysinfoArgs, SystemsnmpSysinfoState } from "./systemsnmpSysinfo";
export type SystemsnmpSysinfo = import("./systemsnmpSysinfo").SystemsnmpSysinfo;
export const SystemsnmpSysinfo: typeof import("./systemsnmpSysinfo").SystemsnmpSysinfo = null as any;
utilities.lazyLoad(exports, ["SystemsnmpSysinfo"], () => require("./systemsnmpSysinfo"));

export { SystemsnmpUserArgs, SystemsnmpUserState } from "./systemsnmpUser";
export type SystemsnmpUser = import("./systemsnmpUser").SystemsnmpUser;
export const SystemsnmpUser: typeof import("./systemsnmpUser").SystemsnmpUser = null as any;
utilities.lazyLoad(exports, ["SystemsnmpUser"], () => require("./systemsnmpUser"));

export { UserGroupArgs, UserGroupState } from "./userGroup";
export type UserGroup = import("./userGroup").UserGroup;
export const UserGroup: typeof import("./userGroup").UserGroup = null as any;
utilities.lazyLoad(exports, ["UserGroup"], () => require("./userGroup"));

export { UserLdapArgs, UserLdapState } from "./userLdap";
export type UserLdap = import("./userLdap").UserLdap;
export const UserLdap: typeof import("./userLdap").UserLdap = null as any;
utilities.lazyLoad(exports, ["UserLdap"], () => require("./userLdap"));

export { UserLocalArgs, UserLocalState } from "./userLocal";
export type UserLocal = import("./userLocal").UserLocal;
export const UserLocal: typeof import("./userLocal").UserLocal = null as any;
utilities.lazyLoad(exports, ["UserLocal"], () => require("./userLocal"));

export { UserPeerArgs, UserPeerState } from "./userPeer";
export type UserPeer = import("./userPeer").UserPeer;
export const UserPeer: typeof import("./userPeer").UserPeer = null as any;
utilities.lazyLoad(exports, ["UserPeer"], () => require("./userPeer"));

export { UserPeergrpArgs, UserPeergrpState } from "./userPeergrp";
export type UserPeergrp = import("./userPeergrp").UserPeergrp;
export const UserPeergrp: typeof import("./userPeergrp").UserPeergrp = null as any;
utilities.lazyLoad(exports, ["UserPeergrp"], () => require("./userPeergrp"));

export { UserRadiusArgs, UserRadiusState } from "./userRadius";
export type UserRadius = import("./userRadius").UserRadius;
export const UserRadius: typeof import("./userRadius").UserRadius = null as any;
utilities.lazyLoad(exports, ["UserRadius"], () => require("./userRadius"));

export { UserSettingArgs, UserSettingState } from "./userSetting";
export type UserSetting = import("./userSetting").UserSetting;
export const UserSetting: typeof import("./userSetting").UserSetting = null as any;
utilities.lazyLoad(exports, ["UserSetting"], () => require("./userSetting"));

export { UserTacacsArgs, UserTacacsState } from "./userTacacs";
export type UserTacacs = import("./userTacacs").UserTacacs;
export const UserTacacs: typeof import("./userTacacs").UserTacacs = null as any;
utilities.lazyLoad(exports, ["UserTacacs"], () => require("./userTacacs"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "fortiswitch:index/alertemailSetting:AlertemailSetting":
                return new AlertemailSetting(name, <any>undefined, { urn })
            case "fortiswitch:index/guiConsole:GuiConsole":
                return new GuiConsole(name, <any>undefined, { urn })
            case "fortiswitch:index/jsonGenericApi:JsonGenericApi":
                return new JsonGenericApi(name, <any>undefined, { urn })
            case "fortiswitch:index/logCustomfield:LogCustomfield":
                return new LogCustomfield(name, <any>undefined, { urn })
            case "fortiswitch:index/logEventfilter:LogEventfilter":
                return new LogEventfilter(name, <any>undefined, { urn })
            case "fortiswitch:index/logGui:LogGui":
                return new LogGui(name, <any>undefined, { urn })
            case "fortiswitch:index/logdiskFilter:LogdiskFilter":
                return new LogdiskFilter(name, <any>undefined, { urn })
            case "fortiswitch:index/logdiskSetting:LogdiskSetting":
                return new LogdiskSetting(name, <any>undefined, { urn })
            case "fortiswitch:index/logfortianalyzer2Filter:Logfortianalyzer2Filter":
                return new Logfortianalyzer2Filter(name, <any>undefined, { urn })
            case "fortiswitch:index/logfortianalyzer2Setting:Logfortianalyzer2Setting":
                return new Logfortianalyzer2Setting(name, <any>undefined, { urn })
            case "fortiswitch:index/logfortianalyzer3Filter:Logfortianalyzer3Filter":
                return new Logfortianalyzer3Filter(name, <any>undefined, { urn })
            case "fortiswitch:index/logfortianalyzer3Setting:Logfortianalyzer3Setting":
                return new Logfortianalyzer3Setting(name, <any>undefined, { urn })
            case "fortiswitch:index/logfortianalyzerFilter:LogfortianalyzerFilter":
                return new LogfortianalyzerFilter(name, <any>undefined, { urn })
            case "fortiswitch:index/logfortianalyzerOverridefilter:LogfortianalyzerOverridefilter":
                return new LogfortianalyzerOverridefilter(name, <any>undefined, { urn })
            case "fortiswitch:index/logfortianalyzerOverridesetting:LogfortianalyzerOverridesetting":
                return new LogfortianalyzerOverridesetting(name, <any>undefined, { urn })
            case "fortiswitch:index/logfortianalyzerSetting:LogfortianalyzerSetting":
                return new LogfortianalyzerSetting(name, <any>undefined, { urn })
            case "fortiswitch:index/logfortiguardSetting:LogfortiguardSetting":
                return new LogfortiguardSetting(name, <any>undefined, { urn })
            case "fortiswitch:index/logmemoryFilter:LogmemoryFilter":
                return new LogmemoryFilter(name, <any>undefined, { urn })
            case "fortiswitch:index/logmemoryGlobalsetting:LogmemoryGlobalsetting":
                return new LogmemoryGlobalsetting(name, <any>undefined, { urn })
            case "fortiswitch:index/logmemorySetting:LogmemorySetting":
                return new LogmemorySetting(name, <any>undefined, { urn })
            case "fortiswitch:index/logremoteSetting:LogremoteSetting":
                return new LogremoteSetting(name, <any>undefined, { urn })
            case "fortiswitch:index/logsyslogd2Filter:Logsyslogd2Filter":
                return new Logsyslogd2Filter(name, <any>undefined, { urn })
            case "fortiswitch:index/logsyslogd2Setting:Logsyslogd2Setting":
                return new Logsyslogd2Setting(name, <any>undefined, { urn })
            case "fortiswitch:index/logsyslogd3Filter:Logsyslogd3Filter":
                return new Logsyslogd3Filter(name, <any>undefined, { urn })
            case "fortiswitch:index/logsyslogd3Setting:Logsyslogd3Setting":
                return new Logsyslogd3Setting(name, <any>undefined, { urn })
            case "fortiswitch:index/logsyslogdFilter:LogsyslogdFilter":
                return new LogsyslogdFilter(name, <any>undefined, { urn })
            case "fortiswitch:index/logsyslogdOverridefilter:LogsyslogdOverridefilter":
                return new LogsyslogdOverridefilter(name, <any>undefined, { urn })
            case "fortiswitch:index/logsyslogdOverridesetting:LogsyslogdOverridesetting":
                return new LogsyslogdOverridesetting(name, <any>undefined, { urn })
            case "fortiswitch:index/logsyslogdSetting:LogsyslogdSetting":
                return new LogsyslogdSetting(name, <any>undefined, { urn })
            case "fortiswitch:index/routerAccesslist6:RouterAccesslist6":
                return new RouterAccesslist6(name, <any>undefined, { urn })
            case "fortiswitch:index/routerAccesslist:RouterAccesslist":
                return new RouterAccesslist(name, <any>undefined, { urn })
            case "fortiswitch:index/routerAspathlist:RouterAspathlist":
                return new RouterAspathlist(name, <any>undefined, { urn })
            case "fortiswitch:index/routerAuthpath:RouterAuthpath":
                return new RouterAuthpath(name, <any>undefined, { urn })
            case "fortiswitch:index/routerBgp:RouterBgp":
                return new RouterBgp(name, <any>undefined, { urn })
            case "fortiswitch:index/routerCommunitylist:RouterCommunitylist":
                return new RouterCommunitylist(name, <any>undefined, { urn })
            case "fortiswitch:index/routerGwdetect:RouterGwdetect":
                return new RouterGwdetect(name, <any>undefined, { urn })
            case "fortiswitch:index/routerIsis:RouterIsis":
                return new RouterIsis(name, <any>undefined, { urn })
            case "fortiswitch:index/routerKeychain:RouterKeychain":
                return new RouterKeychain(name, <any>undefined, { urn })
            case "fortiswitch:index/routerMulticast:RouterMulticast":
                return new RouterMulticast(name, <any>undefined, { urn })
            case "fortiswitch:index/routerMulticastflow:RouterMulticastflow":
                return new RouterMulticastflow(name, <any>undefined, { urn })
            case "fortiswitch:index/routerOspf6:RouterOspf6":
                return new RouterOspf6(name, <any>undefined, { urn })
            case "fortiswitch:index/routerOspf:RouterOspf":
                return new RouterOspf(name, <any>undefined, { urn })
            case "fortiswitch:index/routerPolicy:RouterPolicy":
                return new RouterPolicy(name, <any>undefined, { urn })
            case "fortiswitch:index/routerPrefixlist6:RouterPrefixlist6":
                return new RouterPrefixlist6(name, <any>undefined, { urn })
            case "fortiswitch:index/routerPrefixlist:RouterPrefixlist":
                return new RouterPrefixlist(name, <any>undefined, { urn })
            case "fortiswitch:index/routerRip:RouterRip":
                return new RouterRip(name, <any>undefined, { urn })
            case "fortiswitch:index/routerRipng:RouterRipng":
                return new RouterRipng(name, <any>undefined, { urn })
            case "fortiswitch:index/routerRoutemap:RouterRoutemap":
                return new RouterRoutemap(name, <any>undefined, { urn })
            case "fortiswitch:index/routerSetting:RouterSetting":
                return new RouterSetting(name, <any>undefined, { urn })
            case "fortiswitch:index/routerStatic6:RouterStatic6":
                return new RouterStatic6(name, <any>undefined, { urn })
            case "fortiswitch:index/routerStatic:RouterStatic":
                return new RouterStatic(name, <any>undefined, { urn })
            case "fortiswitch:index/routerVrf:RouterVrf":
                return new RouterVrf(name, <any>undefined, { urn })
            case "fortiswitch:index/routerbgpNeighbor:RouterbgpNeighbor":
                return new RouterbgpNeighbor(name, <any>undefined, { urn })
            case "fortiswitch:index/routerbgpNetwork6:RouterbgpNetwork6":
                return new RouterbgpNetwork6(name, <any>undefined, { urn })
            case "fortiswitch:index/routerbgpNetwork:RouterbgpNetwork":
                return new RouterbgpNetwork(name, <any>undefined, { urn })
            case "fortiswitch:index/routerospf6Area:Routerospf6Area":
                return new Routerospf6Area(name, <any>undefined, { urn })
            case "fortiswitch:index/routerospf6Interface:Routerospf6Interface":
                return new Routerospf6Interface(name, <any>undefined, { urn })
            case "fortiswitch:index/routerospf6Redistribute:Routerospf6Redistribute":
                return new Routerospf6Redistribute(name, <any>undefined, { urn })
            case "fortiswitch:index/routerospfArea:RouterospfArea":
                return new RouterospfArea(name, <any>undefined, { urn })
            case "fortiswitch:index/routerospfInterface:RouterospfInterface":
                return new RouterospfInterface(name, <any>undefined, { urn })
            case "fortiswitch:index/routerospfNetwork:RouterospfNetwork":
                return new RouterospfNetwork(name, <any>undefined, { urn })
            case "fortiswitch:index/switchAutoislportgroup:SwitchAutoislportgroup":
                return new SwitchAutoislportgroup(name, <any>undefined, { urn })
            case "fortiswitch:index/switchAutonetwork:SwitchAutonetwork":
                return new SwitchAutonetwork(name, <any>undefined, { urn })
            case "fortiswitch:index/switchDomain:SwitchDomain":
                return new SwitchDomain(name, <any>undefined, { urn })
            case "fortiswitch:index/switchGlobal:SwitchGlobal":
                return new SwitchGlobal(name, <any>undefined, { urn })
            case "fortiswitch:index/switchInterface:SwitchInterface":
                return new SwitchInterface(name, <any>undefined, { urn })
            case "fortiswitch:index/switchIpmacbinding:SwitchIpmacbinding":
                return new SwitchIpmacbinding(name, <any>undefined, { urn })
            case "fortiswitch:index/switchMirror:SwitchMirror":
                return new SwitchMirror(name, <any>undefined, { urn })
            case "fortiswitch:index/switchPhymode:SwitchPhymode":
                return new SwitchPhymode(name, <any>undefined, { urn })
            case "fortiswitch:index/switchPhysicalport:SwitchPhysicalport":
                return new SwitchPhysicalport(name, <any>undefined, { urn })
            case "fortiswitch:index/switchQuarantine:SwitchQuarantine":
                return new SwitchQuarantine(name, <any>undefined, { urn })
            case "fortiswitch:index/switchRaguardpolicy:SwitchRaguardpolicy":
                return new SwitchRaguardpolicy(name, <any>undefined, { urn })
            case "fortiswitch:index/switchSecurityfeature:SwitchSecurityfeature":
                return new SwitchSecurityfeature(name, <any>undefined, { urn })
            case "fortiswitch:index/switchStaticmac:SwitchStaticmac":
                return new SwitchStaticmac(name, <any>undefined, { urn })
            case "fortiswitch:index/switchStormcontrol:SwitchStormcontrol":
                return new SwitchStormcontrol(name, <any>undefined, { urn })
            case "fortiswitch:index/switchTrunk:SwitchTrunk":
                return new SwitchTrunk(name, <any>undefined, { urn })
            case "fortiswitch:index/switchVirtualwire:SwitchVirtualwire":
                return new SwitchVirtualwire(name, <any>undefined, { urn })
            case "fortiswitch:index/switchVlan:SwitchVlan":
                return new SwitchVlan(name, <any>undefined, { urn })
            case "fortiswitch:index/switchVlantpid:SwitchVlantpid":
                return new SwitchVlantpid(name, <any>undefined, { urn })
            case "fortiswitch:index/switchacl8021X:Switchacl8021X":
                return new Switchacl8021X(name, <any>undefined, { urn })
            case "fortiswitch:index/switchaclEgress:SwitchaclEgress":
                return new SwitchaclEgress(name, <any>undefined, { urn })
            case "fortiswitch:index/switchaclIngress:SwitchaclIngress":
                return new SwitchaclIngress(name, <any>undefined, { urn })
            case "fortiswitch:index/switchaclPolicer:SwitchaclPolicer":
                return new SwitchaclPolicer(name, <any>undefined, { urn })
            case "fortiswitch:index/switchaclPrelookup:SwitchaclPrelookup":
                return new SwitchaclPrelookup(name, <any>undefined, { urn })
            case "fortiswitch:index/switchaclSettings:SwitchaclSettings":
                return new SwitchaclSettings(name, <any>undefined, { urn })
            case "fortiswitch:index/switchaclserviceCustom:SwitchaclserviceCustom":
                return new SwitchaclserviceCustom(name, <any>undefined, { urn })
            case "fortiswitch:index/switchcontrollerGlobal:SwitchcontrollerGlobal":
                return new SwitchcontrollerGlobal(name, <any>undefined, { urn })
            case "fortiswitch:index/switchigmpsnoopingGlobals:SwitchigmpsnoopingGlobals":
                return new SwitchigmpsnoopingGlobals(name, <any>undefined, { urn })
            case "fortiswitch:index/switchlldpProfile:SwitchlldpProfile":
                return new SwitchlldpProfile(name, <any>undefined, { urn })
            case "fortiswitch:index/switchlldpSettings:SwitchlldpSettings":
                return new SwitchlldpSettings(name, <any>undefined, { urn })
            case "fortiswitch:index/switchmacsecProfile:SwitchmacsecProfile":
                return new SwitchmacsecProfile(name, <any>undefined, { urn })
            case "fortiswitch:index/switchmldsnoopingGlobals:SwitchmldsnoopingGlobals":
                return new SwitchmldsnoopingGlobals(name, <any>undefined, { urn })
            case "fortiswitch:index/switchnetworkmonitorDirected:SwitchnetworkmonitorDirected":
                return new SwitchnetworkmonitorDirected(name, <any>undefined, { urn })
            case "fortiswitch:index/switchnetworkmonitorSettings:SwitchnetworkmonitorSettings":
                return new SwitchnetworkmonitorSettings(name, <any>undefined, { urn })
            case "fortiswitch:index/switchptpPolicy:SwitchptpPolicy":
                return new SwitchptpPolicy(name, <any>undefined, { urn })
            case "fortiswitch:index/switchptpSettings:SwitchptpSettings":
                return new SwitchptpSettings(name, <any>undefined, { urn })
            case "fortiswitch:index/switchqosDot1pmap:SwitchqosDot1pmap":
                return new SwitchqosDot1pmap(name, <any>undefined, { urn })
            case "fortiswitch:index/switchqosIpdscpmap:SwitchqosIpdscpmap":
                return new SwitchqosIpdscpmap(name, <any>undefined, { urn })
            case "fortiswitch:index/switchqosQospolicy:SwitchqosQospolicy":
                return new SwitchqosQospolicy(name, <any>undefined, { urn })
            case "fortiswitch:index/switchstpInstance:SwitchstpInstance":
                return new SwitchstpInstance(name, <any>undefined, { urn })
            case "fortiswitch:index/switchstpSettings:SwitchstpSettings":
                return new SwitchstpSettings(name, <any>undefined, { urn })
            case "fortiswitch:index/systemAccprofile:SystemAccprofile":
                return new SystemAccprofile(name, <any>undefined, { urn })
            case "fortiswitch:index/systemAdmin:SystemAdmin":
                return new SystemAdmin(name, <any>undefined, { urn })
            case "fortiswitch:index/systemAlarm:SystemAlarm":
                return new SystemAlarm(name, <any>undefined, { urn })
            case "fortiswitch:index/systemAlertemail:SystemAlertemail":
                return new SystemAlertemail(name, <any>undefined, { urn })
            case "fortiswitch:index/systemArptable:SystemArptable":
                return new SystemArptable(name, <any>undefined, { urn })
            case "fortiswitch:index/systemAutomationaction:SystemAutomationaction":
                return new SystemAutomationaction(name, <any>undefined, { urn })
            case "fortiswitch:index/systemAutomationdestination:SystemAutomationdestination":
                return new SystemAutomationdestination(name, <any>undefined, { urn })
            case "fortiswitch:index/systemAutomationstitch:SystemAutomationstitch":
                return new SystemAutomationstitch(name, <any>undefined, { urn })
            case "fortiswitch:index/systemAutomationtrigger:SystemAutomationtrigger":
                return new SystemAutomationtrigger(name, <any>undefined, { urn })
            case "fortiswitch:index/systemAutoscript:SystemAutoscript":
                return new SystemAutoscript(name, <any>undefined, { urn })
            case "fortiswitch:index/systemBugreport:SystemBugreport":
                return new SystemBugreport(name, <any>undefined, { urn })
            case "fortiswitch:index/systemCentralmanagement:SystemCentralmanagement":
                return new SystemCentralmanagement(name, <any>undefined, { urn })
            case "fortiswitch:index/systemConsole:SystemConsole":
                return new SystemConsole(name, <any>undefined, { urn })
            case "fortiswitch:index/systemDns:SystemDns":
                return new SystemDns(name, <any>undefined, { urn })
            case "fortiswitch:index/systemDnsdatabase:SystemDnsdatabase":
                return new SystemDnsdatabase(name, <any>undefined, { urn })
            case "fortiswitch:index/systemDnsserver:SystemDnsserver":
                return new SystemDnsserver(name, <any>undefined, { urn })
            case "fortiswitch:index/systemEmailserver:SystemEmailserver":
                return new SystemEmailserver(name, <any>undefined, { urn })
            case "fortiswitch:index/systemFlancloud:SystemFlancloud":
                return new SystemFlancloud(name, <any>undefined, { urn })
            case "fortiswitch:index/systemFlowexport:SystemFlowexport":
                return new SystemFlowexport(name, <any>undefined, { urn })
            case "fortiswitch:index/systemFm:SystemFm":
                return new SystemFm(name, <any>undefined, { urn })
            case "fortiswitch:index/systemFortianalyzer2:SystemFortianalyzer2":
                return new SystemFortianalyzer2(name, <any>undefined, { urn })
            case "fortiswitch:index/systemFortianalyzer3:SystemFortianalyzer3":
                return new SystemFortianalyzer3(name, <any>undefined, { urn })
            case "fortiswitch:index/systemFortianalyzer:SystemFortianalyzer":
                return new SystemFortianalyzer(name, <any>undefined, { urn })
            case "fortiswitch:index/systemFortiguard:SystemFortiguard":
                return new SystemFortiguard(name, <any>undefined, { urn })
            case "fortiswitch:index/systemFortimanager:SystemFortimanager":
                return new SystemFortimanager(name, <any>undefined, { urn })
            case "fortiswitch:index/systemFswcloud:SystemFswcloud":
                return new SystemFswcloud(name, <any>undefined, { urn })
            case "fortiswitch:index/systemGlobal:SystemGlobal":
                return new SystemGlobal(name, <any>undefined, { urn })
            case "fortiswitch:index/systemInterface:SystemInterface":
                return new SystemInterface(name, <any>undefined, { urn })
            case "fortiswitch:index/systemIpv6neighborcache:SystemIpv6neighborcache":
                return new SystemIpv6neighborcache(name, <any>undefined, { urn })
            case "fortiswitch:index/systemLinkmonitor:SystemLinkmonitor":
                return new SystemLinkmonitor(name, <any>undefined, { urn })
            case "fortiswitch:index/systemLocation:SystemLocation":
                return new SystemLocation(name, <any>undefined, { urn })
            case "fortiswitch:index/systemMacaddresstable:SystemMacaddresstable":
                return new SystemMacaddresstable(name, <any>undefined, { urn })
            case "fortiswitch:index/systemManagementtunnel:SystemManagementtunnel":
                return new SystemManagementtunnel(name, <any>undefined, { urn })
            case "fortiswitch:index/systemNtp:SystemNtp":
                return new SystemNtp(name, <any>undefined, { urn })
            case "fortiswitch:index/systemObjecttag:SystemObjecttag":
                return new SystemObjecttag(name, <any>undefined, { urn })
            case "fortiswitch:index/systemPasswordpolicy:SystemPasswordpolicy":
                return new SystemPasswordpolicy(name, <any>undefined, { urn })
            case "fortiswitch:index/systemPortpair:SystemPortpair":
                return new SystemPortpair(name, <any>undefined, { urn })
            case "fortiswitch:index/systemProxyarp:SystemProxyarp":
                return new SystemProxyarp(name, <any>undefined, { urn })
            case "fortiswitch:index/systemResourcelimits:SystemResourcelimits":
                return new SystemResourcelimits(name, <any>undefined, { urn })
            case "fortiswitch:index/systemSessionttl:SystemSessionttl":
                return new SystemSessionttl(name, <any>undefined, { urn })
            case "fortiswitch:index/systemSettings:SystemSettings":
                return new SystemSettings(name, <any>undefined, { urn })
            case "fortiswitch:index/systemSflow:SystemSflow":
                return new SystemSflow(name, <any>undefined, { urn })
            case "fortiswitch:index/systemSnifferprofile:SystemSnifferprofile":
                return new SystemSnifferprofile(name, <any>undefined, { urn })
            case "fortiswitch:index/systemTosbasedpriority:SystemTosbasedpriority":
                return new SystemTosbasedpriority(name, <any>undefined, { urn })
            case "fortiswitch:index/systemVdom:SystemVdom":
                return new SystemVdom(name, <any>undefined, { urn })
            case "fortiswitch:index/systemVdomdns:SystemVdomdns":
                return new SystemVdomdns(name, <any>undefined, { urn })
            case "fortiswitch:index/systemVdomproperty:SystemVdomproperty":
                return new SystemVdomproperty(name, <any>undefined, { urn })
            case "fortiswitch:index/systemVxlan:SystemVxlan":
                return new SystemVxlan(name, <any>undefined, { urn })
            case "fortiswitch:index/systemWeb:SystemWeb":
                return new SystemWeb(name, <any>undefined, { urn })
            case "fortiswitch:index/systemZone:SystemZone":
                return new SystemZone(name, <any>undefined, { urn })
            case "fortiswitch:index/systemaliasCommand:SystemaliasCommand":
                return new SystemaliasCommand(name, <any>undefined, { urn })
            case "fortiswitch:index/systemaliasGroup:SystemaliasGroup":
                return new SystemaliasGroup(name, <any>undefined, { urn })
            case "fortiswitch:index/systemautoupdateClientoverride:SystemautoupdateClientoverride":
                return new SystemautoupdateClientoverride(name, <any>undefined, { urn })
            case "fortiswitch:index/systemautoupdateOverride:SystemautoupdateOverride":
                return new SystemautoupdateOverride(name, <any>undefined, { urn })
            case "fortiswitch:index/systemautoupdatePushupdate:SystemautoupdatePushupdate":
                return new SystemautoupdatePushupdate(name, <any>undefined, { urn })
            case "fortiswitch:index/systemautoupdateSchedule:SystemautoupdateSchedule":
                return new SystemautoupdateSchedule(name, <any>undefined, { urn })
            case "fortiswitch:index/systemautoupdateTunneling:SystemautoupdateTunneling":
                return new SystemautoupdateTunneling(name, <any>undefined, { urn })
            case "fortiswitch:index/systemcertificateCa:SystemcertificateCa":
                return new SystemcertificateCa(name, <any>undefined, { urn })
            case "fortiswitch:index/systemcertificateCrl:SystemcertificateCrl":
                return new SystemcertificateCrl(name, <any>undefined, { urn })
            case "fortiswitch:index/systemcertificateLocal:SystemcertificateLocal":
                return new SystemcertificateLocal(name, <any>undefined, { urn })
            case "fortiswitch:index/systemcertificateOcsp:SystemcertificateOcsp":
                return new SystemcertificateOcsp(name, <any>undefined, { urn })
            case "fortiswitch:index/systemcertificateRemote:SystemcertificateRemote":
                return new SystemcertificateRemote(name, <any>undefined, { urn })
            case "fortiswitch:index/systemdhcpServer:SystemdhcpServer":
                return new SystemdhcpServer(name, <any>undefined, { urn })
            case "fortiswitch:index/systemptpInterfacepolicy:SystemptpInterfacepolicy":
                return new SystemptpInterfacepolicy(name, <any>undefined, { urn })
            case "fortiswitch:index/systemptpProfile:SystemptpProfile":
                return new SystemptpProfile(name, <any>undefined, { urn })
            case "fortiswitch:index/systemscheduleGroup:SystemscheduleGroup":
                return new SystemscheduleGroup(name, <any>undefined, { urn })
            case "fortiswitch:index/systemscheduleOnetime:SystemscheduleOnetime":
                return new SystemscheduleOnetime(name, <any>undefined, { urn })
            case "fortiswitch:index/systemscheduleRecurring:SystemscheduleRecurring":
                return new SystemscheduleRecurring(name, <any>undefined, { urn })
            case "fortiswitch:index/systemsnmpCommunity:SystemsnmpCommunity":
                return new SystemsnmpCommunity(name, <any>undefined, { urn })
            case "fortiswitch:index/systemsnmpSysinfo:SystemsnmpSysinfo":
                return new SystemsnmpSysinfo(name, <any>undefined, { urn })
            case "fortiswitch:index/systemsnmpUser:SystemsnmpUser":
                return new SystemsnmpUser(name, <any>undefined, { urn })
            case "fortiswitch:index/userGroup:UserGroup":
                return new UserGroup(name, <any>undefined, { urn })
            case "fortiswitch:index/userLdap:UserLdap":
                return new UserLdap(name, <any>undefined, { urn })
            case "fortiswitch:index/userLocal:UserLocal":
                return new UserLocal(name, <any>undefined, { urn })
            case "fortiswitch:index/userPeer:UserPeer":
                return new UserPeer(name, <any>undefined, { urn })
            case "fortiswitch:index/userPeergrp:UserPeergrp":
                return new UserPeergrp(name, <any>undefined, { urn })
            case "fortiswitch:index/userRadius:UserRadius":
                return new UserRadius(name, <any>undefined, { urn })
            case "fortiswitch:index/userSetting:UserSetting":
                return new UserSetting(name, <any>undefined, { urn })
            case "fortiswitch:index/userTacacs:UserTacacs":
                return new UserTacacs(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("fortiswitch", "index/alertemailSetting", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/guiConsole", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/jsonGenericApi", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/logCustomfield", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/logEventfilter", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/logGui", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/logdiskFilter", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/logdiskSetting", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/logfortianalyzer2Filter", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/logfortianalyzer2Setting", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/logfortianalyzer3Filter", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/logfortianalyzer3Setting", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/logfortianalyzerFilter", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/logfortianalyzerOverridefilter", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/logfortianalyzerOverridesetting", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/logfortianalyzerSetting", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/logfortiguardSetting", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/logmemoryFilter", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/logmemoryGlobalsetting", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/logmemorySetting", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/logremoteSetting", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/logsyslogd2Filter", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/logsyslogd2Setting", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/logsyslogd3Filter", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/logsyslogd3Setting", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/logsyslogdFilter", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/logsyslogdOverridefilter", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/logsyslogdOverridesetting", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/logsyslogdSetting", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/routerAccesslist", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/routerAccesslist6", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/routerAspathlist", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/routerAuthpath", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/routerBgp", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/routerCommunitylist", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/routerGwdetect", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/routerIsis", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/routerKeychain", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/routerMulticast", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/routerMulticastflow", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/routerOspf", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/routerOspf6", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/routerPolicy", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/routerPrefixlist", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/routerPrefixlist6", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/routerRip", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/routerRipng", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/routerRoutemap", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/routerSetting", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/routerStatic", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/routerStatic6", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/routerVrf", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/routerbgpNeighbor", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/routerbgpNetwork", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/routerbgpNetwork6", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/routerospf6Area", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/routerospf6Interface", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/routerospf6Redistribute", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/routerospfArea", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/routerospfInterface", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/routerospfNetwork", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/switchAutoislportgroup", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/switchAutonetwork", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/switchDomain", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/switchGlobal", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/switchInterface", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/switchIpmacbinding", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/switchMirror", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/switchPhymode", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/switchPhysicalport", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/switchQuarantine", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/switchRaguardpolicy", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/switchSecurityfeature", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/switchStaticmac", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/switchStormcontrol", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/switchTrunk", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/switchVirtualwire", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/switchVlan", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/switchVlantpid", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/switchacl8021X", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/switchaclEgress", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/switchaclIngress", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/switchaclPolicer", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/switchaclPrelookup", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/switchaclSettings", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/switchaclserviceCustom", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/switchcontrollerGlobal", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/switchigmpsnoopingGlobals", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/switchlldpProfile", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/switchlldpSettings", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/switchmacsecProfile", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/switchmldsnoopingGlobals", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/switchnetworkmonitorDirected", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/switchnetworkmonitorSettings", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/switchptpPolicy", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/switchptpSettings", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/switchqosDot1pmap", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/switchqosIpdscpmap", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/switchqosQospolicy", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/switchstpInstance", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/switchstpSettings", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/systemAccprofile", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/systemAdmin", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/systemAlarm", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/systemAlertemail", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/systemArptable", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/systemAutomationaction", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/systemAutomationdestination", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/systemAutomationstitch", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/systemAutomationtrigger", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/systemAutoscript", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/systemBugreport", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/systemCentralmanagement", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/systemConsole", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/systemDns", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/systemDnsdatabase", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/systemDnsserver", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/systemEmailserver", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/systemFlancloud", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/systemFlowexport", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/systemFm", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/systemFortianalyzer", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/systemFortianalyzer2", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/systemFortianalyzer3", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/systemFortiguard", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/systemFortimanager", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/systemFswcloud", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/systemGlobal", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/systemInterface", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/systemIpv6neighborcache", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/systemLinkmonitor", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/systemLocation", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/systemMacaddresstable", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/systemManagementtunnel", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/systemNtp", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/systemObjecttag", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/systemPasswordpolicy", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/systemPortpair", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/systemProxyarp", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/systemResourcelimits", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/systemSessionttl", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/systemSettings", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/systemSflow", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/systemSnifferprofile", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/systemTosbasedpriority", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/systemVdom", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/systemVdomdns", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/systemVdomproperty", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/systemVxlan", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/systemWeb", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/systemZone", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/systemaliasCommand", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/systemaliasGroup", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/systemautoupdateClientoverride", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/systemautoupdateOverride", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/systemautoupdatePushupdate", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/systemautoupdateSchedule", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/systemautoupdateTunneling", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/systemcertificateCa", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/systemcertificateCrl", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/systemcertificateLocal", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/systemcertificateOcsp", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/systemcertificateRemote", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/systemdhcpServer", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/systemptpInterfacepolicy", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/systemptpProfile", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/systemscheduleGroup", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/systemscheduleOnetime", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/systemscheduleRecurring", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/systemsnmpCommunity", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/systemsnmpSysinfo", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/systemsnmpUser", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/userGroup", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/userLdap", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/userLocal", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/userPeer", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/userPeergrp", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/userRadius", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/userSetting", _module)
pulumi.runtime.registerResourceModule("fortiswitch", "index/userTacacs", _module)
pulumi.runtime.registerResourcePackage("fortiswitch", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:fortiswitch") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
