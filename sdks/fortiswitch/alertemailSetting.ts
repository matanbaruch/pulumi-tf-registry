// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class AlertemailSetting extends pulumi.CustomResource {
    /**
     * Get an existing AlertemailSetting resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AlertemailSettingState, opts?: pulumi.CustomResourceOptions): AlertemailSetting {
        return new AlertemailSetting(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortiswitch:index/alertemailSetting:AlertemailSetting';

    /**
     * Returns true if the given object is an instance of AlertemailSetting.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AlertemailSetting {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AlertemailSetting.__pulumiType;
    }

    public readonly adminLoginLogs!: pulumi.Output<string>;
    public readonly alertInterval!: pulumi.Output<number>;
    public readonly amcInterfaceBypassMode!: pulumi.Output<string>;
    public readonly antivirusLogs!: pulumi.Output<string>;
    public readonly configurationChangesLogs!: pulumi.Output<string>;
    public readonly criticalInterval!: pulumi.Output<number>;
    public readonly debugInterval!: pulumi.Output<number>;
    public readonly emailInterval!: pulumi.Output<number>;
    public readonly emergencyInterval!: pulumi.Output<number>;
    public readonly errorInterval!: pulumi.Output<number>;
    public readonly fdsLicenseExpiringDays!: pulumi.Output<number>;
    public readonly fdsLicenseExpiringWarning!: pulumi.Output<string>;
    public readonly fdsUpdateLogs!: pulumi.Output<string>;
    public readonly filterMode!: pulumi.Output<string>;
    public readonly firewallAuthenticationFailureLogs!: pulumi.Output<string>;
    public readonly fortiguardLogQuotaWarning!: pulumi.Output<string>;
    public readonly haLogs!: pulumi.Output<string>;
    public readonly informationInterval!: pulumi.Output<number>;
    public readonly ipsLogs!: pulumi.Output<string>;
    public readonly ipsecErrorsLogs!: pulumi.Output<string>;
    public readonly localDiskUsage!: pulumi.Output<number>;
    public readonly logDiskUsageWarning!: pulumi.Output<string>;
    public readonly mailto1!: pulumi.Output<string>;
    public readonly mailto2!: pulumi.Output<string>;
    public readonly mailto3!: pulumi.Output<string>;
    public readonly notificationInterval!: pulumi.Output<number>;
    public readonly pppErrorsLogs!: pulumi.Output<string>;
    public readonly severity!: pulumi.Output<string>;
    public readonly sslvpnAuthenticationErrorsLogs!: pulumi.Output<string>;
    public readonly username!: pulumi.Output<string>;
    public readonly violationTrafficLogs!: pulumi.Output<string>;
    public readonly warningInterval!: pulumi.Output<number>;
    public readonly webfilterLogs!: pulumi.Output<string>;

    /**
     * Create a AlertemailSetting resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: AlertemailSettingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AlertemailSettingArgs | AlertemailSettingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AlertemailSettingState | undefined;
            resourceInputs["adminLoginLogs"] = state ? state.adminLoginLogs : undefined;
            resourceInputs["alertInterval"] = state ? state.alertInterval : undefined;
            resourceInputs["amcInterfaceBypassMode"] = state ? state.amcInterfaceBypassMode : undefined;
            resourceInputs["antivirusLogs"] = state ? state.antivirusLogs : undefined;
            resourceInputs["configurationChangesLogs"] = state ? state.configurationChangesLogs : undefined;
            resourceInputs["criticalInterval"] = state ? state.criticalInterval : undefined;
            resourceInputs["debugInterval"] = state ? state.debugInterval : undefined;
            resourceInputs["emailInterval"] = state ? state.emailInterval : undefined;
            resourceInputs["emergencyInterval"] = state ? state.emergencyInterval : undefined;
            resourceInputs["errorInterval"] = state ? state.errorInterval : undefined;
            resourceInputs["fdsLicenseExpiringDays"] = state ? state.fdsLicenseExpiringDays : undefined;
            resourceInputs["fdsLicenseExpiringWarning"] = state ? state.fdsLicenseExpiringWarning : undefined;
            resourceInputs["fdsUpdateLogs"] = state ? state.fdsUpdateLogs : undefined;
            resourceInputs["filterMode"] = state ? state.filterMode : undefined;
            resourceInputs["firewallAuthenticationFailureLogs"] = state ? state.firewallAuthenticationFailureLogs : undefined;
            resourceInputs["fortiguardLogQuotaWarning"] = state ? state.fortiguardLogQuotaWarning : undefined;
            resourceInputs["haLogs"] = state ? state.haLogs : undefined;
            resourceInputs["informationInterval"] = state ? state.informationInterval : undefined;
            resourceInputs["ipsLogs"] = state ? state.ipsLogs : undefined;
            resourceInputs["ipsecErrorsLogs"] = state ? state.ipsecErrorsLogs : undefined;
            resourceInputs["localDiskUsage"] = state ? state.localDiskUsage : undefined;
            resourceInputs["logDiskUsageWarning"] = state ? state.logDiskUsageWarning : undefined;
            resourceInputs["mailto1"] = state ? state.mailto1 : undefined;
            resourceInputs["mailto2"] = state ? state.mailto2 : undefined;
            resourceInputs["mailto3"] = state ? state.mailto3 : undefined;
            resourceInputs["notificationInterval"] = state ? state.notificationInterval : undefined;
            resourceInputs["pppErrorsLogs"] = state ? state.pppErrorsLogs : undefined;
            resourceInputs["severity"] = state ? state.severity : undefined;
            resourceInputs["sslvpnAuthenticationErrorsLogs"] = state ? state.sslvpnAuthenticationErrorsLogs : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
            resourceInputs["violationTrafficLogs"] = state ? state.violationTrafficLogs : undefined;
            resourceInputs["warningInterval"] = state ? state.warningInterval : undefined;
            resourceInputs["webfilterLogs"] = state ? state.webfilterLogs : undefined;
        } else {
            const args = argsOrState as AlertemailSettingArgs | undefined;
            resourceInputs["adminLoginLogs"] = args ? args.adminLoginLogs : undefined;
            resourceInputs["alertInterval"] = args ? args.alertInterval : undefined;
            resourceInputs["amcInterfaceBypassMode"] = args ? args.amcInterfaceBypassMode : undefined;
            resourceInputs["antivirusLogs"] = args ? args.antivirusLogs : undefined;
            resourceInputs["configurationChangesLogs"] = args ? args.configurationChangesLogs : undefined;
            resourceInputs["criticalInterval"] = args ? args.criticalInterval : undefined;
            resourceInputs["debugInterval"] = args ? args.debugInterval : undefined;
            resourceInputs["emailInterval"] = args ? args.emailInterval : undefined;
            resourceInputs["emergencyInterval"] = args ? args.emergencyInterval : undefined;
            resourceInputs["errorInterval"] = args ? args.errorInterval : undefined;
            resourceInputs["fdsLicenseExpiringDays"] = args ? args.fdsLicenseExpiringDays : undefined;
            resourceInputs["fdsLicenseExpiringWarning"] = args ? args.fdsLicenseExpiringWarning : undefined;
            resourceInputs["fdsUpdateLogs"] = args ? args.fdsUpdateLogs : undefined;
            resourceInputs["filterMode"] = args ? args.filterMode : undefined;
            resourceInputs["firewallAuthenticationFailureLogs"] = args ? args.firewallAuthenticationFailureLogs : undefined;
            resourceInputs["fortiguardLogQuotaWarning"] = args ? args.fortiguardLogQuotaWarning : undefined;
            resourceInputs["haLogs"] = args ? args.haLogs : undefined;
            resourceInputs["informationInterval"] = args ? args.informationInterval : undefined;
            resourceInputs["ipsLogs"] = args ? args.ipsLogs : undefined;
            resourceInputs["ipsecErrorsLogs"] = args ? args.ipsecErrorsLogs : undefined;
            resourceInputs["localDiskUsage"] = args ? args.localDiskUsage : undefined;
            resourceInputs["logDiskUsageWarning"] = args ? args.logDiskUsageWarning : undefined;
            resourceInputs["mailto1"] = args ? args.mailto1 : undefined;
            resourceInputs["mailto2"] = args ? args.mailto2 : undefined;
            resourceInputs["mailto3"] = args ? args.mailto3 : undefined;
            resourceInputs["notificationInterval"] = args ? args.notificationInterval : undefined;
            resourceInputs["pppErrorsLogs"] = args ? args.pppErrorsLogs : undefined;
            resourceInputs["severity"] = args ? args.severity : undefined;
            resourceInputs["sslvpnAuthenticationErrorsLogs"] = args ? args.sslvpnAuthenticationErrorsLogs : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
            resourceInputs["violationTrafficLogs"] = args ? args.violationTrafficLogs : undefined;
            resourceInputs["warningInterval"] = args ? args.warningInterval : undefined;
            resourceInputs["webfilterLogs"] = args ? args.webfilterLogs : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AlertemailSetting.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AlertemailSetting resources.
 */
export interface AlertemailSettingState {
    adminLoginLogs?: pulumi.Input<string>;
    alertInterval?: pulumi.Input<number>;
    amcInterfaceBypassMode?: pulumi.Input<string>;
    antivirusLogs?: pulumi.Input<string>;
    configurationChangesLogs?: pulumi.Input<string>;
    criticalInterval?: pulumi.Input<number>;
    debugInterval?: pulumi.Input<number>;
    emailInterval?: pulumi.Input<number>;
    emergencyInterval?: pulumi.Input<number>;
    errorInterval?: pulumi.Input<number>;
    fdsLicenseExpiringDays?: pulumi.Input<number>;
    fdsLicenseExpiringWarning?: pulumi.Input<string>;
    fdsUpdateLogs?: pulumi.Input<string>;
    filterMode?: pulumi.Input<string>;
    firewallAuthenticationFailureLogs?: pulumi.Input<string>;
    fortiguardLogQuotaWarning?: pulumi.Input<string>;
    haLogs?: pulumi.Input<string>;
    informationInterval?: pulumi.Input<number>;
    ipsLogs?: pulumi.Input<string>;
    ipsecErrorsLogs?: pulumi.Input<string>;
    localDiskUsage?: pulumi.Input<number>;
    logDiskUsageWarning?: pulumi.Input<string>;
    mailto1?: pulumi.Input<string>;
    mailto2?: pulumi.Input<string>;
    mailto3?: pulumi.Input<string>;
    notificationInterval?: pulumi.Input<number>;
    pppErrorsLogs?: pulumi.Input<string>;
    severity?: pulumi.Input<string>;
    sslvpnAuthenticationErrorsLogs?: pulumi.Input<string>;
    username?: pulumi.Input<string>;
    violationTrafficLogs?: pulumi.Input<string>;
    warningInterval?: pulumi.Input<number>;
    webfilterLogs?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AlertemailSetting resource.
 */
export interface AlertemailSettingArgs {
    adminLoginLogs?: pulumi.Input<string>;
    alertInterval?: pulumi.Input<number>;
    amcInterfaceBypassMode?: pulumi.Input<string>;
    antivirusLogs?: pulumi.Input<string>;
    configurationChangesLogs?: pulumi.Input<string>;
    criticalInterval?: pulumi.Input<number>;
    debugInterval?: pulumi.Input<number>;
    emailInterval?: pulumi.Input<number>;
    emergencyInterval?: pulumi.Input<number>;
    errorInterval?: pulumi.Input<number>;
    fdsLicenseExpiringDays?: pulumi.Input<number>;
    fdsLicenseExpiringWarning?: pulumi.Input<string>;
    fdsUpdateLogs?: pulumi.Input<string>;
    filterMode?: pulumi.Input<string>;
    firewallAuthenticationFailureLogs?: pulumi.Input<string>;
    fortiguardLogQuotaWarning?: pulumi.Input<string>;
    haLogs?: pulumi.Input<string>;
    informationInterval?: pulumi.Input<number>;
    ipsLogs?: pulumi.Input<string>;
    ipsecErrorsLogs?: pulumi.Input<string>;
    localDiskUsage?: pulumi.Input<number>;
    logDiskUsageWarning?: pulumi.Input<string>;
    mailto1?: pulumi.Input<string>;
    mailto2?: pulumi.Input<string>;
    mailto3?: pulumi.Input<string>;
    notificationInterval?: pulumi.Input<number>;
    pppErrorsLogs?: pulumi.Input<string>;
    severity?: pulumi.Input<string>;
    sslvpnAuthenticationErrorsLogs?: pulumi.Input<string>;
    username?: pulumi.Input<string>;
    violationTrafficLogs?: pulumi.Input<string>;
    warningInterval?: pulumi.Input<number>;
    webfilterLogs?: pulumi.Input<string>;
}
