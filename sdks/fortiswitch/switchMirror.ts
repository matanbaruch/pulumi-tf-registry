// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SwitchMirror extends pulumi.CustomResource {
    /**
     * Get an existing SwitchMirror resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SwitchMirrorState, opts?: pulumi.CustomResourceOptions): SwitchMirror {
        return new SwitchMirror(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortiswitch:index/switchMirror:SwitchMirror';

    /**
     * Returns true if the given object is an instance of SwitchMirror.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SwitchMirror {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SwitchMirror.__pulumiType;
    }

    public readonly dst!: pulumi.Output<string>;
    public readonly dynamicSortSubtable!: pulumi.Output<string | undefined>;
    public readonly encapGreProtocol!: pulumi.Output<number>;
    public readonly encapIpv4Src!: pulumi.Output<string>;
    public readonly encapIpv4Tos!: pulumi.Output<number>;
    public readonly encapIpv4Ttl!: pulumi.Output<number>;
    public readonly encapMacDst!: pulumi.Output<string>;
    public readonly encapMacSrc!: pulumi.Output<string>;
    public readonly encapVlan!: pulumi.Output<string>;
    public readonly encapVlanCfi!: pulumi.Output<number>;
    public readonly encapVlanId!: pulumi.Output<number>;
    public readonly encapVlanPriority!: pulumi.Output<number>;
    public readonly encapVlanTpid!: pulumi.Output<number>;
    public readonly erspanCollectorIp!: pulumi.Output<string>;
    public readonly mode!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly rspanIp!: pulumi.Output<string>;
    public readonly srcEgresses!: pulumi.Output<outputs.SwitchMirrorSrcEgress[] | undefined>;
    public readonly srcIngresses!: pulumi.Output<outputs.SwitchMirrorSrcIngress[] | undefined>;
    public readonly status!: pulumi.Output<string>;
    public readonly stripMirroredTrafficTags!: pulumi.Output<string>;
    public readonly switchingPacket!: pulumi.Output<string>;

    /**
     * Create a SwitchMirror resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SwitchMirrorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SwitchMirrorArgs | SwitchMirrorState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SwitchMirrorState | undefined;
            resourceInputs["dst"] = state ? state.dst : undefined;
            resourceInputs["dynamicSortSubtable"] = state ? state.dynamicSortSubtable : undefined;
            resourceInputs["encapGreProtocol"] = state ? state.encapGreProtocol : undefined;
            resourceInputs["encapIpv4Src"] = state ? state.encapIpv4Src : undefined;
            resourceInputs["encapIpv4Tos"] = state ? state.encapIpv4Tos : undefined;
            resourceInputs["encapIpv4Ttl"] = state ? state.encapIpv4Ttl : undefined;
            resourceInputs["encapMacDst"] = state ? state.encapMacDst : undefined;
            resourceInputs["encapMacSrc"] = state ? state.encapMacSrc : undefined;
            resourceInputs["encapVlan"] = state ? state.encapVlan : undefined;
            resourceInputs["encapVlanCfi"] = state ? state.encapVlanCfi : undefined;
            resourceInputs["encapVlanId"] = state ? state.encapVlanId : undefined;
            resourceInputs["encapVlanPriority"] = state ? state.encapVlanPriority : undefined;
            resourceInputs["encapVlanTpid"] = state ? state.encapVlanTpid : undefined;
            resourceInputs["erspanCollectorIp"] = state ? state.erspanCollectorIp : undefined;
            resourceInputs["mode"] = state ? state.mode : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["rspanIp"] = state ? state.rspanIp : undefined;
            resourceInputs["srcEgresses"] = state ? state.srcEgresses : undefined;
            resourceInputs["srcIngresses"] = state ? state.srcIngresses : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["stripMirroredTrafficTags"] = state ? state.stripMirroredTrafficTags : undefined;
            resourceInputs["switchingPacket"] = state ? state.switchingPacket : undefined;
        } else {
            const args = argsOrState as SwitchMirrorArgs | undefined;
            resourceInputs["dst"] = args ? args.dst : undefined;
            resourceInputs["dynamicSortSubtable"] = args ? args.dynamicSortSubtable : undefined;
            resourceInputs["encapGreProtocol"] = args ? args.encapGreProtocol : undefined;
            resourceInputs["encapIpv4Src"] = args ? args.encapIpv4Src : undefined;
            resourceInputs["encapIpv4Tos"] = args ? args.encapIpv4Tos : undefined;
            resourceInputs["encapIpv4Ttl"] = args ? args.encapIpv4Ttl : undefined;
            resourceInputs["encapMacDst"] = args ? args.encapMacDst : undefined;
            resourceInputs["encapMacSrc"] = args ? args.encapMacSrc : undefined;
            resourceInputs["encapVlan"] = args ? args.encapVlan : undefined;
            resourceInputs["encapVlanCfi"] = args ? args.encapVlanCfi : undefined;
            resourceInputs["encapVlanId"] = args ? args.encapVlanId : undefined;
            resourceInputs["encapVlanPriority"] = args ? args.encapVlanPriority : undefined;
            resourceInputs["encapVlanTpid"] = args ? args.encapVlanTpid : undefined;
            resourceInputs["erspanCollectorIp"] = args ? args.erspanCollectorIp : undefined;
            resourceInputs["mode"] = args ? args.mode : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["rspanIp"] = args ? args.rspanIp : undefined;
            resourceInputs["srcEgresses"] = args ? args.srcEgresses : undefined;
            resourceInputs["srcIngresses"] = args ? args.srcIngresses : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["stripMirroredTrafficTags"] = args ? args.stripMirroredTrafficTags : undefined;
            resourceInputs["switchingPacket"] = args ? args.switchingPacket : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SwitchMirror.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SwitchMirror resources.
 */
export interface SwitchMirrorState {
    dst?: pulumi.Input<string>;
    dynamicSortSubtable?: pulumi.Input<string>;
    encapGreProtocol?: pulumi.Input<number>;
    encapIpv4Src?: pulumi.Input<string>;
    encapIpv4Tos?: pulumi.Input<number>;
    encapIpv4Ttl?: pulumi.Input<number>;
    encapMacDst?: pulumi.Input<string>;
    encapMacSrc?: pulumi.Input<string>;
    encapVlan?: pulumi.Input<string>;
    encapVlanCfi?: pulumi.Input<number>;
    encapVlanId?: pulumi.Input<number>;
    encapVlanPriority?: pulumi.Input<number>;
    encapVlanTpid?: pulumi.Input<number>;
    erspanCollectorIp?: pulumi.Input<string>;
    mode?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    rspanIp?: pulumi.Input<string>;
    srcEgresses?: pulumi.Input<pulumi.Input<inputs.SwitchMirrorSrcEgress>[]>;
    srcIngresses?: pulumi.Input<pulumi.Input<inputs.SwitchMirrorSrcIngress>[]>;
    status?: pulumi.Input<string>;
    stripMirroredTrafficTags?: pulumi.Input<string>;
    switchingPacket?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SwitchMirror resource.
 */
export interface SwitchMirrorArgs {
    dst?: pulumi.Input<string>;
    dynamicSortSubtable?: pulumi.Input<string>;
    encapGreProtocol?: pulumi.Input<number>;
    encapIpv4Src?: pulumi.Input<string>;
    encapIpv4Tos?: pulumi.Input<number>;
    encapIpv4Ttl?: pulumi.Input<number>;
    encapMacDst?: pulumi.Input<string>;
    encapMacSrc?: pulumi.Input<string>;
    encapVlan?: pulumi.Input<string>;
    encapVlanCfi?: pulumi.Input<number>;
    encapVlanId?: pulumi.Input<number>;
    encapVlanPriority?: pulumi.Input<number>;
    encapVlanTpid?: pulumi.Input<number>;
    erspanCollectorIp?: pulumi.Input<string>;
    mode?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    rspanIp?: pulumi.Input<string>;
    srcEgresses?: pulumi.Input<pulumi.Input<inputs.SwitchMirrorSrcEgress>[]>;
    srcIngresses?: pulumi.Input<pulumi.Input<inputs.SwitchMirrorSrcIngress>[]>;
    status?: pulumi.Input<string>;
    stripMirroredTrafficTags?: pulumi.Input<string>;
    switchingPacket?: pulumi.Input<string>;
}
