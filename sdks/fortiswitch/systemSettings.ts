// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SystemSettings extends pulumi.CustomResource {
    /**
     * Get an existing SystemSettings resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SystemSettingsState, opts?: pulumi.CustomResourceOptions): SystemSettings {
        return new SystemSettings(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortiswitch:index/systemSettings:SystemSettings';

    /**
     * Returns true if the given object is an instance of SystemSettings.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SystemSettings {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SystemSettings.__pulumiType;
    }

    public readonly allowSubnetOverlap!: pulumi.Output<string>;
    public readonly asymroute!: pulumi.Output<string>;
    public readonly asymroute6!: pulumi.Output<string>;
    public readonly bfd!: pulumi.Output<string>;
    public readonly bfdDesiredMinTx!: pulumi.Output<number>;
    public readonly bfdDetectMult!: pulumi.Output<number>;
    public readonly bfdDontEnforceSrcPort!: pulumi.Output<string>;
    public readonly bfdRequiredMinRx!: pulumi.Output<number>;
    public readonly comments!: pulumi.Output<string>;
    public readonly device!: pulumi.Output<string>;
    public readonly ecmpMaxPaths!: pulumi.Output<number>;
    public readonly gateway!: pulumi.Output<string>;
    public readonly ip!: pulumi.Output<string>;
    public readonly ipEcmpMode!: pulumi.Output<string>;
    public readonly manageip!: pulumi.Output<string>;
    public readonly multicastForward!: pulumi.Output<string>;
    public readonly multicastSkipPolicy!: pulumi.Output<string>;
    public readonly multicastTtlNotchange!: pulumi.Output<string>;
    public readonly opmode!: pulumi.Output<string>;
    public readonly perIpBandwidth!: pulumi.Output<string>;
    public readonly sccpPort!: pulumi.Output<number>;
    public readonly sipHelper!: pulumi.Output<string>;
    public readonly sipNatTrace!: pulumi.Output<string>;
    public readonly sipTcpPort!: pulumi.Output<number>;
    public readonly sipUdpPort!: pulumi.Output<number>;
    public readonly status!: pulumi.Output<string>;
    public readonly strictSrcCheck!: pulumi.Output<string>;
    public readonly utf8SpamTagging!: pulumi.Output<string>;
    public readonly vpnStatsLog!: pulumi.Output<string>;
    public readonly vpnStatsPeriod!: pulumi.Output<number>;
    public readonly wccpCacheEngine!: pulumi.Output<string>;

    /**
     * Create a SystemSettings resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SystemSettingsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SystemSettingsArgs | SystemSettingsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SystemSettingsState | undefined;
            resourceInputs["allowSubnetOverlap"] = state ? state.allowSubnetOverlap : undefined;
            resourceInputs["asymroute"] = state ? state.asymroute : undefined;
            resourceInputs["asymroute6"] = state ? state.asymroute6 : undefined;
            resourceInputs["bfd"] = state ? state.bfd : undefined;
            resourceInputs["bfdDesiredMinTx"] = state ? state.bfdDesiredMinTx : undefined;
            resourceInputs["bfdDetectMult"] = state ? state.bfdDetectMult : undefined;
            resourceInputs["bfdDontEnforceSrcPort"] = state ? state.bfdDontEnforceSrcPort : undefined;
            resourceInputs["bfdRequiredMinRx"] = state ? state.bfdRequiredMinRx : undefined;
            resourceInputs["comments"] = state ? state.comments : undefined;
            resourceInputs["device"] = state ? state.device : undefined;
            resourceInputs["ecmpMaxPaths"] = state ? state.ecmpMaxPaths : undefined;
            resourceInputs["gateway"] = state ? state.gateway : undefined;
            resourceInputs["ip"] = state ? state.ip : undefined;
            resourceInputs["ipEcmpMode"] = state ? state.ipEcmpMode : undefined;
            resourceInputs["manageip"] = state ? state.manageip : undefined;
            resourceInputs["multicastForward"] = state ? state.multicastForward : undefined;
            resourceInputs["multicastSkipPolicy"] = state ? state.multicastSkipPolicy : undefined;
            resourceInputs["multicastTtlNotchange"] = state ? state.multicastTtlNotchange : undefined;
            resourceInputs["opmode"] = state ? state.opmode : undefined;
            resourceInputs["perIpBandwidth"] = state ? state.perIpBandwidth : undefined;
            resourceInputs["sccpPort"] = state ? state.sccpPort : undefined;
            resourceInputs["sipHelper"] = state ? state.sipHelper : undefined;
            resourceInputs["sipNatTrace"] = state ? state.sipNatTrace : undefined;
            resourceInputs["sipTcpPort"] = state ? state.sipTcpPort : undefined;
            resourceInputs["sipUdpPort"] = state ? state.sipUdpPort : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["strictSrcCheck"] = state ? state.strictSrcCheck : undefined;
            resourceInputs["utf8SpamTagging"] = state ? state.utf8SpamTagging : undefined;
            resourceInputs["vpnStatsLog"] = state ? state.vpnStatsLog : undefined;
            resourceInputs["vpnStatsPeriod"] = state ? state.vpnStatsPeriod : undefined;
            resourceInputs["wccpCacheEngine"] = state ? state.wccpCacheEngine : undefined;
        } else {
            const args = argsOrState as SystemSettingsArgs | undefined;
            resourceInputs["allowSubnetOverlap"] = args ? args.allowSubnetOverlap : undefined;
            resourceInputs["asymroute"] = args ? args.asymroute : undefined;
            resourceInputs["asymroute6"] = args ? args.asymroute6 : undefined;
            resourceInputs["bfd"] = args ? args.bfd : undefined;
            resourceInputs["bfdDesiredMinTx"] = args ? args.bfdDesiredMinTx : undefined;
            resourceInputs["bfdDetectMult"] = args ? args.bfdDetectMult : undefined;
            resourceInputs["bfdDontEnforceSrcPort"] = args ? args.bfdDontEnforceSrcPort : undefined;
            resourceInputs["bfdRequiredMinRx"] = args ? args.bfdRequiredMinRx : undefined;
            resourceInputs["comments"] = args ? args.comments : undefined;
            resourceInputs["device"] = args ? args.device : undefined;
            resourceInputs["ecmpMaxPaths"] = args ? args.ecmpMaxPaths : undefined;
            resourceInputs["gateway"] = args ? args.gateway : undefined;
            resourceInputs["ip"] = args ? args.ip : undefined;
            resourceInputs["ipEcmpMode"] = args ? args.ipEcmpMode : undefined;
            resourceInputs["manageip"] = args ? args.manageip : undefined;
            resourceInputs["multicastForward"] = args ? args.multicastForward : undefined;
            resourceInputs["multicastSkipPolicy"] = args ? args.multicastSkipPolicy : undefined;
            resourceInputs["multicastTtlNotchange"] = args ? args.multicastTtlNotchange : undefined;
            resourceInputs["opmode"] = args ? args.opmode : undefined;
            resourceInputs["perIpBandwidth"] = args ? args.perIpBandwidth : undefined;
            resourceInputs["sccpPort"] = args ? args.sccpPort : undefined;
            resourceInputs["sipHelper"] = args ? args.sipHelper : undefined;
            resourceInputs["sipNatTrace"] = args ? args.sipNatTrace : undefined;
            resourceInputs["sipTcpPort"] = args ? args.sipTcpPort : undefined;
            resourceInputs["sipUdpPort"] = args ? args.sipUdpPort : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["strictSrcCheck"] = args ? args.strictSrcCheck : undefined;
            resourceInputs["utf8SpamTagging"] = args ? args.utf8SpamTagging : undefined;
            resourceInputs["vpnStatsLog"] = args ? args.vpnStatsLog : undefined;
            resourceInputs["vpnStatsPeriod"] = args ? args.vpnStatsPeriod : undefined;
            resourceInputs["wccpCacheEngine"] = args ? args.wccpCacheEngine : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SystemSettings.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SystemSettings resources.
 */
export interface SystemSettingsState {
    allowSubnetOverlap?: pulumi.Input<string>;
    asymroute?: pulumi.Input<string>;
    asymroute6?: pulumi.Input<string>;
    bfd?: pulumi.Input<string>;
    bfdDesiredMinTx?: pulumi.Input<number>;
    bfdDetectMult?: pulumi.Input<number>;
    bfdDontEnforceSrcPort?: pulumi.Input<string>;
    bfdRequiredMinRx?: pulumi.Input<number>;
    comments?: pulumi.Input<string>;
    device?: pulumi.Input<string>;
    ecmpMaxPaths?: pulumi.Input<number>;
    gateway?: pulumi.Input<string>;
    ip?: pulumi.Input<string>;
    ipEcmpMode?: pulumi.Input<string>;
    manageip?: pulumi.Input<string>;
    multicastForward?: pulumi.Input<string>;
    multicastSkipPolicy?: pulumi.Input<string>;
    multicastTtlNotchange?: pulumi.Input<string>;
    opmode?: pulumi.Input<string>;
    perIpBandwidth?: pulumi.Input<string>;
    sccpPort?: pulumi.Input<number>;
    sipHelper?: pulumi.Input<string>;
    sipNatTrace?: pulumi.Input<string>;
    sipTcpPort?: pulumi.Input<number>;
    sipUdpPort?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    strictSrcCheck?: pulumi.Input<string>;
    utf8SpamTagging?: pulumi.Input<string>;
    vpnStatsLog?: pulumi.Input<string>;
    vpnStatsPeriod?: pulumi.Input<number>;
    wccpCacheEngine?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SystemSettings resource.
 */
export interface SystemSettingsArgs {
    allowSubnetOverlap?: pulumi.Input<string>;
    asymroute?: pulumi.Input<string>;
    asymroute6?: pulumi.Input<string>;
    bfd?: pulumi.Input<string>;
    bfdDesiredMinTx?: pulumi.Input<number>;
    bfdDetectMult?: pulumi.Input<number>;
    bfdDontEnforceSrcPort?: pulumi.Input<string>;
    bfdRequiredMinRx?: pulumi.Input<number>;
    comments?: pulumi.Input<string>;
    device?: pulumi.Input<string>;
    ecmpMaxPaths?: pulumi.Input<number>;
    gateway?: pulumi.Input<string>;
    ip?: pulumi.Input<string>;
    ipEcmpMode?: pulumi.Input<string>;
    manageip?: pulumi.Input<string>;
    multicastForward?: pulumi.Input<string>;
    multicastSkipPolicy?: pulumi.Input<string>;
    multicastTtlNotchange?: pulumi.Input<string>;
    opmode?: pulumi.Input<string>;
    perIpBandwidth?: pulumi.Input<string>;
    sccpPort?: pulumi.Input<number>;
    sipHelper?: pulumi.Input<string>;
    sipNatTrace?: pulumi.Input<string>;
    sipTcpPort?: pulumi.Input<number>;
    sipUdpPort?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    strictSrcCheck?: pulumi.Input<string>;
    utf8SpamTagging?: pulumi.Input<string>;
    vpnStatsLog?: pulumi.Input<string>;
    vpnStatsPeriod?: pulumi.Input<number>;
    wccpCacheEngine?: pulumi.Input<string>;
}
