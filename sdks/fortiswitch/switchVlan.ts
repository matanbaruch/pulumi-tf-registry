// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SwitchVlan extends pulumi.CustomResource {
    /**
     * Get an existing SwitchVlan resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SwitchVlanState, opts?: pulumi.CustomResourceOptions): SwitchVlan {
        return new SwitchVlan(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortiswitch:index/switchVlan:SwitchVlan';

    /**
     * Returns true if the given object is an instance of SwitchVlan.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SwitchVlan {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SwitchVlan.__pulumiType;
    }

    public readonly accessVlan!: pulumi.Output<string>;
    public readonly arpInspection!: pulumi.Output<string>;
    public readonly assignmentPriority!: pulumi.Output<number>;
    public readonly communityVlans!: pulumi.Output<string>;
    public readonly cosQueue!: pulumi.Output<number>;
    public readonly description!: pulumi.Output<string>;
    public readonly dhcp6Snooping!: pulumi.Output<string>;
    public readonly dhcpServerAccessLists!: pulumi.Output<outputs.SwitchVlanDhcpServerAccessList[] | undefined>;
    public readonly dhcpSnooping!: pulumi.Output<string>;
    public readonly dhcpSnoopingOption82!: pulumi.Output<string>;
    public readonly dhcpSnoopingStaticClients!: pulumi.Output<outputs.SwitchVlanDhcpSnoopingStaticClient[] | undefined>;
    public readonly dhcpSnoopingVerifyMac!: pulumi.Output<string>;
    public readonly dynamicSortSubtable!: pulumi.Output<string | undefined>;
    public readonly fswid!: pulumi.Output<number>;
    public readonly igmpSnooping!: pulumi.Output<string>;
    public readonly igmpSnoopingFastLeave!: pulumi.Output<string>;
    public readonly igmpSnoopingProxy!: pulumi.Output<string>;
    public readonly igmpSnoopingQuerier!: pulumi.Output<string>;
    public readonly igmpSnoopingQuerierAddr!: pulumi.Output<string>;
    public readonly igmpSnoopingQuerierVersion!: pulumi.Output<number>;
    public readonly igmpSnoopingStaticGroups!: pulumi.Output<outputs.SwitchVlanIgmpSnoopingStaticGroup[] | undefined>;
    public readonly isolatedVlan!: pulumi.Output<number>;
    public readonly lanSegment!: pulumi.Output<string>;
    public readonly lanSegmentPrimaryVlan!: pulumi.Output<number>;
    public readonly lanSegmentType!: pulumi.Output<number>;
    public readonly lanSubvlans!: pulumi.Output<string>;
    public readonly learning!: pulumi.Output<string>;
    public readonly learningLimit!: pulumi.Output<number>;
    public readonly memberByIpv4s!: pulumi.Output<outputs.SwitchVlanMemberByIpv4[] | undefined>;
    public readonly memberByIpv6s!: pulumi.Output<outputs.SwitchVlanMemberByIpv6[] | undefined>;
    public readonly memberByMacs!: pulumi.Output<outputs.SwitchVlanMemberByMac[] | undefined>;
    public readonly memberByProtos!: pulumi.Output<outputs.SwitchVlanMemberByProto[] | undefined>;
    public readonly mldSnooping!: pulumi.Output<string>;
    public readonly mldSnoopingFastLeave!: pulumi.Output<string>;
    public readonly mldSnoopingProxy!: pulumi.Output<string>;
    public readonly mldSnoopingQuerier!: pulumi.Output<string>;
    public readonly mldSnoopingQuerierAddr!: pulumi.Output<string>;
    public readonly mldSnoopingStaticGroups!: pulumi.Output<outputs.SwitchVlanMldSnoopingStaticGroup[] | undefined>;
    public readonly mrouterPorts!: pulumi.Output<outputs.SwitchVlanMrouterPort[] | undefined>;
    public readonly policer!: pulumi.Output<number>;
    public readonly primaryVlan!: pulumi.Output<number>;
    public readonly privateVlan!: pulumi.Output<string>;
    public readonly privateVlanType!: pulumi.Output<number>;
    public readonly rspanMode!: pulumi.Output<string>;

    /**
     * Create a SwitchVlan resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SwitchVlanArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SwitchVlanArgs | SwitchVlanState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SwitchVlanState | undefined;
            resourceInputs["accessVlan"] = state ? state.accessVlan : undefined;
            resourceInputs["arpInspection"] = state ? state.arpInspection : undefined;
            resourceInputs["assignmentPriority"] = state ? state.assignmentPriority : undefined;
            resourceInputs["communityVlans"] = state ? state.communityVlans : undefined;
            resourceInputs["cosQueue"] = state ? state.cosQueue : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["dhcp6Snooping"] = state ? state.dhcp6Snooping : undefined;
            resourceInputs["dhcpServerAccessLists"] = state ? state.dhcpServerAccessLists : undefined;
            resourceInputs["dhcpSnooping"] = state ? state.dhcpSnooping : undefined;
            resourceInputs["dhcpSnoopingOption82"] = state ? state.dhcpSnoopingOption82 : undefined;
            resourceInputs["dhcpSnoopingStaticClients"] = state ? state.dhcpSnoopingStaticClients : undefined;
            resourceInputs["dhcpSnoopingVerifyMac"] = state ? state.dhcpSnoopingVerifyMac : undefined;
            resourceInputs["dynamicSortSubtable"] = state ? state.dynamicSortSubtable : undefined;
            resourceInputs["fswid"] = state ? state.fswid : undefined;
            resourceInputs["igmpSnooping"] = state ? state.igmpSnooping : undefined;
            resourceInputs["igmpSnoopingFastLeave"] = state ? state.igmpSnoopingFastLeave : undefined;
            resourceInputs["igmpSnoopingProxy"] = state ? state.igmpSnoopingProxy : undefined;
            resourceInputs["igmpSnoopingQuerier"] = state ? state.igmpSnoopingQuerier : undefined;
            resourceInputs["igmpSnoopingQuerierAddr"] = state ? state.igmpSnoopingQuerierAddr : undefined;
            resourceInputs["igmpSnoopingQuerierVersion"] = state ? state.igmpSnoopingQuerierVersion : undefined;
            resourceInputs["igmpSnoopingStaticGroups"] = state ? state.igmpSnoopingStaticGroups : undefined;
            resourceInputs["isolatedVlan"] = state ? state.isolatedVlan : undefined;
            resourceInputs["lanSegment"] = state ? state.lanSegment : undefined;
            resourceInputs["lanSegmentPrimaryVlan"] = state ? state.lanSegmentPrimaryVlan : undefined;
            resourceInputs["lanSegmentType"] = state ? state.lanSegmentType : undefined;
            resourceInputs["lanSubvlans"] = state ? state.lanSubvlans : undefined;
            resourceInputs["learning"] = state ? state.learning : undefined;
            resourceInputs["learningLimit"] = state ? state.learningLimit : undefined;
            resourceInputs["memberByIpv4s"] = state ? state.memberByIpv4s : undefined;
            resourceInputs["memberByIpv6s"] = state ? state.memberByIpv6s : undefined;
            resourceInputs["memberByMacs"] = state ? state.memberByMacs : undefined;
            resourceInputs["memberByProtos"] = state ? state.memberByProtos : undefined;
            resourceInputs["mldSnooping"] = state ? state.mldSnooping : undefined;
            resourceInputs["mldSnoopingFastLeave"] = state ? state.mldSnoopingFastLeave : undefined;
            resourceInputs["mldSnoopingProxy"] = state ? state.mldSnoopingProxy : undefined;
            resourceInputs["mldSnoopingQuerier"] = state ? state.mldSnoopingQuerier : undefined;
            resourceInputs["mldSnoopingQuerierAddr"] = state ? state.mldSnoopingQuerierAddr : undefined;
            resourceInputs["mldSnoopingStaticGroups"] = state ? state.mldSnoopingStaticGroups : undefined;
            resourceInputs["mrouterPorts"] = state ? state.mrouterPorts : undefined;
            resourceInputs["policer"] = state ? state.policer : undefined;
            resourceInputs["primaryVlan"] = state ? state.primaryVlan : undefined;
            resourceInputs["privateVlan"] = state ? state.privateVlan : undefined;
            resourceInputs["privateVlanType"] = state ? state.privateVlanType : undefined;
            resourceInputs["rspanMode"] = state ? state.rspanMode : undefined;
        } else {
            const args = argsOrState as SwitchVlanArgs | undefined;
            resourceInputs["accessVlan"] = args ? args.accessVlan : undefined;
            resourceInputs["arpInspection"] = args ? args.arpInspection : undefined;
            resourceInputs["assignmentPriority"] = args ? args.assignmentPriority : undefined;
            resourceInputs["communityVlans"] = args ? args.communityVlans : undefined;
            resourceInputs["cosQueue"] = args ? args.cosQueue : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["dhcp6Snooping"] = args ? args.dhcp6Snooping : undefined;
            resourceInputs["dhcpServerAccessLists"] = args ? args.dhcpServerAccessLists : undefined;
            resourceInputs["dhcpSnooping"] = args ? args.dhcpSnooping : undefined;
            resourceInputs["dhcpSnoopingOption82"] = args ? args.dhcpSnoopingOption82 : undefined;
            resourceInputs["dhcpSnoopingStaticClients"] = args ? args.dhcpSnoopingStaticClients : undefined;
            resourceInputs["dhcpSnoopingVerifyMac"] = args ? args.dhcpSnoopingVerifyMac : undefined;
            resourceInputs["dynamicSortSubtable"] = args ? args.dynamicSortSubtable : undefined;
            resourceInputs["fswid"] = args ? args.fswid : undefined;
            resourceInputs["igmpSnooping"] = args ? args.igmpSnooping : undefined;
            resourceInputs["igmpSnoopingFastLeave"] = args ? args.igmpSnoopingFastLeave : undefined;
            resourceInputs["igmpSnoopingProxy"] = args ? args.igmpSnoopingProxy : undefined;
            resourceInputs["igmpSnoopingQuerier"] = args ? args.igmpSnoopingQuerier : undefined;
            resourceInputs["igmpSnoopingQuerierAddr"] = args ? args.igmpSnoopingQuerierAddr : undefined;
            resourceInputs["igmpSnoopingQuerierVersion"] = args ? args.igmpSnoopingQuerierVersion : undefined;
            resourceInputs["igmpSnoopingStaticGroups"] = args ? args.igmpSnoopingStaticGroups : undefined;
            resourceInputs["isolatedVlan"] = args ? args.isolatedVlan : undefined;
            resourceInputs["lanSegment"] = args ? args.lanSegment : undefined;
            resourceInputs["lanSegmentPrimaryVlan"] = args ? args.lanSegmentPrimaryVlan : undefined;
            resourceInputs["lanSegmentType"] = args ? args.lanSegmentType : undefined;
            resourceInputs["lanSubvlans"] = args ? args.lanSubvlans : undefined;
            resourceInputs["learning"] = args ? args.learning : undefined;
            resourceInputs["learningLimit"] = args ? args.learningLimit : undefined;
            resourceInputs["memberByIpv4s"] = args ? args.memberByIpv4s : undefined;
            resourceInputs["memberByIpv6s"] = args ? args.memberByIpv6s : undefined;
            resourceInputs["memberByMacs"] = args ? args.memberByMacs : undefined;
            resourceInputs["memberByProtos"] = args ? args.memberByProtos : undefined;
            resourceInputs["mldSnooping"] = args ? args.mldSnooping : undefined;
            resourceInputs["mldSnoopingFastLeave"] = args ? args.mldSnoopingFastLeave : undefined;
            resourceInputs["mldSnoopingProxy"] = args ? args.mldSnoopingProxy : undefined;
            resourceInputs["mldSnoopingQuerier"] = args ? args.mldSnoopingQuerier : undefined;
            resourceInputs["mldSnoopingQuerierAddr"] = args ? args.mldSnoopingQuerierAddr : undefined;
            resourceInputs["mldSnoopingStaticGroups"] = args ? args.mldSnoopingStaticGroups : undefined;
            resourceInputs["mrouterPorts"] = args ? args.mrouterPorts : undefined;
            resourceInputs["policer"] = args ? args.policer : undefined;
            resourceInputs["primaryVlan"] = args ? args.primaryVlan : undefined;
            resourceInputs["privateVlan"] = args ? args.privateVlan : undefined;
            resourceInputs["privateVlanType"] = args ? args.privateVlanType : undefined;
            resourceInputs["rspanMode"] = args ? args.rspanMode : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SwitchVlan.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SwitchVlan resources.
 */
export interface SwitchVlanState {
    accessVlan?: pulumi.Input<string>;
    arpInspection?: pulumi.Input<string>;
    assignmentPriority?: pulumi.Input<number>;
    communityVlans?: pulumi.Input<string>;
    cosQueue?: pulumi.Input<number>;
    description?: pulumi.Input<string>;
    dhcp6Snooping?: pulumi.Input<string>;
    dhcpServerAccessLists?: pulumi.Input<pulumi.Input<inputs.SwitchVlanDhcpServerAccessList>[]>;
    dhcpSnooping?: pulumi.Input<string>;
    dhcpSnoopingOption82?: pulumi.Input<string>;
    dhcpSnoopingStaticClients?: pulumi.Input<pulumi.Input<inputs.SwitchVlanDhcpSnoopingStaticClient>[]>;
    dhcpSnoopingVerifyMac?: pulumi.Input<string>;
    dynamicSortSubtable?: pulumi.Input<string>;
    fswid?: pulumi.Input<number>;
    igmpSnooping?: pulumi.Input<string>;
    igmpSnoopingFastLeave?: pulumi.Input<string>;
    igmpSnoopingProxy?: pulumi.Input<string>;
    igmpSnoopingQuerier?: pulumi.Input<string>;
    igmpSnoopingQuerierAddr?: pulumi.Input<string>;
    igmpSnoopingQuerierVersion?: pulumi.Input<number>;
    igmpSnoopingStaticGroups?: pulumi.Input<pulumi.Input<inputs.SwitchVlanIgmpSnoopingStaticGroup>[]>;
    isolatedVlan?: pulumi.Input<number>;
    lanSegment?: pulumi.Input<string>;
    lanSegmentPrimaryVlan?: pulumi.Input<number>;
    lanSegmentType?: pulumi.Input<number>;
    lanSubvlans?: pulumi.Input<string>;
    learning?: pulumi.Input<string>;
    learningLimit?: pulumi.Input<number>;
    memberByIpv4s?: pulumi.Input<pulumi.Input<inputs.SwitchVlanMemberByIpv4>[]>;
    memberByIpv6s?: pulumi.Input<pulumi.Input<inputs.SwitchVlanMemberByIpv6>[]>;
    memberByMacs?: pulumi.Input<pulumi.Input<inputs.SwitchVlanMemberByMac>[]>;
    memberByProtos?: pulumi.Input<pulumi.Input<inputs.SwitchVlanMemberByProto>[]>;
    mldSnooping?: pulumi.Input<string>;
    mldSnoopingFastLeave?: pulumi.Input<string>;
    mldSnoopingProxy?: pulumi.Input<string>;
    mldSnoopingQuerier?: pulumi.Input<string>;
    mldSnoopingQuerierAddr?: pulumi.Input<string>;
    mldSnoopingStaticGroups?: pulumi.Input<pulumi.Input<inputs.SwitchVlanMldSnoopingStaticGroup>[]>;
    mrouterPorts?: pulumi.Input<pulumi.Input<inputs.SwitchVlanMrouterPort>[]>;
    policer?: pulumi.Input<number>;
    primaryVlan?: pulumi.Input<number>;
    privateVlan?: pulumi.Input<string>;
    privateVlanType?: pulumi.Input<number>;
    rspanMode?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SwitchVlan resource.
 */
export interface SwitchVlanArgs {
    accessVlan?: pulumi.Input<string>;
    arpInspection?: pulumi.Input<string>;
    assignmentPriority?: pulumi.Input<number>;
    communityVlans?: pulumi.Input<string>;
    cosQueue?: pulumi.Input<number>;
    description?: pulumi.Input<string>;
    dhcp6Snooping?: pulumi.Input<string>;
    dhcpServerAccessLists?: pulumi.Input<pulumi.Input<inputs.SwitchVlanDhcpServerAccessList>[]>;
    dhcpSnooping?: pulumi.Input<string>;
    dhcpSnoopingOption82?: pulumi.Input<string>;
    dhcpSnoopingStaticClients?: pulumi.Input<pulumi.Input<inputs.SwitchVlanDhcpSnoopingStaticClient>[]>;
    dhcpSnoopingVerifyMac?: pulumi.Input<string>;
    dynamicSortSubtable?: pulumi.Input<string>;
    fswid?: pulumi.Input<number>;
    igmpSnooping?: pulumi.Input<string>;
    igmpSnoopingFastLeave?: pulumi.Input<string>;
    igmpSnoopingProxy?: pulumi.Input<string>;
    igmpSnoopingQuerier?: pulumi.Input<string>;
    igmpSnoopingQuerierAddr?: pulumi.Input<string>;
    igmpSnoopingQuerierVersion?: pulumi.Input<number>;
    igmpSnoopingStaticGroups?: pulumi.Input<pulumi.Input<inputs.SwitchVlanIgmpSnoopingStaticGroup>[]>;
    isolatedVlan?: pulumi.Input<number>;
    lanSegment?: pulumi.Input<string>;
    lanSegmentPrimaryVlan?: pulumi.Input<number>;
    lanSegmentType?: pulumi.Input<number>;
    lanSubvlans?: pulumi.Input<string>;
    learning?: pulumi.Input<string>;
    learningLimit?: pulumi.Input<number>;
    memberByIpv4s?: pulumi.Input<pulumi.Input<inputs.SwitchVlanMemberByIpv4>[]>;
    memberByIpv6s?: pulumi.Input<pulumi.Input<inputs.SwitchVlanMemberByIpv6>[]>;
    memberByMacs?: pulumi.Input<pulumi.Input<inputs.SwitchVlanMemberByMac>[]>;
    memberByProtos?: pulumi.Input<pulumi.Input<inputs.SwitchVlanMemberByProto>[]>;
    mldSnooping?: pulumi.Input<string>;
    mldSnoopingFastLeave?: pulumi.Input<string>;
    mldSnoopingProxy?: pulumi.Input<string>;
    mldSnoopingQuerier?: pulumi.Input<string>;
    mldSnoopingQuerierAddr?: pulumi.Input<string>;
    mldSnoopingStaticGroups?: pulumi.Input<pulumi.Input<inputs.SwitchVlanMldSnoopingStaticGroup>[]>;
    mrouterPorts?: pulumi.Input<pulumi.Input<inputs.SwitchVlanMrouterPort>[]>;
    policer?: pulumi.Input<number>;
    primaryVlan?: pulumi.Input<number>;
    privateVlan?: pulumi.Input<string>;
    privateVlanType?: pulumi.Input<number>;
    rspanMode?: pulumi.Input<string>;
}
