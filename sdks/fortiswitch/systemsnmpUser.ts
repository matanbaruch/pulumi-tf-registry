// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SystemsnmpUser extends pulumi.CustomResource {
    /**
     * Get an existing SystemsnmpUser resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SystemsnmpUserState, opts?: pulumi.CustomResourceOptions): SystemsnmpUser {
        return new SystemsnmpUser(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortiswitch:index/systemsnmpUser:SystemsnmpUser';

    /**
     * Returns true if the given object is an instance of SystemsnmpUser.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SystemsnmpUser {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SystemsnmpUser.__pulumiType;
    }

    public readonly authProto!: pulumi.Output<string>;
    public readonly authPwd!: pulumi.Output<string | undefined>;
    public readonly events!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly notifyHosts!: pulumi.Output<string>;
    public readonly privProto!: pulumi.Output<string>;
    public readonly privPwd!: pulumi.Output<string | undefined>;
    public readonly queries!: pulumi.Output<string>;
    public readonly queryPort!: pulumi.Output<number>;
    public readonly securityLevel!: pulumi.Output<string>;

    /**
     * Create a SystemsnmpUser resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SystemsnmpUserArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SystemsnmpUserArgs | SystemsnmpUserState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SystemsnmpUserState | undefined;
            resourceInputs["authProto"] = state ? state.authProto : undefined;
            resourceInputs["authPwd"] = state ? state.authPwd : undefined;
            resourceInputs["events"] = state ? state.events : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notifyHosts"] = state ? state.notifyHosts : undefined;
            resourceInputs["privProto"] = state ? state.privProto : undefined;
            resourceInputs["privPwd"] = state ? state.privPwd : undefined;
            resourceInputs["queries"] = state ? state.queries : undefined;
            resourceInputs["queryPort"] = state ? state.queryPort : undefined;
            resourceInputs["securityLevel"] = state ? state.securityLevel : undefined;
        } else {
            const args = argsOrState as SystemsnmpUserArgs | undefined;
            resourceInputs["authProto"] = args ? args.authProto : undefined;
            resourceInputs["authPwd"] = args ? args.authPwd : undefined;
            resourceInputs["events"] = args ? args.events : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["notifyHosts"] = args ? args.notifyHosts : undefined;
            resourceInputs["privProto"] = args ? args.privProto : undefined;
            resourceInputs["privPwd"] = args ? args.privPwd : undefined;
            resourceInputs["queries"] = args ? args.queries : undefined;
            resourceInputs["queryPort"] = args ? args.queryPort : undefined;
            resourceInputs["securityLevel"] = args ? args.securityLevel : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SystemsnmpUser.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SystemsnmpUser resources.
 */
export interface SystemsnmpUserState {
    authProto?: pulumi.Input<string>;
    authPwd?: pulumi.Input<string>;
    events?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    notifyHosts?: pulumi.Input<string>;
    privProto?: pulumi.Input<string>;
    privPwd?: pulumi.Input<string>;
    queries?: pulumi.Input<string>;
    queryPort?: pulumi.Input<number>;
    securityLevel?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SystemsnmpUser resource.
 */
export interface SystemsnmpUserArgs {
    authProto?: pulumi.Input<string>;
    authPwd?: pulumi.Input<string>;
    events?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    notifyHosts?: pulumi.Input<string>;
    privProto?: pulumi.Input<string>;
    privPwd?: pulumi.Input<string>;
    queries?: pulumi.Input<string>;
    queryPort?: pulumi.Input<number>;
    securityLevel?: pulumi.Input<string>;
}
