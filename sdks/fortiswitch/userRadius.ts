// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class UserRadius extends pulumi.CustomResource {
    /**
     * Get an existing UserRadius resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UserRadiusState, opts?: pulumi.CustomResourceOptions): UserRadius {
        return new UserRadius(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortiswitch:index/userRadius:UserRadius';

    /**
     * Returns true if the given object is an instance of UserRadius.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is UserRadius {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === UserRadius.__pulumiType;
    }

    public readonly acctFastFramedipDetect!: pulumi.Output<number>;
    public readonly acctInterimInterval!: pulumi.Output<number>;
    public readonly acctServers!: pulumi.Output<outputs.UserRadiusAcctServer[] | undefined>;
    public readonly addrMode!: pulumi.Output<string>;
    public readonly allUsergroup!: pulumi.Output<string>;
    public readonly authType!: pulumi.Output<string>;
    public readonly dynamicSortSubtable!: pulumi.Output<string | undefined>;
    public readonly frameMtuSize!: pulumi.Output<number>;
    public readonly linkMonitor!: pulumi.Output<string>;
    public readonly linkMonitorInterval!: pulumi.Output<number>;
    public readonly name!: pulumi.Output<string>;
    public readonly nasIp!: pulumi.Output<string>;
    public readonly nasIp6!: pulumi.Output<string>;
    public readonly radiusCoa!: pulumi.Output<string>;
    public readonly radiusCoaSecret!: pulumi.Output<string | undefined>;
    public readonly radiusPort!: pulumi.Output<number>;
    public readonly secondarySecret!: pulumi.Output<string | undefined>;
    public readonly secondaryServer!: pulumi.Output<string>;
    public readonly secret!: pulumi.Output<string | undefined>;
    public readonly server!: pulumi.Output<string>;
    public readonly serviceType!: pulumi.Output<string>;
    public readonly sourceIp!: pulumi.Output<string>;
    public readonly sourceIp6!: pulumi.Output<string>;

    /**
     * Create a UserRadius resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: UserRadiusArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UserRadiusArgs | UserRadiusState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UserRadiusState | undefined;
            resourceInputs["acctFastFramedipDetect"] = state ? state.acctFastFramedipDetect : undefined;
            resourceInputs["acctInterimInterval"] = state ? state.acctInterimInterval : undefined;
            resourceInputs["acctServers"] = state ? state.acctServers : undefined;
            resourceInputs["addrMode"] = state ? state.addrMode : undefined;
            resourceInputs["allUsergroup"] = state ? state.allUsergroup : undefined;
            resourceInputs["authType"] = state ? state.authType : undefined;
            resourceInputs["dynamicSortSubtable"] = state ? state.dynamicSortSubtable : undefined;
            resourceInputs["frameMtuSize"] = state ? state.frameMtuSize : undefined;
            resourceInputs["linkMonitor"] = state ? state.linkMonitor : undefined;
            resourceInputs["linkMonitorInterval"] = state ? state.linkMonitorInterval : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nasIp"] = state ? state.nasIp : undefined;
            resourceInputs["nasIp6"] = state ? state.nasIp6 : undefined;
            resourceInputs["radiusCoa"] = state ? state.radiusCoa : undefined;
            resourceInputs["radiusCoaSecret"] = state ? state.radiusCoaSecret : undefined;
            resourceInputs["radiusPort"] = state ? state.radiusPort : undefined;
            resourceInputs["secondarySecret"] = state ? state.secondarySecret : undefined;
            resourceInputs["secondaryServer"] = state ? state.secondaryServer : undefined;
            resourceInputs["secret"] = state ? state.secret : undefined;
            resourceInputs["server"] = state ? state.server : undefined;
            resourceInputs["serviceType"] = state ? state.serviceType : undefined;
            resourceInputs["sourceIp"] = state ? state.sourceIp : undefined;
            resourceInputs["sourceIp6"] = state ? state.sourceIp6 : undefined;
        } else {
            const args = argsOrState as UserRadiusArgs | undefined;
            resourceInputs["acctFastFramedipDetect"] = args ? args.acctFastFramedipDetect : undefined;
            resourceInputs["acctInterimInterval"] = args ? args.acctInterimInterval : undefined;
            resourceInputs["acctServers"] = args ? args.acctServers : undefined;
            resourceInputs["addrMode"] = args ? args.addrMode : undefined;
            resourceInputs["allUsergroup"] = args ? args.allUsergroup : undefined;
            resourceInputs["authType"] = args ? args.authType : undefined;
            resourceInputs["dynamicSortSubtable"] = args ? args.dynamicSortSubtable : undefined;
            resourceInputs["frameMtuSize"] = args ? args.frameMtuSize : undefined;
            resourceInputs["linkMonitor"] = args ? args.linkMonitor : undefined;
            resourceInputs["linkMonitorInterval"] = args ? args.linkMonitorInterval : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nasIp"] = args ? args.nasIp : undefined;
            resourceInputs["nasIp6"] = args ? args.nasIp6 : undefined;
            resourceInputs["radiusCoa"] = args ? args.radiusCoa : undefined;
            resourceInputs["radiusCoaSecret"] = args?.radiusCoaSecret ? pulumi.secret(args.radiusCoaSecret) : undefined;
            resourceInputs["radiusPort"] = args ? args.radiusPort : undefined;
            resourceInputs["secondarySecret"] = args?.secondarySecret ? pulumi.secret(args.secondarySecret) : undefined;
            resourceInputs["secondaryServer"] = args ? args.secondaryServer : undefined;
            resourceInputs["secret"] = args?.secret ? pulumi.secret(args.secret) : undefined;
            resourceInputs["server"] = args ? args.server : undefined;
            resourceInputs["serviceType"] = args ? args.serviceType : undefined;
            resourceInputs["sourceIp"] = args ? args.sourceIp : undefined;
            resourceInputs["sourceIp6"] = args ? args.sourceIp6 : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["radiusCoaSecret", "secondarySecret", "secret"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(UserRadius.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering UserRadius resources.
 */
export interface UserRadiusState {
    acctFastFramedipDetect?: pulumi.Input<number>;
    acctInterimInterval?: pulumi.Input<number>;
    acctServers?: pulumi.Input<pulumi.Input<inputs.UserRadiusAcctServer>[]>;
    addrMode?: pulumi.Input<string>;
    allUsergroup?: pulumi.Input<string>;
    authType?: pulumi.Input<string>;
    dynamicSortSubtable?: pulumi.Input<string>;
    frameMtuSize?: pulumi.Input<number>;
    linkMonitor?: pulumi.Input<string>;
    linkMonitorInterval?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    nasIp?: pulumi.Input<string>;
    nasIp6?: pulumi.Input<string>;
    radiusCoa?: pulumi.Input<string>;
    radiusCoaSecret?: pulumi.Input<string>;
    radiusPort?: pulumi.Input<number>;
    secondarySecret?: pulumi.Input<string>;
    secondaryServer?: pulumi.Input<string>;
    secret?: pulumi.Input<string>;
    server?: pulumi.Input<string>;
    serviceType?: pulumi.Input<string>;
    sourceIp?: pulumi.Input<string>;
    sourceIp6?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a UserRadius resource.
 */
export interface UserRadiusArgs {
    acctFastFramedipDetect?: pulumi.Input<number>;
    acctInterimInterval?: pulumi.Input<number>;
    acctServers?: pulumi.Input<pulumi.Input<inputs.UserRadiusAcctServer>[]>;
    addrMode?: pulumi.Input<string>;
    allUsergroup?: pulumi.Input<string>;
    authType?: pulumi.Input<string>;
    dynamicSortSubtable?: pulumi.Input<string>;
    frameMtuSize?: pulumi.Input<number>;
    linkMonitor?: pulumi.Input<string>;
    linkMonitorInterval?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    nasIp?: pulumi.Input<string>;
    nasIp6?: pulumi.Input<string>;
    radiusCoa?: pulumi.Input<string>;
    radiusCoaSecret?: pulumi.Input<string>;
    radiusPort?: pulumi.Input<number>;
    secondarySecret?: pulumi.Input<string>;
    secondaryServer?: pulumi.Input<string>;
    secret?: pulumi.Input<string>;
    server?: pulumi.Input<string>;
    serviceType?: pulumi.Input<string>;
    sourceIp?: pulumi.Input<string>;
    sourceIp6?: pulumi.Input<string>;
}
