// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SystemFortiguard extends pulumi.CustomResource {
    /**
     * Get an existing SystemFortiguard resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SystemFortiguardState, opts?: pulumi.CustomResourceOptions): SystemFortiguard {
        return new SystemFortiguard(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortiswitch:index/systemFortiguard:SystemFortiguard';

    /**
     * Returns true if the given object is an instance of SystemFortiguard.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SystemFortiguard {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SystemFortiguard.__pulumiType;
    }

    public readonly analysisService!: pulumi.Output<string>;
    public readonly antispamCache!: pulumi.Output<string>;
    public readonly antispamCacheMpercent!: pulumi.Output<number>;
    public readonly antispamCacheTtl!: pulumi.Output<number>;
    public readonly antispamExpiration!: pulumi.Output<number>;
    public readonly antispamForceOff!: pulumi.Output<string>;
    public readonly antispamLicense!: pulumi.Output<number>;
    public readonly antispamScoreThreshold!: pulumi.Output<number>;
    public readonly antispamTimeout!: pulumi.Output<number>;
    public readonly avqueryCache!: pulumi.Output<string>;
    public readonly avqueryCacheMpercent!: pulumi.Output<number>;
    public readonly avqueryCacheTtl!: pulumi.Output<number>;
    public readonly avqueryExpiration!: pulumi.Output<number>;
    public readonly avqueryForceOff!: pulumi.Output<string>;
    public readonly avqueryLicense!: pulumi.Output<number>;
    public readonly avqueryTimeout!: pulumi.Output<number>;
    public readonly clientOverrideIp!: pulumi.Output<string>;
    public readonly clientOverrideStatus!: pulumi.Output<string>;
    public readonly dynamicSortSubtable!: pulumi.Output<string | undefined>;
    public readonly hostname!: pulumi.Output<string>;
    public readonly loadBalanceServers!: pulumi.Output<number>;
    public readonly port!: pulumi.Output<string>;
    public readonly serviceAccountId!: pulumi.Output<string>;
    public readonly srvOvrd!: pulumi.Output<string>;
    public readonly srvOvrdLists!: pulumi.Output<outputs.SystemFortiguardSrvOvrdList[] | undefined>;
    public readonly webfilterCache!: pulumi.Output<string>;
    public readonly webfilterCacheTtl!: pulumi.Output<number>;
    public readonly webfilterExpiration!: pulumi.Output<number>;
    public readonly webfilterForceOff!: pulumi.Output<string>;
    public readonly webfilterLicense!: pulumi.Output<number>;
    public readonly webfilterTimeout!: pulumi.Output<number>;

    /**
     * Create a SystemFortiguard resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SystemFortiguardArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SystemFortiguardArgs | SystemFortiguardState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SystemFortiguardState | undefined;
            resourceInputs["analysisService"] = state ? state.analysisService : undefined;
            resourceInputs["antispamCache"] = state ? state.antispamCache : undefined;
            resourceInputs["antispamCacheMpercent"] = state ? state.antispamCacheMpercent : undefined;
            resourceInputs["antispamCacheTtl"] = state ? state.antispamCacheTtl : undefined;
            resourceInputs["antispamExpiration"] = state ? state.antispamExpiration : undefined;
            resourceInputs["antispamForceOff"] = state ? state.antispamForceOff : undefined;
            resourceInputs["antispamLicense"] = state ? state.antispamLicense : undefined;
            resourceInputs["antispamScoreThreshold"] = state ? state.antispamScoreThreshold : undefined;
            resourceInputs["antispamTimeout"] = state ? state.antispamTimeout : undefined;
            resourceInputs["avqueryCache"] = state ? state.avqueryCache : undefined;
            resourceInputs["avqueryCacheMpercent"] = state ? state.avqueryCacheMpercent : undefined;
            resourceInputs["avqueryCacheTtl"] = state ? state.avqueryCacheTtl : undefined;
            resourceInputs["avqueryExpiration"] = state ? state.avqueryExpiration : undefined;
            resourceInputs["avqueryForceOff"] = state ? state.avqueryForceOff : undefined;
            resourceInputs["avqueryLicense"] = state ? state.avqueryLicense : undefined;
            resourceInputs["avqueryTimeout"] = state ? state.avqueryTimeout : undefined;
            resourceInputs["clientOverrideIp"] = state ? state.clientOverrideIp : undefined;
            resourceInputs["clientOverrideStatus"] = state ? state.clientOverrideStatus : undefined;
            resourceInputs["dynamicSortSubtable"] = state ? state.dynamicSortSubtable : undefined;
            resourceInputs["hostname"] = state ? state.hostname : undefined;
            resourceInputs["loadBalanceServers"] = state ? state.loadBalanceServers : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["serviceAccountId"] = state ? state.serviceAccountId : undefined;
            resourceInputs["srvOvrd"] = state ? state.srvOvrd : undefined;
            resourceInputs["srvOvrdLists"] = state ? state.srvOvrdLists : undefined;
            resourceInputs["webfilterCache"] = state ? state.webfilterCache : undefined;
            resourceInputs["webfilterCacheTtl"] = state ? state.webfilterCacheTtl : undefined;
            resourceInputs["webfilterExpiration"] = state ? state.webfilterExpiration : undefined;
            resourceInputs["webfilterForceOff"] = state ? state.webfilterForceOff : undefined;
            resourceInputs["webfilterLicense"] = state ? state.webfilterLicense : undefined;
            resourceInputs["webfilterTimeout"] = state ? state.webfilterTimeout : undefined;
        } else {
            const args = argsOrState as SystemFortiguardArgs | undefined;
            resourceInputs["analysisService"] = args ? args.analysisService : undefined;
            resourceInputs["antispamCache"] = args ? args.antispamCache : undefined;
            resourceInputs["antispamCacheMpercent"] = args ? args.antispamCacheMpercent : undefined;
            resourceInputs["antispamCacheTtl"] = args ? args.antispamCacheTtl : undefined;
            resourceInputs["antispamExpiration"] = args ? args.antispamExpiration : undefined;
            resourceInputs["antispamForceOff"] = args ? args.antispamForceOff : undefined;
            resourceInputs["antispamLicense"] = args ? args.antispamLicense : undefined;
            resourceInputs["antispamScoreThreshold"] = args ? args.antispamScoreThreshold : undefined;
            resourceInputs["antispamTimeout"] = args ? args.antispamTimeout : undefined;
            resourceInputs["avqueryCache"] = args ? args.avqueryCache : undefined;
            resourceInputs["avqueryCacheMpercent"] = args ? args.avqueryCacheMpercent : undefined;
            resourceInputs["avqueryCacheTtl"] = args ? args.avqueryCacheTtl : undefined;
            resourceInputs["avqueryExpiration"] = args ? args.avqueryExpiration : undefined;
            resourceInputs["avqueryForceOff"] = args ? args.avqueryForceOff : undefined;
            resourceInputs["avqueryLicense"] = args ? args.avqueryLicense : undefined;
            resourceInputs["avqueryTimeout"] = args ? args.avqueryTimeout : undefined;
            resourceInputs["clientOverrideIp"] = args ? args.clientOverrideIp : undefined;
            resourceInputs["clientOverrideStatus"] = args ? args.clientOverrideStatus : undefined;
            resourceInputs["dynamicSortSubtable"] = args ? args.dynamicSortSubtable : undefined;
            resourceInputs["hostname"] = args ? args.hostname : undefined;
            resourceInputs["loadBalanceServers"] = args ? args.loadBalanceServers : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["serviceAccountId"] = args ? args.serviceAccountId : undefined;
            resourceInputs["srvOvrd"] = args ? args.srvOvrd : undefined;
            resourceInputs["srvOvrdLists"] = args ? args.srvOvrdLists : undefined;
            resourceInputs["webfilterCache"] = args ? args.webfilterCache : undefined;
            resourceInputs["webfilterCacheTtl"] = args ? args.webfilterCacheTtl : undefined;
            resourceInputs["webfilterExpiration"] = args ? args.webfilterExpiration : undefined;
            resourceInputs["webfilterForceOff"] = args ? args.webfilterForceOff : undefined;
            resourceInputs["webfilterLicense"] = args ? args.webfilterLicense : undefined;
            resourceInputs["webfilterTimeout"] = args ? args.webfilterTimeout : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SystemFortiguard.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SystemFortiguard resources.
 */
export interface SystemFortiguardState {
    analysisService?: pulumi.Input<string>;
    antispamCache?: pulumi.Input<string>;
    antispamCacheMpercent?: pulumi.Input<number>;
    antispamCacheTtl?: pulumi.Input<number>;
    antispamExpiration?: pulumi.Input<number>;
    antispamForceOff?: pulumi.Input<string>;
    antispamLicense?: pulumi.Input<number>;
    antispamScoreThreshold?: pulumi.Input<number>;
    antispamTimeout?: pulumi.Input<number>;
    avqueryCache?: pulumi.Input<string>;
    avqueryCacheMpercent?: pulumi.Input<number>;
    avqueryCacheTtl?: pulumi.Input<number>;
    avqueryExpiration?: pulumi.Input<number>;
    avqueryForceOff?: pulumi.Input<string>;
    avqueryLicense?: pulumi.Input<number>;
    avqueryTimeout?: pulumi.Input<number>;
    clientOverrideIp?: pulumi.Input<string>;
    clientOverrideStatus?: pulumi.Input<string>;
    dynamicSortSubtable?: pulumi.Input<string>;
    hostname?: pulumi.Input<string>;
    loadBalanceServers?: pulumi.Input<number>;
    port?: pulumi.Input<string>;
    serviceAccountId?: pulumi.Input<string>;
    srvOvrd?: pulumi.Input<string>;
    srvOvrdLists?: pulumi.Input<pulumi.Input<inputs.SystemFortiguardSrvOvrdList>[]>;
    webfilterCache?: pulumi.Input<string>;
    webfilterCacheTtl?: pulumi.Input<number>;
    webfilterExpiration?: pulumi.Input<number>;
    webfilterForceOff?: pulumi.Input<string>;
    webfilterLicense?: pulumi.Input<number>;
    webfilterTimeout?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a SystemFortiguard resource.
 */
export interface SystemFortiguardArgs {
    analysisService?: pulumi.Input<string>;
    antispamCache?: pulumi.Input<string>;
    antispamCacheMpercent?: pulumi.Input<number>;
    antispamCacheTtl?: pulumi.Input<number>;
    antispamExpiration?: pulumi.Input<number>;
    antispamForceOff?: pulumi.Input<string>;
    antispamLicense?: pulumi.Input<number>;
    antispamScoreThreshold?: pulumi.Input<number>;
    antispamTimeout?: pulumi.Input<number>;
    avqueryCache?: pulumi.Input<string>;
    avqueryCacheMpercent?: pulumi.Input<number>;
    avqueryCacheTtl?: pulumi.Input<number>;
    avqueryExpiration?: pulumi.Input<number>;
    avqueryForceOff?: pulumi.Input<string>;
    avqueryLicense?: pulumi.Input<number>;
    avqueryTimeout?: pulumi.Input<number>;
    clientOverrideIp?: pulumi.Input<string>;
    clientOverrideStatus?: pulumi.Input<string>;
    dynamicSortSubtable?: pulumi.Input<string>;
    hostname?: pulumi.Input<string>;
    loadBalanceServers?: pulumi.Input<number>;
    port?: pulumi.Input<string>;
    serviceAccountId?: pulumi.Input<string>;
    srvOvrd?: pulumi.Input<string>;
    srvOvrdLists?: pulumi.Input<pulumi.Input<inputs.SystemFortiguardSrvOvrdList>[]>;
    webfilterCache?: pulumi.Input<string>;
    webfilterCacheTtl?: pulumi.Input<number>;
    webfilterExpiration?: pulumi.Input<number>;
    webfilterForceOff?: pulumi.Input<string>;
    webfilterLicense?: pulumi.Input<number>;
    webfilterTimeout?: pulumi.Input<number>;
}
