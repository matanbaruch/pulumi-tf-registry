// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getRouterRoutemap(args: GetRouterRoutemapArgs, opts?: pulumi.InvokeOptions): Promise<GetRouterRoutemapResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("fortiswitch:index/getRouterRoutemap:getRouterRoutemap", {
        "id": args.id,
        "name": args.name,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getRouterRoutemap.
 */
export interface GetRouterRoutemapArgs {
    id?: string;
    name: string;
}

/**
 * A collection of values returned by getRouterRoutemap.
 */
export interface GetRouterRoutemapResult {
    readonly comments: string;
    readonly id: string;
    readonly name: string;
    readonly protocol: string;
    readonly rules: outputs.GetRouterRoutemapRule[];
}
export function getRouterRoutemapOutput(args: GetRouterRoutemapOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetRouterRoutemapResult> {
    return pulumi.output(args).apply((a: any) => getRouterRoutemap(a, opts))
}

/**
 * A collection of arguments for invoking getRouterRoutemap.
 */
export interface GetRouterRoutemapOutputArgs {
    id?: pulumi.Input<string>;
    name: pulumi.Input<string>;
}
