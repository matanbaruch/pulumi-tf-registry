// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SwitchTrunk extends pulumi.CustomResource {
    /**
     * Get an existing SwitchTrunk resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SwitchTrunkState, opts?: pulumi.CustomResourceOptions): SwitchTrunk {
        return new SwitchTrunk(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortiswitch:index/switchTrunk:SwitchTrunk';

    /**
     * Returns true if the given object is an instance of SwitchTrunk.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SwitchTrunk {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SwitchTrunk.__pulumiType;
    }

    public readonly aggregatorMode!: pulumi.Output<string>;
    public readonly autoIsl!: pulumi.Output<number>;
    public readonly bundle!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string>;
    public readonly dynamicSortSubtable!: pulumi.Output<string | undefined>;
    public readonly fallbackPort!: pulumi.Output<string>;
    public readonly fortilink!: pulumi.Output<number>;
    public readonly hbDstIp!: pulumi.Output<string>;
    public readonly hbDstUdpPort!: pulumi.Output<number>;
    public readonly hbInVlan!: pulumi.Output<number>;
    public readonly hbOutVlan!: pulumi.Output<number>;
    public readonly hbSrcIp!: pulumi.Output<string>;
    public readonly hbSrcUdpPort!: pulumi.Output<number>;
    public readonly hbVerify!: pulumi.Output<string>;
    public readonly islFortilink!: pulumi.Output<number>;
    public readonly lacpSpeed!: pulumi.Output<string>;
    public readonly maxBundle!: pulumi.Output<number>;
    public readonly maxMissHeartbeats!: pulumi.Output<number>;
    public readonly mclag!: pulumi.Output<string>;
    public readonly mclagIcl!: pulumi.Output<string>;
    public readonly mclagMacAddress!: pulumi.Output<string>;
    public readonly memberWithdrawalBehavior!: pulumi.Output<string>;
    public readonly members!: pulumi.Output<outputs.SwitchTrunkMember[] | undefined>;
    public readonly minBundle!: pulumi.Output<number>;
    public readonly mode!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly portExtension!: pulumi.Output<string>;
    public readonly portExtensionTrigger!: pulumi.Output<number>;
    public readonly portSelectionCriteria!: pulumi.Output<string>;
    public readonly restricted!: pulumi.Output<number>;
    public readonly staticIsl!: pulumi.Output<string>;
    public readonly staticIslAutoVlan!: pulumi.Output<string>;
    public readonly trunkId!: pulumi.Output<number>;

    /**
     * Create a SwitchTrunk resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SwitchTrunkArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SwitchTrunkArgs | SwitchTrunkState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SwitchTrunkState | undefined;
            resourceInputs["aggregatorMode"] = state ? state.aggregatorMode : undefined;
            resourceInputs["autoIsl"] = state ? state.autoIsl : undefined;
            resourceInputs["bundle"] = state ? state.bundle : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["dynamicSortSubtable"] = state ? state.dynamicSortSubtable : undefined;
            resourceInputs["fallbackPort"] = state ? state.fallbackPort : undefined;
            resourceInputs["fortilink"] = state ? state.fortilink : undefined;
            resourceInputs["hbDstIp"] = state ? state.hbDstIp : undefined;
            resourceInputs["hbDstUdpPort"] = state ? state.hbDstUdpPort : undefined;
            resourceInputs["hbInVlan"] = state ? state.hbInVlan : undefined;
            resourceInputs["hbOutVlan"] = state ? state.hbOutVlan : undefined;
            resourceInputs["hbSrcIp"] = state ? state.hbSrcIp : undefined;
            resourceInputs["hbSrcUdpPort"] = state ? state.hbSrcUdpPort : undefined;
            resourceInputs["hbVerify"] = state ? state.hbVerify : undefined;
            resourceInputs["islFortilink"] = state ? state.islFortilink : undefined;
            resourceInputs["lacpSpeed"] = state ? state.lacpSpeed : undefined;
            resourceInputs["maxBundle"] = state ? state.maxBundle : undefined;
            resourceInputs["maxMissHeartbeats"] = state ? state.maxMissHeartbeats : undefined;
            resourceInputs["mclag"] = state ? state.mclag : undefined;
            resourceInputs["mclagIcl"] = state ? state.mclagIcl : undefined;
            resourceInputs["mclagMacAddress"] = state ? state.mclagMacAddress : undefined;
            resourceInputs["memberWithdrawalBehavior"] = state ? state.memberWithdrawalBehavior : undefined;
            resourceInputs["members"] = state ? state.members : undefined;
            resourceInputs["minBundle"] = state ? state.minBundle : undefined;
            resourceInputs["mode"] = state ? state.mode : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["portExtension"] = state ? state.portExtension : undefined;
            resourceInputs["portExtensionTrigger"] = state ? state.portExtensionTrigger : undefined;
            resourceInputs["portSelectionCriteria"] = state ? state.portSelectionCriteria : undefined;
            resourceInputs["restricted"] = state ? state.restricted : undefined;
            resourceInputs["staticIsl"] = state ? state.staticIsl : undefined;
            resourceInputs["staticIslAutoVlan"] = state ? state.staticIslAutoVlan : undefined;
            resourceInputs["trunkId"] = state ? state.trunkId : undefined;
        } else {
            const args = argsOrState as SwitchTrunkArgs | undefined;
            resourceInputs["aggregatorMode"] = args ? args.aggregatorMode : undefined;
            resourceInputs["autoIsl"] = args ? args.autoIsl : undefined;
            resourceInputs["bundle"] = args ? args.bundle : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["dynamicSortSubtable"] = args ? args.dynamicSortSubtable : undefined;
            resourceInputs["fallbackPort"] = args ? args.fallbackPort : undefined;
            resourceInputs["fortilink"] = args ? args.fortilink : undefined;
            resourceInputs["hbDstIp"] = args ? args.hbDstIp : undefined;
            resourceInputs["hbDstUdpPort"] = args ? args.hbDstUdpPort : undefined;
            resourceInputs["hbInVlan"] = args ? args.hbInVlan : undefined;
            resourceInputs["hbOutVlan"] = args ? args.hbOutVlan : undefined;
            resourceInputs["hbSrcIp"] = args ? args.hbSrcIp : undefined;
            resourceInputs["hbSrcUdpPort"] = args ? args.hbSrcUdpPort : undefined;
            resourceInputs["hbVerify"] = args ? args.hbVerify : undefined;
            resourceInputs["islFortilink"] = args ? args.islFortilink : undefined;
            resourceInputs["lacpSpeed"] = args ? args.lacpSpeed : undefined;
            resourceInputs["maxBundle"] = args ? args.maxBundle : undefined;
            resourceInputs["maxMissHeartbeats"] = args ? args.maxMissHeartbeats : undefined;
            resourceInputs["mclag"] = args ? args.mclag : undefined;
            resourceInputs["mclagIcl"] = args ? args.mclagIcl : undefined;
            resourceInputs["mclagMacAddress"] = args ? args.mclagMacAddress : undefined;
            resourceInputs["memberWithdrawalBehavior"] = args ? args.memberWithdrawalBehavior : undefined;
            resourceInputs["members"] = args ? args.members : undefined;
            resourceInputs["minBundle"] = args ? args.minBundle : undefined;
            resourceInputs["mode"] = args ? args.mode : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["portExtension"] = args ? args.portExtension : undefined;
            resourceInputs["portExtensionTrigger"] = args ? args.portExtensionTrigger : undefined;
            resourceInputs["portSelectionCriteria"] = args ? args.portSelectionCriteria : undefined;
            resourceInputs["restricted"] = args ? args.restricted : undefined;
            resourceInputs["staticIsl"] = args ? args.staticIsl : undefined;
            resourceInputs["staticIslAutoVlan"] = args ? args.staticIslAutoVlan : undefined;
            resourceInputs["trunkId"] = args ? args.trunkId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SwitchTrunk.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SwitchTrunk resources.
 */
export interface SwitchTrunkState {
    aggregatorMode?: pulumi.Input<string>;
    autoIsl?: pulumi.Input<number>;
    bundle?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    dynamicSortSubtable?: pulumi.Input<string>;
    fallbackPort?: pulumi.Input<string>;
    fortilink?: pulumi.Input<number>;
    hbDstIp?: pulumi.Input<string>;
    hbDstUdpPort?: pulumi.Input<number>;
    hbInVlan?: pulumi.Input<number>;
    hbOutVlan?: pulumi.Input<number>;
    hbSrcIp?: pulumi.Input<string>;
    hbSrcUdpPort?: pulumi.Input<number>;
    hbVerify?: pulumi.Input<string>;
    islFortilink?: pulumi.Input<number>;
    lacpSpeed?: pulumi.Input<string>;
    maxBundle?: pulumi.Input<number>;
    maxMissHeartbeats?: pulumi.Input<number>;
    mclag?: pulumi.Input<string>;
    mclagIcl?: pulumi.Input<string>;
    mclagMacAddress?: pulumi.Input<string>;
    memberWithdrawalBehavior?: pulumi.Input<string>;
    members?: pulumi.Input<pulumi.Input<inputs.SwitchTrunkMember>[]>;
    minBundle?: pulumi.Input<number>;
    mode?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    portExtension?: pulumi.Input<string>;
    portExtensionTrigger?: pulumi.Input<number>;
    portSelectionCriteria?: pulumi.Input<string>;
    restricted?: pulumi.Input<number>;
    staticIsl?: pulumi.Input<string>;
    staticIslAutoVlan?: pulumi.Input<string>;
    trunkId?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a SwitchTrunk resource.
 */
export interface SwitchTrunkArgs {
    aggregatorMode?: pulumi.Input<string>;
    autoIsl?: pulumi.Input<number>;
    bundle?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    dynamicSortSubtable?: pulumi.Input<string>;
    fallbackPort?: pulumi.Input<string>;
    fortilink?: pulumi.Input<number>;
    hbDstIp?: pulumi.Input<string>;
    hbDstUdpPort?: pulumi.Input<number>;
    hbInVlan?: pulumi.Input<number>;
    hbOutVlan?: pulumi.Input<number>;
    hbSrcIp?: pulumi.Input<string>;
    hbSrcUdpPort?: pulumi.Input<number>;
    hbVerify?: pulumi.Input<string>;
    islFortilink?: pulumi.Input<number>;
    lacpSpeed?: pulumi.Input<string>;
    maxBundle?: pulumi.Input<number>;
    maxMissHeartbeats?: pulumi.Input<number>;
    mclag?: pulumi.Input<string>;
    mclagIcl?: pulumi.Input<string>;
    mclagMacAddress?: pulumi.Input<string>;
    memberWithdrawalBehavior?: pulumi.Input<string>;
    members?: pulumi.Input<pulumi.Input<inputs.SwitchTrunkMember>[]>;
    minBundle?: pulumi.Input<number>;
    mode?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    portExtension?: pulumi.Input<string>;
    portExtensionTrigger?: pulumi.Input<number>;
    portSelectionCriteria?: pulumi.Input<string>;
    restricted?: pulumi.Input<number>;
    staticIsl?: pulumi.Input<string>;
    staticIslAutoVlan?: pulumi.Input<string>;
    trunkId?: pulumi.Input<number>;
}
