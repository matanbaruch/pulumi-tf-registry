// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class LogdiskFilter extends pulumi.CustomResource {
    /**
     * Get an existing LogdiskFilter resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LogdiskFilterState, opts?: pulumi.CustomResourceOptions): LogdiskFilter {
        return new LogdiskFilter(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortiswitch:index/logdiskFilter:LogdiskFilter';

    /**
     * Returns true if the given object is an instance of LogdiskFilter.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LogdiskFilter {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LogdiskFilter.__pulumiType;
    }

    public readonly admin!: pulumi.Output<string>;
    public readonly auth!: pulumi.Output<string>;
    public readonly cpuMemoryUsage!: pulumi.Output<string>;
    public readonly dhcp!: pulumi.Output<string>;
    public readonly event!: pulumi.Output<string>;
    public readonly ha!: pulumi.Output<string>;
    public readonly override!: pulumi.Output<string>;
    public readonly pattern!: pulumi.Output<string>;
    public readonly severity!: pulumi.Output<string>;
    public readonly system!: pulumi.Output<string>;
    public readonly wirelessActivity!: pulumi.Output<string>;

    /**
     * Create a LogdiskFilter resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: LogdiskFilterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LogdiskFilterArgs | LogdiskFilterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LogdiskFilterState | undefined;
            resourceInputs["admin"] = state ? state.admin : undefined;
            resourceInputs["auth"] = state ? state.auth : undefined;
            resourceInputs["cpuMemoryUsage"] = state ? state.cpuMemoryUsage : undefined;
            resourceInputs["dhcp"] = state ? state.dhcp : undefined;
            resourceInputs["event"] = state ? state.event : undefined;
            resourceInputs["ha"] = state ? state.ha : undefined;
            resourceInputs["override"] = state ? state.override : undefined;
            resourceInputs["pattern"] = state ? state.pattern : undefined;
            resourceInputs["severity"] = state ? state.severity : undefined;
            resourceInputs["system"] = state ? state.system : undefined;
            resourceInputs["wirelessActivity"] = state ? state.wirelessActivity : undefined;
        } else {
            const args = argsOrState as LogdiskFilterArgs | undefined;
            resourceInputs["admin"] = args ? args.admin : undefined;
            resourceInputs["auth"] = args ? args.auth : undefined;
            resourceInputs["cpuMemoryUsage"] = args ? args.cpuMemoryUsage : undefined;
            resourceInputs["dhcp"] = args ? args.dhcp : undefined;
            resourceInputs["event"] = args ? args.event : undefined;
            resourceInputs["ha"] = args ? args.ha : undefined;
            resourceInputs["override"] = args ? args.override : undefined;
            resourceInputs["pattern"] = args ? args.pattern : undefined;
            resourceInputs["severity"] = args ? args.severity : undefined;
            resourceInputs["system"] = args ? args.system : undefined;
            resourceInputs["wirelessActivity"] = args ? args.wirelessActivity : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LogdiskFilter.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LogdiskFilter resources.
 */
export interface LogdiskFilterState {
    admin?: pulumi.Input<string>;
    auth?: pulumi.Input<string>;
    cpuMemoryUsage?: pulumi.Input<string>;
    dhcp?: pulumi.Input<string>;
    event?: pulumi.Input<string>;
    ha?: pulumi.Input<string>;
    override?: pulumi.Input<string>;
    pattern?: pulumi.Input<string>;
    severity?: pulumi.Input<string>;
    system?: pulumi.Input<string>;
    wirelessActivity?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LogdiskFilter resource.
 */
export interface LogdiskFilterArgs {
    admin?: pulumi.Input<string>;
    auth?: pulumi.Input<string>;
    cpuMemoryUsage?: pulumi.Input<string>;
    dhcp?: pulumi.Input<string>;
    event?: pulumi.Input<string>;
    ha?: pulumi.Input<string>;
    override?: pulumi.Input<string>;
    pattern?: pulumi.Input<string>;
    severity?: pulumi.Input<string>;
    system?: pulumi.Input<string>;
    wirelessActivity?: pulumi.Input<string>;
}
