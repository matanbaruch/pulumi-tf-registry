// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SwitchGlobal extends pulumi.CustomResource {
    /**
     * Get an existing SwitchGlobal resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SwitchGlobalState, opts?: pulumi.CustomResourceOptions): SwitchGlobal {
        return new SwitchGlobal(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortiswitch:index/switchGlobal:SwitchGlobal';

    /**
     * Returns true if the given object is an instance of SwitchGlobal.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SwitchGlobal {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SwitchGlobal.__pulumiType;
    }

    public readonly accessVlanMode!: pulumi.Output<string>;
    public readonly autoFortilinkDiscovery!: pulumi.Output<string>;
    public readonly autoIsl!: pulumi.Output<string>;
    public readonly autoIslPortGroup!: pulumi.Output<number>;
    public readonly autoStpPriority!: pulumi.Output<string>;
    public readonly bpduLearn!: pulumi.Output<string>;
    public readonly dhcpSnoopingDatabaseExport!: pulumi.Output<string>;
    public readonly dmiGlobalAll!: pulumi.Output<string>;
    public readonly flapguardRetainTrigger!: pulumi.Output<string>;
    public readonly floodUnknownMulticast!: pulumi.Output<string>;
    public readonly floodVtp!: pulumi.Output<string>;
    public readonly fortiTrunkDmac!: pulumi.Output<string>;
    public readonly fortilinkHeartbeatTimeout!: pulumi.Output<number>;
    public readonly fortilinkP2pNativeVlan!: pulumi.Output<number>;
    public readonly fortilinkP2pTpid!: pulumi.Output<number>;
    public readonly fortilinkVlanOptimization!: pulumi.Output<string>;
    public readonly ipMacBinding!: pulumi.Output<string>;
    public readonly l2MemoryCheck!: pulumi.Output<string>;
    public readonly l2MemoryCheckInterval!: pulumi.Output<number>;
    public readonly logMacLimitViolations!: pulumi.Output<string>;
    public readonly loopGuardTxInterval!: pulumi.Output<number>;
    public readonly macAddress!: pulumi.Output<number>;
    public readonly macAddressAlgorithm!: pulumi.Output<string>;
    public readonly macAgingInterval!: pulumi.Output<number>;
    public readonly macViolationTimer!: pulumi.Output<number>;
    public readonly maxPathInEcmpGroup!: pulumi.Output<number>;
    public readonly mclagIgmpsnoopingAware!: pulumi.Output<string>;
    public readonly mclagPeerInfoTimeout!: pulumi.Output<number>;
    public readonly mclagPortBase!: pulumi.Output<number>;
    public readonly mclagSplitBrainAllPortsDown!: pulumi.Output<string>;
    public readonly mclagSplitBrainDetect!: pulumi.Output<string>;
    public readonly mclagSplitBrainPriority!: pulumi.Output<number>;
    public readonly mclagStpAware!: pulumi.Output<string>;
    public readonly mirrorQos!: pulumi.Output<number>;
    public readonly name!: pulumi.Output<string>;
    public readonly poeAlarmThreshold!: pulumi.Output<number>;
    public readonly poeGuardBand!: pulumi.Output<number>;
    public readonly poePowerBudget!: pulumi.Output<number>;
    public readonly poePowerMode!: pulumi.Output<string>;
    public readonly poePreStandardDetect!: pulumi.Output<string>;
    public readonly portSecurity!: pulumi.Output<outputs.SwitchGlobalPortSecurity | undefined>;
    public readonly trunkHashMode!: pulumi.Output<string>;
    public readonly trunkHashUnicastSrcPort!: pulumi.Output<string>;
    public readonly trunkHashUnkunicastSrcDst!: pulumi.Output<string>;
    public readonly virtualWireTpid!: pulumi.Output<number>;
    public readonly vxlanDport!: pulumi.Output<number>;
    public readonly vxlanPort!: pulumi.Output<number>;
    public readonly vxlanSport!: pulumi.Output<number>;
    public readonly vxlanStpVirtualMac!: pulumi.Output<string>;
    public readonly vxlanStpVirtualRoot!: pulumi.Output<string>;

    /**
     * Create a SwitchGlobal resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SwitchGlobalArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SwitchGlobalArgs | SwitchGlobalState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SwitchGlobalState | undefined;
            resourceInputs["accessVlanMode"] = state ? state.accessVlanMode : undefined;
            resourceInputs["autoFortilinkDiscovery"] = state ? state.autoFortilinkDiscovery : undefined;
            resourceInputs["autoIsl"] = state ? state.autoIsl : undefined;
            resourceInputs["autoIslPortGroup"] = state ? state.autoIslPortGroup : undefined;
            resourceInputs["autoStpPriority"] = state ? state.autoStpPriority : undefined;
            resourceInputs["bpduLearn"] = state ? state.bpduLearn : undefined;
            resourceInputs["dhcpSnoopingDatabaseExport"] = state ? state.dhcpSnoopingDatabaseExport : undefined;
            resourceInputs["dmiGlobalAll"] = state ? state.dmiGlobalAll : undefined;
            resourceInputs["flapguardRetainTrigger"] = state ? state.flapguardRetainTrigger : undefined;
            resourceInputs["floodUnknownMulticast"] = state ? state.floodUnknownMulticast : undefined;
            resourceInputs["floodVtp"] = state ? state.floodVtp : undefined;
            resourceInputs["fortiTrunkDmac"] = state ? state.fortiTrunkDmac : undefined;
            resourceInputs["fortilinkHeartbeatTimeout"] = state ? state.fortilinkHeartbeatTimeout : undefined;
            resourceInputs["fortilinkP2pNativeVlan"] = state ? state.fortilinkP2pNativeVlan : undefined;
            resourceInputs["fortilinkP2pTpid"] = state ? state.fortilinkP2pTpid : undefined;
            resourceInputs["fortilinkVlanOptimization"] = state ? state.fortilinkVlanOptimization : undefined;
            resourceInputs["ipMacBinding"] = state ? state.ipMacBinding : undefined;
            resourceInputs["l2MemoryCheck"] = state ? state.l2MemoryCheck : undefined;
            resourceInputs["l2MemoryCheckInterval"] = state ? state.l2MemoryCheckInterval : undefined;
            resourceInputs["logMacLimitViolations"] = state ? state.logMacLimitViolations : undefined;
            resourceInputs["loopGuardTxInterval"] = state ? state.loopGuardTxInterval : undefined;
            resourceInputs["macAddress"] = state ? state.macAddress : undefined;
            resourceInputs["macAddressAlgorithm"] = state ? state.macAddressAlgorithm : undefined;
            resourceInputs["macAgingInterval"] = state ? state.macAgingInterval : undefined;
            resourceInputs["macViolationTimer"] = state ? state.macViolationTimer : undefined;
            resourceInputs["maxPathInEcmpGroup"] = state ? state.maxPathInEcmpGroup : undefined;
            resourceInputs["mclagIgmpsnoopingAware"] = state ? state.mclagIgmpsnoopingAware : undefined;
            resourceInputs["mclagPeerInfoTimeout"] = state ? state.mclagPeerInfoTimeout : undefined;
            resourceInputs["mclagPortBase"] = state ? state.mclagPortBase : undefined;
            resourceInputs["mclagSplitBrainAllPortsDown"] = state ? state.mclagSplitBrainAllPortsDown : undefined;
            resourceInputs["mclagSplitBrainDetect"] = state ? state.mclagSplitBrainDetect : undefined;
            resourceInputs["mclagSplitBrainPriority"] = state ? state.mclagSplitBrainPriority : undefined;
            resourceInputs["mclagStpAware"] = state ? state.mclagStpAware : undefined;
            resourceInputs["mirrorQos"] = state ? state.mirrorQos : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["poeAlarmThreshold"] = state ? state.poeAlarmThreshold : undefined;
            resourceInputs["poeGuardBand"] = state ? state.poeGuardBand : undefined;
            resourceInputs["poePowerBudget"] = state ? state.poePowerBudget : undefined;
            resourceInputs["poePowerMode"] = state ? state.poePowerMode : undefined;
            resourceInputs["poePreStandardDetect"] = state ? state.poePreStandardDetect : undefined;
            resourceInputs["portSecurity"] = state ? state.portSecurity : undefined;
            resourceInputs["trunkHashMode"] = state ? state.trunkHashMode : undefined;
            resourceInputs["trunkHashUnicastSrcPort"] = state ? state.trunkHashUnicastSrcPort : undefined;
            resourceInputs["trunkHashUnkunicastSrcDst"] = state ? state.trunkHashUnkunicastSrcDst : undefined;
            resourceInputs["virtualWireTpid"] = state ? state.virtualWireTpid : undefined;
            resourceInputs["vxlanDport"] = state ? state.vxlanDport : undefined;
            resourceInputs["vxlanPort"] = state ? state.vxlanPort : undefined;
            resourceInputs["vxlanSport"] = state ? state.vxlanSport : undefined;
            resourceInputs["vxlanStpVirtualMac"] = state ? state.vxlanStpVirtualMac : undefined;
            resourceInputs["vxlanStpVirtualRoot"] = state ? state.vxlanStpVirtualRoot : undefined;
        } else {
            const args = argsOrState as SwitchGlobalArgs | undefined;
            resourceInputs["accessVlanMode"] = args ? args.accessVlanMode : undefined;
            resourceInputs["autoFortilinkDiscovery"] = args ? args.autoFortilinkDiscovery : undefined;
            resourceInputs["autoIsl"] = args ? args.autoIsl : undefined;
            resourceInputs["autoIslPortGroup"] = args ? args.autoIslPortGroup : undefined;
            resourceInputs["autoStpPriority"] = args ? args.autoStpPriority : undefined;
            resourceInputs["bpduLearn"] = args ? args.bpduLearn : undefined;
            resourceInputs["dhcpSnoopingDatabaseExport"] = args ? args.dhcpSnoopingDatabaseExport : undefined;
            resourceInputs["dmiGlobalAll"] = args ? args.dmiGlobalAll : undefined;
            resourceInputs["flapguardRetainTrigger"] = args ? args.flapguardRetainTrigger : undefined;
            resourceInputs["floodUnknownMulticast"] = args ? args.floodUnknownMulticast : undefined;
            resourceInputs["floodVtp"] = args ? args.floodVtp : undefined;
            resourceInputs["fortiTrunkDmac"] = args ? args.fortiTrunkDmac : undefined;
            resourceInputs["fortilinkHeartbeatTimeout"] = args ? args.fortilinkHeartbeatTimeout : undefined;
            resourceInputs["fortilinkP2pNativeVlan"] = args ? args.fortilinkP2pNativeVlan : undefined;
            resourceInputs["fortilinkP2pTpid"] = args ? args.fortilinkP2pTpid : undefined;
            resourceInputs["fortilinkVlanOptimization"] = args ? args.fortilinkVlanOptimization : undefined;
            resourceInputs["ipMacBinding"] = args ? args.ipMacBinding : undefined;
            resourceInputs["l2MemoryCheck"] = args ? args.l2MemoryCheck : undefined;
            resourceInputs["l2MemoryCheckInterval"] = args ? args.l2MemoryCheckInterval : undefined;
            resourceInputs["logMacLimitViolations"] = args ? args.logMacLimitViolations : undefined;
            resourceInputs["loopGuardTxInterval"] = args ? args.loopGuardTxInterval : undefined;
            resourceInputs["macAddress"] = args ? args.macAddress : undefined;
            resourceInputs["macAddressAlgorithm"] = args ? args.macAddressAlgorithm : undefined;
            resourceInputs["macAgingInterval"] = args ? args.macAgingInterval : undefined;
            resourceInputs["macViolationTimer"] = args ? args.macViolationTimer : undefined;
            resourceInputs["maxPathInEcmpGroup"] = args ? args.maxPathInEcmpGroup : undefined;
            resourceInputs["mclagIgmpsnoopingAware"] = args ? args.mclagIgmpsnoopingAware : undefined;
            resourceInputs["mclagPeerInfoTimeout"] = args ? args.mclagPeerInfoTimeout : undefined;
            resourceInputs["mclagPortBase"] = args ? args.mclagPortBase : undefined;
            resourceInputs["mclagSplitBrainAllPortsDown"] = args ? args.mclagSplitBrainAllPortsDown : undefined;
            resourceInputs["mclagSplitBrainDetect"] = args ? args.mclagSplitBrainDetect : undefined;
            resourceInputs["mclagSplitBrainPriority"] = args ? args.mclagSplitBrainPriority : undefined;
            resourceInputs["mclagStpAware"] = args ? args.mclagStpAware : undefined;
            resourceInputs["mirrorQos"] = args ? args.mirrorQos : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["poeAlarmThreshold"] = args ? args.poeAlarmThreshold : undefined;
            resourceInputs["poeGuardBand"] = args ? args.poeGuardBand : undefined;
            resourceInputs["poePowerBudget"] = args ? args.poePowerBudget : undefined;
            resourceInputs["poePowerMode"] = args ? args.poePowerMode : undefined;
            resourceInputs["poePreStandardDetect"] = args ? args.poePreStandardDetect : undefined;
            resourceInputs["portSecurity"] = args ? args.portSecurity : undefined;
            resourceInputs["trunkHashMode"] = args ? args.trunkHashMode : undefined;
            resourceInputs["trunkHashUnicastSrcPort"] = args ? args.trunkHashUnicastSrcPort : undefined;
            resourceInputs["trunkHashUnkunicastSrcDst"] = args ? args.trunkHashUnkunicastSrcDst : undefined;
            resourceInputs["virtualWireTpid"] = args ? args.virtualWireTpid : undefined;
            resourceInputs["vxlanDport"] = args ? args.vxlanDport : undefined;
            resourceInputs["vxlanPort"] = args ? args.vxlanPort : undefined;
            resourceInputs["vxlanSport"] = args ? args.vxlanSport : undefined;
            resourceInputs["vxlanStpVirtualMac"] = args ? args.vxlanStpVirtualMac : undefined;
            resourceInputs["vxlanStpVirtualRoot"] = args ? args.vxlanStpVirtualRoot : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SwitchGlobal.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SwitchGlobal resources.
 */
export interface SwitchGlobalState {
    accessVlanMode?: pulumi.Input<string>;
    autoFortilinkDiscovery?: pulumi.Input<string>;
    autoIsl?: pulumi.Input<string>;
    autoIslPortGroup?: pulumi.Input<number>;
    autoStpPriority?: pulumi.Input<string>;
    bpduLearn?: pulumi.Input<string>;
    dhcpSnoopingDatabaseExport?: pulumi.Input<string>;
    dmiGlobalAll?: pulumi.Input<string>;
    flapguardRetainTrigger?: pulumi.Input<string>;
    floodUnknownMulticast?: pulumi.Input<string>;
    floodVtp?: pulumi.Input<string>;
    fortiTrunkDmac?: pulumi.Input<string>;
    fortilinkHeartbeatTimeout?: pulumi.Input<number>;
    fortilinkP2pNativeVlan?: pulumi.Input<number>;
    fortilinkP2pTpid?: pulumi.Input<number>;
    fortilinkVlanOptimization?: pulumi.Input<string>;
    ipMacBinding?: pulumi.Input<string>;
    l2MemoryCheck?: pulumi.Input<string>;
    l2MemoryCheckInterval?: pulumi.Input<number>;
    logMacLimitViolations?: pulumi.Input<string>;
    loopGuardTxInterval?: pulumi.Input<number>;
    macAddress?: pulumi.Input<number>;
    macAddressAlgorithm?: pulumi.Input<string>;
    macAgingInterval?: pulumi.Input<number>;
    macViolationTimer?: pulumi.Input<number>;
    maxPathInEcmpGroup?: pulumi.Input<number>;
    mclagIgmpsnoopingAware?: pulumi.Input<string>;
    mclagPeerInfoTimeout?: pulumi.Input<number>;
    mclagPortBase?: pulumi.Input<number>;
    mclagSplitBrainAllPortsDown?: pulumi.Input<string>;
    mclagSplitBrainDetect?: pulumi.Input<string>;
    mclagSplitBrainPriority?: pulumi.Input<number>;
    mclagStpAware?: pulumi.Input<string>;
    mirrorQos?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    poeAlarmThreshold?: pulumi.Input<number>;
    poeGuardBand?: pulumi.Input<number>;
    poePowerBudget?: pulumi.Input<number>;
    poePowerMode?: pulumi.Input<string>;
    poePreStandardDetect?: pulumi.Input<string>;
    portSecurity?: pulumi.Input<inputs.SwitchGlobalPortSecurity>;
    trunkHashMode?: pulumi.Input<string>;
    trunkHashUnicastSrcPort?: pulumi.Input<string>;
    trunkHashUnkunicastSrcDst?: pulumi.Input<string>;
    virtualWireTpid?: pulumi.Input<number>;
    vxlanDport?: pulumi.Input<number>;
    vxlanPort?: pulumi.Input<number>;
    vxlanSport?: pulumi.Input<number>;
    vxlanStpVirtualMac?: pulumi.Input<string>;
    vxlanStpVirtualRoot?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SwitchGlobal resource.
 */
export interface SwitchGlobalArgs {
    accessVlanMode?: pulumi.Input<string>;
    autoFortilinkDiscovery?: pulumi.Input<string>;
    autoIsl?: pulumi.Input<string>;
    autoIslPortGroup?: pulumi.Input<number>;
    autoStpPriority?: pulumi.Input<string>;
    bpduLearn?: pulumi.Input<string>;
    dhcpSnoopingDatabaseExport?: pulumi.Input<string>;
    dmiGlobalAll?: pulumi.Input<string>;
    flapguardRetainTrigger?: pulumi.Input<string>;
    floodUnknownMulticast?: pulumi.Input<string>;
    floodVtp?: pulumi.Input<string>;
    fortiTrunkDmac?: pulumi.Input<string>;
    fortilinkHeartbeatTimeout?: pulumi.Input<number>;
    fortilinkP2pNativeVlan?: pulumi.Input<number>;
    fortilinkP2pTpid?: pulumi.Input<number>;
    fortilinkVlanOptimization?: pulumi.Input<string>;
    ipMacBinding?: pulumi.Input<string>;
    l2MemoryCheck?: pulumi.Input<string>;
    l2MemoryCheckInterval?: pulumi.Input<number>;
    logMacLimitViolations?: pulumi.Input<string>;
    loopGuardTxInterval?: pulumi.Input<number>;
    macAddress?: pulumi.Input<number>;
    macAddressAlgorithm?: pulumi.Input<string>;
    macAgingInterval?: pulumi.Input<number>;
    macViolationTimer?: pulumi.Input<number>;
    maxPathInEcmpGroup?: pulumi.Input<number>;
    mclagIgmpsnoopingAware?: pulumi.Input<string>;
    mclagPeerInfoTimeout?: pulumi.Input<number>;
    mclagPortBase?: pulumi.Input<number>;
    mclagSplitBrainAllPortsDown?: pulumi.Input<string>;
    mclagSplitBrainDetect?: pulumi.Input<string>;
    mclagSplitBrainPriority?: pulumi.Input<number>;
    mclagStpAware?: pulumi.Input<string>;
    mirrorQos?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    poeAlarmThreshold?: pulumi.Input<number>;
    poeGuardBand?: pulumi.Input<number>;
    poePowerBudget?: pulumi.Input<number>;
    poePowerMode?: pulumi.Input<string>;
    poePreStandardDetect?: pulumi.Input<string>;
    portSecurity?: pulumi.Input<inputs.SwitchGlobalPortSecurity>;
    trunkHashMode?: pulumi.Input<string>;
    trunkHashUnicastSrcPort?: pulumi.Input<string>;
    trunkHashUnkunicastSrcDst?: pulumi.Input<string>;
    virtualWireTpid?: pulumi.Input<number>;
    vxlanDport?: pulumi.Input<number>;
    vxlanPort?: pulumi.Input<number>;
    vxlanSport?: pulumi.Input<number>;
    vxlanStpVirtualMac?: pulumi.Input<string>;
    vxlanStpVirtualRoot?: pulumi.Input<string>;
}
