// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SystemGlobal extends pulumi.CustomResource {
    /**
     * Get an existing SystemGlobal resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SystemGlobalState, opts?: pulumi.CustomResourceOptions): SystemGlobal {
        return new SystemGlobal(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortiswitch:index/systemGlobal:SystemGlobal';

    /**
     * Returns true if the given object is an instance of SystemGlobal.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SystemGlobal {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SystemGlobal.__pulumiType;
    }

    public readonly adminConcurrent!: pulumi.Output<string>;
    public readonly adminHttpsPkiRequired!: pulumi.Output<string>;
    public readonly adminHttpsSslVersions!: pulumi.Output<string>;
    public readonly adminLockoutDuration!: pulumi.Output<number>;
    public readonly adminLockoutThreshold!: pulumi.Output<number>;
    public readonly adminPasswordHash!: pulumi.Output<string>;
    public readonly adminPort!: pulumi.Output<number>;
    public readonly adminScp!: pulumi.Output<string>;
    public readonly adminServerCert!: pulumi.Output<string>;
    public readonly adminSport!: pulumi.Output<number>;
    public readonly adminSshGraceTime!: pulumi.Output<number>;
    public readonly adminSshPort!: pulumi.Output<number>;
    public readonly adminSshV1!: pulumi.Output<string>;
    public readonly adminTelnetPort!: pulumi.Output<number>;
    public readonly admintimeout!: pulumi.Output<number>;
    public readonly alertInterval!: pulumi.Output<number>;
    public readonly alertdRelog!: pulumi.Output<string>;
    public readonly allowSubnetOverlap!: pulumi.Output<string>;
    public readonly arpTimeout!: pulumi.Output<number>;
    public readonly assetTag!: pulumi.Output<string>;
    public readonly autoIsl!: pulumi.Output<string>;
    public readonly cfgRevertTimeout!: pulumi.Output<number>;
    public readonly cfgSave!: pulumi.Output<string>;
    public readonly cltCertReq!: pulumi.Output<string>;
    public readonly csrCaAttribute!: pulumi.Output<string>;
    public readonly dailyRestart!: pulumi.Output<string>;
    public readonly delaycliTimeoutCleanup!: pulumi.Output<number>;
    public readonly detectIpConflict!: pulumi.Output<string>;
    public readonly dhParams!: pulumi.Output<number>;
    public readonly dhcpCircuitId!: pulumi.Output<string>;
    public readonly dhcpClientLocation!: pulumi.Output<string>;
    public readonly dhcpOptionFormat!: pulumi.Output<string>;
    public readonly dhcpRemoteId!: pulumi.Output<string>;
    public readonly dhcpServerAccessList!: pulumi.Output<string>;
    public readonly dhcpSnoopClientReq!: pulumi.Output<string>;
    public readonly dhcpsDbExp!: pulumi.Output<number>;
    public readonly dhcpsDbPerPortLearnLimit!: pulumi.Output<number>;
    public readonly dst!: pulumi.Output<string>;
    public readonly failtime!: pulumi.Output<number>;
    public readonly fortilinkAutoDiscovery!: pulumi.Output<string>;
    public readonly hostname!: pulumi.Output<string>;
    public readonly imageRotation!: pulumi.Output<string>;
    public readonly interval!: pulumi.Output<number>;
    public readonly ipConflictIgnoreDefault!: pulumi.Output<string>;
    public readonly ipv6AcceptDad!: pulumi.Output<number>;
    public readonly ipv6AllForwarding!: pulumi.Output<string>;
    public readonly kernelCrashlog!: pulumi.Output<string>;
    public readonly kernelDevicelog!: pulumi.Output<string>;
    public readonly l3HostExpiry!: pulumi.Output<string>;
    public readonly language!: pulumi.Output<string>;
    public readonly ldapconntimeout!: pulumi.Output<number>;
    public readonly n8021xCaCertificate!: pulumi.Output<string>;
    public readonly n8021xCertificate!: pulumi.Output<string>;
    public readonly postLoginBanner!: pulumi.Output<string>;
    public readonly preLoginBanner!: pulumi.Output<string>;
    public readonly privateDataEncryption!: pulumi.Output<string>;
    public readonly radiusCoaPort!: pulumi.Output<number>;
    public readonly radiusPort!: pulumi.Output<number>;
    public readonly remoteauthtimeout!: pulumi.Output<number>;
    public readonly restartTime!: pulumi.Output<string>;
    public readonly revisionBackupOnLogout!: pulumi.Output<string>;
    public readonly revisionBackupOnUpgrade!: pulumi.Output<string>;
    public readonly strongCrypto!: pulumi.Output<string>;
    public readonly switchMgmtMode!: pulumi.Output<string>;
    public readonly tcp6MssMin!: pulumi.Output<number>;
    public readonly tcpMssMin!: pulumi.Output<number>;
    public readonly tcpOptions!: pulumi.Output<string>;
    public readonly tftp!: pulumi.Output<string>;
    public readonly timezone!: pulumi.Output<string>;

    /**
     * Create a SystemGlobal resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SystemGlobalArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SystemGlobalArgs | SystemGlobalState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SystemGlobalState | undefined;
            resourceInputs["adminConcurrent"] = state ? state.adminConcurrent : undefined;
            resourceInputs["adminHttpsPkiRequired"] = state ? state.adminHttpsPkiRequired : undefined;
            resourceInputs["adminHttpsSslVersions"] = state ? state.adminHttpsSslVersions : undefined;
            resourceInputs["adminLockoutDuration"] = state ? state.adminLockoutDuration : undefined;
            resourceInputs["adminLockoutThreshold"] = state ? state.adminLockoutThreshold : undefined;
            resourceInputs["adminPasswordHash"] = state ? state.adminPasswordHash : undefined;
            resourceInputs["adminPort"] = state ? state.adminPort : undefined;
            resourceInputs["adminScp"] = state ? state.adminScp : undefined;
            resourceInputs["adminServerCert"] = state ? state.adminServerCert : undefined;
            resourceInputs["adminSport"] = state ? state.adminSport : undefined;
            resourceInputs["adminSshGraceTime"] = state ? state.adminSshGraceTime : undefined;
            resourceInputs["adminSshPort"] = state ? state.adminSshPort : undefined;
            resourceInputs["adminSshV1"] = state ? state.adminSshV1 : undefined;
            resourceInputs["adminTelnetPort"] = state ? state.adminTelnetPort : undefined;
            resourceInputs["admintimeout"] = state ? state.admintimeout : undefined;
            resourceInputs["alertInterval"] = state ? state.alertInterval : undefined;
            resourceInputs["alertdRelog"] = state ? state.alertdRelog : undefined;
            resourceInputs["allowSubnetOverlap"] = state ? state.allowSubnetOverlap : undefined;
            resourceInputs["arpTimeout"] = state ? state.arpTimeout : undefined;
            resourceInputs["assetTag"] = state ? state.assetTag : undefined;
            resourceInputs["autoIsl"] = state ? state.autoIsl : undefined;
            resourceInputs["cfgRevertTimeout"] = state ? state.cfgRevertTimeout : undefined;
            resourceInputs["cfgSave"] = state ? state.cfgSave : undefined;
            resourceInputs["cltCertReq"] = state ? state.cltCertReq : undefined;
            resourceInputs["csrCaAttribute"] = state ? state.csrCaAttribute : undefined;
            resourceInputs["dailyRestart"] = state ? state.dailyRestart : undefined;
            resourceInputs["delaycliTimeoutCleanup"] = state ? state.delaycliTimeoutCleanup : undefined;
            resourceInputs["detectIpConflict"] = state ? state.detectIpConflict : undefined;
            resourceInputs["dhParams"] = state ? state.dhParams : undefined;
            resourceInputs["dhcpCircuitId"] = state ? state.dhcpCircuitId : undefined;
            resourceInputs["dhcpClientLocation"] = state ? state.dhcpClientLocation : undefined;
            resourceInputs["dhcpOptionFormat"] = state ? state.dhcpOptionFormat : undefined;
            resourceInputs["dhcpRemoteId"] = state ? state.dhcpRemoteId : undefined;
            resourceInputs["dhcpServerAccessList"] = state ? state.dhcpServerAccessList : undefined;
            resourceInputs["dhcpSnoopClientReq"] = state ? state.dhcpSnoopClientReq : undefined;
            resourceInputs["dhcpsDbExp"] = state ? state.dhcpsDbExp : undefined;
            resourceInputs["dhcpsDbPerPortLearnLimit"] = state ? state.dhcpsDbPerPortLearnLimit : undefined;
            resourceInputs["dst"] = state ? state.dst : undefined;
            resourceInputs["failtime"] = state ? state.failtime : undefined;
            resourceInputs["fortilinkAutoDiscovery"] = state ? state.fortilinkAutoDiscovery : undefined;
            resourceInputs["hostname"] = state ? state.hostname : undefined;
            resourceInputs["imageRotation"] = state ? state.imageRotation : undefined;
            resourceInputs["interval"] = state ? state.interval : undefined;
            resourceInputs["ipConflictIgnoreDefault"] = state ? state.ipConflictIgnoreDefault : undefined;
            resourceInputs["ipv6AcceptDad"] = state ? state.ipv6AcceptDad : undefined;
            resourceInputs["ipv6AllForwarding"] = state ? state.ipv6AllForwarding : undefined;
            resourceInputs["kernelCrashlog"] = state ? state.kernelCrashlog : undefined;
            resourceInputs["kernelDevicelog"] = state ? state.kernelDevicelog : undefined;
            resourceInputs["l3HostExpiry"] = state ? state.l3HostExpiry : undefined;
            resourceInputs["language"] = state ? state.language : undefined;
            resourceInputs["ldapconntimeout"] = state ? state.ldapconntimeout : undefined;
            resourceInputs["n8021xCaCertificate"] = state ? state.n8021xCaCertificate : undefined;
            resourceInputs["n8021xCertificate"] = state ? state.n8021xCertificate : undefined;
            resourceInputs["postLoginBanner"] = state ? state.postLoginBanner : undefined;
            resourceInputs["preLoginBanner"] = state ? state.preLoginBanner : undefined;
            resourceInputs["privateDataEncryption"] = state ? state.privateDataEncryption : undefined;
            resourceInputs["radiusCoaPort"] = state ? state.radiusCoaPort : undefined;
            resourceInputs["radiusPort"] = state ? state.radiusPort : undefined;
            resourceInputs["remoteauthtimeout"] = state ? state.remoteauthtimeout : undefined;
            resourceInputs["restartTime"] = state ? state.restartTime : undefined;
            resourceInputs["revisionBackupOnLogout"] = state ? state.revisionBackupOnLogout : undefined;
            resourceInputs["revisionBackupOnUpgrade"] = state ? state.revisionBackupOnUpgrade : undefined;
            resourceInputs["strongCrypto"] = state ? state.strongCrypto : undefined;
            resourceInputs["switchMgmtMode"] = state ? state.switchMgmtMode : undefined;
            resourceInputs["tcp6MssMin"] = state ? state.tcp6MssMin : undefined;
            resourceInputs["tcpMssMin"] = state ? state.tcpMssMin : undefined;
            resourceInputs["tcpOptions"] = state ? state.tcpOptions : undefined;
            resourceInputs["tftp"] = state ? state.tftp : undefined;
            resourceInputs["timezone"] = state ? state.timezone : undefined;
        } else {
            const args = argsOrState as SystemGlobalArgs | undefined;
            resourceInputs["adminConcurrent"] = args ? args.adminConcurrent : undefined;
            resourceInputs["adminHttpsPkiRequired"] = args ? args.adminHttpsPkiRequired : undefined;
            resourceInputs["adminHttpsSslVersions"] = args ? args.adminHttpsSslVersions : undefined;
            resourceInputs["adminLockoutDuration"] = args ? args.adminLockoutDuration : undefined;
            resourceInputs["adminLockoutThreshold"] = args ? args.adminLockoutThreshold : undefined;
            resourceInputs["adminPasswordHash"] = args ? args.adminPasswordHash : undefined;
            resourceInputs["adminPort"] = args ? args.adminPort : undefined;
            resourceInputs["adminScp"] = args ? args.adminScp : undefined;
            resourceInputs["adminServerCert"] = args ? args.adminServerCert : undefined;
            resourceInputs["adminSport"] = args ? args.adminSport : undefined;
            resourceInputs["adminSshGraceTime"] = args ? args.adminSshGraceTime : undefined;
            resourceInputs["adminSshPort"] = args ? args.adminSshPort : undefined;
            resourceInputs["adminSshV1"] = args ? args.adminSshV1 : undefined;
            resourceInputs["adminTelnetPort"] = args ? args.adminTelnetPort : undefined;
            resourceInputs["admintimeout"] = args ? args.admintimeout : undefined;
            resourceInputs["alertInterval"] = args ? args.alertInterval : undefined;
            resourceInputs["alertdRelog"] = args ? args.alertdRelog : undefined;
            resourceInputs["allowSubnetOverlap"] = args ? args.allowSubnetOverlap : undefined;
            resourceInputs["arpTimeout"] = args ? args.arpTimeout : undefined;
            resourceInputs["assetTag"] = args ? args.assetTag : undefined;
            resourceInputs["autoIsl"] = args ? args.autoIsl : undefined;
            resourceInputs["cfgRevertTimeout"] = args ? args.cfgRevertTimeout : undefined;
            resourceInputs["cfgSave"] = args ? args.cfgSave : undefined;
            resourceInputs["cltCertReq"] = args ? args.cltCertReq : undefined;
            resourceInputs["csrCaAttribute"] = args ? args.csrCaAttribute : undefined;
            resourceInputs["dailyRestart"] = args ? args.dailyRestart : undefined;
            resourceInputs["delaycliTimeoutCleanup"] = args ? args.delaycliTimeoutCleanup : undefined;
            resourceInputs["detectIpConflict"] = args ? args.detectIpConflict : undefined;
            resourceInputs["dhParams"] = args ? args.dhParams : undefined;
            resourceInputs["dhcpCircuitId"] = args ? args.dhcpCircuitId : undefined;
            resourceInputs["dhcpClientLocation"] = args ? args.dhcpClientLocation : undefined;
            resourceInputs["dhcpOptionFormat"] = args ? args.dhcpOptionFormat : undefined;
            resourceInputs["dhcpRemoteId"] = args ? args.dhcpRemoteId : undefined;
            resourceInputs["dhcpServerAccessList"] = args ? args.dhcpServerAccessList : undefined;
            resourceInputs["dhcpSnoopClientReq"] = args ? args.dhcpSnoopClientReq : undefined;
            resourceInputs["dhcpsDbExp"] = args ? args.dhcpsDbExp : undefined;
            resourceInputs["dhcpsDbPerPortLearnLimit"] = args ? args.dhcpsDbPerPortLearnLimit : undefined;
            resourceInputs["dst"] = args ? args.dst : undefined;
            resourceInputs["failtime"] = args ? args.failtime : undefined;
            resourceInputs["fortilinkAutoDiscovery"] = args ? args.fortilinkAutoDiscovery : undefined;
            resourceInputs["hostname"] = args ? args.hostname : undefined;
            resourceInputs["imageRotation"] = args ? args.imageRotation : undefined;
            resourceInputs["interval"] = args ? args.interval : undefined;
            resourceInputs["ipConflictIgnoreDefault"] = args ? args.ipConflictIgnoreDefault : undefined;
            resourceInputs["ipv6AcceptDad"] = args ? args.ipv6AcceptDad : undefined;
            resourceInputs["ipv6AllForwarding"] = args ? args.ipv6AllForwarding : undefined;
            resourceInputs["kernelCrashlog"] = args ? args.kernelCrashlog : undefined;
            resourceInputs["kernelDevicelog"] = args ? args.kernelDevicelog : undefined;
            resourceInputs["l3HostExpiry"] = args ? args.l3HostExpiry : undefined;
            resourceInputs["language"] = args ? args.language : undefined;
            resourceInputs["ldapconntimeout"] = args ? args.ldapconntimeout : undefined;
            resourceInputs["n8021xCaCertificate"] = args ? args.n8021xCaCertificate : undefined;
            resourceInputs["n8021xCertificate"] = args ? args.n8021xCertificate : undefined;
            resourceInputs["postLoginBanner"] = args ? args.postLoginBanner : undefined;
            resourceInputs["preLoginBanner"] = args ? args.preLoginBanner : undefined;
            resourceInputs["privateDataEncryption"] = args ? args.privateDataEncryption : undefined;
            resourceInputs["radiusCoaPort"] = args ? args.radiusCoaPort : undefined;
            resourceInputs["radiusPort"] = args ? args.radiusPort : undefined;
            resourceInputs["remoteauthtimeout"] = args ? args.remoteauthtimeout : undefined;
            resourceInputs["restartTime"] = args ? args.restartTime : undefined;
            resourceInputs["revisionBackupOnLogout"] = args ? args.revisionBackupOnLogout : undefined;
            resourceInputs["revisionBackupOnUpgrade"] = args ? args.revisionBackupOnUpgrade : undefined;
            resourceInputs["strongCrypto"] = args ? args.strongCrypto : undefined;
            resourceInputs["switchMgmtMode"] = args ? args.switchMgmtMode : undefined;
            resourceInputs["tcp6MssMin"] = args ? args.tcp6MssMin : undefined;
            resourceInputs["tcpMssMin"] = args ? args.tcpMssMin : undefined;
            resourceInputs["tcpOptions"] = args ? args.tcpOptions : undefined;
            resourceInputs["tftp"] = args ? args.tftp : undefined;
            resourceInputs["timezone"] = args ? args.timezone : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SystemGlobal.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SystemGlobal resources.
 */
export interface SystemGlobalState {
    adminConcurrent?: pulumi.Input<string>;
    adminHttpsPkiRequired?: pulumi.Input<string>;
    adminHttpsSslVersions?: pulumi.Input<string>;
    adminLockoutDuration?: pulumi.Input<number>;
    adminLockoutThreshold?: pulumi.Input<number>;
    adminPasswordHash?: pulumi.Input<string>;
    adminPort?: pulumi.Input<number>;
    adminScp?: pulumi.Input<string>;
    adminServerCert?: pulumi.Input<string>;
    adminSport?: pulumi.Input<number>;
    adminSshGraceTime?: pulumi.Input<number>;
    adminSshPort?: pulumi.Input<number>;
    adminSshV1?: pulumi.Input<string>;
    adminTelnetPort?: pulumi.Input<number>;
    admintimeout?: pulumi.Input<number>;
    alertInterval?: pulumi.Input<number>;
    alertdRelog?: pulumi.Input<string>;
    allowSubnetOverlap?: pulumi.Input<string>;
    arpTimeout?: pulumi.Input<number>;
    assetTag?: pulumi.Input<string>;
    autoIsl?: pulumi.Input<string>;
    cfgRevertTimeout?: pulumi.Input<number>;
    cfgSave?: pulumi.Input<string>;
    cltCertReq?: pulumi.Input<string>;
    csrCaAttribute?: pulumi.Input<string>;
    dailyRestart?: pulumi.Input<string>;
    delaycliTimeoutCleanup?: pulumi.Input<number>;
    detectIpConflict?: pulumi.Input<string>;
    dhParams?: pulumi.Input<number>;
    dhcpCircuitId?: pulumi.Input<string>;
    dhcpClientLocation?: pulumi.Input<string>;
    dhcpOptionFormat?: pulumi.Input<string>;
    dhcpRemoteId?: pulumi.Input<string>;
    dhcpServerAccessList?: pulumi.Input<string>;
    dhcpSnoopClientReq?: pulumi.Input<string>;
    dhcpsDbExp?: pulumi.Input<number>;
    dhcpsDbPerPortLearnLimit?: pulumi.Input<number>;
    dst?: pulumi.Input<string>;
    failtime?: pulumi.Input<number>;
    fortilinkAutoDiscovery?: pulumi.Input<string>;
    hostname?: pulumi.Input<string>;
    imageRotation?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
    ipConflictIgnoreDefault?: pulumi.Input<string>;
    ipv6AcceptDad?: pulumi.Input<number>;
    ipv6AllForwarding?: pulumi.Input<string>;
    kernelCrashlog?: pulumi.Input<string>;
    kernelDevicelog?: pulumi.Input<string>;
    l3HostExpiry?: pulumi.Input<string>;
    language?: pulumi.Input<string>;
    ldapconntimeout?: pulumi.Input<number>;
    n8021xCaCertificate?: pulumi.Input<string>;
    n8021xCertificate?: pulumi.Input<string>;
    postLoginBanner?: pulumi.Input<string>;
    preLoginBanner?: pulumi.Input<string>;
    privateDataEncryption?: pulumi.Input<string>;
    radiusCoaPort?: pulumi.Input<number>;
    radiusPort?: pulumi.Input<number>;
    remoteauthtimeout?: pulumi.Input<number>;
    restartTime?: pulumi.Input<string>;
    revisionBackupOnLogout?: pulumi.Input<string>;
    revisionBackupOnUpgrade?: pulumi.Input<string>;
    strongCrypto?: pulumi.Input<string>;
    switchMgmtMode?: pulumi.Input<string>;
    tcp6MssMin?: pulumi.Input<number>;
    tcpMssMin?: pulumi.Input<number>;
    tcpOptions?: pulumi.Input<string>;
    tftp?: pulumi.Input<string>;
    timezone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SystemGlobal resource.
 */
export interface SystemGlobalArgs {
    adminConcurrent?: pulumi.Input<string>;
    adminHttpsPkiRequired?: pulumi.Input<string>;
    adminHttpsSslVersions?: pulumi.Input<string>;
    adminLockoutDuration?: pulumi.Input<number>;
    adminLockoutThreshold?: pulumi.Input<number>;
    adminPasswordHash?: pulumi.Input<string>;
    adminPort?: pulumi.Input<number>;
    adminScp?: pulumi.Input<string>;
    adminServerCert?: pulumi.Input<string>;
    adminSport?: pulumi.Input<number>;
    adminSshGraceTime?: pulumi.Input<number>;
    adminSshPort?: pulumi.Input<number>;
    adminSshV1?: pulumi.Input<string>;
    adminTelnetPort?: pulumi.Input<number>;
    admintimeout?: pulumi.Input<number>;
    alertInterval?: pulumi.Input<number>;
    alertdRelog?: pulumi.Input<string>;
    allowSubnetOverlap?: pulumi.Input<string>;
    arpTimeout?: pulumi.Input<number>;
    assetTag?: pulumi.Input<string>;
    autoIsl?: pulumi.Input<string>;
    cfgRevertTimeout?: pulumi.Input<number>;
    cfgSave?: pulumi.Input<string>;
    cltCertReq?: pulumi.Input<string>;
    csrCaAttribute?: pulumi.Input<string>;
    dailyRestart?: pulumi.Input<string>;
    delaycliTimeoutCleanup?: pulumi.Input<number>;
    detectIpConflict?: pulumi.Input<string>;
    dhParams?: pulumi.Input<number>;
    dhcpCircuitId?: pulumi.Input<string>;
    dhcpClientLocation?: pulumi.Input<string>;
    dhcpOptionFormat?: pulumi.Input<string>;
    dhcpRemoteId?: pulumi.Input<string>;
    dhcpServerAccessList?: pulumi.Input<string>;
    dhcpSnoopClientReq?: pulumi.Input<string>;
    dhcpsDbExp?: pulumi.Input<number>;
    dhcpsDbPerPortLearnLimit?: pulumi.Input<number>;
    dst?: pulumi.Input<string>;
    failtime?: pulumi.Input<number>;
    fortilinkAutoDiscovery?: pulumi.Input<string>;
    hostname?: pulumi.Input<string>;
    imageRotation?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
    ipConflictIgnoreDefault?: pulumi.Input<string>;
    ipv6AcceptDad?: pulumi.Input<number>;
    ipv6AllForwarding?: pulumi.Input<string>;
    kernelCrashlog?: pulumi.Input<string>;
    kernelDevicelog?: pulumi.Input<string>;
    l3HostExpiry?: pulumi.Input<string>;
    language?: pulumi.Input<string>;
    ldapconntimeout?: pulumi.Input<number>;
    n8021xCaCertificate?: pulumi.Input<string>;
    n8021xCertificate?: pulumi.Input<string>;
    postLoginBanner?: pulumi.Input<string>;
    preLoginBanner?: pulumi.Input<string>;
    privateDataEncryption?: pulumi.Input<string>;
    radiusCoaPort?: pulumi.Input<number>;
    radiusPort?: pulumi.Input<number>;
    remoteauthtimeout?: pulumi.Input<number>;
    restartTime?: pulumi.Input<string>;
    revisionBackupOnLogout?: pulumi.Input<string>;
    revisionBackupOnUpgrade?: pulumi.Input<string>;
    strongCrypto?: pulumi.Input<string>;
    switchMgmtMode?: pulumi.Input<string>;
    tcp6MssMin?: pulumi.Input<number>;
    tcpMssMin?: pulumi.Input<number>;
    tcpOptions?: pulumi.Input<string>;
    tftp?: pulumi.Input<string>;
    timezone?: pulumi.Input<string>;
}
