// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface ApplicationContainerDeployment {
    environment?: {[key: string]: string};
    instances?: number;
    javaSystemProperties?: {[key: string]: string};
    memory?: string;
    notes?: string;
    secureEnvironments?: string[];
    services?: outputs.ApplicationContainerDeploymentService[];
}

export interface ApplicationContainerDeploymentService {
    identifier: string;
    name: string;
    password: string;
    type: string;
    username: string;
}

export interface ApplicationContainerManifest {
    clustered?: boolean;
    command?: string;
    healthCheckEndpoint?: string;
    home?: string;
    mode?: string;
    notes?: string;
    release?: outputs.ApplicationContainerManifestRelease;
    runtime?: outputs.ApplicationContainerManifestRuntime;
    shutdownTime?: number;
    startupTime?: number;
    type?: string;
}

export interface ApplicationContainerManifestRelease {
    build?: string;
    commit?: string;
    version?: string;
}

export interface ApplicationContainerManifestRuntime {
    majorVersion: string;
}

export interface ApplicationContainerTimeouts {
    create?: string;
    delete?: string;
}

export interface DatabaseAccessRuleTimeouts {
    create?: string;
    delete?: string;
}

export interface DatabaseServiceInstanceBackups {
    cloudStorageContainer: string;
    cloudStoragePassword: string;
    cloudStorageUsername: string;
    createIfMissing?: boolean;
}

export interface DatabaseServiceInstanceDatabaseConfiguration {
    adminPassword: string;
    backupDestination?: string;
    backupStorageVolumeSize?: number;
    characterSet: string;
    dataStorageVolumeSize?: number;
    dbDemo?: string;
    disasterRecovery?: boolean;
    failoverDatabase?: boolean;
    goldenGate?: boolean;
    isRac?: boolean;
    nationalCharacterSet: string;
    pdbName: string;
    sid?: string;
    snapshotName?: string;
    sourceServiceName?: string;
    timezone?: string;
    type?: string;
    usableStorage: number;
}

export interface DatabaseServiceInstanceDefaultAccessRules {
    enableDbConsole: boolean;
    enableDbExpress: boolean;
    enableDbListener: boolean;
    enableEmConsole: boolean;
    enableHttp: boolean;
    enableHttpSsl: boolean;
    enableRacDbListener: boolean;
    enableRacOns: boolean;
    enableScanListener: boolean;
    enableSsh: boolean;
}

export interface DatabaseServiceInstanceHybridDisasterRecovery {
    cloudStorageContainer: string;
    cloudStoragePassword?: string;
    cloudStorageUsername?: string;
}

export interface DatabaseServiceInstanceInstantiateFromBackup {
    cloudStorageContainer: string;
    cloudStoragePassword: string;
    cloudStorageUsername: string;
    databaseId: string;
    decryptionKey?: string;
    onPremise?: boolean;
    serviceId?: string;
    walletFileContent?: string;
}

export interface DatabaseServiceInstanceStandby {
    availabilityDomain: string;
    subnet: string;
}

export interface DatabaseServiceInstanceTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface JavaAccessRuleTimeouts {
    create?: string;
    delete?: string;
}

export interface JavaServiceInstanceBackups {
    autoGenerate?: boolean;
    cloudStorageContainer: string;
    cloudStoragePassword: string;
    cloudStorageUsername: string;
    useOauthForStorage?: boolean;
}

export interface JavaServiceInstanceLoadBalancer {
    adminUrl: string;
    consoleUrl: string;
    loadBalancingPolicy?: string;
    subnets?: string[];
    url: string;
}

export interface JavaServiceInstanceOracleTrafficDirector {
    admin: outputs.JavaServiceInstanceOracleTrafficDirectorAdmin;
    highAvailability?: boolean;
    ipReservations?: string[];
    listener?: outputs.JavaServiceInstanceOracleTrafficDirectorListener;
    loadBalancingPolicy?: string;
    rootUrl: string;
    shape: string;
}

export interface JavaServiceInstanceOracleTrafficDirectorAdmin {
    hostname: string;
    password: string;
    port?: number;
    username: string;
}

export interface JavaServiceInstanceOracleTrafficDirectorListener {
    port?: number;
    privilegedPort: number;
    privilegedSecuredPort: number;
    securedPort: number;
}

export interface JavaServiceInstanceTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface JavaServiceInstanceWeblogicServer {
    admin: outputs.JavaServiceInstanceWeblogicServerAdmin;
    applicationDatabases?: outputs.JavaServiceInstanceWeblogicServerApplicationDatabase[];
    backupVolumeSize?: string;
    clusterName: string;
    clusters?: outputs.JavaServiceInstanceWeblogicServerCluster[];
    connectString?: string;
    database: outputs.JavaServiceInstanceWeblogicServerDatabase;
    domain?: outputs.JavaServiceInstanceWeblogicServerDomain;
    ipReservations?: string[];
    managedServers?: outputs.JavaServiceInstanceWeblogicServerManagedServers;
    middlewareVolumeSize: string;
    nodeManager?: outputs.JavaServiceInstanceWeblogicServerNodeManager;
    ports?: outputs.JavaServiceInstanceWeblogicServerPorts;
    rootUrl: string;
    shape: string;
    upperStackProductName?: string;
}

export interface JavaServiceInstanceWeblogicServerAdmin {
    hostname: string;
    password: string;
    port?: number;
    securedPort?: number;
    username: string;
}

export interface JavaServiceInstanceWeblogicServerApplicationDatabase {
    name: string;
    password: string;
    pdbName: string;
    username: string;
}

export interface JavaServiceInstanceWeblogicServerCluster {
    name: string;
    pathPrefixes?: string[];
    serverCount?: number;
    serversPerNode?: number;
    shape: string;
    type: string;
}

export interface JavaServiceInstanceWeblogicServerDatabase {
    hostname: string;
    name?: string;
    password: string;
    pdbName?: string;
    username: string;
}

export interface JavaServiceInstanceWeblogicServerDomain {
    mode?: string;
    name: string;
    partitionCount?: number;
    volumeSize?: string;
}

export interface JavaServiceInstanceWeblogicServerManagedServers {
    initialHeapSize?: number;
    initialPermanentGeneration?: number;
    jvmArgs?: string;
    maxHeapSize?: number;
    maxPermanentGeneration?: number;
    overwriteJvmArgs?: boolean;
    serverCount?: number;
}

export interface JavaServiceInstanceWeblogicServerNodeManager {
    password: string;
    port?: number;
    username: string;
}

export interface JavaServiceInstanceWeblogicServerPorts {
    contentPort?: number;
    deploymentChannelPort?: number;
    privilegedContentPort?: number;
    privilegedSecuredContentPort?: number;
}

export interface MysqlAccessRuleTimeouts {
    create?: string;
    delete?: string;
}

export interface MysqlServiceInstanceBackups {
    cloudStorageContainer: string;
    cloudStoragePassword: string;
    cloudStorageUsername: string;
    createIfMissing?: boolean;
}

export interface MysqlServiceInstanceMysqlConfiguration {
    connectString: string;
    dbName?: string;
    dbStorage?: number;
    enterpriseMonitorConfiguration?: outputs.MysqlServiceInstanceMysqlConfigurationEnterpriseMonitorConfiguration;
    ipAddress: string;
    mysqlCharset: string;
    mysqlCollation: string;
    mysqlPassword?: string;
    mysqlPort?: number;
    mysqlUsername?: string;
    publicIpAddress: string;
    snapshotName?: string;
    sourceServiceName?: string;
}

export interface MysqlServiceInstanceMysqlConfigurationEnterpriseMonitorConfiguration {
    emAgentPassword?: string;
    emAgentUsername?: string;
    emPassword?: string;
    emPort: number;
    emUsername?: string;
}

export interface MysqlServiceInstanceTimeouts {
    create?: string;
    delete?: string;
}

