// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DatabaseServiceInstance extends pulumi.CustomResource {
    /**
     * Get an existing DatabaseServiceInstance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DatabaseServiceInstanceState, opts?: pulumi.CustomResourceOptions): DatabaseServiceInstance {
        return new DatabaseServiceInstance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oraclepaas:index/databaseServiceInstance:DatabaseServiceInstance';

    /**
     * Returns true if the given object is an instance of DatabaseServiceInstance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DatabaseServiceInstance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DatabaseServiceInstance.__pulumiType;
    }

    public readonly availabilityDomain!: pulumi.Output<string | undefined>;
    public readonly backups!: pulumi.Output<outputs.DatabaseServiceInstanceBackups | undefined>;
    public readonly bringYourOwnLicense!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly cloudStorageContainer!: pulumi.Output<string>;
    public /*out*/ readonly computeSiteName!: pulumi.Output<string>;
    public readonly databaseConfiguration!: pulumi.Output<outputs.DatabaseServiceInstanceDatabaseConfiguration>;
    public /*out*/ readonly dbaasMonitorUrl!: pulumi.Output<string>;
    public readonly defaultAccessRules!: pulumi.Output<outputs.DatabaseServiceInstanceDefaultAccessRules | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly desiredState!: pulumi.Output<string | undefined>;
    public readonly edition!: pulumi.Output<string>;
    public /*out*/ readonly emUrl!: pulumi.Output<string>;
    public /*out*/ readonly glassfishUrl!: pulumi.Output<string>;
    public readonly highPerformanceStorage!: pulumi.Output<boolean | undefined>;
    public readonly hybridDisasterRecovery!: pulumi.Output<outputs.DatabaseServiceInstanceHybridDisasterRecovery | undefined>;
    public /*out*/ readonly identityDomain!: pulumi.Output<string>;
    public readonly instantiateFromBackup!: pulumi.Output<outputs.DatabaseServiceInstanceInstantiateFromBackup | undefined>;
    public readonly ipNetwork!: pulumi.Output<string | undefined>;
    public readonly ipReservations!: pulumi.Output<string[] | undefined>;
    public readonly level!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly notificationEmail!: pulumi.Output<string | undefined>;
    public readonly region!: pulumi.Output<string>;
    public readonly shape!: pulumi.Output<string>;
    public readonly sshPublicKey!: pulumi.Output<string>;
    public readonly standby!: pulumi.Output<outputs.DatabaseServiceInstanceStandby | undefined>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly subnet!: pulumi.Output<string | undefined>;
    public readonly subscriptionType!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.DatabaseServiceInstanceTimeouts | undefined>;
    public /*out*/ readonly uri!: pulumi.Output<string>;
    public readonly version!: pulumi.Output<string>;

    /**
     * Create a DatabaseServiceInstance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatabaseServiceInstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DatabaseServiceInstanceArgs | DatabaseServiceInstanceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DatabaseServiceInstanceState | undefined;
            resourceInputs["availabilityDomain"] = state ? state.availabilityDomain : undefined;
            resourceInputs["backups"] = state ? state.backups : undefined;
            resourceInputs["bringYourOwnLicense"] = state ? state.bringYourOwnLicense : undefined;
            resourceInputs["cloudStorageContainer"] = state ? state.cloudStorageContainer : undefined;
            resourceInputs["computeSiteName"] = state ? state.computeSiteName : undefined;
            resourceInputs["databaseConfiguration"] = state ? state.databaseConfiguration : undefined;
            resourceInputs["dbaasMonitorUrl"] = state ? state.dbaasMonitorUrl : undefined;
            resourceInputs["defaultAccessRules"] = state ? state.defaultAccessRules : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["desiredState"] = state ? state.desiredState : undefined;
            resourceInputs["edition"] = state ? state.edition : undefined;
            resourceInputs["emUrl"] = state ? state.emUrl : undefined;
            resourceInputs["glassfishUrl"] = state ? state.glassfishUrl : undefined;
            resourceInputs["highPerformanceStorage"] = state ? state.highPerformanceStorage : undefined;
            resourceInputs["hybridDisasterRecovery"] = state ? state.hybridDisasterRecovery : undefined;
            resourceInputs["identityDomain"] = state ? state.identityDomain : undefined;
            resourceInputs["instantiateFromBackup"] = state ? state.instantiateFromBackup : undefined;
            resourceInputs["ipNetwork"] = state ? state.ipNetwork : undefined;
            resourceInputs["ipReservations"] = state ? state.ipReservations : undefined;
            resourceInputs["level"] = state ? state.level : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notificationEmail"] = state ? state.notificationEmail : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["shape"] = state ? state.shape : undefined;
            resourceInputs["sshPublicKey"] = state ? state.sshPublicKey : undefined;
            resourceInputs["standby"] = state ? state.standby : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["subnet"] = state ? state.subnet : undefined;
            resourceInputs["subscriptionType"] = state ? state.subscriptionType : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["uri"] = state ? state.uri : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as DatabaseServiceInstanceArgs | undefined;
            if ((!args || args.databaseConfiguration === undefined) && !opts.urn) {
                throw new Error("Missing required property 'databaseConfiguration'");
            }
            if ((!args || args.edition === undefined) && !opts.urn) {
                throw new Error("Missing required property 'edition'");
            }
            if ((!args || args.shape === undefined) && !opts.urn) {
                throw new Error("Missing required property 'shape'");
            }
            if ((!args || args.sshPublicKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sshPublicKey'");
            }
            if ((!args || args.subscriptionType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subscriptionType'");
            }
            if ((!args || args.version === undefined) && !opts.urn) {
                throw new Error("Missing required property 'version'");
            }
            resourceInputs["availabilityDomain"] = args ? args.availabilityDomain : undefined;
            resourceInputs["backups"] = args ? args.backups : undefined;
            resourceInputs["bringYourOwnLicense"] = args ? args.bringYourOwnLicense : undefined;
            resourceInputs["databaseConfiguration"] = args ? args.databaseConfiguration : undefined;
            resourceInputs["defaultAccessRules"] = args ? args.defaultAccessRules : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["desiredState"] = args ? args.desiredState : undefined;
            resourceInputs["edition"] = args ? args.edition : undefined;
            resourceInputs["highPerformanceStorage"] = args ? args.highPerformanceStorage : undefined;
            resourceInputs["hybridDisasterRecovery"] = args ? args.hybridDisasterRecovery : undefined;
            resourceInputs["instantiateFromBackup"] = args ? args.instantiateFromBackup : undefined;
            resourceInputs["ipNetwork"] = args ? args.ipNetwork : undefined;
            resourceInputs["ipReservations"] = args ? args.ipReservations : undefined;
            resourceInputs["level"] = args ? args.level : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["notificationEmail"] = args ? args.notificationEmail : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["shape"] = args ? args.shape : undefined;
            resourceInputs["sshPublicKey"] = args ? args.sshPublicKey : undefined;
            resourceInputs["standby"] = args ? args.standby : undefined;
            resourceInputs["subnet"] = args ? args.subnet : undefined;
            resourceInputs["subscriptionType"] = args ? args.subscriptionType : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
            resourceInputs["cloudStorageContainer"] = undefined /*out*/;
            resourceInputs["computeSiteName"] = undefined /*out*/;
            resourceInputs["dbaasMonitorUrl"] = undefined /*out*/;
            resourceInputs["emUrl"] = undefined /*out*/;
            resourceInputs["glassfishUrl"] = undefined /*out*/;
            resourceInputs["identityDomain"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["uri"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DatabaseServiceInstance.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DatabaseServiceInstance resources.
 */
export interface DatabaseServiceInstanceState {
    availabilityDomain?: pulumi.Input<string>;
    backups?: pulumi.Input<inputs.DatabaseServiceInstanceBackups>;
    bringYourOwnLicense?: pulumi.Input<boolean>;
    cloudStorageContainer?: pulumi.Input<string>;
    computeSiteName?: pulumi.Input<string>;
    databaseConfiguration?: pulumi.Input<inputs.DatabaseServiceInstanceDatabaseConfiguration>;
    dbaasMonitorUrl?: pulumi.Input<string>;
    defaultAccessRules?: pulumi.Input<inputs.DatabaseServiceInstanceDefaultAccessRules>;
    description?: pulumi.Input<string>;
    desiredState?: pulumi.Input<string>;
    edition?: pulumi.Input<string>;
    emUrl?: pulumi.Input<string>;
    glassfishUrl?: pulumi.Input<string>;
    highPerformanceStorage?: pulumi.Input<boolean>;
    hybridDisasterRecovery?: pulumi.Input<inputs.DatabaseServiceInstanceHybridDisasterRecovery>;
    identityDomain?: pulumi.Input<string>;
    instantiateFromBackup?: pulumi.Input<inputs.DatabaseServiceInstanceInstantiateFromBackup>;
    ipNetwork?: pulumi.Input<string>;
    ipReservations?: pulumi.Input<pulumi.Input<string>[]>;
    level?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    notificationEmail?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    shape?: pulumi.Input<string>;
    sshPublicKey?: pulumi.Input<string>;
    standby?: pulumi.Input<inputs.DatabaseServiceInstanceStandby>;
    status?: pulumi.Input<string>;
    subnet?: pulumi.Input<string>;
    subscriptionType?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.DatabaseServiceInstanceTimeouts>;
    uri?: pulumi.Input<string>;
    version?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DatabaseServiceInstance resource.
 */
export interface DatabaseServiceInstanceArgs {
    availabilityDomain?: pulumi.Input<string>;
    backups?: pulumi.Input<inputs.DatabaseServiceInstanceBackups>;
    bringYourOwnLicense?: pulumi.Input<boolean>;
    databaseConfiguration: pulumi.Input<inputs.DatabaseServiceInstanceDatabaseConfiguration>;
    defaultAccessRules?: pulumi.Input<inputs.DatabaseServiceInstanceDefaultAccessRules>;
    description?: pulumi.Input<string>;
    desiredState?: pulumi.Input<string>;
    edition: pulumi.Input<string>;
    highPerformanceStorage?: pulumi.Input<boolean>;
    hybridDisasterRecovery?: pulumi.Input<inputs.DatabaseServiceInstanceHybridDisasterRecovery>;
    instantiateFromBackup?: pulumi.Input<inputs.DatabaseServiceInstanceInstantiateFromBackup>;
    ipNetwork?: pulumi.Input<string>;
    ipReservations?: pulumi.Input<pulumi.Input<string>[]>;
    level?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    notificationEmail?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    shape: pulumi.Input<string>;
    sshPublicKey: pulumi.Input<string>;
    standby?: pulumi.Input<inputs.DatabaseServiceInstanceStandby>;
    subnet?: pulumi.Input<string>;
    subscriptionType: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.DatabaseServiceInstanceTimeouts>;
    version: pulumi.Input<string>;
}
