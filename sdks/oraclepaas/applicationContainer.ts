// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ApplicationContainer extends pulumi.CustomResource {
    /**
     * Get an existing ApplicationContainer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ApplicationContainerState, opts?: pulumi.CustomResourceOptions): ApplicationContainer {
        return new ApplicationContainer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oraclepaas:index/applicationContainer:ApplicationContainer';

    /**
     * Returns true if the given object is an instance of ApplicationContainer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ApplicationContainer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ApplicationContainer.__pulumiType;
    }

    public /*out*/ readonly appUrl!: pulumi.Output<string>;
    public readonly archiveUrl!: pulumi.Output<string | undefined>;
    public readonly authType!: pulumi.Output<string | undefined>;
    public readonly availabilityDomains!: pulumi.Output<string[] | undefined>;
    public readonly deployment!: pulumi.Output<outputs.ApplicationContainerDeployment | undefined>;
    public readonly deploymentFile!: pulumi.Output<string | undefined>;
    public readonly gitPassword!: pulumi.Output<string | undefined>;
    public readonly gitRepository!: pulumi.Output<string | undefined>;
    public readonly gitUsername!: pulumi.Output<string | undefined>;
    public readonly loadBalancerSubnets!: pulumi.Output<string[] | undefined>;
    public readonly manifest!: pulumi.Output<outputs.ApplicationContainerManifest | undefined>;
    public readonly manifestFile!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly notes!: pulumi.Output<string | undefined>;
    public readonly notificationEmail!: pulumi.Output<string | undefined>;
    public readonly region!: pulumi.Output<string | undefined>;
    public readonly runtime!: pulumi.Output<string | undefined>;
    public readonly subscriptionType!: pulumi.Output<string | undefined>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.ApplicationContainerTimeouts | undefined>;
    public /*out*/ readonly webUrl!: pulumi.Output<string>;

    /**
     * Create a ApplicationContainer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ApplicationContainerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ApplicationContainerArgs | ApplicationContainerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ApplicationContainerState | undefined;
            resourceInputs["appUrl"] = state ? state.appUrl : undefined;
            resourceInputs["archiveUrl"] = state ? state.archiveUrl : undefined;
            resourceInputs["authType"] = state ? state.authType : undefined;
            resourceInputs["availabilityDomains"] = state ? state.availabilityDomains : undefined;
            resourceInputs["deployment"] = state ? state.deployment : undefined;
            resourceInputs["deploymentFile"] = state ? state.deploymentFile : undefined;
            resourceInputs["gitPassword"] = state ? state.gitPassword : undefined;
            resourceInputs["gitRepository"] = state ? state.gitRepository : undefined;
            resourceInputs["gitUsername"] = state ? state.gitUsername : undefined;
            resourceInputs["loadBalancerSubnets"] = state ? state.loadBalancerSubnets : undefined;
            resourceInputs["manifest"] = state ? state.manifest : undefined;
            resourceInputs["manifestFile"] = state ? state.manifestFile : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notes"] = state ? state.notes : undefined;
            resourceInputs["notificationEmail"] = state ? state.notificationEmail : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["runtime"] = state ? state.runtime : undefined;
            resourceInputs["subscriptionType"] = state ? state.subscriptionType : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["webUrl"] = state ? state.webUrl : undefined;
        } else {
            const args = argsOrState as ApplicationContainerArgs | undefined;
            resourceInputs["archiveUrl"] = args ? args.archiveUrl : undefined;
            resourceInputs["authType"] = args ? args.authType : undefined;
            resourceInputs["availabilityDomains"] = args ? args.availabilityDomains : undefined;
            resourceInputs["deployment"] = args ? args.deployment : undefined;
            resourceInputs["deploymentFile"] = args ? args.deploymentFile : undefined;
            resourceInputs["gitPassword"] = args?.gitPassword ? pulumi.secret(args.gitPassword) : undefined;
            resourceInputs["gitRepository"] = args ? args.gitRepository : undefined;
            resourceInputs["gitUsername"] = args ? args.gitUsername : undefined;
            resourceInputs["loadBalancerSubnets"] = args ? args.loadBalancerSubnets : undefined;
            resourceInputs["manifest"] = args ? args.manifest : undefined;
            resourceInputs["manifestFile"] = args ? args.manifestFile : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["notes"] = args ? args.notes : undefined;
            resourceInputs["notificationEmail"] = args ? args.notificationEmail : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["runtime"] = args ? args.runtime : undefined;
            resourceInputs["subscriptionType"] = args ? args.subscriptionType : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["appUrl"] = undefined /*out*/;
            resourceInputs["webUrl"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["gitPassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ApplicationContainer.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ApplicationContainer resources.
 */
export interface ApplicationContainerState {
    appUrl?: pulumi.Input<string>;
    archiveUrl?: pulumi.Input<string>;
    authType?: pulumi.Input<string>;
    availabilityDomains?: pulumi.Input<pulumi.Input<string>[]>;
    deployment?: pulumi.Input<inputs.ApplicationContainerDeployment>;
    deploymentFile?: pulumi.Input<string>;
    gitPassword?: pulumi.Input<string>;
    gitRepository?: pulumi.Input<string>;
    gitUsername?: pulumi.Input<string>;
    loadBalancerSubnets?: pulumi.Input<pulumi.Input<string>[]>;
    manifest?: pulumi.Input<inputs.ApplicationContainerManifest>;
    manifestFile?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    notes?: pulumi.Input<string>;
    notificationEmail?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    runtime?: pulumi.Input<string>;
    subscriptionType?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.ApplicationContainerTimeouts>;
    webUrl?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ApplicationContainer resource.
 */
export interface ApplicationContainerArgs {
    archiveUrl?: pulumi.Input<string>;
    authType?: pulumi.Input<string>;
    availabilityDomains?: pulumi.Input<pulumi.Input<string>[]>;
    deployment?: pulumi.Input<inputs.ApplicationContainerDeployment>;
    deploymentFile?: pulumi.Input<string>;
    gitPassword?: pulumi.Input<string>;
    gitRepository?: pulumi.Input<string>;
    gitUsername?: pulumi.Input<string>;
    loadBalancerSubnets?: pulumi.Input<pulumi.Input<string>[]>;
    manifest?: pulumi.Input<inputs.ApplicationContainerManifest>;
    manifestFile?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    notes?: pulumi.Input<string>;
    notificationEmail?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    runtime?: pulumi.Input<string>;
    subscriptionType?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.ApplicationContainerTimeouts>;
}
