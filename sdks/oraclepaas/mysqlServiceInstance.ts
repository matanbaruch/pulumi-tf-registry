// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class MysqlServiceInstance extends pulumi.CustomResource {
    /**
     * Get an existing MysqlServiceInstance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MysqlServiceInstanceState, opts?: pulumi.CustomResourceOptions): MysqlServiceInstance {
        return new MysqlServiceInstance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oraclepaas:index/mysqlServiceInstance:MysqlServiceInstance';

    /**
     * Returns true if the given object is an instance of MysqlServiceInstance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MysqlServiceInstance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MysqlServiceInstance.__pulumiType;
    }

    public readonly availabilityDomain!: pulumi.Output<string | undefined>;
    public readonly backupDestination!: pulumi.Output<string | undefined>;
    public readonly backups!: pulumi.Output<outputs.MysqlServiceInstanceBackups | undefined>;
    public /*out*/ readonly baseReleaseVersion!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string | undefined>;
    public /*out*/ readonly emUrl!: pulumi.Output<string>;
    public readonly ipNetwork!: pulumi.Output<string | undefined>;
    public readonly meteringFrequency!: pulumi.Output<string | undefined>;
    public readonly mysqlConfiguration!: pulumi.Output<outputs.MysqlServiceInstanceMysqlConfiguration>;
    public readonly name!: pulumi.Output<string>;
    public readonly notificationEmail!: pulumi.Output<string | undefined>;
    public readonly region!: pulumi.Output<string>;
    public /*out*/ readonly releaseVersion!: pulumi.Output<string>;
    public /*out*/ readonly serviceVersion!: pulumi.Output<string>;
    public readonly shape!: pulumi.Output<string>;
    public readonly sshPublicKey!: pulumi.Output<string>;
    public readonly subnet!: pulumi.Output<string | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.MysqlServiceInstanceTimeouts | undefined>;
    public readonly vmUser!: pulumi.Output<string | undefined>;

    /**
     * Create a MysqlServiceInstance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MysqlServiceInstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MysqlServiceInstanceArgs | MysqlServiceInstanceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MysqlServiceInstanceState | undefined;
            resourceInputs["availabilityDomain"] = state ? state.availabilityDomain : undefined;
            resourceInputs["backupDestination"] = state ? state.backupDestination : undefined;
            resourceInputs["backups"] = state ? state.backups : undefined;
            resourceInputs["baseReleaseVersion"] = state ? state.baseReleaseVersion : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["emUrl"] = state ? state.emUrl : undefined;
            resourceInputs["ipNetwork"] = state ? state.ipNetwork : undefined;
            resourceInputs["meteringFrequency"] = state ? state.meteringFrequency : undefined;
            resourceInputs["mysqlConfiguration"] = state ? state.mysqlConfiguration : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notificationEmail"] = state ? state.notificationEmail : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["releaseVersion"] = state ? state.releaseVersion : undefined;
            resourceInputs["serviceVersion"] = state ? state.serviceVersion : undefined;
            resourceInputs["shape"] = state ? state.shape : undefined;
            resourceInputs["sshPublicKey"] = state ? state.sshPublicKey : undefined;
            resourceInputs["subnet"] = state ? state.subnet : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["vmUser"] = state ? state.vmUser : undefined;
        } else {
            const args = argsOrState as MysqlServiceInstanceArgs | undefined;
            if ((!args || args.mysqlConfiguration === undefined) && !opts.urn) {
                throw new Error("Missing required property 'mysqlConfiguration'");
            }
            if ((!args || args.shape === undefined) && !opts.urn) {
                throw new Error("Missing required property 'shape'");
            }
            if ((!args || args.sshPublicKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sshPublicKey'");
            }
            resourceInputs["availabilityDomain"] = args ? args.availabilityDomain : undefined;
            resourceInputs["backupDestination"] = args ? args.backupDestination : undefined;
            resourceInputs["backups"] = args ? args.backups : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["ipNetwork"] = args ? args.ipNetwork : undefined;
            resourceInputs["meteringFrequency"] = args ? args.meteringFrequency : undefined;
            resourceInputs["mysqlConfiguration"] = args ? args.mysqlConfiguration : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["notificationEmail"] = args ? args.notificationEmail : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["shape"] = args ? args.shape : undefined;
            resourceInputs["sshPublicKey"] = args ? args.sshPublicKey : undefined;
            resourceInputs["subnet"] = args ? args.subnet : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["vmUser"] = args?.vmUser ? pulumi.secret(args.vmUser) : undefined;
            resourceInputs["baseReleaseVersion"] = undefined /*out*/;
            resourceInputs["emUrl"] = undefined /*out*/;
            resourceInputs["releaseVersion"] = undefined /*out*/;
            resourceInputs["serviceVersion"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["vmUser"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(MysqlServiceInstance.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering MysqlServiceInstance resources.
 */
export interface MysqlServiceInstanceState {
    availabilityDomain?: pulumi.Input<string>;
    backupDestination?: pulumi.Input<string>;
    backups?: pulumi.Input<inputs.MysqlServiceInstanceBackups>;
    baseReleaseVersion?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    emUrl?: pulumi.Input<string>;
    ipNetwork?: pulumi.Input<string>;
    meteringFrequency?: pulumi.Input<string>;
    mysqlConfiguration?: pulumi.Input<inputs.MysqlServiceInstanceMysqlConfiguration>;
    name?: pulumi.Input<string>;
    notificationEmail?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    releaseVersion?: pulumi.Input<string>;
    serviceVersion?: pulumi.Input<string>;
    shape?: pulumi.Input<string>;
    sshPublicKey?: pulumi.Input<string>;
    subnet?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.MysqlServiceInstanceTimeouts>;
    vmUser?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a MysqlServiceInstance resource.
 */
export interface MysqlServiceInstanceArgs {
    availabilityDomain?: pulumi.Input<string>;
    backupDestination?: pulumi.Input<string>;
    backups?: pulumi.Input<inputs.MysqlServiceInstanceBackups>;
    description?: pulumi.Input<string>;
    ipNetwork?: pulumi.Input<string>;
    meteringFrequency?: pulumi.Input<string>;
    mysqlConfiguration: pulumi.Input<inputs.MysqlServiceInstanceMysqlConfiguration>;
    name?: pulumi.Input<string>;
    notificationEmail?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    shape: pulumi.Input<string>;
    sshPublicKey: pulumi.Input<string>;
    subnet?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.MysqlServiceInstanceTimeouts>;
    vmUser?: pulumi.Input<string>;
}
