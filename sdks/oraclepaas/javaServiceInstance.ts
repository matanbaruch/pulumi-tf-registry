// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class JavaServiceInstance extends pulumi.CustomResource {
    /**
     * Get an existing JavaServiceInstance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: JavaServiceInstanceState, opts?: pulumi.CustomResourceOptions): JavaServiceInstance {
        return new JavaServiceInstance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oraclepaas:index/javaServiceInstance:JavaServiceInstance';

    /**
     * Returns true if the given object is an instance of JavaServiceInstance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is JavaServiceInstance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === JavaServiceInstance.__pulumiType;
    }

    public readonly assignPublicIp!: pulumi.Output<boolean | undefined>;
    public readonly availabilityDomain!: pulumi.Output<string | undefined>;
    public readonly backupDestination!: pulumi.Output<string | undefined>;
    public readonly backups!: pulumi.Output<outputs.JavaServiceInstanceBackups>;
    public readonly bringYourOwnLicense!: pulumi.Output<boolean | undefined>;
    public readonly description!: pulumi.Output<string>;
    public readonly desiredState!: pulumi.Output<string | undefined>;
    public readonly edition!: pulumi.Output<string>;
    public readonly enableAdminConsole!: pulumi.Output<boolean | undefined>;
    public readonly forceDelete!: pulumi.Output<boolean | undefined>;
    public readonly ipNetwork!: pulumi.Output<string | undefined>;
    public readonly level!: pulumi.Output<string | undefined>;
    public readonly loadBalancer!: pulumi.Output<outputs.JavaServiceInstanceLoadBalancer | undefined>;
    public readonly meteringFrequency!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly notificationEmail!: pulumi.Output<string | undefined>;
    public readonly oracleTrafficDirector!: pulumi.Output<outputs.JavaServiceInstanceOracleTrafficDirector | undefined>;
    public readonly region!: pulumi.Output<string>;
    public readonly serviceVersion!: pulumi.Output<string | undefined>;
    public readonly snapshotName!: pulumi.Output<string | undefined>;
    public readonly sourceServiceName!: pulumi.Output<string | undefined>;
    public readonly sshPublicKey!: pulumi.Output<string>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly subnet!: pulumi.Output<string | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.JavaServiceInstanceTimeouts | undefined>;
    public readonly useIdentityService!: pulumi.Output<boolean | undefined>;
    public readonly weblogicServer!: pulumi.Output<outputs.JavaServiceInstanceWeblogicServer>;

    /**
     * Create a JavaServiceInstance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: JavaServiceInstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: JavaServiceInstanceArgs | JavaServiceInstanceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as JavaServiceInstanceState | undefined;
            resourceInputs["assignPublicIp"] = state ? state.assignPublicIp : undefined;
            resourceInputs["availabilityDomain"] = state ? state.availabilityDomain : undefined;
            resourceInputs["backupDestination"] = state ? state.backupDestination : undefined;
            resourceInputs["backups"] = state ? state.backups : undefined;
            resourceInputs["bringYourOwnLicense"] = state ? state.bringYourOwnLicense : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["desiredState"] = state ? state.desiredState : undefined;
            resourceInputs["edition"] = state ? state.edition : undefined;
            resourceInputs["enableAdminConsole"] = state ? state.enableAdminConsole : undefined;
            resourceInputs["forceDelete"] = state ? state.forceDelete : undefined;
            resourceInputs["ipNetwork"] = state ? state.ipNetwork : undefined;
            resourceInputs["level"] = state ? state.level : undefined;
            resourceInputs["loadBalancer"] = state ? state.loadBalancer : undefined;
            resourceInputs["meteringFrequency"] = state ? state.meteringFrequency : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notificationEmail"] = state ? state.notificationEmail : undefined;
            resourceInputs["oracleTrafficDirector"] = state ? state.oracleTrafficDirector : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["serviceVersion"] = state ? state.serviceVersion : undefined;
            resourceInputs["snapshotName"] = state ? state.snapshotName : undefined;
            resourceInputs["sourceServiceName"] = state ? state.sourceServiceName : undefined;
            resourceInputs["sshPublicKey"] = state ? state.sshPublicKey : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["subnet"] = state ? state.subnet : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["useIdentityService"] = state ? state.useIdentityService : undefined;
            resourceInputs["weblogicServer"] = state ? state.weblogicServer : undefined;
        } else {
            const args = argsOrState as JavaServiceInstanceArgs | undefined;
            if ((!args || args.backups === undefined) && !opts.urn) {
                throw new Error("Missing required property 'backups'");
            }
            if ((!args || args.edition === undefined) && !opts.urn) {
                throw new Error("Missing required property 'edition'");
            }
            if ((!args || args.sshPublicKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sshPublicKey'");
            }
            if ((!args || args.weblogicServer === undefined) && !opts.urn) {
                throw new Error("Missing required property 'weblogicServer'");
            }
            resourceInputs["assignPublicIp"] = args ? args.assignPublicIp : undefined;
            resourceInputs["availabilityDomain"] = args ? args.availabilityDomain : undefined;
            resourceInputs["backupDestination"] = args ? args.backupDestination : undefined;
            resourceInputs["backups"] = args ? args.backups : undefined;
            resourceInputs["bringYourOwnLicense"] = args ? args.bringYourOwnLicense : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["desiredState"] = args ? args.desiredState : undefined;
            resourceInputs["edition"] = args ? args.edition : undefined;
            resourceInputs["enableAdminConsole"] = args ? args.enableAdminConsole : undefined;
            resourceInputs["forceDelete"] = args ? args.forceDelete : undefined;
            resourceInputs["ipNetwork"] = args ? args.ipNetwork : undefined;
            resourceInputs["level"] = args ? args.level : undefined;
            resourceInputs["loadBalancer"] = args ? args.loadBalancer : undefined;
            resourceInputs["meteringFrequency"] = args ? args.meteringFrequency : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["notificationEmail"] = args ? args.notificationEmail : undefined;
            resourceInputs["oracleTrafficDirector"] = args ? args.oracleTrafficDirector : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["serviceVersion"] = args ? args.serviceVersion : undefined;
            resourceInputs["snapshotName"] = args ? args.snapshotName : undefined;
            resourceInputs["sourceServiceName"] = args ? args.sourceServiceName : undefined;
            resourceInputs["sshPublicKey"] = args ? args.sshPublicKey : undefined;
            resourceInputs["subnet"] = args ? args.subnet : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["useIdentityService"] = args ? args.useIdentityService : undefined;
            resourceInputs["weblogicServer"] = args ? args.weblogicServer : undefined;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(JavaServiceInstance.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering JavaServiceInstance resources.
 */
export interface JavaServiceInstanceState {
    assignPublicIp?: pulumi.Input<boolean>;
    availabilityDomain?: pulumi.Input<string>;
    backupDestination?: pulumi.Input<string>;
    backups?: pulumi.Input<inputs.JavaServiceInstanceBackups>;
    bringYourOwnLicense?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    desiredState?: pulumi.Input<string>;
    edition?: pulumi.Input<string>;
    enableAdminConsole?: pulumi.Input<boolean>;
    forceDelete?: pulumi.Input<boolean>;
    ipNetwork?: pulumi.Input<string>;
    level?: pulumi.Input<string>;
    loadBalancer?: pulumi.Input<inputs.JavaServiceInstanceLoadBalancer>;
    meteringFrequency?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    notificationEmail?: pulumi.Input<string>;
    oracleTrafficDirector?: pulumi.Input<inputs.JavaServiceInstanceOracleTrafficDirector>;
    region?: pulumi.Input<string>;
    serviceVersion?: pulumi.Input<string>;
    snapshotName?: pulumi.Input<string>;
    sourceServiceName?: pulumi.Input<string>;
    sshPublicKey?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    subnet?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.JavaServiceInstanceTimeouts>;
    useIdentityService?: pulumi.Input<boolean>;
    weblogicServer?: pulumi.Input<inputs.JavaServiceInstanceWeblogicServer>;
}

/**
 * The set of arguments for constructing a JavaServiceInstance resource.
 */
export interface JavaServiceInstanceArgs {
    assignPublicIp?: pulumi.Input<boolean>;
    availabilityDomain?: pulumi.Input<string>;
    backupDestination?: pulumi.Input<string>;
    backups: pulumi.Input<inputs.JavaServiceInstanceBackups>;
    bringYourOwnLicense?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    desiredState?: pulumi.Input<string>;
    edition: pulumi.Input<string>;
    enableAdminConsole?: pulumi.Input<boolean>;
    forceDelete?: pulumi.Input<boolean>;
    ipNetwork?: pulumi.Input<string>;
    level?: pulumi.Input<string>;
    loadBalancer?: pulumi.Input<inputs.JavaServiceInstanceLoadBalancer>;
    meteringFrequency?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    notificationEmail?: pulumi.Input<string>;
    oracleTrafficDirector?: pulumi.Input<inputs.JavaServiceInstanceOracleTrafficDirector>;
    region?: pulumi.Input<string>;
    serviceVersion?: pulumi.Input<string>;
    snapshotName?: pulumi.Input<string>;
    sourceServiceName?: pulumi.Input<string>;
    sshPublicKey: pulumi.Input<string>;
    subnet?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.JavaServiceInstanceTimeouts>;
    useIdentityService?: pulumi.Input<boolean>;
    weblogicServer: pulumi.Input<inputs.JavaServiceInstanceWeblogicServer>;
}
