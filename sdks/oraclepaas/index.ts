// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { ApplicationContainerArgs, ApplicationContainerState } from "./applicationContainer";
export type ApplicationContainer = import("./applicationContainer").ApplicationContainer;
export const ApplicationContainer: typeof import("./applicationContainer").ApplicationContainer = null as any;
utilities.lazyLoad(exports, ["ApplicationContainer"], () => require("./applicationContainer"));

export { DatabaseAccessRuleArgs, DatabaseAccessRuleState } from "./databaseAccessRule";
export type DatabaseAccessRule = import("./databaseAccessRule").DatabaseAccessRule;
export const DatabaseAccessRule: typeof import("./databaseAccessRule").DatabaseAccessRule = null as any;
utilities.lazyLoad(exports, ["DatabaseAccessRule"], () => require("./databaseAccessRule"));

export { DatabaseServiceInstanceArgs, DatabaseServiceInstanceState } from "./databaseServiceInstance";
export type DatabaseServiceInstance = import("./databaseServiceInstance").DatabaseServiceInstance;
export const DatabaseServiceInstance: typeof import("./databaseServiceInstance").DatabaseServiceInstance = null as any;
utilities.lazyLoad(exports, ["DatabaseServiceInstance"], () => require("./databaseServiceInstance"));

export { GetDatabaseServiceInstanceArgs, GetDatabaseServiceInstanceResult, GetDatabaseServiceInstanceOutputArgs } from "./getDatabaseServiceInstance";
export const getDatabaseServiceInstance: typeof import("./getDatabaseServiceInstance").getDatabaseServiceInstance = null as any;
export const getDatabaseServiceInstanceOutput: typeof import("./getDatabaseServiceInstance").getDatabaseServiceInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseServiceInstance","getDatabaseServiceInstanceOutput"], () => require("./getDatabaseServiceInstance"));

export { JavaAccessRuleArgs, JavaAccessRuleState } from "./javaAccessRule";
export type JavaAccessRule = import("./javaAccessRule").JavaAccessRule;
export const JavaAccessRule: typeof import("./javaAccessRule").JavaAccessRule = null as any;
utilities.lazyLoad(exports, ["JavaAccessRule"], () => require("./javaAccessRule"));

export { JavaServiceInstanceArgs, JavaServiceInstanceState } from "./javaServiceInstance";
export type JavaServiceInstance = import("./javaServiceInstance").JavaServiceInstance;
export const JavaServiceInstance: typeof import("./javaServiceInstance").JavaServiceInstance = null as any;
utilities.lazyLoad(exports, ["JavaServiceInstance"], () => require("./javaServiceInstance"));

export { MysqlAccessRuleArgs, MysqlAccessRuleState } from "./mysqlAccessRule";
export type MysqlAccessRule = import("./mysqlAccessRule").MysqlAccessRule;
export const MysqlAccessRule: typeof import("./mysqlAccessRule").MysqlAccessRule = null as any;
utilities.lazyLoad(exports, ["MysqlAccessRule"], () => require("./mysqlAccessRule"));

export { MysqlServiceInstanceArgs, MysqlServiceInstanceState } from "./mysqlServiceInstance";
export type MysqlServiceInstance = import("./mysqlServiceInstance").MysqlServiceInstance;
export const MysqlServiceInstance: typeof import("./mysqlServiceInstance").MysqlServiceInstance = null as any;
utilities.lazyLoad(exports, ["MysqlServiceInstance"], () => require("./mysqlServiceInstance"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "oraclepaas:index/applicationContainer:ApplicationContainer":
                return new ApplicationContainer(name, <any>undefined, { urn })
            case "oraclepaas:index/databaseAccessRule:DatabaseAccessRule":
                return new DatabaseAccessRule(name, <any>undefined, { urn })
            case "oraclepaas:index/databaseServiceInstance:DatabaseServiceInstance":
                return new DatabaseServiceInstance(name, <any>undefined, { urn })
            case "oraclepaas:index/javaAccessRule:JavaAccessRule":
                return new JavaAccessRule(name, <any>undefined, { urn })
            case "oraclepaas:index/javaServiceInstance:JavaServiceInstance":
                return new JavaServiceInstance(name, <any>undefined, { urn })
            case "oraclepaas:index/mysqlAccessRule:MysqlAccessRule":
                return new MysqlAccessRule(name, <any>undefined, { urn })
            case "oraclepaas:index/mysqlServiceInstance:MysqlServiceInstance":
                return new MysqlServiceInstance(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("oraclepaas", "index/applicationContainer", _module)
pulumi.runtime.registerResourceModule("oraclepaas", "index/databaseAccessRule", _module)
pulumi.runtime.registerResourceModule("oraclepaas", "index/databaseServiceInstance", _module)
pulumi.runtime.registerResourceModule("oraclepaas", "index/javaAccessRule", _module)
pulumi.runtime.registerResourceModule("oraclepaas", "index/javaServiceInstance", _module)
pulumi.runtime.registerResourceModule("oraclepaas", "index/mysqlAccessRule", _module)
pulumi.runtime.registerResourceModule("oraclepaas", "index/mysqlServiceInstance", _module)
pulumi.runtime.registerResourcePackage("oraclepaas", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:oraclepaas") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
