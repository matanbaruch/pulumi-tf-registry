// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ApiOidcConfig extends pulumi.CustomResource {
    /**
     * Get an existing ApiOidcConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ApiOidcConfigState, opts?: pulumi.CustomResourceOptions): ApiOidcConfig {
        return new ApiOidcConfig(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cockroach:index/apiOidcConfig:ApiOidcConfig';

    /**
     * Returns true if the given object is an instance of ApiOidcConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ApiOidcConfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ApiOidcConfig.__pulumiType;
    }

    /**
     * The audience that CC API should accept for this API OIDC Configuration.
     */
    public readonly audience!: pulumi.Output<string>;
    /**
     * The JWT claim that should be used as the user identifier. Defaults to the subject.
     */
    public readonly claim!: pulumi.Output<string>;
    /**
     * The mapping rules to convert token user identifiers into a new form.
     */
    public readonly identityMaps!: pulumi.Output<outputs.ApiOidcConfigIdentityMap[]>;
    /**
     * The issuer of tokens for the API OIDC Configuration. Usually this is a url.
     */
    public readonly issuer!: pulumi.Output<string>;
    /**
     * The JSON Web Key Set used to check the signature of the JWTs.
     */
    public readonly jwks!: pulumi.Output<string>;

    /**
     * Create a ApiOidcConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ApiOidcConfigArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ApiOidcConfigArgs | ApiOidcConfigState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ApiOidcConfigState | undefined;
            resourceInputs["audience"] = state ? state.audience : undefined;
            resourceInputs["claim"] = state ? state.claim : undefined;
            resourceInputs["identityMaps"] = state ? state.identityMaps : undefined;
            resourceInputs["issuer"] = state ? state.issuer : undefined;
            resourceInputs["jwks"] = state ? state.jwks : undefined;
        } else {
            const args = argsOrState as ApiOidcConfigArgs | undefined;
            if ((!args || args.audience === undefined) && !opts.urn) {
                throw new Error("Missing required property 'audience'");
            }
            if ((!args || args.issuer === undefined) && !opts.urn) {
                throw new Error("Missing required property 'issuer'");
            }
            if ((!args || args.jwks === undefined) && !opts.urn) {
                throw new Error("Missing required property 'jwks'");
            }
            resourceInputs["audience"] = args ? args.audience : undefined;
            resourceInputs["claim"] = args ? args.claim : undefined;
            resourceInputs["identityMaps"] = args ? args.identityMaps : undefined;
            resourceInputs["issuer"] = args ? args.issuer : undefined;
            resourceInputs["jwks"] = args ? args.jwks : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ApiOidcConfig.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ApiOidcConfig resources.
 */
export interface ApiOidcConfigState {
    /**
     * The audience that CC API should accept for this API OIDC Configuration.
     */
    audience?: pulumi.Input<string>;
    /**
     * The JWT claim that should be used as the user identifier. Defaults to the subject.
     */
    claim?: pulumi.Input<string>;
    /**
     * The mapping rules to convert token user identifiers into a new form.
     */
    identityMaps?: pulumi.Input<pulumi.Input<inputs.ApiOidcConfigIdentityMap>[]>;
    /**
     * The issuer of tokens for the API OIDC Configuration. Usually this is a url.
     */
    issuer?: pulumi.Input<string>;
    /**
     * The JSON Web Key Set used to check the signature of the JWTs.
     */
    jwks?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ApiOidcConfig resource.
 */
export interface ApiOidcConfigArgs {
    /**
     * The audience that CC API should accept for this API OIDC Configuration.
     */
    audience: pulumi.Input<string>;
    /**
     * The JWT claim that should be used as the user identifier. Defaults to the subject.
     */
    claim?: pulumi.Input<string>;
    /**
     * The mapping rules to convert token user identifiers into a new form.
     */
    identityMaps?: pulumi.Input<pulumi.Input<inputs.ApiOidcConfigIdentityMap>[]>;
    /**
     * The issuer of tokens for the API OIDC Configuration. Usually this is a url.
     */
    issuer: pulumi.Input<string>;
    /**
     * The JSON Web Key Set used to check the signature of the JWTs.
     */
    jwks: pulumi.Input<string>;
}
