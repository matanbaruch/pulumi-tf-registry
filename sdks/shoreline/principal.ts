// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Principal extends pulumi.CustomResource {
    /**
     * Get an existing Principal resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PrincipalState, opts?: pulumi.CustomResourceOptions): Principal {
        return new Principal(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'shoreline:index/principal:Principal';

    /**
     * Returns true if the given object is an instance of Principal.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Principal {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Principal.__pulumiType;
    }

    /**
     * The number of simultaneous actions allowed for a permissions group.
     */
    public readonly actionLimit!: pulumi.Output<number | undefined>;
    /**
     * If a permissions group is allowed to perform "administer" actions.
     */
    public readonly administerPermission!: pulumi.Output<boolean | undefined>;
    /**
     * If a permissions group is allowed to perform "configure" actions.
     */
    public readonly configurePermission!: pulumi.Output<boolean | undefined>;
    /**
     * The number of simultaneous linux (shell) commands allowed for a permissions group.
     */
    public readonly executeLimit!: pulumi.Output<number | undefined>;
    /**
     * The email address or provider's (e.g. Okta) group-name for a permissions group.
     */
    public readonly identity!: pulumi.Output<string>;
    /**
     * The Identity Provider's name. Defaults to `default`.
     */
    public readonly idpName!: pulumi.Output<string | undefined>;
    /**
     * The name/symbol for the object within Shoreline and the op language (must be unique, only alphanumeric/underscore).
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The type of object (i.e., Alarm, Action, Bot, Metric, Resource, or File).
     */
    public /*out*/ readonly type!: pulumi.Output<string>;
    /**
     * The number of simultaneous metrics allowed for a permissions group.
     */
    public readonly viewLimit!: pulumi.Output<number | undefined>;

    /**
     * Create a Principal resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PrincipalArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PrincipalArgs | PrincipalState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PrincipalState | undefined;
            resourceInputs["actionLimit"] = state ? state.actionLimit : undefined;
            resourceInputs["administerPermission"] = state ? state.administerPermission : undefined;
            resourceInputs["configurePermission"] = state ? state.configurePermission : undefined;
            resourceInputs["executeLimit"] = state ? state.executeLimit : undefined;
            resourceInputs["identity"] = state ? state.identity : undefined;
            resourceInputs["idpName"] = state ? state.idpName : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["viewLimit"] = state ? state.viewLimit : undefined;
        } else {
            const args = argsOrState as PrincipalArgs | undefined;
            if ((!args || args.identity === undefined) && !opts.urn) {
                throw new Error("Missing required property 'identity'");
            }
            resourceInputs["actionLimit"] = args ? args.actionLimit : undefined;
            resourceInputs["administerPermission"] = args ? args.administerPermission : undefined;
            resourceInputs["configurePermission"] = args ? args.configurePermission : undefined;
            resourceInputs["executeLimit"] = args ? args.executeLimit : undefined;
            resourceInputs["identity"] = args ? args.identity : undefined;
            resourceInputs["idpName"] = args ? args.idpName : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["viewLimit"] = args ? args.viewLimit : undefined;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Principal.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Principal resources.
 */
export interface PrincipalState {
    /**
     * The number of simultaneous actions allowed for a permissions group.
     */
    actionLimit?: pulumi.Input<number>;
    /**
     * If a permissions group is allowed to perform "administer" actions.
     */
    administerPermission?: pulumi.Input<boolean>;
    /**
     * If a permissions group is allowed to perform "configure" actions.
     */
    configurePermission?: pulumi.Input<boolean>;
    /**
     * The number of simultaneous linux (shell) commands allowed for a permissions group.
     */
    executeLimit?: pulumi.Input<number>;
    /**
     * The email address or provider's (e.g. Okta) group-name for a permissions group.
     */
    identity?: pulumi.Input<string>;
    /**
     * The Identity Provider's name. Defaults to `default`.
     */
    idpName?: pulumi.Input<string>;
    /**
     * The name/symbol for the object within Shoreline and the op language (must be unique, only alphanumeric/underscore).
     */
    name?: pulumi.Input<string>;
    /**
     * The type of object (i.e., Alarm, Action, Bot, Metric, Resource, or File).
     */
    type?: pulumi.Input<string>;
    /**
     * The number of simultaneous metrics allowed for a permissions group.
     */
    viewLimit?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Principal resource.
 */
export interface PrincipalArgs {
    /**
     * The number of simultaneous actions allowed for a permissions group.
     */
    actionLimit?: pulumi.Input<number>;
    /**
     * If a permissions group is allowed to perform "administer" actions.
     */
    administerPermission?: pulumi.Input<boolean>;
    /**
     * If a permissions group is allowed to perform "configure" actions.
     */
    configurePermission?: pulumi.Input<boolean>;
    /**
     * The number of simultaneous linux (shell) commands allowed for a permissions group.
     */
    executeLimit?: pulumi.Input<number>;
    /**
     * The email address or provider's (e.g. Okta) group-name for a permissions group.
     */
    identity: pulumi.Input<string>;
    /**
     * The Identity Provider's name. Defaults to `default`.
     */
    idpName?: pulumi.Input<string>;
    /**
     * The name/symbol for the object within Shoreline and the op language (must be unique, only alphanumeric/underscore).
     */
    name?: pulumi.Input<string>;
    /**
     * The number of simultaneous metrics allowed for a permissions group.
     */
    viewLimit?: pulumi.Input<number>;
}
