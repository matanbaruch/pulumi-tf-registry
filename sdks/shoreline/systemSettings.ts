// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SystemSettings extends pulumi.CustomResource {
    /**
     * Get an existing SystemSettings resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SystemSettingsState, opts?: pulumi.CustomResourceOptions): SystemSettings {
        return new SystemSettings(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'shoreline:index/systemSettings:SystemSettings';

    /**
     * Returns true if the given object is an instance of SystemSettings.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SystemSettings {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SystemSettings.__pulumiType;
    }

    /**
     * System setting controlling if administrators can create users. Defaults to `true`.
     */
    public readonly administratorGrantsCreateUser!: pulumi.Output<boolean | undefined>;
    /**
     * System setting controlling if administrators can create user access tokens. Defaults to `true`.
     */
    public readonly administratorGrantsCreateUserToken!: pulumi.Output<boolean | undefined>;
    /**
     * System setting controlling if administrators can view user access tokens. Defaults to `true`.
     */
    public readonly administratorGrantsReadUserToken!: pulumi.Output<boolean | undefined>;
    /**
     * System setting controlling if administrators can update user access tokens. Defaults to `true`.
     */
    public readonly administratorGrantsRegenerateUserToken!: pulumi.Output<boolean | undefined>;
    /**
     * System setting controlling if approvals notifications are sent to individual users, in case no specific notebook
     * communication setting is defined. Defaults to `true`.
     */
    public readonly approvalAllowIndividualNotification!: pulumi.Output<boolean | undefined>;
    /**
     * System setting controlling if notebook resource queries can be modified on approved executions. Defaults to `true`.
     */
    public readonly approvalEditableAllowedResourceQueryEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * System setting controlling if notebook approvals are enabled. Defaults to `true`.
     */
    public readonly approvalFeatureEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * System setting controlling if the ticket url is optional when creating an approval request. Defaults to `false`.
     */
    public readonly approvalOptionalRequestTicketUrl!: pulumi.Output<boolean | undefined>;
    /**
     * System setting for the name of the environment. Defaults to ``.
     */
    public readonly environmentName!: pulumi.Output<string | undefined>;
    /**
     * System setting for the background colour of the environment name. The format is #<6-digit hex> Defaults to `#EF5350`.
     */
    public readonly environmentNameBackground!: pulumi.Output<string | undefined>;
    /**
     * System setting for alternate audit storage batching interval (in seconds). Defaults to `5`.
     */
    public readonly externalAuditStorageBatchPeriodSec!: pulumi.Output<number | undefined>;
    /**
     * System setting controlling if audit information is stored in an alternate location. Defaults to `false`.
     */
    public readonly externalAuditStorageEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * System setting for alternate audit storage type (e.g. 'ELASTIC'). Defaults to `ELASTIC`.
     */
    public readonly externalAuditStorageType!: pulumi.Output<string | undefined>;
    /**
     * The name/symbol for the object within Shoreline and the op language (must be unique, only alphanumeric/underscore).
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * System setting controlling if approvals are enabled for ad-hoc notebook execution. Defaults to `true`.
     */
    public readonly notebookAdHocApprovalRequestEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * System setting for maximum wait for approval after request (in minutes). Defaults to `60`.
     */
    public readonly notebookApprovalRequestExpiryTime!: pulumi.Output<number | undefined>;
    /**
     * System setting for maximum wait for execution after approval (in minutes). Defaults to `60`.
     */
    public readonly notebookRunApprovalExpiryTime!: pulumi.Output<number | undefined>;
    /**
     * System setting controlling the maximum number of different parallel notebook runs initiated via time triggers Defaults
     * to `10`.
     */
    public readonly parallelNotebookRunsFiredByTimeTriggers!: pulumi.Output<number | undefined>;
    /**
     * System setting controlling the maximum allowable length for a notebook's parameter Defaults to `10000`.
     */
    public readonly paramValueMaxLength!: pulumi.Output<number | undefined>;
    /**
     * System setting for the user that time-triggered notebooks run as. Defaults to `Shoreline`.
     */
    public readonly timeTriggerPermissionsUser!: pulumi.Output<string | undefined>;
    /**
     * The type of object (i.e., Alarm, Action, Bot, Metric, Resource, or File).
     */
    public /*out*/ readonly type!: pulumi.Output<string>;

    /**
     * Create a SystemSettings resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SystemSettingsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SystemSettingsArgs | SystemSettingsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SystemSettingsState | undefined;
            resourceInputs["administratorGrantsCreateUser"] = state ? state.administratorGrantsCreateUser : undefined;
            resourceInputs["administratorGrantsCreateUserToken"] = state ? state.administratorGrantsCreateUserToken : undefined;
            resourceInputs["administratorGrantsReadUserToken"] = state ? state.administratorGrantsReadUserToken : undefined;
            resourceInputs["administratorGrantsRegenerateUserToken"] = state ? state.administratorGrantsRegenerateUserToken : undefined;
            resourceInputs["approvalAllowIndividualNotification"] = state ? state.approvalAllowIndividualNotification : undefined;
            resourceInputs["approvalEditableAllowedResourceQueryEnabled"] = state ? state.approvalEditableAllowedResourceQueryEnabled : undefined;
            resourceInputs["approvalFeatureEnabled"] = state ? state.approvalFeatureEnabled : undefined;
            resourceInputs["approvalOptionalRequestTicketUrl"] = state ? state.approvalOptionalRequestTicketUrl : undefined;
            resourceInputs["environmentName"] = state ? state.environmentName : undefined;
            resourceInputs["environmentNameBackground"] = state ? state.environmentNameBackground : undefined;
            resourceInputs["externalAuditStorageBatchPeriodSec"] = state ? state.externalAuditStorageBatchPeriodSec : undefined;
            resourceInputs["externalAuditStorageEnabled"] = state ? state.externalAuditStorageEnabled : undefined;
            resourceInputs["externalAuditStorageType"] = state ? state.externalAuditStorageType : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notebookAdHocApprovalRequestEnabled"] = state ? state.notebookAdHocApprovalRequestEnabled : undefined;
            resourceInputs["notebookApprovalRequestExpiryTime"] = state ? state.notebookApprovalRequestExpiryTime : undefined;
            resourceInputs["notebookRunApprovalExpiryTime"] = state ? state.notebookRunApprovalExpiryTime : undefined;
            resourceInputs["parallelNotebookRunsFiredByTimeTriggers"] = state ? state.parallelNotebookRunsFiredByTimeTriggers : undefined;
            resourceInputs["paramValueMaxLength"] = state ? state.paramValueMaxLength : undefined;
            resourceInputs["timeTriggerPermissionsUser"] = state ? state.timeTriggerPermissionsUser : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as SystemSettingsArgs | undefined;
            resourceInputs["administratorGrantsCreateUser"] = args ? args.administratorGrantsCreateUser : undefined;
            resourceInputs["administratorGrantsCreateUserToken"] = args ? args.administratorGrantsCreateUserToken : undefined;
            resourceInputs["administratorGrantsReadUserToken"] = args ? args.administratorGrantsReadUserToken : undefined;
            resourceInputs["administratorGrantsRegenerateUserToken"] = args ? args.administratorGrantsRegenerateUserToken : undefined;
            resourceInputs["approvalAllowIndividualNotification"] = args ? args.approvalAllowIndividualNotification : undefined;
            resourceInputs["approvalEditableAllowedResourceQueryEnabled"] = args ? args.approvalEditableAllowedResourceQueryEnabled : undefined;
            resourceInputs["approvalFeatureEnabled"] = args ? args.approvalFeatureEnabled : undefined;
            resourceInputs["approvalOptionalRequestTicketUrl"] = args ? args.approvalOptionalRequestTicketUrl : undefined;
            resourceInputs["environmentName"] = args ? args.environmentName : undefined;
            resourceInputs["environmentNameBackground"] = args ? args.environmentNameBackground : undefined;
            resourceInputs["externalAuditStorageBatchPeriodSec"] = args ? args.externalAuditStorageBatchPeriodSec : undefined;
            resourceInputs["externalAuditStorageEnabled"] = args ? args.externalAuditStorageEnabled : undefined;
            resourceInputs["externalAuditStorageType"] = args ? args.externalAuditStorageType : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["notebookAdHocApprovalRequestEnabled"] = args ? args.notebookAdHocApprovalRequestEnabled : undefined;
            resourceInputs["notebookApprovalRequestExpiryTime"] = args ? args.notebookApprovalRequestExpiryTime : undefined;
            resourceInputs["notebookRunApprovalExpiryTime"] = args ? args.notebookRunApprovalExpiryTime : undefined;
            resourceInputs["parallelNotebookRunsFiredByTimeTriggers"] = args ? args.parallelNotebookRunsFiredByTimeTriggers : undefined;
            resourceInputs["paramValueMaxLength"] = args ? args.paramValueMaxLength : undefined;
            resourceInputs["timeTriggerPermissionsUser"] = args ? args.timeTriggerPermissionsUser : undefined;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SystemSettings.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SystemSettings resources.
 */
export interface SystemSettingsState {
    /**
     * System setting controlling if administrators can create users. Defaults to `true`.
     */
    administratorGrantsCreateUser?: pulumi.Input<boolean>;
    /**
     * System setting controlling if administrators can create user access tokens. Defaults to `true`.
     */
    administratorGrantsCreateUserToken?: pulumi.Input<boolean>;
    /**
     * System setting controlling if administrators can view user access tokens. Defaults to `true`.
     */
    administratorGrantsReadUserToken?: pulumi.Input<boolean>;
    /**
     * System setting controlling if administrators can update user access tokens. Defaults to `true`.
     */
    administratorGrantsRegenerateUserToken?: pulumi.Input<boolean>;
    /**
     * System setting controlling if approvals notifications are sent to individual users, in case no specific notebook
     * communication setting is defined. Defaults to `true`.
     */
    approvalAllowIndividualNotification?: pulumi.Input<boolean>;
    /**
     * System setting controlling if notebook resource queries can be modified on approved executions. Defaults to `true`.
     */
    approvalEditableAllowedResourceQueryEnabled?: pulumi.Input<boolean>;
    /**
     * System setting controlling if notebook approvals are enabled. Defaults to `true`.
     */
    approvalFeatureEnabled?: pulumi.Input<boolean>;
    /**
     * System setting controlling if the ticket url is optional when creating an approval request. Defaults to `false`.
     */
    approvalOptionalRequestTicketUrl?: pulumi.Input<boolean>;
    /**
     * System setting for the name of the environment. Defaults to ``.
     */
    environmentName?: pulumi.Input<string>;
    /**
     * System setting for the background colour of the environment name. The format is #<6-digit hex> Defaults to `#EF5350`.
     */
    environmentNameBackground?: pulumi.Input<string>;
    /**
     * System setting for alternate audit storage batching interval (in seconds). Defaults to `5`.
     */
    externalAuditStorageBatchPeriodSec?: pulumi.Input<number>;
    /**
     * System setting controlling if audit information is stored in an alternate location. Defaults to `false`.
     */
    externalAuditStorageEnabled?: pulumi.Input<boolean>;
    /**
     * System setting for alternate audit storage type (e.g. 'ELASTIC'). Defaults to `ELASTIC`.
     */
    externalAuditStorageType?: pulumi.Input<string>;
    /**
     * The name/symbol for the object within Shoreline and the op language (must be unique, only alphanumeric/underscore).
     */
    name?: pulumi.Input<string>;
    /**
     * System setting controlling if approvals are enabled for ad-hoc notebook execution. Defaults to `true`.
     */
    notebookAdHocApprovalRequestEnabled?: pulumi.Input<boolean>;
    /**
     * System setting for maximum wait for approval after request (in minutes). Defaults to `60`.
     */
    notebookApprovalRequestExpiryTime?: pulumi.Input<number>;
    /**
     * System setting for maximum wait for execution after approval (in minutes). Defaults to `60`.
     */
    notebookRunApprovalExpiryTime?: pulumi.Input<number>;
    /**
     * System setting controlling the maximum number of different parallel notebook runs initiated via time triggers Defaults
     * to `10`.
     */
    parallelNotebookRunsFiredByTimeTriggers?: pulumi.Input<number>;
    /**
     * System setting controlling the maximum allowable length for a notebook's parameter Defaults to `10000`.
     */
    paramValueMaxLength?: pulumi.Input<number>;
    /**
     * System setting for the user that time-triggered notebooks run as. Defaults to `Shoreline`.
     */
    timeTriggerPermissionsUser?: pulumi.Input<string>;
    /**
     * The type of object (i.e., Alarm, Action, Bot, Metric, Resource, or File).
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SystemSettings resource.
 */
export interface SystemSettingsArgs {
    /**
     * System setting controlling if administrators can create users. Defaults to `true`.
     */
    administratorGrantsCreateUser?: pulumi.Input<boolean>;
    /**
     * System setting controlling if administrators can create user access tokens. Defaults to `true`.
     */
    administratorGrantsCreateUserToken?: pulumi.Input<boolean>;
    /**
     * System setting controlling if administrators can view user access tokens. Defaults to `true`.
     */
    administratorGrantsReadUserToken?: pulumi.Input<boolean>;
    /**
     * System setting controlling if administrators can update user access tokens. Defaults to `true`.
     */
    administratorGrantsRegenerateUserToken?: pulumi.Input<boolean>;
    /**
     * System setting controlling if approvals notifications are sent to individual users, in case no specific notebook
     * communication setting is defined. Defaults to `true`.
     */
    approvalAllowIndividualNotification?: pulumi.Input<boolean>;
    /**
     * System setting controlling if notebook resource queries can be modified on approved executions. Defaults to `true`.
     */
    approvalEditableAllowedResourceQueryEnabled?: pulumi.Input<boolean>;
    /**
     * System setting controlling if notebook approvals are enabled. Defaults to `true`.
     */
    approvalFeatureEnabled?: pulumi.Input<boolean>;
    /**
     * System setting controlling if the ticket url is optional when creating an approval request. Defaults to `false`.
     */
    approvalOptionalRequestTicketUrl?: pulumi.Input<boolean>;
    /**
     * System setting for the name of the environment. Defaults to ``.
     */
    environmentName?: pulumi.Input<string>;
    /**
     * System setting for the background colour of the environment name. The format is #<6-digit hex> Defaults to `#EF5350`.
     */
    environmentNameBackground?: pulumi.Input<string>;
    /**
     * System setting for alternate audit storage batching interval (in seconds). Defaults to `5`.
     */
    externalAuditStorageBatchPeriodSec?: pulumi.Input<number>;
    /**
     * System setting controlling if audit information is stored in an alternate location. Defaults to `false`.
     */
    externalAuditStorageEnabled?: pulumi.Input<boolean>;
    /**
     * System setting for alternate audit storage type (e.g. 'ELASTIC'). Defaults to `ELASTIC`.
     */
    externalAuditStorageType?: pulumi.Input<string>;
    /**
     * The name/symbol for the object within Shoreline and the op language (must be unique, only alphanumeric/underscore).
     */
    name?: pulumi.Input<string>;
    /**
     * System setting controlling if approvals are enabled for ad-hoc notebook execution. Defaults to `true`.
     */
    notebookAdHocApprovalRequestEnabled?: pulumi.Input<boolean>;
    /**
     * System setting for maximum wait for approval after request (in minutes). Defaults to `60`.
     */
    notebookApprovalRequestExpiryTime?: pulumi.Input<number>;
    /**
     * System setting for maximum wait for execution after approval (in minutes). Defaults to `60`.
     */
    notebookRunApprovalExpiryTime?: pulumi.Input<number>;
    /**
     * System setting controlling the maximum number of different parallel notebook runs initiated via time triggers Defaults
     * to `10`.
     */
    parallelNotebookRunsFiredByTimeTriggers?: pulumi.Input<number>;
    /**
     * System setting controlling the maximum allowable length for a notebook's parameter Defaults to `10000`.
     */
    paramValueMaxLength?: pulumi.Input<number>;
    /**
     * System setting for the user that time-triggered notebooks run as. Defaults to `Shoreline`.
     */
    timeTriggerPermissionsUser?: pulumi.Input<string>;
}
