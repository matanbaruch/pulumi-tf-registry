// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { ActionArgs, ActionState } from "./action";
export type Action = import("./action").Action;
export const Action: typeof import("./action").Action = null as any;
utilities.lazyLoad(exports, ["Action"], () => require("./action"));

export { AlarmArgs, AlarmState } from "./alarm";
export type Alarm = import("./alarm").Alarm;
export const Alarm: typeof import("./alarm").Alarm = null as any;
utilities.lazyLoad(exports, ["Alarm"], () => require("./alarm"));

export { BotArgs, BotState } from "./bot";
export type Bot = import("./bot").Bot;
export const Bot: typeof import("./bot").Bot = null as any;
utilities.lazyLoad(exports, ["Bot"], () => require("./bot"));

export { CircuitBreakerArgs, CircuitBreakerState } from "./circuitBreaker";
export type CircuitBreaker = import("./circuitBreaker").CircuitBreaker;
export const CircuitBreaker: typeof import("./circuitBreaker").CircuitBreaker = null as any;
utilities.lazyLoad(exports, ["CircuitBreaker"], () => require("./circuitBreaker"));

export { FileArgs, FileState } from "./file";
export type File = import("./file").File;
export const File: typeof import("./file").File = null as any;
utilities.lazyLoad(exports, ["File"], () => require("./file"));

export { GetVersionArgs, GetVersionResult, GetVersionOutputArgs } from "./getVersion";
export const getVersion: typeof import("./getVersion").getVersion = null as any;
export const getVersionOutput: typeof import("./getVersion").getVersionOutput = null as any;
utilities.lazyLoad(exports, ["getVersion","getVersionOutput"], () => require("./getVersion"));

export { IntegrationArgs, IntegrationState } from "./integration";
export type Integration = import("./integration").Integration;
export const Integration: typeof import("./integration").Integration = null as any;
utilities.lazyLoad(exports, ["Integration"], () => require("./integration"));

export { MetricArgs, MetricState } from "./metric";
export type Metric = import("./metric").Metric;
export const Metric: typeof import("./metric").Metric = null as any;
utilities.lazyLoad(exports, ["Metric"], () => require("./metric"));

export { NotebookArgs, NotebookState } from "./notebook";
export type Notebook = import("./notebook").Notebook;
export const Notebook: typeof import("./notebook").Notebook = null as any;
utilities.lazyLoad(exports, ["Notebook"], () => require("./notebook"));

export { PrincipalArgs, PrincipalState } from "./principal";
export type Principal = import("./principal").Principal;
export const Principal: typeof import("./principal").Principal = null as any;
utilities.lazyLoad(exports, ["Principal"], () => require("./principal"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { ResourceArgs, ResourceState } from "./resource";
export type Resource = import("./resource").Resource;
export const Resource: typeof import("./resource").Resource = null as any;
utilities.lazyLoad(exports, ["Resource"], () => require("./resource"));

export { RunbookArgs, RunbookState } from "./runbook";
export type Runbook = import("./runbook").Runbook;
export const Runbook: typeof import("./runbook").Runbook = null as any;
utilities.lazyLoad(exports, ["Runbook"], () => require("./runbook"));

export { SystemSettingsArgs, SystemSettingsState } from "./systemSettings";
export type SystemSettings = import("./systemSettings").SystemSettings;
export const SystemSettings: typeof import("./systemSettings").SystemSettings = null as any;
utilities.lazyLoad(exports, ["SystemSettings"], () => require("./systemSettings"));

export { TimeTriggerArgs, TimeTriggerState } from "./timeTrigger";
export type TimeTrigger = import("./timeTrigger").TimeTrigger;
export const TimeTrigger: typeof import("./timeTrigger").TimeTrigger = null as any;
utilities.lazyLoad(exports, ["TimeTrigger"], () => require("./timeTrigger"));


// Export sub-modules:
import * as config from "./config";

export {
    config,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "shoreline:index/action:Action":
                return new Action(name, <any>undefined, { urn })
            case "shoreline:index/alarm:Alarm":
                return new Alarm(name, <any>undefined, { urn })
            case "shoreline:index/bot:Bot":
                return new Bot(name, <any>undefined, { urn })
            case "shoreline:index/circuitBreaker:CircuitBreaker":
                return new CircuitBreaker(name, <any>undefined, { urn })
            case "shoreline:index/file:File":
                return new File(name, <any>undefined, { urn })
            case "shoreline:index/integration:Integration":
                return new Integration(name, <any>undefined, { urn })
            case "shoreline:index/metric:Metric":
                return new Metric(name, <any>undefined, { urn })
            case "shoreline:index/notebook:Notebook":
                return new Notebook(name, <any>undefined, { urn })
            case "shoreline:index/principal:Principal":
                return new Principal(name, <any>undefined, { urn })
            case "shoreline:index/resource:Resource":
                return new Resource(name, <any>undefined, { urn })
            case "shoreline:index/runbook:Runbook":
                return new Runbook(name, <any>undefined, { urn })
            case "shoreline:index/systemSettings:SystemSettings":
                return new SystemSettings(name, <any>undefined, { urn })
            case "shoreline:index/timeTrigger:TimeTrigger":
                return new TimeTrigger(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("shoreline", "index/action", _module)
pulumi.runtime.registerResourceModule("shoreline", "index/alarm", _module)
pulumi.runtime.registerResourceModule("shoreline", "index/bot", _module)
pulumi.runtime.registerResourceModule("shoreline", "index/circuitBreaker", _module)
pulumi.runtime.registerResourceModule("shoreline", "index/file", _module)
pulumi.runtime.registerResourceModule("shoreline", "index/integration", _module)
pulumi.runtime.registerResourceModule("shoreline", "index/metric", _module)
pulumi.runtime.registerResourceModule("shoreline", "index/notebook", _module)
pulumi.runtime.registerResourceModule("shoreline", "index/principal", _module)
pulumi.runtime.registerResourceModule("shoreline", "index/resource", _module)
pulumi.runtime.registerResourceModule("shoreline", "index/runbook", _module)
pulumi.runtime.registerResourceModule("shoreline", "index/systemSettings", _module)
pulumi.runtime.registerResourceModule("shoreline", "index/timeTrigger", _module)
pulumi.runtime.registerResourcePackage("shoreline", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:shoreline") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
