// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Integration extends pulumi.CustomResource {
    /**
     * Get an existing Integration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IntegrationState, opts?: pulumi.CustomResourceOptions): Integration {
        return new Integration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'shoreline:index/integration:Integration';

    /**
     * Returns true if the given object is an instance of Integration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Integration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Integration.__pulumiType;
    }

    /**
     * Account ID for a 3rd-party service integration.
     */
    public readonly accountId!: pulumi.Output<string | undefined>;
    /**
     * API key for a 3rd-party service integration.
     */
    public readonly apiKey!: pulumi.Output<string | undefined>;
    /**
     * The number of API calls a client is able to make in a minute.
     */
    public readonly apiRateLimit!: pulumi.Output<number | undefined>;
    /**
     * API url for a 3rd-party service integration.
     */
    public readonly apiUrl!: pulumi.Output<string | undefined>;
    /**
     * Application key for a 3rd-party service integration.
     */
    public readonly appKey!: pulumi.Output<string | undefined>;
    /**
     * The amount of time group memberships will be cached (in milliseconds).
     */
    public readonly cacheTtl!: pulumi.Output<number | undefined>;
    /**
     * The amount of time group memberships will be cached (in milliseconds).
     */
    public readonly cacheTtlMs!: pulumi.Output<number | undefined>;
    /**
     * Application id for a 3rd-party service integration (Microsoft Entra ID).
     */
    public readonly clientId!: pulumi.Output<string | undefined>;
    /**
     * Client secret for a 3rd-party service integration (Microsoft Entra ID).
     */
    public readonly clientSecret!: pulumi.Output<string | undefined>;
    /**
     * The credentials used for a 3rd-party service integration (google cloud identity), encoded in base64.
     */
    public readonly credentials!: pulumi.Output<string | undefined>;
    /**
     * The name of a dashboard for 3rd-party service integration (datadog).
     */
    public readonly dashboardName!: pulumi.Output<string | undefined>;
    /**
     * If the object is currently enabled or disabled. Defaults to `false`.
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * External url for a 3rd-party service integration.
     */
    public readonly externalUrl!: pulumi.Output<string | undefined>;
    /**
     * The Identity Provider's name.
     */
    public readonly idpName!: pulumi.Output<string | undefined>;
    /**
     * Insights key for a 3rd-party service integration.
     */
    public readonly insightsCollectorApiKey!: pulumi.Output<string | undefined>;
    /**
     * Insights url for a 3rd-party service integration.
     */
    public readonly insightsCollectorUrl!: pulumi.Output<string | undefined>;
    /**
     * The name/symbol for the object within Shoreline and the op language (must be unique, only alphanumeric/underscore).
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The user which 3rd-party service integration remediations run as (default 'Shoreline').
     */
    public readonly permissionsUser!: pulumi.Output<string | undefined>;
    public readonly serialNumber!: pulumi.Output<string>;
    /**
     * The name of a 3rd-party service to integrate with (e.g. 'datadog', or 'newrelic').
     */
    public readonly serviceName!: pulumi.Output<string>;
    /**
     * Site/Application url for a 3rd-party service integration.
     */
    public readonly siteUrl!: pulumi.Output<string | undefined>;
    /**
     * The subject whose authentication details is used for a 3rd-party service integration (google cloud identity).
     */
    public readonly subject!: pulumi.Output<string | undefined>;
    /**
     * Tenant id for a 3rd-party service integration (Microsoft Entra ID).
     */
    public readonly tenantId!: pulumi.Output<string | undefined>;
    /**
     * The type of object (i.e., Alarm, Action, Bot, Metric, Resource, or File).
     */
    public /*out*/ readonly type!: pulumi.Output<string>;
    /**
     * The name of a webhook for 3rd-party service integration (datadog).
     */
    public readonly webhookName!: pulumi.Output<string | undefined>;

    /**
     * Create a Integration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IntegrationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IntegrationArgs | IntegrationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IntegrationState | undefined;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["apiKey"] = state ? state.apiKey : undefined;
            resourceInputs["apiRateLimit"] = state ? state.apiRateLimit : undefined;
            resourceInputs["apiUrl"] = state ? state.apiUrl : undefined;
            resourceInputs["appKey"] = state ? state.appKey : undefined;
            resourceInputs["cacheTtl"] = state ? state.cacheTtl : undefined;
            resourceInputs["cacheTtlMs"] = state ? state.cacheTtlMs : undefined;
            resourceInputs["clientId"] = state ? state.clientId : undefined;
            resourceInputs["clientSecret"] = state ? state.clientSecret : undefined;
            resourceInputs["credentials"] = state ? state.credentials : undefined;
            resourceInputs["dashboardName"] = state ? state.dashboardName : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["externalUrl"] = state ? state.externalUrl : undefined;
            resourceInputs["idpName"] = state ? state.idpName : undefined;
            resourceInputs["insightsCollectorApiKey"] = state ? state.insightsCollectorApiKey : undefined;
            resourceInputs["insightsCollectorUrl"] = state ? state.insightsCollectorUrl : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["permissionsUser"] = state ? state.permissionsUser : undefined;
            resourceInputs["serialNumber"] = state ? state.serialNumber : undefined;
            resourceInputs["serviceName"] = state ? state.serviceName : undefined;
            resourceInputs["siteUrl"] = state ? state.siteUrl : undefined;
            resourceInputs["subject"] = state ? state.subject : undefined;
            resourceInputs["tenantId"] = state ? state.tenantId : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["webhookName"] = state ? state.webhookName : undefined;
        } else {
            const args = argsOrState as IntegrationArgs | undefined;
            if ((!args || args.serialNumber === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serialNumber'");
            }
            if ((!args || args.serviceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceName'");
            }
            resourceInputs["accountId"] = args ? args.accountId : undefined;
            resourceInputs["apiKey"] = args ? args.apiKey : undefined;
            resourceInputs["apiRateLimit"] = args ? args.apiRateLimit : undefined;
            resourceInputs["apiUrl"] = args ? args.apiUrl : undefined;
            resourceInputs["appKey"] = args ? args.appKey : undefined;
            resourceInputs["cacheTtl"] = args ? args.cacheTtl : undefined;
            resourceInputs["cacheTtlMs"] = args ? args.cacheTtlMs : undefined;
            resourceInputs["clientId"] = args ? args.clientId : undefined;
            resourceInputs["clientSecret"] = args ? args.clientSecret : undefined;
            resourceInputs["credentials"] = args ? args.credentials : undefined;
            resourceInputs["dashboardName"] = args ? args.dashboardName : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["externalUrl"] = args ? args.externalUrl : undefined;
            resourceInputs["idpName"] = args ? args.idpName : undefined;
            resourceInputs["insightsCollectorApiKey"] = args ? args.insightsCollectorApiKey : undefined;
            resourceInputs["insightsCollectorUrl"] = args ? args.insightsCollectorUrl : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["permissionsUser"] = args ? args.permissionsUser : undefined;
            resourceInputs["serialNumber"] = args ? args.serialNumber : undefined;
            resourceInputs["serviceName"] = args ? args.serviceName : undefined;
            resourceInputs["siteUrl"] = args ? args.siteUrl : undefined;
            resourceInputs["subject"] = args ? args.subject : undefined;
            resourceInputs["tenantId"] = args ? args.tenantId : undefined;
            resourceInputs["webhookName"] = args ? args.webhookName : undefined;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Integration.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Integration resources.
 */
export interface IntegrationState {
    /**
     * Account ID for a 3rd-party service integration.
     */
    accountId?: pulumi.Input<string>;
    /**
     * API key for a 3rd-party service integration.
     */
    apiKey?: pulumi.Input<string>;
    /**
     * The number of API calls a client is able to make in a minute.
     */
    apiRateLimit?: pulumi.Input<number>;
    /**
     * API url for a 3rd-party service integration.
     */
    apiUrl?: pulumi.Input<string>;
    /**
     * Application key for a 3rd-party service integration.
     */
    appKey?: pulumi.Input<string>;
    /**
     * The amount of time group memberships will be cached (in milliseconds).
     */
    cacheTtl?: pulumi.Input<number>;
    /**
     * The amount of time group memberships will be cached (in milliseconds).
     */
    cacheTtlMs?: pulumi.Input<number>;
    /**
     * Application id for a 3rd-party service integration (Microsoft Entra ID).
     */
    clientId?: pulumi.Input<string>;
    /**
     * Client secret for a 3rd-party service integration (Microsoft Entra ID).
     */
    clientSecret?: pulumi.Input<string>;
    /**
     * The credentials used for a 3rd-party service integration (google cloud identity), encoded in base64.
     */
    credentials?: pulumi.Input<string>;
    /**
     * The name of a dashboard for 3rd-party service integration (datadog).
     */
    dashboardName?: pulumi.Input<string>;
    /**
     * If the object is currently enabled or disabled. Defaults to `false`.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * External url for a 3rd-party service integration.
     */
    externalUrl?: pulumi.Input<string>;
    /**
     * The Identity Provider's name.
     */
    idpName?: pulumi.Input<string>;
    /**
     * Insights key for a 3rd-party service integration.
     */
    insightsCollectorApiKey?: pulumi.Input<string>;
    /**
     * Insights url for a 3rd-party service integration.
     */
    insightsCollectorUrl?: pulumi.Input<string>;
    /**
     * The name/symbol for the object within Shoreline and the op language (must be unique, only alphanumeric/underscore).
     */
    name?: pulumi.Input<string>;
    /**
     * The user which 3rd-party service integration remediations run as (default 'Shoreline').
     */
    permissionsUser?: pulumi.Input<string>;
    serialNumber?: pulumi.Input<string>;
    /**
     * The name of a 3rd-party service to integrate with (e.g. 'datadog', or 'newrelic').
     */
    serviceName?: pulumi.Input<string>;
    /**
     * Site/Application url for a 3rd-party service integration.
     */
    siteUrl?: pulumi.Input<string>;
    /**
     * The subject whose authentication details is used for a 3rd-party service integration (google cloud identity).
     */
    subject?: pulumi.Input<string>;
    /**
     * Tenant id for a 3rd-party service integration (Microsoft Entra ID).
     */
    tenantId?: pulumi.Input<string>;
    /**
     * The type of object (i.e., Alarm, Action, Bot, Metric, Resource, or File).
     */
    type?: pulumi.Input<string>;
    /**
     * The name of a webhook for 3rd-party service integration (datadog).
     */
    webhookName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Integration resource.
 */
export interface IntegrationArgs {
    /**
     * Account ID for a 3rd-party service integration.
     */
    accountId?: pulumi.Input<string>;
    /**
     * API key for a 3rd-party service integration.
     */
    apiKey?: pulumi.Input<string>;
    /**
     * The number of API calls a client is able to make in a minute.
     */
    apiRateLimit?: pulumi.Input<number>;
    /**
     * API url for a 3rd-party service integration.
     */
    apiUrl?: pulumi.Input<string>;
    /**
     * Application key for a 3rd-party service integration.
     */
    appKey?: pulumi.Input<string>;
    /**
     * The amount of time group memberships will be cached (in milliseconds).
     */
    cacheTtl?: pulumi.Input<number>;
    /**
     * The amount of time group memberships will be cached (in milliseconds).
     */
    cacheTtlMs?: pulumi.Input<number>;
    /**
     * Application id for a 3rd-party service integration (Microsoft Entra ID).
     */
    clientId?: pulumi.Input<string>;
    /**
     * Client secret for a 3rd-party service integration (Microsoft Entra ID).
     */
    clientSecret?: pulumi.Input<string>;
    /**
     * The credentials used for a 3rd-party service integration (google cloud identity), encoded in base64.
     */
    credentials?: pulumi.Input<string>;
    /**
     * The name of a dashboard for 3rd-party service integration (datadog).
     */
    dashboardName?: pulumi.Input<string>;
    /**
     * If the object is currently enabled or disabled. Defaults to `false`.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * External url for a 3rd-party service integration.
     */
    externalUrl?: pulumi.Input<string>;
    /**
     * The Identity Provider's name.
     */
    idpName?: pulumi.Input<string>;
    /**
     * Insights key for a 3rd-party service integration.
     */
    insightsCollectorApiKey?: pulumi.Input<string>;
    /**
     * Insights url for a 3rd-party service integration.
     */
    insightsCollectorUrl?: pulumi.Input<string>;
    /**
     * The name/symbol for the object within Shoreline and the op language (must be unique, only alphanumeric/underscore).
     */
    name?: pulumi.Input<string>;
    /**
     * The user which 3rd-party service integration remediations run as (default 'Shoreline').
     */
    permissionsUser?: pulumi.Input<string>;
    serialNumber: pulumi.Input<string>;
    /**
     * The name of a 3rd-party service to integrate with (e.g. 'datadog', or 'newrelic').
     */
    serviceName: pulumi.Input<string>;
    /**
     * Site/Application url for a 3rd-party service integration.
     */
    siteUrl?: pulumi.Input<string>;
    /**
     * The subject whose authentication details is used for a 3rd-party service integration (google cloud identity).
     */
    subject?: pulumi.Input<string>;
    /**
     * Tenant id for a 3rd-party service integration (Microsoft Entra ID).
     */
    tenantId?: pulumi.Input<string>;
    /**
     * The name of a webhook for 3rd-party service integration (datadog).
     */
    webhookName?: pulumi.Input<string>;
}
