// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getCloudRouterConnection(args: GetCloudRouterConnectionArgs, opts?: pulumi.InvokeOptions): Promise<GetCloudRouterConnectionResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("packetfabric:index/getCloudRouterConnection:getCloudRouterConnection", {
        "circuitId": args.circuitId,
        "connectionId": args.connectionId,
        "id": args.id,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getCloudRouterConnection.
 */
export interface GetCloudRouterConnectionArgs {
    circuitId: string;
    connectionId: string;
    id?: string;
}

/**
 * A collection of values returned by getCloudRouterConnection.
 */
export interface GetCloudRouterConnectionResult {
    readonly accountUuid: string;
    readonly bgpStateLists: outputs.GetCloudRouterConnectionBgpStateList[];
    readonly circuitId: string;
    readonly cloudCircuitId: string;
    readonly cloudProviderConnectionId: string;
    readonly cloudProviders: outputs.GetCloudRouterConnectionCloudProvider[];
    readonly cloudRouterAsn: number;
    readonly cloudRouterCircuitId: string;
    readonly cloudRouterName: string;
    readonly cloudSettings: outputs.GetCloudRouterConnectionCloudSetting[];
    readonly connectionId: string;
    readonly connectionType: string;
    readonly customerUuid: string;
    readonly deleted: boolean;
    readonly description: string;
    readonly desiredNat: string;
    readonly dnatCapable: boolean;
    readonly id: string;
    readonly natCapable: boolean;
    readonly pendingDelete: boolean;
    readonly pop: string;
    readonly portCircuitId: string;
    readonly portType: string;
    readonly serviceClass: string;
    readonly serviceProvider: string;
    readonly serviceType: string;
    readonly site: string;
    readonly speed: string;
    readonly state: string;
    readonly subscriptionTerm: number;
    readonly timeCreated: string;
    readonly timeUpdated: string;
    readonly userUuid: string;
    readonly uuid: string;
    readonly vlan: number;
    readonly zone: string;
}
export function getCloudRouterConnectionOutput(args: GetCloudRouterConnectionOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetCloudRouterConnectionResult> {
    return pulumi.output(args).apply((a: any) => getCloudRouterConnection(a, opts))
}

/**
 * A collection of arguments for invoking getCloudRouterConnection.
 */
export interface GetCloudRouterConnectionOutputArgs {
    circuitId: pulumi.Input<string>;
    connectionId: pulumi.Input<string>;
    id?: pulumi.Input<string>;
}
