// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CloudRouterConnectionIpsec extends pulumi.CustomResource {
    /**
     * Get an existing CloudRouterConnectionIpsec resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CloudRouterConnectionIpsecState, opts?: pulumi.CustomResourceOptions): CloudRouterConnectionIpsec {
        return new CloudRouterConnectionIpsec(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'packetfabric:index/cloudRouterConnectionIpsec:CloudRouterConnectionIpsec';

    /**
     * Returns true if the given object is an instance of CloudRouterConnectionIpsec.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CloudRouterConnectionIpsec {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CloudRouterConnectionIpsec.__pulumiType;
    }

    /**
     * The UUID for the billing account that should be billed. Can also be set with the PF_ACCOUNT_ID environment variable.
     */
    public readonly accountUuid!: pulumi.Output<string>;
    /**
     * Circuit ID of the target cloud router. This starts with "PF-L3-CUST-".
     */
    public readonly circuitId!: pulumi.Output<string>;
    /**
     * A brief description of this connection.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * Early Termination Liability (ETL) fees apply when terminating a service before its term ends. ETL is prorated to the
     * remaining contract days.
     */
    public /*out*/ readonly etl!: pulumi.Output<number>;
    /**
     * The gateway address of your VPN device. Because VPNs traverse the public internet, this must be a public IP address
     * owned by you.
     */
    public readonly gatewayAddress!: pulumi.Output<string>;
    /**
     * The Internet Key Exchange (IKE) version supported by your device. In most cases, this is v2 (v1 is deprecated). Enum: 1,
     * 2.
     */
    public readonly ikeVersion!: pulumi.Output<number>;
    /**
     * Label value linked to an object.
     */
    public readonly labels!: pulumi.Output<string[] | undefined>;
    /**
     * The authentication algorithm to use during phase 1. Enum: "md5" "sha-256" "sha-384" "sha1"
     */
    public readonly phase1AuthenticationAlgo!: pulumi.Output<string>;
    /**
     * The authentication method to use during phase 1. For example, "pre-shared-key".
     */
    public readonly phase1AuthenticationMethod!: pulumi.Output<string>;
    /**
     * The encryption algorithm to use during phase 1. Enum: "3des-cbc" "aes-128-cbc" "aes-192-cbc" "aes-256-cbc" "des-cbc"
     */
    public readonly phase1EncryptionAlgo!: pulumi.Output<string>;
    /**
     * Phase 1 is when the VPN peers are authenticated and we establish security associations (SAs) to protect IKE messaging
     * between the two endpoints (which in this case is PacketFabric and your VPN device). This is also known as the IKE phase.
     * The Phase 1 group is the Diffie-Hellman (DH) algorithm used to create a shared secret between the endpoints. Enum:
     * "group1" "group14" "group15" "group16" "group19" "group2" "group20" "group24" "group5"
     */
    public readonly phase1Group!: pulumi.Output<string>;
    /**
     * The time in seconds before a tunnel will need to re-authenticate. The phase 1 lifetime should be equal to or longer than
     * phase 2. This can be between 180 and 86400.
     */
    public readonly phase1Lifetime!: pulumi.Output<number>;
    /**
     * The authentication algorithm to use during phase 2. It cannot be null if phase2_encryption_algo is CBC. Enum:
     * "hmac-md5-96" "hmac-sha-256-128" "hmac-sha1-96"
     */
    public readonly phase2AuthenticationAlgo!: pulumi.Output<string | undefined>;
    /**
     * The encryption algorithm to use during phase 2. Enum: "3des-cbc" "aes-128-cbc" "aes-128-gcm" "aes-192-cbc" "aes-192-gcm"
     * "aes-256-cbc" "aes-256-gcm" "des-cbc"
     */
    public readonly phase2EncryptionAlgo!: pulumi.Output<string>;
    /**
     * The time in seconds before phase 2 expires and needs to reauthenticate. We recommend that the phase 2 lifetime is equal
     * to or shorter than phase 1. This can be between 180 and 86400.
     */
    public readonly phase2Lifetime!: pulumi.Output<number>;
    /**
     * Phase 2 is when SAs are further established to protect and encrypt IP traffic within the tunnel. This is also known as
     * the IPsec phase. The PFS group is the Perfect Forward Secrecy group. This means that rather than using the keys from
     * phase 1, new keys are generated per the selected Diffie-Hellman algorithm (same as those listed above). Enum: "group1"
     * "group14" "group15" "group16" "group19" "group2" "group20" "group24" "group5"
     */
    public readonly phase2PfsGroup!: pulumi.Output<string>;
    /**
     * Purchase order number or identifier of a service.
     */
    public readonly poNumber!: pulumi.Output<string | undefined>;
    /**
     * The POP in which you want to provision the connection.
     */
    public readonly pop!: pulumi.Output<string>;
    /**
     * UUID of the published quote line with which this connection should be associated.
     */
    public readonly publishedQuoteLineUuid!: pulumi.Output<string | undefined>;
    /**
     * The pre-shared-key to use for authentication.
     */
    public readonly sharedKey!: pulumi.Output<string>;
    /**
     * The desired speed of the new connection. Enum: ["50Mbps" "100Mbps" "200Mbps" "300Mbps" "400Mbps" "500Mbps" "1Gbps"
     * "2Gbps"]
     */
    public readonly speed!: pulumi.Output<string>;
    /**
     * Subscription term of the Cloud Router Connection Enum: ["1", "12", "24", "36"] Defaults: 1
     */
    public readonly subscriptionTerm!: pulumi.Output<number | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.CloudRouterConnectionIpsecTimeouts | undefined>;

    /**
     * Create a CloudRouterConnectionIpsec resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CloudRouterConnectionIpsecArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CloudRouterConnectionIpsecArgs | CloudRouterConnectionIpsecState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CloudRouterConnectionIpsecState | undefined;
            resourceInputs["accountUuid"] = state ? state.accountUuid : undefined;
            resourceInputs["circuitId"] = state ? state.circuitId : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["etl"] = state ? state.etl : undefined;
            resourceInputs["gatewayAddress"] = state ? state.gatewayAddress : undefined;
            resourceInputs["ikeVersion"] = state ? state.ikeVersion : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["phase1AuthenticationAlgo"] = state ? state.phase1AuthenticationAlgo : undefined;
            resourceInputs["phase1AuthenticationMethod"] = state ? state.phase1AuthenticationMethod : undefined;
            resourceInputs["phase1EncryptionAlgo"] = state ? state.phase1EncryptionAlgo : undefined;
            resourceInputs["phase1Group"] = state ? state.phase1Group : undefined;
            resourceInputs["phase1Lifetime"] = state ? state.phase1Lifetime : undefined;
            resourceInputs["phase2AuthenticationAlgo"] = state ? state.phase2AuthenticationAlgo : undefined;
            resourceInputs["phase2EncryptionAlgo"] = state ? state.phase2EncryptionAlgo : undefined;
            resourceInputs["phase2Lifetime"] = state ? state.phase2Lifetime : undefined;
            resourceInputs["phase2PfsGroup"] = state ? state.phase2PfsGroup : undefined;
            resourceInputs["poNumber"] = state ? state.poNumber : undefined;
            resourceInputs["pop"] = state ? state.pop : undefined;
            resourceInputs["publishedQuoteLineUuid"] = state ? state.publishedQuoteLineUuid : undefined;
            resourceInputs["sharedKey"] = state ? state.sharedKey : undefined;
            resourceInputs["speed"] = state ? state.speed : undefined;
            resourceInputs["subscriptionTerm"] = state ? state.subscriptionTerm : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as CloudRouterConnectionIpsecArgs | undefined;
            if ((!args || args.accountUuid === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accountUuid'");
            }
            if ((!args || args.circuitId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'circuitId'");
            }
            if ((!args || args.description === undefined) && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if ((!args || args.gatewayAddress === undefined) && !opts.urn) {
                throw new Error("Missing required property 'gatewayAddress'");
            }
            if ((!args || args.ikeVersion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ikeVersion'");
            }
            if ((!args || args.phase1AuthenticationAlgo === undefined) && !opts.urn) {
                throw new Error("Missing required property 'phase1AuthenticationAlgo'");
            }
            if ((!args || args.phase1AuthenticationMethod === undefined) && !opts.urn) {
                throw new Error("Missing required property 'phase1AuthenticationMethod'");
            }
            if ((!args || args.phase1EncryptionAlgo === undefined) && !opts.urn) {
                throw new Error("Missing required property 'phase1EncryptionAlgo'");
            }
            if ((!args || args.phase1Group === undefined) && !opts.urn) {
                throw new Error("Missing required property 'phase1Group'");
            }
            if ((!args || args.phase1Lifetime === undefined) && !opts.urn) {
                throw new Error("Missing required property 'phase1Lifetime'");
            }
            if ((!args || args.phase2EncryptionAlgo === undefined) && !opts.urn) {
                throw new Error("Missing required property 'phase2EncryptionAlgo'");
            }
            if ((!args || args.phase2Lifetime === undefined) && !opts.urn) {
                throw new Error("Missing required property 'phase2Lifetime'");
            }
            if ((!args || args.phase2PfsGroup === undefined) && !opts.urn) {
                throw new Error("Missing required property 'phase2PfsGroup'");
            }
            if ((!args || args.pop === undefined) && !opts.urn) {
                throw new Error("Missing required property 'pop'");
            }
            if ((!args || args.sharedKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sharedKey'");
            }
            if ((!args || args.speed === undefined) && !opts.urn) {
                throw new Error("Missing required property 'speed'");
            }
            resourceInputs["accountUuid"] = args ? args.accountUuid : undefined;
            resourceInputs["circuitId"] = args ? args.circuitId : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["gatewayAddress"] = args ? args.gatewayAddress : undefined;
            resourceInputs["ikeVersion"] = args ? args.ikeVersion : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["phase1AuthenticationAlgo"] = args ? args.phase1AuthenticationAlgo : undefined;
            resourceInputs["phase1AuthenticationMethod"] = args ? args.phase1AuthenticationMethod : undefined;
            resourceInputs["phase1EncryptionAlgo"] = args ? args.phase1EncryptionAlgo : undefined;
            resourceInputs["phase1Group"] = args ? args.phase1Group : undefined;
            resourceInputs["phase1Lifetime"] = args ? args.phase1Lifetime : undefined;
            resourceInputs["phase2AuthenticationAlgo"] = args ? args.phase2AuthenticationAlgo : undefined;
            resourceInputs["phase2EncryptionAlgo"] = args ? args.phase2EncryptionAlgo : undefined;
            resourceInputs["phase2Lifetime"] = args ? args.phase2Lifetime : undefined;
            resourceInputs["phase2PfsGroup"] = args ? args.phase2PfsGroup : undefined;
            resourceInputs["poNumber"] = args ? args.poNumber : undefined;
            resourceInputs["pop"] = args ? args.pop : undefined;
            resourceInputs["publishedQuoteLineUuid"] = args ? args.publishedQuoteLineUuid : undefined;
            resourceInputs["sharedKey"] = args ? args.sharedKey : undefined;
            resourceInputs["speed"] = args ? args.speed : undefined;
            resourceInputs["subscriptionTerm"] = args ? args.subscriptionTerm : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["etl"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CloudRouterConnectionIpsec.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CloudRouterConnectionIpsec resources.
 */
export interface CloudRouterConnectionIpsecState {
    /**
     * The UUID for the billing account that should be billed. Can also be set with the PF_ACCOUNT_ID environment variable.
     */
    accountUuid?: pulumi.Input<string>;
    /**
     * Circuit ID of the target cloud router. This starts with "PF-L3-CUST-".
     */
    circuitId?: pulumi.Input<string>;
    /**
     * A brief description of this connection.
     */
    description?: pulumi.Input<string>;
    /**
     * Early Termination Liability (ETL) fees apply when terminating a service before its term ends. ETL is prorated to the
     * remaining contract days.
     */
    etl?: pulumi.Input<number>;
    /**
     * The gateway address of your VPN device. Because VPNs traverse the public internet, this must be a public IP address
     * owned by you.
     */
    gatewayAddress?: pulumi.Input<string>;
    /**
     * The Internet Key Exchange (IKE) version supported by your device. In most cases, this is v2 (v1 is deprecated). Enum: 1,
     * 2.
     */
    ikeVersion?: pulumi.Input<number>;
    /**
     * Label value linked to an object.
     */
    labels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The authentication algorithm to use during phase 1. Enum: "md5" "sha-256" "sha-384" "sha1"
     */
    phase1AuthenticationAlgo?: pulumi.Input<string>;
    /**
     * The authentication method to use during phase 1. For example, "pre-shared-key".
     */
    phase1AuthenticationMethod?: pulumi.Input<string>;
    /**
     * The encryption algorithm to use during phase 1. Enum: "3des-cbc" "aes-128-cbc" "aes-192-cbc" "aes-256-cbc" "des-cbc"
     */
    phase1EncryptionAlgo?: pulumi.Input<string>;
    /**
     * Phase 1 is when the VPN peers are authenticated and we establish security associations (SAs) to protect IKE messaging
     * between the two endpoints (which in this case is PacketFabric and your VPN device). This is also known as the IKE phase.
     * The Phase 1 group is the Diffie-Hellman (DH) algorithm used to create a shared secret between the endpoints. Enum:
     * "group1" "group14" "group15" "group16" "group19" "group2" "group20" "group24" "group5"
     */
    phase1Group?: pulumi.Input<string>;
    /**
     * The time in seconds before a tunnel will need to re-authenticate. The phase 1 lifetime should be equal to or longer than
     * phase 2. This can be between 180 and 86400.
     */
    phase1Lifetime?: pulumi.Input<number>;
    /**
     * The authentication algorithm to use during phase 2. It cannot be null if phase2_encryption_algo is CBC. Enum:
     * "hmac-md5-96" "hmac-sha-256-128" "hmac-sha1-96"
     */
    phase2AuthenticationAlgo?: pulumi.Input<string>;
    /**
     * The encryption algorithm to use during phase 2. Enum: "3des-cbc" "aes-128-cbc" "aes-128-gcm" "aes-192-cbc" "aes-192-gcm"
     * "aes-256-cbc" "aes-256-gcm" "des-cbc"
     */
    phase2EncryptionAlgo?: pulumi.Input<string>;
    /**
     * The time in seconds before phase 2 expires and needs to reauthenticate. We recommend that the phase 2 lifetime is equal
     * to or shorter than phase 1. This can be between 180 and 86400.
     */
    phase2Lifetime?: pulumi.Input<number>;
    /**
     * Phase 2 is when SAs are further established to protect and encrypt IP traffic within the tunnel. This is also known as
     * the IPsec phase. The PFS group is the Perfect Forward Secrecy group. This means that rather than using the keys from
     * phase 1, new keys are generated per the selected Diffie-Hellman algorithm (same as those listed above). Enum: "group1"
     * "group14" "group15" "group16" "group19" "group2" "group20" "group24" "group5"
     */
    phase2PfsGroup?: pulumi.Input<string>;
    /**
     * Purchase order number or identifier of a service.
     */
    poNumber?: pulumi.Input<string>;
    /**
     * The POP in which you want to provision the connection.
     */
    pop?: pulumi.Input<string>;
    /**
     * UUID of the published quote line with which this connection should be associated.
     */
    publishedQuoteLineUuid?: pulumi.Input<string>;
    /**
     * The pre-shared-key to use for authentication.
     */
    sharedKey?: pulumi.Input<string>;
    /**
     * The desired speed of the new connection. Enum: ["50Mbps" "100Mbps" "200Mbps" "300Mbps" "400Mbps" "500Mbps" "1Gbps"
     * "2Gbps"]
     */
    speed?: pulumi.Input<string>;
    /**
     * Subscription term of the Cloud Router Connection Enum: ["1", "12", "24", "36"] Defaults: 1
     */
    subscriptionTerm?: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.CloudRouterConnectionIpsecTimeouts>;
}

/**
 * The set of arguments for constructing a CloudRouterConnectionIpsec resource.
 */
export interface CloudRouterConnectionIpsecArgs {
    /**
     * The UUID for the billing account that should be billed. Can also be set with the PF_ACCOUNT_ID environment variable.
     */
    accountUuid: pulumi.Input<string>;
    /**
     * Circuit ID of the target cloud router. This starts with "PF-L3-CUST-".
     */
    circuitId: pulumi.Input<string>;
    /**
     * A brief description of this connection.
     */
    description: pulumi.Input<string>;
    /**
     * The gateway address of your VPN device. Because VPNs traverse the public internet, this must be a public IP address
     * owned by you.
     */
    gatewayAddress: pulumi.Input<string>;
    /**
     * The Internet Key Exchange (IKE) version supported by your device. In most cases, this is v2 (v1 is deprecated). Enum: 1,
     * 2.
     */
    ikeVersion: pulumi.Input<number>;
    /**
     * Label value linked to an object.
     */
    labels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The authentication algorithm to use during phase 1. Enum: "md5" "sha-256" "sha-384" "sha1"
     */
    phase1AuthenticationAlgo: pulumi.Input<string>;
    /**
     * The authentication method to use during phase 1. For example, "pre-shared-key".
     */
    phase1AuthenticationMethod: pulumi.Input<string>;
    /**
     * The encryption algorithm to use during phase 1. Enum: "3des-cbc" "aes-128-cbc" "aes-192-cbc" "aes-256-cbc" "des-cbc"
     */
    phase1EncryptionAlgo: pulumi.Input<string>;
    /**
     * Phase 1 is when the VPN peers are authenticated and we establish security associations (SAs) to protect IKE messaging
     * between the two endpoints (which in this case is PacketFabric and your VPN device). This is also known as the IKE phase.
     * The Phase 1 group is the Diffie-Hellman (DH) algorithm used to create a shared secret between the endpoints. Enum:
     * "group1" "group14" "group15" "group16" "group19" "group2" "group20" "group24" "group5"
     */
    phase1Group: pulumi.Input<string>;
    /**
     * The time in seconds before a tunnel will need to re-authenticate. The phase 1 lifetime should be equal to or longer than
     * phase 2. This can be between 180 and 86400.
     */
    phase1Lifetime: pulumi.Input<number>;
    /**
     * The authentication algorithm to use during phase 2. It cannot be null if phase2_encryption_algo is CBC. Enum:
     * "hmac-md5-96" "hmac-sha-256-128" "hmac-sha1-96"
     */
    phase2AuthenticationAlgo?: pulumi.Input<string>;
    /**
     * The encryption algorithm to use during phase 2. Enum: "3des-cbc" "aes-128-cbc" "aes-128-gcm" "aes-192-cbc" "aes-192-gcm"
     * "aes-256-cbc" "aes-256-gcm" "des-cbc"
     */
    phase2EncryptionAlgo: pulumi.Input<string>;
    /**
     * The time in seconds before phase 2 expires and needs to reauthenticate. We recommend that the phase 2 lifetime is equal
     * to or shorter than phase 1. This can be between 180 and 86400.
     */
    phase2Lifetime: pulumi.Input<number>;
    /**
     * Phase 2 is when SAs are further established to protect and encrypt IP traffic within the tunnel. This is also known as
     * the IPsec phase. The PFS group is the Perfect Forward Secrecy group. This means that rather than using the keys from
     * phase 1, new keys are generated per the selected Diffie-Hellman algorithm (same as those listed above). Enum: "group1"
     * "group14" "group15" "group16" "group19" "group2" "group20" "group24" "group5"
     */
    phase2PfsGroup: pulumi.Input<string>;
    /**
     * Purchase order number or identifier of a service.
     */
    poNumber?: pulumi.Input<string>;
    /**
     * The POP in which you want to provision the connection.
     */
    pop: pulumi.Input<string>;
    /**
     * UUID of the published quote line with which this connection should be associated.
     */
    publishedQuoteLineUuid?: pulumi.Input<string>;
    /**
     * The pre-shared-key to use for authentication.
     */
    sharedKey: pulumi.Input<string>;
    /**
     * The desired speed of the new connection. Enum: ["50Mbps" "100Mbps" "200Mbps" "300Mbps" "400Mbps" "500Mbps" "1Gbps"
     * "2Gbps"]
     */
    speed: pulumi.Input<string>;
    /**
     * Subscription term of the Cloud Router Connection Enum: ["1", "12", "24", "36"] Defaults: 1
     */
    subscriptionTerm?: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.CloudRouterConnectionIpsecTimeouts>;
}
