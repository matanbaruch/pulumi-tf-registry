// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface BackboneVirtualCircuitBandwidth {
    /**
     * The UUID for the billing account that should be billed. Can also be set with the PF_ACCOUNT_ID environment variable.
     */
    accountUuid: string;
    /**
     * Dedicated (no limits or additional charges), usage-based (per transferred GB) or hourly billing. Not applicable for Metro Dedicated.
     *
     * 	Enum ["dedicated" "usage" "hourly"]
     */
    longhaulType?: string;
    /**
     * The desired speed of the new connection. Only applicable if `longhaul_type` is "dedicated" or "hourly".
     *
     * 	Enum: ["50Mbps" "100Mbps" "200Mbps" "300Mbps" "400Mbps" "500Mbps" "1Gbps" "2Gbps" "5Gbps" "10Gbps" "20Gbps" "30Gbps" "40Gbps" "50Gbps" "60Gbps" "80Gbps" "100Gbps"]
     */
    speed?: string;
    /**
     * The billing term, in months, for this connection. Only applicable if `longhaul_type` is "dedicated."
     *
     * 	Enum: ["1", "12", "24", "36"]
     */
    subscriptionTerm?: number;
}

export interface BackboneVirtualCircuitInterfaceA {
    /**
     * The circuit ID for the port. This starts with "PF-AP-"
     */
    portCircuitId: string;
    /**
     * Valid sVLAN range is from 4-4094, inclusive. Defaults: 0
     */
    svlan?: number;
    /**
     * Whether the interface should be untagged. Defaults: false
     */
    untagged?: boolean;
    /**
     * Valid VLAN range is from 4-4094, inclusive. Defaults: 0
     */
    vlan?: number;
}

export interface BackboneVirtualCircuitInterfaceZ {
    /**
     * The circuit ID for the port. This starts with "PF-AP-"
     */
    portCircuitId: string;
    /**
     * Valid sVLAN range is from 4-4094, inclusive. Defaults: 0
     */
    svlan?: number;
    /**
     * Whether the interface should be untagged. Defaults: false
     */
    untagged?: boolean;
    /**
     * Valid VLAN range is from 4-4094, inclusive. Defaults: 0
     */
    vlan?: number;
}

export interface BackboneVirtualCircuitMarketplaceBandwidth {
    /**
     * The UUID for the billing account that should be billed. Can also be set with the PF_ACCOUNT_ID environment variable.
     */
    accountUuid: string;
    /**
     * Dedicated (no limits or additional charges), usage-based (per transferred GB) or hourly billing. Not applicable for Metro Dedicated.
     *
     * 	Enum ["dedicated" "usage" "hourly"]
     */
    longhaulType?: string;
    /**
     * The desired speed of the new connection. Only applicable if `longhaul_type` is "dedicated" or "hourly".
     *
     * 	Enum: ["50Mbps" "100Mbps" "200Mbps" "300Mbps" "400Mbps" "500Mbps" "1Gbps" "2Gbps" "5Gbps" "10Gbps" "20Gbps" "30Gbps" "40Gbps" "50Gbps" "60Gbps" "80Gbps" "100Gbps"]
     */
    speed?: string;
    /**
     * The billing term in months. Only applicable if `longhaul_type` is "dedicated."
     *
     * 	Enum: ["1", "12", "24", "36"]
     */
    subscriptionTerm?: number;
}

export interface BackboneVirtualCircuitMarketplaceInterface {
    /**
     * The circuit ID for the port. This starts with "PF-AP-"
     */
    portCircuitId: string;
    /**
     * Whether the interface should be untagged.
     */
    untagged: boolean;
    /**
     * Valid VLAN range is from 4-4094, inclusive.
     */
    vlan: number;
}

export interface BackboneVirtualCircuitMarketplaceTimeouts {
    create?: string;
    delete?: string;
    read?: string;
}

export interface BackboneVirtualCircuitSpeedBurstTimeouts {
    create?: string;
    delete?: string;
    read?: string;
}

export interface BackboneVirtualCircuitTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface CloudRouterBgpSessionNat {
    /**
     * If using NAT overload, the direction of the NAT connection (input=ingress, output=egress). 
     * 		Enum: output, input. Defaults: output
     */
    direction?: string;
    /**
     * Translate the destination IP address.
     */
    dnatMappings?: outputs.CloudRouterBgpSessionNatDnatMapping[];
    /**
     * The NAT type of the NAT connection, source NAT (overload) or destination NAT (inline_dnat). 
     * 		Enum: overload, inline_dnat. Defaults: overload
     */
    natType?: string;
    /**
     * If using NAT overload, all prefixes that are NATed on this connection will be translated to the pool prefix address.
     *
     * 	Example: 10.0.0.0/32
     */
    poolPrefixes?: string[];
    /**
     * If using NAT overload, this is the prefixes from the cloud that you want to associate with the NAT pool.
     *
     * 	Example: 10.0.0.0/24
     */
    preNatSources?: string[];
}

export interface CloudRouterBgpSessionNatDnatMapping {
    /**
     * Post-translation prefix must be equal to or included within the conditional IP prefix.
     */
    conditionalPrefix?: string;
    /**
     * Post-translation IP prefix.
     */
    privatePrefix: string;
    /**
     * Pre-translation IP prefix.
     */
    publicPrefix: string;
}

export interface CloudRouterBgpSessionPrefix {
    /**
     * The BGP prepend value of this prefix. It is used when type = out.
     *
     * 	Available range is 1 through 5. Defaults: 0
     */
    asPrepend?: number;
    /**
     * The local_preference of this prefix. It is used when type = in.
     *
     * 	Available range is 1 through 4294967295. Defaults: 0
     */
    localPreference?: number;
    /**
     * The match type of this prefix.
     *
     * 	Enum: `"exact"` `"orlonger"`
     */
    matchType?: string;
    /**
     * The MED of this prefix. It is used when type = out.
     *
     * 	Available range is 1 through 4294967295. Defaults: 0
     */
    med?: number;
    /**
     * The actual IP Prefix of this instance.
     */
    prefix: string;
    /**
     * Whether this prefix is in (Allowed Prefixes from Cloud) or out (Allowed Prefixes to Cloud).
     * 		Enum: in, out.
     */
    type: string;
}

export interface CloudRouterBgpSessionTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface CloudRouterConnectionAwsCloudSettings {
    /**
     * Only for Private or Transit VIF.
     */
    awsGateways?: outputs.CloudRouterConnectionAwsCloudSettingsAwsGateway[];
    /**
     * The AWS region that should be used.
     */
    awsRegion?: string;
    /**
     * The type of VIF to use for this connection.
     */
    awsVifType: string;
    bgpSettings: outputs.CloudRouterConnectionAwsCloudSettingsBgpSettings;
    /**
     * The UUID of the credentials to be used with this connection.
     */
    credentialsUuid: string;
    /**
     * Maximum Transmission Unit this port supports (size of the largest supported PDU).
     *
     * 	Enum: ["1500", "9001"] Defaults: 1500
     */
    mtu?: number;
}

export interface CloudRouterConnectionAwsCloudSettingsAwsGateway {
    /**
     * The ASN of the AWS Gateway to be used.
     */
    asn?: number;
    /**
     * The ID of the AWS Gateway to be used.
     */
    id?: string;
    /**
     * The name of the AWS Gateway, required if creating a new DirectConnect Gateway.
     */
    name?: string;
    /**
     * An array of subnet IDs to associate with this Gateway. Required for transit Gateways.
     */
    subnetIds?: string[];
    /**
     * The type of this AWS Gateway.
     */
    type: string;
    /**
     * The AWS VPC ID this Gateway should be associated with. Required for private and transit Gateways.
     */
    vpcId?: string;
}

export interface CloudRouterConnectionAwsCloudSettingsBgpSettings {
    /**
     * The BGP prepend value for this instance. It is used when type = out.
     *
     * 	Available range is 1 through 5. Defaults: 0
     */
    asPrepend?: number;
    /**
     * If you are using BFD, this is the interval (in milliseconds) at which to send test packets to peers.
     *
     * 	Available range is 3 through 30000. Defaults: 0
     */
    bfdInterval?: number;
    /**
     * If you are using BFD, this is the number of consecutive packets that can be lost before BFD considers a peer down and shuts down BGP.
     *
     * 	Available range is 2 through 16. Defaults: 0
     */
    bfdMultiplier?: number;
    /**
     * Whether this BGP session is disabled. Defaults: false
     */
    disabled?: boolean;
    /**
     * The prefix of the customer router. Required for public VIFs.
     */
    l3Address?: string;
    /**
     * The local preference for this instance. When the same route is received in multiple locations, those with a higher local preference value are preferred by the cloud router. It is used when type = in.
     *
     * 	Available range is 1 through 4294967295. Defaults: 0
     */
    localPreference?: number;
    /**
     * The MD5 value of the authenticated BGP sessions. Required for AWS.
     */
    md5?: string;
    /**
     * The Multi-Exit Discriminator of this instance. When the same route is advertised in multiple locations, those with a lower MED are preferred by the peer AS. It is used when type = out.
     *
     * 	Available range is 1 through 4294967295. Defaults: 0
     */
    med?: number;
    /**
     * Translate the source or destination IP address.
     */
    nat?: outputs.CloudRouterConnectionAwsCloudSettingsBgpSettingsNat;
    /**
     * Whether to use exact match or longer for all prefixes. Defaults: false
     */
    orlonger?: boolean;
    /**
     * The list of BGP prefixes
     */
    prefixes: outputs.CloudRouterConnectionAwsCloudSettingsBgpSettingsPrefix[];
    /**
     * The prefix of the remote router. Required for public VIFs.
     */
    remoteAddress?: string;
}

export interface CloudRouterConnectionAwsCloudSettingsBgpSettingsNat {
    /**
     * If using NAT overload, the direction of the NAT connection (input=ingress, output=egress). 
     * 		Enum: output, input. Defaults: output
     */
    direction?: string;
    /**
     * Translate the destination IP address.
     */
    dnatMappings?: outputs.CloudRouterConnectionAwsCloudSettingsBgpSettingsNatDnatMapping[];
    /**
     * The NAT type of the NAT connection, source NAT (overload) or destination NAT (inline_dnat). 
     * 		Enum: overload, inline_dnat. Defaults: overload
     */
    natType?: string;
    /**
     * If using NAT overload, all prefixes that are NATed on this connection will be translated to the pool prefix address.
     *
     * 	Example: 10.0.0.0/32
     */
    poolPrefixes?: string[];
    /**
     * If using NAT overload, this is the prefixes from the cloud that you want to associate with the NAT pool.
     *
     * 	Example: 10.0.0.0/24
     */
    preNatSources?: string[];
}

export interface CloudRouterConnectionAwsCloudSettingsBgpSettingsNatDnatMapping {
    /**
     * Post-translation prefix must be equal to or included within the conditional IP prefix.
     */
    conditionalPrefix?: string;
    /**
     * Post-translation IP prefix.
     */
    privatePrefix: string;
    /**
     * Pre-translation IP prefix.
     */
    publicPrefix: string;
}

export interface CloudRouterConnectionAwsCloudSettingsBgpSettingsPrefix {
    /**
     * The BGP prepend value of this prefix. It is used when type = out.
     *
     * 	Available range is 1 through 5. Defaults: 0
     */
    asPrepend?: number;
    /**
     * The local_preference of this prefix. It is used when type = in.
     *
     * 	Available range is 1 through 4294967295. Defaults: 0
     */
    localPreference?: number;
    /**
     * The match type of this prefix.
     *
     * 	Enum: `"exact"` `"orlonger"`
     */
    matchType?: string;
    /**
     * The MED of this prefix. It is used when type = out.
     *
     * 	Available range is 1 through 4294967295. Defaults: 0
     */
    med?: number;
    /**
     * The actual IP Prefix of this instance.
     */
    prefix: string;
    /**
     * Whether this prefix is in (Allowed Prefixes from Cloud) or out (Allowed Prefixes to Cloud).
     * 		Enum: in, out.
     */
    type: string;
}

export interface CloudRouterConnectionAwsTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface CloudRouterConnectionAzureTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface CloudRouterConnectionGoogleCloudSettings {
    bgpSettings: outputs.CloudRouterConnectionGoogleCloudSettingsBgpSettings;
    /**
     * The UUID of the credentials to be used with this connection.
     */
    credentialsUuid: string;
    /**
     * The Google Cloud Router Attachment name. No whitespace allowed.
     */
    googleCloudRouterName: string;
    /**
     * The Google Edge Availability Domain. Must be 1 (primary) or 2 (secondary).
     *
     * 	Enum: ["1", "2"] Defaults: 1
     */
    googleEdgeAvailabilityDomain?: number;
    /**
     * The Google pairing key to use for this connection. This is provided when you create the VLAN attachment from the Google Cloud console. Required if not using cloud_settings.
     */
    googlePairingKey: string;
    /**
     * The Google Project Id to be used. If not present the project id of the credentials will be used.
     */
    googleProjectId?: string;
    /**
     * The Google region that should be used.
     *
     * 	Enum: ["asia-east1", "asia-east2", "asia-northeast1", "asia-northeast2", "asia-northeast3", "asia-south1", "asia-southeast1", "asia-southeast2", "australia-southeast1", "europe-north1", "europe-west1", "europe-west2", "europe-west3", "europe-west4", "europe-west6", "northamerica-northeast1", "southamerica-east1", "us-central1", "us-east1", "us-east4", "us-west1", "us-west2", "us-west3", "us-west4"]
     */
    googleRegion: string;
    /**
     * The Google Interconnect Attachment name. No whitespace allowed.
     */
    googleVlanAttachmentName: string;
    /**
     * The Google VPC name. Required if a new router needs to be created.
     */
    googleVpcName?: string;
    /**
     * Maximum Transmission Unit this port supports (size of the largest supported PDU).
     *
     * 	Enum: ["1500", "1440"] Defaults: 1500
     */
    mtu?: number;
}

export interface CloudRouterConnectionGoogleCloudSettingsBgpSettings {
    /**
     * The BGP prepend value for this instance. It is used when type = out.
     *
     * 	Available range is 1 through 5. Defaults: 0
     */
    asPrepend?: number;
    /**
     * If you are using BFD, this is the interval (in milliseconds) at which to send test packets to peers.
     *
     * 	Available range is 3 through 30000. Defaults: 0
     */
    bfdInterval?: number;
    /**
     * If you are using BFD, this is the number of consecutive packets that can be lost before BFD considers a peer down and shuts down BGP.
     *
     * 	Available range is 2 through 16. Defaults: 0
     */
    bfdMultiplier?: number;
    /**
     * Whether this BGP session is disabled. Defaults: false
     */
    disabled?: boolean;
    /**
     * The Keepalive Interval. Must be between 20 and 60. Defaults: 20
     */
    googleKeepaliveInterval?: number;
    /**
     * The local preference for this instance. When the same route is received in multiple locations, those with a higher local preference value are preferred by the cloud router. It is used when type = in.
     *
     * 	Available range is 1 through 4294967295. Defaults: 0
     */
    localPreference?: number;
    /**
     * The MD5 value of the authenticated BGP sessions. Required for AWS.
     */
    md5?: string;
    /**
     * The Multi-Exit Discriminator of this instance. When the same route is advertised in multiple locations, those with a lower MED are preferred by the peer AS. It is used when type = out.
     *
     * 	Available range is 1 through 4294967295. Defaults: 0
     */
    med?: number;
    /**
     * Translate the source or destination IP address.
     */
    nat?: outputs.CloudRouterConnectionGoogleCloudSettingsBgpSettingsNat;
    /**
     * Whether to use exact match or longer for all prefixes. Defaults: false
     */
    orlonger?: boolean;
    /**
     * The list of BGP prefixes
     */
    prefixes: outputs.CloudRouterConnectionGoogleCloudSettingsBgpSettingsPrefix[];
    /**
     * The Google ASN of this connection. Must be 16550, between 64512 and 65534, or between 4200000000 and 4294967294.Defaults: 16550
     */
    remoteAsn?: number;
}

export interface CloudRouterConnectionGoogleCloudSettingsBgpSettingsNat {
    /**
     * If using NAT overload, the direction of the NAT connection (input=ingress, output=egress). 
     * 		Enum: output, input. Defaults: output
     */
    direction?: string;
    /**
     * Translate the destination IP address.
     */
    dnatMappings?: outputs.CloudRouterConnectionGoogleCloudSettingsBgpSettingsNatDnatMapping[];
    /**
     * The NAT type of the NAT connection, source NAT (overload) or destination NAT (inline_dnat). 
     * 		Enum: overload, inline_dnat. Defaults: overload
     */
    natType?: string;
    /**
     * If using NAT overload, all prefixes that are NATed on this connection will be translated to the pool prefix address.
     *
     * 	Example: 10.0.0.0/32
     */
    poolPrefixes?: string[];
    /**
     * If using NAT overload, this is the prefixes from the cloud that you want to associate with the NAT pool.
     *
     * 	Example: 10.0.0.0/24
     */
    preNatSources?: string[];
}

export interface CloudRouterConnectionGoogleCloudSettingsBgpSettingsNatDnatMapping {
    /**
     * Post-translation prefix must be equal to or included within the conditional IP prefix.
     */
    conditionalPrefix?: string;
    /**
     * Post-translation IP prefix.
     */
    privatePrefix: string;
    /**
     * Pre-translation IP prefix.
     */
    publicPrefix: string;
}

export interface CloudRouterConnectionGoogleCloudSettingsBgpSettingsPrefix {
    /**
     * The BGP prepend value of this prefix. It is used when type = out.
     *
     * 	Available range is 1 through 5. Defaults: 0
     */
    asPrepend?: number;
    /**
     * The local_preference of this prefix. It is used when type = in.
     *
     * 	Available range is 1 through 4294967295. Defaults: 0
     */
    localPreference?: number;
    /**
     * The match type of this prefix.
     *
     * 	Enum: `"exact"` `"orlonger"`
     */
    matchType?: string;
    /**
     * The MED of this prefix. It is used when type = out.
     *
     * 	Available range is 1 through 4294967295. Defaults: 0
     */
    med?: number;
    /**
     * The actual IP Prefix of this instance.
     */
    prefix: string;
    /**
     * Whether this prefix is in (Allowed Prefixes from Cloud) or out (Allowed Prefixes to Cloud).
     * 		Enum: in, out.
     */
    type: string;
}

export interface CloudRouterConnectionGoogleTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface CloudRouterConnectionIbmTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface CloudRouterConnectionIpsecTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface CloudRouterConnectionOracleTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface CloudRouterConnectionPortTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface CloudRouterQuickConnectImportFilter {
    /**
     * The local preference to apply to the prefix.
     *
     * 	Available range is 1 through 4294967295. Defaults: 0
     */
    localPreference?: number;
    /**
     * The match type for the imported prefix. This is set by the service provider.
     *
     * 	Enum: `"exact"` `"orlonger"`
     */
    matchType: string;
    /**
     * The route prefix that you will be importing from the Quick Connect. This is set by the service provider.
     */
    prefix: string;
}

export interface CloudRouterQuickConnectReturnFilter {
    /**
     * The AS prepend to apply to the exported/returned prefix.
     *
     * 	Available range is 1 through 5. Defaults: 0
     */
    asPrepend?: number;
    /**
     * The match type of this prefix.
     *
     * 	Enum: `"exact"` `"orlonger"` Defaults: exact
     */
    matchType?: string;
    /**
     * The MED to apply to the exported/returned prefix.
     *
     * 	Available range is 1 through 4294967295. Defaults: 0
     */
    med?: number;
    /**
     * The prefix to export to the service provider that they will use for return traffic.
     */
    prefix: string;
}

export interface CloudRouterQuickConnectTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface CloudRouterTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface CsAwsDedicatedConnectionTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface CsAwsHostedConnectionCloudSettings {
    /**
     * Only for Private or Transit VIF.
     */
    awsGateways?: outputs.CsAwsHostedConnectionCloudSettingsAwsGateway[];
    /**
     * The AWS region that should be used.
     */
    awsRegion?: string;
    /**
     * The type of VIF to use for this connection.
     */
    awsVifType: string;
    bgpSettings: outputs.CsAwsHostedConnectionCloudSettingsBgpSettings;
    /**
     * The UUID of the credentials to be used with this connection.
     */
    credentialsUuid: string;
    /**
     * Maximum Transmission Unit this port supports (size of the largest supported PDU).
     *
     * 	Enum: ["1500", "9001"] Defaults: 1500
     */
    mtu?: number;
}

export interface CsAwsHostedConnectionCloudSettingsAwsGateway {
    /**
     * An array of allowed prefixes. Required on the DirectConnect Gateway when the other Gateway is of type transit.
     */
    allowedPrefixes?: string[];
    /**
     * The ASN of the AWS Gateway to be used.
     */
    asn?: number;
    /**
     * The ID of the AWS Gateway to be used.
     */
    id?: string;
    /**
     * The name of the AWS Gateway, required if creating a new DirectConnect Gateway.
     */
    name?: string;
    /**
     * An array of subnet IDs to associate with this Gateway. Required for transit Gateways.
     */
    subnetIds?: string[];
    /**
     * The type of this AWS Gateway.
     */
    type: string;
    /**
     * The AWS VPC ID this Gateway should be associated with. Required for private and transit Gateways.
     */
    vpcId?: string;
}

export interface CsAwsHostedConnectionCloudSettingsBgpSettings {
    /**
     * The address family that should be used. Defaults: ipv4
     */
    addressFamily?: string;
    /**
     * An array of prefixes that will be advertised. Required for public VIFs.
     */
    advertisedPrefixes?: string[];
    /**
     * The customer ASN of this connection.
     */
    customerAsn: number;
    /**
     * The prefix of the customer router. Required for public VIFs.
     */
    l3Address?: string;
    /**
     * The MD5 value of the authenticated BGP sessions.
     */
    md5?: string;
    /**
     * The prefix of the remote router. Required for public VIFs.
     */
    remoteAddress?: string;
}

export interface CsAwsHostedConnectionTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface CsAwsHostedMarketplaceConnectionTimeouts {
    create?: string;
    delete?: string;
    read?: string;
}

export interface CsAzureDedicatedConnectionTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface CsAzureHostedConnectionTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface CsAzureHostedMarketplaceConnectionTimeouts {
    create?: string;
    delete?: string;
    read?: string;
}

export interface CsGoogleDedicatedConnectionTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface CsGoogleHostedConnectionCloudSettings {
    bgpSettings: outputs.CsGoogleHostedConnectionCloudSettingsBgpSettings;
    /**
     * The UUID of the credentials to be used with this connection.
     */
    credentialsUuid: string;
    /**
     * The Google Cloud Router Attachment name. No whitespace allowed.
     */
    googleCloudRouterName: string;
    /**
     * The Google Edge Availability Domain. Must be 1 (primary) or 2 (secondary).
     *
     * 	Enum: ["1", "2"] Defaults: 1
     */
    googleEdgeAvailabilityDomain?: number;
    /**
     * The Google Project Id to be used. If not present the project id of the credentials will be used.
     */
    googleProjectId?: string;
    /**
     * The Google region that should be used.
     *
     * 	Enum: ["asia-east1", "asia-east2", "asia-northeast1", "asia-northeast2", "asia-northeast3", "asia-south1", "asia-southeast1", "asia-southeast2", "australia-southeast1", "europe-north1", "europe-west1", "europe-west2", "europe-west3", "europe-west4", "europe-west6", "northamerica-northeast1", "southamerica-east1", "us-central1", "us-east1", "us-east4", "us-west1", "us-west2", "us-west3", "us-west4"]
     */
    googleRegion: string;
    /**
     * The Google Interconnect Attachment name. No whitespace allowed.
     */
    googleVlanAttachmentName: string;
    /**
     * The Google VPC name. Required if a new router needs to be created.
     */
    googleVpcName?: string;
    /**
     * Maximum Transmission Unit this port supports (size of the largest supported PDU).
     *
     * 	Enum: ["1500", "1440"] Defaults: 1500
     */
    mtu?: number;
}

export interface CsGoogleHostedConnectionCloudSettingsBgpSettings {
    /**
     * The customer ASN of this connection.
     */
    customerAsn: number;
    /**
     * An array of prefixes that will be advertised. Advertise Mode set to DEFAULT if not set.
     */
    googleAdvertisedIpRanges?: string[];
    /**
     * The Keepalive Interval. Must be between 20 and 60. Defaults: 20
     */
    googleKeepaliveInterval?: number;
    /**
     * The MD5 value of the authenticated BGP sessions.
     */
    md5?: string;
    /**
     * The Google ASN of this connection. Must be 16550, between 64512 and 65534, or between 4200000000 and 4294967294.Defaults: 16550
     */
    remoteAsn?: number;
}

export interface CsGoogleHostedConnectionTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface CsGoogleHostedMarketplaceConnectionTimeouts {
    create?: string;
    delete?: string;
    read?: string;
}

export interface CsIbmHostedConnectionTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface CsOracleHostedConnectionTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface CsOracleHostedMarketplaceConnectionTimeouts {
    create?: string;
    delete?: string;
    read?: string;
}

export interface DocumentTimeouts {
    create?: string;
    delete?: string;
    read?: string;
}

export interface FlexBandwidthTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface GetActivitylogsActivityLog {
    category: string;
    event: string;
    level: number;
    logLevelName: string;
    logUuid: string;
    message: string;
    timeCreated: string;
    user: string;
}

export interface GetBillingBilling {
    accountId: string;
    billables: outputs.GetBillingBillingBillable[];
    orderId: number;
    orderType: string;
    parentOrder: number;
    productDetails: outputs.GetBillingBillingProductDetail[];
    terms: outputs.GetBillingBillingTerm[];
}

export interface GetBillingBillingBillable {
    accountId: string;
    adjustedPrice: number;
    billableId: number;
    currencyCode: string;
    orderId: number;
    price: number;
    priceType: string;
}

export interface GetBillingBillingProductDetail {
    activeDate: string;
    bundleType: string;
    endDate: string;
    name: string;
    productId: number;
    translationId: number;
    vcServiceClass: string;
    vcType: string;
}

export interface GetBillingBillingTerm {
    commitmentEndDate: string;
    months: number;
    startDate: string;
    terminationDate: string;
}

export interface GetCloudRouterBgpSessionBgpSession {
    addressFamily: string;
    asPrepend: number;
    bfdInterval: number;
    bfdMultiplier: number;
    bgpSettingsUuid: string;
    bgpState: string;
    disabled: boolean;
    l3Address: string;
    localPreference: number;
    med: number;
    multihopTtl: number;
    nats: outputs.GetCloudRouterBgpSessionBgpSessionNat[];
    orlonger: boolean;
    prefixes: outputs.GetCloudRouterBgpSessionBgpSessionPrefix[];
    remoteAddress: string;
    remoteAsn: number;
    timeCreated: string;
    timeUpdated: string;
}

export interface GetCloudRouterBgpSessionBgpSessionNat {
    direction: string;
    dnatMappings: outputs.GetCloudRouterBgpSessionBgpSessionNatDnatMapping[];
    natType: string;
    poolPrefixes: string[];
    preNatSources: string[];
}

export interface GetCloudRouterBgpSessionBgpSessionNatDnatMapping {
    conditionalPrefix: string;
    privatePrefix: string;
    publicPrefix: string;
}

export interface GetCloudRouterBgpSessionBgpSessionPrefix {
    asPrepend: number;
    bgpPrefixUuid: string;
    localPreference: number;
    matchType: string;
    med: number;
    order: number;
    prefix: string;
    type: string;
}

export interface GetCloudRouterConnectionBgpStateList {
    bgpSettingsUuid: string;
    bgpState: string;
}

export interface GetCloudRouterConnectionCloudProvider {
    pop: string;
    site: string;
}

export interface GetCloudRouterConnectionCloudSetting {
    accountId: string;
    awsAccountId: string;
    awsConnectionId: string;
    awsHostedType: string;
    awsRegion: string;
    azureConnectionType: string;
    azureServiceKey: string;
    azureServiceTag: number;
    bgpAsn: number;
    bgpCerCidr: string;
    bgpIbmCidr: string;
    cloudStates: outputs.GetCloudRouterConnectionCloudSettingCloudState[];
    gatewayId: string;
    googlePairingKey: string;
    googleVlanAttachmentName: string;
    name: string;
    natPublicIp: string;
    oracleRegion: string;
    portCompartmentOcid: string;
    portCrossConnectOcid: string;
    portId: string;
    primaryPublicIp: string;
    publicIp: string;
    secondaryPublicIp: string;
    svlanIdCust: number;
    vcOcid: string;
    vlanIdCust: number;
    vlanIdMicrosoft: number;
    vlanIdPf: number;
    vlanIdPrivate: number;
}

export interface GetCloudRouterConnectionCloudSettingCloudState {
    awsDxConnectionState: string;
    awsDxPortEncryptionStatus: string;
    awsVifState: string;
    bgpState: string;
    googleInterconnectAdminEnabled: boolean;
    googleInterconnectState: string;
}

export interface GetCloudRouterConnectionsCloudConnection {
    accountUuid: string;
    bgpStateLists: outputs.GetCloudRouterConnectionsCloudConnectionBgpStateList[];
    cloudCircuitId: string;
    cloudProviderConnectionId: string;
    cloudProviders: outputs.GetCloudRouterConnectionsCloudConnectionCloudProvider[];
    cloudRouterAsn: number;
    cloudRouterCircuitId: string;
    cloudRouterName: string;
    cloudSettings: outputs.GetCloudRouterConnectionsCloudConnectionCloudSetting[];
    connectionType: string;
    customerUuid: string;
    deleted: boolean;
    description: string;
    desiredNat: string;
    dnatCapable: boolean;
    natCapable: boolean;
    pendingDelete: boolean;
    pop: string;
    portCircuitId: string;
    portType: string;
    serviceClass: string;
    serviceProvider: string;
    serviceType: string;
    site: string;
    speed: string;
    state: string;
    subscriptionTerm: number;
    timeCreated: string;
    timeUpdated: string;
    userUuid: string;
    uuid: string;
    vlan: number;
    zone: string;
}

export interface GetCloudRouterConnectionsCloudConnectionBgpStateList {
    bgpSettingsUuid: string;
    bgpState: string;
}

export interface GetCloudRouterConnectionsCloudConnectionCloudProvider {
    pop: string;
    site: string;
}

export interface GetCloudRouterConnectionsCloudConnectionCloudSetting {
    accountId: string;
    awsAccountId: string;
    awsConnectionId: string;
    awsHostedType: string;
    awsRegion: string;
    azureConnectionType: string;
    azureServiceKey: string;
    azureServiceTag: number;
    bgpAsn: number;
    bgpCerCidr: string;
    bgpIbmCidr: string;
    cloudStates: outputs.GetCloudRouterConnectionsCloudConnectionCloudSettingCloudState[];
    gatewayId: string;
    googlePairingKey: string;
    googleVlanAttachmentName: string;
    name: string;
    natPublicIp: string;
    oracleRegion: string;
    portCompartmentOcid: string;
    portCrossConnectOcid: string;
    portId: string;
    primaryPublicIp: string;
    publicIp: string;
    secondaryPublicIp: string;
    svlanIdCust: number;
    vcOcid: string;
    vlanIdCust: number;
    vlanIdMicrosoft: number;
    vlanIdPf: number;
    vlanIdPrivate: number;
}

export interface GetCloudRouterConnectionsCloudConnectionCloudSettingCloudState {
    awsDxConnectionState: string;
    awsDxPortEncryptionStatus: string;
    awsVifState: string;
    bgpState: string;
    googleInterconnectAdminEnabled: boolean;
    googleInterconnectState: string;
}

export interface GetCloudRoutersCloudRouter {
    asn: number;
    capacity: string;
    name: string;
    regions: outputs.GetCloudRoutersCloudRouterRegion[];
    subscriptionTerm: number;
    timeCreated: string;
    timeUpdated: string;
}

export interface GetCloudRoutersCloudRouterRegion {
    code: string;
    name: string;
}

export interface GetCsAwsHostedConnectionCloudSetting {
    awsAccountId: string;
    awsConnectionId: string;
    awsDxAwsDevice: string;
    awsDxAwsLogicalDeviceId: string;
    awsDxBandwidth: string;
    awsDxEncryptionMode: string;
    awsDxHasLogicalRedundancy: boolean;
    awsDxJumboFrameCapable: boolean;
    awsDxLocation: string;
    awsDxMacSecCapable: boolean;
    awsHostedType: string;
    awsRegion: string;
    awsVifBgpPeerId: string;
    awsVifDirectConnectGwId: string;
    awsVifId: string;
    awsVifType: string;
    bgpSettings: outputs.GetCsAwsHostedConnectionCloudSettingBgpSetting[];
    cloudStates: outputs.GetCsAwsHostedConnectionCloudSettingCloudState[];
    credentialsUuid: string;
    googleCloudRouterName: string;
    googleDataplaneVersion: number;
    googleEdgeAvailabilityDomain: number;
    googleInterfaceName: string;
    googlePairingKey: string;
    googleProjectId: string;
    googleRegion: string;
    googleVlanAttachmentName: string;
    mtu: number;
    svlanIdCust: number;
    vlanIdCust: number;
    vlanIdPf: number;
}

export interface GetCsAwsHostedConnectionCloudSettingBgpSetting {
    addressFamily: string;
    advertisedPrefixes: string[];
    customerAsn: number;
    customerRouterIp: string;
    googleAdvertiseMode: string;
    googleAdvertisedIpRanges: string[];
    googleKeepaliveInterval: number;
    l3Address: string;
    md5: string;
    remoteAddress: string;
    remoteAsn: number;
    remoteRouterIp: string;
}

export interface GetCsAwsHostedConnectionCloudSettingCloudState {
    awsDxConnectionState: string;
    awsDxPortEncryptionStatus: string;
    awsVifState: string;
    bgpState: string;
    googleInterconnectAdminEnabled: boolean;
    googleInterconnectState: string;
}

export interface GetCsAwsHostedConnectionSetting {
    accountId: string;
    awsAccountId: string;
    awsConnectionId: string;
    awsHostedType: string;
    awsRegion: string;
    azureConnectionType: string;
    azureServiceKey: string;
    azureServiceTag: number;
    bgpAsn: number;
    bgpCerCidr: string;
    bgpIbmCidr: string;
    gatewayId: string;
    googlePairingKey: string;
    googleVlanAttachmentName: string;
    name: string;
    oracleRegion: string;
    portCompartmentOcid: string;
    portCrossConnectOcid: string;
    portId: string;
    svlanIdCust: number;
    vcOcid: string;
    vlanIdCust: number;
    vlanIdMicrosoft: number;
    vlanIdPf: number;
    vlanIdPrivate: number;
}

export interface GetCsAzureHostedConnectionCloudSetting {
    awsAccountId: string;
    awsConnectionId: string;
    awsDxAwsDevice: string;
    awsDxAwsLogicalDeviceId: string;
    awsDxBandwidth: string;
    awsDxEncryptionMode: string;
    awsDxHasLogicalRedundancy: boolean;
    awsDxJumboFrameCapable: boolean;
    awsDxLocation: string;
    awsDxMacSecCapable: boolean;
    awsHostedType: string;
    awsRegion: string;
    awsVifBgpPeerId: string;
    awsVifDirectConnectGwId: string;
    awsVifId: string;
    awsVifType: string;
    bgpSettings: outputs.GetCsAzureHostedConnectionCloudSettingBgpSetting[];
    cloudStates: outputs.GetCsAzureHostedConnectionCloudSettingCloudState[];
    credentialsUuid: string;
    googleCloudRouterName: string;
    googleDataplaneVersion: number;
    googleEdgeAvailabilityDomain: number;
    googleInterfaceName: string;
    googlePairingKey: string;
    googleProjectId: string;
    googleRegion: string;
    googleVlanAttachmentName: string;
    mtu: number;
    svlanIdCust: number;
    vlanIdCust: number;
    vlanIdPf: number;
}

export interface GetCsAzureHostedConnectionCloudSettingBgpSetting {
    addressFamily: string;
    advertisedPrefixes: string[];
    customerAsn: number;
    customerRouterIp: string;
    googleAdvertiseMode: string;
    googleAdvertisedIpRanges: string[];
    googleKeepaliveInterval: number;
    l3Address: string;
    md5: string;
    remoteAddress: string;
    remoteAsn: number;
    remoteRouterIp: string;
}

export interface GetCsAzureHostedConnectionCloudSettingCloudState {
    awsDxConnectionState: string;
    awsDxPortEncryptionStatus: string;
    awsVifState: string;
    bgpState: string;
    googleInterconnectAdminEnabled: boolean;
    googleInterconnectState: string;
}

export interface GetCsAzureHostedConnectionSetting {
    accountId: string;
    awsAccountId: string;
    awsConnectionId: string;
    awsHostedType: string;
    awsRegion: string;
    azureConnectionType: string;
    azureServiceKey: string;
    azureServiceTag: number;
    bgpAsn: number;
    bgpCerCidr: string;
    bgpIbmCidr: string;
    gatewayId: string;
    googlePairingKey: string;
    googleVlanAttachmentName: string;
    name: string;
    oracleRegion: string;
    portCompartmentOcid: string;
    portCrossConnectOcid: string;
    portId: string;
    svlanIdCust: number;
    vcOcid: string;
    vlanIdCust: number;
    vlanIdMicrosoft: number;
    vlanIdPf: number;
    vlanIdPrivate: number;
}

export interface GetCsDedicatedConnectionsDedicatedConnection {
    accountUuid: string;
    cloudCircuitId: string;
    cloudProviders: outputs.GetCsDedicatedConnectionsDedicatedConnectionCloudProvider[];
    customerUuid: string;
    deleted: boolean;
    description: string;
    isCloudRouterConnection: boolean;
    isLag: boolean;
    pop: string;
    portType: string;
    serviceClass: string;
    serviceProvider: string;
    settings: outputs.GetCsDedicatedConnectionsDedicatedConnectionSetting[];
    settingsAwsRegion: string;
    site: string;
    speed: string;
    state: string;
    timeCreated: string;
    timeUpdated: string;
    userUuid: string;
    uuid: string;
}

export interface GetCsDedicatedConnectionsDedicatedConnectionCloudProvider {
    pop: string;
    site: string;
}

export interface GetCsDedicatedConnectionsDedicatedConnectionSetting {
    autoneg: boolean;
    awsRegion: string;
    zoneDest: string;
}

export interface GetCsGoogleHostedConnectionCloudSetting {
    awsAccountId: string;
    awsConnectionId: string;
    awsDxAwsDevice: string;
    awsDxAwsLogicalDeviceId: string;
    awsDxBandwidth: string;
    awsDxEncryptionMode: string;
    awsDxHasLogicalRedundancy: boolean;
    awsDxJumboFrameCapable: boolean;
    awsDxLocation: string;
    awsDxMacSecCapable: boolean;
    awsHostedType: string;
    awsRegion: string;
    awsVifBgpPeerId: string;
    awsVifDirectConnectGwId: string;
    awsVifId: string;
    awsVifType: string;
    bgpSettings: outputs.GetCsGoogleHostedConnectionCloudSettingBgpSetting[];
    cloudStates: outputs.GetCsGoogleHostedConnectionCloudSettingCloudState[];
    credentialsUuid: string;
    googleCloudRouterName: string;
    googleDataplaneVersion: number;
    googleEdgeAvailabilityDomain: number;
    googleInterfaceName: string;
    googlePairingKey: string;
    googleProjectId: string;
    googleRegion: string;
    googleVlanAttachmentName: string;
    mtu: number;
    svlanIdCust: number;
    vlanIdCust: number;
    vlanIdPf: number;
}

export interface GetCsGoogleHostedConnectionCloudSettingBgpSetting {
    addressFamily: string;
    advertisedPrefixes: string[];
    customerAsn: number;
    customerRouterIp: string;
    googleAdvertiseMode: string;
    googleAdvertisedIpRanges: string[];
    googleKeepaliveInterval: number;
    l3Address: string;
    md5: string;
    remoteAddress: string;
    remoteAsn: number;
    remoteRouterIp: string;
}

export interface GetCsGoogleHostedConnectionCloudSettingCloudState {
    awsDxConnectionState: string;
    awsDxPortEncryptionStatus: string;
    awsVifState: string;
    bgpState: string;
    googleInterconnectAdminEnabled: boolean;
    googleInterconnectState: string;
}

export interface GetCsGoogleHostedConnectionSetting {
    accountId: string;
    awsAccountId: string;
    awsConnectionId: string;
    awsHostedType: string;
    awsRegion: string;
    azureConnectionType: string;
    azureServiceKey: string;
    azureServiceTag: number;
    bgpAsn: number;
    bgpCerCidr: string;
    bgpIbmCidr: string;
    gatewayId: string;
    googlePairingKey: string;
    googleVlanAttachmentName: string;
    name: string;
    oracleRegion: string;
    portCompartmentOcid: string;
    portCrossConnectOcid: string;
    portId: string;
    svlanIdCust: number;
    vcOcid: string;
    vlanIdCust: number;
    vlanIdMicrosoft: number;
    vlanIdPf: number;
    vlanIdPrivate: number;
}

export interface GetCsIbmHostedConnectionCloudSetting {
    awsAccountId: string;
    awsConnectionId: string;
    awsDxAwsDevice: string;
    awsDxAwsLogicalDeviceId: string;
    awsDxBandwidth: string;
    awsDxEncryptionMode: string;
    awsDxHasLogicalRedundancy: boolean;
    awsDxJumboFrameCapable: boolean;
    awsDxLocation: string;
    awsDxMacSecCapable: boolean;
    awsHostedType: string;
    awsRegion: string;
    awsVifBgpPeerId: string;
    awsVifDirectConnectGwId: string;
    awsVifId: string;
    awsVifType: string;
    bgpSettings: outputs.GetCsIbmHostedConnectionCloudSettingBgpSetting[];
    cloudStates: outputs.GetCsIbmHostedConnectionCloudSettingCloudState[];
    credentialsUuid: string;
    googleCloudRouterName: string;
    googleDataplaneVersion: number;
    googleEdgeAvailabilityDomain: number;
    googleInterfaceName: string;
    googlePairingKey: string;
    googleProjectId: string;
    googleRegion: string;
    googleVlanAttachmentName: string;
    mtu: number;
    svlanIdCust: number;
    vlanIdCust: number;
    vlanIdPf: number;
}

export interface GetCsIbmHostedConnectionCloudSettingBgpSetting {
    addressFamily: string;
    advertisedPrefixes: string[];
    customerAsn: number;
    customerRouterIp: string;
    googleAdvertiseMode: string;
    googleAdvertisedIpRanges: string[];
    googleKeepaliveInterval: number;
    l3Address: string;
    md5: string;
    remoteAddress: string;
    remoteAsn: number;
    remoteRouterIp: string;
}

export interface GetCsIbmHostedConnectionCloudSettingCloudState {
    awsDxConnectionState: string;
    awsDxPortEncryptionStatus: string;
    awsVifState: string;
    bgpState: string;
    googleInterconnectAdminEnabled: boolean;
    googleInterconnectState: string;
}

export interface GetCsIbmHostedConnectionSetting {
    accountId: string;
    awsAccountId: string;
    awsConnectionId: string;
    awsHostedType: string;
    awsRegion: string;
    azureConnectionType: string;
    azureServiceKey: string;
    azureServiceTag: number;
    bgpAsn: number;
    bgpCerCidr: string;
    bgpIbmCidr: string;
    gatewayId: string;
    googlePairingKey: string;
    googleVlanAttachmentName: string;
    name: string;
    oracleRegion: string;
    portCompartmentOcid: string;
    portCrossConnectOcid: string;
    portId: string;
    svlanIdCust: number;
    vcOcid: string;
    vlanIdCust: number;
    vlanIdMicrosoft: number;
    vlanIdPf: number;
    vlanIdPrivate: number;
}

export interface GetCsOracleHostedConnectionCloudSetting {
    awsAccountId: string;
    awsConnectionId: string;
    awsDxAwsDevice: string;
    awsDxAwsLogicalDeviceId: string;
    awsDxBandwidth: string;
    awsDxEncryptionMode: string;
    awsDxHasLogicalRedundancy: boolean;
    awsDxJumboFrameCapable: boolean;
    awsDxLocation: string;
    awsDxMacSecCapable: boolean;
    awsHostedType: string;
    awsRegion: string;
    awsVifBgpPeerId: string;
    awsVifDirectConnectGwId: string;
    awsVifId: string;
    awsVifType: string;
    bgpSettings: outputs.GetCsOracleHostedConnectionCloudSettingBgpSetting[];
    cloudStates: outputs.GetCsOracleHostedConnectionCloudSettingCloudState[];
    credentialsUuid: string;
    googleCloudRouterName: string;
    googleDataplaneVersion: number;
    googleEdgeAvailabilityDomain: number;
    googleInterfaceName: string;
    googlePairingKey: string;
    googleProjectId: string;
    googleRegion: string;
    googleVlanAttachmentName: string;
    mtu: number;
    svlanIdCust: number;
    vlanIdCust: number;
    vlanIdPf: number;
}

export interface GetCsOracleHostedConnectionCloudSettingBgpSetting {
    addressFamily: string;
    advertisedPrefixes: string[];
    customerAsn: number;
    customerRouterIp: string;
    googleAdvertiseMode: string;
    googleAdvertisedIpRanges: string[];
    googleKeepaliveInterval: number;
    l3Address: string;
    md5: string;
    remoteAddress: string;
    remoteAsn: number;
    remoteRouterIp: string;
}

export interface GetCsOracleHostedConnectionCloudSettingCloudState {
    awsDxConnectionState: string;
    awsDxPortEncryptionStatus: string;
    awsVifState: string;
    bgpState: string;
    googleInterconnectAdminEnabled: boolean;
    googleInterconnectState: string;
}

export interface GetCsOracleHostedConnectionSetting {
    accountId: string;
    awsAccountId: string;
    awsConnectionId: string;
    awsHostedType: string;
    awsRegion: string;
    azureConnectionType: string;
    azureServiceKey: string;
    azureServiceTag: number;
    bgpAsn: number;
    bgpCerCidr: string;
    bgpIbmCidr: string;
    gatewayId: string;
    googlePairingKey: string;
    googleVlanAttachmentName: string;
    name: string;
    oracleRegion: string;
    portCompartmentOcid: string;
    portCrossConnectOcid: string;
    portId: string;
    svlanIdCust: number;
    vcOcid: string;
    vlanIdCust: number;
    vlanIdMicrosoft: number;
    vlanIdPf: number;
    vlanIdPrivate: number;
}

export interface GetDocumentsDocument {
    _links: outputs.GetDocumentsDocument_Link[];
    description: string;
    mimeType: string;
    name: string;
    size: number;
    timeCreated: string;
    timeUpdated: string;
    type: string;
    uuid: string;
}

export interface GetDocumentsDocument_Link {
    cloud: string;
    cloudRouter: string;
    cloudRouterConnection: string;
    port: string;
    service: string;
}

export interface GetLinkAggregationGroupInterface {
    accountUuid: string;
    adminStatus: string;
    autoneg: boolean;
    customerName: string;
    customerUuid: string;
    description: string;
    disabled: boolean;
    isCloud: boolean;
    isLag: boolean;
    isLagMember: boolean;
    isNni: boolean;
    isPtp: boolean;
    lagInterval: string;
    market: string;
    marketDescription: string;
    media: string;
    memberCount: number;
    mtu: number;
    operationalStatus: string;
    parentLagCircuitId: string;
    pop: string;
    portCircuitId: string;
    region: string;
    site: string;
    siteCode: string;
    speed: string;
    state: string;
    status: string;
    subscriptionTerm: number;
    timeCreated: string;
    timeUpdated: string;
    vcMode: string;
    zone: string;
}

export interface GetLocationsCloudCloudLocation {
    address1: string;
    address2: string;
    city: string;
    cloudConnectionHostedType: string;
    cloudConnectionRegion: string;
    cloudConnectionRegionDescription: string;
    cloudProvider: string;
    country: string;
    enniSupported: boolean;
    latitude: string;
    leadTime: string;
    longitude: string;
    market: string;
    marketDescription: string;
    networkProvider: string;
    notes: string;
    pcode: number;
    pop: string;
    postal: string;
    region: string;
    singleArmed: boolean;
    site: string;
    siteCode: string;
    state: string;
    status: string;
    timeCreated: string;
    timezone: string;
    type: string;
    vendor: string;
    zones: string[];
}

export interface GetLocationsLocation {
    address1: string;
    address2: string;
    city: string;
    country: string;
    enniSupported: boolean;
    latitude: string;
    leadTime: string;
    longitude: string;
    market: string;
    marketDescription: string;
    networkProvider: string;
    notes: string;
    pcode: number;
    pop: string;
    postal: string;
    region: string;
    singleArmed: boolean;
    site: string;
    siteCode: string;
    state: string;
    status: string;
    timeCreated: string;
    timezone: string;
    type: string;
    vendor: string;
}

export interface GetLocationsMarketsLocationsMarket {
    code: string;
    country: string;
    name: string;
}

export interface GetLocationsPortAvailabilityPortsAvailable {
    count: number;
    enni: boolean;
    media: string;
    partial: boolean;
    speed: string;
    zone: string;
}

export interface GetLocationsRegionsLocationsRegion {
    code: string;
    name: string;
}

export interface GetMarketplaceServicePortRequestsVcRequest {
    allowUntaggedZ: boolean;
    bandwidths: outputs.GetMarketplaceServicePortRequestsVcRequestBandwidth[];
    flexBandwidthId: string;
    fromCustomers: outputs.GetMarketplaceServicePortRequestsVcRequestFromCustomer[];
    rateLimitIn: number;
    rateLimitOut: number;
    requestType: string;
    serviceName: string;
    status: string;
    text: string;
    timeCreated: string;
    timeUpdated: string;
    toCustomers: outputs.GetMarketplaceServicePortRequestsVcRequestToCustomer[];
    vcCircuitId: string;
    vcRequestUuid: string;
}

export interface GetMarketplaceServicePortRequestsVcRequestBandwidth {
    accountUuid: string;
    longhaulType: string;
    speed: string;
    subscriptionTerm: number;
}

export interface GetMarketplaceServicePortRequestsVcRequestFromCustomer {
    contactEmail: string;
    contactFirstName: string;
    contactLastName: string;
    contactPhone: string;
    customerUuid: string;
    market: string;
    marketDescription: string;
    name: string;
}

export interface GetMarketplaceServicePortRequestsVcRequestToCustomer {
    customerUuid: string;
    market: string;
    marketDescription: string;
    name: string;
}

export interface GetOutboundCrossConnectsOutboundCrossConnect {
    circuitId: string;
    dataCenterCrossConnectId: string;
    deleted: boolean;
    description: string;
    destinationCircuitId: string;
    destinationName: string;
    documentUuid: string;
    module: string;
    obccStatus: string;
    outboundCrossConnectId: string;
    panel: string;
    port: string;
    position: string;
    progress: number;
    site: string;
    timeCreated: string;
    timeUpdated: string;
    userDescription: string;
    zLocCfa: string;
}

export interface GetPointToPointsPointToPoint {
    billings: outputs.GetPointToPointsPointToPointBilling[];
    deleted: boolean;
    description: string;
    interfaces: outputs.GetPointToPointsPointToPointInterface[];
    media: string;
    ptpCircuitId: string;
    ptpUuid: string;
    serviceClass: string;
    speed: string;
    state: string;
    timeCreated: string;
    timeUpdated: string;
}

export interface GetPointToPointsPointToPointBilling {
    accountUuid: string;
    contractedSpeed: string;
    subscriptionTerm: number;
}

export interface GetPointToPointsPointToPointInterface {
    adminStatus: string;
    customerName: string;
    customerSiteCode: string;
    customerSiteName: string;
    customerUuid: string;
    description: string;
    isCloud: boolean;
    isPtp: boolean;
    media: string;
    operationalStatus: string;
    pop: string;
    portCircuitId: string;
    provisioningStatus: string;
    region: string;
    site: string;
    siteName: string;
    speed: string;
    timeCreated: string;
    timeUpdated: string;
    untagged: boolean;
    vlan: number;
    zone: string;
}

export interface GetPortRouterLogsPortRouterLog {
    deviceName: string;
    ifaceName: string;
    message: string;
    severity: number;
    severityName: string;
    timestamp: string;
}

export interface GetPortsInterface {
    accountUuid: string;
    adminStatus: string;
    autoneg: boolean;
    customerName: string;
    customerUuid: string;
    description: string;
    disabled: boolean;
    isCloud: boolean;
    isLag: boolean;
    isLagMember: boolean;
    isNni: boolean;
    isPtp: boolean;
    lagInterval: string;
    market: string;
    marketDescription: string;
    media: string;
    memberCount: number;
    mtu: number;
    operationalStatus: string;
    parentLagCircuitId: string;
    pop: string;
    portCircuitId: string;
    region: string;
    site: string;
    siteCode: string;
    speed: string;
    state: string;
    status: string;
    subscriptionTerm: number;
    timeCreated: string;
    timeUpdated: string;
    vcMode: string;
    zone: string;
}

export interface GetQuickConnectRequestsQuickConnectRequest {
    cloudRouterCircuitId: string;
    customerName: string;
    importCircuitId: string;
    importFilters: outputs.GetQuickConnectRequestsQuickConnectRequestImportFilter[];
    requestType: string;
    returnFilters: outputs.GetQuickConnectRequestsQuickConnectRequestReturnFilter[];
    serviceUuid: string;
    state: string;
    timeCreated: string;
    timeUpdated: string;
}

export interface GetQuickConnectRequestsQuickConnectRequestImportFilter {
    localPreference: number;
    matchType: string;
    prefix: string;
}

export interface GetQuickConnectRequestsQuickConnectRequestReturnFilter {
    asPrepend: number;
    matchType: string;
    med: number;
    pendingApproval: boolean;
    prefix: string;
}

export interface GetVirtualCircuitsBackboneService {
    bandwidths: outputs.GetVirtualCircuitsBackboneServiceBandwidth[];
    connected: boolean;
    customerUuid: string;
    description: string;
    flexBandwidthId: string;
    interfaces: outputs.GetVirtualCircuitsBackboneServiceInterface[];
    mode: string;
    rateLimitIn: number;
    rateLimitOut: number;
    serviceClass: string;
    serviceType: string;
    state: string;
    timeCreated: string;
    timeUpdated: string;
    vcCircuitId: string;
}

export interface GetVirtualCircuitsBackboneServiceBandwidth {
    accountUuid: string;
    longhaulType: string;
    speed: string;
    subscriptionTerm: number;
}

export interface GetVirtualCircuitsBackboneServiceInterface {
    adminStatus: string;
    customerName: string;
    customerSiteCode: string;
    customerSiteName: string;
    customerUuid: string;
    description: string;
    isCloud: boolean;
    isPtp: boolean;
    media: string;
    operationalStatus: string;
    pop: string;
    portCircuitId: string;
    provisioningStatus: string;
    region: string;
    site: string;
    siteName: string;
    speed: string;
    svlan: number;
    timeCreated: string;
    timeUpdated: string;
    untagged: boolean;
    vlan: number;
    zone: string;
}

export interface IxVirtualCircuitMarketplaceBandwidth {
    /**
     * The UUID for the billing account that should be billed. Can also be set with the PF_ACCOUNT_ID environment variable.
     */
    accountUuid: string;
    /**
     * Dedicated (no limits or additional charges), usage-based (per transferred GB) or hourly billing. Not applicable for Metro Dedicated.
     *
     * 	Enum ["dedicated" "usage" "hourly"]
     */
    longhaulType?: string;
    /**
     * The desired speed of the new connection. Only applicable if `longhaul_type` is "dedicated" or "hourly".
     *
     * 	Enum: ["50Mbps" "100Mbps" "200Mbps" "300Mbps" "400Mbps" "500Mbps" "1Gbps" "2Gbps" "5Gbps" "10Gbps" "20Gbps" "30Gbps" "40Gbps" "50Gbps" "60Gbps" "80Gbps" "100Gbps"]
     */
    speed?: string;
    /**
     * The billing term, in months, for this connection. Only applicable if `longhaul_type` is "dedicated."
     *
     * 	Enum: ["1", "12", "24", "36"]
     */
    subscriptionTerm?: number;
}

export interface IxVirtualCircuitMarketplaceInterface {
    /**
     * The circuit ID for the port. This starts with "PF-AP-"
     */
    portCircuitId: string;
    /**
     * Whether the interface should be untagged.
     */
    untagged: boolean;
    /**
     * Valid VLAN range is from 4-4094, inclusive.
     */
    vlan: number;
}

export interface IxVirtualCircuitMarketplaceTimeouts {
    create?: string;
    delete?: string;
    read?: string;
}

export interface LinkAggregationGroupTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface MarketplaceServicePortAcceptRequestInterface {
    /**
     * The circuit ID of the port on which you want to provision the request. This starts with "PF-AP-"
     */
    portCircuitId: string;
    /**
     * Valid S-VLAN range is from 4-4094, inclusive.
     */
    svlan?: number;
    /**
     * Whether the interface should be untagged.
     */
    untagged?: boolean;
    /**
     * Valid VLAN range is from 4-4094, inclusive.
     */
    vlan?: number;
    /**
     * For Microsoft Azure connections with Microsoft (public) peerings. Valid VLAN range is from 4-4094, inclusive.
     */
    vlanMicrosoft?: string;
    /**
     * For Microsoft Azure connections with private peerings. Valid VLAN range is from 4-4094, inclusive.
     */
    vlanPrivate?: string;
}

export interface MarketplaceServicePortAcceptRequestTimeouts {
    create?: string;
    delete?: string;
    read?: string;
}

export interface MarketplaceServicePortRejectRequestTimeouts {
    create?: string;
    delete?: string;
    read?: string;
}

export interface MarketplaceServiceRouteSet {
    /**
     * The route set's description.
     */
    description?: string;
    /**
     * In a private route set, the return traffic is private. In other words, in a public route set, anyone who imports this route set can also see other clients who are importing the route based on return traffic. Defaults: true
     */
    isPrivate?: boolean;
    prefixes?: outputs.MarketplaceServiceRouteSetPrefix[];
}

export interface MarketplaceServiceRouteSetPrefix {
    /**
     * The match type for this prefix. Options are: `"exact"` and `"orlonger"`.
     */
    matchType: string;
    /**
     * A prefix, in CIDR format, to include in this route set.
     */
    prefix: string;
}

export interface MarketplaceServiceTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface OutboundCrossConnectTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface PointToPointEndpoint {
    /**
     * Only applicable to 1Gbps ports. Controls whether auto negotiation is on (true) or off (false). The request will fail if specified with ports greater than 1Gbps.
     */
    autoneg: boolean;
    /**
     * Unique site code of the customer's equipment.
     */
    customerSiteCode?: string;
    /**
     * A base64 encoded string of a PDF of a LOA.
     */
    loa?: string;
    /**
     * Point of presence in which the port should be located.
     */
    pop: string;
    /**
     * The circuit ID for the port. This starts with "PF-AP-"
     */
    portCircuitId: string;
    /**
     * The desired availability zone of the port.
     *
     * 	Example: "A"
     */
    zone: string;
}

export interface PointToPointTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface PortLoaTimeouts {
    create?: string;
    delete?: string;
    read?: string;
}

export interface PortTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface QuickConnectAcceptRequestTimeouts {
    create?: string;
    delete?: string;
    read?: string;
}

export interface QuickConnectRejectRequestTimeouts {
    create?: string;
    delete?: string;
    read?: string;
}

export interface StreamingEventsStream {
    /**
     * Categories of events to subscribe to based on the type. If not specified, then all event categories are assumed.
     *
     * 	Enum: For "customer": [ "auth", "document", "lag_interface", "logical_interface", "physical_interface", "outbound_cross_connect", "point_to_point", "rate_limit", "user", "virtual_circuit" ]
     * 	Enum: For "port": [ "errors", "etherstats", "metrics", "optical" ]
     * 	Enum: For "vc": [ "metrics" ]
     */
    events?: string[];
    /**
     * Specific ports you wish to subscribe to, identified by port circuit IDs. If none are supplied, then all ports to which the customer has access are assumed.
     */
    ifds?: string[];
    /**
     * Type of events to subscribe to.
     *
     * 	Enum: ["customer", "port", "vc"]
     */
    type: string;
    /**
     * Specific logical interfaces you wish to subscribe to, each identified by a combination of the virtual circuit ID and port circuit ID associated with the logical interface. If none are supplied, then all logical interfaces to which the customer has access are assumed.
     */
    vcs?: string[];
}

export interface StreamingEventsTimeouts {
    create?: string;
    read?: string;
}

export interface UserTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

