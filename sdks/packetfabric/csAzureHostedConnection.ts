// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CsAzureHostedConnection extends pulumi.CustomResource {
    /**
     * Get an existing CsAzureHostedConnection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CsAzureHostedConnectionState, opts?: pulumi.CustomResourceOptions): CsAzureHostedConnection {
        return new CsAzureHostedConnection(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'packetfabric:index/csAzureHostedConnection:CsAzureHostedConnection';

    /**
     * Returns true if the given object is an instance of CsAzureHostedConnection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CsAzureHostedConnection {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CsAzureHostedConnection.__pulumiType;
    }

    /**
     * The UUID for the billing account that should be billed. Can also be set with the PF_ACCOUNT_ID environment variable.
     */
    public readonly accountUuid!: pulumi.Output<string>;
    /**
     * The Service Key provided by Microsoft Azure when you created your ExpressRoute circuit.
     */
    public readonly azureServiceKey!: pulumi.Output<string>;
    /**
     * A brief description of this connection.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * Early Termination Liability (ETL) fees apply when terminating a service before its term ends. ETL is prorated to the
     * remaining contract days.
     */
    public /*out*/ readonly etl!: pulumi.Output<number>;
    /**
     * Label value linked to an object.
     */
    public readonly labels!: pulumi.Output<string[] | undefined>;
    /**
     * Purchase order number or identifier of a service.
     */
    public readonly poNumber!: pulumi.Output<string | undefined>;
    /**
     * The circuit ID of the PacketFabric port you wish to connect to Azure. This starts with "PF-AP-".
     */
    public readonly port!: pulumi.Output<string>;
    /**
     * The peed of the new connection. Enum: ["50Mbps" "100Mbps" "200Mbps" "300Mbps" "400Mbps" "500Mbps" "1Gbps" "2Gbps"
     * "5Gbps" "10Gbps"]
     *
     * @deprecated Deprecated
     */
    public readonly speed!: pulumi.Output<string>;
    /**
     * Valid S-VLAN range is from 4-4094, inclusive.
     */
    public readonly srcSvlan!: pulumi.Output<number | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.CsAzureHostedConnectionTimeouts | undefined>;
    /**
     * The VLAN ID you are using for Microsoft peering. This is optional and is used to connect to Office 365. The VLAN ID must
     * be unique within the circuit (not used for any other peerings). Valid VLAN range is from 4-4094, inclusive.
     */
    public readonly vlanMicrosoft!: pulumi.Output<number | undefined>;
    /**
     * The VLAN ID you are using for private peering. You will use this when you configure peering in the Azure portal. The
     * VLAN ID must be unique within the circuit (not used for any other peerings). Valid VLAN range is from 4-4094, inclusive.
     * You must provide at least one VLAN (`vlan_microsoft`, `vlan_private`, or both).
     */
    public readonly vlanPrivate!: pulumi.Output<number | undefined>;

    /**
     * Create a CsAzureHostedConnection resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CsAzureHostedConnectionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CsAzureHostedConnectionArgs | CsAzureHostedConnectionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CsAzureHostedConnectionState | undefined;
            resourceInputs["accountUuid"] = state ? state.accountUuid : undefined;
            resourceInputs["azureServiceKey"] = state ? state.azureServiceKey : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["etl"] = state ? state.etl : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["poNumber"] = state ? state.poNumber : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["speed"] = state ? state.speed : undefined;
            resourceInputs["srcSvlan"] = state ? state.srcSvlan : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["vlanMicrosoft"] = state ? state.vlanMicrosoft : undefined;
            resourceInputs["vlanPrivate"] = state ? state.vlanPrivate : undefined;
        } else {
            const args = argsOrState as CsAzureHostedConnectionArgs | undefined;
            if ((!args || args.accountUuid === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accountUuid'");
            }
            if ((!args || args.azureServiceKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'azureServiceKey'");
            }
            if ((!args || args.description === undefined) && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if ((!args || args.port === undefined) && !opts.urn) {
                throw new Error("Missing required property 'port'");
            }
            if ((!args || args.speed === undefined) && !opts.urn) {
                throw new Error("Missing required property 'speed'");
            }
            resourceInputs["accountUuid"] = args ? args.accountUuid : undefined;
            resourceInputs["azureServiceKey"] = args ? args.azureServiceKey : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["poNumber"] = args ? args.poNumber : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["speed"] = args ? args.speed : undefined;
            resourceInputs["srcSvlan"] = args ? args.srcSvlan : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["vlanMicrosoft"] = args ? args.vlanMicrosoft : undefined;
            resourceInputs["vlanPrivate"] = args ? args.vlanPrivate : undefined;
            resourceInputs["etl"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CsAzureHostedConnection.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CsAzureHostedConnection resources.
 */
export interface CsAzureHostedConnectionState {
    /**
     * The UUID for the billing account that should be billed. Can also be set with the PF_ACCOUNT_ID environment variable.
     */
    accountUuid?: pulumi.Input<string>;
    /**
     * The Service Key provided by Microsoft Azure when you created your ExpressRoute circuit.
     */
    azureServiceKey?: pulumi.Input<string>;
    /**
     * A brief description of this connection.
     */
    description?: pulumi.Input<string>;
    /**
     * Early Termination Liability (ETL) fees apply when terminating a service before its term ends. ETL is prorated to the
     * remaining contract days.
     */
    etl?: pulumi.Input<number>;
    /**
     * Label value linked to an object.
     */
    labels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Purchase order number or identifier of a service.
     */
    poNumber?: pulumi.Input<string>;
    /**
     * The circuit ID of the PacketFabric port you wish to connect to Azure. This starts with "PF-AP-".
     */
    port?: pulumi.Input<string>;
    /**
     * The peed of the new connection. Enum: ["50Mbps" "100Mbps" "200Mbps" "300Mbps" "400Mbps" "500Mbps" "1Gbps" "2Gbps"
     * "5Gbps" "10Gbps"]
     *
     * @deprecated Deprecated
     */
    speed?: pulumi.Input<string>;
    /**
     * Valid S-VLAN range is from 4-4094, inclusive.
     */
    srcSvlan?: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.CsAzureHostedConnectionTimeouts>;
    /**
     * The VLAN ID you are using for Microsoft peering. This is optional and is used to connect to Office 365. The VLAN ID must
     * be unique within the circuit (not used for any other peerings). Valid VLAN range is from 4-4094, inclusive.
     */
    vlanMicrosoft?: pulumi.Input<number>;
    /**
     * The VLAN ID you are using for private peering. You will use this when you configure peering in the Azure portal. The
     * VLAN ID must be unique within the circuit (not used for any other peerings). Valid VLAN range is from 4-4094, inclusive.
     * You must provide at least one VLAN (`vlan_microsoft`, `vlan_private`, or both).
     */
    vlanPrivate?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a CsAzureHostedConnection resource.
 */
export interface CsAzureHostedConnectionArgs {
    /**
     * The UUID for the billing account that should be billed. Can also be set with the PF_ACCOUNT_ID environment variable.
     */
    accountUuid: pulumi.Input<string>;
    /**
     * The Service Key provided by Microsoft Azure when you created your ExpressRoute circuit.
     */
    azureServiceKey: pulumi.Input<string>;
    /**
     * A brief description of this connection.
     */
    description: pulumi.Input<string>;
    /**
     * Label value linked to an object.
     */
    labels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Purchase order number or identifier of a service.
     */
    poNumber?: pulumi.Input<string>;
    /**
     * The circuit ID of the PacketFabric port you wish to connect to Azure. This starts with "PF-AP-".
     */
    port: pulumi.Input<string>;
    /**
     * The peed of the new connection. Enum: ["50Mbps" "100Mbps" "200Mbps" "300Mbps" "400Mbps" "500Mbps" "1Gbps" "2Gbps"
     * "5Gbps" "10Gbps"]
     *
     * @deprecated Deprecated
     */
    speed: pulumi.Input<string>;
    /**
     * Valid S-VLAN range is from 4-4094, inclusive.
     */
    srcSvlan?: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.CsAzureHostedConnectionTimeouts>;
    /**
     * The VLAN ID you are using for Microsoft peering. This is optional and is used to connect to Office 365. The VLAN ID must
     * be unique within the circuit (not used for any other peerings). Valid VLAN range is from 4-4094, inclusive.
     */
    vlanMicrosoft?: pulumi.Input<number>;
    /**
     * The VLAN ID you are using for private peering. You will use this when you configure peering in the Azure portal. The
     * VLAN ID must be unique within the circuit (not used for any other peerings). Valid VLAN range is from 4-4094, inclusive.
     * You must provide at least one VLAN (`vlan_microsoft`, `vlan_private`, or both).
     */
    vlanPrivate?: pulumi.Input<number>;
}
