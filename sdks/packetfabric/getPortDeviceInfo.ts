// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getPortDeviceInfo(args: GetPortDeviceInfoArgs, opts?: pulumi.InvokeOptions): Promise<GetPortDeviceInfoResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("packetfabric:index/getPortDeviceInfo:getPortDeviceInfo", {
        "id": args.id,
        "portCircuitId": args.portCircuitId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getPortDeviceInfo.
 */
export interface GetPortDeviceInfoArgs {
    id?: string;
    portCircuitId: string;
}

/**
 * A collection of values returned by getPortDeviceInfo.
 */
export interface GetPortDeviceInfoResult {
    readonly adjacentRouter: string;
    readonly adminStatus: string;
    readonly autoNegotiation: boolean;
    readonly deviceCanLag: boolean;
    readonly deviceMake: string;
    readonly deviceName: string;
    readonly id: string;
    readonly ifaceName: string;
    readonly lagSpeed: number;
    readonly operStatus: string;
    readonly opticsDiagnosticsLaneBiasCurrent: number;
    readonly opticsDiagnosticsLaneIndex: string;
    readonly opticsDiagnosticsLaneRxPower: number;
    readonly opticsDiagnosticsLaneRxPowerDbm: number;
    readonly opticsDiagnosticsLaneRxStatus: string;
    readonly opticsDiagnosticsLaneTxPower: number;
    readonly opticsDiagnosticsLaneTxPowerDbm: number;
    readonly opticsDiagnosticsLaneTxStatus: string;
    readonly polltime: number;
    readonly portCircuitId: string;
    readonly speed: string;
    readonly timeFlapped: string;
    readonly trafficRxBps: number;
    readonly trafficRxBytes: number;
    readonly trafficRxIpv6Bytes: number;
    readonly trafficRxIpv6Packets: number;
    readonly trafficRxPackets: number;
    readonly trafficRxPps: number;
    readonly trafficTxBps: number;
    readonly trafficTxBytes: number;
    readonly trafficTxIpv6Bytes: number;
    readonly trafficTxIpv6Packets: number;
    readonly trafficTxPackets: number;
    readonly trafficTxPps: number;
    readonly wiringMedia: string;
    readonly wiringModule: string;
    readonly wiringPanel: string;
    readonly wiringPosition: string;
    readonly wiringReach: string;
    readonly wiringType: string;
}
export function getPortDeviceInfoOutput(args: GetPortDeviceInfoOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetPortDeviceInfoResult> {
    return pulumi.output(args).apply((a: any) => getPortDeviceInfo(a, opts))
}

/**
 * A collection of arguments for invoking getPortDeviceInfo.
 */
export interface GetPortDeviceInfoOutputArgs {
    id?: pulumi.Input<string>;
    portCircuitId: pulumi.Input<string>;
}
