// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class OutboundCrossConnect extends pulumi.CustomResource {
    /**
     * Get an existing OutboundCrossConnect resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OutboundCrossConnectState, opts?: pulumi.CustomResourceOptions): OutboundCrossConnect {
        return new OutboundCrossConnect(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'packetfabric:index/outboundCrossConnect:OutboundCrossConnect';

    /**
     * Returns true if the given object is an instance of OutboundCrossConnect.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OutboundCrossConnect {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OutboundCrossConnect.__pulumiType;
    }

    /**
     * Display ID for the outbound cross connect.
     */
    public readonly dataCenterCrossConnectId!: pulumi.Output<string | undefined>;
    /**
     * The Outbound Cross Connect delete state.
     */
    public /*out*/ readonly deleted!: pulumi.Output<boolean>;
    /**
     * PacketFabric outbound cross connect description.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * Z-side circuit id for the far side of the cross connect.
     */
    public readonly destinationCircuitId!: pulumi.Output<string | undefined>;
    /**
     * Z-side company name for the far side of the cross connect.
     */
    public readonly destinationName!: pulumi.Output<string | undefined>;
    /**
     * Document UUID for the LOA. When you order a cross connect, you must provide an LOA/CFA authorizing PacketFabric access
     * to your equipment.
     */
    public readonly documentUuid!: pulumi.Output<string>;
    /**
     * Z-side fiber module info.
     */
    public readonly module!: pulumi.Output<string | undefined>;
    /**
     * The Outbound Cross Connect OBCC Status.
     */
    public /*out*/ readonly obccStatus!: pulumi.Output<string>;
    /**
     * The Outbound Cross Connect Outbound Cross Connect ID.
     */
    public /*out*/ readonly outboundCrossConnectId!: pulumi.Output<string>;
    /**
     * Z-side fiber panel info.
     */
    public readonly panel!: pulumi.Output<string | undefined>;
    /**
     * The circuit ID of the PacketFabric port to which your are building the cross connect. This starts with "PF-AP-".
     */
    public readonly port!: pulumi.Output<string>;
    /**
     * Z-side fiber position info.
     */
    public readonly position!: pulumi.Output<string | undefined>;
    /**
     * The Outbound Cross Connect Progress.
     */
    public /*out*/ readonly progress!: pulumi.Output<number>;
    /**
     * UUID of the published quote line with which this cross connect should be associated.
     */
    public readonly publishedQuoteLineUuid!: pulumi.Output<string | undefined>;
    /**
     * The site code for the port location.
     */
    public readonly site!: pulumi.Output<string>;
    /**
     * The Outbound Cross Connect Time created.
     */
    public /*out*/ readonly timeCreated!: pulumi.Output<string>;
    /**
     * The Outbound Cross Connect Time updated.
     */
    public /*out*/ readonly timeUpdated!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.OutboundCrossConnectTimeouts | undefined>;
    /**
     * The user description used for update.
     */
    public readonly userDescription!: pulumi.Output<string | undefined>;
    /**
     * The Outbound Cross Connect Panel/module/position.
     */
    public /*out*/ readonly zLocCfa!: pulumi.Output<string>;

    /**
     * Create a OutboundCrossConnect resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OutboundCrossConnectArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OutboundCrossConnectArgs | OutboundCrossConnectState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OutboundCrossConnectState | undefined;
            resourceInputs["dataCenterCrossConnectId"] = state ? state.dataCenterCrossConnectId : undefined;
            resourceInputs["deleted"] = state ? state.deleted : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["destinationCircuitId"] = state ? state.destinationCircuitId : undefined;
            resourceInputs["destinationName"] = state ? state.destinationName : undefined;
            resourceInputs["documentUuid"] = state ? state.documentUuid : undefined;
            resourceInputs["module"] = state ? state.module : undefined;
            resourceInputs["obccStatus"] = state ? state.obccStatus : undefined;
            resourceInputs["outboundCrossConnectId"] = state ? state.outboundCrossConnectId : undefined;
            resourceInputs["panel"] = state ? state.panel : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["position"] = state ? state.position : undefined;
            resourceInputs["progress"] = state ? state.progress : undefined;
            resourceInputs["publishedQuoteLineUuid"] = state ? state.publishedQuoteLineUuid : undefined;
            resourceInputs["site"] = state ? state.site : undefined;
            resourceInputs["timeCreated"] = state ? state.timeCreated : undefined;
            resourceInputs["timeUpdated"] = state ? state.timeUpdated : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["userDescription"] = state ? state.userDescription : undefined;
            resourceInputs["zLocCfa"] = state ? state.zLocCfa : undefined;
        } else {
            const args = argsOrState as OutboundCrossConnectArgs | undefined;
            if ((!args || args.description === undefined) && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if ((!args || args.documentUuid === undefined) && !opts.urn) {
                throw new Error("Missing required property 'documentUuid'");
            }
            if ((!args || args.port === undefined) && !opts.urn) {
                throw new Error("Missing required property 'port'");
            }
            if ((!args || args.site === undefined) && !opts.urn) {
                throw new Error("Missing required property 'site'");
            }
            resourceInputs["dataCenterCrossConnectId"] = args ? args.dataCenterCrossConnectId : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["destinationCircuitId"] = args ? args.destinationCircuitId : undefined;
            resourceInputs["destinationName"] = args ? args.destinationName : undefined;
            resourceInputs["documentUuid"] = args ? args.documentUuid : undefined;
            resourceInputs["module"] = args ? args.module : undefined;
            resourceInputs["panel"] = args ? args.panel : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["position"] = args ? args.position : undefined;
            resourceInputs["publishedQuoteLineUuid"] = args ? args.publishedQuoteLineUuid : undefined;
            resourceInputs["site"] = args ? args.site : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["userDescription"] = args ? args.userDescription : undefined;
            resourceInputs["deleted"] = undefined /*out*/;
            resourceInputs["obccStatus"] = undefined /*out*/;
            resourceInputs["outboundCrossConnectId"] = undefined /*out*/;
            resourceInputs["progress"] = undefined /*out*/;
            resourceInputs["timeCreated"] = undefined /*out*/;
            resourceInputs["timeUpdated"] = undefined /*out*/;
            resourceInputs["zLocCfa"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OutboundCrossConnect.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering OutboundCrossConnect resources.
 */
export interface OutboundCrossConnectState {
    /**
     * Display ID for the outbound cross connect.
     */
    dataCenterCrossConnectId?: pulumi.Input<string>;
    /**
     * The Outbound Cross Connect delete state.
     */
    deleted?: pulumi.Input<boolean>;
    /**
     * PacketFabric outbound cross connect description.
     */
    description?: pulumi.Input<string>;
    /**
     * Z-side circuit id for the far side of the cross connect.
     */
    destinationCircuitId?: pulumi.Input<string>;
    /**
     * Z-side company name for the far side of the cross connect.
     */
    destinationName?: pulumi.Input<string>;
    /**
     * Document UUID for the LOA. When you order a cross connect, you must provide an LOA/CFA authorizing PacketFabric access
     * to your equipment.
     */
    documentUuid?: pulumi.Input<string>;
    /**
     * Z-side fiber module info.
     */
    module?: pulumi.Input<string>;
    /**
     * The Outbound Cross Connect OBCC Status.
     */
    obccStatus?: pulumi.Input<string>;
    /**
     * The Outbound Cross Connect Outbound Cross Connect ID.
     */
    outboundCrossConnectId?: pulumi.Input<string>;
    /**
     * Z-side fiber panel info.
     */
    panel?: pulumi.Input<string>;
    /**
     * The circuit ID of the PacketFabric port to which your are building the cross connect. This starts with "PF-AP-".
     */
    port?: pulumi.Input<string>;
    /**
     * Z-side fiber position info.
     */
    position?: pulumi.Input<string>;
    /**
     * The Outbound Cross Connect Progress.
     */
    progress?: pulumi.Input<number>;
    /**
     * UUID of the published quote line with which this cross connect should be associated.
     */
    publishedQuoteLineUuid?: pulumi.Input<string>;
    /**
     * The site code for the port location.
     */
    site?: pulumi.Input<string>;
    /**
     * The Outbound Cross Connect Time created.
     */
    timeCreated?: pulumi.Input<string>;
    /**
     * The Outbound Cross Connect Time updated.
     */
    timeUpdated?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.OutboundCrossConnectTimeouts>;
    /**
     * The user description used for update.
     */
    userDescription?: pulumi.Input<string>;
    /**
     * The Outbound Cross Connect Panel/module/position.
     */
    zLocCfa?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a OutboundCrossConnect resource.
 */
export interface OutboundCrossConnectArgs {
    /**
     * Display ID for the outbound cross connect.
     */
    dataCenterCrossConnectId?: pulumi.Input<string>;
    /**
     * PacketFabric outbound cross connect description.
     */
    description: pulumi.Input<string>;
    /**
     * Z-side circuit id for the far side of the cross connect.
     */
    destinationCircuitId?: pulumi.Input<string>;
    /**
     * Z-side company name for the far side of the cross connect.
     */
    destinationName?: pulumi.Input<string>;
    /**
     * Document UUID for the LOA. When you order a cross connect, you must provide an LOA/CFA authorizing PacketFabric access
     * to your equipment.
     */
    documentUuid: pulumi.Input<string>;
    /**
     * Z-side fiber module info.
     */
    module?: pulumi.Input<string>;
    /**
     * Z-side fiber panel info.
     */
    panel?: pulumi.Input<string>;
    /**
     * The circuit ID of the PacketFabric port to which your are building the cross connect. This starts with "PF-AP-".
     */
    port: pulumi.Input<string>;
    /**
     * Z-side fiber position info.
     */
    position?: pulumi.Input<string>;
    /**
     * UUID of the published quote line with which this cross connect should be associated.
     */
    publishedQuoteLineUuid?: pulumi.Input<string>;
    /**
     * The site code for the port location.
     */
    site: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.OutboundCrossConnectTimeouts>;
    /**
     * The user description used for update.
     */
    userDescription?: pulumi.Input<string>;
}
