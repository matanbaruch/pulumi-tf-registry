// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class LinkAggregationGroup extends pulumi.CustomResource {
    /**
     * Get an existing LinkAggregationGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LinkAggregationGroupState, opts?: pulumi.CustomResourceOptions): LinkAggregationGroup {
        return new LinkAggregationGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'packetfabric:index/linkAggregationGroup:LinkAggregationGroup';

    /**
     * Returns true if the given object is an instance of LinkAggregationGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LinkAggregationGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LinkAggregationGroup.__pulumiType;
    }

    /**
     * A brief description of the LAG.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * Change LAG Admin Status. Set it to true when LAG is enabled, false when LAG is disabled. Defaults: true
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * The LACP interval determines the frequency in which LACP control packets (LACP PDUs) are sent. If you specify fast, they
     * are sent at 1 second intervals. If you specify slow, they are sent at 30 second intervals. Enum: "fast" "slow"
     */
    public readonly interval!: pulumi.Output<string>;
    /**
     * Label value linked to an object.
     */
    public readonly labels!: pulumi.Output<string[] | undefined>;
    /**
     * A list of port circuit IDs to include in the LAG. To be included in a LAG, the ports must be at the same site, in the
     * same zone, and have the same speed and media.
     */
    public readonly members!: pulumi.Output<string[]>;
    /**
     * Purchase order number or identifier of a service.
     */
    public readonly poNumber!: pulumi.Output<string | undefined>;
    /**
     * Point of presence in which the LAG should be located.
     */
    public readonly pop!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.LinkAggregationGroupTimeouts | undefined>;

    /**
     * Create a LinkAggregationGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LinkAggregationGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LinkAggregationGroupArgs | LinkAggregationGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LinkAggregationGroupState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["interval"] = state ? state.interval : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["members"] = state ? state.members : undefined;
            resourceInputs["poNumber"] = state ? state.poNumber : undefined;
            resourceInputs["pop"] = state ? state.pop : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as LinkAggregationGroupArgs | undefined;
            if ((!args || args.description === undefined) && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if ((!args || args.interval === undefined) && !opts.urn) {
                throw new Error("Missing required property 'interval'");
            }
            if ((!args || args.members === undefined) && !opts.urn) {
                throw new Error("Missing required property 'members'");
            }
            if ((!args || args.pop === undefined) && !opts.urn) {
                throw new Error("Missing required property 'pop'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["interval"] = args ? args.interval : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["members"] = args ? args.members : undefined;
            resourceInputs["poNumber"] = args ? args.poNumber : undefined;
            resourceInputs["pop"] = args ? args.pop : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LinkAggregationGroup.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LinkAggregationGroup resources.
 */
export interface LinkAggregationGroupState {
    /**
     * A brief description of the LAG.
     */
    description?: pulumi.Input<string>;
    /**
     * Change LAG Admin Status. Set it to true when LAG is enabled, false when LAG is disabled. Defaults: true
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The LACP interval determines the frequency in which LACP control packets (LACP PDUs) are sent. If you specify fast, they
     * are sent at 1 second intervals. If you specify slow, they are sent at 30 second intervals. Enum: "fast" "slow"
     */
    interval?: pulumi.Input<string>;
    /**
     * Label value linked to an object.
     */
    labels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of port circuit IDs to include in the LAG. To be included in a LAG, the ports must be at the same site, in the
     * same zone, and have the same speed and media.
     */
    members?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Purchase order number or identifier of a service.
     */
    poNumber?: pulumi.Input<string>;
    /**
     * Point of presence in which the LAG should be located.
     */
    pop?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.LinkAggregationGroupTimeouts>;
}

/**
 * The set of arguments for constructing a LinkAggregationGroup resource.
 */
export interface LinkAggregationGroupArgs {
    /**
     * A brief description of the LAG.
     */
    description: pulumi.Input<string>;
    /**
     * Change LAG Admin Status. Set it to true when LAG is enabled, false when LAG is disabled. Defaults: true
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The LACP interval determines the frequency in which LACP control packets (LACP PDUs) are sent. If you specify fast, they
     * are sent at 1 second intervals. If you specify slow, they are sent at 30 second intervals. Enum: "fast" "slow"
     */
    interval: pulumi.Input<string>;
    /**
     * Label value linked to an object.
     */
    labels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of port circuit IDs to include in the LAG. To be included in a LAG, the ports must be at the same site, in the
     * same zone, and have the same speed and media.
     */
    members: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Purchase order number or identifier of a service.
     */
    poNumber?: pulumi.Input<string>;
    /**
     * Point of presence in which the LAG should be located.
     */
    pop: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.LinkAggregationGroupTimeouts>;
}
