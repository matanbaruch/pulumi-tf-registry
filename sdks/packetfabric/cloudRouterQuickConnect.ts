// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CloudRouterQuickConnect extends pulumi.CustomResource {
    /**
     * Get an existing CloudRouterQuickConnect resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CloudRouterQuickConnectState, opts?: pulumi.CustomResourceOptions): CloudRouterQuickConnect {
        return new CloudRouterQuickConnect(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'packetfabric:index/cloudRouterQuickConnect:CloudRouterQuickConnect';

    /**
     * Returns true if the given object is an instance of CloudRouterQuickConnect.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CloudRouterQuickConnect {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CloudRouterQuickConnect.__pulumiType;
    }

    /**
     * The circuit ID of the Cloud Router connection that will be importing the routes.
     */
    public readonly connectionCircuitId!: pulumi.Output<string>;
    /**
     * The speed of the target cloud router connection.
     */
    public /*out*/ readonly connectionSpeed!: pulumi.Output<string>;
    /**
     * The circuit ID of your Cloud Router.
     */
    public readonly crCircuitId!: pulumi.Output<string>;
    /**
     * This is set by the service provider.
     */
    public readonly importFilters!: pulumi.Output<outputs.CloudRouterQuickConnectImportFilter[] | undefined>;
    /**
     * Whether the Quick Connect is defunct. This typically happens when the provider removes the service.
     */
    public /*out*/ readonly isDefunct!: pulumi.Output<boolean>;
    public readonly returnFilters!: pulumi.Output<outputs.CloudRouterQuickConnectReturnFilter[]>;
    /**
     * The Circuit ID of the Route Set selected for this Cloud Router Import.
     */
    public /*out*/ readonly routeSetCircuitId!: pulumi.Output<string>;
    /**
     * The service UUID associated with the service provider's Quick Connect.
     */
    public readonly serviceUuid!: pulumi.Output<string>;
    /**
     * Shows the state of this import. Enum: `"pending"` `"rejected"` `"provisioning"` `"active"` `"deleting"` `"inactive"`
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * Subscription term of the Cloud Router Connection Enum: ["1", "12", "24", "36"] Defaults: 1
     */
    public readonly subscriptionTerm!: pulumi.Output<number | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.CloudRouterQuickConnectTimeouts | undefined>;

    /**
     * Create a CloudRouterQuickConnect resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CloudRouterQuickConnectArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CloudRouterQuickConnectArgs | CloudRouterQuickConnectState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CloudRouterQuickConnectState | undefined;
            resourceInputs["connectionCircuitId"] = state ? state.connectionCircuitId : undefined;
            resourceInputs["connectionSpeed"] = state ? state.connectionSpeed : undefined;
            resourceInputs["crCircuitId"] = state ? state.crCircuitId : undefined;
            resourceInputs["importFilters"] = state ? state.importFilters : undefined;
            resourceInputs["isDefunct"] = state ? state.isDefunct : undefined;
            resourceInputs["returnFilters"] = state ? state.returnFilters : undefined;
            resourceInputs["routeSetCircuitId"] = state ? state.routeSetCircuitId : undefined;
            resourceInputs["serviceUuid"] = state ? state.serviceUuid : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["subscriptionTerm"] = state ? state.subscriptionTerm : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as CloudRouterQuickConnectArgs | undefined;
            if ((!args || args.connectionCircuitId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'connectionCircuitId'");
            }
            if ((!args || args.crCircuitId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'crCircuitId'");
            }
            if ((!args || args.returnFilters === undefined) && !opts.urn) {
                throw new Error("Missing required property 'returnFilters'");
            }
            if ((!args || args.serviceUuid === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceUuid'");
            }
            resourceInputs["connectionCircuitId"] = args ? args.connectionCircuitId : undefined;
            resourceInputs["crCircuitId"] = args ? args.crCircuitId : undefined;
            resourceInputs["importFilters"] = args ? args.importFilters : undefined;
            resourceInputs["returnFilters"] = args ? args.returnFilters : undefined;
            resourceInputs["serviceUuid"] = args ? args.serviceUuid : undefined;
            resourceInputs["subscriptionTerm"] = args ? args.subscriptionTerm : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["connectionSpeed"] = undefined /*out*/;
            resourceInputs["isDefunct"] = undefined /*out*/;
            resourceInputs["routeSetCircuitId"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CloudRouterQuickConnect.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CloudRouterQuickConnect resources.
 */
export interface CloudRouterQuickConnectState {
    /**
     * The circuit ID of the Cloud Router connection that will be importing the routes.
     */
    connectionCircuitId?: pulumi.Input<string>;
    /**
     * The speed of the target cloud router connection.
     */
    connectionSpeed?: pulumi.Input<string>;
    /**
     * The circuit ID of your Cloud Router.
     */
    crCircuitId?: pulumi.Input<string>;
    /**
     * This is set by the service provider.
     */
    importFilters?: pulumi.Input<pulumi.Input<inputs.CloudRouterQuickConnectImportFilter>[]>;
    /**
     * Whether the Quick Connect is defunct. This typically happens when the provider removes the service.
     */
    isDefunct?: pulumi.Input<boolean>;
    returnFilters?: pulumi.Input<pulumi.Input<inputs.CloudRouterQuickConnectReturnFilter>[]>;
    /**
     * The Circuit ID of the Route Set selected for this Cloud Router Import.
     */
    routeSetCircuitId?: pulumi.Input<string>;
    /**
     * The service UUID associated with the service provider's Quick Connect.
     */
    serviceUuid?: pulumi.Input<string>;
    /**
     * Shows the state of this import. Enum: `"pending"` `"rejected"` `"provisioning"` `"active"` `"deleting"` `"inactive"`
     */
    state?: pulumi.Input<string>;
    /**
     * Subscription term of the Cloud Router Connection Enum: ["1", "12", "24", "36"] Defaults: 1
     */
    subscriptionTerm?: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.CloudRouterQuickConnectTimeouts>;
}

/**
 * The set of arguments for constructing a CloudRouterQuickConnect resource.
 */
export interface CloudRouterQuickConnectArgs {
    /**
     * The circuit ID of the Cloud Router connection that will be importing the routes.
     */
    connectionCircuitId: pulumi.Input<string>;
    /**
     * The circuit ID of your Cloud Router.
     */
    crCircuitId: pulumi.Input<string>;
    /**
     * This is set by the service provider.
     */
    importFilters?: pulumi.Input<pulumi.Input<inputs.CloudRouterQuickConnectImportFilter>[]>;
    returnFilters: pulumi.Input<pulumi.Input<inputs.CloudRouterQuickConnectReturnFilter>[]>;
    /**
     * The service UUID associated with the service provider's Quick Connect.
     */
    serviceUuid: pulumi.Input<string>;
    /**
     * Subscription term of the Cloud Router Connection Enum: ["1", "12", "24", "36"] Defaults: 1
     */
    subscriptionTerm?: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.CloudRouterQuickConnectTimeouts>;
}
