// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Document extends pulumi.CustomResource {
    /**
     * Get an existing Document resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DocumentState, opts?: pulumi.CustomResourceOptions): Document {
        return new Document(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'packetfabric:index/document:Document';

    /**
     * Returns true if the given object is an instance of Document.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Document {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Document.__pulumiType;
    }

    /**
     * Document description
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * Document file name. Enum: ".png", ".jpg", ".jpeg", ".pdf", ".doc", ".docx", ".tiff"
     */
    public readonly document!: pulumi.Output<string>;
    /**
     * Port circuit id. This field is required only for "loa" document type
     */
    public readonly portCircuitId!: pulumi.Output<string | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.DocumentTimeouts | undefined>;
    /**
     * Document type. One of ["loa", "msa"]
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a Document resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DocumentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DocumentArgs | DocumentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DocumentState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["document"] = state ? state.document : undefined;
            resourceInputs["portCircuitId"] = state ? state.portCircuitId : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as DocumentArgs | undefined;
            if ((!args || args.description === undefined) && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if ((!args || args.document === undefined) && !opts.urn) {
                throw new Error("Missing required property 'document'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["document"] = args ? args.document : undefined;
            resourceInputs["portCircuitId"] = args ? args.portCircuitId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Document.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Document resources.
 */
export interface DocumentState {
    /**
     * Document description
     */
    description?: pulumi.Input<string>;
    /**
     * Document file name. Enum: ".png", ".jpg", ".jpeg", ".pdf", ".doc", ".docx", ".tiff"
     */
    document?: pulumi.Input<string>;
    /**
     * Port circuit id. This field is required only for "loa" document type
     */
    portCircuitId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.DocumentTimeouts>;
    /**
     * Document type. One of ["loa", "msa"]
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Document resource.
 */
export interface DocumentArgs {
    /**
     * Document description
     */
    description: pulumi.Input<string>;
    /**
     * Document file name. Enum: ".png", ".jpg", ".jpeg", ".pdf", ".doc", ".docx", ".tiff"
     */
    document: pulumi.Input<string>;
    /**
     * Port circuit id. This field is required only for "loa" document type
     */
    portCircuitId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.DocumentTimeouts>;
    /**
     * Document type. One of ["loa", "msa"]
     */
    type: pulumi.Input<string>;
}
