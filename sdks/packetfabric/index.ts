// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { BackboneVirtualCircuitArgs, BackboneVirtualCircuitState } from "./backboneVirtualCircuit";
export type BackboneVirtualCircuit = import("./backboneVirtualCircuit").BackboneVirtualCircuit;
export const BackboneVirtualCircuit: typeof import("./backboneVirtualCircuit").BackboneVirtualCircuit = null as any;
utilities.lazyLoad(exports, ["BackboneVirtualCircuit"], () => require("./backboneVirtualCircuit"));

export { BackboneVirtualCircuitMarketplaceArgs, BackboneVirtualCircuitMarketplaceState } from "./backboneVirtualCircuitMarketplace";
export type BackboneVirtualCircuitMarketplace = import("./backboneVirtualCircuitMarketplace").BackboneVirtualCircuitMarketplace;
export const BackboneVirtualCircuitMarketplace: typeof import("./backboneVirtualCircuitMarketplace").BackboneVirtualCircuitMarketplace = null as any;
utilities.lazyLoad(exports, ["BackboneVirtualCircuitMarketplace"], () => require("./backboneVirtualCircuitMarketplace"));

export { BackboneVirtualCircuitSpeedBurstArgs, BackboneVirtualCircuitSpeedBurstState } from "./backboneVirtualCircuitSpeedBurst";
export type BackboneVirtualCircuitSpeedBurst = import("./backboneVirtualCircuitSpeedBurst").BackboneVirtualCircuitSpeedBurst;
export const BackboneVirtualCircuitSpeedBurst: typeof import("./backboneVirtualCircuitSpeedBurst").BackboneVirtualCircuitSpeedBurst = null as any;
utilities.lazyLoad(exports, ["BackboneVirtualCircuitSpeedBurst"], () => require("./backboneVirtualCircuitSpeedBurst"));

export { CloudProviderCredentialAwsArgs, CloudProviderCredentialAwsState } from "./cloudProviderCredentialAws";
export type CloudProviderCredentialAws = import("./cloudProviderCredentialAws").CloudProviderCredentialAws;
export const CloudProviderCredentialAws: typeof import("./cloudProviderCredentialAws").CloudProviderCredentialAws = null as any;
utilities.lazyLoad(exports, ["CloudProviderCredentialAws"], () => require("./cloudProviderCredentialAws"));

export { CloudProviderCredentialGoogleArgs, CloudProviderCredentialGoogleState } from "./cloudProviderCredentialGoogle";
export type CloudProviderCredentialGoogle = import("./cloudProviderCredentialGoogle").CloudProviderCredentialGoogle;
export const CloudProviderCredentialGoogle: typeof import("./cloudProviderCredentialGoogle").CloudProviderCredentialGoogle = null as any;
utilities.lazyLoad(exports, ["CloudProviderCredentialGoogle"], () => require("./cloudProviderCredentialGoogle"));

export { CloudRouterArgs, CloudRouterState } from "./cloudRouter";
export type CloudRouter = import("./cloudRouter").CloudRouter;
export const CloudRouter: typeof import("./cloudRouter").CloudRouter = null as any;
utilities.lazyLoad(exports, ["CloudRouter"], () => require("./cloudRouter"));

export { CloudRouterBgpSessionArgs, CloudRouterBgpSessionState } from "./cloudRouterBgpSession";
export type CloudRouterBgpSession = import("./cloudRouterBgpSession").CloudRouterBgpSession;
export const CloudRouterBgpSession: typeof import("./cloudRouterBgpSession").CloudRouterBgpSession = null as any;
utilities.lazyLoad(exports, ["CloudRouterBgpSession"], () => require("./cloudRouterBgpSession"));

export { CloudRouterConnectionAwsArgs, CloudRouterConnectionAwsState } from "./cloudRouterConnectionAws";
export type CloudRouterConnectionAws = import("./cloudRouterConnectionAws").CloudRouterConnectionAws;
export const CloudRouterConnectionAws: typeof import("./cloudRouterConnectionAws").CloudRouterConnectionAws = null as any;
utilities.lazyLoad(exports, ["CloudRouterConnectionAws"], () => require("./cloudRouterConnectionAws"));

export { CloudRouterConnectionAzureArgs, CloudRouterConnectionAzureState } from "./cloudRouterConnectionAzure";
export type CloudRouterConnectionAzure = import("./cloudRouterConnectionAzure").CloudRouterConnectionAzure;
export const CloudRouterConnectionAzure: typeof import("./cloudRouterConnectionAzure").CloudRouterConnectionAzure = null as any;
utilities.lazyLoad(exports, ["CloudRouterConnectionAzure"], () => require("./cloudRouterConnectionAzure"));

export { CloudRouterConnectionGoogleArgs, CloudRouterConnectionGoogleState } from "./cloudRouterConnectionGoogle";
export type CloudRouterConnectionGoogle = import("./cloudRouterConnectionGoogle").CloudRouterConnectionGoogle;
export const CloudRouterConnectionGoogle: typeof import("./cloudRouterConnectionGoogle").CloudRouterConnectionGoogle = null as any;
utilities.lazyLoad(exports, ["CloudRouterConnectionGoogle"], () => require("./cloudRouterConnectionGoogle"));

export { CloudRouterConnectionIbmArgs, CloudRouterConnectionIbmState } from "./cloudRouterConnectionIbm";
export type CloudRouterConnectionIbm = import("./cloudRouterConnectionIbm").CloudRouterConnectionIbm;
export const CloudRouterConnectionIbm: typeof import("./cloudRouterConnectionIbm").CloudRouterConnectionIbm = null as any;
utilities.lazyLoad(exports, ["CloudRouterConnectionIbm"], () => require("./cloudRouterConnectionIbm"));

export { CloudRouterConnectionIpsecArgs, CloudRouterConnectionIpsecState } from "./cloudRouterConnectionIpsec";
export type CloudRouterConnectionIpsec = import("./cloudRouterConnectionIpsec").CloudRouterConnectionIpsec;
export const CloudRouterConnectionIpsec: typeof import("./cloudRouterConnectionIpsec").CloudRouterConnectionIpsec = null as any;
utilities.lazyLoad(exports, ["CloudRouterConnectionIpsec"], () => require("./cloudRouterConnectionIpsec"));

export { CloudRouterConnectionOracleArgs, CloudRouterConnectionOracleState } from "./cloudRouterConnectionOracle";
export type CloudRouterConnectionOracle = import("./cloudRouterConnectionOracle").CloudRouterConnectionOracle;
export const CloudRouterConnectionOracle: typeof import("./cloudRouterConnectionOracle").CloudRouterConnectionOracle = null as any;
utilities.lazyLoad(exports, ["CloudRouterConnectionOracle"], () => require("./cloudRouterConnectionOracle"));

export { CloudRouterConnectionPortArgs, CloudRouterConnectionPortState } from "./cloudRouterConnectionPort";
export type CloudRouterConnectionPort = import("./cloudRouterConnectionPort").CloudRouterConnectionPort;
export const CloudRouterConnectionPort: typeof import("./cloudRouterConnectionPort").CloudRouterConnectionPort = null as any;
utilities.lazyLoad(exports, ["CloudRouterConnectionPort"], () => require("./cloudRouterConnectionPort"));

export { CloudRouterQuickConnectArgs, CloudRouterQuickConnectState } from "./cloudRouterQuickConnect";
export type CloudRouterQuickConnect = import("./cloudRouterQuickConnect").CloudRouterQuickConnect;
export const CloudRouterQuickConnect: typeof import("./cloudRouterQuickConnect").CloudRouterQuickConnect = null as any;
utilities.lazyLoad(exports, ["CloudRouterQuickConnect"], () => require("./cloudRouterQuickConnect"));

export { CsAwsDedicatedConnectionArgs, CsAwsDedicatedConnectionState } from "./csAwsDedicatedConnection";
export type CsAwsDedicatedConnection = import("./csAwsDedicatedConnection").CsAwsDedicatedConnection;
export const CsAwsDedicatedConnection: typeof import("./csAwsDedicatedConnection").CsAwsDedicatedConnection = null as any;
utilities.lazyLoad(exports, ["CsAwsDedicatedConnection"], () => require("./csAwsDedicatedConnection"));

export { CsAwsHostedConnectionArgs, CsAwsHostedConnectionState } from "./csAwsHostedConnection";
export type CsAwsHostedConnection = import("./csAwsHostedConnection").CsAwsHostedConnection;
export const CsAwsHostedConnection: typeof import("./csAwsHostedConnection").CsAwsHostedConnection = null as any;
utilities.lazyLoad(exports, ["CsAwsHostedConnection"], () => require("./csAwsHostedConnection"));

export { CsAwsHostedMarketplaceConnectionArgs, CsAwsHostedMarketplaceConnectionState } from "./csAwsHostedMarketplaceConnection";
export type CsAwsHostedMarketplaceConnection = import("./csAwsHostedMarketplaceConnection").CsAwsHostedMarketplaceConnection;
export const CsAwsHostedMarketplaceConnection: typeof import("./csAwsHostedMarketplaceConnection").CsAwsHostedMarketplaceConnection = null as any;
utilities.lazyLoad(exports, ["CsAwsHostedMarketplaceConnection"], () => require("./csAwsHostedMarketplaceConnection"));

export { CsAzureDedicatedConnectionArgs, CsAzureDedicatedConnectionState } from "./csAzureDedicatedConnection";
export type CsAzureDedicatedConnection = import("./csAzureDedicatedConnection").CsAzureDedicatedConnection;
export const CsAzureDedicatedConnection: typeof import("./csAzureDedicatedConnection").CsAzureDedicatedConnection = null as any;
utilities.lazyLoad(exports, ["CsAzureDedicatedConnection"], () => require("./csAzureDedicatedConnection"));

export { CsAzureHostedConnectionArgs, CsAzureHostedConnectionState } from "./csAzureHostedConnection";
export type CsAzureHostedConnection = import("./csAzureHostedConnection").CsAzureHostedConnection;
export const CsAzureHostedConnection: typeof import("./csAzureHostedConnection").CsAzureHostedConnection = null as any;
utilities.lazyLoad(exports, ["CsAzureHostedConnection"], () => require("./csAzureHostedConnection"));

export { CsAzureHostedMarketplaceConnectionArgs, CsAzureHostedMarketplaceConnectionState } from "./csAzureHostedMarketplaceConnection";
export type CsAzureHostedMarketplaceConnection = import("./csAzureHostedMarketplaceConnection").CsAzureHostedMarketplaceConnection;
export const CsAzureHostedMarketplaceConnection: typeof import("./csAzureHostedMarketplaceConnection").CsAzureHostedMarketplaceConnection = null as any;
utilities.lazyLoad(exports, ["CsAzureHostedMarketplaceConnection"], () => require("./csAzureHostedMarketplaceConnection"));

export { CsGoogleDedicatedConnectionArgs, CsGoogleDedicatedConnectionState } from "./csGoogleDedicatedConnection";
export type CsGoogleDedicatedConnection = import("./csGoogleDedicatedConnection").CsGoogleDedicatedConnection;
export const CsGoogleDedicatedConnection: typeof import("./csGoogleDedicatedConnection").CsGoogleDedicatedConnection = null as any;
utilities.lazyLoad(exports, ["CsGoogleDedicatedConnection"], () => require("./csGoogleDedicatedConnection"));

export { CsGoogleHostedConnectionArgs, CsGoogleHostedConnectionState } from "./csGoogleHostedConnection";
export type CsGoogleHostedConnection = import("./csGoogleHostedConnection").CsGoogleHostedConnection;
export const CsGoogleHostedConnection: typeof import("./csGoogleHostedConnection").CsGoogleHostedConnection = null as any;
utilities.lazyLoad(exports, ["CsGoogleHostedConnection"], () => require("./csGoogleHostedConnection"));

export { CsGoogleHostedMarketplaceConnectionArgs, CsGoogleHostedMarketplaceConnectionState } from "./csGoogleHostedMarketplaceConnection";
export type CsGoogleHostedMarketplaceConnection = import("./csGoogleHostedMarketplaceConnection").CsGoogleHostedMarketplaceConnection;
export const CsGoogleHostedMarketplaceConnection: typeof import("./csGoogleHostedMarketplaceConnection").CsGoogleHostedMarketplaceConnection = null as any;
utilities.lazyLoad(exports, ["CsGoogleHostedMarketplaceConnection"], () => require("./csGoogleHostedMarketplaceConnection"));

export { CsIbmHostedConnectionArgs, CsIbmHostedConnectionState } from "./csIbmHostedConnection";
export type CsIbmHostedConnection = import("./csIbmHostedConnection").CsIbmHostedConnection;
export const CsIbmHostedConnection: typeof import("./csIbmHostedConnection").CsIbmHostedConnection = null as any;
utilities.lazyLoad(exports, ["CsIbmHostedConnection"], () => require("./csIbmHostedConnection"));

export { CsOracleHostedConnectionArgs, CsOracleHostedConnectionState } from "./csOracleHostedConnection";
export type CsOracleHostedConnection = import("./csOracleHostedConnection").CsOracleHostedConnection;
export const CsOracleHostedConnection: typeof import("./csOracleHostedConnection").CsOracleHostedConnection = null as any;
utilities.lazyLoad(exports, ["CsOracleHostedConnection"], () => require("./csOracleHostedConnection"));

export { CsOracleHostedMarketplaceConnectionArgs, CsOracleHostedMarketplaceConnectionState } from "./csOracleHostedMarketplaceConnection";
export type CsOracleHostedMarketplaceConnection = import("./csOracleHostedMarketplaceConnection").CsOracleHostedMarketplaceConnection;
export const CsOracleHostedMarketplaceConnection: typeof import("./csOracleHostedMarketplaceConnection").CsOracleHostedMarketplaceConnection = null as any;
utilities.lazyLoad(exports, ["CsOracleHostedMarketplaceConnection"], () => require("./csOracleHostedMarketplaceConnection"));

export { DocumentArgs, DocumentState } from "./document";
export type Document = import("./document").Document;
export const Document: typeof import("./document").Document = null as any;
utilities.lazyLoad(exports, ["Document"], () => require("./document"));

export { FlexBandwidthArgs, FlexBandwidthState } from "./flexBandwidth";
export type FlexBandwidth = import("./flexBandwidth").FlexBandwidth;
export const FlexBandwidth: typeof import("./flexBandwidth").FlexBandwidth = null as any;
utilities.lazyLoad(exports, ["FlexBandwidth"], () => require("./flexBandwidth"));

export { GetActivitylogsArgs, GetActivitylogsResult, GetActivitylogsOutputArgs } from "./getActivitylogs";
export const getActivitylogs: typeof import("./getActivitylogs").getActivitylogs = null as any;
export const getActivitylogsOutput: typeof import("./getActivitylogs").getActivitylogsOutput = null as any;
utilities.lazyLoad(exports, ["getActivitylogs","getActivitylogsOutput"], () => require("./getActivitylogs"));

export { GetBillingArgs, GetBillingResult, GetBillingOutputArgs } from "./getBilling";
export const getBilling: typeof import("./getBilling").getBilling = null as any;
export const getBillingOutput: typeof import("./getBilling").getBillingOutput = null as any;
utilities.lazyLoad(exports, ["getBilling","getBillingOutput"], () => require("./getBilling"));

export { GetCloudRouterBgpSessionArgs, GetCloudRouterBgpSessionResult, GetCloudRouterBgpSessionOutputArgs } from "./getCloudRouterBgpSession";
export const getCloudRouterBgpSession: typeof import("./getCloudRouterBgpSession").getCloudRouterBgpSession = null as any;
export const getCloudRouterBgpSessionOutput: typeof import("./getCloudRouterBgpSession").getCloudRouterBgpSessionOutput = null as any;
utilities.lazyLoad(exports, ["getCloudRouterBgpSession","getCloudRouterBgpSessionOutput"], () => require("./getCloudRouterBgpSession"));

export { GetCloudRouterConnectionArgs, GetCloudRouterConnectionResult, GetCloudRouterConnectionOutputArgs } from "./getCloudRouterConnection";
export const getCloudRouterConnection: typeof import("./getCloudRouterConnection").getCloudRouterConnection = null as any;
export const getCloudRouterConnectionOutput: typeof import("./getCloudRouterConnection").getCloudRouterConnectionOutput = null as any;
utilities.lazyLoad(exports, ["getCloudRouterConnection","getCloudRouterConnectionOutput"], () => require("./getCloudRouterConnection"));

export { GetCloudRouterConnectionIpsecArgs, GetCloudRouterConnectionIpsecResult, GetCloudRouterConnectionIpsecOutputArgs } from "./getCloudRouterConnectionIpsec";
export const getCloudRouterConnectionIpsec: typeof import("./getCloudRouterConnectionIpsec").getCloudRouterConnectionIpsec = null as any;
export const getCloudRouterConnectionIpsecOutput: typeof import("./getCloudRouterConnectionIpsec").getCloudRouterConnectionIpsecOutput = null as any;
utilities.lazyLoad(exports, ["getCloudRouterConnectionIpsec","getCloudRouterConnectionIpsecOutput"], () => require("./getCloudRouterConnectionIpsec"));

export { GetCloudRouterConnectionsArgs, GetCloudRouterConnectionsResult, GetCloudRouterConnectionsOutputArgs } from "./getCloudRouterConnections";
export const getCloudRouterConnections: typeof import("./getCloudRouterConnections").getCloudRouterConnections = null as any;
export const getCloudRouterConnectionsOutput: typeof import("./getCloudRouterConnections").getCloudRouterConnectionsOutput = null as any;
utilities.lazyLoad(exports, ["getCloudRouterConnections","getCloudRouterConnectionsOutput"], () => require("./getCloudRouterConnections"));

export { GetCloudRoutersArgs, GetCloudRoutersResult, GetCloudRoutersOutputArgs } from "./getCloudRouters";
export const getCloudRouters: typeof import("./getCloudRouters").getCloudRouters = null as any;
export const getCloudRoutersOutput: typeof import("./getCloudRouters").getCloudRoutersOutput = null as any;
utilities.lazyLoad(exports, ["getCloudRouters","getCloudRoutersOutput"], () => require("./getCloudRouters"));

export { GetCsAwsHostedConnectionArgs, GetCsAwsHostedConnectionResult, GetCsAwsHostedConnectionOutputArgs } from "./getCsAwsHostedConnection";
export const getCsAwsHostedConnection: typeof import("./getCsAwsHostedConnection").getCsAwsHostedConnection = null as any;
export const getCsAwsHostedConnectionOutput: typeof import("./getCsAwsHostedConnection").getCsAwsHostedConnectionOutput = null as any;
utilities.lazyLoad(exports, ["getCsAwsHostedConnection","getCsAwsHostedConnectionOutput"], () => require("./getCsAwsHostedConnection"));

export { GetCsAzureHostedConnectionArgs, GetCsAzureHostedConnectionResult, GetCsAzureHostedConnectionOutputArgs } from "./getCsAzureHostedConnection";
export const getCsAzureHostedConnection: typeof import("./getCsAzureHostedConnection").getCsAzureHostedConnection = null as any;
export const getCsAzureHostedConnectionOutput: typeof import("./getCsAzureHostedConnection").getCsAzureHostedConnectionOutput = null as any;
utilities.lazyLoad(exports, ["getCsAzureHostedConnection","getCsAzureHostedConnectionOutput"], () => require("./getCsAzureHostedConnection"));

export { GetCsDedicatedConnectionsArgs, GetCsDedicatedConnectionsResult, GetCsDedicatedConnectionsOutputArgs } from "./getCsDedicatedConnections";
export const getCsDedicatedConnections: typeof import("./getCsDedicatedConnections").getCsDedicatedConnections = null as any;
export const getCsDedicatedConnectionsOutput: typeof import("./getCsDedicatedConnections").getCsDedicatedConnectionsOutput = null as any;
utilities.lazyLoad(exports, ["getCsDedicatedConnections","getCsDedicatedConnectionsOutput"], () => require("./getCsDedicatedConnections"));

export { GetCsGoogleHostedConnectionArgs, GetCsGoogleHostedConnectionResult, GetCsGoogleHostedConnectionOutputArgs } from "./getCsGoogleHostedConnection";
export const getCsGoogleHostedConnection: typeof import("./getCsGoogleHostedConnection").getCsGoogleHostedConnection = null as any;
export const getCsGoogleHostedConnectionOutput: typeof import("./getCsGoogleHostedConnection").getCsGoogleHostedConnectionOutput = null as any;
utilities.lazyLoad(exports, ["getCsGoogleHostedConnection","getCsGoogleHostedConnectionOutput"], () => require("./getCsGoogleHostedConnection"));

export { GetCsHostedConnectionRouterConfigArgs, GetCsHostedConnectionRouterConfigResult, GetCsHostedConnectionRouterConfigOutputArgs } from "./getCsHostedConnectionRouterConfig";
export const getCsHostedConnectionRouterConfig: typeof import("./getCsHostedConnectionRouterConfig").getCsHostedConnectionRouterConfig = null as any;
export const getCsHostedConnectionRouterConfigOutput: typeof import("./getCsHostedConnectionRouterConfig").getCsHostedConnectionRouterConfigOutput = null as any;
utilities.lazyLoad(exports, ["getCsHostedConnectionRouterConfig","getCsHostedConnectionRouterConfigOutput"], () => require("./getCsHostedConnectionRouterConfig"));

export { GetCsIbmHostedConnectionArgs, GetCsIbmHostedConnectionResult, GetCsIbmHostedConnectionOutputArgs } from "./getCsIbmHostedConnection";
export const getCsIbmHostedConnection: typeof import("./getCsIbmHostedConnection").getCsIbmHostedConnection = null as any;
export const getCsIbmHostedConnectionOutput: typeof import("./getCsIbmHostedConnection").getCsIbmHostedConnectionOutput = null as any;
utilities.lazyLoad(exports, ["getCsIbmHostedConnection","getCsIbmHostedConnectionOutput"], () => require("./getCsIbmHostedConnection"));

export { GetCsOracleHostedConnectionArgs, GetCsOracleHostedConnectionResult, GetCsOracleHostedConnectionOutputArgs } from "./getCsOracleHostedConnection";
export const getCsOracleHostedConnection: typeof import("./getCsOracleHostedConnection").getCsOracleHostedConnection = null as any;
export const getCsOracleHostedConnectionOutput: typeof import("./getCsOracleHostedConnection").getCsOracleHostedConnectionOutput = null as any;
utilities.lazyLoad(exports, ["getCsOracleHostedConnection","getCsOracleHostedConnectionOutput"], () => require("./getCsOracleHostedConnection"));

export { GetDocumentsResult } from "./getDocuments";
export const getDocuments: typeof import("./getDocuments").getDocuments = null as any;
export const getDocumentsOutput: typeof import("./getDocuments").getDocumentsOutput = null as any;
utilities.lazyLoad(exports, ["getDocuments","getDocumentsOutput"], () => require("./getDocuments"));

export { GetLinkAggregationGroupArgs, GetLinkAggregationGroupResult, GetLinkAggregationGroupOutputArgs } from "./getLinkAggregationGroup";
export const getLinkAggregationGroup: typeof import("./getLinkAggregationGroup").getLinkAggregationGroup = null as any;
export const getLinkAggregationGroupOutput: typeof import("./getLinkAggregationGroup").getLinkAggregationGroupOutput = null as any;
utilities.lazyLoad(exports, ["getLinkAggregationGroup","getLinkAggregationGroupOutput"], () => require("./getLinkAggregationGroup"));

export { GetLocationsArgs, GetLocationsResult, GetLocationsOutputArgs } from "./getLocations";
export const getLocations: typeof import("./getLocations").getLocations = null as any;
export const getLocationsOutput: typeof import("./getLocations").getLocationsOutput = null as any;
utilities.lazyLoad(exports, ["getLocations","getLocationsOutput"], () => require("./getLocations"));

export { GetLocationsCloudArgs, GetLocationsCloudResult, GetLocationsCloudOutputArgs } from "./getLocationsCloud";
export const getLocationsCloud: typeof import("./getLocationsCloud").getLocationsCloud = null as any;
export const getLocationsCloudOutput: typeof import("./getLocationsCloud").getLocationsCloudOutput = null as any;
utilities.lazyLoad(exports, ["getLocationsCloud","getLocationsCloudOutput"], () => require("./getLocationsCloud"));

export { GetLocationsMarketsArgs, GetLocationsMarketsResult, GetLocationsMarketsOutputArgs } from "./getLocationsMarkets";
export const getLocationsMarkets: typeof import("./getLocationsMarkets").getLocationsMarkets = null as any;
export const getLocationsMarketsOutput: typeof import("./getLocationsMarkets").getLocationsMarketsOutput = null as any;
utilities.lazyLoad(exports, ["getLocationsMarkets","getLocationsMarketsOutput"], () => require("./getLocationsMarkets"));

export { GetLocationsPopZonesArgs, GetLocationsPopZonesResult, GetLocationsPopZonesOutputArgs } from "./getLocationsPopZones";
export const getLocationsPopZones: typeof import("./getLocationsPopZones").getLocationsPopZones = null as any;
export const getLocationsPopZonesOutput: typeof import("./getLocationsPopZones").getLocationsPopZonesOutput = null as any;
utilities.lazyLoad(exports, ["getLocationsPopZones","getLocationsPopZonesOutput"], () => require("./getLocationsPopZones"));

export { GetLocationsPortAvailabilityArgs, GetLocationsPortAvailabilityResult, GetLocationsPortAvailabilityOutputArgs } from "./getLocationsPortAvailability";
export const getLocationsPortAvailability: typeof import("./getLocationsPortAvailability").getLocationsPortAvailability = null as any;
export const getLocationsPortAvailabilityOutput: typeof import("./getLocationsPortAvailability").getLocationsPortAvailabilityOutput = null as any;
utilities.lazyLoad(exports, ["getLocationsPortAvailability","getLocationsPortAvailabilityOutput"], () => require("./getLocationsPortAvailability"));

export { GetLocationsRegionsArgs, GetLocationsRegionsResult, GetLocationsRegionsOutputArgs } from "./getLocationsRegions";
export const getLocationsRegions: typeof import("./getLocationsRegions").getLocationsRegions = null as any;
export const getLocationsRegionsOutput: typeof import("./getLocationsRegions").getLocationsRegionsOutput = null as any;
utilities.lazyLoad(exports, ["getLocationsRegions","getLocationsRegionsOutput"], () => require("./getLocationsRegions"));

export { GetMarketplaceServicePortRequestsArgs, GetMarketplaceServicePortRequestsResult, GetMarketplaceServicePortRequestsOutputArgs } from "./getMarketplaceServicePortRequests";
export const getMarketplaceServicePortRequests: typeof import("./getMarketplaceServicePortRequests").getMarketplaceServicePortRequests = null as any;
export const getMarketplaceServicePortRequestsOutput: typeof import("./getMarketplaceServicePortRequests").getMarketplaceServicePortRequestsOutput = null as any;
utilities.lazyLoad(exports, ["getMarketplaceServicePortRequests","getMarketplaceServicePortRequestsOutput"], () => require("./getMarketplaceServicePortRequests"));

export { GetOutboundCrossConnectsArgs, GetOutboundCrossConnectsResult, GetOutboundCrossConnectsOutputArgs } from "./getOutboundCrossConnects";
export const getOutboundCrossConnects: typeof import("./getOutboundCrossConnects").getOutboundCrossConnects = null as any;
export const getOutboundCrossConnectsOutput: typeof import("./getOutboundCrossConnects").getOutboundCrossConnectsOutput = null as any;
utilities.lazyLoad(exports, ["getOutboundCrossConnects","getOutboundCrossConnectsOutput"], () => require("./getOutboundCrossConnects"));

export { GetPointToPointsArgs, GetPointToPointsResult, GetPointToPointsOutputArgs } from "./getPointToPoints";
export const getPointToPoints: typeof import("./getPointToPoints").getPointToPoints = null as any;
export const getPointToPointsOutput: typeof import("./getPointToPoints").getPointToPointsOutput = null as any;
utilities.lazyLoad(exports, ["getPointToPoints","getPointToPointsOutput"], () => require("./getPointToPoints"));

export { GetPortDeviceInfoArgs, GetPortDeviceInfoResult, GetPortDeviceInfoOutputArgs } from "./getPortDeviceInfo";
export const getPortDeviceInfo: typeof import("./getPortDeviceInfo").getPortDeviceInfo = null as any;
export const getPortDeviceInfoOutput: typeof import("./getPortDeviceInfo").getPortDeviceInfoOutput = null as any;
utilities.lazyLoad(exports, ["getPortDeviceInfo","getPortDeviceInfoOutput"], () => require("./getPortDeviceInfo"));

export { GetPortRouterLogsArgs, GetPortRouterLogsResult, GetPortRouterLogsOutputArgs } from "./getPortRouterLogs";
export const getPortRouterLogs: typeof import("./getPortRouterLogs").getPortRouterLogs = null as any;
export const getPortRouterLogsOutput: typeof import("./getPortRouterLogs").getPortRouterLogsOutput = null as any;
utilities.lazyLoad(exports, ["getPortRouterLogs","getPortRouterLogsOutput"], () => require("./getPortRouterLogs"));

export { GetPortVlansArgs, GetPortVlansResult, GetPortVlansOutputArgs } from "./getPortVlans";
export const getPortVlans: typeof import("./getPortVlans").getPortVlans = null as any;
export const getPortVlansOutput: typeof import("./getPortVlans").getPortVlansOutput = null as any;
utilities.lazyLoad(exports, ["getPortVlans","getPortVlansOutput"], () => require("./getPortVlans"));

export { GetPortsArgs, GetPortsResult, GetPortsOutputArgs } from "./getPorts";
export const getPorts: typeof import("./getPorts").getPorts = null as any;
export const getPortsOutput: typeof import("./getPorts").getPortsOutput = null as any;
utilities.lazyLoad(exports, ["getPorts","getPortsOutput"], () => require("./getPorts"));

export { GetQuickConnectRequestsArgs, GetQuickConnectRequestsResult, GetQuickConnectRequestsOutputArgs } from "./getQuickConnectRequests";
export const getQuickConnectRequests: typeof import("./getQuickConnectRequests").getQuickConnectRequests = null as any;
export const getQuickConnectRequestsOutput: typeof import("./getQuickConnectRequests").getQuickConnectRequestsOutput = null as any;
utilities.lazyLoad(exports, ["getQuickConnectRequests","getQuickConnectRequestsOutput"], () => require("./getQuickConnectRequests"));

export { GetVirtualCircuitsArgs, GetVirtualCircuitsResult, GetVirtualCircuitsOutputArgs } from "./getVirtualCircuits";
export const getVirtualCircuits: typeof import("./getVirtualCircuits").getVirtualCircuits = null as any;
export const getVirtualCircuitsOutput: typeof import("./getVirtualCircuits").getVirtualCircuitsOutput = null as any;
utilities.lazyLoad(exports, ["getVirtualCircuits","getVirtualCircuitsOutput"], () => require("./getVirtualCircuits"));

export { IxVirtualCircuitMarketplaceArgs, IxVirtualCircuitMarketplaceState } from "./ixVirtualCircuitMarketplace";
export type IxVirtualCircuitMarketplace = import("./ixVirtualCircuitMarketplace").IxVirtualCircuitMarketplace;
export const IxVirtualCircuitMarketplace: typeof import("./ixVirtualCircuitMarketplace").IxVirtualCircuitMarketplace = null as any;
utilities.lazyLoad(exports, ["IxVirtualCircuitMarketplace"], () => require("./ixVirtualCircuitMarketplace"));

export { LinkAggregationGroupArgs, LinkAggregationGroupState } from "./linkAggregationGroup";
export type LinkAggregationGroup = import("./linkAggregationGroup").LinkAggregationGroup;
export const LinkAggregationGroup: typeof import("./linkAggregationGroup").LinkAggregationGroup = null as any;
utilities.lazyLoad(exports, ["LinkAggregationGroup"], () => require("./linkAggregationGroup"));

export { MarketplaceServiceArgs, MarketplaceServiceState } from "./marketplaceService";
export type MarketplaceService = import("./marketplaceService").MarketplaceService;
export const MarketplaceService: typeof import("./marketplaceService").MarketplaceService = null as any;
utilities.lazyLoad(exports, ["MarketplaceService"], () => require("./marketplaceService"));

export { MarketplaceServicePortAcceptRequestArgs, MarketplaceServicePortAcceptRequestState } from "./marketplaceServicePortAcceptRequest";
export type MarketplaceServicePortAcceptRequest = import("./marketplaceServicePortAcceptRequest").MarketplaceServicePortAcceptRequest;
export const MarketplaceServicePortAcceptRequest: typeof import("./marketplaceServicePortAcceptRequest").MarketplaceServicePortAcceptRequest = null as any;
utilities.lazyLoad(exports, ["MarketplaceServicePortAcceptRequest"], () => require("./marketplaceServicePortAcceptRequest"));

export { MarketplaceServicePortRejectRequestArgs, MarketplaceServicePortRejectRequestState } from "./marketplaceServicePortRejectRequest";
export type MarketplaceServicePortRejectRequest = import("./marketplaceServicePortRejectRequest").MarketplaceServicePortRejectRequest;
export const MarketplaceServicePortRejectRequest: typeof import("./marketplaceServicePortRejectRequest").MarketplaceServicePortRejectRequest = null as any;
utilities.lazyLoad(exports, ["MarketplaceServicePortRejectRequest"], () => require("./marketplaceServicePortRejectRequest"));

export { OutboundCrossConnectArgs, OutboundCrossConnectState } from "./outboundCrossConnect";
export type OutboundCrossConnect = import("./outboundCrossConnect").OutboundCrossConnect;
export const OutboundCrossConnect: typeof import("./outboundCrossConnect").OutboundCrossConnect = null as any;
utilities.lazyLoad(exports, ["OutboundCrossConnect"], () => require("./outboundCrossConnect"));

export { PointToPointArgs, PointToPointState } from "./pointToPoint";
export type PointToPoint = import("./pointToPoint").PointToPoint;
export const PointToPoint: typeof import("./pointToPoint").PointToPoint = null as any;
utilities.lazyLoad(exports, ["PointToPoint"], () => require("./pointToPoint"));

export { PortArgs, PortState } from "./port";
export type Port = import("./port").Port;
export const Port: typeof import("./port").Port = null as any;
utilities.lazyLoad(exports, ["Port"], () => require("./port"));

export { PortLoaArgs, PortLoaState } from "./portLoa";
export type PortLoa = import("./portLoa").PortLoa;
export const PortLoa: typeof import("./portLoa").PortLoa = null as any;
utilities.lazyLoad(exports, ["PortLoa"], () => require("./portLoa"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { QuickConnectAcceptRequestArgs, QuickConnectAcceptRequestState } from "./quickConnectAcceptRequest";
export type QuickConnectAcceptRequest = import("./quickConnectAcceptRequest").QuickConnectAcceptRequest;
export const QuickConnectAcceptRequest: typeof import("./quickConnectAcceptRequest").QuickConnectAcceptRequest = null as any;
utilities.lazyLoad(exports, ["QuickConnectAcceptRequest"], () => require("./quickConnectAcceptRequest"));

export { QuickConnectRejectRequestArgs, QuickConnectRejectRequestState } from "./quickConnectRejectRequest";
export type QuickConnectRejectRequest = import("./quickConnectRejectRequest").QuickConnectRejectRequest;
export const QuickConnectRejectRequest: typeof import("./quickConnectRejectRequest").QuickConnectRejectRequest = null as any;
utilities.lazyLoad(exports, ["QuickConnectRejectRequest"], () => require("./quickConnectRejectRequest"));

export { StreamingEventsArgs, StreamingEventsState } from "./streamingEvents";
export type StreamingEvents = import("./streamingEvents").StreamingEvents;
export const StreamingEvents: typeof import("./streamingEvents").StreamingEvents = null as any;
utilities.lazyLoad(exports, ["StreamingEvents"], () => require("./streamingEvents"));

export { UserArgs, UserState } from "./user";
export type User = import("./user").User;
export const User: typeof import("./user").User = null as any;
utilities.lazyLoad(exports, ["User"], () => require("./user"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "packetfabric:index/backboneVirtualCircuit:BackboneVirtualCircuit":
                return new BackboneVirtualCircuit(name, <any>undefined, { urn })
            case "packetfabric:index/backboneVirtualCircuitMarketplace:BackboneVirtualCircuitMarketplace":
                return new BackboneVirtualCircuitMarketplace(name, <any>undefined, { urn })
            case "packetfabric:index/backboneVirtualCircuitSpeedBurst:BackboneVirtualCircuitSpeedBurst":
                return new BackboneVirtualCircuitSpeedBurst(name, <any>undefined, { urn })
            case "packetfabric:index/cloudProviderCredentialAws:CloudProviderCredentialAws":
                return new CloudProviderCredentialAws(name, <any>undefined, { urn })
            case "packetfabric:index/cloudProviderCredentialGoogle:CloudProviderCredentialGoogle":
                return new CloudProviderCredentialGoogle(name, <any>undefined, { urn })
            case "packetfabric:index/cloudRouter:CloudRouter":
                return new CloudRouter(name, <any>undefined, { urn })
            case "packetfabric:index/cloudRouterBgpSession:CloudRouterBgpSession":
                return new CloudRouterBgpSession(name, <any>undefined, { urn })
            case "packetfabric:index/cloudRouterConnectionAws:CloudRouterConnectionAws":
                return new CloudRouterConnectionAws(name, <any>undefined, { urn })
            case "packetfabric:index/cloudRouterConnectionAzure:CloudRouterConnectionAzure":
                return new CloudRouterConnectionAzure(name, <any>undefined, { urn })
            case "packetfabric:index/cloudRouterConnectionGoogle:CloudRouterConnectionGoogle":
                return new CloudRouterConnectionGoogle(name, <any>undefined, { urn })
            case "packetfabric:index/cloudRouterConnectionIbm:CloudRouterConnectionIbm":
                return new CloudRouterConnectionIbm(name, <any>undefined, { urn })
            case "packetfabric:index/cloudRouterConnectionIpsec:CloudRouterConnectionIpsec":
                return new CloudRouterConnectionIpsec(name, <any>undefined, { urn })
            case "packetfabric:index/cloudRouterConnectionOracle:CloudRouterConnectionOracle":
                return new CloudRouterConnectionOracle(name, <any>undefined, { urn })
            case "packetfabric:index/cloudRouterConnectionPort:CloudRouterConnectionPort":
                return new CloudRouterConnectionPort(name, <any>undefined, { urn })
            case "packetfabric:index/cloudRouterQuickConnect:CloudRouterQuickConnect":
                return new CloudRouterQuickConnect(name, <any>undefined, { urn })
            case "packetfabric:index/csAwsDedicatedConnection:CsAwsDedicatedConnection":
                return new CsAwsDedicatedConnection(name, <any>undefined, { urn })
            case "packetfabric:index/csAwsHostedConnection:CsAwsHostedConnection":
                return new CsAwsHostedConnection(name, <any>undefined, { urn })
            case "packetfabric:index/csAwsHostedMarketplaceConnection:CsAwsHostedMarketplaceConnection":
                return new CsAwsHostedMarketplaceConnection(name, <any>undefined, { urn })
            case "packetfabric:index/csAzureDedicatedConnection:CsAzureDedicatedConnection":
                return new CsAzureDedicatedConnection(name, <any>undefined, { urn })
            case "packetfabric:index/csAzureHostedConnection:CsAzureHostedConnection":
                return new CsAzureHostedConnection(name, <any>undefined, { urn })
            case "packetfabric:index/csAzureHostedMarketplaceConnection:CsAzureHostedMarketplaceConnection":
                return new CsAzureHostedMarketplaceConnection(name, <any>undefined, { urn })
            case "packetfabric:index/csGoogleDedicatedConnection:CsGoogleDedicatedConnection":
                return new CsGoogleDedicatedConnection(name, <any>undefined, { urn })
            case "packetfabric:index/csGoogleHostedConnection:CsGoogleHostedConnection":
                return new CsGoogleHostedConnection(name, <any>undefined, { urn })
            case "packetfabric:index/csGoogleHostedMarketplaceConnection:CsGoogleHostedMarketplaceConnection":
                return new CsGoogleHostedMarketplaceConnection(name, <any>undefined, { urn })
            case "packetfabric:index/csIbmHostedConnection:CsIbmHostedConnection":
                return new CsIbmHostedConnection(name, <any>undefined, { urn })
            case "packetfabric:index/csOracleHostedConnection:CsOracleHostedConnection":
                return new CsOracleHostedConnection(name, <any>undefined, { urn })
            case "packetfabric:index/csOracleHostedMarketplaceConnection:CsOracleHostedMarketplaceConnection":
                return new CsOracleHostedMarketplaceConnection(name, <any>undefined, { urn })
            case "packetfabric:index/document:Document":
                return new Document(name, <any>undefined, { urn })
            case "packetfabric:index/flexBandwidth:FlexBandwidth":
                return new FlexBandwidth(name, <any>undefined, { urn })
            case "packetfabric:index/ixVirtualCircuitMarketplace:IxVirtualCircuitMarketplace":
                return new IxVirtualCircuitMarketplace(name, <any>undefined, { urn })
            case "packetfabric:index/linkAggregationGroup:LinkAggregationGroup":
                return new LinkAggregationGroup(name, <any>undefined, { urn })
            case "packetfabric:index/marketplaceService:MarketplaceService":
                return new MarketplaceService(name, <any>undefined, { urn })
            case "packetfabric:index/marketplaceServicePortAcceptRequest:MarketplaceServicePortAcceptRequest":
                return new MarketplaceServicePortAcceptRequest(name, <any>undefined, { urn })
            case "packetfabric:index/marketplaceServicePortRejectRequest:MarketplaceServicePortRejectRequest":
                return new MarketplaceServicePortRejectRequest(name, <any>undefined, { urn })
            case "packetfabric:index/outboundCrossConnect:OutboundCrossConnect":
                return new OutboundCrossConnect(name, <any>undefined, { urn })
            case "packetfabric:index/pointToPoint:PointToPoint":
                return new PointToPoint(name, <any>undefined, { urn })
            case "packetfabric:index/port:Port":
                return new Port(name, <any>undefined, { urn })
            case "packetfabric:index/portLoa:PortLoa":
                return new PortLoa(name, <any>undefined, { urn })
            case "packetfabric:index/quickConnectAcceptRequest:QuickConnectAcceptRequest":
                return new QuickConnectAcceptRequest(name, <any>undefined, { urn })
            case "packetfabric:index/quickConnectRejectRequest:QuickConnectRejectRequest":
                return new QuickConnectRejectRequest(name, <any>undefined, { urn })
            case "packetfabric:index/streamingEvents:StreamingEvents":
                return new StreamingEvents(name, <any>undefined, { urn })
            case "packetfabric:index/user:User":
                return new User(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("packetfabric", "index/backboneVirtualCircuit", _module)
pulumi.runtime.registerResourceModule("packetfabric", "index/backboneVirtualCircuitMarketplace", _module)
pulumi.runtime.registerResourceModule("packetfabric", "index/backboneVirtualCircuitSpeedBurst", _module)
pulumi.runtime.registerResourceModule("packetfabric", "index/cloudProviderCredentialAws", _module)
pulumi.runtime.registerResourceModule("packetfabric", "index/cloudProviderCredentialGoogle", _module)
pulumi.runtime.registerResourceModule("packetfabric", "index/cloudRouter", _module)
pulumi.runtime.registerResourceModule("packetfabric", "index/cloudRouterBgpSession", _module)
pulumi.runtime.registerResourceModule("packetfabric", "index/cloudRouterConnectionAws", _module)
pulumi.runtime.registerResourceModule("packetfabric", "index/cloudRouterConnectionAzure", _module)
pulumi.runtime.registerResourceModule("packetfabric", "index/cloudRouterConnectionGoogle", _module)
pulumi.runtime.registerResourceModule("packetfabric", "index/cloudRouterConnectionIbm", _module)
pulumi.runtime.registerResourceModule("packetfabric", "index/cloudRouterConnectionIpsec", _module)
pulumi.runtime.registerResourceModule("packetfabric", "index/cloudRouterConnectionOracle", _module)
pulumi.runtime.registerResourceModule("packetfabric", "index/cloudRouterConnectionPort", _module)
pulumi.runtime.registerResourceModule("packetfabric", "index/cloudRouterQuickConnect", _module)
pulumi.runtime.registerResourceModule("packetfabric", "index/csAwsDedicatedConnection", _module)
pulumi.runtime.registerResourceModule("packetfabric", "index/csAwsHostedConnection", _module)
pulumi.runtime.registerResourceModule("packetfabric", "index/csAwsHostedMarketplaceConnection", _module)
pulumi.runtime.registerResourceModule("packetfabric", "index/csAzureDedicatedConnection", _module)
pulumi.runtime.registerResourceModule("packetfabric", "index/csAzureHostedConnection", _module)
pulumi.runtime.registerResourceModule("packetfabric", "index/csAzureHostedMarketplaceConnection", _module)
pulumi.runtime.registerResourceModule("packetfabric", "index/csGoogleDedicatedConnection", _module)
pulumi.runtime.registerResourceModule("packetfabric", "index/csGoogleHostedConnection", _module)
pulumi.runtime.registerResourceModule("packetfabric", "index/csGoogleHostedMarketplaceConnection", _module)
pulumi.runtime.registerResourceModule("packetfabric", "index/csIbmHostedConnection", _module)
pulumi.runtime.registerResourceModule("packetfabric", "index/csOracleHostedConnection", _module)
pulumi.runtime.registerResourceModule("packetfabric", "index/csOracleHostedMarketplaceConnection", _module)
pulumi.runtime.registerResourceModule("packetfabric", "index/document", _module)
pulumi.runtime.registerResourceModule("packetfabric", "index/flexBandwidth", _module)
pulumi.runtime.registerResourceModule("packetfabric", "index/ixVirtualCircuitMarketplace", _module)
pulumi.runtime.registerResourceModule("packetfabric", "index/linkAggregationGroup", _module)
pulumi.runtime.registerResourceModule("packetfabric", "index/marketplaceService", _module)
pulumi.runtime.registerResourceModule("packetfabric", "index/marketplaceServicePortAcceptRequest", _module)
pulumi.runtime.registerResourceModule("packetfabric", "index/marketplaceServicePortRejectRequest", _module)
pulumi.runtime.registerResourceModule("packetfabric", "index/outboundCrossConnect", _module)
pulumi.runtime.registerResourceModule("packetfabric", "index/pointToPoint", _module)
pulumi.runtime.registerResourceModule("packetfabric", "index/port", _module)
pulumi.runtime.registerResourceModule("packetfabric", "index/portLoa", _module)
pulumi.runtime.registerResourceModule("packetfabric", "index/quickConnectAcceptRequest", _module)
pulumi.runtime.registerResourceModule("packetfabric", "index/quickConnectRejectRequest", _module)
pulumi.runtime.registerResourceModule("packetfabric", "index/streamingEvents", _module)
pulumi.runtime.registerResourceModule("packetfabric", "index/user", _module)
pulumi.runtime.registerResourcePackage("packetfabric", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:packetfabric") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
