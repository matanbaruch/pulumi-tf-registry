// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class MarketplaceService extends pulumi.CustomResource {
    /**
     * Get an existing MarketplaceService resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MarketplaceServiceState, opts?: pulumi.CustomResourceOptions): MarketplaceService {
        return new MarketplaceService(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'packetfabric:index/marketplaceService:MarketplaceService';

    /**
     * Returns true if the given object is an instance of MarketplaceService.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MarketplaceService {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MarketplaceService.__pulumiType;
    }

    /**
     * Categories in which the service will fit. Enum: `"cloud-computing"`, `"content-delivery-network"`, `"edge-computing"`,
     * `"sd-wan"`, `"data-storage"`, `"developer-platform"`, `"internet-service-provider"`, `"security"`,
     * `"video-conferencing"`, `"voice-and-messaging"`, `"web-hosting"`, `"internet-of-things"`, `"private-connectivity"`,
     * `"bare-metal-hosting"`
     */
    public readonly categories!: pulumi.Output<string[] | undefined>;
    /**
     * The circuit ID of the Cloud Router this service is associated with (Quick Connect service only).
     */
    public readonly cloudRouterCircuitId!: pulumi.Output<string | undefined>;
    /**
     * The circuit IDs of the Cloud Router connections that will be included in this service. (Quick Connect service only).
     */
    public readonly connectionCircuitIds!: pulumi.Output<string[] | undefined>;
    /**
     * Brief description of what the service does.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * Locations in which the service will operate (port service only). The location should be a POP, e.g. `NYC5`.
     */
    public readonly locations!: pulumi.Output<string[] | undefined>;
    /**
     * Name of the service.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * If published, the service appears in your marketplace listing.
     */
    public readonly published!: pulumi.Output<boolean>;
    /**
     * The route set circuit ID.
     */
    public /*out*/ readonly routeSetCircuitId!: pulumi.Output<string>;
    /**
     * The Cloud Router route set to export (Quick Connect service only).
     */
    public readonly routeSets!: pulumi.Output<outputs.MarketplaceServiceRouteSet[] | undefined>;
    /**
     * The service type of this service. Enum: `"port-service"`, `"quick-connect-service"` Defaults: port-service
     */
    public readonly serviceType!: pulumi.Output<string | undefined>;
    /**
     * The marketplace service UUID
     */
    public /*out*/ readonly serviceUuid!: pulumi.Output<string>;
    /**
     * A SKU identifier for the service. This is not shown to the A side user (the requestor).
     */
    public readonly sku!: pulumi.Output<string | undefined>;
    /**
     * The marketplace service state.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.MarketplaceServiceTimeouts | undefined>;

    /**
     * Create a MarketplaceService resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MarketplaceServiceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MarketplaceServiceArgs | MarketplaceServiceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MarketplaceServiceState | undefined;
            resourceInputs["categories"] = state ? state.categories : undefined;
            resourceInputs["cloudRouterCircuitId"] = state ? state.cloudRouterCircuitId : undefined;
            resourceInputs["connectionCircuitIds"] = state ? state.connectionCircuitIds : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["locations"] = state ? state.locations : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["published"] = state ? state.published : undefined;
            resourceInputs["routeSetCircuitId"] = state ? state.routeSetCircuitId : undefined;
            resourceInputs["routeSets"] = state ? state.routeSets : undefined;
            resourceInputs["serviceType"] = state ? state.serviceType : undefined;
            resourceInputs["serviceUuid"] = state ? state.serviceUuid : undefined;
            resourceInputs["sku"] = state ? state.sku : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as MarketplaceServiceArgs | undefined;
            if ((!args || args.description === undefined) && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if ((!args || args.published === undefined) && !opts.urn) {
                throw new Error("Missing required property 'published'");
            }
            resourceInputs["categories"] = args ? args.categories : undefined;
            resourceInputs["cloudRouterCircuitId"] = args ? args.cloudRouterCircuitId : undefined;
            resourceInputs["connectionCircuitIds"] = args ? args.connectionCircuitIds : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["locations"] = args ? args.locations : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["published"] = args ? args.published : undefined;
            resourceInputs["routeSets"] = args ? args.routeSets : undefined;
            resourceInputs["serviceType"] = args ? args.serviceType : undefined;
            resourceInputs["sku"] = args ? args.sku : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["routeSetCircuitId"] = undefined /*out*/;
            resourceInputs["serviceUuid"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MarketplaceService.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering MarketplaceService resources.
 */
export interface MarketplaceServiceState {
    /**
     * Categories in which the service will fit. Enum: `"cloud-computing"`, `"content-delivery-network"`, `"edge-computing"`,
     * `"sd-wan"`, `"data-storage"`, `"developer-platform"`, `"internet-service-provider"`, `"security"`,
     * `"video-conferencing"`, `"voice-and-messaging"`, `"web-hosting"`, `"internet-of-things"`, `"private-connectivity"`,
     * `"bare-metal-hosting"`
     */
    categories?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The circuit ID of the Cloud Router this service is associated with (Quick Connect service only).
     */
    cloudRouterCircuitId?: pulumi.Input<string>;
    /**
     * The circuit IDs of the Cloud Router connections that will be included in this service. (Quick Connect service only).
     */
    connectionCircuitIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Brief description of what the service does.
     */
    description?: pulumi.Input<string>;
    /**
     * Locations in which the service will operate (port service only). The location should be a POP, e.g. `NYC5`.
     */
    locations?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of the service.
     */
    name?: pulumi.Input<string>;
    /**
     * If published, the service appears in your marketplace listing.
     */
    published?: pulumi.Input<boolean>;
    /**
     * The route set circuit ID.
     */
    routeSetCircuitId?: pulumi.Input<string>;
    /**
     * The Cloud Router route set to export (Quick Connect service only).
     */
    routeSets?: pulumi.Input<pulumi.Input<inputs.MarketplaceServiceRouteSet>[]>;
    /**
     * The service type of this service. Enum: `"port-service"`, `"quick-connect-service"` Defaults: port-service
     */
    serviceType?: pulumi.Input<string>;
    /**
     * The marketplace service UUID
     */
    serviceUuid?: pulumi.Input<string>;
    /**
     * A SKU identifier for the service. This is not shown to the A side user (the requestor).
     */
    sku?: pulumi.Input<string>;
    /**
     * The marketplace service state.
     */
    state?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.MarketplaceServiceTimeouts>;
}

/**
 * The set of arguments for constructing a MarketplaceService resource.
 */
export interface MarketplaceServiceArgs {
    /**
     * Categories in which the service will fit. Enum: `"cloud-computing"`, `"content-delivery-network"`, `"edge-computing"`,
     * `"sd-wan"`, `"data-storage"`, `"developer-platform"`, `"internet-service-provider"`, `"security"`,
     * `"video-conferencing"`, `"voice-and-messaging"`, `"web-hosting"`, `"internet-of-things"`, `"private-connectivity"`,
     * `"bare-metal-hosting"`
     */
    categories?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The circuit ID of the Cloud Router this service is associated with (Quick Connect service only).
     */
    cloudRouterCircuitId?: pulumi.Input<string>;
    /**
     * The circuit IDs of the Cloud Router connections that will be included in this service. (Quick Connect service only).
     */
    connectionCircuitIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Brief description of what the service does.
     */
    description: pulumi.Input<string>;
    /**
     * Locations in which the service will operate (port service only). The location should be a POP, e.g. `NYC5`.
     */
    locations?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of the service.
     */
    name?: pulumi.Input<string>;
    /**
     * If published, the service appears in your marketplace listing.
     */
    published: pulumi.Input<boolean>;
    /**
     * The Cloud Router route set to export (Quick Connect service only).
     */
    routeSets?: pulumi.Input<pulumi.Input<inputs.MarketplaceServiceRouteSet>[]>;
    /**
     * The service type of this service. Enum: `"port-service"`, `"quick-connect-service"` Defaults: port-service
     */
    serviceType?: pulumi.Input<string>;
    /**
     * A SKU identifier for the service. This is not shown to the A side user (the requestor).
     */
    sku?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.MarketplaceServiceTimeouts>;
}
