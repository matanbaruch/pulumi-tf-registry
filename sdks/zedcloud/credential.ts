// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Credential extends pulumi.CustomResource {
    /**
     * Get an existing Credential resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CredentialState, opts?: pulumi.CustomResourceOptions): Credential {
        return new Credential(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'zedcloud:index/credential:Credential';

    /**
     * Returns true if the given object is an instance of Credential.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Credential {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Credential.__pulumiType;
    }

    public readonly currentCred!: pulumi.Output<string | undefined>;
    public readonly forgot!: pulumi.Output<boolean | undefined>;
    public readonly newCred!: pulumi.Output<string | undefined>;
    public readonly owner!: pulumi.Output<string | undefined>;
    public readonly salt!: pulumi.Output<number | undefined>;
    public readonly type!: pulumi.Output<string | undefined>;

    /**
     * Create a Credential resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: CredentialArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CredentialArgs | CredentialState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CredentialState | undefined;
            resourceInputs["currentCred"] = state ? state.currentCred : undefined;
            resourceInputs["forgot"] = state ? state.forgot : undefined;
            resourceInputs["newCred"] = state ? state.newCred : undefined;
            resourceInputs["owner"] = state ? state.owner : undefined;
            resourceInputs["salt"] = state ? state.salt : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as CredentialArgs | undefined;
            resourceInputs["currentCred"] = args?.currentCred ? pulumi.secret(args.currentCred) : undefined;
            resourceInputs["forgot"] = args ? args.forgot : undefined;
            resourceInputs["newCred"] = args?.newCred ? pulumi.secret(args.newCred) : undefined;
            resourceInputs["owner"] = args ? args.owner : undefined;
            resourceInputs["salt"] = args ? args.salt : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["currentCred", "newCred"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Credential.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Credential resources.
 */
export interface CredentialState {
    currentCred?: pulumi.Input<string>;
    forgot?: pulumi.Input<boolean>;
    newCred?: pulumi.Input<string>;
    owner?: pulumi.Input<string>;
    salt?: pulumi.Input<number>;
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Credential resource.
 */
export interface CredentialArgs {
    currentCred?: pulumi.Input<string>;
    forgot?: pulumi.Input<boolean>;
    newCred?: pulumi.Input<string>;
    owner?: pulumi.Input<string>;
    salt?: pulumi.Input<number>;
    type?: pulumi.Input<string>;
}
