// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Role extends pulumi.CustomResource {
    /**
     * Get an existing Role resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RoleState, opts?: pulumi.CustomResourceOptions): Role {
        return new Role(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'zedcloud:index/role:Role';

    /**
     * Returns true if the given object is an instance of Role.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Role {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Role.__pulumiType;
    }

    /**
     * Detailed description of the role
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * User defined name of the role. Name cannot be changed once created
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Map of project tags filter
     */
    public readonly projectTags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * System defined info
     */
    public /*out*/ readonly revisions!: pulumi.Output<outputs.RoleRevision[]>;
    /**
     * Scopes/Permissions associated with the role
     */
    public readonly scopes!: pulumi.Output<outputs.RoleScope[]>;
    /**
     * State of the role
     */
    public readonly state!: pulumi.Output<string | undefined>;
    /**
     * User defined title of the role. Title can be changed anytime
     */
    public readonly title!: pulumi.Output<string>;
    /**
     * Type of the role
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a Role resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RoleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RoleArgs | RoleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RoleState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["projectTags"] = state ? state.projectTags : undefined;
            resourceInputs["revisions"] = state ? state.revisions : undefined;
            resourceInputs["scopes"] = state ? state.scopes : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["title"] = state ? state.title : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as RoleArgs | undefined;
            if ((!args || args.scopes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scopes'");
            }
            if ((!args || args.title === undefined) && !opts.urn) {
                throw new Error("Missing required property 'title'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["projectTags"] = args ? args.projectTags : undefined;
            resourceInputs["scopes"] = args ? args.scopes : undefined;
            resourceInputs["state"] = args ? args.state : undefined;
            resourceInputs["title"] = args ? args.title : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["revisions"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Role.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Role resources.
 */
export interface RoleState {
    /**
     * Detailed description of the role
     */
    description?: pulumi.Input<string>;
    /**
     * User defined name of the role. Name cannot be changed once created
     */
    name?: pulumi.Input<string>;
    /**
     * Map of project tags filter
     */
    projectTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * System defined info
     */
    revisions?: pulumi.Input<pulumi.Input<inputs.RoleRevision>[]>;
    /**
     * Scopes/Permissions associated with the role
     */
    scopes?: pulumi.Input<pulumi.Input<inputs.RoleScope>[]>;
    /**
     * State of the role
     */
    state?: pulumi.Input<string>;
    /**
     * User defined title of the role. Title can be changed anytime
     */
    title?: pulumi.Input<string>;
    /**
     * Type of the role
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Role resource.
 */
export interface RoleArgs {
    /**
     * Detailed description of the role
     */
    description?: pulumi.Input<string>;
    /**
     * User defined name of the role. Name cannot be changed once created
     */
    name?: pulumi.Input<string>;
    /**
     * Map of project tags filter
     */
    projectTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Scopes/Permissions associated with the role
     */
    scopes: pulumi.Input<pulumi.Input<inputs.RoleScope>[]>;
    /**
     * State of the role
     */
    state?: pulumi.Input<string>;
    /**
     * User defined title of the role. Title can be changed anytime
     */
    title: pulumi.Input<string>;
    /**
     * Type of the role
     */
    type: pulumi.Input<string>;
}
