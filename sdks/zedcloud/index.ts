// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { ApplicationArgs, ApplicationState } from "./application";
export type Application = import("./application").Application;
export const Application: typeof import("./application").Application = null as any;
utilities.lazyLoad(exports, ["Application"], () => require("./application"));

export { ApplicationInstanceArgs, ApplicationInstanceState } from "./applicationInstance";
export type ApplicationInstance = import("./applicationInstance").ApplicationInstance;
export const ApplicationInstance: typeof import("./applicationInstance").ApplicationInstance = null as any;
utilities.lazyLoad(exports, ["ApplicationInstance"], () => require("./applicationInstance"));

export { CredentialArgs, CredentialState } from "./credential";
export type Credential = import("./credential").Credential;
export const Credential: typeof import("./credential").Credential = null as any;
utilities.lazyLoad(exports, ["Credential"], () => require("./credential"));

export { DatastoreArgs, DatastoreState } from "./datastore";
export type Datastore = import("./datastore").Datastore;
export const Datastore: typeof import("./datastore").Datastore = null as any;
utilities.lazyLoad(exports, ["Datastore"], () => require("./datastore"));

export { EdgenodeArgs, EdgenodeState } from "./edgenode";
export type Edgenode = import("./edgenode").Edgenode;
export const Edgenode: typeof import("./edgenode").Edgenode = null as any;
utilities.lazyLoad(exports, ["Edgenode"], () => require("./edgenode"));

export { GetApplicationArgs, GetApplicationResult, GetApplicationOutputArgs } from "./getApplication";
export const getApplication: typeof import("./getApplication").getApplication = null as any;
export const getApplicationOutput: typeof import("./getApplication").getApplicationOutput = null as any;
utilities.lazyLoad(exports, ["getApplication","getApplicationOutput"], () => require("./getApplication"));

export { GetApplicationInstanceArgs, GetApplicationInstanceResult, GetApplicationInstanceOutputArgs } from "./getApplicationInstance";
export const getApplicationInstance: typeof import("./getApplicationInstance").getApplicationInstance = null as any;
export const getApplicationInstanceOutput: typeof import("./getApplicationInstance").getApplicationInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getApplicationInstance","getApplicationInstanceOutput"], () => require("./getApplicationInstance"));

export { GetCredentialArgs, GetCredentialResult, GetCredentialOutputArgs } from "./getCredential";
export const getCredential: typeof import("./getCredential").getCredential = null as any;
export const getCredentialOutput: typeof import("./getCredential").getCredentialOutput = null as any;
utilities.lazyLoad(exports, ["getCredential","getCredentialOutput"], () => require("./getCredential"));

export { GetDatastoreArgs, GetDatastoreResult, GetDatastoreOutputArgs } from "./getDatastore";
export const getDatastore: typeof import("./getDatastore").getDatastore = null as any;
export const getDatastoreOutput: typeof import("./getDatastore").getDatastoreOutput = null as any;
utilities.lazyLoad(exports, ["getDatastore","getDatastoreOutput"], () => require("./getDatastore"));

export { GetEdgenodeArgs, GetEdgenodeResult, GetEdgenodeOutputArgs } from "./getEdgenode";
export const getEdgenode: typeof import("./getEdgenode").getEdgenode = null as any;
export const getEdgenodeOutput: typeof import("./getEdgenode").getEdgenodeOutput = null as any;
utilities.lazyLoad(exports, ["getEdgenode","getEdgenodeOutput"], () => require("./getEdgenode"));

export { GetImageArgs, GetImageResult, GetImageOutputArgs } from "./getImage";
export const getImage: typeof import("./getImage").getImage = null as any;
export const getImageOutput: typeof import("./getImage").getImageOutput = null as any;
utilities.lazyLoad(exports, ["getImage","getImageOutput"], () => require("./getImage"));

export { GetNetworkArgs, GetNetworkResult, GetNetworkOutputArgs } from "./getNetwork";
export const getNetwork: typeof import("./getNetwork").getNetwork = null as any;
export const getNetworkOutput: typeof import("./getNetwork").getNetworkOutput = null as any;
utilities.lazyLoad(exports, ["getNetwork","getNetworkOutput"], () => require("./getNetwork"));

export { GetNetworkInstanceArgs, GetNetworkInstanceResult, GetNetworkInstanceOutputArgs } from "./getNetworkInstance";
export const getNetworkInstance: typeof import("./getNetworkInstance").getNetworkInstance = null as any;
export const getNetworkInstanceOutput: typeof import("./getNetworkInstance").getNetworkInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkInstance","getNetworkInstanceOutput"], () => require("./getNetworkInstance"));

export { GetPatchEnvelopeArgs, GetPatchEnvelopeResult, GetPatchEnvelopeOutputArgs } from "./getPatchEnvelope";
export const getPatchEnvelope: typeof import("./getPatchEnvelope").getPatchEnvelope = null as any;
export const getPatchEnvelopeOutput: typeof import("./getPatchEnvelope").getPatchEnvelopeOutput = null as any;
utilities.lazyLoad(exports, ["getPatchEnvelope","getPatchEnvelopeOutput"], () => require("./getPatchEnvelope"));

export { GetProjectArgs, GetProjectResult, GetProjectOutputArgs } from "./getProject";
export const getProject: typeof import("./getProject").getProject = null as any;
export const getProjectOutput: typeof import("./getProject").getProjectOutput = null as any;
utilities.lazyLoad(exports, ["getProject","getProjectOutput"], () => require("./getProject"));

export { GetRoleArgs, GetRoleResult, GetRoleOutputArgs } from "./getRole";
export const getRole: typeof import("./getRole").getRole = null as any;
export const getRoleOutput: typeof import("./getRole").getRoleOutput = null as any;
utilities.lazyLoad(exports, ["getRole","getRoleOutput"], () => require("./getRole"));

export { GetUserArgs, GetUserResult, GetUserOutputArgs } from "./getUser";
export const getUser: typeof import("./getUser").getUser = null as any;
export const getUserOutput: typeof import("./getUser").getUserOutput = null as any;
utilities.lazyLoad(exports, ["getUser","getUserOutput"], () => require("./getUser"));

export { GetVolumeInstanceArgs, GetVolumeInstanceResult, GetVolumeInstanceOutputArgs } from "./getVolumeInstance";
export const getVolumeInstance: typeof import("./getVolumeInstance").getVolumeInstance = null as any;
export const getVolumeInstanceOutput: typeof import("./getVolumeInstance").getVolumeInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getVolumeInstance","getVolumeInstanceOutput"], () => require("./getVolumeInstance"));

export { ImageArgs, ImageState } from "./image";
export type Image = import("./image").Image;
export const Image: typeof import("./image").Image = null as any;
utilities.lazyLoad(exports, ["Image"], () => require("./image"));

export { NetworkArgs, NetworkState } from "./network";
export type Network = import("./network").Network;
export const Network: typeof import("./network").Network = null as any;
utilities.lazyLoad(exports, ["Network"], () => require("./network"));

export { NetworkInstanceArgs, NetworkInstanceState } from "./networkInstance";
export type NetworkInstance = import("./networkInstance").NetworkInstance;
export const NetworkInstance: typeof import("./networkInstance").NetworkInstance = null as any;
utilities.lazyLoad(exports, ["NetworkInstance"], () => require("./networkInstance"));

export { PatchEnvelopeArgs, PatchEnvelopeState } from "./patchEnvelope";
export type PatchEnvelope = import("./patchEnvelope").PatchEnvelope;
export const PatchEnvelope: typeof import("./patchEnvelope").PatchEnvelope = null as any;
utilities.lazyLoad(exports, ["PatchEnvelope"], () => require("./patchEnvelope"));

export { PatchReferenceUpdateArgs, PatchReferenceUpdateState } from "./patchReferenceUpdate";
export type PatchReferenceUpdate = import("./patchReferenceUpdate").PatchReferenceUpdate;
export const PatchReferenceUpdate: typeof import("./patchReferenceUpdate").PatchReferenceUpdate = null as any;
utilities.lazyLoad(exports, ["PatchReferenceUpdate"], () => require("./patchReferenceUpdate"));

export { ProjectArgs, ProjectState } from "./project";
export type Project = import("./project").Project;
export const Project: typeof import("./project").Project = null as any;
utilities.lazyLoad(exports, ["Project"], () => require("./project"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { RoleArgs, RoleState } from "./role";
export type Role = import("./role").Role;
export const Role: typeof import("./role").Role = null as any;
utilities.lazyLoad(exports, ["Role"], () => require("./role"));

export { UserArgs, UserState } from "./user";
export type User = import("./user").User;
export const User: typeof import("./user").User = null as any;
utilities.lazyLoad(exports, ["User"], () => require("./user"));

export { VolumeInstanceArgs, VolumeInstanceState } from "./volumeInstance";
export type VolumeInstance = import("./volumeInstance").VolumeInstance;
export const VolumeInstance: typeof import("./volumeInstance").VolumeInstance = null as any;
utilities.lazyLoad(exports, ["VolumeInstance"], () => require("./volumeInstance"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "zedcloud:index/application:Application":
                return new Application(name, <any>undefined, { urn })
            case "zedcloud:index/applicationInstance:ApplicationInstance":
                return new ApplicationInstance(name, <any>undefined, { urn })
            case "zedcloud:index/credential:Credential":
                return new Credential(name, <any>undefined, { urn })
            case "zedcloud:index/datastore:Datastore":
                return new Datastore(name, <any>undefined, { urn })
            case "zedcloud:index/edgenode:Edgenode":
                return new Edgenode(name, <any>undefined, { urn })
            case "zedcloud:index/image:Image":
                return new Image(name, <any>undefined, { urn })
            case "zedcloud:index/network:Network":
                return new Network(name, <any>undefined, { urn })
            case "zedcloud:index/networkInstance:NetworkInstance":
                return new NetworkInstance(name, <any>undefined, { urn })
            case "zedcloud:index/patchEnvelope:PatchEnvelope":
                return new PatchEnvelope(name, <any>undefined, { urn })
            case "zedcloud:index/patchReferenceUpdate:PatchReferenceUpdate":
                return new PatchReferenceUpdate(name, <any>undefined, { urn })
            case "zedcloud:index/project:Project":
                return new Project(name, <any>undefined, { urn })
            case "zedcloud:index/role:Role":
                return new Role(name, <any>undefined, { urn })
            case "zedcloud:index/user:User":
                return new User(name, <any>undefined, { urn })
            case "zedcloud:index/volumeInstance:VolumeInstance":
                return new VolumeInstance(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("zedcloud", "index/application", _module)
pulumi.runtime.registerResourceModule("zedcloud", "index/applicationInstance", _module)
pulumi.runtime.registerResourceModule("zedcloud", "index/credential", _module)
pulumi.runtime.registerResourceModule("zedcloud", "index/datastore", _module)
pulumi.runtime.registerResourceModule("zedcloud", "index/edgenode", _module)
pulumi.runtime.registerResourceModule("zedcloud", "index/image", _module)
pulumi.runtime.registerResourceModule("zedcloud", "index/network", _module)
pulumi.runtime.registerResourceModule("zedcloud", "index/networkInstance", _module)
pulumi.runtime.registerResourceModule("zedcloud", "index/patchEnvelope", _module)
pulumi.runtime.registerResourceModule("zedcloud", "index/patchReferenceUpdate", _module)
pulumi.runtime.registerResourceModule("zedcloud", "index/project", _module)
pulumi.runtime.registerResourceModule("zedcloud", "index/role", _module)
pulumi.runtime.registerResourceModule("zedcloud", "index/user", _module)
pulumi.runtime.registerResourceModule("zedcloud", "index/volumeInstance", _module)
pulumi.runtime.registerResourcePackage("zedcloud", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:zedcloud") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
