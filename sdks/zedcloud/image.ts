// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Image extends pulumi.CustomResource {
    /**
     * Get an existing Image resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ImageState, opts?: pulumi.CustomResourceOptions): Image {
        return new Image(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'zedcloud:index/image:Image';

    /**
     * Returns true if the given object is an instance of Image.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Image {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Image.__pulumiType;
    }

    /**
     * Datastore Id where image binary is located.
     */
    public readonly datastoreId!: pulumi.Output<string>;
    /**
     * Detailed description of the image.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Image Architecture.
     */
    public readonly imageArch!: pulumi.Output<string>;
    /**
     * Image upload/uplink detailed error/status message
     */
    public /*out*/ readonly imageError!: pulumi.Output<string>;
    /**
     * Image binary format.
     */
    public readonly imageFormat!: pulumi.Output<string>;
    /**
     * Internal image location.
     */
    public /*out*/ readonly imageLocal!: pulumi.Output<string>;
    /**
     * Image relative path w.r.t. Datastore
     */
    public readonly imageRelUrl!: pulumi.Output<string | undefined>;
    /**
     * Image checksum in SHA256 format
     */
    public readonly imageSha256!: pulumi.Output<string | undefined>;
    /**
     * Image size in KBytes.
     */
    public readonly imageSizeBytes!: pulumi.Output<string | undefined>;
    /**
     * Image status
     */
    public /*out*/ readonly imageStatus!: pulumi.Output<string>;
    /**
     * Image type
     */
    public readonly imageType!: pulumi.Output<string | undefined>;
    /**
     * system defined info
     */
    public readonly imageVersion!: pulumi.Output<string | undefined>;
    /**
     * User defined name of the image, unique across the enterprise. Once image is created, name can’t be changed.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Origin type of image.
     */
    public /*out*/ readonly originType!: pulumi.Output<string>;
    /**
     * project access list of the image
     */
    public readonly projectAccessLists!: pulumi.Output<string[] | undefined>;
    /**
     * system defined info
     */
    public /*out*/ readonly revisions!: pulumi.Output<outputs.ImageRevision[]>;
    /**
     * User defined title of the image. Title can be changed at any time.
     */
    public readonly title!: pulumi.Output<string>;

    /**
     * Create a Image resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ImageArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ImageArgs | ImageState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ImageState | undefined;
            resourceInputs["datastoreId"] = state ? state.datastoreId : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["imageArch"] = state ? state.imageArch : undefined;
            resourceInputs["imageError"] = state ? state.imageError : undefined;
            resourceInputs["imageFormat"] = state ? state.imageFormat : undefined;
            resourceInputs["imageLocal"] = state ? state.imageLocal : undefined;
            resourceInputs["imageRelUrl"] = state ? state.imageRelUrl : undefined;
            resourceInputs["imageSha256"] = state ? state.imageSha256 : undefined;
            resourceInputs["imageSizeBytes"] = state ? state.imageSizeBytes : undefined;
            resourceInputs["imageStatus"] = state ? state.imageStatus : undefined;
            resourceInputs["imageType"] = state ? state.imageType : undefined;
            resourceInputs["imageVersion"] = state ? state.imageVersion : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["originType"] = state ? state.originType : undefined;
            resourceInputs["projectAccessLists"] = state ? state.projectAccessLists : undefined;
            resourceInputs["revisions"] = state ? state.revisions : undefined;
            resourceInputs["title"] = state ? state.title : undefined;
        } else {
            const args = argsOrState as ImageArgs | undefined;
            if ((!args || args.datastoreId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'datastoreId'");
            }
            if ((!args || args.imageArch === undefined) && !opts.urn) {
                throw new Error("Missing required property 'imageArch'");
            }
            if ((!args || args.imageFormat === undefined) && !opts.urn) {
                throw new Error("Missing required property 'imageFormat'");
            }
            if ((!args || args.title === undefined) && !opts.urn) {
                throw new Error("Missing required property 'title'");
            }
            resourceInputs["datastoreId"] = args ? args.datastoreId : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["imageArch"] = args ? args.imageArch : undefined;
            resourceInputs["imageFormat"] = args ? args.imageFormat : undefined;
            resourceInputs["imageRelUrl"] = args ? args.imageRelUrl : undefined;
            resourceInputs["imageSha256"] = args ? args.imageSha256 : undefined;
            resourceInputs["imageSizeBytes"] = args ? args.imageSizeBytes : undefined;
            resourceInputs["imageType"] = args ? args.imageType : undefined;
            resourceInputs["imageVersion"] = args ? args.imageVersion : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["projectAccessLists"] = args ? args.projectAccessLists : undefined;
            resourceInputs["title"] = args ? args.title : undefined;
            resourceInputs["imageError"] = undefined /*out*/;
            resourceInputs["imageLocal"] = undefined /*out*/;
            resourceInputs["imageStatus"] = undefined /*out*/;
            resourceInputs["originType"] = undefined /*out*/;
            resourceInputs["revisions"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Image.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Image resources.
 */
export interface ImageState {
    /**
     * Datastore Id where image binary is located.
     */
    datastoreId?: pulumi.Input<string>;
    /**
     * Detailed description of the image.
     */
    description?: pulumi.Input<string>;
    /**
     * Image Architecture.
     */
    imageArch?: pulumi.Input<string>;
    /**
     * Image upload/uplink detailed error/status message
     */
    imageError?: pulumi.Input<string>;
    /**
     * Image binary format.
     */
    imageFormat?: pulumi.Input<string>;
    /**
     * Internal image location.
     */
    imageLocal?: pulumi.Input<string>;
    /**
     * Image relative path w.r.t. Datastore
     */
    imageRelUrl?: pulumi.Input<string>;
    /**
     * Image checksum in SHA256 format
     */
    imageSha256?: pulumi.Input<string>;
    /**
     * Image size in KBytes.
     */
    imageSizeBytes?: pulumi.Input<string>;
    /**
     * Image status
     */
    imageStatus?: pulumi.Input<string>;
    /**
     * Image type
     */
    imageType?: pulumi.Input<string>;
    /**
     * system defined info
     */
    imageVersion?: pulumi.Input<string>;
    /**
     * User defined name of the image, unique across the enterprise. Once image is created, name can’t be changed.
     */
    name?: pulumi.Input<string>;
    /**
     * Origin type of image.
     */
    originType?: pulumi.Input<string>;
    /**
     * project access list of the image
     */
    projectAccessLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * system defined info
     */
    revisions?: pulumi.Input<pulumi.Input<inputs.ImageRevision>[]>;
    /**
     * User defined title of the image. Title can be changed at any time.
     */
    title?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Image resource.
 */
export interface ImageArgs {
    /**
     * Datastore Id where image binary is located.
     */
    datastoreId: pulumi.Input<string>;
    /**
     * Detailed description of the image.
     */
    description?: pulumi.Input<string>;
    /**
     * Image Architecture.
     */
    imageArch: pulumi.Input<string>;
    /**
     * Image binary format.
     */
    imageFormat: pulumi.Input<string>;
    /**
     * Image relative path w.r.t. Datastore
     */
    imageRelUrl?: pulumi.Input<string>;
    /**
     * Image checksum in SHA256 format
     */
    imageSha256?: pulumi.Input<string>;
    /**
     * Image size in KBytes.
     */
    imageSizeBytes?: pulumi.Input<string>;
    /**
     * Image type
     */
    imageType?: pulumi.Input<string>;
    /**
     * system defined info
     */
    imageVersion?: pulumi.Input<string>;
    /**
     * User defined name of the image, unique across the enterprise. Once image is created, name can’t be changed.
     */
    name?: pulumi.Input<string>;
    /**
     * project access list of the image
     */
    projectAccessLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * User defined title of the image. Title can be changed at any time.
     */
    title: pulumi.Input<string>;
}
