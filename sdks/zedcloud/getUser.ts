// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getUser(args: GetUserArgs, opts?: pulumi.InvokeOptions): Promise<GetUserResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("zedcloud:index/getUser:getUser", {
        "allowedEnterprises": args.allowedEnterprises,
        "customUserInput": args.customUserInput,
        "email": args.email,
        "firstName": args.firstName,
        "fullName": args.fullName,
        "hubspotId": args.hubspotId,
        "lastLoginTime": args.lastLoginTime,
        "lastLogoutTime": args.lastLogoutTime,
        "locale": args.locale,
        "notifyPref": args.notifyPref,
        "phone": args.phone,
        "roleId": args.roleId,
        "sfdcId": args.sfdcId,
        "timeZone": args.timeZone,
        "type": args.type,
        "username": args.username,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getUser.
 */
export interface GetUserArgs {
    allowedEnterprises?: inputs.GetUserAllowedEnterprise[];
    customUserInput?: {[key: string]: string};
    email: string;
    firstName?: string;
    fullName?: string;
    hubspotId?: string;
    lastLoginTime?: string;
    lastLogoutTime?: string;
    locale?: string;
    notifyPref?: string;
    phone?: string;
    roleId: string;
    sfdcId?: string;
    timeZone?: string;
    type?: string;
    username: string;
}

/**
 * A collection of values returned by getUser.
 */
export interface GetUserResult {
    readonly allowedEnterprises?: outputs.GetUserAllowedEnterprise[];
    readonly customUserInput?: {[key: string]: string};
    readonly email: string;
    readonly emailState: string;
    readonly enterpriseId: string;
    readonly firstName?: string;
    readonly fullName?: string;
    readonly hubspotId?: string;
    readonly id: string;
    readonly lastLoginTime?: string;
    readonly lastLogoutTime?: string;
    readonly locale?: string;
    readonly notifyPref?: string;
    readonly phone?: string;
    readonly phoneState: string;
    readonly revisions: outputs.GetUserRevision[];
    readonly roleId: string;
    readonly sfdcId?: string;
    readonly state: string;
    readonly timeZone?: string;
    readonly totpEnabled: boolean;
    readonly type?: string;
    readonly username: string;
}
export function getUserOutput(args: GetUserOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetUserResult> {
    return pulumi.output(args).apply((a: any) => getUser(a, opts))
}

/**
 * A collection of arguments for invoking getUser.
 */
export interface GetUserOutputArgs {
    allowedEnterprises?: pulumi.Input<pulumi.Input<inputs.GetUserAllowedEnterpriseArgs>[]>;
    customUserInput?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    email: pulumi.Input<string>;
    firstName?: pulumi.Input<string>;
    fullName?: pulumi.Input<string>;
    hubspotId?: pulumi.Input<string>;
    lastLoginTime?: pulumi.Input<string>;
    lastLogoutTime?: pulumi.Input<string>;
    locale?: pulumi.Input<string>;
    notifyPref?: pulumi.Input<string>;
    phone?: pulumi.Input<string>;
    roleId: pulumi.Input<string>;
    sfdcId?: pulumi.Input<string>;
    timeZone?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    username: pulumi.Input<string>;
}
