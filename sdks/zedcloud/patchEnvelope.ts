// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class PatchEnvelope extends pulumi.CustomResource {
    /**
     * Get an existing PatchEnvelope resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PatchEnvelopeState, opts?: pulumi.CustomResourceOptions): PatchEnvelope {
        return new PatchEnvelope(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'zedcloud:index/patchEnvelope:PatchEnvelope';

    /**
     * Returns true if the given object is an instance of PatchEnvelope.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PatchEnvelope {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PatchEnvelope.__pulumiType;
    }

    /**
     * Flag to represent whether device needs to present it to app instance
     */
    public readonly action!: pulumi.Output<string>;
    /**
     * Patch envelope artifacts
     */
    public readonly artifacts!: pulumi.Output<outputs.PatchEnvelopeArtifact[]>;
    /**
     * Detailed description of the patch envelope.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * number of devices referencing this patch envelope
     */
    public readonly deviceCount!: pulumi.Output<number | undefined>;
    /**
     * User defined name of the patch envelope, unique across the enterprise. Once patch envelope is created, name can’t be
     * changed.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * project id
     */
    public readonly projectId!: pulumi.Output<string>;
    /**
     * project name
     */
    public readonly projectName!: pulumi.Output<string>;
    /**
     * system defined info
     */
    public /*out*/ readonly revisions!: pulumi.Output<outputs.PatchEnvelopeRevision[]>;
    /**
     * User defined title of the patch envelope. Title can be changed at any time.
     */
    public readonly title!: pulumi.Output<string>;
    /**
     * User defined version for the given patch envelope
     */
    public readonly userDefinedVersion!: pulumi.Output<string | undefined>;

    /**
     * Create a PatchEnvelope resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PatchEnvelopeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PatchEnvelopeArgs | PatchEnvelopeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PatchEnvelopeState | undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["artifacts"] = state ? state.artifacts : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["deviceCount"] = state ? state.deviceCount : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["projectName"] = state ? state.projectName : undefined;
            resourceInputs["revisions"] = state ? state.revisions : undefined;
            resourceInputs["title"] = state ? state.title : undefined;
            resourceInputs["userDefinedVersion"] = state ? state.userDefinedVersion : undefined;
        } else {
            const args = argsOrState as PatchEnvelopeArgs | undefined;
            if ((!args || args.action === undefined) && !opts.urn) {
                throw new Error("Missing required property 'action'");
            }
            if ((!args || args.artifacts === undefined) && !opts.urn) {
                throw new Error("Missing required property 'artifacts'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            if ((!args || args.projectName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectName'");
            }
            if ((!args || args.title === undefined) && !opts.urn) {
                throw new Error("Missing required property 'title'");
            }
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["artifacts"] = args ? args.artifacts : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["deviceCount"] = args ? args.deviceCount : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["projectName"] = args ? args.projectName : undefined;
            resourceInputs["title"] = args ? args.title : undefined;
            resourceInputs["userDefinedVersion"] = args ? args.userDefinedVersion : undefined;
            resourceInputs["revisions"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PatchEnvelope.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering PatchEnvelope resources.
 */
export interface PatchEnvelopeState {
    /**
     * Flag to represent whether device needs to present it to app instance
     */
    action?: pulumi.Input<string>;
    /**
     * Patch envelope artifacts
     */
    artifacts?: pulumi.Input<pulumi.Input<inputs.PatchEnvelopeArtifact>[]>;
    /**
     * Detailed description of the patch envelope.
     */
    description?: pulumi.Input<string>;
    /**
     * number of devices referencing this patch envelope
     */
    deviceCount?: pulumi.Input<number>;
    /**
     * User defined name of the patch envelope, unique across the enterprise. Once patch envelope is created, name can’t be
     * changed.
     */
    name?: pulumi.Input<string>;
    /**
     * project id
     */
    projectId?: pulumi.Input<string>;
    /**
     * project name
     */
    projectName?: pulumi.Input<string>;
    /**
     * system defined info
     */
    revisions?: pulumi.Input<pulumi.Input<inputs.PatchEnvelopeRevision>[]>;
    /**
     * User defined title of the patch envelope. Title can be changed at any time.
     */
    title?: pulumi.Input<string>;
    /**
     * User defined version for the given patch envelope
     */
    userDefinedVersion?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a PatchEnvelope resource.
 */
export interface PatchEnvelopeArgs {
    /**
     * Flag to represent whether device needs to present it to app instance
     */
    action: pulumi.Input<string>;
    /**
     * Patch envelope artifacts
     */
    artifacts: pulumi.Input<pulumi.Input<inputs.PatchEnvelopeArtifact>[]>;
    /**
     * Detailed description of the patch envelope.
     */
    description?: pulumi.Input<string>;
    /**
     * number of devices referencing this patch envelope
     */
    deviceCount?: pulumi.Input<number>;
    /**
     * User defined name of the patch envelope, unique across the enterprise. Once patch envelope is created, name can’t be
     * changed.
     */
    name?: pulumi.Input<string>;
    /**
     * project id
     */
    projectId: pulumi.Input<string>;
    /**
     * project name
     */
    projectName: pulumi.Input<string>;
    /**
     * User defined title of the patch envelope. Title can be changed at any time.
     */
    title: pulumi.Input<string>;
    /**
     * User defined version for the given patch envelope
     */
    userDefinedVersion?: pulumi.Input<string>;
}
