// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class User extends pulumi.CustomResource {
    /**
     * Get an existing User resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UserState, opts?: pulumi.CustomResourceOptions): User {
        return new User(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'zedcloud:index/user:User';

    /**
     * Returns true if the given object is an instance of User.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is User {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === User.__pulumiType;
    }

    /**
     * Permitted list of enterprises with their associated roles
     */
    public readonly allowedEnterprises!: pulumi.Output<outputs.UserAllowedEnterprise[] | undefined>;
    /**
     * Custom user parameters
     */
    public readonly customUserInput!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Email of the user
     */
    public readonly email!: pulumi.Output<string>;
    /**
     * Email state
     */
    public /*out*/ readonly emailState!: pulumi.Output<string>;
    /**
     * Origin enterprise of the user
     */
    public /*out*/ readonly enterpriseId!: pulumi.Output<string>;
    /**
     * First name of the user
     */
    public readonly firstName!: pulumi.Output<string | undefined>;
    /**
     * Full name of the user
     */
    public readonly fullName!: pulumi.Output<string | undefined>;
    public readonly hubspotId!: pulumi.Output<string | undefined>;
    /**
     * Last login time of the user
     */
    public readonly lastLoginTime!: pulumi.Output<string | undefined>;
    /**
     * Last logout time of the user
     */
    public readonly lastLogoutTime!: pulumi.Output<string | undefined>;
    /**
     * Locale of the user
     */
    public readonly locale!: pulumi.Output<string | undefined>;
    /**
     * Notification preference of the user
     */
    public readonly notifyPref!: pulumi.Output<string | undefined>;
    /**
     * Phone number of the user
     */
    public readonly phone!: pulumi.Output<string | undefined>;
    /**
     * Phone state
     */
    public /*out*/ readonly phoneState!: pulumi.Output<string>;
    /**
     * system defined info
     */
    public /*out*/ readonly revisions!: pulumi.Output<outputs.UserRevision[]>;
    /**
     * Role associated with the user
     */
    public readonly roleId!: pulumi.Output<string>;
    public readonly sfdcId!: pulumi.Output<string | undefined>;
    /**
     * User state
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * Preferred time zone of the user
     */
    public readonly timeZone!: pulumi.Output<string | undefined>;
    /**
     * Is TOTP enrolment enabled
     */
    public /*out*/ readonly totpEnabled!: pulumi.Output<boolean>;
    /**
     * Type of the user
     */
    public readonly type!: pulumi.Output<string | undefined>;
    /**
     * User defined name
     */
    public readonly username!: pulumi.Output<string>;

    /**
     * Create a User resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UserArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UserArgs | UserState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UserState | undefined;
            resourceInputs["allowedEnterprises"] = state ? state.allowedEnterprises : undefined;
            resourceInputs["customUserInput"] = state ? state.customUserInput : undefined;
            resourceInputs["email"] = state ? state.email : undefined;
            resourceInputs["emailState"] = state ? state.emailState : undefined;
            resourceInputs["enterpriseId"] = state ? state.enterpriseId : undefined;
            resourceInputs["firstName"] = state ? state.firstName : undefined;
            resourceInputs["fullName"] = state ? state.fullName : undefined;
            resourceInputs["hubspotId"] = state ? state.hubspotId : undefined;
            resourceInputs["lastLoginTime"] = state ? state.lastLoginTime : undefined;
            resourceInputs["lastLogoutTime"] = state ? state.lastLogoutTime : undefined;
            resourceInputs["locale"] = state ? state.locale : undefined;
            resourceInputs["notifyPref"] = state ? state.notifyPref : undefined;
            resourceInputs["phone"] = state ? state.phone : undefined;
            resourceInputs["phoneState"] = state ? state.phoneState : undefined;
            resourceInputs["revisions"] = state ? state.revisions : undefined;
            resourceInputs["roleId"] = state ? state.roleId : undefined;
            resourceInputs["sfdcId"] = state ? state.sfdcId : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["timeZone"] = state ? state.timeZone : undefined;
            resourceInputs["totpEnabled"] = state ? state.totpEnabled : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
        } else {
            const args = argsOrState as UserArgs | undefined;
            if ((!args || args.email === undefined) && !opts.urn) {
                throw new Error("Missing required property 'email'");
            }
            if ((!args || args.roleId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roleId'");
            }
            if ((!args || args.username === undefined) && !opts.urn) {
                throw new Error("Missing required property 'username'");
            }
            resourceInputs["allowedEnterprises"] = args ? args.allowedEnterprises : undefined;
            resourceInputs["customUserInput"] = args ? args.customUserInput : undefined;
            resourceInputs["email"] = args ? args.email : undefined;
            resourceInputs["firstName"] = args ? args.firstName : undefined;
            resourceInputs["fullName"] = args ? args.fullName : undefined;
            resourceInputs["hubspotId"] = args ? args.hubspotId : undefined;
            resourceInputs["lastLoginTime"] = args ? args.lastLoginTime : undefined;
            resourceInputs["lastLogoutTime"] = args ? args.lastLogoutTime : undefined;
            resourceInputs["locale"] = args ? args.locale : undefined;
            resourceInputs["notifyPref"] = args ? args.notifyPref : undefined;
            resourceInputs["phone"] = args ? args.phone : undefined;
            resourceInputs["roleId"] = args ? args.roleId : undefined;
            resourceInputs["sfdcId"] = args ? args.sfdcId : undefined;
            resourceInputs["timeZone"] = args ? args.timeZone : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
            resourceInputs["emailState"] = undefined /*out*/;
            resourceInputs["enterpriseId"] = undefined /*out*/;
            resourceInputs["phoneState"] = undefined /*out*/;
            resourceInputs["revisions"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["totpEnabled"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(User.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering User resources.
 */
export interface UserState {
    /**
     * Permitted list of enterprises with their associated roles
     */
    allowedEnterprises?: pulumi.Input<pulumi.Input<inputs.UserAllowedEnterprise>[]>;
    /**
     * Custom user parameters
     */
    customUserInput?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Email of the user
     */
    email?: pulumi.Input<string>;
    /**
     * Email state
     */
    emailState?: pulumi.Input<string>;
    /**
     * Origin enterprise of the user
     */
    enterpriseId?: pulumi.Input<string>;
    /**
     * First name of the user
     */
    firstName?: pulumi.Input<string>;
    /**
     * Full name of the user
     */
    fullName?: pulumi.Input<string>;
    hubspotId?: pulumi.Input<string>;
    /**
     * Last login time of the user
     */
    lastLoginTime?: pulumi.Input<string>;
    /**
     * Last logout time of the user
     */
    lastLogoutTime?: pulumi.Input<string>;
    /**
     * Locale of the user
     */
    locale?: pulumi.Input<string>;
    /**
     * Notification preference of the user
     */
    notifyPref?: pulumi.Input<string>;
    /**
     * Phone number of the user
     */
    phone?: pulumi.Input<string>;
    /**
     * Phone state
     */
    phoneState?: pulumi.Input<string>;
    /**
     * system defined info
     */
    revisions?: pulumi.Input<pulumi.Input<inputs.UserRevision>[]>;
    /**
     * Role associated with the user
     */
    roleId?: pulumi.Input<string>;
    sfdcId?: pulumi.Input<string>;
    /**
     * User state
     */
    state?: pulumi.Input<string>;
    /**
     * Preferred time zone of the user
     */
    timeZone?: pulumi.Input<string>;
    /**
     * Is TOTP enrolment enabled
     */
    totpEnabled?: pulumi.Input<boolean>;
    /**
     * Type of the user
     */
    type?: pulumi.Input<string>;
    /**
     * User defined name
     */
    username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a User resource.
 */
export interface UserArgs {
    /**
     * Permitted list of enterprises with their associated roles
     */
    allowedEnterprises?: pulumi.Input<pulumi.Input<inputs.UserAllowedEnterprise>[]>;
    /**
     * Custom user parameters
     */
    customUserInput?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Email of the user
     */
    email: pulumi.Input<string>;
    /**
     * First name of the user
     */
    firstName?: pulumi.Input<string>;
    /**
     * Full name of the user
     */
    fullName?: pulumi.Input<string>;
    hubspotId?: pulumi.Input<string>;
    /**
     * Last login time of the user
     */
    lastLoginTime?: pulumi.Input<string>;
    /**
     * Last logout time of the user
     */
    lastLogoutTime?: pulumi.Input<string>;
    /**
     * Locale of the user
     */
    locale?: pulumi.Input<string>;
    /**
     * Notification preference of the user
     */
    notifyPref?: pulumi.Input<string>;
    /**
     * Phone number of the user
     */
    phone?: pulumi.Input<string>;
    /**
     * Role associated with the user
     */
    roleId: pulumi.Input<string>;
    sfdcId?: pulumi.Input<string>;
    /**
     * Preferred time zone of the user
     */
    timeZone?: pulumi.Input<string>;
    /**
     * Type of the user
     */
    type?: pulumi.Input<string>;
    /**
     * User defined name
     */
    username: pulumi.Input<string>;
}
